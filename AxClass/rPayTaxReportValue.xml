<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayTaxReportValue</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rPayTaxReportValue
{
    RPayTaxEmplSum      rPayTaxEmplSum;
    RPayTaxEmplTrans    rPayTaxEmplTrans;
    RPayTmpTaxEmplTrans tmpValue;
    RPayTaxIncomeTable  rPayTaxIncomeTable;
    KeySum              stdDeductions;
    RHRMEmplId          emplId;
    boolean             taxByBranch;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assessedDeductionAmountRateBranch</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayAmount assessedDeductionAmountRateBranch(BranchId_RU _branchId, RPayRateCode _taxRateCode)
    {
        select firstonly tmpValue
              where tmpValue.rPayRateCode == _taxRateCode &&
                    tmpValue.RpayTaxType  == RpayTaxType::Deduction &&
                    (!taxByBranch || tmpValue.BranchId == _branchId);

        return this.getAssessedDeductionAmount(tmpValue.RpayTaxIncomeGroupCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>assessedDeductionQuery</Name>
				<Source><![CDATA[
    private Query assessedDeductionQuery(RpayTaxDeductionCode _payTaxDeductionCode = 0)
    {
        Query                 query;
        QueryBuildDataSource  queryBuildDataSource;
        RPayTaxParameters     rPayTaxParameters = RPayTaxParameters::find();

        if (rPayTaxParameters.AssessedDeduction)
        {
            query = new Query();
            queryBuildDataSource = query.addDataSource(tablenum(RpayTmpTaxEmplTrans));
            queryBuildDataSource.addRange(fieldnum(RpayTmpTaxEmplTrans, RpayTaxType)).value(queryValue(RpayTaxType::Deduction));

            if (!prmisDefault(_payTaxDeductionCode))
            {
                queryBuildDataSource.addRange(fieldnum(RpayTmpTaxEmplTrans, RpayTaxIncDedCode)).value(queryValue(_payTaxDeductionCode));
            }
            else
            {
                queryBuildDataSource.addRange(fieldnum(RpayTmpTaxEmplTrans, RpayTaxIncDedCode)).value(rPayTaxParameters.AssessedDeduction);
            }
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDeductionCurrent</Name>
				<Source><![CDATA[
    #RpayModuleName
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayAmount calcDeductionCurrent(RpayTaxDeductionCode _deductionCode,
                                           ReportPeriod_RU      _payPeriod,
                                           RHRMEmplTable        _emplTable)
    {
        RPayAmount              deductionAmount;
        rPayCalculate_Tax       payCalculate;
        RPayTaxDeductionTable   rPayTaxDeductionTable =  RPayTaxDeductionTable::find(_deductionCode);
        RPayRateCallContext     rateContext;

        rateContext = RPayRateCallContext::construct(_payPeriod, _emplTable.EmployeeId);
        rateContext.parmPersonId(_emplTable.personTable().PersonnelNumber);

        if (_deductionCode == RPayRateTable::find(rPayTaxDeductionTable.RpayRateCodeEmpl).getValue(rateContext))
        {
            if (rPayTaxDeductionTable.RpaySequence)
            {
                payCalculate = new rPayCalculate_Tax(RPayModuleTable::find(#ModuleNameTax));
                payCalculate.setSourceTable(_emplTable);
                payCalculate.setSeqTable(RPaySeqTable::find(rPayTaxDeductionTable.RpaySequence));
                payCalculate.payPeriod(_payPeriod);
                payCalculate.calcSequence();
                deductionAmount = payCalculate.getCurrentValue();
            }
            else
            {
                deductionAmount = RPayRateTable::find(rPayTaxDeductionTable.RpayRateCodeValue).getValue(rateContext);
            }
        }

        return deductionAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssessedDeductionAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayAmount getAssessedDeductionAmount(RpayTaxIncomeGroupCode _groupCode)
    {
        Query                query;
        SysQueryRun          sysQueryRun;
        RPayTmpTaxEmplTrans  rPpayTmpTaxEmplTrans;
        QueryBuildDataSource queryBuildDataSource;

        query = this.assessedDeductionQuery();

        if (query)
        {
            queryBuildDataSource = query.dataSourceTable(tableNum(RPayTmpTaxEmplTrans));
            queryBuildDataSource.addSelectionField(fieldNum(RPayTmpTaxEmplTrans, Amount),SelectionField::Sum);
            queryBuildDataSource.addRange(fieldNum(RPayTmpTaxEmplTrans, RpayTaxIncomeGroupCode)).value(queryValue(_groupCode));
            queryBuildDataSource.orderMode(OrderMode::GroupBy);
            sysQueryRun = new SysQueryRun(query);
            sysQueryRun.setRecord(tmpValue);

            if (sysQueryRun.next())
            {
                rPpayTmpTaxEmplTrans = sysQueryRun.get(tableNum(RPayTmpTaxEmplTrans));
            }
        }
        return rPpayTmpTaxEmplTrans.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssessedDeductionDocument</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container getAssessedDeductionDocument(RpayTaxDeductionCode _payTaxDeductionCode = 0)
    {
        Query                query;
        SysQueryRun          sysQueryRun;
        RPayTmpTaxEmplTrans  rPpayTmpTaxEmplTrans;
        QueryBuildDataSource queryBuildDataSource;
        RPayRateTrans        rPayRateTrans;
        RPayTaxDeductionTable   taxDeductionTable;
        container            con = [dateNull(), ''];

        if (!prmisDefault(_payTaxDeductionCode))
        {
            query = this.assessedDeductionQuery(_payTaxDeductionCode);
        }
        else
        {
            query = this.assessedDeductionQuery();
        }

        if (query)
        {
            queryBuildDataSource = query.dataSourceTable(tableNum(RPayTmpTaxEmplTrans));
            queryBuildDataSource.addSortField(fieldNum(RPayTmpTaxEmplTrans, PayPeriod),SortOrder::Descending);
            queryBuildDataSource.firstOnly(true);
            sysQueryRun = new SysQueryRun(query);
            sysQueryRun.setRecord(tmpValue);

            if (sysQueryRun.next())
            {
                rPpayTmpTaxEmplTrans = sysQueryRun.get(tableNum(RPayTmpTaxEmplTrans));
                taxDeductionTable = RPayTaxDeductionTable::find(rPpayTmpTaxEmplTrans.RpayTaxIncDedCode);
                rPayRateTrans = RPayRateTrans::find(taxDeductionTable.RpayRateCodeValue, rPpayTmpTaxEmplTrans.PayPeriod, emplId);

                if (!rPayRateTrans)
                {
                    rPayRateTrans = RPayRateTrans::find(taxDeductionTable.RpayRateCodeValue, rPpayTmpTaxEmplTrans.PayPeriod);
                }

                con =[rPayRateTrans.DocDate, rPayRateTrans.DocNumber];
            }
        }
        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeductionByCode</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container getDeductionByCode(RPayRateCode _payRateCode)
    {
        container con,conItem;
        int       i = 1;

        while select sum(Amount) from tmpValue
              group by RpayTaxIncDedCode
              where tmpValue.rPayRateCode == _payRateCode &&
                    tmpValue.RpayTaxType  == RpayTaxType::Deduction
        {
            conItem = [tmpValue.RpayTaxIncDedCode,tmpValue.Amount];
            con = conPoke(con,i,conItem);
            i++;
        }

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeductionByCodeBranch</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container getDeductionByCodeBranch(RPayRateCode _payRateCode, BranchId_RU _branchId)
    {
        container con,conItem;
        int       i = 1;

        while select sum(Amount) from tmpValue
              group by RpayTaxIncDedCode
              where tmpValue.rPayRateCode == _payRateCode &&
                    tmpValue.RpayTaxType  == RpayTaxType::Deduction &&
                    (!taxByBranch || tmpValue.BranchId == _branchId)
        {
            if (tmpValue.Amount)
            {
                conItem = [tmpValue.RpayTaxIncDedCode,tmpValue.Amount];
                con = conPoke(con,i,conItem);
                i++;
            }
        }

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeductionByCodeStatus</Name>
				<Source><![CDATA[
    //obsoleted method
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container getDeductionByCodeStatus(RPayRateCode _payRateCode, RPayEmplTaxStatus _taxStatus)
    {
        container con,conItem;
        int       i = 1;

        while select sum(Amount) from tmpValue
              group by RpayTaxIncDedCode
              where tmpValue.rPayRateCode == _payRateCode &&
                    tmpValue.RpayTaxType  == RpayTaxType::Deduction &&
                    tmpValue.TaxStatus    == _taxStatus
        {
            conItem = [tmpValue.RpayTaxIncDedCode,tmpValue.Amount];
            con = conPoke(con,i,conItem);
            i++;
        }

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeductionByDeductionCode</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container getDeductionByDeductionCode(RpayTaxIncomeGroupCode _groupCode, container _deductionCodes)
    {
        container               con, conItem;
        int                     i;
        RpayTaxIncDedCode       con_element;
        real                    total;

        for (i = 1; i <= conLen(_deductionCodes); i++)
        {
            total       = 0;
            conItem     = [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00];
            con_element = conPeek(_deductionCodes,i);
            while select tmpValue
                where tmpValue.RpayTaxType            == RpayTaxType::Income &&
                      tmpValue.RpayTaxIncomeGroupCode == _groupCode &&
                      tmpValue.RpayTaxDeductionCode   == con_element
            {
                total   += tmpValue.Deduction;
                conItem = conPoke(conItem,mthOfYr(tmpValue.PayPeriod),tmpValue.Deduction);
            }
            conItem = conPoke(conItem,13,total);
            con     = conIns(con,i,conItem);
        }
        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeductionByType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container getDeductionByType(RPayRateCode _taxRateCode, NoYes _isAssessedDeduction)
    {
        container             con,conItem;
        int                   i = 1;
        Query                 query;
        SysQueryRun           sysQueryRun;
        RPayTmpTaxEmplTrans   rPpayTmpTaxEmplTrans;
        QueryBuildDataSource  queryBuildDataSource;
        RPayTaxParameters     rPayTaxParameters = RPayTaxParameters::find();

        query = new Query();
        queryBuildDataSource = query.addDataSource(tableNum(RPayTmpTaxEmplTrans));
        queryBuildDataSource.addRange(fieldNum(RPayTmpTaxEmplTrans, RpayTaxType)).value(queryValue(RpayTaxType::Deduction));

        queryBuildDataSource.orderMode(OrderMode::GroupBy);
        queryBuildDataSource.addSortField(fieldNum(RPayTmpTaxEmplTrans, RpayTaxIncDedCode));

        queryBuildDataSource.addSelectionField(fieldNum(RPayTmpTaxEmplTrans, Amount),SelectionField::Sum);
        queryBuildDataSource.addRange(fieldNum(RPayTmpTaxEmplTrans, rPayRateCode)).value(queryValue(_taxRateCode));

        queryBuildDataSource = queryBuildDataSource.addDataSource(tableNum(RPayTaxDeductionTable));
        queryBuildDatasource.addRange(fieldnum(RPayTaxDeductionTable, RPayTaxDeductionCode)).value(rPayTaxParameters.AssessedDeduction);
        queryBuildDataSource.addLink(fieldNum(RPayTmpTaxEmplTrans, RpayTaxIncDedCode), fieldNum(RPayTaxDeductionTable, RpayTaxDeductionCode));

        if (_isAssessedDeduction)
        {
            queryBuildDataSource.joinMode(JoinMode::ExistsJoin);
        }
        else
        {
            queryBuildDataSource.joinMode(JoinMode::NoExistsJoin);
        }

        sysQueryRun = new SysQueryRun(query);
        sysQueryRun.setRecord(tmpValue);

        while (sysQueryRun.next())
        {
            rPpayTmpTaxEmplTrans = sysQueryRun.get(tableNum(RPayTmpTaxEmplTrans));

            conItem = [rPpayTmpTaxEmplTrans.RpayTaxIncDedCode,rPpayTmpTaxEmplTrans.Amount];
            con = conPoke(con,i,conItem);
            i++;
        }

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIncDedByMonth</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Map getIncDedByMonth(RPayRateCode _payRateCode)
    {
        Map map = new Map(Types::Container,Types::Container);

        while select sum(Amount), sum(Deduction) from tmpValue
            group by PayPeriod, RpayTaxIncDedCode, RpayTaxDeductionCode
            where tmpValue.rPayRateCode == _payRateCode &&
                  tmpValue.RpayTaxType  == RpayTaxType::Income
        {
            map.insert([tmpValue.PayPeriod,tmpValue.RpayTaxIncDedCode,tmpValue.RpayTaxDeductionCode],[tmpValue.Amount,tmpValue.Deduction]);
        }

        return map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIncDedByMonthBranch</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Map getIncDedByMonthBranch(RPayRateCode _payRateCode, BranchId_RU _branchId)
    {
        Map map = new Map(Types::Container,Types::Container);

        while select sum(Amount), sum(Deduction) from tmpValue
            group by PayPeriod, RpayTaxIncDedCode, RpayTaxDeductionCode
            where tmpValue.rPayRateCode == _payRateCode &&
                  tmpValue.RpayTaxType  == RpayTaxType::Income &&
                  (!taxByBranch || tmpValue.BranchId == _branchId)
        {
            map.insert([tmpValue.PayPeriod,tmpValue.RpayTaxIncDedCode,tmpValue.RpayTaxDeductionCode],[tmpValue.Amount,tmpValue.Deduction]);
        }

        return map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIncDedByMonthStatus</Name>
				<Source><![CDATA[
    //obsoleted method
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Map getIncDedByMonthStatus(RPayRateCode _payRateCode, RPayEmplTaxStatus _taxStatus)
    {
        Map map = new Map(Types::Container,Types::Container);

        while select sum(Amount), sum(Deduction) from tmpValue
            group by PayPeriod, RpayTaxIncDedCode, RpayTaxDeductionCode
            where tmpValue.rPayRateCode == _payRateCode &&
                  tmpValue.RpayTaxType  == RpayTaxType::Income &&
                  tmpValue.TaxStatus    == _taxStatus
        {
            map.insert([tmpValue.PayPeriod,tmpValue.RpayTaxIncDedCode,tmpValue.RpayTaxDeductionCode],[tmpValue.Amount,tmpValue.Deduction]);
        }

        return map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIncomeByIncDedCode</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container getIncomeByIncDedCode(RpayTaxIncomeGroupCode _groupCode, container _incDedCodes)
    {
        container               con, conItem;
        int                     i;
        RpayTaxIncDedCode       con_element;
        real                    total;

        for (i = 1; i <= conLen(_incDedCodes); i++)
        {
            total       = 0;
            conItem     = [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00];
            con_element = conPeek(_incDedCodes,i);
            while select tmpValue
                where tmpValue.RpayTaxType            == RpayTaxType::Income &&
                      tmpValue.RpayTaxIncomeGroupCode == _groupCode &&
                      tmpValue.RpayTaxIncDedCode      == con_element
            {
                total   += tmpValue.Amount;
                conItem = conPoke(conItem,mthOfYr(tmpValue.PayPeriod),tmpValue.Amount);
            }
            conItem = conPoke(conItem,13,total);
            con     = conIns(con,i,conItem);
        }
        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIncomeByMonth</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container getIncomeByMonth(RPayRateCode _payRateCode, BranchId_RU _branchId)
    {
        container con = [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0];

        while select sum(Amount), sum(Deduction) from tmpValue
                group by PayPeriod
                where tmpValue.RpayTaxType  == RpayTaxType::Income &&
                      tmpValue.rPayRateCode == _payRateCode        &&
                     (!taxByBranch || tmpValue.BranchId == _branchId)
        {
            con = conPoke(con, mthOfYr(tmpValue.PayPeriod), tmpValue.Amount - tmpValue.Deduction);
        }

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMonthDeductionByCode</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container getMonthDeductionByCode(RPayRateCode _payRateCode, BranchId_RU _branchId)
    {
        container               con, conItem;
        int                     i = 1;
        RpayTaxDeductionCode    old_code = 0;
        RPayAmount              total = 0;

        while select tmpValue order by RpayTaxIncDedCode
            where tmpValue.RpayTaxType  == RpayTaxType::Income &&
                  tmpValue.rPayRateCode == _payRateCode        &&
                 (!taxByBranch || tmpValue.BranchId == _branchId)
        {
            rPayTaxIncomeTable = RPayTaxIncomeTable::find(tmpValue.RpayTaxIncDedCode);
            if (tmpValue.RpayTaxDeductionCode)
            {
                if (tmpValue.RpayTaxDeductionCode != old_code)
                {
                    if (i != 1)
                    {
                        conItem = conPoke(conItem,14,total);
                        con     = conPoke(con,i-1,conItem);
                    }
                    conItem  = [0,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00];
                    conItem  = conPoke(conItem,1,tmpValue.RpayTaxDeductionCode);

                    old_code = tmpValue.RpayTaxDeductionCode;
                    total    = 0;
                    i++;
                }
                total   += tmpValue.Deduction;
                conItem = conPoke(conItem,mthOfYr(tmpValue.PayPeriod) + 1,tmpValue.Deduction);
            }
        }
        if (old_code)
        {
            conItem = conPoke(conItem,14,total);
            con     = conPoke(con,i-1,conItem);
        }
        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMonthIncomeByCode</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container getMonthIncomeByCode(RPayRateCode _payRateCode,  BranchId_RU _branchId)
    {
        container           con, conItem;
        int                 i = 1, idx;
        RpayTaxIncDedCode   old_code = 0;
        RPayAmount          total = 0;

        while select tmpValue order by RpayTaxIncDedCode
            where tmpValue.RpayTaxType  == RpayTaxType::Income &&
                  tmpValue.rPayRateCode == _payRateCode        &&
                 (!taxByBranch || tmpValue.BranchId == _branchId)
        {
            rPayTaxIncomeTable = RPayTaxIncomeTable::find(tmpValue.RpayTaxIncDedCode);

            if (tmpValue.RpayTaxIncDedCode != old_code)
            {
                if (i != 1)
                {
                    conItem = conPoke(conItem,14,total);
                    con     = conPoke(con,i-1,conItem);
                }
                conItem  = [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00];
                conItem  = conPoke(conItem, 1, tmpValue.RpayTaxIncDedCode);
                old_code = tmpValue.RpayTaxIncDedCode;
                total    = 0;
                i++;
            }

            total   += tmpValue.Amount;
            idx = mthOfYr(tmpValue.PayPeriod) + 1;
            conItem = conPoke(conItem, idx, conPeek(conItem, idx) + tmpValue.Amount);
        }

        if (old_code)
        {
            conItem = conPoke(conItem, 14, total);
            con     = conPoke(con, i-1, conItem);
        }

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMonthStandardDeductionByCode</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container getMonthStandardDeductionByCode(RpayTaxIncomeGroupCode _groupCode)
    {
        container               con, conItem;
        int                     i = 1;
        RpayTaxDeductionCode    old_code = 0;
        RPayAmount              total = 0;

        while select tmpValue order by RpayTaxIncDedCode
            where tmpValue.RpayTaxType            == RpayTaxType::Deduction &&
                  tmpValue.RpayTaxIncomeGroupCode == _groupCode
        {
            if (tmpValue.RpayTaxIncDedCode != old_code)
            {
                if (i != 1)
                {
                    conItem = conPoke(conItem,14,total);
                    con     = conPoke(con,i-1,conItem);
                }
                conItem  = [0,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00];
                conItem  = conPoke(conItem,1,tmpValue.RpayTaxIncDedCode);
                old_code = tmpValue.RpayTaxIncDedCode;
                total    = 0;
                i++;
            }
            total   += tmpValue.Amount;
            conItem = conPoke(conItem,mthOfYr(tmpValue.PayPeriod) + 1,tmpValue.Amount);
        }

        if (old_code)
        {
            conItem = conPoke(conItem,14,total);
            con     = conPoke(con,i-1,conItem);
        }

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReversedIncDedByMonthBranch</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Map getReversedIncDedByMonthBranch(RPayRateCode _payRateCode, BranchId_RU _branchId, RPayAmount _incomeAmountTotal)
    {
        Map         map     = new Map(Types::Container,Types::Container);
        RPayAmount  amount  = abs(_incomeAmountTotal), transAmount, deductionAmount;
        int         idx;
        container   con;
        TransDate   tmpPayPeriod;

        while select sum(Amount), sum(Deduction) from tmpValue
            group by PayPeriod desc, RpayTaxIncDedCode asc
            where tmpValue.rPayRateCode == _payRateCode         &&
                  tmpValue.RpayTaxType  == RpayTaxType::Income  &&
                  (!taxByBranch || tmpValue.BranchId == _branchId)
        {
            if (tmpPayPeriod != tmpValue.PayPeriod)
            {
                idx = stdDeductions.key2Index_W([_branchId, tmpValue.PayPeriod, _payRateCode]);

                if (idx)
                {
                    con = stdDeductions.index2Data(idx);
                    deductionAmount = conPeek(con, 1);
                }
                else
                {
                    deductionAmount = 0;
                }
                tmpPayPeriod = tmpValue.PayPeriod;
            }

            if (deductionAmount >= (tmpValue.Amount - tmpValue.Deduction))
            {
                deductionAmount -= tmpValue.Amount - tmpValue.Deduction;
                transAmount      = 0;
            }
            else
            {
                transAmount     = tmpValue.Amount - tmpValue.Deduction - deductionAmount;
                deductionAmount = 0;
            }

            if (transAmount != 0)
            {
                if (amount >= abs(transAmount))
                {
                    map.insert([tmpValue.PayPeriod,tmpValue.RpayTaxIncDedCode, ''],[transAmount, 0]);
                }
                else
                {
                    map.insert([tmpValue.PayPeriod,tmpValue.RpayTaxIncDedCode, ''],[sign(_incomeAmountTotal) * amount, 0]);
                    break;
                }

                amount -= abs(transAmount);
            }
        }

        return map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReversedIncDedByMonthStatus</Name>
				<Source><![CDATA[
    //obsoleted method
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Map getReversedIncDedByMonthStatus(RPayRateCode _payRateCode, RPayEmplTaxStatus _taxStatus, RPayAmount _incomeAmountTotal)
    {
        Map         map     = new Map(Types::Container,Types::Container);
        RPayAmount  amount  = abs(_incomeAmountTotal), transAmount, deductionAmount;
        int         idx;
        container   con;
        TransDate   tmpPayPeriod;

        while select sum(Amount), sum(Deduction) from tmpValue
            group by PayPeriod desc, RpayTaxIncDedCode asc
            where tmpValue.rPayRateCode == _payRateCode         &&
                  tmpValue.RpayTaxType  == RpayTaxType::Income  &&
                  tmpValue.TaxStatus    == _taxStatus
        {
            if (tmpPayPeriod != tmpValue.PayPeriod)
            {
                idx = stdDeductions.key2Index_W([_taxStatus, tmpValue.PayPeriod, _payRateCode]);

                if (idx)
                {
                    con = stdDeductions.index2Data(idx);
                    deductionAmount = conPeek(con, 1);
                }
                else
                {
                    deductionAmount = 0;
                }
                tmpPayPeriod = tmpValue.PayPeriod;
            }

            if (deductionAmount >= (tmpValue.Amount - tmpValue.Deduction))
            {
                deductionAmount -= tmpValue.Amount - tmpValue.Deduction;
                transAmount      = 0;
            }
            else
            {
                transAmount     = tmpValue.Amount - tmpValue.Deduction - deductionAmount;
                deductionAmount = 0;
            }

            if (transAmount != 0)
            {
                if (amount >= abs(transAmount))
                {
                    map.insert([tmpValue.PayPeriod,tmpValue.RpayTaxIncDedCode, ''],[transAmount, 0]);
                }
                else
                {
                    map.insert([tmpValue.PayPeriod,tmpValue.RpayTaxIncDedCode, ''],[sign(_incomeAmountTotal) * amount, 0]);
                    break;
                }

                amount -= abs(transAmount);
            }
        }

        return map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void new(RHRMEmplId              _emplId,
                    ReportPeriod_RU         _payPeriod,
                    RPayRateValue           _nonResident    = 0,
                    boolean                 _taxByBranch    = false,
                    TransDate               _reportDate     = _payPeriod,
                    RPayCorrectedPeriod     _corrPeriod     = dateNull())
    {
        RPayTaxIncomeGroupTable rPayTaxIncomeGroupTable;
        stdDeductions = KeySum::construct(1, 1);

        emplId      = _emplId;
        taxByBranch = _taxByBranch;

        if (_corrPeriod)
        {
            select rPayTaxEmplTrans
                join rPayTaxEmplSum
                where rPayTaxEmplSum.EmplId             == emplId                           &&
                      rPayTaxEmplSum.Source             == NoYes::No                        &&
                    ((rPayTaxEmplSum.CorrectedPeriod    == dateNull()                       &&
                      rPayTaxEmplSum.PayPeriod          >= endmth(dateStartYr(_corrPeriod)) &&
                      rPayTaxEmplSum.PayPeriod          <= endmth(_corrPeriod))             ||
                     (rPayTaxEmplSum.CorrectedPeriod    != dateNull()                       &&
                      rPayTaxEmplSum.CorrectedPeriod    >= endmth(dateStartYr(_corrPeriod)) &&
                      rPayTaxEmplSum.CorrectedPeriod    <= endmth(_corrPeriod)))            &&
                      rPayTaxEmplSum.PayPeriod          <= _reportDate                      &&
                      rPayTaxEmplTrans.TaxSumRecId      == rPayTaxEmplSum.RecId;
        }
        else
        {
            select rPayTaxEmplTrans
                join rPayTaxEmplSum
                where rPayTaxEmplSum.EmplId             == emplId                           &&
                      rPayTaxEmplSum.Source             == NoYes::No                        &&
                      rPayTaxEmplSum.PayPeriod          >= endmth(dateStartYr(_payPeriod))  &&
                      rPayTaxEmplSum.PayPeriod          <= endmth(_payPeriod)               &&
                      rPayTaxEmplSum.PayPeriod          <= _reportDate                      &&
                      rPayTaxEmplTrans.TaxSumRecId      == rPayTaxEmplSum.RecId;
        }

        while (rPayTaxEmplTrans)
        {
            rPayTaxIncomeGroupTable = RPayTaxIncomeGroupTable::findCode(rPayTaxEmplSum.RpayTaxIncomeGroupCode);

            tmpValue.PayPeriod                  = rPayTaxEmplSum.CorrectedPeriod ? rPayTaxEmplSum.CorrectedPeriod : rPayTaxEmplSum.PayPeriod;
            tmpValue.RpayTaxIncomeGroupCode     = rPayTaxEmplSum.RpayTaxIncomeGroupCode;
            tmpValue.rPayRateCode               = rPayTaxEmplSum.TaxRateCode;
            tmpValue.RpayTaxType                = rPayTaxEmplTrans.RpayTaxType;
            tmpValue.RpayTaxIncDedCode          = rPayTaxEmplTrans.RpayTaxIncDedCode;
            tmpValue.RpayTaxDeductionCode       = rPayTaxEmplTrans.RpayTaxDeductionCode;
            tmpValue.Amount                     = rPayTaxEmplTrans.Amount;
            tmpValue.Deduction                  = rPayTaxEmplTrans.Deduction;
            tmpValue.TaxStatus                  = rPayTaxEmplSum.taxStatus();
            tmpValue.BranchId                   = taxByBranch ? rPayTaxEmplSum.BranchId : '';
            tmpValue.insert();

            if (rPayTaxEmplTrans.RpayTaxType == RpayTaxType::Deduction)
            {
                stdDeductions.updateNow([tmpValue.BranchId, tmpValue.PayPeriod, tmpValue.rPayRateCode], [tmpValue.Amount]);
            }

            next rPayTaxEmplTrans;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalDeductionAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayAmount totalDeductionAmount(RPayRateCode _payRateCode)
    {
        RPayAmount amount;

        select sum(Deduction) from tmpValue
            where tmpValue.rPayRateCode == _payRateCode &&
                  tmpValue.RpayTaxType  == RpayTaxType::Income;

        amount += tmpValue.Deduction;

        select sum(Amount) from tmpValue
            where tmpValue.rPayRateCode == _payRateCode &&
                  tmpValue.RpayTaxType  == RpayTaxType::Deduction;

        amount += tmpValue.Amount;

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalStdDeductionAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayAmount totalStdDeductionAmount(RPayRateCode _payRateCode, BranchId_RU _branchId)
    {
        RPayAmount amount;

        select sum(Amount) from tmpValue
            where tmpValue.rPayRateCode == _payRateCode &&
                  (!taxByBranch || tmpValue.BranchId == _branchId)   &&
                  tmpValue.RpayTaxType  == RpayTaxType::Deduction;

        amount += tmpValue.Amount;

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowParmIntersection</Name>
				<Source><![CDATA[
    //check 2-NDFL report parameters allowed intersection
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static boolean allowParmIntersection(RPayNDFLSelectEmpl _selectEmpl, RPayNDFLType _reportType)
    {
        boolean ret;

        switch (_reportType)
        {
            case RPayNDFLType::TaxCode:
                ret = _selectEmpl == RPayNDFLSelectEmpl::NoDebt || _selectEmpl == RPayNDFLSelectEmpl::All;
                break;

            case RPayNDFLType::EmplDebt:
                ret = _selectEmpl == RPayNDFLSelectEmpl::Debt;
                break;

            case RPayNDFLType::All:
                ret = _selectEmpl == RPayNDFLSelectEmpl::All;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcFutureLastPeriod</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static container calcFutureLastPeriod(
        RHRMEmplId      _emplId,
        RPayRateCode    _taxRateCode,
        BranchId_RU     _branchId,
        TransDate       _periodFrom,
        TransDate       _periodTo,
        boolean         _taxByBranch = false)
    {
        container con;

        con = RPayTaxEmplSum::taxSumForRateBranch(_emplId,
                                                  _taxRateCode,
                                                  _branchId,
                                                  endmth(dateStartYr(_periodFrom)),
                                                  endmth(_periodTo),
                                                  true,
                                                  _taxByBranch,
                                                  endmth(_periodTo));

        if (year(_periodFrom) < year(_periodTo))
        {
            con = conPoke(con, 9, -1 * conPeek(con, 9));
            con = conPoke(con, 8, -1 * conPeek(con, 8));
        }

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcReverseIncomeAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static RPayAmount calcReverseIncomeAmount(RPayRateCode _taxRateCode, ReportPeriod_RU _payPeriod, RPayAmount _taxAmount, boolean _useRounded = true)
    {
        RPayRateValue   rateValue;
        RPayAmount      taxDebt, baseAmount;
        real roundDifference = _useRounded ? 0.49 : 0;
        RPayRateCallContext rateContext;

        taxDebt = _taxAmount - roundDifference;

        if (taxDebt < 0)
        {
            baseAmount = 0;
        }
        else
        {
            rateContext = RPayRateCallContext::construct(_payPeriod);
            rateValue = RPayRateTable::find(_taxRateCode).getValue(rateContext);
            if (rateValue)
            {
                baseAmount = CurrencyExchangeHelper::amount(taxDebt * 100 / rateValue);
            }
            else
            {
                baseAmount = 0;
                warning(strFmt("@RUP3403", _taxRateCode, _payPeriod));
            }
        }

        return baseAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>emplTaxStatus2ReportStatus</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static int emplTaxStatus2ReportStatus(RPayEmplTaxStatus _emplTaxStatus)
    {
        switch (_emplTaxStatus)
        {
            case RPayEmplTaxStatus::Resident:
                return 1;

            case RPayEmplTaxStatus::Nonresident:
                return 2;

            case RPayEmplTaxStatus::HighPaid:
                return 3;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalAmounts</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static container getTotalAmounts(RHRMEmplId         _emplId,
                                     RPayRateCode       _taxRateCode,
                                     BranchId_RU        _branchId,
                                     TransDate          _payPeriod,
                                     TransDate          _reportDate,
                                     TransDate          _periodStart    = endmth(dateStartYr(_payPeriod)),
                                     boolean            _negative       = false,
                                     boolean            _calcTaxPayment = false,
                                     boolean            _taxByBranch    = false)
    {
        container conRet, con, conDebt, con1, con2;
        RPayAmount currentValue;
        int i;
        #define.paymentYear(2011)

        real roundTaxAmount(RPayAmount _amount)
        {
            return round(_amount, RPayTaxParameters::find().TaxRound);
        }

        con = RPayTaxEmplSum::taxSumForRateBranch(_emplId,
                                                  _taxRateCode,
                                                  _branchId,
                                                  _periodStart,
                                                  endmth(_payPeriod),
                                                  true,
                                                  _taxByBranch,
                                                  _reportDate);

        conDebt = RPayTaxReportValue::calcFutureLastPeriod(_emplId,
                                                           _taxRateCode,
                                                           _branchId,
                                                           _periodStart,
                                                           _reportDate,
                                                           _taxByBranch);

        conRet += conPeek(con, 1); //5.1

        for (i = 1; i <= mthOfYr(_payPeriod); i ++)
        {
            con1 = RPayTaxEmplSum::taxSumForRateBranch(_emplId,
                                                       _taxRateCode,
                                                       _branchId,
                                                       endmth(mkDate(1, i, year(_payPeriod))),
                                                       endmth(mkDate(1, i, year(_payPeriod))),
                                                       true,
                                                       _taxByBranch,
                                                       _reportDate);

            con2 = RPayTaxEmplSum::taxSumForRateBranch(_emplId,
                                                       _taxRateCode,
                                                       _branchId,
                                                       _periodStart,
                                                       endmth(mkDate(1, i, year(_payPeriod))),
                                                       true,
                                                       _taxByBranch,
                                                       _reportDate);

            if ((conPeek(con2, 1) - conPeek(con2, 2) - conPeek(con2, 3)) >= 0)
            {
                currentValue = (conPeek(con2, 1) - conPeek(con2, 2) - conPeek(con2, 3));
            }
        }

        conRet += currentValue > 0 ? currentValue : 0; //5.2
        conRet += roundTaxAmount(conPeek(con, 5)); //5.3

        currentValue = conPeek(con,4) + conPeek(conDebt, 9) + conPeek(conDebt, 8) - conPeek(con, 11);
        conRet += (currentValue > 0 || _negative) ? roundTaxAmount(currentValue) : 0; //5.4

        if (_calcTaxPayment)
        {
            conRet += year(_payPeriod) >= #paymentYear ?
                      roundTaxAmount(RPayTaxTransOpen::taxPaymForRateStatus(_emplId,
                                                                            _taxRateCode,
                                                                            _branchId,
                                                                            dateStartMth(_periodStart),
                                                                            endmth(_payPeriod),
                                                                            _taxByBranch)) : 0; //5.5
        }
        else
        {
            conRet += year(_payPeriod) >= #paymentYear ? roundTaxAmount(currentValue) : 0; //5.5
        }

        if (currentValue < 0 && conPeek(con, 11) && _negative) //storno
        {
            conRet += 0;
            conRet += 0;
        }
        else
        {
            //5.6
            if (currentValue > roundTaxAmount(conPeek(con, 5)))
            {
                conRet += currentValue - roundTaxAmount(conPeek(con, 5));
            }
            else
            {
                conRet += 0;
            }

            //5.7
            if (currentValue < roundTaxAmount(conPeek(con, 5)))
            {
                conRet += roundTaxAmount(conPeek(con, 5) - currentValue);
            }
            else
            {
                conRet += 0;
            }
        }

        return conRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalAmountsMonth</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static container getTotalAmountsMonth(RHRMEmplId        _emplId,
                                          RPayRateCode      _taxRateCode,
                                          BranchId_RU       _branchId,
                                          TransDate         _payPeriod,
                                          TransDate         _reportDate,
                                          boolean           _negative       = false,
                                          boolean           _calcTaxPayment = false,
                                          boolean           _taxByBranch    = false)
    {
        container con, conMonth;
        TransDate      currentPeriod = endmth(dateStartYr(_payPeriod));

        while (currentPeriod <= _payPeriod)
        {
            con             = RPayTaxReportValue::getTotalAmounts(_emplId,
                                                                  _taxRateCode,
                                                                  _branchId,
                                                                  currentPeriod,
                                                                  _reportDate,
                                                                  currentPeriod,
                                                                  _negative,
                                                                  _calcTaxPayment,
                                                                  _taxByBranch);

            conMonth        = conPoke(conMonth, mthOfYr(currentPeriod), con);
            currentPeriod   = endmth(nextMth(currentPeriod));
        }

        return conMonth;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
