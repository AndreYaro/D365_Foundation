<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AgreementGenerationPurchToSalesStrategy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>AgreementGenerationPurchToSalesStrategy</c> class is the strategy class for creating a sales
///    agreement from a purchase agreement.
/// </summary>
class AgreementGenerationPurchToSalesStrategy extends AgreementGenerationStrategy
{
    CustTable               custTable;
    PurchAgreementHeader    purchAgreementHeader;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createAgreementHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the purchase agreement header.
    /// </summary>
    public void createAgreementHeader()
    {
        AgreementHeaderDefault  agreementHeaderDefault;
        // <GEERU>
        PurchAgreementHeaderExt_RU purchAgreementHeaderExt;

        if (intraCompany_RU)
        {
            purchAgreementHeader.intracompanySync_RU(true);

            purchAgreementHeaderExt = PurchAgreementHeaderExt_RU::findByPurchAgreementHeader(purchAgreementHeader.RecId);
            if (purchAgreementHeaderExt)
            {
                purchAgreementHeaderExt.intracompanySync(true);
            }
        }
        else
        {
        // </GEERU>
            purchAgreementHeader.intercompanySync(true);
        // <GEERU>
        }
        // </GEERU>

        agreementHeaderDefault = AgreementHeaderDefault::findAgreementHeader(purchAgreementHeader.RecId);
        if (agreementHeaderDefault.RecId)
        {
            // <GEERU>
            if (intraCompany_RU)
            {
                agreementHeaderDefault.intracompanySyncPurchToSales_RU(true);
                SalesAgreementHeaderDefault::createFromPurchaseAgreementHeaderRecId(purchAgreementHeader.RecId, true);
            }
            else
            {
            // </GEERU>
                agreementHeaderDefault.intercompanySyncPurchToSales(true);
                SalesAgreementHeaderDefault::createFromPurchaseAgreementHeaderRecId(purchAgreementHeader.RecId);
            // <GEERU>
            }
            // </GEERU>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAgreementLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the sales agreement lines.
    /// </summary>
    public void createAgreementLines()
    {
        AgreementLineQuantityCommitment agreementLine;

        // <GEERU>
        AgreementLineExt_RU agreementLineExt;

        if (intraCompany_RU)
        {
            while select agreementLine
                where agreementLine.Agreement == purchAgreementHeader.RecId
                exists join agreementLineExt
                    where agreementLineExt.AgreementLine == agreementLine.RecId
                        && !agreementLineExt.SkipIntraCompanySync
            {
                agreementLine.intracompanySync_RU();
            }
        }
        else
        {
        // </GEERU>
            while select agreementLine
                where agreementLine.Agreement == purchAgreementHeader.RecId
                   && !agreementLine.IsDeleted
            {
                agreementLine.intercompanySync();
            }
        // <GEERU>
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>createdAgreementHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the header buffer of the created sales agreement.
    /// </summary>
    /// <returns>
    ///    The header buffer of the created sales agreement.
    /// </returns>
    public AgreementHeader createdAgreementHeader()
    {
        // <GEERU>
        if (intraCompany_RU)
        {
            return purchAgreementHeader.salesAgreementHeader_RU();
        }
        // </GEERU>
        return purchAgreementHeader.salesAgreementHeader();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustVendTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the customer record that is used for creating the sales agreement.
    /// </summary>
    public void setCustVendTable()
    {
        VendTable                           vendTable;

        purchAgreementHeader = this.parmCallerRecord() as PurchAgreementHeader;
        vendTable            = purchAgreementHeader.vendTable();
        // <GEERU>
        if (intraCompany_RU)
        {
            custVendTable = CustTable::findByPartyRecId(vendTable.Party);
        }
        else
        {
        // </GEERU>
            custVendTable = CustTable::find(vendTable.interCompanyTradingPartnerAccount());
        // <GEERU>
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static AgreementGenerationPurchToSalesStrategy construct()
    {
        return new AgreementGenerationPurchToSalesStrategy();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>