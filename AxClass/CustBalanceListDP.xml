<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustBalanceListDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustBalanceListDP</c> class is the data provider for the <c>CustBalanceList</c> report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(CustBalanceListContract)),
    SRSReportQueryAttribute(queryStr(CustBalanceList))
]
public class CustBalanceListDP extends SRSReportDataProviderPreProcessTempDB
{
    CustBalanceListTmp custBalanceListTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCustBalanceListTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the actual data for the report from the temporary table.
    /// </summary>
    /// <returns>
    ///    The <c>CustBalanceListTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(CustBalanceListTmp))
    ]
    public CustBalanceListTmp getCustBalanceListTmp()
    {
        select custBalanceListTmp;
        return custBalanceListTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves records based on the parameter values and inserts the records into the temporary table.
    /// </summary>
    public void processReport()
    {
        CustTable custTable;
        CustTrans custTrans;
        CustSettlement custSettlement;
        CustBalanceListContract contract;
        NoYes exceededLimit;
        NoYes zeroBalance;
        TransDate asOfDate;
        CustCreditMaxCheck creditMaxCheck;
        QueryRun custTableQr;
        RecordInsertList recordInsertList;
        CustBalanceListTmpStaging custBalanceListTmpStaging1;
        CustBalanceListTmpStaging custBalanceListTmpStaging2;
        int orderByCounter;

        this.takeOwnershipOfTempTable(custBalanceListTmpStaging1);
        this.takeOwnershipOfTempTable(custBalanceListTmpStaging2);

        contract = this.parmDataContract();
        if (contract)
        {
            asOfDate = contract.parmAsOfDate();
            exceededLimit = contract.parmExceededLimit();
            zeroBalance = contract.parmZeroBalance();
        }

        custTableQr = new QueryRun(this.parmQuery());
        creditMaxCheck = CustParameters::find().CreditMaxCheck;
        orderByCounter = 0;

        recordInsertList = new RecordInsertList(custBalanceListTmp.TableId, true, true, true, false, true, custBalanceListTmp);

        while (custTableQr.next())
        {
            custTable = custTableQr.get(tableNum(CustTable));

            this.initCustBalanceListTmp(custTable, creditMaxCheck, orderByCounter);

            orderByCounter++;

            recordInsertList.add(custBalanceListTmp);
        }

        recordInsertList.insertDatabase();

        insert_recordset custBalanceListTmpStaging1 (AccountNum, AmountMST)
            select AccountNum from custBalanceListTmp
                join sum(AmountMST) from custTrans
                    group by custBalanceListTmp.AccountNum
                        where custTrans.AccountNum == custBalanceListTmp.AccountNum
                            && custTrans.TransDate <= asOfDate;

        insert_recordset custBalanceListTmpStaging2 (AccountNum, ExchAdjustment, SettleAmountMST)
            select AccountNum from custBalanceListTmp
                join sum(ExchAdjustment), sum(SettleAmountMST) from custSettlement
                    group by custBalanceListTmp.AccountNum
                        where custSettlement.AccountNum == custBalanceListTmp.AccountNum
                            && custSettlement.TransDate <= asOfDate;

        update_recordSet custBalanceListTmp
            setting
                Balance = custBalanceListTmpStaging1.AmountMST - (custBalanceListTmpStaging2.SettleAmountMST - custBalanceListTmpStaging2.ExchAdjustment)
            outer join custBalanceListTmpStaging1
                where custBalanceListTmp.AccountNum == custBalanceListTmpStaging1.AccountNum
            outer join custBalanceListTmpStaging2
                where custBalanceListTmp.AccountNum == custBalanceListTmpStaging2.AccountNum;

        update_recordSet custBalanceListTmp
            setting
                AmountExceeded = custBalanceListTmp.Balance - custBalanceListTmp.CreditMax
            where custBalanceListTmp.MandatoryCreditLimit
                    || creditMaxCheck != TypeOfCreditmaxCheck::None;

        if (exceededLimit == NoYes::Yes)
        {
            delete_from custBalanceListTmp where custBalanceListTmp.AmountExceeded <= 0;
        }
        else
        {
            update_recordSet custBalanceListTmp
                setting
                    AmountExceeded = 0
                where
                    custBalanceListTmp.AmountExceeded < 0;
        }

        if (zeroBalance == NoYes::No)
        {
            delete_from custBalanceListTmp where custBalanceListTmp.Balance == 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustBalanceListTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>CustBalanceListTmp</c> temporary table.
    /// </summary>
    /// <param name = "_custTable">
    /// A table buffer that contains the <c>CustTable</c> values.
    /// </param>
    /// <param name = "_creditMaxCheck">
    /// A <c>TypeOfCreditmaxCheck</c> enumeration value.
    /// </param>
    /// <param name = "_orderByCounter">
    /// The counter to sort order.
    /// </param>
    [Wrappable(true)]
    protected final void initCustBalanceListTmp(
        CustTable _custTable,
        CustCreditMaxCheck _creditMaxCheck,
        int _orderByCounter)
    {
        custBalanceListTmp.clear();

        custBalanceListTmp.AccountNum = _custTable.AccountNum;
        custBalanceListTmp.Name = _custTable.name();
        custBalanceListTmp.CreditMaxCheck = _creditMaxCheck;
        custBalanceListTmp.MandatoryCreditLimit = _custTable.MandatoryCreditLimit;
        custBalanceListTmp.CreditRating = _custTable.CreditRating;
        custBalanceListTmp.CreditMax = _custTable.CreditMax;
        custBalanceListTmp.Blocked = _custTable.Blocked;
        custBalanceListTmp.SortOrder = _orderByCounter;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>