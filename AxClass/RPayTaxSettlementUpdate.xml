<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayTaxSettlementUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayTaxSettlementUpdate
{
    Voucher                                 voucher;
    TransDate                               transDate;
    FromDate                                fromDate,
                                            taxFromDate;
    ToDate                                  toDate,
                                            taxToDate;
    PaymentOrderBudgetReceiptClassCode_RU   budgetClassCode;
    RPayTaxVendor                           taxAuthorityVendor;
    RPayBranchFilterType                    branchFilterType;
    QueryRun                                queryRunBase;
    RPayTaxSettlement                       rPayTaxSettlement;
    Set                                     classCodeList;

    SpecTransManager                        specTransManager;

    #localmacro.PeriodValue
        '(\%1.'   + fieldstr(RPayTaxTransOpen, TransDate) +
        '== \%2.' + fieldstr(RpayTrans,        PayPeriod) + ')'
    #endmacro

    #localmacro.BudgetReceiptClassCode
        '(\%1.'   + fieldstr(RPayTaxTransOpen,        BudgetReceiptClassCode) +
        '== \%2.' + fieldstr(RPayTaxIncomeGroupTable, PaymBudgetReceiptClassCode) + ')'
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBranchesStr</Name>
				<Source><![CDATA[
    private str getBranchesStr()
    {
        str res;
        Branches_RU branches, branchEmpty;

        ttsbegin;
        branchEmpty.BranchId = '';
        branchEmpty.doInsert();

        queryRunBase.reset();
        while (queryRunBase.next())
        {
            branches = queryRunBase.get(tablenum(Branches_RU));
            res += (branches.BranchId ? branches.BranchId : SysQuery::valueEmptyString()) + ',';
        }
        branchEmpty.doDelete();
        ttscommit;

        res = strdel(res, strlen(res), -1);
        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initClassCodeList</Name>
				<Source><![CDATA[
    private void initClassCodeList()
    {
        PaymentOrderBudgetReceiptClassTable_RU  budgetClassTable;
        QueryRun                                queryRun;
        Query                                   query = new Query();

        query.addDataSource(tablenum(PaymentOrderBudgetReceiptClassTable_RU)).
            addRange(fieldnum(PaymentOrderBudgetReceiptClassTable_RU,
                              PaymentOrderBudgetReceiptClassCode)).value(budgetClassCode);

        queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            budgetClassTable = queryRun.get(tablenum(PaymentOrderBudgetReceiptClassTable_RU));
            classCodeList.add(budgetClassTable.PaymentOrderBudgetReceiptClassCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void new(RPayTaxPeriodicSettlement _settlement)
    {
        transDate           = _settlement.transDate();
        fromDate            = _settlement.fromDate();
        toDate              = _settlement.toDate();
        budgetClassCode     = _settlement.budgetClassCode();
        taxAuthorityVendor  = _settlement.taxAuthorityVendor();
        branchFilterType    = _settlement.branchFilterType();
        queryRunBase        = new QueryRun(_settlement.queryRun().pack());
        classCodeList       = new Set(Types::String);

        taxFromDate         = mkdate(1, 1, _settlement.taxPeriod());
        taxToDate           = endMth(dateMthFwd(RPayParameters::payPeriod(), -1));

        if (year(taxToDate) > _settlement.taxPeriod())
        {
            taxToDate = mkdate(31, 12, _settlement.taxPeriod());
        }

        if (budgetClassCode)
        {
            this.initClassCodeList();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>qrIncomeTax</Name>
				<Source><![CDATA[
    private QueryRun qrIncomeTax()
    {
        QueryBuildDataSource    dataSource;
        QueryBuildRange         range;
        Query                   query = new Query();

        dataSource = query.addDataSource(tablenum(RPayTaxIncomeGroupTable));

        if (budgetClassCode)
        {
            range = dataSource.addRange(fieldnum(RPayTaxIncomeGroupTable, PaymBudgetReceiptClassCode));
            range.value(budgetClassCode);
        }

        dataSource = dataSource.addDataSource(tablenum(RPayTrans));
        dataSource.joinMode(JoinMode::InnerJoin);
        dataSource.relations(false);
        dataSource.addLink(fieldnum(RPayTaxIncomeGroupTable, RpayTaxIncomeGroupCode), fieldnum(RPayTrans, TaxIncomeGroupCode));

        range = dataSource.addRange(fieldnum(RPayTrans, PayPeriod));
        range.value(queryRange(taxFromDate, taxToDate));

        range = dataSource.addRange(fieldnum(RPayTrans, TaxRedemption));
        range.value(queryValue(NoYes::No));

        range = dataSource.addRange(fieldnum(RPayTrans, BranchId));
        range = this.setBranchFilter(range);

        dataSource = dataSource.addDataSource(tablenum(RPayTaxTransOpen));
        dataSource.joinMode(JoinMode::NoExistsJoin);
        dataSource.relations(false);
        dataSource.addLink(fieldnum(RPayTrans, TableId), fieldnum(RPayTaxTransOpen, RefTableId));
        dataSource.addLink(fieldnum(RPayTrans, EmplId),  fieldnum(RPayTaxTransOpen, EmplId));
        dataSource.addLink(fieldnum(RPayTrans, BranchId),fieldnum(RPayTaxTransOpen, BranchId));

        range = dataSource.addRange(fieldnum(RPayTaxTransOpen, TaxSourceType));
        range.value(queryValue(RPayTaxSourceType::IncomeTax));

        range = dataSource.addRange(fieldnum(RPayTaxTransOpen, TransDate));
        range.value(strfmt(#PeriodValue,
                           dataSource.name(),
                           query.dataSourceTable(tablenum(RPayTrans)).name()));

        range = dataSource.addRange(fieldnum(RPayTaxTransOpen, BudgetReceiptClassCode));
        range.value(strfmt(#BudgetReceiptClassCode,
                           dataSource.name(),
                           query.dataSourceTable(tablenum(RPayTaxIncomeGroupTable)).name()));

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qrInterimSheet</Name>
				<Source><![CDATA[
    private QueryRun qrInterimSheet(boolean _notExists = true)
    {
        QueryBuildDataSource    dataSource;
        QueryBuildRange         range;
        Query                   query = new Query();

        dataSource = query.addDataSource(tablenum(RPaySheetTable));
        range = dataSource.addRange(fieldnum(RPaySheetTable, TransDate));
        range.value(queryRange(taxFromDate, taxToDate));

        range = dataSource.addRange(fieldnum(RPaySheetTable, Pn));
        range.value(queryValue(NoYes::Yes));

        range = dataSource.addRange(fieldnum(RPaySheetTable, PaySheetType));
        range.value(con2str([RPaySheetType::Interim,
                             RPaySheetType::Vacation,
                             RPaySheetType::Prepayment]));

        if (RPayTaxParameters::find().PaySheetSettle == RPayTaxPaySheetSettle::Paid)
        {
            range = dataSource.addRange(fieldnum(RPaySheetTable, PaySheetSost));
            range.value(queryValue(RPaySheetSost::Paid));
        }

        dataSource = dataSource.addDataSource(tablenum(RPaySheetTrans));
        dataSource.joinMode(JoinMode::InnerJoin);
        dataSource.relations(false);
        dataSource.addLink(fieldnum(RPaySheetTable, RecId), fieldnum(RPaySheetTrans, SheetTableRecId));

        range = dataSource.addRange(fieldnum(RPaySheetTrans, BranchId));
        range = this.setBranchFilter(range);

        if (_notExists)
        {
            dataSource = dataSource.addDataSource(tablenum(RPayTaxTransOpen));
            dataSource.joinMode(JoinMode::NoExistsJoin);
            dataSource.relations(false);
            dataSource.addLink(fieldnum(RPaySheetTrans, TableId), fieldnum(RPayTaxTransOpen, RefTableId));
            dataSource.addLink(fieldnum(RPaySheetTrans, RecId),   fieldnum(RPayTaxTransOpen, RefRecId));
        }

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qrTaxPayment</Name>
				<Source><![CDATA[
    private QueryRun qrTaxPayment()
    {
        QueryBuildDataSource    dataSource;
        QueryBuildRange         range;
        Query                   query           = new Query();
        container               budgetCodeList  = RPayTaxIncomeGroupTable::budgetClassCodeList();

        dataSource = query.addDataSource(tablenum(BankPaymentOrderJour_RU));
        range = dataSource.addRange(fieldnum(BankPaymentOrderJour_RU, PaymentTransDate));
        range.value(queryRange(fromDate, toDate));

        range = dataSource.addRange(fieldnum(BankPaymentOrderJour_RU, PaymBudgetReceiptClassCode));
        range.value(budgetClassCode ? budgetClassCode : con2str(budgetCodeList));

        range = dataSource.addRange(fieldnum(BankPaymentOrderJour_RU, AccountNumRecipient));
        range.value(taxAuthorityVendor);

        dataSource = dataSource.addDataSource(tablenum(GeneralJournalSubledgerVoucher));
        dataSource.joinMode(JoinMode::ExistsJoin);
        dataSource.relations(false);
        dataSource.addLink(fieldnum(BankPaymentOrderJour_RU, Voucher),          fieldnum(GeneralJournalSubledgerVoucher, Voucher));
        dataSource.addLink(fieldnum(BankPaymentOrderJour_RU, JournalTransDate), fieldnum(GeneralJournalSubledgerVoucher, AccountingDate));

        dataSource = query.dataSourceTable(tablenum(BankPaymentOrderJour_RU));
        dataSource = dataSource.addDataSource(tablenum(RPayTaxTransOpen));
        dataSource.joinMode(JoinMode::NoExistsJoin);
        dataSource.relations(false);
        dataSource.addLink(fieldnum(BankPaymentOrderJour_RU, TableId), fieldnum(RPayTaxTransOpen, RefTableId));
        dataSource.addLink(fieldnum(BankPaymentOrderJour_RU, RecId),   fieldnum(RPayTaxTransOpen, RefRecId));

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qrTaxRefund</Name>
				<Source><![CDATA[
    private QueryRun qrTaxRefund()
    {
        QueryBuildDataSource    dataSource;
        QueryBuildRange         range;
        Query                   query = new Query();

        if (RPayTaxParameters::find().TaxRefundSettlement == RPayTaxRefundSettlement::OnPayment)
        {
            dataSource = query.addDataSource(tablenum(RPaySheetTable));
            range = dataSource.addRange(fieldnum(RPaySheetTable, PaySheetSost));
            range.value(queryValue(RPaySheetSost::Paid));

            dataSource = dataSource.addDataSource(tablenum(RPaySheetTrans));
            dataSource.joinMode(JoinMode::InnerJoin);
            dataSource.relations(false);
            dataSource.addLink(fieldnum(RPaySheetTable, RecId), fieldnum(RPaySheetTrans, SheetTableRecId));

            dataSource = dataSource.addDataSource(tablenum(RPayTrans));
            dataSource.joinMode(JoinMode::InnerJoin);
            dataSource.relations(false);
            dataSource.addLink(fieldnum(RPaySheetTrans, RecId), fieldnum(RPayTrans, RefSheetTransRecid));
        }
        else
        {
            dataSource = query.addDataSource(tablenum(RPayTrans));
        }

        range = dataSource.addRange(fieldnum(RPayTrans, PayPeriod));
        range.value(queryRange(taxFromDate, taxToDate));

        range = dataSource.addRange(fieldnum(RPayTrans, TaxRedemption));
        range.value(queryValue(NoYes::Yes));

        range = dataSource.addRange(fieldnum(RPayTrans, BranchId));
        range = this.setBranchFilter(range);

        if (budgetClassCode)
        {
            dataSource = dataSource.addDataSource(tablenum(RPayTaxIncomeGroupTable));
            dataSource.joinMode(JoinMode::ExistsJoin);
            dataSource.relations(false);
            dataSource.addLink(fieldnum(RPayTrans, TaxIncomeGroupCode), fieldnum(RPayTaxIncomeGroupTable, RpayTaxIncomeGroupCode));

            range = dataSource.addRange(fieldnum(RPayTaxIncomeGroupTable, PaymBudgetReceiptClassCode));
            range.value(budgetClassCode);
        }
        else
        {
            range = dataSource.addRange(fieldnum(RPayTrans, TaxIncomeGroupCode));
            range.value(SysQuery::valueNotEmptyString());
        }

        dataSource = dataSource.addDataSource(tablenum(RPayTaxTransOpen));
        dataSource.joinMode(JoinMode::NoExistsJoin);
        dataSource.relations(false);
        dataSource.addLink(fieldnum(RPayTrans, TableId), fieldnum(RPayTaxTransOpen, RefTableId), query.dataSourceTable(tablenum(RPayTrans)).name());
        dataSource.addLink(fieldnum(RPayTrans, EmplId),  fieldnum(RPayTaxTransOpen, EmplId), query.dataSourceTable(tablenum(RPayTrans)).name());
        dataSource.addLink(fieldnum(RPayTrans, BranchId),fieldnum(RPayTaxTransOpen, BranchId), query.dataSourceTable(tablenum(RPayTrans)).name());

        range = dataSource.addRange(fieldnum(RPayTaxTransOpen, TaxSourceType));
        range.value(queryValue(RPayTaxSourceType::TaxRedemption));

        range = dataSource.addRange(fieldnum(RPayTaxTransOpen, TransDate));
        range.value(strfmt(#PeriodValue,
                           dataSource.name(),
                           query.dataSourceTable(tablenum(RPayTrans)).name()));

        if (budgetClassCode)
        {
            range = dataSource.addRange(fieldnum(RPayTaxTransOpen, BudgetReceiptClassCode));
            range.value(strfmt(#BudgetReceiptClassCode,
                               dataSource.name(),
                               query.dataSourceTable(tablenum(RPayTaxIncomeGroupTable)).name()));
        }

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBranchFilter</Name>
				<Source><![CDATA[
    private QueryBuildRange setBranchFilter(QueryBuildRange _range)
    {
        switch (branchFilterType)
        {
            case RPayBranchFilterType::All:
                _range.value(SysQuery::valueUnlimited());
                break;

            case RPayBranchFilterType::OnlyHeader:
                _range.value(SysQuery::valueEmptyString());
                break;

            case RPayBranchFilterType::Query:
                _range.value(rPayTaxSettlement.Branches);
                break;
        }

        return _range;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxSettlement</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayTaxSettlement taxSettlement()
    {;
        rPayTaxSettlement.ExecutedDate           = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        rPayTaxSettlement.FromDate               = min(fromDate, taxFromDate);
        rPayTaxSettlement.ToDate                 = max(toDate, taxToDate);
        rPayTaxSettlement.TransDate              = transDate;
        rPayTaxSettlement.BudgetReceiptClassCode = budgetClassCode;
        rPayTaxSettlement.TaxVendor              = taxAuthorityVendor;
        rPayTaxSettlement.BranchFilterType       = branchFilterType;

        if (branchFilterType == RPayBranchFilterType::Query)
        {
            rPayTaxSettlement.Branches           = this.getBranchesStr();
        }

        rPayTaxSettlement.insert();

        return rPayTaxSettlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void update()
    {
        this.taxSettlement();
        this.updateTransOpen();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransOpen</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateTransOpen()
    {
        RPayTaxTransOpen        rPayTaxTransOpen;
        BankPaymentOrderJour_RU paymentOrderJour;
        RPayTrans               payTrans;
        RPaySheetTable          paySheetTable;
        RPaySheetTrans          paySheetTrans;
        QueryRun                queryRun;
        container               key;
        ReportPeriod_RU         payPeriod;
        MapEnumerator           mapEnumerator;
        RPayTaxPaySheetSettle   paySheetSettle   = RPayTaxParameters::find().PaySheetSettle;
        Map                     mapPaySheetState = new Map(Types::Date, Types::Enum);
        Map                     mapIncomeTax     = new Map(Types::Container, Types::Record); // key = [PayPeriod, BudgetReceiptClassCode, BranchId, EmplId], value = RPayTrans

        PaymentOrderBudgetReceiptClassCode_RU classCode;
        RPayTaxIncomeGroupTable               payTaxIncomeGroupTable;

        void addPayTransToMap()
        {
            RPayTrans   payTransLocal;

            key = [endMth(payTrans.PayPeriod), payTrans.budgetReceiptClassCode(), payTrans.BranchId, payTrans.EmplId];

            if (mapIncomeTax.exists(key))
            {
                payTransLocal = mapIncomeTax.lookup(key);
                payTransLocal.Amount += payTrans.Amount;
                mapIncomeTax.insert(key, payTransLocal);
            }
            else
            {
                mapIncomeTax.insert(key, payTrans);
            }
        }

        queryRun = this.qrTaxPayment();
        while (queryRun.next())
        {
            paymentOrderJour = queryRun.get(tablenum(BankPaymentOrderJour_RU));
            rPayTaxTransOpen.clear();
            rPayTaxTransOpen.initFromPaymentOrderJour(paymentOrderJour);
            rPayTaxTransOpen.insert();
        }

        queryRun = this.qrTaxRefund();
        while (queryRun.next())
        {
            payTrans = queryRun.get(tablenum(RPayTrans));
            rPayTaxTransOpen.clear();
            rPayTaxTransOpen.initFromPayTrans(payTrans);

            if (! budgetClassCode || classCodeList.in(rPayTaxTransOpen.BudgetReceiptClassCode))
            {
                rPayTaxTransOpen.insert();
            }
        }

        queryRun = this.qrInterimSheet();
        while (queryRun.next())
        {
            paySheetTrans = queryRun.get(tablenum(RPaySheetTrans));
            rPayTaxTransOpen.clear();
            rPayTaxTransOpen.initFromPaySheetTrans(paySheetTrans);

            if (! budgetClassCode || classCodeList.in(rPayTaxTransOpen.BudgetReceiptClassCode))
            {
                rPayTaxTransOpen.insert();
            }
        }

        queryRun = this.qrIncomeTax();
        while (queryRun.next())
        {
            payTrans = queryRun.get(tablenum(RPayTrans));
            addPayTransToMap();
        }

        queryRun = this.qrInterimSheet(false);
        while (queryRun.next())
        {
            paySheetTrans = queryRun.get(tablenum(RPaySheetTrans));
            classCode = paySheetTrans.budgetReceiptClassCode();

            if (! budgetClassCode || classCodeList.in(classCode))
            {
                key = [endMth(paySheetTrans.findRPaySheetTable().TransDate), classCode, paySheetTrans.BranchId, paySheetTrans.EmplId];
                if (mapIncomeTax.exists(key))
                {
                    payTrans = mapIncomeTax.lookup(key);
                }
                else
                {
                    payTrans.clear();
                    payTrans.EmplId     = paySheetTrans.EmplId;
                    payTrans.PayPeriod  = endMth(paySheetTrans.findRPaySheetTable().TransDate);

                    select firstonly rPayTaxTransOpen
                        where rPayTaxTransOpen.RefTableId             == tablenum(RPayTrans) &&
                              rPayTaxTransOpen.TransDate              == payTrans.PayPeriod  &&
                              rPayTaxTransOpen.EmplId                 == payTrans.EmplId     &&
                              rPayTaxTransOpen.BudgetReceiptClassCode == classCode           &&
                              rPayTaxTransOpen.BranchId               == paySheetTrans.BranchId;

                    if (rPayTaxTransOpen)
                    {
                        continue;
                    }

                    select firstonly RPayTaxIncomeGroupCode from payTaxIncomeGroupTable
                        where payTaxIncomeGroupTable.PaymBudgetReceiptClassCode == classCode;

                    payTrans.TaxIncomeGroupCode = payTaxIncomeGroupTable.RpayTaxIncomeGroupCode;
                    payTrans.BranchId           = paySheetTrans.BranchId;
                }

                payTrans.Amount += paySheetTrans.TaxAmount;
                mapIncomeTax.insert(key, payTrans);
            }
        }

        mapEnumerator = mapIncomeTax.getEnumerator();
        while (mapEnumerator.moveNext())
        {
            payTrans = mapEnumerator.currentValue();

            if (! payTrans.Amount)
            {
                continue;
            }

            if (paySheetSettle == RPayTaxPaySheetSettle::Paid)
            {
                payPeriod = conpeek(mapEnumerator.currentKey(), 1);

                if (! mapPaySheetState.exists(payPeriod))
                {
                    select firstonly RecId from paySheetTable
                        where paySheetTable.PaySheetType == RPaySheetType::Payment  &&
                              paySheetTable.PaySheetSost == RPaySheetSost::Paid     &&
                              paySheetTable.TransDate    >= dateStartMth(payPeriod) &&
                              paySheetTable.TransDate    <= payPeriod;

                    mapPaySheetState.insert(payPeriod, paySheetTable.RecId != 0 ? NoYes::Yes : NoYes::No);
                }

                if (mapPaySheetState.lookup(payPeriod) == NoYes::No)
                {
                    continue;
                }
            }

            rPayTaxTransOpen.clear();
            rPayTaxTransOpen.initFromPayTrans(payTrans);
            rPayTaxTransOpen.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayTaxSettlementUpdate construct(RPayTaxPeriodicSettlement _settlement)
    {
        return _settlement.settlement() ?
                    new RPayTaxSettlementTrans(_settlement) :
                    new RPayTaxSettlementUpdate(_settlement);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>