<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankAutomationStatementFormViewModel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankAutomationStatementFormViewModel</c> is the view model of bank statement form.
/// </summary>
internal class BankAutomationStatementFormViewModel
{
    // Form view
    private BankAutomationStatementFormView statementFormView;

    // Number sequences
    private NumberSeqFormHandler numberSeqFormHandlerStatementId;
    private NumberSeqFormHandler numberSeqFormHandlerStatementDownloadId;

    // Data sources
    private FormDataSource dsStatement;
    private FormDataSource dsReportEntry;
    private FormDataSource dsDocument;
    private FormDataSource dsGroupHeader;
    private FormDataSource dsOpeningBalance;
    private FormDataSource dsEndingBalance;
    private FormDataSource dsNetAmount;
    private FormDataSource dsTradingParty;

    // Records
    private BankStmtISOAccountStatement statement;
    private BankStmtISOReportEntry reportEntry;
    private BankStmtISODocument document;
    private BankStmtISOGroupHeader groupHeader;
    private BankStmtISOCashBalance openingBalance;
    private BankStmtISOCashBalance endingBalance;
    private BankStmtISOCashBalance netAmount;
    private BankStmtISOPartyIdentification tradingParty;

    private boolean researchData;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the modified event of debit/credit amount control.
    /// </summary>
    /// <param name="_debitAmount">Debit amount.</param>
    internal void amountModified(AmountCur _debitAmount)
    {
        if (_debitAmount)
        {
            dsReportEntry.refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bookRefresh</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes <c>BankStatementTableListPage</c> form when <c>BankStatementTable</c> form is closed.
    /// </summary>
    /// <param name="_research">Indicates whether the data source of <c>BankStatementTableListPage</c> should be researched.</param>
    private void bookRefresh(boolean _research = false)
    {
        FormRun callerForm = statementFormView.parmStatementFormRun().args().caller();
        FormDataSource dsBankStatementTableListPage;

        if (callerForm && callerForm.hasFormDataSource())
        {
            dsBankStatementTableListPage = callerForm.dataSource();
            if (dsBankStatementTableListPage.table() == tablenum(BankStmtISOAccountStatement))
            {
                if (_research)
                {
                    dsBankStatementTableListPage.research();
                }
                else
                {
                    dsBankStatementTableListPage.reread();
                    dsBankStatementTableListPage.refresh();
                }

                // Call linkActive to active data source and update form design.
                dsBankStatementTableListPage.executeQuery();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsDocumentActivePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the activated event of <c>BankStmtISODocument</c>.
    /// </summary>
    /// <param name="_document">The activated <c>BankStmtISODocument</c>.</param>
    internal void dsDocumentActivePost(BankStmtISODocument _document)
    {
        document = _document;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsDocumentWritePre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the write event of <c>BankStmtISODocument</c>.
    /// </summary>
    /// <param name="_document">Given <c>BankStmtISODocument</c> buffer.</param>
    internal void dsDocumentWritePre(BankStmtISODocument _document)
    {
        _document.GroupHeader = dsGroupHeader.cursor().RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsEndingBalanceActivePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the activated event of <c>BankStmtISOCashBalance</c> for ending balance.
    /// </summary>
    /// <param name="_endingBalance">The activated <c>BankStmtISOCashBalance</c> for ending balance.</param>
    internal void dsEndingBalanceActivePost(BankStmtISOCashBalance _endingBalance)
    {
        endingBalance = _endingBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsEndingBalanceInitValuePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the initValue event of <c>BankStmtISOCashBalance</c> for ending balance.
    /// </summary>
    /// <param name="_endingBalance">Ending balance.</param>
    internal void dsEndingBalanceInitValuePost(BankStmtISOCashBalance _endingBalance)
    {
        _endingBalance.BankStatementBalanceType = BankStatementBalanceType::Closing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsGroupHeaderActivePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the activated event of <c>BankStmtISOGroupHeader</c>.
    /// </summary>
    /// <param name="_groupHeader">The activated <c>BankStmtISOGroupHeader</c>.</param>
    internal void dsGroupHeaderActivePost(BankStmtISOGroupHeader _groupHeader)
    {
        groupHeader = _groupHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsGroupHeaderCreatePre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the create event of <c>BankStmtISOGroupHeader</c>.
    /// </summary>
    internal void dsGroupHeaderCreatePre()
    {
        if (numberSeqFormHandlerStatementDownloadId)
        {
            numberSeqFormHandlerStatementDownloadId.formMethodDataSourceCreatePre();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsGroupHeaderDeletePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the delete event of <c>BankStmtISOGroupHeader</c>.
    /// </summary>
    internal void dsGroupHeaderDeletePost()
    {
        if (numberSeqFormHandlerStatementDownloadId)
        {
            numberSeqFormHandlerStatementDownloadId.formMethodDataSourceDelete();
        }

        dsGroupHeader.reread();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsGroupHeaderInitValuePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the initValue event of <c>BankStmtISOGroupHeader</c>.
    /// </summary>
    /// <param name="_groupHeader">Given <c>BankStmtISOGroupHeader</c> buffer.</param>
    internal void dsGroupHeaderInitValuePost(BankStmtISOGroupHeader _groupHeader)
    {
        if (numberSeqFormHandlerStatementDownloadId)
        {
            numberSeqFormHandlerStatementDownloadId.formMethodDataSourceCreate();
        }

        _groupHeader.CreationDateTime = DateTimeUtil::getSystemDateTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsGroupHeaderLinkActivePre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the linkActive event of <c>BankStmtISOGroupHeader</c>.
    /// </summary>
    internal void dsGroupHeaderLinkActivePre()
    {
        if (numberSeqFormHandlerStatementDownloadId)
        {
            numberSeqFormHandlerStatementDownloadId.formMethodDataSourceLinkActive();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsGroupHeaderValidateWritePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the validateWrite event of <c>BankStmtISOGroupHeader</c>.
    /// </summary>
    /// <param name="_ret">Indicates whether the validation is passed for super method.</param>
    /// <returns>Returns true if validation is passed. Otherwise, returns false.</returns>
    internal boolean dsGroupHeaderValidateWritePost(boolean _ret)
    {
        boolean ret = _ret;

        if (numberSeqFormHandlerStatementDownloadId)
        {
            ret = ret && numberSeqFormHandlerStatementDownloadId.formMethodDataSourceValidateWrite(_ret);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsGroupHeaderWritePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the write event of <c>BankStmtISOGroupHeader</c>.
    /// </summary>
    internal void dsGroupHeaderWritePost()
    {
        if (numberSeqFormHandlerStatementDownloadId)
        {
            numberSeqFormHandlerStatementDownloadId.formMethodDataSourceWrite();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsNetAmountActivePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the activated event of <c>BankStmtISOCashBalance</c> for net amount.
    /// </summary>
    /// <param name="_netAmount">The activated <c>BankStmtISOCashBalance</c> for net amount.</param>
    internal void dsNetAmountActivePost(BankStmtISOCashBalance _netAmount)
    {
        netAmount = _netAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsNetAmountInitValuePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the initValue event of <c>BankStmtISOCashBalance</c> for net amount.
    /// </summary>
    /// <param name="_netAmount">Net amount.</param>
    internal void dsNetAmountInitValuePost(BankStmtISOCashBalance _netAmount)
    {
        _netAmount.BankStatementBalanceType = BankStatementBalanceType::NetAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsOpeningBalanceActivePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the activated event of <c>BankStmtISOCashBalance</c> for opening balance.
    /// </summary>
    /// <param name="_openingBalance">The activated <c>BankStmtISOCashBalance</c> for opening balance.</param>
    internal void dsOpeningBalanceActivePost(BankStmtISOCashBalance _openingBalance)
    {
        openingBalance = _openingBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsOpeningBalanceInitValuePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the initValue event of <c>BankStmtISOCashBalance</c> for opening balance.
    /// </summary>
    /// <param name="_openingBalance">Opening balance.</param>
    internal void dsOpeningBalanceInitValuePost(BankStmtISOCashBalance _openingBalance)
    {
        _openingBalance.BankStatementBalanceType = BankStatementBalanceType::Opening;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsReportEntryActivePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the activated event of <c>BankStmtISOReportEntry</c>.
    /// </summary>
    /// <param name="_reportEntry">The activated <c>BankStmtISOReportEntry</c>.</param>
    internal void dsReportEntryActivePost(BankStmtISOReportEntry _reportEntry)
    {
        reportEntry = _reportEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsReportEntryWritePre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the write event of <c>BankStmtISOReportEntry</c>.
    /// </summary>
    /// <param name="_reportEntry">Given <c>BankStmtISOReportEntry</c> buffer.</param>
    internal void dsReportEntryWritePre(BankStmtISOReportEntry _reportEntry)
    {
        if (_reportEntry.BankStmtISOAccountStatement == 0)
        {
            _reportEntry.BankStmtISOAccountStatement = dsStatement.cursor().RecId;
        }
        _reportEntry.TradingParty = dsTradingParty.cursor().RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsStatementActivePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the activated event of <c>BankStmtISOAccountStatement</c>.
    /// </summary>
    /// <param name="_statement">The activated <c>BankStmtISOAccountStatement</c>.</param>
    internal void dsStatementActivePost(BankStmtISOAccountStatement _statement)
    {
        statement = _statement;
        this.setStatementDataSourceStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsStatementCreatePre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the create event of <c>BankStmtISOAccountStatement</c>.
    /// </summary>
    internal void dsStatementCreatePre()
    {
        if (numberSeqFormHandlerStatementId)
        {
            numberSeqFormHandlerStatementId.formMethodDataSourceCreatePre();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsStatementDeletePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the delete event of <c>BankStmtISOAccountStatement</c>.
    /// </summary>
    internal void dsStatementDeletePost()
    {
        if (numberSeqFormHandlerStatementId)
        {
            numberSeqFormHandlerStatementId.formMethodDataSourceDelete();
        }

        if (numberSeqFormHandlerStatementDownloadId)
        {
            numberSeqFormHandlerStatementDownloadId.formMethodDataSourceDelete();
        }

        researchData = true;

        if (!dsStatement.cursor().RecId)
        {
            dsStatement.research(researchData);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsStatementInitValuePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the initValue event of <c>BankStmtISOAccountStatement</c>.
    /// </summary>
    /// <param name="_statement">Given <c>BankStmtISOAccountStatement</c> buffer.</param>
    internal void dsStatementInitValuePost(BankStmtISOAccountStatement _statement)
    {
        _statement.Manual = NoYes::Yes;
        _statement.BankStatementType = BankStatementType::Reconciliation;

        if (_statement.BankAccountTable)
        {
            this.fieldModifiedBankAccountTablePost(_statement);
        }

        if (numberSeqFormHandlerStatementId)
        {
            numberSeqFormHandlerStatementId.formMethodDataSourceCreate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsStatementLinkActivePre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the linkActive event of <c>BankStmtISOAccountStatement</c>.
    /// </summary>
    internal void dsStatementLinkActivePre()
    {
        if (numberSeqFormHandlerStatementId)
        {
            numberSeqFormHandlerStatementId.formMethodDataSourceLinkActive();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsStatementValidateWritePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the validateWrite event of <c>BankStmtISOAccountStatement</c>.
    /// </summary>
    /// <param name="_ret">Indicates whether the validation is passed for super method.</param>
    /// <returns>Returns true if validation is passed. Otherwise, returns false.</returns>
    internal boolean dsStatementValidateWritePost(boolean _ret)
    {
        boolean ret = _ret;

        if (numberSeqFormHandlerStatementId)
        {
            ret = ret && numberSeqFormHandlerStatementId.formMethodDataSourceValidateWrite(_ret);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsStatementWritePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the write event of <c>BankStmtISOAccountStatement</c>.
    /// </summary>
    internal void dsStatementWritePost()
    {
        if (numberSeqFormHandlerStatementId)
        {
            numberSeqFormHandlerStatementId.formMethodDataSourceWrite();
        }

        // Update the references for opening balance, ending balance and net amount
        // because the balance records are stored before bank statement.
        this.updateBalanceReference(dsOpeningBalance);
        this.updateBalanceReference(dsEndingBalance);
        this.updateBalanceReference(dsNetAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsStatementWritePre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the write event of <c>BankStmtISOAccountStatement</c>.
    /// </summary>
    /// <param name="_statement">Given <c>BankStmtISOAccountStatement</c> buffer.</param>
    internal void dsStatementWritePre(BankStmtISOAccountStatement _statement)
    {
        _statement.BankStmtISODocument = dsDocument.cursor().RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedBankAccountTablePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the modified event of field <c>BankAccountTable</c>
    /// of table <c>BankStmtISOAccountStatement</c>.
    /// </summary>
    /// <param name="_statement">Given <c>BankStmtISOAccountStatement</c> buffer.</param>
    internal void fieldModifiedBankAccountTablePost(BankStmtISOAccountStatement _statement)
    {
        BankAccountTable bankAccountTable = BankAccountTable::find(_statement.BankAccountTable);

        if (bankAccountTable)
        {
            _statement.AccountCurrency = Currency::find(bankAccountTable.CurrencyCode).CurrencyCodeISO;
            _statement.AccountIdOtherId = bankAccountTable.AccountNum;
            _statement.RegistrationId = bankAccountTable.RegistrationNum;
            _statement.SwiftNo = bankAccountTable.swiftNo;
            _statement.iban = bankAccountTable.iban;
            _statement.DefaultDimension = bankAccountTable.DefaultDimension;

            dsStatement.refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formClosePre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called before form is closed.
    /// </summary>
    /// <remarks>Data sources for list page form will be refreshed and unsaved number sequence will be released.</remarks>
    internal void formClosePre()
    {
        this.bookRefresh(researchData);

        if (numberSeqFormHandlerStatementId)
        {
            numberSeqFormHandlerStatementId.formMethodClose();
        }

        if (numberSeqFormHandlerStatementDownloadId)
        {
            numberSeqFormHandlerStatementDownloadId.formMethodClose();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes data sources.
    /// </summary>
    private void initDataSource()
    {
        dsStatement = statementFormView.parmDSStatement();
        dsReportEntry = statementFormView.parmDSReportEntry();
        dsDocument = statementFormView.parmDSDocument();
        dsGroupHeader = statementFormView.parmDSGroupHeader();
        dsOpeningBalance = statementFormView.getDSOpeningBalance();
        dsEndingBalance = statementFormView.parmDSEndingBalance();
        dsNetAmount = statementFormView.parmDSNetAmount();
        dsTradingParty = statementFormView.parmDSTradingParty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the bank statement view model.
    /// </summary>
    internal void initialize()
    {
        this.initDataSource();
        this.initNumberSeq();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNumberSeq</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the number sequence for bank statement Id and download Id.
    /// </summary>
    internal void initNumberSeq()
    {
        numberSeqFormHandlerStatementId = this.numberSeqFormHandlerStatementId();
        numberSeqFormHandlerStatementDownloadId = this.numberSeqFormHandlerStatementDownloadId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeqFormHandlerStatementDownloadId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets number sequence for bank statement download Id.
    /// </summary>
    /// <returns>Number sequence for bank statement download Id.</returns>
    internal NumberSeqFormHandler numberSeqFormHandlerStatementDownloadId()
    {
        if (!numberSeqFormHandlerStatementDownloadId)
        {
            numberSeqFormHandlerStatementDownloadId = NumberSeqFormHandler::newForm(
                BankParameters::numRefBankStatementDownloadId().NumberSequenceId,
                statementFormView.parmStatementFormRun(),
                dsGroupHeader,
                this.tableFieldIdStatementDownloadId());
        }

        return numberSeqFormHandlerStatementDownloadId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeqFormHandlerStatementId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets number sequence for bank statement Id.
    /// </summary>
    /// <returns>Number sequence for bank statement Id.</returns>
    internal NumberSeqFormHandler numberSeqFormHandlerStatementId()
    {
        if (!numberSeqFormHandlerStatementId)
        {
            numberSeqFormHandlerStatementId = NumberSeqFormHandler::newForm(
                BankParameters::numRefBankStatementId().NumberSequenceId,
                statementFormView.parmStatementFormRun(),
                dsStatement,
                this.tableFieldIdStatementId());
        }

        return numberSeqFormHandlerStatementId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStatementFormView</Name>
				<Source><![CDATA[
    internal BankAutomationStatementFormView parmStatementFormView(BankAutomationStatementFormView _statementFormView = statementFormView)
    {
        statementFormView = _statementFormView;

        return statementFormView;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatementDataSourceStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the enable status of statement data sources.
    /// </summary>
    private void setStatementDataSourceStatus()
    {
        boolean isStatementEditable = statement.isEditable();
        boolean isLineEditable = statement.isStatementLineEditable();
        boolean isLineAllowedMarkNew = statement.isAllowedMarkNewBankDocument();
        boolean isLineFinancialEditable = statement.isPostable() || isLineAllowedMarkNew;

        this.parmStatementFormView().setStatementAllowEdit(isStatementEditable);
        this.parmStatementFormView().setReportEntryAllowEdit(isStatementEditable, isLineEditable, isLineFinancialEditable, isLineAllowedMarkNew);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableFieldIdStatementDownloadId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the field Id for statement download Id.
    /// </summary>
    /// <returns>Field Id for statement download Id.</returns>
    private FieldId tableFieldIdStatementDownloadId()
    {
        return fieldNum(BankStmtISOGroupHeader, MessageIdentification);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableFieldIdStatementId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the field Id for statement Id.
    /// </summary>
    /// <returns> Field Id for statement Id.</returns>
    private FieldId tableFieldIdStatementId()
    {
        return fieldNum(BankStmtISOAccountStatement, Identification);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBalanceReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the references of <c>BankStmtISOCashBalance</c>.
    /// </summary>
    /// <param name="_dataSource">Given data source.</param>
    private void updateBalanceReference(FormDataSource _dataSource)
    {
        BankStmtISOCashBalance balance;

        Debug::assert(_dataSource.table() == tableNum(BankStmtISOCashBalance));

        balance = _dataSource.cursor();
        if (balance
            && balance.BankStmtISOAccountStatement == 0)
        {
            balance.selectForUpdate(true);
            ttsBegin;
            balance.BankStmtISOAccountStatement = dsStatement.cursor().RecId;
            balance.update();
            ttsCommit;

            _dataSource.reread();
            _dataSource.refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>BankAutomationStatementFormViewModel</c> class.
    /// </summary>
    /// <returns>
    /// The <c>BankAutomationStatementFormViewModel</c> instance.
    /// </returns>
    internal static BankAutomationStatementFormViewModel construct()
    {
        return new BankAutomationStatementFormViewModel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromAutomationStatementView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>BankAutomationStatementFormViewModel</c> class based on BankAutomationStatementFormView.
    /// </summary>
    /// <param name="_statementFormView">The instance of <c>BankAutomationStatementFormView</c> class.</param>
    /// <returns>The instance of <c>BankAutomationStatementFormViewModel</c> class.</returns>
    internal static BankAutomationStatementFormViewModel newFromAutomationStatementView(BankAutomationStatementFormView _statementFormView)
    {
        BankAutomationStatementFormViewModel statementViewModel;

        Debug::assert(_statementFormView != null);

        statementViewModel = BankAutomationStatementFormViewModel::construct();
        statementViewModel.parmStatementFormView(_statementFormView);

        statementViewModel.initialize();

        Debug::assert(statementViewModel != null);

        return statementViewModel;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>