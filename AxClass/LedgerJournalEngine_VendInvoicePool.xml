<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalEngine_VendInvoicePool</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerJournalEngine_VendInvoicePool</c> class supports vendor invoice pool journals.
/// </summary>
/// <remarks>
/// This class extends the <see cref="T:LedgerJournalEngine" /> class.
/// </remarks>
public class LedgerJournalEngine_VendInvoicePool extends LedgerJournalEngine_VendInvoice
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustLedgerJournalTrans</Name>
				<Source><![CDATA[
    protected void adjustLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendTable</Name>
				<Source><![CDATA[
    protected void initFromVendTable(LedgerJournalTrans _ledgerJournalTrans
        , Tax1099BoxDetail _tax1099Detail = null
        )
    {
        DueDate dueDate;

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            super(_ledgerJournalTrans, _tax1099Detail);
        }
        else
        {
            super(_ledgerJournalTrans);
        }

        if (vendTable.PaymTermId)
        {
            this.findPayment(vendTable.PaymTermId);
            //
            //  If an Invoice number and Document date exist use the Document date to determine the Due date
            //  otherwise use the Transaction date.
            //
            dueDate = payment.due((_ledgerJournalTrans.Invoice && _ledgerJournalTrans.DocumentDate) ?
                    _ledgerJournalTrans.DocumentDate : _ledgerJournalTrans.TransDate,
                    this.paymDayId(_ledgerJournalTrans));

            if (isConfigurationkeyEnabled(configurationKeyNum(PaymCalendar)))
            {
                dueDate = this.adjustDueDate(dueDate, _ledgerJournalTrans);
            }

            _ledgerJournalTrans.Due = dueDate;
        }
        else
        {
            _ledgerJournalTrans.Due = _ledgerJournalTrans.TransDate;
        }
        _ledgerJournalTrans.TaxGroup = vendTable.TaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalActive</Name>
				<Source><![CDATA[
    void newJournalActive(LedgerJournalTable _ledgerJournalTable, boolean _recalc = false)
    {
        boolean allowEdit;

        ledgerJournalTable = _ledgerJournalTable;
        ledgerJournalName = LedgerJournalName::find(ledgerJournalTable.JournalName);
        ledgerJournalEngine_Server = LedgerJournalEngine_Server::construct();

        voucherBalance = new RecordSortedList(tablenum(TmpVoucherSum));
        voucherBalance.sortOrder(fieldnum(TmpVoucherSum, Voucher));

        custVendCashDiscList = new RecordSortedList(tablenum(CustVendTransOpen));
        custVendCashDiscList.sortOrder(fieldnum(CustVendTransOpen, RefRecId));

        if (postingResults_Server != null)
        {
            postingResults_Server.clearErrorLog();
        }

        allowEdit = this.allowEdit();
        if (ledgerJournalTrans_ds) // work around for callback from form.close() to LedgerJournalTable.active()
        {
            ledgerJournalTrans_ds.allowCreate(allowEdit); // This must be placed here as creation of records are purely determined by the journal status
            if (allowEdit)
            {
                allowEdit = this.allowEditTrans(ledgerJournalTrans_ds.cursor());
            }

            ledgerJournalTrans_ds.allowEdit(allowEdit); // This must be placed here as edition of the record is a combined check of the journal and the journal line itself
            ledgerJournalTrans_ds.allowDelete(allowEdit); // This must be placed here as edition of the record is a combined check of the journal and the journal line itself
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherTotals</Name>
				<Source><![CDATA[
    public boolean voucherTotals(LedgerJournalTrans _ledgerJournalTrans, boolean _reread = false)
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>