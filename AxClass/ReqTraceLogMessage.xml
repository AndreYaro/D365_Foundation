<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTraceLogMessage</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Common class for representing a master planning trace message.
/// </summary>
abstract class ReqTraceLogMessage
{
    #define.InventDimKey('DIM')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats the text based on the contents of the container.
    /// </summary>
    /// <param name="_enumText">
    /// The text to format.
    /// </param>
    /// <param name="_con">
    /// The container that holds the values to replace in the text.
    /// </param>
    /// <returns>
    /// The original text merged with the contents of the container.
    /// </returns>
    /// <remarks>
    /// If the container has nested containers these are assumed to represent an Enum where the first element is the id of the enum
    /// and the second element is the value.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Invalid data container type.
    /// </exception>
    public static str getText(str _enumText, container _con)
    {
        str         text = _enumText;
        str             replaceText;
        int             i;
        container       subCon;
        container       inventDimCon;
        DictEnum        dictEnum;

        for (i=1;i<=conLen(_con);i++)
        {
            replaceText = '';

            if (typeOf(conPeek(_con, i)) == Types::Container)
            {
                subCon = conPeek(_con, i);

                if (conLen(subCon) > 0 && typeOf(conPeek(subCon, 1)) == typeOf(#InventDimKey) && conPeek(subCon, 1) == #InventDimKey)
                {
                    // The container is representing an InventDim fields
                    inventDimCon = conPeek(subCon, 2);
                    replaceText = ReqTraceLogMessage::inventDimStr(inventDimCon);
                }
                else if (conLen(subCon) == 2)
                {
                    // The value is actually an enum
                    dictEnum = new DictEnum(conPeek(subCon, 1));
                    replaceText = dictEnum.value2Label(conPeek(subCon, 2));
                }
                else
                {
                    throw error("@SYS125462");
                }
            }
            else
            {
                replaceText = conPeek(_con, i);
            }

            text = strReplace(text, "%" + int2str(i), replaceText);
        }

        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a text line with the field label/value of all dimension field that has the value set.
    /// </summary>
    /// <param name="_inventDimCon">
    /// A <c>container</c> holding the inventory dimension values.
    /// </param>
    /// <returns>
    /// A text line representing the inventory dimension.
    /// </returns>
    public static str inventDimStr(container _inventDimCon)
    {
        SysDictField    sysDictField;
        ListEnumerator  dimFieldListEnumerator = InventDim::dimFieldListEnumerator();
        FieldId         inventDimFieldId;
        str             fieldText;
        str             text;
        InventDim       inventDim;
        int             conPos = 1;

        str formatCode = GlobalEx::generateStrConcatFormat();

        while (dimFieldListEnumerator.moveNext())
        {
            inventDimFieldId = dimFieldListEnumerator.current();
            inventDim.(inventDimFieldId) = conPeek(_inventDimCon, conPos);
            conPos++;

            if (inventDim.(inventDimFieldId))
            {
                sysDictField = new SysDictField(tableNum(InventDim), inventDimFieldId);
                fieldText = strFmt(formatCode, sysDictField.label(), ' ', inventDim.(inventDimFieldId));
                if (text)
                {
                    text = strFmt(formatCode, text, ', ', fieldText);
                }
                else
                {
                    text = fieldText;
                }
            }
        }

        text = '[' + text + ']';

        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Pack an inventory dimension record to a container.
    /// </summary>
    /// <param name="_inventDim">
    /// The record to pack.
    /// </param>
    /// <returns>
    /// A <c>container</c> with the packed version of the record.
    /// </returns>
    public static container packInventDim(InventDim _inventDim)
    {
        ListEnumerator  dimFieldListEnumerator = InventDim::dimFieldListEnumerator();
        FieldId         inventDimFieldId;
        container       con;
        container       conFields;

        con += #InventDimKey;

        while (dimFieldListEnumerator.moveNext())
        {
            inventDimFieldId = dimFieldListEnumerator.current();
            conFields += _inventDim.(inventDimFieldId);
        }

        con += [conFields];

        return con;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>