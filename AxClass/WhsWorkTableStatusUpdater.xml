<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsWorkTableStatusUpdater</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WhsWorkTableStatusUpdater
{
    private WHSWorkId workId;
    private WHSWorkTable workTable;
    private WHSWorkProcessingTimeCalculationStrategy workProcessingTimeCalculationStrategy;
    private boolean isChanged;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>workProcessingTimeCalculation</Name>
				<Source><![CDATA[
    private WHSWorkProcessingTimeCalculationStrategy workProcessingTimeCalculation()
    {
        if (!workProcessingTimeCalculationStrategy)
        {
            workProcessingTimeCalculationStrategy = WHSWorkTable::workProcessingTimeCalculationStrategy();
        }
        return workProcessingTimeCalculationStrategy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkInProcess</Name>
				<Source><![CDATA[
    private void updateWorkInProcess()
    {          
        if (!workTable.WorkInProcessUTCDateTime)
        {
            workTable.setInProcess(this.workProcessingTimeCalculation());
            isChanged = true;
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLockedUser</Name>
				<Source><![CDATA[
    private void updateLockedUser(WHSUserId _userId)
    {
        if (workTable.LockedUser != _userId)
        {
            workTable.LockedUser = _userId;
            isChanged = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateClosed</Name>
				<Source><![CDATA[
    private void updateClosed()
    {
        WHSWorkLine workLineActual;

        select sum(InventQtyRemain), sum(ActualTime) from workLineActual
            where workLineActual.WorkId == workTable.WorkId &&
                  workLineActual.WorkStatus != WHSWorkStatus::Skipped &&
                  workLineActual.WorkStatus != WHSWorkStatus::Cancelled;
        
        if (!workLineActual.InventQtyRemain)
        {
            workTable.setClosed(this.workProcessingTimeCalculation());

            workTable.ActualTime = workLineActual.ActualTime;
            if (!workTable.ActualTime)
            {
                workTable.ActualTime = str2num(int642str(DateTimeUtil::getDifference(workTable.WorkClosedUTCDateTime, workTable.WorkInProcessUTCDateTime)));
            }
            workTable.LockedUser = '';
            isChanged = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWorkId</Name>
				<Source><![CDATA[
    static WhsWorkTableStatusUpdater newFromWorkId(WHSWorkId _workId)
    {        
        WhsWorkTableStatusUpdater updater = new WhsWorkTableStatusUpdater();
        updater.workId = _workId;
        return updater;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkPotentiallyClosed</Name>
				<Source><![CDATA[
    private boolean isWorkPotentiallyClosed()
    {
        WhsWorkTableStatusUpdaterContext context = WhsWorkTableStatusUpdaterContext::current();
        if (context)
        {
            WHSWorkLine workLine = context.parmWorkLine();

            if (workLine &&
                workLine.WorkStatus != WHSWorkStatus::Skipped &&
                workLine.WorkStatus != WHSWorkStatus::Cancelled)
            {
                // This line is not complete -> the work cannot be complete
                if (workLine.InventQtyRemain != 0)
                {
                    return false;
                }

                // This line picked up a quantity, there must be an incomplete put line -> the work cannot be complete
                if (workLine.WorkType == WHSWorkType::Pick &&
                    workLine.InventQtyWork)
                {
                    return false;
                }
            }            
        }        
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update(WHSUserId _userId)
    {
        if (workId)
        {
            ttsbegin;
        
            workTable = WHSWorkTable::find(workId, true);

            if (workTable)
            {
                this.updateWorkInProcess();
                this.updateLockedUser(_userId);
            
                if (this.isWorkPotentiallyClosed())
                {
                    this.updateClosed();
                }

                if (isChanged)
                {
                    workTable.update();
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>