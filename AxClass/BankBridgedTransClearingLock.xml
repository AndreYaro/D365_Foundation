<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankBridgedTransClearingLock</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Locking class for bank bridged payment transactions clearing, to prevent clearing the same transaction in parallel.
/// </summary>
internal final class BankBridgedTransClearingLock
{
    internal boolean lockAcquired;
    internal ReqReaderWriterLock lock;
    internal str lockName;
    internal RecId ledgerJournalTransBridgedRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal void new(RecId _ledgerJournalTransBridgedRecId)
    {
        ledgerJournalTransBridgedRecId = _ledgerJournalTransBridgedRecId;

        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init()
    {
        lock = ReqReaderWriterLock::construct();
        lockName = strFmt("@Bank:BankBridgedTransClearingLockKey", ledgerJournalTransBridgedRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enterBridgeClearingLock</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enters the lock for clearing the bank bridged payment transaction.
    /// </summary>
    /// <param name = "_isBankReconBridgeAutoPosting">true if bridged payment transaction is on automatically clearing, else false.</param>
    internal void enterBridgeClearingLock(boolean _isBankReconBridgeAutoPosting = false)
    {
        lockAcquired = lock.tryEnterWriterLock(lockName);

        if (!lockAcquired)
        {
            if (!_isBankReconBridgeAutoPosting)
            {
                throw error("@Bank:BankBridgedClearingRunInParallelErrorMessage");
            }
            else
            {
                warning("@Bank:BankBridgedClearingRunInParallelErrorMessage");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exitBridgeClearingLock</Name>
				<Source><![CDATA[
    /// <summary>
    /// Exits the lock for clearing the bank bridged payment transaction.
    /// </summary>
    internal void exitBridgeClearingLock()
    {
        if (lockAcquired)
        {
            lock.exit(lockName);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>