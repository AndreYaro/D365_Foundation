<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>smmEwsRecurrence</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class <c>smmEwsRecurrence</c> represents a recurrence pattern that may be part of a exchange task or an exchange appointment.
/// </summary>
class SmmEwsRecurrence implements smmIRecurrence
{
    #smmMSOutlook2002ObjectModelConstants

    Microsoft.Dynamics.AX.ExchangeIntegration.ItemRecurrence recurrence;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dayOfMonth</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the day of month this recurrence takes place.
    /// </summary>
    /// <returns>
    /// A <c>smmDayOfMonth</c> with the day of month this recurrence takes place.
    /// It will return 0 if there is no day of month set.
    /// </returns>
    /// <remarks>
    /// The day of month is only set in some monthly and yearly recurrences.
    /// For example, if it happens the first day every two months, it will return 1,
    /// but if it happens every first monday of the month it will return 0.
    /// </remarks>
    public smmDayofMonth dayOfMonth()
    {
        int ret;

        ret = recurrence.dayOfMonth();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dayOfWeekMask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns or sets an OlDaysOfWeek constant representing the mask for the days of the week on which the recurring appointment or task occurs
    /// </summary>
    /// <returns>
    /// A <c>smmDaysOfWeek</c> with the days of the week for the recurrence.
    /// This value is the result of an OR between the different days it occurs.
    /// </returns>
    /// <remarks>
    /// Monthly and yearly patterns are only valid for a single day.
    /// Weekly patterns are only valid as the Or of the DayOfWeekMask.
    /// Days are taken from the OlDaysOfWeek enumeration.
    /// </remarks>
    public smmDaysOfWeek dayOfWeekMask()
    {
        System.Collections.ArrayList    daysOfWeek;
        int                             idx, total;
        int                             day;
        int                             ret;

        daysOfWeek = recurrence.daysOfTheWeek();
        total = daysOfWeek.get_Count();

        for (idx = 0; idx < total; idx++)
        {
            //day is a member of the DayOfTheWeek enumeration from EWS.
            day = daysOfWeek.get_Item(idx);
            switch (day)
            {
                case smmDaysOfWeek::Sunday:
                    ret = ret | #olSunday;
                    break;
                case smmDaysOfWeek::Monday:
                    ret = ret | #olMonday;
                    break;
                case smmDaysOfWeek::Tuesday:
                    ret = ret | #olTuesday;
                    break;
                case smmDaysOfWeek::Wednesday:
                    ret = ret | #olWednesday;
                    break;
                case smmDaysOfWeek::Thursday:
                    ret = ret | #olThursday;
                    break;
                case smmDaysOfWeek::Friday:
                    ret = ret | #olFriday;
                    break;
                case smmDaysOfWeek::Saturday:
                    ret = ret | #olSaturday;
                    break;
                case smmDaysOfWeek::Day:
                    ret = ret | #olSunday | #olMonday | #olTuesday | #olWednesday | #olThursday | #olFriday | #olSaturday;
                    break;
                case smmDaysOfWeek::WeekDay:
                    ret = ret | #olMonday | #olTuesday | #olWednesday | #olThursday | #olFriday;
                    break;
                case smmDaysOfWeek::WeekEndDay:
                    ret = ret | #olSunday | #olSaturday;
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>duration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the duration (in minutes) of the RecurrencePattern.
    /// </summary>
    /// <returns>
    /// The duration of the RecurrencePattern.
    /// For an all day event it will return 1440.
    /// If it is a task or the duration is not set, it will return 0.
    /// </returns>
    /// <remarks>
    /// This property is only valid for appointments.
    /// </remarks>
    public smmAppointmentDurationMinutes duration()
    {
        int ret;

        ret = any2Int(recurrence.duration());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the end date for the recurrence.
    /// </summary>
    /// <returns>
    /// The end date time for the recurrence.
    /// </returns>
    /// <remarks>
    /// It may fail or return null if the recurrence has no end date.
    /// Should use noEndDate first to check.
    /// </remarks>
    public TransDate endDate()
    {
        date ret;

        if (recurrence.hasEndDate())
        {
            ret = recurrence.endDateTime();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the count for which the recurrence pattern is valid for a given interval.
    /// </summary>
    /// <returns>
    /// An integer value between 1 and 5.
    /// </returns>
    /// <remarks>
    /// This property is only valid for recurrences that allow the definition of a recurrence pattern
    /// that is only valid for the Nth occurrence, such as "the 2nd Sunday in March" pattern.
    /// The count is set numerically: 1 for the first, 2 for the second, and so on through 5 for the last.
    /// </remarks>
    public smmAppointmentNThInstance instance()
    {
        smmAppointmentNThInstance ret = any2Enum(recurrence.instance());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value specifying the number of units of a given recurrence type between occurrences.
    /// </summary>
    /// <returns>
    /// An integer with the number of units between ocurrences of this recurrence.
    /// </returns>
    public smmInterval interval()
    {
        int ret;

        ret = recurrence.interval();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>monthOfYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets which month of the year is valid for the specified recurrence pattern.
    /// </summary>
    /// <returns>
    /// An integer between 1 through 12 representing the month if it is a yearly recurrence.
    /// 0 if it's other type of recurrence.
    /// </returns>
    /// <remarks>
    /// This field is only valid for yearly recurrence.
    /// </remarks>
    public MonthOfYearId monthOfYear()
    {
        int ret;

        ret = recurrence.monthOfYear();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// New instance of recurrence of an appointment.
    /// </summary>
    /// <param name="_recurrence">
    /// Instance of <c>smmEwsRecurrence</c>.
    /// </param>
    public void new(Microsoft.Dynamics.AX.ExchangeIntegration.ItemRecurrence _recurrence)
    {
        recurrence = _recurrence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>noEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the recurrence has end date or not.
    /// </summary>
    /// <returns>
    /// True if the recurrence is infinite (it has no end date or total number of occurences set); otherwise, false.
    /// </returns>

    public smmNoEndDate noEndDate()
    {
        boolean ret;

        ret = recurrence.noEndDate();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parent of the recurrence.
    /// </summary>
    /// <returns>
    /// <c>smmEwsAppointment</c> instance.
    /// </returns>
    public smmIAppointment parent()
    {
        smmIAppointment appointment;

        return appointment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>patternEndDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ending DateTime for the pattern.
    /// </summary>
    /// <param name="_isAppointmentRecurrence">
    /// True if the item from which this recurrence takes part is an appointment; otherwise, false.
    /// </param>
    /// <param name="outlookTimeZone">
    /// The timezone of the outlook client.
    /// </param>
    /// <returns>
    /// The ending DateTime of the next ocurrence if this recurrence is an appointment recurrence,
    /// the start DateTime of the next ocurrence if it is a task recurrence.
    /// </returns>
    public smmPatternEndDateTime patternEndDateTime(boolean _isAppointmentRecurrence, Timezone outlookTimeZone)
    {
        utcdatetime ret;

        ret = recurrence.patternEndDateTime();
        ret = DateTimeUtil::applyTimeZoneOffset(ret, outlookTimeZone);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>patternStartDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the start date time for the pattern.
    /// </summary>
    /// <param name="_isAppointmentRecurrence">
    /// True if the recurrence is part of an appointment; otherwise, false.
    /// </param>
    /// <param name="outlookTimeZone">
    /// The outlook timezone.
    /// </param>
    /// <returns>
    /// A date time which marks the start for the recurrence.
    /// </returns>
    public smmPatternStartDateTime patternStartDateTime(boolean _isAppointmentRecurrence, Timezone outlookTimeZone)
    {
        utcdatetime ret;

        ret = recurrence.patternStartdDateTime();

        ret = DateTimeUtil::applyTimeZoneOffset(ret, outlookTimeZone);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recurrenceType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the recurrence pattern type.
    /// </summary>
    /// <returns>
    /// A member of OlRecurrenceType enumeration.
    /// </returns>
    public smmOutlookRecurrenceType recurrenceType()
    {
        smmOutlookRecurrenceType ret = any2Enum(recurrence.type());

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>