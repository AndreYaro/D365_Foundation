<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DimDerJourRuleProjAdvancedJournalWorkInProcessExtension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Dimension derivation journalizing rule extension for project advanced journals.
/// </summary>
[SourceDocumentClassExtensionAttribute(classStr(AccJourRuleProjAdvancedJournalWorkInProcess))]
class DimDerJourRuleProjAdvancedJournalWorkInProcessExtension extends DimensionDerivationRuleExtension
{
    ProjAdvancedJournal     projAdvancedJournal;
    ProjAdvancedJournalLine projAdvancedJournalLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDefaultDimensionAllocation</Name>
				<Source><![CDATA[
    private LedgerDimensionAllocation getDefaultDimensionAllocation()
    {
        LedgerDimensionDefaultAccount ledgerDimensionDefaultAccount;
        AccountingDistribution refAccountingDistribution = dimensionDerivationRule.parmAccountingRule().parmAccountingdistribution();
        DebitCredit side = dimensionDerivationRule.parmAccountingRule().parmSide();
        boolean oppositeAccount = true;

        if (projAdvancedJournalLine.ProjDataAreaId == curext())
        {
            ProjectAccountingDistribution projectAccountingDistribution = ProjectAccountingDistribution::findByAccountingDistribution(
                dimensionDerivationRule.parmAccountingRule().parmAccountingdistribution().RecId);
            ProjTable projTable = ProjTable::findRecId(projectAccountingDistribution.ProjTable);
            ProjCategory projCategory = ProjCategory::findRecId(projectAccountingDistribution.ProjCategory);
            ProjFundingSource projFundingSource = ProjFundingSource::find(projectAccountingDistribution.ProjFundingSource);

            ledgerDimensionDefaultAccount = ProjPosting::getLedgerDimension(ProjAccountType::SalesOffsetAccount,
                                                                        projTable.ProjId,
                                                                        projCategory.CategoryId,
                                                                        projectAccountingDistribution.ProjFundingSource);
        }
        else
        {
            if (ProjIntercompanyParameters::canAccrueRevenue(CompanyInfo::findDataArea(projAdvancedJournalLine.ProjDataAreaId).RecId))
            {
                  ledgerDimensionDefaultAccount = ProjPosting::getLedgerDimension(ProjAccountType::SalesOffsetAccount,
                                                                            '',
                                                                            projAdvancedJournalLIne.ProjCategoryId,
                                                                            0);
            }
        }

        DimensionDefault dimensionDefault = projAdvancedJournalLine ? projAdvancedJournalLine.DefaultDimension : refAccountingDistribution.LedgerDimension;

        LedgerDimensionAccount ledgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(ledgerDimensionDefaultAccount, dimensionDefault);

        LedgerDimensionAllocation ledgerDimensionAllocation = LedgerDimensionAllocation::newFromParameters(ledgerDimension,
                                                                                                                refAccountingDistribution.AllocationFactor,
                                                                                                                side,
                                                                                                                oppositeAccount);
        return ledgerDimensionAllocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the dimension derivation rule extension.
    /// </summary>
    public void initialize()
    {
        super();

        Common sourceDocumentLineImplementation = dimensionDerivationRule.parmAccountingRule().parmSourceDocumentLineItem().parmSourceDocumentLine().getSourceDocumentLineImplementation();
        
        if (sourceDocumentLineImplementation.TableId != tableNum(ProjAdvancedJournalLine))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        projAdvancedJournalLine = sourceDocumentLineImplementation;
        projAdvancedJournal = projAdvancedJournalLine.getProjAdvancedJournal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDimAllocList</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Populates an allocation list that is based on project or resource setup.
    /// </summary>
    /// <param name="_ledgerDimensionAllocationList">
    ///     The allocation list that is to be populated.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void populateDimAllocList(LedgerDimensionAllocationList _ledgerDimensionAllocationList)
    {
        DebitCredit side = dimensionDerivationRule.parmAccountingRule().parmSide();

        _ledgerDimensionAllocationList.addEnd(this.getDefaultDimensionAllocation());
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Subscribes to dimension derivation rule extension events.
    /// </summary>
    protected void subscribe()
    {
        dimensionDerivationRule.populatingDimAllocListEventHandler += eventhandler(this.populateDimAllocList);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>