<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimLPCleanupBundleUpdateSpecialRefTableTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class InventDimLPCleanupBundleUpdateSpecialRefTableTask
{
    private List                        taskList;
    private UserConnection              connection;
    private DictTable                   dictTable;
    private Common                      common;
    private SysDaUpdateObject           commonObject;
    private SysDaQueryObject            updateReferencesObject;
    private InventDimLPCleanupChangeTmp inventDimLPCleanupChangeTmp;

    #DEFINE.CURRENTVERSION(1)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runAsync</Name>
				<Source><![CDATA[
    public System.Threading.Tasks.Task runAsync()
    {
        System.Threading.Tasks.Task threadTask = runAsync(classNum(InventDimLPCleanupBundleUpdateSpecialRefTableTask),
                                                          staticMethodStr(InventDimLPCleanupBundleUpdateSpecialRefTableTask, runOperationAsync),
                                                          [this.pack()]);
        return threadTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static InventDimLPCleanupBundleUpdateSpecialRefTableTask construct()
    {
        return new InventDimLPCleanupBundleUpdateSpecialRefTableTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    public static InventDimLPCleanupBundleUpdateSpecialRefTableTask newParameters(List _taskList)
    {
        InventDimLPCleanupBundleUpdateSpecialRefTableTask refTableTaskUpdater = InventDimLPCleanupBundleUpdateSpecialRefTableTask::construct();
        refTableTaskUpdater.parmTaskList(_taskList);
        return refTableTaskUpdater;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOperationAsync</Name>
				<Source><![CDATA[
    private static container runOperationAsync(container params, System.Threading.CancellationToken cancellationToken)
    {
        InventDimLPCleanupBundleUpdateSpecialRefTableTask updateRefTableTask = new InventDimLPCleanupBundleUpdateSpecialRefTableTask();
        container packedUpdateRefTableTask;

        try
        {
            [packedUpdateRefTableTask] = params;
            updateRefTableTask.unpack(packedUpdateRefTableTask);
            updateRefTableTask.execute();
            return [true];
        }
        catch
        {
            return [false];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    private void execute()
    {
        System.Exception ex;
        boolean allSuccess = true;

        TableId        tableId;
        RefFieldName   inventDimIdFieldName, dataAreaIdFieldName;
        ListEnumerator taskEnumerator = taskList.getEnumerator();

        connection = new UserConnection();

        while (taskEnumerator.moveNext())
        {
            try
            {
                [tableId, inventDimIdFieldName, dataAreaIdFieldName] = taskEnumerator.current();
                this.updateReferenceTable(tableId, inventDimIdFieldName, dataAreaIdFieldName);
            }
            catch (ex)
            {
                warning(ex.Message);
                allSuccess = false;
            }
        }

        if (connection)
        {
            connection.finalize();
            connection = null;
        }

        if (!allSuccess)
        {
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReferenceTable</Name>
				<Source><![CDATA[
    private void updateReferenceTable(TableId _refTableId, RefFieldName _refFieldName, RefFieldName _dataAreaIdFieldName)
    {
        #OCCRetryCount

        try
        {
            //update_recordset common
            //    setting common.(refFieldName) = inventDimLPCleanupChangeTmp.InventDimIdTo
            //    join inventDimLPCleanupChangeTmp
            //    where common.(refFieldName) == inventDimLPCleanupChangeTmp.InventDimIdFrom;

            dictTable = new DictTable(_refTableId);

            common = dictTable.makeRecord();
            common.skipDataMethods(true);
            common.skipEvents(true);
            common.skipDatabaseLog(true);

            common.setConnection(connection);
            inventDimLPCleanupChangeTmp.setConnection(connection);

            commonObject = new SysDaUpdateObject(common);
            commonObject.settingClause().add(
                    _refFieldName,
                    new SysDaFieldExpression(inventDimLPCleanupChangeTmp, fieldStr(InventDimLPCleanupChangeTmp, InventDimIdTo)));

            updateReferencesObject = new SysDaQueryObject(inventDimLPCleanupChangeTmp);

            if (dictTable.dataPrCompany())
            {
                updateReferencesObject.whereClause(
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(inventDimLPCleanupChangeTmp, fieldStr(InventDimLPCleanupChangeTmp, InventDimIdFrom)),
                    new SysDaFieldExpression(common, _refFieldName)));
            }
            else
            {
                updateReferencesObject.whereClause(
                    new SysDaAndExpression(
                        new SysDaEqualsExpression(
                            new SysDaFieldExpression(inventDimLPCleanupChangeTmp, fieldStr(InventDimLPCleanupChangeTmp, InventDimIdFrom)),
                            new SysDaFieldExpression(common, _refFieldName)),
                        new SysDaEqualsExpression(
                            new SysDaFieldExpression(inventDimLPCleanupChangeTmp, fieldStr(InventDimLPCleanupChangeTmp, DataAreaId)),
                            new SysDaFieldExpression(common, _dataAreaIdFieldName))));
            }

            commonObject.joinClause(SysDaJoinKind::InnerJoin, updateReferencesObject);

            connection.ttsbegin();
            new SysDaUpdateStatement().update(commonObject);
            connection.ttscommit();
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::DuplicateKeyException)
        {
            // warning but ignore the error
            warning(strFmt("@SCM:InventDimLPCleanupBundleDuplicateKeyError", _refFieldName, new DictTable(_refTableId).name()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaskList</Name>
				<Source><![CDATA[
    public List parmTaskList(List _taskList = taskList)
    {
        taskList = _taskList;
        return taskList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, taskList.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int version = RunBase::getVersion(_packedClass);
        container taskListContainer;

        switch (version)
        {
            case #CurrentVersion:
                [version, taskListContainer] = _packedClass;
                break;
            default:
                return false;
        }

        taskList = List::create(taskListContainer);

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>