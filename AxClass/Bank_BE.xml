<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Bank_BE</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class Bank_BE extends Bank
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkBankAccount</Name>
				<Source><![CDATA[
    public boolean checkBankAccount(BankAccountMap _bankAccountMap)
    {
        return this.checkBankAccountNum(_bankAccountMap.AccountNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBankAccountNum</Name>
				<Source><![CDATA[
    public boolean checkBankAccountNum(BankAccount _bankAccount)
    {
        boolean ret = true;

        if (_bankAccount)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBE00012, funcName());

            if ( strfind(_bankAccount, '-', 4, 1) && strFind(_bankAccount, '-', 12, 1))
            {
                str omg10 = strKeep(_bankAccount, '0123456789');
                if (strLen(omg10) == 12)
                {
                    omg10 = subStr(omg10, 1, 10);
                    real result = str2Num(omg10) / 97;
                    result = decRound((result - trunc(result)) * 97, 0);

                    if (! result)
                    {
                        result = 97;
                    }

                    if (result != str2Num(subStr(_bankAccount, 13, 2)) || strLen(_bankAccount) != 14)
                    {
                        ret = checkFailed(strFmt("@SYS75219", _bankAccount));
                    }
                }
                else
                {
                    ret = checkFailed(strFmt("@SYS83347", _bankAccount));
                }
            }
            else
            {
                ret = checkFailed(strFmt("@SYS83347", _bankAccount));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPaymId</Name>
				<Source><![CDATA[
    public boolean checkPaymId(PaymId  _paymId)
    {
        boolean ret = true;

        if (!VendParameters::find().DisablePaymentIDValidation_CH)
        {
            if (subStr(_paymId, 1, 3) == '+++' || subStr(_paymId, 1, 3) == '***')
            {
                PaymId paymId = strKeep(_paymId, '0123456789');
                if (strLen(paymId) == 12)
                {
                    ret = Bank_BE::validateCheckDigit(paymId);
                }
                else
                {
                    ret = checkFailed("@SYS75218");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite(BankAccountMap _bankAccountMap)
    {
        boolean ret = true;

        if (_bankAccountMap.AccountNum && _bankAccountMap.fieldAccessRight(fieldstr(BankAccountMap, AccountNum)) != AccessRight::NoAccess)
        {
            ret = this.checkBankAccountNum(_bankAccountMap.AccountNum);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPaymentId</Name>
				<Source><![CDATA[
    public static boolean checkPaymentId(PaymId  _paymId)
    {
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoBE, GlobalizationConstants::FeatureReferenceBE00012] ],
            funcName()
        );

        boolean ret = true;

        if (subStr(_paymId,1,3) == '+++')
        {
            PaymId paymId = strKeep(_paymId, '0123456789');

            if (strLen(paymId) == 12)
            {
                ret = Bank_BE::validateCheckDigit(paymId);
            }
            else
            {
                ret = checkFailed("@SYS75218");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPaymIdStructured</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the payment ID is to be considered as a structured payment ID according to the
    ///    Belgian definition for a structured payment ID.
    /// </summary>
    /// <param name="_paymId">
    ///    The payment ID to analyze.
    /// </param>
    /// <returns>
    ///    true if the payment ID is structured; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The method does not analyze if the payment ID is a valid payment ID, for example, in relation to
    ///    check digits. Other methods on this class do the analysis.
    /// </remarks>
    public static boolean isPaymIdStructured(PaymId _paymId)
    {
        boolean isStructured = false;

        if (subStr(_paymId, 1, 3) == '+++' || subStr(_paymId, 1, 3) == '***')
        {
            isStructured = true;
        }

        return isStructured;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCheckDigit</Name>
				<Source><![CDATA[
    public static boolean validateCheckDigit(PaymReference _origPaymReference)
    {
        boolean ret = true;

        str omg10 = substr(_origPaymReference, 1, 10);
        real result = str2num(omg10) / 97;
        result = decround((result - trunc(result)) * 97, 0);

        if (!result)
        {
            result = 97;
        }

        if (result != str2Num(subStr(_origPaymReference, 11, 2)))
        {
            ret = checkFailed(strfmt("@SYS75219", _origPaymReference));
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>