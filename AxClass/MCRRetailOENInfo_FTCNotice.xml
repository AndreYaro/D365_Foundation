<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRRetailOENInfo_FTCNotice</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>MCRRetailOENInfo_FTCNotice</c> generates event
/// notification for ftc notice
/// </summary>
class MCRRetailOENInfo_FTCNotice extends RetailOENInfo
{
    #MCRRetailOENInfo

    RetailEventNotificationType retailEventNotificationType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>EventNotificationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to return the event notification type.
    /// </summary>
    /// <returns>
    /// Event notification type.
    /// </returns>
    public RetailEventNotificationType EventNotificationType()
    {
        return retailEventNotificationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameterMap</Name>
				<Source><![CDATA[
    protected void initParameterMap()
    {
        CompanyInfo companyInfo = CompanyInfo::findDataArea(curext());

        super();
        parameterMap.insert(#TodaysDate, RetailENInfo::formatDatetimeData(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), languageId));
        parameterMap.insert(#AccountNum, salesOrder.CustAccount);
        parameterMap.insert(#CompanyName, companyInfo.name());
        parameterMap.insert(#CompanyPhone, companyInfo.phone());
        parameterMap.insert(#CreatedDate, RetailENInfo::formatDatetimeData(salesOrder.createDate(), languageId));
        parameterMap.insert(#URL, companyInfo.url());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSetting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the settings.
    /// </summary>
    /// <param name = "_refRecId">The RecId of sales order.</param>
    public void initSetting(RefRecId _refRecId)
    {
        MCRChannelUser                  mcrChannelUser;
        RetailChannelTable              retailChannelTable;

        select firstOnly notificationSetting
            where notificationSetting.EventNotificationType == this.EventNotificationType()
            join notificationProfile
            where notificationProfile.RecId == notificationSetting.EventNotificationProfile
            exists join retailChannelTable
            where retailChannelTable.EventNotificationProfileId == notificationProfile.ProfileId
            exists join mcrChannelUser
            where mcrChannelUser.Channel == retailChannelTable.RecId
                && mcrChannelUser.User == curUserId();

        this.resolveSalesOrder(_refRecId);

        this.initParameterMap();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new <c>MCRRetailOENInfo_FTCNotice</c> object.
    /// </summary>
    /// <param name="_retailEventNotificationType">
    /// The type of notification to be set as the class variable; optional.
    /// </param>
    public void new(RetailEventNotificationType _retailEventNotificationType = RetailEventNotificationType::MCRFTCFirstNotice)
    {
        retailEventNotificationType = _retailEventNotificationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds sales order and sets value to <c>RetailOENInfo</c>.
    /// </summary>
    /// <param name="_refRecId">
    /// Sales order record id.
    /// </param>
    public void resolveSalesOrder(RefRecId _refRecId)
    {
        this.parmSalesOrder(SalesTable::findRecId(_refRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUpcomingInventAvailDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves next open PO date for item on sales line.
    /// </summary>
    /// <param name="_salesLine">
    /// The sales line table for which the upcoming inventory availablity date is to be calculated.
    /// </param>
    /// <returns>
    /// The string representation date of the next open purchase order for the item if one exists; otherwise, the string "Unknown".
    /// </returns>
    /// <remarks>
    /// This will match on color/size/config dimensions but will ignore inventory dimensions.
    /// </remarks>
    public static String30 getUpcomingInventAvailDate(SalesLine _salesLine)
    {
        TransDate       transDate;
        InventDimParm   inventDimParm;

        inventDimParm.ConfigIdFlag = NoYes::Yes;
        inventDimParm.InventColorIdFlag = NoYes::Yes;
        inventDimParm.InventSizeIdFlag = NoYes::Yes;

        transDate = InventTable::MCRGetUpcomingInventAvailDate(_salesLine.inventTable(),
            _salesLine.inventDim(), inventDimParm);

        if (transDate)
        {
            return mthName(mthOfYr(transDate))
                + ' ' + int2str(dayOfMth(transDate)) + ', '
                + int2str(year(transDate));
        }

        return "@SYS21247";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>