<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxSpec</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxSpec</c> class is used by several invoice reports to hold and return several variables.
/// </summary>
/// <remarks>
///    This class is the parent of the following extended classes:
///    <list type="bullet">
///       <item>
///          <description>
///             <c>TaxProformaSpec </c>
///          </description>
///       </item>
///       <item>
///          <description>
///             <c>TaxInvoiceSpec </c>
///          </description>
///       </item>
///       <item>
///          <description>
///             <c>TaxJournalSpec</c>
///          </description>
///       </item>
///    </list>
/// </remarks>
class TaxSpec
{
    NoYes           released;

    TaxCode         taxCode;
    TaxDirection    taxDirection;
    TaxWriteCode    taxWriteCode;
    TaxAmountCur    taxAmountCur;
    TaxAmount       taxAmountMST;
    TaxBaseCur      taxBaseAmountCur;
    TaxBase         taxBaseAmountMST;
    TaxQty          taxBaseQty;
    TaxValue        taxValue;
    TaxExemptTax    taxExemptTax;
    TaxExemptCode   taxExemptCode;

    TaxAmountCur    taxInCostPriceCur;
    TaxAmount       taxInCostPriceMST;

    CurrencyCode    currencyCode;

    NoYes               intracomVATInvoice;
    TaxAmountCur        taxInvoiceAmount;
    Description255      taxExemptDescription;
    LanguageTxtText     taxExemptDescriptionText;
    TaxExemptCodeTable  taxExemptCodeTable;
    TaxSpecTmp          taxSpecTmp;
    LanguageId          languageId;

    TaxAmountCur    totalTaxAmountCur;
    TaxAmount       totalTaxAmountMST;
    TaxBaseCur      totalTaxBaseAmountCur;
    TaxBase         totalTaxBaseAmountMST;
    // <GEELT>
    TaxExcludeFromInvoice   excludeFromInvoice;
    // </GEELT>

    // <GIN>
    TaxRegulationAmountCur  serviceTaxReverseChargeOriginAmount_IN;
    // <GIN>
    // <GMY>
    boolean isGSTInvoice_MY;
    protected TaxCode reportingTaxCode;
    protected TaxWriteCode reportingTaxWriteCode;
    protected TaxReverseCharge reverseCharge;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the variable currencyCode.
    /// </summary>
    /// <returns>
    ///    The value of the variable currencyCode.
    /// </returns>
    CurrencyCode currencyCode()
    {
        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExcludeFromInvoice</Name>
				<Source><![CDATA[
    public TaxExcludeFromInvoice parmExcludeFromInvoice(TaxExcludeFromInvoice _excludeFromInvoice = excludeFromInvoice)
    {
        excludeFromInvoice = _excludeFromInvoice;
        return excludeFromInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLanguageId</Name>
				<Source><![CDATA[
    LanguageId parmLanguageId(LanguageId _languageId = languageId)
    {
        ;
        languageId = _languageId;
        return languageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxSpec</Name>
				<Source><![CDATA[
    public boolean parmTaxSpec(boolean _canGroupOnTaxDirection = true)
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>serviceTaxReverseChargeOriginAmount_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the variable serviceTaxReverseChargeOriginAmount.
    /// </summary>
    /// <returns>
    /// The value of the variable serviceTaxReverseChargeOriginAmount.
    /// </returns>
    TaxRegulationAmountCur  serviceTaxReverseChargeOriginAmount_IN()
    {
        return serviceTaxReverseChargeOriginAmount_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIntracomVATInvoice</Name>
				<Source><![CDATA[
    public void setIntracomVATInvoice(NoYes _intracomVATInvoice)
    {
        intracomVATInvoice = _intracomVATInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTmpTaxWorkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the instance of the <c>TmpTaxWorkTrans</c> table.
    /// </summary>
    /// <param name="_tmpTaxWorkTrans">
    ///    The instance of the <c>TmpTaxWorkTrans</c> table to set; optional
    /// </param>
    void setTmpTaxWorkTrans(TmpTaxWorkTrans _tmpTaxWorkTrans = null)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the <c>taxAmountCur</c> variable.
    /// </summary>
    /// <returns>
    ///    The value of the <c>taxAmountCur</c> variable.
    /// </returns>
    TaxAmountCur taxAmount()
    {
        return taxAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the variable taxAmountMST.
    /// </summary>
    /// <returns>
    ///    The value of the variable taxAmountMST.
    /// </returns>
    TaxAmount taxAmountMST()
    {
        return taxAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBaseAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the variable taxBaseAmountCur.
    /// </summary>
    /// <returns>
    ///    The value of the variable taxBaseAmountCur.
    /// </returns>
    TaxBaseCur  taxBaseAmount()
    {
        return taxBaseAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBaseAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the variable taxBaseAmountMST.
    /// </summary>
    /// <returns>
    ///    The value of the variable taxBaseAmountMST.
    /// </returns>
    TaxBase  taxBaseAmountMST()
    {
        return taxBaseAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBaseQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the variable taxBaseQty
    /// </summary>
    /// <returns>
    ///    The variable taxBaseQty.
    /// </returns>
    TaxBase  taxBaseQty()
    {
        return taxBaseQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the variable taxCode.
    /// </summary>
    /// <returns>
    ///    The value of the variable taxCode.
    /// </returns>
    TaxCode  taxCode()
    {
        return taxCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxExemptDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax exempt description.
    /// </summary>
    /// <returns>The tax exempt description.</returns>
    Description255 taxExemptDescription()
    {
        return taxExemptDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxExemptDescriptionText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the complete tax exempt description.
    /// </summary>
    /// <returns>The tax exempt description.</returns>
    internal LanguageTxtText taxExemptDescriptionText()
    {
        return taxExemptDescriptionText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxInvoiceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax amount for invoice.
    /// </summary>
    /// <returns>The tax amount for invoice.</returns>
    public TaxAmountCur taxInvoiceAmount()
    {
        return taxInvoiceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxValue2str</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Formats a tax value into a string with the proper number of decimal places.
    /// </summary>
    /// <param name="_value">
    ///    The <c>TaxValue</c> to be converted.
    /// </param>
    /// <returns>
    ///    The correctly formatted tax value string.
    /// </returns>
    /// <remarks>
    ///    Allows the number of decimal places for tax values to be controlled solely by the <c>TaxValue</c>
    ///    extended data type. Derived classes use this method to store a pre-formatted string in the
    ///    <c>PrintCode</c> column of <c>TaxSpecTmp</c> table.
    /// </remarks>
    public TaxWriteCode taxValue2str(TaxValue _value)
    {
        SysDictType dictType = new SysDictType(extendedTypeNum(TaxValue));
        ;
        return num2str(_value, -1, dictType.noOfDecimals(), -1, -1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxWriteCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the variable taxWriteCode.
    /// </summary>
    /// <returns>
    ///    The value of the variable taxWriteCode.
    /// </returns>
    TaxWriteCode  taxWriteCode()
    {
        return  taxWriteCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total tax amount.
    /// </summary>
    /// <returns>The total tax amount.</returns>
    TaxAmountCur totalTaxAmount()
    {
        return totalTaxAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalTaxAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total tax amount MST.
    /// </summary>
    /// <returns>The total tax amount MST.</returns>
    TaxAmount totalTaxAmountMST()
    {
        return totalTaxAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalTaxBaseAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total tax base amount.
    /// </summary>
    /// <returns>The total tax base amount.</returns>
    TaxBaseCur  totalTaxBaseAmount()
    {
        return totalTaxBaseAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalTaxBaseAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total tax base amount MST.
    /// </summary>
    /// <returns>The total tax base amount MST.</returns>
    TaxBase  totalTaxBaseAmountMST()
    {
        return totalTaxBaseAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static TaxSpec  construct(Voucher       _voucher,
                              TransDate     _date,
                              recId         _recId,
                              recId         _ledgerJournalTransrecId = 0,
                              boolean       _isTaxInvoice = false,
                              invoiceId     _invoiceid = "",
                              RetailCustInvoiceJour _rboCustInvoiceJour = NoYes::No)
    {
        if (_voucher && _date)
            if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
            {
                return new TaxInvoiceSpec(_voucher, _date, _ledgerJournalTransrecId, _isTaxInvoice, _invoiceId, _rboCustInvoiceJour);
            }
            else
            {
                return new TaxInvoiceSpec(_voucher, _date, _ledgerJournalTransrecId, _isTaxInvoice);
            }
        else
            return new TaxProformaSpec(_recId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTSummaryText_MY</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the GST summary text.
    /// </summary>
    /// <param name="_invoiceJour">
    /// A invoice jour record that contains the invoice information.
    /// </param>
    /// <returns>
    /// The tax percentage.
    /// </returns>
    public str getGSTSummaryText_MY(
        CustVendInvoiceJour _invoiceJour)
    {
        TaxCode         taxCodeLoc;
        TaxValue        taxValueLoc;
        str             delimiter;
        str             summaryText;
        str             taxValueStr;
        TaxParameters   taxParameters = TaxParameters::find();

        if (this.taxExemptTax_MY())
        {
            summaryText = taxParameters.GSTExemptPrintCode_MY;
        }
        else
        {
            summaryText = this.taxWriteCode();
        }

        if (taxParameters.IncludeDelimiterInGSTSummary_MY)
        {
            delimiter = strLRTrim(taxParameters.GSTSummaryDelimiter_MY);
        }

        if (taxParameters.IncludeTaxCodeInGSTSummary_MY)
        {
            taxCodeLoc = this.taxCode();
        }

        if (taxParameters.IncludeTaxValueInGSTSummary_MY)
        {
            taxValueLoc = TaxData::percent(this.taxCode(), _invoiceJour.InvoiceDate, this.taxBaseAmount());
            taxValueStr = num2str(taxValueLoc, 1, numOfDec(taxValueLoc), -1, -1) + "@SYS77046";
        }

        if (taxCodeLoc || taxValueStr)
        {
            if (delimiter)
            {
                summaryText = strfmt("@Tax:Space", summaryText, delimiter);
            }

            if (taxCodeLoc)
            {
                summaryText = strfmt("@Tax:Space", summaryText, taxCodeLoc);
            }

            if (taxValueStr)
            {
                summaryText = strfmt("@Tax:Space", summaryText, taxValueStr);
            }
        }

        return strLRTrim(summaryText);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsGSTInvoice_MY</Name>
				<Source><![CDATA[
    public boolean parmIsGSTInvoice_MY(boolean _isGSTInvoice_MY = isGSTInvoice_MY)
    {
        isGSTInvoice_MY = _isGSTInvoice_MY;

        return isGSTInvoice_MY;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxExemptTax</Name>
				<Source><![CDATA[
    public TaxExemptTax taxExemptTax()
    {
        return taxExemptTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxExemptTax_MY</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the <c>taxExemptTax</c> variable.
    /// </summary>
    /// <returns>
    ///    The value of the <c>taxExemptTax</c> variable.
    /// </returns>
    public TaxExemptTax taxExemptTax_MY()
    {
        return this.taxExemptTax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingTaxCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the reporting tax code value.
    /// </summary>
    /// <returns>
    ///    The value of the tax code for reporting.
    /// </returns>
    public TaxCode reportingTaxCode()
    {
        return reportingTaxCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingTaxWriteCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the reporting tax write code value.
    /// </summary>
    /// <returns>
    ///    The value of the tax write code for reporting.
    /// </returns>
    public TaxWriteCode reportingTaxWriteCode()
    {
        return reportingTaxWriteCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseCharge</Name>
				<Source><![CDATA[
    public TaxReverseCharge reverseCharge()
    {
        return reverseCharge;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxDirection</Name>
				<Source><![CDATA[
    public TaxDirection taxDirection()
    {
        return taxDirection;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>