<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntrastatUpdateThreshold</Name>
	<SourceCode>
		<Declaration><![CDATA[
class IntrastatUpdateThreshold extends RunBase
{
    QueryRun            queryRun;

    FromDate            fromDate;
    ToDate              toDate;

    NoYes               compress;

    DialogField         dialogFromDate;
    DialogField         dialogToDate;

    DialogField         dialogCompress;

    Intrastat           prevIntrastat;
    Weight              weight;
    AmountMST           amountMST;

    RecordSortedList    recordSortedList;

    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList
        fromDate,
        toDate,
        compress
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addValues</Name>
				<Source><![CDATA[
    void addValues(Intrastat _intrastat)
    {
        weight      += _intrastat.weight;
        amountMST   += _intrastat.reportInvoiceValueMST();

        recordSortedList.ins(_intrastat);
    }

]]></Source>
			</Method>
			<Method>
				<Name>changed</Name>
				<Source><![CDATA[
    boolean changed(Intrastat newIntrastat, Intrastat oldIntrastat)
    {
        if (newIntrastat.IntrastatCommodity != oldIntrastat.IntrastatCommodity ||
            newIntrastat.transDate      != oldIntrastat.transDate       ||
            newIntrastat.invoiceId      != oldIntrastat.invoiceId       ||
            newIntrastat.packingSlipId  != oldIntrastat.packingSlipId   ||
            newIntrastat.direction      != oldIntrastat.direction       ||
            newIntrastat.transportMode  != oldIntrastat.transportMode)
            return true;

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>compress</Name>
				<Source><![CDATA[
    void compress()
    {
        IntrastatCompression intrastatCompression = new IntrastatCompression();

        intrastatCompression.parmFromDate(fromDate);
        intrastatCompression.parmToDate(toDate);

        intrastatCompression.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    Object  dialog()
    {
        DialogRunbase dialog = super();

        dialogFromDate  = dialog.addField(extendedTypeStr(TransDate),"@SYS2168","@SYS62037");
        dialogFromDate.value(fromDate);

        dialogToDate    = dialog.addField(extendedTypeStr(TransDate),"@SYS22882","@SYS62038");
        dialogToDate.value(toDate);

        dialogCompress  = dialog.addField(enumStr(NoYes),"@SYS19083","@SYS62047");
        dialogCompress.value(compress);

        dialog.addMenuItemButton(MenuItemType::Display,menuItemDisplayStr(RunBaseQueryDialog),DialogMenuItemGroup::BottomGrp);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean  getFromDialog()
    {
        fromDate    = dialogFromDate.value();
        toDate      = dialogToDate.value();
        compress    = dialogCompress.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBelowThreshold</Name>
				<Source><![CDATA[
    boolean isBelowThreshold()
    {
        if ((amountMST < this.maxAmount()) &&
            (!this.maxWeight() || weight < this.maxWeight()))
            return true;

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>intrastatCommodity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets intrastat commodity from the intrastat parameters.
    /// </summary>
    /// <returns>
    /// Intrastat commodity.
    /// </returns>
    IntrastatCommodityId intrastatCommodity()
    {
        return IntrastatParameters::find().IntrastatCommodity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxAmount</Name>
				<Source><![CDATA[
    AmountMST maxAmount()
    {
        return IntrastatParameters::find().maxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxWeight</Name>
				<Source><![CDATA[
    Weight maxWeight()
    {
        return IntrastatParameters::find().maxWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();

        queryRun = new QueryRun(queryStr(IntrastatThresholdUpdate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion,#CurrentList,queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    ///    dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    ///    in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resets the class to its default state.
    /// </summary>
    /// <remarks>
    ///    This method is called by the <c>RunBaseSetDefault</c> class.
    /// </remarks>
    void  reset()
    {
        weight      = 0;
        amountMST   = 0;

        recordSortedList = new RecordSortedList(tableNum(Intrastat));
        recordSortedList.sortOrder(fieldNum(Intrastat,recId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        boolean             firstRecord = true;
        Intrastat           intrastat;

        this.updateQueryBuild();

        ttsBegin;

        this.progressInit("@SYS62040", 0, #AviSearch);

        queryRun.query().dataSourceTable(tableNum(Intrastat)).update(true);

        while (queryRun.next())
        {
            if (!queryRun.changed(tableNum(Intrastat)))
            {
                continue;
        }

            intrastat = queryRun.get(tableNum(Intrastat));

            if (firstRecord)
            {
                prevIntrastat.data(intrastat);

                this.reset();
                firstRecord = false;
            }

            if (this.changed(intrastat, prevIntrastat))
            {
                if (this.isBelowThreshold())
                {
                    this.updateBelowThresholdTransactions();
                }

                this.reset();
            }

            this.addValues(intrastat);
        }

        if (this.changed(intrastat, prevIntrastat))
        {
            if (this.isBelowThreshold())
            {
                this.updateBelowThresholdTransactions();
            }
        }

        if (compress)
        {
            this.compress();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer      version      = conpeek(packedClass,1);
        container    packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,packedQuery]      = packedClass;
                if (packedQuery)
                    queryRun = new QueryRun(packedQuery);
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBelowThresholdTransactions</Name>
				<Source><![CDATA[
    void updateBelowThresholdTransactions()
    {
        Intrastat intrastat;

        recordSortedList.first(intrastat);

        while (intrastat)
        {
            intrastat.IntrastatCommodity = this.intrastatCommodity();
            intrastat.update();

            if (!recordSortedList.next(intrastat))
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryBuild</Name>
				<Source><![CDATA[
    void updateQueryBuild()
    {
        queryRun.query().dataSourceTable(tableNum(Intrastat)).addRange(fieldNum(Intrastat,transDate)).value(queryRange(fromDate,toDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean  validate(Object calledFrom = null)
    {
        IntrastatCompression    intrastatCompression;
        boolean                 ok = true;

        if (!this.maxAmount())
        {
            info ("@SYS76912");
            return false;
        }

        if (!this.intrastatCommodity())
        {
            info ("@SYS27176");
            return false;
        }

        if (fromDate == dateNull())
        {
            info ("@SYS19617");
            ok = false;
        }

        if (fromDate == dateNull())
        {
            info ("@SYS27232");
            ok = false;
        }

        if (fromDate > toDate)
        {
            info ("@SYS21592");
            ok = false;
        }

        if (compress && ok)
        {
            intrastatCompression = new IntrastatCompression();

            intrastatCompression.parmFromDate(fromDate);
            intrastatCompression.parmToDate(toDate);

            ok = intrastatCompression.validateCompression();
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static Description description()
    {
        return "@SYS62040";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        IntrastatUpdateThreshold intrastatUpdateThreshold;
        intrastatUpdateThreshold = new IntrastatUpdateThreshold();

        if (intrastatUpdateThreshold.prompt())
            intrastatUpdateThreshold.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>