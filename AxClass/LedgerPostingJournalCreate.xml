<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerPostingJournalCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public final class LedgerPostingJournalCreate extends RunBase
{
    private const str FeatureReference = 'BE-00024';

    LedgerJournalName                 ledgerJournalName;
    LedgerPostingJournal              ledgerPostingJournal;
    LedgerPostingJournalVoucherSeries ledgerPostingJournalVoucherSeries;

    NoYes                             createFromJournalName;
    Counter                           createdPostingJournals;
    Counter                           addedToPostingJournals;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankModule</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void bankModule()
    {
        /* Bank */
        NumberSequenceReference numberSequenceReference = BankParameters::numRefBankReconcileVoucher();
        this.createPostingJournal(numberSequenceReference);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromJournalName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createFromJournalName(LedgerJournalNameId _ledgerJournalName,
                                         Name                _name,
                                         NumberSequenceCode  _voucherSeries)
    {
        if (!LedgerPostingJournalVoucherSeries::exist(_voucherSeries) && _voucherSeries)
        {
            ttsbegin;
            if (LedgerPostingJournal::find(_ledgerJournalName))
            {
                addedToPostingJournals++;
            }
            else
            {
                ledgerPostingJournal.clear();
                ledgerPostingJournal.LedgerPostingJournalId = _ledgerJournalName;
                ledgerPostingJournal.Name                   = _name;
                ledgerPostingJournal.doInsert();
                createdPostingJournals++;
            }

            ledgerPostingJournalVoucherSeries.clear();
            ledgerPostingJournalVoucherSeries.LedgerPostingJournalId = _ledgerJournalName;
            ledgerPostingJournalVoucherSeries.VoucherSeries          = _voucherSeries;
            ledgerPostingJournalVoucherSeries.doInsert();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromNumberSeqGroup</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createFromNumberSeqGroup()
    {
        NumberSequenceGroupRef numberSequenceGroupRef;

        // Find all numbersequencecodes there is used in NumberSequenceGroups and attach these to a postingJournal.
        while select NumberSequenceId from numberSequenceGroupRef
            where numberSequenceGroupRef.NumberSequenceId
        {
            NumberSequenceTable numberSequenceTable = NumberSequenceTable::find(numberSequenceGroupRef.NumberSequenceId);
            if (!LedgerPostingJournalVoucherSeries::exist(numberSequenceTable.NumberSequence))
            {
                ledgerPostingJournal.LedgerPostingJournalId = numberSequenceTable.NumberSequence;
                ledgerPostingJournal.Name                   = numberSequenceTable.Txt;
                ledgerPostingJournal.doInsert();
                createdPostingJournals++;

                ledgerPostingJournalVoucherSeries.clear();
                ledgerPostingJournalVoucherSeries.LedgerPostingJournalId = ledgerPostingJournal.LedgerPostingJournalId;
                ledgerPostingJournalVoucherSeries.VoucherSeries = numberSequenceTable.NumberSequence;
                ledgerPostingJournalVoucherSeries.doInsert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMissingPostingJournals</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createMissingPostingJournals()
    {
        ttsbegin;
        this.bankModule();
        this.ledgerModule();
        this.taxModule();
        this.custModule();
        this.vendModule();
        this.inventModule();
        this.prodModule();
        this.purchModule();
        this.salesModule();
        this.projModule();
        this.createFromNumberSeqGroup();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPostingJournal</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createPostingJournal(NumberSequenceReference _numberSequenceReference)
    {
        NumberSequenceReference numberSequenceReferenceLocal;

        if (_numberSequenceReference.AllowSameAs)
        {
            // If the numberSequence follows another numberSequenceReference,
            // Then find the new reference.
            numberSequenceReferenceLocal = NumberSeqReference::findReference(NumberSequenceDatatype::find(_numberSequenceReference.NumberSequenceDatatype).DataTypeSameAsId);
        }
        else
        {
            numberSequenceReferenceLocal = _numberSequenceReference;
        }

        NumberSequenceTable numberSequenceTable = NumberSequenceTable::find(numberSequenceReferenceLocal.NumberSequenceId);
        if (!LedgerPostingJournalVoucherSeries::exist(numberSequenceTable.NumberSequence) && numberSequenceTable.NumberSequence)
        {
            if (LedgerPostingJournal::find(numberSequenceTable.NumberSequence))
            {
                addedToPostingJournals++;
            }
            else
            {
                ledgerPostingJournal.clear();
                ledgerPostingJournal.LedgerPostingJournalId = numberSequenceTable.NumberSequence;
                ledgerPostingJournal.Name                   = numberSequenceTable.Txt;
                ledgerPostingJournal.doInsert();
                createdPostingJournals++;
            }

            ledgerPostingJournalVoucherSeries.clear();
            ledgerPostingJournalVoucherSeries.LedgerPostingJournalId = numberSequenceTable.NumberSequence;
            ledgerPostingJournalVoucherSeries.VoucherSeries          = numberSequenceTable.NumberSequence;
            ledgerPostingJournalVoucherSeries.doInsert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>custModule</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void custModule()
    {
        /* Cust */
        NumberSequenceReference numberSequenceReference = CustParameters::numRefCollectionLetterVoucher();
        this.createPostingJournal(numberSequenceReference);

        numberSequenceReference = CustParameters::numRefInterestNoteVoucher();
        this.createPostingJournal(numberSequenceReference);

        numberSequenceReference = CustParameters::numRefCustExchAdjVoucher();
        this.createPostingJournal(numberSequenceReference);

        numberSequenceReference = CustParameters::numRefCustCloseVoucher();
        this.createPostingJournal(numberSequenceReference);

        numberSequenceReference = CustParameters::numRefCustCreditNoteVoucher();
        this.createPostingJournal(numberSequenceReference);

        numberSequenceReference = CustParameters::numRefCustInvoiceVoucher();
        this.createPostingJournal(numberSequenceReference);

        numberSequenceReference = CustParameters::numRefCustPaymVoucher();
        this.createPostingJournal(numberSequenceReference);

        numberSequenceReference = CustParameters::numRefCustOverPaymId();
        this.createPostingJournal(numberSequenceReference);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void initFromArgs(Args _args)
    {
        if (_args)
        {
            if (_args.dataset() == tablenum(LedgerJournalName))
            {
                ledgerJournalName     = _args.record();
                createFromJournalName = NoYes::Yes;
            }
            else
            {
                createFromJournalName = NoYes::No;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventModule</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void inventModule()
    {
        NumberSequenceTable numberSequenceTable;
        InventJournalName   inventJournalName;

        /* Invent */
        NumberSequenceReference numberSequenceReference = InventParameters::numRefInventJournalVoucherId();
        this.createPostingJournal(numberSequenceReference);

        numberSequenceReference = InventParameters::numRefTransferVoucherId();
        this.createPostingJournal(numberSequenceReference);

        numberSequenceReference = InventParameters::numRefInventAdjustmentVoucherId();
        this.createPostingJournal(numberSequenceReference);

        numberSequenceReference = InventParameters::numRefInventClosingVoucherId();
        this.createPostingJournal(numberSequenceReference);

        numberSequenceReference = InventParameters::numRefInventStdCostRevaluationVoucherId();
        this.createPostingJournal(numberSequenceReference);

        while select JournalNameId, Description from inventJournalName
            join NumberSequence from numberSequenceTable
            where numberSequenceTable.RecId == inventJournalName.VoucherNumberSequenceTable
        {
            this.createFromJournalName(inventJournalName.JournalNameId, inventJournalName.Description, numberSequenceTable.NumberSequence);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerModule</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void ledgerModule()
    {
        #ISOCountryRegionCodes
        LedgerJournalName ledgerJournal;

        /* Ledger */
        NumberSequenceReference numberSequenceReference = LedgerParameters::numRefLedgerExchAdjVoucher();
        this.createPostingJournal(numberSequenceReference);

        numberSequenceReference = LedgerParameters::numRefJournalNum();
        this.createPostingJournal(numberSequenceReference);

        numberSequenceReference = LedgerParameters::numRefClosingSheet();
        this.createPostingJournal(numberSequenceReference);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES]))
        {
            numberSequenceReference = LedgerParameters::numRefOpeningSheet_ES();
            this.createPostingJournal(numberSequenceReference);
        }

        numberSequenceReference = LedgerParameters::numRefLedgerReversalVoucher();
        this.createPostingJournal(numberSequenceReference);

        numberSequenceReference = LedgerParameters::numRefLedgerTempVoucher();
        this.createPostingJournal(numberSequenceReference);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBE]))
        {
            numberSequenceReference = LedgerParameters::numRefGeneralJournalEntryJournalNumber();
            this.createPostingJournal(numberSequenceReference);
        }

        while select JournalName, Name, NumberSequenceTable from ledgerJournal
        {
            this.createFromJournalName(ledgerJournal.JournalName, ledgerJournal.Name, NumberSequenceTable::find(ledgerJournal.NumberSequenceTable).NumberSequence);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodModule</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void prodModule()
    {
        ProdJournalName prodJournalName;

        /* Prod */
        NumberSequenceReference numberSequenceReference = ProdParameters::numRefProdCalcVoucherId();
        this.createPostingJournal(numberSequenceReference);

        numberSequenceReference = ProdParameters::numRefProdJournalVoucherId();
        this.createPostingJournal(numberSequenceReference);

        while select JournalNameId, Description, VoucherSeqRecId from prodJournalName
        {
            this.createFromJournalName(prodJournalName.JournalNameId, prodJournalName.Description, NumberSequenceTable::find(prodJournalName.VoucherSeqRecId).NumberSequence);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projModule</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void projModule()
    {
        ProjJournalName     projJournalName;
        NumberSequenceTable numberSequenceTable;

        /* Proj */
        NumberSequenceReference numberSequenceReference = ProjParameters::numRefProjPeriodVoucher();
        this.createPostingJournal(numberSequenceReference);

        numberSequenceReference = ProjParameters::numRefProjAdjustmentId();
        this.createPostingJournal(numberSequenceReference);

        numberSequenceReference = ProjParameters::numRefProjNormalCreditNoteVoucher();
        this.createPostingJournal(numberSequenceReference);

        numberSequenceReference = ProjParameters::numRefProjNormalInvoiceVoucher();
        this.createPostingJournal(numberSequenceReference);

        numberSequenceReference = ProjParameters::numRefProjOnAccCreditNoteVoucher();
        this.createPostingJournal(numberSequenceReference);

        numberSequenceReference = ProjParameters::numRefProjOnAccInvoiceVoucher();
        this.createPostingJournal(numberSequenceReference);

        while select JournalNameId, Description from projJournalName
            join NumberSequence from numberSequenceTable
                where numberSequenceTable.RecId == projJournalName.VoucherNumberSequenceTable
        {
            this.createFromJournalName(projJournalName.JournalNameId, projJournalName.Description, numberSequenceTable.NumberSequence);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchModule</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void purchModule()
    {
        /* Purch */
        NumberSequenceReference numberSequenceReference = PurchParameters::numRefPurchPackingSlipVoucher();
        this.createPostingJournal(numberSequenceReference);

        numberSequenceReference = PurchParameters::numRefPurchInvoiceVoucher();
        this.createPostingJournal(numberSequenceReference);

        numberSequenceReference = PurchParameters::numRefPurchCreditNoteVoucher();
        this.createPostingJournal(numberSequenceReference);

        numberSequenceReference = PurchParameters::numRefPurchMarkupVoucher();
        this.createPostingJournal(numberSequenceReference);

        numberSequenceReference = PurchParameters::numRefPurchAdvanceApplicationVoucher();
        this.createPostingJournal(numberSequenceReference);

        numberSequenceReference = PurchParameters::numRefPurchAdvanceVoucher();
        this.createPostingJournal(numberSequenceReference);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        this.validate();

        if (createFromJournalName)
        {
            this.createFromJournalName(ledgerJournalName.JournalName, ledgerJournalName.Name, NumberSequenceTable::find(ledgerJournalName.NumberSequenceTable).NumberSequence);
        }
        else
        {
            this.createMissingPostingJournals();
        }

        if (createdPostingJournals)
        {
            info (strfmt("@SYS62400", int2str(createdPostingJournals)));
        }

        if (addedToPostingJournals)
        {
            info (strfmt("@SYS62473", int2str(addedToPostingJournals)));
        }

        if (!addedToPostingJournals && !createdPostingJournals)
        {
            info ("@SYS62472");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesModule</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void salesModule()
    {
        /* Sales */
        NumberSequenceReference numberSequenceReference = SalesParameters::numRefSalesCreditNoteVoucher();
        this.createPostingJournal(numberSequenceReference);

        numberSequenceReference = SalesParameters::numRefSalesInvoiceVoucher();
        this.createPostingJournal(numberSequenceReference);

        numberSequenceReference = SalesParameters::numRefSalesPackingSlipVoucher();
        this.createPostingJournal(numberSequenceReference);

        numberSequenceReference = SalesParameters::numRefSalesPackingSlipCorrectionVoucher();
        this.createPostingJournal(numberSequenceReference);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxModule</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void taxModule()
    {
        /* Tax */
        NumberSequenceReference numberSequenceReference = TaxParameters::numRefTaxReportingVoucher();
        this.createPostingJournal(numberSequenceReference);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        return super(_packedClass);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = super();

        if (   ret
            && createFromJournalName
            && LedgerPostingJournalVoucherSeries::exist(NumberSequenceTable::find(ledgerJournalName.NumberSequenceTable).NumberSequence))
        {
            throw error((strfmt("@SYS66071",ledgerJournalName.NumberSequenceTable,LedgerPostingJournalVoucherSeries::find(NumberSequenceTable::find(ledgerJournalName.NumberSequenceTable).NumberSequence).LedgerPostingJournalId)));
        }

        if (    ret
            &&  createFromJournalName
            && !ledgerJournalName.NumberSequenceTable)
        {
            throw error("@SYS62472");
        }

        if (   ret
            && createFromJournalName
            && ledgerJournalName.OffsetAccountType == LedgerJournalACType::Bank)
        {
            if (ledgerJournalName.OffsetLedgerDimension)
            {
                ret = BankAccountTable::isActiveForAllTransactions(ledgerJournalName.parmOffsetAccount());

                if (!ret)
                {
                    throw error(strfmt("@SYS300182", ledgerJournalName.parmOffsetAccount()));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendModule</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void vendModule()
    {
        /* Vend */
        NumberSequenceReference numberSequenceReference = VendParameters::numRefVendCloseVoucher();
        this.createPostingJournal(numberSequenceReference);

        numberSequenceReference = VendParameters::numRefVendExchAdjVoucher();
        this.createPostingJournal(numberSequenceReference);

        numberSequenceReference = VendParameters::numRefVendPaymentVoucher();
        this.createPostingJournal(numberSequenceReference);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        LedgerPostingJournalCreate ledgerPostingJournalCreate = new LedgerPostingJournalCreate();
        ledgerPostingJournalCreate.initFromArgs(args);
        ledgerPostingJournalCreate.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>