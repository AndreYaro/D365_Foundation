<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlBuildErrorMessageProc</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>BudgetControlBuildErrorMessageProc</c> is a budget control stored procedure that help build error message.
/// </summary>
[ExportMetadata(enumStr(BudgetControlSQLObjectType), BudgetControlSQLObjectType::StoredProcedure),
 ExportAttribute(identifierstr(Dynamics.AX.Application.BudgetControlISQLObject))]
internal final class BudgetControlBuildErrorMessageProc implements BudgetControlISQLObject
{
    private const str ProcName = 'BudgetControlBuildErrorMessageProc';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getName</Name>
				<Source><![CDATA[
    public str getName()
    {
        return ProcName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefinition</Name>
				<Source><![CDATA[
    public str getDefinition()
    {
        str sqlStatementText;

        sqlStatementText = @"

        CREATE PROCEDURE [dbo].[BudgetControlBuildErrorMessageProc]
        (        @callerProcedure       NVARCHAR(126)
                ,@Error_Number          INT
                ,@Error_Line            INT     = NULL
                ,@Error_State           INT     = 1
                ,@Error_Severity        INT     = 16
                ,@Error_Message         NVARCHAR(4000)  = ''
                ,@Error_Procedure       NVARCHAR(126)   = NULL
                ,@ErrorTrying           NVARCHAR(4000)    = NULL
                ,@isIncludeErrorLineNum CHAR(1) = 'N'
                ,@ReturnErrorMsg		NVARCHAR(4000) OUTPUT
        )

        AS

        SET NOCOUNT ON;

        DECLARE @ErrorMsg              NVARCHAR(4000) -- string containing custom error message
        ;

        SELECT   @isIncludeErrorLineNum = UPPER(@isIncludeErrorLineNum)
                ,@Error_Procedure       = ISNULL(@Error_Procedure,@callerProcedure)
        ;
        IF @Error_State = 0
          BEGIN
            SELECT @Error_State = 1;
          END;

        SELECT @ErrorMsg = @callerProcedure;

        IF @isIncludeErrorLineNum = 'Y'
        --AND @Error_Line IS NOT NULL
          BEGIN
            SELECT @ErrorMsg = @ErrorMsg
                    + N' at line ' +
                    CASE
                    WHEN @Error_Line IS NOT NULL
                        THEN  CAST(@Error_Line AS NVARCHAR)
                    ELSE N'unknown'
                    END;
          END;

        SELECT @ErrorMsg = @ErrorMsg
               + CASE WHEN (@Error_Procedure IS NOT NULL AND @Error_Procedure != @callerProcedure)
                        THEN N' ( in ' + ISNULL(@Error_Procedure,@callerProcedure) + N')'
                      ELSE N''
                 END
               + N':'
               + CASE WHEN @ErrorTrying IS NOT NULL
                        THEN N' Trying: ' + @ErrorTrying
                      ELSE N''
                 END
               + ISNULL (@Error_message,'')
               + CASE WHEN @Error_number IS NOT NULL AND @Error_number != 50000
                        THEN N'(' + CAST (@Error_number AS VARCHAR) + N')'
                      ELSE N''
                 END
        ;

        SELECT @ReturnErrorMsg = @ErrorMsg;

        RETURN(0);
    ";

        return sqlStatementText;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>