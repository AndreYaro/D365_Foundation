<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostAdvancedJournalItemNeverLedger</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjPostAdvancedJournalItemNeverLedger extends ProjPost
{
    private ProjAdvancedJournalLine projAdvancedJournalLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
    public boolean checkTrans(boolean _throwerror = false)
    {
        boolean ok = super();

        if (ok)
        {
            // Do not allow posting only for Time projType
            if (projTrans.projTable().Type == ProjType::Time)
            {
                ok = ok && checkFailed(strFmt("@SYS53011", projTrans.projTable().Type));
            }

            if (ProjCategory::find(projTrans.categoryId()).CategoryType != ProjCategoryType::Item)
            {
                ok = ok && checkFailed(strFmt("@SYS54897",projTrans.categoryId()));
            }

            if (!projTrans.salesUnit())
            {
                ok = ok && checkFailed("@SYS73707");
            }

            if (!projTrans.currencyIdSales())
            {
                ok = ok && checkFailed("@SYS73708");
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditAccountCostValueLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger dimension that posts the credit side of the transactions for costs.
    /// </summary>
    /// <param name="_fundingSourceId">
    /// The funding source that is associated with the project contract that will be used by this
    /// transaction.
    /// </param>
    /// <returns>
    /// The ledger dimension that posts the credit amounts for costs.
    /// </returns>
    public LedgerDimensionDefaultAccount creditAccountCostValueLedgerDimension(ProjFundingSourceRefId _fundingSourceId)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>debitAccountCostValueLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger dimension that is used to post the debit side of a transaction for costs.
    /// </summary>
    /// <param name="_fundingSourceId">
    /// The funding source that is associated with the project contract that will be used by this
    /// transaction.
    /// </param>
    /// <returns>
    /// The ledger dimension that is used to post the debit amounts of cost transactions.
    /// </returns>
    public LedgerDimensionDefaultAccount debitAccountCostValueLedgerDimension(ProjFundingSourceRefId _fundingSourceId)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Common _buffer)
    {
        switch (_buffer.TableId)
        {
            case tableNum(ProjAdvancedJournalLine):
                projAdvancedJournalLine = _buffer;
                projTrans = ProjTrans::newProjTransAdvancedJournal(projAdvancedJournalLine);
                break;
        }

        super(_buffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger posting type that is associated with posting project costs based on the current
    /// project ledger status.
    /// </summary>
    /// <returns>
    /// The ledger posting type for project costs.
    /// </returns>
    /// <remarks>
    /// This method must be implemented in the class that extends from it.
    /// </remarks>
    public LedgerPostingType postingTypeCost()
    {
        return LedgerPostingType::ProjNeverLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeOffsetCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger posting type for project offset cost posting based on the current ledger status of
    /// the project.
    /// </summary>
    /// <returns>
    /// The ledger posting type for project offset costs.
    /// </returns>
    /// <remarks>
    /// This method must be implemented in the class that extends from it.
    /// </remarks>
    public LedgerPostingType postingTypeOffsetCost()
    {
        return LedgerPostingType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows for extensibility when a user is creating a transaction posting.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method before the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmCreateTrans</c> method returns true.
    /// </remarks>
    public void projTransCreate()
    {
        ProjItemTrans projItemTrans = this.initTransFromAdvancedJournalLine(projAdvancedJournalLine);
        projTrans.parmProjAdjustRefId(projItemTrans.ProjAdjustRefId);

        if (!projItemTrans.validateWrite())
        {
            throw error("@SYS21628");
        }

        projItemTrans.insert();
  
        this.createCostSalesDistributions(projTrans.transCost(), projTrans.transTurnover());
            
        if (allocationError == NoYes::No)
        {
            MapEnumerator enumerateMap = new MapEnumerator(saleDistributions);
            while (enumerateMap.moveNext())
            {
                ProjItemTransSale projItemTransSale = this.initializeProjItemTransSale(projItemTrans, enumerateMap);
                projItemTransSale.insert();
            }

            enumerateMap = new MapEnumerator(costDistributions);
            while (enumerateMap.moveNext())
            {
                ProjItemTransCost projItemTransCost = this.initializeProjItemTransCost(projItemTrans, enumerateMap);
                projItemTransCost.insert();
            }
            ProjPost::postItemReverseTransaction(this);
        }

        this.parmTransIdCost(projItemTrans.ProjTransId);
        this.parmTransIdSales(projItemTrans.ProjTransId);

    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProjItemTransSale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates a new <c>ProjItemTransSale</c> table buffer.
    /// </summary>
    /// <param name = "_projItemTrans">
    /// A <c>ProjItemTrans</c> record.
    /// </param>
    /// <param name = "_enumerateMap">
    /// A <c>MapEnumerator</c> instance for the sales distributions.
    /// </param>
    /// <returns>
    /// A <c> ProjItemTransSale </c> record
    /// </returns>
    protected ProjItemTransSale initializeProjItemTransSale(ProjItemTrans _projItemTrans, MapEnumerator _enumerateMap)
    {
        ProjItemTransSale projItemTransSale;

        //Create ProjItemTransSale record
        projItemTransSale.FundingSource = _enumerateMap.currentKey();
        projItemTransSale.LineAmount = _enumerateMap.currentValue();
        ProjFundingSource projFundingSource = ProjFundingSource::find(projItemTransSale.FundingSource);
        projItemTransSale.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(projTrans.defaultDimension(), projFundingSource.DefaultDimension);
        projItemTransSale.SalesPrice = projTrans.salesPrice();
        ProjTable projTable = ProjTable::find(_projItemTrans.ProjId);
        if (projTable.wipProject && ProjMultipleContractLinesForProjectFeatureHelper::isFixedPriceBillingMethod(projTable, ProjTransType::Item))
        {
            if (ProjRevRecHelper::getSalesPriceMatchingPrincipleForProject(projTable.wipProject) != ProjSalesPriceMatchingPrincip::None)
            {
                projItemTransSale.LineAmount = 0;
                projItemTransSale.SalesPrice = 0;
            }
        }
        projItemTransSale.ProjTransId = _projItemTrans.ProjTransId;
        projItemTransSale.LedgerTransdate = this.getLedgerJournalTransDate();
        if (this.checkEnterSalesAccrued() && ProjFundingSource::isExternalFunding(projItemTransSale.FundingSource))
        {
            projItemTransSale.LedgerSalesPosted = true;
            if (projTrans.transTurnoverMST() != 0.0)
            {
                projItemTransSale.LedgerSalesAmount = CurrencyExchangeHelper::mstAmount(CurrencyExchangeHelper::amount(projItemTransSale.LineAmount, this.currencyIdSales()), this.currencyIdSales(), projTrans.transDate(), Currency::noYes2UnknownNoYes(projTrans.triangulationSales()), this.exchRateSales(), this.exchRateSecondarySales());
            }
        }

        projItemTransSale.TransStatus = ProjTransStatus::Posted;

        return projItemTransSale;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProjItemTransCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates a new <c>ProjItemTransCost</c> table buffer.
    /// </summary>
    /// <param name = "_projItemTrans">
    /// A <c>ProjItemTrans</c> record.
    /// </param>
    /// <param name = "_enumerateMap">
    /// A <c>MapEnumerator</c> instance for the sales distributions.
    /// </param>
    /// <returns>
    /// A <c> ProjItemTransCost </c> record
    /// </returns>
    protected ProjItemTransCost initializeProjItemTransCost(ProjItemTrans _projItemTrans, MapEnumerator _enumerateMap)
    {
        ProjItemTransCost   projItemTransCost;

        projItemTransCost.LedgerStatusCost = ProjLedgerStatus::Never;
        projItemTransCost.ProjInventAdjust = false;
        projItemTransCost.TransStatus = ProjTransStatus::Posted;
        projItemTransCost.InventTransId = _projItemTrans.InventTransId;
        projItemTransCost.ProjAdjustRefId = _projItemTrans.ProjAdjustRefId;
        projItemTransCost.FundingSource = _enumerateMap.currentKey();
        projItemTransCost.AmountMST = _enumerateMap.currentValue();
        projItemTransCost.LineAmount = _enumerateMap.currentValue();
        projItemTransCost.LedgerTransdate = _projItemTrans.TransDate;
        projItemTransCost.Voucher = _projItemTrans.VoucherPackingSlip;
        projItemTransCost.ProjId  = _projItemTrans.ProjId;
        projItemTransCost.ItemType = ProjItemType::Project;
        projItemTransCost.CostType = ProjItemTransCostType::Cost;

        ProjFundingSource projFundingSource = ProjFundingSource::find(projItemTransCost.FundingSource);
        projItemTransCost.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(projTrans.defaultDimension(), projFundingSource.DefaultDimension);

        return projItemTransCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransFromAdvancedJournalLine</Name>
				<Source><![CDATA[
    protected ProjItemTrans initTransFromAdvancedJournalLine(ProjAdvancedJournalLine _projAdvancedJournalLine)
    {
        ProjItemTrans projItemTrans;
        
        projItemTrans.ProjTransId = ProjParameters::newTransId();
        projItemTrans.ProjTransIdRef = _projAdvancedJournalLine.ProjTransId;
        projItemTrans.ProjAdjustRefId = NumberSeq::newGetNum(CompanyInfo::numRefParmId()).num();
        projItemTrans.ProjId = _projAdvancedJournalLine.ProjId;
        projItemTrans.ActivityNumber = _projAdvancedJournalLine.ActivityNumber;
        projItemTrans.TransDate = _projAdvancedJournalLine.ProjTransdate;
        projItemTrans.ItemId = _projAdvancedJournalLine.ItemId;
        projItemTrans.InventDimId = _projAdvancedJournalLine.InventDimId;
        projItemTrans.InventTransId = _projAdvancedJournalLine.InventTransId;
        projItemTrans.CategoryId = _projAdvancedJournalLine.ProjCategoryId;
        projItemTrans.CurrencyId = _projAdvancedJournalLine.CostCurrency;
        projItemTrans.DefaultDimension = _projAdvancedJournalLine.DefaultDimension;
        projItemTrans.LinePropertyId = _projAdvancedJournalLine.LinePropertyId;
        projItemTrans.TaxGroupId = _projAdvancedJournalLine.TaxGroup;
        projItemTrans.TaxItemGroupId = _projAdvancedJournalLine.TaxItemGroup;
        projItemTrans.Qty = _projAdvancedJournalLine.Quantity;
        projItemTrans.TransactionOrigin = ProjOrigin::ProjAdvancedJournal;
        projItemTrans.VoucherPackingSlip = _projAdvancedJournalLine.Voucher;
        projItemTrans.TotalCostAmountCur = _projAdvancedJournalLine.ExtendedCost;
        projItemTrans.PSAContractLineNum = _projAdvancedJournalLine.ContractLineId;
        projItemTrans.Txt = _projAdvancedJournalLine.ItemDescription;
        projItemTrans.SubcontractLine = _projAdvancedJournalLine.SubcontractLine;

        return projItemTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>