<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendAutoReverse_Cust_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class CustVendAutoReverse_Cust_RU extends CustVendAutoReverse_RU implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findNextSettlement</Name>
				<Source><![CDATA[
        protected boolean findNextSettlement(CustVendTable _custVendTable)
    {
        CustSettlement              custSettlement;
        CustTrans                   custTrans;
        CustTrans                   custTransOffset;
        CustVendTransPostingLog_RU  postingLog;

        select firstonly custSettlement
        join custTrans
            where custSettlement.TransRecId      == custTrans.RecId  &&
                  custSettlement.DueDate         >= dateFrom         &&
                  custSettlement.DueDate         <= dateTo           &&
                  custSettlement.CanBeReversed   == NoYes::Yes       &&
                  custSettlement.TransCompany    == custSettlement.OffsetCompany &&
                  (custSettlement.AccountNum     == _custVendTable.AccountNum)
        join RecId from custTransOffset
             where custSettlement.OffsetRecid == custTransOffset.RecId
        notexists join postingLog
            where postingLog.PostingLogType     == CustVendTransPostingLogType_RU::Prepayment &&
                  ((postingLog.TransRecId       == custSettlement.TransRecId     &&
                    postingLog.TransCompany     == custSettlement.TransCompany   &&
                    postingLog.OffSetRecId      == custSettlement.OffsetRecid    &&
                    postingLog.OffsetCompany    == custSettlement.OffsetCompany) ||
                   (postingLog.TransRecId       == custSettlement.OffsetRecid    &&
                    postingLog.TransCompany     == custSettlement.OffsetCompany  &&
                    postingLog.OffSetRecId      == custSettlement.TransRecId     &&
                    postingLog.OffsetCompany    == custSettlement.TransCompany)) &&
                    postingLog.RefTableId       == custTrans.TableId;

        custVendTrans = custTrans;
        custVendSettlement = custSettlement;

        return custSettlement.RecId != 0 ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moduleCustVend</Name>
				<Source><![CDATA[
        public ModuleCustVend moduleCustVend()
    {
        return ModuleCustVend::Cust;
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
        protected Query query()
    {
        Query q = new Query();
        ;

        q.addDataSource(tablenum(CustTable));

        return q;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseTransact</Name>
				<Source><![CDATA[
        protected void reverseTransact(CustVendTable _custVendTable)
    {
        CustTrans::reverseTransact(_custVendTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
        protected void updateQuery()
    {
        Query           query = queryRun.query();
        QueryBuildRange qbr;

        qbr = query.dataSourceTable(tablenum(CustTable)).findRange(fieldnum(CustTable, AccountNum));

        if (qbr)
        {
            custVendAC = this.stringValueFromRange(qbr.value());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRanges</Name>
				<Source><![CDATA[
        protected void updateRanges()
    {
        this.findOrCreateRange(tablenum(CustTable), fieldnum(CustTable, AccountNum), custVendAC);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>