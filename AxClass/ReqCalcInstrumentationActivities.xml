<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqCalcInstrumentationActivities</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Master Planning instrumentation activities.
/// </summary>
internal final class ReqCalcInstrumentationActivities
{   
    public const str ReqCalcPrefix = 'Calculate.';

    public const str NetChange = 'NetRequirements';
    public const str Explode = 'Explode';
    public const str ReqCalcRun = 'Run';
    public const str ReqCalcRunMain = 'MasterPlanning';
    public const str ReqCalcForecast = 'Forecast';
    public const str ReqCalcForecastItem = 'ForecastItem';
    public const str ReqCalcParallelFirming = 'ParallelFirming';
    public const str ReqCalcRestartResume = 'RestartResume';
    public const str ReqCalcScheduleOrder = 'ScheduleOrder';
    public const str ReqCalcResumeHelperThreads = 'ResumeHelperThreads';
 
    public const str LogType = 'LogType';
    public const str LogTypePlanningRunStarted = 'PlanningRunStarted';
    public const str LogTypePlanningRunFinished = 'PlanningRunFinished';
    public const str LogTypePlanningProcessTimeout = 'PlanningProcessTimeout';

    // Run parameters

    public const str ParmClassName = 'ClassName';
    public const str ParmCompanyRecId = 'CompanyRecId';
    public const str ParmProcessId = 'ProcessId';
    public const str ParmReqPlanRecId = 'ReqPlanRecId';
    public const str ParmPlanType = 'PlanType';
    public const str ParmPlanningMethod ='PlanningMethod';
    public const str ParmHasItemFilter ='HasItemFilter';
    public const str ParmIsRunningInBatch ='IsRunningInBatch';
    public const str ParmBatchJobId ='BatchJobId';
    public const str ParmBatchTaskId ='BatchTaskId';
    public const str ParmMaxChildThreads ='MaxChildThreads';
    public const str ParmBatchTaskRetryCount = 'BatchTaskRetryCount';
    public const str ParmMaximumRetryAttemptsCount = 'MaximumRetryAttemptsCount';
    public const str ParmActualRetryAttemptsCount = 'ActualRetryAttemptsCount';
    public const str ParmUsedChildThreads = 'UsedChildThreads';
    public const str ParmIsCancelled = 'IsCancelled';
    public const str ParmStartTimeUtc = 'StartTimeUtc';
    public const str ParmEndTimeUtc = 'EndTimeUtc';
    public const str ParmDurationSeconds = 'DurationSeconds';
    public const str ItemRouteId = 'ItemRouteId';
    public const str ParmNumberOfThreadsToCreate = 'NumberOfThreadsToCreate';

    // Master planning parameters

    public const str ParmBundleSize = 'BundleSize';
    public const str ParmScheduleFromDateRule = 'ScheduleFromDateRule';
    public const str ParmIsCopyStaticToDynamicPlanEnabled = 'IsCopyStaticToDynamicPlanEnabled';
    public const str ParmDefaultMarkingRule = 'DefaultMarkingRule';
    public const str ParmIsDynamicNegativeDaysEnabled = 'IsDynamicNegativeDaysEnabled';
    public const str ParmIsSafetyMarginDefinedInWorkingDays = 'IsSafetyMarginDefinedInWorkingDays';
    public const str ParmIsGroupByBuyerGroupEnabledWhenFirming = 'IsGroupByBuyerGroupEnabledWhenFirming';
    public const str ParmIsGroupVendorEnabledWhenFirming = 'IsGroupVendorEnabledWhenFirming';
    public const str ParmIsGroupByPurchaseAgreementEnabledWhenFirming = 'IsGroupByPurchaseAgreementEnabledWhenFirming';
    public const str ParmIsVendorSearchByTradeAgreementEnabled = 'IsSearchByTradeAgreementEnabled';
    public const str ParmVendorSearchByTradeAgreementMethod = 'VendorSearchByTradeAgreementMethod';
    public const str ParmStartTimeForCalculatingDelays = 'StartTimeForCalculatingDelays';
    public const str ParmDefaultReceiptTime = 'DefaultReceiptTime';
    public const str ParmCachingStrategy = 'CachingStrategy';
    public const str ParmIsPreUpdateFilterEnabled = 'IsPreUpdateFilterEnabled';
    public const str ParmIsPreCoverageFilterEnabled = 'IsPreCoverageFilterEnabled';
    public const str ParmIsPreUpdateFiltersIncludeOnHandFeatureEnabled = 'IsPreUpdateFiltersIncludeOnHandFeatureEnabled';

    public const str ParmMustUsePostponedDateAsRequirementDateForPurchases = 'MustUsePostponedDateAsRequirementDateForPurchases';
    public const str ParmFiniteCapacityTimeFence = 'FiniteCapacityTimeFence';
    public const str ParmIsFinitePropertyEnabled = 'IsFinitePropertyEnabled';
    public const str ParmSchedulingMethod = 'SchedulingMethod';
    public const str ParmBackwardsSchedulingCapacityTimeFence = 'BackwardsSchedulingCapacityTimeFence';
    public const str ParmBottleneckCapacityTimeFence = 'BottleneckCapacityTimeFence';

    public const str ParmMustUseDelayDateAsRequirementDateForPlannedProductionOrders = 'MustUseDelayDateAsRequirementDateForPlannedProductionOrders';
    public const str ParmMustUseDelayDateAsRequirementDateForPlannedPurchaseOrdersV2 = 'MustUseDelayDateAsRequirementDateForPlannedPurchaseOrdersV2';
    public const str ParmMustUseDelayDateAsRequirementDateForPlannedTransferOrdersV2 = 'MustUseDelayDateAsRequirementDateForPlannedTransferOrdersV2';
    public const str ParmMustUseDelayDateAsRequirementDateForPlannedKanbans = 'MustUseDelayDateAsRequirementDateForPlannedKanbans';

    public const str ParmMustIncludePlannedIntercompanyDemand = 'MustIncludePlannedIntercompanyDemand';
    public const str ParmMustIncludePurchaseRequisitions = 'MustIncludePurchaseRequisitions';
    public const str ParmMustIncludeOnHand = 'MustIncludeOnHand';
    public const str ParmMustIncludeInventoryMovements = 'MustIncludeInventoryMovements';
    public const str ParmMustIncludeSalesQuotations = 'MustIncludeSalesQuotations';
    public const str ParmMustIncludeRequestsForQuotation = 'MustIncludeRequestsForQuotation';
    
    public const str ParmMustOverrideOnHand = 'MustOverrideOnHand';
    public const str ParmOnHandConsumptionStrategy = 'OnHandConsumptionStrategy';
    public const str ParmMustUseShelfLife = 'MustUseShelfLife';

    public const str ParmHasIssueMargin = 'HasIssueMargin';
    public const str ParmHasReceiptMargin = 'HasReceiptMargin';
    public const str ParmHasOrderingMargin = 'HasOrderingMargin';

    public const str ParmActionsTimeFence = 'ActionsTimeFence';
    public const str ParmCoverageTimeFence = 'CoverageTimeFence';
    public const str ParmDelaysTimeFence = 'DelaysTimeFence';
    public const str ParmFirmingTimeFence = 'FirmingTimeFence';
    public const str ParmApprovedRequisitionsTimeFence = 'ApprovedRequisitionsTimeFence';
    public const str ParmCapacityTimeFence = 'CapacityTimeFence';
    public const str ParmExplosionTimeFence = 'ExplosionTimeFence';
    public const str ParmFreezingTimeFence = 'FreezingTimeFence';
    public const str ParmForecastPlanTimeFence = 'ForecastPlanTimeFence';
    public const str ParmMaxNegativeDaysTimeFence = 'MaxNegativeDaysTimeFence';

    // Finished planning run statistics

    public const str ParmUpdateDurationSeconds = 'UpdateDurationSeconds';
    public const str ParmCoverageDurationSeconds = 'CoverageDurationSeconds';
    public const str ParmDelaysDurationSeconds = 'DelaysDurationSeconds';
    public const str ParmPeggingOptimizationDurationSeconds = 'PeggingOptimizationDurationSeconds';
    public const str ParmActionsDurationSeconds = 'ActionsDurationSeconds';
    public const str ParmAutoFirmingDurationSeconds = 'AutoFirmingDurationSeconds';
    public const str ParmCopyPlanDurationSeconds = 'CopyPlanDurationSeconds';
    public const str ParmFinalizationDurationSeconds = 'FinalizationDurationSeconds';

    public const str ParmCoverageInitLevelProcessingSeconds = 'CoverageInitLevelProcessingSeconds';
    public const str ParmCoverageCoverageProcessingSeconds = 'CoverageCoverageProcessingSeconds';
    public const str ParmCoverageCoCoverageProcessingSeconds = 'CoverageCoCoverageProcessingSeconds';
    public const str ParmCoveragePartitionOrdersProcessingSeconds = 'CoveragePartitionOrdersProcessingSeconds';
    public const str ParmCoverageScheduleResourcesProcessingSeconds = 'CoverageScheduleResourcesProcessingSeconds';
    public const str ParmCoverageFinalizeLevelProcessingSeconds = 'CoverageFinalizeLevelProcessingSeconds';
    public const str ParmFuturesInitLevelProcessingSeconds = 'FuturesInitLevelProcessingSeconds';
    public const str ParmFuturesFuturesIssuesProcessingSeconds = 'FuturesFuturesIssuesProcessingSeconds';
    public const str ParmFuturesPartitionOrdersProcessingSeconds = 'FuturesPartitionOrdersProcessingSeconds';
    public const str ParmFuturesScheduleResourcesProcessingSeconds = 'FuturesInitLevelProcessingSeconds';
    public const str ParmAutoFirmingPartitionOrdersProcessingSeconds = 'AutoFirmingPartitionOrdersProcessingSeconds';
    public const str ParmAutoFirmingScheduleResourcesProcessingSeconds = 'AutoFirmingScheduleResourcesProcessingSeconds';
    public const str ParmAutoFirmingFinalizeLevelProcessingSeconds = 'AutoFirmingFinalizeLevelProcessingSeconds';
    public const str ParmAutoFirmingFinishedSchedulingProcessingSeconds = 'AutoFirmingFinishedSchedulingProcessingSeconds';
    public const str ParmPlanFinalizationBatchExpiryCalculationProcessingSeconds = 'AutoPlanFinalizationBatchExpiryCalculationProcessingSeconds';

    public const str ParmProductsCount = 'ProductsCount';
    public const str ParmBomLevelsCount = 'BomLevelsCount';
    public const str ParmPlannedReceiptsCount = 'PlannedReceiptsCount';
    public const str ParmPlannedIssuesCount = 'PlannedIssuesCount';
    public const str ParmInputReceiptsCount = 'InputReceiptsCount';
    public const str ParmInputIssuesCount = 'InputIssuesCount';

    public const str ParmHasPlannedPurchaseOrders = 'HasPlannedPurchaseOrders';
    public const str ParmHasPlannedTransferOrders = 'HasPlannedTransferOrders';
    public const str ParmHasPlannedProductionOrders = 'HasPlannedProductionOrders';
    public const str ParmHasPlannedKanbans = 'HasPlannedKanbans';
    public const str ParmHasPlannedProductionOrderBomLines = 'HasPlannedProductionOrderBomLines';
    public const str ParmHasPlannedKanbanLines = 'HasPlannedKanbanLines';
    public const str ParmHasPlannedIntercompanyDemands = 'HasPlannedIntercompanyDemands';
    public const str ParmHasOnHands = 'HasOnHands';
    public const str ParmHasPurchaseLines = 'HasPurchaseLines';
    public const str ParmHasProductionOrders = 'HasProductionOrders';
    public const str ParmHasInventoryJournals = 'HasInventoryJournals';
    public const str ParmHasKanbans = 'HasKanbans';
    public const str ParmHasSalesLines = 'HasSalesLines';
    public const str ParmHasDemandForecasts = 'HasDemandForecasts';
    public const str ParmHasSupplyForecasts = 'HasSupplyForecasts';
    public const str ParmHasSalesQuotationLines = 'HasSalesQuotationLines';
    public const str ParmHasProductionOrderBomLines = 'HasProductionOrderBomLines';
    public const str ParmHasKanbanLines = 'HasKanbanLines';

    public const str ParmAutoFirmedOrdersCount = 'AutoFirmedOrdersCount';
    public const str ParmAutoFirmedOrdersCountInSingleThreadedRetry = 'AutoFirmedOrdersCountInSingleThreadedRetry';

    public const str ParmUnhandledErrorRetryCount = 'UnhandledErrorsRetryCount';
    public const str ParmUpdateConflictRetryCount = 'UpdateConflictRetryCount';
    public const str ParmDeadlockRetryCount = 'DeadlockRetryCount';
    public const str ParmCapacityConflictsCount = 'CapacityConflictsCount';
    public const str ParmPeggingOptimizationAttemptsCount = 'PeggingOptimizationAttemptsCount';
    public const str ParmPeggingOptimizationSuccessfulAttemptsCount = 'PeggingOptimizationSuccessfulAttemptsCount';
    public const str ParmPeggingOptimizationSwapsCount = 'PeggingOptimizationSwapsCount';
    public const str ParmInventSumLogTTSChangesCount = 'InventSumLogTtsChangesCount';

    private ReqInstrumentationLogger logger;
        
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(ReqInstrumentationLogger _logger)
    {
        logger = _logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLogger</Name>
				<Source><![CDATA[
    public static ReqCalcInstrumentationActivities newFromLogger(ReqInstrumentationLogger _logger)
    {
        return new ReqCalcInstrumentationActivities(_logger);
    }

]]></Source>
			</Method>
			<Method>
				<Name>netChange</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext netChange()
    {
        return this.createActivityContext(NetChange);
    }

]]></Source>
			</Method>
			<Method>
				<Name>explode</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext explode()
    {
        return this.createActivityContext(Explode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext run()
    {
        return this.createActivityContext(ReqCalcRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runMain</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext runMain()
    {
        return this.createActivityContext(ReqCalcRunMain);
    }

]]></Source>
			</Method>
			<Method>
				<Name>forecast</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext forecast()
    {
        return this.createActivityContext(ReqCalcForecast);
    }

]]></Source>
			</Method>
			<Method>
				<Name>forecastItem</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext forecastItem()
    {
        return this.createActivityContext(ReqCalcForecastItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parallelFirming</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext parallelFirming()
    {

        return this.createActivityContext(ReqCalcParallelFirming);
    }

]]></Source>
			</Method>
			<Method>
				<Name>restartResume</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext restartResume()
    {
        return this.createActivityContext(ReqCalcRestartResume);
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleOrder</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext scheduleOrder(RouteId _routeId)
    {
        SysInstrumentationActivityContext scheduleActivityContext = this.createActivityContext(ReqCalcScheduleOrder);

        scheduleActivityContext.addCustomProperty(ItemRouteId, any2Str(_routeId));

        return scheduleActivityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resumeHelperThreads</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext resumeHelperThreads(int _numberOfThreadsToCreate)
    {
        SysInstrumentationActivityContext activityContext = this.createActivityContext(ReqCalcResumeHelperThreads);

        activityContext.addCustomProperty(ParmNumberOfThreadsToCreate, any2Str(_numberOfThreadsToCreate));

        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createActivityContext</Name>
				<Source><![CDATA[
    private SysInstrumentationActivityContext createActivityContext(str _activityName)
    {
        SysInstrumentationActivity activity = logger.activity(ReqCalcPrefix + _activityName);
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>