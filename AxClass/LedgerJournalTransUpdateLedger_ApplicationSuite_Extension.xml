<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTransUpdateLedger_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(LedgerJournalTransUpdateLedger))]
public final class LedgerJournalTransUpdateLedger_ApplicationSuite_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the journal line.
    /// </summary>
    /// <param name = "_ledgerVoucher">
    /// The <c>LedgerVoucher</c> class instance.
    /// </param>
    /// <param name = "_posting">
    /// The posting type enumeration value.
    /// </param>
    /// <param name = "_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> record.
    /// </param>
    /// <param name = "_originalLedgerJournalTrans">
    /// The original <c>LedgerJournalTrans</c> record.
    /// </param>
    /// <param name = "_interCompany">
    /// A boolean value indicating that the posting process is updating transactions in a different
    /// company than the original logged in company; optional.
    /// </param>
    /// <param name = "_reversalsMayExist">
    /// A boolean value indicating that reverals may exist; optional.
    /// </param>
    /// <param name = "_isDueToDueFromAccount">
    /// A boolean value indicating a due to due from account; optional.
    /// </param>
    public void updateNow(
        LedgerVoucher _ledgerVoucher,
        LedgerPostingType _posting,
        LedgerJournalTrans _ledgerJournalTrans,
        LedgerJournalTrans _originalLedgerJournalTrans,
        boolean _interCompany,
        boolean _reversalsMayExist,
        boolean _isDueToDueFromAccount)
    { 
        if (FeatureStateProvider::isFeatureEnabled(PostingZeroInvoicesInGeneralLedgerFeature::instance()))
        {
            LedgerPostingController ledgerPostingController = LedgerPostingController::newForLedgerPostingJournal(_ledgerVoucher);
            LedgerVoucherObject postingReference;

            if (ledgerPostingController.findReference(
                    _ledgerJournalTrans.Voucher,
                    _ledgerJournalTrans.TransDate))
            {
                postingReference = ledgerPostingController.getReference();
            }
            else
            {
                postingReference = LedgerVoucherObject::newReference(
                    _ledgerJournalTrans.Voucher,
                    _ledgerJournalTrans.TransDate,
                    _ledgerVoucher.parmSysModuleDefault());

                postingReference.parmJournalCategory(_ledgerJournalTrans.TransactionType);

                ledgerPostingController.addReference(postingReference);
            }

            if (postingReference
                && !postingReference.isZeroInvoiceAlreadySet_IT())
            {
                postingReference.setIsZeroInvoice_IT(
                    _ledgerJournalTrans.isZeroInvoice_IT(
                        _ledgerVoucher.parmSysModuleDefault()));
            }
        }

        next updateNow(
            _ledgerVoucher,
            _posting,
            _ledgerJournalTrans,
            _originalLedgerJournalTrans,
            _interCompany,
            _reversalsMayExist,
            _isDueToDueFromAccount);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>