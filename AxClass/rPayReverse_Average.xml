<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayReverse_Average</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rPayReverse_Average extends RPayReverse
{
    ReportPeriod_RU     minPeriod,
                        maxPeriod;
    boolean             updateTbl;
    RPaySickListId      recalcSickListId;
    UnknownNoYes        updateTS;

    RPayAverageEarnEmplPeriodTable  rPayAverageEarnEmplPeriodTableNew;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canReverse</Name>
				<Source><![CDATA[
        protected boolean canReverse()
    {
        RPayAverageEarnValue    rPayAverageEarnValue;
        RPayTrans               rPayTrans;
        boolean                 ret;

        ret = super();

        if (this.parmCheckAmountForReverse())
        {
            select firstonly RecId from rPayAverageEarnValue
                where rPayAverageEarnValue.AverageEarnEmplPeriodRecid == common.RecId
            exists join rPayTrans
                where rPayTrans.SourceTableId == rPayAverageEarnValue.TableId &&
                      rPayTrans.SourceRecId   == rPayAverageEarnValue.RecId;

            if (!rPayAverageEarnValue.RecId)
            {
                ret = checkFailed("@RUP2958");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogBoxText</Name>
				<Source><![CDATA[
        protected str dialogBoxText()
    {
        str            ret;
        ;

        switch (rPayReverseMap.AverageEarnCodeType)
        {
            case RPayAverageEarnCodeType::BusinessTrip:
                ret = "@RUP2959";
                break;
            case RPayAverageEarnCodeType::SickList:
                ret = "@RUP2960";
                break;
            case RPayAverageEarnCodeType::Vacation:
                ret = "@RUP2961";
                break;
            default:
                throw error("@RUP2957");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPayTblSpecTimeType</Name>
				<Source><![CDATA[
        private RpayTblSpecTimeType getPayTblSpecTimeType()
    {
        RpayTblSpecTimeType ret;
        ;

        switch (rPayReverseMap.AverageEarnCodeType)
        {
            case RPayAverageEarnCodeType::BusinessTrip:
                ret = RpayTblSpecTimeType::Mission;
                break;
            case RPayAverageEarnCodeType::SickList:
                ret = RpayTblSpecTimeType::SickList;
                break;
            case RPayAverageEarnCodeType::Vacation:
                ret = RpayTblSpecTimeType::Vacation;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTimeCode</Name>
				<Source><![CDATA[
        private RPayCalendarTimeCode getTimeCode()
    {
        RPayCalendarTimeCode ret;

        switch (rPayReverseMap.AverageEarnCodeType)
        {
            case RPayAverageEarnCodeType::BusinessTrip:
                ret = RHRMBusinessTripType::find(rPayReverseMap.BusinessTripTypeId).CalendarTimeCode;
                break;
            case RPayAverageEarnCodeType::SickList:
                ret = RPaySickIllParameters::find(rPayReverseMap.RpayIllType).CalendarTimeCode;
                break;
            case RPayAverageEarnCodeType::Vacation:
                ret = RHRMVacationType::find(rPayReverseMap.VacationTypeId).CalendarTimeCode;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class.
    /// </summary>
    /// <param name="_args">
    /// The arguments.
    /// </param>
    public void initFromArgs(Args _args)
    {
        RPayAverageEarnEmplPeriodTable  rPayAverageEarnEmplPeriodTable = _args.record();

        super(_args);
        this.parmUpdateTbl(true);
        updateTS = rPayAverageEarnEmplPeriodTable.needTSUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMaxPeriod</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public ReportPeriod_RU parmMaxPeriod(ReportPeriod_RU _maxPeriod = maxPeriod)
    {
        maxPeriod = _maxPeriod;

        return maxPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMinPeriod</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public ReportPeriod_RU parmMinPeriod(ReportPeriod_RU _minPeriod = minPeriod)
    {
        minPeriod = _minPeriod;

        return minPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecalcSickListId</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public RPaySickListId parmRecalcSickListId(RPaySickListId _recalcSickListId = recalcSickListId)
    {
        recalcSickListId = _recalcSickListId;

        return recalcSickListId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateTbl</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public boolean parmUpdateTbl(boolean _updateTbl = updateTbl)
    {
        updateTbl = _updateTbl;

        return updateTbl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rPayAverageEarnEmplPeriodTable</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void rPayAverageEarnEmplPeriodTable(RPayAverageEarnEmplPeriodTable  _rPayAverageEarnEmplPeriodTableNew)
    {
        rPayAverageEarnEmplPeriodTableNew = _rPayAverageEarnEmplPeriodTableNew;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runReverse</Name>
				<Source><![CDATA[
        void runReverse()
    {
        RPayAverageEarnTrans           rPayAverageEarnTransOrig;
        RPayAverageEarnTrans           rPayAverageEarnTransNew;
        RPayAverageEarnValue           rPayAverageEarnValueOrig;
        RPayAverageEarnValue           rPayAverageEarnValueNew;
        RPayTrans                      rPayTransOrig;
        boolean                         createTransLink;

        void initFields()
        {
            rPayAverageEarnEmplPeriodTableNew.PayPeriod       = RPayParameters::payPeriod(rPayAverageEarnEmplPeriodTableNew.EmplId);
            rPayAverageEarnEmplPeriodTableNew.CorrectedPeriod = rPayReverseMap.CorrectedPeriod;
            rPayAverageEarnEmplPeriodTableNew.DayNumber       = rPayReverseMap.DayNumber * (-1);
            rPayAverageEarnEmplPeriodTableNew.SumOnHand       = rPayReverseMap.SumOnHand * (-1);
        }

        if (rPayAverageEarnEmplPeriodTableNew)
        {
            initFields();
            rPayAverageEarnEmplPeriodTableNew.update();
            createTransLink = false;
        }
        else
        {
            rPayAverageEarnEmplPeriodTableNew.data(common);
            initFields();
            rPayAverageEarnEmplPeriodTableNew.insert();
            createTransLink = true;
        }

        if (createTransLink)
        {
            this.createSourceTransLink(common, rPayAverageEarnEmplPeriodTableNew);
        }

        if (this.parmUpdateTbl())
        {
            this.updateSpecTime(rPayAverageEarnEmplPeriodTableNew);
        }

        while select rPayTransOrig
            where rPayTransOrig.SourceTableId == rPayReverseMap.TableId &&
                  rPayTransOrig.SourceRecId   == rPayReverseMap.RecId
        {
            this.createReversePayTrans(rPayTransOrig, rPayAverageEarnEmplPeriodTableNew);
        }

        while select rPayAverageEarnTransOrig
            where rPayAverageEarnTransOrig.AverageEarnEmplPeriodRecId == common.RecId
        {
            rPayAverageEarnTransNew.data(rPayAverageEarnTransOrig);
            rPayAverageEarnTransNew.AverageEarnEmplPeriodRecId = rPayAverageEarnEmplPeriodTableNew.RecId;
            rPayAverageEarnTransNew.insert();
        }

        while select rPayAverageEarnValueOrig
            where rPayAverageEarnValueOrig.AverageEarnEmplPeriodRecid == common.RecId
        {
            rPayAverageEarnValueNew.data(rPayAverageEarnValueOrig);
            rPayAverageEarnValueNew.AverageEarnEmplPeriodRecid = rPayAverageEarnEmplPeriodTableNew.RecId;
            rPayAverageEarnValueNew.PayDayHour                 = rPayAverageEarnValueOrig.PayDayHour * (-1);
            rPayAverageEarnValueNew.Amount                     = rPayAverageEarnValueOrig.Amount * (-1);
            rPayAverageEarnValueNew.insert();

            while select rPayTransOrig
                where rPayTransOrig.SourceTableId == rPayAverageEarnValueOrig.TableId &&
                      rPayTransOrig.SourceRecId   == rPayAverageEarnValueOrig.RecId
            {
                this.createReversePayTrans(rPayTransOrig, rPayAverageEarnValueNew);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSpecTime</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void updateSpecTime(RPayAverageEarnEmplPeriodTable _rPayAverageEarnEmplPeriodTable)
    {
        RPayTblUpdater::updateTimesheetFromDocument(_rPayAverageEarnEmplPeriodTable.StartDate,
                                                   _rPayAverageEarnEmplPeriodTable.EndDate,
                                                   _rPayAverageEarnEmplPeriodTable.EmplId,
                                                   [_rPayAverageEarnEmplPeriodTable.TableId,
                                                    _rPayAverageEarnEmplPeriodTable.RecId]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static RPayReverse_Average construct(Args _args)
    {
        RPayReverse                     rPayReverse;
        RPayAverageEarnEmplPeriodTable  rPayAverageEarnEmplPeriodTable = _args.record();

        switch (rPayAverageEarnEmplPeriodTable.AverageEarnCodeType)
        {
            case RPayAverageEarnCodeType::SickList:
                rPayReverse = new RPayReverse_SickList();
                break;

            default:
                rPayReverse = new RPayReverse_Average();
                break;
        }

        rPayReverse.initFromArgs(_args);

        return rPayReverse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>