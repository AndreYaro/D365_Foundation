<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>ProjInvoiceController</Name>
  <SourceCode>
    <Declaration><![CDATA[
/// <summary>
/// The <c>ProjInvoiceController</c> class is the controller class for the <c>ProjInvoice</c> SRS
/// Report.
/// </summary>
[SysObsoleteAttribute('Use PSAProjAndContractInvoiceController instead.', false, 14\01\2017)]
class ProjInvoiceController extends GiroPrintMgmtFormLetterController implements BatchRetryable
{
    RecordSortedList        journalList;
    ProjFormLetter          projFormLetter;
    PrintCopyOriginal       printCopyOriginal;
    ProjInvoiceJour         projInvoiceJour;
    VendInvoiceJour         vendinvoicejour;
    ProjInvoiceContract     projInvoiceContract;
    boolean                 projCreditInvoicing;
    const str ERmodelName = 'Project Invoice';

    #define.Blank('')

    // <GEEPL>
    #ISOCountryRegionCodes
    // </GEEPL>

    #NFPrinting_BR
    FiscalDocumentContract_BR       fiscalDocumentContract;
    FiscalDocument_BR               fiscalDocument;

}
]]></Declaration>
    <Methods>
      <Method>
        <Name>createJournalListFromQuery</Name>
        <Source><![CDATA[
    protected void createJournalListFromQuery()
    {
        Query               queryReport;
        QueryRun            queryRun;
        ProjInvoiceJour     projInvoiceJourTemp;

        journalList = new RecordSortedList(tableNum(ProjInvoiceJour));
        journalList.sortOrder(fieldNum(ProjInvoiceJour,ProjInvoiceId));

        queryReport = this.getFirstQuery();

        if (queryReport)
        {
            this.setAdditionalRanges(queryReport);
            queryRun = new QueryRun(queryReport);
        }

        while (queryRun.next())
        {
            projInvoiceJourTemp = queryRun.get(tableNum(ProjInvoiceJour));
            journalList.ins(projInvoiceJourTemp);
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>filterReprintedOriginals_IS</Name>
        <Source><![CDATA[
    protected void filterReprintedOriginals_IS()
    {
        ProjInvoiceJour     tmpProjInvoiceJour;
        RecordSortedList    tmpJournalList;
        #ISOCountryRegionCodes

        if (printCopyOriginal == PrintCopyOriginal::Copy || !SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIS]))
        {
            return;
        }

        tmpJournalList = new RecordSortedList(tableNum(ProjInvoiceJour));
        tmpJournalList.sortOrder(fieldNum(ProjInvoiceJour, RecId));

        journalList.first(tmpProjInvoiceJour);

        while (tmpProjInvoiceJour)
        {
            if (! tmpProjInvoiceJour.PrintedOriginals ||
                (Box::yesNo(strFmt("@SYS125573",
                                   tmpProjInvoiceJour.ProjInvoiceId,
                                   tmpProjInvoiceJour.InvoiceDate), DialogButton::No) == DialogButton::Yes))
            {
                tmpJournalList.ins(tmpProjInvoiceJour);
            }

            if (! journalList.next(tmpProjInvoiceJour))
            {
                break;
            }
        }

        if (! tmpJournalList.len())
        {
            throw info("@SYS70894");
        }

        journalList = tmpJournalList;
    }

]]></Source>
      </Method>
      <Method>
        <Name>getGiroType</Name>
        <Source><![CDATA[
    public PaymentStub getGiroType()
    {
        return projInvoiceJour.GiroType;
    }

]]></Source>
      </Method>
      <Method>
        <Name>initFormLetterReport</Name>
        <Source><![CDATA[
    /// <summary>
    /// Initializes the report and sets the print management.
    /// </summary>
    protected void initFormLetterReport()
    {
        printCopyOriginal = this.parmArgs().parmEnum();

        if (args && args.caller() )
        {
            if (classIdGet(args.caller()) == classNum(ProjFormLetter_Invoice))
            {
                projFormLetter       = args.caller();
            }
        }

        if (args.record())
        {
            journalList = FormLetter::createJournalListCopy(args.record());
        }
        else
        {
            journalList = args.object();
        }

        this.filterReprintedOriginals_IS();

        formLetterReport = FormLetterReport::construct(PrintMgmtDocumentType::ProjectInvoice);
        formLetterReport.parmPrintType(printCopyOriginal);

        if (projFormLetter)
        {
            formLetterReport.parmDefaultCopyPrintJobSettings(new SRSPrintDestinationSettings(projFormLetter.printerSettingsFormletter(PrintSetupOriginalCopy::Copy)));
            formLetterReport.parmDefaultOriginalPrintJobSettings(new SRSPrintDestinationSettings(projFormLetter.printerSettingsFormletter(PrintSetupOriginalCopy::Original)));
            formLetterReport.parmUsePrintMgmtDestinations(projFormLetter.usePrintManagement());
            formLetterReport.parmUseUserDefinedDestinations(projFormLetter.parmUseUserDefinedDestinations());
        }
        else if (printCopyOriginal == PrintCopyOriginal::OriginalPrint)
        {
            // Always use the print mgmt destinations when reprinting for the OriginalPrint case.
            formLetterReport.parmUsePrintMgmtDestinations(true);
        }
        else if (args && args.menuItemName() == menuitemOutputStr(ProjPrintInvoice))
        {
            formLetterReport.parmDefaultCopyPrintJobSettings(this.getReportContract().parmPrintSettings());
            formLetterReport.parmDefaultOriginalPrintJobSettings(this.getReportContract().parmPrintSettings());
            formLetterReport.parmUsePrintMgmtDestinations(false);
            formLetterReport.parmUseUserDefinedDestinations(true);
        }

        // Init projcredit invoice flag. Used to get invoicetext footer.
        projCreditInvoicing = CustParameters::find().CreditInvoicingReport;

        projInvoiceContract = this.parmReportContract().parmRdpContract() as ProjInvoiceContract;

        super();
    }

]]></Source>
      </Method>
      <Method>
        <Name>invoiceTxt</Name>
        <Source><![CDATA[
    /// <summary>
    /// Gets the <c>invoiceTxt</c> value.
    /// </summary>
    /// <returns>
    /// The string value for the <c>invoiceTxt</c> value.
    /// </returns>
    protected str  invoiceTxt()
    {
        str  invoiceTxt;

        // <GEELT>
        #ISOCountryRegionCodes
        LogisticsAddressCountryRegionISOCode isoCountryCode = SysCountryRegionCode::countryInfo();
        // </GEELT>

        CompanyInfo companyInfo = CompanyInfo::find();
        boolean     printCorrInvoiceLabel_DE = isoCountryCode == #isoDE &&
                                               companyInfo.PrintCorrInvoiceLabel_DE &&
                                               projInvoiceJour.InvoiceDate >= companyInfo.PrintCorrInvoiceLabelEffDate_DE;

        if (projInvoiceJour.ProjInvoiceType == ProjInvoiceType::Invoice)
        {
            if (projInvoiceJour.InvoiceAmount >= 0)
            {
                if (formLetterReport.getCurrentPrintSetting().parmType() == PrintMgmtDocInstanceType::Copy)
                {
                    invoiceTxt = SysLabel::labelId2String(literalStr("@SYS24428"), this.retLanguageId());
                }
                else
                {
                    invoiceTxt = SysLabel::labelId2String(literalStr("@SYS12128"),this.retLanguageId());
                }

                if (projFormLetter && projFormLetter.proforma())
                {
                    invoiceTxt = SysLabel::labelId2String(literalStr("@SYS4701"),this.retLanguageId());
                }
            }
            else
            {
                if (formLetterReport.getCurrentPrintSetting().parmType() == PrintMgmtDocInstanceType::Copy)
                {
                    if (projCreditInvoicing)
                    {
                        invoiceTxt = printCorrInvoiceLabel_DE ? SysLabel::labelId2String(literalStr("@SYS4004216"),this.retLanguageId()) :
                                                                SysLabel::labelId2String(literalStr("@SYS99733"),this.retLanguageId());
                    }
                    else
                    {
                        invoiceTxt = printCorrInvoiceLabel_DE ? SysLabel::labelId2String(literalStr("@SYS4004216"),this.retLanguageId()) :
                                                                SysLabel::labelId2String(literalStr("@SYS24607"),this.retLanguageId());
                    }
                }
                else
                {
                    if (projCreditInvoicing)
                    {
                        invoiceTxt = printCorrInvoiceLabel_DE ? SysLabel::labelId2String(literalStr("@SYS4004218"),this.retLanguageId()) :
                                                                SysLabel::labelId2String(literalStr("@SYS99734"),this.retLanguageId());
                    }
                    else
                    {
                        invoiceTxt = printCorrInvoiceLabel_DE ? SysLabel::labelId2String(literalStr("@SYS4004218"),this.retLanguageId()) :
                                                                SysLabel::labelId2String(literalStr("@SYS8125"),this.retLanguageId());
                    }
                }
                if (projFormLetter && projFormLetter.proforma())
                {
                    if (projCreditInvoicing)
                    {
                        invoiceTxt = printCorrInvoiceLabel_DE ? SysLabel::labelId2String(literalStr("@SYS4004217"),this.retLanguageId()) :
                                                                SysLabel::labelId2String(literalStr("@SYS99735"),this.retLanguageId());
                    }
                    else
                    {
                        invoiceTxt = printCorrInvoiceLabel_DE ? SysLabel::labelId2String(literalStr("@SYS4004217"),this.retLanguageId()) :
                                                                SysLabel::labelId2String(literalStr("@SYS24608"),this.retLanguageId());
                    }
                }
            }
        }
        else
        {
            if (projInvoiceJour.InvoiceAmount > 0)
            {
                if (formLetterReport.getCurrentPrintSetting().parmType() == PrintMgmtDocInstanceType::Copy)
                {
                    // <GEELT>
                    if (isoCountryCode == #isoLT)
                    {
                        // For Lithuania, don't use the term 'on-account'.
                        invoiceTxt = SysLabel::labelId2String(literalStr("@SYS24428"), this.retLanguageId());
                    }
                    else
                    {
                    // </GEELT>
                    invoiceTxt =SysLabel::labelId2String(literalStr("@SYS58535"),this.retLanguageId());
                    // <GEELT>
                    }
                    // </GEELT>
                }
                else
                {
                    // <GEELT>
                    if (isoCountryCode == #isoLT)
                    {
                        // For Lithuania, don't use the term 'on-account'.
                        invoiceTxt = SysLabel::labelId2String(literalStr("@SYS12128"), this.retLanguageId());
                    }
                    else
                    {
                    // </GEELT>
                    invoiceTxt =SysLabel::labelId2String(literalStr("@SYS20186"),this.retLanguageId());
                    // <GEELT>
                    }
                    // </GEELT>
                }

                if (projFormLetter && projFormLetter.proforma())
                {
                    // <GEELT>
                    if (isoCountryCode == #isoLT)
                    {
                        // For Lithuania, don't use the term 'on-account'.
                        invoiceTxt = SysLabel::labelId2String(literalStr("@SYS4701"), this.retLanguageId());
                    }
                    else
                    {
                    // </GEELT>
                    invoiceTxt =SysLabel::labelId2String(literalStr("@SYS15223"),this.retLanguageId());
                    // <GEELT>
                    }
                    // </GEELT>
                }
            }
            else
            {
                if (formLetterReport.getCurrentPrintSetting().parmType() == PrintMgmtDocInstanceType::Copy)
                {
                    if (projCreditInvoicing)
                    {
                        invoiceTxt = printCorrInvoiceLabel_DE ? SysLabel::labelId2String(literalStr("@SYS4004216"),this.retLanguageId()) :
                                                                SysLabel::labelId2String(literalStr("@SYS99733"),this.retLanguageId());
                    }
                    else
                    {
                        invoiceTxt = printCorrInvoiceLabel_DE ? SysLabel::labelId2String(literalStr("@SYS4004216"),this.retLanguageId()) :
                                                                SysLabel::labelId2String(literalStr("@SYS24607"),this.retLanguageId());
                    }
                }
                else
                {
                    if (projCreditInvoicing)
                    {
                        invoiceTxt = printCorrInvoiceLabel_DE ? SysLabel::labelId2String(literalStr("@SYS4004218"),this.retLanguageId()) :
                                                                SysLabel::labelId2String(literalStr("@SYS99734"),this.retLanguageId());
                    }
                    else
                    {
                        invoiceTxt = printCorrInvoiceLabel_DE ? SysLabel::labelId2String(literalStr("@SYS4004218"),this.retLanguageId()) :
                                                                SysLabel::labelId2String(literalStr("@SYS8125"),this.retLanguageId());
                    }
                }

                if (projFormLetter && projFormLetter.proforma())
                {
                    if (projCreditInvoicing)
                    {
                        invoiceTxt = printCorrInvoiceLabel_DE ? SysLabel::labelId2String(literalStr("@SYS4004217"),this.retLanguageId()) :
                                                                SysLabel::labelId2String(literalStr("@SYS99735"),this.retLanguageId());
                    }
                    else
                    {
                        invoiceTxt = printCorrInvoiceLabel_DE ? SysLabel::labelId2String(literalStr("@SYS4004217"),this.retLanguageId()) :
                                                                SysLabel::labelId2String(literalStr("@SYS24608"),this.retLanguageId());
                    }
                }
            }
        }

        // <GEELT>
        if (isoCountryCode == #isoLT)
        {
            if (strLRTrim(companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, projInvoiceJour.InvoiceDate)))
            {
                // Add "VAT" to the beginning of the invoice text.
                invoiceTxt = "@GLS107406" + ' ' + invoiceTxt;
            }
        }
        // </GEELT>

        // <GEECZ>
        if (isoCountryCode  == #isoCZ)
        {
            invoiceTxt  = this.invoiceTxt_CZ();
        }
        // </GEECZ>

        ProjFundingSource fundingSource = ProjFundingSource::find(ProjProposalJour::find(projInvoiceJour.ProposalId).FundingSource);
        this.parmReportContract().parmRdlContract().parmLabelLanguageId(fundingSource.LanguageId);
        this.parmReportContract().parmRdlContract().parmLanguageId(fundingSource.LanguageId);
        return invoiceTxt;
    }

]]></Source>
      </Method>
      <Method>
        <Name>invoiceTxt_CZ</Name>
        <Source><![CDATA[
    /// <summary>
    ///     Gets the report header title for the Czech Republic.
    /// </summary>
    /// <returns>
    ///     The report header title
    /// </returns>
    protected str  invoiceTxt_CZ()
    {
        str         invoiceTxt;
        boolean     isCreditNot = projInvoiceJour.isCreditNote_CZ();

        void setInvoiceTxt(str  _label)
        {
            invoiceTxt = SysLabel::labelId2String(_label, this.retLanguageId());
        }

        if (projInvoiceJour.ProjInvoiceType == ProjInvoiceType::Invoice)
        {
            if (!isCreditNot)
            {
                if (formLetterReport.getCurrentPrintSetting().parmType() == PrintMgmtDocInstanceType::Copy)
                {
                    setInvoiceTxt(literalStr("@SYS24428"));
                }
                else
                {
                    setInvoiceTxt(literalStr("@SYS12128"));
                }

                if (projFormLetter && projFormLetter.proforma())
                {
                    setInvoiceTxt(literalStr("@SYS4701"));
                }
            }
            else
            {
                if (formLetterReport.getCurrentPrintSetting().parmType() == PrintMgmtDocInstanceType::Copy)
                {
                    setInvoiceTxt(literalStr("@SYS4002422"));
                }
                else
                {
                    setInvoiceTxt(literalStr("@SYS4002423"));
                }

                if (projFormLetter && projFormLetter.proforma())
                {
                    setInvoiceTxt(literalStr("@SYS4002424"));
                }
            }
        }
        else
        {
            if (!isCreditNot)
            {
                if (formLetterReport.getCurrentPrintSetting().parmType() == PrintMgmtDocInstanceType::Copy)
                {
                    setInvoiceTxt(literalStr("@SYS58535"));
                }
                else
                {
                    setInvoiceTxt(literalStr("@SYS20186"));
                }

                if (projFormLetter && projFormLetter.proforma())
                {
                    setInvoiceTxt(literalStr("@SYS15223"));
                }
            }
            else
            {
                if (formLetterReport.getCurrentPrintSetting().parmType() == PrintMgmtDocInstanceType::Copy)
                {
                    setInvoiceTxt(literalStr("@SYS4002422"));
                }
                else
                {
                    setInvoiceTxt(literalStr("@SYS4002423"));
                }

                if (projFormLetter && projFormLetter.proforma())
                {
                    setInvoiceTxt(literalStr("@SYS4002424"));
                }
            }
        }

        ProjFundingSource fundingSource = ProjFundingSource::find(ProjProposalJour::find(projInvoiceJour.ProposalId).FundingSource);

        this.parmReportContract().parmRdlContract().parmLabelLanguageId(fundingSource.LanguageId);
        this.parmReportContract().parmRdlContract().parmLanguageId(fundingSource.LanguageId);

        return invoiceTxt;
    }

]]></Source>
      </Method>
      <Method>
        <Name>outputReport</Name>
        <Source><![CDATA[
    /// <summary>
    /// Executes the report for the print management setting that is currently loaded.
    /// </summary>
    /// <remarks>
    /// The <c>outReports</c> method loops over print management settings and calls this method for each
    /// print management setting loaded.Override this method to modify parameters for each print
    /// settings.If you want to provide different footer text for each print settings loaded for a given
    /// report.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// A print management object has not been initialized.
    /// </exception>
    #ISOCountryRegionCodes
    protected void outputReport()
    {
        SRSPrintDestinationSettings srsPrintDestinationSettings;
        SRSPrintMediumType          srsPrintMediumType;

        // <GEEHU>
        int copyNumber;
        ProjInvoiceJourPrint projInvoiceJourPrint;
        // </GEEHU>

        // For EVERY print mgmt setting
        // 1. Set the invoice text.
        projInvoiceContract.parmInvoiceTxt(this.invoiceTxt());

        // <GEEHU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
        {
            srsPrintDestinationSettings = formLetterReport.getCurrentPrintSetting().parmPrintJobSettings();
            srsPrintMediumType          = srsPrintDestinationSettings.printMediumType();

            if (srsPrintDestinationSettings.printMediumType() == SRSPrintMediumType::Printer)
            {
                projInvoiceJourPrint = ProjInvoiceJourPrint::findFromProjInvoiceJour(projInvoiceJour.ProjInvoiceId, projInvoiceJour.InvoiceDate);
                copyNumber = ProjInvoiceJourPrint::createInvoiceCopySequence(projInvoiceJour.ProjInvoiceId, projInvoiceJour.InvoiceDate, printCopyOriginal);

                if (!projInvoiceJour.isProforma() || (projFormLetter && !projFormLetter.proforma()))
                {
                    if (printCopyOriginal == PrintCopyOriginal::Copy)
                    {
                        projInvoiceContract.parmInvoiceInstanceText(strFmt("%1 %2", int2str(copyNumber), "@GLS107722"));
                    }
                    else
                    {
                        if (projInvoiceJourPrint.HasOriginalBeenPrinted)
                        {
                            // Don't allow the original document to be printed more than once.
                            error(strFmt("@GLS223085", projInvoiceJour.ProjInvoiceId, projInvoiceJour.InvoiceDate));
                            return;
                        }

                        projInvoiceContract.parmInvoiceInstanceText(strFmt("%1 %2", int2str(copyNumber), "@GLS107723"));
                    }
                }
            }
            else
            {
                projInvoiceContract.parmInvoiceInstanceText(strFmt("%1%2%3", "@GLS107724", "\n", "@GLS107725"));
            }
        }
        // </GEEHU>

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIS]))
        {
            GiroPrintMgmtFormLetterControllerHelper_IS::updateInvoiceJourPrintedOriginal(this.projInvoiceJour, this.printCopyOriginal, formLetterReport.getCurrentPrintSetting());
        }

        super();
    }

]]></Source>
      </Method>
      <Method>
        <Name>prePromptModifyContract</Name>
        <Source><![CDATA[
    public void prePromptModifyContract()
    {
        // to hide parameter, you need to get the contractInfo. This contains metadata about the contract.
        SrsReportRdpDataContractInfo rdpContractInfo;
        SrsReportDesignProperties designProperties;
        Map memberInfoMap;

        if (this.parmArgs().menuItemName() != menuitemOutputStr(ProjPrintInvoice))
        {
            rdpContractInfo = this.getDataContractInfoObjects().lookup(classStr(ProjInvoiceContract));
            memberInfoMap = rdpContractInfo.getMembers();

            designProperties = memberInfoMap.lookup(methodStr(ProjInvoiceContract, parmFromDate));
            designProperties.parmHidden(true);

            designProperties = memberInfoMap.lookup(methodStr(ProjInvoiceContract, parmToDate));
            designProperties.parmHidden(true);

            designProperties = memberInfoMap.lookup(methodStr(ProjInvoiceContract, parmIncludeInvoice));
            designProperties.parmHidden(true);

            designProperties = memberInfoMap.lookup(methodStr(ProjInvoiceContract, parmIncludeOnAcc));
            designProperties.parmHidden(true);
        }

        this.setMenuItemParameter();

        super();
    }

]]></Source>
      </Method>
      <Method>
        <Name>preRunModifyContract</Name>
        <Source><![CDATA[
    /// <summary>
    /// Changes the report contract before a repor is runt.
    /// </summary>
    public void preRunModifyContract()
    {
        SRSTmpDataStore srsTmpDataStore;
        // <GBR>
        FiscalEstablishment_BR fiscalEstablishment;

        if (BrazilParameters::isEnabled() && projInvoiceJour.ProjInvoiceType != ProjInvoiceType::DebitNote_BR)
        {
            fiscalDocumentContract = this.parmReportContract().parmRdpContract();

            select firstonly fiscalDocument
                where fiscalDocument.RefRecId == projInvoiceJour.RecId
                   && fiscalDocument.RefTableId == projInvoiceJour.TableId
                join EFDocPrePrintedSecurityForm, EFDocEnvironment from fiscalEstablishment
                where fiscalEstablishment.FiscalEstablishmentId == fiscalDocument.FiscalEstablishment;

            fiscalDocumentContract.parmRecordId(fiscalDocument.RecId);
            fiscalDocumentContract.parmPrePrintedSecurityForm(fiscalEstablishment.EFDocPrePrintedSecurityForm);
            fiscalDocumentContract.parmMaxDescSizeAdditionaInfFirstPage(#MaxDescSizeAdditionaInfFirstPage);
            fiscalDocumentContract.parmProForma(projInvoiceJour.isProforma());

            if (fiscalDocument.isElectronic())
            {
                fiscalDocumentContract.parmMaxDescSizeAdditionalInformation(#MaxDescSizeAdditionalInformation);
            }
            else
            {
                fiscalDocumentContract.parmMaxDescSizeAdditionalInformation(#MaxNFMemoLines * #MaxNFMemoDescriptionSize);
            }

            if (fiscalEstablishment.EFDocEnvironment == EFDocEnvironment_BR::Testing)
            {
                fiscalDocumentContract.parmEFDocEnvironment(true);
            }
            else
            {
                fiscalDocumentContract.parmEFDocEnvironment(false);
            }

            if (projFormLetter && projFormLetter.proforma())
            {
                fiscalDocumentContract.parmProforma(true);

                // pack container and put into srstmptable.
                // Pack the class and insert into the temporary store.
                srsTmpDataStore.Value = projFormLetter.parmFormletterProformaPrintPacked();
                srsTmpDataStore.insert();

                // Set the rec id to contract parameter
                fiscalDocumentContract.parmFormLetterRecordId(srsTmpDataStore.RecId);
            }
        }
        else
        {
        // </GBR>

        // set the current projinvoice jour recid
        projInvoiceContract.parmProjJourRecId(projInvoiceJour.RecId);

        projInvoiceContract.parmCountryRegionISOCode(SysCountryRegionCode::countryInfo());

        // set proforma and packed form letter. We dont need to do this in preRunModifyContract(), since this needs to be set only once.
        if (projFormLetter && projFormLetter.proforma())
        {
            projInvoiceContract.parmProforma(true);

            // pack container and put into srstmptable.
            // Pack the class and insert into the temporary store.
            srsTmpDataStore.Value = projFormLetter.parmFormletterProformaPrintPacked();
            srsTmpDataStore.insert();

            // Set the rec id to contract parameter
            projInvoiceContract.parmFormLetterRecordId(srsTmpDataStore.RecId);
        }
        // <GBR>
        }
        // </GBR>

        // <GEEPL>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
           projInvoiceContract.parmUserName(SysReportRun::userName());
        }
        // </GEEPL>

        super();
    }

]]></Source>
      </Method>
      <Method>
        <Name>preRunValidate</Name>
        <Source><![CDATA[
    protected container preRunValidate()
    {
        #define.ErrorLimit(2500)

        Query       queryReport;
        int         recordCount;
        container   validateResult = super();

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            return validateResult;
        }
        // <GBR>

        queryReport = this.getFirstQuery();
        if (queryReport)
        {
            this.setAdditionalRanges(queryReport);
        }

        recordCount = QueryRun::getQueryRowCount(queryReport, #ErrorLimit + 1);

        if (recordCount > #ErrorLimit)
        {
            validateResult = [SrsReportPreRunState::Error];
        }

        return validateResult;
    }

]]></Source>
      </Method>
      <Method>
        <Name>resetReportDataContract</Name>
        <Source><![CDATA[
    private void resetReportDataContract()
    {
        contractsInitialized = false;
        this.parmReportRun(null);
        this.parmReportContract(null);
    }

]]></Source>
      </Method>
      <Method>
        <Name>retLanguageId</Name>
        <Source><![CDATA[
    private LanguageId retLanguageId()
    {
        return projInvoiceJour.LanguageId;
    }

]]></Source>
      </Method>
      <Method>
        <Name>runPrintMgmt</Name>
        <Source><![CDATA[
    /// <summary>
    /// Runs the print report.
    /// </summary>
    protected void runPrintMgmt()
    {
        SRSPrintDestinationSettings     printSettings;
        PrintMgmtPrintSettingDetail     printSettingDetail;

        if (this.parmArgs().menuItemName() == menuitemOutputStr(ProjPrintInvoice))
        {
            this.createJournalListFromQuery();
        }

        if (!journalList)
        {
            throw error("@SYS26348");
        }

        journalList.first(projInvoiceJour);

        if (!projInvoiceJour)
        {
            throw error("@SYS26348");
        }

        if (this.parmArgs().menuItemName() && this.parmArgs().menuItemName() == menuitemOutputStr(ProjPrintInvoice))
        {
            printSettings = new SRSPrintDestinationSettings(formLetterReport.parmReportRun().parmReportRunController().parmReportContract().parmPrintSettings().pack());
        }

        do
        {
            formLetterReport.loadPrintSettings(projInvoiceJour, ProjInvoiceTable::find(projInvoiceJour.ProjInvoiceProjId), projInvoiceJour.LanguageId);

            if ((BrazilParameters::isEnabled() || printSettings) && formLetterReport.moveNextPrintSetting())
            {
                printSettingDetail = formLetterReport.getCurrentPrintSetting();

                if (BrazilParameters::isEnabled() && projInvoiceJour.ProjInvoiceType != ProjInvoiceType::DebitNote_BR)
                {
                    if (printSettingDetail.parmReportFormatName() == PrintMgmtDocType::construct(PrintMgmtDocumentType::ProjectInvoice).getDefaultReportFormat())
                    {
                        fiscalDocument = FiscalDocument_BR::findByRef(projInvoiceJour.TableId, projInvoiceJour.RecId);

                        if (fiscalDocument.isElectronic())
                        {
                            this.parmReportName(ssrsReportStr(EFDocDANFE_BR, Report));
                        }
                        else
                        {
                            if (EFDocumentCity_BR::findByFiscalDocumentRef(fiscalDocument.RecId))
                            {
                                this.parmReportName(ssrsReportStr(RPS_BR, Report));
                            }
                            else
                            {
                                this.parmReportName(ssrsReportStr(FiscalDocument_BR, Report));
                            }
                        }

                        this.resetReportDataContract();

                        printSettingDetail.parmReportFormatName(this.parmReportName());
                    }
                }

                //----if there are user defined print settings, load it
                if (printSettings)
                {
                    printSettingDetail.parmPrintJobSettings(printSettings);
                }

                formLetterReport.parmReportRun().loadSettingDetail(printSettingDetail);
            }

            this.parmReportContract().parmRdlContract().parmLabelLanguageId(projInvoiceJour.LanguageId);
            this.parmReportContract().parmRdlContract().parmLanguageId(projInvoiceJour.LanguageId);

            this.outputReports();

            DocumentAttachment documentAttachment = DocumentAttachment::construct(PrintMgmtDocumentType::ProjectInvoice);
            documentAttachment.parmJournal(projInvoiceJour);
            documentAttachment.parmInnerReportDataContract(this.parmReportContract());
            documentAttachment.parmPrintCopyOriginal(formLetterReport.parmPrintType());
            documentAttachment.run();
        } while (journalList.next(projInvoiceJour) && !this.parmCancelRun());
    }

]]></Source>
      </Method>
      <Method>
        <Name>setAdditionalRanges</Name>
        <Source><![CDATA[
    protected void setAdditionalRanges(Query _query)
    {
        QueryBuildDataSource    qbds;
        QueryBuildRange         qbrType;
        QueryBuildRange         qbrDate;

        qbds = _query.dataSourceTable(tableNum(ProjInvoiceJour));
        qbrType = SysQuery::findOrCreateRange(qbds, fieldNum(ProjInvoiceJour,ProjInvoiceType));

        if (projInvoiceContract.parmIncludeInvoice() && !projInvoiceContract.parmIncludeOnAcc())
        {
            qbrType.value(queryValue(ProjInvoiceType::Invoice));
        }
        else if (!projInvoiceContract.parmIncludeInvoice() && projInvoiceContract.parmIncludeOnAcc())
        {
            qbrType.value(queryValue(ProjInvoiceType::OnAccount));
        }

        qbrDate = SysQuery::findOrCreateRange(qbds, fieldNum(ProjInvoiceJour,InvoiceDate));
        qbrDate.value(queryRange((projInvoiceContract.parmFromDate() ? projInvoiceContract.parmFromDate() : dateNull()),(projInvoiceContract.parmToDate() ? projInvoiceContract.parmToDate() : dateMax())));
    }

]]></Source>
      </Method>
      <Method>
        <Name>setMenuItemParameter</Name>
        <Source><![CDATA[
    protected void setMenuItemParameter()
    {
        if (this.parmArgs())
        {
            if (this.parmArgs().menuItemName())
            {
                if (this.parmArgs().menuItemName() == menuitemOutputStr(ProjPrintInvoice))
                {
                    projInvoiceContract.parmMenuItemName(this.parmArgs().menuItemName());
                }
                else
                {
                    projInvoiceContract.parmMenuItemName(#Blank);
                }
            }
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>main</Name>
        <Source><![CDATA[
    public static void main(Args _args)
    {
        ProjInvoiceController controller = new ProjInvoiceController();

        //<GMX>
        if (EInvoiceParameters_MX::isElectronicInvoiceEnabled()
        && EInvoiceProjController_MX::hasEInvoice(_args))
        {
            EInvoiceProjController_MX::main(_args);
            return;
        }
        //</GMX>

        controller.parmReportName(PrintMgmtDocType::construct(PrintMgmtDocumentType::ProjectInvoice).getDefaultReportFormat());
        controller.parmArgs(_args);
        if (_args.menuItemName() != menuitemOutputStr(ProjPrintInvoice))
        {
            controller.parmShowDialog(false);
        }

        controller.startOperation();
    }

]]></Source>
      </Method>
      <Method>
        <Name>isRetryable</Name>
        <Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source>
      </Method>
    </Methods>
  </SourceCode>
</AxClass>