<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayTimeCopyDay</Name>
	<SourceCode>
		<Declaration><![CDATA[
final public class rPayTimeCopyDay extends RunBase
{
    RPayTimeTable   payTimeTable;
    RPayTimeId      payTimeId;
    WeekDay         fromWeekDay;
    WeekDay         toWeekDay;

    DialogField     fieldFromDay;
    DialogField     fieldToDay;

    boolean         copyPropertyId;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        copyPropertyId
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copy</Name>
				<Source><![CDATA[
    private void copy()
    {
        RPayTimeLine    payTimeLine;

        setPrefix(RPayTimeCopyDay::description());
        setPrefix(fieldLabelValue(tableNum(RPayTimeLine), fieldNum(RPayTimeLine,PayTimeId), payTimeId));
        setPrefix(fieldLabelValue(tableNum(RPayTimeLine), fieldNum(RPayTimeLine,Weekday), fromWeekDay));

        ttsbegin;

        while select forupdate payTimeLine
            where payTimeLine.PayTimeId   == payTimeId &&
                  payTimeLine.Weekday     == fromWeekDay
        {
            setPrefix(strFmt("@RUP278", time2str(payTimeLine.FromTime, -1, -1), time2str(payTimeLine.ToTime, -1, -1)));
            payTimeLine.Weekday = toWeekDay;
            if (! payTimeLine.validateWrite())
            {
                throw error("@RUP283");
            }

            payTimeLine.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog(Object calledFrom = null)
    {
        Args            arg;
        Object          fr;
        DialogRunbase   dialog;
        ;

        if (payTimeTable.PeriodType == RPayPeriodType::Standard)
        {
            arg    = new Args(formStr(RPayTimeCopyDayDialog));
            fr     = classfactory.formRunClass(arg);

            arg.caller(this);
            fr.init();

            return fr;
        }

        dialog = super();
        fieldFromDay = dialog.addField(extendedTypeStr(Days), "@SYS54272", "@RUP1000");
        fieldToDay   = dialog.addField(extendedTypeStr(Days), "@SYS54273", "@RUP1000");

        fieldFromDay.allowEdit(false);
        fieldFromDay.value(fromWeekDay);
        fieldToDay.value(toWeekDay);
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        toWeekDay    = fieldToDay.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromWeekDay</Name>
				<Source><![CDATA[
    private void initFromWeekDay(WeekDay _day)
    {
        fromWeekDay = _day;
        toWeekDay   = payTimeTable.Periodicity != _day ? _day + 1 : 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopyPropertyId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmCopyPropertyId(boolean _copy = copyPropertyId)
    {
        copyPropertyId = _copy;

        return copyPropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromWeekDay</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public WeekDay parmFromWeekDay(WeekDay _day = fromWeekDay)
    {
        fromWeekDay = _day;

        return fromWeekDay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPayTimeId</Name>
				<Source><![CDATA[
    private RPayTimeId parmPayTimeId(RPayTimeId _id = payTimeId)
    {
        ;
        payTimeId    = _id;
        payTimeTable = RPayTimeTable::find(payTimeId);

        return payTimeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToWeekDay</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public WeekDay parmToWeekDay(WeekDay _day = toWeekDay)
    {
        toWeekDay = _day;

        return toWeekDay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (! this.validate())
        {
            throw error("@RUP283");
        }

        try
        {
            ttsbegin;

            this.copy();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version     = conPeek(_packedClass, 1);
        ;
        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        if (fromWeekDay == toWeekDay)
        {
            return checkFailed("@RUP284");
        }

        if (payTimeTable.PeriodType  == RPayPeriodType::Period &&
            payTimeTable.Periodicity <  toWeekDay)
        {
            return checkFailed("@RUP999");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@RUP287";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RPayTimeCopyDay     copyDay;
        Object              fr;
        copyDay = RPayTimeCopyDay::newPayTimeForm(_args);

        if (copyDay.prompt())
        {
            copyDay.runOperation();
        }

        fr = _args.caller();
        // there is the assumption that the form overrides doResearch
        // and it includes a new parameter of type Object
        fr.doResearch(copyDay);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPayTimeForm</Name>
				<Source><![CDATA[
    private static RPayTimeCopyDay newPayTimeForm(Args _args)
    {
        RPayTimeCopyDay     copyDay         = new RPayTimeCopyDay();
        Object              obj             = _args.caller();
        ;

        copyDay.parmPayTimeId(obj.curPayTimeId());
        copyDay.initFromWeekDay(obj.curWeekDay());

        return copyDay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>weekDayToDayUser</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static WeekDayUser weekDayToDayUser(WeekDay _day)
    {
        return _day;
    }

]]></Source>
			</Method>
			<Method>
				<Name>weekDayUserToDay</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static WeekDay weekDayUserToDay(WeekDayUser _day)
    {
        return _day;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>