<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepCalculation_Additional_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// It is used to do depreciation calculation for a specified Japan depreciation method: Additional depreciation.
/// </summary>
public class AssetDepCalculation_Additional_JP extends AssetDepCalculation_JP
{
    private const str FeatureReferenceJP23 = 'JP-00023';

    AssetDepBookMap_JP              assetDepBookMap;
    boolean                         isInAllocationMode;
    boolean                         isInReserveMode;
    AssetDepTableMethodInterface_JP assetTableMethodOrdinary;
    AssetDepTableMethodInterface_JP assetTableMethodAccelerated;
    Map                             ordinaryDepTransCalculationResult;  //Cache for ordinary depreciatin trans
    Map                             acceleratedDepTransCalculationResult;  //Cache for ordinary depreciatin trans
    AssetAmount                     ordinaryTransTotalAmount;
    AssetAmount                     acceleratedTransTotalAmount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public AssetAmount calc()
    {
        AssetAmount     ret;

        if (assetTableMethodOrdinary)
        {
            assetTableMethodOrdinary.parmUnpostedExtraDepAmount(calcArgs.parmUnpostedAccumulatedExtraDepAmount());
            assetTableMethodOrdinary.parmAssetIdlePeriods(calcArgs.parmAssetIdlePeriods());
        }
        if (assetTableMethodAccelerated)
        {
            assetTableMethodAccelerated.parmUnpostedExtraDepAmount(calcArgs.parmUnpostedAccumulatedExtraDepAmount());
            assetTableMethodAccelerated.parmAssetIdlePeriods(calcArgs.parmAssetIdlePeriods());
        }
        ret = super();

        if (ret < 0)
        {
            ret = 0;
        }

        if (isInAllocationMode)
        {
            if (calcArgs.parmPeriodEnd() >= calcArgs.parmSpecialDepAllocationEndDate())
            {
                calcArgs.parmIsDepreciationDone(true);
            }
        }
        else if (calcArgs.parmPeriodEnd() >= calcArgs.parmSpecialDepReserveEndDate())
        {
            calcArgs.parmIsDepreciationDone(true);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAcceleratedDepreciationAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate accelerated depreciation
    /// </summary>
    private AssetAmount calcAcceleratedDepreciationAmount(AssetTransDate _fromDate, AssetTransDate _toDate)
    {
        Map                         beginningBalanceForAccelerated;
        AssetAmount                 acceleratedBalanceAtPeriodEnd;
        AssetAmount                 acceleratedBalanceAtPeriodStart;
        AssetDepLimitCalculator_JP  assetDepLimitCalculator_Accelerated;
        MapEnumerator               mapEnumerator;
        TransDate                   currentDate;
        AssetAmount                 acceleratedDepAmount;

        if (calcArgs.parmIsForPreTaxDeduction())
        {
            // For pre-tax deduction feature, the limit of additional should based on the limit of oridinary depreciation and accelerated depreciation,
            // but not based on the actual posted oridinary depreciation or posted accelerated depreciation.
            Debug::assert(assetDepBookMap.TableId == tableNum(AssetBook));

            if (assetDepBookMap.AssetDepBookMap_JP::acceleratedDepreciationProfile())
            {
                assetDepLimitCalculator_Accelerated = AssetDepLimitCalculator_JP::construct(
                    assetDepBookMap,
                    AssetDepLimitType_JP::AcceleratedDepreciation,
                    _fromDate,
                    calcArgs.parmAllowableLimitCacheOwner_JP());
                assetDepLimitCalculator_Accelerated.parmAssetTableInterval(calcArgs.parmAssetTableInterval());
                assetDepLimitCalculator_Accelerated.init();
                acceleratedBalanceAtPeriodEnd = assetDepLimitCalculator_Accelerated.calcLimitForDateRange(_fromDate, _toDate);
            }
        }
        else if (assetTableMethodAccelerated)
        {
            while (assetTableMethodAccelerated.parmPeriodEnd_JP() <= _toDate && assetTableMethodAccelerated.next())
            {
                acceleratedDepAmount = assetTableMethodAccelerated.calc();
                if (acceleratedDepAmount && assetTableMethodOrdinary)
                {
                    assetTableMethodOrdinary.addExtraDepAmount(acceleratedDepAmount);
                }
            }
            beginningBalanceForAccelerated = assetTableMethodAccelerated.getBeginBalanceCalculationResult();

            if (beginningBalanceForAccelerated.exists(_toDate + 1))
            {
                acceleratedBalanceAtPeriodEnd = beginningBalanceForAccelerated.lookup(_toDate + 1);
            }
            else if (beginningBalanceForAccelerated.exists(_fromDate))
            {
                mapEnumerator = beginningBalanceForAccelerated.getEnumerator();
                while (mapEnumerator.moveNext())
                {
                    currentDate = mapEnumerator.currentKey();
                    if (currentDate < _fromDate)
                    {
                        continue;
                    }
                    else if (currentDate > _toDate + 1)
                    {
                        break;
                    }
                    else
                    {
                        acceleratedBalanceAtPeriodEnd = mapEnumerator.currentValue();
                    }
                }
            }
            else if (acceleratedDepTransCalculationResult.exists(_toDate + 1))
            {
                acceleratedBalanceAtPeriodEnd = acceleratedDepTransCalculationResult.lookup(_toDate + 1);
            }
            else
            {
                acceleratedBalanceAtPeriodEnd = AssetDepTransMap_JP::calcAccumulatedAcceleratedDepAmountMst(assetDepBookMap, dateNull(), _toDate);
                acceleratedDepTransCalculationResult.insert(_toDate + 1, acceleratedBalanceAtPeriodEnd);
            }

            if (beginningBalanceForAccelerated.exists(_fromDate))
            {
                acceleratedBalanceAtPeriodStart = beginningBalanceForAccelerated.lookup(_fromDate);
            }
            else if (acceleratedDepTransCalculationResult.exists(_fromDate))
            {
                acceleratedBalanceAtPeriodStart = acceleratedDepTransCalculationResult.lookup(_fromDate);
            }
            else
            {
                acceleratedBalanceAtPeriodStart = AssetDepTransMap_JP::calcAccumulatedAcceleratedDepAmountMst(assetDepBookMap, dateNull(), _fromDate - 1);
                acceleratedDepTransCalculationResult.insert(_fromDate, acceleratedBalanceAtPeriodStart);
            }
        }
        else
        {
            if (acceleratedDepTransCalculationResult.exists(_toDate + 1))
            {
                acceleratedBalanceAtPeriodEnd = acceleratedDepTransCalculationResult.lookup(_toDate + 1);
            }
            else
            {
                acceleratedBalanceAtPeriodEnd = AssetDepTransMap_JP::calcAccumulatedAcceleratedDepAmountMst(assetDepBookMap, dateNull(), _toDate);
                acceleratedDepTransCalculationResult.insert(_toDate + 1, acceleratedBalanceAtPeriodEnd);
            }
            if (acceleratedDepTransCalculationResult.exists(_fromDate))
            {
                acceleratedBalanceAtPeriodStart = acceleratedDepTransCalculationResult.lookup(_fromDate);
            }
            else
            {
                acceleratedBalanceAtPeriodStart = AssetDepTransMap_JP::calcAccumulatedAcceleratedDepAmountMst(assetDepBookMap, dateNull(), _fromDate - 1);
                acceleratedDepTransCalculationResult.insert(
                        _fromDate,
                        acceleratedBalanceAtPeriodStart);
            }
        }

        return acceleratedBalanceAtPeriodEnd - acceleratedBalanceAtPeriodStart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAllowableLimitFinalDepForPeriod</Name>
				<Source><![CDATA[
    protected AssetAmount calcAllowableLimitFinalDepForPeriod()
    {
        AssetAmount         ret;
        int                 numOfDepreciablePeriodInCurYear;
        AssetTableInterval  depInterval;
        int                 indexOfPeriod;
        int                 depreciablePeriodYTD;
        AssetAmount         beginningBalanceOfCurPeriod;
        AssetAmount         allowableLimitForAccumulatedDep;

        depInterval             = calcArgs.parmAssetTableInterval();
        indexOfPeriod           = depInterval.indexofPeriod(calcArgs.parmPeriodstart());
        depreciablePeriodYTD    = this.calcDepreciablePeriodYTD(indexOfPeriod);

        if (depreciablePeriodYTD > 0)
        {
            numOfDepreciablePeriodInCurYear = this.calcNumOfDepreciablePeriodInCurYear();
            beginningBalanceOfCurPeriod     = this.getBeginningBalanceOfAccumulatedDep(calcArgs.parmPeriodstart());
            allowableLimitForAccumulatedDep = this.calcAllowableLimitForAccumulatedDep();

            if (calcArgs.parmAssetAccrualFiscal() == AssetAccrualFiscal::Yearly)
            {
                // For yearly depreciation, depreciation should only run once for each year.
                // So there is always only 1 depreciable period for earch year.
                depreciablePeriodYTD = 1;
            }

            if (isInAllocationMode)
            {
                ret = this.calcAllowableLimitDepForCurYear() / numOfDepreciablePeriodInCurYear;
            }
            else
            {
                ret = this.calcAllowableLimitDepForCurYear() / depreciablePeriodYTD;
            }

            if (ret + beginningBalanceOfCurPeriod >= allowableLimitForAccumulatedDep)
            {
                ret = allowableLimitForAccumulatedDep - beginningBalanceOfCurPeriod;

                if (this.isDepDoneOnExceedAllowLimitForAccDep())
                {
                    // All allowable limited is going to be depreciated, then the depreciation is going to be done.
                    calcArgs.parmIsDepreciationDone(true);
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAllowableLimitForAccumulatedDep</Name>
				<Source><![CDATA[
    protected AssetAmount calcAllowableLimitForAccumulatedDep()
    {
        AssetAmount ret;

        if (isInAllocationMode)
        {
            ret = calcArgs.parmAmountToDepreciate();
        }
        else if (isInReserveMode)
        {
            ret = this.getBeginningBalanceOfAccumulatedDep(this.calcDepStartDateInCurYear())
                + this.calcAllowableLimitDepForCurYear();
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAllowableLimitSumOfDepToPeriod</Name>
				<Source><![CDATA[
    protected AssetAmount calcAllowableLimitSumOfDepToPeriod(int _indexOfPeriod)
    {
        AssetAmount ret;

        if (isInAllocationMode)
        {
            ret = super(_indexOfPeriod);
        }
        else
        {
            ret = this.calcAllowableLimitDepForCurYear();
            ret = this.roundOffDepreciation(ret, true);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcBaseAmountToDepreciate</Name>
				<Source><![CDATA[
    protected AssetAmount calcBaseAmountToDepreciate()
    {
        AssetAmount                 ret;
        AssetDepreciationProfile    acceleratedDepreciationProfile;
        AssetAmount                 commonDepreciationAmount;
        AssetAmount                 acceleratedDepreciationAmount;
        AssetTransDate              firstDayOfCurrentYear = calcArgs.parmAssetTableInterval().findFirstDayOfYear(calcArgs.parmPeriodStart());

        if (isInAllocationMode)
        {
            ret = super();
            ret -= this.getBeginningBalanceOfAccumulatedDep(this.calcDepStartDateInCurYear());
        }
        else
        {
            acceleratedDepreciationAmount   = this.calcAcceleratedDepreciationAmount(firstDayOfCurrentYear, calcArgs.parmPeriodEnd());
            commonDepreciationAmount        = this.calcOrdinaryDepreciationAmount(firstDayOfCurrentYear, calcArgs.parmPeriodEnd());

            ret = commonDepreciationAmount + acceleratedDepreciationAmount;
        }

        if (ret < 0)
        {
            ret = 0;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcBeginningBalanceOfAccumulatedDep</Name>
				<Source><![CDATA[
    protected AssetAmount calcBeginningBalanceOfAccumulatedDep(AssetTransDate _date)
    {
        AssetAmount     ret;

        if (isInAllocationMode)
        {
            if (calcArgs.parmSpecialDepReserveTableId() == tableNum(AssetTrans))
            {
                GlobalizationInstrumentationHelper::featureRun(FeatureReferenceJP23, funcName());

                ret = AssetDepDistributionLine_JP::calcAccumulatedAllocationAmt(
                    calcArgs.parmSpecialDepReserveTableId(),
                    calcArgs.parmSpecialDepReserveRecId(),
                    _date);
            }
        }
        else
        {
            // For pre-tax deduction feature, the limit calculation should be in recapture depreciation mode.
            // In this case, the result should always be able to be find in the cache after calculation started.
            if (calcArgs.isForPreTaxDeduction()
                && calcArgs.parmIsRecaptureDepreciation()
                && calcArgs.parmIsCalculationStarted())
            {
                Debug::assert(beginningBalanceOfAccumulatedDepCache.exists(_date));
                ret = beginningBalanceOfAccumulatedDepCache.lookup(_date);
            }
            else
            {
                if (isInReserveMode)
                {
                    ret = -AssetDepTransMap_JP::calcAccumulatedAmtMstPerDateTranstype(assetDepBookMap, dateNull(), _date, AssetTransType::AdditionalDepReserve_JP);
                }
                else
                {
                    ret = AssetDepTransMap_JP::calcAccumulatedExtraDepAmtMst(assetDepBookMap, dateNull(), _date, 0, true);
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCurYearDepRateAsFraction</Name>
				<Source><![CDATA[
    protected container calcCurYearDepRateAsFraction()
    {
        container           ret;
        real                depRateNominator;
        real                depRateDenominator = 1;
        AssetTableInterval  depInterval = calcArgs.parmAssetTableInterval();
        AssetTransDate      allocationStartDate;
        AssetTransDate      depStartDateInCurYear;
        int                 numOfPeriodsHaveBeenAllocatedInPreYears;
        int                 numOfDereciablePeriodInCurYear;
        int                 totalPeriodsToAllocate;

        if (isInAllocationMode)
        {
            allocationStartDate             = depInterval.findLastDayOfYear(calcArgs.parmSpecialDepReserveDate()) + 1;
            depStartDateInCurYear           = this.calcDepStartDateInCurYear();
            numOfDereciablePeriodInCurYear  = depInterval.numOfPeriodsLeftInYear(depStartDateInCurYear);
            totalPeriodsToAllocate          = assetDepBookMap.SpecialDepAllocationPeriods_JP;
            numOfPeriodsHaveBeenAllocatedInPreYears = depInterval.numOfPeriods(allocationStartDate, depStartDateInCurYear - 1);
            if (totalPeriodsToAllocate <= numOfPeriodsHaveBeenAllocatedInPreYears)
            {
                depRateNominator = 1;
            }
            else
            {
                depRateNominator = numOfDereciablePeriodInCurYear;
                depRateDenominator = totalPeriodsToAllocate - numOfPeriodsHaveBeenAllocatedInPreYears;
            }
        }
        else
        {
            depRateNominator = calcArgs.parmSpecialDepRate();
            depRateNominator = this.roundOffDepreciationRate(depRateNominator);
        }

        ret = [depRateNominator, depRateDenominator];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcOrdinaryDepreciationAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate ordinary depreciation
    /// </summary>
    private AssetAmount calcOrdinaryDepreciationAmount(AssetTransDate _fromDate, AssetTransDate _toDate)
    {
        Map                         beginningBalanceForOrdinary;
        AssetAmount                 ordinaryBalanceAtPeriodEnd;
        AssetAmount                 ordinaryBalanceAtPeriodStart;
        AssetDepLimitCalculator_JP  assetDepLimitCalculator_Oridinary;
        MapEnumerator               mapEnumerator;
        TransDate                   currentDate;

        if (calcArgs.parmIsForPreTaxDeduction())
        {
            // For pre-tax deduction feature, the limit of additional should based on the limit of oridinary depreciation and accelerated depreciation,
            // but not based on the actual posted oridinary depreciation or posted accelerated depreciation.
            Debug::assert(assetDepBookMap.TableId == tableNum(AssetBook));

            assetDepLimitCalculator_Oridinary = AssetDepLimitCalculator_JP::construct(
                assetDepBookMap,
                AssetDepLimitType_JP::OrdinaryDepreciation,
                _fromDate,
                calcArgs.parmAllowableLimitCacheOwner_JP());
            assetDepLimitCalculator_Oridinary.parmAssetTableInterval(calcArgs.parmAssetTableInterval());
            assetDepLimitCalculator_Oridinary.init();
            ordinaryBalanceAtPeriodEnd = assetDepLimitCalculator_Oridinary.calcLimitForDateRange(_fromDate, _toDate);
        }
        else if (assetTableMethodOrdinary)
        {
            while (assetTableMethodOrdinary.parmPeriodEnd_JP() <= _toDate && assetTableMethodOrdinary.next())
            {
                assetTableMethodOrdinary.calc();
            }
            beginningBalanceForOrdinary = assetTableMethodOrdinary.getBeginBalanceCalculationResult();

            if (beginningBalanceForOrdinary.exists(_toDate + 1))
            {
                ordinaryBalanceAtPeriodEnd = beginningBalanceForOrdinary.lookup(_toDate + 1);
            }
            else if (beginningBalanceForOrdinary.exists(_fromDate))
            {
                mapEnumerator = beginningBalanceForOrdinary.getEnumerator();
                while (mapEnumerator.moveNext())
                {
                    currentDate = mapEnumerator.currentKey();
                    if (currentDate < _fromDate)
                    {
                        continue;
                    }
                    else if (currentDate > _toDate + 1)
                    {
                        break;
                    }
                    else
                    {
                        ordinaryBalanceAtPeriodEnd = mapEnumerator.currentValue();
                    }
                }
            }
            else if (ordinaryDepTransCalculationResult.exists(_toDate + 1))
            {
                ordinaryBalanceAtPeriodEnd = ordinaryDepTransCalculationResult.lookup(_toDate + 1);
            }
            else
            {
                ordinaryBalanceAtPeriodEnd = AssetDepTransMap_JP::calcAccumulatedDepAmountMst(assetDepBookMap, dateNull(), _toDate);
                ordinaryDepTransCalculationResult.insert(_toDate + 1, ordinaryBalanceAtPeriodEnd);
            }

            if (beginningBalanceForOrdinary.exists(_fromDate))
            {
                ordinaryBalanceAtPeriodStart = beginningBalanceForOrdinary.lookup(_fromDate);
            }
            else if (ordinaryDepTransCalculationResult.exists(_fromDate))
            {
                ordinaryBalanceAtPeriodStart = ordinaryDepTransCalculationResult.lookup(_fromDate);
            }
            else
            {
                ordinaryBalanceAtPeriodStart = AssetDepTransMap_JP::calcAccumulatedDepAmountMst(assetDepBookMap, dateNull(), _fromDate - 1);
                ordinaryDepTransCalculationResult.insert(_fromDate, ordinaryBalanceAtPeriodStart);
            }
        }
        else
        {
            if (ordinaryDepTransCalculationResult.exists(_toDate + 1))
            {
                ordinaryBalanceAtPeriodEnd = ordinaryDepTransCalculationResult.lookup(_toDate + 1);
            }
            else
            {
                ordinaryBalanceAtPeriodEnd = AssetDepTransMap_JP::calcAccumulatedDepAmountMst(assetDepBookMap, dateNull(), _toDate);
                ordinaryDepTransCalculationResult.insert(_toDate + 1, ordinaryBalanceAtPeriodEnd);
            }
            if (ordinaryDepTransCalculationResult.exists(_fromDate))
            {
                ordinaryBalanceAtPeriodStart = ordinaryDepTransCalculationResult.lookup(_fromDate);
            }
            else
            {
                ordinaryBalanceAtPeriodStart = AssetDepTransMap_JP::calcAccumulatedDepAmountMst(assetDepBookMap, dateNull(), _fromDate - 1);
                ordinaryDepTransCalculationResult.insert(
                        _fromDate,
                        ordinaryBalanceAtPeriodStart);
            }
        }

        return ordinaryBalanceAtPeriodEnd - ordinaryBalanceAtPeriodStart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetDepreciationMethod</Name>
				<Source><![CDATA[
    public AssetDepreciationMethod getAssetDepreciationMethod()
    {
        return AssetDepreciationMethod::AdditionalDepreciation_JP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtraDepreciationAmount</Name>
				<Source><![CDATA[
    protected AssetAmount getExtraDepreciationAmount()
    {
        AssetAmount         ret;
        Map                 beginningBalanceForOrdinary;
        AssetAmount         commonDepreciation;
        AssetAmount         commonDepreciationTransBalanceCurPeriod;
        AssetAmount         commonDepreciationProfileBalanceCurPeriod;
        Map                 beginningBalanceForAccelerated;
        AssetAmount         acceleratedDepreciation;
        AssetAmount         acceleratedDepreciationTransBalanceCurPeriod;
        AssetAmount         acceleratedDepreciationProfileBalanceCurPeriod;
        AssetTransDate      firstDayOfCurrentYear;
        AssetAmount         acceleratedDepAmount;

        if (!isInReserveMode && !isInAllocationMode)
        {
            if (calcArgs.parmIsForPreTaxDeduction())
            {
                firstDayOfCurrentYear = calcArgs.parmAssetTableInterval().findFirstDayOfYear(calcArgs.parmPeriodStart());

                commonDepreciation = this.calcOrdinaryDepreciationAmount(firstDayOfCurrentYear, calcArgs.parmPeriodEnd());
                if (!ordinaryDepTransCalculationResult.exists(firstDayOfCurrentYear))
                {
                    commonDepreciationTransBalanceCurPeriod = AssetDepTransMap_JP::calcAccumulatedDepAmountMst(assetDepBookMap, dateNull(), firstDayOfCurrentYear);
                    ordinaryDepTransCalculationResult.insert(firstDayOfCurrentYear, commonDepreciationTransBalanceCurPeriod);
                }
                commonDepreciation += ordinaryDepTransCalculationResult.lookup(firstDayOfCurrentYear);

                acceleratedDepreciation = this.calcAcceleratedDepreciationAmount(firstDayOfCurrentYear, calcArgs.parmPeriodEnd());
                if (!acceleratedDepTransCalculationResult.exists(firstDayOfCurrentYear))
                {
                    acceleratedDepreciationTransBalanceCurPeriod = AssetDepTransMap_JP::calcAccumulatedAcceleratedDepAmountMst(assetDepBookMap, dateNull(), firstDayOfCurrentYear);
                    acceleratedDepTransCalculationResult.insert(firstDayOfCurrentYear, acceleratedDepreciationTransBalanceCurPeriod);
                }

                acceleratedDepreciation += acceleratedDepTransCalculationResult.lookup(firstDayOfCurrentYear);
            }
            else
            {
                if (acceleratedDepTransCalculationResult.exists(calcArgs.parmPeriodEnd() + 1))
                {
                    acceleratedDepreciationTransBalanceCurPeriod = acceleratedDepTransCalculationResult.lookup(calcArgs.parmPeriodEnd() + 1);
                }
                else
                {
                    acceleratedDepreciationTransBalanceCurPeriod = AssetDepTransMap_JP::calcAccumulatedAcceleratedDepAmountMst(assetDepBookMap, dateNull(), calcArgs.parmPeriodEnd());
                    acceleratedDepTransCalculationResult.insert(calcArgs.parmPeriodEnd() + 1, acceleratedDepreciationTransBalanceCurPeriod);
                }

                acceleratedDepreciationProfileBalanceCurPeriod = acceleratedDepreciationTransBalanceCurPeriod;
                if (assetTableMethodAccelerated)
                {
                    while (assetTableMethodAccelerated.parmPeriodEnd_JP() <= calcArgs.parmPeriodEnd() && assetTableMethodAccelerated.next())
                    {
                        acceleratedDepAmount = assetTableMethodAccelerated.calc();
                        if (acceleratedDepAmount && assetTableMethodOrdinary)
                        {
                            assetTableMethodOrdinary.addExtraDepAmount(acceleratedDepAmount);
                        }
                    }
                    beginningBalanceForAccelerated = assetTableMethodAccelerated.getBeginBalanceCalculationResult();
                    if (beginningBalanceForAccelerated.exists(calcArgs.parmPeriodEnd() + 1))
                    {
                        acceleratedDepreciationProfileBalanceCurPeriod = beginningBalanceForAccelerated.lookup(calcArgs.parmPeriodEnd() + 1);
                    }
                }

                acceleratedDepreciation = acceleratedDepreciationProfileBalanceCurPeriod - acceleratedDepreciationTransBalanceCurPeriod + acceleratedTransTotalAmount;

                if (ordinaryDepTransCalculationResult.exists(calcArgs.parmPeriodEnd() + 1))
                {
                    commonDepreciationTransBalanceCurPeriod = ordinaryDepTransCalculationResult.lookup(calcArgs.parmPeriodEnd() + 1);
                }
                else
                {
                    commonDepreciationTransBalanceCurPeriod = AssetDepTransMap_JP::calcAccumulatedDepAmountMst(assetDepBookMap, dateNull(), calcArgs.parmPeriodEnd());
                    ordinaryDepTransCalculationResult.insert(calcArgs.parmPeriodEnd() + 1, commonDepreciationTransBalanceCurPeriod);
                }

                commonDepreciationProfileBalanceCurPeriod = commonDepreciationTransBalanceCurPeriod;
                if (assetTableMethodOrdinary)
                {
                    while (assetTableMethodOrdinary.parmPeriodEnd_JP() <= calcArgs.parmPeriodEnd() && assetTableMethodOrdinary.next())
                    {
                        assetTableMethodOrdinary.calc();
                    }
                    beginningBalanceForOrdinary = assetTableMethodOrdinary.getBeginBalanceCalculationResult();
                    if (beginningBalanceForOrdinary.exists(calcArgs.parmPeriodEnd() + 1))
                    {
                        commonDepreciationProfileBalanceCurPeriod = beginningBalanceForOrdinary.lookup(calcArgs.parmPeriodEnd() + 1);
                    }
                }

                commonDepreciation = commonDepreciationProfileBalanceCurPeriod - commonDepreciationTransBalanceCurPeriod + ordinaryTransTotalAmount;
            }
            ret = commonDepreciation + acceleratedDepreciation;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        container       acceleratedEntryContainer;

        super();

        assetDepBookMap = AssetDepBookMap_JP::findByAssetIdBookId(calcArgs.parmAssetId(), calcArgs.parmAssetBookId());
        ordinaryDepTransCalculationResult = new Map(Types::Date, Types::Real);
        acceleratedDepTransCalculationResult = new Map(Types::Date, Types::Real);
        ordinaryTransTotalAmount = AssetDepTransMap_JP::calcAccumulatedDepAmountMst(assetDepBookMap, dateNull(), dateMax());
        acceleratedTransTotalAmount = AssetDepTransMap_JP::calcAccumulatedAcceleratedDepAmountMst(AssetDepBookMap, dateNull(), dateMax());

        // Accelerated depreciation and additional depreciation are based on ordinary depreciatio,
        // so they can not be set as depreciation method of ordinary depreciation profile
        Debug::assert(assetDepBookMap.depreciationProfile().Method != AssetDepreciationMethod::Accelerated_JP
            && assetDepBookMap.depreciationProfile().Method != AssetDepreciationMethod::AdditionalDepreciation_JP);

        assetTableMethodOrdinary = AssetTableMethod::construct(assetDepBookMap, dateMax()) as AssetDepTableMethodInterface_JP;

        if (assetDepBookMap.AssetDepBookMap_JP::acceleratedDepreciationProfile())
        {
            acceleratedEntryContainer = AssetDocumentAcceleratedDep_JP::getAcceleratedDocumentEntryList(
                calcArgs.parmAssetId(),
                calcArgs.parmAssetBookId(),
                assetDepBookMap.LastDepreciationDateAccelerated);

            AssetTableMethodAccelerated = AssetTableMethod::construct(assetDepBookMap, dateMax(), '', false, false, false,true) as AssetDepTableMethodInterface_JP;

            if (assetTableMethodAccelerated)
            {
                assetTableMethodAccelerated.parmAcceleratedEntryContainer_JP(acceleratedEntryContainer);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDepDoneOnExceedAllowLimitForAccDep</Name>
				<Source><![CDATA[
    protected boolean isDepDoneOnExceedAllowLimitForAccDep()
    {
        boolean ret;

        ret = !isInReserveMode;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDepDoneOnExceedAmountToDepreciate</Name>
				<Source><![CDATA[
    protected boolean isDepDoneOnExceedAmountToDepreciate()
    {
        boolean ret;

        ret = !isInReserveMode;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunCalc</Name>
				<Source><![CDATA[
    public void preRunCalc()
    {
        super();

        if (calcArgs.parmIsSpecialDepAllocation())
        {
            isInAllocationMode  = true;
            isInReserveMode     = false;
        }
        else
        {
            isInAllocationMode = false;
            if (calcArgs.parmSpecialDepAccountingMethod() == AssetSpecialDepAccountingMethod_JP::Reserve)
            {
                isInReserveMode = true;
            }
            else
            {
                isInReserveMode = false;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>