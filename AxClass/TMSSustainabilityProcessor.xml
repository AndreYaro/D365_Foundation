<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSSustainabilityProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class TMSSustainabilityProcessor
{
    #TMSXML

    TMSMiles                    miles;
    Weight                      weight;
    TMSTransportationMode       transportationMode;
    XmlDocument                 requestDoc;
    XmlDocument                 responseDoc;
    RecId                       routeTableRefRecId;
    TableId                     routeTableRefTableId;
    Map                         resultMap;
    TMSParameters               tmsParameters;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromReferenceId</Name>
				<Source><![CDATA[
    public void initFromReferenceId(RecId _refRecId, TableId _refTableId)
    {
        this.routeTableRefRecId = _refRecId;
        this.routeTableRefTableId = _refTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static TMSSustainabilityProcessor construct()
    {
        TMSSustainabilityProcessor sustainabilityProcessor = new TMSSustainabilityProcessor();
        sustainabilityProcessor.resultMap = new Map(Types::Int64, Types::Container);
        return sustainabilityProcessor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        tmsParameters = TMSParameters::find();
        XML sustainabilityXML = this.createXML();
        TmsTransactionFacade facade = TmsTransactionFacade::newFromXml(sustainabilityXML);
        this.fetchEmissionFromEngine(facade);
        XML result = facade.parmXTransaction().ToString();
        
        this.readXML(result);
        this.updateEmissionInTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEmissionInTable</Name>
				<Source><![CDATA[
    private void updateEmissionInTable()
    {
        TMSRouteSegmentTable routeSegmentToUpdate;
        TMSRouteTable routeTableToUpdate;
        Map aggregatedResultMap = new Map(Types::Int64, Types::Container);
        ttsbegin;
        MapEnumerator enumerator = resultMap.getEnumerator();
        while (enumerator.moveNext())
        {
            RecId currRecId = enumerator.currentKey();
            container result = enumerator.currentValue();
            select firstonly forupdate routeSegmentToUpdate
                where routeSegmentToUpdate.RecId == enumerator.currentKey();
            routeSegmentToUpdate.CarbonEmission = any2Real(conPeek(result, 1));
            routeSegmentToUpdate.CarbonEmissionUnit = conPeek(result, 2);
            routeSegmentToUpdate.update();
            if (!aggregatedResultMap.exists(routeSegmentToUpdate.RouteRecId))
            {
                aggregatedResultMap.insert(routeSegmentToUpdate.RouteRecId, [routeSegmentToUpdate.CarbonEmission, routeSegmentToUpdate.CarbonEmissionUnit]);
            }
            else
            {
                container currResult = aggregatedResultMap.lookup(routeSegmentToUpdate.RouteRecId);
                aggregatedResultMap.insert(routeSegmentToUpdate.RouteRecId, [conPeek(currResult, 1) + routeSegmentToUpdate.CarbonEmission, routeSegmentToUpdate.CarbonEmissionUnit]);
            }
        }
        enumerator = aggregatedResultMap.getEnumerator();
        while (enumerator.moveNext())
        {
            container curr = enumerator.currentValue();
            update_recordset routeTableToUpdate
                setting CarbonEmission = any2Real(conPeek(curr, 1)), CarbonEmissionUnit = conPeek(curr, 2)
                where routeTableToUpdate.RecId == enumerator.currentKey();
        }

        ttscommit;

    }

]]></Source>
			</Method>
			<Method>
				<Name>createXML</Name>
				<Source><![CDATA[
    public XML createXML()
    {
        XmlNode         transNode;
        TMSRouteTable routeTable;
        TMSRouteSegmentTable routeSegmentTable;

        requestDoc = this.getRequestDoc();
        transNode  = requestDoc.createElement(#transaction);
        requestDoc.appendChild(transNode);
        this.writeXMLElement(transNode, #sustainabilityModelName, tmsParameters.getSustainabilityModelID());
        this.writeXMLElement(transNode, #transDate, any2Str(DateTimeUtil::date(DateTimeUtil::utcNow())));
        XmlNode segmentsNode = this.writeXMLNode(transNode, #segments);
        while select routeSegmentTable
            where routeSegmentTable.RefRecId == routeTableRefRecId
               && routeSegmentTable.RefTableId == routeTableRefTableId
               && routeSegmentTable.HasErrors == false
        {
            this.createSegmentNode(segmentsNode, routeSegmentTable);
        }

        return requestDoc.xml();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSegmentNode</Name>
				<Source><![CDATA[
    private void createSegmentNode(XmlNode _segmentsNode, TMSRouteSegmentTable _routeSegmentTable)
    {
        XmlNode segmentNode = this.writeXMLNode(_segmentsNode, #segment);
        this.writeXMLElement(segmentNode, #distance, any2Str(_routeSegmentTable.Miles));
        this.writeXMLElement(segmentNode, #segmentID, any2Str(_routeSegmentTable.RecId));
        TMSCarrierService carrierService = TMSCarrierService::find(_routeSegmentTable.CarrierServiceCode, _routeSegmentTable.CarrierCode);
        TMSMethod method = TMSMethod::find(carrierService.MethodCode);
        this.writeXMLElement(segmentNode, #transportationMode, method.getTransportationModeId());
        this.writeXMLElement(segmentNode, #distanceUnit, TMSSustainabilityConstant::Mile);
        this.writeXMLElement(segmentNode, #transportationAndDistributionType, int2Str(this.tmsParameters.getSustainabilityDistributionType()));
        var weightInKg = UnitOfMeasureConverter::convert(
            this.weight,
            UnitOfMeasureBaseUnit::findByUnitOfMeasureClass(UnitOfMeasureClass::Mass).UnitOfMeasure,
            UnitOfMeasure::findByInternalCode(UnitOfMeasureCodeSymbol::Kilograms).RecId,
            NoYes::Yes);
        this.writeXMLElement(segmentNode, #GoodsQuantity, any2Str(weightInKg));
        this.writeXMLElement(segmentNode, #GoodsQuantityUnit, TMSSustainabilityConstant::KG);
    }

]]></Source>
			</Method>
			<Method>
				<Name>readXML</Name>
				<Source><![CDATA[
    protected void readXML(XML xml)
    {
        responseDoc = XmlDocument::newXml(xml);
        XmlNode transactionNode = responseDoc.documentElement();
        XmlNode segmentsNode = transactionNode.selectSingleNode(#segments);
        XmlNodeList segmentsNodeList = segmentsNode.selectNodes(#segment);
        XmlNode requestNode = segmentsNodeList.nextNode();
        while (requestNode)
        {
            resultMap.insert(str2Int64(this.returnNamedNode(requestNode, #segmentId)), [any2Real(this.returnNamedNode(requestNode, #emission)), this.returnNamedNode(requestNode, #emissionUnit)]);
            requestNode = segmentsNodeList.nextNode();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnNamedNode</Name>
				<Source><![CDATA[
    public str returnNamedNode(XmlNode _node, str _id)
    {
        XmlNode         xmlNode;
        XmlNodeList     xmlList;
        str             item;

        xmlList     = _node.selectNodes(_id);
        xmlNode     = xmlList.nextNode();

        if (xmlNode)
        {
            item = xmlNode.text();
        }

        return item;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeXMLElement</Name>
				<Source><![CDATA[
    public void writeXMLElement(XmlNode _xmlNode, str _element, str _text)
    {
        XmlNode     node;
        boolean     noWeightClass;

        if (Global::str2numOK(_text) && _element == #class)
        {
            noWeightClass = str2num(_text) == 0;
        }

        if (!noWeightClass)
        {
            node = requestDoc.createElement(_element);
            node.text(_text);
            _xmlNode.appendChild(node);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeXMLNode</Name>
				<Source><![CDATA[
    public XmlNode writeXMLNode(XmlNode _xmlNode, str _element)
    {
        XmlNode     node;

        node = requestDoc.createElement(_element);
        _xmlNode.appendChild(node);

        return node;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRequestDoc</Name>
				<Source><![CDATA[
    public XmlDocument getRequestDoc()
    {
        if (!requestDoc)
        {
            requestDoc = XmlDocument::newBlank();
        }

        return requestDoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEmissionWithRefID</Name>
				<Source><![CDATA[
    public static void updateEmissionWithRefID(container _refIDs, Weight _weight)
    {
        TMSSustainabilityProcessor sustainAbilityProcessor = TMSSustainabilityProcessor::construct();
        sustainAbilityProcessor.weight = _weight;
        sustainAbilityProcessor.initFromReferenceId(conPeek(_refIDs, 1), conPeek(_refIDs, 2));
        sustainAbilityProcessor.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchEmissionFromEngine</Name>
				<Source><![CDATA[
    public void fetchEmissionFromEngine(TmsTransactionFacade _transactionFacade)
    {
        TMSISustainabilityProvider sustainabilityEngine = TMSSustainabilityEngineFactory::createSustainabilityEngine();
        sustainabilityEngine.updateEmissionFromService(_transactionFacade);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>