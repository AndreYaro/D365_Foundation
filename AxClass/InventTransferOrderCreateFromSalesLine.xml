<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransferOrderCreateFromSalesLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventTransferOrderCreateFromSalesLine extends RunBase
{
    List salesLinesList = new List(Types::Record);
    InventTransferTable inventTransferTable;
    InventLocationIdFrom fromWarehouse;
    InventLocationIdTo toWarehouse;
    InventTransferShipDate shipDate;
    InventTransferAutoReservation autoReservation;
    DialogField fieldFromWarehouse;
    DialogField fieldToWarehouse;
    DialogField fieldShipDate;
    DialogField fieldAutoReservation;
    SalesLine salesLine;
    InventTransferLine inventTransferLine;
    ItemId itemId;
    SalesOrderedQty qty;
    PdsCWInventQty cwQty;
    DialogField fieldItemId;
    DialogField fieldQty;
    DialogField fieldCWQty;
    const real firstLineLineNumber = 1;

    private InventTransferId existingOpenTransferId;
    private DialogField fieldAddToAnOpenTO;
    private static boolean linkTOSOFeatureEnabled = InventTransferLineSalesLineSupplyRelationFeature::isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>modifyFromWarehouse</Name>
				<Source><![CDATA[
    private boolean modifyFromWarehouse(FormStringControl _control)
    {
        boolean ret = _control.modified();

        if (ret)
        {
            fieldAddToAnOpenTO.allowEdit(fieldFromWarehouse.value());
            fieldAddToAnOpenTO.value('');
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTransferOrder</Name>
				<Source><![CDATA[
    private boolean validateTransferOrder(FormStringControl _control)
    {
        if (fieldAddToAnOpenTO.value())
        {
            InventTransferTable transferOrder = InventTransferTable::find(fieldAddToAnOpenTO.value());

            if (transferOrder.RecId == 0)
            {
                return checkFailed(strFmt("@SCM:TableFieldValidation", fieldAddToAnOpenTO.value(), "@SYS78239", "@SYS78286"));
            }

            if (transferOrder.TransferStatus != InventTransferStatus::Created)
            {
                return checkFailed(strFmt("@SCM:InventTransferOrderStatusMismatchError", transferOrder.TransferId, transferOrder.TransferStatus));
            }

            if (transferOrder.InventLocationIdFrom != fieldFromWarehouse.value() || transferOrder.InventLocationIdTo != fieldToWarehouse.value())
            {
                return checkFailed(strFmt("@SCM:InventTransferOrderDimensionMismatchError", transferOrder.TransferId, transferOrder.InventLocationIdFrom, transferOrder.InventLocationIdTo));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupTransferNumber</Name>
				<Source><![CDATA[
    private void lookupTransferNumber(FormStringControl _control)
    {
        if (_control && fieldFromWarehouse.value() && fieldToWarehouse.value())
        {
            SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(InventTransferTable), _control, true);

            // Display the value field in the lookup form.
            sysTableLookup.addLookupfield(fieldNum(InventTransferTable, TransferId), true);
            sysTableLookup.addLookupfield(fieldNum(InventTransferTable, InventLocationIdFrom));
            sysTableLookup.addLookupfield(fieldNum(InventTransferTable, InventLocationIdTo));
            sysTableLookup.addLookupfield(fieldNum(InventTransferTable, ShipDate));
            sysTableLookup.addLookupfield(fieldNum(InventTransferTable, ReceiveDate));

            Query query = new Query();
            QueryBuildDataSource qbds = query.addDataSource(tableNum(InventTransferTable));

            qbds.addRange(fieldNum(InventTransferTable, TransferStatus)).value(SysQuery::value(InventTransferStatus::Created));
            qbds.addRange(fieldNum(InventTransferTable, InventLocationIdFrom)).value(fieldFromWarehouse.value());
            qbds.addRange(fieldNum(InventTransferTable, InventLocationIdTo)).value(fieldToWarehouse.value());

            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();
        dialog.caption("@SCM:TransferOrderLabel");
        ListIterator salesLinesListIterator = new ListIterator(salesLinesList);
        salesLine = salesLinesListIterator.value();
        SalesTable salesTable = salesLine.salesTable();

        if (linkTOSOFeatureEnabled)
        {
            DialogGroup dlgGrp = dialog.addGroup();
            dlgGrp.columns(2);
        }

        fieldFromWarehouse = dialog.addField(extendedTypeStr(InventLocationIdFrom), "@SYS25253");
        fieldToWarehouse = dialog.addFieldValue(extendedTypeStr(InventLocationIdTo), salesLine.inventDim().InventLocationId, "@SYS8519");
        fieldShipDate = dialog.addFieldValue(extendedTypeStr(InventTransferShipDate), salesTable.ShippingDateRequested, "@SYS10178");
        fieldAutoReservation = dialog.addFieldValue(extendedTypeStr(InventTransferAutoReservation), salesTable.Reservation, "@SYS78259");
        fieldFromWarehouse.mandatory_RU(true);
        fieldToWarehouse.mandatory_RU(true);

        if (linkTOSOFeatureEnabled)
        {
            dialog.addGroup();

            fieldAddToAnOpenTO = dialog.addField(extendedTypeStr(InventTransferId), "@SCM:InventSelectOpenTransferOrderCreateFromSalesLine");
            fieldAddToAnOpenTO.helpText("@SCM:InventSelectOpenTransferOrderCreateFromSalesLineHelpText");
            fieldAddToAnOpenTO.allowEdit(false);

            fieldFromWarehouse.registerOverrideMethod(methodStr(FormStringControl, modified), methodStr(InventTransferOrderCreateFromSalesLine, modifyFromWarehouse), this);
            fieldAddToAnOpenTO.registerOverrideMethod(methodStr(FormStringControl, validate), methodStr(InventTransferOrderCreateFromSalesLine, validateTransferOrder), this);
            fieldAddToAnOpenTO.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(InventTransferOrderCreateFromSalesLine, lookupTransferNumber), this);
        }
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doNotUseWaitPattern</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extends this method to show warning messages in the popup dialog after calling dialog.run().
    /// </summary>
    public boolean doNotUseWaitPattern()
    {
        if (linkTOSOFeatureEnabled)
        {
            ListIterator salesLinesListIterator = new ListIterator(salesLinesList);
            while (salesLinesListIterator.more())
            {
                SalesLine currSalesLine = salesLinesListIterator.value();
                InventTransferOrderSalesLineSupplyRelation relation;
                while select TransferId, TransferLineNum from relation
                    where relation.SalesId == currSalesLine.SalesId
                       && relation.SalesLineCreationSequenceNumber == currSalesLine.LineCreationSequenceNumber
                {
                    warning(strFmt("@SCM:SelectedSalesLineAlreadyLinkedWithAnotherTransferOrder",
                        currSalesLine.ItemId, currSalesLine.LineNum, relation.TransferId, relation.TransferLineNum));
                }
                salesLinesListIterator.next();
            }
        }
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        fromWarehouse = fieldFromWarehouse.value();
        toWarehouse = fieldToWarehouse.value();
        shipDate = fieldShipDate.value();
        autoReservation = fieldAutoReservation.value();
        existingOpenTransferId = linkTOSOFeatureEnabled ? fieldAddToAnOpenTO.value() : '';
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateTransferOrder</Name>
				<Source><![CDATA[
    protected boolean mustCreateTransferOrder()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransferOrder</Name>
				<Source><![CDATA[
    public void createTransferOrder()
    {
        if (this.mustCreateTransferOrder())
        {
            inventTransferTable.clear();
            inventTransferTable.initValue();
            inventTransferTable.TransferId = InventTransferTable::numberSeq().num();

            inventTransferTable.InventLocationIdFrom = fromWarehouse;
            inventTransferTable.modifiedField(fieldNum(InventTransferTable, InventLocationIdFrom));
            inventTransferTable.InventLocationIdTo = toWarehouse;
            inventTransferTable.modifiedField(fieldNum(InventTransferTable, InventLocationIdTo));
        
            inventTransferTable.ShipDate = shipDate;
            inventTransferTable.ReceiveDate = shipDate;
            SalesCalcAvailableDlvDates::initDateFields(inventTransferTable);

            inventTransferTable.initFromAddress();
            inventTransferTable.initToAddress();
            inventTransferTable.AutoReservation = autoReservation;

            if (inventTransferTable.validateWrite())
            {
                inventTransferTable.insert();
            }
            else
            {
                throw error("@SCM:FailTransferOrder");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransferLinesWithSalesLines</Name>
				<Source><![CDATA[
    public void createTransferLinesWithSalesLines()
    {
        ListIterator salesLinesListIterator = new ListIterator(salesLinesList);
        real currLineNumber = 1;

        if (linkTOSOFeatureEnabled)
        {
            InventTransferLine transferLine;
            select maxof(LineNum) from transferLine
                where transferLine.TransferId == inventTransferTable.TransferId;
            currLineNumber = currLineNumber + (transferLine.LineNum ? transferLine.LineNum : 0);
        }

        while (salesLinesListIterator.more())
        {
            SalesLine currSalesLine = salesLinesListIterator.value();
            InventTransferLine currInventTransferLine = this.initTransferLinesWithSalesLines(currSalesLine);
            currInventTransferLine.LineNum = currLineNumber;

            if (currInventTransferLine.validateWrite())
            {
                currInventTransferLine.insert();
                info(strFmt("@SCM:CreateTOfromSalesLine", currInventTransferLine.TransferId, currInventTransferLine.ItemId));
            }
            else
            {
                throw error(strFmt("@SCM:FailedToCreateTtransferLineFromSalesLine", inventTransferLine.TransferId, inventTransferLine.ItemId));
            }

            if (linkTOSOFeatureEnabled)
            {
                this.insertSupplyRelation(currSalesLine, currInventTransferLine);

                if (!PdsGlobal::pdsIsCWItem(currSalesLine.ItemId) && this.shouldAutoMarking(currSalesLine.ItemId))
                {
                    InventTransOriginId salesLineTransOriginId    = InventTransOrigin::findByInventTransId(currSalesLine.InventTransId).RecId;
                    InventTransOriginId transferLineTransOriginId = InventTransOrigin::findByInventTransId(currInventTransferLine.InventTransIdReceive).RecId;

                    InventDimParm inventDimParm;
                    InventDim     inventDim = currSalesLine.inventDim();
                    inventDimParm.initFromInventDim(inventDim);

                    this.updateMarking(salesLineTransOriginId, transferLineTransOriginId, -currInventTransferLine.QtyTransfer, -currInventTransferLine.PdsCWQtyTransfer, inventDim, inventDimParm);
                }
            }

            currLineNumber = currLineNumber + 1;
            salesLinesListIterator.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSupplyRelation</Name>
				<Source><![CDATA[
    private void insertSupplyRelation(SalesLine _salesLine, InventTransferLine _inventTransferLine)
    {
        ttsbegin;
        InventTransferOrderSalesLineSupplyRelation relation;
        relation.SalesId                         = _salesLine.SalesId;
        relation.SalesLineCreationSequenceNumber = _salesLine.LineCreationSequenceNumber;
        relation.TransferId                      = _inventTransferLine.TransferId;
        relation.TransferLineNum                 = _inventTransferLine.LineNum;
        relation.insert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldAutoMarking</Name>
				<Source><![CDATA[
    private boolean shouldAutoMarking(ItemId _itemId)
    {
        // only auto mark non-settled items
        return !InventTable::find(_itemId).modelGroup().inventModelType().isSettled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMarking</Name>
				<Source><![CDATA[
    private void updateMarking(
        InventTransOriginId     _inventTransOriginId,           // Issue
        InventTransOriginId     _markingRefInventTransOriginId, // Receipt
        InventQty               _markQty,
        PdsCWInventQty          _cwMarkQty,
        InventDim               _inventDimCriteria = null,
        InventDimParm           _inventDimParm = null)
    {
        PmfQtyDataCarrier outQuantities = new PmfQtyDataCarrier();

        // mark sales line
        InventQty markedQty = InventTransOrigin::updateMarking(_inventTransOriginId, _markingRefInventTransOriginId, _markQty, '', SortOrder::Descending, true, _inventDimCriteria, _inventDimParm, _cwMarkQty, outQuantities);

        if (!markedQty)
        {
            return;
        }

        // mark transfer line receive
        InventQty markedReverseQty = InventTransOrigin::updateMarking(_markingRefInventTransOriginId, _inventTransOriginId, markedQty, '', SortOrder::Descending, true, _inventDimCriteria, _inventDimParm, outQuantities.parmCwQty());

        if (markedReverseQty)
        {
            // update reservation for the issue.
            InventUpd_Reservation::updateReserveRefTransId(InventTransOrigin::find(_inventTransOriginId).inventMovement(InventDirection::Issue), true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransferLinesWithSalesLines</Name>
				<Source><![CDATA[
    protected InventTransferLine initTransferLinesWithSalesLines(SalesLine _salesLine)
    {
        InventTransferLine currInventTransferLine;
        currInventTransferLine.initValue();
        currInventTransferLine.initFromSalesLine(_salesLine);
        currInventTransferLine.initFromInventTransferTable(inventTransferTable, true);
        currInventTransferLine.AutoReservation = linkTOSOFeatureEnabled ? autoReservation : inventTransferTable.AutoReservation;

        if (_salesLine.PdsCWQty)
        {
            currInventTransferLine.PdsCWQtyTransfer = _salesLine.PdsCWQty;
            currInventTransferLine.modifiedField(fieldNum(InventTransferLine, PdsCWQtyTransfer));
        }
        else
        {
            currInventTransferLine.QtyTransfer = _salesLine.QtyOrdered;
        }

        currInventTransferLine.ReceiveDate = shipDate;

        if (this.fromWarehouse && this.toWarehouse)
        {
            SalesCalcAvailableDlvDates_TransferLine salesCalcDlvDates =
                    SalesCalcAvailableDlvDates_TransferLine::newTransferLine(currInventTransferLine, fieldNum(InventTransferLine, ReceiveDate));
            SalesCalcAvailableDlvDates::initDateFieldsForSalesCalc(currInventTransferLine, salesCalcDlvDates, true);
        }
        else
        {
            currInventTransferLine.ShipDate = shipDate;
        }

        InventMovement::bufferSetRemainQty(currInventTransferLine, InventMovSubType::None);
        InventMovement::bufferSetRemainQty(currInventTransferLine, InventMovSubType::TransferOrderTransitFrom);

        if (inventTransferTable.StockTransferCostPriceHandlingImprovement_IN)
        {
            InventTransferLine_IN inventTransferLineIN = currInventTransferLine.inventTransferLine_IN();
            inventTransferLineIN.recalculateStockTransferValue(currInventTransferLine, currInventTransferLine.inventDim());
            currInventTransferLine.packInventTransferLine_IN(inventTransferLineIN);
        }

        return currInventTransferLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createArgumentsForTransferOrderForm</Name>
				<Source><![CDATA[
    private Args createArgumentsForTransferOrderForm(FormName _formName, InventTransferTable _transferTable, Args _args)
    {
        Args args = new Args();
        args.name(_formName);
        args.menuItemName(menuItemDisplayStr(InventTransferOrder));
        args.menuItemType(MenuItemType::Display);
        args.caller(_args.caller());
        args.record(_transferTable);
        return Args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openTransferOrderForm</Name>
				<Source><![CDATA[
    private void openTransferOrderForm(FormName _formName, InventTransferTable _transferTable, Args _args)
    {
        Args args = this.createArgumentsForTransferOrderForm(_formName, _transferTable, _args);
        FormRun formTransferOrder = classfactory.formRunClass(args);
        formTransferOrder.init();
        formTransferOrder.run();
        formTransferOrder.wait();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        try
        {
            ttsbegin;
            if (existingOpenTransferId && linkTOSOFeatureEnabled)
            {
                inventTransferTable = InventTransferTable::find(existingOpenTransferId);
            }
            else
            {
                this.createTransferOrder();
            }

            if (inventTransferTable.RecId)
            {
                this.createTransferLinesWithSalesLines();
            }
            ttscommit;         
        }
        catch (Exception::Error)
        {
            infolog.add(Exception::Error, "@SCM:FailTransferOrder");
            throw error("@SCM:FailTransferOrder");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    public static InventTransferOrderCreateFromSalesLine build(Args _args)
    {
        List salesLinesList = new List(Types::Record);
        InventTransferOrderCreateFromSalesLine createTransferOrderFromSalesLine = new InventTransferOrderCreateFromSalesLine();
        FormDataSource formDS = FormDataUtil::getFormDataSource(_args.record());
        InventLocationId currInventLocationId;
        for (SalesLine currSalesLine = formDS.getFirst(true) ? formDS.getFirst(true) : _args.record();
            currSalesLine;
            currSalesLine = formDS.getNext())
        {
            if (!currInventLocationId)
            {
                currInventLocationId = currSalesLine.inventDim().InventLocationId;
            }
            else if (currInventLocationId != currSalesLine.inventDim().InventLocationId)
            {
                throw error("@SCM:FailedToCreateTransferOrderWithMultipleSalesLines");
            }
            salesLinesList.addEnd(currSalesLine);
        }
        createTransferOrderFromSalesLine.salesLinesList = salesLinesList;
        return createTransferOrderFromSalesLine;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        var createTransferOrderFromSalesLine = InventTransferOrderCreateFromSalesLine::build(_args);
        if (createTransferOrderFromSalesLine.prompt())
        {
            createTransferOrderFromSalesLine.runOperation();
            if (createTransferOrderFromSalesLine.inventTransferTable)
            {
                createTransferOrderFromSalesLine.openTransferOrderForm(formStr(InventTransferOrders), createTransferOrderFromSalesLine.inventTransferTable, _args);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromWarehouse</Name>
				<Source><![CDATA[
    public InventLocationIdFrom parmFromWarehouse(InventLocationIdFrom _fromWarehouse = fromWarehouse)
    {
        fromWarehouse = _fromWarehouse;

        return fromWarehouse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesLinesListe</Name>
				<Source><![CDATA[
    public List parmSalesLinesListe(List _salesLinesList = salesLinesList)
    {
        salesLinesList = _salesLinesList;
        return salesLinesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>