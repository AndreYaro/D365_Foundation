<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailEInvoiceCFDIRefProcessorAttribute_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailEInvoiceCFDIRefProcessor_MX</c> class is an extension attribute used by factory methods.
/// </summary>
class RetailEInvoiceCFDIRefProcessorAttribute_MX extends SysAttribute implements SysExtensionIAttribute
{
    protected TableName invoiceJourType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>RetailEInvoiceCFDIRefProcessorAttribute_MX</c> class.
    /// </summary>
    /// <param name="_tableName">The <c>TableName</c> value to be used by the factory method.</param>
    public void new(TableName _invoiceJourType)
    {
        super();
        invoiceJourType = _invoiceJourType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceJourType</Name>
				<Source><![CDATA[
    public TableName parmInvoiceJourType(TableName _invoiceJourType = invoiceJourType)
    {
        invoiceJourType = _invoiceJourType;

        return invoiceJourType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCacheKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the key used for storing cached data for this attribute.
    /// </summary>
    /// <returns>
    /// A string representing the cache key.
    /// </returns>
    /// <remarks>
    /// The key typically includes the class name and relevant members.
    /// The key must be invariant across different languages, e.g. use int2str() instead of enum2str() when including enum members.
    /// </remarks>
    public str parmCacheKey()
    {
        return classStr(RetailEInvoiceCFDIRefProcessorAttribute_MX)+';'+invoiceJourType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSingleton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the same instance should be returned by the extension framework for a given extension.
    /// </summary>
    /// <returns>
    /// true, if the same instance should be used; otherwise, false.
    /// </returns>
    /// <remarks>
    /// When returning false, the SysExtension framework will create a new class instance for every invocation.
    /// If the class is immutable, consider returning true to save memory and gain performance.
    /// </remarks>
    public boolean useSingleton()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>