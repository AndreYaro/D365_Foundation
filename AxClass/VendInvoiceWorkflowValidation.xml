<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceWorkflowValidation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class contains various workflow related validations commonly performed on vendor invoices prior to workflow submission. It is intended
/// to contain the business logic performed during these validations and not the error messages and other messaging produced in response to the
/// results of these validations.
/// </summary>
internal static class VendInvoiceWorkflowValidation
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateInvoiceNumberIsNotEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that a given vendor invoice has an invoice number.
    /// </summary>
    /// <param name = "_vendorInvoice">The vender invoice.</param>
    /// <returns>True if the invoice has a populated invoice number; else, false.</returns>
    internal static boolean validateInvoiceNumberIsNotEmpty(VendInvoiceInfoTable _vendorInvoice)
    {
        return _vendorInvoice.Num != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInvoiceNotOnHold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that a given invoice is not on hold.
    /// </summary>
    /// <param name = "_vendorInvoice">The vendor invoice.</param>
    /// <returns>True if the invoice is not on hold; else, false.</returns>
    internal static boolean validateInvoiceNotOnHold(VendInvoiceInfoTable _vendorInvoice)
    {
        return _vendorInvoice.Hold == NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInvoiceVendorNotOnHoldForAllOrInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether or not an invoice's vendor is on blocked for All or Invoice.
    /// </summary>
    /// <param name = "_vendorInvoice">The vendor invoice.</param>
    /// <returns>True if the invoice's vendor is not on hold; else, false.</returns>
    internal static boolean validateInvoiceVendorNotOnHoldForAllOrInvoice(VendInvoiceInfoTable _vendorInvoice)
    {
        VendTable vendor = VendTable::find(_vendorInvoice.InvoiceAccount);
        return vendor.Blocked != CustVendorBlocked::All && vendor.Blocked != CustVendorBlocked::Invoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMatchingHasBeenPerformed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a given vendor invoice's match status.
    /// </summary>
    /// <param name = "_vendorInvoice">The vender invoice.</param>
    /// <param name = "_validateAllInvoicesInSession">Determines whether or not to validate all invoices in the current session.</param>
    /// <returns>True if the invoice's match status is valid; else, false.</returns>
    internal static boolean validateMatchingHasBeenPerformed(
        VendInvoiceInfoTable _vendorInvoice, 
        boolean _validateAllInvoicesInSession = true)
    {
        VendParameters vendParameters = VendParameters::find();
        VendInvoiceInfoTable vendInvoiceInfoTableLoc;
        VendInvoiceInfoSubTable vendInvoiceInfoSubTable;
        boolean isMatchStatusValid = true;

        if (vendParameters.editUseInvoiceMatching() && !vendParameters.editAutomaticHeaderMatching())
        {
            select firstonly RecId from vendInvoiceInfoTableLoc
                where vendInvoiceInfoTableLoc.ParmId == _vendorInvoice.ParmId
                    && (_validateAllInvoicesInSession || (vendInvoiceInfoTableLoc.TableRefId == _vendorInvoice.TableRefId))
                    && vendInvoiceInfoTableLoc.LastMatchVariance == LastMatchVarianceOptions::Unknown
                    && vendInvoiceInfoTableLoc.Hold == NoYes::No
                exists join vendInvoiceInfoSubTable
                    where vendInvoiceInfoSubTable.ParmId == vendInvoiceInfoTableLoc.ParmId
                        && vendInvoiceInfoSubTable.TableRefId == vendInvoiceInfoTableLoc.TableRefId
                        && vendInvoiceInfoSubTable.OrigPurchId != '';

            if (vendInvoiceInfoTableLoc.RecId)
            {
                isMatchStatusValid = false;
            }
        }

        // Match status failed workflow submit validation
        if (vendParameters.editUseInvoiceMatching()
            && vendParameters.PostInvoiceMatchDiscrepancies == InvoiceMatchPostingOption::RequireApproval
            && VendInvoiceLastMatchStatusFailedBeforeWorkflowSubmissionFlight::instance().isEnabled())
        {
            select firstonly RecId from vendInvoiceInfoTableLoc
                where vendInvoiceInfoTableLoc.ParmId == _vendorInvoice.ParmId
                    && (_validateAllInvoicesInSession || (vendInvoiceInfoTableLoc.TableRefId == _vendorInvoice.TableRefId))
                    && vendInvoiceInfoTableLoc.LastMatchVariance == LastMatchVarianceOptions::Warning
                    && vendInvoiceInfoTableLoc.Hold == NoYes::No
                    && vendInvoiceInfoTableLoc.VarianceApproved == NoYes::No
                exists join vendInvoiceInfoSubTable
                    where vendInvoiceInfoSubTable.ParmId == vendInvoiceInfoTableLoc.ParmId
                        && vendInvoiceInfoSubTable.TableRefId == vendInvoiceInfoTableLoc.TableRefId
                        && vendInvoiceInfoSubTable.OrigPurchId != '';

            if (vendInvoiceInfoTableLoc.RecId)
            {
                isMatchStatusValid = false;
            }
        }
        return isMatchStatusValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAllPurchaseOrdersAreConfirmed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that all purchase orders associated with a given invoice are confirmed.
    /// </summary>
    /// <param name = "_vendorInvoice">The vendor invoice.</param>
    /// <returns>True if all associated purchase orders are confirmed; else, false.</returns>
    internal static boolean validateAllPurchaseOrdersAreConfirmed(VendInvoiceInfoTable _vendorInvoice)
    {
        boolean areAllPurchaseOrdersConfirmed = true;

        PurchTable purchTable;
        VendInvoiceInfoSubTable vendInvoiceInfoSubTable;

        select firstonly vendInvoiceInfoSubTable
            where vendInvoiceInfoSubTable.ParmId == _vendorInvoice.ParmId
               && vendInvoiceInfoSubTable.TableRefId == _vendorInvoice.TableRefId
            exists join purchTable
                where vendInvoiceInfoSubTable.OrigPurchId == purchTable.PurchId
                   && purchTable.DocumentState != VersioningDocumentState::Confirmed;

        if (vendInvoiceInfoSubTable)
        {
            areAllPurchaseOrdersConfirmed = false;
        }

        return areAllPurchaseOrdersConfirmed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInvoiceNumberNotUsedByAlreadyPostedInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the invoice number on a given invoice does not already belong to a posted invoice.
    /// </summary>
    /// <param name = "_vendorInvoice">The vendor invoice.</param>
    /// <param name = "_vendor">The vendor invoice's vendor.</param>
    /// <returns>True if no posted invoice exists and the invoice number is free to use; else, false.</returns>
    internal static boolean validateInvoiceNumberNotUsedByAlreadyPostedInvoice(VendInvoiceInfoTable _vendorInvoice, VendTable _vendor)
    {
        boolean isInvoiceNumberFreeForUse = true;

        if (!_vendorInvoice.PoolRecId && !_vendor.checkInvoice(_vendorInvoice.Num, _vendorInvoice.TransDate))
        {
            isInvoiceNumberFreeForUse = false;
        }

        return isInvoiceNumberFreeForUse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInvoiceNumberNotUsedByInRunningWorkflowInvoice</Name>
				<Source><![CDATA[
    internal static boolean validateInvoiceNumberNotUsedByInRunningWorkflowInvoice(VendInvoiceInfoTable _vendorInvoice, VendTable _vendor)
    {
        boolean              isInvoiceNumberFreeForUse = true;
        TransDate            fromDate;
        TransDate            toDate;
        RecId                calendarRecId;
        ReuseVoucher         reuseVoucher;
        VendInvoiceInfoTable vendInvoiceInfoTable;

        if (!_vendorInvoice.Num || !_vendor.AccountNum)
        {
            return true;
        }

        reuseVoucher = VendParameters::find().CheckInvoice;

        switch (reuseVoucher)
        {
            case ReuseVoucher::NoDuplicateInYear :
                calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();

                if (VendParameters::find().UseDocumentDate)
                {
                    fromDate = LedgerFiscalCalendar::findOpeningStartDateByDate(calendarRecId, _vendorInvoice.DocumentDate);
                    toDate = LedgerFiscalCalendar::findClosingPeriodEndDateByDate(calendarRecId, _vendorInvoice.DocumentDate);
                    select firstonly RecId from vendInvoiceInfoTable
                            where vendInvoiceInfoTable.Num == _vendorInvoice.Num
                                && vendInvoiceInfoTable.InvoiceAccount == _vendor.AccountNum
                                && vendInvoiceInfoTable.ParmJobStatus != ParmJobStatus::Executed
                                && (vendInvoiceInfoTable.RequestStatus == VendInvoiceRequestStatus::Approved
                                        || vendInvoiceInfoTable.RequestStatus == VendInvoiceRequestStatus::InReview)
                                && (!calendarRecId ||
                                        (vendInvoiceInfoTable.DocumentDate >= fromDate
                                     && vendInvoiceInfoTable.DocumentDate <= toDate))
                                && vendInvoiceInfoTable.RecId != _vendorInvoice.RecId;
                }
                else
                {
                    fromDate = LedgerFiscalCalendar::findOpeningStartDateByDate(calendarRecId, _vendorInvoice.TransDate);
                    toDate = LedgerFiscalCalendar::findClosingPeriodEndDateByDate(calendarRecId, _vendorInvoice.TransDate);
                    select firstonly RecId from vendInvoiceInfoTable
                            where vendInvoiceInfoTable.Num == _vendorInvoice.Num
                                && vendInvoiceInfoTable.InvoiceAccount == _vendor.AccountNum
                                && vendInvoiceInfoTable.ParmJobStatus != ParmJobStatus::Executed
                                && (vendInvoiceInfoTable.RequestStatus == VendInvoiceRequestStatus::Approved
                                        || vendInvoiceInfoTable.RequestStatus == VendInvoiceRequestStatus::InReview)
                                && (!calendarRecId ||
                                        (vendInvoiceInfoTable.TransDate >= fromDate
                                     && vendInvoiceInfoTable.TransDate <= toDate))
                                && vendInvoiceInfoTable.RecId != _vendorInvoice.RecId;
                }

                if (vendInvoiceInfoTable.RecId)
                {
                    isInvoiceNumberFreeForUse = false;
                }

                break;
            
            case ReuseVoucher::NoDuplicate :
                    select firstonly RecId from vendInvoiceInfoTable
                            where vendInvoiceInfoTable.Num == _vendorInvoice.Num
                                && vendInvoiceInfoTable.InvoiceAccount == _vendor.AccountNum
                                && vendInvoiceInfoTable.ParmJobStatus != ParmJobStatus::Executed
                                && (vendInvoiceInfoTable.RequestStatus == VendInvoiceRequestStatus::Approved
                                        || vendInvoiceInfoTable.RequestStatus == VendInvoiceRequestStatus::InReview)
                                && vendInvoiceInfoTable.RecId != _vendorInvoice.RecId;

                if (vendInvoiceInfoTable.RecId)
                {
                    isInvoiceNumberFreeForUse = false;
                }
                   
                break;

            default:
                break;
        }

        return isInvoiceNumberFreeForUse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInvoiceHasNoUnallocatedChargesBlockingWorkflowSubmit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates charges on a given vendor invoice.
    /// </summary>
    /// <param name = "_vendorInvoice">The vendor invoice.</param>
    /// <returns>True if charges are valid; else, false.</returns>
    internal static boolean validateInvoiceHasNoUnallocatedChargesBlockingWorkflowSubmit(VendInvoiceInfoTable _vendorInvoice)
    {
        boolean isInvoiceFreeOfUnallocatedCharges = true;

        if (VendParameters::find().WorkflowSubmitDisabledWhenUnallocatedChargesExisted == NoYes::Yes
            && VendInvoiceInfoTable::hasMarkupTypeItem(_vendorInvoice))
        {
            isInvoiceFreeOfUnallocatedCharges = false;
        }

        return isInvoiceFreeOfUnallocatedCharges;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInvoiceAccountingDistributions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates accounting distributions on a given vendor invoice.
    /// </summary>
    /// <param name = "_vendorInvoice">The vendor invoice.</param>
    /// <returns>True if acounting distributions are valid; else, false.</returns>
    internal static boolean validateInvoiceAccountingDistributions(VendInvoiceInfoTable _vendorInvoice)
    {
        boolean areAccountingDistributionsValid;

        VendParameters vendParameters = VendParameters::find();

        if ((AccountingDistributionWorkflowSubmissionFeature::isEnabled() && vendParameters.BypassValidationOfAccountingDistributions == NoYes::Yes)
            || _vendorInvoice.validateAccountingDistributions())
        {
            areAccountingDistributionsValid = true;
        }

        return areAccountingDistributionsValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetReservations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates budget reservations against a given vendor invoice.
    /// </summary>
    /// <param name = "_vendorInvoice">The vendor invoice.</param>
    /// <remarks>
    /// This validation does not return a result, but instead throws an exception if budget validation
    /// does not succeed.
    /// </remarks>
    internal static void validateBudgetReservations(VendInvoiceInfoTable _vendorInvoice)
    {
        if (PublicSectorUtils::isBudgetReservationEnabled())
        {
            VendInvoiceInfoTable::checkBudgetReservationBalance_PSN(_vendorInvoice.TableRefId, _vendorInvoice.SourceDocumentHeader);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjectFundingLimits</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates project funding limits on a given vendor invoice.
    /// </summary>
    /// <param name = "_vendorInvoice">The vendor invoice.</param>
    /// <returns>True if project funding limits are respected; else, false.</returns>
    internal static boolean validateProjectFundingLimits(VendInvoiceInfoTable _vendorInvoice)
    {
        boolean isInvoiceWithinProjectFundingLimits = true;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)) &&
                ProjFundingLimitTrackingManager::hasLimitErrorSourceDocument(_vendorInvoice.SourceDocumentHeader))
        {
            isInvoiceWithinProjectFundingLimits = false;
        }

        return isInvoiceWithinProjectFundingLimits;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateImportedAmountsEqualCalculatedAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the ImportedAmount and ImportedSalesTax fields on a given vendor invoice
    /// match the calculated amount and calculated sales tax amount on that invoice.
    /// </summary>
    /// <param name = "_vendorInvoice">The vendor invoice.</param>
    /// <returns>True if the amounts match; else, false.</returns>
    /// <remarks>If the given invoice has neither an imported amount nor an imported sales tax amount,
    /// validation will succeed.</remarks>
    internal static boolean validateImportedAmountsEqualCalculatedAmounts(VendInvoiceInfoTable _vendorInvoice)
    {
        boolean doImportedAmountsMatchCalculatedAmounts = true;

        if (_vendorInvoice.ImportedAmount == 0 && _vendorInvoice.ImportedSalesTax == 0)
        {
            // If the invoice has no imported amounts, validation succeeds
            return doImportedAmountsMatchCalculatedAmounts;
        }

        PurchTotals purchTotals = PurchTotals::newParmTable(_vendorInvoice, PurchUpdate::All, _vendorInvoice.ParmId, '', _vendorInvoice.Ordering);
        purchTotals.calc();

        Integer containerPositionForTotalAmount = PurchTotals::posTotalAmount();
        Integer containerPositionForTaxTotal = PurchTotals::posTaxTotal();

        container calculatedAmounts = purchTotals.displayFields([containerPositionForTotalAmount, containerPositionForTaxTotal]);

        if (_vendorInvoice.ImportedAmount != 0)
        {
            AmountCur calculatedTotalAmount = conPeek(calculatedAmounts, PurchTotals::posTotalAmount());

            doImportedAmountsMatchCalculatedAmounts = _vendorInvoice.ImportedAmount == calculatedTotalAmount;
        }

        if (doImportedAmountsMatchCalculatedAmounts && _vendorInvoice.ImportedSalesTax != 0)
        {
            TaxAmountCur calculatedTaxAmount = conPeek(calculatedAmounts, PurchTotals::posTaxTotal());

            doImportedAmountsMatchCalculatedAmounts = _vendorInvoice.ImportedSalesTax == calculatedTaxAmount;
        }

        return doImportedAmountsMatchCalculatedAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInvoiceQuantityLessThanProductReceiptQuantity</Name>
				<Source><![CDATA[
    internal static boolean validateInvoiceQuantityLessThanProductReceiptQuantity(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        boolean ret = true;

        if (VendParameters::isBlockPostingAndSubmissionToWorkflow())
        {
            VendInvoiceInfoLine vendInvoiceInfoLine;
            VendInvoiceInfoSubLineSumAll vendInvoiceInfoSubLineSumAll;

            while select ReceiveNow from vendInvoiceInfoLine
                where vendInvoiceInfoLine.ParmId == _vendinvoiceInfoTable.ParmId
                    && vendInvoiceInfoLine.TableRefId == _vendinvoiceInfoTable.TableRefId
                join vendInvoiceInfoSubLineSumAll
                where vendInvoiceInfoLine.RecId == vendInvoiceInfoSubLineSumAll.LineRefRecId
                    && vendInvoiceInfoLine.ReceiveNow != vendInvoiceInfoSubLineSumAll.SumOfReceiveNow
            {
                if(abs(vendInvoiceInfoLine.ReceiveNow) < abs(vendInvoiceInfoSubLineSumAll.SumOfReceiveNow))
                {
                    ret = false;
                    break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>