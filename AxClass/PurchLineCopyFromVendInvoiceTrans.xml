<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchLineCopyFromVendInvoiceTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchLineCopysourceVendInvoiceTrans</c> class is responsible for copying from a <c>VendInvoiceTrans</c>.
/// </summary>
[PurchLineCopyFromSourceFactory(tableStr(VendInvoiceTrans))]
class PurchLineCopyFromVendInvoiceTrans extends PurchLineCopyFromSource
{
    #ISOCountryRegionCodes
    VendInvoiceTrans sourceVendInvoiceTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyFromSource</Name>
				<Source><![CDATA[
    protected void copyFromSource()
    {
        purchLine.initFromVendInvoiceTrans(sourceVendInvoiceTrans,
            copyPrecisely,
            !searchPrice,copyQty, 
            tmpFrmVirtualLine.Qty, tmpFrmVirtualLine.PdsCWQty
                                                   );

        if (purchCopying.markAgainstVoucher())
        {
            purchLine.CreditedVendInvoiceTrans = sourceVendInvoiceTrans.RecId;
        }

        if (TaxIntegrationManualAddNegativeLineFlight::instance().isEnabled() && purchCopying is PurchCopying_CreditNote)
        {
            purchLine.OverrideSalesTax = NoYes::Yes;
        }

        if (TaxGSTFeatureChecker_MY::isCountryRegionMY())
        {
            purchCopying.setRefInvoice_MY(purchLine, sourceVendInvoiceTrans.vendInvoiceJour());
        }

        if (BrazilParameters::isEnabled())
        {
            purchCopying.copyFromInvoiceTrans_BR(sourceVendInvoiceTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVendorInvoicePosted</Name>
				<Source><![CDATA[
    private boolean isVendorInvoicePosted(VendInvoiceTrans _vendInvoiceTrans)
    {
        return _vendInvoiceTrans.InventTransId && _vendInvoiceTrans.OrigPurchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyProjectData</Name>
				<Source><![CDATA[
    protected void copyProjectData()
    {
        PurchLine origPurchLine = PurchLine::findInventTransId(sourceVendInvoiceTrans.InventTransId);

        if (purchLine.ProjId)
        {
            InventTrans inventTrans;
            InventTransOrigin inventTransOrigin;
            ProjTable projTable = ProjTable::find(purchLine.ProjId);
             
            select firstonly Qty, InventTransOrigin, ProjId, ProjCategoryId, ActivityNumber from inventTrans
                        order by DateFinancial desc
                        where inventTrans.Qty >= 0
                        exists join inventTransOrigin
                            where inventTransOrigin.RecId         == inventTrans.InventTransOrigin
                                && inventTransOrigin.InventTransId == sourceVendInvoiceTrans.InventTransId;

            if (origPurchLine.isStocked() && (purchLine.ProjId == inventTrans.ProjId))
            {
                purchLine.ProjId = inventTrans.ProjId;
                purchLine.initFromProjTable(projTable);
                purchLine.ProjCategoryId = inventTrans.ProjCategoryId;
                purchLine.ActivityNumber = inventTrans.ActivityNumber;
                        
            }
            else
            {
                purchLine.ProjId = origPurchLine.ProjId;
                purchLine.initFromProjTable(projTable);
                purchLine.ProjCategoryId = origPurchLine.ProjCategoryId;

                if (purchLine.ProjId == origPurchLine.ProjId)
                {
                    purchLine.ActivityNumber = origPurchLine.ActivityNumber;
                }
                else
                {
                    purchLine.ActivityNumber = '';
                }
            }

            if (!purchLine.ProjLinePropertyId)
            {
                purchLine.ProjLinePropertyId = origPurchLine.ProjLinePropertyId;
            }
        }

        if (purchLine.ProjId == origPurchLine.ProjId || !purchLine.ProjId)
        {
            purchLine.ItemRefType        = sourceVendInvoiceTrans.InventRefType;
            purchLine.InventRefId        = sourceVendInvoiceTrans.OrigPurchId;
            purchLine.InventRefTransId   = sourceVendInvoiceTrans.InventTransId;

            if (!BrazilParameters::isEnabled() && this.isVendorInvoicePosted(sourceVendInvoiceTrans))
            {
                boolean shouldResetItemRefType = purchLine.ItemRefType == InventRefType::Sales || !purchLine.ItemRefType;

                if (shouldResetItemRefType)
                {
                    purchLine.ItemRefType = InventRefType::Purch;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAsset</Name>
				<Source><![CDATA[
    protected void copyAsset()
    {
        if (!purchLine.AssetId)
        {
            PurchLine fromPurchLine = sourceVendInvoiceTrans.purchLine();
            purchLine.AssetId     = fromPurchLine.AssetId;
            purchLine.AssetBookId = fromPurchLine.AssetBookId;
            purchLine.AssetTransTypePurch   = fromPurchLine.AssetTransTypePurch;
            purchLine.DepreciationStartDate = AssetBook::getDepreciationStartDate(purchLine.AssetId,purchLine.AssetBookId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveCurrencyCode</Name>
				<Source><![CDATA[
    protected CurrencyCode retrieveCurrencyCode()
    {
        CurrencyCode currencyCode;

        if (purchLine.CurrencyCode != sourceVendInvoiceTrans.CurrencyCode)
        {
            currencyCode = sourceVendInvoiceTrans.CurrencyCode;
        }

        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveSourceQty</Name>
				<Source><![CDATA[
    public Qty retrieveSourceQty()
    {
        return sourceVendInvoiceTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveSourceInventTransId</Name>
				<Source><![CDATA[
    public InventTransId retrieveSourceInventTransId()
    {
        return sourceVendInvoiceTrans.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveSourceDocumentLineRecId</Name>
				<Source><![CDATA[
    public RefRecId retrieveSourceDocumentLineRecId()
    {
        return sourceVendInvoiceTrans.SourceDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCategoryRelatedData</Name>
				<Source><![CDATA[
    protected void copyCategoryRelatedData()
    {
        if (purchLine.isCategoryBased())
        {
            purchLineForeignTradeCategory.initFromVendInvoiceTrans(sourceVendInvoiceTrans);
            copyForeignTradeRecord = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAgreementRelatedData</Name>
				<Source><![CDATA[
    protected void copyAgreementRelatedData()
    {
        //check if the agreement line from the original purchase line can be used
        if (purchTable.MatchingAgreement)
        {
            agreementLine = AgreementLine::findVendInvoiceTrans(sourceVendInvoiceTrans.RecId);

            if (agreementLine.Agreement != purchTable.MatchingAgreement
                && !BrazilParameters::isEnabled())
            {
                agreementLine = null;
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCountryRegionSpecificData</Name>
				<Source><![CDATA[
    protected void copyCountryRegionSpecificData()
    {
        super();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) 
            || SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU])
            || SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            purchCopying.setInventTransIdReturn_W(purchLine, sourceVendInvoiceTrans);
        }

        if (TaxParameters::checkTaxParameters_IN())
        {
            // To deal with non-PO vendInvoiceTrans
            if (purchLine.InventRefId == "")
            {
                purchLine.InventRefId = sourceVendInvoiceTrans.PurchID;
            }
            PurchLine_IN purchLine_IN = purchLine.purchLine_IN();
            purchLine_IN.TaxAsPerOriginalInvoice    = purchCopying.parmTaxAsPerOrginalInvoice_IN();
            purchLine.packPurchLine_IN(purchLine_IN);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveSource</Name>
				<Source><![CDATA[
    public Common retrieveSource()
    {
        return sourceVendInvoiceTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBasedOnSource</Name>
				<Source><![CDATA[
    public void updateBasedOnSource()
    {
        purchCopying.updateInvoiceCreditCopy(purchLine, sourceVendInvoiceTrans);

        if (purchCopying.settleInvoiceTrans())
        {
            purchCopying.markForSettlement(sourceVendInvoiceTrans);
        }

        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            if (purchCopying.parmTaxAsPerOrginalInvoice_IN())
            {
                VendInvoiceJour vendInvoiceJour = sourceVendInvoiceTrans.vendInvoiceJour();
                ITaxDocument taxDocument = TaxBusinessService::getTaxDocumentBySource(vendInvoiceJour.TableId, vendInvoiceJour.RecId);

                if (taxDocument)
                {
                    TaxBusinessService::copyTaxDocumentLine(sourceVendInvoiceTrans, purchLine, taxDocument, classStr(TaxMeasureRate), NoYes::No, purchLine.purchTable());
                }
                else if (FeatureStateProvider::isFeatureEnabled(TaxRemoveDependenciesOnTaxDocumentJSONFlighting::instance()))
                {
                    TaxBusinessService::copyTaxFromTransaction(sourceVendInvoiceTrans, purchLine, classStr(TaxMeasureRate), NoYes::No, purchLine.purchTable());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCountrySpecificData</Name>
				<Source><![CDATA[
    protected void updateCountrySpecificData()
    {
        super();

        if (TaxIntegrationUtils::isTaxInformationEnabled())
        {
            TransTaxInformationHelper::copyTransTaxInformation(sourceVendInvoiceTrans, purchLine);
        }

        if (TaxParameters::isCustomsEnable_IN()
            && copyPrecisely
            && purchLine.PurchQty >= 0
            && TaxParameters::find().EximIncentiveSchemes_IN)
        {
            EximPurchLine_IN::copyEximPurchLine(this.retrieveSource(), purchLine.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    protected void initialize(PurchLine _purchLine, PurchTable _purchTable, TmpFrmVirtual _tmpFrmVirtualLines, PurchCopying _purchCopying)
    {
        super(_purchLine, _purchTable, _tmpFrmVirtualLines, _purchCopying);
        sourceVendInvoiceTrans =  VendInvoiceTrans::findRecId(_tmpFrmVirtualLines.RecordNo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAssetCreditNotePurchLine</Name>
				<Source><![CDATA[
    internal void updateAssetCreditNotePurchLine()
    {
        if (purchLine.AssetId)
        {
            AssetTransVendInvoiceTrans assetTransVendInvoiceTrans;

            update_recordset assetTransVendInvoiceTrans
                setting CreditNotePurchLine = purchLine.RecId
                where assetTransVendInvoiceTrans.VendInvoiceTrans == sourceVendInvoiceTrans.RecId;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>