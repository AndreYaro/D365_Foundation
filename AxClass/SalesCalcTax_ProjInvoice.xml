<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesCalcTax_ProjInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesCalcTax_ProjInvoice extends SalesCalcTax_Proj
{
    ProjInvoiceJour     projInvoiceJour;
    ProjInvoiceEmpl     projInvoiceEmpl;
    ProjInvoiceCost     projInvoiceCost;
    ProjInvoiceItem     projInvoiceItem;
    ProjInvoiceOnAcc    projInvoiceOnAcc;
    ProjInvoiceRevenue  projInvoiceRevenue;
    TransDate           invoiceDate;
    private boolean creditNoteUseOrigInvoiceDateForReportingCurExchRateFlightEnabled = ProjCreditNoteUseOrigInvoiceDateForReportingCurExchRateFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode currencyCode()
    {
        return projInvoiceJour.CurrencyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    public ExchRate exchRate(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return projInvoiceJour.ExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    public ExchrateSecondary exchRateSecondary(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return projInvoiceJour.ExchrateSecondary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursor</Name>
				<Source><![CDATA[
    public void initCursor()
    {
        queryTransact = this.queryBuild();

        queryTransact.next();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursorMarkup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the markup transaction records.
    /// </summary>
    /// <param name="tableId">
    /// The table ID of Transaction record.
    /// </param>
    /// <param name="recId">
    /// The record ID of Transaction record.
    /// </param>
    public void initCursorMarkup(TableId tableId, RecId recId)
    {
        initMarkupTrans = true;

        markupTrans.selectForUpdate(true);

        select nofetch markupTrans
            where markupTrans.TransTableId == tableId   &&
                  markupTrans.TransRecId    == recId    &&
                  !markupTrans.IsDeleted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    public TransDate invoiceDate()
    {
        return projInvoiceJour.InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupAmount</Name>
				<Source><![CDATA[
    public MarkupAmount  markupAmount()
    {
        return markupTrans.CalculatedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupHeaderRecID</Name>
				<Source><![CDATA[
    public RecId markupHeaderRecID()
    {
        return projInvoiceJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupHeaderTableId</Name>
				<Source><![CDATA[
    public TableId markupHeaderTableId()
    {
        return projInvoiceJour.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(Common         _source,
             SalesUpdate    _specQty)
    {
        super(_source,  _specQty);

        if (_source.TableId == tableNum(ProjInvoiceJour))
        {
            projInvoiceJour  = _source;
            projInvoiceId    = projInvoiceJour.ProjInvoiceId;
            invoiceDate      = projInvoiceJour.InvoiceDate;
            salesTable       = ProjProposalJour::find(projInvoiceJour.ProposalId).salesTable();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    public Common nextLine()
    {
        Common      recordProcessed;

        queryTransact.next();

        this.transItemId('');
        this.parmTransTransId('');

        initMarkupTrans     = false;

        if (queryTransact.changed(tableNum(ProjInvoiceEmpl)))
        {
            projInvoiceEmpl = queryTransact.get(tableNum(ProjInvoiceEmpl));
            recordProcessed = projInvoiceEmpl;

            projTrans       = ProjTrans::newProjInvoiceEmpl(projInvoiceEmpl);

            this.transRecId(projInvoiceEmpl.RecId);
            this.transTableId(projInvoiceEmpl.TableId);
            this.transOrigRecId(ProjProposalEmpl::find(projInvoiceEmpl.TransId,projInvoiceJour.ProposalId).RecId);
            this.transOrigTableId(ProjProposalEmpl::find(projInvoiceEmpl.TransId,projInvoiceJour.ProposalId).TableId);
        }
        else if (queryTransact.changed(tableNum(ProjInvoiceCost)))
        {
            projInvoiceCost = queryTransact.get(tableNum(ProjInvoiceCost));
            recordProcessed = projInvoiceCost;

            projTrans       = ProjTrans::newProjInvoiceCost(projInvoiceCost);

            this.transRecId(projInvoiceCost.RecId);
            this.transTableId(projInvoiceCost.TableId);
            this.transOrigRecId(ProjProposalCost::find(projInvoiceCost.TransId,projInvoiceJour.ProposalId).RecId);
            this.transOrigTableId(ProjProposalCost::find(projInvoiceCost.TransId,projInvoiceJour.ProposalId).TableId);
        }
        else if (queryTransact.changed(tableNum(ProjInvoiceItem)))
        {
            projInvoiceItem = queryTransact.get(tableNum(ProjInvoiceItem));
            recordProcessed = projInvoiceItem;

            projTrans       = ProjTrans::newProjInvoiceItem(projInvoiceItem);

            this.transRecId(projInvoiceItem.RecId);
            this.transTableId(projInvoiceItem.TableId);
            switch (projInvoiceItem.ItemType)
            {
                case ProjItemType::Project:
                case ProjItemType::PurchOrder:
                case ProjItemType::VendorInvoice:
                case ProjItemType::InventJournal:
                case ProjItemType::Production:
                case ProjItemType::ProdLine:
                case ProjItemType::BeginningBalance:

                    this.transOrigRecId(ProjProposalItem::find(projInvoiceItem.ProjTransId,projInvoiceJour.ProposalId).RecId);
                    this.transOrigTableId(ProjProposalItem::find(projInvoiceItem.ProjTransId,projInvoiceJour.ProposalId).TableId);
                    break;

                case ProjItemType::SalesOrder:
                    this.transOrigRecId(ProjProposalItem::findInvent(projInvoiceItem.InventTransId,projInvoiceJour.ProposalId).RecId);
                    this.transOrigTableId(ProjProposalItem::findInvent(projInvoiceItem.InventTransId,projInvoiceJour.ProposalId).TableId);

                    salesLine = SalesLine::findInventTransId(projInvoiceItem.InventTransId);

                    if (salesLine)
                    {
                        this.initCursorMarkup(projInvoiceItem.TableId, projInvoiceItem.RecId);
                    }
                    break;
            }
        }
        else if (queryTransact.changed(tableNum(ProjInvoiceRevenue)))
        {
            projInvoiceRevenue = queryTransact.get(tableNum(ProjInvoiceRevenue));
            recordProcessed = projInvoiceRevenue;

            projTrans          = ProjTrans::newProjInvoiceRevenue(projInvoiceRevenue);

            this.transRecId(projInvoiceRevenue.RecId);
            this.transTableId(projInvoiceRevenue.TableId);
            this.transOrigRecId(ProjProposalRevenue::find(projInvoiceRevenue.TransId,projInvoiceJour.ProposalId).RecId);
            this.transOrigTableId(ProjProposalRevenue::find(projInvoiceRevenue.TransId,projInvoiceJour.ProposalId).TableId);
        }
        else if (queryTransact.changed(tableNum(ProjInvoiceOnAcc)))
        {
            projInvoiceOnAcc = queryTransact.get(tableNum(ProjInvoiceOnAcc));
            recordProcessed = projInvoiceOnAcc;

            projTrans        = ProjTrans::newProjInvoiceOnAcc(projInvoiceOnAcc);

            this.transRecId(projInvoiceOnAcc.RecId);
            this.transTableId(projInvoiceOnAcc.TableId);

            this.transOrigRecId(ProjProposalOnAcc::find(projInvoiceOnAcc.TransId,projInvoiceJour.ProposalId).RecId);
            this.transOrigTableId(ProjProposalOnAcc::find(projInvoiceOnAcc.TransId,projInvoiceJour.ProposalId).TableId);
        }
        else
        {
            return null;
        }

        return recordProcessed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    public void post(LedgerVoucher _ledgerVoucher, NoYes _post =   NoYes::Yes)
    {
        // <GIN>
        // </GIN>

        TaxProjInvoice taxProjInvoice = new TaxProjInvoice(
            _post,
            this,
            this.tax().tmpTaxWorkTrans());

        // <GBR>
        if (BrazilParameters::isEnabled() && !this.validateTaxes_BR())
        {
            throw Exception::Error;
        }
        // </GBR>

        if (!TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            taxProjInvoice.updateAndPost(LedgerPostingController::newForLedgerPostingJournal(_ledgerVoucher));
        }

        // <GIN>
        if (TaxWithholdParameters_IN::checkTaxParameters()
            && this.taxWithholdCalculation_IN())
        {
            TaxWithholdPostProj_IN taxWithholdPost = new TaxWithholdPostProj_IN(_post, this, this.taxWithholdCalculation_IN().tmpTaxWithholdWorkTrans());
            taxWithholdPost.updateAndPost(LedgerPostingController::newForLedgerPostingJournal(_ledgerVoucher));
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    public QueryRun queryBuild()
    {
        QueryRun query = new QueryRun(queryStr(ProjInvoiceTax));

        query.query().dataSourceTable(tableNum(ProjInvoiceJour)).rangeField(fieldNum(ProjInvoiceJour, ProjInvoiceId)).value(strFmt('%1',projInvoiceId));
        query.query().dataSourceTable(tableNum(ProjInvoiceJour)).rangeField(fieldNum(ProjInvoiceJour, InvoiceDate)).value(date2StrUsr(invoiceDate, DateFlags::FormatAll));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recID</Name>
				<Source><![CDATA[
    public RecId recID()
    {
        return projInvoiceJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOrigMarkUp</Name>
				<Source><![CDATA[
    protected void setOrigMarkUp()
    {
        this.transOrigRecId(markupTrans.OrigRecId);

        this.transOrigTableId(markupTrans.OrigTableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTax</Name>
				<Source><![CDATA[
    public void  setTax(TaxWriteCode _taxWriteCode, AmountCur _amountCur = 0)
    {
        switch (this.transTableId())
        {
            case(tableNum(ProjInvoiceEmpl)):
                projInvoiceEmpl.TaxWriteCode        = _taxWriteCode;
                projInvoiceEmpl.TaxAmount           = _amountCur;
                projInvoiceEmpl.update();
                break;

            case(tableNum(ProjInvoiceCost)):
                projInvoiceCost.TaxWriteCode        = _taxWriteCode;
                projInvoiceCost.TaxAmount           = _amountCur;
                projInvoiceCost.update();
                break;

            case(tableNum(ProjInvoiceItem)):
                projInvoiceItem.TaxWriteCode        = _taxWriteCode;
                projInvoiceItem.TaxAmount           = _amountCur;
                projInvoiceItem.update();
                break;

            case(tableNum(MarkupTrans)):
                markupTrans.TaxWriteCode            = _taxWriteCode;
                markupTrans.TaxAmount               = _amountCur;
                markupTrans.update();
                break;

            case(tableNum(ProjInvoiceRevenue)):
                projInvoiceRevenue.TaxWriteCode     = _taxWriteCode;
                projInvoiceRevenue.TaxAmount        = _amountCur;
                projInvoiceRevenue.update();
                break;

            case(tableNum(ProjInvoiceOnAcc)):
                projInvoiceOnAcc.TaxWriteCode       = _taxWriteCode;
                projInvoiceOnAcc.TaxAmount          = _amountCur;
                projInvoiceOnAcc.update();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    public TableId  tableId()
    {
        return projInvoiceJour.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transOrigRecId</Name>
				<Source><![CDATA[
    public RecId transOrigRecId(RecId _recId = transOrigRecId)
    {
        transOrigRecId  = _recId;

        return transOrigRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transOrigTableId</Name>
				<Source><![CDATA[
    public TableId transOrigTableId(TableId _tableId = transOrigTableId)
    {
        transOrigTableId  = _tableId;

        return transOrigTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>triangulation</Name>
				<Source><![CDATA[
    public EUROTriangulation triangulation(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return projInvoiceJour.Triangulation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingCurrencyExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reporting exchange rate from fixed exchange rate defined in project contract.
    /// </summary>
    /// <returns>
    /// The reporting exchange rate from fixed exchange rate defined in project contract.
    /// </returns>
    internal ExchRate reportingCurrencyExchangeRate()
    {
        ExchRate exchRateForRepCur;

        if (projInvoiceJour.projInvoiceProjId != '')
        {
            ProjInvoiceCurrency projInvoiceCurrency = ProjInvoiceCurrency::getFixedRateAgreementForReportingCurrency(projInvoiceJour.projInvoiceProjId);

            if (projInvoiceCurrency)
            {
                // Setting the reporting exchange rate from fixed exchange rate defined in contract.
                exchRateForRepCur = ProjInvoiceCurrency::applyReciprocalForFixedExchangeRate(Ledger::defaultExchangeRateType(), projInvoiceJour.CurrencyId,
                    projInvoiceCurrency.CurrencyId, projInvoiceJour.InvoiceDate, projInvoiceCurrency);
            }
            else
            {
                if (creditNoteUseOrigInvoiceDateForReportingCurExchRateFlightEnabled
                    && Ledger::accountingCurrency() != Ledger::reportingCurrency())
                {
                    // if there are no fixed rate agreement then the code should fall back to use the Invoice currency code and reporting currency code from the ledger to calculate
                    // the exchange rates for tax records.
                    TransDate transDate = this.locateTaxCalculationDateByTrans();
                    exchRateForRepCur = this.getReportingCurrencyExchangeRate(Ledger::reportingCurrencyExchangeRateType(), projInvoiceJour.CurrencyId,
                    Ledger::reportingCurrency(), transDate);
                }
            }
        }

        return exchRateForRepCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>locateTaxCalculationDateByTrans</Name>
				<Source><![CDATA[
    private TransDate locateTaxCalculationDateByTrans()
    {
        boolean isCreditNote;
        TransDate origInvoiceDate;
        TransDate taxCalculationDate = this.invoiceDate();

        [isCreditNote, origInvoiceDate] = this.getOriginalInvoiceDateForCreditNote();

        if (isCreditNote && origInvoiceDate)
        {
            taxCalculationDate = origInvoiceDate;
        }
        
        return taxCalculationDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalInvoiceDateForCreditNote</Name>
				<Source><![CDATA[
    private container getOriginalInvoiceDateForCreditNote()
    {
        boolean isMarkedForCreditNote = false;
        TransDate originalInvoiceDate;
        
        if (this.projTrans())
        {
            switch (this.projTrans().transType())
            {
                case ProjTransType::Cost:

                    ProjCostTransSale projCostTransSale;
                    ProjProposalCostDetail projProposalCostDetail;
                    ProjTransPosting projTransPosting;
                    projInvoiceCost projCurrentInvoiceCost = ProjInvoiceCost::findRecId(this.transRecId());

                    select firstonly RecId, AmountCur from projProposalCostDetail
                        where projProposalCostDetail.ProposalRefRecId == this.transOrigRecId()
                        join LineAmount from projCostTransSale
                            where projCostTransSale.RecId == projProposalCostDetail.SaleRefRecId
                                && projCostTransSale.TransId == projCurrentInvoiceCost.TransId
                        join RecId, LedgerTransDate from projTransPosting
                        order by projTransPosting.RecId desc
                            where projTransPosting.TransId == projCostTransSale.TransId
                                && projTransPosting.ProjFundingSource == projCostTransSale.FundingSource;

                    // For credit note Proj Proposal AmountCur will be reversal of the ProjCostTransSale LineAmount which is derived from original invoice. For original invoice the amounts should match.
                    if (projProposalCostDetail && projProposalCostDetail.AmountCur == (projCostTransSale.LineAmount * -1))
                    {
                        if (projTransPosting.LedgerTransDate)
                        {
                            originalInvoiceDate = projTransPosting.LedgerTransDate;
                            isMarkedForCreditNote = true;
                        }
                    }

                    break;
            }
        }
        
        return [isMarkedForCreditNote, originalInvoiceDate];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportingCurrencyExchangeRate</Name>
				<Source><![CDATA[
    private ExchRate getReportingCurrencyExchangeRate(
        ExchangeRateTypeId _exchangeRateTypeId,
        CurrencyCode _fromCurrencyCode,
        CurrencyCode _toCurrencyCode,
        ValidFromDate _fromDate)
    {

        ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::current()), _fromCurrencyCode, _fromDate);
        exchangeRateHelper.parmToCurrency(_toCurrencyCode);
        exchangeRateHelper.parmExchangeRateTypeRecId(_exchangeRateTypeId);
        return exchangeRateHelper.getExchangeRate1();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>