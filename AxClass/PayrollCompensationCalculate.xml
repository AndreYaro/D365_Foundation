<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollCompensationCalculate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class calculates payroll compensation rates based on compensation plans.
/// </summary>
/// <remarks>
/// The <c>HRMCompPayFrequency</c> is not used for payroll calculcations.
/// Rates are rounded using constants in PayrollConstants macro which are
/// defined to match the <c>PayrollEarningRate</c> extended data type definition.
/// Rounding is performed on returned values and only where division occurs.
/// </remarks>
class PayrollCompensationCalculate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcPayRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the worker's pay rate based on the payroll rate basis.
    /// </summary>
    /// <param name="_fixedEmpl">
    /// the compensation plan for which the pay rate is calculated.
    /// </param>
    /// <param name="_rateBasis">
    /// The <c>PayrollRateBasis</c> to which the compensation is converted.
    /// </param>
    /// <param name="_timePeriod">
    /// The <c>PayrollTimePeriod</c> to which the compensation is coverted.  Applies
    /// only when the _rateBasis is set to <c>PayPeriod</c>.
    /// </param>
    /// <param name="_payDate">
    /// Used to calculate the number of days in a year when the _rateBasis is <c>Daily</c>.
    /// </param>
    /// <param name="_endDate">
    /// Used to get payroll normal work hours in a year from the active payrollPositionDetail record at the _endDate.
    /// </param>
    /// <returns>
    /// The worker's pay rate.
    /// </returns>
    /// <remarks>
    /// This method converts the compensation frequency to the payroll pay frequency
    /// and returns the calculated amount.
    /// </remarks>
    public static PayrollEarningRate calcPayRate(HRMCompFixedEmpl _fixedEmpl, PayrollRateBasis _rateBasis, PayrollTimePeriod _timePeriod, TransDate _payDate, TransDate _endDate = _payDate)
    {
        #PayrollConstants
        PayrollEarningRate          payRate;
        PayrollPositionDetails      positionDetails;
        PayrollEarningRate          hourlyRate;
        PayrollEarningQuantity      workHoursPerDay;
        date                        dateEndOfYear;
        int                         daysInYear;
        utcdatetime                 positionDetailEndDateTime;
        PreferredLocale             locale = new Session().preferredLocale();

        // get position details and calculate the position hourly rate and work hours per day for the end of the pay period end date
        positionDetailEndDateTime = datetoendUtcDateTime(_endDate, DateTimeUtil::getCompanyTimeZone());

        select firstonly validTimeState(_endDate) PayrollNormalHours from positionDetails
            where positionDetails.Position == _fixedEmpl.Position;

        switch (_rateBasis)
        {
            case PayrollRateBasis::Annually :
                payRate = _fixedEmpl.payrollAnnualPayRate();
                break;
            case PayrollRateBasis::Hourly :
                if (positionDetails.PayrollNormalHours > 0)
                {
                    payRate = _fixedEmpl.payrollAnnualPayRate()/positionDetails.PayrollNormalHours;
                }
                else
                {
                    warning(strFmt("@Payroll:EarningsWereNotGeneratedForPosition1EnterTheAnnualNormalHour", HcmPosition::find(_fixedEmpl.Position).PositionId));
                }
                break;
            case PayrollRateBasis::Monthly :
                payRate = _fixedEmpl.payrollAnnualPayRate()/#PERIODSMONTHLY;
                break;
            case PayrollRateBasis::PayPeriod :
                switch (_timePeriod)
                {
                    case PayrollTimePeriod::Daily :
                        if (positionDetails.PayrollNormalHours)
                        {
                            hourlyRate = _fixedEmpl.payrollAnnualPayRate()/positionDetails.PayrollNormalHours;
                            dateEndOfYear = DateTimeUtil::getEndOfYearDate(locale, _endDate);
                            daysInYear = dayOfYr(dateEndOfYear);
                            workHoursPerDay = positionDetails.PayrollNormalHours/daysInYear;
                        }
                        else
                        {
                            warning(strFmt("@Payroll:EarningsWereNotGeneratedForPosition1EnterTheAnnualNormalHour", HcmPosition::find(_fixedEmpl.Position).PositionId));
                        }
                        payRate = hourlyRate * workHoursPerDay;
                        break;
                    case PayrollTimePeriod::Weekly :
                        payRate = _fixedEmpl.payrollAnnualPayRate()/#PERIODSWEEKLY;
                        break;
                    case PayrollTimePeriod::Biweekly :
                        payRate = _fixedEmpl.payrollAnnualPayRate()/#PERIODSBIWEEKLY;
                        break;
                    case PayrollTimePeriod::Semimonthly :
                        payRate = _fixedEmpl.payrollAnnualPayRate()/#PERIODSSEMIMONTHLY;
                        break;
                    case PayrollTimePeriod::Monthly :
                        payRate = _fixedEmpl.payrollAnnualPayRate()/#PERIODSMONTHLY;
                        break;
                    case PayrollTimePeriod::Quarterly :
                        payRate = _fixedEmpl.payrollAnnualPayRate()/#PERIODSQUARTERLY;
                        break;
                    case PayrollTimePeriod::Semiannually :
                        payRate = _fixedEmpl.payrollAnnualPayRate()/#PERIODSSEMIANNUALLY;
                        break;
                    case PayrollTimePeriod::Annually :
                        payRate = _fixedEmpl.payrollAnnualPayRate();
                        break;
                }
                break;
            default :
                payRate = _fixedEmpl.PayRate;
                break;
        }
        return decRound(payRate,#RateDecimalPlaces);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRecurringEarnings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates wages for a pay period based on a specific date.  All active plans for the
    /// position and worker combination on the specified date will be included in the calculation.
    /// </summary>
    /// <param name="_position">
    /// The position for which the rate is calculated.
    /// </param>
    /// <param name="_worker">
    /// The worker for which the rate is calcuated.
    /// </param>
    /// <param name="_timePeriod">
    /// The Payroll time period for the calculation.
    /// </param>
    /// <param name="_wageRateDate">
    /// The date used for the calculation.
    /// </param>
    /// <param name="_endDate">
    /// The end date of the pay period for query the <c>PayrollPositionDetails</c> table.
    /// </param>
    /// <returns>
    /// The compensation for the pay period.
    /// </returns>
    /// <remarks>
    /// This method does not verify that the worker is employed in the position for the given date.
    /// </remarks>
    public static PayrollEarningRate calcRecurringEarnings(HcmPositionRecId _position, HcmWorkerRecId _worker, PayrollTimePeriod _timePeriod, TransDate _wageRateDate, TransDate _endDate = _wageRateDate)
    {
        HRMCompFixedEmpl        fixedEmpl;
        HRMCompFixedPlanTable   fixedPlan;
        PayrollEarningRate      compensationAmount;
        int                     validPlanCount;

        while select * from fixedEmpl
            join CurrencyCode from fixedPlan
            where fixedEmpl.Position == _position
                && fixedEmpl.Worker == _worker
                && fixedPlan.PlanId == fixedEmpl.PlanId
                && fixedEmpl.ValidFrom <= _wageRateDate
                && fixedEmpl.ValidTo >= _wageRateDate
                && fixedPlan.ValidFrom <= _wageRateDate
                && fixedPlan.ValidTo >= _wageRateDate
        {
            if (fixedPlan.CurrencyCode == CompanyInfoHelper::standardCurrency()
                && fixedEmpl.CurrencyCode == CompanyInfoHelper::standardCurrency())
            {
                compensationAmount += PayrollCompensationCalculate::calcPayRate(fixedEmpl, PayrollRateBasis::PayPeriod, _timePeriod, _wageRateDate, _endDate);
                ++validPlanCount;
            }
            else
            {
                // compensation plan currency does not match the company currency
                warning(strFmt("@Payroll:WorkerEarningsWereNotCreatedForPosition1TheLegalEntityCurren", HcmPosition::find(_position).PositionId, HcmWorker::find(_worker).PersonnelNumber));
            }
        }

        if (validPlanCount == 0)
        {
            // no valid compensation plans for worker/position
            warning(strFmt("@Payroll:WorkerEarningsBasedOnCompensationPlansWereNotCreatedForPosit", HcmPosition::find(_position).PositionId, HcmWorker::find(_worker).PersonnelNumber));
        }

        return compensationAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dayPlanExpectedWages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the expected wages for a single date in a pay period.
    /// </summary>
    /// <param name="_fixedEmpl">
    /// The compensation record for which the calculation occurs.
    /// </param>
    /// <param name="_payDate">
    /// The date for which to calculate the wage.
    /// </param>
    /// <param name="_endDate">
    /// The end date of the pay period for which to calculate the wage.
    /// </param>
    /// <param name="_endDate">
    /// The end date of the pay period for query the <c>PayrollPositionDetails</c> table.
    /// </param>
    /// <returns>
    /// The daily wage based on the <c>HRMCompFixedEmpl</c> passed to the method.
    /// </returns>
    /// <remarks>
    /// The _payDate parameter is used to retrieve the worker's <c>PayrollPositionDetail</c> record.
    /// </remarks>
    public static PayrollEarningRate dayPlanExpectedWages(HRMCompFixedEmpl  _fixedEmpl, TransDate _payDate, TransDate _endDate = _payDate)
    {
        PayrollEarningRate  compensationAmount;

        if ((_fixedEmpl.ValidFrom <= _payDate && _fixedEmpl.ValidTo >= _payDate)
            && (_fixedEmpl.ValidFrom != _fixedEmpl.ValidTo))
        {
            compensationAmount += PayrollCompensationCalculate::calcPayRate(_fixedEmpl, PayrollRateBasis::PayPeriod, PayrollTimePeriod::Daily, _payDate, _endDate);
        }
        return compensationAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hourlyPayRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the hourly rate for the given Position+Worker+Date.
    /// </summary>
    /// <param name="_position">
    /// The position used to query the <c>HRMCompFixedEmpl</c> table and the <c>PayrollPositionDetails</c> table.
    /// </param>
    /// <param name="_worker">
    /// The worker used to query the <c>HRMCompFixedEmpl</c> table.
    /// </param>
    /// <param name="_payDate">
    /// The date used to query the <c>HRMCompFixedEmpl</c> table.
    /// </param>
    /// <returns>
    /// An hourly wage amount is returned.
    /// </returns>
    public static PayrollEarningRate hourlyPayRate(HcmPositionRecId _position, HcmWorkerRecId _worker, TransDate _payDate, TransDate _endDate = _payDate)
    {
        #PayrollConstants
        PayrollEarningRate      hourlyRate;
        HRMCompFixedEmpl        fixedEmpl;
        HRMCompFixedPlanTable   fixedPlan;
        PayrollPositionDetails  positionDetails;
        int                     validPlanCount;

        select firstonly validTimeState(_endDate) PayrollNormalHours from positionDetails
            where positionDetails.Position == _position;

        if (positionDetails.PayrollNormalHours == 0)
        {
            // PayrollNormalHours must be set to calculate hourly pay rate
            warning(strFmt("@Payroll:EarningsWereNotGeneratedForPosition1EnterTheAnnualNormalHour", HcmPosition::find(_position).PositionId));
        }
        else
        {
            while select PayRate, PayFrequencyId, Position, Worker, CurrencyCode from fixedEmpl
                join CurrencyCode from fixedPlan
                where fixedEmpl.Position == _position
                    && fixedEmpl.Worker == _worker
                    && fixedPlan.PlanId == fixedEmpl.PlanId
                    && fixedEmpl.ValidFrom <= _payDate
                    && fixedEmpl.ValidTo >= _payDate
                    && fixedPlan.ValidFrom <= _payDate
                    && fixedPlan.ValidTo >= _payDate
            {
                if (fixedPlan.CurrencyCode != CompanyInfoHelper::standardCurrency()
                    || fixedEmpl.CurrencyCode != CompanyInfoHelper::standardCurrency())
                {
                    // compensation plan currency does not match the company currency
                    warning(strFmt("@Payroll:WorkerEarningsWereNotCreatedForPosition1TheLegalEntityCurren", HcmPosition::find(_position).PositionId, HcmWorker::find(_worker).PersonnelNumber));
                }
                else
                {
                    hourlyRate += (fixedEmpl.payrollAnnualPayRate() / positionDetails.PayrollNormalHours);
                    ++validPlanCount;
                }
            }

            if (validPlanCount == 0)
            {
                // no valid compensation plans for worker/position
                warning(strFmt("@Payroll:WorkerEarningsBasedOnCompensationPlansWereNotCreatedForPosit", HcmPosition::find(_position).PositionId, HcmWorker::find(_worker).PersonnelNumber));
            }
        }

        return decRound(hourlyRate, #RateDecimalPlaces);
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodExpectedWages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the expected wages for the Position+Worker for the given date range.
    /// </summary>
    /// <param name="_position">
    /// The position used to query <c>HRMCompFixedEmpl</c> and <c>HcmPositionWorkerAssignment</c>.
    /// </param>
    /// <param name="_worker">
    /// The worker used to query <c>HRMCompFixedEmpl</c> and <c>HcmPositionWorkerAssignment</c>.
    /// </param>
    /// <param name="_startDate">
    /// The starting date for the calculation.
    /// </param>
    /// <param name="_endDate">
    /// The ending date inclusive of that day for the calculation.
    /// </param>
    /// <param name="_timePeriod">
    /// The <c>PayrollTimePeriod</c> to which the calculation is converted.
    /// </param>
    /// <returns>
    /// The total amount of wages based on the parameters.
    /// </returns>
    /// <remarks>
    /// Calls other methods in the class for the calculations.
    /// </remarks>
    public static container periodExpectedWages(HcmPositionRecId _position, HcmWorkerRecId _worker, TransDate _startDate, TransDate _endDate, PayrollTimePeriod _timePeriod)
    {
        HRMCompFixedEmpl    fixedEmpl;
        HRMCompFixedPlanTable   fixedPlan;
        HcmPositionWorkerAssignment assignment;
        utcdatetime         fromDateTime, toDateTime;
        TransDate           emplPlanFromDate, emplPlanToDate, planFromDate, planToDate, assignmentFromDate, assignmentToDate;
        TransDate           payDate;
        PayrollEarningRate  compensationAmount;
        int                 validPlanCount, validDaysCount;
        Set                 activePayDate = new Set (Types::Date);
        boolean             compensationPlanCurrencyMatched, payFullPayPeriod;

        fromDateTime = datetobeginUtcDateTime(_startDate, DateTimeUtil::getCompanyTimeZone());
        toDateTime = datetoendUtcDateTime(_endDate, DateTimeUtil::getCompanyTimeZone());

        // fixedEmpl.ValidFromDateTime != fixedEmpl.ValidToDateTime condition is to exclude the same day fixempl edits
        while select validTimeState(fromDateTime, toDateTime) * from fixedEmpl
            join ValidFrom, ValidTo, CurrencyCode from fixedPlan
            join ValidFrom, ValidTo from assignment
            where fixedEmpl.Position == _position
                && fixedEmpl.Worker == _worker
                && fixedPlan.PlanId == fixedEmpl.PlanId
                && fixedEmpl.ValidFrom <= _endDate
                && fixedEmpl.ValidTo >= _startDate
                && fixedEmpl.ValidFrom != fixedEmpl.ValidTo
                && fixedPlan.ValidFrom <= _endDate
                && fixedPlan.ValidTo >= _startDate
                && assignment.Worker == _worker
                && assignment.Position == _position
        {
            compensationPlanCurrencyMatched = true;

            // validate currency code
            if (fixedPlan.CurrencyCode != CompanyInfoHelper::standardCurrency()
                || fixedEmpl.CurrencyCode != CompanyInfoHelper::standardCurrency())
            {
                // compensation plan currency does not match the company currency
                // warn and move to next record
                warning(strFmt("@Payroll:WorkerEarningsWereNotCreatedForPosition1TheLegalEntityCurren", HcmPosition::find(_position).PositionId, HcmWorker::find(_worker).PersonnelNumber));
                validPlanCount++;
                continue;
            }
            // convert dates to timezone they were created in
            emplPlanFromDate = fixedEmpl.ValidFrom;
            emplPlanToDate = fixedEmpl.ValidTo;
            assignmentFromDate = HcmDateTimeUtil::convertToCompanyDate(assignment.ValidFrom);
            assignmentToDate = HcmDateTimeUtil::convertToCompanyDate(assignment.ValidTo);
            planFromDate = fixedPlan.ValidFrom;
            planToDate = fixedPlan.ValidTo;

            // set the emplPlanFromDate to be the greater of the dates from the HRMCompFixedPlanTable, the HRMCompFixedEmpl, or the HcmPositionWorkerAssignment
            if (planFromDate > emplPlanFromDate)
            {
                emplPlanFromDate = planFromDate;
            }
            if (assignmentFromDate > emplPlanFromDate)
            {
                emplPlanFromDate = assignmentFromDate;
            }

            // set the emplPlanToDate be the lesser of the dates from the HRMCompFixedPlanTable, the HRMCompFixedEmpl, or the HcmPositionWorkerAssignment
            if (planToDate < emplPlanToDate)
            {
                emplPlanToDate = planToDate;
            }
            if (assignmentToDate < emplPlanToDate)
            {
                emplPlanToDate = assignmentToDate;
            }

            // see if the calculated dates were active across the entire pay period
            if (emplPlanFromDate <= _startDate &&
                emplPlanToDate >= _endDate)
            {
                // no special processing required
                compensationAmount += PayrollCompensationCalculate::calcPayRate(fixedEmpl, PayrollRateBasis::PayPeriod, _timePeriod, _endDate);
                payFullPayPeriod = NoYes::Yes;
                validPlanCount++;
            }
            else
            {
                payDate = _startDate;

                if (_startDate < emplPlanFromDate)
                {
                    payDate = emplPlanFromDate;
                }

                // calculate pay for each day in the pay period for the calculated dates
                validDaysCount = 0;
                while (payDate >= emplPlanFromDate
                        && payDate <= emplPlanToDate
                        && payDate <= _endDate)
                {
                    compensationAmount += PayrollCompensationCalculate::dayPlanExpectedWages(fixedEmpl, payDate, _endDate);
                    payDate++;
                    validPlanCount++;

                    if (!activePayDate.in(payDate))
                    {
                        activePayDate.add(payDate);
                    }
                }
            }
        }

        if (validPlanCount == 0)
        {
            // no valid compensation plans for worker/position
            warning(strFmt("@Payroll:WorkerEarningsBasedOnCompensationPlansWereNotCreatedForPosit", HcmPosition::find(_position).PositionId, HcmWorker::find(_worker).PersonnelNumber));
        }

        if (payFullPayPeriod == NoYes::Yes)
        {
            validDaysCount = 0;
        }
        else
        {
            validDaysCount = activePayDate.elements();
        }

        return [compensationAmount, validDaysCount];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>