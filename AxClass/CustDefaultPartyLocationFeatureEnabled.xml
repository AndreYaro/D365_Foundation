<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustDefaultPartyLocationFeatureEnabled</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class CustDefaultPartyLocationFeatureEnabled extends SysOperationServiceController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>scheduleTask</Name>
				<Source><![CDATA[
    internal static void scheduleTask()
    {
        SysOperationServiceController controller = new CustDefaultPartyLocationFeatureEnabled(
            classStr(CustDefaultPartyLocationFeatureEnabled),
            methodStr(CustDefaultPartyLocationFeatureEnabled, runTask),
            SysOperationExecutionMode::ScheduledBatch);

        controller.parmShowDialog(false);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return "@AccountsReceivable:CustDefaultPartyFeatureEnabledCaption";
    }

]]></Source>
			</Method>
			<Method>
				<Name>runTask</Name>
				<Source><![CDATA[
    internal void runTask()
    {
        str updateSql = CustDefaultPartyLocationFeatureEnabled::getUpdateSql();

        Statement statement = new Connection().createStatement();
        new SqlStatementExecutePermission(updateSql).assert();

        statement.executeUpdateWithParameters(updateSql, null);
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUpdateSql</Name>
				<Source><![CDATA[
    private static str getUpdateSql()
    {
        DictTable dtCustTable = new DictTable(tableNum(CustTable));
        DictTable dtCustDefaultLocation = new DictTable(tableNum(CustDefaultLocation));
        DictTable dtDirPartyLocationRole = new DictTable(tableNum(DirPartyLocationRole));
        DictTable dtLogisticsLocationRole = new DictTable(tableNum(LogisticsLocationRole));
        DictTable dtCustDefaultPartyLocation = new DictTable(tableNum(CustDefaultPartyLocation));

        System.Text.StringBuilder sqlStringBuilder = new System.Text.StringBuilder();

        // INSERT INTO CUSTDEFAULTPARTYLOCATION (PARTITION, DATAAREAID, CUSTTABLERECID, DEFAULTLOCATIONTYPE, PARTYLOCATION)
        sqlStringBuilder.AppendFormat('INSERT INTO {0} ({1}, {2}, {3}, {4}, {5}) ',
            dtCustDefaultPartyLocation.name(DbBackend::Sql),
            dtCustDefaultPartyLocation.fieldName(fieldNum(CustDefaultPartyLocation, Partition), DbBackend::Sql),
            dtCustDefaultPartyLocation.fieldName(fieldNum(CustDefaultPartyLocation, DataAreaId), DbBackend::Sql),
            dtCustDefaultPartyLocation.fieldName(fieldNum(CustDefaultPartyLocation, CustTableRecId), DbBackend::Sql),
            dtCustDefaultPartyLocation.fieldName(fieldNum(CustDefaultPartyLocation, DefaultLocationType), DbBackend::Sql),
            dtCustDefaultPartyLocation.fieldName(fieldNum(CustDefaultPartyLocation, PartyLocation), DbBackend::Sql));

        // SELECT PARTITION, DATAAREAID, CUSTTABLERECID, TYPE, PARTYLOCATION FROM
        sqlStringBuilder.AppendFormat('SELECT {0}, {1}, {2}, {3}, {4} FROM ',
            dtCustTable.fieldName(fieldNum(CustTable, Partition), DbBackend::Sql),
            dtCustTable.fieldName(fieldNum(CustTable, DataAreaId), DbBackend::Sql),
            dtCustDefaultPartyLocation.fieldName(fieldNum(CustDefaultPartyLocation, CustTableRecId), DbBackend::Sql),
            dtCustDefaultPartyLocation.fieldName(fieldNum(CustDefaultPartyLocation, DefaultLocationType), DbBackend::Sql),
            dtCustDefaultPartyLocation.fieldName(fieldNum(CustDefaultPartyLocation, PartyLocation), DbBackend::Sql));

        // ( SELECT CT.PARTITION, CT.DATAAREAID, CT.RECID AS CUSTTABLERECID, LLR.TYPE AS DEFAULTPARTYTYPE, DPLR.PARTYLOCATION,
        sqlStringBuilder.AppendFormat('( SELECT CT.{0}, CT.{1}, CT.{2} AS {3}, LLR.{4} AS {5}, DPLR.{6}, ',
            dtCustTable.fieldName(fieldNum(CustTable, Partition), DbBackend::Sql),
            dtCustTable.fieldName(fieldNum(CustTable, DataAreaId), DbBackend::Sql),
            dtCustTable.fieldName(fieldNum(CustTable, RecId), DbBackend::Sql),
            dtCustDefaultPartyLocation.fieldName(fieldNum(CustDefaultPartyLocation, CustTableRecId), DbBackend::Sql), // alias for CustTable.RecId
            dtLogisticsLocationRole.fieldName(fieldNum(LogisticsLocationRole, Type), DbBackend::Sql),
            dtCustDefaultPartyLocation.fieldName(fieldNum(CustDefaultPartyLocation, DefaultLocationType), DbBackend::Sql), // alias for LogisticsLocationType.Type
            dtDirPartyLocationRole.fieldName(fieldNum(DirPartyLocationRole, PartyLocation), DbBackend::Sql));

        // ROW_NUMBER() OVER(PARTITION BY CT.PARTITION, CT.DATAAREAID, CT.RECID, LLR.TYPE ORDER BY DPLR.PARTYLOCATION) AS ROWNUM
        sqlStringBuilder.AppendFormat('ROW_NUMBER() OVER(PARTITION BY CT.{0}, CT.{1}, CT.{2}, LLR.{3} ORDER BY DPLR.{4}) AS ROWNUM ',
            dtCustTable.fieldName(fieldNum(CustTable, Partition), DbBackend::Sql),
            dtCustTable.fieldName(fieldNum(CustTable, DataAreaId), DbBackend::Sql),
            dtCustTable.fieldName(fieldNum(CustTable, RecId), DbBackend::Sql),
            dtLogisticsLocationRole.fieldName(fieldNum(LogisticsLocationRole, Type), DbBackend::Sql),
            dtDirPartyLocationRole.fieldName(fieldNum(DirPartyLocationRole, PartyLocation), DbBackend::Sql));

        //    FROM CUSTDEFAULTLOCATION CDL
        sqlStringBuilder.AppendFormat('FROM {0} CDL ',
            dtCustDefaultLocation.name(DbBackend::Sql));

        //    INNER JOIN CUSTTABLE CT ON CDL.PARTITION = CT.PARTITION AND CDL.DATAAREAID = CT.DATAAREAID AND CDL.ACCOUNTNUM = CT.ACCOUNTNUM
        sqlStringBuilder.AppendFormat('INNER JOIN {0} CT ON CDL.{1} = CT.{2} AND CDL.{3} = CT.{4} AND CDL.{5} = CT.{6} ',
            dtCustTable.name(DbBackend::Sql),
            dtCustDefaultLocation.fieldName(fieldNum(CustDefaultLocation, Partition), DbBackend::Sql),
            dtCustTable.fieldName(fieldNum(CustTable, Partition), DbBackend::Sql),
            dtCustDefaultLocation.fieldName(fieldNum(CustDefaultLocation, DataAreaId), DbBackend::Sql),
            dtCustTable.fieldName(fieldNum(CustTable, DataAreaId), DbBackend::Sql),
            dtCustDefaultLocation.fieldName(fieldNum(CustDefaultLocation, AccountNum), DbBackend::Sql),
            dtCustTable.fieldName(fieldNum(CustTable, AccountNum), DbBackend::Sql));

        //    INNER JOIN DIRPARTYLOCATIONROLE DPLR ON CDL.PARTYLOCATIONROLE = DPLR.RECID
        sqlStringBuilder.AppendFormat('INNER JOIN {0} DPLR ON CDL.{1} = DPLR.{2} ',
            dtDirPartyLocationRole.name(DbBackend::Sql),
            dtCustDefaultLocation.fieldName(fieldNum(CustDefaultLocation, PartyLocationRole), DbBackend::Sql),
            dtDirPartyLocationRole.fieldName(fieldNum(DirPartyLocationRole, RecId), DbBackend::Sql));

        //    INNER JOIN LOGISTICSLOCATIONROLE LLR ON DPLR.LOCATIONROLE = LLR.RECID) subSelect
        sqlStringBuilder.AppendFormat('INNER JOIN {0} LLR ON DPLR.{1} = LLR.{2}) subSelect ',
            dtLogisticsLocationRole.name(DbBackend::Sql),
            dtDirPartyLocationRole.fieldName(fieldNum(DirPartyLocationRole, LocationRole), DbBackend::Sql),
            dtLogisticsLocationRole.fieldName(fieldNum(LogisticsLocationRole, RecId), DbBackend::Sql));

        //    WHERE ROWNUM = 1
        sqlStringBuilder.Append('WHERE ROWNUM = 1 ');

        // AND NOT EXISTS (SELECT 1 FROM CUSTDEFAULTPARTYLOCATION CDL2 WHERE CDL2.PARTITION = subSelect.PARTITION
        sqlStringBuilder.AppendFormat('AND NOT EXISTS (SELECT 1 FROM {0} CDL2 WHERE CDL2.{1} = subSelect.{1} ',
            dtCustDefaultPartyLocation.name(DbBackend::Sql),
            dtCustDefaultPartyLocation.fieldName(fieldNum(CustDefaultPartyLocation, Partition), DbBackend::Sql));

        // AND CDL2.DATAAREAID = subSelect.DATAAREAID
        sqlStringBuilder.AppendFormat('AND CDL2.{0} = subSelect.{0} ',
            dtCustDefaultPartyLocation.fieldName(fieldNum(CustDefaultPartyLocation, DataAreaId), DbBackend::Sql));
        
        // AND CDL2.CUSTTABLERECID = subSelect.CUSTTABLERECID
        sqlStringBuilder.AppendFormat('AND CDL2.{0} = subSelect.{0} ',
            dtCustDefaultPartyLocation.fieldName(fieldNum(CustDefaultPartyLocation, CustTableRecId), DbBackend::Sql));
        
        // AND CDL2.DEFAULTLOCATIONTYPE = subSelect.DEFAULTLOCATIONTYPE)
        sqlStringBuilder.AppendFormat('AND CDL2.{0} = subSelect.{0} ) ',
            dtCustDefaultPartyLocation.fieldName(fieldNum(CustDefaultPartyLocation, DefaultLocationType), DbBackend::Sql));

        return sqlStringBuilder.ToString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>