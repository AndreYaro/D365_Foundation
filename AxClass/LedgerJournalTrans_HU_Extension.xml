<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTrans_HU_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Extension methods for the <c>LedgerJournalTrans</c> class.
/// </summary>
public static class LedgerJournalTrans_HU_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findRCashDocID_HU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find a journal line by RCash document ID
    /// </summary>
    /// <param name = "_docId">The RCash document Id.</param>
    /// <returns>The journal line.</returns>
    public static LedgerJournalTrans findRCashDocID_HU(RCashDocId _docId)
    {
        LedgerJournalTrans          ledgerJournalTrans;
        LedgerJournalTrans_RCash    ledgerJournalTransRCash;

        if (_docId)
        {
            select firstonly ledgerJournalTrans
            exists join ledgerJournalTransRCash
                where ledgerJournalTransRCash.CashDocId == _docId &&
                      ledgerJournalTransRCash.RefRecId  == ledgerJournalTrans.RecId;
        }

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAverageLinesExchRate_HU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the exchange rate on the journal line using average method.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    public static void calcAverageLinesExchRate_HU(ledgerJournalTrans _ledgerJournalTrans)
    {
        RCashBalanceCur cashBalanceCur;

        if (_ledgerJournalTrans.AmountCurCredit > 0)
        {
            cashBalanceCur  = new RCashBalanceCur(_ledgerJournalTrans.TransDate);
            cashBalanceCur.calc(_ledgerJournalTrans.parmAccount(), _ledgerJournalTrans.CurrencyCode);

            if (cashBalanceCur.amountCur())
            {
                ttsbegin;

                _ledgerJournalTrans.ExchRate   = cashBalanceCur.amountMST() * 100 / cashBalanceCur.amountCur();
                _ledgerJournalTrans.doUpdate();

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcFIFOLineExchRate_HU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the exchange rate for the journal line using FIFO.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    public static void calcFIFOLineExchRate_HU(LedgerJournalTrans _ledgerJournalTrans)
    {
        RCashTrans rCashTransIn;
        AmountCur  outGoing, inComing, tempComing;
        AmountCur  transMSTAmount, transAmount, rCashTransInExchRate;

        if (_ledgerJournalTrans.AmountCurDebit < 0.0)
        {
            outGoing = abs(_ledgerJournalTrans.AmountCurDebit);
        }
        else
        {
            outGoing = _ledgerJournalTrans.AmountCurCredit;
        }

        // NOTE: RCashTransIn.SettleAmountCur_PL is a HU + PL field

        while select forupdate rCashTransIn
            order by TransDate asc, Voucher asc
            where rCashTransIn.AccountNum   == _ledgerJournalTrans.parmAccount() &&
                rCashTransIn.CurrencyCode == _ledgerJournalTrans.CurrencyCode &&
                rCashTransIn.Posted &&
                rCashTransIn.AmountCur > 0.0 &&
                rCashTransIn.AmountCur != rCashTransIn.SettleAmountCur_PL
        {
            inComing                = rCashTransIn.AmountCur;
            rCashTransInExchRate    = LedgerJournalTrans_HU_Extension::findRCashDocID_HU( rCashTransIn.DocId).ExchRate;
            tempComing  = inComing - rCashTransIn.SettleAmountCur_PL;

            if (outGoing > tempComing)
            {
                outGoing = outGoing - inComing + rCashTransIn.SettleAmountCur_PL;
                rCashTransIn.SettleAmountCur_PL = inComing;
                transAmount     += tempComing;
                transMSTAmount  += tempComing * rCashTransInExchRate;
                rCashTransIn.doUpdate();
            }
            else
            {
                rCashTransIn.SettleAmountCur_PL = outGoing + rCashTransIn.SettleAmountCur_PL;
                transAmount     += outGoing;
                transMSTAmount  += outGoing * rCashTransInExchRate;
                rCashTransIn.doUpdate();
                outGoing = outGoing - inComing;
                break;
            }
        }

        if (outGoing > 0 && (outGoing < _ledgerJournalTrans.AmountCurCredit))
        {
            _ledgerJournalTrans.AmountCurCredit = _ledgerJournalTrans.AmountCurCredit - outGoing;
            _ledgerJournalTrans.doUpdate();
        }

        if (transAmount != 0.0)
        {
            _ledgerJournalTrans.ExchRate = transMSTAmount / transAmount;
            _ledgerJournalTrans.doUpdate();
        }
        transAmount     = 0.0;
        transMSTAmount  = 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rollbackFIFOLineExchRate_HU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rolls back the line exchange rates.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    public static void rollbackFIFOLineExchRate_HU(LedgerJournalTrans _ledgerJournalTrans)
    {
        RCashTrans              rollbackCashTransIn;
        LedgerJournalTrans      origTrans, ledgerJournalTransOut;
        AmountCur               rollbackGoings;
        LedgerJournalTable      ledgerJournalTable;

        origTrans = _ledgerJournalTrans.orig();

        while select ledgerJournalTransOut
            where ledgerJournalTransOut.LedgerDimension  == origTrans.LedgerDimension   &&
                  ledgerJournalTransOut.CurrencyCode     == origTrans.CurrencyCode &&
                  (ledgerJournalTransOut.AmountCurCredit >  0.0 ||
                   ledgerJournalTransOut.AmountCurDebit  < 0.0)                    &&
                  ledgerJournalTransOut.AccountType      == LedgerJournalACType::RCash
        notexists join ledgerJournalTable
            where ledgerJournalTable.JournalNum == ledgerJournalTransOut.JournalNum &&
                  ledgerJournalTable.Posted
        {
            rollbackGoings += ledgerJournalTransOut.AmountCurCredit + abs(ledgerJournalTransOut.AmountCurDebit);
        }

        while select forupdate rollbackCashTransIn
            order by TransDate desc, Voucher desc
            where rollbackCashTransIn.AccountNum == origTrans.parmAccount() &&
                  rollbackCashTransIn.CurrencyCode == origTrans.CurrencyCode &&
                  rollbackCashTransIn.Posted                                 &&
                  rollbackCashTransIn.AmountCur    >  0.0                    &&
                  rollbackCashTransIn.SettleAmountCur_PL
        {
            rollbackGoings = rollbackGoings - rollbackCashTransIn.SettleAmountCur_PL;
            if (rollbackGoings > 0.0)
            {
                rollbackCashTransIn.SettleAmountCur_PL = 0.0;
                rollbackCashTransIn.doUpdate();
            }

            else
            {
                rollbackCashTransIn.SettleAmountCur_PL = abs(rollbackGoings);
                rollbackCashTransIn.doUpdate();
                break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFIFOLineExchRate_HU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the line exchange rates.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    public static void updateFIFOLineExchRate_HU(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTrans ledgerJournalTransOut;
        LedgerJournalTable ledgerJournalTable;

        while select forupdate ledgerJournalTransOut
        order by ledgerJournalTransOut.TransDate    asc,
                 ledgerJournalTransOut.Voucher      asc
        where   ledgerJournalTransOut.LedgerDimension      == _ledgerJournalTrans.LedgerDimension    &&
                (ledgerJournalTransOut.AmountCurCredit > 0.0                ||
                 ledgerJournalTransOut.AmountCurDebit < 0.0)                &&
                ledgerJournalTransOut.CurrencyCode    == _ledgerJournalTrans.CurrencyCode  &&
                ledgerJournalTransOut.AccountType     == LedgerJournalACType::RCash
        notexists join ledgerJournalTable
            where ledgerJournalTable.JournalNum == ledgerJournalTransOut.JournalNum &&
                  ledgerJournalTable.Posted
        {
            ledgerJournalTransOut.calcFIFOLineExchRate_HU();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>