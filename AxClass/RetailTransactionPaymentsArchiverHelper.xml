<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionPaymentsArchiverHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;
using Microsoft.Dynamics.Retail.PaymentSDK.Portable;

/// <summary>
/// The <c>RetailTransactionPaymentsArchiverHelper</c> class contains a few helper methods for archiving credit card transaction data.
/// </summary>
internal final class RetailTransactionPaymentsArchiverHelper
{
    internal RetailTransactionPaymentArchiveTaskProcessor retailTransactionPaymentArchiveTaskProcessor;
    private TransDate transactionsOlderThanDate;
    private RecId startRecId;
    private RecId endRecId;
    private NoYes isDeleteOnlyPaymentBlob;
    private NoYes isCompressNewPaymentBlob;
    private FeatureEnableDate featureEnabledDate = RetailTransactionPaymentsArchiverHelper::getFeatureEnabledDate();
    private CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static RetailTransactionPaymentsArchiverHelper construct()
    {
        return new RetailTransactionPaymentsArchiverHelper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaskProcessor</Name>
				<Source><![CDATA[
    internal static RetailTransactionPaymentsArchiverHelper initFromTaskProcessor(RetailTransactionPaymentArchiveTaskProcessor _retailTransactionPaymentArchiveTaskProcessor)
    {
        RetailTransactionPaymentsArchiverHelper retailTransactionPaymentsArchiverHelper = RetailTransactionPaymentsArchiverHelper::construct();
        retailTransactionPaymentsArchiverHelper.retailTransactionPaymentArchiveTaskProcessor = _retailTransactionPaymentArchiveTaskProcessor;
        retailTransactionPaymentsArchiverHelper.transactionsOlderThanDate = _retailTransactionPaymentArchiveTaskProcessor.parmTransactionsOlderThanDate();
        retailTransactionPaymentsArchiverHelper.startRecId = _retailTransactionPaymentArchiveTaskProcessor.parmStartRecId();
        retailTransactionPaymentsArchiverHelper.endRecId = _retailTransactionPaymentArchiveTaskProcessor.parmEndRecId();
        retailTransactionPaymentsArchiverHelper.isDeleteOnlyPaymentBlob = _retailTransactionPaymentArchiveTaskProcessor.parmIsDeleteOnlyPaymentBlob();
        retailTransactionPaymentsArchiverHelper.isCompressNewPaymentBlob = _retailTransactionPaymentArchiveTaskProcessor.parmIsCompressNewPaymentBlob();

        return retailTransactionPaymentsArchiverHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCompressTokensFeatureEnabledForMoreThanAWeek</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the Compress payment tokens feature was enabled more than a week ago.
    /// </summary>
    /// <returns>True if the feature was enabled more than a week ago; otherwise, false.</returns>
    internal static boolean isCompressTokensFeatureEnabledForMoreThanAWeek()
    {
        boolean isFeatureEnabledForMoreThanAWeek;
        utcdatetime featureEnabledDate = DateTimeUtil::newDateTime(RetailTransactionPaymentsArchiverHelper::getFeatureEnabledDate(), 0);

        if (featureEnabledDate != utcDateTimeNull())
        {
            utcdatetime aWeekAgo = DateTimeUtil::addDays(DateTimeUtil::utcNow(), -7);

            // If the feature was enabled more than a week ago i.e., 'featureEnabledDate' is earlier than 'aWeekAgo', then the difference will be negative.
            isFeatureEnabledForMoreThanAWeek = DateTimeUtil::getDifference(featureEnabledDate, aWeekAgo) < 0;
        }

        return isFeatureEnabledForMoreThanAWeek;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFeatureEnabledDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the date when the Compress payment tokens feature was enabled.
    /// </summary>
    /// <param name = "_featureName">The compress payments token feature name. Optional.</param>
    /// <returns>The enabled date.</returns>
    internal static FeatureEnableDate getFeatureEnabledDate(FeatureName _featureName = FeatureStateProvider::featureName(RetailCompressPaymentTokensFeature::instance()))
    {
        FeatureEnableDate featureEnableDate = dateNull();
        FeatureManagementMetadata featureManagementMetadata;
        FeatureManagementState featureManagementState;

        select firstonly featureManagementMetadata
            join RecId from featureManagementState
            where featureManagementMetadata.FeatureState == featureManagementState.RecId
                && featureManagementState.Name == _featureName
                && featureManagementState.IsEnabled;

        return featureManagementMetadata.EnableDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPaymentBlobsArchival</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the archival of payment blobs.
    /// A row-by-row operation that uploads the payment blob field contents to Azure storage and empties the blob fields in the table.
    /// </summary>
    internal void runPaymentBlobsArchival()
    {
        boolean isArchiveComplete = false;
        RecIdCount archivedTransactionCount = 0, successCount = 0, failureCount = 0;
        RefRecId archiveBatchJobId = retailTransactionPaymentArchiveTaskProcessor.parmCurrentBatch().BatchJobId;
        CommerceHQEventSource eventSourceLocal = CommerceHQEventSource::Log;
        Microsoft.Dynamics.Ax.Xpp.ErrorException errorException;

        while (!isArchiveComplete && RetailTransactionPaymentsArchiverHelper::isBatchExecuting(retailTransactionPaymentArchiveTaskProcessor))
        {
            isArchiveComplete = true;
            QueryRun queryRun = new QueryRun(this.getPaymentTransactionsQuery());

            while (queryRun.next())
            {
                isArchiveComplete = false;
                RetailTransactionPaymentTrans retailTransactionPaymentTrans = queryRun.get(tableNum(RetailTransactionPaymentTrans));
                archivedTransactionCount++;

                try
                {
                    List retailArchiveBlobList = RetailTransactionPaymentsArchiverHelper::prepareArchiveList(retailTransactionPaymentTrans);

                    if (!retailArchiveBlobList.empty())
                    {
                        // Upload the payment blobs.
                        RetailArchiver::performArchive(retailArchiveBlobList, retailTransactionPaymentTrans);
                    }
                    else
                    {
                        // No payment blobs were found. Likely the blobs were already archived and the flag was not set.
                        eventSourceLocal.EventWritePaymentsArchiverFailure(retailTransactionPaymentTrans.RecId, archiveBatchJobId, "@Retail:RetailArchiveBlobListNoElementsFound", funcName());
                    }

                    RetailTransactionPaymentTrans retailTransactionPaymentTransForUpdate;
                    retailTransactionPaymentTransForUpdate.skipDatabaseLog(true);
                    retailTransactionPaymentTransForUpdate.skipDataMethods(true);
                    retailTransactionPaymentTransForUpdate.skipEvents(true);

                    // Update the payment blob fields with the empty or compressed string.
                    ttsbegin;
                    update_recordset retailTransactionPaymentTransForUpdate
                        setting IsPaymentDataArchived = NoYes::Yes,
                            IsPaymentDataCompressed = NoYes::No,
                            PaymentAuthorization = '',
                            PaymentCaptureToken = '',
                            PaymentCardToken = '',
                            SigCapData = ''
                        where retailTransactionPaymentTransForUpdate.RecId == retailTransactionPaymentTrans.RecId;
                    ttscommit;

                    successCount++;
                }
                catch (errorException)
                {
                    if (RetailTransactionPaymentsArchiverHelper::isPaymentArchiverExceptionRetryable(retailTransactionPaymentTrans.RecId, archiveBatchJobId, errorException.ToString(), funcName()))
                    {
                        retry;
                    }
                    else
                    {
                        failureCount++;
                    }
                }
                catch
                {
                    if (RetailTransactionPaymentsArchiverHelper::isPaymentArchiverExceptionRetryable(retailTransactionPaymentTrans.RecId, archiveBatchJobId, '', funcName()))
                    {
                        retry;
                    }
                    else
                    {
                        failureCount++;
                    }
                }
            }

            if (!isArchiveComplete)
            {
                eventSourceLocal.EventWritePaymentsArchivalInProgress(transactionsOlderThanDate, archivedTransactionCount, successCount, failureCount, archiveBatchJobId, funcName());
            }
        }

        eventSourceLocal.EventWritePaymentsArchivalCompleted(transactionsOlderThanDate, archivedTransactionCount, successCount, failureCount, archiveBatchJobId, funcName(), startRecId, endRecId);
        info(strFmt("@Retail:RetailPaymentArchiveTransactionsCompleted", archivedTransactionCount, successCount, failureCount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>runDeleteOnlyPaymentBlobs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the deletion of payment blobs.
    /// A set-based operation that empties the blob fields in the table.
    /// </summary>
    internal void runDeleteOnlyPaymentBlobs()
    {
        // Confirm that the archival option is delete without upload.
        if (isDeleteOnlyPaymentBlob == NoYes::No)
        {
            return;
        }

        RetailTransactionPaymentTrans retailTransactionPaymentTrans;

        select count(RecId) from retailTransactionPaymentTrans
            where retailTransactionPaymentTrans.RecId >= this.startRecId
                && retailTransactionPaymentTrans.RecId <= this.endRecId
                && retailTransactionPaymentTrans.IsPaymentDataArchived == NoYes::No
                && retailTransactionPaymentTrans.TransDate < this.transactionsOlderThanDate;

        // Check if there are any transactions available for archival.
        if (retailTransactionPaymentTrans.RecId == 0)
        {
            return;
        }

        RefRecId archiveBatchJobId = retailTransactionPaymentArchiveTaskProcessor.parmCurrentBatch().BatchJobId;
        RecIdCount archivedTransactionCount = retailTransactionPaymentTrans.RecId, successCount = 0, failureCount = 0;
        boolean isDeletionCompleted = false;
        CommerceHQEventSource eventSourceLocal = CommerceHQEventSource::Log;
        Microsoft.Dynamics.Ax.Xpp.ErrorException errorException;

        while (!isDeletionCompleted && RetailTransactionPaymentsArchiverHelper::isBatchExecuting(retailTransactionPaymentArchiveTaskProcessor))
        {
            RetailTransactionPaymentTrans retailTransactionPaymentTransForSelection;
            RecId maxRecId;
            RetailTmpRecId paymentTransRecIdsToDelete;

            boolean isArchiveWithSmallChunksFlightEnabled = RetailPaymentsArchivePaymentTransWithSmallChunksFlight::instance().isEnabled();

            if (isArchiveWithSmallChunksFlightEnabled)
            {
                insert_recordset paymentTransRecIdsToDelete(ReferenceRecId)
                select firstonly1000 RecId from retailTransactionPaymentTransForSelection
                    where retailTransactionPaymentTransForSelection.RecId >= this.startRecId
                        && retailTransactionPaymentTransForSelection.RecId <= this.endRecId
                        && retailTransactionPaymentTransForSelection.IsPaymentDataArchived == NoYes::No
                        && retailTransactionPaymentTransForSelection.TransDate < this.transactionsOlderThanDate;
            }
            else
            {
                select firstonly1000 maxof(RecId) from retailTransactionPaymentTransForSelection
                    where retailTransactionPaymentTransForSelection.RecId >= this.startRecId
                        && retailTransactionPaymentTransForSelection.RecId <= this.endRecId
                        && retailTransactionPaymentTransForSelection.IsPaymentDataArchived == NoYes::No
                        && retailTransactionPaymentTransForSelection.TransDate < this.transactionsOlderThanDate;

                maxRecId = retailTransactionPaymentTransForSelection.RecId;
            }

            // Check if there are more transactions to process.
            if ((isArchiveWithSmallChunksFlightEnabled && paymentTransRecIdsToDelete.RowCount() != 0) ||
                (!isArchiveWithSmallChunksFlightEnabled && maxRecId != 0))
            {
                RetailTransactionPaymentTrans retailTransactionPaymentTransForUpdate;
                retailTransactionPaymentTransForUpdate.skipDatabaseLog(true);
                retailTransactionPaymentTransForUpdate.skipDataMethods(true);
                retailTransactionPaymentTransForUpdate.skipEvents(true);

                try
                {
                    // Empty the payment blob fields for the selected transaction.
                    ttsbegin;

                    if (isArchiveWithSmallChunksFlightEnabled)
                    {
                        update_recordset retailTransactionPaymentTransForUpdate
                            setting IsPaymentDataArchived = NoYes::Yes,
                                IsPaymentDataCompressed = NoYes::No,
                                PaymentAuthorization = '',
                                PaymentCaptureToken = '',
                                PaymentCardToken = '',
                                SigCapData = ''
                            exists join paymentTransRecIdsToDelete
                            where paymentTransRecIdsToDelete.ReferenceRecId == retailTransactionPaymentTransForUpdate.RecId;
                    }
                    else
                    {
                        update_recordset retailTransactionPaymentTransForUpdate
                            setting IsPaymentDataArchived = NoYes::Yes,
                                IsPaymentDataCompressed = NoYes::No,
                                PaymentAuthorization = '',
                                PaymentCaptureToken = '',
                                PaymentCardToken = '',
                                SigCapData = ''
                            where retailTransactionPaymentTransForUpdate.RecId >= this.startRecId
                                && retailTransactionPaymentTransForUpdate.RecId <= maxRecId
                                && retailTransactionPaymentTransForUpdate.IsPaymentDataArchived == NoYes::No
                                && retailTransactionPaymentTrans.TransDate < this.transactionsOlderThanDate;
                    }

                    ttscommit;

                    successCount += retailTransactionPaymentTransForUpdate.RowCount();
                }
                catch (errorException)
                {
                    if (RetailTransactionPaymentsArchiverHelper::isPaymentArchiverExceptionRetryable(retailTransactionPaymentTransForUpdate.RecId, archiveBatchJobId, errorException.ToString(), funcName()))
                    {
                        retry;
                    }
                    else
                    {
                        failureCount++;
                    }
                }
                catch
                {
                    if (RetailTransactionPaymentsArchiverHelper::isPaymentArchiverExceptionRetryable(retailTransactionPaymentTransForUpdate.RecId, archiveBatchJobId, '', funcName()))
                    {
                        retry;
                    }
                    else
                    {
                        failureCount++;
                    }
                }
            }
            else
            {
                isDeletionCompleted = true;
                break;
            }

            paymentTransRecIdsToDelete = null;

            eventSourceLocal.EventWritePaymentsArchivalInProgress(transactionsOlderThanDate, archivedTransactionCount, successCount, failureCount, archiveBatchJobId, funcName());
        }

        eventSourceLocal.EventWritePaymentsArchivalCompleted(transactionsOlderThanDate, archivedTransactionCount, successCount, failureCount, archiveBatchJobId, funcName(), startRecId, endRecId);
        info(strFmt("@Retail:RetailPaymentArchiveTransactionsCompleted", archivedTransactionCount, successCount, failureCount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPaymentBlobsCompression</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the compression of payment blobs.
    /// A row-by-row operation that performs an in-place compression of the payment blobs.
    /// </summary>
    internal void runPaymentBlobsCompression()
    {
        if (isCompressNewPaymentBlob == NoYes::No)
        {
            return;
        }

        boolean isCompressionComplete = false;
        RecIdCount archivedTransactionCount = 0, successCount = 0, failureCount = 0;
        RefRecId archiveBatchJobId = retailTransactionPaymentArchiveTaskProcessor.parmCurrentBatch().BatchJobId;
        CommerceHQEventSource eventSourceLocal = CommerceHQEventSource::Log;
        Microsoft.Dynamics.Ax.Xpp.ErrorException errorException;

        while (!isCompressionComplete && RetailTransactionPaymentsArchiverHelper::isBatchExecuting(retailTransactionPaymentArchiveTaskProcessor))
        {
            isCompressionComplete = true;
            QueryRun queryRun = new QueryRun(this.getPaymentTransactionsForCompressionQuery());

            while (queryRun.next())
            {
                isCompressionComplete = false;
                str paymentAuthorization = '', paymentCaptureToken = '', paymentCardToken = '';
                RetailTransactionPaymentTrans retailTransactionPaymentTrans = queryRun.get(tableNum(RetailTransactionPaymentTrans));
                archivedTransactionCount++;

                try
                {
                    // Compress the payment data in situ.
                    paymentAuthorization = RetailTransactionPaymentsArchiverHelper::compressXml(retailTransactionPaymentTrans.PaymentAuthorization);
                    paymentCaptureToken = RetailTransactionPaymentsArchiverHelper::compressXml(retailTransactionPaymentTrans.PaymentCaptureToken);
                    paymentCardToken = RetailTransactionPaymentsArchiverHelper::compressXml(retailTransactionPaymentTrans.PaymentCardToken);

                    RetailTransactionPaymentTrans retailTransactionPaymentTransForUpdate;
                    retailTransactionPaymentTransForUpdate.skipDatabaseLog(true);
                    retailTransactionPaymentTransForUpdate.skipDataMethods(true);
                    retailTransactionPaymentTransForUpdate.skipEvents(true);

                    // Update the payment blob fields with the empty or compressed string.
                    ttsbegin;
                    update_recordset retailTransactionPaymentTransForUpdate
                        setting IsPaymentDataArchived = NoYes::No,
                            IsPaymentDataCompressed = NoYes::Yes,
                            PaymentAuthorization = paymentAuthorization,
                            PaymentCaptureToken = paymentCaptureToken,
                            PaymentCardToken = paymentCardToken
                        where retailTransactionPaymentTransForUpdate.RecId == retailTransactionPaymentTrans.RecId;
                    ttscommit;

                    successCount++;
                }
                catch (errorException)
                {
                    if (RetailTransactionPaymentsArchiverHelper::isPaymentArchiverExceptionRetryable(retailTransactionPaymentTrans.RecId, archiveBatchJobId, errorException.ToString(), funcName()))
                    {
                        retry;
                    }
                    else
                    {
                        failureCount++;
                    }
                }
                catch
                {
                    if (RetailTransactionPaymentsArchiverHelper::isPaymentArchiverExceptionRetryable(retailTransactionPaymentTrans.RecId, archiveBatchJobId, '', funcName()))
                    {
                        retry;
                    }
                    else
                    {
                        failureCount++;
                    }
                }
            }

            if (!isCompressionComplete)
            {
                eventSourceLocal.EventWritePaymentsArchivalInProgress(transactionsOlderThanDate, archivedTransactionCount, successCount, failureCount, archiveBatchJobId, funcName());
            }
        }

        eventSourceLocal.EventWritePaymentsArchivalCompleted(transactionsOlderThanDate, archivedTransactionCount, successCount, failureCount, archiveBatchJobId, funcName(), startRecId, endRecId);
        info(strFmt("@Retail:RetailPaymentArchiveTransactionsCompleted", archivedTransactionCount, successCount, failureCount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentTransactionsQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for transactions that are available for archival.
    /// Only the first 1000 records.
    /// </summary>
    /// <returns>A query for transactions available for archival.</returns>
    internal Query getPaymentTransactionsQuery()
    {
        Query query = new Query();

        query.firstOnly1000(true);

        QueryBuildDataSource qdbs = query.addDataSource(tableNum(RetailTransactionPaymentTrans));
        qdbs.update(true);

        qdbs.addRange(fieldNum(RetailTransactionPaymentTrans, RecId)).value(queryRange(this.startRecId, this.endRecId));

        // Transactions older than the specified date.
        qdbs.addRange(fieldNum(RetailTransactionPaymentTrans, TransDate)).value(queryRange(dateNull(), this.transactionsOlderThanDate - 1));

        // Transactions where the payment blobs have not been archived.
        qdbs.addRange(fieldNum(RetailTransactionPaymentTrans, IsPaymentDataArchived)).value(queryValue(NoYes::No));

        RetailStoreTenderTypeTable retailStoreTenderTypeTable;

        while select TenderTypeId, Function from retailStoreTenderTypeTable
            group by TenderTypeId
            where retailStoreTenderTypeTable.Function == RetailTenderFunction::Card
                || retailStoreTenderTypeTable.Function == RetailTenderFunction::Wallet
        {
            qdbs.addRange(fieldNum(RetailTransactionPaymentTrans, TenderType)).value(queryValue(retailStoreTenderTypeTable.TenderTypeId));
        }

        // Use the index that covers IsPaymentDataArchived, TransDate and TenderType.
        qdbs.addSortIndex(indexNum(RetailTransactionPaymentTrans, TransDate_IsPaymentDataArchivedIdx));
        qdbs.indexIsHint(true);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentTransactionsForCompressionQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for transactions that are available for compression.
    /// Only the first 1000 records are retrieved.
    /// </summary>
    /// <returns>A query for transactions available for compression.</returns>
    internal Query getPaymentTransactionsForCompressionQuery()
    {
        Query query = new Query();
        query.firstOnly1000(true);

        if (this.isCompressNewPaymentBlob == NoYes::No
            && featureEnabledDate > transactionsOlderThanDate)
        {
            return query;
        }

        QueryBuildDataSource qdbs = query.addDataSource(tableNum(RetailTransactionPaymentTrans));
        qdbs.update(true);

        // Get the transactions that occurred after the transactionsOlderThanDate and before the feature enabled date.
        // Note that the payment blobs will already be compressed for the transactions that occurred after the feature was enabled.
        qdbs.addRange(fieldNum(RetailTransactionPaymentTrans, TransDate)).value(queryRange(this.transactionsOlderThanDate, featureEnabledDate));

        // Transactions where the payment blobs were neither compressed nor archived.
        qdbs.addRange(fieldNum(RetailTransactionPaymentTrans, IsPaymentDataCompressed)).value(queryValue(NoYes::No));
        qdbs.addRange(fieldNum(RetailTransactionPaymentTrans, IsPaymentDataArchived)).value(queryValue(NoYes::No));

        RetailStoreTenderTypeTable retailStoreTenderTypeTable;

        while select TenderTypeId, Function from retailStoreTenderTypeTable
            group by TenderTypeId
            where retailStoreTenderTypeTable.Function == RetailTenderFunction::Card
                || retailStoreTenderTypeTable.Function == RetailTenderFunction::Wallet
        {
            qdbs.addRange(fieldNum(RetailTransactionPaymentTrans, TenderType)).value(queryValue(retailStoreTenderTypeTable.TenderTypeId));
        }

        // Use the index that covers IsPaymentDataArchived, TransDate and TenderType.
        qdbs.addSortIndex(indexNum(RetailTransactionPaymentTrans, TransDate_IsPaymentDataArchivedIdx));
        qdbs.indexIsHint(true);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBatchExecuting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the given batch is executing.
    /// </summary>
    /// <param name = "_runBaseBatch">The batch.</param>
    /// <returns>True if the batch is executing. Otherwise, false.</returns>
    internal static boolean isBatchExecuting(RunBaseBatch _runBaseBatch)
    {
        return _runBaseBatch
            && _runBaseBatch.isInBatch()
            && _runBaseBatch.parmCurrentBatch().RecId != 0
            && _runBaseBatch.parmCurrentBatch().Status == BatchStatus::Executing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPaymentArchiverExceptionRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the archiving for the given transaction can be retried.
    /// </summary>
    /// <param name = "_recId">The transaction identifier.</param>
    /// <param name = "_batchJobId">The batch identifier.</param>
    /// <param name = "_message">The exception message. Optional.</param>
    /// <param name = "_methodName">The method name. Optional.</param>
    /// <returns>True if the archiving can be retried. Otherwise, false.</returns>
    internal static boolean isPaymentArchiverExceptionRetryable(RecId _recId, RefRecId _batchJobId, str _message = '', MethodName _methodName = '')
    {
        boolean isRetryable = true;

        if (xSession::currentRetryCount() <= 3)
        {
            sleep(xSession::currentRetryCount() * RandomGenerate::construct().randomInt(1000, 5000));
        }
        else
        {
            CommerceHQEventSource eventSourceLocal = CommerceHQEventSource::Log;
            eventSourceLocal.EventWritePaymentsArchiverFailure(_recId, _batchJobId, _message, _methodName);
            isRetryable = false;
        }

        return isRetryable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareArchiveList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares the list of payment blobs.
    /// </summary>
    /// <param name = "_retailTransactionPaymentTrans">The payment transaction record.</param>
    /// <returns>A list of payment blobs.</returns>
    internal static List prepareArchiveList(RetailTransactionPaymentTrans _retailTransactionPaymentTrans)
    {
        List archiveList = new List(Types::Class);

        if (_retailTransactionPaymentTrans.RecId == 0)
        {
            return archiveList;
        }

        str identifier = int642Str(_retailTransactionPaymentTrans.RecId);

        if (_retailTransactionPaymentTrans.PaymentAuthorization != '')
        {
            archiveList.addEnd(RetailArchiveBlob::initFromBlobAndIdentifier(
                _retailTransactionPaymentTrans.PaymentAuthorization,
                strFmt("%1_%2", identifier, fieldStr(RetailTransactionPaymentTrans, PaymentAuthorization))));
        }

        if (_retailTransactionPaymentTrans.PaymentCaptureToken != '')
        {
            archiveList.addEnd(RetailArchiveBlob::initFromBlobAndIdentifier(
                _retailTransactionPaymentTrans.PaymentCaptureToken,
                strFmt("%1_%2", identifier, fieldStr(RetailTransactionPaymentTrans, PaymentCaptureToken))));
        }

        if (_retailTransactionPaymentTrans.PaymentCardToken != '')
        {
            archiveList.addEnd(RetailArchiveBlob::initFromBlobAndIdentifier(
                _retailTransactionPaymentTrans.PaymentCardToken,
                strFmt("%1_%2", identifier, fieldStr(RetailTransactionPaymentTrans, PaymentCardToken))));
        }

        if (_retailTransactionPaymentTrans.SigCapData != '')
        {
            archiveList.addEnd(RetailArchiveBlob::initFromBlobAndIdentifier(
                _retailTransactionPaymentTrans.SigCapData,
                strFmt("%1_%2", identifier, fieldStr(RetailTransactionPaymentTrans, SigCapData))));
        }

        return archiveList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>compressXml</Name>
				<Source><![CDATA[
    /// <summary>
    /// Compresses the payment token using the payment SDK.
    /// </summary>
    /// <param name = "_tokenXml">The payment token.</param>
    /// <returns>The compressed string.</returns>
    internal static str compressXml(str _tokenXml)
    {
        System.String sourceXml = _tokenXml;
        str compressedStr = '';

        if (!System.String::IsNullOrWhiteSpace(sourceXml))
        {
            try
            {
                compressedStr = PaymentProperty::CompressXmlToken(sourceXml);
            }
            catch
            {
                // Do nothing.
            }
        }

        return compressedStr;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>