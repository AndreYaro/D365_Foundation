<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetInventoryWorkSheetDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetInventoryWorkSheet</c> class is used as the data provider for the <c>AssetInventoryWorkSheet</c> report.
/// </summary>
[SRSReportParameterAttribute(classStr(AssetInventoryWorkSheetContract))]
public class AssetInventoryWorkSheetDP extends SRSReportDataProviderPreProcessTempDB
{
    AssetInventoryWorksheetGroupBy  assetInventoryWorksheetGroupBy;
    Name                            dimensionAttributeName;
    CurrentOperationsTax            currentOperationsTax;
    AssetTmpInventoryWorkSheet      assetTmpInventoryWorkSheet;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssetTmpPhysicalInventory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves data from the <c>AssetTmpInventoryWorkSheet</c> temporary table.
    /// </summary>
    /// <returns>
    /// The <c>AssetTmpInventoryWorkSheet</c> table buffer.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(AssetTmpInventoryWorkSheet))]
    public AssetTmpInventoryWorkSheet getAssetTmpPhysicalInventory()
    {
        select * from assetTmpInventoryWorkSheet;
        return assetTmpInventoryWorkSheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data for the <c>AssetInventoryWorkSheet</c> report and inserts it into the <c>AssetTmpInventoryWorkSheet</c> table.
    /// </summary>
    private void getData()
    {
        QueryRun queryRun;
        AssetBook assetBook;
        AssetTable assetTable;
        AssetBookTable assetBookTable;
        OMOperatingUnit omOperatingUnit;
        DimensionAttributeValueSetItemView dimensionAttributeValueSetItemView;
        HcmWorker hcmWorker;
        DirPerson dirPerson;
        AssetInventoryWorkSheetContract contract = this.parmDataContract() as AssetInventoryWorkSheetContract;

        RecordInsertList recordInsertList = new RecordInsertList(tableNum(AssetTmpInventoryWorkSheet), true, true, true, false, true, assetTmpInventoryWorkSheet);

        queryRun = new QueryRun(this.selectQueryObject());
        while (queryRun.next())
        {
            assetBook       = queryRun.get(tableNum(AssetBook));
            assetTable      = queryRun.get(tableNum(AssetTable));
            assetBookTable  = queryRun.get(tableNum(AssetBookTable));
            omOperatingUnit = queryRun.get(tableNum(OMOperatingUnit));

            if (assetInventoryWorksheetGroupBy == AssetInventoryWorksheetGroupBy::Dimension)
            {
                dimensionAttributeValueSetItemView = queryRun.get(tableNum(DimensionAttributeValueSetItemView)) as DimensionAttributeValueSetItemView;
            }

            assetTmpInventoryWorkSheet.clear();

            assetTmpInventoryWorkSheet.AssetId              = assetTable.AssetId;
            assetTmpInventoryWorkSheet.Name                 = assetTable.Name;
            assetTmpInventoryWorkSheet.Location             = assetTable.Location;
            assetTmpInventoryWorkSheet.SerialNum            = assetTable.SerialNum;
            assetTmpInventoryWorkSheet.Model                = assetTable.Model;
            assetTmpInventoryWorkSheet.Quantity             = assetTable.Quantity;
            assetTmpInventoryWorkSheet.UnitOfMeasure        = assetTable.UnitOfMeasure;
            assetTmpInventoryWorkSheet.PhysicalInventory    = assetTable.PhysicalInventory;
            assetTmpInventoryWorkSheet.WorkerResponsible    = assetTable.WorkerResponsible;

            select Name from dirPerson
            exists join hcmWorker
                where hcmWorker.Person == dirPerson.RecId
                   && hcmWorker.RecId == assetTable.WorkerResponsible;

            assetTmpInventoryWorkSheet.WorkerResponsibleName = dirPerson.Name;
            assetTmpInventoryWorkSheet.BookId                = assetBook.BookId;
            assetTmpInventoryWorkSheet.AcquisitionPrice      = assetBook.AcquisitionPrice;
            assetTmpInventoryWorkSheet.AcquisitionDate       = assetBook.AcquisitionDate;

            assetTmpInventoryWorkSheet.CurrentOperationsTax  = assetBookTable.CurrentOperationsTax;

            assetTmpInventoryWorkSheet.omOperatingUnitNumber = omOperatingUnit.omOperatingUnitNumber;
            assetTmpInventoryWorkSheet.omOperatingUnitName   = omOperatingUnit.Name;

            assetTmpInventoryWorkSheet.DimensionAttribute       = contract.parmDimension();
            assetTmpInventoryWorkSheet.DimensionAttributeValue  = dimensionAttributeValueSetItemView.DisplayValue;

            recordInsertList.add(assetTmpInventoryWorkSheet);
        }

        recordInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        AssetInventoryWorkSheetContract contract;

        contract = this.parmDataContract();

        assetInventoryWorksheetGroupBy  = contract.parmGroupBy();
        dimensionAttributeName          = contract.parmDimension();
        currentOperationsTax            = contract.parmPostingLayer();

        this.getData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a query based on the <c>AssetInventoryWorkSheetGroupBy</c> base enumeration.
    /// </summary>
    /// <returns>
    /// The initialized query object.
    /// </returns>
    private Query selectQueryObject()
    {
        Query query;

        switch (assetInventoryWorksheetGroupBy)
        {
            case AssetInventoryWorksheetGroupBy::PhysicalLocation,
                AssetInventoryWorksheetGroupBy::ResponsibleOrganizationUnit,
                AssetInventoryWorksheetGroupBy::ResponsiblePerson:
                query = new Query(queryStr(AssetPhysicalInventoryDS));
                break;

            case AssetInventoryWorksheetGroupBy::Dimension:
                query = new Query(queryStr(AssetPhysicalInventoryDimDS));
                query.dataSourceTable(
                    tableNum(DimensionAttributeValueSetItemView)).addRange(
                        fieldNum(DimensionAttributeValueSetItemView, DimensionAttribute)).value(
                            queryValue(DimensionAttribute::findByName(dimensionAttributeName).RecId));
                break;

            default:
                throw error(strFmt("@SYS19306", funcName()));
        }

        query.dataSourceTable(tableNum(AssetBookTable)).findRange(fieldNum(AssetBookTable, CurrentOperationsTax)).value(int2str(enum2int(currentOperationsTax)));

        SysQuery::findOrCreateRange(query.dataSourceTable(tableNum(AssetBook)), fieldNum(AssetBook, Status))
            .value(strFmt('%1, %2', SysQuery::valueNot(AssetStatus::Sold), SysQuery::valueNot(AssetStatus::Scrapped)));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static AssetInventoryWorkSheetDP construct()
    {
        return new AssetInventoryWorkSheetDP();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>