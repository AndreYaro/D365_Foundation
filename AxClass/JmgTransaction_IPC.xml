<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgTransaction_IPC</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgTransaction_IPC</c> class enables time and attendance to read and post changes to
///    indirect activities registrations.
/// </summary>
class JmgTransaction_IPC extends JmgTransaction
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postChange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Posts changes that are made in time and attendance back to the indirect activity registrations.
    /// </summary>
    /// <param name="_jmgChangeLog">
    ///    A <c>JmgChangeLog</c> record, which contains the changes to post.
    /// </param>
    /// <param name="_jmgPostStandardSystem">
    ///    A reference to a <c>JmgPostStandardSystem</c> object, which can be used in the posting of changed
    ///    transactions. Changes to the indirect activity transactions are posted using the
    ///    <c>JmgPostStandardSystem</c> class.
    /// </param>
    public void postChange(JmgChangeLog _jmgChangeLog, JmgPostStandardSystem _jmgPostStandardSystem)
    {
        JmgStampJournalTrans    changedTrans;
        JmgStampJournalTrans    originalTrans;

        con2Buf(_jmgChangeLog.ChangedTransaction, changedTrans);
        con2Buf(changedTrans.OriginalTransaction, originalTrans);
        switch (_jmgChangeLog.ChangeLogType)
        {
            case JmgChangeLogType::Insert:
                _jmgPostStandardSystem.addJob(
                    JmgTermJob::construct(changedTrans.JobId),
                    JmgRegistrationParameters::constructJmgStampTransMap(changedTrans),
                    changedTrans);
                break;
            case JmgChangeLogType::Update:
                if (originalTrans.JobId     != changedTrans.JobId       ||
                    originalTrans.StartDate != changedTrans.StartDate   ||
                    originalTrans.StartTime != changedTrans.StartTime   ||
                    originalTrans.StopDate  != changedTrans.StopDate    ||
                    originalTrans.StopTime  != changedTrans.StopTime    ||
                    originalTrans.Seconds   != changedTrans.Seconds     ||
                    !DimensionDefaultFacade::areEqual(originalTrans.DefaultDimension, changedTrans.DefaultDimension))
                {
                    if (originalTrans.JourRegType   == JmgJourRegTypeEnum::IndActivity)
                    {
                        originalTrans.Seconds   = originalTrans.Seconds * -1;
                        _jmgPostStandardSystem.addJob(
                            JmgTermJob::construct(originalTrans.JobId),
                            JmgRegistrationParameters::constructJmgStampTransMap(originalTrans),
                            originalTrans);
                    }
                    if (changedTrans.JourRegType    == JmgJourRegTypeEnum::IndActivity)
                    {
                        _jmgPostStandardSystem.addJob(
                            JmgTermJob::construct(changedTrans.JobId),
                            JmgRegistrationParameters::constructJmgStampTransMap(changedTrans),
                            changedTrans);
                    }
                }
                break;
            case JmgChangeLogType::Delete:
                originalTrans.Seconds   = originalTrans.Seconds * -1;
                _jmgPostStandardSystem.addJob(
                    JmgTermJob::construct(originalTrans.JobId),
                    JmgRegistrationParameters::constructJmgStampTransMap(originalTrans),
                    originalTrans);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static JmgTransaction_IPC construct()
    {
        return new JmgTransaction_IPC();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>