<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerJournalTransferRuleVoucherSerie</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SubledgerJournalTransferRuleVoucherSerie</c> class is an event handler that validates the
/// <c>JournalTransferRule</c> rule currently used for Belgian.
/// </summary>
class SubledgerJournalTransferRuleVoucherSerie
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateWritePostEventHandler</Name>
				<Source><![CDATA[
        [PostHandlerFor(tableStr(SubledgerJournalTransferRule), tableMethodStr(SubledgerJournalTransferRule, validateWrite))]
    /// <summary>
    /// The validation method for transferRule. called by SubledgerJournalTransferRule.validateWrite meathod as a post method.
    /// </summary>
    /// <param name="_args">
    /// The arguements from the caller
    /// </param>
    /// <returns>
    /// if the rule is valid
    /// </returns>
    public static void validateWritePostEventHandler(XppPrePostArgs _args)
    {
        #ISOCountryRegionCodes

        SubledgerJournalTransferRule rule = _args.getThis();
        boolean isValid = true;

        _args.setReturnValue(isValid);
        // In case of Belgain, make sure summarizing is not on.
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBE]))
        {
            if (rule.SourceDocumentType ==  classNum(CustInvoiceSourceDoc) && rule.IsSummarizationEnabled)
            {
                isValid = false;
            }
            else
            {
                if (rule.SourceDocumentType ==  classNum(VendorInvoiceSourceDoc) && rule.IsSummarizationEnabled)
                {
                    isValid = false;
                }
            }

            if (!isValid)
            {
                // Label text: Ledger posting journal feature does not support summarizing for document type %1. Please set Sumarize account enties to No
                checkFailed(strFmt("@GLS222827", classId2Name(rule.SourceDocumentType)));
            }

            // This call only works when the call is a post call.
            _args.setReturnValue(isValid);
        }

        if (rule.TransferMode == SubledgerJournalTransferMode::AsynchronousBatch && rule.IsSummarizationEnabled)
        {
            //force the summarization to false as we do not allow summarization when the transfer mode is Asynchronous
            rule.IsSummarizationEnabled = 0;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>