<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25RegCalc_ExchangeAdj</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rTax25RegCalc_ExchangeAdj extends RTax25RegCalc implements BatchRetryable
{
    AmountMST                   totalExchAdjGain, totalExchAdjLoss,
                                totalAdvAdjGain, totalAdvAdjLoss,
                                totalTypeExchAdjGain, totalTypeExchAdjLoss,
                                totalCTA, totalCTL, totalTypeAdvAdjLoss,
                                totalTypeCTA, totalTypeCTL, totalTypeAdvAdjGain;
    DimensionAttribute          dimAttr;
    CustVendTrans               custVendTrans;
    RecordSortedList            registerTransList;
    Counter                     transCount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc()
    {
        RefRecId                lastProfitTableRecId;
        RTax25RegisterTrans_ExchangeAdj regTrans;
        int                     i = 1;
        boolean                 loop;
        boolean                 firstIteration = false;

        try
        {
            ttsbegin;

            super();

            regQuery.addHeaderRecord(0, conNull(), 0, "", i);

            custVendTrans       = new DictTable(tableNum(CustTrans)).makeRecord();
            this.selectCustVendTrans();
            custVendTrans       = new DictTable(tableNum(VendTrans)).makeRecord();
            this.selectCustVendTrans();

            this.progressInit("", transCount);

            loop = registerTransList.first(regTrans);
            while (loop)
            {
                progress.setText(strFmt("@GLS111968", regTrans.ExpenseIncomeType));

                if (regTrans.rTax25ProfitTable != lastProfitTableRecId || ! firstIteration)
                {
                    if (firstIteration)
                    {
                        i++;
                        regQuery.addFooterRecord(lastProfitTableRecId,
                                                 this.createFooter(),
                                                 0,
                                                 lastProfitTableRecId ? strFmt("@GLS103974", RTax25ProfitTable::find(lastProfitTableRecId).ProfitId) : "@GLS104449",
                                                 i);
                        totalTypeExchAdjGain = 0; totalTypeExchAdjLoss = 0;
                        totalTypeAdvAdjGain  = 0; totalTypeAdvAdjLoss  = 0;
                        totalTypeCTA         = 0; totalTypeCTL         = 0;
                    }
                    i++;
                    lastProfitTableRecId = regTrans.rTax25ProfitTable;
                    regQuery.addHeaderRecord(regTrans.rTax25ProfitTable,
                                             conNull(),
                                             0,
                                             regTrans.rTax25ProfitTable ?
                                             strFmt("@GLS104112", RTax25ProfitTable::find(regTrans.rTax25ProfitTable).ProfitId) : "@GLS104447",
                                             i);
                    firstIteration = true;
                }
                i++;

                regTrans.LineNumber = -regTrans.LineNumber;
                if (regQuery.getSortedList().find(regTrans))
                {
                    regQuery.getSortedList().del(regTrans);
                    regTrans.LineNumber = i;
                    regQuery.getSortedList().ins(regTrans);
                }

                totalTypeExchAdjGain   += regTrans.ExchAdjIncome;
                totalTypeExchAdjLoss   += regTrans.ExchAdjExpense;
                totalTypeAdvAdjGain    += regTrans.AdvanceAdjProfit;
                totalTypeAdvAdjLoss    += regTrans.AdvanceAdjLoss;
                totalTypeCTA           += regTrans.CTAAmount;
                totalTypeCTL           += regTrans.CTLAmount;
                totalExchAdjGain       += regTrans.ExchAdjIncome;
                totalExchAdjLoss       += regTrans.ExchAdjExpense;
                totalAdvAdjGain        += regTrans.AdvanceAdjProfit;
                totalAdvAdjLoss        += regTrans.AdvanceAdjLoss;
                totalCTA               += regTrans.CTAAmount;
                totalCTL               += regTrans.CTLAmount;

                lastProfitTableRecId = regTrans.rTax25ProfitTable;

                loop = registerTransList.next(regTrans);

                progress.incCount();
            }

            if (firstIteration)
            {
                i++;
                regQuery.addFooterRecord(lastProfitTableRecId,
                                         this.createFooter(),
                                         0,
                                         lastProfitTableRecId ? strFmt("@GLS103974", RTax25ProfitTable::find(lastProfitTableRecId).ProfitId) : "@GLS104449",
                                         i);
            }

            totalTypeExchAdjGain   = totalExchAdjGain;
            totalTypeExchAdjLoss   = totalExchAdjLoss;
            totalTypeAdvAdjGain    = totalAdvAdjGain;
            totalTypeAdvAdjLoss    = totalAdvAdjLoss;
            totalTypeCTA           = totalCTA;
            totalTypeCTL           = totalCTL;
            i++;
            regQuery.addFooterRecord(0, this.createFooter(), 0, "", i);

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFooter</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container createFooter()
    {
        return [dateNull(),
                "",
                "",
                totalTypeExchAdjGain,
                totalTypeCTA,
                totalTypeExchAdjLoss,
                totalTypeCTL,
                totalTypeAdvAdjLoss,
                totalTypeAdvAdjGain];
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init(RTax25RegisterJournalTrans  _registerJournalTrans = null,
                        Batch                       _batch                = null)
    {
        boolean ret;

        dimAttr = DimensionAttribute::find(RTax25Parameters::find().DimensionAttribute);
        registerTransList = new RecordSortedList(tablenum(RTax25RegisterTrans_ExchangeAdj));
        registerTransList.sortOrder(fieldnum(RTax25RegisterTrans_ExchangeAdj, rTax25ProfitTable), fieldnum(RTax25RegisterTrans_ExchangeAdj, LineNumber));

        ret = super(_registerJournalTrans, _batch);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectCustVendTrans</Name>
				<Source><![CDATA[
    #define.Coeff(10000)
    #define.FieldNum2(2)
    #define.ParameterCode1(1)
    private void selectCustVendTrans()
    {
        RefRecId                    profitTableRecId;
        RTax25RegisterTrans_ExchangeAdj regTrans;
        CustVendTransPostingLog_RU  postingLog;
        AmountMST                   exchAdjGain, exchAdjLoss,
                                    ctA, ctL;
        Tax                         tax;

        GeneralJournalAccountEntry          accountEntry;
        GeneralJournalEntry                 journalEntry;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherLink;

        CustVendTrans               reverseTrans;
        TransDate                   reversedDate;
        container                   record;
        int                         i, sign;
        Map                         collapse = new Map(Types::Real, Types::Container);
        boolean                     advance = RTax25RegisterParameters::find(registerId, #ParameterCode1).Parameter == enum2str(NoYes::Yes);
        FiscalCalendarRecId         calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();
        int                         tmpIndex;
        LedgerPostingType           postingType;
        CustVendTrans               custVendTransSource;

        void insMap(AmountMSTExchAdjustment _amount)
        {
            container   con;

            if (collapse.exists(_amount))
            {
                con = collapse.lookup(_amount);
            }
            con = conPoke(con, conLen(con) + 1, custVendTrans);
            collapse.insert(_amount, con);
            record = conPoke(record, conLen(record) + 1, custVendTrans);
        }
        void collapseMap()
        {
            container       con;
            int             j;
            MapIterator     it = new MapIterator(collapse);
            CustVendTrans   transCorrect, transDirect;

            while (it.more())
            {
                con = it.value();
                for (i = 1; i <= conLen(con); i++)
                {
                    transCorrect = conPeek(con, i);
                    if (transCorrect.Correct   == NoYes::No ||
                        transCorrect.TransType == LedgerTransType::AdvanceAdjustment_RU)
                        continue;

                    for (j = 1; j <= conLen(con); j++)
                    {
                        if (i == j)
                            continue;
                        transDirect = conPeek(con, j);
                        if (transCorrect.TransDate < transDirect.TransDate)
                            break;

                        if (transDirect.Correct == NoYes::No &&
                            LedgerFiscalCalendar::findPeriodByPeriodCodeDate(calendarRecId, transCorrect.TransDate).RecId ==
                            LedgerFiscalCalendar::findPeriodByPeriodCodeDate(calendarRecId, transDirect.TransDate).RecId)
                        {
                            tmpIndex = j > i ? j : i;
                            con = conDel(con, tmpIndex, 1);
                            tmpIndex = j > i ? i : j;
                            con = conDel(con, tmpIndex, 1);
                            record = conDel(record, conFind(record, transCorrect), 1);
                            record = conDel(record, conFind(record, transDirect), 1);
                            i -= (j < i ? #FieldNum2 : 1);
                            break;
                        }
                    }
                }
                it.next();
            }
        }

        while select custVendTrans
            order by TransDate asc
            where custVendTrans.TransDate  >= dateFrom                          &&
                  custVendTrans.TransDate  <= dateTo                            &&
                  (custVendTrans.TransType   == LedgerTransType::ExchAdjustment ||
                   (advance                                                     &&
                    custVendTrans.TransType  == LedgerTransType::AdvanceAdjustment_RU))
        {
            if ((custVendTrans.TransType       == LedgerTransType::ExchAdjustment       &&
                 ! custVendTrans.ExchAdjustmentUnrealized)                              ||
                (custVendTrans.TransType       == LedgerTransType::AdvanceAdjustment_RU &&
                 ! custVendTrans.ExchAdjustmentRealized))
                continue;

            reverseTrans = new DictTable(custVendTrans.TableId).makeRecord();

            select firstonly RecId, TransDate from reverseTrans
                where reverseTrans.Voucher   == custVendTrans.Voucher   &&
                      reverseTrans.TransType == custVendTrans.TransType &&
                      reverseTrans.RecId     != custVendTrans.RecId;
            if (reverseTrans.RecId &&
                reverseTrans.TransDate >= dateFrom &&
                reverseTrans.TransDate <= dateTo)
                continue;

            custVendTransSource = custVendTrans.data();
            
            select firstonly TransDate from custVendTransSource
                where custVendTransSource.RecId == custVendTrans.OffsetRecId;
            
            if (custVendTransSource.TransDate >= AmountDiffCancelDate)
            {
                continue;
            }

            insMap(abs(custVendTrans.ExchAdjustment));
        }

        collapseMap();

        for (i = 1; i <= conLen(record) ; i++)
        {
            custVendTrans = conPeek(record, i);

            tax = new Tax();

            if (custVendTrans.TransType == LedgerTransType::ExchAdjustment)
            {
                sign = custVendTrans.Correct ? -1 : 1;

                select firstonly PostingType from accountEntry
                    where accountEntry.PostingType  == LedgerPostingType::ExchRateGain             ||
                          accountEntry.PostingType  == LedgerPostingType::ExchRateLoss             ||
                          accountEntry.PostingType  == LedgerPostingType::AdvanceAdjustmentGain_RU ||
                          accountEntry.PostingType  == LedgerPostingType::AdvanceAdjustmentLoss_RU
                    exists join journalEntry
                        where journalEntry.RecId  == accountEntry.GeneralJournalEntry &&
                              journalEntry.Ledger == Ledger::current()
                    exists join subledgerVoucherLink
                        where subledgerVoucherLink.GeneralJournalEntry == journalEntry.RecId       &&
                                subledgerVoucherLink.Voucher           == custVendTrans.Voucher    &&
                                subledgerVoucherLink.VoucherDataAreaId == custVendTrans.DataAreaId &&
                                subledgerVoucherLink.AccountingDate    == custVendTrans.TransDate;
                postingType = accountEntry.PostingType;
            }
            else
            {
                select firstonly postingLog
                    where postingLog.Voucher        == custVendTrans.Voucher      &&
                          (postingLog.TransRecId    == custVendTrans.OffsetRecId  ||
                           postingLog.OffSetRecId   == custVendTrans.OffsetRecId) &&
                          postingLog.RefTableId     == custVendTrans.TableId      &&
                          postingLog.PostingLogType == CustVendTransPostingLogType_RU::AdvanceAdjustment;
                reversedDate = postingLog.reverseDate();
                sign = (reversedDate && reversedDate == custVendTrans.TransDate) ? -1 : 1;
                postingType = postingLog.Posting;
            }

            if (postingType == LedgerPostingType::ExchRateGain ||
                postingType == LedgerPostingType::AdvanceAdjustmentLoss_RU)
            {
                exchAdjGain = abs(custVendTrans.ExchAdjustment) * sign;
                exchAdjLoss = 0;
                profitTableRecId = LedgerCurrencyParameters_RU::findParameters(Ledger::current(), custVendTrans.CurrencyCode).rTax25ProfitTableProfit;

                ctA = tax.taxCalcWithoutSource_RU(RTax25ProfitTable::find(profitTableRecId).taxCode(),
                                                  custVendTrans.TransDate,
                                                  CompanyInfoHelper::standardCurrency(),
                                                  exchAdjGain,
                                                  TaxModuleType::Voucher);
                ctL = 0;
            }
            else
            {
                exchAdjLoss = abs(custVendTrans.ExchAdjustment) * sign;
                exchAdjGain = 0;
                profitTableRecId = LedgerCurrencyParameters_RU::findParameters(Ledger::current(), custVendTrans.CurrencyCode).rTax25ProfitTableLoss;
                ctL = tax.taxCalcWithoutSource_RU(RTax25ProfitTable::find(profitTableRecId).taxCode(),
                                                 custVendTrans.TransDate,
                                                 CompanyInfoHelper::standardCurrency(),
                                                 exchAdjLoss,
                                                 TaxModuleType::Voucher);
                ctA = 0;
            }

            transCount++;
            regTrans = regQuery.addBodyRecord(profitTableRecId,
                                                         [custVendTrans.TransDate,
                                                          RTax25ProfitTable::find(profitTableRecId).Description,
                                                          custVendTrans.AccountNum,
                                                          custVendTrans.TransType == LedgerTransType::ExchAdjustment ? exchAdjGain : 0,
                                                          ctA,
                                                          custVendTrans.TransType == LedgerTransType::ExchAdjustment ? exchAdjLoss : 0,
                                                          ctL,
                                                          custVendTrans.TransType == LedgerTransType::ExchAdjustment ? 0 : exchAdjGain,
                                                          custVendTrans.TransType == LedgerTransType::ExchAdjustment ? 0 : exchAdjLoss],
                                                          custVendTrans.TableId,
                                                          custVendTrans.RecId,
                                                          custVendTrans.Txt,
                                                          -(date2num(custVendTrans.TransDate)*#Coeff + transCount));
            regTrans.LineNumber = -regTrans.LineNumber;
            registerTransList.ins(regTrans);
        }
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>