<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTableLookup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjTableLookup
{
    boolean             checkEmplProj;
    boolean             checkEmplCategory;
    boolean             checkProjCategory;

    boolean             useProjType;
    ProjType            projType;
    boolean             showFinishedProjects;
    CustAccount         custAccount;

    SMAServiceOrderTable    smaServiceOrderTable;
    boolean             isIntercompany;
       
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates project lookup.  Call performLookup() on the returned object.
    /// </summary>
    /// <param name = "_caller">String control hosting the lookup.</param>
    /// <param name = "_query">Query on which the lookup is based.</param>
    /// <returns>Created lookup object.</returns>
    public static SysTableLookup createLookup(FormStringControl _caller, Query _query)
    {
        SysTableLookup sysTableLookup = new SysTableLookup();

        sysTableLookup = SysTableLookup::newParameters(tableNum(ProjProjectLookup), _caller);

        sysTableLookup.addLookupfield(fieldNum(ProjProjectLookup, ProjId));
        sysTableLookup.addLookupfield(fieldNum(ProjProjectLookup, Name));
        sysTableLookup.addLookupfield(fieldNum(ProjProjectLookup, CustAccount));
        sysTableLookup.addLookupfield(fieldNum(ProjProjectLookup, Stage));

        sysTableLookup.addSelectionField(fieldNum(ProjProjectLookup, ProjId));

        if (!ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
        {
            sysTableLookup.addLookupfield(fieldNum(ProjProjectLookup, Type));
        }
        sysTableLookup.parmQuery(_query);

        return SysTableLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryWithRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates project lookup query, applies ranges according to parameters.
    /// </summary>
    /// <param name = "_projectTypes">Container of <c>ProjType</c> values.</param>
    /// <param name = "_projectContract">Project contract id, optional.</param>
    /// <param name = "_custAccount">Customer account, optional.</param>
    /// <param name = "_excludeCompleted">true if query should exclude completed projects; otherwise, false.</param>
    /// <returns>Query that can be used for lookup.</returns>
    public static Query buildQueryWithRanges(container _projectTypes, ProjInvoiceProjId _projectContract = '',  CustAccount  _custAccount = '', boolean _excludeCompleted = false)
    {
        Query query = new Query(queryStr(ProjProjectLookup));
        QueryBuildDataSource qbds = query.dataSourceTable(tableNum(ProjProjectLookup));

        if (qbds)
        {
            // apply project type ranges if specified
            if (_projectTypes != conNull())
            {
                int typeCnt = conLen(_projectTypes);

                for ( int ix = 1; ix <= typeCnt; ix++ )
                {
                    ProjType type = conPeek(_projectTypes, ix);
                    qbds.addRange(fieldNum(ProjProjectLookup, Type)).value(queryValue(type));
                }
            }

            // apply project contract range if specified
            if (_projectContract)
            {
                qbds.addRange(fieldNum(ProjProjectLookup, ProjInvoiceProjId)).value(queryValue(_projectContract));
            }

            // apply customer range if specified
            if (_custAccount)
            {
                qbds.addRange(fieldNum(ProjProjectLookup, CustAccount)).value(queryValue(_custAccount));
            }

            // apply range to exclude completed projects if specified
            if (_excludeCompleted)
            {
                qbds.addRange(fieldNum(ProjProjectLookup, Status)).value(SysQuery::valueNot(ProjStatus::Completed));
            }
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryResource</Name>
				<Source><![CDATA[
    [SysObsoleteAttribute('Replaced by buildProjTableLookupQueryResource.  Use buildProjectLookupQueryResource to return a query based on ProjProjectLookup instead to include custom project stage names.', false, 13\12\2016)]
    public Query buildQueryResource(TableId _dataset, ProjCategoryId _categoryId, ResourceRecId _resourceRecId, boolean _doNotShowProjectsAtCompletedStatus = false, boolean _showProjectsAtCompletedStatus = false)
    {
        return this.buildQueryResourceInternal(_dataset, _categoryId, _resourceRecId, _doNotShowProjectsAtCompletedStatus, _showProjectsAtCompletedStatus, tableStr(ProjTable), 
            fieldNum(ProjTable, RecId), fieldNum(ProjTable, Header), fieldNum(ProjTable, ProjId), fieldNum(ProjTable, Name), fieldNum(ProjTable, Type), fieldNum(ProjTable, ProjInvoiceProjId), fieldNum(ProjTable, CustAccount), fieldNum(ProjTable, ParentId), fieldNum(ProjTable, Status), fieldNum(ProjTable, Status));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProjTableQueryResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build query used for project lookup with <c>ProjTable</c> as the root datasource
    /// </summary>
    /// <param name = "_dataset">Table for which the lookup is used.</param>
    /// <param name = "_categoryId">Category filter.</param>
    /// <param name = "_resourceRecId">Resource filter.</param>
    /// <param name = "_doNotShowProjectsAtCompletedStatus">true if completed projects should be excluded; false if they should be included.</param>
    /// <param name = "_showProjectsAtCompletedStatus">true if only completed projects should be included; otherwise, false.</param>
    /// <returns>Query created based on parameters.</returns>
    public Query buildProjTableQueryResource(TableId _dataset, ProjCategoryId _categoryId, ResourceRecId _resourceRecId, boolean _doNotShowProjectsAtCompletedStatus = false, boolean _showProjectsAtCompletedStatus = false)
    {
        return this.buildQueryResourceInternal(_dataset, _categoryId, _resourceRecId, _doNotShowProjectsAtCompletedStatus, _showProjectsAtCompletedStatus, tableStr(ProjTable), 
            fieldNum(ProjTable, RecId), fieldNum(ProjTable, Header), fieldNum(ProjTable, ProjId), fieldNum(ProjTable, Name), fieldNum(ProjTable, Type), fieldNum(ProjTable, ProjInvoiceProjId), fieldNum(ProjTable, CustAccount), fieldNum(ProjTable, ParentId), fieldNum(ProjTable, Status), fieldNum(ProjTable, Status));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProjectLookupQueryResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build query used for project lookup with <c>ProjProjectLookup</c> as the root datasource
    /// </summary>
    /// <param name = "_dataset">Table for which the lookup is used.</param>
    /// <param name = "_categoryId">Category filter.</param>
    /// <param name = "_resourceRecId">Resource filter.</param>
    /// <param name = "_doNotShowProjectsAtCompletedStatus">true if completed projects should be excluded; false if they should be included.</param>
    /// <param name = "_showProjectsAtCompletedStatus">true if only completed projects should be included; otherwise, false.</param>
    /// <returns>Query created based on parameters.</returns>
    public Query buildProjectLookupQueryResource(TableId _dataset, ProjCategoryId _categoryId, ResourceRecId _resourceRecId, boolean _doNotShowProjectsAtCompletedStatus = false, boolean _showProjectsAtCompletedStatus = false)
    {
        return this.buildQueryResourceInternal(_dataset, _categoryId, _resourceRecId, _doNotShowProjectsAtCompletedStatus, _showProjectsAtCompletedStatus, queryStr(ProjProjectLookup), 
            fieldNum(ProjProjectLookup, RecId), fieldNum(ProjProjectLookup, Header), fieldNum(ProjProjectLookup, ProjId), 
            fieldNum(ProjProjectLookup, Name), fieldNum(ProjProjectLookup, Type), fieldNum(ProjProjectLookup, ProjInvoiceProjId), 
            fieldNum(ProjProjectLookup, CustAccount), fieldNum(ProjProjectLookup, ParentId), fieldNum(ProjProjectLookup, Status), 
            fieldNum(ProjProjectLookup, Stage));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProjectLookupQueryResourceMobile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build query used for project lookup with <c>ProjGrantCustLookup</c> as the root datasource
    /// </summary>
    /// <param name = "_dataset">Table for which the lookup is used.</param>
    /// <param name = "_categoryId">Category filter.</param>
    /// <param name = "_resourceRecId">Resource filter.</param>
    /// <param name = "_doNotShowProjectsAtCompletedStatus">true if completed projects should be excluded; false if they should be included.</param>
    /// <param name = "_showProjectsAtCompletedStatus">true if only completed projects should be included; otherwise, false.</param>
    /// <returns>Query created based on parameters.</returns>
    public Query buildProjectLookupQueryResourceMobile(TableId _dataset, ProjCategoryId _categoryId, ResourceRecId _resourceRecId,
        boolean _doNotShowProjectsAtCompletedStatus = false, boolean _showProjectsAtCompletedStatus = false)
    {
        return this.buildQueryResourceInternal(_dataset, _categoryId, _resourceRecId, _doNotShowProjectsAtCompletedStatus,
            _showProjectsAtCompletedStatus, queryStr(TSProjCustGrantLookup), fieldNum(TSProjCustGrantLookup, RecId),
            fieldNum(TSProjCustGrantLookup, Header), fieldNum(TSProjCustGrantLookup, ProjId), fieldNum(TSProjCustGrantLookup, Name),
            fieldNum(TSProjCustGrantLookup, Type), fieldNum(TSProjCustGrantLookup, ProjInvoiceProjId), fieldNum(TSProjCustGrantLookup, CustAccount),
            fieldNum(TSProjCustGrantLookup, ParentId), fieldNum(TSProjCustGrantLookup, Status), fieldNum(TSProjCustGrantLookup, Stage));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryResourceInternal</Name>
				<Source><![CDATA[
    private Query buildQueryResourceInternal(TableId _dataset, ProjCategoryId _categoryId, ResourceRecId _resourceRecId, 
        boolean _doNotShowProjectsAtCompletedStatus, boolean _showProjectsAtCompletedStatus, TableName _lookupBaseTable, 
        FieldId _recIdField, FieldId _headerField,
        FieldId _projIdField, FieldId _nameField, FieldId _typeField, FieldId _projInvoiceProjIdField,
        FieldId _custAccountField, FieldId _parentIdField, FieldId _statusField, FieldId _stageField
        )
    {
        Query                       q = new Query(_lookupBaseTable);
        QueryBuildDataSource        baseLookupTableDatasource, employeeAssocDatasource, categoryAssocDatasource, projStatusTypeRuleDataSource;
        QueryBuildRange             qbRange, projStatusRuleRange, projTypeRange;
        QueryBuildRange             statusNotCompletedQbr;
        CategoryTable               categoryTable;
        QueryBuildRange             dataSetCustAccountRange, dataSetHeaderRange, projRange, employeeAssocRange, emplProjSetup1Range, emplProjSetup2Range, categoryValidationRange, categoryAssocRange;
        str                         range;
        str                         sTmpStr;
       
        ProjOpsManagementLogger logger = ProjOpsManagementLogger::createLogger(classStr(ProjTableLookup));
        using (var activityContext = logger.projOpsManagementActivity().projTableLookupBuildQueryContext())
        {
            activityContext.addCustomProperty(ProjOpsManagementInstrumentationActivities::Action, ProjOpsManagementInstrumentationActivities::ProjTableLookupBuildQuery);

            if (_categoryId)
            {
                logger.logInformation(strFmt("Category ID : %1", _categoryId));
            }

            if (_resourceRecId)
            {
                logger.logInformation(strFmt("Resource record ID : %1", int2Str(_resourceRecId)));
            }

            logger.logInformation(strFmt("Dataset : %1, Data area : %2", int2Str(_dataset), curExt()));
        }

        baseLookupTableDatasource = q.dataSourceNo(1);

        if (_dataset != tableNum(ProjectAccountingDistribution) &&
            _dataset != tableNum(TrvRequisitionLine))
        {
            baseLookupTableDatasource.orderMode(OrderMode::GroupBy);

            baseLookupTableDatasource.addSortField(_projIdField);
            baseLookupTableDatasource.addSortField(_nameField);
            baseLookupTableDatasource.addSortField(_typeField);
            baseLookupTableDatasource.addSortField(_projInvoiceProjIdField);
            baseLookupTableDatasource.addSortField(_custAccountField);
            baseLookupTableDatasource.addSortField(_parentIdField);
            baseLookupTableDatasource.addSortField(_stageField);
        }

        qbRange = baseLookupTableDatasource.addRange(_headerField);
        qbRange.value(queryValue(NoYes::No));
        qbRange.status(RangeStatus::Locked);


        // Finished Projects never allowed for journals
        // Thus do not check for "removed" setting showFinished
        if (_doNotShowProjectsAtCompletedStatus || this.isJournal(_dataset))
        {
            statusNotCompletedQbr = baseLookupTableDatasource.addRange(_statusField);
            statusNotCompletedQbr.value(SysQuery::valueNot(ProjStatus::Completed));
        }

        if (this.isProjJournal(_dataset))
        {
            this.buildQueryForProject(baseLookupTableDatasource, ProjStatusRule::CreateJournal, _statusField, _typeField);
        }

        if (this.isForecast(_dataset))
        {
            this.buildQueryForProject(baseLookupTableDatasource, ProjStatusRule::CreateForecast, _statusField, _typeField);
        }

        if (_dataset == tableNum(ProjBegBalJournalTrans_CostSales)   ||
        _dataset == tableNum(ProjBegBalJournalTrans_Fee)         ||
        _dataset == tableNum(ProjBegBalJournalTrans_OnAcc))
        {
            this.buildQueryForProject(baseLookupTableDatasource, ProjStatusRule::CreateBeginningBalance, _statusField, _typeField);
        }

        if (_dataset == tableNum(ProjControlPeriodTable))
        {
            // Restrict the lookup to only projects which can have costs posted to them
            this.buildQueryForProject(baseLookupTableDatasource, ProjStatusRule::CreateJournal, _statusField, _typeField);
        }

        // Finished and user defined projects are fetched and added to query.
        // For fetching completed projects we cannot use the condition '_doNotShowProjectsAtCompletedStatus' as its not adding completed project because of 'valueNot' condition to query.
        if (_showProjectsAtCompletedStatus)
        {
            baseLookupTableDatasource.addRange(_statusField).value(SysQuery::value(ProjStatus::Completed));
        }

        // for Expense, we need to make sure that the category is both used in Project and Expense
        if (_dataset == tableNum(TrvExpTrans) ||
        _dataset == tableNum(TrvExpTable))
        {
            select UseInExpense, UseInProject from categoryTable where categoryTable.CategoryId == _categoryId;
            if (categoryTable && !isIntercompany)
            {
                if (categoryTable.UseInExpense == NoYes::No || categoryTable.UseInProject == NoYes::No)
                {
                    // return empty query
                    baseLookupTableDatasource.addRange(_recIdField).value(queryValue(-1));
                    return q;
                }
            }
        }

        if (useProjType)
        {
            // allow FixedPrice Project also appear in Fee journal.
            if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && projType == ProjType::TimeMaterial)
            {
                if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
                {
                    sTmpStr = strFmt("%1", any2int(ProjType::None));
                }
                else
                {
                    sTmpStr = strFmt("%1,%2",any2int(ProjType::TimeMaterial),any2int(ProjType::FixedPrice));
                }
                baseLookupTableDatasource.addRange(_typeField).value(sTmpStr);
            }
            else
            {
                baseLookupTableDatasource.addRange(_typeField).value(SysQuery::value(projType));
            }
        }
        switch (_dataset)
        {
            case (tableNum(SMAServiceObjectTable)) :
                baseLookupTableDatasource.addRange(_typeField).value(SysQuery::valueNot(ProjType::Time));
                break;
            case (tableNum(SMAAgreementTable)) :
                baseLookupTableDatasource.addRange(_headerField).value(SysQuery::valueNot(NoYes::Yes));
                baseLookupTableDatasource.addRange(_typeField).value(SysQuery::valueNot(ProjType::Time));
                break;
            case (tableNum(SMAServiceOrderTable)) :
                baseLookupTableDatasource.addRange(_headerField).value(SysQuery::valueNot(NoYes::Yes));
                baseLookupTableDatasource.addRange(_typeField).value(SysQuery::valueNot(ProjType::Time));
                baseLookupTableDatasource.addRange(_custAccountField).value(smaServiceOrderTable.CustAccount);
                break;
            case (tableNum(JmgStampJournalTrans)) :
            case (tableNum(JmgTimecardTrans)) :
                baseLookupTableDatasource.addRange(_headerField).value(SysQuery::valueNot(NoYes::No));
                break;
            case (tableNum(AgreementHeaderDefault)) :
                baseLookupTableDatasource.addRange(_headerField).value(SysQuery::valueNot(NoYes::Yes));
                baseLookupTableDatasource.addRange(_typeField).value(SysQuery::valueNot(ProjType::Time));
                // if statusNotCompletedQbr is set we have to override that value as they would conflict
                if (statusNotCompletedQbr)
                {
                    statusNotCompletedQbr.value(SysQuery::value(ProjStatus::InProcess));
                }
                else
                {
                    baseLookupTableDatasource.addRange(_statusField).value(SysQuery::value(ProjStatus::InProcess));
                }
                break;
            case (tableNum(TSTimesheetLine)) :
                dataSetCustAccountRange = baseLookupTableDatasource.addRange(_custAccountField);
                dataSetCustAccountRange.value(custAccount);
                dataSetCustAccountRange.status(RangeStatus::Locked);

                dataSetHeaderRange = baseLookupTableDatasource.addRange(_headerField);
                dataSetHeaderRange.value(SysQuery::valueNot(NoYes::Yes));
                dataSetHeaderRange.status(RangeStatus::Locked);

                projStatusTypeRuleDatasource = baseLookupTableDatasource.addDataSource(tableNum(ProjStatusTypeRule));
                projStatusTypeRuleDatasource.relations(false);
                projStatusTypeRuleDatasource.joinMode(JoinMode::ExistsJoin);
                projStatusTypeRuleDatasource.addLink(_statusField, fieldNum(ProjStatusTypeRule, ProjStatus));
                projStatusTypeRuleDatasource.addLink(_typeField, fieldNum(ProjStatusTypeRule, ProjType));

                projStatusRuleRange = projStatusTypeRuleDatasource.addRange(fieldNum(ProjStatusTypeRule, ProjStatusRule));
                projStatusRuleRange.value(queryValue(ProjStatusRule::CreateJournal));
                projStatusRuleRange.status(RangeStatus::Locked);
                break;

            case tableNum(ProjTransferPrice):
                dataSetHeaderRange = baseLookupTableDatasource.addRange(_headerField);
                dataSetHeaderRange.value(SysQuery::valueNot(NoYes::Yes));
                dataSetHeaderRange.status(RangeStatus::Locked);
                break;
        }

        if (_resourceRecId && ProjTable::createResourceConnection(_resourceRecId, isIntercompany))
        {
            employeeAssocDatasource = baseLookupTableDatasource.addDataSource(tableNum(ProjProjectEmployeeAssoc));
            employeeAssocDatasource.relations(false);
            employeeAssocDatasource.joinMode(JoinMode::ExistsJoin);
            employeeAssocDatasource.addLink(_projIdField, fieldNum(ProjProjectEmployeeAssoc, ProjId));
            employeeAssocRange = employeeAssocDatasource.addRange(fieldNum(ProjProjectEmployeeAssoc, Resource));
            employeeAssocRange.value(queryValue(_resourceRecId));
            employeeAssocRange.status(RangeStatus::Locked);

        }

        if (_categoryId && ProjTable::createCategoryConnection())
        {
            // The lookup uses view which provides all the projects for which 
            // category validation is false, 
            // or assigned to a category or to a category validation group.
            QueryBuildDataSource qbdsProjCategory = baseLookupTableDatasource.addDataSource(tableNum(ProjCategoryUnionValidateProjCategoryView));
            qbdsProjCategory.relations(false);
            qbdsProjCategory.joinMode(JoinMode::ExistsJoin);
            qbdsProjCategory.addLink(_projIdField, fieldNum(ProjCategoryUnionValidateProjCategoryView, ProjId));

            categoryValidationRange = qbdsProjCategory.addRange(fieldNum(ProjCategoryUnionValidateProjCategoryView, CategoryId));
            categoryValidationRange.value(_categoryId);
            categoryValidationRange.status(RangeStatus::Locked);

            return q;
        }
        return q;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks for temp table id with specific table number.
    /// </summary>
    /// <param name = "_tmpTableId">
    ///     A <c>TableId</c> .
    /// </param>
    /// <returns>
    ///     true if table Id matches with specific tables; otherwise, false.
    /// </returns>
    protected boolean isJournal(TableId _tmpTableId)
    {
        boolean ret = false;

        if (_tmpTableId == tableNum(TSTimesheetLine)         ||
            _tmpTableId == tableNum(TmpProjAdjustmentCreate) ||
            _tmpTableId == tableNum(TmpProjAdjustmentSplit)  ||
            _tmpTableId == tableNum(SalesTable)              ||
            _tmpTableId == tableNum(SalesLine)               ||
            _tmpTableId == tableNum(PurchTable)              ||
            _tmpTableId == tableNum(PurchLine)               ||
            _tmpTableId == tableNum(PurchReqTable)           ||
            _tmpTableId == tableNum(PurchReqLine)            ||
            _tmpTableId == tableNum(SMAAgreementTable)       ||
            _tmpTableId == tableNum(SMAServiceOrderTable)    ||
            _tmpTableId == tableNum(JmgTimecardTrans)        ||
            _tmpTableId == tableNum(JmgStampJournalTrans)    ||
            _tmpTableId == tableNum(TrvExpTable)             ||
            // <PubSect>
            _tmpTableId == tableNum(CustInvoiceLine)         ||
            _tmpTableId == tableNum(CustBillingCodeVersion)  ||
            // </PubSect>
            _tmpTableId == tableNum(TrvExpTrans)             ||
            _tmpTableId == tableNum(ProjectAccountingDistribution))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjJournal</Name>
				<Source><![CDATA[
    private boolean isProjJournal(TableId _tmpTableId)
    {
        boolean ret = false;

        if (_tmpTableId == tableNum(ProjJournalTrans)        ||
            _tmpTableId == tableNum(InventJournalTrans)      ||
            _tmpTableId == tableNum(LedgerJournalTrans)      ||
            _tmpTableId == tableNum(LedgerJournalTrans_Project) ||
            _tmpTableId == tableNum(ProjJournalTable))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isForecast</Name>
				<Source><![CDATA[
    private boolean isForecast(TableId _tmpTableId)
    {
        boolean ret = false;

        if (_tmpTableId == tableNum(ProjForecastEmpl)       ||
            _tmpTableId == tableNum(ProjForecastCost)       ||
            _tmpTableId == tableNum(ProjForecastRevenue)    ||
            _tmpTableId == tableNum(ForecastSales)          ||
            _tmpTableId == tableNum(ProjForecastOnAcc))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryForProject</Name>
				<Source><![CDATA[
    private void buildQueryForProject(QueryBuildDataSource _projTableDatasource, ProjStatusRule _projStatusRule, FieldId _statusField, FieldId _typeField)
    {
        QueryBuildDataSource    projStatusTypeRuleDatasource;
        QueryBuildRange         projStatusRuleRange;

        _projTableDatasource.addRange(_statusField).value(SysQuery::valueNot(ProjStatus::Completed));

        // Filtering Lookup on project based on the project stage set up.
        projStatusTypeRuleDatasource = _projTableDatasource.addDataSource(tableNum(ProjStatusTypeRule));
        projStatusTypeRuleDatasource.relations(false);
        projStatusTypeRuleDatasource.joinMode(JoinMode::ExistsJoin);
        projStatusTypeRuleDatasource.addLink(_statusField, fieldNum(ProjStatusTypeRule, ProjStatus));
        projStatusTypeRuleDatasource.addLink(_typeField, fieldNum(ProjStatusTypeRule, ProjType));

        projStatusRuleRange = projStatusTypeRuleDatasource.addRange(fieldNum(ProjStatusTypeRule, ProjStatusRule));
        projStatusRuleRange.value(queryValue(_projStatusRule));
        projStatusRuleRange.status(RangeStatus::Locked);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        useProjType = false;
        smaServiceOrderTable = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustAccount</Name>
				<Source><![CDATA[
    public CustAccount parmCustAccount(CustAccount _custAccount = custAccount)
    {
        custAccount = _custAccount;

        return custAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsIntercompany</Name>
				<Source><![CDATA[
    public boolean parmIsIntercompany(boolean _isIntercompany = isIntercompany)
    {
        isIntercompany = _isIntercompany;

        return isIntercompany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjType</Name>
				<Source><![CDATA[
    public ProjType parmProjType(ProjType _projType = projType)
    {
        projType = _projType;

        return projType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSMAServiceOrderTable</Name>
				<Source><![CDATA[
    public SMAServiceOrderTable parmSMAServiceOrderTable(SMAServiceOrderTable _smaServiceOrderTable = smaServiceOrderTable)
    {
        smaServiceOrderTable = _smaServiceOrderTable;

        return smaServiceOrderTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseProjType</Name>
				<Source><![CDATA[
    public boolean parmUseProjType(boolean _useProjType = useProjType)
    {
        useProjType = _useProjType;

        return useProjType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>