<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>psaIndirectComponentTransJournalizer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class creates indirect component transactions for a given project-based source document line item.
/// </summary>
public class psaIndirectComponentTransJournalizer
{
    SourceDocumentLineItem      sourceDocumentLineItem;
    PSAIndirectComponentGroupId indirectComponentGroupId;
    ProjTransIdBase             sourceTransId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canCreateTrans</Name>
				<Source><![CDATA[
    private boolean canCreateTrans()
    {
        // Currently we only create indirect component transactions thorugh this class for vendor invoices.
        return (sourceDocumentLineItem is VendorInvoiceLineSourceDocLineItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>ProjJournalTrans</c> entity from the source document line item.
    /// </summary>
    /// <returns>
    /// <c>ProjJournalTrans</c> created from the source document line item.
    /// </returns>
    /// <remarks>
    /// We need a <c>ProjJournalTrans</c> entity because the existing implementation of
    /// indirect components, based on <c>ProjPost</c> hierarchy, depends on it.
    /// </remarks>
    private ProjJournalTrans getJournalTrans()
    {
        ProjJournalTrans                        projJournalTrans;
        SourceDocumentLineItemIProductQuantity  productQuantity;
        SourceDocumentLineItemIProjectTransDate projectTransDateRevenue;

        if (sourceDocumentLineItem is VendorInvoiceLineSourceDocLineItem)
        {
            projJournalTrans.CurrencyId = ProjectSourceDocumentLineItemHelper::salesCurrency(sourceDocumentLineItem).CurrencyCode;
        }
        else
        {
            projJournalTrans.CurrencyId = sourceDocumentLineItem.parmTransactionCurrencyCode();
        }

        projJournalTrans.DefaultDimension   = sourceDocumentLineItem.parmDefaultDimension();
        projJournalTrans.TransDate          = sourceDocumentLineItem.parmAccountingDate();

        projectTransDateRevenue             = sourceDocumentLineItem as SourceDocumentLineItemIProjectTransDate;
        projJournalTrans.ProjId             = projectTransDateRevenue.parmProjectId();
        projJournalTrans.ActivityNumber     = projectTransDateRevenue.parmProjectActivityNumber();
        projJournalTrans.CategoryId         = projectTransDateRevenue.parmProjectCategoryId();
        projJournalTrans.Resource           = projectTransDateRevenue.parmProjectResourceRecId();
        projJournalTrans.ResourceCategory   = projectTransDateRevenue.parmProjectResourceCategoryRecId();
        projJournalTrans.LinePropertyId     = projectTransDateRevenue.parmProjectLineProperty();
        projJournalTrans.ProjTransDate      = projectTransDateRevenue.parmProjTransDate();
        projJournalTrans.TaxGroupId         = projectTransDateRevenue.parmProjectSalesTaxGroup();
        projJournalTrans.TaxItemGroupId     = projectTransDateRevenue.parmProjectItemSalesTaxGroup();
        projJournalTrans.SalesPrice         = projectTransDateRevenue.parmProjectSalesPrice();

        productQuantity = sourceDocumentLineItem as SourceDocumentLineItemIProductQuantity;
        projJournalTrans.Qty                = productQuantity.parmQuantity();

        if (projJournalTrans.Qty != 0)
        {
            projJournalTrans.CostPrice = sourceDocumentLineItem
                                            .parmSourceDocumentAmountMap()
                                            .lookup(MonetaryAmount::ExtendedPrice)
                                            .parmAmount() / projJournalTrans.Qty;
        }
        projJournalTrans.psaIndirectComponentGroup  = indirectComponentGroupId;
        projJournalTrans.TransId                    = sourceTransId;

        return projJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the indirect component transactions.
    /// </summary>
    public void journalize()
    {
        PSAProjPostEmplIndirectJournal          psaProjPostEmplIndirectJournal;
        LedgerVoucher                           ledgerVoucher;
        LedgerVoucherObject                     ledgerVoucherObject;
        Voucher                                 voucher;
        ProjJournalTrans                        projJournalTrans;
        AccountingDistribution                  accountingDistribution;
        ProjParameters                          projParameters;
        AccountingDate                          accountingDate;
        NumberSeq                               numberSeq;
        NumberSequenceCode                      voucherSequenceCode;

        if (this.canCreateTrans())
        {
            projJournalTrans = this.getJournalTrans();

            projParameters = ProjParameters::find();
            // If the accounting date can be updated to next open fiscal period
            if (projParameters.AllowDateCorrection)
            {
                // If accounting date is updateable and the fiscal period of the current transaction is closed,
                // the accounting distribution record of timesheet transaction is already updated with next open fiscal period date in the SourceDocumentLineState class
                select firstOnly AccountingDate from accountingDistribution
                    where accountingDistribution.SourceDocumentLine == sourceDocumentLineItem.parmSourceDocumentLine().RecId;

                accountingDate =  accountingDistribution.AccountingDate;
            }
            else
            {
                accountingDate = projJournalTrans.ProjTransDate;
            }

            voucherSequenceCode = ProjParameters::numRefProjJournalId().numberSequenceTable().NumberSequence;
            ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Detail, SysModule::Project, voucherSequenceCode);
            numberSeq = NumberSeq::newGetVoucherFromCode(voucherSequenceCode, NumberSeqScopeFactory::createDataAreaScope(), true);
            voucher = numberSeq.voucher();
            ledgerVoucherObject = LedgerVoucherObject::newVoucher(voucher,
                                                                  accountingDate,
                                                                  SysModule::Project,
                                                                  LedgerTransType::Project,
                                                                  NoYes::No);

            ledgerVoucher.addVoucher(ledgerVoucherObject);

            psaProjPostEmplIndirectJournal = ProjPost::psaNewCreateProjIndirectCostAndRevenue(projJournalTrans, ledgerVoucher) as PsaProjPostEmplIndirectJournal;
            psaProjPostEmplIndirectJournal.parmSkipCostComponent(true);
            psaProjPostEmplIndirectJournal.createFundingAllocationListBasedOnTrx(ProjTransType::Hour);
            psaProjPostEmplIndirectJournal.postTrans();

            ledgerVoucher.end();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// The <c>SourceDocumentLineItem</c> that will be the source of the indirect components.
    /// </param>
    /// <param name="_indirectComponentGroupId">
    /// The indirect component group ID to calculate the indirect component rates.
    /// </param>
    /// <param name="_sourceTransId">
    /// The transaction ID of the project actual generated for the source transaction.
    /// </param>
    protected void new(
        SourceDocumentLineItem      _sourceDocumentLineItem,
        PSAIndirectComponentGroupId _indirectComponentGroupId,
        ProjTransIdBase             _sourceTransId)
    {
        sourceDocumentLineItem      = _sourceDocumentLineItem;
        indirectComponentGroupId    = _indirectComponentGroupId;
        sourceTransId               = _sourceTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForActualHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>psaIndirectComponentTransJournalizer</c> from a project actual header and source document line item.
    /// </summary>
    /// <param name="_projectActualHeader">
    /// Project actual header that is a source of indirect component transactions.
    /// </param>
    /// <param name="_sourceDocumentLineItem">
    /// <c>SourceDocumentLineItem</c> that can be a source of indirect component transactions.
    /// </param>
    /// <returns>
    /// New instance of <c>psaIndirectComponentTransJournalizer</c>.
    /// </returns>
    public static psaIndirectComponentTransJournalizer constructForActualHeader(Common _projectActualHeader, SourceDocumentLineItem _sourceDocumentLineItem)
    {
        psaIndirectComponentTransJournalizer    journalizer;
        ProjEmplTrans                           emplTrans;

        if (emplTrans is ProjEmplTrans)
        {
            emplTrans = _projectActualHeader as ProjEmplTrans;

            journalizer = new psaIndirectComponentTransJournalizer(
                _sourceDocumentLineItem,
                emplTrans.PSAIndirectComponentGroup,
                emplTrans.TransId);
        }

        return journalizer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIndirectComponentTransSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a given project actual header may be the source of indirect component transactions.
    /// </summary>
    /// <param name="_projectActualHeader">
    /// Project actual header record to be checked.
    /// </param>
    /// <returns>
    /// true if indirect component transactions can be generated for the actual header; false otherwise.
    /// </returns>
    public static boolean isIndirectComponentTransSource(Common _projectActualHeader)
    {
        ProjEmplTrans emplTrans;

        // Currently only hour transactions are supported by indirect costs
        if (_projectActualHeader is ProjEmplTrans)
        {
           emplTrans = _projectActualHeader as ProjEmplTrans;
            if (emplTrans.PSAIndirectComponentGroup)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>