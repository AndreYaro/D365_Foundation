<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmmUpdateBusRel</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SmmUpdateBusRel
{
    smmBusRelTypeId     type;
    boolean             checkNumberSequence;
    boolean             checkLicense;
    boolean             insertLicense;
    boolean             updateLicense;
    boolean             updateLicenseOK;
    boolean             insertLicenseOK;

    #define.blank('')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    // This method must be called before one of the update methods
    public boolean init(tableId _tableId)
    {
        switch (_tableId)
        {
            case tablenum(CustTable):
                if (!type)
                {
                    type = smmBusRelTypeGroup::getCustomerType();

                    if (!type)
                    {
                        return false;
                    }
                }
                break;
            case tablenum(VendTable):
                if (!type)
                {
                    type = smmBusRelTypeGroup::getVendorType();

                    if (!type)
                    {
                        return false;
                    }
                }
                break;
        }

        if (checkNumberSequence)
        {
            if (!smmBusRelTable::checkNumbersequence())
            {
                return false;
            }
        }

        if (checkLicense)
        {
            updateLicenseOK = smmLicense::busRelTableUpdate();
            insertLicenseOK = smmLicense::busRelTableInsert();
        }
        else
        {
            updateLicenseOK = updateLicense;
            insertLicenseOK = insertLicense;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        type                    = '';
        checkNumberSequence     = true;
        checkLicense            = true;
        insertLicense           = false;
        updateLicense           = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckLicense</Name>
				<Source><![CDATA[
    public boolean parmCheckLicense(boolean _checkLicense = checkLicense)
    {
        checkLicense = _checkLicense;

        return checkLicense;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckNumberSequence</Name>
				<Source><![CDATA[
    public boolean parmCheckNumberSequence(boolean _checkNumberSequence = checkNumberSequence)
    {
        checkNumberSequence = _checkNumberSequence;

        return checkNumberSequence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInsertLicense</Name>
				<Source><![CDATA[
    public boolean parmInsertLicense(boolean _insertLicense = insertLicense)
    {
        insertLicense = _insertLicense;

        return insertLicense;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTypeId</Name>
				<Source><![CDATA[
    public smmBusRelTypeId parmTypeId(smmBusRelTypeId _type = type)
    {
        type = _type;

        return _type;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateLicense</Name>
				<Source><![CDATA[
    public boolean parmUpdateLicense(boolean _updateLicense = updateLicense)
    {
        updateLicense = _updateLicense;

        return updateLicense;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromCustTableSFA2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures that the business relation table is updated with the correct information when a change is
    /// made directly in the <c>CustTable</c> table, either as an insert or an update, this method is
    /// called.
    /// </summary>
    /// <param name="_custTable">
    /// A <c>CustTable</c> record that is used to update the business relation.
    /// </param>
    /// <param name="_smmBusRelTable">
    /// A business relation to update. If it is not specified, the business relation with the same party as
    /// the specified customer is used.
    /// </param>
    public void updateFromCustTableSFA2(CustTable _custTable, smmBusRelTable _smmBusRelTable  = null)
    {
        smmBusRelTable      smmBusRelTable;
        MCRsmmBusRelTable   mcrSmmBusRelTable;
        MCRCustTable        mcrCustTable;

        ttsbegin;

        if (_smmBusRelTable)
        {
            smmBusRelTable = _smmBusRelTable;
        }
        else
        {
            smmBusRelTable = smmBusRelTable::findByParty(_custTable.Party, true);
        }

        if (smmBusRelTable && updateLicenseOK)
        {
            this.initSmmBusRelTableFromCustTable(smmBusRelTable, _custTable);

            if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
            {
                mcrCustTable = mcrCustTable::findByCustAccount(_custTable.AccountNum);
                if (mcrCustTable)
                {
                    mcrSmmBusRelTable = smmBusRelTable.mcrsmmBusRelTable();

                    mcrSmmBusRelTable.SOAllocPriority   = mcrCustTable.SOAllocPriority;
                    mcrSmmBusRelTable.FTCExempt         = mcrCustTable.FTCExempt;
                    mcrSmmBusRelTable.AutoCancel        = mcrCustTable.AutoCancel;
                    mcrSmmBusRelTable.OrigSourceId      = mcrCustTable.OrigSourceId;

                    smmBusRelTable.mcrPackMCRsmmBusRelTable(mcrSmmBusRelTable);
                }
            }

            // Update business relation without updating master tables (Customer)
            smmBusRelTable.update(false);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSmmBusRelTableFromCustTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>smmBusRelTable</c> record from the given <c>CustTable</c> record.
    /// </summary>
    /// <param name = "_smmBusRelTable">
    /// The <c>smmBusRelTable</c> record.
    /// </param>
    /// <param name = "_custTable">
    /// The <c>CustTable</c> record to initialize from.
    /// </param>
    protected void initSmmBusRelTableFromCustTable(smmBusRelTable _smmBusRelTable, CustTable _custTable)
    {
        _smmBusRelTable.Party               = _custTable.Party;
        _smmBusRelTable.DefaultDimension    = _custTable.DefaultDimension;
        _smmBusRelTable.LineOfBusinessId    = _custTable.LineOfBusinessId;
        _smmBusRelTable.Currency            = _custTable.Currency;
        _smmBusRelTable.CustGroup           = _custTable.CustGroup;
        _smmBusRelTable.VendGroup           = #blank;
        _smmBusRelTable.TaxGroup            = _custTable.TaxGroup;
        _smmBusRelTable.CompanyNAFCode      = _custTable.CompanyNAFCode;
        _smmBusRelTable.CompanyIdSiret      = _custTable.CompanyIdSiret;

        _smmBusRelTable.SalesCalendarId     = _custTable.SalesCalendarId;

        _smmBusRelTable.Blocked              = _custTable.Blocked;
        _smmBusRelTable.OneTimeRelation      = _custTable.OneTimeCustomer;
        _smmBusRelTable.CreditMax            = _custTable.CreditMax;
        _smmBusRelTable.CreditRating         = _custTable.CreditRating;
        _smmBusRelTable.MandatoryCreditLimit = _custTable.MandatoryCreditLimit;
        _smmBusRelTable.DlvTerm              = _custTable.DlvTerm;
        _smmBusRelTable.DlvMode              = _custTable.DlvMode;
        _smmBusRelTable.FreightZone          = _custTable.FreightZone;
        _smmBusRelTable.DestinationCodeId    = _custTable.DestinationCodeId;

        _smmBusRelTable.InclTax              = _custTable.InclTax;
        _smmBusRelTable.FiscalCode           = _custTable.FiscalCode;

        _smmBusRelTable.SalesDistrict        = _custTable.SalesDistrictId;
        _smmBusRelTable.Segment              = _custTable.SegmentId;
        _smmBusRelTable.Subsegment           = _custTable.SubsegmentId;
        _smmBusRelTable.CompanyChain         = _custTable.CompanyChainId;
        _smmBusRelTable.MainContactWorker    = _custTable.MainContactWorker;
        _smmBusRelTable.Memo                 = _custTable.Memo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromVendTableSFA2</Name>
				<Source><![CDATA[
    /// <summary>
    /// When a change is made directly in <c>VendTable</c>, either as an insert or an update, this method
    /// is called to ensure that the business relation table is updated with the correct information
    /// </summary>
    /// <param name="_vendTable">
    /// A <c>VendTable</c> record that is used to update the business relation.
    /// </param>
    /// <param name="_smmBusRelTable">
    /// A business relation to update. If it is not specified, the business relation with the same party as
    /// the specified vendor is used.
    /// </param>
    public void updateFromVendTableSFA2(VendTable _vendTable, smmBusRelTable _smmBusRelTable  = null)
    {
        smmBusRelTable smmBusRelTable;

        ttsbegin;

        if (_smmBusRelTable)
        {
            smmBusRelTable = _smmBusRelTable;
        }
        else
        {
            smmBusRelTable = smmBusRelTable::findByParty(_vendTable.Party, true);
        }

        if (smmBusRelTable && updateLicenseOK)
        {
            smmBusRelTable.initFromVendTable(type, _vendTable);

            // Update business relation without updating master tables (Vendor)
            smmBusRelTable.update(false);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SmmUpdateBusRel construct()
    {
        return new SmmUpdateBusRel();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>