<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventJournalCleanUp</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventJournalCleanUp extends RunBaseBatch implements BatchRetryable
{
    NoYes                       cleanUpMovement;
    NoYes                       cleanUpProfitLoss;
    NoYes                       cleanUpTransfer;
    NoYes                       cleanUpBOM;
    NoYes                       cleanUpCounting;
    NoYes                       cleanUpProject;
    NoYes                       cleanUpTagCounting;
    NoYes                       cleanUpAsset;
    NoYes                       cleanUpOwnershipChange;

    DialogRunbase               dialog;

    DialogField                 dialogCleanUpMovement;
    DialogField                 dialogCleanUpProfitLoss;
    DialogField                 dialogCleanUpTransfer;
    DialogField                 dialogCleanUpBOM;
    DialogField                 dialogCleanUpCounting;
    DialogField                 dialogCleanUpProject;
    DialogField                 dialogCleanUpTagCounting;
    DialogField                 dialogCleanUpAsset;
    DialogField                 dialogCleanUpOwnershipChange;

    private str deleteJournalTableSqlStatement;
    private str deleteJournalTransSqlStatement;
    private str deleteOriginJournalTransSqlStatement;
    private str deleteOriginJournalTransReceiptSqlStatement;
    private str deleteInventJournalTransTagSqlStatement;
    private str deleteInventBatchJournalSqlStatement;

    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        cleanUpMovement,
        cleanUpProfitLoss,
        cleanUpTransfer,
        cleanUpBOM,
        cleanUpCounting,
        cleanUpProject,
        cleanUpTagCounting,
        cleanUpAsset,
        cleanUpOwnershipChange
    #Endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteJournals</Name>
				<Source><![CDATA[
    protected void deleteJournals()
    {
        InventJournalTable      inventJournalTable;
        InventJournalTrans      inventJournalTrans;
        InventJournalTrans_Tag  inventJournalTrans_Tag;
        InventBatchJournal      inventBatchJournal;
        InventTransOriginJournalTrans           inventTransOriginJournalTrans;
        InventTransOriginJournalTransReceipt    inventTransOriginJournalTransReceipt;

        inventJournalTable.skipDataMethods(true);
        inventJournalTable.skipDeleteActions(true);

        delete_from inventJournalTable
            where inventJournalTable.Posted         == NoYes::Yes &&
                 (
                 (inventJournalTable.JournalType    == InventJournalType::Movement          && cleanUpMovement)     ||
                 (inventJournalTable.JournalType    == InventJournalType::LossProfit        && cleanUpProfitLoss)   ||
                 (inventJournalTable.JournalType    == InventJournalType::Transfer          && cleanUpTransfer)     ||
                 (inventJournalTable.JournalType    == InventJournalType::BOM               && cleanUpBOM)          ||
                 (inventJournalTable.JournalType    == InventJournalType::Count             && cleanUpCounting)     ||
                 (inventJournalTable.JournalType    == InventJournalType::project           && cleanUpProject)      ||
                 (inventJournalTable.JournalType    == InventJournalType::TagCounting       && cleanUpTagCounting)  ||
                 (inventJournalTable.JournalType    == InventJournalType::Asset             && cleanUpAsset)        ||
                 (inventJournalTable.JournalType    == InventJournalType::OwnershipChange   && cleanUpOwnershipChange)
                 );

        inventJournalTrans.skipDataMethods(true);
        inventJournalTrans.skipDeleteActions(true);
        delete_from inventJournalTrans
            notexists join inventJournalTable
            where inventJournalTable.JournalId == inventJournalTrans.JournalId;

        delete_from inventTransOriginJournalTrans
            where inventTransOriginJournalTrans.InventJournalDataAreaId == curExt()
            notexists join inventJournalTrans
            where inventTransOriginJournalTrans.InventJournalLineNum == inventJournalTrans.LineNum  &&
                    inventTransOriginJournalTrans.InventJournalId == inventJournalTrans.JournalId     &&
                    inventTransOriginJournalTrans.InventJournalDataAreaId == inventJournalTrans.dataAreaId;

        delete_from inventTransOriginJournalTransReceipt
            where inventTransOriginJournalTransReceipt.JournalTransferReceiptDataAreaId == curExt()
            notexists join inventJournalTrans
            where inventTransOriginJournalTransReceipt.JournalTransferReceiptLineNum == inventJournalTrans.LineNum  &&
                    inventTransOriginJournalTransReceipt.JournalTransferReceiptId == inventJournalTrans.JournalId     &&
                    inventTransOriginJournalTransReceipt.JournalTransferReceiptDataAreaId == inventJournalTrans.DataAreaId;

        if (cleanUpTagCounting)
        {
            inventJournalTrans_Tag.skipDataMethods(true);
            inventJournalTrans_Tag.skipDeleteActions(true);
            delete_from inventJournalTrans_Tag
                notexists join inventJournalTable
                where inventJournalTable.JournalId == inventJournalTrans_Tag.JournalId;
        }

        if (cleanUpBOM)
        {
            inventBatchJournal.skipDataMethods(true);
            // Do not want to skip delete actions as there are several tables to cleanup here
            delete_from inventBatchJournal
                where inventBatchJournal.Posted        == NoYes::Yes
                notexists join inventJournalTable
                    where inventJournalTable.JournalId == inventBatchJournal.BOMJournalId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSqlStatement</Name>
				<Source><![CDATA[
    private void initSqlStatement()
    {
        int recordsToDeleteJournalTableBatchSize = this.getJournalTableToDeleteBatchSize();
        int recordsToDeleteBatchSize = this.getRecordsToDeleteBatchSize();

        deleteJournalTableSqlStatement = this.buildSQLForJournalTable(recordsToDeleteJournalTableBatchSize);
        deleteJournalTransSqlStatement = this.buildSQLForJournalTrans(recordsToDeleteBatchSize);
        deleteOriginJournalTransSqlStatement = this.buildSQLForOriginJournalTrans(recordsToDeleteBatchSize);
        deleteOriginJournalTransReceiptSqlStatement = this.buildSQLForOriginJournalTransReceipt(recordsToDeleteBatchSize);
        deleteInventJournalTransTagSqlStatement = this.buildSQLForInventJournalTrans_Tag(recordsToDeleteBatchSize);
        deleteInventBatchJournalSqlStatement = this.buildSQLForInventBatchJournal(recordsToDeleteBatchSize);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteJournalsBySQL</Name>
				<Source><![CDATA[
    private void deleteJournalsBySQL()
    {
        int recordsToDeleteJournalTableBatchSize = this.getJournalTableToDeleteBatchSize();
        int deletedJournalTableRows = recordsToDeleteJournalTableBatchSize;

        while (deletedJournalTableRows == recordsToDeleteJournalTableBatchSize)
        {
            deletedJournalTableRows = this.deleteJournalsDetailWithBatchSize();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteJournalsDetailWithBatchSize</Name>
				<Source><![CDATA[
    private int deleteJournalsDetailWithBatchSize()
    {
        int deletedRows, deletedJournalTableRows;
        int recordsToDeleteBatchSize = this.getRecordsToDeleteBatchSize();

        Connection connection = new Connection();
        Statement statement = connection.createStatement();

        try
        {
            connection.ttsbegin();

            // Delete posted journal table
            deletedJournalTableRows = statement.executeUpdateWithParameters(deleteJournalTableSqlStatement, SqlParams::create());

            // Delete posted journal trans
            deletedRows = recordsToDeleteBatchSize;
            while (deletedRows == recordsToDeleteBatchSize)
            {
                deletedRows = statement.executeUpdateWithParameters(deleteJournalTransSqlStatement, SqlParams::create());
            }

            // Delete InventTransOriginJournalTrans
            deletedRows = recordsToDeleteBatchSize;
            while (deletedRows == recordsToDeleteBatchSize)
            {
                deletedRows = statement.executeUpdateWithParameters(deleteOriginJournalTransSqlStatement, SqlParams::create());
            }

            // Delete InventTransOriginJournalTransReceipt
            deletedRows = recordsToDeleteBatchSize;
            while (deletedRows == recordsToDeleteBatchSize)
            {
                deletedRows = statement.executeUpdateWithParameters(deleteOriginJournalTransReceiptSqlStatement, SqlParams::create());
            }

            // Delete InventJournalTrans_Tag
            if (cleanUpTagCounting)
            {
                deletedRows = recordsToDeleteBatchSize;
                while (deletedRows == recordsToDeleteBatchSize)
                {
                    deletedRows = statement.executeUpdateWithParameters(deleteInventJournalTransTagSqlStatement, SqlParams::create());
                }
            }

            // Delete InventBatchJournal
            if (cleanUpBOM)
            {
                deletedRows = recordsToDeleteBatchSize;
                while (deletedRows == recordsToDeleteBatchSize)
                {
                    deletedRows = statement.executeUpdateWithParameters(deleteInventBatchJournalSqlStatement, SqlParams::create());
                }
            }

            connection.ttscommit();
        }
        catch
        {
            if (connection != null)
            {
                connection.ttsabort();
            }

            throw;
        }
        finally
        {
            statement.close();
            connection.finalize();
        }
        return deletedJournalTableRows;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSQLForJournalTable</Name>
				<Source><![CDATA[
    private str buildSQLForJournalTable(int _recordsToDeleteBatchSize)
    {
        /* Build up the following SQL statement
        delete top(%1) from DBO.InventJournalTable 
            WHERE posted = 1 
                and ((inventJournalTable.JournalType = %1 and 1 = %2)
                    or (inventJournalTable.JournalType = %3 and 1 = %4)
                    or (inventJournalTable.JournalType = %5 and 1 = %6)
                    or (inventJournalTable.JournalType = %7 and 1 = %8)
                    or (inventJournalTable.JournalType = %9 and 1 = %10)
                    or (inventJournalTable.JournalType = %11 and 1 = %12)
                    or (inventJournalTable.JournalType = %13 and 1 = %14)
                    or (inventJournalTable.JournalType = %15 and 1 = %16)
                    or (inventJournalTable.JournalType = %17 and 1 = %18))
                and partition = %19 and dataareaid = %20
        */
        SqlSystem sqlSystem = new SqlSystem();

        str directSQL = strFmt('DELETE TOP(%1) FROM INVENTJOURNALTABLE', sqlSystem.sqlLiteral(_recordsToDeleteBatchSize, true));
        directSQL += strFmt(
            ' WHERE POSTED = 1' +
            ' AND ((INVENTJOURNALTABLE.JOURNALTYPE = %1 AND 1 = %2)' +
                ' OR (INVENTJOURNALTABLE.JOURNALTYPE = %3 AND 1 = %4)' +
                ' OR (INVENTJOURNALTABLE.JOURNALTYPE = %5 AND 1 = %6)' +
                ' OR (INVENTJOURNALTABLE.JOURNALTYPE = %7 AND 1 = %8)' +
                ' OR (INVENTJOURNALTABLE.JOURNALTYPE = %9 AND 1 = %10)' +
                ' OR (INVENTJOURNALTABLE.JOURNALTYPE = %11 AND 1 = %12)' +
                ' OR (INVENTJOURNALTABLE.JOURNALTYPE = %13 AND 1 = %14)' +
                ' OR (INVENTJOURNALTABLE.JOURNALTYPE = %15 AND 1 = %16)' +
                ' OR (INVENTJOURNALTABLE.JOURNALTYPE = %17 AND 1 = %18))' +
            ' AND PARTITION = %19 and DATAAREAID = %20',
            sqlSystem.sqlLiteral(enum2int(InventJournalType::Movement), true), sqlSystem.sqlLiteral(cleanUpMovement, true),
            sqlSystem.sqlLiteral(enum2int(InventJournalType::LossProfit), true), sqlSystem.sqlLiteral(cleanUpProfitLoss, true),
            sqlSystem.sqlLiteral(enum2int(InventJournalType::Transfer), true), sqlSystem.sqlLiteral(cleanUpTransfer, true),
            sqlSystem.sqlLiteral(enum2int(InventJournalType::BOM), true), sqlSystem.sqlLiteral(cleanUpBOM, true),
            sqlSystem.sqlLiteral(enum2int(InventJournalType::Count), true), sqlSystem.sqlLiteral(cleanUpCounting, true),
            sqlSystem.sqlLiteral(enum2int(InventJournalType::project), true), sqlSystem.sqlLiteral(cleanUpProject, true),
            sqlSystem.sqlLiteral(enum2int(InventJournalType::TagCounting), true), sqlSystem.sqlLiteral(cleanUpTagCounting, true),
            sqlSystem.sqlLiteral(enum2int(InventJournalType::Asset), true), sqlSystem.sqlLiteral(cleanUpAsset, true),
            sqlSystem.sqlLiteral(enum2int(InventJournalType::OwnershipChange), true), sqlSystem.sqlLiteral(cleanUpOwnershipChange, true),
            sqlSystem.sqlLiteral(getCurrentPartitionRecId(), true), sqlSystem.sqlLiteral(curext()));

        return directSQL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSQLForJournalTrans</Name>
				<Source><![CDATA[
    private str buildSQLForJournalTrans(int _recordsToDeleteBatchSize)
    {
        /* Build up the following SQL statement
        delete top(100000) a from dbo.inventjournaltrans trans 
            where not exists (select 'x' from INVENTJOURNALTABLE journal 
                where trans.DATAAREAID=journal.DATAAREAID and trans.PARTITION=journal.PARTITION 
                and trans.JOURNALID=journal.JOURNALID) 
            and trans.partition =@partition and trans.dataareaid =@dataareaid
        */
        SqlSystem sqlSystem = new SqlSystem();

        str directSQL = strFmt('DELETE TOP(%1) TRANS FROM INVENTJOURNALTRANS TRANS', sqlSystem.sqlLiteral(_recordsToDeleteBatchSize, true));
        directSQL += strFmt(
            ' WHERE NOT EXISTS (SELECT \'x\' FROM INVENTJOURNALTABLE JOURNAL' +
                ' WHERE TRANS.DATAAREAID = JOURNAL.DATAAREAID AND TRANS.PARTITION = JOURNAL.PARTITION' +
                ' AND TRANS.JOURNALID = JOURNAL.JOURNALID)' +
            ' AND TRANS.PARTITION = %1 and TRANS.DATAAREAID = %2',
            sqlSystem.sqlLiteral(getCurrentPartitionRecId(), true), sqlSystem.sqlLiteral(curext()));

        return directSQL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSQLForOriginJournalTrans</Name>
				<Source><![CDATA[
    private str buildSQLForOriginJournalTrans(int _recordsToDeleteBatchSize)
    {
        /* Build up the following SQL statement
        delete top(100000) a from dbo.InventTransOriginJournalTrans a 
            where not exists (select 'x' from InventJournalTrans b 
                where  a.INVENTJOURNALDATAAREAID=b.DATAAREAID and a.PARTITION=b.PARTITION 
                and a.INVENTJOURNALID=b.JOURNALID and a.INVENTJOURNALLINENUM=b.LINENUM) 
            and a.partition =@partition and a.INVENTJOURNALDATAAREAID =@dataareaid
        */
        SqlSystem sqlSystem = new SqlSystem();

        str directSQL = strFmt('DELETE TOP(%1) TRANSORIGIN FROM INVENTTRANSORIGINJOURNALTRANS TRANSORIGIN', sqlSystem.sqlLiteral(_recordsToDeleteBatchSize, true));
        directSQL += strFmt(
            ' WHERE NOT EXISTS (SELECT \'x\' FROM INVENTJOURNALTRANS TRANS' +
                ' WHERE TRANSORIGIN.INVENTJOURNALDATAAREAID = TRANS.DATAAREAID AND TRANSORIGIN.PARTITION = TRANS.PARTITION' +
                ' AND TRANSORIGIN.INVENTJOURNALID = TRANS.JOURNALID AND TRANSORIGIN.INVENTJOURNALLINENUM = TRANS.LINENUM)' +
            ' AND TRANSORIGIN.PARTITION = %1 and TRANSORIGIN.INVENTJOURNALDATAAREAID = %2',
            sqlSystem.sqlLiteral(getCurrentPartitionRecId(), true), sqlSystem.sqlLiteral(curext()));

        return directSQL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSQLForOriginJournalTransReceipt</Name>
				<Source><![CDATA[
    private str buildSQLForOriginJournalTransReceipt(int _recordsToDeleteBatchSize)
    {
        /* Build up the following SQL statement
        delete top(100000) a from dbo.InventTransOriginJournalTransReceipt a 
            where not exists (select 'x' from InventJournalTrans b 
                where a.JOURNALTRANSFERRECEIPTDATAAREAID=b.DATAAREAID and a.PARTITION=b.PARTITION 
                and a.JOURNALTRANSFERRECEIPTLINENUM=b.LINENUM and a.JOURNALTRANSFERRECEIPTID=b.JOURNALID) 
            and a.partition =@partition and a.JOURNALTRANSFERRECEIPTDATAAREAID =@dataareaid
        */
        SqlSystem sqlSystem = new SqlSystem();

        str directSQL = strFmt('DELETE TOP(%1) TRANSORIGINRECEIPT FROM INVENTTRANSORIGINJOURNALTRANSRECEIPT TRANSORIGINRECEIPT', sqlSystem.sqlLiteral(_recordsToDeleteBatchSize, true));
        directSQL += strFmt(
            ' WHERE NOT EXISTS (SELECT \'x\' FROM INVENTJOURNALTRANS TRANS' +
                ' WHERE TRANSORIGINRECEIPT.JOURNALTRANSFERRECEIPTDATAAREAID = TRANS.DATAAREAID AND TRANSORIGINRECEIPT.PARTITION = TRANS.PARTITION' +
                ' AND TRANSORIGINRECEIPT.JOURNALTRANSFERRECEIPTLINENUM = TRANS.LINENUM AND TRANSORIGINRECEIPT.JOURNALTRANSFERRECEIPTID = TRANS.JOURNALID)' +
            ' AND TRANSORIGINRECEIPT.PARTITION = %1 and TRANSORIGINRECEIPT.JOURNALTRANSFERRECEIPTDATAAREAID = %2',
            sqlSystem.sqlLiteral(getCurrentPartitionRecId(), true), sqlSystem.sqlLiteral(curext()));

        return directSQL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSQLForInventJournalTrans_Tag</Name>
				<Source><![CDATA[
    private str buildSQLForInventJournalTrans_Tag(int _recordsToDeleteBatchSize)
    {
        /* Build up the following SQL statement
        delete top(100000) a from dbo.InventJournalTrans_Tag a 
            where not exists (select 'x' from INVENTJOURNALTABLE b 
                where a.DATAAREAID=b.DATAAREAID and a.PARTITION=b.PARTITION 
                and a.JOURNALID=b.JOURNALID) 
            and a.partition =@partition and a.dataareaid =@dataareaid
        */
        SqlSystem sqlSystem = new SqlSystem();

        str directSQL = strFmt('DELETE TOP(%1) TRANSTAG FROM INVENTJOURNALTRANS_TAG TRANSTAG', sqlSystem.sqlLiteral(_recordsToDeleteBatchSize, true));
        directSQL += strFmt(
            ' WHERE NOT EXISTS (SELECT \'x\' FROM INVENTJOURNALTABLE JOURNAL' +
                ' WHERE TRANSTAG.DATAAREAID = JOURNAL.DATAAREAID AND TRANSTAG.PARTITION = JOURNAL.PARTITION' +
                ' AND TRANSTAG.JOURNALID = JOURNAL.JOURNALID)' +
            ' AND TRANSTAG.PARTITION = %1 and TRANSTAG.DATAAREAID = %2',
            sqlSystem.sqlLiteral(getCurrentPartitionRecId(), true), sqlSystem.sqlLiteral(curext()));

        return directSQL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSQLForInventBatchJournal</Name>
				<Source><![CDATA[
    private str buildSQLForInventBatchJournal(int _recordsToDeleteBatchSize)
    {
        /* Build up the following SQL statement
        delete top(100000) a from dbo.InventBatchJournal a
            where not exists (select 'x' from INVENTJOURNALTABLE b
                where a.DATAAREAID=b.DATAAREAID and a.PARTITION=b.PARTITION
                and a.BOMJOURNALID=b.JOURNALID)
            and a.partition =@partition and a.dataareaid =@dataareaid
            and a.Posted = 1
        */
        SqlSystem sqlSystem = new SqlSystem();

        str directSQL = strFmt('DELETE TOP(%1) BATCHJOURNAL FROM INVENTBATCHJOURNAL BATCHJOURNAL', sqlSystem.sqlLiteral(_recordsToDeleteBatchSize, true));
        directSQL += strFmt(
            ' WHERE NOT EXISTS (SELECT \'x\' FROM INVENTJOURNALTABLE JOURNAL' +
                ' WHERE BATCHJOURNAL.DATAAREAID = JOURNAL.DATAAREAID AND BATCHJOURNAL.PARTITION = JOURNAL.PARTITION' +
                ' AND BATCHJOURNAL.BOMJOURNALID = JOURNAL.JOURNALID)' +
            ' AND BATCHJOURNAL.PARTITION = %1 and BATCHJOURNAL.DATAAREAID = %2' +
            ' AND BATCHJOURNAL.POSTED = 1',
            sqlSystem.sqlLiteral(getCurrentPartitionRecId(), true), sqlSystem.sqlLiteral(curext()));

        return directSQL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecordsToDeleteBatchSize</Name>
				<Source><![CDATA[
    protected int getRecordsToDeleteBatchSize()
    {
        return 100000;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalTableToDeleteBatchSize</Name>
				<Source><![CDATA[
    protected int getJournalTableToDeleteBatchSize()
    {
        return 1000;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be built by using the <c>Dialog</c> class or by using a class that is created in the
    ///    Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        SysDictEnum sysDictEnum = new SysDictEnum(enumNum(InventJournalType));

        DialogField addField(InventJournalType inventJournalType, NoYes curValue)
        {
            if (this.isJournalTypeEnabled(inventJournalType, sysDictEnum))
            {
                return dialog.addFieldValue(extendedTypeStr(NoYesId),curValue,sysDictEnum.value2Label(enum2int(inventJournalType)),"@SYS74967");
            }
            return null;
        }

        dialog = super();

        dialog.addGroup("@SYS74966");
        dialogCleanUpMovement       = addField(InventJournalType::Movement,         cleanUpMovement);
        dialogCleanUpProfitLoss     = addField(InventJournalType::LossProfit,       cleanUpProfitLoss);
        dialogCleanUpTransfer       = addField(InventJournalType::Transfer,         cleanUpTransfer);
        dialogCleanUpBOM            = addField(InventJournalType::BOM,              cleanUpBOM);
        dialogCleanUpCounting       = addField(InventJournalType::Count,            cleanUpCounting);
        dialogCleanUpProject        = addField(InventJournalType::project,          cleanUpProject);
        dialogCleanUpTagCounting    = addField(InventJournalType::TagCounting,      cleanUpTagCounting);
        dialogCleanUpAsset          = addField(InventJournalType::Asset,            cleanUpAsset);
        dialogCleanUpOwnershipChange= addField(InventJournalType::OwnershipChange,  cleanUpOwnershipChange);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        if (dialogCleanUpMovement)
        {
            cleanUpMovement = dialogCleanUpMovement.value();
        }
        else
        {
            cleanUpMovement = NoYes::No;
        }

        if (dialogCleanUpProfitLoss)
        {
            cleanUpProfitLoss = dialogCleanUpProfitLoss.value();
        }
        else
        {
            cleanUpProfitLoss = NoYes::No;
        }

        if (dialogCleanUpTransfer)
        {
            cleanUpTransfer = dialogCleanUpTransfer.value();
        }
        else
        {
            cleanUpTransfer = NoYes::No;
        }

        if (dialogCleanUpBOM)
        {
            cleanUpBOM = dialogCleanUpBOM.value();
        }
        else
        {
            cleanUpBOM = NoYes::No;
        }

        if (dialogCleanUpCounting)
        {
            cleanUpCounting = dialogCleanUpCounting.value();
        }
        else
        {
            cleanUpCounting = NoYes::No;
        }

        if (dialogCleanUpProject)
        {
            cleanUpProject = dialogCleanUpProject.value();
        }
        else
        {
            cleanUpProject = NoYes::No;
        }

        if (dialogCleanUpTagCounting)
        {
            cleanUpTagCounting = dialogCleanUpTagCounting.value();
        }
        else
        {
            cleanUpTagCounting = NoYes::No;
        }

        if (dialogCleanUpAsset)
        {
            cleanUpAsset = dialogCleanUpAsset.value();
        }
        else
        {
            cleanUpAsset = NoYes::No;
        }

        if (dialogCleanUpOwnershipChange)
        {
            cleanUpOwnershipChange = dialogCleanUpOwnershipChange.value();
        }
        else
        {
            cleanUpOwnershipChange = NoYes::No;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables.
    /// </summary>
    /// <remarks>
    ///    This method is called when no <c>SysLastValue</c> record can be found when calling the
    ///    <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        SysDictEnum sysDictEnum = new SysDictEnum(enumNum(InventJournalType));

        super();

        cleanUpMovement         = this.isJournalTypeEnabled(InventJournalType::Movement,        sysDictEnum);
        cleanUpProfitLoss       = this.isJournalTypeEnabled(InventJournalType::LossProfit,      sysDictEnum);
        cleanUpTransfer         = this.isJournalTypeEnabled(InventJournalType::Transfer,        sysDictEnum);
        cleanUpBOM              = this.isJournalTypeEnabled(InventJournalType::BOM,             sysDictEnum);
        cleanUpCounting         = this.isJournalTypeEnabled(InventJournalType::Count,           sysDictEnum);
        cleanUpProject          = this.isJournalTypeEnabled(InventJournalType::project,         sysDictEnum);
        cleanUpTagCounting      = this.isJournalTypeEnabled(InventJournalType::TagCounting,     sysDictEnum);
        cleanUpAsset            = this.isJournalTypeEnabled(InventJournalType::Asset,           sysDictEnum);
        cleanUpOwnershipChange  = this.isJournalTypeEnabled(InventJournalType::OwnershipChange, sysDictEnum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJournalTypeEnabled</Name>
				<Source><![CDATA[
    protected NoYes isJournalTypeEnabled(
        InventJournalType   _inventJournalType,
        SysDictEnum         _sysDictEnum        = new SysDictEnum(enumNum(InventJournalType)))
    {
        ConfigurationKeyId  configurationKeyId  = _sysDictEnum.value2ConfigurationKey(enum2int(_inventJournalType));

        if (!configurationKeyId)
        {
            configurationKeyId = _sysDictEnum.configurationKeyId();
        }

        if (!configurationKeyId || isConfigurationkeyEnabled(configurationKeyId))
        {
            return NoYes::Yes;
        }

        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        try
        {

            if (! this.validate())
            {
                throw error("@SYS18447");
            }

            if (InventJournalCleanUpBySQLFlight::instance().isEnabled())
            {
                this.initSqlStatement();
                this.deleteJournalsBySQL();
            }
            else
            {
                ttsbegin;
                this.deleteJournals();
                ttscommit;
            }

        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Communicates to the batch framework that this class can impersonate the user who requested the task
    /// </summary>
    /// <returns>
    ///    true because this class has been validated to be able to use impersonation.
    /// </returns>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version      = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventJournalCleanUp construct()
    {
        return new InventJournalCleanUp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS74933";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        InventJournalCleanUp          inventJournalCleanUp = InventJournalCleanUp::newStandard(_args);

        if (! inventJournalCleanUp.prompt())
        {
            return;
        }

        inventJournalCleanUp.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    public static InventJournalCleanUp newStandard(Args _args)
    {
        InventJournalCleanUp          inventJournalCleanUp = InventJournalCleanUp::construct();

        inventJournalCleanUp.getLast();
        inventJournalCleanUp.init();

        return inventJournalCleanUp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>