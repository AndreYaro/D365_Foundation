<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustSalesItemGroupStatisticsDP_NA</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustSalesItemGroupStatisticsDP_NA</c> report data provider class for the
///    <c>CustSalesItemGroupStatistics_NA</c> SQL Server Reporting Services report
/// </summary>
/// <remarks>
///    This is the report data provider class for the <c>CustSalesItemGroupStatistics_NA</c> SSRS Report.
/// </remarks>
[
    SRSReportQueryAttribute(querystr(CustSalesItemGroupStatistics_NA)),
    SRSReportParameterAttribute(classstr(CustSalesItemGroupContract_NA))
]
class CustSalesItemGroupStatisticsDP_NA extends SRSReportDataProviderBase
{
    private const str FeatureReference = 'US-00002';

    CustSalesItemGroupStatisticsTmp_NA  custSalesItemGroupStatisticsTmp_NA;
    InventTable                         inventTable;
    InventItemGroupItem                 inventItemGroupItem;
    CustInvoiceTrans                    custInvoiceTrans;
    NoYes    detailed;
    TransDate    fromDate;
    TransDate    toDate;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertedQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the converted quantity.
    /// </summary>
    /// <param name="_itemId">
    ///    The item ID.
    /// </param>
    /// <returns>
    ///    The item quantity.
    /// </returns>
    private Qty convertedQty(ItemId _itemId)
    {
        CustInvoiceTrans    custInvTrans;
        Qty                 itemQty;

        while select ItemId, SalesUnit, Qty, InventDimId from custInvTrans
            where custInvTrans.ItemId == _itemId
            &&   (custInvTrans.InvoiceDate  >= fromDate || !fromDate) 
            &&   (custInvTrans.InvoiceDate  <= toDate || !toDate)
        {
            itemQty += InventTableModule::unitConvert(custInvTrans.ItemId,  
                                                      ModuleInventPurchSales::Sales,
                                                      custInvTrans.SalesUnit, 
                                                      custInvTrans.Qty,
                                                      custInvTrans.InventDimId);
        }

        return itemQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustSalesItemGroupStatisticsDS_NA</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the data from the temporary <c>CustSalesItemGroupStatisticsTmp_NA</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>CustSalesItemGroupStatisticsTmp_NA</c> table.
    /// </returns>
    [SRSReportDataSetAttribute('CustSalesItemGroupStatisticsDS_NA'), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CustSalesItemGroupStatisticsTmp_NA getCustSalesItemGroupStatisticsDS_NA()
    {
        select * from custSalesItemGroupStatisticsTmp_NA;
        return custSalesItemGroupStatisticsTmp_NA;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates dialog.
    /// </summary>

    private void getFromDialog()
    {
        CustSalesItemGroupContract_NA contract=this.parmDataContract() as CustSalesItemGroupContract_NA;
        detailed = contract.parmDetailed();
        fromDate = contract.parmFromDate();
        toDate = contract.parmToDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Process the SQL Server Reporting Services report business logic
    /// </summary>
    /// <remarks>
    ///    This method provides the ability to write the report business logic.This method will be called by
    ///    SSRS at runtime.The method should compute data and populate the data tables that will be returned
    ///    to SSRS.
    /// </remarks>
    public void processReport()
    {
        QueryRun queryRun;
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRangeInvoiceDate;

        this.getFromDialog();

        queryBuildDataSource = this.parmQuery().dataSourceTable(tablenum(CustInvoiceTrans));
        queryBuildRangeInvoiceDate = queryBuildDataSource.addRange(fieldnum(CustInvoiceTrans,InvoiceDate));

        queryBuildRangeInvoiceDate.value(strfmt('%1..%2',date2StrUsr(fromDate,DateFlags::None),date2StrUsr(toDate,DateFlags::None)));

        queryRun = new QueryRun(this.parmQuery());

        while (queryRun.next())
        {
            inventTable         = queryRun.get(tablenum(InventTable));
            custInvoiceTrans    = queryRun.get(tablenum(CustInvoiceTrans));
            inventItemGroupItem = queryRun.get(tablenum(InventItemGroupItem));

            custSalesItemGroupStatisticsTmp_NA.ItemGroupId = inventItemGroupItem.ItemGroupId;
            custSalesItemGroupStatisticsTmp_NA.ItemGroupName = InventItemGroup::name(inventItemGroupItem.ItemGroupId);
            custSalesItemGroupStatisticsTmp_NA.ItemId = inventTable.ItemId;
            custSalesItemGroupStatisticsTmp_NA.ItemName = inventTable.defaultProductName();
            custSalesItemGroupStatisticsTmp_NA.LineAmountMST = custInvoiceTrans.LineAmountMST;
            custSalesItemGroupStatisticsTmp_NA.UnitOfMeasure = InventTableModule::find(inventTable.ItemId, ModuleInventPurchSales::Sales).UnitId;
            custSalesItemGroupStatisticsTmp_NA.ConvertedQty = this.convertedQty(inventTable.ItemId);
            custSalesItemGroupStatisticsTmp_NA.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>