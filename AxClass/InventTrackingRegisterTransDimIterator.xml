<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTrackingRegisterTransDimIterator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The iterator class which allows to iterate over registred tracking dimensions.
/// </summary>
class InventTrackingRegisterTransDimIterator
{
    InventTrackingRegisterTrans inventTrackingRegisterTrans;
    InventDim                   trackingInventDim;
    List                        salesProcessActiveFields;
    ItemId                      prevItemId;
    boolean                     isFirstRecord;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currentQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns quntity of the current line.
    /// </summary>
    /// <returns>
    /// A quantity of serial numbers on the line.
    /// </returns>
    public InventQty currentQty()
    {
        return inventTrackingRegisterTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates instance of the <c>InventTrackingRegisterTransDimIterator</c> class.
    /// </summary>
    /// <param name="_inventTrackingRegisterTrans">
    /// The <c>InventTrackingRegisterTrans</c> buffer.
    /// </param>
    /// <param name="_trackingInventDim">
    /// The <c>InventDim</c> buffer.
    /// </param>
    protected void new( InventTrackingRegisterTrans _inventTrackingRegisterTrans,
                        InventDim                   _trackingInventDim)
    {
        inventTrackingRegisterTrans = _inventTrackingRegisterTrans;
        trackingInventDim = _trackingInventDim;
        isFirstRecord = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextTrackingDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns next dimension which should be used in the <c>InventReportDimHistory</c>
    /// </summary>
    /// <param name="_baseInventDim">
    /// The <c>InventDim</c> buffer containing base dimension.
    /// </param>
    /// <returns>
    /// The <c>InventDim</c> buffer including data from base dimesion and tracking dimension.
    /// </returns>
    public InventDim nextTrackingDim(InventDim _baseInventDim)
    {
        InventDim   resultDim;

        if (!isFirstRecord)
        {
            if (inventTrackingRegisterTrans)
            {
                next inventTrackingRegisterTrans;
            }
        }
        else
        {
            isFirstRecord = false;
        }

        if (inventTrackingRegisterTrans)
        {
            resultDim.data(_baseInventDim);

            ItemId itemId = inventTrackingRegisterTrans.itemId();
            if (prevItemId !=  itemId)
            {
                salesProcessActiveFields = InventDimGroupSetup::newItemId(itemId).salesProcessActiveFields();
                prevItemId = itemId;
            }

            resultDim.initFromInventDim(trackingInventDim, salesProcessActiveFields);

            resultDim = InventDim::findOrCreate(resultDim);
        }

        return resultDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromFinancialJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create instance of the <c>InventTrackingRegisterTransDimIterator</c> class for the financial journal line.
    /// </summary>
    /// <param name="_journalLine">
    /// Financial journal buffer.
    /// </param>
    /// <returns>
    /// Instance of the <c>InventTrackingRegisterTransDimIterator</c>.
    /// </returns>
    public static InventTrackingRegisterTransDimIterator newFromFinancialJournalLine(Common _journalLine)
    {
        InventTrackingRegisterTrans inventTrackingRegisterTrans;
        InventDim                   trackingInventDim;

        select inventTrackingRegisterTrans
            join trackingInventDim where trackingInventDim.InventDimId == inventTrackingRegisterTrans.InventDimId
                && inventTrackingRegisterTrans.FinancialRefRecId == _journalLine.RecId
                && inventTrackingRegisterTrans.FinancialRefTableId == _journalLine.TableId;

        return new InventTrackingRegisterTransDimIterator(inventTrackingRegisterTrans, trackingInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPhysicalJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create instance of the <c>InventTrackingRegisterTransDimIterator</c> class for the physical journal line.
    /// </summary>
    /// <param name="_journalLine">
    /// Physical journal buffer.
    /// </param>
    /// <returns>
    /// Instance of the <c>InventTrackingRegisterTransDimIterator</c>.
    /// </returns>
    public static InventTrackingRegisterTransDimIterator newFromPhysicalJournalLine(Common _journalLine)
    {
        InventTrackingRegisterTrans inventTrackingRegisterTrans;
        InventDim                   trackingInventDim;

        select inventTrackingRegisterTrans
            join trackingInventDim where trackingInventDim.InventDimId == inventTrackingRegisterTrans.InventDimId
                && inventTrackingRegisterTrans.PhysicalRefRecId == _journalLine.RecId
                && inventTrackingRegisterTrans.PhysicalRefTableId == _journalLine.TableId;

        return new InventTrackingRegisterTransDimIterator(inventTrackingRegisterTrans, trackingInventDim);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
