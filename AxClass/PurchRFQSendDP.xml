<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQSendDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchRFQSendDP</c> class is the Data Provider class of the <c>RFQSend</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(PurchRFQSend)),
    SRSReportParameterAttribute(classStr(PurchRFQSendContract))
]
class PurchRFQSendDP extends SRSReportDataProviderBase
{
    PurchRFQSendTmp                 tmpPurchRFQSend;

    private InventDimCtrl_Rep_Purch inventDimReport;
    private container               inventDimSetup;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDocumentNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the note that has been attached to the request for quotation case, case line or amendment.
    /// </summary>
    /// <param name="_common">
    /// A <c>Common</c> record that either contains the header information or line information.
    /// </param>
    /// <returns>
    /// The note that has been attached to the invoice.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// If the <c>common</c> record is not a <c>VendRFQJour</c> record or <c>VendRFQTrans</c> or <c>VendRFQAmendmentJour</c>
    /// record.
    /// </exception>
    public Notes getDocumentNote(Common _common)
    {
        DocuRefSearch   docuRefSearch;
        Notes           notes;
        DocuOnFormular  docuOnFormular;
        VendFormLetterDocument vendFormLetterDocument = VendFormLetterDocument::find();

        switch (_common.TableId)
        {
            case tableNum(VendRFQJour):
                docuOnFormular = DocuOnFormular::Head;
                break;

            case tableNum(VendRFQTrans):
                docuOnFormular = DocuOnFormular::Line;
                break;

            case tableNum(VendRFQAmendmentJour):
                docuOnFormular = DocuOnFormular::Line;
                break;

            default:
                // Exit the method if the record is not VendRFQJour nor VendRFQTrans nor VendRFQAmendmentJour.
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        if ((vendFormLetterDocument.DocuOnPurchRFQ == docuOnFormular)
            || (vendFormLetterDocument.DocuOnPurchRFQ == DocuOnFormular::All))
        {
            docuRefSearch = DocuRefSearch::newTypeIdAndRestriction(_common,
                                                                vendFormLetterDocument.DocuTypePurchRFQ,
                                                                DocuRestriction::External);
            notes = Docu::concatDocuRefNotes(docuRefSearch);
        }

        return notes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInventDimReportSetup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the inventory dimension information.
    /// </summary>
    private void initializeInventDimReportSetup()
    {
        container   inventDimSetupProduct;

        inventDimReport = InventDimCtrl_Rep_Purch::construct();
        inventDimReport.parmDocumentStatus(DocumentStatus::RFQ);
        inventDimReport.initDimParmVisible();
        inventdimSetup = inventDimReport.dimFieldsActive(inventDimReport.parmDimParmVisible());
        inventDimReport.initProductDimParmVisible();
        inventDimSetupProduct = inventDimReport.dimFieldsActive(inventDimReport.parmDimParmVisible());
        inventDimSetup = conUnion(inventDimSetupProduct, inventDimSetup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimString</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the text string containing the inventory dimensions information.
    /// </summary>
    /// <param name="_inventDimId">
    ///    The inventory dimension ID.
    /// </param>
    /// <param name="_languageId">
    ///    The language in which to show the dimension text.
    /// </param>
    /// <returns>
    ///    A text string containing the inventory dimensions information.
    /// </returns>
    private str inventDimString(InventDimId _inventDimId, LanguageId _languageId)
    {
        InventDim               inventDim;
        str                     inventDimString;

        inventDim = InventDim::find(_inventDimId);
        if (inventDim != null)
        {
            inventDimString = FormLetter::inventDimReport(inventDim, inventDimSetup, _languageId);
        }

        return inventDimString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches records based on the parameter values and inserts the records into the temporary table.
    /// </summary>
    public void processReport()
    {
        this.createReportData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates report data for the request for quotation document.
    /// </summary>
    protected void createReportData()
    {
        this.initializeReportData();

        this.createRequestForQuotationLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeReportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the report data.
    /// </summary>
    protected void initializeReportData()
    {
        this.initializeInventDimReportSetup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRequestForQuotationLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the request for quotation lines.
    /// </summary>
    protected void createRequestForQuotationLines()
    {
        QueryRun qr = new QueryRun(this.buildPurchaseReceiptsListLineQuery());

        while (qr.next())
        {
            VendRFQTrans    vendRFQTrans   =   qr.get(tableNum(VendRFQTrans));
            VendRFQJour     vendRFQJour    =   qr.get(tableNum(VendRFQJour));
            EcoResCategory  ecoResCategory =   qr.get(tableNum(EcoResCategory));

            if (this.mustCreateRequestForQuotationLine(vendRFQTrans, vendRFQJour, ecoResCategory))
            {
                this.createRequestForQuotationLine(vendRFQTrans, vendRFQJour, ecoResCategory);
            }
        }

        select count(RecId) from tmpPurchRFQSend;

        if (tmpPurchRFQSend.RecId > 0)
        {
            PurchInternalRFQId internalRFQId = this.parmRequestForQuotationContract().parmPurchInternalRFQId();

            VendRFQJour vendRFQJour;
            select RecId, RFQId from vendRFQJour
                where vendRFQJour.InternalRFQId == internalRFQId;

            this.createAmendmentLines(vendRFQJour);
            
            this.createQuestionnaireLines(vendRFQJour);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPurchaseReceiptsListLineQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the request for quotation line query.
    /// </summary>
    /// <returns>
    /// The request for quotation line query.
    /// </returns>
    protected Query buildPurchaseReceiptsListLineQuery()
    {
        Query                   query           = this.parmQuery();
        PurchInternalRFQId      internalRFQId   = this.parmRequestForQuotationContract().parmPurchInternalRFQId();
        QueryBuildDataSource    qbds            = query.dataSourceTable(tableNum(VendRFQJour));
        QueryBuildRange         qbr             = SysQuery::findOrCreateRange(qbds, fieldNum(VendRFQJour, InternalRFQId));
        qbr.value(internalRFQId);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateRequestForQuotationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a request for quotation line must be created.
    /// </summary>
    /// <param name = "_vendRFQTrans">
    /// A <c>VendRFQTrans</c> record which the request for quotation line should be created for.
    /// </param>
    /// <param name = "_vendRFQJour">
    /// A <c>VendRFQJour</c> record which the request for quotation line should be created for.
    /// </param>
    /// <param name = "_ecoResCategory">
    /// A <c>EcoResCategory</c> record which the request for quotation line should be created for.
    /// </param>
    /// <returns>
    /// true, if the request for quotation line must be created; otherwise, false.
    /// </returns>
    protected boolean mustCreateRequestForQuotationLine(
        VendRFQTrans    _vendRFQTrans,
        VendRFQJour     _vendRFQJour,
        EcoResCategory  _ecoResCategory)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRequestForQuotationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a request for quotation line.
    /// </summary>
    /// <param name = "_vendRFQTrans">
    /// A <c>VendRFQTrans</c> record which the request for quotation line should be created for.
    /// </param>
    /// <param name = "_vendRFQJour">
    /// A <c>VendRFQJour</c> record which the request for quotation line should be created for.
    /// </param>
    /// <param name = "_ecoResCategory">
    /// A <c>EcoResCategory</c> record which the request for quotation line should be created for.
    /// </param>
    /// <returns>
    /// The created <c>PurchRFQSendTmp</c> request for quotation line record.
    /// </returns>
    protected PurchRFQSendTmp createRequestForQuotationLine(
        VendRFQTrans    _vendRFQTrans,
        VendRFQJour     _vendRFQJour,
        EcoResCategory  _ecoResCategory)
    {
        this.initializeRequestForQuotationLine(_vendRFQTrans, _vendRFQJour, _ecoResCategory);

        this.insertRequestForQuotationLine();

        return tmpPurchRFQSend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeRequestForQuotationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a request for quotation line.
    /// </summary>
    /// <param name = "_vendRFQTrans">
    /// A <c>VendRFQTrans</c> record which the request for quotation line should be created for.
    /// </param>
    /// <param name = "_vendRFQJour">
    /// A <c>VendRFQJour</c> record which the request for quotation line should be created for.
    /// </param>
    /// <param name = "_ecoResCategory">
    /// A <c>EcoResCategory</c> record which the request for quotation line should be created for.
    /// </param>
    /// <returns>
    /// The initialized <c>PurchRFQSendTmp</c> request for quotation line record.
    /// </returns>
    protected PurchRFQSendTmp initializeRequestForQuotationLine(
        VendRFQTrans    _vendRFQTrans,
        VendRFQJour     _vendRFQJour,
        EcoResCategory  _ecoResCategory)
    {
        tmpPurchRFQSend.clear();
        tmpPurchRFQSend.HeaderNotes         = this.getDocumentNote(_vendRFQJour);
        CompanyInfo companyInfo             = CompanyInfo::find();
        FormLetterRemarks formLetterRemarks = FormLetterRemarks::find(_vendRFQJour.LanguageId, this.getFormTextType(_vendRFQJour.RFQUpdateType));
        tmpPurchRFQSend.FormLetterTxt       = formLetterRemarks.Txt;
        tmpPurchRFQSend.EnterpriseNumber    = companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, _vendRFQTrans.DeliveryDate);
        tmpPurchRFQSend.CoRegNum            = companyInfo.CoRegNum;
        tmpPurchRFQSend.CompanyNameLogo     = companyInfo.Name;
        tmpPurchRFQSend.CompanyAddressLogo  = companyInfo.postalAddressWithTranslation(_vendRFQJour.LanguageId);
        tmpPurchRFQSend.TeleFax             = VendTable::find(_vendRFQJour.VendAccount).telefax();
        tmpPurchRFQSend.rfqComment          = this.rfqComment(_vendRFQJour.rfqUpdateType,_vendRFQJour.PurchId);
        tmpPurchRFQSend.rfqTxt              = this.rfqTxt(_vendRFQJour.rfqUpdateType);
        tmpPurchRFQSend.ItemId              = _vendRFQTrans.ItemId;
        tmpPurchRFQSend.ItemName            = _vendRFQTrans.ItemName;
        tmpPurchRFQSend.InventDimPrint      = this.inventDimString(_vendRFQTrans.InventDimId, _vendRFQJour.LanguageId);
        tmpPurchRFQSend.DeliveryDate        = _vendRFQTrans.DeliveryDate;
        tmpPurchRFQSend.ExpiryDateTime      = _vendRFQTrans.ExpiryDateTime;
        tmpPurchRFQSend.PurchQty            = _vendRFQTrans.PurchQty;
        tmpPurchRFQSend.PurchPrice          = _vendRFQTrans.PurchPrice;
        tmpPurchRFQSend.PurchUnit           = _vendRFQTrans.PurchUnit;
        tmpPurchRFQSend.DiscAmount          = _vendRFQTrans.DiscAmount;
        tmpPurchRFQSend.DiscPercent         = _vendRFQTrans.DiscPercent;
        tmpPurchRFQSend.Notes               = this.getDocumentNote(_vendRFQTrans);
        tmpPurchRFQSend.CategoryName        = _ecoResCategory.Name;
        tmpPurchRFQSend.LineAmount          = _vendRFQTrans.LineAmount;
        tmpPurchRFQSend.CompanyLogo         = FormLetter::companyLogo();
        tmpPurchRFQSend.PdsEnabled          = (#PdsEnabled? NoYes::Yes : NoYes::No);
        tmpPurchRFQSend.PdsCWQty            = _vendRFQTrans.PdsCWQty;
        tmpPurchRFQSend.PdsCWUnitId         = _vendRFQTrans.pdsCWUnitId();
        tmpPurchRFQSend.rfqCaseLineLineNumber = _vendRFQTrans.rfqCaseLineLineNumber;
        tmpPurchRFQSend.ShowCompanyVATNum   = VendFormletterParameters::find().PrintPurchRFQVATNum;
        tmpPurchRFQSend.CompanyVATNum       = TaxRegistration::getTaxRegNumFromJournal(
            _vendRFQJour.TableId,
            _vendRFQJour.RecId,
            _vendRFQJour.DeliveryDate);
        tmpPurchRFQSend.initFromVendRFQJour(_vendRFQJour);

        return tmpPurchRFQSend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRequestForQuotationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the request for quotation line.
    /// </summary>
    protected void insertRequestForQuotationLine()
    {
        tmpPurchRFQSend.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchRFQSendTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the actual data for the report from the temporary table.
    /// </summary>
    /// <returns>
    /// The <c>PurchRFQSendTmp</c> temporary table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(PurchRFQSendTmp))]
    public PurchRFQSendTmp purchRFQSendTmp()
    {
        select tmpPurchRFQSend;
    
        return tmpPurchRFQSend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rfqComment</Name>
				<Source><![CDATA[
    private str rfqComment(PurchRFQUpdateType _rfqUpdateType, str _purchId)
    {
        PurchRFQUpdateTypeModel model = PurchRFQUpdateTypeModel::newFromType(_rfqUpdateType);

        if (model)
        {
            return model.comment(_purchId);
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>rfqTxt</Name>
				<Source><![CDATA[
    private str rfqTxt(PurchRFQUpdateType _rfqUpdateType)
    {
        PurchRFQUpdateTypeModel model = PurchRFQUpdateTypeModel::newFromType(_rfqUpdateType);

        if (model)
        {
            return model.text();
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAmendmentLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the request for quotation amendment lines
    /// </summary>
    /// <param name = "_vendRFQJour">
    /// A <c>VendRFQJour</c> record which the request for quotation amendment lines should be created for.
    /// </param>
    protected void createAmendmentLines(VendRFQJour _vendRFQJour)
    {
        VendRFQAmendmentJour vendRFQAmendmentJour;
        while select vendRFQAmendmentJour
            where vendRFQAmendmentJour.VendRFQJour == _vendRFQJour.RecId
        {
            if (this.mustCreateAmendmentLine(_vendRFQJour, vendRFQAmendmentJour))
            {
                this.createAmendmentLine(_vendRFQJour, vendRFQAmendmentJour);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateAmendmentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a request for quotation amendment line must be created.
    /// </summary>
    /// <param name = "_vendRFQJour">
    /// A <c>VendRFQJour</c> record which the request for quotation amendment line should be created for.
    /// </param>
    /// <param name = "_vendRFQAmendmentJour">
    /// A <c>VendRFQAmendmentJour</c> record which the request for quotation amendment line should be created for.
    /// </param>
    /// <returns>
    /// true, if the request for quotation amendment line must be created; otherwise, false.
    /// </returns>
    protected boolean mustCreateAmendmentLine(VendRFQJour _vendRFQJour, VendRFQAmendmentJour _vendRFQAmendmentJour)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAmendmentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a request for quotation amendment line.
    /// </summary>
    /// <param name = "_vendRFQJour">
    /// A <c>VendRFQJour</c> record which the request for quotation amendment line should be created for.
    /// </param>
    /// <param name = "_vendRFQAmendmentJour">
    /// A <c>VendRFQAmendmentJour</c> record which the request for quotation amendment line should be created for.
    /// </param>
    /// <returns>
    /// The created <c>PurchRFQSendTmp</c> request for quotation amendment line record.
    /// </returns>
    protected PurchRFQSendTmp createAmendmentLine(VendRFQJour _vendRFQJour, VendRFQAmendmentJour _vendRFQAmendmentJour)
    {
        this.initializeAmendmentLine(_vendRFQJour, _vendRFQAmendmentJour);

        this.insertAmendmentLine();

        return tmpPurchRFQSend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeAmendmentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a request for quotation amendment line.
    /// </summary>
    /// <param name = "_vendRFQJour">
    /// A <c>VendRFQJour</c> record which the request for quotation amendment line should be created for.
    /// </param>
    /// <param name = "_vendRFQAmendmentJour">
    /// A <c>VendRFQAmendmentJour</c> record which the request for quotation amendment line should be created for.
    /// </param>
    /// <returns>
    /// The initialized <c>PurchRFQSendTmp</c> request for quotation amendment line record.
    /// </returns>
    protected PurchRFQSendTmp initializeAmendmentLine(VendRFQJour _vendRFQJour, VendRFQAmendmentJour _vendRFQAmendmentJour)
    {
        tmpPurchRFQSend.clear();
        tmpPurchRFQSend.AmendmentDescription = _vendRFQAmendmentJour.Description;
        tmpPurchRFQSend.AmendmentName        = _vendRFQAmendmentJour.Name;
        tmpPurchRFQSend.AmendmentDocument    = _vendRFQAmendmentJour.HasAttachment;
        tmpPurchRFQSend.AmendmentNotes       = this.getDocumentNote(_vendRFQAmendmentJour);
        tmpPurchRFQSend.AmendmentRecId       = _vendRFQAmendmentJour.RecId;
        tmpPurchRFQSend.RFQId                = _vendRFQJour.RFQId;

        return tmpPurchRFQSend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAmendmentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the request for quotation amendment line.
    /// </summary>
    protected void insertAmendmentLine()
    {
        tmpPurchRFQSend.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuestionnaireLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the request for quotation questionnaire lines
    /// </summary>
    /// <param name = "_vendRFQJour">
    /// A <c>VendRFQJour</c> record which the request for quotation questionnaire lines should be created for.
    /// </param>
    protected void createQuestionnaireLines(VendRFQJour _vendRFQJour)
    {
        KMCollection                    kMCollection;
        PurchRFQCaseTableKMCollection   purchRFQCaseTableKMCollection;
        PurchInternalRFQId              internalRFQId       = this.parmRequestForQuotationContract().parmPurchInternalRFQId();
        PurchRFQId                      rFQId               = _vendRFQJour.RFQId;
        PurchRFQCaseTable               purchRFQCaseTable   = PurchRFQCaseTable::findByInternalRFQId(internalRFQId);

        insert_recordset tmpPurchRFQSend(
            QuestionnaireId,
            RFQId,
            QuestionnaireDescription
            )
        select KMCollectionId, rFQId from purchRFQCaseTableKMCollection
            where purchRFQCaseTableKMCollection.RFQCaseId == purchRFQCaseTable.RFQCaseId
            join description from kMCollection
                where purchRFQCaseTableKMCollection.KMCollectionId == kMCollection.kmCollectionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormTextType</Name>
				<Source><![CDATA[
    private FormTextType getFormTextType(PurchRFQUpdateType _purchRFQUpdateType)
    {
        PurchRFQUpdateTypeModel model = PurchRFQUpdateTypeModel::newFromType(_purchRFQUpdateType);

        if (model)
        {
            return model.formTextType();
        }

        return FormTextType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRequestForQuotationContract</Name>
				<Source><![CDATA[
    public PurchRFQSendContract parmRequestForQuotationContract()
    {
        return this.parmDataContract() as PurchRFQSendContract;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>