<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsBatchSearch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PdsBatchSearch</c> class finds valid batches based on the specified parameters.
/// </summary>
/// <remarks>
/// The found batches are sorted according to the setup of the item and can be iterated by using the <c>moveNextBatch</c> method.
/// </remarks>
public class PdsBatchSearch
{
    // input parameters
    InventTable         inventTable;
    InventTransId       inventTransId;
    InventDim           inventDimCriteria;
    Set                 setOfWarehouses;
    InventQty           requiredQuantity;
    PdsCWInventQty      requiredCWQuantity;

    // cached variables set once in the init method
    boolean             useFEFOSorting;
    boolean             reserveByDate;
    boolean             mustReserveSameBatch;
    boolean             isCWItem;
    boolean             isShelfLifeItem;
    InventMovement      movement;
    boolean             useInventSumDelta;

    // internal
    QueryRun            queryRunSum;
    InventBatchId       currentBatchId;
    InventBatchId       lastFoundBatchId;
    Set                 foundDims;
    List                orderedBatchList;
    ListEnumerator      orderedBatchListEnumerator;

    // holding the query and the original rules
    Query               querySum;
    List                reservationSequenceList;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addQbdsInventBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds an <c>InventBatch</c> datasource to the specified query.
    /// </summary>
    /// <param name="_query">
    /// An object that represents a query.
    /// </param>
    /// <returns>
    /// A <c>QueryBuildDataSource</c> object.
    /// </returns>
    protected QueryBuildDataSource addQbdsInventBatch(Query     _query)
    {
        QueryBuildDataSource    qbdsBatch;

        qbdsBatch = _query.addDataSource(tableNum(InventBatch));
        qbdsBatch.addRange(fieldNum(InventBatch,ItemId)).value(queryValue(inventTable.ItemId));

        if (isShelfLifeItem && useFEFOSorting)
        {
            if (inventTable.modelGroup().PdsPickCriteria == PdsPickCriteria::ExpiryDate)
            {
                qbdsBatch.addGroupByField(fieldnum(InventBatch,ExpDate));
                qbdsBatch.addSortField(fieldnum(InventBatch,ExpDate));
                qbdsBatch.addRange(fieldnum(InventBatch,ExpDate)).value(SysQuery::valueNotEmptyString());
            }
            else
            {
                qbdsBatch.addGroupByField(fieldnum(InventBatch,PdsBestBeforeDate));
                qbdsBatch.addSortField(fieldnum(InventBatch,PdsBestBeforeDate));
                qbdsBatch.addRange(fieldnum(InventBatch,PdsBestBeforeDate)).value(SysQuery::valueNotEmptyString());
            }
        }
        else if (!inventTable.modelGroup().ReserveByDate)
        {
            qbdsBatch.addGroupByField(fieldnum(InventBatch,ProdDate));
            qbdsBatch.addSortField(fieldnum(InventBatch,ProdDate));
            qbdsBatch.addRange(fieldnum(InventBatch,ProdDate)).value(SysQuery::valueNotEmptyString());
        }

        return qbdsBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addQbdsInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds an <c>InventDim</c> datasource to the specified <c>QueryBuildDataSource</c> object.
    /// </summary>
    /// <param name="_qbdsInventSumOrDelta">
    /// An object that represents a datasource of type <c>InventSum</c> or <c>InventSumDelta</c>.
    /// </param>
    /// <param name="_qbdsInventBatch">
    /// An object that represents a datasource of type <c>InventBatch</c>.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// An <c>InventDim</c>record that represents the inventory dimensions that applies.
    /// </param>
    /// <param name="_inventDimParmCriteria">
    /// An <c>InventDimParm</c> record that represents the inventory dimensions that must be filtered on.
    /// </param>
    protected void addQbdsInventDim(
        QueryBuildDataSource    _qbdsInventSumOrDelta,
        QueryBuildDataSource    _qbdsInventBatch,
        InventDim               _inventDimCriteria,
        inventDimParm           _inventDimParmCriteria)
    {
        QueryBuildDataSource    qbdsDim;
        InventDimParm           inventDimParmGroupBy;
        SetEnumerator           enumeratorWarehouses;

        qbdsDim = _qbdsInventSumOrDelta.addDataSource(tableNum(InventDim));
        qbdsDim.joinMode(JoinMode::InnerJoin);
        qbdsDim.relations(true);

        if (_qbdsInventBatch)
        {
            qbdsDim.addLink(fieldnum(InventBatch,InventBatchId), fieldnum(InventDim,InventBatchId), _qbdsInventBatch.name());
        }

        InventDim::queryDatasourceAddRangeSortFromParms(qbdsDim,false, _inventDimCriteria, _inventDimParmCriteria, inventDimParmGroupBy);

        if (setOfWarehouses.elements())
        {
            enumeratorWarehouses = setOfWarehouses.getEnumerator();

            while (enumeratorWarehouses.moveNext())
            {
                qbdsDim.addRange(fieldNum(InventDim,inventLocationId)).value(queryValue(enumeratorWarehouses.current()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addQbdsInventSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds an <c>InventSum</c> datasource to the specified <c>QueryBuildDataSource</c> object.
    /// </summary>
    /// <param name="_qbdsInventBatch">
    /// An object that represents a datasource of type <c>InventBatch</c>.
    /// </param>
    /// <returns>
    /// A <c>QueryBuildDataSource</c> object.
    /// </returns>
    protected QueryBuildDataSource addQbdsInventSum(QueryBuildDataSource    _qbdsInventBatch)
    {
        QueryBuildDataSource    qbdsSum;
        QueryBuildRange         qbrOrCondition;
        InventDimParm           inventDimParm;

        qbdsSum = _qbdsInventBatch.addDataSource(tableNum(InventSum));
        qbdsSum.addRange(fieldnum(InventSum,ClosedQty)).value(queryValue(NoYes::No));
        qbrOrCondition = qbdsSum.addRange(fieldnum(InventSum,AvailPhysical));
        qbrOrCondition.value(strfmt('((%1.%2 != %5) || (%1.%3 != %5) || (%1.%4 != %5))',
                                qbdsSum.name(),
                                fieldStr(InventSum,AvailPhysical),
                                fieldStr(InventSum,AvailOrdered),
                                fieldstr(InventSum,OnOrder),
                                queryValue(0)));

        qbdsSum.addLink(fieldnum(InventBatch,ItemId), fieldnum(InventSum,ItemId), _qbdsInventBatch.name());

        inventDimParm.initFromInventDim(inventDimCriteria);
        inventDimParm.InventLocationIdFlag = NoYes::No;

        this.addQbdsInventDim(qbdsSum, _qbdsInventBatch, inventDimCriteria, inventDimParm);
        return qbdsSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addQbdsInventSumDelta</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds an <c>InventSumDelta</c> datasource to the specified <c>QueryBuildDataSource</c> object.
    /// </summary>
    /// <param name="_qbdsInventBatch">
    /// An object that represents a datasource of type <c>InventBatch</c>.
    /// </param>
    /// <returns>
    /// A <c>QueryBuildDataSource</c> object.
    /// </returns>
    protected QueryBuildDataSource addQbdsInventSumDelta(
        QueryBuildDataSource    _qbdsInventBatch)
    {
        QueryBuildDataSource    qbdsSum;
        QueryBuildRange         qbrOrCondition;
        InventDimParm           inventDimParm;

        qbdsSum = _qbdsInventBatch.addDataSource(tableNum(InventSumDelta));
        qbdsSum.addRange(fieldnum(InventSumDelta,SQLTransactionId)).value(queryValue(InventUpdateOnhandGlobal::Instance().inventUpdateOnhand().sqlTransactionId()));
        qbrOrCondition = qbdsSum.addRange(fieldnum(InventSumDelta,AvailPhysical));
        qbrOrCondition.value(strfmt('((%1.%2 != %5) || (%1.%3 != %5) || (%1.%4 != %5))',
                                qbdsSum.name(),
                                fieldStr(InventSumDelta,AvailPhysical),
                                fieldStr(InventSumDelta,AvailOrdered),
                                fieldstr(InventSumDelta,OnOrder),
                                queryValue(0)));

        qbdsSum.addLink(fieldnum(InventBatch,ItemId), fieldnum(InventSumDelta,ItemId), _qbdsInventBatch.name());

        inventDimParm.initFromInventDim(inventDimCriteria);
        inventDimParm.InventLocationIdFlag = NoYes::No;

        this.addQbdsInventDim(qbdsSum, _qbdsInventBatch, inventDimCriteria, inventDimParm);

        return qbdsSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuerySum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a new query based on the <c>InventSum</c> table.
    /// </summary>
    /// <returns>
    /// An <c>Query</c> object used to find batches.
    /// </returns>
    protected query buildQuerySum()
    {
        Query                   query;
        QueryBuildDataSource    qbdsSum;
        QueryBuildDataSource    qbdsBatch;
        InventModelGroup        inventModelGroup;

        Query = new Query();

        // setup inventBatch datasource
        qbdsBatch = this.addQbdsInventBatch(query);

        // setup inventSum datasource
        qbdsSum = this.addQbdsInventSum(qbdsBatch);
        InventSum::queryAddSumFields(qbdsSum);

        qbdsSum.joinMode(JoinMode::InnerJoin);
        if (reserveByDate)
        {
            inventModelGroup = inventTable.modelGroup();
            qbdsSum.addGroupByField(fieldNum(InventSum, LastUpdDatePhysical));
            qbdsSum.addOrderByField(fieldNum(InventSum, LastUpdDatePhysical), inventModelGroup.ReserveReversed ? SortOrder::Descending : SortOrder::Ascending);
        }

        qbdsBatch.addGroupByField(fieldnum(InventBatch,InventBatchId));
        qbdsBatch.addOrderByField(fieldnum(InventBatch,InventBatchId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuerySumDelta</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a new query based on the <c>InventSumDelta</c> table.
    /// </summary>
    /// <returns>
    /// An <c>Query</c> object used to find batches.
    /// </returns>
    /// <remarks>
    /// This <c>Query</c> object must be used when changes to <c>InventSum</c> table haven't been persisted and exists in <c>InventSumDelta</c> table.
    /// </remarks>
    protected query buildQuerySumDelta()
    {
        QueryBuildDataSource    qbdsSum;
        QueryBuildDataSource    qbdsBatch;
        Query                   query;

        query = new Query();

        // make union in order to do a combined sorting from inventSum and inventSumDelta - notice the inventSum / inventSumDelta is not set as union is used (existsJoin)
        query.queryType(QueryType::Union);

        // find batches regarding inventSum
        qbdsBatch = this.addQbdsInventBatch(query);
        qbdsBatch.orderMode(OrderMode::OrderBy);

        qbdsSum = this.addQbdsInventSum(qbdsBatch);
        qbdsSum.joinMode(JoinMode::ExistsJoin);

        // find batches regarding inventSumDelta
        qbdsBatch = this.addQbdsInventBatch(query);
        qbdsBatch.orderMode(OrderMode::OrderBy);

        qbdsSum = this.addQbdsInventSumDelta(qbdsBatch);
        qbdsSum.joinMode(JoinMode::ExistsJoin);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSetOfWarehouses</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and returns a <c>Set</c> object containing warehouses specified for reservation.
    /// </summary>
    /// <returns>
    /// A <c>Set</c> object containing warehouses specified for reservation.
    /// </returns>
    protected set buildSetOfWarehouses()
    {
        InventLocationId                inventLocationId;
        container                       c;
        ListEnumerator                  le;

        setOfWarehouses = new set(types::String);

        if (   reservationSequenceList
            && reservationSequenceList.elements())
        {
            le = reservationSequenceList.getEnumerator();
            while (le.moveNext())
            {
                c = le.current();
                inventLocationId = conpeek(c,1);
                setOfWarehouses.add(inventLocationId);
            }
        }
        return setOfWarehouses;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcInventSumForBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates a grouped <c>InventSum</c> record based on the specified batch ID.
    /// </summary>
    /// <param name="_inventBatchId">
    /// A string value represents a batch ID.
    /// </param>
    /// <returns>
    /// A grouped <c>InventSum</c> record.
    /// </returns>
    protected InventSum calcInventSumForBatch(InventBatchId _inventBatchId)
    {
        Query                   query;
        QueryBuildDataSource    qbdsSum;
        QueryRun                queryRun;
        InventSum               inventSum;
        InventSumDelta          inventSumDelta;
        InventDim               inventDim;
        InventDimParm           inventDimParm;

        inventDim.data(inventDimCriteria);
        inventDim.inventBatchId = _inventBatchId;

        inventDimParm.initFromInventDim(inventDim);
        InventDimParm.InventLocationIdFlag = NoYes::No;

        // find onhand from inventSum
        query = new query();

        qbdsSum = query.addDataSource(tableNum(InventSum));
        qbdsSum.addRange(fieldnum(InventSum, ItemId)).value(queryValue(inventTable.itemId));
        qbdsSum.addRange(fieldnum(InventSum, ClosedQty)).value(queryValue(NoYes::No));
        InventSum::queryAddSumFields(qbdsSum);
        this.addQbdsInventDim(qbdsSum, null, inventDim, inventDimParm);

        queryRun = new queryRun(query);

        queryRun.next();
        inventSum = queryRun.get(tableNum(InventSum));

        // find onhand from inventSumDelta
        query = new query();

        qbdsSum = query.addDataSource(tableNum(InventSumDelta));
        qbdsSum.addRange(fieldnum(InventSumDelta, ItemId)).value(queryValue(inventTable.itemId));
        qbdsSum.addRange(fieldnum(InventSumDelta, SQLTransactionId)).value(queryValue(InventUpdateOnhandGlobal::Instance().inventUpdateOnhand().sqlTransactionId()));
        InventSumDelta::queryAddSumFields(qbdsSum);
        this.addQbdsInventDim(qbdsSum, null, inventDim, inventDimParm);

        queryRun = new queryRun(query);

        queryRun.next();
        inventSumDelta = queryRun.get(tableNum(InventSumDelta));

        inventSum.addInventSumDelta(inventSumDelta);

        return inventSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentBatchId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the current batch ID.
    /// </summary>
    /// <returns>
    /// A string value that holds a batch ID.
    /// </returns>
    public InventBatchId currentBatchId()
    {
        return currentBatchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeQuerySum</Name>
				<Source><![CDATA[
    private void executeQuerySum()
    {
        InventSum       inventSum;
        InventBatch     inventBatch;

        // the batch finding must be run only once
        if (orderedBatchListEnumerator != null)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        foundDims           = new Set(Types::Record);
        orderedBatchList    = new List(Types::String);

        while (queryRunSum.next())
        {
            inventSum   = queryRunSum.get(tableNum(InventSum));
            inventBatch = queryRunSum.get(tableNum(InventBatch));

            if (   inventBatch.inventBatchId
                && this.isBatchValid(inventBatch.inventBatchId)
                && this.isOnhandSufficient(inventSum, inventBatch.inventBatchId))
            {
                //
                // the invent dim were combined in the prior query as they are inner joined to inventSum,
                //   so we need to reiterate the relevant dimensions
                //
                this.loopDimsForBatchId(inventBatch.inventBatchId);
                // reserving the list of batch IDs as the dimensions may have location blank (WMS I)
                orderedBatchList.addEnd(inventBatch.inventBatchId);
            }
        }

        //sort the batch list
        if (foundDims.elements())
        {
            orderedBatchList = PdsBatchSearch::sortBatchSetBySequenceList(foundDims, reservationSequenceList);
        }

        orderedBatchListEnumerator = orderedBatchList.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDeliveredBatchId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a previously delivered batch ID;
    /// </summary>
    /// <returns>
    /// A string value that holds a delivered batch ID.
    /// </returns>
    protected InventBatchId findDeliveredBatchId()
    {
        InventTrans             inventTrans;
        InventTransOrigin       inventTransOrigin;
        InventDim               inventDim;

        select firstOnly tableId from inventTrans
            order by StatusIssue
            where  inventTrans.ItemId == inventTable.ItemId
                && inventTrans.StatusIssue <= StatusIssue::Picked
                && inventTrans.StatusReceipt == StatusReceipt::None
            join inventBatchId from InventDim
                where InventDim.inventDimId == inventTrans.inventDimId
            exists join inventTransOrigin
                where  inventTransOrigin.RecId == InventTrans.InventTransOrigin
                    && inventTransOrigin.InventTransId == inventTransId;

        return inventDim.inventBatchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes internal cached variables.
    /// </summary>
    protected void init()
    {
        movement                = InventTransOrigin::findByInventTransId(inventTransId).inventMovement();

        useFEFOSorting          = inventTable.pdsCheck();
        mustReserveSameBatch    = movement.pdsSameLotReservation();
        isCWItem                = inventTable.pdsCWItem();
        isShelfLifeItem         = inventTable.isShelfLifeItem();
        reserveByDate           = inventTable.modelGroup().ReserveByDate;
        foundDims               = new Set(Types::Record);

        useInventSumDelta = InventUpdateOnhandGlobal::Instance().inventUpdateOnhand().mustAddInventSumDeltaOnhand(inventTable.itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBatchValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the specified batch is valid.
    /// </summary>
    /// <param name="_inventBatchId">
    /// A string value that represents the batch ID.
    /// </param>
    /// <returns>
    /// true if the batch ID is valid; otherwise, false.
    /// </returns>
    protected boolean isBatchValid(InventBatchId    _inventBatchId)
    {
        PdsDispositionMaster    pdsDispMaster;
        InventBatch             inventBatch;

        if (_inventBatchId)
        {
            inventBatch = InventBatch::find(_inventBatchId,inventTable.ItemId);

            if (isShelfLifeItem)
            {
                if (!InventBatch::pdsCheckExpiryDate(_inventBatchId, inventTable.itemId, movement.getExpiryCheckDate(), true, movement.custVendAc()))
                {
                    return false;
                }
            }

            if (inventBatch.pdsDispositionStatus() == PdsStatus::Unavailable)
            {
                pdsDispMaster = PdsDispositionMaster::find(InventBatch.PdsDispositionCode);
                if (movement.pdsRestrictReservation(pdsDispMaster))
                {
                    return false;
                }
            }

            if (   #PdsBatchAttribEnabled
                && PdsBatchAttribByItem::existItemIdAny(movement.itemId()))
            {
                if (!PdsBatchAttributes::pdsCheckBatchAtribReserve(inventTable.itemId, movement.custVendAc(), _inventBatchId))
                {
                    return false;
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOnhandSufficient</Name>
				<Source><![CDATA[
/// <summary>
    /// Determines if the current onhand for the specified batch ID is sufficient.
    /// </summary>
    /// <param name="_inventSum">
    /// A <c>InventSum</c> record representing the onhand.
    /// </param>
    /// <param name="_inventBatchId">
    /// A string value representing a batch ID.
    /// </param>
    /// <returns>
    /// true if onhand is sufficient; otherwise, false.
    /// </returns>
    protected boolean isOnhandSufficient(
        InventSum       _inventSum,
        InventBatchId   _inventBatchId)
    {
        InventSum   inventSum;
        InventAvailabilityByUnit    inventAvailabilityByUnit;

        if (!mustReserveSameBatch)
        {
            return true;
        }

        if (useInventSumDelta)
        {
            inventSum = this.calcInventSumForBatch(_inventBatchId);
        }
        else
        {
            inventSum = _inventSum;
        }

        inventAvailabilityByUnit = InventAvailabilityProvider::findByItemSumDim(inventTable, inventSum, inventDimCriteria);

        if (isCWItem)
        {
            return inventAvailabilityByUnit.parmPdsCWInventAvailability().pdsCWAvailReservation() >= movement.pdsCWTransQty() * movement.transSign();
        }

        return inventAvailabilityByUnit.parmInventAvailability().availReservation() >= movement.transQty() * movement.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loopDimsForBatchId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Loops all the dimensions for a specific batch number that have inventory for the reservation item.
    /// </summary>
    /// <param name="_inventBatchId">
    ///     The ID of the batch of the item being reserved.
    /// </param>
    private void loopDimsForBatchId(InventBatchId _inventBatchId)
    {
        InventSumDelta  inventSumDeltaExists;
        InventSum       inventSumExists;
        InventDim       inventDim;

        if (useInventSumDelta)
        {
            while select recId, inventBatchId, inventLocationId, wmsLocationId from inventdim
                where   inventdim.inventBatchId     == _inventBatchId
                &&      inventdim.InventLocationId  != ''
            // we need to make sure that empty dimensions that have nothing onhand are not returned here
            outer join recId from inventSumExists
                where   inventSumExists.ItemId                  == inventTable.itemId
                &&      inventSumExists.InventDimId             == inventdim.inventDimId
                &&     ((inventSumExists.AvailPhysical          != 0)
                    ||  (inventSumExists.AvailOrdered           != 0)
                    ||  (inventSumExists.OnOrder                != 0))
            outer join recId from inventSumDeltaExists
                where   inventSumDeltaExists.ItemId              == inventTable.itemId
                &&      inventSumDeltaExists.InventDimId         == inventdim.inventDimId
                &&     ((inventSumDeltaExists.AvailPhysical      != 0)
                    ||  (inventSumDeltaExists.AvailOrdered       != 0)
                    ||  (inventSumDeltaExists.OnOrder            != 0))
            {
                if ((inventSumExists || inventSumDeltaExists) && setOfWarehouses.in(inventDim.inventLocationId))
                {
                    foundDims.add(inventDim);
                }
            }
        }
        else
        {
            while select recId, inventBatchId, inventLocationId, wmsLocationId from inventdim
                where   inventdim.inventBatchId     == _inventBatchId
                &&      inventdim.InventLocationId  != ''
            // we need to make sure that empty dimensions that have nothing onhand are not returned here
            exists join recId from inventSumExists
                where   inventSumExists.ItemId              == inventTable.itemId
                &&      inventSumExists.InventDimId         == inventdim.inventDimId
                &&     ((inventSumExists.AvailPhysical      != 0)
                    ||  (inventSumExists.AvailOrdered       != 0)
                    ||  (inventSumExists.OnOrder            != 0))
            {
                if (setOfWarehouses.in(inventDim.inventLocationId))
                {
                    foundDims.add(inventDim);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNextBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Iterates valid batch ID's in a sorted order.
    /// </summary>
    /// <returns>
    /// true if a next batch ID is found; otherwise, false.
    /// </returns>
    public boolean moveNextBatch()
    {
        boolean         doSearch = true;

        currentBatchId = '';

        if (mustReserveSameBatch)
        {
            if (lastFoundBatchId)
            {
                // have been called before - no more batches can be returned
                doSearch = false;
            }
            else
            {
                currentBatchId = this.findDeliveredBatchId();

                if (currentBatchId)
                {
                    doSearch = false;
                }
            }
        }

        if (doSearch)
        {
            if (!queryRunSum)
            {
                if (!useInventSumDelta)
                {
                    querySum = this.buildQuerySum();
                }
                else
                {
                    querySum = this.buildQuerySumDelta();
                }
                queryRunSum = new QueryRun(querySum);
                this.executeQuerySum();
            }

            if (orderedBatchListEnumerator.moveNext())
            {
                currentBatchId = orderedBatchListEnumerator.current();
            }
            else
            {
                currentBatchId = '';
            }
        }

        if (currentBatchId)
        {
            lastFoundBatchId = currentBatchId;
        }

        return currentBatchId != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimCriteria</Name>
				<Source><![CDATA[
    public InventDim parmInventDimCriteria(InventDim _inventDimCriteria = inventDimCriteria)
    {
        inventDimCriteria = _inventDimCriteria;

        return inventDimCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTable</Name>
				<Source><![CDATA[
    public InventTable parmInventTable(InventTable _inventTable = inventTable)
    {
        inventTable = _inventTable;

        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransId</Name>
				<Source><![CDATA[
    public InventTransId parmInventTransId(InventTransId _inventTransId = inventTransId)
    {
        inventTransId = _inventTransId;

        return inventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReservationSequenceList</Name>
				<Source><![CDATA[
    public List parmReservationSequenceList(List _reservationSequenceList = reservationSequenceList)
    {
        reservationSequenceList = _reservationSequenceList;
        if (!prmisDefault(_reservationSequenceList))
        {
            this.buildSetOfWarehouses();
        }
        return reservationSequenceList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static PdsBatchSearch construct()
    {
        return new PdsBatchSearch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimMatchesReservation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the specified dimension matches the warehouse and reservation method requested.
    /// </summary>
    /// <param name="_dimension">
    ///     The dimension to check.
    /// </param>
    /// <param name="_warehouse">
    ///     The warehouse expected to be linked to the dimension.
    /// </param>
    /// <param name="_reservationMethod">
    ///     The reservation method used for the ordering of batches.
    /// </param>
    /// <returns>
    ///    true if the dimension is valid.
    /// </returns>
    /// <remarks>
    ///     Add a post-method handler for returning the right value when extending the <c>WMSLocationType</c> enumeration.
    /// </remarks>
    public static boolean dimMatchesReservation(
        InventDim                       _dimension,
        InventLocationId                _warehouse,
        WMSReservationMethodInternal    _reservationMethod)
    {
        WMSLocationType dimLocationType;

        if (_dimension.InventLocationId != _warehouse)
        {
            return false;
        }

        if (!_dimension.wMSLocationId)
        {
            // for compatibility with only WMS I logic
            return true;
        }

        dimLocationType = _dimension.wmsLocation().LocationType;
        switch (_reservationMethod)
        {
            // bulk locations (aka "buffer")
            case WMSReservationMethodInternal::PickingRoute_AllBufferLocations          :
            case WMSReservationMethodInternal::OutputTransport_AllBufferLocations       :
                return dimLocationType == WMSLocationType::Buffer;

            // pick locations
            case WMSReservationMethodInternal::PickingRoute_AllPickLocations            :
            case WMSReservationMethodInternal::PickingRoute_ItemPickLocationOnhand      :
            case WMSReservationMethodInternal::PickingRoute_ItemPickLocOrderedTransp    :
            case WMSReservationMethodInternal::PickingRoute_ItemPickLocOrderedNotTransp :
                return dimLocationType == WMSLocationType::Pick;

            // inbound locations
            case WMSReservationMethodInternal::PickingRoute_AllInboundLocations         :
                return dimLocationType == WMSLocationType::InputPort;

            // outbound locations
            case WMSReservationMethodInternal::PickingRoute_AllOutboundLocations        :
                return dimLocationType == WMSLocationType::OutputPort;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMatchingBatchList</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Filters the batches from the <c>list</c> of dimensions from the specified set that match the warehouse and the reservation logic.
    /// </summary>
    /// <param name="_foundDims">
    ///     The <c>Set</c> of dimensions to filter.
    /// </param>
    /// <param name="_warehouse">
    ///     The location where the batches should be placed.
    /// </param>
    /// <param name="_reservationMethod">
    ///     The logic that the batch should be matching.
    /// </param>
    /// <returns>
    ///     A <c>List</c> with the dimensions that match the reservation logic.
    /// </returns>
    public static List findMatchingBatchList(
        Set                             _foundDims,
        InventLocationId                _warehouse,
        WMSReservationMethodInternal    _reservationMethod)
    {
        SetEnumerator   se = _foundDims.getEnumerator();
        InventDim       inventDim;
        List            batchList = new List(Types::String);

        while (se.moveNext())
        {
            inventDim = se.current();
            if (PdsBatchSearch::dimMatchesReservation(inventDim, _warehouse, _reservationMethod))
            {
                batchList.addEnd(inventDim.inventBatchId);
            }
        }

        return batchList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>PdsBatchSearch</c> object.
    /// </summary>
    /// <param name="_inventTable">
    /// A <c>InventTable</c> record that represents the item.
    /// </param>
    /// <param name="_inventTransId">
    /// A string value that holds an inventory transaction ID.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// A <c>InventDim</c> record that represents the inventory dimensions that the search must be limited to.
    /// </param>
    /// <param name="_reservationSequenceList">
    /// A <c>List</c> that holds the ordered reservation sequence.
    /// </param>
    /// <returns>
    /// A <c>PdsBatchSearch</c> object.
    /// </returns>
    public static PdsBatchSearch newStandard(
        InventTable         _inventTable,
        inventTransId       _inventTransId,
        InventDim           _inventDimCriteria,
        List                _reservationSequenceList)
    {
        PdsBatchSearch     pdsBatchSearch   = pdsBatchSearch::construct();
        boolean            isWHSEnabledItem = WHSInventEnabled::exist(_inventTable.ItemId);

        if (isWhsEnabledItem)
        {
            //WHSEnabled items are not allowed
            throw error(error::wrongUseOfFunction(funcName()));
        }

        pdsBatchSearch.parmInventTable(_inventTable);
        pdsBatchSearch.parmInventTransId(_inventTransId);
        pdsBatchSearch.parmInventDimCriteria(_inventDimCriteria);
        pdsBatchSearch.parmInventDimCriteria(_inventDimCriteria);
        pdsBatchSearch.parmReservationSequenceList(_reservationSequenceList);

        pdsBatchSearch.init();

        return pdsBatchSearch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortBatchSetBySequenceList</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sorts a <c>Set</c> of dimensions for the item according to the sequence list specified for the warehouse order.
    /// </summary>
    /// <param name="_foundDims">
    ///     The <c>Set</c> of dimensions needed to be sorted.
    /// </param>
    /// <param name="_reservationSequenceList">
    ///     The list of rules to use for sorting the dimensions.
    /// </param>
    /// <returns>
    ///     A <c>List</c> with the sorted batches.
    /// </returns>
    public static List sortBatchSetBySequenceList(
        Set     _foundDims,
        List    _reservationSequenceList)
    {
        SetEnumerator       se;
        ListEnumerator      le;

        WMSReservationMethodInternal reservationMethod;

        InventDim           inventDim;
        InventLocationId    inventLocationId;

        container           c;
        List                orderedBatchList = new List(Types::String);

        if ( (_foundDims == null) || (!_foundDims.elements()) || (_reservationSequenceList == null))
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        if (_reservationSequenceList.empty())
        {
            se = _foundDims.getEnumerator();
            // no rules found, just 'cast' to a list and return it
            while (se.moveNext())
            {
                inventDim = se.current();
                orderedBatchList.addEnd(inventDim.inventBatchId);
            }
            return orderedBatchList;
        }

        // there are rules and we need to return the batches ordered by those rules
        le = _reservationSequenceList.getEnumerator();
        while (le.moveNext())
        {
            c = le.current();
            inventLocationId    = conpeek(c,1);
            reservationMethod   = conpeek(c,2);

            // add the dimensions that 'match' the reservation rules to the sorted list
            orderedBatchList.appendList(
                PdsBatchSearch::findMatchingBatchList(
                    _foundDims,
                    inventLocationId,
                    reservationMethod));
        }

        return orderedBatchList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>