<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResDataPopulateController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Service controller class to populate data for <c>ResDataPopulateController</c> table and relevant tables.
/// </summary>
public class ResDataPopulateController extends SysOperationServiceController
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        this.parmDialogCaption("@Res:PopulateProjectResources");
        this.parmShowDialog(true);
        this.parmShowProgressForm(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        ResDataPopulateController controller = new ResDataPopulateController();
        controller.parmClassName(classstr(ResProjectResourceDataPopulate));
        controller.parmMethodName(methodstr(ResProjectResourceDataPopulate, populateData));
        controller.parmExecutionMode(SysOperationExecutionMode::Synchronous);

        controller.startOperation();

        SysGlobalCache cache = ClassFactory.globalCache();
        if (controller.isDialogCancelled())
        {
            cache.set(classStr(ResDataPopulateController), _args.parm(), ResDataPopulateExecutionOption::Cancel);
        }
        else if (controller.parmExecutionMode() == SysOperationExecutionMode::ScheduledBatch)
        {
            cache.set(classStr(ResDataPopulateController), _args.parm(), ResDataPopulateExecutionOption::ScheduledBatch);
        }
        else if (controller.parmExecutionMode() == SysOperationExecutionMode::Synchronous)
        {
            cache.set(classStr(ResDataPopulateController), _args.parm(), ResDataPopulateExecutionOption::Synchronous);
        }
        else if (controller.parmExecutionMode() == SysOperationExecutionMode::ReliableAsynchronous)
        {
            cache.set(classStr(ResDataPopulateController), _args.parm(), ResDataPopulateExecutionOption::ReliableAsynchronous);
        }
        else if (controller.parmExecutionMode() == SysOperationExecutionMode::Asynchronous)
        {
            cache.set(classStr(ResDataPopulateController), _args.parm(), ResDataPopulateExecutionOption::Asynchronous);
        }
        else
        {
            cache.set(classStr(ResDataPopulateController), _args.parm(), ResDataPopulateExecutionOption::NotSpecified);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform batch process.
    /// </summary>
    /// <returns><c>Batch</c> table buffer.</returns>
    public Batch doBatch()
    {
        if (executionMode == SysOperationExecutionMode::ScheduledBatch)
        {
            BatchHeader batchheader = this.batchInfo().parmBatchHeader();
            batchheader.clearAllAlerts();

            batchheader.addUserAlerts(curUserId(), NoYes::Yes, NoYes::Yes, NoYes::Yes, NoYes::Yes, NoYes::No);
        }
    
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDialogCancelled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies whether user has cancelled further execution of batch tasks by cancellation of the batch parameters dialog.
    /// </summary>
    /// <returns>
    /// true if the user has cancelled further processing; otherwise false.
    /// </returns>
    public boolean isDialogCancelled()
    {
        return dialogCanceled;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>