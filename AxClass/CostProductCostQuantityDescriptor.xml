<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostProductCostQuantityDescriptor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostRegisteredQuantityDescriptor</c> class describes product cost quantity entries.
/// </summary>
public class CostProductCostQuantityDescriptor extends CostEntryDescriptorBase
{
    CostMeasure         measure;
    CostObject          costObject;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>key</Name>
				<Source><![CDATA[
    public str key()
    {
        return CostProductCostQuantityDescriptor::createKey(costObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostObject</Name>
				<Source><![CDATA[
    public CostObject parmCostObject(CostObject _costObject = costObject)
    {
        costObject = _costObject;

        return costObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMeasure</Name>
				<Source><![CDATA[
    public CostMeasure parmMeasure(CostMeasure _measure = measure)
    {
        measure = _measure;

        return measure;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reconciledDescriptor</Name>
				<Source><![CDATA[
    public CostEntryDescriptorBase reconciledDescriptor()
    {
        return CostProductCostQuantityDescriptor::newDescriptor(costObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static CostProductCostQuantityDescriptor construct()
    {
        return new CostProductCostQuantityDescriptor();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a unique key for the descriptor.
    /// </summary>
    /// <param name="_costObject">
    /// The descriptors <c>CostObject</c>.
    /// </param>
    /// <returns>
    /// A unique key for the descriptor.
    /// </returns>
    private static str createKey(CostObject _costObject)
    {
        str key = _costObject.key();

        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDescriptor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>CostProductCostQuantityDescriptor</c> descritor class.
    /// </summary>
    /// <param name="_costObject">
    /// The descriptors <c>CostObject</c>.
    /// </param>
    /// <returns>
    /// An instance of the <c>CostProductCostQuantityDescriptor</c> descritor class.
    /// </returns>
    public static CostProductCostQuantityDescriptor newDescriptor(CostObject _costObject)
    {
        CostProductCostQuantityDescriptor   descriptor;

        descriptor = SysTransactionScopeCache::get(classStr(CostProductCostQuantityDescriptor), _costObject, descriptor);

        if (!descriptor)
        {
            descriptor = CostProductCostQuantityDescriptor::construct();
            descriptor.parmMeasure(CostMeasure::ProductCostQuantity);
            descriptor.parmCostObject(_costObject);

            SysTransactionScopeCache::set(classStr(CostProductCostQuantityDescriptor), _costObject, descriptor);
        }

        return descriptor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromDescriptor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>CostProductCostQuantityDescriptor</c> descritor class based on another desciptor.
    /// </summary>
    /// <param name="_descriptor">
    /// The descriptor to create the descriptor from.
    /// </param>
    /// <returns>
    /// An instance of the <c>CostProductCostQuantityDescriptor</c> descritor class.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The descriptor cannot be created from the specified descriptor.
    /// </exception>
    public static CostProductCostQuantityDescriptor newFromDescriptor(CostEntryDescriptorBase _descriptor)
    {
        CostProductCostQuantityDescriptor   descriptor;

        switch (classIdGet(_descriptor))
        {
            case classNum(CostRegisteredQuantityDescriptor):
                CostRegisteredQuantityDescriptor registeredQuantityDescriptor = _descriptor;
                descriptor = CostProductCostQuantityDescriptor::newDescriptor(CostObjectDerivationRule::resolveCostObject(registeredQuantityDescriptor.parmInventoryAccount()));
                break;
            case classNum(CostProductCostDescriptor):
                CostProductCostDescriptor productCostDescriptor = _descriptor;
                descriptor = CostProductCostQuantityDescriptor::newDescriptor(productCostDescriptor.parmCostObject());
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
        return descriptor;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
