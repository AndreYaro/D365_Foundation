<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CreditCardBreakDownPaymentPostProcessRunner</Name>
	<SourceCode>
		<Declaration><![CDATA[
[CreditCardBreakDownPaymentStatusAttribute(CreditCardPaymentStatus::PaymentPosted)]
internal final class CreditCardBreakDownPaymentPostProcessRunner extends CreditCardBreakDownProcessAbsRunner
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal void new(
        CreditCardPaymentInfoContainer _salesTablePacked,
        CreditCardPaymentInfoContainer _custInvoiceJourPacked,
        CreditCardPaymentInfoContainer _mCRCustPaymTablePacked,
        CreditCardPaymentOperation _creditCardPaymentOperation,
        CreditCardPaymentBreakDownExecutionContextMode _creditCardPaymentBreakDownExecutionContextMode)
    {
        super(_salesTablePacked, _custInvoiceJourPacked, _mCRCustPaymTablePacked, _creditCardPaymentOperation, _creditCardPaymentBreakDownExecutionContextMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static ICreditCardBreakDownProcessRun construct(
        CreditCardPaymentInfoContainer _salesTablePacked,
        CreditCardPaymentInfoContainer _custInvoiceJourPacked,
        CreditCardPaymentInfoContainer _mCRCustPaymTablePacked,
        CreditCardPaymentOperation _creditCardPaymentOperation,
        CreditCardPaymentBreakDownExecutionContextMode _creditCardPaymentBreakDownExecutionContextMode)
    {
        return new CreditCardBreakDownPaymentPostProcessRunner(_salesTablePacked, _custInvoiceJourPacked, _mCRCustPaymTablePacked, _creditCardPaymentOperation, _creditCardPaymentBreakDownExecutionContextMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public boolean run()
    {
        try
        {
            if (CreditCardBreakDownRunnerHelper::isCustInvoiceFullySettled(executionCustInvoiceJour))
            {
                info("@CashManagement:CreditCardPaymentBreakDownInvoiceFullySettled");
                return true;
            }

            if (this.checkExistSpecTrans(executionCustInvoiceJour))
            {
                error("@CashManagement:CreditCardPaymentBreakDownInvoiceMarked");
                return false;
            }

            CreditCardPaymentJournal creditCardPaymentJournal = new CreditCardPaymentJournal(executionSalesTable, executionCustInvoiceJour);
            creditCardPaymentJournal.setBreakDownMode(true);

            if (!creditCardPaymentJournal.runWithBreakDown())
            {
                error(strFmt("@CashManagement:CreditCardPaymentBreakDownStageFailed", CreditCardPaymentStatus::PaymentPosted));
                return false;
            }
        }
        catch (Exception::Error)
        {
            error(strFmt("@CashManagement:CreditCardPaymentBreakDownStageFailed", CreditCardPaymentStatus::PaymentPosted));
            return false;
        }
        catch (Exception::Warning)
        {
            error(strFmt("@CashManagement:CreditCardPaymentBreakDownStageFailed", CreditCardPaymentStatus::PaymentPosted));
            return false;
        }
        catch (Exception::Info)
        {
            error(strFmt("@CashManagement:CreditCardPaymentBreakDownStageFailed", CreditCardPaymentStatus::PaymentPosted));
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRunMode</Name>
				<Source><![CDATA[
    public CreditCardBreakDownExecutionRunMode getRunMode()
    {
        return CreditCardBreakDownExecutionRunMode::MarshallingExecution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIdempotencySupported</Name>
				<Source><![CDATA[
    public boolean isIdempotencySupported()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHashVal</Name>
				<Source><![CDATA[
    public CreditCardPaymentBreakDownExecutionHashVal getHashVal()
    {
        List strToHash = new List(Types::String);
        strToHash.addEnd(any2Str(classIdGet(this)));
        strToHash.addEnd(con2base64str([executionSalesTable]));
        strToHash.addEnd(con2base64str([executionCustInvoiceJour]));
        return CreditCardPaymentHashCalculator::calculateHash(strToHash);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesTablePacked</Name>
				<Source><![CDATA[
    public container getSalesTablePacked()
    {
        return [SalesTable::findRecId(executionSalesTable.RecId)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustInvoiceJourPacked</Name>
				<Source><![CDATA[
    public container getCustInvoiceJourPacked()
    {
        return [CustInvoiceJour::findRecId(executionCustInvoiceJour.RecId)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMCRCustPaymTablePacked</Name>
				<Source><![CDATA[
    public container getMCRCustPaymTablePacked()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistSpecTrans</Name>
				<Source><![CDATA[
    private boolean checkExistSpecTrans(CustInvoiceJour _custInvoiceJour)
    {
        CustTransOpen custTransOpenInvoice = CustTransOpen::findRefId(_custInvoiceJour.custTrans().RecId);
        SpecTrans specTrans = SpecTrans::findByRef(curExt(), custTransOpenInvoice.TableId, custTransOpenInvoice.RecId);
        
        return specTrans.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>