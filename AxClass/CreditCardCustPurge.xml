<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CreditCardCustPurge</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>CreditCardCustPurger</c> class provides the functionality to purge  data in CreditCardCust table.
/// </summary>
internal final class CreditCardCustPurge extends RunBaseBatch implements BatchRetryable
{
    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        daysAgo
    #ENDMACRO

    private const PositiveDays MinRetentionDays = 90;
    private const int NumOfTasks = 4;
    private const str CreditCardCustFailureLogMessage = 'Logging error message: CreditCardCust purge failed for RecId %1: %2';

    private static CommerceHQEventSource eventWriter = CommerceHQEventSource::Log;

    internal PositiveDays daysAgo;
    internal DialogField dialogFieldDaysAgo;
    internal DialogField dialogFieldPurgeEndDate;
    internal utcdatetime endDate;
    internal utcdatetime startDate = DateTimeUtil::minValue();
    internal int maxPurgeThreshold = CustParameters::find().CreditCardCustPurgeThreshold;

    private boolean isChildTask = false;
    private RecId maxTaskRecId;
    private RecId minTaskRecId;
    private int taskId;

    private int maxRetryAttempts;
    private int backOffWait;
    private RecIdCount transactionCount, successCount, failureCount;
    private DialogRunbase dialogRunbase;

    private static CustInstrumentationLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        endDate = DateTimeUtil::addDays(
            DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
            -daysAgo);

        if (maxPurgeThreshold == 0)
        {
            maxPurgeThreshold = 25000;
        }

        maxRetryAttempts = 3;
        backOffWait = RandomGenerate::construct().randomInt(100, 5000);
        successCount = 0;
        failureCount = 0;
        transactionCount = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static CreditCardCustPurge construct()
    {
        if (FeatureStateProvider::isFeatureEnabled(RetailRestrictCreditCardUsageFeature::instance()))
        {
            return new CreditCardCustPurge();
        }
        else
        {
            throw error('@AccountsReceivable:CreditCardCustPurgeFeatureDisabled');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public container pack()
    {
        container packed = [#CurrentVersion, #CurrentList];
        packed = this.appendVariableToPack(packed, varStr(isChildTask), isChildTask);
        packed = this.appendVariableToPack(packed, varStr(maxTaskRecId), maxTaskRecId);
        packed = this.appendVariableToPack(packed, varStr(minTaskRecId), minTaskRecId);
        packed = this.appendVariableToPack(packed, varStr(taskId), taskId);
        packed = this.appendVariableToPack(packed, varStr(daysAgo), daysAgo);
        return packed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean unpack(container _packed)
    {
        Version version = RunBase::getVersion(_packed);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packed;
                isChildTask = this.extractPackedVariable(_packed, varStr(isChildTask));
                maxTaskRecId = this.extractPackedVariable(_packed, varStr(maxTaskRecId));
                minTaskRecId = this.extractPackedVariable(_packed, varStr(minTaskRecId));
                taskId = this.extractPackedVariable(_packed, varStr(taskId));
                daysAgo = this.extractPackedVariable(_packed, varStr(daysAgo));
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>extractPackedVariable</Name>
				<Source><![CDATA[
    private anytype extractPackedVariable(container _pack, str _variableName)
    {
        anytype value;
        [value] = SysPackExtensions::unpack(this.createXppPrePostArgsWithPack(_pack), this.getVariablePackKey(_variableName));
        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendVariableToPack</Name>
				<Source><![CDATA[
    private container appendVariableToPack(container _pack, str _variableName, anytype _value)
    {
        XppPrePostArgs packArgs = this.createXppPrePostArgsWithPack(_pack);
        SysPackExtensions::pack(packArgs, this.getVariablePackKey(_variableName), [_value]);
        return packArgs.getReturnValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createXppPrePostArgsWithPack</Name>
				<Source><![CDATA[
    private XppPrePostArgs createXppPrePostArgsWithPack(container _pack)
    {
        XppPrePostArgs prePostArgs = new XppPrePostArgs(_pack, '',  XppEventHandlerCalledWhen::Post);
        prePostArgs.setReturnValue(_pack);
        return prePostArgs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVariablePackKey</Name>
				<Source><![CDATA[
    private ClassName getVariablePackKey(str _variableName)
    {
        return classStr(CreditCardCustPurge) + '.' + _variableName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    internal static void main(Args _args)
    {
        CreditCardCustPurge::construct().prompt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogClosedWithOk</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void dialogClosedWithOk(Object _dialog)
    {
        super(_dialog);

        Args args = new Args();
        args.name(formstr(CreditCardCustPurgeDialog));
        args.parm(any2Str(daysAgo));

        FormRun formRun = classfactory.formRunClass(args);
        formRun.run();
        formRun.wait();

        if (!formRun.closedOk())
        {
            this.batchInfo().parmBatchExecute(NoYes::No);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void run()
    {
        if (isChildTask)
        {
            using (SysInstrumentationActivityContext activityContext = this.getActivityContextForRun())
            {
                this.purgeCreditCardCustData(activityContext);

                activityContext.getActivity().addCustomProperty(CustCreditCardInstrumentationConstants::SuccessCount, ApplicationCommonInstrumentationMagnitude::log10Magnitude(successCount));
                activityContext.getActivity().addCustomProperty(CustCreditCardInstrumentationConstants::FailureCount, ApplicationCommonInstrumentationMagnitude::log10Magnitude(failureCount));
                activityContext.getActivity().addCustomProperty(CustCreditCardInstrumentationConstants::TaskId, int2Str(taskId));
            }
        }
        else
        {
            this.createChildTask();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setToChildTask</Name>
				<Source><![CDATA[
    internal void setToChildTask()
    {
        isChildTask = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRecIdRanges</Name>
				<Source><![CDATA[
    internal void setRecIdRanges(RecId minRecId, RecId maxRecId)
    {
        minTaskRecId = minRecId;
        maxTaskRecId = maxRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createChildTask</Name>
				<Source><![CDATA[
    private void createChildTask()
    {
        BatchHeader batchHeader = BatchHeader::getCurrentBatchHeader();
        container datapoints = this.getDatapointsByPercentile();

        for (int i = 1; i <= NumOfTasks; i++)
        {
            taskId = i;
            CreditCardCustPurge batchBundlingTask = CreditCardCustPurge::construct();
            batchBundlingTask.unpack(this.pack());
            endDate = DateTimeUtil::addDays(
                DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                -daysAgo);

            batchBundlingTask.setToChildTask();
            batchBundlingTask.setRecIdRanges(conPeek(datapoints, i), conPeek(datapoints, i + 1));

            batchBundlingTask.batchInfo().parmGroupId(this.parmCurrentBatch().GroupId);
            batchBundlingTask.batchInfo().parmCaption(strFmt("@AccountsReceivable:CreditCardCustPurgeLogProcessingTask ??", taskId));
            batchHeader.addRuntimeTask(batchBundlingTask, this.parmCurrentBatch().RecId);
        }

        batchHeader.save();
    }

]]></Source>
			</Method>
			<Method>
				<Name>purgeCreditCardCustData</Name>
				<Source><![CDATA[
    private void purgeCreditCardCustData(SysInstrumentationActivityContext _activityContext)
    {
        System.Exception systemException;
        Microsoft.Dynamics.Ax.Xpp.DeadlockException deadLockException;
        Microsoft.Dynamics.Ax.Xpp.TransientSqlConnectionError transientSqlConnectionError;
        CreditCardCust creditCardCust;
        
        while select forupdate RecId
        from creditCardCust
        order by creditCardCust.CreatedDateTime asc
            where (creditCardCust.TokenScope != RetailTokenScope::Customer && creditCardCust.TokenScope != RetailTokenScope::Unknown)
            && creditCardCust.CreatedDateTime < endDate
            && creditCardCust.CreatedDateTime >= startDate
            && creditCardCust.RecId > minTaskRecId
            && creditCardCust.RecId <= maxTaskRecId
        {
            try
            {
                transactionCount++;
                if (!CreditCardCust::isCardTokenInUse(creditCardCust.RecId))
                {
                    eventWriter.EventWritePurgingCreditCardInfo(creditCardCust.RecId);
                    ttsbegin;
                    creditCardCust.delete();
                    ttscommit;
                    successCount++;
                }
                else
                {
                    eventWriter.EventWriteSkipPurgingCreditCardInUse(creditCardCust.RecId);
                }

                if (successCount mod 1000 == 0 && successCount != 0)
                {
                    // Don't overload system with purging. sleep for 100mS every 1000 rows deleted.
                    sleep(100);
                }
            }
            catch (deadLockException)
            {
                eventWriter.EventWriteCreditCardPurgeTaskDBException(deadLockException.GetType().ToString(), deadLockException.StackTrace, xSession::currentRetryCount(), maxRetryAttempts);
                if (xSession::currentRetryCount() <= maxRetryAttempts)
                {
                    sleep(xSession::currentRetryCount() * backOffWait);
                    retry;
                }
                else
                {
                    this.logWarningMessage(_activityContext, creditCardCust.RecId, deadLockException);
                    failureCount++;
                }
            }
            catch (transientSqlConnectionError)
            {
                eventWriter.EventWriteCreditCardPurgeTaskDBException(deadLockException.GetType().ToString(), deadLockException.StackTrace, xSession::currentRetryCount(), maxRetryAttempts);
                if (xSession::currentRetryCount() <= maxRetryAttempts)
                {
                    sleep(xSession::currentRetryCount() * backOffWait);
                    retry;
                }
                else
                {
                    this.logAndThrowException(_activityContext, creditCardCust.RecId, transientSqlConnectionError);
                }
            }
            catch (systemException)
            {
                this.logAndThrowException(_activityContext, creditCardCust.RecId, systemException);
            }
        }

        eventWriter.EventWritePaymentsPurgeCompleted(minTaskRecId, maxTaskRecId, transactionCount, successCount, failureCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDatapointsByPercentile</Name>
				<Source><![CDATA[
    private container getDatapointsByPercentile()
    {
        var builder = new System.Text.StringBuilder();
        this.buildGetDatapointsSQLString(builder);
        str getDatapointsSQL = builder.ToString();

        Connection sessionConn = new Connection();
        Statement statement = sessionConn.createStatement();

        new SqlStatementExecutePermission(getDatapointsSQL).assert();
        ResultSet getDatapointsResult = Statement.executeQueryWithParameters(getDatapointsSQL, SqlParams::create());
        CodeAccessPermission::revertAssert();

        getDatapointsResult.next();
        container getDatapoints;
        for (int i = 1; i <= NumOfTasks + 1; i++)
        {
            getDatapoints += getDatapointsResult.getInt64(i);
        }

        getDatapoints = conPoke(getDatapoints, 1, conPeek(getDatapoints, 1) - 1);

        return getDatapoints;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGetDatapointsSQLString</Name>
				<Source><![CDATA[
    private void buildGetDatapointsSQLString(System.Text.StringBuilder _builder)
    {
        /* Actual SQL statement example for the following SQL string
        SELECT
        PERCENTILE_CONT(0.00) WITHIN GROUP(ORDER BY T.RECID) over(),
        PERCENTILE_CONT(0.25) WITHIN GROUP(ORDER BY T.RECID) over(),
        PERCENTILE_CONT(0.50) WITHIN GROUP(ORDER BY T.RECID) over(),
        PERCENTILE_CONT(0.75) WITHIN GROUP(ORDER BY T.RECID) over(),
        PERCENTILE_CONT(1.00) WITHIN GROUP(ORDER BY T.RECID) over()
        FROM (
        SELECT TOP 1000 RECID
        FROM CREDITCARDCUST T
        WHERE T.PARTITION = 5637144576
        AND T.DATAAREAID = 'usrt'
        AND T.TOKENSCOPE != 1 -- Customer
        AND T.TOKENSCOPE != 0 -- Unknown
        AND T.CREATEDDATETIME < '2022-07-01 00:00:00.000'
        AND T.CREATEDDATETIME >= '1900-01-01 00:00:00.000'
        ) AS T
        */

        DictTable dictTable = new DictTable(tableNum(CreditCardCust));
        str creditCardCustTableName = dictTable.name(DbBackend::Sql);
        str createdDateFieldName = DictTable.fieldName(fieldNum(CreditCardCust, CreatedDateTime), DbBackend::Sql);
        str tokenScopeFieldName = DictTable.fieldName(fieldNum(CreditCardCust, TokenScope), DbBackend::Sql);
        str dataAreaIdFieldName = DictTable.fieldName(fieldNum(CreditCardAuthTrans, dataAreaId), DbBackend::Sql);
        str partitionFieldName = DictTable.fieldName(fieldNum(CreditCardAuthTrans, partition), DbBackend::Sql);
        const real interval = 1 / NumOfTasks;
        real percent = 0.00;
        
        _builder.Append('SELECT ');

        for (int i = 0; i < NumOfTasks; i++)
        {
            _builder.Append('PERCENTILE_CONT(').Append(percent).Append(') WITHIN GROUP(ORDER BY T.RECID) over(), ');
            percent += interval;
        }

        _builder.Append('PERCENTILE_CONT(').Append(percent).Append(') WITHIN GROUP(ORDER BY T.RECID) over() ');
        _builder.Append('FROM (SELECT TOP ').Append(maxPurgeThreshold);
        _builder.Append(' RECID FROM ').Append(creditCardCustTableName).Append(' T WHERE T.').Append(partitionFieldName).Append(' = ').Append(getCurrentPartitionRecId());
        _builder.Append(' AND T.').Append(dataAreaIdFieldName).Append(' = \'').Append(curExt()).Append('\' AND T.').Append(tokenScopeFieldName).Append(' != 1 ');
        _builder.Append('AND T.').Append(tokenScopeFieldName).Append(' != 0 ');
        _builder.Append('AND T.').Append(createdDateFieldName).Append(' < \'').Append(endDate).Append('\' AND T.');
        _builder.Append(createdDateFieldName).Append(' >= \'').Append(startDate).Append('\') AS T');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContextForRun</Name>
				<Source><![CDATA[
    private SysInstrumentationActivityContext getActivityContextForRun()
    {
        logger = CustInstrumentationLogger::newFromInstrumentationNameSpace(CustCreditCardInstrumentationConstants::InstrumentationNamespace);
        return logger.activityContext(logger.activity(
        CustCreditCardInstrumentationConstants::CreditCardCustPurgeProcess,
        CustCreditCardInstrumentationConstants::InstrumentationNamespace));
    }

]]></Source>
			</Method>
			<Method>
				<Name>logAndThrowException</Name>
				<Source><![CDATA[
    private void logAndThrowException(SysInstrumentationActivityContext _activityContext, RecId _recId, System.Exception _exception)
    {
        _activityContext.getActivity().addCustomProperty(
        CustCreditCardInstrumentationConstants::ErrorMsg,
        strFmt(CreditCardCustFailureLogMessage, _recId, _exception.ToString())
    );
        throw _exception;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logWarningMessage</Name>
				<Source><![CDATA[
    private void logWarningMessage(SysInstrumentationActivityContext _activityContext, RecId _recId, System.Exception _exception)
    {
        _activityContext.getActivity().addCustomProperty(
        CustCreditCardInstrumentationConstants::WarningMsg,
        strFmt(CreditCardCustFailureLogMessage, _recId, _exception.ToString())
    );
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Object dialog()
    {
        dialogRunbase = new DialogRunbase("@AccountsReceivable:CreditCardCustPurge", this);

        DialogGroup dialogGroupBase = dialogRunbase.addGroup(strMin());
        dialogGroupBase.frameType(FormFrameType::None);
        dialogGroupBase.columns(1);

        dialogFieldDaysAgo = dialogRunbase.addField(
        extendedTypeStr(PositiveDays),
        "@AccountsReceivable:CreditCardCustPurgeParameter",
        "@AccountsReceivable:CreditCardCustPurgeParameterHelp");

        dialogFieldDaysAgo.value(daysAgo);

        dialogFieldPurgeEndDate = dialogRunbase.addField(
        extendedTypeStr(ApprovedDateTime),
        "@AccountsReceivable:CreditCardCustPurgeEndDate");
        
        endDate = any2Date(DateTimeUtil::addDays(
        DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        -daysAgo));
        dialogFieldPurgeEndDate.value(endDate);
        dialogFieldPurgeEndDate.enabled(false);

        this.showBatchTab(true);

        dialogRunbase.formBuildDesign().control('OKButton').text("@ApplicationFoundation:NextFrame");

        return dialogRunbase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(dialogRunbase);

        FormRun formRun = _dialog.dialogForm().formRun();
        if (formRun)
        {
            dialogFieldDaysAgo.registerOverrideMethod(methodStr(FormStringControl, modified), methodStr(CreditCardCustPurge, modifiedDaysAgo), this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedDaysAgo</Name>
				<Source><![CDATA[
    private boolean modifiedDaysAgo(FormIntControl _control)
    {
        _control.modified();

        endDate = any2Date(DateTimeUtil::addDays(
        DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        -str2Num(_control.valueStr())));
        dialogFieldPurgeEndDate.value(endDate);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean getFromDialog()
    {
        daysAgo = dialogFieldDaysAgo.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean validate(Object _object = null)
    {
        return super() && this.validateActiveBatchJobExist() && this.validateMinimumAgeLimit() && this.validateNoTransaction();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMinimumAgeLimit</Name>
				<Source><![CDATA[
    private boolean validateMinimumAgeLimit()
    {
        boolean isValid = true;

        if (daysAgo < MinRetentionDays)
        {
            isValid = checkFailed(strFmt("@AccountsReceivable:CreditCardCustPurgeMinimumAgeLimit", MinRetentionDays));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNoTransaction</Name>
				<Source><![CDATA[
    private boolean validateNoTransaction()
    {
        boolean isValid = true;

        if (this.getTransactionCount() == 0)
        {
            isValid = checkFailed("@AccountsReceivable:CreditCardCustPurgeNoTransaction");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateActiveBatchJobExist</Name>
				<Source><![CDATA[
    private boolean validateActiveBatchJobExist()
    {
        boolean isValid = true;

        if (this.doesActiveBatchJobExist())
        {
            isValid = checkFailed("@AccountsReceivable:CreditCardCustPurgeBatchJobExist");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionCount</Name>
				<Source><![CDATA[
    private RecIdCount getTransactionCount()
    {
        endDate = any2Date(
        DateTimeUtil::addDays(DateTimeUtil::getSystemDateTime(), -daysAgo));

        return CreditCardCustPurge::getPurgeEligibleRecordCount(startDate, endDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesActiveBatchJobExist</Name>
				<Source><![CDATA[
    private boolean doesActiveBatchJobExist()
    {
        Batch batch;

        select firstonly batch
        where batch.ClassNumber == classNum(CreditCardCustPurge)
            && batch.Company == curExt()
            && (batch.Status == BatchStatus::Ready
                || batch.Status == BatchStatus::Waiting
                || batch.Status == BatchStatus::Scheduled
                || batch.Status == BatchStatus::Executing);

        return batch.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurgeEligibleRecordCount</Name>
				<Source><![CDATA[
    internal static RecIdCount getPurgeEligibleRecordCount(utcdatetime startDate, utcdatetime endDate)
    {
        CreditCardCust creditCardCust;
        creditCardCust.disableCache(true);

        select count(RecId) from creditCardCust
            where (creditCardCust.TokenScope != RetailTokenScope::Customer && creditCardCust.TokenScope != RetailTokenScope::Unknown)
            && creditCardCust.CreatedDateTime < endDate
            && creditCardCust.CreatedDateTime >= startDate;

        return creditCardCust.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static ClassDescription description()
    {
        return "@AccountsReceivable:CreditCardCustPurge";
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>