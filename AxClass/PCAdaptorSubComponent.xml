<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PcAdaptorSubComponent</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PcAdaptorSubComponent
{
    PCAdaptorComponent              adaptorComponent;
    PCAdaptorComponent              parentComponent;

    PCSubComponent                  subComponent;
    PCComponentInstance             parentComponentInstance;
    PCComponentInstanceSubComponent componentInstanceSubComponent;
    PCComponentInstanceValue        subComponentInstanceValue;

    PCAdaptorBOMLine                adaptorBOMLine;

    boolean                         acceptSubElmenents;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accept</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accepts a <c>PCAdaptorVisitor</c> class and passes it on to its sub-elements.
    /// </summary>
    /// <param name="_visitor">
    /// An instance of the <c>PCAdaptorVisitor</c> class.
    /// </param>
    public void accept(PCAdaptorVisitor _visitor)
    {
        _visitor.visitSubComponentStart(this);

        // only continue visiting sub elements if the visitor has not set the accept sub elements flag to false
        if (this.parmAcceptSubElements())
        {
            this.getComponent().accept(_visitor);
        }

        _visitor.visitSubComponentEnd(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBOMLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an adaptor BOM line that is associated with the sub-component.
    /// </summary>
    /// <returns>
    /// The adaptor BOM line.
    /// </returns>
    public PCAdaptorBOMLine getBOMLine()
    {
        return adaptorBOMLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a component.
    /// </summary>
    /// <returns>
    /// An instance of the <c>PCAdaptorComponent</c> class.
    /// </returns>
    public PCAdaptorComponent getComponent()
    {
        return adaptorComponent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getComponentID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ID of a component.
    /// </summary>
    /// <returns>
    /// A component ID.
    /// </returns>
    public int64 getComponentID()
    {
        return this.getComponent().getID();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getComponentInstanceSubComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a sub-component instance relation.
    /// </summary>
    /// <returns>
    /// The sub-component instance relation.
    /// </returns>
    public PCComponentInstanceSubComponent getComponentInstanceSubComponent()
    {
        return componentInstanceSubComponent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the item ID of a sub-component.
    /// </summary>
    /// <returns>
    /// The item ID.
    /// </returns>
    public ItemId getItemId()
    {
        return subComponent.getItemId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of a sub-component.
    /// </summary>
    /// <returns>
    /// The name of a sub-component.
    /// </returns>
    public PCSolverName getName()
    {
        return subComponent.SolverName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParentComponentID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ID of the parent component.
    /// </summary>
    /// <returns>
    /// The component ID of the parent.
    /// </returns>
    public int64 getParentComponentID()
    {
        return subComponent.ParentComponentClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>PCSubComponent</c> record.
    /// </summary>
    /// <returns>
    /// A <c>PCSubComponent</c> record.
    /// </returns>
    public PCSubComponent getSubComponent()
    {
        return subComponent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubComponentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the type of a sub-component
    /// </summary>
    /// <returns>
    /// The type of a sub-component.
    /// </returns>
    public PCSubComponentType getSubComponentType()
    {
        return subComponent.Type;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        acceptSubElmenents = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAcceptSubElements</Name>
				<Source><![CDATA[
        public boolean parmAcceptSubElements(boolean _accceptSubElements = acceptSubElmenents)
    {
        acceptSubElmenents = _accceptSubElements;

        return acceptSubElmenents;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setComponent</Name>
				<Source><![CDATA[
        protected void setComponent(PCAdaptorComponent _adaptorComponent)
    {
        adaptorComponent = _adaptorComponent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setComponentInstanceSubComponent</Name>
				<Source><![CDATA[
        protected void setComponentInstanceSubComponent(PCComponentInstanceSubComponent _componentInstanceSubComponent)
    {
        componentInstanceSubComponent.data(_componentInstanceSubComponent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setComponentInstanceValue</Name>
				<Source><![CDATA[
        protected void setComponentInstanceValue(PCComponentInstanceValue _componentInstanceValue)
    {
        subComponentInstanceValue.data(_componentInstanceValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParentComponentInstance</Name>
				<Source><![CDATA[
        protected void setParentComponentInstance(PCComponentInstance _parentComponentInstance)
    {
        parentComponentInstance.data(_parentComponentInstance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSubComponent</Name>
				<Source><![CDATA[
        protected void setSubComponent(PCSubComponent _subComponent)
    {
        subComponent = _subComponent.data();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupBOMLine</Name>
				<Source><![CDATA[
protected void setupBOMLine()
    {
        // sub components that are not of type user requirements will have a bom line associated
        PCSubComponentRequirement subComponentRequirement;
        PCTemplateComponent       templateComponent;

        subComponentRequirement = PCSubComponentRequirement::findBySubComponent(subComponent.RecId);

        if (subComponentRequirement.TemplateComponent != 0)
        {
            templateComponent = PCTemplateComponent::find(subComponentRequirement.TemplateComponent);

            adaptorBOMLine = PCAdaptorBOMLine::construct(templateComponent, parentComponentInstance);
            adaptorBOMLine.setAdaptorComponent(parentComponent);
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
public static PCAdaptorSubComponent construct(
        PCSubComponent                  _subComponent,
        PCComponentInstance             _parentComponentInstance,
        PCComponentInstanceSubComponent _componentInstanceSubComponent,
        PCComponentInstanceValue        _componentInstanceValue,
        PCAdaptorComponent              _adaptorComponent,
        PCAdaptorComponent              _parentComponent
    )
    {
        PCAdaptorSubComponent adaptorSubComponent = new PCAdaptorSubComponent();

        adaptorSubComponent.setSubComponent(_subComponent);
        adaptorSubComponent.setParentComponentInstance(_parentComponentInstance);
        adaptorSubComponent.parmParentComponent(_parentComponent);
        adaptorSubComponent.setComponentInstanceSubComponent(_componentInstanceSubComponent);
        adaptorSubComponent.setComponentInstanceValue(_componentInstanceValue);

        adaptorSubComponent.setComponent(_adaptorComponent);

        adaptorSubComponent.setupBOMLine();

        return adaptorSubComponent;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmParentComponent</Name>
				<Source><![CDATA[
    public PCAdaptorComponent parmParentComponent(PCAdaptorComponent _parentComponent = parentComponent)
    {
        parentComponent = _parentComponent;

        return parentComponent;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>