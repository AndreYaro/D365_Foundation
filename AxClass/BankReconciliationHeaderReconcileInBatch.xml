<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconciliationHeaderReconcileInBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
public final class BankReconciliationHeaderReconcileInBatch extends RunBaseBatch implements BatchRetryable
{
    private const int CurrentVersion = 1;

    private RecId headerRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(RecId _headerRecId)
    {
        super();
        this.headerRecId = _headerRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static ClassDescription description()
    {
        return "@CashManagement:MarkAsReconciledInBatch";
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, headerRecId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packed)
    {
        int version = RunBase::getVersion(_packed);
        switch (version)
        {
            case CurrentVersion:
                [version, headerRecId] = _packed;
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (BankAdvancedReconciliationLockFlight::instance().isEnabled())
        {
            SysInstrumentationProgressLogger progressLogger = SysInstrumentationProgressLogger::createLogger(BankInstrumentationConstants::AdvancedBankReconciliationLock, BankInstrumentationConstants::BankNamespace);
            BankReconciliationHeader header = BankReconciliationHeader::find(headerRecId);
            BankAdvancedReconciliationLock lock = new BankAdvancedReconciliationLock(header.AccountId);
            try
            {
                using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextForStage(BankInstrumentationConstants::AdvancedBankReconciliationEnterLock))
                {
                    activityContext.addCustomProperty(BankInstrumentationConstants::AdvancedBankReconciliationHeaderRecId, int642Str(headerRecId));
                    activityContext.addCustomProperty(BankInstrumentationConstants::AdvancedBankReconciliationBankAccountTableRecId, int642Str(BankAccountTable::find(header.AccountId).RecId));
                    lock.enterLock(this.parmCurrentBatch().BatchJobId);
                }

                if (lock.isLockAcquired())
                {
                    BankReconciliationHeader::reconcileInBatch(headerRecId, new UserConnection());
                    BankReconciliationHeader::updateReconciliationBatchStatus(headerRecId, BankReconciliationHeaderRunInBatchStatus::Finished);
                }
            }
            catch
            {
                BankReconciliationHeader::updateReconciliationBatchStatus(headerRecId, BankReconciliationHeaderRunInBatchStatus::Failed);
                throw;
            }
            finally
            {
                BankReconciliationBatchStatusTable statusTable = BankReconciliationBatchStatusTable::find(headerRecId, true);
                Debug::assert(statusTable != null);
                ttsbegin;
                statusTable.delete();
                ttscommit;

                using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextForStage(BankInstrumentationConstants::AdvancedBankReconciliationExitLock))
                {
                    activityContext.addCustomProperty(BankInstrumentationConstants::AdvancedBankReconciliationHeaderRecId, int642Str(headerRecId));
                    activityContext.addCustomProperty(BankInstrumentationConstants::AdvancedBankReconciliationBankAccountTableRecId, int642Str(BankAccountTable::find(header.AccountId).RecId));
                    activityContext.addCustomProperty(BankInstrumentationConstants::AdvancedBankReconciliationLockAcquired, strFmt("%1", lock.isLockAcquired()));
                    lock.exitLock();
                }
            }
        }
        else
        {
            try
            {
                BankReconciliationHeader::reconcileInBatch(headerRecId, new UserConnection());
                BankReconciliationHeader::updateReconciliationBatchStatus(headerRecId, BankReconciliationHeaderRunInBatchStatus::Finished);
            }
            catch
            {
                BankReconciliationHeader::updateReconciliationBatchStatus(headerRecId, BankReconciliationHeaderRunInBatchStatus::Failed);
                throw;
            }
            finally
            {
                BankReconciliationBatchStatusTable statusTable = BankReconciliationBatchStatusTable::find(headerRecId, true);
                Debug::assert(statusTable != null);
                ttsbegin;
                statusTable.delete();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>schedule</Name>
				<Source><![CDATA[
    internal static BatchHeader schedule(RecId _headerRecId)
    {
        BankReconciliationId reconciliationId = BankReconciliationHeader::find(_headerRecId).ReconciliationId;
        BankReconciliationHeaderReconcileInBatch batch = new BankReconciliationHeaderReconcileInBatch(_headerRecId);
        BatchHeader batchHeader = BatchHeader::construct();
        batchHeader.parmCaption(strFmt("@CashManagement:BankReconciliationHeaderReconcileInBatchTaskDescription", reconciliationId));
        batchHeader.parmRetriesOnFailure(0);
        batchHeader.addTask(batch);
        batchHeader.save();

        info(strFmt("@CashManagement:AdvancedBankReconciliationInBatchScheduled", reconciliationId));
        return batchHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProgress</Name>
				<Source><![CDATA[
    internal static void initializeProgress(RefRecId _headerRecId, RecIdCount _totalCount, UserConnection _connection)
    {
        BankReconciliationBatchStatusTable statusTable;
        statusTable.setConnection(_connection);
        statusTable.HeaderRecId = _headerRecId;
        statusTable.TotalCount = _totalCount;
        statusTable.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProgress</Name>
				<Source><![CDATA[
    internal static void updateProgress(RefRecId _headerRecId, RecIdCount _processedCount, UserConnection _connection)
    {
        BankReconciliationBatchStatusTable statusTable = BankReconciliationBatchStatusTable::find(_headerRecId);
        statusTable.setConnection(_connection);
        statusTable.selectForUpdate(true);
        _connection.ttsbegin();
        statusTable.ProcessedCount = _processedCount;
        statusTable.update();
        _connection.ttscommit();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>