<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplayQuarantine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the logic behind the RF flow used to quarantine inventory items.
/// </summary>
[WHSWorkExecuteMode(WHSWorkExecuteMode::Quarantine)]
class WhsWorkExecuteDisplayQuarantine extends WHSWorkExecuteDisplay
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildInventoryStatusFrom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds controls to form state for From Status screen.
    /// </summary>
    /// <param name="_con">
    /// Container containing the form state before the controls are added.
    /// </param>
    /// <param name="_label">
    /// Label text.
    /// </param>
    /// <param name="_showRemove">
    /// Determines whether Remove from Quarantine button should be shown, false by default.
    /// </param>
    /// <param name="_showBlank">
    /// Determines whether inventory status combobox should allow blank, false by default.
    /// </param>
    /// <param name="_showOK">
    /// Determines whether OK button should be shown, false by default.
    /// </param>
    /// <param name="_selected">
    /// Select combobox element, empty string by default.
    /// </param>
    /// <param name="_enabled">
    /// Determines whether inventory status combobox should be enabled, true by default.
    /// </param>
    /// <returns>
    /// Container containing the form state after the controls are added.
    /// </returns>
    container buildInventoryStatusFrom(container    _con,
                                       str          _label = '',
                                       boolean      _showRemove = false,
                                       boolean      _showBlank = false,
                                       boolean      _showOK = true,
                                       str          _selected = '',
                                       boolean      _enabled = true)
    {
        WHSInventStatus     inventStatus;
        container           ret = _con;
        boolean             first = true;
        str                 elements;
        str                 label = _label ? _label : "@WAX1304";      // From Status

        if (_showBlank)
        {
            elements = '||';
        }

        while select inventStatus
        {
            if (first)
            {
                elements += inventStatus.InventStatusId;
                first = false;
            }
            else
            {
                elements = elements + '||' + inventStatus.InventStatusId;
            }
        }

        ret += [this.buildControl(#RFCombobox, #FromInventoryStatus, label, 1, elements, #WHSRFUndefinedDataType, '', 0, _enabled, _selected, WHSRFColorText::Default, extendedTypeNum(WHSInventStatusId))];

        if (_showOK)
        {
            ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuarantine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds controls to form state for Quarantine screen.
    /// </summary>
    /// <param name="_con">
    /// Container containing the form state before the controls are added.
    /// </param>
    /// <param name="_location">
    /// Location of the item to be quarantined.
    /// </param>
    /// <returns>
    /// Container containing the form state after the controls are added.
    /// </returns>
    container buildQuarantine(container         _con,
                              WMSLocationId     _location = '')
    {
        container           ret = _con;
        WMSLocation         location;
        InventTable         inventTable;
        WHSInventTable      whsInventTable;
        boolean             multiSKU;

        if (pass.exists(#ItemId))
        {
            inventTable = InventTable::find(pass.lookup(#ItemId));
        }

        ret += [this.buildControl(#RFLabel, 'Quarantine', WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).rfTitle, 1, '', #WHSRFUndefinedDataType, '', 0)];

        if (!pass.exists(#WMSLocationId))
        {
            ret += [this.buildControl(#RFText, #LocOrLP, "@WAX1146", 1, _location, extendedTypeNum(WHSLocOrLP), '', 0)];
        }
        else
        {
            ret += [this.buildControl(#RFText, #WMSLocationId, "@WAX1196", 1, _location, extendedTypeNum(WMSLocationId), '', 0)];
        }

        if (_location && pass.exists(#InventLocationId))
        {
            location = WMSLocation::find(_location, pass.lookup(#InventLocationId));

            if (location.whsLocationIsLPControlled())
            {
                ret += [this.buildControl(#RFText, #LicensePlateId, "@WAX1198", 1, pass.lookupStr(#LicensePlateId), extendedTypeNum(WHSLicensePlateId), '', 0)];
            }
        }

        // Determine if License Plate has multiple items on it
        multiSKU = WHSLicensePlate::isMultiSKU(pass.lookupStr(#LicensePlateId))
                   || (pass.lookupStr(#ItemId) == ''
                       && WHSLicensePlate::isLPMultiDimension(pass.lookupStr(#LicensePlateId)));

        if (multiSKU)
        {
            ret += [this.buildControl(#RFLabel, #ItemId, "@WAX5535", 1, '', #WHSRFUndefinedDataType, '', 0)];
        }
        else
        {
            ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, pass.lookupStr(#ItemId), extendedTypeNum(InventInventItemSearchItem), '', 0)];
        }

        if (inventTable.RecId != 0)
        {
            whsInventTable = WHSInventTable::find(pass.lookup(#ItemId));

            if (whsInventTable.rfDescription1)
            {
                ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt('\t        %1', whsInventTable.rfDescription1), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSRFDescription1))];
            }
            else
            {
                ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt('\t        %1', inventTable.productNameWhsWorkExecute()), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(EcoResProductName))];
            }

            if (whsInventTable.rfDescription2)
            {
                ret += [this.buildControl(#RFLabel, #RFDescription2, strFmt('\t        %1', whsInventTable.rfDescription2), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSRFDescription2))];
            }
        }

        // If non LP location, must prompt for all physical dimensions
        if (!location.whsLocationIsLPControlled())
        {
            ret = this.buildProductDimensionsText(ret, inventTable.ItemId, true);

            ret = this.buildTrackingDimensionsText(ret, inventTable.ItemId, location, true, true);
        }

        if (location.whsLocationIsLPControlled())
        {
            if (multiSKU)
            {
                ret += [this.buildControl(#RFLabel, #Qty, strFmt("@WAX5536", WHSInvent::calculateHandlingQtyOnLicensePlate(pass.lookupStr(#LicensePlateId))), 1, '', #WHSRFUndefinedDataType, '', 0, true, "", WHSRFColorText::Default, extendedTypeNum(Qty))];
            }
            else
            {
                ret += [this.buildControl(#RFText, #Qty, "@SYS105177", 1, pass.lookupStr(#Qty), extendedTypeNum(Qty), '', 0, false)];
            }
        }
        else
        {
            ret += [this.buildControl(#RFText, #Qty, "@SYS105177", 1, pass.lookupStr(#Qty), extendedTypeNum(Qty), '', 0)];
        }

        if (!multiSKU)
        {
            ret = this.buildUOM(ret, '', false, false, false, pass.lookupStr(#SelectedValueUOM));
        }

        if (location.whsLocationIsLPControlled())
        {
            ret = this.buildInventoryStatusFrom(ret, '', false, false, false, pass.lookupStr(#SelectedFromValue), !pass.exists(#SelectedFromValue));
        }
        else
        {
            ret = this.buildInventoryStatusFrom(ret, '', false, false, false, pass.lookupStr(#SelectedFromValue));
        }

        ret = this.buildInventoryStatus(ret, "@WAX1305", false, false, false, pass.lookupStr(#SelectedValue));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayForm</Name>
				<Source><![CDATA[
    container displayForm(container _con, str _buttonClicked = '')
    {
        WHSWorkExecuteDisplay workExecuteDisplay = WHSWorkExecuteDisplay::construct(WHSWorkExecuteMode::Quarantine);
        WhsWorkExecute        workExecute = WhsWorkExecuteQuarantineByInventDim::construct();
        InventDim             inventDim;
        container             ret = conNull();
        container             con = _con;
        container             tmpFieldValues;
        int                   hasError = 0;
        boolean               complete;
        boolean               addCancel = true;
        WHSRFPassthrough      fieldValues = new WHSRFPassthrough(Types::String, Types::String);
        WHSInventStatusId     tmpInventStatusId;

        mode = conPeek(conPeek(_con, 1), 1);
        pass = WHSRFPassthrough::create(conPeek(_con, 2));

        hasError = this.hasError(con);

        switch (step)
        {
            case 0,1:
                if (pass.exists(#MenuItem))
                {
                    if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).DefaultData && !step)
                    {
                        con = this.buildQuarantine(ret);

                        con = this.updateModeStepPass(con, mode, step, pass);

                        pass.insert(#Initiation, 1);

                        step = 1;
                    }
                }
                if (step)
                {
                    if (hasError)
                    {
                        con = conDel(con, 3, 1);
                    }

                    ret = this.displayLocOrLPCheck(ret, this.getControlDataFromContainer(con, #LocOrLP));
                    
                    if (step == #LocOrLPCheck)
                    {
                        break;
                    }

                    [con, tmpFieldValues] = WHSRFControlData::processData(con, pass);
                    fieldValues = WHSRFPassthrough::create(tmpFieldValues);
                    pass = this.combineMaps(pass, fieldValues);
                    hasError = this.hasError(con);

                    if (hasError)
                    {
                        ret = con;
                        addCancel = false;
                        break;
                    }
                }
                else
                {
                    step = 1;
                    pass.insert(#Initiation, '1');
                }

                con = this.buildQuarantine(ret, pass.lookupStr(#WMSLocationId));

                if (!fieldValues.empty())
                {
                    [ret, complete] = this.processFieldValues(con, fieldValues);

                    if (complete)
                    {
                        if (!pass.exists(#Initiation))
                        {
                            if (pass.lookup(#FromInventoryStatus) == pass.lookup(#InventoryStatus))
                            {
                                throw error("@WAX1303");
                            }

                            ret = conNull();

                            inventDim = pass.createInventDimFromPass();

                            tmpInventStatusId = inventDim.InventStatusId;

                            if (!this.validateNonLPQuarantine(inventDim))
                            {
                                throw error("@WAX2218");
                            }

                            if (!this.validateStatusMixingNonLP(pass.lookup(#InventLocationId),
                                                                pass.lookup(#WMSLocationId),
                                                                WHSCatchWeightHelper::convertInventQuantity(pass.lookup(#ItemId),
                                                                                                       pass.lookup(#UOM),
                                                                                                       pass.lookupNum(#Qty),
                                                                                                       inventDim.inventDimId)))
                            {
                                throw error("@WAX3389");
                            }

                            inventDim.InventStatusId = tmpInventStatusId;
                            inventDim = InventDim::findOrCreate(inventDim);

                            if ((PdsGlobal::pdsIsCWItem(pass.lookup(#ItemId))
                            ||  ((pass.lookupStr(#ItemId) == '') && this.lpHasCWItem()))
                            &&  !pass.exists(#WorkId))
                            {
                                ret = conNull();
                                ret = this.buildCWCapture(ret);
                                addCancel = false;
                                break;
                            }

                            if ((PdsGlobal::pdsIsCWItem(pass.lookup(#ItemId))
                                && this.isLicensePlateSelected()
                                && this.hasMultipleItemsOnLP()))
                            {
                                pass.insert(#ItemId, '');
                            }

                            workExecute.createOrUpdateQuarantineWork(userId,
                                                                     inventDim,
                                                                     pass.lookupStr(#FromInventoryStatus),
                                                                     pass.lookup(#ItemId),
                                                                     pass.lookupNum(#Qty),
                                                                     pass.lookup(#UOM),
                                                                     false,
                                                                     true,
                                                                     pass.lookupStr(#WorkId), 0);

                            pass = this.resetPassthrough(ret, false);
                            pass.insert(#Initiation, 1);
                            con = this.updateModeStepPass(con, WHSWorkExecuteMode::Quarantine, step, pass);
                            con = conPoke(con, 1, [WHSWorkExecuteMode::Quarantine, step]);
                            workExecuteDisplay.setGlobals(mode, step, userId, pass, null);
                            ret = this.addErrorLabel(ret, "@WAX866", WHSRFColorText::Success);
                            ret = this.buildQuarantine(ret);
                        }
                        else
                        {
                            pass.remove(#Initiation);
                        }
                    }
                }
                else
                {
                    ret = con;
                }
                break;

            case #CWJourLineCapture:
                ret = this.processCWCapture(hasError, con);
                addCancel = false;
                break;

            case #CatchWeightTagCapture:
                ret = this.processCWTagCaptureQuarantine(hasError, con);
                addCancel = false;
                break;

            case #LocOrLPCheck:
                ret = this.processLocOrLPCheck(con, _buttonClicked);
                break;
        }

        ret = this.addButtons(ret);

        if (addCancel)
        {
            ret = this.addCancelButton(ret);
        }

        ret = this.updateModeStepPass(ret, mode, step, pass);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLocOrLPCheck</Name>
				<Source><![CDATA[
    private container processLocOrLPCheck(container _con, str _buttonClicked)
    {
        step = 1;

        var locOrLpIdentifier = pass.lookupStr(#LocOrLP);
        container ret = conNull();
        
        pass = this.resetPassthrough(ret, false);
        pass.insert(WHSWorkExecuteDisplayLocOrLPCheckControls::LocOrLPCheck, _buttonClicked);
        pass.insert(#Initiation, '1');

        ret = this.updateModeStepPass(ret, mode, step, pass);
        ret = this.buildQuarantine(ret, locOrLpIdentifier);
        ret = this.displayForm(ret, _buttonClicked);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNonLPQuarantine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that given quantity to quarantine is less than or equal to the onhand quantity.
    /// </summary>
    /// <param name="_inventDim">
    /// The item dimensions.
    /// </param>
    /// <returns>
    /// True if the qiven quantity is less than or equal to the onhand quantity.
    /// </returns>
    boolean validateNonLPQuarantine(InventDim   _inventDim)
    {
        boolean     ret = true;
        InventDim   inventDim = _inventDim;
        Qty         qty;

        inventDim.InventStatusId = pass.lookup(#FromInventoryStatus);
        inventDim = InventDim::findOrCreate(inventDim);

        qty = WHSInventOnHand::onHandQty(pass.lookup(#ItemId), inventDim.InventDimId);

        if (qty < WHSCatchWeightHelper::convertInventQuantity(pass.lookup(#ItemId), pass.lookup(#UOM), pass.lookupNum(#Qty), inventDim.inventDimId))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateStatusMixingNonLP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the mixing status is allowed in a LP non-controlled location.
    /// </summary>
    /// <param name="_inventLocationId">
    /// Warehouse id.
    /// </param>
    /// <param name="_locationId">
    /// Location id.
    /// </param>
    /// <param name="_qty">
    /// Quantity to be quarantined.
    /// </param>
    /// <returns>
    /// True if the mixing status is allowed in the location, false otherwise.
    /// </returns>
    boolean validateStatusMixingNonLP(InventLocationId  _inventLocationId,
                                      WMSLocationId     _locationId,
                                      Qty               _qty)
    {
        WMSLocation location;
        boolean     ret = true;

        ttsbegin;

        location = WMSLocation::find(_locationId, _inventLocationId);

        if (!location.whsLocationIsLPControlled()                                   &&
            !WHSLocationProfile::find(location.LocProfileId).AllowMixedStatus &&
            _qty < location.whsDisplayQty())
        {
            ret = false;
        }

        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupItemDimensionToProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up the controls for the next item and dimension capture.
    /// </summary>
    /// <returns>true if the item is tag tracked and it was possible to automatically select the tags; otherwise, false.</returns>
    private boolean setupItemDimensionToProcess()
    {
        boolean ret;

        if (this.isLicensePlateSelected())
        {
            // we can have multiple items in the same LP.
            if (!pass.lookupStr(WHSWorkExecuteDisplayCatchWeightControls::QuarantineItemDimensionAndQty))
            {
                // Populates all the items in the select location/lp into a map variable for further processing.
                this.populateItemsFromLPToMap();
            }

            Map itemDimQty = this.createMapFromPass(WHSWorkExecuteDisplayCatchWeightControls::QuarantineItemDimensionAndQty);
            Map itemDimWeight = this.createMapFromPass(WHSWorkExecuteDisplayCatchWeightControls::QuarantineItemDimensionAndWeight);

            str nextItemDimension = this.nextItemDimensionToCaptureWeight(itemDimQty);

            if (nextItemDimension)
            {
                pass.insert(#ItemId, this.getItemIdFromMapKey(nextItemDimension));
                pass.insert(#Qty, itemDimQty.lookup(nextItemDimension));
                
                pass.insert(WHSWorkExecuteDisplayCatchWeightControls::QuarantineProcessSelectedKey, nextItemDimension);

                WHSCatchWeightTagAutoSelect tagAutoSelect = WHSCatchWeightTagAutoSelectQuarantine::newFromParams(pass, nextItemDimension, pass.lookupStr(#ItemId), this.getInventDimIdFromMapKey(nextItemDimension), pass.lookupNum(#Qty));
                if (tagAutoSelect.canUseAutoSelection())
                {
                    tagAutoSelect.process();
                    ret = true;
                }
            }
        }
        else
        {
            str selectedItemDim = strFmt(WHSWorkExecuteDisplayCatchWeightControls::QuarantineProcessItemDimKeyFormat,
                                        InventTable::find(pass.lookupStr(#ItemId)).RecId,
                                        this.inventDimFrom().InventDimId);
            pass.insert(WHSWorkExecuteDisplayCatchWeightControls::QuarantineProcessSelectedKey, selectedItemDim);

            WHSCatchWeightTagAutoSelect tagAutoSelect = WHSCatchWeightTagAutoSelectQuarantine::newFromParams(pass, selectedItemDim, pass.lookupStr(#ItemId), this.inventDimFrom().inventDimId, pass.lookupNum(#Qty));
            if (tagAutoSelect.canUseAutoSelection())
            {
                tagAutoSelect.process();
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCWCapture</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the screen to capture weight for CW items.
    /// </summary>
    /// <param name="_con">
    /// The current container.
    /// </param>
    /// <returns>
    /// The new container with the weight capture controls.
    /// </returns>
    private container buildCWCapture(container _con)
    {
        container   ret = _con;
        InventDim   inventDimFrom;
        boolean     tagsAutoSelected;

        if (!pass.exists(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty))
        {
            tagsAutoSelected = this.setupItemDimensionToProcess();
        }

        inventDimFrom = InventDim::find(this.getInventDimIdFromMapKey(pass.lookupStr(WHSWorkExecuteDisplayCatchWeightControls::QuarantineProcessSelectedKey)));

        if (tagsAutoSelected || !WHSInventTable::isCatchWeightTagTracked(pass.lookupStr(#ItemId)))
        {
            ret += [this.buildControl(#RFLabel, #Scan, (tagsAutoSelected ? "@WAX:AssignCatchWeightTag" : "@WAX:CaptureWeight"), 1, '', #WHSRFUndefinedDataType, '', 0)];
            ret += [this.buildControl(#RFLabel, #ItemId, strFmt("@WAX2007", pass.lookupStr(#ItemId)), 1, '', #WHSRFUndefinedDataType, '', 0)];

            ret = this.buildProdDimLabelsFromInventDim(ret, pass.lookupStr(#ItemId), inventDimFrom);

            ret = this.buildTrackDimLabelsFromInventDim(ret, pass.lookupStr(#ItemId), inventDimFrom);

            ret += [this.buildControl(#RFLabel, #Qty, strFmt("@WAX736", pass.lookupNum(#Qty), WHSCatchWeightHelper::inventHandlingUnitId(pass.lookupStr(#ItemId))), 1, '', #WHSRFUndefinedDataType, '', 0)];

            if (inventDimFrom.LicensePlateId)
            {
                Map itemDimWeight = this.createMapFromPass(WHSWorkExecuteDisplayCatchWeightControls::QuarantineItemDimensionAndWeight);
                WHSCapturedWeight weight = itemDimWeight.lookup(pass.lookupStr(WHSWorkExecuteDisplayCatchWeightControls::QuarantineProcessSelectedKey));

                ret += [this.buildControl(#RFText, WHSWorkExecuteDisplayCatchWeightControls::CatchWeight, "@WAX:Weight", 1, WhsWorkExecuteDisplay::num2StrDisplay(weight), extendedTypeNum(Weight), '', 0, false)];
            }
            else if (tagsAutoSelected)
            {
                WHSCapturedWeight weight = WHSInventOnHand::getWorkPhysicalQuantityByInventDim(pass.lookupStr(#ItemId), inventDimFrom).parmInventQty();

                ret += [this.buildControl(#RFText, WHSWorkExecuteDisplayCatchWeightControls::CatchWeight, "@WAX:Weight", 1, WhsWorkExecuteDisplay::num2StrDisplay(weight), extendedTypeNum(Weight), '', 0, false)];
            }
            else
            {
                ret += [this.buildControl(#RFText, WHSWorkExecuteDisplayCatchWeightControls::CatchWeight, "@WAX:Weight", 1, '', extendedTypeNum(Weight), '', 0)];
            }

            ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];
            
            // Tag tracked catch weight items with auto-selection are also processed through this same step since tags are not individually captured in this case.
            step = #CWJourLineCapture;
        }
        else
        {
            if (!pass.exists(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty))
            {
                pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter, 1);
                pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty, pass.lookupNum(#Qty));
            }

            ret += [this.buildControl(#RFLabel, #Scan, "@WAX:AssignCatchWeightTag", 1, '', #WHSRFUndefinedDataType, '', 0)];

            ret += [this.buildControl(#RFLabel,
                                      WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter,
                                      strFmt("@WAX:TagLabelRF", pass.lookup(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter),
                                      pass.lookup(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty)),
                                      1,
                                      '',
                                      #WHSRFUndefinedDataType,
            '',
                                      0)];

            ret += [this.buildControl(#RFLabel, #ItemId, strFmt("@WAX2007", pass.lookupStr(#ItemId)), 1, '', #WHSRFUndefinedDataType, '', 0)];

            ret = this.buildProdDimLabelsFromInventDim(ret, pass.lookupStr(#ItemId), inventDimFrom);

            ret = this.buildTrackDimLabelsFromInventDim(ret, pass.lookupStr(#ItemId), inventDimFrom);
            
            ret += [this.buildControl(#RFText, WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTag,
                                      "@WAX:CatchWeightTagRF",
                                      1,
                                      pass.lookupStr(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTag),
                                      extendedTypeNum(WHSCatchWeightTagNumber),
                                      '',
                                      0)];

            step = #CatchWeightTagCapture;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProdDimLabelsFromInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds labels for the product dimensions of an item.
    /// </summary>
    /// <param name="_con">
    /// The current container.
    /// </param>
    /// <param name="_itemId">
    /// The item that determines which product dimensions to use.
    /// </param>
    /// <param name="_inventDim">
    /// <c>inventDim</c> buffer used to get the values of the product dimensions.
    /// </param>
    /// <returns>
    /// The new container with the product dimensions controls.
    /// </returns>
    private container buildProdDimLabelsFromInventDim(
        container   _con,
        ItemId      _itemId,
        InventDim   _inventDim)
    {
        ListEnumerator  le;
        DictType        dictType;
        container       ret         = _con;

        le = InventDimGroupSetup::newItemIdProductDimensionsOnly(_itemId).activeFields().getEnumerator();

        while (le.moveNext())
        {
            dictType = WHSWorkExecuteDisplay::dictTypeForTableField(tableNum(InventDim), le.current());

            ret += [this.buildControl(#RFLabel,
                                      fieldId2name(tableNum(InventDim),
                                      le.current()),
                                      strFmt("@WAX736", dictType.label(), _inventDim.(le.current())),
                                      1, '', #WHSRFUndefinedDataType, '', 0)];
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTrackDimLabelsFromInventDim</Name>
				<Source><![CDATA[
    private container buildTrackDimLabelsFromInventDim(
        container   _con,
        ItemId      _itemId,
        InventDim   _inventDim)
    {
        ListEnumerator  le;
        DictType        dictType;
        container       ret         = _con;

        le = InventDimGroupSetup::newItemId(_itemId).activeFields().getEnumerator();

        while (le.moveNext())
        {
            if (InventDim::isFieldIdTrackingDimension(le.current()) && _inventDim.(le.current()))
            {
                dictType = WHSWorkExecuteDisplay::dictTypeForTableField(tableNum(InventDim), le.current());

                ret += [this.buildControl(#RFLabel,
                                          fieldId2name(tableNum(InventDim),
                                          le.current()),
                                          strFmt("@WAX736", dictType.label(), _inventDim.(le.current())),
                                          1, '', #WHSRFUndefinedDataType, '', 0)];
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuarantineWorkForCW</Name>
				<Source><![CDATA[
    private void createQuarantineWorkForCW()
    {
        WHSWorkQuarantine       workQuarantine;
        InventDim               inventDimPass;
        InventDim               inventDim;
        InventDim               tmpInventDim;
        InventDimParm           inventDimParm;
        int                     lineNum;
        WHSInventStatusId       fromInventStatusId;
        utcdatetime             currentDateTime = DateTimeUtil::utcNow();
        Qty                     qty;

        ttsbegin;

        inventDimPass = pass.createInventDimFromPass();
        fromInventStatusId = pass.lookupStr(#FromInventoryStatus);

        WHSWorkTable workTableLoc;
        workTableLoc.setWorkId();
        workTableLoc.WorkStatus                = WHSWorkStatus::Closed;
        workTableLoc.WorkTransType             = WHSWorkTransType::Invent;
        workTableLoc.InventSiteId              = inventDimPass.InventSiteId;
        workTableLoc.InventLocationId          = inventDimPass.InventLocationId;
        workTableLoc.WorkInProcessUTCDateTime  = currentDateTime;
        workTableLoc.WorkClosedUTCDateTime     = currentDateTime;
        workTableLoc.write();

        if (inventDimPass.LicensePlateId)
        {
            Map itemQtyMap = this.createMapFromPass(WHSWorkExecuteDisplayCatchWeightControls::QuarantineItemDimensionAndQty);
            Map itemWeightMap = this.createMapFromPass(WHSWorkExecuteDisplayCatchWeightControls::QuarantineItemDimensionAndWeight);

            InventQty capturedWeight;

            MapIterator mi = new MapIterator(itemQtyMap);

            while (mi.more())
            {
                ItemId itemId = this.getItemIdFromMapKey(mi.key());
                qty = mi.value();
                capturedWeight = itemWeightMap.lookup(mi.key());
                InventDimId inventDimId = this.getInventDimIdFromMapKey(mi.key());
                tmpInventDim = InventDim::find(inventDimId);

                ++lineNum;

                // Create and execute the Quarantine records.
                workQuarantine.clear();
                workQuarantine.WorkId                  = workTableLoc.WorkId;
                workQuarantine.LineNum                 = lineNum;
                workQuarantine.TransDateTime           = DateTimeUtil::utcNow();
                workQuarantine.ItemId                  = itemId;
                workQuarantine.Qty                     = qty;
                workQuarantine.InventQtyRemain         = qty;
                workQuarantine.CapturedWeight          = capturedWeight;
                workQuarantine.RemainingCapturedWeight = capturedWeight;
                workQuarantine.setDimIds(tmpInventDim, fromInventStatusId, inventDimPass.InventStatusId, inventDimPass.LicensePlateId);
                workQuarantine.insert();

                mi.next();
            }
        }
        else
        {
            qty = pass.lookupNum(#Qty);

            // Create and execute the Quarantine records.
            workQuarantine.clear();
            workQuarantine.WorkId          = workTableLoc.WorkId;
            workQuarantine.LineNum         = 1;
            workQuarantine.TransDateTime   = DateTimeUtil::utcNow();
            workQuarantine.ItemId          = pass.lookupStr(#ItemId);
            workQuarantine.Qty             = qty;
            workQuarantine.InventQtyRemain = qty;
            workQuarantine.CapturedWeight  = pass.lookupReal(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight);
            workQuarantine.RemainingCapturedWeight = workQuarantine.CapturedWeight;
            workQuarantine.setDimIds(inventDimPass, fromInventStatusId, inventDimPass.InventStatusId, inventDimPass.LicensePlateId);
            workQuarantine.insert();
        }

        ttscommit;
        
        pass.insert(#WorkId, workTableLoc.WorkId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lpHasCWItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a
    /// </summary>
    /// <returns>
    /// True if the LP has a CW item, otherwise; false.
    /// </returns>
    private boolean lpHasCWItem()
    {
        InventSum           inventSum;
        InventDim           inventDim;
        PdsCatchWeightItem  catchWeightItem;
        
        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            select firstOnly RecId from inventSum
            where inventSum.PdsCWAvailPhysical  > 0
                && inventSum.ClosedQty          == NoYes::No
                && inventSum.LicensePlateId     == pass.lookup(#LicensePlateId)
                && inventSum.wMSLocationId      == pass.lookup(#WMSLocationId)
                && inventSum.InventLocationId   == pass.lookup(#InventLocationId)
            exists join catchWeightItem
                where catchWeightItem.ItemId == inventSum.ItemId;
        }
        else
        {
            select firstOnly RecId from inventSum
            where inventSum.PdsCWAvailPhysical  > 0
            &&    inventSum.ClosedQty           == NoYes::No
            exists join inventDim
                where inventDim.inventDimId         == inventSum.InventDimId
                &&    inventDim.LicensePlateId      == pass.lookup(#LicensePlateId)
                &&    inventDim.wMSLocationId       == pass.lookup(#WMSLocationId)
                &&    inventDim.InventLocationId    == pass.lookup(#InventLocationId)
            exists join catchWeightItem
                where catchWeightItem.ItemId == inventSum.ItemId;
        }

        return inventSum.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLicensePlateSelected</Name>
				<Source><![CDATA[
    private boolean isLicensePlateSelected()
    {
        InventDim inventDimPass = pass.createInventDimFromPass();
        return inventDimPass.LicensePlateId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasMultipleItemsOnLP</Name>
				<Source><![CDATA[
    private boolean hasMultipleItemsOnLP()
    {
        InventSum inventSum;
        InventDim tmpInventDim;
        int itemCounter;

        InventDim inventDimPass = pass.createInventDimFromPass();

        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            while select ItemId from inventSum
                group by ItemId
                where   inventSum.PhysicalInvent     > 0
                &&      inventSum.Closed            == NoYes::No
                &&      inventSum.InventLocationId  == inventDimPass.InventLocationId
                &&      inventSum.InventSiteId      == inventDimPass.InventSiteId
                &&      inventSum.wmsLocationId     == inventDimPass.wmsLocationId
                &&      inventSum.LicensePlateId    == inventDimPass.LicensePlateId
            {
                itemCounter++;

                if (itemCounter > 1)
                {
                    break;
                }
            }
        }
        else
        {
            while select ItemId from inventSum
                group by ItemId
                where inventSum.PhysicalInvent > 0
                &&    inventSum.Closed              == NoYes::No
                join tmpInventDim
                    where inventSum.InventDimId          == tmpInventDim.InventDimId
                        && tmpInventDim.InventLocationId == inventDimPass.InventLocationId
                        && tmpInventDim.InventSiteId     == inventDimPass.InventSiteId
                        && tmpInventDim.wmsLocationId    == inventDimPass.wmsLocationId
                        && tmpInventDim.LicensePlateId   == inventDimPass.LicensePlateId
            {
                itemCounter++;

                if (itemCounter > 1)
                {
                    break;
                }
            }
        }

        return itemCounter > 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateItemsFromLPToMap</Name>
				<Source><![CDATA[
    private void populateItemsFromLPToMap()
    {
        PdsCatchWeightItem      catchWeightItem;
        InventDim               tmpInventDim;
        InventSum               inventSum;

        InventDimParm           inventDimParm;
        InventDim               inventDimPass = pass.createInventDimFromPass();

        Map map = new Map(Types::String, Types::Real);
        Map mapWeight = new Map(Types::String, Types::Real);
        str mapKey;

        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            while select ItemId, InventDimId, #InventDimGroupAllFields from inventSum
                where   inventSum.PdsCWPhysicalInvent    > 0
                &&      inventSum.Closed                == NoYes::No
                &&      inventSum.InventLocationId      == inventDimPass.InventLocationId
                &&      inventSum.InventSiteId          == inventDimPass.InventSiteId
                &&      inventSum.wmsLocationId         == inventDimPass.wmsLocationId
                &&      inventSum.LicensePlateId        == inventDimPass.LicensePlateId
                exists join catchWeightItem
                    where catchWeightItem.ItemId == inventSum.ItemId
            {
                tmpInventDim.clear();
                tmpInventDim.initFromInventSum(inventSum);

                inventDimParm.initFromInventDim(tmpInventDim);
                InventOnhand inventOnhand = InventOnhand::newParameters(inventSum.ItemId,
                                                                       tmpInventDim,
                                                                       inventDimParm);
            
                //since we are looking for physical invent only we do not need to go to the WHSInventReserve tables so for performance reasons we set the delay flag
                inventOnhand.parmDelayAvailabilityCalculation(true);

                mapKey = strFmt(WHSWorkExecuteDisplayCatchWeightControls::QuarantineProcessItemDimKeyFormat, InventTable::find(inventSum.ItemId).RecId, inventSum.InventDimId);

                map.insert(mapKey, inventOnhand.pdsCWPhysicalInvent());
                mapWeight.insert(mapKey, inventOnhand.physicalInvent());
            }
        }
        else
        {
            while select ItemId, InventDimId from inventSum
                where inventSum.PdsCWPhysicalInvent  > 0
                &&    inventSum.Closed              == NoYes::No
                join tmpInventDim
                    where inventSum.InventDimId          == tmpInventDim.InventDimId
                        && tmpInventDim.InventLocationId == inventDimPass.InventLocationId
                        && tmpInventDim.InventSiteId     == inventDimPass.InventSiteId
                        && tmpInventDim.wmsLocationId    == inventDimPass.wmsLocationId
                        && tmpInventDim.LicensePlateId   == inventDimPass.LicensePlateId
                exists join catchWeightItem
                    where catchWeightItem.ItemId == inventSum.ItemId
            {
                inventDimParm.initFromInventDim(tmpInventDim);
                InventOnhand inventOnhand = InventOnhand::newParameters(inventSum.ItemId,
                                                                       tmpInventDim,
                                                                       inventDimParm);
            
                //since we are looking for physical invent only we do not need to go to the WHSInventReserve tables so for performance reasons we set the delay flag
                inventOnhand.parmDelayAvailabilityCalculation(true);

                mapKey = strFmt(WHSWorkExecuteDisplayCatchWeightControls::QuarantineProcessItemDimKeyFormat, InventTable::find(inventSum.ItemId).RecId, inventSum.InventDimId);

                map.insert(mapKey, inventOnhand.pdsCWPhysicalInvent());
                mapWeight.insert(mapKey, inventOnhand.physicalInvent());
            }
        }

        pass.insert(WHSWorkExecuteDisplayCatchWeightControls::QuarantineItemDimensionAndQty, con2Str(map.pack()));
        pass.insert(WHSWorkExecuteDisplayCatchWeightControls::QuarantineItemDimensionAndWeight, con2Str(mapWeight.pack()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMapFromContainer</Name>
				<Source><![CDATA[
    private Map createMapFromContainer(container _container)
    {
        Map map = new Map(Types::String, Types::Real);

        for (int i = 5; i < conLen(_container); i = i + 2)
        {
            map.insert(conPeek(_container, i), any2Real(conPeek(_container, i + 1)));
        }

        return map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMapFromPass</Name>
				<Source><![CDATA[
    private Map createMapFromPass(str _key)
    {
        container con = str2con(pass.lookupStr(_key));
        return this.createMapFromContainer(con);
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextItemDimensionToCaptureWeight</Name>
				<Source><![CDATA[
    private str nextItemDimensionToCaptureWeight(Map _itemWeightMap)
    {
        boolean nextKey;

        // In case the variable is empty, then select the first element in the map.
        if (!pass.exists(WHSWorkExecuteDisplayCatchWeightControls::QuarantineProcessSelectedKey))
        {
            nextKey = true;
        }

        MapIterator mi = new MapIterator(_itemWeightMap);
        while (mi.more())
        {
            if (nextKey)
            {
                return mi.key();
            }

            // If the current variable matches the existing pass value, then select the next element in the map
            if (mi.key() == pass.lookupStr(WHSWorkExecuteDisplayCatchWeightControls::QuarantineProcessSelectedKey))
            {
                nextKey = true;
            }

            mi.next();
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemIdFromMapKey</Name>
				<Source><![CDATA[
    private str getItemIdFromMapKey(str _key)
    {
        str ret;

        if (_key)
        {
            int indexOfSeparator = strFind(_key, '#', 0, strLen(_key));
            str itemRecId = subStr(_key, 0, indexOfSeparator - 1);

            ret = InventTable::findRecId(str2Int64(itemRecId)).ItemId;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimIdFromMapKey</Name>
				<Source><![CDATA[
    private str getInventDimIdFromMapKey(str _key)
    {
        int indexOfSeparator = strFind(_key, '#', 0, strLen(_key));
        return subStr(_key, indexOfSeparator + 1, strLen(_key));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimFrom</Name>
				<Source><![CDATA[
    private InventDim inventDimFrom()
    {
        InventDim inventDimPass = pass.createInventDimFromPass();

        InventDim inventDim = InventDim::find(inventDimPass.InventDimId);
        inventDim.InventStatusId = pass.lookupStr(#FromInventoryStatus);

        return InventDim::findOrCreate(inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimTo</Name>
				<Source><![CDATA[
    private InventDim inventDimTo()
    {
        InventDim inventDimPass = pass.createInventDimFromPass();

        InventDim inventDim = InventDim::find(inventDimPass.InventDimId);
        inventDim.InventStatusId = pass.lookupStr(#InventoryStatus);

        return InventDim::findOrCreate(inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCWCapture</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process quarantine work lines.
    /// </summary>
    /// <param name="_hasError">
    /// If the previous container has an error.
    /// </param>
    /// <param name="_con">
    /// The previous container.
    /// </param>
    /// <returns>
    /// The new container.
    /// </returns>
    private container processCWCapture(
        boolean     _hasError,
        container   _con)
    {
        container           ret = _con;
        container           tmpFieldValues;
        WHSRFPassthrough    fieldValues = new WHSRFPassthrough(Types::String, Types::String);
        boolean             hasError;
        boolean             complete;

        if (_hasError)
        {
            ret = conDel(ret, #RFErrorLoc, 1);
        }

        [ret, tmpFieldValues] = WHSRFControlData::processData(ret, pass);
        fieldValues = WHSRFPassthrough::create(tmpFieldValues);
        pass = this.combineMaps(pass, fieldValues);
        hasError = this.hasError(ret);

        if (hasError)
        {
            return ret;
        }

        if (!fieldValues.empty())
        {
            [ret, complete] = this.processFieldValues(ret, fieldValues);

            if (complete)
            {
                if (!this.isLicensePlateSelected())
                {
                    ret = this.completeCatchWeightProcessing();
                }
                else
                {
                    Map itemQtyMap = this.createMapFromPass(WHSWorkExecuteDisplayCatchWeightControls::QuarantineItemDimensionAndQty);
                    Map itemWeightMap = this.createMapFromPass(WHSWorkExecuteDisplayCatchWeightControls::QuarantineItemDimensionAndWeight);

                    itemWeightMap.insert(pass.lookupStr(WHSWorkExecuteDisplayCatchWeightControls::QuarantineProcessSelectedKey), pass.lookupReal(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight));
                    pass.insert(WHSWorkExecuteDisplayCatchWeightControls::QuarantineItemDimensionAndWeight, con2Str(itemWeightMap.pack()));

                    str nextItemDimension = this.nextItemDimensionToCaptureWeight(itemWeightMap);

                    if (nextItemDimension)
                    {
                        ret = conNull();
                        ret = this.buildCWCapture(ret);
                    }
                    else
                    {
                        ret = this.completeCatchWeightProcessing();
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>completeCatchWeightProcessing</Name>
				<Source><![CDATA[
    private container completeCatchWeightProcessing()
    {
        ttsbegin;

        this.createQuarantineWorkForCW();

        // License plate may have an item that is tag tracked
        if (this.isLicensePlateSelected() || WHSInventTable::isCatchWeightTagTracked(pass.lookupStr(#ItemId)))
        {
            this.updateTags();
        }

        ttscommit;

        container ret = [this.buildControl(#RFLabel, #Scan, "@WAX:AssignCatchWeightTag", 1, '', #WHSRFUndefinedDataType, '', 0)];
        step = 1;
        ret = this.updateModeStepPass(ret, mode, step, pass);
        ret = this.displayForm(ret);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCWTagCaptureQuarantine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process CW Tag capture.
    /// </summary>
    /// <param name="_hasError">
    /// If the previous container had an error.
    /// </param>
    /// <param name="_con">
    /// The previous container.
    /// </param>
    /// <returns>
    /// The new container.
    /// </returns>
    private container processCWTagCaptureQuarantine(
        boolean     _hasError,
        container   _con)
    {
        container           ret = _con;
        container           tmpFieldValues;
        WHSRFPassthrough    fieldValues = new WHSRFPassthrough(Types::String, Types::String);
        boolean             hasError;
        boolean             complete;
        
        if (_hasError)
        {
            ret = conDel(ret, #RFErrorLoc, 1);
        }

        [ret, tmpFieldValues] = WHSRFControlData::processData(ret, pass);
        fieldValues = WHSRFPassthrough::create(tmpFieldValues);
        pass = this.combineMaps(pass, fieldValues);
        hasError = this.hasError(ret);

        if (hasError)
        {
            return ret;
        }

        if (!fieldValues.empty())
        {
            [ret, complete] = this.processFieldValues(ret, fieldValues);

            if (complete)
            {
                WHSCatchWeightTag catchWeightTag = WHSCatchWeightTag::find(pass.lookup(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTag));

                if (this.isCatchWeightTagScannedForQuarantine(catchWeightTag.RecId))
                {
                    throw error(strFmt("@WAX:MobileDeviceControlValidationCatchWeightTagInvalidStatus", catchWeightTag.TagNumber));
                }

                this.addTagRecordIdToPass(catchWeightTag.RecId);

                // Remove current Tag Id and increment Tag Counter
                pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTag);
                pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter,
                        (pass.lookupInt64(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter) + 1));

                // Increment total catch weight value
                if (!pass.exists(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight))
                {
                    pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight,
                            catchWeightTag.CapturedWeight);
                }
                else
                {
                    pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight,
                            (pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight) + catchWeightTag.CapturedWeight));
                }

                // Check to see if all tags have been captured
                if (pass.lookupInt64(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter) > pass.lookupInt64(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty))
                {
                    pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagWeight);
                    pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter);

                    str nextItemDimension;

                    if (this.isLicensePlateSelected())
                    {
                        Map itemQtyMap = this.createMapFromPass(WHSWorkExecuteDisplayCatchWeightControls::QuarantineItemDimensionAndQty);
                        Map itemWeightMap = this.createMapFromPass(WHSWorkExecuteDisplayCatchWeightControls::QuarantineItemDimensionAndWeight);

                        itemWeightMap.insert(pass.lookupStr(WHSWorkExecuteDisplayCatchWeightControls::QuarantineProcessSelectedKey), pass.lookupReal(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight));
                        pass.insert(WHSWorkExecuteDisplayCatchWeightControls::QuarantineItemDimensionAndWeight, con2Str(itemWeightMap.pack()));

                        pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty);
                        pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight);

                        nextItemDimension = this.nextItemDimensionToCaptureWeight(itemWeightMap);
                    }

                    if (nextItemDimension)
                    {
                        ret = conNull();
                        ret = this.buildCWCapture(ret);
                    }
                    else
                    {
                        ret = this.completeCatchWeightProcessing();
                    }
                }
                else
                {
                    ret = conNull();
                    ret = this.buildCWCapture(ret);
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTagRecordIdToPass</Name>
				<Source><![CDATA[
    private void addTagRecordIdToPass(WHSCatchWeightTagRecId _catchWeightTagRecId)
    {
        str key = pass.lookupStr(WHSWorkExecuteDisplayCatchWeightControls::QuarantineProcessSelectedKey);
        str tagNumbers = pass.lookupStr(key);

        tagNumbers += (tagNumbers ? ',' : '') + int642Str(_catchWeightTagRecId);
        pass.insert(key, tagNumbers);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTags</Name>
				<Source><![CDATA[
    private void updateTags()
    {
        if (!this.isLicensePlateSelected())
        {
            str key = pass.lookupStr(WHSWorkExecuteDisplayCatchWeightControls::QuarantineProcessSelectedKey);
            this.updateTagInventoryStatuses(pass.lookupStr(key));
        }
        else
        {
            Map itemWeightMap = this.createMapFromPass(WHSWorkExecuteDisplayCatchWeightControls::QuarantineItemDimensionAndWeight);
            MapIterator mi = new MapIterator(itemWeightMap);

            while (mi.more())
            {
                str tagNumbers = pass.lookupStr(mi.key());
 
                if (tagNumbers)
                {
                    this.updateTagInventoryStatuses(tagNumbers);
                }

                mi.next();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTagInventoryStatuses</Name>
				<Source><![CDATA[
    private void updateTagInventoryStatuses(str _tagNumbers)
    {
        List tagRecIdList = strSplit(_tagNumbers, ',');
        ListIterator iterator = new ListIterator(tagRecIdList);
            
        while(iterator.more())
        {
            WHSCatchWeightTag tag = WHSCatchWeightTag::findByRecId(str2Int64(iterator.value()), true);

            InventDim inventDim = InventDim::find(tag.InventDimId);
            inventDim.InventStatusId = pass.lookupStr(#InventoryStatus);
            tag.InventDimId = InventDim::findOrCreate(inventDim).inventDimId;

            tag.update();

            iterator.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCatchWeightTagScannedForQuarantine</Name>
				<Source><![CDATA[
    private boolean isCatchWeightTagScannedForQuarantine(WHSCatchWeightTagRecId _catchWeightTagRecId)
    {
        if (!this.isLicensePlateSelected())
        {
            str key = pass.lookupStr(WHSWorkExecuteDisplayCatchWeightControls::QuarantineProcessSelectedKey);

            container scannedTags = str2con(pass.lookupStr(key));

            return conFind(scannedTags, _catchWeightTagRecId) != 0;
        }
        else
        {
            Map itemWeightMap = this.createMapFromPass(WHSWorkExecuteDisplayCatchWeightControls::QuarantineItemDimensionAndWeight);
            MapIterator mi = new MapIterator(itemWeightMap);

            while (mi.more())
            {
                container scannedTags = str2con(pass.lookupStr(mi.key()));
                
                if (conFind(scannedTags, _catchWeightTagRecId) != 0)
                {
                    return true;
                }

                mi.next();
            }

            return false;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>