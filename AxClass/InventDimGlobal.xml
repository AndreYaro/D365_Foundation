<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimGlobal</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventDimGlobal</c> class provides a cache for blank inventory dimensions.
/// </summary>
class InventDimGlobal
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>scope</Name>
				<Source><![CDATA[
    private static GlobalObjectCacheScope scope()
    {
        return classStr(InventDimGlobal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>flushAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Flushes all cached values for all companies.
    /// </summary>
    public static void flushAll()
    {
        SysGlobalObjectCache    sysGlobalObjectCache    = classfactory.globalObjectCache();
        GlobalObjectCacheScope  scope                   = InventDimGlobal::scope();

        sysGlobalObjectCache.clear(scope);
    }

]]></Source>
			</Method>
			<Method>
				<Name>flushDataCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Flushes cached values for current companies.
    /// </summary>
    public static void flushDataCache()
    {
        SysGlobalObjectCache    sysGlobalObjectCache    = classfactory.globalObjectCache();
        GlobalObjectCacheScope  scope                   = InventDimGlobal::scope();
        container               key                     = InventDimGlobal::cacheKeyForCurrentCompany();

        sysGlobalObjectCache.remove(scope, key);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimIdBlank</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the blank inventory dimension ID.
    /// </summary>
    /// <returns>The blank inventory dimension ID.</returns>
    public static InventDimId inventDimIdBlank()
    {
        SysGlobalObjectCache    sysGlobalObjectCache    = classfactory.globalObjectCache();
        GlobalObjectCacheScope  scope                   = InventDimGlobal::scope();
        container               key                     = InventDimGlobal::cacheKeyForCurrentCompany();
        InventDimId             inventDimIdBlank;

        container packedInventDimIdBlank = sysGlobalObjectCache.find(scope, key);
        if (packedInventDimIdBlank && conLen(packedInventDimIdBlank) > 0)
        {
            [inventDimIdBlank] = packedInventDimIdBlank;

            if (inventDimIdBlank)
            {
                return inventDimIdBlank;
            }
        }
        
        inventDimIdBlank = InventDim::findOrCreateBlank().InventDimId;
        sysGlobalObjectCache.insert(scope, key, [inventDimIdBlank]);
        return inventDimIdBlank;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cacheKeyForCurrentCompany</Name>
				<Source><![CDATA[
    private static container cacheKeyForCurrentCompany()
    {
        return [curExt()];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>