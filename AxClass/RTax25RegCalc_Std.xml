<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25RegCalc_Std</Name>
	<SourceCode>
		<Declaration><![CDATA[
// General class for standard expenses
// Launches all the standard expense sequences attached
// Manages appropriate output channels
public class rTax25RegCalc_Std extends RTax25RegCalc implements BatchRetryable
{
    RTax25StdSeq                seqTable;

    boolean                     firstLine;
    RefRecId                    lastProfitTableRecId;
    container                   headerFields;
    real                        totals[];

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTotals</Name>
				<Source><![CDATA[
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
protected void addTotals(
        RefRecId  _profitTableRecId,
        container _values,
        boolean   _lastLine = false)
    {
        int         idx;
        container   lastTotalValues;

        if (! headerFields)
            return;

        if (_profitTableRecId != lastProfitTableRecId)
        {
            if (! firstLine)
            {
                for (idx = 1; idx <= conlen(headerFields); idx++)
                {
                    switch (conpeek(regType.fieldBaseType(), idx))
                    {
                        case    Types::Integer,
                                Types::Int64   :
                            lastTotalValues += conpeek(headerFields, idx) ? trunc(totals[idx]) : 0;
                            break;
                        case Types::Real :
                            lastTotalValues += conpeek(headerFields, idx) ? totals[idx] : 0.0;
                            break;
                        case Types::String,
                             Types::RString,
                             Types::VarString :
                            lastTotalValues += "";
                            break;
                        case Types::Date :
                            lastTotalValues += dateNull();
                            break;

                        default :
                            throw error("@GLS103886");
                    }
                }
                regQuery.addFooterRecord(lastProfitTableRecId, lastTotalValues, 1);
            }
            else
            {
                firstLine = false;
            }
            if (! _lastLine)
            {
                regQuery.addHeaderRecord(_profitTableRecId, conNull(), 1);
            }
            else
                return;

            totals[0] = 0.0;
        }

        for (idx = 1; idx <= conlen(headerFields); idx++)
        {
            if (conpeek(headerFields, idx) != 1)
                continue;
            totals[idx] += conpeek(_values, idx);
        }
        lastProfitTableRecId = _profitTableRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTrans</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public boolean addTrans(Map _transMap)
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
        public void calc()
    {
        RTax25RegType_Std regTypeStd = regType;

        headerFields         = regTypeStd.headerFields();
        firstLine            = true;
        lastProfitTableRecId = 0;

        super();

        this.runSequences();
        this.addTotals(0, connull(), true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkData</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public boolean checkData(Map _transMap)
    {
        container   mcon = this.mandatoryFields();
        boolean     ret = true;
        int         i;

        for (i = 1; i <= conlen(mcon); i++)
        {
            if (! _transMap.exists(conpeek(mcon, i)))
            {
                ret = checkFailed(strfmt("@SYS26332", conpeek(mcon, i)));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mandatoryFields</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public container mandatoryFields()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>peekValue</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected container peekValue(container     _target,
                                  RTax25FieldId _fieldId,
                                  Map           _transMap,
                                  int           _mapIdx = _fieldId)
    {
        container ret;

        if (! _transMap.exists(_fieldId))
            return _target;

        switch (conpeek(regType.fieldBaseType(), _fieldId))
        {
            case Types::Integer :
                ret = conpoke(_target, _fieldId, _transMap.lookup(_mapIdx).int());
                break;
            case Types::Real :
                ret = conpoke(_target, _fieldId, this.roundOff(_fieldId, _transMap.lookup(_mapIdx).decimal()) );
                break;
            case Types::String,
                 Types::RString,
                 Types::VarString :
                ret = conpoke(_target, _fieldId, _transMap.lookup(_mapIdx).bStr());
                break;
            case Types::Date :
                ret = conpoke(_target, _fieldId, _transMap.lookup(_mapIdx).date());
                break;
            default :
                throw error("@GLS103886");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundOff</Name>
				<Source><![CDATA[
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
protected real roundOff(RTax25FieldId _fieldId, real _value)
    {
        int noOfDecimals = new SysDictType_RU(conpeek(regType.fieldType(), _fieldId)).noOfDecimals();
        real roundFactor;

        switch (noOfDecimals)
        {
            case 0:
                roundFactor = 1;
                break;

            case 1:
                roundFactor = 0.1;
                break;

            case 2:
                roundFactor = 0.01;
                break;

            default:
                roundFactor = noOfDecimals > 0 ? 1 / power(10, noOfDecimals) : 1;
        }

        return round(_value, roundFactor);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runSequences</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void runSequences()
    {
        RecordSortedList            seqList;
        RTax25StdExpressionTable    expressionTable;
        RTax25StdExpression         expression;
        RTax25StdChannel            channel;
        int                         i = 1;

        const int ProgressNum = 2;

        seqList = RTax25RegParametersEngine_Std::parameters2SeqList(RTax25RegisterParameters::find(registerId, 1).Parameter);
        if (! seqList)
            throw error("@SYS19457");

        if (! seqList.len())
            throw error("@GLS104168");

        this.progressInit("",seqList.len(),#AviUpdate);
        seqList.first(seqTable);
        while (seqTable && i <= seqList.len())
        {
            progress.setText(int2str(seqTable.SeqNum) + "@GLS105455", 1);
            progress.setTotal((select count(RecId) from rTax25StdExpressionTable
                                   where rTax25StdExpressionTable.SeqNum == seqTable.SeqNum).RecId, ProgressNum);
            channel = RTax25StdChannel::constructChannel(seqTable.ChannelType, this);
            channel.open();

            while select expressionTable
                where expressionTable.SeqNum == seqTable.SeqNum
            {
                progress.setText("@GLS103733" + "@GLS102908" + RTax25ProfitTable::find(expressionTable.rTax25ProfitTable).ProfitId, ProgressNum);
                expression = RTax25StdExpression::newParameters(expressionTable,
                                                                channel,
                                                                dateFrom,
                                                                dateTo,
                                                                rTax25PeriodIterator);
                expression.calc();
                progress.incCount(1, ProgressNum);
            }

            channel.close();
            seqList.next(seqTable);
            progress.incCount(1, 1);
            i++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>seqTable</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public RTax25StdSeq seqTable(RTax25StdSeq _rTax25StdSeq = seqTable)
    {
        seqTable = _rTax25StdSeq;
        return seqTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctedPeriodDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the minimum date from the dates which correspond to the end of the quarter in which the reporting date of the corrective transaction is included.
    /// </summary>
    /// <param name="_fromDateCalc">
    ///    Start date of the period in which the accounting date should be included.
    /// </param>
    /// <param name="_toDateCalc">
    ///    End date of the period in which the accounting date should be included.
    /// </param>
    /// <param name="_toDateCorr">
    ///    End date of the period in which the reporting date should be included.
    /// </param>
    /// <returns>
    ///    Minimum date from the dates which correspond to the end of the quarter in which the corrective transaction is included.
    /// </returns>
    public ReportingDate_RU correctedPeriodDate(FromDate _fromDateCalc, ToDate _toDateCalc, ToDate _toDateCorr)
    {
        RecordSortedList            seqList;
        RTax25StdExpressionTable    expressionTable;
        RTax25StdExpression         expression;
        int                         i = 1;

        ReportingDate_RU            correctedPeriodDate, tmpDate;

        seqList = RTax25RegParametersEngine_Std::parameters2SeqList(RTax25RegisterParameters::find(registerId, 1).Parameter);
        if (! seqList)
            throw error("@SYS19457");

        if (! seqList.len())
            throw error("@GLS104168");

        seqList.first(seqTable);
        while (seqTable && i <= seqList.len())
        {
            while select expressionTable
                where expressionTable.SeqNum == seqTable.SeqNum
            {
                expression = RTax25StdExpression::newParameters(expressionTable,
                                                                null,
                                                                _fromDateCalc,
                                                                _toDateCalc);

                tmpDate = expression.correctedPeriodDate(
                        _fromDateCalc,
                        _toDateCalc,
                        _toDateCorr);

                if (!correctedPeriodDate || (tmpDate && correctedPeriodDate > tmpDate))
                {
                    correctedPeriodDate = tmpDate;
                }
            }

            seqList.next(seqTable);
            i++;
        }

        return correctedPeriodDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>