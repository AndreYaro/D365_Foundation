<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TAMCalcMerchandiseCost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TAMCalcMerchandiseCost</c> class calculates merchandising cost to be
/// shown for merchandising events and promotions.
/// </summary>
class TAMCalcMerchandiseCost
{
    MCRMerchandisingEventID  merchEventID;
    TAMPromotionID           promotionID;
    CustAccount              custAccount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcBBAndOICost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the cost for discounts associated with off invoice and bill back events.
    /// </summary>
    /// <param name="_merchEventCategory">
    /// The <c>_merchEventCategory</c> of the merchandising event for which to calculate the cost for discounts.
    /// </param>
    /// <returns>
    /// The total cost for discounts on the event.
    /// </returns>
    public AmountCur calcBBAndOICost(MCRMerchandisingEventCategory  _merchEventCategory)
    {
        TAMPromotionItem        tamPromotionItem;
        TAMMerchEventPricing    tamMerchEventPricing;
        PdsRebateAgreement      rebateAgreement;
        PdsRebateAgreementLine  rebateAgreementLine;
        Price                   priceAfterDisc;
        AmountCur               totalCost;
        Qty                     weightedQty;
        Price                   priceAfterDiscPercent;
        InventTableModule       inventTableModule;
        TAMTradePromotion       tradePromotion = TAMTradePromotion::findByPromoID(promotionID);
        MCRWeighting            totalWeight = 0;
        boolean                 basePricePassed;
        AmountCur               amountInPromoUnit;
        Qty                     unitConversionFactor;
        AmountCur               amountCurrencyConversion;
        MCROverriddenShipQty    expectedShipQty;
        AmountCur               baseUnitPrice;
        AmountCur               rebateAmount;
        real                    mcrWeightingValue;

        expectedShipQty = TAMTradePromotion::findByPromoID(promotionID).OverriddenShipQty;

        tamMerchEventPricing = TAMMerchEventPricing::findMerchEventCostLevel(merchEventID);

        while select ItemID, MerchandisingEventID, Weighting, InventDimID from tamPromotionItem
            where tamPromotionItem.MerchandisingEventID == merchEventID
            join inventTableModule
            where inventTableModule.ItemId == tamPromotionItem.ItemID
                && inventTableModule.ModuleType == ModuleInventPurchSales::Sales
        {
            // Declare this value only once.  It was potentially being called twice.
            mcrWeightingValue = this.totalPromoWeighting(tamPromotionItem.MerchandisingEventID);
            if (!basePricePassed)
            {
                // Declared in join.
                unitConversionFactor = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                                                                        tamPromotionItem.ItemID,
                                                                        tamPromotionItem.InventDimID,
                                                                        1,
                                                                        tradePromotion.UnitID,
                                                                        inventTableModule.UnitId,
                                                                        NoYes::Yes);

                amountInPromoUnit = unitConversionFactor * inventTableModule.price();
                amountCurrencyConversion = ExchangeRateHelper::curPrice2CurPrice(amountInPromoUnit, CompanyInfoHelper::standardCurrency(), tradePromotion.Currency);
                baseUnitPrice = amountCurrencyConversion;
            }
            else
            {
                // Find MCRWeighting above.
                baseUnitPrice = baseUnitPrice * tamPromotionItem.Weighting/mcrWeightingValue ;
            }
            if (_merchEventCategory == MCRMerchandisingEventCategory::OffInvoice)
            {
                priceAfterDisc = baseUnitPrice - tamMerchEventPricing.DiscountAmt;
                weightedQty =  expectedShipQty * (tamPromotionItem.Weighting/mcrWeightingValue);
                priceAfterDiscPercent = tamMerchEventPricing.DiscountPercent * 0.01;

                totalCost += ((baseUnitPrice - (priceAfterDisc * (1 - priceAfterDiscPercent))) * weightedQty);
            }
            else
            {
                rebateAmount = expectedShipQty * baseUnitPrice;

                date dateFrom = tradePromotion.OrdersStartDate;
                date dateTo = tradePromotion.OrdersEndDate;

                select firstOnly validtimestate(dateFrom, dateTo) RecId from rebateAgreement
                    where rebateAgreement.TAMMerchandisingEventID == merchEventID
                    join RebateAmtType, RebateValue, RecId from rebateAgreementLine
                    order by RebateValue desc
                    where rebateAgreementLine.RebateAgreementRefRecId == rebateAgreement.RecId;

                if (rebateAgreementLine.RecId != 0)
                {
                    if (rebateAgreementLine.RebateAmtType == PdsRebateAmtType::AmountPerUnit)
                    {
                        priceAfterDisc = baseUnitPrice - rebateAgreementLine.RebateValue;
                    }
                    else if (rebateAgreementLine.RebateAmtType == PdsRebateAmtType::Percentage)
                    {
                        priceAfterDiscPercent = rebateAgreementLine.RebateValue * 0.01;
                        priceAfterDisc = baseUnitPrice;
                    }
                    else
                    {
                        return  rebateAgreementLine.RebateValue;
                    }

                    weightedQty =  expectedShipQty * (tamPromotionItem.Weighting/mcrWeightingValue);

                    totalCost += ((baseUnitPrice - (priceAfterDisc * (1 - priceAfterDiscPercent))) * weightedQty);
                }
            }
        }

        return totalCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLumpSumCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates merchandising cost for lump sum events.
    /// </summary>
    /// <returns>
    /// The merchandising cost for lump sum events.
    /// </returns>
    protected AmountCur calcLumpSumCost()
    {
        AmountCur amountCur;
        TAMMerchEventPricing  tamMerchEventPricing = TAMMerchEventPricing::findMerchEvent(merchEventID);
        amountCur = tamMerchEventPricing.LumpSumAmount;
        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcMerchEventCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the merchandising cost for merchandising events.
    /// </summary>
    /// <param name="_merchEventCategory">
    /// The merchandising event category for which to calculate the merchandising cost.
    /// </param>
    /// <param name="_updateMerchEvent">
    /// A <c>Boolean</c> value defining whether to update the event with the merchandising cost or not.
    /// </param>
    /// <returns>
    /// The merchandising cost for the event.
    /// </returns>
    public AmountCur calcMerchEventCost(MCRMerchandisingEventCategory  _merchEventCategory, boolean _updateMerchEvent = true)
    {
        AmountCur merchandisingCost;
        TAMMerchandisingEvent tamMerchandisingEvent;

        if (_merchEventCategory == MCRMerchandisingEventCategory::OffInvoice
            || _merchEventCategory == MCRMerchandisingEventCategory::BillBack)
        {
            merchandisingCost = this.calcBBAndOICost(_merchEventCategory);
        }
        else
        {
            merchandisingCost = this.calcLumpSumCost();
        }

        if (_updateMerchEvent)
        {
            ttsBegin;
            tamMerchandisingEvent = TAMMerchandisingEvent::find(merchEventID, true);
            tamMerchandisingEvent.MerchandiseCost = merchandisingCost;

            if (tamMerchandisingEvent.validateWrite())
            {
                tamMerchandisingEvent.update();
            }
            else
            {
                throw error("@SYS104318");
            }
            ttsCommit;
        }

        return merchandisingCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPromotionCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the overall promotion merchandising cost.
    /// </summary>
    /// <returns>
    /// The overall merchandising cost for the promotion.
    /// </returns>
    public AmountCur calcPromotionCost()
    {
        TAMMerchandisingEvent tamMerchandisingEvent;
        TAMTradePromotion      tamTradePromotion;
        AmountCur totalCost;

        while select MerchandisingEventID, MerchandisingEventCategory from tamMerchandisingEvent
            where tamMerchandisingEvent.PromotionID == promotionID
        {
            merchEventID = tamMerchandisingEvent.MerchandisingEventID;
            totalCost += this.calcMerchEventCost(tamMerchandisingEvent.MerchandisingEventCategory);
        }

        ttsBegin;
        tamTradePromotion = TAMTradePromotion::findByPromoID(promotionID, true);
        tamTradePromotion.MerchandiseCost = totalCost;

        if (tamTradePromotion.validateWrite())
        {
            tamTradePromotion.update();
        }
        else
        {
            throw error("@SYS104318");
        }
        ttsCommit;

        return totalCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the merchandising event cost or promotion cost.
    /// </summary>
    /// <param name="_tamPromoMerchEvent">
    /// An <c>Enumeration</c> value that will define whether to get the cost for a
    /// merchandising event or a promotion.
    /// </param>
    /// <param name="_merchandisingEventID">
    /// The <c>MCRMerchandisingEventID</c> of the event for which to calculate the merchandising event cost.
    /// </param>
    /// <param name="_promotionID">
    /// The <c>TAMPromotionID</c> of the promotion for which to calculate the promotion cost.
    /// </param>
    /// <param name="_custAccount">
    /// The customer account on the promotion.
    /// </param>
    public void new(TAMPromoMerchEvent _tamPromoMerchEvent,
             MCRMerchandisingEventID _merchandisingEventID = '',
             TAMPromotionID          _promotionID = '',
             CustAccount            _custAccount = '')
    {
        if (_tamPromoMerchEvent == TAMPromoMerchEvent::MerchEvent)
        {
            this.newMerch(_merchandisingEventID);
        }
        else
        {
            this.newPromo(_promotionID, _custAccount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMerch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes parameters to get the merchandising event cost.
    /// </summary>
    /// <param name="_merchEventID">
    /// The <c>MCRMerchandisingEventID</c> to use to initialize the parameters for
    /// calculating the merchandising event cost.
    /// </param>
    protected void newMerch(MCRMerchandisingEventID _merchEventID)
    {
        TAMMerchandisingEvent tamMerchandisingEvent = TAMMerchandisingEvent::find(_merchEventID);

        merchEventID = _merchEventID;

        promotionID = tamMerchandisingEvent.PromotionID;

        custAccount = tamMerchandisingEvent.PromotionCust;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPromo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes variables for promotion cost calculation.
    /// </summary>
    /// <param name="_promotionID">
    /// The <c>TAMPromotionID</c> to set a the parameter for promotion cost calculation.
    /// </param>
    /// <param name="_custAccount">
    /// The <c>CustAccount</c> to set a the parameter for promotion cost calculation.
    /// </param>
    protected void newPromo(TAMPromotionID _promotionID,
                             CustAccount _custAccount)
    {
        promotionID = _promotionID;
        custAccount = _custAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalPromoWeighting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total weight of a merchandising event.
    /// </summary>
    /// <param name="_merchEventID">
    /// The <c>MCRMerchandisingEventID</c> of the merchandising event for which to calculate the total weight.
    /// </param>
    /// <returns>
    /// The total weight of the merchandising event.
    /// </returns>
    public MCRWeighting totalPromoWeighting(MCRMerchandisingEventID _merchEventID)
    {
        TAMPromotionItem tamPromotionItem;
        MCRWeighting     totalWeight;

        select sum(Weighting)
            from tamPromotionItem
            where tamPromotionItem.MerchandisingEventID == _merchEventID;

        totalWeight = tamPromotionItem.Weighting;

        if (!totalWeight)
        {
            totalWeight = 1;
        }
        return totalWeight;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>