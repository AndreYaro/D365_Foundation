<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTransferOpeningCleanupService</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class LedgerTransferOpeningCleanupService extends SysOperationServiceBase
{
    protected int ledgerClosingCleanupBundleSize;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cleanUp</Name>
				<Source><![CDATA[
    protected void cleanUp(LedgerTransferOpeningCleanupDataContract _contract)
    {
        if (!_contract)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        using (SysInstrumentationActivityContext activityContext = this.getActivityContextForLedgerTransferOpening(
                    enum2Symbol(enumNum(LedgerTransferOpeningProcessState), LedgerTransferOpeningProcessState::Cleanup)))
        {
            ledgerClosingCleanupBundleSize = this.getLedgerClosingCleanupBundleSize();
            this.clearSummaryTables(_contract.parmIsPublicSectorYearEndProcessingEnabled(), _contract.parmRunReport(), _contract.parmProcessSession(), _contract.parmProcessTimeStamp());
            this.clearAccountEntryDimensionTables(_contract.parmProcessSession(), _contract.parmProcessTimeStamp());

            if (LedgerTransSettlementAdvancedParameters::isAwarenessParameterEnabled())
            {
                ttsbegin;
                LedgerTransferOpeningDetailsCleanup::cleanUpLedgerTransferOpeningDetails(_contract.parmProcessSession(), _contract.parmProcessTimeStamp());
                ttscommit;
            }

            this.addLedgerTransferOpeningCustomPropertiesToActivityContext(activityContext, _contract.parmProcessSession(), _contract.parmProcessTimeStamp());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerClosingCleanupBundleSize</Name>
				<Source><![CDATA[
    private int getLedgerClosingCleanupBundleSize()
    {
        int bundleSize = LedgerParameters::getYearEndCloseCleanupBundleSize();

        LedgerParameters ledgerParameters = LedgerParameters::find();
        if (ledgerParameters.LedgerTransferOpeningCleanupBundleSize != 0)
        {
            bundleSize = ledgerParameters.LedgerTransferOpeningCleanupBundleSize;
        }

        return bundleSize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearSummaryTables</Name>
				<Source><![CDATA[
    private void clearSummaryTables(boolean _isPublicSectorYearEndProcessingEnabled, boolean _runReport, SessionId _processSession, UTCTimestamp _processTimestamp)
    {
        if (!(_isPublicSectorYearEndProcessingEnabled && _runReport))
        {
            this.clearTableOfLedgerTransferOpeningSessionRecords(
                tableNum(LedgerTransferOpeningSumTmp),
                _processSession,
                _processTimestamp);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearAccountEntryDimensionTables</Name>
				<Source><![CDATA[
    private void clearAccountEntryDimensionTables(SessionId _processSession, UTCTimestamp _processTimestamp)
    {
        this.clearTableOfLedgerTransferOpeningSessionRecords(
            tableNum(GeneralJournalAccountEntryDimension),
            _processSession,
            _processTimestamp);
        this.clearTableOfLedgerTransferOpeningSessionRecords(
            tableNum(GeneralJournalAccountEntryHash),
            _processSession,
            _processTimestamp);
        this.clearTableOfLedgerTransferOpeningSessionRecords(
            tableNum(GeneralJournalAccountEntryHashLink),
            _processSession,
            _processTimestamp);
        this.clearTableOfLedgerTransferOpeningSessionRecords(
            tableNum(LedgerDimensionTmp),
            _processSession,
            _processTimestamp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTableOfLedgerTransferOpeningSessionRecords</Name>
				<Source><![CDATA[
    private void clearTableOfLedgerTransferOpeningSessionRecords(int _tableId, SessionId _processSession, UTCTimestamp _processTimestamp)
    {
        RecId minRecId = this.getRecId(_tableId, _processSession, _processTimestamp, true, false);
        RecId maxRecId = this.getRecId(_tableId, _processSession, _processTimestamp, false, true);
        RecId currentRecId = minRecId;

        while (currentRecId < maxRecId)
        {
            if (currentRecId != minRecId)
            {
                currentRecId++;
            }

            RecId startRecIdValue = currentRecId;
            currentRecId += (ledgerClosingCleanupBundleSize - 1);

            if (currentRecId > maxRecId)
            {
                currentRecId = maxRecId;
            }

            RecId endRecIdValue = currentRecId;
            if (startRecIdValue > endRecIdValue)
            {
                // use wrongUseOfFunction because this is most likely an error during development
                throw error(Error::wrongUseOfFunction(funcName()));
            }

            this.removeRecords(_tableId, minRecId, maxRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets either the minimum or maximum RecID from the specific table, based on the _min parameter.
    /// </summary>
    /// <param name="_tableId">
    /// The ID of the table we are trying to find the RecId values from.
    /// </param>
    /// <param name="_processSession">
    /// The process session value that the we are looking for to delete from the tables.
    /// </param>
    /// <param name="_processTimestamp">
    /// The process time stamp value that the we are looking for to delete from the tables.
    /// </param>
    /// <param name="_min">
    /// If true, return the smallest RecId value for the range specified
    /// </param>
    /// <param name="_max">
    /// If true, return the largest RecId value for the range specified
    /// </param>
    private RecId getRecId(int _tableId, SessionId _processSession, UTCTimestamp _processTimestamp, boolean _min, boolean _max)
    {
        LedgerTransferOpeningSumTmp ledgerAccountSumTmp;
        GeneralJournalAccountEntryDimension generalJournalAccountEntryDimension;
        GeneralJournalAccountEntryHash generalJournalAccountEntryHash;
        GeneralJournalAccountEntryHashLink generalJournalAccountEntryHashLink;
        LedgerDimensionTmp ledgerDimensionTmp;
        RecId recId;
        SysDaQueryObject queryObject;
        str fieldNameRecId;

        switch(_tableId)
        {
            case tableNum(LedgerTransferOpeningSumTmp):
                queryObject = new SysDaQueryObject(ledgerAccountSumTmp);
                fieldNameRecId = fieldStr(LedgerTransferOpeningSumTmp, RecId);

                queryObject.WhereClause(new SysDaEqualsExpression(new SysDaFieldExpression(ledgerAccountSumTmp, fieldStr(LedgerTransferOpeningSumTmp, SessionId)), new SysDaValueExpression(_processSession))
                    .and(new SysDaEqualsExpression(new SysDaFieldExpression(ledgerAccountSumTmp, fieldStr(LedgerTransferOpeningSumTmp, UTCTimestamp)), new SysDaValueExpression(_processTimestamp))));
                break;

            case tableNum(GeneralJournalAccountEntryDimension):
                queryObject = new SysDaQueryObject(generalJournalAccountEntryDimension);
                fieldNameRecId = fieldStr(GeneralJournalAccountEntryDimension, RecId);

                queryObject.WhereClause(new SysDaEqualsExpression(new SysDaFieldExpression(GeneralJournalAccountEntryDimension, fieldStr(GeneralJournalAccountEntryDimension, CurrentSessionId)), new SysDaValueExpression(_processSession))
                    .and(new SysDaEqualsExpression(new SysDaFieldExpression(GeneralJournalAccountEntryDimension, fieldStr(GeneralJournalAccountEntryDimension, UTCTimestamp)), new SysDaValueExpression(_processTimestamp))));
                break;

            case tableNum(GeneralJournalAccountEntryHash):
                queryObject = new SysDaQueryObject(generalJournalAccountEntryHash);
                fieldNameRecId = fieldStr(GeneralJournalAccountEntryHash, RecId);

                queryObject.WhereClause(new SysDaEqualsExpression(new SysDaFieldExpression(GeneralJournalAccountEntryHash, fieldStr(GeneralJournalAccountEntryHash, CurrentSessionId)), new SysDaValueExpression(_processSession))
                    .and(new SysDaEqualsExpression(new SysDaFieldExpression(GeneralJournalAccountEntryHash, fieldStr(GeneralJournalAccountEntryHash, CurrentTimestamp)), new SysDaValueExpression(_processTimestamp))));
                break;

            case tableNum(GeneralJournalAccountEntryHashLink):
                queryObject = new SysDaQueryObject(generalJournalAccountEntryHashLink);
                fieldNameRecId = fieldStr(GeneralJournalAccountEntryHashLink, RecId);

                queryObject.WhereClause(new SysDaEqualsExpression(new SysDaFieldExpression(GeneralJournalAccountEntryHashLink, fieldStr(GeneralJournalAccountEntryHashLink, CurrentSessionId)), new SysDaValueExpression(_processSession))
                    .and(new SysDaEqualsExpression(new SysDaFieldExpression(GeneralJournalAccountEntryHashLink, fieldStr(GeneralJournalAccountEntryHashLink, CurrentTimestamp)), new SysDaValueExpression(_processTimestamp))));
                break;

            case tableNum(LedgerDimensionTmp):
                queryObject = new SysDaQueryObject(ledgerDimensionTmp);
                fieldNameRecId = fieldStr(LedgerDimensionTmp, RecId);

                queryObject.WhereClause(new SysDaEqualsExpression(new SysDaFieldExpression(LedgerDimensionTmp, fieldStr(LedgerDimensionTmp, CurrentSessionId)), new SysDaValueExpression(_processSession))
                    .and(new SysDaEqualsExpression(new SysDaFieldExpression(LedgerDimensionTmp, fieldStr(LedgerDimensionTmp, CurrentTimestamp)), new SysDaValueExpression(_processTimestamp))));
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
                break;
        }

        if (_min)
        {
            queryObject.projection().addMin(fieldNameRecId);
        }
        else
        {
            queryObject.projection().addMax(fieldNameRecId);
        }

        SysDaFindStatement findStatement = new SysDaFindStatement();
        findStatement.find(new SysDaFindObject(queryObject));

        switch(_tableId)
        {
            case tableNum(LedgerTransferOpeningSumTmp):
                recId = ledgerAccountSumTmp.RecId;
                break;

            case tableNum(GeneralJournalAccountEntryDimension):
                recId = generalJournalAccountEntryDimension.RecId;
                break;

            case tableNum(GeneralJournalAccountEntryHash):
                recId = generalJournalAccountEntryHash.RecId;
                break;
                
            case tableNum(GeneralJournalAccountEntryHashLink):
                recId = generalJournalAccountEntryHashLink.RecId;
                break;
                
            case tableNum(LedgerDimensionTmp):
                recId = ledgerDimensionTmp.RecId;
                break;

            default:
                recId = 0;
                break;
        }
        return recId;
 
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeRecords</Name>
				<Source><![CDATA[
    private void removeRecords(int _tableId, RecId _startRecIdValue, RecId _endRecIdValue)
    {
        LedgerTransferOpeningSumTmp ledgerAccountSumTmp;
        GeneralJournalAccountEntryDimension generalJournalAccountEntryDimension;
        GeneralJournalAccountEntryHash generalJournalAccountEntryHash;
        GeneralJournalAccountEntryHashLink generalJournalAccountEntryHashLink;
        LedgerDimensionTmp ledgerDimensionTmp;

        SysDaQueryObject queryObject;
        str fieldName;

        switch(_tableId)
        {
            case tableNum(LedgerTransferOpeningSumTmp):
                queryObject = new SysDaQueryObject(ledgerAccountSumTmp);
                fieldName = fieldStr(LedgerTransferOpeningSumTmp, RecId);
                queryObject.projection().add(fieldName);
                queryObject.WhereClause(new SysDaGreaterThanOrEqualsExpression(new SysDaFieldExpression(ledgerAccountSumTmp, fieldName), new SysDaValueExpression(_startRecIdValue))
                    .and(new SysDaLessThanOrEqualsExpression(new SysDaFieldExpression(ledgerAccountSumTmp, fieldName), new SysDaValueExpression(_endRecIdValue))));
                break;

            case tableNum(GeneralJournalAccountEntryDimension):
                queryObject = new SysDaQueryObject(generalJournalAccountEntryDimension);
                fieldName = fieldStr(GeneralJournalAccountEntryDimension, RecId);
                queryObject.projection().add(fieldName);
                queryObject.WhereClause(new SysDaGreaterThanOrEqualsExpression(new SysDaFieldExpression(generalJournalAccountEntryDimension, fieldName), new SysDaValueExpression(_startRecIdValue))
                    .and(new SysDaLessThanOrEqualsExpression(new SysDaFieldExpression(generalJournalAccountEntryDimension, fieldName), new SysDaValueExpression(_endRecIdValue))));
                break;

            case tableNum(GeneralJournalAccountEntryHash):
                queryObject = new SysDaQueryObject(generalJournalAccountEntryHash);
                fieldName = fieldStr(GeneralJournalAccountEntryHash, RecId);
                queryObject.projection().add(fieldName);
                queryObject.WhereClause(new SysDaGreaterThanOrEqualsExpression(new SysDaFieldExpression(generalJournalAccountEntryHash, fieldName), new SysDaValueExpression(_startRecIdValue))
                    .and(new SysDaLessThanOrEqualsExpression(new SysDaFieldExpression(generalJournalAccountEntryHash, fieldName), new SysDaValueExpression(_endRecIdValue))));
                break;

            case tableNum(GeneralJournalAccountEntryHashLink):
                queryObject = new SysDaQueryObject(generalJournalAccountEntryHashLink);
                fieldName = fieldStr(GeneralJournalAccountEntryHashLink, RecId);
                queryObject.projection().add(fieldName);
                queryObject.WhereClause(new SysDaGreaterThanOrEqualsExpression(new SysDaFieldExpression(generalJournalAccountEntryHashLink, fieldName), new SysDaValueExpression(_startRecIdValue))
                    .and(new SysDaLessThanOrEqualsExpression(new SysDaFieldExpression(generalJournalAccountEntryHashLink, fieldName), new SysDaValueExpression(_endRecIdValue))));
                break;

            case tableNum(LedgerDimensionTmp):
                queryObject = new SysDaQueryObject(ledgerDimensionTmp);
                fieldName = fieldStr(LedgerDimensionTmp, RecId);
                queryObject.projection().add(fieldName);
                queryObject.WhereClause(new SysDaGreaterThanOrEqualsExpression(new SysDaFieldExpression(ledgerDimensionTmp, fieldName), new SysDaValueExpression(_startRecIdValue))
                    .and(new SysDaLessThanOrEqualsExpression(new SysDaFieldExpression(ledgerDimensionTmp, fieldName), new SysDaValueExpression(_endRecIdValue))));
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
                break;
                
        }

        SysDaDeleteStatement deleteStatement = new SysDaDeleteStatement();
        SysDaDeleteObject deleteObject = new SysDaDeleteObject(queryObject);
        deleteStatement.delete(deleteObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContextForLedgerTransferOpening</Name>
				<Source><![CDATA[
    private SysInstrumentationActivityContext getActivityContextForLedgerTransferOpening(str _activityName)
    {
        str instrumentationNamespace = classStr(LedgerTransferOpening);

        SysInstrumentationLogger logger = SysInstrumentationLoggerFactory::CreateLogger(instrumentationNamespace);
        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(_activityName, instrumentationNamespace);

        return logger.activityContextWithCustomProperties(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLedgerTransferOpeningCustomPropertiesToActivityContext</Name>
				<Source><![CDATA[
    private void addLedgerTransferOpeningCustomPropertiesToActivityContext(
        SysInstrumentationActivityContext _activityContext,
        SessionId _processSession, 
        UTCTimestamp _processTimestamp)
    {
        this.addBatchCustomPropertiesToActivityContext(_activityContext, _processSession, _processTimestamp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addBatchCustomPropertiesToActivityContext</Name>
				<Source><![CDATA[
    private void addBatchCustomPropertiesToActivityContext(
        SysInstrumentationActivityContext _activityContext,
        SessionId _processSession,
        UTCTimestamp _processTimestamp)
    {
        _activityContext.addCustomProperty(fieldStr(GeneralJournalAccountEntryDimension, CurrentSessionId), int2Str(_processSession));
        _activityContext.addCustomProperty(fieldStr(GeneralJournalAccountEntryDimension, UTCTimestamp), datetime2Str(_processTimestamp));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>