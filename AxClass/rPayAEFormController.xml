<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayAEFormController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The handler class for vacation, sicklist and business trip forms.
/// </summary>
class rPayAEFormController
{
    FormRealControl                controlRpayDayHourTrans,
                                   controlPayAverageTrans,
                                   controlAveragePayment,
                                   controlAverageOther;
    boolean                        viewMode,
                                   calcByPrevYears;

    FormDataSource                 rPayAverageEarnEmplPeriodTable_ds,
                                   rPayAverageEarnTrans_ds,
                                   rPayAverageEarnValue_ds;
    FormMenuButtonControl          controlReverse;
    FormMenuButtonControl          controlShowReverse;
    FormRun                        formRun;

    RPayAETimesheetUpdButton        tsUpdateButton;
    /// <summary>
    /// Gets or sets the <c>FormRun</c> object associated with the handled form.
    /// </summary>
    /// <param name="_formRun">
    /// The <c>FormRun</c> object associated with the handled form, if not default then new <c>FormRun</c> will be set.
    /// </param>
    /// <returns>
    /// <c>FormRun</c> object associated with the handled form.
    /// </returns>

    #define.controlRpayDayHourTrans("RpayAverageEarnTrans_RpayDayHour")
    #define.controlPayAverageTrans("AverageRate")
    #define.controlAveragePayment("AveragePaymentFund")
    #define.controlAverageOther("AverageOtherFund")
    #define.controlReverse("RPayReverse")
    #define.controlShowReverse("ShowReverse")
    #define.controlTSUpdateButton("TSUpdateButton")

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>formRun</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public FormRun formRun(FormRun _formRun = formRun)
    {
        formRun = _formRun;

        rPayAverageEarnEmplPeriodTable_ds = formRun.dataSource(tableStr(RPayAverageEarnEmplPeriodTable));
        rPayAverageEarnTrans_ds           = formRun.dataSource(tableStr(RPayAverageEarnTrans));
        controlRpayDayHourTrans           = formRun.design().controlName(#controlRpayDayHourTrans);
        controlPayAverageTrans            = formRun.design().controlName(#controlPayAverageTrans);
        controlAveragePayment             = formRun.design().controlName(#controlAveragePayment);
        controlAverageOther               = formRun.design().controlName(#controlAverageOther);
        controlReverse                    = formRun.design().controlName(#controlReverse);
        controlShowReverse                = formRun.design().controlName(#controlShowReverse);
        if (formRun.design().controlName(#controlTSUpdateButton) && tsUpdateButton == null)
        {
            tsUpdateButton = RPayAETimesheetUpdButton::bind(formRun.design().controlName(#controlTSUpdateButton));
        }

        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPayPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets calculation period.
    /// </summary>
    /// <returns>
    /// The calculation period.
    /// </returns>
    #define.controlPayPeriodEdit("PayPeriodEdit")
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public final ReportPeriod_RU getPayPeriod()
    {
        FormDateControl controlPayPeriodEdit;

        controlPayPeriodEdit = formRun.design().controlName(#controlPayPeriodEdit);
        return endmth(controlPayPeriodEdit.dateValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRPayAverageEarnEmplPeriodTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets employee average earnings calculation table record.
    /// </summary>
    /// <returns>
    /// The <c>RPayAverageEarnEmplPeriodTable</c> table record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayAverageEarnEmplPeriodTable getRPayAverageEarnEmplPeriodTable()
    {
        return rPayAverageEarnEmplPeriodTable_ds ? rPayAverageEarnEmplPeriodTable_ds.cursor() : null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRPayAverageEarnValueCursor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the benefit due table record.
    /// </summary>
    /// <returns>
    /// The <c>RPayAverageEarnValue</c> table record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public final RPayAverageEarnValue getRPayAverageEarnValueCursor()
    {
        return rPayAverageEarnValue_ds ? rPayAverageEarnValue_ds.cursor() : null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRPayAverageEarnValueDsExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if benefit due table datasource is initialized.
    /// </summary>
    /// <returns>
    /// True if datasource initialized.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public final boolean isRPayAverageEarnValueDsExists()
    {
        return rPayAverageEarnValue_ds ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>needTSUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if timesheets should be updated.
    /// </summary>
    /// <returns>
    /// Yes if timesheets update is needed, no - if not needed, otherwise unknown.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public UnknownNoYes needTSUpdate()
    {
        if (tsUpdateButton)
        {
            return tsUpdateButton.buttonState();
        }
        else
        {
            return UnknownNoYes::Unknown;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onClickTSUpdateButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the timesheet update button from the form.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void onClickTSUpdateButton()
    {
        if (tsUpdateButton)
        {
            tsUpdateButton.onClickTSUpdateButton();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalcByPrevYears</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmCalcByPrevYears(boolean _calcByPrevYears = calcByPrevYears)
    {
        calcByPrevYears = _calcByPrevYears;
        return calcByPrevYears;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes datasources on the form.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public final void refreshDatasources()
    {
        if ( !formRun)
        {
            return;
        }
        rPayAverageEarnEmplPeriodTable_ds.reread();
        rPayAverageEarnEmplPeriodTable_ds.refresh();

        if (rPayAverageEarnEmplPeriodTable_ds)
        {
            rPayAverageEarnEmplPeriodTable_ds.reread();
            rPayAverageEarnEmplPeriodTable_ds.refresh();
        }

        if (rPayAverageEarnTrans_ds)
        {
            rPayAverageEarnTrans_ds.research();
        }

        if (rPayAverageEarnValue_ds)
        {
            rPayAverageEarnValue_ds.research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>researchAndFindAETrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Researches the average earnings calculation lines datasource and finds the record.
    /// </summary>
    /// <param name="_rPayAverageEarnTrans">
    /// The <c>RPayAverageEarnTrans</c> table record to find.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public final void researchAndFindAETrans(RPayAverageEarnTrans _rPayAverageEarnTrans)
    {
        if ( !rPayAverageEarnTrans_ds)
        {
            return;
        }
        rPayAverageEarnTrans_ds.research();
        rPayAverageEarnTrans_ds.positionToRecord(_rPayAverageEarnTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>researchRPayAverageEarValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Researches the benefit due table datasource.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public final void researchRPayAverageEarValue()
    {
        if ( !rPayAverageEarnValue_ds)
        {
            return;
        }
        rPayAverageEarnValue_ds.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rPayAverageEarnEmplPeriodTableDS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the employee average earnings calculation table datasource.
    /// </summary>
    /// <returns>
    /// The <c>RPayAverageEarnEmplPeriodTable</c> datasource.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public FormDataSource rPayAverageEarnEmplPeriodTableDS()
    {
        return rPayAverageEarnEmplPeriodTable_ds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFormDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates form design.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateFormDesign()
    {
        FormDataObject nonAppearanceTimeGroupCode,
                       actuallyTimeGroupCode;
        RPayAverageEarnEmplPeriodTable rPayAverageEarnEmplPeriodTable = this.getRPayAverageEarnEmplPeriodTable();
        if (rPayAverageEarnEmplPeriodTable.rPayDayHourCalc == RPayDayHourCalc::Day)
        {
           controlRpayDayHourTrans.label("@RUP355");
           controlRpayDayHourTrans.helpText("@RUP473");
           controlPayAverageTrans.label("@RUP471");
           controlPayAverageTrans.helpText("@RUP474");
           controlAveragePayment.label("@RUP511");
           controlAveragePayment.helpText("@RUP511");
           controlAverageOther.label("@RUP512");
           controlAverageOther.helpText("@RUP512");
        }
        else
        {
           controlRpayDayHourTrans.label("@GLS105378");
           controlRpayDayHourTrans.helpText("@RUP475");
           controlPayAverageTrans.label("@RUP472");
           controlPayAverageTrans.helpText("@RUP476");
           controlAveragePayment.label("@RUP513");
           controlAveragePayment.helpText("@RUP513");
           controlAverageOther.label("@RUP514");
           controlAverageOther.helpText("@RUP514");
        }

        if (this.viewMode())
        {
            rPayAverageEarnEmplPeriodTable_ds.allowDelete(false);
            rPayAverageEarnEmplPeriodTable_ds.allowCreate(false);
            rPayAverageEarnEmplPeriodTable_ds.allowEdit(false);
            rPayAverageEarnTrans_ds.allowDelete(false);
            rPayAverageEarnTrans_ds.allowCreate(false);
            rPayAverageEarnTrans_ds.allowEdit(false);

            controlShowReverse.enabled(false);
            controlReverse.enabled(false);
        }
        else
        {
            nonAppearanceTimeGroupCode = rPayAverageEarnEmplPeriodTable_ds.object(fieldNum(RPayAverageEarnEmplPeriodTable,NonAppearanceTimeGroupCode));
            actuallyTimeGroupCode      = rPayAverageEarnEmplPeriodTable_ds.object(fieldNum(RPayAverageEarnEmplPeriodTable,ActuallyTimeGroupCode));

            if (rPayAverageEarnEmplPeriodTable.rPayAverageTimeCalcType == RPayAverageTimeCalcType::ByCoefficient)
            {
                rPayAverageEarnEmplPeriodTable.NonAppearanceTimeGroupCode = '';
                nonAppearanceTimeGroupCode.allowEdit(false);
                actuallyTimeGroupCode.allowEdit(true);
            }
            else
            {
                rPayAverageEarnEmplPeriodTable.ActuallyTimeGroupCode = '';
                actuallyTimeGroupCode.allowEdit(false);
                nonAppearanceTimeGroupCode.allowEdit(true);
            }

            controlShowReverse.enabled(TransLink_RU::exist(rPayAverageEarnEmplPeriodTable.TableId,rPayAverageEarnEmplPeriodTable.RecId,rPayAverageEarnEmplPeriodTable.RecId));

            controlReverse.enabled(rPayAverageEarnEmplPeriodTable.PayPeriod < RPayParameters::payPeriod(rPayAverageEarnEmplPeriodTable.EmplId) &&
                                           rPayAverageEarnEmplPeriodTable.Included &&
                                   TransLink_RU::canReverse(rPayAverageEarnEmplPeriodTable.TableId, rPayAverageEarnEmplPeriodTable.RecId));
        }

        rPayAverageEarnEmplPeriodTable_ds.allowDelete(! rPayAverageEarnEmplPeriodTable.Included);

        rPayAverageEarnEmplPeriodTable_ds.object(fieldNum(RPayAverageEarnEmplPeriodTable, PartTimeCoefficient)).visible(false);
        rPayAverageEarnEmplPeriodTable_ds.object(fieldNum(RPayAverageEarnEmplPeriodTable, LimitByMROT)).visible(false);
        rPayAverageEarnEmplPeriodTable_ds.object(fieldNum(RPayAverageEarnEmplPeriodTable, CalcByMROT)).visible(false);
        rPayAverageEarnEmplPeriodTable_ds.object(fieldNum(RPayAverageEarnEmplPeriodTable, CorrectedSickListId)).visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets view mode for the form.
    /// </summary>
    /// <param name="_viewMode">
    /// The view mode to set, if default then get.
    /// </param>
    /// <returns>
    /// True if form is in view mode.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public final boolean viewMode(boolean _viewMode = viewMode)
    {
        viewMode = _viewMode;

        return viewMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the class depending on the document type: vacation, sick list or business trip.
    /// </summary>
    /// <param name="_engine">
    /// The <c>RPayAverageEarnEngine</c> class associated with the document.
    /// </param>
    /// <returns>
    /// The instance of <c>RPayAEFormController</c>.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Unhandled document type.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayAEFormController construct(RPayAverageEarnEngine _engine)
    {
        RPayAEFormController ret;

        switch (true)
        {
            case _engine is RPayAverageEarnEngine_SickList:
                ret = new RPayAEFormController_SickList();
                break;
            case _engine is RPayAverageEarnEngine_BusinessTrip:
                ret = new RPayAEFormController_BusinessTrip();
                break;
            case _engine is RPayAverageEarnEngine_Vacation:
                ret = new RPayAEFormController_Vacation();
                break;
            case _engine is RPayAverageEarnEngine :
                ret = new RPayAEFormController();
                break;
            default:
                throw Exception::Error;
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>