<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalDocParmDataCreatorFDoc_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class builds a <c>FiscalDocumentParmData_BR</c> set of object models from
/// a <c>FiscalDocument_BR</c> buffer.
/// </summary>
public class FiscalDocParmDataCreatorFDoc_BR
{
    FiscalDocument_BR               fiscalDocument;
    SalesCarrier                    salesCarrier;

    LogisticsPostalAddress          deliveryPostalAddress,
                                    fiscalEstabPostalAddress,
                                    thirdPartyPostalAddress,
                                    salesCarrierPostalAddress;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createParmData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>FiscalDocumentParmData_BR</c> object.
    /// </summary>
    /// <returns>
    /// A <c>FiscalDocumentParmData_BR</c> object.
    /// </returns>
    public FiscalDocumentParmData_BR createParmData()
    {
        FiscalDocumentParmData_BR                   fiscalDocumentParmData;
        List                                        listOfFiscalDocumentLineParmData;
        FiscalDocumentCustVendTransParmData_BR      fiscalDocumentCustVendTransParmData;
        ListEnumerator                              listOfLinesEnumerator;
        FiscalDocumentLineParmData_BR               fiscalDocumentLineParmData;
        List                                        listOfTaxParmData;

        List                                        listOfFMiscChargesParmData;
        ListEnumerator                              listOfMiscChargesEnumerator;
        FiscalDocumentMiscChargeParmData_BR         fiscalDocumentMiscChargeParmData;

        fiscalDocumentParmData = this.initHeaderParmData();

        listOfFiscalDocumentLineParmData = this.initLinesParmData();

        if (this.hasCustVendTrans())
        {
            fiscalDocumentCustVendTransParmData = this.initCustVendTransParmData();
            fiscalDocumentCustVendTransParmData.parmListOfInstallments(this.initListOfInstallments());
            fiscalDocumentParmData.parmCustVendTrans(fiscalDocumentCustVendTransParmData);
        }

        fiscalDocumentParmData.parmLines(listOfFiscalDocumentLineParmData);

        listOfLinesEnumerator = fiscalDocumentParmData.parmLines().getEnumerator();

        while (listOfLinesEnumerator.moveNext())
        {
            fiscalDocumentLineParmData = listOfLinesEnumerator.current();
            listOfTaxParmData = this.initListOfTaxTransParmDataForLine(fiscalDocumentParmData, fiscalDocumentLineParmData);

            listOfFMiscChargesParmData = this.initMiscChargesParmData(fiscalDocumentLineParmData);
            fiscalDocumentLineParmData.parmListOfMiscCharges(listOfFMiscChargesParmData);

            listOfMiscChargesEnumerator = listOfFMiscChargesParmData.getEnumerator();
            while (listOfMiscChargesEnumerator.moveNext())
            {
                fiscalDocumentMiscChargeParmData = listOfMiscChargesEnumerator.current();
                listOfTaxParmData.appendList(this.initListOfTaxTransParmDataForMarkup(fiscalDocumentParmData, fiscalDocumentMiscChargeParmData));
            }

            fiscalDocumentLineParmData.parmListOfTaxes(listOfTaxParmData);
        }

        fiscalDocumentParmData.parmListOfShipmentStat(this.initListOfShipmentStatParmData(fiscalDocumentParmData));

        return fiscalDocumentParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalReferenceSourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID that the fiscal reference table points to.
    /// </summary>
    /// <returns>
    /// The record ID that the fiscal reference table points to.
    /// </returns>
    protected RecId fiscalReferenceSourceRecId()
    {
        return fiscalDocument.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalReferenceSourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID that the fiscal reference table points to.
    /// </summary>
    /// <returns>
    /// The table ID that the fiscal reference table points to.
    /// </returns>
    protected TableId fiscalReferenceSourceTableId()
    {
        return fiscalDocument.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCustVendTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates whether the Fiscal Document in context has customer/vendor transactions or not.
    /// </summary>
    /// <returns>
    ///     True if the Fiscal Document has customer/vendor transactions. False otherwise.
    /// </returns>
    protected boolean hasCustVendTrans()
    {
        return (select FiscalDocumentCustVendTrans_BR
                    where FiscalDocumentCustVendTrans_BR.FiscalDocument == fiscalDocument.RecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendTransParmData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Provides an instance of the object representing the Customer/Vendor Transaction associated with the Fiscal Document.
    /// </summary>
    /// <returns>
    ///     An instance of <c>FiscalDocumentCustVendTransParmData_BR</c> representing the Customer/Vendor Transaction assiciated with the Fiscal Document.
    /// </returns>
    protected FiscalDocumentCustVendTransParmData_BR initCustVendTransParmData()
    {
        FiscalDocumentCustVendTransParmData_BR custVendTransParmData = new FiscalDocumentCustVendTransParmData_BR();
        return custVendTransParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeaderParmData</Name>
				<Source><![CDATA[
/// <summary>
    ///    Provides an instance of the object representing the Fiscal Document header information.
    /// </summary>
    /// <returns>
    ///     An instance of <c>FiscalDocumentParmData_BR</c> representing the header of the Fiscal Document.
    /// </returns>
    protected FiscalDocumentParmData_BR initHeaderParmData()
    {
        FiscalDocumentParmData_BR fiscalDocumentParmData = new FiscalDocumentParmData_BR();

        fiscalDocumentParmData.parmThirdPartyCCMNum                         (fiscalDocument.ThirdPartyCCMNum);
        fiscalDocumentParmData.parmThirdPartyCNPJCPF                        (fiscalDocument.ThirdPartyCNPJCPF);
        fiscalDocumentParmData.parmThirdPartyIE                             (fiscalDocument.ThirdPartyIE);
        fiscalDocumentParmData.parmThirdPartyName                           (fiscalDocument.ThirdPartyName);
        fiscalDocumentParmData.parmThirdPartyPhone                          (fiscalDocument.ThirdPartyPhone);
        fiscalDocumentParmData.parmThirdPartyFax                            (fiscalDocument.ThirdPartyFax);
        fiscalDocumentParmData.parmThirdPartyEmail                          (fiscalDocument.ThirdPartyEmail);
        fiscalDocumentParmData.parmFiscalEstablishmentID                    (fiscalDocument.FiscalEstablishment);
        fiscalDocumentParmData.parmFiscalEstablishmentCCMNum                (fiscalDocument.FiscalEstablishmentCCMNum);
        fiscalDocumentParmData.parmFiscalEstablishmentCNPJCPF               (fiscalDocument.FiscalEstablishmentCNPJCPF);
        fiscalDocumentParmData.parmFiscalEstablishmentIE                    (fiscalDocument.FiscalEstablishmentIE);
        fiscalDocumentParmData.parmFiscalEstablishmentName                  (fiscalDocument.FiscalEstablishmentName);
        fiscalDocumentParmData.parmFiscalEstablishmentTribSubstReg          (fiscalDocument.FiscalEstablishmentTribSubstitutionReg);
        fiscalDocumentParmData.parmFiscalEstablishmentPhone                 (fiscalDocument.FiscalEstablishmentPhone);
        fiscalDocumentParmData.parmFiscalDocumentOperationDescription       (fiscalDocument.OperationDescription);
        fiscalDocumentParmData.parmFiscalDocumentNumber                     (fiscalDocument.FiscalDocumentNumber);
        fiscalDocumentParmData.parmFiscalDocumentDate                       (fiscalDocument.FiscalDocumentDate);
        fiscalDocumentParmData.parmFiscalDocumentAccountNum                 (fiscalDocument.FiscalDocumentAccountNum);
        fiscalDocumentParmData.parmFiscalDocumentAccountType                (fiscalDocument.FiscalDocumentAccountType);
        fiscalDocumentParmData.parmFiscalDocumentIssuer                     (fiscalDocument.FiscalDocumentIssuer);
        fiscalDocumentParmData.parmFiscalDocumentSeries                     (fiscalDocument.FiscalDocumentSeries);
        fiscalDocumentParmData.parmAccountingDate                           (fiscalDocument.AccountingDate);
        fiscalDocumentParmData.parmCFPSId                                   (fiscalDocument.cfpsId);
        fiscalDocumentParmData.parmComplementaryType                        (fiscalDocument.ComplementaryType);
        fiscalDocumentParmData.parmComplementedFiscalDocument               (fiscalDocument.ComplementedFiscalDocument);
        fiscalDocumentParmData.parmDeliveryCNPJCPF                          (fiscalDocument.DeliveryCNPJCPF);
        fiscalDocumentParmData.parmDeliveryIE                               (fiscalDocument.DeliveryIE);
        fiscalDocumentParmData.parmDeliveryMode                             (fiscalDocument.DeliveryMode);
        fiscalDocumentParmData.parmDeliveryTerm                             (fiscalDocument.DeliveryTerm);
        fiscalDocumentParmData.parmDirection                                (fiscalDocument.Direction);
        fiscalDocumentParmData.parmFreightChargeTerms                       (fiscalDocument.FreightChargeTerms);
        fiscalDocumentParmData.parmVehicleLicensePlateNumber                (fiscalDocument.VehicleLicensePlateNumber);
        fiscalDocumentParmData.parmVehicleLicensePlateState                 (fiscalDocument.VehicleLicensePlateState);
        fiscalDocumentParmData.parmTotalAmount                              (fiscalDocument.TotalAmount);
        fiscalDocumentParmData.parmTotalDiscountAmount                      (fiscalDocument.TotalDiscountAmount);
        fiscalDocumentParmData.parmTotalGoodsAmount                         (fiscalDocument.TotalGoodsAmount);
        fiscalDocumentParmData.parmTotalMarkupFreightAmount                 (fiscalDocument.TotalMarkupFreightAmount);
        fiscalDocumentParmData.parmTotalMarkupInsuranceAmount               (fiscalDocument.TotalMarkupInsuranceAmount);
        fiscalDocumentParmData.parmTotalMarkupOtherAmount                   (fiscalDocument.TotalMarkupOtherAmount);
        fiscalDocumentParmData.parmTotalServicesAmount                      (fiscalDocument.TotalServicesAmount);
        fiscalDocumentParmData.parmSalesCarrier                             (fiscalDocument.SalesCarrier);
        fiscalDocumentParmData.parmSalesCarrierPostalAddress                (fiscalDocument.SalesCarrierLogisticsPostalAddress);
        fiscalDocumentParmData.parmPaymentMethod                            (fiscalDocument.PaymentMethod);
        fiscalDocumentParmData.parmPaymentAmount                            (fiscalDocument.PaymentAmount);
    
        // Delivery Postal Address
        deliveryPostalAddress = LogisticsPostalAddress::findRecId(fiscalDocument.DeliveryLogisticsPostalAddress);
        fiscalDocumentParmData.parmDeliveryLogisticsPostalAddress(deliveryPostalAddress.RecId);

        // Recipient Postal Address
        thirdPartyPostalAddress = LogisticsPostalAddress::findRecId(fiscalDocument.ThirdPartyPostalAddress);
        fiscalDocumentParmData.parmThirdPartyPostalAddress(thirdPartyPostalAddress.RecId);

        // Issuer Postal Address
        fiscalEstabPostalAddress = LogisticsPostalAddress::findRecId(fiscalDocument.FiscalEstablishmentPostalAddress);
        fiscalDocumentParmData.parmFiscalEstablishmentPostalAddress(fiscalEstabPostalAddress.RecId);

        return fiscalDocumentParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLinesParmData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Provides a list of objects representing the Fiscal Document lines.
    /// </summary>
    /// <returns>
    ///     A List of classes with instances of <c>FiscalDocumentLineParmData_BR</c> representing the lines of the Fiscal Document.
    /// </returns>
    protected List initLinesParmData()
    {
        FiscalDocumentLine_BR                   fiscalDocumentLine;
        FiscalDocumentLineParmData_BR           fiscalDocumentLineParmData;
        List                                    lines = new List(Types::Class);

        while select fiscalDocumentLine
            where fiscalDocumentLine.FiscalDocument == fiscalDocument.RecId
        {
            fiscalDocumentLineParmData = new FiscalDocumentLineParmData_BR();

            fiscalDocumentLineParmData.parmLineNum                  (fiscalDocumentLine.LineNum);
            fiscalDocumentLineParmData.parmCFOP                     (fiscalDocumentLine.cfop);
            fiscalDocumentLineParmData.parmDescription              (fiscalDocumentLine.Description);
            fiscalDocumentLineParmData.parmExceptionCode            (fiscalDocumentLine.ExceptionCode);
            fiscalDocumentLineParmData.parmScaleIndicator           (fiscalDocumentLine.ScaleIndicator);
            fiscalDocumentLineParmData.parmCNPJ                     (fiscalDocumentLine.CNPJ);
            fiscalDocumentLineParmData.parmFinancialLedgerDimension (fiscalDocumentLine.FinancialLedgerDimension);
            fiscalDocumentLineParmData.parmFiscalClassification     (fiscalDocumentLine.FiscalClassification);
            fiscalDocumentLineParmData.parmGrossWeight              (fiscalDocumentLine.GrossWeight);
            fiscalDocumentLineParmData.parmInventTransId            (fiscalDocumentLine.InventTransId);
            fiscalDocumentLineParmData.parmItemId                   (fiscalDocumentLine.ItemId);
            fiscalDocumentLineParmData.parmItemType                 (fiscalDocumentLine.ItemType);
            fiscalDocumentLineParmData.parmLineAmount               (fiscalDocumentLine.LineAmount);
            fiscalDocumentLineParmData.parmLineDiscount             (fiscalDocumentLine.LineDiscount);
            fiscalDocumentLineParmData.parmNetWeight                (fiscalDocumentLine.NetWeight);
            fiscalDocumentLineParmData.parmOrigin                   (fiscalDocumentLine.Origin);
            fiscalDocumentLineParmData.parmQuantity                 (fiscalDocumentLine.Quantity);
            fiscalDocumentLineParmData.parmRefRecId                 (fiscalDocumentLine.RefRecId);
            fiscalDocumentLineParmData.parmRefTableId               (fiscalDocumentLine.RefTableId);
            fiscalDocumentLineParmData.parmServiceCode              (fiscalDocumentLine.ServiceCode);
            fiscalDocumentLineParmData.parmUnit                     (fiscalDocumentLine.Unit);
            fiscalDocumentLineParmData.parmUnitPrice                (fiscalDocumentLine.UnitPrice);
            fiscalDocumentLineParmData.parmRecId                    (fiscalDocumentLine.RecId);
            fiscalDocumentLineParmData.parmBenefitCode              (fiscalDocumentLine.BenefitCode);
            fiscalDocumentLineParmData.parmAdjustmentCode53         (fiscalDocumentLine.AdjustmentCode53);
            fiscalDocumentLineParmData.parmObservationCode          (fiscalDocumentLine.ObservationCode);
            fiscalDocumentLineParmData.parmRespWithholdingICMSST    (fiscalDocumentLine.RespWithholdingICMSST);
            fiscalDocumentLineParmData.parmICMSSTCollectionPaymentMode(fiscalDocumentLine.ICMSSTCollectionPaymentMode);
            fiscalDocumentLineParmData.parmICMSSTCollectionPaymentNumber(fiscalDocumentLine.ICMSSTCollectionPaymentNumber);
            fiscalDocumentLineParmData.parmNfeVbcstretVicmsstretTagsReported(fiscalDocumentLine.NfeVbcstretVicmsstretTagsReported);

            lines.addEnd(fiscalDocumentLineParmData);
        }

        return lines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfInstallments</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Provides a list of objects representing the Fiscal Document installments.
    /// </summary>
    /// <returns>
    ///     A List of classes with instances of <c>FiscalDocumentInstallmentParmData_BR</c> representing the installments generated for the Fiscal Document.
    /// </returns>
    protected List initListOfInstallments()
    {
        FiscalDocumentCustVendTrans_BR              fiscalDocumentCustVendTrans;
        FiscalDocumentInstallment_BR                fiscalDocumentInstallment;
        FiscalDocumentInstallmentParmData_BR        installmentParmData;
        List                                        installments = new List(Types::Class);

        while select fiscalDocumentInstallment
            exists join fiscalDocumentCustVendTrans
            where fiscalDocumentCustVendTrans.FiscalDocument == fiscalDocument.RecId
                && fiscalDocumentInstallment.FiscalDocumentCustVendTrans == fiscalDocumentCustVendTrans.RecId
        {
            installmentParmData = new FiscalDocumentInstallmentParmData_BR();
            installmentParmData.parmAmount              (fiscalDocumentInstallment.Amount);
            installmentParmData.parmDueDate             (fiscalDocumentInstallment.DueDate);
            installmentParmData.parmInstallmentNumber   (fiscalDocumentInstallment.InstallmentNumber);
            installments.addEnd(installmentParmData);
        }

        return installments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfShipmentStatParmData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Provides a list of objects representing the shipment specifications for a given Fiscal Document line.
    /// </summary>
    /// <param name="_fiscalDocumentParmData">
    ///     An instance of <c>FiscalDocumentParmData_BR</c> representing a specific Fiscal Document line.
    /// </param>
    /// <returns>
    ///     A List of classes with instances of <c>FiscalDocumentParmData_BR</c> representing the
    ///     shipment specifications incurred for the Fiscal Document line passed in as parameter.
    /// </returns>
    protected List initListOfShipmentStatParmData(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        FiscalDocumentShipmentStat_BR           fiscalDocumentShipmentStat;
        FiscalDocumentShipmentStatParmData_BR   shipmentStatParmData;
        List                                    shipmentStat = new List(Types::Class);

        while select fiscalDocumentShipmentStat
            where fiscalDocumentShipmentStat.FiscalDocument == fiscalDocument.RecId
        {
            shipmentStatParmData = new FiscalDocumentShipmentStatParmData_BR();

            shipmentStatParmData.parmGrossWeight        (fiscalDocumentShipmentStat.GrossWeight);
            shipmentStatParmData.parmNetWeight          (fiscalDocumentShipmentStat.NetWeight);
            shipmentStatParmData.parmVolumeQuantity     (fiscalDocumentShipmentStat.VolumeQuantity);
            shipmentStatParmData.parmVolumeType         (fiscalDocumentShipmentStat.VolumeType);

            shipmentStat.addEnd(shipmentStatParmData);
        }

        return shipmentStat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfTaxTransParmDataForLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Provides a list of objects representing the taxes incurred for a given Fiscal Document line.
    /// </summary>
    /// <param name="_fiscalDocumentParmData">
    ///     An instance of <c>FiscalDocumentParmData_BR</c> representing the header for the given Fiscal Document line.
    /// </param>
    /// <param name="_fiscalDocumentLineParmData">
    ///     An instance of <c>FiscalDocumentLineParmData_BR</c> representing a specific Fiscal Document line.
    /// </param>
    /// <returns>
    ///     A List of classes with instances of <c>FiscalDocumentTaxTransParmData_BR</c> representing the taxes incurred for
    ///     the Fiscal Document line passed in as parameter.
    /// </returns>
    protected List initListOfTaxTransParmDataForLine(FiscalDocumentParmData_BR _fiscalDocumentParmData, FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData)
    {
        List                                    listOfTaxParmData = new List(Types::Class);
        FiscalDocumentTaxTrans_BR               fiscalDocumentTaxTrans;
        FiscalDocumentTaxTransParmData_BR       fiscalDocumentTaxTransParmData;

        while select fiscalDocumentTaxTrans
            where fiscalDocumentTaxTrans.FiscalDocumentLine == _fiscalDocumentLineParmData.parmRecId()
        {
            fiscalDocumentTaxTransParmData = new FiscalDocumentTaxTransParmData_BR();

            this.initTaxTransParmDataFromTraxTrans(_fiscalDocumentParmData, fiscalDocumentTaxTransParmData, fiscalDocumentTaxTrans);

            listOfTaxParmData.addEnd(fiscalDocumentTaxTransParmData);
        }

        return listOfTaxParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfTaxTransParmDataForMarkup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Provides a list of objects representing the taxes incurred for a given Fiscal Document markup trasaction.
    /// </summary>
    /// <param name="_fiscalDocumentParmData">
    ///     An instance of <c>FiscalDocumentParmData_BR</c> representing the header of current fiscal document.
    /// </param>
    /// <param name="_fiscalDocumentMiscChargeParmData">
    ///     An instance of <c>FiscalDocumentMiscChargeParmData_BR</c> representing a specific Fiscal Document markup transaction.
    /// </param>
    /// <returns>
    ///     A List of classes with instances of <c>FiscalDocumentTaxTransParmData_BR</c> representing the taxes incurred for
    ///     the markup transaction passed in as parameter.
    /// </returns>
    protected List initListOfTaxTransParmDataForMarkup(FiscalDocumentParmData_BR            _fiscalDocumentParmData,
                                                       FiscalDocumentMiscChargeParmData_BR  _fiscalDocumentMiscChargeParmData)
    {
        List                                listOfTaxParmData = new List(Types::Class);
        FiscalDocumentTaxTrans_BR           fiscalDocumentTaxTrans;
        FiscalDocumentTaxTransParmData_BR   fiscalDocumentTaxTransParmData;

        if (_fiscalDocumentMiscChargeParmData.parmMarkupTrans())
        {
            while select fiscalDocumentTaxTrans
                where fiscalDocumentTaxTrans.FiscalDocumentMiscCharge == _fiscalDocumentMiscChargeParmData.parmMarkupTrans()
            {
                fiscalDocumentTaxTransParmData = new FiscalDocumentTaxTransParmData_BR();

                this.initTaxTransParmDataFromTraxTrans(_fiscalDocumentParmData, fiscalDocumentTaxTransParmData, fiscalDocumentTaxTrans);

                listOfTaxParmData.addEnd(fiscalDocumentTaxTransParmData);
            }
        }

        return listOfTaxParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMiscChargesParmData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the list of <c>FiscalDocumentMiscChargeParmData_BR</c> for a given <c>FiscalDocumentLineParmData_BR</c>.
    /// </summary>
    /// <param name="_fiscalDocumentLineParmData">
    /// <c>FiscalDocumentLineParmData_BR</c> to create the charges list from.
    /// </param>
    /// <returns>
    /// A <c>List</c> object with <c>FiscalDocumentMiscChargeParmData_BR</c> related to the given <c>FiscalDocumentLineParmData_BR</c>.
    /// </returns>
    protected List initMiscChargesParmData(FiscalDocumentLineParmData_BR    _fiscalDocumentLineParmData)
    {
        List listOfMiscCharges = new List(Types::Class);
        FiscalDocumentMiscCharge_BR markupTrans;
        FiscalDocumentMiscChargeParmData_BR miscChargeParmData;

        while select markupTrans
            where markupTrans.FiscalDocumentLine == _fiscalDocumentLineParmData.parmRecId()
        {
            miscChargeParmData = new FiscalDocumentMiscChargeParmData_BR();

            miscChargeParmData.parmAmount(markupTrans.Amount);
            miscChargeParmData.parmType(markupTrans.Type);
            miscChargeParmData.parmMarkupTrans(markupTrans.MarkupTrans);

            listOfMiscCharges.addEnd(miscChargeParmData);
        }

        return listOfMiscCharges;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxTransParmDataFromTraxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>FiscalDocumentTaxTransParmData_BR</c> from a set of <c>TmpTaxWorkTrans</c> buffers.
    /// </summary>
    /// <param name="_fiscalDocumentParmData">
    /// <c>FiscalDocumentParmData_BR</c> that is the header of the document being initialized.
    /// </param>
    /// <param name="_fiscalDocumentTaxTransParmData">
    /// <c>FiscalDocumentTaxTransParmData_BR</c> to be initialized.
    /// </param>
    /// <param name="_fiscalDocumentTaxTrans">
    /// <c>FiscalDocumentTaxTrans_BR</c> with basic tax information.
    /// </param>
    protected void initTaxTransParmDataFromTraxTrans(FiscalDocumentParmData_BR          _fiscalDocumentParmData,
                                                     FiscalDocumentTaxTransParmData_BR  _fiscalDocumentTaxTransParmData,
                                                     FiscalDocumentTaxTrans_BR          _fiscalDocumentTaxTrans)
    {
        _fiscalDocumentTaxTransParmData.parmTaxTrans                (_fiscalDocumentTaxTrans.TaxTrans);
        _fiscalDocumentTaxTransParmData.parmType                    (_fiscalDocumentTaxTrans.Type);

        _fiscalDocumentTaxTransParmData.parmTaxationCode            (_fiscalDocumentTaxTrans.TaxationCode);

        _fiscalDocumentTaxTransParmData.parmTaxValue                (_fiscalDocumentTaxTrans.TaxValue);
        _fiscalDocumentTaxTransParmData.parmFiscalValue             (_fiscalDocumentTaxTrans.FiscalValue);
        _fiscalDocumentTaxTransParmData.parmTaxationOrigin          (_fiscalDocumentTaxTrans.TaxationOrigin);
        _fiscalDocumentTaxTransParmData.parmRetainedTax             (_fiscalDocumentTaxTrans.RetainedTax);
        _fiscalDocumentTaxTransParmData.parmIncludedTax             (_fiscalDocumentTaxTrans.IncludedTax);

        _fiscalDocumentTaxTransParmData.parmTaxAmount               (_fiscalDocumentTaxTrans.TaxAmount);

        _fiscalDocumentTaxTransParmData.parmTaxBaseAmount           (_fiscalDocumentTaxTrans.TaxBaseAmount);

        _fiscalDocumentTaxTransParmData.parmTaxBaseAmountExempt     (_fiscalDocumentTaxTrans.TaxBaseAmountExempt);
        _fiscalDocumentTaxTransParmData.parmTaxBaseAmountOther      (_fiscalDocumentTaxTrans.TaxBaseAmountOther);
        _fiscalDocumentTaxTransParmData.parmTaxAmountOther          (_fiscalDocumentTaxTrans.TaxAmountOther);
        _fiscalDocumentTaxTransParmData.parmTaxReductionPct         (_fiscalDocumentTaxTrans.TaxReductionPct);

        _fiscalDocumentTaxTransParmData.parmTaxSubstitutionMarkupPct    (_fiscalDocumentTaxTrans.TaxSubstitutionMarkupPct);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance for a given fiscal document record ID.
    /// </summary>
    /// <param name="_fiscalDocumentRecId">
    /// Record ID of the <c>FiscalDocument_BR</c> that will originate the object model.
    /// </param>
    void new(RecId _fiscalDocumentRecId)
    {
        fiscalDocument = FiscalDocument_BR::find(_fiscalDocumentRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>FiscalDocumentParmData_BR</c> object representation for a given fiscal document
    /// record ID.
    /// </summary>
    /// <param name="_fiscalDocumentRecId">
    /// Record ID of the <c>FiscalDocument_BR</c> that will originate the object model.
    /// </param>
    /// <returns>
    /// <c>FiscalDocumentParmData_BR</c> object representation for the given fiscal document
    /// </returns>
    public static FiscalDocumentParmData_BR construct(RecId _fiscalDocumentRecId)
    {
        FiscalDocParmDataCreatorFDoc_BR creator = new FiscalDocParmDataCreatorFDoc_BR(_fiscalDocumentRecId);

        return creator.createParmData();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>