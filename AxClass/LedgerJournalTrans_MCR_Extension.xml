<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTrans_MCR_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Extension methods for the <c>LedgerJournalTrans</c> class.
/// </summary>
public static class LedgerJournalTrans_MCR_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mcrFindByInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>LedgerJournalTrans</c> table.
    /// </summary>
    /// <param name="_invoiceId">
    /// The InvoiceID ID of the <c>LedgerJournalTrans</c> table record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in <c>LedgerJournalTrans</c>; otherwise, an empty record.
    /// </returns>
    public static LedgerJournalTrans mcrFindByInvoice(
        InvoiceId   _invoiceId,
        boolean     _forUpdate = false)

    {
        LedgerJournalTrans ledgerJournalTrans;

        if (_invoiceId)
        {
            ledgerJournalTrans.selectForUpdate(_forUpdate);

            select firstonly ledgerJournalTrans
                where ledgerJournalTrans.MarkedInvoice == _invoiceId;
        }
        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrFindByPaymIdPaymModePaymRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Given the payment id,payment mode and paym reference return a record in the <c>LedgerJournalTrans</c> table.
    /// </summary>
    /// <param name="_paymId">
    /// The record ID of the <c>LedgerJournalTrans</c> record to find.
    /// </param>
    /// <param name="_paymMode">
    /// The record ID of the <c>LedgerJournalTrans</c> record to find.
    /// </param>
    /// <param name="_paymReference">
    /// The record ID of the <c>LedgerJournalTrans</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>LedgerJournalTrans</c> table; otherwise, an empty record.
    /// </returns>
    public static LedgerJournalTrans mcrFindByPaymIdPaymModePaymRef(
        MCRPaymOrderId  _paymId,
        PaymMode        _paymMode,
        PaymReference   _paymReference,
        boolean         _forUpdate)
    {
        LedgerJournalTrans ledgerJournalTrans;

        if (_paymId && _paymMode && _paymReference)
        {
            ledgerJournalTrans.selectForUpdate(_forUpdate);

            select firstonly ledgerJournalTrans
                where ledgerJournalTrans.mcrPaymOrderID == _paymId
                && ledgerJournalTrans.PaymMode == _paymMode
                && ledgerJournalTrans.PaymReference == _paymReference;
        }
        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrFindRefPaymId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the reference payment ID pertaining to the passed payment record ID.
    /// </summary>
    /// <param name="_mcrRefPaymId">
    /// The record id of the referenced payment record.
    /// </param>
    /// <param name="_forUpdate">
    /// A boolean that determines whether to select the record for update.
    /// </param>
    /// <returns>
    /// The <c>LedgerJournalTrans</c> record contianing the passed payment record ID.
    /// </returns>
    public static LedgerJournalTrans mcrFindRefPaymId(
        RecId   _mcrRefPaymId,
        boolean _forUpdate = false)

    {
        LedgerJournalTrans ledgerJournalTrans;

        if (_mcrRefPaymId)
        {
            ledgerJournalTrans.selectForUpdate(_forUpdate);

            select firstonly ledgerJournalTrans
                where ledgerJournalTrans.mcrRefPaymID == _mcrRefPaymId;
        }
        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>