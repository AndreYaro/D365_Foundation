<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostControlPostingItemPurchOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CostControlPostingItemPurchOrder extends CostControlPostingItem
{
    PurchLine   purchOrderLine;
    InventMov_Virtuel   movementVirtuel;
    InventMov_Virtuel   movementVirtuel_Orig;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createCommittedCost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a committed cost for the purchase order line and reduces the project budget.
    /// </summary>
    /// <param name="_qty">
    ///    The total quantity of the purchase order line; optional.
    /// </param>
    /// <param name="_transDate">
    ///    The transaction date of the purchase order line; optional.
    /// </param>
    /// <returns>
    ///    true if the committed cost and budget reduction is performed successfully; otherwise, false.
    /// </returns>
    public boolean createCommittedCost(InventQty _qty = this.openInTotal(purchOrderLine), TransDate _transDate=DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        if (!super(_qty))
            return false;

        if (_qty==0)
            return true;
        
        CostControlTransCommittedCost costControlTransCommittedCost = this.initializeCostControlTransCommittedCost(_qty, _transDate);
        this.insertCostControlTransCommittedCost(costControlTransCommittedCost);

        AmountCur amountCur = costControlTransCommittedCost.Amount;
        AmountCur amountCurRevenue = CurrencyExchangeHelper::amount(purchOrderLine.ProjSalesPrice * _qty, purchOrderLine.ProjSalesCurrencyId);

        if (ProjTable::find(costControlTransCommittedCost.ProjId).UseBudgeting)
        {
            if (this.mustUpdateBudget(amountCur,amountCurRevenue))
            {
                this.budgetUpdate(costControlTransCommittedCost.ProjId,ProjBudgetTransaction::construct(this.parmPurchOrderLine()),ProjBudgetAdjustmentType::Decrement);
            }
        }
        else
        {
            if (this.mustUpdateForecast(costControlTransCommittedCost.Qty))
                this.forecastUpdate(costControlTransCommittedCost, costControlTransCommittedCost.Qty, costControlTransCommittedCost.AmountMst);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCostControlTransCommittedCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>CostControlTransCommittedCost</c> record.
    /// </summary>
    /// <param name = "_qty">The quantity to be set on the <c>CostControlTransCommittedCost</c> record.</param>
    /// <param name = "_transDate">The committed date to be set on <c>CostControlTransCommittedCost</c> record.</param>
    /// <returns>A <c>CostControlTransCommittedCost</c> record.</returns>
    protected CostControlTransCommittedCost initializeCostControlTransCommittedCost(InventQty _qty, TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        CostControlTransCommittedCost costControlTransCommittedCost = super(_qty, _transDate);

        costControlTransCommittedCost.initFromPurchLine(purchOrderLine);
        AmountCur amountCur = purchOrderLine.calcLineAmountExclTax(_qty);
        costControlTransCommittedCost.Amount = amountCur;
        costControlTransCommittedCost.AmountMst = CurrencyExchangeHelper::mstAmount(amountCur, purchOrderLine.CurrencyCode, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

        return costControlTransCommittedCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActionType</Name>
				<Source><![CDATA[
    public ProjCommittedCostUpdateAction getActionType()
    {
        ProjCommittedCostUpdateAction   retActionType;
        PurchLine                       purchOrderLine_Orig;

        // No original means create a brand new salesLine
        if (! movementVirtuel_Orig || !CostControlTransCommittedCost::findOpenedByProjTransID(purchOrderLine.ProjTransId))
            retActionType = ProjCommittedCostUpdateAction::Create;

        else
        {
            if (!movementVirtuel_Orig.parmInventMovReference()
            || movementVirtuel_Orig.parmInventMovReference().transType()!=InventTransType::Purch
            || movementVirtuel_Orig.parmInventMovReference().buffer().TableId!=tablenum(PurchLine))
                throw error ("@SYS22828",funcname());
            else
                purchOrderLine_Orig=movementVirtuel_Orig.parmInventMovReference().buffer();

            // Don't change the order of the three
            // dimension changes, update committed cost without reverse
            if (!DimensionDefaultFacade::areEqual(purchOrderLine_Orig.DefaultDimension, purchOrderLine.DefaultDimension)
              ||purchOrderLine_Orig.ProjCategoryId!=purchOrderLine.ProjCategoryId
              ||purchOrderLine_Orig.ActivityNumber!=purchOrderLine.ActivityNumber)
                    retActionType = ProjCommittedCostUpdateAction::UpdateOnly;

            // qty,currency got change, should reverse the old one and recreate committed cost
            if ( this.openInTotal(purchOrderLine_Orig)  != this.openInTotal(purchOrderLine)
               ||(purchOrderLine_Orig.ItemId            != purchOrderLine.ItemId)
               ||(purchOrderLine_Orig.purchTable().CurrencyCode!=purchOrderLine.purchTable().CurrencyCode)
               ||(purchOrderLine_Orig.PurchPrice        != purchOrderLine.PurchPrice)
               ||(purchOrderLine_Orig.discAmount()      != purchOrderLine.discAmount())
               ||(purchOrderLine_Orig.discPercent()     != purchOrderLine.discPercent())
               ||(purchOrderLine_Orig.PurchMarkup       != purchOrderLine.PurchMarkup)
               ||(purchOrderLine_Orig.ProjId            != purchOrderLine.ProjId)
               ||(ProjTable::find(purchOrderLine.ProjId).UseBudgeting
                    && purchOrderLine_Orig.ProjSalesPrice != purchOrderLine.ProjSalesPrice)
                )

                    retActionType = ProjCommittedCostUpdateAction::UpdateReverse;

            if (purchOrderLine_Orig.PurchaseType != PurchaseType::ReturnItem && purchOrderLine.PurchaseType == PurchaseType::ReturnItem && ProjTable::find(purchOrderLine.ProjId).UseBudgeting)
            {
                retActionType = ProjCommittedCostUpdateAction::Delete;
            }
        }
        //no match, return updateOnly
        return retActionType==ProjCommittedCostUpdateAction::Unknown? ProjCommittedCostUpdateAction::UpdateOnly:retActionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        purchOrderLine=buffer;
        movementVirtuel_Orig=movement_Orig;
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateBudget</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the cost and sales amount of a transaction.
    /// </summary>
    /// <param name="_costAmount">
    ///    The cost amount currency of the transaction.
    /// </param>
    /// <param name="_salesAmount">
    ///    The sales amount currency of the transaction.
    /// </param>
    /// <returns>
    ///    true if the amounts are valid to be reduced from the budget; otherwise, false.
    /// </returns>
    public boolean mustUpdateBudget(AmountCur _costAmount, AmountCur _salesAmount)
    {
        boolean ret = true;

        if ((actionType == ProjCommittedCostUpdateAction::Create && _costAmount == 0 && _salesAmount == 0) ||
            (actionType == ProjCommittedCostUpdateAction::Post))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateForecast</Name>
				<Source><![CDATA[
    public boolean mustUpdateForecast(Qty _qty)
    {
        if (actionType== ProjCommittedCostUpdateAction::Create
        && _qty<0)
            return false;
        if ((actionType== ProjCommittedCostUpdateAction::UpdateReverse || actionType== ProjCommittedCostUpdateAction::Delete)
        && _qty<0)
            return false;
        if (actionType== ProjCommittedCostUpdateAction::Post)
            return false;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(InventMovement _movement)
    {
        super(_movement);

        movementVirtuel = movement;
        movementVirtuel_Orig = movement_Orig;

        if (movementVirtuel.parmInventMovReference()
         && movementVirtuel.parmInventMovReference().transType()==InventTransType::Purch
         && movementVirtuel.parmInventMovReference().buffer().TableId == tablenum(PurchLine))
            buffer = movementVirtuel.parmInventMovReference().buffer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>openInTotal</Name>
				<Source><![CDATA[
    public InventQty openInTotal(PurchLine _purchLine)
    {
        return _purchLine.RemainPurchFinancial+_purchLine.RemainPurchPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchOrderLine</Name>
				<Source><![CDATA[
    public PurchLine parmPurchOrderLine(PurchLine _purchOrderLine=purchOrderLine)
    {
        purchOrderLine=_purchOrderLine;
        return purchOrderLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransId</Name>
				<Source><![CDATA[
    public TransactionID projTransId()
    {
        return purchOrderLine.ProjTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainQty</Name>
				<Source><![CDATA[
    public InventQty remainQty()
    {
        return this.openInTotal(purchOrderLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseCommittedCost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reverses the committed cost that is associated with the purchase order line.
    /// </summary>
    /// <param name="isInvoiced">
    ///    A Boolean value that specifies whether the purchase order line is invoiced.
    /// </param>
    /// <returns>
    ///    true if the committed cost of the purchase order line is reversed; otherwise, false.
    /// </returns>
    public boolean reverseCommittedCost(NoYes isInvoiced)
    {
        CostControlTransCommittedCost   costControlTransCommittedCost;
        Voucher                         voucher;
        TransDate                       ledgerTransDate;

        if (!super(isInvoiced))
            return false;

        if (isInvoiced)
        {
            voucher = this.parmLedgerVoucher().lastVoucher();
            ledgerDimensionDefaultAccount = this.parmMovement().accountOperations();
            ledgerTransDate=this.parmLedgerVoucher().lastTransDate();
        }

        while select forupdate costControlTransCommittedCost
            where costControlTransCommittedCost.ProjTransId == purchOrderLine.ProjTransId
        {
            // Clear the open; if invoiced, set reverse =true
            if (isInvoiced)
            {
                if (!costControlTransCommittedCost.Voucher)
                {
                    costControlTransCommittedCost.Voucher = voucher;
                    costControlTransCommittedCost.LedgerDimension=ledgerDimensionDefaultAccount;
                }
            }

            if (costControlTransCommittedCost.Open ==NoYes::Yes)
            {
                costControlTransCommittedCost.Open = NoYes::No;
                costControlTransCommittedCost.Reverse = NoYes::No;
                costControlTransCommittedCost.update();

                CostControlTransCommittedCost::addNegativeRecord(costControlTransCommittedCost, isInvoiced, voucher, ledgerDimensionDefaultAccount,ledgerTransDate);

                if (ProjBudgetReductionHistory::findForecastByProjAndCatId(costControlTransCommittedCost.ProjId, costControlTransCommittedCost.CategoryId, costControlTransCommittedCost.ActivityNumber) &&
                    this.mustUpdateBudget(0,0))
                {
                    this.budgetUpdate(costControlTransCommittedCost.ProjId, ProjBudgetTransaction::construct(this.parmPurchOrderLine()), ProjBudgetAdjustmentType::Increment);
                }

                if (this.mustUpdateForecast(costControlTransCommittedCost.Qty))
                    this.forecastUpdate(costControlTransCommittedCost,
                                            -costControlTransCommittedCost.Qty,
                                            -costControlTransCommittedCost.AmountMst);
            }
            else
                costControlTransCommittedCost.update();
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCommittedCost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the committed cost for a purchase order line
    /// </summary>
    public void updateCommittedCost()
    {
        CostControlTransCommittedCost  updateCCTCC;
        CostControlTransCommittedCost  newOpenCCTCC;

        CostControlTransCommittedCost oldOpenCCTCC = CostControlTransCommittedCost::findOpenedByProjTransID(this.projTransId());

        ProjCategoryId oldCategoryId = oldOpenCCTCC.CategoryId;
        smmActivityNumber oldActivityNum = oldOpenCCTCC.ActivityNumber;

        ProjCategoryId newCategoryId = purchOrderLine.ProjCategoryId;
        smmActivityNumber newActivityNum = purchOrderLine.ActivityNumber;

        while select forupdate updateCCTCC
            where updateCCTCC.ProjTransId == purchOrderLine.ProjTransId
        {
            updateCCTCC.DefaultDimension = purchOrderLine.DefaultDimension;
            updateCCTCC.CategoryId = purchOrderLine.ProjCategoryId;
            updateCCTCC.ActivityNumber = purchOrderLine.ActivityNumber;
            updateCCTCC.update();
        }
        if (oldCategoryId != newCategoryId || oldActivityNum != newActivityNum)
        {
            if (ProjTable::find(oldOpenCCTCC.ProjId).UseBudgeting)
            {
                this.budgetUpdate(oldOpenCCTCC.ProjId,ProjBudgetTransaction::construct(this.parmPurchOrderLine()),ProjBudgetAdjustmentType::Increment);
                newOpenCCTCC = CostControlTransCommittedCost::findOpenedByProjTransID(this.projTransId());
                this.budgetUpdate(newOpenCCTCC.ProjId, ProjBudgetTransaction::construct(this.parmPurchOrderLine()), ProjBudgetAdjustmentType::Decrement);
            }
            else
            {
                this.forecastUpdate(oldOpenCCTCC, -oldOpenCCTCC.Qty, -oldOpenCCTCC.AmountMst);
                newOpenCCTCC = CostControlTransCommittedCost::findOpenedByProjTransID(this.projTransId());
                this.forecastUpdate(newOpenCCTCC,
                                newOpenCCTCC.Qty,
                                newOpenCCTCC.AmountMst);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCreate</Name>
				<Source><![CDATA[
    public boolean validateCreate()
    {
        boolean ret = super();
        if (ret)
        {
            if (!ProjParameters::find().TrackCommittedCostPurchaseOrder)
                ret=false;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>