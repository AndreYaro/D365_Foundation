<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqEventProcessKanbanSalesTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    Processes manual event kanbans for all lines of a given sales order.
/// </summary>
public class ReqEventProcessKanbanSalesTable extends RunBase
{
    SalesTable  salesTable;
    boolean     interactive;
    boolean     hasResults;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>hasResults</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if run the kanban event process created new kanbans.
    /// </summary>
    /// <returns>
    ///    true if new kanbans were created; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean hasResults()
    {
        return hasResults;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInteractive</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmInteractive(boolean _interactive = interactive)
    {
        interactive = _interactive;
        return interactive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public SalesTable parmSalesTable(SalesTable _salesTable)
    {
        salesTable = _salesTable;
        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initiates the kanban event processing for all sales lines of a given sales order.
    /// </summary>
    public void run()
    {
        ReqEventProcessKanban   reqEventProcessKanban;
        SalesLine               salesLine;

        if (salesTable)
        {
            while select salesLine
                order by LineNum
                where salesLine.SalesId == salesTable.SalesId
            {
                reqEventProcessKanban = ReqEventProcessKanban::newStandard(salesLine,interactive);
                reqEventProcessKanban.runOperation();

                // check if any kanbans were created
                if (interactive)
                {
                    this.setHasResults(reqEventProcessKanban.mapInsertedKanban());
                }
            }
        }

        if (   interactive
            && !hasResults)
        {
            info("@SYS321497");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHasResults</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the result value.
    /// </summary>
    /// <param name="_map">
    ///    A map of inserted kanbans.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void setHasResults(Map _map)
    {
        MapEnumerator   me;
        Set             set;

        if (!hasResults)
        {
            if (   _map
                && _map.elements())
            {
                me = _map.getEnumerator();
                while (   !hasResults
                       && me.moveNext())
                {
                    set = me.currentValue();
                    hasResults =    set
                                 && set.elements();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static ReqEventProcessKanbanSalesTable construct()
    {
        return new ReqEventProcessKanbanSalesTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        ReqEventProcessKanbanSalesTable     reqEventProcessKanbanSalesTable;
        SalesTable                          salesTable;

        if (   _args
            && _args.record()
            && _args.record() is SalesTable)
        {
            salesTable = _args.record() as SalesTable;

            reqEventProcessKanbanSalesTable = ReqEventProcessKanbanSalesTable::newStandard(salesTable,true);
            reqEventProcessKanbanSalesTable.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>ReqEventProcessKanbanSalesTable</c> class.
    /// </summary>
    /// <param name="_salesTable">
    ///    A <c>SalesTable</c> table buffer to use to instantiate the class.
    /// </param>
    /// <param name="_interactive">
    ///    A Boolean value that specifies whether the class was called from a form.
    /// </param>
    /// <returns>
    ///    A <c>ReqEventProcessKanbanSalesLine</c> object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ReqEventProcessKanbanSalesTable newStandard(
        SalesTable _salesTable,
        boolean    _interactive = false)
    {
        ReqEventProcessKanbanSalesTable reqEventProcessKanbanSalesTable = ReqEventProcessKanbanSalesTable::construct();

        reqEventProcessKanbanSalesTable.parmSalesTable(_salesTable);
        reqEventProcessKanbanSalesTable.parmInteractive(_interactive);

        return reqEventProcessKanbanSalesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>