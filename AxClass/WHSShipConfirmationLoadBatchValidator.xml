<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSShipConfirmationLoadBatchValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSShipConfirmationLoadBatchValidator</c> class is used to check that a load does not contain any batches with disposition codes set to block shipping.
/// </summary>
[SysTableNameFactory(tableStr(WHSLoadTable))]
public class WHSShipConfirmationLoadBatchValidator extends WHSShipConfirmationBatchValidator
{
    protected WHSLoadTable loadTable;

    private boolean splitQueries = WHSShipConfirmationLoadBatchValidatorSplitQueriesFlight::instance().isEnabled();
    private Set inventTransTypes;
    private InventTransType singleTransType;
    private Counter transTypeCount;
    private WHSInstrumentationLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of <c>WHSLoadTable</c> table.
    /// </summary>
    /// <param name = "_common">
    /// <c>Common</c> buffer used for this instance of the <c>WHSLoadTable</c> table.
    /// </param>
    public void initFromBuffer(Common _common)
    {
        loadTable = _common as WHSLoadTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAnyBatchDispositionCodeBlockingShipping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that the load does not contain any batches with disposition codes set to block shipping.
    /// </summary>
    /// <returns>
    /// true if no batch exists that should block shipping; otherwise, false
    /// </returns>
    public boolean isAnyBatchDispositionCodeBlockingShipping()
    {
        using (var activityContext = this.activities().shipConfirmationLoadBatchValidation(loadTable.RecId))
        {
            if (!this.loadLineWithBatchExist())
            {
                return true;
            }
     
            // Batch above location items will have batch specified on the work line.
            boolean ret = this.isAnyBatchDispositionCodeBlockingShippingForBatchAboveLocationItems();

            if (ret)
            {
                // Batch below location items will have batch on the dim tracking records.
                ret = this.isAnyBatchDispositionCodeBlockingShippingForBatchBelowLocationItems();
            }

            return ret;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSingleTransType</Name>
				<Source><![CDATA[
    private InventTransType getSingleTransType()
    {
        SetEnumerator se = inventTransTypes.getEnumerator();
        se.moveNext();
        return se.current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadLineWithBatchExist</Name>
				<Source><![CDATA[
    private boolean loadLineWithBatchExist()
    {
        WHSLoadLine loadLine;
        InventBatch inventBatch;

        if (!splitQueries)
        {
            select firstonly RecId from loadLine
                where loadLine.LoadId == loadTable.LoadId
            exists join inventBatch
                where inventBatch.itemId == loadLine.ItemId;

            return (loadLine.RecId != 0);
        }

        inventTransTypes = new Set(Types::Enum);

        while select InventTransType from loadLine
            group by InventTransType
                where loadLine.LoadId == loadTable.LoadId
        exists join inventBatch
            where inventBatch.itemId == loadLine.ItemId
        {
            inventTransTypes.add(loadLine.InventTransType);
        }
        transTypeCount = inventTransTypes.elements();
        return transTypeCount > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAnyBatchDispositionCodeBlockingShippingForBatchAboveLocationItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that the load does not contain any batches above location items with disposition codes set to block shipping.
    /// </summary>
    /// <returns>
    /// true if no batch exists that should block shipping; otherwise, false
    /// </returns>
    private boolean isAnyBatchDispositionCodeBlockingShippingForBatchAboveLocationItems()
    {
        WHSLoadLine             loadLine;
        WHSWorkLine             workLine;
        InventDim               inventDim;
        InventBatch             inventBatch;
        PdsDispositionMaster    dispoMaster;

        if (!splitQueries || transTypeCount > 1)
        {
            this.activities().logOldQueryBatchAboveUsed();

            select firstonly RecId from loadLine
                where loadLine.LoadId == loadTable.LoadId
                exists join workLine
                    where workLine.LoadLineRefRecId == loadLine.RecId
                        && workLine.WorkStatus      != WHSWorkStatus::Cancelled
                    exists join inventDim
                        where inventDim.InventDimId == workLine.InventDimId
                        exists join inventBatch
                            where inventBatch.InventBatchId == inventDim.InventBatchId
                                && inventBatch.ItemId       == workLine.ItemId
                            exists join dispoMaster
                                where dispoMaster.DispositionCode       == inventBatch.PdsDispositionCode
                                    && dispoMaster.Status               == PdsStatus::Unavailable
                                    && ((dispoMaster.PdsSalesBlockShip  == NoYes::Yes
                                    &&   loadLine.InventTransType       == InventTransType::Sales)
                                    || (dispoMaster.PdsTransBlockShip   == NoYes::Yes
                                    &&  loadLine.InventTransType        == InventTransType::TransferOrderShip));
        }
        else
        {
            singleTransType = this.getSingleTransType();
            this.activities().logNewQueryBatchAboveUsed(singleTransType);

            if (singleTransType == InventTransType::Sales)
            {
                select firstonly RecId from loadLine
                    where loadLine.LoadId == loadTable.LoadId
                       && loadLine.InventTransType == InventTransType::Sales
                    exists join workLine
                        where workLine.LoadLineRefRecId == loadLine.RecId
                            && workLine.WorkStatus      != WHSWorkStatus::Cancelled
                        exists join inventDim
                            where inventDim.InventDimId == workLine.InventDimId
                            exists join inventBatch
                                where inventBatch.InventBatchId == inventDim.InventBatchId
                                    && inventBatch.ItemId       == loadLine.ItemId
                                exists join dispoMaster
                                    where dispoMaster.DispositionCode       == inventBatch.PdsDispositionCode
                                        && dispoMaster.Status               == PdsStatus::Unavailable
                                        && dispoMaster.PdsSalesBlockShip    == NoYes::Yes;
            }
            else if (singleTransType == InventTransType::TransferOrderShip)
            {
                select firstonly RecId from loadLine
                    where loadLine.LoadId == loadTable.LoadId
                       && loadLine.InventTransType == InventTransType::TransferOrderShip
                    exists join workLine
                        where workLine.LoadLineRefRecId == loadLine.RecId
                            && workLine.WorkStatus      != WHSWorkStatus::Cancelled
                        exists join inventDim
                            where inventDim.InventDimId == workLine.InventDimId
                            exists join inventBatch
                                where inventBatch.InventBatchId == inventDim.InventBatchId
                                    && inventBatch.ItemId       == loadLine.ItemId
                                exists join dispoMaster
                                    where dispoMaster.DispositionCode       == inventBatch.PdsDispositionCode
                                        && dispoMaster.Status               == PdsStatus::Unavailable
                                        && dispoMaster.PdsTransBlockShip    == NoYes::Yes;
            }
        }

        return loadLine.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAnyBatchDispositionCodeBlockingShippingForBatchBelowLocationItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that the load does not contain any batches below location items with disposition codes set to block shipping.
    /// </summary>
    /// <returns>
    /// true if no batch exists that should block shipping; otherwise, false
    /// </returns>
    private boolean isAnyBatchDispositionCodeBlockingShippingForBatchBelowLocationItems()
    {
        WHSLoadLine             loadLine;
        WHSWorkLine             workLine;
        InventDim               inventDim;
        InventBatch             inventBatch;
        PdsDispositionMaster    dispoMaster;
        WHSDimTracking          dimTracking;

        if (!splitQueries || transTypeCount > 1)
        {
            this.activities().logOldQueryBatchBelowUsed();

            select firstonly RecId from loadLine
                where loadLine.LoadId == loadTable.LoadId
                exists join workLine
                    where workLine.LoadLineRefRecId == loadLine.RecId
                        && workLine.WorkStatus      != WHSWorkStatus::Cancelled
                    exists join dimTracking
                        where dimTracking.WorkId    == workLine.WorkId
                            && dimTracking.LineNum  == workLine.LineNum
                        exists join inventDim
                            where inventDim.InventDimId == dimTracking.InventDimId
                            exists join inventBatch
                                where inventBatch.InventBatchId == inventDim.InventBatchId
                                && inventBatch.ItemId       == workLine.ItemId
                                exists join dispoMaster
                                    where dispoMaster.DispositionCode       == inventBatch.PdsDispositionCode
                                        && dispoMaster.Status               == PdsStatus::Unavailable
                                        && ((dispoMaster.PdsSalesBlockShip  == NoYes::Yes
                                        &&   loadLine.InventTransType       == InventTransType::Sales)
                                        || (dispoMaster.PdsTransBlockShip   == NoYes::Yes
                                        &&  loadLine.InventTransType        == InventTransType::TransferOrderShip));
        }
        else 
        {
            this.activities().logNewQueryBatchBelowUsed(singleTransType);

            if (singleTransType == InventTransType::Sales)
            {
                select firstonly RecId from loadLine
                    where loadLine.LoadId == loadTable.LoadId
                       && loadLine.InventTransType == InventTransType::Sales
                    exists join workLine
                        where workLine.LoadLineRefRecId == loadLine.RecId
                            && workLine.WorkStatus      != WHSWorkStatus::Cancelled
                        exists join dimTracking
                            where dimTracking.WorkId    == workLine.WorkId
                                && dimTracking.LineNum  == workLine.LineNum
                            exists join inventDim
                                where inventDim.InventDimId == dimTracking.InventDimId
                                exists join inventBatch
                                    where inventBatch.InventBatchId == inventDim.InventBatchId
                                        && inventBatch.ItemId       == loadLine.ItemId
                                    exists join dispoMaster
                                        where dispoMaster.DispositionCode       == inventBatch.PdsDispositionCode
                                            && dispoMaster.Status               == PdsStatus::Unavailable
                                            && dispoMaster.PdsSalesBlockShip    == NoYes::Yes;
            }
            else if (singleTransType == InventTransType::TransferOrderShip)
            {
                select firstonly RecId from loadLine
                    where loadLine.LoadId == loadTable.LoadId
                       && loadLine.InventTransType == InventTransType::TransferOrderShip
                    exists join workLine
                        where workLine.LoadLineRefRecId == loadLine.RecId
                            && workLine.WorkStatus      != WHSWorkStatus::Cancelled
                        exists join dimTracking
                            where dimTracking.WorkId    == workLine.WorkId
                                && dimTracking.LineNum  == workLine.LineNum
                            exists join inventDim
                                where inventDim.InventDimId == dimTracking.InventDimId
                                exists join inventBatch
                                    where inventBatch.InventBatchId == inventDim.InventBatchId
                                        && inventBatch.ItemId       == workLine.ItemId
                                    exists join dispoMaster
                                        where dispoMaster.DispositionCode       == inventBatch.PdsDispositionCode
                                            && dispoMaster.Status               == PdsStatus::Unavailable
                                            && dispoMaster.PdsTransBlockShip    == NoYes::Yes;
            }
        }

        return loadLine.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activities</Name>
				<Source><![CDATA[
    private WHSShipConfirmationLoadBatchValidatorActivities activities()
    {
        if (!logger)
        {
            logger = WHSInstrumentationLogger::createLogger(classStr(WHSShipConfirmationLoadBatchValidator));
        }

        return logger.shipConfirmationLoadBatchValidation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>