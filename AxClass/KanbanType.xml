<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>KanbanType</c> class is the base class that controls the types of kanbans.
/// </summary>
/// <remarks>
///  The types of the kanbans are as follows:
///  <list type="bullet">
///   <item>
///   <description>Withdrawal.</description>
///   </item>
///   <item>
///   <description>Manufacturing.</description>
///   </item>
///  </list>
///
///  This class extends the
///  <c>
///  InventType
///  </c>
///   class because emptying a kanban can cause inventory transactions to be created.
/// </remarks>
public abstract class KanbanType extends InventType
{
    Kanban          kanban;

    InventMovement  wmsGroupingSourceRequirementMovement;
    boolean         cachedGroupingSourceRequirementMovement;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmKanban</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the Kanban record used to instantiate the class instance.
    /// </summary>
    /// <returns><c>Kanban</c> record.</returns>
    public Kanban parmKanban()
    {
        return Kanban;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHaveBOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a kanban can have a BOM.
    /// </summary>
    /// <returns>
    /// true if the kanban can have a BOM; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The base class always returns false.
    /// </remarks>
    public boolean canHaveBOM()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHaveNonDefaultReceivedQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a kanban can have a non-default received quantity.
    /// </summary>
    /// <returns>
    ///    true if the kanban can have non default received quantity; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The base class always returns false.
    /// </remarks>
    public boolean canHaveNonDefaultReceivedQty()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHaveScrapQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a kanban job can have a scrap quantity.
    /// </summary>
    /// <returns>
    ///    true if the job can have a scrap quantity; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The base class always returns false.
    /// </remarks>
    public boolean canHaveScrapQty()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInventBeReserved</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether an inventory transaction of the <c>KanbanType</c> type can be reserved.
    /// </summary>
    /// <returns>
    ///    true if the inventory transaction can be reserved; otherwise, false.
    /// </returns>
    public boolean canInventBeReserved()
    {
        return this.mustBeInventoryControlled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInventUpdExpected</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether an expected inventory transaction of the <c>KanbanType</c> type can be updated.
    /// </summary>
    /// <returns>
    ///    true if the transaction can be updated; otherwise, false.
    /// </returns>
    public boolean canInventUpdExpected()
    {
        return    kanban.Status == LeanKanbanStatus::Emptied
               && this.mustBeInventoryControlled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInventUpdFinancial</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a financial inventory transaction of the <c>KanbanType</c> type can be updated.
    /// </summary>
    /// <returns>
    ///    true if the transaction can be updated; otherwise, false.
    /// </returns>
    public boolean canInventUpdFinancial()
    {
        return this.mustBeInventoryControlled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInventUpdPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a physical inventory transaction of the <c>KanbanType</c> type can be updated.
    /// </summary>
    /// <returns>
    ///    true if the transaction can be updated; otherwise, false.
    /// </returns>
    public boolean canInventUpdPhysical()
    {
        return this.mustBeInventoryControlled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canReplaceBom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a kanban can change the assigned BOM version.
    /// </summary>
    /// <returns>
    /// true if the kanban can change the bom version; otherwise, false.
    /// </returns>
    public boolean canReplaceBom()
    {
        return    kanban.Status == LeanKanbanStatus::NotAssigned
               && this.canHaveBOM();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a kanban record is deleted.
    /// </summary>
    public void deleting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a kanban record has been deleted.
    /// </summary>
    public void deleted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a kanban record is inserted.
    /// </summary>
    public void inserting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a kanban record has been inserted.
    /// </summary>
    public void inserted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTransType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the <c>LedgerTransType</c> enumeration value to use with ledger postings.
    /// </summary>
    /// <returns>
    ///    A <c>LedgerTransType</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    The base class method is abstract.
    /// </remarks>
    public abstract LedgerTransType ledgerTransType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeInventoryControlled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the kanban must be inventory controlled.
    /// </summary>
    /// <returns>
    ///    true if the kanban must be inventory controlled; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Inventory controlled means that emptying the kanban creates an inventory transaction.This is true
    ///    only if the kanban is received at a supermarket location and the handling unit empty policy is not
    ///    set to handling unit.
    /// </remarks>
    public boolean mustBeInventoryControlled()
    {
        InventDimParm           inventDimParm;
        boolean                 result;

        if (!kanban.RecId)
        {
            result = false;
            if (kanban.KanbanRule)
            {
                LeanRuleData leanRuleData = kanban.kanbanRule().ruleData();
                KanbanFlow   kanbanFlow   = leanRuleData.kanbanFlow();
                PlanActivity planActivity = kanbanFlow.lastPlanActivity();
                if (   planActivity.receiptLocation().inventoryControl() == LeanInventoryControl::Restricted
                    && planActivity.onHandUpdate(PlanActivityType::Receive))
                {
                    InventDimGroupSetup::newInventTable(kanban.inventTable()).inventDimParmActivePhysicalInventory(inventDimParm);
                    result = inventDimParm.wmsLocationIdFlag == NoYes::Yes;
                }
            }
        }
        else
        {
            result = kanban.InventTransId != '';
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustHaveProcessJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the kanban must have a process job.
    /// </summary>
    /// <returns>
    /// true if the kanban must have a process job; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The base class implementation always returns true.
    /// </remarks>
    public boolean mustHaveProcessJob()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustHaveTransferJob</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the kanban must have a transfer job.
    /// </summary>
    /// <returns>
    ///    true if the kanban must have a transfer job; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The base class implementation always returns true.
    /// </remarks>
    public boolean mustHaveTransferJob()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustInventUpdEstimated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an estimated inventory transaction of type <c>KanbanType</c> must be updated.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// This method is called from the <c>mustBeUpdatedExpected</c> method on the inventory movement
    /// together with a call to the <c>canBeUpdatedEstimated</c> method, which calls the
    /// <c>canInventUpdExpected</c> method on this class. This makes sure that only inventory-controlled
    /// kanbans will return true from the <c>mustBeUpdatedExpected</c> method.
    /// </remarks>
    public boolean mustInventUpdEstimated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateKanbanJobPickingList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the kanban job picking list is recreated.
    /// </summary>
    /// <returns>
    ///    true if the BOM has changed and the picking list is recreated; otherwise, false.
    /// </returns>
    public boolean mustUpdateKanbanJobPickingList()
    {
        return     kanban.bomId         != kanban.orig().bomId
                || kanban.bomDataAreaId != kanban.orig().bomDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>KanbanType</c> class.
    /// </summary>
    /// <param name="_kanban">
    ///    The <c>Kanban</c> object that is used to initialize the new instance of the class.
    /// </param>
    protected void new(Kanban _kanban)
    {
        kanban = _kanban;
        super(kanban);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runStatusReset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>KanbanUpdReset</c> object and calls its run method.
    /// </summary>
    /// <param name="_kanbanStatusUpdate">
    /// A <c>KanbanStatus</c> table buffer used in the status update.
    /// </param>
    /// <param name="_updateJobs">
    /// A Boolean value that specifies if the kanban jobs must be updated.
    /// </param>
    /// <param name="_kanbanStatus">
    /// The caller <c>KanbanStatus</c> record.
    /// </param>
    /// <param name="_multi">
    /// A <c>RunbaseRecsMapable</c> object; optional.
    /// </param>
    /// <remarks>
    /// This method is called from a <c>KanbanStatus</c> object.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// The target status is not allowed for the current kanban .
    /// </exception>
    public void runStatusReset(
        KanbanStatusUpdate _kanbanStatusUpdate,
        boolean            _updateJobs,KanbanStatus _kanbanStatus,
        RunbaseRecsMapable _multi = null)
    {
        KanbanUpdReset kanbanUpdReset = KanbanUpdReset::newParmBuffer(_kanbanStatusUpdate,_updateJobs,_kanbanStatus);
        kanbanUpdReset.run();

        if (_multi)
        {
            _multi.mergeRecs(kanbanUpdReset);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runStatusUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>KanbanUpd</c> object and calls its run method.
    /// </summary>
    /// <param name="_kanbanStatusUpdate">
    /// A <c>KanbanStatus</c> table buffer used in the status update.
    /// </param>
    /// <param name="_updateJobs">
    /// A Boolean value that specifies if the kanban jobs must be updated.
    /// </param>
    /// <param name="_kanbanStatus">
    /// The caller <c>KanbanStatus</c> record.
    /// </param>
    /// <param name="_multi">
    /// A <c>RunbaseRecsMapable</c> object; optional.
    /// </param>
    /// <param name="_notifyChangeStatus">
    /// A Boolean value that specifies if messages should be printed for a change of status.
    /// </param>
    /// <remarks>
    /// This method is called from a <c>KanbanStatus</c> object.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// The target status is not allowed for the current kanban .
    /// </exception>
    public void runStatusUpdate(
        KanbanStatusUpdate  _kanbanStatusUpdate,
        boolean             _updateJobs,
        KanbanStatus        _kanbanStatus,
        RunbaseRecsMapable  _multi = null,
        boolean             _notifyChangeStatus = false)
    {
        KanbanUpd kanbanUpd = KanbanUpd::newParmBuffer(_kanbanStatusUpdate,_updateJobs,_kanbanStatus, _notifyChangeStatus);
        kanbanUpd.run();

        if (_multi)
        {
            _multi.mergeRecs(kanbanUpd);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sysModule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the <c>SysModule</c> enumeration value to use with ledger postings.
    /// </summary>
    /// <returns>
    ///    A <c>SysModule</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    The base class method is abstract.
    /// </remarks>
    public abstract SysModule sysModule()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a kanban is updated.
    /// </summary>
    public void updating()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a kanban record has been updated.
    /// </summary>
    /// <param name="_kanbanOrig">
    /// The original kanban which is updated.
    /// </param>
    public void updated(Kanban _kanbanOrig)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateKanbanJobPickingList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Recreates the kanban job picking list because of changes in the kanban.
    /// </summary>
    public void updateKanbanJobPickingList()
    {
        KanbanJob   kanbanJob = kanban.firstKanbanJob();

        if (kanbanJob)
        {
            kanbanJob.type().updateKanbanJobPickingList(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsGroupingSourceRequirementMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Instantiates an inventory movement for the grouping source requirement.
    /// </summary>
    /// <returns>
    ///    A <c>InventoryMovement</c> class instance; otherwise, null.
    /// </returns>
    public InventMovement wmsGroupingSourceRequirementMovement()
    {
        if (   !wmsGroupingSourceRequirementMovement
            || !cachedGroupingSourceRequirementMovement)
        {
            cachedGroupingSourceRequirementMovement         = true;
            KanbanSourceRequirement kanbanSourceRequirement = KanbanSourceRequirement::findKanban(kanban.RecId);
            wmsGroupingSourceRequirementMovement            = kanbanSourceRequirement.parentSourceRequirementMovement();
        }

        return wmsGroupingSourceRequirementMovement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>KanbanType</c> class.
    /// </summary>
    /// <param name="_kanban">
    ///    The <c>Kanban</c> object that is used to initialize the class.
    /// </param>
    /// <returns>
    ///    An instance of the <c>KanbanType</c> class.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The specified value is not a <c>LeanKanbanType</c> enumeration value.
    /// </exception>
    public static KanbanType construct(Kanban _kanban)
    {
        KanbanType  kanbanType;

        switch (_kanban.Type)
        {
            case LeanKanbanType::Withdrawal:
                kanbanType = KanbanType_Withdrawal::construct(_kanban);
                break;
            case LeanKanbanType::Manufacturing:
                kanbanType = KanbanType_Manufacturing::construct(_kanban);
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return kanbanType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>