<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjectCommitment</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// Provides access to project commitment methods.
/// </summary>
[ExportMetadataAttribute("SourceDocumentIProjectCommitment", "DefaultProjectCommitment"),ExportAttribute("Dynamics.AX.Application.SourceDocumentIProjectCommitment")]
public class ProjectCommitment implements SourceDocumentIProjectCommitment
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>alwaysUpdateProjectCommitments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to project commitments will always be updated for the source document line item.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// The source document line item.
    /// </param>
    /// <returns>
    /// true if project commitments will always be updated for the source document line item; otherwise,
    /// false.
    /// </returns>
    public boolean alwaysUpdateProjectCommitments(SourceDocumentLineItem _sourceDocumentLineItem)
    {
        return ProjectCommitmentFacade::alwaysUpdateProjectCommitments(_sourceDocumentLineItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjectCommitments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Brings up to date the project commitments, depending on information from accounting distributions
    /// for the given source document line.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// A <c>SourceDocumentLineItem</c> object.
    /// </param>
    /// <param name="_skipCommittedCostParameter">
    /// A Boolean value that indicates whether to skip the committed cost parameter set in the
    /// <c>ProjParameters</c> table.
    /// </param>
    /// <param name="_suppressMessages">
    /// A Boolean value that indicates whether to suppress the over budget messages; optional.
    /// </param>
    /// <param name="_trackBudgetStatus">
    /// A Boolean value that indicates whether to track the budget status of the transactions; optional.
    /// </param>
    /// <remarks>
    /// If a project commitment does not exist, a new project commitment will be created based on
    /// information from the accounting distributions.If a project commitment already exists, a reversing
    /// project commitment entry will be created based on the existing project commitment. A new project
    /// commitment will then be created based on the new information from the accounting distributions.If
    /// project budgeting is enabled, creating a reversing project commitment will also liquidate project
    /// budgets and creating a new project commitment will also reserve project budgets.This method will
    /// also handle reservation and liquidation of project budgets for the project commitments if project
    /// budgeting is enabled.
    /// </remarks>
    public void updateProjectCommitments(SourceDocumentLineItem _sourceDocumentLineItem, boolean _skipCommittedCostParameter = false, boolean _trackBudgetStatus = false)
    {
        ProjectCommitmentFacade::updateProjectCommitments(_sourceDocumentLineItem, _skipCommittedCostParameter, ProjectCommitmentFacade::suppressMessages(_sourceDocumentLineItem), _trackBudgetStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjectBudgetControlEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether project budget control is enabled for the source document line item.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// The source document line item.
    /// </param>
    /// <param name="_isOnDemandBudgetCheck">
    /// A Boolean value that indicates whether to perform an on-demand project budget check.
    /// </param>
    /// <returns>
    /// true if project budget control is enabled for the source document line item; otherwise, false.
    /// </returns>
    public boolean isProjectBudgetControlEnabled(SourceDocumentLineItem  _sourceDocumentLineItem, boolean _isOnDemandBudgetCheck)
    {
        return ProjectCommitmentFacade::isProjectBudgetControlEnabled(_sourceDocumentLineItem, _isOnDemandBudgetCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkForPurchaseLineAndDeleteProjectCommitments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether <c>SourceDocumentLineItem</c> is a purchase line and if so deletes project commitments associated with it.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// The source document line item.
    /// </param>
    public void checkForPurchaseLineAndDeleteProjectCommitments(SourceDocumentLineItem _sourceDocumentLineItem)
    {
        PurchLine purchLine;
        SourceDocumentLineRecId sourceDocumentLineRecId;

        if (_sourceDocumentLineItem is PurchOrderLineSourceDocumentLineItem)
        {
            sourceDocumentLineRecId = _sourceDocumentLineItem.parmSourceDocumentLine().RecId;
            purchLine =  purchLine::findBySourceDocumentLine(sourceDocumentLineRecId);
            if (purchLine)
            {
                ProjectCommitmentFacade::deleteProjectCommitments(sourceDocumentLineRecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteProjectCommitments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates reversing project commitment entries for the existing project commitments of the given source
    /// document line.  This method will also handle liquidation of project budgets if project budgeting is
    /// enabled.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    /// The ID of the <c>SourceDocumentLine</c> record.
    /// </param>
    /// <param name="_carryForward">
    /// A Boolean value that determines whether carry forward process will be run; optional.
    /// </param>
    /// <param name="_openingDate">
    /// Opening date for the next fiscal period.
    /// </param>
    /// <remarks>
    /// Use this method when the source document line is to be deleted or cancelled.
    /// </remarks>
    public void deleteProjectCommitments(RefRecId _sourceDocumentLine, boolean _carryForward = false, TransDate _openingDate = dateNull())
    {
        ProjectCommitmentFacade::deleteProjectCommitments(_sourceDocumentLine, _carryForward, _openingDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjectBudgets</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a project budget check for the accounting distributions for the given source document line.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// A <c>SourceDocumentLineItem</c> object.
    /// </param>
    /// <param name="_suppressMessages">
    /// A Boolean value that indicates whether to suppress the over budget messages; optional.
    /// </param>
    /// <param name="_trackBudgetStatus">
    /// A Boolean value that indicates whether to track the budget status of the transactions; optional.
    /// </param>
    /// <returns>
    /// true to if the project budget check succeeded; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method will not perform reservation of project budgets.
    /// </remarks>
    public boolean checkProjectBudgets(SourceDocumentLineItem _sourceDocumentLineItem, boolean _trackBudgetStatus = false)
    {
        return ProjectCommitmentFacade::checkProjectBudgets(_sourceDocumentLineItem, ProjectCommitmentFacade::suppressMessages(_sourceDocumentLineItem), _trackBudgetStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>suppressMessages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to suppress the over budget messages for a source document line item.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// The source document line item.
    /// </param>
    /// <returns>
    /// True when over budget messages will be suppressed; otherwise, false.
    /// </returns>
    public boolean suppressMessages(SourceDocumentLineItem _sourceDocumentLineItem)
    {
        return ProjectCommitmentFacade::suppressMessages(_sourceDocumentLineItem);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>