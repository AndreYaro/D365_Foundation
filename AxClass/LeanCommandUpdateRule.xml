<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanCommandUpdateRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
class LeanCommandUpdateRule extends LeanCommandBase
{
    LeanRuleData    leanRuleData;

    KanbanRule              kanbanRule;
    KanbanRuleFixed         kanbanRuleFixed;
    LeanCoverage            leanCoverage;
    LeanCoverageKanbanRule  leanCoverageKanbanRule;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Implements the update of a rule.
    /// </summary>
    /// <returns>
    ///    true if the update was successful; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The method is executed in a transaction scope provided by the <c>LeanRulesEngine</c> table.
    /// </remarks>
    protected boolean execute()
    {
        KanbanFlow      kanbanFlowToDelete;

        if (!this.validate())
        {
            return false;
        }

        // save the KanbanFlow
        leanRuleData.parmKanbanFlowWrapper().save();
        KanbanFlow kanbanFlow = leanRuleData.kanbanFlow();

        // check if we have to try releasing the old kanban flow
        if (kanbanRule.KanbanFlow != kanbanFlow.RecId)
        {
            kanbanFlowToDelete = KanbanFlow::find(kanbanRule.KanbanFlow, true);
        }

        // update the KanbanRule
        // Reflect any updates to the rules urgency level
        kanbanRule.initFromKanbanFlow(leanRuleData.kanbanFlow());
        LeanRuleKanban leanRuleKanban = LeanRuleKanban::newLeanRuleData(leanRuleData);
        leanRuleKanban.update();

        // update the coverage
        leanCoverage.selectForUpdate(true);
        leanCoverage.update();

        // update the coverage assignment record
        leanCoverageKanbanRule.selectForUpdate(true);
        leanCoverageKanbanRule.update();

        // try releasing the old kanban flow
        if (kanbanFlowToDelete)
        {
            kanbanFlowToDelete.delete();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleUrgencyUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the urgency level of the rule, if it is required, according to a possible change on the
    ///    minimum alert level.
    /// </summary>
    protected void handleUrgencyUpdate()
    {
        if (kanbanRule.orig().MinimumAlertLevel != kanbanRule.MinimumAlertLevel)
        {
            kanbanRule.UrgencyLevel += kanbanRule.MinimumAlertLevel - kanbanRule.orig().MinimumAlertLevel;
            leanRuleData.parmKanbanRule(kanbanRule);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBuffers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the common buffers used throughout the command execution.
    /// </summary>
    private void initBuffers()
    {
        kanbanRule              = leanRuleData.parmKanbanRule();
        kanbanRuleFixed         = leanRuleData.parmKanbanRuleFixed();
        leanCoverage            = leanRuleData.parmLeanCoverage();
        leanCoverageKanbanRule  = leanRuleData.parmLeanCoverageKanbanRule();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLeanRuleData</Name>
				<Source><![CDATA[
        public LeanRuleData parmLeanRuleData(LeanRuleData _leanRuleData = leanRuleData)
    {
        leanRuleData = _leanRuleData;

        return leanRuleData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the buffers before updating occurs.
    /// </summary>
    /// <returns>
    ///    true if the data is valid; otherwise, false.
    /// </returns>
    protected boolean validate()
    {
        boolean         result         = true;
        LeanRuleKanban  leanRuleKanban = LeanRuleKanban::newLeanRuleData(leanRuleData);

        result = result && kanbanRule.LegalEntity == CompanyInfo::current();
        result = result && leanRuleKanban.validateWrite();
        result = result && leanCoverage.validateWrite();
        result = result && leanCoverageKanbanRule.validateWrite(true,leanRuleData);
        result = result && leanRuleData.parmKanbanFlowWrapper().isFlowDefined();

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        protected static LeanCommandUpdateRule construct()
    {
        return new LeanCommandUpdateRule();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes an instance of the <c>LeanCommandUpdateRule</c> class.
    /// </summary>
    /// <param name="_leanRuleData">
    /// The rule to be updated.
    /// </param>
    /// <returns>
    /// A <c>LeanCommandUpdateRule</c> instance.
    /// </returns>
    public static LeanCommandUpdateRule newStandard(LeanRuleData _leanRuleData)
    {
        LeanCommandUpdateRule leanCommandUpdateRule = LeanCommandUpdateRule::construct();

        leanCommandUpdateRule.parmLeanRuleData(_leanRuleData);
        leanCommandUpdateRule.initBuffers();

        return leanCommandUpdateRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requiresAutoAssignment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether the updated rule requires auto-assignment.
    /// </summary>
    /// <param name="_updateParams">
    ///    The data for the rule to update.
    /// </param>
    /// <returns>
    ///    true if the card assignment type of the rule has changed; otherwise, false.
    /// </returns>
    public static boolean requiresAutoAssignment(LeanRuleData _updateParams)
    {
        boolean         result = true;
        KanbanRule      kanbanRule, originalKanbanRule;

        kanbanRule = _updateParams.parmKanbanRule();

        result = kanbanRule.UsesCirculatingCards == NoYes::Yes                                  &&
                 kanbanRule.CardAssignmentType == KanbanCardAssignmentType::Automatic;

        if (result)
        {
            LeanRuleData originalData = _updateParams.orig();
            originalKanbanRule = originalData.parmKanbanRule();

            result = result && originalKanbanRule.CardAssignmentType != KanbanCardAssignmentType::Automatic;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requiresAutoPlanning</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the updated rule requires auto-planning.
    /// </summary>
    /// <param name="_updateParams">
    ///    Data for the rule to be updated.
    /// </param>
    /// <returns>
    ///    true if the rule is of type fixed and triggering level has changed; otherwise, false.
    /// </returns>
    public static boolean requiresAutoPlanning(LeanRuleData _updateParams)
    {
        boolean         result = true;

        KanbanRule kanbanRule = _updateParams.parmKanbanRule();
        LeanRuleData originalData = _updateParams.orig();
        KanbanRule originalKanbanRule = originalData.parmKanbanRule();

        result = originalKanbanRule.TriggerLevel != kanbanRule.TriggerLevel;

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requiresReplacement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether the updated rule requires a replacement over an existing rule.
    /// </summary>
    /// <param name="_updateParams">
    ///    The data for the rule to update.
    /// </param>
    /// <returns>
    ///    true if the updated rule needs a replacement; otherwise, false.
    /// </returns>
    public static boolean requiresReplacement(LeanRuleData _updateParams)
    {
        KanbanRule currentReplacedRule = _updateParams.parmKanbanRule().replacedRule();

        // if what the user selected is different than the existing replaced rule,
        // a replacement is needed
        return currentReplacedRule.RuleId != _updateParams.selectedReplacedKanbanRule().RuleId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
