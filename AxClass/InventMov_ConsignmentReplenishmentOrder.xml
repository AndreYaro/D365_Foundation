<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_ConsignmentReplenishmentOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventMov_ConsignmentReplenishmentOrder</c> class is used as a data carrier together with the <c>InventUpdate</c>
///    class when the inventory is updated with consignment replenishment order lines.
/// </summary>
/// <remarks>
///    This class is used when creating or making changes to a consignment replenishment order line.
///    A consignment replenishment order does not have any financial impact, and it has the cost of zero as long as ownership is not transferred.
///    The following methods will throw an exception.
///
///    <list type="bullet">
///    <item><description>Methods returning account numbers.</description></item>
///    <item><description>Methods getting or setting quantity for financial use.</description></item>
///    <item><description>Methods doing financial updates.</description></item>
///    <item><description>Methods doing cost amount updates.</description></item>
///    </list>
/// </remarks>
[InventMovementFactoryAttribute(tableStr(ConsignmentReplenishmentOrderLine))]
public class InventMov_ConsignmentReplenishmentOrder extends InventMovement
{
    ConsignmentReplenishmentOrderLine   replenishmentOrderLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountBalanceAutoLossProfit</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountBalanceAutoLossProfit(InventQty _qty)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountBalanceSheet</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountBalanceSheet()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountCharge</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountCharge()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountOperations</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountOperations()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountOperationsAutoLossProfit</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountOperationsAutoLossProfit(InventQty _qty)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountPhysical</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountPhysical()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountPhysicalRevenue</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountPhysicalRevenue()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountPhysicalRevenueOffset</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountPhysicalRevenueOffset()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountPhysicalTax</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountPhysicalTax()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountStdLoss</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountStdLoss()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountStdOffset</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountStdOffset()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountStdProfit</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountStdProfit()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountStockVariation</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountStockVariation()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRemainFinancialUnit</Name>
				<Source><![CDATA[
    public void addRemainFinancialUnit(
        UnitQty         _qtyUnit,
        InventQty       _qty)
    {
        // Empty - Consignment replenishment order does not capture remaining financial quantity.
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the inventory quantity that is passed as argument to the remaining inventory quantity on the consignment replenishment order line.
    /// </summary>
    /// <param name = "_inventQty">The inventory quantity to add.</param>
    public void addRemainPhysical(InventQty  _inventQty)
    {
        replenishmentOrderLine.RemainingInventoryPhysicalQuantity += _inventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRemainPhysicalUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the specified quantity to the remaining replenishment quantity on the consignment replenishment order line.
    /// </summary>
    /// <param name = "_inventQty">The inventory quantity to add.</param>
    public void addRemainPhysicalUnit(UnitQty _qtyUnit)
    {
        replenishmentOrderLine.RemainingReplenishmentPhysicalQuantity += _qtyUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>autoLossProfitInventMovVirtuel</Name>
				<Source><![CDATA[
    protected InventMov_Virtuel autoLossProfitInventMovVirtuel(InventUpd_Financial _financial, InventTrans _inventTrans, InventTransId _inventTransId)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInventTransBeFinancialUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies whether the inventory transaction can be financially updated.
    /// </summary>
    /// <param name = "_inventTrans">The inventory transaction to verify.</param>
    /// <returns>Always returns false.</returns>
    public boolean canInventTransBeFinancialUpdated(InventTrans _inventTrans)
    {
        return inventType.canInventUpdFinancial();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canReservationFormBeEdited</Name>
				<Source><![CDATA[
    public boolean canReservationFormBeEdited()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canReservationFormBeShown</Name>
				<Source><![CDATA[
    public boolean canReservationFormBeShown()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkStandardCostPriceExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether an item price exists for standard cost items for the legal entity.
    /// </summary>
    /// <returns>true if an item price exists for standard cost items for the legal entity; otherwise, false.</returns>
    private boolean checkStandardCostPriceExists()
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if (this.inventTable().modelGroup().inventModelType().stdCostBased())
            {
                if (!InventItemPrice::stdCostFindDate(this.inventTable(), this.transDate(), InventTable::priceInventDim(this.inventTable().ItemId, this.inventdim())))
                {
                    return checkFailed("@SYS112593");
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateEstimated</Name>
				<Source><![CDATA[
    public boolean checkUpdateEstimated(
        InventUpd_Estimated     _updateNow,
        InventMovement          _this_Orig)
    {
        boolean ret = true;

        if (_this_Orig && abs(this.transQty())  <  abs(_this_Orig.transQty()) && this.transQty() * _this_Orig.transQty() >= 0 )
        {
            if (_this_Orig.remainPhysicalUnit() == 0)
            {
                ret = checkFailed("@SYS25508");
            }
        }

        if (ret)
        {
            ret = super(_updateNow, _this_Orig);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdatePhysical</Name>
				<Source><![CDATA[
    public boolean checkUpdatePhysical(InventUpd_Physical _updateNow)
    {
        boolean ret = true;

        if (this.transQtyUnit() == 0)
        {
            ret = checkFailed("@SYS12170");
        }

        ret = ret & this.checkStandardCostPriceExists();

        ret = ret & super(_updateNow);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the relationship between the inventory transactions originator and the consignment replenishment order line.
    /// </summary>
    public void createOriginOwnerRelationship()
    {
        if (replenishmentOrderLine.RecId)
        {
            InventTransOriginId originId = this.inventTransOriginId();

            if (originId)
            {
                InventTransOriginConsignmentReplenishmentOrderLine::writeOriginRelationship(replenishmentOrderLine.RecId, originId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendAc</Name>
				<Source><![CDATA[
    public CustVendAC custVendAc()
    {
        return replenishmentOrderLine.replenishmentOrderHeader().OrderVendorAccountNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies the default dimension of the consignment replenishment order line.
    /// </summary>
    /// <returns>Always returns zero.</returns>
    /// <remarks>This method returns zero because the consignment replenishment order does not support financial dimensions.</remarks>
    public DimensionDefault defaultDimension()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the relationship between the inventory transactions originator and the consignment replenishment order line.
    /// </summary>
    public void deleteOriginOwnerRelationship()
    {
        if (replenishmentOrderLine.RecId)
        {
            InventTransOriginConsignmentReplenishmentOrderLine::deleteOwnerRelationship(replenishmentOrderLine.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies the postal delivery address of the consignment replenishment order line.
    /// </summary>
    /// <returns>The ID of the logistics postal address record.</returns>
    /// <remarks>This method is only used for shipping deliveries when returning items.</remarks>
    protected LogisticsPostalAddressRecId deliveryPostalAddress()
    {
        return replenishmentOrderLine.DeliveryPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dirParty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the party ID of the vendor that is related to the movement.
    /// </summary>
    /// <returns>The party ID of the vendor related to the movement.</returns>
    /// <remarks>This method returns zero if there is no vendor related to the movement.</remarks>
    public DirPartyRecId dirParty()
    {
        CustVendAC     account = this.custVendAc();

        if (!account)
        {
            return 0;
        }

        return VendTable::find(account).Party;
    }

]]></Source>
			</Method>
			<Method>
				<Name>estimatedFinancialValue</Name>
				<Source><![CDATA[
    public CostAmount  estimatedFinancialValue(
        InventTrans     _inventTrans,
        InventOnhand    _inventOnhand)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>estimatedFinancialValueSecCur_RU</Name>
				<Source><![CDATA[
    public CostAmount estimatedFinancialValueSecCur_RU(
        InventTrans     _inventTrans,
        InventOnhand    _inventOnhand)
    {
        return this.estimatedFinancialValue(_inventTrans, _inventOnhand);
    }

]]></Source>
			</Method>
			<Method>
				<Name>financialIssueCostValue</Name>
				<Source><![CDATA[
    public CostAmount financialIssueCostValue(
        InventTrans      _inventTrans,
        InventOnhand     _inventOnhand)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>financialIssueCostValueSecCur_RU</Name>
				<Source><![CDATA[
    public CostAmount financialIssueCostValueSecCur_RU(
        InventTrans      _inventTrans,
        InventOnhand     _inventOnhand)
    {
        return this.financialIssueCostValue(_inventTrans, _inventOnhand);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventoryOwnerId</Name>
				<Source><![CDATA[
    protected InventOwnerId getInventoryOwnerId()
    {
        InventOwner_RU owner = InventOwner_RU::getVendorOwner(replenishmentOrderLine.replenishmentOrderHeader().OrderVendorAccountNumber);

        return owner.InventOwnerId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckAdvancedWarehousingInventoryOwner</Name>
				<Source><![CDATA[
    protected boolean mustCheckAdvancedWarehousingInventoryOwner()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyMarkingAllowed</Name>
				<Source><![CDATA[
    public boolean interCompanyMarkingAllowed()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventCostIndirectFinancial</Name>
				<Source><![CDATA[
    public InventCostIndirectFinancial inventCostIndirectFinancial()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventCostIndirectPhysical</Name>
				<Source><![CDATA[
    public InventCostIndirectPhysical inventCostIndirectPhysical()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ID of the inventory dimension used on the consignment replenishment order line.
    /// </summary>
    /// <returns>The ID of the inventory dimension.</returns>
    public InventDimId inventDimId()
    {
        return replenishmentOrderLine.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the ID of the inventory transaction originator that corresponds to the movement.
    /// </summary>
    /// <param name="_inventTransOriginId">The new value of the ID of the inventory transaction originator.</param>
    /// <returns>The ID of the inventory transaction originator that corresponds to the movement.</returns>
    public InventTransOriginId inventTransOriginId(InventTransOriginId _inventTransOriginId = inventTransOriginId)
    {
        if (_inventTransOriginId != inventTransOriginId)
        {
            inventTransOriginId = _inventTransOriginId;
        }
        else
        {
            if (!inventTransOriginId)
            {
                inventTransOriginId = InventTransOriginConsignmentReplenishmentOrderLine::findInventTransOriginId(replenishmentOrderLine.RecId);
            }
        }

        return inventTransOriginId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ID of the item used on the consignment replenishment order line.
    /// </summary>
    /// <returns>The ID of the item.</returns>
    public ItemId itemId()
    {
        return replenishmentOrderLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moduleType</Name>
				<Source><![CDATA[
    protected ModuleInventPurchSales moduleType()
    {
        return ModuleInventPurchSales::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBookedBalanceSheet</Name>
				<Source><![CDATA[
    public boolean mustBeBookedBalanceSheet()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBookedFinancially</Name>
				<Source><![CDATA[
    public boolean mustBeBookedFinancially()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBookedOnhand</Name>
				<Source><![CDATA[
    public boolean mustBeBookedOnhand()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBookedOperations</Name>
				<Source><![CDATA[
    public boolean mustBeBookedOperations()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBookedPhysically</Name>
				<Source><![CDATA[
    public boolean mustBeBookedPhysically()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeCostControlled</Name>
				<Source><![CDATA[
    public boolean mustBeCostControlled()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeDeducted</Name>
				<Source><![CDATA[
    public boolean mustBeDeducted()
    {
        return this.inventModelGroup().MandatoryDeduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeReceived</Name>
				<Source><![CDATA[
    public boolean mustBeReceived()
    {
        return this.inventModelGroup().MandatoryReceive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeRemainControlled</Name>
				<Source><![CDATA[
    public boolean mustBeRemainControlled()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeUnitControlled</Name>
				<Source><![CDATA[
    public boolean mustBeUnitControlled()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckOverDelivery</Name>
				<Source><![CDATA[
    public NoYes mustCheckOverDelivery(InventDirection _direction)
    {
        InventQty   quantity;

        switch (_direction)
        {
            case InventDirection::Issue:
                quantity = -1;
                break;
            case InventDirection::Receipt:
                quantity = 1;
                break;
            case InventDirection::None:
                quantity = 0;
                break;
        }

        if (this.transQty() * quantity <= 0)
        {
            return NoYes::No;
        }

        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateCostTransactions</Name>
				<Source><![CDATA[
    public boolean mustCreateCostTransactions()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustExcludeFromInventoryValue</Name>
				<Source><![CDATA[
    public boolean mustExcludeFromInventoryValue()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateBatchAttribValues</Name>
				<Source><![CDATA[
    public boolean mustUpdateBatchAttribValues()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateGeneralJournal</Name>
				<Source><![CDATA[
    public boolean mustUpdateGeneralJournal()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateInventTableCostPrice</Name>
				<Source><![CDATA[
    public boolean mustUpdateInventTableCostPrice()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(
        ConsignmentReplenishmentOrderLine   _replenishmentOrderLine,
        InventType  _inventType = ConsignmentReplenishmentOrderLineType::newFromReplenishmentOrder(_replenishmentOrderLine))
    {
        replenishmentOrderLine = _replenishmentOrderLine;

        super(replenishmentOrderLine, _inventType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetAccountPhysical</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount offsetAccountPhysical()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>overDeliveryPct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the allowed over delivery percentage.
    /// </summary>
    /// <returns>The allowed over delivery percentage.</returns>
    public Percent overDeliveryPct()
    {
        if (!PurchParameters::find().OverDelivery)
        {
            return 0;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDistributionLedgerPosting</Name>
				<Source><![CDATA[
    public boolean parmDistributionLedgerPosting(boolean _distributionLedgerPosting = distributionLedgerPosting)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIndirectCostAmount_RU</Name>
				<Source><![CDATA[
    public CostAmount parmIndirectCostAmount_RU(CostAmount _indirectCostAmount = indirectCostAmount)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIndirectCostAmountSecCur_RU</Name>
				<Source><![CDATA[
    public CostAmount parmIndirectCostAmountSecCur_RU(CostAmount _indirectCostAmountSecCur = indirectCostAmountSecCur)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventCostTransVarianceList</Name>
				<Source><![CDATA[
    public InventCostTransVarianceList parmInventCostTransVarianceList(InventCostTransVarianceList _inventCostTransVarianceList = inventCostTransVarianceList)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCountryOfOrigin1</Name>
				<Source><![CDATA[
    public PdsCountryOfOrigin pdsCountryOfOrigin1()
    {
        return replenishmentOrderLine.vendorBatchInfo().CountryOfOrigin1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCountryOfOrigin2</Name>
				<Source><![CDATA[
    public PdsCountryOfOrigin pdsCountryOfOrigin2()
    {
        return replenishmentOrderLine.vendorBatchInfo().CountryOfOrigin2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsUseVendBatchDate</Name>
				<Source><![CDATA[
    public PdsUseVendBatchDate pdsUseVendBatchDate()
    {
        return replenishmentOrderLine.vendorBatchInfo().UseVendBatchDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsUseVendBatchExp</Name>
				<Source><![CDATA[
    public PdsUseVendBatchExp pdsUseVendBatchExp()
    {
        return replenishmentOrderLine.vendorBatchInfo().UseVendBatchExp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsVendBatchDate</Name>
				<Source><![CDATA[
    public PdsVendBatchDate pdsVendBatchDate()
    {
        return replenishmentOrderLine.vendorBatchInfo().VendBatchDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsVendBatchId</Name>
				<Source><![CDATA[
    public PdsVendBatchId pdsVendBatchId()
    {
        return replenishmentOrderLine.vendorBatchInfo().VendBatchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsVendBatchInfo</Name>
				<Source><![CDATA[
    public PdsVendBatchInfo pdsVendBatchInfo()
    {
        return replenishmentOrderLine.vendorBatchInfo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsVendExpiryDate</Name>
				<Source><![CDATA[
    public PdsVendExpiryDate pdsVendExpiryDate()
    {
        return replenishmentOrderLine.vendorBatchInfo().VendExpiryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingBalanceSheet</Name>
				<Source><![CDATA[
    public LedgerPostingType postingBalanceSheet()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingBalanceSheetSecCur_RU</Name>
				<Source><![CDATA[
    private LedgerPostingType postingBalanceSheetSecCur_RU()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingCharge</Name>
				<Source><![CDATA[
    public LedgerPostingType postingCharge()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingOffsetPhysical</Name>
				<Source><![CDATA[
    public LedgerPostingType postingOffsetPhysical()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingPhysicalRevenue</Name>
				<Source><![CDATA[
    public LedgerPostingType postingPhysicalRevenue()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingPhysicalRevenueOffset</Name>
				<Source><![CDATA[
    public LedgerPostingType postingPhysicalRevenueOffset()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingOperations</Name>
				<Source><![CDATA[
    public LedgerPostingType postingOperations()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingPhysical</Name>
				<Source><![CDATA[
    public LedgerPostingType postingPhysical()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingPhysicalTax</Name>
				<Source><![CDATA[
    public LedgerPostingType postingPhysicalTax()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingStdLoss</Name>
				<Source><![CDATA[
    public LedgerPostingType postingStdLoss()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingStdOffset</Name>
				<Source><![CDATA[
    public LedgerPostingType postingStdOffset()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingStdProfit</Name>
				<Source><![CDATA[
    public LedgerPostingType postingStdProfit()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingStockVariation</Name>
				<Source><![CDATA[
    public LedgerPostingType postingStockVariation()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainFinancialUnit</Name>
				<Source><![CDATA[
    public UnitQty remainFinancialUnit()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainPhysical</Name>
				<Source><![CDATA[
    public InventQty remainPhysical()
    {
        return replenishmentOrderLine.RemainingInventoryPhysicalQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainPhysicalUnit</Name>
				<Source><![CDATA[
    public UnitQty remainPhysicalUnit()
    {
        return replenishmentOrderLine.RemainingReplenishmentPhysicalQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    public void setInventDimId(InventDimId _dimId)
    {
        replenishmentOrderLine.setInventDimId(_dimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventRefFields</Name>
				<Source><![CDATA[
    public boolean setInventRefFields(
        InventRefType           _inventRefType,
        InventRefId             _inventRefId,
        InventTransOriginId     _markingRefInventTransOrigin)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the inventory quantity that is passed as argument to the remaining inventory quantity on the consignment replenishment order line.
    /// </summary>
    /// <param name = "_inventQty">The inventory quantity.</param>
    public void setRemainPhysical(InventQty  _inventQty)
    {
        replenishmentOrderLine.RemainingInventoryPhysicalQuantity = _inventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRemainPhysicalUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the replenishment quantity that is passed as argument to the remaining replenishment quantity on the consignment replenishment order line.
    /// </summary>
    /// <param name = "_inventQty">The inventory quantity.</param>
    public void setRemainPhysicalUnit(UnitQty     _qtyUnit)
    {
        replenishmentOrderLine.RemainingReplenishmentPhysicalQuantity = _qtyUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransQty</Name>
				<Source><![CDATA[
    public void setTransQty(InventQty  _qtyInvent)
    {
        replenishmentOrderLine.ReplenishmentInventoryQuantity = _qtyInvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransQtyUnit</Name>
				<Source><![CDATA[
    public void setTransQtyUnit(UnitQty  _qtyUnit)
    {
        replenishmentOrderLine.ReplenishmentQuantity = _qtyUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    public TransDate transDate()
    {
        return replenishmentOrderLine.ConfirmedDeliveryDate? replenishmentOrderLine.ConfirmedDeliveryDate : replenishmentOrderLine.RequestedDeliveryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    public InventTransId transId()
    {
        return replenishmentOrderLine.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transInventRefType</Name>
				<Source><![CDATA[
    public InventRefType transInventRefType()
    {
        return InventRefType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    public InventQty transQty()
    {
        return replenishmentOrderLine.ReplenishmentInventoryQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQtyUnit</Name>
				<Source><![CDATA[
    public UnitQty transQtyUnit()
    {
        return replenishmentOrderLine.ReplenishmentQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transRefId</Name>
				<Source><![CDATA[
    public InventTransRefId transRefId()
    {
        return replenishmentOrderLine.ReplenishmentOrderNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transSign</Name>
				<Source><![CDATA[
    public Integer transSign()
    {
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    public InventTransType transType()
    {
        return InventTransType::ConsignmentReplenishmentOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transUnitId</Name>
				<Source><![CDATA[
    public UnitOfMeasureSymbol transUnitId()
    {
        return replenishmentOrderLine.ReplenishmentUnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAutoLossProfit</Name>
				<Source><![CDATA[
    public void updateAutoLossProfit(InventUpd_Financial _financial)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerAdjust</Name>
				<Source><![CDATA[
    public void updateLedgerAdjust(
        LedgerVoucher           _ledgerVoucher,
        InventUpd_Financial     _updateNow,
        CostAmount              _costAmount,
        ProjAdjustRefId         _projAdjustRefId = '',
        ProjTransDate           _projTransDate  = dateNull())
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerAdjustSecCur_RU</Name>
				<Source><![CDATA[
    public void updateLedgerAdjustSecCur_RU(
        LedgerVoucher           _ledgerVoucher,
        InventUpd_Financial     _updateNow,
        CostAmountSecCur_RU     _costAmount,
        ProjAdjustRefId         _projAdjustRefId = '',
        ProjTransDate           _projTransDate   = dateNull())
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromReplenishmentOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>InventMov_ConsignmentReplenishmentOrder</c> class based on the specified record.
    /// </summary>
    /// <param name="_replenishmentOrderLine">The <c>ConsignmentReplenishmentOrderLine</c> record for which the class is instantiated.</param>
    /// <returns>An instance of the <c>InventMov_ConsignmentReplenishmentOrder</c> class.</returns>
    public static InventMov_ConsignmentReplenishmentOrder newFromReplenishmentOrderLine(ConsignmentReplenishmentOrderLine _replenishmentOrderLine)
    {
        return new InventMov_ConsignmentReplenishmentOrder(_replenishmentOrderLine);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>