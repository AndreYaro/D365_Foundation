<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventQualityOrderCreateForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventQualityOrderCreateForm</c> class is a helper class for the form that is used to create
///    quality orders.
/// </summary>
class InventQualityOrderCreateForm
{
    Common  buffer;
    Common  callerBuffer;

    FormRun formRun;

    Object  caller;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBuffer</Name>
				<Source><![CDATA[
    protected Common parmBuffer(Common _buffer = buffer)
    {
        if (!prmisDefault(_buffer))
        {
            buffer = _buffer;
        }

        return buffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCaller</Name>
				<Source><![CDATA[
    protected Object parmCaller(Object _caller = caller)
    {
        if (!prmisDefault(_caller))
        {
            caller = _caller;
        }

        return caller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerBuffer</Name>
				<Source><![CDATA[
    protected Common parmCallerBuffer(Common _callerBuffer = callerBuffer)
    {
        if (!prmisDefault(_callerBuffer))
        {
            callerBuffer = _callerBuffer;
        }

        return callerBuffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs initial validation and shows the quality order creation form.
    /// </summary>
    public void run()
    {
        if (this.validate())
        {
            Args args = new Args();

            args.name(formStr(InventQualityOrderTableCreate));
            args.record(buffer);
            args.caller(caller);

            formRun = classfactory.formRunClass(args);
            formRun.init();
            formRun.run();
            formRun.wait();

            if (FormDataUtil::getFormDataSource(buffer))
            {
                buffer.reread();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that required fields are populated in the caller.
    /// </summary>
    /// <returns>
    ///    true if validation succeeded; otherwise, false.
    /// </returns>
    protected boolean validate()
    {
        boolean     ret         = true;

        if (callerBuffer.RecId)
        {
            switch (callerBuffer.TableId)
            {
                case    tableNum(InventBatch):
                    if (!callerBuffer.(fieldNum(InventBatch, InventBatchId)))
                    {
                        ret = checkFailed("@SYS24669");
                    }
                    break;
                case    tableNum(InventQuarantineOrder):
                    if (!callerBuffer.(fieldNum(InventQuarantineOrder, InventTransId)))
                    {
                        ret = checkFailed("@SYS24669");
                    }
                    break;
                case    tableNum(ProdRoute):
                    ProdRoute prodRoute = callerBuffer;
                    if (!prodRoute.ProdId || !prodRoute.OprId || !prodRoute.OprNum)
                    {
                        ret = checkFailed("@SYS24669");
                    }
                    break;
                case    tableNum(ProdTable):
                    if (!callerBuffer.(fieldNum(ProdTable, InventTransId)))
                    {
                        ret = checkFailed("@SYS24669");
                    }
                    break;
                case    tableNum(PurchLine):
                    if (!callerBuffer.(fieldNum(PurchLine, InventTransId)))
                    {
                        ret = checkFailed("@SYS24669");
                    }
                    break;
                case    tableNum(SalesLine):
                    if (!callerBuffer.(fieldNum(SalesLine, InventTransId)))
                    {
                        ret = checkFailed("@SYS24669");
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventQualityOrderCreateForm construct()
    {
        return new InventQualityOrderCreateForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newQuality</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Create a new instance of the <c>InventQualityOrderCreateForm</c> class from the quality order form.
    /// </summary>
    /// <param name="_caller">
    ///    The calling form.
    /// </param>
    /// <param name="_buffer">
    ///    The calling data source.
    /// </param>
    /// <param name="_callerBuffer">
    ///    The buffer from which the quality order form was opened. It may be an empty record.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>InventQualityOrderCreateForm</c> class.
    /// </returns>
    public static InventQualityOrderCreateForm  newQuality( Object    _caller,
                                                            Common    _buffer,
                                                            Common    _callerBuffer)

    {
        InventQualityOrderCreateForm    inventQualityOrderCreateForm    = InventQualityOrderCreateForm::construct();

        inventQualityOrderCreateForm.parmCaller(_caller);
        inventQualityOrderCreateForm.parmBuffer(_buffer);
        inventQualityOrderCreateForm.parmCallerBuffer(_callerBuffer);

        return inventQualityOrderCreateForm;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
