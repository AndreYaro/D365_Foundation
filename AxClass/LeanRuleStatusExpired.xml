<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanRuleStatusExpired</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanRuleStatusExpired</c> class represents a rule that has a validity period in the past.
/// </summary>
class LeanRuleStatusExpired extends LeanRuleStatusBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canTrigger</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether a rule can be triggered.
    /// </summary>
    /// <returns>
    ///    true if the rule can be triggered; otherwise, false.
    /// </returns>
    public boolean canTrigger()
    {
        // an expired rule cannot be triggered
        return checkFailed("@SYS137211");
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the record ID of the active rule.
    /// </summary>
    /// <returns>
    ///    The record ID of the active rule.
    /// </returns>
    public RefRecId getActiveRule()
    {
        return LeanCoverageKanbanRule::findLatestActiveReplacementRule(leanRuleData.parmKanbanRule().RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOutdated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether a rule is outdated.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    /// <remarks>
    ///    A rule is outdated if the validity period has expired and no replacing rule has been defined.
    /// </remarks>
    public boolean isOutdated()
    {
        return !this.getActiveRule();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reassignCard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the reassignment of a card.
    /// </summary>
    /// <param name="_kanbanCard">
    ///    The card that is being reassigned.
    /// </param>
    /// <returns>
    ///    true if the card was reassigned; otherwise, false.
    /// </returns>
    public boolean reassignCard(KanbanCard _kanbanCard)
    {
        // gets the latest active rule from the chain
        KanbanRule kanbanRule = KanbanRule::find(this.getActiveRule());
        boolean result = false;

        if (kanbanRule && kanbanRule.RecId != leanRuleData.parmKanbanRule().RecId)
        {
            result = _kanbanCard.reAssignToRule(kanbanRule);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected static LeanRuleStatusExpired construct()
    {
        return new LeanRuleStatusExpired();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>LeanRuleStatusExpired</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>LeanRuleStatusExpired</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanRuleStatusExpired newStandard()
    {
        return LeanRuleStatusExpired::construct();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>