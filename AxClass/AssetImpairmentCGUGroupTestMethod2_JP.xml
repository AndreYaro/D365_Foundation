<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetImpairmentCGUGroupTestMethod2_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>AssetImpairmentCGUGroupTestMethod2_JP</c> represents the impairment recognition test
/// in method 2. It inherits from class <c>AssetImpairmentCGUGroupTest_JP</c>.
/// </summary>
class AssetImpairmentCGUGroupTestMethod2_JP extends AssetImpairmentCGUGroupTest_JP
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocateSharedAssetsNBV</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allocate the NBV of each shared assets and goodwill asset books to corresponding result document entry in each CGU.
    /// </summary>
    private void allocateSharedAssetsNBV()
    {
        AssetSumCalc_Trans                     sumCalc_Trans;
        AssetImpairmentCGUSharedAssetsAlloc_JP sharedAssetsAlloc;
        AssetImpairmentCGUSharedAssets_JP      sharedAssets;
        AssetDocumentEntry_JP                  assetDocEntry;
        AssetImpairmentTestResultDocEntry_JP   resultDocEntry;
        AssetImpairmentTestResultDocument_JP   resultDoc;
        real                                   totalPercent;
        AssetNetBookValue                      totalNbv;
        AssetNetBookValue                      tmpNbv;
        CurrencyCode                           currencyCode = Ledger::accountingCurrency();
        AssetTransDate                         lastTransDate;
        boolean                                hasFutureTrans;

        while select AssetId, BookId, RecId from sharedAssets
            where sharedAssets.CGUGroup == cguGroup.RecId
        {
            sumCalc_Trans =  AssetSumCalc_Trans::newAssetYear(sharedAssets.AssetId, sharedAssets.BookId, testResult.TestDate);

            totalPercent = 100;
            totalNbv = sumCalc_Trans.netBookValue();

            if (!hasFutureTrans)
            {
                lastTransDate = sumCalc_Trans.parmLastTransDate_JP();

                // According to PM, the warning message only popup when there are transactions AFTER the test date.
                // If there are transaction posted on the same day as the test date, no warning message will popup.
                if (lastTransDate > testResult.TestDate)
                {
                    hasFutureTrans = true;
                }
            }

            while select forUpdate resultDocEntry
                join assetDocEntry
                    where resultDocEntry.AssetDocumentEntry_JP == assetDocEntry.RecId
                          && assetDocEntry.AssetId == sharedAssets.AssetId
                          && assetDocEntry.BookId == sharedAssets.BookId
                join resultDoc
                    where resultDoc.RecId == resultDocEntry.ResultDocument
                          && resultDoc.AssetImpairmentTestResult_JP == testResult.RecId
                join sharedAssetsAlloc
                    where sharedAssetsAlloc.SharedAsset == sharedAssets.RecId
                          && sharedAssetsAlloc.CGU == resultDoc.CGU
            {
                if (totalPercent > 0)
                {
                    tmpNbv = totalNbv * sharedAssetsAlloc.Percent / totalPercent;
                    tmpNbv = CurrencyExchange::round(tmpNbv, currencyCode);
                    resultDocEntry.NetBookValue = tmpNbv;
                    resultDocEntry.update();

                    totalNbv = totalNbv - tmpNbv;
                    totalPercent = totalPercent - sharedAssetsAlloc.Percent;
                }
                else
                {
                    break;
                }
            }
        }

        if (hasFutureTrans)
        {
            warning(strFmt("@SYP4880638", testResult.TestDate));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateSharedAssetsNetSellingPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allocate the net selling price of each shared assets and goodwill asset books to corresponding result document entry in each CGU.
    /// </summary>
    private void allocateSharedAssetsNetSellingPrice()
    {
        AssetImpairmentCGUSharedAssetsAlloc_JP sharedAssetsAlloc;
        AssetImpairmentCGUSharedAssets_JP      sharedAssets;
        AssetDocumentEntry_JP                  assetDocEntry;
        AssetImpairmentTestResultDocEntry_JP   resultDocEntry;
        AssetImpairmentTestResultDocument_JP   resultDoc;
        real                                   totalPercent;
        AssetNetSellingPrice_JP                totalNetSellingPrice;
        AssetNetSellingPrice_JP                tmpNetSellingPrice;
        CurrencyCode                           currencyCode = Ledger::accountingCurrency();

        while select sharedAssets
                where sharedAssets.CGUGroup == cguGroup.RecId
        {
            totalPercent = 100;
            totalNetSellingPrice = sharedAssets.NetSellingPrice;

            while select forUpdate resultDocEntry
                join assetDocEntry
                    where resultDocEntry.AssetDocumentEntry_JP == assetDocEntry.RecId
                          && assetDocEntry.AssetId == sharedAssets.AssetId
                          && assetDocEntry.BookId == sharedAssets.BookId
                join resultDoc
                    where resultDoc.RecId == resultDocEntry.ResultDocument
                          && resultDoc.AssetImpairmentTestResult_JP == testResult.RecId
                join sharedAssetsAlloc
                    where sharedAssetsAlloc.SharedAsset == sharedAssets.RecId
                          && sharedAssetsAlloc.CGU == resultDoc.CGU
            {
                if (totalPercent > 0)
                {
                    tmpNetSellingPrice = totalNetSellingPrice * sharedAssetsAlloc.Percent / totalPercent;
                    tmpNetSellingPrice = CurrencyExchange::round(tmpNetSellingPrice, currencyCode);
                    resultDocEntry.NetSellingPrice = tmpNetSellingPrice;
                    resultDocEntry.update();

                    totalNetSellingPrice = totalNetSellingPrice - tmpNetSellingPrice;
                    totalPercent = totalPercent - sharedAssetsAlloc.Percent;
                }
                else
                {
                    break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateStep1Internal</Name>
				<Source><![CDATA[
    protected void allocateStep1Internal()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateStep2Internal</Name>
				<Source><![CDATA[
    protected void allocateStep2Internal()
    {
        AssetDocumentTable_JP                   document;
        AssetImpairmentTestResultDocument_JP    resultDoc;
        AssetImpairmentTestResultDocEntry_JP    resultDocEntry;
        AssetImpairmentTestResultDocEntry_JP    resultDocEntryPriority;
        AssetImpairmentTestResultDocEntry_JP    holdingEntry;
        AssetImpairmentTestResultDocEntry_JP    holdingBackEntry;
        AssetImpairmentAdjustment_JP            cguAllocatableAmt;
        AssetImpairmentAdjustment_JP            leftAmt;
        List                                    entryList;
        AssetImpairmentAllocationEntry_JP       allocEntry;
        ListEnumerator                          le;
        CurrencyCode                            currencyCode = Ledger::accountingCurrency();

        this.allocateSharedAssetsNetSellingPrice();

        if (grandTotalImpairAdj == 0)
        {
            update_recordSet resultDocEntry
                setting ImpairmentAdjustment    = 0,
                        ImpairmentAmtCalculated = 0,
                        ImpairmentAmtFrom       = 0,
                        ImpairmentAmtTo         = 0
            exists join resultDoc
                where resultDocEntry.ResultDocument == resultDoc.RecId
                      && resultDoc.AssetImpairmentTestResult_JP == testResult.RecId;
        }
        else
        {
            while select forUpdate resultDoc
                    where resultDoc.AssetImpairmentTestResult_JP == testResult.RecId
                          && resultDoc.ImpairmentAdjustment != 0
                  join document where resultDoc.AssetDocumentTable_JP == document.RecId
            {
                cguAllocatableAmt = -1 * resultDoc.ImpairmentAdjustment;

                while select AllocationPriority from resultDocEntry
                    group by resultDocEntry.AllocationPriority
                    order by resultDocEntry.AllocationPriority
                    where resultDocEntry.ResultDocument == resultDoc.RecId
                {
                    entryList = new List(Types::Class);

                    while select resultDocEntryPriority
                            where resultDocEntryPriority.AllocationPriority == resultDocEntry.AllocationPriority
                                  && resultDocEntryPriority.ResultDocument == resultDoc.RecId
                                  && resultDocEntryPriority.ImpairmentAllocationMethod != AssetImpairmentAllocationMethod_JP::Neglected
                    {
                        if (resultDocEntryPriority.IsSharedAsset)
                        {
                            if (resultDocEntryPriority.ProrationMethodOverride == AssetImpairmentSharedAssetAllocBasis_JP::NBVSubNetSellPrice)
                            {
                                entryList.addEnd(new AssetImpairmentAllocationEntry_JP(resultDocEntryPriority.RecId, resultDocEntryPriority.NetBookValue - resultDocEntryPriority.NetSellingPrice, resultDocEntryPriority.NetBookValue - resultDocEntryPriority.NetSellingPrice, resultDocEntryPriority.ImpairmentAdjustment));
                            }
                            else
                            {
                                entryList.addEnd(new AssetImpairmentAllocationEntry_JP(resultDocEntryPriority.RecId, resultDocEntryPriority.NetBookValue, resultDocEntryPriority.NetBookValue - resultDocEntryPriority.NetSellingPrice, resultDocEntryPriority.ImpairmentAdjustment));
                            }
                        }
                        else
                        {
                            if (resultDoc.ImpairmentAllocBasis == AssetImpairmentCGUAssetAllocBasis_JP::FairValue)
                            {
                                entryList.addEnd(new AssetImpairmentAllocationEntry_JP(resultDocEntryPriority.RecId, resultDocEntryPriority.NetBookValue - resultDocEntryPriority.FairValue, resultDocEntryPriority.NetBookValue - resultDocEntryPriority.FairValue, resultDocEntryPriority.ImpairmentAdjustment));
                            }
                            else
                            {
                                entryList.addEnd(new AssetImpairmentAllocationEntry_JP(resultDocEntryPriority.RecId, resultDocEntryPriority.NetBookValue, resultDocEntryPriority.NetBookValue - resultDocEntryPriority.FairValue, resultDocEntryPriority.ImpairmentAdjustment));
                            }
                        }
                    }

                    cguAllocatableAmt = AssetImpairmentAccountingHelper_JP::allocateEntries(entryList, cguAllocatableAmt, currencyCode);

                    le = entryList.getEnumerator();
                    while (le.moveNext())
                    {
                        allocEntry = le.current();
                        resultDocEntryPriority = AssetImpairmentTestResultDocEntry_JP::find(allocEntry.parmEntryRecId(), true);
                        resultDocEntryPriority.ImpairmentAdjustment = -1 * allocEntry.parmCurrent();
                        resultDocEntryPriority.ImpairmentAmtCalculated = -1 * allocEntry.parmCurrent();
                        resultDocEntryPriority.update();
                    }

                    if (cguAllocatableAmt == 0)
                    {
                        break;
                    }
                }

                // Deal with holding assets
                while select sum(ImpairmentAmtCalculated), HoldingEntry from resultDocEntry
                    group by resultDocEntry.HoldingEntry
                    where resultDocEntry.ResultDocument == resultDoc.RecId
                          && resultDocEntry.HoldingEntry != 0
                {
                    holdingEntry = AssetImpairmentTestResultDocEntry_JP::find(resultDocEntry.HoldingEntry, true);
                    holdingEntry.ImpairmentAmtFrom = resultDocEntry.ImpairmentAmtCalculated;
                    holdingEntry.ImpairmentAdjustment += holdingEntry.ImpairmentAmtFrom;
                    holdingEntry.update();

                    update_recordSet holdingBackEntry
                        setting ImpairmentAmtTo = holdingBackEntry.ImpairmentAmtCalculated,
                                ImpairmentAdjustment = holdingBackEntry.ImpairmentAdjustment - holdingBackEntry.ImpairmentAmtCalculated
                        where holdingBackEntry.HoldingEntry == holdingEntry.RecId;
                }

                if (cguAllocatableAmt)
                {
                    warning(strFmt("@SYP4880443", document.Description));
                    resultDoc.ImpairmentAdjExceeded = true;
                    resultDoc.update();
                    leftAmt += cguAllocatableAmt;
                }
            }

            if (leftAmt)
            {
                error("@SYP4880518");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCGUAssetsNbvForEntrysAndSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the total NBV of asset books in one CGU.
    /// </summary>
    /// <param name="_resultDoc">
    /// The <c>AssetImpairmentTestResultDocument_JP</c> record representing a CGU.
    /// </param>
    /// <returns>
    /// The total NBV.
    /// </returns>
    private AssetNetBookValue calculateCGUAssetsNbvForEntrysAndSum(AssetImpairmentTestResultDocument_JP _resultDoc)
    {
        AssetSumCalc_Trans                   sumCalc_Trans;
        AssetImpairmentTestResultDocEntry_JP resultDocEntry;
        AssetDocumentEntry_JP                docEntry;
        AssetImpairmentCGU_JP                cgu;
        AssetNetBookValue                    sumNbv;
        AssetTransDate                       lastTransDate;
        boolean                              hasFutureTrans;

        ttsBegin;

        while select forUpdate resultDocEntry
                where resultDocEntry.ResultDocument == _resultDoc.RecId
              join docEntry
                where docEntry.RecId == resultDocEntry.AssetDocumentEntry_JP
        {
            if (!resultDocEntry.IsSharedAsset)
            {
                sumCalc_Trans = AssetSumCalc_Trans::newAssetYear(docEntry.AssetId, docEntry.BookId, testResult.TestDate);
                resultDocEntry.FairValue = AssetBook::find(docEntry.AssetId, docEntry.BookId).AssetFairValue;

                resultDocEntry.NetBookValue = sumCalc_Trans.netBookValue();
                resultDocEntry.update();

                if (!hasFutureTrans)
                {
                    lastTransDate = sumCalc_Trans.parmLastTransDate_JP();

                    // According to PM, the warning message only popup when there are transactions AFTER the test date.
                    // If there are transaction posted on the same day as the test date, no warning message will popup.
                    if (lastTransDate > testResult.TestDate)
                    {
                        hasFutureTrans = true;
                    }
                }

                sumNbv += sumCalc_Trans.netBookValue();
            }
            else
            {
                sumNbv += resultDocEntry.NetBookValue;
            }
        }

        if (hasFutureTrans)
        {
            cgu = AssetImpairmentCGU_JP::find(_resultDoc.CGU);
            warning(strFmt("@SYP4880637", testResult.TestDate, cgu.Number));
        }

        ttsCommit;

        return sumNbv;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateStep1Internal</Name>
				<Source><![CDATA[
    protected void calculateStep1Internal()
    {
        AssetImpairmentTestResultDocument_JP resultDocument;
        AssetImpairmentAdjustment_JP         impairmentAdjTmp;
        AssetImpairmentAdjustment_JP         totalImpairmentAdjLoc;
        AssetRecoverableAmount_JP            tmpRecovAmt;
        AssetRecoverableAmount_JP            totalRecovLoc;
        boolean                              recovGTUndisc;

        while select forUpdate resultDocument
                where resultDocument.AssetImpairmentTestResult_JP == testResult.RecId
                      && resultDocument.CGU != 0
        {
            impairmentAdjTmp = 0;
            tmpRecovAmt = 0;

            if (resultDocument.DocTestResult == NoYesUnchanged::Yes)
            {
                if (!resultDocument.NotRecoverable && resultDocument.RecoverableAmount == 0)
                {
                    // @SYP4880614: The impairment calculation process has failed. You will need to provide recoverable amount for the cash generating units that requires an impairment before you can calculate the impairment amount and allocate the amount to fixed assets for posting.
                    // @SYP4860083: Please check the "Not recoverable" checkbox if the recoverable amount of the cash generating unit is 0.
                    throw error("@SYP4880614" + "@SYP4860083");
                }
                else
                {
                    impairmentAdjTmp = resultDocument.RecoverableAmount - resultDocument.NetBookValue;
                    tmpRecovAmt = resultDocument.RecoverableAmount;

                    if (tmpRecovAmt > resultDocument.UndiscountedCashFlow)
                    {
                        recovGTUndisc = true;
                    }
                }

                if (impairmentAdjTmp > 0)
                {
                    impairmentAdjTmp = 0;
                }

                resultDocument.ImpairmentAdjustment = impairmentAdjTmp;
                resultDocument.update();
            }

            totalRecovLoc += tmpRecovAmt;
            totalImpairmentAdjLoc += impairmentAdjTmp;
        }

        if (recovGTUndisc)
        {
            warning("@SYP4880636");
        }

        grandTotalRecovAmt = totalRecovLoc;
        grandTotalImpairAdj = totalImpairmentAdjLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateStep2Internal</Name>
				<Source><![CDATA[
    protected void calculateStep2Internal()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>testStep1</Name>
				<Source><![CDATA[
    protected boolean testStep1()
    {
        boolean                              ret;
        boolean                              tempRet;
        AssetImpairmentTestResultDocument_JP resultDoc;
        AssetNetBookValue                    cguSubtotalNbvLoc;
        AssetUndiscountedCashFlow_JP         cguSubtotalUndiscCFLoc;

        this.allocateSharedAssetsNBV();

        while select forUpdate resultDoc
                where resultDoc.AssetImpairmentTestResult_JP == testResult.RecId
        {
            resultDoc.NetBookValue = this.calculateCGUAssetsNbvForEntrysAndSum(resultDoc);

            tempRet = resultDoc.NetBookValue > resultDoc.UndiscountedCashFlow;
            ret = ret || tempRet;
            resultDoc.DocTestResult = tempRet ? NoYesUnchanged::Yes : NoYesUnchanged::No;
            resultDoc.update();
            cguSubtotalNbvLoc += resultDoc.NetBookValue;
            cguSubtotalUndiscCFLoc += resultDoc.UndiscountedCashFlow;
        }

        cguSubtotalNbv = cguSubtotalNbvLoc;
        cguSubtotalUndiscCF = cguSubtotalUndiscCFLoc;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>testStep2</Name>
				<Source><![CDATA[
    protected boolean testStep2()
    {
        grandTotalNbv = cguSubtotalNbv;
        grandTotalUndiscCF = cguSubtotalUndiscCF;

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// The constructor of class <c>AssetImpairmentCGUGroupTestMethod2_JP</c>.
    /// </summary>
    /// <param name="_testResult">
    /// The <c>AssetImpairmentTestResult_JP</c> record that this test against.
    /// </param>
    /// <returns>
    /// An <c>AssetImpairmentCGUGroupTestMethod2_JP</c> instance.
    /// </returns>
    public static AssetImpairmentCGUGroupTest_JP construct(AssetImpairmentTestResult_JP _testResult)
    {
        return new AssetImpairmentCGUGroupTestMethod2_JP(_testResult);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>