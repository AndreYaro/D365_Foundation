<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustBillOfExchangeEndorsePost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class is used to handle the business logic for endorsement bills of exchange.
/// </summary>
abstract class CustBillOfExchangeEndorsePost
{
    private const str FeatureReferenceJP = 'JP-00008';

    AmountCur                               amountCur;
    CurrencyCode                            currencyCode;
    CustBillOfExchangeEndorseDate           endorseDate;
    CustBillOfExchangeJour                  custBillOfExchangeJour;
    CustBillOfExchangeEndorseDescription    endorseDescription;
    LedgerVoucher                           ledgerVoucher;
    VendAccount                             vendAccount;
    TransDate                               postingDate;
    DimensionDefault                        vendorDefaultDimension;
    DimensionDefault                        billOfExchangeDefaultDimension;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>closePaymTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the entry for Reversing payment to vendor
    /// </summary>
    /// <param name="_vendTransToReverse">
    /// buffer vendTrans to be reversed
    /// </param>
    /// <param name="_vendTrans">
    /// buffer vendtrans
    /// </param>
    /// <param name="_ledgerVoucher">
    /// object of LedgerVoucher
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void closePaymTrans(VendTrans     _vendTransToReverse,
                                  VendTrans     _vendTrans,
                                  LedgerVoucher _ledgerVoucher)
    {
        VendTable                   vendTable = VendTable::find(_vendTrans.AccountNum);
        VendTransOpen               vendTransOpenFieldList;
        SpecTransManager            specTransManager;
        NoYes                       foundVendTransOpen = NoYes::No;

        specTransManager = SpecTransManager::newFromSpec(vendTable);

        if (specTransManager.getSpecTransCount() > 0) //specification.existSpecTrans())
        {
            specTransManager.deleteAll();
        }

        // payment
        while select DataAreaId, TableId, RecId, AmountCur from vendTransOpenFieldList
            where vendTransOpenFieldList.RefRecId == _vendTrans.RecId
        {
            specTransManager.insert(vendTransOpenFieldList.DataAreaId, vendTransOpenFieldList.TableId, vendTransOpenFieldList.RecId, vendTransOpenFieldList.AmountCur, _vendTrans.CurrencyCode);
            foundVendTransOpen = NoYes::Yes;
        }
        if (!foundVendTransOpen)
        {
            throw error(strFmt("@SYS18598", funcName())); //Canceled in function %1.
        }

        // payment reversal
        while select DataAreaId, TableId, RecId, AmountCur from vendTransOpenFieldList
            where vendTransOpenFieldList.RefRecId == _vendTransToReverse.RecId
        {
            specTransManager.insert(vendTransOpenFieldList.DataAreaId, vendTransOpenFieldList.TableId, vendTransOpenFieldList.RecId, vendTransOpenFieldList.AmountCur, _vendTrans.CurrencyCode);
        }

        VendTrans::settleTransact(vendTable, _ledgerVoucher);
        specTransManager.deleteAll();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create and posts the customer voucher.
    /// </summary>
    /// <param name="_custAccount">
    /// customer account number for posting.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createCustTrans(CustAccount _custAccount)
    {
        CustVoucher         custVoucher;
        CustTable           custTable = custTable::find(_custAccount);
        custVoucher = CustVendVoucher::construct(
                        SysModule::Cust,
                        _custAccount,
                        amountCur,
                        currencyCode,
                        LedgerTransTxt::None,
                        this.getCustDefaultDimension(),
                        CustParameters::find().PostingProfileBills,
                        LedgerPostingType::CustBalance,
                        '',
                        SettlementType::None);
        custVoucher.parmExchRate(ExchangeRateHelper::exchRate(currencyCode));
        custVoucher.parmTransRefType(CustTransRefType::BillOfExchange);
        custVoucher.parmTransRefId("");
        custVoucher.post(ledgerVoucher, this.custTrans());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create and posts the ledger voucher
    /// </summary>
    /// <param name="_defaultAccount">
    /// ledger accout for posting.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createLedgerTrans(DimensionDynamicDefaultAccount _defaultAccount)
    {
        LedgerVoucherObject         ledgerVoucherObject;
        CurrencyExchangeHelper      exchangeRateHelper;
        LedgerVoucherTransObject    ledgerVoucherTransObject;
        LedgerDimensionAccount      mergedLedgerDimension;
        List                        dimensionSources;

        ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject();
        dimensionSources = new List(Types::Class);
        dimensionSources.addEnd(LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(this.parmBillOfExchangeDefaultDimension()));
        mergedLedgerDimension = LedgerDimensionDefaultingEngine::createLedgerDimension(_defaultAccount, dimensionSources);
        exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(
                                Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                ledgerVoucherObject.parmAccountingDate());
        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                                            ledgerVoucherObject,
                                                            this.postingType(),
                                                            mergedLedgerDimension,
                                                            currencyCode,
                                                            amountCur,
                                                            exchangeRateHelper);
        ledgerVoucher.addTrans(ledgerVoucherTransObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create and posts the vendor voucher.
    /// </summary>
    /// <param name="_accountNum">
    /// vendor account number for posting.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createVendTrans(VendAccount  _accountNum)
    {
        VendVoucher         vendVoucher;
        VendTable           vendTable = VendTable::find(_accountNum);
        vendVoucher = CustVendVoucher::construct(
                        SysModule::Vend,
                        _accountNum,
                        amountCur,
                        currencyCode,
                        LedgerTransTxt::None,
                        this.parmVendorDefaultDimension(),
                        '',
                        this.postingType(),
                        '',
                        SettlementType::None,
                        HcmWorker::userId2Worker(curUserId()),
                        NoYes::Yes);
        vendVoucher.parmTriangulation(Currency::euroTriangulation(currencyCode, postingDate));
        vendVoucher.parmPaymMode(vendTable.PaymMode);
        vendVoucher.parmPaymSpec(vendTable.PaymSpec);
        vendVoucher.parmExchRate(ExchangeRateHelper::exchRate(currencyCode));
        vendVoucher.post(ledgerVoucher, this.vendTrans());
    }

]]></Source>
			</Method>
			<Method>
				<Name>custTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return buffer custTrans for settlement endorsed bills of exchange
    /// </summary>
    /// <returns>
    /// Return the buffer custTrans.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract protected CustTrans custTrans()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCustBillOfExchangeJourExtensionJP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete record in table CustBillOfExchangeEndorseJour when reversing BOE endorsement.
    /// </summary>
    /// <param name="_custBillOfExchangeID">
    /// Id of bill of exchange
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void deleteCustBillOfExchangeJourExtensionJP(CustBillOfExchangeID _custBillOfExchangeID)
    {
        CustBillOfExchangeJourExtensionJP   billOfExchEndorseJour;

        delete_from billOfExchEndorseJour
            where billOfExchEndorseJour.CustBillOfExchangeJour == _custBillOfExchangeID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endPostTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// End the posting process.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void endPostTrans()
    {
        if (ledgerVoucher)
        {
            ledgerVoucher.end();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBillOfExchangeSeqNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get new sequence number for bill of exchange.
    /// </summary>
    /// <returns>
    /// Return new sequence number for bill of exchange
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected CustVendNegInstSeqNum getBillOfExchangeSeqNum()
    {
        return CustBillOfExchangeTrans::maxSeqNum(custBillOfExchangeJour.BillOfExchangeId) + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the default dimension of cust trans for draw bill of exchange.
    /// </summary>
    /// <returns>
    /// Returns default dimension of cust trans for draw bill of exchange.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected DimensionDefault getCustDefaultDimension()
    {
        return this.getCustTransOfBOEDraw().DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustTransOfBOEDraw</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cust trans generated by drawing BOE.
    /// </summary>
    /// <returns>
    /// An cust Trans
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected CustTrans getCustTransOfBOEDraw()
    {
        CustTrans       custTrans;
        CustTransOpen   custTransOpen;

        select firstOnly * from custTrans
            exists join custTransOpen
                where custTrans.AccountNum == custBillOfExchangeJour.CustAccount
                    && custTrans.BillOfExchangeID == custBillOfExchangeJour.BillOfExchangeId
                    && (custTrans.BillOfExchangeStatus == CustVendNegInstStatus::Drawn
                        || custTrans.BillOfExchangeStatus == CustVendNegInstStatus::Redrawn)
                    && custTrans.AccountNum == custTransOpen.AccountNum
                    && custTrans.RecId == custTransOpen.RefRecId;

        return custTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEndorsedTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <C>CustBillOfExchangeTransExtensionJP</C> for nonreversed endorsed bill of exchange trans.
    /// </summary>
    /// <returns>
    /// An instance of <C>CustBillOfExchangeTransExtensionJP</C>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected CustBillOfExchangeTransExtensionJP getEndorsedTrans()
    {
        CustBillOfExchangeTrans             custBillofExchangeTrans;
        CustBillOfExchangeTransExtensionJP  endorsedTrans;

        select firstOnly endorsedTrans
            exists join custBillofExchangeTrans
                where endorsedTrans.CustBillOfExchangeTrans     == CustBillOfExchangeTrans.RecId
                    && custBillofExchangeTrans.BillOfExchangeId == custBillOfExchangeJour.BillOfExchangeId
                    && custBillofExchangeTrans.SeqNum           == custBillOfExchangeJour.BillOfExchangeSeqNum
                    && custBillofExchangeTrans.Status           == CustVendNegInstStatus::Endorsed
                    && endorsedTrans.ReverseOffsetRecid         == 0;

        return endorsedTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPostTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initial the posting process.
    /// </summary>
    /// <returns>
    /// return true if no error.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean initPostTrans()
    {
        NumberSeq               numberSeq;
        Voucher                 voucher;

        numberSeq   = NumberSeq::newGetVoucher(CustParameters::numRefCustBillOfExchangeEndorseVoucher());
        voucher     = numberSeq.voucher();

        ledgerVoucher = LedgerVoucher::newLedgerPost(
                            DetailSummary::Detail,
                            SysModule::Cust,
                            numberSeq.parmVoucherSequenceCode());

        if (ledgerVoucher)
        {
            ledgerVoucher.addVoucher(
                LedgerVoucherObject::newVoucher(
                    voucher,
                    postingDate,
                    SysModule::Cust,
                    LedgerTransType::None));
        }

        return ledgerVoucher != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustBillOfExchangeJourExtensionJP</Name>
				<Source><![CDATA[
    /// <summary>
    /// create record data to table CustBillOfExchangeJourExtensionJP during BOE endorsement process.
    /// </summary>
    /// <param name="_custBillOfExchangeID">
    /// Id of bill of exchange
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void insertCustBillOfExchangeJourExtensionJP(CustBillOfExchangeID _custBillOfExchangeID)
    {
        GlobalizationInstrumentationHelper::featureRun(FeatureReferenceJP, funcName());

        CustBillOfExchangeJourExtensionJP   endorseJour;

        endorseJour.EndorseDate = endorseDate;
        endorseJour.VendAccount = vendAccount;
        endorseJour.Description = endorseDescription;
        endorseJour.CustBillOfExchangeJour = _custBillOfExchangeID;
        endorseJour.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustBillOfExchangeTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Create transaction record into table CustBillOfExchangeTrans during BOE endorsement process.
    /// </summary>
    /// <param name="_custBillOfExchangeJour">
    /// buffer of CustBillOfExchangeJour
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void insertCustBillOfExchangeTrans(CustBillOfExchangeJour _custBillOfExchangeJour)
    {
        CustBillOfExchangeTrans             custBillOfExchangeTrans;
        CustBillOfExchangeTransExtensionJP  endorseTrans;
        ttsBegin;
        custBillOfExchangeTrans.initFromCustBillOfExchangeJour(_custBillOfExchangeJour);
        custBillOfExchangeTrans.TransDate = postingDate;
        custBillOfExchangeTrans.Voucher = ledgerVoucher.findLedgerVoucherObject().parmVoucher();
        custBillOfExchangeTrans.SeqNum = _custBillOfExchangeJour.BillOfExchangeSeqNum;
        custBillOfExchangeTrans.AmountCur = amountCur;
        custBillOfExchangeTrans.CurrencyCode = currencyCode;
        custBillOfExchangeTrans.insert();
        if (_custBillOfExchangeJour.Status == CustVendNegInstStatus::Endorsed)
        {
            endorseTrans.CustBillOfExchangeTrans = custBillOfExchangeTrans.RecId;
            endorseTrans.VendAccount = vendAccount;
            endorseTrans.VendorDefaultDimension = vendorDefaultDimension;
            endorseTrans.BillOfExchangeDefaultDimension = billOfExchangeDefaultDimension;
            endorseTrans.ReverseOffsetRecid = 0;
            endorseTrans.insert();
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAmountCur</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected AmountCur parmAmountCur(AmountCur _amountCur = amountCur)
    {
        amountCur = _amountCur;
        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBillOfExchangeDefaultDimension</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public DimensionDefault parmBillOfExchangeDefaultDimension(DimensionDefault _billOfExchangeDefaultDimension = billOfExchangeDefaultDimension)
    {
        billOfExchangeDefaultDimension = _billOfExchangeDefaultDimension;

        return billOfExchangeDefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyCode</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected CurrencyCode parmCurrencyCode(CurrencyCode _currencyCode = currencyCode)
    {
        currencyCode = _currencyCode;
        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustBillOfExchangeJour</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected CustBillOfExchangeJour parmCustBillOfExchangeJour(CustBillOfExchangeJour _custBillOfExchangeJour = custBillOfExchangeJour)
    {
        custBillOfExchangeJour = _custBillOfExchangeJour;
        return custBillOfExchangeJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndorseDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected CustBillOfExchangeEndorseDate parmEndorseDate(CustBillOfExchangeEndorseDate   _endorseDate = endorseDate)
    {
        endorseDate = _endorseDate;
        return endorseDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndorseDescription</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected CustBillOfExchangeEndorseDescription parmEndorseDescription(CustBillOfExchangeEndorseDescription   _endorseDescription = endorseDescription)
    {
        endorseDescription = _endorseDescription;
        return endorseDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected TransDate parmPostingDate(TransDate _postingDate = postingDate)
    {
        postingDate = _postingDate;
        return postingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendAccount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected VendAccount parmVendAccount(VendAccount   _vendAccount = vendAccount)
    {
        vendAccount = _vendAccount;
        return vendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendorDefaultDimension</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public DimensionDefault parmVendorDefaultDimension(DimensionDefault _vendorDefaultDimension = vendorDefaultDimension)
    {
        vendorDefaultDimension = _vendorDefaultDimension;

        return vendorDefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return ledger posting type for bills of exchange endorsement process
    /// </summary>
    /// <returns>
    /// Return the Ledger posting type.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract protected LedgerPostingType postingType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts transaction by account type and account number
    /// </summary>
    /// <param name="_ledgerJournalACType">
    /// Ledger account type
    /// </param>
    /// <param name="_defaultAccount">
    /// Ledger account number
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void postTrans(LedgerJournalACType            _ledgerJournalACType,
                             DimensionDynamicDefaultAccount _defaultAccount)
    {
        LedgerJournalACType ledgerJournalACType = _ledgerJournalACType;
        LedgerJournalAC     accountNum;
        if (!amountCur)
        {
            return;
        }
        if (ledgerJournalACType != LedgerJournalACType::Ledger)
        {
            accountNum = LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(_defaultAccount);
        }
        switch (ledgerJournalACType)
        {
            case LedgerJournalACType::Ledger :
                this.createLedgerTrans(_defaultAccount);
                break;
            case LedgerJournalACType::Vend :
                this.createVendTrans(accountNum);
                break;
            case LedgerJournalACType::Cust :
                this.createCustTrans(accountNum);
                break;
        }
        // this is to convert amount into credit amount.
        amountCur = -1 * abs(amountCur);
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveVendTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get vendTrans by BillOfExchangeId of BOE endorsed record CustBillOfExchangeJour
    /// </summary>
    /// <returns>
    /// return buffer VendTrans
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected VendTrans retrieveVendTrans()
    {
        CustBillOfExchangeTrans         boeTrans;
        VendTrans                       vendTransLocal;

        select firstOnly vendTransLocal
            exists join boeTrans
            where boeTrans.BillOfExchangeId == custBillOfExchangeJour.BillOfExchangeId
               && boeTrans.Status           == CustVendNegInstStatus::Endorsed
               && boeTrans.SeqNum           == custBillOfExchangeJour.BillOfExchangeSeqNum
               && vendTransLocal.Voucher    == boeTrans.Voucher
               && vendTransLocal.TransDate  == boeTrans.TransDate;

        return vendTransLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>status</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the status of BOE for bills of exchange endorsement process
    /// </summary>
    /// <returns>
    /// return status of BOE
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract protected CustVendNegInstStatus status()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustBillOfExchangeJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// update record in table CustBillOfExchangeEndorseJour when status change for BOE.
    /// </summary>
    /// <param name="_custBillOfExchangeID">
    /// Id of bill of exchange
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateCustBillOfExchangeJour(CustBillOfExchangeID _custBillOfExchangeID)
    {
        CustBillOfExchangeJour          billOfExchangeJour;

        billOfExchangeJour.selectForUpdate(true);
        update_recordset billOfExchangeJour
            setting
                Status               = this.status(),
                BillOfExchangeSeqNum = this.getBillOfExchangeSeqNum()
        where billOfExchangeJour.BillOfExchangeId == _custBillOfExchangeID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustBillOfExchangeJourExtensionJP</Name>
				<Source><![CDATA[
    /// <summary>
    /// update record in table CustBillOfExchangeJourExtensionJP when status changes for BOE.
    /// </summary>
    /// <param name="_billOfExchangeEndorseJour">
    /// buffer of CustBillOfExchangeJourExtensionJP
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateCustBillOfExchangeJourExtensionJP(CustBillOfExchangeJourExtensionJP _billOfExchangeEndorseJour)
    {
        GlobalizationInstrumentationHelper::featureRun(FeatureReferenceJP, funcName());

        if(this.status() == CustVendNegInstStatus::EndorsementSettled)
        {
            _billOfExchangeEndorseJour.selectForUpdate(true);
            _billOfExchangeEndorseJour.SettleEndorseDate = postingDate;
        }
      
        _billOfExchangeEndorseJour.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Execute the business logic for BOE endorsement process.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract protected void updateNow()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// validation for BOE endorsement process.
    /// </summary>
    /// <returns>
    /// return true if no error.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract protected boolean validate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return buffer vendTrans for endorsement bills of exchange
    /// </summary>
    /// <returns>
    /// Return the buffer vendTrans.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract protected VendTrans vendTrans()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct a new instance for this class according to posting type
    /// </summary>
    /// <param name="_custBillOfExchangePostingType">
    /// posting type
    /// </param>
    /// <returns>
    /// return instance
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static CustBillOfExchangeEndorsePost construct(CustBillOfExchangePostingType   _custBillOfExchangePostingType)
    {
        CustBillOfExchangeEndorsePost   custBillOfExchangeEndorsePost;

        switch (_custBillOfExchangePostingType)
        {
            case CustBillOfExchangePostingType::Endorse:
                custBillOfExchangeEndorsePost = new CustBillOfExchangeEndorseVend();
                break;

            case CustBillOfExchangePostingType::Reverse:
                custBillOfExchangeEndorsePost = new CustBillOfExchangeEndorseReverse();
                break;

            case CustBillOfExchangePostingType::Settle:
                custBillOfExchangeEndorsePost = new CustBillOfExchangeEndorseSettle();
                break;

            default :
                throw error("@SYS22828",classId2Name(classIdGet(custBillOfExchangeEndorsePost))); // Function %1 has been incorrectly called.
        }

        return custBillOfExchangeEndorsePost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        Struct                  struct = new Struct();
        CustBillOfExchangeJour  custBillOfExchangeJour;
        MultiSelectionContext   multiSelectionContext;
        boolean                 isMultiSelection;

        switch (_args.dataset())
        {
            case tableNum(CustBillOfExchangeJour) :

                struct  = _args.parmObject();

                multiSelectionContext   = _args.multiSelectionContext();
                if (multiSelectionContext)
                {
                    custBillOfExchangeJour = multiSelectionContext.getFirst();
                    while (custBillOfExchangeJour)
                    {
                        CustBillOfExchangeEndorsePost::runOnServer(
                            _args.parmEnum(),
                            custBillOfExchangeJour.BillOfExchangeId,
                            struct.pack());

                        custBillOfExchangeJour  = multiSelectionContext.getNext();
                        isMultiSelection        = true;
                    }
                }
                if (!isMultiSelection)
                {
                    custBillOfExchangeJour = _args.record();
                    CustBillOfExchangeEndorsePost::runOnServer(
                        _args.parmEnum(),
                        custBillOfExchangeJour.BillOfExchangeId,
                        struct.pack());
                }

                struct = null;
                break;

            default :
                throw error(strFmt("@SYS22828","@SYS12483"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Execute the business logic on server
    /// </summary>
    /// <param name="_custBillOfExchangePostingType">
    /// posting type
    /// </param>
    /// <param name="_billOfExchangeId">
    /// id of bill of exchange
    /// </param>
    /// <param name="_conStruct">
    /// container for parameter value
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected static void runOnServer(
        CustBillOfExchangePostingType   _custBillOfExchangePostingType,
        CustBillOfExchangeID            _billOfExchangeId,
        container                       _conStruct)
    {
        #OCCRetryCount
        CustBillOfExchangeEndorsePost   custBillOfExchangeEndorsePost;
        Struct                          struct;
        try
        {
            ttsbegin;
            custBillOfExchangeEndorsePost = CustBillOfExchangeEndorsePost::construct(_custBillOfExchangePostingType);
            if (custBillOfExchangeEndorsePost)
            {
                struct = Struct::create(_conStruct);

                custBillOfExchangeEndorsePost.parmPostingDate(struct.value(extendedTypeStr(TransDate)));

                if (_custBillOfExchangePostingType == CustBillOfExchangePostingType::Endorse)
                {
                    custBillOfExchangeEndorsePost.parmEndorseDate(struct.value(extendedTypeStr(TransDate)));
                    custBillOfExchangeEndorsePost.parmVendAccount(struct.value(extendedTypeStr(VendAccount)));
                    custBillOfExchangeEndorsePost.parmEndorseDescription(struct.value(extendedTypeStr(Description)));
                    custBillOfExchangeEndorsePost.parmVendorDefaultDimension(struct.value(extendedTypeStr(CustBillOfExchangeVendorDefaultDim_JP)));
                    custBillOfExchangeEndorsePost.parmBillOfExchangeDefaultDimension(struct.value(extendedTypeStr(CustBillOfExchangeDefaultDimension_JP)));
                    struct = null;
                }
                custBillOfExchangeEndorsePost.parmCustBillOfExchangeJour(CustBillOfExchangeJour::find(_billOfExchangeId));
                custBillOfExchangeEndorsePost.updateNow();
            }
            ttscommit;
        }
        catch (Exception::Error)
        {
            throw error("@SYS21628"); // Update has been canceled because of an error.
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>