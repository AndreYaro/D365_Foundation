<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInboundOrderChangeLoadLineUpdater</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSInboundOrderChangeLoadLineUpdater</c> class is used to validate changes to the inbound order line that may need to be
/// synchronized to existing load lines.
/// </summary>
/// <remarks>
/// Inbound order lines require different validation and handling from other source lines.
/// </remarks>
abstract class WHSInboundOrderChangeLoadLineUpdater extends WHSSrcLineChangeLoadLineUpdater
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canSyncDimensionChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that we can change dimensions on load lines.
    /// </summary>
    /// <returns>
    /// true if we can update load line dimensions; otherwise,
    /// false
    /// </returns>
    protected boolean canSyncDimensionChange()
    {
        // Validate that we are not changing WH dimension if loadLines exist
        if (this.isWarehouseChanged())
        {
            return checkFailed("@WAX4640");
        }

        // Validate that we are not changing dimensions of a loadLine with work created.
        if (this.doesOpenWorkExistWithOtherDimensions())
        {
            return checkFailed("@WAX4654");
        }

        // Inbound orders can only have one inventTrans inventDim combination for Ordered transactions
        updateDimId = newInventDimId;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSyncQtyIncrease</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the load line quantity can be increased.
    /// </summary>
    /// <returns>
    /// true if quantity on the load line can be increased; otherwise,
    /// false
    /// </returns>
    protected boolean canSyncQtyIncrease()
    {
        WHSLoadLine loadLine;
        WHSLoadTable loadTable;

        if (WHSInboundOrderChangeLoadLineUpdaterNoSyncToReceivedLoadFlight::instance().isEnabled())
        {
            // Cannot increase load line if it's on a received load.
            select firstonly RecId from loadLine
                where loadLine.InventTransId == inventTransId
                exists join loadTable
                    where loadTable.LoadId == loadLine.LoadId
                        && loadTable.LoadStatus != WHSLoadStatus::Received
                        && !loadTable.LoadReceivingCompletedUTCDateTime;
        }
        else
        {
            // Cannot increase load line if it's on a shipped load.
            select firstonly RecId from loadLine
                where loadLine.InventTransId == inventTransId
                exists join loadTable
                    where loadTable.LoadId == loadLine.LoadId
                    && loadTable.LoadStatus != WHSLoadStatus::Received;
        }
        
        if (!loadLine)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>labelForSyncQtyIncreaseValidationFail</Name>
				<Source><![CDATA[
    protected str labelForSyncQtyIncreaseValidationFail()
    {
        if (WHSInboundOrderChangeLoadLineUpdaterNoSyncToReceivedLoadFlight::instance().isEnabled())
        {
            WHSLoadLine loadLine;
            WHSLoadTable loadTable;

            select firstonly LoadId from loadLine
                where loadLine.InventTransId == inventTransId
                exists join loadTable
                    where loadTable.LoadId == loadLine.LoadId
                        && (loadTable.LoadStatus == WHSLoadStatus::Received
                            || loadTable.LoadReceivingCompletedUTCDateTime);

            if (loadLine.RecId)
            {
                return strFmt("@WAX:SyncQtyIncreaseValidationFail_Label", inventTransId, loadLine.LoadId);
            }
        }
        
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSyncQtyReduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that quantity on the load line can be reduced.
    /// </summary>
    /// <returns>
    /// true if quantity on the load line can be reduced; otherwise,
    /// false
    /// </returns>
    protected boolean canSyncQtyReduction()
    {
        WHSLoadLine loadLine;
        WHSLoadTable loadTable;

        // Cannot increase load line if it's on a recieved load.
        select firstonly RecId from loadLine
            where loadLine.InventTransId == inventTransId
            exists join loadTable
                where loadTable.LoadId == loadLine.LoadId
                   && loadTable.LoadStatus < WHSLoadStatus::Received;

        if (!loadLine)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesOpenWorkExistWithOtherDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if open work exists for the order line.
    /// </summary>
    /// <returns>
    /// true if there is a load line with partial work created; otherwise,
    /// false
    /// </returns>
    /// <remarks>
    /// This is used in determine if we are allowed to change dimensions on a loadline.
    /// We are allowed to skip over loadLines that have full work created quantity.
    /// </remarks>
    protected boolean doesOpenWorkExistWithOtherDimensions()
    {
        WHSloadLine loadLine;
        // Validate that we are not changing dimensions of a loadLine with work created.
        select firstOnly RecId from loadLine
            where loadLine.WorkCreatedQty   >  0
               && loadLine.WorkCreatedQty   != loadLine.InventQty
               && loadLine.InventTransId    == inventTransId
               && loadLine.InventDimId      != newInventDimId;

        if (loadLine.RecId)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLoadHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the load header information for wieghts.
    /// </summary>
    /// <param name="_loadId">
    /// The loadId of the load that is to be updated.
    /// </param>
    protected void updateLoadHeader(WHSLoadId _loadId)
    {
        ttsBegin;

        this.setLoadDiffWeight();
        WHSLoadTable loadTable = WHSLoadTable::find(_loadId, true);

        loadTable.LoadWeight += diffLoadWeight;
        loadTable.LoadNetWeight += diffLoadNetWeight;
        loadTable.updateLoadTareWeight();
        loadTable.doUpdate();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLoadLineDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the dimension of all eligible load lines.
    /// </summary>
    /// <remarks>
    /// We only update load lines that have no work crated.
    /// </remarks>
    protected void updateLoadLineDimensions()
    {
        WHSLoadLine loadLine;

        ttsBegin;

        // Only needed when changing dimensions
        loadLine.skipDataMethods(true);
        update_recordSet loadLine
            setting InventDimId = updateDimId
            where loadLine.inventTransId == inventTransId
               && loadLine.InventDimId != updateDimId
               && loadLine.WorkCreatedQty == 0;

        // Do some consoldiation method for loadLines so loadLines that were split because of inventDim are now summed together.

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateShipmentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method prevents the shipment from being updated in parent class.
    /// </summary>
    /// <param name="_shipmentId">
    /// The shipmentId of the shipment that is to be updated
    /// </param>
    protected void updateShipmentHeader(WHSShipmentId _shipmentId)
    {
        // Shipment header shouldn't need anything updated
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>