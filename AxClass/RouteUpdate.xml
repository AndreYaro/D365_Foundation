<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RouteUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RouteUpdate extends RunBase
{
    Integer             qty;
    recId               recId[,100];
    OprNum              oprNum[,100];
    OprNum              nextRec[,100];
    real                error[,100];
    real                acc[,100];
    boolean             ok[,100];
    boolean             isPrimary[];

    RouteLevel          level[,100];

    OprNum              primaryOprNum;
    OprNum              primaryNext;
    real                primaryError;

    RouteId             routeId;

    RecordSortedList    routeList;

    boolean             info;

    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList
        routeId,
        info
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog;
        dialog = super();
        dialog.addText("@SYS28601");
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    void insert(RouteMap routeMap)
    {
        if (routeMap.OprNum== 0)
        {
            setprefix(#prefixField(routeMap,oprNum));

            throw error("@SYS12382");
        }

        qty   += 1;
        recId[qty]        = routeMap.RecId;
        oprNum[qty]       = routeMap.OprNum;

        if (! routeMap.OprPriority)
        {
            primaryOprNum   = routeMap.OprNum;
            primaryNext     = routeMap.OprNumNext;
            primaryError    = routeMap.ErrorPct;

            isPrimary[qty]  = true;
        }
        else
        {
            isPrimary[qty] = false;

            if (routeMap.OprNum != primaryOprNum)
            {
                setprefix(#prefixField(routeMap,oprNum));

                throw error("@SYS17275");
            }
        }

        nextRec[qty]       = primaryNext;
        error[qty]         = primaryError;

        acc[qty]           = 1;
        level[qty]         = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>load</Name>
				<Source><![CDATA[
    protected void load()
    {
        Route route;
        qty   = 0;

        routeList = new RecordSortedList(tablenum(Route));

        routeList.sortOrder(fieldnum(Route,RecId));

        while select forupdate route
            index NumOprNumIdx
            where route.RouteId == routeId
        {
            this.insert(route);

            routeList.ins(route);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInfo</Name>
				<Source><![CDATA[
    boolean parmInfo(boolean _info = info)
    {
        info = _info;

        return info;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRouteId</Name>
				<Source><![CDATA[
    RouteId parmRouteId(RouteId _routeNum = routeId)
    {
        routeId     = _routeNum;

        return routeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        #OCCRetryCount
        if (! this.validate())
            throw error("@SYS18447");

        try
        {
            ttsbegin;

            this.load();

            if (qty)
            {
                if (!RouteParameters::find().Network)
                    this.setAutoNetwork();

                this.setLevel();
            }

            this.updateNow();
            this.updateFlag();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAutoNetwork</Name>
				<Source><![CDATA[
    void setAutoNetwork()
    {
        Integer          x = qty;

        OprNum          oprNumLocal;
        OprNum          nextOpr;

        nextRec[0] = 0;
        while (x > 0)
        {
            oprNumLocal = oprNum[x];
            nextRec[x]  = nextOpr;

            x -= 1;

            if (x > 0)
            {
                if (oprNum[x] != oprNumLocal)
                {
                    nextOpr  = oprNumLocal;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLevel</Name>
				<Source><![CDATA[
    void setLevel()
    {
        Integer         x;
        Integer         y;

        OprNum          oprNumPointZero;

        Integer         stackMax;
        Integer         stackNum[,100];
        real            stackAcc[,100];
        RouteLevel      stackLevel[,100];

        stackMax    = 0;
        x           = 0;
        while (x < qty)
        {
            x += 1;
            if (nextRec[x] == 0)
            {
                if (oprNumPointZero && oprNumPointZero != oprNum[x])
                    throw error("@SYS12261");

                stackMax+= 1;
                stackNum[stackMax]    = x;
                stackAcc[stackMax]    = 1;
                stackLevel[stackMax]  = 0;

                oprNumPointZero = oprNum[x];
            }
        }

        if (! stackMax)
        {
            throw error("@SYS14874");
        }

        x = 0;
        while (x < stackMax)
        {
            x += 1;

            acc[stackNum[x]]    = stackAcc[x] * (1 / (error[stackNum[x]] < 100 ? (100 - error[stackNum[x]]) / 100 : 1));
            level[stackNum[x]]  = stackLevel[x] + 1;
            ok[stackNum[x]]     = true;

            if (isPrimary[stackNum[x]])
            {
                y = 0;
                while (y < qty)
                {
                    y += 1;

                    if (nextRec[y] == oprNum[stackNum[x]] && level[y] == 0)
                    {
                        stackMax+= 1;
                        stackNum[stackMax]      = y;
                        stackAcc[stackMax]      = acc[stackNum[x]];
                        stackLevel[stackMax]    = level[stackNum[x]];
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer version = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFlag</Name>
				<Source><![CDATA[
    void updateFlag()
    {
        RouteTable routeTable= RouteTable::find(routeId,true);
        routeTable.CheckRoute= NoYes::No;
        routeTable.update();

        // If we make to here the route is ok
        if (info)
        {
            info(strfmt("@SYS27490",routeId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    void updateNow()
    {
        Route           route;

        Integer          x;

        while (x < qty)
        {
            x += 1;

            if (! ok[x])
            {
                throw error(strfmt("@SYS25611", oprNum[x]));
            }

            route.RecId = recId[x];

            routeList.find(route);

            route.AccError  = acc[x];
            route.OprNumNext= nextRec[x];
            route.Level     = level[x];

            route.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean  validate(Object _calledFrom = null)
    {
        if (! RouteTable::checkExist(routeId))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS22968";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        RouteUpdate routeUpdate;
        ProdRoute   prodRoute;
        RouteVersion   routeVersion;

        switch (args.dataset())
        {
            case tablenum(Route):
                routeUpdate = RouteUpdate::newRoute(args.record());
                break;

            case tablenum(ProdRoute):
                prodRoute = args.record();

                if (prodRoute.isTmp())
                {
                    routeUpdate = RouteUpdate::newRouteId(prodRoute.ProdId);
                }

                break;

            case tablenum(RouteVersion):
                routeVersion = args.record();
                routeUpdate = RouteUpdate::newRouteId(routeVersion.RouteId);
                break;
        }

        if (routeUpdate)
        {
            routeUpdate.parmInfo(true);
            if (routeUpdate.prompt())
            {
                using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContext(args))
                {
                    routeUpdate.runOperation();
                }

                if (args.caller())
                {
                    args.caller().doResearch();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newRoute</Name>
				<Source><![CDATA[
    static RouteUpdate newRoute(Route route)
    {
        RouteUpdate routeUpdate;
        routeUpdate = new RouteUpdate();
        routeUpdate.getLast();
        routeUpdate.parmRouteId(route.RouteId);
        routeUpdate.parmInfo(false);

        return routeUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newRouteId</Name>
				<Source><![CDATA[
    static RouteUpdate newRouteId(
        RouteId _routeId,
        boolean _getLast    = true,
        boolean _info       = false
        )
    {
        RouteUpdate routeUpdate;
        routeUpdate = new RouteUpdate();
        if (_getLast)
        {
            routeUpdate.getLast();
        }
        routeUpdate.parmRouteId(_routeId);
        routeUpdate.parmInfo(_info);

        return routeUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>