<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSPhysicalInventoryDataAccessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSPhysicalInventoryDataAccessor</c> class is the data access layer for physical Inventory.
/// </summary>
public static class WHSPhysicalInventoryDataAccessor
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getPhysicalItemCountOnLicensePlate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accesses item quantity information for a LicensePlate.
    /// </summary>
    /// <param name = "_licensePlateId">License Plate that is queried for its contents</param>
    /// <returns>Returns a <c>WHSPhysicalInventoryOnLicensePlate</c> object with:
    /// 1-The number of unique item types on the LicensePlate.
    /// 2-The id of the item if only 1 exists.
    /// 3-The number of physical inventory on a LicensePlate.
    /// 4-The unit symbol if a single itemId exists.</returns>
    public static final WHSPhysicalInventoryOnLicensePlate getPhysicalItemCountOnLicensePlate(WHSLicensePlateId _licensePlateId)
    {
        WHSPhysicalInventoryOnLicensePlate inventoryOnLicensePlate = WHSPhysicalInventoryOnLicensePlate::construct();

        if (_licensePlateId)
        {
            InventSum   inventSum;
            ItemId      itemId;
            Counter     itemIdCount;
            UnitOfMeasureSymbol unitSymbol;
            InventHandlingQty inventHandlingQty;

            if (InventUseDimOfInventSumToggle::instance().isEnabled())
            {
                while select sum(PhysicalInvent), sum(PdsCWPhysicalInvent), ItemId from inventSum
                group by ItemId
                where inventSum.PhysicalInvent > 0
                    && inventSum.ClosedQty == NoYes::No
                    && inventSum.LicensePlateId == _licensePlateId
                {
                    boolean isCWItem = PdsGlobal::pdsIsCWItem(inventSum.ItemId);
                    InventHandlingQty itemQty = isCWItem ? inventSum.PdsCWPhysicalInvent : inventSum.PhysicalInvent;

                    if (itemQty)
                    {
                        if (!itemId)
                        {
                            itemId = inventSum.ItemId;
                            unitSymbol = WHSCatchWeightHelper::inventHandlingUnitId(itemId);
                        }
                        else
                        {
                            itemId = "@WAX402";
                            unitSymbol = '';
                        
                        }
                        inventHandlingQty += itemQty;
                        itemIdCount++;
                    }
                }
            }
            else
            {
                InventDim   inventDim;

                while select sum(PhysicalInvent), sum(PdsCWPhysicalInvent) from inventSum
                group by ItemId
                where inventSum.PhysicalInvent > 0
                    && inventSum.ClosedQty == NoYes::No
                exists join inventDim
                    where inventDim.InventDimId == inventSum.InventDimId
                        && inventDim.LicensePlateId == _licensePlateId
                {
                    boolean isCWItem = PdsGlobal::pdsIsCWItem(inventSum.ItemId);
                    InventHandlingQty itemQty = isCWItem ? inventSum.PdsCWPhysicalInvent : inventSum.PhysicalInvent;

                    if (itemQty)
                    {
                        if (!itemId)
                        {
                            itemId = inventSum.ItemId;
                            unitSymbol = WHSCatchWeightHelper::inventHandlingUnitId(itemId);
                        }
                        else
                        {
                            itemId = "@WAX402";
                            unitSymbol = '';                        
                        }
                        inventHandlingQty += itemQty;
                        itemIdCount++;
                    }
                }
            }

            inventoryOnLicensePlate.parmItemIdCount(itemIdCount);
            inventoryOnLicensePlate.parmItemId(itemId);
            inventoryOnLicensePlate.parmInventQty(inventHandlingQty);
            inventoryOnLicensePlate.parmUnitOfMeasureSymbol(unitSymbol);
        }

        return inventoryOnLicensePlate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>