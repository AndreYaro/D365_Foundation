<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalCalendarsEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FiscalCalendarsEventHandler</c> class implements an event handler for the
/// <c>FiscalCalendars</c> class.
/// </summary>
class FiscalCalendarsEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dividePeriodPostHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handler for <c>dividePeriod</c> method.
    /// </summary>
    /// <param name = "_args">
    /// Pre post args.
    /// </param>
    [PostHandlerFor(classStr(FiscalCalendars), staticMethodStr(FiscalCalendars, dividePeriod))]
    public static void dividePeriodPostHandler(XppPrePostArgs _args)
    {
        FiscalCalendarRecId     calendarRecId           = _args.getArg('_calendarRecId');
        FiscalCalendarPeriod    fiscalCalendarPeriod    = _args.getArg('_fiscalCalendarPeriod');
        date                    newPeriodDate           = _args.getArg('_newPeriodDate');
        PeriodName              periodName              = _args.getArg('_periodName');

        // Updates the budget cycle ending period references.
        BudgetCycle::updateBudgetCycleEndingPeriodReferences(fiscalCalendarPeriod.RecId,
                            LedgerFiscalCalendar::findPeriodByPeriodCodeDate(
                                calendarRecId,
                                newPeriodDate,
                                FiscalPeriodType::Operating,
                                periodName).RecId);

        // <GIN>
        // If it is not IN country region code and the depreciation company act is not enabled but the FiscalCalendarPeriod_IN exists,
        // it will not be inserted automatically in the insert event handler of the FiscalCalendarPeriod.
        if (!AssetParameters::isDepreciationCompaniesActEnable_IN() && FiscalCalendarPeriod_IN::existByFiscalCalendarPeriod(fiscalCalendarPeriod.RecId))
        {
            FiscalCalendarPeriod    fiscalPeriodRight;
            FiscalCalendarPeriod_IN fiscalPeriod_IN;

            fiscalPeriodRight = FiscalCalendarPeriod::findByCalendarYear(
                periodName,
                fiscalCalendarPeriod.FiscalCalendarYear,
                newPeriodDate,
                fiscalCalendarPeriod.EndDate);

            if (fiscalPeriodRight.RecId && !FiscalCalendarPeriod_IN::existByFiscalCalendarPeriod(fiscalPeriodRight.RecId))
            {
                ttsbegin;
                fiscalPeriod_IN.FiscalCalendarPeriod = fiscalPeriodRight.RecId;
                fiscalPeriod_IN.Days = fiscalPeriodRight.EndDate - fiscalPeriodRight.StartDate + 1;
                fiscalPeriod_IN.insert();
                ttscommit;
            }
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDeleteYearPostHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handler for <c>validateDeleteYear</c> method.
    /// </summary>
    /// <param name = "_args">
    /// Pre post args.
    /// </param>
    [PostHandlerFor(classStr(FiscalCalendars), staticMethodStr(FiscalCalendars, validateDeleteYear))]
    public static void validateDeleteYearPostHandler(XppPrePostArgs _args)
    {
        FiscalCalendarYear              fiscalCalendarYear;
        FiscalCalendarYearRecId         calendarYearRecId = FiscalCalendarYear::findByCalendarYearName(_args.getArg('_calendarRecId'), _args.getArg('_fiscalYearName')).RecId;

        boolean returnValue = _args.getReturnValue();

        if (Ledger::fiscalCalendar(CompanyInfo::current()) == _args.getArg('_calendarRecId'))
        {
            if (TransactionFiscalCalendar::existUnpostedTransInYear(_args.getArg('_calendarRecId'), _args.getArg('_fiscalYearName')))
            {
                fiscalCalendarYear = FiscalCalendarYear::find(calendarYearRecId);
                returnValue = checkFailed(strFmt("@SYS127898",
                        _args.getArg('_fiscalYearName'),
                        fiscalCalendarYear.StartDate,
                        fiscalCalendarYear.EndDate));
            }
        }

        _args.setReturnValue(returnValue);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>