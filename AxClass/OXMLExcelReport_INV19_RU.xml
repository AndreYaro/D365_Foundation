<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OxmlExcelReport_INV19_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class prints unified form INV-19 to excel
/// </summary>
class OxmlExcelReport_INV19_RU extends XMLExcelReport_Standard_RU implements BatchRetryable, ERIReportPostProcessingWithPrintMgmtSupported
{
    XmlNodeList         xmlNodeListProlog,
                        xmlNodeListInCharge,
                        xmlNodeListInventTable,
                        xmlNodeListTotals,
                        xmlNodeListRegrading,
                        xmlNodeListTransDate;

    XMLNodeListIterator xmlNodeListPrologIterator,
                        xmlNodeListInChargeIterator,
                        xmlNodeListInventTableIterator,
                        xmlNodeListTotalsIterator,
                        xmlNodeListRegradingIterator,
                        xmlNodeListTransDateIterator;

    XmlDocument         xmlDocument;

    #InventJournalReport_CountColl_RU

    #define.Prolog('PROLOG')
    #define.underline2("_2")
    #define.width(38)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates totals
    /// </summary>
    /// <remarks>
    /// Not used since report totals calculated in XML creation
    /// </remarks>
    protected void addTotals()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTotalsOnPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates totals on page
    /// </summary>
    /// <remarks>
    /// Not used in this report
    /// </remarks>
    protected void addTotalsOnPage()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates height of body section
    /// </summary>
    /// <param name="_bookmark">
    /// Name of section
    /// </param>
    /// <returns>
    /// height of body section
    /// </returns>
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        XmlElement  eltInventTable = xmlNodeListInventTableIterator.value();

        return max(document.getNamedRangeHeightWrapped(#ItemName, eltInventTable.getAttribute(#ItemName)),
                   document.getNamedRangeHeightWrapped(#ItemId, eltInventTable.getAttribute(#ItemId)),
                   document.getNamedRangeHeightWrapped(#BOMUnitId, eltInventTable.getAttribute(#BOMUnitId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if report data correct
    /// </summary>
    /// <returns>
    /// true if report data correct
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean check()
    {
        if (xmlNodeListInventTable.length() == 0)
        {
            return checkFailed("@GLS101555");
        }

        if ((xmlNodeListProlog.length()    != 1) ||
            (xmlNodeListTransDate.length() != 1) ||
            (xmlNodeListTotals.length()    != 1))
        {
            return checkFailed(Error::wrongUseOfFunction(funcName()));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears totals
    /// </summary>
    /// <remarks>
    /// Not used since report totals calculated in XML creation
    /// </remarks>
    protected void clearTotals()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTotalsOnPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears totals on page
    /// </summary>
    /// <remarks>
    /// Not used in this report
    /// </remarks>
    protected void clearTotalsOnPage()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProlog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates prolog(title page) of this report
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createProlog()
    {
        this.addSection(#Prolog);

        this.execute(#Prolog);

        mapSections = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes report
    /// </summary>
    protected void createReport()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00123, funcName());

        widthCols = #width;

        curWorkSheetNum = 1;
        this.createProlog();

        curWorkSheetNum = 2;
        currentRow      = 0;
        this.createStandardReport();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves through iterator which corresponds to report header
    /// </summary>
    /// <returns>
    /// true, only one report printed at time
    /// </returns>
    protected boolean fetchHeader()
    {
        numOfLines = xmlNodeListInventTable.length();

        return !reportNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves through iterator which corresponds to report body
    /// </summary>
    /// <returns>
    /// true, if next line exists, otherwise false
    /// </returns>
    protected boolean fetchLines()
    {
        if (lineNo)
        {
            xmlNodeListInventTableIterator.next();
            xmlNodeListRegradingIterator.next();
        }

        return xmlNodeListInventTableIterator.more() && xmlNodeListRegradingIterator.more();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Name of the new file
    /// </summary>
    /// <returns>
    /// Name of the new file
    /// </returns>
    protected Filename fileName()
    {
        return 'INV_19';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    /// <summary>
    /// Postfix for a new file
    /// </summary>
    /// <returns>
    /// number of document and date of document
    /// </returns>
    protected Filename fileNamePostfix()
    {
        XmlElement elt  = xmlNodeListProlog.item(0);
        return elt.getAttribute(#DocumentNum) + '_' + strRem(elt.getAttribute(#DocumentDate), '/');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report file.
    /// </summary>
    /// <returns>
    /// The name of the report file.
    /// </returns>
    public str getReportFileName()
    {
        return this.excelFileName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report.
    /// </summary>
    /// <returns>
    /// The name of the report.
    /// </returns>
    public str getReportName()
    {
        return 'INV19';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills body section with data
    /// </summary>
    protected void fillBody()
    {
        XmlNamedNodeMap     nodeMap;
        XmlElement          elt;
        XmlAttribute        attr;
        int                 idx;
        ;

        elt = xmlNodeListInventTableIterator.value();
        nodeMap = elt.attributes();
        for (idx = 0; idx < nodeMap.length(); idx++)
        {
            attr = nodeMap.item(idx);
            this.insertValueToSection(attr.name(), attr.value());
        }

        elt = xmlNodeListRegradingIterator.value();
        nodeMap = elt.attributes();
        for (idx = 0; idx < nodeMap.length(); idx++)
        {
            attr = nodeMap.item(idx);
            this.insertValueToSection(attr.name(), attr.value());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    /// <summary>
    /// fills specified section with data
    /// </summary>
    /// <param name="_bookmark">
    /// Name of section
    /// </param>
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case #Prolog:
                this.fillProlog();
                break;
            default:
                super(_bookmark);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageFooter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills page footer section with data
    /// </summary>
    protected void fillPageFooter()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills page header section with data
    /// </summary>
    protected void fillPageHeader()
    {
        this.insertValueToSection('PageNum1', strFmt("@GLS100755", pageNum * 2));
        this.insertValueToSection('PageNum2', strFmt("@GLS100755", pageNum * 2 + 1));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillProlog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills prolog section with data
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillProlog()
    {
        XmlNamedNodeMap     nodeMap;
        XmlElement          elt;
        XmlAttribute        attr;
        int                 idx,
                            iteration;
        ;

        if ((xmlNodeListProlog.length() == 1))
        {
            elt = xmlNodeListPrologIterator.value();
            nodeMap = elt.attributes();
            for (idx = 0; idx < nodeMap.length(); idx++)
            {
                attr = nodeMap.item(idx);
                this.insertValueToSection(attr.name(), attr.value());
            }
        }

        while (xmlNodeListInChargeIterator.more() && iteration < 2)
        {
            iteration++;

            elt = xmlNodeListInChargeIterator.value();
            nodeMap = elt.attributes();
            for (idx = 0; idx < nodeMap.length(); idx++)
            {
                attr = nodeMap.item(idx);
                this.insertValueToSection(attr.name() + int2str(iteration), attr.value());
            }

            xmlNodeListInChargeIterator.next();
        }

        if ((xmlNodeListTransDate.length() == 1))
        {
            elt = xmlNodeListTransDateIterator.value();
            nodeMap = elt.attributes();
            for (idx = 0; idx < nodeMap.length(); idx++)
            {
                attr = nodeMap.item(idx);
                this.insertValueToSection(attr.name(), attr.value());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportFooter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report footer section with data
    /// </summary>
    protected void fillReportFooter()
    {
        XmlNamedNodeMap     nodeMap;
        XmlElement          elt;
        XmlAttribute        attr;
        int                 idx,
                            iteration;

        if (xmlNodeListTotals.length() == 1)
        {
            elt = xmlNodeListTotalsIterator.value();
            nodeMap = elt.attributes();
            for (idx = 0; idx < nodeMap.length(); idx++)
            {
                attr = nodeMap.item(idx);
                this.insertValueToSection(attr.name(), attr.value());
            }
        }

        xmlNodeListInChargeIterator = new XMLNodeListIterator(xmlNodeListInCharge);

        while (xmlNodeListInChargeIterator.more())
        {
            iteration++;

            elt = xmlNodeListInChargeIterator.value();
            nodeMap = elt.attributes();
            for (idx = 0; idx < nodeMap.length(); idx++)
            {
                attr = nodeMap.item(idx);
                this.insertValueToSection(attr.name() + #underline2 + int2str(iteration), attr.value());
            }

            xmlNodeListInChargeIterator.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report header section with data
    /// </summary>
    protected void fillReportHeader()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes report
    /// </summary>
    /// <returns>
    /// true, if report has correct structure
    /// </returns>
    public boolean init()
    {
        xmlDocument = XmlDocument::newXml(args.parm(), false);

        xmlNodeListProlog      = xmlDocument.getElementsByTagName(#PrologSection);
        xmlNodeListInventTable = xmlDocument.getElementsByTagName(#InventTableSection);
        xmlNodeListInCharge    = xmlDocument.getElementsByTagName(#InChargeSection);
        xmlNodeListTotals      = xmlDocument.getElementsByTagName(#TotalsSection);
        xmlNodeListRegrading   = xmlDocument.getElementsByTagName(#RegradingSection);
        xmlNodeListTransDate   = xmlDocument.getElementsByTagName(#TransDateSection);

        xmlNodeListPrologIterator        = new XMLNodeListIterator(xmlNodeListProlog);
        xmlNodeListInChargeIterator      = new XMLNodeListIterator(xmlNodeListInCharge);
        xmlNodeListInventTableIterator   = new XMLNodeListIterator(xmlNodeListInventTable);
        xmlNodeListTotalsIterator        = new XMLNodeListIterator(xmlNodeListTotals);
        xmlNodeListRegradingIterator     = new XMLNodeListIterator(xmlNodeListRegrading);
        xmlNodeListTransDateIterator     = new XMLNodeListIterator(xmlNodeListTransDate);

        return this.check();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRunHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes query for header
    /// </summary>
    /// <remarks>
    /// not used, since iterator are used
    /// </remarks>
    protected void initQueryRunHeader()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRunLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes query for lines
    /// </summary>
    /// <remarks>
    /// not used, since iterators are used
    /// </remarks>
    protected void initQueryRunLines()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSkipSections</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a list of report sections which should NOT be executed
    /// </summary>
    protected void initSkipSections()
    {
        skipSections = [reportHeaderName];
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns name of the working copy for report
    /// </summary>
    /// <returns>
    /// name of the working copy for report
    /// </returns>
    protected Filename templateName()
    {
        return resourceStr(INV19_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates number of cells to be filled with data
    /// </summary>
    /// <returns>
    /// Number of cells to be filled with data
    /// </returns>
    #define.cellsBody(32)
    #define.cellsOther(25)
    protected Counter totalCells()
    {
        return #cellsBody * xmlNodeListInventTable.length() + #cellsOther;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static OXMLExcelReport_INV19_RU construct()
    {
        return new OXMLExcelReport_INV19_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>