<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationSalesParmTableDataPersistence</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationSalesParmTableDataPersistence</c> class persists data to <c>SalesParmTable</c>, etc.
/// </summary>
[TaxIntegrationDataPersistence(tableStr(SalesParmTable))]
public class TaxIntegrationSalesParmTableDataPersistence
    extends TaxIntegrationSalesTableDataPersistence
{
    protected SalesParmTable salesParmTable;
    protected SalesParmLine salesParmLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDocumentQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the document.
    /// </summary>
    /// <returns>The query for the document.</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentQueryObject()
    {
        if (TaxIntegrationConstructWithSourceRecordFlight::instance().isEnabled() && document.getLocalRecord())
        {
            salesParmTable = document.getLocalRecord();
            salesParmTable.selectForUpdate(true);
            return SysDaQueryObjectBuilder::from(this.salesTable)
                .forUpdate()
                .where(this.salesTable, fieldStr(SalesTable, SalesId))
                    .isEqualToLiteral(this.salesParmTable.SalesId)
                .toSysDaQueryObject();
        }
        else
        {
            return SysDaQueryObjectBuilder::from(this.salesParmTable)
                .where(this.salesParmTable, fieldStr(SalesParmTable, RecId))
                    .isEqualToLiteral(this.document.getLocalRecId())
                .innerJoin(this.salesTable) // alternate key
                    .forUpdate()
                    .where(this.salesTable, fieldStr(SalesTable, SalesId))
                        .isEqualTo(this.salesParmTable, fieldStr(SalesParmTable, SalesId))
                .toSysDaQueryObject();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the lines of the document.
    /// </summary>
    /// <returns>The query for the lines of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getLineQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.salesParmLine)
            .forUpdate()
            .where(this.salesParmLine, fieldStr(SalesParmLine, ParmId))
                .isEqualToLiteral(this.salesParmTable.ParmId)
            .where(this.salesParmLine, fieldStr(SalesParmLine, TableRefId))
                .isEqualToLiteral(this.salesParmTable.TableRefId)
            .innerJoin(this.salesLine) // primary key
                .forUpdate()
                .where(this.salesLine, fieldStr(SalesLine, RecId))
                    .isEqualTo(this.salesParmLine, fieldStr(SalesParmLine, SalesLineRecId))
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of the document.
    /// </summary>
    /// <returns>The query for the charges of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentChargeQueryObject()
    {
        SalesParmSubTable salesParmSubTable;
        SalesTable salesTableLoc;

        // Multiple sales orders can be selected and posted in one invoice at Accounts receivable > Invoices > Batch invoicing > invoice.
        // It will group multiple sales orders in one parm table, then all sales orders are sent in one document and share the same header.
        // There is an issue when different sales orders get different header configurations. This is the same design as core tax.
        // To find MarkupTrans of all SalesTables, follow the same design with SalesCalcTax_parmTrans.nextMarkupLine().
        // Find SalesParmSubTable by SalesParmTable, find SalesTable by SalesParmSubTable and finally find MarkupTrans by SalesTable.
        SysDaQueryObjectBuilder queryObjectBuilder;
        queryObjectBuilder = SysDaQueryObjectBuilder::from(this.markupTransOfDocument)
            .forUpdate()
            .innerJoin(salesTableloc)
                .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransTableId))
                    .isEqualTo(salesTableLoc, fieldStr(SalesTable, TableId))
                .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransRecId))
                    .isEqualTo(salesTableLoc, fieldStr(SalesTable, RecId));

        queryObjectBuilder.existsJoin(salesParmSubTable)
            .where(salesTableLoc, fieldStr(SalesTable, SalesId))
                .isEqualTo(salesParmSubTable, fieldStr(SalesParmSubTable, OrigSalesId))
            .where(salesParmSubTable, fieldStr(SalesParmSubTable, TableRefId))
                .isEqualToLiteral(this.salesParmTable.TableRefId)
            .where(salesParmSubTable, fieldStr(SalesParmSubTable, ParmId))
                .isEqualToLiteral(this.salesParmTable.ParmId);

        return queryObjectBuilder.toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the current line of the document.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    /// <returns>true if the operation is successful; otherwise, false.</returns>
    protected boolean saveLine(TaxIntegrationLineObject _line)
    {
        if (TaxIntegrationUpdateSalesLineFlight::instance().isEnabled())
        {
            super(_line);
        }

        Sign sign = _line.getAncestorDocument().getSign();
        AmountCur baseAmount = _line.getBaseAmount() * sign;

        if (baseAmount != salesParmLine.LineAmountExcludeTax)
        {
            salesParmLine.LineAmountExcludeTax = baseAmount;
            salesParmLine.doUpdate();
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>