<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeBLWIChangeCode</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TradeBLWIChangeCode extends RunBase
{
    DialogField       dialogCurrentCode;
    DialogField       dialogNewCode;

    BankCentralBankPurposeCode currentCode;
    BankCentralBankPurposeCode newCode;

    recId                  recId;
    recId                  refRecId;
    TradeBLWITypeOfForm    formName;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        Dialog dialog = new DialogRunbase("@SYS92175", this);

        dialogCurrentCode = dialog.addFieldValue(extendedtypestr(BankCentralBankPurposeCode), currentCode, "@SYS92189");
        dialogCurrentCode.enabled(false);
        dialogNewCode     = dialog.addFieldValue(extendedtypestr(BankCentralBankPurposeCode), currentCode, "@SYS92190");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromFormName</Name>
				<Source><![CDATA[
    public void fromFormName(TradeBLWITypeOfForm _formName = formName)
    {
        formName = _formName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        currentCode = dialogCurrentCode.value();
        newCode = dialogNewCode.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentCode</Name>
				<Source><![CDATA[
    public BankCentralBankPurposeCode parmCurrentCode(BankCentralBankPurposeCode _currentCode = currentCode)
    {
        currentCode = _currentCode;
        return currentCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewCode</Name>
				<Source><![CDATA[
    public BankCentralBankPurposeCode parmNewCode(BankCentralBankPurposeCode _newCode = newCode)
    {
        newCode = _newCode;
        return newCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecId</Name>
				<Source><![CDATA[
    public recId parmRecId(recId _recId = recId)
    {
        recId = _recId;
        return recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refRecID</Name>
				<Source><![CDATA[
    public void refRecID(recId _refRecID = refRecID)
    {
        refRecID = _refRecID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        TradeBLWIJournalPurposeCodes journalPurposeCodes;

        super();

        ttsbegin;

        if (recId)
        {
            if (currentCode != newCode)
            {
                journalPurposeCodes = TradeBLWIJournalPurposeCodes::find(recId, true);
                journalPurposeCodes.PurposeCode = newCode;
                journalPurposeCodes.update();

                if (refRecId)
                {
                    this.createOrUpdateCustomerRecord(refRecId);
                }
            }
        }
        else if (refRecID)
        {
            journalPurposeCodes.PurposeCode = newCode;
            journalPurposeCodes.RefRecId = refRecID;
            journalPurposeCodes.TypeOfForm = formName;
            journalPurposeCodes.insert();

            this.createOrUpdateCustomerRecord(refRecId);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateCustomerRecord</Name>
				<Source><![CDATA[
    private void createOrUpdateCustomerRecord(RefRecId _refRecId)
    {
        if (formName == TradeBLWITypeOfForm::CustFreeInvoice)
        {
            TradeBLWIJournalPurposeCodes::createRecord(
                TradeBLWICustVend::Customer,
                CustInvoiceTable::findRecId(_refRecId).custInvoiceJour().RecId,
                '',
                TradeBLWITypeOfForm::CustInvoiceJour,
                0,
                newCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        ret = super(_calledFrom);

        if (newCode && !BankCentralBankPurpose::exist(newCode))
        {
            ret = checkFailed(strfmt("@SYS31594", newCode, tableid2pname(tablenum(BankCentralBankPurpose))));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TradeBLWIChangeCode construct()
    {
        return new TradeBLWIChangeCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        TradeBLWIChangeCode          changeCode = TradeBLWIChangeCode::construct();
        TradeBLWIJournalPurposeCodes journalPurposeCodes;
        TradeBLWITypeOfForm          typeOfForm;

        if (!_args || _args.parmEnumType() != enumNum(TradeBLWITypeOfForm))
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        typeOfForm = _args.parmEnum();

        journalPurposeCodes = TradeBLWIJournalPurposeCodes::findByTypeOfFormRefRecId(_args.record().RecId, typeOfForm);

        changeCode.parmRecId(journalPurposeCodes.RecId);
        changeCode.refRecID(_args.record().RecId);
        changeCode.fromFormName(typeOfForm);
        changeCode.parmCurrentCode(journalPurposeCodes.PurposeCode);

        if (changeCode.prompt())
        {
            changeCode.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>