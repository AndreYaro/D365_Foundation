<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayNDFL2File</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayNDFL2File extends RunBaseBatch implements BatchRetryable
{
    RPayTaxListTable    rPayTaxListTable;
    CompanyInfo         companyInfo;
    XMLDocument         xmlDoc;
    XMLElement          xmlLevel_Document;
    str                 fileGUID;
    TransDate           fileDate;
    FileName            reportName;
    GniCode_RU          taxAuthorityCode;
    Counter             maxFileRecords;
    FilePath            filePath;
    boolean             newDocument, newFile;
    boolean             taxByBranch;
    GniCode_RU          taxAuthorityTo, taxAuthorityEventual;
    INN_RU              inn;
    KPPU_RU             kpp, kppBranch;
    OKATO_RU            okato;
    Phone               phone;
    Name                name;

    SysOperationProgress    operationProgress;

    #File
    #define.Prefix('NO_NDFL2')
    #define.Underline('_')
    #define.paymentYear(2011)

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        rPayTaxListTable
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>appendXMLElement</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected XMLElement appendXMLElement(XMLElement _toXmlElement, str _elementName)
    {
        XMLElement  xmlElement;

        xmlElement = xmlDoc.createElement(_elementName);
        _toXmlElement.appendChild(xmlElement);

        return xmlElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkData</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkData()
    {
        RPayTaxListTrans rPayTaxListTrans;
        boolean ret = true;

        select count(RecId) from rPayTaxListTrans
            where rPayTaxListTrans.tableRecId == rPayTaxListTable.recId;

        RPayTaxIncomeGroupTable::checkTaxAuthority();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected FileName fileName(boolean _update = false)
    {
        FileName         fileName;
        RPayTaxListTable rPayTaxListTableLocal;

        fileGUID = strupr(WinApi::createGUID());
        fileDate = rPayTaxListTable.TransDate;

        reportName = #Prefix                                               + #Underline +
                   taxAuthorityTo                                          + #Underline +
                   taxAuthorityEventual                                    + #Underline +
                   inn + kpp                                               + #Underline +
                   stralpha(date2str(fileDate, 321, 2, 2, 2, 2, 4, DateFlags::None))        + #Underline +
                   fileGUID;

        fileName = reportName + strupr(#xml);
        fileName = filePath + #FilePathDelimiter + fileName;

        if (_update)
        {
            rPayTaxListTableLocal.skipDataMethods(true);
            update_recordset rPayTaxListTableLocal setting FileName = fileName
                where rPayTaxListTableLocal.RecId == rPayTaxListTable.RecId;
        }

        return fileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillAddress</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillAddress(RHRMEmplTable _emplTable, RPayTaxListTrans _taxListTrans, XMLElement _element)
    {
        RPayTaxNDFLReportData   reportData;
        XMLElement              addressElement;
        #define.blank(' ')

        reportData = RPayTaxNDFLReportData::construct(_emplTable.EmployeeId,
                                                      rPayTaxListTable.PayPeriod,
                                                      rPayTaxListTable.TransDate,
                                                      rPayTaxListTable.SelectEmplType,
                                                      rPayTaxListTable.ReportType);

        if (reportData.isRuAddress())
        {
            addressElement = this.appendXMLElement(_element, 'АдрМЖРФ');
            if (reportData.ZipCode())
            {
                addressElement.setAttribute('Индекс',   reportData.ZipCode());
            }

            addressElement.setAttribute('КодРегион',    reportData.state());

            if (strrem(reportData.countyName(), #blank))
            {
                addressElement.setAttribute('Район',        reportData.countyName());
            }

            if (strrem(reportData.townName(), #blank))
            {
                addressElement.setAttribute('Город',        reportData.townName());
            }

            if (strrem(reportData.settlementName(), #blank))
            {
                addressElement.setAttribute('НаселПункт',   reportData.settlementName());
            }

            if (strrem(reportData.streetName(), #blank))
            {
                addressElement.setAttribute('Улица',        reportData.streetName());
            }

            if (reportData.estate())
            {
                addressElement.setAttribute('Дом',          reportData.estate());
            }

            if (reportData.building())
            {
                addressElement.setAttribute('Корпус',       reportData.building());
            }

            if (reportData.flat())
            {
                addressElement.setAttribute('Кварт',        reportData.flat());
            }
        }

        if (reportData.isForeignAddress(_taxListTrans.TaxStatus))
        {
            addressElement = this.appendXMLElement(_element, 'АдрИНО');
            addressElement.setAttribute('КодСтр',   reportData.OKSMCode());
            addressElement.setAttribute('АдрТекст', reportData.foreignAddress());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDocument</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillDocument(RPayTaxListTrans    _rPayTaxListTrans, XMLElement _headerElement)
    {
        XMLElement              xmlLevel_3, xmlLevel_4, xmlLevel_5, xmlLevel_6;
        container               con, conItem, reportValues;
        RHRMEmplTable           emplTable;
        RHRMPersonTable         personTable;
        RPayTaxParameters       rPayTaxParameters = RpayTaxParameters::find();
        RPayRateValue           rateValue;
        Map                     map;
        MapEnumerator           mapEnumerator;
        RPayTaxReportValue      rPayTaxReportValue;
        int                     i;
        RPayAmount              currentValue;
        DirPersonName           dirPersonName;
        ReportPeriod_RU         currentIncomePeriod;
        RpayTaxIncDedCode       currentIncomeCode;
        RPayTaxIncomeGroupTable incomeGroupTable;
        INN_RU                  EmplINN;
        RPayRateCallContext     rateContext;

        str 20 convertCode(int _code)
        {
            return (_code ? int2str(_code) : '');
        }

        str roundTaxAmount(RPayAmount _amount)
        {
            if (frac(rPayTaxParameters.TaxRound))
            {
                return num2str(_amount,0,2,1,0);
            }
            else
            {
                return num2str(_amount,0,0,1,0);
            }
        }

        str roundAmount(RPayAmount _amount)
        {
            return num2str(_amount, 0, 2, 1, 0);
        }

        RPayAmount roundTaxAmount_real(RPayAmount _amount)
        {
            return round(_amount, rPayTaxParameters.TaxRound);
        }

        emplTable     = RHRMEmplTable::find(_rpayTaxListTrans.emplId);
        personTable   = emplTable.personTable();
        dirPersonName = personTable.dirPersonName();

        select firstonly incomeGroupTable
            where incomeGroupTable.EmplTaxStatus == _rPayTaxListTrans.TaxStatus &&
                 (incomeGroupTable.RateCode      == _rPayTaxListTrans.TaxRateCode ||
                  incomeGroupTable.RateCodeGroup == _rPayTaxListTrans.TaxRateCode);

        if (newDocument)
        {
            xmlLevel_Document = this.appendXMLElement(_headerElement, 'Документ');
            xmlLevel_Document.setAttribute('КНД', '1151078');
            xmlLevel_Document.setAttribute('ДатаДок',  date2str(rPayTaxListTable.TransDate, 123, 2, 2, 2, 2, 4, DateFlags::None));
            xmlLevel_Document.setAttribute('ОтчетГод', int2str(year(rPayTaxListTable.PayPeriod)));
            xmlLevel_Document.setAttribute('НомСпр',   int2str(_rPayTaxListTrans.ReferenceNumber));
            xmlLevel_Document.setAttribute('Признак',  int2str(_rPayTaxListTrans.ReportSign));
            xmlLevel_Document.setAttribute('КодНО',    taxAuthorityEventual);

            xmlLevel_3 = this.appendXMLElement(xmlLevel_Document, 'СвНА');
            xmlLevel_3.setAttribute('ОКТМО', okato);
            if (phone)
            {
                xmlLevel_3.setAttribute('Тлф',   phone);
            }

            xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'СвНАЮЛ');
            xmlLevel_4.setAttribute('НаимОрг', name);
            xmlLevel_4.setAttribute('ИННЮЛ',   inn);
            xmlLevel_4.setAttribute('КПП',     kppBranch);

            xmlLevel_3 = this.appendXMLElement(xmlLevel_Document, 'ПолучДох');
            EmplINN    = emplTable.payINN(rPayTaxListTable.TransDate);
            if (inn)
            {
                xmlLevel_3.setAttribute('ИННФЛ', EmplINN);
            }

            xmlLevel_3.setAttribute('Статус',   int2str(RPayTaxReportValue::emplTaxStatus2ReportStatus(_rPayTaxListTrans.TaxStatus)));
            xmlLevel_3.setAttribute('ДатаРожд', date2str(personTable.hcmPersonPrivateDetails().BirthDate, 123, 2, 2, 2, 2, 4, DateFlags::None));
            xmlLevel_3.setAttribute('Гражд',    personTable.citizenshipCountryRegion(DateTimeUtil::date(DateTimeUtil::newDateTime(rPayTaxListTable.TransDate, 0))).OKSMCode_RU);

            xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'ФИО');
            xmlLevel_4.setAttribute('Фамилия',  dirPersonName.lastName);
            xmlLevel_4.setAttribute('Имя',      dirPersonName.firstName);
            if (dirPersonName.middleName)
            {
                xmlLevel_4.setAttribute('Отчество', dirPersonName.middleName);
            }

            xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'УдЛичнФЛ');
            xmlLevel_4.setAttribute('КодУдЛичн',  personTable.identityCardTable_RU().IdentityCardCode);
            xmlLevel_4.setAttribute('СерНомДок',  personTable.IdentityCardSeries + ' ' + personTable.identityCardNumber);

            this.fillAddress(emplTable, _rPaytaxListTrans, xmlLevel_3);
        }
        xmlLevel_3 = this.appendXMLElement(xmlLevel_Document, 'СведДох');
        rateContext = RPayRateCallContext::construct(rPayTaxListTable.PayPeriod, emplTable.EmployeeId);
        rateValue = RPayRateTable::find(_rPayTaxListTrans.TaxRateCode).GetValue(rateContext);
        xmlLevel_3.setAttribute('Ставка', frac(rateValue) ? roundAmount(rateValue) : int2str(real2int(rateValue)));

        xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'ДохВыч');

        rpayTaxReportValue = new RpayTaxReportValue(
            emplTable.EmployeeId,
            endMth(rPayTaxListTable.PayPeriod),
            0,
            taxByBranch,
            rPayTaxListTable.TransDate,
            endMth(rPayTaxListTable.PayPeriod));

        if (_rPayTaxListTrans.ReportSign == 2)
        {
            map = rpayTaxReportValue.getReversedIncDedByMonthBranch(_rPayTaxListTrans.TaxRateCode, _rPaytaxListTrans.BranchId, _rPaytaxListTrans.IncomeSum);
        }
        else
        {
            map = rpayTaxReportValue.getIncDedByMonthBranch(_rPayTaxListTrans.TaxRateCode, _rPaytaxListTrans.BranchId);
        }

        if (map.elements())
        {
            mapEnumerator = map.getEnumerator();

            currentIncomePeriod = datenull();
            currentIncomeCode   = 0;

            while (mapEnumerator.moveNext())
            {
                con     = mapEnumerator.currentKey();
                conItem = mapEnumerator.currentValue();
                if (currentIncomePeriod != conpeek(con, 1) || currentIncomeCode   != conpeek(con, 2))
                {
                    xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'СвСумДох');
                    xmlLevel_5.setAttribute('Месяц', mthofyr(conPeek(con, 1)) < 10 ? '0' + int2str(mthofyr(conPeek(con, 1))) : int2str(mthofyr(conPeek(con, 1))));
                    xmlLevel_5.setAttribute('КодДоход', convertCode(conPeek(con, 2)));
                    xmlLevel_5.setAttribute('СумДоход', roundAmount(conPeek(conItem, 1)));
                }

                if (conPeek(con, 3))
                {
                    xmlLevel_6 = this.appendXMLElement(xmlLevel_5, 'СвСумВыч');
                    xmlLevel_6.setAttribute('КодВычет', convertCode(conPeek(con, 3)));
                    xmlLevel_6.setAttribute('СумВычет', roundAmount(conPeek(conItem, 2)));
                }

                currentIncomePeriod = conpeek(con, 1);
                currentIncomeCode   = conpeek(con, 2);
            }
        }

        if (_rPayTaxListTrans.ReportSign != 2)
        {
            con = rpayTaxReportValue.getDeductionByCodeBranch(_rPayTaxListTrans.TaxRateCode, _rPayTaxListTrans.BranchId);

            if (conlen(con))
            {
                xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'НалВычССИ');

                for (i = 1; i <= conlen(con); i++)
                {
                    conItem = conpeek(con, i);
                    xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'ПредВычССИ');
                    xmlLevel_5.setAttribute('КодВычет', convertCode(conPeek(conItem, 1)));
                    xmlLevel_5.setAttribute('СумВычет', roundAmount(conPeek(conItem, 2)));
                }

                con          = rpayTaxReportValue.getAssessedDeductionDocument();
                currentValue = rpayTaxReportValue.getAssessedDeductionAmount(incomeGroupTable.RpayTaxIncomeGroupCode);
                if (currentValue)
                {
                    xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'УведИмущВыч');
                    xmlLevel_5.setAttribute('НомерУвед', conpeek(con, 2));
                    if (conpeek(con, 1) != datenull())
                    {
                        xmlLevel_5.setAttribute('ДатаУвед', date2str(conpeek(con, 1), 123, 2, 2, 2, 2, 4, DateFlags::None));
                    }
                    xmlLevel_5.setAttribute('ИФНСУвед', personTable.PayGniCode);
                }
            }
        }

        reportValues = RPayTaxReportValue::getTotalAmounts(emplTable.EmployeeId,
                                                           _rPayTaxListTrans.TaxRateCode,
                                                           _rPayTaxListTrans.BranchId,
                                                           rPayTaxListTable.PayPeriod,
                                                           rPayTaxListTable.TransDate,
                                                           endmth(dateStartYr(rPayTaxListTable.PayPeriod)),
                                                           false,
                                                           false,
                                                           taxByBranch);

        xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'СГДНалПер');
        xmlLevel_4.setAttribute('СумДохОбщ',   roundAmount(_rPayTaxListTrans.IncomeSum));
        if (_rPayTaxListTrans.ReportSign == 2)
        {
            xmlLevel_4.setAttribute('НалБаза', roundAmount(_rPayTaxListTrans.IncomeSum));
        }
        else
        {
            xmlLevel_4.setAttribute('НалБаза', roundAmount(conpeek(reportValues, 2)));
        }
        xmlLevel_4.setAttribute('НалИсчисл',   roundTaxAmount(_rPayTaxListTrans.AddTaxSum));

        if (_rPayTaxListTrans.ReportSign != 2)
        {
            xmlLevel_4.setAttribute('НалУдерж',    roundTaxAmount(_rPayTaxListTrans.TaxSum));
            if (year(rPayTaxListTable.PayPeriod) >= #paymentYear)
            {
                xmlLevel_4.setAttribute('НалПеречисл', roundTaxAmount(_rPayTaxListTrans.BudgetTransferedTaxAmount));
            }
            xmlLevel_4.setAttribute('НалУдержЛиш', roundTaxAmount(conpeek(reportValues, 6)));
        }
        xmlLevel_4.setAttribute('НалНеУдерж',  roundTaxAmount(conpeek(reportValues, 7)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRegInfo</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void initRegInfo(RPayTaxListTrans _rPayTaxListTrans, date regInfoDate)
    {
        boolean         ret = true;
        VendTable       vendTable;

        vendTable               = VendTable::find(Branches_RU::find(_rPayTaxListTrans.BranchId).VendAccount);
        taxAuthorityTo          = _rPayTaxListTrans.BranchId ? TaxAuthorityAddress::find(rPayTaxListTable.TaxAuthority).GniCode_RU          : taxAuthorityCode;
        taxAuthorityEventual    = _rPayTaxListTrans.BranchId ? TaxAuthorityAddress::find(rPayTaxListTable.EventualTaxAuthority).GniCode_RU  : taxAuthorityCode;

        kppBranch               = _rPayTaxListTrans.BranchId ? vendTable.partyKPPasOfDate_RU(regInfoDate)                                   : companyInfo.partyKPPasOfDate_RU(regInfoDate);

        if (rPayTaxListTable.Presentation == RPayTaxPresentation::ToPrimaryIFNS)
        {
            kpp  = companyInfo.partyKPPasOfDate_RU(regInfoDate);
        }
        else
        {
            kpp  = kppBranch;
        }

        inn      = _rPayTaxListTrans.BranchId ? vendTable.partyINNasOfDate_RU(regInfoDate)    : companyInfo.partyINNasOfDate_RU(regInfoDate);
        okato    = _rPayTaxListTrans.BranchId ? vendTable.partyOKATOasOfDate_RU(regInfoDate)  : CompanyInfoHelper::partyOKATOasOfDate_RU(companyInfo, regInfoDate);
        phone    = _rPayTaxListTrans.BranchId ? vendTable.phone()                             : companyInfo.phone();
        name     = _rPayTaxListTrans.BranchId ? vendTable.Name()                              : companyInfo.Name();

        if (! taxAuthorityTo || ! taxAuthorityEventual)
        {
            ret = checkFailed("@RUP3248");
        }

        if (! inn)
        {
            ret = checkFailed("@RUP3499");
        }

        if (! kpp)
        {
            ret = checkFailed("@RUP3500");
        }

        if (! ret)
        {
            throw error("@GLS101992");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertHeader</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected XMLElement insertHeader(RPayTaxListTrans    _rPayTaxListTrans)
    {
        XMLElement xmlLevel_1, xmlLevel_2, xmlLevel_3;

        xmlDoc = XMLDocument::newXML('<?xml version="1.0" encoding = "windows-1251"?>\n' +
                                     '<Файл xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" ' +
                                     'ВерсПрог="' + xInfo::productName()+ '"\n' +
                                     'ВерсФорм="5.3"' + '\n' +
                                     'ИдФайл="' + reportName +'">\n' +
                                     '</Файл>\n', true);
        xmlLevel_1 = xmlDoc.documentElement();

        xmlLevel_2 = this.appendXMLElement(xmlLevel_1, 'СвРекв');
        xmlLevel_2.setAttribute('ОтчетГод', int2str(year(rPayTaxListTable.PayPeriod)));
        xmlLevel_2.setAttribute('ОКТМО', okato);
        xmlLevel_2.setAttribute('ПризнакФ', int2str(_rPayTaxListTrans.ReportSign));

        xmlLevel_3 = this.appendXMLElement(xmlLevel_2, 'СвЮЛ');
        xmlLevel_3.setAttribute('КПП', kpp);
        xmlLevel_3.setAttribute('ИННЮЛ', inn);

        return xmlLevel_1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        companyInfo = CompanyInfo::find();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRPayTaxListTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public rPayTaxListTable parmRPayTaxListTable(RPayTaxListTable _rPayTaxListTable = rPayTaxListTable)
    {
        rPayTaxListTable = _rPayTaxListTable;
        return rPayTaxListTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RPayTaxListTrans        rPayTaxListTrans;
        RPayTaxListTable        rPayTaxListTableLocal;
        RPayTaxListTransDetails transDetails;
        XMLElement          headerElement;
        FileName            fileName;
        Counter             recordNum, listNum, signTypeCnt, branchesCnt, recordsCnt;
        FileName            directoryName;
        Integer             lastReportSign;
        Set                 docQtySum;
        Integer             lastReference;
        BranchId_RU         lastBranchId;

        if (this.checkData())
        {
            taxAuthorityCode = this.taxAuthorityCode();
            maxFileRecords   = real2int(RPayRateTable::find(RPayTaxParameters::find().MaxDocPerFile).getValue(RPayRateCallContext::construct(rPayTaxListTable.PayPeriod)));
            taxByBranch      = rPayTaxListTable.Presentation != rPayTaxPresentation::ToPrimaryIFNS;

            if (maxFileRecords <= 0)
            {
                warning("@RUP3249");
                maxFileRecords   = maxInt();
            }

            while select rPayTaxListTrans
                group by reportSign
                where rPayTaxListTrans.tableRecId == rPayTaxListTable.recId
            {
                signTypeCnt++;
            }

            while select rPayTaxListTrans
                group by BranchId
                where rPayTaxListTrans.tableRecId == rPayTaxListTable.recId
            {
                branchesCnt++;
            }

            while select count(RecId) from rPayTaxListTrans
                group by BranchId
                where rPayTaxListTrans.tableRecId == rPayTaxListTable.recId
            {
                recordsCnt = max(recordsCnt, any2int(rPayTaxListTrans.RecId));
            }

            if (recordsCnt > maxFileRecords || signTypeCnt > 1 || branchesCnt > 1)
            {
                directoryName = strupr(WinApi::createGUID());
                filePath      = rpayTaxListTable.filePath + #FilePathDelimiter + directoryName;
                try
                {
                    Winapi::createDirectory(filePath);
                    listNum     = 1;
                    docQtySum   = new Set(Types::Integer);
                }
                catch (Exception::CLRError)
                {
                    throw error(AifUtil::getClrErrorMessage());
                }
            }
            else
            {
                filePath = rpayTaxListTable.filePath;
            }

             select count(RecId) from rPayTaxListTrans
                where rPayTaxListTrans.tableRecId == rPayTaxListTable.recId;

            operationProgress = new SysOperationProgress();
            operationProgress.setCaption("@RUP740");
            operationProgress.setAnimation(#AviFormLetter);
            operationProgress.setTotal(rPayTaxListTrans.recId);

            ttsbegin;

            if (listNum)
            {
                delete_from transDetails
                    where transDetails.ListTableRecId == rPayTaxListTable.RecId;

                update_recordset rPayTaxListTrans setting DetailsRefRecId = 0
                    where rPayTaxListTrans.TableRecId == rPayTaxListTable.RecId;

                rPayTaxListTableLocal.skipDataMethods(true);
                update_recordset rPayTaxListTableLocal setting FileName = filePath
                    where rPayTaxListTableLocal.RecId == rPayTaxListTable.RecId;
            }

            while select forupdate rPayTaxListTrans
                order by BranchId, reportSign, referenceNumber, EmplId
                where rPayTaxListTrans.TableRecId == rPayTaxListTable.RecId
            {
                operationProgress.setText("@RUP372" + rPayTaxListTrans.EmplId);
                operationProgress.setCount(recordNum);

                if (rPayTaxListTrans.ReportSign == 2 &&
                    !rPayTaxListTrans.isNotZeroTrans())
                {
                    continue;
                }

                newDocument = rPayTaxListTrans.ReportSign      != lastReportSign ||
                              rPayTaxListTrans.ReferenceNumber != lastReference  ||
                              rPayTaxListTrans.BranchId        != lastBranchId;

                if ((recordNum mod maxFileRecords)  == 0              ||
                    rPayTaxListTrans.ReportSign     != lastReportSign ||
                    rPayTaxListTrans.BranchId       != lastBranchId)
                {
                    if (xmlDoc)
                    {
                        xmlDoc.save(fileName);
                        xmlDoc = null;
                        ++listNum;

                        if (transDetails.RecId)
                        {
                            transDetails.DocumentQty = docQtySum.elements();
                            transDetails.update();
                        }
                    }

                    this.initRegInfo(rPayTaxListTrans, rPayTaxListTable.PayPeriod);
                    fileName = this.fileName(!directoryName);

                    if (fileName)
                    {
                        headerElement = this.insertHeader(rPayTaxListTrans);
                        newFile = true;

                        if (listNum)
                        {
                            transDetails.initValue();
                            transDetails.Filename       = fileName;
                            transDetails.ListAddNum     = listNum;
                            transDetails.ListTableRecId = rPayTaxListTable.RecId;
                            transDetails.EmplSign       = rPayTaxListTrans.ReportSign;
                            transDetails.insert();
                        }
                        lastReportSign = rPayTaxListTrans.ReportSign;
                        lastBranchId   = rPayTaxListTrans.BranchId;
                        recordNum      = 0;
                        docQtySum      = new Set(Types::Integer);
                    }
                }

                this.fillDocument(rPayTaxListTrans, headerElement);
                newFile       = false;
                lastReference = rPayTaxListTrans.ReferenceNumber;

                if (transDetails.RecId)
                {
                    rPayTaxListTrans.DetailsRefRecId = transDetails.RecId;
                    rPayTaxListTrans.doupdate();
                }

                recordNum++;

                if (transDetails.RecId)
                {
                    docQtySum.add(rPayTaxListTrans.ReferenceNumber);
                }
            }

            if (xmlDoc)
            {
                xmlDoc.save(fileName);
                xmlDoc = null;
                if (transDetails.RecId)
                {
                    transDetails.DocumentQty = docQtySum.elements();
                    transDetails.doupdate();
                }
            }
            ttscommit;

            if (listNum > 1)
            {
                info("@RUP3393");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAuthorityCode</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected GniCode_RU taxAuthorityCode()
    {
        RPayTaxListTrans        taxListTrans;
        RPayTaxIncomeGroupTable incomeGroupTable;
        TaxTable                taxTable;
        TaxPeriodHead           taxPeriod;
        TaxAuthorityAddress     taxAuthority;

        select firstonly TaxStatus, TaxRateCode from taxListTrans
            where taxListTrans.TableRecId == rPayTaxListTable.RecId;

        select firstonly RpayTaxIncomeGroupCode from incomeGroupTable
                    where incomeGroupTable.EmplTaxStatus == taxListTrans.TaxStatus &&
                         (incomeGroupTable.RateCode      == taxListTrans.TaxRateCode ||
                          incomeGroupTable.RateCodeGroup == taxListTrans.TaxRateCode);

        taxTable      = TaxTable::find(RPayTaxIncomeGroupTable::findCode(incomeGroupTable.RpayTaxIncomeGroupCode).TaxCode);
        taxPeriod     = TaxPeriodHead::find(taxTable.TaxPeriod);
        taxAuthority  = TaxAuthorityAddress::find(taxPeriod.TaxAuthority);

        return taxAuthority.GniCode_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer             version = conPeek(_packedClass,1);
        RPayTaxListTable    rPayTaxListTableNew;

        switch (version)
        {
            case #CurrentVersion:
                rPayTaxListTableNew = this.parmRPayTaxListTable();

                [version, #CurrentList] = _packedClass;

                if (rPayTaxListTableNew)
                {
                    this.parmRPayTaxListTable(rPayTaxListTableNew);
                }
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static ClassDescription description()
    {
        return "@RUP722";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RPayNDFL2File rPayNDFL2File;

        if (! _args || ! _args.record())
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        rPayNDFL2File = new RPayNDFL2File();
        rPayNDFL2File.parmRPayTaxListTable(_args.record());

        if (rPayNDFL2File.prompt())
        {
            rPayNDFL2File.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>