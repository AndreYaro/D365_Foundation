<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvWorkerBarcodeCoverPageDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ SRSReportParameterAttribute(classstr(TrvWorkerBarcodeCoverPageContract)) ]
public class TrvWorkerBarcodeCoverPageDP extends SRSReportDataProviderBase
{
    TrvWorkerBarcodeTmp      trvWorkerBarcodeTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTrvWorkerBarcodeTmp</Name>
				<Source><![CDATA[
    [
        SRSReportDataSetAttribute('TrvEmployeeBarcodeTmp')
    ]
    public TrvWorkerBarcodeTmp getTrvWorkerBarcodeTmp()
    {
        select * from trvWorkerBarcodeTmp;
        return trvWorkerBarcodeTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTrvWorkerBarcodeTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the filtered data into the <c>trvWorkerBarcodeTmp</c> table.
    /// </summary>
    /// <param name="_hcmWorker">
    /// An <c>HcmWorker</c> table buffer
    /// </param>
    private void insertTrvWorkerBarcodeTmp(HcmWorker  _hcmWorker)
    {
        BarcodeCoverPage    barcodeCoverPage = BarcodeCoverPage::construct(_hcmWorker);
        BarcodeSetup        barcodeSetup;
        Barcode             barcode;
        Array               addlBarcodes = new Array(Types::String);
        int                 counter;
        BarCodeString       barcodeStringsTemp;
        #TrvReceiptsBarcodeCoverPage

        trvWorkerBarcodeTmp.Title                   = barcodeCoverPage.title();
        trvWorkerBarcodeTmp.Instructions            = barcodeCoverPage.instructions();

        barcodeSetup = barcodeCoverPage.barcodeSetup();
        trvWorkerBarcodeTmp.BarcodeFontName = barcodeSetup.fontName;
        trvWorkerBarcodeTmp.BarcodeFontSize = barcodeSetup.fontSize;

        barcodeStringsTemp = barcodeCoverPage.barcodeString();

        //get the additional strings and encode them
        if (TrvParameters::find().IncludeUserIDInBarcode)
        {
            addlBarcodes = barcodeCoverPage.additionalBarcodeStrings();
            for (counter=1;counter <= addlBarcodes.lastIndex(); counter++)
            {
                barcodeStringsTemp += #BarcodeStringSeparator;
                barcodeStringsTemp+= addlBarcodes.value(counter);
            }
        }

        barcode = barcode::construct(barcodeSetup.barcodeType);
        //encode the barcode string according to barcode type
        barcode.clear();
        barcode.string(true, barcodeStringsTemp);
        barcode.encode();

        trvWorkerBarcodeTmp.Barcode = barcode.barcodeStr();

        trvWorkerBarcodeTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by Microsoft
    /// SQL Server Reporting Services at runtime. The method should compute data and populate the data
    /// tables that will be returned to Reporting Services. Note that this is a framework class.
    /// Customizing this class may cause problems with future upgrades to the software.
    /// </remarks>
    public void processReport()
    {
        TrvHcmWorkerRecId        worker;
        dataAreaId               company;
        TrvWorkerBarcodeCoverPageContract contract;

        contract    = this.parmDataContract() as TrvWorkerBarcodeCoverPageContract;
        company     = contract.parmDataAreaId();
        worker      = contract.parmExpenseReportCreatedFor();

        changeCompany(company)
        {
            this.insertTrvWorkerBarcodeTmp(HcmWorker::find(worker));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
