<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqCalcExplodeSales</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ReqRefTypeFactory(ReqRefType::Sales)]
class ReqCalcExplodeSales extends ReqCalcExplode implements BatchRetryable
{
    InventMovement      movement;
    SalesLine           salesLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return strfmt("@SYS23501",refId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <param name="_dialog">
    ///    A dialog represents rescheduling dialog, optional.
    /// </param>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    public Object dialog(Dialog _dialog = null)
    {
        dialog = _dialog == null ? super() : _dialog;

        if (reqPlanId == ReqPlanSched::defaultDynamicId())
        {
            dialogDeleteMarking = dialog.addFieldValue(extendedtypestr(InventDeleteMarking),deleteMarking);
            dialog.addGroup("@SYS86126");
            dialogAutoReserveCoverage = dialog.addFieldValue(extendedtypestr(ReqAutoReserveCoverage),autoReserveCoverage,"@SYS86123");
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the <c>ReqTrans</c> records into the internal cache.
    /// </summary>
    /// <remarks>
    ///    Records in the internal cache will be coverage-planned.
    /// </remarks>
    protected void insertData()
    {
        ReqTrans            reqTrans;
        InventSumLogTTS     inventSumLogTTS;

        if (movement)
        {
            salesLine = movement.buffer();
        }

        if (! salesLine.InventTransId)
        {
            salesLine = InventTransOriginSalesLine::salesLine(inventTransOriginId,true);
        }

        if (salesLine.InventTransId)
        {
            this.updateItemLock(salesLine.ItemId);

            if (deleteMarking)
            {
                if (! movement)
                {
                    movement = InventMovement::construct(salesLine);
                }

                if (movement.transIdSum().reserved())
                {
                    // If deleting marking is checked, InventSumLogTTS will be skipped generation
                    // because this inventSumLogTTS will cause wrong covQty after processing reqTrans datasource research
                    InventUpdateOnhandGlobal::instance().inventUpdateOnhand().parmSkipInventSumLogTTS(true);
                    InventUpd_Reservation::deleteReserveRefTransId(movement, true);
                    InventUpdateOnhandGlobal::instance().inventUpdateOnhand().parmSkipInventSumLogTTS(false);
                }
            }

            if (reservationExplosion && salesLine.Reservation == ItemReservation::Explosion)
            {
                while select forupdate reqTrans
                    index hint RefIdx
                    where reqTrans.PlanVersion            == this.reqPlanVersionRefRecId() &&
                          reqTrans.RefType                == ReqRefType::Sales             &&
                          reqTrans.RefId                  == salesLine.SalesId             &&
                          reqTrans.InventTransOrigin      == inventTransOriginId
                {
                    reqTrans.deleteExplosionCoverage(reqPlanData);
                    reqTrans.delete(reqPlanData,true);
                }

                delete_from inventSumLogTTS
                    where inventSumLogTTS.InventTransOrigin == inventTransOriginId  &&
                          inventSumLogTTS.TransRefId        == salesLine.SalesId;

                this.insertItemInventTrans(ReqSetup::newItemId(salesLine.ItemId),salesLine.InventTransId);

                this.addRef2ReqTransCache(ReqRefType::Sales,refId,inventTransOriginId,false,0);
            }
            else
            {
                ttsbegin;
                this.updateItemLock(salesLine.ItemId);
                this.updateReqTransUpdate(salesLine.ItemId);
                ttscommit;

                while select forupdate reqTrans
                    index hint RefIdx
                    where reqTrans.PlanVersion            == this.reqPlanVersionRefRecId() &&
                          reqTrans.RefType                == ReqRefType::Sales             &&
                          reqTrans.RefId                  == salesLine.SalesId             &&
                          reqTrans.InventTransOrigin      == inventTransOriginId
                {
                    if (reqTrans.ItemBomId != salesLine.ItemBOMId || reqTrans.ItemRouteId != salesLine.ItemRouteId)
                    {
                        reqTrans.initFromInventTransOrigin(null, reqPlanData.newReqSetupDim(reqPlanData.newReqSetup(salesline.ItemId), reqTrans.CovInventDimId));
                        reqTrans.update();
                    }
                    ReqTraceLog::deleteTraceForReqTrans(reqTrans);

                    if (deleteCoverage)
                    {
                        reqTrans.deleteExplosionCoverage(reqPlanData);
                        this.addReqTrans2ReqTransCache(reqTrans,false);
                    }                   
                }
                if (! deleteCoverage)
                {
                    this.addRef2ReqTransCache(ReqRefType::Sales,refId,inventTransOriginId,false,0);
                }
            }

            this.createReqProcessTransFilterForInventJournalReqTrans(salesLine.ItemId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventMovement</Name>
				<Source><![CDATA[
    InventMovement newInventMovement(ReqTrans _issue)
    {
        if (movement && _issue.InventTransOrigin == movement.inventTransOriginId())
        {
            return movement;
        }

        return super(_issue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMovement</Name>
				<Source><![CDATA[
    InventMovement parmMovement(InventMovement _movement = movement)
    {
        movement = _movement;
        return movement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAutoReserveCoverage</Name>
				<Source><![CDATA[
    boolean updateAutoReserveCoverage()
    {
        if (! super())
        {
            return false;
        }

        if (reqPlanId != ReqPlanSched::defaultDynamicId())
        {
            return false;
        }

        if (! salesLine.InventTransId)
        {
            salesLine = InventTransOriginSalesLine::salesLine(inventTransOriginId,true);
        }

        InventUpdateOnhandGlobal::instance().inventUpdateOnhand().parmSkipInventSumLogTTS(true);

        ReqSalesExplosionAutoReserveCoverage::reserveCoverageForSalesLine(
            this.reqPlanVersionRefRecId(), 
            salesLine, 
            inventTransOriginId, 
            movement, 
            deleteMarking, 
            salesLine.Reservation == ItemReservation::Explosion ? ReqPlanManager::allowSkipTTS() : false);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runReqTransUpdate</Name>
				<Source><![CDATA[
    protected void runReqTransUpdate(ReqTransUpdate _reqTransUpdate)
    {
        if (_reqTransUpdate.parmItemId() == salesLine.ItemId)
        {
            // Parallel CTP should include only current sales transaction.
            // When processing lean sales events, newly created kanbans should also be included.
            _reqTransUpdate.filterByRefIdAndExcludeType(salesLine.SalesId, InventTransType::Sales);
        }

        super(_reqTransUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS24484";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement</Name>
				<Source><![CDATA[
    public static ReqCalcExplode newMovement(
        InventMovement  _movement,
        NoYes           _autoReserveCoverage
        )
    {
        SalesLine salesLine = _movement.buffer();

        ReqCalcExplode reqCalcExplode = ReqCalcExplodeFactory::construct()
            .withSysLastValue()
            .withReqRefType(ReqRefType::Sales)
            .withInventTransRefId(salesLine.SalesId)
            .withInventTransOriginId(_movement.inventTransOriginId())
            .createInstance();

        reqCalcExplode.parmReqPlanId(ReqPlanSched::defaultDynamicId());
        reqCalcExplode.parmReqCalcUpdate(ReqCalcUpdate::NetChangeMinimized);
        reqCalcExplode.parmDeleteCoverage(true);
        reqCalcExplode.parmDeleteMarking(_autoReserveCoverage);
        reqCalcExplode.parmAutoReserveCoverage(_autoReserveCoverage);
        reqCalcExplode.parmReservationExplosion(true);

        reqCalcExplode.parmReqPlanData(null);

        return reqCalcExplode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSalesIdPrompt</Name>
				<Source><![CDATA[
    public static ReqCalcExplode newSalesIdPrompt(
        SalesId             _salesId,
        InventTransId       _inventTransId
        )
    {
        ReqCalcExplode reqCalcExplode = ReqCalcExplodeFactory::construct()
            .withSysLastValue()
            .withReqRefType(ReqRefType::Sales)
            .withInventTransRefId(_salesId)
            .withInventTransOriginId(InventTransOrigin::findByInventTransId(_inventTransId).RecId)
            .createInstance();

        reqCalcExplode.parmReqPlanId(ReqPlanSched::defaultDynamicId());
        reqCalcExplode.parmReqCalcUpdate(ReqCalcUpdate::NetChangeMinimized);
        reqCalcExplode.parmReqPlanData(null);

        return reqCalcExplode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
        {
            InventTransOrigin inventTransOrigin = InventTransOrigin::find(inventTransOriginId);
            KittingIKitLineEnumerator kittingIKitLineEnumerator = KittingClassDelegateHelper::createIKitLineEnumerator(inventTransOrigin.InventTransId);
    
            if (kittingIKitLineEnumerator)
            {
                if (kittingIKitLineEnumerator.isKit())
                {
                    while (kittingIKitLineEnumerator.moveNext())
                    {
                        salesLine = kittingIKitLineEnumerator.current();
                        this.parmMovement(null);
    
                        inventTransOrigin = InventTransOrigin::findByInventTransId(salesline.InventTransId);
                        this.parmInventTransOriginId(inventTransOrigin.RecId);
                        this.parmReqPlanData(null);
    
                        super();
                    }
                }
            }
            else
            {
                // Under Kitting feature, for a normal item, the explosion should also work.
                super();
            }
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>