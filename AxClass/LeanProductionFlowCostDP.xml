<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanProductionFlowCostDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanProductionFlowCostDP</c> class the report data provider class that supports the
///    <c>LeanProductionFlowCost</c> reports.
/// </summary>
[
    SRSReportParameterAttribute(classStr(LeanProductionFlowCostContract))
]
public class LeanProductionFlowCostDP extends SRSReportDataProviderBase
{
    TmpLeanProductionFlowCost   tmpLeanProductionFlowCostTmp;

    PlanName        prodFlowName;
    PlanDescription prodFlowDescription;

    TransDate       fromDate;
    TransDate       toDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTmpLeanProductionFlowCost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Queries the <c>TmpLeanProductionFlowCost</c> table and returns the data table.
    /// </summary>
    /// <returns>
    ///    The required report data table.
    /// </returns>
    [SRSReportDataSetAttribute('TmpLeanProductionFlowCost')]
    public TmpLeanProductionFlowCost getTmpLeanProductionFlowCost()
    {
        select ProdFlowName, ProdFlowDescription, ResourceNumber, ResourceName, UnitId, ResourceType, sum(Qty), sum(CostAmount)
        from tmpLeanProductionFlowCostTmp
        group by ProdFlowName, ProdFlowDescription, ResourceType, ResourceName, ResourceNumber, UnitId;

        return tmpLeanProductionFlowCostTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDirectManufacturing</Name>
				<Source><![CDATA[
    private void processDirectManufacturing()
    {
        ProdRouteTrans                  prodRouteTrans;

        while select sum(Amount), sum(Hours), CategoryId from prodRouteTrans
        group by CategoryId
        where prodRouteTrans.TransRefId   == prodFlowName
           && prodRouteTrans.TransRefType == ProdTransRefType::ProductionFlow
           && prodRouteTrans.DateWIP      >= fromDate
           && prodRouteTrans.DateWIP      <= toDate
           && !prodRouteTrans.ServiceItemId
        {
            tmpLeanProductionFlowCostTmp.Qty = prodRouteTrans.Hours;
            tmpLeanProductionFlowCostTmp.CostAmount = prodRouteTrans.Amount;
            tmpLeanProductionFlowCostTmp.UnitId = BOMCalcTransMap::calcHourUnit();
            tmpLeanProductionFlowCostTmp.ResourceNumber = prodRouteTrans.CategoryId;
            tmpLeanProductionFlowCostTmp.ResourceName = CategoryTable::find(prodRouteTrans.CategoryId).CategoryName;
            tmpLeanProductionFlowCostTmp.ResourceType = ProductionTransType::OperationResource;

            tmpLeanProductionFlowCostTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDirectMaterial</Name>
				<Source><![CDATA[
    private void processDirectMaterial()
    {
        InventTrans                     inventTrans;
        InventTransOrigin               inventTransOrigin;
        InventDim                       inventDim;
        InventCostTrans                 inventCostTrans;

        while select sum(Qty), sum(CostAmountPhysical), ItemId from inventTrans
            group by inventTrans.ItemId, inventTransOrigin.ItemInventDimId, inventDim.InventSiteId
            where inventTrans.DatePhysical >= fromDate
               && inventTrans.DatePhysical <= toDate
        exists join inventDim
            where inventDim.InventDimId    == inventTrans.InventDimId
        exists join inventTransOrigin
            where inventTransOrigin.RecId == inventTrans.InventTransOrigin
        exists join inventCostTrans
            where inventCostTrans.InventTransId     == inventTransOrigin.InventTransId
               && inventCostTrans.Voucher           == inventTrans.VoucherPhysical
               && inventCostTrans.TransDate         == inventTrans.DatePhysical
               && inventCostTrans.CostTransRefType  == InventCostTransRefType::ProductionFlow
               && inventCostTrans.TransRefId        == prodFlowName
        {
            tmpLeanProductionFlowCostTmp.ResourceNumber = inventTrans.ItemId;
            tmpLeanProductionFlowCostTmp.ResourceName   = InventTable::find(inventTrans.ItemId).defaultProductName();
            tmpLeanProductionFlowCostTmp.UnitId         = inventTrans.inventTable().inventTableModuleInvent().UnitId;

            if (inventTrans.direction() == InventDirection::Issue)
            {
                tmpLeanProductionFlowCostTmp.ResourceType = ProductionTransType::ConsumedItem;
                tmpLeanProductionFlowCostTmp.Qty          = -inventTrans.Qty;
                tmpLeanProductionFlowCostTmp.CostAmount   = -inventTrans.CostAmountPhysical;
            }
            else
            {
                tmpLeanProductionFlowCostTmp.ResourceType = ProductionTransType::ProducedItem;
                tmpLeanProductionFlowCostTmp.Qty          = inventTrans.Qty;
                tmpLeanProductionFlowCostTmp.CostAmount   = inventTrans.CostAmountPhysical;
            }

            tmpLeanProductionFlowCostTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDirectOutsourcing</Name>
				<Source><![CDATA[
    private void processDirectOutsourcing()
    {
        ProdRouteTrans                  prodRouteTrans;
        InventTable                     inventTable;
        InventDim                       inventDim;

        while select sum(Amount), sum(QtyGood), ServiceItemId, ServiceInventDimId from prodRouteTrans
        group by prodRouteTrans.ServiceItemId, prodRouteTrans.ServiceInventDimId,
            inventTable.ItemId, inventTable.bomUnitId, inventTable.Product,
            inventDim.InventDimId, inventDim.ConfigId, inventDim.InventColorId,
            inventDim.InventStyleId, 
            inventDim.InventVersionId,
            inventDim.InventSizeId, inventDim.InventSiteId
        where prodRouteTrans.TransRefId   == prodFlowName
           && prodRouteTrans.TransRefType == ProdTransRefType::ProductionFlow
           && prodRouteTrans.DateWIP      >= fromDate
           && prodRouteTrans.DateWIP      <= toDate
           && prodRouteTrans.ServiceItemId
        join ItemId, bomUnitId, Product from inventTable
            where inventTable.ItemId == prodRouteTrans.ServiceItemId
        join InventDimId, ConfigId, InventColorId,
        InventStyleId,
        InventVersionId,
        InventSizeId, InventSiteId from inventDim
            where inventDim.InventDimId == prodRouteTrans.ServiceInventDimId
        {
            tmpLeanProductionFlowCostTmp.Qty = prodRouteTrans.QtyGood;
            tmpLeanProductionFlowCostTmp.CostAmount = prodRouteTrans.Amount;
            tmpLeanProductionFlowCostTmp.UnitId = inventTable.inventTableModuleInvent().UnitId;
            tmpLeanProductionFlowCostTmp.ResourceNumber = prodRouteTrans.ServiceItemId;
            tmpLeanProductionFlowCostTmp.ResourceName = inventTable.itemName(inventDim);
            tmpLeanProductionFlowCostTmp.ResourceType = ProductionTransType::ConsumedService;

            tmpLeanProductionFlowCostTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processIndirect</Name>
				<Source><![CDATA[
    private void processIndirect()
    {
        ProdIndirectTrans               prodIndirectTrans;
        CostSheetNodeTable              costSheetNodeTable;

        while select sum(Amount), sum(Basis), Code from prodIndirectTrans
        group by Code
        where prodIndirectTrans.TransRefId   == prodFlowName
           && prodIndirectTrans.TransRefType == ProdTransRefType::ProductionFlow
           && prodIndirectTrans.DateEstimation      >= fromDate
           && prodIndirectTrans.DateEstimation      <= toDate
        {
            tmpLeanProductionFlowCostTmp.ResourceType = ProductionTransType::IndirectCost;
            tmpLeanProductionFlowCostTmp.ResourceNumber = prodIndirectTrans.Code;

            select firstonly Description
            from costSheetNodeTable
            where costSheetNodeTable.Code    == prodIndirectTrans.Code
               && costSheetNodeTable.SheetId == CostSheetTable::defaultCostSheetTable().SheetId;

            tmpLeanProductionFlowCostTmp.ResourceName = costSheetNodeTable.Description;
            tmpLeanProductionFlowCostTmp.Qty = prodIndirectTrans.Basis;
            tmpLeanProductionFlowCostTmp.CostAmount = prodIndirectTrans.Amount;
            tmpLeanProductionFlowCostTmp.UnitId = "";

            tmpLeanProductionFlowCostTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processOneProdFlow</Name>
				<Source><![CDATA[
    private void processOneProdFlow()
    {
        prodFlowDescription = PlanReference::findPlanName(prodFlowName).PlanDescription;

        tmpLeanProductionFlowCostTmp.ProdFlowName = prodFlowName;
        tmpLeanProductionFlowCostTmp.ProdFlowDescription = prodFlowDescription;

        this.processDirectMaterial();
        this.processDirectManufacturing();
        this.processDirectOutsourcing();
        this.processIndirect();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method is used to process the report business logic which is used by
    ///    <c>LeanProductionFloswCost</c> report.
    /// </remarks>
    public void processReport()
    {
        PlanReference   planReference;
        LeanProductionFlowCostContract  leanProductionFlowCostContract = this.parmDataContract() as LeanProductionFlowCostContract;

        fromDate        = leanProductionFlowCostContract.parmInventCostDateIntervalContract().parmFromDate();
        toDate          = leanProductionFlowCostContract.parmInventCostDateIntervalContract().parmToDate();
        prodFlowName    = leanProductionFlowCostContract.parmPlanName();

        if (toDate == dateNull())
        {
            toDate  = maxDate();
        }

        delete_from tmpLeanProductionFlowCostTmp;

        if (prodFlowName == "")
        {
            while select PlanName
            from planReference
            where planReference.PlanType == PlanTypes::ProductionFlow
            {
                prodFlowName = planReference.PlanName;
                this.processOneProdFlow();
            }
        }
        else
        {
            if (PlanReference::findPlanName(prodFlowName).PlanType == PlanTypes::ProductionFlow)
            {
                this.processOneProdFlow();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>