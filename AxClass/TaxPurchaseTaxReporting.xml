<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxPurchaseTaxReporting</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is the main class for purchase duty reporting.
/// </summary>
class TaxPurchaseTaxReporting extends RunBaseBatch implements BatchRetryable
{
    TransDate       transDate;
    Voucher         voucher;
    boolean         printOut;
    QueryRun        query;

    DialogField     dialogTransDate;
    DialogField     dialogPrintout;

    #DEFINE.CurrentVersion(2)

    #LOCALMACRO.CurrentList
        transDate,
        printOut
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    Object dialog()
    {
        DialogRunbase   dialog = super();

        dialogTransDate = dialog.addFieldValue(extendedtypestr(TransDate), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), "@SYS67", "@SYS2282");

        dialogPrintout= dialog.addField(enumstr(NoYes), "@SYS55791", "@SYS60728");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        transDate      = dialogTransDate.value();
        printOut       = dialogPrintout.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        #ISOCountryRegionCodes
        super();
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoAT, GlobalizationConstants::FeatureReferenceAT00002] ],
            funcName()
        );

        query = new QueryRun(querystr(TaxPurchaseTaxReport));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion,#CurrentList,query.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>printout</Name>
				<Source><![CDATA[
    private void printout(TaxPurchaseTaxTrans _taxPurchaseTaxTrans)
    {
        Args            args = new Args();

        args.caller(this);
        args.record(_taxPurchaseTaxTrans);

        new MenuFunction(menuitemoutputstr(TaxPurchaseTaxReport), MenuItemType::Output).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    QueryRun queryRun()
    {
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        TaxPurchaseTaxTrans         taxPurchaseTaxTrans;
        QueryRun                    queryTaxPurchaseTaxTrans;

        LedgerVoucher               ledgerVoucher;
        LedgerVoucherObject         ledgerVoucherObject;
        LedgerVoucherTransObject    ledgerVoucherTransObject;

        AmountMST                   purchaseTaxAmount;
        ExchRate                    exchRate;
        NumberSeq                   numberSeq;
        TransactionTxt              transactionTxt;
        TaxPurchaseTaxTable         taxPurchaseTaxTable = TaxPurchaseTaxTable::find();
        VendAccount                 vendAccount;
        VendTable                   vendTable;
        VendVoucher                 vendVoucher;
        VendTrans                   vendTrans;
        // <GEERU>
        LedgerBondClient_RU         ledgerBondClient_RU;
        // </GEERU>
        CurrencyExchangeHelper      exchangeRateHelper;

        exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(
            Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
            transDate);

        vendAccount = TaxAuthorityAddress::find(taxPurchaseTaxTable.TaxAuthority).AccountNum;
        if (!vendAccount && !taxPurchaseTaxTable.SettleLedgerDimension)
           throw error("@SYS58844");

        try
        {
            purchaseTaxAmount = 0;
            queryTaxPurchaseTaxTrans = query;
            ttsbegin;

            while (queryTaxPurchaseTaxTrans.next())
            {
                taxPurchaseTaxTrans = queryTaxPurchaseTaxTrans.get(tableNum(TaxPurchaseTaxTrans));
                if (!taxPurchaseTaxTrans.ReportVoucher)
                {
                    if (! ledgerVoucher)
                    {
                        numberSeq   = NumberSeq::newGetVoucher(TaxParameters::numRefTaxReportingVoucher(),false);
                        voucher     = numberSeq.voucher();

                        transactionTxt      = TransactionTxt::construct();
                        transactionTxt.setType(LedgerTransTxt::TaxPurchaseTax);
                        transactionTxt.setKey1("@SYS58824");

                        ledgerVoucher = LedgerVoucher::newLedgerPost(
                                                                DetailSummary::Summary,
                                                                SysModule::Tax,
                                                                numberSeq.parmVoucherSequenceCode());
                        ledgerVoucher.lastTransDate(transDate);
                        ledgerVoucher.lastVoucher(voucher);
                        ledgerVoucher.parmCheckBlockedDimensions(false);

                        ledgerVoucherObject = LedgerVoucherObject::newVoucher(
                                                                voucher,
                                                                transDate,
                                                                SysModule::Tax,
                                                                LedgerTransType::Tax);
                        ledgerVoucherObject.lastTransTxt(transactionTxt.txt());
                        ledgerVoucher.addVoucher(ledgerVoucherObject);
                        // <GEERU>

                        ledgerBondClient_RU = ledgerVoucherObject.ledgerBondClient_RU();
                        if (ledgerBondClient_RU)
                        {
                            ledgerBondClient_RU.addNewLogObject();
                        }
                        // </GEERU>
                    }

                    purchaseTaxAmount += taxPurchaseTaxTrans.TaxAmountMST;
                    ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                                    ledgerVoucher.findLedgerVoucherObject(),
                                                    LedgerPostingType::Tax,
                                                    LedgerDimensionFacade::serviceCreateLedgerDimension(taxPurchaseTaxTable.TaxLedgerDimension),
                                                    Ledger::accountingCurrency(CompanyInfo::current()),
                                                    - taxPurchaseTaxTrans.TaxAmountMST,
                                                    exchangeRateHelper);
                    ledgerVoucherTransObject.parmTransTxt(transactionTxt.txt());
                    ledgerVoucher.addTrans(ledgerVoucherTransObject);
                    taxPurchaseTaxTrans.ReportDate = transDate;
                    taxPurchaseTaxTrans.ReportVoucher = voucher;
                    taxPurchaseTaxTrans.update();
                }
            }

            if (ledgerVoucher)
            {
                if (vendAccount)
                {
                    vendTable = VendTable::find(vendAccount);
                    if (vendTable.Currency != Ledger::accountingCurrency(CompanyInfo::current()))
                    {
                        exchRate = ExchangeRateHelper::exchRate(vendTable.Currency, transDate, UnknownNoYes::Unknown, false, NoYes::No);

                        purchaseTaxAmount = CurrencyExchangeHelper::curAmount(purchaseTaxAmount, vendTable.Currency, transDate, UnknownNoYes::Unknown, exchRate);
                    }
                    else
                    {
                        exchRate = 100;
                    }

                    vendVoucher = CustVendVoucher::construct(SysModule::Vend,
                                                  vendTable.AccountNum,
                                                  purchaseTaxAmount,
                                                  vendTable.Currency,
                                                  LedgerTransTxt::TaxReporting,
                                                  vendTable.DefaultDimension,
                                                  VendParameters::find().PostingProfile,
                                                  LedgerPostingType::Tax,
                                                  vendTable.PaymTermId,
                                                  SettlementType::None,
                                                  HcmWorker::userId2Worker(curUserId()),
                                                  NoYes::Yes,
                                                  '',
                                                  dateNull(),
                                                  0,
                                                  DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

                    vendVoucher.parmTransTxt("@SYS58810");
                    vendVoucher.parmPaymMode(vendTable.PaymMode);
                    vendVoucher.parmPaymSpec(vendTable.PaymSpec);

                    vendVoucher.parmExchRate(exchRate);
                    vendVoucher.parmExchRateSecondary(
                    ExchangeRateHelper::getExchangeRate2_Static(
                        Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                        vendTable.Currency,
                        transDate));

                    vendVoucher.post(ledgerVoucher,
                                     vendTrans,
                                     NoYes::No,
                                     UnknownNoYes::Unknown);
                }
                else
                {
                    ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                                    ledgerVoucher.findLedgerVoucherObject(),
                                                    LedgerPostingType::Tax,
                                                    LedgerDimensionFacade::serviceCreateLedgerDimension(taxPurchaseTaxTable.SettleLedgerDimension),
                                                    Ledger::accountingCurrency(CompanyInfo::current()),
                                                    purchaseTaxAmount,
                                                    exchangeRateHelper);
                    ledgerVoucherTransObject.parmTransTxt(transactionTxt.txt());
                    ledgerVoucher.addTrans(ledgerVoucherTransObject);
                }

                taxPurchaseTaxTrans.clear();
                taxPurchaseTaxTrans.TaxPurchaseTaxId = taxPurchaseTaxTable.TaxPurchaseTaxId;
                taxPurchaseTaxTrans.TransDate        = transDate;
                taxPurchaseTaxTrans.Voucher          = voucher;
                taxPurchaseTaxTrans.TransTxt         = transactionTxt.txt();
                taxPurchaseTaxTrans.TaxAmountMST     = -purchaseTaxAmount;
                taxPurchaseTaxTrans.ReportDate       = transDate;
                taxPurchaseTaxTrans.ReportVoucher    = voucher;
                taxPurchaseTaxTrans.insert();
                // <GEERU>

                if (ledgerBondClient_RU)
                {
                    ledgerBondClient_RU.bondLog2Log();
                }
                // </GEERU>

                ledgerVoucher.end();
                TransactionLog::create(TransactionLogType::TaxReport, voucher);
            }

            ttscommit;
            if (printOut && taxPurchaseTaxTrans)
                this.printout(taxPurchaseTaxTrans);
        }
        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

        catch (Exception::Error)
        {
            exceptionTextFallThrough();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer          version         = conPeek(packedClass,1);
        container       packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,packedQuery] = packedClass;
                if (packedQuery)
                {
                    query = new QueryRun(packedQuery);
                }
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYS58810";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void  main(Args  _args)
    {
        TaxPurchaseTaxReporting    taxPurchaseTaxReporting  = new TaxPurchaseTaxReporting();

        if (taxPurchaseTaxReporting.prompt())
            taxPurchaseTaxReporting.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>