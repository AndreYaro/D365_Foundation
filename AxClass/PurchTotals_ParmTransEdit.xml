<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchTotals_ParmTransEdit</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchTotals_ParmTransEdit extends PurchTotals_ParmTrans
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEdit</Name>
				<Source><![CDATA[
    boolean allowEdit()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateIsCreditNote</Name>
				<Source><![CDATA[
    protected void calculateIsCreditNote()
    {
        QueryRun            queryTransact;
        AmountCur           total;
        InventQty           totalUnitQty;

        queryTransact = this.queryBuild();

        while (queryTransact.next())
        {
            purchLine = this.queryGet(queryTransact);
            if (!parmLine.isNonPO() && !purchLine)
            {
                continue;
            }

            if (!parmLine.isNonPO())
            {
                total += purchLine.LineAmount;
                totalUnitQty += purchLine.PurchQty;
            }
            else
            {
                total += parmLine.LineAmount;
                totalUnitQty += parmLine.ReceiveNow;
            }
        }

        isCreditNote = this.determineIsCreditNote(total, totalUnitQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDisc</Name>
				<Source><![CDATA[
    DiscAmount cashDisc()
    {
        if (!parmTable.ReCalculate)
        {
            totalCashDisc = parmTable.CashDisc;
            return totalCashDisc;
        }

        if (parmTable.isNonPO())
        {
            using (TaxIntegrationTaxJurisdictionParametersContext taxIntegrationTaxJurisdictionParametersContext = TaxIntegrationTaxJurisdictionParametersContext::construct(parmTable.TableId, parmTable.RecId))
            {
                totalCashDisc = VendParameters::cashDiscAmount(
                    parmTable.CashDiscCode,
                    this.purchCurrency(),
                    totalAmount,
                    totalAmount - this.purchTaxTotal(),
                    parmTable.CashDiscPercent);
            }

            return totalCashDisc;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscDate</Name>
				<Source><![CDATA[
    DiscDate cashDiscDate()
    {
        if (!parmTable.ReCalculate || parmTable.isNonPO())
        {
            return parmTable.CashDiscDate;
        }
        else if (this.isApproveJournal())
        {
            return vendInvoiceJour.CashDiscDate;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryWeight</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the weight of a category-based line.
    /// </summary>
    /// <returns>
    ///    The weight of the category-based line.
    /// </returns>
    protected Weight categoryWeight()
    {
        if (parmLine.isNonPO())
        {
            return VendInvoiceLineForeignTradeCategory::findVendInvoiceInfoLine(parmLine).UnitWeight;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>discPercent</Name>
				<Source><![CDATA[
    public DiscPct discPercent()
    {
        if (parmTable.ReCalculate == NoYes::Yes && !this.parmKeepEndDisc())
        {
            if (!parmLine.isNonPO())
            {
                return parmLine.purchTable().DiscPercent;
            }

            if (!parmTable.isNonPO())
            {
                return parmTable.purchTable().DiscPercent;
            }
        }

        if (endDiscBalance != 0.0)
        {
            return ( (this.endDisc(false) * 100) / endDiscBalance);
        }

        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDisc</Name>
				<Source><![CDATA[
    DiscAmount  endDisc(boolean _roundResult = true)
    {
        if (!parmTable.ReCalculate || this.parmKeepEndDisc())
        {
            return parmTable.EndDisc;
        }

        return super(_roundResult);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceRoundOff</Name>
				<Source><![CDATA[
    AmountCur invoiceRoundOff()
    {
        if (!parmTable.ReCalculate)
        {
            return parmTable.InvoiceRoundOff;
        }
        else
        {
            return roundOff;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCategoryBased</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the line is category-based.
    /// </summary>
    /// <returns>
    ///    true if the line is category-based; otherwise, false.
    /// </returns>
    protected boolean isCategoryBased()
    {
        if (parmLine.isNonPO())
        {
            return parmLine.isCategoryBased();
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStocked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the line is tracked in inventory.
    /// </summary>
    /// <returns>
    ///    true if the line is tracked in inventory; otherwise, false.
    /// </returns>
    protected boolean isStocked()
    {
        if (parmLine.isNonPO())
        {
            return parmLine.inventoried();
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>linePurchUnit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the purchase unit of the current line.
    /// </summary>
    /// <returns>
    ///    The purchase unit current line.
    /// </returns>
    protected PurchUnit linePurchUnit()
    {
        VendInvoiceInfoLine invoiceLine;
        Common              invoiceLineCommon = parmLine;

        if (invoiceLineCommon.TableId == tablenum(VendInvoiceInfoLine))
        {
            invoiceLine = parmLine;

            if (parmLine.isNonPO())
            {
                return invoiceLine.PurchUnit;
            }
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(
            Common         _source,
            PurchUpdate    _specQty,
            ParmId         _parmId,
            PurchId        _sumPurchId,
            DocumentStatus _documentStatus)
    {
        super(_source, _specQty, _parmId, _sumPurchId, _documentStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymCode</Name>
				<Source><![CDATA[
    PaymTermId paymCode()
    {
        if (parmTable.isNonPO())
        {
            return parmTable.Payment;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymDayId</Name>
				<Source><![CDATA[
    PaymDayId paymDayId()
    {
        if (parmTable.isNonPO())
        {
            return parmTable.paymDayId();
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxableDocumentDescriptor</Name>
				<Source><![CDATA[
    public TaxableDocumentDescriptor parmTaxableDocumentDescriptor()
    {
        TaxableDocumentDescriptor taxableDocumentDescriptor;

        if (parmTable.TableId == tableNum(PurchParmTable))
        {
            PurchParmTable purchParmTable = parmTable;
            VendPackingSlipJour vendPackingSlipJourLoc;
            VendPackingSlipVersion  vendPackingSlipVersion;

            select firstonly vendPackingSlipJourLoc
                where vendPackingSlipJourLoc.PackingSlipId == purchParmTable.Num
                    && vendPackingSlipJourLoc.DeliveryDate == purchParmTable.TransDate
                    && vendPackingSlipJourLoc.DocumentDate == purchParmTable.documentDate
                exists join vendPackingSlipVersion
                    where vendPackingSlipVersion.VendPackingSlipJour == vendPackingSlipJourLoc.RecId
                    && vendPackingSlipVersion.ParmId == purchParmTable.ParmId;

            if (vendPackingSlipJourLoc)
            {
                taxableDocumentDescriptor = TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(vendPackingSlipJourLoc);
            }
            else
            {
                taxableDocumentDescriptor = TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(purchParmTable);
            }
        }
        else
        {
            taxableDocumentDescriptor = TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(parmTable);
        }

        return taxableDocumentDescriptor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchaseCreditMax</Name>
				<Source><![CDATA[
    AmountMST purchaseCreditMax()
    {
        if (parmTable.isNonPO())
        {
            return parmTable.vendTable_InvoiceAccount().CreditMax;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchCashDiscCode</Name>
				<Source><![CDATA[
    CashDiscCode  purchCashDiscCode()
    {
        if (parmTable.isNonPO())
        {
            return parmTable.CashDiscCode;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchPrepayAvailable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>PrepayAvailable</c> field value.
    /// </summary>
    /// <returns>
    ///    The <c>PrepayAvailable</c> field value of the <c>PurchPrepayTable</c> table.
    /// </returns>
    PurchPrepayAvailable purchPrepayAvailable()
    {
        if (parmTable.isNonPO())
        {
            return 0;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchPrepayLimit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>PrepayLimit</c> field value of the <c>PurchPrepayTable</c> table.
    /// </summary>
    /// <returns>
    ///    The <c>PrepayLimit</c> field value of the <c>PurchPrepayTable</c> table.
    /// </returns>
    PurchPrepayLimit purchPrepayLimit()
    {
        if (parmTable.isNonPO())
        {
            return 0;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchTaxRoundOff</Name>
				<Source><![CDATA[
    TaxAmountCur  purchTaxRoundOff()
    {
        if (!parmTable.ReCalculate || parmTable.isNonPO())
        {
            return parmTable.TaxRoundOff;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEndDiscBalances</Name>
				<Source><![CDATA[
    protected void updateEndDiscBalances(AmountCur _amountCur)
    {
        DiscPct     discPercent = this.discPercent();
        AmountCur   discBalance;

        if (endDiscBalances.exists(discPercent))
        {
            discBalance = endDiscBalances.lookup(discPercent);
        }

        discBalance += _amountCur;
        endDiscBalances.insert(discPercent, discBalance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a new <see cref="T:PurchTotals" /> object to calculate the totals from an associated
    /// table record.
    /// </summary>
    /// <param name="_source">
    /// The source table record.
    /// </param>
    /// <param name="_specQty">
    /// The quantity to use.
    /// </param>
    /// <param name="_parmId">
    /// A session identifier.
    /// </param>
    /// <param name="_sumPurchId">
    /// A purchase order identifier of the summary <see cref="T:PurchParmTable" /> or
    /// <c>VendInvoiceInfoTable</c> record.
    /// </param>
    /// <param name="_documentStatus">
    /// The document type.
    /// </param>
    /// <returns>
    /// An instance of the <see cref="T:PurchTotals_ParmTransEdit" /> class.
    /// </returns>
    static public PurchTotals_ParmTransEdit construct(
            Common         _source,
            PurchUpdate    _specQty,
            ParmId         _parmId,
            PurchId        _sumPurchId,
            DocumentStatus _documentStatus)
    {
        return new PurchTotals_ParmTransEdit(_source, _specQty, _parmId, _sumPurchId, _documentStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showTaxLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Show the taxes for a document line.
    /// </summary>
    /// <param name="_menuItemDisplayStr">
    ///    The display menu item for which taxes will be displayed.
    /// </param>
    /// <param name="_parmTable">
    ///    The document for which taxes will be displayed.
    /// </param>
    /// <param name="_parmLine">
    ///    The document line for which taxes will be displayed.
    /// </param>
    /// <param name="_formRun">
    ///    The calling form. This parameter is not used in this overridden method.
    /// </param>
    static void showTaxLine(str _menuItemDisplayStr, VendDocumentTableMap _parmTable, VendDocumentLineMap _parmLine, FormRun _formRun = null)
    {
        PurchTotals    purchTotals;

        purchTotals = PurchTotals::newParmTable(_parmTable, PurchUpdate::All, _parmTable.ParmId, '', _parmTable.Ordering);
        purchTotals.calc();
        purchTotals.tax().sourceSingleLine(true, true);

        Tax::showTaxes(_menuItemDisplayStr, purchTotals.tax(), _parmLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showVendInvoiceWithholdTaxLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize a formRun object of <c>TaxWithholdTmpWorkTrans_IN</c> form.
    /// </summary>
    /// <param name="_parmTable">
    /// The parmTable buffer.
    /// </param>
    /// <param name="_parmLine">
    /// The parmLine buffer
    /// </param>
    /// <param name="_formRun">
    /// The formRun object.
    /// </param>
    /// <returns>
    /// Returns formRun object of <c>TaxWithholdTmpWorkTrans_IN</c> form.
    /// </returns>
    public static FormRun showVendInvoiceWithholdTaxLine_IN(
    VendDocumentTableMap _parmTable,
    VendDocumentLineMap  _parmLine,
    FormRun              _formRun = null)
    {
        PurchTotals    purchTotals;

        purchTotals = PurchTotals::newParmTable(_parmTable, PurchUpdate::All, _parmTable.ParmId, '', _parmTable.Ordering);

        purchTotals.calc();

        return TaxWithhold_IN::showWithholdTaxes(purchTotals.taxWithhold_IN(), _parmLine, _formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isApproveJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the line is Approval journal.
    /// </summary>
    /// <returns>
    ///    true if the line is Approval journal; otherwise, false.
    /// </returns>
    private boolean isApproveJournal()
    {
        return vendInvoiceJour.InvoiceType != PurchInvoiceType::VendorAdvance && documentStatus == DocumentStatus::ApproveJournal;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>