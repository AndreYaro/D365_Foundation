<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmPositionMassUpdateFormEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the form extension events for the HcmPositionMassUpdate form.
/// </summary>
class HcmPositionMassUpdateFormEventHandler
{
    boolean initialized;
    FormRun element;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void new(FormRun _formRunInstance)
    {
        element = _formRunInstance;

        // Register this extension with the main form
        element.registerExtensionInstance(classStr(HcmPositionMassUpdateFormEventHandler), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes this form extension handler instance.
    /// </summary>
    private void init()
    {
        if (initialized)
        {
            return;
        }

        initialized = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmPositionMassUpdate_OnInitializing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for the OnInitializing event of the HcmPositionMassUpdate form.
    /// </summary>
    /// <param name="_sender">The form control raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormEventHandler(formStr(HcmPositionMassUpdate), FormEventType::Initializing)]
    public static void HcmPositionMassUpdate_OnInitializing(xFormRun _sender, FormEventArgs _e)
    {
        HcmPositionMassUpdateFormEventHandler extensionInstance = new HcmPositionMassUpdateFormEventHandler(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmPositionMassUpdate_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for the OnInitialized event of the HcmPositionMassUpdate form.
    /// </summary>
    /// <param name="_sender">The form control raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormEventHandler(formStr(HcmPositionMassUpdate), FormEventType::Initialized)]
    public static void HcmPositionMassUpdate_OnInitialized(xFormRun _sender, FormEventArgs _e)
    {
        // Initialize the instance of this form extension handler now that the controls exist
        FormRun positionMassUpdateForm = _sender as FormRun;
        HcmPositionMassUpdateFormEventHandler extensionInstance = positionMassUpdateForm.getExtensionInstance(classStr(HcmPositionMassUpdateFormEventHandler));
        extensionInstance.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmPositionMassUpdate_addReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for the addReference delegeate method on the HcmPositionMassUpdate form.
    /// </summary>
    /// <param name = "_common">The table buffer containing RecId to be added to the container containing the selected references.</param>
    /// <param name = "_formRun">The HcmPositionMassUpdate form instance that raised the event.</param>
    [SubscribesTo(formStr(HcmPositionMassUpdate), delegateStr(HcmPositionMassUpdate, addReference))]
    public static void HcmPositionMassUpdate_addReference(Common _common, FormRun _formRun)
    {
        void addToPositionForecastScenarioReference(HcmPositionForecastScenarioRecId _selectedReference)
        {
            HcmPositionMassUpdateBase hcmPositionMassUpdateBase = _formRun.parmPositionMassUpdateBase();
            hcmPositionMassUpdateBase.parmSelectedReferences(conIns(hcmPositionMassUpdateBase.parmSelectedReferences(), conLen(hcmPositionMassUpdateBase.parmSelectedReferences()) + 1, _selectedReference));
        }

        if (_common.TableId == tableNum(HcmPositionForecastScenario))
        {
            addToPositionForecastScenarioReference(_common.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmPositionMassUpdate_updateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for the updateDesign delegeate method on the HcmPositionMassUpdate form.
    /// </summary>
    /// <param name="_formRun">The HcmPositionMassUpdate form instance that raised the event.</param>
    [SubscribesTo(formStr(HcmPositionMassUpdate), delegateStr(HcmPositionMassUpdate, updateDesign))]
    public static void HcmPositionMassUpdate_updateDesign(FormRun _formRun)
    {
        if (classIdGet(_formRun.args().parmObject()) == classNum(HcmPositionForecastMassUpdate))
        {
            FormGroupControl nowGroupControl = _formRun.design().controlName(formControlStr(HcmPositionMassUpdate, NowGroup)) as FormGroupControl;
            FormGroupControl asOfDateGroupControl = _formRun.design().controlName(formControlStr(HcmPositionMassUpdate, AsOfDateGroup)) as FormGroupControl;
            FormGroupControl availableForAssignmentGroupControl = _formRun.design().controlName(formControlStr(HcmPositionMassUpdate, AvailableForAssignmentGroup)) as FormGroupControl;
            FormTabPageControl relationshipsTabPageControl = _formRun.design().controlName(formControlStr(HcmPositionMassUpdate, RelationshipsTabPage)) as FormTabPageControl;
            FormTabPageControl laborUnionTabPageControl = _formRun.design().controlName(formControlStr(HcmPositionMassUpdate, LaborUnionTabPage)) as FormTabPageControl;

            nowGroupControl.visible(false);
            asOfDateGroupControl.visible(false);
            availableForAssignmentGroupControl.visible(false);
            relationshipsTabPageControl.visible(false);
            laborUnionTabPageControl.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmPositionMassUpdate_Post_initParms</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post-event handler for the initParms method of the HcmPositionMassUpdate form.
    /// </summary>
    /// <param name="_args">Args for the event.</param>
    [PostHandlerFor(formStr(HcmPositionMassUpdate), formMethodStr(HcmPositionMassUpdate, initParms))]
    public static void HcmPositionMassUpdate_Post_initParms(XppPrePostArgs _args)
    {
        FormRun positionMassUpdateForm = _args.getThis();

        FormCheckBoxControl budgetAccountLinesGridControl = positionMassUpdateForm.design().controlName(formControlStr(HcmPositionMassUpdate, editBudgetAccountLinesGrid)) as FormCheckBoxControl;

        HcmPositionMassUpdateBudgetIProvider positionMassUpdateBudgetProvider = positionMassUpdateForm.parmPositionMassUpdateBudgetProvider();
        
        if (positionMassUpdateBudgetProvider)
        {
            // checkbox parm for budget account lines
            positionMassUpdateBudgetProvider.setEditBudgetAccountLines(budgetAccountLinesGridControl.value());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>editBudgetAccountLinesGrid_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for the OnClicked event for the editBudgetAccountLinesGrid control on the HcmPositionMassUpdate form.
    /// </summary>
    /// <param name="_sender">The form control raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(HcmPositionMassUpdate, editBudgetAccountLinesGrid), FormControlEventType::Clicked)]
    public static void editBudgetAccountLinesGrid_OnClicked(FormControl _sender, FormControlEventArgs _e)
    {
        FormRun positionMassUpdateForm = _sender.formRun();

        FormDataSource tmpBudgetPurposeType_ds = positionMassUpdateForm.dataSource(formDataSourceStr(HcmPositionMassUpdate, HcmTmpBudgetPurposeType)) as FormDataSource;

        positionMassUpdateForm.updateOkButton();

        FormCheckBoxControl editbudgetAccountLinesGridControl = positionMassUpdateForm.design().controlName(formControlStr(HcmPositionMassUpdate, editBudgetAccountLinesGrid)) as FormCheckBoxControl;

        if (!editbudgetAccountLinesGridControl.value())
        {
            HcmPositionMassUpdateBudgetIProvider positionMassUpdateBudgetProvider = positionMassUpdateForm.parmPositionMassUpdateBudgetProvider();
            positionMassUpdateBudgetProvider.resetHcmTmpBudgetPurposeType(tmpBudgetPurposeType_ds.cursor(), positionMassUpdateForm);
        }

        tmpBudgetPurposeType_ds.allowEdit(editbudgetAccountLinesGridControl.value());
        tmpBudgetPurposeType_ds.allowCreate(editbudgetAccountLinesGridControl.value());
        tmpBudgetPurposeType_ds.allowDelete(editbudgetAccountLinesGridControl.value());
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmPositionMassUpdate_Post_updateOkButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post-event handler for the updateOkButton method of the HcmPositionMassUpdate form.
    /// </summary>
    /// <param name="_args">Args for the event.</param>
    [PostHandlerFor(formStr(HcmPositionMassUpdate), formMethodStr(HcmPositionMassUpdate, updateOkButton))]
    public static void HcmPositionMassUpdate_Post_updateOkButton(XppPrePostArgs _args)
    {
        FormRun positionMassUpdateForm = _args.getThis();

        FormCommandButtonControl okButtonControl = positionMassUpdateForm.design().controlName(formControlStr(HcmPositionMassUpdate, OKButton)) as FormCommandButtonControl;

        if (okButtonControl.enabled() == false)
        {
            FormCheckboxControl editBudgetAccountLinesGridControl = positionMassUpdateForm.design().controlName(formControlStr(HcmPositionMassUpdate, EditBudgetAccountLinesGrid)) as FormCheckBoxControl;

            if (editBudgetAccountLinesGridControl.value() && positionMassUpdateForm.parmIsValidEffectiveDate())
            {
                okButtonControl.enabled(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LegalEntity_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for the modified event on the LegalEntity control of the HcmPositionMassUpdate form.
    /// </summary>
    /// <param name="_sender">The form control raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(HcmPositionMassUpdate, LegalEntity), FormControlEventType::Modified)]
    public static void LegalEntity_OnModified(FormControl _sender, FormControlEventArgs _e)
    {
        FormRun positionMassUpdateForm = _sender.formRun();

        FormCheckboxControl editBudgetAccountLinesGridControl = positionMassUpdateForm.design().controlName(formControlStr(HcmPositionMassUpdate, EditBudgetAccountLinesGrid)) as FormCheckBoxControl;

        editBudgetAccountLinesGridControl.checked(false);
        editBudgetAccountLinesGridControl.clicked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmPositionMassUpdate_Post_init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post-event handler for the init method of the HcmPositionMassUpdate form.
    /// </summary>
    /// <param name="_args">Args for the event.</param>
    [PostHandlerFor(formStr(HcmPositionMassUpdate), formMethodStr(HcmPositionMassUpdate, init))]
    public static void HcmPositionMassUpdate_Post_init(XppPrePostArgs _args)
    {
        FormRun positionMassUpdateForm = _args.getThis();

        HcmPositionMassUpdateBase positionMassUpdateBase = positionMassUpdateForm.parmPositionMassUpdateBase();
        Args args = positionMassUpdateBase.parmFormArgs();

        if (args.record() && args.record().TableId == tableNum(HcmPositionForecastScenario))
        {
            HcmPositionMassUpdateFormEventHandler::disableFinancialDimensionTab(args, positionMassUpdateForm);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>disableFinancialDimensionTab</Name>
				<Source><![CDATA[
    private static void disableFinancialDimensionTab(Args _args, FormRun _formRun)
    {
        FormDataSource              formDataSource;
        HcmPositionForecastScenario hcmPositionForecastScenario;
        CompanyInfoRecId            positionForecastScenariolegalEntity;

        boolean isValidPositionForecastScenario(HcmPositionForecastScenario _hcmPositionForecastScenario)
        {
            boolean isValid;

            if (positionForecastScenariolegalEntity == 0)
            {
                positionForecastScenariolegalEntity = _hcmPositionForecastScenario.LegalEntity;
            }

            if (positionForecastScenariolegalEntity == _hcmPositionForecastScenario.LegalEntity)
            {
                isValid = true;
            }

            return isValid;
        }

        formDataSource = FormDataUtil::getFormDataSource(_args.record());

        FormTabPageControl dimensionsTabPageControl = _formRun.design().controlName(formControlStr(HcmPositionMassUpdate, DimensionsTabPage)) as FormTabPageControl;
        FormStaticTextControl infoTextControl = _formRun.design().controlName(formControlStr(HcmPositionMassUpdate, InfoText)) as FormStaticTextControl;

        for (hcmPositionForecastScenario = formDataSource.getFirst(true) ? formDataSource.getFirst(true) : formDataSource.cursor(); hcmPositionForecastScenario; hcmPositionForecastScenario = formDataSource.getNext())
        {
            if (!isValidPositionForecastScenario(hcmPositionForecastScenario))
            {
                dimensionsTabPageControl.enabled(false);
                infoTextControl.text("@SYS4006560");
                break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>BudgetPurposeType_OnValidated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for the validated event on the BudgetPurposeType field on the HcmTmpBudgetPurposeType data source on the HcmPositionMassUpdate form.
    /// </summary>
    /// <param name="_sender">The form control raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataFieldEventHandler(formDataFieldStr(HcmPositionMassUpdate, HcmTmpBudgetPurposeType, BudgetPurposeType), FormDataFieldEventType::Validated)]
    public static void BudgetPurposeType_OnValidated(FormDataObject _sender, FormDataFieldEventArgs _e)
    {
        HcmTmpBudgetPurposeType tmpBudgetPurposeTypeLocal;
        HcmTmpBudgetPurposeType hcmTmpBudgetPurposeType = _sender.datasource().cursor();

        // Validate for duplicates.
        tmpBudgetPurposeTypeLocal.setTmpData(hcmTmpBudgetPurposeType);

        select firstonly RecId from tmpBudgetPurposeTypeLocal
                    where tmpBudgetPurposeTypeLocal.BudgetPurposeType == hcmTmpBudgetPurposeType.BudgetPurposeType
                    && tmpBudgetPurposeTypeLocal.LegalEntity == hcmTmpBudgetPurposeType.LegalEntity;

        if (tmpBudgetPurposeTypeLocal.RecId)
        {
            throw error("@Workforce:TheBudgetPurposeTypeIsAlreadyInUse");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmTmpBudgetPurposeType_OnInitValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for the initValue event on the HcmTmpBudgetPurposeType data source on the HcmPositionMassUpdate form.
    /// </summary>
    /// <param name="_sender">The form control raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmPositionMassUpdate, HcmTmpBudgetPurposeType), FormDataSourceEventType::InitValue)]
    public static void HcmTmpBudgetPurposeType_OnInitValue(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        HcmTmpBudgetPurposeType hcmTmpBudgetPurposeType = _sender.cursor();
        FormRun hcmPositionMassUpdateForm = _sender.formRun();

        FormStringControl legalEntityControl = hcmPositionMassUpdateForm.design().controlName(formControlStr(HcmPositionMassUpdate, LegalEntity));

        hcmTmpBudgetPurposeType.LegalEntity = CompanyInfo::current(legalEntityControl.text());;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>