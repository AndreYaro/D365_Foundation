<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustReceivableTransactionDP_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// RDP class for the <c>CustReceivableTransaction_CN</c> report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(CustReceivableTransactionContract_CN)),
    SRSReportQueryAttribute(queryStr(CustReceivableTransaction_CN))
]
public class CustReceivableTransactionDP_CN extends SRSReportDataProviderBase
{
    CustReceivableTransactionTmp_CN tmpCustReceivableTransaction_CN;
    AccountNum accountNum;

    #define.Dash('-')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBillNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Payament Id for a particular transaction voucher number and Date.
    /// </summary>
    /// <param name="voucher">
    /// Voucher no. of the customer transactions.
    /// </param>
    /// <param name="transDate">
    /// Date of the cumtomer transactions.
    /// </param>
    /// <returns>
    /// Payment Id for the particular transactions.
    /// </returns>
    private PaymId getBillNumber(Voucher voucher, TransDate transDate)
    {
        LedgerJournalTrans ledgerJournalTrans;

        select firstOnly PaymId from ledgerJournalTrans
            where ledgerJournalTrans.AccountType == LedgerJournalACType::Cust
                && ledgerJournalTrans.Voucher == voucher
                && ledgerJournalTrans.TransDate == transDate;

        return ledgerJournalTrans.PaymId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustReceivableTransactionTmp_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the data from <c>TmpCustReceivableTransaction_CN</c> Temp Table.
    /// </summary>
    /// <returns>
    /// The <c>TmpCustReceivableTransaction_CN</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(CustReceivableTransactionTmp_CN))
    ]
    public CustReceivableTransactionTmp_CN getCustReceivableTransactionTmp_CN()
    {
        return tmpCustReceivableTransaction_CN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOpeningBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the opening balance of a customer account for particular period in particular currency.
    /// </summary>
    /// <param name="accountNumber">
    /// Account Number of the customer.
    /// </param>
    /// <param name="currencyCode">
    /// Currency code of the transaction.
    /// </param>
    /// <param name="fromDate">
    /// Strting date of the period.
    /// </param>
    /// <returns>
    /// Opening balance of a customer for particular period in particular currency.
    /// </returns>
    private AmountCur getOpeningBalance(AccountNum accountNumber, CustCurrencyCode currencyCode, FromDate fromDate)
    {
        CustTrans custTransLocal;
        AmountCur openingAmountCur;
        select sum(AmountCur) from custTransLocal
            where custTransLocal.AccountNum == accountNumber
                && custTransLocal.CurrencyCode == currencyCode
                && custTransLocal.TransDate < fromDate ;

        openingAmountCur = custTransLocal.AmountCur;
        return openingAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        Query query;
        QueryRun qr;

        CustReceivableTransactionContract_CN    contract;
        LedgerFiscalPeriodNameContract_CN       ledgerFiscalPeriodNameContract_CN;

        // variables used for geeting table refrences from the query.
        CustTable                               custTable;
        CustTrans                               custTrans;
        GeneralJournalEntry_W                   generalJournalEntryW;
        SubledgerVoucherGeneralJournalEntry     subledgerVoucherEntry;

        // variables used for getting table field values.
        VoucherJournal      voucher;
        LedgerTransType     transType;
        AmountCur           amountCur;
        CustTransRefRecId   offsetRecId;
        CurrencyCode        lastCurrency;
        String255           fromPeriodLabel;
        String255           toPeriodLabel;

        AccountNum lastCustAccount;
        int years, lastYear;

        AmountMST custCurrencyOpeningBalance = 0;
        AmountMST receivable = 0;
        AmountMST takingBack = 0;

        Boolean addFlag         = false;
        NoYes isVoucherCNUsed   = LedgerParameters::find().ChineseVoucher_CN;

        contract                            = this.parmDataContract() as CustReceivableTransactionContract_CN;
        ledgerFiscalPeriodNameContract_CN   = contract.parmPeriodContract() as LedgerFiscalPeriodNameContract_CN;

        fromPeriodLabel = ledgerFiscalPeriodNameContract_CN.parmFromPeriod();
        toPeriodLabel   = ledgerFiscalPeriodNameContract_CN.parmToPeriod();

        query = this.parmQuery();
        query = CustReceivableTransactionDP_CN::initQueryByDataContract(query, contract);
        qr = new QueryRun(query);
        while (qr.next())
        {
            custTable               = qr.get(tableNum(CustTable));
            custTrans               = qr.get(tablenum(CustTrans));
            subledgerVoucherEntry   = qr.get(tableNum(SubledgerVoucherGeneralJournalEntry));
            generalJournalEntryW    = qr.get(tableNum(GeneralJournalEntry_W));

            if (isVoucherCNUsed)
            {
                voucher = generalJournalEntryW.Voucher_CN;
            }
            else
            {
                voucher = custTrans.Voucher;
            }

            amountCur = custTrans.AmountCur;
            transType = custTrans.TransType;
            offsetRecId = custTrans.OffsetRecId;

            switch (transType)
            {
                case LedgerTransType::Cust:
                case LedgerTransType::Sales:
                    receivable = amountCur;
                    takingBack = 0;
                    addFlag = true;
                    break;
                case LedgerTransType::Payment:
                    receivable = 0;
                    takingBack = amountCur;
                    addFlag = true;
                    break;
                case LedgerTransType::None:
                    if (amountCur < 0
                        && this.searchSalesInvoiceRecId(offsetRecId))
                    {
                        receivable = 0;
                        takingBack = amountcur;
                        addFlag = true;
                    }
                    else
                    {
                        receivable = 0;
                        takingBack = 0;
                        addFlag = false;
                    }
                    break;
                default:
                    if (amountCur < 0)
                    {
                        receivable = 0;
                        takingBack = amountCur;
                        addFlag = true;
                    }
                    else if (amountCur > 0)
                    {
                        receivable = amountCur;
                        takingBack = 0;
                        addFlag = true;
                    }
                    else
                    {
                        receivable = 0;
                        takingBack = 0;
                        addFlag = false;
                    }
                    break;
            }

            if (addFlag)
            {
                years = DateTimeUtil::year(DateTimeUtil::newDateTime(custTrans.TransDate, 0));
                if (lastCustAccount != custTable.AccountNum || lastCurrency != custTrans.CurrencyCode || lastYear != years)
                {
                    custCurrencyOpeningBalance = this.getOpeningBalance(custTable.AccountNum,custTrans.CurrencyCode, custTrans.TransDate);
                }
                else
                {
                    custCurrencyOpeningBalance = 0;
                }

                tmpCustReceivableTransaction_CN.Year = DateTimeUtil::year(DateTimeUtil::newDateTime(custTrans.TransDate,0));
                tmpCustReceivableTransaction_CN.Month = DateTimeUtil::month(DateTimeUtil::newDateTime(custTrans.TransDate,0));
                tmpCustReceivableTransaction_CN.Day = DateTimeUtil::day(DateTimeUtil::newDateTime(custTrans.TransDate,0));
                tmpCustReceivableTransaction_CN.TransDate = custTrans.TransDate;
                tmpCustReceivableTransaction_CN.Voucher = voucher;
                tmpCustReceivableTransaction_CN.CustNum = custTable.AccountNum;
                tmpCustReceivableTransaction_CN.CustName = DirPartyTable::getName(custTable.Party);
                tmpCustReceivableTransaction_CN.Description = custTrans.Txt;

                if (transType  == LedgerTransType::Sales
                    || transType  == LedgerTransType::Cust)
                {
                    tmpCustReceivableTransaction_CN.BillType = "@SYS14204"; // @SYS14204: Invoice
                    tmpCustReceivableTransaction_CN.BillNumber = custTrans.Invoice;
                }
                else
                {
                    tmpCustReceivableTransaction_CN.BillType = CustPaymModeTable::find(custTrans.PaymMode).Name;
                    tmpCustReceivableTransaction_CN.BillNumber = this.getBillNumber(custTrans.Voucher, custTrans.TransDate);
                }

                tmpCustReceivableTransaction_CN.CurrencyType = custTrans.CurrencyCode;
                tmpCustReceivableTransaction_CN.PeriodReceivable = receivable;
                tmpCustReceivableTransaction_CN.PeriodTakingBack = takingBack;
                tmpCustReceivableTransaction_CN.OpeningBalance = custCurrencyOpeningBalance;
                tmpCustReceivableTransaction_CN.PeriodLabel = fromPeriodLabel + #Dash + toPeriodLabel;

                tmpCustReceivableTransaction_CN.insert();

                lastCustAccount = custTable.AccountNum;
                lastCurrency = custTrans.CurrencyCode;
                lastYear = tmpCustReceivableTransaction_CN.Year;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchSalesInvoiceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches the sales invoice recid for a customer in <c>CustTrans</c> table.
    /// </summary>
    /// <param name="salesInvoiceRecId">
    /// Sales invoice recid to be searched.
    /// </param>
    /// <returns>
    /// <c>true</c> if match found; else <c>false</c> .
    /// </returns>
    private boolean searchSalesInvoiceRecId(CustTransRefRecId salesInvoiceRecId)
    {
        CustTrans custTransLocal;

        select firstOnly * from custTransLocal
            where custTransLocal.AccountNum == accountNum
                && (custTransLocal.TransType == LedgerTransType::Sales
                    || custTransLocal.TransType == LedgerTransType::Cust)
                && (salesInvoiceRecId == custTransLocal.RecId);

        if (custTransLocal.RecId && custTransLocal)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryByDataContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize query by data contract parameters
    /// </summary>
    /// <param name="_query">
    /// Primary query
    /// </param>
    /// <param name="_contract">
    /// Data contract
    /// </param>
    /// <returns>
    /// Return the query which filtered by data contract parameters.
    /// </returns>
    public static Query initQueryByDataContract(Query _query, CustReceivableTransactionContract_CN _contract)
    {
        QueryBuildDataSource    qbdsCustTrans;
        FromDate                fromDate;
        ToDate                  toDate;
        FiscalCalendarPeriod    fiscalCalendarPeriod;

        if (_contract.parmPeriodContract().parmFromDate())
        {
            fromDate = _contract.parmPeriodContract().parmFromDate();
        }
        else
        {
            fiscalCalendarPeriod = LedgerFiscalCalendar::currentLedgePeriod_CN();
            fromDate = fiscalCalendarPeriod.StartDate;
        }
        if (_contract.parmPeriodContract().parmToDate())
        {
            toDate = _contract.parmPeriodContract().parmToDate();
        }
        else
        {
            if (fiscalCalendarPeriod.RecId == 0)
            {
                fiscalCalendarPeriod = LedgerFiscalCalendar::currentLedgePeriod_CN();
            }
            toDate = fiscalCalendarPeriod.EndDate;
        }

        qbdsCustTrans = _query.dataSourceTable(tableNum(CustTrans));
        SysQuery::findOrCreateRange(qbdsCustTrans, fieldNum(CustTrans, TransDate)).value(SysQuery::range(fromDate, toDate));

        return _query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
