<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CreditCardBreakDownCaptureProcessRunner</Name>
	<SourceCode>
		<Declaration><![CDATA[
[CreditCardBreakDownPaymentStatusAttribute(CreditCardPaymentStatus::Captured)]
internal final class CreditCardBreakDownCaptureProcessRunner extends CreditCardBreakDownProcessAbsRunner
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal void new(
        CreditCardPaymentInfoContainer _salesTablePacked,
        CreditCardPaymentInfoContainer _custInvoiceJourPacked,
        CreditCardPaymentInfoContainer _mCRCustPaymTablePacked,
        CreditCardPaymentOperation _creditCardPaymentOperation,
        CreditCardPaymentBreakDownExecutionContextMode _creditCardPaymentBreakDownExecutionContextMode)
    {
        super(_salesTablePacked, _custInvoiceJourPacked, _mCRCustPaymTablePacked, _creditCardPaymentOperation, _creditCardPaymentBreakDownExecutionContextMode);

        isRefund = CreditCardBreakDownRunnerHelper::getIsRefundFromCreditCardPaymentOperation(_creditCardPaymentOperation, originCustInvoiceJour, CreditCardPaymentStatus::Captured);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static ICreditCardBreakDownProcessRun construct(
        CreditCardPaymentInfoContainer _salesTablePacked,
        CreditCardPaymentInfoContainer _custInvoiceJourPacked,
        CreditCardPaymentInfoContainer _mCRCustPaymTablePacked,
        CreditCardPaymentOperation _creditCardPaymentOperation,
        CreditCardPaymentBreakDownExecutionContextMode _creditCardPaymentBreakDownExecutionContextMode)
    {
        return new CreditCardBreakDownCaptureProcessRunner(_salesTablePacked, _custInvoiceJourPacked, _mCRCustPaymTablePacked, _creditCardPaymentOperation, _creditCardPaymentBreakDownExecutionContextMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public boolean run()
    {
        try
        {
            if (CreditCardAuthTrans::findValidCaptureOrRefundFromInvoice(executionSalesTable.SalesId, executionCustInvoiceJour.InvoiceId).RecId != 0)
            {
                info("@CashManagement:CreditCardPaymentBreakDownHasValidCCAT");
                return true;
            }

            if (CreditCardBreakDownRunnerHelper::isCustInvoiceFullySettled(executionCustInvoiceJour))
            {
                info("@CashManagement:CreditCardPaymentBreakDownInvoiceFullySettled");
                return true;
            }

            if (!CreditCardBreakDownRunnerHelper::validateCreditCardSalesTable(executionSalesTable))
            {
                error("@CashManagement:CreditCardPaymentBreakDownInvalidCreditCard");
                return false;
            }

            SalesTotals salesTotals = SalesTotals::construct(executionSalesTable);

            boolean operationResult;

            if (isRefund)
            {
                operationResult = CreditCardProcess::doRefundWithBreakDown(executionSalesTable, executionCustInvoiceJour.InvoiceId, executionCustInvoiceJour);
            }
            else
            {
                operationResult = CreditCardProcess::doCapture(executionSalesTable, salesTotals, executionCustInvoiceJour.InvoiceId, executionCustInvoiceJour);
            }

            if (!operationResult)
            {
                error(strFmt("@CashManagement:CreditCardPaymentBreakDownStageFailed", CreditCardPaymentStatus::Captured));
                return false;
            }
        }
        catch (Exception::Error)
        {
            error(strFmt("@CashManagement:CreditCardPaymentBreakDownStageFailed", CreditCardPaymentStatus::Captured));
            return false;
        }
        catch (Exception::Warning)
        {
            error(strFmt("@CashManagement:CreditCardPaymentBreakDownStageFailed", CreditCardPaymentStatus::Captured));
            return false;
        }
        catch (Exception::Info)
        {
            error(strFmt("@CashManagement:CreditCardPaymentBreakDownStageFailed", CreditCardPaymentStatus::Captured));
            return false;
        }
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRunMode</Name>
				<Source><![CDATA[
    public CreditCardBreakDownExecutionRunMode getRunMode()
    {
        return CreditCardBreakDownExecutionRunMode::MarshallingExecution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIdempotencySupported</Name>
				<Source><![CDATA[
    public boolean isIdempotencySupported()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHashVal</Name>
				<Source><![CDATA[
    public CreditCardPaymentBreakDownExecutionHashVal getHashVal()
    {
        List strToHash = new List(Types::String);
        strToHash.addEnd(any2Str(classIdGet(this)));
        strToHash.addEnd(con2base64str([executionSalesTable]));
        strToHash.addEnd(con2base64str([executionCustInvoiceJour]));
        strToHash.addEnd(con2base64str([executionMCRCustPaymTable]));
        return CreditCardPaymentHashCalculator::calculateHash(strToHash);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesTablePacked</Name>
				<Source><![CDATA[
    public container getSalesTablePacked()
    {
        return [SalesTable::findRecId(executionSalesTable.RecId)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustInvoiceJourPacked</Name>
				<Source><![CDATA[
    public container getCustInvoiceJourPacked()
    {
        return [CustInvoiceJour::findRecId(executionCustInvoiceJour.RecId)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMCRCustPaymTablePacked</Name>
				<Source><![CDATA[
    public container getMCRCustPaymTablePacked()
    {
        return conNull();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>