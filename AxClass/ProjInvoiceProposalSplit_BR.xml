<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjInvoiceProposalSplit_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Splits project invoice proposal by fiscal establishment, fiscal document type and service code
/// </summary>

class ProjInvoiceProposalSplit_BR
{
    RecordSortedList        projProposalJourList;

    projInvoiceTable        projInvoiceTable;

    ProjInvoiceType         projInvoiceType;
    InvoiceDate             invoiceDate;
    InterCompanyPosted      interCompanyPosted;
    SalesEndDiscPct         endDiscPercent;

    Map                     splitMap;
    Map                     serviceInvoiceLinesMap;
    Map                     productInvoiceLinesMap;

    FiscalEstablishment_BR  companyDefaultFiscalEstablishment;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildKey</Name>
				<Source><![CDATA[
        private str buildKey(ProjProposalTransMap_BR    _projProposalTransMap,
                         ProjFundingSourceRefId     _projFundingRefId,
                         TaxGroup                   _taxGroup,
                         CurrencyCode               _currencycode)
    {
        str                     key;
        TaxServiceCodeId_BR     serviceCodeId;
        ProjTable               projTable;

        key += this.parmProjInvoiceTable().ProjInvoiceProjId;
        key += _currencycode;
        key += int642str(_projFundingRefId);
        key += _taxGroup;

        projTable = ProjTable::find(_projProposalTransMap.ProjId);
        key += enum2str(projTable.PSAInvoiceMethod);

        if (ProjParameters::find().SplitServiceCodeInvoice)
        {
            serviceCodeId = this.getServiceCodeId(_projProposalTransMap, _projFundingRefId);

            if (!this.isProjTransAnItem(_projProposalTransMap) && !serviceCodeId)
            {
                throw Error(strfmt("@GLS61136", tableid2pname(_projProposalTransMap.TableId)));
            }

            key += serviceCodeId;
        }
        else
        {
            key += this.getCFOPId(_projProposalTransMap);
        }

        key += this.getFiscalEstablishment(_projProposalTransMap).FiscalEstablishmentId;
        key += int642str(this.getFiscaldocumentType(_projProposalTransMap, _projFundingRefId));

        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjProposalJourCreateParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>ProjProposalJourCreateParameters</c> class.
    /// </summary>
    /// <param name = "_projInvoiceType">
    /// A <c>ProjInvoiceType</c> value.
    /// </param>
    /// <param name = "_currencyId">
    /// A <c>CurrencyCode</c> value.
    /// </param>
    /// <param name = "_projFundingSourceRefId">
    /// A <c>ProjFundingSourceRefId</c> value.
    /// </param>
    /// <param name = "_invoiceDate">
    /// An <c>InvoiceDate</c> value.
    /// </param>
    /// <param name = "_interCompanyPosted">
    /// An <c>InterCompanyPosted</c> value.
    /// </param>
    /// <param name = "_psaInvoiceMethod">
    /// A <c>PSAInvoiceMethod</c> value.
    /// </param>
    /// <param name = "_taxPeriodPaymentCode">
    /// A <c>PlTaxPeriodPaymentCode</c> value.
    /// </param>
    /// <param name = "_defaultDimension">
    /// A <c>DimensionDefault</c> value.
    /// </param>
    /// <param name = "_exchRate">
    /// A <c>ExchRate</c> value.
    /// </param>
    /// <returns>
    /// The <c>ProjProposalJourCreateParameters</c> instance.
    /// </returns>
    protected ProjProposalJourCreateParameters createProjProposalJourCreateParameters(
        ProjInvoiceType           _projInvoiceType,
        CurrencyCode              _currencyId               = '',
        ProjFundingSourceRefId    _projFundingSourceRefId   = 0,
        InvoiceDate               _invoiceDate              = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        InterCompanyPosted        _interCompanyPosted       = false,
        PSAInvoiceMethod          _psaInvoiceMethod         = PSAInvoiceMethod::Progress,
        PlTaxPeriodPaymentCode    _taxPeriodPaymentCode     = '',
        DimensionDefault          _defaultDimension         = 0,
        ExchRate                  _exchRate                 = 0)
    {
        return ProjProposalJourCreateParameters::construct(
                    _projInvoiceType,
                    _currencyId,
                    _projFundingSourceRefId,
                    _invoiceDate,
                    _interCompanyPosted,
                    _psaInvoiceMethod,
                    _taxPeriodPaymentCode,
                    _defaultDimension,
                    _exchRate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjProposalJour</Name>
				<Source><![CDATA[
        private ProjProposalJour createProjProposalJour(FiscalEstablishmentRecId_BR fiscalEstablishmentRecId,
                                                    FiscalDocumentTypeRecId_BR _fiscalDocumentTypeRecId,
                                                    ProjFundingSourceRefId  _projFundingRefId,
                                                    TaxGroup                _taxGroup,
                                                    CurrencyCode            _currencyId,
                                                    ProjInvoiceProjId       _sBillTo = '',
                                                    DimensionDefault        _defaultDimension = 0,
                                                    TaxServiceCodeId_BR     _serviceCodeId = '')
    {
        ProjProposalJour rProjProposalJour;

        rProjProposalJour = projInvoiceTable.createProposalJourFromParameters(
            this.createProjProposalJourCreateParameters(
                projInvoiceType,
                _currencyId,
                _projFundingRefId,
                invoiceDate,
                this.interCompanyPosted(),
                PSAInvoiceMethod::Progress,
                '',
                _defaultDimension));

        rProjProposalJour.DiscPercent = this.parmEndDiscPercent();

        if (ProjParameters::find().SplitServiceCodeInvoice)
        {
            rProjProposalJour.TaxServiceCodeId_BR = _serviceCodeId;
        }

        rProjProposalJour.FiscalEstablishment_BR = fiscalEstablishmentRecId;
        rProjProposalJour.FiscalDocumentType_BR = _fiscalDocumentTypeRecId;
        rProjProposalJour.update();

        projProposalJourList.ins(rProjProposalJour);

        return rProjProposalJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doSplit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Splits a proposal journal.
    /// </summary>
    /// <param name="_projProposalTransMap">
    /// Table map for project transactions that need to be split.
    /// </param>
    /// <param name="_currencyCode">
    /// Currency code
    /// </param>
    /// <param name="_projFundingRefId">
    /// The project funding recId
    /// </param>
    /// <param name="_taxGroup">
    /// Project tax group
    /// </param>
    /// <param name="_sBillTo">
    /// Contract id to bill to
    /// </param>
    /// <param name="defaultDimension">
    /// The default dimension
    /// </param>
    /// <returns>
    /// Return the project invoice proposal for the transaction.
    /// </returns>

    public ProjProposalJour doSplit(ProjProposalTransMap_BR     _projProposalTransMap,
                                    CurrencyCode                _currencyCode,
                                    ProjFundingSourceRefId      _projFundingRefId,
                                    TaxGroup                    _taxGroup,
                                    ProjInvoiceProjId           _sBillTo = '',
                                    DimensionDefault            defaultDimension = 0)
    {
        str                 key;
        ProjProposalJour    projProposalJour;

        key = this.buildKey(_projProposalTransMap, _projFundingRefId, _taxGroup, _currencyCode);

        if (splitMap.exists(key))
        {
            projProposalJour = splitMap.lookup(key);
        }
        else
        {
            projProposalJour = this.createProjProposalJour(
                this.getFiscalEstablishment(_projProposalTransMap).RecId,
                this.getFiscaldocumentType(_projProposalTransMap, _projFundingRefId),
                _projFundingRefId,
                _taxGroup,
                _currencyCode,
                _sBillTo,
                defaultDimension,
                this.getServiceCodeId(_projProposalTransMap, _projFundingRefId));

            splitMap.insert(key, projProposalJour);
        }

        return projProposalJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCFOPId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the cfop id of the sales line associated with project transaction.
    /// </summary>
    /// <param name="_projProposalTransMap">
    /// Table map for project transactions that need to be split.
    /// </param>
    /// <returns>
    /// CFOPId of the sales line.
    /// </returns>
    private CFOPId_BR getCFOPId(ProjProposalTransMap_BR _projProposalTransMap)
    {
        CFOPId_BR cfopId;
        SalesLine salesLine;

        if (_projProposalTransMap.TableId == tablenum(SalesLine))
        {
            salesLine = _projProposalTransMap;
            cfopId = salesLine.SalesType == SalesType::ItemReq ? '' : substr(CFOPTable_BR::find(salesLine.salesLine_BR().CFOPTable_BR).CFOPId, 1, 1);
        }

        return cfopId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscaldocumentType</Name>
				<Source><![CDATA[
        private FiscalDocumentTypeRecID_BR getFiscaldocumentType(ProjProposalTransMap_BR _projProposalTransMap, RecId fundingSource)
    {
        SalesLine                           salesLine;
        FiscalDocumentTypeRecID_BR          fiscaldocumentTypeId;

        if (_projProposalTransMap.TableId == tableNum(SalesLine))
        {
            salesLine = _projProposalTransMap;

            fiscaldocumentTypeId = salesLine.salesLine_BR().FiscalDocumentType_BR;
        }
        else
        {
            fiscaldocumentTypeId = CustFiscalDocumentType_BR::findFiscalDocumentType(
                        ProjFundingSource::find(fundingSource).CustAccount, this.getFiscalEstablishment(_projProposalTransMap), ItemType::Service);
        }

        if (!fiscaldocumentTypeId)
        {
            throw error("@GLS62");
        }

        return fiscaldocumentTypeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalEstablishment</Name>
				<Source><![CDATA[
        private FiscalEstablishment_BR getFiscalEstablishment(ProjProposalTransMap_BR _projProposalTransMap)
    {
        FiscalEstablishment_BR              fiscalEstablishment;
        FiscalEstablishmentInventSite_BR    fiscalEstablishmentInventSite;
        SalesLine                           salesLine;
        InventDim                           inventDim;
        InventSite                          inventSite;
        DirPartyLocation                    dirPartylocation;
        LogisticsPostalAddress              logisticsPostaladdress;

        if (_projProposalTransMap.TableId == tableNum(SalesLine))
        {
            salesLine.data(_projProposalTransMap);

            select fiscalEstablishment
                exists join fiscalEstablishmentInventSite
                    where fiscalEstablishmentInventSite.FiscalEstablishment_BR == fiscalEstablishment.RecId
                exists join inventSite
                    where inventSite.SiteId == fiscalEstablishmentInventSite.InventSite
                exists join inventDim
                    where inventDim.InventSiteId == fiscalEstablishmentInventSite.InventSite
                exists join salesLine
                    where salesLine.InventDimId == inventDim.InventDimId
                        && salesLine.RecId == _projProposalTransMap.RecId;
        }
        else
        {
            if (!companyDefaultFiscalEstablishment)
            {
                logisticsPostaladdress = companyInfo::find().postalAddress();

                select fiscalEstablishment
                    exists join dirPartylocation
                        where dirPartylocation.RecId == fiscalEstablishment.DirPartyLocation
                            && dirPartylocation.Location == logisticsPostaladdress.Location;

                companyDefaultFiscalEstablishment = fiscalEstablishment;
            }
            else
            {
                fiscalEstablishment = companyDefaultFiscalEstablishment;
            }
        }

        return fiscalEstablishment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjProposalJourList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the list of created project proposals.
    /// </summary>
    /// <returns>
    /// Record list containing project proposals.
    /// </returns>
    public RecordSortedList getProjProposalJourList()
    {
        return ProjProposalJourList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getServiceCodeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the service code of the project transaction.
    /// </summary>
    /// <param name="_projProposalTransMap">
    /// Table map for project transactions that need to be split.
    /// </param>
    /// <param name="_projFundingRefId">
    /// The project funding recId
    /// </param>
    /// <returns>
    /// Service code of the transaction.
    /// </returns>
    private TaxServiceCodeId_BR getServiceCodeId(ProjProposalTransMap_BR _projProposalTransMap, ProjFundingSourceRefId _projFundingRefId)
    {
        TaxServiceCodeId_BR         serviceCodeId;
        SalesLine                   salesLine;
        LogisticsPostalAddress      invoicePostalAddress;
        CustTable                   custTable;

        switch (_projProposalTransMap.TableId)
        {
            case tablenum(SalesLine) :
                salesLine = _projProposalTransMap;
                if (salesLine.SalesType == SalesType::ItemReq) // item is sold always as service, read service code from category
                {
                    serviceCodeId = ProjCategory::find(_projProposalTransMap.ProjCategoryId).TaxServiceCodeId_BR;
                }
                else
                {
                    serviceCodeId = salesLine.salesLine_BR().TaxServiceCode_BR;
                }
                break;

            case tablenum(ProjOnAccTrans) : // ProjOnAccTrans do not have category, use service code directly
                serviceCodeId = _projProposalTransMap.ServiceCodeId;
                break;

            default :
                serviceCodeId = ProjCategory::find(_projProposalTransMap.ProjCategoryId).TaxServiceCodeId_BR;
        }

        custTable = CustTable::find(ProjFundingSource::find(_projFundingRefId).CustAccount);

        if (custTable.ServiceCodeOnDlvAddress_BR)
        {
            invoicePostalAddress = custTable.postalAddress();

            serviceCodeId = TaxServiceCode_BR::findDlvServiceCode(serviceCodeId, invoicePostalAddress.CountryRegionId, invoicePostalAddress.State, invoicePostalAddress.City).ServiceCodeId;
        }

        return serviceCodeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyPosted</Name>
				<Source><![CDATA[
        public InterCompanyPosted interCompanyPosted(InterCompanyPosted _interCompanyPosted = interCompanyPosted)
    {
        interCompanyPosted = _interCompanyPosted;

        return interCompanyPosted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjTransAnItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns if a transaction is a item or not.
    /// </summary>
    /// <param name="_projProposalTransMap">
    /// Table map for project transactions that need to be split.
    /// </param>
    /// <returns>
    /// True when sales type is an item requirement (all item requirements are services) or for other sales types, method returns true just when item type is Service.
    /// False if the transaction is associated with a service.
    /// </returns>
    private boolean isProjTransAnItem(ProjProposalTransMap_BR _projProposalTransMap)
    {
        SalesLine       salesLine;
        boolean         isItem = false;

        if (_projProposalTransMap.TableId == tablenum(SalesLine))
        {
            salesLine = _projProposalTransMap;

            if (salesLine.SalesType == SalesType::ItemReq)
            {
                isItem = false;
            }
            else
            {
                isItem = salesLine.inventTable().ItemType != ItemType::Service ? true : false;
            }
        }

        return isItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProposalJourCreated</Name>
				<Source><![CDATA[
        public boolean isProposalJourCreated()
    {
        return projProposalJourList.len() != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        void new(ProjInvoiceTable _projInvoiceTable, ProjInvoiceType _projInvoiceType)
    {
        projProposalJourList = new RecordSortedList(tablenum(ProjProposalJour));
        projProposalJourList.sortOrder(fieldnum(ProjProposalJour, RecId));

        splitMap = new Map(Types::String, Types::Record);

        serviceInvoiceLinesMap = new Map(Types::String, Types::Integer);
        productInvoiceLinesMap = new Map(Types::String, Types::Integer);

        projInvoiceTable = _projInvoiceTable;
        projInvoiceType = _projInvoiceType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndDiscPercent</Name>
				<Source><![CDATA[
        public SalesEndDiscPct parmEndDiscPercent(SalesEndDiscPct _endDiscPercent = endDiscPercent)
    {
        endDiscPercent = _endDiscPercent;

        return endDiscPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceDate</Name>
				<Source><![CDATA[
        public InvoiceDate parmInvoiceDate(InvoiceDate _invoiceDate = invoiceDate)
    {
        invoiceDate = _invoiceDate;

        return invoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjInvoiceTable</Name>
				<Source><![CDATA[
        public ProjInvoiceTable parmProjInvoiceTable(ProjInvoiceTable _projInvoiceTable = projInvoiceTable)
    {
        projInvoiceTable = _projInvoiceTable;

        return projInvoiceTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>