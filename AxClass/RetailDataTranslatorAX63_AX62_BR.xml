<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailDataTranslatorAX63_AX62_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Implements the Z report transformation class to update from 6.2 (v1) to 6.3 (v2+)
/// </summary>
class RetailDataTranslatorAX63_AX62_BR
{
    RetailStatementId           statementId;
    RetailStoreId               storeId;
    FiscalEstablishmentId_BR    fiscalEstablishmentId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustAmountSumDifference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the rounding difference between the Z report totalizer and the sum of its tax transactions.
    /// </summary>
    /// <param name="_totalizer">
    /// The reference Z report totalizer.
    /// </param>
    /// <remarks>
    /// It will handle both cases of differences above and below the sum of the tax transactions.
    /// The difference is distributed among all tax transactions sorted by their tax amounts.
    /// </remarks>
    public void adjustAmountSumDifference(RetailZReportTotalizer_BR   _totalizer)
    {
        int         i;
        RecId       totalizerTaxTransRecId;
        Amount      delta;
        Amount      incrementAmount;
        Amount      totalTaxAmount;
        container   totalizerTaxTransCon;

        RetailZReportTotalizerTaxTrans_BR   totalizerTaxTrans;

        while select forUpdate * from totalizerTaxTrans
            order by TaxAmount desc
            where   totalizerTaxTrans.AdditionalFiscalMemoryIndex   == _totalizer.AdditionalFiscalMemoryIndex
                &&  totalizerTaxTrans.FiscalPrinterSerialNumber     == _totalizer.FiscalPrinterSerialNumber
                &&  totalizerTaxTrans.StoreId           == _totalizer.StoreId
                &&  totalizerTaxTrans.TerminalId        == _totalizer.TerminalId
                &&  totalizerTaxTrans.TotalizerName     == _totalizer.TotalizerName
                &&  totalizerTaxTrans.ZReportNumber     == _totalizer.ZReportNumber
        {
            totalizerTaxTransCon    += [totalizerTaxTrans.RecId];
            totalTaxAmount          += totalizerTaxTrans.TaxAmount;
        }

        if (conLen(totalizerTaxTransCon) > 0 && _totalizer.TaxAmount != totalTaxAmount)
        {
            delta = _totalizer.TaxAmount - totalTaxAmount;
            incrementAmount = delta > 0 ? 0.01 : -0.01;

            while (delta != 0)
            {
                for (i = 1; i <= conLen(totalizerTaxTransCon) && delta != 0; i++)
                {
                    totalizerTaxTransRecId = conPeek(totalizerTaxTransCon, i);

                    select firstOnly forUpdate totalizerTaxTrans
                        where totalizerTaxTrans.RecId == totalizerTaxTransRecId;

                    if (totalizerTaxTrans)
                    {
                        totalizerTaxTrans.TaxAmount += incrementAmount;
                        totalizerTaxTrans.update();

                        delta -= incrementAmount;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findZReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a Z report given a PrintZ transaction
    /// </summary>
    /// <param name="_transactionTablePrintZ">
    /// The <c>RetailTransactionTable</c> record as reference
    /// </param>
    /// <returns>
    /// The <c>RetailZReport_BR</c> record related to the <c>RetailTransactionTable</c> record
    /// </returns>
    /// <remarks>
    /// This method also populate the transactionID and fiscalEstablishment fields on the Z report
    /// </remarks>
    protected RetailZReport_BR findZReport(RetailTransactionTable  _transactionTablePrintZ)
    {
        TransDate   fromDate;
        TransDate   toDate;

        RetailTransactionTable  transactionTableSales;
        RetailZReport_BR        retailZReport;

        // Check if the Z report was not already translated
        select forUpdate retailZReport
            where   retailZReport.TransactionId == _transactionTablePrintZ.transactionId
                &&  retailZReport.TerminalId    == _transactionTablePrintZ.terminal
                &&  retailZReport.StoreId       == _transactionTablePrintZ.store
                &&  retailZReport.Version       == RetailZReportVersion_BR::v2;

        if (!retailZReport)
        {
            fromDate    = _transactionTablePrintZ.businessDate - 1;
            toDate      = _transactionTablePrintZ.businessDate;

            // Find the last Sales transaction before this PrintZ transaction
            select firstOnly * from transactionTableSales
                order by transactionTableSales.transactionId desc
                where   transactionTableSales.transactionId < _transactionTablePrintZ.transactionId
                    &&  transactionTableSales.store         == _transactionTablePrintZ.Store
                    &&  transactionTableSales.terminal      == _transactionTablePrintZ.Terminal
                    &&  transactionTableSales.type          == RetailTransactionType::Sales
                    &&  transactionTableSales.businessDate  >= fromDate
                    &&  transactionTableSales.businessDate  <= toDate
                    &&  transactionTableSales.receiptId     != '';

            if (!transactionTableSales)
            {
                throw error(strFmt( "@SYP4930026",
                                    enum2str(RetailTransactionType::Sales),
                                    enum2str(RetailTransactionType::PrintZ),
                                    _transactionTablePrintZ.transactionId,
                                    _transactionTablePrintZ.store,
                                    _transactionTablePrintZ.terminal));
            }

            // Find the Z report that contains that last fiscal receipt
            select forUpdate retailZReport
                where   retailZReport.LastReceiptNumber == str2int(transactionTableSales.receiptId) + 1
                    &&  retailZReport.AccountingDate    == _transactionTablePrintZ.businessDate
                    &&  retailZReport.StoreId           == _transactionTablePrintZ.store
                    &&  retailZReport.TerminalId        == _transactionTablePrintZ.terminal;

            if (!retailZReport)
            {
                throw error(strFmt( "@SYP4930025",
                                    "@RET4040083",
                                    enum2str(RetailTransactionType::PrintZ),
                                    _transactionTablePrintZ.transactionId,
                                    _transactionTablePrintZ.store,
                                    _transactionTablePrintZ.terminal));
            }

            retailZReport.TransactionId         = _transactionTablePrintZ.transactionId;
            retailZReport.FiscalEstablishment   = this.parmFiscalEstablishmentId();
            retailZReport.Version               = RetailZReportVersion_BR::v1;
            retailZReport.update();
        }

        return retailZReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertZReportTotalizerTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the Z report totalizer tax transactions based on the given Z report totalizer.
    /// </summary>
    /// <param name="_totalizer">
    /// The given <c>RetailZReportTotalizer_BR</c> record with the Z report totalizer.
    /// </param>
    /// <remarks>
    /// Created by grouping all fiscal receipt tax transactions linked to the totalizer.
    /// </remarks>
    public void insertZReportTotalizerTaxTrans(RetailZReportTotalizer_BR _totalizer)
    {
        RetailZReportTotalizerTaxTrans_BR   totalizerTaxTrans;
        RetailFiscalReceipt_BR              fiscalReceipt;
        RetailFiscalReceiptLine_BR          fiscalReceiptLine;
        RetailFiscalReceiptTaxTrans_BR      fiscalReceiptTaxTrans;

        while select TaxationOrigin, TaxationCode, TaxValue, TaxType, FiscalValue, TaxCode, sum(TaxBaseAmount)
            from fiscalReceiptTaxTrans
                group by TaxCode, TaxationCode, FiscalValue, TaxValue, TaxType
        join CFOP
            from fiscalReceiptLine
                group by CFOP
            where   fiscalReceiptLine.StoreId           == fiscalReceiptTaxTrans.StoreId
                &&  fiscalReceiptLine.TerminalId        == fiscalReceiptTaxTrans.TerminalId
                &&  fiscalReceiptLine.TransactionId     == fiscalReceiptTaxTrans.TransactionId
                &&  fiscalReceiptLine.LineNum           == fiscalReceiptTaxTrans.LineNum
        exists join fiscalReceipt
            where   fiscalReceipt.StoreId           == fiscalReceiptLine.StoreId
                &&  fiscalReceipt.TerminalId        == fiscalReceiptLine.TerminalId
                &&  fiscalReceipt.TransactionId     == fiscalReceiptLine.TransactionId
                &&  fiscalReceipt.ZReportNumber                 == _totalizer.ZReportNumber
                &&  fiscalReceipt.AdditionalFiscalMemoryIndex   == _totalizer.AdditionalFiscalMemoryIndex
                &&  fiscalReceipt.FiscalPrinterSerialNumber     == _totalizer.FiscalPrinterSerialNumber
                &&  fiscalReceipt.TerminalId                    == _totalizer.TerminalId
                &&  fiscalReceipt.StoreId                       == _totalizer.StoreId
                &&  fiscalReceipt.Status                        == FiscalDocumentStatus_BR::Approved
                &&  fiscalReceiptLine.CancelledQuantity         == 0
                &&  fiscalReceiptTaxTrans.TaxType               == TaxType_BR::ICMS
                &&  fiscalReceiptTaxTrans.TotalizerName         == _totalizer.TotalizerName
        {
            totalizerTaxTrans.clear();

            switch (fiscalReceiptTaxTrans.FiscalValue)
            {
                case TaxFiscalValue_BR::WithCreditDebit:
                    totalizerTaxTrans.TaxBaseAmount = fiscalReceiptTaxTrans.TaxBaseAmount;
                    break;

                case TaxFiscalValue_BR::WithoutCreditDebitExempt:
                    totalizerTaxTrans.TaxBaseAmountExempt = fiscalReceiptTaxTrans.TaxBaseAmount;
                    break;

                case TaxFiscalValue_BR::WithoutCreditDebitOther:
                    totalizerTaxTrans.TaxBaseAmountOther = fiscalReceiptTaxTrans.TaxBaseAmount;
                    break;
            }

            totalizerTaxTrans.AdditionalFiscalMemoryIndex   = _totalizer.AdditionalFiscalMemoryIndex;
            totalizerTaxTrans.ZReportNumber                 = _totalizer.ZReportNumber;
            totalizerTaxTrans.FiscalPrinterSerialNumber     = _totalizer.FiscalPrinterSerialNumber;

            totalizerTaxTrans.CFOP              = fiscalReceiptLine.CFOP;
            totalizerTaxTrans.FiscalValue       = fiscalReceiptTaxTrans.FiscalValue;
            totalizerTaxTrans.TaxationOrigin    = RetailDataTranslatorAX63_AX62_BR::getTaxationOrigin(fiscalReceiptTaxTrans.TaxationCode);
            totalizerTaxTrans.TaxationCode      = RetailDataTranslatorAX63_AX62_BR::getTaxationCode(fiscalReceiptTaxTrans.TaxationCode);

            totalizerTaxTrans.TaxAmount         = CurrencyExchangeHelper::amount(fiscalReceiptTaxTrans.TaxBaseAmount * fiscalReceiptTaxTrans.TaxValue / 100);
            totalizerTaxTrans.TaxValue          = fiscalReceiptTaxTrans.TaxValue;
            totalizerTaxTrans.TaxCode           = fiscalReceiptTaxTrans.TaxCode;
            totalizerTaxTrans.TotalizerName     = _totalizer.TotalizerName;
            totalizerTaxTrans.TaxType           = fiscalReceiptTaxTrans.TaxType;

            totalizerTaxTrans.StoreId           = _totalizer.StoreId;
            totalizerTaxTrans.TerminalId        = _totalizer.TerminalId;

            totalizerTaxTrans.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalEstablishmentId</Name>
				<Source><![CDATA[
    public FiscalEstablishmentId_BR parmFiscalEstablishmentId(FiscalEstablishmentId_BR _fiscalEstablishmentId = fiscalEstablishmentId)
    {
        fiscalEstablishmentId = _fiscalEstablishmentId;

        return fiscalEstablishmentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStatementId</Name>
				<Source><![CDATA[
    public RetailStatementId parmStatementId(RetailStatementId _statementId = statementId)
    {
        statementId = _statementId;

        return statementId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStoreId</Name>
				<Source><![CDATA[
    public RetailStoreId parmStoreId(RetailStoreId _storeId = storeId)
    {
        storeId = _storeId;

        return storeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transformFiscalReceipts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the fiscal receipts transformations from source to target versions.
    /// </summary>
    /// <remarks>
    /// This will include transforming related tables, such as Retail transactions, lines and tax trans.
    /// </remarks>
    protected void transformFiscalReceipts()
    {
        this.updateTaxAmountICMS();
        this.updateFiscalEstablishment();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transformZReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the Z report transformations from source to target versions.
    /// </summary>
    /// <param name="_transactionTablePrintZ">
    /// The <c>RetailTransactionTable</c> record that points to the <c>RetailZReport_BR</c> record to be translated.
    /// </param>
    /// <remarks>
    /// This will include transforming related tables, such as totalizers and totalizers tax trans.
    /// </remarks>
    protected void transformZReport(RetailTransactionTable  _transactionTablePrintZ)
    {
        RetailZReport_BR retailZReport = this.findZReport(_transactionTablePrintZ);

        if (retailZReport.Version == RetailZReportVersion_BR::v1)
        {
            this.updateCancelledTotalizerName(retailZReport);
            this.updateZReportTotalizer(retailZReport);

            retailZReport.Version = RetailZReportVersion_BR::v2;
            retailZReport.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCancelledTotalizerName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the name of totalizers of type cancelled
    /// </summary>
    /// <param name="_retailZReport">
    /// The <c>RetailZReport_BR</c> record from where the totalizers are retrieved
    /// </param>
    /// <remarks>
    /// Transformations:
    /// 1) All totalizer names at cancelled headers/lines are changed to 'Can-T'
    /// </remarks>
    protected void updateCancelledTotalizerName(RetailZReport_BR _retailZReport)
    {
        RetailFiscalReceipt_BR          fiscalReceipt;
        RetailFiscalReceiptLine_BR      fiscalReceiptLine;
        RetailFiscalReceiptTaxTrans_BR  fiscalReceiptTaxTrans;

        update_recordset fiscalReceiptTaxTrans
            setting TotalizerName = 'Can-T'
            where fiscalReceiptTaxTrans.TaxType     == TaxType_BR::ICMS
        exists join fiscalReceiptLine
            where   fiscalReceiptLine.TransactionId == fiscalReceiptTaxTrans.TransactionId
                &&  fiscalReceiptLine.TerminalId    == fiscalReceiptTaxTrans.TerminalId
                &&  fiscalReceiptLine.StoreId       == fiscalReceiptTaxTrans.StoreId
                &&  fiscalReceiptLine.LineNum       == fiscalReceiptTaxTrans.LineNum
        exists join fiscalReceipt
            where   fiscalReceipt.TransactionId             == fiscalReceiptLine.TransactionId
                &&  fiscalReceipt.TerminalId                == fiscalReceiptLine.TerminalId
                &&  fiscalReceipt.StoreId                   == fiscalReceiptLine.StoreId
                &&  (   fiscalReceipt.Status                == FiscalDocumentStatus_BR::Cancelled
                    ||  fiscalReceiptLine.CancelledQuantity == fiscalReceiptLine.Quantity)
                &&  fiscalReceipt.AdditionalFiscalMemoryIndex   == _retailZReport.AdditionalFiscalMemoryIndex
                &&  fiscalReceipt.FiscalPrinterSerialNumber     == _retailZReport.FiscalPrinterSerialNumber
                &&  fiscalReceipt.ZReportNumber                 == _retailZReport.ZReportNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFiscalEstablishment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the fiscal establishment information at the fiscal receipts
    /// </summary>
    protected void updateFiscalEstablishment()
    {
        RetailFiscalReceipt_BR  fiscalReceipt;
        RetailTransactionTable  transactionTable;

        // Zero the tax amount of all fiscal receipt tax trans of type ICMS
        update_recordSet fiscalReceipt
            setting fiscalEstablishment = fiscalEstablishmentId
            where   fiscalReceipt.fiscalEstablishment   == ''
        exists join transactionTable
            where   transactionTable.TransactionId      == fiscalReceipt.TransactionId
                &&  transactionTable.Terminal           == fiscalReceipt.TerminalId
                &&  transactionTable.Store              == fiscalReceipt.StoreId
                &&  transactionTable.Store              == storeId
                &&  transactionTable.Type               == RetailTransactionType::Sales
                &&  transactionTable.StatementId        == statementId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxAmountICMS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the tax amounts of all current ICMS tax lines
    /// </summary>
    /// <remarks>
    /// This method can be ran multiple times.
    /// Transformations:
    /// 1) Adjust headers and line with ICMS tax amounts.
    /// 2) Zero all ICMS tax amounts.
    /// </remarks>
    protected void updateTaxAmountICMS()
    {
        RetailTransactionTable          transactionTable;
        RetailTransactionSalesTrans     transactionLine;
        RetailTransactionTaxTrans       transactionTaxTrans;
        RetailFiscalReceiptTaxTrans_BR  fiscalReceiptTaxTrans;
        RetailFiscalReceiptTaxTrans_BR  fiscalReceiptTaxTransFilter;

        // Update the Retail transaction lines using the ICMS tax trans amount
        update_recordSet transactionLine
            setting netAmount = transactionLine.netAmount - fiscalReceiptTaxTrans.TaxAmount,
                    taxAmount = transactionLine.taxAmount + fiscalReceiptTaxTrans.TaxAmount
        join fiscalReceiptTaxTrans
            where   fiscalReceiptTaxTrans.TransactionId == transactionLine.TransactionId
                &&  fiscalReceiptTaxTrans.TerminalId    == transactionLine.TerminalId
                &&  fiscalReceiptTaxTrans.StoreId       == transactionLine.Store
                &&  fiscalReceiptTaxTrans.LineNum       == transactionLine.lineNum
                &&  fiscalReceiptTaxTrans.TaxType       == TaxType_BR::ICMS
                &&  fiscalReceiptTaxTrans.TaxAmount     != 0.0
        exists join transactionTable
            where   transactionTable.TransactionId      == transactionLine.TransactionId
                &&  transactionTable.Terminal           == transactionLine.TerminalId
                &&  transactionTable.Store              == transactionLine.Store
                &&  transactionTable.Store              == this.parmStoreId()
                &&  transactionTable.Type               == RetailTransactionType::Sales
                &&  transactionTable.EntryStatus        == RetailEntryStatus::None
                &&  transactionTable.StatementId        == this.parmStatementId();

        // Update the Retail transaction header using the sum of ICMS tax trans amounts
        // (order by and group by clauses are not allowed in update_recordSet statements)
        while select forUpdate transactionTable
            where   transactionTable.store              == this.parmStoreId()
                &&  transactionTable.Type               == RetailTransactionType::Sales
                &&  transactionTable.EntryStatus        == RetailEntryStatus::None
                &&  transactionTable.StatementId        == this.parmStatementId()
        exists join fiscalReceiptTaxTransFilter
            where   fiscalReceiptTaxTransFilter.TransactionId   == transactionTable.TransactionId
                &&  fiscalReceiptTaxTransFilter.TerminalId      == transactionTable.Terminal
                &&  fiscalReceiptTaxTransFilter.StoreId         == transactionTable.Store
                &&  fiscalReceiptTaxTransFilter.TaxType         == TaxType_BR::ICMS
                &&  fiscalReceiptTaxTransFilter.TaxAmount       != 0.0
        {
            select sum(TaxAmount) from fiscalReceiptTaxTrans
                where   fiscalReceiptTaxTrans.TransactionId == transactionTable.TransactionId
                    &&  fiscalReceiptTaxTrans.TerminalId    == transactionTable.Terminal
                    &&  fiscalReceiptTaxTrans.StoreId       == transactionTable.Store
                    &&  fiscalReceiptTaxTrans.TaxType       == TaxType_BR::ICMS;

            transactionTable.netAmount = transactionTable.netAmount - fiscalReceiptTaxTrans.TaxAmount;
            transactionTable.update();
        }

        // Zero the tax amount of all Retail tax trans of type ICMS
        update_recordSet transactionTaxTrans
            setting Amount = 0.0
            where   transactionTaxTrans.Amount          != 0.0
        exists join fiscalReceiptTaxTrans
            where   fiscalReceiptTaxTrans.TransactionId == transactionTaxTrans.TransactionId
                &&  fiscalReceiptTaxTrans.TerminalId    == transactionTaxTrans.TerminalId
                &&  fiscalReceiptTaxTrans.StoreId       == transactionTaxTrans.StoreId
                &&  fiscalReceiptTaxTrans.LineNum       == transactionTaxTrans.SaleLineNum
                &&  fiscalReceiptTaxTrans.TaxCode       == transactionTaxTrans.TaxCode
                &&  fiscalReceiptTaxTrans.TaxType       == TaxType_BR::ICMS
        exists join transactionTable
            where   transactionTable.TransactionId      == transactionTaxTrans.TransactionId
                &&  transactionTable.Terminal           == transactionTaxTrans.TerminalId
                &&  transactionTable.Store              == transactionTaxTrans.StoreId
                &&  transactionTable.Store              == this.parmStoreId()
                &&  transactionTable.Type               == RetailTransactionType::Sales
                &&  transactionTable.EntryStatus        == RetailEntryStatus::None
                &&  transactionTable.StatementId        == this.parmStatementId();

        // Zero the tax amount of all fiscal receipt tax trans of type ICMS
        update_recordSet fiscalReceiptTaxTrans
            setting TaxAmount = 0.0
            where   fiscalReceiptTaxTrans.TaxType       == TaxType_BR::ICMS
                &&  fiscalReceiptTaxTrans.TaxAmount     != 0.0
        exists join transactionTable
            where   transactionTable.TransactionId      == fiscalReceiptTaxTrans.TransactionId
                &&  transactionTable.Terminal           == fiscalReceiptTaxTrans.TerminalId
                &&  transactionTable.Store              == fiscalReceiptTaxTrans.StoreId
                &&  transactionTable.Store              == this.parmStoreId()
                &&  transactionTable.Type               == RetailTransactionType::Sales
                &&  transactionTable.EntryStatus        == RetailEntryStatus::None
                &&  transactionTable.StatementId        == this.parmStatementId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateZReportTotalizer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transforms the Z report totalizer related to the Z report
    /// </summary>
    /// <param name="_retailZReport">
    /// The <c>RetailZReport_BR</c> record from where the totalizers are retrieved
    /// </param>
    /// <remarks>
    /// Transformations:
    /// 1) Assigns the tax value and tax amount fields that are new to V2.
    /// 2) Populates the Z report totalizer tax trans.
    /// </remarks>
    protected void updateZReportTotalizer(RetailZReport_BR _retailZReport)
    {
        RetailZReportTotalizer_BR   totalizer;

        while select forUpdate totalizer
            where   totalizer.FiscalPrinterSerialNumber     == _retailZReport.FiscalPrinterSerialNumber
                &&  totalizer.AdditionalFiscalMemoryIndex   == _retailZReport.AdditionalFiscalMemoryIndex
                &&  totalizer.ZReportNumber                 == _retailZReport.ZReportNumber
        {
            totalizer.TaxValue  = RetailDataTranslatorAX63_AX62_BR::getTaxValue(totalizer.TotalizerName);
            totalizer.TaxAmount = CurrencyExchangeHelper::amount(totalizer.TotalizerAmount * totalizer.TaxValue / 100);
            totalizer.update();

            this.insertZReportTotalizerTaxTrans(totalizer);
            this.adjustAmountSumDifference(totalizer);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChannelSchemaType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the channel schema type associated to the store.
    /// </summary>
    /// <param name="_retailStoreTable">
    /// The <c>RetailStoreTable</c> record with the store.
    /// </param>
    /// <returns>
    /// A <c>RetailConnChannelSchemaTypeEnum</c> value with the channel schema type.
    /// </returns>
    public static RetailConnChannelSchemaTypeEnum getChannelSchemaType(RetailStoreTable   _retailStoreTable)
    {
        RetailConnChannelSchema     channelSchema;
        RetailCDXDataGroup          dataGroup;
        RetailConnDatabaseProfile   databaseProfile;
        RetailCDXDataStoreChannel   dataStoreChannel;

        select SchemaType from channelSchema
            exists join dataGroup
                where   dataGroup.ChannelSchema == channelSchema.RecId
            exists join databaseProfile
                where   databaseProfile.DataGroup   == dataGroup.RecId
            exists join dataStoreChannel
                where   dataStoreChannel.DatabaseProfile    == databaseProfile.RecId
                    &&  dataStoreChannel.Channel            == _retailStoreTable.RecId;

        return channelSchema.SchemaType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxationCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the taxation code based on the tributary situation code (CST).
    /// </summary>
    /// <param name="_tributarySituation">
    /// The given tributary situation code (CST).
    /// </param>
    /// <returns>
    /// The taxation code.
    /// </returns>
    /// <remarks>
    /// It expects the V1 format from fiscal receipt tax trans with three digits.
    /// </remarks>
    protected static TaxationCode_BR getTaxationCode(str _tributarySituation)
    {
        if (strLen(_tributarySituation) == 3)
        {
            return subStr(_tributarySituation, 2, 2);
        }

        return '00';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxationOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the taxation original based on the tributary situation code (CST).
    /// </summary>
    /// <param name="_tributarySituation">
    /// The given tributary situation code (CST).
    /// </param>
    /// <returns>
    /// The taxation origin.
    /// </returns>
    /// <remarks>
    /// It expects the V1 format from fiscal receipt tax trans with three digits.
    /// </remarks>
    protected static FITaxationOrigin_BR getTaxationOrigin(str _tributarySituation)
    {
        FITaxationOrigin_BR ret = FITaxationOrigin_BR::National;

        if (strLen(_tributarySituation) == 3)
        {
            ret = str2int(subStr(_tributarySituation, 1, 1));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the tax value given the Z report totalizer name.
    /// </summary>
    /// <param name="_totalizerName">
    /// The given Z report totalizer name.
    /// </param>
    /// <returns>
    /// The tax value.
    /// </returns>
    /// <remarks>
    /// If it does not match the iiXnnnn or Xnnnn formats, then it should return 0.
    /// </remarks>
    public static TaxValue getTaxValue(RetailTotalizerName_BR _totalizerName)
    {
        TaxValue taxValue;

        // iiXnnnn
        if (strLen(_totalizerName) == 7)
        {
            taxValue = str2num(subStr(_totalizerName, 4, 4)) / 100;
        }
        // Xnnnn
        else if (strLen(_totalizerName) == 5)
        {
            taxValue = str2num(subStr(_totalizerName, 2, 4)) / 100;
        }

        return taxValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the data translation of all transactions being calculated in the statement.
    /// </summary>
    /// <param name="_statementId">
    /// The statement ID being calculated.
    /// </param>
    /// <param name="_storeId">
    /// The store ID of the statement.
    /// </param>
    /// <remarks>
    /// This method has to be called before posting the retail transactions.
    /// </remarks>
    public static void processTransactions( RetailStatementId   _statementId,
                                            RetailStoreId       _storeId)
    {
        RetailTransactionTable              transactionTable;
        RetailDataTranslatorAX63_AX62_BR    dataTranslator;

        ttsBegin;

        dataTranslator = new RetailDataTranslatorAX63_AX62_BR();

        dataTranslator.parmStatementId(_statementId);
        dataTranslator.parmStoreId(_storeId);
        dataTranslator.parmFiscalEstablishmentId(RetailStoreTable::find(_storeId).fiscalEstablishment_BR().FiscalEstablishmentId);

        // Process all the sales transactions before the Z report
        dataTranslator.transformFiscalReceipts();

        // Process all the Z reports assuming the sales transactions were already processed
        while select * from transactionTable
            where transactionTable.store        == _storeId
                && transactionTable.Type        == RetailTransactionType::PrintZ
                && transactionTable.EntryStatus == RetailEntryStatus::None
                && transactionTable.StatementId == _statementId
        {
            dataTranslator.transformZReport(transactionTable);
        }

        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
