<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustLedgerTransDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustLedgerTransDP</c> class declares the variables that are required for the
/// <c>CustLedgerTrans</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(CustLedgerTrans)),
    SRSReportParameterAttribute(classStr(CustLedgerTransContract))
]
public class CustLedgerTransDP extends SRSReportDataProviderBase
{
    CustLedgerTransTmp custLedgerTransTmp;
    boolean totals;
    boolean showOnlyMainAccount;
    BillingClassification billingClassification;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCustLedgerTransTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the data from the <c>CustLedgerTransTmp</c> temporary table.
    /// </summary>
    /// <returns>
    ///    The data that is inserted into the temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(CustLedgerTransTmp))
    ]
    public CustLedgerTransTmp getCustLedgerTransTmp()
    {
        select custLedgerTransTmp;
        return custLedgerTransTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustLedgerTransTmp</Name>
				<Source><![CDATA[
        private void insertCustLedgerTransTmp(CustName _custName,
                                            CustTrans _custTrans,
                                            LedgerPostingType _postingType,
                                            boolean _isCredit,
                                            AmountCur _transactionCurrencyAmount,
                                            AmountMst _accountingCurrencyAmount,
                                            MainAccountNum _mainAccountId,
                                            DimensionDisplayValue _fullyQualifiedAccount,
                                            TraceNum _traceNum)
    {
        custLedgerTransTmp.clear();
        custLedgerTransTmp.CustName = _custName;

        custLedgerTransTmp.AccountNum = _custTrans.AccountNum;
        custLedgerTransTmp.TransDate = _custTrans.TransDate;
        custLedgerTransTmp.Voucher = _custTrans.Voucher;
        custLedgerTransTmp.InvoiceId = _custTrans.Invoice;
        custLedgerTransTmp.Txt = _custTrans.Txt;
        custLedgerTransTmp.Currency = _custTrans.CurrencyCode;

        custLedgerTransTmp.TraceNum = _traceNum;

        custLedgerTransTmp.MainAccountId = _mainAccountId;
        custLedgerTransTmp.LedgerAccount = _fullyQualifiedAccount;

        custLedgerTransTmp.Posting = enum2str(_postingType);

        if (_isCredit)
        {
            custLedgerTransTmp.CreditAmountCur = -_transactionCurrencyAmount;
            custLedgerTransTmp.CreditAmountMST = -_accountingCurrencyAmount;
        }
        else
        {
            custLedgerTransTmp.DebitAmountCur = _transactionCurrencyAmount;
            custLedgerTransTmp.DebitAmountMST = _accountingCurrencyAmount;
        }

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            custLedgerTransTmp.FiscalEstablishmentId = _custTrans.fiscalEstablishmentId_BR();
        }
        // </GBR>
        else if (billingClassification)
        {
            custLedgerTransTmp.BillingClassification = billingClassification;
        }

        custLedgerTransTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateReportData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the records based on the parameter values entered and inserts the records into the.
    ///     <c>custLedgerTransTmp</c> temporary table.
    /// </summary>
    /// <param name="custLedgerTransBuf">
    ///     A <paramref name="custLedgerTransBuf" /> value.
    /// </param>
    private void populateReportData(CustLedgerTransBuf custLedgerTransBuf)
    {
        GeneralJournalAccountEntry generalJournalAccountEntry;
        GeneralJournalEntry generalJournalEntry;
        SubledgerJournalAccountEntry subledgerJournalAccountEntry;
        SubledgerJournalEntry subledgerJournalEntry;
        MainAccount mainAccount;

        CustLedgerTransBuf distinctCustLedgerTransBuf;
        insert_recordset distinctCustLedgerTransBuf
            (TransDate, VoucherDataAreaId, Voucher, InvoiceId, HasSourceDocumentData)
        select TransDate, VoucherDataAreaId, Voucher, InvoiceId, HasSourceDocumentData
            from custLedgerTransBuf
            group by custLedgerTransBuf.TransDate, 
                custLedgerTransBuf.VoucherDataAreaId,
                custLedgerTransBuf.Voucher, 
                custLedgerTransBuf.InvoiceId,
                custLedgerTransBuf.HasSourceDocumentData;

        // Insert records selected from subledger journal.
        insert_recordset custLedgerTransTmp
        (
            TransDate,
            Voucher,
            InvoiceId,
            PostingType,
            TransactionCurrencyAmount,
            AccountingCurrencyAmount,
            ReportingCurrencyAmount,
            CreditDebit,
            LedgerAccount,
            MainAccountId
        )
        select
            TransDate,
            Voucher,
            InvoiceId
        from
            distinctCustLedgerTransBuf
        where
            distinctCustLedgerTransBuf.HasSourceDocumentData == true
        join subledgerJournalEntry
            where
                subledgerJournalEntry.Voucher == distinctCustLedgerTransBuf.Voucher &&
                subledgerJournalEntry.VoucherDataAreaId == distinctCustLedgerTransBuf.VoucherDataAreaId
        join
            PostingType,
            TransactionCurrencyAmount,
            AccountingCurrencyAmount,
            ReportingCurrencyAmount,
            Side
        from subledgerJournalAccountEntry
            where subledgerJournalEntry.RecId == subledgerJournalAccountEntry.SubledgerJournalEntry
        join LedgerAccount from generalJournalAccountEntry
            where generalJournalAccountEntry.RecId == subledgerJournalAccountEntry.GeneralJournalAccountEntry
        join MainAccountId from mainAccount
            where mainAccount.RecId == generalJournalAccountEntry.MainAccount;

        // Initial CreditDebit value -> credit = 0 and debit = 1 (from enum DebitCredit).

        // Set the new CreditDebit value -> credit = -1 and debit = 0.

        // We're doing the above change because the transcations from GeneralJournalAccountEntry (see below)
        // has the representation of CreditDebit value -> credit = 1 and debit = 0 (from enum NoYes opposite of enum DebitCredit),
        // so we need to change the representation, as we need to pull the credit and debit amounts later
        // using these values.

        // We're updating the CreditDebit column in a separate "update_recordset" statement - because, we can't
        // do any mathematical operations, like adding/subtracting a value or different column values in an
        // "insert_recordset" - statement.

        update_recordset custLedgerTransTmp
            setting
                CreditDebit = (custLedgerTransTmp.CreditDebit - 1);

        // Insert records selected from general journal

        if (CustHistoryTxnReportCurrencyCodeFlight::instance().isEnabled())
        {
            // Insert records selected from general journal including the currency code.
            insert_recordset custLedgerTransTmp
            (
                TransDate,
                Voucher,
                InvoiceId,
                PostingType,
                TransactionCurrencyAmount,
                AccountingCurrencyAmount,
                ReportingCurrencyAmount,
                CreditDebit,
                LedgerAccount,
                Currency,
                MainAccountId
            )
            select
                TransDate,
                Voucher,
                InvoiceId
            from
                distinctCustLedgerTransBuf
            where
                distinctCustLedgerTransBuf.HasSourceDocumentData == false
            join generalJournalEntry
                where
                    generalJournalEntry.AccountingDate == distinctCustLedgerTransBuf.TransDate &&
                    generalJournalEntry.SubledgerVoucher == distinctCustLedgerTransBuf.Voucher &&
                    generalJournalEntry.Ledger == Ledger::current()
            join
                PostingType,
                TransactionCurrencyAmount,
                AccountingCurrencyAmount,
                ReportingCurrencyAmount,
                IsCredit,
                LedgerAccount,
                TransactionCurrencyCode
            from generalJournalAccountEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
            join MainAccountId from mainAccount
                where mainAccount.RecId == generalJournalAccountEntry.MainAccount
            notexists join subledgerJournalAccountEntry
                where generalJournalAccountEntry.RecId == subledgerJournalAccountEntry.GeneralJournalAccountEntry;
        }
        else
        {
            insert_recordset custLedgerTransTmp
            (
                TransDate,
                Voucher,
                InvoiceId,
                PostingType,
                TransactionCurrencyAmount,
                AccountingCurrencyAmount,
                ReportingCurrencyAmount,
                CreditDebit,
                LedgerAccount,
                MainAccountId
            )
            select
                TransDate,
                Voucher,
                InvoiceId
            from
                distinctCustLedgerTransBuf
            where
                distinctCustLedgerTransBuf.HasSourceDocumentData == false
            join generalJournalEntry
                where
                    generalJournalEntry.AccountingDate == distinctCustLedgerTransBuf.TransDate &&
                    generalJournalEntry.SubledgerVoucher == distinctCustLedgerTransBuf.Voucher &&
                    generalJournalEntry.Ledger == Ledger::current()
            join
                PostingType,
                TransactionCurrencyAmount,
                AccountingCurrencyAmount,
                ReportingCurrencyAmount,
                IsCredit,
                LedgerAccount
            from generalJournalAccountEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
            join MainAccountId from mainAccount
                where mainAccount.RecId == generalJournalAccountEntry.MainAccount
            notexists join subledgerJournalAccountEntry
                where generalJournalAccountEntry.RecId == subledgerJournalAccountEntry.GeneralJournalAccountEntry;
        }

        if (CustHistoryTxnReportCurrencyCodeFlight::instance().isEnabled())
        {
            update_recordset custLedgerTransTmp
                setting
                    CustName = custLedgerTransBuf.CustName,
                    AccountNum = custLedgerTransBuf.AccountNum,
                    Txt = custLedgerTransBuf.Txt,
                    FiscalEstablishmentId = custLedgerTransBuf.FiscalEstablishmentId,
                    BillingClassification = custLedgerTransBuf.BillingClassification,
                    TraceNum = custLedgerTransBuf.TraceNum
                join custLedgerTransBuf
                    where
                        custLedgerTransTmp.Voucher == custLedgerTransBuf.Voucher &&
                        custLedgerTransTmp.InvoiceId == custLedgerTransBuf.InvoiceId &&
                        custLedgerTransTmp.TransDate == custLedgerTransBuf.TransDate;
        }
        else
        {
            update_recordset custLedgerTransTmp
                setting
                    CustName = custLedgerTransBuf.CustName,
                    AccountNum = custLedgerTransBuf.AccountNum,
                    Txt = custLedgerTransBuf.Txt,
                    Currency = custLedgerTransBuf.Currency,
                    FiscalEstablishmentId = custLedgerTransBuf.FiscalEstablishmentId,
                    BillingClassification = custLedgerTransBuf.BillingClassification,
                    TraceNum = custLedgerTransBuf.TraceNum
                join custLedgerTransBuf
                    where
                        custLedgerTransTmp.Voucher == custLedgerTransBuf.Voucher &&
                        custLedgerTransTmp.InvoiceId == custLedgerTransBuf.InvoiceId &&
                        custLedgerTransTmp.TransDate == custLedgerTransBuf.TransDate;
        }

        // Move the credit amounts to the temp table's respective credit columns.
        update_recordset custLedgerTransTmp
            setting
                CreditAmountCur = (0 - custLedgerTransTmp.TransactionCurrencyAmount),
                CreditAmountMST = (0 - custLedgerTransTmp.AccountingCurrencyAmount),
                CreditAmountReportingCurrency = (0 - custLedgerTransTmp.ReportingCurrencyAmount)
            where
                custLedgerTransTmp.CreditDebit != 0;

        // Move the debit amounts to the temp table's respective debit columns.
        update_recordset custLedgerTransTmp
            setting
                DebitAmountCur = custLedgerTransTmp.TransactionCurrencyAmount,
                DebitAmountMST = custLedgerTransTmp.AccountingCurrencyAmount,
                DebitAmountReportingCurrency = custLedgerTransTmp.ReportingCurrencyAmount
            where
                custLedgerTransTmp.CreditDebit == 0;               
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the records and then calls the appropriate methods.
    /// </summary>
    public void processReport()
    {
        QueryRun queryRun;
        Query query = this.parmQuery();
        CustTable custTable;
        CustTrans custTrans;
        CustLedgerTransBuf custLedgerTransBuf;

        CustInvoiceJour custInvoiceJour;
        CustInvoiceJour_BR custInvoiceJour_BR;
        FiscalEstablishment_BR fiscalEstablishment_BR;

        CustBillingClassification custBillingClassification;

        boolean isPublicSectorScenario;
        boolean isBrazilianParametersEnabled;
        List listBillingClassification;
        QueryBuildDataSource qbdsBillingClass;

        RecordInsertList recordInsertList;
        TransactionReversalTrans transactionReversalTrans;

        CustLedgerTransContract contract = this.parmDataContract() as CustLedgerTransContract;

        showOnlyMainAccount = contract.parmMainAccountsOnly();
        totals = contract.parmTotalsPerLedgerAccount();

        recordInsertList = new RecordInsertList(custLedgerTransBuf.TableId, true, true, true, false, true, custLedgerTransBuf);
        queryRun = new QueryRun(query);

        listBillingClassification = contract.parmBillingClassification();
        isPublicSectorScenario = CustBillingClassificationReportManager::isPublicSectorScenario(listBillingClassification);
        isBrazilianParametersEnabled = BrazilParameters::isEnabled();

        if (isPublicSectorScenario && (!isBrazilianParametersEnabled))
        {
            qbdsBillingClass = queryRun.query().dataSourceTable(tableNum(CustTrans));
            CustBillingClassificationReportManager::setBillingClassificationRanges(qbdsBillingClass, contract.parmBillingClassification(), contract.parmInclTransWithNoBillingClass(), fieldNum(CustTrans, CustBillingClassification));
        }

        while (queryRun.next())
        {
            custLedgerTransBuf.clear();

            custTable = queryRun.get(tableNum(CustTable));
            custTrans = queryRun.get(tableNum(CustTrans));

            custLedgerTransBuf.CustName = custTable.name();
            custLedgerTransBuf.CustBillingClassificationRefRecId = custTrans.CustBillingClassification;
            custLedgerTransBuf.TraceRefTableId = tableNum(CustTrans);
            custLedgerTransBuf.TraceRefRecId = custTrans.RecId;
            custLedgerTransBuf.TraceNum = '';
            custLedgerTransBuf.HasSourceDocumentData = CustVendTransDistributionController::custVendTransHasSourceDocumentData(custTrans);

            recordInsertList.add(custLedgerTransBuf);
        }

        recordInsertList.insertDatabase();

        if (CustHistoryTxnReportCurrencyCodeFlight::instance().isEnabled())
        {
            update_recordset custLedgerTransBuf
                setting
                    AccountNum = custTrans.AccountNum,
                    TransDate = custTrans.TransDate,
                    Voucher = custTrans.Voucher,
                    VoucherDataAreaId = custTrans.DataAreaId,
                    InvoiceId = custTrans.Invoice,
                    Txt = custTrans.Txt
                join custTrans
                    where custTrans.RecId == custLedgerTransBuf.TraceRefRecId;
        }
        else
        {
            update_recordset custLedgerTransBuf
            setting
                AccountNum = custTrans.AccountNum,
                TransDate = custTrans.TransDate,
                Voucher = custTrans.Voucher,
                VoucherDataAreaId = custTrans.DataAreaId,
                InvoiceId = custTrans.Invoice,
                Txt = custTrans.Txt,
                Currency = custTrans.CurrencyCode
            join custTrans
                where custTrans.RecId == custLedgerTransBuf.TraceRefRecId;
        }

        update_recordset custLedgerTransBuf
            setting
                TraceNum = transactionReversalTrans.TraceNum
            join transactionReversalTrans
                index RefRecIdIdx
                where
                    transactionReversalTrans.RefTableId == custLedgerTransBuf.TraceRefTableId &&
                    transactionReversalTrans.RefRecId == custLedgerTransBuf.TraceRefRecId;

        // <GBR>
        if (isBrazilianParametersEnabled)
        {
            update_recordset custLedgerTransBuf
                setting
                    FiscalEstablishmentId = fiscalEstablishment_BR.FiscalEstablishmentId
                join custInvoiceJour
                    where
                        custInvoiceJour.InvoiceId == custLedgerTransBuf.InvoiceId &&
                        custInvoiceJour.LedgerVoucher == custLedgerTransBuf.Voucher &&
                        custInvoiceJour.InvoiceDate == custLedgerTransBuf.TransDate &&
                        custInvoiceJour.InvoiceAccount == custLedgerTransBuf.AccountNum
                join custInvoiceJour_BR
                    where
                        custInvoiceJour_BR.CustInvoiceJour == custInvoiceJour.RecId
                join fiscalEstablishment_BR
                    where
                        fiscalEstablishment_BR.RecId == custInvoiceJour_BR.FiscalEstablishment_BR;
        }
        // </GBR>
        // <PubSect>
        else if (isPublicSectorScenario)
        {
            update_recordset custLedgerTransBuf
                setting
                    BillingClassification = custBillingClassification.BillingClassification
                join custBillingClassification
                    where
                        custBillingClassification.RecId == custLedgerTransBuf.CustBillingClassificationRefRecId;
        }
        // </PubSect>

        this.populateReportData(custLedgerTransBuf);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>