<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationChangeReasonCode</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesQuotationChangeReasonCode extends RunBase
{
    DialogField             dialogCurrentCode;
    DialogField             dialogNewCode;

    smmQuotationReasonId    currentCode;
    smmQuotationReasonId    newCode;

    SalesQuotationTable     salesQuotationTable;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        currentCode,
        newCode
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        Dialog dialog = new DialogRunbase(strfmt("@SYS106727",salesQuotationTable.QuotationId), this);

        dialogCurrentCode = dialog.addFieldValue(extendedtypestr(smmQuotationReasonId), currentCode, "@SYS106728");
        dialogCurrentCode.enabled(false);

        dialogNewCode     = dialog.addFieldValue(extendedtypestr(smmQuotationReasonId), currentCode, "@SYS106729");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        currentCode = dialogCurrentCode.value();
        newCode     = dialogNewCode.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentCode</Name>
				<Source><![CDATA[
    public smmQuotationReasonId parmCurrentCode(smmQuotationReasonId _currentCode = currentCode)
    {
        currentCode = _currentCode;

        return currentCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesQuotationTable</Name>
				<Source><![CDATA[
    public SalesQuotationTable parmSalesQuotationTable(SalesQuotationTable _salesQuotationTable = salesQuotationTable)
    {
        salesQuotationTable = _salesQuotationTable;

        return salesQuotationTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        super();

        try
        {
            ttsbegin;
            if (salesQuotationTable.RecId)
            {
                if (currentCode != newCode)
                {
                   salesQuotationTable.selectForUpdate(true);

                   salesQuotationTable.ReasonId = newCode;
                   salesQuotationTable.update();
                }
            }
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer     version     = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesQuotationChangeReasonCode construct()
    {
        return new SalesQuotationChangeReasonCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SalesQuotationTable             salesQuotationTable;

        if (!_args.caller() || ! _args.dataset())
            throw error("@SYS25407");

        switch (_args.record().TableId)
        {
            case tablenum(SalesQuotationTable):
                salesQuotationTable = _args.record();
                break;
            default:
                throw error(strfmt("@SYS19306",funcname()));
        }

        SalesQuotationChangeReasonCode changeReasonCode = SalesQuotationChangeReasonCode::construct();

        changeReasonCode.getLast();
        changeReasonCode.parmCurrentCode(salesQuotationTable.ReasonId);
        changeReasonCode.parmSalesQuotationTable(salesQuotationTable);

        if (changeReasonCode.prompt())
        {
            changeReasonCode.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
