<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanCommandDeleteRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanCommandReplaceRule</c> class contains the business logic that is used to create a
///    replenishment rule.
/// </summary>
class LeanCommandDeleteRule extends LeanCommandBase
{
    LeanRuleData leanRuleData;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkAdjustReplacementChain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the rule is part of a replacement chain and if so - breaks the chain.
    /// </summary>
    protected void checkAdjustReplacementChain()
    {
        KanbanRule      kanbanRule   = leanRuleData.parmKanbanRule();

        if (   kanbanRule.ReplacingKanbanRule
            || LeanCoverageKanbanRule::isRulePartOfReplacementChain(kanbanRule.RecId))
        {
            KanbanRule replacedKanbanRule = KanbanRule::findReplacingRuleRecId(kanbanRule.RecId, true);

            if (replacedKanbanRule)
            {
                replacedKanbanRule.ReplacingKanbanRule = 0;
                replacedKanbanRule.doUpdate();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDeleteLeanCoverage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks and deletes the <c>LeanCoverage</c> record in case no other rules are using it.
    /// </summary>
    /// <param name="_leanCoverage">
    /// The coverage record to delete.
    /// </param>
    protected void checkDeleteLeanCoverage(LeanCoverage _leanCoverage)
    {
        LeanCoverage  leanCoverage = _leanCoverage;

        // check if we don't have any more usages of the coverage
        if (leanCoverage.RecId && !LeanCoverageKanbanRule::findCoverage(leanCoverage.RecId).RecId)
        {
            if (!leanCoverage.selectForUpdate())
            {
                leanCoverage = LeanCoverage::find(leanCoverage.RecId, true);
            }

            leanCoverage.doDelete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteKanbanRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the actual deletion of the kanban rule.
    /// </summary>
    protected void deleteKanbanRule()
    {
        KanbanRule  kanbanRule = leanRuleData.parmKanbanRule();

        // in case we have associated kanbans, we need to first delete those
        // before wiping out the rule, otherwise the missing reference will
        // cause issues during the handling of the cascading delete
        Kanban::deleteForRule(kanbanRule.RecId);

        if (!kanbanRule.selectForUpdate())
        {
            kanbanRule = KanbanRule::find(kanbanRule.RecId, true);
        }

        kanbanRule.doDelete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Implements the replacement logic of the rule.
    /// </summary>
    /// <returns>
    ///    true if the replacement was successful; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The method is executed in a transaction scope.
    /// </remarks>
    protected boolean execute()
    {
        KanbanRule      kanbanRule   = leanRuleData.parmKanbanRule();
        boolean         result       = true;

        if (kanbanRule.LegalEntity != CompanyInfo::current())
        {
            result = checkFailed(strFmt("@SYS332730",kanbanRule.RuleId));
        }

        if (result)
        {
            ttsbegin;

            // Read the existing coverage record now while the kanban is still not deleted
            LeanCoverage leanCoverage = leanRuleData.parmLeanCoverage();

            // if the rule is part of a replacement chain, then we need to break the
            // chain at the point where the rule is deleted
            this.checkAdjustReplacementChain();

            // just delete the record (this will also delete the LeanCoverageKanbanRule record)
            this.deleteKanbanRule();

            // check and delete the coverage
            this.checkDeleteLeanCoverage(leanCoverage);

            ttscommit;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLeanRuleData</Name>
				<Source><![CDATA[
        public LeanRuleData parmLeanRuleData(LeanRuleData _leanRuleData = leanRuleData)
    {
        leanRuleData = _leanRuleData;

        return leanRuleData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        protected static LeanCommandDeleteRule construct()
    {
        return new LeanCommandDeleteRule();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes a new instance of the <c>LeanCommandDeleteRule</c> class.
    /// </summary>
    /// <param name="_leanRuleData">
    ///    An object that contains the <c>KanbanRule</c> buffers of the original rule.
    /// </param>
    /// <returns>
    ///    An instance of the <c>LeanCommandDeleteRule</c> class.
    /// </returns>
    public static LeanCommandDeleteRule newStandard(LeanRuleData _leanRuleData)
    {
        LeanCommandDeleteRule leanCommandDeleteRule = LeanCommandDeleteRule::construct();

        leanCommandDeleteRule.parmLeanRuleData(_leanRuleData);

        return leanCommandDeleteRule;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
