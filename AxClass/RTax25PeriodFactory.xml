<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTax25PeriodFactory</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  Class <c>RTax25PeriodFactory</c> used to calculate periods <c>RTax25PeriodIterator</c> for corrective registers.
/// </summary>
/// <remarks>
///  When register is calculated, date ranges applied to both reporting date and accounting date of transaction.
/// If corrective register is "Rejected", corrective transactions must be accounted in current period. Thus, transactions may be separated in three ranges -
/// rejected corrections to previous period(reporting date in previous period, accounting date in current period), transactions from current period(both
/// reporting and accounting date in current period) and transactions from "Accepted" journals from future periods(accounting date in future period, reporting date in current period).
/// For purpose of possibility of using <c>DimensionFocusBalance</c> "acceptedPreviousPeriods" parameters used.
/// If its enabled, accepted periods from corrections made from current period will be selected, and then subtracted from balance calculated as sum of <c>DimensionFocusBalance</c> table.
/// </remarks>
class RTax25PeriodFactory
{
    Set originalSetBalance,
        nextCorrSetBalance,
        originalSetTurnover,
        prevCorrSetTurnover,
        nextCorrSetTurnover;

    FromDate fromDate;
    ToDate   toDate;

    RTax25PeriodType    reportingPeriodType;

    boolean acceptedPreviousPeriods;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcCorrectionsDateRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Calculates previous and next correction sets for transactions from date range.
    /// </summary>
    /// <param name="_fromDate">
    ///  Start date of period.
    /// </param>
    /// <param name="_toDate">
    ///  End date of period.
    /// </param>
    /// <remarks>
    ///  Corrections for period are the same as for minimum register journal, which covers period.
    /// </remarks>
    private void calcCorrectionsDateRange(FromDate _fromDate, ToDate _toDate)
    {
        RTax25RegisterJournalTable  minRegisterJournalTable;

        select firstOnly EndDate from minRegisterJournalTable
            order by EndDate asc
            where minRegisterJournalTable.Version    == 0                    &&
                  minRegisterJournalTable.PeriodType == reportingPeriodType  &&
                  minRegisterJournalTable.EndDate    >= _toDate              &&
                  minRegisterJournalTable.RegisterJournalType == RTax25RegisterJournalType::ProfitTax;

        this.calcTurnoverSet(_fromDate, _toDate, minRegisterJournalTable.EndDate);
        this.calcNextCorrBalanceSet(_toDate, minRegisterJournalTable.EndDate);
    }
]]></Source>
			</Method>
			<Method>
				<Name>calcNextCorrBalanceSet</Name>
				<Source><![CDATA[
    private void calcNextCorrBalanceSet(ToDate _toDate, ToDate _endDateRegister)
    {
        RTax25RegisterJournalTable  sourceJournalTable,
                                    corrJournalTable;

        if (!nextCorrSetBalance)
        {
            nextCorrSetBalance = new Set(Types::Container);
        }

        while select PeriodNum, PeriodType, FiscalYear, EndDate from corrJournalTable
            where corrJournalTable.Version             != 0                                     &&
                  corrJournalTable.RegisterJournalType == RTax25RegisterJournalType::ProfitTax  &&
                  corrJournalTable.EndDate             <= _endDateRegister                      &&
                 (corrJournalTable.Accepted            == RTax25CorrectionAccepted::Accepted ||
                  corrJournalTable.Accepted            == RTax25CorrectionAccepted::NotProcessed)
            join PeriodNum, PeriodType, FiscalYear, EndDate from sourceJournalTable
                where sourceJournalTable.RecId      == corrJournalTable.SourceRecId &&
                      sourceJournalTable.PeriodType == reportingPeriodType          &&
                      sourceJournalTable.EndDate    > _toDate
        {
            nextCorrSetBalance.add([
                max(sourceJournalTable.fromDate(), _toDate +  1),
                sourceJournalTable.toDate(),
                corrJournalTable.fromDate(),
                min(_toDate, corrJournalTable.toDate())]);
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>calcNextCorrSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Calculates set which contains dates of accepted corrections from future periods.
    /// </summary>
    /// <param name="_fromDate">
    ///  Start date of period.
    /// </param>
    /// <param name="_toDate">
    ///  End date of period.
    /// </param>
    /// <param name="_correctedJournalTable">
    ///  <c>RTax25RegisterJournalTable</c> to which corrections are taken.
    /// </param>
    /// <remarks>
    ///  It differs for turnover and balance, because for balance we must add corrections which were made to previous year from future periods.
    ///  If date range doesn't coincide with journal, only period intersection is taken.
    /// </remarks>
    private void calcNextCorrSet(FromDate _fromDate, ToDate _toDate, RTax25RegisterJournalTable _correctedJournalTable)
    {
        RTax25RegisterJournalTable  sourceJournalTable,
                                    corrJournalTable;

        if (!nextCorrSetTurnover)
        {
            nextCorrSetTurnover = new Set(Types::Container);
        }

        while select PeriodNum, PeriodType, FiscalYear, EndDate from corrJournalTable
            where corrJournalTable.CorrectedRecId == _correctedJournalTable.RecId &&
                 (corrJournalTable.Accepted       == RTax25CorrectionAccepted::Accepted ||
                  corrJournalTable.Accepted       == RTax25CorrectionAccepted::NotProcessed)  //currrent journal must also be included
            join PeriodNum, PeriodType, FiscalYear, EndDate from sourceJournalTable
                where sourceJournalTable.RecId   == corrJournalTable.SourceRecId &&
                      sourceJournalTable.EndDate > _toDate
        {
            nextCorrSetTurnover.add([
                max(sourceJournalTable.fromDate(), _toDate + 1),
                sourceJournalTable.toDate(),
                max(corrJournalTable.fromDate(), _fromDate),
                min(corrJournalTable.toDate(), _toDate)]);
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>calcOriginalSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Calculates set which contains dates for original period.
    /// </summary>
    /// <param name="_fromDate">
    ///  Start date of period.
    /// </param>
    /// <param name="_toDate">
    ///  End date of period.
    /// </param>
    /// <param name="_maxThreads">
    ///  Maximum number of threads period must be split.
    /// </param>
    /// <remarks>
    /// Original period usually coincide with start and end date of period. If required, period can be split into several for parallel batch processing.
    /// </remarks>
    private void calcOriginalSet(FromDate _fromDate, ToDate _toDate, int _maxThreads)
    {
        int dateDiff, minDaysPerThread, maxDaysPerThread,
            threadForMinDays, threadForMaxDays, i, startCount = 1;

        TransDate curDateFrom, curDateTo;

        fromDate = _fromDate;
        toDate   = _toDate;

        originalSetBalance  = new Set(Types::Container);
        originalSetTurnover = new Set(Types::Container);

        originalSetBalance.add([dateNull(), _toDate, dateNull(), _toDate]);

        if (_maxThreads == 1)
        {
            originalSetTurnover.add([_fromDate, _toDate, _fromDate, _toDate]);
        }
        else
        {
            dateDiff = _toDate - _fromDate + 1;
            minDaysPerThread = dateDiff / _maxThreads;
            maxDaysPerThread = minDaysPerThread + 1;
            threadForMinDays = _maxThreads * maxDaysPerThread - dateDiff;
            threadForMaxDays = _maxThreads - threadForMinDays;

            curDateFrom = _fromDate;

            if (minDaysPerThread)
            {
                for (i = 1; i <= threadForMinDays; i++)
                {
                    curDateTo = curDateFrom + minDaysPerThread - 1;

                    originalSetTurnover.add([curDateFrom, curDateTo, curDateFrom, curDateTo]);

                    curDateFrom = curDateTo + 1;
                }
            }

            for (i = 1; i <= threadForMaxDays; i++)
            {
                curDateTo = curDateFrom + maxDaysPerThread - 1;

                originalSetTurnover.add([curDateFrom, curDateTo, curDateFrom, curDateTo]);

                curDateFrom = curDateTo + 1;
            }
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>calcPrevCorrSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Calculates set which contains dates of rejected corrections to previous periods.
    /// </summary>
    /// <param name="_fromDate">
    ///  Start date of period.
    /// </param>
    /// <param name="_toDate">
    ///  End date of period.
    /// </param>
    /// <param name="_sourceJournalTable">
    ///  <c>RTax25RegisterJournalTable</c> record which is the source for corrections.
    /// </param>
    /// <remarks>
    ///   Usually these corrections belong to the previous year. But if start date is not beginning of this year, corrections to current year must also be accounted.
    ///  Rejected corrections made from current journal(for example half year) must be taken, but also corrections to periods which are included into current(for example, quarter).
    ///  Only period intersection taken. In addition, for purpose of using <c>DimensionFocusBalance</c> table, accepted periods can be calculated instead of rejected, because they must be
    ///  subtracted from current period for balance.
    /// </remarks>
    private void calcPrevCorrSet(FromDate _fromDate, ToDate _toDate, RTax25RegisterJournalTable _sourceJournalTable)
    {
        RTax25RegisterJournalTable corrJournalTable;

        RTax25CorrectionAccepted   accepted = acceptedPreviousPeriods ? RTax25CorrectionAccepted::Accepted : RTax25CorrectionAccepted::Rejected;

        if (!prevCorrSetTurnover)
        {
            prevCorrSetTurnover = new Set(Types::Container);
        }

        while select PeriodNum, PeriodType, FiscalYear, EndDate from corrJournalTable
            where corrJournalTable.SourceRecId == _sourceJournalTable.RecId &&
                  corrJournalTable.Accepted    == accepted
        {
            if (corrJournalTable.toDate() < _fromDate)
            {
                prevCorrSetTurnover.add([
                    max(_sourceJournalTable.fromDate(), _fromDate),
                    min(_sourceJournalTable.toDate(), _toDate),
                    corrJournalTable.fromDate(),
                    corrJournalTable.toDate()]);
            }
            else if (corrJournalTable.fromDate() <  _fromDate &&
                     corrJournalTable.toDate()   >= _fromDate)
            {
                prevCorrSetTurnover.add([
                    max(_sourceJournalTable.fromDate(), _fromDate),
                    min(_sourceJournalTable.toDate(), _toDate),
                    corrJournalTable.fromDate(),
                    _fromDate - 1]);
            }
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>calcStartPeriod</Name>
				<Source><![CDATA[
    private RTax25PeriodNum calcStartPeriod(TransDate _date)
    {
        RTax25PeriodNum periodNum;

        switch (reportingPeriodType)
        {
            case RTax25PeriodType::Month:
                periodNum = mthOfYr(_date);
                break;
            case RTax25PeriodType::Quarter:
                periodNum = (mthOfYr(_date) - 1) div 3 + 1;
                break;
            case RTax25PeriodType::HalfYear:
                periodNum = (mthOfYr(_date) - 1) div 6 + 1;
                break;
            case RTax25PeriodType::Year:
                periodNum = 1;
                break;
            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }

        return periodNum;
    }
]]></Source>
			</Method>
			<Method>
				<Name>calcTurnoverSet</Name>
				<Source><![CDATA[
    private void calcTurnoverSet(FromDate _fromDate, ToDate _toDate, ToDate _endDateRegister)
    {
        RTax25RegisterJournalTable  sourceJournalTable;
        RTax25PeriodNum             startPeriod = this.calcStartPeriod(_fromDate);

        while select sourceJournalTable
            where sourceJournalTable.Version    == 0                                &&
                  sourceJournalTable.PeriodType == reportingPeriodType              &&
                  sourceJournalTable.PeriodNum  >= startPeriod                      &&
                  sourceJournalTable.FiscalYear == year(_fromDate)                  &&
                  sourceJournalTable.EndDate    <= _endDateRegister                 &&
                  sourceJournalTable.RegisterJournalType == RTax25RegisterJournalType::ProfitTax
        {
            this.calcPrevCorrSet(_fromDate, _toDate, sourceJournalTable);
            this.calcNextCorrSet(_fromDate, _toDate, sourceJournalTable);
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>createIterator</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates single period iterator using calculated periods.
    /// </summary>
    /// <returns>
    ///  <c>RTax25PeriodIterator</c> object.
    /// </returns>
    /// <remarks>
    ///   Set is calculated as unification of previously calculated sets.
    /// </remarks>
    private RTax25PeriodIterator createIterator()
    {
        RTax25PeriodIterator    periodIterator = RTax25PeriodIterator::construct();

        if (prevCorrSetTurnover &&
            prevCorrSetTurnover.elements())
        {
            originalSetTurnover = Set::union(originalSetTurnover, prevCorrSetTurnover);
        }

        if (nextCorrSetTurnover &&
            nextCorrSetTurnover.elements())
        {
            originalSetTurnover = Set::union(originalSetTurnover, nextCorrSetTurnover);
        }
        if (nextCorrSetBalance &&
            nextCorrSetBalance.elements())
        {
            originalSetBalance = Set::union(originalSetBalance, nextCorrSetBalance);
        }

        periodIterator.parmBalanceSet(originalSetBalance);
        periodIterator.parmTurnoverSet(originalSetTurnover);
        periodIterator.parmFromDate(fromDate);
        periodIterator.parmToDate(toDate);

        return periodIterator;
    }
]]></Source>
			</Method>
			<Method>
				<Name>createIteratorSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates <c>Set</c> which contains iterator objects which were created for split period for threads.
    /// </summary>
    /// <returns>
    ///  <c>Set</c> object.
    /// </returns>
    private Set createIteratorSet()
    {
        Set                     iteratorSet      = new Set(Types::Class),
                                tmpPeriodSet;
        RTax25PeriodIterator    periodIterator;
        SetEnumerator           originalSetEnumerator = originalSetTurnover.getEnumerator();
        int                     threadNo;

        if (nextCorrSetBalance &&
            nextCorrSetBalance.elements())
        {
            originalSetBalance = Set::union(originalSetBalance, nextCorrSetBalance);
        }

        while (originalSetEnumerator.moveNext())
        {
            threadNo++;

            tmpPeriodSet = new Set(Types::Container);
            tmpPeriodSet.add(originalSetEnumerator.current());

            if (threadNo == 1)
            {
                tmpPeriodSet = Set::union(tmpPeriodSet, prevCorrSetTurnover);
            }
            else if (threadNo == originalSetTurnover.elements())
            {
                tmpPeriodSet = Set::union(tmpPeriodSet, nextCorrSetTurnover);
            }
            periodIterator = RTax25PeriodIterator::construct();
            periodIterator.parmTurnoverSet(tmpPeriodSet);
            periodIterator.parmBalanceSet(originalSetBalance);
            periodIterator.parmFromDate(fromDate);
            periodIterator.parmToDate(toDate);

            iteratorSet.add(periodIterator);
        }

        return iteratorSet;
    }
]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        reportingPeriodType = RTax25PeriodType::Quarter;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmAcceptedPreviousPeriods</Name>
				<Source><![CDATA[
    private boolean parmAcceptedPreviousPeriods(boolean _acceptedPreviousPeriods = acceptedPreviousPeriods)
    {
        acceptedPreviousPeriods = _acceptedPreviousPeriods;
        return acceptedPreviousPeriods;
    }
]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25PeriodFactory construct()
    {
        return new RTax25PeriodFactory();
    }
]]></Source>
			</Method>
			<Method>
				<Name>createIteratorDateRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates new <c>RTax25PeriodIterator</c> object using date range.
    /// </summary>
    /// <param name="_fromDate">
    ///  Start date of period.
    /// </param>
    /// <param name="_toDate">
    ///  End date of period.
    /// </param>
    /// <param name="_acceptedPreviousPeriods">
    ///  If "Accepted" corrections made to previous periods from current period must be selected, then true; If rejected, then, false.
    /// </param>
    /// <returns>
    ///  <c>RTax25PeriodIterator</c> object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25PeriodIterator createIteratorDateRange(FromDate _fromDate, ToDate _toDate, boolean _acceptedPreviousPeriods = false)
    {
        RTax25PeriodFactory  periodFactory = RTax25PeriodFactory::construct();

        periodFactory.parmAcceptedPreviousPeriods(_acceptedPreviousPeriods);

        periodFactory.calcOriginalSet(_fromDate, _toDate, 1);
        periodFactory.calcCorrectionsDateRange(_fromDate, _toDate);

        return periodFactory.createIterator();
    }
]]></Source>
			</Method>
			<Method>
				<Name>createIteratorJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates new <c>RTax25PeriodIterator</c> object using <c>RTax25RegisterJournalTable</c> record.
    /// </summary>
    /// <param name="_registerJournalTable">
    ///  <c>RTax25RegisterJournalTable</c> record.
    /// </param>
    /// <returns>
    ///  <c>RTax25PeriodIterator</c> object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25PeriodIterator createIteratorJournal(RTax25RegisterJournalTable _registerJournalTable)
    {
        RTax25PeriodFactory         periodFactory = RTax25PeriodFactory::construct();
        RTax25RegisterJournalTable  regJournalTable;

        regJournalTable = _registerJournalTable.CorrectedRecId ? RTax25RegisterJournalTable::findRecId(_registerJournalTable.CorrectedRecId) : _registerJournalTable.data();

        periodFactory.calcOriginalSet(_registerJournalTable.fromDate(), _registerJournalTable.toDate(), 1);

        periodFactory.calcPrevCorrSet(
            _registerJournalTable.fromDate(),
            _registerJournalTable.toDate(),
            regJournalTable);

        periodFactory.calcNextCorrSet(
            _registerJournalTable.fromDate(),
            _registerJournalTable.toDate(),
            regJournalTable);

        periodFactory.calcNextCorrBalanceSet(
            _registerJournalTable.toDate(),
            _registerJournalTable.toDate());

        return periodFactory.createIterator();
    }
]]></Source>
			</Method>
			<Method>
				<Name>createIteratorSetJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates <c>Set</c> object which contains several <c>RTax25PeriodIterator</c> objects split by threads.
    /// </summary>
    /// <param name="_registerJournalTable">
    ///  <c>RTax25RegisterJournalTable</c> record.
    /// </param>
    /// <param name="_maxThreads">
    ///  Number of threads.
    /// </param>
    /// <returns>
    ///  <c>Set</c> object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static Set createIteratorSetJournal(RTax25RegisterJournalTable _registerJournalTable, int _maxThreads)
    {
        RTax25PeriodFactory         periodFactory = RTax25PeriodFactory::construct();
        RTax25RegisterJournalTable  regJournalTable;

        regJournalTable = _registerJournalTable.CorrectedRecId ? RTax25RegisterJournalTable::findRecId(_registerJournalTable.CorrectedRecId) : _registerJournalTable.data();

        periodFactory.calcOriginalSet(_registerJournalTable.fromDate(), _registerJournalTable.toDate(), _maxThreads);

        periodFactory.calcPrevCorrSet(
            _registerJournalTable.fromDate(),
            _registerJournalTable.toDate(),
            regJournalTable);

        periodFactory.calcNextCorrSet(
            _registerJournalTable.fromDate(),
            _registerJournalTable.toDate(),
            regJournalTable);

        periodFactory.calcNextCorrBalanceSet(
            _registerJournalTable.toDate(),
            _registerJournalTable.toDate());

        return periodFactory.createIteratorSet();
    }
]]></Source>
			</Method>
			<Method>
				<Name>createIteratorSimple</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates <c>RTax25PeriodIterator</c> object, which contains range of only original dates.
    /// </summary>
    /// <param name="_fromDate">
    ///  Start date of period.
    /// </param>
    /// <param name="_toDate">
    ///  End date of period.
    /// </param>
    /// <returns>
    ///  <c>RTax25PeriodIterator</c> object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25PeriodIterator createIteratorSimple(FromDate _fromDate, ToDate _toDate)
    {
        RTax25PeriodFactory  periodFactory = RTax25PeriodFactory::construct();

        periodFactory.calcOriginalSet(_fromDate, _toDate, 1);

        return periodFactory.createIterator();
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>