<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPeriodPostingSelectCost_Trans</Name>
	<SourceCode>
		<Declaration><![CDATA[
class   ProjPeriodPostingSelectCost_Trans extends ProjPeriodPostingSelectCost
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the AOT.
    /// </remarks>
    public Object dialog()
    {
        #define.two(2)
        DialogRunbase  dialogRunbase = super();

        dialogRunbase.addGroup("@SYS90562");
        dialogProjLedgerStatus = dialogRunbase.addFieldValue(enumStr(ProjLedgerStatusPeriodic), ProjGroup::ledgerStatus2periodic(projLedgerStatus), "@SYS90563");

        dialogRunbase.addGroup("@SYS23410");
        dialogTransDate = dialogRunbase.addFieldValue(extendedTypeStr(TransDate), transActionDate, "@SYS14475", "@SYS90567");

        dialogGroupCostSales = dialogRunbase.addGroup('');
        dialogGroupCostSales.frameType(1);
        dialogGroupCostSales.columns(#two);

        this.initQuery();
        dialogRunbase.useConfigKey(true);

        return dialogRunbase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
        public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        this.parmProjLedgerStatus(ProjGroup::periodic2ledgerStatus(dialogProjLedgerStatus.value()));
        this.parmTransActionDate(dialogTransDate.value());

        this.getFromDialogMapTransId();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialogMapTransId</Name>
				<Source><![CDATA[
        void getFromDialogMapTransId()
    {
        List            list;
        ListIterator    li;

        Common      commonTrans;

        if (this.parmTransIdList())
        {
            list = List::create(this.parmTransIdList());
        }

        li = new ListIterator(list);

        li.begin();
        if (li.more())
        {
            commonTrans     = li.value();
        }

        queryEmpl           = false;
        queryCost           = false;
        queryItem           = false;

        switch (commonTrans.TableId)
        {
            case tableNum(ProjEmplTrans):
                queryEmpl   = true;
                break;

            case tableNum(ProjCostTrans):
                queryCost   = true;
                break;

            case tableNum(ProjItemTrans):
                queryItem   = true;
                break;
        }

        fromDate           = dateNull();
        toDate             = dateMax();

        projInternal       = true;
        projTimeMaterial   = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
        void initQuery()
    {
        emplDataSource          = queryRun.query().dataSourceTable(tableNum(ProjEmplTrans));
        emplDataSourceCost      = queryRun.query().dataSourceTable(tableNum(ProjEmplTransCost));
        costDataSource          = queryRun.query().dataSourceTable(tableNum(ProjCostTrans));
        costDataSourceCost      = queryRun.query().dataSourceTable(tableNum(ProjCostTransCost));
        itemDataSource          = queryRun.query().dataSourceTable(tableNum(ProjItemTrans));
        itemDataSourceCost      = queryRun.query().dataSourceTable(tableNum(ProjItemTransCost));

        this.initQueryEmpl();
        this.initQueryCost();
        this.initQueryItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container pack()
    {
        return [#CurrentVersion,#CurrentList,queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
        public QueryRun queryBuild()
    {
        Query                   query = new Query();
        QueryBuildDataSource    dsProjEmplTrans, dsProjCostTrans, dsProjItemTrans, dsProjItemTransCost;
        QueryBuildDataSource    dsProjEmplTransCost, dsProjCostTransCost;

        dsProjEmplTrans     = query.addDataSource(tableNum(ProjEmplTrans));

        dsProjEmplTransCost = dsProjEmplTrans.addDataSource(tableNum(ProjEmplTransCost));
        dsProjEmplTransCost.relations(true);
        dsProjEmplTransCost.joinMode(JoinMode::ExistsJoin);

        dsProjCostTrans     = query.addDataSource(tableNum(ProjCostTrans));

        dsProjCostTransCost = dsProjCostTrans.addDataSource(tableNum(ProjCostTransCost));
        dsProjCostTransCost.relations(true);
        dsProjCostTransCost.joinMode(JoinMode::ExistsJoin);

        dsProjItemTrans     = query.addDataSource(tableNum(ProjItemTrans));

        dsProjItemTransCost = dsProjItemTrans.addDataSource(tableNum(ProjItemTransCost));
        dsProjItemTransCost.relations(true);
        dsProjItemTransCost.joinMode(JoinMode::ExistsJoin);

        queryRun = new SysQueryRun(query);

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDialogRanges</Name>
				<Source><![CDATA[
        void setDialogRanges()
    {
        QueryBuildDataSource    dsProjEmplTrans, dsProjCostTrans, dsProjItemTrans;
        QueryBuildRange         queryRangeTransIdEmpl,queryRangeTransIdCost, queryRangeTransIdItem ;

        super();

        dsProjEmplTrans     = queryRun.query().dataSourceTable(tableNum(ProjEmplTrans));
        dsProjCostTrans     = queryRun.query().dataSourceTable(tableNum(ProjCostTrans));
        dsProjItemTrans     = queryRun.query().dataSourceTable(tableNum(ProjItemTrans));

        if (queryCost)
        {
            queryRangeTransIdCost    = dsProjCostTrans.findRange(fieldNum(ProjCostTrans,ProjId));

            while (queryRangeTransIdCost)
            {
                dsProjCostTrans.clearRange(fieldNum(ProjCostTrans,ProjId));
                queryRangeTransIdCost    = dsProjCostTrans.findRange(fieldNum(ProjCostTrans,ProjId));
            }

            this.rangeTransId(dsProjCostTrans);
        }

        if (queryEmpl)
        {
            queryRangeTransIdEmpl    = dsProjEmplTrans.findRange(fieldNum(ProjEmplTrans,ProjId));

            while (queryRangeTransIdEmpl)
            {
                dsProjEmplTrans.clearRange(fieldNum(ProjEmplTrans,ProjId));
                queryRangeTransIdEmpl    = dsProjEmplTrans.findRange(fieldNum(ProjEmplTrans,ProjId));
            }

            this.rangeTransId(dsProjEmplTrans);
        }

        if (queryItem)
        {
            queryRangeTransIdItem    = dsProjItemTrans.findRange(fieldNum(ProjItemTrans,ProjId));

            while (queryRangeTransIdItem)
            {
                dsProjItemTrans.clearRange(fieldNum(ProjItemTrans,ProjId));
                queryRangeTransIdItem    = dsProjItemTrans.findRange(fieldNum(ProjItemTrans,ProjId));
            }

            this.rangeTransId(dsProjItemTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to add a Select button to the dialog.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    /// <remarks>
    /// If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    /// return a valid instance of the <c>QueryRun</c> class. If you change the return value to true, the
    /// button will be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        boolean unpack(container packedClass)
    {
        Integer         version         = conPeek(packedClass,1);
        container       packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,packedQuery] = packedClass;
                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }
                else
                {
                    queryRun = this.queryBuild();
                }
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
        static public ClassDescription description()
    {
        return "@SYS87007";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>