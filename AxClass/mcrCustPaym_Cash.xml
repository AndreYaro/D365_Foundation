<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>mcrCustPaym_Cash</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>MCRCustPaym_Cash</c> class that handles customer payments of type "cash".
/// </summary>
class mcrCustPaym_Cash extends MCRCustPaym
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if a payment field should be editable by the user.
    /// </summary>
    /// <param name="_fieldId">
    ///     The field for which this method determines whether or not to
    ///     allow edit.
    /// </param>
    /// <returns>
    ///     true if editing should be allowed; otherwise, false.
    /// </returns>
    public boolean allowEdit(FieldId _fieldId)
    {
        switch (_fieldId)
        {
            case fieldNum(MCRCustPaymTable, PercentAmount):
                return false;
        }

        return super(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the default value for the passed field.
    /// </summary>
    /// <param name="_fieldId">
    ///     The field for which this method finds the default value.
    /// </param>
    /// <returns>
    ///    A default value for the specified field if one is defined; otherwise, null.
    /// </returns>
    public anytype getDefaultValue(FieldId _fieldId)
    {
        switch (_fieldId)
        {
            case fieldNum(MCRCustPaymTable, IsPrePay):
                return NoYes::Yes;

            case fieldNum(MCRCustPaymTable, PercentAmount):
                return 0.0;

            case fieldNum(MCRCustPaymTable, Amount):
                return 0.0;
        }

        return super(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPaymTypeData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns true.
    /// </summary>
    /// <returns>
    ///     true.
    /// </returns>
    /// <remarks>
    ///     A "cash" payment has no
    ///     additional required data.
    ///     Implimented in parent/child classes.
    /// </remarks>
    public boolean hasPaymTypeData()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(MCRCustPaymTable _custPaymTable, boolean _allowUserInput)
    {
        if (_custPaymTable.CustPaymType != MCRCustPaymType::Cash)
        {
            throw error(strFmt("@MCR32269", funcName(),
                               enum2str(MCRCustPaymType::Cash)));
        }

        super(_custPaymTable, _allowUserInput);
    }

]]></Source>
			</Method>
			<Method>
				<Name>performBalanceCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform balance for the payment method.
    /// </summary>
    /// <returns>The balance.</returns>
    [Hookable(false)]
    protected real performBalanceCheck()
    {
        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performAuth</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs authorization on this payment.
    /// </summary>
    /// <returns>
    ///     The resulting payment status of <c>MCRCustPaymStatus::Paid</c>.
    /// </returns>
    /// <remarks>
    ///     A "cash" payment is automatically authorized.
    /// </remarks>
    protected MCRCustPaymStatus performAuth()
    {
        ttsBegin;
        // automatically authorize
        mcrCustPaymTable.Status = MCRCustPaymStatus::Paid;
        mcrCustPaymTable.update();
        ttsCommit;

        return mcrCustPaymTable.Status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs posting operations after posting records to the
    ///     ledger journal.
    /// </summary>
    /// <param name="_amount">
    ///     The amount to be posted.
    /// </param>
    protected void performPost(Amount _amount)
    {
        // nothing to do
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAuthorize</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates this payment for authorization.
    /// </summary>
    /// <param name="_showErrors">
    ///     A boolean determining whether to write the errors to an infolog; optional.
    /// </param>
    /// <returns>
    ///     true if all data for this payment is valid and the payment should
    ///     be allowed to be submitted for authorization; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     If the return value is false, then this payment should not be submitted
    ///     for authorization.
    ///     Overridden to perform validations specific to this payment type.
    /// </remarks>
    public boolean validateAuthorize(boolean _showErrors = true)
    {
        boolean                    isValid;

        setPrefix(strFmt("@MCR32270", mcrCustPaymTable.TenderTypeId,
                         mcrCustPaymTable.Amount));

        isValid = super(_showErrors);

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates this payment for an insert or update.
    /// </summary>
    /// <param name="_showErrors">
    ///     A boolean determining whether to write the errors to an infolog; optional.
    /// </param>
    /// <param name="_validateAccountSetup">
    ///     A boolean determing whether to validate if an account is
    ///     setup on the <c>RetailStoreTenderTypeTable</c>; optional.
    /// </param>
    /// <returns>
    ///     true if all data for this payment is valid and should be allowed
    ///     to be saved to the database; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     Overridden to perform validations specific to this payment type.
    /// </remarks>
    public boolean validateWrite(boolean _showErrors = true,
                                 boolean _validateAccountSetup = true)
    {
        boolean isValid = super(_showErrors, _validateAccountSetup);

        // percent amount must be 0
        if (this.isPercentAmountNotZero(mcrCustPaymTable))
        {
            isValid = false;

            if (_showErrors)
            {
                error(strFmt("@MCR10596", enum2str(mcrCustPaymTable.CustPaymType)));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPercentAmountNotZero</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the <c>PercentAmount</c> field of <c>MCRCustPaymTable</c> is not equal to zero.
    /// </summary>
    /// <param name = "_mcrCustPaymTable">
    /// The record buffer of <c>MCRCustPaymTable</c> table.
    /// </param>
    /// <returns>
    /// True if <c>PercentAmount</c> field of <c>MCRCustPaymTable</c> is not equal to zero; otherwise, false.
    /// </returns>
    protected boolean isPercentAmountNotZero(MCRCustPaymTable _mcrCustPaymTable)
    {
        return (_mcrCustPaymTable.PercentAmount != 0.0);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>