<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PlSalesDeposit_Invoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class PlSalesDeposit_Invoice
{
    CustInvoiceJour custInvoiceJour;
    Voucher         depositVoucher;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcDepositAmount</Name>
				<Source><![CDATA[
    private AmountMST calcDepositAmount()
    {
        PlInventPackageTrans inventPackageTrans;

        select sum(DepositAmount), sum(ReturnedAmount) from inventPackageTrans
            where inventPackageTrans.InvoiceDate           == custInvoiceJour.InvoiceDate         &&
                  inventPackageTrans.InvoiceId             == custInvoiceJour.InvoiceId           &&
                  inventPackageTrans.SalesId               == custInvoiceJour.SalesId             &&
                  inventPackageTrans.NumberSequenceGroupId == custInvoiceJour.NumberSequenceGroup &&
                  inventPackageTrans.TransDate                                                    &&
                  ! inventPackageTrans.Printed;

        return inventPackageTrans.DepositAmount - inventPackageTrans.ReturnedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init(CustInvoiceJour _custInvoiceJour)
    {
        custInvoiceJour = _custInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    private void run()
    {
        NumberSeq                   numberSeq;
        LedgerVoucher               ledgerVoucher;
        CustVoucher                 custVoucher;
        CustTrans                   custTrans;
        LedgerVoucherObject         ledgerVoucherObject;
        LedgerVoucherTransObject    ledgerVoucherTransObject;
        AmountMST                   depositAmount;

        depositAmount = this.calcDepositAmount();

        if (depositAmount)
        {
            numberSeq      = NumberSeq::newGetVoucher(SalesParameters::numRefSalesPackageVoucher());
            depositVoucher = numberSeq.voucher();

            ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Summary,
                                                         SysModule::Cust,
                                                         numberSeq.parmVoucherSequenceCode());

            ledgerVoucher.parmCheckBlockedDimensions(false);

            ledgerVoucherObject = LedgerVoucherObject::newVoucher(depositVoucher,
                                                                  custInvoiceJour.InvoiceDate,
                                                                  SysModule::Cust,
                                                                  LedgerTransType::Cust);

            ledgerVoucher.addVoucher(ledgerVoucherObject);

            custVoucher = CustVendVoucher::construct(SysModule::Cust,
                                                     custInvoiceJour.InvoiceAccount,
                                                     CurrencyExchangeHelper::amount(this.calcDepositAmount()),
                                                     CompanyInfoHelper::standardCurrency(),
                                                     LedgerTransTxt::CustPaymentCust,
                                                     custInvoiceJour.DefaultDimension,
                                                     custInvoiceJour.PostingProfile,
                                                     LedgerPostingType::CustBalance);

            custVoucher.parmTransTxt("@GLS111511");
            custVoucher.setTransRef(CustTransRefType::Payment, depositVoucher);

            custVoucher.post(ledgerVoucher, custTrans);

            ledgerVoucherTransObject = LedgerVoucherTransObject::newBasicDefault(
                ledgerVoucher.findLedgerVoucherObject(),
                LedgerPostingType::CustBalance,
                LedgerDimensionFacade::serviceCreateLedgerDimension(CustLedgerAccounts::depositLedgerDimension(custInvoiceJour.InvoiceAccount), custInvoiceJour.DefaultDimension),
                CompanyInfoHelper::standardCurrency(),
                -CurrencyExchangeHelper::amount(depositAmount),
                -CurrencyExchangeHelper::amount(depositAmount),                
                -CurrencyExchangeHelper::amountCur2MSTSecond_RU(depositAmount, custInvoiceJour.CurrencyCode, 0, custInvoiceJour.InvoiceDate));
            ledgerVoucherTransObject.parmSourceTableId(custInvoiceJour.TableId);
            ledgerVoucherTransObject.parmSourceRecId  (custInvoiceJour.RecId);

            ledgerVoucher.addTrans(ledgerVoucherTransObject);
            ledgerVoucher.bondLast2_RU();

            numberSeq.used();
            ledgerVoucher.end();

            this.updateDepositTrans();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDepositTrans</Name>
				<Source><![CDATA[
    private void updateDepositTrans()
    {
        PlInventPackageTrans inventPackageTrans;

        ttsbegin;

        update_recordSet inventPackageTrans
            setting Voucher = depositVoucher,
                    Printed = NoYes::Yes
            where inventPackageTrans.InvoiceDate           == custInvoiceJour.InvoiceDate         &&
                  inventPackageTrans.InvoiceId             == custInvoiceJour.InvoiceId           &&
                  inventPackageTrans.SalesId               == custInvoiceJour.SalesId             &&
                  inventPackageTrans.NumberSequenceGroupId == custInvoiceJour.NumberSequenceGroup &&
                  inventPackageTrans.TransDate                                                    &&
                  ! inventPackageTrans.Printed;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePackageTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void updatePackageTrans(CustInvoiceJour _custInvoiceJour)
    {
        PlSalesDeposit_Invoice salesDeposit_Invoice = new PlSalesDeposit_Invoice();

        salesDeposit_Invoice.init(_custInvoiceJour);
        salesDeposit_Invoice.run();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>