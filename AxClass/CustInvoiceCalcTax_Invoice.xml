<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInvoiceCalcTax_Invoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustInvoiceCalcTax_Invoice
extends CustInvoiceCalcTax
{
    CustInvoiceJour custInvoiceJour;
    CustInvoiceTrans custInvoiceTrans;
    CustInvoiceTable custInvoiceTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    CurrencyCode currencyCode()
    {
        return custInvoiceJour.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceMarkupRecId</Name>
				<Source><![CDATA[
    recId custInvoiceMarkupRecId()
    {
        return markupTrans.OrigRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceMarkupTableId</Name>
				<Source><![CDATA[
    tableId custInvoiceMarkupTableId()
    {
        return markupTrans.OrigTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceTableRecID</Name>
				<Source><![CDATA[
    recId custInvoiceTableRecID()
    {
        return custInvoiceTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceTableTableID</Name>
				<Source><![CDATA[
    tableId custInvoiceTableTableID()
    {
        return custInvoiceTable.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    CustExchRate exchRate(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return custInvoiceJour.ExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    ExchrateSecondary exchRateSecondary(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return custInvoiceJour.ExchRateSecondary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustInvoiceLine</Name>
				<Source><![CDATA[
    void getCustInvoiceLine()
    {
        select custInvoiceLine
            where custInvoiceLine.ParentRecId == custInvoiceTable.RecId &&
                  custInvoiceLine.LineNum == custInvoiceTrans.LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursor</Name>
				<Source><![CDATA[
    void initCursor()
    {
        select nofetch forupdate custInvoiceTrans
            index hint InvoiceIdx
            where custInvoiceTrans.SalesId == custInvoiceJour.SalesId &&
                  custInvoiceTrans.InvoiceId == custInvoiceJour.InvoiceId &&
                  custInvoiceTrans.InvoiceDate == custInvoiceJour.InvoiceDate &&
                  custInvoiceTrans.NumberSequenceGroup == custInvoiceJour.NumberSequenceGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    TransDate invoiceDate()
    {
        return custInvoiceJour.InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupDimension</Name>
				<Source><![CDATA[
    DimensionDefault markupDimension()
    {
        if (custInvoiceTrans)
        {
            return custInvoiceTrans.DefaultDimension;
        }

        return custInvoiceJour.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(CustInvoiceJour _custInvoiceJour)
    {
        super(_custInvoiceJour);

        custInvoiceJour = _custInvoiceJour;
        custInvoiceTable = custInvoiceJour.custInvoiceTable();

        update = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    Common nextLine()
    {
        next custInvoiceTrans;

        this.getCustInvoiceLine();
        this.initCursorMarkup(custInvoiceTrans.TableId, custInvoiceTrans.RecId);

        return custInvoiceTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    public void post(LedgerPostingController _ledgerPostingController, NoYes post = NoYes::Yes)
    {
        super(_ledgerPostingController, post);

        // the following methods rely on tax posting in the super call.
        this.updateParentForTaxTrans();
        this.updateTaxWriteCode();
        this.endPost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTax</Name>
				<Source><![CDATA[
    void setTax(TaxWriteCode taxWriteCode,
                 AmountCur amountCur)
    {
        custInvoiceTrans.TaxWriteCode = taxWriteCode;
        custInvoiceTrans.TaxAmount = amountCur;
        custInvoiceTrans.TaxAmountMST = custInvoiceJour.amountMST(amountCur);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmount</Name>
				<Source><![CDATA[
    AmountCur transLineAmount()
    {
        return custInvoiceTrans.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    SalesQty transQty()
    {
        return custInvoiceTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTransId</Name>
				<Source><![CDATA[
    InventTransId transTransId()
    {
        return custInvoiceTrans.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>triangulation</Name>
				<Source><![CDATA[
    EUROTriangulation triangulation(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return custInvoiceJour.Triangulation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParentForTaxTrans</Name>
				<Source><![CDATA[
    private void updateParentForTaxTrans()
    {
        TaxTrans taxTrans;
        SourceDocumentLine sourceDocumentLineTaxTrans, sourceDocumentLineTaxTransParent;
        CustInvoiceTrans custInvoiceTransLocal;

        taxTrans.skipDataMethods(true);

        // update parent for taxes on free text invoice Lines
        update_recordSet taxTrans
        setting
            SourceTableId = custInvoiceTransLocal.TableId,
            SourceRecId = custInvoiceTransLocal.RecId,
            HeadingTableId = custInvoiceJour.TableId
        where taxTrans.Voucher == custInvoiceJour.LedgerVoucher &&
            taxTrans.TransDate == custInvoiceJour.InvoiceDate
        join RecId from sourceDocumentLineTaxTrans
            where sourceDocumentLineTaxTrans.RecId == taxTrans.SourceDocumentLine &&
                  sourceDocumentLineTaxTrans.SourceDocumentHeader == custInvoiceJour.SourceDocumentHeader
        join RecId from sourceDocumentLineTaxTransParent
            where sourceDocumentLineTaxTransParent.RecId == sourceDocumentLineTaxTrans.ParentSourceDocumentLine &&
                  sourceDocumentLineTaxTransParent.SourceDocumentHeader == custInvoiceJour.SourceDocumentHeader
        join RecId, TableId from custInvoiceTransLocal
            where custInvoiceTransLocal.SourceDocumentLine == sourceDocumentLineTaxTransParent.RecId &&
            custInvoiceTransLocal.ParentRecId == custInvoiceJour.RecId;

        // update parent for sales tax currency difference on free text invoice Lines
        if (this.existsTaxTransWithoutSourceDocumentLine())
        {
            this.updateTaxTransWithoutSourceDocumentLine();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsTaxTransWithoutSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if there is a taxTrans with source document line is 0.
    /// </summary>
    /// <returns>True if exists, otherwise false.</returns>
    protected boolean existsTaxTransWithoutSourceDocumentLine()
    {
        TaxTrans taxTrans;

        select firstonly RecId from taxTrans
        where taxTrans.Voucher == custInvoiceJour.LedgerVoucher &&
            taxTrans.TransDate == custInvoiceJour.InvoiceDate &&
            TaxTrans.SourceDocumentLine == 0;
        
        return TaxTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxTransWithoutSourceDocumentLine</Name>
				<Source><![CDATA[
    protected void updateTaxTransWithoutSourceDocumentLine()
    {
        TaxTrans taxTrans;
        CustInvoiceTrans custInvoiceTransLocal;
        CustInvoiceLine custInvoiceLineLocal;
        CustInvoiceTable custInvoiceTableLocal;

        update_recordset taxTrans
        setting
            SourceTableId = custInvoiceTransLocal.TableId,
            SourceRecId = custInvoiceTransLocal.RecId,
            HeadingTableId = custInvoiceJour.TableId
        where taxTrans.Voucher == custInvoiceJour.LedgerVoucher &&
            taxTrans.TransDate == custInvoiceJour.InvoiceDate
        join RecId from custInvoiceLineLocal
            where taxtrans.SourceTableId == custInvoiceLineLocal.TableId &&
                taxtrans.SourceRecId == custInvoiceLineLocal.RecId
        join RecId from custInvoiceTableLocal
            where custInvoiceTableLocal.sourcedocumentheader == custInvoiceJour.SourceDocumentHeader
        join RecId, TableId from custInvoiceTransLocal
            where custInvoiceTransLocal.SourceDocumentLine == custInvoiceLineLocal.SourceDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUpdateTaxWriteCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if an update is allowed for field TaxWriteCode on <c>VendInvoiceTrans</c> and <c>MarkupTrans</c>.
    /// </summary>
    /// <returns>
    ///     true if <c>VendInvoiceTrans</c> and <c>MarkupTrans</c> should be updated; otherwise, false.
    /// </returns>
    protected boolean canUpdateTaxWriteCode()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxWriteCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates <c>VendInvoiceTrans</c> and <c>MarkupTrans</c>.
    /// </summary>
    private void updateTaxWriteCode()
    {
        if (this.canUpdateTaxWriteCode())
        {
            CustInvoiceTrans custInvoiceTransLocal;
            TaxSourceLineSummaryTmp taxSourceLineSummaryTmp;
            CustInvoiceLine custInvoiceLineLocal;
            MarkupTrans markupTransPosted;

            Debug::assert(taxPost != null);

            custInvoiceTransLocal.skipDataMethods(true);
            markupTransPosted.skipDataMethods(true);

            taxSourceLineSummaryTmp.linkPhysicalTableInstance(taxPost.getTaxSourceLineSummaryTmp());

            select firstonly RecId from taxSourceLineSummaryTmp;
            if (taxSourceLineSummaryTmp)
            {
                update_recordSet custInvoiceTransLocal
                    setting TaxWriteCode = taxSourceLineSummaryTmp.PrintCode
                    where custInvoiceTransLocal.TaxWriteCode == ''
                        && custInvoiceTransLocal.SalesId == custInvoiceJour.SalesId
                        && custInvoiceTransLocal.InvoiceId == custInvoiceJour.InvoiceId
                        && custInvoiceTransLocal.InvoiceDate == custInvoiceJour.InvoiceDate
                        && custInvoiceTransLocal.numberSequenceGroup == custInvoiceJour.numberSequenceGroup
                join custInvoiceLineLocal
                    where custInvoiceLineLocal.SourceDocumentLine == custInvoiceTransLocal.SourceDocumentLine
                        && custInvoiceLineLocal.ParentRecId == custInvoiceTable.RecId
                join taxSourceLineSummaryTmp
                    where taxSourceLineSummaryTmp.SourceRecId == custInvoiceLineLocal.RecId
                        && taxSourceLineSummaryTmp.SourceTableId == custInvoiceLineLocal.TableId;

                update_recordSet markupTransPosted
                    setting TaxWriteCode = taxSourceLineSummaryTmp.PrintCode
                    where markupTransPosted.TaxWriteCode == ''
                join taxSourceLineSummaryTmp
                    where taxSourceLineSummaryTmp.SourceRecId == markupTransPosted.RecId
                        && taxSourceLineSummaryTmp.SourceTableId == markupTransPosted.TableId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRecalculateTax</Name>
				<Source><![CDATA[
    public boolean canRecalculateTax()
    {
        Microsoft.Dynamics.Tax.Instrumentation.TaxEventSource taxEventSourceLog = Microsoft.Dynamics.Tax.Instrumentation.TaxEventSource::Log;
        boolean ret = true;

        if (custInvoiceJour.SourceDocumentHeader)
        {
            ret = SourceDocumentAccountingValidator::canCalculateTaxesForDocument(custInvoiceJour.SourceDocumentHeader);
        }

        if(TaxUncommitted::traceRecalculateTaxForFinalizedSourceDocument(ret))
        {
            str callStacking = TaxUncommitted::callStackInfo();
            taxEventSourceLog.RecalculateTaxForFinalizedSourceDocument(tableId2Name(tableNum(custInvoiceJour)), custInvoiceJour.SourceDocumentHeader, callStacking);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets calculated amount for markup.
    /// </summary>
    /// <returns>The calculated amount.</returns>
    public MarkupAmount markupAmount()
    {
        return markupTrans.CalculatedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disposes temp table at end of post.
    /// </summary>
    [Replaceable]
    public void endPost()
    {
        TaxSourceLineSummaryTmp taxSourceLineSummaryTmp;
        taxSourceLineSummaryTmp.linkPhysicalTableInstance(taxPost.getTaxSourceLineSummaryTmp());
        select firstonly RecId from taxSourceLineSummaryTmp;
        if (taxSourceLineSummaryTmp 
            && SourceDocumentPerformanceFlight::instance().isEnabled())
        {
          taxSourceLineSummaryTmp.dispose();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>