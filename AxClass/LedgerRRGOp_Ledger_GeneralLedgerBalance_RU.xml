<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerRRGOp_Ledger_GeneralLedgerBalance_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class implements calculation logic for the general ledger balance operation type of the 
/// Russian financial reports generator.
/// </summary>
internal final class LedgerRRGOp_Ledger_GeneralLedgerBalance_RU extends LedgerRRGOp_Ledger_BalanceBase_RU
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static LedgerRRGOp_Ledger_GeneralLedgerBalance_RU construct()
    {
        return new LedgerRRGOp_Ledger_GeneralLedgerBalance_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOperationTaxRange</Name>
				<Source><![CDATA[
    protected void addOperationTaxRange()
    {
        if (parms.operationTaxFilter())
        {
            this.addRange(this.balancePostingLayerFieldId(), parms.operationTaxFilter());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTableId</Name>
				<Source><![CDATA[
    protected tableId ledgerTableId()
    {
        return tableNum(GeneralLedgerBalance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainAccountFieldId</Name>
				<Source><![CDATA[
    protected fieldId mainAccountFieldId()
    {
        return fieldNum(GeneralLedgerBalance, LedgerDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionFieldId</Name>
				<Source><![CDATA[
    protected fieldId dimensionFieldId()
    {
        return fieldNum(GeneralLedgerBalance, LedgerDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>balanceAccountingDateFieldId</Name>
				<Source><![CDATA[
    protected fieldId balanceAccountingDateFieldId()
    {
        return fieldNum(GeneralLedgerBalance, AccountingDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>balancePostingLayerFieldId</Name>
				<Source><![CDATA[
    protected fieldId balancePostingLayerFieldId()
    {
        return fieldNum(GeneralLedgerBalance, PostingLayer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>balanceLedgerFieldId</Name>
				<Source><![CDATA[
    protected FieldId balanceLedgerFieldId()
    {
        return fieldNum(GeneralLedgerBalance, Ledger);
    }

]]></Source>
			</Method>
			<Method>
				<Name>balanceFiscalPeriodTypeFieldId</Name>
				<Source><![CDATA[
    protected FieldId balanceFiscalPeriodTypeFieldId()
    {
        return fieldNum(GeneralLedgerBalance, FiscalCalendarPeriodType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionReferenceTableId</Name>
				<Source><![CDATA[
    protected TableId ledgerDimensionReferenceTableId()
    {
        return tableNum(GeneralLedgerBalanceReportingDimensionReference);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionAccountEntryReferenceFieldId</Name>
				<Source><![CDATA[
    protected FieldId ledgerDimensionAccountEntryReferenceFieldId()
    {
        return fieldNum(GeneralLedgerBalanceReportingDimensionReference, AccountEntryLedgerDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionReportingDimensionReferenceFieldId</Name>
				<Source><![CDATA[
    protected FieldId ledgerDimensionReportingDimensionReferenceFieldId()
    {
        return fieldNum(GeneralLedgerBalanceReportingDimensionReference, AccountEntryLedgerDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionReferenceDimensionHierarchyFieldId</Name>
				<Source><![CDATA[
    protected FieldId ledgerDimensionReferenceDimensionHierarchyFieldId()
    {
        return fieldNum(GeneralLedgerBalanceReportingDimensionReference, FocusDimensionHierarchy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init(LedgerRRGEBufferEval_W _bufferEval)
    {
        super(_bufferEval);
    
        if (parms.currencyForCalc() == LedgerRRGCurrencyForCalc_RU::AmountMST)
        {
            debitAmountFieldId = fieldNum(GeneralLedgerBalance, DebitAccountingCurrencyAmount);
            creditAmountFieldId = fieldNum(GeneralLedgerBalance, CreditAccountingCurrencyAmount);
            amountFieldId = fieldNum(GeneralJournalAccountEntry, AccountingCurrencyAmount);
        }
        else
        {
            debitAmountFieldId = fieldNum(GeneralLedgerBalance, DebitReportingCurrencyAmount);
            creditAmountFieldId = fieldNum(GeneralLedgerBalance, CreditReportingCurrencyAmount);
            amountFieldId = fieldNum(GeneralJournalAccountEntry, ReportingCurrencyAmount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processQueryRun</Name>
				<Source><![CDATA[
    public AmountMST processQueryRun(QueryRun _queryRun)
    {
        Amount debitDelta, creditDelta;
        AmountMST ret;
    
        GeneralLedgerBalance generalLedgerBalance = _queryRun.get(tableNum(GeneralLedgerBalance));
    
        if (parms.calcMethod() == ReportCalcMethod_RU::ReportingDate)
        {
            [debitDelta, creditDelta] = this.calcCorrectDelta(generalLedgerBalance.LedgerDimension);
        }
    
        if (parms.operation().LedgerOperation == LedgerRRGOperationType_RU::ActiveBalance ||
            parms.operation().LedgerOperation == LedgerRRGOperationType_RU::PassiveBalance)
        {
            this.addValue(dimensionMap,
                generalLedgerBalance.LedgerDimension,
                [generalLedgerBalance.(debitAmountFieldId)  + debitDelta,
                generalLedgerBalance.(creditAmountFieldId) + creditDelta]);
        }
        else
        {
            switch (crediting)
            {
                case UnknownNoYes::No :
                    ret = generalLedgerBalance.(debitAmountFieldId)  + debitDelta;
                    break;
                case UnknownNoYes::Yes :
                    ret = generalLedgerBalance.(creditAmountFieldId) + creditDelta;
                    break;
                case UnknownNoYes::Unknown :
                    ret = generalLedgerBalance.(debitAmountFieldId)  + debitDelta +
                          generalLedgerBalance.(creditAmountFieldId) + creditDelta;
                    if (FeatureStateProvider::isFeatureEnabled(DebitCreditBalanceInFinancialReportFeature::instance()))
                    {
                        switch (parms.operation().LedgerOperation)
                        {
                            case LedgerRRGOperationType_RU::BalanceCredit:
                                ret = abs(min(ret, 0));
                                break;

                            case  LedgerRRGOperationType_RU::BalanceDebit:
                                ret = max(ret, 0);
                                break;
                        }
                    }
                    break;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>