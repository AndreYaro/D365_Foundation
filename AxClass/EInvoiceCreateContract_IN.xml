<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EInvoiceCreateContract_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EInvoiceCreateContract_IN</c> class is the data contract class
/// for the Indian EInvoice records creation.
/// </summary>
[DataContract]
internal final class EInvoiceCreateContract_IN implements SysOperationValidatable
{
    private Common common;
    private str query;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuery</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute,
        AifQueryTypeAttribute('_query', '')
    ]
    public str parmQuery(str _query = query)
    {
        query = _query;
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method initializes the contract query.
    /// </summary>
    internal void initQuery()
    {
        Query newQuery = new Query();

        QueryBuildDataSource qbdsCustInvoiceJour = newQuery.addDataSource(tableNum(CustInvoiceJour));
        this.addEInvoiceJoin(
            qbdsCustInvoiceJour,
            fieldNum(CustInvoiceJour, TableId),
            fieldNum(CustInvoiceJour, RecId),
            fieldNum(CustInvoiceJour, SentElectronically),
            fieldNum(CustInvoiceJour, InvoiceAccount));

        QueryBuildDataSource qbdsProjInvoiceJour = newQuery.addDataSource(tableNum(ProjInvoiceJour));
        this.addEInvoiceJoin(
            qbdsProjInvoiceJour,
            fieldNum(ProjInvoiceJour, TableId),
            fieldNum(ProjInvoiceJour, RecId),
            fieldNum(ProjInvoiceJour, SentElectronically),
            fieldNum(ProjInvoiceJour, InvoiceAccount));

        QueryBuildDataSource qbdsInventTransferJour = newQuery.addDataSource(tableNum(InventTransferJour));
        this.addEInvoiceJoin(
            qbdsInventTransferJour,
            fieldNum(InventTransferJour, TableId),
            fieldNum(InventTransferJour, RecId),
            fieldNum(InventTransferJour, SentElectronically));
        findOrCreateRange_W(qbdsInventTransferJour, fieldNum(InventTransferJour, UpdateType), queryValue(InventTransferUpdateType::Shipment));
        QueryBuildDataSource qbdsInventTransferTable = qbdsInventTransferJour.addDataSource(tableNum(InventTransferTable));
        qbdsInventTransferTable.relations(true);
        qbdsInventTransferTable.joinMode(JoinMode::ExistsJoin);
        findOrCreateRange_W(qbdsInventTransferTable, fieldNum(InventTransferTable, TransferType_IN), queryValue(TransferType_IN::StockTransfer));

        QueryBuildDataSource qbdsCustomsShippingBillJour = newQuery.addDataSource(tableNum(CustomsShippingBillJour_IN));
        this.addEInvoiceJoin(
            qbdsCustomsShippingBillJour,
            fieldNum(CustomsShippingBillJour_IN, TableId),
            fieldNum(CustomsShippingBillJour_IN, RecId),
            fieldNum(CustomsShippingBillJour_IN, SentElectronically),
            fieldNum(CustomsShippingBillJour_IN, InvoiceAccount));

        if (query)
        {
            Query oldQuery = this.getQuery();
            SysQuery::mergeRanges(newQuery, oldQuery);
            SysQuery::mergeFilters(oldQuery, newQuery);
        }

        this.setQuery(newQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method returns a <c>Query</c> object for the contract query.
    /// </summary>
    /// <returns>A <c>Query</c> object for the contract query.</returns>
    public Query getQuery()
    {
        return new Query(SysOperationHelper::base64Decode(query));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets and encodes a given query as a base 64 encoded string.
    /// </summary>
    /// <param name = "_query">The query to be encoded as a base 64 encoded string.</param>
    internal void setQuery(Query _query)
    {
        query = SysOperationHelper::base64Encode(_query.pack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addEInvoiceJoin</Name>
				<Source><![CDATA[
    private void addEInvoiceJoin(
        QueryBuildDataSource _qbds,
        FieldId _tableFieldId,
        FieldId _recFieldId,
        FieldId _sentElectronicallyFieldId,
        FieldId _invoiceAccountFieldId = 0)
    {
        findOrCreateRange_W(_qbds, _sentElectronicallyFieldId, queryValue(NoYes::No)).status(RangeStatus::Locked);

        QueryBuildDataSource qbdsEInvoice_IN = _qbds.addDataSource(tableNum(EInvoice_IN));
        qbdsEInvoice_IN.joinMode(JoinMode::NoExistsJoin);
        qbdsEInvoice_IN.addLink(_tableFieldId, fieldNum(EInvoice_IN, RefTableId));
        qbdsEInvoice_IN.addLink(_recFieldId, fieldNum(EInvoice_IN, RefRecId));

        if (_invoiceAccountFieldId != 0)
        {
            QueryBuildDataSource qbdsCustTable = _qbds.addDataSource(tableNum(CustTable));
            qbdsCustTable.joinMode(JoinMode::ExistsJoin);
            qbdsCustTable.addLink(_invoiceAccountFieldId, fieldNum(CustTable, AccountNum));
            findOrCreateRange_W(qbdsCustTable, fieldNum(CustTable, EInvoice), queryValue(NoYes::Yes));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        this.initQuery();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>