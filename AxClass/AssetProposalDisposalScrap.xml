<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetProposalDisposalScrap</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>AssetProposalDisposalScrap</c> class is used to create asset Journal Lines
///     corresponding to the scrap proposal.
/// </summary>
class AssetProposalDisposalScrap extends AssetProposal implements BatchRetryable
{
    DialogField     dialogRunDate;
    DialogField     dialogReasonComment;
    DialogField     dialogReasonCode;

    ReasonCode      reasonCode;
    ReasonComment   reasonComment;

    const int DisposalCurrentVersion = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetTransType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns an asset transaction type corresponding to this proposal.
    /// </summary>
    /// <returns>
    ///    Always returns the <c>DisposalScrap</c> enum value.
    /// </returns>
    AssetTransTypeJournal assetTransType()
    {
        return AssetTransTypeJournal::DisposalScrap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a dialog for Disposal proposal.
    /// </summary>
    /// <returns>
    ///    The dialog box for the Disposal proposal.
    /// </returns>
    public Object dialog()
    {
        DialogRunbase   dialog = super();

        dialog.caption("@SYS67461");

        dialogRunDate = dialog.addField(extendedTypeStr(AssetTransDate), "@SYS67457", "@SYS4008220");
        dialogRunDate.value(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

        dialog.addGroup("@SYS86426");

        dialogReasonCode = dialog.addField(extendedTypeStr(ReasonCode));
        dialogReasonCode.value(reasonCode);

        dialogReasonComment = dialog.addField(extendedTypeStr(ReasonComment));
        dialogReasonComment.value(reasonComment);

        dialogReasonCode.control().registerOverrideMethod(
            methodStr(FormStringControl, lookup),
            methodStr(AssetProposalDisposalScrap, dialogReasonCode_lookup),
            this);

        dialogReasonCode.control().registerOverrideMethod(
            methodStr(FormStringControl, jumpRef),
            methodStr(AssetProposalDisposalScrap, dialogReasonCode_jumpRef),
            this);

        dialogReasonCode.control().registerOverrideMethod(
            methodStr(FormStringControl, modified),
            methodStr(AssetProposalDisposalScrap, dialogReasonCode_modified),
            this);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = true;

        ret = super(_calledFrom);

        if (ret && !reasonCode)
        {
            if (AssetParameters::transTypeRequiresValidation(AssetTransTypeJournal::DisposalScrap))
            {
                ret = checkFailed(strFmt("@SYS110217", "@SYS111246"));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogReasonCode_jumpRef</Name>
				<Source><![CDATA[
    private void dialogReasonCode_jumpRef(FormStringControl _control)
    {
        ReasonTable::jumpRef(ReasonCodeAccountTypeAll::FixedAssets);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogReasonCode_lookup</Name>
				<Source><![CDATA[
    private void dialogReasonCode_lookup(FormStringControl _control)
    {
        ReasonFormTable::reasonCodeLookup(_control, LedgerJournalACType::Ledger, LedgerJournalACType::FixedAssets, true, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogReasonCode_modified</Name>
				<Source><![CDATA[
    private boolean dialogReasonCode_modified(FormStringControl _control)
    {
        boolean isModified;
        FormStringControl controlReasonComment = dialogReasonComment.control();

        isModified = _control.modified();

        if (isModified)
        {
            controlReasonComment.text(ReasonTable::find(_control.text()).Description);
            controlReasonComment.update();
        }

        return isModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        reasonCode      = dialogReasonCode.value();
        reasonComment   = dialogReasonComment.value();
        runDate  = dialogRunDate.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        QueryBuildRange range;
        Query           query = new Query(queryStr(AssetProposal));

        super();

        query.name("@SYS67461");

        query.dataSourceTable(tableNum(AssetBook)).addRange(fieldNum(AssetBook, AcquisitionDate));

        range = query.dataSourceTable(tableNum(AssetBookTable)).addRange(fieldNum(AssetBookTable, CurrentOperationsTax));
        range.status(RangeStatus::Hidden);

        range = query.dataSourceTable(tableNum(AssetBook)).addRange(fieldNum(AssetBook, Status));        
        range.value(queryValue(AssetStatus::Open) + ',' + queryValue(AssetStatus::Closed));
        range.status(RangeStatus::Locked);

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [DisposalCurrentVersion, reasonCode, reasonComment, runDate, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates asset journal lines corresponding to the scrap proposal according to the selection criteria.
    /// </summary>
    public void run()
    {
        AssetBook       assetBook;
        AssetTransDate  transDate;
        AssetJournal    assetJournal;

        assetJournal = new AssetJournal(journalNum, this.assetTransType());
        assetJournal.parmIsProposal(true);

        if (assetJournal && LedgerParameters::isChineseVoucher_CN())
        {
            assetJournal.parmVoucherType_CN(voucherType_CN);
        }

        ttsBegin;
        while (queryRun.next())
        {
            if (queryRun.changed(tableNum(AssetBook)))
            {
                assetBook = queryRun.get(tableNum(AssetBook)) as AssetBook;
                transDate = this.initFirstDate(runDate, assetBook.AssetId);

                if (reasonCode != '' || reasonComment != '')
                {
                    assetJournal.parmReasonCode(reasonCode);
                    assetJournal.parmReasonComment(reasonComment);
                }

                assetJournal.createTrans(0, assetBook, transDate);
                // <GJP>
                if (AssetDocumentUtility_JP::isAssetDocumentEnabled()
                    && AssetReductionEntryManager_JP::canGenerateRepaymentTrans(assetBook.AssetId, assetBook.BookId))
                {
                    AssetReductionEntryManager_JP::generateRepaymentTrans(
                        assetBook,
                        transDate,
                        assetJournal);
                }
                // </GJP>
            }
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean     unpacked;
        container   packedBaseClass;
        Integer     version = conPeek(_packedClass, 1);

        switch (version)
        {
            case DisposalCurrentVersion:
                [version, reasonCode, reasonComment, runDate, packedBaseClass] = _packedClass;
                unpacked = super(packedBaseClass);
                break;

            default:
                unpacked = false;
        }

        return unpacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>