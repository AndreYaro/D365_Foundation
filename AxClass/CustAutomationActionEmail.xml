<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustAutomationActionEmail</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>CustAutomationActionEmail</c> class is the implementation of email creation for customer automations.
/// </summary>
[ExportMetadataAttribute(enumstr(CustAutomationActionType), CustAutomationActionType::Email)]
[ExportAttribute(identifierstr(Dynamics.AX.Application.CustAutomationIAction))]
internal final class CustAutomationActionEmail implements CustAutomationIAction
{
    private CustTable custTable;
    private CustTrans custTrans;
    private DirPartyTable dirPartyTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>executeAction</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void executeAction(CustAutomationContract _contract)
    {
        CustAutomationInvoice invoice = _contract.parmCustAutomationInvoice();

        this.setLookupTableBuffersForMapping(invoice);

        Map variableMap = this.mapTemplateVariables();

        SysMailerMessageBuilder messageBuilder = this.buildEmail(invoice, variableMap);

        SysMailerFactory::sendNonInteractive(messageBuilder.getMessage());

        if (_contract.parmCreateActivitiesForAutomations())
        {
            this.createActivity(_contract);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLookupTableBuffersForMapping</Name>
				<Source><![CDATA[
    private void setLookupTableBuffersForMapping(CustAutomationInvoice _invoice)
    {
        // Ordering matters for CustTable and DirPartyTable.
        this.parmCustTable(CustTable::find(_invoice.AccountNum));
        this.parmCustTrans(CustTrans::findFromInvoice(_invoice.Invoice, _invoice.AccountNum));
        this.parmDirPartyTable(DirPartyTable::findRec(custTable.Party));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildEmail</Name>
				<Source><![CDATA[
    private SysMailerMessageBuilder buildEmail(CustAutomationInvoice _invoice, Map _variableMap)
    {
        SysEmailSystemTable messageHeader = SysEmailSystemTable::find(_invoice.BusinessDocument);
        SysEmailMessageSystemTable messageTable = SysEmailMessageSystemTable::find(_invoice.BusinessDocument, this.parmCustTable().languageId());

        SysMailerMessageBuilder messageBuilder = new SysMailerMessageBuilder();
        messageBuilder.setSubject(messageTable.Subject);
        messageBuilder.setBody(SysEmailMessage::stringExpand(messageTable.Mail, SysEmailTable::htmlEncodeParameters(_variableMap)));
        this.addRecipientsToEmail(messageBuilder, _invoice);

        if (messageHeader.SenderAddr)
        {
            messageBuilder.setFrom(messageHeader.SenderAddr, messageHeader.SenderName);
        }

        return messageBuilder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapTemplateVariables</Name>
				<Source><![CDATA[
    private Map mapTemplateVariables()
    {
        Map templateVariables = new Map(Types::String, Types::String);
        CustAutomationEmailTemplateMap emailTemplateMap;

        while select emailTemplateMap
        {
            this.mapTableVariables(templateVariables, emailTemplateMap);
        }

        return templateVariables;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapTableVariables</Name>
				<Source><![CDATA[
    private Map mapTableVariables(Map _templateVariables, CustAutomationEmailTemplateMap _emailTemplateMap)
    {
        TableId id = tableName2Id(enum2Symbol(enumNum(CustAutomationEmailTemplateMapTables), _emailTemplateMap.TargetTable));

        switch (id)
        {
            case tableNum(CustTable) :
                _templateVariables.insert(_emailTemplateMap.TargetField, strFmt('%1', custTable.(_emailTemplateMap.TargetFieldId)));
                break;
            case tableNum(CustTrans) :
                _templateVariables.insert(_emailTemplateMap.TargetField, strFmt('%1', custTrans.(_emailTemplateMap.TargetFieldId)));
                break;
            case tableNum(DirPartyTable) :
                _templateVariables.insert(_emailTemplateMap.TargetField, strFmt('%1', dirPartyTable.(_emailTemplateMap.TargetFieldId)));
                break;
        }

        return _templateVariables;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRecipientsToEmail</Name>
				<Source><![CDATA[
    private void addRecipientsToEmail(SysMailerMessageBuilder _messageBuilder, CustAutomationInvoice _invoice)
    {
        List recipientAddresses = this.getRecipientAddresses(_invoice);
        ListIterator listIterator = new ListIterator(recipientAddresses);
    
        while (listIterator.more())
        {
            _messageBuilder.addTo(listIterator.value());
            listIterator.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecipientAddresses</Name>
				<Source><![CDATA[
    private List getRecipientAddresses(CustAutomationInvoice _invoice)
    {
        List recipientAddresses = new List(Types::String);

        switch (_invoice.Recipient)
        {
            case CustAutomationRecipient::CollectionsAgent :
                recipientAddresses.addStart(CustAutomationEmailFinder::findCollectionsAgentEmail(_invoice.BusinessPurposeContact));
                break;
            case CustAutomationRecipient::Customer :
                recipientAddresses = CustAutomationEmailFinder::findEmailAddressesForRoles(_invoice.BusinessPurposeContact, this.parmCustTable().Party);
                break;
            case CustAutomationRecipient::SalesGroup :
                recipientAddresses = CustAutomationEmailFinder::findSalesGroupContactEmail(_invoice.BusinessPurposeContact);
                break;
            case CustAutomationRecipient::None :
                break;
        }

        return recipientAddresses;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustTable</Name>
				<Source><![CDATA[
    private CustTable parmCustTable(CustTable _custTable = custTable)
    {
        custTable = _custTable;
        return custTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustTrans</Name>
				<Source><![CDATA[
    private CustTrans parmCustTrans(CustTrans _custTrans = custTrans)
    {
        custTrans = _custTrans;
        return custTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDirPartyTable</Name>
				<Source><![CDATA[
    private DirPartyTable parmDirPartyTable(DirPartyTable _dirPartyTable = dirPartyTable)
    {
        dirPartyTable = _dirPartyTable;
        return dirPartyTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createActivity</Name>
				<Source><![CDATA[
    private void createActivity(CustAutomationContract _contract)
    {
        CustAutomationActivityCreation activityCreation = CustAutomationActivityCreation::newForActivity(this.getPurpose(), this.getTypeId(), this.getUserMemo());
        activityCreation.createActivity(_contract.parmCustAutomationInvoice().AccountNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTypeId</Name>
				<Source><![CDATA[
    private smmActivityTypeId getTypeId()
    {
        return "@CustAutomation:ActivityEmailTypeGroup";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurpose</Name>
				<Source><![CDATA[
    private smmActivityPurpose getPurpose()
    {
        return "@CustAutomation:ActivityEmailPurpose";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserMemo</Name>
				<Source><![CDATA[
    private smmActivityUserMemo getUserMemo()
    {
        return "@CustAutomation:ActivityEmailMemo";
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessage</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ProcessExecutionSourceLinkMessage errorMessage(AccountNum _accountNum)
    {
        return strFmt("@CustAutomation:ActionTypeEmailError", _accountNum);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>