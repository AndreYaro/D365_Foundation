<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesConsistencyCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SalesConsistencyCheck extends SysConsistencyCheck implements BatchRetryable
{
    protected boolean isTradeConsistencyCheckFlightEnabled = TradeConsistencyCheckFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkFixSalesLine</Name>
				<Source><![CDATA[
    private void checkFixSalesLine()
    // Exclude the Open Order Sales Status in the SalesTable file.
    {
        DictTable dictTable = new DictTable(tablenum(SalesLine));
        str s = strfmt("@SYS26373", dictTable.label());
        progress.setText(s,2);
        setprefix(s);

        Query q = new Query();
        q.addDataSource(tablenum(SalesLine));

        if (isTradeConsistencyCheckFlightEnabled && consistencyCheckJob.parmFromDate())
        {
            TradeConsistencyCheckHelper::addFromDateFieldRange(q, consistencyCheckJob.parmFromDate());
        }

        QueryRun qr = new QueryRun(q);

        while (qr.next())
        {
              SalesLine salesLine = qr.get(tablenum(SalesLine));

            // Dismiss orders with status Canceled from consistancy check.
            if (salesLine.SalesStatus != SalesStatus::Canceled)
            {
                if (salesLine.ProjId)
                {
                    //
                    // Only check orders with a valid project item transaction and
                    // those with projects at a status that allows creating sales lines
                    //
                    if (ProjItemTrans::find(salesLine.ProjTransId) &&
                        ProjTable::find(salesLine.ProjId).status().checkRule(ProjStatusRule::CreateItemTask))
                    {
                        this.kernelCheckRecord(salesLine,dictTable);
                    }
                }
                //not Project
                else
                {
                    this.kernelCheckRecord(salesLine,dictTable);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFixSalesTable</Name>
				<Source><![CDATA[
    private void checkFixSalesTable()
    // Exclude the checking if the sales order of type item requirements for Fp
    {
        DictTable dictTable = new DictTable(tablenum(SalesTable));
        str s = strfmt("@SYS26373", dictTable.label());
        progress.setText(s,2);
        setprefix(s);

        Query q = new Query();
        q.addDataSource(tablenum(SalesTable));

        if (isTradeConsistencyCheckFlightEnabled && consistencyCheckJob.parmFromDate())
        {
            TradeConsistencyCheckHelper::addFromDateFieldRange(q, consistencyCheckJob.parmFromDate());
        }

        QueryRun qr = new QueryRun(q);

        while (qr.next())
        {
            SalesTable salesTable = qr.get(tablenum(SalesTable));

            if (salesTable.ProjId)
            {
                ProjTable projTable = ProjTable::find(salesTable.ProjId);

                // Only check orders for those with projects at a status that allows creating sales orders
                if (projTable.status().checkRule(ProjStatusRule::CreateItemTask))
                {
                    this.kernelCheckRecord(salesTable,dictTable);
                }
            }
            //not Project
            else
            {
                 this.kernelCheckRecord(salesTable,dictTable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
    configurationKeyId configurationKey()
    {
        return configurationkeynum(LogisticsBasic);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executionOrder</Name>
				<Source><![CDATA[
    Integer executionOrder()
    {
        return 25;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        // SalesTable
        this.checkFixSalesTable();

        // SalesLine
        this.checkFixSalesLine();

        // SalesParameters
        this.kernelCheckTable(tablenum(SalesParameters));
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeParentClassId</Name>
				<Source><![CDATA[
    ClassId treeParentClassId()
    {
        return classNum(SalesRootConsistencyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    void validateField(
        Common      common,
        DictField   dictField
        )
    {
        switch (common.TableId)
        {
            case tablenum(SalesLine) :

                if (dictField.id() == fieldnum(SalesLine,InventTransId))
                {
                    SalesLine salesLine = common;
                    if (salesLine.SalesType == SalesType::Journal ||
                        (salesLine.SalesType == SalesType::ReturnItem && (salesLine.ReturnStatus == ReturnStatusLine::Awaiting && salesLine.ReturnAllowReservation == NoYes::No)))
                        return;
                }
                break;

            case tablenum(SalesTable) :
                if (dictField.id() == fieldnum(SalesTable, CustAccount) ||
                    dictField.id() == fieldnum(SalesTable, InvoiceAccount))
                    return;
                break;
        }

        super(common,dictField);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SalesAndMarketing:SalesDataConsistencyCheck_Description";
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
    static HelpTxt helpText()
    {
        return "@SalesAndMarketing:SalesDataConsistencyCheck_HelpText";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        SysConsistencyCheckJob consistencyCheckJob = new SysConsistencyCheckJob(classNum(SalesConsistencyCheck));

        if (!consistencyCheckJob.prompt())
        {
            return;
        }

        consistencyCheckJob.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>