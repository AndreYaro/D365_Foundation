<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSMixedLicensePlateInfoReturnOrderReceivingCalculator</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSMixedLicensePlateInfoReturnOrderReceivingCalculator extends WHSMixedLicensePlateInfoCalculator
{
    private WHSLicensePlateId mixedLicensePlateId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromMixedLicensePlateId</Name>
				<Source><![CDATA[
    internal static WHSMixedLicensePlateInfoReturnOrderReceivingCalculator newFromMixedLicensePlateId(WHSLicensePlateId _mixedLicensePlateId)
    {
        WHSMixedLicensePlateInfoReturnOrderReceivingCalculator calculator = new WHSMixedLicensePlateInfoReturnOrderReceivingCalculator();
        calculator.mixedLicensePlateId = _mixedLicensePlateId;

        return calculator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateLicensePlateInfo</Name>
				<Source><![CDATA[
    internal List calculateLicensePlateInfo()
    {
        List licensePlateInfo = new List(Types::String);

        WHSMixedLicensePlateReceiptLine mixedLPLines;
        SalesTable                      sales;
        SalesLine                       returnLine;

        while select InventTransId, LineNum, InventQty, InventDimId, CapturedWeight from mixedLPLines
            order by LineNum
            where mixedLPLines.MixedLPReceivingTable == WHSMixedLicensePlateReceipt::findOpenByLicensePlateId(mixedLicensePlateId).RecId
                join ItemId, ExpectedRetQty, SalesUnit, PdsCWExpectedRetQty from returnLine
                    where returnLine.InventTransId == mixedLPLines.InventTransId
                join ReturnItemNum from sales
                    where sales.SalesId   == returnLine.SalesId
                    &&    sales.SalesType == SalesType::ReturnItem
        {
            InventQty returnInventQty = InventTableModule::unitConvert(returnLine.ItemId,
                                                                        ModuleInventPurchSales::Invent,
                                                                        returnLine.SalesUnit,
                                                                        returnLine.ExpectedRetQty,
                                                                        returnLine.InventDimId);

            boolean isCWItem = PdsGlobal::pdsIsCWItem(returnLine.ItemId);
            
            str lpInfo = strFmt('%1\n%2\n%3\n%4\n%5%6\n%7',
                            strFmt("@WAX3192", "@SYS70473", mixedLPLines.LineNum),
                            strFmt("@WAX3192", "@WAX3259", sales.ReturnItemNum),
                            strFmt("@WAX3192", "@WAX1240", returnLine.ItemId),
                            strFmt("@WAX3192", "@WAX:ReturnLineQty", isCWItem ? returnLine.PdsCWExpectedRetQty : returnInventQty),
                            strFmt("@WAX3192", "@WAX:LPQty", mixedLPLines.InventQty),
                            isCWItem ? strFmt('\n%1\n%2',
                                                strFmt("@WAX3192", "@SYS153282", WHSCatchWeightHelper::inventHandlingUnitId(returnLine.ItemId)),
                                                strFmt("@WAX3192", "@WAX:WeightCaptured", mixedLPLines.CapturedWeight)) : '',
                            strFmt("@WAX3192", "@SYS153282", InventTableModule::find(returnLine.ItemId, ModuleInventPurchSales::Invent).UnitId));

            lpInfo = lpInfo + this.calculateProductAndTrackingDimensionsInfo(mixedLPLines.InventDimId);

            licensePlateInfo.addEnd(lpInfo);
        }

        return licensePlateInfo;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>