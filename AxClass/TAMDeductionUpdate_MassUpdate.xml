<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TAMDeductionUpdate_MassUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TAMDeductionUpdate_MassUpdate</c> class manages the update of deductions for the action of
/// mass update.
/// </summary>
class TAMDeductionUpdate_MassUpdate extends TAMDeductionUpdate
{
    TmpTAMDeductionParmMassUpdate tmpDeductionParmMassUpdate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new(TmpTAMDeductionParmMassUpdate _tmpDeductionParmMassUpdate)
    {
        super(_tmpDeductionParmMassUpdate);
        tmpDeductionParmMassUpdate.setTmpData(_tmpDeductionParmMassUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the temporary buffer that specifies mass update.
    /// </summary>
    /// <returns>
    /// The temporary buffer that specifies mass update.
    /// </returns>
    protected Common parmBuffer()
    {
        return tmpDeductionParmMassUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the mass update form string.
    /// </summary>
    /// <returns>
    /// The mass update form string.
    /// </returns>
    protected str parmFormString()
    {
        return formStr(TAMDeductionParmMassUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTAMDeductionUpdateType</Name>
				<Source><![CDATA[
        protected TAMDeductionUpdateType parmTAMDeductionUpdateType()
    {
        return TAMDeductionUpdateType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the mass update on the deductions.
    /// </summary>
    /// <remarks>
    /// Initializes each deduction from the mass update record.
    /// </remarks>
    protected void update()
    {
        #OCCRetryCount
        TAMDeduction             deduction;
        try
        {
            ttsBegin;

            while select tmpDeductionParmMassUpdate
            {
                deduction = TAMDeduction::find(tmpDeductionParmMassUpdate.TAMDeductionID,
                                               true);

                deduction.initFromTmpDeductionParmMassUpdate(tmpDeductionParmMassUpdate);

                if (deduction.validateWrite())
                {
                    deduction.update();
                }
                else
                {
                    throw Exception::Error;
                }
            }

            ttsCommit;
            this.parmUpdateOccurred(true);
        }
        catch (Exception::Error)
        {
            error("@SYS21628");
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies fields to deduction the record and validates evey field of record.
    /// </summary>
    /// <returns>
    /// true if the deduction is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Assumption is that deduction does not have any array fields.
    /// </remarks>
    protected boolean validate()
    {
        TAMDeduction    deduction;
        DictField       dictField;
        DictTable       dictTable;
        FieldId         fieldId;
        int             fieldIndex;
        int             fieldCount;
        boolean         ret;
        ret = true;

        dictTable = new DictTable(tableNum(TAMDeduction));
        fieldCount = dictTable.fieldCnt();

        setPrefix("@MCR27632");

        while select tmpDeductionParmMassUpdate
        {
            deduction = TAMDeduction::find(tmpDeductionParmMassUpdate.TAMDeductionID);

            setPrefix(strFmt("@MCR28005",
                             deduction.TAMDeductionID));

            switch (deduction.TAMDeductionStatus)
            {
                case TAMDeductionStatus::Closed:
                    ret = checkFailed(strFmt("@MCR27796",
                                             deduction.TAMDeductionID,
                                             deduction.TAMDeductionStatus));
                    continue;
                case TAMDeductionStatus::Created:
                case TAMDeductionStatus::Open:
                    break;
                default:
                    throw error(strFmt("@MCR10766",
                                       funcName()));
            }

            deduction.initFromTmpDeductionParmMassUpdate(tmpDeductionParmMassUpdate);

            for (fieldIndex = 1;    fieldIndex <= fieldCount;    fieldIndex++)
            {
                fieldId = dictTable.fieldCnt2Id(fieldIndex);
                setPrefix(fieldId2pname(tableNum(TAMDeduction),
                                                 fieldId));

                dictField = new DictField(tableNum(TAMDeduction),
                                                   fieldId);

                if (!deduction.validateField(dictField.id()))
                {
                    ret = false;
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a mass update object given temporary records that specify
    /// what to match.
    /// </summary>
    /// <param name="_tmpDeductionParmMassUpdate">
    /// The temporary records used to build the match.
    /// </param>
    /// <returns>
    /// The initialized deduction update mass update.
    /// </returns>
    public static TAMDeductionUpdate_MassUpdate construct(TmpTAMDeductionParmMassUpdate _tmpDeductionParmMassUpdate)
    {
        TAMDeductionUpdate_MassUpdate tamDeductionUpdate_MassUpdate;

        tamDeductionUpdate_MassUpdate = new TAMDeductionUpdate_MassUpdate(_tmpDeductionParmMassUpdate);

        return tamDeductionUpdate_MassUpdate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>