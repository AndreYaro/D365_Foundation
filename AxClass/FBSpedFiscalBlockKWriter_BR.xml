<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBSpedFiscalBlockKWriter_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FBSpedFiscalBlockKWriter_BR</c> class will create and manage the sped file through <c>FBSpedFile_BR</c> class instance.
/// </summary>
public class FBSpedFiscalBlockKWriter_BR
{
    FBSpedFile_BR spedFile;

    FBSpedFilePartyTmp_BR spedFileParty;

    FBSpedRecord_BR parentRecordK100;
    FBSpedRecord_BR parentRecordK200;
    FBSpedRecord_BR parentRecordK220;
    FBSpedRecord_BR parentRecordK230;
    FBSpedRecord_BR parentRecordK235;
    FBSpedRecord_BR parentRecordK260;
    FBSpedRecord_BR parentRecordK265;
    FBSpedRecord_BR parentRecordK270;
    FBSpedRecord_BR parentRecordK275;
    FBSpedRecord_BR parentRecordK280;
    FBSpedRecord_BR parentRecordK290;
    FBSpedRecord_BR parentRecordK291;
    FBSpedRecord_BR parentRecordK292;

    FBSpedRecord_BR parentRecord0210;

    int  blockKGroupCounter;
    date taxAssessmentFromDate;
    date taxAssessmentToDate;

    FBSPEDFiscalVersion_BR spedFiscalVersion;

    private FBSpedRecord_BR parentRecordK010;
    private FBSPEDFiscalBlockK_BR blockK;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addChildRecord</Name>
				<Source><![CDATA[
    private void addChildRecord(FBSpedRecord_BR _parentRecord, FBSpedRecord_BR _childRecord)
    {
        spedFile.addChildRecord(_parentRecord, _childRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHierarchy</Name>
				<Source><![CDATA[
    private void createHierarchy()
    {
        // Records K230 must be printed after K220 in SPED file
        // But K230 must be processed before K220
        // To solve this, non printable records that will be used as group identifiers are created
        // Group 1 will contain K100, K200 and K220 and will be printed before group 2, that contains K230 and K235\
        FBSpedRecord_BR nonPrintableRecordGroup1 = this.newRecord(this.newBlockKGroupIdentifier());
        FBSpedRecord_BR nonPrintableRecordGroup2 = this.newRecord(this.newBlockKGroupIdentifier());

        parentRecordK010 = nonPrintableRecordGroup1;
        parentRecordK100 = nonPrintableRecordGroup1;
        parentRecordK200 = nonPrintableRecordGroup1;
        parentRecordK220 = nonPrintableRecordGroup1;

        parentRecordK230 = nonPrintableRecordGroup2;
        parentRecordK235 = nonPrintableRecordGroup2;

        parentRecordK260 = nonPrintableRecordGroup2;
        parentRecordK265 = nonPrintableRecordGroup2;
        parentRecordK270 = nonPrintableRecordGroup2;
        parentRecordK275 = nonPrintableRecordGroup2;
        parentRecordK280 = nonPrintableRecordGroup2;
        
        parentRecordK290 = nonPrintableRecordGroup2;
        parentRecordK291 = nonPrintableRecordGroup2;
        parentRecordK292 = nonPrintableRecordGroup2;

    }

]]></Source>
			</Method>
			<Method>
				<Name>newBlockKGroupIdentifier</Name>
				<Source><![CDATA[
    private str newBlockKGroupIdentifier()
    {
        blockKGroupCounter++;

        return 'K' + strRFix(int2str(blockKGroupCounter), 3, '0');
    }

]]></Source>
			</Method>
			<Method>
				<Name>newRecord</Name>
				<Source><![CDATA[
    private FBSpedRecord_BR newRecord(str _recordType)
    {
        FBSpedRecord_BR spedRecord = FBSpedRecord_BR::constructEmpty(_recordType);

        return spedRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentRecord0210</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the parent of the record 0210.
    /// </summary>
    /// <param name="_parentRecord0210">
    /// The new value of the parent of the record 0210; It is a <c>FBSpedRecord_BR</c> class instance; optional.
    /// </param>
    /// <returns>
    ///  The current value of the parent of the record 0210.
    /// </returns>
    public FBSpedRecord_BR parmParentRecord0210(FBSpedRecord_BR _parentRecord0210 = parentRecord0210)
    {
        parentRecord0210 = _parentRecord0210;

        return parentRecord0210;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpedFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>FBSpedFile_BR</c> class instance.
    /// </summary>
    /// <param name="_spedFile">
    /// The new value of <c>FBSpedFile_BR</c> class instance.
    /// </param>
    /// <returns>
    ///  The current value of <c>FBSpedFile_BR</c> class instance.
    /// </returns>
    public FBSpedFile_BR parmSpedFile(FBSpedFile_BR _spedFile = spedFile)
    {
        spedFile = _spedFile;

        return spedFile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpedFilePartyTmp</Name>
				<Source><![CDATA[
    protected FBSpedFilePartyTmp_BR parmSpedFilePartyTmp(FBSpedFilePartyTmp_BR _spedFileParty = spedFileParty)
    {
        spedFileParty = _spedFileParty;

        return spedFileParty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpedFiscalVersion</Name>
				<Source><![CDATA[
    protected FBSPEDFiscalVersion_BR parmSpedFiscalVersion(FBSPEDFiscalVersion_BR _spedFiscalVersion = spedFiscalVersion)
    {
        spedFiscalVersion = _spedFiscalVersion;

        return spedFiscalVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxAssessmentFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the initial date of tax assessment period.
    /// </summary>
    /// <param name="_taxAssessmentFromDate">
    /// The new value of the initial date of tax assessment period; optional.
    /// </param>
    /// <returns>
    ///  The current value of the initial date of tax assessment period.
    /// </returns>
    public TransDate parmTaxAssessmentFromDate(TransDate _taxAssessmentFromDate = taxAssessmentFromDate)
    {
        taxAssessmentFromDate = _taxAssessmentFromDate;

        return taxAssessmentFromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxAssessmentToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the end date of tax assessment period.
    /// </summary>
    /// <param name="_taxAssessmentToDate">
    /// The new value of the end date of tax assessment period; optional.
    /// </param>
    /// <returns>
    ///  The current value of the end date of tax assessment period.
    /// </returns>
    public TransDate parmTaxAssessmentToDate(TransDate _taxAssessmentToDate = taxAssessmentToDate)
    {
        taxAssessmentToDate = _taxAssessmentToDate;

        return taxAssessmentToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeRecord0210</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the record 0210 in <c>FBSpedFile_BR</c> class instance;
    /// This record represents the specific consumption standardized from Sped Fiscal.
    /// </summary>
    /// <param name="_itemId">
    /// The item Id of specific consumption standardized to be reported.
    /// </param>
    /// <param name="_itemIdQty">
    /// The total scheduled quantity of specific consumption standardized.
    /// </param>
    /// <param name="_itemIdScrap">
    /// The total weighted scrap quantity of specific consumption standardized; The weighted scrap is based on <c>_totalScheduledQty</c>.
    /// </param>
    public void writeRecord0210(ItemId _itemId, Qty _itemIdQty, Qty _itemIdScrap)
    {
        FBSpedRecord_BR spedRecord = this.newRecord('0210');

        spedRecord.addFieldString(_itemId, 60);
        spedRecord.addFieldNumeric(_itemIdQty, 6);
        spedRecord.addFieldNumeric(_itemIdScrap, 4);

        this.addChildRecord(parentRecord0210, spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeRecordK100</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the record K100 in <c>FBSpedFile_BR</c> class instance;
    /// This record represents the tax assessment period from Sped Fiscal.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// It will throw the exception if the <c>taxAssessmentFromDate</c> or <c>taxAssessmentToDate</c> members have dateNull value.
    /// </exception>
    public void writeRecordK100()
    {
        this.createHierarchy();

        if (taxAssessmentFromDate == dateNull() || taxAssessmentToDate == dateNull())
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        FBSpedRecord_BR spedRecord = this.newRecord('K100');

        spedRecord.addFieldDate(taxAssessmentFromDate);
        spedRecord.addFieldDate(taxAssessmentToDate);

        this.addChildRecord(parentRecordK100, spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeRecordK200</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the record K200 in <c>FBSpedFile_BR</c> class instance;
    /// This record represents the inventory carried from Sped Fiscal.
    /// </summary>
    /// <param name="_balanceDate">
    /// The reference date of the balance of inventory carried to be reported.
    /// </param>
    /// <param name="_itemId">
    /// The item ID of inventory carried to be reported.
    /// </param>
    /// <param name="_inventQty">
    /// The invetory quantity of inventory carried.
    /// </param>
    /// <param name="_inventoOwnwer">
    /// The <c>InventCountingGroup_BR</c> enum to indicate the invent ownwer.
    /// </param>
    public void writeRecordK200(TransDate _balanceDate, ItemId _itemId, Qty _inventQty, InventCountingGroup_BR _inventoOwnwer)
    {
        FBSpedRecord_BR spedRecord = this.newRecord('K200');

        spedRecord.addFieldDate(_balanceDate);
        spedRecord.addFieldString(_itemId);
        spedRecord.addFieldNumeric(_inventQty, 3);
        spedRecord.addFieldString(FBSpedFileCreator_Fiscal_BR::spedInventOwner(_inventoOwnwer));
        spedRecord.addFieldString(_inventoOwnwer == InventCountingGroup_BR::OwnStock ? '' : spedFileParty.code());

        this.addChildRecord(parentRecordK200, spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeRecordK220</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the record K220 in <c>FBSpedFile_BR</c> class instance;
    /// This record represents the handling internal from Sped Fiscal.
    /// </summary>
    /// <param name="_referenceDate">
    /// The reference date of handling internal.
    /// </param>
    /// <param name="_spedItemId">
    /// The sped item Id of handling internal that will be changed to <c>_itemId</c>;
    /// </param>
    /// <param name="_itemId">
    /// The item Id of handling internal to be reported that will be changed from <c>_spedItemId</c>.
    /// </param>
    /// <param name="_totalGoodQty">
    /// The total quantity of handling internal.
    /// </param>
    public void writeRecordK220(ToDate _referenceDate, SpedItemId _spedItemId, ItemId _itemId, Qty _totalGoodQty)
    {
        FBSpedRecord_BR spedRecord = this.newRecord('K220');

        spedRecord.addFieldDate(_referenceDate);                                    // 02 DT_MOV
        spedRecord.addFieldString(_spedItemId);                                     // 03 COD_ITEM_ORI
        spedRecord.addFieldString(_itemId);                                         // 04 COD_ITEM_DEST
        spedRecord.addFieldNumeric(_totalGoodQty, 3, 17);                           // 05 QTD

        if (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v111)
        {
            spedRecord.addFieldNumeric(_totalGoodQty, 3, 17);                       // 06 QTD_DEST
        }

        this.addChildRecord(parentRecordK220, spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeRecordK230</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the record K230 in <c>FBSpedFile_BR</c> class instance;
    /// This record represents the items produced from Sped Fical.
    /// </summary>
    /// <param name="_initDate">
    /// The initial date of the production.
    /// </param>
    /// <param name="_endDate">
    /// The end date of the production.
    /// </param>
    /// <param name="_prodId">
    /// The production order ID of item produzed to be reported.
    /// </param>
    /// <param name="_spedItemId">
    /// The sped item Id of item produzed to be reported.
    /// </param>
    /// <param name="_qtyGood">
    /// The good quantity produzed to be reported.
    /// </param>
    /// <exception cref="Exception::Error">
    /// It will throw the exception if the <c>taxAssessmentFromDate</c> or <c>taxAssessmentToDate</c> members have dateNull value.
    /// </exception>
    public void writeRecordK230(TransDate _initDate, TransDate _endDate, ProdId _prodId, SpedItemId _spedItemId, Qty _qtyGood)
    {
        if (taxAssessmentFromDate == dateNull() || taxAssessmentToDate == dateNull())
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        if(_initDate == dateNull() ||
           _prodId == '' ||
           _spedItemId == '' ||
           _qtyGood < 0)
        {
            return;
        }

        FBSpedRecord_BR spedRecord = this.newRecord('K230');
        spedRecord.addFieldDate(_initDate);

        if (_endDate >= taxAssessmentFromDate && _endDate <= taxAssessmentToDate)
        {
            spedRecord.addFieldDate(_endDate);
        }
        else
        {
            spedRecord.addFieldEmpty();
        }

        spedRecord.addFieldString(_prodId);
        spedRecord.addFieldString(_spedItemId, 60);
        spedRecord.addFieldNumeric(_qtyGood, 3);

        this.addChildRecord(parentRecordK230, spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeRecordK235</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the record K235 in <c>FBSpedFile_BR</c> class instance;
    /// This record represents the material consumption from Sped Fiscal.
    /// </summary>
    /// <param name="_endDate">
    /// The end date of consumption to be reported.
    /// </param>
    /// <param name="_itemId">
    /// The item Id of consumed material to be reported.
    /// </param>
    /// <param name="_consumedMaterialQty">
    /// The total quantity of material consumed to be reported.
    /// </param>
    public void writeRecordK235(TransDate _endDate, ItemId _itemId, Qty _consumedMaterialQty)
    {
        if (_itemId == '' ||
           _endDate == dateNull() ||
           _consumedMaterialQty <= 0)
        {
            return;
        }

        FBSpedRecord_BR spedRecord = this.newRecord('K235');

        spedRecord.addFieldDate(_endDate);
        spedRecord.addFieldString(_itemId);
        spedRecord.addFieldNumeric(_consumedMaterialQty, 3);
        spedRecord.addFieldEmpty();

        this.addChildRecord(parentRecordK235, spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeRecordK260</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the record K260 in <c>FBSpedFile_BR</c> class instance;
    /// This record represents the items reworked from Sped Fical.
    /// </summary>
    /// <param name="_initDate">
    /// The initial date of the rework.
    /// </param>
    /// <param name="_endDate">
    /// The end date of the rework.
    /// </param>
    /// <param name="_prodId">
    /// The rework order ID of item to be reported.
    /// </param>
    /// <param name="_spedItemId">
    /// The sped item Id of item reworked to be reported.
    /// </param>
    /// <param name="_issuedQty">
    /// The issued quantity for reworked item to be reported.
    /// </param>
    /// <param name="_returnedQty">
    /// The returned quantity for reworked item to be reported.
    /// </param>
    /// <exception cref="Exception::Error">
    /// It will throw the exception if the <c>taxAssessmentFromDate</c> or <c>taxAssessmentToDate</c> members have dateNull value.
    /// </exception>
    public void writeRecordK260(TransDate _initDate, TransDate _endDate, ProdId _prodId, SpedItemId _spedItemId, Qty _issuedQty, Qty _returnedQty)
    
    {
        FBSpedRecord_BR spedRecord;
        
        if (taxAssessmentFromDate == dateNull() || taxAssessmentToDate == dateNull())
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }
        
        if (_initDate == dateNull() ||
            _prodId == '' ||
            _spedItemId == '' ||
            _issuedQty <= 0 ||
            _returnedQty < 0)
        {
            return;
        }
        
        spedRecord = this.newRecord('K260');
        spedRecord.addFieldString(_prodId); // COD_OP_OS
        spedRecord.addFieldString(_spedItemId, 60); // COD_ITEM
        spedRecord.addFieldDate(_initDate); // DATA_SAIDA
        spedRecord.addFieldNumeric(_issuedQty, 3); // QTD_SAIDA

        if (_endDate >= taxAssessmentFromDate && _endDate <= taxAssessmentToDate)
        {
            spedRecord.addFieldDate(_endDate); // DAT_RET
            spedRecord.addFieldNumeric(_returnedQty, 3); // QTD_RET
        }

        else
        {
            spedRecord.addFieldEmpty(); // DAT_RET
            spedRecord.addFieldNumeric(0, 3); // QTD_RET
        }

        this.addChildRecord(parentRecordK260, spedRecord);
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeRecordK265</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the record K265 in <c>FBSpedFile_BR</c> class instance;
    /// This record represents the material consumption for rework order from Sped Fiscal.
    /// </summary>
    /// <param name="_itemId">
    /// The item Id of consumed material to be reported.
    /// </param>
    /// <param name="_issuedQty">
    /// The issued quantity for consumed material to be reported.
    /// </param>
    /// <param name="_returnedQty">
    /// The returned quantity for consumed material to be reported.
    /// </param>
    public void writeRecordK265(ItemId _itemId, Qty _issuedQty, Qty _returnedQty)
    
    {
        FBSpedRecord_BR spedRecord;
        
        if(_itemId == '' ||
            _issuedQty <= 0 ||
            _returnedQty < 0)
        {
            return;
        }
        
        spedRecord = this.newRecord('K265');
        
        spedRecord.addFieldString(_itemId); // COD_ITEM
        spedRecord.addFieldNumeric(_issuedQty, 3); // QTD_CONS
        spedRecord.addFieldNumeric(_returnedQty, 3); // QTD_RET
        
        this.addChildRecord(parentRecordK265, spedRecord); 
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeRecordK270</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the record K270 in <c>FBSpedFile_BR</c> class instance;
    /// This record represents the inventory adjustments for goods from Sped Fiscal.
    /// </summary>
    /// <param name="_initDate">
    /// The initial period date.
    /// </param>
    /// <param name="_endDate">
    /// The end period date
    /// </param>
    /// <param name="_prodId">
    /// The identification of production order.
    /// </param>
    /// <param name="_spedItemId">
    /// The item code
    /// </param>
    /// <param name="_postitveQty">
    /// The positive adjustment.
    /// </param>
    /// <param name="_negativeQty">
    /// The negative adjustment
    /// </param>
    /// <param name="_type">
    /// The source of adjustment.
    /// </param>
    public void writeRecordK270(TransDate _initDate, TransDate _endDate, ProdId _prodId, 
        SpedItemId _spedItemId, Qty _postitveQty, Qty _negativeQty, int _type)
    
    {
        FBSpedRecord_BR spedRecord;
        
        if(taxAssessmentFromDate == dateNull() || taxAssessmentToDate == dateNull())
        
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }
       
        spedRecord = this.newRecord('K270');
        spedRecord.addFieldDate(_initDate); // DT_INI_AP
        spedRecord.addFieldDate(_endDate); // DT_FIN_AP
        spedRecord.addFieldString(_prodId); // COD_OP_OS
        spedRecord.addFieldString(_spedItemId, 60); // COD_ITEM
        
        if (_postitveQty)
        {
            spedRecord.addFieldNumeric(_postitveQty, 3); // QTD_COR_POS
        }

        else
        {
            spedRecord.addFieldEmpty();
        }

        if (_negativeQty)
        {
            spedRecord.addFieldNumeric(_negativeQty, 3); // QTD_COR_NEG
        }

        else
        {
            spedRecord.addFieldEmpty();
        }

        spedRecord.addFieldNumeric(_type, 0); // ORIGEM
        
        this.addChildRecord(parentRecordK270, spedRecord);
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeRecordK275</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the record K275 in <c>FBSpedFile_BR</c> class instance;
    /// This record represents the inventory adjustments for materials from Sped Fiscal.
    /// </summary>
    /// <param name="_spedItemId">
    /// The item code
    /// </param>
    /// <param name="_postitveQty">
    /// The positive adjustment.
    /// </param>
    /// <param name="_negativeQty">
    /// The negative adjustment
    /// </param>
    /// <param name="_spedItemIdSub">
    /// The item code in case of item substitution.
    /// </param>
    public void writeRecordK275(SpedItemId _spedItemId, 
        Qty _postitveQty, Qty _negativeQty, SpedItemId _spedItemIdSub)
    
    {
        FBSpedRecord_BR spedRecord;
        
        if(taxAssessmentFromDate == dateNull() || taxAssessmentToDate == dateNull())
        
        {
            throw error(error::wrongUseOfFunction(funcName()));
            
        }
       
        spedRecord = this.newRecord('K275');
        spedRecord.addFieldString(_spedItemId, 60); // COD_ITEM
        
        if (_postitveQty)
        {
            spedRecord.addFieldNumeric(_postitveQty, 3); // QTD_COR_POS
        }

        else
        {
            spedRecord.addFieldEmpty();
        }

        if (_negativeQty)
        {
            spedRecord.addFieldNumeric(_negativeQty, 3); // QTD_COR_NEG
        }

        else
        {
            spedRecord.addFieldEmpty();
        }

        spedRecord.addFieldString(_spedItemIdSub, 60); // COD_INS_SUBST
        
        this.addChildRecord(parentRecordK275, spedRecord);
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeRecordK280</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the record K280 in <c>FBSpedFile_BR</c> class instance;
    /// This record represents the inventory adjustments for materials from Sped Fiscal.
    /// </summary>
    /// <param name="_transDate">
    /// The date of inventory to be fixed
    /// </param>
    /// <param name="_spedItemId">
    /// The item code
    /// </param>
    /// <param name="_postitveQty">
    /// The positive adjustment.
    /// </param>
    /// <param name="_negativeQty">
    /// The negative adjustment
    /// </param>
    /// <param name="_inventOwnwer">
    /// The invent owner ID.
    /// </param>
    /// <param name="_partCode">
    /// The participant code (for Customer or Vendor).
    /// </param>
    public void writeRecordK280(TransDate _transDate, 
        SpedItemId _spedItemId, Qty _postitveQty, Qty _negativeQty, InventCountingGroup_BR _inventOwnwer, str 60 _partCode)
    {
        FBSpedRecord_BR spedRecord;
        
        if(taxAssessmentFromDate == dateNull() || taxAssessmentToDate == dateNull())
        
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }
       
        spedRecord = this.newRecord('K280');
        spedRecord.addFieldDate(_transDate); // DT_EST
        spedRecord.addFieldString(_spedItemId, 60); // COD_ITEM
        
        if (_postitveQty)
        {
            spedRecord.addFieldNumeric(_postitveQty, 3); // QTD_COR_POS
        }
        else
        {
            spedRecord.addFieldEmpty();
        }

        if (_negativeQty)
        {
            spedRecord.addFieldNumeric(_negativeQty, 3); // QTD_COR_NEG
        }
        else
        {
            spedRecord.addFieldEmpty();
        }

        spedRecord.addFieldString(FBSpedFileCreator_Fiscal_BR::spedInventOwner(_inventOwnwer)); // IND_EST
        spedRecord.addFieldString(_partCode, 60); // COD_PART
        
        this.addChildRecord(parentRecordK280, spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeRecordK290</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the record K290 in <c>FBSpedFile_BR</c> class instance;
    /// This record represents the joint orders produced from Sped Fical.
    /// </summary>
    /// <param name="_initDate">
    /// The initial date of the production.
    /// </param>
    /// <param name="_endDate">
    /// The end date of the production.
    /// </param>
    /// <param name="_prodId">
    /// The production order ID of item produced to be reported.
    /// </param>
    /// <exception cref="Exception::Error">
    /// It will throw the exception if the <c>taxAssessmentFromDate</c> or <c>taxAssessmentToDate</c> members have dateNull value.
    /// </exception>
    public void writeRecordK290(TransDate _initDate, TransDate _endDate, ProdId _prodId) 
    {
        FBSpedRecord_BR spedRecord;
        
        if (taxAssessmentFromDate == dateNull() || taxAssessmentToDate == dateNull())
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }
        
        if (_initDate == dateNull() ||
               _prodId == '')
        {
            return; 
        }
        
        spedRecord = this.newRecord('K290');
        spedRecord.addFieldDate(_initDate); // DT_INI_OP
        
        if (_endDate >= taxAssessmentFromDate && _endDate <= taxAssessmentToDate) 
        {
            spedRecord.addFieldDate(_endDate); // DT_FIN_OP      
        }
        else
        {
            spedRecord.addFieldEmpty(); // DT_FIN_OP 
        }
        
        spedRecord.addFieldString(_prodId); // COD_DOC_OP
        
        this.addChildRecord(parentRecordK290, spedRecord); 
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeRecordK291</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the record K291 in <c>FBSpedFile_BR</c> class instance;
    /// This record represents the co/by-product production for joint orders from Sped Fiscal.
    /// </summary>
    /// <param name="_itemId">
    /// The item Id of produced item to be reported.
    /// </param>
    /// <param name="_producedQty">
    /// The total produced quantity of item to be reported.
    /// </param>
    public void writeRecordK291(ItemId _itemId, Qty _producedQty)
    {
        FBSpedRecord_BR spedRecord;
        
        if (_itemId == '' ||
            _producedQty <= 0)
        {
            return;
        }
        
        spedRecord = this.newRecord('K291');
        
        spedRecord.addFieldString(_itemId); // COD_ITEM
        spedRecord.addFieldNumeric(_producedQty, 3); // QTD
        
        this.addChildRecord(parentRecordK291, spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeRecordK292</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the record K292 in <c>FBSpedFile_BR</c> class instance;
    /// This record represents the material consumption for joint orders from Sped Fiscal.
    /// </summary>
    /// <param name="_itemId">
    /// The item Id of consumed material to be reported.
    /// </param>
    /// <param name="_consumedQty">
    /// The total consumed quantity of item to be reported.
    /// </param>
    public void writeRecordK292(ItemId _itemId, Qty _consumedQty)
    {
        FBSpedRecord_BR spedRecord;
        
        if (_itemId == '' ||
            _consumedQty <= 0)
        {
            return;
        }
        
        spedRecord = this.newRecord('K292');
        
        spedRecord.addFieldString(_itemId); // COD_ITEM
        spedRecord.addFieldNumeric(_consumedQty, 3); // QTD
        
        this.addChildRecord(parentRecordK292, spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeRecordK990</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the record K990 in <c>FBSpedFile_BR</c> class instance;
    /// This record represents the end of block K.
    /// </summary>
    public void writeRecordK990()
    {
        FBSpedRecord_BR spedRecord = FBSpedRecord_BR::constructEmpty('K990');

        spedRecord.addFieldNumeric(spedFile.totalRecordsInBlock('K') + 2);
        spedFile.addRecord(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Contructs a new instance of the <c>FBSpedFiscalBlockKWriter_BR</c> class.
    /// </summary>
    /// <param name="_spedFileParty">
    ///     <c>FBSpedFilePartyTmp_BR</c> table stores data of the third parties used in a particular SPED file generation.
    /// </param>
    /// <param name="_spedFile">
    ///     <c>FBSpedFile_BR</c> class instance representing the sped fiscal file.
    /// </param>
    /// <param name="_spedFiscalVersion">
    ///     Sped fiscal report layout version.
    /// </param>
    /// <returns>
    ///     An instance of the <c>FBCreatorSpedFile_BlockK_BR</c> class.
    /// </returns>
    public static FBSpedFiscalBlockKWriter_BR construct(FBSpedFilePartyTmp_BR _spedFileParty, FBSpedFile_BR _spedFile = new FBSpedFile_BR(), FBSPEDFiscalVersion_BR _spedFiscalVersion = FBSPEDFiscalVersion_BR::v109)
    {
        FBSpedFiscalBlockKWriter_BR creatorSpedFiscal =  new FBSpedFiscalBlockKWriter_BR();

        creatorSpedFiscal.parmSpedFile(_spedFile);
        creatorSpedFiscal.parmSpedFilePartyTmp(_spedFileParty);
        creatorSpedFiscal.parmSpedFiscalVersion(_spedFiscalVersion);

        return creatorSpedFiscal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBlockK</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    internal FBSPEDFiscalBlockK_BR parmBlockK(FBSPEDFiscalBlockK_BR _blockK = blockK)
    {
        blockK = _blockK;
        return blockK;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeRecordK010</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the record K010 in <c>FBSpedFile_BR</c> class instance;
    /// This record represents the information about the layout type of block K.
    /// </summary>
    internal void writeRecordK010()
    {
        this.createHierarchy();

        FBSpedRecord_BR spedRecord = this.newRecord('K010');

        if (blockK == FBSPEDFiscalBlockK_BR::Simplified)
        {
            spedRecord.addFieldString('0');
        }
        else
        {
            spedRecord.addFieldString('1');
        }

        this.addChildRecord(parentRecordK010, spedRecord);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>