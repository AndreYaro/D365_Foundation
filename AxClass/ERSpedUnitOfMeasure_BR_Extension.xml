<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ERSpedUnitOfMeasure_BR_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
public static class ERSpedUnitOfMeasure_BR_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>unitTranslation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the description of the unit of measure in company default language
    /// </summary>
    /// <param name = "_unitOfMeasure">the <c>UnitOfMeasure</c> record</param>
    /// <returns>The unit of measure in company default language</returns>
    public static UnitOfMeasureTranslation unitTranslation(UnitOfMeasure _unitOfMeasure)
    {
        return UnitOfMeasureTranslation::findByTranslation(_unitOfMeasure.RecId, CompanyInfo::languageId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesUnitOfMeasureConversionFactor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the conversion factor from the unit of measure used on fiscal document and the inventory unit of measure
    /// </summary>
    /// <param name = "_fiscalDocumentLine">The <c>FiscalDocumentLine_BR</c> record</param>
    /// <returns>Unit of measure conversion factor</returns>
    public static real salesUnitOfMeasureConversionFactor(FiscalDocumentLine_BR _fiscalDocumentLine)
    {
        UnitOfMeasureConversion unitOfMeasureConversion;
        InventTable inventTable = InventTable::find(_fiscalDocumentLine.ItemId);

        if (inventTable.RecId == 0)
        {
            return 0;
        }

        UnitOfMeasure inventoryUnitOfMeasure = UnitOfMeasure::findBySymbol(InventTable::find(_fiscalDocumentLine.ItemId).inventTableModuleInvent().UnitId);
        UnitOfMeasure fiscalDocumentInventoryUnitOfMeasure = UnitOfMeasure::findBySymbol(_fiscalDocumentLine.Unit);

        unitOfMeasureConversion = UnitOfMeasureConversion::findByConversion(fiscalDocumentInventoryUnitOfMeasure.RecId, inventoryUnitOfMeasure.RecId);

        if (unitOfMeasureConversion.Denominator == 0)
        {
            return 0;
        }

        return decRound(unitOfMeasureConversion.Factor / unitOfMeasureConversion.Denominator, 6);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>