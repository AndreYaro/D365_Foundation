<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailStoreActionHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailStoreActionHandler</c> is the action handler used to publish the channel menu item.
/// </summary>
/// <remarks>
/// Validate and publish the channel.
/// </remarks>
public class RetailStoreActionHandler extends RunBaseBatch implements BatchRetryable
{
    private RetailStoreAction storeAction;
    private RetailChannelTable channel;
    boolean calledFromForm;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmStoreAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the store action.
    /// </summary>
    /// <param name = "_storeAction">The store action.</param>
    /// <returns>The store action.</returns>
    public RetailStoreAction parmStoreAction(RetailStoreAction _storeAction = _storeAction)
    {
        this.storeAction = _storeAction;
        return this.storeAction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChannel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the channel.
    /// </summary>
    /// <param name = "_channel">The retail channel.</param>
    /// <returns>The retail channel.</returns>
    public RetailChannelTable parmChannel(RetailChannelTable _channel = _channel)
    {
        this.channel = _channel;
        return this.channel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalledFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the boolean indicating whether the class was called from a form or not.
    /// </summary>
    /// <param name = "_calledFromForm">Boolean indicating if the class was called from a form.</param>
    /// <returns>True, if this class was called from a form; otherwise, false.</returns>
    public boolean parmCalledFromForm(boolean _calledFromForm = calledFromForm)
    {
        this.calledFromForm = _calledFromForm;
        return this.calledFromForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateChannelPublishingTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the channel publishing tables for the given channel.
    /// </summary>
    /// <param name="_channelId">
    /// Rec Id of the channel to publish.
    /// </param>
    public void populateChannelPublishingTables(RefRecId _channelId)
    {
        RetailPubRetailStoreTable::publishChannel(_channelId);

        //<GEERU>
        RetailPubInventDimChannelMetadata::publishChannel(_channelId);
        //</GEERU>
        RetailPubChannelAttribute::publishChannel(_channelId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>publish</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publish the given channel.
    /// </summary>
    /// <param name="_channel">
    /// Channel to publish.
    /// </param>
    /// <param name="_calledFromForm">
    /// Whether or not this action was called from the UI.
    /// </param>
    private void publish(RetailChannelTable _channel, boolean _calledFromForm = true)
    {
        RetailInternalOrgUpdateChannel updateChannel;
        DialogButton dialogButton;

        if (_channel.RecId == 0)
        {
            // No associated record was found.
            return;
        }

        if (this.validatePublish(_channel))
        {
            if (_calledFromForm)
            {
                dialogButton = Box::yesNo("@RET261337", DialogButton::No, "@RET261331");
            }

            if (!_calledFromForm || dialogButton == DialogButton::Yes)
            {
                ttsbegin;

                // Populate category attributes
                if (RetailMerchandisingKillSwitch::enableCategoryAttributesAndCategoryAttributeGroups())
                {
                    RetailChannelCategoryAttribute::populateChannelCategoryAttributes(_channel.RecId);
                }

                // Populate product attribute metadata
                updateChannel = RetailInternalOrgUpdateChannel::newFromChannel(_channel.RecId);
                updateChannel.populateMetadata();

                // Populate publishing tables
                this.populateChannelPublishingTables(_channel.RecId);

                info("@REX4520990");
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePublish</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate whether or not the given channel is valid for publishing.
    /// </summary>
    /// <param name="_channel">
    /// Channel to validate for publishing.
    /// </param>
    /// <returns>
    /// TRUE if the channel is valid for publishing, FALSE otherwise.
    /// </returns>
    private boolean validatePublish(RetailChannelTable _channel)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides an entry point for the <c>RetailStoreActionHandler</c> class when it is called
    /// from a menu item
    /// </summary>
    /// <param name="_args">
    /// The arguments for the <c>RetailStoreActionHandler</c> class.
    /// </param>
    /// <param name="_calledFromForm">
    /// A Boolean value that indicates whether the form is displayed.
    /// </param>
    public static void main(Args _args, boolean _calledFromForm = true)
    {
        RetailChannelTable channel = _args.record();
        RetailStoreAction action = _args.parmEnum();
        RetailStoreActionHandler actionhandler = new RetailStoreActionHandler();

        if (!channel)
        {
            // No associated record was found.
            info("@RET261327");
            return;
        }

        actionhandler.parmCalledFromForm(_calledFromForm);
        actionhandler.parmChannel(channel);
        actionhandler.parmStoreAction(action);
        SysOperationSandbox::startOperation(actionhandler);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes store action.
    /// </summary>
    public void run()
    {
        // Now there is only one action (publish) here, later we may do different things based on action type
        switch (this.storeAction)
        {
            case RetailStoreAction::Publish:
                this.publish(this.channel, this.calledFromForm);
                break;

            default:
                throw Global::error(strFmt("@Retail:UnsupportedRetailStoreAction", this.storeAction));
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// false (e.g., the class is not designed for execution of the operation in a new session).
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>