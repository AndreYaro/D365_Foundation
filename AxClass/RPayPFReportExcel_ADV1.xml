<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayPFReportExcel_ADV1</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayPFReportExcel_ADV1 extends RPayPFReportExcel
{
    #define.const(64)
    #define.letterCount(26)
    #define.Comma(',')
    #define.Space(' ')
    #define.ZipCodeLength(6)
    #define.DigitalChars('0123456789')

    LogisticsAddressCountryRegion    addressCountryRegionRussia;

    #define.ReportTitle("@RUP3077")
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return #ReportTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEmpl</Name>
				<Source><![CDATA[
    protected boolean checkEmpl(RHRMEmplTable   _emplTable,
                                boolean     _displayMessage = true,
                                str 20      _personCategory = '',
                                str 20      _formType       = '')
    {
        boolean ret = true;

        this.infoEmplPFNumber(_emplTable, _displayMessage);

        ret = this.checkEmplPersonalInfo(_emplTable, _displayMessage, true, false) && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertAddressForPF</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected str convertAddressForPF(Addressing _address)
    {
        Addressing              addressPF;
        int                     pos;
        int                     delLen;

        #define.ZipCodePattern(':d:d:d:d:d:d')
        ;

        if (_address)
        {
            addressPF = _address;

            if (addressCountryRegionRussia)
            {
                pos = strscan(strupr(addressPF), strupr(addressCountryRegionRussia.displayName()), 1, strlen(addressPF));
                if (pos)
                {
                    delLen = strlen(addressCountryRegionRussia.displayName());

                    if (substr(addressPF, pos + delLen, 1) == #Comma || substr(addressPF, pos + delLen, 1) == #Space)
                    {
                        delLen++;
                    }

                    if (substr(addressPF, pos + delLen, 1) == #Comma || substr(addressPF, pos + delLen, 1) == #Space)
                    {
                        delLen++;
                    }

                    addressPF = strdel(addressPF, pos, delLen);
                }
            }

            if (match(#ZipCodePattern, addressPF))
            {
                pos = strfind(addressPF, #DigitalChars, 1, strlen(addressPF));
                while (pos)
                {
                    if (match(#ZipCodePattern, substr(addressPF, pos, #ZipCodeLength)))
                    {
                        delLen = #ZipCodeLength;

                        if (substr(addressPF, pos + delLen, 1) == #Comma || substr(addressPF, pos + delLen, 1) == #Space)
                        {
                            delLen++;
                        }

                        addressPF = strdel(addressPF, pos, delLen);
                        break;
                    }

                    pos = strfind(addressPF, #DigitalChars, pos + 1, strlen(addressPF));
                }
            }

            if (addressCountryRegionRussia.OKSMCode_RU)
            {
                pos = strscan(strupr(addressPF), strupr(addressCountryRegionRussia.OKSMCode_RU), 1, strlen(addressPF));
                if (pos)
                {
                    delLen = strlen(addressCountryRegionRussia.OKSMCode_RU);

                    if (substr(addressPF, pos + delLen, 1) == #Comma || substr(addressPF, pos + delLen, 1) == #Space)
                    {
                        delLen++;
                    }

                    addressPF = strdel(addressPF, pos, delLen);
                }
            }
        }

        return addressPF;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPeriodFields</Name>
				<Source><![CDATA[
    protected boolean displayPeriodFields()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>divideString3</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container divideString3(str       _string,
                                      int       _len1,
                                      int       _len2,
                                      int       _len3,
                                      str       _delimiter        = #Space,
                                      boolean   _saveEndDelimiter = false)
    {
        container   stringCon;
        int         curPos;
        int         newPos;
        int         startPos;
        container   retCon;

        str extractSubstr(int _len)
        {
            str     ret;
            str     stringToAdd;
            int     i;
            ;

            if (_len > 0)
            {
                for (i = startPos; i <= conlen(stringCon); i++)
                {
                    stringToAdd = conpeek(stringCon, i);

                    if (i != conlen(stringCon) ||
                        (_saveEndDelimiter && substr(_string, strlen(_string), 1) == _delimiter))
                    {
                        stringToAdd += _delimiter;
                    }

                    if (strlen(ret + stringToAdd) <= _len)
                    {
                        ret += stringToAdd;
                    }
                    else
                        break;
                }

                startPos = i;
            }

            return ret;
        }
        ;

        curPos = 1;
        newPos = 1;

        while (curPos <= strlen(_string))
        {
            newPos = strscan(_string, _delimiter, curPos, strlen(_string) - curPos + 1);

            if (newPos)
            {
                stringCon += substr(_string, curPos, newPos - curPos);
                curPos = newPos + 1;
            }
            else
                break;
        }

        if (curPos <= strlen(_string))
        {
            stringCon += substr(_string, curPos, strlen(_string) - curPos + 1);
        }

        startPos = 1;
        retCon += extractSubstr(_len1);
        retCon += extractSubstr(_len2);
        retCon += extractSubstr(_len3);

        return retCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDocument</Name>
				<Source><![CDATA[
    void fillDocument(RHRMEmplTable _emplTable)
    {
        DirPersonName               dirPersonName;
        RHRMPersonTable             rhrmPersonTable;
        HcmPersonPrivateDetails     hcmPersonPrivateDetails;
        LogisticsPostalAddress      personAddress, personRealAddress;
        LogisticsAddressFormatId    pensionFundAddressFormatId;

        container               emplAddress,
                                con;
        RNumDateInWordConverter converter = new RNumDateInWordConverter(companyInfo::languageId());
        Addressing              emplRegAddress,
                                emplFactAddress;

        dirPersonName = DirPersonName::find(_emplTable.employeeTable().worker().DirPerson().RecId);

        this.fillRegularCells('J', 9,  dirPersonName.LastName, strlen(dirPersonName.LastName));
        this.fillRegularCells('J', 11, dirPersonName.FirstName, strlen(dirPersonName.FirstName));
        this.fillRegularCells('J', 13, dirPersonName.MiddleName, strlen(dirPersonName.MiddleName));

        rhrmPersonTable = _emplTable.personTable();

        this.fillRegularCells('J', 15, substr(enum2str(rhrmPersonTable.Gender), 1, 1), 1);

        hcmPersonPrivateDetails = rhrmPersonTable.hcmPersonPrivateDetails();

        this.fillRegularCells('K', 17, date2str(hcmPersonPrivateDetails.BirthDate, 123, 2, 0, 0, 0, 0, DateFlags::FormatAll), 2);
        this.fillRegularCells('N', 17, converter.date2strMonth(hcmPersonPrivateDetails.BirthDate), 8);
        this.fillRegularCells('W', 17, date2str(hcmPersonPrivateDetails.BirthDate, 123, 0, 0, 0, 0, 4, DateFlags::FormatAll), 4);

        this.fillRegularCells('P', 20,  rhrmPersonTable.TownBirth, 25);
        this.fillRegularCells('P', 22,  rhrmPersonTable.CountyBirth, 25);
        this.fillRegularCells('P', 24,  rhrmPersonTable.StateBirth, 25);

        if (rhrmPersonTable.BirthPlaceType == RHRMBirthPlaceType::Special ||
            LogisticsAddressCountryRegion::find(rhrmPersonTable.CountryRegionBirthId).OKSMCode_RU != #OKSMCodeRU)
        {
            this.fillRegularCells('P', 26, LogisticsAddressCountryRegion::name(rhrmPersonTable.CountryRegionBirthId), 25);
        }

        if (rhrmPersonTable.citizenshipCountryRegionId() && LogisticsAddressCountryRegion::find(rhrmPersonTable.CountryRegionBirthId).OKSMCode_RU != #OKSMCodeRU)
        {
            this.fillRegularCells('J', 28, rhrmPersonTable.citizenshipCountryRegionId(), strlen(rhrmPersonTable.citizenshipCountryRegionId()));
        }

        personAddress = DirParty::primaryPostalAddress(rHRMPersonTable.hcmWorker().Person);
        this.fillRegularCells('N', 32, DirParty::primaryPostalAddress(rHRMPersonTable.hcmWorker().Person).ZipCode, 6);
        pensionFundAddressFormatId = LogisticsAddressCountryRegion::find(RPayTaxParameters::find().PensionFundCountryRegionId).AddrFormat;

        if (! personAddress.LogisticsPostalAddressMap::isEmptyAdress())
        {
            emplRegAddress = personAddress.formatAddress_RU(pensionFundAddressFormatId);
        }

        emplRegAddress = strreplace(strupr(emplRegAddress), '\n', ' ');

        if (emplRegAddress)
        {
            emplAddress    = this.divideString3(this.convertAddressForPF(emplRegAddress), 23, 35, 35, #Comma, true);

            this.fillRegularCells('X', 32, conpeek(emplAddress, 1), 23);
            this.fillRegularCells('J', 34, conpeek(emplAddress, 2), 35);
            this.fillRegularCells('J', 36, conpeek(emplAddress, 3), 35);
        }

        personRealAddress = rhrmPersonTable.getPostalAddressByRole(LogisticsLocationRoleType::RealAddress_RU);

        if (! personRealAddress.LogisticsPostalAddressMap::isEmptyAdress())
        {
            if (personRealAddress.CountryRegionId == addressCountryRegionRussia.CountryRegionId) // Российский адрес
            {
                emplFactAddress = personRealAddress.formatAddress_RU(pensionFundAddressFormatId);
            }
        }

        emplFactAddress = strreplace(strupr(emplFactAddress), '\n', ' ');

        if (emplRegAddress != emplFactAddress && emplFactAddress)
        {
            this.fillRegularCells('N', 40, personRealAddress.ZipCode, 6);

            emplAddress = this.divideString3(this.convertAddressForPF(emplFactAddress), 23, 35, 35, #Comma, true);

            this.fillRegularCells('X', 40, conpeek(emplAddress, 1), 23);
            this.fillRegularCells('J', 42, conpeek(emplAddress, 2), 35);
            this.fillRegularCells('J', 44, conpeek(emplAddress, 3), 35);
        }

        this.fillRegularCells('J', 49, rhrmPersonTable.hcmWorker().phone(), 25);
        this.fillRegularCells('J', 54, IdentityCardTable_RU::find(rhrmPersonTable.IdentityCard).IdentityCardNameFull, 25);
        this.fillRegularCells('J', 58, rhrmPersonTable.IdentityCardSeries, 8);
        this.fillRegularCells('U', 58, rhrmPersonTable.IdentityCardNumber, 6);
        this.fillRegularCells('K', 60, date2str(rhrmPersonTable.IdentityCardIssueDate, 123, 2, 0, 0, 0, 0, DateFlags::FormatAll), 2);
        this.fillRegularCells('N', 60, converter.date2strMonth(rhrmPersonTable.IdentityCardIssueDate), 8);
        this.fillRegularCells('W', 60, date2str(rhrmPersonTable.IdentityCardIssueDate, 123, 0, 0, 0, 0, 4, DateFlags::FormatAll), 4);

        con = this.divideString3(rhrmPersonTable.IdentityCardIssueBy, 42, 42, 0);
        this.fillRegularCells('J', 62, conpeek(con, 1), 42);
        this.fillRegularCells('J', 64, conpeek(con, 2), 42);

        this.fillRegularCells('B', 69, date2str(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), 123, 2, 0, 0, 0, 0, DateFlags::FormatAll), 2);
        this.fillRegularCells('E', 69, converter.date2strMonth(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())), 8);
        this.fillRegularCells('N', 69, date2str(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), 123, 0, 0, 0, 0, 4, DateFlags::FormatAll), 4);

        printedEmplSet.add(rhrmPersonTable.PayMainEmplId);

        excelDocument.visible(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillRegularCells</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void fillRegularCells(str _cellName, int _row, str _text, int _number)
    {
        int     c;
        str     tmp_str;

        while (c < strLen(_text) && c < _number)
        {
            c ++;
            tmp_str = ComExcelDocument_RU::numToNameCell((char2num(_cellName, strLen(_cellName)) - #const) +
                                                         (char2num(_cellName, 1) - #const) * #letterCount * (strLen(_cellName) - 1) +
                                                         (c - 1), _row);

            excelDocument.insertValue(tmp_str, substr(_text, c, 1));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();

        select firstonly addressCountryRegionRussia
            where addressCountryRegionRussia.OKSMCode_RU == #OKSMCodeRU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RHRMEmplTable       emplTableLocal;
        RHRMEmplTable       emplTableMainLocal;
        Set             checkedMainEmplSetLocal = new Set(Types::String);

        if (! this.checkCompanyInfo() || ! this.checkTaxParameters())
            return;

        this.initEmployeesData();

        if (workersMonthsMap.elements() || disPersMonthsMap.elements())
        {
            this.progressInit(this.caption(), SysQuery::countTotal(queryRun), #AviFormLetter);
            progress.updateInterval(0);

            queryRun.reset();
            while (queryRun.next())
            {
                emplTableLocal = queryRun.get(tablenum(RHRMEmplTable));

                progress.setText(strFmt("@RUP3038", emplTableLocal.EmployeeId, emplTableLocal.Name()));

                selectedEmplSet.add(emplTableLocal.EmployeeId);

                if (! printedEmplSet.in(emplTableLocal.PayMainEmplId) &&
                    ! checkedMainEmplSetLocal.in(emplTableLocal.PayMainEmplId))
                {
                    emplTableMainLocal = emplTableLocal.emplTableMain();

                    if (this.checkEmpl(emplTableMainLocal, true, '', #FormTypeADV1))
                    {
                        if (this.makeDocument())
                        {
                            this.fillDocument(emplTableMainLocal);
                        }
                    }

                    checkedMainEmplSetLocal.add(emplTableLocal.PayMainEmplId);
                }

                progress.incCount();
            }
        }
        else
        {
            info("@GLS101555");
        }

        this.displayResult();
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    #define.ReportName("АДВ-1.xlt")

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected str templateName()
    {
        return #reportName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return #ReportTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>