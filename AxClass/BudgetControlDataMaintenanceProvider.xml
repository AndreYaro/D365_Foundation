<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlDataMaintenanceProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetControlDataMaintenanceProvider</c> class is the base class for a budget
/// control data maintenance scenario.
/// </summary>
public abstract class BudgetControlDataMaintenanceProvider
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds documents that require budget control data maintenance.
    /// </summary>
    /// <param name="_budgetControlDataMaintenanceRecId">
    /// The <c>BudgetControlDataMaintenance</c> process group record Id.
    /// </param>
    public abstract void findDocuments(BudgetControlDataMaintenanceRecId _budgetControlDataMaintenanceRecId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the budget control data maintenance scenario description.
    /// </summary>
    /// <returns>
    /// The description of the scenario.
    /// </returns>
    public abstract Description255 getDescription()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the budget control data maintenance scenario name.
    /// </summary>
    /// <returns>
    /// The name of the scenario.
    /// </returns>
    public abstract Description255 getName()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProcessDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post-processing event that is executed after all the documents are processed for this provider.
    /// </summary>
    /// <param name="_budgetControlDataMaintenanceRecId">
    /// The budget control data maintenance record ID.
    /// </param>
    public void postProcessDocuments(BudgetControlDataMaintenanceRecId _budgetControlDataMaintenanceRecId)
    {
        // No default post-processing event.
        // Each provider can override and execute any final steps after the documents are processed.
    }

]]></Source>
			</Method>
			<Method>
				<Name>preFindDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Pre-processing event that is executed prior to finding documents.
    /// </summary>
    /// <param name="_budgetControlDataMaintenanceRecId">
    /// The budget control data maintenance record ID.
    /// </param>
    public void preFindDocuments(BudgetControlDataMaintenanceRecId _budgetControlDataMaintenanceRecId)
    {
        // No default pre-processing event.
        // Each provider can override and execute any steps prior to finding documents.
    }

]]></Source>
			</Method>
			<Method>
				<Name>preProcessDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Pre-processing event that is executed prior to any document being processed for this provider.
    /// </summary>
    /// <param name="_budgetControlDataMaintenanceRecId">
    /// The budget control data maintenance record ID.
    /// </param>
    public void preProcessDocuments(BudgetControlDataMaintenanceRecId _budgetControlDataMaintenanceRecId)
    {
        // No default pre-processing event.
        // Each provider can override and execute any steps prior to the documents being processed.
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes data maintenance operations for a single document.
    /// </summary>
    /// <param name="_dataMaintenanceTrackingRecId">
    /// A <c>BudgetControlDataMaintenanceTracking</c> record Id.
    /// </param>
    /// <returns>
    /// The <c>BudgetCheckResult</c> value for the processed document.
    /// </returns>
    public abstract BudgetCheckResult processDocument(RecId _dataMaintenanceTrackingRecId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProcessStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the budget control data maintenance process status.
    /// </summary>
    /// <param name = "_budgetControlDataMaintenanceTrackingRecId">
    /// The record Id of a <c>BudgetControlDataMaintenanceTracking</c> record.
    /// </param>
    /// <param name = "_dataMaintenanceStatus">
    /// The <c>BudgetControlDataMaintenanceStatus</c> that will be set.
    /// </param>
    internal void setProcessStatus(
        RecId _budgetControlDataMaintenanceTrackingRecId,
        BudgetControlDataMaintenanceStatus _dataMaintenanceStatus)
    {
        BudgetControlDataMaintenanceTracking::setProcessStatus(_budgetControlDataMaintenanceTrackingRecId, _dataMaintenanceStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBudgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the budget check result.
    /// </summary>
    /// <param name = "_budgetControlDataMaintenanceTrackingRecId">
    /// The record Id for this tracking record.
    /// </param>
    /// <param name = "_budgetCheckResult">
    /// The <c>BudgetCheckResult</c> that will be set.
    /// </param>
    internal void setBudgetCheckResult(
        RecId _budgetControlDataMaintenanceTrackingRecId,
        BudgetCheckResult _budgetCheckResult)
    {
        BudgetControlDataMaintenanceTracking::setBudgetCheckResult(_budgetControlDataMaintenanceTrackingRecId, _budgetCheckResult);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProviders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the set of classes that extend the <c>BudgetControlDataMaintenanceProvider</c> class.
    /// </summary>
    /// <returns>
    /// The set of classes that extend the <c>BudgetControlDataMaintenanceProvider</c> class.
    /// </returns>
    public static Set getProviders()
    {
        Set providers = new Set(Types::Class);

        SysDictClass providerBase;
        SysDictClass provider;

        List providerClassList;
        ListEnumerator providerClasses;

        // Get the list of provider classes.
        providerBase = new SysDictClass(classNum(BudgetControlDataMaintenanceProvider));
        providerClassList = providerBase.extendedBy(true);

        if (providerClassList.elements())
        {
            providerClasses = providerClassList.getEnumerator();

            while (providerClasses.moveNext())
            {
                provider = new SysDictClass(providerClasses.current());

                if (!provider.isAbstract())
                {
                    // Only add providers that can be instantiated.
                    providers.add(provider);
                }
            }
        }

        return providers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeBudgetSourceTrackingSummaryDelete</Name>
				<Source><![CDATA[
    private static boolean invokeBudgetSourceTrackingSummaryDelete(UserConnection _userConnection)
    {
        UserConnection userConnectionLocal;
        Statement statement;
        boolean isSuccessful;
        SqlStatementExecutePermission permission;
        str sql;

        if (_userConnection)
        {
            statement = _userConnection.createStatement();
        }
        else
        {
            userConnectionLocal = new UserConnection();
            statement = userConnectionLocal.createStatement();
        }

        // The SQL objects have been created successfully.
        sql = strFmt(@"
            DELETE FROM BUDGETSOURCETRACKINGSUMMARY
            WHERE   [PARTITION] = %1
                AND [PRIMARYLEDGER] = %2
            ;",
            getcurrentpartitionrecid(),
            Ledger::current());

        // Open the code access permission scope.
        permission = new SqlStatementExecutePermission(sql);
        permission.assert();

        statement.executeUpdateWithParameters(sql, SqlParams::create());

        // Close the code access permission scope.
        CodeAccessPermission::revertAssert();

        isSuccessful = true;

        return isSuccessful;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeBudgetSourceTrackingSummaryInsert</Name>
				<Source><![CDATA[
    private static boolean invokeBudgetSourceTrackingSummaryInsert(UserConnection _userConnection)
    {
        UserConnection userConnectionLocal;
        Statement statement;
        boolean isSuccessful;
        SqlStatementExecutePermission permission;
        str sql;

        if (_userConnection)
        {
            statement = _userConnection.createStatement();
        }
        else
        {
            userConnectionLocal = new UserConnection();
            statement = userConnectionLocal.createStatement();
        }

        // The insert will set RecVersion to 101 to signify the regeneration was executed.
        // The SQL objects have been created successfully.
        sql = strFmt(@"
            INSERT INTO [BUDGETSOURCETRACKINGSUMMARY]
            (     [TRACKINGDATE]
                , [CATEGORY]
                , [BUDGETMODELID]
                , [BUDGETMODELSUBMODELID]
                , [BUDGETMODELTYPE]
                , [BUDGETMODELDATAAREAID]
                , [PRIMARYLEDGER]
                , [BUDGETCONTROLLEDGERDIMENSION]
                , [ISDRAFT]
                , [ISCARRYFORWARD]
                , [ISSIMULATION]
                , [INTEGRATORTYPE]
                , [ACCOUNTINGCURRENCYAMOUNT]
                , [RECVERSION]
                , [PARTITION]
            )
            SELECT    BSDSV.[TRACKINGDATE]
                    , BSDSV.[CATEGORY]
                    , BSDSV.[BUDGETMODELID]
                    , BSDSV.[BUDGETMODELSUBMODELID]
                    , BSDSV.[BUDGETMODELTYPE]
                    , BSDSV.[BUDGETMODELDATAAREAID]
                    , BSDSV.[PRIMARYLEDGER]
                    , BSDSV.[BUDGETCONTROLLEDGERDIMENSION]
                    , BSDSV.[ISDRAFT]
                    , BSDSV.[ISCARRYFORWARD]
                    , BSDSV.[ISSIMULATION]
                    , BSDSV.[INTEGRATORTYPE]
                    , BSDSV.[ACCOUNTINGCURRENCYAMOUNT]
                    , 101
                    , BSDSV.[PARTITION]
            FROM BUDGETSOURCEDETAILSUMMARYVIEW BSDSV
            WHERE   BSDSV.[PARTITION] = %1
                AND BSDSV.[PRIMARYLEDGER] = %2
            ;",
            getcurrentpartitionrecid(),
            Ledger::current());

        // Open the code access permission scope.
        permission = new SqlStatementExecutePermission(sql);
        permission.assert();

        statement.executeUpdateWithParameters(sql, SqlParams::create());

        // Close the code access permission scope.
        CodeAccessPermission::revertAssert();

        isSuccessful = true;

        return isSuccessful;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeDeletePendingRelievingDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the budget source tracking relieving details that are pending deletion and summarized for the current primary ledger.
    /// </summary>
    protected static void removeDeletePendingRelievingDetail()
    {
        LedgerRecId                         primaryLedger = Ledger::current();
        BudgetSource                        budgetSource;
        BudgetSourceTracking                budgetSourceTracking, noBudgetSourceTrackingRelieving;
        BudgetSourceTrackingDetail          budgetSourceTrackingDetail;
        BudgetSourceTrackingRelievingDetail budgetSourceTrackingRelievingDetail;

        // Delete all relieving details that are delete pending and summarized for the current primary ledger
        // that are missing the budget source tracking relieving records.
        // These have been processed by budget control but were not correctly cleaned up.
        delete_from budgetSourceTrackingRelievingDetail
            where budgetSourceTrackingRelievingDetail.IsDeletePending == NoYes::Yes
                && budgetSourceTrackingRelievingDetail.IsSummarized == NoYes::Yes
            exists join budgetSourceTrackingDetail
                where budgetSourceTrackingDetail.RecId == budgetSourceTrackingRelievingDetail.RelievedBudgetSourceTrackingDetail
                    && budgetSourceTrackingDetail.PrimaryLedger == primaryLedger
            exists join budgetSourceTracking
                where budgetSourceTracking.RecId == budgetSourceTrackingDetail.BudgetSourceTracking
            exists join budgetSource
                where budgetSource.RecId == budgetSourceTracking.BudgetSource
            notexists join noBudgetSourceTrackingRelieving
                where noBudgetSourceTrackingRelieving.RecId == budgetSourceTrackingRelievingDetail.RelievingBudgetSourceTracking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeExistingFoundDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the budget control data maintenance documents previously found by
    /// a given provider.
    /// </summary>
    /// <param name="_budgetControlDataMaintenanceRecId">
    /// The <c>BudgetControlDataMaintenance</c> record Id.
    /// </param>
    /// <param name="_providerName">
    /// The <c>ClassName</c> of the budget control data maintenance provider.
    /// </param>
    protected static void removeExistingFoundDocuments(
        BudgetControlDataMaintenanceRecId _budgetControlDataMaintenanceRecId,
        ClassName _providerName)
    {
        BudgetControlDataMaintenanceTracking budgetControlDataMaintenanceTracking;

        ttsbegin;

        delete_from budgetControlDataMaintenanceTracking
            where budgetControlDataMaintenanceTracking.BudgetControlDataMaintenance == _budgetControlDataMaintenanceRecId
                && budgetControlDataMaintenanceTracking.DataMaintenanceProvider == _providerName;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reprocessSummaryBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the budget control summary balance reprocessing.
    /// </summary>
    protected static void reprocessSummaryBalance()
    {
        boolean invokeSuccess;

        UserConnection userConnection;
            
        try
        {
            userConnection = new UserConnection();

            userConnection.ttsbegin();

            // Remove the existing summary balance for the current partition and primary ledger.
            invokeSuccess = BudgetControlDataMaintenanceProvider::invokeBudgetSourceTrackingSummaryDelete(userConnection);

            if (invokeSuccess)
            {
                // Generate the summary balance based on the detail balance for the current partition and primary ledger.
                invokeSuccess = BudgetControlDataMaintenanceProvider::invokeBudgetSourceTrackingSummaryInsert(userConnection);
            }

            if (invokeSuccess)
            {
                userConnection.ttscommit();
            }
            else
            {
                userConnection.ttsabort();
            }
        }
        finally
        {
            userConnection.finalize();
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>getProviderFromName</Name>
				<Source><![CDATA[
    internal static BudgetControlDataMaintenanceProvider getProviderFromName(ClassName _providerClassName)
    {
        BudgetControlDataMaintenanceProvider budgetControlDataMaintenanceProvider;

        SysDictClass providerClass = SysDictClass::newName(_providerClassName);

        if (providerClass)
        {
            budgetControlDataMaintenanceProvider = providerClass.makeObject() as BudgetControlDataMaintenanceProvider;
        }

        return budgetControlDataMaintenanceProvider;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>