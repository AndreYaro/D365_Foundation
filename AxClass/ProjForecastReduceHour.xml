<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjForecastReduceHour</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjForecastReduceHour extends ProjForecastReduce
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkRemainingBudgetOnForecastModel</Name>
				<Source><![CDATA[
    public boolean checkRemainingBudgetOnForecastModel(ForecastModelId modelId)
    {
        return ForecastModel::checkRemainingBudget(modelId, ProjTransType::Hour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates and returns a map with a list of <c>TransId</c> from <c>ProjForecastEmpl</c> table records.
    /// </summary>
    /// <param name = "fieldList">
    /// List of values of enum type <c>ProjReduceCostPriority</c>.
    /// </param>
    /// <param name = "modelId">
    /// <c>ForecastModelId</c> value.
    /// </param>
    /// <param name = "lumpSum">
    /// Value used to decide whether to reduce cost price or the quantity.
    /// </param>
    /// <returns>
    /// A map with a list of <c>ProjReduceCostPriority</c>.
    /// </returns>
    protected Map constructQuery(container fieldList, ForecastModelId modelId, int lumpSum )
    {
        Map mapForecast = new Map(Types::Container,Types::Enum);

        Query query = this.buildQueryFromFieldList(fieldList, modelId);
        
        boolean checkCostTemplate = conFind(FieldList, ProjReduceCostPriority::CostTemplateLine) > 0 ? true:false;

        QueryRun queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            ProjForecastEmpl projForecastEmpl = queryRun.get(tableNum(ProjForecastEmpl));

            if (checkCostTemplate && this.parmProjCostGroupId() ) //Identify whether to skip this forecast
            {
                ProjControlId controlId = ProjWIPTable::find(ProjTable::find(projForecastEmpl.ProjId).wipProject).ControlId;
                costGroupId costGroupId = '';

                if (!controlId)
                {
                    controlId = ProjParameters::find().CostTemplate;
                }

                if (controlId)
                {
                    costGroupId = ProjControlCategory::findCategoryGroup(controlId,projForecastEmpl.CategoryId);
                }
                if (costGroupId &&  costGroupId != this.parmProjCostGroupId())
                {
                    continue;
                }
            }

            if (lumpSum) //lump sum reduce cost price, data model does not support lump sum for hour right now
            {
                mapForecast.insert([projForecastEmpl.TransId, 0, projForecastEmpl.CostPrice], NoYes::Yes);
            }
            else //non lump sum reduce qty
            {
                mapForecast.insert([projForecastEmpl.TransId, projForecastEmpl.Qty, projForecastEmpl.costAmount()], NoYes::No);
            }
        }

        return mapForecast;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryFromFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query on <c>ProjForecastEmpl</c> table based on the the supplied <c>ProjReduceCostPriority</c> enum values.
    /// </summary>
    /// <param name = "_fieldList">
    /// Container with <c>ProjReduceCostPriority</c> enum values.
    /// </param>
    /// <param name = "_modelId">
    /// Value to be set for the query range on field <c>ModelId</c> of table <c>ProjForecastEmpl</c>.
    /// </param>
    /// <returns>
    /// A query with table <c>ProjForecastEmpl</c> as primary data source.
    /// </returns>
    protected Query buildQueryFromFieldList(container _fieldList, ForecastModelId _modelId)
    {
        QueryBuildDataSource    tempDataSource;
        container               conParentProjects;
        str                     range;
        int                     i,j;
        int                     currentField;

        Query query = new Query();

        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(ProjForecastEmpl));
        queryBuildDataSource.addRange(fieldNum(ProjForecastEmpl,ModelId)).value(_modelId);
        queryBuildDataSource.addRange(fieldNum(ProjForecastEmpl,Qty)).value(SysQuery::valueNot(0));

        int conLength = conLen(_fieldList);

        for (i = 1;i <= conLength; i++)
        {
            currentField = conPeek(_fieldList,i);
            switch (currentField)
            {
                case ProjReduceCostPriority::Project:
                    queryBuildDataSource.addRange(fieldNum(ProjForecastEmpl,ProjId)).value(this.parmProjId());
                    break;

                case ProjReduceCostPriority::Category:
                    queryBuildDataSource.addRange(fieldNum(ProjForecastEmpl,CategoryId)).value(this.parmProjCategoryId());
                    break;

                case ProjReduceCostPriority::EmployeeItem:
                    //if Resource RecId is empty, 0 resourceRecId as wildcard
                    queryBuildDataSource.addRange(fieldNum(ProjForecastEmpl, Resource)).value(strFmt('((%1==%2) || (%1 == %3))', fieldStr(ProjForecastEmpl, Resource), this.parmResource(), queryValue(0)));
                    break;

                case ProjReduceCostPriority::ParentProject:
                    conParentProjects = ProjTable::ancestors(this.parmProjId());
                    conParentProjects += this.parmProjId();
                    range='';
                    for (j = 1; j <= conLen(conParentProjects); j++)
                    {
                        range += strFmt('(%3.%1 =="%2")',fieldStr(ProjForecastEmpl, ProjId),conPeek(conParentProjects,j),query.dataSourceTable(tableNum(ProjForecastEmpl)).name());
                        if (j < conLen(conParentProjects))
                        {
                            range += '||';
                        }
                    }
                    queryBuildDataSource.addRange(fieldNum(ProjForecastEmpl,ProjId)).value(range);
                    break;

                case ProjReduceCostPriority::EstimateProject:
                    tempDataSource = queryBuildDataSource.addDataSource(tableNum(ProjTable));
                    tempDataSource.fetchMode(JoinMode::InnerJoin);
                    tempDataSource.relations(true);
                    tempDataSource.addRange(fieldNum(ProjTable,wipProject)).value(strFmt('((%4.%1=="%2")&&(%4.%1!=%5))||(%4.%1=="%3")',
                fieldStr(ProjTable,ProjId),this.parmEstimateProjId(),this.parmProjId(), query.dataSourceTable(tableNum(ProjTable)).name(),SysQuery::valueEmptyString()));
                    break;

                case ProjReduceCostPriority::ActivityNum:
                    queryBuildDataSource.addRange(fieldNum(ProjForecastEmpl,ActivityNumber)).value(this.parmProjActivityNumber()?this.parmProjActivityNumber():SysQuery::valueEmptyString());
                    break;

                case ProjReduceCostPriority::CategoryGroup:
                    tempDataSource = queryBuildDataSource.addDataSource(tableNum(ProjCategory));
                    tempDataSource.fetchMode(JoinMode::InnerJoin);
                    tempDataSource.relations(true);
                    tempDataSource.addRange(fieldNum(ProjCategory,CategoryGroupId)).value(this.parmProjCategoryGroupId());
                    break;

                case ProjReduceCostPriority::ProjDate:
                    queryBuildDataSource.addRange(fieldNum(ProjForecastEmpl,SchedFromDate)).value(queryRange('',this.parmProjDate()));
                    break;
            }
        }
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>forecastMinus</Name>
				<Source><![CDATA[
    protected boolean forecastMinus(ProjTransIdBase _forecastTransId,ForecastModelId _modelId,Qty _qty,CostPrice _costPrice)
    {
        ProjForecastEmpl        projForecastEmpl;
        ForecastModelId         modelId=_modelId;

        ttsbegin;
        super(_forecastTransId,_modelId, _qty, _costPrice);
        if (!_modelId)
        {
            modelId=ProjForecastEmpl::find(_forecastTransId).ModelId;
        }
        select forupdate projForecastEmpl
        where projForecastEmpl.TransId==_forecastTransId
        &&    projForecastEmpl.ModelId== modelId;
        if (projForecastEmpl)
        {
            projForecastEmpl.Qty = projForecastEmpl.Qty- _qty;
            projForecastEmpl.CostPrice = projForecastEmpl.CostPrice-_costPrice;
            projForecastEmpl.update();
        }
        ttscommit;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>forecastPlus</Name>
				<Source><![CDATA[
    protected boolean forecastPlus(ProjTransIdBase _forecastTransId,ForecastModelId _modelId,Qty _qty,CostPrice _costPrice)
    {
        ProjForecastEmpl        projForecastEmpl;
        boolean                 ret;
        ForecastModelId         modelId=_modelId;

        ttsbegin;
        if (!_modelId)
        {
            modelId=ProjForecastEmpl::find(_forecastTransId).ModelId;
        }
        select forupdate projForecastEmpl
        where projForecastEmpl.TransId == _forecastTransId
        &&    projForecastEmpl.ModelId == modelId;
        if (projForecastEmpl)
        {
            projForecastEmpl.Qty = projForecastEmpl.Qty+ _qty;
            projForecastEmpl.CostPrice = projForecastEmpl.CostPrice+_costPrice;
            projForecastEmpl.update();
            ret=true;
        }
        //If the original forecast get deleted, it 's no longer recovered
        else
        {
            ret=false;
        }
        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>