<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventUpd_ChildReference</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventUpd_ChildReference extends InventUpdate
{
    // new parameters

    InventQty       referenceQty;
    UnitQty         referenceQtyUnit;

    InventDimId     inventDimId;

    boolean         splitMovement;
    boolean         excludeOnOrder;
    boolean         preferredNoMarking;
    boolean         checkInventTransPhysicalDimensions;
    private boolean allowSplittingFullVisibilitySerialReserved;

    Object          updateClass;

    // internal init

    InventDim       inventDimCriteria;
    InventDimParm   inventDimParm;

    InventQty       addQty;
    UnitQty         addQtyUnit;

    PdsCWInventQty    cwReferenceQty;
    PdsCWInventQty    cwAddQty;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkUpdateMovement</Name>
				<Source><![CDATA[
    protected boolean checkUpdateMovement(TransDate transDate)
    {
        boolean ok = true;

        if (!movement.checkUpdateChildReference(this))
        {
            ok = false;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initUpdate</Name>
				<Source><![CDATA[
    protected void initUpdate()
    {
        inventDimCriteria = InventDim::find(inventDimId);
        inventDimParm.initFromInventDim(inventDimCriteria);

        addQty      = referenceQty;
        addQtyUnit  = referenceQtyUnit;

        cwAddQty    = cwReferenceQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExcludeOnOrder</Name>
				<Source><![CDATA[
    public boolean parmExcludeOnOrder(boolean _excludeOnOrder = excludeOnOrder)
    {
        excludeOnOrder = _excludeOnOrder;
        return excludeOnOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllowSplittingFullVisibilitySerialReserved</Name>
				<Source><![CDATA[
    internal boolean parmAllowSplittingFullVisibilitySerialReserved(boolean _allowSplittingFullVisibilitySerialReserved = allowSplittingFullVisibilitySerialReserved)
    {
        allowSplittingFullVisibilitySerialReserved = _allowSplittingFullVisibilitySerialReserved;
        return allowSplittingFullVisibilitySerialReserved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPreferredNoMarking</Name>
				<Source><![CDATA[
    public boolean parmPreferredNoMarking(boolean _preferredNoMarking = preferredNoMarking)
    {
        preferredNoMarking = _preferredNoMarking;
        return preferredNoMarking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimId</Name>
				<Source><![CDATA[
    protected InventDimId parmInventDimId(InventDimId _inventDimId  = inventDimId)
    {
        inventDimId = _inventDimId;
        return inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsCWReferenceQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the cwReferenceQtyparameter.
    /// </summary>
    /// <param name="_cwQty">
    /// Value to be set.
    /// </param>
    /// <returns>
    /// The cwReferrenceQty parameter.
    /// </returns>
    public PdsCWInventQty parmPdsCWReferenceQty(
        PdsCWInventQty _cwQty = cwReferenceQty)
    {
        cwReferenceQty = _cwQty;

        return cwReferenceQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReferenceQty</Name>
				<Source><![CDATA[
    protected InventQty parmReferenceQty(InventQty _qty = referenceQty)
    {
        referenceQty = _qty;
        return referenceQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReferenceQtyUnit</Name>
				<Source><![CDATA[
    protected UnitQty parmReferenceQtyUnit(UnitQty _qty = referenceQtyUnit)
    {
        referenceQtyUnit = _qty;
        return referenceQtyUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRemainingQuantity</Name>
				<Source><![CDATA[
    internal InventQty parmRemainingQuantity()
    {
        return addQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRemainingCWQuantity</Name>
				<Source><![CDATA[
    internal PdsCWInventQty parmRemainingCWQuantity()
    {
        return cwAddQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSplitMovement</Name>
				<Source><![CDATA[
    protected boolean parmSplitMovement(boolean _splitmovement = splitmovement)
    {
        splitmovement = _splitmovement;
        return splitmovement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateClass</Name>
				<Source><![CDATA[
    protected Object parmUpdateClass(Object _updateClass = updateClass)
    {
        updateClass =_updateClass;
        return updateClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lessIssueFromStatus</Name>
				<Source><![CDATA[
    protected StatusIssue lessIssueFromStatus()
    {
        if (movement.inventModelGroup().MandatoryWMSOrder)
        {
            return StatusIssue::ReservPhysical;
        }
        
        return StatusIssue::Picked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lessIssueToStatus</Name>
				<Source><![CDATA[
    protected StatusIssue lessIssueToStatus()
    {
        return excludeOnOrder ? StatusIssue::ReservOrdered : StatusIssue::OnOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findUpdateLessIssueInventTrans</Name>
				<Source><![CDATA[
    private InventTrans findUpdateLessIssueInventTrans(Counter _markingCounter, Counter _dimensionCounter)
    {
        InventTrans inventTrans;

        if (this.parmCustomInventTransListInitialized())
        {
            return this.findUpdateLessIssueCustomInventTrans();
        }

        return this.findUpdateLessIssueQueryInventTrans(_markingCounter, _dimensionCounter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findUpdateLessIssueCustomInventTrans</Name>
				<Source><![CDATA[
    private InventTrans findUpdateLessIssueCustomInventTrans()
    {
        InventTrans inventTrans;
        InventDimParm inventDimParmBlank;

        this.initializeInventTransToIssueListWithCustomInventTransList(this.lessIssueFromStatus(),
                                                                       this.lessIssueToStatus(),
                                                                       inventDimId,
                                                                       inventDimCriteria,
                                                                       inventDimParmBlank,
                                                                       movement.transChildType(),
                                                                       movement.TransChildRefId());
        
        this.getNextInventTransToIssue(inventTrans);

        return inventTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findUpdateLessIssueQueryInventTrans</Name>
				<Source><![CDATA[
    protected InventTrans findUpdateLessIssueQueryInventTrans(Counter _markingCounter, Counter _dimensionCounter)
    {
        InventTrans inventTrans;
        StatusIssue fromStatus  = this.lessIssueFromStatus();
        StatusIssue toStatus    = this.lessIssueToStatus();
        
        switch (_dimensionCounter)
        {
            case 2  :
                select reverse forupdate inventTrans
                    order by StatusIssue,InventDimId
                    where inventTrans.InventTransOrigin == movement.inventTransOriginId()
                        && inventTrans.TransChildType   == movement.transChildType()
                        && inventTrans.TransChildRefId  == movement.transChildRefId()
                        && inventTrans.StatusIssue      >= fromStatus
                        && inventTrans.StatusIssue      <= toStatus
                        && inventTrans.StatusReceipt    == StatusReceipt::None
                        && (_markingCounter != 2 || !inventTrans.MarkingRefInventTransOrigin);
                break;
            case 1  :
                InventDim inventDim;

                select reverse forupdate inventTrans
                    order by StatusIssue,InventDimId
                    where inventTrans.InventTransOrigin == movement.inventTransOriginId()
                        && inventTrans.TransChildType   == movement.transChildType()
                        && inventTrans.TransChildRefId  == movement.transChildRefId()
                        && inventTrans.StatusIssue      >= fromStatus
                        && inventTrans.StatusIssue      <= toStatus
                        && inventTrans.StatusReceipt    == StatusReceipt::None
                        && (_markingCounter != 2 || !inventTrans.MarkingRefInventTransOrigin)
                #inventDimExistsJoin(inventTrans.InventDimId, inventDim, inventDimCriteria, inventDimParm);
                break;
            case 0  :
                select reverse forupdate inventTrans
                    order by StatusIssue
                    where inventTrans.InventTransOrigin == movement.inventTransOriginId()
                        && inventTrans.TransChildType   == movement.transChildType()
                        && inventTrans.TransChildRefId  == movement.transChildRefId()
                        && inventTrans.StatusIssue      >= fromStatus
                        && inventTrans.StatusIssue      <= toStatus
                        && inventTrans.StatusReceipt    == StatusReceipt::None
                        && (_markingCounter != 2 || !inventTrans.MarkingRefInventTransOrigin)
                        && inventTrans.InventDimId           == inventDimCriteria.InventDimId;
                break;
        }

        return inventTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLessIssue</Name>
				<Source><![CDATA[
    protected void updateLessIssue()
    {
        this.updateLessIssueInternal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLessIssueInternal</Name>
				<Source><![CDATA[
    private void updateLessIssueInternal()
    {
        Counter     markingLoop = preferredNoMarking ? 2 : 1;
        Counter     dimLoop;

        using (var cache = movement.constructRecordViewCache())
        {
            while (markingLoop > 0)
            {
                if (!inventDimId || inventDimParm.isAllFlagNo())
                {
                    dimLoop = 2;
                }
                else
                {
                    dimLoop = 0;
                }

                while (dimLoop <= 2)
                {
                    InventTrans inventTrans = this.findUpdateLessIssueInventTrans(markingLoop, dimLoop);

                    this.updateLessIssueInventTrans(inventTrans);

                    if (!addQty)
                    {
                        break;
                    }

                    dimLoop++;
                }
                //dimLoop

                if (!addQty)
                {
                    break;
                }

                markingLoop--;
            }
            //markingLoop
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLessIssueInventTrans</Name>
				<Source><![CDATA[
    private void updateLessIssueInventTrans(InventTrans _inventTrans)
    {
        while (_inventTrans)
        {
            InventQty updateNowQuantity = this.transactionIssueQuantity(_inventTrans, -addQty);

            if (updateNowQuantity > _inventTrans.Qty)
            {
                _inventTrans.updateSplit(updateNowQuantity, -cwAddQty);
            }

            addQty      += _inventTrans.Qty;
            cwAddQty    += _inventTrans.PdsCWQty;

            _inventTrans.TransChildType     = InventTransChildType::None;
            _inventTrans.TransChildRefId    = '';
            _inventTrans.update(NoYes::Yes);

            _inventTrans.updateSumUp();

            if (!addQty)
            {
                break;
            }

            this.getNextInventTransToIssue(_inventTrans);
        }

        this.verifyCustomInventTransUpdate(addQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLessReceipt</Name>
				<Source><![CDATA[
    protected void updateLessReceipt()
    {
        InventTrans     inventTrans;
        StatusReceipt   fromStatus;

        if (movement.inventModelGroup().MandatoryWMSOrder)
        {
            fromStatus = StatusReceipt::Ordered;
        }
        else
        {
            fromStatus = StatusReceipt::Registered;
        }

        StatusReceipt toStatus = StatusReceipt::Ordered;

        using (var cache = movement.constructRecordViewCache())
        {
            if (this.parmCustomInventTransListInitialized())
            {
                InventTransReceiveListParameters parameters = InventTransReceiveListParameters::construct();
        
                parameters.fromStatus = fromStatus;
                parameters.toStatus = toStatus;
                parameters.inventTransChildType = movement.transChildType();
                parameters.inventTransChildRefId = movement.transChildRefId();
                
                this.initializeInventTransToReceiveListWithCustomInventTransList(parameters);

                this.getNextInventTransToReceive(inventTrans);
            }
            else
            {
                this.getInventTransToLessReceipt(inventTrans, fromStatus, toStatus);
            }

            while (inventTrans)
            {
                // Catch weight is not supported in the scenario where custom invent trans list is used.
                InventQty updateNowQuantity = this.transactionReceiptQuantity(inventTrans, -addQty);

                if (updateNowQuantity < inventTrans.Qty)
                {
                    inventTrans.updateSplit(updateNowQuantity, -cwAddQty);
                }

                addQty      += inventTrans.Qty;
                cwAddQty    += inventTrans.PdsCWQty;

                inventTrans.TransChildType     = InventTransChildType::None;
                inventTrans.TransChildRefId    = '';
                inventTrans.update(NoYes::Yes);

                inventTrans.updateSumUp();

                if (!addQty)
                {
                    break;
                }

                this.getNextInventTransToReceive(inventTrans);
            }

            this.validateCustomInventTransReceiptUpdate(-addQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moreIssueFromStatus</Name>
				<Source><![CDATA[
    protected StatusIssue moreIssueFromStatus()
    {
        return movement.mustClearChildRef() ? StatusIssue::ReservPhysical : StatusIssue::Picked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moreIssueToStatus</Name>
				<Source><![CDATA[
    protected StatusIssue moreIssueToStatus()
    {
        return StatusIssue::OnOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findUpdateMoreIssueInventTrans</Name>
				<Source><![CDATA[
    private InventTrans findUpdateMoreIssueInventTrans(Counter _dimensionCounter)
    {
        InventTrans inventTrans;

        if (this.parmCustomInventTransListInitialized())
        {
            return this.findUpdateMoreIssueCustomInventTrans();
        }

        return this.findUpdateMoreIssueQueryInventTrans(_dimensionCounter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findUpdateMoreIssueCustomInventTrans</Name>
				<Source><![CDATA[
    private InventTrans findUpdateMoreIssueCustomInventTrans()
    {
        InventTrans inventTrans;
        InventDimParm inventDimParmBlank;

        this.initializeInventTransToIssueListWithCustomInventTransList(this.moreIssueFromStatus(),
                                                                       this.moreIssueToStatus(),
                                                                       inventDimId,
                                                                       inventDimCriteria,
                                                                       inventDimParmBlank,
                                                                       InventTransChildType::None,
                                                                       '');
        
        this.getNextInventTransToIssue(inventTrans);

        return inventTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findUpdateMoreIssueQueryInventTrans</Name>
				<Source><![CDATA[
    protected InventTrans findUpdateMoreIssueQueryInventTrans(Counter _dimensionCounter)
    {
        InventTrans inventTrans;
        StatusIssue fromStatus  = this.moreIssueFromStatus();
        StatusIssue toStatus    = this.moreIssueToStatus();
        
        switch (_dimensionCounter)
        {
            case 0 :
                InventDim inventDim;
                select forupdate forceplaceholders inventTrans
                    order by StatusIssue,InventDimId
                    where inventTrans.InventTransOrigin     == movement.inventTransOriginId()
                       && inventTrans.TransChildType        == InventTransChildType::None
                       && inventTrans.StatusIssue           >= fromStatus
                       && inventTrans.StatusIssue           <= toStatus
                       && inventTrans.StatusReceipt         == StatusReceipt::None
                    #inventDimExistsJoin(inventTrans.InventDimId, inventDim, inventDimCriteria, inventDimParm);
                break;
            case 1 :
                select forupdate inventTrans
                    order by StatusIssue,InventDimId
                    where inventTrans.InventTransOrigin     == movement.inventTransOriginId()
                       && inventTrans.TransChildType        == InventTransChildType::None
                       && inventTrans.StatusIssue           >= fromStatus
                       && inventTrans.StatusIssue           <= toStatus
                       && inventTrans.StatusReceipt         == StatusReceipt::None;
                break;
        }

        return inventTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMoreIssue</Name>
				<Source><![CDATA[
    protected void updateMoreIssue()
    {
        Integer dimLoop;
        
        if (! inventDimId || inventDimParm.isAllFlagNo())
        {
            dimLoop = 1;
        }

        while (dimLoop <= 1)
        {
            InventTrans inventTrans = this.findUpdateMoreIssueInventTrans(dimLoop);

            this.updateMoreIssueInventTrans(inventTrans);

            if (! addQty)
                break;

            dimLoop++;
        }

        if (!movement.pdsCWItem() && addQty)
        {
            InventCleanOrphanChildReference::checkChildReference(movement);
            throw error(strFmt("@SYS55092",-addQty,movement.transChildType(),StatusIssue::OnOrder,StatusIssue::ReservOrdered,StatusIssue::ReservPhysical,StatusIssue::Picked));
        }

        if (movement.pdsCWItem() && cwAddQty)
        {
            InventCleanOrphanChildReference::checkChildReference(movement);
            throw error(strFmt("@SYP4986035",-cwAddQty,movement.transChildType(),StatusIssue::OnOrder,StatusIssue::ReservOrdered,StatusIssue::ReservPhysical,StatusIssue::Picked));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSplitMoreIssueInventTrans</Name>
				<Source><![CDATA[
    private boolean mustSplitMoreIssueInventTrans(InventTrans _inventTrans, InventQty _updateNowQuantity, PdsCWInventQty _updateNowCWQuantity)
    {
        boolean result = _updateNowQuantity > _inventTrans.Qty || _updateNowCWQuantity > _inventTrans.PdsCWQty;
        result = result && (allowSplittingFullVisibilitySerialReserved || !PdsCatchWeight::isTransFullVisSerialReserved(_inventTrans));

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMoreIssueInventTrans</Name>
				<Source><![CDATA[
    private void updateMoreIssueInventTrans(InventTrans _inventTrans)
    {
        UnitQty         qtyNowUnit;
        InventQty       addQtyAllowed;
        PdsCWInventQty  cwAddQtyAllowed;
        
        while (_inventTrans)
        {
            // Validate that inventory dimensions are complete for warehouse enabled items
            if (!this.parmCheckInventTransPhysicalDimensions()
                || this.checkInventTransPhysicalDimensions(_inventTrans))
            {
                [addQtyAllowed, cwAddQtyAllowed] = PdsCatchWeight::adjustSplitQuantities(
                                                                    _inventTrans.ItemId,
                                                                    -_inventTrans.Qty,
                                                                    -_inventTrans.PdsCWQty,
                                                                    -addQty,
                                                                    -cwAddQty);
                addQtyAllowed   = -addQtyAllowed;
                cwAddQtyAllowed = -cwAddQtyAllowed;

                if (addQtyAllowed != 0  ||  cwAddQtyAllowed != 0)
                {
                    InventQty updateNowQuantity = this.transactionIssueQuantity(_inventTrans, addQtyAllowed);
                    PdsCWInventQty updateNowCWQuantity = this.transactionIssueCWQuantity(_inventTrans, cwAddQtyAllowed);

                    if (this.mustSplitMoreIssueInventTrans(_inventTrans, updateNowQuantity, updateNowCWQuantity))
                    {
                        InventQty splitQuantity = this.transactionIssueSplitQuantity(_inventTrans, updateNowQuantity, addQtyAllowed);
                        _inventTrans.updateSplit(splitQuantity, cwAddQtyAllowed);
                    }

                    addQty -= _inventTrans.Qty;
                    InventQty qtyNow = _inventTrans.Qty;
                    cwAddQty -= _inventTrans.PdsCWQty;

                    if (!addQty)
                    {
                        qtyNowUnit = addQtyUnit;
                    }
                    else
                    {
                        qtyNowUnit = referenceQtyUnit * qtyNow /referenceQty;
                        // Try to avoid rounding issue.
                        if (qtyNowUnit != decRound(qtyNowUnit, UnitOfMeasure::unitOfMeasureDecimalPrecision(
                                                UnitOfMeasure::unitOfMeasureIdBySymbol(movement.transUnitId()))))
                        {
                            qtyNowUnit = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(movement.itemId(),
                                                                                                               movement.inventDimId(),
                                                                                                               qtyNow,
                                                                                                               _inventTrans.inventUnit(),
                                                                                                               movement.transUnitId(),
                                                                                                               NoYes::Yes);
                        }
                    }

                    addQtyUnit -= qtyNowUnit;

                    _inventTrans.TransChildRefId = movement.insertChildBuffer(
                                                                _inventTrans.InventDimId,
                                                                qtyNow,
                                                                qtyNowUnit,
                                                                splitmovement,
                                                                updateClass,
                                                                _inventTrans.PdsCWQty);
                    _inventTrans.TransChildType = movement.transChildType();
                    _inventTrans.update(NoYes::Yes);

                    if (!this.parmSkipInventTransSumUp()) 
                    {
                        _inventTrans.updateSumUp();
                    }

                    if (!addQty)
                    {
                        break;
                    }
                }
            }

            this.getNextInventTransToIssue(_inventTrans);
        }

        this.verifyCustomInventTransUpdate(addQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMoreReceipt</Name>
				<Source><![CDATA[
    protected void updateMoreReceipt()
    {
        InventTrans     inventTrans;

        UnitQty         qtyNowUnit;

        StatusReceipt   fromStatus  = movement.mustClearChildRef() ? StatusReceipt::Ordered : StatusReceipt::Registered;
        StatusReceipt   toStatus    = StatusReceipt::Ordered;

        this.initInventTransToReceiveList(
                    fromStatus,
                    toStatus,
                    inventDimId,
                    inventDimCriteria,
                    inventDimParm,
                    InventTransChildType::None,
                    '',
                    addQty,
                    true);

        while (this.getNextInventTransToReceive(inventTrans))
        {
            // Catch weight is not supported in the scenario where custom invent trans list is used.
            InventQty updateNowQuantity = this.transactionReceiptQuantity(inventTrans, addQty);

            if (updateNowQuantity < inventTrans.Qty)
            {
                inventTrans.updateSplit(updateNowQuantity, cwAddQty);
            }

            addQty -= inventTrans.Qty;
            cwAddQty -= inventTrans.PdsCWQty;

            if (!addQty)
            {
                qtyNowUnit  = addQtyUnit;
            }
            else
            {
                qtyNowUnit  = decRound(referenceQtyUnit * inventTrans.Qty /referenceQty, UnitOfMeasure::unitOfMeasureDecimalPrecision(
                    UnitOfMeasure::unitOfMeasureIdBySymbol(movement.transUnitId())));
            }

            addQtyUnit     -= qtyNowUnit;

            inventTrans.TransChildRefId    = movement.insertChildBuffer(
                                                inventTrans.InventDimId,
                                                inventTrans.Qty,
                                                qtyNowUnit,
                                                splitmovement,
                                                updateClass, 
                                                inventTrans.PdsCWQty);
            inventTrans.TransChildType     = movement.transChildType();
            inventTrans.update(NoYes::Yes);

            inventTrans.updateSumUp();

            if (!addQty)
            {
                break;
            }
        }

        if (!movement.pdsCWItem())
        {
            if (addQty)
            {
                InventCleanOrphanChildReference::checkChildReference(movement);
                throw error(strFmt("@SYS55093",addQty,movement.transChildType(),StatusReceipt::Ordered,StatusReceipt::Arrived,StatusReceipt::Registered));
            }
        }
        else
        {
            if (cwAddQty)
            {
                InventCleanOrphanChildReference::checkChildReference(movement);
                throw error(strFmt("@SYP4986036",cwAddQty,movement.transChildType(),StatusReceipt::Ordered,StatusReceipt::Arrived,StatusReceipt::Registered));
            }
        }

        this.validateCustomInventTransReceiptUpdate(addQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    public void updateNow()
    {
        using (var telemetryTask = new InventUpdateInstrumentationTask(this))
        {
			ttsbegin;

			if (referenceQty)
			{
				setPrefix(#PreFixFieldValue(inventTable,ItemId,movement.ItemId()));

				if (!this.checkUpdateMovement(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())))
				{
					throw error("@SYS18447");
				}

				if (movement.remainPhysical() < 0)
				{
					if (referenceQty < 0)
					{
						this.updateMoreIssue();
					}
					else
					{
						this.updateLessIssue();
					}
				}
				else
				{
					if (referenceQty > 0)
					{
						this.updateMoreReceipt();
					}
					else
					{
						this.updateLessReceipt();
					}
				}
			}

			ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    static public InventUpd_ChildReference newParameters(
        InventMovement        _movement,
        InventQty             _referenceQty,
        UnitQty               _referenceQtyUnit,
        boolean               _splitMovement,
        InventDimId           _inventDimId,
        PdsCWInventQty        _cwQty = 0
        )
    {
        InventUpd_ChildReference inventUpd_ChildReference = new InventUpd_ChildReference(_movement);

        inventUpd_ChildReference.setParmAllowDefault();
        inventUpd_ChildReference.parmReferenceQty(_referenceQty);
        inventUpd_ChildReference.parmReferenceQtyUnit(_referenceQtyUnit);
        inventUpd_ChildReference.parmInventDimId(_inventDimId);
        inventUpd_ChildReference.parmSplitMovement(_splitMovement);
        inventUpd_ChildReference.parmPdsCWReferenceQty(_cwQty);
        inventUpd_ChildReference.parmExcludeOnOrder(false);
        inventUpd_ChildReference.parmAllowSplittingFullVisibilitySerialReserved(true);

        inventUpd_ChildReference.initUpdate();

        return inventUpd_ChildReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProdJournalCreate</Name>
				<Source><![CDATA[
    static public InventUpd_ChildReference newProdJournalCreate(
        InventMovement        _movement,
        InventQty             _referenceQty,
        UnitQty               _referenceQtyUnit,
        ProdJournalTransData  _updateClass,
        PdsCWInventQty        _cwQty = 0,
        InventDimId           _inventDimId = ''
        )
    {
        InventUpd_ChildReference inventUpd_ChildReference = new InventUpd_ChildReference(_movement);

        inventUpd_ChildReference.setParmAllowDefault();
        inventUpd_ChildReference.parmReferenceQty(_referenceQty);
        inventUpd_ChildReference.parmReferenceQtyUnit(_referenceQtyUnit);
        inventUpd_ChildReference.parmInventDimId(_inventDimId);
        inventUpd_ChildReference.parmSplitMovement(true);
        inventUpd_ChildReference.parmUpdateClass(_updateClass);
        inventUpd_ChildReference.parmPdsCWReferenceQty(_cwQty);
        inventUpd_ChildReference.parmExcludeOnOrder(false);
        inventUpd_ChildReference.parmAllowSplittingFullVisibilitySerialReserved(true);


        inventUpd_ChildReference.initUpdate();

        return inventUpd_ChildReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventTransPhysicalDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Ensure that a transaction's physical dimensions are valid.
    /// </summary>
    /// <param name="_inventTrans">
    ///  An <c>InventTrans</c> buffer
    /// </param>
    /// <returns>
    ///  Returns true if a location exists or transaction does not have a status of reserved physical; otherwise false.
    /// </returns>
    private boolean checkInventTransPhysicalDimensions(InventTrans _inventTrans)
    {
        boolean         ret = true;

        if (_inventTrans.StatusIssue == StatusIssue::ReservPhysical
            && InventTable::find(_inventTrans.ItemId).whsItemIsWHSControlled())
        {
            InventMovement inventMovement = InventMovement::construct(_inventTrans, InventMovSubType::None, null);

            InventDim inventDim = InventDim::find(_inventTrans.inventDimId);

            ret = inventMovement.checkDimPhysical(_inventTrans.Qty, inventDim, true);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckInventTransPhysicalDimensions</Name>
				<Source><![CDATA[
    public boolean parmCheckInventTransPhysicalDimensions(boolean _checkInventTransPhysicalDimensions = checkInventTransPhysicalDimensions)
    {
        checkInventTransPhysicalDimensions = _checkInventTransPhysicalDimensions;

        return checkInventTransPhysicalDimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventTransToLessReceipt</Name>
				<Source><![CDATA[
    protected void getInventTransToLessReceipt(
        InventTrans _inventTrans,
        StatusReceipt _fromStatus,
        StatusReceipt _toStatus
        )
    {
        select reverse forupdate _inventTrans
            order by StatusReceipt,InventDimId
            where  _inventTrans.InventTransOrigin == movement.inventTransOriginId()
                && _inventTrans.TransChildType    == movement.transChildType()
                && _inventTrans.TransChildRefId   == movement.transChildRefId()
                && _inventTrans.StatusReceipt     >= _fromStatus
                && _inventTrans.StatusReceipt     <= _toStatus
                && _inventTrans.StatusIssue       == StatusIssue::None;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>