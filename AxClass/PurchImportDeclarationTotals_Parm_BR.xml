<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchImportDeclarationTotals_Parm_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchImportDeclarationTotals_Parm_BR extends PurchImportDeclarationTotals_BR
{
    VendInvoiceInfoTable    vendInvoiceInfoTable;
    VendInvoiceInfoLine     vendInvoiceInfoLine;
    VendInvoiceInfoLine_W   vendInvoiceInfoLine_W;
    TmpTaxWorkTrans         tmpTaxWorkTrans;
    QueryRun                queryRun;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retries the invoice exchange rate.
    /// </summary>
    /// <returns>
    /// The exchange rate of the invoice.
    /// </returns>
    protected ExchRate exchRate()
    {
        if (vendInvoiceInfoTable.FixedExchRate)
        {
            return vendInvoiceInfoTable.ExchRate;
        }
        else
        {
            return ExchangeRateHelper::exchRate(vendInvoiceInfoTable.CurrencyCode, vendInvoiceInfoTable.updateDate());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLinesQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the query to retrieve the invoice lines.
    /// </summary>
    public void initLinesQuery()
    {
        Query                   query;
        QueryBuildDataSource    qbds;

        query   = vendInvoiceInfoTable.queryLine();

        qbds    = query.dataSourceTable(tableNum(VendInvoiceInfoLine)).addDataSource(tableNum(VendInvoiceInfoLine_W));
        qbds.relations(true);
        qbds.joinMode(JoinMode::OuterJoin);
        qbds.addOrderByField(fieldNum(VendInvoiceInfoLine_W, DIAddition_BR));

        queryRun = new QueryRun(query);

        queryRun.next();

        vendInvoiceInfoLine     = queryRun.get(tableNum(VendInvoiceInfoLine));
        VendInvoiceInfoLine_W   = queryRun.get(tableNum(VendInvoiceInfoLine_W));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAddition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the line addition number.
    /// </summary>
    /// <returns>
    /// A string representing the line addition number.
    /// </returns>
    protected str lineAddition()
    {
        return vendInvoiceInfoLine_W.DIAddition_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountFOB</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the Free On Board amount of the invoice line.
    /// </summary>
    /// <returns>
    /// The Free On Board amount of the invoice line.
    /// </returns>
    protected LineAmount lineAmountFOB()
    {
        return vendInvoiceInfoLine.lineAmountMST(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), vendInvoiceInfoTable.ExchRate, vendInvoiceInfoTable.ExchRateSecondary, UnknownNoYes::Unknown);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the invoice line record id.
    /// </summary>
    /// <returns>
    /// The invoice line record id.
    /// </returns>
    public RecId lineRecId()
    {
        return vendInvoiceInfoLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(Common _common, TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        super();

        vendInvoiceInfoTable    = _common;
        tmpTaxWorkTrans         = _tmpTaxWorkTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves to the next line in case it exists.
    /// </summary>
    /// <returns>
    /// True if there is a next line; otherwise, false.
    /// </returns>
    public boolean nextLine()
    {
        if (queryRun.next())
        {
            vendInvoiceInfoLine = queryRun.get(tableNum(VendInvoiceInfoLine));
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMarkups</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the invoice line miscellaneous charges amounts.
    /// </summary>
    protected void setMarkups()
    {
        MarkupTrans     markupTrans;
        MarkupTable     markupTable;
        boolean         isMarkupClassification;
        MarkupAmount    markupAmount;

        while select RecId from markuptrans
                    where markuptrans.TransRecId == this.lineRecId()
                          && markuptrans.TransTableId == this.transTableId()
                    join MarkupClassification_BR from markupTable
                        where markupTable.MarkupCode == markuptrans.MarkupCode
                        && markupTable.ModuleType == markuptrans.ModuleType
        {
            if (markupTable.MarkupClassification_BR != MarkupClassification_BR::Blank)
            {
                isMarkupClassification = true;
            }

            if (markupAmountMap.exists(markupTrans.RecId))
            {
                markupAmount =  markupAmountMap.lookup(markupTrans.RecId);
            }
            else
            {
                markupAmount =  0;
            }

            switch (markupTable.MarkupClassification_BR)
            {
                case MarkupClassification_BR::Freight   :
                    markupFreight   = markupAmount;
                    importDeclarationTotals.Freight   += markupFreight;
                    break;
                case MarkupClassification_BR::Insurance :
                    markupInsurance = markupAmount;
                    importDeclarationTotals.Insurance += markupInsurance;
                    break;
                case MarkupClassification_BR::SISCOMEX  :
                    markupSiscomex  =markupAmount;
                    importDeclarationTotals.SISCOMEX  += markupSiscomex;
                    break;
                case MarkupClassification_BR::Others    :
                    markupOthers    = markupAmount;
                    importDeclarationTotals.Others    += markupOthers;
                    break;
            }
        }

        if (isMarkupClassification)
        {
            importDeclarationTotals.Freight          = abs(importDeclarationTotals.Freight);
            importDeclarationTotals.Insurance        = abs(importDeclarationTotals.Insurance);
            importDeclarationTotals.SISCOMEX         = abs(importDeclarationTotals.SISCOMEX);
            importDeclarationTotals.Others           = abs(importDeclarationTotals.Others);
            isMarkupClassification = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total tax amount of the line by the tax type.
    /// </summary>
    /// <param name="_taxType">
    /// The tax type.
    /// </param>
    /// <returns>
    /// The total tax amount of the provided tax type.
    /// </returns>
    public TaxAmount taxAmount(TaxType_BR _taxType)
    {
        TaxAmount taxAmount;

        while select tmpTaxWorkTrans
            where tmpTaxWorkTrans.InventTransId == vendInvoiceInfoLine.InventTransId
                && tmpTaxWorkTrans.TaxType_BR == _taxType
        {
            switch (tmpTaxWorkTrans.TaxType_BR)
            {
                case TaxType_BR::ImportTax  : taxAmount += tmpTaxWorkTrans.TaxAmount; break;
                case TaxType_BR::IPI        : taxAmount += tmpTaxWorkTrans.TaxAmount; break;
                case TaxType_BR::COFINS     : taxAmount += tmpTaxWorkTrans.TaxAmount; break;
                case TaxType_BR::PIS        : taxAmount += tmpTaxWorkTrans.TaxAmount; break;
                case TaxType_BR::ICMS       : taxAmount += tmpTaxWorkTrans.TaxAmount; break;
            }
        }

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the parm table id.
    /// </summary>
    /// <returns>
    /// The parm table id.
    /// </returns>
    protected tableId transTableId()
    {
        return vendInvoiceInfoLine.TableId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>