<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendDocumentLineTypeBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendDocumentLineTypeBase</c> class applies default values to the vendor document lines and is used for validation.
/// </summary>
public abstract class VendDocumentLineTypeBase
{
    protected VendDocumentLineMap vendDocumentLineMap;
    protected VendDocumentTableMap vendDocumentTableMap;
    protected LedgerJournalOperation ledgerJournalOperation;

    protected PurchUpdate specQty;

    protected Map fieldIdMapping;
    protected Set tableToLineFields;

    protected boolean isModifiedField;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>areInventQtyFieldsSet</Name>
				<Source><![CDATA[
    protected boolean areInventQtyFieldsSet()
    {
        return
            vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, InventNow), vendDocumentLineMap.TableId)) &&
            vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, RemainAfterInvent), vendDocumentLineMap.TableId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>areDocumentQtyFieldsSet</Name>
				<Source><![CDATA[
    protected boolean areDocumentQtyFieldsSet()
    {
        return
            vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, ReceiveNow), vendDocumentLineMap.TableId)) &&
            vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, RemainAfter), vendDocumentLineMap.TableId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventQtys</Name>
				<Source><![CDATA[
    protected void setInventQtys(container _inventQtys)
    {
        vendDocumentLineMap.InventNow = conPeek(_inventQtys, 1);
        vendDocumentLineMap.RemainAfterInvent = conPeek(_inventQtys, 3);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchQtys</Name>
				<Source><![CDATA[
    protected void setPurchQtys(container _purchQtys)
    {
        vendDocumentLineMap.ReceiveNow = conPeek(_purchQtys, 1);
        vendDocumentLineMap.RemainAfter = conPeek(_purchQtys, 3);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLineQty</Name>
				<Source><![CDATA[
    protected abstract boolean checkLineQty()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultAdditionalFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the default field values for fields related to derived document types.
    /// </summary>
    protected abstract void defaultAdditionalFields()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies default value for a specific field.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID.
    /// </param>
    public void defaultField(FieldId _fieldId)
    {
        const str DefaultingMethodNamePrefix = 'default';

        str fieldName;
        str methodName;
        SysDictClass sysDictClass;
        FieldState internalStatusOriginal;
        ExecutePermission permission;

        internalStatusOriginal = vendDocumentLineMap.inputStatus();
        vendDocumentLineMap.inputStatus(FieldState::Defaulted);

        fieldName = fieldId2name(vendDocumentLineMap.TableId, _fieldId);
        methodName = DefaultingMethodNamePrefix + fieldName;
        sysDictClass = new SysDictClass(classIdGet(this));

        if (sysDictClass.hasObjectMethod(methodName))
        {
            permission = new ExecutePermission();
            permission.assert();
            sysDictClass.callObject(methodName, this);
            CodeAccessPermission::revertAssert();
        }

        vendDocumentLineMap.inputStatus(internalStatusOriginal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInventDimId</Name>
				<Source><![CDATA[
    protected void defaultInventDimId()
    {
        InventDimId inventDimId;

        if (!vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, InventDimId), vendDocumentLineMap.TableId)))
        {
            inventDimId = this.determineDefaultInventDimId();
            vendDocumentLineMap.InventDimId = inventDimId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInventNow</Name>
				<Source><![CDATA[
    protected void defaultInventNow()
    {
        if (!vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, InventNow), vendDocumentLineMap.TableId)))
        {
            this.defaultInventQtys();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPurchaseLineLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the default value for the <c>PurchaseLineLineNumber</c> field.
    /// </summary>
    protected void defaultPurchaseLineLineNumber()
    {
        if (!vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, PurchaseLineLineNumber), vendDocumentLineMap.TableId)))
        {
            vendDocumentLineMap.PurchaseLineLineNumber = this.determineDefaultPurchaseLineLineNumber();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultItemId</Name>
				<Source><![CDATA[
    protected abstract void defaultItemId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultOrigPurchId</Name>
				<Source><![CDATA[
    protected void defaultOrigPurchId()
    {
        Num orderNumber;

        if (!vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, OrigPurchId), vendDocumentLineMap.TableId)))
        {
            orderNumber = this.determineDefaultOrderNumber();
            vendDocumentLineMap.OrigPurchId = orderNumber;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPurchLineRecId</Name>
				<Source><![CDATA[
    protected void defaultPurchLineRecId()
    {
        RecId orderLineRecId;

        if (!vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, PurchLineRecId), vendDocumentLineMap.TableId)))
        {
            orderLineRecId = this.determineDefaultOrderLineRecId();
            vendDocumentLineMap.PurchLineRecId = orderLineRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInventQtys</Name>
				<Source><![CDATA[
    protected abstract void defaultInventQtys(InventQty _inventNow = naReal())
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPurchQtys</Name>
				<Source><![CDATA[
    protected abstract void defaultPurchQtys(PurchQty _receiveNow = naReal())
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultInventQtys</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines and returns the inventory quantities for the document line.
    /// </summary>
    /// <param name="_inventQty">
    ///    The document quantity in inventory unit of measure; optional.
    /// </param>
    /// <returns>
    ///    A container with the<c>InventNow</c>, <c>RemainBeforeInvent</c> and <c>RemainAfterInvent</c> values.
    /// </returns>
    protected abstract container determineDefaultInventQtys(InventQty _inventQty = naReal())
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPurchQtys</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines and returns the document quantities for the document line.
    /// </summary>
    /// <param name="_receiveNow">
    /// The document quantity in document unit of measure; optional.
    /// </param>
    /// <returns>
    ///    A container with the<c>InventNow</c>, <c>RemainBeforeInvent</c> and <c>RemainAfterInvent</c> values.
    /// </returns>
    protected abstract container determineDefaultPurchQtys(PurchQty _receiveNow = naReal())
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultReceiveNow</Name>
				<Source><![CDATA[
    protected void defaultReceiveNow()
    {
        if (!vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, ReceiveNow), vendDocumentLineMap.TableId)))
        {
            this.defaultPurchQtys();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRemainAfter</Name>
				<Source><![CDATA[
    protected void defaultRemainAfter()
    {
        if (!vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, RemainAfter), vendDocumentLineMap.TableId)))
        {
            this.defaultPurchQtys();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRemainAfterInvent</Name>
				<Source><![CDATA[
    protected void defaultRemainAfterInvent()
    {
        if (!vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, RemainAfterInvent), vendDocumentLineMap.TableId)))
        {
            this.defaultInventQtys();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultQuantities</Name>
				<Source><![CDATA[
    protected void defaultQuantities(PurchQty _receiveNow = naReal(), InventQty _inventNow = naReal(), PdsCWInventQty _cwReceiveNow = naReal())
    {
        this.defaultPurchQtys(_receiveNow);
        this.defaultInventQtys(_inventNow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies default values to the <c>VendDocumentLineMap</c> record.
    /// </summary>
    /// <param name="_receiveNow">
    ///    The quantity to receive in purchasing unit of measure; optional.
    /// </param>
    /// <param name="_inventNow">
    ///    The quantity to receive in inventory unit of measure; optional.
    /// </param>
    /// <param name="_cwReceiveNow">
    /// The quantity to receive in catch weight unit of measure.
    /// </param>
    public void defaultRow(PurchQty _receiveNow = naReal(), InventQty _inventNow = naReal(), PdsCWInventQty _cwReceiveNow = naReal())
    {
        FieldState internalStatusOriginal;

        internalStatusOriginal = vendDocumentLineMap.inputStatus();
        vendDocumentLineMap.inputStatus(FieldState::Defaulted);

        this.defaultQuantities(_receiveNow, _inventNow, _cwReceiveNow);

        if (this.checkLineQty())
        {
            ledgerJournalOperation = vendDocumentLineMap.RecId == 0 ? LedgerJournalOperation::Create : LedgerJournalOperation::Update;

            this.initFromRecordLine();

            // default fields specific to subclasses
            this.defaultAdditionalFields();
        }

        vendDocumentLineMap.inputStatus(internalStatusOriginal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultInventDimId</Name>
				<Source><![CDATA[
    protected abstract InventDimId determineDefaultInventDimId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPurchaseLineLineNumber</Name>
				<Source><![CDATA[
    protected abstract TradeLineNumber determineDefaultPurchaseLineLineNumber()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultOrderNumber</Name>
				<Source><![CDATA[
    protected abstract Num determineDefaultOrderNumber()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultOrderLineRecId</Name>
				<Source><![CDATA[
    protected abstract RecId determineDefaultOrderLineRecId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the field ID of a given field in the table mapped to the <c>VendDocumentLineMap</c>.
    /// </summary>
    /// <param name="_fieldIdInMap">
    /// The ID of the field in the <c>VendDocumentLineMap</c>.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the table mapped to the <c>VendDocumentLineMap</c>.
    /// </param>
    /// <returns>
    /// The ID of the field in the mapped table.
    /// </returns>
    public fieldId fieldNum(fieldId _fieldIdInMap, tableId _tableId)
    {
        if (fieldIdMapping == null)
        {
            fieldIdMapping = VendDocumentUtil::fieldMapping(tablenum(VendDocumentLineMap), _tableId);
        }

        return fieldIdMapping.lookup(_fieldIdInMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRecordLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies values of several fields from the source document line table record.
    /// </summary>
    public void initFromRecordLine()
    {
        this.defaultOrigPurchId();
        this.defaultItemId();
        this.defaultPurchaseLineLineNumber();
        this.defaultPurchLineRecId();
        this.defaultInventDimId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isHeaderFieldModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a field on the vendor document header table was modified.
    /// </summary>
    /// <param name="_fieldId">
    /// The id of a field on the vendor document header table.
    /// </param>
    /// <returns>
    /// true, if the header field was modified and is set to rolldown; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Used as part of the header to line rolldown.
    /// </remarks>
    public boolean isHeaderFieldModified(fieldId _fieldId)
    {
        return (tableToLineFields && tableToLineFields.in(_fieldId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReceiveNowSet</Name>
				<Source><![CDATA[
    public boolean isReceiveNowSet()
    {
        return vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, ReceiveNow), vendDocumentLineMap.TableId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTableToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the defaulting is taking place as a part of a header rolldown.
    /// </summary>
    /// <returns>
    /// true if this is a header rolldown; otherwise, false.
    /// </returns>
    public boolean isTableToLine()
    {
        return tableToLineFields && !tableToLineFields.empty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTableToLineFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the list of fields that will be copied as a part of a header rolldown.
    /// </summary>
    /// <param name="_tableToLineFields">
    /// The value to set.
    /// </param>
    /// <returns>
    /// The value of the class variable.
    /// </returns>
    public Set parmTableToLineFields(Set _tableToLineFields = tableToLineFields)
    {
        if (!prmisDefault(_tableToLineFields))
        {
            tableToLineFields = _tableToLineFields;
        }

        return tableToLineFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpecQty</Name>
				<Source><![CDATA[
    public PurchUpdate parmSpecQty(PurchUpdate _specQty = specQty)
    {
        if (!prmisDefault(_specQty))
        {
            specQty = _specQty;
        }

        return specQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsModifiedField</Name>
				<Source><![CDATA[
    internal boolean parmIsModifiedField(boolean _isModifiedField = isModifiedField)
    {
        isModifiedField = _isModifiedField;

        return isModifiedField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates a value for a specific field.
    /// </summary>
    /// <param name="_fieldId">
    ///    The ID corresponding with the field being validated.
    /// </param>
    /// <returns>
    ///    true if the value is valid; otherwise, false.
    /// </returns>
    public boolean validateField(FieldId _fieldId)
    {
        const str ValidationMethodNamePrefix = 'validate';

        str fieldName;
        str methodName;
        SysDictClass sysDictClass;
        boolean isValid = true;
        ExecutePermission permission;

        fieldName = fieldId2name(vendDocumentLineMap.TableId, _fieldId);
        methodName = ValidationMethodNamePrefix + fieldName;
        sysDictClass = new SysDictClass(classIdGet(this));

        if (sysDictClass.hasObjectMethod(methodName))
        {
            permission = new ExecutePermission();
            permission.assert();
            isValid = sysDictClass.callObject(methodName, this);
            CodeAccessPermission::revertAssert();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value of the <c>InventNow</c> field.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    protected boolean validateInventNow()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItemId</Name>
				<Source><![CDATA[
    protected boolean validateItemId()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReceiveNow</Name>
				<Source><![CDATA[
    protected boolean validateReceiveNow()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRemainAfter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value of the <c>RemainAfter</c> field.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    protected boolean validateRemainAfter()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRemainAfterInvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value of the <c>RemainAfterInvent</c> field.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    protected boolean validateRemainAfterInvent()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendDocumentLineMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets or retrieves the <c>VendDocumentLineMap</c> class variable.
    /// </summary>
    /// <param name="_vendDocumentLineMap">
    ///    The <c>VendDocumentLineMap</c> variable to set; optional.
    /// </param>
    /// <returns>
    ///    The <c>VendDocumentLineMap</c> table buffer.
    /// </returns>
    public VendDocumentLineMap vendDocumentLineMap(VendDocumentLineMap _vendDocumentLineMap = vendDocumentLineMap)
    {
        if (!prmisDefault(_vendDocumentLineMap))
        {
            vendDocumentLineMap = _vendDocumentLineMap;
        }

        return vendDocumentLineMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendDocumentTableMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the current <c>VendDocumentTableMap</c> record.
    /// </summary>
    /// <returns>
    ///    The <c>VendDocumentTableMap</c> table buffer.
    /// </returns>
    public VendDocumentTableMap vendDocumentTableMap()
    {
        if (vendDocumentTableMap == null) // lazy load
        {
            vendDocumentTableMap = VendDocumentLineMap::header(vendDocumentLineMap);
        }

        return vendDocumentTableMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalOperation</Name>
				<Source><![CDATA[
    internal LedgerJournalOperation parmLedgerJournalOperation(LedgerJournalOperation _ledgerJournalOperation = ledgerJournalOperation)
    {
        if (!prmisDefault(_ledgerJournalOperation))
        {
            ledgerJournalOperation = _ledgerJournalOperation;
        }

        return ledgerJournalOperation;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>