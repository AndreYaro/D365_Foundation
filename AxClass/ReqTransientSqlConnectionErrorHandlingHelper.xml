<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTransientSqlConnectionErrorHandlingHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ReqTransientSqlConnectionErrorHandlingHelper
{
    private static int defaultMaxRetryOfTransientSqlConnectionError = 5;
    private static ReqInstrumentationLogger instrumentationLogger;

    private static boolean labelsInitialized;
    private static str sqlErrorMessageTemporaryProblemHardcoded = 'temporary problem with the connection to the database';
    private static str sqlErrorMessageTemporaryProblem;
    private static str sqlErrorMessageCannotExecuteOperationHardcoded = 'Cannot execute the required database operation';
    private static str sqlErrorMessageCannotExecuteOperation;
    private static str sqlErrorMessageTempDBTableNotPresentHardcoded = 'TempDB';
    private static str sqlErrorMessageTempDBTableNotPresent;
    private const str sqlErrorMessageUnspecified = 'Unspecified error occurred on SQL Server';
    private const str sqlErrorMessageCursorOperation = 'Could not complete cursor operation because the table schema changed after the cursor was declared';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>retryTransientSqlConnectionError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles retry logic for transient sql connection error.
    /// </summary>
    /// <param name = "_maxRetryOfTransientSqlConnectionError">Maximum number of retries.</param>
    /// <returns>true if retry should be scheduled; otherwise, false.</returns>
    [Hookable(false)]
    internal static boolean retryTransientSqlConnectionError(int _maxRetryOfTransientSqlConnectionError = defaultMaxRetryOfTransientSqlConnectionError)
    {
        int     currentRetryCount = xSession::currentRetryCount();
        boolean shouldRetry = ReqTransientSqlConnectionErrorHandlingHelper::isReqTransientSqlConnectionErrorHandlingToggleEnabled();

        if (shouldRetry)
        {
            shouldRetry = SysTransientSqlConnectionErrorHandler::retryTransientSqlConnectionError(_maxRetryOfTransientSqlConnectionError);
        }

        ReqTransientSqlConnectionErrorHandlingHelper::logInformation(shouldRetry, currentRetryCount, _maxRetryOfTransientSqlConnectionError);

        return shouldRetry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delayRetry</Name>
				<Source><![CDATA[
    [SysObsolete('delayRetry is deprecated and replaced by SysTransientSqlConnectionErrorHandler::delayRetry().', false, 12\10\2021)]
    internal static void delayRetry(int _retryCount)
    {
        var delay = 5000 * power(2, min(_retryCount, 5));
        sleep(min(60 * 1000, delay));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReqTransientSqlConnectionErrorHandlingToggleEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the value of ReqTransientSqlConnecionErrorHandlingToggle.
    /// </summary>
    /// <returns>
    /// Value of ReqTransientSqlConnecionErrorHandlingToggle and true if the value could not be retrieved.
    /// </returns>
    public static boolean isReqTransientSqlConnectionErrorHandlingToggleEnabled()
    {
        try
        {
            return ReqTransientSqlConnectionErrorHandlingToggle::instance().isEnabled();
        }
        catch
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReqTransientSqlConnectionErrorHandlingMRPTaskManagementToggleEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the value of ReqTransientSqlConnectionErrorHandlingMRPTaskManagementToggle.
    /// </summary>
    /// <returns>
    /// Value of ReqTransientSqlConnectionErrorHandlingMRPTaskManagementToggle and true if the value could not be retrieved.
    /// </returns>
    public static boolean isReqTransientSqlConnectionErrorHandlingMRPTaskManagementToggleEnabled()
    {
        try
        {
            return ReqTransientSqlConnectionErrorHandlingMRPTaskManagementToggle::instance().isEnabled();
        }
        catch
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExceptionErrorCausedBySQLError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if Exception::Error that occured is due to a SQL error based on infolog messages.
    /// </summary>
    /// <param name = "_infologLineTry">The infolog line number of the try statement that caught the exception.</param>
    /// <returns>true if Exception::Error that occured is due to a SQL error; false otherwise</returns>
    /// <remarks>
    /// The decision if exception was caused by a SQL error is done based on number of known error messages that occur
    /// when a SQL error happens. There is no guarantee that the issue is temporary and can be successfully retried. 
    /// Should be used with caution.
    /// </remarks>
    [Hookable(false)]
    internal static boolean isExceptionErrorCausedBySQLError(int _infologLineTry)
    {
        boolean reqRetryOnSchemaChangedSqlErrorToggleEnabled = ReqTransientSqlConnectionErrorHandlingHelper::isReqRetryOnSchemaChangedSqlErrorToggleEnabled();
        boolean useKernelLabels = labelsInitialized;

        int lastInfologLine = infologLine();
        for (int line = _infologLineTry; line <= lastInfologLine; line++)
        {
            if (infolog.level(line) != Exception::Error)
            {
                continue;
            }

            var infologLineText = strRem(infolog.text(line), '\n');
            if (ReqTransientSqlConnectionErrorHandlingHelper::containsErrorMessage(infologLineText, useKernelLabels ? sqlErrorMessageTemporaryProblem : sqlErrorMessageTemporaryProblemHardcoded)
                || ReqTransientSqlConnectionErrorHandlingHelper::containsErrorMessage(infologLineText, sqlErrorMessageUnspecified)
                || ReqTransientSqlConnectionErrorHandlingHelper::containsErrorMessage(infologLineText, useKernelLabels ? sqlErrorMessageCannotExecuteOperation : sqlErrorMessageCannotExecuteOperationHardcoded)
                || (reqRetryOnSchemaChangedSqlErrorToggleEnabled && ReqTransientSqlConnectionErrorHandlingHelper::containsErrorMessage(infologLineText, sqlErrorMessageCursorOperation))
                || ReqTransientSqlConnectionErrorHandlingHelper::containsErrorMessage(infologLineText, useKernelLabels ? sqlErrorMessageTempDBTableNotPresent : sqlErrorMessageTempDBTableNotPresentHardcoded))
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultMaxRetryOfTransientSqlConnectionError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default maximum number of retries of transient SQL connection exceptions for the current session.
    /// </summary>
    /// <param name = "_defaultMaxRetryOfTransientSqlConnectionError">The default maximum retry of transient sql connection errors.</param>
    internal static void setDefaultMaxRetryOfTransientSqlConnectionError(int _defaultMaxRetryOfTransientSqlConnectionError)
    {
        ReqTransientSqlConnectionErrorHandlingHelper::defaultMaxRetryOfTransientSqlConnectionError = _defaultMaxRetryOfTransientSqlConnectionError ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>TypeNew</Name>
				<Source><![CDATA[
    private static void TypeNew()
    {
        instrumentationLogger = ReqInstrumentationLogger::createLogger(classStr(ReqTransientSqlConnectionErrorHandlingHelper));

        try
        {
            System.Type helperType = System.Type::GetType('Microsoft.Dynamics.Ax.Services.AifHelper, aoskernel, Version=7.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35');
            System.Type int32Type = System.Type::GetType('System.Int32');
            System.Type[] parameterTypes =  new System.Type[2]();
            parameterTypes.SetValue(int32Type, 0);
            parameterTypes.SetValue(int32Type, 1);
            System.Reflection.MethodInfo method = helperType.GetMethod('GetKernelMessage', parameterTypes);

            // kernel message/submessage identifiers, they should correspond to the constants in msgdef.hpp and dbi.hpp
            const int messageId_dbErrOpr = 391;
            const int messageId_dbErrType = 392;
            const int messageId_dbErrType1 = 393;

            const int subMessageId_dbErrOther = 5;
            const int subMessageId_dbOprConnectionNotOpen = 50;
            const int subMessageId_dbOprTempDBNotPresent = 52;

            sqlErrorMessageTemporaryProblem = method.Invoke(null, [messageId_dbErrType, subMessageId_dbOprConnectionNotOpen]);
            sqlErrorMessageCannotExecuteOperation = method.Invoke(null, [messageId_dbErrOpr, subMessageId_dbErrOther]);
            sqlErrorMessageTempDBTableNotPresent = method.Invoke(null, [messageId_dbErrType1, subMessageId_dbOprTempDBNotPresent]);

            labelsInitialized = true;
        }
        catch
        {
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logInformation</Name>
				<Source><![CDATA[
    private static void logInformation(boolean _shouldRetry, int _currentRetryCount, int _maxRetryOfTransientSqlConnectionError)
    {
        const str message = "Retry transient sql connection error";

        try
        {        
            SysInstrumentationEventDataJsonSerializer serializer = new SysInstrumentationEventDataJsonSerializer();
            serializer.setValue('Retry', any2Str(_shouldRetry));
            serializer.setValue('Message', message);
            serializer.setValue('CurrentRetryCount', int2Str(_currentRetryCount));
            serializer.setValue('MaxRetryOfTransientSqlConnectionError', int2Str(_maxRetryOfTransientSqlConnectionError));

            instrumentationLogger.logInformation(serializer.toString());
        }
        catch
        {
            // Swallowing exceptions so that if an error happens when logging telemetry it cannot affect the retries.
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReqRetryOnSchemaChangedSqlErrorToggleEnabled</Name>
				<Source><![CDATA[
    private static boolean isReqRetryOnSchemaChangedSqlErrorToggleEnabled()
    {
        try
        {
            return ReqRetryOnSchemaChangedSqlErrorToggle::instance().isEnabled();
        }
        catch
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>containsErrorMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the given infolog line text contains the given error message.
    /// </summary>
    /// <param name = "_infologLineText">Infolog line text.</param>
    /// <param name = "_errorMessage">Error message as string.</param>
    /// <returns>true if the infolog line text contains the given error message; false otherwise.</returns>
    /// <remarks>
    /// The error message given can only contain system metadata, as it is put in telemetry.
    /// </remarks>
    private static boolean containsErrorMessage(str _infologLineText, str _errorMessage)
    {
        if (match(_errorMessage, _infologLineText))
        {
            try
            {
                instrumentationLogger.logInformation(strFmt("The following error message has been found in infolog: %1", _errorMessage));
            }
            catch
            {
                // Swallowing exceptions so that if an error happens when logging telemetry it cannot affect the retries.
            }

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>