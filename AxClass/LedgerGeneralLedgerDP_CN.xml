<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerGeneralLedgerDP_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerGeneralLegerDP_CN</c> class provides data for the <c>LedgerGeneralLedgerReport_CN</c> SSRS report.
/// </summary>
/// <remarks>
/// This is the Report Data Provider class for the <c>LedgerGeneralLedgerReport_CN</c> SSRS report.
/// </remarks>
[
    SRSReportParameterAttribute(classStr(LedgerGeneralLedgerContract_CN))
]
public class LedgerGeneralLedgerDP_CN extends SrsReportDataProviderPreProcessTempDB
{
    TmpGeneralLedger_CN tmpGeneralLedger;

    MainAccountNum  fromMainAccount;
    MainAccountNum  toMainAccount;
    FiscalYearName  yearName;
    PeriodName      periodName;

    LedgerPreprint_CN               ledgerPrePrintCode;
    LedgerPrintLayoutCurrency_CN    ledgerPrintCurrency;
    List                            dimensionExpressionList;
    Counter                         lineOfOnePage;

    Query   ledgerGeneralLedger;

    const int DefaultMaxLines = 30; // The default max number of lines in one page of preprinted report.

    // Those three consts below are used to sort the data in group of report design
    const int FirstLine = 1;  // The line "Continued from the previous page".
    const int MiddleLine = 2; // The line includes the actual data.
    const int BottomLine = 3; // The line "The line "Continued on the next page" or the blank line.

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTmpGeneralLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data from the <c>TmpGeneralLedger_CN</c> temporary table.
    /// </summary>
    /// <returns>
    /// An instance of the <c>TmpGeneralLedger_CN</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(TmpGeneralLedger_CN))
    ]
    public TmpGeneralLedger_CN getTmpGeneralLedger()
    {
        return tmpGeneralLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpGeneralLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates data got from query and inserts the results into the TmpGeneralLedger_CN table.
    /// </summary>
    /// <param name="_prePrint">
    /// Identifies if the report is being printed on the pre-print paper.
    /// </param>
    public void initTmpGeneralLedger(boolean _prePrint)
    {
        TmpGeneralLedger_CN         tmpGeneralLedgerLocal;
        QueryRun                    queryRun;
        boolean                     changeAccount;
        boolean                     changePage;

        NoYes                       printDefaultCurrency;

        LedgerAccount               lastTmpLedgerAccount;
        MainAccountNum              lastTmpMainAccountId;
        LedgerDimensionAccount      lastTmpLedgerDimension;
        AccountName                 lastTmpAccountName;

        LedgerInquiryGeneral_CN     ledgerInquiryGeneral;

        //Counts the records of the current page.
        Counter recOfCurrentPage;

        //Defines the page number of the current page.
        Counter pageBreakCounter;

        const int FirstPageNumber   = 1;
        const int PageCounterZero   = 0;
        const int PageCounterTwo    = 2;

        changeAccount   = false;
        changePage      = false;

        queryRun = new QueryRun(ledgerGeneralLedger);

        //Get tmp table data.
        ledgerInquiryGeneral = new LedgerInquiryGeneral_CN(queryRun, dimensionExpressionList);
        ledgerInquiryGeneral.parmFiscalPeriodNameAndYearName(periodName, yearName);

        ledgerInquiryGeneral.createPeriodBalances();
        tmpGeneralLedgerLocal.linkPhysicalTableInstance(ledgerInquiryGeneral.periodBalances());

        //Sets pageBreakCounter to 1 as the default starting number.
        pageBreakCounter = FirstPageNumber;

        if ((!_prePrint && ledgerPrintCurrency == LedgerPrintLayoutCurrency_CN::DefaultCurrency)
            || (_prePrint && ledgerPrePrintCode == LedgerPreprint_CN::TR201))
        {
            printDefaultCurrency = NoYes::Yes;
        }
        else
        {
            printDefaultCurrency = NoYes::No;
        }
        //When user choose to print the default currency records, then records under foreign currency will not be printed.
        while select tmpGeneralLedgerLocal
            order by tmpGeneralLedgerLocal.LedgerAccount
            where tmpGeneralLedgerLocal.isPrimary == NoYes::Yes || tmpGeneralLedgerLocal.isPrimary == printDefaultCurrency
        {
            //If users chose to print the report without foreign currency records, the records in the tmpLocal table
            //would not be inserted to the tmp table for show.
            if (tmpGeneralLedger.LedgerAccount)
            {
                changeAccount = (tmpGeneralLedger.LedgerAccount != tmpGeneralLedgerLocal.LedgerAccount);
            }
            changePage = (recOfCurrentPage == lineOfOnePage);

            //When the number of records of current page reaches the maximum line number
            //or the AccountNum value of local table changes.
            if (changeAccount || changePage)
            {
                if (changeAccount && changePage)
                {
                    // If mainAccountId and page are changed at the same time, reset the recOfCurrentPage to 0.
                    recOfCurrentPage = PageCounterZero;
                }
                else if (changeAccount)
                {
                    // If mainAccountId is changed, reset the recOfCurrentPage to 0 after inserting blank records.
                    this.processChangeAccount(recOfCurrentPage);
                    recOfCurrentPage = PageCounterZero;
                }
                else
                {
                    // If page is changed, reset the recOfCurrentPage to 2 after modifying the previous tmp table records.
                    this.processChangePage();
                    recOfCurrentPage = PageCounterTwo;
                }
                pageBreakCounter++;
            }

            tmpGeneralLedger.clear();
            this.insertDataIntoTmpTable(tmpGeneralLedgerLocal, pageBreakCounter);
            tmpGeneralLedger.insert();

            recOfCurrentPage++;
        }
        lastTmpLedgerAccount    = tmpGeneralLedger.LedgerAccount;
        lastTmpLedgerDimension  = tmpGeneralLedger.LedgerDimension;
        lastTmpMainAccountId    = tmpGeneralLedger.AccountNum;
        lastTmpAccountName      = tmpGeneralLedger.AccountName;

        //When the current page of report is not full, insert blank records into the tmptable
        while (!_prePrint && (recOfCurrentPage < lineOfOnePage))
        {
            tmpGeneralLedger.clear();
            tmpGeneralLedger.AccountNum         = lastTmpMainAccountId;
            tmpGeneralLedger.LedgerAccount      = lastTmpLedgerAccount;
            tmpGeneralLedger.LedgerDimension    = lastTmpLedgerDimension;
            tmpGeneralLedger.AccountName        = lastTmpAccountName;
            tmpGeneralLedger.PageBreakCounter   = pageBreakCounter;
            tmpGeneralLedger.SortInGroup        = BottomLine;
            tmpGeneralLedger.insert();

            recOfCurrentPage++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDataIntoTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the <c>LedgerGeneralLedgerDP_CN</c> temporary table.
    /// </summary>
    /// <param name="_tmpGeneralLedgerLocal">
    /// The local general ledger temporary table.
    /// </param>
    /// <param name="_pageBreakCounter">
    /// The page break counter.
    /// </param>
    public void insertDataIntoTmpTable(
        TmpGeneralLedger_CN _tmpGeneralLedgerLocal,
        Counter _pageBreakCounter)
    {
        tmpGeneralLedger.AccountName        = _tmpGeneralLedgerLocal.AccountName;
        tmpGeneralLedger.AccountNum         = _tmpGeneralLedgerLocal.AccountNum;
        tmpGeneralLedger.LedgerDimension    = _tmpGeneralLedgerLocal.LedgerDimension;
        tmpGeneralLedger.LedgerAccount      = _tmpGeneralLedgerLocal.LedgerAccount;
        tmpGeneralLedger.AmountCurCredit    = _tmpGeneralLedgerLocal.AmountCurCredit;
        tmpGeneralLedger.AmountCurDebit     = _tmpGeneralLedgerLocal.AmountCurDebit;
        tmpGeneralLedger.AmountMSTCredit    = _tmpGeneralLedgerLocal.AmountMSTCredit;
        tmpGeneralLedger.AmountMSTDebit     = _tmpGeneralLedgerLocal.AmountMSTDebit;
        tmpGeneralLedger.Balance            = _tmpGeneralLedgerLocal.Balance;
        tmpGeneralLedger.BalanceCur         = _tmpGeneralLedgerLocal.BalanceCur;
        tmpGeneralLedger.BalanceStatus      = _tmpGeneralLedgerLocal.BalanceStatus;
        tmpGeneralLedger.CurrencyCode       = _tmpGeneralLedgerLocal.CurrencyCode;
        tmpGeneralLedger.ExchRate           = _tmpGeneralLedgerLocal.ExchRate;
        tmpGeneralLedger.Explanation        = _tmpGeneralLedgerLocal.Explanation;
        tmpGeneralLedger.isPrimary          = _tmpGeneralLedgerLocal.isPrimary;
        tmpGeneralLedger.PeriodCode         = _tmpGeneralLedgerLocal.PeriodCode;
        tmpGeneralLedger.PageBreakCounter   = _pageBreakCounter;
        tmpGeneralLedger.SortInGroup        = MiddleLine;
        tmpGeneralLedger.TransDate          = _tmpGeneralLedgerLocal.TransDate;
        tmpGeneralLedger.TransMonth         = _tmpGeneralLedgerLocal.TransMonth;
        tmpGeneralLedger.TransYear          = _tmpGeneralLedgerLocal.TransYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processChangeAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the tmp table when changing mainAccounts.
    /// </summary>
    /// <param name="_recOfCurrentPage">
    /// The current number of the records in the last page.
    /// </param>
    protected void processChangeAccount(Counter _recOfCurrentPage)
    {
        //Saves the tmpGeneralLedger record.
        TmpGeneralLedger_CN tmpGeneralLedgerLocal;

        tmpGeneralLedgerLocal.data(tmpGeneralLedger);

        while (_recOfCurrentPage < lineOfOnePage)
        {
            tmpGeneralLedger.clear();
            tmpGeneralLedger.AccountNum         = tmpGeneralLedgerLocal.AccountNum;
            tmpGeneralLedger.LedgerAccount      = tmpGeneralLedgerLocal.LedgerAccount;
            tmpGeneralLedger.LedgerDimension    = tmpGeneralLedgerLocal.LedgerDimension;
            tmpGeneralLedger.AccountName        = tmpGeneralLedgerLocal.AccountName;
            tmpGeneralLedger.PageBreakCounter   = tmpGeneralLedgerLocal.PageBreakCounter;
            tmpGeneralLedger.SortInGroup        = BottomLine;
            tmpGeneralLedger.insert();

            _recOfCurrentPage++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processChangePage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the tmp table when changing pages.
    /// </summary>
    protected void processChangePage()
    {
        TmpGeneralLedger_CN tmpGeneralLedgerLocal;
        Counter             nextPageBreakCounter;

        tmpGeneralLedgerLocal.data(tmpGeneralLedger);
        nextPageBreakCounter = tmpGeneralLedgerLocal.PageBreakCounter + 1;

        // Delete the last tmp table record.
        tmpGeneralLedger.delete();

        tmpGeneralLedger.clear();
        // Continued on the next page.
        tmpGeneralLedger.Explanation        = SysLabel::labelId2String2(literalstr("@GLS54675"));
        tmpGeneralLedger.SortInGroup        = BottomLine;
        tmpGeneralLedger.AccountNum         = tmpGeneralLedgerLocal.AccountNum;
        tmpGeneralLedger.LedgerAccount      = tmpGeneralLedgerLocal.LedgerAccount;
        tmpGeneralLedger.LedgerDimension    = tmpGeneralLedgerLocal.LedgerDimension;
        tmpGeneralLedger.AccountName        = tmpGeneralLedgerLocal.AccountName;
        tmpGeneralLedger.PageBreakCounter   = tmpGeneralLedgerLocal.PageBreakCounter;
        tmpGeneralLedger.insert();

        tmpGeneralLedger.clear();
        // Continued from the previous page.
        tmpGeneralLedger.Explanation        = SysLabel::labelId2String2(literalstr("@GLS54673"));
        tmpGeneralLedger.SortInGroup        = FirstLine;
        tmpGeneralLedger.AccountNum         = tmpGeneralLedgerLocal.AccountNum;
        tmpGeneralLedger.LedgerAccount      = tmpGeneralLedgerLocal.LedgerAccount;
        tmpGeneralLedger.LedgerDimension    = tmpGeneralLedgerLocal.LedgerDimension;
        tmpGeneralLedger.AccountName        = tmpGeneralLedgerLocal.AccountName;
        tmpGeneralLedger.PageBreakCounter   = nextPageBreakCounter;
        tmpGeneralLedger.insert();

        tmpGeneralLedger.clear();
        tmpGeneralLedger.data(tmpGeneralLedgerLocal);
        tmpGeneralLedger.PageBreakCounter = nextPageBreakCounter;
        tmpGeneralLedger.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the business logic of the SQL Server Reporting Services report.
    /// </summary>
    /// <remarks>
    /// This method will be called by SSRS at run time. The method will compute the data and populate the
    /// data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        LedgerGeneralLedgerContract_CN contract;

        contract = this.parmDataContract() as LedgerGeneralLedgerContract_CN;

        if (contract.parmPreprint())
        {
            ledgerPrePrintCode  = contract.parmLedgerPreprintLayoutCode();
            lineOfOnePage       = DefaultMaxLines;
        }
        else
        {
            ledgerPrintCurrency = contract.parmLedgerPrintLayoutCurrency();
            lineOfOnePage       = contract.parmMaxLines();
        }

        fromMainAccount                 = contract.parmFromMainAccountNum();
        toMainAccount                   = contract.parmToMainAccountNum();
        periodName                      = contract.parmPeriodContract().parmPeriodName();
        yearName                        = contract.parmPeriodContract().parmPeriodYearName();

        dimensionExpressionList = LedgerDimensionExpressionBuilderHelper_CN::stringList2ExpressionList(contract.parmDimensionExpressionList());

        ledgerGeneralLedger = new Query(queryStr(LedgerGeneralLedger_CN));

        SysQuery::findOrCreateRange(
            ledgerGeneralLedger.dataSourceTable(tableNum(MainAccount)),
            fieldNum(MainAccount, MainAccountId)).value(queryRange(fromMainAccount, toMainAccount));
        SysQuery::findOrCreateRange(
            ledgerGeneralLedger.dataSourceTable(tableNum(MainAccount)),
            fieldNum(MainAccount, LedgerChartOfAccounts)).value(queryValue(LedgerChartOfAccounts::current()));

        this.initTmpGeneralLedger(contract.parmPreprint());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>