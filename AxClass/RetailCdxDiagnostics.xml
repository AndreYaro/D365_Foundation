<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCdxDiagnostics</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class <c>RetailCdxDiagnostics</c> is responsible for generating the diagnostics tables logs.
/// </summary>
public class RetailCdxDiagnostics
{
    RetailCdxDataPackageWriter packageWriter;
    RetailCdxDataFileWriter fileWriter;
    container cdxLogTables;
    container cdxRowCountTables;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the class with the specified arguments.
    /// </summary>
    /// <param name = "_args">The specified arguments input for this class.</param>
    public static void main(Args _args)
    {
        RetailCdxDiagnostics diagnostics = new RetailCdxDiagnostics();
        diagnostics.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDiagnosticsTableNameContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates log table name containers.
    /// </summary>
    private void createDiagnosticsTableNameContainer()
    {
        // Add tables for getting log records.
        cdxLogTables += tableStr(RetailConnDatabaseProfile);
        cdxLogTables += tableStr(RetailCDXDataGroup);
        cdxLogTables += tableStr(RetailChannelTable);
        cdxLogTables += tableStr(RetailStoreTable);
        cdxLogTables += tableStr(RetailConnChannelSchema);
        cdxLogTables += tableStr(RetailConnSchedulerJobLine);
        cdxLogTables += tableStr(RetailConnSchedulerJobTable);
        cdxLogTables += tableStr(RetailConnSchedulerSubjobTable);
        cdxLogTables += tableStr(RetailCDXChangeTrackingSQL);
        cdxLogTables += tableStr(RetailCDXDataStoreChannel);
        cdxLogTables += tableStr(RetailCDXDataStoreHeartbeatLog);
        cdxLogTables += tableStr(RetailCDXDownloadSession);
        cdxLogTables += tableStr(RetailCDXDownloadSessionDataStore);
        cdxLogTables += tableStr(RetailCDXScheduleDataGroup);
        cdxLogTables += tableStr(RetailCDXUploadSession);
        cdxLogTables += tableStr(RetailCDXUploadSessionLog);
        cdxLogTables += tableStr(RetailTransactionServiceProfile);
        cdxLogTables += tableStr(RetailConnParameters);
        cdxLogTables += tableStr(RetailConnSchedule);
        cdxLogTables += tableStr(UserInfo);
        cdxLogTables += tableStr(SecurityRole);
        cdxLogTables += tableStr(RetailDevice);
        cdxLogTables += tableStr(RetailTerminalTable);

        // Add tables for getting row count.
        cdxRowCountTables += tableStr(CustTable);
        cdxRowCountTables += tableStr(InventTable);
        cdxRowCountTables += tableStr(DirPartyTable);
        cdxRowCountTables += tableStr(RetailAssortmentTable);
        cdxRowCountTables += tableStr(RetailAssortmentLookupChannelGroup);
        cdxRowCountTables += tableStr(RetailAssortmentLookup);
        cdxRowCountTables += tableStr(EcoResProduct);
        cdxRowCountTables += tableStr(EcoResProductCategory);
        cdxRowCountTables += tableStr(RetailPeriodicDiscount);
        cdxRowCountTables += tableStr(RetailDiscountMixAndMatch);
        cdxRowCountTables += tableStr(RetailPeriodicDiscountLine);
        cdxRowCountTables += tableStr(RetailPriceDiscAdmTable);
        cdxRowCountTables += tableStr(RetailStaffTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes this class.
    /// </summary>
    /// <returns>Returns a value which determines if the class initialization was successful.</returns>
    private boolean initialize()
    {
        packageWriter = new RetailCdxDataPackageWriter();

        // Get related tables required for CDX data.
        this.createDiagnosticsTableNameContainer();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs this class.
    /// </summary>
    private void run()
    {
        // Begin writing CDX diagnostics file.
        if (this.initialize())
        {
            try
            {
                packageWriter.beginSession();

                this.createCSVFiles(false, cdxLogTables);
                this.createCSVFiles(true, cdxRowCountTables);

                // send back the file
                packageWriter.endSession();
                packageWriter.sendFileToUser();
            }
            finally
            {
                if (packageWriter)
                {
                    packageWriter.cleanUp();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCSVFiles</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates csv files for diagnostics tables.
    /// </summary>
    /// <param name = "returnRowCountTableLog">A value that determines if table records are required or only row counts of the tables. </param>
    /// <param name = "tableNameContainer">Table name containers.</param>
    private void createCSVFiles(boolean returnRowCountTableLog, container tableNameContainer)
    {
        // Begin writing CDX log files.
        int cdxTablesCount = conlen(tableNameContainer);
        for (int i = 1; i <= cdxTablesCount; i++)
        {
            try
            {
                str tableName = conPeek(tableNameContainer, i);
                fileWriter = packageWriter.constructDataFileWriter(tableName);
                if (returnRowCountTableLog)
                {
                    this.writeRowCountFile(tableName);
                }
                else
                {
                    this.writeLogFile(tableName);
                }

                packageWriter.addDataFile(fileWriter);
            }
            finally
            {
                if (fileWriter)
                {
                    fileWriter.cleanUp();
                    fileWriter = null;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeLogFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes csv log file with table records.
    /// </summary>
    /// <param name = "tableName">The table name for which records should be returned.</param>
    private void writeLogFile(str tableName)
    {
        // Begin writing CDX log file per table. This csv file will contain all records from the table.
        SysDictTable    dictTable;
        SysDictField    dictField;
        FieldId         fieldId;
        Common          buffer;

        dictTable = new SysDictTable(tableName2id(tableName));
        fieldId = dictTable.fieldNext(0);
        while (fieldId)
        {
            dictField = dictTable.fieldObject(fieldId);
            fileWriter.addColumn(dictField.name());
            fieldId = dictTable.fieldNext(fieldId);
        }

        buffer = dictTable.makeRecord();

        while select * from buffer
        {
            fileWriter.writeRecord(buffer);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeRowCountFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes csv log file with row count.
    /// </summary>
    /// <param name = "tableName">The table name for which row count number should be returned.</param>
    private void writeRowCountFile(str tableName)
    {
        // Begin writing CDX row count file per table. This csv file will contain the row count from the table.
        SysDictTable    dictTable;
        SysDictField    dictField;
        FieldId         fieldId;
        Common          buffer;
        boolean         isGlobalTable;

        isGlobalTable = RetailConnReplicationUtilities::isGlobalTable(tableName);
        dictTable = new SysDictTable(tableName2id(tableName));
        fileWriter.addColumn(extendedTypeId2name(extendedTypeNum(RecId)));

        if (!isGlobalTable)
        {
            fileWriter.addColumn(extendedTypeId2name(extendedTypeNum(DataAreaId)));
        }

        buffer = dictTable.makeRecord();

        if (!isGlobalTable)
        {
            while select crosscompany DataAreaId, count(RecId)
            from buffer
            group by DataAreaId
            {
                fileWriter.writeRecord(buffer);
            }
        }
        else
        {
            while select count(RecId)
            from buffer
            {
                fileWriter.writeRecord(buffer);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>