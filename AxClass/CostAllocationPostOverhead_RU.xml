<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostAllocationPostOverhead_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CostAllocationPostOverhead_RU extends CostAllocationPost_RU
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustInvoice</Name>
				<Source><![CDATA[
    protected void adjustInvoice(MarkupTrans        _markupTrans,
                                 VendInvoiceTrans   _goalVendInvoiceTrans,
                                 VendInvoiceTrans   _sourceVendInvoiceTrans,
                                 DimensionDefault   _baseDimension)
    {
        ledgerVoucherObject.parmTrackTransactionAmountsByCurrency(true);

        InventAdjustPost inventAdjustPost = new InventAdjustPost(ledgerVoucherObject.parmVoucher(),
                                                                 ledgerVoucherObject.parmTransDate(),
                                                                 InventAdjustmentSpec::ItemNum,
                                                                 LedgerTransTxt::InventClosingAdjustment);

        inventAdjustPost.parmCurrencyCode(_sourceVendInvoiceTrans.CurrencyCode);

        InventTransAdjust inventTransAdjust = new InventTransAdjust(ledgerVoucherObject.parmTransDate(),
                                                                    ledgerVoucherObject.parmVoucher());
        inventTransAdjust.parmMarkupCode_RU(_markupTrans.MarkupCode);
        inventTransAdjust.parmVendAccountMarkup_RU(_sourceVendInvoiceTrans.vendInvoiceJour().OrderAccount);
        inventTransAdjust.parmVendInvoiceIdMarkup_RU(_sourceVendInvoiceTrans.InvoiceId);

        InventAdjustPostSecCur_RU inventAdjustPostSecCur = InventAdjustPost::newFromCurrency_RU(ledgerVoucherObject.parmVoucher(),
                                                                                                  ledgerVoucherObject.parmTransDate(),
                                                                                                  InventAdjustmentSpec::ItemNum,
                                                                                                  LedgerTransTxt::InventClosingAdjustment,
                                                                                                  InventTransCurrency_RU::SecondaryCur);

        InventTransAdjustSecCur_RU inventTransAdjustSecCur = InventTransAdjust::construct(ledgerVoucherObject.parmTransDate(),
                                                                                           ledgerVoucherObject.parmVoucher(),
                                                                                           false,
                                                                                           InventTransCurrency_RU::SecondaryCur);

        inventTransAdjustSecCur.parmMarkupCode_RU(_markupTrans.MarkupCode);
        inventTransAdjustSecCur.parmVendAccountMarkup_RU(_sourceVendInvoiceTrans.vendInvoiceJour().OrderAccount);
        inventTransAdjustSecCur.parmVendInvoiceIdMarkup_RU(_sourceVendInvoiceTrans.InvoiceId);

        InventTransOriginId inventTransOriginId = InventTransOrigin::findByInventTransId(_goalVendInvoiceTrans.InventTransId).RecId;
        Qty qty = InventTransInvoice::qtyPurchased(inventTransOriginId, _goalVendInvoiceTrans.InvoiceId, _goalVendInvoiceTrans.InventDate);
        InventAdjustAllocate inventAdjustAllocate = new InventAdjustAllocate(qty, _markupTrans.Value);

        boolean isAnySecCurAdjustment = false;

        TmpRecIdFilter inventTransRecIdFilter;
        RecordInsertList inventTransRecIdFilterList;

        inventTransRecIdFilterList = new RecordInsertList(tableNum(TmpRecIdFilter), false, false, false, false, false, inventTransRecIdFilter);

        InventTrans inventTrans;

        while select forupdate inventTrans
            where inventTrans.InventTransOrigin     == inventTransOriginId
               && inventTrans.DateFinancial         == _goalVendInvoiceTrans.InvoiceDate
               && inventTrans.InvoiceId             == _goalVendInvoiceTrans.InvoiceId
               && inventTrans.StatusReceipt         == StatusReceipt::Purchased
               && inventTrans.StatusIssue           == StatusIssue::None
               && inventTrans.PackingSlipReturned   == 0
        {
            CostAmount adjustCostAmountCur = inventAdjustAllocate.calcAdjustment(inventTrans, _sourceVendInvoiceTrans.CurrencyCode);
            CostAmount adjustCostAmountMST = CurrencyExchangeHelper::mstAmount(adjustCostAmountCur, _sourceVendInvoiceTrans.CurrencyCode, ledgerVoucherObject.parmTransDate());

            inventTransAdjust.updateNow(inventTrans,
                                        NoYes::No,
                                        NoYes::No,
                                        adjustCostAmountMST,
                                        true,
                                        _markupTrans.markupTable().CustPosting,
                                        LedgerDimensionFacade::serviceCreateLedgerDimension(_sourceVendInvoiceTrans.LedgerDimension, costAllocationBase.DefaultDimension),
                                        false,
                                        0,
                                        0,
                                        true,
                                        ledgerVoucher,
                                        InventAdjustmentSpec::ItemNum);

            if (inventTransAdjustSecCur && inventTrans.inventTable().modelGroup().PostOnhandFinancialSecCur_RU)
            {
                isAnySecCurAdjustment = true;

                inventTransAdjustSecCur.updateNow(inventTrans,
                                                  NoYes::No,
                                                  NoYes::No,
                                                  CurrencyExchangeHelper::curAmount2CurAmount(adjustCostAmountCur, _sourceVendInvoiceTrans.CurrencyCode, Ledger::reportingCurrency(), ledgerVoucherObject.parmTransDate()),
                                                  true,
                                                  _markupTrans.markupTable().CustPosting,
                                                  LedgerDimensionFacade::serviceCreateLedgerDimension(_sourceVendInvoiceTrans.LedgerDimension, costAllocationBase.DefaultDimension),
                                                  false,
                                                  0,
                                                  0,
                                                  false,
                                                  ledgerVoucher,
                                                  InventAdjustmentSpec::ItemNum);
            }

            inventTransRecIdFilter.RefRecId = inventTrans.RecId;
            inventTransRecIdFilterList.add(inventTransRecIdFilter);

            if (inventAdjustAllocate.isAllocated())
            {
                break;
            }
        }

        if (!inventAdjustAllocate.isAllocated())
        {
            throw error("@SYS15814");
        }

        inventTransRecIdFilterList.insertDatabase();

        select inventTransRecIdFilter;
        inventAdjustPost.setInventTransRecIdFilter_RU(inventTransRecIdFilter);

        inventAdjustPost.updateNow(ledgerVoucher);

        if (inventAdjustPostSecCur && isAnySecCurAdjustment)
        {
            select inventTransRecIdFilter;
            inventAdjustPostSecCur.setInventTransRecIdFilter_RU(inventTransRecIdFilter);

            inventAdjustPostSecCur.updateNow(ledgerVoucher);
        }

        this.postPurchaseInvoiceRoundOff(_goalVendInvoiceTrans, _baseDimension);

        ledgerVoucherObject.parmTrackTransactionAmountsByCurrency(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postPurchaseInvoiceRoundOff</Name>
				<Source><![CDATA[
    private void postPurchaseInvoiceRoundOff(VendInvoiceTrans _goalVendInvoiceTrans, DimensionDefault _baseDimension )
    {
        TmpLedgerBondLogTable_RU logTable;
        LedgerBondClient_RU ledgerBondClient = ledgerVoucherObject.ledgerBondClient_RU();
        CurrencyExchangeHelper currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), ledgerVoucherObject.parmAccountingDate());

        TransactionTxt transactionTxt = TransactionTxt::construct();
        transactionTxt.setType(LedgerTransTxt::VendRoundOff);
        transactionTxt.setVoucher(ledgerVoucherObject.parmVoucher());
        transactionTxt.setFormLetter(_goalVendInvoiceTrans.InvoiceId);
        transactionTxt.setKey1(_goalVendInvoiceTrans.PurchID);
        transactionTxt.setKey2(_goalVendInvoiceTrans.vendInvoiceJour().InvoiceAccount);
        transactionTxt.setKey3(VendTable::groupId(_goalVendInvoiceTrans.vendInvoiceJour().InvoiceAccount));

        Map transactionAmountsByCurrency = ledgerVoucherObject.getTransactionAmountsByCurrency();
        MapEnumerator enumerator = transactionAmountsByCurrency.getEnumerator();
        while (enumerator.moveNext())
        {
            Amount currencyAmount = enumerator.currentValue();

            LedgerVoucherTransObject ledgerPostingTransaction = LedgerVoucherTransObject::newTransactionAmountDefault(
                ledgerVoucherObject,
                LedgerPostingType::PurchaseInvoiceRoundOff,
                LedgerDimensionFacade::serviceCreateLedgerDimension(LedgerSystemAccounts::getDefaultAccount(LedgerPostingType::PurchaseInvoiceRoundOff), _baseDimension),
                enumerator.currentKey(), // currencyCode
                -currencyAmount,
                currencyExchangeHelper);

            ledgerPostingTransaction.parmText(transactionTxt.txt());

            ledgerVoucherObject.addTrans(ledgerPostingTransaction);

            if (ledgerBondClient && currencyAmount)
            {
                if (!logTable)
                {
                    logTable = ledgerBondClient.log2Table(ledgerBondClient.currentLog());
                }

                ledgerVoucherObject.bond_afterPostCurrencyDiff_RU(currencyAmount, enumerator.currentKey(), ledgerPostingTransaction, logTable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventProfileCostAdjNotLocked</Name>
				<Source><![CDATA[
    public boolean checkInventProfileCostAdjNotLocked(VendInvoiceTrans _sourceVendInvoiceTrans)
    {
        if (_sourceVendInvoiceTrans.inventDim().inventProfile_RU().LockCostAdjustment == NoYes::Yes)
        {
            return checkFailed("@GLS115689");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>distributeProportionally</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Distribuites amount proportionally to distribution
    /// </summary>
    /// <param name="_accountingEvent">
    /// The <c>AccountingEvent</c> table record <c>RecId</c> value
    /// </param>
    /// <param name="_sourceDocumentLine">
    /// The <c>SourceDocumentLine</c> table record
    /// </param>
    /// <param name="_amount">
    ///  amount to distribute
    /// </param>
    /// <param name="_currencyCode">
    ///  Code of currency to round values and for the general journal entry.
    /// </param>
    /// <param name="_exchangeRateHelper">
    /// The accounting currency amount and reporting currency amount exchange rates.
    /// </param>
    /// <param name="_debit">
    /// Sign of GL trans. Depends on source of distribution (sourceVendInvoiceTrans = -1 or goalVendInvoiceTrans = 1).
    /// </param>
    /// <remarks>
    ///   rounding error is added to the last element
    /// </remarks>
    private void distributeProportionally(RefRecId                 _accountingEvent,
                                          SourceDocumentLine       _sourceDocumentLine,
                                          Amount                   _amount,
                                          CurrencyCode             _currencyCode,
                                          CurrencyExchangeHelper   _exchangeRateHelper,
                                          Sign                     _debit)
    {
        Amount                         restAmount              = _amount;
        container                      distribution            = this.loadDistribution(_accountingEvent, _sourceDocumentLine.RecId);
        SourceDocumentAmountMap        sourceDocumentAmountMap = SourceDocumentLineProvider::getDistributedAmountMap(_sourceDocumentLine);
        int                            i;
        LedgerDimensionAccount         ledgerDimension;
        Amount                         distrAmount;
        Amount                         transactionAmount;
        MonetaryAmount                 monetaryAmount;

        for (i=1; i<=conLen(distribution); i++)
        {
            [ledgerDimension, distrAmount, monetaryAmount] = conPeek(distribution, i);

            if (i == conLen(distribution))
            {
                transactionAmount = restAmount;
            }
            else
            {
                Amount distrAmountTotal = sourceDocumentAmountMap.getSourceDocumentAmount(monetaryAmount).parmAmount();
                transactionAmount = CurrencyExchangeHelper::amount(_amount * distrAmount / distrAmountTotal, _currencyCode);
            }

            AccountingDistributionRule accountingDistributionRule = AccountingDistributionRule::newRule(SourceDocumentLineItem::newFromSourceDocumentLine(_sourceDocumentLine),
                                                                                                        monetaryAmount);

            ledgerVoucher.addTrans(
                LedgerVoucherTransObject::newTransactionAmountDefault(
                                                    ledgerVoucherObject,
                                                    accountingDistributionRule.parmLedgerPostingType(),
                                                    ledgerDimension,
                                                    _currencyCode,
                                                    _debit * sign * transactionAmount,
                                                    _exchangeRateHelper));

            restAmount -= transactionAmount;
        }

        Debug::assert(restAmount == 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postNotStockedProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Post for non stocked source.
    /// </summary>
    /// <param name="_amount">
    ///  Amount to post
    /// </param>
    /// <param name="_goalVendInvoiceTrans">
    ///  Vendor invoice lines - base of allocation.
    /// </param>
    /// <param name="_sourceVendInvoiceTrans">
    /// Vendor invoice lines - allocation.
    /// </param>
    /// <param name="_baseDimension">
    /// Dimensions from base line
    /// </param>
    protected void postNotStockedProduct(Amount             _amount,
                                         VendInvoiceTrans   _goalVendInvoiceTrans,
                                         VendInvoiceTrans   _sourceVendInvoiceTrans,
                                         DimensionDefault   _baseDimension)
    {
        LedgerBondClient_RU            ledgerBondClient    = ledgerVoucherObject.ledgerBondClient_RU();
        CurrencyExchangeHelper         currencyExchangeHelper;

        SourceDocumentLine             sourceDocumentLine;
        AccountingEvent                accountingEvent;
        boolean                        mustBeDistributed;

        void addTrans(Sign _debit, LedgerDimensionAccount  _ledgerDimension)
        {
            accountingEvent   = AccountingDistribution::getLastSourceDocumentLineEvent(sourceDocumentLine.RecId);
            mustBeDistributed = AccountingDistribution::existEventAndSourceDocumentLine(accountingEvent.RecId, sourceDocumentLine.RecId);

            if (mustBeDistributed)
            {
                this.distributeProportionally(accountingEvent.RecId,
                                              sourceDocumentLine,
                                              _amount,
                                              _sourceVendInvoiceTrans.CurrencyCode,
                                              currencyExchangeHelper,
                                              _debit);
            }
            else
            {
                ledgerVoucher.addTrans(
                    LedgerVoucherTransObject::newTransactionAmountDefault(
                                                        ledgerVoucherObject,
                                                        LedgerPostingType::PurchExpense,
                                                        _ledgerDimension,
                                                        _sourceVendInvoiceTrans.CurrencyCode,
                                                        _debit * sign * _amount,
                                                        currencyExchangeHelper));
            }
        }

        currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), ledgerVoucherObject.parmAccountingDate());

        sourceDocumentLine = SourceDocumentLine::find(_goalVendInvoiceTrans.SourceDocumentLine);
        LedgerDimensionDefaultAccount goalLedgerDimensionDefAcc = _goalVendInvoiceTrans.ledgerDimensionItem(InventAccountType::PurchExpense);

        addTrans(1, LedgerDimensionFacade::serviceCreateLedgerDimension(goalLedgerDimensionDefAcc, _goalVendInvoiceTrans.DefaultDimension));

        sourceDocumentLine = SourceDocumentLine::find(_sourceVendInvoiceTrans.SourceDocumentLine);

        addTrans(-1, LedgerDimensionFacade::serviceCreateLedgerDimension(_sourceVendInvoiceTrans.LedgerDimension, _sourceVendInvoiceTrans.DefaultDimension));

        if (ledgerBondClient)
        {
            ledgerBondClient.bondLog2Log();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPost</Name>
				<Source><![CDATA[
    protected void runPost()
    {
        MarkupTrans markupTrans;
        VendInvoiceTrans goalVendInvoiceTrans;
        RecordInsertList costAllocationHistoryList;

        if (costAllocationForm.costAllocationProcessType() == CostAllocationProcessType_RU::Allocation)
        {
            costAllocationHistoryList = new RecordInsertList(tableNum(CostAllocationHistory_RU));
        }

        // make ledgerVoucher
        this.initLedgerVoucher(PurchParameters::numRefPurchMarkupVoucher(),
                               SysModule::Purch,
                               LedgerTransType::Purch,
                               costAllocationForm.postingDate());

        while select grCostAllocationResult
            group by grCostAllocationResult.AllocSourceRecId
            where grCostAllocationResult.Mark &&
                  grCostAllocationResult.Amount
        {
            this.generateParmId();

            VendInvoiceTrans sourceVendInvoiceTrans = VendInvoiceTrans::findRecId(grCostAllocationResult.AllocSourceRecId);

            // check purch book
            if (!this.checkFactureBookProcessingNotExists(sourceVendInvoiceTrans))
            {
                throw error("@SYS25904");
            }

            // make markupTrans
            while select costAllocationResult
                where costAllocationResult.AllocSourceRecId == grCostAllocationResult.AllocSourceRecId &&
                      costAllocationResult.Mark             == NoYes::Yes &&
                      costAllocationResult.Amount
                join costAllocationBase
                    where costAllocationBase.RecId          == costAllocationResult.AllocBaseRecId
                    join goalVendInvoiceTrans
                        where goalVendInvoiceTrans.RecId    == costAllocationBase.GoalTransRecId
            {
                // check invent profile
                if (!this.checkInventProfileCostAdjNotLocked(goalVendInvoiceTrans))
                {
                    throw error("@SYS25904");
                }

                if (costAllocationBase.StockedProduct)
                {
                    if (sourceVendInvoiceTrans.isNonPO())
                    {
                        VendInvoiceInfoLine vendInvoiceInfoLine = VendInvoiceInfoLine::findSourceDocumentLine(sourceVendInvoiceTrans.SourceDocumentLine);

                        if (vendInvoiceInfoLine)
                        {
                            VendorInvoiceSourceDocLineItem vendorInvoiceSourceDocLineItem = SourceDocumentLineItem::newFromSourceDocumentLineImplementation(vendInvoiceInfoLine);
                            sourceVendInvoiceTrans.LedgerDimension = vendorInvoiceSourceDocLineItem.parmLedgerDimensionDefaultAccount();
                        }
                    }
                    else if (!sourceVendInvoiceTrans.LedgerDimension)
                    {
                        PurchLine purchLine = PurchLine::findInventTransId(sourceVendInvoiceTrans.InventTransId);

                        if (purchLine)
                        {
                            PurchOrderLineSourceDocumentLineItem purchOrderLineSourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLineImplementation(purchLine);
                            sourceVendInvoiceTrans.LedgerDimension = purchOrderLineSourceDocumentLineItem.parmLedgerDimensionDefaultAccount();
                        }
                    }
                }

                boolean checkSourceVendInvoiceLedgerAccount = costAllocationBase.StockedProduct;

                if (!checkSourceVendInvoiceLedgerAccount)
                {
                    AccountingEvent accountingEvent = AccountingDistribution::getLastSourceDocumentLineEvent(sourceVendInvoiceTrans.SourceDocumentLine);
                    boolean mustBeDistributed = AccountingDistribution::existEventAndSourceDocumentLine(accountingEvent.RecId, sourceVendInvoiceTrans.SourceDocumentLine);

                    checkSourceVendInvoiceLedgerAccount = !mustBeDistributed;
                }

                if (checkSourceVendInvoiceLedgerAccount)
                {
                    this.checkSourceVendInvoiceLedgerAccount(sourceVendInvoiceTrans);
                }

                markupTrans.clear();
                markupTrans.initFromVendInvoiceTrans(goalVendInvoiceTrans);
                markupTrans.LineNum          = MarkupTrans::lastLineNum(markupTrans.TransTableId, markupTrans.TransRecId) + 1;
                markupTrans.ModuleCategory   = HeadingLine::Heading;
                markupTrans.MarkupCode       = costAllocationResult.MarkupCode;
                markupTrans.initFromMarkupTable(markupTrans.markupTable());
                markupTrans.Value            = sign * costAllocationResult.Amount;
                markupTrans.Voucher          = ledgerVoucherObject.parmVoucher();
                markupTrans.Keep             = NoYes::Yes;
                markupTrans.TransDate        = costAllocationForm.postingDate();
                markupTrans.CurrencyCode     = sourceVendInvoiceTrans.CurrencyCode;

                AmountCur postAmount = Markup::calcMarkupAmount(markupTrans,
                                                            goalVendInvoiceTrans.Qty,
                                                            goalVendInvoiceTrans.LineAmount,
                                                            0,
                                                            false,
                                                            NoYes::No,
                                                            markupTrans.CurrencyCode,
                                                            markupTrans.TransDate,
                                                            0,
                                                            0,
                                                            null,
                                                            true);

                markupTrans.CalculatedAmount = markupTrans.signedValue(postAmount);
                markupTrans.Posted           = markupTrans.ledgerAccountAmount(postAmount);
                markupTrans.CalculatedAmountMST_W = CurrencyExchangeHelper::mstAmount(markupTrans.CalculatedAmount, markupTrans.CurrencyCode, markupTrans.TransDate);
                markupTrans.insert();

                // create history
                costAllocationHistory.clear();
                costAllocationHistory.AllocationType                = costAllocationForm.parmAllocationType().selection();
                costAllocationHistory.CostAllocationParmId          = costAllocationParmId;
                costAllocationHistory.GoalVendInvoiceTransRecId     = goalVendInvoiceTrans.RecId;
                costAllocationHistory.AllocatedInvoiceTransRecId    = costAllocationResult.AllocSourceRecId;
                costAllocationHistory.AllocatedInvoiceJourRecId     = sourceVendInvoiceTrans.vendInvoiceJour().RecId;
                costAllocationHistory.DefaultDimension              = costAllocationBase.DefaultDimension;
                costAllocationHistory.VoucherInvoice                = costAllocationVoucher;
                costAllocationHistory.TransDate                     = costAllocationForm.postingDate();
                costAllocationHistory.MarkupCode                    = markupTrans.MarkupCode;
                costAllocationHistory.CurrencyCode                  = sourceVendInvoiceTrans.CurrencyCode;
                costAllocationHistory.AmountPosted                  = sign * costAllocationResult.Amount;

                if (costAllocationForm.costAllocationProcessType() == CostAllocationProcessType_RU::Cancel)
                {
                    costAllocationHistory.insert();
                    costAllocationHistory.updateForStornoHistory(costAllocationResult.HistoryAllocRecId);
                    setOrigReverseHistory.add([costAllocationResult.HistoryAllocRecId, costAllocationHistory.RecId]);
                }
                else
                {
                    costAllocationHistoryList.add(costAllocationHistory);
                }

                if (costAllocationBase.StockedProduct)
                {
                    // make correction
                    this.adjustInvoice(markupTrans, goalVendInvoiceTrans, sourceVendInvoiceTrans, costAllocationBase.DefaultDimension);
                }
                else
                {
                    // make GL trans for not stocked product
                    this.postNotStockedProduct(costAllocationResult.Amount, goalVendInvoiceTrans, sourceVendInvoiceTrans, costAllocationBase.DefaultDimension);
                }
            }
        }

        if (costAllocationHistoryList)
        {
            costAllocationHistoryList.insertDatabase();
        }

        ledgerVoucher.end();

        this.createTransLink();

        this.runEndActions();

        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00047,funcName());

        info("@GLS114531");
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>