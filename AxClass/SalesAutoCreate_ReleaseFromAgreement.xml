<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesAutoCreate_ReleaseFromAgreement</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReleaseFromAgreement</c> class allows a release sales order to be automatically created from
/// a sales agreement.
/// </summary>
/// <remarks>
/// This class extends the <c>SalesAutoCreate</c> class.
/// </remarks>
class SalesAutoCreate_ReleaseFromAgreement extends SalesAutoCreate
{
    SalesCreateReleaseOrderLineTmp     releaseOrderLine;
    SalesCreateReleaseOrderTableTmp    releaseOrderTable;
    SalesAgreementHeader               createFromSalesAgreement;
    AgreementLineQuantityCommitment    createFromAgreementLine;
    SalesId                            currentSalesId;
    boolean                            firstRecord;
    // <GEERU>
    #ISOCountryRegionCodes
    boolean                            countryRegion_RU;
    SalesAgreementHeaderExt_RU         createFromSalesAgreementExt;
    private SalesInstrumentationLogger instrumentationLogger;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes creation of a sales release order and lines.
    /// </summary>
    public void create()
    {
        try
        {
            super();

            // Report success..
            info(strFmt("@SYS134769", salesTable.SalesId),'',SysInfoAction_TableField::newBuffer(salesTable));

            this.postCreateValidation();
        }
        catch (Exception::Error)
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAgreementLineReleaseLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the link <c>AgreementLineReleasedLine</c> record between a <c>SalesLine</c> record and a
    ///    <c>AgreementLine</c> record.
    /// </summary>
    protected void createAgreementLineReleaseLine()
    {
        AgreementLineReleasedLine agreementLineReleaseLine;

        agreementLineReleaseLine.initFromSalesLine(salesLine);
        agreementLineReleaseLine.initFromAgreementLine(createFromAgreementLine);
        agreementLineReleaseLine.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAgreementReleaseHeaderMatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the link <c>AgreementReleaseHeaderMatch</c> record  between a <c>SalesTable</c> record and
    ///    a <c>AgreementHeader</c> record.
    /// </summary>
    protected void createAgreementReleaseHeaderMatch()
    {
        AgreementReleaseHeaderMatch agreementReleaseHeaderMatch;

        agreementReleaseHeaderMatch.initFromSalesTable(salesTable);
        agreementReleaseHeaderMatch.initFromAgreementHeader(createFromSalesAgreement);
        agreementReleaseHeaderMatch.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a sales release line.
    /// </summary>
    /// <remarks>
    ///    This method also creates a link object to the agreement line from which release has been made.
    /// </remarks>
    public void createSalesLine()
    {
        if (!salesLine.checkItemId())
        {
            throw error("@SYS18447");
        }

        ttsbegin;

        this.initAndCreateSalesLine();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAndCreateSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes and creates sales release line.
    /// </summary>
    protected void initAndCreateSalesLine()
    {
        // <GIN>

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            SalesLine_IN salesLine_IN = salesLine.salesLine_IN();
            salesLine.packSalesLine_IN(salesLine_IN);
        }
        // </GIN>

        salesLine.createLine(NoYes::No,             // Validate
                             NoYes::No,             // initFromSalesTable
                             NoYes::No,             // initFromInventTable
                             NoYes::Yes             // calcInventQty
        );

        // Set link between SO and AgreementLine
        salesLine.MatchingAgreementLine = createFromAgreementLine.RecId;

        salesLine.write();

        // <GTE>
        if (TaxIntegrationUtils::isTaxInformationEnabled())
        {
            TransTaxInformationHelper::copyTransTaxInformation(
                AgreementLine::find(createFromAgreementLine.RecId),
                salesLine);
        }
        // </GTE>
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a sales release order header.
    /// </summary>
    public void createSalesTable()
    {
        AgreementHeaderDefault      agreementHeaderDefault      = AgreementHeaderDefault::findAgreementHeader(createFromSalesAgreement.RecId);
        SalesAgreementHeaderDefault salesAgreementHeaderDefault = SalesAgreementHeaderDefault::findSalesAgreementHeader(createFromSalesAgreement.RecId);

        this.initSalesTable(agreementHeaderDefault, salesAgreementHeaderDefault);

        super();
           
        TMSSalesTable::initFromTMSSalesAgreement(salesTable.SalesId, salesAgreementHeaderDefault.SalesAgreementHeader);
       
        this.createAgreementReleaseHeaderMatch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a sales release order header.
    /// </summary>
    /// <param name = "_agreementHeaderDefault">
    /// The default agreement header.
    /// </param>
    /// <param name = "_salesAgreementHeaderDefault">
    /// The default sales agreement header.
    /// </param>
    protected void initSalesTable(
        AgreementHeaderDefault      _agreementHeaderDefault,
        SalesAgreementHeaderDefault _salesAgreementHeaderDefault)
    {
        // <GEERU>
        // </GEERU>
        InventSiteId                inventSiteId = releaseOrderTable.InventSiteId;

        salesTable.CustAccount             = createFromSalesAgreement.CustAccount;
        salesTable.initFromCustTable();

        salesTable.MatchingAgreement       = createFromSalesAgreement.RecId;
        salesTable.LanguageId              = createFromSalesAgreement.Language;
        salesTable.CurrencyCode            = createFromSalesAgreement.Currency;

        if (_agreementHeaderDefault.DeliveryTerm)
        {
            salesTable.DlvTerm          = _agreementHeaderDefault.DeliveryTerm;
        }
        if (_agreementHeaderDefault.PaymentTerms)
        {
            salesTable.Payment          = _agreementHeaderDefault.PaymentTerms;
        }
        if (_agreementHeaderDefault.PaymentSchedule)
        {
            salesTable.PaymentSched     = _agreementHeaderDefault.PaymentSchedule;
        }
        if (_agreementHeaderDefault.CashDiscountCode)
        {
            salesTable.CashDisc         = _agreementHeaderDefault.CashDiscountCode;
        }
        if (_agreementHeaderDefault.MiscChargeGroup)
        {
            salesTable.MarkupGroup      = _agreementHeaderDefault.MiscChargeGroup;
        }
        if (_agreementHeaderDefault.Project)
        {
            salesTable.ProjId           = _agreementHeaderDefault.Project;
        }

        if (_salesAgreementHeaderDefault.CustomerInvoiceAccount)
        {
            salesTable.InvoiceAccount   = _salesAgreementHeaderDefault.CustomerInvoiceAccount;
        }
        if (_salesAgreementHeaderDefault.Campaign)
        {
            salesTable.SmmCampaignId    = _salesAgreementHeaderDefault.Campaign;
        }
        if (_salesAgreementHeaderDefault.SalesUnit)
        {
            salesTable.SalesUnitId      = _salesAgreementHeaderDefault.SalesUnit;
        }
        if (_salesAgreementHeaderDefault.SalesPool)
        {
            salesTable.SalesPoolId      = _salesAgreementHeaderDefault.SalesPool;
        }
        if (_salesAgreementHeaderDefault.WorkerSalesResponsible)
        {
            salesTable.WorkerSalesResponsible = _salesAgreementHeaderDefault.WorkerSalesResponsible;
        }
        if (_salesAgreementHeaderDefault.CommissionSalesGroup)
        {
            salesTable.SalesGroup       = _salesAgreementHeaderDefault.CommissionSalesGroup;
        }
        if (_salesAgreementHeaderDefault.CommissionCustomerGroup)
        {
            salesTable.CommissionGroup  = _salesAgreementHeaderDefault.CommissionCustomerGroup;
        }

        if (_salesAgreementHeaderDefault.FixedExchangeRate)
        {
            salesTable.FixedExchRate    = _salesAgreementHeaderDefault.FixedExchangeRate;
        }

        if (_salesAgreementHeaderDefault.ReportingCurrencyFixedExchRate)
        {
            salesTable.ReportingCurrencyFixedExchRate = _salesAgreementHeaderDefault.ReportingCurrencyFixedExchRate;
        }

        if (_salesAgreementHeaderDefault.CustomerMethodOfPayment)
        {
            salesTable.PaymMode         = _salesAgreementHeaderDefault.CustomerMethodOfPayment;
        }
        if (_salesAgreementHeaderDefault.CustomerPaymentSpec)
        {
            salesTable.PaymSpec         = _salesAgreementHeaderDefault.CustomerPaymentSpec;
        }

        salesTable.SalesId                 = currentSalesId;
        salesTable.SalesType               = this.salesType();
        salesTable.DocumentStatus          = DocumentStatus::None;
        salesTable.InterCompanyPurchId     = '';

        salesTable.ReceiptDateRequested    = releaseOrderTable.ReceiptDateRequested;
        salesTable.ShippingDateRequested   = releaseOrderTable.ShippingDateRequested;
        salesTable.DeliveryDateControlType = releaseOrderTable.DeliveryDateControlType;

        salesTable.DlvMode                 = releaseOrderTable.DlvMode;
        salesTable.setInventSiteId(inventSiteId);
        salesTable.InventLocationId        = releaseOrderTable.InventLocationId;

        salesTable.DeliveryName            = releaseOrderTable.DeliveryName;
        salesTable.DeliveryPostalAddress   = releaseOrderTable.DeliveryPostalAddress;

        salesTable.PurchOrderFormNum       = releaseOrderTable.PurcOrderFormNum;
        salesTable.CustomerRef             = releaseOrderTable.CustomerRef;
        salesTable.ContactPersonId         = releaseOrderTable.ContactPersonId;

        if (SalesAgreementReleaseOrderContactInfoUpdateFlight::instance().isEnabled())
        {
            salesTable.initFromContactInfo();
        }

        salesTable.AddressRefRecId         = releaseOrderTable.AddressRefRecId;
        salesTable.AddressRefTableId       = releaseOrderTable.AddressRefTableId;
        salesTable.setTaxGroup(TaxSales::custTaxGroup(salesTable.DlvTerm,  custTable.TaxGroup, salesTable.deliveryLocation()));

        if (salesTable.CustAccount != salesTable.InvoiceAccount)
        {
            salesTable.transferTaxDefaultsFromInvoiceAcc();
        }

        salesTable.DefaultDimension = salesTable.mergeDimension(createFromSalesAgreement.DefaultDimension, salesTable.DefaultDimension);

        // <GEERU>
        if (countryRegion_RU)
        {
            createFromSalesAgreementExt = SalesAgreementHeaderExt_RU::findBySalesAgreementHeader(createFromSalesAgreement.RecId);

            SalesTable_RU salesTableRU = salesTable.salesTable_RU();
            salesTableRU.AgreementHeaderExt_RU = createFromSalesAgreementExt.RecId;

            salesTable.DefaultDimension = salesTable.copyDimension(releaseOrderTable.DefaultDimension_RU);

            if (createFromSalesAgreementExt.InventProfileType || createFromSalesAgreementExt.InventProfileId)
            {
                salesTableRU.InventProfileType_RU = createFromSalesAgreementExt.InventProfileType;
                salesTableRU.InventProfileId_RU   = createFromSalesAgreementExt.InventProfileId;
            }

            if (createFromSalesAgreementExt.CustPostingProfile)
            {
                salesTable.PostingProfile = createFromSalesAgreementExt.CustPostingProfile;
            }

            salesTableRU.initInvoicePostingType_RU(createFromSalesAgreement.custTable(), createFromSalesAgreementExt);
            salesTable.packSalesTable_RU(salesTableRU);
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>custAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>CustAccount</c> values for a release sales order.
    /// </summary>
    /// <returns>
    ///    The <c>CustAccount</c> values associated with the sales agreement.
    /// </returns>
    public CustAccount custAccount()
    {
        return createFromSalesAgreement.CustAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finalizes creation of sales release order header and lines.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    Creation has failed.
    /// </exception>
    public void  endUpdate()
    {
        if (!salesTable)
        {
            throw Exception::Error;
        }

        //Total estimate for the order would be calculated on order save, if credit limit check is enabled for the company and direct delivery we need to re-read the buffer
        if (salestable.existDirectDelivery()
            && salesTable.custTable_CustAccount().shouldEstimateBeCalculated()
            && SalesTableRereadForUpdateEstimateFlight::instance().isEnabled())
        {
            salesTable.reread();
        }

        if (salesTable.setEstimate())
        {
            salesTable.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves to the first <c>SalesCreateReleaseOrderLineTmp</c> record which has SalesQty different than zero.
    /// </summary>
    protected void firstRecord()
    {
        select releaseOrderLine
            where releaseOrderLine.SalesQty != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InvoiceAccount</c> record associated with a release.
    /// </summary>
    /// <returns>
    ///    A <c>CustInvoiceAccount</c> record associated with the customer for a sales agreement and therefore
    ///    with the release order line.
    /// </returns>
    CustInvoiceAccount invoiceAccount()
    {
        return custTable.InvoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the  <c>SalesAutoCreate_ReleaseFromAgreement</c> class.
    /// </summary>
    /// <param name="_releaseOrderLine">
    ///    A <c>SalesCreateReleaseOrderLineTmp</c> buffer.
    /// </param>
    /// <param name="_callBackClass">
    ///    An instance of the call-back class.
    /// </param>
    /// <param name="_releaseOrderTable">
    ///    A <c>SalesCreateReleaseOrderTableTmp</c> buffer.
    /// </param>
    /// <remarks>
    ///    A protect constructor. This constructor is used by static construct method of this class.
    /// </remarks>
    protected void new(Common  _releaseOrderLine,
                       Object  _callBackClass     = null,
                       Common  _releaseOrderTable = null)
    {
        releaseOrderLine     = _releaseOrderLine  as SalesCreateReleaseOrderLineTmp;
        releaseOrderTable    = _releaseOrderTable as SalesCreateReleaseOrderTableTmp;
        this.firstRecord();

        createFromAgreementLine     = AgreementLineQuantityCommitment::find(releaseOrderLine.AgreementLineQuantityCommitment, false);
        createFromSalesAgreement    = SalesAgreementHeader::find(createFromAgreementLine.Agreement ? createFromAgreementLine.Agreement : releaseOrderTable.AgreementHeader);

        currentSalesId       = '';
        firstRecord          = true;

        super(_releaseOrderLine,_callBackClass);
        // <GEERU>
        countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>
        instrumentationLogger = SalesInstrumentationLogger::createLogger(classStr(SalesAutoCreate_ReleaseFromAgreement));
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves to the new <c>SalesCreateReleaseOrderTableTmp</c> record.
    /// </summary>
    public void nextRecord()
    {
        if (releaseOrderLine.RecId)
        {
            next releaseOrderLine;
        }

        if (releaseOrderLine.RecId)
        {
            createFromAgreementLine  = AgreementLineQuantityCommitment::find(releaseOrderLine.AgreementLineQuantityCommitment, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCreateValidation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the creation of the sales order.
    /// </summary>
    protected void postCreateValidation()
    {
        SalesLine   salesLineLocal;

        if (salesTable.SalesId)
        {
            while select salesLineLocal
                where salesLineLocal.SalesId == salesTable.SalesId
                   && salesLineLocal.StockedProduct
                   && salesLine.Reservation
            {
                salesLineLocal.createWarningIfNotReserved();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether current <c>SalesCreateReleaseOrderTableTmp</c> record exists.
    /// </summary>
    /// <returns>
    ///    true if record exists; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Decision is made by analyzing the record ID field.
    /// </remarks>
    public boolean recordExist()
    {
        return firstRecord || releaseOrderLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves sales type for the release line.
    /// </summary>
    /// <returns>
    ///    A <c>SalesType::Sales</c> value.
    /// </returns>
    public SalesType salesType()
    {
        return SalesType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCust</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the internal <c>CustTable</c> table according to the customer settings of the sales agreement.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    The required customer cannot be located in the <c>CustTable</c> table.
    /// </exception>
    public void setCust()
    {
        CustAccount agreementCustAccount = this.custAccount();

        if (agreementCustAccount)
        {
            custTable = CustTable::find(agreementCustAccount);
        }

        if (!custTable)
        {
            checkFailed(strFmt("@SYS16734", agreementCustAccount));
            throw error("@SYS23020");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the fields of the sales release line based on the current record of the
    ///    <c>SalesCreateReleaseOrderLineTmp</c> table and calls the <c>createSalesLine</c> method if the
    ///    <c>LineAmount</c> field is not 0.
    /// </summary>
    public void setSalesLine()
    {
        setPrefix(#PrefixField(releaseOrderLine, ItemId));

        super();

        if (!createFromAgreementLine.RecId)
        {
            return;
        }
        using (var activityContext = instrumentationLogger.salesOrderLineCreationActivities().createFromSalesAgreement())
        {
            salesLine.ItemId = createFromAgreementLine.ItemId;
            if (salesLine.ItemId)
            {
                salesLine.initFromInventTable(InventTable::find(salesLine.ItemId));
            }
            salesLine.initFromAgreementLine(createFromAgreementLine);
            salesLine.initFromSalesCreateReleaseOrderLineTmp(releaseOrderLine);
            salesLine.initFromCustExternalItemDescription();

            salesLine.LineAmount              = salesLine.calcLineAmount();

            if (EcoResProductVariantItemSalesTaxGroupFeature::isFeatureEnabled()
                && (!EcoResProductVariantItemSalesTaxGroupNoBRFlight::instance().isEnabled() || !(BrazilParameters::isEnabled() && salesLine.salesLine_BR().CFOPTable_BR)))
            {
                salesLine.TaxItemGroup = InventTable::getTaxItemGroupId(ModuleInventPurchSales::Sales, salesLine.ItemId, salesLine.InventDimId);
            }

            // <GIN>
            if (TaxParameters::checkTaxParameters_IN())
            {
                SalesLine_IN salesLine_IN = salesLine.salesLine_IN();
                salesLine_IN.assessableValue(salesLine);
                salesLine.packSalesLine_IN(salesLine_IN);
            }
            // </GIN>

            salesLine.setStockedProduct();
            // <GEERU>
            if (countryRegion_RU)
            {
                salesLine.DefaultDimension = AgreementHeaderExt_RU::createAgreementDimension(createFromSalesAgreementExt.RecId,
                salesLine.DefaultDimension);
            }
            // </GEERU>

            salesLine.setPdsSameLot();

            if (salesLine.SalesQty != 0)
            {
                // Add warning if created line amount is going to be outside an agreed transactions min/MAX amounts
                if (   (createFromAgreementLine.AgreedReleaseLineMinAmount > 0  && createFromAgreementLine.AgreedReleaseLineMinAmount > salesLine.LineAmount)
                || (createFromAgreementLine.AgreedReleaseLineMaxAmount > 0  && createFromAgreementLine.AgreedReleaseLineMaxAmount < salesLine.LineAmount))
                {
                    warning("@SYS342771");
                }
                this.createSalesLine();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets sales release order fields and calls the <c>createSalesTable</c> method
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    The new record of the <c>SalesTable</c> cannot be created.
    /// </exception>
    void setSalesTable()
    {
        if (firstRecord)
        {
            super();
            currentSalesId      = salesTable.SalesId;
            this.createSalesTable();

            if (!salesTable)
            {
                checkFailed(strFmt("@SYS15067", this.salesId()));
                throw error("@SYS23020");
            }
        }
        else
        {
            salesTable = SalesTable::find(salesTable.SalesId,true);
            salesTable.SkipUpdate = InterCompanySkipUpdate::No;
            salesTable.update();
        }
        firstRecord         = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>SalesAutoCreate_ReleaseFromAgreement</c> class.
    /// </summary>
    /// <param name="_releaseOrderLine">
    ///    A   <c>SalesCreateReleaseOrderLineTmp</c> record.
    /// </param>
    /// <param name="_callBackClass">
    ///    An instance of the call-back class.
    /// </param>
    /// <param name="_releaseOrderTable">
    ///    The <c>SalesCreateReleaseOrderTableTmp</c> record.
    /// </param>
    /// <returns>
    ///    Initialized instance of <c>SalesAutoCreate_ReleaseFromAgreement</c> class.
    /// </returns>
    /// <remarks>
    ///    The static construct method for the <c>SalesAutoCreate_ReleaseFromAgreement</c> class.
    /// </remarks>
    public static SalesAutoCreate_ReleaseFromAgreement construct (SalesCreateReleaseOrderLineTmp  _releaseOrderLine,
                                                                  Object                          _callBackClass     = null,
                                                                  SalesCreateReleaseOrderTableTmp _releaseOrderTable = null)
    {
        return new SalesAutoCreate_ReleaseFromAgreement(_releaseOrderLine, _callBackClass, _releaseOrderTable);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>