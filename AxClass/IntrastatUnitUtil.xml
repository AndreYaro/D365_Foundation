<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntrastatUnitUtil</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>IntrastatUnitCalculator</c> is responsible for units convertation for Intrastat.
/// </summary>
public static class IntrastatUnitUtil
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateAdditionalUnitQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts quantity of in the specified unit of measure to an additional unit
    /// provided by the <c>AdditionalUnits</c> field of the <c>EcoRecCategoryIntrastat</c> table.
    /// </summary>
    /// <param name="_itemId">
    /// The ID of item.
    /// </param>
    /// <param name="_qty">
    /// The quantity to calculate.
    /// </param>
    /// <param name="_intrastatCommodityId">
    /// The ID of intrastat commodity.
    /// </param>
    /// <param name="_inventDimId">
    /// The dimension ID to use for conversion.
    /// </param>
    /// <param name="_unit">
    /// The unit of measure for the input quantity; optional. The default value '' stands for inventory unit.
    /// </param>
    /// <param name="_additionalUnit">
    /// The unit of measure for the output quantity; optional. The default value '' stands for additional unit for the specidfied commodity code.
    /// </param>
    /// <returns>
    /// Additional unit quantity.
    /// </returns>
    public static Qty calculateAdditionalUnitQuantity(
        ItemId                  _itemId, 
        Qty                     _qty, 
        IntrastatCommodityId    _intrastatCommodityId,
        InventDimId             _inventDimId,
        UnitOfMeasureSymbol     _unit = '', 
        UnitOfMeasureSymbol     _additionalUnit = '')
    {
        Qty qty;

        if (_itemId)
        {
            IntrastatUnitOfMeasureSymbol additionalUnitSymbol = _additionalUnit ? _additionalUnit : IntrastatUnitUtil::getAdditionalUnitSymbol(_intrastatCommodityId);

            if (additionalUnitSymbol != '')
            {
                InventTable         inventTable       = InventTable::find(_itemId);
                UnitOfMeasureSymbol fromUnitOfMeasure = _unit ? _unit : inventTable.inventUnitId();

                qty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_itemId,
                                                                                            _inventDimId,
                                                                                            _qty,
                                                                                            fromUnitOfMeasure,
                                                                                            additionalUnitSymbol,
                                                                                            NoYes::Yes);
            }
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAdditionalUnitQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts quantity of in the specified unit of measure to an additional unit
    /// provided by the <c>AdditionalUnits</c> field of the <c>EcoRecCategoryIntrastat</c> table.
    /// </summary>
    /// <param name="_itemId">
    /// The ID of item.
    /// </param>
    /// <param name="_qty">
    /// The quantity to calculate.
    /// </param>
    /// <param name="_intrastatCommodityId">
    /// The ID of intrastat commodity.
    /// </param>
    /// <param name="_unit">
    /// The unit of measure for the input quantity; optional. The default value '' stands for inventory unit.
    /// </param>
    /// <param name="_additionalUnit">
    /// The unit of measure for the output quantity; optional. The default value '' stands for additional unit for the specidfied commodity code.
    /// </param>
    /// <returns>
    /// Additional unit quantity.
    /// </returns>
    [SysObsolete('This method is deprecated sse calculateAdditionalUnitQuantity instead', true, 11\09\2018)]
    public static Qty calculateAdditionalUnitQty(ItemId _itemId, Qty _qty, IntrastatCommodityId _intrastatCommodityId,UnitOfMeasureSymbol _unit = '', UnitOfMeasureSymbol _additionalUnit = '')
    {
        return IntrastatUnitUtil::calculateAdditionalUnitQuantity(_itemId, _qty, _intrastatCommodityId, '', _unit,_additionalUnit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateItemUnitQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts quantity of in the specified unit of measure to inventory quantity.
    /// </summary>
    /// <param name="_itemId">
    /// The ID of item.
    /// </param>
    /// <param name="_inventDimId">
    /// The dimension ID to use for conversion.
    /// </param>
    /// <param name="_qty">
    /// The quantity to calculate.
    /// </param>
    /// <param name="_unit">
    /// The unit of measure for the input quantity; optional. The default value '' stands for inventory unit.
    /// </param>
    /// <returns>
    /// Inventory unit quantity.
    /// </returns>
    public static Qty calculateItemUnitQuantity(
        ItemId              _itemId, 
        InventDimId         _inventDimId,
        Qty                 _qty, 
        UnitOfMeasureSymbol _unit = '')
    {
        Qty qty;

        if (_itemId)
        {
            InventTable         inventTable = InventTable::find(_itemId);
            UnitOfMeasureSymbol fromUnitOfMeasure = _unit ? _unit : inventTable.inventUnitId();

            qty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_itemId,
                                                                                        _inventDimId,
                                                                                        _qty,
                                                                                        fromUnitOfMeasure,
                                                                                        inventTable.inventUnitId(),
                                                                                        NoYes::Yes);
        }
        else
        {
            qty = (_qty == 0 ? 1 : _qty);
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcWeightKg</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts quantity of inventory weight from the specified unit of measure to intrastat unit of measure.
    /// </summary>
    /// <param name = "_weight">Quantity of inventory weight.</param>
    /// <returns>
    /// weight in Kilograms
    /// </returns>
    public static Weight calcWeightKg(Weight _weight)
    {
        return UnitOfMeasureConverter::convert(
            _weight,
            IntrastatParameters::find().ItemNetWeightUnitType == IntrastatItemNetWeightUnitType::BaseUnit ? 
                UnitOfMeasureBaseUnit::findByUnitOfMeasureClass(UnitOfMeasureClass::Mass).UnitOfMeasure :
                UnitOfMeasureSystemUnit::findByUnitOfMeasureClass(UnitOfMeasureClass::Mass).UnitOfMeasure,
            UnitOfMeasure::findByInternalCode(UnitOfMeasureCodeSymbol::Kilograms).RecId,
            NoYes::Yes
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAdditionalUnitSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if additional unit is set of intrastat commodity.
    /// </summary>
    /// <param name = "_intrastatCommodity">The ID of Intrastat commodity.</param>
    /// <returns>True if additional unit is set, otherwise returns false.</returns>
    public static boolean isAdditionalUnitSet(IntrastatCommodityId _intrastatCommodity)
    {
        boolean additionalUnitIsSet = IntrastatUnitUtil::getAdditionalUnitSymbol(_intrastatCommodity) != '';
        return additionalUnitIsSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdditionalUnitSymbol</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets additional unit symbol for the intrastat commodity.
    /// </summary>
    /// <param name = "_intrastatCommodity">The ID of Intrastat commodity.</param>
    /// <returns>Unit of measure symbol for the intrastat commodity.</returns>
    public static IntrastatUnitOfMeasureSymbol getAdditionalUnitSymbol(IntrastatCommodityId _intrastatCommodity)
    {
        IntrastatUnitOfMeasureSymbol additionalUnitsSymbol = '';
        EcoResCategoryIntrastat intrastatCategory = EcoResCategoryIntrastat::findByCategoryId(_intrastatCommodity);

        if (intrastatCategory)
        {
            additionalUnitsSymbol = intrastatCategory.AdditionalUnits;
        }

        return additionalUnitsSymbol;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>