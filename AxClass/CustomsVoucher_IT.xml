<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustomsVoucher_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Posts the customs transactions.
/// </summary>
public class CustomsVoucher_IT
{
    private const str FeatureReference = 'IT-00039';

    LedgerJournalTrans_Customs_IT customsTrans;
    LedgerPostingController ledgerPostingController;
    LedgerVoucherTransObject postingTransaction;
    CurrencyExchangeHelper currencyExchangeHelper;
    boolean postCredit;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmCurrencyExchangeHelper</Name>
				<Source><![CDATA[
	public CurrencyExchangeHelper parmCurrencyExchangeHelper(CurrencyExchangeHelper _currencyExchangeHelper = currencyExchangeHelper)
	{
        currencyExchangeHelper = _currencyExchangeHelper;
        return currencyExchangeHelper;
	}

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomsTrans</Name>
				<Source><![CDATA[
	public LedgerJournalTrans_Customs_IT parmCustomsTrans(LedgerJournalTrans_Customs_IT _customsTrans = customsTrans)
	{
		customsTrans = _customsTrans;
		return customsTrans;
	}

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerPostingController</Name>
				<Source><![CDATA[
	public LedgerPostingController parmLedgerPostingController(LedgerPostingController _ledgerPostingController = ledgerPostingController)
	{
		ledgerPostingController = _ledgerPostingController;
		return ledgerPostingController;
	}

]]></Source>
			</Method>
			<Method>
				<Name>parmPostCredit</Name>
				<Source><![CDATA[
	public boolean parmPostCredit(boolean _postCredit = postCredit)
	{
		postCredit = _postCredit;
		return postCredit;
	}

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingTransaction</Name>
				<Source><![CDATA[
	public LedgerVoucherTransObject parmPostingTransaction(LedgerVoucherTransObject _postingTransaction = postingTransaction)
	{
		postingTransaction = _postingTransaction;
		return postingTransaction;
	}

]]></Source>
			</Method>
			<Method>
				<Name>postAmount</Name>
				<Source><![CDATA[
	private void postAmount(AmountCur _amountCur, LedgerDimensionDefaultAccount _ledgerDimensionDefaultAccount)
	{
		ledgerVoucherTransObject newPostingTransaction;
		DimensionDefault dimensionDefault;

		newPostingTransaction = postingTransaction.clone();

        dimensionDefault = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(
			postingTransaction.parmLedgerDimensionId());

		newPostingTransaction.parmLedgerDimensionId(
            LedgerDimensionFacade::serviceCreateLedgerDimension(_ledgerDimensionDefaultAccount, dimensionDefault));

		newPostingTransaction.parmPostingType(LedgerPostingType::LedgerJournal);
		this.updateLedgerVoucherObjectAmounts(newPostingTransaction, _amountCur);

		ledgerPostingController.addTrans(newPostingTransaction);

		postingTransaction.parmTransactionCurrencyAmount(
			postingTransaction.parmTransactionCurrencyAmount() - newPostingTransaction.parmTransactionCurrencyAmount());
		postingTransaction.parmAccountingCurrencyAmount(
			postingTransaction.parmAccountingCurrencyAmount() - newPostingTransaction.parmAccountingCurrencyAmount());
		postingTransaction.parmReportingCurrencyAmount(
			postingTransaction.parmReportingCurrencyAmount() - newPostingTransaction.parmReportingCurrencyAmount());
	}

]]></Source>
			</Method>
			<Method>
				<Name>postCustomsAmount</Name>
				<Source><![CDATA[
	private void postCustomsAmount(AmountCur _amountCur, CustomsPaymentId_IT _customsPaymentId)
	{
		CustomsPayments_IT customsPayments = CustomsPayments_IT::find(_customsPaymentId);

		if (postCredit)
		{
			if (!customsPayments.AdvanceLedgerDimension)
			{
                throw error("@CustomsDocumentsIT:CD_JournalError_CustomsPayments_AdvanceLedgerDimensionNotSpecified");
			}

			this.postAmount(_amountCur, customsPayments.AdvanceLedgerDimension);
		}
		else
		{
			if (!customsPayments.PayableLedgerDimension)
			{
                throw error("@CustomsDocumentsIT:CD_JournalError_CustomsPayments_PayableLedgerDimensionNotSpecified");
			}

			this.postAmount(_amountCur, customsPayments.PayableLedgerDimension);
		}
	}

]]></Source>
			</Method>
			<Method>
				<Name>postTaxAmount</Name>
				<Source><![CDATA[
	private void postTaxAmount(AmountCur _amountCur, TaxCode _taxCode)
	{
		LedgerDimensionAccount ledgerDimension = TaxLedgerAccountGroup::find(TaxTable::findAccountGroup(_taxCode)).TaxVatInAdvanceLedgerDimension_IT;

		if (!ledgerDimension)
		{
            throw error("@CustomsDocumentsIT:CD_JournalError_CustomsPayments_LedgerDimensionNotSpecified");
		}

		this.postAmount(_amountCur, ledgerDimension);
	}

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
	/// <summary>
	/// Runs posting of the customs transactions.
	/// </summary>
	public void run()
	{
		AmountCur                       goodsValue;
		TaxTrans                        taxTrans;
		LedgerJournalTrans_Customs_IT   goodsValueTrans;
		LedgerJournalTrans_CustomsPayment_IT customsPayment;
		LedgerJournalTrans              creditLedgerJournalTrans;
		LedgerJournalTrans              debetLedgerJournalTrans;
		LedgerVoucherTransObject        postingTransactionNew;
		Sign                            sign = postCredit ? -1 : 1;
        LedgerJournalTable_Customs_IT	ledgerJournalTable_Customs_IT = customsTrans.ledgerJournalTable_Customs();
        boolean                         isShipper = ledgerJournalTable_Customs_IT.CustomsDebt == CustomsDebt_IT::Shipper;

		this.initCurrencyExchangeHelper();

		if (!postCredit || customsTrans.GoodsValue || customsTrans.customsPaymentAmount())
		{
			select goodsValueTrans
				where goodsValueTrans.RecId == customsTrans.RecId;
		}
		else
		{
			creditLedgerJournalTrans = LedgerJournalTrans::findRecId(customsTrans.LedgerJournalTrans, false);
			select goodsValueTrans
			exists join debetLedgerJournalTrans
				where debetLedgerJournalTrans.RecId == goodsValueTrans.LedgerJournalTrans
					&& debetLedgerJournalTrans.JournalNum == creditLedgerJournalTrans.JournalNum
					&& debetLedgerJournalTrans.Voucher == creditLedgerJournalTrans.Voucher
					&& debetLedgerJournalTrans.RecId != creditLedgerJournalTrans.RecId;
		}

		while (goodsValueTrans)
		{
			goodsValue += goodsValueTrans.GoodsValue;

			if (!postCredit || isShipper)
			{
                while select LedgerJournalTrans_Customs, PaymentAmount, PaymentId from customsPayment
					where customsPayment.LedgerJournalTrans_Customs == goodsValueTrans.RecId
				{
					this.postCustomsAmount(sign * customsPayment.PaymentAmount, customsPayment.PaymentId);
				}
			}

			if (postCredit && isShipper)
			{
				while select taxTrans
					where taxTrans.SourceTableId    == tablenum(LedgerJournalTrans)
						&& taxTrans.SourceRecId      == goodsValueTrans.LedgerJournalTrans
						&& taxTrans.TaxDirection     != TaxDirection::UseTax
						&& taxTrans.TaxOrigin        != TaxOrigin::TaxReversed
				{
					this.postTaxAmount(sign * taxTrans.taxAmountCur_W(), taxTrans.TaxCode);
				}
			}

			next goodsValueTrans;
		}

        if (ledgerJournalTable_Customs_IT.SkipGoodsTrans)
		{
			this.updateLedgerVoucherObjectAmounts(postingTransaction, postingTransaction.parmTransactionCurrencyAmount() - (sign * goodsValue));
		}
		else
		{
			postingTransactionNew = postingTransaction.clone();
			this.updateLedgerVoucherObjectAmounts(postingTransactionNew, -(sign * goodsValue));
			ledgerPostingController.addTrans(postingTransactionNew);
		}
	}

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerVoucherObjectAmounts</Name>
				<Source><![CDATA[
	private void updateLedgerVoucherObjectAmounts(LedgerVoucherTransObject _postingTransaction, AmountCur _newTransAmount)
	{
		_postingTransaction.parmTransactionCurrencyAmount(_newTransAmount);

		_postingTransaction.parmAccountingCurrencyAmount(
			currencyExchangeHelper.calculateTransactionToAccounting(
				_postingTransaction.parmCurrencyCode(),
				_newTransAmount,
				true));

		_postingTransaction.parmReportingCurrencyAmount(
            currencyExchangeHelper.calculateTransactionCurrencyToReportingCurrency(
				_postingTransaction.parmCurrencyCode(),
				_newTransAmount));
	}

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
	private static CustomsVoucher_IT construct()
	{
		return new CustomsVoucher_IT();
	}

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
	/// <summary>
	/// Creates an instance of the <c>CustomsVoucher_IT</c> class.
	/// </summary>
	/// <param name="_customsTrans">
	/// The record from the <c>LedgerJournalTrans_Customs_IT</c> table.
	/// </param>
	/// <param name="_ledgerPostingController">
	/// The ledger posting controller that should be used for the postings.
	/// </param>
	/// <param name="_postingTransaction">
	/// An instance of the <c>LedgerVoucherTransObject</c> class.
	/// </param>
	/// <param name="_postCredit">
	/// A Boolean value indicating whether to post credit transactions.
	/// </param>
	/// <returns>
	/// The instance of the <c>CustomsVoucher_IT</c> class.
	/// </returns>
	public static CustomsVoucher_IT newFromParameters(LedgerJournalTrans_Customs_IT _customsTrans,
		LedgerPostingController _ledgerPostingController,
		LedgerVoucherTransObject _postingTransaction,
		boolean _postCredit = false)
	{
		CustomsVoucher_IT customsVoucher = CustomsVoucher_IT::construct();

		customsVoucher.parmCustomsTrans(_customsTrans);
		customsVoucher.parmLedgerPostingController(_ledgerPostingController);
		customsVoucher.parmPostingTransaction(_postingTransaction);
		customsVoucher.parmPostCredit(_postCredit);

		return customsVoucher;
	}

]]></Source>
			</Method>
			<Method>
				<Name>initCurrencyExchangeHelper</Name>
				<Source><![CDATA[
	private void initCurrencyExchangeHelper()
	{
		LedgerJournalTrans ledgerJournalTrans;

		if (!currencyExchangeHelper)
		{
			ledgerJournalTrans = customsTrans.ledgerJournalTrans();

			currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(
				Ledger::primaryLedger(ledgerJournalTrans.companyInfo().RecId),
				ledgerJournalTrans.TransDate);
			currencyExchangeHelper.parmExchangeRate1(ledgerJournalTrans.ExchRate);
			currencyExchangeHelper.parmExchangeRate2(ledgerJournalTrans.ExchRateSecond);
		}
	}

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>