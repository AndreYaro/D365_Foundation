<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayTaxCalcTypeFactory</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This fabric class instantiates types for tax calculation.
/// </summary>
#RPayTaxCalcTypes
[RPayTaxCalcTypeAttribute(#BaseType)]
class rPayTaxCalcTypeFactory
{
    RPayTaxCalcContext  calcContext;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCalcState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the calculation state.
    /// </summary>
    /// <returns>
    /// The calculation state.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Object getCalcState()
    {
        return new RPayTaxCalcState();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getImposeSerializerFunctor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the functor.
    /// </summary>
    /// <param name="_closure">
    /// The closure.
    /// </param>
    /// <returns>
    /// The <c>IRPayTaxCalcFunctor</c> interface.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public IRPayTaxCalcFunctor getImposeSerializerFunctor(anytype _closure = null)
    {
        IRPayTaxCalcFunctor taxImposeSerializer = new RPayTaxImposedSerializeFunc();
        taxImposeSerializer.closure(_closure);

        return taxImposeSerializer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getImposeTaxFunctor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax functor.
    /// </summary>
    /// <param name="_closure">
    /// The closure.
    /// </param>
    /// <returns>
    /// The <c>IRPayTaxCalcFunctor</c> interface.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public IRPayTaxCalcFunctor getImposeTaxFunctor(anytype _closure = null)
    {
        IRPayTaxCalcFunctor imposeTaxFunctor = new RPayTaxImposeFunc();
        imposeTaxFunctor.closure(_closure);

        return imposeTaxFunctor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodSubstractFunctor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the substract functor.
    /// </summary>
    /// <param name="_closure">
    /// The closure.
    /// </param>
    /// <returns>
    /// The <c>IRPayTaxCalcFunctor</c> interface.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public IRPayTaxCalcFunctor getPeriodSubstractFunctor(anytype _closure = null)
    {
        IRPayTaxCalcFunctor substractFunctor = new RPayTaxImposeSubtractPeriodFunc();
        substractFunctor.closure(_closure);

        return substractFunctor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxCalcDataList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>rPayTaxCalcDataList</c> class instance.
    /// </summary>
    /// <returns>
    /// The <c>IRPayTaxCalcFunctor</c> interface.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public IRPayTaxCalcList getTaxCalcDataList()
    {
        return new RPayTaxCalcDataList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxCalcEmptyList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>RPayTaxCalcEmptyList</c> class instance.
    /// </summary>
    /// <returns>
    /// The <c>IRPayTaxCalcFunctor</c> interface.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public IRPayTaxCalcList getTaxCalcEmptyList()
    {
        return new RPayTaxCalcEmptyList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxEmplStateList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>RPayEmplTaxStateList</c> class instance.
    /// </summary>
    /// <returns>
    /// The <c>RPayEmplTaxStateList</c> class instance.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public IRPayTaxCalcList getTaxEmplStateList()
    {
        return RPayEmplTaxStateList::createFromTaxCalcContext(calcContext);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxWithholdFunctor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax functor (withhold).
    /// </summary>
    /// <param name="_closure">
    /// The closure.
    /// </param>
    /// <returns>
    /// The <c>IRPayTaxCalcFunctor</c> interface.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public IRPayTaxCalcFunctor getTaxWithholdFunctor(anytype _closure = null)
    {
        IRPayTaxCalcFunctor taxWithholdFunc = new RPayTaxWithholdPeriodFunc();
        taxWithholdFunc.closure(_closure);

        return taxWithholdFunc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the factory.
    /// </summary>
    /// <param name="_taxCalcContext">
    /// The context.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void init(RPayTaxCalcContext _taxCalcContext)
    {
        calcContext = _taxCalcContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the needed object.
    /// </summary>
    /// <param name="_taxCalcContext">
    /// The context.
    /// </param>
    /// <returns>
    /// The <c>RPayTaxCalcTypeFactory</c> class instance.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public RPayTaxCalcTypeFactory construct(RPayTaxCalcContext _taxCalcContext)
    {
        RPayTaxCalcTypeAttribute calcTypeAttribute = new RPayTaxCalcTypeAttribute(_taxCalcContext.parmType());
        RPayTaxCalcTypeFactory typeFactory = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(RPayTaxCalcTypeFactory), calcTypeAttribute);

        typeFactory.init(_taxCalcContext);

        return typeFactory;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>