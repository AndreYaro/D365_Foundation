<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendTrans_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(VendTrans))]
internal final class VendTrans_ApplicationSuite_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromLedgerJournalTransApproval</Name>
				<Source><![CDATA[
    public void initFromLedgerJournalTransApproval(LedgerJournalTrans _ledgerJournalTrans)
    {
        next initFromLedgerJournalTransApproval(_ledgerJournalTrans);

        if (FeatureStateProvider::isFeatureEnabled(SplitPaymentMandatoryRuleFeature_PL::instance()))
        {
            CustVendTrans_W custVendTrans_W = this.CustVendTrans::getCustVendTrans_W();

            custVendTrans_W.CustVendTrans_W::initSplitPayment(this.PaymMode, this.PaymSpec);
            this.CustVendTrans::packCustVendTrans_W(custVendTrans_W);
        }

        if (FeatureStateProvider::isFeatureEnabled(VendorVATDateFeature::instance()))
        {
            this.VendorVATDate = _ledgerJournalTrans.VendorVATDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendInvoiceInfoTableApproval</Name>
				<Source><![CDATA[
    public void initFromVendInvoiceInfoTableApproval(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        next initFromVendInvoiceInfoTableApproval(_vendInvoiceInfoTable);

        if (FeatureStateProvider::isFeatureEnabled(VendorVATDateFeature::instance()))
        {
            this.VendorVATDate = _vendInvoiceInfoTable.VendorVATDate;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        next insert();

        TaxTrans taxTrans;
        TaxTrans_Reporting taxTrans_Reporting;
        taxTrans_Reporting.skipDataMethods(true);

        if (TaxTransReportingAvoidSetBasedUpdateOnVendTransInsertFlight::instance().isEnabled())
        {
            VendInvoiceJour vendInvoiceJour;
            UnknownNoYes isOriginalDocumentCreditNote;
            boolean isOriginalDocumentCreditNoteInitialized = false;

            while select RecId from taxTrans
                where taxTrans.Voucher == this.Voucher
                    && taxTrans.TransDate == this.TransDate
            {
                taxTrans_Reporting = TaxTrans_Reporting::findByTaxTrans(taxTrans.RecId);

                if (taxTrans_Reporting)
                {
                    boolean isUpdateNeeded = false;

                    if (!isOriginalDocumentCreditNoteInitialized)
                    {
                        vendInvoiceJour = this.vendInvoiceJour();
                        if (vendInvoiceJour)
                        {
                            isOriginalDocumentCreditNote = TaxTransGlobalInitializer::isVendInvoiceJourCreditNote(vendInvoiceJour)
                                ? UnknownNoYes::Yes
                                : UnknownNoYes::No;
                        }

                        isOriginalDocumentCreditNoteInitialized = true;
                    }

                    if (taxTrans_Reporting.VendTrans == 0)
                    {
                        taxTrans_Reporting.VendTrans = this.RecId;
                        isUpdateNeeded = true;
                    }

                    if (vendInvoiceJour && taxTrans_Reporting.IsOriginalDocumentCreditNote != isOriginalDocumentCreditNote)
                    {
                        taxTrans_Reporting.IsOriginalDocumentCreditNote = isOriginalDocumentCreditNote;
                        isUpdateNeeded = true;
                    }

                    if (isUpdateNeeded)
                    {
                        taxTrans_Reporting.selectForUpdate(true);
                        taxTrans_Reporting.update();
                    }
                }
            }
        }
        else
        {
            update_recordset taxTrans_Reporting
                setting
                    VendTrans = this.RecId
                exists join taxTrans
                    where taxTrans.RecId == taxTrans_Reporting.TaxTrans
                        && taxTrans.Voucher == this.Voucher
                        && taxTrans.TransDate == this.TransDate
                        && taxTrans_Reporting.VendTrans == 0;

            VendInvoiceJour vendInvoiceJour = this.vendInvoiceJour();
            if (vendInvoiceJour)
            {
                UnknownNoYes isCreditNote = TaxTransGlobalInitializer::isVendInvoiceJourCreditNote(vendInvoiceJour)
                    ? UnknownNoYes::Yes
                    : UnknownNoYes::No;

                if (TaxTransReportingRowByRowUpdateFlight::instance().isEnabled())
                {
                    while select RecId from taxTrans
                        where taxTrans.Voucher == this.Voucher
                            && taxTrans.TransDate == this.TransDate
                    {
                        taxTrans_Reporting = TaxTrans_Reporting::findByTaxTrans(taxTrans.RecId);

                        if (taxTrans_Reporting && taxTrans_Reporting.IsOriginalDocumentCreditNote != isCreditNote)
                        {
                            taxTrans_Reporting.selectForUpdate(true);
                            taxTrans_Reporting.IsOriginalDocumentCreditNote = isCreditNote;
                            taxTrans_Reporting.update();
                        }
                    }
                }
                else
                {
                    update_recordset taxTrans_Reporting
                        setting
                            IsOriginalDocumentCreditNote = isCreditNote
                        exists join taxTrans
                            where taxTrans.RecId == taxTrans_Reporting.TaxTrans
                                && taxTrans.Voucher == this.Voucher
                                && taxTrans.TransDate == this.TransDate;
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>