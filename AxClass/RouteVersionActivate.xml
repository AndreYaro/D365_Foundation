<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RouteVersionActivate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RouteVersionActivate extends BOMRouteVersionActivate implements BatchRetryable
{
    boolean failOnResourceInconsistency;
    boolean logResourceInconsistency;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmFailOnResourceInconsistency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set whether the validation of route activation should fail on resource inconsistency.
    /// </summary>
    /// <param name="_failOnResourceInconsistency">
    /// The new value to set
    /// </param>
    /// <returns>
    /// True if the validation of route activation will fail on resource inconsistency; otherwise false.
    /// </returns>
    public boolean parmFailOnResourceInconsistency(boolean _failOnResourceInconsistency = failOnResourceInconsistency)
    {
        failOnResourceInconsistency = _failOnResourceInconsistency;
        return failOnResourceInconsistency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLogResourceInconsistency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set whether the validation of route activation should log resource inconsistencies in the infolog.
    /// </summary>
    /// <param name="_logResourceInconsistency">
    /// The new value to set
    /// </param>
    /// <returns>
    /// True if the validation of route activation will log resource inconsistencies in the infolog; otherwise false.
    /// </returns>
    public boolean parmLogResourceInconsistency(boolean _logResourceInconsistency = logResourceInconsistency)
    {
        logResourceInconsistency = _logResourceInconsistency;
        return logResourceInconsistency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        RouteVersion  routeVersion;

        try
        {
            routeVersion = RouteVersion::findRecId(versionRecId, true);

            routeVersion.Active = routeVersion.Active ? NoYes::No : NoYes::Yes;

            if (!routeVersion.validateWrite(false) ||
               (routeVersion.Active && !this.validateResourceRequirements(routeVersion)))
            {
                throw Exception::Error;
            }

            // Transaction starts here to avoid having an open transaction during any message boxes
            ttsbegin;

            routeVersion.doUpdate();

            ttscommit;
        }

        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateResourceRequirements</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that there are resources available for all operations.
    /// </summary>
    /// <param name="_routeVersion">
    ///    The route version to validate.
    /// </param>
    /// <returns>
    ///    True if there are resources available for all operations; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     This method uses parmLogResourceInconsistency() and parmFailOnResourceInconsistency()
    ///     to determine how errors are handled. If parmFailOnResourceInconsistency is false the
    ///     user will be promted and asked if the error should be ignored.
    ///     If parmLogResourceInconsistency is true the error will also be shown in the infolog.
    /// </remarks>
    protected boolean validateResourceRequirements(RouteVersion _routeVersion)
    {
        RouteVersionApplicableResourceCache applicableResourceCache = RouteVersionApplicableResourceCache::construct();
        boolean                             ret = true;

        applicableResourceCache.initFromRouteVersion(_routeVersion);
        if (applicableResourceCache.validateAllOperations() != RouteFeasibilityStatus::OK)
        {
            if (this.parmLogResourceInconsistency())
            {
               error(strfmt("@SYS314249", _routeVersion.RouteId, _routeVersion.inventSiteId()));
            }

            if (this.parmFailOnResourceInconsistency())
            {
                ret = false;
            }
            else
            {
                if (!Box::confirm(strfmt("@SYS314249",_routeVersion.RouteId, _routeVersion.inventSiteId()) + '\n' + "@SYS314250",
                               "",
                               ""))
                {
                    ret = false;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS94869";
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>