<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceAutomationStateManagement</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendInvoiceAutomationStateManagement</c> class is used to determine the invoice automation state.
/// </summary>
internal static final class VendInvoiceAutomationStateManagement
{
    private const int MaximumUpdateConflictRetries = 3;
    private const int MaximumDuplicateKeyRetries = 3;
    private const int MaximumDeadlockRetries = 5;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canUpdateAutomationStatusManually</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if an invoice automation status can be updated manually.
    /// </summary>
    /// <param name = "_vendInvoiceInfoTable">The invoice to be evaluated.</param>
    /// <returns>true if the invoice can be excluded; otherwise false.</returns>
    internal static boolean canUpdateAutomationStatusManually(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        if (_vendInvoiceInfoTable.AutomationStatus == VendInvoiceAutomationStatus::Included
            || _vendInvoiceInfoTable.AutomationStatus == VendInvoiceAutomationStatus::Paused
            || (VendInvoiceIncludeManualCreatedInvoiceIntoAutomationFeature::isEnabled()
                && _vendInvoiceInfoTable.AutomationStatus == VendInvoiceAutomationStatus::NotApplicable))
        {
            VendInvoiceAutomationInvoicesInWorkflowSubmission invoicesInWorkflowSubmission;

            select firstonly RecId from invoicesInWorkflowSubmission
                where invoicesInWorkflowSubmission.VendInvoiceRecId == _vendInvoiceInfoTable.RecId;

            if (invoicesInWorkflowSubmission.RecId != 0)
            {
                return false;
            }

            if (VendInvoiceAutomationStateManagement::isInvoiceInUseByAutomationMatching(_vendInvoiceInfoTable))
            {
                return false;
            }

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInvoiceInUseByAutomationMatching</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if an invoice is currently in use by the automation matching process.
    /// </summary>
    /// <param name = "_vendInvoiceInfoTable">The invoice to be evaluated.</param>
    /// <returns>True if the invoice is in use by the automation matching process; otherwise false.</returns>
    internal static boolean isInvoiceInUseByAutomationMatching(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        VendInvoiceAutomationInvoicesInMatching invoicesInMatching;

        select firstonly RecId from invoicesInMatching
                where invoicesInMatching.VendInvoiceRecId == _vendInvoiceInfoTable.RecId;

        if (invoicesInMatching.RecId != 0)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInvoiceReadonly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if an invoice should be in read-only state.
    /// </summary>
    /// <param name = "_vendInvoiceInfoTable">The invoice to be evaluated.</param>
    /// <returns>True if the invoice should be read-only; otherwise false.</returns>
    internal static boolean isInvoiceReadonly(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        return VendInvoiceAutomationStateManagement::isIncludedInAutomatedProcessing(_vendInvoiceInfoTable)
            || VendInvoiceAutomationStateManagement::isInvoiceInUseByAutomationMatching(_vendInvoiceInfoTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAutomationInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if an invoice is available for the automated process.
    /// </summary>
    /// <param name = "_vendInvoiceInfoTable">The invoice to be evaluated.</param>
    /// <returns>True if invoice is available to be used in the automated process; otherwise false.</returns>
    internal static boolean isAutomationInvoice(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        if (VendInvoiceIncludeManualCreatedInvoiceIntoAutomationFeature::isEnabled()
            && (VendParameters::findByCompany(_vendInvoiceInfoTable.DataAreaId).AutomationWorkflowSubmission
                || VendParameters::findByCompany(_vendInvoiceInfoTable.DataAreaId).AutomationProductReceiptMatching))
        {
            return true;
        }
        else
        {
            return VendAutomateVendorInvoicesFeature::isEnabled()
                && _vendInvoiceInfoTable.DocumentOrigin == DocumentOrigin::Service
                && VendParameters::findByCompany(_vendInvoiceInfoTable.DataAreaId).AutomationWorkflowSubmission;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAutomatedMatchingProcessEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the automated matching process is enabled or not.
    /// </summary>
    /// <returns>True if the automated matching processing is enabled; otherwise false.</returns>
    internal static boolean isAutomatedMatchingProcessEnabled()
    {
        VendParameters vendParameters = VendParameters::find();

        return VendAutomateVendorInvoicesFeature::isEnabled()
            && vendParameters.AutomationProductReceiptMatching == NoYes::Yes
            && vendParameters.editUseInvoiceMatching() == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsAutomationWorkflowSubmissionEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the automated workflow submission process is enabled or not.
    /// </summary>
    /// <returns>True if the automated workflow submission processing is enabled; otherwise false.</returns>
    internal static boolean IsAutomationWorkflowSubmissionEnabled()
    {
        return VendAutomateVendorInvoicesFeature::isEnabled()
            && VendParameters::find().AutomationWorkflowSubmission;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIncludedInAutomatedProcessing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the invoice is currently included in the automated processing.
    /// </summary>
    /// <param name = "_vendInvoiceInfoTable">The invoice to be evaluated.</param>
    /// <returns>True if the invoice is included in the automated processing; otherwise false.</returns>
    internal static boolean isIncludedInAutomatedProcessing(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        return VendInvoiceAutomationStateManagement::isAutomationInvoice(_vendInvoiceInfoTable)
            && _vendInvoiceInfoTable.IncludeInAutomatedProcessing == NoYes::Yes
            && _vendInvoiceInfoTable.AutomationStatus == VendInvoiceAutomationStatus::Included;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInvoiceInAutomatedWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the specified invoice is currently in a workflow.
    /// </summary>
    /// <param name = "_vendInvoiceInfoTable">The invoice to be evaluated</param>
    /// <returns>true if the invoice is in workflow; otherwise false.</returns>
    internal static boolean isInvoiceInAutomatedWorkflow(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        return VendInvoiceAutomationStateManagement::isAutomationInvoice(_vendInvoiceInfoTable)
            && _vendInvoiceInfoTable.AutomationStatus == VendInvoiceAutomationStatus::InWorkflow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInvoiceSubmittedToWorkflowByAutomation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the specified invoice is currently in a workflow and submitted by the automation process.
    /// </summary>
    /// <param name = "_vendInvoiceInfoTable">The invoice to be evaluated</param>
    /// <returns>True, if the invoice is in workflow and submitted by the automation process; false, otherwise.</returns>
    internal static boolean isInvoiceSubmittedToWorkflowByAutomation(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        DocumentEventLog documentEventLog = DocumentEventLog::findMostRecentLogEntryForDocument(tableNum(VendInvoiceInfoTable), _vendInvoiceInfoTable.RecId);

        //Checks if the invoice is submitted by the automation process.
        //Field <c>IncludeInAutomatedProcessing</c> in table <c>VendInvoiceInfoTable</c> is not considered here as the value in this field is reset once the invoice is submitted to workflow.
        return documentEventLog
                && _vendInvoiceInfoTable.DocumentOrigin == DocumentOrigin::Service
                && _vendInvoiceInfoTable.AutomationStatus == VendInvoiceAutomationStatus::InWorkflow
                && documentEventLog.DocumentEvent == DocumentEvent::findByEventType(enumNum(VendInvoiceAutomationSubmitToWorkflow)).RecId
                && documentEventLog.EventEnumValue == VendInvoiceAutomationSubmitToWorkflow::Succeeded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pauseInvoiceAutomation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the automation status for invoice paused from an automation standpoint.
    /// </summary>
    /// <param name = "_vendInvoiceInfoTableRecId">The record identifier for the invoice paused.</param>
    internal static void pauseInvoiceAutomation(VendInvoiceInfoTableRecId _vendInvoiceInfoTableRecId)
    {
        if (_vendInvoiceInfoTableRecId == 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        VendInvoiceAutomationStateManagement::updateAutomationStatus(_vendInvoiceInfoTableRecId, VendInvoiceAutomationStatus::Paused, NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInvoiceAutomationToPaused</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the status on an invoice buffer to be paused from an automation standpoint.
    /// </summary>
    /// <param name = "_vendInvoiceInfoTable">The <c>VendInvoiceInfoTable</c> buffer to be updated.</param>
    /// <remarks>
    /// This method will set the state in the buffer to pause the invoice. It is up to the caller to call update.
    /// </remarks>
    internal static void setInvoiceAutomationToPaused(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        if (_vendInvoiceInfoTable.RecId == 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        _vendInvoiceInfoTable.AutomationStatus = VendInvoiceAutomationStatus::Paused;
        _vendInvoiceInfoTable.IncludeInAutomatedProcessing = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInvoiceAutomationToIncluded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the status on an invoice buffer to be included from an automation standpoint.
    /// </summary>
    /// <param name = "_vendInvoiceInfoTable">The <c>VendInvoiceInfoTable</c> buffer to be updated.</param>
    /// <remarks>
    /// This method will set the state in the buffer to include the invoice. It is up to the caller to call update.
    /// </remarks>
    internal static void setInvoiceAutomationToIncluded(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        if (_vendInvoiceInfoTable.RecId == 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        _vendInvoiceInfoTable.AutomationStatus = VendInvoiceAutomationStatus::Included;
        _vendInvoiceInfoTable.IncludeInAutomatedProcessing = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInvoiceAutomationStatusToInWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the automation status for invoice submitted to workflow.
    /// </summary>
    /// <param name = "_vendInvoiceInfoTableRecId">The record identifier for the invoice submitted to workflow.</param>
    internal static void setInvoiceAutomationStatusToInWorkflow(VendInvoiceInfoTableRecId _vendInvoiceInfoTableRecId)
    {
        VendInvoiceAutomationStateManagement::setInvoiceAutomationStatus(
            _vendInvoiceInfoTableRecId,
            VendInvoiceAutomationStatus::InWorkflow,
            NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInvoiceAutomationStatusToWorkflowCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the automation status to workflow completed successfully for the given invoice.
    /// </summary>
    /// <param name = "_vendInvoiceInfoTable">The invoice in workflow.</param>
    internal static void setInvoiceAutomationStatusToWorkflowCompleted(
        VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        VendInvoiceAutomationStateManagement::setInvoiceAutomationStatus(
            _vendInvoiceInfoTable.RecId,
            VendInvoiceAutomationStatus::Completed,
            NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInvoiceAutomationStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the status of the given invoice with the specified values.
    /// </summary>
    /// <param name = "_vendInvoiceInfoTableRecId">The record identifer of the invoice.</param>
    /// <param name = "_vendInvoiceAutomationStatus">The automation status of the invoice.</param>
    /// <param name = "_includeInAutomatedProcessing">Whether to include the invoice in automated processing.</param>
    internal static void setInvoiceAutomationStatus(
        VendInvoiceInfoTableRecId _vendInvoiceInfoTableRecId,
        VendInvoiceAutomationStatus _vendInvoiceAutomationStatus,
        NoYes _includeInAutomatedProcessing)
    {
        if (_vendInvoiceInfoTableRecId == 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        VendInvoiceAutomationStateManagement::updateAutomationStatus(
            _vendInvoiceInfoTableRecId,
            _vendInvoiceAutomationStatus,
            _includeInAutomatedProcessing);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAutomationStatus</Name>
				<Source><![CDATA[
    private static void updateAutomationStatus(
        VendInvoiceInfoTableRecId _vendInvoiceInfoTableRecId,
        VendInvoiceAutomationStatus _automationStatus,
        NoYes _shouldIncludeInAutomation)
    {
        int BackOffWait = RandomGenerate::construct().randomInt(50, 1000);

        try
        {
            ttsbegin;
            VendInvoiceInfoTable vendInvoiceInfoTable = VendInvoiceInfoTable::findRecId(_vendInvoiceInfoTableRecId, true);
            vendInvoiceInfoTable.AutomationStatus = _automationStatus;
            vendInvoiceInfoTable.IncludeInAutomatedProcessing = _shouldIncludeInAutomation;
            vendInvoiceInfoTable.update();
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            var currentRetryCount = xSession::currentRetryCount();

            if (currentRetryCount >= MaximumDeadlockRetries)
            {
                throw Exception::Deadlock;
            }
            else
            {
                sleep(currentRetryCount * BackOffWait);
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= MaximumUpdateConflictRetries)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::DuplicateKeyException)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= MaximumDuplicateKeyRetries)
                {
                    throw Exception::DuplicateKeyExceptionNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::DuplicateKeyException;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pauseInvoicesInAutomation</Name>
				<Source><![CDATA[
    internal static void pauseInvoicesInAutomation(VendInvoiceAutomationInvoiceTmp _vendInvoiceAutomationInvoiceTmp)
    {
        int BackOffWait = RandomGenerate::construct().randomInt(50, 1000);

        try
        {
            VendInvoiceInfoTable vendInvoiceInfoTable;

            ttsbegin;

            vendInvoiceInfoTable.skipDataMethods(true);
            vendInvoiceInfoTable.skipDatabaseLog(true);
            vendInvoiceInfoTable.skipEvents(true);

            update_recordset vendInvoiceInfoTable
                setting
                    AutomationStatus = VendInvoiceAutomationStatus::Paused,
                    IncludeInAutomatedProcessing = NoYes::No
                join _vendInvoiceAutomationInvoiceTmp
                    where vendInvoiceInfoTable.RecId == _vendInvoiceAutomationInvoiceTmp.VendInvoiceRecId;

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            var currentRetryCount = xSession::currentRetryCount();

            if (currentRetryCount >= MaximumDeadlockRetries)
            {
                throw Exception::Deadlock;
            }
            else
            {
                sleep(currentRetryCount * BackOffWait);
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= MaximumUpdateConflictRetries)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>