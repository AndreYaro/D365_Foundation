<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjListProjTrans2Period</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjListProjTrans2Period
{
    ProjListProjTrans   projListProjTransPeriod1;
    ProjListProjTrans   projListProjTransPeriod2;

    DialogField         dialogPeriod1FromDate;
    DialogField         dialogPeriod1ToDate;
    DialogField         dialogPeriod2FromDate;
    DialogField         dialogPeriod2ToDate;
    DialogField         dialogZeroLines;
    DialogField         dialogShowThousand;
    DialogField         dialogColumnData;
    DialogField         dialogForecastModelId;
    DialogField         dialogActualVsBudget;

    TransDate           period1FromDate;
    TransDate           period1ToDate;
    TransDate           period2FromDate;
    TransDate           period2ToDate;
    ProjListColumnData  columnData;
    ForecastModelId     forecastModelId;
    projActualVsBudget  actualVsBudget;

    boolean             showDeviance;

    #define.CurrentVersion(1)

    #localmacro.CurrentList
        columnData,
        forecastModelId,
        actualVsBudget,
        period1FromDate,
        period1ToDate,
        period2FromDate,
        period2ToDate
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
        Object dialog(Object _dialog)
    {
        DialogRunbase   dialog;
        DialogGroup     dialogProjGroup,
                        dialogFromToPeriod;

        projListProjTransPeriod1.parmDontShowBaseDialog(true);

        dialog = projListProjTransPeriod1.dialog(_dialog);

        dialogFromToPeriod = _dialog.addGroup();
        dialogFromToPeriod.frameType(FormFrameType::None);
        dialogFromToPeriod.columns(2);

        dialog.addGroup("@SYS90523",dialogFromToPeriod);
        dialogPeriod1FromDate    = dialog.addFieldValue(extendedtypestr(TransDate),period1FromDate,   "@SYS24050","@SYS90469");
        dialogPeriod1ToDate      = dialog.addFieldValue(extendedtypestr(TransDate),period1ToDate,     "@SYS80934","@SYS90470");

        dialog.addGroup("@SYS90524",dialogFromToPeriod);
        dialogPeriod2FromDate    = dialog.addFieldValue(extendedtypestr(TransDate),period2FromDate,   "@SYS24050","@SYS90469");
        dialogPeriod2ToDate      = dialog.addFieldValue(extendedtypestr(TransDate),period2ToDate,     "@SYS80934","@SYS90470");

        dialogProjGroup         = dialog.addGroup("@SYS7403");
        dialogProjGroup.columns(2);

        if (showDeviance)
        {
             dialogActualVsBudget    = dialog.addFieldValue(enumstr(projActualVsBudget), actualVsBudget);
        }
        else
        {
            dialogColumnData        = dialog.addFieldValue(enumstr(ProjListColumnData),  columnData);
        }

        dialogForecastModelId       = dialog.addFieldValue(extendedtypestr(ProjForecastModelId), forecastModelId,"@SYS82923","@SYS90481");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatPeriodLabel</Name>
				<Source><![CDATA[
        str formatPeriodLabel(str _prefixLabel, int _period, DateFlags _flags = DateFlags::FormatAll)
    {
        str sReturn;

        switch (_period)
        {
            case 1:
                sReturn = this.formatPeriodLabelHelper("@SYS180643", "@SYS180716", "@SYS91012", this.parmPeriod1FromDate(), this.parmPeriod1ToDate(), _flags);
                break;
            case 2:
                sReturn = this.formatPeriodLabelHelper("@SYS180643", "@SYS180716", "@SYS91012", this.parmPeriod2FromDate(), this.parmPeriod2ToDate(), _flags);
                break;
            default:
                sReturn = '';
                break;
        }

        return _prefixLabel + (_prefixLabel ? ': ' : '') + sReturn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatPeriodLabelHelper</Name>
				<Source><![CDATA[
        private str formatPeriodLabelHelper(str _labelFrom, str _labelTo, str _labelFromTo, TransDate _dateFrom, TransDate _dateTo, DateFlags _flags = DateFlags::FormatAll)
    {
        if ((_dateFrom) && (_dateFrom != dateNull()))
        {
            if ((_dateTo) && (_dateTo != dateNull()) && (_dateTo != dateMax()))
            {
                return strFmt(_labelFromTo, date2StrUsr(_dateFrom, _flags), date2StrUsr(_dateTo, _flags));
            }
            else
            {
                return strFmt('%1 %2', _labelFrom, date2StrUsr(_dateFrom, _flags));
            }
        }
        else
        {
            if ((_dateTo) && (_dateTo != dateNull()) && (_dateTo != dateMax()))
            {
                return strFmt('%1 %2', _labelTo, date2StrUsr(_dateTo, _flags));
            }
            else
            {
                return strFmt(_labelFromTo, '', '');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatSelection</Name>
				<Source><![CDATA[
        str formatSelection(ProjShowAmount showAmount)
    {
        str s;

        if (this.parmColumnData() == ProjListColumnData::Actual)
        {
            s = strfmt('%1',this.parmColumnData());
        }
        else
        {
            s = strfmt('%1 %2',this.parmColumnData(),this.parmForecastModelId());
        }

        if (showAmount == ProjShowAmount::Amount1000 || showAmount == ProjShowAmount::Amount1000000)
        {
            s += strfmt(', %1',showAmount);
        }

        return s;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
        public boolean getFromDialog()
    {
        period1FromDate = dialogPeriod1FromDate.value();
        period1ToDate   = dialogPeriod1ToDate.value();
        period2FromDate = dialogPeriod2FromDate.value();
        period2ToDate   = dialogPeriod2ToDate.value();

        if (showDeviance)
        {
            actualVsBudget  = dialogActualVsBudget.value();
        }
        else
        {
            columnData      = dialogColumnData.value();
        }

        forecastModelId = dialogForecastModelId.value();

        this.getProjListProjTrans1().getFromDialog();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjListProjTrans1</Name>
				<Source><![CDATA[
        ProjListProjTrans getProjListProjTrans1()
    {
        projListProjTransPeriod1.parmLedgerFromDate(period1FromDate);
        projListProjTransPeriod1.parmLedgerToDate(period1ToDate);
        projListProjTransPeriod1.parmProjFromDate(dateNull());
        projListProjTransPeriod1.parmProjToDate(dateNull());

        return projListProjTransPeriod1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjListProjTrans2</Name>
				<Source><![CDATA[
        ProjListProjTrans getProjListProjTrans2()
    {
        projListProjTransPeriod2.unpack( this.getProjListProjTrans1().pack() );

        projListProjTransPeriod2.parmLedgerFromDate(period2FromDate);
        projListProjTransPeriod2.parmLedgerToDate(period2ToDate);
        projListProjTransPeriod2.parmProjFromDate(dateNull());
        projListProjTransPeriod2.parmProjToDate(dateNull());

        return projListProjTransPeriod2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        void new(ProjListStateType  _listStateType,  ProjListStateId    _projListStateId)
    {
        projListProjTransPeriod1 = ProjListProjTrans::construct(_listStateType,_projListStateId);
        projListProjTransPeriod2 = ProjListProjTrans::construct(_listStateType,_projListStateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container pack()
    {
        return [#CurrentVersion, #CurrentList] + [this.getProjListProjTrans1().pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmColumnData</Name>
				<Source><![CDATA[
        public ProjListColumnData parmColumnData(ProjListColumnData _columnData = columnData)
    {
        columnData = _columnData;

        return columnData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmForecastModelId</Name>
				<Source><![CDATA[
        public ForecastModelId parmForecastModelId(ForecastModelId _forecastModelId = forecastModelId)
    {
        forecastModelId = _forecastModelId;

        return forecastModelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriod1FromDate</Name>
				<Source><![CDATA[
        public TransDate parmPeriod1FromDate(TransDate _period1fromDate = period1fromDate)
    {
        period1fromDate = _period1fromDate;

        return period1fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriod1ToDate</Name>
				<Source><![CDATA[
        public TransDate parmPeriod1ToDate(TransDate _period1ToDate = period1ToDate)
    {
        period1ToDate = _period1ToDate;

        if (period1ToDate)
        {
            return period1ToDate;
        }

        return maxdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriod2FromDate</Name>
				<Source><![CDATA[
        public TransDate parmPeriod2FromDate(TransDate _period2FromDate = period2FromDate)
    {
        period2FromDate = _period2FromDate;

        return period2FromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriod2ToDate</Name>
				<Source><![CDATA[
        public TransDate parmPeriod2ToDate(TransDate _period2ToDate = period2ToDate)
    {
        period2ToDate = _period2ToDate;

        if (period2ToDate)
        {
            return period2ToDate;
        }

        return maxdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean unpack(container _packedClass)
    {
        boolean         ret;
        Integer         version    = RunBase::getVersion(_packedClass);
        container       period1con;

        switch (version)
        {
            case #CurrentVersion:
                [version, #currentList, period1con] = _packedClass;
                ret = true;
                break;
            default:
                ret = false;
        }
        projListProjTransPeriod1.unpack(period1con);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
        boolean validate()
    {
        boolean ret;

        ret = true;

        if ((columnData  == ProjListColumnData::Budget) || showDeviance)
        {
            if (!forecastModelId)
            {
                ret = checkFailed("@SYS87707");
            }
        }

        if ( ret && (period1fromDate > period1ToDate && period1ToDate) || (period2FromDate > period2ToDate && period2ToDate) )
        {
            // Invalid date interval
            ret = checkFailed("@SYS91020");
        }

        // Check if projects and transactions has been selected
        if (ret)
        {
            ret = projListProjTransPeriod1.validate();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnData2ActualBudget</Name>
				<Source><![CDATA[
        static ProjActualBudget columnData2ActualBudget(ProjListColumnData _columnData)
    {
        ProjActualBudget ret;

        // enum 2 enum converter
        switch (_columnData)
        {
            case ProjListColumnData::Actual :
                ret = ProjActualBudget::Actual;
                break;
            case ProjListColumnData::Budget :
                ret = ProjActualBudget::Budget;
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        //This has to be Called from since it is called from dialog
    static projListProjTrans2Period construct(ProjListStateType _listStateType, ProjListStateId _projListStateId)
    {
        return new projListProjTrans2Period(_listStateType,_projListStateId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>