<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailSalesByStoreReportPriceOverridesDataProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Data;

/// <summary>
/// The <c>RetailSalesByStoreReportPriceOverridesDataProvider</c> class is the
/// data provider class for price overrides section in retail store summary report.
/// </summary>
[SRSReportParameterAttribute(classstr(RetailReportParametersDataContract))]
class RetailSalesByStoreReportPriceOverridesDataProvider extends RetailSrsReportDataProviderChannelBase
{
    RetailReportParametersDataContract dc;
    RetailSalesByStoreCategoryValueTable table;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTable</Name>
				<Source><![CDATA[
    [SRSReportDataSetAttribute(tableStr(RetailSalesByStoreCategoryValueTable))]
    public RetailSalesByStoreCategoryValueTable getTable()
    {
        select table;
        return table;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    Provides the ability to write the report business logic. This method will be called by SSRS at
    ///    runtime. The method should compute data and populate the data tables that will be returned to
    ///    SSRS.Note that this is a framework class. Customizing this class may cause problems with future
    ///    upgrades to the software.
    /// </remarks>
    public void processReport()
    {
        super();
        dc = this.parmDataContract();
        this.populateData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run the query and insert data into temp table.
    /// </summary>
    void populateData()
    {
        try
        {
            SysQueryRun::ExecuteInManagedStack(true);

            this.InsertChannelsToTmpTable(dc.parmHierarchyRelationId());
            Query q = new Query();
            QueryBuildDataSource  qds = q.addDataSource(tableNum(RetailSalesByStorePriceOverridesView));

            // Add fields.
            qds.addSelectionField(fieldnum(RetailSalesByStorePriceOverridesView, PriceOverrideAmount), SelectionField::Sum);
            qds.addSelectionField(fieldnum(RetailSalesByStorePriceOverridesView, priceBeforeOverride), SelectionField::Sum);
            qds.addSelectionField(fieldnum(RetailSalesByStorePriceOverridesView, TransactionRecId), SelectionField::Count);
            qds.addSelectionField(fieldnum(RetailSalesByStorePriceOverridesView, MaxPriceOverridePercentage), SelectionField::Max);
            qds.addSelectionField(fieldnum(RetailSalesByStorePriceOverridesView, MinPriceOverridePercentage), SelectionField::Min);

            //Add ranges.
            QueryBuildRange dateTimeRange = qds.addRange(fieldnum(RetailSalesByStorePriceOverridesView, transDate));
            dateTimeRange.value(this.buildDateRangeForSpecifiedField(dc.parmFromDate(), dc.parmToDate(), fieldStr(RetailSalesByStorePriceOverridesView, transDate)));

            //Add join with RetailReportChannelTable.
            this.JoinChannelFilter(qds, fieldNum(RetailSalesByStorePriceOverridesView, Channel));

            QueryRun qRun = new QueryRun(q);
            RetailSalesByStorePriceOverridesView row;

            // run the query and insert the query results into the temp table.
            if ( qRun.next() )
            {
                row = qRun.Get(tableNum(RetailSalesByStorePriceOverridesView));
            }

            this.insertIntoTempTable("@Retail:NumberOfOverrides", row.TransactionRecId, False);
            this.insertIntoTempTable("@Retail:ReportTotalAmount", row.PriceOverrideAmount, False);
            this.insertIntoTempTable("@Retail:ReportHighestPercent", row.MaxPriceOverridePercentage, True);
            this.insertIntoTempTable("@Retail:ReportLowestPercent", row.MinPriceOverridePercentage, True);
            this.insertIntoTempTable("@Retail:ReportAveragePercent", row.priceBeforeOverride == 0? 0 : row.PriceOverrideAmount / row.priceBeforeOverride, True);

            this.ClearChannelFilterTable();
        }
        finally
        {
            SysQueryRun::ExecuteInManagedStack(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTempTable</Name>
				<Source><![CDATA[
    private void insertIntoTempTable(str measureName,real value , boolean isPercent)
    {
        // Insert record into the ax table.
        table.MeasureName = measureName;
        table.Value = value;

        // 0 is true and 1 is false.
        table.IsPercent = isPercent?1:0;
        table.insert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>