<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanCommandAutoPlan</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LeanCommandAutoPlan</c> class encapsulates the business logic around auto-planning of kanban jobs.
/// </summary>
public class LeanCommandAutoPlan extends LeanCommandBase
{
    private const str SkipPlanningKey = 'skipPlanning';

    KanbanRule  kanbanRule;
    boolean     silent;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements the auto-planning of circulating cards logic.
    /// </summary>
    /// <returns>
    /// true if the auto-planning was successful; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The method is executed within a transaction scope provided by the <c>LeanRulesEngine</c> class.
    /// </remarks>
    protected boolean execute()
    {
        boolean             result = true;
        Kanban              kanban;
        KanbanJob           kanbanJob;

        if (LeanCommandAutoPlan::shouldSkipPlanning())
        {
            return true;
        }

        int kanbansToPlan = kanbanRule.TriggerLevel;

        if (kanbansToPlan > 0)
        {
            select count(RecId) from kanban
                where kanban.KanbanRule == kanbanRule.RecId
                   && kanban.Type       == LeanKanbanType::Manufacturing
                   && kanban.Status     == LeanKanbanStatus::NotAssigned
            exists join kanbanJob
                where kanbanJob.Kanban == kanban.RecId
                   && kanbanJob.Status == LeanKanbanJobStatus::NotPlanned
                   && kanbanJob.Type   == LeanKanbanJobType::Process;

            if (kanban.RecId >= kanbansToPlan)
            {
                KanbanJobAutoPlan kanbanJobAutoPlan = KanbanJobAutoPlan::newKanbanRule(kanbanRule,silent);
                kanbanJobAutoPlan.run();
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanRule</Name>
				<Source><![CDATA[
        public KanbanRule parmKanbanRule(KanbanRule _kanbanRule = kanbanRule)
    {
        kanbanRule = _kanbanRule;

        return kanbanRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSilent</Name>
				<Source><![CDATA[
        public boolean parmSilent(boolean _silent = silent)
    {
        silent = _silent;

        return silent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static LeanCommandAutoPlan construct()
    {
        return new LeanCommandAutoPlan();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes an instance of the <c>LeanCommandAutoPlan</c> class.
    /// </summary>
    /// <param name="_kanbanRule">
    /// A buffer of the <c>KanbanRule</c> table.
    /// </param>
    /// <param name="_silent">
    /// A Boolean value that defines if auto planning should be called in silent mode; optional.
    /// </param>
    /// <returns>
    /// A <c>LeanCommandAutoPlan</c> class instance.
    /// </returns>
    public static LeanCommandAutoPlan newStandard(
        KanbanRule _kanbanRule,
        boolean    _silent = false)
    {
        LeanCommandAutoPlan leanCommandAutoPlan = LeanCommandAutoPlan::construct();
        leanCommandAutoPlan.parmKanbanRule(_kanbanRule);
        leanCommandAutoPlan.parmSilent(_silent);

        return leanCommandAutoPlan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkipPlanning</Name>
				<Source><![CDATA[
    private static boolean shouldSkipPlanning()
    {
        return KanbanJobDeferredSchedulingScope::shouldSkipPlanning();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>