<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BookTransCalc_Sales_OnDelivery_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class BookTransCalc_Sales_OnDelivery_RU extends BookTransCalc_Sales_RU
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processInvoice</Name>
				<Source><![CDATA[
    protected void processInvoice()
    {
        SalesBookTrans_RU           salesBookTrans;
        FactureTrans_RU             factureTrans;
        BookStructVATAmounts_RU     amounts;
        RecordSortedList            rst;
        CustInvoiceJour             custInvoiceJour;
        FactureJour_RU              factureJourOrig;

        setPrefix("@GLS101510");

        if (fullCheck)
        {
            rst = factureJour.invoiceJourSortedList_CustVend();
            while (rst.next(custInvoiceJour))
            {
                if ( ! TaxReportPeriod::checkVATPeriod_RU(factureJour.FactureDate, custInvoiceJour.InvoiceDate))
                {
                    setPrefix(strFmt("@GLS111359", factureJour.CustVendInvoiceAccount, factureJour.FactureExternalId));
                    warning(strFmt("@GLS104854", custInvoiceJour.InvoiceId, factureJour.FactureExternalId),
                            '',
                            new SysInfoAction_FormName_RU(factureJour, formStr(FactureJournal_RU)));
                }
            }
        }

        amounts = new BookStructVATAmounts_RU();

        factureJourOrig = factureJour.HeaderRevision                               ?
                          FactureJour_RU::findRecId(factureJour.RefRevisedFacture) :
                          factureJour;

        while select sum(LineAmountMST), sum(TaxAmountMST), sum(vatAmountMST) from factureTrans
            group by TaxCode
            where factureTrans.FactureId == factureJourOrig.FactureId &&
                  factureTrans.Module    == factureJourOrig.Module
        {
            amounts.addSmallAmounts(factureTrans.TaxCode,
                                    factureTrans.LineAmountMST + factureTrans.TaxAmountMST,
                                    factureTrans.LineAmountMST + factureTrans.TaxAmountMST - factureTrans.vatAmountMST,
                                    factureTrans.vatAmountMST);
        }

        if (! factureJour.HeaderRevision)
        {
            select sum(AmountInclVAT),
                   sum(AmountLiableToVAT20),
                   sum(AmountLiableToVAT10),
                   sum(AmountLiableToVAT0),
                   sum(AmountNotLiableToVAT),
                   sum(TaxAmountVAT20),
                   sum(TaxAmountVAT10) from salesBookTrans
                where salesBookTrans.FactureId  == factureJour.FactureId               &&
                      (salesBookTrans.TransType == SalesPurchBookTransType_RU::Invoice ||
                       salesBookTrans.TransType == SalesPurchBookTransType_RU::CreditNote);

            amounts.subAmounts(salesBookTrans.AmountInclVAT,
                               salesBookTrans.AmountLiableToVAT20,
                               salesBookTrans.AmountLiableToVAT10,
                               salesBookTrans.AmountLiableToVAT0,
                               salesBookTrans.AmountNotLiableToVAT,
                               salesBookTrans.TaxAmountVAT20,
                               salesBookTrans.TaxAmountVAT10);
        }

        if (amounts.amountInclVAT())
        {
            salesPurchBookDataMap.clear();

            salesPurchBookDataMap.FactureID         = factureJour.FactureId;
            salesPurchBookDataMap.FactureExternalId = factureJour.FactureExternalId;
            salesPurchBookDataMap.FactureJour_RU    = factureJour.RecId;
            salesPurchBookDataMap.AccountNum        = factureJour.CustVendInvoiceAccount;
            salesPurchBookDataMap.AccountName       = this.findCustVendName(factureJour.Module, factureJour.CustVendInvoiceAccount);

            salesPurchBookDataMap.FactureDate          = factureJour.FactureDate;
            salesPurchBookDataMap.FactureDate_External = factureJour.FactureDate_External ? factureJour.FactureDate_External : factureJour.FactureDate;
            [salesPurchBookDataMap.PaymentDate,
            salesPurchBookDataMap.PaymDocumentNum]     = BookDataCalc_RU::getLastPaymDateNum(factureJour, toDate);
            salesPurchBookDataMap.SettlementDate       = dateNull();

            if (! factureJour.HeaderRevision)
            {
                salesPurchBookDataMap.AmountInclVAT        = amounts.amountInclVAT();
                salesPurchBookDataMap.AmountLiableToVAT20  = amounts.amountLiableToVAT20();
                salesPurchBookDataMap.AmountLiableToVAT10  = amounts.amountLiableToVAT10();
                salesPurchBookDataMap.AmountLiableToVAT0   = amounts.amountLiableToVAT0();
                salesPurchBookDataMap.AmountNotLiableToVAT = amounts.amountNotLiableToVAT();
                salesPurchBookDataMap.TaxAmountVAT20       = amounts.taxAmountVAT20();
                salesPurchBookDataMap.TaxAmountVAT10       = amounts.taxAmountVAT10();
            }

            salesPurchBookDataMap.TransType            = amounts.amountInclVAT() > 0 ? SalesPurchBookTransType_RU::Invoice :
                                                                                       SalesPurchBookTransType_RU::CreditNote;
            salesPurchBookDataMap.PaymentRecIdRef      = 0;
            salesPurchBookDataMap.RefTableId           = 0;
            salesPurchBookDataMap.LineNum              = lineNum;

            if (toDate >= #BookCorrectionDate)
            {
                if (factureJour.CorrectedFactureExternalId)
                {
                    salesPurchBookDataMap.CorrectedFactureExternalId = factureJour.CorrectedFactureExternalId;
                    salesPurchBookDataMap.CorrectedFactureDate       = factureJour.CorrectedFactureDate;
                    if (factureJour.CorrectedPeriod)
                    {
                        salesPurchBookDataMap.CorrectedSalesPurchBookTable_RU = SalesBookTable_RU::findFirstByClosingDate(factureJour.CorrectedPeriod).RecId;
                    }
                }
            }
            salesPurchBookDataMap.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>