<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustOutPaym_RBC</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustOutPaym_RBC extends CustOutPaym
{
    private AmountCur totalTransactionsAmountCur;
    private Counter totalTransactions;
    private Counter recordCount;
    private str 10 rbcClientNumber;
    private str 30 rbcClientName;

    private CurrencyCanadaUS currencyCanadaUS;
    private DialogField dialogCurrency;

    const str Zero ='0';
    const str Space = ' ';
    const str AllZeros = '0000000000';

    #DEFINE.SysLastValuesCurrentVersion(4)
    #LOCALMACRO.SysLastValuesList
        currencyCanadaUS
    #ENDMACRO

    #DEFINE.CurrentVersion(5)
    #LOCALMACRO.CurrentList
        currencyCanadaUS,
        totalTransactionsAmountCur,
        totalTransactions,
        recordCount,
        rbcClientNumber,
        rbcClientName
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the epilogue of the media, such as an end record for a file.
    /// </summary>
    public void close()
    {
        file.writeExp(this.createFileControl());
        setprefix(strFmt("@SYS73667", this.parmFilename()));
        info(strFmt("@SYS73669", this.parmTotalTransactions(0)));
        info(strFmt("@SYS73670", this.parmTotalTransactionsAmountCur(0), this.getBankAccountTable().CurrencyCode));

        if (printControlReport)
        {
            this.printControlReport();
        }

        if (printPaymAdvice)
        {
            this.printPaymAdvice();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>codepage</Name>
				<Source><![CDATA[
    private int codepage()
    {
        #Localcodepage

        return #cp_1252;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFileControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares the following trailer record for output to the export file: RBC - Pre-Authorized Debits
    /// (PADs) Service - RBC Standard (STD152) - Debit File Format Specifications.
    /// </summary>
    /// <returns>
    /// The trailer record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container createFileControl()
    {
        // RBC-Standard(STD152) Debit File Format Specififcation
        // Trailer Record
        container trailerRecord;

        const str RecType = 'Z';
        const str TrxCode = 'TRL';

        str 6 recordCountStr = strRep(zero, 6); // Must be supplied
        str 1 recordType = RecType; // Trailer record
        str 3 transactionCode = TrxCode;
        str 10 clientNumber = strRep(Zero, 10); // Must be supplied
        str 6 reserved1 = strRep(Zero, 6);
        str 14 reserved2 = strRep(Zero, 14);
        str 6 totalNumberTransactions = strRep(Zero, 6); // Must be supplied
        str 14 totalAmountTransactions = strRep(Zero, 14); // Must be supplied
        str 2 totalNumberOptionalClientInfo = strRep(recordCountStr, 2); // Not using, set to "0".
        str 6 totalNumberOptionalCustomerInfo = strRep(Zero, 6); // Not using, set to "0".
        str 12 filler1 = strRep(Space, 12);
        str 6 reserved3 = strRep(Space, 6);
        str 63 filler2 = strRep(Space, 63);
        str 2 reserved4 = strRep(Space, 2);
        str 1 filler3 = strRep(Space, 1);

        // Add 1 to the record counter.
        recordCountStr = num2Str0(this.parmRecordCount(1), 6);
        clientNumber = strLFix(this.getRBCClientNumber(), 10, Zero);
        totalNumberTransactions = num2Str0(this.parmTotalTransactions(0), 6);
        totalAmountTransactions = strRFix(stralpha(num2Str0(this.parmTotalTransactionsAmountCur(0), 14, 2)), 14, Zero);

        trailerRecord = [recordCountStr
            + recordType
            + transactionCode
            + clientNumber
            + reserved1
            + reserved2
            + totalNumberTransactions
            + totalAmountTransactions
            + totalNumberOptionalClientInfo
            + totalNumberOptionalCustomerInfo
            + filler1
            + reserved3
            + filler2
            + reserved4
            + filler3];

        return trailerRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFileHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares the header record for output to the export file.
    /// </summary>
    /// <returns>
    /// The header record.
    /// </returns>
    /// <remarks>
    /// The following header record is the one prepared for output to the export file:RBC - Pre-Authorized
    /// Debits (PADs) Service - RBC Standard (STD152) - Debit File Format Specifications.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container createFileHeader()
    {
        // RBC-Standard(STD152) Debit File Format Specififcation
        // Header Record
        container headerRecord;

        const str RecType = 'A';
        const str TrxCode = 'HDR';
        const str InputType = '1';
        const str OptionalRec = 'N';
        const str ValidChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';

        str 6 recordCountStr = strRep(Zero, 6); // Must be supplied
        str 1 recordType = RecType; // Header record
        str 3 transactionCode = TrxCode;
        str 10 clientNumber = strRep(Zero, 10); // Must be supplied
        str 30 clientName = strRep(Space, 30); // Must be supplied
        str 4 fileCreationNumber = strRep(Space, 4); // Must be supplied
        str 7 fileCreationDate = strLFix(date2Julian(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())), 7);
        str 3 currencyType;
        str 1 inputTypeStr = InputType;
        str 15 filler1 = strRep(Space, 15);
        str 6 reserved1 = strRep(Space, 6);
        str 8 reserved2 = strRep(Space, 8);
        str 9 reserved3 = strRep(Space, 9);
        str 46 filler2 = strRep(Space, 46);
        str 2 filler3 = strRep(Space, 2);
        str 1 clientOptionalRecord = OptionalRec;

        // Add 1 to the record counter.
        recordCountStr = num2Str0(this.parmRecordCount(1), 6);
        clientNumber = this.getRBCClientNumber();
        clientName = strLFix(strkeep(this.parmRBCClientName(), ValidChars), 30, Space);
        fileCreationNumber = num2Str0(this.getUniquePaymModeTable().LastSequenceNumber + 1, 4);
        fileCreationDate = strLFix(date2Julian(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())), 7);

        currencyType = (currencyCanadaUS == CurrencyCanadaUS::US) ?
            ISOCurrencyCodeHelper::getISOCurrencyCodeAlpha(ISOCurrencyCodes::USD) :
            ISOCurrencyCodeHelper::getISOCurrencyCodeAlpha(ISOCurrencyCodes::CAD);

        headerRecord = [recordCountStr
            + recordType
            + transactionCode
            + clientNumber
            + clientName
            + fileCreationNumber
            + fileCreationDate
            + currencyType
            + inputTypeStr
            + filler1
            + reserved1
            + reserved2
            + reserved3
            + filler2
            + filler3
            + clientOptionalRecord];

        return headerRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFilePreHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares the following pre-header record for output to the export file: RBC - Pre-Authorized Debits
    /// (PADs) Service - RBC Standard (STD152) - Debit File Format Specifications.
    /// </summary>
    /// <returns>
    /// The pre-header record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container createFilePreHeader()
    {
        // RBC-Standard(STD152) Debit File Format Specififcation
        // Pre-Header Record
        const str 23 PreHeader = '$$AAPDSTD0152[PROD[NL$$';

        return [PreHeader];
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendOutPaymRecordRootClassId</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method should return the class ID of the corresponding parent of <c>CustVendOutPaymRecord</c>
    /// classes.
    /// </summary>
    /// <returns>
    /// The class ID.
    /// </returns>
    /// <remarks>
    /// The class must be inherited from the <c>CustVendOutPaymRecord</c> class.
    /// </remarks>
    public classId custVendOutPaymRecordRootClassId()
    {
        return classnum(CustOutPaymRecord_RBC_Debit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be built by using the <c>Dialog</c> class or by using a class that is created in
    /// the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialog.caption(this.interfaceName());
        this.dialogAddFileName(dialog);
        this.dialogAddCurrency(dialog);
        this.dialogAddPrintDocument(PaymDocumentType::ControlReport, dialog, true);
        this.dialogAddPrintDocument(PaymDocumentType::PaymAdvice, dialog, true, true, true);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogAddCurrency</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void dialogAddCurrency(DialogRunbase _dialog)
    {
        _dialog.addGroup("@SYS62786");
        dialogCurrency = _dialog.addFieldValue(enumstr(CurrencyCanadaUS), currencyCanadaUS, "@SYS7572");
    }

]]></Source>
			</Method>
			<Method>
				<Name>generatePaymentLines</Name>
				<Source><![CDATA[
    public void generatePaymentLines()
    {
        #OCCRetryCount
        LedgerJournalTrans ledgerJournalTrans;
        CustOutPaymRecord_RBC_Debit custOutPaymRecord_RBC;
        boolean ok = true;

        int64 paymentLinesToProcess = this.findQueryRecordCount();
        int64 paymentLinesProcessed;

        SysInstrumentationProgressLogger progressLogger = this.createProgressLogger();
        SysInstrumentationProgressStage progressStage = progressLogger.createStage(CustVendInstrumentationConstants::PaymentGenerationGeneratePaymentLines, paymentLinesToProcess);

        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextWithProgressMonitor(progressStage))
        {
            activityContext.addCustomProperty(CustVendInstrumentationConstants::ClassName, this.getClassName());

            try
            {
                ttsbegin;

                setprefix("@SYS17561");

                queryRun.reset();
                outPaymRecordList = new List(Types::Class);

                while (queryRun.next())
                {
                    ledgerJournalTrans = queryRun.get(tablenum(LedgerJournalTrans));

                    paymentLinesProcessed++;
                    progressLogger.trackProgress(paymentLinesProcessed);

                    if (!this.isOffsetAccountValid(ledgerJournalTrans))
                        continue;

                    custOutPaymRecord_RBC = CustVendOutPaymRecord::construct(
                        ledgerJournalTrans.PaymMode,
                        ledgerJournalTrans.PaymSpec,
                        this,
                        this.custPaym(ledgerJournalTrans));

                    custOutPaymRecord_RBC.parmFile(file);

                    setprefix(strFmt(
                        "@SYS66048",
                        ledgerJournalTrans.TransDate,
                        ledgerJournalTrans.Voucher,
                        ledgerJournalTrans.parmAccount()));

                    if (custOutPaymRecord_RBC.checkValues(ledgerJournalTrans, this.parmProgress()))
                    {
                        if (!custOutPaymRecord_RBC.parmSkipPaymRecord())
                        {
                            custOutPaymRecord_RBC.output();
                            outPaymRecordList.addEnd(custOutPaymRecord_RBC);
                            this.updateLedgerJournalTrans(ledgerJournalTrans, custOutPaymRecord_RBC, true);
                            this.trackSequenceOnPaymMode(CustVendPaymModeTable::findCommon(ledgerJournalTrans, true));
                        }
                        else
                        {
                            continue;
                        }
                    }
                    else
                    {
                        ok = false;
                    }
                }

                if (!ok)
                {
                    throw error("@SYS18447");
                }

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                progressLogger.logRetryOnDeadlock();

                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        progressLogger.logRetryOnUpdateConflict();

                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankAccountTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the Bank Account table.
    /// </summary>
    /// <returns>
    /// The Bank Account table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public BankAccountTable getBankAccountTable()
    {
        return BankAccountTable::find(this.parmBankAccountID());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        super();

        if (dialogCurrency)
        {
            currencyCanadaUS = dialogCurrency.value();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRBCClientNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the RBC client number.
    /// </summary>
    /// <returns>
    /// The RBC client number.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str getRBCClientNumber()
    {
        return rbcClientNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interfaceName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the format to display in the user interface.
    /// </summary>
    /// <returns>
    /// The name of the format to display in the user interface.
    /// </returns>
    /// <remarks>
    /// This method must return the name of the format to display in the user interface. Formats without an
    /// interface name cannot be used in electronic banking as export formats. However, they can serve as
    /// parents for other formats.
    /// </remarks>
    public PaymInterfaceName interfaceName()
    {
        const str InterfaceName = 'RBC Pre-Authorized Debits [PADS] Service (CA)';

        return InterfaceName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>open</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the media, such as creating a file, and creates the header of the media, such as creating a
    /// start record for a file.
    /// </summary>
    public void open()
    {
        file = CustVendOutPaym::newFile(this.codepage());

        if (!file || file.status() != IO_Status::Ok)
        {
            throw error(strFmt("@SYS73665", filename));
        }

        this.parmRBCClientName(strLFix(CompanyInfo::find().name(), 30));
        this.rbcClientNumber();

        if (this.validateHeaderValues())
        {
            file.writeExp(this.createFilePreHeader());
            file.writeExp(this.createFileHeader());
        }
        else
        {
            throw(error(strFmt("@SYS18738", this.getUniquePaymModeTable().PaymMode)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>packSysLastValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the data required for <c>SysLastValues</c>.
    /// </summary>
    /// <returns>
    /// A container that stores the data to be persisted by <c>SysLastValues</c>.
    /// </returns>
    /// <remarks>
    /// The pack and unpack pattern does not have provisions for supporting different serialization and
    /// <c>SysLastValues</c> pack lists. This separate packing mechanism has been implemented for
    /// <c>SysLastValues</c> and is first defined on the class one level above the <c>RunBase</c> or
    /// <c>RunBaseBatch</c> class. Derivative classes also implement this method so that a whole object can
    /// be packed for <c>SysLastValues</c>.
    /// </remarks>
    public container packSysLastValues()
    {
        return [#SysLastValuesCurrentVersion, #SysLastValuesList, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrency</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CurrencyCanadaUS parmCurrency(CurrencyCanadaUS _currency = currencyCanadaUS)
    {
        currencyCanadaUS = _currency;
        return currencyCanadaUS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRBCClientName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str parmRBCClientName(str _rbcClientname = rbcClientName)
    {
        rbcClientname = _rbcClientname;
        return rbccLientname;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecordCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>RecordCount</c> parameter.
    /// </summary>
    /// <param name="_recordCount">
    /// The value to set; optional.
    /// </param>
    /// <returns>
    /// The value of the <c>RecordCount</c> parameter.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Counter parmRecordCount(Counter _recordCount = recordCount)
    {
        recordCount += _recordCount;
        return recordCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalTransactionsAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>TotalTransactionsAmountCur</c> parameter.
    /// </summary>
    /// <param name="_totalTransactionsAmountCur">
    /// The value to set; optional.
    /// </param>
    /// <returns>
    /// The value of the <c>TotalTransactionsAmountCur</c> parameter.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AmountCur parmTotalTransactionsAmountCur(AmountCur _totalTransactionsAmountCur = totalTransactionsAmountCur)
    {
        totalTransactionsAmountCur += _totalTransactionsAmountCur;
        return totalTransactionsAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>TotalTransactions</c> parameter.
    /// </summary>
    /// <param name="_totalTransactions">
    /// The value to set; optional.
    /// </param>
    /// <returns>
    /// The value of the <c>TotalTransactions</c> parameter.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Counter parmTotalTransactions(Counter _totalTransactions = totalTransactions)
    {
        totalTransactions += _totalTransactions;
        return totalTransactions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPaymAdvice</Name>
				<Source><![CDATA[
    public void printPaymAdvice()
    {
        Args args = new Args();

        if (BankPaymAdviceReportV2FeatureExposure::isEnabled())
        {
            BankPaymAdviceDefaultParameters defaultParameters = BankPaymAdviceDefaultParameters::newForPaymAdvicePrintRun(
                this.getPaymRecords(),
                new SrsPrintDestinationSettings(this.getPrinterSettings(PaymDocumentType::PaymAdvice)),
                printPaymAdvicePrintMgmt);

            args.parmObject(defaultParameters);

            new MenuFunction(menuitemOutputStr(BankPaymAdviceCustV2), MenuItemType::Output).run(args);
        }
        else
        {
            args.caller(this);
            args.parmObject(this.getPaymRecords());
            args.parmEnumType(enumNum(NoYes));
            args.parmEnum(printPaymAdvicePrintMgmt);

            new MenuFunction(menuitemoutputstr(BankPaymAdviceCust), MenuItemType::Output).run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rbcClientNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats the RBC client number from the <c>Bank account: Company ID</c> property.
    /// </summary>
    /// <remarks>
    /// Formats the RBC client number based on the following:
    /// <list type="unsuported">
    /// <item>
    /// <description>Pre-Authorized Debits (PADs) Services</description>
    /// </item>
    /// <item>
    /// <description>RBC Standard (STD152)</description>
    /// </item>
    /// <item>
    /// <description>Debit File Format Specifications</description>
    /// </item>
    /// </list>
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void rbcClientNumber()
    {
        BankAccountTable bankAccountTable = this.getBankAccountTable();
        str 6 clientNumber = strRep(Zero, 6);
        str 4 clientSubsiduaryNumber = strRep(Zero, 4);

        if (strlen(bankAccountTable.CompanyPaymId) == 6)
        {
            rbcClientNumber = strLFix(bankAccountTable.CompanyPaymId, 10, Zero);
        }
        else
        {
            clientNumber = strRFix(substr(bankAccountTable.CompanyPaymId, 1, 6), 6, Zero);
            clientSubsiduaryNumber = strRFix(substr(bankAccountTable.CompanyPaymId, 7, 4), 4, Zero);
            rbcClientNumber = clientNumber + clientSubsiduaryNumber;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>total</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void total(AmountCur _amountCur)
    {
        this.parmTotalTransactions(1);
        this.parmTotalTransactionsAmountCur(_amountCur);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);
        boolean ret;
        container base;

        #LOCALMACRO.CurrentListV4
            currencyCanadaUS
        #ENDMACRO

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, base] = _packedClass;
                ret = super(base);
                break;

            case 4:
                [version, #CurrentListV4, base] = _packedClass;
                ret = super(base);
                break;

            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackSysLastValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks the data required for <c>SysLastValues</c>.
    /// </summary>
    /// <param name="_packedValues">
    /// The values stored by the <c>SysLastValues</c> framework that are to be unpacked.
    /// </param>
    /// <remarks>
    /// The pack and unpack pattern does not have provisions for supporting different serialization and
    /// <c>SysLastValues</c> pack lists. This separate packing mechanism has been implemented for
    /// <c>SysLastValues</c> and is first defined on the class one level above the <c>RunBase</c> or
    /// <c>RunBaseBatch</c> class. Derivative classes also implement this method so that a whole object can
    /// be unpacked for <c>SysLastValues</c>.
    /// </remarks>
    public void unpackSysLastValues(container _packedValues)
    {
        container baseClassPackedValues;
        Version version = RunBase::getVersion(_packedValues);

        switch (version)
        {
            case #SysLastValuesCurrentVersion:
                [version, #SysLastValuesList, baseClassPackedValues] = _packedValues;
                super(baseClassPackedValues);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the state of the internal variables.
    /// </summary>
    /// <param name="_calledFrom">
    /// Identifies the object from which this method is called. The default value is null.
    /// </param>
    /// <returns>
    /// true if the internal variables are valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method must validate the state of the internal variables. It is called before closing the
    /// dialog, and should be called in the <c>run</c> method.It must only contain code that adds warnings
    /// to the Infolog.The throw command is not allowed in this method.The method should generally return
    /// errors using the <c>Global::CheckFailed</c> method.Export formats that are designed to handle only
    /// one method of payment per payment media must call the <c>checkUniquePaymMode</c> method.
    /// </remarks>
    public boolean validate(Object _calledFrom = null)
    {
        Currency currency;
        BankAccountTable bankAccountTable;
        boolean ok = true;
        boolean currencyOk = false;
        boolean noCanadianCurrency = true;
        boolean noUSCurrency = true;

        bankAccountTable = this.getBankAccountTable();
        if (bankAccountTable)
        {
            ok = BankAccountTable::checkIsActive(bankAccountTable.AccountID);
        }
        else
        {
            ok = checkFailed(strFmt("@SYS26720", accountId));
        }

        if (ok)
        {
            // If we are only paying Canadian currency transactions
            if (currencyCanadaUS == CurrencyCanadaUS::Canada)
            {
                // Verify that the currency of the bank is the same as the currency code for the Canadian Dollar ISO code (CAD).
                currency.selectForUpdate(false);
                while select CurrencyCode from currency
                    where currency.CurrencyCodeISO == ISOCurrencyCodeHelper::getISOCurrencyCodeAlpha(ISOCurrencyCodes::CAD)
                {
                    noCanadianCurrency = false;
                    if (currency.CurrencyCode == bankAccountTable.CurrencyCode)
                    {
                        currencyOk = true;
                        break;
                    }
                }

                if (noCanadianCurrency)
                {
                    ok = checkFailed("@SYS98121");
                }

                if (!currencyOk)
                {
                    ok = checkFailed(strFmt("@SYS98120", this.parmBankAccountID()));
                }
            }
            else if (currencyCanadaUS == CurrencyCanadaUS::US)
            {
                // Verify that the currency of the bank is the same as the currency code for the US Dollar ISO code (USD).
                currency.selectForUpdate(false);
                while select CurrencyCode from currency
                    where currency.CurrencyCodeISO == ISOCurrencyCodeHelper::getISOCurrencyCodeAlpha(ISOCurrencyCodes::USD)
                {
                    noUSCurrency = false;
                    if (currency.CurrencyCode == bankAccountTable.CurrencyCode)
                    {
                        currencyOk = true;
                        break;
                    }
                }

                if (noUSCurrency)
                {
                    ok = checkFailed("@SYS115581");
                }

                if (!currencyOk)
                {
                    ok = checkFailed(strFmt("@SYS115583", this.parmBankAccountID()));
                }
            }
        }

        if (ok)
        {
            if (!filename)
            {
                ok = checkFailed("@SYS18624");
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateHeaderValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the details that are required by the export format.
    /// </summary>
    /// <returns>
    /// true if validation succeeded; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Validates the following details that are required by the export format:
    /// <list type="bullet">
    /// <item>
    /// <description>Methods of payment - Vendor: Last file number is not equal or greater than
    /// 9999.</description>
    /// </item>
    /// <item>
    /// <description>Company information: Company name is not blank.</description>
    /// </item>
    /// <item>
    /// <description>Bank account: Company ID is not blank.</description>
    /// </item>
    /// </list>
    /// If any one of these validations fail, an appropriate error message is provided and the file export
    /// will not occur.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean validateHeaderValues()
    {
        boolean ok = true;

        // The next last file number used for this format will exceed 9999.
        if (this.getUniquePaymModeTable().LastSequenceNumber + 1 > 9999)
        {
            ok = checkFailed(strFmt("@SYS98755", this.getUniquePaymModeTable().PaymMode));
        }

        // Company Name field is blank.
        if (strLTrim(this.parmRBCClientName()) == '')
        {
            ok = checkFailed(strFmt("@SYS98756", this.getUniquePaymModeTable().PaymMode));
        }

        // The Comany ID value for the selected bank is not valid (value was empty).
        if (this.getRBCClientNumber() == AllZeros)
        {
            ok = checkFailed(strFmt(
                "@SYS98757",
                this.getUniquePaymModeTable().PaymMode,
                this.getBankAccountTable().AccountID));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return new CustOutPaym_RBC().interfaceName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for executing the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>