<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccountingDistributionProcessorPSN_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Extends the core <c>AccountingDistributionProcessor</c> for public sector specific scenarios.
/// </summary>
[ExtensionOf(classStr(AccountingDistributionProcessor))]
final public class AccountingDistributionProcessorPSN_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getActiveDistributionQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// If the source document being processed is for carry-forward Purchase Orders associated to a Purchase Commitment,
    /// the active distribution query needs to be altered so both the closing and opening transactions are not considered
    /// active.
    /// </summary>
    [Hookable(false)]
    public static Query getActiveDistributionQuery(
        SourceDocumentLineRecId _sourceDocumentLineRecId,
        MonetaryAmount _monetaryAmount,
        boolean _buildAllSourceDocumentAmounts,
        boolean _forUpdate)
    {
        Query query = next getActiveDistributionQuery(
            _sourceDocumentLineRecId,
            _monetaryAmount,
            _buildAllSourceDocumentAmounts,
            _forUpdate);

        if (PurchCommitmentCarryFwdPOAcctDist_PSNFlight::instance().isEnabled()
            && PublicSectorUtils::isFrenchRegulatoryEnabled()
            && SourceDocumentLine::findTopParentSourceDocumentLine(_sourceDocumentLineRecId).TypeEnumName == enumStr(SourceDocumentLine_ProductOrder))
        {
            PurchLine purchLine;
            AccountingDistribution accountingDistribution;
            AccountingEvent accountingEvent;

            select firstonly PurchCommitmentLine_PSN from purchLine
                where purchLine.SourceDocumentLine == _sourceDocumentLineRecId
                exists join accountingDistribution
                    where accountingDistribution.SourceDocumentLine == purchLine.SourceDocumentLine
                exists join accountingEvent
                    where accountingEvent.Type == AccountingEventType::PeriodOpen;

            if (purchLine.PurchCommitmentLine_PSN)
            {
                QueryBuildDataSource accountingDistributionPrimaryQBDS = query.dataSourceTable(tableNum(AccountingDistribution), 1);

                // If the accounting distribution being processed is a year-end closing type distribution, and a year-end opening
                // distribution exists as well for a later year, then it should not be considered part of the active distributions.

                QueryBuildDataSource yearEndEventQBDS = accountingDistributionPrimaryQBDS.addDataSource(tableNum(AccountingEvent));
                yearEndEventQBDS.joinMode(JoinMode::NoExistsJoin);
                yearEndEventQBDS.addLink(fieldNum(AccountingDistribution, AccountingEvent), fieldNum(AccountingEvent, RecId), accountingDistributionPrimaryQBDS.name());
                yearEndEventQBDS.addRange(fieldNum(AccountingEvent, Type)).value(queryValue(AccountingEventType::PeriodClose));

                QueryBuildDataSource yearOpenEventQBDS = yearEndEventQBDS.addDataSource(tableNum(AccountingEvent));
                yearOpenEventQBDS.joinMode(JoinMode::ExistsJoin);
                yearOpenEventQBDS.addLink(fieldNum(AccountingEvent, SourceDocumentHeader), fieldNum(AccountingEvent, SourceDocumentHeader), yearEndEventQBDS.name());
                yearOpenEventQBDS.addRange(fieldNum(AccountingEvent, Type)).value(queryValue(AccountingEventType::PeriodOpen));

                str range = strFmt(
                    '(%1.%2 < %3.%4)',
                    yearEndEventQBDS.name(), 
                    fieldStr(AccountingEvent, AccountingDate), 
                    yearOpenEventQBDS.name(), 
                    fieldStr(AccountingEvent, AccountingDate));

                yearOpenEventQBDS.addRange(fieldNum(AccountingEvent, AccountingDate)).value(range);

                QueryBuildDataSource accountingDistributionOpenQBDS = yearOpenEventQBDS.addDataSource(tableNum(AccountingDistribution));
                accountingDistributionOpenQBDS.addLink(fieldNum(AccountingEvent, RecId), fieldNum(AccountingDistribution,AccountingEvent));

                range = strFmt(
                    '(%1.%2 = %3.%4)',
                    accountingDistributionOpenQBDS.name(),
                    fieldStr(AccountingDistribution, SourceDocumentLine),
                    accountingDistributionPrimaryQBDS.name(),
                    fieldStr(AccountingDistribution, SourceDocumentLine));

                accountingDistributionOpenQBDS.addRange(fieldNum(AccountingDistribution, SourceDocumentLine)).value(range);
            }
        }

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>