<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostSelectPeriodState</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostSelectPeriodState</c> class represents the user selected period or date range.
/// </summary>
public class CostSelectPeriodState
{
    const DateCode  blankDateCode = '';
    date        fromDate;
    date        toDate;
    DateCode    periodCode;
    const int currentVersion = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CostSelectPeriodState construct()
    {
        return new CostSelectPeriodState();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateCode</Name>
				<Source><![CDATA[
    public DateCode parmDateCode(DateCode _periodCode = periodCode)
    {
        if (!prmIsDefault(_periodCode))
        {
            periodCode = _periodCode;

            this.updateDatesFromCode();
        }

        return periodCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public date parmFromDate(date _fromDate = fromDate)
    {
        if (!prmIsDefault(_fromDate))
        {
            fromDate = _fromDate;
            this.updateCodeFromDates();
        }

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public date parmToDate(date _toDate = toDate)
    {
        if (!prmIsDefault(_toDate))
        {
            toDate = _toDate;
            this.updateCodeFromDates();
        }

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [currentVersion, fromDate, toDate, periodCode];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _con)
    {
        int version = conPeek(_con, 1);

        if (version == currentVersion)
        {
            this.parmFromDate(conPeek(_con, 2));
            this.parmToDate(conPeek(_con, 3));
            this.parmDateCode(conPeek(_con, 4));
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDatesFromCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the date ranges as a result of changing the period code.
    /// </summary>
    private void updateDatesFromCode()
    {
        if (this.periodCode)
        {
            var ledgerPeriodCode = LedgerPeriodCode::find(this.periodCode);
            this.fromDate = ledgerPeriodCode.fromDate();
            this.toDate = LedgerPeriodCode.toDate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCodeFromDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the period code as a result of changing the dates.
    /// </summary>
    private void updateCodeFromDates()
    {
        this.periodCode = blankDateCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromFiscalYearPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates an instance of <c>CostSelectPeriodState</c> with from and to dates set to current period start and end dates respectively.
    /// </summary>
    /// <returns>An instance of <c>CostSelectPeriodState</c>.</returns>
    public static CostSelectPeriodState newFromFiscalYearPeriod()
    {
        var fiscalYearPeriod = LedgerFiscalCalendar::findPeriodByPeriodCodeDate(Ledger::fiscalCalendar(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

        var state = CostSelectPeriodState::construct();
        state.parmFromDate(fiscalYearPeriod.StartDate);
        state.parmToDate(fiscalYearPeriod.EndDate);

        return state;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDaysInDateRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates a number of days within a gived date range.
    /// </summary>
    /// <returns>A <c>NumberOfDays</c> value.</returns>
    public NumberOfDays getDaysInDateRange()
    {
        var numberOfDays = date2Num(this.parmToDate()) - date2Num(this.parmFromDate()) + 1;
        return numberOfDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>asDateInterval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a date interval representing the period.
    /// </summary>
    /// <returns>A <c>DateInterval</c> displaying the from and to date.</returns>
    public DateInterval asDateInterval()
    {
        return strFmt('%1 - %2', date2StrUsr(fromDate), date2StrUsr(toDate));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>