<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JournalFormTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The classes which are post fixed with Form, FormTable and FormTrans contains the code used to
///    control and manage the header and line forms.
/// </summary>
// This class contains methods to handle form controls in the journalTable form
// Calls to the methods has to be inserted in the journalTable form.
// The name of the methods indicate where the call must be placed.
// Example: DatasourceActivePre
// This method has to be inserted before super() in the datasource active method.
class JournalFormTable extends JournalForm
{
    #MACROLIB.resAppl

    // Form controls

    FormRun                     formRun;
    Object                      formRunObject;
    FormRun                     formRunLines;

    FormGridControl             ctrlOverview;
    FormComboBoxControl         ctrlAllOpenPosted;
    FormComboBoxControl         ctrlJournalTypeGrid;
    FormStringControl           ctrlJournalIdGrid;
    FormStringControl           ctrlJournalIdTab;
    FormCheckBoxControl         ctrlMarkUserBlock;
    FormCheckBoxControl         ctrlMarkInUseBlock;
    FormCheckBoxControl         ctrlSystemBlocked;
    FormFunctionButtonControl   ctrlLines;
    FormFunctionButtonControl   ctrlCheckJournal;
    FormMenuButtonControl       ctrlValidationMenu;
    FormFunctionButtonControl   ctrlPostJournal;
    FormFunctionButtonControl   ctrlCreateNew;
    FormButtonControl           ctrlInfolog;
    FormButtonControl           ctrlInitTotals;
    // <GEEPL>
    FormFunctionButtonControl   ctrlPrintJournal;
    // </GEEPL>

    FormWindowControl           ctrlBlockImage;
    // Form datasource

    JournalTableMap             journalTable;
    FormDataSource              journalTable_ds;

    // Query
    QueryBuildDataSource        rangeDataSource;
    QueryBuildRange             criteriaBlockUserId;
    QueryBuildRange             criteriaPosted;
    QueryBuildRange             criteriaBlockUserGroupId;
    QueryBuildRange             criteriaJournalType;

    // Journaltype

    boolean                     journalTypeFixed;
    Integer                     journalTypeId;

    // Journal status filtering

    boolean                     postingStatusFilterEnabled; // to control journal posting status filtering when ctrlAllOpenPosted is not present
    AllOpenPosted               postingStatusFilter = AllOpenPosted::All;

    // Temp variable

    str                         menuItemNameCreateNew;

    boolean                     dropJournalIdGetNew;

    UnknownNoYes                formHasMethodInitControls;
    UnknownNoYes                formHasMethodEnableButtonsActive;
    UnknownNoYes                formHasMethodEnableFieldsActive;
    UnknownNoYes                formHasMethodInitDatasourceAllow;

    NumberSeqFormHandler        numberSeqFormHandler;

    #isoCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buttonClickedCreateNewPost</Name>
				<Source><![CDATA[
    public void buttonClickedCreateNewPost()
    {
        ctrlCreateNew.menuItemName(menuItemNameCreateNew);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buttonClickedCreateNewPre</Name>
				<Source><![CDATA[
    public boolean buttonClickedCreateNewPre()
    {
        if (!ctrlCreateNew || !journalTypeFixed || !this.standardJournalNameId(journalTypeId))
        {
            return false;
        }

        menuItemNameCreateNew = ctrlCreateNew.menuItemName();
        ctrlCreateNew.menuItemName(ctrlLines.menuItemName());

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJournalFree</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the journal is not blocked by user or system.
    /// </summary>
    /// <param name = "_journalTable">The journal table.</param>
    /// <returns>
    /// true if the journal is not blocked; otherwise, false.
    /// </returns>
    public boolean isJournalFree(JournalTableMap _journalTable = journalTable)
    {
        JournalBlockLevel journalBlockLevel = JournalTableData::journalBlockLevel(_journalTable);

        return journalBlockLevel == JournalBlockLevel::None
            || (journalBlockLevel == JournalBlockLevel::InUse && _journalTable.SessionId == sessionId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>assertJournalNotInUse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Redraws the form block status and throws an error when the journal is blocked.
    /// </summary>
    /// <param name = "_revertChanges">Reverts changes made to the form.</param>
    /// <remarks>
    /// Throwing errors will halt processesing such as in button click events.
    /// This is used to notify a user that the journal has become locked since they last refreshed the form.
    /// </remarks>
    public void assertJournalNotInUse(boolean _revertChanges = false)
    {
        this.refreshBlockStatus();

        if (!this.isJournalFree(journalTable))
        {
            if (_revertChanges)
            {
                this.revertDataChanges();
            }

            throw error(strFmt("@SYS18418", journalTable.JournalId, new xSession(journalTable.SessionId).userId()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshBlockStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the active record when there is a change in block status.
    /// </summary>
    public void refreshBlockStatus()
    {
        JournalTableMap journalTableTmp = journalTableData.journalStatic().findJournalTable(journalTable.JournalId, true);

        if (this.isJournalFree(journalTableTmp) != this.isJournalFree(journalTable))
        {
            journalTable.data(journalTableTmp);

            if (journalTableTmp.RecId == journalTable.RecId)
            {
                journalTable_ds.setCurrent();
                journalTable_ds.active();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>revertDataChanges</Name>
				<Source><![CDATA[
    private void revertDataChanges()
    {
        #Task
        this.formRun().task(#taskRestore);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buttonClickedInitTotals</Name>
				<Source><![CDATA[
    public void buttonClickedInitTotals()
    {
        journalTableData.updateBlock(JournalBlockLevel::None,JournalBlockLevel::None);
        this.updateFormCacheCurrent(journalTableData.journalTable(),true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buttonClickedShowInfolog</Name>
				<Source><![CDATA[
    public void buttonClickedShowInfolog()
    {
        journalTableData.journalErrorTransList(null).initDb();       // reload
        journalTableData.journalErrorVoucherList(null).initDb();     // reload

        infolog.infoActionObject(this);
        journalTableData.infolog();
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceActivePost</Name>
				<Source><![CDATA[
    public void datasourceActivePost()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceActivePre</Name>
				<Source><![CDATA[
    public void datasourceActivePre()
    {
        if (journalTableData.canBeAutoUnlocked(formRun && !formRun.inViewMode()))
        {
            journalTableData.updateBlock(JournalBlockLevel::None,JournalBlockLevel::None);
            journalTable_ds.setCurrent();
            journalTable_ds.refresh();
        }

        if (!journalTypeFixed)
        {
            this.initControls(journalTable.JournalType);
            journalTypeId = journalTable.JournalType;
        }

        this.initDatasourceAllow();
        this.enableButtonsActive();
        this.enableFieldsActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceCreatePost</Name>
				<Source><![CDATA[
    public void datasourceCreatePost()
    {
        if (ctrlMarkUserBlock)
        {
            ctrlMarkUserBlock.value(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceCreatePre</Name>
				<Source><![CDATA[
    public boolean datasourceCreatePre()
    {
        boolean allowCreate = !ctrlAllOpenPosted || (ctrlAllOpenPosted.selection() != AllOpenPosted::Posted);

        try
        {
            if (!dropJournalIdGetNew && numberSeqFormHandler)
            {
                numberSeqFormHandler.formMethodDataSourceCreatePre();
            }
        }
        catch(Exception::Error)
        {
            allowCreate = false;
        }

        if (formRunLines && allowCreate)
        {
            formRunLines.close();
            formRunLines = null;
        }

        return allowCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceDeletePost</Name>
				<Source><![CDATA[
    public void datasourceDeletePost()
    {
        if (numberSeqFormHandler)
        {
            numberSeqFormHandler.formMethodDataSourceDelete();
        }

        journalTable_ds.reread(); // in case last record is deleted
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceExecuteQueryPost</Name>
				<Source><![CDATA[
    public void datasourceExecuteQueryPost()
    {
        if (!journalTable.RecId)
        {
            if (journalTypeFixed)
            {
                journalTable.JournalType = journalTypeId;    // Ensure that correct journal type is used for next calls
            }
            this.enableButtonsActive();
            this.enableFieldsActive();

            if (formRunLines)
            {
                formRunLines.close();
                formRunLines = null;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceExecuteQueryPre</Name>
				<Source><![CDATA[
    public void datasourceExecuteQueryPre()
    {
        this.setCriteriaPostedAndJournalTypeValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formInitPostWithSavedViewFilterValue</Name>
				<Source><![CDATA[
    public void formInitPostWithSavedViewFilterValue()
    {
        if (ProjJournalFormSavedViewFilterFlight::instance().isEnabled())
        {
            this.setCriteriaPostedAndJournalTypeValue();
            this.setCriteriaBlockUserValue();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCriteriaPostedAndJournalTypeValue</Name>
				<Source><![CDATA[
    private void setCriteriaPostedAndJournalTypeValue()
    {
        criteriaPosted.value(this.valueAllOpenPosted());
        criteriaJournalType.value(this.valueJournalType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCriteriaBlockUserValue</Name>
				<Source><![CDATA[
    private void setCriteriaBlockUserValue()
    {
        criteriaBlockUserId.value(SysQuery::valueEmptyString() + ',' + (queryValue(curUserId())));
        criteriaBlockUserGroupId.value(SysQuery::valueEmptyString() + ',' + (UserGroupList::groupsForUser()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceInitPost</Name>
				<Source><![CDATA[
    public void datasourceInitPost(JournalTableMap _journalTable)
    {
        journalTable        = _journalTable;
        journalTable_ds     = FormDataUtil::getFormDataSource(_journalTable);

        journalTableData    = JournalTableData::newTable(_journalTable);

        if (journalTable_ds)
        {
            this.queryAddRange();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceInitValuePost</Name>
				<Source><![CDATA[
    public void datasourceInitValuePost()
    {
        if (!dropJournalIdGetNew && numberSeqFormHandler)
        {
            numberSeqFormHandler.formMethodDataSourceCreate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceLeavePre</Name>
				<Source><![CDATA[
    public boolean datasourceLeavePre()
    {
        if (numberSeqFormHandler && numberSeqFormHandler.lastUncommitedNumber())
        {
            error(strFmt("@SYS85169", numberSeqFormHandler.lastUncommitedNumber()));
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceLinkActivePre</Name>
				<Source><![CDATA[
    public void datasourceLinkActivePre()
    {
        this.initJournalTypeFromCaller();

        if (numberSeqFormHandler)
        {
            numberSeqFormHandler.formMethodDataSourceLinkActive();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceMethodInUseBlock</Name>
				<Source><![CDATA[
    public JournalMarkInUseBlock datasourceMethodInUseBlock(
        boolean                 _set,
        JournalTableMap         _journalTable,
        JournalMarkInUseBlock   _value)
    {
        if (_set)
        {
            if (!_value && _journalTable.SessionId)
            {
                if (formRunLines)
                {
                    formRunLines.close();
                }
                else
                {
                    journalTableData.updateBlock(JournalBlockLevel::None,JournalBlockLevel::None);
                    this.updateFormCacheCurrent(journalTableData.journalTable());
                    journalTable_ds.active();
                }
            }
        }
        return journalTableData.blockLevel() == JournalBlockLevel::InUse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceMethodInUseUserId</Name>
				<Source><![CDATA[
    public JournalBlockInUseUserId datasourceMethodInUseUserId(JournalTableMap _journalTable)
    {
        JournalBlockInUseUserId userUsingJournal = '';

        if (_journalTable.SessionId)
        {
            xSession journalSession = new xSession(_journalTable.SessionId);

            // Check that the login date time on the journal matches the login date time
            // of the session associated with the journal
            if (journalSession.loginDateTime() == _journalTable.SessionLoginDateTime)
            {
                // If so, the user associated with the journal's session is actively using the journal 
                userUsingJournal = journalSession.userId();
            }
        }

        return userUsingJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceMethodLockImage</Name>
				<Source><![CDATA[
    public container datasourceMethodLockImage(JournalTableMap _journalTable)
    {
        switch (journalTableData.blockLevel(_journalTable))
        {
            case JournalBlockLevel::InUse  :    return ImageReference::constructForSymbol(ImageReferenceSymbol::InUse, strFmt("@SYS69035", _journalTable.JournalId)).pack();
            case JournalBlockLevel::System : 
                if (_journalTable.TableId == tableNum(InventJournalTable) || _journalTable.TableId == tableNum(WMSJournalTable))
				{
                    if (xUserInfo::checkUserRole(roleStr(InventMaterialsManager))
						|| xUserInfo::checkUserRole(roleStr(InventQualityControlManager)) 
						|| xUserInfo::checkUserRole(roleStr(WMSWarehouseManager)) 
						|| Global::isSystemAdministrator())
                    {
                        return ImageReference::constructForSymbol(ImageReferenceSymbol::Lock, strFmt("@SCM:InventJournalUnlockNotificationBodyTextForPermissionUserWithFeatureEnabled", _journalTable.JournalId)).pack();
					}
					else 
                    {
                        return ImageReference::constructForSymbol(ImageReferenceSymbol::Lock, strFmt("@SCM:InventJournalUnlockNotificationBodyTextForNonPermissionUserWithFeatureEnabled", _journalTable.JournalId)).pack();
					}
				}
				else
				{
					return ImageReference::constructForSymbol(ImageReferenceSymbol::Lock, strFmt("@SYS21618", _journalTable.JournalId)).pack();
				}
            default:                            return conNull();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>switchFormView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Switches the form's view mode.
    /// </summary>
    /// <param name = "_formViewOption">The view option to switch to.</param>
    public void switchFormView(FormViewOption _formViewOption)
    {
        #task

        switch (_formViewOption)
        {
            case FormViewOption::Details:
                formRun.task(#taskSwitchToLineDetailsView);
                formRun.firstField(); // Set focus to any focusable control in the Lines view.
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceReReadPost</Name>
				<Source><![CDATA[
    public void datasourceReReadPost()
    {
        this.enableButtonsActive();
        this.enableFieldsActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceValidateDeletePost</Name>
				<Source><![CDATA[
    public boolean datasourceValidateDeletePost(boolean _ret)
    {
        if (!journalTable.Posted && journalTableData.hasLines())
        {
            _ret = _ret && Box::yesNo(strFmt("@SYS71705",journalTable.JournalId),DialogButton::No);
        }

        return _ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceValidateWritePost</Name>
				<Source><![CDATA[
    public boolean datasourceValidateWritePost(boolean _ret)
    {
        if (journalTypeFixed && journalTable.JournalType != journalTypeId)
        {
            _ret = _ret && checkFailed(journalTableData.journalStatic().wrongJournalTypeMessage(journalTypeId));
        }

        if (numberSeqFormHandler)
        {
            _ret = _ret && numberSeqFormHandler.formMethodDataSourceValidateWrite(_ret);
        }

        return _ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceWritePost</Name>
				<Source><![CDATA[
    public void datasourceWritePost()
    {
        if (numberSeqFormHandler)
        {
            numberSeqFormHandler.formMethodDataSourceWrite();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryForLookupJournalName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the query for the journal name lookup.
    /// </summary>
    /// <returns>The query.</returns>
    protected Query queryForLookupJournalName()
    {
        JournalStatic           journalStatic = journalTableData.journalStatic();
        
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource = query.addDataSource(journalStatic.journalName().TableId);
        
        queryBuildDataSource.addRange(journalStatic.nameFieldIdJournalType()).value(journalTypeFixed ? (queryValue(journalTypeId)) : SysQuery::valueUnlimited());
        queryBuildDataSource.addRange(journalStatic.nameFieldIdBlockUserGroupId()).value((UserGroupList::groupsForUser()));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>designLookupJournalName</Name>
				<Source><![CDATA[
    public void designLookupJournalName(FormStringControl _ctrl)
    {
        JournalStatic   journalStatic = journalTableData.journalStatic();
        SysTableLookup  sysTableLookup = SysTableLookup::newParameters(journalStatic.journalName().TableId,_ctrl);
        
        Query           query = this.queryForLookupJournalName();

        sysTableLookup.addLookupfield(journalStatic.nameFieldIdJournalNameId());
        sysTableLookup.addLookupfield(journalStatic.nameFieldIdDescription());

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>designModifiedMarkUserBlockPost</Name>
				<Source><![CDATA[
    public void designModifiedMarkUserBlockPost()
    {
        if (!journalTable_ds.validateWrite())
        {
            return;
        }

        if (ctrlMarkUserBlock.value())
        {
            journalTable.BlockUserId = curUserId();
        }
        else
        {
            journalTable.BlockUserId = '';
        }

        journalTable_ds.write();
        journalTable_ds.refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>designSelectionChangeAllOpenPosted</Name>
				<Source><![CDATA[
    public void designSelectionChangeAllOpenPosted()
    {
        // Don't execute the query when initalizing the form's controls
        if (journalTable_ds && journalTable_ds.queryRun())
        {
            this.datasourceApplyFilter();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceApplyFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Execute and manage the filter pane and quick filter control queries.
    /// </summary>
    protected void datasourceApplyFilter()
    {
        Query initialQuery = new Query(journalTable_ds.query());

        // The queries can become different after the user modifies the ranges in the filter pane.
        // In order to keep those modified ranges, we have to update query.
        Query updatedQuery = new Query(journalTable_ds.queryRun().query());
        journalTable_ds.query(updatedQuery);
        this.queryAddRange();

        journalTable_ds.executeQuery();

        // The filter pane reset removes the difference between queryRun and query. In order for the
        // reset to work, since they are now equivalent, we have to set query back to the initial value
        // and then set the range values for the current quick filter controls.
        journalTable_ds.query(initialQuery);
        this.queryAddRange();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dropJournalIdGetNew</Name>
				<Source><![CDATA[
    public boolean dropJournalIdGetNew(boolean _drop = dropJournalIdGetNew)
    {
        dropJournalIdGetNew = _drop;
        return dropJournalIdGetNew;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButtonsActive</Name>
				<Source><![CDATA[
    public void enableButtonsActive(boolean _enableInfolog = true)
    {
        boolean enabled = journalTable.JournalNameId && this.isJournalFree();

        if (ctrlLines)
        {
            ctrlLines.enabled(enabled);
        }

        if (ctrlCheckJournal)
        {
            ctrlCheckJournal.enabled(enabled && !journalTable.Posted);
        }

        if (ctrlValidationMenu)
        {
            ctrlValidationMenu.enabled(enabled && !journalTable.Posted);
        }

        if (ctrlPostJournal)
        {
            ctrlPostJournal.enabled(enabled && !journalTable.Posted);
        }

        if (ctrlCreateNew && ctrlAllOpenPosted)
        {
            ctrlCreateNew.enabled(ctrlAllOpenPosted.selection() != AllOpenPosted::Posted);
        }

        if (ctrlInfolog && _enableInfolog)
        {
            ctrlInfolog.enabled(journalTableData.hasErrors());
        }

        if (ctrlInitTotals)
        {
            ctrlInitTotals.enabled(enabled);
        }

        if (formHasMethodEnableButtonsActive == UnknownNoYes::Unknown)
        {
            formHasMethodEnableButtonsActive = formHasMethod(formRun,identifierStr(enableButtonsActive)) ? UnknownNoYes::Yes : UnknownNoYes::No;
        }

        if (formHasMethodEnableButtonsActive == UnknownNoYes::Yes)
        {
            formRunObject.enableButtonsActive();
        }
        //<GEEPL>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            if (ctrlPrintJournal)
            {
                ctrlPrintJournal.enabled(enabled);
            }
        }
        //</GEEPL>
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableFieldsActive</Name>
				<Source><![CDATA[
    public void enableFieldsActive()
    {
        if (journalTableData.journalStatic().tableFieldIdBlockUserGroupId() && journalTable_ds)
        {
            journalTable_ds.object(journalTableData.journalStatic().tableFieldIdBlockUserGroupId()).allowEdit(journalTable.BlockUserId ? false : true);
        }

        if (ctrlMarkUserBlock)
        {
            ctrlMarkUserBlock.value(journalTable.BlockUserId ? true : false);
            ctrlMarkUserBlock.allowEdit(!formRunLines && journalTable.JournalId && !journalTable.BlockUserGroupId ? true : false);
        }

        if (ctrlSystemBlocked)
        {
            ctrlSystemBlocked.allowEdit(journalTable.SystemBlocked ? true : false);
        }

        if (ctrlMarkInUseBlock)
        {
            ctrlMarkInUseBlock.allowEdit(!this.isJournalFree(journalTable));
        }

        if (formHasMethodEnableFieldsActive == UnknownNoYes::Unknown)
        {
            formHasMethodEnableFieldsActive = formHasMethod(formRun,identifierStr(enableFieldsActive)) ? UnknownNoYes::Yes : UnknownNoYes::No;
        }

        if (formHasMethodEnableFieldsActive == UnknownNoYes::Yes)
        {
            formRunObject.enableFieldsActive();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedBlockUserGroupId</Name>
				<Source><![CDATA[
    public void fieldModifiedBlockUserGroupId()
    {
        if (!journalTable_ds.validateWrite())
        {
            return;
        }

        journalTable_ds.write();
        journalTable_ds.refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedJournalNameIdPost</Name>
				<Source><![CDATA[
    public void fieldModifiedJournalNameIdPost()
    {
        if (!journalTypeFixed)
        {
            this.initControls(journalTypeId);
        }

        journalTableData.initFromJournalName(journalTableData.journalStatic().findJournalName(journalTable.JournalNameId));

        this.enableButtonsActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedSystemBlockedPost</Name>
				<Source><![CDATA[
    public void fieldModifiedSystemBlockedPost()
    {
        if (!journalTable.SystemBlocked)
        {
            if (formRunLines)
            {
                formRunLines.close();
            }

            journalTableData.updateBlock(JournalBlockLevel::None,JournalBlockLevel::None);
            this.updateFormCacheCurrent(journalTableData.journalTable());
            journalTable_ds.active();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldValidateJournalNameIdPost</Name>
				<Source><![CDATA[
    public boolean fieldValidateJournalNameIdPost(boolean _ret)
    {
        Integer          journalNameTypeId;
        JournalNameMap   journalName = journalTableData.journalStatic().findJournalName(journalTable.JournalNameId);

        journalNameTypeId = journalName.JournalType;

        if (journalTypeFixed && journalTypeId != journalNameTypeId)
        {
            _ret = _ret && checkFailed(journalTableData.journalStatic().wrongJournalTypeMessage(journalTypeId));
        }

        if (_ret && !JournalStatic::hasUserAccessForGroupId(journalName.BlockUserGroupId))
        {
            _ret = false;
        }

        return _ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecord</Name>
				<Source><![CDATA[
    public void findRecord(JournalTransMap _journalTrans)
    {
        JournalFormTrans    journalFormTrans;
        Object              object;

        if (!formRunLines)
        {
            this.openLinesForm();
        }

        if (formRunLines)
        {
            object = formRunLines;
            journalFormTrans = object.journalForm();
            journalFormTrans.findRecord(_journalTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formClosePre</Name>
				<Source><![CDATA[
    public void formClosePre()
    {
        if (numberSeqFormHandler)
        {
            numberSeqFormHandler.formMethodClose();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formFirstFieldPost</Name>
				<Source><![CDATA[
    public void formFirstFieldPost()
    {
        if (ctrlOverview)
        {
            ctrlOverview.setFocus();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formInitPost</Name>
				<Source><![CDATA[
    public void formInitPost()
    {
        boolean allowEdit;

        this.initAllOpenPostedFromCaller();
        this.initJournalTypeFromCaller();

        numberSeqFormHandler = NumberSeqFormHandler::newForm(journalTableData.journalStatic().numRefJournalId().NumberSequenceId,
                                                             formRun,
                                                             journalTable_ds,
                                                             journalTableData.journalStatic().tableFieldIdJournalId());

        allowEdit = numberSeqFormHandler.fieldAllowEdit();
        if (ctrlJournalIdGrid)
        {
            ctrlJournalIdGrid.allowEdit(allowEdit);
        }
        if (ctrlJournalIdTab)
        {
            ctrlJournalIdTab.allowEdit(allowEdit);
        }
        // <GCN>
        if (! SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCN]) && ctrlJournalTypeGrid)
        {
            // </GCN>
            ctrlJournalTypeGrid.visible(journalTypeFixed ? false : true);
            // <GCN>
        }
        // </GCN>
        // <GCN>
        if (! SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCN]) && ctrlBlockImage)
        {
            // </GCN>
            ctrlBlockImage.imageList(imageListAppl.imageList());
            // <GCN>
        }
        // </GCN>

        this.initControls(journalTypeId);

        this.formInitPostWithSavedViewFilterValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formRun</Name>
				<Source><![CDATA[
    public FormRun formRun()
    {
        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formRunLines</Name>
				<Source><![CDATA[
    public FormRun formRunLines(FormRun _formRunLines = formRunLines)
    {
        formRunLines = _formRunLines;
        return formRunLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalFormTable</Name>
				<Source><![CDATA[
    public JournalForm getJournalFormTable()
    {
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allOpenPostedFromCaller</Name>
				<Source><![CDATA[
    [Hookable]
    protected AllOpenPosted allOpenPostedFromCaller()
    {
        AllOpenPosted postingStatusValue;

        if (!formRun)
        {
            postingStatusValue = AllOpenPosted::All;
        }
        else if (!formRun.args().dataset())
        {
            postingStatusValue = AllOpenPosted::Open;
        }
        else if (ProjJournalFormSavedViewFilterFlight::instance().isEnabled() 
            && formRun.args().dataset() == tableNum(ProjTable)
            && (formRun.args().parmEnum() == ProjJournalType::Hour 
                || formRun.args().parmEnum() == ProjJournalType::Revenue
                || formRun.args().parmEnum() == LedgerJournalType::Cost
                || formRun.args().parmEnum() == InventJournalType::project))
        {
            postingStatusValue = AllOpenPosted::Open;
        }
        else
        {
            postingStatusValue = AllOpenPosted::All;
        }

        JournalFormParameters journalFormParameters = formRun.args().parmObject() as JournalFormParameters;

        if (journalFormParameters && journalFormParameters.parmUseAllOpenPosted())
        {
            postingStatusValue = journalFormParameters.parmAllOpenPosted();
        }

        return postingStatusValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAllOpenPostedFromCaller</Name>
				<Source><![CDATA[
    protected void initAllOpenPostedFromCaller()
    {
        if (!ctrlAllOpenPosted && !postingStatusFilterEnabled)
        {
            return;
        }

        AllOpenPosted postingStatusValue = this.allOpenPostedFromCaller();

        if (ctrlAllOpenPosted)
        {
            ctrlAllOpenPosted.selection(postingStatusValue);
        }
        else if (postingStatusFilterEnabled)
        {
            postingStatusFilter = postingStatusValue;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initControls</Name>
				<Source><![CDATA[
    protected void initControls(Integer _journalTypeId)
    {
        if (ctrlLines)
        {
            ctrlLines.menuItemName(journalTableData.journalStatic().menuItemStrLines(_journalTypeId));
        }

        if (ctrlCreateNew)
        {
            ctrlCreateNew.visible(this.visibleCreateNew(_journalTypeId));
        }

        if (formHasMethodInitControls == UnknownNoYes::Unknown)
        {
            formHasMethodInitControls = formHasMethod(formRun,identifierStr(initControls)) ? UnknownNoYes::Yes : UnknownNoYes::No;
        }

        if (formHasMethodInitControls == UnknownNoYes::Yes)
        {
            formRunObject.initControls(_journalTypeId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDatasourceAllow</Name>
				<Source><![CDATA[
    public void initDatasourceAllow()
    {
        if (!journalTable_ds)
        {
            return;
        }

        journalTable_ds.allowDelete(this.isJournalFree());
        journalTable_ds.allowEdit(!journalTable.Posted);

        if (formHasMethodInitDatasourceAllow == UnknownNoYes::Unknown)
        {
            formHasMethodInitDatasourceAllow = formHasMethod(formRun,identifierStr(initDatasourceAllow)) ? UnknownNoYes::Yes : UnknownNoYes::No;
        }

        if (formHasMethodInitDatasourceAllow == UnknownNoYes::Yes)
        {
            formRunObject.initDatasourceAllow();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalTypeFromCaller</Name>
				<Source><![CDATA[
    [Hookable]
    protected void initJournalTypeFromCaller()
    {
        xArgs args;

        if (!formRun || !formRun.args())
        {
            journalTypeFixed    = false;
            return;
        }

        args = formRun.args();

        if (args.dataset()
         && args.dataset() == journalTable.TableId
         && args.record()
         && args.record().RecId != 0)
        {
            journalTypeId       = args.record().(journalTableData.journalStatic().tableFieldIdJournalType());
            journalTypeFixed    = true;
        }
        else if (args.dataset()
              && args.dataset() == journalTable.TableId
              && args.lookupRecord()
              && args.lookupRecord().RecId != 0)
        {
            journalTypeId       = args.lookupRecord().(journalTableData.journalStatic().tableFieldIdJournalType());
            journalTypeFixed    = true;
        }
        else if (args.parmEnumType())
        {
            journalTypeId       = args.parmEnum();
            journalTypeFixed    = true;
        }
        else if (args.lookupTable()
            && args.lookupTable() == journalTable.TableId
            && args.lookupField() == journalTableData.journalStatic().tableFieldIdJournalId()
            && args.caller()
            && args.caller().dataSource(1) != null
            && args.caller().dataSource(1).table() == journalTable.TableId)
        {
            // Lookup from a form showing journals to a specific journal
            Common localCursor  = args.caller().dataSource(1).cursor();
            journalTypeId       = localCursor.(journalTableData.journalStatic().tableFieldIdJournalType());
            journalTypeFixed    = true;
        }
        else
        {
            journalTypeFixed    = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDatasourceCreatePreOk</Name>
				<Source><![CDATA[
    protected boolean isDatasourceCreatePreOk()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIntercompanyJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the journal is an intercompany journal.
    /// </summary>
    /// <returns>
    /// true if the journal is an intercompany journal; otherwise, false.
    /// </returns>
    protected boolean isIntercompanyJournal()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalTable_DS</Name>
				<Source><![CDATA[
    public FormDataSource journalTable_DS()
    {
        return journalTable_ds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalTypeId</Name>
				<Source><![CDATA[
    public anytype journalTypeId()
    {
        return journalTypeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(FormRun _formRun)
    {
        formRun         = _formRun;
        formRunObject   = _formRun;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>openLinesForm</Name>
				<Source><![CDATA[
    public void openLinesForm()
    {
        Args                args;

        if (!formRunLines)
        {
            if (!ctrlLines)
            {
                return;
            }
            args = new Args();
            args.caller(formRun);
            args.record(journalTable);

            ctrlLines.menufunction().run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlAllOpenPosted</Name>
				<Source><![CDATA[
    public FormComboBoxControl parmCtrlAllOpenPosted(FormComboBoxControl _allOpenPosted = ctrlAllOpenPosted)
    {
        ctrlAllOpenPosted = _allOpenPosted;
        return ctrlAllOpenPosted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlBlockImage</Name>
				<Source><![CDATA[
    public FormWindowControl parmCtrlBlockImage(FormWindowControl _blockImage = ctrlBlockImage)
    {
        ctrlBlockImage = _blockImage;
        return ctrlBlockImage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlCheckJournal</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmCtrlCheckJournal(FormFunctionButtonControl _checkJournal = ctrlCheckJournal)
    {
        ctrlCheckJournal = _checkJournal;
        return ctrlCheckJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlValidationMenu</Name>
				<Source><![CDATA[
    public FormMenuButtonControl parmCtrlValidationMenu(FormMenuButtonControl _validationMenu = ctrlValidationMenu)
    {
        ctrlValidationMenu = _validationMenu;
        return ctrlValidationMenu;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlCreateNew</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmCtrlCreateNew(FormFunctionButtonControl _createNew = ctrlCreateNew)
    {
        ctrlCreateNew = _createNew;
        return ctrlCreateNew;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlInfolog</Name>
				<Source><![CDATA[
    public FormButtonControl parmCtrlInfolog(FormButtonControl _infolog = ctrlInfolog)
    {
        ctrlInfolog = _infolog;
        return ctrlInfolog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlInitTotals</Name>
				<Source><![CDATA[
    public FormButtonControl parmCtrlInitTotals(FormButtonControl _initTotals = ctrlInitTotals)
    {
        ctrlInitTotals = _initTotals;
        return ctrlInitTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlJournalIdGrid</Name>
				<Source><![CDATA[
    public FormStringControl parmCtrlJournalIdGrid(FormStringControl _journalIdGrid = ctrlJournalIdGrid)
    {
        ctrlJournalIdGrid = _journalIdGrid;
        return ctrlJournalIdGrid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlJournalIdTab</Name>
				<Source><![CDATA[
    public FormStringControl parmCtrlJournalIdTab(FormStringControl _journalIdTab = ctrlJournalIdTab)
    {
        ctrlJournalIdTab = _journalIdTab;
        return ctrlJournalIdTab;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlJournalTypeGrid</Name>
				<Source><![CDATA[
    public FormComboBoxControl parmCtrlJournalTypeGrid(FormComboBoxControl _journalTypeGrid = ctrlJournalTypeGrid)
    {
        ctrlJournalTypeGrid = _journalTypeGrid;
        return ctrlJournalTypeGrid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlLines</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmCtrlLines(FormFunctionButtonControl _lines = ctrlLines)
    {
        ctrlLines = _lines;
        return ctrlLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlMarkInUseBlock</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmCtrlMarkInUseBlock(FormCheckBoxControl _markInUseBlock = ctrlMarkInUseBlock)
    {
        ctrlMarkInUseBlock = _markInUseBlock;
        return ctrlMarkInUseBlock;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlMarkUserBlock</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmCtrlMarkUserBlock(FormCheckBoxControl _markUserBlock = ctrlMarkUserBlock)
    {
        ctrlMarkUserBlock = _markUserBlock;
        return ctrlMarkUserBlock;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlOverview</Name>
				<Source><![CDATA[
    public FormGridControl parmCtrlOverview(FormGridControl _overview = ctrlOverview)
    {
        ctrlOverview = _overview;
        return ctrlOverview;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlPostJournal</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmCtrlPostJournal(FormFunctionButtonControl _postJournal = ctrlPostJournal)
    {
        ctrlPostJournal = _postJournal;
        return ctrlPostJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmctrlPrintJournal</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmctrlPrintJournal(FormFunctionButtonControl _ctrlPrintJournal = ctrlPrintJournal)
    {
        ctrlPrintJournal = _ctrlPrintJournal;
        return ctrlPrintJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlSystemBlocked</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmCtrlSystemBlocked(FormCheckBoxControl _systemBlocked = ctrlSystemBlocked)
    {
        ctrlSystemBlocked = _systemBlocked;
        return ctrlSystemBlocked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingStatusFilterEnabled</Name>
				<Source><![CDATA[
    public boolean parmPostingStatusFilterEnabled(boolean _postingStatusFilterEnabled = postingStatusFilterEnabled)
    {
        postingStatusFilterEnabled = _postingStatusFilterEnabled;
        return postingStatusFilterEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds an additional query range to the query.
    /// </summary>
    public void queryAddRange()
    {
        JournalStatic journalStatic = journalTableData.journalStatic();
        rangeDataSource = journalTable_ds.query().dataSourceNo(1);

        if (journalStatic.tableFieldIdPosted())
        {
            criteriaPosted = SysQuery::findOrCreateRange(rangeDataSource, journalStatic.tableFieldIdPosted());
        }

        if (journalStatic.tableFieldIdBlockUserId())
        {
            criteriaBlockUserId = SysQuery::findOrCreateRange(rangeDataSource, journalStatic.tableFieldIdBlockUserId());

            // Locked for security so the user can not remove this range
            criteriaBlockUserId.status(RangeStatus::Locked);
        }

        if (journalStatic.tableFieldIdBlockUserGroupId())
        {
            criteriaBlockUserGroupId = SysQuery::findOrCreateRange(rangeDataSource, journalStatic.tableFieldIdBlockUserGroupId());

            // Locked for security so the user can not remove this range
            criteriaBlockUserGroupId.status(RangeStatus::Locked);
        }

        if (journalStatic.tableFieldIdJournalType())
        {
            criteriaJournalType = SysQuery::findOrCreateRange(rangeDataSource, journalStatic.tableFieldIdJournalType());

            // Locked for security so the user can not remove this range
            criteriaJournalType.status(RangeStatus::Locked);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runbaseMainCancel</Name>
				<Source><![CDATA[
    public void runbaseMainCancel(JournalId _journalId)
    {
        JournalTableData    otherJournalTableData;

        if (journalTableData && (!_journalId || _journalId == this.journalTable().JournalId))
        {
            journalTableData.updateBlock(JournalBlockLevel::System,JournalBlockLevel::None,false);

            this.updateFormCacheCurrent(journalTableData.journalTable(),true);

            if (journalTable_ds)
            {
                journalTable_ds.active();
            }
        }
        else if (_journalId)
        {
            ttsbegin;
            otherJournalTableData = JournalTableData::newTable(JournalStatic::findJournalTableId(this.journalTable().TableId, _journalId, true));
            otherJournalTableData.updateBlock(JournalBlockLevel::System,JournalBlockLevel::None,false);
            ttscommit;

            if (journalTable_ds)
            {
                journalTable_ds.research(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runbaseMainEnd</Name>
				<Source><![CDATA[
    public void runbaseMainEnd(
        JournalRunbaseCallbackable  _runBaseBatch,
        boolean                     _fromCatchError)
    {
        journalTableData.updateBlock(JournalBlockLevel::System,JournalBlockLevel::None,false);

        this.updateFormCacheCurrent(journalTableData.journalTable(), true);

        if (journalTable_ds)
        {
            journalTable_ds.active();
        }

        if (!_fromCatchError && _runBaseBatch.numOfTransferLines() > 0)
        {
            this.updateFormCacheTransferJournal(_runBaseBatch.transferJournalId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runbaseMainStart</Name>
				<Source><![CDATA[
    public void runbaseMainStart()
    {
        infolog.infoActionObject(this);

        journalTableData.updateBlock(JournalBlockLevel::None,JournalBlockLevel::System,false);

        this.updateFormCacheCurrent(journalTableData.journalTable(),true);

        if (journalTable_ds)
        {
            journalTable_ds.active();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFormCacheCurrent</Name>
				<Source><![CDATA[
    public void updateFormCacheCurrent(
        JournalTableMap     _journalTable,
        boolean             _doRefresh = false)
    {
        journalTable.data(_journalTable);

        if (journalTable_ds)
        {
            journalTable_ds.setCurrent();

            if (_doRefresh)
            {
                journalTable_ds.refresh();
            }
        }
        this.enableButtonsActive();
        this.enableFieldsActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFormCacheJournalTable</Name>
				<Source><![CDATA[
    public void updateFormCacheJournalTable(
        JournalTableMap _journalTable,
        boolean         _reDraw)
    {
        Integer             mark;
        JournalTableMap     journalTableFormCache;

        if (!journalTable_ds)
        {
            return;
        }

        while (mark < 2)
        {
            journalTableFormCache = journalTable_ds.getFirst(mark,false);
            while (journalTableFormCache)
            {
                if (_journalTable.RecId == journalTableFormCache.RecId)
                {
                    journalTableFormCache.data(_journalTable);

                    if (_journalTable.RecId == journalTable.RecId)
                    {
                        journalTable.data(_journalTable);
                        journalTable_ds.setCurrent();
                    }
                }

                journalTableFormCache = journalTable_ds.getNext();
            }
            mark++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueAllOpenPosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a query range value for the journal status to filter on.
    /// </summary>
    /// <returns>A string with query range value.</returns>
    protected str valueAllOpenPosted()
    {
        if (!ctrlAllOpenPosted && !postingStatusFilterEnabled)
        {
            return SysQuery::valueUnlimited();
        }

        AllOpenPosted postingStatusToFilterOn;
        if (ctrlAllOpenPosted)
        {
            postingStatusToFilterOn = ctrlAllOpenPosted.selection();
        }
        else if (postingStatusFilterEnabled)
        {
            postingStatusToFilterOn = postingStatusFilter;
        }

        switch (postingStatusToFilterOn)
        {
            case AllOpenPosted::All     : return SysQuery::valueUnlimited();
            case AllOpenPosted::Open    : return enum2Value(NoYes::No);
            case AllOpenPosted::Posted  : return enum2Value(NoYes::Yes);

            default: return SysQuery::valueUnlimited();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueJournalType</Name>
				<Source><![CDATA[
    protected str valueJournalType()
    {
        return journalTypeFixed ? queryValue(journalTypeId) : SysQuery::valueUnlimited();
    }

]]></Source>
			</Method>
			<Method>
				<Name>visibleCreateNew</Name>
				<Source><![CDATA[
    protected boolean visibleCreateNew(Integer _journalTypeId)
    {
        JournalBlockUserGroupId blockUserGroupId;

        if (!journalTypeFixed)
        {
            return false;
        }

        if (!this.standardJournalNameId(_journalTypeId))
        {
            return false;
        }

        if (NumberSequenceTable::find(journalTableData.journalStatic().numRefJournalId().NumberSequenceId).Manual)
        {
            return false;
        }

        blockUserGroupId = journalTableData.journalStatic().findJournalName(this.standardJournalNameId(_journalTypeId)).BlockUserGroupId;
        if (blockUserGroupId)
        {
            if (!(select userGroupList where userGroupList.UserId == curUserId() && userGroupList.GroupId == blockUserGroupId).RecId)
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>standardJournalNameId</Name>
				<Source><![CDATA[
    protected JournalNameId standardJournalNameId(Integer _journalTypeId)
    {
        return journalTableData.journalStatic().standardJournalNameId(_journalTypeId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>