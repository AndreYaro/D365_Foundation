<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PcAttributeValueFormatter</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PcAttributeValueFormatter
{
    private boolean isPCDecimalDomainNoOfDecimalsFlightEnabled = PCDecimalDomainNoOfDecimalsFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>numberOfDecimals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the number of decimals for decimal domains.
    /// </summary>
    /// <returns>
    /// The number of decimals.
    /// </returns>
    protected internal static int numberOfDecimals()
    {
        #PC

        return #numberOfDecimals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatAttributeValueDecimalDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a String value with a decimal to another String with the Real value formatted with the
    /// regional settings.
    /// </summary>
    /// <param name="_value">
    /// An attribute decimal value.
    /// </param>
    /// <returns>
    /// The formatted decimal string.
    /// </returns>
    /// <remarks>
    /// The input string must be correctly formatted. This function uses .NET functions to perform the
    /// conversion.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// The input string is formatted incorrectly.
    /// </exception>
    protected AttributeValueText formatAttributeValueDecimalDisplay(AttributeValueText _value)
    {
        real            neutralReal;
        int             numLine;
        System.Double   csDouble;
        System.String   csString;

        AttributeValueText ret;

        System.Globalization.NumberFormatInfo numberFormatInfo;

        #PC

        try
        {
            // Using CLR Interop to check if the input string can be converted to an Ax real.
            // The CLR runtime will throw an exception if the format input cannot be converted.
            numLine = infologLine();

            numberFormatInfo = this.getClientNumberFormatInfo(PcAttributeValueFormatter::numberOfDecimals());

            neutralReal = str2num(_value);
            csDouble = CLRInterop::getObjectForAnyType(neutralReal);
            csString = csDouble.ToString(numberFormatInfo);
            ret = CLRInterop::getAnyTypeForObject(csString);

            return ret;
        }
        catch
        {
            // remove CLR exception message, since this is not of value to the end user
            infolog.cut(numLine + 1, numLine + 1);

            //reverting introp permission
            CodeAccessPermission::revertAssert();
            throw error(Error::wrongUseOfFunction(funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatAttributeValueDecimalPersist</Name>
				<Source><![CDATA[
    protected AttributeValueText formatAttributeValueDecimalPersist(AttributeValueText _value)
    {
        int                                 numLine;
        System.Double                       csDouble;
        System.String                       csString;
        real                                realValue;
        AttributeValueText ret;

        System.Globalization.NumberFormatInfo numberFormat;

        #PC

        // Using CLR Interop to check if the input string can be converted to an Ax real.
        // The CLR runtime will throw an exception if the format input cannot be converted.
        // this number will be used to remove the CLR message if an exception is thrown
        numLine = infologLine();
        try
        {
            numberFormat = this.getClientNumberFormatInfo(PcAttributeValueFormatter::numberOfDecimals());

            csString = _value;

            csDouble = csString.ToDouble(numberFormat);
        }
        catch
        {
            // remove CLR exception message, since this is not of value to the end user
            infolog.cut(numLine + 1, numLine + 1);
            warning("@SYS75090");

            return _value;
        }

        realValue = csDouble;
        // the value stored in the database table always used '.' as the decimal seperator
        ret = num2str(realValue, 0, PcAttributeValueFormatter::numberOfDecimals(), 1 /* decimal separator */, 0);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatAttributeValueDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Formats a locale neutral attribute value into locale specific value.
    /// </summary>
    /// <param name="_domain">
    ///     The attribute type.
    /// </param>
    /// <param name="_value">
    ///     An attribute value.
    /// </param>
    /// <returns>
    ///     A formatted attribute value.
    /// </returns>
    public AttributeValueText formatAttributeValueDisplay
    (
        EcoResAttributeType _domain,
        AttributeValueText _value
    )
    {
        if (_domain.RecId == 0)
        {
            return _value;
        }

        switch ( _domain.DataType )
        {
            case AttributeDataType::Integer :
            case AttributeDataType::TrueFalse :
            case AttributeDataType::Text :
                return _value;
            case AttributeDataType::Decimal :
                return this.formatAttributeValueDecimalDisplay(_value);
            default:
                return this.formatAttributeValueDisplayDefault(_domain, _value);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>formatAttributeValueDisplayDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Formats a locale neutral default attribute value into locale specific value.
    /// </summary>
    /// <param name="_domain">
    ///     An attribute type.
    /// </param>
    /// <param name="_value">
    ///     An attribute value.
    /// </param>
    /// <returns>
    ///     A formatted attribute value.
    /// </returns>
    [Replaceable]
    protected AttributeValueText formatAttributeValueDisplayDefault(EcoResAttributeType _domain, AttributeValueText _value)
    {
        throw error(Error::wrongUseOfFunction(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatAttributeValuePersist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats an locale specific attribute value into locale neutral value.
    /// </summary>
    /// <param name="_domain">
    /// An attribute type.
    /// </param>
    /// <param name="_value">
    /// An attribute value.
    /// </param>
    /// <returns>
    /// A formatted attribute value.
    /// </returns>
    public AttributeValueText formatAttributeValuePersist
    (
        EcoResAttributeType _domain,
        AttributeValueText _value
    )
    {
        switch ( _domain.DataType )
        {
            case AttributeDataType::Integer :
            case AttributeDataType::TrueFalse :
            case AttributeDataType::Text :
                return _value;
            case AttributeDataType::Decimal :
                return this.formatAttributeValueDecimalPersist(_value);
            default:
                return this.formatAttributeValuePersistDefault(_domain, _value);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>formatAttributeValuePersistDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Formats an locale specific default attribute value into locale neutral value.
    /// </summary>
    /// <param name="_domain">
    ///     An attribute type.
    /// </param>
    /// <param name="_value">
    ///     An attribute value.
    /// </param>
    /// <returns>
    ///     A formatted attribute value.
    /// </returns>
    [Replaceable]
    protected AttributeValueText formatAttributeValuePersistDefault(EcoResAttributeType _domain, AttributeValueText _value)
    {
        throw error(Error::wrongUseOfFunction(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getClientNumberFormatInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number format information about the client.
    /// </summary>
    /// <param name="_numberOfDecimals">
    /// The number of decimals used.
    /// </param>
    /// <returns>
    /// An instance of the <c>System.Globalization.NumberFormatInfo</c> class.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// An exception is thrown from the CLR.
    /// </exception>
    protected System.Globalization.NumberFormatInfo getClientNumberFormatInfo(int _numberOfDecimals)
    {
        System.Globalization.CultureInfo    cultureInfo;

        System.Globalization.NumberFormatInfo numberFormat;

        str 4       decimalSeperator;
        str 4       thousandSeperator;

        int numline = infologLine();

        #winapi

        try
        {
            numberFormat = System.Globalization.CultureInfo::get_CurrentCulture().NumberFormat;

            if (isPCDecimalDomainNoOfDecimalsFlightEnabled)
            {
                numberFormat = numberFormat.Clone();
                numberFormat.NumberDecimalDigits = _numberOfDecimals;
            }
        }
        catch
        {
            // remove CLR exception message, since this is not of value to the end user
            infolog.cut(numLine + 1, numLine + 1);

            throw error(Error::wrongUseOfFunction(funcname()));
        }

        return numberFormat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCAttributeValueFormatter construct()
    {
        return new PCAttributeValueFormatter();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>