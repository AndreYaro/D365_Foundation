<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomCalcJob_PC</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BomCalcJob_PC extends BOMCalcJob_Item_Sales implements BatchRetryable
{
    CurrencyCode    currencyCode;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bomCalcItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the BOM calculation item that is used to calculate the price.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>BomCalcItem</c> class that is used.
    /// </returns>
    public BOMCalcItem bomCalcItem()
    {
        return bomCalcItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVar</Name>
				<Source><![CDATA[
    void initVar(Common _sourceLine)
    {
        if (_sourceLine.TableId == tableNum(SalesLine))
        {
            salesLine = _sourceLine as SalesLine;
            this.parmSalesLine(salesLine);
            this.parmSalesUnit(salesLine.SalesUnit);
            this.parmItemId(salesLine.ItemId);
            this.parmInventDimId(salesLine.InventDimId);
            this.parmItemProcurementMode(BOMCalcItem::findItemProcurementMode(salesLine.ItemId, salesLine.InventDimId));
            this.parmBOMId(salesLine.ItemBOMId);
            this.parmRouteId(salesLine.ItemRouteId);
            this.parmCurrencyCode(salesLine.CurrencyCode);
            this.parmSalesQty(salesLine.QtyOrdered);
            this.parmItemQty(InventTable::find(salesLine.ItemId).inventStandardQty(this.parmInventDimId()));
            this.parmCWQty(PdsCatchWeight::cwQty(salesLine.ItemId, this.parmItemQty()));
        }
        if (_sourceLine.TableId == tableNum(SalesQuotationLine))
        {
            quotationLine = _sourceLine as SalesQuotationLine;
            this.parmQuotationLine(quotationLine);
            this.parmSalesUnit(quotationLine.SalesUnit);
            this.parmItemId(quotationLine.ItemId);
            this.parmInventDimId(quotationLine.InventDimId);
            this.parmItemProcurementMode(BOMCalcItem::findItemProcurementMode(quotationLine.ItemId, quotationLine.InventDimId));
            this.parmBOMId(quotationLine.ItemBOMId);
            this.parmRouteId(quotationLine.ItemRouteId);
            this.parmCurrencyCode(quotationLine.CurrencyCode);
            this.parmSalesQty(quotationLine.QtyOrdered);
            this.parmItemQty(InventTable::find(quotationLine.ItemId).inventStandardQty(this.parmInventDimId()));
            this.parmCWQty(PdsCatchWeight::cwQty(quotationLine.ItemId, this.parmItemQty()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode parmCurrencyCode(CurrencyCode _currencyCode = currencyCode)
    {
        currencyCode = _currencyCode;

        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesUnit</Name>
				<Source><![CDATA[
    public UnitOfMeasureSymbol parmSalesUnit(UnitOfMeasureSymbol _salesUnit = salesUnit)
    {
        salesUnit = _salesUnit;

        return salesUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BomCalcJob_PC construct(Args args)
    {
        BomCalcJob_PC  bomCalc = new BomCalcJob_PC();

        bomCalc.initVar(args.record());

        return bomCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>