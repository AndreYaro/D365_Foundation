<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTrackingDimension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventTrackingDimension</c> class is the base class for tracking dimensions.
/// </summary>
abstract class InventTrackingDimension extends InventDimension
{
    private static List trackingDimensions;
    private static List selectiveDimensions;
    private static List enabledTrackingDimensions;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>indexHintForTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the Id of the index to used as index hint for a given table for optimal performance.
    /// </summary>
    /// <param name = "_tableId">The Id of the table.</param>
    /// <returns>The Id of the index in the given table.</returns>
    [Hookable(false)]
    public IndexId indexHintForTable(TableId _tableId)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckValueForDimFieldSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the dimension value must be validate when checking the <c>InventDimGroupFieldSetup</c>.
    /// </summary>
    /// <returns>true when validation is required; otherwise, false.</returns>
    [Hookable(false)]
    public boolean mustCheckValueForDimFieldSetup()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistsValueForItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the tracking dimension value for an item.
    /// </summary>
    /// <param name = "_inventTable">The item.</param>
    /// <param name = "_value">The value to check.</param>
    /// <returns>true if valid; otherwise, false.</returns>
    abstract boolean checkExistsValueForItem(InventTable _inventTable, anytype _value)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an enumerator of tracking dimensions.
    /// </summary>
    /// <returns>An enumerator of tracking dimensions.</returns>
    [Hookable(false)]
    static public InventDimensionEnumerator getEnumerator()
    {
        return InventDimensionEnumerator::newEnumerator(InventTrackingDimension::dimensions());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumeratorForEnabledDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an enumerator of only enabled tracking dimensions.
    /// </summary>
    /// <returns>An enumerator of enabled tracking dimensions.</returns>
    [Hookable(false)]
    static public InventDimensionEnumerator getEnumeratorForEnabledDimensions()
    {
        return InventDimensionEnumerator::newEnumerator(InventTrackingDimension::enabledDimensions());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumeratorForSelectiveDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an enumerator of selective tracking dimensions.
    /// </summary>
    /// <returns>An enumerator of selective tracking dimensions.</returns>
    [Hookable(false)]
    static public InventDimensionEnumerator getEnumeratorForSelectiveDimensions()
    {
        return InventDimensionEnumerator::newEnumerator(InventTrackingDimension::selectiveDimensions());
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a collection of tracking dimensions.
    /// </summary>
    /// <returns>A collection of tracking dimensions.</returns>
    static private List dimensions()
    {
        if (!trackingDimensions)
        {
            trackingDimensions = new List(Types::Class);
            var enum = InventDim::dimTrackingDimFieldList().getEnumerator();

            while (enum.moveNext())
            {
                InventTrackingDimension dim = InventDimension::singletonFromInventDimFieldId(enum.current()) as InventTrackingDimension;
                if (dim)
                {
                    trackingDimensions.addEnd(dim);
                }
            }
        }

        return trackingDimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enabledDimensions</Name>
				<Source><![CDATA[
    static private List enabledDimensions()
    {
        if (!enabledTrackingDimensions)
        {
            enabledTrackingDimensions = new List(Types::Class);

            Enumerator enum = InventTrackingDimension::getEnumerator();

            while (enum.moveNext())
            {
                InventTrackingDimension dimension = enum.current();

                if (dimension.isEnabled())
                {
                    enabledTrackingDimensions.addEnd(dimension);
                }
            }
        }

        return enabledTrackingDimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSelectiveDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an ordered list of selective tracking dimensions.
    /// </summary>
    /// <returns>A list of tracking dimensions.</returns>
    /// <remarks>The order controls which dimension takes preference when selecting index hints, when multiple dimensions are specified.</remarks>
    static protected List initializeSelectiveDimensions()
    {
        List list = new List(Types::Class);

        //Serial is more selective than Batch, so ordering matters.
        list.addEnd(InventTrackingDimensionSerial::getInstance());
        list.addEnd(InventTrackingDimensionBatch::getInstance());

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectiveDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an ordered list of selective tracking dimensions.
    /// </summary>
    /// <returns>A list of tracking dimensions.</returns>
    static private List selectiveDimensions()
    {
        if (!selectiveDimensions)
        {
            selectiveDimensions = InventTrackingDimension::initializeSelectiveDimensions();
            Set fieldIdsAlreadyInList = new Set(Types::Integer);
            var listEnum = selectiveDimensions.getEnumerator();
            while (listEnum.moveNext())
            {
                InventTrackingDimension dim = listEnum.current();
                fieldIdsAlreadyInList.add(dim.parmInventDimFieldId());
            }

            var fieldIdEnum = InventDim::dimTrackingDimFieldList().getEnumerator();
            while (fieldIdEnum.moveNext())
            {
                FieldId fieldId = fieldIdEnum.current();
                if (!fieldIdsAlreadyInList.in(fieldId))
                {
                    InventTrackingDimension dim = InventDimension::singletonFromInventDimFieldId(fieldId) as InventTrackingDimension;
                    if (dim 
                        && dim.isSelective())
                    {
                        selectiveDimensions.addEnd(dim);
                    }
                }
            }
        }

        return selectiveDimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddIndexHint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds index hint to a <c>QueryBuildDataSource</c>.
    /// </summary>
    /// <param name = "_queryBuildDataSource">The data source.</param>
    /// <param name = "_inventDimParm">The parameters controlling which dimensions are applicable.</param>
    /// <returns>true if an index hint is added; otherwise, false.</returns>
    [Hookable(false)]
    static public boolean queryAddIndexHint(QueryBuildDataSource _queryBuildDataSource, InventDimParm _inventDimParm)
    {
        Enumerator trackingDims = InventTrackingDimension::getEnumeratorForSelectiveDimensions();
        while (trackingDims.moveNext())
        {
            InventTrackingDimension dimension = trackingDims.current() as InventTrackingDimension;

            if (_inventDimParm.(dimension.parmInventDimParmFieldId()))
            {
                IndexId indexHint = dimension.indexHintForTable(_queryBuildDataSource.table());
                if (indexHint)
                {
                    _queryBuildDataSource.addSortIndex(indexHint);
                    _queryBuildDataSource.indexIsHint(true);
                    return true;
                }
            }
        }
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>