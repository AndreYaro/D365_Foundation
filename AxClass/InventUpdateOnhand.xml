<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventUpdateOnhand</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Ax.Xpp.PlatformExtensions;

class InventUpdateOnhand
{
    CreatedTransactionId    sqlTransactionId;           // SQL transaction id for main transaction.
    CreatedTransactionId    ttsId;                      // Unique identifier for main transaction. It's usage is being replaced by SQLTransactionId
    boolean                 activated;                  // Flag to indicate whether current database transaction has updated the Inventory
    boolean                 isFinalCommit;              // Flag to indicate that final commit block (ttsNotifyPreCommit) is under execution
    boolean                 doOnhandCheck;              // Flag to indicate whether onhand checking is required
    boolean                 doSummarizedOnhandCheck;    // Flag to indicate whether summarized onhand check is required
    boolean                 doDirectOnhandCheck;        // Flag to indicate whether direct onhand check is required
    boolean                 mustUseOnHandAmounts;       // Flag used to indicate if it is enough to include records with ClosedQty set to No in on hand check
    RecordSortedList        inventSumDeltaDimList;      // used to store combinations to be checked
    [SysObsolete("Use higher level methods instead of accessing directly the insert list", false, 30\06\2020)]
    RecordInsertList        inventSumLogTTSList;        // Used for batch-insertion of records into the inventSumLogTTSTempTable temp table.
    private RecordInsertList        inventSumLogTTSNonTempList; // Used for insertion of records into the inventSumLogTTS table - this is used to favour scenarios where only a few records are inserted.
    private Counter         inventSumLogTTSListRecordAddCount;
    private InventUpdateOnHandInventSumLogTTsTmpTableThreshold inventUpdateOnHandInventSumLogTTsTmpTableThreshold;
    private int inventSumLogTTSNonTempListFirstEarlyInsertValue;
    internal static InventUpdateOnHandInventSumLogTTsTmpTableThreshold MaxInventUpdateOnHandInventSumLogTTsTmpTableThreshold = 100; //max number of records allowed to be inserted using non-temp table approach. This is to prevent early inserts from RecordInsertList

    private InventSumLogTTS inventSumLogTTSTempTable;   // Used for collecting new records for table InventSumLogTTS that then get bulk inserted in pre-commit hook
    Set                     itemIdSet;                  // Used for collecting what items have updated during the transaction (performance optimization for InventOnhand class)
    Integer                 sequenceCounter;            // Used for new records in table InventSumLogTTs
    str                     sqlUpdateStr;               // Only build the update-str once
    SqlSystem               sqlSystem;                  // Expensive to instantiate SqlSystem class - only instantiate first time, and keep in memory
    DataAreaId              dataAreaId;                 // Each instance of the InventUpdateOnhand class applies to a specific company - this is kept in this variable
    str                     curExtensionSum;            // DataAreaIdInventSum formatted for database (lower case etc if needed)
    str                     curExtensionSumDelta;       // DataAreaIdInventSumDelta formatted for database (lower case etc if needed)
    Counter                 inventSumDeltaCnt;          // Count the number of delta records - if only one: do simplified update of InventSum
    InventSumDelta          inventSumDeltaCache;        // cache instance to be used with simplified update statement (when inventSumDeltaCnt = 1)
    boolean                 skipTTSLog;                 // flag that will prevent creation of records in InventSumLogTTS table.
    boolean                 isInventSumLogTTSEnabled;   // Flag to indicate if the InventSumLogTTS table should be used.
    boolean                 inventReserveDeltaExist;    // boolean if inventReserveDeltaCnt record exist
    str                     sqlUpdateReserveStr;        // Only build the update-str once
    boolean                 checkOnHandForWHSItems;
    boolean                 isWHSEnabled;
    utcdatetime             initialCreatedDateTime;

    private str             checkOnHandStrategy;
    Const str               InventOnhandCacheScope = 'InventUpdateOnhand';
    private int64           itemIdSetCount,
                            deleteInventSumDeltaCount,
                            deleteInventSumDeltaUpdCount,
                            deleteWHSInventReserveDeltaCount,
                            updateInventReserveCount,
                            lockInventReserveCount,
                            lockInventReserveDeltaCount,
                            checkOnHandDepreciatedOrderedCount,
                            checkOnHandReservationCount,
                            checkOnHandPhysicalCount,
                            checkOnHandWHSPhysicalInventChangeCount,
                            checkOnHandFinancialCount,
                            checkOnHandInventModelCount,
                            checkOnHandWHSDepreciatedOrderedCount,
                            checkOnHandWHSReservationCount,
                            checkOnHandWHSPhysicalCount,
                            whsInsertInventReserveCount,
                            insertInventSumFromInventSumDeltaCount,
                            insertInventSumFromInventSumDeltaDimCount,
                            inventSumDeltaDimListCount,
                            insertInventSumLogTTSCount,
                            insertInventSumLogTTSNonTemptableInsertCount;
    private const int       deltaCountToDecideUsingQueryRecordInsert = 50;

    private boolean isInventSumDeltaDimLockTTSItemIdDimIdHintFlightEnabled = InventSumDeltaDimLockTTSItemIdDimIdHintFlight::instance().isEnabled();
    private boolean isInventUpdateOnHandInventSumLogTTsTmpTableThresholdFlightEnabled; 
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getInventUpdateOnHandHashingFunctionName</Name>
				<Source><![CDATA[
    public static str getInventUpdateOnHandHashingFunctionName()
    {
        return 'InventUpdateOnHandSqlTransactionHashing';
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDepreciateOrderedCheck</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a record to the <c>InventSumDeltaDim</c> table to make sure that on hand checking during the
    ///    final commit.
    /// </summary>
    /// <param name="_itemId">
    ///    The item for which to perform the on hand check.
    /// </param>
    /// <param name="_inventDim">
    ///    The dimension values for which to perform the on hand check.
    /// </param>
    /// <param name="_inventDimParm">
    ///    The set of dimensions for which to perform the on hand check.
    /// </param>
    public void addDepreciateOrderedCheck(
        ItemId                  _itemId,
        InventDim               _inventDim,
        InventDimParm           _inventDimParm)
    {
        InventDim           inventDim;
        InventDimParm       inventDimParm;
        InventSumDeltaDim   inventSumDeltaDim;
        InventDimGroupSetup inventDimGroupSetup = InventDimGroupSetup::newItemId(_itemId);

        inventSumDeltaDim.ItemId    = _itemId;
        inventSumDeltaDim.ttsId     = this.ttsId();
        inventSumDeltaDim.CheckType = (isWHSEnabled && WHSInventEnabled::exist(_itemId)) ? InventOnhandCheckType::WHSDepreciateOrdered : InventOnhandCheckType::DepreciateOrdered;
        inventDim.data(_inventDim);
        inventDim.clearNotSelectedDim(_inventDimParm);
        inventSumDeltaDim.initFromInventDim(inventDim);
        inventSumDeltaDim.initFromInventDimParm(_inventDimParm);

        // The InventSum record for the physical dimensions are used for serialization around the set based update
        // and the following Onhand check. For that reason "Physical InventDimId" must be stored
        inventDimGroupSetup.inventDimParmActivePhysicalInventory(inventDimParm);
        inventDim.clearNotSelectedDim(inventDimParm);
        inventSumDeltaDim.setInventDimRelation(inventDim, inventDimGroupSetup, inventDimParm); // inventDimId for physical dimensions
        this.determineOnhandCheckStrategy(inventSumDeltaDim);

        this.inventSumDeltaDimList().ins(inventSumDeltaDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventSumDelta</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the specified <c>InventSumDelta</c> record and updates internal values.
    /// </summary>
    /// <param name="_inventSumDelta">
    ///    The record to add.
    /// </param>
    /// <param name="_inventTrans">
    ///    The <c>InventTrans</c> record that causes the on hand changes.
    /// </param>
    /// <param name="_inventTable">
    ///    An <c>InventTable</c> record. This parameter can be passed to improve performance.
    /// </param>
    public void addInventSumDelta(
        InventSumDelta _inventSumDelta,
        InventTrans    _inventTrans,
        InventTable    _inventTable = null)
    {
        this.adjustOnHandFromInventSumDelta(_inventSumDelta, _inventTrans);

        this.addOnHandCheck(_inventTrans, _inventSumDelta, _inventTable.modelGroup());
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustOnHandFromInventSumDelta</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final internal void adjustOnHandFromInventSumDelta(
        InventSumDelta _inventSumDelta,
        InventTrans    _inventTransSourceForOnhandChange)
    {
        if (!activated)
        {
            activated = true;
            InventUpdateOnhandGlobal::Instance().activateDataAreaId(dataAreaId);
        }
        
        _inventSumDelta.setTransactionId(this);
            
        // insert into InventSumDelta table can not be delayed (i.e. executed in the pre-commit block), because
        // the InventOnhand class need to take the contribution from InventSumDelta into account upon inquiries
        if (WHSInventoryTranscationOnHandStackContext::current())
        {
            WHSInventoryTranscationOnHandStackContext::current().addInventSumDelta(_inventSumDelta);
        }
        else
        {
            _inventSumDelta.insert();
        }

        if (WHSInventEnabled::exist(_inventSumDelta.ItemId))
        {
            // Write reservation records if WHS Item
            boolean insertedWHSInventReserveDelta = WHSInventOnHand::insertWHSInventReserveDeltaFromSumDelta(_inventSumDelta, _inventTransSourceForOnhandChange);

            // Flip flag for invent reserve table if WHS item
            inventReserveDeltaExist = (inventReserveDeltaExist || insertedWHSInventReserveDelta);
        }

        // add the ItemId to set for performance optimization (used by the InventOnhand class to optimize sum-select)
        this.itemIdSet().add(_inventSumDelta.ItemId);
  
        inventSumDeltaCnt++;

        if (inventSumDeltaCnt == 1)
        {
            inventSumDeltaCache.data(_inventSumDelta);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustAddAnyInventSumDeltaOnhand</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if any <c>InventSumDelta</c> records should be considered when querying for on hand.
    /// </summary>
    /// <returns>
    ///    true if any <c>InventSumDelta</c> records should be included; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal boolean mustAddAnyInventSumDeltaOnhand()
    {
        return (inventSumDeltaCnt != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventSumLogTTS</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a record that indicates a change for master planning to consider.
    /// </summary>
    /// <param name="_inventTrans">
    ///    The <c>InventTrans</c> record that causes the on hand changes.
    /// </param>
    /// <param name="_plus">
    ///    <c>Yes</c> if the change is adding on hand; otherwise, <c>No</c>.
    /// </param>
    /// <param name="_keepSequenceNumber">
    ///    true if the internal counter for log records to help secure correct order when rollback is
    ///    performed should remain unchanged; otherwise, false.
    /// </param>
    /// <param name="_skipInventTransValidation">
    ///    true if the validation of inventTrans should be skipped; otherwise, false.
    /// </param>
    /// <returns>
    ///     <c>true</c> if a change record was added for the given <c>InventTrans</c> record; otherwise, <c>false</c>.
    /// </returns>
    public boolean addInventSumLogTTS(
        InventTrans _inventTrans,
        NoYes       _plus,
        boolean     _keepSequenceNumber = false,
        boolean     _skipInventTransValidation = false
        )
    {
        InventSumLogTTS     inventSumLogTTS;
        InventTransOrigin   inventTransOrigin;
        boolean             added = false;

        InventTransOrigin getInventTransOrigin()
        {
            if (!inventTransOrigin)
            {
                inventTransOrigin = _inventTrans.inventTransOrigin();
            }

            return inventTransOrigin;
        }

        if (this.mustCreateSumLogTTS()
            && (_skipInventTransValidation || this.mustCreateSumLogTTSForInventTrans(_inventTrans))
            && this.mustCreateSumLogTTSForDynamicPlan()
            && this.mustCreateSumLogTTSForInventTransOrigin(getInventTransOrigin())
            && InventDistinctProduct::find(_inventTrans.ItemId, _inventTrans.inventDimId).isActiveForPlanning())
        {
            if (!activated)
            {
                activated = true;
                InventUpdateOnhandGlobal::Instance().activateDataAreaId(dataAreaId);
            }

            inventSumLogTTS.initFromInventTransOrigin(getInventTransOrigin());
            inventSumLogTTS.initFromInventTrans(_inventTrans);
            inventSumLogTTS.SoftDeleted         = skipTTSLog;
            inventSumLogTTS.AddTrans            = _plus;
            inventSumLogTTS.ttsId               = this.ttsId();
            inventSumLogTTS.SequenceNumber      = this.nextSequenceCount(!_keepSequenceNumber);
            inventSumLogTTS.UtcCreatedDateTime  = this.utcTimeStampForTTS();
            this.addToInventSumLogTTSTable(inventSumLogTTS);

            added = true;
        }

        return added;
    }

]]></Source>
			</Method>
			<Method>
				<Name>utcTimeStampForTTS</Name>
				<Source><![CDATA[
    private UTCTimestamp utcTimeStampForTTS()
    {
        if (!initialCreatedDateTime)
        {
            initialCreatedDateTime = DateTimeUtil::utcNow();
        }
        return initialCreatedDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOnHandCheck</Name>
				<Source><![CDATA[
    protected void addOnHandCheck(
        InventTrans     _inventTrans,
        InventSumDelta      _inventSumDelta,
        InventModelGroup    _inventModelGroup = null)
    {
        InventDim                       inventDim;
        InventDimParm                   inventDimParm;
        InventSumDeltaDim               inventSumDeltaDim;
        InventDimGroupSetup             inventDimGroupSetup;

        if (this.mustCheckPhysicalOnhand(_inventSumDelta, _inventModelGroup))
        {
            if (!inventDimGroupSetup)
            {
                inventDimGroupSetup = InventDimGroupSetup::newItemId(_inventTrans.ItemId);
            }
            inventDimGroupSetup.inventDimParmActivePhysicalInventory(inventDimParm);
            inventDim        = _inventTrans.inventDim();
            inventDim.clearNotSelectedDim(inventDimParm);

            inventSumDeltaDim.ItemId    = _inventTrans.ItemId;
            inventSumDeltaDim.ttsId     = this.ttsId();
            inventSumDeltaDim.CheckType = (isWHSEnabled && WHSInventEnabled::exist(_inventTrans.ItemId)) ? InventOnhandCheckType::WHSPhysical : InventOnhandCheckType::Physical;
            inventSumDeltaDim.initFromInventDim(inventDim);
            inventSumDeltaDim.initFromInventDimParm(inventDimParm);
            inventSumDeltaDim.setInventDimRelation(inventDim, inventDimGroupSetup, inventDimParm);
            this.determineOnhandCheckStrategy(inventSumDeltaDim);

            this.inventSumDeltaDimList().ins(inventSumDeltaDim);
        }

        if (this.mustCheckPhysicalInvent(_inventSumDelta, _inventModelGroup))
        {
            if (!inventDimGroupSetup)
            {
                inventDimGroupSetup = InventDimGroupSetup::newItemId(_inventTrans.ItemId);
            }

            inventDim   = _inventTrans.inventDim();

            //we only need the check if we have any tracking dimensions that allow blank issue that are not specified in the dim
            if (this.anyTrackingDimsNeedPhysicalInventCheck(inventDimGroupSetup.getTrackingDimensionGroup(), inventDim))
            {
                inventDimGroupSetup.inventDimParmActivePhysicalInventory(inventDimParm);

                inventDim.clearNotSelectedDim(inventDimParm);

                inventSumDeltaDim.ItemId    = _inventTrans.ItemId;
                inventSumDeltaDim.ttsId     = this.ttsId();
                inventSumDeltaDim.CheckType = InventOnhandCheckType::WHSPhysicalInventChange;
                inventSumDeltaDim.initFromInventDim(inventDim);
                inventSumDeltaDim.initFromInventDimParm(inventDimParm);
                inventSumDeltaDim.setInventDimRelation(inventDim, inventDimGroupSetup, inventDimParm);
                this.determineOnhandCheckStrategy(inventSumDeltaDim);

                this.inventSumDeltaDimList().ins(inventSumDeltaDim);
            }
        }

        if (this.mustCheckFinancialOnhand(_inventSumDelta, _inventModelGroup))
        {
            if (!inventDimGroupSetup)
            {
                inventDimGroupSetup = InventDimGroupSetup::newItemId(_inventTrans.ItemId);
            }
            inventDimGroupSetup.inventDimParmActiveFinancialInventory(inventDimParm);
            inventDim        = _inventTrans.inventDim();
            inventDim.clearNotSelectedDim(inventDimParm);

            inventSumDeltaDim.ItemId    = _inventTrans.ItemId;
            inventSumDeltaDim.ttsId     = this.ttsId();
            inventSumDeltaDim.CheckType = InventOnhandCheckType::Financial;
            inventSumDeltaDim.initFromInventDim(inventDim);
            inventSumDeltaDim.initFromInventDimParm(inventDimParm);
            inventSumDeltaDim.setInventDimRelation(inventDim, inventDimGroupSetup, inventDimParm);
            this.determineOnhandCheckStrategy(inventSumDeltaDim);

            this.inventSumDeltaDimList().ins(inventSumDeltaDim);
        }

        if (this.mustCheckInventModel(_inventSumDelta))
        {
            mustUseOnHandAmounts = true;    // Amounts used by checkInventOnHand method in inventModelType_MovingAverage and inventModelType_StdCost
            if (!inventDimGroupSetup)
            {
                inventDimGroupSetup = InventDimGroupSetup::newItemId(_inventTrans.ItemId);
            }
            inventDimGroupSetup.inventDimParmActiveFinancialInventory(inventDimParm);
            inventDim        = _inventTrans.inventDim();
            inventDim.clearNotSelectedDim(inventDimParm);

            inventSumDeltaDim.ItemId    = _inventTrans.ItemId;
            inventSumDeltaDim.ttsId     = this.ttsId();
            inventSumDeltaDim.CheckType = InventOnhandCheckType::InventModel;
            inventSumDeltaDim.initFromInventDim(inventDim);
            inventSumDeltaDim.initFromInventDimParm(inventDimParm);
            inventSumDeltaDim.setInventDimRelation(inventDim, inventDimGroupSetup, inventDimParm);
            this.determineOnhandCheckStrategy(inventSumDeltaDim);

            this.inventSumDeltaDimList().ins(inventSumDeltaDim);
        }

        // <GEERU>
        if (this.mustCheckStdCostSecCur_RU(_inventSumDelta))
        {
            mustUseOnHandAmounts = true;    // Used by inventOnHand.checkItemStdCostSecur_RU()
            if (!inventDimGroupSetup)
            {
                inventDimGroupSetup = InventDimGroupSetup::newItemId(_inventTrans.ItemId);
            }
            inventDimGroupSetup.inventDimParmActiveFinancialInventory(inventDimParm);
            inventDim        = _inventTrans.inventDim();
            inventDim.clearNotSelectedDim(inventDimParm);

            inventSumDeltaDim.ItemId    = _inventTrans.ItemId;
            inventSumDeltaDim.ttsId     = this.ttsId();
            inventSumDeltaDim.CheckType = InventOnhandCheckType::StdCostSecCur_RU;
            inventSumDeltaDim.initFromInventDim(inventDim);
            inventSumDeltaDim.initFromInventDimParm(inventDimParm);
            inventSumDeltaDim.setInventDimRelation(inventDim, inventDimGroupSetup, inventDimParm);
            this.determineOnhandCheckStrategy(inventSumDeltaDim);

            this.inventSumDeltaDimList().ins(inventSumDeltaDim);
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>addReservationCheck</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a record to the <c>InventSumDeltaDim</c> table to make sure of the reserved quantity checking
    ///    during the final commit.
    /// </summary>
    /// <param name="_itemId">
    ///    The item for which to perform the reserved quantity check.
    /// </param>
    /// <param name="_inventDim">
    ///    The dimension values for which to perform the reserved quantity check.
    /// </param>
    /// <param name="_inventDimParm">
    ///    The set of dimensions for which to perform the reserved quantity check.
    /// </param>
    public void addReservationCheck(
        ItemId                  _itemId,
        InventDim               _inventDim,
        InventDimParm           _inventDimParm)
    {
        InventDim           inventDim;
        InventDimParm       inventDimParm;
        InventSumDeltaDim   inventSumDeltaDim;
        InventDimGroupSetup inventDimGroupSetup = InventDimGroupSetup::newItemId(_itemId);

        inventSumDeltaDim.ItemId    = _itemId;
        inventSumDeltaDim.ttsId     = this.ttsId();
        inventSumDeltaDim.CheckType = (isWHSEnabled && WHSInventEnabled::exist(_itemId)) ? InventOnhandCheckType::WHSReservation : InventOnhandCheckType::Reservation;
        inventDim.data(_inventDim);
        // Clear dimensions not active and keep set of disabled dimensions
        InventDimParm inventDimParmDisabled = inventDim.clearAndGetDisabledDimensions(inventDimGroupSetup);

        inventDimParm.data(_inventDimParm);
        // Ensure that both specified and non active dimensions are included.
        inventDimParm = InventDimParm::orParms(inventDimParmDisabled, _inventDimParm);

        inventDim.clearNotSelectedDim(_inventDimParm);
        inventSumDeltaDim.initFromInventDim(inventDim);
        inventSumDeltaDim.initFromInventDimParm(inventDimParm); // Set all specified and all non-active dimensions

        // The InventSum record for the physical dimensions are used for serialization around the set based update
        // and the following Onhand check. For that reason "Physical InventDimId" must be stored
        inventDimParm.clear();
        inventDimGroupSetup.inventDimParmActivePhysicalInventory(inventDimParm);
        inventDim.clearNotSelectedDim(inventDimParm);
        inventSumDeltaDim.setInventDimRelation(inventDim, inventDimGroupSetup, inventDimParm);  // inventDimId for physical dimensions
        this.determineOnhandCheckStrategy(inventSumDeltaDim);

        this.inventSumDeltaDimList().ins(inventSumDeltaDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOnhand</Name>
				<Source><![CDATA[
    protected boolean checkOnhand()
    {
        #InventDimDevelop
        #define.SummarizedCheckStrategy(2)
        #define.DirectCheckStrategy(1)

        InventSumDeltaDim   inventSumDeltaDim;
        InventSum           inventSum;
        InventDim           inventDim;
        InventDimParm       inventDimParmCheck;
        InventDim           inventDimCheck;
        int                 checkStrategy = #SummarizedCheckStrategy;

        if (!this.parmDoOnhandCheck())
        {
            return true;
        }
        
        boolean inventUseDimOfInventSumForPublicQueryToggleIsEnabled = InventUseDimOfInventSumForPublicQueryToggle::instance().isEnabled();
   
        do
        {
            if (checkStrategy == #SummarizedCheckStrategy && this.parmDoSummarizedOnhandCheck())
            {
                checkOnHandStrategy = 'summarized';

                if (!this.is_instantiateInventSumQueryObjectForSummarizedOnhand_MethodExtended(inventSum, inventSumDeltaDim, inventDim))
                {
                    SysDaFindStatement findInventSumDeltaDim = new SysDaFindStatement();
                    findInventSumDeltaDim.executeQuery(new SysDaFindObject(this.instantiateInventSumDeltaDimQueryObject(inventSumDeltaDim)));
                    while (inventSumDeltaDim.ItemId)
                    {
                        SysDaFindStatement findInventSumSummarized = new SysDaFindStatement();
                        if (inventUseDimOfInventSumForPublicQueryToggleIsEnabled)
                        {
                            findInventSumSummarized.executeQuery(new SysDaFindObject(this.instantiateInventSumQueryObjectForSummarizedOnhandFromInventSumDeltaDimDirectly(inventSum, inventSumDeltaDim)));
                        }
                        else
                        {
                            findInventSumSummarized.executeQuery(new SysDaFindObject(this.instantiateInventSumQueryObjectForSummarizedOnhandFromInventSumDeltaDim(inventSum, inventSumDeltaDim, inventDim)));
                        }

                        while (inventSum)
                        {
                            if (!this.checkOnhandFromCheckType(inventSumDeltaDim, inventSum))
                            {
                                return false;
                            }
                            next inventSum;
                        }
                        next inventSumDeltaDim;
                    }
                }
                else
                {
                    SysDaFindStatement findInventSumSummarized = new SysDaFindStatement();
                    if (inventUseDimOfInventSumForPublicQueryToggleIsEnabled)
                    {
                        findInventSumSummarized.executeQuery(new SysDaFindObject(this.instantiateInventSumQueryObjectForSummarizedOnhandDirectly(inventSum, inventSumDeltaDim)));
                    }
                    else
                    {
                        findInventSumSummarized.executeQuery(new SysDaFindObject(this.instantiateInventSumQueryObjectForSummarizedOnhand(inventSum, inventSumDeltaDim, inventDim)));
                    }
                    while (inventSumDeltaDim.ItemId)
                    {
                        if (!this.checkOnhandFromCheckType(inventSumDeltaDim, inventSum))
                        {
                            return false;
                        }
                        next inventSum;
                    }
                }
            }

            if (checkStrategy == #DirectCheckStrategy && this.parmDoDirectOnhandCheck())
            {
                checkOnHandStrategy = 'direct';
                SysDaFindStatement findInventSumDirect = new SysDaFindStatement();
                findInventSumDirect.executeQuery(new SysDaFindObject(this.instantiateInventSumQueryObjectForDirectOnhand(inventSum, inventSumDeltaDim)));
                while (inventSumDeltaDim.ItemId)
                {
                    if (!this.checkOnhandFromCheckType(inventSumDeltaDim, inventSum))
                    {
                        return false;
                    }
                    next inventSum;
                }
            }

            checkStrategy--;
        }
        while (checkStrategy);

        if (checkOnHandForWHSItems)
        {
            checkOnHandStrategy = 'whsItems';
            WHSInventReserve whsInventReserve;

            boolean isCatchWeightEnabled = WHSCatchWeightConfigurationKeyManager::instance().isEnabled();
                        
            if (InventUseDimOfWHSInventReserveToggle::instance().isEnabled())
            {
                if (WHSInventOnhandCheckWHSOnhandForceSelectFlight::instance().isEnabled())
                {
                    ItemId itemIdRange;
                    if (this.itemIdSet().elements() == 1 && WHSInventUpdateOnhandCheckSingleItemSelectFlight::instance().isEnabled())
                    {
                        SetEnumerator itemIdSetEnum = this.itemIdSet().getEnumerator();
                        itemIdSetEnum.moveNext();
                        itemIdRange = itemIdSetEnum.current();
                    }
                    while select forcenestedloop forceselectorder inventSumDeltaDim
                        where inventSumDeltaDim.ttsId       == this.ttsId()
                            && (!itemIdRange || inventSumDeltaDim.ItemId     == itemIdRange)
                            && (inventSumDeltaDim.checkType == InventOnhandCheckType::WHSDepreciateOrdered
                            ||  inventSumDeltaDim.checkType == InventOnhandCheckType::WHSPhysical
                            ||  inventSumDeltaDim.checkType == InventOnhandCheckType::WHSReservation)
                        exists join whsInventReserve
                            where whsInventReserve.ItemId == inventSumDeltaDim.ItemId
                                && (
                                    (isCatchWeightEnabled
                                    && ((whsInventReserve.IsItemCatchWeightEnabled == NoYes::Yes
                                            && (whsInventReserve.CWAvailOrdered < 0 || whsInventReserve.CWAvailPhysical < 0))
                                        || (whsInventReserve.IsItemCatchWeightEnabled == NoYes::No
                                            && (whsInventReserve.AvailOrdered < 0 || whsInventReserve.AvailPhysical < 0))))
                                    || (!isCatchWeightEnabled
                                        && (whsInventReserve.AvailOrdered < 0 || whsInventReserve.AvailPhysical < 0))
                                    )
                                && #WHSInventReserveFilter(whsInventReserve, inventSumDeltaDim)
                    {
                        if (!this.checkOnHandForWHSItems(inventSumDeltaDim))
                        {
                            return false;
                        }
                    }
                }
                else
                {
                    while select inventSumDeltaDim
                        where inventSumDeltaDim.ttsId       == this.ttsId()
                            && (inventSumDeltaDim.checkType == InventOnhandCheckType::WHSDepreciateOrdered
                            ||  inventSumDeltaDim.checkType == InventOnhandCheckType::WHSPhysical
                            ||  inventSumDeltaDim.checkType == InventOnhandCheckType::WHSReservation)
                        exists join whsInventReserve
                            where whsInventReserve.ItemId == inventSumDeltaDim.ItemId
                                && (
                                    (isCatchWeightEnabled
                                    && ((whsInventReserve.IsItemCatchWeightEnabled == NoYes::Yes
                                            && (whsInventReserve.CWAvailOrdered < 0 || whsInventReserve.CWAvailPhysical < 0))
                                        || (whsInventReserve.IsItemCatchWeightEnabled == NoYes::No
                                            && (whsInventReserve.AvailOrdered < 0 || whsInventReserve.AvailPhysical < 0))))
                                    || (!isCatchWeightEnabled
                                        && (whsInventReserve.AvailOrdered < 0 || whsInventReserve.AvailPhysical < 0))
                                    )
                                && #WHSInventReserveFilter(whsInventReserve, inventSumDeltaDim)
                    {
                        if (!this.checkOnHandForWHSItems(inventSumDeltaDim))
                        {
                            return false;
                        }
                    }
                }
            }
            else
            {
                while select inventSumDeltaDim
                    where inventSumDeltaDim.ttsId       == this.ttsId()
                        && (inventSumDeltaDim.checkType == InventOnhandCheckType::WHSDepreciateOrdered
                        ||  inventSumDeltaDim.checkType == InventOnhandCheckType::WHSPhysical
                        ||  inventSumDeltaDim.checkType == InventOnhandCheckType::WHSReservation)
                    exists join whsInventReserve
                        where whsInventReserve.ItemId == inventSumDeltaDim.ItemId
                            && (
                                (isCatchWeightEnabled
                                && ((whsInventReserve.IsItemCatchWeightEnabled == NoYes::Yes
                                        && (whsInventReserve.CWAvailOrdered < 0 || whsInventReserve.CWAvailPhysical < 0))
                                    || (whsInventReserve.IsItemCatchWeightEnabled == NoYes::No
                                        && (whsInventReserve.AvailOrdered < 0 || whsInventReserve.AvailPhysical < 0))))
                                || (!isCatchWeightEnabled
                                    && (whsInventReserve.AvailOrdered < 0 || whsInventReserve.AvailPhysical < 0))
                                )
                    #WHSInventDimInnerJoinTableId(whsInventReserve.inventDimId, inventDim, inventSumDeltaDim)
                {
                    if (!this.checkOnHandForWHSItems(inventSumDeltaDim))
                    {
                        return false;
                    }
                }
            }        
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOnHandForWHSItems</Name>
				<Source><![CDATA[
    private boolean checkOnHandForWHSItems(InventSumDeltaDim _inventSumDeltaDim)
    {
        setPrefix(fieldLabelValue(tableNum(WHSInventReserve), fieldNum(WHSInventReserve,ItemId), _inventSumDeltaDim.ItemId));

        InventDim inventDimCheck;
        _inventSumDeltaDim.initInventDim(inventDimCheck);

        InventDimParm inventDimParmCheck;
        inventDimParmCheck.initFromInventDim(inventDimCheck);

        InventOnhand inventOnhand = InventOnhand::newParameters(_inventSumDeltaDim.ItemId, inventDimCheck, inventDimParmCheck);
        inventOnhand.whsParmSkipDelta(true);

        switch (_inventSumDeltaDim.CheckType)
        {
            case InventOnhandCheckType::WHSDepreciateOrdered :
                checkOnHandWHSDepreciatedOrderedCount += 1;
                if (!inventOnhand.checkDepreciateOrdered(0, false, 0))
                {
                    return false;
                }
                break;
            case InventOnhandCheckType::WHSReservation :
                checkOnHandWHSReservationCount += 1;
                if (!inventOnhand.checkReservation(0, false, InventParameters::find().ReserveOnOrdered))
                {
                    return false;
                }
                break;
            case InventOnhandCheckType::WHSPhysical :
                checkOnHandWHSPhysicalCount += 1;
                if (!inventOnhand.checkItemDraw(0, false, true))
                {
                    return false;
                }
                break;
            default:
                //Invalid Argument
                error("@SYS111577");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOnhandFromCheckType</Name>
				<Source><![CDATA[
    private boolean checkOnhandFromCheckType(InventSumDeltaDim _inventSumDeltaDim, InventSum _inventSum)
    {
        setPrefix(fieldLabelValue(_inventSum.TableId, fieldNum(InventSum, ItemId), _inventSumDeltaDim.ItemId));
        InventDim inventDimCheck;
        _inventSumDeltaDim.initInventDim(inventDimCheck);
        InventDimParm inventDimParmCheck;
        inventDimParmCheck.initFromInventDim(inventDimCheck);
        InventOnhand inventOnhand = InventOnhand::newParameters(_inventSumDeltaDim.ItemId, inventDimCheck, inventDimParmCheck);
        inventOnhand.parmInventSum(_inventSum);

        switch (_inventSumDeltaDim.CheckType)
        {
            case InventOnhandCheckType::DepreciateOrdered :
                checkOnHandDepreciatedOrderedCount +=1;
                if (!inventOnhand.checkDepreciateOrdered(0,false,0))
                {
                    return false;
                }
                break;
            case InventOnhandCheckType::Reservation :
                checkOnHandReservationCount += 1;
                if (!inventOnhand.checkReservation(0,false,InventParameters::find().ReserveOnOrdered))
                {
                    return false;
                }
                break;
            case InventOnhandCheckType::Physical :
                checkOnHandPhysicalCount += 1;
                if (!inventOnhand.checkItemDraw(0,false,true))
                {
                    return false;
                }
                break;
            /*
                For WHS items we cannot solely rely on the Physical check since it is relying on the data in the WHSInventReserve table.
                There are cases, e.g. when using serial numbers and allowing blanks, where we risk reducing quantity since we remove quantities from higher levels in the hierarchy.
                We need to check the actual physical invent for cases where we physically updated inventtrans.
                */
            case InventOnhandCheckType::WHSPhysicalInventChange :
                checkOnHandWHSPhysicalInventChangeCount += 1;
                if (!inventOnhand.checkItemDrawPhysicalInvent(0))
                {
                    return false;
                }
                break;
            case InventOnhandCheckType::Financial :
                checkOnHandFinancialCount += 1;
                if (!inventOnhand.checkItemDrawFinancial(0,false,true))
                {
                    return false;
                }
                break;
            case InventOnhandCheckType::InventModel :
                checkOnHandInventModelCount += 1;
                if (!inventOnhand.checkInventModel())
                {
                    return false;
                }
                break;
            // <GEERU>
            case InventOnhandCheckType::StdCostSecCur_RU    :
                if (!inventOnhand.checkItemStdCostSecCur_RU())
                {
                    return false;
                }
                break;
            // </GEERU>

            default:
                throw error("@SYS98336");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>is_instantiateInventSumQueryObjectForSummarizedOnhand_MethodExtended</Name>
				<Source><![CDATA[
    private boolean is_instantiateInventSumQueryObjectForSummarizedOnhand_MethodExtended(InventSum _inventSum, InventSumDeltaDim _inventSumDeltaDim, InventDim _inventDim)
    {
        boolean isMethodExtended = false;

        using (InventUpdateOnHandInstrumentationTask onHandInstrumentationTask = new InventUpdateOnHandInstrumentationTask(methodStr(InventUpdateOnhand, is_instantiateInventSumQueryObjectForSummarizedOnhand_MethodExtended)))
        {
            SysDaQueryObject inventSumQueryObject = this.instantiateInventSumQueryObjectForSummarizedOnhand(_inventSum, _inventSumDeltaDim, _inventDim);
            // Compare query string from method instantiateInventSumQueryObjectForSummarizedOnhand() with standard code
            if (this.instantiateInventSumQueryObjectForSummarizedOnhandShadow(_inventSum, _inventSumDeltaDim, _inventDim).toString() != inventSumQueryObject.toString())
            {
                isMethodExtended = true;
                onHandInstrumentationTask.addEvent('instantiateInventSumQueryObjectForSummarizedOnhand', inventSumQueryObject.toString());
            }
        }

        return isMethodExtended;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateInventSumQueryObjectForSummarizedOnhandDirectly</Name>
				<Source><![CDATA[
    private SysDaQueryObject instantiateInventSumQueryObjectForSummarizedOnhandDirectly(InventSum _inventSum, InventSumDeltaDim _inventSumDeltaDim)
    {
        SysDaQueryObject inventSumQueryObject = new SysDaQueryObject(_inventSum);
 
        InventDim::dimAddInventSumFieldsQueryProjection(inventSumQueryObject);

        inventSumQueryObject.whereClause(this.instantiateWhereClauseForInventSumQueryObject(_inventSum));
 
        SysDaQueryObject inventSumDeltaDimQueryObject = new SysDaQueryObject(_inventSumDeltaDim);
 
        inventSumDeltaDimQueryObject.groupByClause(this.instantiateGroupBysForInventSumDeltaDimQueryObject());
 
        inventSumDeltaDimQueryObject.whereClause(this.addWhereClauseToInventSumFromInventSumDeltaDimQueryObject(_inventSum, _inventSumDeltaDim));
 
        inventSumQueryObject.joinClause(SysDaJoinKind::InnerJoin, inventSumDeltaDimQueryObject);

        return inventSumQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateInventSumQueryObjectForSummarizedOnhand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a query object with <c>InventSum</c> record buffer selection for the summerized onhand check.
    /// </summary>
    /// <param name = "_inventSum">An <c>InventSum</c> record buffer.</param>
    /// <param name = "_inventSumDeltaDim">An <c>InventSumDelta</c> record buffer.</param>
    /// <param name = "_inventDim">An <c>InventDim</c> record buffer.</param>
    /// <returns>A <c>SysDaQueryObject</c> instance for the find statement.</returns>
    protected SysDaQueryObject instantiateInventSumQueryObjectForSummarizedOnhand(InventSum _inventSum, InventSumDeltaDim _inventSumDeltaDim, InventDim _inventDim)
    {
        SysDaQueryObject inventSumQueryObject = new SysDaQueryObject(_inventSum);
        
        InventDim::dimAddInventSumFieldsQueryProjection(inventSumQueryObject);
    
        inventSumQueryObject.whereClause(this.instantiateWhereClauseForInventSumQueryObject(_inventSum));

        SysDaQueryObject inventDimQueryObject = this.instantiateInventDimQueryObjectForInventSumJoin(_inventSum, _inventSumDeltaDim, _inventDim);
        inventSumQueryObject.joinClause(SysDaJoinKind::InnerJoin, inventDimQueryObject);

        SysDaQueryObject inventSumDeltaDimQueryObject = this.instantiateInventSumDeltaDimQueryObjectForInventDimJoin(_inventSum, _inventSumDeltaDim, _inventDim);
        inventDimQueryObject.joinClause(SysDaJoinKind::InnerJoin, inventSumDeltaDimQueryObject);

        return inventSumQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateInventSumQueryObjectForSummarizedOnhandShadow</Name>
				<Source><![CDATA[
    private SysDaQueryObject instantiateInventSumQueryObjectForSummarizedOnhandShadow(InventSum _inventSum, InventSumDeltaDim _inventSumDeltaDim, InventDim _inventDim)
    {
        SysDaQueryObject inventSumQueryObject = new SysDaQueryObject(_inventSum);
        
        InventDim::dimAddInventSumFieldsQueryProjection(inventSumQueryObject);
    
        inventSumQueryObject.whereClause(this.instantiateWhereClauseForInventSumQueryObjectShadow(_inventSum));

        SysDaQueryObject inventDimQueryObject = this.instantiateInventDimQueryObjectForInventSumJoinShadow(_inventSum, _inventSumDeltaDim, _inventDim);
        inventSumQueryObject.joinClause(SysDaJoinKind::InnerJoin, inventDimQueryObject);

        SysDaQueryObject inventSumDeltaDimQueryObject = this.instantiateInventSumDeltaDimQueryObjectForInventDimJoinShadow(_inventSum, _inventSumDeltaDim, _inventDim);
        inventDimQueryObject.joinClause(SysDaJoinKind::InnerJoin, inventSumDeltaDimQueryObject);
        return inventSumQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateInventSumQueryObjectForSummarizedOnhandFromInventSumDeltaDimDirectly</Name>
				<Source><![CDATA[
    private SysDaQueryObject instantiateInventSumQueryObjectForSummarizedOnhandFromInventSumDeltaDimDirectly(InventSum _inventSum, InventSumDeltaDim _inventSumDeltaDim)
    {
        SysDaQueryObject inventSumQueryObject = new SysDaQueryObject(_inventSum);

        InventDim::dimAddInventSumFieldsQueryProjection(inventSumQueryObject);

        SysDaQueryExpression inventSumQueryExpression = this.instantiateWhereClauseForInventSumQueryObject(_inventSum);
        inventSumQueryExpression = this.addWhereClauseToInventSumFromInventSumDeltaDimValue(_inventSum, _inventSumDeltaDim, inventSumQueryExpression);

        inventSumQueryObject.whereClause(inventSumQueryExpression);
        return inventSumQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateInventSumQueryObjectForSummarizedOnhandFromInventSumDeltaDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a query object with <c>InventSum</c> record buffer selection for the summerized onhand check, inventDim query condition will be limited from
    /// record buffer <c>InventSumDeltaDim</c> value.
    /// </summary>
    /// <param name = "_inventSum">An <c>InventSum</c> record buffer.</param>
    /// <param name = "_inventSumDeltaDim">An <c>InventSumDelta</c> record buffer.</param>
    /// <param name = "_inventDim">An <c>InventDim</c> record buffer.</param>
    /// <returns>A <c>SysDaQueryObject</c> instance for the find statement.</returns>
    protected SysDaQueryObject instantiateInventSumQueryObjectForSummarizedOnhandFromInventSumDeltaDim(InventSum _inventSum, InventSumDeltaDim _inventSumDeltaDim, InventDim _inventDim)
    {
        SysDaQueryObject inventSumQueryObject = new SysDaQueryObject(_inventSum);
        
        InventDim::dimAddInventSumFieldsQueryProjection(inventSumQueryObject);
    
        SysDaQueryExpression inventSumQueryExpression = this.instantiateWhereClauseForInventSumQueryObject(_inventSum);
        inventSumQueryExpression = inventSumQueryExpression.and(
            new SysDaEqualsExpression(new SysDaFieldExpression(_inventSum, fieldStr(InventSum, ItemId)), new SysDaValueExpression(_inventSumDeltaDim.ItemId)));
        inventSumQueryObject.whereClause(inventSumQueryExpression);
        SysDaQueryObject inventDimQueryObject = this.instantiateInventDimQueryObjectForInventSumJoinFromInventSumDeltaDim(_inventSum, _inventSumDeltaDim, _inventDim);
        inventSumQueryObject.joinClause(SysDaJoinKind::ExistsJoin, inventDimQueryObject);
        
        return inventSumQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWhereClauseToInventSumFromInventSumDeltaDimQueryObject</Name>
				<Source><![CDATA[
    private SysDaQueryExpression addWhereClauseToInventSumFromInventSumDeltaDimQueryObject(InventSum _inventSum, InventSumDeltaDim _inventSumDeltaDim)
    {
        SysDaQueryExpression inventSumQueryExpression =
                  new SysDaEqualsExpression(
                  new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, ItemId)), new SysDaFieldExpression(_inventSum, fieldStr(InventSum, ItemId)))
             .and(new SysDaEqualsExpression(
                  new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, TTSId)), new SysDaValueExpression(this.ttsId())))
             .and(new SysDaEqualsExpression(
                  new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, AreAllActiveDimensionsSpecified)), new SysDaValueExpression(NoYes::No)))
             .and(this.instantiateQueryExpressionCheckTypeFilterForInventSumDeltaDim(_inventSumDeltaDim))
             .and(new SysDaEqualsExpression(
                  new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, configId)), new SysDaFieldExpression(_inventSum, fieldStr(InventSum, configId)))
                 .or(new SysDaEqualsExpression(
                     new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, ConfigIdFlag)), new SysDaValueExpression(NoYes::No))))
             .and(new SysDaEqualsExpression(
                  new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventSizeId)), new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventSizeId)))
                 .or(new SysDaEqualsExpression(
                     new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventSizeIdFlag)), new SysDaValueExpression(NoYes::No))))
             .and(new SysDaEqualsExpression(
                  new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventColorId)), new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventColorId)))
                 .or(new SysDaEqualsExpression(
                     new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventColorIdFlag)), new SysDaValueExpression(NoYes::No))))
             .and(new SysDaEqualsExpression(
                  new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventStyleId)), new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventStyleId)))
                 .or(new SysDaEqualsExpression(
                     new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventStyleIdFlag)), new SysDaValueExpression(NoYes::No))))
             .and(new SysDaEqualsExpression(
                  new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventVersionId)), new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventVersionId)))
                 .or(new SysDaEqualsExpression(
                     new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventVersionIdFlag)), new SysDaValueExpression(NoYes::No))))
             .and(new SysDaEqualsExpression(
                  new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventSiteId)), new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventSiteId)))
                 .or(new SysDaEqualsExpression(
                     new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventSiteIdFlag)), new SysDaValueExpression(NoYes::No))))
             .and(new SysDaEqualsExpression(
                  new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventLocationId)), new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventLocationId)))
                 .or(new SysDaEqualsExpression(
                     new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventLocationIdFlag)), new SysDaValueExpression(NoYes::No))))
             .and(new SysDaEqualsExpression(
                  new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, wmsLocationId)), new SysDaFieldExpression(_inventSum, fieldStr(InventSum, wmsLocationId)))
                 .or(new SysDaEqualsExpression(
                     new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, wmsLocationIdFlag)), new SysDaValueExpression(NoYes::No))))
             .and(new SysDaEqualsExpression(
                  new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, LicensePlateId)), new SysDaFieldExpression(_inventSum, fieldStr(InventSum, LicensePlateId)))
                 .or(new SysDaEqualsExpression(
                     new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, LicensePlateFlag)), new SysDaValueExpression(NoYes::No))))
             .and(new SysDaEqualsExpression(
                  new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventStatusId)), new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventStatusId)))
                 .or(new SysDaEqualsExpression(
                     new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventStatusFlag)), new SysDaValueExpression(NoYes::No))))
             .and(new SysDaEqualsExpression(
                  new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventBatchId)), new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventBatchId)))
                 .or(new SysDaEqualsExpression(
                     new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventBatchIdFlag)), new SysDaValueExpression(NoYes::No))))
             .and(new SysDaEqualsExpression(
                  new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventSerialId)), new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventSerialId)))
                 .or(new SysDaEqualsExpression(
                     new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventSerialIdFlag)), new SysDaValueExpression(NoYes::No))))
             .and(new SysDaEqualsExpression(
                  new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension1)), new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventDimension1)))
                 .or(new SysDaEqualsExpression(
                     new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension1Flag)), new SysDaValueExpression(NoYes::No))))
             .and(new SysDaEqualsExpression(
                  new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension2)), new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventDimension2)))
                 .or(new SysDaEqualsExpression(
                     new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension2Flag)), new SysDaValueExpression(NoYes::No))))
             .and(new SysDaEqualsExpression(
                  new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension3)), new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventDimension3)))
                 .or(new SysDaEqualsExpression(
                     new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension3Flag)), new SysDaValueExpression(NoYes::No))))
             .and(new SysDaEqualsExpression(
                  new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension4)), new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventDimension4)))
                 .or(new SysDaEqualsExpression(
                     new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension4Flag)), new SysDaValueExpression(NoYes::No))))
             .and(new SysDaEqualsExpression(
                  new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension5)), new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventDimension5)))
                 .or(new SysDaEqualsExpression(
                     new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension5Flag)), new SysDaValueExpression(NoYes::No))))
             .and(new SysDaEqualsExpression(
                  new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension6)), new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventDimension6)))
                 .or(new SysDaEqualsExpression(
                     new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension6Flag)), new SysDaValueExpression(NoYes::No))))
             .and(new SysDaEqualsExpression(
                  new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension7)), new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventDimension7)))
                 .or(new SysDaEqualsExpression(
                     new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension7Flag)), new SysDaValueExpression(NoYes::No))))
             .and(new SysDaEqualsExpression(
                  new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension8)), new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventDimension8)))
                 .or(new SysDaEqualsExpression(
                     new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension8Flag)), new SysDaValueExpression(NoYes::No))))
             .and(new SysDaEqualsExpression(
                  new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension9)), new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventDimension9)))
                 .or(new SysDaEqualsExpression(
                     new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension9Flag)), new SysDaValueExpression(NoYes::No))))
             .and(new SysDaEqualsExpression(
                  new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension10)), new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventDimension10)))
                 .or(new SysDaEqualsExpression(
                     new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension10Flag)), new SysDaValueExpression(NoYes::No))))
             .and(new SysDaEqualsExpression(
                  new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension11)), new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventDimension11)))
                 .or(new SysDaEqualsExpression(
                     new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension11Flag)), new SysDaValueExpression(NoYes::No))))
             .and(new SysDaEqualsExpression(
                  new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension12)), new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventDimension12)))
                 .or(new SysDaEqualsExpression(
                     new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension12Flag)), new SysDaValueExpression(NoYes::No))))
             .and(new SysDaEqualsExpression(
                  new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventGtdId_RU)), new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventGtdId_RU)))
                 .or(new SysDaEqualsExpression(
                     new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventGTDIdFlag_RU)), new SysDaValueExpression(NoYes::No))))
             .and(new SysDaEqualsExpression(
                  new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventProfileId_RU)), new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventProfileId_RU)))
                 .or(new SysDaEqualsExpression(
                     new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventProfileIdFlag_RU)), new SysDaValueExpression(NoYes::No))))
             .and(new SysDaEqualsExpression(
                  new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventOwnerId_RU)), new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventOwnerId_RU)))
                 .or(new SysDaEqualsExpression(
                     new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventOwnerIdFlag_RU)), new SysDaValueExpression(NoYes::No))));
        return inventSumQueryExpression;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWhereClauseToInventSumFromInventSumDeltaDimValue</Name>
				<Source><![CDATA[
    private SysDaQueryExpression addWhereClauseToInventSumFromInventSumDeltaDimValue(InventSum _inventSum, InventSumDeltaDim _inventSumDeltaDim, SysDaQueryExpression _inventSumQueryExpression)
    {
        _inventSumQueryExpression = _inventSumQueryExpression
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSum, fieldStr(InventSum, ItemId)), new SysDaValueExpression(_inventSumDeltaDim.ItemId)))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSum, fieldStr(InventSum, configId)), new SysDaValueExpression(_inventSumDeltaDim.configId))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDim.ConfigIdFlag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventSizeId)), new SysDaValueExpression(_inventSumDeltaDim.InventSizeId))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDim.InventSizeIdFlag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventColorId)), new SysDaValueExpression(_inventSumDeltaDim.InventColorId))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDim.InventColorIdFlag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventStyleId)), new SysDaValueExpression(_inventSumDeltaDim.InventStyleId))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDim.InventStyleIdFlag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventVersionId)), new SysDaValueExpression(_inventSumDeltaDim.InventVersionId))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDim.InventVersionIdFlag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventSiteId)), new SysDaValueExpression(_inventSumDeltaDim.InventSiteId))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDim.InventSiteIdFlag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventLocationId)), new SysDaValueExpression(_inventSumDeltaDim.InventLocationId))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDim.InventLocationIdFlag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSum, fieldStr(InventSum, wmsLocationId)), new SysDaValueExpression(_inventSumDeltaDim.wmsLocationId))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDim.WMSLocationIdFlag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSum, fieldStr(InventSum, LicensePlateId)), new SysDaValueExpression(_inventSumDeltaDim.LicensePlateId))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDim.LicensePlateFlag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventStatusId)), new SysDaValueExpression(_inventSumDeltaDim.InventStatusId))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDim.InventStatusFlag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventBatchId)), new SysDaValueExpression(_inventSumDeltaDim.InventBatchId))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDim.InventBatchIdFlag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventSerialId)), new SysDaValueExpression(_inventSumDeltaDim.InventSerialId))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDim.InventSerialIdFlag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventDimension1)), new SysDaValueExpression(_inventSumDeltaDim.InventDimension1))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDim.InventDimension1Flag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventDimension2)), new SysDaValueExpression(_inventSumDeltaDim.InventDimension2))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDim.InventDimension2Flag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventDimension3)), new SysDaValueExpression(_inventSumDeltaDim.InventDimension3))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDim.InventDimension3Flag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventDimension4)), new SysDaValueExpression(_inventSumDeltaDim.InventDimension4))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDim.InventDimension4Flag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventDimension5)), new SysDaValueExpression(_inventSumDeltaDim.InventDimension5))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDim.InventDimension5Flag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventDimension6)), new SysDaValueExpression(_inventSumDeltaDim.InventDimension6))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDim.InventDimension6Flag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventDimension7)), new SysDaValueExpression(_inventSumDeltaDim.InventDimension7))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDim.InventDimension7Flag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventDimension8)), new SysDaValueExpression(_inventSumDeltaDim.InventDimension8))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDim.InventDimension8Flag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventDimension9)), new SysDaValueExpression(_inventSumDeltaDim.InventDimension9))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDim.InventDimension9Flag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventDimension10)), new SysDaValueExpression(_inventSumDeltaDim.InventDimension10))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDim.InventDimension10Flag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventDimension11)), new SysDaValueExpression(_inventSumDeltaDim.InventDimension11))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDim.InventDimension11Flag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventDimension12)), new SysDaValueExpression(_inventSumDeltaDim.InventDimension12))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDim.InventDimension12Flag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventGtdId_RU)), new SysDaValueExpression(_inventSumDeltaDim.InventGtdId_RU))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDim.InventGTDIdFlag_RU), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventProfileId_RU)), new SysDaValueExpression(_inventSumDeltaDim.InventProfileId_RU))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDim.InventProfileIdFlag_RU), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventOwnerId_RU)), new SysDaValueExpression(_inventSumDeltaDim.InventOwnerId_RU))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDim.InventOwnerIdFlag_RU), new SysDaValueExpression(NoYes::No))));
        return _inventSumQueryExpression;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateWhereClauseForInventSumQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>SysDaQueryExpression</c> for where claus of the inventory summarize selection.
    /// </summary>
    /// <param name = "_inventSum">An <c>InventSum</c> record buffer.</param>
    /// <returns>A <c>SysDaQueryExpression</c> instance.</returns>
    protected SysDaQueryExpression instantiateWhereClauseForInventSumQueryObject(InventSum _inventSum)
    {
        SysDaQueryExpression inventSumQueryExpression = new SysDaEqualsExpression(
            new SysDaFieldExpression(_inventSum, fieldStr(InventSum, Closed)), new SysDaValueExpression(NoYes::No))
            .and(new SysDaOrExpression(
                 new SysDaEqualsExpression(new SysDaValueExpression(mustUseOnHandAmounts), new SysDaValueExpression(true)),
                 new SysDaEqualsExpression(new SysDaFieldExpression(_inventSum, fieldStr(InventSum, ClosedQty)), new SysDaValueExpression(NoYes::No))));

        return inventSumQueryExpression;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateWhereClauseForInventSumQueryObjectShadow</Name>
				<Source><![CDATA[
    private SysDaQueryExpression instantiateWhereClauseForInventSumQueryObjectShadow(InventSum _inventSum)
    {
        SysDaQueryExpression inventSumQueryExpression = new SysDaEqualsExpression(
            new SysDaFieldExpression(_inventSum, fieldStr(InventSum, Closed)), new SysDaValueExpression(NoYes::No))
            .and(new SysDaOrExpression(
                 new SysDaEqualsExpression(new SysDaValueExpression(mustUseOnHandAmounts), new SysDaValueExpression(true)),
                 new SysDaEqualsExpression(new SysDaFieldExpression(_inventSum, fieldStr(InventSum, ClosedQty)), new SysDaValueExpression(NoYes::No))));

        return inventSumQueryExpression;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateInventDimQueryObjectForInventSumJoin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a query object for the join of <c>InventDim</c> and <c>InventSum></c> record buffers.
    /// </summary>
    /// <param name = "_inventSum">An <c>InventSum</c> record buffer.</param>
    /// <param name = "_inventSumDeltaDim">An <c>InventSumDeltaDim</c> record buffer</param>
    /// <param name = "_inventDim">An <c>InventDim</c> record buffer.</param>
    /// <returns>A <c>SysDaQueryObject</c> instance.</returns>
    protected SysDaQueryObject instantiateInventDimQueryObjectForInventSumJoin(InventSum _inventSum, InventSumDeltaDim _inventSumDeltaDim, InventDim _inventDim)
    {
        SysDaQueryObject inventDimQueryObject = new SysDaQueryObject(_inventDim);

        SysDaQueryExpression inventDimQueryExpression = new SysDaEqualsExpression(
            new SysDaFieldExpression(_inventSum, fieldStr(Inventsum, InventDimId)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, inventDimId)));

        inventDimQueryObject.whereClause(inventDimQueryExpression);

        return inventDimQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateInventDimQueryObjectForInventSumJoinShadow</Name>
				<Source><![CDATA[
    private SysDaQueryObject instantiateInventDimQueryObjectForInventSumJoinShadow(InventSum _inventSum, InventSumDeltaDim _inventSumDeltaDim, InventDim _inventDim)
    {
        SysDaQueryObject inventDimQueryObject = new SysDaQueryObject(_inventDim);

        SysDaQueryExpression inventDimQueryExpression = new SysDaEqualsExpression(
            new SysDaFieldExpression(_inventSum, fieldStr(Inventsum, InventDimId)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, inventDimId)));

        inventDimQueryObject.whereClause(inventDimQueryExpression);

        return inventDimQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateInventDimQueryObjectForInventSumJoinFromInventSumDeltaDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a query object for the join of empty <c>InventDim</c> and empty <c>InventSum></c> record buffers, inventDim query condition will be limited from
    /// selected record buffer <c>InventSumDeltaDim</c> value.
    /// </summary>
    /// <param name = "_inventSum">An empty <c>InventSum</c> record buffer.</param>
    /// <param name = "_inventSumDeltaDimSelected">An already selected <c>InventSumDeltaDim</c> record buffer</param>
    /// <param name = "_inventDim">An empty <c>InventDim</c> record buffer.</param>
    /// <returns>A <c>SysDaQueryObject</c> instance.</returns>
    protected SysDaQueryObject instantiateInventDimQueryObjectForInventSumJoinFromInventSumDeltaDim(InventSum _inventSum, InventSumDeltaDim _inventSumDeltaDimSelected, InventDim _inventDim)
    {
        SysDaQueryObject inventDimQueryObject = new SysDaQueryObject(_inventDim);

        SysDaQueryExpression inventDimQueryExpression = new SysDaEqualsExpression(
            new SysDaFieldExpression(_inventSum, fieldStr(Inventsum, InventDimId)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, inventDimId)))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventDim, fieldStr(InventDim, configId)), new SysDaValueExpression(_inventSumDeltaDimSelected.configId))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDimSelected.ConfigIdFlag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventSizeId)), new SysDaValueExpression(_inventSumDeltaDimSelected.InventSizeId))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDimSelected.InventSizeIdFlag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventColorId)), new SysDaValueExpression(_inventSumDeltaDimSelected.InventColorId))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDimSelected.InventColorIdFlag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventStyleId)), new SysDaValueExpression(_inventSumDeltaDimSelected.InventStyleId))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDimSelected.InventStyleIdFlag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventVersionId)), new SysDaValueExpression(_inventSumDeltaDimSelected.InventVersionId))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDimSelected.InventVersionIdFlag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventSiteId)), new SysDaValueExpression(_inventSumDeltaDimSelected.InventSiteId))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDimSelected.InventSiteIdFlag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventLocationId)), new SysDaValueExpression(_inventSumDeltaDimSelected.InventLocationId))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDimSelected.InventLocationIdFlag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventDim, fieldStr(InventDim, wmsLocationId)), new SysDaValueExpression(_inventSumDeltaDimSelected.wmsLocationId))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDimSelected.WMSLocationIdFlag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventDim, fieldStr(InventDim, LicensePlateId)), new SysDaValueExpression(_inventSumDeltaDimSelected.LicensePlateId))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDimSelected.LicensePlateFlag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventStatusId)), new SysDaValueExpression(_inventSumDeltaDimSelected.InventStatusId))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDimSelected.InventStatusFlag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventBatchId)), new SysDaValueExpression(_inventSumDeltaDimSelected.InventBatchId))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDimSelected.InventBatchIdFlag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventSerialId)), new SysDaValueExpression(_inventSumDeltaDimSelected.InventSerialId))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDimSelected.InventSerialIdFlag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventDimension1)), new SysDaValueExpression(_inventSumDeltaDimSelected.InventDimension1))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDimSelected.InventDimension1Flag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventDimension2)), new SysDaValueExpression(_inventSumDeltaDimSelected.InventDimension2))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDimSelected.InventDimension2Flag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventDimension3)), new SysDaValueExpression(_inventSumDeltaDimSelected.InventDimension3))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDimSelected.InventDimension3Flag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventDimension4)), new SysDaValueExpression(_inventSumDeltaDimSelected.InventDimension4))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDimSelected.InventDimension4Flag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventDimension5)), new SysDaValueExpression(_inventSumDeltaDimSelected.InventDimension5))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDimSelected.InventDimension5Flag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventDimension6)), new SysDaValueExpression(_inventSumDeltaDimSelected.InventDimension6))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDimSelected.InventDimension6Flag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventDimension7)), new SysDaValueExpression(_inventSumDeltaDimSelected.InventDimension7))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDimSelected.InventDimension7Flag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventDimension8)), new SysDaValueExpression(_inventSumDeltaDimSelected.InventDimension8))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDimSelected.InventDimension8Flag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventDimension9)), new SysDaValueExpression(_inventSumDeltaDimSelected.InventDimension9))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDimSelected.InventDimension9Flag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventDimension10)), new SysDaValueExpression(_inventSumDeltaDimSelected.InventDimension10))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDimSelected.InventDimension10Flag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventDimension11)), new SysDaValueExpression(_inventSumDeltaDimSelected.InventDimension11))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDimSelected.InventDimension11Flag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventDimension12)), new SysDaValueExpression(_inventSumDeltaDimSelected.InventDimension12))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDimSelected.InventDimension12Flag), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventGtdId_RU)), new SysDaValueExpression(_inventSumDeltaDimSelected.InventGtdId_RU))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDimSelected.InventGTDIdFlag_RU), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventProfileId_RU)), new SysDaValueExpression(_inventSumDeltaDimSelected.InventProfileId_RU))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDimSelected.InventProfileIdFlag_RU), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventOwnerId_RU)), new SysDaValueExpression(_inventSumDeltaDimSelected.InventOwnerId_RU))
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_inventSumDeltaDimSelected.InventOwnerIdFlag_RU), new SysDaValueExpression(NoYes::No))));

        inventDimQueryObject.whereClause(inventDimQueryExpression);

        return inventDimQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateInventSumDeltaDimQueryObjectForInventDimJoin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a query object for the join of <c>InventSumDeltaDim</c> and <c>InventDim></c> record buffers.
    /// </summary>
    /// <param name = "_inventSum">An <c>InventSum</c> record buffer.</param>
    /// <param name = "_inventSumDeltaDim">An <c>InventSumDeltaDim</c> record buffer</param>
    /// <param name = "_inventDim">An <c>InventDim</c> record buffer.</param>
    /// <returns>A <c>SysDaQueryObject</c> instance.</returns>
    protected SysDaQueryObject instantiateInventSumDeltaDimQueryObjectForInventDimJoin(InventSum _inventSum, InventSumDeltaDim _inventSumDeltaDim, InventDim _inventDim)
    {
        #InventDimDevelop
        
        SysDaQueryObject inventSumDeltaDimQueryObject = new SysDaQueryObject(_inventSumDeltaDim);

        inventSumDeltaDimQueryObject.groupByClause(this.instantiateGroupBysForInventSumDeltaDimQueryObject());

        SysDaQueryExpression inventSumDeltaDimQueryExpression = new SysDaEqualsExpression(
            new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, ItemId)), new SysDaFieldExpression(_inventSum, fieldStr(InventSum, ItemId)))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, TTSId)), new SysDaValueExpression(this.ttsId())))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, AreAllActiveDimensionsSpecified)), new SysDaValueExpression(NoYes::No)))
            .and(this.instantiateQueryExpressionCheckTypeFilterForInventSumDeltaDim(_inventSumDeltaDim))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, configId)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, configId)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, ConfigIdFlag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventSizeId)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventSizeId)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventSizeIdFlag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventColorId)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventColorId)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventColorIdFlag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventStyleId)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventStyleId)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventStyleIdFlag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventVersionId)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventVersionId)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventVersionIdFlag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventSiteId)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventSiteId)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventSiteIdFlag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventLocationId)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventLocationId)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventLocationIdFlag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, wmsLocationId)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, wmsLocationId)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, wmsLocationIdFlag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, LicensePlateId)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, LicensePlateId)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, LicensePlateFlag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventStatusId)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventStatusId)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventStatusFlag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventBatchId)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventBatchId)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventBatchIdFlag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventSerialId)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventSerialId)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventSerialIdFlag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension1)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventDimension1)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension1Flag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension2)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventDimension2)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension2Flag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension3)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventDimension3)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension3Flag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension4)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventDimension4)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension4Flag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension5)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventDimension5)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension5Flag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension6)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventDimension6)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension6Flag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension7)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventDimension7)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension7Flag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension8)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventDimension8)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension8Flag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension9)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventDimension9)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension9Flag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension10)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventDimension10)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension10Flag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension11)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventDimension11)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension11Flag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension12)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventDimension12)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension12Flag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventGtdId_RU)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventGtdId_RU)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventGTDIdFlag_RU)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventProfileId_RU)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventProfileId_RU)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventProfileIdFlag_RU)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventOwnerId_RU)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventOwnerId_RU)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventOwnerIdFlag_RU)), new SysDaValueExpression(NoYes::No))));

        inventSumDeltaDimQueryObject.whereClause(inventSumDeltaDimQueryExpression);

        return inventSumDeltaDimQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateInventSumDeltaDimQueryObjectForInventDimJoinShadow</Name>
				<Source><![CDATA[
    private SysDaQueryObject instantiateInventSumDeltaDimQueryObjectForInventDimJoinShadow(InventSum _inventSum, InventSumDeltaDim _inventSumDeltaDim, InventDim _inventDim)
    {
        #InventDimDevelop
        
        SysDaQueryObject inventSumDeltaDimQueryObject = new SysDaQueryObject(_inventSumDeltaDim);

        inventSumDeltaDimQueryObject.groupByClause(this.instantiateGroupBysForInventSumDeltaDimQueryObjectShadow());

        SysDaQueryExpression inventSumDeltaDimQueryExpression = new SysDaEqualsExpression(
            new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, ItemId)), new SysDaFieldExpression(_inventSum, fieldStr(InventSum, ItemId)))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, TTSId)), new SysDaValueExpression(this.ttsId())))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, AreAllActiveDimensionsSpecified)), new SysDaValueExpression(NoYes::No)))
            .and(this.instantiateQueryExpressionCheckTypeFilterForInventSumDeltaDim(_inventSumDeltaDim))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, configId)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, configId)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, ConfigIdFlag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventSizeId)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventSizeId)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventSizeIdFlag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventColorId)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventColorId)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventColorIdFlag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventStyleId)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventStyleId)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventStyleIdFlag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventVersionId)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventVersionId)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventVersionIdFlag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventSiteId)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventSiteId)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventSiteIdFlag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventLocationId)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventLocationId)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventLocationIdFlag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, wmsLocationId)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, wmsLocationId)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, wmsLocationIdFlag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, LicensePlateId)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, LicensePlateId)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, LicensePlateFlag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventStatusId)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventStatusId)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventStatusFlag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventBatchId)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventBatchId)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventBatchIdFlag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventSerialId)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventSerialId)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventSerialIdFlag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension1)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventDimension1)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension1Flag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension2)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventDimension2)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension2Flag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension3)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventDimension3)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension3Flag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension4)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventDimension4)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension4Flag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension5)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventDimension5)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension5Flag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension6)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventDimension6)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension6Flag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension7)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventDimension7)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension7Flag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension8)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventDimension8)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension8Flag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension9)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventDimension9)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension9Flag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension10)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventDimension10)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension10Flag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension11)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventDimension11)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension11Flag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension12)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventDimension12)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimension12Flag)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventGtdId_RU)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventGtdId_RU)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventGTDIdFlag_RU)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventProfileId_RU)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventProfileId_RU)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventProfileIdFlag_RU)), new SysDaValueExpression(NoYes::No))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventOwnerId_RU)), new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventOwnerId_RU)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventOwnerIdFlag_RU)), new SysDaValueExpression(NoYes::No))));

        inventSumDeltaDimQueryObject.whereClause(inventSumDeltaDimQueryExpression);

        return inventSumDeltaDimQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateInventSumDeltaDimQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a query object for the <c>InventSumDeltaDim</c> record buffers.
    /// </summary>
    /// <param name = "_inventSumDeltaDim">An <c>InventSumDeltaDim</c> record buffer</param>
    /// <returns>A <c>SysDaQueryObject</c> instance.</returns>
    protected SysDaQueryObject instantiateInventSumDeltaDimQueryObject(InventSumDeltaDim _inventSumDeltaDim)
    {
        #InventDimDevelop
        
        SysDaQueryObject inventSumDeltaDimQueryObject = new SysDaQueryObject(_inventSumDeltaDim);

        inventSumDeltaDimQueryObject.groupByClause(this.instantiateGroupBysForInventSumDeltaDimQueryObjectWithInventDimFlag());

        SysDaQueryExpression inventSumDeltaDimQueryExpression = new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, TTSId)), new SysDaValueExpression(this.ttsId()))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, AreAllActiveDimensionsSpecified)), new SysDaValueExpression(NoYes::No)))
            .and(this.instantiateQueryExpressionCheckTypeFilterForInventSumDeltaDim(_inventSumDeltaDim));
            
        inventSumDeltaDimQueryObject.whereClause(inventSumDeltaDimQueryExpression);

        return inventSumDeltaDimQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateGroupBysForInventSumDeltaDimQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates <c>SysDaGroupBys</c> for the <c>InventSumDeltaDim</c> record buffer selection.
    /// </summary>
    /// <returns>A <c>SysDaGroupBys</c> instance.</returns>
    protected SysDaGroupBys instantiateGroupBysForInventSumDeltaDimQueryObject()
    {
        SysDaGroupBys inventSumDeltaGroupBys = new SysDaGroupBys()
            .add(fieldStr(InventSumDeltaDim, checkType))
            .add(fieldStr(InventSumDeltaDim, ItemId))
            .add(fieldStr(InventSumDeltaDim, configId))
            .add(fieldStr(InventSumDeltaDim, InventSizeId))
            .add(fieldStr(InventSumDeltaDim, InventColorId))
            .add(fieldStr(InventSumDeltaDim, InventStyleId))
            .add(fieldStr(InventSumDeltaDim, InventVersionId))
            .add(fieldStr(InventSumDeltaDim, InventSiteId))
            .add(fieldStr(InventSumDeltaDim, InventLocationId))
            .add(fieldStr(InventSumDeltaDim, InventStatusId))
            .add(fieldStr(InventSumDeltaDim, LicensePlateId))
            .add(fieldStr(InventSumDeltaDim, InventBatchId))
            .add(fieldStr(InventSumDeltaDim, InventDimension1))
            .add(fieldStr(InventSumDeltaDim, InventDimension2))
            .add(fieldStr(InventSumDeltaDim, InventDimension3))
            .add(fieldStr(InventSumDeltaDim, InventDimension4))
            .add(fieldStr(InventSumDeltaDim, InventDimension5))
            .add(fieldStr(InventSumDeltaDim, InventDimension6))
            .add(fieldStr(InventSumDeltaDim, InventDimension7))
            .add(fieldStr(InventSumDeltaDim, InventDimension8))
            .add(fieldStr(InventSumDeltaDim, InventDimension9))
            .add(fieldStr(InventSumDeltaDim, InventDimension10))
            .add(fieldStr(InventSumDeltaDim, InventDimension11))
            .add(fieldStr(InventSumDeltaDim, InventDimension12))
            .add(fieldStr(InventSumDeltaDim, wmsLocationId))
            .add(fieldStr(InventSumDeltaDim, InventSerialId))
            .add(fieldStr(InventSumDeltaDim, InventGTDId_RU))
            .add(fieldStr(InventSumDeltaDim, InventProfileId_RU))
            .add(fieldStr(InventSumDeltaDim, InventOwnerId_RU));

        return inventSumDeltaGroupBys;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateGroupBysForInventSumDeltaDimQueryObjectShadow</Name>
				<Source><![CDATA[
    private SysDaGroupBys instantiateGroupBysForInventSumDeltaDimQueryObjectShadow()
    {
        SysDaGroupBys inventSumDeltaGroupBys = new SysDaGroupBys()
            .add(fieldStr(InventSumDeltaDim, checkType))
            .add(fieldStr(InventSumDeltaDim, ItemId))
            .add(fieldStr(InventSumDeltaDim, configId))
            .add(fieldStr(InventSumDeltaDim, InventSizeId))
            .add(fieldStr(InventSumDeltaDim, InventColorId))
            .add(fieldStr(InventSumDeltaDim, InventStyleId))
            .add(fieldStr(InventSumDeltaDim, InventVersionId))
            .add(fieldStr(InventSumDeltaDim, InventSiteId))
            .add(fieldStr(InventSumDeltaDim, InventLocationId))
            .add(fieldStr(InventSumDeltaDim, InventStatusId))
            .add(fieldStr(InventSumDeltaDim, LicensePlateId))
            .add(fieldStr(InventSumDeltaDim, InventBatchId))
            .add(fieldStr(InventSumDeltaDim, InventDimension1))
            .add(fieldStr(InventSumDeltaDim, InventDimension2))
            .add(fieldStr(InventSumDeltaDim, InventDimension3))
            .add(fieldStr(InventSumDeltaDim, InventDimension4))
            .add(fieldStr(InventSumDeltaDim, InventDimension5))
            .add(fieldStr(InventSumDeltaDim, InventDimension6))
            .add(fieldStr(InventSumDeltaDim, InventDimension7))
            .add(fieldStr(InventSumDeltaDim, InventDimension8))
            .add(fieldStr(InventSumDeltaDim, InventDimension9))
            .add(fieldStr(InventSumDeltaDim, InventDimension10))
            .add(fieldStr(InventSumDeltaDim, InventDimension11))
            .add(fieldStr(InventSumDeltaDim, InventDimension12))
            .add(fieldStr(InventSumDeltaDim, wmsLocationId))
            .add(fieldStr(InventSumDeltaDim, InventSerialId))
            .add(fieldStr(InventSumDeltaDim, InventGTDId_RU))
            .add(fieldStr(InventSumDeltaDim, InventProfileId_RU))
            .add(fieldStr(InventSumDeltaDim, InventOwnerId_RU));

        return inventSumDeltaGroupBys;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateGroupBysForInventSumDeltaDimQueryObjectWithInventDimFlag</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates <c>SysDaGroupBys</c> for the <c>InventSumDeltaDim</c> record buffer selection.
    /// The group by clause will contain inventory dimension flag.
    /// </summary>
    /// <returns>A <c>SysDaGroupBys</c> instance.</returns>
    protected SysDaGroupBys instantiateGroupBysForInventSumDeltaDimQueryObjectWithInventDimFlag()
    {
        SysDaGroupBys inventSumDeltaGroupBys = new SysDaGroupBys()
            .add(fieldStr(InventSumDeltaDim, checkType))
            .add(fieldStr(InventSumDeltaDim, ItemId))
            .add(fieldStr(InventSumDeltaDim, configId))
            .add(fieldStr(InventSumDeltaDim, InventSizeId))
            .add(fieldStr(InventSumDeltaDim, InventColorId))
            .add(fieldStr(InventSumDeltaDim, InventStyleId))
            .add(fieldStr(InventSumDeltaDim, InventVersionId))
            .add(fieldStr(InventSumDeltaDim, InventSiteId))
            .add(fieldStr(InventSumDeltaDim, InventLocationId))
            .add(fieldStr(InventSumDeltaDim, InventStatusId))
            .add(fieldStr(InventSumDeltaDim, LicensePlateId))
            .add(fieldStr(InventSumDeltaDim, InventBatchId))
            .add(fieldStr(InventSumDeltaDim, InventDimension1))
            .add(fieldStr(InventSumDeltaDim, InventDimension2))
            .add(fieldStr(InventSumDeltaDim, InventDimension3))
            .add(fieldStr(InventSumDeltaDim, InventDimension4))
            .add(fieldStr(InventSumDeltaDim, InventDimension5))
            .add(fieldStr(InventSumDeltaDim, InventDimension6))
            .add(fieldStr(InventSumDeltaDim, InventDimension7))
            .add(fieldStr(InventSumDeltaDim, InventDimension8))
            .add(fieldStr(InventSumDeltaDim, InventDimension9))
            .add(fieldStr(InventSumDeltaDim, InventDimension10))
            .add(fieldStr(InventSumDeltaDim, InventDimension11))
            .add(fieldStr(InventSumDeltaDim, InventDimension12))
            .add(fieldStr(InventSumDeltaDim, wmsLocationId))
            .add(fieldStr(InventSumDeltaDim, InventSerialId))
            .add(fieldStr(InventSumDeltaDim, InventGTDId_RU))
            .add(fieldStr(InventSumDeltaDim, InventProfileId_RU))
            .add(fieldStr(InventSumDeltaDim, InventOwnerId_RU))
            // Inventory dimension Id flags
            .add(fieldStr(InventSumDeltaDim, ConfigIdFlag))
            .add(fieldStr(InventSumDeltaDim, InventSizeIdFlag))
            .add(fieldStr(InventSumDeltaDim, InventColorIdFlag))
            .add(fieldStr(InventSumDeltaDim, InventStyleIdFlag))
            .add(fieldStr(InventSumDeltaDim, InventVersionIdFlag))
            .add(fieldStr(InventSumDeltaDim, InventSiteIdFlag))
            .add(fieldStr(InventSumDeltaDim, InventLocationIdFlag))
            .add(fieldStr(InventSumDeltaDim, InventStatusFlag))
            .add(fieldStr(InventSumDeltaDim, LicensePlateFlag))
            .add(fieldStr(InventSumDeltaDim, InventBatchIdFlag))
            .add(fieldStr(InventSumDeltaDim, InventDimension1Flag))
            .add(fieldStr(InventSumDeltaDim, InventDimension2Flag))
            .add(fieldStr(InventSumDeltaDim, InventDimension3Flag))
            .add(fieldStr(InventSumDeltaDim, InventDimension4Flag))
            .add(fieldStr(InventSumDeltaDim, InventDimension5Flag))
            .add(fieldStr(InventSumDeltaDim, InventDimension6Flag))
            .add(fieldStr(InventSumDeltaDim, InventDimension7Flag))
            .add(fieldStr(InventSumDeltaDim, InventDimension8Flag))
            .add(fieldStr(InventSumDeltaDim, InventDimension9Flag))
            .add(fieldStr(InventSumDeltaDim, InventDimension10Flag))
            .add(fieldStr(InventSumDeltaDim, InventDimension11Flag))
            .add(fieldStr(InventSumDeltaDim, InventDimension12Flag))
            .add(fieldStr(InventSumDeltaDim, wmsLocationIdFlag))
            .add(fieldStr(InventSumDeltaDim, InventSerialIdFlag))
            .add(fieldStr(InventSumDeltaDim, InventGTDIdFlag_RU))
            .add(fieldStr(InventSumDeltaDim, InventProfileIdFlag_RU))
            .add(fieldStr(InventSumDeltaDim, InventOwnerIdFlag_RU));

        return inventSumDeltaGroupBys;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateQueryExpressionCheckTypeFilterForInventSumDeltaDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a query expression with filter for the CheckType field of the <c>InventSumDelteDim</c> record buffer.
    /// </summary>
    /// <param name = "_inventSumDeltaDim">An <c>InventSumDeltaDim</c> record buffer.</param>
    /// <returns>A <c>SysDaQueryExpression</c> instance.</returns>
    protected SysDaQueryExpression instantiateQueryExpressionCheckTypeFilterForInventSumDeltaDim(InventSumDeltaDim _inventSumDeltaDim)
    {
        return new SysDaEqualsExpression(
            new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, checkType)), new SysDaValueExpression(InventOnhandCheckType::DepreciateOrdered))
            .or(new SysDaEqualsExpression(
                new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, checkType)), new SysDaValueExpression(InventOnhandCheckType::Financial)))
            .or(new SysDaEqualsExpression(
                new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, checkType)), new SysDaValueExpression(InventOnhandCheckType::InventModel)))
            .or(new SysDaEqualsExpression(
                new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, checkType)), new SysDaValueExpression(InventOnhandCheckType::Physical)))
            .or(new SysDaEqualsExpression(
                new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, checkType)), new SysDaValueExpression(InventOnhandCheckType::Reservation)))
            .or(new SysDaEqualsExpression(
                new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, checkType)), new SysDaValueExpression(InventOnhandCheckType::StdCost)))
            .or(new SysDaEqualsExpression(
                new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, checkType)), new SysDaValueExpression(InventOnhandCheckType::StdCostSecCur_RU)))
            .or(new SysDaEqualsExpression(
                new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, checkType)), new SysDaValueExpression(InventOnhandCheckType::WHSPhysicalInventChange)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateInventSumQueryObjectForDirectOnhand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a query object with <c>InventSum</c> record buffer selection for the direct onhand check.
    /// </summary>
    /// <param name = "_inventSum">An <c>InventSum</c> record buffer.</param>
    /// <param name = "_inventSumDeltaDim">An <c>InventSumDeltaDim</c> record buffer.</param>
    /// <returns>A <c>SysDaQueryObject</c> instance.</returns>
    protected SysDaQueryObject instantiateInventSumQueryObjectForDirectOnhand(InventSum _inventSum, InventSumDeltaDim _inventSumDeltaDim)
    {
        SysDaQueryObject inventSumQueryObject = new SysDaQueryObject(_inventSum);

        inventSumQueryObject.whereClause(this.instantiateWhereClauseForInventSumQueryObject(_inventSum));

        SysDaQueryObject inventSumDeltaDimQueryObject = this.instantiateInventSumDeltaDimQueryObjectForInventSumJoin(_inventSum, _inventSumDeltaDim);

        inventSumQueryObject.joinClause(SysDaJoinKind::InnerJoin, inventSumDeltaDimQueryObject);

        return inventSumQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateInventSumDeltaDimQueryObjectForInventSumJoin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a query object for the join of <c>InventSumDeltaDim</c> and <c>InventSum></c> record buffers.
    /// </summary>
    /// <param name = "_inventSum">An <c>InventSum</c> record buffer.</param>
    /// <param name = "_inventSumDeltaDim">An <c>InventSumDeltaDim</c> record buffer.</param>
    /// <returns>A <c>SysDaQueryObject</c> instance.</returns>
    protected SysDaQueryObject instantiateInventSumDeltaDimQueryObjectForInventSumJoin(InventSum _inventSum, InventSumDeltaDim _inventSumDeltaDim)
    {
        SysDaQueryObject inventSumDeltaDimQueryObject = new SysDaQueryObject(_inventSumDeltaDim);

        SysDaQueryExpression inventSumDeltaDimQueryExpression = new SysDaEqualsExpression(
            new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, ItemId)), new SysDaFieldExpression(_inventSum, fieldStr(InventSum, ItemId)))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, InventDimId)), new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventDimId))))
            .and(new SysDaEqualsExpression(
                 new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, TTSId)), new SysDaValueExpression(this.ttsId())))
            .and(new SysDaEqualsExpression(
            new SysDaFieldExpression(_inventSumDeltaDim, fieldStr(InventSumDeltaDim, AreAllActiveDimensionsSpecified)), new SysDaValueExpression(NoYes::Yes)))
            .and(this.instantiateQueryExpressionCheckTypeFilterForInventSumDeltaDim(_inventSumDeltaDim));

        inventSumDeltaDimQueryObject.whereClause(inventSumDeltaDimQueryExpression);

        return inventSumDeltaDimQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteInventSumDelta</Name>
				<Source><![CDATA[
    protected void deleteInventSumDelta()
    {
        InventSumDelta inventSumDelta;

        CommonExtensions::SetSqlDeleteIndexHint(inventSumDelta, indexStr(InventSumDelta, SQLTransactionItemDimIdx));

        delete_from inventSumDelta
            where inventSumDelta.SQLTransactionId == this.sqlTransactionId();

        deleteInventSumDeltaCount = inventSumDelta.rowCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteInventSumDeltaUpd</Name>
				<Source><![CDATA[
    protected void deleteInventSumDeltaUpd()
    {
        InventSumDeltaDim inventSumDeltaDim;

        CommonExtensions::SetSqlDeleteIndexHint(inventSumDeltaDim, indexStr(InventSumDeltaDim, TTSItemCheckDimIdx));

        delete_from inventSumDeltaDim
            where inventSumDeltaDim.ttsId == this.ttsId();

        deleteInventSumDeltaUpdCount = inventSumDeltaDim.rowCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineOnhandCheckStrategy</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the necessary on-hand check strategy applicable for validating on-hand.
    /// </summary>
    /// <param name="_inventSumDeltaDim">
    ///    An <c>InventSumDeltaDim</c> buffer for which the on-hand check strategy must be determined.
    /// </param>
    protected void determineOnhandCheckStrategy(InventSumDeltaDim _inventSumDeltaDim)
    {
        switch (_inventSumDeltaDim.checkType)
        {
            case InventOnhandCheckType::WHSDepreciateOrdered:
            case InventOnhandCheckType::WHSReservation:
            case InventOnhandCheckType::WHSPhysical:
                checkOnHandForWHSItems = true;
                break;
            default:
                if (_inventSumDeltaDim.AreAllActiveDimensionsSpecified)
                {
                    doDirectOnhandCheck = true;
                }
                else
                {
                    doSummarizedOnhandCheck = true;
                }
        }

        doOnhandCheck = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasInventTransResourcePlanningDataChged</Name>
				<Source><![CDATA[
    private boolean hasInventTransResourcePlanningDataChged(
        InventTrans   _inventTrans,
        InventTrans   _orig
        )
    {
        boolean     resourcePlanningDataChanged = true;

        if (_inventTrans.ItemId                      == _orig.ItemId        &&
            _inventTrans.Qty                         == _orig.Qty           &&
            _inventTrans.inventDimId                 == _orig.inventDimId   &&
            _inventTrans.DateStatus                  == _orig.DateStatus    &&
            _inventTrans.TimeExpected                == _orig.TimeExpected  &&
            _inventTrans.MarkingRefInventTransOrigin == _orig.MarkingRefInventTransOrigin)
        {
            resourcePlanningDataChanged = false;
        }

        return resourcePlanningDataChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasInventTransStatusChanged</Name>
				<Source><![CDATA[
    private boolean hasInventTransStatusChanged(
        InventTrans   _inventTrans,
        InventTrans   _orig
        )
    {
        boolean     hasStatusChanged = true;

        if ((_inventTrans.StatusIssue   == StatusIssue::Sold        && _orig.StatusIssue   == StatusIssue::Deducted) ||
            (_inventTrans.StatusReceipt == StatusReceipt::Purchased && _orig.StatusReceipt == StatusReceipt::Received) ||
            (_inventTrans.StatusIssue   == _orig.StatusIssue        && _inventTrans.StatusReceipt == _orig.StatusReceipt))
        {
            hasStatusChanged = false;
        }

        return hasStatusChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventSumRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new <c>InventSum</c> record based on <c>ItemId</c> and <c>InventDimId</c>.
    /// </summary>
    /// <param name = "_itemId">The Item id</param>
    /// <param name = "_inventDimId">The InventDim id</param>
    /// <returns>A <c>InventSum</c> record ready to be inserted in the database.</returns>
    protected InventSum newInventSumRecord(ItemId _itemId, InventDimId _inventDimId)
    {
        InventSum inventSum;

        if (!_itemId || !_inventDimId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        inventSum.ItemId         = _itemId;
        inventSum.InventDimId    = _inventDimId;
        inventSum.ClosedQty      = NoYes::Yes;
        inventSum.Closed         = NoYes::Yes;
        inventSum.setIsExcludedFromInventoryValue();
        if (InventSumInventDimDataUpdateToggle::instance().isEnabled())
        {
            inventSum.initInventSumWithInventDim();
        }
        return inventSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInventSumFromInventSumDelta</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts <c>InventSum</c> records based on collected data in the <c>InventSumDelta</c> table.
    /// </summary>
    protected void insertInventSumFromInventSumDelta()
    {
        if (inventSumDeltaCnt > 1) // If inventSumDeltaCnt == 1 then this insert is handled by simplified update statement (using 'write')
        {
            InventSumDelta      inventSumDelta;
            InventSum           inventSum;
            boolean             recordsInList;
            RecordInsertList    insertList;
            boolean             useRecordsInsertList = !InventUpdateOnhandSkipUsingRecordInsertListToggle::instance().isEnabled();

            if (useRecordsInsertList)
            {
                insertList = new RecordInsertList(tableNum(InventSum), true, true, true);
            }

            insertInventSumFromInventSumDeltaCount = 0;

            // Only the delta record counts less or equal than constant variable 'deltaCountToDecideUsingQueryRecordInsert', use insert instead of insert_recordSet when skipping to use RecordsInsertList
            if (useRecordsInsertList ||
                InventUpdateOnhandForceRowByRowCreationToggle::instance().isEnabled() || // Force row by row creation
                (inventSumDeltaCnt <= deltaCountToDecideUsingQueryRecordInsert))
            {
                InventSum inventSumNew;
                while select ItemId, InventDimId from inventSumDelta
                group by ItemId, InventDimId
                where inventSumDelta.SQLTransactionId == this.sqlTransactionId()
                    notexists join inventSum
                    where inventSum.ItemId         == inventSumDelta.ItemId &&
                          inventSum.InventDimId    == inventSumDelta.InventDimId
                {
                    inventSumNew = this.newInventSumRecord(inventSumDelta.ItemId, inventSumDelta.InventDimId);
                    if (useRecordsInsertList)
                    {
                        insertList.add(inventSumNew);
                        recordsInList = true;
                    }
                    else
                    {
                        inventSumNew.doInsert();
                        ++insertInventSumFromInventSumDeltaCount;
                    }
                }

                if (recordsInList)
                {
                    insertInventSumFromInventSumDeltaCount = insertList.insertDatabase();
                }
            }
            else
            {
                insertInventSumFromInventSumDeltaCount = this.createInventSumFromInventSumDelta();

                if (!insertInventSumFromInventSumDeltaCount || !EcoResTrackingDimGroupSetupCache::isAnyInventOwnerDimensionActive())
                {
                    return;
                }

                using (var onHandInstrumentationTask = new InventUpdateOnHandInstrumentationTask(methodStr(InventUpdateOnhand, updateInventSumFromInventSumDelta)))
                {
                    this.updateInventSumFromInventSumDelta();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInventSumFromInventSumDeltaDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts <c>InventSum</c> records based on collected data in the <c>InventSumDeltaDim</c> table.
    /// </summary>
    protected void insertInventSumFromInventSumDeltaDim()
    {
        // create sum records for the 'check' dimensions ... used for serializing locks
        if (this.parmDoOnhandCheck())
        {
            InventSumDeltaDim   inventSumDeltaDim;
            InventSum           inventSum;
            RecordInsertList    insertList;
            boolean             recordsInList;
            boolean             useRecordsInsertList = !InventUpdateOnhandSkipUsingRecordInsertListToggle::instance().isEnabled();

            if (useRecordsInsertList)
            {
                insertList = new RecordInsertList(tableNum(InventSum), true, true, true);
            }

            insertInventSumFromInventSumDeltaDimCount = 0;
            // Only the delta record counts less or equal than constant variable 'deltaCountToDecideUsingQueryRecordInsert', use insert instead of insert_recordSet when skipping to use RecordsInsertList
            if (useRecordsInsertList ||
                InventUpdateOnhandForceRowByRowCreationToggle::instance().isEnabled() ||
                (inventSumDeltaDimListCount <= deltaCountToDecideUsingQueryRecordInsert))
            {
                InventSum inventSumNew;
                while select ItemId, InventDimId from inventSumDeltaDim
                    group by ItemId, InventDimId
                    where inventSumDeltaDim.ttsId == this.ttsId()
                        notexists join inventSum
                        where inventSum.ItemId         == inventSumDeltaDim.ItemId &&
                              inventSum.InventDimId    == inventSumDeltaDim.InventDimId
                {
                    inventSumNew = this.newInventSumRecord(inventSumDeltaDim.ItemId, inventSumDeltaDim.InventDimId);
                    if (useRecordsInsertList)
                    {
                        insertList.add(inventSumNew);
                        recordsInList = true;
                    }
                    else
                    {
                        inventSumNew.doInsert();
                        ++insertInventSumFromInventSumDeltaDimCount;
                    }
                
                }

                if (recordsInList)
                {
                    insertInventSumFromInventSumDeltaDimCount = insertList.insertDatabase();
                }
            }
            else
            {
                insertInventSumFromInventSumDeltaDimCount = this.createInventSumFromInventSumDeltaDim();
                if (!insertInventSumFromInventSumDeltaDimCount || !EcoResTrackingDimGroupSetupCache::isAnyInventOwnerDimensionActive())
                {
                    return;
                }

                using (var onHandInstrumentationTask = new InventUpdateOnHandInstrumentationTask(methodStr(InventUpdateOnhand, updateInventSumFromInventSumDeltaDim)))
                {
                    this.updateInventSumFromInventSumDeltaDim();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInventSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert required <c>InventSum</c> records.
    /// </summary>
    protected void insertInventSum()
    {
        #OCCRetryCount

        if (this.parmDoOnhandCheck())
        {
            this.inventSumDeltaDimList().insertDatabase();
            inventSumDeltaDimListCount = this.inventSumDeltaDimList().len();
        }

        try
        {
            this.insertInventSumFromInventSumDelta();
            this.insertInventSumFromInventSumDeltaDim();
        }
        catch (Exception::DuplicateKeyException)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::DuplicateKeyExceptionNotRecovered;
            }
            else
            {
                retry;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInventSumLogTTS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the pending <c>InventSumLogTTS</c> records to the database.
    /// </summary>
    public void insertInventSumLogTTS()
    {
        if (inventSumLogTTSNonTempList)
        {
            insertInventSumLogTTSNonTemptableInsertCount = inventSumLogTTSNonTempList.insertDatabase();
            inventSumLogTTSNonTempList = null;
        }
        
        if (!inventSumLogTTSList)
        {
            return;
        }

        insertInventSumLogTTSCount = inventSumLogTTSList.insertDatabase();

        this.insertInventSumTTSLogFromTempTable();

        inventSumLogTTSList = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInventSumTTSLogFromTempTable</Name>
				<Source><![CDATA[
    private void insertInventSumTTSLogFromTempTable()
    {
        InventSumLogTTS realInventSumLogTTS;
        realInventSumLogTTS.skipDataMethods(true);

        insert_recordset realInventSumLogTTS
                (AddTrans,
                DateStatus,
                InventDimId,
                InventTransOrigin,
                InventTransOriginRef,
                ItemId,
                Qty,
                SequenceNumber,
                SoftDeleted,
                StatusIssue,
                StatusReceipt,
                TimeExpected,
                TransRefId,
                TransType,
                TTSId,
                utcCreatedDateTime
                )
            select
                AddTrans,
                DateStatus,
                InventDimId,
                InventTransOrigin,
                InventTransOriginRef,
                ItemId,
                Qty,
                SequenceNumber,
                SoftDeleted,
                StatusIssue,
                StatusReceipt,
                TimeExpected,
                TransRefId,
                TransType,
                TTSId,
                utcCreatedDateTime
            from inventSumLogTTSTempTable;    
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSumDeltaDimList</Name>
				<Source><![CDATA[
    protected RecordSortedList inventSumDeltaDimList()
    {
        #InventDimDevelop

        if (!inventSumDeltaDimList)
        {
            inventSumDeltaDimList = new RecordSortedList(tableNum(InventSumDeltaDim));
            inventSumDeltaDimList.sortOrder(fieldNum(InventSumDeltaDim, ttsId),
                                            fieldNum(InventSumDeltaDim, ItemId),
                                            fieldNum(InventSumDeltaDim, CheckType),
                                            fieldNum(InventSumDeltaDim, InventDimIdAllDimensions),
                                            fieldNum(InventSumDeltaDim, InventSerialIdFlag),
                                            fieldNum(InventSumDeltaDim, InventGTDIdFlag_RU),
                                            fieldNum(InventSumDeltaDim, InventProfileIdFlag_RU),
                                            fieldNum(InventSumDeltaDim, InventOwnerIdFlag_RU),
                                            fieldNum(InventSumDeltaDim, LicensePlateFlag),
                                            fieldNum(InventSumDeltaDim, wmsLocationIdFlag),
                                            fieldNum(InventSumDeltaDim, InventDimension1Flag),
                                            fieldNum(InventSumDeltaDim, InventDimension2Flag),
                                            fieldNum(InventSumDeltaDim, InventDimension3Flag),
                                            fieldNum(InventSumDeltaDim, InventDimension4Flag),
                                            fieldNum(InventSumDeltaDim, InventDimension5Flag),
                                            fieldNum(InventSumDeltaDim, InventDimension6Flag),
                                            fieldNum(InventSumDeltaDim, InventDimension7Flag),
                                            fieldNum(InventSumDeltaDim, InventDimension8Flag),
                                            fieldNum(InventSumDeltaDim, InventDimension9Flag),
                                            fieldNum(InventSumDeltaDim, InventDimension10Flag),
                                            fieldNum(InventSumDeltaDim, InventDimension11Flag),
                                            fieldNum(InventSumDeltaDim, InventDimension12Flag),
                                            fieldNum(InventSumDeltaDim, InventBatchIdFlag),
                                            fieldNum(InventSumDeltaDim, InventStatusFlag),
                                            fieldNum(InventSumDeltaDim, InventLocationIdFlag),
                                            fieldNum(InventSumDeltaDim, InventSiteIdFlag),
                                            fieldNum(InventSumDeltaDim, ConfigIdFlag),
                                            fieldNum(InventSumDeltaDim, InventColorIdFlag),
                                            fieldNum(InventSumDeltaDim, InventStyleIdFlag),
                                            fieldNum(InventSumDeltaDim, InventVersionIdFlag),
                                            fieldNum(InventSumDeltaDim, InventSizeIdFlag)
                                           );
        }
        return inventSumDeltaDimList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSumLogTTSList</Name>
				<Source><![CDATA[
    protected RecordInsertList inventSumLogTTSList()
    {
        if (!inventSumLogTTSList)
        {
            inventSumLogTTSTempTable = null;
            inventSumLogTTSTempTable.setTempDB();
            inventSumLogTTSList = new RecordInsertList(tableNum(InventSumLogTTS), true, true, true, false, false, this.inventSumLogTTSTempTable);
        }

        return inventSumLogTTSList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSumLogTTSNonTempList</Name>
				<Source><![CDATA[
    private RecordInsertList inventSumLogTTSNonTempList()
    {
        if (!inventSumLogTTSNonTempList)
        {
            inventSumLogTTSNonTempList = new RecordInsertList(tableNum(InventSumLogTTS), true, false, false, false, false);
        }

        return inventSumLogTTSNonTempList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToInventSumLogTTSTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds an item to the InventSumLogTTS.
    /// </summary>
    /// <param name="_record">The record to add</param>
    /// <remarks>
    /// Note that this item may not be added immediately and the actual insert can be delayed until the end of the transaction.
    /// </remarks>
    private void addToInventSumLogTTSTable(InventSumLogTTS _record)
    {
        if (isInventUpdateOnHandInventSumLogTTsTmpTableThresholdFlightEnabled
            && inventSumLogTTSListRecordAddCount < InventUpdateOnHandInventSumLogTTsTmpTableThreshold)
        {
            int addValue = this.addToInventSumLogTTSNonTempList(_record);

            //an early insert occured so we need to report this in telemetry
            if (addValue && !inventSumLogTTSNonTempListFirstEarlyInsertValue)
            {
                inventSumLogTTSNonTempListFirstEarlyInsertValue = addValue;
            }

            inventSumLogTTSListRecordAddCount++;
        }
        else
        {
            this.inventSumLogTTSList().add(_record);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToInventSumLogTTSNonTempList</Name>
				<Source><![CDATA[
    private int addToInventSumLogTTSNonTempList(InventSumLogTTS _record)
    {
        return this.inventSumLogTTSNonTempList().add(_record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFinalCommit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Queries whether the system thinks it is performing a database commit operation.
    /// </summary>
    /// <returns>
    ///    true if the system is considered in progress with a database commit operation; otherwise, false.
    /// </returns>
    public boolean isFinalCommit()
    {
        return isFinalCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemIdSet</Name>
				<Source><![CDATA[
    protected Set itemIdSet()
    {
        if (!itemIdSet)
        {
            itemIdSet = new Set(Types::String);
        }

        return itemIdSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lockInventSum</Name>
				<Source><![CDATA[
    protected void lockInventSum()
    {
        InventSum           inventSum;
        InventSumDeltaDim   inventSumDeltaDim;

        if (!this.parmDoOnhandCheck())
        {
            return;
        }

        if (isInventSumDeltaDimLockTTSItemIdDimIdHintFlightEnabled)
        {
            inventSumDeltaDim.allowIndexHint(true);

            //forcenestedloop: we want to avoid merge joins since it can lead to unnecessary blocking
            select forcenestedloop TableId from inventSumDeltaDim
                index hint TTSItemDimIdx
                where inventSumDeltaDim.ttsId == this.ttsId()
                join pessimisticlock ItemId, InventDimId from inventSum // Don't use exists join as that might trick sql optimizer to choose a plan searching InventSum instead of InventSumDelta
                    where inventSumDeltaDim.ItemId == inventSum.ItemId
                        && inventSumDeltaDim.InventDimId == inventSum.InventDimId;
        }
        else
        {
            //forcenestedloop: we want to avoid merge joins since it can lead to unnecessary blocking
            select pessimisticlock forcenestedloop ItemId, InventDimId from inventSum
                join TableId from inventSumDeltaDim // Don't use exists join as that might trick sql optimizer to choose a plan searching InventSum instead of InventSumDelta
                    where inventSumDeltaDim.ItemId      == inventSum.ItemId
                        && inventSumDeltaDim.InventDimId == inventSum.InventDimId
                        && inventSumDeltaDim.ttsId       == this.ttsId();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustAddInventSumDeltaOnhand</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether to include the <c>InventSumDelta</c> table when it considers the on hand for an
    ///    item.
    /// </summary>
    /// <param name="_itemId">
    ///    The item for which to calculate the on hand.
    /// </param>
    /// <returns>
    ///    true if the <c>InventSumDelta</c> table should be included; otherwise, false.
    /// </returns>
    public boolean mustAddInventSumDeltaOnhand(ItemId _itemId)
    {
        return this.itemIdSet().in(_itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckFinancialOnhand</Name>
				<Source><![CDATA[
    protected boolean mustCheckFinancialOnhand(
        InventSumDelta      _inventSumDelta,
        InventModelGroup    _inventModelGroup = null)
    {
        InventSum       inventSum;
        InventModelGroup    inventModelGroup = _inventModelGroup;

        if (!inventModelGroup.RecId)
        {
            inventModelGroup = InventTable::modelGroupByItemId(_inventSumDelta.ItemId);
        }

        if (inventModelGroup.NegativeFinancial)
        {
            return false;
        }
        else if (InventLocation::find(InventDim::find(_inventSumDelta.InventDimId).InventLocationId).RetailInventNegFinancial)
        {
            return false;
        }

        inventSum.addInventSumDelta(_inventSumDelta);
        InventOnHandQty inventOnHandQty = InventOnHandQty::newParameters(_inventSumDelta.ItemId,null,null);
        inventOnHandQty.parmInventSum(inventSum);

        //we do not need to go to the WHSInventReserve tables so for performance reasons we set the delay flag
        inventOnHandQty.parmDelayAvailabilityCalculation(true);

        return inventOnHandQty.mustCheckFinancialOnhand();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckInventModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the inventory model must perform an on hand validation when the invent sum is
    /// updated.
    /// </summary>
    /// <param name="_inventSumDelta">
    /// The delta value that updates the inventory sum.
    /// </param>
    /// <returns>
    /// true if the inventory model must perform an on hand validation when the invent sum is updated;
    /// otherwise false.
    /// </returns>
    protected boolean mustCheckInventModel(InventSumDelta _inventSumDelta)
    {
        // We only need to perform onhand check if a qty or value is changed

        if (_inventSumDelta.PostedQty ||
            _inventSumDelta.PostedValue ||
            _inventSumDelta.Deducted ||
            _inventSumDelta.Received ||
            _inventSumDelta.PhysicalValue)
        {
            InventTable inventTable = InventTable::find(_inventSumDelta.ItemId);
            if (inventTable.inventItemType().mustInventBeControlled())
            {
                return inventTable.modelGroup().inventModelType().mustCheckInventOnHand(_inventSumDelta);
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckPhysicalOnhand</Name>
				<Source><![CDATA[
    protected boolean mustCheckPhysicalOnhand(
        InventSumDelta      _inventSumDelta,
        InventModelGroup    _inventModelGroup = null)
    {
        InventSum       inventSum;

        if (InventLocation::find(InventDim::find(_inventSumDelta.InventDimId).InventLocationId).RetailInventNegPhysical)
        {
            //Negative inventory is not supported for catch weight and warehousing items.
            if (this.isWarehouseNegativeSettingSupportedForItem(_inventSumDelta.ItemId))
            {
                return false;
            }
        }

        InventModelGroup inventModelGroup = _inventModelGroup;
        if (!_inventModelGroup.RecId)
        {
            inventModelGroup = InventTable::modelGroupByItemId(_inventSumDelta.ItemId);
        }

        if (inventModelGroup.NegativePhysical)
        {
            return false;
        }

        inventSum.addInventSumDelta(_inventSumDelta);
        InventOnHandQty inventOnHandQty = InventOnHandQty::newParameters(_inventSumDelta.ItemId,null,null);
        inventOnHandQty.parmInventSum(inventSum);
        inventOnHandQty.parmUseInventSumDirectly(true);

        return inventOnHandQty.mustCheckPhysicalOnhand();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckStdCostSecCur_RU</Name>
				<Source><![CDATA[
    public boolean mustCheckStdCostSecCur_RU(
        InventSumDelta _inventSumDelta)
    {
        if (_inventSumDelta.PostedValueSecCur_RU)
        {
            InventTable inventTable = InventTable::find(_inventSumDelta.ItemId);
            if (inventTable.modelGroup().inventModelTypeSecCur_RU().stdCostBased() &&
                inventTable.inventItemType().mustInventBeControlled())
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateSumLogTTS</Name>
				<Source><![CDATA[
    private boolean mustCreateSumLogTTS()
    {
        return isInventSumLogTTSEnabled && !WHSInventoryTransactionSkipInventSumLogTTSContext::skipInventSumLogTTS();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateSumLogTTSForDynamicPlan</Name>
				<Source><![CDATA[
    private boolean mustCreateSumLogTTSForDynamicPlan()
    {
        return !skipTTSLog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateSumLogTTSForInventTrans</Name>
				<Source><![CDATA[
    private boolean mustCreateSumLogTTSForInventTrans(
        InventTrans _inventTrans
        )
    {
        boolean             mustCreateInventSumLogTTS = false;

        InventTrans orig = _inventTrans.orig();

        if (this.hasInventTransStatusChanged(_inventTrans, orig) || this.hasInventTransResourcePlanningDataChged(_inventTrans, orig))
        {
            mustCreateInventSumLogTTS = true;
        }

        return mustCreateInventSumLogTTS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateSumLogTTSForInventTransOrigin</Name>
				<Source><![CDATA[
    private boolean mustCreateSumLogTTSForInventTransOrigin(InventTransOrigin _inventTransOrigin)
    {
        boolean mustCreateInventSumLogTTS = true;

        if (_inventTransOrigin.ReferenceCategory == InventTransType::SummedUp ||
            _inventTransOrigin.ReferenceCategory == InventTransType::WHSWork  ||
            _inventTransOrigin.ReferenceCategory == InventTransType::WHSOrderCommittedReservation)
        {
            mustCreateInventSumLogTTS = false;
        }

        return mustCreateInventSumLogTTS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(DataAreaId _dataAreaId)
    {
        DataAreaId      dataAreaIdInventSum         = appl.company(_dataAreaId).dataArea(tableNum(InventSum));
        DataAreaId      dataAreaIdInventSumDelta    = appl.company(_dataAreaId).dataArea(tableNum(InventSumDelta));

        dataAreaId = _dataAreaId;

        curExtensionSum = strFmt(this.sqlSystem().monocaseFmt(0,0,false, true), '\'' + dataAreaIdInventSum + '\'');
        curExtensionSumDelta = strFmt(this.sqlSystem().monocaseFmt(0,0,false, true), '\'' + dataAreaIdInventSumDelta + '\'');
        
        isWHSEnabled = isConfigurationkeyEnabled(configurationKeyNum(WHSAndTMS));

        isInventUpdateOnHandInventSumLogTTsTmpTableThresholdFlightEnabled = this.isInventUpdateOnHandInventSumLogTTsTmpTableThresholdFlightEnabled();

        this.initIsInventSumLogTTSEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventUpdateOnHandInventSumLogTTsTmpTableThresholdFlightEnabled</Name>
				<Source><![CDATA[
    private boolean isInventUpdateOnHandInventSumLogTTsTmpTableThresholdFlightEnabled()
    {
        return InventUpdateOnHandInventSumLogTTsTmpTableThresholdFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIsInventSumLogTTSEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>isInventSumLogTTSEnabled</c> variable that determines if use of InventSumLogTTS is enabled.
    /// </summary>
    protected void initIsInventSumLogTTSEnabled()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(Req)))
        {
            changecompany(dataAreaId)
            {
                if (!ReqParameters::find().ReqInactive)
                {
                    isInventSumLogTTSEnabled = true;
                    InventUpdateOnHandInventSumLogTTsTmpTableThreshold = InventParameters::find().InventUpdateOnHandInventSumLogTTsTmpTableThreshold;

                    //no value so we default to what our measurements show is a reasonable threshold
                    if (InventUpdateOnHandInventSumLogTTsTmpTableThreshold == 0)
                    {
                        InventUpdateOnHandInventSumLogTTsTmpTableThreshold = this.defaultInventUpdateOnHandInventSumLogTTsTmpTableThreshold();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInventUpdateOnHandInventSumLogTTsTmpTableThreshold</Name>
				<Source><![CDATA[
    private InventUpdateOnHandInventSumLogTTsTmpTableThreshold defaultInventUpdateOnHandInventSumLogTTsTmpTableThreshold()
    {
        return 20; //this is determined based on telemetry and measurements and set to favour smaller transactions
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextSequenceCount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the next value to use as sequence counter
    /// </summary>
    /// <param name="_doDecrement">
    ///    true if counter should be decremented first; otherwise, false.
    /// </param>
    /// <returns>
    ///    returns the internal counter for log records to secure correct order by when rollback is performed
    /// </returns>
    protected Integer nextSequenceCount(boolean _doDecrement = true)
    {
        if (_doDecrement)
        {
            sequenceCounter--;
        }

        return sequenceCounter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDoDirectOnhandCheck</Name>
				<Source><![CDATA[
    private boolean parmDoDirectOnhandCheck()
    {
        return doDirectOnhandCheck;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDoOnhandCheck</Name>
				<Source><![CDATA[
    protected boolean parmDoOnhandCheck()
    {
        return doSummarizedOnhandCheck || doDirectOnhandCheck || checkOnHandForWHSItems;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDoSummarizedOnhandCheck</Name>
				<Source><![CDATA[
    private boolean parmDoSummarizedOnhandCheck()
    {
        return doSummarizedOnhandCheck;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipInventSumLogTTS</Name>
				<Source><![CDATA[
    public boolean parmSkipInventSumLogTTS(boolean _skipTTSLog = skipTTSLog)
    {
        skipTTSLog = _skipTTSLog;
        return skipTTSLog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    protected void reset()
    {
        itemIdSetCount = this.itemIdSet().elements();
        ttsId                   = 0;
        sqlTransactionId        = 0;
        activated               = false;
        isFinalCommit           = false;
        inventSumDeltaDimList   = null;
        inventSumLogTTSList     = null;
        inventSumLogTTSNonTempList = null;
        itemIdSet               = null;
        doOnhandCheck           = false;
        doSummarizedOnhandCheck = false;
        doDirectOnhandCheck     = false;
        mustUseOnHandAmounts    = false;
        inventSumDeltaCnt       = 0;
        skipTTSLog              = false;
        if (inventSumDeltaCache)
        {
            inventSumDeltaCache.clear();
        }
        inventReserveDeltaExist = false;
        checkOnHandForWHSItems  = false;
        initialCreatedDateTime = utcDateTimeNull();
        inventSumLogTTSListRecordAddCount = 0;
        insertInventSumLogTTSNonTemptableInsertCount = 0;
        inventSumLogTTSNonTempListFirstEarlyInsertValue = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldValidationBeSkipped</Name>
				<Source><![CDATA[
    private boolean shouldValidationBeSkipped(NoYes  _plus)
    {
        return _plus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sqlSystem</Name>
				<Source><![CDATA[
    protected SqlSystem sqlSystem()
    {
        if (!sqlSystem)
        {
            sqlSystem = new SqlSystem();
        }
        return sqlSystem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sqlUpdateInventSumStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method builds a string with the SQL statement listed under remarks.
    /// </summary>
    /// <returns>
    /// A string with the SQL statement to update InventSum.
    /// </returns>
    /// <remarks>
    /// The SQL statement is dynamically generated and depends on contents of field groups and enabled configuration keys.
    /// The statement will be similar to this:
    /// execute sp_executesql N'UPDATE INVENTSUM
    ///     SET INVENTSUM.POSTEDQTY             = INVENTSUM.POSTEDQTY           + INVENTSUMDELTA.SUM_POSTEDQTY,
    ///         INVENTSUM.POSTEDVALUE           = INVENTSUM.POSTEDVALUE         + INVENTSUMDELTA.SUM_POSTEDVALUE,
    ///         INVENTSUM.DEDUCTED              = INVENTSUM.DEDUCTED            + INVENTSUMDELTA.SUM_DEDUCTED,
    ///         INVENTSUM.RECEIVED              = INVENTSUM.RECEIVED            + INVENTSUMDELTA.SUM_RECEIVED,
    ///         INVENTSUM.RESERVORDERED         = INVENTSUM.RESERVORDERED       + INVENTSUMDELTA.SUM_RESERVORDERED,
    ///         INVENTSUM.RESERVPHYSICAL        = INVENTSUM.RESERVPHYSICAL      + INVENTSUMDELTA.SUM_RESERVPHYSICAL,
    ///         INVENTSUM.ONORDER               = INVENTSUM.ONORDER             + INVENTSUMDELTA.SUM_ONORDER,
    ///         INVENTSUM.ORDERED               = INVENTSUM.ORDERED             + INVENTSUMDELTA.SUM_ORDERED,
    ///         INVENTSUM.QUOTATIONISSUE        = INVENTSUM.QUOTATIONISSUE      + INVENTSUMDELTA.SUM_QUOTATIONISSUE,
    ///         INVENTSUM.QUOTATIONRECEIPT      = INVENTSUM.QUOTATIONRECEIPT    + INVENTSUMDELTA.SUM_QUOTATIONRECEIPT,
    ///         INVENTSUM.REGISTERED            = INVENTSUM.REGISTERED          + INVENTSUMDELTA.SUM_REGISTERED,
    ///         INVENTSUM.PICKED                = INVENTSUM.PICKED              + INVENTSUMDELTA.SUM_PICKED,
    ///         INVENTSUM.AVAILORDERED          = INVENTSUM.AVAILORDERED        + INVENTSUMDELTA.SUM_AVAILORDERED,
    ///         INVENTSUM.AVAILPHYSICAL         = INVENTSUM.AVAILPHYSICAL       + INVENTSUMDELTA.SUM_AVAILPHYSICAL,
    ///         INVENTSUM.PHYSICALVALUE         = INVENTSUM.PHYSICALVALUE       + INVENTSUMDELTA.SUM_PHYSICALVALUE,
    ///         INVENTSUM.ARRIVED               = INVENTSUM.ARRIVED             + INVENTSUMDELTA.SUM_ARRIVED,
    ///         INVENTSUM.PHYSICALINVENT        = INVENTSUM.PHYSICALINVENT      + INVENTSUMDELTA.SUM_PHYSICALINVENT,
    ///         INVENTSUM.LASTUPDDATEPHYSICAL   = CASE WHEN INVENTSUM.LASTUPDDATEPHYSICAL > INVENTSUMDELTA.MAX_LASTUPDDATEPHYSICAL
    ///                                                THEN INVENTSUM.LASTUPDDATEPHYSICAL
    ///                                                ELSE INVENTSUMDELTA.MAX_LASTUPDDATEPHYSICAL
    ///                                           END ,
    ///         INVENTSUM.LASTUPDDATEEXPECTED   = CASE WHEN INVENTSUM.LASTUPDDATEEXPECTED > INVENTSUMDELTA.MAX_LASTUPDDATEEXPECTED
    ///                                                THEN INVENTSUM.LASTUPDDATEEXPECTED
    ///                                                ELSE INVENTSUMDELTA.MAX_LASTUPDDATEEXPECTED
    ///                                           END ,
    ///         INVENTSUM.MODIFIEDDATETIME      = dateadd(ms, -datepart(ms,getutcdate()), getutcdate())
    ///         INVENTSUM.CLOSEDQTY = CASE WHEN ((INVENTSUM.POSTEDQTY + INVENTSUMDELTA.SUM_POSTEDQTY) = 0 AND
    ///                                          (INVENTSUM.DEDUCTED + INVENTSUMDELTA.SUM_DEDUCTED) = 0 AND
    ///                                          (INVENTSUM.PICKED + INVENTSUMDELTA.SUM_PICKED) = 0 AND
    ///                                          (INVENTSUM.RECEIVED + INVENTSUMDELTA.SUM_RECEIVED) = 0 AND
    ///                                          (INVENTSUM.REGISTERED + INVENTSUMDELTA.SUM_REGISTERED) = 0 AND
    ///                                          (INVENTSUM.RESERVPHYSICAL + INVENTSUMDELTA.SUM_RESERVPHYSICAL) = 0 AND
    ///                                          (INVENTSUM.RESERVORDERED + INVENTSUMDELTA.SUM_RESERVORDERED) = 0 AND
    ///                                          (INVENTSUM.ONORDER + INVENTSUMDELTA.SUM_ONORDER) = 0 AND
    ///                                          (INVENTSUM.ORDERED + INVENTSUMDELTA.SUM_ORDERED) = 0 AND
    ///                                          (INVENTSUM.ARRIVED + INVENTSUMDELTA.SUM_ARRIVED) = 0 AND
    ///                                          (INVENTSUM.QUOTATIONISSUE + INVENTSUMDELTA.SUM_QUOTATIONISSUE) = 0 AND
    ///                                          (INVENTSUM.QUOTATIONRECEIPT + INVENTSUMDELTA.SUM_QUOTATIONRECEIPT) = 0)
    ///                                    THEN 1
    ///                                    ELSE 0
    ///                                    END,
    ///         INVENTSUM.CLOSED = CASE WHEN ((INVENTSUM.POSTEDQTY + INVENTSUMDELTA.SUM_POSTEDQTY) = 0 AND
    ///                                       (INVENTSUM.DEDUCTED + INVENTSUMDELTA.SUM_DEDUCTED) = 0 AND
    ///                                       (INVENTSUM.PICKED + INVENTSUMDELTA.SUM_PICKED) = 0 AND
    ///                                       (INVENTSUM.RECEIVED + INVENTSUMDELTA.SUM_RECEIVED) = 0 AND
    ///                                       (INVENTSUM.REGISTERED + INVENTSUMDELTA.SUM_REGISTERED) = 0 AND
    ///                                       (INVENTSUM.RESERVPHYSICAL + INVENTSUMDELTA.SUM_RESERVPHYSICAL) = 0 AND
    ///                                       (INVENTSUM.RESERVORDERED + INVENTSUMDELTA.SUM_RESERVORDERED) = 0 AND
    ///                                       (INVENTSUM.ONORDER + INVENTSUMDELTA.SUM_ONORDER) = 0 AND
    ///                                       (INVENTSUM.ORDERED + INVENTSUMDELTA.SUM_ORDERED) = 0 AND
    ///                                       (INVENTSUM.ARRIVED + INVENTSUMDELTA.SUM_ARRIVED) = 0 AND
    ///                                       (INVENTSUM.QUOTATIONISSUE + INVENTSUMDELTA.SUM_QUOTATIONISSUE) = 0 AND
    ///                                       (INVENTSUM.QUOTATIONRECEIPT + INVENTSUMDELTA.SUM_QUOTATIONRECEIPT) = 0 AND
    ///                                       (INVENTSUM.POSTEDVALUE + INVENTSUMDELTA.SUM_POSTEDVALUE) = 0 AND
    ///                                       (INVENTSUM.PHYSICALVALUE + INVENTSUMDELTA.SUM_PHYSICALVALUE) = 0)
    ///                                 THEN 1
    ///                                 ELSE 0 END
    ///     FROM (SELECT SUM(POSTEDQTY) AS SUM_POSTEDQTY,
    ///                  SUM(POSTEDVALUE) AS SUM_POSTEDVALUE,
    ///                  SUM(DEDUCTED) AS SUM_DEDUCTED,
    ///                  SUM(RECEIVED) AS SUM_RECEIVED,
    ///                  SUM(RESERVORDERED) AS SUM_RESERVORDERED,
    ///                  SUM(RESERVPHYSICAL) AS SUM_RESERVPHYSICAL,
    ///                  SUM(ONORDER) AS SUM_ONORDER,
    ///                  SUM(ORDERED) AS SUM_ORDERED,
    ///                  SUM(QUOTATIONISSUE) AS SUM_QUOTATIONISSUE,
    ///                  SUM(QUOTATIONRECEIPT) AS SUM_QUOTATIONRECEIPT,
    ///                  SUM(REGISTERED) AS SUM_REGISTERED,
    ///                  SUM(PICKED) AS SUM_PICKED,
    ///                  SUM(AVAILORDERED) AS SUM_AVAILORDERED,
    ///                  SUM(AVAILPHYSICAL) AS SUM_AVAILPHYSICAL,
    ///                  SUM(PHYSICALVALUE) AS SUM_PHYSICALVALUE,
    ///                  SUM(ARRIVED) AS SUM_ARRIVED,
    ///                  SUM(PHYSICALINVENT) AS SUM_PHYSICALINVENT,
    ///                  MAX(LASTUPDDATEPHYSICAL) AS MAX_LASTUPDDATEPHYSICAL,
    ///                  MAX(LASTUPDDATEEXPECTED) AS MAX_LASTUPDDATEEXPECTED,
    ///                  INVENTSUMDELTA.ITEMID,
    ///                  INVENTSUMDELTA.INVENTDIMID
    ///           FROM INVENTSUMDELTA WITH (INDEX (SQLTransactionItemDimIdx), FORCESEEK)
    ///           WHERE INVENTSUMDELTA.DATAAREAID       = @p2
    ///             AND INVENTSUMDELTA.PARTITION        = current_partition
    ///             AND INVENTSUMDELTA.SQLTRANSACTIONID = @p3
    ///           GROUP BY INVENTSUMDELTA.ITEMID, INVENTSUMDELTA.INVENTDIMID
    ///          ) AS INVENTSUMDELTA
    ///     WHERE INVENTSUM.DATAAREAID  = @p1
    ///       AND INVENTSUM.PARTITION    = current_partition
    ///       AND INVENTSUM.ITEMID      = INVENTSUMDELTA.ITEMID
    ///       AND INVENTSUM.INVENTDIMID = INVENTSUMDELTA.INVENTDIMID
    ///       OPTION (LOOP JOIN)
    /// ',N'@p1 NVARCHAR(4), @p2 NVARCHAR(4), @p3 BIGINT, @p4 BIGINT',@p1=N%1, @p2=N%2, @p3='%3', @p4='%4'
    /// </remarks>
    protected str sqlUpdateInventSumStr()
    {
        str                 sqls1,sqls2;
        str                 pct2;
        str                 pct3;
        str                 pct5;
        str                 pct6;
        str                 pct8;
        str 5               sumPrefix                    = 'SUM_';
        str 5               maxPrefix                    = 'MAX_';
        str 256             tmpFieldName;

        str                 sqls_base                    = 'UPDATE %1 SET %2 FROM (SELECT %3 FROM %4 WHERE %5 GROUP BY %6) AS %7 WHERE %8';
        str 256             inventSumName                = new SysDictTable(tableNum(InventSum)).name(DbBackend::Sql);  // %1
        str 256             inventSumDeltaName           = new SysDictTable(tableNum(InventSumDelta)).name(DbBackend::Sql);  // %4 and %7

        str 256             tmpFieldNameUpdPhys          = new SysDictField(tableNum(InventSum),fieldNum(InventSum,LastUpdDatePhysical)).name(DbBackend::Sql,0,FieldNameGenerationMode::FieldList);
        str 256             tmpFieldNameUpdExp           = new SysDictField(tableNum(InventSum),fieldNum(InventSum,LastUpdDateExpected)).name(DbBackend::Sql,0,FieldNameGenerationMode::FieldList);
        str 256             tmpFieldNameItemId           = new SysDictField(tableNum(InventSum),fieldNum(InventSum,ItemId)).name(DbBackend::Sql,0,FieldNameGenerationMode::FieldList);
        str 256             tmpFieldNameInventDimId      = new SysDictField(tableNum(InventSum),fieldNum(InventSum,InventDimId)).name(DbBackend::Sql,0,FieldNameGenerationMode::FieldList);

        str 256             tmpFieldNameClosed           = new SysDictField(tableNum(InventSum),fieldNum(InventSum,Closed)).name(DbBackend::Sql,0,FieldNameGenerationMode::FieldList);
        str 256             tmpFieldNameClosedQty        = new SysDictField(tableNum(InventSum),fieldNum(InventSum,ClosedQty)).name(DbBackend::Sql,0,FieldNameGenerationMode::FieldList);

        str 256             tmpFieldNameModifiedDate     = new SysDictField(tableNum(InventSum),fieldNum(InventSum, ModifiedDateTime)).name(DbBackend::Sql,0,FieldNameGenerationMode::FieldList);
        str 256             tmpFieldNameUpdPhysDelta     = new SysDictField(tableNum(InventSumDelta),fieldNum(InventSumDelta,LastUpdDatePhysical)).name(DbBackend::Sql,0,FieldNameGenerationMode::FieldList);
        str 256             tmpFieldNameUpdExpDelta      = new SysDictField(tableNum(InventSumDelta),fieldNum(InventSumDelta,LastUpdDateExpected)).name(DbBackend::Sql,0,FieldNameGenerationMode::FieldList);
        str 256             tmpFieldNameItemIdDelta      = new SysDictField(tableNum(InventSumDelta),fieldNum(InventSumDelta,ItemId)).name(DbBackend::Sql,0,FieldNameGenerationMode::FieldList);
        str 256             tmpFieldNameInventDimIdDelta = new SysDictField(tableNum(InventSumDelta),fieldNum(InventSumDelta,InventDimId)).name(DbBackend::Sql,0,FieldNameGenerationMode::FieldList);

        DictFieldGroup      fieldGrp                     = new DictFieldGroup(tableNum(InventSum), tableFieldgroupStr(InventSum, DeltaFields));
        DictFieldGroup      deltaFieldGrp                = new DictFieldGroup(tableNum(InventSumDelta), tableFieldgroupStr(InventSumDelta, DeltaFields));
        DictFieldGroup      fieldGrpQty                  = new DictFieldGroup(tableNum(InventSum), tableFieldgroupStr(InventSum, DeltaFieldsQty));
        int                 h;
        str 50              sqlFieldTypeNameDataAreaId;
        str 50              sqlFieldTypeNameSQLTransactionId;
        str 50              sqlFieldTypeNamePartition;

        const str SQLDataAreaIdType     = 'NVARCHAR';
        const str SQLTransactionIdType  = 'BIGINT';
        const str SQLPartition          = 'BIGINT';

        // %2 Begin
        // SET InventSum.PostedQty = InventSum.PostedQty + InventSumDelta.SUM_PostedQty, InventSum.PostedValue = InventSum.PostedValue + InventSumDelta.SUM_PostedValue,.....
        for (h = 1; h <= fieldGrp.numberOfFields(); h++)
        {
            tmpFieldName = new SysDictField(tableNum(InventSum),fieldGrp.field(h)).name(DbBackend::Sql);
            if (tmpFieldName) // fields might be disabled by config keys
            {
                pct2 += pct2 ? ', ' : '';
                // Note: field names must be exactly the same on tables InventSum and InventSumDelta
                pct2 += inventSumName + '.' + tmpFieldName + ' = ' + inventSumName + '.' + tmpFieldName + ' + ' + inventSumDeltaName + '.' + sumPrefix + tmpFieldName;
            }
        }

        //  InventSum.LastUpdDatePhysical = CASE WHEN InventSum.LastUpdDatePhysical > InventSumDelta.MAX_LastUpdDatePhysical
        //                                       THEN InventSum.LastUpdDatePhysical
        //                                       ELSE InventSumDelta.MAX_LastUpdDatePhysical
        //                                  END,
        pct2 += ', ' + inventSumName + '.' + tmpFieldNameUpdPhys + ' = CASE WHEN '  + inventSumName + '.' + tmpFieldNameUpdPhys + ' > ' + inventSumDeltaName + '.' + maxPrefix + tmpFieldNameUpdPhys;
        pct2 += ' THEN '  + inventSumName + '.' + tmpFieldNameUpdPhys + ' ELSE ' + inventSumDeltaName + '.' + maxPrefix + tmpFieldNameUpdPhys + ' END ';

        //  InventSum.LastUpdDateExpected = CASE WHEN InventSum.LastUpdDateExpected > InventSumDelta.MAX_LastUpdDateExpected
        //                                       THEN InventSum.LastUpdDateExpected
        //                                       ELSE InventSumDelta.MAX_LastUpdDateExpected
        //                                  END,
        pct2 += ', ' + inventSumName + '.' + tmpFieldNameUpdExp + ' = CASE WHEN '  + inventSumName + '.' + tmpFieldNameUpdExp + ' > ' + inventSumDeltaName + '.' + maxPrefix + tmpFieldNameUpdExp;
        pct2 += ' THEN '  + inventSumName + '.' + tmpFieldNameUpdExp + ' ELSE ' + inventSumDeltaName + '.' + maxPrefix + tmpFieldNameUpdExp + ' END ';

        //  InventSum.ModifiedDateTime = dateadd(ms, -datepart(ms,getutcdate()), getutcdate()),
        pct2 += ', '  + inventSumName + '.' + tmpFieldNameModifiedDate + ' = dateadd(ms, -datepart(ms,getutcdate()), getutcdate()) ';

        //  InventSum.ClosedQty              = CASE WHEN ((InventSum.PostedQty + InventSumDelta.SUM_PostedQty) = 0 ANd
        //                                                (InventSum.Deducted  + InventSumDelta.SUM_Deducted)  = 0 ANd
        //                                                (InventSum.Picked    + InventSumDelta.SUM_Picked)    = 0 ANd
        //                                                ....
        //                                                ....
        //                                               )
        //                                          THEN 1
        //                                          ELSE 0
        //                                     END,
        boolean isFirstDBField = true;
        pct2 += ', ' + inventSumName + '.' + tmpFieldNameClosedQty + ' = CASE WHEN (';
        for (h = 1; h <= fieldGrpQty.numberOfFields(); h++)
        {
            tmpFieldName = new SysDictField(tableNum(InventSum),fieldGrpQty.field(h)).name(DbBackend::Sql);
            if (tmpFieldName) // fields might be disabled by config keys
            {
                pct2 += isFirstDBField ? '' : ' AND ';
                isFirstDBField = false;
                // Note: field names must be exactly the same on tables InventSum and InventSumDelta
                pct2 += '(' + inventSumName + '.' + tmpFieldName + ' + ' + inventSumDeltaName + '.' + sumPrefix + tmpFieldName + ') = 0';
            }
        }
        pct2 += ') THEN 1 ELSE 0 END,';

        //  InventSum.Closed                 = CASE WHEN ((InventSum.PostedValue      + InventSumDelta.SUM_PostedValue)    = 0 ANd
        //                                                (InventSum.PhysicalValue    + InventSumDelta.SUM_PhysicalValue)  = 0 ANd
        //                                                ....
        //                                                ....
        //                                               )
        //                                          THEN 1
        //                                          ELSE 0
        //                                     ENd
        isFirstDBField = true;
        pct2 += inventSumName + '.' + tmpFieldNameClosed + ' = CASE WHEN (';
        for (h = 1; h <= fieldGrpQty.numberOfFields(); h++)
        {
            tmpFieldName = new SysDictField(tableNum(InventSum),fieldGrpQty.field(h)).name(DbBackend::Sql);
            if (tmpFieldName) // fields might be disabled by config keys
            {
                pct2 += isFirstDBField ? '' : ' AND ';
                isFirstDBField = false;
                // Note: field names must be exactly the same on tables InventSum and InventSumDelta
                pct2 += '(' + inventSumName + '.' + tmpFieldName + ' + ' + inventSumDeltaName + '.' + sumPrefix + tmpFieldName + ') = 0';
            }
        }
        tmpFieldName = new SysDictField(tableNum(InventSum),fieldNum(InventSum,PostedValue)).name(DbBackend::Sql);
        pct2 += ' AND (' + inventSumName + '.' + tmpFieldName + ' + ' + inventSumDeltaName + '.' + sumPrefix + tmpFieldName + ') = 0';
        tmpFieldName = new SysDictField(tableNum(InventSum),fieldNum(InventSum,PhysicalValue)).name(DbBackend::Sql);
        pct2 += ' AND (' + inventSumName + '.' + tmpFieldName + ' + ' + inventSumDeltaName + '.' + sumPrefix + tmpFieldName + ') = 0';
        pct2 += ') THEN 1 ELSE 0 END';
        // %2 End

        // %3 Begin
        // SUM (PostedQty) AS SUM_PostedQty, SUM(PostedValue) AS SUM_PostedValue, .....
        for (h=1;h<=deltaFieldGrp.numberOfFields();h++)
        {
            tmpFieldName = new SysDictField(tableNum(InventSumDelta),deltaFieldGrp.field(h)).name(DbBackend::Sql);
            if (tmpFieldName) // fields might be disabled by config keys
            {
                pct3 += 'SUM(' + tmpFieldName + ') AS ' + sumPrefix + tmpFieldName + ', ';
            }
        }
        // MAX (LastUpdDatePhysical) AS MAX_LastUpdDatePhysical, MAX (LastUpdDateExpected) AS MAX_LastUpdDateExpected
        pct3 += 'MAX(' + tmpFieldNameUpdPhysDelta + ') AS ' + maxPrefix + tmpFieldNameUpdPhysDelta + ', ';
        pct3 += 'MAX(' + tmpFieldNameUpdExpDelta + ') AS ' + maxPrefix + tmpFieldNameUpdExpDelta + ', ';

        // InventSumDelta.ItemId, InventSumDelta.InventDimId
        pct3 += inventSumDeltaName + '.' + tmpFieldNameItemIdDelta + ', ';
        pct3 += inventSumDeltaName + '.' + tmpFieldNameInventDimIdDelta;
        // %3 End

        // %5 Begin
        //      InventSumDelta.DataAreaId       = @p2
        // AND  InventSumDelta.Partition        = @p4
        // AND  InventSumDelta.SQLTransactionId = @p3
        tmpFieldName = new SysDictField(tableNum(InventSumDelta),fieldNum(InventSumDelta, DataAreaId)).name(DbBackend::Sql,0,FieldNameGenerationMode::WhereClause);
        pct5 += inventSumDeltaName + '.' + tmpFieldName + ' = @p2';
        pct5 += ' AND ';

        tmpFieldName = new SysDictField(tableNum(InventSumDelta),fieldNum(InventSumDelta, Partition)).name(DbBackend::Sql,0,FieldNameGenerationMode::WhereClause);
        pct5 += inventSumDeltaName + '.' + tmpFieldName + ' = @p4';
        pct5 += ' AND ';

        tmpFieldName = new SysDictField(tableNum(InventSumDelta),fieldNum(InventSumDelta, SQLTransactionId)).name(DbBackend::Sql,0,FieldNameGenerationMode::WhereClause);
        pct5 += inventSumDeltaName + '.' + tmpFieldName + ' = ';
        pct5 += '@p3';

        // %5 End

        // %6 Begin
        // InventSumDelta.ItemId, InventSumDelta.InventDimId
        pct6 += inventSumDeltaName + '.' + tmpFieldNameItemIdDelta + ', ';
        pct6 += inventSumDeltaName + '.' + tmpFieldNameInventDimIdDelta;
        // %6 End

        // %8 Begin
        //          InventSum.DataAreaId        = @p1
        //    AND   InventSum.Partition         = @p4
        //    AND   InventSum.ItemId            = InventSumDelta.ItemId
        //    AND   InventSum.InventDimId       = InventSumDelta.InventDimId
        tmpFieldName = new SysDictField(tableNum(InventSum),fieldNum(InventSum,DataAreaId)).name(DbBackend::Sql,0,FieldNameGenerationMode::WhereClause);
        pct8 += inventSumName + '.' + tmpFieldName + ' = ';
        pct8 += '@p1' + ' AND ';

        tmpFieldName = new SysDictField(tableNum(InventSum),fieldNum(InventSum,Partition)).name(DbBackend::Sql,0,FieldNameGenerationMode::WhereClause);
        pct8 += inventSumName + '.' + tmpFieldName + ' = @p4';
        pct8 += ' AND ';

        tmpFieldName = new SysDictField(tableNum(InventSum),fieldNum(InventSum,ItemId)).name(DbBackend::Sql,0,FieldNameGenerationMode::WhereClause);
        pct8 += inventSumName       + '.' + tmpFieldName      + ' = ';
        tmpFieldName = new SysDictField(tableNum(InventSumDelta),fieldNum(InventSumDelta,ItemId)).name(DbBackend::Sql,0,FieldNameGenerationMode::WhereClause);
        pct8 += inventSumDeltaName  + '.' + tmpFieldName + ' AND ';
        tmpFieldName = new SysDictField(tableNum(InventSum),fieldNum(InventSum,InventDimId)).name(DbBackend::Sql,0,FieldNameGenerationMode::WhereClause);
        pct8 += inventSumName       + '.' + tmpFieldName + ' = ';
        tmpFieldName = new SysDictField(tableNum(InventSumDelta),fieldNum(InventSumDelta,InventDimId)).name(DbBackend::Sql,0,FieldNameGenerationMode::WhereClause);
        pct8 += inventSumDeltaName  + '.' + tmpFieldNameInventDimIdDelta;

        //For scenarios where multiple large postings are happening in parallel SQL can choose a Merge Join.
        //When data needs to be read from the InventSum table the seek only uses partition, dataareaId.
        //This can lead to blocking due to locks taken by the lockInventSum() method in other transactions, which eventually leads to deadlocks when the second transaction proceeds to the update.
        //Therefore we prefer a nested loop which should lead to a better seek on InventSum which will reduce the risk of deadlocks
        pct8 += ' OPTION (LOOP JOIN)';
        // %8 End

        // find SQL field type names
        sqlFieldTypeNameDataAreaId = SQLDataAreaIdType + '(' + int2str(new SysDictField(tableNum(InventSumDelta),fieldNum(InventSumDelta,DataAreaId)).stringLen()) + ')';
        sqlFieldTypeNameSQLTransactionId = SQLTransactionIdType;
        sqlFieldTypeNamePartition = SQLPartition;

        str pct4 = inventSumDeltaName;

        pct4 += strFmt(' WITH (INDEX (%1), FORCESEEK)', new DictIndex(tableNum(InventSumDelta), indexNum(InventSumDelta, SQLTransactionItemDimIdx)).name(DbBackend::Sql));

        // build final str
        sqls1 = strFmt(sqls_base,inventSumName,pct2,pct3,pct4,pct5,pct6,inventSumDeltaName,pct8);
        sqls2 = 'execute sp_executesql N' + '\'' + sqls1 + '\',N\'@p1 ' + sqlFieldTypeNameDataAreaId +
                                                               ', @p2 ' + sqlFieldTypeNameDataAreaId +
                                                               ', @p3 ' + sqlFieldTypeNameSQLTransactionId +
                                                               ', @p4 ' + sqlFieldTypeNamePartition +
                                                               '\',@p1=N%1, @p2=N%2, @p3=\'%3\', @p4=\'%4\'';

        return sqls2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sqlUpdateStr</Name>
				<Source><![CDATA[
    protected str sqlUpdateStr()
    {
        if (!sqlUpdateStr)
        {
            const str SqlUpdateInventSumKey = 'sqlUpdateInventSumStrWithSqlTransactionId';
            SysGlobalObjectCache cacheObject = classfactory.globalObjectCache();
            container sqlUpdateInventSumCon = cacheObject.find(InventOnhandCacheScope, [SqlUpdateInventSumKey]);
            if (sqlUpdateInventSumCon == conNull())
            {
                sqlUpdateStr = this.sqlUpdateInventSumStr();
                cacheObject.insert(InventOnhandCacheScope, [SqlUpdateInventSumKey], [sqlUpdateStr]);
            }
            else
            {
                sqlUpdateStr = conPeek(sqlUpdateInventSumCon, 1);
            }
        }

        return strFmt(sqlUpdateStr,curExtensionSum, curExtensionSumDelta, this.sqlTransactionId(), getcurrentpartitionrecid());
    }

]]></Source>
			</Method>
			<Method>
				<Name>ttsId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the current transaction ID as used by the kernel.
    /// </summary>
    /// <returns>
    ///    A transaction ID.
    /// </returns>
    public CreatedTransactionId ttsId()
    {
        if (appl.ttsLevel() == 0)
        {
            return ttsId;
        }

        if (!ttsId)
        {
            ttsId = appl.curTransactionId(true);
        }

        return ttsId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sqlTransactionId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the current SQL transaction ID as used by the kernel.
    /// </summary>
    /// <returns>
    ///    A SQL transaction ID.
    /// </returns>
    public CreatedTransactionId sqlTransactionId()
    {
        if (appl.ttsLevel() == 0)
        {
            return 0;
        }

        if (!sqlTransactionId)
        {
            sqlTransactionId = this.getSqlTransactionIdFromDatabase();
        }

        return sqlTransactionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSqlTransactionIdFromDatabase</Name>
				<Source><![CDATA[
    private CreatedTransactionId getSqlTransactionIdFromDatabase()
    {
        Statement statement;
        Connection connection;

        try
        {
            connection = new Connection();
            statement = connection.createStatement();
            ResultSet resultSet = statement.executeQueryWithParameters(strFmt('SELECT dbo.%1()', InventUpdateOnhand::getInventUpdateOnHandHashingFunctionName()), SqlParams::create());
            resultSet.next();
            
            return resultSet.getInt64(1);
        }
        finally
        {
            if (statement)
            {
                statement.close();
            }
            if (connection)
            {
                connection.finalize();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSQLTransactionIdConditionBeUsedInsteadOfTTSId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether SQL transaction ID column can be used in the condition instead of X++ TTS ID.
    /// </summary>
    /// <param name = "_ttsId">The TTS ID.</param>
    /// <returns>true if the SQL transaction ID can be used; otherwise, false.</returns>
    public boolean canSQLTransactionIdConditionBeUsedInsteadOfTTSId(CreatedTransactionId _ttsId)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ttsNotifyAbort</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resets the internal variables after it is triggered by a <c>ttsAbort</c> event.
    /// </summary>
    public void ttsNotifyAbort()
    {
        this.reset();

        this.onOnHandAborted(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ttsNotifyPostBegin</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resets the internal variables after it is triggered by a <c>ttsBegin</c> event.
    /// </summary>
    public void ttsNotifyPostBegin()
    {
        this.reset();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onOnHandUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Raises an event when the on-hand update is completed.
    /// </summary>
    /// <param name = "_thisInventUpdateOnhand">The instance of the <c>InventUpdateOnhand</c> class.</param>
    delegate void onOnHandUpdated(InventUpdateOnhand _thisInventUpdateOnhand)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onOnHandAborted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Raises an event when the on-hand update is aborted.
    /// </summary>
    /// <param name = "_thisInventUpdateOnhand">The instance of the <c>InventUpdateOnhand</c> class.</param>
    delegate void onOnHandAborted(InventUpdateOnhand _thisInventUpdateOnhand)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>ttsNotifyPreCommit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Triggers during a <c>ttsCommit</c> event before data is committed to the database.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    All inner transaction scopes have been passed.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    There are not enough items on hand to prevent negative inventory.
    /// </exception>
    public void ttsNotifyPreCommit()
    {
        if (appl.ttsLevel() != 1)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (!activated)
        {
            return;
        }

        this.updateOnHand();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOnHand</Name>
				<Source><![CDATA[
    private void updateOnHand()
    {
        using (var onHandInstrumentationTask = new InventUpdateOnHandInstrumentationTask(methodStr(InventUpdateOnhand, ttsNotifyPreCommit)))
        {
            isFinalCommit = true;

            onHandinstrumentationTask.startMeasureTime();
            this.insertInventSumLogTTS();           // log changes for MRP
            onHandinstrumentationTask.stopMeasureTime(methodStr(InventUpdateOnhand, insertInventSumLogTTS));

            this.insertInventSum();                 // insert new InventSum records

            // Process Insert for reservation records
            this.whsInsertInventReserve();

            onHandinstrumentationTask.startMeasureTime();
            this.lockInventSum();                   // serialize on InventSum for Onhand checks
            onHandinstrumentationTask.stopMeasureTime(methodStr(InventUpdateOnhand, lockInventSum));

            onHandinstrumentationTask.startMeasureTime();
            this.updateInventSum();                 // set based update of inventSum
            onHandinstrumentationTask.stopMeasureTime(methodStr(InventUpdateOnhand, updateInventSum));

            onHandinstrumentationTask.startMeasureTime();
            // Lock and process reservation records
            this.whsLockInventReserve();            // serialize on WHSInventReserve for Avail checks
            onHandinstrumentationTask.stopMeasureTime(methodStr(InventUpdateOnhand, whsLockInventReserve));

            onHandinstrumentationTask.startMeasureTime();
            this.whsAdjustDeltasForNegativeWarehouses();
            onHandinstrumentationTask.stopMeasureTime(methodStr(InventUpdateOnhand, whsAdjustDeltasForNegativeWarehouses));

            onHandinstrumentationTask.startMeasureTime();
            this.whsUpdateInventReserve();          // set based update of WHSInventReserve
            onHandinstrumentationTask.stopMeasureTime(methodStr(InventUpdateOnhand, whsUpdateInventReserve));

            onHandinstrumentationTask.startMeasureTime();
            if (!this.checkOnhand())                // combined Onhand check for all movements
            {
                this.logMeasureCounts(onHandinstrumentationTask);
                throw error("@SYS18447");
            }
            onHandinstrumentationTask.stopMeasureTime(methodStr(InventUpdateOnhand, checkOnhand));

            this.deleteInventSumDelta();            // bulk delete InventSumDelta records

            this.whsDeleteInventReserveDelta();     // bulk delete InventReserveDelta records

            this.deleteInventSumDeltaUpd();         // bulk delete InventSumDeltaDim records

            this.reset();                           // reset all internal variables

            onHandInstrumentationTask.startMeasureTime();
            this.onOnHandUpdated(this);                 // raise event that on-hand was updated
            onHandinstrumentationTask.stopMeasureTime(delegateStr(InventUpdateOnhand, onOnHandUpdated));

            isFinalCommit = false;
            this.logMeasureCounts(onHandinstrumentationTask);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logMeasureCounts</Name>
				<Source><![CDATA[
    private void logMeasureCounts(InventUpdateOnHandInstrumentationTask _onHandinstrumentationTask)
    {
        _onHandinstrumentationTask.addEventCount('whsInsertInventReserveCount', whsInsertInventReserveCount);
        _onHandinstrumentationTask.addEventCount('insertInventSumFromInventSumDeltaCount', insertInventSumFromInventSumDeltaCount);
        _onHandinstrumentationTask.addEventCount('insertInventSumFromInventSumDeltaDimCount', insertInventSumFromInventSumDeltaDimCount);
        _onHandinstrumentationTask.addEventCount('inventSumDeltaDimListCount', inventSumDeltaDimListCount);
        _onHandinstrumentationTask.addEventCount('lockInventReserveCount', lockInventReserveCount);
        _onHandinstrumentationTask.addEventCount('lockInventReserveDeltaCount', lockInventReserveDeltaCount);
        _onHandinstrumentationTask.addEventCount('updateInventReserveCount', updateInventReserveCount);
        _onHandinstrumentationTask.addEventCount('itemIdSetCount', itemIdSetCount);
        _onHandinstrumentationTask.addEventCount('company', CompanyInfo::current());
        _onHandinstrumentationTask.addEvent('checkOnHandStrategy', checkOnHandStrategy);
        _onHandinstrumentationTask.addEventCount('checkDepreciatedOrderedCount', checkOnHandDepreciatedOrderedCount);
        _onHandinstrumentationTask.addEventCount('checkReservationCount', checkOnHandReservationCount);
        _onHandinstrumentationTask.addEventCount('checkPhysicalCount', checkOnHandPhysicalCount);
        _onHandinstrumentationTask.addEventCount('checkWhsPhysicalInventChangeCount', checkOnHandWHSPhysicalInventChangeCount);
        _onHandinstrumentationTask.addEventCount('checkFinancialCount', checkOnHandFinancialCount);
        _onHandinstrumentationTask.addEventCount('checkInventModelCount', checkOnHandInventModelCount);
        _onHandinstrumentationTask.addEventCount('checkWhsDepreciatedOrderedCount', checkOnHandWHSDepreciatedOrderedCount);
        _onHandinstrumentationTask.addEventCount('checkWhsReservationCount', checkOnHandWHSReservationCount);
        _onHandinstrumentationTask.addEventCount('checkWhsPhysicalCount', checkOnHandWHSPhysicalCount);
            
        _onHandinstrumentationTask.addEventCount('deleteInventSumDeltaCount', deleteInventSumDeltaCount);
        _onHandinstrumentationTask.addEventCount('deleteInventSumDeltaUpdCount', deleteInventSumDeltaUpdCount);
        _onHandinstrumentationTask.addEventCount('deleteWHSInventReserveDeltaCount', deleteWHSInventReserveDeltaCount);
        
        _onHandinstrumentationTask.addEventCount('insertInventSumLogTTSCount', insertInventSumLogTTSCount);
        _onHandinstrumentationTask.addEventCount('inventUpdateOnHandInventSumLogTTsTmpTableThreshold', inventUpdateOnHandInventSumLogTTsTmpTableThreshold);
        _onHandinstrumentationTask.addEventCount('insertInventSumLogTTSNonTemptableInsertCount', insertInventSumLogTTSNonTemptableInsertCount);
        _onHandinstrumentationTask.addEventCount('insertInventSumLogTTSNonTemptableEaerlyInsertBeforeThresholdCount', inventSumLogTTSNonTempListFirstEarlyInsertValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventSum</Name>
				<Source><![CDATA[
    protected void updateInventSum()
    {
        if (inventSumDeltaCnt == 1)
        {
            this.updateInventSumSimple();
        }
        else
        {
            this.updateInventSumAdvanced();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventSumAdvanced</Name>
				<Source><![CDATA[
    protected void updateInventSumAdvanced()
    {
        str statement = this.sqlUpdateStr();
        new Connection().createStatement().executeUpdateWithParameters(statement, SqlParams::create());
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventSumSimple</Name>
				<Source><![CDATA[
    protected void updateInventSumSimple()
    {
        InventSum inventSum = InventSum::find(inventSumDeltaCache.ItemId,inventSumDeltaCache.InventDimId,true);

        if (inventSum.RecId == 0
         && !InventTable::exist(inventSumDeltaCache.ItemId))
        {
            return;     // Item no longer exists (could be deletion of product builder item)
        }

        inventSum.ItemId        = inventSumDeltaCache.ItemId;
        inventSum.InventDimId   = inventSumDeltaCache.InventDimId;
        inventSum.addInventSumDelta(inventSumDeltaCache);
        inventSum.write();  // if not exist: 'insert' else 'update'
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsDeleteInventReserveDelta</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes corresponded records in <c>WHSInventReserveDelta</c> table.
    /// </summary>
    protected void whsDeleteInventReserveDelta()
    {
        if (inventReserveDeltaExist)
        {
            WHSInventReserveDelta inventReserveDelta;

            CommonExtensions::SetSqlDeleteIndexHint(inventReserveDelta, indexStr(WHSInventReserveDelta, TTSItemDimIdx));

            delete_from inventReserveDelta
                where inventReserveDelta.ttsId == this.ttsId();

            deleteWHSInventReserveDeltaCount = inventReserveDelta.RowCount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsInsertInventReserve</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts new records into the <c>WHSInventReserve</c> related to this inventory transaction.
    /// </summary>
    protected void whsInsertInventReserve()
    {
        #OCCRetryCount
        try
        {
            WHSInventReserve            inventReserve;
            WHSInventReserve            inventReserveNew;
            WHSInventReserveDelta       inventReserveDelta;
            RecordInsertList            insertList;
            
            whsInsertInventReserveCount = 0;
            if (inventReserveDeltaExist)
            {
                boolean useRecordsInsertList = !InventUpdateOnhandSkipUsingRecordInsertListToggle::instance().isEnabled();
                
                // Only the delta record counts less or equal than constant variable 'deltaCountToDecideUsingQueryRecordInsert', use insert instead of insert_recordSet when skipping to use RecordsInsertList
                if (useRecordsInsertList ||
                    InventUpdateOnhandForceRowByRowCreationToggle::instance().isEnabled() ||
                    (inventSumDeltaCnt <= deltaCountToDecideUsingQueryRecordInsert))
                {
                    inventReserveNew.skipDataMethods(true);
                    inventReserveNew.skipDatabaseLog(true);
                    inventReserveNew.skipEvents(true);

                    while select ItemId, InventDimId, HierarchyLevel, ParentInventDimId, IsItemCatchWeightEnabled from inventReserveDelta
                        group by ItemId, InventDimId, HierarchyLevel, ParentInventDimId, IsItemCatchWeightEnabled
                        where inventReserveDelta.ttsId  == this.ttsId()
                     notexists join inventReserve
                        where inventReserve.ItemId      == inventReserveDelta.ItemId    &&
                              inventReserve.InventDimId == inventReserveDelta.InventDimId
                    {
                        if (!inventReserveDelta.ItemId || !inventReserveDelta.InventDimId)
                        {
                            throw error(strFmt("@SYS68912", funcName()));
                        }

                        if (!insertList && useRecordsInsertList)
                        {
                            insertList = new RecordInsertList(tableNum(WHSInventReserve), true, true, true);
                        }

                        inventReserveNew.ItemId         = inventReserveDelta.ItemId;
                        inventReserveNew.InventDimId    = inventReserveDelta.InventDimId;
                        inventReserveNew.HierarchyLevel  = inventReserveDelta.HierarchyLevel;
                        inventReserveNew.ParentInventDimId = inventReserveDelta.ParentInventDimId;
                        inventReserveNew.IsItemCatchWeightEnabled = inventReserveDelta.IsItemCatchWeightEnabled;
                        inventReserveNew.setInventDimFields();

                        if (useRecordsInsertList)
                        {
                            insertList.add(inventReserveNew);
                        }
                        else
                        {
                            inventReserveNew.doInsert();
                            ++whsInsertInventReserveCount;
                        }
                    }

                    if (insertList)
                    {
                        whsInsertInventReserveCount = insertList.insertDatabase();
                        insertList = null;
                    }
                }
                else
                {
                    this.insertWHSInventReserveFromInventReserveDelta(inventReserveNew);
                    whsInsertInventReserveCount = inventReserveNew.RowCount();
                }
            }
        }
        catch (Exception::DuplicateKeyException)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::DuplicateKeyExceptionNotRecovered;
            }
            else
            {
                retry;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsLockInventReserve</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies (pessimistic) DB lock on the records of <c>WHSInventReserve</c> and <c>WHSInventReserveDelta</c> tables
    /// related to this inventory transaction.
    /// </summary>
    protected void whsLockInventReserve()
    {
        WHSInventReserve            inventReserve;
        WHSInventReserveDelta       inventReserveDelta;

        if (doOnhandCheck && inventReserveDeltaExist)
        {
            inventReserveDelta.allowIndexHint(true);

            //forcenestedloop: we want to avoid merge joins since it can lead to unnecessary blocking
            select forcenestedloop ItemId, InventDimId, ttsId from inventReserveDelta
                index hint TTSItemDimIdx
                where inventReserveDelta.ttsId         == this.ttsId()
                join pessimisticlock ItemId, InventDimId  from inventReserve
                    where inventReserveDelta.ItemId         == inventReserve.ItemId
                        && inventReserveDelta.InventDimId   == inventReserve.InventDimId;

            lockInventReserveCount = inventReserve.rowCount();
            lockInventReserveDeltaCount = inventReserveDelta.RowCount();
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>whsSqlUpdateInventReserveStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns string with well-formatted T-SQL statement template for update of <c>WHSInventReserve</c> table
    /// </summary>
    /// <returns>
    /// Container with T-SQL statement.
    /// </returns>
    protected str whsSqlUpdateInventReserveStr()
    {
        str                 pct2;
        str                 pct3;
        str                 pct5;
        str                 pct6;
        str                 pct8;
        str 5               sumPrefix                    = 'SUM_';
        str 5               maxPrefix                    = 'MAX_';
        str 256             tmpFieldName;

        str                 sqls_base                   = 'UPDATE %1 SET %2 FROM (SELECT %3 FROM %4 WHERE %5 GROUP BY %6) AS %7 WHERE %8';
        str 256             inventReserveName           = new SysDictTable(tableNum(WHSInventReserve)).name(DbBackend::Sql);  // %1
        str 256             inventReserveDeltaName      = new SysDictTable(tableNum(WHSInventReserveDelta)).name(DbBackend::Sql);  // %4 and %7

        str 256             tmpFieldNameItemIdDelta      = new SysDictField(tableNum(WHSInventReserveDelta),fieldNum(WHSInventReserveDelta,ItemId)).name(DbBackend::Sql,0,FieldNameGenerationMode::FieldList);
        str 256             tmpFieldNameInventDimIdDelta = new SysDictField(tableNum(WHSInventReserveDelta),fieldNum(WHSInventReserveDelta,InventDimId)).name(DbBackend::Sql,0,FieldNameGenerationMode::FieldList);

        DictFieldGroup      fieldGrp                     = new DictFieldGroup(tableNum(WHSInventReserve), tableFieldgroupStr(WHSInventReserve, DeltaFields));
        DictFieldGroup      deltaFieldGrp                = new DictFieldGroup(tableNum(WHSInventReserveDelta), tableFieldgroupStr(WHSInventReserveDelta, DeltaFields));

        int                 h;
        container           tmpFieldNames;

        #Define.SQLDataAreaIdType('NVARCHAR')
        #Define.SQLTTSIdType('BIGINT')
        #Define.SQLPartition('BIGINT')

        // %2 Begin
        // SET WHSInventReserve.ReservPhysical = WHSInventReserve.ReservPhysical + WHSInventReserveDelta.SUM_ReservPhysical, WHSInventReserve.ReservOrdered = WHSInventReserve.ReservOrdered + WHSInventReserveDelta.SUM_ReservPhysical.....
        for (h = 1; h <= fieldGrp.numberOfFields(); h++)
        {
            tmpFieldName = new SysDictField(tableNum(WHSInventReserve), fieldGrp.field(h)).name(DbBackend::Sql);
            if (tmpFieldName) // fields might be disabled by config keys
            {
                pct2 += pct2 ? ', ' : '';
                // Note: field names must be exactly the same on tables WHSInventReserve and WHSInventReserveDelta
                pct2 += inventReserveName + '.' + tmpFieldName + ' = ' + inventReserveName + '.' + tmpFieldName + ' + ' + inventReserveDeltaName + '.' + sumPrefix + tmpFieldName;
                tmpFieldNames += tmpFieldName;
            }
        }
        // %2 End

        // %3 Begin
        // SUM(ReservePhysical) AS SUM_ReservPhysical, SUM(ReservOrdered) AS SUM_ReservOrdered, .....
        for (h = 1; h <= deltaFieldGrp.numberOfFields(); h++)
        {
            tmpFieldName = new SysDictField(tableNum(WHSInventReserveDelta), deltaFieldGrp.field(h)).name(DbBackend::Sql);
            if (tmpFieldName) // fields might be disabled by config keys
            {
                pct3 += 'SUM(' + tmpFieldName + ') AS ' + sumPrefix + conPeek(tmpFieldNames, h) + ', ';
            }
        }

        // InventReserveDelta.ItemId, InventReserveDelta.InventDimId
        pct3 += inventReserveDeltaName + '.' + tmpFieldNameItemIdDelta + ', ';
        pct3 += inventReserveDeltaName + '.' + tmpFieldNameInventDimIdDelta;
        // %3 End

        // %5 Begin
        //          WHSInventReserveDelta.DataAreaId   = @p2
        //    AND   WHSInventReserveDelta.Partition    = @p4
        //    AND   WHSInventReserveDelta.TTSId        = @p3
        tmpFieldName = new SysDictField(tableNum(WHSInventReserveDelta), fieldNum(WHSInventReserveDelta, DataAreaId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::WhereClause);
        pct5 += inventReserveDeltaName + '.' + tmpFieldName + ' = @p2';
        pct5 += ' AND ';
        tmpFieldName = new SysDictField(tableNum(WHSInventReserveDelta), fieldNum(WHSInventReserveDelta, Partition)).name(DbBackend::Sql, 0, FieldNameGenerationMode::WhereClause);
        pct5 += inventReserveDeltaName + '.' + tmpFieldName + ' = @p4 AND ';
        tmpFieldName = new SysDictField(tableNum(WHSInventReserveDelta), fieldNum(WHSInventReserveDelta, ttsId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::WhereClause);
        pct5 += inventReserveDeltaName + '.' + tmpFieldName + ' = ';
        pct5 += '@p3';
        // %5 End

        // %6 Begin
        // InventReserveDelta.ItemId, InventReserveDelta.InventDimId
        pct6 += inventReserveDeltaName + '.' + tmpFieldNameItemIdDelta + ', ';
        pct6 += inventReserveDeltaName + '.' + tmpFieldNameInventDimIdDelta;
        // %6 End

        // %8 Begin
        //          WHSInventReserve.DataAreaId        = @p1
        //    AND   WHSInventReserve.Partition         = @p4
        //    AND   WHSInventReserve.ItemId            = InventReserveDelta.ItemId
        //    AND   WHSInventReserve.InventDimId       = InventReserveDelta.InventDimId
        //    OPTION (LOOP JOIN)
        tmpFieldName = new SysDictField(tableNum(WHSInventReserve), fieldNum(WHSInventReserve, DataAreaId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::WhereClause);
        pct8 += inventReserveName + '.' + tmpFieldName + ' = ';
        pct8 += '@p1' + ' AND ';
        tmpFieldName = new SysDictField(tableNum(WHSInventReserve), fieldNum(WHSInventReserve, Partition)).name(DbBackend::Sql, 0, FieldNameGenerationMode::WhereClause);
        pct8 += inventReserveName + '.' + tmpFieldName + ' = @p4 AND ';
        tmpFieldName = new SysDictField(tableNum(WHSInventReserve), fieldNum(WHSInventReserve, ItemId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::WhereClause);
        pct8 += inventReserveName       + '.' + tmpFieldName      + ' = ';
        tmpFieldName = new SysDictField(tableNum(WHSInventReserveDelta), fieldNum(WHSInventReserveDelta, ItemId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::WhereClause);
        pct8 += inventReserveDeltaName  + '.' + tmpFieldName + ' AND ';
        tmpFieldName = new SysDictField(tableNum(WHSInventReserve), fieldNum(WHSInventReserve, InventDimId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::WhereClause);
        pct8 += inventReserveName       + '.' + tmpFieldName + ' = ';
        tmpFieldName = new SysDictField(tableNum(WHSInventReserveDelta), fieldNum(WHSInventReserveDelta, InventDimId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::WhereClause);
        pct8 += inventReserveDeltaName  + '.' + tmpFieldNameInventDimIdDelta;
        
        //For scenarios where multiple large postings are happening in parallel SQL can choose a Merge Join.
        //When data needs to be read from the WHSInventReserve table the seek only uses partition, dataareaId.
        //This can lead to blocking due to locks taken by the whslockInventSum() method in other transactions, which eventually leads to deadlocks when the second transaction proceeds to the update.
        //Therefore we prefer a nested loop which should lead to a better seek on WHSInventReserve which will reduce the risk of deadlocks
        pct8 += ' OPTION (LOOP JOIN)';
        // %8 End

        // find SQL field type names
        str 50 sqlFieldTypeNameDataAreaId = #SQLDataAreaIdType + '(' + int2str(new SysDictField(tableNum(WHSInventReserveDelta),fieldNum(WHSInventReserveDelta, DataAreaId)).stringLen()) + ')';
        str 50 sqlFieldTypeNameTTSId = #SQLTTSIdType;
        str 50 sqlFieldTypeNamePartition = #SQLPartition;

        str pct4 = inventReserveDeltaName;

        pct4 += strFmt(' WITH (INDEX (%1), FORCESEEK)', new DictIndex(tableNum(WHSInventReserveDelta), indexNum(WHSInventReserveDelta, TTSItemDimIdx)).name(DbBackend::Sql));

        // build final str
        str sqls1 = strFmt(sqls_base, inventReserveName, pct2, pct3, pct4, pct5, pct6, inventReserveDeltaName, pct8);
        str sqls2 = 'execute sp_executesql N' + '\'' + sqls1 + '\',N\'@p1 ' + sqlFieldTypeNameDataAreaId +
                                                                   ', @p2 ' + sqlFieldTypeNameDataAreaId +
                                                                   ', @p3 ' + sqlFieldTypeNameTTSId +
                                                                   ', @p4 ' + sqlFieldTypeNamePartition +
                                                                   '\',@p1=N%1, @p2=N%2, @p3=\'%3\', @p4=\'%4\'';

        return sqls2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsSqlUpdateReserveStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns string with well-formatted T-SQL statement for <c>WHSInventReserve</c> table update
    /// </summary>
    /// <returns>
    /// String with T-SQL statement.
    /// </returns>
    protected str whsSqlUpdateReserveStr()
    {
        if (!sqlUpdateReserveStr)
        {
            container sqlUpdateInventReserveKey = ['whsSqlUpdateInventReserveStr'];
            SysGlobalObjectCache cacheObject = classfactory.globalObjectCache();
            container sqlUpdateInventReserveCon = cacheObject.find(InventOnhandCacheScope, sqlUpdateInventReserveKey);
            if (sqlUpdateInventReserveCon == conNull())
            {
                sqlUpdateReserveStr = this.whsSqlUpdateInventReserveStr();
                cacheObject.insert(InventOnhandCacheScope, sqlUpdateInventReserveKey, [sqlUpdateReserveStr]);
            }
            else
            {
                sqlUpdateReserveStr = conPeek(sqlUpdateInventReserveCon, 1);
            }
        }

        return strFmt(sqlUpdateReserveStr, curExtensionSum, curExtensionSumDelta, int642str(this.ttsId()), getcurrentpartitionrecid());
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsUpdateInventReserve</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes all generated update statements.
    /// </summary>
    protected void whsUpdateInventReserve()
    {
        if (inventReserveDeltaExist)
        {
            str statement = this.whsSqlUpdateReserveStr();
            updateInventReserveCount = new Connection().createStatement().executeUpdateWithParameters(statement, SqlParams::create());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventUpdateOnhand construct(DataAreaId _dataAreaId)
    {
        return new InventUpdateOnhand(_dataAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>anyTrackingDimsNeedPhysicalInventCheck</Name>
				<Source><![CDATA[
    private boolean anyTrackingDimsNeedPhysicalInventCheck(
        EcoResTrackingDimensionGroupRecId   _ecoResTrackingDimensionGroupID,
        InventDim                           _inventDim)
    {
        boolean         result = false;
        InventDimParm   dimParmTrackingDim;

        if (_ecoResTrackingDimensionGroupID
            && EcoResTrackingDimGroupSetupCache::anyAllowBlankIssue(_ecoResTrackingDimensionGroupID))
        {
            InventDimParm dimParmActiveTracking = EcoResTrackingDimGroupSetupCache::active(_ecoResTrackingDimensionGroupID);
            List trackingDimList = InventDim::dimTrackingDimFieldList();
            dimParmTrackingDim.initFromInventDim(_inventDim, trackingDimList);

            //just check if all active ones are filled - if they are not, we need to do the check
            if (!InventDimParm::isInventDimParmEqual(dimParmActiveTracking, dimParmTrackingDim, trackingDimList))
            {
                result = true;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckPhysicalInvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if the physical inventory must be checked.
    /// </summary>
    /// <param name="_inventSumDelta">
    /// The <c>InventSumDelta</c> buffer that is representing the change
    /// </param>
    /// <param name="_inventModelGroup">
    /// A <c>InventModelGroup</c> model group.
    /// </param>
    /// <returns>
    /// true if the physical inventory must be checked; otherwise, false.
    /// </returns>
    protected boolean mustCheckPhysicalInvent(
        InventSumDelta      _inventSumDelta,
        InventModelGroup    _inventModelGroup)
    {
        //cheapest check is put here to have minimal impact
        //we only need to do this change if we have reduced the physical invent
        if (_inventSumDelta.PhysicalInvent >= 0)
        {
            return false;
        }

        if (_inventModelGroup.NegativePhysical)
        {
            return false;
        }

        if (!WHSInventEnabled::exist(_inventSumDelta.ItemId))
        {
            return false;
        }

        if (InventLocation::find(InventDim::find(_inventSumDelta.InventDimId).InventLocationId).RetailInventNegPhysical)
        {
            //Negative inventory is not supported for catch weight and warehousing items.
            if (this.isWarehouseNegativeSettingSupportedForItem(_inventSumDelta.ItemId))
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsAdjustDeltasForNegativeWarehouses</Name>
				<Source><![CDATA[
    private void whsAdjustDeltasForNegativeWarehouses()
    {
        Enumerator onHandTrackersEnumerator = WHSNegativeOnHandTrackerCache::getOnHandTrackersEnumerator();
        
        while (onHandTrackersEnumerator.moveNext())
        {
            WHSNegativeOnHandTrackerCacheValue onHandTrackers = onHandTrackersEnumerator.current();

            WHSInventReserve inventReserve = WHSInventReserve::find(onHandTrackers.itemId(), onHandTrackers.inventDimId());

            InventQty availPhysicalAdjustment = onHandTrackers.availPhysicalTracker().getUpperLevelAdjOnCommitedQtyChange(inventReserve.AvailPhysical);
            InventQty availOrderedAdjustment = onHandTrackers.availOrderedTracker().getUpperLevelAdjOnCommitedQtyChange(inventReserve.AvailOrdered);

            PdsCWInventQty cwAvailPhysicalAdjustment;
            PdsCWInventQty cwAvailOrderedAdjustment;

            if (inventReserve.IsItemCatchWeightEnabled)
            {
                cwAvailPhysicalAdjustment = onHandTrackers.availCWPhysicalTracker().getUpperLevelAdjOnCommitedQtyChange(inventReserve.CWAvailPhysical);
                cwAvailOrderedAdjustment = onHandTrackers.availCWOrderedTracker().getUpperLevelAdjOnCommitedQtyChange(inventReserve.CWAvailOrdered);
            }

            if (availPhysicalAdjustment || availOrderedAdjustment || cwAvailPhysicalAdjustment || cwAvailOrderedAdjustment)
            {
                WHSInventReserveQuantities quantities = WHSInventReserveQuantities::newAvailQuantities(availPhysicalAdjustment, availOrderedAdjustment, cwAvailPhysicalAdjustment, cwAvailOrderedAdjustment);
                
                WHSInventOnHand::insertReserveDeltaNegativeWarehouseAdjustment(
                                    onHandTrackers.itemId(),
                                    onHandTrackers.inventDimId(),
                                    this.ttsId(),
                                    quantities);
            }
        }

        WHSNegativeOnHandTrackerCache::flush();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWarehouseNegativeSettingSupportedForItem</Name>
				<Source><![CDATA[
    private boolean isWarehouseNegativeSettingSupportedForItem(ItemId _itemId)
    {
        if (!(PdsGlobal::pdsIsCWItem(_itemId)
              && WHSInventEnabled::exist(_itemId)))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecords</Name>
				<Source><![CDATA[
    private void insertRecords(SysDaQueryObject _queryObject, SysDaInsertObject _insertObject)
    {
        _insertObject.query(_queryObject);

        SysDaInsertStatement insertStatement = new SysDaInsertStatement();

        insertStatement.executeQuery(_insertObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertWHSInventReserveFromInventReserveDelta</Name>
				<Source><![CDATA[
    private void insertWHSInventReserveFromInventReserveDelta(WHSInventReserve _destWHSInventReserve)
    {
        SysDaInsertObject insertObj = this.buildInventReserveInsertObject(_destWHSInventReserve);
        SysDaQueryObject queryObj = this.buildInventReserveDeltaObject();
        this.insertRecords(queryObj, insertObj);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventReserveInsertObject</Name>
				<Source><![CDATA[
    private SysDaInsertObject buildInventReserveInsertObject(WHSInventReserve _destWHSInventReserve)
    {
        _destWHSInventReserve.skipDataMethods(true);
        _destWHSInventReserve.skipDatabaseLog(true);
        _destWHSInventReserve.skipEvents(true);

        SysDaInsertObject inventReserveInsertObject = new SysDaInsertObject(_destWHSInventReserve);
        SysDaSelection selectionObject = inventReserveInsertObject.fields();
        
        selectionObject.add(fieldStr(WHSInventReserve, ItemId))
            .add(fieldStr(WHSInventReserve, InventDimId))
            .add(fieldStr(WHSInventReserve, HierarchyLevel))
            .add(fieldStr(WHSInventReserve, ParentInventDimId))
            .add(fieldStr(WHSInventReserve, IsItemCatchWeightEnabled));
        return inventReserveInsertObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventReserveDeltaObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildInventReserveDeltaObject()
    {
        WHSInventReserveDelta  sourceInventReserveDelta;
        
        SysDaQueryObject inventReserveDeltaQueryObject = new SysDaQueryObject(sourceInventReserveDelta);
        inventReserveDeltaQueryObject.projection()
            .add(fieldStr(WHSInventReserveDelta, ItemId))
            .add(fieldStr(WHSInventReserveDelta, InventDimId))
            .add(fieldStr(WHSInventReserveDelta, HierarchyLevel))
            .add(fieldStr(WHSInventReserveDelta, ParentInventDimId))
            .add(fieldStr(WHSInventReserveDelta, IsItemCatchWeightEnabled));
        
        inventReserveDeltaQueryObject.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(sourceInventReserveDelta, fieldStr(WHSInventReserveDelta, ttsId)), new SysDaValueExpression(this.ttsId())));

        inventReserveDeltaQueryObject.groupByClause(new SysDaGroupBys()
            .add(fieldStr(WHSInventReserveDelta, ItemId))
            .add(fieldStr(WHSInventReserveDelta, InventDimId))
            .add(fieldStr(WHSInventReserveDelta, HierarchyLevel))
            .add(fieldStr(WHSInventReserveDelta, ParentInventDimId))
            .add(fieldStr(WHSInventReserveDelta, IsItemCatchWeightEnabled)));

        WHSInventReserve inventReserveNotExists;
        SysDaQueryObject inventReserveNotExistsQueryObject = new SysDaQueryObject(inventReserveNotExists);

        SysDaQueryExpression inventReserveNotExistsQueryExpression =
            new SysDaEqualsExpression(
                new SysDaFieldExpression(inventReserveNotExists, fieldStr(WHSInventReserve, ItemId)), new SysDaFieldExpression(sourceInventReserveDelta, fieldStr(WHSInventReserveDelta, ItemId)))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(inventReserveNotExists, fieldStr(WHSInventReserve, InventDimId)), new SysDaFieldExpression(sourceInventReserveDelta, fieldStr(WHSInventReserveDelta, inventDimId))));
       
        inventReserveNotExistsQueryObject.whereClause(inventReserveNotExistsQueryExpression);
        inventReserveDeltaQueryObject.joinClause(SysDaJoinKind::NotExistsJoin, inventReserveNotExistsQueryObject);

        return inventReserveDeltaQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventSumFromInventSumDelta</Name>
				<Source><![CDATA[
    private int64 createInventSumFromInventSumDelta()
    {
        InventSum _destInventSum;
        SysDaInsertObject insertObj = this.buildInventSumInsertObject(_destInventSum);
        SysDaQueryObject queryObj = this.buildInventSumDeltaQueryObject();
        this.insertRecords(queryObj, insertObj);
        return _destInventSum.RowCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventSumInsertObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an insert object for creating <c>InventSum</c> record.
    /// </summary>
    /// <param name = "_destInventSum">An <c>InventSum</c> record buffer for inserting.</param>
    /// <returns>A <c>SysDaInsertObject</c> instance for the insert statement of <c>InventSum</c>.</returns>
    protected SysDaInsertObject buildInventSumInsertObject(InventSum _destInventSum)
    {
        _destInventSum.skipDataMethods(true);
        _destInventSum.skipDatabaseLog(true);
        _destInventSum.skipEvents(true);

        SysDaInsertObject inventSumInsertObject = new SysDaInsertObject(_destInventSum);
        SysDaSelection selectionObject = inventSumInsertObject.fields();
        this.addInventSumFields(selectionObject);
        this.addLiteralFieldsToInventSumInsertObject(selectionObject);
        return inventSumInsertObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventSumDeltaQueryObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildInventSumDeltaQueryObject()
    {
        InventSumDelta  sourceInventSumDelta;
        
        SysDaQueryObject inventSumDeltaQueryObject = new SysDaQueryObject(sourceInventSumDelta);
        this.addInventSumDeltaFields(inventSumDeltaQueryObject.projection());
        this.addLiteralFieldsToQueryObject(inventSumDeltaQueryObject.projection());
        
        inventSumDeltaQueryObject.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(sourceInventSumDelta, fieldStr(InventSumDelta, SQLTransactionId)), new SysDaValueExpression(this.sqlTransactionId())));

        inventSumDeltaQueryObject.groupByClause(new SysDaGroupBys()
            .add(fieldStr(InventSumDelta, ItemId))
            .add(fieldStr(InventSumDelta, InventDimId)));

        InventSum inventSumNotExists;
        SysDaQueryObject inventSumNotExistsQueryObject = new SysDaQueryObject(inventSumNotExists);

        SysDaQueryExpression inventSumNotExistsQueryExpression =
            new SysDaEqualsExpression(
                new SysDaFieldExpression(inventSumNotExists, fieldStr(InventSum, ItemId)), new SysDaFieldExpression(sourceInventSumDelta, fieldStr(InventSumDelta, ItemId)))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(inventSumNotExists, fieldStr(InventSum, InventDimId)), new SysDaFieldExpression(sourceInventSumDelta, fieldStr(InventSumDelta, inventDimId))));
       
        inventSumNotExistsQueryObject.whereClause(inventSumNotExistsQueryExpression);
        inventSumDeltaQueryObject.joinClause(SysDaJoinKind::NotExistsJoin, inventSumNotExistsQueryObject);

        return inventSumDeltaQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventSumFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds <c>InventSum</c> fields for query and insert objects.
    /// </summary>
    /// <param name = "_selectionObject">The <c>SysDaSelection</c> object.</param>
    protected void addInventSumFields(SysDaSelection _selectionObject)
    {
        _selectionObject.add(fieldStr(InventSum, ItemId))
            .add(fieldStr(InventSum, InventDimId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLiteralFieldsToInventSumInsertObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds literal fields to the projection of a query object for inserting.
    /// </summary>
    /// <param name = "_selectionObject">The query object to add the fields to.</param>
    protected void addLiteralFieldsToInventSumInsertObject(SysDaSelection _selectionObject)
    {
        _selectionObject.add(fieldStr(InventSum, ClosedQty))
            .add(fieldStr(InventSum, Closed));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventSumDeltaFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds <c>InventSumDelta</c> fields for query and insert objects.
    /// </summary>
    /// <param name = "_selectionObject">The <c>SysDaSelection</c> object.</param>
    protected void addInventSumDeltaFields(SysDaSelection _selectionObject)
    {
        _selectionObject
            .add(fieldStr(InventSumDelta, ItemId))
            .add(fieldStr(InventSumDelta, InventDimId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventSumDeltaDimFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds <c>InventSumDeltaDim</c> fields for query and insert objects.
    /// </summary>
    /// <param name = "_selectionObject">The <c>SysDaSelection</c> object.</param>
    protected void addInventSumDeltaDimFields(SysDaSelection _selectionObject)
    {
        _selectionObject
            .add(fieldStr(InventSumDeltaDim, ItemId))
            .add(fieldStr(InventSumDeltaDim, InventDimId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLiteralFieldsToQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds literal fields to the projection of a query object for inserting.
    /// </summary>
    /// <param name = "_selectionObject">The query object to add the fields to.</param>
    protected void addLiteralFieldsToQueryObject(SysDaSelection _selectionObject)
    {
        _selectionObject
            .addValue(NoYes::Yes) // ClosedQty
            .addValue(NoYes::Yes); // Closed
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventSumFromInventSumDeltaDim</Name>
				<Source><![CDATA[
    private int64 createInventSumFromInventSumDeltaDim()
    {
        InventSum _destInventSum;
        SysDaInsertObject insertObj = this.buildInventSumInsertObject(_destInventSum);
        SysDaQueryObject queryObj = this.buildInventSumDeltaDimQueryObject();
        this.insertRecords(queryObj, insertObj);
        return _destInventSum.RowCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventSumDeltaDimQueryObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildInventSumDeltaDimQueryObject()
    {
        InventSumDeltaDim  sourceInventSumDeltaDim;
        
        SysDaQueryObject inventSumDeltaDimQueryObject = new SysDaQueryObject(sourceInventSumDeltaDim);
        this.addInventSumDeltaDimFields(inventSumDeltaDimQueryObject.projection());
        this.addLiteralFieldsToQueryObject(inventSumDeltaDimQueryObject.projection());
        
        inventSumDeltaDimQueryObject.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(sourceInventSumDeltaDim, fieldStr(InventSumDeltaDim, ttsId)), new SysDaValueExpression(this.ttsId())));

        inventSumDeltaDimQueryObject.groupByClause(new SysDaGroupBys()
            .add(fieldStr(InventSumDeltaDim, ItemId))
            .add(fieldStr(InventSumDeltaDim, InventDimId)));

        InventSum inventSumNotExists;
        SysDaQueryObject inventSumNotExistsQueryObject = new SysDaQueryObject(inventSumNotExists);

        SysDaQueryExpression inventSumNotExistsQueryExpression =
            new SysDaEqualsExpression(
                new SysDaFieldExpression(inventSumNotExists, fieldStr(InventSum, ItemId)), new SysDaFieldExpression(sourceInventSumDeltaDim, fieldStr(InventSumDeltaDim, ItemId)))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(inventSumNotExists, fieldStr(InventSum, InventDimId)), new SysDaFieldExpression(sourceInventSumDeltaDim, fieldStr(InventSumDeltaDim, inventDimId))));
       
        inventSumNotExistsQueryObject.whereClause(inventSumNotExistsQueryExpression);
        inventSumDeltaDimQueryObject.joinClause(SysDaJoinKind::NotExistsJoin, inventSumNotExistsQueryObject);

        return inventSumDeltaDimQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventSumFromInventSumDelta</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update <c>InventSum</c> record buffer based on existing <c>InventSumDelta</c> record.
    /// </summary>
    protected void updateInventSumFromInventSumDelta()
    {
        InventSum      inventSum;
        InventSumDelta inventSumDelta;

        InventOwnerId  inventOwnerid = InventOwner_RU::findOrCreateCurrentLegalEntity().InventOwnerId;
        if (InventSumInventDimDataUpdateToggle::instance().isEnabled())
        {
            while select forupdate inventSum
                where inventSum.InventOwnerId_RU != ''
                exists join inventSumDelta
                    where inventSumDelta.SQLTransactionId == this.sqlTransactionId() &&
                          inventSumDelta.ItemId           == inventSum.ItemId     &&
                          inventSumDelta.InventDimId      == inventSum.InventDimId
            {
                inventSum.IsExcludedFromInventoryValue = (inventSum.InventOwnerId_RU != inventOwnerId);
                inventSum.doUpdate();
            }
        }
        else
        {
            InventDim inventDimOwner;
            while select forupdate inventSum
                join InventOwnerId_RU from inventDimOwner
                    where inventDimOwner.InventDimId == inventSum.InventDimId &&
                          inventDimOwner.InventOwnerId_RU
                exists join inventSumDelta
                where inventSumDelta.SQLTransactionId == this.sqlTransactionId() &&
                      inventSumDelta.ItemId           == inventSum.ItemId        &&
                      inventSumDelta.InventDimId      == inventSum.InventDimId
            {
                inventSum.IsExcludedFromInventoryValue = (inventDimOwner.InventOwnerId_RU != inventOwnerId);
                inventSum.doUpdate();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventSumFromInventSumDeltaDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update <c>InventSum</c> record buffer based on existing <c>InventSumDeltaDim</c> record.
    /// </summary>
    protected void updateInventSumFromInventSumDeltaDim()
    {
        InventSum         inventSum;
        InventSumDeltaDim inventSumDeltaDim;
        InventOwnerId     inventOwnerid = InventOwner_RU::findOrCreateCurrentLegalEntity().InventOwnerId;

        if (InventSumInventDimDataUpdateToggle::instance().isEnabled())
        {
            while select forupdate inventSum
                where inventSum.InventOwnerId_RU != ''
                exists join inventSumDeltaDim
                where inventSumDeltaDim.ttsId       == this.ttsId()        &&
                      inventSumDeltaDim.ItemId      == inventSum.ItemId    &&
                      inventSumDeltaDim.InventDimId == inventSum.InventDimId
            {
                inventSum.IsExcludedFromInventoryValue = (inventSum.InventOwnerId_RU != inventOwnerId);
                inventSum.doUpdate();
            }
        }
        else
        {
            InventDim inventDimOwner;
            while select forupdate inventSum
                join InventOwnerId_RU from inventDimOwner
                    where inventDimOwner.InventDimId == inventSum.InventDimId &&
                          inventDimOwner.InventOwnerId_RU
                exists join inventSumDeltaDim
                where inventSumDeltaDim.ttsId       == this.ttsId()        &&
                      inventSumDeltaDim.ItemId      == inventSum.ItemId    &&
                      inventSumDeltaDim.InventDimId == inventSum.InventDimId
            {
                inventSum.IsExcludedFromInventoryValue = (inventDimOwner.InventOwnerId_RU != inventOwnerId);
                inventSum.doUpdate();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>