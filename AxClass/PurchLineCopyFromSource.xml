<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchLineCopyFromSource</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchLineCopyFromSource</c> class is responsible for copying <c>PurchLine</c> from the given source line.
/// </summary>
abstract class PurchLineCopyFromSource
{
    PurchLine           purchLine;
    PurchTable          purchTable;
    TmpFrmVirtual       tmpFrmVirtualLine;
    PurchCopying        purchCopying;

    boolean isCopyValid;

    // Parameters for the copy
    Qty     qtyFactor;
    NoYes   reverseSign;
    NoYes   recalculateAmount;
    NoYes   copyMarkup;
    NoYes   copyPrecisely;
    NoYes   deleteLines;

    // Calculated values for the copy
    NoYes   createCorrectionLine;
    NoYes   copyExchRate;
    boolean searchPrice;
    boolean copyQty;
    
    RefRecId                        parentRecId;
    RefTableId                      parentTableId;
    PurchLineForeignTradeCategory   purchLineForeignTradeCategory;
    AgreementLine                   agreementLine;
    boolean                         copyForeignTradeRecord;

    RefRecId                        projCreditNoteSourceRefRecId;

    #ISOCountryRegionCodes


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>retrieveSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the source record.
    /// </summary>
    /// <returns>A <c>Common</c> record.</returns>
    abstract public Common retrieveSource()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveSourceQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the source quantity.
    /// </summary>
    /// <returns>A <c>Qty</c> value.</returns>
    abstract public Qty retrieveSourceQty()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveSourceInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>InventTransId</c> of the source.
    /// </summary>
    /// <returns>An <c>InventTransId</c> value.</returns>
    abstract public InventTransId retrieveSourceInventTransId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveSourceDocumentLineRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>SourceDocumentLine</c> of the source.
    /// </summary>
    /// <returns>An <c>SourceDocumentLine</c> value.</returns>
    abstract public RefRecId retrieveSourceDocumentLineRecId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveSourceLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the line number of the source line.
    /// </summary>
    /// <returns>A <c>TradeLineNumber</c> value.</returns>
    public TradeLineNumber retrieveSourceLineNumber()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the parameters for the copying.
    /// </summary>
    /// <param name = "_purchCopying">A <c>PurchCopying</c> instance to initialize.</param>
    protected void initParameters(PurchCopying _purchCopying)
    {
        qtyFactor           = _purchCopying.parmQtyFactor();
        reverseSign         = _purchCopying.parmReverseSign();
        copyMarkup          = _purchCopying.parmcopyMarkup();
        copyPrecisely       = _purchCopying.parmcopyPrecisely();
        deleteLines         = _purchCopying.parmdeleteLines();
        copyExchRate        = _purchCopying.parmcopyExchRate();
        copyQty             = _purchCopying.parmCopyQty();

        searchPrice = _purchCopying.parmSearchPrice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCopy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the copy can be done.
    /// </summary>
    /// <returns>true, if the copy can be done; otherwise, false.</returns>
    public boolean canCopy()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyFromSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies data from the source line to the <c>PurchLine</c>.
    /// </summary>
    protected void copyFromSource()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCategoryRelatedData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies category related data.
    /// </summary>
    protected void copyCategoryRelatedData()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAgreementLine</Name>
				<Source><![CDATA[
    public AgreementLine parmAgreementLine()
    {
        return agreementLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopyForeignTradeRecord</Name>
				<Source><![CDATA[
    public boolean parmCopyForeignTradeRecord()
    {
        return copyForeignTradeRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentRecId</Name>
				<Source><![CDATA[
    public RecId parmParentRecId()
    {
        return parentRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentTableId</Name>
				<Source><![CDATA[
    public TableId parmParentTableId()
    {
        return parentTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchLine</Name>
				<Source><![CDATA[
    public PurchLine parmPurchLine()
    {
        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchTable</Name>
				<Source><![CDATA[
    public PurchTable parmPurchTable()
    {
        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpFrmVirtualLine</Name>
				<Source><![CDATA[
    public TmpFrmVirtual parmTmpFrmVirtualLine()
    {
        return tmpFrmVirtualLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustFindAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an <c>AgreementLine</c> must be found and linked.
    /// </summary>
    /// <returns>true if an <c>AgreementLine</c> should be looked for.</returns>
    public boolean mustFindAgreementLine()
    {
        return (purchTable.MatchingAgreement != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the passed parameters.
    /// </summary>
    /// <param name = "_purchLine">A <c>PurchLine</c> record.</param>
    /// <param name = "_purchTable">A <c>PurchTable</c> record.</param>
    /// <param name = "_tmpFrmVirtualLines">A <c>TmpFrmVirtual</c> record.</param>
    /// <param name = "_purchCopying">An instance of <c>PurchCopying</c>.</param>
    protected void initialize(PurchLine _purchLine, PurchTable _purchTable, TmpFrmVirtual _tmpFrmVirtualLines, PurchCopying _purchCopying)
    {
        purchLine           = _purchLine;
        tmpFrmVirtualLine  = _tmpFrmVirtualLines;
        purchTable          = _purchTable;
        purchCopying        = _purchCopying;

        this.initParameters(purchCopying);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBasedOnSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the purchase order line based on the source, after the copy and line creation.
    /// </summary>
    protected void updateBasedOnSource()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PurchLineCopyFromSource</c>.
    /// </summary>
    /// <param name = "_purchLine">A <c>PurchLine</c> record to copy to.</param>
    /// <param name = "_purchTable">The purchase order for the purchase line being copied.</param>
    /// <param name = "_tmpFrmVirtualLines">A <c>TmpFrmVirtual</c> record which is the source for the copy.</param>
    /// <param name = "_purchCopying">An instance of the <c>PurchCopying</c> class.</param>
    /// <returns>An instance of <c>PurchLineCopyFromSource</c>.</returns>
    public static PurchLineCopyFromSource construct(PurchLine _purchLine, PurchTable _purchTable, TmpFrmVirtual _tmpFrmVirtualLines, PurchCopying _purchCopying)
    {
        PurchLineCopyFromSourceFactoryAttribute attr = new PurchLineCopyFromSourceFactoryAttribute(tableId2Name(_tmpFrmVirtualLines.TableNum));
        PurchLineCopyFromSource purchLineCopyFromSource = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(PurchLineCopyFromSource), attr) as PurchLineCopyFromSource;

        if (!purchLineCopyFromSource)
        {
            purchLineCopyFromSource = new PurchLineCopyFromDefault();
        }

        purchLineCopyFromSource.initialize(_purchLine, _purchTable, _tmpFrmVirtualLines, _purchCopying);
        return purchLineCopyFromSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code from the source line.
    /// </summary>
    /// <returns>A <c>CurrencyCode</c> value.</returns>
    abstract protected CurrencyCode retrieveCurrencyCode()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAgreementRelatedData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy agreement related data.
    /// </summary>
    protected void copyAgreementRelatedData()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies and sets the quantities.
    /// </summary>
    protected void copyQty()
    {
        if (copyQty)
        {
            if (PdsGlobal::pdsIsCWItem(purchLine.ItemId))
            {
                purchCopying.setPdsCWQty(purchLine,reverseSign,qtyFactor);
            }
            else
            {
                purchLine.PurchQty     = reverseSign ? -purchLine.PurchQty : purchLine.PurchQty;
                purchLine.PurchQty     = decRound(purchLine.PurchQty * qtyFactor, UnitOfMeasure::unitOfMeasureDecimalPrecision(
                        UnitOfMeasure::unitOfMeasureIdBySymbol(purchLine.PurchUnit)));
                purchLine.QtyOrdered   = reverseSign ? -purchLine.QtyOrdered : purchLine.QtyOrdered;
                purchLine.QtyOrdered   = purchLine.QtyOrdered * qtyFactor;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates line amounts.
    /// </summary>
    protected void updateAmounts()
    {
        CurrencyCode currencyCode = this.retrieveCurrencyCode();

        if (currencyCode)
        {
            purchLine.PurchPrice  = ExchangeRateHelper::curPrice2CurPrice(purchLine.PurchPrice, currencyCode, purchLine.CurrencyCode);
            purchLine.LineDisc    = ExchangeRateHelper::curPrice2CurPrice(purchLine.LineDisc, currencyCode, purchLine.CurrencyCode);
            purchLine.MultiLnDisc = ExchangeRateHelper::curPrice2CurPrice(purchLine.MultiLnDisc, currencyCode, purchLine.CurrencyCode);
            purchLine.PurchMarkup = ExchangeRateHelper::curPrice2CurPrice(purchLine.PurchMarkup, currencyCode, purchLine.CurrencyCode);
            purchLine.LineAmount  = CurrencyExchangeHelper::curAmount2CurAmount(purchLine.LineAmount, currencyCode, purchLine.CurrencyCode);
            purchLine.DiscAmount  = purchLine.discAmount();
        }
        purchLine.LineAmount    = reverseSign ? -purchLine.LineAmount : purchLine.LineAmount;

    }

]]></Source>
			</Method>
			<Method>
				<Name>copy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies from the source record to the given <c>PurchLine</c>.
    /// </summary>
    /// <returns>true if the copy was successful; otherwise, false.</returns>
    public boolean copy()
    {
        this.copyFromSource();
        this.copyAsset();
        this.copyCategoryRelatedData();
        this.copyAgreementRelatedData();
        this.copyProjectData();

        if (!purchCopying.checkLine(purchLine))
        {
            return false;
        }
        this.copyQty();
        this.updateAmounts();

        this.copyCountryRegionSpecificData();

        purchLine.LineAmount    = purchLine.calcLineAmount();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyProjectData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the project specific data.
    /// </summary>
    protected void copyProjectData()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAssetCreditNotePurchLine</Name>
				<Source><![CDATA[
    internal void updateAssetCreditNotePurchLine()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAsset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the assets related data.
    /// </summary>
    protected void copyAsset()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCountryRegionSpecificData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies country and region specific data.
    /// </summary>
    protected void copyCountryRegionSpecificData()
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) && TaxParameters::checkTaxParameters_IN())
        {
            PurchLine_IN purchLine_IN = purchLine.purchLine_IN();
            purchLine_IN.AssessableValueTransactionCurrency   =  reverseSign ? -purchLine_IN.AssessableValueTransactionCurrency : purchLine_IN.AssessableValueTransactionCurrency;
            purchLine_IN.AssessableValueAccountingCurrency    =  reverseSign ? -purchLine_IN.AssessableValueAccountingCurrency : purchLine_IN.AssessableValueAccountingCurrency;
            purchLine.packPurchLine_IN(purchLine_IN);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            PurchTable_RU purchTable_RU = purchTable.purchTable_RU();
            if (!purchTable_RU.AgreementHeaderExt_RU || AgreementHeaderExt_RU::findByDefaultDimension(purchLine.DefaultDimension).RecId != purchTable_RU.AgreementHeaderExt_RU )
            {
                purchLine.DefaultDimension = AgreementHeaderExt_RU::clearAgreementDimension(purchLine.DefaultDimension);
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCopiedLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>PurchLine</c> after the copy and creation.
    /// </summary>
    /// <param name = "_purchLine">A purchase order line that has been copied.</param>
    /// <param name = "_purchTable">The purchase order for the purchase order line.</param>
    public void updateCopiedLine(PurchLine _purchLine, PurchTable _purchTable)
    {
        purchLine = _purchLine;
        purchTable = _purchTable;
                
        this.updateBasedOnSource();
        this.createProjectCreditNoteSource();
        this.createAgreementLine();
        this.createForeignTradeRecord();
        this.copyMarkup();
        this.createOriginRecord();
        this.updateCountrySpecificData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjectCreditNoteSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>ProjCreditNoteSource</c> record.
    /// </summary>
    protected void createProjectCreditNoteSource()
    {
        if (projCreditNoteSourceRefRecId)
        {
            ProjCreditNoteSource projCreditNoteSource;
            projCreditNoteSource.clear();
            projCreditNoteSource.PurchLine = purchLine.RecId;
            projCreditNoteSource.ProjCreditNoteSource = projCreditNoteSourceRefRecId;
            projCreditNoteSource.insert();
            SysTransactionScopeCache::remove(classStr(PurchCopying), identifierStr(projCreditNoteSourceRefRecId));
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>createAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the agrement line.
    /// </summary>
    protected void createAgreementLine()
    {
        if (purchTable.MatchingAgreement)
        {
            purchLine.createAgreementLine(agreementLine, false);
            if (!purchLine.MatchingAgreementLine && agreementLine)
            {
                // Do not allow to copy lines that cannot release from the same agreement line as the source order line. Instead inform the user:
                // It is not possible to copy one or more of the selected purchase order lines. The purchase order lines that you are trying to copy are dependent on a purchase agreement. A copy of the purchase order lines would conflict with that purchase agreement.
                throw error("@SCM:PurchCopyingAgreementLineConflict");
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>copyMarkup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies markup after the copy and creation of the copied line.
    /// </summary>
    protected void copyMarkup()
    {
        if (copyMarkup)
        {
            Markup::copy(reverseSign, this.retrieveSource(), purchLine, false, '');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOriginRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>PurchLineOrigin</c> record after the copy and creation of the copied line.
    /// </summary>
    protected void createOriginRecord()
    {
        if (copyPrecisely)
        {
            // Insert the origin record
            if (this.retrieveSourceDocumentLineRecId() && SourceDocumentLine::find(this.retrieveSourceDocumentLineRecId()))
            {
                PurchLineOrigin purchLineOrigin;

                purchLineOrigin.OriginSourceDocumentLine = this.isOriginalSourceDocumentLineRequired() ? this.retrieveSourceDocumentLineRecId() : 0;
                purchLineOrigin.PurchLineInventTransId   = purchLine.InventTransId;
                purchLineOrigin.PurchLineDataAreaId      = purchLine.DataAreaId;
                purchLineOrigin.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createForeignTradeRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>PurchLineForeignTradeCategory</c> after the copy and creation of the copied line.
    /// </summary>
    protected void createForeignTradeRecord()
    {
        if (copyForeignTradeRecord)
        {
            purchLineForeignTradeCategory.initFromPurchLine(purchLine);
            purchLineForeignTradeCategory.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOriginalSourceDocumentLineRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the origin source document line link is required.
    /// </summary>
    /// <returns>true if the origin source document line should be linked; otherwise, false.</returns>
    protected boolean isOriginalSourceDocumentLineRequired()
    {
        // Stocked products or fixed assets do not need the link to regenerate distributions as distributions are read only.
        // Not stocked products that are not fixed assets can have distributions altered and thus need the link to the original source document line.
        return !purchLine.StockedProduct && !(purchLine.AssetId || purchLine.AssetGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCountrySpecificData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the country specific data after the creation of the copied line.
    /// </summary>
    protected void updateCountrySpecificData()
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
            && !(PurchTable::find(purchLine.PurchId).purchTable_W().CustomsImportOrder_IN)
            && TaxParameters::checkTaxParameters_IN()
            && copyMarkup)
        {
            PurchLine_IN purchLine_IN = purchLine.purchLine_IN();
            purchLine_IN.AssessableValueTransactionCurrency = purchLine.SalesPurchJournalLine::getMiscChargesAmountPlusLineAmount(purchLine.TableId, purchLine.RecId);
            purchLine.packPurchLine_IN(purchLine_IN);
            purchLine.update();
        }

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>