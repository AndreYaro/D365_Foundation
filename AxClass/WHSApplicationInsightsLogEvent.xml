<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSApplicationInsightsLogEvent</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal abstract class WHSApplicationInsightsLogEvent
{
    private WHSApplicationInsightsEventTelemetry eventTelemetry;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(Map _initialProperties)
    {
        this.initEventTelemetry();
        this.initFromSharedProperties();
        this.initInitialProperties(_initialProperties);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEventTelemetry</Name>
				<Source><![CDATA[
    private void initEventTelemetry()
    {
        str eventId = this.eventId();
        str name = this.name();

        eventTelemetry = WHSApplicationInsightsEventTelemetry::newFromEventIdName(eventId, name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSharedProperties</Name>
				<Source><![CDATA[
    private void initFromSharedProperties()
    {
        var sharedParametersContext = WHSApplicationInsightsActivitySharedParametersContext::instance();

        if (sharedParametersContext)
        {
            MapEnumerator sharedPropertiesEnumerator = sharedParametersContext.sharedPropertiesEnumerator();

            while (sharedPropertiesEnumerator.moveNext())
            {
                SysApplicationInsightsProperty property = sharedPropertiesEnumerator.currentValue();
                eventTelemetry.addProperty(property);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInitialProperties</Name>
				<Source><![CDATA[
    private void initInitialProperties(Map _initialProperties)
    {
        if (_initialProperties)
        {
            MapEnumerator initialPropertiesEnumerator = _initialProperties.getEnumerator();

            while (initialPropertiesEnumerator.moveNext())
            {
                SysApplicationInsightsProperty property = initialPropertiesEnumerator.currentValue();
                eventTelemetry.addProperty(property);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>eventId</Name>
				<Source><![CDATA[
    protected abstract str eventId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    protected abstract str name()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackEvent</Name>
				<Source><![CDATA[
    protected void trackEvent()
    {
        WHSApplicationInsightsTelemetryLogger::instance().trackEvent(eventTelemetry);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>