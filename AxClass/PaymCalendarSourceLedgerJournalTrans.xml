<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PaymCalendarSourceLedgerJournalTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PaymCalendarSourceLedgerJournalTrans</c> class provides an interface that is used to find
/// payment calendars when the source is the ledger journal transaction table.
/// </summary>
public class PaymCalendarSourceLedgerJournalTrans implements PaymCalendarIDerivationSource, PaymCalendarIBankAddress, PaymCalendarIDocumentAddress
{
    LedgerJournalTrans ledgerJournalTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBankPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the postal address associated to the bank account.
    /// </summary>
    /// <returns>
    /// The <c>LogisticsPostalAddress</c> record that represents the postal address.
    /// </returns>
    public LogisticsPostalAddress getBankPostalAddress()
    {
        CustBankAccount custBankAccount;
        VendBankAccount vendBankAccount;
        LogisticsPostalAddress logisticsPostalAddress;
        LogisticsLocationRecId locationRecId;

        if (this.parmModuleType() == PaymCalendarModuleType::Customer)
        {
            custBankAccount = CustBankAccount::findByCompany(ledgerJournalTrans.Company, ledgerJournalTrans.parmAccount(), ledgerJournalTrans.CustVendBankAccountId);
            locationRecId = custBankAccount.Location;
        }
        else
        {
            vendBankAccount = VendBankAccount::findByCompany(ledgerJournalTrans.Company, ledgerJournalTrans.parmAccount(), ledgerJournalTrans.CustVendBankAccountId);
            locationRecId = vendBankAccount.Location;
        }

        logisticsPostalAddress = LogisticsLocationEntity::location2PostalAddress(locationRecId);

        return logisticsPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the postal address associated to the document.
    /// </summary>
    /// <returns>
    /// The <c>LogisticsPostalAddress</c> record that represents the postal address.
    /// </returns>
    public LogisticsPostalAddress getDocumentPostalAddress()
    {
        LogisticsPostalAddress logisticsPostalAddress;

        logisticsPostalAddress = LogisticsPostalAddress::findRecId(ledgerJournalTrans.RemittanceAddress);

        return logisticsPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrimaryPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the postal address associated to the third-party entity.
    /// </summary>
    /// <returns>
    /// The <c>LogisticsPostalAddress</c> record that represents the postal address.
    /// </returns>
    public LogisticsPostalAddress getPrimaryPostalAddress()
    {
        CustTable custTable;
        VendTable vendTable;
        LogisticsPostalAddress logisticsPostalAddress;
        LedgerJournalAC accountNumber;

        accountNumber = LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(ledgerJournalTrans.LedgerDimension);

        if (ledgerJournalTrans.AccountType == LedgerJournalACType::Cust)
        {
            custTable = CustTable::findByCompany(this.parmPaymTermDataAreaId(), accountNumber);
            logisticsPostalAddress = custTable.postalAddress();
        }
        else
        {
            vendTable = VendTable::findByCompany(this.parmPaymTermDataAreaId(), accountNumber);
            logisticsPostalAddress = vendTable.postalAddress();
        }

        return logisticsPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    private void initialize(LedgerJournalTrans _ledgerJournalTrans)
    {
        ledgerJournalTrans = _ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModuleType</Name>
				<Source><![CDATA[
    public PaymCalendarModuleType parmModuleType()
    {
        return (ledgerJournalTrans.AccountType == LedgerJournalACType::Cust) ? PaymCalendarModuleType::Customer : PaymCalendarModuleType::Vendor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymMode</Name>
				<Source><![CDATA[
    public PaymMode parmPaymMode()
    {
        return ledgerJournalTrans.PaymMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymTermDataAreaId</Name>
				<Source><![CDATA[
    public DataAreaId parmPaymTermDataAreaId()
    {
        return ledgerJournalTrans.Company;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymTermId</Name>
				<Source><![CDATA[
    public PaymTermId parmPaymTermId()
    {
        return ledgerJournalTrans.Payment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the due date so that it falls on a business day per specified calendar source.
    /// </summary>
    /// <param name="_dueDate">
    /// The original due date.
    /// </param>
    /// <param name="_updatePolicy">
    /// A value that specifies the search direction when seeking the next valid business day.
    /// </param>
    /// <param name="_ledgerJournalTrans">
    /// The ledger journal transaction table buffer that specifies the calendar source.
    /// </param>
    /// <returns>
    /// The adjusted due date.
    /// </returns>
    /// <remarks>
    /// If no adjustment is needed, the original date is returned.
    /// </remarks>
    public static DueDate adjustDate(DueDate _dueDate, PaymentDueDateUpdatePolicy _updatePolicy, LedgerJournalTrans _ledgerJournalTrans)
    {
        PaymCalendarSourceLedgerJournalTrans calendarSource;
        PaymCalendarProcessor paymCalendarProcessor;
        DueDate adjustedDate;

        calendarSource = PaymCalendarSourceLedgerJournalTrans::newCalendarSource(_ledgerJournalTrans);
        paymCalendarProcessor = PaymCalendarProcessor::construct();
        adjustedDate = paymCalendarProcessor.adjustDate(_dueDate, _updatePolicy, calendarSource);

        return adjustedDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an instance of the <c>PaymCalendarSourceLedgerJournalTrans</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>PaymCalendarSourceLedgerJournalTrans</c> class.
    /// </returns>
    static private PaymCalendarSourceLedgerJournalTrans construct()
    {
        return new PaymCalendarSourceLedgerJournalTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustedDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the adjusted due date so that it falls on a business day per calendar rules.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The ledger journal transaction table buffer that specifies the due date and the calendar source.
    /// </param>
    /// <returns>
    /// An instance of the <c>PaymCalendarAdjustedDate</c> record which contains the adjusted due date
    /// together with the calendar and rule that was applied when adjusting the date.
    /// </returns>
    /// <remarks>
    /// If no adjustment is needed, the original date is returned. An empty record ID is returned for the
    /// payment calendar and calendar rule whenever a calendar is not found.
    /// </remarks>
    public static PaymCalendarAdjustedDate getAdjustedDate(LedgerJournalTrans _ledgerJournalTrans)
    {
        return PaymCalendarSourceLedgerJournalTrans::getAdjustedDatePrivate(_ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustedDateForAddressChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the adjusted due date so that it falls on a business day per calendar rules.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The ledger journal transaction table buffer that specifies the due date and the calendar source.
    /// </param>
    /// <param name="_paymCalendarModuleType">
    /// The module type to restrict the calendar rule by.
    /// </param>
    /// <returns>
    /// An instance of the <c>PaymCalendarAdjustedDate</c> record which contains the adjusted due date
    /// together with the calendar and rule that was applied when adjusting the date.
    /// </returns>
    /// <remarks>
    /// If no adjustment is needed, the original date is returned. An empty record ID is returned for the
    /// payment calendar and calendar rule whenever a calendar is not found.
    /// </remarks>
    public static PaymCalendarAdjustedDate getAdjustedDateForAddressChange(LedgerJournalTrans _ledgerJournalTrans, PaymCalendarModuleType _paymCalendarModuleType)
    {
        return PaymCalendarSourceLedgerJournalTrans::getAdjustedDateForAddressChgPrivate(_ledgerJournalTrans, _paymCalendarModuleType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustedDateForAddressChgPrivate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the adjusted due date so that it falls on a business day per calendar rules.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The ledger journal transaction table buffer that specifies the due date and the calendar source.
    /// </param>
    /// <param name="_paymCalendarModuleType">
    /// The module type to restrict the calendar rule by.
    /// </param>
    /// <returns>
    /// An instance of the <c>PaymCalendarAdjustedDate</c> record which contains the adjusted due date
    /// together with the calendar and rule that was applied when adjusting the date.
    /// </returns>
    private static PaymCalendarAdjustedDate getAdjustedDateForAddressChgPrivate(LedgerJournalTrans _ledgerJournalTrans, PaymCalendarModuleType _paymCalendarModuleType)
    {
        PaymTerm paymTerm;
        PaymCalendarSourceLedgerJournalTrans calendarSource;
        PaymCalendarProcessor paymCalendarProcessor;
        PaymentDueDateUpdatePolicy updatePolicy;
        PaymCalendarAdjustedDate paymCalendarAdjustedDate;

        paymTerm = PaymTerm::find(_ledgerJournalTrans.Payment);
        updatePolicy = (_paymCalendarModuleType == PaymCalendarModuleType::Customer) ? paymTerm.CustomerUpdateDueDate : paymTerm.VendorUpdateDueDate;

        if ((updatePolicy != PaymentDueDateUpdatePolicy::NoUpdate)
            && PaymCalendarRule::existActiveRuleForRuleType(
                _paymCalendarModuleType,
                PaymCalendarRuleType::ThirdPartyLocation))
        {
            calendarSource = PaymCalendarSourceLedgerJournalTrans::newCalendarSource(_ledgerJournalTrans);
            paymCalendarProcessor = PaymCalendarProcessor::construct();
            paymCalendarAdjustedDate = paymCalendarProcessor.getAdjustedDate(_ledgerJournalTrans.Due, updatePolicy, calendarSource);
        }
        else
        {
            paymCalendarAdjustedDate = PaymCalendarAdjustedDate::construct(_ledgerJournalTrans.Due);
        }

        return paymCalendarAdjustedDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustedDateForPaymentMethodChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the adjusted due date so that it falls on a business day per calendar rules.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The ledger journal transaction table buffer that specifies the due date and the calendar source.
    /// </param>
    /// <param name="_paymCalendarModuleType">
    /// The moduole type to restrict the calendar rule by.
    /// </param>
    /// <returns>
    /// An instance of <c>PaymCalendarAdjustedDate</c> which contains the adjusted due date together with
    /// the calendar and rule that was applied when adjusting the date.
    /// </returns>
    /// <remarks>
    /// If no adjustment is needed, the original date is returned. An empty record ID is returned for the
    /// payment calendar and calendar rule whenever a calendar is not found.
    /// </remarks>
    public static PaymCalendarAdjustedDate getAdjustedDateForPaymentMethodChange(LedgerJournalTrans _ledgerJournalTrans, PaymCalendarModuleType _paymCalendarModuleType)
    {
        return PaymCalendarSourceLedgerJournalTrans::getAdjustedDateForPayMethodChgPrivate(_ledgerJournalTrans, _paymCalendarModuleType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustedDateForPayMethodChgPrivate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the adjusted due date so that it falls on a business day per calendar rules.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The ledger journal transaction table buffer that specifies the due date and the calendar source.
    /// </param>
    /// <param name="_paymCalendarModuleType">
    /// The module type to restrict the calendar rule by.
    /// </param>
    /// <returns>
    /// An instance of the <c>PaymCalendarAdjustedDate</c> record which contains the adjusted due date
    /// together with the calendar and rule that was applied when adjusting the date.
    /// </returns>
    private static PaymCalendarAdjustedDate getAdjustedDateForPayMethodChgPrivate(LedgerJournalTrans _ledgerJournalTrans, PaymCalendarModuleType _paymCalendarModuleType)
    {
        PaymTerm paymTerm;
        PaymCalendarSourceLedgerJournalTrans calendarSource;
        PaymCalendarProcessor paymCalendarProcessor;
        PaymentDueDateUpdatePolicy updatePolicy;
        PaymCalendarAdjustedDate paymCalendarAdjustedDate;

        paymTerm = PaymTerm::find(_ledgerJournalTrans.Payment);
        updatePolicy = (_paymCalendarModuleType == PaymCalendarModuleType::Customer) ? paymTerm.CustomerUpdateDueDate : paymTerm.VendorUpdateDueDate;

        if ((updatePolicy != PaymentDueDateUpdatePolicy::NoUpdate)
            && PaymCalendarCriteriaRule::existForPaymMode(_paymCalendarModuleType, curExt()))
        {
            calendarSource = PaymCalendarSourceLedgerJournalTrans::newCalendarSource(_ledgerJournalTrans);
            paymCalendarProcessor = PaymCalendarProcessor::construct();
            paymCalendarAdjustedDate = paymCalendarProcessor.getAdjustedDate(_ledgerJournalTrans.Due, updatePolicy, calendarSource);
        }
        else
        {
            paymCalendarAdjustedDate = PaymCalendarAdjustedDate::construct(_ledgerJournalTrans.Due);
        }

        return paymCalendarAdjustedDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustedDatePrivate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the adjusted due date so that it falls on a business day per calendar rules.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The ledger journal transaction table buffer that specifies the due date and the calendar source.
    /// </param>
    /// <returns>
    /// An instance of the <c>PaymCalendarAdjustedDate</c> record which contains the adjusted due date
    /// together with the calendar and rule that was applied when adjusting the date.
    /// </returns>
    private static PaymCalendarAdjustedDate getAdjustedDatePrivate(LedgerJournalTrans _ledgerJournalTrans)
    {
        PaymTerm paymTerm;
        PaymCalendarSourceLedgerJournalTrans calendarSource;
        PaymCalendarProcessor paymCalendarProcessor;
        PaymentDueDateUpdatePolicy updatePolicy;
        PaymCalendarAdjustedDate paymCalendarAdjustedDate;

        paymTerm = PaymTerm::find(_ledgerJournalTrans.Payment);

        switch (_ledgerJournalTrans.AccountType)
        {
            case LedgerJournalACType::Cust:
                updatePolicy = paymTerm.CustomerUpdateDueDate;
                break;

            case LedgerJournalACType::Vend:
                updatePolicy = paymTerm.VendorUpdateDueDate;
                break;

            default:
                updatePolicy = PaymentDueDateUpdatePolicy::NoUpdate;
                break;
        }

        if (updatePolicy != PaymentDueDateUpdatePolicy::NoUpdate)
        {
            calendarSource = PaymCalendarSourceLedgerJournalTrans::newCalendarSource(_ledgerJournalTrans);
            paymCalendarProcessor = PaymCalendarProcessor::construct();
            paymCalendarAdjustedDate = paymCalendarProcessor.getAdjustedDate(_ledgerJournalTrans.Due, updatePolicy, calendarSource);
        }
        else
        {
            paymCalendarAdjustedDate = PaymCalendarAdjustedDate::construct(_ledgerJournalTrans.Due);
        }

        return paymCalendarAdjustedDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUpdatedDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates a due date that falls on a business day per specified calendar source.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The ledger journal transaction table buffer that specifies the date and calendar source.
    /// </param>
    /// <param name="_paymDayId">
    /// The ID of the payment day.
    /// </param>
    /// <returns>
    /// The due date.
    /// </returns>
    public static DueDate getUpdatedDueDate(LedgerJournalTrans _ledgerJournalTrans, PaymDayId _paymDayId)
    {
        PaymTerm paymTerm;
        PaymCalendarSourceLedgerJournalTrans calendarSource;
        PaymCalendarProcessor paymCalendarProcessor;
        PaymentDueDateUpdatePolicy updatePolicy;
        DueDate dueDate;

        paymTerm = PaymTerm::find(_ledgerJournalTrans.Payment);
        dueDate = paymTerm.due(_ledgerJournalTrans.Due, _paymDayId);

        if (isConfigurationkeyEnabled(configurationKeyNum(PaymCalendar)))
        {
            switch (_ledgerJournalTrans.AccountType)
            {
                case LedgerJournalACType::Cust:
                    updatePolicy = paymTerm.CustomerUpdateDueDate;
                    break;

                case LedgerJournalACType::Vend:
                    updatePolicy = paymTerm.VendorUpdateDueDate;
                    break;

                default:
                    updatePolicy = PaymentDueDateUpdatePolicy::NoUpdate;
                    break;
            }

            if (updatePolicy != PaymentDueDateUpdatePolicy::NoUpdate)
            {
                paymCalendarProcessor = PaymCalendarProcessor::construct();
                calendarSource = PaymCalendarSourceLedgerJournalTrans::newCalendarSource(_ledgerJournalTrans);
                dueDate = paymCalendarProcessor.adjustDate(dueDate, updatePolicy, calendarSource);
            }
        }

        return dueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCalendarSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an instance of the <c>PaymCalendarSourceLedgerJournalTrans</c> class.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// A reference to a populated <c>LedgerJournalTrans</c> record.
    /// </param>
    /// <returns>
    /// An instance of the <c>PaymCalendarSourceLedgerJournalTrans</c> class.
    /// </returns>
    public static PaymCalendarSourceLedgerJournalTrans newCalendarSource(LedgerJournalTrans _ledgerJournalTrans)
    {
        PaymCalendarSourceLedgerJournalTrans paymCalendarSourceLedgerJournalTrans;

        paymCalendarSourceLedgerJournalTrans = PaymCalendarSourceLedgerJournalTrans::construct();
        paymCalendarSourceLedgerJournalTrans.initialize(_ledgerJournalTrans);

        return paymCalendarSourceLedgerJournalTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>