<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesOrderCopyingContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Contract class for Sales Order copy operation specyfying all parameters of the copy.
/// </summary>
public class SalesOrderCopyingContract
    extends SalesCopyingContract
{
    SalesId         callingTableSalesId;
    NoYes           createCorrectionLine;
    NoYes           copyExchangeRate;
    NoYes           reverseSign;
    LineNum         startingLineNum;
    ReasonRefRecID  reasonTableRef;
    NoYes           taxAsPerOrginalInvoice_IN;
    CustInvoiceJour custInvoiceJournal;
    // <GIN>
    SalesReturnType_IN  salesReturnType;
    // </GIN>
    // <GTH>
    TaxUnrealizedSalesNoteFormat noteFormat_TH;
    // </GTH>

    #define.CurrentVersion(1)

    #localmacro.CurrentList
        callingTableSalesId,
        createCorrectionLine,
        copyExchangeRate,
        reverseSign,
        startingLineNum,
        reasonTableRef,
        // <GIN>
        taxAsPerOrginalInvoice_IN,
        salesReturnType,
        // </GIN>
        custInvoiceJournal
        // <GTH>
        ,noteFormat_TH
        // </GTH>
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallingTableSalesId</Name>
				<Source><![CDATA[
    public SalesId parmCallingTableSalesId(SalesId _callingTableSalesId = callingTableSalesId)
    {
        callingTableSalesId = _callingTableSalesId;
        return callingTableSalesId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopyExchangeRate</Name>
				<Source><![CDATA[
    public NoYes parmCopyExchangeRate(NoYes _copyExchangeRate = copyExchangeRate)
    {
        copyExchangeRate = _copyExchangeRate;
        return copyExchangeRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreateCorrectionLine</Name>
				<Source><![CDATA[
    public NoYes parmCreateCorrectionLine(NoYes _createCorrectionLine = createCorrectionLine)
    {
        createCorrectionLine = _createCorrectionLine;
        return createCorrectionLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustInvoiceJournal</Name>
				<Source><![CDATA[
    public CustInvoiceJour parmCustInvoiceJournal(CustInvoiceJour _custInvoiceJournal = custInvoiceJournal)
    {
        custInvoiceJournal = _custInvoiceJournal;
        return custInvoiceJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNoteFormat_TH</Name>
				<Source><![CDATA[
    public TaxUnrealizedSalesNoteFormat parmNoteFormat_TH(TaxUnrealizedSalesNoteFormat _noteFormat_TH = noteFormat_TH)
    {
        noteFormat_TH = _noteFormat_TH;
        return noteFormat_TH;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonTableRef</Name>
				<Source><![CDATA[
    public ReasonRefRecID parmReasonTableRef(ReasonRefRecID _reasonTableRef = reasonTableRef)
    {
        reasonTableRef = _reasonTableRef;
        return reasonTableRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReverseSign</Name>
				<Source><![CDATA[
    public NoYes parmReverseSign(NoYes _reverseSign = reverseSign)
    {
        reverseSign = _reverseSign;
        return reverseSign;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesReturnType_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>SalesReturnType_IN</c> Parameter.
    /// </summary>
    /// <param name="_salesReturnType">
    /// The Value to set.
    /// </param>
    /// <returns>
    /// The value of the <c>SalesReturnType_IN</c> Parameter.
    /// </returns>
    public SalesReturnType_IN parmSalesReturnType_IN(SalesReturnType_IN _salesReturnType = salesReturnType)
    {
        salesReturnType = _salesReturnType;

        return salesReturnType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartingLineNum</Name>
				<Source><![CDATA[
    public LineNum parmStartingLineNum(LineNum _startingLineNum = startingLineNum)
    {
        startingLineNum = _startingLineNum;
        return startingLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxAsPerOrginalInvoice_IN</Name>
				<Source><![CDATA[
    public NoYes parmTaxAsPerOrginalInvoice_IN(NoYes _taxAsPerOriginalInvoice_IN = taxAsPerOrginalInvoice_IN)
    {
        taxAsPerOrginalInvoice_IN = _taxAsPerOriginalInvoice_IN;
        return taxAsPerOrginalInvoice_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int version = RunBase::getVersion(_packedClass);
        container       base;
        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList, base] = _packedClass;
                return super(base);
            default :
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesOrderCopyingContract construct()
    {
        return new SalesOrderCopyingContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of a contract from a packed contract.
    /// </summary>
    /// <param name="_packedContract">
    /// The packed contract.
    /// </param>
    /// <param name="_isCreditNote">
    /// Determines if <c>SalesOrderCopyingContract</c> or <c>SalesCreditNoteCopyingContract</c> should be returned.
    /// </param>
    /// <returns>
    /// An instance of <c>SalesOrderCopyingContract</c> class.
    /// </returns>
    public static SalesOrderCopyingContract newContract(container _packedContract, boolean _isCreditNote)
    {
        SalesOrderCopyingContract contract = SalesOrderCopyingContract::newIsCreditNote(_isCreditNote);
        contract.unpack(_packedContract);
        return contract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newIsCreditNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of a contract.
    /// </summary>
    /// <param name="_isCreditNote">
    /// Determines if <c>SalesOrderCopyingContract</c> or <c>SalesCreditNoteCopyingContract</c> should be returned.
    /// </param>
    /// <returns>
    /// An instance of <c>SalesOrderCopyingContract</c> class.
    /// </returns>
    public static SalesOrderCopyingContract newIsCreditNote(boolean _isCreditNote)
    {
        SalesOrderCopyingContract contract;

        if (_isCreditNote)
        {
            contract = SalesCreditNoteCopyingContract::construct();
        }
        else
        {
            contract = SalesOrderCopyingContract::construct();
        }
        return contract;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>