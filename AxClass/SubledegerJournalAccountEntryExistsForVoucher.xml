<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledegerJournalAccountEntryExistsForVoucher</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// Validates the accounting distribution data for the document to make sure the data is valid and we do not have erroneous entry for the document i.e. the allocation factor is not equal to 1
/// </summary>
[ExportMetadataAttribute(classstr(SubledegerJournalAccountEntryExistsForVoucher), identifierStr(''))]
[ExportMetadataAttribute(identifierStr('SourceDocumentDataConsistencyValidators'), identifierStr(''))]
[ExportAttribute('Microsoft.Dynamics.AX.Application.SubledgerJournalizerDocumentValidationIProvider')]
internal final class SubledegerJournalAccountEntryExistsForVoucher implements SubledgerJournalizerDocumentValidationIProvider
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the voucher contains line if the accounting is required and the voucher was created
    /// </summary>
    /// <param name = "_accountingEvent">The accounting event for the journalization task using source document accounting processor</param>
    /// <param name = "_voucher">The voucher used for the posting to ledger; if no accounting is generated then this will be blank</param>
    /// <param name = "_sourceDocumentLineSubmittedForProcessing">All the source document lines that are submitted to source document accounting processor</param>
    /// <param name = "_accountingDistributionTmpForValidation">Accounting distribution detail for the document submitted for processing</param>
    /// <param name = "_subledgerJournalAccountEntryTmpForValidation">Detail accounting of the voucher that is getting posted</param>
    [Hookable(false)]
    void validateDocument(
        AccountingEvent _accountingEvent,
        Voucher _voucher,
        SourceDocumentLineRecIdTmp _sourceDocumentLineSubmittedForProcessing,
        AccountingDistributionTmpForValidation _accountingDistributionTmpForValidation,
        SubledgerJournalAccountEntryTmpForValidation _subledgerJournalAccountEntryTmpForValidation)
    {
        using (SysInstrumentationActivityContext activityContext = SourceDocumentAccountingFrameworkInstrumentationLogger::getActivityContext(
            SourceDocumentInstrumentationConstants::SourceDocumentValidationFrameworkNamespace,
            classStr(SubledegerJournalAccountEntryExistsForVoucher),
            classStr(SubledegerJournalAccountEntryExistsForVoucher)))
        {
            SubledgerJournalEntry subledgerJournalEntry;
            SubledgerJournalAccountEntry subledgerLedgerJournalAccountEntry;

            if (_accountingEvent.IsAccountingRequired == NoYes::Yes)
            {
                //check to ensure that accounting entry is generated when we have a voucher number created and accounting is required for document
                select RecId from subledgerJournalEntry
                    where subledgerJournalEntry.AccountingEvent == _accountingEvent.RecId &&
                        subledgerJournalEntry.Voucher == _voucher
                notexists join subledgerLedgerJournalAccountEntry
                    where subledgerLedgerJournalAccountEntry.SubledgerJournalEntry == subledgerJournalEntry.RecId;
    
                if (subledgerJournalEntry.RecId != 0)
                {
                    //log telemetry that the voucher is missing accounting
                    activityContext.addCustomProperty('ValidationResult', 'Fail');

                    activityContext.addCustomProperty(
                        'Message', SourceDocumentInstrumentationConstants::ErrorWhileValidatingAccountingEntriesExistsForDocument);

                    activityContext.addCustomProperty(
                        'SourceDocumentHeader', int642Str(_accountingEvent.SourceDocumentHeader));

                    activityContext.addCustomProperty(
                        'AccountingEvent', int642Str(_accountingEvent.RecId));

                    throw error("@SourceDocumentAccountingFramework:ErrorMessageForValidatingAccountingExistForVoucherDuringJournalization");
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>