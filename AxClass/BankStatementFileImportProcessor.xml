<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankStatementFileImportProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankStatementFileImportProcessor</c> class will split the bank file into separate files for
/// each statement.
/// </summary>
public class BankStatementFileImportProcessor
{
    protected int readChar;
    protected str priorString;

    private const str XMLFileExtension = '.xml';
    private const str StringEmpty = '';
    private const str BankStatementDocumentEntityElement = '<BankStatementDocumentEntity>';
    private const str BankStatementDocumentEntityEndElement = '</BankStatementDocumentEntity>';
    private const str BankStatementEntityElement = '<BankStatementEntity>';
    private const str BankStatementEntityEndElement = '</BankStatementEntity>';
    private const str DocumentElement = '<Document>';
    private const str DocumentEndElement = '</Document>';
    private const str SenderNameElement = '<SenderName>';
    private const str SenderNameEndElement = '</SenderName>';
    private const str AccountIdOtherIdElement = '<AccountIdOtherId>';
    private const str AccountIdOtherIdEndElement = '</AccountIdOtherId>';
    private const str IbanElement = '<IBAN>';
    private const str IbanEndElement = '</IBAN>';
    private const str SwiftNumElement = '<SwiftNo>';
    private const str SwiftNumEndElement = '</SwiftNo>';

    private System.IO.StreamReader streamReader = null;
    private System.IO.StreamWriter streamWriter = null;
    private List bankStatementsByBankAccountTableAndFileId = null;
    private CompanyBankAccountId singleBankAccount;
    private List bankStatementBankAccountErrors;
    private List selectedBankAccountDifferentBankAccountErrors;
    private int readLength;
    private int totalStatementNumber;
    private System.Char[] buffer;
    private boolean isFirstStatementFound;
    private boolean isAccountIdOtherIdFound;
    private boolean isIbanFound;
    private boolean isSwiftNumFound;
    private boolean isBankAccountTableFound;
    private boolean hasBankAccountTableBeenFound;
    private str headerString;
    private str documentEntityString;
    private str currentString;
    private str statementFilePath;
    private str statementFileNameOnly;
    private str statementFilePathAndFileName;
    private BankStatementNameText senderName;
    private BankStatementIdentificationText accountIdOtherId;
    private BankIBAN iban;
    private SWIFTNo swiftNum;
    private BankAccountTable bankAccountTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Splits the bank file into separate files for each statement.
    /// </summary>
    /// <param name = "_filePath">
    /// The statement file path.
    /// </param>
    /// <param name = "_singleBankAccount">
    /// A bank account used to identify the statements that will be processed; optional.
    /// </param>
    /// <returns>
    /// The <c>BankStatementFileImportProcessorResult</c> identifies the total statements uploaded, bank accounts and
    /// related upload statement files along with any errors.
    /// </returns>
    public BankStatementFileImportProcessorResult process(SharedServiceUnitURL _filePath, CompanyBankAccountId _singleBankAccount = '')
    {
        try
        {
            this.initalize(_filePath, _singleBankAccount);

            while (streamReader.Peek() >= 0)
            {
                this.readBuffer();

                this.processBankStatementDocument();

                str searchString = this.determineSearchString();

                this.processStatementElements(searchString);

                if (this.isEndOfFile(searchString))
                {
                    this.processEndOfFile(searchString);
                    break;
                }

                if (this.isNextStatement(searchString))
                {
                    this.intializeNextStatement();
                }

                if (this.isEndOfStatement(searchString))
                {
                    boolean isEndOfFile = this.processEndOfStatement(searchString);
                    if (isEndOfFile)
                    {
                        break;
                    }
                    else
                    {
                        continue;
                    }
                }

                this.writeToBuffer();
            }
        }
        finally
        {
            this.closeStreamWriter();
            this.deleteStatementFile();

            this.closeStreamReader();
            DMFStagingWriter::deleteFileOnServer(_filePath);
        }

        return this.processResult();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initalize</Name>
				<Source><![CDATA[
    private void initalize(SharedServiceUnitURL _filePath, CompanyBankAccountId _singleBankAccount)
    {
        this.initializeSingleBankAccount(_singleBankAccount);
        this.initializeBankStatementBankAccountErrors();
        this.initializeSelectedBankAccountDifferentBankAccountErrors();
        this.initializePath();
        this.initializeReadCharacters();
        this.initializeStatementElements();
        this.initializeBankStatementsBankAccountAndFileId();
        this.initializeStreamReader(_filePath);
        this.initializeFirstStatement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSingleBankAccount</Name>
				<Source><![CDATA[
    private void initializeSingleBankAccount(CompanyBankAccountId _singleBankAccount)
    {
        this.singleBankAccount = _singleBankAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeBankStatementBankAccountErrors</Name>
				<Source><![CDATA[
    private void initializeBankStatementBankAccountErrors()
    {
        bankStatementBankAccountErrors = new List(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSelectedBankAccountDifferentBankAccountErrors</Name>
				<Source><![CDATA[
    private void initializeSelectedBankAccountDifferentBankAccountErrors()
    {
        selectedBankAccountDifferentBankAccountErrors = new List(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePath</Name>
				<Source><![CDATA[
    private void initializePath()
    {
        if (!isFlightEnabled('DMFEnableSharePathReplacementV2'))
        {  
            statementFilePath = DMFParameters::find().SharedFolderPath;
        }
        else
        {
            // this path used to go to the dixf file share
            // Due to new security requirements dixf file share will no longer be mounted
            // File io operations will no longer work with paths to the dixf share
            // so changing this path to be to the temp folder instead
            // since file operations will work for files added to temp folder
            statementFilePath = System.IO.Path::GetTempPath();
        }

        if (!strEndsWith(statementFilePath, @'\'))
        {
            statementFilePath = statementFilePath + @'\';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeReadCharacters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes number of characters that are read into memory as the file is processed.
    /// </summary>
    /// <remarks>
    /// The system default should not be overridden or changed.  It was determined based on length of file tags and speed.
    /// This method is protected to allow test overrides for variations within possible tolerances to prove
    /// the statement files are separately correctly.
    /// </remarks>
    protected void initializeReadCharacters()
    {
        readChar = 75;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeStatementElements</Name>
				<Source><![CDATA[
    private void initializeStatementElements()
    {
        this.accountIdOtherId = StringEmpty;
        this.iban = StringEmpty;
        this.swiftNum = StringEmpty;
        this.bankAccountTable = null;

        isAccountIdOtherIdFound = false;
        isIbanFound = false;
        isSwiftNumFound = false;
        isBankAccountTableFound = false;
        hasBankAccountTableBeenFound = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeBankStatementsBankAccountAndFileId</Name>
				<Source><![CDATA[
    private void initializeBankStatementsBankAccountAndFileId()
    {
        bankStatementsByBankAccountTableAndFileId = new List(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeStreamReader</Name>
				<Source><![CDATA[
    private void initializeStreamReader(SharedServiceUnitURL _filePath)
    {
        streamReader = new System.IO.StreamReader(_filePath);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFirstStatement</Name>
				<Source><![CDATA[
    private void initializeFirstStatement()
    {
        this.generateFileNameWithPath();
        streamWriter = new System.IO.StreamWriter(statementFilePathAndFileName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>readBuffer</Name>
				<Source><![CDATA[
    private void readBuffer()
    {
        buffer = new System.Char[readChar]();
        readLength = streamReader.Read(buffer, 0, readChar);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processBankStatementDocument</Name>
				<Source><![CDATA[
    private void processBankStatementDocument()
    {
        if (!isFirstStatementFound)
        {
            documentEntityString = documentEntityString + this.convertBufferToString(buffer);

            if (Global::strContains(documentEntityString, BankStatementEntityElement))
            {
                headerString = this.findHeaderString(documentEntityString);
                documentEntityString = this.findDocumentEntityString(documentEntityString);
                senderName = this.findElementValue(documentEntityString, SenderNameElement, SenderNameEndElement);

                isFirstStatementFound = true;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findHeaderString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the XML header.
    /// </summary>
    /// <param name = "_searchString">The search string.</param>
    /// <returns>
    /// The XML header.
    /// </returns>
    /// <remarks>
    /// The system implementation should not be overridden or changed.  This method is protected to allow test overrides.
    /// </remarks>
    protected str findHeaderString(str _searchString)
    {
        int documentOffset = strScan(_searchString, DocumentElement, 0, strLen(_searchString));
        str xmlHeader = subStr(_searchString, 0, documentOffset - 1);

        return xmlHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDocumentEntityString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the document entity string.
    /// </summary>
    /// <param name = "_searchString">The search string.</param>
    /// <returns>
    /// The document entity beging element and the child elements excluding bank statements.
    /// </returns>
    /// <remarks>
    /// The system implementation should not be overridden or changed.  This method is protected to allow test overrides.
    /// </remarks>
    protected str findDocumentEntityString(str _searchString)
    {
        int bankStatementDocumentEntityOffset = strScan(_searchString, BankStatementDocumentEntityElement, 0, strLen(_searchString));
        int bankStatementEntityOffset = strScan(_searchString, BankStatementEntityElement, 0, strLen(_searchString));
        str documentEntity = subStr(_searchString, bankStatementDocumentEntityOffset, bankStatementEntityOffset - bankStatementDocumentEntityOffset);

        return documentEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findElementValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds an element value.
    /// </summary>
    /// <param name = "_searchString">The search string.</param>
    /// <param name = "_elementName">The element name.</param>
    /// <param name = "_endElementName">The end element name.</param>
    /// <returns>
    /// The element value.
    /// </returns>
    /// <remarks>
    /// The system implementation should not be overridden or changed.  This method is protected to allow test overrides.
    /// </remarks>
    protected str findElementValue(str _searchString, str _elementName, str _endElementName)
    {
        str elementValue;

        int elementNameOffset = strScan(_searchString, _elementName, 0, strLen(_searchString));
        if (elementNameOffset > 0)
        {
            int elementNameElementLength = strLen(_elementName);
            int elementNameEndOffset = strScan(_searchString, _endElementName, 0, strLen(_searchString));
            int elementNameValueStart = elementNameOffset + elementNameElementLength;
            int elementNameValueLength = elementNameEndOffset - elementNameOffset - elementNameElementLength;
            if (elementNameValueLength > 0)
            {
                elementValue = subStr(_searchString, elementNameValueStart, elementNameValueLength);
            }
        }

        return elementValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineSearchString</Name>
				<Source><![CDATA[
    private str determineSearchString()
    {
        priorString = currentString;
        currentString = this.convertBufferToString(buffer);
        str searchString = priorString + currentString;

        return searchString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processStatementElements</Name>
				<Source><![CDATA[
    private void processStatementElements(str _searchString)
    {
        this.findStatementElements(_searchString);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findStatementElements</Name>
				<Source><![CDATA[
    private void findStatementElements(str _searchString)
    {
        this.findAccountIdOtherId(_searchString);
        this.findIban(_searchString);
        this.findSwiftNum(_searchString);

        if (this.areAllStatementElementsFound() && !hasBankAccountTableBeenFound)
        {
            this.findBankAccountTable();
            hasBankAccountTableBeenFound = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAccountIdOtherId</Name>
				<Source><![CDATA[
    private void findAccountIdOtherId(str _searchString)
    {
        if (!this.isAccountIdOtherIdFound && this.doesElementExist(_searchString, AccountIdOtherIdEndElement))
        {
            this.accountIdOtherId = this.findElementValue(_searchString, AccountIdOtherIdElement, AccountIdOtherIdEndElement);
            this.isAccountIdOtherIdFound = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findIban</Name>
				<Source><![CDATA[
    private void findIban(str _searchString)
    {
        if (!this.isIbanFound && this.doesElementExist(_searchString, IbanEndElement))
        {
            this.iban = this.findElementValue(_searchString, IbanElement, IbanEndElement);
            this.isIbanFound = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSwiftNum</Name>
				<Source><![CDATA[
    private void findSwiftNum(str _searchString)
    {
        if (!this.isSwiftNumFound && this.doesElementExist(_searchString, SwiftNumEndElement))
        {
            this.swiftNum = this.findElementValue(_searchString, SwiftNumElement, SwiftNumEndElement);
            this.isSwiftNumFound = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesElementExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if an element exists.
    /// </summary>
    /// <param name = "_searchString">The search string.</param>
    /// <param name = "_elementName">The element name.</param>
    /// <returns>
    /// true when the element exists in the seach string; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The system implementation should not be overridden or changed.  This method is protected to allow test overrides.
    /// </remarks>
    protected boolean doesElementExist(str _searchString, str _elementName)
    {
        boolean doesElementExist = false;

        int elementNameOffset = strScan(_searchString, _elementName, 0, strLen(_searchString));
        if (elementNameOffset > 0)
        {
            doesElementExist = true;
        }

        return doesElementExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>areAllStatementElementsFound</Name>
				<Source><![CDATA[
    private boolean areAllStatementElementsFound()
    {
        boolean areAllStatementElementsFound = false;

        if (this.isAccountIdOtherIdFound
            && this.isIbanFound
            && this.isSwiftNumFound)
        {
            areAllStatementElementsFound = true;
        }

        return areAllStatementElementsFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBankAccountTable</Name>
				<Source><![CDATA[
    private void findBankAccountTable()
    {
        if (!isBankAccountTableFound)
        {
            BankStmtISOPartyIdentification bankStmtISOPartyIdentification;
            bankStmtISOPartyIdentification.Name = this.senderName;

            BankStmtISOAccountStatement bankStmtISOAccountStatement;
            bankStmtISOAccountStatement.AccountIdOtherId = this.accountIdOtherId;
            bankStmtISOAccountStatement.IBAN = this.iban;
            bankStmtISOAccountStatement.SwiftNo = this.swiftNum;

            BankStatementBankAccountIdentify bankAccountIdentify = BankStatementBankAccountIdentify::construct();
            bankAccountTable = bankAccountIdentify.identifyBankAccountWithSenderStmt(bankStmtISOAccountStatement, bankStmtISOPartyIdentification);

            isBankAccountTableFound = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEndOfFile</Name>
				<Source><![CDATA[
    private boolean isEndOfFile(str _searchString)
    {
        boolean isEndOfFile = false;

        if (Global::strContains(_searchString, DocumentEndElement))
        {
            isEndOfFile = true;
        }

        return isEndOfFile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processEndOfFile</Name>
				<Source><![CDATA[
    private void processEndOfFile(str _searchString)
    {
        if (!this.isEndOfStatementProcessed())
        {
            this.processEndOfStatement(_searchString);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEndOfStatementProcessed</Name>
				<Source><![CDATA[
    private boolean isEndOfStatementProcessed()
    {
        boolean isEndOfStatementProcessed = false;

        if (this.streamWriter == null)
        {
            isEndOfStatementProcessed = true;
        }

        return isEndOfStatementProcessed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processEndOfStatement</Name>
				<Source><![CDATA[
    private boolean processEndOfStatement(str _searchString)
    {
        boolean isEndOfFile = false;

        str restOfCurrentStatement = this.determineRestOfCurrentStatement(_searchString);
        this.writeEndOfStatment(restOfCurrentStatement);

        this.uploadStatementFile();

        str nextStatement = this.determineNextStatement(_searchString);
        if (Global::strContains(nextStatement, DocumentEndElement))
        {
            isEndOfFile = true;
        }
        else
        {
            priorString = StringEmpty;
            currentString = nextStatement;
        }

        return isEndOfFile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineRestOfCurrentStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the rest of the current statement.
    /// </summary>
    /// <param name = "_searchString">The rest of the current statement.</param>
    /// <returns>
    /// The rest of the current statement.
    /// </returns>
    /// <remarks>
    /// The system implementation should not be overridden or changed.  This method is protected to allow test overrides.
    /// </remarks>
    protected str determineRestOfCurrentStatement(str _searchString)
    {
        int bankStatementEntityEndOffset = strScan(_searchString, BankStatementEntityEndElement, 0, strLen(_searchString));

        str restOfCurrentStatement;

        if (bankStatementEntityEndOffset == strLen(priorString))
        {
            restOfCurrentStatement = subStr(BankStatementEntityEndElement, 2, strLen(BankStatementEntityEndElement));
        }
        else
        {
            if (bankStatementEntityEndOffset > strLen(priorString))
            {
                restOfCurrentStatement = subStr(_searchString, strLen(priorString) + 1, bankStatementEntityEndOffset - strLen(priorString) - 1);
                restOfCurrentStatement = restOfCurrentStatement + BankStatementEntityEndElement;
            }
            else
            {
                int bankStatementEntityEndElementWrittenLength = strLen(priorString) - bankStatementEntityEndOffset;
                restOfCurrentStatement = subStr(BankStatementEntityEndElement, bankStatementEntityEndElementWrittenLength + 2, strLen(BankStatementEntityEndElement) - bankStatementEntityEndElementWrittenLength);
            }
        }

        return restOfCurrentStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineNextStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the next statement.
    /// </summary>
    /// <param name = "_searchString">The search string.</param>
    /// <returns>
    /// The portion of the next statement.
    /// </returns>
    /// <remarks>
    /// The system implementation should not be overridden or changed.  This method is protected to allow test overrides.
    /// </remarks>
    protected str determineNextStatement(str _searchString)
    {
        int bankStatementEntityEndOffset = strScan(_searchString, BankStatementEntityEndElement, 0, strLen(_searchString));

        str nextStatement = subStr(_searchString,
            bankStatementEntityEndOffset + strLen(BankStatementEntityEndElement),
            strLen(_searchString) - bankStatementEntityEndOffset - strLen(BankStatementEntityEndElement) + 1);

        return nextStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>uploadStatementFile</Name>
				<Source><![CDATA[
    private void uploadStatementFile()
    {
        if (strLen(statementFileNameOnly) > 0 && strLen(statementFilePathAndFileName) > 0 )
        {
            SharedServiceUnitFileID fileId = DataFileImportExportUtils::reUploadFileFromStream(this.statementFilePathAndFileName, this.statementFileNameOnly);

            BankStatementUploadData data = new BankStatementUploadData();
            data.parmBankAccountTable(this.bankAccountTable.data());
            data.parmFileId(fileId);

            bankStatementsByBankAccountTableAndFileId.addEnd(data);
        }

        this.deleteStatementFile();

        this.statementFileNameOnly = StringEmpty;
        this.statementFilePathAndFileName = StringEmpty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeEndOfStatment</Name>
				<Source><![CDATA[
    private void writeEndOfStatment(str _restOfCurrentStatement)
    {
        streamWriter.Write(_restOfCurrentStatement);
        streamWriter.Write(BankStatementDocumentEntityEndElement);
        streamWriter.Write(DocumentEndElement);
        streamWriter.Flush();
        this.closeStreamWriter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEndOfStatement</Name>
				<Source><![CDATA[
    private boolean isEndOfStatement(str _searchString)
    {
        return Global::strContains(_searchString, BankStatementEntityEndElement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNextStatement</Name>
				<Source><![CDATA[
    private boolean isNextStatement(str _searchString)
    {
        boolean isNextStatement = false;

        if (streamWriter == null && Global::strContains(_searchString, BankStatementEntityElement))
        {
            isNextStatement = true;
        }
        return isNextStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeToBuffer</Name>
				<Source><![CDATA[
    private void writeToBuffer()
    {
        if (readLength == readChar)
        {
            streamWriter.Write(buffer);
        }
        else
        {
            str bufferString = this.convertBufferToString(buffer);

            str bufferSubString = subStr(bufferString, 0, readLength);
            streamWriter.Write(bufferSubString);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertBufferToString</Name>
				<Source><![CDATA[
    private str convertBufferToString(System.Char[] _buffer)
    {
        str ret;

        System.String s = new System.String(_buffer);
        ret = s;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>intializeNextStatement</Name>
				<Source><![CDATA[
    private void intializeNextStatement()
    {
        this.generateFileNameWithPath();
        streamWriter = new System.IO.StreamWriter(statementFilePathAndFileName);
        streamWriter.Write(headerString);
        streamWriter.Write(DocumentElement);
        streamWriter.Write(documentEntityString);
        streamWriter.Write(priorString);

        this.initializeStatementElements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateFileNameWithPath</Name>
				<Source><![CDATA[
    private void generateFileNameWithPath()
    {
        this.generateFileName();
        statementFilePathAndFileName =  statementFilePath + statementFileNameOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateFileName</Name>
				<Source><![CDATA[
    private void generateFileName()
    {
        statementFileNameOnly = guid2Str(newGuid()) + XMLFileExtension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteStatementFile</Name>
				<Source><![CDATA[
    private void deleteStatementFile()
    {
        if (this.statementFilePathAndFileName)
        {
            DMFStagingWriter::deleteFileOnServer(this.statementFilePathAndFileName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeStreamWriter</Name>
				<Source><![CDATA[
    private void closeStreamWriter()
    {
        if (streamWriter != null)
        {
            streamWriter.Close();
            streamWriter = null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeStreamReader</Name>
				<Source><![CDATA[
    private void closeStreamReader()
    {
        if (streamReader != null)
        {
            streamReader.Close();
            streamReader = null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processResult</Name>
				<Source><![CDATA[
    private BankStatementFileImportProcessorResult processResult()
    {
        BankStatementFileImportProcessorResult result = new BankStatementFileImportProcessorResult();

        result.parmBankStatementsByBankAccountTableAndFileId(bankStatementsByBankAccountTableAndFileId);

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>