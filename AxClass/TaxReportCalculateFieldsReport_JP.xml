<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportCalculateFieldsReport_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class TaxReportCalculateFieldsReport_JP extends TaxReportCalculateFieldsReportBase_JP
{
    private TaxReportDataLayout_JP appendix1DataLayout;
    private TaxReportDataLayout_JP appendix2DataLayout;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeTaxReportItems</Name>
				<Source><![CDATA[
    protected LedgerConsumptionTaxReportTrans_JP initializeTaxReportItems()
    {
        LedgerConsumptionTaxReportTrans_JP taxReportTrans = super();

        taxReportTrans.IndividualMethod = calcMethod == CalcMethod_JP::IndividualMethod;
        taxReportTrans.LumpsumMethod = calcMethod == CalcMethod_JP::LumpsumMethod;
        taxReportTrans.CalcMethod = calcMethod;

        TaxJurisdiction taxJurisdiction;

        select firstonly TaxJurisdictionName from taxJurisdiction
                where taxJurisdiction.TaxPeriod == taxPeriod;

        if (taxJurisdiction)
        {
            taxReportTrans.TaxationOfficeName = taxJurisdiction.TaxJurisdictionName;
        }

        taxReportTrans.AccountingPersonnel = companyInfo.AccountingPersonnel_JP;
        taxReportTrans.NameOfTaxAccountant = companyInfo.AccountingPersonnel_JP;
        taxReportTrans.CompanyRepresentative = companyInfo.CompanyRepresentative_JP;

        LogisticsPostalAddress postalAddress = companyInfo.postalAddress();
        taxReportTrans.RegistrationNumber = TaxRegistration::getTaxRegistrationNumber_JP(postalAddress.Location, postalAddress.CountryRegionId);

        return taxReportTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTaxReportLine</Name>
				<Source><![CDATA[
    protected void calculateTaxReportLine(LedgerConsumptionTaxReportTrans_JP _taxReportTrans)
    {
        this.getAppendix2Transactions(appendix2DataLayout);
        this.getAppendix1Transactions(appendix1DataLayout);

        _taxReportTrans.RatioOfTaxableSales = appendix2Trans10.RatioOfTaxableSales;
        _taxReportTrans.ReportItem1 = appendix1Trans3.CalcItem1 + appendix1Trans5.CalcItem1 + appendix1Trans81.CalcItem1 + appendix1Trans82.CalcItem1 + appendix1Trans10.CalcItem1;
        _taxReportTrans.ReportItem2 = appendix1Trans3.CalcItem2 + appendix1Trans5.CalcItem2 + appendix1Trans81.CalcItem2 + appendix1Trans82.CalcItem2 + appendix1Trans10.CalcItem2;
        _taxReportTrans.ReportItem3 = appendix1Trans3.CalcItem3 + appendix1Trans5.CalcItem3 + appendix1Trans81.CalcItem3 + appendix1Trans82.CalcItem3 + appendix1Trans10.CalcItem3;
        _taxReportTrans.ReportItem4 = appendix1Trans3.CalcItem4 + appendix1Trans5.CalcItem4 + appendix1Trans81.CalcItem4 + appendix1Trans82.CalcItem4 + appendix1Trans10.CalcItem4;
        _taxReportTrans.ReportItem5 = appendix1Trans3.CalcItem5 + appendix1Trans5.CalcItem5 + appendix1Trans81.CalcItem5 + appendix1Trans82.CalcItem5 + appendix1Trans10.CalcItem5;
        _taxReportTrans.ReportItem6 = appendix1Trans3.CalcItem6 + appendix1Trans5.CalcItem6 + appendix1Trans81.CalcItem6 + appendix1Trans82.CalcItem6 + appendix1Trans10.CalcItem6;
        _taxReportTrans.ReportItem7 = _taxReportTrans.ReportItem4 + _taxReportTrans.ReportItem5 + _taxReportTrans.ReportItem6;
        _taxReportTrans.ReportItem8 = max(0, _taxReportTrans.ReportItem7 - _taxReportTrans.ReportItem2 - _taxReportTrans.ReportItem3);
        _taxReportTrans.ReportItem9 = max(0, _taxReportTrans.ReportItem2 + _taxReportTrans.ReportItem3 - _taxReportTrans.ReportItem7);
        _taxReportTrans.ReportItem11 = max(0, _taxReportTrans.ReportItem9 - _taxReportTrans.ReportItem10);
        _taxReportTrans.ReportItem12 = max(0, _taxReportTrans.ReportItem10 - _taxReportTrans.ReportItem9);
        _taxReportTrans.ReportItem15 = appendix2Trans3.CalcItem4 + appendix2Trans5.CalcItem4 + appendix2Trans81.CalcItem4 + appendix2Trans82.CalcItem4 + appendix2Trans10.CalcItem4;
        _taxReportTrans.ReportItem16 = appendix2Trans3.CalcItem7 + appendix2Trans5.CalcItem7 + appendix2Trans81.CalcItem7 + appendix2Trans82.CalcItem7 + appendix2Trans10.CalcItem7;
        _taxReportTrans.ReportItem17 = max(0, -appendix1Trans5.CalcItem13 - appendix1Trans81.CalcItem13 - appendix1Trans10.CalcItem13);
        _taxReportTrans.ReportItem18 = max(0, appendix1Trans5.CalcItem13 + appendix1Trans81.CalcItem13 + appendix1Trans10.CalcItem13);
        _taxReportTrans.ReportItem19 = max(0, -appendix1Trans5.CalcItem16 - appendix1Trans81.CalcItem16 - appendix1Trans10.CalcItem16);
        _taxReportTrans.ReportItem20 = max(0, appendix1Trans5.CalcItem16 + appendix1Trans81.CalcItem16 + appendix1Trans10.CalcItem16);
        _taxReportTrans.ReportItem22 = max(0, _taxReportTrans.ReportItem20 - _taxReportTrans.ReportItem21);
        _taxReportTrans.ReportItem23 = max(0, _taxReportTrans.ReportItem21 - _taxReportTrans.ReportItem20);
        _taxReportTrans.ReportItem26 = _taxReportTrans.ReportItem11 + _taxReportTrans.ReportItem22 - _taxReportTrans.ReportItem8 - _taxReportTrans.ReportItem12 - _taxReportTrans.ReportItem19 - _taxReportTrans.ReportItem23;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    internal static TaxReportCalculateFieldsReport_JP newFromParameters(
        TaxPeriod _taxPeriod,
        FromDate _fromDate,
        ToDate _toDate,
        TypeOfDeclaration_JP _typeOfDeclaration,
        boolean _amendment,
        CalcMethod_JP _calcMethod,
        TaxReportDataLayout_JP _dataLayout,
        TaxReportDataLayout_JP _appendix1DataLayout,
        TaxReportDataLayout_JP _appendix2DataLayout)
    {
        TaxReportCalculateFieldsReport_JP instance = new TaxReportCalculateFieldsReport_JP();

        instance.taxPeriod = _taxPeriod;
        instance.fromDate = _fromDate;
        instance.toDate = _toDate;
        instance.typeOfDeclaration = _typeOfDeclaration;
        instance.amendment = _amendment;
        instance.calcMethod = _calcMethod;
        instance.dataLayout = _dataLayout;
        instance.appendix1DataLayout = _appendix1DataLayout;
        instance.appendix2DataLayout = _appendix2DataLayout;
        
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    internal static void calculate(
        TaxPeriod _taxPeriod,
        FromDate _fromDate,
        ToDate _toDate,
        TypeOfDeclaration_JP _typeOfDeclaration,
        boolean _amendment,
        CalcMethod_JP _calcMethod,
        TaxReportDataLayout_JP _dataLayout,
        TaxReportDataLayout_JP _appendix1DataLayout,
        TaxReportDataLayout_JP _appendix2DataLayout)
    {
        TaxReportCalculateFieldsReport_JP::newFromParameters(
            _taxPeriod,
            _fromDate,
            _toDate,
            _typeOfDeclaration,
            _amendment,
            _calcMethod,
            _dataLayout,
            _appendix1DataLayout,
            _appendix2DataLayout).calculateTaxReportSheet();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>