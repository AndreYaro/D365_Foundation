<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OxmlExcelReport_RTax25RegTrans_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class used to create excel documents with tax registers
/// </summary>
class OxmlExcelReport_RTax25RegTrans_RU extends XMLExcelReport_RU implements BatchRetryable, ERIReportPostProcessingSupported
{
    RTax25RegType               regType;
    RTax25RegisterId            registerId;
    RTax25RegisterTransMap      regTrans;

    str                         table;
    Array                       totals;
    Set                         hiddenFields;
    SetIterator                 iterator;

    container                   fieldTypes,
                                fieldLabels,
                                fieldBaseTypes;

    container                   registerValues;
    int                         currentCounter,
                                recordCount,
                                lineNum,
                                pageNum;

    QueryRun                    queryRun;

    FromDate                    fromDate;
    ToDate                      toDate;
    Name                        caption,
                                respName;

    int                         rowColHeader,
                                rowHeader,
                                rowBody,
                                rowFooter;

    #define.header('HEADER')
    #define.body('BODY')
    #define.columnHeadings('COLUMNHEADINGS')
    #define.footer('FOOTER')
    #define.reportHeader('REPORTHEADER')
    #define.reportFooter('REPORTFOOTER')
    #define.pageHeader('PAGEHEADER')

    #define.prefixHeader('HEAD')
    #define.prefixBody('BODY')

    #define.ColumnSize10(10)
    #define.ColumnSizeReal(15)

    #define.localSheetIdUndefined(-1)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
/// <summary>
    /// Calculates resizeable sections heights
    /// </summary>
    /// <param name="_bookmark">
    /// Section name
    /// </param>
    /// <returns>
    /// height of section
    /// </returns>
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        real height = document.workbook().getWorksheet(1).getDefaultHeight(),
             tmpHeight;

        int  i;

        switch (_bookmark)
        {
            case #columnHeadings:
                for (i = 1; i <= conLen(fieldLabels); i++)
                {
                    tmpHeight = document.getNamedRangeHeightWrapped(#prefixHeader + int2str(i), conPeek(fieldLabels, i));

                    if (tmpHeight > height)
                    {
                        height = tmpHeight;
                    }
                }
                break;
            case #header:
                height = max(height, document.getNamedRangeHeightWrapped('HEADERVAL', regTrans.LineDescription));
                break;
            case #body:
                for (i = 1; i <= conLen(fieldBaseTypes); i++)
                {
                    switch (conPeek(fieldBaseTypes, i))
                    {
                        case Types::RString:
                        case Types::String:
                        case Types::VarString:
                            tmpHeight = document.getNamedRangeHeightWrapped(#prefixBody + int2str(i), conPeek(registerValues, i));
                            if (tmpHeight > height)
                            {
                                height = tmpHeight;
                            }
                            break;
                    }
                }
                break;
            case #footer:
                height = max(height, document.getNamedRangeHeightWrapped('FOOTERVAL', regTrans.LineDescription));
                break;
        }

        return height;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createColumns</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates columns and sets their widths depending on field types
    /// </summary>
    /// <param name="_fieldTypes">
    /// container which holds extended field types
    /// </param>
    /// <param name="_fieldBaseTypes">
    /// container which holds base field types
    /// </param>
    /// <remarks>
    /// If display width greater than 30, column width set to 30
    /// </remarks>
    #define.maxColWidth(30) //maximun column width is 30 symbols
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createColumns(container _fieldTypes, container _fieldBaseTypes)
    {
        int              i;
        SysDictType_RU   sysDictType;
        real             width;
        int              fieldCount = conLen(_fieldTypes);
        str              worksheetName;

        OXMLWorksheet_RU    worksheet = document.workbook().getWorksheet(1);

        [worksheetName, rowColHeader]    = worksheet.workbook().definedNames().lookup([#columnHeadings, #localSheetIdUndefined]);
        [worksheetName, rowHeader]       = worksheet.workbook().definedNames().lookup([#header, #localSheetIdUndefined]);
        [worksheetName, rowBody]         = worksheet.workbook().definedNames().lookup([#body, #localSheetIdUndefined]);
        [worksheetName, rowFooter]       = worksheet.workbook().definedNames().lookup([#footer, #localSheetIdUndefined]);

        worksheet.rowTemplate(rowColHeader).multiplyCell(1, fieldCount - 1);
        worksheet.rowTemplate(rowHeader).multiplyCell(4, fieldCount - 4);
        worksheet.rowTemplate(rowBody).multiplyCell(1, fieldCount - 1);
        worksheet.rowTemplate(rowFooter).multiplyCell(3, fieldCount - 3);

        for (i = 1; i <= fieldCount; i++)
        {
            document.workbook().addDefinedName(#prefixHeader + int2str(i), worksheet.name(), rowColHeader, i, rowColHeader, i);
            document.workbook().addDefinedName(#prefixBody + int2str(i), worksheet.name(), rowBody, i, rowBody, i);
        }

        document.setWorksheetSpans(fieldCount);

        for (i=1; i<= conLen(_fieldBaseTypes); i++)
        {
            sysDictType = new SysDictType_RU(conPeek(_fieldTypes, i));

            switch (conPeek(_fieldBaseTypes, i))
            {
                case Types::String  :
                case Types::RString :
                    width = sysDictType.displayLength() + 1;
                    break;
                case Types::Date    :
                    width = #ColumnSize10;
                    break;
                case Types::Integer:
                case Types::Int64  :
                    width = sysDictType.displayLength() + 1;
                    break;
                case Types::Real    :
                    width = #ColumnSizeReal;
                    break;
                case Types::Enum    :
                    width = #ColumnSize10;
                    break;
                default             :
                    width = sysDictType.displayLength() + 1;
            }

            if (width > #maxColWidth)
            {
                width = #maxColWidth;
            }

            width = trunc((width + 5/document.workbook().maximumDigitWidth()) *256)/256;

            document.workbook().getWorksheet(1).columnWidth(i, width);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRegister</Name>
				<Source><![CDATA[
/// <summary>
    /// General method for creating document
    /// </summary>
    private void createRegister()
    {
        int recCounter = 1;

        currentCounter = 0;
        pageNum        = 1;
        pageHeight = document.getPageHeight();

        fieldTypes      = this.removeHiddenFields(regType.fieldType());
        fieldLabels     = this.removeHiddenFields(regType.fieldLabel());
        fieldBaseTypes  = this.removeHiddenFields(regType.fieldBaseType());

        fieldTypes      = conIns(fieldTypes,1,extendedTypeNum(Line));
        fieldLabels     = conIns(fieldLabels,1,"@SYS27207");
        fieldBaseTypes  = conIns(fieldBaseTypes,1, Types::Integer);

        totals  = new Array (Types::Container);

        this.initSectionMap();
        this.createColumns(fieldTypes, fieldBaseTypes);

        this.execute(#reportHeader);
        this.execute(#columnHeadings);

        while (queryRun.next())
        {
            regTrans = queryRun.getNo(1);
            lineNum++;

            if (regTrans.TableId == tableNum(RTax25RegisterTrans))
            {
                registerValues = regTrans.RegisterValues;
            }
            else
            {
                registerValues = this.registerValues(regTrans, regTrans.BlockType);
            }

            registerValues = this.removeHiddenFields(registerValues);

            switch (regTrans.BlockType)
            {
                case ReportBlockType::Header :
                    registerValues = conIns(registerValues, 1, 0);
                    currentCounter ++;
                    totals.value(currentCounter, registerValues);

                    if (this.mustCreateNewPage(#header))
                    {
                        this.newPage();
                    }

                    this.execute(#header);
                    break;
                case ReportBlockType::Footer:
                    registerValues = conIns(registerValues, 1, 0);

                    if (this.mustCreateNewPage(#footer))
                    {
                        this.newPage();
                    }

                    this.execute(#footer);

                    currentCounter --;
                    if (currentCounter < 1)
                    {
                        currentCounter = 1;
                    }
                    break;
                case ReportBlockType::Body:
                    registerValues = conIns(registerValues, 1, recCounter);
                    if (this.mustCreateNewPage(#body))
                    {
                        this.newPage();
                    }
                    this.execute(#body);
                    recCounter++;
                    break;
                default :
                    continue;
            }
        }

        this.execute(#reportFooter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes report
    /// </summary>
    protected void createReport()
    {
        document.workbook().parmSaveColumnWidth(true, 1);
        this.createRegister();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Working file name
    /// </summary>
    /// <returns>
    /// Working file name
    /// </returns>
    protected Filename fileName()
    {
        return 'Register';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates postfix for file - registername, datefrom, dateto
    /// </summary>
    /// <returns>
    /// Postfix for a file
    /// </returns>
    protected Filename fileNamePostfix()
    {
        return strFmt("%1_%2_%3",
            caption,
            date2str(fromDate, 321, 2, 0, 2, 0, 4, DateFlags::None),
            date2str(toDate, 321, 2, 0, 2, 0, 4, DateFlags::None));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// fills body section with data
    /// </summary>
    private void fillBody()
    {
        int i;

        for (i = 1; i <= conLen(registerValues); i++)
        {
            this.insertValue2Document(ComExcelDocument_RU::numToNameCell(i, rowBody), conPeek(registerValues, i));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillColumnHeadings</Name>
				<Source><![CDATA[
    /// <summary>
    /// fills columns headings section with data
    /// </summary>
    private void fillColumnHeadings()
    {
        int i;

        for (i = 1; i <= conLen(fieldLabels); i++)
        {
            this.insertValue2Document(ComExcelDocument_RU::numToNameCell(i, rowColHeader), conPeek(fieldLabels, i));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    /// <summary>
    /// fills specified section with data
    /// </summary>
    /// <param name="_bookmark">
    /// Name of section
    /// </param>
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case #header:
                this.fillHeader();
                break;
            case #body:
                this.fillBody();
                break;
            case #columnHeadings:
                this.fillColumnHeadings();
                break;
            case #footer:
                this.fillFooter();
                break;
            case #reportHeader:
                this.fillReportHeader();
                break;
            case #reportFooter:
                this.fillReportFooter();
                break;
            case #pageHeader:
                this.fillPageHeader();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFooter</Name>
				<Source><![CDATA[
/// <summary>
    /// Fills report section footer(logical) with data
    /// </summary>
    private void fillFooter()
    {
        int i;
        container totalsCon = totals.value(currentCounter);

        this.insertValueToSection('FOOTERVAL', regTrans.LineDescription);

        for (i = 2; i<=conLen(registerValues); i++)
        {
            switch (conPeek(fieldBaseTypes, i))
            {
                case Types::Real, Types::Integer, Types::Int64 :
                    this.insertValue2Document(ComExcelDocument_RU::numToNameCell(i, rowFooter),
                                              conPeek(totalsCon, i) != 0 ? num2str(conPeek(registerValues, i), 1, 2, 2, 0) : '');
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillHeader</Name>
				<Source><![CDATA[
/// <summary>
    /// Fills header of report section(lolgical) with data
    /// </summary>
    private void fillHeader()
    {
        this.insertValueToSection('HEADERVAL', regTrans.LineDescription);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills page header with data
    /// </summary>
    private void fillPageHeader()
    {
        this.insertValueToSection('PAGENUM', strFmt("@SYS24160", pageNum));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportFooter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report footer with data
    /// </summary>
    private void fillReportFooter()
    {
        this.insertValueToSection('RESPPERSONLABEL', "@GLS103857");
        this.insertValueToSection('SIGNATURE', "@GLS102235");
        this.insertValueToSection('RESPREPSONNAME', respName);
        this.insertValueToSection('PERSNAMELABEL', "@GLS102005");
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report header with data
    /// </summary>
    private void fillReportHeader()
    {
        utcdatetime dateTime = DateTimeUtil::applyTimeZoneOffset(
            DateTimeUtil::utcNow(),
            DateTimeUtil::getCompanyTimeZone());

        this.insertValueToSection('RegisterName', caption);
        this.insertValueToSection('TaxPayerLabel', "@GLS108756");
        this.insertValueToSection('TaxPayer', CompanyInfo::find().Name);
        this.insertValueToSection('TaxPayerIDLabel', "@GLS100564");
        this.insertValueToSection('TaxPayerID', CompanyInfo::find().partyINNasOfDate_RU(toDate));
        this.insertValueToSection('PeriodFromLabel', "@GLS101814");
        this.insertValueToSection('PeriodFrom', fromDate);
        this.insertValueToSection('PeriodToLabel', "@GLS101459");
        this.insertValueToSection('PeriodTo', toDate);
        this.insertValueToSection('PrintDate', dateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
/// <summary>
    /// Initializes report from caller or from RTax25RegisterJournalTrans
    /// </summary>
    /// <returns>
    /// true if report was successfully initialized
    /// </returns>
    /// <exception cref="Exception::Error">
    /// If no parameters specified yet an error occurs
    /// </exception>
    public boolean init()
    {
        RTax25RegisterJournalTrans  jourTrans;
        RTax25Report_RegisterTrans  caller = args.caller();

        if (caller)
        {
            caller.setHeaderData();
            regType      = caller.parmRegType();
            registerId   = regType.registerId();
            hiddenFields = caller.hidedFields();

            queryRun     = caller.queryRun();

            fromDate     = caller.getFromDate();
            toDate       = caller.getToDate();
            caption      = caller.caption();
            respName     = caller.getResponsibleName();
        }
        else if (args.record() &&
                 args.dataset() == tableNum(RTax25RegisterJournalTrans))
        {
            jourTrans = args.record();

            regType = RTax25RegType::construct(
                RTax25RegisterTable::registerId2Type(jourTrans.RegisterId),
                jourTrans.AssessedTaxRegisterType,
                ! RTax25RegisterTrans::existAny(jourTrans.JournalNum, jourTrans.RegisterId, jourTrans.PeriodType, jourTrans.PeriodNum, jourTrans.FiscalYear));

            registerId   = regType.registerId();
            hiddenFields = RTax25RegisterHideSetup::hidedFields(jourTrans);
            queryRun     = this.initQueryRun(jourTrans);

            fromDate     = jourTrans.fromDate();
            toDate       = jourTrans.toDate();
            caption      = jourTrans.registerName();
            respName     = jourTrans.Approved ? HcmWorker::find(jourTrans.Approver).name() : '';
        }
        else
        {
            throw error(strFmt("@GLS103487", classStr(OXMLExcelReport_RTax25RegTrans_RU)));
        }

        iterator = new SetIterator(hiddenFields);
        recordCount = SysQuery::countTotal(queryRun);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRun</Name>
				<Source><![CDATA[
/// <summary>
    /// Initializes queryRun which retrieves data
    /// </summary>
    /// <param name="_registerJournalTrans">
    /// register being printed
    /// </param>
    /// <returns>
    /// queryRun which retrieves data
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public QueryRun initQueryRun(RTax25RegisterJournalTrans  _registerJournalTrans)
    {
        QueryBuildDataSource    qbds;
        Query                   query = new Query();

        if (regType.detachedTableId())
        {
            qbds = query.addDataSource(regType.detachedTableId());
        qbds.clearSortIndex();
            qbds.addSortIndex(indexName2Id(regType.detachedTableId(), 'JournalRegisterLineTypeIdx'));

            findOrCreateRange_W(qbds, fieldName2Id(regType.detachedTableId(), 'JournalTransRefRecId'), queryValue(_registerJournalTrans.RecId));
        }
        else
        {
            qbds = query.addDataSource(tableNum(RTax25RegisterTrans));
            qbds.clearSortIndex();
        qbds.addSortIndex(indexNum(RTax25RegisterTrans, JournalRegisterLineTypeIdx));

        findOrCreateRange_W(qbds, fieldNum(RTax25RegisterTrans, JournalNum)         , _registerJournalTrans.JournalNum);
        findOrCreateRange_W(qbds, fieldNum(RTax25RegisterTrans, PeriodType)         , enum2Value(_registerJournalTrans.PeriodType));
        findOrCreateRange_W(qbds, fieldNum(RTax25RegisterTrans, PeriodNum)          , int2str(_registerJournalTrans.PeriodNum));
        findOrCreateRange_W(qbds, fieldNum(RTax25RegisterTrans, FiscalYear)         , SysQuery::value(_registerJournalTrans.FiscalYear));
        findOrCreateRange_W(qbds, fieldNum(RTax25RegisterTrans, RegisterJournalType), queryValue(_registerJournalTrans.RegisterJournalType));
        findOrCreateRange_W(qbds, fieldNum(RTax25RegisterTrans, RegisterId)         , _registerJournalTrans.RegisterId);
        }
        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes map which holds data about report sections
    /// </summary>
    protected void initSectionMap()
    {
        this.addSection(#reportHeader);
        this.addSection(#reportFooter);
        this.addSection(#pageHeader);
        this.addSection(#columnHeadings, true);
        this.addSection(#header, true);
        this.addSection(#body, true);
        this.addSection(#footer, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertValue2Document</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method inserts value to document, first coverting it to string
    /// </summary>
    /// <param name="_bookmark">
    /// Bookmark which holds coordinates or named range
    /// </param>
    /// <param name="_anyVal">
    /// Value to be inserted
    /// </param>
    /// <remarks>
    /// That function required since we can not change format of worksheet cell
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// An error occurs if unsupported type was passed
    /// </exception>
    private void insertValue2Document(Bookmark _bookmark, anytype _anyVal)
    {
        str     strValue;

        switch (typeOf(_anyVal))
        {
            case Types::Date:
                strValue = date2str(_anyVal, 123, 2, 2, 2, 2, 4, DateFlags::None);
                break;
            case Types::Enum:
                strValue = enum2str(_anyVal);
                break;
            case Types::Guid:
                strValue = guid2str(_anyVal);
                break;
            case Types::Int64:
                strValue = int642str(_anyVal);
                break;
            case Types::Integer:
                strValue = int2str(_anyVal);
                break;
            case Types::Real:
                strValue = num2str(_anyVal, 1, 2, 2, 0);
                break;
            case Types::RString:
            case Types::String:
            case Types::VarString:
                strValue = _anyVal;
                break;
            case Types::Time:
                strValue = time2str(_anyVal, TimeSeparator::Colon, TimeFormat::Hour24);
                break;
            case Types::UtcDateTime:
                strValue = DateTimeUtil::toStr(_anyVal);
                break;
            default:
                throw error("@SYS40221");
        }

        document.insertValue(_bookmark, strValue);

        this.parmProgress().incCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateNewPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a new page should be created before executing section
    /// </summary>
    /// <param name="_bookmark">
    /// name of section(resizeable)
    /// </param>
    /// <returns>
    /// true, if new page should be created, otherwise false
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean mustCreateNewPage(Bookmark _bookmark)
    {
        real requiredHeight = this.getRangeHeight(_bookmark);

        if (lineNum == recordCount)
        {
            requiredHeight += conPeek(mapSections.lookup(#reportFooter), #posSectionHeight);
        }

        return currentHeight + requiredHeight > pageHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new page of report and outputs pageheader
    /// </summary>
    private void newPage()
    {
        document.insertPageBreak(currentRow);

        currentHeight = 0;
        pageNum++;

        this.execute(#pageHeader);
        this.execute(#columnHeadings);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeHiddenFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes fields marked as hidden from container to print
    /// </summary>
    /// <param name="_values">
    /// source container
    /// </param>
    /// <returns>
    /// source container with hidden fields removed
    /// </returns>
    private container removeHiddenFields(container _values)
    {
        container sourceValues = _values;
        int       i = 0;

        if (hiddenFields.empty())
            return sourceValues;

        iterator.begin();

        while (iterator.more())
        {
                sourceValues = conDel(sourceValues, iterator.value()-i, 1);
                i++;
                iterator.next();
        }

        return sourceValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Name of template
    /// </summary>
    /// <returns>
    /// Name of template
    /// </returns>
    protected Filename templateName()
    {
        return resourceStr(RTax25Template_xlsx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return approximate number of cells in report
    /// </summary>
    /// <returns>
    /// approximate number of cells in report
    /// </returns>
    protected Counter totalCells()
    {
        return recordCount * (conLen(this.removeHiddenFields(regType.fieldLabel())) + 2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static OXMLExcelReport_RTax25RegTrans_RU construct()
    {
        return new OXMLExcelReport_RTax25RegTrans_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerValues</Name>
				<Source><![CDATA[
    private container registerValues(Common  _regTrans, ReportBlockType _reportBlockType = ReportBlockType::Body)
    {
        int       i;
        container ret, fieldId = regType.fieldId();

        if (_reportBlockType == ReportBlockType::Header)
        {
            ret = regType.headerFields();
        }
        else
        {
            for (i = 1; i <= regType.fieldCount(); i++)
            {
                ret += _regTrans.(conpeek(fieldId, i));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report name.
    /// </summary>
    /// <returns>The report name.</returns>
    public str getReportName()
    {
        return 'RTax25RegTrans';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report output file name.
    /// </summary>
    /// <returns>The report output file name.</returns>
    public Filename getReportFileName()
    {
        return this.fileName() + this.fileNamePostfix();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>