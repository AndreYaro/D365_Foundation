<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetAnalysisDrillDownHelper_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  The <c>BudgetAnalysisDrillDownHelper_PSN</c> class is a form helper that works with the all the budget analysis drill down forms.
/// </summary>
class BudgetAnalysisDrillDownHelper_PSN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addBudgetAnalysisRevisedBudgetDrillDownRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add filters to limit the records displayed on the revised budget drilldown form.
    /// </summary>
    /// <param name = "_budgetAnalysisInquiryHelper">An instance of the <c>BudgetAnalysisInquiryHelper_PSN</c> class.</param>
    /// <param name = "_qbdsBudgetTransactionHeader">
    /// A query build data source object for the <c>BudgetTransactionHeader</c> record from the <c>BudgetAnalysisRevisedBudget_PSN</c> form.
    /// </param>
    /// <param name = "_qbdsBudgetTransactionLine">
    /// A query build data source object for the <c>BudgetTransactionLine</c> record from the <c>BudgetAnalysisRevisedBudget_PSN</c> form.
    /// </param>
    public static void addBudgetAnalysisRevisedBudgetDrillDownRanges(BudgetAnalysisInquiryHelper_PSN _budgetAnalysisInquiryHelper,
                                                                    QueryBuildDataSource  _qbdsBudgetTransactionHeader,
                                                                    QueryBuildDataSource  _qbdsBudgetTransactionLine)
    {
        QueryBuildRange         range;
        QueryBuildDataSource    qbdsBudgetTransactionLineClosing;

        // Add a date range filter from the inquiry form.
        range = _qbdsBudgetTransactionLine.addRange(fieldNum(BudgetTransactionLine, Date));
        range.value(SysQuery::range(_budgetAnalysisInquiryHelper.parmStartDate(), _budgetAnalysisInquiryHelper.parmEndDate()));

        // Add a status filter to limit the records to only completed transactions.
        range = _qbdsBudgetTransactionHeader.addRange(fieldNum(BudgetTransactionHeader, TransactionStatus));
        range.value(queryValue(int2str(enum2int(BudgetTransactionStatus::Completed))));

        // Add a status filter to limit the records to only the current company.
        range = _qbdsBudgetTransactionHeader.addRange(fieldNum(BudgetTransactionHeader, PrimaryLedger));
        range.value(queryValue(Ledger::current()));

        // Add a status filter to budget transaction type to limit the records to revised budget records.
        range = _qbdsBudgetTransactionHeader.addRange(fieldNum(BudgetTransactionHeader, BudgetTransactionType));
        range.value(queryValue(int2str(enum2int(BudgetTransactionType::OriginalBudget))));

        range = _qbdsBudgetTransactionHeader.addRange(fieldNum(BudgetTransactionHeader, BudgetTransactionType));
        range.value(queryValue(int2str(enum2int(BudgetTransactionType::CarryForwardBudget))));

        range = _qbdsBudgetTransactionHeader.addRange(fieldNum(BudgetTransactionHeader, BudgetTransactionType));
        range.value(queryValue(int2str(enum2int(BudgetTransactionType::Amendment))));

        range = _qbdsBudgetTransactionHeader.addRange(fieldNum(BudgetTransactionHeader, BudgetTransactionType));
        range.value(queryValue(int2str(enum2int(BudgetTransactionType::Transfer))));

        range = _qbdsBudgetTransactionHeader.addRange(fieldNum(BudgetTransactionHeader, BudgetTransactionType));
        range.value(queryValue(int2str(enum2int(BudgetTransactionType::Project))));

        // Add a filter to limit the BudgetType to Expense or Revenue depending on the selected column set.
        if ((_budgetAnalysisInquiryHelper.parmColumnSet() == BudgetAnalysisColumnSet_PSN::ExpenseBudget)
            || (_budgetAnalysisInquiryHelper.parmColumnSet() == BudgetAnalysisColumnSet_PSN::ExpenseBudgetWithCarryForward))
        {
            _qbdsBudgetTransactionLine.addRange(fieldNum(BudgetTransactionLine, BudgetType)).value(queryValue(int2str(enum2int(BudgetType::Expense))));
        }
        else if (_budgetAnalysisInquiryHelper.parmColumnSet() == BudgetAnalysisColumnSet_PSN::RevenueBudget)
        {
            _qbdsBudgetTransactionLine.addRange(fieldNum(BudgetTransactionLine, BudgetType)).value(queryValue(int2str(enum2int(BudgetType::Revenue))));
        }

        // Add a filter for closing entries.
        if (!_budgetAnalysisInquiryHelper.parmDoIncludeClosingEntries())
        {
            qbdsBudgetTransactionLineClosing = _qbdsBudgetTransactionLine.addDataSource(tableNum(BudgetTransactionLineClosing));
            qbdsBudgetTransactionLineClosing.relations(true);
            qbdsBudgetTransactionLineClosing.joinMode(JoinMode::NoExistsJoin);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addBudgetAnalysisEncumbranceAndPreEncumbranceRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add filters to limit the records displayed on the preencumbrance and encumbrance drilldown forms.
    /// </summary>
    /// <param name = "_budgetAnalysisInquiryHelper">
    /// An instance of the <c>BudgetAnalysisInquiryHelper_PSN</c> class.
    /// </param>
    /// <param name = "_qbdsBudgetSourceTracking">
    /// A query build data source object for the <c>BudgetSourceTracking</c> record.
    /// </param>
    /// <param name = "_qbdsRelievedBudgetSourceTracking">
    /// A query build data source object for the <c>BudgetSourceTracking_Relieved</c> record.
    /// </param>
    /// <param name = "_qbdsRelievingBudgetSourceTracking">
    /// A query build data source object for the <c>BudgetSourceTracking_Relieving</c> record.
    /// </param>
    /// <param name = "_qbdsBudgetSourceTrackingDetail">
    /// A query build data source object for the <c>BudgetSourceTrackingRelievedDetailCube</c> record.
    /// </param>
    /// <param name = "_qbdsBudgetSourceTrackingDetailRelieved">
    /// A query build data source object for the <c>BudgetSourceTrackingDetail_Relieved</c> record.
    /// </param>
    /// <param name = "_menuItemDisplayStr">
    /// The menuitem name of the form from which this method is called.
    /// </param>
    public static void addBudgetAnalysisEncumbranceAndPreEncumbranceRanges(BudgetAnalysisInquiryHelper_PSN _budgetAnalysisInquiryHelper,
                                                                            QueryBuildDataSource _qbdsBudgetSourceTracking,
                                                                            QueryBuildDataSource _qbdsRelievedBudgetSourceTracking,
                                                                            QueryBuildDataSource _qbdsRelievingBudgetSourceTracking,
                                                                            QueryBuildDataSource _qbdsBudgetSourceTrackingDetail,
                                                                            QueryBuildDataSource _qbdsBudgetSourceTrackingDetailRelieved,
                                                                            MenuItemNameDisplay  _menuItemDisplayStrForEncumbranceOrPreEncumbrance)
    {
        QueryBuildRange         range;
        RefRecId                ledgerRecId = Ledger::current();
        QueryBuildDataSource    qbdsBudgetSourceTrackingDetailClosing;

        if (_menuItemDisplayStrForEncumbranceOrPreEncumbrance == menuitemDisplayStr(BudgetAnalysisEncumbrances_PSN))
        {
            _qbdsBudgetSourceTracking.addRange(fieldNum(BudgetSourceTracking, Category)).value(queryValue(int2str(enum2int(BudgetControlCategory::Encumbrance))));
            _qbdsBudgetSourceTracking.addRange(fieldNum(BudgetSourceTracking, Category)).value(queryValue(int2str(enum2int(BudgetControlCategory::EncumbranceReduction))));

            _qbdsRelievedBudgetSourceTracking.addRange(fieldNum(BudgetSourceTracking, Category)).value(queryValue(int2str(enum2int(BudgetControlCategory::Encumbrance))));
            _qbdsRelievedBudgetSourceTracking.addRange(fieldNum(BudgetSourceTracking, Category)).value(queryValue(int2str(enum2int(BudgetControlCategory::EncumbranceReduction))));

            // Add a filter for closing entries.
            if (!_budgetAnalysisInquiryHelper.parmDoIncludeClosingEntries())
            {
                qbdsBudgetSourceTrackingDetailClosing = _qbdsBudgetSourceTrackingDetail.addDataSource(tableNum(BudgetSourceTrackingDetailClosing));
                qbdsBudgetSourceTrackingDetailClosing.relations(true);
                qbdsBudgetSourceTrackingDetailClosing.joinMode(JoinMode::NoExistsJoin);
            }
        }
        else
        {
            _qbdsBudgetSourceTracking.addRange(fieldNum(BudgetSourceTracking, Category)).value(queryValue(int2str(enum2int(BudgetControlCategory::PreEncumbrance))));
            _qbdsRelievedBudgetSourceTracking.addRange(fieldNum(BudgetSourceTracking, Category)).value(queryValue(int2str(enum2int(BudgetControlCategory::PreEncumbrance))));
        }

        // Add a status filter to limit the records to only confirmed transactions.
        // Only Posted/Confirmed records will be selected by this inquiry form.
        range = _qbdsBudgetSourceTracking.addRange(fieldNum(BudgetSourceTracking, Status));
        range.value(queryValue(int2str(enum2int(BudgetSourceTrackingStatus::Confirmed))));

        range = _qbdsRelievedBudgetSourceTracking.addRange(fieldNum(BudgetSourceTracking, Status));
        range.value(queryValue(int2str(enum2int(BudgetSourceTrackingStatus::Confirmed))));

        range = _qbdsRelievingBudgetSourceTracking.addRange(fieldNum(BudgetSourceTracking, Status));
        range.value(queryValue(int2str(enum2int(BudgetSourceTrackingStatus::Confirmed))));

        // Add a status filter to limit the records to the current company.
        range = _qbdsBudgetSourceTrackingDetail.addRange(fieldNum(BudgetSourceTrackingDetail, PrimaryLedger));
        range.value(queryValue(ledgerRecId));

        range = _qbdsBudgetSourceTrackingDetailRelieved.addRange(fieldNum(BudgetSourceTrackingDetail, PrimaryLedger));
        range.value(queryValue(ledgerRecId));

        // Add a date range filter from the inquiry form.
        range = _qbdsBudgetSourceTracking.addRange(fieldNum(BudgetSourceTracking, TrackingDate));
        range.value(SysQuery::range(_budgetAnalysisInquiryHelper.parmStartDate(), _budgetAnalysisInquiryHelper.parmEndDate()));

        range = _qbdsRelievedBudgetSourceTracking.addRange(fieldNum(BudgetSourceTracking, TrackingDate));
        range.value(SysQuery::range(_budgetAnalysisInquiryHelper.parmStartDate(), _budgetAnalysisInquiryHelper.parmEndDate()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addBudgetAnalysisActualsDrillDownRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add filters to limit the records displayed on the actuals drilldown form.
    /// </summary>
    /// <param name = "_budgetAnalysisInquiryHelper">
    /// An instance of the <c>BudgetAnalysisInquiryHelper_PSN</c> class.
    /// </param>
    /// <param name = "_qbdsGeneralJournalEntry">
    /// A query build data source object for the <c>GeneralJournalEntry</c> record.
    /// </param>
    /// <param name = "_queryMainAccount">
    /// A query object for the <c>MainAccount</c> record.
    /// </param>
    public static void addBudgetAnalysisActualsDrillDownRanges(BudgetAnalysisInquiryHelper_PSN _budgetAnalysisInquiryHelper,
                                                                QueryBuildDataSource _qbdsGeneralJournalEntry,
                                                                Query _queryMainAccount)
    {
        QueryBuildRange      range;
        QueryBuildDataSource qbdsBudgetSource;
        QueryBuildDataSource qbdsBudgetSourceTracking;
        QueryBuildDataSource qbdsBudgetSourceTrackingDetail;

        // Add a filter to limit the main account types to Expense or Revenue depending on the selected column set.
        if ((_budgetAnalysisInquiryHelper.parmColumnSet() == BudgetAnalysisColumnSet_PSN::ExpenseBudget)
            || (_budgetAnalysisInquiryHelper.parmColumnSet() == BudgetAnalysisColumnSet_PSN::ExpenseBudgetWithCarryForward))
        {
            _queryMainAccount.dataSourceTable(tableNum(MainAccount)).addRange(fieldNum(MainAccount, Type)).value(queryValue(int2str(enum2int(DimensionLedgerAccountType::Expense))));
        }
        else if (_budgetAnalysisInquiryHelper.parmColumnSet() == BudgetAnalysisColumnSet_PSN::RevenueBudget)
        {
            _queryMainAccount.dataSourceTable(tableNum(MainAccount)).addRange(fieldNum(MainAccount, Type)).value(queryValue(int2str(enum2int(DimensionLedgerAccountType::Revenue))));
        }

        // Add a filter to limit the transaction to non-carryforward transactions if the column set is expense budget or revenue budget.
        if ((_budgetAnalysisInquiryHelper.parmColumnSet() == BudgetAnalysisColumnSet_PSN::ExpenseBudget)
            || (_budgetAnalysisInquiryHelper.parmColumnSet() == BudgetAnalysisColumnSet_PSN::RevenueBudget))
        {
            // NoExistJoin with the budget source will exclude the carry forward transactions on the actuals drill-down from general journal entry.
            qbdsBudgetSource = _qbdsGeneralJournalEntry.addDataSource(tableNum(BudgetSource));
            qbdsBudgetSource.joinMode(JoinMode::NoExistsJoin);
            qbdsBudgetSource.addLink(fieldNum(GeneralJournalEntry, RecId), fieldNum(BudgetSource, LedgerEntryGeneralJournalEntry));

            qbdsBudgetSourceTracking = qbdsBudgetSource.addDataSource(tableNum(BudgetSourceTracking));
            qbdsBudgetSourceTracking.joinMode(JoinMode::ExistsJoin);
            qbdsBudgetSourceTracking.addLink(fieldNum(BudgetSource, RecId), fieldNum(BudgetSourceTracking, BudgetSource));

            qbdsBudgetSourceTrackingDetail = qbdsBudgetSourceTracking.addDataSource(tableNum(BudgetSourceTrackingDetail));
            qbdsBudgetSourceTrackingDetail.joinMode(JoinMode::ExistsJoin);
            qbdsBudgetSourceTrackingDetail.addLink(fieldNum(BudgetSourceTracking, RecId), fieldNum(BudgetSourceTrackingDetail, BudgetSourceTracking));
            qbdsBudgetSourceTrackingDetail.addRange(fieldNum(BudgetSourceTrackingDetail, IsCarryForward)).value(queryValue(int2str(enum2int(NoYes::Yes))));
        }

        // Add a date range filter from the inquiry form.
        range = _qbdsGeneralJournalEntry.addRange(fieldNum(GeneralJournalEntry, AccountingDate));
        range.value(SysQuery::range(_budgetAnalysisInquiryHelper.parmStartDate(), _budgetAnalysisInquiryHelper.parmEndDate()));

        // Add a status filter to limit the records to the current company.
        range = _qbdsGeneralJournalEntry.addRange(fieldNum(GeneralJournalEntry, Ledger));
        range.value(queryValue(Ledger::current()));

        // Add a posting layer filter from the inquiry form.
        range = _qbdsGeneralJournalEntry.addRange(fieldNum(GeneralJournalEntry, PostingLayer));
        range.value(queryValue(_budgetAnalysisInquiryHelper.parmPostingLayer()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addParentageRangesToLimitDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add parentage filters to limit results to the correct dimensions.
    /// </summary>
    /// <param name = "_budgetAnalysisInquiryHelper">An instance of the <c>BudgetAnalysisInquiryHelper_PSN</c> class.</param>
    /// <param name = "_queryDimensionValueAttributeGroupCombination">
    /// A query object for the datasource <c>DimensionAttributeValueGroupCombination</c> from the budget analysis drill down forms.
    /// </param>
    /// <param name = "_queryDimensionAttributeValueGroupCombinationRelieved">
    /// A query object for the datasource <c>DimensionAttributeValueGroupCombination_Relieved</c> from the budget analysis drill down forms.
    /// </param>
    public static void addParentageRangesToLimitDimensions(BudgetAnalysisInquiryHelper_PSN _budgetAnalysisInquiryHelper,
                                                                Query _queryDimensionValueAttributeGroupCombination,
                                                                Query _queryDimensionAttributeValueGroupCombinationRelieved = null)
    {
        List parentageList = new List(Types::Int64);

        // Create and pack pattern is retained here because of the dependency on the re-initialization of the objects.
        parentageList = List::create(_budgetAnalysisInquiryHelper.parmBudgetAnalysisDimensionNode().parmParentageList().pack());

        parentageList.addEnd(_budgetAnalysisInquiryHelper.parmSelectedDimAttributeValue());

        BudgetAnalysisInquiryHelper_PSN::addParentageRanges(_queryDimensionValueAttributeGroupCombination, parentageList);

        if (_queryDimensionAttributeValueGroupCombinationRelieved)
        {
            BudgetAnalysisInquiryHelper_PSN::addParentageRanges(_queryDimensionAttributeValueGroupCombinationRelieved, parentageList);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>