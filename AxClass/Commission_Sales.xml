<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Commission_Sales</Name>
	<SourceCode>
		<Declaration><![CDATA[
class       Commission_Sales
extends     Commission
{
    CustInvoiceJour         custInvoiceJour;
    CustInvoiceTrans        custInvoiceTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addCommissionAmount</Name>
				<Source><![CDATA[
    protected void addCommissionAmount(AmountCur   commissionAmountCur)
    {
        custInvoiceTrans.CommissAmountCur += commissionAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAgreement_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the <c>AgreementHeaderExt_RU</c> field for commission rates.
    /// </summary>
    /// <param name="_commissionCalc">
    ///     The record of the <c>CommissionCalc</c> table.
    /// </param>
    /// <returns>
    ///     true if the <c>AgreementHeaderExt_RU</c> field is valid; otherwise, false.
    /// </returns>
    protected boolean checkAgreement_RU(CommissionCalc _commissionCalc)
    {
        boolean ret = true;

        if (_commissionCalc.AgreementHeaderExt_RU &&
            AgreementHeaderExt_RU::findByDefaultDimension(custInvoiceJour.DefaultDimension).RecId != _commissionCalc.AgreementHeaderExt_RU)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>commissionLedgerDimension</Name>
				<Source><![CDATA[
    protected LedgerDimensionDefaultAccount commissionLedgerDimension()
    {
        return commissionLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>commissionOffsetLedgerDimension</Name>
				<Source><![CDATA[
    protected LedgerDimensionDefaultAccount commissionOffsetLedgerDimension()
    {
        return commissionOffsetLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        SalesTable salesTable = SalesTable::find(custInvoiceJour.SalesId);

        commissionTrans.initFromCustInvoiceTrans(custInvoiceTrans);

        endFactor           = ((100 - SalesTable::find(custInvoiceTrans.OrigSalesId).discPercent) / 100);
        itemGroup           = InventTable::find(custInvoiceTrans.ItemId).CommissionGroupId;
        custGroup           = salesTable.CommissionGroup;

        orderAccount        = custInvoiceJour.OrderAccount;
        languageId          = custInvoiceJour.LanguageId;
        triangulation       = custInvoiceJour.Triangulation;
        exchRate            = custInvoiceJour.ExchRate;
        exchrateSecondary   = custInvoiceJour.ExchRateSecondary;

        salesGroup          = custInvoiceTrans.SalesGroup;
        qty                 = custInvoiceTrans.Qty;
        salesPrice          = custInvoiceTrans.SalesPrice;
        priceUnit           = custInvoiceTrans.PriceUnit;
        markup              = custInvoiceTrans.SalesMarkup;
        lineAmount          = custInvoiceTrans.LineAmount;
        costValue           = custInvoiceTrans.costValue();
        endDisc             = InventTableModule::find(custInvoiceTrans.ItemId, ModuleInventPurchSales::Sales).EndDisc;
        commissionLedgerDimension = custInvoiceTrans.commissionLedgerDimension(custInvoiceJour);
        commissionOffsetLedgerDimension = custInvoiceTrans.commissionOffsetLedgerDimension(custInvoiceJour);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCommissionCalculated</Name>
				<Source><![CDATA[
    protected CommissCalc isCommissionCalculated()
    {
        return custInvoiceTrans.CommissCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceJour</Name>
				<Source><![CDATA[
    public CustVendInvoiceJour parmInvoiceJour(CustInvoiceJour _custInvoiceJour = custInvoiceJour)
    {
        custInvoiceJour = _custInvoiceJour;
        return custInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceTrans</Name>
				<Source><![CDATA[
    public CustVendInvoiceTrans parmInvoiceTrans(CustInvoiceTrans _custInvoiceTrans = custInvoiceTrans)
    {
        custInvoiceTrans = _custInvoiceTrans;
        return custInvoiceTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCommissionCalc</Name>
				<Source><![CDATA[
    protected void updateCommissionCalc()
    {
        custInvoiceTrans.CommissCalc        = NoYes::Yes;
        custInvoiceTrans.CommissAmountMST   = custInvoiceJour.amountMST(custInvoiceTrans.CommissAmountCur);

        custInvoiceTrans.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static Commission_Sales construct()
    {
        return new Commission_Sales();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCommission</Name>
				<Source><![CDATA[
    public static Commission   newCommission(LedgerVoucher     _ledgerVoucher,
                                             CustInvoiceJour   _custInvoiceJour,
                                             CustInvoiceTrans  _custInvoiceTrans)
    {
        Commission_Sales    commission_Sales;

        commission_Sales = Commission_Sales::construct();
        commission_Sales.parmLedgerVoucher(_ledgerVoucher);
        commission_Sales.parmInvoiceJour(_custInvoiceJour);
        commission_Sales.parmInvoiceTrans(_custInvoiceTrans);
        commission_Sales.init();
        return commission_Sales;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>