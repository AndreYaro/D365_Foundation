<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxCustInterestNote</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxCustInterestNote</c> class derives from the <c>Tax</c> class and works as an extension of
///    the main tax engine. It performs the calculation of tax for the customer interest note, and is
///    called from the <c>CustInterestJour</c> table, the <c>CustInterestPost</c> class, and the
///    <c>CustInterestNote</c> report.
/// </summary>
final class TaxCustInterestNote extends Tax
{
    CustInterestNote    custInterestNote;
    CustInterestJour    custInterestJour;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAndPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the calculation of the tax for the collection letter per line or in total, based on the CustInterestNote variable. After the calculation, it calls the <c>saveAndPost</c> method, if posting
    ///    of the tax is required.
    /// </summary>
    /// <param name="_ledgerPostingController">
    /// The ledger posting controller to use for ledger posting.
    /// </param>
    /// <returns>
    ///    The <c>TaxAmount</c>.
    /// </returns>
    TaxAmount calcAndPost(LedgerPostingController _ledgerPostingController)
    {
        TaxAmount                taxAmount;
        Integer                  sign;
        AmountCur                amountCur;
        TaxCalculationAdjustment taxCalculationAdjustment;
        LedgerDimensionAccount   ledgerDimensionMerged;

        this.initLedgerPosting(_ledgerPostingController);

        if (!headingRecId)
            return 0;

        custInterestNote.initCursor();

        sign = 1;
        custInterestJour = custInterestNote.nextLine();

        amountCur = custInterestNote.amount();
        if (amountCur < 0)
            sign = -1;
        amountCur = amountCur * -1;

        ledgerDimensionMerged = LedgerDimensionFacade::serviceCreateLedgerDimension(custInterestNote.operationLedgerDimension(), custInterestNote.dimension());
        this.insertLineInInternal(amountCur,
                                    0,
                                    '',
                                    '',
                                    0,
                                    custInterestNote.dimension(),
                                    ledgerDimensionMerged);

        if (! this.checkTaxCodesInTotal())
        {
            throw error("@SYS22772");
        }

        if (taxCalculateLine)
        {
            taxAmount = this.calcTax();
            this.saveInProcessTransaction();
        }

        if (taxCalculateTotal)
        {
            this.insertTotalInInternal(0 /* baseInTotal */ );
            taxAmount = this.calcTax();
            this.saveTotalInProcessTransaction();
        }

        this.roundTaxOnTaxGroup();

        taxCalculationAdjustment = TaxCalculationAdjustment::construct(taxWorkTrans, this);
        if (taxCalculationAdjustment)
        {
            taxCalculationAdjustment.loadTaxAdjustments();
        }

        custInterestNote.setTax(this.taxWriteCode(), this.lineTaxAmount(sign));
        if (custInterestJour.selectForUpdate())
        {
            custInterestJour.update();
        }

        if (post)
        {
            this.saveAndPost(_ledgerPostingController);

            taxAmount = Tax::taxTotalVoucherDate(voucher, taxDate);
        }
        else
            taxAmount = this.totalTaxAmount();

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkParameters</Name>
				<Source><![CDATA[
    boolean checkParameters()
    {
        boolean ok = true;

        if (!custInterestNote)
        {
            throw error(strfmt("@SYS22533",funcname(),classidget(custInterestNote)));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
void new(NoYes              _post,
             CustInterestNote   _custInterestNote,
             Date               _taxDate = _custInterestNote.transDate())
    {
        super();

        post                = _post;
        custInterestNote    = _custInterestNote;
        taxDate             = _taxDate;
        taxModuleType       = TaxModuleType::CustInterestNote;
        headingTableId      = custInterestNote.tableId();
        headingRecId        = custInterestNote.recId();
        sourceCurrencyCode  = custInterestNote.currencyCode();
        triangulation       = custInterestNote.triangulation();

        if (!headingTableId || !headingRecId)
            throw error("@SYS18447");

        if (! this.checkParameters())
            throw error("@SYS18447");

        custInterestNote.initCursor();

        custInterestJour = custInterestNote.nextLine();

        this.insertIntersection(custInterestNote.taxGroup(),
                                custInterestNote.taxItemGroup(),
                                '',
                                custInterestJour.Name,
                                taxDate);

        if (! this.checkTaxCodesByLine())
            throw error("@SYS22772");
    }
]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the transaction line to calculate.
    /// </summary>
    /// <returns>
    /// The record ID of the transaction line to calculate.
    /// </returns>
    public recId sourceRecId()
    {
        return custInterestJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID of the transaction to tax.
    /// </summary>
    /// <returns>
    /// The ID of the transaction to tax.
    /// </returns>
    public RefTableId sourceTableId()
    {
        return custInterestJour.TableId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>