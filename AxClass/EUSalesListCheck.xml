<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EUSalesListCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
class EUSalesListCheck extends RunBase
{
    private const str FeatureReference = 'EUR-00011';

    QueryRun        qEUSalesList;
    EUSalesList     EUSalesList;
    boolean         errorFound;
    Counter         infoLogCounter;
    Counter         progressCounter;
    str             prefix;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkRecord</Name>
				<Source><![CDATA[
    boolean checkRecord()
    {
        boolean     ok = true;

        ok = EUSalesList.check(true, prefix);

        if (!ok)
        {
            errorFound = true;
        }

        EUSalesList.update();
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        FormRun formRun = classFactory.createQueryForm(this);
        formRun.init();
        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();

        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());

        qEUSalesList   = new QueryRun(querystr(EUsalesList));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,qEUSalesList.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressUpdate</Name>
				<Source><![CDATA[
    void progressUpdate()
    {
        progressCounter++;
        progress.setCount(progressCounter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    ///    dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    ///    in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    QueryRun queryRun()
    {
        return  qEUSalesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        infoLogCounter = infolog.num();
        errorFound = false;

        this.progressInit("@SYS13894",(select maxof(seqNum) from EUSalesList).seqNum, #AviSearch);

        ttsbegin;

        while (qEUSalesList.next())
        {
            EUSalesList = qEUSalesList.get(tablenum(EUSalesList));
            prefix = #PreFixField(EUSalesList,AccountNum);
            this.progressUpdate();
            this.checkRecord();
        }
        ttscommit;

        if (!errorFound)
            info(strfmt("@SYS11281"));
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer          version         = conpeek(packedClass,1);
        container       packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version,packedQuery]      = packedClass;
                if (packedQuery)
                    qEUSalesList   = new QueryRun(packedQuery);
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        EUSalesListCheck   listCheck;
        FormDataSource     eUSalesList_ds;

        listCheck       = new EUSalesListCheck();
        eUSalesList_ds  = FormDataUtil::getFormDataSource(args.record());
        listCheck.getLast();

        if (listCheck.prompt())
            listCheck.runOperation();

        eUSalesList_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>