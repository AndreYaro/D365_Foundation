<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventItemPriceActivationJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventItemPriceActivationJob extends RunBaseBatch implements BatchRetryable
{
    #OCCRetryCount

    QueryRun                    queryRun;

    NoYes                       purchasePrice;
    NoYes                       salesPrice;
    NoYes                       costPrice;
    NoYes                       netWeight;
    NoYes                       rateAndRatio;
    NoYes                       controlDate;
    NoYes                       skipActivationIfEqualPriceExists;
    NoYes                       abortOnError;
    NoYes                       recalculateProduction;

    CostingVersionId            fromCostingVersion;

    BatchHeader                 currentBatchHeader;

    DialogField                 dialogFieldPurchasePrice;
    DialogField                 dialogFieldSalesPrice;
    DialogField                 dialogFieldCostPrice;
    DialogField                 dialogFieldNetWeight;
    DialogField                 dialogFieldRateAndRatio;
    DialogField                 dialogFieldControlDate;
    DialogField                 dialogFieldControlExistingPrice;
    DialogField                 dialogFieldAbortOnError;
    DialogField                 dialogFieldRecalculateProduction;

    private CostManagementInstrumentationLogger logger;

    #DEFINE.CurrentVersion(4)

    #LOCALMACRO.CurrentList
        purchasePrice,
        salesPrice,
        costPrice,
        netWeight,
        rateAndRatio,
        controlDate,
        skipActivationIfEqualPriceExists,
        fromCostingVersion,
        abortOnError,
        recalculateProduction
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    final internal CostManagementInstrumentationLogger instrumentationLogger()
    {
        if (!logger)
        {
            logger = CostManagementInstrumentationLogger::createLogger(classStr(InventItemPriceActivationJob));
        }

        return logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCostSheetCalculationFactoryQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for cost sheet calculation factor.
    /// </summary>
    /// <returns>A <c>Query</c> object.</returns>
    protected Query buildCostSheetCalculationFactoryQuery()
    {
        Query factorQuery = new Query();
        QueryBuildDataSource queryBuildDataSource = factorQuery.addDataSource(tableNum(CostSheetCalculationFactor));

        QueryBuildRange queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(CostSheetCalculationFactor,VersionId));
        queryBuildRange.value(queryValue(fromCostingVersion));

        queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(CostSheetCalculationFactor,CostingVersionStatus));
        queryBuildRange.value(queryValue(CostingVersionStatus::Pending));

        queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(CostSheetCalculationFactor,FromDate));
        queryBuildRange.value(SysQuery::range(dateNull(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));

        queryBuildDataSource.addSortField(fieldNum(CostSheetCalculationFactor, SheetId));
        queryBuildDataSource.addSortField(fieldNum(CostSheetCalculationFactor, NodeId));
        queryBuildDataSource.addSortField(fieldNum(CostSheetCalculationFactor, ItemCode));
        queryBuildDataSource.addSortField(fieldNum(CostSheetCalculationFactor, ItemRelation));
        queryBuildDataSource.addSortField(fieldNum(CostSheetCalculationFactor, InventSiteId));
        queryBuildDataSource.addSortField(fieldNum(CostSheetCalculationFactor, FromDate), SortOrder::Descending);

        return factorQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activateCostSheetCalculationFactor</Name>
				<Source><![CDATA[
    protected void activateCostSheetCalculationFactor(boolean _activate)
    {
        CostSheetCalculationFactor  costSheetCalculationFactor;
        CostSheetCalculationFactor  oldCostSheetCalculationFactor;

        boolean costSheetCalculationFactorMayBeActivated()
        {
            return oldCostSheetCalculationFactor.SheetId      != costSheetCalculationFactor.SheetId      ||
                   oldCostSheetCalculationFactor.NodeId       != costSheetCalculationFactor.NodeId       ||
                   oldCostSheetCalculationFactor.ItemCode     != costSheetCalculationFactor.ItemCode     ||
                   oldCostSheetCalculationFactor.ItemRelation != costSheetCalculationFactor.ItemRelation ||
                   oldCostSheetCalculationFactor.InventSiteId != costSheetCalculationFactor.InventSiteId;
        }

        if (!rateAndRatio)
        {
            return;
        }

        CostSheet costSheet = CostSheetFactory::construct().createCostSheet(CostSheetModeStrategyEdit::construct());

        Query factorQuery = this.buildCostSheetCalculationFactoryQuery();

        QueryRun factorQueryRun = new QueryRun(factorQuery);

        FromDate            tmpFromDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        int                 numberOfRecordsActivated;
        CostSheetNodeCode   calculationNodeCode;

        if (_activate)
        {
            try
            {
                oldCostSheetCalculationFactor.clear();

                ttsbegin;
                numberOfRecordsActivated  = 0;

                while (factorQueryRun.next())
                {
                    costSheetCalculationFactor = factorQueryRun.get(tableNum(CostSheetCalculationFactor));
                    calculationNodeCode = costSheet.findNode(costSheetCalculationFactor.NodeId).getCode();

                    using (var activityContext = this.instrumentationLogger().activateActivities().activateCostSheetCalculationFactor(costSheetCalculationFactor.RecId, this.isInBatch(), this.parmCurrentBatch().BatchJobId))
                    {
                        if (costSheetCalculationFactorMayBeActivated() &&
                        costSheetCalculationFactor.hasNoActivePrice(calculationNodeCode, true))
                        {
                            this.activateOneCostSheetCalculationFactor(costSheetCalculationFactor, calculationNodeCode);
                            numberOfRecordsActivated++;

                            oldCostSheetCalculationFactor.data(costSheetCalculationFactor);
                        }
                    }
                }
                ttscommit;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        factorQueryRun.reset();
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            info(strFmt("@SYS112784", numberOfRecordsActivated));
        }
        else if (controlDate == NoYes::Yes)
        {
            // check dates
            while (factorQueryRun.next())
            {
                costSheetCalculationFactor = factorQueryRun.get(tableNum(CostSheetCalculationFactor));
                calculationNodeCode = costSheet.findNode(costSheetCalculationFactor.NodeId).getCode();

                if (costSheetCalculationFactorMayBeActivated() &&
                    costSheetCalculationFactor.hasNoActivePrice(calculationNodeCode, false))
                {
                    if (!this.checkFromDate(costSheetCalculationFactor.FromDate))
                    {
                        throw error(strFmt("@SYS112785",
                                           calculationNodeCode, date2StrUsr(costSheetCalculationFactor.FromDate, DateFlags::FormatAll), date2StrUsr(tmpFromDate, DateFlags::FormatAll)));
                    }
                    oldCostSheetCalculationFactor.data(costSheetCalculationFactor);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPriceToActivateSpecified</Name>
				<Source><![CDATA[
    protected boolean isPriceToActivateSpecified()
    {
        return purchasePrice || salesPrice || costPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceTypeRange</Name>
				<Source><![CDATA[
    protected str priceTypeRange()
    {
        return (purchasePrice ? (queryValue(CostingVersionPriceType::Purch)+',') : '') +
               (salesPrice    ? (queryValue(CostingVersionPriceType::Sales)+',') : '') +
               (costPrice     ? (queryValue(CostingVersionPriceType::Cost) +',') : '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventItemPriceSimQuery</Name>
				<Source><![CDATA[
    protected void buildInventItemPriceSimQuery()
    {
        QueryBuildDataSource queryBuildDataSource = queryRun.query().dataSourceTable(tableNum(InventItemPriceSim));

        QueryBuildRange queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(InventItemPriceSim,VersionId));
        queryBuildRange.value(queryValue(fromCostingVersion));

        queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(InventItemPriceSim,FromDate));
        queryBuildRange.value(SysQuery::range(dateNull(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));

        queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(InventItemPriceSim,PriceType));
        queryBuildRange.value(this.priceTypeRange());

        queryBuildDataSource.addSortField(fieldNum(InventItemPriceSim, ItemId));
        queryBuildDataSource.addSortField(fieldNum(InventItemPriceSim, PriceType));
        queryBuildDataSource.addSortField(fieldNum(InventItemPriceSim, InventDimId));
        queryBuildDataSource.addSortField(fieldNum(InventItemPriceSim, FromDate), SortOrder::Descending);
    }

]]></Source>
			</Method>
			<Method>
				<Name>activateInventItemPriceSim</Name>
				<Source><![CDATA[
    protected void activateInventItemPriceSim(boolean _activate)
    {
        InventItemPriceSim      inventItemPriceSim;
        InventItemPriceSim      oldInventItemPriceSim;
        int                     numberOfNetWeightActivated;
        boolean                 activatePrice = false;
        boolean                 priceIsActivated;

        Set                     costingVersionsToBeUpdated = new Set(Types::String);
        int                     priceRecordsCount;

        InventItemPriceActivationTasksBuilder tasksBuilder;

        void checkInventItemPriceSim()
        {
            if (!activatePrice)
                return;

            while (queryRun.next())
            {
                inventItemPriceSim = queryRun.get(tableNum(InventItemPriceSim));

                using (var activityContext = this.instrumentationLogger().activateActivities().activateInventItemPriceSim(inventItemPriceSim.RecId, this.isInBatch(), this.parmCurrentBatch().BatchJobId))
                {
                    if (this.isNewItem(inventItemPriceSim, oldInventItemPriceSim))
                    {
                        if (inventItemPriceSim.allowActivation(false))
                        {
                            if (!inventItemPriceSim.checkNoActivePrice(false) &&
                            !this.checkFromDate(inventItemPriceSim.FromDate))
                            {
                                throw error(strFmt("@SYS104965",inventItemPriceSim.ItemId, date2StrUsr(inventItemPriceSim.FromDate, DateFlags::FormatAll), date2StrUsr(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), DateFlags::FormatAll)));
                            }

                            if (! this.checkCostingTypeAndInventoryModel(inventItemPriceSim))
                            {
                                throw error(strFmt("@SYS111942",inventItemPriceSim.ItemId));
                            }

                            if (! this.checkPriceType(inventItemPriceSim))
                            {
                                throw error(strFmt("@SYS112053",
                                               enum2str(inventItemPriceSim.PriceType),
                                               inventItemPriceSim.VersionId));
                            }
                        }
                        oldInventItemPriceSim.data(inventItemPriceSim);
                    }
                }
            }
            oldInventItemPriceSim.clear();
            queryRun.reset();
        }

        activatePrice = this.isPriceToActivateSpecified();

        if (!activatePrice && !netWeight)
            return;

        this.buildInventItemPriceSimQuery();

        if (_activate)
        {
            int numberOfItemPricesActivated = 0;

            if (this.isInBatch())
            {
                tasksBuilder = InventItemPriceActivationTasksBuilder::construct()
                                                                   .setPrototype(this.constructTaskPrototype())
                                                                   .setBundleSize(this.getBundleSize());
            }

            while (queryRun.next())
            {
                inventItemPriceSim = queryRun.get(tableNum(InventItemPriceSim));

                if (this.isNewItem(inventItemPriceSim, oldInventItemPriceSim) &&
                    (controlDate == NoYes::No || inventItemPriceSim.checkNoActivePrice(false)) &&
                    (skipActivationIfEqualPriceExists == NoYes::No || inventItemPriceSim.checkActivePriceNotEqual(true)) &&
                    inventItemPriceSim.allowActivation(false))
                {
                    try
                    {
                        ttsbegin;
                        if (activatePrice)
                        {
                            if (this.isInBatch())
                            {
                                tasksBuilder.addInventItemPriceSimForActivation(inventItemPriceSim);
                                priceRecordsCount++;
                            }
                            else
                            {
                                priceIsActivated = this.activateOneInventItemPriceSim(inventItemPriceSim);
                            }

                            costingVersionsToBeUpdated.add(inventItemPriceSim.VersionId);
                        }

                        if (netWeight &&
                            inventItemPriceSim.PriceCalcId &&
                            inventItemPriceSim.ItemId != oldInventItemPriceSim.ItemId)
                        {
                            BOMCalcTable bomCalcTable = BOMCalcTable::find(inventItemPriceSim.PriceCalcId);
        
                            if (bomCalcTable &&
                                    bomCalcTable.CostCalculationMethod != BOMCostCalculationMethod::PurchaseCost)
                            {
                                this.activateNetWeight(inventItemPriceSim.ItemId, inventItemPriceSim.PriceCalcId);
        
                                costingVersionsToBeUpdated.add(inventItemPriceSim.VersionId);
                                numberOfNetWeightActivated++;
                            }
                        }

                        if (activatePrice)
                        {
                            // Increase numberOfItemPricesActivated when all updates are ok.
                            if (priceIsActivated)
                            {
                                numberOfItemPricesActivated++;
                            }
                        }

                        oldInventItemPriceSim.data(inventItemPriceSim);
                        ttscommit;
                    }
                    catch (Exception::UpdateConflict)
                    {
                        if (appl.ttsLevel() == 0)
                        {
                            if (xSession::currentRetryCount() >= #RetryNum)
                            {
                                throw Exception::UpdateConflictNotRecovered;
                            }
                            else
                            {
                                retry;
                            }
                        }
                        else
                        {
                            throw Exception::UpdateConflict;
                        }
                    }
                    catch(Exception::Error)
                    {
                        if (abortOnError == NoYes::Yes)
                            throw Exception::Error;
                    }
                }
            }

            if (this.isInBatch() && activatePrice)
            {
                this.scheduleItemPriceActivationTasks(tasksBuilder.getResult(), queryRun.query(), priceRecordsCount);
            }

            this.updateLastActivationForCostingVersions(costingVersionsToBeUpdated);

            if (activatePrice && !this.isInBatch())
            {
                info(strFmt("@SYS104966", numberOfItemPricesActivated));

                if (recalculateProduction)
                {
                    InventCostProdRecalcMultiJob productionCalcJob = InventCostProdRecalcMultiJob::construct();
                    productionCalcJob.runOperation();
                }
            }

            if (netWeight)
            {
                info(strFmt("@SYS104967", numberOfNetWeightActivated));
            }
        }
        else
        {
            if (controlDate == NoYes::Yes)
            {
                checkInventItemPriceSim();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>activateNetWeight</Name>
				<Source><![CDATA[
    protected void activateNetWeight(
        ItemId          _itemId,
        PriceCalcId     _priceCalcId
        )
    {
        BOMCalcTable bomCalcTable = BOMCalcTable::find(_priceCalcId);

        if (bomCalcTable.RecId)
        {
            InventTable inventTable = InventTable::find(_itemId, true);
            inventTable.NetWeight = bomCalcTable.Qty ? bomCalcTable.NetWeight / bomCalcTable.Qty : bomCalcTable.NetWeight;
            inventTable.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>activateOneCostSheetCalculationFactor</Name>
				<Source><![CDATA[
    public void activateOneCostSheetCalculationFactor(CostSheetCalculationFactor _costSheetCalculationFactor, CostSheetNodeCode _calculationNodeCode)
    {
        InventPriceActivation inventPriceActivation = InventPriceActivationCalcFactor::newCostSheetCalculationFactor(    _costSheetCalculationFactor.NodeId,
                                                                                                                          _calculationNodeCode,
                                                                                                                          _costSheetCalculationFactor.ItemCode,
                                                                                                                          _costSheetCalculationFactor.ItemRelation,
                                                                                                                          _costSheetCalculationFactor.VersionId,
                                                                                                                          _costSheetCalculationFactor.FromDate,
                                                                                                                          _costSheetCalculationFactor.InventSiteId,
                                                                                                                          _costSheetCalculationFactor);
        inventPriceActivation.activate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>activateOneInventItemPriceSim</Name>
				<Source><![CDATA[
    public boolean activateOneInventItemPriceSim(InventItemPriceSim _inventItemPriceSim)
    {
        boolean activatePrice = InventItemPriceActivationTaskActivateSim::activateOneInventItemPriceSim(_inventItemPriceSim);

        return activatePrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activateOneRouteCostCategoryPrice</Name>
				<Source><![CDATA[
    public void activateOneRouteCostCategoryPrice(RouteCostCategoryPrice _routeCostCategoryPrice)
    {
        InventPriceActivation inventPriceActivation = InventPriceActivationCostCate::newRouteCostCategory(    _routeCostCategoryPrice.CostCategoryId,
                                                                                                              _routeCostCategoryPrice.VersionId,
                                                                                                              _routeCostCategoryPrice.FromDate,
                                                                                                              _routeCostCategoryPrice.InventSiteId);
        inventPriceActivation.activate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>activateRouteCostCategoryPrice</Name>
				<Source><![CDATA[
    protected void activateRouteCostCategoryPrice(boolean _activate)
    {
        RouteCostCategoryPrice  routeCostCategoryPrice;
        RouteCostCategoryPrice  oldRouteCostCategoryPrice;
        int                     numberOfRecordsActivated;

        if (!rateAndRatio)
            return;

        Query routeQuery = new Query();
        QueryBuildDataSource queryBuildDataSource = routeQuery.addDataSource(tableNum(RouteCostCategoryPrice));

        QueryBuildRange queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(RouteCostCategoryPrice,VersionId));
        queryBuildRange.value(queryValue(fromCostingVersion));

        queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(RouteCostCategoryPrice,CostingVersionStatus));
        queryBuildRange.value(queryValue(CostingVersionStatus::Pending));

        queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(RouteCostCategoryPrice,FromDate));
        queryBuildRange.value(SysQuery::range(dateNull(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));

        queryBuildDataSource.addSortField(fieldNum(RouteCostCategoryPrice, CostCategoryId));
        queryBuildDataSource.addSortField(fieldNum(RouteCostCategoryPrice, InventSiteId));
        queryBuildDataSource.addSortField(fieldNum(RouteCostCategoryPrice, FromDate), SortOrder::Descending);

        QueryRun routeQueryRun = new QueryRun(routeQuery);

        FromDate tmpFromDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        if (_activate)
        {
            try
            {
                ttsbegin;
                numberOfRecordsActivated  = 0;

                while (routeQueryRun.next())
                {
                    routeCostCategoryPrice = routeQueryRun.get(tableNum(RouteCostCategoryPrice));
                    
                    using (var activityContext = this.instrumentationLogger().activateActivities().activateRouteCostCategoryPrice(routeCostCategoryPrice.RecId, this.isInBatch(), this.parmCurrentBatch().BatchJobId))
                    {
                        if (routeCostCategoryPrice.hasNoActivePrice(true))
                        {
                            this.activateOneRouteCostCategoryPrice(routeCostCategoryPrice);
                            numberOfRecordsActivated++;

                            oldRouteCostCategoryPrice.data(routeCostCategoryPrice);
                        }
                    }
                }
                ttscommit;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            info(strFmt("@SYS104969", numberOfRecordsActivated));
        }
        else if (controlDate == NoYes::Yes)
        {
            // check dates
            while (routeQueryRun.next())
            {
                routeCostCategoryPrice = routeQueryRun.get(tableNum(RouteCostCategoryPrice));

                if (routeCostCategoryPrice.hasNoActivePrice(false))
                {
                    if (!this.checkFromDate(routeCostCategoryPrice.FromDate))
                    {
                        throw error(strFmt("@SYS104968",routeCostCategoryPrice.CostCategoryId, date2StrUsr(routeCostCategoryPrice.FromDate, DateFlags::FormatAll), date2StrUsr(tmpFromDate, DateFlags::FormatAll)));
                    }
                    oldRouteCostCategoryPrice.data(routeCostCategoryPrice);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCostingTypeAndInventoryModel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the version contains a valid item.
    /// </summary>
    /// <param name="_inventItemPriceSim">
    ///    The <c>Price</c> record to be checked.
    /// </param>
    /// <returns>
    ///    true if the item and costing type is a valid combination; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Standard cost items may only be transferred from a version that is marked with costing type:
    ///    Standard.
    /// </remarks>
    protected boolean checkCostingTypeAndInventoryModel(InventItemPriceSim _inventItemPriceSim)
    {
        boolean         ret = InventItemPriceActivationTaskActivateSim::checkCostingTypeAndInventoryModel(_inventItemPriceSim);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFromDate</Name>
				<Source><![CDATA[
    protected boolean checkFromDate(FromDate _fromDate)
    {
        boolean ret = true;

        if (controlDate == NoYes::Yes)
        {
            if (_fromDate != DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
            {
                ret = false;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPriceType</Name>
				<Source><![CDATA[
    protected boolean checkPriceType(InventItemPriceSim _inventItemPriceSim)
    {
        return InventItemPriceActivationTaskActivateSim::checkPriceType(_inventItemPriceSim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructTaskPrototype</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes a new instance of the prototype task.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>InventItemPriceActivationTaskActivateSim</c> class.
    /// </returns>
    private InventItemPriceActivationTaskActivateSim constructTaskPrototype()
    {
        InventItemPriceActivationTaskActivateSim prototype = InventItemPriceActivationTaskActivateSim::construct();

        prototype.parmAbortOnError(abortOnError);

        return prototype;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialog.addGroup("@SYS121351");
        dialog.addFieldValue(extendedTypeStr(CostingVersionId), fromCostingVersion).enabled(false);
        dialog.addFieldValue(extendedTypeStr(Name), CostingVersion::find(fromCostingVersion).Name).enabled(false);
        dialog.addGroup("@SYS121350");
        dialogFieldPurchasePrice    = dialog.addFieldValue(enumStr(NoYes), purchasePrice, "@SYS12550");
        dialogFieldSalesPrice       = dialog.addFieldValue(enumStr(NoYes), salesPrice, "@SYS5755");
        dialogFieldCostPrice        = dialog.addFieldValue(enumStr(NoYes), costPrice, "@SYS38495");
        dialogFieldNetWeight        = dialog.addFieldValue(enumStr(NoYes), netWeight, "@SYS23743");
        dialogFieldRateAndRatio     = dialog.addFieldValue(enumStr(NoYes), rateAndRatio, "@SYS104960");

        dialog.addGroup("@SYS53323");
        dialogFieldControlDate      = dialog.addFieldValue(enumStr(NoYes), controlDate, "@SYS24050", "@SYS104995");
        dialogFieldControlExistingPrice = dialog.addFieldValue(enumStr(NoYes), skipActivationIfEqualPriceExists, "@SYP4882093", "@SYP4882094");

        dialog.addGroup("@SYS107201");
        dialogFieldAbortOnError     = dialog.addFieldValue(enumStr(NoYes), abortOnError, "@SYS105290", "@SYS105290");

        dialog.addGroup("@SYS4009911");
        dialogFieldRecalculateProduction = dialog.addFieldValue(enumStr(NoYes), recalculateProduction, "@SYS4009912");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBundleSize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the bundle size to be used during bundling of price activation tasks.
    /// </summary>
    /// <returns>
    /// Maximum mumber of items to be placed in one bundle.
    /// </returns>
    private InventItemPriceActivationBundleSize getBundleSize()
    {
        InventParameters inventoryParameters = InventParameters::find(false);
        InventItemPriceActivationBundleSize bundleSize = inventoryParameters.InventItemPriceActivationBundleSize;

        return bundleSize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        purchasePrice   = dialogFieldPurchasePrice.value();
        salesPrice      = dialogFieldSalesPrice.value();
        costPrice       = dialogFieldCostPrice.value();
        netWeight       = dialogFieldNetWeight.value();
        rateAndRatio    = dialogFieldRateAndRatio.value();
        controlDate     = dialogFieldControlDate.value();
        skipActivationIfEqualPriceExists    = dialogFieldControlExistingPrice.value();
        abortOnError    = dialogFieldAbortOnError.value();
        recalculateProduction = dialogFieldRecalculateProduction.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCurrentBatchHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes batch header of the current job if executed in batch.
    /// </summary>
    private void initCurrentBatchHeader()
    {
        if (this.isInBatch())
        {
            currentBatchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables.
    /// </summary>
    /// <remarks>
    ///    This method is called when no <c>SysLastValue</c> record can be found when calling the
    ///    <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        super();

        Query query = new Query();
        query.addDataSource(tableNum(InventItemPriceSim));

        query.dataSourceTable(tableNum(InventItemPriceSim)).addRange(fieldNum(InventItemPriceSim, VersionId)).status(RangeStatus::Hidden);
        query.dataSourceTable(tableNum(InventItemPriceSim)).addRange(fieldNum(InventItemPriceSim, FromDate)).status(RangeStatus::Hidden);
        query.dataSourceTable(tableNum(InventItemPriceSim)).addRange(fieldNum(InventItemPriceSim, PriceType)).status(RangeStatus::Hidden);

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNewItem</Name>
				<Source><![CDATA[
    protected    boolean isNewItem(
        InventItemPriceSim _inventItemPriceSim,
        InventItemPriceSim _oldInventItemPriceSim
        )
    {
        boolean ret = false;

        if ((_inventItemPriceSim.ItemId         != _oldInventItemPriceSim.ItemId)       ||
            (_inventItemPriceSim.PriceType      != _oldInventItemPriceSim.PriceType)   ||
            (_inventItemPriceSim.InventDimId    != _oldInventItemPriceSim.InventDimId))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostPrice</Name>
				<Source><![CDATA[
    public NoYes parmCostPrice(NoYes _costPrice = costPrice)
    {
        costPrice = _costPrice;

        return costPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromCostingVersion</Name>
				<Source><![CDATA[
    public CostingVersionId parmFromCostingVersion(CostingVersionId _costingVersionId = fromCostingVersion)
    {
        fromCostingVersion = _costingVersionId;

        return fromCostingVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRateAndRatio</Name>
				<Source><![CDATA[
    public NoYes parmRateAndRatio(NoYes _rateAndRatio = rateAndRatio)
    {
        rateAndRatio = _rateAndRatio;

        return rateAndRatio;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    ///    dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    ///    in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        using (var activityContext = this.instrumentationLogger().activateActivities().run(this.isInBatch(), this.parmCurrentBatch().BatchJobId))
        {
            if (!this.validate())
            {
                throw error("@SYS104961");
            }

            this.initCurrentBatchHeader();

            this.activateRouteCostCategoryPrice(true);
            this.activateInventItemPriceSim(true);
            this.activateCostSheetCalculationFactor(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    ///    true if the task is run on the server; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Your classes that extend this class must override the <c>runsImpersonated</c> method and return
    ///    false if you want those tasks to run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleItemPriceActivationTasks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares and schedules price activation tasks.
    /// </summary>
    /// <param name="_taskEnumerator">
    /// Enumerator for collection of instances of the <c>InventItemPriceActivationTaskActivateSim</c> class.
    /// </param>
    /// <param name="_query">
    /// Query for the <c>InventItemPriceSim</c> price records that should be activated.
    /// </param>
    /// <param name="_scheduled">
    /// Number of price records scheduled for activation.
    /// </param>
    private void scheduleItemPriceActivationTasks(
        Enumerator  _taskEnumerator,
        Query       _query,
        int         _scheduled
        )
    {
        ttsBegin;

        InventItemPriceActivationTaskComplete completionTask = InventItemPriceActivationTaskComplete::construct();
        completionTask.parmPricesQuery(_query);
        completionTask.parmPricesScheduledCount(_scheduled);
        completionTask.parmRecalculateProduction(recalculateProduction);
        completionTask.batchInfo().parmRuntimeTask(true);
        completionTask.batchInfo().parmGroupId(currentBatch.GroupId);

        currentBatchHeader.addTask(completionTask);

        while (_taskEnumerator.moveNext())
        {
            InventItemPriceActivationTaskActivateSim task = _taskEnumerator.current();
            task.batchInfo().parmRuntimeTask(true);
            task.batchInfo().parmGroupId(currentBatch.GroupId);
            currentBatchHeader.addTask(task);
            currentBatchHeader.addDependency(completionTask, task, BatchDependencyStatus::FinishedOrError);
        }

        currentBatchHeader.save();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether to add a Select button to the dialog.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    ///    return a valid <c>QueryRun</c> object.If you change the return value to false the button will no
    ///    longer be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        container   packedQuery;
        Integer     version         = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList, packedQuery] = packedClass;

                if (packedQuery)
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLastActivationForCostingVersions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates last activation and last updated date for provided collection of costing versions.
    /// </summary>
    /// <param name="_costingVersionsToBeUpdated">
    /// A collection of costing versions to be updated.
    /// </param>
    private void updateLastActivationForCostingVersions(Set _costingVersionsToBeUpdated)
    {
        ttsBegin;

        SetEnumerator costingVersionIdEnumerator = _costingVersionsToBeUpdated.getEnumerator();

        while (costingVersionIdEnumerator.moveNext())
        {
            CostingVersionId costingVersionId = costingVersionIdEnumerator.current();
            CostingVersion::updateLastActivation(costingVersionId);
            CostingVersion::updateLastUpdated(costingVersionId);
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = super();

        if (!purchasePrice && !salesPrice && !costPrice && !netWeight && !rateAndRatio)
        {
            ret = checkFailed("@SYS24922");
        }

        this.activateRouteCostCategoryPrice(false);
        this.activateInventItemPriceSim(false);
        this.activateCostSheetCalculationFactor(false);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activateCostingVersionCost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Transfers all cost prices of a costing version to active.
    /// </summary>
    /// <param name="_costingVersion">
    ///    The costing version for which all the cost prices should be activated.
    /// </param>

    public static void activateCostingVersionCost(CostingVersion   _costingVersion)
    {
        InventItemPriceActivationJob    inventItemPriceActivationJob;

        inventItemPriceActivationJob    = InventItemPriceActivationJob::construct();
        inventItemPriceActivationJob.initParmDefault();
        inventItemPriceActivationJob.parmFromCostingVersion(_costingVersion.VersionId);
        inventItemPriceActivationJob.parmCostPrice(NoYes::Yes);
        inventItemPriceActivationJob.parmRateAndRatio(NoYes::Yes);
        inventItemPriceActivationJob.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>activateInventItemPriceSimExt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Activates one single simulated invent item price.
    /// </summary>
    /// <param name="_inventItemPriceSim">
    ///    The simulated invent item price that should be activated.
    /// </param>

    public static void activateInventItemPriceSimExt(InventItemPriceSim   _inventItemPriceSim)
    {
        InventItemPriceActivationJob    inventItemPriceActivationJob;

        inventItemPriceActivationJob  = InventItemPriceActivationJob::construct();
        inventItemPriceActivationJob.activateOneInventItemPriceSim(_inventItemPriceSim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventItemPriceActivationJob construct()
    {
        return new InventItemPriceActivationJob();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS104970";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        InventItemPriceActivationJob    inventItemPriceActivationJob;
        InventItemPriceSim              inventItemPriceSim;
        Common                          record;
        RouteCostCategoryPrice          routeCostCategoryPrice;
        CostSheetCalculationFactor      costSheetCalculationFactor;
        CostSheet                       costSheet;
        boolean                         activateItemYesToAll;
        boolean                         activateItemNoToAll;
        boolean                         activateItemCancel;
        boolean                         noneDimensionDefaultingSourceYesToAll;
        boolean                         noneDimensionDefaultingSourceNoToAll;
        boolean                         noActivePrice;

        boolean activateItem()
        {
            InventItemPrice currentInventItemPrice;
            boolean         doActivate                = true;
            DialogButton    userResponse;

            if (! noActivePrice)
            {
                if (activateItemNoToAll)
                {
                    doActivate = false;
                }
                else
                {
                    currentInventItemPrice = InventItemPrice::findCurrent(inventItemPriceSim.ItemId,
                                                                            inventItemPriceSim.PriceType,
                                                                            inventItemPriceSim.InventDimId);
                    userResponse = Box::yesAllNoAllCancel(strFmt("@SYS106972",currentInventItemPrice.ItemId,
                                    currentInventItemPrice.VersionId,
                                    currentInventItemPrice.ActivationDate,
                                    date2StrUsr(inventItemPriceSim.FromDate, DateFlags::FormatAll)), DialogButton::No);

                    if (userResponse == DialogButton::No || userResponse == DialogButton::NoToAll || userResponse == DialogButton::Cancel)
                    {
                        doActivate = false;
                    }

                    activateItemCancel = userResponse == DialogButton::Cancel;
                    activateItemNoToAll = userResponse == DialogButton::NoToAll;
                    activateItemYesToAll = userResponse == DialogButton::YesToAll;
                }
            }

            if (InventCostDimensionDefaultingSourceFeature::instance().isEnabled() && doActivate)
            {
                CostParameters costParameters = CostParameters::find();
                if (costParameters.DimensionDefaultingSource == DimensionDefaultingSource::None)
                {
                    if (noneDimensionDefaultingSourceNoToAll)
                    {
                        doActivate = false;
                    }
                    else
                    {
                        boolean isStandardCostItem = InventTable::find(inventItemPriceSim.ItemId).modelGroup().inventModelType().stdCostBased();

                        if (!noActivePrice && isStandardCostItem)
                        {
                            userResponse = Box::yesAllNoAllCancel("@SCM:InventItemPriceActivationWithoutFinancialDimension", DialogButton::No);
                            if (userResponse == DialogButton::No || userResponse == DialogButton::NoToAll || userResponse == DialogButton::Cancel)
                            {
                                doActivate = false;
                            }

                            activateItemCancel = userResponse == DialogButton::Cancel;
                            noneDimensionDefaultingSourceNoToAll = userResponse == DialogButton::NoToAll;
                            noneDimensionDefaultingSourceYesToAll = userResponse == DialogButton::YesToAll;
                        }
                    }
                }
                else
                {
                    noneDimensionDefaultingSourceYesToAll = true;
                }
            }
            else
            {
                noneDimensionDefaultingSourceYesToAll = true;
            }

            return doActivate;
        }

        boolean activateCostCategory()
        {
            RouteCostCategoryPrice  currentRouteCostCategoryPrice;
            boolean                 doActivate                = true;

            if (! routeCostCategoryPrice.hasNoActivePrice(false))
            {
                currentRouteCostCategoryPrice = RouteCostCategoryPrice::findCurrent(routeCostCategoryPrice.CostCategoryId, routeCostCategoryPrice.InventSiteId);

                if (Box::yesNo(strFmt("@SYS106973",currentRouteCostCategoryPrice.CostCategoryId,
                                                   currentRouteCostCategoryPrice.VersionId,
                                                   date2StrUsr(currentRouteCostCategoryPrice.FromDate, DateFlags::FormatAll),
                                                   date2StrUsr(routeCostCategoryPrice.FromDate, DateFlags::FormatAll)), DialogButton::No) == DialogButton::No)
                {
                    doActivate = false;
                }
            }
            return doActivate;
        }

        boolean activateCalculationFactor()
        {
            CostSheetCalculationFactor currentCostSheetCalculationFactor;
            boolean                     doActivate                = true;
            CostSheetNodeCode          calculationNodeCode         = costSheet.findNode(costSheetCalculationFactor.NodeId).getCode();

            if (!costSheetCalculationFactor.hasNoActivePrice(calculationNodeCode, false))
            {
                currentCostSheetCalculationFactor = CostSheetCalculationFactor::findCurrent(costSheetCalculationFactor.NodeId,
                                                                                              costSheetCalculationFactor.ItemCode,
                                                                                              costSheetCalculationFactor.ItemRelation,
                                                                                              costSheetCalculationFactor.InventSiteId,
                                                                                              costSheetCalculationFactor);

                if (Box::yesNo(strFmt("@SYS112787",
                                      calculationNodeCode,
                                      currentCostSheetCalculationFactor.VersionId,
                                      date2StrUsr(currentCostSheetCalculationFactor.FromDate, DateFlags::FormatAll),
                                      date2StrUsr(costSheetCalculationFactor.FromDate, DateFlags::FormatAll)), DialogButton::No) == DialogButton::No)
                {
                    doActivate = false;
                }
            }
            return doActivate;
        }

        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContext(args))
        {
            if (args && args.record())
            {
                switch (args.record().TableId)
                {
                    case tableNum(InventItemPriceSim) :
                        FormDataSource inventItemPriceSimDS = FormDataUtil::getFormDataSource(args.record());
                        for (record = inventItemPriceSimDS.getFirst(true)
                                    ? inventItemPriceSimDS.getFirst(true)
                                    : inventItemPriceSimDS.cursor();
                        record && !activateItemCancel;
                        record = inventItemPriceSimDS.getNext())
                        {
                            inventItemPriceSim = record as InventItemPriceSim;
                            noActivePrice = inventItemPriceSim.checkNoActivePrice(false);
                        
                            if (inventItemPriceSim.allowActivation(false) && ((activateItemYesToAll && noneDimensionDefaultingSourceYesToAll) || activateItem()))
                            {
                                inventItemPriceActivationJob  = InventItemPriceActivationJob::construct();
                                inventItemPriceActivationJob.activateOneInventItemPriceSim(inventItemPriceSim);
                            }
                        }
                        break;

                    case tableNum(RouteCostCategoryPrice) :
                        routeCostCategoryPrice      = args.record();

                        if (activateCostCategory())
                        {
                            inventItemPriceActivationJob  = InventItemPriceActivationJob::construct();
                            inventItemPriceActivationJob.activateOneRouteCostCategoryPrice(routeCostCategoryPrice);
                        }
                        break;

                    case tableNum(CostSheetCalculationFactor) :
                        costSheetCalculationFactor = args.record();
                        costSheet = args.parmObject();

                        if (costSheet && activateCalculationFactor())
                        {
                            inventItemPriceActivationJob  = InventItemPriceActivationJob::construct();
                            inventItemPriceActivationJob.activateOneCostSheetCalculationFactor(costSheetCalculationFactor,
                                                                                                costSheet.findNode(costSheetCalculationFactor.NodeId).getCode());
                        }
                        break;

                    case tableNum(CostingVersion) :
                        CostingVersion costingVersion = args.record();
                        inventItemPriceActivationJob = InventItemPriceActivationJob::construct();
                        inventItemPriceActivationJob.getLast();
                        inventItemPriceActivationJob.parmFromCostingVersion(costingVersion.VersionId);
                        if (inventItemPriceActivationJob.prompt())
                        {
                            inventItemPriceActivationJob.runOperation();
                        }
                        break;

                    default:
                        throw error(Error::missingRecord(funcName()));
                }
            }
            else
            {
                throw error(Error::missingRecord(funcName()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>