<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostSheetPanel_BOMCalcTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CostSheetPanel_BOMCalcTrans</c> class uses <c>PriceCalcId</c> value to fetch
///    <c>BOMCalcTrans</c> records that will be used in costing sheet representation.
/// </summary>
/// <remarks>
///    The class should be used by <c>BOMCalcTrans</c> form.
/// </remarks>
class CostSheetPanel_BOMCalcTrans extends CostSheetPanel
{
    PriceCalcId     priceCalcId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>costType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>CostPriceType</c> enumeration value that represents the branch of the costing sheet
    ///    displayed in the grid.
    /// </summary>
    /// <returns>
    ///    A value in the <c>CostPriceType</c> enumeration type.
    /// </returns>
    protected CostPriceType costType()
    {
        //Determine the calculation type
        BOMCalcTrans bomCalcTrans;

        select firstonly CalcType
            from bomCalcTrans
            where bomCalcTrans.PriceCalcId == priceCalcId &&
                  bomCalcTrans.Level == 0;

        switch (bomCalcTrans.CalcType)
        {
            case ItemCalcType::Purchase:
                return CostPriceType::Purchase;
            case ItemCalcType::Production:
                return CostPriceType::COGM;
            default:
                // We're not expecting any other type at this point
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the dynamically built controls.
    /// </summary>
    /// <remarks>
    /// This method should be executed before the <c>super</c> method call in the <c>init</c> method of the
    /// caller form.
    /// </remarks>
    public void init()
    {
        super();

        view = CostSheetPanelView::CostSheet;
        viewComboBox.selection(enum2int(view));
        viewComboBox.visible(false);

        per = CostSheetPanelPer::Unit;
        perComboBox.selection(enum2int(per));

        qty = 1;
        qtyReal.realValue(qty);
        qtyReal.allowEdit(this.allowEditQty());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initUnitIdAndLotSize</Name>
				<Source><![CDATA[
/// <summary>
    /// Initializes the unit ID and the lot size values.
    /// </summary>
    protected void initUnitIdAndLotSize()
    {
        lotSize = BOMCalcTable::find(priceCalcId).Qty;

        if (lotSize == 0.00)
        {
            lotSize = 1.00;
        }

        if (per == CostSheetPanelPer::LotSize)
        {
            qtyReal.realValue(lotSize);
        }

        unitID = BOMCalcTable::find(priceCalcId).UnitId;
        unitIdString.text(unitID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packedRecordsList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a packed list that contains cost rollup records that will later be used as a source for
    /// cost rollup or costing sheet grids.
    /// </summary>
    /// <returns>
    /// A container.
    /// </returns>
    protected container packedRecordsList()
    {
        return CostSheetPanel_BOMCalcTrans::packedServerPriceCalcId(priceCalcId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceCalcId</Name>
				<Source><![CDATA[
public PriceCalcId parmPriceCalcId(PriceCalcId _priceCalcId = priceCalcId)
    {
        priceCalcId = _priceCalcId;

        return priceCalcId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
/// <summary>
    ///    Creates an instance of the class and adds controls to the caller form at runtime.
    /// </summary>
    /// <param name="_formRun">
    ///    The caller form.
    /// </param>
    /// <param name="_parentId">
    ///    The ID of the caller form tab page or group to which to add the complex control.
    /// </param>
    /// <returns>
    ///    The instance of the class.
    /// </returns>
    /// <remarks>
    ///    This method should be called before the <c>super</c> method call in the <c>init</c> method of the
    ///    caller form.
    /// </remarks>
    public static CostSheetPanel_BOMCalcTrans newForm(
        FormRun         _formRun,
        FormControlId   _parentId)
    {
        CostSheetPanel_BOMCalcTrans costSheetPanel = new CostSheetPanel_BOMCalcTrans();

        costSheetPanel.parmFormRun(_formRun);
        costSheetPanel.parmParentId(_parentId);
        costSheetPanel.build();

        return costSheetPanel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packedServerPriceCalcId</Name>
				<Source><![CDATA[
/// <summary>
    /// Fetches <c>BOMCalcTrans</c> records and fills in the cost rollup table buffer.
    /// </summary>
    /// <param name="_priceCalcId">
    /// The price calculation ID.
    /// </param>
    /// <returns>
    /// A packed <c>List</c> object that contains cost rollup records.
    /// </returns>
    protected static container packedServerPriceCalcId(PriceCalcId  _priceCalcId)
    {
        CostTmpCostRollup   costTmpCostRollup;
        BOMCalcTrans        bomCalcTransFieldList;

        List list = new List(Types::Record);

        bomCalcTransFieldList.recordLevelSecurity(true);

        while select CostGroupId, Level, bom, Qty, sum(CostPriceQty), sum(CostMarkupQty) from bomCalcTransFieldList
            group by CostGroupId, Level, bom, Qty
            where bomCalcTransFieldList.PriceCalcId == _priceCalcId
               && !(bomCalcTransFieldList.bom == NoYes::Yes && bomCalcTransFieldList.Level > 1)
               && bomCalcTransFieldList.CostCalculationMethod != BOMCostCalculationMethod::PurchaseCost
        {
            costTmpCostRollup.clear();
            costTmpCostRollup.CostGroupId = bomCalcTransFieldList.CostGroupId;
            costTmpCostRollup.Level       = CostTmpCostRollup::level2InventCostLevel(bomCalcTransFieldList.Level);
            costTmpCostRollup.Split       = bomCalcTransFieldList.bom;
            costTmpCostRollup.CostAmount  = bomCalcTransFieldList.CostPriceQty * bomCalcTransFieldList.qty() + bomCalcTransFieldList.CostMarkupQty;
            costTmpCostRollup.insert();
        }

        // As cost of purchase is not the sub-node of Cost of good manufactured, handle it specially.
        while select CostGroupId, Level, bom, Qty, sum(CostPriceQty), sum(CostMarkupQty) from bomCalcTransFieldList
            group by CostGroupId, Level, bom, Qty
            where bomCalcTransFieldList.PriceCalcId == _priceCalcId
               && !(bomCalcTransFieldList.bom == NoYes::Yes && bomCalcTransFieldList.Level > 1)
               && bomCalcTransFieldList.CostCalculationMethod == BOMCostCalculationMethod::PurchaseCost
               && bomCalcTransFieldList.bom == NoYes::Yes
        {
            costTmpCostRollup.clear();
            costTmpCostRollup.CostGroupId = bomCalcTransFieldList.CostGroupId;
            costTmpCostRollup.Level       = CostTmpCostRollup::level2InventCostLevel(bomCalcTransFieldList.Level);
            costTmpCostRollup.Split       = NoYes::No;
            costTmpCostRollup.CostAmount  = bomCalcTransFieldList.CostPriceQty * bomCalcTransFieldList.qty() + bomCalcTransFieldList.CostMarkupQty;
            costTmpCostRollup.insert();
        }

        while select CostGroupId, Level, Split, sum(CostAmount) from costTmpCostRollup
            group by CostGroupId, Level, Split
        {
            list.addEnd(costTmpCostRollup);
        }

        return list.pack();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
