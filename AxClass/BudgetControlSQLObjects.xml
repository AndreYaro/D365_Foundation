<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlSQLObjects</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetControlSQLObjects</c> class manages the configuration of the budget control Microsoft
/// SQL Server objects.
/// </summary>
public class BudgetControlSQLObjects extends ApplicationSQLObjects
{
    // Version must be incremented any time changes are made to the sql objects in order to trigger an upgrade.
    internal const BudgetControlSQLObjectVersion CurrentStoredProcVersion = 9;
    internal const int DefaultApplockTimeout = 120000;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isVersionCurrent</Name>
				<Source><![CDATA[
    internal static boolean isVersionCurrent()
    {
        BudgetControlParameters parameters = BudgetControlParameters::find();
        return parameters.RecId != 0 && parameters.StoredProcVersion == CurrentStoredProcVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFunctions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the budget control SQL functions.
    /// </summary>
    /// <returns>
    ///    true if the function creation was successful; otherwise, false.
    /// </returns>
    protected boolean createFunctions()
    {
        boolean isSuccessful = true;

        Array functions = BudgetControlSQLObjects::getObjectInstances(BudgetControlSQLObjectType::Function);

        for (int i = 1; i <= functions.lastIndex(); i++)
        {
            BudgetControlISQLObject sqlFunction = functions.value(i);

            if (sqlFunction)
            {
                isSuccessful = isSuccessful && this.createFunction(sqlFunction);
            }
        }

        return isSuccessful;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFunction</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the a function based on the given <c>BudgetControlISQLObject</c>.
    /// </summary>
    /// <returns>
    ///    true if the function creation was successful; otherwise, false.
    /// </returns>
    private boolean createFunction(BudgetControlISQLObject _sqlObject)
    {
        boolean isSuccessful;
        str sqlStatementText;

        // Drop the function.
        isSuccessful = this.dropFunction(_sqlObject.getName());

        if (isSuccessful)
        {
            // Create the function.
            sqlStatementText = _sqlObject.getDefinition();

            isSuccessful = this.executeSqlStatementWithParameters(sqlStatementText, SqlParams::create());
        }

        return isSuccessful;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createStoredProcedures</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the budget control SQL stored procedures.
    /// </summary>
    /// <returns>
    /// true if the stored procedure creation commands were successful; otherwise, false.
    /// </returns>
    protected boolean createStoredProcedures()
    {
        boolean isSuccessful = true;

        Array procedures = BudgetControlSQLObjects::getObjectInstances(BudgetControlSQLObjectType::StoredProcedure);

        for (int i = 1; i <= procedures.lastIndex(); i++)
        {
            BudgetControlISQLObject procedure = procedures.value(i);

            if (procedure)
            {
                isSuccessful = isSuccessful && this.createProcedure(procedure);
            }
        }

        return isSuccessful;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProcedure</Name>
				<Source><![CDATA[
    private boolean createProcedure(BudgetControlISQLObject _sqlObject)
    {
        boolean isSuccessful;
        str sqlStatementText;

        // Drop the stored procedure.
        isSuccessful = this.dropProcedure(_sqlObject.getName());

        if (isSuccessful)
        {
            sqlStatementText = _sqlObject.getDefinition();
            isSuccessful = this.executeSqlStatementWithParameters(sqlStatementText, SqlParams::create());
        }

        return isSuccessful;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getObjectInstances</Name>
				<Source><![CDATA[
    internal static Array getObjectInstances(BudgetControlSQLObjectType _objectType)
    {
        SysPluginMetadataCollection metadataCollection = new SysPluginMetadataCollection();
        metadataCollection.SetManagedValue(enumStr(BudgetControlSQLObjectType), _objectType);
        return SysPluginFactory::Instances(identifierStr(Dynamics.AX.Application), classStr(BudgetControlISQLObject), metadataCollection);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existView</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the SQL view with the specified name exists.
    /// </summary>
    /// <remarks>
    /// Should be moved to ApplicationSQLObjects when appropriate.
    /// </remarks>
    /// <param name="_viewName">
    ///    The name of the view.
    /// </param>
    /// <returns>
    ///    true if the SQL view exists; otherwise, false.
    /// </returns>
    private boolean existView(str _viewName)
    {
        str sqlStatementText;
        ResultSet resultSet;
        boolean viewExists;

        sqlStatementText = strFmt(@"
            SELECT 1
            FROM sys.views v WITH (NOLOCK)
            WHERE v.[name] = N'%1';
            ", _viewName);

            resultSet = this.executeSqlStatementQueryWithParameters(sqlStatementText, SqlParams::create());

        if (resultSet && resultSet.next())
        {
            viewExists = resultSet.getBoolean(1);
        }

        return viewExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doAllViewsExist</Name>
				<Source><![CDATA[
    private boolean doAllViewsExist()
    {
        boolean doAllExist = true;
        Array views = BudgetControlSQLObjects::getObjectInstances(BudgetControlSQLObjectType::View);

        for (int i = 1; i <= views.lastIndex(); i++)
        {
            BudgetControlISQLObject view = views.value(i);

            if (view)
            {
                doAllExist = doAllExist && this.existView(view.getName());
                if (!doAllExist)
                {
                    return doAllExist;
                }
            }
        }

        return doAllExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doAllFunctionsExist</Name>
				<Source><![CDATA[
    private boolean doAllFunctionsExist()
    {
        boolean doAllExist = true;
        Array functions = BudgetControlSQLObjects::getObjectInstances(BudgetControlSQLObjectType::Function);

        for (int i = 1; i <= functions.lastIndex(); i++)
        {
            BudgetControlISQLObject sqlFunction = functions.value(i);

            if (sqlFunction)
            {
                doAllExist = doAllExist && this.existFunction(sqlFunction.getName());
                if (!doAllExist)
                {
                    return doAllExist;
                }
            }
        }

        return doAllExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doAllProceduresExist</Name>
				<Source><![CDATA[
    private boolean doAllProceduresExist()
    {
        boolean doAllExist = true;
        Array procedures = BudgetControlSQLObjects::getObjectInstances(BudgetControlSQLObjectType::StoredProcedure);

        for (int i = 1; i <= procedures.lastIndex(); i++)
        {
            BudgetControlISQLObject sqlObject = procedures.value(i);

            if (sqlObject)
            {
                doAllExist = doAllExist && this.existProcedure(sqlObject.getName());
                if (!doAllExist)
                {
                    return doAllExist;
                }
            }
        }

        return doAllExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doAllSQLObjectsExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if all budget control SQL objects exist in the database.
    /// </summary>
    /// <returns>true if all SQL Objects exist in the database; otherwise, false.</returns>
    internal static boolean doAllSQLObjectsExist()
    {
        BudgetControlSQLObjects controlSQLObjects = new BudgetControlSQLObjects();
        controlSQLObjects.initialize(true);

        boolean doAllExist = controlSQLObjects.doAllViewsExist();
        doAllExist = doAllExist && controlSQLObjects.doAllFunctionsExist();
        doAllExist = doAllExist && controlSQLObjects.doAllProceduresExist();

        return doAllExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createViews</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the budget control SQL views.
    /// </summary>
    /// <returns>
    ///    true if the view creation was successful; otherwise, false.
    /// </returns>
    protected boolean createViews()
    {
        boolean isSuccessful = true;

        Array views = BudgetControlSQLObjects::getObjectInstances(BudgetControlSQLObjectType::View);

        for (int i = 1; i <= views.lastIndex(); i++)
        {
            BudgetControlISQLObject view = views.value(i);

            if (view)
            {
                isSuccessful = isSuccessful && this.createView(view);
            }
        }

        return isSuccessful;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createView</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the a view based on the given <c>BudgetControlISQLObject</c>.
    /// </summary>
    /// <returns>
    ///    true if the view creation was successful; otherwise, false.
    /// </returns>
    private boolean createView(BudgetControlISQLObject _sqlObject)
    {
        boolean isSuccessful;
        str sqlStatementText;

        // Drop the view.
        isSuccessful = this.dropView(_sqlObject.getName());

        if (isSuccessful)
        {
            // Create the view.
            sqlStatementText = _sqlObject.getDefinition();

            isSuccessful = this.executeSqlStatementWithParameters(sqlStatementText, SqlParams::create());
        }

        return isSuccessful;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the budget control SQL objects.
    /// </summary>
    /// <param name="_forceCreate">
    /// A Boolean value that indicates whether to force creating all the budget control SQL objects
    /// regardless of the state of the cache or the existing objects; optional.
    /// </param>
    /// <returns>
    /// true if the object creation was successful; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If the object creation is not successful an error is provided to the info log, but no exception is
    /// thrown.The <paramref name="_forceCreate" /> parameter should only be used when the state of the
    /// budget control SQL objects is not valid or all budget control SQL objects must be recreated.
    /// </remarks>
    public static boolean createAll(boolean _forceCreate = false)
    {
        boolean isSuccessful = true;
        BudgetControlSQLObjects controlSQLObjects;

        container cachedResult = BudgetCache::getValue(BudgetCacheScope::BudgetControlSQLObjectsCreated, ApplicationSQLObjects::SQLObjectsCreatedKey);
       
        if (cachedResult == connull() || _forceCreate)
        {
            if (_forceCreate || !BudgetControlSQLObjects::isVersionCurrent())
            {
                controlSQLObjects = new BudgetControlSQLObjects();
                controlSQLObjects.initialize(true);
                isSuccessful = controlSQLObjects.createSqlObjects();

                if (isSuccessful)
                {
                    BudgetControlParameters::updateVersion(CurrentStoredProcVersion);
                }
            }
            // else based on the version, the sql objects are up-to-date.

            if (isSuccessful)
            {
                // Add the SQL objects created indicator to the cache.
                BudgetCache::insertValue(
                    BudgetCacheScope::BudgetControlSQLObjectsCreated,
                    ApplicationSQLObjects::SQLObjectsCreatedKey,
                    [true]);
            }
        }

        return isSuccessful;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatFieldValueForStrArray</Name>
				<Source><![CDATA[
    private static str formatFieldValueForStrArray(str _fieldValue, int _strArrayPositionLength)
    {
        int paddingIndex;
        int fieldValueLength;
        str formattedFieldValue;

        formattedFieldValue = strLRTrim(_fieldValue);
        fieldValueLength = strLen(formattedFieldValue);

        if (_strArrayPositionLength < fieldValueLength)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        for (paddingIndex = 0; paddingIndex < (_strArrayPositionLength - fieldValueLength); paddingIndex++)
        {
            formattedFieldValue = strFmt('0%1', formattedFieldValue);
        }

        return formattedFieldValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetControlCopyErrorWarnBatchCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the budget control copy results stored procedure max record count that can be submitted to the
    /// stored procedure at the same time.
    /// </summary>
    /// <returns>
    /// The max record count that can be submitted to the stored procedure at the same time.
    /// </returns>
    public static int getBudgetControlCopyErrorWarnBatchCount()
    {
        // This value needs to stay in sync with the expected value of the
        // BudgetControlCopyResultsProc stored procedure.
        return 100;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetControlCopyErrorWarnProcName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the SQL name of the budget control copy error warning results stored procedure.
    /// </summary>
    /// <returns>
    ///    The SQL name of the budget control copy error warning results stored procedure.
    /// </returns>
    public static str getBudgetControlCopyErrorWarnProcName()
    {
        BudgetControlCopyErrorWarningResultsProc resultsProc = new BudgetControlCopyErrorWarningResultsProc();
        return resultsProc.getName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetControlCopyErrorWarnStrArray</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a string representation of a collection of from and to <c>BudgetSource</c> record ID pairs.
    /// </summary>
    /// <param name="_packedBudgetSourceIds">
    /// A packed collection that contains the from and to <c>BudgetSource</c> record ID pairs for which to
    /// build the string.
    /// </param>
    /// <returns>
    /// The string representation of a collection of from and to <c>BudgetSource</c> record ID pairs.
    /// </returns>
    /// <remarks>
    /// The <paramref name="_packedBudgetSourceIds" /> parameter must be a packed map with the key being
    /// the from record ID and the value being the to record ID.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// The total string length does not match the expected string length for the budget control copy
    /// results stored procedure.
    /// </exception>
    public static str getBudgetControlCopyErrorWarnStrArray(container _packedBudgetSourceIds)
    {
        #define.FromBudgetSourceLength(20)
        #define.ToBudgetSourceLength(20)
        #define.StrArrayIndexLength(40)

        Map budgetSourceIds;
        MapEnumerator budgetSourceIdsEnumerator;

        str formattedfieldValue;
        str budgetSourceStrArray;

        budgetSourceIds = Map::create(_packedBudgetSourceIds);

        if (budgetSourceIds)
        {
            budgetSourceIdsEnumerator = budgetSourceIds.getEnumerator();

            while (budgetSourceIdsEnumerator.moveNext())
            {
                // The fields have to be positioned in BudgetControlSQLObjects order and stay in sync with the order expected by
                // the BudgetControlCopyResultsProc stored procedure.

                formattedfieldValue = BudgetControlSQLObjects::formatFieldValueForStrArray(
                    int642str(budgetSourceIdsEnumerator.currentKey()), #FromBudgetSourceLength);
                budgetSourceStrArray += formattedfieldValue;

                formattedfieldValue = BudgetControlSQLObjects::formatFieldValueForStrArray(
                    int642str(budgetSourceIdsEnumerator.currentValue()), #ToBudgetSourceLength);
                budgetSourceStrArray += formattedfieldValue;
            }

            if (strLen(budgetSourceStrArray) mod #StrArrayIndexLength != 0)
            {
                throw error(error::wrongUseOfFunction(funcName()));
            }
        }

        return budgetSourceStrArray;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetControlProcessProcName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the SQL name of the budget control process stored procedure.
    /// </summary>
    /// <returns>
    ///    The SQL name of the budget control process stored procedure.
    /// </returns>
    public static str getBudgetControlProcessProcName()
    {
        BudgetControlProcessProc processProc = new BudgetControlProcessProc();
        return processProc.getName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetControlSaveErrorWarnBatchCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the budget control save results stored procedure max record count that can be submitted to the
    /// stored procedure at the same time.
    /// </summary>
    /// <returns>
    /// The max record count that can be submitted to the stored procedure at the same time.
    /// </returns>
    public static int getBudgetControlSaveErrorWarnBatchCount()
    {
        // This value needs to stay in sync with the expected value of the
        // BudgetControlSaveResultsProc stored procedure.
        return 20;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetControlSaveErrorWarnProcName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the SQL name of the budget control save error warning results stored procedure.
    /// </summary>
    /// <returns>
    ///    The SQL name of the budget control save error warning results stored procedure.
    /// </returns>
    public static str getBudgetControlSaveErrorWarnProcName()
    {
        BudgetControlSaveErrorWarningResultsProc resultsProc = new BudgetControlSaveErrorWarningResultsProc();
        return resultsProc.getName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetControlSaveErrorWarnStrArray</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a string representation of an array of <c>BudgetCheckResultErrorWarningDetail</c> record
    /// details.
    /// </summary>
    /// <param name="_resultErrorWarnDetail">
    /// The <c>BudgetCheckResultErrorWarningDetail</c> record for which to build the string.
    /// </param>
    /// <returns>
    /// The string representation of an array of <c>BudgetCheckResultErrorWarningDetail</c> record details.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The total string length does not match the expected string length for the budget control save
    /// results stored procedure.
    /// </exception>
    public static str getBudgetControlSaveErrorWarnStrArray(BudgetCheckResultErrorWarningDetail _resultErrorWarnDetail)
    {
        #define.BudgetSourceLength(20)
        #define.SourceLedgerDimLength(20)
        #define.AmountOverThresholdLength(32)
        #define.AmountOverAvailableLength(32)
        #define.SequenceNumberLength(20)
        #define.ControlLedgerDimLength(20)
        #define.PrimaryLedgerLength(20)
        #define.BudgetGroupMemberLength(20)
        #define.CheckResultLength(3)
        #define.CheckResultErrorWarningLength(3)
        #define.CheckResultErrorWarningTypeLength(3)
        #define.StrArrayLength(193)

        str formattedfieldValue;
        str resultDetailStrArray;

        int numOfDecimals;

        // The fields have to be positioned in BudgetControlSQLObjects order and stay in sync with the order expected by
        // the BudgetControlSaveResultsProc stored procedure.

        formattedfieldValue = BudgetControlSQLObjects::formatFieldValueForStrArray(
            int642str(_resultErrorWarnDetail.BudgetSource), #BudgetSourceLength);
        resultDetailStrArray += formattedfieldValue;

        formattedfieldValue = BudgetControlSQLObjects::formatFieldValueForStrArray(
            int642str(_resultErrorWarnDetail.BudgetSourceLedgerDimension), #SourceLedgerDimLength);
        resultDetailStrArray += formattedfieldValue;

        // Determine the number of decimals.
        numOfDecimals = numOfDec(_resultErrorWarnDetail.AccountingCurrencyAmountOverThreshold);

        formattedfieldValue = BudgetControlSQLObjects::formatFieldValueForStrArray(
            num2str(_resultErrorWarnDetail.AccountingCurrencyAmountOverThreshold, 32, numOfDecimals, 1, 0), #AmountOverThresholdLength);
        resultDetailStrArray += formattedfieldValue;

        // Determine the number of decimals.
        numOfDecimals = numOfDec(_resultErrorWarnDetail.AccountingCurrencyAmountOverAvailable);

        formattedfieldValue = BudgetControlSQLObjects::formatFieldValueForStrArray(
            num2str(_resultErrorWarnDetail.AccountingCurrencyAmountOverAvailable, 32, numOfDecimals, 1, 0), #AmountOverAvailableLength);
        resultDetailStrArray += formattedfieldValue;

        formattedfieldValue = BudgetControlSQLObjects::formatFieldValueForStrArray(
            int642str(_resultErrorWarnDetail.SequenceNumber), #SequenceNumberLength);
        resultDetailStrArray += formattedfieldValue;

        formattedfieldValue = BudgetControlSQLObjects::formatFieldValueForStrArray(
            int642str(_resultErrorWarnDetail.BudgetControlLedgerDimension), #ControlLedgerDimLength);
        resultDetailStrArray += formattedfieldValue;

        formattedfieldValue = BudgetControlSQLObjects::formatFieldValueForStrArray(
            int642str(_resultErrorWarnDetail.PrimaryLedger), #PrimaryLedgerLength);
        resultDetailStrArray += formattedfieldValue;

        formattedfieldValue = BudgetControlSQLObjects::formatFieldValueForStrArray(
            int642str(_resultErrorWarnDetail.BudgetGroupMember), #BudgetGroupMemberLength);
        resultDetailStrArray += formattedfieldValue;

        formattedfieldValue = BudgetControlSQLObjects::formatFieldValueForStrArray(
            int2str(_resultErrorWarnDetail.CheckResult), #CheckResultLength);
        resultDetailStrArray += formattedfieldValue;

        formattedfieldValue = BudgetControlSQLObjects::formatFieldValueForStrArray(
            int2str(_resultErrorWarnDetail.CheckResultErrorWarning), #CheckResultErrorWarningLength);
        resultDetailStrArray += formattedfieldValue;

        formattedfieldValue = BudgetControlSQLObjects::formatFieldValueForStrArray(
            int2str(_resultErrorWarnDetail.CheckResultErrorWarningType), #CheckResultErrorWarningTypeLength);
        resultDetailStrArray += formattedfieldValue;

        if (strLen(resultDetailStrArray) != #StrArrayLength)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        return resultDetailStrArray;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getForceApplockReleaseProcName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the SQL name of the force release applock stored procedure.
    /// </summary>
    /// <returns>
    ///    The SQL name of the force release applock stored procedure.
    /// </returns>
    public static str getForceApplockReleaseProcName()
    {
        BudgetControlForceApplockReleaseProc releaseProc = new BudgetControlForceApplockReleaseProc();
        return releaseProc.getName();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>