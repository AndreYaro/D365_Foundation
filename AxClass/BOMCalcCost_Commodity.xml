<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomCalcCost_Commodity</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// BomCalcCost_Commodity provides commodity pricing for a requested item.
/// </summary>
/// <remarks>
/// This class can be used in place of the base BOMCalcCost if there is a need to
/// get commodity prices for an item in place of normal prices. If an item does
/// not have commodity prices then the normal price will be given.
/// </remarks>
public class BomCalcCost_Commodity extends BOMCalcCost
{
    PdsComdPricingRun           pdsComdPricingRun;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcCostModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override parent method to retrieve the commodity price as the cost.
    /// </summary>
    /// <param name="_calcModel">
    /// Calculation model to use.
    /// </param>
    /// <remarks>
    /// Set the various cost calculation variables from the commodity pricing
    /// (PdsPricingRunLine) information if that is available. If not, then this
    /// delegates to the parent method to compute the costs.
    /// <syntax>
    /// protected void calcCostModel(BOMCalcCostPrice _calcModel)
    /// </syntax>
    /// </remarks>
    protected void calcCostModel(BOMCalcCostPrice _calcModel)
    {
        PdsComdPricingRunLine       pdsComdPricingRunLine;

        pdsComdPricingRunLine = PdsComdPricingRunLine::findForPricing(
            pdsComdPricingRun.PricingRunId,
            inventTable.ItemId,
            this.inventDim().InventSiteId,
            this.inventDim().InventLocationId,
            siteId);

        costPrice = pdsComdPricingRunLine.Cost;
        if (costPrice)
        {
            costPriceUnit = inventTable.inventTableModuleInvent().priceUnit();
            costMarkup    = 0;
            costPriceDate = dateNull();
        }
        else
        {
            super(_calcModel);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override parent method to ensure the PdsPricingRun property has been set.
    /// </summary>
    /// <exception cref="Exception::Error" label="@PDS451">PdsPricingRun propety must be set.</exception>
    /// <remarks>
    /// <syntax>
    /// protected void initValue()
    /// </syntax>
    /// </remarks>
    protected void initValue()
    {
        super();

        if (!pdsComdPricingRun)
        {
            throw error("@PDS451");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Helper method to get the current InventDim record.
    /// </summary>
    /// <returns>
    /// InventDim record matching the InventDimId object variable.
    /// </returns>
    /// <remarks>
    /// If the internal InventDim record has not already been loaded, then retrieve
    /// the record based on the current value of the InventDimId object variable.
    /// This caches the value in the internal record variable show future calls will
    /// return the value instead of reading the database.
    /// <syntax>
    /// public InventDim inventDim()
    /// </syntax>
    /// </remarks>
    public InventDim inventDim()
    {
        if (!inventDim)
        {
            inventDim = InventDim::find(inventDimId);
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the standard new method to protect it.
    /// </summary>
    /// <remarks>
    /// Best practice requirement.
    /// <syntax>
    /// protected void new()
    /// </syntax>
    /// </remarks>
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsComdPricingRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parameter method for the PdsPricingRun property.
    /// </summary>
    /// <param name="_run">Optional. Pricing run to assign to the property.</param>
    /// <returns>Current PdsPricingRun propety value.</returns>
    /// <remarks>
    /// <syntax>
    /// public PdsPricingRun parmPdsPricingRun(PdsPricingRun _run)
    /// </syntax>
    /// </remarks>
    public PdsComdPricingRun parmPdsComdPricingRun(
        PdsComdPricingRun _run = pdsComdPricingRun)
    {
        pdsComdPricingRun = _run;
        return pdsComdPricingRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Standard constructor pattern to create a new instance of BOMCalcCost_Commodity.
    /// </summary>
    /// <returns>New instance of BOMCalcCost_Commodity</returns>
    /// <remarks>
    /// <syntax>
    /// public static BOMCalcCost_Commodity construct()
    /// </syntax>
    /// </remarks>
    public static BOMCalcCost_Commodity construct()
    {
        return new BOMCalcCost_Commodity();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>