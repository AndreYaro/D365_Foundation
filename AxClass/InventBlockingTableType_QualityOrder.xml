<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventBlockingTableType_QualityOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventBlockingTableType_QualityOrder</c> class is the specialized version of the
///    <c>InventBlockingTableType</c> class, which handles inventory blockings that are created from
///    quality orders.
/// </summary>
[InventBlockingTypeFactory(InventBlockingType::QualityOrder)]
class InventBlockingTableType_QualityOrder extends InventBlockingTableType
{
    InventQualityOrderTable inventQualityOrderTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canBeDeletedByUser</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the inventory blocking can be deleted by user.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    public boolean canBeDeletedByUser()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canExpectedReceiptBeDeletedByUser</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the expected receipt field value on the inventory blocking can be edited by user.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    public boolean canExpectedReceiptBeDeletedByUser()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateBlockingTransaction</Name>
				<Source><![CDATA[
    public InventUpd_Estimated createOrUpdateBlockingTransaction(InventMovSubType _inventMovSubType = InventMovSubType::None)
    {
        InventStatusBlockingHelper helper = InventStatusBlockingHelper::construct(
                    InventMovement::construct(inventBlocking, _inventMovSubType));

        helper.preUpdate();

        InventUpd_Estimated ret = super(_inventMovSubType);

        helper.postUpdate();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteBlockingTransaction</Name>
				<Source><![CDATA[
    public void deleteBlockingTransaction(InventMovSubType _inventMovSubType = InventMovSubType::None)
    {
        InventStatusBlockingHelper helper = InventStatusBlockingHelper::construct(InventMovement::construct(inventBlocking, _inventMovSubType));

        super(_inventMovSubType);

        helper.postDelete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransRefId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the origin inventory transaction ID.
    /// </summary>
    /// <returns>
    ///    The origin inventory transaction ID.
    /// </returns>
    public InventTransRefId inventTransRefId()
    {
        // Lookup for the related quality orders if they are not yet cached
        if (!inventQualityOrderTable)
        {
            inventQualityOrderTable = InventBlockingQualityOrder::findQualityOrderByItemBlocking(inventBlocking.RecId);
        }

        return inventQualityOrderTable.InventRefTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransRefSign</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the sign of the referred origin inventory transactions.
    /// </summary>
    /// <returns>
    ///    An integer that represents the referred origin inventory transactions sign.
    /// </returns>
    public Integer inventTransRefSign()
    {
        // Lookup for the related quality orders if they are not yet cached
        if (!inventQualityOrderTable)
        {
            inventQualityOrderTable = InventBlockingQualityOrder::findQualityOrderByItemBlocking(inventBlocking.RecId);
        }

        if (    inventQualityOrderTable.ReferenceType == InventTestReferenceType::Production
            ||  inventQualityOrderTable.ReferenceType == InventTestReferenceType::RouteOpr
            ||  inventQualityOrderTable.ReferenceType == InventTestReferenceType::Purch)
        {
            return 1;
        }
        else if (inventQualityOrderTable.ReferenceType == InventTestReferenceType::Sales)
        {
            return -1;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBlockedPhysically</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the inventory should be blocked physically.
    /// </summary>
    /// <returns>
    ///    true if the inventory should be blocked physically; otherwise, false.
    /// </returns>
    public NoYes mustBeBlockedPhysically()
    {
        // Lookup for the related quality orders if they are not yet cached
        if (!inventQualityOrderTable)
        {
            inventQualityOrderTable = InventBlockingQualityOrder::findQualityOrderByItemBlocking(inventBlocking.RecId);
        }

        // Quality order on RouteOperation is for semi-finished goods, no finished goods are ready, so it should not be blocked physically.
        if (inventQualityOrderTable.ReferenceType == InventTestReferenceType::RouteOpr)
        {
            return NoYes::No;
        }

        // Inventory must be blocked physically for the inventory blockings with reference to internal quality order
        // or if quality order is a reopened quality order (validatedByWorker field is used to determine if the quality order is reopened).
        if (    inventQualityOrderTable.ReferenceType     == InventTestReferenceType::Inventory
            ||  inventQualityOrderTable.ValidatedByWorker != 0)
        {
            return NoYes::Yes;
        }

        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustClearIssueLocationAndBelow</Name>
				<Source><![CDATA[
    public boolean mustClearIssueLocationAndBelow()
    {
        return this.qualityOrder().whsIsForWorkGeneratingProcess();
    }

]]></Source>
			</Method>
			<Method>
				<Name>qualityOrder</Name>
				<Source><![CDATA[
    private InventQualityOrderTable qualityOrder()
    {
        if (!inventQualityOrderTable)
        {
            inventQualityOrderTable = InventBlockingQualityOrder::findQualityOrderByItemBlocking(inventBlocking.RecId);
        }

        return inventQualityOrderTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canReceiptOnlyHaveDimensionAboveLocation</Name>
				<Source><![CDATA[
    public boolean canReceiptOnlyHaveDimensionAboveLocation()
    {
        return this.qualityOrder().whsIsForWorkGeneratingProcess();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCWForceActualsReservation</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean mustCWForceActualsReservation()
    {
        return PdsGlobal::pdsIsCWItem(inventBlocking.ItemId)
            && WHSInventEnabled::exist(inventBlocking.ItemId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>