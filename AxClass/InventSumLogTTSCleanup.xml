<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSumLogTTSCleanup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>InventSumLogTTSCleanup</c> implements a batch task for cleaning up old requirements.
/// </summary>
public class InventSumLogTTSCleanup extends SysBatchTask implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform old net requirements cleanup.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        int infologLine = infologLine();

        try
        {
            if (InventSumLogTTSCleanupFlight::instance().isEnabled())
            {
                DataArea dataArea;
                ReqParameters reqParameters;

                if (InventSumLogTTSCleanupCroscompFlight::instance().isEnabled())
                {
                    while select crosscompany id from dataArea
                        exists join reqParameters
                            where reqParameters.DataAreaId == dataArea.id
                               && !reqParameters.ReqInactive
                    {
                        changecompany (dataArea.id)
                        {
                            InventSumLogTTS::deleteOldNetRequirements();
                        }
                    }
                }
                else
                {
                    while select id from dataArea
                        exists join reqParameters
                            where reqParameters.DataAreaId == dataArea.id
                                && !reqParameters.ReqInactive
                    {
                        changecompany (dataArea.id)
                        {
                            InventSumLogTTS::deleteOldNetRequirements();
                        }
                    }
                }
            }
            else
            {
                if (this.batchJobExists(classnum(InventSumLogTTSCleanup)))
                {
                    SysBatchTask::removeRecurrence(classnum(InventSumLogTTSCleanup));
                }
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (Exception::Error)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::isExceptionErrorCausedBySQLError(infologLine)
                && ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the description for the batch job.
    /// </summary>
    /// <returns>
    /// The description for the batch job.
    /// </returns>
    public static ClassDescription description()
    {
        return "@SCM:NetRequirementsCleanup";
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRecurrence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates recurrence.
    /// </summary>
    /// <param name = "_batchJobId">Batch job RecId.</param>
    /// <param name = "_recurrence">Recurrence data that needs to be valided.</param>
    /// <returns>true if _recurrence is valid; otherwise, false.</returns>
    public boolean validateRecurrence(RecId _batchJobId, SysRecurrenceData _recurrence)
    {
        return InventSumLogTTSCleanupFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchJobExists</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Checks if the specified system batch job exists.
    /// </summary>
    /// <param name = "_sysBatchTaskClassId">The batch class id</param>
    /// <returns>true if the job exists, false otherwise.</returns>
    private boolean batchJobExists(ClassId _sysBatchTaskClassId)
    {
        BatchJob batchJob;
        Batch batch;

        select firstonly RecId from batchJob
            exists join batch
            where batchJob.RecId == batch.BatchJobId
                && batch.ClassNumber == _sysBatchTaskClassId;

        return batchJob.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>