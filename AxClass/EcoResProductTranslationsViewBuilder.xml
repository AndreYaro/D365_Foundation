<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductTranslationsViewBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.AX.Metadata.MetaModel;
using Microsoft.Dynamics.AX.Framework.Analytics.Shared;

/// <summary>
/// The <c>EcoResProductTranslationsViewBuilder</c> class is responsible for building the <c>EcoResProductTranslations</c>
/// view when the <c>EcoResProductTranslationFallbackFeature</c> is enabled.
/// The new view is an union of two views, <c>EcoResProductTranslationsView</c> view and <c>EcoResProductTranslationsFallback</c> view.
/// </summary>
public final class EcoResProductTranslationsViewBuilder extends ApplicationSQLObjects
{
    public SysDictTable sourceViewStd;
    public SysDictTable sourceViewFallback;
    public SysDictTable targetSysDictView;

    private const str PARTITION = fieldStr(Common, Partition);

    private str targetViewName;
    private str sourceViewNameStd;
    private str sourceViewNameFallback;

    private List viewFields = new List(Types::Class);
    private List standardViewFields = new List(Types::Class);
    private List fallbackViewFields = new List(Types::Class);

    private Set customFields = new Set(Types::Class);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        EcoResProductTranslationsViewBuilder::buildEcoResProductTranslationsView();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildEcoResProductTranslationsView</Name>
				<Source><![CDATA[
    public static void buildEcoResProductTranslationsView()
    {
        EcoResProductTranslationsViewBuilder::construct().createSqlObjects();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createViews</Name>
				<Source><![CDATA[
    protected boolean createViews()
    {      
        return this.dropView(targetViewName) && this.executeSqlStatement(this.createViewSqlStmt());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static EcoResProductTranslationsViewBuilder construct()
    {
        return new EcoResProductTranslationsViewBuilder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        this.initialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createViewSqlStmt</Name>
				<Source><![CDATA[
    private SysSQLStatementText createViewSqlStmt()
    {
        /*
        CREATE VIEW ECORESPRODUCTTRANSLATIONS
        AS
        SELECT PARTITION AS PARTITION
            ,PARTITION AS PARTITION#2
            ,PARTITION AS PARTITION#3
            ,RECID AS RECID
            ,PRODUCT AS PRODUCT
            ,NAME AS PRODUCTNAME
            ,LANGUAGEID AS LANGUAGEID
            ,1 AS UNIONALLBRANCHID
        FROM ECORESPRODUCTTRANSLATIONSVIEW

        UNION ALL

        SELECT PARTITION AS PARTITION
            ,PARTITION AS PARTITION#2
            ,PARTITION AS PARTITION#3
            ,RECID AS RECID
            ,PRODUCT AS PRODUCT
            ,NAME AS PRODUCTNAME
            ,LANGUAGEID AS LANGUAGEID
            ,2 AS UNIONALLBRANCHID
        FROM ECORESPRODUCTTRANSLATIONSFALLBACK
        */

        if (viewFields.elements() != standardViewFields.elements() || 
            viewFields.elements() != fallbackViewFields.elements() ||
            fallbackViewFields.elements() != standardViewFields.elements())
        {
            throw error("@SCM:EcoResProductTranslationsViewBuilderNumFields");
        }

        SysSQLStatementText sqlStmt = 'CREATE VIEW ' + targetViewName + ' AS SELECT ';

        sqlStmt = this.createViewSelectStmt(sqlStmt, viewFields, standardViewFields, sourceViewNameStd);

        sqlStmt += '1 AS UNIONALLBRANCHID ';
        sqlStmt += 'FROM ' + sourceViewNameStd + ' ';
        sqlStmt += 'UNION ALL SELECT ';

        sqlStmt = this.createViewSelectStmt(sqlStmt, viewFields, fallbackViewFields, sourceViewNameFallback);

        sqlStmt += '2 AS UNIONALLBRANCHID ';
        sqlStmt += 'FROM ' + sourceViewNameFallback;
        return sqlStmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    protected void initialize(boolean _runOnSeparateUserConnection = false)
    {
        super(_runOnSeparateUserConnection);

        viewFields                = this.generateViewFields();
        standardViewFields        = this.generateStandardViewFields();
        fallbackViewFields        = this.generateFallbackViewFields();
        customFields              = this.addCustomFieldsToSet();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateViewFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a list of the fields that will be part of the new <c>EcoResProductTranslations</c> view.
    /// </summary>
    /// <returns> A list of the view fields. </returns>
    protected List generateViewFields()
    {
        targetSysDictView     = new SysDictTable(tableNum(EcoResProductTranslations));
        targetViewName        = targetSysDictView.name(DbBackend::Sql);
        List targetViewFields = new List(Types::Class);
        targetViewFields.addEnd(targetSysDictView.fieldObject(fieldNum(EcoResProductTranslations, Partition)));
        targetViewFields.addEnd(targetSysDictView.fieldObject(fieldNum(EcoResProductTranslations, Partition)));
        targetViewFields.addEnd(targetSysDictView.fieldObject(fieldNum(EcoResProductTranslations, Partition)));
        targetViewFields.addEnd(targetSysDictView.fieldObject(fieldNum(EcoResProductTranslations, RecId)));
        targetViewFields.addEnd(targetSysDictView.fieldObject(fieldNum(EcoResProductTranslations, Product)));
        targetViewFields.addEnd(targetSysDictView.fieldObject(fieldNum(EcoResProductTranslations, ProductName)));
        targetViewFields.addEnd(targetSysDictView.fieldObject(fieldNum(EcoResProductTranslations, LanguageId)));

        return targetViewFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateStandardViewFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a list of the fields from the <c>EcoResProductTranslationsView</c> view that will be part of the new <c>EcoResProductTranslations</c> view.
    /// </summary>
    /// <returns> A list of the view fields. </returns>
    protected List generateStandardViewFields()
    {
        sourceViewStd        = new SysDictTable(tableNum(EcoResProductTranslationsView));
        sourceViewNameStd    = sourceViewStd.name(DbBackend::Sql);
      
        List viewStdFields = new List(Types::Class);
        viewStdFields.addEnd(sourceViewStd.fieldObject(fieldNum(EcoResProductTranslationsView, Partition)));
        viewStdFields.addEnd(sourceViewStd.fieldObject(fieldNum(EcoResProductTranslationsView, Partition)));
        viewStdFields.addEnd(sourceViewStd.fieldObject(fieldNum(EcoResProductTranslationsView, Partition)));
        viewStdFields.addEnd(sourceViewStd.fieldObject(fieldNum(EcoResProductTranslationsView, RecId)));
        viewStdFields.addEnd(sourceViewStd.fieldObject(fieldNum(EcoResProductTranslationsView, Product)));
        viewStdFields.addEnd(sourceViewStd.fieldObject(fieldNum(EcoResProductTranslationsView, Name)));
        viewStdFields.addEnd(sourceViewStd.fieldObject(fieldNum(EcoResProductTranslationsView, LanguageId)));

        return viewStdFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateFallbackViewFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a list of the fields from the <c>EcoResProductTranslationsFallback</c> view that will be part of the new <c>EcoResProductTranslations</c> view.
    /// </summary>
    /// <returns> A list of the view fields. </returns>
    protected List generateFallbackViewFields()
    {
        sourceViewFallback     = new SysDictTable(tableNum(EcoResProductTranslationsFallback));
        sourceViewNameFallback = sourceViewFallback.name(DbBackend::Sql);

        List viewFallbackFields = new List(Types::Class);
        viewFallbackFields.addEnd(sourceViewFallback.fieldObject(fieldNum(EcoResProductTranslationsFallback, Partition)));
        viewFallbackFields.addEnd(sourceViewFallback.fieldObject(fieldNum(EcoResProductTranslationsFallback, Partition)));
        viewFallbackFields.addEnd(sourceViewFallback.fieldObject(fieldNum(EcoResProductTranslationsFallback, Partition)));
        viewFallbackFields.addEnd(sourceViewFallback.fieldObject(fieldNum(EcoResProductTranslationsFallback, RecId)));
        viewFallbackFields.addEnd(sourceViewFallback.fieldObject(fieldNum(EcoResProductTranslationsFallback, Product)));
        viewFallbackFields.addEnd(sourceViewFallback.fieldObject(fieldNum(EcoResProductTranslationsFallback, Name)));
        viewFallbackFields.addEnd(sourceViewFallback.fieldObject(fieldNum(EcoResProductTranslationsFallback, LanguageId)));

        return viewFallbackFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCustomFieldsToSet</Name>
				<Source><![CDATA[
    private Set addCustomFieldsToSet()
    {     
        MetadataHelper metadataHelper = new MetadataHelper(AggregateMetadataHelper::MetadataProvider);
        AxView translationsView = Microsoft.Dynamics.Ax.Xpp.MetadataSupport::GetView(viewstr(EcoResProductTranslations));
        var extensions = metadataHelper.GetExtensionsForView(translationsView);
        var enumerator = extensions.getEnumerator();

        SetEnumerator fields = targetSysDictView.fields().getEnumerator();
        Set customFieldsSet = new Set(Types::Class);
        while (enumerator.moveNext())
        {
            AxViewExtension extension = enumerator.Current;
            while (fields.moveNext())
            {
                SysDictField field = fields.current();
                if (extension.Fields.Contains(field.name()))
                {
                    customFieldsSet.add(field);
                }
            }
            fields.reset();
        }

        return customFieldsSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createViewSelectStmt</Name>
				<Source><![CDATA[
    private str createViewSelectStmt(str _sqlStmt, List _viewFields, List _targetViewFields, TableName _targetViewName)
    {
        ListEnumerator viewFieldsEnumerator = _viewFields.getEnumerator();
        ListEnumerator targetViewFieldsEnumerator = _targetViewFields.getEnumerator();
        int partitionCount = 0;
        while (viewFieldsEnumerator.moveNext() && targetViewFieldsEnumerator.moveNext())
        {
            SysDictField targetViewField = targetViewFieldsEnumerator.current();
            SysDictField viewField = viewFieldsEnumerator.current();
            if (targetViewField.baseType() != viewField.baseType())
            {
                throw error("@SCM:EcoResProductTranslationsViewBuilderFieldType");
            }

            if (viewField.name() == PARTITION && viewField.isSystem())
            {
                partitionCount++;
                if (partitionCount >= 2)
                {
                    _sqlStmt += _targetViewName + '.' + targetViewField.name(DbBackend::Sql) + ' AS ' + strFmt("%1#%2", viewField.name(DbBackend::Sql), partitionCount) + ', ';
                    continue;
                }
            }

            _sqlStmt += _targetViewName + '.' + targetViewField.name(DbBackend::Sql) + ' AS ' + viewField.name(DbBackend::Sql) + ', ';
        }

        if (customFields && !customFields.empty())
        {
            SetEnumerator setEnumerator = customFields.getEnumerator();
            while (setEnumerator.moveNext())
            {
                SysDictField field = setEnumerator.current();
                _sqlStmt +=  _targetViewName + '.' + field.name(DbBackend::Sql) + ' AS ' + field.name(DbBackend::Sql) + ', ';
            }
        }

        return _sqlStmt;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>