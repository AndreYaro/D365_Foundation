<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetSumCalc_Trans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RAssetSumCalc_Trans extends RAssetSumCalc
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    protected Query buildQuery()
    {
        Query query = new Query();

        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(RAssetTrans));
        queryBuildDataSource.orderMode(OrderMode::GroupBy);

        queryBuildDataSource.addSelectionField(fieldNum(RAssetTrans, AmountMST), SelectionField::Sum);
        queryBuildDataSource.addSelectionField(fieldNum(RAssetTrans, AmountCur), SelectionField::Sum);

        queryBuildDataSource.addSortField(fieldNum(RAssetTrans, AssetTransType));
        queryBuildDataSource.addSortField(fieldNum(RAssetTrans, PostingType));
        queryBuildDataSource.addSortField(fieldNum(RAssetTrans, CurrencyCode));
        queryBuildDataSource.addSortField(fieldNum(RAssetTrans, TransDate));

        queryBuildDataSource.addRange(fieldNum(RAssetTrans, AccountNum)).value(sumDescendants
            ? this.getDescendantRange(rangeAssetId, rAssetStandardId)
            : rangeAssetId);

        if (dateTo)
        {
            queryBuildDataSource.addRange(fieldNum(RAssetTrans, TransDate)).value(queryRange(dateFrom, dateTo));
        }

        queryBuildDataSource.addRange(fieldNum(RAssetTrans, AssetStandardId)).value(queryValue(rAssetStandardId));

        // Storno transactions should be excluded from the calculation
        queryBuildDataSource.addRange(fieldNum(RAssetTrans, StornoRecId)).value(queryValue(0));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc()
    {
        if (!calculated && rangeAssetId)
        {
            QueryRun queryRun = new QueryRun(this.buildQuery());

            while (queryRun.next())
            {
                RAssetTrans rAssetTrans = queryRun.get(tableNum(RAssetTrans));
                this.updateSum(rAssetTrans.AssetTransType,
                    rAssetTrans.AmountCur,
                    rAssetTrans.AmountMST,
                    rAssetTrans.PostingType);
            }
            if (sumDescendants)
            {
                container descendants = str2con_RU(this.getDescendantRange(rangeAssetId, rAssetStandardId));
                for (int loop = 1; loop <= conLen(descendants); loop++)
                {
                    if (conPeek(descendants, loop))
                    {
                        this.updateSumExtra(conPeek(descendants, loop), rAssetStandardId);
                    }
                }
            }
            else
            {
                this.updateSumExtra(rangeAssetId, rAssetStandardId);
            }

            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newAssetPeriod</Name>
				<Source><![CDATA[
    public static RAssetSumCalc_Trans newAssetPeriod(Range _rangeAssetId,
        RAssetStandardId _rAssetStandardId,
        RAssetTransDate _dateTo = dateNull(),
        RAssetTransDate _dateFrom = dateNull(),
        boolean _sumDescendants = false)
    {
        RAssetSumCalc_Trans rAssetSumCalc_Trans = new RAssetSumCalc_Trans();
        rAssetSumCalc_Trans.parmRangeAssetId(_rangeAssetId);
        rAssetSumCalc_Trans.parmDateFrom(_dateFrom);
        rAssetSumCalc_Trans.parmDateTo(_dateTo);
        rAssetSumCalc_Trans.parmRangeAssetStandard(_rAssetStandardId);
        rAssetSumCalc_Trans.parmSumDescendants(_sumDescendants);
        return rAssetSumCalc_Trans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>