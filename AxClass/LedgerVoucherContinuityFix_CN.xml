<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerVoucherContinuityFix_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerVoucherContinuityFix_CN</c> class is used to check and fix the non-continually Chinese voucher number.
/// </summary>
public class LedgerVoucherContinuityFix_CN
{
    TransDate                   transDate;
    FiscalCalendarPeriod        fiscalCalendarPeriod;

    container                   conVoucherCN;
    container                   conGap;
    int                         curNum;

    NumberSequenceTable         numSeqTable;

    RecordInsertList            recordInsertList;

    Counter                     types;
    Counter                     renumbers;

    LedgerVoucherType_CN        ledgerVoucherType_CN;
    NoYes                       printRenumberLog;

    private Set                 gapSet, invertedGapSet;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findVoucherByVoucherCN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>GeneralJournalEntry</c> table by using
    /// the specified <c>AccountingDate</c> range and the specified <c>Voucher_CN</c> value.
    /// </summary>
    /// <param name="_period">
    /// The accountging date range of the ledger entry reference record to find.
    /// </param>
    /// <param name="_voucher_CN">
    /// The Chinese voucher of the ledger entry reference record to find.
    /// </param>
    /// <returns>
    /// A record in the <c>GeneralJournalEntry</c> table; otherwise, an empty record.
    /// </returns>
    protected GeneralJournalEntry findVoucherByVoucherCN(FiscalCalendarPeriod _period, Voucher_CN _voucher_CN)
    {
        GeneralJournalEntry     generalJournalEntry;
        GeneralJournalEntry_W   generalJournalEntryW;

        select firstonly generalJournalEntry
            where generalJournalEntry.AccountingDate   >= _period.StartDate
               && generalJournalEntry.AccountingDate   <= _period.EndDate
        exists join generalJournalEntryW
            where generalJournalEntryW.GeneralJournalEntry == generalJournalEntry.RecId
                && generalJournalEntryW.Voucher_CN == _voucher_CN
                && generalJournalEntryW.LedgerVoucherType_CN == ledgerVoucherType_CN.RecId;

        return generalJournalEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVoucherFromDifferentVoucherTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the Chinese voucher numbers that are used by other voucher types which
    /// share the same number sequence as that of the current voucher type being processed.
    /// </summary>
    protected void findVoucherFromDifferentVoucherTypes()
    {
        GeneralJournalEntry_W   generalJournalEntryW;
        GeneralJournalEntry     generalJournalEntry;
        LedgerVoucherType_CN    localLedgerVoucherType;
        int                     voucher_CN;

        while select Voucher_CN from generalJournalEntryW
            order by Voucher_CN
            group by Voucher_CN
            exists join localLedgerVoucherType
                where generalJournalEntryW.LedgerVoucherType_CN   != ledgerVoucherType_CN.RecId
                    && localLedgerVoucherType.NumberSequenceTable == ledgerVoucherType_CN.NumberSequenceTable
                    && generalJournalEntryW.LedgerVoucherType_CN  == localLedgerVoucherType.RecId
            exists join generalJournalEntry
                where generalJournalEntry.RecId           == generalJournalEntryW.GeneralJournalEntry
                    && generalJournalEntry.AccountingDate >= fiscalCalendarPeriod.StartDate
                    && generalJournalEntry.AccountingDate <= fiscalCalendarPeriod.EndDate
        {
            voucher_CN = NumberSeq::numRemoveFormat(generalJournalEntryW.Voucher_CN, numSeqTable.Format);

            // If the least number of the vouchers used by other voucher types is
            // greater than the highest number of the missing vouchers, we can skip this method execution.
            if (voucher_CN > this.getMissingVouchersHighestNumber())
            {
                break;
            }
            else
            {
                if (gapSet.in(voucher_CN))
                {
                    // Delete the voucher numbers from the gapSet set
                    // because the missing voucher numbers are used by other voucher types
                    gapSet.remove(voucher_CN);
                    invertedGapSet.remove(-voucher_CN);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixNonContinuallyVoucherNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fixes the non-continually Chinese voucher number.
    /// </summary>
    protected void fixNonContinuallyVoucherNumber()
    {
        int                     i;
        int                     originalCNVoucherNum;
        int                     newCNVoucherNum;
        Voucher_CN              originalCNVoucher;
        Voucher_CN              newCNVoucher;
        GeneralJournalEntry     generalJournalEntry;
        SetEnumerator           se = gapSet.getEnumerator();

        while (se.moveNext())
        {
            newCNVoucherNum = se.current();

            //Get the last used Chinese voucher number in the day
            originalCNVoucherNum = conPeek(conVoucherCN, conLen(conVoucherCN));

            //If the gap number >= the last used number then return
            if (originalCNVoucherNum <= newCNVoucherNum)
            {
                break;
            }

            newCNVoucher = NumberSeq::numInsertFormat(newCNVoucherNum, numSeqTable.Format);
            originalCNVoucher = NumberSeq::numInsertFormat(originalCNVoucherNum, numSeqTable.Format);

            //Check whether the last gap number is used in the selected fiscal period.
            //if used, and then swap them
            //Otherwise renumber the last used number with the last gap number
            generalJournalEntry = this.findVoucherByVoucherCN(fiscalCalendarPeriod, newCNVoucher);

            if (generalJournalEntry.RecId)
            {
                this.swapVoucherNumber(generalJournalEntry.RecId, originalCNVoucher, newCNVoucher);
            }
            else
            {
                this.renumberVoucherNumber(newCNVoucher, originalCNVoucher);
            }

            curNum = newCNVoucherNum;

            //Remove the last used Chinese voucher number in the day, after renumbered or swaped.
            conVoucherCN = conDel(conVoucherCN, conLen(conVoucherCN), 1);

            //If Chinese voucher number is empty then return
            if (conLen(conVoucherCN) == 0)
            {
                break;
            }
        }

        //If gaps are filled and Chinese voucher list is not empty,
        //then the curNum should be the max voucher number in Chinese voucher list.
        if (conLen(conVoucherCN) != 0)
        {
            originalCNVoucherNum = conPeek(conVoucherCN, conLen(conVoucherCN));
            curNum = max(curNum, originalCNVoucherNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVoucherAndGapList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes sorted Chinese voucher number list and gaps.
    /// </summary>
    /// <param name="_ledgerVoucherType_CN">
    /// The Chinese voucher type to use to check the continually.
    /// </param>
    /// <param name="_accountingDate">
    /// The transaction date to use to check the continually.
    /// </param>
    protected void initVoucherAndGapList(LedgerVoucherType_CN _ledgerVoucherType_CN, TransDate _accountingDate)
    {
        int                     i;
        int                     gapSize;
        int                     voucherCNNum;
        GeneralJournalEntry     generalJournalEntry;
        GeneralJournalEntry_W   generalJournalEntryW;

        while select Voucher_CN from generalJournalEntryW
            order by Voucher_CN
            group by Voucher_CN
            where generalJournalEntryW.LedgerVoucherType_CN == _ledgerVoucherType_CN.RecId
        exists join generalJournalEntry
            where generalJournalEntry.RecId           == generalJournalEntryW.GeneralJournalEntry
                && generalJournalEntry.AccountingDate == _accountingDate
        {
            if (NumberSeq::numCheckFormat(generalJournalEntryW.Voucher_CN, numSeqTable))
            {
                voucherCNNum = NumberSeq::numRemoveFormat(generalJournalEntryW.Voucher_CN, numSeqTable.Format);
                conVoucherCN += [voucherCNNum];

                gapSize = voucherCNNum - curNum;

                for (i = 1; i < gapSize; i++)
                {
                    gapSet.add(curNum + i);
                    invertedGapSet.add(-(curNum + i));
                }

                curNum = voucherCNNum;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logRenumberVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs the renumber operation for fix Chinese voucher continually.
    /// </summary>
    /// <param name="_refRecId">
    /// The RecId which the General Journal Entry is renumbered to log.
    /// </param>
    /// <param name="_originalCNVoucher">
    /// The original Chinese voucher of the renumbered voucher.
    /// </param>
    /// <param name="_newCNVoucher">
    /// The new Chinese voucher of the renumbered voucher.
    /// </param>
    protected void logRenumberVoucher(RefRecId _refRecId, Voucher_CN _originalCNVoucher, Voucher_CN _newCNVoucher)
    {
        LedgerVoucherRenumberLog_CN  renumberLog;

        renumberLog.GeneralJournalEntry = _refRecId;
        renumberLog.Date                = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        renumberLog.OriginalCNVoucher   = _originalCNVoucher;
        renumberLog.NewCNVoucher        = _newCNVoucher;

        recordInsertList.add(renumberLog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of the <c>LedgerVoucherContinuityFix_CN</c> class.
    /// </summary>
    /// <param name="_fiscalCalendarPeriod">
    /// The fiscal calendar period.
    /// </param>
    /// <param name="_printRenumberLog">
    /// The flag of print renumber log.
    /// </param>
    public void new(FiscalCalendarPeriod _fiscalCalendarPeriod, NoYes _printRenumberLog)
    {
        fiscalCalendarPeriod    = _fiscalCalendarPeriod;
        printRenumberLog        = _printRenumberLog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalCalendarPeriod</Name>
				<Source><![CDATA[
    public FiscalCalendarPeriod parmFiscalCalendarPeriod(FiscalCalendarPeriod _fiscalCalendarPeriod = fiscalCalendarPeriod)
    {
        fiscalCalendarPeriod = _fiscalCalendarPeriod;

        return fiscalCalendarPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printRenumberLogReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints the renumber operation logs report.
    /// </summary>
    protected void printRenumberLogReport()
    {
        SrsReportRunController      controller;
        Query                       query;
        MapEnumerator               mapEnum;
        Args                        args = new Args();

        args.menuItemName(menuItemOutputStr(LedgerVoucherRenumberLog_CN));
        args.menuItemType(MenuItemType::Output);

        controller = new SrsReportRunController();
        controller.parmReportName(ssrsReportStr(LedgerVoucherRenumberLog_CN, Report));
        controller.parmArgs(args);

        mapEnum = controller.parmReportContract().parmQueryContracts().getEnumerator();

        while (mapEnum.moveNext())
        {
            query = mapEnum.currentValue();
            if (query && query.name() == queryStr(LedgerVoucherRenumberLog_CN))
            {
                SysQuery::findOrCreateRange(query.dataSourceTable(tableNum(LedgerVoucherRenumberLog_CN)), fieldNum(LedgerVoucherRenumberLog_CN, Date)).value(queryValue(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
                break;
            }
        }
        controller.parmShowDialog(false);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>renumberVoucherNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Renumber the Chinese voucher to the new Chinese voucher for the specified voucher.
    /// </summary>
    /// <param name="_voucher_CNNew">
    /// The new Chinese voucher of the voucher should be renumbered to.
    /// </param>
    /// <param name="_voucher_CNOriginal">
    /// The original Chinese voucher of the voucher should be renumbered to.
    /// </param>
    protected void renumberVoucherNumber( Voucher_CN _voucher_CNNew, Voucher_CN _voucher_CNOriginal)
    {
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;
        LedgerJournalTrans                  ledgerJournalTrans;
        GeneralJournalEntry_W               generalJournalEntryW;
        GeneralJournalEntry                 generalJournalEntry;

        update_recordset ledgerJournalTrans
            setting Voucher_CN = _voucher_CNNew
            exists join subledgerVoucherGeneralJournalEntry
                where ledgerJournalTrans.Voucher    == subledgerVoucherGeneralJournalEntry.Voucher
                    && ledgerJournalTrans.TransDate == subledgerVoucherGeneralJournalEntry.AccountingDate
            exists join generalJournalEntry
                where subledgerVoucherGeneralJournalEntry.GeneralJournalEntry == generalJournalEntry.RecId
                    && generalJournalEntry.AccountingDate == transDate
            exists join generalJournalEntryW
                where generalJournalEntryW.GeneralJournalEntry == generalJournalEntry.RecId
                    && generalJournalEntryW.LedgerVoucherType_CN == ledgerVoucherType_CN.RecId
                    && generalJournalEntryW.Voucher_CN == _voucher_CNOriginal;

        while select RecId from generalJournalEntry
            exists join generalJournalEntryW
                where generalJournalEntryW.GeneralJournalEntry == generalJournalEntry.RecId
                    && generalJournalEntry.AccountingDate == transDate
                    && generalJournalEntryW.LedgerVoucherType_CN == ledgerVoucherType_CN.RecId
                    && generalJournalEntryW.Voucher_CN == _voucher_CNOriginal
        {
            this.logRenumberVoucher(generalJournalEntry.RecId, _voucher_CNOriginal, _voucher_CNNew);
            renumbers++;
        }

        update_recordset generalJournalEntryW
            setting Voucher_CN = _voucher_CNNew
                exists join generalJournalEntry
                    where generalJournalEntryW.GeneralJournalEntry == generalJournalEntry.RecId
                        && generalJournalEntry.AccountingDate == transDate
                        && generalJournalEntryW.LedgerVoucherType_CN == ledgerVoucherType_CN.RecId
                        && generalJournalEntryW.Voucher_CN == _voucher_CNOriginal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// The run function of the <c>LedgerVoucherContinuityFix_CN</c> class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        try
        {
            ttsbegin;
            recordInsertList = new RecordInsertList(tableNum(LedgerVoucherRenumberLog_CN));

            types = 0;
            renumbers = 0;

            while select ledgerVoucherType_CN
            {
                types++;

                numSeqTable = NumberSequenceTable::find(ledgerVoucherType_CN.NumberSequenceTable);
                NumberSequenceTable_CN numSeqTableCN = NumberSequenceTable_CN::findByNumberSequenceTable(numSeqTable.RecId);

                if (numSeqTableCN.RestartNum)
                {
                    curNum = 0;

                    for (transDate = fiscalCalendarPeriod.StartDate; transDate <= fiscalCalendarPeriod.EndDate; transDate++)
                    {
                        conVoucherCN = conNull();
                        gapSet = new Set(Types::Integer);
                        invertedGapSet = new Set(Types::Integer);

                        this.initVoucherAndGapList(ledgerVoucherType_CN, transDate);

                        if (gapSet.elements() && LedgerVoucherType_CN::existByNumberSequence(ledgerVoucherType_CN, ledgerVoucherType_CN.NumberSequenceTable))
                        {
                            this.findVoucherFromDifferentVoucherTypes();
                        }

                        this.fixNonContinuallyVoucherNumber();
                    }

                    this.updateNumSequenceNextValue(numSeqTable);
                }
            }

            recordInsertList.insertDatabase();
            ttscommit;

            info(strFmt("@GLS63819", types, fiscalCalendarPeriod.StartDate, renumbers));

            if (NoYes::Yes == printRenumberLog)
            {
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCN00009, funcName());

                this.printRenumberLogReport();
            }
        }

        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>swapVoucherNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Swaps the Chinese vouchers for the specified vouchers.
    /// </summary>
    /// <param name="_refRecIdNew">
    /// The second RecId which the General Journal Entry to be swapped.
    /// </param>
    /// <param name="_voucher_CNOrig">
    /// The first Chinese voucher to be swapped.
    /// </param>
    /// <param name="_voucher_CNNew">
    /// The second Chinese voucher to be swapped.
    /// </param>
    protected void swapVoucherNumber(RefRecId _refRecIdNew, Voucher_CN _voucher_CNOrig, Voucher_CN _voucher_CNNew)
    {
        LedgerEntryJournal      ledgerEntryJournal;
        LedgerJournalTrans      ledgerJournalTrans;
        GeneralJournalEntry_W   generalJournalEntryW;
        GeneralJournalEntry     generalJournalEntry;
        TmpRecIdFilter          tmpLedgerJournalTransOrig;
        TmpRecIdFilter          tmpLedgerJournalTransNew;
        TmpRecIdFilter          tmpGeneralJournalEntryOrig;
        TmpRecIdFilter          tmpGeneralJournalEntryNew;
        TransDate               newTransDate = GeneralJournalEntry::find(_refRecIdNew).AccountingDate;

        insert_recordset tmpLedgerJournalTransOrig (RefRecId)
        select RecId from ledgerJournalTrans
            where ledgerJournalTrans.Voucher_CN == _voucher_CNOrig
            exists join ledgerEntryJournal
                where ledgerEntryJournal.JournalNumber == ledgerJournalTrans.JournalNum
            exists join generalJournalEntry
                where generalJournalEntry.LedgerEntryJournal == ledgerEntryJournal.RecId
                    && generalJournalEntry.AccountingDate == transDate
            exists join generalJournalEntryW
                where generalJournalEntryW.GeneralJournalEntry == generalJournalEntry.RecId
                    && generalJournalEntryW.LedgerVoucherType_CN == ledgerVoucherType_CN.RecId
                    && generalJournalEntryW.Voucher_CN == _voucher_CNOrig;

        insert_recordset tmpLedgerJournalTransNew (RefRecId)
        select RecId from ledgerJournalTrans
            where ledgerJournalTrans.Voucher_CN == _voucher_CNNew
            exists join ledgerEntryJournal
                where ledgerEntryJournal.JournalNumber == ledgerJournalTrans.JournalNum
            exists join generalJournalEntry
                where generalJournalEntry.LedgerEntryJournal == ledgerEntryJournal.RecId
                    && generalJournalEntry.AccountingDate == newTransDate
            exists join generalJournalEntryW
                where generalJournalEntryW.GeneralJournalEntry == generalJournalEntry.RecId
                    && generalJournalEntryW.LedgerVoucherType_CN == ledgerVoucherType_CN.RecId
                    && generalJournalEntryW.Voucher_CN == _voucher_CNNew;

        insert_recordset tmpGeneralJournalEntryOrig (RefRecId)
        select RecId from generalJournalEntry
                where generalJournalEntry.AccountingDate == transDate
            exists join generalJournalEntryW
                where generalJournalEntryW.GeneralJournalEntry == generalJournalEntry.RecId
                    && generalJournalEntryW.LedgerVoucherType_CN == ledgerVoucherType_CN.RecId
                    && generalJournalEntryW.Voucher_CN == _voucher_CNOrig;

        insert_recordset tmpGeneralJournalEntryNew (RefRecId)
            select RecId from generalJournalEntry
                    where generalJournalEntry.AccountingDate == newTransDate
                exists join generalJournalEntryW
                    where generalJournalEntryW.GeneralJournalEntry == generalJournalEntry.RecId
                        && generalJournalEntryW.LedgerVoucherType_CN == ledgerVoucherType_CN.RecId
                        && generalJournalEntryW.Voucher_CN == _voucher_CNNew;

        // original
        update_recordset ledgerJournalTrans
            setting Voucher_CN = _voucher_CNNew
            exists join tmpLedgerJournalTransOrig
                where ledgerJournalTrans.RecId == tmpLedgerJournalTransOrig.RefRecId;

        // original
        update_recordset generalJournalEntryW
            setting Voucher_CN = _voucher_CNNew
            exists join tmpGeneralJournalEntryOrig
                where generalJournalEntryW.GeneralJournalEntry == tmpGeneralJournalEntryOrig.RefRecId;

        // new
        update_recordset ledgerJournalTrans
            setting Voucher_CN = _voucher_CNOrig
            exists join tmpLedgerJournalTransNew
                where ledgerJournalTrans.RecId == tmpLedgerJournalTransNew.RefRecId;

        update_recordset generalJournalEntryW
            setting Voucher_CN = _voucher_CNOrig
            exists join tmpGeneralJournalEntryNew
                where generalJournalEntryW.GeneralJournalEntry == tmpGeneralJournalEntryNew.RefRecId;

        while select RefRecId from tmpGeneralJournalEntryOrig
        {
            this.logRenumberVoucher(tmpGeneralJournalEntryOrig.RefRecId, _voucher_CNOrig, _voucher_CNNew);
            renumbers++;
        }
        while select RefRecId from tmpGeneralJournalEntryNew
        {
            this.logRenumberVoucher(tmpGeneralJournalEntryNew.RefRecId, _voucher_CNNew, _voucher_CNOrig);
            renumbers++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNumSequenceNextValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the next value of the number sequence.
    /// </summary>
    /// <param name="_numSeqTable">
    /// The number sequence table to update.
    /// </param>
    protected void updateNumSequenceNextValue(NumberSequenceTable _numSeqTable)
    {
        NumberSequenceTable     numSeqTableUpdate;
        NumberSequenceList      numberSequenceList;
        NumberPeriod_CN         numberPeriod;
        NumberPeriod_CN         numberPeriodUpdate;
        NumberSequenceTable_CN  numberSequenceTableCN;
        GeneralJournalEntry_W   generalJournalEntryW;
        GeneralJournalEntry     generalJournalEntry;
        LedgerVoucherType_CN    localLedgerVoucherType;

        numberSequenceTableCN = NumberSequenceTable_CN::findByNumberSequenceTable(_numSeqTable.RecId);

        if (LedgerVoucherType_CN::existByNumberSequence(ledgerVoucherType_CN, ledgerVoucherType_CN.NumberSequenceTable))
        {
            select maxof(Voucher_CN) from generalJournalEntryW
            exists join localLedgerVoucherType
                where localLedgerVoucherType.NumberSequenceTable == ledgerVoucherType_CN.NumberSequenceTable
                    && generalJournalEntryW.LedgerVoucherType_CN == localLedgerVoucherType.RecId
            exists join generalJournalEntry
                where generalJournalEntry.RecId           == generalJournalEntryW.GeneralJournalEntry
                    && generalJournalEntry.AccountingDate >= fiscalCalendarPeriod.StartDate
                    && generalJournalEntry.AccountingDate <= fiscalCalendarPeriod.EndDate;

            curNum  = NumberSeq::numRemoveFormat(generalJournalEntryW.Voucher_CN, _numSeqTable.Format);
        }

        if (numberSequenceTableCN.RestartNum)
        {
            //Clear up the Histroy list for this number sequence
            delete_from numberPeriod
                where numberPeriod.NumberSequenceTable  == _numSeqTable.RecId
                   && numberPeriod.PeriodStart          == fiscalCalendarPeriod.StartDate
                   && numberPeriod.PeriodCode           == FiscalPeriodType::Operating
                   && numberPeriod.Status               != VoucherStatus_CN::Next;

            //update the voucher type’s number sequence’s next number to the last voucher number + 1
            numberPeriodUpdate = NumberPeriod_CN::findByNaturalKey(_numSeqTable.RecId, fiscalCalendarPeriod.StartDate, FiscalPeriodType::Operating, true);

            if (numberPeriodUpdate)
            {
                numberPeriodUpdate.NextRec = curNum + 1;
                numberPeriodUpdate.update();
            }
        }
        else
        {
            //update the voucher type’s number sequence’s next number to the last voucher number + 1
            numSeqTableUpdate = NumberSequenceTable::find(_numSeqTable.RecId, true);
            numSeqTableUpdate.NextRec = curNum + 1;
            numSeqTableUpdate.doUpdate();
            //Clear up the Histroy list for this number sequence
            delete_from numberSequenceList
                where numberSequenceList.NumberSequenceId == _numSeqTable.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMissingVouchersHighestNumber</Name>
				<Source><![CDATA[
    private int getMissingVouchersHighestNumber()
    {
        int ret = 0;

        if (invertedGapSet.elements())
        {
            SetEnumerator se = invertedGapSet.getEnumerator();
            se.moveNext();
            ret = -se.current();
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>