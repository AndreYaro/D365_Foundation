<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ConfigHierarchyTree</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ConfigHierarchyTree extends ConfigHierarchy
{
    #resAppl

    int                     parents[];
    boolean                 parentHasChildren[];
    Counter                 parentIdx;
    Map                     data;
    int                     expanded[];
    int                     curParentIdx;
    FormTreeControl         tree;
    FormRun                 formRun;
    ImageListAppl_Prod      imageList;

    #define.BOM(1)
    #localmacro.BOMlist
        %1recId,
        presLevel,
        curParentIdx,
        %2parentIdx,
        %1itemId
    #endmacro

    #define.Route(2)
    #localmacro.RouteList
        BOMId,
        groupId,
        configRouteRecId
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addParent</Name>
				<Source><![CDATA[
    int addParent(str text, int image)
    {
        int nodeId = tree.add(parents[curParentIdx],0,text,image,1);

        parentIdx++;
        parents[parentIdx]          = nodeId;

        return nodeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doBOM</Name>
				<Source><![CDATA[
    boolean doBOM(BOM bom)
    {
        InventTable     inventTable     = bom.inventTable();
        InventItemType  inventItemType  = inventTable.inventItemType();
        Object          obj = formRun;
        int             nodeIdx;

        nodeIdx = tree.add(parents[curParentIdx],0,obj.boMtxt(bom.ItemId),imageList.image(inventItemType.imageRessNo()));

        data.insert(nodeIdx,[#BOM,[#BOMlist(BOM.)]]);

        parentHasChildren[curParentIdx] = true;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doRoute</Name>
				<Source><![CDATA[
    boolean doRoute(
        BOMId               bomId,
        ConfigGroupId       groupId,
        RecId               configRouteRecId
    )
    {
        Object          obj = formRun;
        int             nodeIdx;

        nodeIdx     = this.addParent(obj.configRouteTxt(bomId,groupId,configRouteRecId),imageList.image(#ImageConfigGroup));
        data.insert(nodeIdx,[#Route,[#RouteList]]);

        parentHasChildren[curParentIdx] = true;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>imageList</Name>
				<Source><![CDATA[
    ImageListAppl_Prod imageList()
    {
        return imageList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(
        TransDate           _versDate,
        FormTreeControl     _tree,
        FormRun             _formRun
        )
    {
        super(_versDate);

        tree        = _tree;
        formRun     = _formRun;

        imageList = new ImageListAppl_Prod();
        tree.setImagelist(imageList.imageList());

        data     = new Map(Types::Integer,Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>scanDown</Name>
				<Source><![CDATA[
    void scanDown(
        ItemId  itemId,
        BOMId   bomId = ''
        )
    {
        int             nodeId;

        parentIdx   = 0;
        parents[0]  = 0;
        expanded[0] = 0;
        tree.deleteAll();
        this.reset();
        curParentIdx = 1;
        nodeId = this.addParent(strFmt('%1 / %2',itemId,bomId),imageList.image(#ImageProduction));

        super(itemId,bomId);

        tree.expand(nodeId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>scanDownBOM</Name>
				<Source><![CDATA[
    boolean scanDownBOM(
        BOMId               bomId,
        ConfigGroupId       groupId,
        RecId               configRouteRecId
        )
    {
        int             tmpParent = curParentIdx;
        boolean         ret;

        curParentIdx = parentIdx;

        ret = super(bomId,groupId,configRouteRecId);

        curParentIdx = tmpParent;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scanDownRoute</Name>
				<Source><![CDATA[
    protected boolean scanDownRoute(
        BOM     bom,
        int     restartParentIdx = 0
        )
    {
        int             tmpParent = curParentIdx;
        boolean         ret;

        if (restartParentIdx)
            curParentIdx = restartParentIdx;
        else
            curParentIdx = parentIdx;

        expanded[curParentIdx] = 1;
        ret = super(bom);

        curParentIdx = tmpParent;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scanDownRouteRestart</Name>
				<Source><![CDATA[
    void scanDownRouteRestart(int nodeIdx)
    {
        RecId           recId;
        BOM             bom;
        int             restartParentIdx;
        int             type;
        container       c;
        ItemId          itemId;
        Counter         i;
        FormTreeItem    treeItem;

        if (! data.exists(nodeIdx))
            return;

        [type,c] = data.lookup(nodeIdx);
        if (type != #BOM)
            return;

        [#BOMList(,restart)] = c;

        if (expanded[restartParentIdx])
            return;

        bom = BOM::findRecId(recId);
        if (! bom)
            return;

        this.parmStopLevel(presLevel+2);
        this.scanDownRoute(bom,restartParentIdx);

        for (i=2;i<=parentIdx;i++)
        {
            if (! expanded[i] || parentHasChildren[i])
                continue;

            treeItem = tree.getItem(parents[i]);
            if (treeItem.children())
            {
                treeItem.children(false);
                tree.setItem(treeItem);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAllNodes</Name>
				<Source><![CDATA[
    void updateAllNodes(int parent = 0)
    {
        int             child;
        FormTreeItem    treeItem;
        int             type;
        container       c;

        child = parent ? tree.getChild(parent) : tree.getRoot();

        while (child)
        {
            treeItem = tree.getItem(child);

            if (parent && treeItem)
            {
                [type,c] = data.lookup(child);

                switch (type)
                {
                    case #BOM:
                        this.updateBOM(treeItem,c);
                        break;
                    case #route:
                        this.updateRoute(treeItem,c);
                        break;
                }
            }

            this.updateAllNodes(child);

            child = tree.getNextSibling(child);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBOM</Name>
				<Source><![CDATA[
    void updateBOM(
        FormTreeItem    treeItem,
        container       c
        )
    {
        RecId           recId;
        int             updateParentIdx;
        ItemId          itemId;
        Object          obj = formRun;

        [#BOMList(,update)] = c;

        treeItem.text(obj.bomTxt(itemId));
        tree.setItem(treeItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRoute</Name>
				<Source><![CDATA[
    void updateRoute(
        FormTreeItem    treeItem,
        container       c
        )
    {
        BOMId               bomId;
        ConfigGroupId       groupId;
        RecId               configRouteRecId;
        Object              obj = formRun;

        [#routeList(,update)] = c;

        treeItem.text(obj.configRouteTxt(bomId,groupId,configRouteRecId));
        tree.setItem(treeItem);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>