<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesOrderArchiveDetailsFormInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  The <c>SalesOrderArchiveDetailsFormInteraction</c> class is a helper class for the <c>SalesOrderArchiveDetails</c> form.
/// </summary>
internal final class SalesOrderArchiveDetailsFormInteraction
{
    #ISOCountryRegionCodes

    private SalesTable                    salesTableTmp;
    private SalesLine                     salesLineTmp;
    private SalesLineForeignTradeCategory salesLineForeignTradeCategoryTmp;
    private TaxServiceTariff              taxServiceTariff;
    private boolean                       isPL;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        isPL = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesOrderArchiveDetailsFormInteraction construct()
    {
        return new SalesOrderArchiveDetailsFormInteraction();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesLineForeignTradeCategoryTmp</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal SalesLineForeignTradeCategory parmSalesLineForeignTradeCategoryTmp(SalesLineForeignTradeCategory _salesLineForeignTradeCategoryTmp = salesLineForeignTradeCategoryTmp)
    {
        salesLineForeignTradeCategoryTmp = _salesLineForeignTradeCategoryTmp;
        return salesLineForeignTradeCategoryTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesLineTmp</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal SalesLine parmSalesLineTmp(SalesLine _salesLineTmp = salesLineTmp)
    {
        salesLineTmp = _salesLineTmp;
        return salesLineTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesTableTmp</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal SalesTable parmSalesTableTmp(SalesTable _salesTableTmp = salesTableTmp)
    {
        salesTableTmp = _salesTableTmp;
        return salesTableTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxServiceTariff</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal TaxServiceTariff parmTaxServiceTariff(TaxServiceTariff _taxServiceTariff = taxServiceTariff)
    {
        taxServiceTariff = _taxServiceTariff;
        return taxServiceTariff;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTMPRecords</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void buildTMPRecords(container _salesTableHistoryPackedList)
    {
        new OverwriteSystemfieldsPermission().assert();

        if (_salesTableHistoryPackedList == connull())
        {
            return;
        }

        salesTableTmp.recordLevelSecurity(true);
        salesTableTmp.setTmp();

        salesLineTmp.recordLevelSecurity(true);
        salesLineTmp.setTmp();

        salesLineForeignTradeCategoryTmp.recordLevelSecurity(true);
        salesLineForeignTradeCategoryTmp.setTmp();

        // <GEEPL>
        if (isPL)
        {
            taxServiceTariff.recordLevelSecurity(true);
            taxServiceTariff.setTmp();
        }
        // </GEEPL>
        
        SalesTableHistory salesTableHistory;

        ListEnumerator le = List::create(_salesTableHistoryPackedList).getEnumerator();

        while (le.moveNext())
        {
            salesTableHistory = le.current();

            if (salesTableHistory)
            {
                salesTableTmp.clear();
                salesTableTmp.overwriteSystemfields(true);
                this.buf2Buf(salesTableHistory, salesTableTmp);
                salesTableTmp.doInsert();

                // <GEEPL>
                if (isPL)
                {
                    taxServiceTariff.clear();
                    taxServiceTariff.ParentRecId = salesTableTmp.RecId;
                    taxServiceTariff.ParentTableId = salesTableTmp.TableId;
                    taxServiceTariff.ServiceTariffNumber = TaxServiceTariff::findByParent(salesTableHistory.TableId, salesTableHistory.RecId, false).ServiceTariffNumber;
                    taxServiceTariff.doInsert();
                }
                // </GEEPL>

                SalesLineHistory salesLineHistory;

                while select salesLineHistory
                    where salesLineHistory.SalesId == salesTableHistory.SalesId
                {
                    salesLineTmp.clear();
                    salesLineTmp.overwriteSystemfields(true);
                    this.buf2Buf(salesLineHistory, salesLineTmp);
                    salesLineTmp.doInsert();

                    // <GEEPL>
                    if (isPL)
                    {
                        taxServiceTariff.clear();
                        taxServiceTariff.ParentRecId = salesLineTmp.RecId;
                        taxServiceTariff.ParentTableId = salesLineTmp.TableId;
                        taxServiceTariff.ServiceTariffNumber = TaxServiceTariff::findByParent(salesLineHistory.TableId, salesLineHistory.RecId, false).ServiceTariffNumber;
                        taxServiceTariff.doInsert();
                    }
                }
            }
        }

        CodeAccessPermission::revertAssert();
        salesTableTmp.overwriteSystemfields(false);
        salesLineTmp.overwriteSystemfields(false);
        salesLineForeignTradeCategoryTmp.overwriteSystemfields(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buf2Buf</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies data from one record buffer to another.
    /// </summary>
    /// <param name="_from">The source record.</param>
    /// <param name="_to">The destination record.</param>
    private void buf2Buf(Common _from, Common _to)
    {
        DictTable sourceTable = new DictTable(_from.TableId);
        DictTable destTable = new DictTable(_to.TableId);

        FieldId fieldId = sourceTable.fieldNext(0);

        while (fieldId && !isSysId(fieldId))
        {
            FieldId destFieldId = destTable.fieldName2Id(sourceTable.fieldName(fieldId));

            if (destFieldId)
            {
                _to.(destFieldId) = _from.(fieldId);
            }

            fieldId= sourceTable.fieldNext(fieldId);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>