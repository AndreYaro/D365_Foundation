<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSGS1BarcodeEAN128Base</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Globalization;
abstract public class WHSGS1BarcodeEAN128Base
{
    #WHSRF

    protected str                   decodeStr;
    protected WHSGS1PolicyName      policyName;
    protected WHSRFPassthrough      pass;
    protected WHSParameters         parameters = WHSParameters::find();
    protected str                   controlName;
    [SysObsolete('Callers should switch to barcodeDataParser', false, 31\7\2023)]
    protected WHSGS1Parser          valueParser;
    protected WhsGS1PolicyAction    policyAction;
    private   List                  fieldHandlers = new List(Types::Class);

    protected WHSIBarcodeDataParser barcodeDataParser;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findGS1Start</Name>
				<Source><![CDATA[
    private int findGS1Start()
    {
        int prefixEndPosition = WHSParameters::hasGS1Prefix(decodeStr);

        return prefixEndPosition ? prefixEndPosition + 1 : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findParsingSetup</Name>
				<Source><![CDATA[
    private WHSGS1ParsingSetup findParsingSetup(int _start)
    {
        int identifierLength = 2;
        str identifier = subStr(decodeStr, _start, identifierLength);

        WHSGS1ParsingSetup parsingSetup = WHSGS1ParsingSetup::find(identifier);

        while (!parsingSetup && identifierLength < parameters.GS1IdentifierMaxLength)
        {
            identifierLength++;
            identifier = subStr(decodeStr, _start, identifierLength);
            parsingSetup = WHSGS1ParsingSetup::find(identifier);
        }

        return parsingSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMDIdentifier</Name>
				<Source><![CDATA[
    protected WHSGS1MDIdentifier findMDIdentifier(WHSGS1Identifier _identifier)
    {
        WHSGS1MDIdentifier mdIdentifier;

        mdIdentifier = this.findMDIdentifierFromGenericSetup(_identifier);

        return (mdIdentifier && !this.isMDIdentifierAlreadyPopulated(mdIdentifier)) ? mdIdentifier : this.findMDIdentifierFromPolicy(_identifier);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMDIdentifierFromGenericSetup</Name>
				<Source><![CDATA[
    protected WHSGS1MDIdentifier findMDIdentifierFromGenericSetup(WHSGS1Identifier _identifier)
    {
        return WHSGS1GenericSetup::exist(controlName, _identifier) ? controlName : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMDIdentifierFromPolicy</Name>
				<Source><![CDATA[
    protected WHSGS1MDIdentifier findMDIdentifierFromPolicy(WHSGS1Identifier _identifier)
    {
        WHSGS1PolicyLine policyLine = WHSGS1PolicyLine::find(policyName, _identifier);

        while (policyLine.RecId && policyLine.Sorting != 0)
        {
            if (this.isMDIdentifierAlreadyPopulated(policyLine.MDIdentifier))
            {
                WHSGS1PolicyLine nextPolicyLine = WHSGS1PolicyLine::find(policyName, _identifier, policyLine.Sorting);

                if (!nextPolicyLine)
                {
                    break;
                }

                policyLine = nextPolicyLine;
            }
            else
            {
                break;
            }
        }

        return policyLine.MDIdentifier;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMDIdentifierAlreadyPopulated</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean isMDIdentifierAlreadyPopulated(WHSGS1MDIdentifier _mdIdentifier)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>decode</Name>
				<Source><![CDATA[
    public void decode()
    {
        this.decodeEnhancedParser();            
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValue</Name>
				<Source><![CDATA[
    private str getValue(WHSGS1ParsingSetup _parsingSetup, int _decimal, int _start, int _valueLength)
    {
        str value;

        switch (_parsingSetup.Type)
        {
            case WHSGS1Type::Numeric:
                if (_decimal)
                {
                    real decimal = str2int(subStr(decodeStr, _start, _valueLength));

                    int i;

                    while (i < _decimal)
                    {
                        decimal = decimal / 10;
                        i++;
                    }

                    value = strFmt('%1', decimal);
                }
                else
                {
                    value = subStr(decodeStr, _start, _valueLength);
                }
                break;

            case WHSGS1Type::Date:
                value = subStr(decodeStr, _start, _valueLength);
                WHSUserId userId = pass.lookupStr(#UserId);
                CultureInfo userCulture = new CultureInfo(WHSParameters::getCurrentUserDateCulture(userId));
                utcdatetime dateTime = System.DateTime::ParseExact(value, 'yyMMdd', CultureInfo::get_InvariantCulture());
                value = WhsrfControlData::convertDate2DateFormatStrCurrentUserDateCulture(DateTimeUtil::date(dateTime), userId);
                    
                break;

            case WHSGS1Type::Alfanumeric:
                value = subStr(decodeStr, _start, _valueLength);
                break;
        }

        if (_parsingSetup.AddIdentifier)
        {
            value = _parsingSetup.Identifier + value;
        }

        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValue</Name>
				<Source><![CDATA[
    abstract internal protected void setValue(WHSGS1MDIdentifier _mdIdentifier, str _value)
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>processValue</Name>
				<Source><![CDATA[
    private void processValue(WHSGS1ParsingSetup _parsingSetup, WHSGS1MDIdentifier _mdIdentifier, int _decimal, int _start, int _valueLength)
    {
        if (_mdIdentifier)
        {    
            str value = this.getValue(_parsingSetup, _decimal, _start, _valueLength);
            policyAction = WhsGS1PolicyAction::InsertIntoPass;
            this.setValue(_mdIdentifier, value);          
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSaveForDefaultPolicy</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean isSaveForDefaultPolicy()
    {
        return policyAction == WhsGS1PolicyAction::SaveForDefault;
    }

]]></Source>
			</Method>
			<Method>
				<Name>decodeEnhancedParser</Name>
				<Source><![CDATA[
    private void decodeEnhancedParser()
    {
        Map symbolData;

        if (WHSBarcodeDataParserExtensibilityV2Flight::instance().isEnabled())
        {
            if (!barcodeDataParser)
            {
                barcodeDataParser = WHSBarcodeDataParserFactory::newForInputString(decodeStr).tryCreate();
            }

            if (!barcodeDataParser)
            {
                return;
            }

            symbolData = barcodeDataParser.getBarcodeData();
        }
        else
        {
            if (!valueParser)
            {
                valueParser = WHSGS1Parser::newWithInputString(decodeStr);
            }

            if (!valueParser.isGS1EncodedData())
            {
                return;
            }

            symbolData = valueParser.gs1EncodedData();
        }
        
        this.onSymbolDataDecoded(symbolData);

        if (this.isSaveForDefaultPolicy())
        {
            this.expireExistingGS1ScannedValues(symbolData);
            pass.insert(WHSBarcodeControlConstants::BarcodeAutoSubmit, WHSGS1PolicyTable::find(policyName).AutoSubmitStep);
        }

        MapEnumerator symbolDataEnumerator = symbolData.getEnumerator();
        while (symbolDataEnumerator.moveNext())
        {
            WHSGS1Identifier aiIdentifier = symbolDataEnumerator.currentKey();    
       
            if (this.isSaveForDefaultPolicy())
            {
                this.setValueWithSaveForDefaultPolicy(aiIdentifier, symbolDataEnumerator.currentValue());
            }
            else
            {
                WHSGS1MDIdentifier mdIdentifier = this.findMDIdentifier(aiIdentifier);
                if (mdIdentifier)
                {
                    str data = this.gs1DataToString(symbolDataEnumerator.currentValue());
                    this.setValue(mdIdentifier, data);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValueWithSaveForDefaultPolicy</Name>
				<Source><![CDATA[
    private void setValueWithSaveForDefaultPolicy(WHSGS1Identifier _aiIdentifier, anytype _data)
    {
        WHSGS1MDIdentifier mdIdentifier = this.findMDIdentifierFromGenericSetup(_aiIdentifier);
        str data = this.gs1DataToString(_data);

        if (mdIdentifier && !this.isMDIdentifierAlreadyPopulated(mdIdentifier))
        {
            this.setValue(mdIdentifier, data);
        }
        else
        {
            WHSGS1PolicyLine policyLine;
            while select MDIdentifier from policyLine
                where policyLine.PolicyName == policyName
                    && policyLine.Identifier == _aiIdentifier
            {
                var policyMDIdentifier = policyLine.MDIdentifier;
                this.setValue(policyMDIdentifier, data);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>gs1DataToString</Name>
				<Source><![CDATA[
    private str gs1DataToString(anytype _data)
    {
        // Used to convert encoded data to strings used by mobile device, so we use a special method here

        switch (typeOf(_data))
        {
            case Types::String:
                return _data;

            case Types::Real:
                return strfmt('%1', _data);

            case Types::Date:                
                WHSUserId userId = pass.lookupStr(#UserId);
                CultureInfo userCulture = new CultureInfo(WHSParameters::getCurrentUserDateCulture(userId));                
                return WhsrfControlData::convertDate2DateFormatStrCurrentUserDateCulture(_data, userId);                    
        }        

        return any2Str(_data);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSymbolDataDecoded</Name>
				<Source><![CDATA[
    protected void onSymbolDataDecoded(Map _symbolData)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPolicyTable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected static WHSGS1PolicyTable findPolicyTable(WHSMenuItemName _menuItemName)
    {
        return WHSGS1PolicyTable::find(WHSRFMenuItemTable::find(_menuItemName).GS1PolicyName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateGS1ScannedValues</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void populateGS1ScannedValues(WHSGS1MDIdentifier _mdIdentifier, str _value)
    {
        Map gs1ScannedValues;

        gs1ScannedValues = WHSGS1BarcodeEAN128Base::getGS1ScannedValuesFromPass(pass);

        gs1ScannedValues.insert(_mdIdentifier, _value);

        pass.insert(WHSBarcodeControlConstants::BarcodeScannedValues, ContainerHelper::serialize(gs1ScannedValues.pack()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGS1ScannedValuesFromPass</Name>
				<Source><![CDATA[
    internal static Map getGS1ScannedValuesFromPass(WHSRFPassthrough _pass)
    {
        Map gs1ScannedValues = new Map(Types::String, Types::String);
        if (_pass && _pass.exists(WHSBarcodeControlConstants::BarcodeScannedValues))
        {
            gs1ScannedValues = Map::create(ContainerHelper::deserialize(_pass.lookupStr(WHSBarcodeControlConstants::BarcodeScannedValues)));
        }

        return gs1ScannedValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGS1UsedScannedValuesFromPass</Name>
				<Source><![CDATA[
    internal static Map getGS1UsedScannedValuesFromPass(WHSRFPassthrough _pass)
    {
        Map gs1UsedScannedValues = new Map(Types::String, Types::String);

        if (_pass && _pass.exists(WHSBarcodeControlConstants::BarcodeUsedScannedValues))
        {
            gs1UsedScannedValues = Map::create(ContainerHelper::deserialize(_pass.lookupStr(WHSBarcodeControlConstants::BarcodeUsedScannedValues)));
        }

        return gs1UsedScannedValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateGS1UsedScannedValues</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void populateGS1UsedScannedValues(WHSGS1MDIdentifier _mdIdentifier, str _value)
    {
        Map gs1UsedScannedValues;

        gs1UsedScannedValues = WHSGS1BarcodeEAN128Base::getGS1UsedScannedValuesFromPass(pass);

        gs1UsedScannedValues.insert(_mdIdentifier, _value);
        
        pass.insert(WHSBarcodeControlConstants::BarcodeUsedScannedValues, ContainerHelper::serialize(gs1UsedScannedValues.pack()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>expireExistingGS1ScannedValues</Name>
				<Source><![CDATA[
    private void expireExistingGS1ScannedValues(Map _symbolData)
    {
        Map gs1UsedScannedValues = WHSGS1BarcodeEAN128Base::getGS1UsedScannedValuesFromPass(pass);
        if (!gs1UsedScannedValues || gs1UsedScannedValues.empty())
        {
            return;
        }

        MapEnumerator symbolDataEnumerator = _symbolData.getEnumerator();
        while (symbolDataEnumerator.moveNext())
        {
            WHSGS1Identifier aiIdentifier = symbolDataEnumerator.currentKey();
            str data = this.gs1DataToString(symbolDataEnumerator.currentValue());

            WHSGS1PolicyLine policyLine;
            while select MDIdentifier from policyLine
                where policyLine.PolicyName == policyName
                    && policyLine.Identifier == aiIdentifier
            {
                WHSGS1MDIdentifier mdIdentifier = policyLine.MDIdentifier;
                if (gs1UsedScannedValues.exists(mdIdentifier))
                {
                    if (gs1UsedScannedValues.lookup(mdIdentifier) != data)
                    {
                        // this indicates a new scan, so we expire the scanned values
                        pass.remove(WHSBarcodeControlConstants::BarcodeScannedValues);
                        pass.remove(WHSBarcodeControlConstants::BarcodeUsedScannedValues);
                        return;
                    }
                    
                    gs1UsedScannedValues.remove(mdIdentifier);
                }
            }
        }
        pass.insert(WHSBarcodeControlConstants::BarcodeUsedScannedValues, ContainerHelper::serialize(gs1UsedScannedValues.pack()));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>