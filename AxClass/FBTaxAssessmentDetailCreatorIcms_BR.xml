<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBTaxAssessmentDetailCreatorIcms_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Calculates the ICMS tax assessment details
/// </summary>
class FBTaxAssessmentDetailCreatorIcms_BR extends FBTaxAssessmentDetailCreator_BR
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createAllAssessmentDetails</Name>
				<Source><![CDATA[
	/// <summary>
    /// Creates the tax assessment detail for all fiscal documents/receipts.
    /// </summary>
    public void createAllAssessmentDetails()
    {
        ttsbegin;
    
        changeCompany(bookingPeriod.FiscalEstablishmentDataArea)
        {
            this.createDetailsForFiscalDocuments();
            this.createDetailsForZReports();
    
            this.createICMSDiffAdjustments();
    
            this.bookPostedTaxAdjustments();
    
            this.createCIAP();
        }
    
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCIAP</Name>
				<Source><![CDATA[
    private void createCIAP()
    {
        new FbCIAPBookProcessor_BR(fbTaxAssessment).run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDetailsForFiscalDocuments</Name>
				<Source><![CDATA[
	private void createDetailsForFiscalDocuments()
    {
        FiscalDocument_BR                       fiscalDocument;
        FiscalDocumentLine_BR                   fiscalDocumentLine;
        FiscalDocumentTaxTrans_BR               fiscalDocumentTaxTrans;
        FiscalDocumentTaxTransPovertyFund_BR    fiscalDocumentTaxTransPovertyFund;
        FBBookingPeriodFiscalDocument_BR        bookingPeriodFiscalDocument;
        FBTaxTrans_BR                           fbTaxTrans;
        FBTaxTrans_BR                           existingFbTaxTrans;
        FBTaxTransPovertyFund_BR                fbTaxTransPovertyFund;
        FBTaxAssessmentClassification_BR        classification;
    
        while select AccountingDate, Direction, FiscalDocumentNumber, FiscalEstablishment, DataAreaId , Model, RecId, Voucher
            from fiscalDocument
            where fiscalDocument.AccountingDate  >= fbTaxAssessment.FromDate
                && fiscalDocument.AccountingDate <= fbTaxAssessment.ToDate
            join fbBookingPeriod_BR
                from bookingPeriodFiscalDocument
                where bookingPeriodFiscalDocument.FBBookingPeriod_BR == fbTaxAssessment.FBBookingPeriod_BR
                    && bookingPeriodFiscalDocument.FiscalDocument_BR == fiscalDocument.RecId
                    && (bookingPeriodFiscalDocument.FiscalSituation == FBFiscalDocumentSituation_BR::Regular
                        || bookingPeriodFiscalDocument.FiscalSituation == FBFiscalDocumentSituation_BR::Complementary
                        || bookingPeriodFiscalDocument.FiscalSituation == FBFiscalDocumentSituation_BR::SpecialLegislation)
            join cfop, RecId
                from fiscalDocumentLine
                where fiscalDocumentLine.FiscalDocument == fiscalDocument.RecId
            join FiscalValue, RecId, RetainedTax, TaxationOrigin, TaxationCode, TaxBaseAmount, TaxBaseAmountExempt, TaxBaseAmountOther, TaxAmount
                from fiscalDocumentTaxTrans
                where fiscalDocumentTaxTrans.FiscalDocumentLine == fiscalDocumentLine.RecId
                    && fiscalDocumentTaxTrans.Type              == TaxType_BR::ICMS
            outer join TaxPovertyFundAmount
                from fiscalDocumentTaxTransPovertyFund
                where fiscalDocumentTaxTransPovertyFund.FiscalDocumentTaxTrans_BR == fiscalDocumentTaxTrans.RecId
            notexists join existingFbTaxTrans
                where existingFbTaxTrans.FiscalDocumentTaxTrans_BR  == fiscalDocumentTaxTrans.RecId
        {
            classification = fiscalDocument.Model == FiscalBooksConstants_BR::FiscalDocModel_63 ? FBTaxAssessmentClassification_BR::Informative : FBTaxAssessmentDetailCreatorIcms_BR::getTaxAssessmentClassification(fiscalDocument.Direction, fiscalDocumentLine.cfop, fiscalDocumentTaxTrans.FiscalValue);
    
            fbTaxTrans.TaxType                     = TaxType_BR::ICMS;
            fbTaxTrans.Classification              = classification;
            fbTaxTrans.FBTaxAssessment_BR          = fbTaxAssessment.RecId;
            fbTaxTrans.FiscalDocument_BR           = fiscalDocument.RecId;
            fbTaxTrans.FiscalEstablishmentId       = fiscalDocument.FiscalEstablishment;
            fbTaxTrans.FiscalEstablishmentDataArea = fiscalDocument.dataAreaId;
            fbTaxTrans.CFOP                        = fiscalDocumentLine.cfop;
    
            fbTaxTrans.FiscalDocumentTaxTrans_BR   = fiscalDocumentTaxTrans.RecId;
            fbTaxTrans.TaxationCode                = strFmt('%1%2', enum2int(fiscalDocumentTaxTrans.TaxationOrigin), fiscalDocumentTaxTrans.TaxationCode);
            fbTaxTrans.TaxBaseAmount               = fiscalDocumentTaxTrans.TaxBaseAmount;
            fbTaxTrans.TaxBaseAmountExempt         = fiscalDocumentTaxTrans.TaxBaseAmountExempt;
            fbTaxTrans.TaxBaseAmountOther          = fiscalDocumentTaxTrans.TaxBaseAmountOther;
            fbTaxTrans.TaxAmount                   = fiscalDocumentTaxTrans.TaxAmount;
            fbTaxTrans.WithholdingTax              = fiscalDocumentTaxTrans.RetainedTax;
    
            fbTaxTrans.Voucher                     = fiscalDocument.Voucher;
            fbTaxTrans.VoucherDataArea             = fiscalDocument.dataAreaId;
            fbTaxTrans.VoucherTransDate            = fiscalDocument.AccountingDate;
    
            fbTaxTrans.insert();
    
            if (fiscalDocumentTaxTransPovertyFund.TaxPovertyFundAmount
                && fiscalDocumentTaxTrans.FiscalValue == TaxFiscalValue_BR::WithCreditDebit)
            {
                fbTaxTransPovertyFund.FBTaxTrans_BR = fbTaxTrans.RecId;
                fbTaxTransPovertyFund.TaxAmount = fiscalDocumentTaxTransPovertyFund.TaxPovertyFundAmount;
                fbTaxTransPovertyFund.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFiscalDocumentAdjForICMSDiff</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a fiscal document adjustment for ICMS tax difference
    /// </summary>
    /// <param name="_fiscalDocument">
    /// A <c>FiscalDocument_BR</c> table record
    /// </param>
    /// <param name="_fiscalDocumentTaxTrans">
    /// A <c>FiscalDocumentTaxTrans_BR</c> table record
    /// </param>
    /// <param name="_fiscalDocumentAdjustmentCodeRecId">
    /// The record ID of the <c>FBFiscalDocumentAdjustmentCodeICMS_BR</c> record
    /// </param>
    /// <param name="_observationCodeRecId">
    /// The record ID of the <c>FBObservationCodeTable_BR</c> record
    /// </param>
    private void createFiscalDocumentAdjForICMSDiff(FiscalDocument_BR                       _fiscalDocument,
                                                    FiscalDocumentTaxTrans_BR               _fiscalDocumentTaxTrans,
                                                    FBFiscalDocumentAdjustmentCodeRecId_BR  _fiscalDocumentAdjustmentCodeRecId,
                                                    FBObservationCodeRecId_BR               _observationCodeRecId)
    {
        FBFiscalDocumentAdjustment_BR   fiscalDocumentAdjustment;

        fiscalDocumentAdjustment.ComplementaryDescription               = strFmt("@SYS4083167", _fiscalDocument.FiscalDocumentNumber, _fiscalDocument.Model);
        fiscalDocumentAdjustment.FBFiscalDocumentAdjustmentCodeICMS_BR  = _fiscalDocumentAdjustmentCodeRecId;
        fiscalDocumentAdjustment.FBObservationCodeTable_BR              = _observationCodeRecId;
        fiscalDocumentAdjustment.FBTaxAssessment_BR                     = fbTaxAssessment.RecId;
        fiscalDocumentAdjustment.FiscalDocumentTaxTrans_BR              = _fiscalDocumentTaxTrans.RecId;
        fiscalDocumentAdjustment.TaxAmount                              = _fiscalDocumentTaxTrans.TaxAmountOther;
        fiscalDocumentAdjustment.TaxBaseAmount                          = _fiscalDocumentTaxTrans.TaxBaseAmountOther;
        fiscalDocumentAdjustment.TaxAmountOther                         = 0;
        fiscalDocumentAdjustment.TaxValue                               = _fiscalDocumentTaxTrans.TaxValue;
        fiscalDocumentAdjustment.Voucher                                = _fiscalDocument.Voucher;
        fiscalDocumentAdjustment.VoucherDataArea                        = _fiscalDocument.company();
        fiscalDocumentAdjustment.TransDate                              = _fiscalDocument.AccountingDate;
        fiscalDocumentAdjustment.CreatePayment							= FBFiscalDocumentAdjustmentCodeICMS_BR::find(_fiscalDocumentAdjustmentCodeRecId).CreatePayment;
        fiscalDocumentAdjustment.FiscalEstablishmentId					= _fiscalDocument.FiscalEstablishment;

        if (fiscalDocumentAdjustment.validateWrite())
        {
            fiscalDocumentAdjustment.insert();
        }
        else
        {
            warning(strFmt("@SYS4004100", _fiscalDocument.FiscalDocumentNumber, _fiscalDocument.FiscalDocumentSeries, _fiscalDocument.Model));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createICMSDiffAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates general or by fiscal document ICMS DIff adjustments
    /// </summary>
    /// <remarks>
    ///     General or by fiscal document may change by state
    /// </remarks>
    private void createICMSDiffAdjustments()
    {
        FiscalDocument_BR                       fiscalDocument;
        FiscalDocumentLine_BR                   fiscalDocumentLine;
        FiscalDocumentTaxTrans_BR               fiscalDocumentTaxTrans;
        FBBookingPeriodFiscalDocument_BR        bookingPeriodFiscalDocument;
        FBTaxTrans_BR                           fbTaxTrans;
        FBFiscalDocumentAdjustmentCodeRecId_BR  fiscalDocumentAdjustmentCodeICMS;
        FBGeneralAdjustmentCodeRecId_BR         generalAdjustmentCodeICMS;

        setPrefix("@GLS1998");

        if (fbTaxAssessment.FBGeneralAdjustmentCodeICMS_BR)
        {
            while select AccountingDate, FiscalDocumentNumber, Model, FiscalDocumentSeries, RecId, Voucher, DataAreaId, FiscalEstablishment
                from fiscalDocument
                where fiscalDocument.AccountingDate  >= fbTaxAssessment.FromDate
                    && fiscalDocument.AccountingDate <= fbTaxAssessment.ToDate
                    && fiscalDocument.Direction == FiscalDocDirection_BR::Incoming
                    && fiscalDocument.FiscalDocumentAccountType != CustVendType_BR::Customer
                join fbBookingPeriod_BR, FiscalDocument_BR
                    from bookingPeriodFiscalDocument
                    where bookingPeriodFiscalDocument.FBBookingPeriod_BR == fbTaxAssessment.FBBookingPeriod_BR
                        && bookingPeriodFiscalDocument.FiscalDocument_BR == fiscalDocument.RecId
                        && (bookingPeriodFiscalDocument.FiscalSituation == FBFiscalDocumentSituation_BR::Regular
                            || bookingPeriodFiscalDocument.FiscalSituation == FBFiscalDocumentSituation_BR::Complementary
                            || bookingPeriodFiscalDocument.FiscalSituation == FBFiscalDocumentSituation_BR::SpecialLegislation)
                join RecId, CFOP
                    from fiscalDocumentLine
                    where fiscalDocumentLine.FiscalDocument == fiscalDocument.RecId
                join FiscalDocumentLine, Type, TaxAmountOther, TaxBaseAmountOther, TaxValue, RecId
                    from fiscalDocumentTaxTrans
                    where fiscalDocumentTaxTrans.FiscalDocumentLine == fiscalDocumentLine.RecId
                        && fiscalDocumentTaxTrans.Type              == TaxType_BR::ICMSDiff
                notexists join fbTaxTrans
                    where fbTaxTrans.FiscalDocumentTaxTrans_BR == fiscalDocumentTaxTrans.RecId
            {
                if (fbTaxAssessment.FBGeneralAdjustmentCodeICMSFixedAsset_BR && CFOPTable_BR::isFixedAsset(fiscalDocumentLine.CFOP))
                {
                    generalAdjustmentCodeICMS   = fbTaxAssessment.FBGeneralAdjustmentCodeICMSFixedAsset_BR;
                }
                else
                {
                    generalAdjustmentCodeICMS   = fbTaxAssessment.FBGeneralAdjustmentCodeICMS_BR;
                }

                this.createTaxAssessmentAdjustmentForICMSDiff(fiscalDocument,
                                                                fiscalDocumentTaxTrans,
                                                                generalAdjustmentCodeICMS);
            }
        }
        else
        {
            while select AccountingDate, FiscalDocumentNumber, Model, FiscalDocumentSeries, RecId, Voucher, DataAreaId, FiscalEstablishment
                from fiscalDocument
                where fiscalDocument.AccountingDate  >= fbTaxAssessment.FromDate
                    && fiscalDocument.AccountingDate <= fbTaxAssessment.ToDate
                    && fiscalDocument.Direction == FiscalDocDirection_BR::Incoming
                    && fiscalDocument.FiscalDocumentAccountType != CustVendType_BR::Customer
                join fbBookingPeriod_BR, FiscalDocument_BR
                    from bookingPeriodFiscalDocument
                    where bookingPeriodFiscalDocument.FBBookingPeriod_BR == fbTaxAssessment.FBBookingPeriod_BR
                        && bookingPeriodFiscalDocument.FiscalDocument_BR == fiscalDocument.RecId
                        && (bookingPeriodFiscalDocument.FiscalSituation == FBFiscalDocumentSituation_BR::Regular
                            || bookingPeriodFiscalDocument.FiscalSituation == FBFiscalDocumentSituation_BR::Complementary
                            || bookingPeriodFiscalDocument.FiscalSituation == FBFiscalDocumentSituation_BR::SpecialLegislation)
                join RecId, CFOP
                    from fiscalDocumentLine
                    where fiscalDocumentLine.FiscalDocument == fiscalDocument.RecId
                join FiscalDocumentLine, Type, TaxAmountOther, TaxBaseAmountOther, TaxValue, RecId
                    from fiscalDocumentTaxTrans
                    where fiscalDocumentTaxTrans.FiscalDocumentLine == fiscalDocumentLine.RecId
                        && fiscalDocumentTaxTrans.Type              == TaxType_BR::ICMSDiff
                notexists join fbTaxTrans
                    where fbTaxTrans.FiscalDocumentTaxTrans_BR == fiscalDocumentTaxTrans.RecId
            {
                if (fbTaxAssessment.FBFiscalDocumentAdjCodeICMSFixedAsset_BR && CFOPTable_BR::isFixedAsset(fiscalDocumentLine.CFOP))
                {
                    fiscalDocumentAdjustmentCodeICMS = fbTaxAssessment.FBFiscalDocumentAdjCodeICMSFixedAsset_BR;
                }
                else
                {
                    fiscalDocumentAdjustmentCodeICMS = fbTaxAssessment.FBFiscalDocumentAdjustmentCodeICMS_BR;
                }

                this.createFiscalDocumentAdjForICMSDiff(fiscalDocument,
                                                        fiscalDocumentTaxTrans,
                                                        fiscalDocumentAdjustmentCodeICMS,
                                                        fbTaxAssessment.FBObservationCodeTable_BR);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxAssessmentAdjustmentForICMSDiff</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a tax assessment adjustment for ICMS tax difference
    /// </summary>
    /// <param name="_fiscalDocument">
    /// A <c>FiscalDocument_BR</c> table record
    /// </param>
    /// <param name="_fiscalDocumentTaxTrans">
    /// A <c>FiscalDocumentTaxTrans_BR</c> table record
    /// </param>
    /// <param name="_generalAdjustmentCodeRecId">
    /// The record ID of the <c>FBGeneralAdjustmentCode_BR</c> record
    /// </param>
    private void createTaxAssessmentAdjustmentForICMSDiff(FiscalDocument_BR                  _fiscalDocument,
                                                            FiscalDocumentTaxTrans_BR        _fiscalDocumentTaxTrans,
                                                            FBGeneralAdjustmentCodeRecId_BR  _generalAdjustmentCodeRecId)
    {
        FBTaxAssessmentAdjustment_BR    taxAssessmentAdjustment;

        taxAssessmentAdjustment.ComplementaryDescription    = strFmt("@SYS4083167", _fiscalDocument.FiscalDocumentNumber, _fiscalDocument.Model);
        taxAssessmentAdjustment.FBGeneralAdjustmentCode_BR  = _generalAdjustmentCodeRecId;
        taxAssessmentAdjustment.FBTaxAssessment_BR          = fbTaxAssessment.RecId;
        taxAssessmentAdjustment.TaxAmount                   = _fiscalDocumentTaxTrans.TaxAmountOther;
        taxAssessmentAdjustment.IsTaxDifference             = NoYes::Yes;
        taxAssessmentAdjustment.FiscalDocumentTaxTrans_BR   = _fiscalDocumentTaxTrans.RecId;
        taxAssessmentAdjustment.Voucher                     = _fiscalDocument.Voucher;
        taxAssessmentAdjustment.VoucherDataArea             = _fiscalDocument.company();
        taxAssessmentAdjustment.TransDate                   = _fiscalDocument.AccountingDate;
        taxAssessmentAdjustment.CreatePayment               = FBGeneralAdjustmentCode_BR::find(_generalAdjustmentCodeRecId).CreatePayment;
        taxAssessmentAdjustment.FiscalEstablishmentId       = _fiscalDocument.FiscalEstablishment;

        if (taxAssessmentAdjustment.validateWrite())
        {
            taxAssessmentAdjustment.insert();
        }
        else
        {
            warning(strFmt("@SYS4004100", _fiscalDocument.FiscalDocumentNumber, _fiscalDocument.FiscalDocumentSeries, _fiscalDocument.Model));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAssessmentClassification</Name>
				<Source><![CDATA[
    public static FBTaxAssessmentClassification_BR getTaxAssessmentClassification(FiscalDocDirection_BR _direction, SalesPurchCFOPId_BR _cfop, TaxFiscalValue_BR _fiscalValue)
    {
        #CFOP

        FBTaxAssessmentClassification_BR        classification;
        SalesPurchCFOPId_BR                     cfop;

        cfop = strKeep(_cfop, '0123456789');

        if (_fiscalValue == TaxFiscalValue_BR::WithCreditDebit)
        {
            if (_direction == FiscalDocDirection_BR::Incoming)
            {
                if (cfop == #CFOP_1605)
                {
                    classification = FBTaxAssessmentClassification_BR::DocumentDebit;
                }
                else
                {
                    classification = FBTaxAssessmentClassification_BR::DocumentCredit;
                }
            }
            else if (_direction == FiscalDocDirection_BR::Outgoing)
            {
                if (cfop == #CFOP_5605)
                {
                    classification = FBTaxAssessmentClassification_BR::DocumentCredit;
                }
                else
                {
                    classification = FBTaxAssessmentClassification_BR::DocumentDebit;
                }
            }
        }
        else if (_fiscalValue == TaxFiscalValue_BR::WithoutCreditDebitExempt)
        {
            classification = FBTaxAssessmentClassification_BR::TaxExempt;
        }
        else if (_fiscalValue == TaxFiscalValue_BR::WithoutCreditDebitOther)
        {
            classification = FBTaxAssessmentClassification_BR::TaxNonRecoverable;
        }

        return classification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCreditBalanceAmountPreviousPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the <c>FBTaxTrans_BR</c> that is a credit balance from previous period.
    /// </summary>
    /// <param name="_creditBalanceAmountPreviousPeriod">
    ///     The credit balance amount from previous period.
    /// </param>
    public void updateCreditBalanceAmountPreviousPeriod(AmountMST _creditBalanceAmountPreviousPeriod)
    {
        this.updateTaxTransCreditBalFromPrevPeriod(_creditBalanceAmountPreviousPeriod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCreditBalanceFromPreviousPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the <c>FBTaxTrans_BR</c> that is a credit balance from previous period.
    /// </summary>
    public void updateCreditBalanceFromPreviousPeriod()
    {
        this.updateTaxTransCreditBalFromPrevPeriod(this.getCreditBalanceFromPreviousPeriod());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDifferenceValue</Name>
				<Source><![CDATA[
    private AmountMST getTaxDifferenceValue(NoYes _debit)
    {
        AmountMST                       taxDifferenceValue;

        FiscalDocumentTaxTrans_BR       fiscalDocumentTaxTrans;
        FBTaxAssessmentAdjustment_BR    fbTaxAssessmentAdjustment;
        FBFiscalDocumentAdjustment_BR   fbFiscalDocumentAdjustment;
        FBTaxTrans_BR                   fbTaxtrans;

        if (_debit)
        {
            select sum(TaxAmount) from fbTaxtrans
                where fbTaxtrans.FBTaxAssessment_BR == fbTaxAssessment.RecId
                    && (fbTaxtrans.Classification == FBTaxAssessmentClassification_BR::GeneralCreditReversalAdjustment
                        || fbTaxtrans.Classification == FBTaxAssessmentClassification_BR::GeneralDebitAdjustment
                        || fbTaxtrans.Classification == FBTaxAssessmentClassification_BR::SpecialPurposeDebit)
                exists join fbTaxAssessmentAdjustment
                    where fbTaxtrans.FBTaxAssessmentAdjustment_BR == fbTaxAssessmentAdjustment.RecId
                        && fbTaxAssessmentAdjustment.IsTaxDifference == NoYes::Yes;

            taxDifferenceValue = fbTaxtrans.TaxAmount;

            select sum(TaxAmount) from fbTaxtrans
                where fbTaxtrans.FBTaxAssessment_BR == fbTaxAssessment.RecId
                    && (fbTaxtrans.Classification == FBTaxAssessmentClassification_BR::DocumentDebitAdjustment
                        || fbTaxtrans.Classification == FBTaxAssessmentClassification_BR::DocumentCreditReversalAdjustment
                        || fbTaxtrans.Classification == FBTaxAssessmentClassification_BR::SpecialPurposeDebit)
                exists join fbFiscalDocumentAdjustment
                    where fbFiscalDocumentAdjustment.RecId == fbTaxtrans.FBFiscalDocumentAdjustment_BR
                exists join fiscalDocumentTaxTrans
                    where fiscalDocumentTaxTrans.RecId == fbFiscalDocumentAdjustment.FiscalDocumentTaxTrans_BR
                        && fiscalDocumentTaxTrans.Type == TaxType_BR::ICMSDiff;

            taxDifferenceValue += fbTaxtrans.TaxAmount;
        }
        else
        {
            select sum(TaxAmount) from fbTaxtrans
                where fbTaxtrans.FBTaxAssessment_BR == fbTaxAssessment.RecId
                    && (fbTaxtrans.Classification == FBTaxAssessmentClassification_BR::GeneralDebitReversalAdjustment
                        || fbTaxtrans.Classification == FBTaxAssessmentClassification_BR::GeneralCreditAdjustment
                        || fbTaxtrans.Classification == FBTaxAssessmentClassification_BR::TaxDeduction)
                exists join fbTaxAssessmentAdjustment
                    where fbTaxtrans.FBTaxAssessmentAdjustment_BR == fbTaxAssessmentAdjustment.RecId
                        && fbTaxAssessmentAdjustment.IsTaxDifference == NoYes::Yes;

            taxDifferenceValue = fbTaxtrans.TaxAmount;

            select sum(TaxAmount) from fbTaxtrans
                where fbTaxtrans.FBTaxAssessment_BR == fbTaxAssessment.RecId
                    && (fbTaxtrans.Classification == FBTaxAssessmentClassification_BR::DocumentCreditAdjustment
                        || fbTaxtrans.Classification == FBTaxAssessmentClassification_BR::DocumentDebitReversalAdjustment
                        || fbTaxtrans.Classification == FBTaxAssessmentClassification_BR::TaxDeduction)
                exists join fbFiscalDocumentAdjustment
                    where fbFiscalDocumentAdjustment.RecId == fbTaxtrans.FBFiscalDocumentAdjustment_BR
                exists join fiscalDocumentTaxTrans
                    where fiscalDocumentTaxTrans.RecId == fbFiscalDocumentAdjustment.FiscalDocumentTaxTrans_BR
                        && fiscalDocumentTaxTrans.Type == TaxType_BR::ICMSDiff;

            taxDifferenceValue += fbTaxtrans.TaxAmount;
        }

        return taxDifferenceValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDetailsForZReports</Name>
				<Source><![CDATA[
    private void createDetailsForZReports()
    {
        RetailZReport_BR                        retailZReport;
        RetailZReportTotalizer_BR               retailZReportTotalizer;
        RetailZReportTotalizerTaxTrans_BR       retailZReportTotalizerTaxTrans;
        FBBookingPeriodFiscalDocument_BR        bookingPeriodFiscalDocument;
        FBTaxTrans_BR                           existingFbTaxtrans;
        FBTaxTrans_BR                           fbTaxTrans;
        FBTaxAssessmentClassification_BR        classification;
    
        while select RecId, TaxAmount, TaxBaseAmount, TaxBaseAmountExempt, TaxBaseAmountOther, TaxationCode, FiscalValue, cfop
            from retailZReportTotalizerTaxTrans
            join AccountingDate, FiscalEstablishment, DataAreaId , Voucher from  retailZReport
                where retailZReport.AccountingDate                                  >= fbTaxAssessment.FromDate
                    && retailZReport.AccountingDate                                 <= fbTaxAssessment.ToDate
            exists join retailZReportTotalizer
                where retailZReportTotalizer.ZReportNumber                          == retailZReport.ZReportNumber
                    && retailZReportTotalizer.FiscalPrinterSerialNumber             == retailZReport.FiscalPrinterSerialNumber
                    && retailZReportTotalizer.AdditionalFiscalMemoryIndex           == retailZReport.AdditionalFiscalMemoryIndex
                    && retailZReportTotalizerTaxTrans.ZReportNumber                 == retailZReportTotalizer.ZReportNumber
                    && retailZReportTotalizerTaxTrans.FiscalPrinterSerialNumber     == retailZReportTotalizer.FiscalPrinterSerialNumber
                    && retailZReportTotalizerTaxTrans.AdditionalFiscalMemoryIndex   == retailZReportTotalizer.AdditionalFiscalMemoryIndex
                    && retailZReportTotalizerTaxTrans.TotalizerName                 == retailZReportTotalizer.TotalizerName
                    && retailZReportTotalizerTaxTrans.TaxType                       == TaxType_BR::ICMS
            exists join bookingPeriodFiscalDocument
                where bookingPeriodFiscalDocument.FBBookingPeriod_BR    == fbTaxAssessment.FBBookingPeriod_BR
                && bookingPeriodFiscalDocument.RetailZReport_BR         == retailZReport.RecId
                && bookingPeriodFiscalDocument.FiscalSituation          == FBFiscalDocumentSituation_BR::Regular
            notexists join existingFbTaxtrans
                where existingFbTaxtrans.RetailZReportTotalizerTaxTrans_BR  == retailZReportTotalizerTaxTrans.RecId
        {
            classification = FBTaxAssessmentDetailCreatorIcms_BR::getTaxAssessmentClassification(FiscalDocDirection_BR::Outgoing, retailZReportTotalizerTaxTrans.cfop, retailZReportTotalizerTaxTrans.FiscalValue);
    
            fbTaxTrans.clear();
            fbTaxTrans.TaxType                              = TaxType_BR::ICMS;
            fbTaxTrans.FBTaxAssessment_BR                   = fbTaxAssessment.RecId;
            fbTaxTrans.RetailZReportTotalizerTaxTrans_BR    = retailZReportTotalizerTaxTrans.RecId;
            fbTaxTrans.FiscalEstablishmentId                = retailZReport.FiscalEstablishment;
            fbTaxTrans.FiscalEstablishmentDataArea          = retailZReport.dataAreaId;
            fbTaxTrans.Classification                       = classification;
            fbTaxTrans.TaxAmount                            = retailZReportTotalizerTaxTrans.TaxAmount;
    
            fbTaxTrans.TaxBaseAmount            = retailZReportTotalizerTaxTrans.TaxBaseAmount;
            fbTaxTrans.TaxBaseAmountExempt      = retailZReportTotalizerTaxTrans.TaxBaseAmountExempt;
            fbTaxTrans.TaxBaseAmountOther       = retailZReportTotalizerTaxTrans.TaxBaseAmountOther;
    
            fbTaxTrans.TaxationCode             = strFmt('%1%2', enum2int(retailZReportTotalizerTaxTrans.TaxationOrigin), retailZReportTotalizerTaxTrans.TaxationCode);
            fbTaxTrans.CFOP                     = retailZReportTotalizerTaxTrans.CFOP;
    
            fbTaxTrans.Voucher                  = retailZReport.Voucher;
            fbTaxTrans.VoucherDataArea          = retailZReportTotalizerTaxTrans.dataAreaId;
            fbTaxTrans.VoucherTransDate         = retailZReport.AccountingDate;
    
            fbTaxTrans.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>