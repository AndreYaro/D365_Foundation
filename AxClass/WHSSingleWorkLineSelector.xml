<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSSingleWorkLineSelector</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSSingleWorkLineSelector</c> class is responsible for selecting a single work line.
/// </summary>
class WHSSingleWorkLineSelector
{
    protected WHSWorkTable workTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmWorkTable</Name>
				<Source><![CDATA[
    public WHSWorkTable parmWorkTable(WHSWorkTable _workTable = workTable)
    {
        workTable = _workTable;
        return workTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSSingleWorkLineSelector construct()
    {
        return new WHSSingleWorkLineSelector();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWorkTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize a new instance of the <c>WHSSingleWorkLineSelector</c> class.
    /// </summary>
    /// <param name = "_workTable">A work table</param>
    /// <returns>A new instance of the <c>WHSSingleWorkLineSelector</c> class.</returns>
    public static WHSSingleWorkLineSelector newFromWorkTable(WHSWorkTable _workTable)
    {
        WHSSingleWorkLineSelector selector = WHSSingleWorkLineSelector::construct();
        selector.parmWorkTable(_workTable);

        return selector;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOpenNonSkippedLineWithNoReplenishmentDemand</Name>
				<Source><![CDATA[
    private WHSWorkLine findOpenNonSkippedLineWithNoReplenishmentDemand()
    {
        return this.findOpenNonSkippedLine(NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOpenNonSkippedLineWithReplenishmentDemand</Name>
				<Source><![CDATA[
    private WHSWorkLine findOpenNonSkippedLineWithReplenishmentDemand()
    {
        return this.findOpenNonSkippedLine(NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOpenNonSkippedLine</Name>
				<Source><![CDATA[
    private WHSWorkLine findOpenNonSkippedLine(NoYes _needsReplenishment)
    {
        WHSWorkLine nonSkippedWorkLine;

        select firstonly nonSkippedWorkLine
            order by LineNum
            where nonSkippedWorkLine.WorkId           == workTable.WorkId
                && nonSkippedWorkLine.Skipped         == NoYes::No
                && nonSkippedWorkLine.WorkStatus      < WHSWorkStatus::Skipped
                && nonSkippedWorkLine.ReplenDemand    == _needsReplenishment;

        return nonSkippedWorkLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existSkippedPickLineWithReplenishmentDemand</Name>
				<Source><![CDATA[
    private boolean existSkippedPickLineWithReplenishmentDemand()
    {
        return this.existSkippedPickLine(NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existSkippedPickLineWithNoReplenishmentDemand</Name>
				<Source><![CDATA[
    private boolean existSkippedPickLineWithNoReplenishmentDemand()
    {
        return this.existSkippedPickLine(NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existSkippedPickLine</Name>
				<Source><![CDATA[
    private boolean existSkippedPickLine(NoYes _needsReplenishment)
    {
        return this.existsSkippedLine(WHSWorkType::Pick, _needsReplenishment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existSkippedPutLine</Name>
				<Source><![CDATA[
    private boolean existSkippedPutLine()
    {
        return this.existsSkippedLine(WHSWorkType::Put, NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsSkippedLine</Name>
				<Source><![CDATA[
    private boolean existsSkippedLine(WHSWorkType _workType, NoYes _needsReplenishment)
    {
        WHSWorkLine localWorkLine;

        select firstonly RecId from localWorkLine
            where localWorkLine.WorkId == workTable.workId
                && localWorkLine.Skipped == NoYes::Yes
                && localWorkLine.WorkType == _workType
                && localWorkLine.ReplenDemand == _needsReplenishment;

        return (localWorkLine.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOpenWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an open work line if one exists.
    /// </summary>
    /// <returns>An open work line if one exists; otherwise, null</returns>
    public WHSWorkLine findOpenWorkLine()
    {
        WHSWorkLine workLine = this.findOpenNonSkippedLineWithNoReplenishmentDemand();

        if (workLine.RecId != 0
            && workLine.WorkType != WHSWorkType::Pick)
        {
            // If a pick was skipped clear the skip flag and re-select first open line.
            if (this.existSkippedPickLineWithNoReplenishmentDemand())
            {
                this.resetSkippedLines();
                workLine = this.findOpenNonSkippedLineWithNoReplenishmentDemand();
            }
            else if (workTable.canExecuteWorkThatNeedsReplenishment())
            {
                WHSWorkLine nonSkippedWorkLineWithReplen = this.findOpenNonSkippedLineWithReplenishmentDemand();

                //if we found a replenishment line, use it instead of the Put we found previously
                if (nonSkippedWorkLineWithReplen.RecId != 0)
                {
                    workLine = nonSkippedWorkLineWithReplen;
                }

                if (workLine.WorkType != WHSWorkType::Pick
                    && this.existSkippedPickLineWithReplenishmentDemand())
                {
                    this.resetSkippedLines();
                    workLine = this.findOpenNonSkippedLineWithReplenishmentDemand();
                }
            }
        }

        // If no open lines were found, need to check if any puts were skipped.
        if (!workLine.RecId)
        {
            // If a put was skipped, clear the flag and re-select first open line.
            if (this.existSkippedPutLine())
            {
                this.resetSkippedLines();
                workLine = this.findOpenNonSkippedLineWithNoReplenishmentDemand();
            }
        }

        return workLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetSkippedLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets skipped flags for the work.
    /// </summary>
    private void resetSkippedLines()
    {
        WHSWorkLine localWorkLine;

        ttsBegin;

        localWorkLine.skipDataMethods(true);
        update_recordSet localWorkLine
            setting Skipped = NoYes::No
            where localWorkLine.WorkId == workTable.workId
                && localWorkLine.Skipped == NoYes::Yes;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNextOpenOrInProcessPutWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the next put work line with WorkStatus == Open or WorkStatus == InProcess.
    /// </summary>
    /// <returns>
	/// The next open or in process put work line record if one exists; otherwise, an empty buffer.
	/// </returns>
    public WHSWorkLine findNextOpenOrInProcessPutWorkLine()
    {
        WHSWorkLine workLine;

        select firstonly workLine
            order by workLine.LineNum asc
            where workLine.WorkId			== workTable.WorkId
              &&  workLine.WorkType			== WHSWorkType::Put
              &&  (workLine.WorkStatus		== WHSWorkStatus::Open
					|| workLine.WorkStatus	== WHSWorkStatus::InProcess);

        return workLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>