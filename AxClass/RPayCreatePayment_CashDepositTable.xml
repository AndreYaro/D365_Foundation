<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayCreatePayment_CashDepositTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class RPayCreatePayment_CashDepositTable extends RPayCreatePayment_Cash
{
    RPayDepositTable depositTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTotalAmount</Name>
				<Source><![CDATA[
        protected Amount calcTotalAmount()
    {
        RPayDepositTable    formDepositTable, rPayDepositCheck;
        Amount              ret;
        for (formDepositTable = table_ds.getFirst(true) ? table_ds.getFirst(true) : table_ds.cursor();
             formDepositTable;
             formDepositTable = table_ds.getNext())
        {
            rPayDepositCheck = RPayDepositTable::find(formDepositTable.RecId);
            if (! rPayDepositCheck.Voucher || rPayDepositCheck.ClosedDate)
            {
                counter ++;
                continue;
            }

            ret += formDepositTable.DepositSum;
            notes = notes ? "@RUP767" + formDepositTable.getShortEmplName() : strFmt("@GLS107148", notes, formDepositTable.getShortEmplName());
            counter ++;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
        protected boolean createTrans()
    {
        boolean ret;
        ledgerJournalTrans.OffsetAccountType        = paymentParameters.DepositAccountType;
        ledgerJournalTrans.OffsetLedgerDimension    = RPayTrans::createEmployeeLedgerDimension(paymentParameters.DepositLedgerDimension, 0, depositTable.EmplId);
        ledgerJournalTrans.RCashPayTransType        = RCashPayLedgerTransType::Deposit;

        super();

        ttsbegin;

        this.createLedgerJournalTrans(ledgerJournalTrans, ledgerJournalTable);
        ret = ledgerJournalTrans.RecId;

        ledgerJournalTrans.DocumentNum          = depositTable.PaySheetNum;
        ledgerJournalTrans.DocumentDate         = depositTable.VoucherDate;
        ledgerJournalTrans.PaymentNotes         = "@SYS23659" + ' ' +
                                                  strfmt("@GLS102243", depositTable.PaySheetNum, depositTable.VoucherDate);
        ledgerJournalTrans.BankCentralBankPurposeText =  ledgerJournalTrans.PaymentNotes;
        ledgerJournalTrans.update();

        ret = this.createCashTrans() && ret;

        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postUpdate</Name>
				<Source><![CDATA[
        protected void postUpdate()
    {
        RPayDepositTable formDepositTable, oldDepositTable;

        ttsbegin;

        for (formDepositTable = table_ds.getFirst(true) ? table_ds.getFirst(true) : table_ds.cursor();
             formDepositTable;
             formDepositTable = table_ds.getNext())
        {
            oldDepositTable = RPayDepositTable::find(formDepositTable.RecId, true);
            if (! oldDepositTable.Voucher || oldDepositTable.ClosedDate)
            {
                continue;
            }

            oldDepositTable.PayDepositType  = RPayDepositType::PettyCash;
            oldDepositTable.ClosedDate      = cashTrans.TransDate;
            oldDepositTable.PayDocNum       = cashTrans.DocId;
            oldDepositTable.CashAccount     = cashTrans.AccountNum;
            oldDepositTable.CashJournalNum  = ledgerJournalTable.JournalNum;

            oldDepositTable.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataSource</Name>
				<Source><![CDATA[
        public void setDataSource(Common _depositTable, FormDataSource _ds)
    {
        super(_depositTable, _ds);
        depositTable    = _depositTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static ClassDescription description()
    {
        return "@RUP56";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>