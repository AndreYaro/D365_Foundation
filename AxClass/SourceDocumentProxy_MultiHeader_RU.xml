<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SourceDocumentProxy_MultiHeader_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Document proxy for the virtual multiheader document
/// </summary>
class SourceDocumentProxy_MultiHeader_RU
{
    SourceDocumentSet_RU rootImplementation;
    SourceDocumentAmountList sourceDocumentAmountList;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Performs initialization of proxy
    /// </summary>
    /// <param name="_sourceDocumentRecId">
    ///   <c>RecID</c> of the <c>SourceDocument</c>
    /// </param>
    /// <param name="_createDocumentAmountList">
    ///    create <c>SourceDocumentAmountList</c>
    /// </param>
    /// <param name="_headerLinesOnly">
    ///   collect information from headers line only
    /// </param>
    protected void init(RecId _sourceDocumentRecId, boolean _createDocumentAmountList, boolean _headerLinesOnly)
    {
        this.reloadSourceDocumentAmountList();
        this.initSourceDocumentLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourceDocumentLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits source document lines for all source documents
    /// </summary>
    protected void initSourceDocumentLines()
    {
        SourceDocumentHeader                    sourceDocumentHeaderLocal;
        SourceDocumentLine                      sourceDocumentLineLocal;
        SourceDocumentLineAccountingStatus      targetSourceDocumentLineAccountingStatus;
        Common               implementation = rootImplementation.findFirstDocumentImplementation();

        while (implementation)
        {
            sourceDocumentHeaderLocal = SourceDocument::newFromSourceDocumentImplementation(implementation).parmSourceDocumentHeader();

            if (sourceDocumentHeaderLocal.AccountingStatus == SourceDocumentAccountingStatus::InProcess)
            {
                while select sourceDocumentLineLocal
                    where sourceDocumentLineLocal.SourceDocumentHeader == sourceDocumentHeaderLocal.RecId
                    && sourceDocumentLineLocal.ParentSourceDocumentLine == 0
                {
                    if (sourceDocumentLineLocal.AccountingStatus == SourceDocumentLineAccountingStatus::Draft)
                    {
                        targetSourceDocumentLineAccountingStatus = SourceDocumentLineAccountingStatus::FullyDistributed;
                    }
                    else
                    {
                        targetSourceDocumentLineAccountingStatus = sourceDocumentLineLocal.AccountingStatus;
                    }

                    SourceDocumentLineProcessor::submitSourceDocumentLine(
                        sourceDocumentLineLocal,
                        false,
                        targetSourceDocumentLineAccountingStatus,
                        AccountingDistributionViewModelCaller::construct(AccountingDistributionMethod::None, true));
                }
            }

            next implementation;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRootImplementation</Name>
				<Source><![CDATA[
    Common parmRootImplementation(SourceDocumentSet_RU _rootImplementation = rootImplementation)
    {
        rootImplementation = _rootImplementation;
        return rootImplementation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reloadSourceDocumentAmountList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Composites amount list for all source documents
    /// </summary>
    protected void reloadSourceDocumentAmountList()
    {
        Common implementation;
        sourceDocumentAmountList = SourceDocumentAmountList::construct();
        implementation = rootImplementation.findFirstDocumentImplementation();
        while (implementation)
        {
            sourceDocumentAmountList.appendList(
                SourceDocument::newFromSourceDocumentImplementation(implementation).parmSourceDocumentAmountList()
            );
            next implementation;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// The same as in SourceDocumentProxy with addition of _rootImplementation
    /// </summary>
    /// <param name="_rootImplementation">the record that implements Common findFirstDocumentImplementation() method
    /// returning cursor for source document implementation
    /// </param>
    /// <param name="_sourceDocumentRecId">recID of some source document</param>
    /// <param name="_createDocumentAmountList">do create amount list</param>
    /// <param name="_headerLinesOnly">see description in SourceDocument</param>
    /// <returns>new proxy</returns>
    public static SourceDocumentProxy_MultiHeader_RU construct(
        SourceDocumentSet_RU    _rootImplementation,
        RecId                   _sourceDocumentRecId,
        boolean                 _createDocumentAmountList = false,
        boolean                 _headerLinesOnly = false)
    {
        SourceDocumentProxy_MultiHeader_RU proxy = new SourceDocumentProxy_MultiHeader_RU();
        proxy.parmRootImplementation(_rootImplementation);
        proxy.init(_sourceDocumentRecId, _createDocumentAmountList, _headerLinesOnly);
        return proxy;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>