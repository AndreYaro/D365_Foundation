<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventReserveDBUpgradeService</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSInventReserveDBUpgradeService
{
    private SysSQLStatementText sqlStatementZeroHierarchyLevel;
    private SysSQLStatementText sqlStatementNotZeroHierarchyLevel;
    private System.Diagnostics.Stopwatch stopwatch;
    private int64 maximumExecutionTimeInMilliseconds;
    private real maximumExecutionTimeInHours;
    private InventInstrumentationLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal final void run(WHSInventReserveDBUpgradeContract _dataContract)
    {
        #OCCRetryCount
        #TimeConstants

        if (!isConfigurationkeyEnabled(configurationKeyNum(WHSandTMS)))
        {
            return;
        }

        //If skip feature toggle is on, skip updating data
        if (WHSInventReserveInventDimSkipDataUpdateToggle::instance().isEnabled())
        {
            return;
        }

        if (WHSInventReserveSkipDBTriggerCreationFlight::instance().isEnabled())
        {
            WHSInventReserveInventDimEnable::markDataUpgradeIncomplete();
        }

        if (WHSInventReserveInventDimEnable::hasDataUpgradeCompleted())
        {
            return;
        }

        if (_dataContract)
        {
            maximumExecutionTimeInHours = _dataContract.parmMaximumExecutionTimeInHours();
        }
        else
        {
            maximumExecutionTimeInHours = 0;
        }

        maximumExecutionTimeInMilliseconds = any2Int64(maximumExecutionTimeInHours * #MillisecondsPerHour);
        logger = InventInstrumentationLogger::createLogger(classStr(WHSInventReserveDBUpgradeService));
        
        if (this.hasDataUpgradeCompleted(false))
        {
            using (var activityContext = logger.inventReserveDBUpgradeService().logMeasure(tableStaticMethodStr(WHSInventReserveInventDimEnable, markDataUpgradeComplete)))
            {
                if (!WHSInventReserveSkipDBTriggerCreationFlight::instance().isEnabled())
                {
                    logger.inventReserveDBUpgradeService().logDateUpgradeMarkedStatus(activityContext, true);
                    WHSInventReserveInventDimEnable::markDataUpgradeComplete();
                }
                else
                {
                    logger.inventReserveDBUpgradeService().logDateUpgradeMarkedStatus(activityContext, false);
                }
            }

            return;
        }
      
        if (maximumExecutionTimeInMilliseconds > 0)
        {
            stopwatch = System.Diagnostics.Stopwatch::StartNew();
        }

        try
        {
            using (var activityContext = logger.inventReserveDBUpgradeService().logMeasure(methodStr(WHSInventReserveDBUpgradeService, upgradeWHSInventReserveFromInventDim)))
            {
                this.upgradeWHSInventReserveFromInventDim();
            }
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>upgradeWHSInventReserveFromInventDim</Name>
				<Source><![CDATA[
    private void upgradeWHSInventReserveFromInventDim()
    {
        sqlStatementZeroHierarchyLevel = this.getWHSInventReserveUpgradeSqlStmt(true);
        sqlStatementNotZeroHierarchyLevel = this.getWHSInventReserveUpgradeSqlStmt(false);

        boolean isZeroHierarchyLevelUpgradeCompleted = false;
        boolean isNotZeroHierarchyLevelUpgradeCompleted = false;
            
        while (!this.isMaxExecutionTimeReached())
        {
            // Upgrade zero hierarchy level records
            if (!isZeroHierarchyLevelUpgradeCompleted)
            {
                this.executeStatement(sqlStatementZeroHierarchyLevel);                
                isZeroHierarchyLevelUpgradeCompleted = this.hasDataUpgradeCompleted(true, 0);
                
            }

            // Upgrade hierarchy level is greater than zero records
            if (!isNotZeroHierarchyLevelUpgradeCompleted)
            {
                this.executeStatement(sqlStatementNotZeroHierarchyLevel);                
                isNotZeroHierarchyLevelUpgradeCompleted = this.hasDataUpgradeCompleted(true, 1);                
            }

            if (isZeroHierarchyLevelUpgradeCompleted && isNotZeroHierarchyLevelUpgradeCompleted)
            {
                break;
            }
        }
           
        if (this.hasDataUpgradeCompleted(false) && !WHSInventReserveSkipDBTriggerCreationFlight::instance().isEnabled())
        {
            WHSInventReserveInventDimEnable::markDataUpgradeComplete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeStatement</Name>
				<Source><![CDATA[
    private void executeStatement(SysSQLStatementText _sqlStatement)
    {
        Connection connection;
        Statement statement;

        try
        {
            connection= new Connection();

            new SqlStatementExecutePermission(_sqlStatement).assert();
            Map parameters = SqlParams::create();
            statement = connection.createStatement();
            statement.executeUpdateWithParameters(_sqlStatement, parameters);            
        }
        finally
        {
            CodeAccessPermission::revertAssert();
            if (statement)
            {
                statement.close();
            }

            if (connection)
            {
                connection.finalize();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWHSInventReserveUpgradeSqlStmt</Name>
				<Source><![CDATA[
    private SysSQLStatementText getWHSInventReserveUpgradeSqlStmt(boolean _isProcessingZeroHierarchyLevel)
    {
        #InventDimDevelop

        SysSqlSystem sqlSystem = new SysSqlSystem();

        SysSQLStatementText sqlStmt = 'UPDATE TOP(5000) DBO.WHSINVENTRESERVE'
                + ' SET WHSINVENTRESERVE.CONFIGID = INVENTDIM.CONFIGID,'
                + ' WHSINVENTRESERVE.INVENTSIZEID = INVENTDIM.INVENTSIZEID,'
                + ' WHSINVENTRESERVE.INVENTCOLORID = INVENTDIM.INVENTCOLORID,'
                + ' WHSINVENTRESERVE.INVENTSTYLEID = INVENTDIM.INVENTSTYLEID,'
                + ' WHSINVENTRESERVE.INVENTSITEID = INVENTDIM.INVENTSITEID,'
                + ' WHSINVENTRESERVE.INVENTLOCATIONID = INVENTDIM.INVENTLOCATIONID,'
                + ' WHSINVENTRESERVE.INVENTBATCHID = INVENTDIM.INVENTBATCHID,'
                + ' WHSINVENTRESERVE.WMSLOCATIONID = INVENTDIM.WMSLOCATIONID,'
                + ' WHSINVENTRESERVE.WMSPALLETID = INVENTDIM.WMSPALLETID,'
                + ' WHSINVENTRESERVE.LICENSEPLATEID = INVENTDIM.LICENSEPLATEID,'
                + ' WHSINVENTRESERVE.INVENTSTATUSID = INVENTDIM.INVENTSTATUSID,'
                + ' WHSINVENTRESERVE.INVENTSERIALID = INVENTDIM.INVENTSERIALID,'
                + ' WHSINVENTRESERVE.INVENTDIMENSION1 = INVENTDIM.INVENTDIMENSION1,'
                + ' WHSINVENTRESERVE.INVENTDIMENSION2 = INVENTDIM.INVENTDIMENSION2,'
                + ' WHSINVENTRESERVE.INVENTDIMENSION3 = INVENTDIM.INVENTDIMENSION3,'
                + ' WHSINVENTRESERVE.INVENTDIMENSION4 = INVENTDIM.INVENTDIMENSION4,'
                + ' WHSINVENTRESERVE.INVENTDIMENSION5 = INVENTDIM.INVENTDIMENSION5,'
                + ' WHSINVENTRESERVE.INVENTDIMENSION6 = INVENTDIM.INVENTDIMENSION6,'
                + ' WHSINVENTRESERVE.INVENTDIMENSION7 = INVENTDIM.INVENTDIMENSION7,'
                + ' WHSINVENTRESERVE.INVENTDIMENSION8 = INVENTDIM.INVENTDIMENSION8,'
                + ' WHSINVENTRESERVE.INVENTDIMENSION9 = INVENTDIM.INVENTDIMENSION9,'
                + ' WHSINVENTRESERVE.INVENTDIMENSION10 = INVENTDIM.INVENTDIMENSION10,'
                + ' WHSINVENTRESERVE.INVENTGTDID_RU = INVENTDIM.INVENTGTDID_RU,'
                + ' WHSINVENTRESERVE.INVENTPROFILEID_RU = INVENTDIM.INVENTPROFILEID_RU,'
                + ' WHSINVENTRESERVE.INVENTOWNERID_RU = INVENTDIM.INVENTOWNERID_RU,'
                + ' WHSINVENTRESERVE.INVENTVERSIONID  = INVENTDIM.INVENTVERSIONID,'
                + ' WHSINVENTRESERVE.INVENTDIMENSION11  = INVENTDIM.INVENTDIMENSION11,'
                + ' WHSINVENTRESERVE.INVENTDIMENSION12  = INVENTDIM.INVENTDIMENSION12'
                + ' FROM DBO.WHSINVENTRESERVE'
                + ' JOIN DBO.INVENTDIM \n'
                + ' ON WHSINVENTRESERVE.PARTITION = INVENTDIM.PARTITION'
                + ' AND WHSINVENTRESERVE.DATAAREAID = INVENTDIM.DATAAREAID'
                + ' AND WHSINVENTRESERVE.INVENTDIMID = INVENTDIM.INVENTDIMID'
                + ' WHERE WHSINVENTRESERVE.PARTITION = '
                + sqlSystem.sqlLiteral(getcurrentpartitionrecid());

        if (_isProcessingZeroHierarchyLevel)
        {
            sqlStmt += ' AND WHSINVENTRESERVE.HIERARCHYLEVEL = 0 AND ( ';
            sqlStmt += ' WHSINVENTRESERVE.CONFIGID <> INVENTDIM.CONFIGID OR WHSINVENTRESERVE.INVENTBATCHID <> INVENTDIM.INVENTBATCHID OR';
            sqlStmt += ' WHSINVENTRESERVE.INVENTCOLORID <> INVENTDIM.INVENTCOLORID OR WHSINVENTRESERVE.INVENTGTDID_RU  <>  INVENTDIM.INVENTGTDID_RU OR';
            sqlStmt += ' WHSINVENTRESERVE.INVENTLOCATIONID <> INVENTDIM.INVENTLOCATIONID OR WHSINVENTRESERVE.INVENTOWNERID_RU <> INVENTDIM.INVENTOWNERID_RU OR';
            sqlStmt += ' WHSINVENTRESERVE.INVENTPROFILEID_RU <> INVENTDIM.INVENTPROFILEID_RU OR WHSINVENTRESERVE.INVENTSERIALID <> INVENTDIM.INVENTSERIALID OR';
            sqlStmt += ' WHSINVENTRESERVE.INVENTSITEID <> INVENTDIM.INVENTSITEID OR WHSINVENTRESERVE.INVENTSIZEID <> INVENTDIM.INVENTSIZEID OR';
            sqlStmt += ' WHSINVENTRESERVE.INVENTSTATUSID <> INVENTDIM.INVENTSTATUSID OR WHSINVENTRESERVE.INVENTSTYLEID <> INVENTDIM.INVENTSTYLEID OR';
            sqlStmt += ' WHSINVENTRESERVE.LICENSEPLATEID <> INVENTDIM.LICENSEPLATEID OR WHSINVENTRESERVE.WMSLOCATIONID <> INVENTDIM.WMSLOCATIONID OR';
            sqlStmt += ' WHSINVENTRESERVE.WMSPALLETID <> INVENTDIM.WMSPALLETID OR WHSINVENTRESERVE.INVENTDIMENSION1 <> INVENTDIM.INVENTDIMENSION1 OR';
            sqlStmt += ' WHSINVENTRESERVE.INVENTDIMENSION2 <> INVENTDIM.INVENTDIMENSION2 OR WHSINVENTRESERVE.INVENTDIMENSION3 <> INVENTDIM.INVENTDIMENSION3 OR';
            sqlStmt += ' WHSINVENTRESERVE.INVENTDIMENSION4 <> INVENTDIM.INVENTDIMENSION4 OR WHSINVENTRESERVE.INVENTDIMENSION5 <> INVENTDIM.INVENTDIMENSION5 OR';
            sqlStmt += ' WHSINVENTRESERVE.INVENTDIMENSION6 <> INVENTDIM.INVENTDIMENSION6 OR WHSINVENTRESERVE.INVENTDIMENSION7 <> INVENTDIM.INVENTDIMENSION7 OR';
            sqlStmt += ' WHSINVENTRESERVE.INVENTDIMENSION8 <> INVENTDIM.INVENTDIMENSION8 OR WHSINVENTRESERVE.INVENTDIMENSION9 <> INVENTDIM.INVENTDIMENSION9 OR';
            sqlStmt += ' WHSINVENTRESERVE.INVENTDIMENSION10 <> INVENTDIM.INVENTDIMENSION10 OR WHSINVENTRESERVE.INVENTDIMENSION11 <> INVENTDIM.INVENTDIMENSION11 OR';
            sqlStmt += ' WHSINVENTRESERVE.INVENTDIMENSION12 <> INVENTDIM.INVENTDIMENSION12 OR WHSINVENTRESERVE.INVENTVERSIONID <> INVENTDIM.INVENTVERSIONID )';            
        }
        else
        {
            sqlStmt += ' AND WHSINVENTRESERVE.HIERARCHYLEVEL > 0 AND WHSINVENTRESERVE.INVENTSITEID = \'\'';
        }

        return sqlStmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMaxExecutionTimeReached</Name>
				<Source><![CDATA[
    private boolean isMaxExecutionTimeReached()
    {
        if (maximumExecutionTimeInMilliseconds > 0 && maximumExecutionTimeInMilliseconds < stopwatch.ElapsedMilliseconds)
        {
            info(strFmt("@SCM:MaxExecutionTimeOfhoursIsReachedForWarehouseOnHandUpgrade", maximumExecutionTimeInHours));
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDataUpgradeCompleted</Name>
				<Source><![CDATA[
    private boolean hasDataUpgradeCompleted(boolean _considerHierarchyLevel, int _hierarchyLevelEqualOrGreatThanZero = 0)
    {
        #InventDimDevelop
        DataArea dataArea;
        WHSInventReserve whsInventReserve;
        InventDim inventDim;
        select firstonly crosscompany RecId from whsInventReserve
            where (!_considerHierarchyLevel 
                    || (_hierarchyLevelEqualOrGreatThanZero >  0 && whsInventReserve.HierarchyLevel > 0)
                    || (_hierarchyLevelEqualOrGreatThanZero == 0 && whsInventReserve.HierarchyLevel == 0))
                exists join inventDim
                where inventDim.InventDimId == whsInventReserve.InventDimId
                    && (inventdim.CONFIGID != whsInventReserve.CONFIGID
                        || inventdim.INVENTBATCHID != whsInventReserve.INVENTBATCHID
                        || inventdim.INVENTCOLORID != whsInventReserve.INVENTCOLORID
                        || inventdim.INVENTGTDID_RU !=  whsInventReserve.INVENTGTDID_RU
                        || inventdim.INVENTLOCATIONID != whsInventReserve.INVENTLOCATIONID
                        || inventdim.INVENTOWNERID_RU != whsInventReserve.INVENTOWNERID_RU
                        || inventdim.INVENTPROFILEID_RU  !=  whsInventReserve.INVENTPROFILEID_RU
                        || inventdim.INVENTSERIALID != whsInventReserve.INVENTSERIALID
                        || inventdim.INVENTSITEID != whsInventReserve.INVENTSITEID
                        || inventdim.INVENTSIZEID != whsInventReserve.INVENTSIZEID
                        || inventdim.INVENTSTATUSID != whsInventReserve.INVENTSTATUSID
                        || inventdim.INVENTSTYLEID != whsInventReserve.INVENTSTYLEID
                        || inventdim.LICENSEPLATEID != whsInventReserve.LICENSEPLATEID
                        || inventdim.WMSLOCATIONID != whsInventReserve.WMSLOCATIONID
                        || inventdim.WMSPALLETID != whsInventReserve.WMSPALLETID
                        || inventdim.INVENTDIMENSION1 != whsInventReserve.INVENTDIMENSION1
                        || inventdim.INVENTDIMENSION2 != whsInventReserve.INVENTDIMENSION2
                        || inventdim.INVENTDIMENSION3 != whsInventReserve.INVENTDIMENSION3
                        || inventdim.INVENTDIMENSION4 != whsInventReserve.INVENTDIMENSION4
                        || inventdim.INVENTDIMENSION5 != whsInventReserve.INVENTDIMENSION5
                        || inventdim.INVENTDIMENSION6 != whsInventReserve.INVENTDIMENSION6
                        || inventdim.INVENTDIMENSION7 != whsInventReserve.INVENTDIMENSION7
                        || inventdim.INVENTDIMENSION8 != whsInventReserve.INVENTDIMENSION8
                        || inventdim.INVENTDIMENSION9 != whsInventReserve.INVENTDIMENSION9
                        || inventdim.INVENTDIMENSION10 != whsInventReserve.INVENTDIMENSION10
                        || inventdim.INVENTDIMENSION11 != whsInventReserve.INVENTDIMENSION11
                        || inventdim.INVENTDIMENSION12 != whsInventReserve.INVENTDIMENSION12
                        || inventdim.INVENTVERSIONID != whsInventReserve.INVENTVERSIONID);

        return whsInventReserve.RecId == 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>