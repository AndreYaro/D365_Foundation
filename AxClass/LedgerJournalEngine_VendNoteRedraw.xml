<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalEngine_VendNoteRedraw</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerJournalEngine_VendNoteRedraw extends LedgerJournalEngine_VendPromissoryNote
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bankAccountIdModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resets the offset account type and number according to the selected bank account.
    /// </summary>
    /// <param name="ledgerJournalTrans">
    ///    The <c>LedgerJournalTrans</c> record buffer that is being modified.
    /// </param>
    public void bankAccountIdModified(LedgerJournalTrans ledgerJournalTrans)
    {
        if (ledgerJournalTable.FixedOffsetAccount == NoYes::No)
        {
            ledgerJournalTrans.parmOffsetAccount(ledgerJournalTrans.BankAccountId, LedgerJournalACType::Bank);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendTable</Name>
				<Source><![CDATA[
    protected void initFromVendTable(LedgerJournalTrans ledgerJournalTrans, Tax1099BoxDetail _tax1099Detail = null)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            super(ledgerJournalTrans, _tax1099Detail);
        }
        else
        {
            super(ledgerJournalTrans);
        }

        ledgerJournalTrans.PostingProfile = VendParameters::find().PostingProfileNotes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVendOffsetAccount</Name>
				<Source><![CDATA[
    protected void initVendOffsetAccount(LedgerJournalTrans ledgerJournalTrans)
    {
        super(ledgerJournalTrans);

        if (ledgerJournalTable.FixedOffsetAccount == NoYes::No)
        {
            ledgerJournalTrans.OffsetAccountType = LedgerJournalACType::Bank;

            if (ledgerJournalTrans.ledgerJournalTable().JournalType == LedgerJournalType::VendPromissoryNoteRedraw)
            {
                ledgerJournalTrans.parmOffsetAccount(ledgerJournalTrans.BankAccountId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVendPostingProfile</Name>
				<Source><![CDATA[
    public void initVendPostingProfile(LedgerJournalTrans ledgerJournalTrans)
    {
        ledgerJournalTrans.PostingProfile = VendParameters::find().PostingProfileNotes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markedForSettlementWarning</Name>
				<Source><![CDATA[
    boolean markedForSettlementWarning(LedgerJournalTrans _ledgerJournalTrans)
    {
        boolean ret = true;

        if (_ledgerJournalTrans.SettleVoucher == SettlementType::SelectedTransact   &&
            _ledgerJournalTrans.amount()      != _ledgerJournalTrans.orig().amount())
        {
            ret = checkFailed("@SYS75170");
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleTransUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates settlement data for the journal line.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    A <c>LedgerJournalTrans</c> record buffer.
    /// </param>
    /// <remarks>
    ///    This method is used by the split payment feature.
    /// </remarks>
    public void settleTransUpdate(LedgerJournalTrans _ledgerJournalTrans)
    {
        this.settleTransUpdateSettled(_ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleTransUpdateSettled</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void settleTransUpdateSettled(LedgerJournalTrans _ledgerJournalTrans)
    {
        SpecTrans               specTrans;
        VendSettlement          vendSettlement;
        VendTrans               vendTrans;
        VendPromissoryNoteTrans vendPromissoryNoteTrans;
        BankPromissoryNoteTable bankPromissoryNoteTable;

        DueDate                 dueDate;
        VendPaymMode            paymMode;
        PostingProfile          postingProfile;
        CompanyBankAccountId    companyBankAccountId;
        BankThirdPartyAccountId thirdPartyBankAccountId;
        boolean                 warningIssuedDueDate  = false;
        boolean                 crossCompanySettlement;

        while select crossCompany RecId from specTrans
            where   specTrans.SpecCompany   == _ledgerJournalTrans.DataAreaId &&
                    specTrans.SpecRecId     == _ledgerJournalTrans.RecId    &&
                    specTrans.SpecTableId   == _ledgerJournalTrans.TableId
            join DueDate from vendSettlement
                where   vendSettlement.DataAreaId == specTrans.RefCompany       &&
                        vendSettlement.TableId  == specTrans.RefTableId         &&
                        vendSettlement.RecId    == specTrans.RefRecId
            join vendTrans
                where   vendTrans.RecId         == vendSettlement.TransRecId    &&
                        vendTrans.AccountNum    == vendSettlement.AccountNum
            join vendPromissoryNoteTrans
                where   vendPromissoryNoteTrans.PromissoryNoteId == vendTrans.PromissoryNoteID  &&
                        vendPromissoryNoteTrans.SeqNum           == vendTrans.PromissoryNoteSeqNum  &&
                        vendPromissoryNoteTrans.Status           == vendTrans.PromissoryNoteStatus
        {
            if (_ledgerJournalTrans.Company != vendTrans.company())
            {
                crossCompanySettlement = true;
            }

            if (dueDate && dueDate != vendSettlement.DueDate && !warningIssuedDueDate)
            {
                warningIssuedDueDate = !checkFailed("@SYS73746");
            }

            if ((paymMode && paymMode != vendTrans.PaymMode) ||
                (postingProfile && postingProfile != vendTrans.PostingProfile)    ||
                (companyBankAccountId && companyBankAccountId != vendPromissoryNoteTrans.RemittedtoBankAccountId) ||
                (thirdPartyBankAccountId && thirdPartyBankAccountId != vendTrans.ThirdPartyBankAccountId))
            {
                _ledgerJournalTrans.amountCur2DebCred(0);
                _ledgerJournalTrans.write();
                if (ledgerJournalTrans_ds)
                {
                    ledgerJournalTrans_ds.refresh();
                }

                SpecTransManager::constructServer(_ledgerJournalTrans, false).deleteAll();

                throw error("@SYS73747");
            }

            dueDate = max(dueDate, vendSettlement.DueDate);
            paymMode = vendTrans.PaymMode;
            postingProfile = VendParameters::find().PostingProfileNotes;
            companyBankAccountId = vendPromissoryNoteTrans.RemittedtoBankAccountId;
            thirdPartyBankAccountId = vendTrans.ThirdPartyBankAccountId;

            changecompany(vendPromissoryNoteTrans.company())
            {
                bankPromissoryNoteTable = BankPromissoryNoteTable::findBankVendPNStatus(companyBankAccountId,vendTrans.PromissoryNoteID,BankPromissoryNoteStatus::Posted,true);
            }
        }

        if (dueDate)
        {
            _ledgerJournalTrans.Due = dueDate;
        }

        if (paymMode && crossCompanySettlement == false)
        {
            _ledgerJournalTrans.PaymMode = paymMode;
        }

        if (postingProfile)
        {
            _ledgerJournalTrans.PostingProfile = postingProfile;
        }

        if (companyBankAccountId)
        {
            _ledgerJournalTrans.BankAccountId = companyBankAccountId;
        }

        if (_ledgerJournalTrans.BankAccountId)
        {
            _ledgerJournalTrans.parmOffsetAccount(_ledgerJournalTrans.BankAccountId, LedgerJournalACType::Bank);
        }

        if (bankPromissoryNoteTable.PromissoryNoteNum)
        {
            changecompany(bankPromissoryNoteTable.company())
            {
                _ledgerJournalTrans.BankPromissoryNoteNum = bankPromissoryNoteTable.PromissoryNoteNum;
                bankPromissoryNoteTable.DocumentStatus    = BankPromissoryNoteStatus::Printed;
                bankPromissoryNoteTable.update();
            }
        }

        if (thirdPartyBankAccountId && !crossCompanySettlement)
        {
            _ledgerJournalTrans.CustVendBankAccountId = thirdPartyBankAccountId;
        }

        if (VendPromissoryNoteFinTagFlight::instance().isEnabled() && _ledgerJournalTrans.OffsetLedgerDimension)
        {
            this.performFinTagDefaulting(_ledgerJournalTrans, AccountOffsetaccount::OffsetAccount);
        }

        _ledgerJournalTrans.write();

        if (ledgerJournalTrans_ds)
        {
            ledgerJournalTrans_ds.reread();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>