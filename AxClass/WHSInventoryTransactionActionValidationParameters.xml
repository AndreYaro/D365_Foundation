<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventoryTransactionActionValidationParameters</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSInventoryTransactionActionValidationParameters</c> class controls what checks does warehouse inventory transaction stack perform.
/// </summary>
internal final class WHSInventoryTransactionActionValidationParameters
{
    private boolean checkMultiStatusLP;
    private boolean checkDimHierarchy;
    private boolean checkLocationMixingConstraint;
    private WHSLocationMixingConstraintCheckSkip locationMixingConstraintCheckSkip;
    private boolean checkInventOwnerId;
    private boolean checkInventUpdateBlockedItem;
    private boolean checkStoppedForInventory;
    private boolean checkCountingLocks;
    private boolean checkLicensePlateOnLPControlledLocation;
    private boolean checkLicensePlateInOneLocation;
    private boolean checkWMSLocation;
    private boolean checkWMSLocationInputBlocking;
    private boolean checkWMSLocationOutputBlocking;
    private boolean checkContainerTypeOnLocation;
    private boolean checkOnHand;
    private boolean failCheckOnHand;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmCheckMultiStatusLP</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmCheckMultiStatusLP(boolean _checkMultiStatusLP = checkMultiStatusLP)
    {
        checkMultiStatusLP = _checkMultiStatusLP;
        return checkMultiStatusLP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCheckMultiStatusLP</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSInventoryTransactionActionValidationParameters setCheckMultiStatusLP(boolean _checkMultiStatusLP)
    {
        checkMultiStatusLP = _checkMultiStatusLP;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckDimHierarchy</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmCheckDimHierarchy(boolean _checkDimHierarchy = checkDimHierarchy)
    {
        checkDimHierarchy = _checkDimHierarchy;
        return checkDimHierarchy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCheckDimHierarchy</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSInventoryTransactionActionValidationParameters setCheckDimHierarchy(boolean _checkDimHierarchy)
    {
        checkDimHierarchy = _checkDimHierarchy;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckLocationMixingConstraint</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmCheckLocationMixingConstraint(boolean _checkLocationMixingConstraint = checkLocationMixingConstraint)
    {
        checkLocationMixingConstraint = _checkLocationMixingConstraint;
        return checkLocationMixingConstraint;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCheckLocationMixingConstraint</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSInventoryTransactionActionValidationParameters setCheckLocationMixingConstraint(boolean _checkLocationMixingConstraint)
    {
        checkLocationMixingConstraint = _checkLocationMixingConstraint;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLocationMixingConstraintCheckSkip</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSLocationMixingConstraintCheckSkip parmLocationMixingConstraintCheckSkip(WHSLocationMixingConstraintCheckSkip _locationMixingConstraintCheckSkip = locationMixingConstraintCheckSkip)
    {
        locationMixingConstraintCheckSkip = _locationMixingConstraintCheckSkip;
        return locationMixingConstraintCheckSkip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLocationMixingConstraintCheckSkip</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSInventoryTransactionActionValidationParameters setLocationMixingConstraintCheckSkip(WHSLocationMixingConstraintCheckSkip _locationMixingConstraintCheckSkip)
    {
        locationMixingConstraintCheckSkip = _locationMixingConstraintCheckSkip;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckInventOwnerId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmCheckInventOwnerId(boolean _checkInventOwnerId = checkInventOwnerId)
    {
        checkInventOwnerId = _checkInventOwnerId;
        return checkInventOwnerId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCheckInventOwnerId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSInventoryTransactionActionValidationParameters setCheckInventOwnerId(boolean _checkInventOwnerId)
    {
        checkInventOwnerId = _checkInventOwnerId;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckInventUpdateBlockedItem</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmCheckInventUpdateBlockedItem(boolean _checkInventUpdateBlockedItem = checkInventUpdateBlockedItem)
    {
        checkInventUpdateBlockedItem = _checkInventUpdateBlockedItem;
        return checkInventUpdateBlockedItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCheckInventUpdateBlockedItem</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSInventoryTransactionActionValidationParameters setCheckInventUpdateBlockedItem(boolean _checkInventUpdateBlockedItem)
    {
        checkInventUpdateBlockedItem = _checkInventUpdateBlockedItem;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckStoppedForInventory</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmCheckStoppedForInventory(boolean _checkStoppedForInventory = checkStoppedForInventory)
    {
        checkStoppedForInventory = _checkStoppedForInventory;
        return checkStoppedForInventory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCheckStoppedForInventory</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSInventoryTransactionActionValidationParameters setCheckStoppedForInventory(boolean _checkStoppedForInventory)
    {
        checkStoppedForInventory = _checkStoppedForInventory;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckCountingLocks</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmCheckCountingLocks(boolean _checkCountingLocks = checkCountingLocks)
    {
        checkCountingLocks = _checkCountingLocks;
        return checkCountingLocks;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCheckCountingLocks</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSInventoryTransactionActionValidationParameters setCheckCountingLocks(boolean _checkCountingLocks)
    {
        checkCountingLocks = _checkCountingLocks;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckLicensePlateOnLPControlledLocation</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmCheckLicensePlateOnLPControlledLocation(boolean _checkLicensePlateOnLPControlledLocation = checkLicensePlateOnLPControlledLocation)
    {
        checkLicensePlateOnLPControlledLocation = _checkLicensePlateOnLPControlledLocation;
        return checkLicensePlateOnLPControlledLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCheckLicensePlateOnLPControlledLocation</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSInventoryTransactionActionValidationParameters setCheckLicensePlateOnLPControlledLocation(boolean _checkLicensePlateOnLPControlledLocation)
    {
        checkLicensePlateOnLPControlledLocation = _checkLicensePlateOnLPControlledLocation;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckLicensePlateInOneLocation</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmCheckLicensePlateInOneLocation(boolean _checkLicensePlateInOneLocation = checkLicensePlateInOneLocation)
    {
        checkLicensePlateInOneLocation = _checkLicensePlateInOneLocation;
        return checkLicensePlateInOneLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCheckLicensePlateInOneLocation</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSInventoryTransactionActionValidationParameters setCheckLicensePlateInOneLocation(boolean _checkLicensePlateInOneLocation)
    {
        checkLicensePlateInOneLocation = _checkLicensePlateInOneLocation;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckWMSLocation</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmCheckWMSLocation(boolean _checkWMSLocation = checkWMSLocation)
    {
        checkWMSLocation = _checkWMSLocation;
        return checkWMSLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckWMSLocationInputBlocking</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmCheckWMSLocationInputBlocking(boolean _checkWMSLocationInputBlocking = checkWMSLocationInputBlocking)
    {
        checkWMSLocationInputBlocking = _checkWMSLocationInputBlocking;
        return checkWMSLocationInputBlocking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckWMSLocationOutputBlocking</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmCheckWMSLocationOutputBlocking(boolean _checkWMSLocationOutputBlocking = checkWMSLocationOutputBlocking)
    {
        checkWMSLocationOutputBlocking = _checkWMSLocationOutputBlocking;
        return checkWMSLocationOutputBlocking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCheckWMSLocation</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSInventoryTransactionActionValidationParameters setCheckWMSLocation(boolean _checkWMSLocation)
    {
        checkWMSLocation = _checkWMSLocation;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCheckWMSLocationInputBlocking</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSInventoryTransactionActionValidationParameters setCheckWMSLocationInputBlocking(boolean _checkWMSLocationInputBlocking)
    {
        checkWMSLocationInputBlocking = _checkWMSLocationInputBlocking;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCheckWMSLocationOutputBlocking</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSInventoryTransactionActionValidationParameters setCheckWMSLocationOutputBlocking(boolean _checkWMSLocationOutputBlocking)
    {
        checkWMSLocationOutputBlocking = _checkWMSLocationOutputBlocking;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckContainerTypeOnLocation</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmCheckContainerTypeOnLocation(boolean _checkContainerTypeOnLocation = checkContainerTypeOnLocation)
    {
        checkContainerTypeOnLocation = _checkContainerTypeOnLocation;
        return checkContainerTypeOnLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCheckContainerTypeOnLocation</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSInventoryTransactionActionValidationParameters setCheckContainerTypeOnLocation(boolean _checkContainerTypeOnLocation)
    {
        checkContainerTypeOnLocation = _checkContainerTypeOnLocation;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckOnHand</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmCheckOnHand(boolean _checkOnHand = checkOnHand)
    {
        checkOnHand = _checkOnHand;
        return checkOnHand;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCheckOnHand</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSInventoryTransactionActionValidationParameters setCheckOnHand(boolean _checkOnHand)
    {
        checkOnHand = _checkOnHand;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFailCheckOnHand</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmFailCheckOnHand(boolean _failCheckOnHand = failCheckOnHand)
    {
        failCheckOnHand = _failCheckOnHand;
        return failCheckOnHand;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFailCheckOnHand</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSInventoryTransactionActionValidationParameters setFailCheckOnHand(boolean _failCheckOnHand)
    {
        failCheckOnHand = _failCheckOnHand;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activateAllCreateReservationChecks</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSInventoryTransactionActionValidationParameters activateAllCreateReservationChecks()
    {
        this.checkDimHierarchy = true;
        this.checkInventOwnerId = true;
        this.checkInventUpdateBlockedItem = true;
        this.checkStoppedForInventory = true;
        this.checkWMSLocation = true;

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activateAllRemoveReservationChecks</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSInventoryTransactionActionValidationParameters activateAllRemoveReservationChecks()
    {
        this.checkInventOwnerId = true;
        this.checkInventUpdateBlockedItem = true;

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activateAllReceiptRegistrationChecks</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSInventoryTransactionActionValidationParameters activateAllReceiptRegistrationChecks()
    {
        this.checkMultiStatusLP = true;
        this.checkDimHierarchy = true;
        this.checkLocationMixingConstraint = true;
        this.checkInventOwnerId = true;
        this.checkInventUpdateBlockedItem = true;
        this.checkCountingLocks = true;
        this.checkLicensePlateOnLPControlledLocation = true;
        this.checkLicensePlateInOneLocation = true;
        this.checkContainerTypeOnLocation = true;

        if (WHSBlockingCauseWorkPolicyFlight::instance().isEnabled())
        {
            this.checkWMSLocationInputBlocking = true;
        }

        if (WHSInventoryTransactionValidationParametersCheckWMSLocationFlight::instance().isEnabled())
        {
            this.checkWMSLocation = true;
        }

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activateAllIssueRegistrationChecks</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSInventoryTransactionActionValidationParameters activateAllIssueRegistrationChecks()
    {
        this.checkDimHierarchy = true;
        this.checkInventOwnerId = true;
        this.checkInventUpdateBlockedItem = true;
        this.checkCountingLocks = true;
        this.checkLicensePlateOnLPControlledLocation = true;

        if (WHSBlockingCauseWorkPolicyFlight::instance().isEnabled())
        {
            this.checkWMSLocationOutputBlocking = true;
        }

        if (WHSInventoryTransactionValidationParametersCheckWMSLocationFlight::instance().isEnabled())
        {
            this.checkWMSLocation = true;
        }

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>noChecks</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSInventoryTransactionActionValidationParameters noChecks()
    {
        return new WHSInventoryTransactionActionValidationParameters();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCreateReservation</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSInventoryTransactionActionValidationParameters newCreateReservation()
    {
        return WHSInventoryTransactionActionValidationParameters::noChecks()
            .activateAllCreateReservationChecks();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newRemoveReservation</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSInventoryTransactionActionValidationParameters newRemoveReservation()
    {
        return WHSInventoryTransactionActionValidationParameters::noChecks()
            .activateAllRemoveReservationChecks();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newReceiptRegistration</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSInventoryTransactionActionValidationParameters newReceiptRegistration()
    {
        return WHSInventoryTransactionActionValidationParameters::noChecks()
            .activateAllReceiptRegistrationChecks();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newIssueRegistration</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSInventoryTransactionActionValidationParameters newIssueRegistration()
    {
        return WHSInventoryTransactionActionValidationParameters::noChecks()
            .activateAllIssueRegistrationChecks();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>