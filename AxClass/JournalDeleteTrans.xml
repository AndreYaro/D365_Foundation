<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JournalDeleteTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JournalDeleteTrans</c> class is used to delete all or selected journal lines.
/// </summary>
class JournalDeleteTrans extends JournalRunBaseBatch implements BatchRetryable
{
    #DEFINE.CurrentVersion(4)
    #LOCALMACRO.CurrentList
        journalId,
        numOfDeletedLines
    #ENDMACRO

    // parameters

    TableId                 journalTableId;
    JournalId               journalId;
    QueryRun                queryRun;

    // status variable

    Integer                 progressCounter;
    Integer                 numOfDeletedLines;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteLines</Name>
				<Source><![CDATA[
    protected void deleteLines()
    {
        JournalTableData        journalTableData;
        JournalTransData        journalTransData;
        JournalTransMap         journalTrans;
        TableId                 transTableId  = JournalStatic::newTable(JournalStatic::findJournalTableId(journalTableId,journalId)).journalTrans().TableId;

        this.progressInit("@SYS28500",  QueryRun::getQueryRowCount(queryRun.query(), intMax()), #AviFiledelr);
        progress.updateInterval(2);

        numOfDeletedLines = 0;

        while (queryRun.next())
        {
            journalTrans = queryRun.get(transTableId);

            this.progressUpdate(journalTrans);

            if (! journalTableData)
            {
                journalTableData = JournalTableData::newTable(JournalStatic::findJournalTableId(journalTableId,journalTrans.JournalId,true));
            }
            else if (journalTrans.JournalId != journalTableData.journalTable().JournalId)
            {
                if (journalTableData.journalTable().JournalId == journalId && this.isInBatch())
                {
                    journalTableData.updateBlock(JournalBlockLevel::System,JournalBlockLevel::None,true);
                }
                else
                {
                    journalTableData.journalTable().update();
                }

                journalTableData = JournalTableData::newTable(JournalStatic::findJournalTableId(journalTableId,journalTrans.JournalId,true));
            }

            setPrefix(this.prefixJournalTable(journalTrans.JournalId));

            journalTransData = journalTableData.journalStatic().newJournalTransData(journalTrans,journalTableData);
            journalTransData.delete();

            numOfDeletedLines++;
        }

        if (journalTableData)
        {
            if (journalTableData.journalTable().JournalId == journalId && this.isInBatch())
            {
                journalTableData.updateBlock(JournalBlockLevel::System,JournalBlockLevel::None,true);
            }
            else
            {
                journalTableData.journalTable().update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable
    ///    </c>interface.
    /// </summary>
    /// <returns>
    ///    A <c>runbaseDialogable</c> object.
    /// </returns>
    /// <remarks>
    ///    A dialog box can be built either by using the dialog box system or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase  dialog = super();

        dialog.addMenuItemButton(MenuItemType::Display,menuitemDisplayStr(RunbaseQueryDialog),DialogMenuItemGroup::BottomGrp);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasChangedErrorList</Name>
				<Source><![CDATA[
    boolean hasChangedErrorList()
    {
        return numOfDeletedLines > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasChangedNumOfLines</Name>
				<Source><![CDATA[
    boolean hasChangedNumOfLines()
    {
        return numOfDeletedLines > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    boolean init()
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbd;
        JournalStatic           journalStatic = JournalStatic::newTable(JournalStatic::findJournalTableId(journalTableId,journalId));

        if (!journalStatic || !journalId)
        {
            throw error(strFmt("@SYS21496", journalId));
        }

        qbd = query.addDataSource(journalStatic.journalTrans().TableId);
        if (journalStatic.journalTrans().TableId == tableNum(InventJournalTrans))
        {
            qbd.addOrderByField(fieldNum(InventJournalTrans, BOMLine), SortOrder::Descending);
        }
        qbd.addRange(journalStatic.transFieldIdJournalId()).value(queryValue(journalId));
        qbd.update(true);

        queryRun = new QueryRun(query);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        TableName   journalTableName = tableId2name(journalTableId);    // Store element names and not IDs in packed data
        return [#CurrentVersion,#CurrentList, journalTableName,queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalId</Name>
				<Source><![CDATA[
    public JournalId parmJournalId(JournalId _journalId = journalId)
    {
        journalId = _journalId;
        return journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalTableId</Name>
				<Source><![CDATA[
    public TableId parmJournalTableId(TableId _tableId = journalTableId)
    {
        journalTableId = _tableId;
        return journalTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prefixJournalTable</Name>
				<Source><![CDATA[
    protected str prefixJournalTable(JournalId _journalId = journalId)
    {
        return fieldLabelValue(tableNum(JournalTableMap), fieldNum(JournalTableMap,JournalId),_journalId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressText</Name>
				<Source><![CDATA[
    protected str progressText(JournalTransMap _journalTrans)
    {
        return strFmt("@SYS26913",_journalTrans.LineNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressUpdate</Name>
				<Source><![CDATA[
    protected void progressUpdate(
        JournalTransMap _journalTrans,
        str             _text   = this.progressText(_journalTrans))
    {
        progressCounter++;
        progress.setCount(progressCounter);
        progress.setText(this.progressText(_journalTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>queryRun</c> value, which is used by the <c>queryprompt</c> method.
    /// </summary>
    /// <returns>
    /// The <c>queryRun</c> value, which is used by the <c>queryprompt</c> method.
    /// </returns>
    /// <remarks>
    /// This method is used where a query prompt is the dialog box and where a
    /// <c>Select_RunBaseQueryDialog</c> menu item is added to a dialog box. Do not instantiate the
    /// <c>queryRun</c> variable whenever the method is called. Do it in the <c>unpack</c> ,
    /// <c>initParmDefault,</c> or <c>init</c> methods or in the method only when it is not instantiated.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        try
        {
            ttsbegin;
            setPrefix("@SYS28500");
            this.deleteLines();
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Instructs the batch framework that this class can run impersonating the user who requested the task.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        #LOCALMACRO.CurrentList2
            journalTableId,
            journalId
        #ENDMACRO

        Integer         version        = RunBase::getVersion(_packedClass);
        container       packedQuery;
        TableName       journalTableName;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, journalTableName, packedQuery] = _packedClass;
                journalTableId      = tableName2id(journalTableName);
                if (packedQuery && conLen(packedQuery) == 1)
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;

            case 2:
                [version, #CurrentList2, packedQuery] = _packedClass;
                journalTableName    = legacyID2Name(UtilElementType::Table, journalTableId);
                journalTableId      = tableName2id(journalTableName);
                if (packedQuery && conLen(packedQuery) == 1)
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;
            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs a new instance of the <c>JournalDeleteTrans</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>JournalDeleteTrans</c> class.
    /// </returns>
    public static JournalDeleteTrans construct()
    {
        return new JournalDeleteTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS28500";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        JournalDeleteTrans         journalDeleteTrans;
        JournalForm                journalForm;

        journalForm        = JournalForm::fromArgs(_args);
        journalDeleteTrans = JournalDeleteTrans::newFromForm(_args,journalForm);

        journalForm.runbaseMainStart();
        if (!journalDeleteTrans.prompt())
        {
            if (! journalDeleteTrans.batchInfo().parmBatch().RecId)
            {
                journalForm.runbaseMainCancel(journalDeleteTrans.parmJournalId());
            }
            return;
        }

        try
        {
            journalDeleteTrans.runOperation();
            journalForm.runbaseMainEnd(journalDeleteTrans,false);
        }
        catch (Exception::Error)
        {
            journalForm.runbaseMainEnd(journalDeleteTrans,true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    public static JournalDeleteTrans newFromForm(
        Args            _args,
        JournalForm     _journalForm)
    {
        JournalDeleteTrans       journalDeleteTrans = JournalDeleteTrans::construct();
        JournalTableMap          journalTable = _journalForm.journalTableData().journalTable();

        journalDeleteTrans.getLast();
        journalDeleteTrans.parmJournalTableId(journalTable.TableId);
        journalDeleteTrans.parmJournalId(journalTable.JournalId);
        journalDeleteTrans.init();

        return journalDeleteTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>