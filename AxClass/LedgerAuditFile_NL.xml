<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerAuditFile_NL</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;

class LedgerAuditFile_NL extends RunBaseBatch implements BatchRetryable
{
    FromDate            fromDate;
    ToDate              toDate;

    DialogField         dialogFromDate;
    DialogField         dialogToDate;
    DialogField         dialogErBinding;

    ERFormatMappingId   erBinding;
    ERIFileDestination  erFileDestination;

    Map                 duplicateCustVendIdMap;
    Map                 periodMap;

    const ModelName     modelName = 'AuditFile';

    #define.CurrentVersion(2)

    #localmacro.CurrentList
        fromDate,
        toDate,
        erBinding
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog(DialogRunbase dialog = null, boolean forceOnClient = false)
    {
        DialogGroup periodGroup;

        dialog = this.dialogInternal(dialog, forceOnClient);

        periodGroup = dialog.addGroup("@SYS40");
        periodGroup.columns(2);

        dialogFromDate = dialog.addFieldValue(extendedTypeStr(FromDate),fromDate,'',"@SYS12292");
        dialogFromDate.control().mandatory(true);

        dialogToDate = dialog.addFieldValue(extendedTypeStr(ToDate),toDate,'',"@SYS6962");
        dialogToDate.control().mandatory(true);

        dialog.addGroup("@AccountsReceivable:ElectronicReporting");
        dialogErBinding = dialog.addFieldValue(extendedTypeStr(ERFormatMappingId), erBinding);
        dialogErBinding.control().registerOverrideMethod(methodStr(FormReferenceControl, lookupReference),
                                                             methodStr(LedgerAuditFile_NL, erBinding_lookup),
                                                             this);
        dialogErBinding.control().mandatory(true);

        dialog.addGroup("@SYS3714");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        fromDate        = dialogFromDate.value();
        toDate          = dialogToDate.value();
        erBinding       = dialogErBinding.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>erBinding_lookup</Name>
				<Source><![CDATA[
    private Common erBinding_lookup(FormReferenceControl _formControl)
    {
        return ERFormatMappingTable::lookup(_formControl, modelName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        erFileDestination = ERObjectsFactory::createFileDestinationBrowser();
        var ledgerAuditFileData = new LedgerAuditFileDataTransformation(fromDate, toDate);
        ledgerAuditFileData.populateData();
        ledgerAuditFileData.validateData();
        this.runElectonicReporting(ledgerAuditFileData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    ///    true if the task is run on the server; otherwise, false.
    /// </returns>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version     = RunBase::getVersion(_packedClass);
        ;
        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean     ret = true;
        int         strLength;
        TransDate   opPeriodFromDate;
        TransDate   opPeriodToDate;
        recId       calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();

        if (!fromDate || !toDate)
        {
            ret = checkFailed("@SYS24455");
            return ret;
        }

        fromDate = LedgerFiscalCalendar::findPeriodStartDateByDate(calendarRecId,fromDate);
        toDate   = LedgerFiscalCalendar::findPeriodEndDateByDate(calendarRecId,toDate);

        if (!fromDate || !toDate)
        {
            ret = checkFailed("@SYS319450");
            return ret;
        }

        opPeriodFromDate = LedgerFiscalCalendar::findOpeningStartDateByDate(calendarRecId,fromDate);
        opPeriodToDate   = LedgerFiscalCalendar::findOpeningStartDateByDate(calendarRecId,toDate);
        if (opPeriodFromDate != opPeriodToDate)
        {
            ret = checkFailed("@SYS319449");
        }

        if (fromDate > toDate)
        {
            ret = checkFailed("@SYS22806");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static LedgerAuditFile_NL construct()
    {
        return new LedgerAuditFile_NL();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmERFileDestination</Name>
				<Source><![CDATA[
    public ERIFileDestination parmERFileDestination(ERIFileDestination _erFileDestination = erFileDestination)
    {
        erFileDestination = _erFileDestination;
        return erFileDestination;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYS95538";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args a)
    {
        LedgerAuditFile_NL  ledgerAuditFile_NL = LedgerAuditFile_NL::construct();

        if (ledgerAuditFile_NL.prompt())
        {
            ledgerAuditFile_NL.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runElectonicReporting</Name>
				<Source><![CDATA[
    private void runElectonicReporting(LedgerAuditFileDataTransformation _dataTransformation)
    {
        var report = new LedgerAuditFileReportHeader(_dataTransformation.getFromDate(), _dataTransformation.getToDate(), _dataTransformation.getOpeningBalanceDate());
        this.setTotals(report, _dataTransformation);
        var query = new Query();
        var ds = query.addDataSource(tableNum(LedgerAuditFileTransactionTmp));
        ds.addOrderByField(fieldNum(LedgerAuditFileTransactionTmp, GeneralJournalEntry));
        
        ERObjectsFactory::createFormatMappingRunWithBatchSupportByFormatMappingId(erBinding, '', false, false, false, this.isInBatch())
            .withFileDestination(this.isInBatch() ? null : erFileDestination)
            .withParameter(new ERModelDefinitionDatabaseContext()
                .addTemporaryTable(_dataTransformation.getCompanyTaxCodes())
                .addTemporaryTable(_dataTransformation.getCompanyTransactions())
                    .addQuery(tableNum(LedgerAuditFileTransactionTmp), query)
                .addTemporaryTable(_dataTransformation.getCompanyTransactionSubledger())
                .addTemporaryTable(_dataTransformation.getOpeningBalanceLines())
                .addTemporaryTable(_dataTransformation.getOpeningBalanceSubledger())
                .addTemporaryTable(_dataTransformation.getCustVendList())
                .addTemporaryTable(_dataTransformation.getPeriods())
            )
            .withCreatingObjectParameter(modelName, 'O_' + classStr(LedgerAuditFileReportHeader), report).run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTotals</Name>
				<Source><![CDATA[
    private void setTotals(LedgerAuditFileReportHeader _report, LedgerAuditFileDataTransformation _dataTransformation)
    {
        _report.setTransCustDebitAmount(_dataTransformation.calcTotalCustDebitAmount());
        _report.setTransCustCreditAmount(_dataTransformation.calcTotalCustCreditAmount());
        _report.setTransCustTotalLines(_dataTransformation.calcTotalCustLinesCount());
        _report.setTransVendDebitAmount(_dataTransformation.calcTotalVendDebitAmount());
        _report.setTransVendCreditAmount(_dataTransformation.calcTotalVendCreditAmount());
        _report.setTransVendTotalLines(_dataTransformation.calcTotalVendLinesCount());
        _report.setOBCustDebitAmount(_dataTransformation.calcOBTotalCustDebitAmount());
        _report.setOBCustCreditAmount(_dataTransformation.calcOBTotalCustCreditAmount());
        _report.setOBCustTotalLines(_dataTransformation.calcOBTotalCustLinesCount());
        _report.setOBVendDebitAmount(_dataTransformation.calcOBTotalVendDebitAmount());
        _report.setOBVendCreditAmount(_dataTransformation.calcOBTotalVendCreditAmount());
        _report.setOBVendTotalLines(_dataTransformation.calcOBTotalVendLinesCount());
        _report.setTransTotalDebitAmount(_dataTransformation.calcTotalTransactionsDebitAmount());
        _report.setTransTotalCreditAmount(_dataTransformation.calcTotalTransactionsCreditAmount());
        _report.setTransTotalLines(_dataTransformation.calcTotalTransactionsCount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check to see if Audit policy can run in a new session.
    /// </summary>
    /// <returns>
    /// False.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>