<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSumReCalcItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventSumReCalcItem
{
    ItemId              itemId;
    InventTable         inventTable;
    RecId               companyRecId;

    RecordSortedList    cacheInventSum;
    RecordSortedList    whsInventReserveCache;

    Integer             errorQty;
    Integer             sumQty;
    boolean             showErrors;
    CheckFix            checkFix;

    boolean             mustInventBeControlled;
    boolean             isItemWHSEnabled;
    [SysObsolete('This flight is always enabled', false, 31\10\2022)]
    boolean             refactorOnHandRecalcFlightActive = true;

    const int TotalShowErrorCount = 500;

    private InventInstrumentationLogger logger;

    private WHSInventoryTransactionSumReCalcItem warehouseInventoryTransactionSumReCalcItem;

    private boolean includeWarehouseInventoryTransactionsIntoCalculation =
           WHSInventoryTransactionConfigurationProvider::isWarehouseInventoryTransactionStackEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkWHSInventReserve</Name>
				<Source><![CDATA[
    private void checkWHSInventReserve(
            WHSInventReserve   _inventReserveReadFromDB,
            WHSInventReserve   _inventReserveCalculated)
    {
        if (_inventReserveReadFromDB.IsItemCatchWeightEnabled)
        {
            this.checkWHSInventReserveField(_inventReserveReadFromDB, _inventReserveCalculated, fieldNum(WHSInventReserve, CWAvailOrdered));
            this.checkWHSInventReserveField(_inventReserveReadFromDB, _inventReserveCalculated, fieldNum(WHSInventReserve, CWAvailPhysical));
            this.checkWHSInventReserveField(_inventReserveReadFromDB, _inventReserveCalculated, fieldNum(WHSInventReserve, CWReservOrdered));
            this.checkWHSInventReserveField(_inventReserveReadFromDB, _inventReserveCalculated, fieldNum(WHSInventReserve, CWReservPhysical));
        }
        
        this.checkWHSInventReserveField(_inventReserveReadFromDB, _inventReserveCalculated, fieldNum(WHSInventReserve, AvailOrdered));
        this.checkWHSInventReserveField(_inventReserveReadFromDB, _inventReserveCalculated, fieldNum(WHSInventReserve, AvailPhysical));
        this.checkWHSInventReserveField(_inventReserveReadFromDB, _inventReserveCalculated, fieldNum(WHSInventReserve, ReservOrdered));
        this.checkWHSInventReserveField(_inventReserveReadFromDB, _inventReserveCalculated, fieldNum(WHSInventReserve, ReservPhysical));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkWHSInventReserveParentInventDimId</Name>
				<Source><![CDATA[
    private void checkWHSInventReserveParentInventDimId(
            WHSInventReserve   _inventReserveReadFromDB,
            WHSInventReserve   _inventReserveCalculated)
    {
        this.checkWHSInventReserveField(_inventReserveReadFromDB, _inventReserveCalculated, fieldNum(WHSInventReserve, ParentInventDimId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkWHSInventReserveField</Name>
				<Source><![CDATA[
    private void checkWHSInventReserveField(
        WHSInventReserve   _inventReserveReadFromDB,
        WHSInventReserve   _inventReserveCalculated,
        fieldId            _fieldIdCheck)
    {
        if (_inventReserveReadFromDB.(_fieldIdCheck) != _inventReserveCalculated.(_fieldIdCheck))
        {
            this.insertError(strfmt("@SCM:WHSInventSumReCalcItemError",
                            _inventReserveReadFromDB.InventDimId,
                            fieldId2name(tableNum(WHSInventReserve), _fieldIdCheck),
                            tableId2name(tableNum(WHSInventReserve)),
                            _inventReserveCalculated.(_fieldIdCheck),
                            _inventReserveReadFromDB.(_fieldIdCheck)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventSum</Name>
				<Source><![CDATA[
    protected void checkInventSum(
        InventSum   _sumUpdated,
        InventSum   _sumCalculated)
    {
        if (_sumUpdated.PostedQty != _sumCalculated.PostedQty)
        {
            this.insertError(strfmt("@SYS18761", _sumCalculated.InventDimId, _sumCalculated.PostedQty, _sumUpdated.PostedQty));
        }

        if (_sumUpdated.PostedValue != _sumCalculated.PostedValue)
        {
            this.insertError(strfmt("@SYS18762", _sumCalculated.InventDimId, _sumCalculated.PostedValue, _sumUpdated.PostedValue));
        }

        if (_sumUpdated.PhysicalValue != _sumCalculated.PhysicalValue)
        {
            this.insertError(strfmt("@SYS54228", _sumCalculated.InventDimId, _sumCalculated.PhysicalValue, _sumUpdated.PhysicalValue));
        }

        if (_sumUpdated.Deducted != _sumCalculated.Deducted)
        {
            this.insertError(strfmt("@SYS18763", _sumCalculated.InventDimId, _sumCalculated.Deducted, _sumUpdated.Deducted));
        }

        if (_sumUpdated.Picked != _sumCalculated.Picked)
        {
            this.insertError(strfmt("@SYS54229", _sumCalculated.InventDimId, _sumCalculated.Picked, _sumUpdated.Picked));
        }

        if (_sumUpdated.Received != _sumCalculated.Received)
        {
            this.insertError(strfmt("@SYS18764", _sumCalculated.InventDimId, _sumCalculated.Received, _sumUpdated.Received));
        }

        if (_sumUpdated.Registered != _sumCalculated.Registered)
        {
            this.insertError(strfmt("@SYS54230", _sumCalculated.InventDimId, _sumCalculated.Registered, _sumUpdated.Registered));
        }

        if (_sumUpdated.ReservPhysical != _sumCalculated.ReservPhysical)
        {
            this.insertError(strfmt("@SYS18765", _sumCalculated.InventDimId, _sumCalculated.ReservPhysical, _sumUpdated.ReservPhysical));
        }

        if (_sumUpdated.ReservOrdered != _sumCalculated.ReservOrdered)
        {
            this.insertError(strfmt("@SYS18766", _sumCalculated.InventDimId, _sumCalculated.ReservOrdered, _sumUpdated.ReservOrdered));
        }

        if (_sumUpdated.Ordered != _sumCalculated.Ordered)
        {
            this.insertError(strfmt("@SYS18767", _sumCalculated.InventDimId, _sumCalculated.Ordered, _sumUpdated.Ordered));
        }

        if (_sumUpdated.OnOrder != _sumCalculated.OnOrder)
        {
            this.insertError(strfmt("@SYS18768", _sumCalculated.InventDimId, _sumCalculated.OnOrder, _sumUpdated.OnOrder));
        }

        if (_sumUpdated.QuotationIssue != _sumCalculated.QuotationIssue)
        {
            this.insertError(strfmt("@SYS18769", _sumCalculated.InventDimId, _sumCalculated.QuotationIssue, _sumUpdated.QuotationIssue));
        }

        if (_sumUpdated.QuotationReceipt != _sumCalculated.QuotationReceipt)
        {
            this.insertError(strfmt("@SYS18770", _sumCalculated.InventDimId, _sumCalculated.QuotationReceipt, _sumUpdated.QuotationReceipt));
        }
        if (_sumUpdated.PdsCWPostedQty != _sumCalculated.PdsCWPostedQty)
        {
            this.insertError(strfmt("@PDS309",
                                    _sumCalculated.InventDimId,
                                    _sumCalculated.PdsCWPostedQty,
                                    _sumUpdated.PdsCWPostedQty));
        }

        if (_sumUpdated.PdsCWDeducted != _sumCalculated.PdsCWDeducted)
        {
            this.insertError(strfmt("@PDS319",
                                    _sumCalculated.InventDimId,
                                    _sumCalculated.PdsCWDeducted,
                                    _sumUpdated.PdsCWDeducted));
        }

        if (_sumUpdated.PdsCWPicked != _sumCalculated.PdsCWPicked)
        {
            this.insertError(strfmt("@PDS310",
                                    _sumCalculated.InventDimId,
                                    _sumCalculated.PdsCWPicked,
                                    _sumUpdated.PdsCWPicked));
        }

        if (_sumUpdated.PdsCWReceived != _sumCalculated.PdsCWReceived)
        {
            this.insertError(strfmt("@PDS311",
                                    _sumCalculated.InventDimId,
                                    _sumCalculated.PdsCWReceived,
                                    _sumUpdated.PdsCWReceived));
        }

        if (_sumUpdated.PdsCWRegistered != _sumCalculated.PdsCWRegistered)
        {
            this.insertError(strfmt("@PDS312",
                                    _sumCalculated.InventDimId,
                                    _sumCalculated.PdsCWRegistered,
                                    _sumUpdated.PdsCWRegistered));
        }

        if (_sumUpdated.PdsCWReservPhysical != _sumCalculated.PdsCWReservPhysical)
        {
            this.insertError(strfmt("@PDS313",
                                    _sumCalculated.InventDimId,
                                    _sumCalculated.PdsCWReservPhysical,
                                    _sumUpdated.PdsCWReservPhysical));
        }

        if (_sumUpdated.PdsCWReservOrdered != _sumCalculated.PdsCWReservOrdered)
        {
            this.insertError(strfmt("@PDS314",
                                    _sumCalculated.InventDimId,
                                    _sumCalculated.PdsCWReservOrdered,
                                    _sumUpdated.PdsCWReservOrdered));
        }

        if (_sumUpdated.PdsCWOrdered != _sumCalculated.PdsCWOrdered)
        {
            this.insertError(strfmt("@PDS315",
                                    _sumCalculated.InventDimId,
                                    _sumCalculated.PdsCWOrdered,
                                    _sumUpdated.PdsCWOrdered));
        }

        if (_sumUpdated.PdsCWOnOrder != _sumCalculated.PdsCWOnOrder)
        {
            this.insertError(strfmt("@PDS316",
                                    _sumCalculated.InventDimId,
                                    _sumCalculated.PdsCWOnOrder,
                                    _sumUpdated.PdsCWOnOrder));
        }

        if (_sumUpdated.PdsCWQuotationIssue != _sumCalculated.PdsCWQuotationIssue)
        {
            this.insertError(strfmt("@PDS317",
                                    _sumCalculated.InventDimId,
                                    _sumCalculated.PdsCWQuotationIssue,
                                    _sumUpdated.PdsCWQuotationIssue));
        }

        if (_sumUpdated.PdsCWQuotationReceipt != _sumCalculated.PdsCWQuotationReceipt)
        {
            this.insertError(strfmt("@PDS318",
                                    _sumCalculated.InventDimId,
                                    _sumCalculated.PdsCWQuotationReceipt,
                                    _sumUpdated.PdsCWQuotationReceipt));
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteInventSum</Name>
				<Source><![CDATA[
    protected void deleteInventSum()
    {
        InventSum       inventSum;

        var activity = logger.activity(methodStr(InventSumReCalcItem, deleteInventSum));
        using (var activityContext = logger.activityContext(activity))
        {
            activityContext.addCustomProperty(tableStr(InventTable), int642Str(inventTable.RecId));
            activityContext.addCustomProperty(tableStr(CompanyInfo), int642Str(companyRecId));
            if (showErrors)
            {
                select firstonly RecId from inventSum
                    where inventSum.ItemId == itemId;

                if (inventSum.RecId)
                {
                    this.insertError(strFmt("@SYS78132",InventTable::find(itemId).ItemType));
                }
            }

            if (checkFix == CheckFix::Fix)
            {
                delete_from inventSum
                    where inventSum.ItemId == itemId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNewWHSInventReserveFromDelta</Name>
				<Source><![CDATA[
    private WHSInventReserve initNewWHSInventReserveFromDelta(WHSInventReserveDelta _whsInventReserveDelta)
    {
        WHSInventReserve whsInventReserve;

        whsInventReserve.addInventReserveDelta(_whsInventReserveDelta);
        whsInventReserve.ItemId         = _whsInventReserveDelta.ItemId;
        whsInventReserve.InventDimId    = _whsInventReserveDelta.InventDimId;
        whsInventReserve.HierarchyLevel = _whsInventReserveDelta.HierarchyLevel;
        whsInventReserve.ParentInventDimId = _whsInventReserveDelta.ParentInventDimId;
        whsInventReserve.IsItemCatchWeightEnabled = _whsInventReserveDelta.IsItemCatchWeightEnabled;

        return whsInventReserve;
    }

]]></Source>
			</Method>
			<Method>
				<Name>testAllWHSInventReserve</Name>
				<Source><![CDATA[
    private void testAllWHSInventReserve(ItemId _itemId)
    {
        if (showErrors)
        {
            WHSInventReserveDelta whsInventReserveDelta;

            while select #WHSInventReserveSumFields from whsInventReserveDelta
                    group by ItemId, InventDimId, HierarchyLevel, ParentInventDimId, IsItemCatchWeightEnabled
                        where whsInventReserveDelta.ItemId == _itemId
                        &&    whsInventReserveDelta.TTSId  == InventUpdateOnhandGlobal::Instance().inventUpdateOnhand().ttsId()
            {
                this.testWHSInventReserve(this.initNewWHSInventReserveFromDelta(whsInventReserveDelta));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAndCheckWHSInventReserveFromDelta</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void insertAndCheckWHSInventReserveFromDelta(ItemId _itemId)
    {        
        this.testAllWHSInventReserve(_itemId);

        WHSInventReserve        whsInventReserve;
        WHSInventReserveDelta   whsInventReserveDelta;

        //do a set based insert after we checked to reduce the number of inserts
        if (checkFix == CheckFix::Fix)
        {          
            //if we get a duplicate key exception here then it means that we must have created a record that did not exist when we started processing but was inserted by another process during our processing.
            insert_recordSet WHSInventReserve(itemId, InventDimId, ParentInventDimId, HierarchyLevel, availPhysical, availOrdered, reservPhysical, reservOrdered,
                CWAvailPhysical, CWAvailOrdered, CWReservPhysical, CWReservOrdered, IsItemCatchWeightEnabled)
            select itemId, InventDimId, ParentInventDimId, HierarchyLevel, sum(availPhysical), sum(availOrdered), sum(reservPhysical), sum(reservOrdered),
                sum(CWAvailPhysical), sum(CWAvailOrdered), sum(CWReservPhysical), sum(CWReservOrdered), IsItemCatchWeightEnabled from whsInventReserveDelta
            group by ItemId, InventDimId, HierarchyLevel, ParentInventDimId, IsItemCatchWeightEnabled
                where whsInventReserveDelta.ItemId == _itemId
                &&    whsInventReserveDelta.TTSId  == InventUpdateOnhandGlobal::Instance().inventUpdateOnhand().ttsId();
        }

        //we always need to delete the deltas we created
        delete_from whsInventReserveDelta
            where whsInventReserveDelta.ItemId == _itemId
            &&    whsInventReserveDelta.TTSId  == InventUpdateOnhandGlobal::Instance().inventUpdateOnhand().ttsId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoWHSInventReserveCache</Name>
				<Source><![CDATA[
    private void insertIntoWHSInventReserveCache(WHSInventReserve _whsInventReserve)
    {
        whsInventReserveCache.ins(_whsInventReserve);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertWHSInventReserveDelta</Name>
				<Source><![CDATA[
    private void insertWHSInventReserveDelta(
        InventSum       _inventSum,
        boolean         _transTypeOnlyAffectsLocationAndBelow)
    {
        InventSumDelta inventSumDelta;

        inventSumDelta.initFromInventSum(_inventSum);
        inventSumDelta.ItemId           = _inventSum.itemId;
        inventSumDelta.InventDimId      = _inventSum.InventDimId;
        inventSumDelta.TTSId            = InventUpdateOnhandGlobal::Instance().inventUpdateOnhand().ttsId();
        inventSumDelta.SQLTransactionId = InventUpdateOnhandGlobal::Instance().inventUpdateOnhand().sqlTransactionId();

        WHSInventOnHand::insertWHSInventReserveDeltaFromAggrSum(inventSumDelta, _transTypeOnlyAffectsLocationAndBelow);        
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertWHSInventReserveDeltaSums</Name>
				<Source><![CDATA[
    private void insertWHSInventReserveDeltaSums(
            ItemId          _itemId,
            InventDimId     _inventDimId,
            InventSum       _inventSumWHSLocationAndBelow,
            InventSum       _inventSumWHSAllLevels)
    {
        _inventSumWHSLocationAndBelow.ItemId = _itemId;
        _inventSumWHSLocationAndBelow.inventDimId = _inventDimId;
        this.insertWHSInventReserveDelta(_inventSumWHSLocationAndBelow, true);
        _inventSumWHSLocationAndBelow.clear();

        _inventSumWHSAllLevels.ItemId = _itemId;
        _inventSumWHSAllLevels.inventDimId = _inventDimId;
        this.insertWHSInventReserveDelta(_inventSumWHSAllLevels, false);
        _inventSumWHSAllLevels.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemWHSEnabled</Name>
				<Source><![CDATA[
    private boolean isItemWHSEnabled()
    {
        return isItemWHSEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertError</Name>
				<Source><![CDATA[
    protected void insertError(str 254 txt)
    {
        errorQty  += 1;
        if (errorQty <= TotalShowErrorCount)
        {
            setPrefix(strFmt("@SYS14077", itemId) );
            checkFailed(txt);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doSetBasedDeleteOfInventSumWithoutShowingError</Name>
				<Source><![CDATA[
    private void doSetBasedDeleteOfInventSumWithoutShowingError()
    {

        ttsbegin;

        InventSum inventSum;

        inventSum.skipDataMethods(true);
        inventSum.skipDeleteActions(true);
        inventSum.skipDeleteMethod(true);

        delete_from inventSum
                    where inventSum.ItemId == itemId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadCurrentInventSum</Name>
				<Source><![CDATA[
    protected void loadCurrentInventSum()
    {
        InventSum inventSum;

        var activity = logger.activity(methodStr(InventSumReCalcItem, loadCurrentInventSum));
        using (var activityContext = logger.activityContext(activity))
        {
            activityContext.addCustomProperty(tableStr(InventTable), int642Str(inventTable.RecId));
            activityContext.addCustomProperty(tableStr(CompanyInfo), int642Str(companyRecId));
            if (!showErrors && checkFix == CheckFix::Fix)
            {
                this.doSetBasedDeleteOfInventSumWithoutShowingError();
            }
            else
            {
                while select forupdate inventSum
                    where inventSum.ItemId == itemId
                {
                    if (showErrors)
                    {
                        cacheInventSum.ins(inventSum);
                    }

                    if (checkFix == CheckFix::Fix)
                    {
                        inventSum.delete();
                    }
                }
            }
            //always load WHSInventReserve to correct inconsistencies where sums should not exist for an item
            this.loadCurrentWHSInventReserve();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doSetBasedDeleteOfWHSInventReserve</Name>
				<Source><![CDATA[
    private void doSetBasedDeleteOfWHSInventReserve()
    {
        ttsbegin;

        WHSInventReserve whsInventReserve;

        whsInventReserve.skipDataMethods(true);
        whsInventReserve.skipDeleteActions(true);
        whsInventReserve.skipDeleteMethod(true);

        delete_from whsInventReserve
            where whsInventReserve.ItemId == itemId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadCurrentWHSInventReserve</Name>
				<Source><![CDATA[
    private void loadCurrentWHSInventReserve()
    {
        WHSInventReserve whsInventReserve;

        if (!showErrors && checkFix == CheckFix::Fix)
        {
            this.doSetBasedDeleteOfWHSInventReserve();
        }
        else
        {
            while select forupdate whsInventReserve
                where whsInventReserve.ItemId == itemId
            {
                if (showErrors)
                {
                    this.insertIntoWHSInventReserveCache(whsInventReserve);
                }

                if (checkFix == CheckFix::Fix)
                {
                    //If somebody is trying to update the on-hand for the item while we process, we will have an X lock on the records, including the top most level which should prevent updates to existing records or inserts for the item
                    whsInventReserve.delete();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(
        ItemId      _itemId,
        boolean     _showErrors     = true,
        CheckFix    _checkFix       = CheckFix::Fix)
    {
        itemId = _itemId;
        showErrors = _showErrors;
        checkFix = _checkFix;

        if (!InventTable::checkExist(itemId))
        {
            throw error("@SYS18447");
        }
        
        mustInventBeControlled = InventTable::find(itemId).inventItemType().mustInventBeControlled();

        isItemWHSEnabled = WHSInventEnabled::exist(itemId);

        if (showErrors)
        {
            this.initializeCaches();
        }

        inventTable = InventTable::find(itemId);

        logger = InventInstrumentationLogger::createLogger(classStr(InventSumReCalcItem));
        companyRecId = CompanyInfo::current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCaches</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the objects caches that are used when errors are shown.
    /// </summary>
    protected void initializeCaches()
    {
        cacheInventSum = new RecordSortedList(tableNum(InventSum));
        cacheInventSum.sortOrder(fieldNum(InventSum,ItemId),fieldNum(InventSum,InventDimId));

        whsInventReserveCache = new RecordSortedList(tableNum(WHSInventReserve));
        whsInventReserveCache.sortOrder(fieldNum(WHSInventReserve,ItemId), fieldNum(WHSInventReserve,InventDimId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchRemainWHSInventReserve</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reports errors for any records that are left in the cache since these were the ones that existed before the check but was not re-created.
    /// </summary>
    protected void searchRemainWHSInventReserve()
    {
        WHSInventReserve whsInventReserveEmpty;
        WHSInventReserve whsInventReserveCurrent;

        if (showErrors)
        {
            if (whsInventReserveCache.first(whsInventReserveCurrent))
            {
                do
                {
                    if (errorQty > TotalShowErrorCount)
                    {
                        break;
                    }

                    this.checkWHSInventReserve(whsInventReserveCurrent,whsInventReserveEmpty);
                }
                while (whsInventReserveCache.next(whsInventReserveCurrent));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>testWHSInventReserve</Name>
				<Source><![CDATA[
    protected void testWHSInventReserve(WHSInventReserve _whsInventReserveCalculated)
    {
        WHSInventReserve whsInventReserveCurrent;

        if (showErrors)
        {
            whsInventReserveCurrent.ItemId                      = _whsInventReserveCalculated.ItemId;
            whsInventReserveCurrent.InventDimId                 = _whsInventReserveCalculated.InventDimId;

            //set the value in case the sum is not existing in the cache
            whsInventReserveCurrent.IsItemCatchWeightEnabled    = _whsInventReserveCalculated.IsItemCatchWeightEnabled;

            whsInventReserveCache.find(whsInventReserveCurrent);

            this.checkWHSInventReserve(whsInventReserveCurrent, _whsInventReserveCalculated);
            this.checkWHSInventReserveParentInventDimId(whsInventReserveCurrent, _whsInventReserveCalculated);

            whsInventReserveCache.del(whsInventReserveCurrent);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfErrors</Name>
				<Source><![CDATA[
    public Integer numberOfErrors()
    {
        return errorQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchRemainInventSum</Name>
				<Source><![CDATA[
    protected void searchRemainInventSum()
    {
        InventSum       inventSum;
        InventSum       inventSumCurrent;

        if (showErrors)
        {
            var activity = logger.activity(methodStr(InventSumReCalcItem, searchRemainInventSum));
            InventInstrumentationLoggerProperties properties = logger.properties();   
            using (var activityContext = logger.activityContext(activity))
            {
                activityContext.addCustomProperty(tableStr(InventTable), int642Str(inventTable.RecId));
                activityContext.addCustomProperty(tableStr(CompanyInfo), int642Str(companyRecId));
                if (cacheInventSum.first(inventSumCurrent))
                {
                    do
                    {
                        if (errorQty > TotalShowErrorCount)
                        {
                            break;
                        }

                        this.checkInventSum(inventSumCurrent,inventSum);
                    } while (cacheInventSum.next(inventSumCurrent));
                }

                if (this.isItemWHSEnabled())
                {
                    this.searchRemainWHSInventReserve();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>testSum</Name>
				<Source><![CDATA[
    protected void testSum(InventSum _inventSum)
    {
        if (showErrors)
        {
            InventSum inventSumCurrent;

            inventSumCurrent.ItemId         = _inventSum.ItemId;
            inventSumCurrent.InventDimId    = _inventSum.InventDimId;

            cacheInventSum.find(inventSumCurrent);

            this.checkInventSum(inventSumCurrent,_inventSum);
        
            cacheInventSum.del(inventSumCurrent);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventSumForWHSDisabledCWEnabledQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the <c>InventSum</c> calculation query for warehouse disabled, catch-weight enabled records.
    /// </summary>
    /// <returns>The created <c>InventTrans</c> <c>Query</c> instance.</returns>
    protected Query buildInventSumForWHSDisabledCWEnabledQuery()
    {
        Query inventTransStatusQuery = new Query();

        QueryBuildDataSource inventTransStatusQueryBuildDS = inventTransStatusQuery.addDataSource(tableNum(InventTrans));        
        InventSumReCalcItem::addInventTransSelectionCWFields(inventTransStatusQueryBuildDS);

        this.addInventTransSelectionFields(inventTransStatusQueryBuildDS);
        this.addInventTransGroupByFields(inventTransStatusQueryBuildDS);
        this.addInventTransRange(inventTransStatusQueryBuildDS);

        return inventTransStatusQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventSumForWHSDisabledCWDisabledQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the <c>InventSum</c> calculation query for warehouse disabled, catch-weight disabled records.
    /// </summary>
    /// <returns>The created <c>InventTrans</c> <c>Query</c> instance.</returns>
    protected Query buildInventSumForWHSDisabledCWDisabledQuery()
    {
        Query inventTransStatusQuery = new Query();

        QueryBuildDataSource inventTransStatusQueryBuildDS = inventTransStatusQuery.addDataSource(tableNum(InventTrans));

        this.addInventTransSelectionFields(inventTransStatusQueryBuildDS);
        this.addInventTransGroupByFields(inventTransStatusQueryBuildDS);
        this.addInventTransRange(inventTransStatusQueryBuildDS);

        return inventTransStatusQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventSumForWHSEnabledCWEnabledQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the <c>InventSum</c> calculation query for warehouse enabled, catch-weight enabled records.
    /// </summary>
    /// <returns>The created <c>InventTrans</c> <c>Query</c> instance.</returns>
    protected Query buildInventSumForWHSEnabledCWEnabledQuery()
    {
        Query inventTransStatusQuery = new Query();

        QueryBuildDataSource inventTransStatusQueryBuildDS = inventTransStatusQuery.addDataSource(tableNum(InventTrans));
        InventSumReCalcItem::addInventTransSelectionCWFields(inventTransStatusQueryBuildDS);        

        this.addInventTransSelectionFields(inventTransStatusQueryBuildDS);
        this.addInventTransGroupByFields(inventTransStatusQueryBuildDS);
        this.addInventTransRange(inventTransStatusQueryBuildDS);

        QueryBuildDataSource inventTransStatusOriginQueryBuildDS = inventTransStatusQueryBuildDS.addDataSource(tableNum(InventTransOrigin));
        inventTransStatusOriginQueryBuildDS.joinMode(JoinMode::InnerJoin);
        inventTransStatusOriginQueryBuildDS.addLink(fieldNum(InventTrans, InventTransOrigin), fieldNum(InventTransOrigin, RecId));

        inventTransStatusOriginQueryBuildDS.addGroupByField(fieldNum(InventTransOrigin, ReferenceCategory));

        this.addInventTransOriginRange(inventTransStatusOriginQueryBuildDS);

        return inventTransStatusQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventSumForWHSEnabledCWDisabledQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the <c>InventSum</c> calculation query for warehouse enabled, catch-weight disabled records.
    /// </summary>
    /// <returns>The created <c>InventTrans</c> <c>Query</c> instance.</returns>
    protected Query buildInventSumForWHSEnabledCWDisabledQuery()
    {
        Query inventTransStatusQuery = new Query();

        QueryBuildDataSource inventTransStatusQueryBuildDS = inventTransStatusQuery.addDataSource(tableNum(InventTrans));

        this.addInventTransSelectionFields(inventTransStatusQueryBuildDS);
        this.addInventTransGroupByFields(inventTransStatusQueryBuildDS);
        this.addInventTransRange(inventTransStatusQueryBuildDS);

        QueryBuildDataSource inventTransStatusOriginQueryBuildDS = inventTransStatusQueryBuildDS.addDataSource(tableNum(InventTransOrigin));
        inventTransStatusOriginQueryBuildDS.joinMode(JoinMode::InnerJoin);
        inventTransStatusOriginQueryBuildDS.addLink(fieldNum(InventTrans, InventTransOrigin), fieldNum(InventTransOrigin, RecId));
        inventTransStatusOriginQueryBuildDS.addGroupByField(fieldNum(InventTransOrigin, ReferenceCategory));

        this.addInventTransOriginRange(inventTransStatusOriginQueryBuildDS);

        return inventTransStatusQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventTransOriginRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds relevant ranges to the <c>InventTransOrigin</c> <c>QueryBuildDataSource</c> instance.
    /// </summary>
    /// <param name = "_inventTransOriginQueryBuildDS">The <c>QueryBuildDataSource</c> instance to add ranges to.</param>
    protected void addInventTransOriginRange(QueryBuildDataSource _inventTransOriginQueryBuildDS)
    {
        _inventTransOriginQueryBuildDS.addRange(fieldNum(InventTransOrigin, ItemId)).value(queryValue(itemId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventTransRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds relevant ranges to the <c>InventTrans</c> <c>QueryBuildDataSource</c> instance.
    /// </summary>
    /// <param name = "_inventTransQueryBuildDS">The <c>QueryBuildDataSource</c> instance to add ranges to.</param>
    protected void addInventTransRange(QueryBuildDataSource _inventTransQueryBuildDS)
    {
        _inventTransQueryBuildDS.addRange(fieldNum(InventTrans, ItemId)).value(queryValue(itemId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventTransSelectionFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds relevant selection fields to the warehouse disabled <c>InventTrans</c> <c>QueryBuildDataSource</c> instance.
    /// </summary>
    /// <param name = "_inventTransQueryBuildDS">The <c>QueryBuildDataSource</c> instance to add selection fields to.</param>
    protected void addInventTransSelectionFields(QueryBuildDataSource _inventTransQueryBuildDS)
    {
        if (refactorOnHandRecalcFlightActive)
        {
            InventSumReCalcItem::addInventTransSelectionFieldsBasedOnQueryType(_inventTransQueryBuildDS);
        }
        else
        {
            _inventTransQueryBuildDS.addSelectionField(fieldNum(InventTrans, Qty), SelectionField::Sum);
            _inventTransQueryBuildDS.addSelectionField(fieldNum(InventTrans, CostAmountPosted), SelectionField::Sum);
            _inventTransQueryBuildDS.addSelectionField(fieldNum(InventTrans, CostAmountAdjustment), SelectionField::Sum);
            _inventTransQueryBuildDS.addSelectionField(fieldNum(InventTrans, CostAmountSecCurPosted_RU), SelectionField::Sum);
            _inventTransQueryBuildDS.addSelectionField(fieldNum(InventTrans, CostAmountSecCurAdjustment_RU), SelectionField::Sum);
            _inventTransQueryBuildDS.addSelectionField(fieldNum(InventTrans, CostAmountSecCurPhysical_RU), SelectionField::Sum);
            _inventTransQueryBuildDS.addSelectionField(fieldNum(InventTrans, CostAmountPhysical), SelectionField::Sum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventTransGroupByFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds relevant group by fields to the <c>InventTrans</c> <c>QueryBuildDataSource</c> instance.
    /// </summary>
    /// <param name = "_inventTransQueryBuildDS">The <c>QueryBuildDataSource</c> instance to add group by fields to.</param>
    protected void addInventTransGroupByFields(QueryBuildDataSource _inventTransQueryBuildDS)
    {
        if (refactorOnHandRecalcFlightActive)
        {
            InventSumReCalcItem::addInventTransGroupByFieldsBasedOnQueryType(_inventTransQueryBuildDS);
        }
        else
        {
            _inventTransQueryBuildDS.addGroupByField(fieldNum(InventTrans, ItemId));
            _inventTransQueryBuildDS.addGroupByField(fieldNum(InventTrans, InventDimId));
            _inventTransQueryBuildDS.addGroupByField(fieldNum(InventTrans, StatusReceipt));
            _inventTransQueryBuildDS.addGroupByField(fieldNum(InventTrans, StatusIssue));
            _inventTransQueryBuildDS.addGroupByField(fieldNum(InventTrans, DatePhysical));
            _inventTransQueryBuildDS.addGroupByField(fieldNum(InventTrans, DateInvent));
            _inventTransQueryBuildDS.addGroupByField(fieldNum(InventTrans, DateExpected));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventSumCalcCWEnabledQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the <c>IntentSum</c> calculation query for catch-weight enabled records.
    /// </summary>
    /// <returns>The created <c>InventTrans</c> <c>Query</c> instance.</returns>
    protected Query buildInventSumCalcCWEnabledQuery()
    {
        if (this.isItemWHSEnabled())
        {
            return this.buildInventSumForWHSEnabledCWEnabledQuery();
        }
        else
        {
            return this.buildInventSumForWHSDisabledCWEnabledQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventSumCalcCWDisabledQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the <c>IntentSum</c> calculation query for catch-weight disabled records.
    /// </summary>
    /// <returns>The created <c>InventTrans</c> <c>Query</c> instance.</returns>
    protected Query buildInventSumCalcCWDisabledQuery()
    {
        if (this.isItemWHSEnabled())
        {
            return this.buildInventSumForWHSEnabledCWDisabledQuery();
        }
        else
        {
            return this.buildInventSumForWHSDisabledCWDisabledQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventSumCalcQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the <c>IntentSum</c> calculation query based on the <c>InventTrans</c> record and related <c>InventTransOrigin</c> record.
    /// </summary>
    /// <returns>The created <c>InventTrans</c> <c>Query</c> instance.</returns>
    protected Query buildInventSumCalcQuery()
    {
        if (#PdsCatchWeightEnabled)
        {
            return this.buildInventSumCalcCWEnabledQuery();
        }
        else
        {
            return this.buildInventSumCalcCWDisabledQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateActualInventSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the updated <c>InventSum</c> records.
    /// </summary>
    protected void updateActualInventSum()
    {
        if (!mustInventBeControlled)
        {
            return;
        }

        InventSum inventSum, inventSumWHSLocationAndBelow, inventSumWHSAllLevels;
        InventDimId lastDimId;
        InventTrans inventTransStatus;
        InventTransOrigin inventTransOrigin;

        boolean inventTransOriginExists = false;        

        Query query = this.buildInventSumCalcQuery();
        QueryRun queryRun = new QueryRun(query);

        if (query.dataSourceTable(tableNum(InventTransOrigin)))
        {
            inventTransOriginExists = true;
        }        

        var activity = logger.activity(methodStr(InventSumReCalcItem, updateActualInventSum)); 
        using (var activityContext = logger.activityContext(activity))
        {
            activityContext.addCustomProperty(tableStr(InventTable), int642Str(inventTable.RecId));
            activityContext.addCustomProperty(tableStr(CompanyInfo), int642Str(companyRecId));
            if (includeWarehouseInventoryTransactionsIntoCalculation)
            {
                warehouseInventoryTransactionSumReCalcItem = WHSInventoryTransactionSumReCalcItem::constructForItem(this.itemId);
                warehouseInventoryTransactionSumReCalcItem.calculate();
            }

            boolean wasInventSumModified;

            while (queryRun.next())
            {
                inventTransStatus = queryRun.get(tableNum(InventTrans));
            
                if (inventTransOriginExists)
                {
                    inventTransOrigin = queryRun.get(tableNum(InventTransOrigin));
                }     
  
                if (refactorOnHandRecalcFlightActive)
                {
                    lastDimId = this.processInventTrans(inventTransStatus, inventTransOrigin, inventSum, inventSumWHSLocationAndBelow, inventSumWHSAllLevels, lastDimId, wasInventSumModified);
                } 
                else
                {                         
                    if (wasInventSumModified && inventTransStatus.InventDimId != lastDimId)
                    {
                        this.insertUpdatedInventSum(inventSum, inventSumWHSLocationAndBelow, inventSumWHSAllLevels, lastDimId);
                        inventSum.clear();
                    }

                    lastDimId = inventTransStatus.InventDimId;
                    inventSum.addInventTransQtyOnSum(inventTransStatus);

                    if (inventTransStatus.StatusReceipt != StatusReceipt::None)
                    {
                        inventSum.addInventTransDatesOnSum(inventTransStatus);
                    }

                    inventSum.addInventTransValuesOnSumWithoutRoundOff(inventTransStatus);

                    if (this.mustUpdateWHSInventReserve(inventTransOrigin.ReferenceCategory))
                    {
                        if (WHSInvent::transTypeOnlyAffectsLocationAndBelow(inventTransOrigin.ReferenceCategory))
                        {
                            this.updateWHSInventSum(inventSumWHSLocationAndBelow, inventTransStatus);
                        }
                        else
                        {
                            this.updateWHSInventSum(inventSumWHSAllLevels, inventTransStatus);
                        }
                    }
                }

                wasInventSumModified = true;
            }

            // Handle the last iteration
            if (wasInventSumModified)
            {
                this.insertUpdatedInventSum(inventSum, inventSumWHSLocationAndBelow, inventSumWHSAllLevels, lastDimId);
            }

            // Handle inventory dimensions described only by new warehouse inventory transactions
            if (includeWarehouseInventoryTransactionsIntoCalculation)
            {
                wasInventSumModified = this.handleRemainingWarehouseInventoryTransactions() || wasInventSumModified;
            }

            // We need to do this when are done with all the processing of the transactions since a transaction can result in inserts of multiple WHSInventReserveDelta records with the same dimId
            if (wasInventSumModified)
            {
                this.insertAndCheckWHSInventReserveFromDelta(itemId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleRemainingWarehouseInventoryTransactions</Name>
				<Source><![CDATA[
    private boolean handleRemainingWarehouseInventoryTransactions()
    {
        boolean wasAnyWarehouseTransactionProcessed;
        var calculatedSum = warehouseInventoryTransactionSumReCalcItem.getCalculatedSum();
        var calculatedSumsEnumerator = calculatedSum.getEnumerator();
        while (calculatedSumsEnumerator.moveNext())
        {
            WHSInventoryTransactionInventorySumDescriptor sumDescriptor = calculatedSumsEnumerator.currentValue();

            if (sumDescriptor.isNonZero())
            {
                this.insertInventSumFromInventoryTransactionInventorySumDescriptor(sumDescriptor);
            }
            wasAnyWarehouseTransactionProcessed = true;
        }

        return wasAnyWarehouseTransactionProcessed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInventTrans</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventDimId processInventTrans(
        InventTrans _inventTransStatus,
        InventTransOrigin _inventTransOrigin,
        InventSum _inventSum,
        InventSum _inventSumWHSLocationAndBelow,
        InventSum _inventSumWHSAllLevels,
        InventDimId _lastDimId,
        boolean _wasInventSumModified)
    {
        if (_wasInventSumModified && _inventTransStatus.InventDimId != _lastDimId)
        {
            this.insertUpdatedInventSum(_inventSum, _inventSumWHSLocationAndBelow, _inventSumWHSAllLevels, _lastDimId);
            _inventSum.clear();
        }

        _lastDimId = _inventTransStatus.InventDimId;
        _inventSum.addInventTransQtyOnSum(_inventTransStatus);

        if (_inventTransStatus.StatusReceipt != StatusReceipt::None)
        {
            _inventSum.addInventTransDatesOnSum(_inventTransStatus);
        }

        _inventSum.addInventTransValuesOnSumWithoutRoundOff(_inventTransStatus);

        if (this.mustUpdateWHSInventReserve(_inventTransOrigin.ReferenceCategory))
        {
            if (WHSInvent::transTypeOnlyAffectsLocationAndBelow(_inventTransOrigin.ReferenceCategory))
            {
                this.updateWHSInventSum(_inventSumWHSLocationAndBelow, _inventTransStatus);
            }
            else
            {
                this.updateWHSInventSum(_inventSumWHSAllLevels, _inventTransStatus);
            }
        }

        return _lastDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertUpdatedInventSum</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void insertUpdatedInventSum(InventSum _inventSum, InventSum _inventSumWHSLocationAndBelow, InventSum _inventSumWHSAllLevels, InventDimId _lastDimId)
    {
        _inventSum.ItemId = itemId;
        _inventSum.InventDimId = _lastDimId;

        if (includeWarehouseInventoryTransactionsIntoCalculation && warehouseInventoryTransactionSumReCalcItem)
        {
            warehouseInventoryTransactionSumReCalcItem.updateInventSums(_lastDimId, _inventSum, _inventSumWHSLocationAndBelow, _inventSumWHSAllLevels);
        }

        if (this.isItemWHSEnabled())
        {
            this.insertWHSInventReserveDeltaSums(itemId, _lastDimId, _inventSumWHSLocationAndBelow, _inventSumWHSAllLevels);
        }

        if (checkFix == CheckFix::Fix)
        {            
            _inventSum.insert();         
        }

        this.testSum(_inventSum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInventSumFromInventoryTransactionInventorySumDescriptor</Name>
				<Source><![CDATA[
    private void insertInventSumFromInventoryTransactionInventorySumDescriptor(WHSInventoryTransactionInventorySumDescriptor _sumDescriptor)
    {
        InventSum inventSum, inventSumWHSLocationAndBelow, emptyInventSumWHSAllLevels;
        _sumDescriptor.initInventSum(inventSum, itemId);
        _sumDescriptor.initInventSum(inventSumWHSLocationAndBelow, itemId);
        inventSumWHSLocationAndBelow.setAvailFields();

        this.insertWHSInventReserveDeltaSums(itemId, _sumDescriptor.InventDimId, inventSumWHSLocationAndBelow, emptyInventSumWHSAllLevels);

        if (checkFix == CheckFix::Fix)
        {
            inventSum.insert();
        }

        this.testSum(inventSum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWHSInventSum</Name>
				<Source><![CDATA[
    private void updateWHSInventSum(InventSum _inventSumWHS, InventTrans _inventTrans)
    {
        // We only care about quantities for the WHS updates
        _inventSumWHS.addInventTransQtyOnSum(_inventTrans);
        _inventSumWHS.setAvailFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateWHSInventReserve</Name>
				<Source><![CDATA[
    private boolean mustUpdateWHSInventReserve(InventTransType _transType)
    {
        return WhsInvent::mustUpdateWHSInventReserve(_transType)
            && this.isItemWHSEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    public void updateNow()
    {
        #OCCRetryCount

        try
        {
            ttsbegin;

            if (mustInventBeControlled)
            {
                this.loadCurrentInventSum();
                this.updateActualInventSum();
                this.searchRemainInventSum();
            }
            else
            {
                this.deleteInventSum();
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFastRecalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new instance of the <c>InventSumReCalcItem</c> class that will do the recalculation in the fastest possible way.
    /// </summary>
    /// <param name = "_itemId">The item ID to recalculate on-hand for.</param>
    /// <returns>A new instance of the <c>InventSumReCalcItem</c> class.</returns>
    /// <remarks>Some operations will be done set-based which might lead to table locks on the <c>InventSum</c> and <c>WHSInventReserve</c> tables.</remarks>
    public static InventSumReCalcItem newFastRecalculation(ItemId _itemId)
    {
        InventSumReCalcItem recalcItem = new InventSumReCalcItem(_itemId, false, CheckFix::Fix);

        return recalcItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransGroupByFieldsList</Name>
				<Source><![CDATA[
    public static List inventTransGroupByFieldsList()
    {
        List list = new List(Types::Integer);

        list.addEnd(fieldNum(InventTrans, ItemId));
        list.addEnd(fieldNum(InventTrans, InventDimId));
        list.addEnd(fieldNum(InventTrans, StatusReceipt));
        list.addEnd(fieldNum(InventTrans, StatusIssue));
        list.addEnd(fieldNum(InventTrans, DatePhysical));
        list.addEnd(fieldNum(InventTrans, DateInvent));
        list.addEnd(fieldNum(InventTrans, DateExpected));       
   
        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventTransGroupByFieldsBasedOnQueryType</Name>
				<Source><![CDATA[
    private static void addInventTransGroupByFieldsBasedOnQueryType(anytype _query)
    {
        List list = InventSumReCalcItem::inventTransGroupByFieldsList();
        ListEnumerator le = list.getEnumerator();

        if (_query is QueryBuildDataSource)
        {
            QueryBuildDataSource _inventTransQueryBuildDS = _query as QueryBuildDataSource;

            while (le.moveNext())
            {
                int currentFieldId = le.current();

                _inventTransQueryBuildDS.addGroupByField(currentFieldId);
            }           
        }
        else if (_query is SysDaQueryObject)
        {
            SysDaQueryObject inventTransQueryObject = _query as SysDaQueryObject;

            while (le.moveNext())
            {
                int currentFieldId = le.current();

                inventTransQueryObject.groupByClause().add(fieldId2Name(tableNum(InventTrans), currentFieldId));
            }
        }
        else
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransSelectionFieldsList</Name>
				<Source><![CDATA[
    public static List inventTransSelectionFieldsList()
    {
        List list = new List(Types::Integer);

        list.addEnd(fieldNum(InventTrans, Qty));
        list.addEnd(fieldNum(InventTrans, CostAmountPosted));
        list.addEnd(fieldNum(InventTrans, CostAmountAdjustment));
        list.addEnd(fieldNum(InventTrans, CostAmountSecCurPosted_RU));
        list.addEnd(fieldNum(InventTrans, CostAmountSecCurAdjustment_RU));
        list.addEnd(fieldNum(InventTrans, CostAmountSecCurPhysical_RU));
        list.addEnd(fieldNum(InventTrans, CostAmountPhysical));     
   
        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventTransSelectionFieldsBasedOnQueryType</Name>
				<Source><![CDATA[
    private static void addInventTransSelectionFieldsBasedOnQueryType(anytype _query)
    {       
        List list = InventSumReCalcItem::inventTransSelectionFieldsList();
        ListEnumerator le = list.getEnumerator();

        if (_query is QueryBuildDataSource)
        {
            QueryBuildDataSource _inventTransQueryBuildDS = _query as QueryBuildDataSource;

            while (le.moveNext())
            {
                int currentFieldId = le.current();

                _inventTransQueryBuildDS.addSelectionField(currentFieldId, SelectionField::Sum);                
            }           
        }
        else if (_query is SysDaQueryObject)
        {
            SysDaQueryObject inventTransQueryObject = _query as SysDaQueryObject;            

            while (le.moveNext())
            {
                int currentFieldId = le.current();                

                inventTransQueryObject.projection().addSum(fieldId2Name(tableNum(InventTrans), currentFieldId));            
            }    
        }
        else
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventTransSelectionCWFields</Name>
				<Source><![CDATA[
    private static void addInventTransSelectionCWFields(anytype _query)
    {
        if (_query is QueryBuildDataSource)
        {
            QueryBuildDataSource _inventTransQueryBuildDS = _query as QueryBuildDataSource;

            _inventTransQueryBuildDS.addSelectionField(fieldNum(InventTrans, PdsCWQty), SelectionField::Sum);
        }
        else if (_query is SysDaQueryObject)
        {
            SysDaQueryObject inventTransQueryObject = _query as SysDaQueryObject;

            inventTransQueryObject.projection()
            .addSum(fieldStr(InventTrans, PdsCWQty));
        }
        else
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }  
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventTransOriginGroupByFields</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static void addInventTransOriginGroupByFields(anytype _query)
    {
        if (_query is QueryBuildDataSource)
        {
            QueryBuildDataSource _inventTransOriginQueryBuildDS = _query as QueryBuildDataSource;

            _inventTransOriginQueryBuildDS.addGroupByField(fieldNum(InventTransOrigin, ReferenceCategory));
        }
        else if (_query is SysDaQueryObject)
        {
            SysDaQueryObject inventTransOriginQueryObject = _query as SysDaQueryObject;

            inventTransOriginQueryObject.groupByClause()
                .add(fieldStr(InventTransOrigin, ReferenceCategory));
        }
        else
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventTransQueryForWHSEnabledCWEnabledQuery</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static void buildInventTransQueryForWHSEnabledCWEnabledQuery(SysDaQueryObject _inventTransQueryObject)
    {
        InventSumReCalcItem::addInventTransGroupByFieldsBasedOnQueryType(_inventTransQueryObject);
        InventSumReCalcItem::addInventTransSelectionFieldsBasedOnQueryType(_inventTransQueryObject);
        InventSumReCalcItem::addInventTransSelectionCWFields(_inventTransQueryObject);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>