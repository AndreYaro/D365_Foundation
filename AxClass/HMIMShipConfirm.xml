<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMIMShipConfirm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// HMIMShipConfirm class is used to validate and generate Hazardous MultiModal Dangerous Goods,
/// Carriage of Merchandise by Road and Shipper's Declaration reports
/// </summary>
final class HMIMShipConfirm
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        HMIMShipConfirmAction action = _args.parmEnum();
        WHSShipmentTable shipmentTable = _args.record() as WHSShipmentTable;

        if (!shipmentTable.RecId
           && _args.record()
           && _args.dataset() == tableNum(WHSLoadTable))
        {
            WHSLoadTable loadTable = _args.record();
            while select shipmentTable
                where shipmentTable.LoadId == loadTable.LoadId
            {
                HMIMShipConfirm::performActionOnBuffer(action, shipmentTable);
            }
        }
        else
        {
            HMIMShipConfirm::performActionOnBuffer(action, shipmentTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>performActionOnBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints Hazardous Reporting document for a shipment based on ShipConfirmAction
    /// </summary>
    /// <param name="_action">
    /// HMIMShipConfirmAction indicating the report to print
    /// </param>
    /// <param name="_common">
    /// WHSShipmentTable Record
    /// </param>
    public static void performActionOnBuffer(HMIMShipConfirmAction _action, Common _common)
    {
        if (!_common)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        if (_common is WHSShipmentTable)
        {
            WHSShipmentTable shipmentTable = _common as WHSShipmentTable;

            switch (_action)
            {
                case HMIMShipConfirmAction::PrintCarrOfMerchByRoad:
                    HMIMShipConfirm::construct().printCarrOfMerchByRoad(shipmentTable.ShipmentId);
                    break;

                case HMIMShipConfirmAction::PrintMultiModalDG:
                    HMIMShipConfirm::construct().printMultimodalDG(shipmentTable.ShipmentId);
                    break;

                case HMIMShipConfirmAction::PrintShippersDeclaration:
                    HMIMShipConfirm::construct().printShippersDeclaration(shipmentTable.ShipmentId);
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>HMIMShipConfirm </c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>HMIMShipConfirm</c> class.
    /// </returns>
    public static HMIMShipConfirm construct()
    {
        return new HMIMShipConfirm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>printMultimodalDG</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints Multimodal Dangerous Goods document for a shipment
    /// </summary>
    /// <param name="_shipmentId">
    /// Shipment for which we want to print MMDG document
    /// </param>
    private void printMultimodalDG(WHSShipmentId _shipmentId)
    {
        if (HMIMShipConfirm::isEnabledForShipment(WHSShipmentTable::find(_shipmentId)))
        {
            this.runMultimodalDG(_shipmentId);
        }
        else
        {         
            warning(strFmt("@SCM:MultimodalDGPrintError", _shipmentId, WHSShipmentTable::find(_shipmentId).ShipmentStatus));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printCarrOfMerchByRoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints Carriage of Merchandise by Road document for a shipment
    /// </summary>
    /// <param name="_shipmentId">
    /// Shipment for which we want to print CMR document
    /// </param>
    private void printCarrOfMerchByRoad(WHSShipmentId _shipmentId)
    {
        if (HMIMShipConfirm::isEnabledForShipment(WHSShipmentTable::find(_shipmentId)))
        {
            this.runCarrOfMerchByRoad(_shipmentId);
        }
        else
        {    
            warning(strFmt("@SCM:CarrOfMerchByRoadPrintError", _shipmentId, WHSShipmentTable::find(_shipmentId).ShipmentStatus));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printShippersDeclaration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints Shipper's Declaration document for a shipment
    /// </summary>
    /// <param name="_shipmentId">
    /// Shipment for which we want to print BOL document
    /// </param>
    private void printShippersDeclaration(WHSShipmentId _shipmentId)
    {
        if (HMIMShipConfirm::isEnabledForShipment(WHSShipmentTable::find(_shipmentId)))
        {
            this.runShippersDeclaration(_shipmentId);
        }
        else
        {
            warning(strFmt("@SCM:ShippersDeclarationPrintError", _shipmentId, WHSShipmentTable::find(_shipmentId).ShipmentStatus));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabledForShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if print report should be enabled for the Shipment
    /// </summary>
    /// <param name="_whsShipmentTable">
    /// Shipment for which we want to print the report
    /// </param>
    /// <returns>
    /// true based on status; otherwise, false
    /// </returns>
    public static boolean isEnabledForShipment(WHSShipmentTable _whsShipmentTable)
    {
        return _whsShipmentTable.ShipmentId
            && ((_whsShipmentTable.ShipmentStatus == WHSShipmentStatus::Waved) 
                || (_whsShipmentTable.ShipmentStatus == WHSShipmentStatus::Loaded)
                || (_whsShipmentTable.ShipmentStatus == WHSShipmentStatus::Shipped) 
                || (_whsShipmentTable.ShipmentStatus == WHSShipmentStatus::InProcess));
    }

]]></Source>
			</Method>
			<Method>
				<Name>runMultimodalDG</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs print Multimodal Dangerous Goods document for a particular shipment
    /// </summary>
    /// <param name="_shipmentId">
    /// Shipment that we will run through the print MMDG process
    /// </param>
    private void runMultimodalDG(WHSShipmentId _shipmentId)
    {
        this.updateMultimodalDGForShipment(_shipmentId);
        this.constructMultimodalDG(_shipmentId);
        
        if (_shipmentId)
        {
            HMIMMultimodalDG multimodalDG;
            
            select firstonly multimodalDG
                where multimodalDG.ShipmentId == _shipmentId;

            MenuFunction multimodalDGController = new MenuFunction(menuitemOutputStr(HMIMMultimodalDG), MenuItemType::Output);
            Args args = new Args();
            args.caller(this);
            args.parmEnum(NoYes::No); // do not show the print dialog
            args.record(multimodalDG);
            multimodalDGController.run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMultimodalDGForShipment</Name>
				<Source><![CDATA[
    private void updateMultimodalDGForShipment(WHSShipmentId _shipmentId)
    {
        WHSShipmentTable shipmentTable = WHSShipmentTable::find(_shipmentId, true);

        ttsbegin;

        if (shipmentTable.RecId && !shipmentTable.HMIMMultimodalDGId)
        {
            shipmentTable.HMIMSetMultimodalDGId();
            shipmentTable.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructMultimodalDG</Name>
				<Source><![CDATA[
    private void constructMultimodalDG(WHSShipmentId _shipmentId)
    {
        WHSShipmentTable shipmentTable = WHSShipmentTable::find(_shipmentId);
        boolean constructMMDGData       = false;
       
        if (HMIMMultimodalDG::exist(shipmentTable.HMIMMultimodalDGId))
        {
            if (Box::yesNo(strFmt("@SCM:MultimodalDangerousGoodsRegenerateConfirm", shipmentTable.ShipmentId), DialogButton::No, "@SCM:Regenerate") == DialogButton::Yes)
            {
                constructMMDGData = true;
            }
        }
        else
        {
            constructMMDGData = true;
        }

        ttsbegin;

        if(constructMMDGData)
        {
            HMIMMultimodalDGDataUtil documentDataUtil = HMIMMultimodalDGDataUtil::construct();
            documentDataUtil.parmShipmentCriteria(shipmentTable);
            documentDataUtil.populateMMDGConsignmentTables();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCarrOfMerchByRoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs print Carriage of Merchandise by Road for a particular shipment
    /// </summary>
    /// <param name="_shipmentId">
    /// Shipment that we will run through the print CMR process
    /// </param>
    private void runCarrOfMerchByRoad(WHSShipmentId _shipmentId)
    {
        this.updateCarrOfMerchByRoadForShipment(_shipmentId);
        this.constructCarrOfMerchByRoad(_shipmentId);

        if (_shipmentId)
        {
            HMIMCarrOfMerchByRoad carrOfMerchByRoad;
            
            select firstonly carrOfMerchByRoad
                where carrOfMerchByRoad.ShipmentId == _shipmentId;
            
            MenuFunction carrOfMerchByRoadController = new MenuFunction(menuitemOutputStr(HMIMCarrOfMerchByRoad), MenuItemType::Output);
            Args args = new Args();
            args.caller(this);
            args.parmEnum(NoYes::No); // do not show the print dialog
            args.record(carrOfMerchByRoad);
            carrOfMerchByRoadController.run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCarrierFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate shipping carrier fields
    /// </summary>
    /// <param name="_shipmentTable">Shipment that will be validated.</param>
    /// <returns>true if carrier fields are valid; otherwise, false</returns>
    protected boolean validateCarrierFields(WHSShipmentTable _shipmentTable)
    {
        return _shipmentTable.CarrierCode && _shipmentTable.CarrierServiceCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCarrOfMerchByRoadForShipment</Name>
				<Source><![CDATA[
    private void updateCarrOfMerchByRoadForShipment(WHSShipmentId _shipmentId)
    {
        WHSShipmentTable shipmentTable = WHSShipmentTable::find(_shipmentId, true);

        if (!this.validateCarrierFields(shipmentTable))
        {
            throw error("@SCM:ShippingTextCheck");
        }

        ttsbegin;

        if (shipmentTable.RecId && !shipmentTable.HMIMCarrOfMerchByRoadId)
        {
            shipmentTable.HMIMSetCarrOfMerchByRoadId();
            shipmentTable.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructCarrOfMerchByRoad</Name>
				<Source><![CDATA[
    private void constructCarrOfMerchByRoad(WHSShipmentId _shipmentId)
    {
        WHSShipmentTable shipmentTable = WHSShipmentTable::find(_shipmentId);
        boolean constructCMRData       = false;
       
        if (HMIMCarrOfMerchByRoad::exist(shipmentTable.HMIMCarrOfMerchByRoadId))
        {
            if (Box::yesNo(strFmt("@SCM:CarrOfMerchByRoadRegenerateConfirm", shipmentTable.ShipmentId), DialogButton::No, "@SCM:Regenerate") == DialogButton::Yes)
            {
                constructCMRData = true;
            }
        }
        else
        {
            constructCMRData = true;
        }

        ttsbegin;

        if (constructCMRData)
        {
            HMIMCarrOfMerchByRoadDataUtil documentDataUtil = HMIMCarrOfMerchByRoadDataUtil::construct();
            documentDataUtil.parmShipmentCriteria(shipmentTable);
            documentDataUtil.populateCarrOfMerchByRoadTables();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runShippersDeclaration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs print Shipper's Declaration for a particular shipment
    /// </summary>
    /// <param name="_shipmentId">
    /// Shipment that we will run through the print Shipper's Declaration process
    /// </param>
    private void runShippersDeclaration(WHSShipmentId _shipmentId)
    {
        this.updateShipperDeclarationForShipment(_shipmentId);
        this.constructShipperDeclaration(_shipmentId);

        if (_shipmentId)
        {
            HMIMShipperDeclaration shipperDeclaration;
            
            select firstonly shipperDeclaration
                where shipperDeclaration.ShipmentId == _shipmentId;
            
            MenuFunction shipperDeclarationController = new MenuFunction(menuitemOutputStr(HMIMShipperDeclaration), MenuItemType::Output);
            Args args = new Args();
            args.caller(this);
            args.parmEnum(NoYes::No); // do not show the print dialog
            args.record(shipperDeclaration);
            shipperDeclarationController.run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateShipperDeclarationForShipment</Name>
				<Source><![CDATA[
    private void updateShipperDeclarationForShipment(WHSShipmentId _shipmentId)
    {
        WHSShipmentTable shipmentTable = WHSShipmentTable::find(_shipmentId, true);
        
        if (!shipmentTable.CarrierCode || !shipmentTable.CarrierServiceCode)
        {
            throw error("@SCM:ShippingTextCheck");
        }

        ttsbegin;

        if (shipmentTable.RecId && !shipmentTable.HMIMAirWaybillNum)
        {
            shipmentTable.HMIMSetAirWayBillId();
            shipmentTable.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructShipperDeclaration</Name>
				<Source><![CDATA[
    private void constructShipperDeclaration(WHSShipmentId _shipmentId)
    {
        WHSShipmentTable shipmentTable   = WHSShipmentTable::find(_shipmentId);
        boolean constructShippersDecData = false;
       
        if (HMIMShipperDeclaration::exist(shipmentTable.HMIMAirWaybillNum))
        {
            if (Box::yesNo(strFmt("@SCM:ShippersDeclarationRegenerateConfirm", shipmentTable.ShipmentId), DialogButton::No, "@SCM:Regenerate") == DialogButton::Yes)
            {
                constructShippersDecData = true;
            }
        }
        else
        {
            constructShippersDecData = true;
        }

        ttsbegin;

        if (constructShippersDecData)
        {
            HMIMShipperDeclarationDataUtil documentDataUtil = HMIMShipperDeclarationDataUtil::construct();
            documentDataUtil.parmShipmentCriteria(shipmentTable);
            documentDataUtil.populateShipperDeclarationTables();
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>