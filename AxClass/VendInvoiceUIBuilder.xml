<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendInvoiceUIBuilder</c> class is responsible for building an input dialog for the <c>VendInvoice</c> report.
/// </summary>
/// <remarks>
/// It adds custom lookups for dimension focus field.
/// </remarks>
public class VendInvoiceUIBuilder extends SrsReportDataContractUIBuilder
{
    boolean holdValue;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>lookupDimensionFocus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a dimension set lookup.
    /// </summary>
    /// <param name="_control">
    /// The dimension set control.
    /// </param>
    /// <remarks>
    /// This method uses the <c>DimensionHierarchy</c> table for lookup.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void lookupDimensionFocus(FormStringControl _control)
    {
        DimensionHierarchyHelper::lookupDimensionSet(_control);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedShowDaysPastDue</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean modifiedShowDaysPastDue(boolean _value)
    {
        FormDateControl formDateControl = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(VendInvoiceContract, parmReportingDate)).control();
        FormCheckBoxControl formCheckBoxControl = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(VendInvoiceContract, parmShowDaysPastDue)).control();

        holdValue = formCheckBoxControl.value();
        formDateControl.enabled(formCheckBoxControl.value());

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedInvoiceType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean modifiedInvoiceType(boolean _value)
    {
        FormComboBoxControl formComboBoxControl = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(VendInvoiceContract, parmInvoiceType)).control();
        FormCheckBoxControl formCheckBoxControl = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(VendInvoiceContract, parmShowDaysPastDue)).control();
        FormDateControl formDateControl = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(VendInvoiceContract, parmReportingDate)).control();

        if (formComboBoxControl.selection() == OpenPaidBoth::Paid)
        {
            holdValue = formCheckBoxControl.value();
            formCheckBoxControl.value(false);
            formCheckBoxControl.enabled(false);
        }
        else
        {
            formCheckBoxControl.enabled(true);
            formCheckBoxControl.value(holdValue);
        }

        formDateControl.enabled(formComboBoxControl.selection() != OpenPaidBoth::Paid && formCheckBoxControl.value());

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postBuild</Name>
				<Source><![CDATA[
    public void postBuild()
    {
        DialogField dimensionFocus;

        super();

        // From binding info, get the dialog field for dimension attribute and add button
        dimensionFocus = this.bindInfo().getDialogField(
            this.dataContractObject(),
            methodstr(VendInvoiceContract, parmDimensionFocus));

        if (dimensionFocus)
        {
            dimensionFocus.lookupButton(2);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    public void postRun()
    {
        Dialog dialogLocal = this.dialog();
        DialogField dialogField;
        FormDateControl formDateControl;
        FormCheckBoxControl formCheckBoxControl;
        FormComboBoxControl formComboBoxControl;
        Object dataContract = this.dataContractObject();

        super();

        // This method should be called in order to handle events on dialogs.
        dialogLocal.dialogForm().formRun().controlMethodOverload(false);

        formComboBoxControl = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(VendInvoiceContract, parmInvoiceType)).control();
        formDateControl = this.bindInfo().getDialogField(dataContract, methodStr(VendInvoiceContract, parmReportingDate)).control();
        formCheckBoxControl = this.bindInfo().getDialogField(dataContract, methodStr(VendInvoiceContract, parmShowDaysPastDue)).control();

        if (formComboBoxControl.selection() == OpenPaidBoth::Paid)
        {
            formCheckBoxControl.enabled(false);
            formCheckBoxControl.value(false);
            holdValue = false;
            formDateControl.enabled(false);
        }
        else
        {
            formCheckBoxControl.enabled(true);
            holdValue = formCheckBoxControl.value();
            formDateControl.enabled(formCheckBoxControl.value());
        }

        dialogField = this.bindInfo().getDialogField(
            dataContract,
            methodstr(VendInvoiceContract, parmDimensionFocus));

        dialogField.registerOverrideMethod(
            methodstr(FormStringControl, lookup),
            methodstr(VendInvoiceUIBuilder, lookupDimensionFocus),
            this);

        dialogField = this.bindInfo().getDialogField(
            dataContract,
            methodStr(VendInvoiceContract, parmShowDaysPastDue));

        dialogField.registerOverrideMethod(
            methodStr(FormCheckBoxControl, modified),
            methodStr(VendInvoiceUIBuilder, modifiedShowDaysPastDue),
            this);

        dialogField = this.bindInfo().getDialogField(
            dataContract,
            methodStr(VendInvoiceContract, parmInvoiceType));

        dialogField.registerOverrideMethod(
            methodStr(FormComboBoxControl, modified),
            methodStr(VendInvoiceUIBuilder, modifiedInvoiceType),
            this);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>