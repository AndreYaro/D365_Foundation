<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerJournalValidateTaxAccountEntries</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// Validates the subledger journal tax entries are linked with source document line and there is no orphan tax record that exists
/// </summary>
[ExportMetadataAttribute(classstr(SubledgerJournalValidateTaxAccountEntries), identifierStr(''))]
[ExportMetadataAttribute(identifierStr('SourceDocumentDataConsistencyValidators'), identifierStr(''))]
[ExportAttribute('Microsoft.Dynamics.AX.Application.SubledgerJournalizerDocumentValidationIProvider')]
internal final class SubledgerJournalValidateTaxAccountEntries implements SubledgerJournalizerDocumentValidationIProvider
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the subledger journal tax entries are linked with source document line and there is no orphan tax record that exists
    /// </summary>
    /// <param name = "_accountingEvent">The accounting event for the journalization task using source document accounting processor</param>
    /// <param name = "_voucher">The voucher used for the posting to ledger; if no accounting is generated then this will be blank</param>
    /// <param name = "_sourceDocumentLineSubmittedForProcessing">All the source document lines that are submitted to source document accounting processor</param>
    /// <param name = "_accountingDistributionTmpForValidation">Accounting distribution detail for the document submitted for processing</param>
    /// <param name = "_subledgerJournalAccountEntryTmpForValidation">Detail accounting of the voucher that is getting posted</param>
    [Hookable(false)]
    void validateDocument(
        AccountingEvent _accountingEvent,
        Voucher _voucher,
        SourceDocumentLineRecIdTmp _sourceDocumentLineSubmittedForProcessing,
        AccountingDistributionTmpForValidation _accountingDistributionTmpForValidation,
        SubledgerJournalAccountEntryTmpForValidation _subledgerJournalAccountEntryTmpForValidation)
    {
        if (FeatureStateProvider::isFeatureEnabled(SourceDocumentValidateTaxSourceDocumentLineLink::instance()))
        {
            SourceDocumentLine sourceDocumentLine;
            
            SourceDocumentLineRecIdTmp sourceDocumentLineRecIdTmpLocal;

            sourceDocumentLineRecIdTmpLocal.linkPhysicalTableInstance(_sourceDocumentLineSubmittedForProcessing);

            while select SourceRelationType from sourceDocumentLineRecIdTmpLocal
                group by SourceRelationType
            where (sourceDocumentLineRecIdTmpLocal.SourceRelationType == tableNum(TaxUncommitted) ||
                    sourceDocumentLineRecIdTmpLocal.SourceRelationType == tableNum(TaxTrans))
            {
                if (sourceDocumentLineRecIdTmpLocal.SourceRelationType == tableNum(TaxUncommitted))
                {
                    this.validateSourceDocumentLineLinkForTaxUncommitted(
                        _accountingEvent,
                        _sourceDocumentLineSubmittedForProcessing,
                        _accountingDistributionTmpForValidation);

                    this.validateAccountingDistributionForTaxUncommitted(
                        _accountingEvent,
                        _sourceDocumentLineSubmittedForProcessing);
                }
                else
                {
                    this.validateSourceDocumentLineLinkForTaxTrans(
                        _accountingEvent,
                        _sourceDocumentLineSubmittedForProcessing,
                        _accountingDistributionTmpForValidation);

                    this.validateAccountingDistributionForTaxTrans(
                        _accountingEvent,
                        _sourceDocumentLineSubmittedForProcessing);
                }
            }

            if (TaxWithholdingDataConsistencyCheckToggle_IN::isTaxWHTPostCheckAccountingDistributionExistsEnabled() && TaxWithholdParameters_IN::checkTaxParameters())
            {
                this.validateAccountingDistributionForWHT_IN(_accountingEvent, _accountingDistributionTmpForValidation);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSourceDocumentLineLinkForTaxUncommitted</Name>
				<Source><![CDATA[
    private void validateSourceDocumentLineLinkForTaxUncommitted(
        AccountingEvent _accountingEvent,
        SourceDocumentLineRecIdTmp _sourceDocumentLineSubmittedForProcessing,
        AccountingDistributionTmpForValidation _accountingDistributionTmpForValidation)
    {
        using (SysInstrumentationActivityContext activityContext = SourceDocumentAccountingFrameworkInstrumentationLogger::getActivityContext(
                SourceDocumentInstrumentationConstants::SourceDocumentValidationFrameworkNamespace,
                classStr(SubledgerJournalValidateTaxAccountEntries),
                'ValidateSourceDocumentLineLinkForTaxUncommitted'))
        {
            TaxUncommitted taxUncommitted;
        
            //Check if there is a tax uncommitted record with orphan source document line record (This is for documents who does not post accounting)
            select firstonly crosscompany SourceDocumentLineRecId, SourceDocumentHeader, SourceRelationType from _sourceDocumentLineSubmittedForProcessing
                where _sourceDocumentLineSubmittedForProcessing.SourceRelationType == tableNum(TaxUncommitted) &&
                    _sourceDocumentLineSubmittedForProcessing.SourceDocumentHeader == _accountingEvent.SourceDocumentHeader
            notexists join taxUncommitted
                where taxUncommitted.SourceDocumentLine == _sourceDocumentLineSubmittedForProcessing.SourceDocumentLineRecId;
        
            if (_sourceDocumentLineSubmittedForProcessing.SourceDocumentLineRecId != 0)
            {
                //log telemetry that the tax lines are orphan
                activityContext.addCustomProperty('ValidationResult', 'Fail');

                activityContext.addCustomProperty(
                    'Message', SourceDocumentInstrumentationConstants::ErrorWhileValidatingTaxUncommittedEntriesForDocument);

                activityContext.addCustomProperty(
                    'SourceDocumentHeader', int642Str(_accountingEvent.SourceDocumentHeader));

                activityContext.addCustomProperty(
                    'AccountingEvent', int642Str(_accountingEvent.RecId));

                if (FeatureStateProvider::isFeatureEnabled(EnableSourceDocumentValidationFramework::instance()))
                {
                    throw error("@SourceDocumentAccountingFramework:ErrorMessageForValidatingTaxEntriesDuringJournalization");
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSourceDocumentLineLinkForTaxTrans</Name>
				<Source><![CDATA[
    private void validateSourceDocumentLineLinkForTaxTrans(
        AccountingEvent _accountingEvent,
        SourceDocumentLineRecIdTmp _sourceDocumentLineSubmittedForProcessing,
        AccountingDistributionTmpForValidation _accountingDistributionTmpForValidation)
    {
        using (SysInstrumentationActivityContext activityContext = SourceDocumentAccountingFrameworkInstrumentationLogger::getActivityContext(
                SourceDocumentInstrumentationConstants::SourceDocumentValidationFrameworkNamespace,
                classStr(SubledgerJournalValidateTaxAccountEntries),
                'ValidateSourceDocumentLineLinkForTaxTrans'))
        {
            TaxTrans taxTrans;

            //Check if there is a tax trans record with orphan source document line record
            select firstonly crosscompany SourceDocumentLineRecId, SourceDocumentHeader, SourceRelationType from _sourceDocumentLineSubmittedForProcessing
                where _sourceDocumentLineSubmittedForProcessing.SourceRelationType == tableNum(TaxTrans) &&
                    _sourceDocumentLineSubmittedForProcessing.SourceDocumentHeader == _accountingEvent.SourceDocumentHeader
            notexists join taxTrans
                where taxTrans.SourceDocumentLine == _sourceDocumentLineSubmittedForProcessing.SourceDocumentLineRecId;
        
            if (_sourceDocumentLineSubmittedForProcessing.SourceDocumentLineRecId != 0)
            {
                //log telemetry that the tax lines are orphan
                activityContext.addCustomProperty('ValidationResult', 'Fail');

                activityContext.addCustomProperty(
                    'Message', SourceDocumentInstrumentationConstants::ErrorWhileValidatingTaxTransEntriesForDocument);

                activityContext.addCustomProperty(
                    'SourceDocumentHeader', int642Str(_accountingEvent.SourceDocumentHeader));

                activityContext.addCustomProperty(
                    'AccountingEvent', int642Str(_accountingEvent.RecId));

                if (FeatureStateProvider::isFeatureEnabled(EnableSourceDocumentValidationFramework::instance()))
                {
                    throw error("@SourceDocumentAccountingFramework:ErrorMessageForValidatingTaxEntriesDuringJournalization");
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAccountingDistributionForTaxTrans</Name>
				<Source><![CDATA[
    private void validateAccountingDistributionForTaxTrans(
        AccountingEvent _accountingEvent,
        SourceDocumentLineRecIdTmp _sourceDocumentLineSubmittedForProcessing)
    {
        using (SysInstrumentationActivityContext activityContext = SourceDocumentAccountingFrameworkInstrumentationLogger::getActivityContext(
                SourceDocumentInstrumentationConstants::SourceDocumentValidationFrameworkNamespace,
                classStr(SubledgerJournalValidateTaxAccountEntries),
                'validateAccountingDistributionForTaxTrans'))
        {
            AccountingDistribution accountingDistribution;
            
            //Check if there is tax transaction record with missing Accounting Distribution
            select firstonly crosscompany SourceDocumentLineRecId, SourceDocumentHeader, SourceRelationType from _sourceDocumentLineSubmittedForProcessing
                where _sourceDocumentLineSubmittedForProcessing.SourceRelationType == tableNum(TaxTrans) &&
                    _sourceDocumentLineSubmittedForProcessing.SourceDocumentHeader == _accountingEvent.SourceDocumentHeader
                notexists join accountingDistribution
                    where _sourceDocumentLineSubmittedForProcessing.SourceDocumentLineRecId == accountingDistribution.SourceDocumentLine;
            if (_sourceDocumentLineSubmittedForProcessing.SourceDocumentLineRecId != 0)
            {
                // log telemetry that the accounting distributions are missing
                activityContext.getActivity().addCustomProperty('ValidationResult', 'Fail');

                activityContext.getActivity().addCustomProperty(
                    'Message', SourceDocumentInstrumentationConstants::ErrorWhileValidatingAccountingDistributionsForTaxTrans);

                activityContext.getActivity().addCustomProperty(
                    'SourceDocumentHeader', int642Str(_accountingEvent.SourceDocumentHeader));

                activityContext.getActivity().addCustomProperty(
                    'AccountingEvent', int642Str(_accountingEvent.RecId));

                if (FeatureStateProvider::isFeatureEnabled(EnableSourceDocumentValidationFramework::instance()))
                {
                    throw error("@SourceDocumentAccountingFramework:ErrorMessageForValidatingAccountingDistributionsOfTaxTransDuringJournalization");
                }
            }

            AccountingDistribution parentAccountingDistribution;

            //Check if there is tax transaction record with Orphan Accounting Distribution
            select firstonly crosscompany SourceDocumentLineRecId, SourceDocumentHeader, SourceRelationType from _sourceDocumentLineSubmittedForProcessing
                where _sourceDocumentLineSubmittedForProcessing.SourceRelationType == tableNum(TaxTrans) &&
                      _sourceDocumentLineSubmittedForProcessing.SourceDocumentHeader == _accountingEvent.SourceDocumentHeader
                join accountingDistribution
                    where _sourceDocumentLineSubmittedForProcessing.SourceDocumentLineRecId == accountingDistribution.SourceDocumentLine
                       && accountingDistribution.ParentDistribution != 0
                notexists join parentAccountingDistribution
                    where parentAccountingDistribution.RecId == accountingDistribution.ParentDistribution;

            if (_sourceDocumentLineSubmittedForProcessing.SourceDocumentLineRecId != 0)
            {
                //log telemetry that the accounting distributions are orphan
                activityContext.getActivity().addCustomProperty('ValidationResult', 'Fail');

                activityContext.getActivity().addCustomProperty(
                    'Message', SourceDocumentInstrumentationConstants::ErrorMessageWhenAccountingDistributionIsOrphanForTaxTrans);

                activityContext.getActivity().addCustomProperty(
                    'SourceDocumentHeader', int642Str(_accountingEvent.SourceDocumentHeader));

                activityContext.getActivity().addCustomProperty(
                    'AccountingEvent', int642Str(_accountingEvent.RecId));

                if (FeatureStateProvider::isFeatureEnabled(EnableSourceDocumentValidationFramework::instance()))
                {
                    throw error("@SourceDocumentAccountingFramework:ErrorMessageForValidatingOrphanAccountingDistributionsDuringJournalization");
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAccountingDistributionForTaxUncommitted</Name>
				<Source><![CDATA[
    private void validateAccountingDistributionForTaxUncommitted(
        AccountingEvent _accountingEvent,
        SourceDocumentLineRecIdTmp _sourceDocumentLineSubmittedForProcessing)
    {
        using (SysInstrumentationActivityContext activityContext = SourceDocumentAccountingFrameworkInstrumentationLogger::getActivityContext(
                SourceDocumentInstrumentationConstants::SourceDocumentValidationFrameworkNamespace,
                classStr(SubledgerJournalValidateTaxAccountEntries),
                'validateAccountingDistributionForTaxUncommitted'))
        {

            AccountingDistribution accountingDistribution;
            
            //Check if there is tax transaction record with missing Accounting Distribution
            select firstonly crosscompany SourceDocumentLineRecId, SourceDocumentHeader, SourceRelationType from _sourceDocumentLineSubmittedForProcessing
                where _sourceDocumentLineSubmittedForProcessing.SourceRelationType == tableNum(TaxUncommitted) &&
                    _sourceDocumentLineSubmittedForProcessing.SourceDocumentHeader == _accountingEvent.SourceDocumentHeader
                notexists join accountingDistribution
                    where _sourceDocumentLineSubmittedForProcessing.SourceDocumentLineRecId == accountingDistribution.SourceDocumentLine;
            if (_sourceDocumentLineSubmittedForProcessing.SourceDocumentLineRecId != 0)
            {
                // log telemetry that the accounting distributions are missing
                activityContext.getActivity().addCustomProperty('ValidationResult', 'Fail');

                activityContext.getActivity().addCustomProperty(
                    'Message', SourceDocumentInstrumentationConstants::ErrorWhileValidatingAccountingDistributionsForTaxUncommitted);

                activityContext.getActivity().addCustomProperty(
                    'SourceDocumentHeader', int642Str(_accountingEvent.SourceDocumentHeader));

                activityContext.getActivity().addCustomProperty(
                    'AccountingEvent', int642Str(_accountingEvent.RecId));

                if (FeatureStateProvider::isFeatureEnabled(EnableSourceDocumentValidationFramework::instance()))
                {
                    throw error("@SourceDocumentAccountingFramework:ErrorMessageForValidatingAccountingDistributionsOfTaxUncommittedDuringTaxCalculation");
                }
            }

            AccountingDistribution parentAccountingDistribution;

            //Check if there is tax transaction record with Orphan Accounting Distribution
            select firstonly crosscompany SourceDocumentLineRecId, SourceDocumentHeader, SourceRelationType from _sourceDocumentLineSubmittedForProcessing
                where _sourceDocumentLineSubmittedForProcessing.SourceRelationType == tableNum(TaxUncommitted) &&
                      _sourceDocumentLineSubmittedForProcessing.SourceDocumentHeader == _accountingEvent.SourceDocumentHeader
                join accountingDistribution
                    where _sourceDocumentLineSubmittedForProcessing.SourceDocumentLineRecId == accountingDistribution.SourceDocumentLine
                       && accountingDistribution.ParentDistribution != 0
                notexists join parentAccountingDistribution
                    where parentAccountingDistribution.RecId == accountingDistribution.ParentDistribution;

            if (_sourceDocumentLineSubmittedForProcessing.SourceDocumentLineRecId != 0)
            {
                //log telemetry that the accounting distributions are orphan
                activityContext.getActivity().addCustomProperty('ValidationResult', 'Fail');

                activityContext.getActivity().addCustomProperty(
                    'Message', SourceDocumentInstrumentationConstants::ErrorMessageWhenAccountingDistributionIsOrphanForTaxUncommitted);

                activityContext.getActivity().addCustomProperty(
                    'SourceDocumentHeader', int642Str(_accountingEvent.SourceDocumentHeader));

                activityContext.getActivity().addCustomProperty(
                    'AccountingEvent', int642Str(_accountingEvent.RecId));

                if (FeatureStateProvider::isFeatureEnabled(EnableSourceDocumentValidationFramework::instance()))
                {
                    throw error("@SourceDocumentAccountingFramework:ErrorMessageForValidatingOrphanAccountingDistributionsDuringTaxCalculation");
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAccountingDistributionForWHT_IN</Name>
				<Source><![CDATA[
    private void validateAccountingDistributionForWHT_IN(
        AccountingEvent _accountingEvent,
        AccountingDistributionTmpForValidation _accountingDistributionTmpForValidation)
    {
        SourceDocumentHeader sourceDocumentHeader;
        select SourceRelationType from sourceDocumentHeader where sourceDocumentHeader.RecId == _accountingEvent.SourceDocumentHeader;

        if (sourceDocumentHeader.SourceRelationType == tableNum(VendInvoiceInfoTable) || sourceDocumentHeader.SourceRelationType == tableNum(CustInvoiceTable))
        {
            using (SysInstrumentationActivityContext activityContext = SourceDocumentAccountingFrameworkInstrumentationLogger::getActivityContext(
                    SourceDocumentInstrumentationConstants::SourceDocumentValidationFrameworkNamespace,
                    classStr(SubledgerJournalValidateTaxAccountEntries),
                    'validateAccountingDistributionForTaxWithhold_IN'))
            {
                SourceDocumentLine sourceDocumentLineLoc;
                boolean ret = false;

                if (sourceDocumentHeader.SourceRelationType == tableNum(VendInvoiceInfoTable))
                {
                    TaxWithholdUncommitted_IN taxWithholdUncommitted_IN;

                    // Check if there is a tax withhold uncommitted record without accounting distribution record.
                    select firstonly crosscompany RecId from taxWithholdUncommitted_IN
                        where taxWithholdUncommitted_IN.SourceRegulateAmountCur != 0
                            && taxWithholdUncommitted_IN.Source == TaxModuleType::PurchInvoice
                        exists join sourceDocumentLineLoc
                            where sourceDocumentLineLoc.RecId == taxWithholdUncommitted_IN.SourceDocumentLine
                                && sourceDocumentLineLoc.SourceRelationType == tableNum(TaxWithholdUncommitted_IN)
                                && sourceDocumentLineLoc.SourceDocumentHeader == _accountingEvent.SourceDocumentHeader
                        notexists join _accountingDistributionTmpForValidation
                            where _accountingDistributionTmpForValidation.SourceDocumentLine == taxWithholdUncommitted_IN.SourceDocumentLine;

                    ret = taxWithholdUncommitted_IN.RecId != 0;
                }

                if (sourceDocumentHeader.SourceRelationType == tableNum(CustInvoiceTable))
                {
                    TaxWithholdTrans_IN taxWithholdTrans_IN;

                    // Check if there is a tax withhold trans record without accounting distribution record.
                    // For FTI, the WHT posting process is earlier than processing sourceDocument, the <c>TaxWithholdUncommitted_IN</c> has been deleted and source relation type changes to <c>TaxWithholdTrans_IN</c>.
                    select firstonly crosscompany RecId from taxWithholdTrans_IN
                        where taxWithholdTrans_IN.AdjustedTaxWithholdAmount != 0
                            && taxWithholdTrans_IN.Source == TaxModuleType::FreeTxtInvoice
                        exists join sourceDocumentLineLoc
                            where sourceDocumentLineLoc.RecId == taxWithholdTrans_IN.SourceDocumentLine
                                && sourceDocumentLineLoc.SourceRelationType == tableNum(TaxWithholdTrans_IN)
                                && sourceDocumentLineLoc.SourceDocumentHeader == _accountingEvent.SourceDocumentHeader
                        notexists join _accountingDistributionTmpForValidation
                            where _accountingDistributionTmpForValidation.SourceDocumentLine == taxWithholdTrans_IN.SourceDocumentLine;

                    ret = taxWithholdTrans_IN.RecId != 0;
                }

                if (ret)
                {
                    // Log telemetry that the accounting distribution is empty for Indian withholding tax.
                    activityContext.getActivity().addCustomProperty('ValidationResult', 'Fail');

                    activityContext.getActivity().addCustomProperty(
                        'Message', SourceDocumentInstrumentationConstants::ErrorWhileValidatingADEntriesForWHT_IN);

                    activityContext.getActivity().addCustomProperty(
                        'SourceDocumentHeader', int642Str(_accountingEvent.SourceDocumentHeader));

                    activityContext.getActivity().addCustomProperty(
                        'AccountingEvent', int642Str(_accountingEvent.RecId));

                    if (FeatureStateProvider::isFeatureEnabled(EnableSourceDocumentValidationFramework::instance()))
                    {
                        throw error("@SourceDocumentAccountingFramework:ErrorMessageForValidatingADEntriesForWHT_IN");
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>