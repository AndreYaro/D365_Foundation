<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalReferenceParmCreator_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is responsible for the automatic creation of
/// fiscal references in specific scenarios.
/// </summary>
class FiscalReferenceParmCreator_BR
{
    Common source;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a fiscal reference to <c>ExternalFiscalDocument_BR</c> or <c>FiscalDocument_BR</c> entries.
    /// If no legal text ID is passed, the default is NOT used.
    /// </summary>
    /// <param name="_referencedDocument">
    /// Fiscal document to be referenced.
    /// </param>
    /// <param name="_legalTextId">
    /// Legal text ID for the reference.
    /// </param>
    /// <remarks>
    /// If you want to add a reference using the defaut legal text, use
    /// <c>addReferenceWithDefaultLegalText</c> instead.
    /// </remarks>
    public void addReference(InvoicesReferencedByMap_BR _referencedDocument, FiscalDocumentTextID_BR _legalTextId = '')
    {
        FiscalReferenceParm_BR fiscalReferenceParm;

        if (this.existsReferenceTo(_referencedDocument))
        {
            return;
        }

        fiscalReferenceParm.SourceRecId = source.RecId;
        fiscalReferenceParm.SourceTableId = source.TableId;
        fiscalReferenceParm.RefRecID = _referencedDocument.RecId;
        fiscalReferenceParm.RefTableId = _referencedDocument.TableId;
        fiscalReferenceParm.LegalTextID = _legalTextId;
        fiscalReferenceParm.isAutomatic = true;
        fiscalReferenceParm.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addReferenceWithDefaultLegalText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a fiscal reference to <c>ExternalFiscalDocument_BR</c> or <c>FiscalDocument_BR</c> entries
    /// using the default legal text ID from CFOP table.
    /// </summary>
    /// <param name="_referencedInvoice">
    /// Fiscal document to be referenced.
    /// </param>
    /// <remarks>
    /// If you want to pass in a legal text ID use <c>addReference</c> instead.
    /// </remarks>
    public void addReferenceWithDefaultLegalText(InvoicesReferencedByMap_BR _referencedInvoice)
    {
        FiscalReferenceParm_BR fiscalReferenceParm;

        if (this.existsReferenceTo(_referencedInvoice))
        {
            return;
        }

        fiscalReferenceParm.SourceRecId = source.RecId;
        fiscalReferenceParm.SourceTableId = source.TableId;
        fiscalReferenceParm.RefRecID = _referencedInvoice.RecId;
        fiscalReferenceParm.RefTableId = _referencedInvoice.TableId;
        fiscalReferenceParm.LegalTextID = this.getDefaultLegalTextId();
        fiscalReferenceParm.isAutomatic = true;
        fiscalReferenceParm.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFromRecIdSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes <c>FiscalReferenceParm_BR</c> records from a <c>Set</c> object.
    /// </summary>
    /// <param name="_fiscalReferenceSet">
    /// The <c>Set</c> instance.
    /// </param>
    /// <remarks>
    /// The <c>Set</c> holds the RefRecID field values.
    /// </remarks>
    public void deleteFromRecIdSet(Set _fiscalReferenceSet)
    {
        SetEnumerator          se = _fiscalReferenceSet.getEnumerator();
        FiscalReferenceParm_BR fiscalReferenceParm;

        ttsBegin;

        while (se.moveNext())
        {
            select forUpdate RecID from fiscalReferenceParm
                where fiscalReferenceParm.SourceRecId == source.RecId
                   && fiscalReferenceParm.SourceTableId == source.TableId
                   && fiscalReferenceParm.isAutomatic == true
                   && fiscalReferenceParm.RefRecID == se.current();

            if (fiscalReferenceParm)
            {
                fiscalReferenceParm.delete();
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsReferenceTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if a reference to a fiscal document already exists.
    /// </summary>
    /// <param name="_referencedInvoice">Map to fiscal document to be referenced</param>
    /// <returns>true if the reference already exists; false otherwise.</returns>
    public boolean existsReferenceTo(InvoicesReferencedByMap_BR _referencedInvoice)
    {
        FiscalReferenceParm_BR fiscalReferenceParm;

        select firstOnly recId from fiscalReferenceParm
            where fiscalReferenceParm.SourceRecId == source.RecId
               && fiscalReferenceParm.SourceTableId == source.TableId
               && fiscalReferenceParm.RefRecID == _referencedInvoice.RecId
               && fiscalReferenceParm.RefTableId == _referencedInvoice.TableId;

        if (fiscalReferenceParm)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultLegalTextId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns default legal text for fiscal references from the current document.
    /// </summary>
    /// <returns>ID of the default legal text</returns>
    public FiscalDocumentTextID_BR getDefaultLegalTextId()
    {
        FiscalDocumentTextID_BR textId;
        SalesParmTable          salesParmTable;
        SalesParmLine           salesParmLine;
        CustInvoiceTable        custInvoiceTable;
        CustInvoiceLine         custInvoiceLine;
        VendInvoiceInfoTable    vendInvoiceInfoTable;
        VendInvoiceInfoLine     vendInvoiceInfoLine;
        VendInvoiceInfoLine_W   vendInvoiceInfoLine_W;

        switch (source.TableId)
        {
            case tablenum(VendInvoiceInfoTable):
                vendInvoiceInfoTable = Source;

                select firstOnly CFOPTable_BR from vendInvoiceInfoLine_W
                    join ParmId, TableRefId from vendInvoiceInfoLine
                    order by LineNum
                    where vendInvoiceInfoLine.RecId == vendInvoiceInfoLine_W.VendInvoiceInfoLine
                        && vendInvoiceInfoLine.ParmId == vendInvoiceInfoTable.ParmId
                        && vendInvoiceInfoLine.TableRefId == vendInvoiceInfoTable.TableRefId;

                textId = CFOPTable_BR::find(vendInvoiceInfoLine_W.CFOPTable_BR).FiscalRefLegalTxtId;
                break;

            case tableNum(SalesParmTable):
                salesParmTable = source;

                select firstOnly salesParmLine
                    order by LineNum
                    where salesParmLine.ParmId == salesParmTable.ParmId;

                if (salesParmTable.Ordering == DocumentStatus::DeliverySlip_BR)
                {
                    textId = CFOPTable_BR::find(salesParmLine.salesLine().salesLine_BR().DeliveryCFOPTable_BR).FiscalRefLegalTxtId;
                }
                else
                {
                    textId = CFOPTable_BR::find(salesParmLine.salesLine().salesLine_BR().CFOPTable_BR).FiscalRefLegalTxtId;
                }
                break;

            case tableNum(CustInvoiceTable):
                custInvoiceTable = source;

                select CFOPTable_BR from custInvoiceLine
                    order by LineNum
                    where custInvoiceLine.ParentRecId == custInvoiceTable.RecId;

                textId = CFOPTable_BR::find(custInvoiceLine.cfopTable_BR).FiscalRefLegalTxtId;
                break;
        }

        return textId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecIdSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>Set</c> with automatic Fiscal reference info.
    /// </summary>
    /// <param name="_fiscalReferenceSet">
    /// The <c>Set</c> instance.
    /// </param>
    /// <remarks>
    /// The <c>Set</c> holds the RefRecID field values.
    /// </remarks>
    public void initRecIdSet(Set _fiscalReferenceSet)
    {
        FiscalReferenceParm_BR fiscalReferenceParm;

        while select RefRecID from fiscalReferenceParm
            where fiscalReferenceParm.SourceRecId == source.RecId
               && fiscalReferenceParm.SourceTableId == source.TableId
               && fiscalReferenceParm.isAutomatic == true
        {
            _fiscalReferenceSet.add(fiscalReferenceParm.RefRecID);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new Fiscal Reference Creator class.
    /// </summary>
    /// <param name="_source">
    /// The document which will reference other fiscal documents.
    /// </param>
    public void new(Common _source)
    {
        source = _source;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes or retrieves the current source document.
    /// </summary>
    /// <param name="_source">
    /// Document to be set (optional).
    /// </param>
    /// <returns>
    /// Current source document.
    /// </returns>
    public Common parmSourceDocument(Common _source = source)
    {
        source = _source;
        return source;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runForReturnCustInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates automatic fiscal references for a return customer invoice.
    /// </summary>
    /// <param name="_parmId">
    /// The ID of the <c>SalesParmTable</c> table of the return invoice.
    /// </param>
    public static void runForReturnCustInvoice(ParmId _parmId)
    {
        SalesParmTable                  salesParmTableLoc;
        SalesParmLine                   salesParmLineLoc;
        SalesLine                       salesLineLoc;
        CustInvoiceJour                 custInvoiceJourRet;
        CustInvoiceTrans                custInvoiceTransRet;
        FiscalDocument_BR               returnedFiscalDocument;

        boolean isAnyCreated;
        while select ParmId, TableRefId, SalesLineRecId from salesParmLineLoc where salesParmLineLoc.ParmId == _parmId
                join salesParmTableLoc where salesParmTableLoc.ParmId == salesParmLineLoc.ParmId
                                          && salesParmTableLoc.TableRefId == salesParmLineLoc.TableRefId
        {
            salesLineLoc = SalesLine::findRecId(salesParmLineLoc.SalesLineRecId);
            // check if it is a Return order
            if (salesLineLoc.SalesType != SalesType::ReturnItem)
            {
                break;
            }
            custInvoiceTransRet = CustInvoiceTrans::findRecId(salesLineLoc.RefReturnInvoiceTrans_W);
            custInvoiceJourRet  = CustInvoiceJour::findFromCustInvoiceTrans(custInvoiceTransRet.SalesId,
                                                                            custInvoiceTransRet.InvoiceId,
                                                                            custInvoiceTransRet.InvoiceDate,
                                                                            custInvoiceTransRet.numberSequenceGroup);

            returnedFiscalDocument = FiscalDocument_BR::findByRef(custInvoiceJourRet.TableId, custInvoiceJourRet.RecId);
            if (returnedFiscalDocument
                && !FiscalReferenceParm_BR::findRef(returnedFiscalDocument.TableId, returnedFiscalDocument.RecId, salesParmTableLoc.TableId, salesParmTableLoc.RecId))
            {
                new FiscalReferenceParmCreator_BR(salesParmTableLoc).addReferenceWithDefaultLegalText(returnedFiscalDocument);
                FiscalReferenceController_BR::construct(salesParmTableLoc).resolveLegalTextsToSourceTable();
                isAnyCreated = true;
            }
        }
        if (isAnyCreated)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00039, funcName());
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>runForReturnVendInvoiceInfoTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates automatic fiscal references for a return vendor invoice.
    /// </summary>
    /// <param name="_parmId">
    /// <c>ParmId</c> of the <c>VendInvoiceInfoTable</c> of the returned invoice.
    /// </param>
    public static void runForReturnVendInvoiceInfoTable(ParmId _parmId)
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;
        VendInvoiceTrans    returnedLine;
        VendInvoiceJour     returnedHeader;
        FiscalDocument_BR   returnedFiscalDocument;
        FiscalReferenceParmCreator_BR fiscalReferenceCreator;
        VendInvoiceInfoTable vendInvoiceInfoTable;
        Set                 RecIdSet = new Set(Types::Int64);

        boolean isAnyCreated;
        while select vendInvoiceInfoTable
            where vendInvoiceInfoTable.ParmId == _parmId
        {
            fiscalReferenceCreator = new FiscalReferenceParmCreator_BR(vendInvoiceInfoTable);
            if (vendInvoiceInfoTable.purchTable().PurchaseType == PurchaseType::ReturnItem)
            {
                fiscalReferenceCreator.initRecIdSet(RecIdSet);
                while select vendInvoiceInfoLine
                    where vendInvoiceInfoLine.ParmId == vendInvoiceInfoTable.ParmId
                    && vendInvoiceInfoLine.TableRefId == vendInvoiceInfoTable.TableRefId
                {
                    returnedLine = VendInvoiceTrans::findRecId(vendInvoiceInfoLine.purchLine().CreditedVendInvoiceTrans);
                    returnedHeader = returnedLine.vendInvoiceJour();
                    returnedFiscalDocument = FiscalDocument_BR::findByRef(returnedHeader.TableId, returnedHeader.RecId);
                    if (returnedFiscalDocument)
                    {
                        fiscalReferenceCreator.addReferenceWithDefaultLegalText(returnedFiscalDocument);
                        RecIdSet.remove(returnedFiscalDocument.RecId);
                    }
                }
                fiscalReferenceCreator.deleteFromRecIdSet(RecIdSet);
                FiscalReferenceController_BR::construct(vendInvoiceInfoTable).resolveLegalTextsToSourceTable();
                isAnyCreated = true;
            }
        }
        if (isAnyCreated)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00025, funcName());
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>