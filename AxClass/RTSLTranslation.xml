<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rtslTranslation</Name>
	<SourceCode>
		<Declaration><![CDATA[
// This is a base class for all translation routines.
// It is used by translation master and batch translation class
abstract class rtslTranslation
{
    NumberSeq           numberSeq;
    TmpRTSLLedgerTrans  tmpTrans;
    Query               query;
    QueryBuildRange     transDateRange;

    RTSLTransLog        tmpTransLog, transLog;
    int                 exportTransCount, importTransCount;
    int                 exportErrorCount, importErrorCount;

    RTSLConvert         convert;
    boolean             checkedOk, exportedOk, importedOk;
    boolean             stopOnFirstError;

    RTSLSessionTrans    sessionTrans;
    RTSLSessionTransId  sessionTransId;

    RTSLToCompanyId     toCompanyId;
    RTSLRuleGroupId     ruleGroupId;
    RTSLRuleGroup       ruleGroup;

    TransDate           fromDate;
    TransDate           toDate;

    Object              caller;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>abortCompanyExport</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void abortCompanyExport()
    {
        delete_from tmpTrans;

        delete_from tmpTransLog
            where tmpTransLog.SessionTransId == sessionTransId;

        exportTransCount = 0;
        exportErrorCount = 0;

        sessionTrans.StatusExport = RTSLSessionStatus::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract protected void buildQuery()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCompanySetup</Name>
				<Source><![CDATA[
    // This in-depth checking method is called
    // from a consistency check class
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void checkCompanySetup(RTSLConsistencyCheck _consistencyCheck,
                                  RTSLRuleGroupId      _ruleGroupId = '')
    {
        RTSLRuleModule  ruleModule;

        while select ruleModule
            group by RuleGroupId, ClassId
            where (! _ruleGroupId && ruleModule.ClassId == classIdGet(this) )   ||
                   ( _ruleGroupId && ruleModule.ClassId == classIdGet(this) &&     // Non-standalone call
                    ruleModule.RuleGroupId == _ruleGroupId)
        {
            ruleGroup = RTSLRuleGroup::find(ruleModule.RuleGroupId);
            setPrefix(strFmt("@GLS103413", ruleGroup.ToCompanyId));

            if (! ruleGroup.ToCompanyId ||
                ! (xDataArea::exist(ruleGroup.ToCompanyId)))
            {
                warning(strFmt("@SYS10666", ruleGroup.ToCompanyId));
                _consistencyCheck.postTest(ruleGroup,
                                           fieldNum(RTSLRuleGroup, ToCompanyId));
                continue;
            }

            this.initTransactionConverter();
            convert.checkCompanySetup(checkedOk, _consistencyCheck);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkedOk</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean checkedOk(boolean _checkedOk = checkedOk)
    {
        checkedOk = _checkedOk;
        return checkedOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>consistencyCheckClassName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract protected str consistencyCheckClassName()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRangeFieldId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract protected FieldId defaultRangeFieldId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSession</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract public void deleteSession(RTSLSessionTransId _sessionTransId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSessionTransLog</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void deleteSessionTransLog(RTSLSessionTrans _sessionTrans)
    {
        delete_from transLog
            where transLog.SessionTransId == _sessionTrans.SessionTransId;

        _sessionTrans.StatusImport      = RTSLSessionStatus::Canceled;
        if (_sessionTrans.StatusExport)
        {
            _sessionTrans.StatusExport = RTSLSessionStatus::Canceled;
        }

        _sessionTrans.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportCompany</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean exportCompany()
    {
        exportTransCount = 0;
        exportErrorCount = 0;
        exportedOk       = true;

        try
        {
            ttsbegin;

            setPrefix(strFmt("@GLS103414", curext()));
            sessionTrans.StatusExport = RTSLSessionStatus::Done;

            this.initTransactionConverter();
            this.processRules();

            this.showExportResults();

            if (! exportTransCount)
            {
                exportedOk = false;
                error("@GLS103627");
            }
            sessionTrans.StatusExport = RTSLSessionStatus::Done;

            ttscommit;
        }
        catch (Exception::Error)
        {
            ttsabort; // This catch is necessary, though it does nothing but catch
        }

        return exportedOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportedOk</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean exportedOk()
    {
        return exportedOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultRange</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container getDefaultRange()
    {
        return [fromDate, toDate];
    }

]]></Source>
			</Method>
			<Method>
				<Name>importCompany</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean importCompany()
    {
        importTransCount = 0;
        importErrorCount = 0;
        importedOk = true;

        try
        {
            ttsbegin;

            setPrefix(strFmt("@GLS103415", this.toCompanyId()));
            changecompany(this.toCompanyId())
            {
                this.importTransactions();
            }

            this.showImportResults();

            if (importErrorCount)
                throw error("@SYS18447");

            while select tmpTransLog
            {
                transLog.data(tmpTransLog);
                transLog.insert();
            }

            sessionTrans.StatusImport = RTSLSessionStatus::Done;
            sessionTrans.NumTrans     = importTransCount;
            sessionTrans.insert();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }

        return importedOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>importedOk</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean importedOk()
    {
        return importedOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>importTransactions</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract protected void importTransactions()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void init()
    {
        FiscalCalendarRecId calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();

        if (! ruleGroupId)
            throw error("@GLS103416");

        fromDate = RTSLSessionTrans::findLastExportDate(ruleGroup.RuleGroupId, classIdGet(this));

        fromDate = fromDate ? fromDate + 1 : LedgerFiscalCalendar::findPeriodStartDateByDateWithIndex(calendarRecId, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

        toDate   = LedgerFiscalCalendar::findPeriodEndDateByDateWithIndex(calendarRecId, fromDate);

        toDate   = toDate && (toDate > fromDate) ? toDate : endmth(fromDate);

        this.newSessionTrans();
        this.buildQuery();
        this.setDefaultRange(fromDate, toDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransactionConverter</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract protected void initTransactionConverter()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustStopOnError</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean mustStopOnError()
    {
        return stopOnFirstError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void new()
    {
        checkedOk   = false;
        importedOk  = false;
        exportedOk  = false;

        stopOnFirstError = RTSLParameters::find().StopOnFirstError;
        tmpTransLog.setTmp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSessionId</Name>
				<Source><![CDATA[
    private RTSLSessionTransId newSessionId()
    {
        numberSeq = NumberSeq::newGetNum(RTSLParameters::numRefSessionTransId());
        return numberSeq.num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSessionTrans</Name>
				<Source><![CDATA[
    private void newSessionTrans()
    {
        sessionTransId              = this.newSessionId();

        sessionTrans.SessionTransId = sessionTransId;
        sessionTrans.RuleGroupId    = ruleGroupId;
        sessionTrans.ClassId        = classIdGet(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCaller</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Object parmCaller(Object _caller = caller)
    {
        if (! SysDictClass::isEqualOrSuperclass(classIdGet(_caller), classNum(RTSLTranslationBatch)) &&
            ! SysDictClass::isEqualOrSuperclass(classIdGet(_caller), classNum(RTSLTranslationWizard)))
            throw error(strFmt("@SYS60364", '', classStr(RTSLTranslationWizard)));

        caller = _caller;
        return caller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuery</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Query parmQuery(Query _query = query)
    {
        ;
        query = _query;

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRuleGroup</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RTSLRuleGroup parmRuleGroup(RTSLRuleGroup _ruleGroup = ruleGroup)
    {
        ruleGroupId = _ruleGroup.RuleGroupId;
        ruleGroup   = _ruleGroup;

        toCompanyId = ruleGroup.ToCompanyId;

        return ruleGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRules</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract protected void processRules()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTransaction</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected TmpRTSLTrans processTransaction(TmpRTSLTrans _transaction,
                                              Common       _rule)
    {
        if (! convert.checkRange(_transaction, _rule))
                return null;

        select firstonly tmpTransLog
            where tmpTransLog.RefRecId == _transaction.RefRecId;

        if (_transaction.transLog())
            return null;

        if (tmpTransLog)
        {
            warning("@GLS103417");
            return null;
        }

        tmpTrans = convert.convertTrans(_transaction, _rule);
        changecompany (ruleGroup.ToCompanyId)
        {
            tmpTrans.LedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(tmpTrans.NewLedgerDimensionDefaultAccount, tmpTrans.NewDefaultDimension);
        }
        tmpTrans.insert();

        if (tmpTrans.ErrorStatus == NoYes::Yes)
        {
            exportErrorCount++;
            exportedOk = false;
        }
        else
        {
            exportTransCount++;
        }

        tmpTransLog.clear();
        tmpTransLog.RefRecId        = tmpTrans.RefRecId;
        tmpTransLog.SessionTransId  = sessionTransId;
        tmpTransLog.insert();

        return tmpTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressExportTotal</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract public int progressExportTotal()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressImportTotal</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int progressImportTotal()
    {
        select count(RecId) from tmpTrans;

        return any2int(tmpTrans.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressNotify</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void progressNotify(str _text = '')
    {
        if (! caller)
            return;

        caller.progressStep(_text);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultRange</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean setDefaultRange(FromDate  _fromDate,
                                   ToDate    _toDate)
    {
        if (_fromDate && _toDate && _fromDate > _toDate)
            return checkFailed("@SYS16982");

        fromDate = _fromDate;
        toDate   = _toDate;

        findOrCreateRange_W(
            query.dataSourceTable(this.tableId()),
            this.defaultRangeFieldId(),
            fromDate || toDate ?
                strFmt('%1..%2', fromDate, toDate) :
                ''
        );

        sessionTrans.FromDate = fromDate;
        sessionTrans.ToDate   = toDate;
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showExportResults</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void showExportResults()
    {
        ;
        info(strFmt("@GLS103418", exportTransCount));

        if (! exportedOk)
        {
            error(strFmt("@GLS103419", exportErrorCount));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showImportResults</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void showImportResults()
    {
        ;
        info(strFmt("@GLS103421", importTransCount));

        if (importErrorCount)
        {
            error(strFmt("@GLS103419", importErrorCount));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract protected TableId tableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TmpRTSLTrans tmpTrans()
    {
        select tmpTrans;

        return tmpTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpTransMenuItemStr</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract protected IdentifierName tmpTransMenuItemStr()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>toCompanyId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RTSLToCompanyId toCompanyId()
    {
        return toCompanyId ? toCompanyId : ruleGroup.ToCompanyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkConsistency</Name>
				<Source><![CDATA[
    #define.MainMethodName('main')
    #define.InfoLineShift(2)
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean checkConsistency(RTSLTranslation _translation)
    {
        Args            args            = new Args();
        boolean         checkedOk       = true;
        int             infoLinesOrig   = infologLine();
        SysGlobalCache  globalCache = classfactory.globalCache();
        str             checkClassName;
        DictClass       dictCheckClass;
        ;

        globalCache.set(classStr(RTSLTranslation), 0, _translation.parmRuleGroup().RuleGroupId);

        args.caller(_translation);
        checkClassName = _translation.consistencyCheckClassName();
        if (checkClassName)
        {
            dictCheckClass = new DictClass(new Dictionary().className2Id(checkClassName));
            dictCheckClass.callStatic(#MainMethodName , args);

            checkedOk = infologLine() == infoLinesOrig + #InfoLineShift;
        }

        globalCache.set(classStr(RTSLTranslation), 0, '');

        _translation.checkedOk(checkedOk);

        return checkedOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTSLTranslation construct(RTSLRuleModule _ruleModule)
    {
        RTSLTranslation translation;
        DictClass       dictClass;
        ;

        dictClass = new DictClass(_ruleModule.ClassId);

        if (! dictClass)
            throw error("@GLS106731");

        if (! SysDictClass::isSuperclass(_ruleModule.ClassId, classNum(RTSLTranslation)))
            throw error("@GLS103422");

        translation = dictClass.makeObject();
        translation.parmRuleGroup(RTSLRuleGroup::find(_ruleModule.RuleGroupId));

        return translation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassName description()
    {
        return "@GLS103423";
    }

]]></Source>
			</Method>
			<Method>
				<Name>showTmpTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void showTmpTrans(RTSLTranslation _translation,
                                           Object          _caller = null)
    {
        Args   args = new Args();
        ;
        args.caller(_translation);
        args.record(_translation.tmpTrans());

        new MenuFunction(_translation.tmpTransMenuItemStr(), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sorting</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static Sorting sorting()
    {
        return 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
