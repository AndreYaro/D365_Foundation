<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankCurrencyRevalController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankCurrencyRevalController</c> class is the controller class for the bank - foreign currency revaluation process.
/// </summary>
internal final class BankCurrencyRevalController extends SysOperationServiceController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    internal static void main(Args args)
    {
        IdentifierName className;
        IdentifierName methodName;
        SysOperationExecutionMode executionMode;

        try
        {
            [className, methodName, executionMode] = SysOperationServiceController::parseServiceInfo(args);
            BankCurrencyRevalController controller = new BankCurrencyRevalController(className, methodName, executionMode);
            
            // Do not allow the operation to be scheduled as a recurrence.
            controller.showBatchRecurrenceButton(false);

            if (controller.prompt())
            {
                BankCurrencyRevalContract bankCurrencyReval = controller.getContract();
                bankCurrencyReval.parmNeedsToBeSplitIntoTasks(false);

                if (bankCurrencyReval.parmPreviewBeforePost())
                {
                    bankCurrencyReval.parmRunMode(BankCurrencyRevalRunMode::CalculateOnly);

                    if (args.caller() && args.caller() is IFormRefreshable)
                    {
                        bankCurrencyReval.parmHistoryForm(args.caller());
                    }

                    Args newArgs = new Args();
                    newArgs.caller(controller);

                    MenuFunction previewForm = new MenuFunction(menuItemDisplayStr(BankCurrencyRevalPreview), MenuItemType::Display);
                    previewForm.run(newArgs);
                }
                else
                {
                    bankCurrencyReval.parmRunMode(BankCurrencyRevalRunMode::CalculateAndPost);

                    controller.runOperation();
                }
            }
        }
        catch (Exception::Error)
        {
            exceptionTextFallThrough();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContract</Name>
				<Source><![CDATA[
    private BankCurrencyRevalContract getContract()
    {
        return this.getDataContractObject(classStr(BankCurrencyRevalContract)) as BankCurrencyRevalContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateForm</Name>
				<Source><![CDATA[
    public FormName templateForm()
    {
        return formStr(BankCurrencyRevalDialog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostBuild</Name>
				<Source><![CDATA[
    protected void dialogPostBuild()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    protected boolean validate()
    {
        boolean isValid = super();

        if (isValid)
        {
            BankCurrencyRevalContract bankCurrencyReval = this.getDataContractObject(classStr(BankCurrencyRevalContract)) as BankCurrencyRevalContract;

            if (bankCurrencyReval.parmPreviewBeforePost() && this.batchInfo() && this.batchInfo().parmBatchExecute())
            {
                warning("@GeneralLedger:ForeignCurrencyRevalBatchWithPreviewWarning");

                this.batchInfo().parmBatchExecute(NoYes::No);
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCaption</Name>
				<Source><![CDATA[
    protected ClassDescription defaultCaption()
    {
        return "@CashManagement:BankCurrencyRevalText";
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return this.defaultCaption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        BankCurrencyRevalContract bankCurrencyReval = this.getContract();
        
        if (bankCurrencyReval.parmNeedsToBeSplitIntoTasks())
        {
            this.splitRevaluationIntoTasks();
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doBatch</Name>
				<Source><![CDATA[
    public Batch doBatch()
    {
        BankCurrencyRevalContract bankCurrencyReval = this.getContract();
        bankCurrencyReval.parmNeedsToBeSplitIntoTasks(true);

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitRevaluationIntoTasks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Splits apart the original batch task that could be for multiple bank accounts into separate tasks for each individual bank account.
    /// </summary>
    internal void splitRevaluationIntoTasks()
    {
        BankCurrencyRevalContract bankCurrencyReval = this.getContract();

        BatchHeader batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);

        if (batchHeader == null)
        {
            batchHeader = BatchHeader::construct();
        }

        BankCurrencyRevalController controller;
        ListEnumerator bankAccountListEnumerator = bankCurrencyReval.parmSelectedBankAccounts().getEnumerator();

        while (bankAccountListEnumerator.moveNext())
        {
            controller = this.cloneForSubProcess(bankCurrencyReval, bankAccountListEnumerator.current());
            batchHeader.addTask(controller);
        }

        batchHeader.save();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cloneForSubProcess</Name>
				<Source><![CDATA[
    private BankCurrencyRevalController cloneForSubProcess(BankCurrencyRevalContract _bankCurrencyReval, RecId _selectedBankAccountRecId)
    {
        BankCurrencyRevalController controller = new BankCurrencyRevalController(
            classStr(BankCurrencyRevalProcessor),
            methodStr(BankCurrencyRevalProcessor, run),
            SysOperationExecutionMode::Synchronous);

        BankCurrencyRevalContract newBankCurrencyReval = controller.getDataContractInfoObject().dataContractObject() as BankCurrencyRevalContract;

        newBankCurrencyReval.parmTransDate(_bankCurrencyReval.parmTransDate());
        newBankCurrencyReval.parmExchangeRateDate(_bankCurrencyReval.parmExchangeRateDate());
        newBankCurrencyReval.parmRunMode(_bankCurrencyReval.parmRunMode());
        newBankCurrencyReval.parmBankCurrencyRevalTmpTableName(_bankCurrencyReval.parmBankCurrencyRevalTmpTableName());
        newBankCurrencyReval.parmPreviewBeforePost(false);

        List selectedBankAccounts = new List(Types::Int64);
        selectedBankAccounts.addEnd(_selectedBankAccountRecId);

        newBankCurrencyReval.parmSelectedBankAccounts(selectedBankAccounts);
        newBankCurrencyReval.parmNeedsToBeSplitIntoTasks(false);

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>