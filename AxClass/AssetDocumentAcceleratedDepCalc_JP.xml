<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDocumentAcceleratedDepCalc_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// It is used to do depreciation calculation for a acceleratde depreciation document of asset.
/// </summary>
[AssetDocumentTypeAttribute_JP(AssetDocumentType_JP::AssetAcceleratedDepreciation)]
class AssetDocumentAcceleratedDepCalc_JP extends AssetDocumentDepCalculation_JP
{
    AssetDepTableMethodInterface_JP  acceleratedAssetTableMethod;

    AssetBudgetModelId               assetBudgetModelId;
    AssetTransDate                   runDate;
    container                        acceleratedEntryContainer;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcForNormalPeriod</Name>
				<Source><![CDATA[
    public AssetAmount calcForNormalPeriod()
    {
        AssetAmount     ret = 0;

        if (amountToDepreciate > accumulatedDepAmount)
        {
            ret = acceleratedAssetTableMethod.calc();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetDocumentType</Name>
				<Source><![CDATA[
    public AssetDocumentType_JP getAssetDocumentType()
    {
        return AssetDocumentType_JP::AssetAcceleratedDepreciation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentDocumentEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns valid document entry in specific date
    /// </summary>
    /// <returns>
    ///  <c>AssetDocumentEntry_JP</c> record
    /// </returns>
    public AssetDocumentEntry_JP getCurrentDocumentEntry()
    {
        return AssetAcceleratedDepCalcManager_JP::GetValidAcceleratedDocumentEntry(acceleratedEntryContainer, periodEndDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        acceleratedAssetTableMethod = AssetTableMethod::construct(assetDepBookMap_JP, runDate, assetBudgetModelId, false, false, false, true) as Object;

        if (acceleratedAssetTableMethod)
        {
            assetDocumentEntry_JP = this.getCurrentDocumentEntry();
            acceleratedAssetTableMethod.parmAssetDocumentEntry_JP(assetDocumentEntry_JP);
            acceleratedAssetTableMethod.parmAcceleratedEntryContainer_JP(acceleratedEntryContainer);

            accumulatedDepAmount = AssetDepTransMap_JP::calcAccumulatedDepAmountMst(assetDepBookMap_JP, dateNull(), dateMax());
            if (assetDepBookMap_JP.Status ==AssetStatus::NoAcquisition)
            {
                amountToDepreciate = assetDepBookMap_JP.AcquisitionPrice;
            }
            else
            {
                amountToDepreciate = AssetDepTransMap_JP::calcAmountToDepreciate(assetDepBookMap_JP, dateMax(), null);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAssetTableInterval</Name>
				<Source><![CDATA[
    protected void initAssetTableInterval()
    {
        assetTableInterval = assetDepBookMap_JP.AssetDepBookMap_JP::assetTableIntervalForAcceleratedDep();
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveToNextPeriod</Name>
				<Source><![CDATA[
    protected void moveToNextPeriod()
    {
        AssetTransDate      baseDateLoc;

        if (periodStartDate == dateNull())
        {
            baseDateLoc = assetDepBookMap_JP.LastDepreciationDateAccelerated
                ? assetDepBookMap_JP.LastDepreciationDateAccelerated + 1
                : assetDepBookMap_JP.DepreciationStartDate;

            periodStartDate = assetTableInterval.startOfPeriod(baseDateLoc);
            periodEndDate   = assetTableInterval.endPeriod(periodStartDate);
        }
        else
        {
            periodStartDate = periodEndDate + 1;
            periodEndDate   = assetTableInterval.endPeriod(periodStartDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    public boolean next(AssetTransDate _upperDate = dateMax())
    {
        boolean ret = true;

        ret = super(_upperDate);

        if (ret)
        {
            // get current document entry
            assetDocumentEntry_JP = this.getCurrentDocumentEntry();
            acceleratedAssetTableMethod.parmAssetDocumentEntry_JP(assetDocumentEntry_JP);

            ret = acceleratedAssetTableMethod.next();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAcceleratedEntryContainer</Name>
				<Source><![CDATA[
    public container parmAcceleratedEntryContainer(container _acceleratedEntryContainer = acceleratedEntryContainer)
    {
        acceleratedEntryContainer = _acceleratedEntryContainer;
        return acceleratedEntryContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetBudgetModelId</Name>
				<Source><![CDATA[
    public AssetBudgetModelId parmAssetBudgetModelId(AssetBudgetModelId _assetBudgetModelId = assetBudgetModelId)
    {
        assetBudgetModelId = _assetBudgetModelId;
        return assetBudgetModelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRunDate</Name>
				<Source><![CDATA[
    public AssetTransDate parmRunDate(AssetTransDate _runDate = runDate)
    {
        runDate = _runDate;
        return runDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>