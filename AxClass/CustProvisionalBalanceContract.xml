<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustProvisionalBalanceContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data Contract class for <c>CustProvisionalBalance</c>SSRS report
/// </summary>
/// <remarks>
/// This is the Data Contract class for the <c>CustProvisionalBalance</c>SSRS Report.
/// </remarks>
[
    DataContractAttribute,
    SysOperationContractProcessingAttribute(classStr(CustProvisionalBalanceUIBuilder), SysOperationDataContractProcessingMode::CreateUIBuilderForRootContractOnly),
    SysOperationGroupAttribute('Empty', "@ApplicationPlatform:SingleSpace", '1'),
    SysOperationGroupAttribute('GroupSort', "@SYS341193", '2'),
    SysOperationGroupAttribute('Printout', "@SYS12608", '3')
]
public class CustProvisionalBalanceContract implements SysOperationValidatable, SysOperationInitializable
{
    FromDate fromDate;
    FromDate reportPeriodStartDate;
    ToDate toDate;
    NoneBeginTransEnd noneBeginTransEnd;
    boolean includeDetails;
    CustMainAccount custMainAccountGroupBy;
    LedgerCurrencySelection ledgerCurrencySelection;
    NoYes inclTransWithNoBillingClass;
    List billingClassification;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes data contract values.
    /// </summary>
    public void initialize()
    {
        billingClassification = new List(Types::String);

        if (!CustParameters::isBillingClassificationEnabled())
        {
            billingClassification.addEnd(SysLabel::labelId2String(literalStr("@GLS223107")));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBillingClassification</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute('BillingClassification'),
        SysOperationLabelAttribute(literalStr("@SPS371")),
        SysOperationHelpTextAttribute(literalStr("@SPS677")),
        SysOperationDisplayOrderAttribute('0'),
        AifCollectionTypeAttribute('return', Types::String)
    ]
    public List parmBillingClassification(List _billingClassification = billingClassification)
    {
        billingClassification = _billingClassification;
        return billingClassification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter FromDate.
    /// </summary>
    /// <param name="_fromDate">
    /// The new value of the datacontract parameter FromDate; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter FromDate.
    /// </returns>
    [
        DataMemberAttribute('FromDate'),
        SysOperationLabelAttribute(literalstr("@SYS5209")),
        SysOperationHelpTextAttribute(literalstr("@SYS67")),
        SysOperationGroupMemberAttribute('Empty'),
        SysOperationDisplayOrderAttribute('1')
    ]
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGroupBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ReportPeriodStartDate.
    /// </summary>
    /// <param name="_custMainAccountGroupBy">
    /// The new value of the datacontract parameter group by; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter group by.
    /// </returns>
    [
        DataMemberAttribute('GroupBy'),
        SysOperationLabelAttribute(literalstr("@SYS341194")),
        SysOperationHelpTextAttribute(literalstr("@SYS341194")),
        SysOperationGroupMemberAttribute('GroupSort'),
        SysOperationDisplayOrderAttribute('1')
    ]
    public CustMainAccount parmGroupBy(CustMainAccount _custMainAccountGroupBy = custMainAccountGroupBy)
    {
        custMainAccountGroupBy = _custMainAccountGroupBy;
        return custMainAccountGroupBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInclTransWithNoBillingClass</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute('InclTransWithNoBillingClass'),
        SysOperationLabelAttribute(literalStr("@SPS691")),
        SysOperationHelpTextAttribute(literalStr("@SPS1009")),
        SysOperationDisplayOrderAttribute('0')
    ]
    public NoYes parmInclTransWithNoBillingClass(NoYes _inclTransWithNoBillingClass = inclTransWithNoBillingClass)
    {
        inclTransWithNoBillingClass = _inclTransWithNoBillingClass;
        return inclTransWithNoBillingClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter NoneBeginTransEnd.
    /// </summary>
    /// <param name="_includeDetails">
    /// The new value of the datacontract parameter includeDetails; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter includeDetails.
    /// </returns>
    [
        DataMemberAttribute('IncludeDetails'),
        SysOperationLabelAttribute(literalstr("@SYS316360")),
        SysOperationHelpTextAttribute(literalstr("@SYS341195")),
        SysOperationGroupMemberAttribute('Printout'),
        SysOperationDisplayOrderAttribute('2')
    ]
    public boolean parmIncludeDetails(boolean _includeDetails = includeDetails)
    {
        includeDetails = _includeDetails;
        return includeDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNoneBeginTransEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter NoneBeginTransEnd.
    /// </summary>
    /// <param name="_noneBeginTransEnd">
    /// The new value of the datacontract parameter NoneBeginTransEnd; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter NoneBeginTransEnd.
    /// </returns>
    [
        DataMemberAttribute('NoneBeginTransEnd'),
        SysOperationLabelAttribute(literalstr("@SYS1046")),
        SysOperationHelpTextAttribute(literalstr("@SYS69638")),
        SysOperationGroupMemberAttribute('Printout'),
        SysOperationDisplayOrderAttribute('1')
    ]
    public NoneBeginTransEnd parmNoneBeginTransEnd(NoneBeginTransEnd _noneBeginTransEnd = noneBeginTransEnd)
    {
        noneBeginTransEnd = _noneBeginTransEnd;
        return noneBeginTransEnd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportPeriodStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ReportPeriodStartDate.
    /// </summary>
    /// <param name="_reportPeriodStartDate">
    /// The new value of the datacontract parameter ReportPeriodStartDate; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter ReportPeriodStartDate.
    /// </returns>
    [
        DataMemberAttribute('ReportPeriodStartDate'),
        SysOperationLabelAttribute(literalstr("@SYS77879")),
        SysOperationHelpTextAttribute(literalstr("@SYS67")),
        SysOperationGroupMemberAttribute('Empty'),
        SysOperationDisplayOrderAttribute('2')
    ]
    public FromDate parmReportPeriodStartDate(FromDate _reportPeriodStartDate = reportPeriodStartDate)
    {
        reportPeriodStartDate = _reportPeriodStartDate;
        return reportPeriodStartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ToDate.
    /// </summary>
    /// <param name="_toDate">
    /// The new value of the datacontract parameter ToDate; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter ToDate.
    /// </returns>
    [
        DataMemberAttribute('ToDate'),
        SysOperationLabelAttribute(literalstr("@SYS14656")),
        SysOperationHelpTextAttribute(literalstr("@SYS67")),
        SysOperationGroupMemberAttribute('Empty'),
        SysOperationDisplayOrderAttribute('3')
    ]
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencySelection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>ledgerCurrencySelection</c> parameter.
    /// </summary>
    /// <param name="_ledgerCurrencySelection">
    /// The value to set.
    /// </param>
    /// <returns>
    /// The value of the <c>ledgerCurrencySelection</c> parameter.
    /// </returns>
    [
        DataMemberAttribute('CurrencySelection'),
        SysOperationLabelAttribute(literalstr("@SYS129076")),
        SysOperationHelpTextAttribute(literalstr("@AccountsReceivable:CurrencySelectionText")),
        SysOperationGroupMemberAttribute('Empty'),
        SysOperationDisplayOrderAttribute('4')
    ]
    public LedgerCurrencySelection parmCurrencySelection(LedgerCurrencySelection _ledgerCurrencySelection = ledgerCurrencySelection)
    {
        ledgerCurrencySelection = _ledgerCurrencySelection;
        return ledgerCurrencySelection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the parameters.
    /// </summary>
    /// <returns>
    /// true if all parameters are valid; otherwise, false .
    /// </returns>
    public boolean validate()
    {
        if (! this.parmFromDate())
        {
            return checkFailed(strFmt("@SYS26332", "@SYS24050"));
        }

        if (this.parmFromDate() > this.parmReportPeriodStartDate())
        {
            if (!this.parmReportPeriodStartDate())
            {
                return checkFailed(strFmt("@SYS26332", "@SYS77879"));
            }

            return checkFailed(strFmt("@SYS55013", date2StrUsr(this.parmFromDate(), DateFlags::FormatAll), date2StrUsr( this.parmReportPeriodStartDate(), DateFlags::FormatAll)));
        }

        if (this.parmFromDate() > this.parmToDate())
        {
            return checkFailed("@SYS16982");
        }

        return CustBillingClassificationReportManager::validate(billingClassification, inclTransWithNoBillingClass);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>