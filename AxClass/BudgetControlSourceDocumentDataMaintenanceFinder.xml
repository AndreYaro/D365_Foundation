<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlSourceDocumentDataMaintenanceFinder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetControlSourceDocumentDataMaintenanceFinder</c> is responsible for finding which source documents
/// should be processed by data maintenance.
/// </summary>
internal final class BudgetControlSourceDocumentDataMaintenanceFinder
{
    private BudgetControlSourceDocumentDataMaintenanceRequest request;
    private Set sourceDocumentsToProcess;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static BudgetControlSourceDocumentDataMaintenanceFinder construct(BudgetControlSourceDocumentDataMaintenanceRequest _request)
    {
        BudgetControlSourceDocumentDataMaintenanceFinder finder = new BudgetControlSourceDocumentDataMaintenanceFinder();
        finder.request = _request;
        
        return finder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceDocumentsToProcess</Name>
				<Source><![CDATA[
    internal Set getSourceDocumentsToProcess()
    {
        if (this.request && !sourceDocumentsToProcess)
        {
            sourceDocumentsToProcess = new Set(Types::Int64);

            this.populateSourceDocuments();
        }

        return sourceDocumentsToProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSourceDocuments</Name>
				<Source><![CDATA[
    private void populateSourceDocuments()
    {
        BudgetControlISourceDocumentQueryable sourceDocQueryable = BudgetControlSourceDocumentQueryableFactory::getSourceIntegratorInstance(request.SourceIntegrator);
        
        if (sourceDocQueryable != null)
        {
            QueryRun queryRun = this.getSourceDocumentQuery(sourceDocQueryable);

            while (queryRun.next())
            {
                AccountingDistribution accountingDistribution = queryRun.get(tableNum(AccountingDistribution));
                if (!sourceDocumentsToProcess.in(accountingDistribution.SourceDocumentHeader))
                {
                    BudgetSource budgetSource = queryRun.get(tableNum(BudgetSource));
                    boolean requiresBudgetCheck = budgetSource.CheckResult != 0 && budgetSource.CheckResult != BudgetCheckResult::NoCheck;

                    if (requiresBudgetCheck ||
                        BudgetControlLedgerDimensionHelper::isLedgerDimensionEnabledForBudgetControl(Ledger::current(), accountingDistribution.LedgerDimension))
                    {
                        // Add the document if
                        // 1. The document has a budget source that needs to be checked (check result anything other than NoCheck) or
                        // 2. The ledger dimension is enabled for budget control
                        // Note: This will include documents with NoCheck checkResults. Since the configuration could have changed
                        //       since the document was last checked, the document might now need a budget check.
                        sourceDocumentsToProcess.add(accountingDistribution.SourceDocumentHeader);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceDocumentQuery</Name>
				<Source><![CDATA[
    private QueryRun getSourceDocumentQuery(BudgetControlISourceDocumentQueryable _sourceDocQueryable)
    {
        QueryRun queryRun = new SysQueryRun(new Query());

        // Source Document Implementation
        QueryBuildDataSource qbdsSourceDocImplementation = queryRun.query().addDataSource(_sourceDocQueryable.getTableId());

        qbdsSourceDocImplementation.addRange(_sourceDocQueryable.getTrackingNumberFieldId()).value(request.FilterValue);

        // AccountingDistribution
        QueryBuildDataSource qbdsAccountingDistribution = qbdsSourceDocImplementation.addDataSource(tableNum(AccountingDistribution));
        qbdsAccountingDistribution.fetchMode(QueryFetchMode::One2One);
        qbdsAccountingDistribution.joinMode(JoinMode::InnerJoin);
        qbdsAccountingDistribution.addLink(_sourceDocQueryable.getSourceDocumentHeaderFieldId(), fieldNum(AccountingDistribution, SourceDocumentHeader));

        QueryBuildRange accountingDateRange = qbdsAccountingDistribution.addRange(fieldNum(AccountingDistribution, AccountingDate));
        accountingDateRange.value(SysQueryRangeUtil::dateRange(request.FromDate, request.ToDate));

        qbdsAccountingDistribution.addGroupByAndSelectionField(fieldNum(AccountingDistribution, SourceDocumentHeader));
        qbdsAccountingDistribution.addGroupByAndSelectionField(fieldNum(AccountingDistribution, LedgerDimension));

        // BudgetSource
        QueryBuildDataSource qbdsBudgetSource = qbdsAccountingDistribution.addDataSource(tableNum(BudgetSource));
        qbdsBudgetSource.addLink(fieldNum(AccountingDistribution, SourceDocumentLine), fieldNum(BudgetSource, SourceDocumentLine));
        qbdsBudgetSource.fetchMode(QueryFetchMode::One2One);
        qbdsBudgetSource.joinMode(JoinMode::OuterJoin);
        qbdsBudgetSource.addSelectionField(fieldNum(BudgetSource, CheckResult), SelectionField::Max);

        return queryRun;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>