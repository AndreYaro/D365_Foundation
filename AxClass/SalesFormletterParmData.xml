<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesFormletterParmData</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class SalesFormletterParmData
extends formletterParmData
{
    SalesParameters salesParameters;
    SalesParmUpdate salesParmUpdate;
    SalesParmTable  salesParmTableReArrange;
    SalesTable      salesTable;
    CustParameters  custParameters;
    boolean         creditRemaining;
    SalesUpdate     specQty;
    boolean         specQtyIsSet;
    container       packedLineIdSet;
    boolean         directDeliveryUpdate;
    SalesTable      salesTableOrig;
    TypeOfCreditmaxCheck    checkCreditMax;
    SalesFormLetterContract salesFormLetterContract;
    //Giro
    boolean         giroAllSame;
    NoYes           defaultGiroType;
    boolean         deleteGiro;

    SalesSummary    salesSummary;
    SalesQuantity   salesQuantity;
    Common          relatedJournal;

    RefRecId                        inventTransRefRecId;
    boolean                         mcrIsShipAlone;
    RecordInsertList                mcrRecordInsertParmLineDualUnit;
    // <GEERU>
    boolean                     countryRegion_RU;
    CustInvoicePrintoutType_RU  invoicePrintoutType;
    GoodsInRouteId_RU           goodsInRouteId;
    Num                         documentStornoId;
    Correct_RU                  correct;
    CorrectedInvoiceId_RU       corrInvoiceId;
    CorrectedInvoiceDate_RU     corrInvoiceDate;
    boolean                     storno;
    boolean                     stornoPhysical;
    boolean                     needTransIDTransit;

    SalesParmTable              salesParmTableFilter;

    // Latvia
    NoYes                       useStateInvoice;
    InvoiceId                   lastInvoiceUsed;

    boolean                     skipLineCreate;
    InventTrans                 chooseLineInventTrans;
    WHSLoadId                   whsLoadId;
    boolean                     validateLoadStatus;
    boolean                     isPostingTransportLoads;
    // </GEERU>

    // <GIN>
    CustomsExportOrderTable_IN  customsExportOrderTable;
    CustomsExportOrderLine_IN   customsExportOrderLine;
    CustomsExportOrderType_IN   customsExportOrderType;
    NoYesId                     taxesMarked;
    NoYesId                     customsMarked;
    boolean                     isCountryRegionIN;
    // </GIN>

    // <GEERU><GIN>
    #ISOCountryRegionCodes
    ProjInvoiceParmTable        projInvoiceParmTable;
    // </GIN></GEERU>
    // <GEEPL>
    boolean                     countryRegion_PL;
    InventLocationId            inventLocationId;
    // </GEEPL>

    private TradeLineRefId parmTableRefIdSynched;

    // <GEEU>
    #EECountryRegionCodes
    // </GEEU>
    // <GBR>
    boolean                     countryRegion_BR;

    // <GCN>
    boolean                     isTaxIntegrationSystemEnable;
    // </GCN>

    private SalesFormLetterInstrumentationLogger  instrumentationLogger;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAutomaticTotalDiscount</Name>
				<Source><![CDATA[
    protected void calcAutomaticTotalDiscount(SalesTable _salesTable)
    {
        //disable auto-total discount for pos orders
        if (RetailParameters::isRetailEnabledAndInUse() && _salesTable.isRetailSale())
        {
            return;
        }

        // <GEERU>
        if (this.mustUpdateFinalDiscount(custParameters, goodsInRouteId))
        // </GEERU>
        {
            _salesTable = SalesTable::findRecId(_salesTable.RecId, true);
            _salesTable.updateFinalDisc();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPreallocatedPackingSlipIdOnParmTable</Name>
				<Source><![CDATA[
    internal void initPreallocatedPackingSlipIdOnParmTable(SalesParmTable _salesParmTable)
    {
        //internal to allow override
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateFinalDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines if final discount must be updated.
    /// </summary>
    /// <param name = "_custParameters">Customer parameters.</param>
    /// <param name = "_goodsInRouteId">Journal ID of passing of property.</param>
    /// <returns>true if final discount must be updated; otherwise, false.</returns>
    protected boolean mustUpdateFinalDiscount(CustParameters _custParameters, GoodsInRouteId_RU _goodsInRouteId)
    {
        return _custParameters.AutomaticTotalDiscount && !_goodsInRouteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxWorkRegulation</Name>
				<Source><![CDATA[
    protected boolean checkTaxWorkRegulation()
    {
        boolean             ret = true;
        SalesParmSubTable   localSalesParmSubTable;
        SalesTable          localSalesTable;
        TaxWorkRegulation   localTaxWorkRegulation;

        setPrefix("@SYS82342");

        // <GEERU>
        if (this.parmDocumentStornoId_RU())
        {
            return ret;
        }
        // </GEERU>

        // If summary update is none, do not check tax adjustments.
        if (salesParmUpdate.SumBy == AccountOrder::None)
        {
            return ret;
        }

        while select forceplaceholders localSalesTable
            join TableId from localSalesParmSubTable
            where localSalesParmSubTable.ParmId    == this.parmId()   &&
                  localSalesTable.SalesId          == localSalesParmSubTable.OrigSalesId
            exists join localTaxWorkRegulation
                    where localTaxWorkRegulation.HeadingTableId == localSalesTable.TableId
                       && localTaxWorkRegulation.HeadingRecId == localSalesTable.RecId
        {
            ret = false;
            error(strFmt("@SYS82332", localSalesTable.SalesId), '', SysInfoAction_TableField::newBufferField(localSalesTable, fieldNum(SalesTable, SalesId)));
        }

        if (!ret)
        {
            info("@SYS82333" + '\n' +
                 "@SYS82345");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseLinesGetInventOwner_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets InventOwnerId of the current source line from the <c>ChooseLines</c> query.
    /// </summary>
    /// <returns>
    ///    The InventOwnerId.
    /// </returns>
    protected InventOwnerId_RU chooseLinesGetInventOwner_RU()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>createData_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>SalesParmTable</c> table records based on the chooseLines query.
    /// </summary>
    /// <param name="_customsExportOrderType">
    /// A CustomsExportOrderType_IN enum value which determines which type of orders to be queried by the chooseLines query.
    /// </param>
    /// <param name="_append">
    /// A Boolean value which determines whether existing records should be removed.
    /// </param>
    public void createData_IN(
        CustomsExportOrderType_IN _customsExportOrderType,
        boolean                   _append = false)
    {
        #OCCRetryCount

        try
        {
            ttsbegin;
            if (!this.parmParmUpdate().RecId)
            {
                Common localParmUpdate = this.createParmUpdate();
                this.insertParmUpdate(localParmUpdate);
            }

            if (!onlyCreateParmUpdate)
            {
                if (skipInitChooseLinesQuery)
                {
                    this.selectChooseLines(_append);
                }
                else
                {
                    this.updateQueryBuild_IN(_customsExportOrderType);
                    this.parmCustomsExportOrderType_IN(_customsExportOrderType);

                    if (!_append)
                    {
                        this.deleteParmTables();
                    }

                    if (!this.lateSelection() || this.parmExecuteLateSelection())
                    {
                        this.selectChooseLines(_append);
                    }

                    QueryBuildDataSource qbds = chooseLines.query().dataSourceTable(this.sourceTableTableId());
                    if (qbds)
                    {
                        qbds.enabled(true);
                    }
                }
            }
            this.fillOutputContract();
            ttscommit;
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (SysTransientSqlConnectionErrorHandler::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw Exception::TransientSqlConnectionError;
            }
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch
        {
            this.catchAll();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromHistoryParmLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records in the order line posting table.
    /// </summary>
    /// <param name="_parmTable">
    /// A previously posted order header record.
    /// </param>
    protected void createFromHistoryParmLines(Common _parmTable)
    {
        SalesParmTable  parmTable = _parmTable as SalesParmTable;
        SalesParmLine   salesParmLine;

        super(_parmTable);

        while select salesParmLine
            where salesParmLine.ParmId     == parmTable.ParmId &&
                  salesParmLine.TableRefId == parmTable.TableRefId
        {
            SalesParmLine salesParmLineNew = salesParmLine.data();
            salesParmLineNew.ParmId = this.parmId();
            this.insertParmLine(salesParmLineNew);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromHistoryParmSubTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records in the order header sub posting table.
    /// </summary>
    /// <param name="_parmTable">
    /// A previously posted order header record.
    /// </param>
    protected void createFromHistoryParmSubTables(Common _parmTable)
    {
        SalesParmTable      parmTable = _parmTable as SalesParmTable;
        SalesParmSubTable   salesParmSubTable;

        super(_parmTable);

        while select salesParmSubTable
            where salesParmSubTable.ParmId     == parmTable.ParmId &&
                  salesParmSubTable.TableRefId == parmTable.TableRefId
        {
            SalesParmSubTable salesParmSubTableNew = salesParmSubTable.data();
            salesParmSubTableNew.ParmId = this.parmId();
            this.insertParmSubTable(salesParmSubTableNew);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromHistoryParmTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record in the order header posting table.
    /// </summary>
    /// <param name="_parmTable">
    /// A previously posted order header record.
    /// </param>
    /// <remarks>
    /// The method must be overridden in child classes if posting from history is supported.
    /// </remarks>
    protected void createFromHistoryParmTable(Common _parmTable)
    {
        SalesParmTable  parmTable = _parmTable as SalesParmTable;

        super(_parmTable);

        SalesParmTable salesParmTableNew = parmTable.data();
        salesParmTableNew.ParmId = this.parmId();
        this.insertParmTable(salesParmTableNew);

        SalesShippingStat::transferToUpdate(this.parmId(), parmTable.ParmId, parmTable.TableRefId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a new journal must be created.
    /// </summary>
    /// <param name="_salesParmSubTable">
    ///    The update table from the sales order.
    /// </param>
    /// <returns>
    ///    true if a new journal must be created; otherwise, false.
    /// </returns>
    protected boolean createNewJournal(SalesParmSubTable _salesParmSubTable)
    {
        boolean ret;
        Common common;

        if (salesParmUpdate.SumBy == AccountOrder::Journal)
        {
            common = _salesParmSubTable;
        }
        else
        {
            common = salesTable;
        }
        if  (salesTable && salesSummary.createNewJournal(common))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxIdDuringCreatingParmLinesAndTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Call tax calculation to get the TaxId for splitting the order.
    /// This method should be called in createParmLinesAndTable method.
    /// </summary>
    internal void updateTaxIdDuringCreatingParmLinesAndTable()
    {
        if (TaxIntegrationMultipleTaxIdForSalesOrderFlight::instance().isEnabled())
        {
            if (TaxIntegrationTaxCalcForSplittingSalesOrderPerTaxIdFlight::instance().isEnabled()
                && TaxIntegrationUtils::isMultipleTaxIdAllowedWithinOneSalesOrder())
            {
                SalesParmUpdate salesParmUpdateLoc = this.parmParmUpdate() as SalesParmUpdate;
                if (salesParmUpdate.SplitTaxId)
                {
                    if (chooseLines.changed(tableNum(SalesTable)))
                    {
                        SalesTable salesTableLoc = this.chooseLinesGetSourceTable();
                        SalesTotals::getTaxV2(salesTableLoc);
                    }

                    if (chooseLines.changed(tableNum(SalesLine)))
                    {
                        Common sourceLineTable = this.chooseLinesGetSourceLine();
                        sourceLineTable.reread();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmLine</Name>
				<Source><![CDATA[
    protected boolean createParmLine(Common           _salesLineOrig,
                                     TradeLineRefId   _tableRefId,
                                     InventOwnerId_RU _inventOwnerId = '',
                                     boolean          _mcrShipAlone = false
                                     )
    {
        SalesLine             salesLineOrig = _salesLineOrig as SalesLine;
        VendDocumentLineMap   parmLine;
        SalesParmLine         localSalesParmLine;
        boolean               lineCreated = false;
        container             quantities = versioningStrategy.getLineQuantities(_salesLineOrig);
        SalesQty              salesQty = conPeek(quantities, #posNewQty);
        InventQty             inventQty = conPeek(quantities, #posNewInventQty);
        SalesQty              remainAfter;
        container             cwQuantities;
        PdsCWInventQty        pdsCWQty;
        InventDimId           inventDimId;
        boolean               closed;

        boolean isCwItem = PdsGlobal::pdsIsCWItem(salesLineOrig.ItemId);

        if (isCwItem)
        {
            cwQuantities = versioningStrategy.pdsCWGetLineQuantities(salesLineOrig);
            pdsCWQty     = conPeek(cwQuantities, #PosNewCWQty);
        }

        // <GEERU>
        if (countryRegion_RU)
        {
            if (prmisDefault(_inventOwnerId))
            {
                _inventOwnerId = this.inventOwnerId_RU(_salesLineOrig);
                if (skipLineCreate)
                {
                    return false;
                }
            }
            if (_inventOwnerId && !SalesFormLetter::useInventOwnerIdRange_RU(this.splitInventOwnerId_RU(), this.parmDocumentStatus(), _salesLineOrig))
            {
                return false;
            }
        }
        // </GEERU>

        versioningStrategy.initSourceLine(_salesLineOrig);

        // Do not create parm line if criteria do not allow
        if (this.mustCreateParmLine(_salesLineOrig))
        {
            localSalesParmLine.clear();
            // <GEERU>
            if (countryRegion_RU)
            {
                this.initSalesQuantityInventOwner_RU(_salesLineOrig, _inventOwnerId);
                localSalesParmLine.InventOwnerId_RU = _inventOwnerId;
            }
            // </GEERU>

            if (this.parmInterCompanyParmId()
            && !this.parmInterCompanyParmSelectFromJournal())
            {
                parmLine = this.interCompanyParmLine(salesLineOrig);
                if (!interCompanyCompanyId)
                {
                    inventDimId = parmLine.InventDimId;
                }
                closed = parmLine.Closed;
                salesQty = this.interCompanyParmLineQty(_salesLineOrig);
                inventQty = this.interCompanyParmLineQty(_salesLineOrig, true);
                if (isCwItem)
                {
                    pdsCWQty = this.pdsCWInterCompanyParmLineQty(_salesLineOrig);
                }
            }
            else if ((salesLineOrig.DeliveryType == TradeLineDlvType::DropShip) && this.parmParmIdSynched())
            {
                PurchParmLine localPurchParmLine;

                TradeLineRefId parmLineTableRefId = this.parmParmTableRefIdSynched();
                boolean needReduceRemainAfter = SalesFormletterParmDirectDeliveryReduceRemainAfterFlight::instance().isEnabled();

                if (parmLineTableRefId)
                {
                    parmLine = this.findParmLineTableRefId(this.parmParmIdSynched(), salesLineOrig.InventRefTransId, parmLineTableRefId);

                    select sum(ReceiveNow), sum(InventNow), sum(PdsCWReceiveNow), sum(Closed), sum(RemainAfter) from localPurchParmLine
                        where localPurchParmLine.ParmId == this.parmParmIdSynched()
                            && localPurchParmLine.InventTransId == salesLineOrig.InventRefTransId
                            && localPurchParmLine.TableRefId == parmLineTableRefId;
                }
                else
                {
                    parmLine = this.findParmLine(this.parmParmIdSynched(), salesLineOrig.InventRefTransId);

                    select sum(ReceiveNow), sum(InventNow), sum(PdsCWReceiveNow), sum(Closed), sum(RemainAfter) from localPurchParmLine
                        where localPurchParmLine.ParmId == this.parmParmIdSynched()
                            && localPurchParmLine.InventTransId == salesLineOrig.InventRefTransId;
                }
                
                using (var activityContext = this.instrumentationLogger().salesFormLetterParmDataActivities().updatePurchParmLineDropShip(localPurchParmLine))
                {
                    // In case multiple PurchParmLines exist we still create only one SalesParmLine but need to use the full quantities from the PurchParmLines
                    if (localPurchParmLine.ReceiveNow != parmLine.ReceiveNow)
                    {
                        parmLine.ReceiveNow = localPurchParmLine.ReceiveNow;
                        parmLine.InventNow = localPurchParmLine.InventNow;
                        parmLine.PdsCWReceiveNow = localPurchParmLine.PdsCWReceiveNow;
                        parmLine.Closed = localPurchParmLine.Closed;
                        parmLine.RemainAfter = localPurchParmLine.RemainAfter;

                        if (needReduceRemainAfter
                        && TradePostProdReceiptRecalcRemainAfterQtyFlight::instance().isEnabled()
                        && this.parmDocumentStatus() == DocumentStatus::PackingSlip
                        && WMSJournalTrans::findInventTransIdTransType(salesLineOrig.InventRefTransId, InventTransType::Purch).isPosted())
                        {
                            parmLine.RemainAfter = this.calculateRemainInventoryQuantityAfter(parmLine);
                        }
                    }
                    else
                    {
                        // InventDimId has been initialized from SalesLine. Only set from PurchParmLine if there is not multiple PurchParmLine records.
                        inventDimId = parmLine.InventDimId;
                    }
                }

                PurchLine purchLine = PurchLine::findInventTransId(salesLineOrig.InventTransId);

                using (var activityContext = this.instrumentationLogger().salesFormLetterParmDataActivities().updatePurchLineDropShip(purchLine))
                {
                    salesQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                    salesLineOrig.ItemId,
                    salesLineOrig.InventDimId,
                    parmLine.ReceiveNow,
                    purchLine.PurchUnit,
                    salesLineOrig.SalesUnit,
                    NoYes::Yes);

                    inventQty = parmLine.InventNow;

                    pdsCWQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                    salesLineOrig.ItemId,
                    salesLineOrig.InventDimId,
                    parmLine.PdsCWReceiveNow,
                    purchLine.PurchUnit,
                    salesLineOrig.SalesUnit,
                    NoYes::Yes);

                    if (needReduceRemainAfter)
                    {
                        remainAfter = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                        salesLineOrig.ItemId,
                        salesLineOrig.InventDimId,
                        parmLine.RemainAfter,
                        purchLine.PurchUnit,
                        salesLineOrig.SalesUnit,
                        NoYes::Yes);
                    }

                    closed = parmLine.Closed;
                }
            }

            if (this.isPostFromLoad_BR())
            {
                // For performance reasons, salesQty and inventQty will be retrieved at the same method in order to allow a single query against WHSLoadLine
                [salesQty, inventQty] = this.getSalesQtyInventQtyFromLoad_BR(_salesLineOrig);
            }

            this.initializeSalesParmLineQuantities(localSalesParmLine, salesLineOrig, salesQty, inventQty);

            if (isCwItem)
            {
                [localSalesParmLine.PdsCWDeliverNow, localSalesParmLine.PdsCWRemainBefore, localSalesParmLine.PdsCWRemainAfterInvent] = this.pdsCWQty(_salesLineOrig, pdsCWQty);
            }
            
            if (closed)
            {
                localSalesParmLine.Closed = parmLine.Closed;
                localSalesParmLine.RemainAfter = 0;
                localSalesParmLine.setRemainAfterInvent();
                localSalesParmLine.PdsCWRemainAfterInvent = 0;
            }
            else if (this.isDirectDeliverySynchedWithRemainingQuantity(remainAfter, localSalesParmLine, salesLineOrig))
            {
                localSalesParmLine = this.adjustRemainingInventoryQuantity(localSalesParmLine, remainAfter, salesLineOrig);
            }

            //Set ship alone quantities
            if (this.parmMCRIsShipAlone())
            {
                this.mcrSetShipAloneQuantities(localsalesParmLine, salesLineOrig);
            }

            if (!this.isQuantityValidForParmLineCreation(salesLineOrig, localSalesParmLine))
            {
                return false;
            }

            // <GEEU>
            if (versioningStrategy.shouldCreateParmLine(localSalesParmLine) ||
                salesLineOrig.CreditNoteInternalRef_PL) // GEEU Credit note - add zero line
            // </GEEU>
            {
                this.createParmLineRecord(salesLineOrig, localSalesParmLine, quantities, cwQuantities, _tableRefId, isCwItem, inventDimId);
                lineCreated = true;
            }
        }

        return lineCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDirectDeliverySynchedWithRemainingQuantity</Name>
				<Source><![CDATA[
    private boolean isDirectDeliverySynchedWithRemainingQuantity(SalesQty _remainAfter, SalesParmLine _localSalesParmLine, SalesLine _salesLineOrig)
    {
        return SalesFormletterParmDirectDeliveryReduceRemainAfterFlight::instance().isEnabled()
            && _remainAfter != _localSalesParmLine.RemainAfter
            && _salesLineOrig.DeliveryType == TradeLineDlvType::DropShip
            && this.parmParmIdSynched();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateRemainInventoryQuantityAfter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Need to recalculate localPurchParmLine.remainAfter field value because the total RemainAfter from multiple purchase parm lines that are generated from
    /// the same purchase line will be larger than actual remainAfter qty.
    /// i.e. There is a purchase line with qty 3 after splitting into 3 item arrival journal lines with different inventory dimension, then three purchase parm lines will be
    /// created and each parm line will have purchase qty 1 and remainAfter qty 2 (3-1), and the total remainAfter qty will be wrong qty 6 after summarizing.
    /// </summary>
    /// <param name = "_parmLine">An instance of VendDocumentLineMap.</param>
    /// <returns>Recalculated RemainAfter quantity.</returns>
    private PurchQty calculateRemainInventoryQuantityAfter(VendDocumentLineMap _parmLine)
    {
        PurchLine localPurchLine = _parmLine.purchLine().data();
        localPurchLine.PdsCWInventReceivedNow = _parmLine.PdsCWReceiveNow;
        localPurchLine.PurchReceivedNow = _parmLine.ReceiveNow;
        PurchQuantity purchQuantity = PurchQuantity::construct(DocumentStatus::PackingSlip);

        return conPeek(purchQuantity.qtyPurch(localPurchLine, PurchUpdate::ReceiveNow, localPurchLine.PurchReceivedNow), 3);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustRemainingInventoryQuantity</Name>
				<Source><![CDATA[
    private SalesParmLine adjustRemainingInventoryQuantity(SalesParmLine _localSalesParmLine, SalesQty _remainAfter, SalesLine _salesLineOrig)
    {
        _localSalesParmLine.RemainAfter = _remainAfter;

        if (_salesLineOrig.isStocked())
        {
            _localSalesParmLine.RemainAfterInvent = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_salesLineOrig.ItemId,
                        _salesLineOrig.InventDimId,
                        _localSalesParmLine.RemainAfter,
                        _salesLineOrig.SalesUnit,
                        _salesLineOrig.inventTable().inventUnitId(),
                        NoYes::Yes);
        }

        if (PdsGlobal::pdsIsCWItem(_salesLineOrig.ItemId))
        {
            _localSalesParmLine.PdsCWRemainAfterInvent = PdsCatchWeight::cwQty(_salesLineOrig.ItemId,
                        _localSalesParmLine.RemainAfterInvent);
        }

        return _localSalesParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSalesParmLineQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the quantity fields on the sales update line.
    /// </summary>
    /// <param name = "_salesParmLine">
    /// A <c>SalesParmLine</c> record buffer.
    /// </param>
    /// <param name = "_salesLineOrig">
    /// The original sales order line to initialize the quantities from.
    /// </param>
    /// <param name = "_salesQty">
    /// Sales quantity.
    /// </param>
    /// <param name = "_inventQty">
    /// Inventory quantity.
    /// </param>
    protected void initializeSalesParmLineQuantities(SalesParmLine _salesParmLine, SalesLine _salesLineOrig, SalesQty _salesQty, InventQty _inventQty)
    {
        this.initSalesQty(_salesParmLine, this.qtySales(_salesLineOrig, _salesQty));
        this.initInventQty(_salesParmLine, this.qtyInvent(_salesLineOrig, _inventQty));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the sales quantity field on the sales update line.
    /// </summary>
    /// <param name = "_salesParmLine">
    /// A <c>SalesParmLine</c> record buffer.
    /// </param>
    /// <param name = "_qty">
    /// Container with quantities.
    /// </param>
    protected void initSalesQty(SalesParmLine _salesParmLine, container _qty)
    {
        [_salesParmLine.DeliverNow, _salesParmLine.RemainBefore, _salesParmLine.RemainAfter] = _qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the invent quantity field on the sales update line.
    /// </summary>
    /// <param name = "_salesParmLine">
    /// A <c>SalesParmLine</c> record buffer.
    /// </param>
    /// <param name = "_qty">
    /// Container with quantities.
    /// </param>
    protected void initInventQty(SalesParmLine _salesParmLine, container _qty)
    {
        [_salesParmLine.InventNow, _salesParmLine.RemainBeforeInvent, _salesParmLine.RemainAfterInvent]  = _qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmLineRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>SalesParmLine</c> record.
    /// </summary>
    /// <param name = "_salesLineOrig">
    /// The original <c>SalesLine</c> record to initialize from.
    /// </param>
    /// <param name = "_salesParmLine">
    /// The <c>SalesParmLine</c> record to be created.
    /// </param>
    /// <param name = "_quantities">
    /// A container that contains the new document unit of measure quantity, the new inventory unit quantity,
    /// the previous document unit quantity, and the previous inventory unit quantity.
    /// </param>
    /// <param name = "_cwQuantities">
    /// A container that contains the new catch weight unit quantity and the previous catch weight unit quantity.
    /// </param>
    /// <param name = "_tableRefId">
    /// The <c>TradeLineRefId</c> to be assigned to the created record.
    /// </param>
    /// <param name = "_isCwItem">
    /// A boolean indicating whether it is a catch weight item or not.
    /// </param>
    /// <param name = "_inventDimId">
    /// The <c>InventDimId</c> to be assigned to the created record.
    /// </param>
    protected void createParmLineRecord(SalesLine _salesLineOrig,
                                         SalesParmLine _salesParmLine,
                                         container _quantities,
                                         container _cwQuantities,
                                         TradeLineRefId _tableRefId,
                                         boolean _isCwItem,
                                         InventDimId _inventDimId)
    {
        if (salesTableOrig.SalesId != _salesLineOrig.SalesId)
        {
            salesTableOrig = _salesLineOrig.salesTable();
        }

        this.interCompanyUpdateSalesPrice(_salesLineOrig);

        this.initCreatedSalesParmLineRecord(_salesParmLine, _salesLineOrig, _quantities, _tableRefId);

        // <GIN>
        this.setAssessableValueTransactionCurrency_IN(_salesLineOrig, _salesParmLine);
        // </GIN>

        if (_isCwItem)
        {
            _salesParmLine.PdsCWPreviousDeliverNow = conPeek(_cwQuantities, #posPreviousCWQty);
        }

        if (_inventDimId)
        {
            _salesParmLine.InventDimId = _inventDimId;
        }

        this.insertParmLine(_salesParmLine);

        this.allowCreateParmTable(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCreatedSalesParmLineRecord</Name>
				<Source><![CDATA[
    private void initCreatedSalesParmLineRecord(SalesParmLine _salesParmLine, SalesLine _salesLineOrig, container _quantities, TradeLineRefId _tableRefId)
    {
        _salesParmLine.ParmId = this.parmId();
        _salesParmLine.initFromSalesLine(_salesLineOrig, salesTableOrig);
        _salesParmLine.setLineAmount(_salesLineOrig);
        _salesParmLine.calcPackingUnitQty();
        _salesParmLine.TableRefId = _tableRefId;
        _salesParmLine.PreviousDeliverNow = conPeek(_quantities, #posPreviousQty);
        _salesParmLine.PreviousInventNow = conPeek(_quantities, #posPreviousInventQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAssessableValueTransactionCurrency_IN</Name>
				<Source><![CDATA[
    private void setAssessableValueTransactionCurrency_IN(SalesLine _salesLineOrig, SalesParmLine _salesParmLine)
    {
        if (isCountryRegionIN && _salesLineOrig.SalesQty != 0)
        {
            SalesParmLine_IN salesParmLineIN;
            if (!TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
            {
                RealBase factor = _salesLineOrig.salesLine_IN().AssessableValueTransactionCurrency / _salesLineOrig.SalesQty;
                salesParmLineIN.AssessableValueTransactionCurrency = factor * _salesParmLine.DeliverNow;
            }
            else
            {
                salesParmLineIN.AssessableValueTransactionCurrency = _salesParmLine.getMiscChargesAmount_IN(_salesLineOrig.TableId, _salesLineOrig.RecId, this.parmDocumentStatus());
            }
            _salesParmLine.packSalesParmLine_IN(salesParmLineIN);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the parm line must be created.
    /// </summary>
    /// <param name = "_salesLineOrig">A <c>SalesLine</c> record.</param>
    /// <returns>true if the parm line must be created; otherwise, false.</returns>
    protected boolean mustCreateParmLine(SalesLine _salesLineOrig)
    {
        return (_salesLineOrig.RecId && this.allowCreateParmLine(_salesLineOrig, _salesLineOrig.salesTable()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQuantityValidForParmLineCreation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the quantity is valid for the parm line to be created.
    /// </summary>
    /// <param name = "_salesLineOrig">A <c>SalesLine</c> record.</param>
    /// <param name = "_salesParmLine">A <c>SalesParmLine</c> record.</param>
    /// <returns>true if the quantities on the parm line are valid for the parm line to be created; otherwise, false.</returns>
    protected boolean isQuantityValidForParmLineCreation(SalesLine _salesLineOrig, SalesParmLine _salesParmLine)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmSubTable</Name>
				<Source><![CDATA[
    protected void createParmSubTable(Common _salesParmTable)
    {
        SalesParmSubTable salesParmSubTable = this.createSalesParmSubTableFromSalesParmTable(_salesParmTable);
        this.insertParmSubTable(salesParmSubTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesParmSubTableFromSalesParmTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>SalesParmSubTable</c> record from the passed <c>SalesParmTable</c> record.
    /// </summary>
    /// <param name = "_salesParmTable">
    /// The <c>SalesParmTable</c> record to initialize from.
    /// </param>
    /// <returns>
    /// The <c>SalesParmSubTable</c> record.
    /// </returns>
    protected SalesParmSubTable createSalesParmSubTableFromSalesParmTable(Common _salesParmTable)
    {
        return SalesParmSubTable::createFromSalesParmTable(_salesParmTable as SalesParmTable, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmTable</Name>
				<Source><![CDATA[
    protected Common createParmTable(Common               _salesTable,
                                     Common               _salesLine,
                                     TradeLineRefId       _tableRefId,
                                     boolean              _skipParmSubTable  = false,
                                     CustPostingProfile   _postingProfile    = '',
                                     InventProfileType_RU _inventProfileType = InventProfileType_RU::General,
                                     InventOwnerId_RU     _inventOwnerId = '',
                                     MCRPackingBoxName     _mcrPackingBoxName = '')
    {
        SalesTable localSalesTable = _salesTable as SalesTable ;
        SalesLine  localSalesLine;
        
        if (countryRegion_RU || countryRegion_BR)
        {
            localSalesLine  = _salesLine  as SalesLine;
        }

        if(countryRegion_RU)
        {
            if(prmisDefault(_postingProfile))
            {
                _postingProfile = this.postingProfile_RU(localSalesLine.PostingProfile_RU, localSalesTable.PostingProfile);
            }

            if(prmisDefault(_inventProfileType))
            {
                _inventProfileType = this.inventProfileType_RU(localSalesLine);
            }

            if(prmisDefault(_inventOwnerId))
            {
                _inventOwnerId = this.inventOwnerId_RU(localSalesLine);
            }
        }

        this.calcAutomaticTotalDiscount(localSalesTable);

        SalesParmTable salesParmTable = this.initParmTable(localSalesTable,
                                                           _salesLine,
                                                           _tableRefId,
                                                           _postingProfile,
                                                           _inventProfileType,
                                                           _inventOwnerId,
                                                           _mcrPackingBoxName);

        this.insertParmTable(salesParmTable);

        if (!_skipParmSubTable)
        {
            this.createParmSubTable(salesParmTable);
        }

        this.tableRefIdUsed(true);
        this.allowCreateParmTable(this.parmAllowEmptyParmTable());

        return salesParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>SalesParmTable</c> record.
    /// </summary>
    /// <param name = "_salesTable">A <c>SalesTable</c> record used to initialize the <c>SalesParmTable</c>.</param>
    /// <param name = "_salesLine">A <c>SalesLine</c> record used to initialize the <c>SalesParmTable</c>.</param>
    /// <param name = "_tableRefId">Trade line reference used to initialize the <c>SalesParmTable</c>.</param>
    /// <param name = "_postingProfile">Customer posting profile.</param>
    /// <param name = "_inventProfileType">Inventory profile type.</param>
    /// <param name = "_inventOwnerId">Inventory owner ID.</param>
    /// <param name = "_mcrPackingBoxName">The packing box name.</param>
    /// <returns>The initialized <c>SalesParmTableRecord</c>.</returns>
    protected SalesParmTable initParmTable(SalesTable           _salesTable,
                                           Common               _salesLine,
                                           TradeLineRefId       _tableRefId,
                                           CustPostingProfile   _postingProfile,
                                           InventProfileType_RU _inventProfileType,
                                           InventOwnerId_RU     _inventOwnerId,
                                           MCRPackingBoxName     _mcrPackingBoxName)
    {
        SalesParmTable salesParmTable;
        salesParmTable.initFromSalesTable(_salesTable);

        if (_salesLine.RecId)
        {
            this.updateTableSplit(salesParmTable, _salesLine);
        }

        if (this.parmCallerTable().TableId == tableNum(CustPackingSlipJour))
        {
            salesParmTable.CustPackingSlipJour = this.parmCallerTable().RecId;

            if (this.parmVersioningStrategy()                                                            &&
                    this.parmVersioningStrategy().parmVersioningUpdateType() == VersioningUpdateType::Cancel &&
                    BankLCExportFeatureChecker::checkBankLCExportEnabled())
            {
                salesParmTable.BankLCExportLine = CustPackingSlipJour::findRecId(salesParmTable.CustPackingSlipJour).BankLCExportLine;
            }
        }
        salesParmTable.MCRPackingBoxName    = _mcrPackingBoxName;
        salesParmTable.Transdate            = this.parmTransDate();

        this.initPreallocatedPackingSlipIdOnParmTable(salesParmTable);

        if (!salesParmTable.SalesDate_W && countryRegion_PL && this.parmInterCompanyParmId())
        {
            salesParmTable.SalesDate_W = salesParmTable.Transdate;
        }

        salesParmTable.ParmId               = this.parmId();
        salesParmTable.Ordering             = this.parmDocumentStatus();
        salesParmTable.TableRefId           = _tableRefId;
        salesParmTable.BatchAdministration  = multiForm;
        salesParmTable.ParmJobStatus        = ParmJobStatus::Waiting;
        salesParmTable.CustBankAccountId    = this.custBankAccountId(_salesTable);

        salesParmTable.calcCashDiscBaseDate();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoFR]))
        {
            salesParmTable.PrintOverdueFineTxt_FR = NoYes::Yes;
        }

        if (isCountryRegionIN
                 && taxesMarked)
        {
            SalesLine  salesLine;
            if (tableNum(SalesLine) == _salesLine.TableId)
            {
                salesLine =  _salesLine;
            }

            TransTaxInformation transTaxInformation = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(salesLine);
            salesParmTable.TaxInformation_IN = TaxInformation_IN::findDefaultbyLocation(transTaxInformation.CompanyLocation).RecId;
        }
            
        if (countryRegion_RU)
        {
            salesParmTable.PostingProfile_RU    = _postingProfile;
            salesParmTable.InventProfileType_RU = _inventProfileType;
            salesParmTable.InventOwnerId_RU     = _inventOwnerId;

            salesParmTable.GoodsInRouteId_RU        = this.parmGoodsInRouteId_RU();
            salesParmTable.DocumentStornoId_RU      = this.parmDocumentStornoId_RU();
            salesParmTable.Correct_RU               = this.parmCorrect_RU();
            salesParmTable.CorrectedInvoiceId_RU    = this.parmCorrectedInvoiceId_RU();
            salesParmTable.CorrectedInvoiceDate_RU  = this.parmCorrectedInvoiceDate_RU();
            salesParmTable.NeedTransIDTransit_RU    = this.parmNeedTransIDTransit_RU();
            
            salesParmTable.UseOriginalDocumentAsFacture_RU = this.getUseOriginalDocumentAsFacture_RU(_salesTable);

            if (salesParmTable.GoodsInRouteId_RU)
            {
                salesParmTable.InvoicePostingType_RU = SalesInvoicePostingType_RU::GoodsInRoute;
            }
        }

        switch (salesParmTable.Ordering)
        {
            case DocumentStatus::PackingSlip :
                salesParmTable.DocAutoNumbering_LT = salesTable.PackingSlipAutoNumbering_LT;
                break;

            case DocumentStatus::Invoice     :
                salesParmTable.DocAutoNumbering_LT = salesTable.InvoiceAutoNumbering_LT;
                break;
        }

        if (countryRegion_BR
                && !(RetailParameters::isRetailEnabledAndInUse()
                     && _salesTable.isRetailStatement_BR()))
        {
            if (salesParmTable.FiscalDocumentType_BR && this.parmDocumentStatus() != DocumentStatus::PickingList)
            {
                FiscalDocumentType_BR fiscalDocumentType = FiscalDocumentType_BR::findRecId(salesParmTable.FiscalDocumentType_BR);
                salesParmTable.FiscalDocumentModel_BR  = fiscalDocumentType.FiscalDocumentModel;
                salesParmTable.FiscalDocumentSeries_BR = FiscalDocumentType_BR::getFiscalDocumentSeries(fiscalDocumentType.RecId);
                salesParmTable.FiscalDocumentSpecie_BR = fiscalDocumentType.FiscalDocumentSpecie;
                salesParmTable.FiscalDocumentNumber_BR = salesParmTable.salesTable().hasIssueFiscalDocument_BR() ? "@SYS11318" : '';
            }

            if (BrazilParameters::find().ChronologicalInvoiceNumbering
                    && FiscalDocumentType_BR::findRecId(salesParmTable.FiscalDocumentType_BR).InvoiceIssueDate)
            {
                salesParmTable.Transdate = FiscalDocumentType_BR::findRecId(salesParmTable.FiscalDocumentType_BR).InvoiceIssueDate;
            }
        }

        if (proforma)
        {
            salesParmTable.IssueOwnEntryCertificate_W = NoYes::No;
        }

        return salesParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record in the order posting parameter table.
    /// </summary>
    /// <returns>
    /// The inserted record.
    /// </returns>
    protected Common createParmUpdate()
    {
        if (parmUpdateSysLastValue)
        {
            salesParmUpdate.initFromSysLastValue(parmUpdateSysLastValue);
        }
        else
        {
            this.initParmDefaultCreditRemaining();
        }
        salesParmUpdate.ParmId                   = this.parmId();
        salesParmUpdate.DocumentStatus           = this.parmDocumentStatus();
        salesParmUpdate.CheckCreditMax           = this.defaultCheckCreditMax();
        // <GEERU>
        if (countryRegion_RU)
        {
            salesParmUpdate.Storno               = storno;
            salesParmUpdate.StornoPhysical_RU    = stornoPhysical;
        }
        else
        {
            // </GEERU>
            salesParmUpdate.Storno               = this.defaultStorno();
            // <GEERU>
        }
        // </GEERU>
        salesParmUpdate.LateSelection            = NoYes::No;
        salesParmUpdate.LateSelectionQuery       = conNull();
        salesParmUpdate.SumBy                    = this.defaultSumBy();
        // <GEEPL>
        /*
        if (this.isCreditNote_PL())
        {
        salesParmUpdate.SpecQty              = SalesUpdate::All;
        }
        */
        // </GEEPL>
        // <GEERU>
        if (countryRegion_RU)
        {
            salesParmUpdate.SplitPostingProfile_RU   = this.getSplitPostingProfile_RU();
            salesParmUpdate.SplitInventProfileType_RU= this.getSplitInventProfileType_RU();
            salesParmUpdate.SplitInventOwnerId_RU    = this.getSplitInventOwnerId_RU();
        }
        // </GEERU>
        salesParmUpdate.bolPackageAppearance     = '';
        salesParmUpdate.initFromSalesParameters(this.parmDirectDeliveryUpdate());
        salesParmUpdate.ReduceOnHand             = salesParameters.reduceOnHand(this.parmDocumentStatus());
        salesParmUpdate.CreditRemaining          = this.parmCreditRemaining();
        salesParmUpdate.Proforma                 = this.parmProforma();
        // <GIN>
        if (customsMarked)
        {
            salesParmUpdate.CustomsShippingBill_IN            = NoYes::No;
            salesParmUpdate.CustomsShippingBillNumberTable_IN = 0;
            salesParmUpdate.CustomsExportOrderType_IN         = CustomsExportOrderType_IN::SalesOrder;
            if (callerTable is CustPackingSlipJour)
            {
                CustPackingSlipJour    custPackingSlipJourLoc = callerTable;
                salesParmUpdate.CustomsExportOrderType_IN     = custPackingSlipJourLoc.salesTable().CustomsExportOrder_IN ?
                                                                                        CustomsExportOrderType_IN::ExportOrder :
                                                                                        CustomsExportOrderType_IN::SalesOrder;
            }

            if (this.parmDocumentStatus() == DocumentStatus::ShippingBill_IN)
            {
                salesParmUpdate.SumBy = AccountOrder::None;
            }
        }
        // </GIN>

        if (specQtyIsSet)
        {
            salesParmUpdate.SpecQty = this.parmSpecQty();
        }
        else if (!parmUpdateSysLastValue.RecId)
        {
            salesParmUpdate.SpecQty = this.defaultSpecQty();
        }

        return salesParmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custAccountInQuery</Name>
				<Source><![CDATA[
    protected boolean  custAccountInQuery()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custBankAccountId</Name>
				<Source><![CDATA[
    protected CustBankAccountId  custBankAccountId(SalesTable  _salesTable)
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCheckCreditMax</Name>
				<Source><![CDATA[
    protected TypeOfCreditmaxCheck defaultCheckCreditMax()
    {
        return custParameters.CreditMaxCheck;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultSpecQty</Name>
				<Source><![CDATA[
    protected SalesUpdate defaultSpecQty()
    {
        return salesParameters.recommendedSpecQty(this.parmDocumentStatus());
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultStorno</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the default value for the <c>Storno</c> parameter.
    /// </summary>
    /// <returns>
    /// The default value that is retrieved from the configuration.
    /// </returns>
    protected NoYes defaultStorno()
    {
        return custParameters.CreditError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultSumBy</Name>
				<Source><![CDATA[
    protected AccountOrder defaultSumBy()
    {
        return salesParameters.SummaryUpdateBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes a record from the order line posting parameter table.
    /// </summary>
    /// <param name="_refRecId">
    /// The record ID of the record to be deleted.
    /// </param>
    protected void deleteParmLine(RefRecId _refRecId)
    {
        SalesParmLine localSalesParmLine;

        delete_from localSalesParmLine
            where localSalesParmLine.ParmId == this.parmId() &&
                  localSalesParmLine.SalesLineRecId == _refRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteParmLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the records in an order line posting parameter table for the current posting.
    /// </summary>
    protected void deleteParmLines()
    {
        SalesParmLine::deleteFromSalesParmUpdate(salesParmUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteParmTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the records in the order header posting parameter table for the current posting.
    /// </summary>
    protected void deleteParmTables()
    {
        SalesParmTable::deleteWithoutUpdate(this.parmId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsParmLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether order line posting parameter records exist for the current posting.
    /// </summary>
    /// <returns>
    /// true if the records exists; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Always returns false in the base class.
    /// </remarks>
    protected boolean existsParmLines()
    {
        return (select firstonly RecId from salesParmLine
                 where salesParmLine.ParmId == this.parmId()).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsParmSubTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a specified record exists.
    /// </summary>
    /// <param name="_parmSubTable">
    /// The record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    protected boolean existsParmSubTable(Common _parmSubTable)
    {
        boolean ret = super(_parmSubTable);

        if (!ret)
        {
            SalesParmSubTable salesParmSubTable = _parmSubTable as SalesParmSubTable;
            ret = SalesParmSubTable::exist(salesParmSubTable.ParmId,
                                           salesParmSubTable.TableRefId,
                                           salesParmSubTable.OrigSalesId,
                                           salesParmSubTable.SubId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsParmUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a posting parameter record exists.
    /// </summary>
    /// <param name="_parmUpdate">
    /// A posting record.
    /// </param>
    /// <returns>
    /// true if the record exists; otherwise, false.
    /// </returns>
    protected boolean existsParmUpdate(Common _parmUpdate)
    {
        SalesParmUpdate parmUpdate = _parmUpdate as SalesParmUpdate;
        return SalesParmUpdate::exist(parmUpdate.ParmId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdParmTable_TableRefId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the field ID of the <c>TableRefID</c> field in the posting parameter header table.
    /// </summary>
    /// <returns>
    /// The field ID of the <c>TableRefID</c> field in the posting parameter header table.
    /// </returns>
    protected FieldId fieldIdParmTable_TableRefId()
    {
        return fieldNum(SalesParmTable,TableRefId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdSourceTable_OrderId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the field ID for the field that contains the order ID in the source table.
    /// </summary>
    /// <returns>
    /// The field ID for the field that contains the order ID in the source table.
    /// </returns>
    protected FieldId fieldIdSourceTable_OrderId()
    {
        return fieldNum(SalesTable,SalesId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillOrigOrderIsSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the internal set of original order IDs that are being processed.
    /// </summary>
    protected void fillOrigOrderIsSet()
    {
        SalesParmTable localSalesParmTable;
        SalesParmSubTable localSalesParmSubTable;

        origOrderIdSet = new Set(Types::String);

        while select forceplaceholders localSalesParmTable
                where localSalesParmTable.ParmId == this.parmId()
                join  localSalesParmSubTable
                    where localSalesParmSubTable.ParmId     == localSalesParmTable.ParmId       &&
                          localSalesParmSubTable.TableRefId == localSalesParmTable.TableRefId
        {
            // <GEERU>
            str parmTableKey = this.parmTableMapKey(localSalesParmSubTable, localSalesParmTable.InventOwnerId_RU);
            // </GEERU>
            this.insertParmTableMap(localSalesParmTable, parmTableKey);
            origOrderIdSet.add(localSalesParmSubTable.OrigSalesId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillOutputContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills a <c>FormLetterParmDataOutputContract</c> object by using data.
    /// </summary>
    protected void fillOutputContract()
    {
        super();
        outputContract.parmGiroAllSame(this.parmGiroAllSame());
    }

]]></Source>
			</Method>
			<Method>
				<Name>findParmLine</Name>
				<Source><![CDATA[
    protected VendDocumentLineMap findParmLine(ParmId _parmId, InventTransId _inventTransId)
    {
        return PurchParmLine::findInventTransId(_parmId, _inventTransId);  // Overridden in SalesFormletterParmDataInvoice
    }

]]></Source>
			</Method>
			<Method>
				<Name>findParmLineTableRefId</Name>
				<Source><![CDATA[
    private VendDocumentLineMap findParmLineTableRefId(ParmId _parmId, InventTransId _inventTransId, TradeLineRefId _tableRefId)
    {
        return PurchParmLine::findInventTransId(_parmId, _inventTransId, false, _tableRefId);  // Overridden in SalesFormletterParmDataInvoice
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceTableFromSourceLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>SalesTable</c> record for the specified <c>SalesLine</c> record.
    /// </summary>
    /// <param name="_sourceLine">
    ///    A <c>SalesLine</c> record.
    /// </param>
    /// <returns>
    ///    A <c>SalesTable</c> record.
    /// </returns>
    protected Common getSourceTableFromSourceLine(Common _sourceLine)
    {
        SalesLine localSalesLine = _sourceLine as SalesLine;

        return localSalesLine.salesTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUseOriginalDocumentAsFacture_RU</Name>
				<Source><![CDATA[
    protected UseOriginalDocumentAsFacture_RU getUseOriginalDocumentAsFacture_RU(SalesTable _salesTable)
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>infoSourceTableSkipped</Name>
				<Source><![CDATA[
    protected void infoSourceTableSkipped(Common _salesTable)
    {
        SalesTable tmpSalesTable = _salesTable as SalesTable;
        info(strFmt("@SYS62710", tmpSalesTable.SalesType, tmpSalesTable.SalesId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>SalesFormletterParmData</c> class by constructing an instance of the
    /// <c>SalesQuantity</c> class.
    /// </summary>
    public void init()
    {
        super();

        salesQuantity   = SalesQuantity::construct(this.parmDocumentStatus());
        salesQuantity.parmProforma(this.proforma);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initChooseLinesFromLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes creating records in the posting parameter tables that are based on the list of order
    /// line records that are specified.
    /// </summary>
    protected void initChooseLinesFromLine()
    {
        super();

        salesParmUpdate.SpecQty = salesParmUpdate.RecId ? salesParmUpdate.SpecQty : SalesUpdate::All;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDates_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes dates for the <c>SalesParmTable</c> record.
    /// </summary>
    /// <param name="_salesParmTable">
    /// The <c>SalesParmTable</c> record.
    /// </param>
    public void initDates_W(SalesParmTable _salesParmTable)
    {
        // Do nothing by default
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefaultCreditRemaining</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets a default value for the <c>CreditRemaining</c> field.
    /// </summary>
    protected void initParmDefaultCreditRemaining()
    {
        this.parmCreditRemaining(NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesQuantityInventOwner_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inititalizes the instance of the class <c>SalesQuantity</c> by the inventory owner value.
    /// </summary>
    /// <param name="_salesLine">
    ///     The table buffer that contains the <c>SalesLine</c> record.
    /// </param>
    /// <param name="_inventOwner">
    ///     The inventory owner value.
    /// </param>
    public void initSalesQuantityInventOwner_RU(SalesLine _salesLine, InventOwnerId_RU _inventOwner)
    {
        InventDimParm   inventDimParm;
        InventDim       inventDimCriteria;

        if (SalesFormLetter::useInventOwnerIdRange_RU(this.splitInventOwnerId_RU(),
                                                      this.parmDocumentStatus(),
                                                      _salesLine))
        {
            inventDimCriteria.InventOwnerId_RU = _inventOwner;
            inventDimParm.InventOwnerIdFlag_RU = NoYes::Yes;
        }
        salesQuantity.parmInventDimCriteria_RU(inventDimCriteria);
        salesQuantity.parmInventDimParm_RU(inventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustInsertParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the creation of a record in the order line posting parameter table.
    /// </summary>
    /// <param name="_parmLine">
    /// The record to insert.
    /// </param>
    /// <returns>true if the parm line should be inserted; otherwise, false.</returns>
    protected boolean mustInsertParmLine(Common _parmLine)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record in the order line posting parameter table.
    /// </summary>
    /// <param name="_parmLine">
    /// The record to insert.
    /// </param>
    protected void insertParmLine(Common _parmLine)
    {
        if (!this.mustInsertParmLine(_parmLine))
        {
            return;
        }

        SalesParmLine parmLine = _parmLine  as SalesParmLine;
        // <GIN>
        // </GIN>
        //RecId is needed if salesParmSubLines is going to be created.
        parmLine.RecId  = systemSequence.reserveValues(1,tableNum(SalesParmLine));
        super(_parmLine);

        // <GEEPL>
        if (countryRegion_PL)
        {
            PlInventPackageParm::updateFromSalesParmLine(parmLine, this.parmDocumentStatus());
        }
        // </GEEPL>
        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])  && _parmLine.TableId == tableNum(SalesParmLine))
        {
            SalesParmLine_IN salesParmLineIN = parmLine.salesParmLine_IN();
            salesParmLineIN.SysExtensionSerializerExtensionMap::insertAfterBaseTable(_parmLine);
            parmLine.packSalesParmLine_IN(salesParmLineIN);
        }
        // </GIN>

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBR]) && _parmLine.TableId == tableNum(SalesParmLine))
        {
            this.insertSalesParmLine_BR(parmLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertParmLines_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into parm lines.
    /// </summary>
    /// <param name="_salesParmTable">
    /// The sales parm table.
    /// </param>
    public void  insertParmLines_IN(SalesParmTable _salesParmTable)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertParmTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record into the order header posting parameter table.
    /// </summary>
    /// <param name="_parmTable">
    /// The record to insert.
    /// </param>
    protected void insertParmTable(Common _parmTable)
    {
        // <GEERU><GEEPL><GBR><GCN>
        if (countryRegion_RU || countryRegion_PL || countryRegion_BR || isTaxIntegrationSystemEnable)
        {
            _parmTable.RecId = systemSequence.reserveValues(1, tableNum(SalesParmTable));
        }
        // </GEERU></GEEPL></GBR></GCN>

        super(_parmTable);

        // <GEEPL>
        PlInventPackageParm::updateFromSalesParmTable(_parmTable);
        // </GEEPL>
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyUpdateSalesPrice</Name>
				<Source><![CDATA[
    protected void interCompanyUpdateSalesPrice(SalesLine _salesLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventOwnerId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the inventory owner value.
    /// </summary>
    /// <param name="_salesLine">
    ///     A table buffer that contains the <c>SalesLine</c> record.
    /// </param>
    /// <returns>
    ///     Always returns blank value.
    /// </returns>
    protected InventOwnerId_RU inventOwnerId_RU(Common _salesLine)
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventProfileType_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>InventProfileType_RU</c> actual for update
    /// </summary>
    /// <param name="_salesLine">
    /// <c>SalesLine</c> parameter to take posting profile from
    /// </param>
    /// <returns>
    /// Posting profile from line, or General, if splitting is not applied
    /// </returns>
    public InventProfileType_RU inventProfileType_RU(SalesLine _salesLine)
    {
        if (this.splitInventProfileType_RU())
        {
            return _salesLine.inventProfileType_RU();
        }
        return InventProfileType_RU::General;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAccountInQuery</Name>
				<Source><![CDATA[
    protected boolean  invoiceAccountInQuery()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lateSelection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to use late selection.
    /// </summary>
    /// <returns>
    /// true if late selection is used; otherwise, false.
    /// </returns>
    protected boolean lateSelection()
    {
        return salesParmUpdate.LateSelection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lateSelectionQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>Query</c> to use in late selection.
    /// </summary>
    /// <returns>
    /// The late selection <c>Query</c>.
    /// </returns>
    protected SysQueryRun lateSelectionQuery()
    {
        return new SysQueryRun(salesParmUpdate.LateSelectionQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayJournalBePosted_IN</Name>
				<Source><![CDATA[
    // This is done so as to block parm table and parm line creation from select button based on value of "Order" field
    protected boolean mayJournalBePosted_IN(Common _salesTable)
    {
        SalesTable localSalesTable = _salesTable as SalesTable;

        boolean ok = super(_salesTable);

        if (TaxParameters::find().Customs_IN && this.parmDocumentStatus() != DocumentStatus::ShippingBill_IN)
        {
            if ((customsExportOrderType == CustomsExportOrderType_IN::ExportOrder && localSalesTable.CustomsExportOrder_IN == NoYes::No) ||
                (customsExportOrderType == CustomsExportOrderType_IN::SalesOrder  && localSalesTable.CustomsExportOrder_IN == NoYes::Yes))
            {
                ok = false;
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayJournalTransBePosted</Name>
				<Source><![CDATA[
    protected boolean mayJournalTransBePosted(Common _salesLine)
    {
        SalesLine salesLine = _salesLine as SalesLine;

        if (salesTableOrig.SalesId != salesLine.SalesId)
        {
            salesTableOrig = salesLine.salesTable();
        }

        boolean ok = super(_salesLine);

        // <GBR>
        ok = ok && this.allowCreateParmLineIfFromLoad_BR(_salesLine);
        // </GBR>

        return ok && !(salesLine.isReturnReservationLine() && salesTableOrig.returnItem());
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrAllowCreateCheck</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether a <c>SalesParmLine</c> may be created from a sales line.
    ///     Check is called from pick, pack, and invoice.
    /// </summary>
    /// <param name="_salesLine">
    ///     The <c>SalesLine</c> record from which ParmLine may be created.
    /// </param>
    /// <param name="_salesTable">
    ///     The <c>SalesTable</c> record that is the parent order of <c>SalesLine</c>.
    /// </param>
    /// <returns>
    ///     true if parm line can be created; otherwise, false.
    /// </returns>
    protected boolean mcrAllowCreateCheck(SalesLine _salesLine, salesTable _salesTable)
    {
        boolean         allowCreateParmLine = true;

        if (!_salesLine || !_salesTable)
            throw error("@MCR27548");

        // Sales order cannot be stopped in order to be
        // selected for Picking, Packing or Invoicing.
        if (allowCreateParmLine
            && _salesTable.MCROrderStopped == NoYes::Yes)
        {
            allowCreateParmLine = false;
        }

        // Skip items that are before the start ship date.
        if (allowCreateParmLine)
        {
            MCRInventTable mcrInventTable = MCRInventTable::findByItemId(_salesLine.ItemId);
            if (mcrInventTable.ShipStartDate
                && mcrInventTable.ShipStartDate > DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
                && (!_salesTable.isRetailCashAndCarrySalesNoCache()
                    || !RetailStatementFeatureControl::isSkipShipStartDateValidationEnabled()))
            {
                allowCreateParmLine = false;
            }
        }

        // Skip continuity item lines, but allow bill up front to be processed.
        if (allowCreateParmLine)
        {
            MCRSalesLine mcrSalesLine = _salesLine.mcrSalesLine();
            if (mcrSalesLine.ContinuityScheduleId
                && !MCRContinuityScheduleHeader::find(mcrSalesLine.ContinuityScheduleId).BillUpfront)
            {
                allowCreateParmLine = false;
            }
        }

        // Skip continuity child lines that have delivery date in the future.
        // Using the delivery leadtime on the SalesParameters to offset the date.
        if (allowCreateParmLine
            && this.mcrIsContinuityDateInFuture(_salesLine, _salesTable))
        {
            allowCreateParmLine = false;
        }

        return allowCreateParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrAllowCreateParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether a <c>SalesParmLine</c> may be created from a sales line.
    ///     Overridden in the pick, pack, and invoice.
    /// </summary>
    /// <param name="_salesLine">
    ///     The <c>SalesLine</c> record from which ParmLine may be created.
    /// </param>
    /// <param name="_salesTable">
    ///     The <c>SalesTable</c> record that is the parent order of <c>SalesLine</c>.
    /// </param>
    /// <returns>
    ///     true if parm line can be created; otherwise, false.
    /// </returns>
    protected boolean mcrAllowCreateParmLine(SalesLine _salesLine, salesTable _salesTable)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrCheckInventAvailability</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether there is inventory available for the specified sales line.
    /// </summary>
    /// <param name="_salesLine">
    /// The sales line used to evaluate if there is available inventory.
    /// </param>
    /// <param name="_SalesTable">
    /// The sales order used to evaluate if there is available inventory.
    /// </param>
    /// <returns>
    /// true if there is available inventory; otherwise, false.
    /// </returns>
    protected boolean mcrCheckInventAvailability(SalesLine _salesLine, SalesTable _SalesTable)
    {
        boolean                 ret = true;
        Qty                     qtySumPhysical;

        if (!_salesLine || !_salesTable)
            throw error("@MCR27548");

        if (_salesTable.SalesType == SalesType::ReturnItem)
        {
            return true;
        }
        // If item allows negative inventory then skip availability check
        if (_salesLine.inventTable().modelGroup().NegativePhysical)
        {
            return true;
        }

        // Removing previous check against reserved.  Now check in subclass.
        if (qtySumPhysical <= 0)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrIsContinuityDateInFuture</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the confirmed delivery date is in the future.
    /// </summary>
    /// <param name="_salesLine">
    /// The continuity sales line to evaluate.
    /// </param>
    /// <param name="_salesTable">
    /// The continuity sales order to evaluate.
    /// </param>
    /// <returns>
    /// true if the confirmed delivery date of the continuity sales line is in the future; otherwise, false.
    /// </returns>
    protected boolean mcrIsContinuityDateInFuture(SalesLine _salesLine, SalesTable _salesTable)
    {
        boolean ret = false;

        if (!_salesLine || !_salesTable)
            throw error("@MCR27548");

        if (_salesTable.mcrSalesTable().Continuitychild
            && _salesLine.ConfirmedDlv > DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) + MCROrderParameters::find().MCRContinuityDeliveryDays)
        {
            ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSetShipAloneQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets parm line quantities appropriately for ship alone items.
    /// </summary>
    /// <param name="_salesParmLine">
    ///     The <c>SalesParmLine</c> record for which this method sets
    ///     ship alone quantities.
    /// </param>
    /// <param name="_salesLineOrig">
    ///     The <c>SalesLine</c> record for which this method sets
    ///     ship alone quantities.
    /// </param>
    /// <remarks>
    ///     Be sure this is called AFTER the <c>SalesParmLine</c> has been initialized from
    ///     the sales line.
    /// </remarks>
    protected void mcrSetShipAloneQuantities(SalesParmLine _salesParmLine, SalesLine _salesLineOrig)
    {
        // By default, do not modify quantities.
        // Override in sub-classes.
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSplitData</Name>
				<Source><![CDATA[
    public boolean mcrSplitData()
    {
        boolean ret = super()
              && this.mcrSplitParmLines()
              && this.mcrSplitParmTables();
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSplitParmLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Splits out parm lines into multiple salesParmTable records
    ///     and salesParmLine records where appropriate, such as for ship alone items.
    /// </summary>
    /// <returns>
    ///     true if splitting successful with no errors; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     Always return true here in the super class, where by default, no splitting
    ///     will actually be done.
    ///
    ///     Note: This must be done after showing the user the <c>SalesEditLines</c> form.
    ///     This is not ideal because the user will not be able to see a preview of the
    ///     final splits WYSIWYG style.  However, it is being done here because it is
    ///     almost impossible to keep track of, if the user is allowed to manipulate the
    ///     records in the preview mode.
    /// </remarks>
    protected boolean mcrSplitParmLines()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSplitParmLinesShipAlone</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Splits parm lines that are for ship-alone items.
    /// </summary>
    /// <returns>
    ///     ture.
    /// </returns>
    /// <remarks>
    ///     Do not call this method except from MCRSplitParmLines in sub-classes.
    ///     This method is marked 'final' becuase it is expected that sub-classes won't
    ///     need to override it.
    /// </remarks>
    final protected boolean mcrSplitParmLinesShipAlone()
    {
        SalesParmTable  salesParmTableCreate, salesParmTableOrig;
        SalesParmLine   salesParmLineSelect;
        SalesParmLine   salesparmLineSelectCheck;

        SalesTable      localSalesTable;
        SalesLine       localSalesLine;
        InventTable     localInventTable;
        int             counter;
        Qty             deliverNowOrig, shipAloneQty;
        TradeLineRefId  tableRefId;
        MCRInventTable  mcrInventTable;
        Boolean         recordFound = false;

        void mcrCreateParmTable()
        {
            this.createParmTable(localSalesTable,
                                 localSalesLine,
                                 tableRefId);
        }
        ttsBegin;

        this.parmMCRIsShipAlone(true);

        // Do not split 'return' lines (negative quantity lines).
        while select salesParmLineSelect
            order by salesParmLineSelect.RecId
                where salesParmLineSelect.ParmId == SalesParmUpdate.ParmId
                    && salesParmLineSelect.DeliverNow > 0
            join recId from localInventTable
                where localInventTable.ItemId == salesParmLineSelect.ItemId
            exists join mcrInventTable
                where mcrInventTable.inventTable == localInventTable.RecId
                    && mcrInventTable.ShipAlone == NoYes::Yes
        {
            // Only init record lists once a record is found.
            if (!recordFound)
            {
                this.initRecordLists();
                //Set boolean to true so that record lists are not initiated again.
                recordFound = true;
            }
            // Get current parm line
            SalesParmLine salesParmLine = salesParmLineSelect;
            salesParmLine.selectForUpdate(true);
            salesParmLine.reread();

            // Find needed associated records
            localSalesLine   = salesParmLine.salesLine();
            if (localSalesLine.mcrSalesLineDropShipment().DropShipment)
            {
                continue;
            }
            localSalesTable  = salesParmLine.salesTable();
            localInventTable = salesParmLine.inventTable();

            // Get original tableRefId
            TradeLineRefId tableRefIdOrig = salesParmLine.TableRefId;
            deliverNowOrig = salesParmLine.DeliverNow;

            // Create new table ref Id, to create a new parm table.
            salesParmTableCreate.TableRefId = formletterParmData::getNewTableRefId();
            tableRefId = salesParmTableCreate.TableRefId;

            salesParmLine.TableRefId = salesParmTableCreate.TableRefId;
            this.mcrSetShipAloneQuantities(salesParmLine, localSalesLine);
            salesParmLine.setLineAmount();
            salesParmLine.update();

            shipAloneQty = (deliverNowOrig - salesParmLine.DeliverNow) /
                localInventTable.inventItemSalesSetup().mcrQuantityEffectiveMultiple();

            mcrCreateParmTable();

            // Delete sales parm table that parm line WAS attached to, if the parm
            // table does not have any more parm lines attached.
            select firstonly RecId, TableRefId from salesparmLineSelectCheck
                where salesparmLineSelectCheck.TableRefId == tableRefIdOrig;

            if (!salesparmLineSelectCheck.RecId)
            {
                delete_from salesParmTableOrig
                    where salesParmTableOrig.TableRefId == tableRefIdOrig;
            }

            // Restructuring of creating parm lines due to the change of utilizing a recordinsertlist
            if (shipaloneqty)
            {
                // Note that it is ok if the shipAloneQty is not a whole number.
                for (counter = 0;  counter < shipAloneQty;  counter++)
                {
                    // Check to see if line can be processed.
                    if (this.mcrAllowCreateParmLine(localSalesLine, localSalesTable))
                    {
                        salesParmTableCreate.TableRefId = formletterParmData::getNewTableRefId();
                        tableRefId = salesParmTableCreate.TableRefId;

                        // new parameter in createParmLine to set the fields for shipalone
                        if (this.createParmLine(localSalesLine, salesParmTableCreate.TableRefId, '', true))
                        {
                            mcrCreateParmTable();
                        }
                    }
                }
            }
        }
        // end of while
        // insert records created during split
        if (recordFound)
        {
            this.insertRecordLists();
        }

        ttsCommit;

        this.parmMCRIsShipAlone(false);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSplitParmTables</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Splits out parm tables into multiple <c>SalesParmTable</c> records
    ///     and <c>SalesParmLine</c> records where appropriate, such as when not
    ///     all items on a parm table will fit into one packing box.
    /// </summary>
    /// <returns>
    ///     true if parm tables split correctly; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     Always return true here in the super class, where by default, no splitting
    ///     will actually be done.
    ///
    ///     Note this must be done after showing the user the SalesEditLines form.
    /// </remarks>
    protected boolean mcrSplitParmTables()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        // <GIN>
        #ISOCountryRegionCodes
        // </GIN>
        super();
        salesParameters = SalesParameters::find();
        custParameters  = CustParameters::find();
        giroAllSame = true;
        // <GIN>
        isCountryRegionIN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
        if (isCountryRegionIN)
        {
            TaxParameters taxParametersLoc = TaxParameters::find();
            TaxWithholdParameters_IN taxWithholdParametersLoc = TaxWithholdParameters_IN::find();
            if (taxParametersLoc.Excise_IN
                || taxParametersLoc.ServiceTax_IN
                || taxParametersLoc.Customs_IN
                || taxWithholdParametersLoc.tdsInvoice
                || taxWithholdParametersLoc.tcsInvoice)
            {
                taxesMarked = NoYes::Yes;
            }
            customsMarked = taxParametersLoc.Customs_IN;
        }
        // </GIN>
        // <GEERU>
        countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>
        // <GEEPL>
        countryRegion_PL = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]);
        // </GEEPL>
        // <GBR>
        countryRegion_BR = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBR]);
        // </GBR>
        // <GCN>
        isTaxIntegrationSystemEnable = CustParameters::isTaxIntegrationSystem_CN();
        // </GCN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdvanceInvoiceSettlement_W</Name>
				<Source><![CDATA[
    public AdvanceInvoiceSettlement_SalesOrder_W parmAdvanceInvoiceSettlement_W(
        AdvanceInvoiceSettlement_SalesOrder_W _advanceInvoiceSettlement = null)
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrect_RU</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public Correct_RU parmCorrect_RU(Correct_RU _correct = correct)
    {
        correct = _correct;
        return correct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrectedInvoiceDate_RU</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public CorrectedInvoiceDate_RU parmCorrectedInvoiceDate_RU(CorrectedInvoiceDate_RU _corrInvoiceDate = corrInvoiceDate)
    {
        corrInvoiceDate = _corrInvoiceDate;
        return corrInvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrectedInvoiceId_RU</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public CorrectedInvoiceId_RU parmCorrectedInvoiceId_RU(CorrectedInvoiceId_RU _corrInvoiceId = corrInvoiceId)
    {
        corrInvoiceId = _corrInvoiceId;
        return corrInvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreditRemaining</Name>
				<Source><![CDATA[
    public boolean parmCreditRemaining(boolean  _creditRemaining = creditRemaining)
    {
        creditRemaining = _creditRemaining;
        return creditRemaining;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustInvoicePrintoutType_RU</Name>
				<Source><![CDATA[
    public CustInvoicePrintoutType_RU parmCustInvoicePrintoutType_RU(CustInvoicePrintoutType_RU _printout = invoicePrintoutType)
    {
        container dummy()
        {
            return [ _printout ];
        }

        return CustInvoicePrintoutType_RU::TORG_12; // Default value
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomsExportOrderType_IN</Name>
				<Source><![CDATA[
    public CustomsExportOrderType_IN parmCustomsExportOrderType_IN(CustomsExportOrderType_IN   _customsExportOrderType = customsExportOrderType)
    {
        customsExportOrderType = _customsExportOrderType;

        return customsExportOrderType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDefaultGiroType</Name>
				<Source><![CDATA[
    public NoYes  parmDefaultGiroType(NoYes  _defaultGiroType = defaultGiroType)
    {
        defaultGiroType = _defaultGiroType;
        return defaultGiroType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeleteGiro</Name>
				<Source><![CDATA[
    public boolean parmDeleteGiro(boolean _deleteGiro = deleteGiro)
    {
        deleteGiro = _deleteGiro;
        return deleteGiro;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDirectDeliveryUpdate</Name>
				<Source><![CDATA[
    public boolean parmDirectDeliveryUpdate(boolean _directDeliveryUpdate = directDeliveryUpdate)
    {
        directDeliveryUpdate = _directDeliveryUpdate;
        return directDeliveryUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentStornoId_RU</Name>
				<Source><![CDATA[
    public Num parmDocumentStornoId_RU(Num _documentStornoId = documentStornoId)
    {
        documentStornoId = _documentStornoId;
        return documentStornoId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGiroAllSame</Name>
				<Source><![CDATA[
    public boolean parmGiroAllSame(boolean _giroAllSame = giroAllSame)
    {
        giroAllSame = _giroAllSame;
        return giroAllSame;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGoodsInRouteId_RU</Name>
				<Source><![CDATA[
    public GoodsInRouteId_RU parmGoodsInRouteId_RU(GoodsInRouteId_RU _goodsInRouteId = goodsInRouteId)
    {
        goodsInRouteId = _goodsInRouteId;
        return goodsInRouteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId_PL</Name>
				<Source><![CDATA[
    public InventLocationId parmInventLocationId_PL(
        InventLocationId _inventLocationId = inventLocationId)
    {
        inventLocationId = _inventLocationId;
        return inventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineIdSet</Name>
				<Source><![CDATA[
    public container parmLineIdSet(container _packedLineIdSet = packedLineIdSet)
    {
        packedLineIdSet = _packedLineIdSet;
        return packedLineIdSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineMapKey</Name>
				<Source><![CDATA[
    protected str parmLineMapKey(Common _line
                                  , InventOwnerId_RU _inventOwnerId = ''
    )
    {
        str             key;

        switch (_line.TableId)
        {
            case tableNum(SalesParmLine) :
                SalesParmLine salesParmLine = _line;
                key = this.addToKey(key, salesParmLine.OrigSalesId);
                key = this.addToKey(key, salesParmLine.InventTransId);
                // <GEERU>
                if (countryRegion_RU)
                {
                    key = this.addToKey(key, salesParmLine.InventOwnerId_RU);
                }
                // </GEERU>
                break;

            case tableNum(SalesLine) :
                SalesLine salesLine = _line;
                key = this.addToKey(key, salesLine.SalesId);
                key = this.addToKey(key, salesLine.InventTransId);
                // <GEERU>
                if (countryRegion_RU)
                {
                    key = this.addToKey(key, _inventOwnerId);
                }
                // </GEERU>
                break;
        }

        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineTableId</Name>
				<Source><![CDATA[
    protected TableId parmLineTableId()
    {
        return tableNum(SalesParmLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMCRInventTransRecid</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets or returns the record ID for the inventtrans record.
    /// </summary>
    /// <param name="_inventTransRecId">
    ///     The ID of the <c>InventTrans</c> record to be set or returned.
    /// </param>
    /// <returns>
    ///     The newly set <c>InventTrans</c> record ID.
    /// </returns>
    /// <remarks>
    ///     This is needed for the unship process. When the unship process runs,
    ///     the system needs to look for the specific trans recid and only
    ///     process the inventtrans record selected during the packing slip
    ///     return process.
    /// </remarks>
    public Recid parmMCRInventTransRecid(Recid _inventTransRecId  = inventtransRefRecId)
    {
        inventtransRefRecId = _inventTransRecId;
        return inventtransRefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMCRIsShipAlone</Name>
				<Source><![CDATA[
    protected boolean parmMCRIsShipAlone(boolean _mcrIsShipAlone = mcrIsShipAlone)
    {
        mcrIsShipAlone = _mcrIsShipAlone;
        return MCRIsShipAlone;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNeedTransIDTransit_RU</Name>
				<Source><![CDATA[
    public boolean parmNeedTransIDTransit_RU(boolean _needTransIDTransit = needTransIDTransit)
    {
        needTransIDTransit = _needTransIDTransit;
        return needTransIDTransit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmTable_W</Name>
				<Source><![CDATA[
    public Common parmParmTable_W(Common _parmTable = salesParmTableFilter)
    {
        salesParmTableFilter = _parmTable as SalesParmTable;
        return salesParmTableFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmUpdate</Name>
				<Source><![CDATA[
    public Common parmParmUpdate(Common _salesParmUpdate = salesParmUpdate)
    {
        salesParmUpdate = _salesParmUpdate as SalesParmUpdate;
        this.parmParmId(salesParmUpdate.ParmId);
        return salesParmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjInvoiceParmTable</Name>
				<Source><![CDATA[
    public ProjInvoiceParmTable parmProjInvoiceParmTable(ProjInvoiceParmTable _projInvoiceParmTable = null)
    {
        if ( !prmisDefault(_projInvoiceParmTable))
        {
            projInvoiceParmTable = _projInvoiceParmTable;
        }

        return projInvoiceParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRelatedJournal</Name>
				<Source><![CDATA[
    public Common parmRelatedJournal(Common _relatedJournal = relatedJournal)
    {
        relatedJournal = _relatedJournal;
        return relatedJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesFormLetterContract</Name>
				<Source><![CDATA[
    public SalesFormLetterContract parmSalesFormLetterContract(SalesFormLetterContract _salesFormLetterContract = SalesFormLetterContract)
    {
        SalesFormLetterContract = _salesFormLetterContract;
        return SalesFormLetterContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceTable</Name>
				<Source><![CDATA[
    public Common parmSourceTable(Common _sourceTable = salesTable)
    {
        if (_sourceTable.TableId == tableNum(SalesTable))
        {
            salesTable = _sourceTable;
        }

        if (! salesTable)
        {
            multiForm = NoYes::Yes;
        }
        return _sourceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpecQty</Name>
				<Source><![CDATA[
    SalesUpdate  parmSpecQty(SalesUpdate  _specQty = specQty)
    {
        specQtyIsSet = true;
        specQty = _specQty;
        return specQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStorno_RU</Name>
				<Source><![CDATA[
    public boolean parmStorno_RU(boolean _storno = storno)
    {
        storno = _storno;
        return storno;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStornoPhysical_RU</Name>
				<Source><![CDATA[
    public boolean parmStornoPhysical_RU(boolean _stornoPhysical = stornoPhysical)
    {
        stornoPhysical = _stornoPhysical;
        return stornoPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubTableMapKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a key for a specified record.
    /// </summary>
    /// <param name="_source">
    /// The record for which to generate a key.
    /// </param>
    /// <returns>
    /// A string holding the key for the record.
    /// </returns>
    protected str parmSubTableMapKey(Common _source)
    {
        str             key;

        switch (_source.TableId)
        {
            case tableNum(SalesParmSubTable) :
                SalesParmSubTable salesParmSubTable = _source;
                key = this.addToKey(key, salesParmSubTable.ParmId);
                key = this.addToKey(key, salesParmSubTable.TableRefId);
                key = this.addToKey(key, salesParmSubTable.OrigSalesId);
                key = this.addToKey(key, guid2str(salesParmSubTable.SubId));
                break;
        }

        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubTableTableId</Name>
				<Source><![CDATA[
    protected TableId parmSubTableTableId()
    {
        return tableNum(SalesParmSubTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTableMapKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs values into a string.
    /// </summary>
    /// <param name="_source">
    /// A source table record.
    /// </param>
    /// <param name="_inventOwnerId">
    /// The inventory owner ID; optional.
    /// </param>
    /// <returns>
    /// A formatted string.
    /// </returns>
    protected str parmTableMapKey(Common _source
                                  , InventOwnerId_RU _inventOwnerId = ''
    )
    {
        str             key;
        SalesLine       salesLine;
        SalesParmTable  salesParmTable;
        SalesParmSubTable  salesParmSubTable;
        SalesParmLine   salesParmLine;
        // <GIN>
        TransTaxInformation transTaxInformation;
        // </GIN>

        switch (_source.TableId)
        {
            case tableNum(SalesLine) :
                salesLine = _source;
                key = this.addToKey(key, salesLine.SalesId);
                break;

            case tableNum(SalesParmTable) :
                salesParmTable = _source;
                key = this.addToKey(key, salesParmTable.SalesId);
                break;

            case tableNum(SalesParmSubTable) :
                salesParmSubTable = _source;
                key = this.addToKey(key, salesParmSubTable.OrigSalesId);
                break;

            case tableNum(SalesParmLine) :
                salesParmLine = _source;
                key = this.addToKey(key, salesParmLine.salesParmTable().SalesId);
                break;
        }

        if (this.splitDeliveryInformation())
        {
            switch (_source.TableId)
            {
                case tableNum(SalesLine) :
                    salesLine = _source;
                    key = this.addToKey(key, salesLine.DeliveryName);
                    key = this.addToKey(key, int642str(salesLine.deliveryLocation()));
                    key = this.addToKey(key, salesLine.DlvMode);
                    if (this.splitByDlvTerm())
                    {
                        key = this.addToKey(key, salesLine.DlvTerm);
                    }
                    key = this.addToKey(key, salesLine.ShipCarrierId);
                    key = this.addToKey(key, salesLine.ShipCarrierAccount);
                    key = this.addToKey(key, int642str(salesLine.shipCarrierLocation()));
                    // <GIN>
                    if (taxesMarked)
                    {
                        transTaxInformation = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(salesLine);
                        key = this.addToKey(key, int642str(TaxInformation_IN::findDefaultbyLocation(transTaxInformation.CompanyLocation).RecId));
                    }
                    // </GIN>
                    break;

                case tableNum(SalesParmTable) :
                    salesParmTable = _source;
                    key = this.addToKey(key, salesParmTable.DeliveryName);
                    key = this.addToKey(key, int642str(salesParmTable.deliveryLocation()));
                    key = this.addToKey(key, salesParmTable.DlvMode);
                    if (this.splitByDlvTerm())
                    {
                        key = this.addToKey(key, salesParmTable.DlvTerm);
                    }
                    key = this.addToKey(key, salesParmTable.ShipCarrierId);
                    key = this.addToKey(key, salesParmTable.ShipCarrierAccount);
                    key = this.addToKey(key, int642str(salesParmTable.shipCarrierLocation()));

                    // <GIN>
                    if (isCountryRegionIN
                         && taxesMarked)
                    {
                        key = this.addToKey(key, int642str(salesParmTable.TaxInformation_IN));
                    }
                    // </GIN>
                    break;

                case tableNum(SalesParmLine) :
                    salesParmLine = _source;
                    key = this.addToKey(key, salesParmLine.DeliveryName);
                    key = this.addToKey(key, int642str(salesParmLine.deliveryLocation()));
                    key = this.addToKey(key, salesParmLine.DlvMode);
                    if (this.splitByDlvTerm())
                    {
                        key = this.addToKey(key, salesParmLine.DlvTerm);
                    }
                    key = this.addToKey(key, salesParmLine.ShipCarrierId);
                    key = this.addToKey(key, salesParmLine.ShipCarrierAccount);
                    key = this.addToKey(key, int642str(salesParmLine.shipCarrierLocation()));
                    // <GIN>
                    if (isCountryRegionIN
                       && taxesMarked)
                    {
                        transTaxInformation = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(salesParmLine.salesLine());
                        key = this.addToKey(key, int642str(TaxInformation_IN::findDefaultbyLocation(transTaxInformation.CompanyLocation).RecId));
                    }
                    // </GIN>
                    break;

                case tableNum(SalesParmSubTable) :
                    salesParmSubTable = _source;
                    salesParmTable = salesParmSubTable.salesParmTable();
                    key = this.addToKey(key, salesParmTable.DeliveryName);
                    key = this.addToKey(key, int642str(salesParmTable.deliveryLocation()));
                    key = this.addToKey(key, salesParmTable.DlvMode);
                    if (this.splitByDlvTerm())
                    {
                        key = this.addToKey(key, salesParmTable.DlvTerm);
                    }
                    key = this.addToKey(key, salesParmTable.ShipCarrierId);
                    key = this.addToKey(key, salesParmTable.ShipCarrierAccount);
                    key = this.addToKey(key, int642str(salesParmTable.shipCarrierLocation()));
                    // <GIN>
                    if (isCountryRegionIN
                       && taxesMarked)
                    {
                        key = this.addToKey(key, int642str(salesParmTable.TaxInformation_IN));
                    }
                    // </GIN>

                    break;
            }
        }

        if (this.splitSite())
        {
            switch (_source.TableId)
            {
                case tableNum(SalesLine) :
                    salesLine = _source;
                    key = this.addToKey(key, salesLine.inventDim().InventSiteId);
                    break;
                case tableNum(SalesParmTable) :
                    salesParmTable = _source;
                    key = this.addToKey(key, salesParmTable.InventSiteId);
                    break;

                case tableNum(SalesParmLine) :
                    salesParmLine = _source;
                    key = this.addToKey(key, salesParmLine.inventDim().InventSiteId);
                    break;
                case tableNum(SalesParmSubTable) :
                    salesParmSubTable = _source;
                    key = this.addToKey(key, salesParmSubTable.salesParmTable().InventSiteId);
                    break;
            }
        }

        // <GEERU>
        if (countryRegion_RU
            && this.splitInventProfileType_RU())
        {
            switch (_source.TableId)
            {
                case tableNum(SalesLine)         :
                    salesLine = _source;
                    key = this.addToKey(key, int2str(salesLine.inventProfileType_RU()));
                    break;

                case tableNum(SalesParmTable)    :
                    salesParmTable = _source;
                    key = this.addToKey(key, int2str(salesParmTable.InventProfileType_RU));
                    break;

                case tableNum(SalesParmLine)     :
                    salesParmLine = _source;
                    key = this.addToKey(key, int2str(salesParmLine.InventProfileType_RU));
                    break;

                case tableNum(SalesParmSubTable) :
                    salesParmSubTable = _source;
                    key = this.addToKey(key, int2str(salesParmSubTable.salesParmTable().InventProfileType_RU));
                    break;
            }
        }

        if (countryRegion_RU
            && this.splitPostingProfile_RU())
        {
            switch (_source.TableId)
            {
                case tableNum(SalesLine)         :
                    salesLine = _source;
                    key = this.addToKey(key, this.postingProfile_RU(salesLine.PostingProfile_RU,
                                                                    salesLine.salesTable().PostingProfile));
                    break;

                case tableNum(SalesParmTable)    :
                    salesParmTable = _source;
                    key = this.addToKey(key, salesParmTable.PostingProfile_RU);
                    break;

                case tableNum(SalesParmLine)     :
                    salesParmLine = _source;
                    key = this.addToKey(key, this.postingProfile_RU(salesParmLine.PostingProfile_RU,
                                                                    salesParmLine.salesParmTable().PostingProfile_RU));
                    break;

                case tableNum(SalesParmSubTable) :
                    salesParmSubTable = _source;
                    key = this.addToKey(key, salesParmSubTable.salesParmTable().PostingProfile_RU);
                    break;
            }
        }

        if (countryRegion_RU)
        {
            if (_inventOwnerId)
            {
                key = this.addToKey(key, _inventOwnerId);
            }
            else
            {
                if (this.splitInventOwnerId_RU())
                {
                    switch (_source.TableId)
                    {
                        case tableNum(SalesLine) :
                            salesLine = _source;
                            key = this.addToKey(key, this.inventOwnerId_RU(salesLine));
                            break;

                        case tableNum(SalesParmTable) :
                            salesParmTable = _source;
                            key = this.addToKey(key, salesParmTable.InventOwnerId_RU);
                            break;

                        case tableNum(SalesParmSubTable) :
                            salesParmSubTable = _source;
                            key = this.addToKey(key, salesParmSubTable.salesParmTable().InventOwnerId_RU);
                            break;

                        case tableNum(SalesParmLine) :
                            salesParmLine = _source;
                            key = this.addToKey(key, salesParmLine.InventOwnerId_RU);
                            break;
                    }
                }
            }
        }
        // </GEERU>

        // split by legal entity Tax ID
        if (this.splitTaxId())
        {
            switch (_source.TableId)
            {
                case tableNum(SalesLine) :
                    salesLine = _source;
                    key = this.addToKey(key, int2str(salesLine.TaxId));
                    break;

                case tableNum(SalesParmTable) :
                    salesParmTable = _source;
                    key = this.addToKey(key, int2Str(salesParmTable.TaxId));
                    break;

                case tableNum(SalesParmLine) :
                    salesParmLine = _source;
                    key = this.addToKey(key, int2Str(salesParmLine.salesLine().TaxId));
                    break;

                case tableNum(SalesParmSubTable) :
                    salesParmSubTable = _source;
                    key = this.addToKey(key, int2Str(salesParmSubTable.salesParmTable().TaxId));
                    break;
            }
        }


        // <GBR>
        if (countryRegion_BR)
        {
            return this.postParmTableMapKey_BR(_source, key);
        }
        // </GBR>

        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTableTableId</Name>
				<Source><![CDATA[
    protected TableId parmTableTableId()
    {
        return tableNum(SalesParmTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValidateLoadStatus</Name>
				<Source><![CDATA[
    public boolean parmValidateLoadStatus(boolean _validateLoadStatus = validateLoadStatus)
    {
        validateLoadStatus = _validateLoadStatus;
        return validateLoadStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWHSLoadId</Name>
				<Source><![CDATA[
    public WHSLoadId parmWHSLoadId(WHSLoadId _whsLoadId = whsLoadId)
    {
        whsLoadId = _whsLoadId;

        return whsLoadId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsPostingTransportLoads</Name>
				<Source><![CDATA[
    public boolean parmIsPostingTransportLoads(boolean _isPostingTransportLoads = isPostingTransportLoads)
    {
        isPostingTransportLoads = _isPostingTransportLoads;

        return isPostingTransportLoads;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight quantities based on the quantity type.
    /// </summary>
    /// <param name="_common">
    /// A <c>Common</c> record buffer that contains the quantity to invoice based on the quantity type.
    /// </param>
    /// <param name="_qty">
    /// A quantity to process; optional.
    /// </param>
    /// <returns>
    /// A container that contains the catch weight quantities.
    /// </returns>
    public container pdsCWQty(Common _common, PdsCWInventQty _qty = naReal())
    {
        return salesQuantity.pdsCWQtyInvent(_common, salesParmUpdate.SpecQty, _qty, salesParmUpdate.CreditRemaining);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingProfile_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns posting profile actual for update
    /// </summary>
    /// <param name="_lineProfile">
    /// Posting profile specified in line
    /// </param>
    /// <param name="_tableProfile">
    /// Posting profile specified in table
    /// </param>
    /// <returns>
    /// Line profile if invoices should be splitted by line profiles, otherwise table profiles
    /// </returns>
    public CustPostingProfile postingProfile_RU(
        CustPostingProfile _lineProfile,
        CustPostingProfile _tableProfile)
    {
        if (this.splitPostingProfile_RU() && _lineProfile)
        {
            return _lineProfile;
        }
        return _tableProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postParmTableMapKey_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs values in to string.
    /// </summary>
    /// <param name="_source">
    /// Source table record.
    /// </param>
    /// <param name="_key">
    /// The original formatted string.
    /// </param>
    /// <returns>
    /// Formatted string.
    /// </returns>
    protected str postParmTableMapKey_BR(Common _source, str _key)
    {
        SalesLine       salesLine;
        SalesParmLine   salesParmLine;
        SalesParmTable  salesParmTable;

        if (this.isMCRGiftcardSalesLine(_source))
        {
            return _key;
        }

        switch (_source.TableId)
        {
            case tableNum(SalesLine) :
                salesLine = _source;
                _key = this.addToKey(_key, FiscalDocumentType_BR::findRecId(salesLine.salesLine_BR().FiscalDocumentType_BR).FiscalDocumentTypeId);
                break;

            case tableNum(SalesParmLine) :
                salesParmLine = _source;
                _key = this.addToKey(_key, FiscalDocumentType_BR::findRecId(salesParmLine.salesLine().salesLine_BR().FiscalDocumentType_BR).FiscalDocumentTypeId);
                break;

            case tableNum(SalesParmTable) :
                salesParmTable = _source;
                _key = this.addToKey(_key, FiscalDocumentType_BR::findRecId(salesParmTable.FiscalDocumentType_BR).FiscalDocumentTypeId);
                break;

            case tableNum(SalesParmSubTable) :
                SalesParmSubTable salesParmSubTable = _source;
                _key = this.addToKey(_key, FiscalDocumentType_BR::findRecId(salesParmSubTable.salesParmTable().FiscalDocumentType_BR).FiscalDocumentTypeId);
                break;

            default:
        }

        if (this.splitByServiceCode_BR())
        {
            switch (_source.TableId)
            {
                case tableNum(SalesLine) :
                    salesLine = _source;
                    _key = this.addToKey(_key, salesLine.salesLine_BR().TaxServiceCode_BR);
                    break;

                case tableNum(SalesParmLine) :
                    salesParmLine = _source;
                    _key = this.addToKey(_key, salesParmLine.salesLine().salesLine_BR().TaxServiceCode_BR);
                    break;

                case tableNum(SalesParmTable) :
                    salesParmTable = _source;
                    _key = this.addToKey(_key, salesParmTable.TaxServiceCodeId_BR);
                    break;
            }
        }

        return _key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postUseSplitting_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether splitting of the posting parameter lines is supported.
    /// </summary>
    /// <param name="_returnValue">
    /// The original return value.
    /// </param>
    /// <returns>
    /// true if the splitting process should be executed; otherwise, false.
    /// </returns>
    protected boolean postUseSplitting_BR(boolean _returnValue)
    {
        return _returnValue || salesParameters.SplitInvoiceByServiceCode_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyInvent</Name>
				<Source><![CDATA[
    public container  qtyInvent(Common       _common,
                                InventQty    _qty = naReal())
    {
        return salesQuantity.qtyInvent(_common, salesParmUpdate.SpecQty, _qty, salesParmUpdate.CreditRemaining);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtySales</Name>
				<Source><![CDATA[
    public container  qtySales(Common    _common,
                               SalesQty  _qty = naReal())
    {
        return salesQuantity.qtySales(_common, salesParmUpdate.SpecQty, _qty, salesParmUpdate.CreditRemaining);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the query used to create data.
    /// </summary>
    /// <returns>
    /// A string with the name of the used query.
    /// </returns>
    protected str queryName()
    {
        // <GEERU>
        if (countryRegion_RU && salesParmUpdate.SplitInventOwnerId_RU)
        {
            return queryStr(SalesUpdateInventTrans_RU);
        }
        // </GEERU>
        return queryStr(SalesUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reArrange</Name>
				<Source><![CDATA[
    public void reArrange()
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().salesFormLetterParmDataActivities().reArrange(salesParmUpdate))
        {
            SalesParmTable salesParmTable;
            MapEnumerator enumerator;
            Map mapRecId = new Map(Types::String, Types::Int64);

            if (! EInvoiceCFDIParameters_MX::isElectronicInvoiceEnabled())
            {
                super();
                return;
            }

            //This logic refreshes references in EInvoiceCFDIReferenceParm_MX table, because reArrange() recreates SalesParmTable records
            while select SalesId from salesParmTable
            where salesParmTable.ParmId == parmId
            {
                mapRecId.insert(salesParmTable.SalesId, salesParmTable.RecId);
            }

            activityContext.addCustomProperty('eInvoiceCount', int2Str(mapRecId.elements()));

            super();

            enumerator = mapRecId.getEnumerator();
            while (enumerator.moveNext())
            {
                select firstonly RecId from salesParmTable
                where salesParmTable.ParmId == parmId
                   && salesParmTable.SalesId == enumerator.currentKey();

                EInvoiceCFDIReferenceParm_MX::updateReferences(salesParmTable.TableId, enumerator.currentValue(), salesParmTable.RecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reArrangeCreateParmTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new document header during the re-arrange process.
    /// </summary>
    /// <param name="_queryRun">
    /// A <c>QueryRun</c> object.
    /// </param>
    /// <param name="_oldSalesParmTable">
    /// The original document header.
    /// </param>
    /// <param name="_newTableRefId">
    /// The <c>TradeLineRefId</c> for the new document.
    /// </param>
    /// <param name="_skipParmSubTable">
    /// Indicates if creation of the ParmSubTable record should be skipped.
    /// </param>
    protected void reArrangeCreateParmTable(QueryRun _queryRun,
                                            SalesParmTable _oldSalesParmTable,
                                            TradeLineRefId _newTableRefId,
                                            boolean _skipParmSubTable)
    {
        if (_oldSalesParmTable.RecId && _queryRun.changed(tableNum(SalesParmSubTable)))
        {
            salesParmTableReArrange.data(_oldSalesParmTable);
            if (salesParmTableReArrange.SalesId != salesTable.SalesId)
            {
                this.updateParmTable(salesParmTableReArrange, salesTable);
            }
            salesParmTableReArrange.TableRefId = _newTableRefId;
            this.insertParmTable(salesParmTableReArrange);
        }
        else
        {
            salesParmTableReArrange.clear();
            this.createParmTable(salesTable, null, _newTableRefId, _skipParmSubTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reArrangeEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates when the re-arrange of data is completed.
    /// </summary>
    protected void reArrangeEnd()
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().salesFormLetterParmDataActivities().reArrangeEnd())
        {
            SalesParmSubTable   localSalesParmSubTable;
            SalesParmLine       localSalesParmLine;
            SalesParmTable      localSalesParmTable;

            delete_from forceplaceholders localSalesParmSubTable
                where localSalesParmSubTable.ParmId == salesParmUpdate.ParmId
                notexists join localSalesParmLine
                    where localSalesParmLine.ParmId              == localSalesParmSubTable.ParmId
                       && localSalesParmLine.TableRefId          == localSalesParmSubTable.TableRefId
                       && localSalesParmLine.OrigSalesId         == localSalesParmSubTable.OrigSalesId;

            activityContext.addCustomProperty('salesParmSubTable', int2Str(localSalesParmSubTable.RowCount()));

            if (!TaxIntegrationUtils::isTransitDocumentEnabled())
            {
                this.deleteSalesParmRelatedTables();

                localSalesParmTable.skipDeleteActions(true);
                localSalesParmTable.skipDeleteMethod(true);
            }

            delete_from forceplaceholders localSalesParmTable
                where localSalesParmTable.ParmId == salesParmUpdate.ParmId
                notexists join localSalesParmSubTable
                    where localSalesParmSubTable.ParmId     == localSalesParmTable.ParmId
                       && localSalesParmSubTable.TableRefId == localSalesParmTable.TableRefId;

            activityContext.addCustomProperty('salesParmTable', int2Str(localSalesParmTable.RowCount()));

            salesParmTableReArrange.clear();

            if (!this.checkTaxWorkRegulation())
            {
                throw error("@SYS21628");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSalesParmRelatedTables</Name>
				<Source><![CDATA[
    private void deleteSalesParmRelatedTables()
    {
        SalesParmTable localSalesParmTable;
        SalesParmSubTable localSalesParmSubTable;
        SalesShippingStat salesShippingStat;

        delete_from salesShippingStat
            where salesShippingStat.ParmId == salesParmUpdate.ParmId
                && !salesShippingStat.PackingSlipId
            notexists join localSalesParmSubTable
                where localSalesParmSubTable.ParmId      == salesShippingStat.ParmId
                    && localSalesParmSubTable.TableRefId == salesShippingStat.TableRefId;

        Microsoft.Dynamics.Ax.Xpp.PlatformExtensions.CommonExtensions::SetSqlUpdateIndexHint(salesShippingStat, indexStr(SalesShippingStat, ParmIdx));

        update_recordset salesShippingStat
            setting  ParmId = ''
            where salesShippingStat.ParmId == salesParmUpdate.ParmId
                && salesShippingStat.PackingSlipId
            notexists join localSalesParmSubTable
                where localSalesParmSubTable.ParmId      == salesShippingStat.ParmId
                    && localSalesParmSubTable.TableRefId == salesShippingStat.TableRefId;

        if (BrazilParameters::isEnabled())
        {
            FiscalReferenceParm_BR fiscalReference;

            delete_from fiscalReference
                where fiscalReference.SourceTableId == tableNum(SalesParmTable)
                exists join localSalesParmTable
                    where localSalesParmTable.ParmId == salesParmUpdate.ParmId
                        && localSalesParmTable.RecId  == fiscalReference.SourceRecId
                notexists join localSalesParmSubTable
                    where localSalesParmSubTable.ParmId     == localSalesParmTable.ParmId
                        && localSalesParmSubTable.TableRefId == localSalesParmTable.TableRefId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reArrangeInit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the re-arrange process.
    /// </summary>
    protected void reArrangeInit()
    {
        salesSummary    = SalesSummary::construct(salesParmUpdate.SumBy, salesParmUpdate.ParmId, salesParmUpdate.SumSalesId, this.parmDocumentStatus());

        if (salesParmUpdate.SumSalesId)
        {
            salesSummary.summarySalesId (salesParmUpdate.SumSalesId);
            salesSummary.summaryTableRef(formletterParmData::getNewTableRefId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reArrangeLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Re-arranges the record in the line posting parameter table.
    /// </summary>
    /// <param name="_queryRun">
    /// A <c>QueryRun</c> object.
    /// </param>
    protected void reArrangeLines(QueryRun _queryRun)
    {
        SalesParmTable              oldSalesParmTable;
        SalesParmSubLine            localSalesParmSubLine;
        TradeLineRefId              newTableRefId;

        SalesParmSubTable localSalesParmSubTable = _queryRun.get(tableNum(SalesParmSubTable));
        salesTable = localSalesParmSubTable.salesTable();

        if (salesParmUpdate.SumBy == AccountOrder::Journal)
        {
            localSalesParmSubLine = _queryRun.get(tableNum(SalesParmSubLine));
        }

        if (!salesTable.isInterCompanyOrder()
        ||   salesParmUpdate.SumBy == AccountOrder::Auto
        ||   salesParmUpdate.SumBy == AccountOrder::Journal
        ||   salesParmUpdate.SumBy == AccountOrder::Account)
        {
            if (this.createNewJournal(localSalesParmSubTable))
            {
                if (!salesParmUpdate.SumSalesId)
                {
                    salesSummary.summarySalesId (salesTable.SalesId);
                    salesSummary.summaryTableRef(formletterParmData::getNewTableRefId());
                }
                oldSalesParmTable = localSalesParmSubTable.salesParmTable();

                this.reArrangeCreateParmTable(_queryRun, oldSalesParmTable, salesSummary.summaryTableRef(), true);
            }

            this.moveParmLine(localSalesParmSubTable, localSalesParmSubLine, salesSummary.summarySalesId(), salesSummary.summaryTableRef());
            localSalesParmSubTable.TableRefId = salesSummary.summaryTableRef();
        }
        else
        {
            if (this.createNewJournal(localSalesParmSubTable))
            {
                oldSalesParmTable = localSalesParmSubTable.salesParmTable();
                newTableRefId = formletterParmData::getNewTableRefId();

                this.reArrangeCreateParmTable(_queryRun, oldSalesParmTable, newTableRefId, false);
            }

            this.moveParmLine(localSalesParmSubTable, localSalesParmSubLine, salesParmTableReArrange.SalesId, salesParmTableReArrange.TableRefId);
            localSalesParmSubTable.TableRefId = salesParmTableReArrange.TableRefId;
        }

        if (localSalesParmSubTable.TableRefId != localSalesParmSubTable.orig().TableRefId && 
            oldSalesParmTable)
        {
            this.moveTrackingNumbers(oldSalesParmTable, localSalesParmSubTable.TableRefId);
        }

        if (localSalesParmSubTable.TableRefId != localSalesParmSubTable.orig().TableRefId &&
            !SalesParmSubTable::exist(localSalesParmSubTable.ParmId, localSalesParmSubTable.TableRefId, localSalesParmSubTable.OrigSalesId, localSalesParmSubTable.SubId))
        {
            localSalesParmSubTable.doUpdate();
        }

        // <GBR>
        if (countryRegion_BR)
        {
            FiscalReferenceParm_BR::move(oldSalesParmTable, salesParmTableReArrange);
        }
        // </GBR>

        // <GCN>
        if (isTaxIntegrationSystemEnable)
        {
            SalesParmTableExtension_CN salesParmTableExt = SalesParmTableExtension_CN::findBySalesParmTable(oldSalesParmTable.RecId, true);

            if (salesParmTableExt)
            {
                ttsBegin;
                salesParmTableExt.SalesParmTable = salesParmTableReArrange.RecId;
                salesParmTableExt.update();
                ttsCommit;
            }
        }
        // </GCN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves the <c>SalesParmLine</c> and optionally, <c>SalesShippingStat</c> records to the specific sales order.
    /// </summary>
    /// <param name = "_localSalesParmSubTable">The <c>SalesParmSubTable</c>.</param>
    /// <param name = "_localSalesParmSubLine">The <c>SalesParmSubLine</c>.</param>
    /// <param name = "_toSalesId">The <c>SalesId</c>.</param>
    /// <param name = "_toTableRefId">The <c>TradeLineRefId</c>.</param>
    protected void moveParmLine(SalesParmSubTable _localSalesParmSubTable,
                                SalesParmSubLine  _localSalesParmSubLine,
                                SalesId           _toSalesId,
                                TradeLineRefId    _toTableRefId)
    {
        SalesParmLine     salesParmLine;
        SalesShippingStat salesShippingStat;

        ttsbegin;

        update_recordset salesParmLine
                setting TableRefId = _toTableRefId
                where salesParmLine.ParmId                                         ==  salesParmUpdate.ParmId
                   && salesParmLine.OrigSalesId                                    == _localSalesParmSubTable.OrigSalesId
                   && salesParmLine.TableRefId                                     == _localSalesParmSubTable.TableRefId
                   && (!_localSalesParmSubLine.LineRefRecId || salesParmLine.RecId == _localSalesParmSubLine.LineRefRecId);

        if (this.useShippingStat())
        {
            Microsoft.Dynamics.Ax.Xpp.PlatformExtensions.CommonExtensions::SetSqlUpdateIndexHint(salesShippingStat, indexStr(SalesShippingStat, ParmIdx));

            update_recordset salesShippingStat
                    setting SalesId     = _toSalesId,
                            TableRefId  = _toTableRefId
                    where salesShippingStat.ParmId      ==  salesParmUpdate.ParmId
                       && salesShippingStat.TableRefId  == _localSalesParmSubTable.TableRefId
                       && salesShippingStat.OrigSalesId == _localSalesParmSubTable.OrigSalesId;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reArrangeQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>QueryRun</c> object that is used in the re-arrange process.
    /// </summary>
    /// <returns>
    /// A <c>QueryRun</c> object.
    /// </returns>
    protected QueryRun reArrangeQueryRun()
    {
        return salesSummary.queryBuild(this.parmIsInBatch());
    }

]]></Source>
			</Method>
			<Method>
				<Name>reArrangeSplit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a split of the re-arranged data.
    /// </summary>
    protected void reArrangeSplit()
    {
        SalesParmTable      localSalesParmTable;
        SalesParmSubTable   localSalesParmSubTable;
        SalesParmLine       localSalesParmLine;

        // find the salesParmLines with same parmId and tableRefId from salesParmTable,
        // but have a different splitting than the salesParmTable
        // updateSalesParmTable creates salesParmTables and update salesParmLine with tableRef.

        while select localSalesParmTable
            where localSalesParmTable.ParmId        == this.parmId()
               && localSalesParmTable.ParmJobStatus == ParmJobStatus::Waiting
            exists join localSalesParmSubTable
                where localSalesParmSubTable.ParmId == localSalesParmTable.ParmId &&
                      localSalesParmSubTable.TableRefId == localSalesParmTable.TableRefId
        {
            this.insertParmTableMap(localSalesParmTable);
        }

        while select forupdate localSalesParmLine
            where localSalesParmLine.ParmId == this.parmId()
        {
            TradeLineRefId tableRefId = this.getTableRefId(localSalesParmLine);

            if (localSalesParmLine.TableRefId != tableRefId)
            {
                SalesParmTable oldSalesParmTable = localSalesParmLine.salesParmTable();

                if (oldSalesParmTable.ParmJobStatus != ParmJobStatus::Waiting)
                {
                    continue;
                }

                if (!parmTableMap.exists(this.parmTableMapKey(localSalesParmLine)))
                {
                    this.initializeSalesParmTable(localSalesParmTable,
                                                  oldSalesParmTable,
                                                  localSalesParmLine,
                                                  tableRefId);
                }
                else
                {
                    localSalesParmTable = oldSalesParmTable;
                }

                localSalesParmSubTable               = this.createSalesParmSubTable(localSalesParmTable, localSalesParmLine);
                localSalesParmLine.TableRefId        = tableRefId;
                localSalesParmLine.doUpdate();

                // <GBR>
                if (countryRegion_BR)
                {
                    FiscalReferenceParm_BR::move(oldSalesParmTable, localSalesParmSubTable.salesParmTable(), localSalesParmSubTable.salesParmTable().RecId);
                }
                // </GBR>
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSalesParmTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>SalesParmTable</c> table.
    /// </summary>
    /// <param name = "_localSalesParmTable">The <c>SalesParmTable</c> table with identical ParmId and TableRefId as <c>SalesParmSubTable</c>.</param>
    /// <param name = "_oldSalesParmTable">The <c>SalesParmTable</c> table before the modifications.</param>
    /// <param name = "_localSalesParmLine">The <c>SalesParmLine</c> record.</param>
    /// <param name = "_tableRefId">The <c>TradeLineRefId</c> id of <c>SalesParmSubTable</c></param>
    protected void initializeSalesParmTable(SalesParmTable _localSalesParmTable,
                                            SalesParmTable _oldSalesParmTable,
                                            SalesParmLine  _localSalesParmLine,
                                            TradeLineRefId _tableRefId)
    {
        _localSalesParmTable.data(_oldSalesParmTable);
        _localSalesParmTable.TableRefId = _tableRefId;

        this.updateTableSplit(_localSalesParmTable, _localSalesParmLine);
        this.insertParmTable(_localSalesParmTable);

        // <GBR>
        if (countryRegion_BR)
        {
            FiscalReferenceParm_BR::move(_oldSalesParmTable, _oldSalesParmTable);
        }
        // </GBR>

        this.tableRefIdUsed(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesParmSubTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates instance of <c>SalesParmSubTable</c>.
    /// </summary>
    /// <param name="_salesParmTable">
    /// Information about posting sales header.
    /// </param>
    ///  <param name="_salesParmLine">
    /// Information about posting sales lines.
    /// </param>
    /// <returns>
    /// Instance of <c>SalesParmSubTable</c>
    /// </returns>
    protected SalesParmSubTable createSalesParmSubTable(SalesParmTable _salesParmTable, SalesParmLine _salesParmLine)
    {
        SalesParmSubTable   localSalesParmSubTable;
        TradeLineRefId tableRefId = this.getTableRefId(_salesParmLine);
        localSalesParmSubTable.ParmId = _salesParmTable.ParmId;
        localSalesParmSubTable.TableRefId = tableRefId;
        localSalesParmSubTable.OrigSalesId = _salesParmLine.OrigSalesId;
        localSalesParmSubTable.SubId = _salesParmLine.subId();

        if (!this.existsParmSubTable(localSalesParmSubTable))
        {
            localSalesParmSubTable.data(_salesParmLine.salesParmSubTable());
            localSalesParmSubTable.TableRefId   = tableRefId;
            this.insertParmSubTable(localSalesParmSubTable);
        }
        return localSalesParmSubTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recIdSuspensionTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of tables that should have suspended record ID generation.
    /// </summary>
    /// <returns>
    /// A <c>List</c> of table IDs that have suspended record ID generation.
    /// </returns>
    protected List recIdSuspensionTables()
    {
        List    list    = super();

        list.addEnd(tableNum(SalesParmLine));
        // <GEERU><GEEPL><GBR><GCN>
        if (countryRegion_RU || countryRegion_PL || countryRegion_BR || isTaxIntegrationSystemEnable)
        {
            list.addEnd(tableNum(SalesParmTable));
        }
        // </GEERU></GEEPL></GBR></GCN>
        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reSelect</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a re-select of the created data.
    /// </summary>
    public void  reSelect()
    {
        ttsbegin;
        if (this.parmCreateFromLines())
        {
            SalesParmTable::deleteWithoutUpdate(this.parmId());
            this.selectChooseLines();
        }
        else
        {
            super();
            this.updateAllSalesShippingStat();
        }
        this.fillOutputContract();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reSelectLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Re-selects the record in the line posting parameter table.
    /// </summary>
    /// <param name="_origOrderId">
    /// An order ID.
    /// </param>
    protected void reSelectLines(SalesId _origOrderId)
    {
        Query query = this.buildReSelectLinesQuery(_origOrderId);
        QueryRun queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            SalesLine localSalesLine = queryRun.get(tableNum(SalesLine));
            this.reSelectLine(localSalesLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildReSelectLinesQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the <c>Query</c> object for reselecting the sales lines.
    /// </summary>
    /// <param name = "_origOrderId">
    /// The order id to filter on.
    /// </param>
    /// <returns>
    /// The <c>Query</c> object for reselecting the sales lines.
    /// </returns>
    protected Query buildReSelectLinesQuery(SalesId _origOrderId)
    {
        Query query = new Query();

        QueryBuildDataSource qbdsSalesLine = query.addDataSource(tableNum(SalesLine));
        qbdsSalesLine.addSortIndex(indexNum(SalesLine, SalesLineIdx));
        qbdsSalesLine.indexIsHint(true);
        qbdsSalesLine.addRange(fieldNum(SalesLine, SalesId)).value(queryValue(_origOrderId));
        qbdsSalesLine.addRange(fieldNum(SalesLine, Blocked)).value(queryValue(NoYes::No));

        if (countryRegion_RU && this.splitInventOwnerId_RU())
        {
            this.addInventTransJoins(query);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventTransJoins</Name>
				<Source><![CDATA[
    private void addInventTransJoins(Query _query)
    {
        QueryBuildDataSource qbdsInventTransOrigin = _query.dataSourceTable(tableNum(SalesLine)).addDataSource(tableNum(InventTransOrigin));
        qbdsInventTransOrigin.joinMode(JoinMode::ExistsJoin);
        qbdsInventTransOrigin.addLink(fieldNum(SalesLine, InventTransId), fieldNum(InventTransOrigin, InventTransId));

        QueryBuildDataSource qbdsInventTrans = qbdsInventTransOrigin.addDataSource(tableNum(InventTrans));
        qbdsInventTrans.joinMode(JoinMode::ExistsJoin);
        qbdsInventTrans.addLink(fieldNum(InventTransOrigin, RecId), fieldNum(InventTrans, InventTransOrigin));
        qbdsInventTrans.addRange(fieldNum(InventTrans, StatusIssue)).value(SysQuery::valueNot(StatusIssue::Sold));
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesStatusRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the sales status range that selects the sales orders to be updated.
    /// </summary>
    /// <returns>
    ///    The sales status range that selects the sales orders to be updated.
    /// </returns>
    /// <remarks>
    ///    The purpose of the <c>salesStatusRange</c> method is to add a filter when the sales orders to
    ///    update are selected using the select button in the <c>SalesEditLines</c> form.
    /// </remarks>
    protected str salesStatusRange()
    {
        return queryValue(SalesStatus::Backorder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectChooseLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the <c>ChooseLines</c> method to execute.
    /// </summary>
    /// <param name="_append">
    /// A Boolean value that indicates whether to append or delete existing data first; optional.
    /// </param>
    protected void selectChooseLines(boolean _append = false)
    {
        this.parmGiroAllSame(true);

        super(_append);

        this.updateAllSalesShippingStat();
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipMayJournalBePosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to skip the call to the <c>SalesFormletterParmData.MayJournalBePosted</c> method
    /// when data is created.
    /// </summary>
    /// <returns>
    /// true if the method call should be skipped; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Always returns false in the base class.
    /// </remarks>
    protected boolean skipMayJournalBePosted()
    {
        boolean skip = super();

        if (!skip)
        {
            if (interCompanyParmId ||
                directDeliveryUpdate)
            {
                skip = true;
            }
        }

        return skip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceLineTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a table ID for a source line table.
    /// </summary>
    /// <returns>
    /// A table ID.
    /// </returns>
    protected TableId sourceLineTableId()
    {
        return tableNum(SalesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableChanged</Name>
				<Source><![CDATA[
    protected void sourceTableChanged(Common newSourceTable)
    {
        super(newSourceTable);
        salesTableOrig = newSourceTable as SalesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID for a source table.
    /// </summary>
    /// <returns>
    /// A table ID.
    /// </returns>
    protected TableId sourceTableTableId()
    {
        return tableNum(SalesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitByDlvTerm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to split by delivery term.
    /// </summary>
    /// <returns>
    /// true if the order should be splitted by delivery term; otherwise false.
    /// </returns>
    protected boolean splitByDlvTerm()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitByServiceCode_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the data should be splited by the service code.
    /// </summary>
    /// <returns>
    /// True if the data should be splitted by the service code; otherwise, false.
    /// </returns>
    protected boolean splitByServiceCode_BR()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitDeliveryInformation</Name>
				<Source><![CDATA[
    protected NoYes splitDeliveryInformation(NoYes  _splitDeliveryInformation = salesParmUpdate.SplitDeliveryInformation)
    {
        salesParmUpdate.SplitDeliveryInformation = _splitDeliveryInformation;
        return salesParmUpdate.SplitDeliveryInformation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitInventOwnerId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if invoices in update should be splitted by inventory owners
    /// </summary>
    /// <param name="_splitInventOwnerId">
    /// Parameter, if true should be splitted
    /// </param>
    /// <returns>
    /// True, if invoices in update should be splitted by inventory profile types
    /// </returns>
    NoYes splitInventOwnerId_RU(NoYes _splitInventOwnerId = salesParmUpdate.SplitInventOwnerId_RU)
    {
        salesParmUpdate.SplitInventOwnerId_RU = _splitInventOwnerId;
        return salesParmUpdate.SplitInventOwnerId_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitInventProfileType_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if invoices in update should be splitted by inventory profile types
    /// </summary>
    /// <param name="_splitInventProfileType">
    /// Parameter, if true should be splitted
    /// </param>
    /// <returns>
    /// True, if invoices in update should be splitted by inventory profile types
    /// </returns>
    public NoYes splitInventProfileType_RU(NoYes _splitInventProfileType = salesParmUpdate.SplitInventProfileType_RU)
    {
        salesParmUpdate.SplitInventProfileType_RU = _splitInventProfileType;
        return salesParmUpdate.SplitInventProfileType_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitPostingProfile_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if invoices in update should be splitted by posting profiles
    /// </summary>
    /// <param name="_splitPostingProfile">
    /// Parameter, if true should be splitted
    /// </param>
    /// <returns>
    /// True, if invoices in update should be splitted by posting profiles
    /// </returns>
    public NoYes splitPostingProfile_RU(NoYes _splitPostingProfile = salesParmUpdate.SplitPostingProfile_RU)
    {
        salesParmUpdate.SplitPostingProfile_RU = _splitPostingProfile;
        return salesParmUpdate.SplitPostingProfile_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitSite</Name>
				<Source><![CDATA[
    protected TradeSplitSite splitSite(TradeSplitSite  _splitSite = salesParmUpdate.SplitSite)
    {
        salesParmUpdate.SplitSite = _splitSite;
        return salesParmUpdate.SplitSite;
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitTaxId</Name>
				<Source><![CDATA[
    protected NoYes splitTaxId(NoYes _splitTaxId = salesParmUpdate.SplitTaxId)
    {
        if (TaxIntegrationUtils::isMultipleTaxIdAllowedWithinOneSalesOrder())
        {
            salesParmUpdate.SplitTaxId = _splitTaxId;
            return salesParmUpdate.SplitTaxId;
        }
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAllSalesShippingStat</Name>
				<Source><![CDATA[
    protected void updateAllSalesShippingStat()
    {
        SalesParmSubTable localSalesParmSubTable;

        if (this.useShippingStat())
        {
            while select localSalesParmSubTable
                where localSalesParmSubTable.ParmId == salesParmUpdate.ParmId
            {
                if (SalesShippingStatUpdateOnlyCurrentBatchTaskRecordsFlight::instance().isEnabled()
                 && this.lateSelection() 
                 && parmSubTableMap.elements() > 0 
                 && !parmSubTableMap.exists(this.parmSubTableMapKey(localSalesParmSubTable)))
                {
                    continue;
                }

                // <GBR>
                if (this.isPostFromLoad_BR())
                {
                    SalesShippingStat::createSalesShippingStatFromLoad_BR(localSalesParmSubTable, salesParmUpdate, this.parmWHSLoadId());
                }
                else
                {
                    // </GBR>
                    SalesShippingStat::createSalesShippingStat(localSalesParmSubTable, salesParmUpdate);
                    // <GBR>
                }
                // </GBR>
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParmTable</Name>
				<Source><![CDATA[
    protected void  updateParmTable(SalesParmTable    _salesParmTable,
                                    SalesTable        _salesTable)
    {
        _salesParmTable.initFromSalesTable(_salesTable);
        _salesParmTable.CustBankAccountId       = this.custBankAccountId(_salesTable);
        // <GEERU>
        if (countryRegion_RU)
        {
            _salesParmTable.PostingProfile_RU    = _salesTable.PostingProfile;
            _salesParmTable.InventProfileType_RU = InventProfileType_RU::General;
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the query used during data creation.
    /// </summary>
    public void updateQueryBuild()
    {
        int             noSelected;

        super();

        if (this.useLateSelectionQuery() && !this.parmUsePackedMapInChooseLinesQuery())
        {
            return;
        }

        if (! this.parmDatasourceRecordsPacked() || this.parmCreateFromLines())
        {
            if (interCompanyMapPacked)
            {
                noSelected = this.updateQueryDocumentRanges(interCompanyMapPacked);
                if (noSelected > 1)
                    this.parmDefaultGiroType(NoYes::Yes);
                else
                    this.parmDefaultGiroType(NoYes::No);
            }
            else
            {
                chooseLines.query().dataSourceTable(tableNum(SalesTable)).addRange(fieldNum(SalesTable, SalesId));

                if (this.invoiceAccountInQuery())
                {
                    chooseLines.query().dataSourceTable(tableNum(SalesTable)).addRange(fieldNum(SalesTable, InvoiceAccount));
                }

                if (this.custAccountInQuery())
                {
                    chooseLines.query().dataSourceTable(tableNum(SalesTable)).addRange(fieldNum(SalesTable, CustAccount));
                }

                chooseLines.query().dataSourceTable(tableNum(SalesTable)).addRange(fieldNum(SalesTable, SalesPoolId));
                chooseLines.query().dataSourceTable(tableNum(SalesTable)).addRange(fieldNum(SalesTable, SalesStatus)).value(this.salesStatusRange());

                if (this.mustAddSalesTableRanges())
                {
                    chooseLines.query().dataSourceTable(tableNum(SalesTable)).rangeField(fieldNum(SalesTable, SalesId)).value(queryValue(salesTable.SalesId));

                    if (this.invoiceAccountInQuery())
                    {
                        chooseLines.query().dataSourceTable(tableNum(SalesTable)).rangeField(fieldNum(SalesTable, InvoiceAccount)).value(queryValue(salesTable.InvoiceAccount));
                    }

                    if (this.custAccountInQuery())
                    {
                        chooseLines.query().dataSourceTable(tableNum(SalesTable)).rangeField(fieldNum(SalesTable, CustAccount)).value(queryValue(salesTable.CustAccount));
                    }

                    chooseLines.query().dataSourceTable(tableNum(SalesTable)).rangeField(fieldNum(SalesTable, SalesPoolId)).value(queryValue(salesTable.SalesPoolId));
                }
            }
        }
        else
        {
            setPrefix("@SYS25781");
            noSelected = this.updateQueryDocumentRanges(this.parmDatasourceRecordsPacked());
            if (!this.parmUsePackedMapInChooseLinesQuery())
            {
                this.parmDefaultGiroType(noSelected > 1 ? NoYes::Yes : NoYes::No);
            }
        }

        chooseLines.query().dataSourceTable(tableNum(SalesLine)).addRange(fieldNum(SalesLine, Blocked)).value(queryValue(NoYes::No));
        chooseLines.query().dataSourceTable(tableNum(SalesLine)).addRange(fieldNum(SalesLine, ConfirmedDlv));

        chooseLines.query().dataSourceTable(tableNum(SalesLine)).addSortField(fieldNum(SalesLine, SalesId));
        chooseLines.query().dataSourceTable(tableNum(SalesLine)).addSortField(fieldNum(SalesLine, LineNum));

        chooseLines.query().dataSourceTable(tableNum(InventDim)).addRange(fieldNum(InventDim, InventSiteId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustAddSalesTableRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that the query ranges can be added to the sales order header datasource.
    /// </summary>
    /// <returns>
    /// true if the query range should be added; otherwise, false.
    /// </returns>
    protected boolean mustAddSalesTableRanges()
    {
        return salesTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryBuild_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the query build information.
    /// </summary>
    /// <param name="_customsExportOrderType">
    /// The customs export order type.
    /// </param>
    public void  updateQueryBuild_IN(CustomsExportOrderType_IN _customsExportOrderType)
    {
        SysGlobalCache  cache = classfactory.globalCache();

        #Query

        this.initQueryBuild();

        if (datasourceRecordsPacked)
        {
            Map map = Map::create(datasourceRecordsPacked);
            MapEnumerator mapEnumerator = map.getEnumerator();

            while (mapEnumerator.moveNext())
            {
                SalesTable localSalesTable = mapEnumerator.currentValue();

                if ((_customsExportOrderType == CustomsExportOrderType_IN::ExportOrder      &&
                        localSalesTable.CustomsExportOrder_IN == NoYes::Yes)                ||
                        (_customsExportOrderType == CustomsExportOrderType_IN::SalesOrder   &&
                        localSalesTable.CustomsExportOrder_IN == NoYes::No))
                {
                    chooseLines.query().dataSourceTable(tableNum(SalesTable)).addRange(fieldNum(SalesTable, SalesId)).value(queryValue(localSalesTable.SalesId));
                }
                else
                {
                    chooseLines.query().dataSourceTable(tableNum(SalesTable)).addRange(fieldNum(SalesTable, SalesId)).value(queryValue(''));
                }
            }
        }
        else
        {
            if ((_customsExportOrderType == CustomsExportOrderType_IN::ExportOrder      &&
                salesTable.CustomsExportOrder_IN == NoYes::Yes)                         ||
                (_customsExportOrderType == CustomsExportOrderType_IN::SalesOrder       &&
                salesTable.CustomsExportOrder_IN == NoYes::No))
            {
                chooseLines.query().dataSourceTable(tableNum(SalesTable)).addRange(fieldNum(SalesTable, SalesId)).value(queryValue(salesTable.SalesId));
            }
            else
            {
                chooseLines.query().dataSourceTable(tableNum(SalesTable)).addRange(fieldNum(SalesTable, SalesId)).value(queryValue(''));
            }
        }

        chooseLines.query().interactive(showQueryForm);
        chooseLines.literals(#queryForcePlaceholders);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryDocumentRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the ranges on an order ID to a <c>Query</c> object that is used when data is created.
    /// </summary>
    /// <param name="_datasourceRecordsPackedMap">
    /// A container that contains a packed version of a map of order IDs.
    /// </param>
    /// <param name="_abortOnError">
    /// A <c>Boolean</c> value that indicates whether to stop the update of the query for an error.
    /// </param>
    /// <returns>
    /// The number of order ID ranges that are added to the query.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// An error occurred during update.
    /// </exception>
    protected int updateQueryDocumentRanges(container _datasourceRecordsPackedMap, boolean _abortOnError = false)
    {
        SalesTable      localSalesTable;

        int ret = super(_datasourceRecordsPackedMap, _abortOnError);

        if (TaxParameters::find().Customs_IN    &&
            ret                                 &&
            _datasourceRecordsPackedMap)
        {
            Counter counter = 0;
            Map map = Map::create(_datasourceRecordsPackedMap);
            MapEnumerator mapEnumerator = map.getEnumerator();

            while (mapEnumerator.moveNext())
            {
                localSalesTable = mapEnumerator.currentValue();
                if (localSalesTable.CustomsExportOrder_IN == NoYes::Yes)
                {
                    counter ++;
                }
                if (counter == conPeek(_datasourceRecordsPackedMap, 4))
                {
                    ttsbegin;
                    select forupdate salesParmUpdate
                        where salesParmUpdate.ParmId == parmId;
                    salesParmUpdate.CustomsExportOrderType_IN = CustomsExportOrderType_IN::ExportOrder;
                    salesParmUpdate.update();
                    ttscommit;
                }
                this.parmCustomsExportOrderType_IN(salesParmUpdate.CustomsExportOrderType_IN);
            }

            map = Map::create(_datasourceRecordsPackedMap);
            mapEnumerator = map.getEnumerator();

            while (mapEnumerator.moveNext())
            {
                localSalesTable = mapEnumerator.currentValue();

                if ((localSalesTable.CustomsExportOrder_IN == NoYes::Yes && salesParmUpdate.CustomsExportOrderType_IN == CustomsExportOrderType_IN::SalesOrder) ||
                       (localSalesTable.CustomsExportOrder_IN == NoYes::No  && salesParmUpdate.CustomsExportOrderType_IN == CustomsExportOrderType_IN::ExportOrder))
                {
                    QueryBuildRange rangeSalesTable = chooseLines.query().dataSourceTable(tableNum(SalesTable)).findRange(fieldNum(SalesTable, SalesId));
                    if (rangeSalesTable)
                    {
                        rangeSalesTable.value(queryValue(''));
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTableSplit</Name>
				<Source><![CDATA[
    protected void updateTableSplit(Common _toTable, Common _fromLine)
    {
        SalesLine       salesLine;
        SalesParmLine   salesParmLine;
        SalesTable      localSalesTable;
        // <GEERU>
        SalesTable_RU   salesTableRU;
        // </GEERU>
        SalesParmTable  salesParmTable;
        CustPackingSlipTrans    custPackingSlipTrans;

        //<GIN>
        TransTaxInformation     transTaxInformation;
        //</GIN>

        switch (_toTable.TableId)
        {
            case tableNum(SalesParmTable) :
                salesParmTable = _toTable;
                break;

            case tableNum(SalesTable) :
                localSalesTable = _toTable;
                break;
        }

        if (this.splitSite())
        {
            switch (_fromLine.TableId)
            {
                case tableNum(SalesParmLine) :
                    switch (_toTable.TableId)
                    {
                        case tableNum(SalesParmTable) :
                            salesParmLine = _fromLine;
                            salesParmTable.InventSiteId    = salesParmLine.inventDim().InventSiteId;
                            // <GIN>
                            if (isCountryRegionIN
                                && taxesMarked)
                            {
                                salesParmTable.TaxInformation_IN = salesParmLine.salesParmTable().TaxInformation_IN;
                            }
                            // </GIN>
                            break;
                    }
                    break;

                case tableNum(SalesLine) :
                    salesLine = _fromLine;
                    switch (_toTable.TableId)
                    {
                        case tableNum(SalesParmTable) :
                            salesParmTable.InventSiteId    = salesLine.inventDim().InventSiteId;
                            // <GIN>
                            if (isCountryRegionIN
                                 && taxesMarked)
                            {
                                transTaxInformation              = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(salesLine);
                                salesParmTable.TaxInformation_IN = TaxInformation_IN::findDefaultbyLocation(transTaxInformation.CompanyLocation).RecId;
                            }
                            // </GIN>
                            break;

                        case tableNum(SalesTable) :
                            localSalesTable.InventSiteId    = salesLine.inventDim().InventSiteId;
                            break;
                    }
                    break;

                case tableNum(CustPackingSlipTrans) :
                    custPackingSlipTrans = _fromLine;
                    switch (_toTable.TableId)
                    {
                        case tableNum(SalesTable) :
                            localSalesTable.InventSiteId    = custPackingSlipTrans.inventDim().InventSiteId;
                            break;
                    }
                    break;
            }
        }

        if (this.splitDeliveryInformation())
        {
            switch (_fromLine.TableId)
            {
                case tableNum(SalesParmLine) :
                    salesParmLine = _fromLine;

                    switch (_toTable.TableId)
                    {
                        case tableNum(SalesParmTable) :
                            salesParmTable.SalesId                  = salesParmLine.salesParmTable().SalesId;
                            salesParmTable.DeliveryPostalAddress    = salesParmLine.DeliveryPostalAddress;
                            salesParmTable.DeliveryName             = salesParmLine.DeliveryName;
                            salesParmTable.DlvMode                  = salesParmLine.DlvMode;
                            salesParmTable.DlvTerm                  = salesParmLine.DlvTerm;
                            salesParmTable.ShipCarrierId            = salesParmLine.ShipCarrierId;
                            salesParmTable.ShipCarrierAccount       = salesParmLine.ShipCarrierAccount;
                            salesParmTable.ShipCarrierPostalAddress = salesParmLine.ShipCarrierPostalAddress;
                            // <GIN>
                            if (isCountryRegionIN
                            && taxesMarked)
                            {
                                salesParmTable.TaxInformation_IN = salesParmLine.salesParmTable().TaxInformation_IN;
                            }
                            // </GIN>
                            break;
                    }
                    break;
                case tableNum(SalesLine) :
                    salesLine = _fromLine;

                    switch (_toTable.TableId)
                    {
                        case tableNum(SalesParmTable) :
                            salesParmTable.DeliveryName             = salesLine.DeliveryName;
                            salesParmTable.DeliveryPostalAddress    = salesLine.DeliveryPostalAddress;
                            salesParmTable.DlvMode                  = salesLine.DlvMode;
                            salesParmTable.DlvTerm                  = salesLine.DlvTerm;
                            salesParmTable.ShipCarrierId            = salesLine.ShipCarrierId;
                            salesParmTable.ShipCarrierAccount       = salesLine.ShipCarrierAccount;
                            salesParmTable.ShipCarrierPostalAddress = salesLine.ShipCarrierPostalAddress;
                            // <GIN>
                            if (isCountryRegionIN
                                 && taxesMarked)
                            {
                                transTaxInformation                 = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(salesLine);
                                salesParmTable.TaxInformation_IN    = TaxInformation_IN::findDefaultbyLocation(transTaxInformation.CompanyLocation).RecId;
                            }
                            // </GIN>
                            break;

                        case tableNum(SalesTable) :
                            localSalesTable.DeliveryName          = salesLine.DeliveryName;
                            localSalesTable.DeliveryPostalAddress = salesLine.DeliveryPostalAddress;
                            localSalesTable.DlvMode               = salesLine.DlvMode;
                            localSalesTable.DlvTerm               = salesLine.DlvTerm;
                            localSalesTable.ShipCarrierId         = salesLine.ShipCarrierId;
                            localSalesTable.ShipCarrierAccount    = salesLine.ShipCarrierAccount;
                            break;
                    }
                    break;
                case tableNum(CustPackingSlipTrans) :
                    custPackingSlipTrans = _fromLine;
                    salesLine = custPackingSlipTrans.salesLine();
                    switch (_toTable.TableId)
                    {
                        case tableNum(SalesTable) :
                            localSalesTable.DeliveryName          = salesLine.DeliveryName;
                            localSalesTable.DeliveryPostalAddress = salesLine.DeliveryPostalAddress;
                            localSalesTable.DlvMode               = salesLine.DlvMode;
                            localSalesTable.DlvTerm               = salesLine.DlvTerm;
                            localSalesTable.ShipCarrierId         = salesLine.ShipCarrierId;
                            localSalesTable.ShipCarrierAccount    = salesLine.ShipCarrierAccount;
                            break;
                    }
                    break;
            }
        }

        // <GEERU>
        if (countryRegion_RU)
        {
            switch (_fromLine.TableId)
            {
                case tableNum(SalesParmLine) :
                    switch (_toTable.TableId)
                    {
                        case tableNum(SalesParmTable) :
                            salesParmLine = _fromLine;
                            salesParmTable.InventProfileType_RU  = salesParmLine.InventProfileType_RU;
                            salesParmTable.PostingProfile_RU     = this.postingProfile_RU(salesParmLine.PostingProfile_RU, salesParmLine.salesLine().salesTable().PostingProfile);
                            salesParmTable.InventOwnerId_RU      = salesParmLine.InventOwnerId_RU;
                            break;
                    }
                    break;
                case tableNum(SalesLine)    :
                    salesLine = _fromLine;

                    switch (_toTable.TableId)
                    {
                        case tableNum(SalesParmTable) :
                            salesParmTable.InventProfileType_RU  = this.inventProfileType_RU(salesLine);
                            salesParmTable.PostingProfile_RU     = this.postingProfile_RU(salesLine.PostingProfile_RU, salesLine.salesTable().PostingProfile);
                            salesParmTable.InventOwnerId_RU      = this.inventOwnerId_RU(salesLine);
                            break;

                        case tableNum(SalesTable) :
                            salesTableRU = localSalesTable.salesTable_RU();
                            salesTableRU.InventProfileType_RU = this.inventProfileType_RU(salesLine);
                            localSalesTable.packSalesTable_RU(salesTableRU);

                            localSalesTable.PostingProfile = this.postingProfile_RU(salesLine.PostingProfile_RU, salesLine.salesTable().PostingProfile);
                            break;
                    }
                    break;
                case tableNum(CustPackingSlipTrans) :
                    custPackingSlipTrans = _fromLine;
                    switch (_toTable.TableId)
                    {
                        case tableNum(SalesTable) :
                            salesTableRU = localSalesTable.salesTable_RU();
                            salesTableRU.InventProfileType_RU = this.inventProfileType_RU(custPackingSlipTrans.salesLine());
                            localSalesTable.packSalesTable_RU(salesTableRU);

                            localSalesTable.PostingProfile = this.postingProfile_RU(custPackingSlipTrans.salesLine().PostingProfile_RU, custPackingSlipTrans.salesLine().salesTable().PostingProfile);
                            break;
                    }
                    break;
            }
        }
        // </GEERU>

        // <GBR>
        if (countryRegion_BR
            && !(RetailParameters::isRetailEnabledAndInUse()
                 && localSalesTable.isRetailStatement_BR())
                 && !this.isMCRGiftcardSalesLine(_fromLine))
        {
            switch (_fromLine.TableId)
            {
                case tableNum(SalesParmLine) :
                    salesParmLine = _fromLine;

                    switch (_toTable.TableId)
                    {
                        case tableNum(SalesParmTable) :
                            salesParmTable.FiscalDocumentType_BR = salesParmLine.salesLine().salesLine_BR().FiscalDocumentType_BR;
                            break;

                        default:
                    }
                    break;

                case tableNum(SalesLine) :
                    salesLine = _fromLine;

                    switch (_toTable.TableId)
                    {
                        case tableNum(SalesParmTable) :
                            salesParmTable.FiscalDocumentType_BR = salesLine.salesLine_BR().FiscalDocumentType_BR;
                            break;

                        case tableNum(SalesTable)    :
                            SalesTable_BR salesTable_BR = localSalesTable.salesTable_BR();
                            salesTable_BR.FiscalDocumentType_BR = salesLine.salesLine_BR().FiscalDocumentType_BR;
                            localSalesTable.packSalesTable_BR(salesTable_BR);
                            break;

                        default:
                    }
                    break;
            }

            if (this.splitByServiceCode_BR())
            {
                switch (_fromLine.TableId)
                {
                    case tableNum(SalesParmLine) :
                        salesParmLine = _fromLine;

                        switch (_toTable.TableId)
                        {
                            case tableNum(SalesParmTable) :
                                salesParmTable.TaxServiceCodeId_BR = salesParmLine.salesLine().salesLine_BR().TaxServiceCode_BR;
                                break;
                        }
                        break;

                    case tableNum(SalesLine) :
                        salesLine = _fromLine;

                        switch (_toTable.TableId)
                        {
                            case tableNum(SalesParmTable) :
                                salesParmTable.TaxServiceCodeId_BR = salesLine.salesLine_BR().TaxServiceCode_BR;
                                break;
                        }
                        break;
                }
            }
        }
        // </GBR>

        // split by legal entity Tax ID
        if (this.splitTaxId())
        {
            switch (_fromLine.TableId)
            {
                case tableNum(SalesParmLine) :
                    switch (_toTable.TableId)
                    {
                        case tableNum(SalesParmTable) :
                            salesParmLine = _fromLine;
                            salesParmTable.TaxId = salesParmLine.salesLine().TaxId;
                            break;
                    }
                    break;

                case tableNum(SalesLine) :
                    salesLine = _fromLine;
                    switch (_toTable.TableId)
                    {
                        case tableNum(SalesParmTable) :
                            salesParmTable.TaxId = salesLine.TaxId;
                            break;

                        case tableNum(SalesTable):
                            localSalesTable.TaxId = salesLine.TaxID;
                    }
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>useLateSelectionQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the last selection query should be used.
    /// </summary>
    /// <returns>
    /// true if the late selection query should be used; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Always returns false in base class.
    /// </remarks>
    protected boolean useLateSelectionQuery()
    {
        return salesParmUpdate.LateSelection && salesParmUpdate.LateSelectionQuery != conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>useShippingStat</Name>
				<Source><![CDATA[
    protected boolean useShippingStat()
    {
        return salesParameters.useShippingStat(this.parmDocumentStatus());
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSplitting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the splitting of the posting parameter lines is supported.
    /// </summary>
    /// <returns>
    /// true if the splitting process should be executed; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Always returns false in the base class.
    /// </remarks>
    protected boolean useSplitting()
    {
        boolean useSplitCommon = this.splitDeliveryInformation()
            || this.splitSite()
            || this.splitTaxId();

        // <GEERU>
        if (countryRegion_RU)
        {
            return useSplitCommon
                || this.splitInventProfileType_RU()
                || this.splitPostingProfile_RU()
                || this.splitInventOwnerId_RU();
        }
        // </GEERU>
        // <GBR>
        else if (countryRegion_BR)
        {
            return this.postUseSplitting_BR(useSplitCommon);
        }
        // </GBR>
        else
        {
            return useSplitCommon;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowJournal</Name>
				<Source><![CDATA[
    static boolean allowJournal(DocumentStatus _documentStatus, SalesTable _salesTable)
    {
        SalesFormletterParmData salesFormletterParmData = SalesFormletterParmData::newData(_documentStatus);

        return salesFormletterParmData.mayJournalBePosted(_salesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseLinesFromContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates posting data.
    /// </summary>
    /// <param name="_inputContract">
    ///   A packed version of a <c>FormletterParmDataChooseLinesContract</c> class.
    /// </param>
    /// <returns>
    ///   A <c>container</c> with the result of the data creation; optional.
    /// </returns>
    public static container chooseLinesFromContract(container _inputContract)
    {
        FormletterParmDataChooseLinesContract contract = FormletterParmDataChooseLinesContract::construct();
        contract.unpack(_inputContract);

        // <GEERU>
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>
        SalesFormletterParmData salesFormletterParmData = SalesFormletterParmData::newChooseLines(contract.parmFormletterContractPacked(),
                                                                                                  contract.parmReuseParmUpdate(),
                                                                                                  contract.parmOnlyCreateParmUpdate(),
                                                                                                  contract.parmExecuteLateSelection());
        // <GEERU>
        if (countryRegion_RU)
        {
            salesFormletterParmData.parmStorno_RU(CustParameters::find().CreditError);
            salesFormletterParmData.parmStornoPhysical_RU(InventParameters::find().StornoPhysicalPosting_RU);
        }
        // </GEERU>
        salesFormletterParmData.createData(contract.parmAppend());

        // <GEEU>
        #EECountryRegionCodes
        if (SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAllandRU))
        {
            salesFormletterParmData.initOfficials_RU();
        }
        // </GEEU>
        // <GEERU><GEEU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU, #isoCZ, #isoHU, #isoPL]))
        {
            salesFormletterParmData.checkAdvancePayments_W();
        }
        // </GEEU></GEERU>

        // <GEEU>
        if (TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
        {
            salesFormletterParmData.initDates_W(null);
        }
        // </GEEU>

        return salesFormletterParmData.getOutputContractPacked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseLinesServer_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Choose the lines server.
    /// </summary>
    /// <param name="_salesFormletterContractPacked">
    /// The packed sales form letter contract.
    /// </param>
    /// <param name="_append">
    /// True if there is any append.
    /// </param>
    /// <param name="_customsExportOrderType">
    /// The customs export order type.
    /// </param>
    /// <param name="_reuseParmUpdate">
    /// True if the parm update will be reuse.
    /// </param>
    /// <param name="_onlyCreateParmUpdate">
    /// True if the only the create parm update.
    /// </param>
    /// <param name="_executeLateSelection">
    /// True if execute the late selection.
    /// </param>
    /// <returns>
    /// The lines server.
    /// </returns>
    static public container chooseLinesServer_IN(
        container   _salesFormletterContractPacked,
        boolean     _append,
        CustomsExportOrderType_IN _customsExportOrderType,
        boolean     _reuseParmUpdate = false,
        boolean     _onlyCreateParmUpdate = false,
        boolean     _executeLateSelection = false)
    {
        SalesFormletterParmData salesFormletterParmData = SalesFormletterParmData::newChooseLines(_salesFormletterContractPacked,
                                                                                                  _reuseParmUpdate,
                                                                                                  _onlyCreateParmUpdate,
                                                                                                  _executeLateSelection);
        salesFormletterParmData.createData_IN(_customsExportOrderType, _append);

        return salesFormletterParmData.getOutputContractPacked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteGiroServer</Name>
				<Source><![CDATA[
    static public container deleteGiroServer(container _salesFormletterContractPacked)
    {
        SalesFormLetterContract salesFormLetterContract = SalesFormLetterContract::newFromPackedVersion(_salesFormletterContractPacked);
        SalesFormletterParmData salesFormletterParmData = SalesFormletterParmData::newChooseLines(_salesFormletterContractPacked, true);

        salesFormletterParmData.parmDeleteGiro(true);
        salesFormletterParmData.parmDefaultGiroType(salesFormletterParmData.parmDefaultGiroType());
        salesFormletterParmData.parmParmUpdate(salesFormletterParmData.parmParmUpdate() as SalesParmUpdate);
        salesFormletterParmData.createData();

        return salesFormletterParmData.getOutputContractPacked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesParmUpdateFormletter</Name>
				<Source><![CDATA[
    public static SalesParmUpdate initSalesParmUpdateFormletter(DocumentStatus _documentStatus,
                                                                container      _salesFormletterPacked,
                                                                boolean        _onlyCreateParmUpdate = true,
                                                                boolean        _storno               = false,
                                                                boolean        _stornoPhysical       = false)
    {
        SalesFormletterParmData salesFormletterParmData = SalesFormletterParmData::newData(_documentStatus);

        SalesFormLetter salesFormLetter = SalesFormLetter::construct(_documentStatus);
        salesFormLetter.unpack(_salesFormletterPacked);
        salesFormLetter.getLast(true);

        SalesFormLetterParmData::initializeSalesFormLetterParmData(salesFormLetterParmData, salesFormLetter, _onlyCreateParmUpdate, _storno, _stornoPhysical);

        SalesParmUpdate salesParmUpdate = salesFormletterParmData.createParmUpdate();

        return salesParmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSalesFormLetterParmData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the parameters of the <c>SalesFormLetterParmData</c> instance.
    /// </summary>
    /// <param name = "_salesFormLetterParmData">
    /// <c>SalesFormLetterParmData</c> instance to be initialized.
    /// </param>
    /// <param name = "_salesFormLetter">
    /// A <c>SalesFormLetter</c> instance which the SalesFormLetterParmData intialized from.
    /// </param>
    /// <param name = "_onlyCreateParmUpdate">
    /// True if the only the create parm update.
    /// </param>
    /// <param name = "_storno">
    /// A boolean which defines whether the transaction is storno or not.
    /// </param>
    /// <param name = "_stornoPhysical">
    /// A boolean which defines need storno for physical posting or not.
    /// </param>
    protected static void initializeSalesFormLetterParmData(SalesFormletterParmData _salesFormLetterParmData, SalesFormLetter _salesFormLetter, boolean _onlyCreateParmUpdate, boolean _storno, boolean _stornoPhysical)
    {
        _salesFormLetterParmData.parmParmUpdateSysLastValue(_salesFormLetter.salesParmUpdate());
        _salesFormLetterParmData.parmParmIdSynched(_salesFormLetter.parmIdSynched());
        _salesFormLetterParmData.parmCreditRemaining(_salesFormLetter.creditRemaining());
        _salesFormLetterParmData.parmProforma(_salesFormLetter.proforma());
        _salesFormLetterParmData.parmParmId(_salesFormLetter.parmId());
        _salesFormLetterParmData.parmOnlyCreateParmUpdate(_onlyCreateParmUpdate);
        _salesFormLetterParmData.parmSpecQty(_salesFormLetter.specQty());
        _salesFormLetterParmData.parmCheckCreditMax(_salesFormLetter.parmCheckCreditMax());
        _salesFormLetterParmData.parmSourceTable(_salesFormLetter.parmSourceTable());

        if (BrazilParameters::isEnabled() && isConfigurationkeyEnabled(configurationKeyNum(WHSandTMS)))
        {
            _salesFormLetterParmData.parmWHSLoadId(_salesFormLetter.parmWHSLoadId());
        }

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            _salesFormLetterParmData.parmCustInvoicePrintoutType_RU(_salesFormLetter.parmCustInvoicePrintoutType_RU());
            _salesFormLetterParmData.parmStorno_RU(_storno);
            _salesFormLetterParmData.parmStornoPhysical_RU(_stornoPhysical);
            _salesFormLetterParmData.parmGoodsInRouteId_RU(_salesFormLetter.parmGoodsInRouteId_RU());
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmTableRefIdSynched</Name>
				<Source><![CDATA[
    public TradeLineRefId parmParmTableRefIdSynched(TradeLineRefId _parmTableRefIdSynched = parmTableRefIdSynched)
    {
        parmTableRefIdSynched = _parmTableRefIdSynched;
        return parmTableRefIdSynched;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newChooseLines</Name>
				<Source><![CDATA[
    static SalesFormletterParmData newChooseLines(
        container      _salesFormletterContractPacked,
        boolean        _reuseParmUpdate = false,
        boolean        _onlyCreateParmUpdate = false,
        boolean        _executeLateSelection = false)
    {
        SalesFormLetterContract     salesFormLetterContract = SalesFormLetterContract::newFromPackedVersion(_salesFormletterContractPacked);
        SalesFormletterParmData     salesFormletterParmData = SalesFormletterParmData::newData(salesFormLetterContract.getDocumentStatus(), salesFormLetterContract.parmVersioningUpdateType());

        if (salesFormLetterContract.parmChooseLinesQueryPacked())
        {
            salesFormletterParmData.parmQueryChooseLines(new SysQueryRun(SysOperationHelper::base64Decode(salesFormLetterContract.parmChooseLinesQueryPacked())));
        }
        salesFormletterParmData.parmAllowEmptyParmTable(salesFormLetterContract.parmAllowEmptyTable());
        salesFormletterParmData.parmInterCompanyCompanyId(salesFormLetterContract.parmIntercompanyCompanyId());
        salesFormletterParmData.parmInterCompanyParmId(salesFormLetterContract.parmIntercompanyParmId());
        if (salesFormLetterContract.parmIntercompanyMapPacked())
        {
            Map interCompanyMap = Map::create(SysOperationHelper::base64Decode(salesFormLetterContract.parmIntercompanyMapPacked()));
            if (interCompanyMap.elements())
            {
                salesFormletterParmData.parmInterCompanyMap(interCompanyMap.pack());
            }
        }
        salesFormletterParmData.parmInterCompanyParmSelectFromJournal(salesFormLetterContract.parmIntercompanySelectFromJournal());
        salesFormletterParmData.parmMultiForm(salesFormLetterContract.parmMultiForm());
        salesFormletterParmData.parmDirectDeliveryUpdate(salesFormLetterContract.parmDirectDeliveryUpdate());
        salesFormletterParmData.parmParmIdSynched(salesFormLetterContract.parmParmIdSynched());
        salesFormletterParmData.parmParmTableRefIdSynched(salesFormLetterContract.parmParmTableRefIdSynched());
        salesFormletterParmData.parmCreditRemaining(salesFormLetterContract.parmCreditRemaining());
        salesFormletterParmData.parmTransDate(salesFormLetterContract.parmTransDate());
        salesFormletterParmData.parmShowQueryForm(salesFormLetterContract.parmShowQueryForm());
        salesFormletterParmData.parmParmUpdateSysLastValue(salesFormLetterContract.parmParmUpdate());
        salesFormletterParmData.parmDatasourceRecordsPacked(salesFormLetterContract.parmDataSourceRecordMapPacked());
        salesFormletterParmData.parmDefaultGiroType(salesFormLetterContract.parmDefaultGiroType());
        if (salesFormLetterContract.parmLineIdSetPacked())
        {
            container lineIdSetPacked = SysOperationHelper::base64Decode(salesFormLetterContract.parmLineIdSetPacked());
            Set lineIdSet = Set::create(lineIdSetPacked);
            if (lineIdSet.elements())
            {
                salesFormletterParmData.parmLineIdSet(lineIdSetPacked);
            }
        }
        salesFormletterParmData.parmWHSLoadId(salesFormLetterContract.parmWHSLoadId());
        salesFormletterParmData.parmIsPostingTransportLoads(salesFormLetterContract.parmIsPostingTransportLoads());
        salesFormletterParmData.parmCreateFromLines(salesFormLetterContract.parmCreateFromLines());
        salesFormletterParmData.parmCreateFromHistory(salesFormLetterContract.parmCreateFromHistory());

        if (FormLetterContractPackingUseContainerFlight::instance().isEnabled())
        {
            salesFormletterParmData.parmLineList(salesFormLetterContract.parmLineListContainerPacked());
            salesFormletterParmData.parmHistoryList(salesFormLetterContract.parmHistoryListContainerPacked());
        }
        else
        {        
            salesFormletterParmData.parmLineList(SysOperationHelper::base64Decode(salesFormLetterContract.parmLineListPacked()));
            salesFormletterParmData.parmHistoryList(SysOperationHelper::base64Decode(salesFormLetterContract.parmHistoryListPacked()));
        }

        salesFormletterParmData.parmSourceTable(salesFormLetterContract.parmSourceTable());
        salesFormletterParmData.parmOnlyCreateParmUpdate(_onlyCreateParmUpdate);
        salesFormletterParmData.parmExecuteLateSelection(_executeLateSelection);
        salesFormletterParmData.parmProforma(salesFormLetterContract.parmProforma());
        salesFormletterParmData.parmCallerTable(salesFormLetterContract.parmCallerTable());
        salesFormLetterParmData.parmValidateLoadStatus(salesFormLetterContract.parmValidateLoadStatus());

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            salesFormletterParmData.parmCustInvoicePrintoutType_RU(salesFormLetterContract.parmCustInvoicePrintoutType_RU());
            salesFormletterParmData.parmGoodsInRouteId_RU(salesFormLetterContract.parmGoodsInRouteId_RU());
            salesFormletterParmData.parmDocumentStornoId_RU(salesFormLetterContract.parmDocumentStornoId_RU());
            salesFormletterParmData.parmCorrect_RU(salesFormLetterContract.parmCorrect_RU());
            salesFormletterParmData.parmCorrectedInvoiceId_RU(salesFormLetterContract.parmCorrectedInvoiceId_RU());
            salesFormletterParmData.parmCorrectedInvoiceDate_RU(salesFormLetterContract.parmCorrectedInvoiceDate_RU());
            salesFormletterParmData.parmNeedTransIDTransit_RU(salesFormLetterContract.parmNeedTransIDTransit_RU());
        }
        // </GEERU>

        // <GEEU>
        salesFormletterParmData.parmProjInvoiceParmTable(salesFormLetterContract.parmProjInvoiceParmTable());
        // </GEEU>
        if (salesFormLetterContract.parmSpecQtyIsSet())
        {
            salesFormletterParmData.parmSpecQty(salesFormLetterContract.parmSpecQty());
        }

        if (_reuseParmUpdate)
        {
            salesFormletterParmData.parmParmUpdate(salesFormLetterContract.parmParmUpdate() as SalesParmUpdate);
        }

        salesFormletterParmData.parmMCRPickWaveReference(salesFormLetterContract.parmMCRPickWaveReference());
        salesFormletterParmData.parmMCRInventTransRecid(salesFormLetterContract.parmMCRInventTransRecid());
        salesFormletterParmData.parmRelatedJournal(salesFormLetterContract.parmRelatedJournal());

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            salesFormletterParmData.parmInventLocationId_PL(salesFormLetterContract.parmInventLocationId_PL());
        }

        salesFormletterParmData.parmSalesFormLetterContract(salesFormLetterContract);

        salesFormletterParmData.init();
        return salesFormletterParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesFormletterParmData construct(DocumentStatus _documentStatus)
    {
        DocumentStatusFactoryAttribute  attribute   = new DocumentStatusFactoryAttribute(_documentStatus);
        SalesFormletterParmData         parmData    = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(SalesFormletterParmData), attribute) as SalesFormletterParmData;

        if(!parmData)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return parmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newData</Name>
				<Source><![CDATA[
    static formletterParmData newData(DocumentStatus _documentStatus,
                                             VersioningUpdateType _updateType = VersioningUpdateType::Initial)
    {
        SalesFormletterParmData parmData = SalesFormletterParmData::construct(_documentStatus);

        parmData.parmVersioningStrategy(FormLetterParmDataVersioning::newVersioningUpdateType(_updateType, parmData));
        parmData.parmDocumentStatus(_documentStatus);
        return parmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newReArrange</Name>
				<Source><![CDATA[
    static public SalesFormletterParmData newReArrange(
        container _salesFormletterContractPacked,
        boolean   _isExecutingInBatch = false)
    {
        SalesFormLetterContract     salesFormLetterContract = SalesFormLetterContract::newFromPackedVersion(_salesFormletterContractPacked);
        SalesFormletterParmData salesFormletterParmData = SalesFormletterParmData::newData(salesFormLetterContract.getDocumentStatus());

        salesFormletterParmData.parmParmUpdate(salesFormLetterContract.parmParmUpdate() as SalesParmUpdate);
        salesFormletterParmData.parmIsInBatch(_isExecutingInBatch);
        salesFormletterParmData.parmMultiForm(salesFormLetterContract.parmMultiForm());

        if (FormLetterContractPackingUseContainerFlight::instance().isEnabled())
        {
            salesFormletterParmData.parmLineList(salesFormLetterContract.parmLineListContainerPacked());
        }
        else
        {
            salesFormletterParmData.parmLineList(SysOperationHelper::base64Decode(salesFormLetterContract.parmLineListPacked()));
        }

        if (salesFormLetterContract.parmLineIdSetPacked())
        {
            container lineIdSetPacked = SysOperationHelper::base64Decode(salesFormLetterContract.parmLineIdSetPacked());
            Set lineIdSet = Set::create(lineIdSetPacked);
            if (lineIdSet.elements())
            {
                salesFormletterParmData.parmLineIdSet(lineIdSetPacked);
            }
        }

        salesFormletterParmData.parmWHSLoadId(salesFormLetterContract.parmWHSLoadId());
        salesFormletterParmData.parmCreateFromLines(salesFormLetterContract.parmCreateFromLines());
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            salesFormletterParmData.parmCustInvoicePrintoutType_RU(salesFormLetterContract.parmCustInvoicePrintoutType_RU());
            salesFormletterParmData.parmDocumentStornoId_RU       (salesFormLetterContract.parmDocumentStornoId_RU());
        }
        // </GEERU>

        salesFormletterParmData.init();
        return salesFormletterParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newReSelect</Name>
				<Source><![CDATA[
    static SalesFormletterParmData newReSelect(container _salesFormletterContractPacked)
    {
        SalesFormLetterContract salesFormLetterContract = SalesFormLetterContract::newFromPackedVersion(_salesFormletterContractPacked);
        SalesFormletterParmData salesFormletterParmData = SalesFormletterParmData::newData(salesFormLetterContract.getDocumentStatus());

        salesFormletterParmData.parmParmUpdate(salesFormLetterContract.parmParmUpdate() as SalesParmUpdate);
        salesFormletterParmData.parmAllowEmptyParmTable(salesFormLetterContract.parmAllowEmptyTable());
        salesFormletterParmData.parmCreditRemaining(salesFormLetterContract.parmCreditRemaining());
        salesFormletterParmData.parmProforma(salesFormLetterContract.parmProforma());

        if (FormLetterContractPackingUseContainerFlight::instance().isEnabled())
        {
            salesFormletterParmData.parmLineList(salesFormLetterContract.parmLineListContainerPacked());
        }
        else
        {
            salesFormletterParmData.parmLineList(SysOperationHelper::base64Decode(salesFormLetterContract.parmLineListPacked()));
        }

        if (salesFormLetterContract.parmLineIdSetPacked())
        {
            container lineIdSetPacked = SysOperationHelper::base64Decode(salesFormLetterContract.parmLineIdSetPacked());
            Set lineIdSet = Set::create(lineIdSetPacked);
            if (lineIdSet.elements())
            {
                salesFormletterParmData.parmLineIdSet(lineIdSetPacked);
            }
        }

        salesFormletterParmData.parmWHSLoadId(salesFormLetterContract.parmWHSLoadId());
        salesFormletterParmData.parmCreateFromLines(salesFormLetterContract.parmCreateFromLines());
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            salesFormletterParmData.parmCustInvoicePrintoutType_RU(salesFormLetterContract.parmCustInvoicePrintoutType_RU());
        }
        // </GEERU>

        // <GEEPL>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            salesFormletterParmData.parmInventLocationId_PL(salesFormLetterContract.parmInventLocationId_PL());
        }
        // </GEEPL>

        // <GEEU>
        if (salesFormLetterContract.parmAdvanceInvoiceSettlementPacked())
        {
            salesFormletterParmData.parmAdvanceInvoiceSettlement_W(
                AdvanceInvoiceSettlement_W::newUnpack(tableNum(SalesTable), SysOperationHelper::base64Decode(salesFormLetterContract.parmAdvanceInvoiceSettlementPacked())));
        }
        // </GEEU>
        salesFormletterParmData.init();
        return salesFormletterParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reArrangeServer</Name>
				<Source><![CDATA[
    static public container reArrangeServer(
        container _salesFormletterContractPacked,
        boolean   _isExecutingInBatch = false)
    {
        SalesFormletterParmData          salesFormletterParmData = SalesFormletterParmData::newReArrange(_salesFormletterContractPacked, _isExecutingInBatch);

        salesFormletterParmData.reArrange();

        return salesFormletterParmData.getOutputContractPacked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reSelectServer</Name>
				<Source><![CDATA[
    static public container reSelectServer(container _salesFormletterContractPacked)
    {
        SalesFormletterParmData salesFormletterParmData = SalesFormletterParmData::newReSelect(_salesFormletterContractPacked);
        salesFormletterParmData.reSelect();

        return salesFormletterParmData.getOutputContractPacked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowCreateParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether a <c>SalesParmLine</c> may be created from a sales line.
    ///     Overridden in the pick, pack, and invoice.
    /// </summary>
    /// <param name="_salesLine">
    ///     The <c>SalesLine</c> record from which ParmLine may be created.
    /// </param>
    /// <param name="_salesTable">
    ///     The <c>SalesTable</c> record that is the parent order of <c>SalesLine</c>.
    /// </param>
    /// <returns>
    ///     true if parm line can be created; otherwise, false.
    /// </returns>
    private boolean allowCreateParmLine(SalesLine _salesLine, salesTable _salesTable)
    {
        return this.mcrAllowCreateParmLine(_salesLine, _salesTable)
            && this.allowCreateParmLineIfFromLoad_BR(_salesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowCreateParmLineIfFromLoad_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// If it is posting sales invoices from Load (WMS), given a sales line, this method indicates whether
    /// that sales line is related to a load line from the load table that is being posted.
    /// </summary>
    /// <param name="_salesLine">
    /// The original sales line that may be posted or not.
    /// </param>
    /// <returns>
    /// True if this sales lines belongs to the load which is being posted. False otherwise.
    /// </returns>
    /// <remarks>
    /// It defines if the sales line should be posted because it is related to a load line of the load to be posted.
    /// A load may not contain all lines from a sales order.
    /// </remarks>
    protected boolean allowCreateParmLineIfFromLoad_BR(SalesLine _salesLine)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesQtyInventQtyFromLoad_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sales line quantity and the inventory quantity of the sale line which is picked on the load (WMS).
    /// </summary>
    /// <param name="_salesLine">
    /// The original sales line that will be posted.
    /// </param>
    /// <returns>
    /// The sales line and inventory quantities that belong to the Load and that should be posted.
    /// </returns>
    protected container getSalesQtyInventQtyFromLoad_BR(SalesLine _salesLine)
    {
        WHSLoadTable loadTable = WHSLoadTable::find(this.parmWHSLoadId());

        return loadTable.getTotalSalesQtyInventQtyForSalesLine_BR(_salesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPostFromLoad_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tells if this posting is posting sales from Load (WMS)
    /// </summary>
    /// <returns>
    /// True if post will occur from WHSLoadTable; otherwise; false
    /// </returns>
    protected boolean isPostFromLoad_BR()
    {
        return this.parmWHSLoadId() && BrazilParameters::isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMCRGiftcardSalesLine</Name>
				<Source><![CDATA[
    private boolean isMCRGiftcardSalesLine(Common _source)
    {
        boolean         isGiftCard;

        if (_source.TableId == tableNum(SalesLine))
        {
            SalesLine salesLine = _source as SalesLine;
            isGiftCard = MCRGiftCard::isGiftCardOperation(salesLine.salesTable(), salesLine.ItemId);
        }
        else
        {
            isGiftCard  = false;
        }

        return isGiftCard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckCreditMax</Name>
				<Source><![CDATA[
    public TypeOfCreditmaxCheck parmCheckCreditMax(TypeOfCreditmaxCheck _checkCreditMax = checkCreditMax)
    {
        checkCreditMax = _checkCreditMax;
        return checkCreditMax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParmTableReArrangeSplit</Name>
				<Source><![CDATA[
    protected void updateParmTableReArrangeSplit()
    {
        SalesParmTable    localSalesParmTable;
        SalesParmLine     localSalesParmLine;
        SalesParmSubTable localSalesParmSubTable;

        if (salesParmUpdate.SumBy != AccountOrder::Order)
        {
            // update the salesParmTable.SalesId to the interrelated value if there is no SalesParmLine.OrigSalesId with the same value.
            update_recordset localSalesParmTable
            setting SalesId = localSalesParmSubTable.OrigSalesId
                where localSalesParmTable.ParmId == this.parmId()
                join localSalesParmSubTable
                    where  localSalesParmSubTable.ParmId     == localSalesParmTable.ParmId
                        && localSalesParmSubTable.TableRefId == localSalesParmTable.TableRefId
                notexists join localSalesParmLine
                    where  localSalesParmLine.ParmId      == localSalesParmTable.ParmId
                        && localSalesParmLine.TableRefId  == localSalesParmTable.TableRefId
                        && localSalesParmLine.OrigSalesId == localSalesParmTable.SalesId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryFromLoad_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Load the query with sales tables related to the Load that is being posted.
    /// </summary>
    /// <param name="_abortOnError">
    /// A Boolean value that indicates whether to stop the update of the query if an error occurs.
    /// </param>
    /// <returns>
    /// The number of order ID ranges that are added to the query.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// An error occurred during the update.
    /// </exception>
    protected int updateQueryFromLoad_BR(boolean _abortOnError = false)
    {
        int             noSelected;
        SalesTable      localSalesTable;
        SalesLine       salesLine;
        WHSLoadLine     loadLine;

        if (this.parmWHSLoadId())
        {
            while select localSalesTable
                exists join salesLine
                    where localSalesTable.SalesId == salesLine.SalesId
                exists join loadLine
                    where loadLine.InventTransId == salesLine.InventTransId
                        && loadLine.InventTransType == InventTransType::Sales
                        && loadLine.LoadId == this.parmWHSLoadId()
            {
                if (!this.mayJournalBePosted(localSalesTable))
                {
                    this.infoSourceTableSkipped(localSalesTable);
                    if (_abortOnError)
                    {
                        throw error("@SYS78886");
                    }
                    continue;
                }

                chooseLines
                    .query()
                        .dataSourceTable(localSalesTable.TableId)
                        .addRange(this.fieldIdSourceTable_OrderId())
                            .value(queryValue(localSalesTable.(this.fieldIdSourceTable_OrderId())));

                noSelected++;
            }
        }

        // If no Rows was selected, make sure the query doesn't select all rows (no criteria is the equivalent of select all).
        if (noSelected == 0)
        {
            chooseLines.query().dataSourceTable(this.sourceTableTableId()).enabled(false);
        }

        // Reseting the container that contains the datasource records in order to
        // behave like the base class method
        this.parmDatasourceRecordsPacked(conNull());

        return noSelected;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecordLists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert transact document RecordList for tax document.
    /// </summary>
    protected void insertRecordLists()
    {
        super();

        if (TaxIntegrationUtils::isTransitDocumentEnabled())
        {
            this.transitDocument();
        }

        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            this.transferTaxDocument();
        }
        // </GTE>
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSalesParmLine_BR</Name>
				<Source><![CDATA[
    private void insertSalesParmLine_BR(SalesParmLine _parmLine)
    {
        SalesTable saleTable = _parmLine.salesTable();

        if (saleTable.SalesType == SalesType::ReturnItem
            && ICMSSTAdditionalInfoFeature::isEnabled())
        {
            SalesParmLine_BR salesParmLineBR = _parmLine.salesParmLine_BR();
            SalesLine salesLine = _parmLine.salesLine();
            TaxationCode_BR icmsstTaxationCode = salesLine.getICMSSTTaxationCode_BR();

            if (icmsstTaxationCode)
            {
                salesParmLineBR.RespWithholdingICMSST = TaxRespWithholdingICMSSTSetup_BR::find(
                    CFOPTable_BR::find(salesLine.salesLine_BR().CFOPTable_BR).cfopId,
                    saleTable.hasIssueFiscalDocument_BR() ? FiscalDocumentIssuer_BR::OwnEstablishment : FiscalDocumentIssuer_BR::ThirdParty,
                    icmsstTaxationCode,
                    icmsstTaxationCode,
                    SalesPurchTrntype_BR::Sales).RespWithholdingICMSST;
            }

            salesParmLineBR.SysExtensionSerializerExtensionMap::insertAfterBaseTable(_parmLine);
            _parmLine.packSalesParmLine_BR(salesParmLineBR);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transitDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transit documents
    /// </summary>
    private void transitDocument()
    {
        SetEnumerator               setEnum;
        FormletterParmTable         salesParmTableMap;
        SalesParmTable              salesParmTableTransit;
        SalesTable                  salesTableTransit;
        SalesLine                   salesLineTransit;

        SalesParmLine               salesParmLineLoc;
        SalesParmTable              salesParmTableInvoice;
        CustInvoiceJour             custInvoiceJourLoc;
        CustInvoiceTrans            custInvoiceTransLoc;

        TransitDocumentManager_IN transitDocManager = TransitDocumentManager_IN::newManager();
        if (transitDocManager.existsAnyTransitDocType()
                && transitDocManager.existTransitRuleForTransType(tableNum(SalesTable)))
        {
            setEnum = parmTableMap.valueSet().getEnumerator();
            while (setEnum.moveNext())
            {
                salesParmTableMap = setEnum.current();

                salesParmTableTransit = SalesParmTable::find(salesParmTableMap.ParmId, salesParmTableMap.TableRefId);

                salesTableTransit = SalesTable::find(salesParmTableTransit.SalesId);

                FormletterParmLine salesParmLineTransit = new DictTable(this.parmLineTableId()).makeRecord();

                SalesId salesIdForTransit = salesTableTransit.SalesId;
                RecId salesTableRecIdForTransit = salesTableTransit.RecId;

                // <GIN>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
                    && salesTableTransit.DocumentStatus == DocumentStatus::Invoice 
                    && salesTableTransit.CustomsExportOrder_IN)
                {
                    // for Export order
                    select salesParmTableInvoice
                            where salesParmTableInvoice.SalesId  == salesParmTableMap.OrderId
                            join custInvoiceJourLoc
                                where custInvoiceJourLoc.SalesId == salesParmTableMap.OrderId
                                    && custInvoiceJourLoc.ParmId     == salesParmTableInvoice.ParmId
                                    && salesParmTableTransit.CustomsExportInvoiceId_IN == custInvoiceJourLoc.InvoiceId;

                    if (custInvoiceJourLoc.RecId)
                    {
                        transitDocManager.transit(custInvoiceJourLoc, salesParmTableTransit);
                    }

                    while select custInvoiceTransLoc
                            where custInvoiceTransLoc.SalesId           == custInvoiceJourLoc.SalesId
                                && custInvoiceTransLoc.InvoiceId            == custInvoiceJourLoc.InvoiceId
                                && custInvoiceTransLoc.InvoiceDate          == custInvoiceJourLoc.InvoiceDate
                                && custInvoiceTransLoc.numberSequenceGroup  == custInvoiceJourLoc.numberSequenceGroup
                            join salesParmLineLoc
                                where salesParmLineLoc.ParmId       == salesParmTableTransit.ParmId
                                    && salesParmLineLoc.TableRefId      == salesParmTableTransit.TableRefId
                                    && salesParmLineLoc.InventTransId   == custInvoiceTransLoc.InventTransId
                    {
                        transitDocManager.transit(custInvoiceTransLoc, salesParmLineLoc, salesParmTableTransit);
                    }
                }
                else
                {
                // </GIN>
                    transitDocManager.transit(salesTableTransit, salesParmTableTransit);

                    while select salesLineTransit
                            join salesParmLineTransit
                                where salesParmLineTransit.SourceLineRecId == salesLineTransit.RecId
                                    && salesParmLineTransit.ParmId         == salesParmTableTransit.ParmId
                            exists join salesTableTransit
                                where salesLineTransit.SalesId == salesIdForTransit
                                    && salesTableTransit.RecId == salesTableRecIdForTransit
                    {
                        transitDocManager.transit(salesLineTransit, salesParmLineTransit, salesParmTableTransit);
                    }
                // <GIN>
                }
                // </GIN>
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferTaxDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfer tax document
    /// </summary>
    private void transferTaxDocument()
    {
        #ISOCountryRegionCodes
        
        SetEnumerator               setEnum;
        FormletterParmTable         salesParmTableMap;
        SalesParmTable              salesParmTableTransit;
        SalesTable                  salesTableTransit;

        // <GIN>
        CustInvoiceJour             custInvoiceJourLoc;
        // </GIN>

        setEnum = parmTableMap.valueSet().getEnumerator();
        while (setEnum.moveNext())
        {
            salesParmTableMap = setEnum.current();

            salesParmTableTransit = SalesParmTable::findSalesId(salesParmTableMap.OrderId, salesParmTableMap.ParmId);

            salesTableTransit = SalesTable::find(salesParmTableTransit.SalesId);

            // <GIN>
            if (salesTableTransit.DocumentStatus == DocumentStatus::Invoice && salesTableTransit.CustomsExportOrder_IN)
            {
                if (custInvoiceJourLoc.RecId)
                {
                    TaxBusinessService::transferTaxDocument(custInvoiceJourLoc, salesParmTableTransit);
                }
            }
            else
            {
                // </GIN>
                TaxBusinessService::transferTaxDocument(salesTableTransit, salesParmTableTransit);
                // <GIN>
            }
            // </GIN>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveTrackingNumbers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the sales order update table reference id in the tracking information table.
    /// </summary>
    /// <param name = "_origSalesParmTable">The sales order - update table record.</param>
    /// <param name = "_toTableRefId">The sales order update table reference record id.</param>
    protected void moveTrackingNumbers(SalesParmTable _origSalesParmTable, TradeLineRefId _toTableRefId)
    {
        SalesParmPackingSlipTrackingInformation unpostedTrackingNumbers;

        update_recordset unpostedTrackingNumbers
            setting SalesParmTableRefId = _toTableRefId
              where unpostedTrackingNumbers.SalesParmId         == _origSalesParmTable.ParmId
                 && unpostedTrackingNumbers.SalesParmTableRefId == _origSalesParmTable.TableRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateShippingStatReArrangeSplit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates sales shipping specification records that are not merged.
    /// </summary>
    protected void updateShippingStatReArrangeSplit()
    {
        SalesParmTable    localSalesParmTable;
        SalesShippingStat localSalesShippingStat;
        SalesParmSubTable localSalesParmSubTable;

        if (this.useShippingStat())
        {
            Microsoft.Dynamics.Ax.Xpp.PlatformExtensions.CommonExtensions::SetSqlUpdateIndexHint(localSalesShippingStat, indexStr(SalesShippingStat, ParmIdx));

            update_recordset localSalesShippingStat
            setting SalesId    = localSalesParmTable.SalesId,
                    TableRefId = localSalesParmTable.TableRefId
                where localSalesShippingStat.ParmId           == this.parmId()
                join localSalesParmTable
                    where  localSalesShippingStat.ParmId      == localSalesParmTable.ParmId
                        && localSalesShippingStat.OrigSalesId == localSalesParmTable.SalesId
                        && localSalesShippingStat.SalesId     != localSalesParmTable.SalesId
                exists join localSalesParmSubTable
                    where localSalesParmSubTable.ParmId       == localSalesParmTable.ParmId
                       && localSalesParmSubTable.TableRefId   == localSalesParmTable.TableRefId
                       && localSalesParmSubTable.OrigSalesId  == localSalesParmTable.SalesId;
         }
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal FormLetterInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = SalesFormLetterInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>