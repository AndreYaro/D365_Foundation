<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdAsBuiltBOMProductComponentUIController</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class ProdAsBuiltBOMProductComponentUIController
{
    private ProdAsBuiltBOMAssociationController     associationController;
    private ProdAsBuiltBOMProductComponentGS1Parser gs1Parser;
    private Args                                    callerArgs;
    private ProdTable                               productionOrder;
    private ProdJournalRoute                        routeJobCardLine;       
    private ProdJournalBOM                          pickingListLine;
    private ProdJournalProd                         reportAsFinishedLine;
    private ProdParmReportFinished                  reportAsFinishedParmLine;
    private ProdParmStartUp                         startParmLine;
    private ProdAsBuiltBOMInputOrigin               inputOrigin;
    private JmgJobTable                             jmgJob;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setAssociationController</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMProductComponentUIController setAssociationController(ProdAsBuiltBOMAssociationController _associationController)
    {
        associationController = _associationController;

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCallerArgs</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMProductComponentUIController setCallerArgs(Args _args)
    {
        callerArgs = _args;

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMProductComponentUIController init()
    {
        this.initFromCallerArgs(callerArgs);

        gs1Parser   = new ProdAsBuiltBOMProductComponentGS1Parser();
        inputOrigin = callerArgs.parmEnum() ? callerArgs.parmEnum() : ProdAsBuiltBOMInputOrigin::Unknown;

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCallerArgs</Name>
				<Source><![CDATA[
    internal void initFromCallerArgs(Args _callerArgs)
    {
        switch (_callerArgs.callerName())
        {
            case formStr(ProdTable):
            case formStr(ProdTableListPage):
                productionOrder = _callerArgs.record() as ProdTable;
                break;

            case formStr(ProdParmStartUp):
                startParmLine = _callerArgs.record() as ProdParmStartUp;
                productionOrder = ProdTable::find(startParmLine.ProdId);
                break;

            case formStr(ProdParmReportFinished):
                reportAsFinishedParmLine = _callerArgs.record() as ProdParmReportFinished;
                productionOrder = ProdTable::find(reportAsFinishedParmLine.ProdId);
                break;

            case formStr(ProdJournalTransRoute),
                 formStr(ProdJournalTransJob):
                routeJobCardLine = _callerArgs.record() as ProdJournalRoute;
                productionOrder = ProdTable::find(routeJobCardLine.ProdId);
                break;

            case formStr(ProdJournalTransBOM):
                pickingListLine = _callerArgs.record() as ProdJournalBOM;
                productionOrder = ProdTable::find(pickingListLine.ProdId);
                break;

            case formStr(ProdJournalTransProd):
                reportAsFinishedLine = _callerArgs.record() as ProdJournalProd;
                productionOrder = ProdTable::find(reportAsFinishedLine.ProdId);
                break;
        }

        if (!productionOrder.RecId)
        {
            if (callerArgs.record() is ProdTable)
            {
                productionOrder = callerArgs.record() as ProdTable;
            }
            else if (callerArgs.record() is JmgJobTable)
            {
                jmgJob = _callerArgs.record() as JmgJobTable;
                productionOrder = ProdTable::find(jmgJob.ModuleRefId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdAsBuiltBOMFormulaProductsDatasource</Name>
				<Source><![CDATA[
    internal void initProdAsBuiltBOMFormulaProductsDatasource(QueryBuildDataSource _qbdsProdAsBuiltBOMFormulaProducts)
    {
        QueryBuildRange activeRange = _qbdsProdAsBuiltBOMFormulaProducts.addRange(fieldNum(ProdAsBuiltBOMFormulaProducts, ProdId));
        activeRange.status(RangeStatus::Hidden);
        activeRange.value(productionOrder.ProdId);

        this.addItemTrackingDimensionConstraint(_qbdsProdAsBuiltBOMFormulaProducts, fieldNum(ProdAsBuiltBOMFormulaProducts, ItemId));

        if (reportAsFinishedLine.RecId)
        {
            _qbdsProdAsBuiltBOMFormulaProducts.addRange(fieldNum(ProdAsBuiltBOMFormulaProducts, ItemId)).value(reportAsFinishedLine.ItemId);
            _qbdsProdAsBuiltBOMFormulaProducts.addRange(fieldNum(ProdAsBuiltBOMFormulaProducts, InventTransId)).value(reportAsFinishedLine.InventTransId);
        }
        if (reportAsFinishedParmLine.RecId)
        {
            _qbdsProdAsBuiltBOMFormulaProducts.addRange(fieldNum(ProdAsBuiltBOMFormulaProducts, ItemId)).value(reportAsFinishedParmLine.ItemId);
            _qbdsProdAsBuiltBOMFormulaProducts.addRange(fieldNum(ProdAsBuiltBOMFormulaProducts, InventTransId)).value(reportAsFinishedParmLine.InventTransId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdBOMDatasource</Name>
				<Source><![CDATA[
    internal void initProdBOMDatasource(QueryBuildDataSource _qbdsProdBOM)
    {
        this.addItemTrackingDimensionConstraint(_qbdsProdBOM, fieldNum(ProdBOM, ItemId));

        if (startParmLine.RecId)
        {
            _qbdsProdBOM.addRange(fieldNum(ProdBOM, OprNum)).value(queryRange(startParmLine.FromOprNum, startParmLine.ToOprNum ? startParmLine.ToOprNum : intMax()));
        }

        if (reportAsFinishedParmLine.RecId)
        {
            _qbdsProdBOM.addRange(fieldNum(ProdBOM, OprNum)).value(queryRange(reportAsFinishedParmLine.FromOprNum, reportAsFinishedParmLine.ToOprNum ? reportAsFinishedParmLine.ToOprNum : intMax()));
        }

        if (routeJobCardLine.RecId)
        {
            var rangeOperation = strfmt('((%1 == %2) || (%1 == ""))', fieldStr(ProdBOM, OprNum), routeJobCardLine.OprNum);
            SysQuery::findOrCreateRange(_qbdsProdBOM, fieldNum(ProdBOM, OprNum)).value(rangeOperation);
        }

        if (jmgJob.RecId)
        {
            var rangeOperation = strfmt('((%1 == %2) || (%1 == ""))', fieldStr(ProdBOM, OprNum), jmgJob.OprNum);
            SysQuery::findOrCreateRange(_qbdsProdBOM, fieldNum(ProdBOM, OprNum)).value(rangeOperation);
        }

        if (pickingListLine.RecId)
        {
            _qbdsProdBOM.addRange(fieldNum(ProdBOM, ItemId)).value(pickingListLine.ItemId);
            _qbdsProdBOM.addRange(fieldNum(ProdBOM, InventTransId)).value(pickingListLine.InventTransId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>performRegistrationAction</Name>
				<Source><![CDATA[
    internal boolean performRegistrationAction(str                            _input, 
                                               ProdAsBuiltBOMProductComponent _scanProductState,
                                               ProdAsBuiltBOMFormulaProducts  _productLot,
                                               ProdBom                        _componentLot)
    {
        _input = strLTrim(strRTrim(_input));
        if (!_input)
        {
            return false;
        }

        var gs1Builder = this.scanGS1Barcode(_input);
        if (gs1Builder)
        {
            if (!gs1Builder.getProductLot().RecId && !gs1Builder.getComponentLot().RecId)
            {
                return false;
            }
            _scanProductState = gs1Builder.getProductOrComponent();
        }

        boolean result;
        switch (_scanProductState)
        {
            case ProdAsBuiltBOMProductComponent::Product:
                if (gs1Builder)
                {
                    this.scanProductLotGs1Barcode(gs1Builder);
                    result = gs1Builder.getResult();
                }
                else
                {
                    result = this.scanProductLotManualInput(_productLot, _input);
                }

                if (result)
                {
                    _input = gs1Builder == null ? _input : gs1Builder.getSerialNumberId();
                    info(strFmt("The tracking dimension %1 is successfully associated for the product %2 LOT %3.", _input, _productLot.ItemId, _productLot.InventTransId)); 
                }
                break;

            case ProdAsBuiltBOMProductComponent::Component:
                if (gs1Builder)
                {
                    this.scanComponentLotGS1Barcode(_productLot, gs1Builder);
                    result = gs1Builder.getResult();
                }
                else
                {
                    result = this.scanComponentLotManualInput(_productLot, _componentLot, _input);
                }

                if (result)
                {
                    _input = gs1Builder == null ? _input : gs1Builder.getSerialNumberId();
                    info(strFmt("The tracking dimension %1 is successfully associated for the component %2 LOT %3.", _input, _componentLot.ItemId, _componentLot.InventTransId));
                }
                break;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>autoScanProductLot</Name>
				<Source><![CDATA[
    internal boolean autoScanProductLot()
    {
        ProdAsBuiltBOMFormulaProducts productLot;
        InventDim                     productInventDim;
        boolean                       result;

        if (routeJobCardLine.RecId && routeJobCardLine.ProdReportFinished)
        {
            productInventDim = InventDim::find(routeJobCardLine.ProdInventDimId);
        }
        if (reportAsFinishedParmLine.RecId)
        {
            productInventDim = InventDim::find(reportAsFinishedParmLine.InventDimId);
            productLot = ProdAsBuiltBOMFormulaProducts::find(reportAsFinishedParmLine.InventTransId);
        }
        if (reportAsFinishedLine.RecId)
        {
            productInventDim = InventDim::find(reportAsFinishedLine.InventDimId);
            productLot = ProdAsBuiltBOMFormulaProducts::find(reportAsFinishedLine.InventTransId);
        }

        if (!productLot.RecId)
        {
            productLot = ProdAsBuiltBOMFormulaProducts::find(productionOrder.InventTransId);
        }

        if (productInventDim.InventBatchId || productInventDim.InventSerialId)
        {
            var productLotAssociationParameters = ProdAsBuiltBOMProductLotAssociationParameters::construct()
                                                    .setProductLot(productLot)
                                                    .setGoodQuantity(this.getGoodProductQuantity(productLot))
                                                    .setErrorQuantity(this.getErrorProductQuantity(productLot))
                                                    .setBatchNumberId(productInventDim.InventBatchId)
                                                    .setSerialNumberId(productInventDim.InventSerialId)
                                                    .setValidateInput(false)
                                                    .setInputOrigin(inputOrigin)
                                                    .setInputType(ProdAsBuiltBOMInputType::ScanAuto);
            if (reportAsFinishedLine.RecId)
            {
                productLotAssociationParameters.setReportFinishedJournalId(reportAsFinishedLine.JournalId)
                                               .setInventTransChildRefId(reportAsFinishedLine.InventTransChildRefId)
                                               .setInventTransChildType(reportAsFinishedLine.InventTransChildType);
            }

            result = associationController.registerProductLotAssociation(productLotAssociationParameters);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scanGS1Barcode</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMProductComponentGS1Builder scanGS1Barcode(str _input)
    {
        var gs1Builder = gs1Parser.decodeGS1Barcode(_input);
        if (!gs1Builder)
        {
            return gs1Builder;
        }

        InventItemGTIN gtin = gs1Builder.getGTIN();
        if (!gtin.RecId)
        {
            return gs1Builder;
        }

        var productLot = ProdAsBuiltBOMFormulaProducts::findFromGTIN(productionOrder.ProdId, gtin);
        if (productLot.RecId)
        {
            gs1Builder.setProductLot(productLot);
            return gs1Builder;
        }

        ProdBOM         componentLot;
        InventDim       inventDim;
        InventDim       inventDimCriteria = inventDim::find(gtin.InventDimId);
        InventDimParm   inventDimParm;

        inventDimParm.initFromInventDim(inventDimCriteria);
        select firstonly componentLot
            where componentLot.ProdId      == productionOrder.ProdId
               && componentLot.ItemId      == gtin.ItemId
            #inventDimExistsJoin(componentLot.InventDimId, inventDim, inventDimCriteria, inventDimParm);

        if (componentLot.RecId)
        {
            gs1Builder.setComponentLot(componentLot);
        }
        else
        {
            error(strFmt("Cannot find a product/component for GTIN item %1 with inventory dimension %2 used in the production order %3.", gtin.ItemId, gtin.InventDimId, productionOrder.ProdId));
        }

        return gs1Builder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scanProductLotGS1Barcode</Name>
				<Source><![CDATA[
    internal void scanProductLotGS1Barcode(ProdAsBuiltBOMProductComponentGS1Builder _gs1Builder)
    {
        if (_gs1Builder.getBatchNumberId() || _gs1Builder.getSerialNumberId())
        {
            var productLot = _gs1Builder.getProductLot();
            var productLotAssociationParameters = ProdAsBuiltBOMProductLotAssociationParameters::construct()
                                                    .setProductLot(productLot)
                                                    .setGoodQuantity(this.getGoodProductQuantity(productLot))
                                                    .setErrorQuantity(this.getErrorProductQuantity(productLot))
                                                    .setBatchNumberId(_gs1Builder.getBatchNumberId())
                                                    .setSerialNumberId(_gs1Builder.getSerialNumberId())
                                                    .setValidateInput(false)
                                                    .setInputOrigin(inputOrigin)
                                                    .setInputType(ProdAsBuiltBOMInputType::ScanGS1Barcode);
            if (reportAsFinishedLine.RecId)
            {
                productLotAssociationParameters.setReportFinishedJournalId(reportAsFinishedLine.JournalId)
                                               .setInventTransChildRefId(reportAsFinishedLine.InventTransChildRefId)
                                               .setInventTransChildType(reportAsFinishedLine.InventTransChildType);
            }

            boolean result = associationController.registerProductLotAssociation(productLotAssociationParameters);
            _gs1Builder.setResult(result);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>scanProductLotManualInput</Name>
				<Source><![CDATA[
    internal boolean scanProductLotManualInput(ProdAsBuiltBOMFormulaProducts _productLot, str _input)
    {
        var productLotAssociationParameters = ProdAsBuiltBOMProductLotAssociationParameters::construct()
                                                            .setProductLot(_productLot)                                                            
                                                            .setGoodQuantity(this.getGoodProductQuantity(_productLot))
                                                            .setErrorQuantity(this.getErrorProductQuantity(_productLot))
                                                            .setValidateInput(false)
                                                            .setInputOrigin(inputOrigin)
                                                            .setInputType(ProdAsBuiltBOMInputType::ScanManual);
        if (reportAsFinishedLine.RecId)
        {
            productLotAssociationParameters.setReportFinishedJournalId(reportAsFinishedLine.JournalId)
                                           .setInventTransChildRefId(reportAsFinishedLine.InventTransChildRefId)
                                           .setInventTransChildType(reportAsFinishedLine.InventTransChildType);
        }

        boolean result = associationController.tryResolveTrackingDimensionAndRegisterProductLotAssociation(productLotAssociationParameters, _input);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scanComponentLotGS1Barcode</Name>
				<Source><![CDATA[
    internal void scanComponentLotGS1Barcode(ProdAsBuiltBOMFormulaProducts _productLot, ProdAsBuiltBOMProductComponentGS1Builder _gs1Builder)
    {
        if (_gs1Builder.getBatchNumberId() || _gs1Builder.getSerialNumberId())
        {
            var componentLot = _gs1Builder.getComponentLot();
            var componentLotAssociationParameters = ProdAsBuiltBOMComponentLotAssociationParameters::construct()
                                                                .setProductLot(_productLot)
                                                                .setComponentLot(componentLot)
                                                                .setComponentPosition(componentLot.Position)
                                                                .setBatchNumberId(_gs1Builder.getBatchNumberId())
                                                                .setSerialNumberId(_gs1Builder.getSerialNumberId())
                                                                .setValidateInput(false)
                                                                .setInputOrigin(inputOrigin)
                                                                .setInputType(ProdAsBuiltBOMInputType::ScanGS1Barcode);
            if (pickingListLine)
            {
                componentLotAssociationParameters.setPickingListJournalId(pickingListLine.JournalId)
                                                 .setInventTransChildRefId(pickingListLine.InventTransChildRefId)
                                                 .setInventTransChildType(pickingListLine.InventTransChildType);
            }

            boolean result = associationController.registerComponentLotAssociation(componentLotAssociationParameters);
            _gs1Builder.setResult(result);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>scanComponentLotManualInput</Name>
				<Source><![CDATA[
    internal boolean scanComponentLotManualInput(ProdAsBuiltBOMFormulaProducts _productLot, ProdBOM _componentLot, str _input)
    {
        var componentLotAssociationParameters = ProdAsBuiltBOMComponentLotAssociationParameters::construct()
                                                                .setProductLot(_productLot)
                                                                .setComponentLot(_componentLot)
                                                                .setComponentPosition(_componentLot.Position)
                                                                .setValidateInput(false)
                                                                .setInputOrigin(inputOrigin)
                                                                .setInputType(ProdAsBuiltBOMInputType::ScanManual);
        if (pickingListLine)
        {
            componentLotAssociationParameters.setPickingListJournalId(pickingListLine.JournalId)
                                             .setInventTransChildRefId(pickingListLine.InventTransChildRefId)
                                             .setInventTransChildType(pickingListLine.InventTransChildType);
        }

        return associationController.tryResolveTrackingDimensionAndRegisterComponentLotAssociation(componentLotAssociationParameters, _input);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addItemTrackingDimensionConstraint</Name>
				<Source><![CDATA[
    internal void addItemTrackingDimensionConstraint(QueryBuildDataSource _parentDataSource, FieldId _itemIdField)
    {
        QueryBuildDataSource qbdsTrackingDimensionGroupItem = _parentDataSource.addDataSource(tableNum(EcoResTrackingDimensionGroupItem));
        qbdsTrackingDimensionGroupItem.joinMode(JoinMode::ExistsJoin);
        qbdsTrackingDimensionGroupItem.addLink(_itemIdField, fieldNum(EcoResTrackingDimensionGroupItem, ItemId));

        QueryBuildDataSource qbdsTrackingDimensionGroupFldSetup = qbdsTrackingDimensionGroupItem.addDataSource(tableNum(EcoResTrackingDimensionGroupFldSetup));
        qbdsTrackingDimensionGroupFldSetup.joinMode(JoinMode::InnerJoin);
        qbdsTrackingDimensionGroupFldSetup.addLink(fieldNum(EcoResTrackingDimensionGroupItem, TrackingDimensionGroup), fieldNum(EcoResTrackingDimensionGroupFldSetup, TrackingDimensionGroup));
        
        var rangeStr = strFmt('((%1 == %2) || (%1 == %3))',
                fieldStr(EcoResTrackingDimensionGroupFldSetup, DimensionFieldId),
                fieldNum(InventDim, InventSerialId),
                fieldNum(InventDim, InventBatchId));

        SysQuery::findOrCreateRange(qbdsTrackingDimensionGroupFldSetup, fieldNum(EcoResTrackingDimensionGroupFldSetup, DimensionFieldId)).value(rangeStr);
        SysQuery::findOrCreateRange(qbdsTrackingDimensionGroupFldSetup, fieldNum(EcoResTrackingDimensionGroupFldSetup, IsActive)).value(queryValue(NoYes::Yes));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGoodProductQuantity</Name>
				<Source><![CDATA[
    internal ProdReportedGood getGoodProductQuantity(ProdAsBuiltBOMFormulaProducts _productLot)
    {
        ProdAsBuiltBOMProductContext productLotContext = associationController.getProductLotBuilderCache(_productLot).getProductContext();

        // serialized product quantity is 1 by design.
        if (productLotContext && productLotContext.isItemSerializable())
        {
            return 1; 
        }

        var isBomOrFormula = _productLot.isBomOrFormula();

        if (isBOMOrFormula && routeJobCardLine.RecId)
        {
            return routeJobCardLine.QtyGood;
        }
        if (isBOMOrFormula && startParmLine.RecId)
        {
            return startParmLine.StartUpQty;
        }
        if (reportAsFinishedLine.RecId)
        {
            return reportAsFinishedLine.QtyGood;
        }
        if (reportAsFinishedParmLine.RecId)
        {
            return reportAsFinishedParmLine.QtyGood;
        }

        ProdReportedGood qtyGood;        
        if (isBOMOrFormula)
        {
            qtyGood = productionOrder.QtyCalc - associationController.rereadSumProductInventGoodErrorQty(_productLot);
        }
        else
        {
            qtyGood = PmfProdCoBy::findTransId(_productLot.InventTransId).QtyCoByCalc - associationController.rereadSumProductInventGoodErrorQty(_productLot);
        }

        return qtyGood > 0 ? qtyGood : 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getErrorProductQuantity</Name>
				<Source><![CDATA[
    internal ProdReportedError getErrorProductQuantity(ProdAsBuiltBOMFormulaProducts _productLot)
    {
        if (reportAsFinishedLine.RecId)
        {
            return reportAsFinishedLine.QtyError;
        }
        if (reportAsFinishedParmLine.RecId)
        {
            return reportAsFinishedParmLine.QtyError;
        }

        if (_productLot.isBomOrFormula() && routeJobCardLine.RecId)
        {
            return routeJobCardLine.QtyError;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productLotStatus</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMProductComponentStatus productLotStatus(ProdAsBuiltBOMFormulaProducts _productLot)
    {
        InventQty associatedQty = associationController.sumProductInventGoodErrorQty(_productLot);
        if (!associatedQty)
        {
            return ProdAsBuiltBOMProductComponentStatus::NotStarted;
        }

        InventQty remainder = _productLot.physicalRemainder();
        InventQty reportedAsFinished  = ProdTableJour::reportedFinishedGood(_productLot.ProdId, _productLot.InventTransId) +
                                        ProdTableJour::reportedFinishedError(_productLot.ProdId, _productLot.InventTransId);
        if (associatedQty != 0)
        {
            if (reportedAsFinished > associatedQty
               || remainder > associatedQty
               || (remainder > 0 && remainder <= associatedQty))
            {
                return ProdAsBuiltBOMProductComponentStatus::InProgress;
            }
            if (remainder == 0 && reportedAsFinished <= associatedQty)
            {
                return ProdAsBuiltBOMProductComponentStatus::Completed;
            }
        }

        return ProdAsBuiltBOMProductComponentStatus::NotStarted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>componentLotStatus</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMProductComponentStatus componentLotStatus(ProdBOM _componentLot)
    {        
        InventQty associatedQty = associationController.sumComponentLotConsumptionQty(_componentLot);
        if (!associatedQty)
        {
            return ProdAsBuiltBOMProductComponentStatus::NotStarted;
        }
        
        InventQty remainder = _componentLot.RemainInventPhysical;
        InventQty consumed  = ProdJournalBOM::getTotalInventConsump(_componentLot.InventTransId);
        
        if (associatedQty != 0)
        {
            if (consumed > associatedQty
               || remainder > associatedQty
               || (remainder > 0 && remainder <= associatedQty)
               || (remainder == 0 && _componentLot.prodTable().ProdStatus == ProdStatus::Created))
            {
                return ProdAsBuiltBOMProductComponentStatus::InProgress;
            }
            if (remainder == 0 && consumed <= associatedQty)
            {
                return ProdAsBuiltBOMProductComponentStatus::Completed;
            }
        }

        return ProdAsBuiltBOMProductComponentStatus::NotStarted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static ProdAsBuiltBOMProductComponentUIController construct(ProdAsBuiltBOMAssociationController _associationController, Args _args)
    {
        return new ProdAsBuiltBOMProductComponentUIController()
                        .setAssociationController(_associationController)
                        .setCallerArgs(_args)
                        .init();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>