<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPeriodSplit</Name>
	<SourceCode>
		<Declaration><![CDATA[
class   ProjPeriodSplit extends RunBase
{
    ProjPeriodLine  projPeriodLine;
    ProjPeriodLine  projPeriodLineTo;

    TransDate       splitDate;

    DialogField     dialogSplitDate;
    DialogRunbase   dialogRunbase;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog    =  super();

        dialogSplitDate = dialog.addField(extendedtypestr(ProjPeriodFrom), "@SYS50094", "@SYS333060");
        dialogSplitDate.value(this.parmProjPeriodLine().PeriodFrom +
                             (this.parmProjPeriodLine().PeriodTo - this.parmProjPeriodLine().PeriodFrom) div 2);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        this.parmSplitDate(dialogSplitDate.value());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjPeriodLine</Name>
				<Source><![CDATA[
    public ProjPeriodLine parmProjPeriodLine(ProjPeriodLine   _projPeriodLine = projPeriodLine)
    {
        projPeriodLine  = _projPeriodLine;

        return projPeriodLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjPeriodLineTo</Name>
				<Source><![CDATA[
    private ProjPeriodLine parmProjPeriodLineTo(ProjPeriodLine _projPeriodLineTo = projPeriodLineTo)
    {
        projPeriodLineTo  = _projPeriodLineTo;

        return projPeriodLineTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSplitDate</Name>
				<Source><![CDATA[
    public TransDate parmSplitDate(TransDate _splitDate = splitDate)
    {
        splitDate   = _splitDate;

        return splitDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        ProjPeriodLine  projPeriodLineSplitFrom = this.parmProjPeriodLine();
        ProjPeriodLine  projPeriodLineSplitTo;

        if (! this.validate())
        {
            throw error("@SYS21628");
        }

        try
        {
            ttsbegin;

            projPeriodLineSplitTo.PeriodTo      = projPeriodLineSplitFrom.PeriodTo;
            // Do the update before the insert, to better recover from possible update conflict
            projPeriodLineSplitFrom.PeriodTo    = splitDate;
            projPeriodLineSplitFrom.update();

            projPeriodLineSplitTo.PeriodFrom    = splitDate + 1;
            projPeriodLineSplitTo.PeriodId      = projPeriodLineSplitFrom.PeriodId;
            projPeriodLineSplitTo.PeriodName    = projPeriodLineSplitFrom.PeriodName;
            projPeriodLineSplitTo.ModelId       = projPeriodLineSplitFrom.ModelId;
            projPeriodLineSplitTo.insert();

            this.parmProjPeriodLineTo(projPeriodLineSplitTo);

            ttscommit;
        }

        catch (Exception::Error)
        {
            throw error("@SYS21628");
        }

        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    projPeriodLineSplitFrom.reread();
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        SMASubscriptionTable    smaSubscriptionTable;
        SMASubscriptionGroup    smaSubscriptionGroup;
        boolean ret = true;

        if (dialogSplitDate.value() < this.parmProjPeriodLine().PeriodFrom ||
            dialogSplitDate.value() >= this.parmProjPeriodLine().PeriodTo)
        {
            throw error("@SYS50095");
        }

        if (! this.parmProjPeriodLine().canBeChanged())
        {
            ret = checkFailed("@SYS50092");
        }

        if (this.parmProjPeriodLine().PeriodTo - this.parmProjPeriodLine().PeriodFrom < 2)
        {
            ret = checkFailed("@SYS50093");
        }

        select firstonly smaSubscriptionGroup
            where smaSubscriptionGroup.AccuedPeriodcode  == this.parmProjPeriodLine().PeriodId
               || smaSubscriptionGroup.InvoicePeriodcode == this.parmProjPeriodLine().PeriodId
               exists join smaSubscriptionTable
                where smaSubscriptionTable.GroupId   == smaSubscriptionGroup.GroupId;

        if (smaSubscriptionGroup)
        {
            ret = checkFailed(strfmt("@SYS98288",smaSubscriptionGroup.GroupId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS57611";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    private static void main(Args args)
    {
        ProjPeriodSplit projPeriodSplit;
        FormRun formRun;

        ProjPeriodLine  projPeriodLine;

        if (! args.dataset()   == tablenum(ProjPeriodLine))
        {
            throw error("@SYS25407");
        }

        projPeriodLine  = args.record();
        projPeriodSplit  = new ProjPeriodSplit();

        projPeriodSplit.parmProjPeriodLine(projPeriodLine);

        if (projPeriodSplit.prompt())
        {
            projPeriodSplit.runOperation();

            args.lookupRecord(projPeriodSplit.parmProjPeriodLineTo());

            formRun = args.caller();
            if (formRun != null)
            {
                formRun.dataSource(1).research(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>