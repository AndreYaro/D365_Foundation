<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTestCorrectionUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventTestCorrectionUpdate</c> class is a base class for various classes that are used to
///    update test corrections.
/// </summary>
abstract class InventTestCorrectionUpdate extends RunBase
{
    InventNonConformanceID  inventNonConformanceID;
    RecId                   recId;

    #define.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        inventNonConformanceId,
        recId
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes several internal variables based on the user of the class.
    /// </summary>
    /// <param name="_args">
    ///    A standard <c>Args</c> object that is used when it calls menu items from forms.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The caller is not an <c>InventTestCorrection</c> record.
    /// </exception>
    protected void initFromArgs(Args _args)
    {
        if (!_args || !_args.record() || !_args.record().RecId || _args.dataset() != tableNum(InventTestCorrection))
        {
            throw error(strFmt("@SYS19306", funcName()));
        }

        InventTestCorrection inventTestCorrection = _args.record();

        this.getLast();
        this.parmInventNonConformanceId(inventTestCorrection.InventNonConformanceID);
        this.parmRecId(inventTestCorrection.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventNonConformanceId</Name>
				<Source><![CDATA[
    public InventNonConformanceID parmInventNonConformanceId(InventNonConformanceID _inventNonConformanceID = inventNonConformanceID)
    {
        inventNonConformanceID = _inventNonConformanceID;

        return inventNonConformanceID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecId</Name>
				<Source><![CDATA[
    public RecId parmRecId(RecId _recId = recId)
    {
        recId = _recId;

        return recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer     version      = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshCaller</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Refreshes the calling form so updates are shown.
    /// </summary>
    /// <param name="_caller">
    ///    The calling record.
    /// </param>
    protected static void refreshCaller(Common _caller)
    {
        if (FormDataUtil::isFormDataSource(_caller))
        {
            FormDataSource formDataSource = FormDataUtil::getFormDataSource(_caller);
            formDataSource.reread();
            formDataSource.refresh();
            formDataSource.active();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
