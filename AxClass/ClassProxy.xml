<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ClassProxy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class is a proxy for intantiating and calling objects via reflection.
/// </summary>
internal final class ClassProxy
{
    private DictClass dictClass;
    private Object instance;
    private Map parameterList;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method instantiates the dictionary class.
    /// </summary>
    /// <param name = "_className">The class name to instantiate a dictionary class for.</param>
    public void new(str _className)
    {
        dictClass = new DictClass(className2Id(_className));  
        this.initParameterList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method returns an instance of the underlying class.
    /// </summary>
    /// <returns>The instance of the underlying class.</returns>
    [Hookable(false)]
    public Object getInstance()
    {
        if (! instance)
        {
            instance = dictClass.makeObject();
        }
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method takes a parameter for a method call.
    /// </summary>
    /// <param name = "_parameter">The parameter for a method call.</param>
    /// <returns>The same instance with the saved parameter.</returns>
    [Hookable(false)]
    public ClassProxy withParameter(anytype _parameter)
    {
        parameterList.insert(parameterList.elements() + 1, _parameter);
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>callObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method calls an instance method of the underlying class.
    /// </summary>
    /// <param name = "_methodName">The name of the method to be called.</param>
    /// <returns>The method call result.</returns>
    [Hookable(false)]
    public anytype callObject(str _methodName)
    {
        anytype returnValue;
        anytype param1, param2, param3;

        if (! instance)
        {
            instance = dictClass.makeObject();
        }
        
        switch (parameterList.elements())
        {
            case 0:
                returnValue = dictClass.callObject(
                    _methodName,
                    instance);
                break;
            case 1: 
                param1 = parameterList.lookup(1);
                returnValue = dictClass.callObject(
                    _methodName,
                    instance,
                    param1);
                break;
            case 2:
                param1 = parameterList.lookup(1);
                param2 = parameterList.lookup(2);
                returnValue = dictClass.callObject(
                    _methodName,
                    instance,
                    param1,
                    param2);
                break;
            case 3: 
                param1 = parameterList.lookup(1);
                param2 = parameterList.lookup(2);
                param3 = parameterList.lookup(3);
                returnValue = dictClass.callObject(
                    _methodName,
                    instance,
                    param1,
                    param2,
                    param3);
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        this.initParameterList();

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>callStatic</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method calls a static method of the underlying class.
    /// </summary>
    /// <param name = "_methodName">The name of the method to be called.</param>
    /// <returns>The method call result.</returns>
    [Hookable(false)]
    public anytype callStatic(str _methodName)
    {
        anytype returnValue;
        anytype param1, param2, param3;
        
        switch (parameterList.elements())
        {
            case 0:
                returnValue = dictClass.callStatic(
                    _methodName);
                break;
            case 1:
                param1 = parameterList.lookup(1);
                returnValue = dictClass.callStatic(
                    _methodName,
                    param1);
                break;
            case 2:
                param1 = parameterList.lookup(1);
                param2 = parameterList.lookup(2);
                returnValue = dictClass.callStatic(
                    _methodName,
                    param1,
                    param2);
                break;
            case 3:
                param1 = parameterList.lookup(1);
                param2 = parameterList.lookup(2);
                param3 = parameterList.lookup(3);
                returnValue = dictClass.callStatic(
                    _methodName,
                    param1,
                    param2,
                    param3);
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        this.initParameterList();

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameterList</Name>
				<Source><![CDATA[
    private void initParameterList()
    {
        parameterList = new Map(Types::Integer, Types::AnyType);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>