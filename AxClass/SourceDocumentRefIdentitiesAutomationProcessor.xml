<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SourceDocumentRefIdentitiesAutomationProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Controls the processing of reference identities for source documents.
/// </summary>
internal final class SourceDocumentRefIdentitiesAutomationProcessor extends SysOperationServiceController implements BatchRetryable
{
    private RecId sourceLink;
    private int threadId;
    private EnumName currentTypeEnumName;
    private SourceDocumentTypeEnumValue currentTypeEnumValue = -1;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static SourceDocumentRefIdentitiesAutomationProcessor construct()
    {
        return new SourceDocumentRefIdentitiesAutomationProcessor(
            classStr(SourceDocumentRefIdentitiesAutomationProcessor),
            methodStr(SourceDocumentRefIdentitiesAutomationProcessor, process),
            SysOperationExecutionMode::Asynchronous);
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    internal void process(SourceDocumentRefIdentitiesAutomationContract _workItem)
    {
        ProcessExecutionSourceStatus processExecutionSourceStatus = ProcessExecutionSourceStatus::Success;
        int startLine = infologLine();
        threadId = _workItem.parmThreadId();

        using (SysInstrumentationActivityContext activityContext = SourceDocumentAccountingFrameworkInstrumentationLogger::getActivityContext(
            SourceDocumentInstrumentationConstants::InstrumentationNamespaceForReferenceIdentitiesAutomation,
            classStr(SourceDocumentRefIdentitiesAutomationProcessor),
            SourceDocumentInstrumentationConstants::SourceDocumentRefIdentitiesAutomationProcess))
        {
            try
            {
                this.runProcess();
            }
            catch (Exception::Error)
            {
                processExecutionSourceStatus = ProcessExecutionSourceStatus::Error;
            }
            catch (Exception::Warning)
            {
                processExecutionSourceStatus = ProcessExecutionSourceStatus::Warning;
            }
            finally
            {
                SourceDocumentRefIdentitiesAutomationLoggerHelper sourceDocumentRefIdentitiesAutomationLoggerHelper = new SourceDocumentRefIdentitiesAutomationLoggerHelper();

                Integer currentLine = infologLine();
                container infoLogData = infolog.copy(startLine + 1, currentLine);
                SysInfologEnumerator infoLogEnumerator = SysInfologEnumerator::newData(infoLogData);

                ProcessExecutionSourceLink sourceLinkItem = sourceDocumentRefIdentitiesAutomationLoggerHelper.logSourceDocumentRefIdentitiesAutomationProcessorResult(
                    _workItem,
                    processExecutionSourceStatus,
                    activityContext,
                    infoLogEnumerator,
                    currentTypeEnumName,
                    currentTypeEnumValue);

                if (processExecutionSourceStatus == ProcessExecutionSourceStatus::Success)
                {
                    // Clear records associated to current thread since processing completed successfully
                    SourceDocumentRefIdentitiesThreads sourceDocumentRefIdentitiesThreads;
                    delete_from sourceDocumentRefIdentitiesThreads where sourceDocumentRefIdentitiesThreads.ReferenceIdentityTransferId == threadId;
                }

                this.parmSourceLink(sourceLinkItem.RecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runProcess</Name>
				<Source><![CDATA[
    private void runProcess()
    {
        List providers;
        Enumerator enumerator;
        SourceDocumentExtensionKey extensionKey;
        SourceDocReferenceIdentitiesProvider sourceDocReferenceIdentitiesProvider;
        SourceDocumentTmpTypeInformation refIdentitiesProvidersExtensionType = SourceDocumentExtensionFactory::getExtensionTypeInformation(classNum(SourceDocReferenceIdentitiesProvider));
        SubledgerJournalEntry subledgerJournalEntry;
        AccountingEvent accountingEvent;
        SourceDocumentHeader sourceDocumentHeader;
        SubledgerJournalEntryIdentityInProcess subledgerJournalEntryIdentityInProcess;
        SubledgerJournalEntryIdentityTransferred subledgerJournalEntryIdentityTransferred;
        boolean isPrimaryThread = false;

        // Loop through ClassIds which extend SourceDocReferenceIdentitiesProvider: CustInvoiceRefIdentitiesProvider, VendorInvoiceRefIdentitiesProvider, etc.
        while select ClassId from refIdentitiesProvidersExtensionType
        {
            container enumValuesContainer;

            // Gets EnumId for TypeEnumName and the TypeEnumValue for document types which will use the current provider class for reference identity processing
            List enumInfoFromAttributes = SourceDocumentExtensionUtil::getEnumValuesFromAttributes(classId2Name(refIdentitiesProvidersExtensionType.ClassId));
            ListEnumerator enumInfoFromAttributesEnumerator = enumInfoFromAttributes.getEnumerator();

            // Assign enum values to our container, EnumId for TypeEnumName at [0], TypeEnumValue at [1] so we can work with them
            if (enumInfoFromAttributesEnumerator.moveNext())
            {
                enumValuesContainer = enumInfoFromAttributesEnumerator.current();
            }

            // Verify we have enum values before attempting to use them
            if (enumValuesContainer != conNull())
            {
                // Set extensionKey values to TypeEnumName (SourceDocument_ProjectTimesheets, etc. pulled from EnumId) and TypeEnumValue
                // SourceDocumentExtensionKey type must be used to pass into the method call below
                extensionKey = [enumId2Name(conPeek(enumValuesContainer, 1)), conPeek(enumValuesContainer, 2)];

                // Set providers to the ref identities providers (where the base class is SourceDocReferenceIdentitiesProvider) for the current document type:
                // CustInvoiceRefIdentitiesProvider, VendorInvoiceRefIdentitiesProvider, etc.
                providers = SourceDocumentExtensionFactory::newObjectList(classNum(SourceDocReferenceIdentitiesProvider), extensionKey, false);

                // Ensure we have a valid provider
                if (providers && providers.elements() != 0)
                {
                    enumerator = providers.getEnumerator();

                    // The expected behavior is that each document type will only have a single provider, so this should only run once
                    // Loop through each provider of a given document type
                    while (enumerator.moveNext())
                    {
                        currentTypeEnumName = enumId2Name(conPeek(enumValuesContainer, 1));
                        currentTypeEnumValue = conPeek(enumValuesContainer, 2);

                        // Loop through all companies that have source documents of the currently selected type which are ready for reference identity generation
                        while select VoucherDataAreaId
                            from subledgerJournalEntry
                                group by subledgerJournalEntry.VoucherDataAreaId
                                where subledgerJournalEntry.ReferenceIdentityTransferStatus == ReferenceIdentityTransferStatus::ReadyForTransfer
                        join subledgerJournalEntryIdentityInProcess
                            where subledgerJournalEntryIdentityInProcess.SubledgerJournalEntry == subledgerJournalEntry.RecId
                                && subledgerJournalEntryIdentityInProcess.ReferenceIdentityTransferId == threadId
                        join accountingEvent
                            where accountingEvent.RecId == subledgerJournalEntryIdentityInProcess.AccountingEvent
                        join sourceDocumentHeader
                            where sourceDocumentHeader.RecId == accountingEvent.SourceDocumentHeader
                                && sourceDocumentHeader.TypeEnumName == currentTypeEnumName
                                && sourceDocumentHeader.TypeEnumValue == currentTypeEnumValue
                        {
                            // Set context to each company prior to processing for the current company/document type combination
                            changecompany(subledgerJournalEntry.VoucherDataAreaId)
                            {
                                sourceDocReferenceIdentitiesProvider = enumerator.current();
                                sourceDocReferenceIdentitiesProvider.setDateRange(dateNull(), dateMax());
                                sourceDocReferenceIdentitiesProvider.setIsProcessAutomationTask(true); // Pass true to tell the method we are running under automation
                                sourceDocReferenceIdentitiesProvider.setThreadId(threadId); // Pass threadId to tell the method the current thread
                                sourceDocReferenceIdentitiesProvider.generateReferenceIdentities();
                            }
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceLink</Name>
				<Source><![CDATA[
    [DataMember, Hookable(false)]
    public RecId parmSourceLink(RecId _sourceLink = sourceLink)
    {
        sourceLink = _sourceLink;

        return sourceLink;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCaption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected ClassDescription defaultCaption()
    {
        return "@SourceDocumentAccountingFramework:SourceDocumentRefIdentitiesAutomationProcessor";
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ClassDescription caption()
    {
        return this.defaultCaption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContract</Name>
				<Source><![CDATA[
    private SourceDocumentRefIdentitiesAutomationContract getContract()
    {
        return this.getDataContractInfoObject().dataContractObject() as SourceDocumentRefIdentitiesAutomationContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>