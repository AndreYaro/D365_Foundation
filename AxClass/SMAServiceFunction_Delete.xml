<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>SMAServiceFunction_Delete</Name>
  <SourceCode>
    <Declaration><![CDATA[
public class SMAServiceFunction_Delete extends SMAServiceFunction
{
    SMAServiceOrderLine     serviceOrderLine;
    QueryBuildRange         criteriaStageId;
    SMAStageId              stageId;
}
]]></Declaration>
    <Methods>
      <Method>
        <Name>canDeleteLines</Name>
        <Source><![CDATA[
        private boolean canDeleteLines()
    {
        SMAStageTable   stageTable;
        boolean         ret = true;

        stageTable = SMAStageTable::find(serviceOrderTable.StageId);

        // Check that stage allows deletion
        if (stageTable.StageCanDelete == NoYes::No)
        {
            // Service order %1 cannot be deleted.
            return checkFailed(strfmt("@SYS90093", serviceOrderTable.ServiceOrderId));
        }

        return ret;
    }
]]></Source>
      </Method>
      <Method>
        <Name>confirmDialog</Name>
        <Source><![CDATA[
        protected boolean confirmDialog(str _warning = "")
    {
        boolean ret;

        // Are you sure you want to delete all service orders?
        ret = super("@SYS91973");

        return ret;
    }
]]></Source>
      </Method>
      <Method>
        <Name>getStagesAllowed</Name>
        <Source><![CDATA[
        public str getStagesAllowed()
    {
        #define.separator("\,")

        SMAStageTable   stageTable;
        str             tmpStageStr = '';

        while select StageId, StageCanDelete from stageTable order by StageId where stageTable.StageCanDelete == NoYes::Yes
        {
            if (tmpStageStr)
            {
                tmpStageStr = tmpStageStr + #separator;
            }

            tmpStageStr = tmpStageStr + stageTable.StageId;
        }

        return tmpStageStr;
    }
]]></Source>
      </Method>
      <Method>
        <Name>new</Name>
        <Source><![CDATA[
        public void new(boolean _periodic = false)
    {
        periodic = _periodic;

        super();
    }
]]></Source>
      </Method>
      <Method>
        <Name>run</Name>
        <Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        boolean         allowDelete = false;
        int             intCancel   = 0;

        if (accepted)
        {
            queryRun.query().dataSourceTable(tablenum(SMAServiceOrderTable)).update(true);
            queryRun.query().dataSourceTable(tablenum(SMAServiceOrderTable)).concurrencyModel(ConcurrencyModel::Optimistic);

            while (queryRun.next())
            {
                serviceOrderTable = queryRun.get(tablenum(SMAServiceOrderTable));

                try
                {
                    allowDelete = serviceOrderTable.checkNoActiveSalesLine() && this.canDeleteLines();
                    if (allowDelete)
                    {
                        ttsbegin;

                        serviceOrderTable.delete();
                        intCancel++;

                        ttscommit;
                    }
                }
                catch (Exception::UpdateConflict)
                {
                    if (appl.ttsLevel() == 0)
                    {
                        if (xSession::currentRetryCount() >= #RetryNum)
                        {
                            throw Exception::UpdateConflictNotRecovered;
                        }
                        else
                        {
                            serviceOrderTable = SMAServiceOrderTable::find(serviceOrderTable.ServiceOrderId, true, ConcurrencyModel::Optimistic);
                            retry;
                        }
                    }
                    else
                    {
                        throw Exception::UpdateConflict;
                    }
                }
                catch
                {
                    exceptionTextFallThrough();
                }
            }
            if (showInfolog)
            {
                // Deleted '%1' service orders.
                info(strfmt("@SYS91971", intCancel));
            }
        }
    }
]]></Source>
      </Method>
      <Method>
        <Name>description</Name>
        <Source><![CDATA[
        static public ClassDescription description()
    {
        // Delete service orders
        return "@SYS90063";
    }
]]></Source>
      </Method>
    </Methods>
  </SourceCode>
</AxClass>