<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkDeferredPutProcessingTaskCancellationService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class is responsible for handling cancellation of a deferred put processing task.
/// </summary>
internal class WHSWorkDeferredPutProcessingTaskCancellationService extends SysOperationServiceBase
{
    private WHSInstrumentationLogger    logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>logger</Name>
				<Source><![CDATA[
    private WHSInstrumentationLogger logger()
    {
        if (!logger)
        {
            logger = WHSInstrumentationLogger::createLogger(classStr(WHSWorkDeferredPutProcessingTaskCancellationService));
        }

        return logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelTask</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void cancelTask(WHSWorkDeferredPutProcessingTaskCancellationContract _contract)
    {
        
        using (var activityContext = this.logger().workDeferredPut().cancelTask())
        {
            ttsbegin;

            WHSWorkDeferredPutProcessingTask workDeferredPutProcessingTaskProcess = WHSWorkDeferredPutProcessingTask::findByRecId(_contract.parmWorkDeferredPutProcessingTaskRecId(), true, true);

            this.logger().logRecordInformation(workDeferredPutProcessingTaskProcess);
          

            if (workDeferredPutProcessingTaskProcess.checkCanCancelWithWarning())
            {
                workDeferredPutProcessingTaskProcess.cancel();

                if (!_contract.parmKeepExistingWorkUserId())
                {
                    this.updateWork(workDeferredPutProcessingTaskProcess, _contract.parmNewWorkUserId());
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWork</Name>
				<Source><![CDATA[
    private void updateWork(WHSWorkDeferredPutProcessingTask _workDeferredPutProcessingTaskProcess, WHSUserId _newUserId)
    {
        WHSWorkTable workTable = WHSWorkTable::find(_workDeferredPutProcessingTaskProcess.WorkId, true);

        if (_newUserId != workTable.LockedUser)
        {
            this.logger().logRecordInformation(workTable);
            workTable.LockedUser = _newUserId;
            workTable.UserManuallyAssigned = NoYes::Yes;
            workTable.update();

            WHSWorkLine workLine = WHSWorkLine::find(_workDeferredPutProcessingTaskProcess.WorkId, _workDeferredPutProcessingTaskProcess.WorkLineNumber, true);

            if (workLine.UserId != _newUserId)
            {
                workLine.UserId = _newUserId;
                workLine.update();
                this.logger().logRecordInformation(workLine);
            }
        }            
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSWorkDeferredPutProcessingTaskCancellationService construct()
    {
        return new WHSWorkDeferredPutProcessingTaskCancellationService();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>