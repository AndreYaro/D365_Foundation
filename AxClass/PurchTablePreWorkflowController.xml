<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchTablePreWorkflowController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchTablePreWorkflowController</c> class acts as a controller for the <c>PurchTablePreWorkflowService</c> service.
/// </summary>
public class PurchTablePreWorkflowController extends SysOperationServiceController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>PurchTablePreWorkflowController</c> class.
    /// </summary>
    /// <param name = "_args">A controller arguments.</param>
    /// <returns>A instance of <c>SysOperationController</c> class.</returns>
    public static SysOperationController construct(Args _args)
    {
        if (!_args
            || !_args.record()
            || _args.dataset() != tableNum(PurchTable))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        PurchTablePreWorkflowController controller = new PurchTablePreWorkflowController(classstr(PurchTablePreWorkflowService),
                                                            methodstr(PurchTablePreWorkflowService, performBudgetCheck),
                                                            SysOperationExecutionMode::Synchronous);
        controller.parmArgs(_args);
        controller.parmShowDialog(false);
        controller.initializeContract(controller);

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the contract parameters.
    /// </summary>
    /// <param name = "_controller">An instance of <c>PurchTablePreWorkflowController</c> whose contract to initialize.</param>
    private void initializeContract(PurchTablePreWorkflowController _controller)
    {
        PurchTable purchTable = _controller.parmArgs().record();

        if (purchTable)
        {
            PurchTablePreWorkflowContract contract = _controller.getDataContractObject() as PurchTablePreWorkflowContract;

            if (contract)
            {
                contract.parmPurchId(purchTable.PurchId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the operation.
    /// </summary>
    /// <param name = "_args">The arguments for which to run the operation.</param>
    public static void main(Args _args)
    {
        PurchTablePreWorkflowController::construct(_args).startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return "@AccountsPayable:PurchaseOrderWorkFlowValidation";
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>