<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventRegistrationSalesLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventRegistrationSalesLine</c> class provides an implementation of the
///    <c>InventPendingRegistrationProvider</c> interface and the <c>InventRegistrationHandler</c>
///    interface for the sales lines.
/// </summary>
public class InventRegistrationSalesLine implements InventPendingRegistrationProvider, InventRegistrationHandler
{
    SalesLine           salesLine;
    InventDim           inventDim;
    WMSArrivalDetailTmp wmsArrivalDetailTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canRegister</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the registration can be performed.
    /// </summary>
    /// <param name="_qtyToRegister">
    /// The quantity to be registered.
    /// </param>
    /// <returns>
    /// true if the registration can be performed; otherwise, false.
    /// </returns>
    public boolean canRegister(InventQty _qtyToRegister)
    {
        return this.getRegistrationHelper().validateRegister(_qtyToRegister);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description for the sales order line.
    /// </summary>
    /// <returns>
    /// The description for the sales order line.
    /// </returns>
    public ItemFreeTxt getDescription()
    {
        return salesLine.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDirPartyRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>DirPartyRecId</c> value of the customer who is associated with the sales order.
    /// </summary>
    /// <returns>
    /// The <c>DirPartyRecId</c> value of the customer.
    /// </returns>
    public DirPartyRecId getDirPartyRecId()
    {
        return CustTable::find(salesLine.CustAccount).Party;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDistinctProductRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>EcoResDistinctProductRecId</c> value of the item on the sales order line.
    /// </summary>
    /// <returns>
    /// The <c>EcoResDistinctProductRecId</c> value of an item.
    /// </returns>
    public EcoResDistinctProductRecId getDistinctProductRecId()
    {
        if (
            inventDim.anyProductDimensionSpecified())
        {
            return InventDimCombination::findByInventDim(salesLine.ItemId,inventDim).DistinctProductVariant;
        }

        return InventTable::itemProduct(salesLine.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExpectedDeliveryDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the expected delivery date for the sales order line.
    /// </summary>
    /// <returns>
    /// The <c>InventExpectedDeliveryDateTime</c> value for the sales order line.
    /// </returns>
    /// <remarks>
    /// The expected delivery date is the confirmed delivery date. If the confirmed delivery date is not
    /// present, the expected delivery date is the delivery date.
    /// </remarks>
    public InventExpectedDeliveryDateTime getExpectedDeliveryDateTime()
    {
        InventExpectedDeliveryDateTime expectedDeliveryDateTime;

        if (salesLine.returnItem())
        {
            expectedDeliveryDateTime = DateTimeUtil::newDateTime(salesLine.ReturnDeadline,0);
        }
        else if (salesLine.ReceiptDateConfirmed)
        {
            expectedDeliveryDateTime = DateTimeUtil::newDateTime(salesLine.ReceiptDateConfirmed,0);
        }
        else
        {
            expectedDeliveryDateTime = DateTimeUtil::newDateTime(salesLine.ReceiptDateRequested,0);
        }

        return expectedDeliveryDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGrossVolume</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the gross volume for the items on the sales order line.
    /// </summary>
    /// <returns>
    /// The <c>Volume</c> value for the items on the sales order line.
    /// </returns>
    public Volume getGrossVolume()
    {
        return salesLine.getGrossVolumePerItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGrossWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the gross weight for the items in the sales order line.
    /// </summary>
    /// <returns>
    /// The <c>Weight</c> value for the items on the sales order line.
    /// </returns>
    public Weight getGrossWeight()
    {
        return salesLine.getGrossWeightPerItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>InventDim</c> record of the sales order line.
    /// </summary>
    /// <returns>
    /// The <c>InventDim</c> record of the sales line.
    /// </returns>
    private InventDim getInventDim()
    {
        if (salesLine.InventDimId != inventDim.InventDimId)
        {
            inventDim = InventDim::find(salesLine.InventDimId);
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPendingRegistrationQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the pending quantity that is to be registered for the sales order line.
    /// </summary>
    /// <returns>
    /// The ordered quantity on the sales order line.
    /// </returns>
    public InventQty getPendingRegistrationQuantity()
    {
        return salesLine.onOrderInSalesUnit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReceiptInventLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an <c>InventLocationId</c> value that is related to the source line where the receipt is
    /// expected.
    /// </summary>
    /// <returns>
    /// An <c>InventLocationId</c> value.
    /// </returns>
    public InventLocationId getReceiptInventLocationId()
    {
        return this.getInventDim().InventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReceiptInventSiteId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an <c>InventSiteId</c> value that is related to the source line where the receipt is expected.
    /// </summary>
    /// <returns>
    /// An <c>InventSiteId</c> value.
    /// </returns>
    public InventSiteId getReceiptInventSiteId()
    {
        return this.getInventDim().InventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReferenceCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>InventTransType</c> enumeration value for the order line.
    /// </summary>
    /// <returns>
    /// The <c>InventTransType</c> enumeration value for sales orders.
    /// </returns>
    public InventTransType getReferenceCategory()
    {
        return InventTransType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReferenceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sales ID of the sales order.
    /// </summary>
    /// <returns>
    /// The <c>InventTransRefId</c> value for the sales line.
    /// </returns>
    public InventTransRefId getReferenceId()
    {
        return salesLine.SalesId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReferenceLineId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>InventTransId</c> value for the sales order line.
    /// </summary>
    /// <returns>
    /// The <c>InventTransId</c> value for the sales order line.
    /// </returns>
    public InventTransId getReferenceLineId()
    {
        return salesLine.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRegistrationHelper</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an <c>InventTransType</c> enumeration value for the sales order line.
    /// </summary>
    /// <returns>
    /// The <c>SalesNonStockedRegistrationHelper</c> instance for the current sales order line.
    /// </returns>
    private SalesNonStockedRegistrationHelper getRegistrationHelper()
    {
        SalesNonStockedRegistrationHelper salesNonStockedRegistrationHelper = SalesNonStockedRegistrationHelper::newFromSalesLine(salesLine, wmsArrivalDetailTmp);
        return salesNonStockedRegistrationHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRegistrationProvider</Name>
				<Source><![CDATA[
        public InventPendingRegistrationProvider getRegistrationProvider()
    {
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceDocumentLineRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>SourceDocumentLineRecId</c> value for the sales order line.
    /// </summary>
    /// <returns>
    /// A <c>SourceDocumentLineRecId</c> value for the sales order line.
    /// </returns>
    public SourceDocumentLineRecId getSourceDocumentLineRecId()
    {
        return salesLine.SourceDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceLineCategoryRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>EcoResCategoryId</c> value of the sales category for the sales order line.
    /// </summary>
    /// <returns>
    /// The <c>EcoResCategoryId</c> value of a sales category.
    /// </returns>
    public EcoResCategoryId getSourceLineCategoryRecId()
    {
        return salesLine.SalesCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceLineLegalEntityRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RefRecID</c> value of the legal entity.
    /// </summary>
    /// <returns>
    /// The <c>RefRecID</c> value of the legal entity.
    /// </returns>
    public RefRecId getSourceLineLegalEntityRecId()
    {
        return salesLine.companyInfo().RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>notifyOnRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the processing that is required after the registration of the sales order line has
    /// completed.
    /// </summary>
    /// <param name="_qtyRegistered">
    /// The quantity that has been be registered as arrived.
    /// </param>
    public void notifyOnRegistration(InventQty _qtyRegistered)
    {
        this.getRegistrationHelper().updateOnRegistration();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesLine</Name>
				<Source><![CDATA[
        public SalesLine parmSalesLine(SalesLine _salesLine = salesLine)
    {
        salesLine = _salesLine;
        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWMSArrivalDetailTmp</Name>
				<Source><![CDATA[
        public WMSArrivalDetailTmp parmWMSArrivalDetailTmp(WMSArrivalDetailTmp _wmsArrivalDetailTmp = wmsArrivalDetailTmp)
    {
        wmsArrivalDetailTmp = _wmsArrivalDetailTmp;
        return wmsArrivalDetailTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static InventRegistrationSalesLine construct()
    {
        return new InventRegistrationSalesLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs and returns an instance of the <c>InventRegistrationSalesLine</c> class that is based on
    /// a specified <c>SalesLine</c> record.
    /// </summary>
    /// <param name="_salesLine">
    /// The <c>SalesLine</c> record on which the <c>InventRegistrationSalesLine</c> object will be based.
    /// </param>
    /// <param name="_wmsArrivalDetailTmp">
    /// A <c>WMSArrivalDetailTmp</c> record.
    /// </param>
    /// <returns>
    /// An instance of the <c>InventRegistrationSalesLine</c> class.
    /// </returns>
    public static InventRegistrationSalesLine newFromSalesLine(SalesLine _salesLine, WMSArrivalDetailTmp _wmsArrivalDetailTmp = null)
    {
        InventRegistrationSalesLine inventRegistrationSalesLine = InventRegistrationSalesLine::construct();

        inventRegistrationSalesLine.parmSalesLine(_salesLine);
        inventRegistrationSalesLine.parmWMSArrivalDetailTmp(_wmsArrivalDetailTmp);

        return inventRegistrationSalesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs and returns an instance of the <c>InventRegistrationSalesLine</c> class that is based on
    /// a specified <c>SourceDocumentLine</c> record.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    /// The <c>SourceDocumentLine</c> record on which the <c>InventRegistrationSalesLine</c> object will be
    /// based.
    /// </param>
    /// <param name="_wmsArrivalDetailTmp">
    /// A <c>WMSArrivalDetailTmp</c> record.
    /// </param>
    /// <returns>
    /// An instance of the <c>InventRegistrationSalesLine</c> class.
    /// </returns>
    public static InventRegistrationSalesLine newFromSourceDocumentLine(SourceDocumentLine _sourceDocumentLine, WMSArrivalDetailTmp _wmsArrivalDetailTmp)
    {
        if (!_sourceDocumentLine.RecId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return InventRegistrationSalesLine::newFromSalesLine(SalesLine::findSourceDocumentLine(_sourceDocumentLine.RecId), _wmsArrivalDetailTmp);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
