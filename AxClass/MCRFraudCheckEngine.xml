<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRFraudCheckEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRFraudCheckEngine</c> class handles logic for fraud checking.
/// </summary>
class MCRFraudCheckEngine
{
    #define.NUMBERS('0123456789')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCustomerStaticData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the sales order with the fraud static data for possible fraud and returns
    /// the total score of the fraudulent criteria met.
    /// </summary>
    /// <param name="_salesTable">
    /// The <c>SalesTable</c> record to check for fraud.
    /// </param>
    /// <param name="_custTable">
    /// The customer record for the customer on the order.
    /// </param>
    /// <returns>
    /// The total score of the fraudulent criteria met.
    /// </returns>
    static int checkCustomerStaticData(SalesTable _salesTable, CustTable _custTable)
    {
        int                         staticScore = 0;
        int                         emailScore;
        int                         phoneScore;
        int                         zipScore;
        int                         zipAddressScore;
        str                         ZipAddress;
        str                         convertedPhoneNum;
        MCRFraudDetail              mcrFraudDetail;
        LogisticsAddressZipCodeId   zipCode;
        LogisticsAddressing         address;
        Phone                       chkPhone;
        Email                       chkEmail;
        LogisticsPostalAddress      chkAddress;

        chkPhone = MCRFraudCheckEngine::deliveryLocator(_salesTable, LogisticsElectronicAddressMethodType::Phone);

        if (!chkPhone)
        {
            // if there is no phone on sales order, then we should check the phone on customer master record.
            chkPhone = DirParty::primaryElectronicAddress(_custTable.Party, LogisticsElectronicAddressMethodType::Phone).Locator;
        }

        if (chkPhone)
        {
            convertedPhoneNum = StrKeep(chkPhone, #NUMBERS);
            phoneScore = MCRFraudData::isPhoneFraud(convertedPhoneNum);
            if (phoneScore > 0)
            {
               staticScore += phoneScore;
               //write to the mcrFraudDetailTable
                mcrFraudDetail.add(_salesTable, MCRFraudType::BadPhone, phoneScore, chkPhone, MCRFraudArea::Billing);
            }
        }

        chkEmail = MCRFraudCheckEngine::deliveryLocator(_salesTable, LogisticsElectronicAddressMethodType::Email);

        if (!chkEmail)
        {
            // if there is no email on sales order, then we should check the email on customer master record.
            chkEmail = DirParty::primaryElectronicAddress(_custTable.Party, LogisticsElectronicAddressMethodType::Email).Locator;
        }

        if (chkEmail)
        {
            emailScore = MCRFraudData::isEmailFraud(chkEmail);
            if (emailScore > 0)
            {
                staticScore += emailScore;
                //write the details to the MCRFraudDetailTable
                mcrFraudDetail.add(_salesTable, MCRFraudType::BadEmail, emailScore, chkEmail, MCRFraudArea::Billing);
            }
        }

        chkAddress = LogisticsPostalAddress::findRecId(_salesTable.DeliveryPostalAddress);

        //check customer's zip for fraud.
        zipCode = chkAddress.ZipCode;

        if (!zipCode)
        {
            // if there is no zipCode on sales order, then we should check the zipCode on customer master record.
            zipCode = _custTable.postalAddress().ZipCode;
        }

        if (zipCode)
        {
            // check customer's zipCode for fraud.
            zipScore += MCRFraudData::isZipFraud(zipCode);
            if (zipScore > 0)
            {
                staticScore += zipScore;
                //write the details to the MCRFraudDetailTable
                mcrFraudDetail.add(_salesTable, MCRFraudType::BadZipCode, zipScore, zipCode, MCRFraudArea::Billing);
            }

            // check customer's extended zipCode for fraud.
            zipScore += MCRFraudData::isZipAddressFraud(zipCode);
            if (zipScore > 0)
            {
                staticScore += zipScore;
                // write the details to the MCRFraudDetailTable
                mcrFraudDetail.add(_salesTable, MCRFraudType::BadZipAddress, zipScore, zipCode, MCRFraudArea::Billing);
            }
        }

        if (zipCode)
        {
            if (!chkAddress)
            {
                // if there is no postal address on sales order, then we should check then postal address on customer master record.
                chkAddress = _custTable.postalAddress();
            }

            if (chkAddress)
            {
                address = chkAddress.Address;
                //check the delivery address for fraud
                ZipAddress = MCRFraudCheckEngine::mcrZipAddress(address, zipCode);
                zipAddressScore += MCRFraudData::isZipAddressFraud(ZipAddress);
                if (zipAddressScore > 0)
                {
                    staticScore += zipAddressScore;
                    mcrFraudDetail.add(_salesTable, MCRFraudType::BadZipAddress, zipAddressScore, ZipAddress, MCRFraudArea::Billing);
                }
            }
        }

        return staticScore;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFraudAlreadyApplied</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the sales order has already been checked for fraud.
    /// </summary>
    /// <param name="_salesId">
    /// The <c>SalesId</c> to check for fraud.
    /// </param>
    /// <returns>
    /// true if the order has already been put on fraud hold; Otherwise, false.
    /// </returns>
    static boolean checkFraudAlreadyApplied(SalesId _salesId)
    {
        MCRHoldCodeTrans    mcrholdCodeTrans;
        MCROrderParameters  mcrOrderParameters;
        boolean             ret = false;

        mcrOrderParameters = MCROrderParameters::find();

        select firstOnly RecId from mcrholdCodeTrans
            where mcrholdCodeTrans.InventRefId == _salesId
                && (mcrholdCodeTrans.MCRHoldCode == mcrOrderParameters.MCRFraudHoldCode
                || mcrholdCodeTrans.MCRHoldCode == mcrOrderParameters.MCRFraudManualHoldCode);

        if (mcrholdCodeTrans)
        {
            ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSalesLineStaticData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the sales order with the fraud static data for possible fraud and returns
    /// the total score of the fraudulent criteria met.
    /// </summary>
    /// <param name="_salesTable">
    /// The <c>SalesTable</c> record to check for fraud.
    /// </param>
    /// <param name="_custTable">
    /// The customer record for the customer on the order.
    /// </param>
    /// <param name="CustomerChecked">
    /// <c>Boolean</c> value that depicts whether the customer has already been fraud checked or not; optional.
    /// </param>
    /// <returns>
    /// The total score of the fraudulent criteria met.
    /// </returns>
    static int checkSalesLineStaticData(SalesTable _salesTable, CustTable _custTable, boolean CustomerChecked = false)
    {
        int                     staticScore = 0;
        int                     emailScore;
        int                     phoneScore;
        int                     zipScore;
        int                     zipAddressScore;
        str                     ZipAddress;
        str                     convertedPhoneNum;
        LogisticsPostalAddress  deliveryAddress;
        MCRFraudDetail          mcrFraudDetail;
        SalesLine               salesLine;
        MCRSalesLine            mcrSalesLine;
        int                     counter = 1;
        boolean                 phoneFraudFound = false;
        int                     seenPhonesCounter = 1;
        container               seenAddresses;
        container               seenPhones;
        List                    phoneNumbers = new List(Types::String);
        ListIterator            iterator;

        //insert the customer's address because it was already looked at in FraudCheckStaticData
        if (customerChecked)
        {
            seenAddresses = conIns(seenAddresses, counter, _custTable.postalAddress().RecId);
            counter++;
            //add customer phone
            seenPhones = conIns(seenPhones, seenPhonesCounter, _custTable.phone());
            seenPhonesCounter++;
        }

        //check all sales lines for zip, zipAddress fraud.
        while select salesLine where salesLine.SalesId == _salesTable.SalesId
                                   && salesLine.LineDeliveryType != LineDeliveryType::OrderLineWithMultipleDeliveries
        {
            deliveryAddress =  salesLine.deliveryAddress();
            if (MCRFraudCheckEngine::uniqueAddress(seenAddresses, deliveryAddress.RecId))
            {
                //insert this address into the container to save which unique addresses have
                //been looked at already.
                seenAddresses = ConIns(seenAddresses, counter, deliveryAddress);
                counter++;

                //zip
                if (deliveryAddress.ZipCode)
                {
                    zipScore += MCRFraudData::IsZipFraud(deliveryAddress.ZipCode);
                    if (zipScore > 0)
                    {
                        StaticScore += zipScore;
                        //write the details to the MCRFraudDetailTable
                        mcrFraudDetail.add(_salesTable, MCRFraudType::BadZipCode, zipScore, deliveryAddress.ZipCode, MCRFraudArea::Delivery);
                        zipScore = 0;
                    }

                    //zipAddress
                    ZipAddress = MCRFraudCheckEngine::mcrZipAddress(deliveryAddress.Address, deliveryAddress.ZipCode);
                    zipAddressScore += MCRFraudData::isZipAddressFraud(ZipAddress);
                    if (zipAddressScore > 0)
                    {
                        staticScore += zipAddressScore;
                        mcrFraudDetail.add(_salesTable, MCRFraudType::BadZipAddress, zipAddressScore, ZipAddress, MCRFraudArea::Delivery);
                        ZipAddressScore = 0;
                    }
                }
            }

            //phone
            phoneNumbers = salesLine.mcrGetPhoneNumbers();
            iterator = new ListIterator(phoneNumbers);

            while (iterator.more() && !phoneFraudFound)
            {
                convertedPhoneNum = StrKeep(any2str(iterator.value()), #NUMBERS);
                if (MCRFraudCheckEngine::uniquePhone(seenPhones, convertedPhoneNum))
                {
                    seenPhones = conIns(seenPhones, seenPhonesCounter, convertedPhoneNum);
                    seenPhonesCounter++;
                    phoneScore = MCRFraudData::isPhoneFraud(convertedPhoneNum);
                    if (phoneScore > 0)
                    {
                        staticScore+=phoneScore;
                        //write to the mcrFraudDetailTable
                        mcrFraudDetail.add(_salesTable, MCRFraudType::BadPhone, phoneScore, iterator.value(), MCRFraudArea::Delivery);
                        //break out once a phone number with fraud is found
                        phoneFraudFound = true;
                    }
                }

                iterator.next();
            }

            mcrSalesLine = salesLine.mcrSalesLine();
            //if the item is a gift certificate check the items email address.
            if (salesLine.ItemId == RetailParameters::find().GiftCardItem
                && mcrSalesLine.GiftCardType== MCRGiftCardType::Email)
            {
                //check buyer email
                if (mcrSalesLine.GiftCardBuyerEmail)
                {
                    emailScore = MCRFraudData::isEmailFraud(mcrSalesLine.GiftCardBuyerEmail);
                    if (emailScore > 0)
                    {
                        staticScore += emailScore;
                        //write the details to the MCRFraudDetailTable
                        mcrFraudDetail.add(_salesTable, MCRFraudType::BadEmail, emailScore, mcrSalesLine.GiftCardBuyerEmail, MCRFraudArea::Delivery);
                    }
                }

                if (mcrSalesLine.GiftCardRecipientEmail) //check email
                {
                    emailScore = MCRFraudData::isEmailFraud(mcrSalesLine.GiftCardRecipientEmail);
                    if (emailScore > 0)
                    {
                        staticScore += emailScore;
                        //write the details to the MCRFraudDetailTable
                        mcrFraudDetail.add(_salesTable, MCRFraudType::BadEmail, emailScore, mcrSalesLine.GiftCardRecipientEmail, MCRFraudArea::Delivery);
                    }
                }
            }
        }

        return staticScore;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryLocator</Name>
				<Source><![CDATA[
        /// <summary>
    ///     Finds locator info for current delivery.
    /// </summary>
    /// <param name="_salesTable">
    ///     Current SalesTable record.
    /// </param>
    /// <param name="_type">
    ///     The <c>LogisticsElectronicAddressMethodType</c> type.
    /// </param>
    /// <returns>
    ///     Locator info if exist, otherwise, empty string.
    /// </returns>
    static LogisticsElectronicAddressLocator deliveryLocator(SalesTable _salesTable, LogisticsElectronicAddressMethodType _type)
    {
        LogisticsElectronicAddress electronicAddress;
        LogisticsLocation logisticsLocation;
        LogisticsPostalAddress      postalAddress;

        postalAddress = LogisticsPostalAddress::findRecId(_salesTable.DeliveryPostalAddress);

        if (postalAddress)
        {
            select firstonly electronicAddress
                where electronicAddress.Type == _type
                    && electronicAddress.Locator != ''
                exists join logisticsLocation
                    where logisticsLocation.RecId == electronicAddress.Location
                        && logisticsLocation.ParentLocation == postalAddress.Location;
        }

        return electronicAddress ? electronicAddress.Locator : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>FraudCheckEngineExecute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the fraud static data and fraud rules for possible fraud and returns
    /// whether the total fraud score is higher than the minimum score required for
    /// a sales order to go on hold for fraud.
    /// </summary>
    /// <param name="_salesTable">
    /// The <c>SalesTable</c> record to check for fraud.
    /// </param>
    /// <returns>
    /// true if the minimum score to put an order on hold has been reached;
    /// otherwise, false.
    /// </returns>
    public static boolean FraudCheckEngineExecute(SalesTable _salesTable)
    {
        //Initialize a variable to keep track of the score
        int  score = 0;
        SalesLine salesLine;
        //map to store the order level fraud checks
        map       fraudRuleMap;

        MCROrderParameters mcrOrderParameters = MCROrderParameters::find();
        CustTable         custTable;

        custTable = CustTable::find(_salesTable.CustAccount);

        //Call method to check the fraud static data
        score += MCRFraudCheckEngine::FraudCheckStaticData(_salesTable, custTable);

        //Initiate the map used to store the fraud rules to avoid multiple counts
        // for order level rules.
        fraudRuleMap = new map(Types::String, Types::Integer);

        //Call method to execute the rules and obtain the score
        while select SalesId, recId
            from  salesLine
            where salesLine.LineDeliveryType  != LineDeliveryType::OrderLineWithMultipleDeliveries
            &&    salesLine.SalesId            == _salesTable.SalesId
        {
            score += MCRFraudCheckEngine::FraudExecuteRules(salesLine.recId, _salesTable, fraudRuleMap);
        }

        if (score>=mcrOrderParameters.MCRMinScore)
            Return true;
        Else
            Return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FraudCheckStaticData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the sales order with the fraud static data for possible fraud and returns
    /// the total score of the fraudulent criteria met.
    /// </summary>
    /// <param name="_salesTable">
    /// The <c>SalesTable</c> record to check for fraud.
    /// </param>
    /// <param name="_custTable">
    /// The customer record for the customer on the order.
    /// </param>
    /// <returns>
    /// The total score of the fraudulent criteria met.
    /// </returns>
    static int FraudCheckStaticData(SalesTable _salesTable, CustTable _custTable)
    {
        //Check the credit card for fraud
        int staticScore = 0;
        CustTable invoiceAccountTable;

        staticScore += MCRFraudCheckEngine::checkCustomerStaticData(_salesTable, _custTable);

        // If cust account is different from invoice account on sales order, then should check fraud data on master record of invoice account.
        if (_salesTable.CustAccount != _salesTable.InvoiceAccount)
        {
            select invoiceAccountTable where invoiceAccountTable.AccountNum == _salesTable.InvoiceAccount;
            staticScore += MCRFraudCheckEngine::checkCustomerStaticData(_salesTable, invoiceAccountTable);
        }

        staticScore += MCRFraudCheckEngine::checkSalesLineStaticData(_salesTable, _custTable, true);

        return staticScore;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FraudExecuteRules</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the fraud rules with the sales order for possible fraud and
    /// returns the total score of the fraud rules met.
    /// </summary>
    /// <param name="_salesLineRecId">
    /// The <c>RecID </c> of the <c>SalesLine</c> record that needs to be checked for fraud.
    /// </param>
    /// <param name="_salesTable">
    /// The <c>SalesTable</c> record to check for fraud.
    /// </param>
    /// <param name="_fraudRuleMap">
    /// A <c>Map</c> of the fraud rule data.
    /// </param>
    /// <returns>
    /// The total score of the fraudulent criteria met.
    /// </returns>
    static int FraudExecuteRules(RecId _salesLineRecId, SalesTable _salesTable, map _fraudRuleMap)
    {
        int              score = 0;
        MCRFraudRule      mcrFraudRule;
        MCRFraudDetail   mcrFraudDetail;

        while select Level, RuleId, Score, Description from mcrFraudRule
            where mcrFraudRule.Active == NoYes::Yes
        {
            //If it is an order level rule and it has already been added, skip it.
            if ((mcrFraudRule.Level != MCRRuleLevel::Order)
             || (!_fraudRuleMap.exists(mcrFraudRule.RuleId)))
            {
                if (MCRUpSellCrossSell::executeRule(mcrFraudRule.RuleId , _salesLineRecId))
                {
                    mcrFraudDetail.addFraudDetail(_salesTable, MCRFraudType::BadRule, mcrFraudRule.score, mcrFraudRule.Description, MCRFraudArea::Other, mcrFraudRule.RuleId);
                    score += mcrFraudRule.score;
                    //Insert into map if order level.
                    if (mcrFraudRule.Level == MCRRuleLevel::Order)
                    {
                        _fraudRuleMap.insert(mcrFraudRule.RuleId, mcrFraudRule.score);
                    }
                }
            }
        }

        return score;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrZipAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Takes the address and zipcode fields and returns a zip address.
    /// </summary>
    /// <param name="_address">
    /// The address requiredd to find the zip address.
    /// </param>
    /// <param name="_zip">
    /// The zip code required to find the zip address.
    /// </param>
    /// <returns>
    /// A string that contains the zip address.
    /// </returns>
    public static str mcrZipAddress(str _address, str _zip)
    {
        str zipAddress = "";
        str addressLocal;

        addressLocal = strRem(_address, '');  // removes all the spaces
        addressLocal = subStr(_address, 1, 4);  // gets the first four characters of the address.
        zipAddress   = _zip + addressLocal;   // add the zipcode to the front.

        return zipAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>uniqueAddress</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Checks if the address been searched for fraudulent data.
    /// </summary>
    /// <param name="_seenAddresses">
    /// A <c>Container</c> of the addresses that have been searched.
    /// </param>
    /// <param name="_address">
    /// The <c>RecID</c> of the address that is to be searched for.
    /// </param>
    /// <returns>
    /// true if the address was not found; otherwise, false.
    /// </returns>
    static boolean uniqueAddress(container _seenAddresses, RecId _address)
    {
        if (!ConFind(_seenAddresses, _address))
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>uniquePhone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether or not the phone number was already added to the fraud process.
    /// </summary>
    /// <param name="_seenPhones">
    /// List of already added phone numbers.
    /// </param>
    /// <param name="_phone">
    /// Phone number to validate.
    /// </param>
    /// <returns>
    /// true if the phone number has not already been added; Otherwise, false.
    /// </returns>
    static boolean uniquePhone(container _seenPhones, str _phone)
    {
        if (!ConFind(_seenPhones, _phone))
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>