<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventJournalOwnershipChangeLineCreateQueryBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventJournalOwnershipChangeLineCreateQueryBuilder</c> class builds a query over production order data for creating inventory ownership change journal lines.
/// </summary>
public class InventJournalOwnershipChangeLineCreateQueryBuilder
{
    Query query;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventJournalOwnershipChangeLineCreateQueryBuilder construct()
    {
        var queryBuilder = new InventJournalOwnershipChangeLineCreateQueryBuilder();
        queryBuilder.initQuery();

        return queryBuilder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    private void initQuery()
    {
        query = new Query(queryStr(InventJournalOwnershipChangeLineCreate));

        this.groupByInventTransOriginRecId();
        this.groupByItemId();

        this.selectInventoryDimensions();
        this.groupByInventoryDimensions();

        this.filterOutInvalidOwners();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>InventJournalOwnershipChangeLineCreateQueryBuilder</c> class from a query.
    /// </summary>
    /// <param name = "_queryRun">A query over production order data.</param>
    /// <returns>An instance of the the <c>InventJournalOwnershipChangeLineCreateQueryBuilder</c> class.</returns>
    public static InventJournalOwnershipChangeLineCreateQueryBuilder newFromQuery(Query _query)
    {
        if (!_query)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        var queryBuilder = new InventJournalOwnershipChangeLineCreateQueryBuilder();
        queryBuilder.setQuery(_query);

        return queryBuilder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQuery</Name>
				<Source><![CDATA[
    private void setQuery(Query _query)
    {
        query = _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a query over production order data for creating inventory ownership change journal lines.
    /// </summary>
    /// <returns>The query object.</returns>
    public Query getQuery()
    {
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatusIssue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the included issue status query ranges.
    /// </summary>
    /// <param name = "_statusIssue">Included issue statuses.</param>
    public void setStatusIssue(InventJournalOwnershipChangeLineCreateQueryStatusIssue _statusIssues)
    {
        this.clearExistingStatusIssueRanges();
        this.addStatusIssueRanges(_statusIssues);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProductionOrderNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the production order number query range.
    /// </summary>
    /// <param name = "_prodId">The production order number.</param>
    public void setProductionOrderNumber(ProdId _prodId)
    {
        QueryBuildRange productionOrderRange = query.dataSourceTable(tableNum(ProdBOM)).findRange(fieldNum(ProdBOM, ProdId));
        productionOrderRange.value(queryValue(_prodId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearExistingStatusIssueRanges</Name>
				<Source><![CDATA[
    private void clearExistingStatusIssueRanges()
    {
        QueryBuildDataSource qbdsInventTrans = this.inventTransDataSource();
        FieldId statusIssueField = this.statusIssueFieldId();

        QueryBuildRange statusIssueRange = qbdsInventTrans.findRange(statusIssueField);
        while (statusIssueRange)
        {
            qbdsInventTrans.clearRange(statusIssueField);
            statusIssueRange = qbdsInventTrans.findRange(statusIssueField);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addStatusIssueRanges</Name>
				<Source><![CDATA[
    private void addStatusIssueRanges(InventJournalOwnershipChangeLineCreateQueryStatusIssue _statusIssues)
    {
        this.addStatusIssueRange(StatusIssue::Picked);

        if (_statusIssues == InventJournalOwnershipChangeLineCreateQueryStatusIssue::PickedReservPhysical
            || _statusIssues == InventJournalOwnershipChangeLineCreateQueryStatusIssue::PickedReservedOnOrder)
        {
            this.addStatusIssueRange(StatusIssue::ReservPhysical);
        }

        if (_statusIssues == InventJournalOwnershipChangeLineCreateQueryStatusIssue::PickedReservedOnOrder)
        {
            this.addStatusIssueRange(StatusIssue::ReservOrdered);
            this.addStatusIssueRange(StatusIssue::OnOrder);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addStatusIssueRange</Name>
				<Source><![CDATA[
    private void addStatusIssueRange(StatusIssue _statusIssue)
    {
        QueryBuildRange statusIssueRange = this.inventTransDataSource().addRange(this.statusIssueFieldId());
        statusIssueRange.value(queryValue(_statusIssue));
        statusIssueRange.status(RangeStatus::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransDataSource</Name>
				<Source><![CDATA[
    private QueryBuildDataSource inventTransDataSource()
    {
        return query.dataSourceTable(tableNum(InventTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusIssueFieldId</Name>
				<Source><![CDATA[
    private FieldId statusIssueFieldId()
    {
        return fieldNum(InventTrans, StatusIssue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupByInventTransOriginRecId</Name>
				<Source><![CDATA[
    private void groupByInventTransOriginRecId()
    {
        QueryBuildDataSource qbdsInventTransOrigin  = query.dataSourceTable(tableNum(InventTransOrigin));
        qbdsInventTransOrigin.addGroupByField(fieldNum(InventTransOrigin, RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupByItemId</Name>
				<Source><![CDATA[
    private void groupByItemId()
    {
        QueryBuildDataSource qbdsProdBOM  = query.dataSourceTable(tableNum(ProdBOM));
        qbdsProdBOM.addGroupByField(fieldNum(ProdBOM, ItemId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimDataSource</Name>
				<Source><![CDATA[
    private QueryBuildDataSource inventDimDataSource()
    {
        return query.dataSourceName('InventDim');
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimInvalidOwnersDataSource</Name>
				<Source><![CDATA[
    private QueryBuildDataSource inventDimInvalidOwnersDataSource()
    {
        // There are two InventDim data sources in the query. One of them is specifically for filtering out invalid owners.
        // We need two data sources to be able to have both a locked/hidden range (for invalid owners),
        // and an open range (for user-entered owners) on the same field.
        return query.dataSourceName('InventDimInvalidOwners');
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectInventoryDimensions</Name>
				<Source><![CDATA[
    private void selectInventoryDimensions()
    {
        QueryBuildDataSource qbdsInventDim = this.inventDimDataSource();

        InventDimParm dimensionsToSelect;
        this.setInventoryDimensionsToSelect(dimensionsToSelect);
        dimensionsToSelect.queryAddSelectionFields(qbdsInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupByInventoryDimensions</Name>
				<Source><![CDATA[
    private void groupByInventoryDimensions()
    {
        QueryBuildDataSource qdbsInventDim = this.inventDimDataSource();
        InventDimParm dimensionsToGroupBy;
        this.setInventoryDimensionsToSelect(dimensionsToGroupBy);
        dimensionsToGroupBy.InventOwnerIdFlag_RU = true; // Inventory owner is selected in the query already, need to group by it
        dimensionsToGroupBy.queryAddGroupByField(qdbsInventDim);

        QueryBuildDataSource qdbsInventDimInvalidOwner = this.inventDimInvalidOwnersDataSource();
        InventDimParm dimensionsToGroupByInvalidOwners;
        dimensionsToGroupByInvalidOwners.InventOwnerIdFlag_RU = true;
        dimensionsToGroupByInvalidOwners.queryAddGroupByField(qdbsInventDimInvalidOwner);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventoryDimensionsToSelect</Name>
				<Source><![CDATA[
    private void setInventoryDimensionsToSelect(InventDimParm _inventDimParm)
    {
        _inventDimParm.setAllStorageDimensions();
        _inventDimParm.setAllProductDimensions();

        #InventDimDevelop
        //The Russian dims are skipped because in Russian AX, owner has a different interpretation tied to profile and GTD num.
        Set trackingDims = Set::create(InventDim::dimTrackingDimFieldSet().pack());
        trackingDims.remove(fieldNum(InventDim, InventOwnerId_RU));
        trackingDims.remove(fieldNum(InventDim, InventProfileId_RU));
        trackingDims.remove(fieldNum(InventDim, InventGtdId_RU));

        Enumerator enum = trackingDims.getEnumerator();
        while (enum.moveNext())
        {
            _inventDimParm.(InventDim::dim2dimParm(enum.current())) = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterOutInvalidOwners</Name>
				<Source><![CDATA[
    private void filterOutInvalidOwners()
    {
        InventOwner_RU legalEntityOwner = InventOwner_RU::findOrCreateCurrentLegalEntity();
        str ownerRangeValue = strFmt('((%1 != "%2") && (%1 != ""))', // filter out blank owner
            fieldStr(InventDim, InventOwnerId_RU),
            queryValue(legalEntityOwner.InventOwnerId)); // filter out current legal entity owner

        QueryBuildDataSource qdbsInventDim = this.inventDimInvalidOwnersDataSource();
        QueryBuildRange ownerRange = qdbsInventDim.addRange(fieldNum(InventDim, InventOwnerId_RU));
        ownerRange.value(ownerRangeValue);
        ownerRange.status(RangeStatus::Hidden);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>