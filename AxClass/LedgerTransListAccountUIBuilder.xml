<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTransListAccountUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerTransListAccountUIBuilder</c> class is used to manage the parameter form for the
/// <c>LedgerTransListAccount</c> report.
/// </summary>
class LedgerTransListAccountUIBuilder extends SrsReportDataContractUIBuilder
{
    DialogField dialogFieldFromDate, dialogFieldToDate, dialogFieldDateCode;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dateIntervalModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the from date and to date fields based on the selected date interval.
    /// </summary>
    /// <param name="_control">
    /// The <c>FormStringControl</c> object whose value determines the date field values.
    /// </param>
    /// <returns>
    /// true if the control value has been modified; otherwise, false.
    /// </returns>
    public boolean dateIntervalModified(FormStringControl _control)
    {
        boolean             returnValue;
        LedgerPeriodCode    ledgerPeriodCode;

        returnValue = _control.modified();

        if (returnValue)
        {
            if (dialogFieldDateCode.value() != '')
            {
                ledgerPeriodCode = LedgerPeriodCode::find(dialogFieldDateCode.value());

                if (ledgerPeriodCode)
                {
                    dialogFieldFromDate.value(ledgerPeriodCode.fromDate());
                    dialogFieldToDate.value(ledgerPeriodCode.toDate());
                }
            }
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateIntervalValidate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies that a date interval is valid.
    /// </summary>
    /// <param name="_control">
    /// The control in which to verify the changed dialog field.
    /// </param>
    /// <returns>
    /// true if the control value is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The date interval must exist in the <c>LedgerPeriodCode</c> table.
    /// </remarks>
    public boolean dateIntervalValidate(FormStringControl _control)
    {
        boolean returnValue = true;

        if (_control.modified() && dialogFieldDateCode.value())
        {
            returnValue = LedgerPeriodCode::checkExist(dialogFieldDateCode.value());

            if (!returnValue)
            {
                dialogFieldDateCode.value('');
            }
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the date interval parameter when the from or to date field is changed.
    /// </summary>
    /// <param name="_control">
    /// The <c>FormDateControl</c> object that has changed.
    /// </param>
    /// <returns>
    /// true if the control value has been modified; otherwise false.
    /// </returns>
    public boolean dateModified(FormDateControl _control)
    {
        boolean returnValue;

        returnValue = _control.modified();

        if (returnValue)
        {
            dialogFieldDateCode.value('');
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Registers the dialog field methods to capture events.
    /// </summary>
    public void postRun()
    {
        Dialog dialogLocal = this.dialog();

        super();

        // This method should be called in order to handle events on dialogs.
        dialogLocal.dialogForm().formRun().controlMethodOverload(false);

        dialogFieldDateCode = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(LedgerTransListAccountContract, parmDateCode));
        dialogFieldFromDate = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(LedgerTransListAccountContract, parmFromDate));
        dialogFieldToDate = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(LedgerTransListAccountContract, parmToDate));

        // Override the modified method of the Date Interval field so that the From and To dates fields get populated based on the interval selected.
        dialogFieldDateCode.registerOverrideMethod(methodStr(FormStringControl, modified), methodStr(LedgerTransListAccountUIBuilder, dateIntervalModified), this);

        // Override the validate method of the Date Interval field.
        dialogFieldDateCode.registerOverrideMethod(methodStr(FormStringControl, validate), methodStr(LedgerTransListAccountUIBuilder, dateIntervalValidate), this);

        // run these to sync to the system date
        this.dateIntervalModified(dialogFieldDateCode.control());

        // Override the modified method of the From and To date fields so the date interval gets cleared when a date is manually changed.
        dialogFieldFromDate.registerOverrideMethod(methodStr(FormDateControl, modified), methodStr(LedgerTransListAccountUIBuilder, dateModified), this);
        dialogFieldToDate.registerOverrideMethod(methodStr(FormDateControl, modified), methodStr(LedgerTransListAccountUIBuilder, dateModified), this);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>