<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjHierarchyTreeTableHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class handles <c>HierarchyTreeTable</c> events.
/// </summary>
class ProjHierarchyTreeTableHandler
{
}

]]></Declaration>
		<Methods>
			<Method>
				<Name>preDeleteActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the <c>HierarchyTreeTable.preDeleteActivity()</c> event.
    /// </summary>
    /// <param name = "_eventArgs">
    /// The arguments for the event.
    /// </param>
    [SubscribesTo(tableStr(HierarchyTreeTable), delegatestr(HierarchyTreeTable, preDeleteActivity))]
    public static void preDeleteActivity(HierarchyTreeTable _subHierarchy, HierarchyIdBase _parentHierarchyId, CaseDeleteActivityEventArgs _args)
    {
        PSAActivityEstimates            psaActivityEstimates;
        ProjDependency                  projDependency;
        ProjId                          projectId;

        ProjTaskEstimatesSynchronizer   projTaskEstimatesSynchronizer = ProjTaskEstimatesSynchronizer::construct(HierarchyLinkTable_Extension::findLinkedTableByHierarchyId(_subHierarchy.HierarchyId, true), _parentHierarchyId);

        if (_args.parmImpactedActivities() == null)
        {
            _args.parmImpactedActivities(new Set(Types::String));
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            while select forupdate psaActivityEstimates where psaActivityEstimates.ActivityNumber == _args.parmDeleteSmmActivity().ActivityNumber
            {
                if (psaActivityEstimates.validateDelete(_args.parmValidateOnly()))
                {
                    if (!_args.parmValidateOnly())
                    {
                        psaActivityEstimates.delete();
                    }
                }
                else
                {
                    if (!_args.parmSilentValidation())
                    {
                        throw Exception::Error;
                    }
                    else
                    {
                        _args.parmValid(false);
                        break;
                    }
                }
            }

            if (!_args.parmValidateOnly() && _args.parmValid())
            {
                projTaskEstimatesSynchronizer.syncToTaskDeletion(PSAActivitySetup::findActivityNumber(_args.parmDeleteSmmActivity().ActivityNumber, true));

                HierarchyLinkTable hierarchyLinkTable = HierarchyLinkTable::findByHierarchyId(_subHierarchy.HierarchyId);

                if (!projectId && hierarchyLinkTable.RefTableId == tableNum(ProjTable))
                {
                    projectId = ProjTable::findRecId(hierarchyLinkTable.RefRecId).ProjId;
                }
            }
        }

        if (!_args.parmValidateOnly() && _args.parmValid())
        {
            while select Successor from projDependency
                    where  projDependency.Predecessor == _args.parmDeleteSmmActivity().ActivityNumber
            {
                _args.parmImpactedActivities().add(projDependency.Successor);
            }

            // Use multiple delete calls to take advanages of indexes defined
            delete_from projDependency
                    where projDependency.Predecessor == _args.parmDeleteSmmActivity().ActivityNumber;
            delete_from projDependency
                    where projDependency.Successor == _args.parmDeleteSmmActivity().ActivityNumber;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preInsertActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the <c>HierarchyTreeTable.preInsertActivity()</c> event.
    /// </summary>
    /// <param name = "_hierarchyTreeTable">
    /// The <c>HierarchyTreeTable</c> record.
    /// </param>
    /// <param name = "_hierarchyTreeTable">
    /// The <c>smmActivities</c> record.
    /// </param>
    [SubscribesTo(tableStr(HierarchyTreeTable), delegatestr(HierarchyTreeTable, preInsertActivity))]
    public static void preInsertActivity(HierarchyTreeTable _hierarchyTreeTable, smmActivities _smmActivities)
    {
        Name                            dash;
        smmActivityParentLinkTable      activityLink;

        if (!isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            _hierarchyTreeTable.Name = strLTrim(_smmActivities.Purpose);

            dash = (_smmActivities.psaDescription != '') ? ' - ' : '';
            _hierarchyTreeTable.Name = _smmActivities.Purpose + dash + _smmActivities.psaDescription;
            _hierarchyTreeTable.ReferenceElementNumber = _hierarchyTreeTable.ElementNumber;

            update_recordset activityLink
                setting RefRecId = ProjTable::find("").RecId
                where activityLink.ActivityNumber == _smmActivities.ActivityNumber
                    && activityLink.ParentType == smmActivityParentType::Project;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preInsertRoot</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the <c>HierarchyTreeTable.preInsertRoot()</c> event.
    /// </summary>
    /// <param name = "_hierarchyTreeTable">
    /// The <c>HierarchyTreeTable</c> record.
    /// </param>
    [SubscribesTo(tableStr(HierarchyTreeTable), delegatestr(HierarchyTreeTable, preInsertRoot))]
    public static void preInsertRoot(HierarchyTreeTable _hierarchyTreeTable, Name _name)
    {
        ProjTable projTable = ProjTable::find(_name);
        str description = projTable.Name;

        if (projTable && isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            _hierarchyTreeTable.psaLevelName = _hierarchyTreeTable.Name;
            _hierarchyTreeTable.psaLevelDescription = description;
            _hierarchyTreeTable.psaNameLink = _hierarchyTreeTable.Name;
            _hierarchyTreeTable.psaHierarchyLevelType = PSAHierarchyLevelType::Root;
        }

        Hierarchy hierarchy = Hierarchy::find(_hierarchyTreeTable.HierarchyId);
        if (projTable && hierarchy.HierarchyType == HierarchyType::Project)
        {
            _hierarchyTreeTable.RefRecId = HierarchyTreeTable_Extension::projCreateProjectRootActivityRecords(projTable);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>