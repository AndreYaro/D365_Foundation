<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportHierarchyDuplicator_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Utility object used to create duplicate versions of a specified hierarchy version.
/// </summary>
class TaxReportHierarchyDuplicator_IN
{
    TaxReportHierarchyVersion_IN    hierarchyVersion;
    TaxReportHierarchy_IN           hierarchy;
    private Map runtimeRecIdForComponentNodeCache;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>duplicate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Duplicates the hierarchy version.
    /// </summary>
    /// <returns>
    /// The <c>TaxReportHierarchyVersion_IN</c> record of the duplicate hierarchy version.
    /// </returns>
    public TaxReportHierarchyVersion_IN duplicate()
    {
        runtimeRecIdForComponentNodeCache = new Map(Types::Int64, Types::Int64);
        TaxReportHierarchyVersion_IN duplicateVersion;

        ttsBegin;

        // Create a new version record
        duplicateVersion = TaxReportHierarchyVersion_IN::insertNewVersion(hierarchy);

        this.duplicateNodes(duplicateVersion);

        this.updateDuplicateNodes(duplicateVersion);

        this.duplicateNodeCollections(duplicateVersion);

        this.duplicateSetOffRules(duplicateVersion);

        ttsCommit;

        return duplicateVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicateNodeCollections</Name>
				<Source><![CDATA[
        private void duplicateNodeCollections(TaxReportHierarchyVersion_IN _duplicateVersion)
    {
        RecordInsertList                        insertList;
        TaxReportHrchyNodeCollection_IN         curCollection;
        TaxReportHrchyNodeCollection_IN         newCollection;
        TaxReportHierarchyNode_IN               curCollectionNode;
        TaxReportHierarchyNode_IN               newCollectionNode;
        TaxReportHrchyNodeCollectionDetails_IN  curDetail;
        TaxReportHrchyNodeCollectionDetails_IN  newDetail;
        TaxReportHierarchyNode_IN               curDetailNode;
        TaxReportHierarchyNode_IN               newDetailNode;

        // Duplicate node collection headers
        insertList = new RecordInsertList(newCollection.TableId);

        while select curCollection
            join NodeId from curCollectionNode
                where curCollectionNode.TaxReportHierarchyVersion_IN == hierarchyVersion.RecId
                   && curCollectionNode.RecId == curCollection.TaxReportHierarchyNode_IN
            join RecId from newCollectionNode
                where newCollectionNode.TaxReportHierarchyVersion_IN == _duplicateVersion.RecId
                   && newCollectionNode.NodeId == curCollectionNode.NodeId
        {
            newCollection.data(curCollection);
            newCollection.TaxReportHierarchyNode_IN = newCollectionNode.RecId;

            insertList.add(newCollection);
        }

        insertList.insertDatabase();

        // Duplicate node collection details
        insertList = new RecordInsertList(newDetail.TableId);

        while select curDetail
            join NodeId from curDetailNode
                where curDetailNode.TaxReportHierarchyVersion_IN == hierarchyVersion.RecId
                   && curDetailNode.RecId == curDetail.TaxReportHierarchyNode_IN
            join TaxReportHierarchyNode_IN, Name from curCollection
                where curCollection.RecId == curDetail.TaxReportHrchyNodeCollection_IN
            join NodeId from curCollectionNode
                where curCollectionNode.TaxReportHierarchyVersion_IN == hierarchyVersion.RecId
                   && curCollectionNode.RecId == curCollection.TaxReportHierarchyNode_IN
            join RecId from newDetailNode
                where newDetailNode.TaxReportHierarchyVersion_IN == _duplicateVersion.RecId
                   && newDetailNode.NodeId == curDetailNode.NodeId
            join RecId from newCollectionNode
                where newCollectionNode.TaxReportHierarchyVersion_IN == _duplicateVersion.RecId
                   && newCollectionNode.NodeId == curCollectionNode.NodeId
            join RecId from newCollection
                where newCollection.TaxReportHierarchyNode_IN == newCollectionNode.RecId
                   && newCollection.Name == curCollection.Name
        {
            newDetail.data(curDetail);
            newDetail.TaxReportHierarchyNode_IN = newDetailNode.RecId;
            newDetail.TaxReportHrchyNodeCollection_IN = newCollection.RecId;

            insertList.add(newDetail);
        }

        insertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicateNodes</Name>
				<Source><![CDATA[
        private void duplicateNodes(TaxReportHierarchyVersion_IN _duplicateVersion)
    {
        RecordInsertList            insertList;
        TaxReportHierarchyNode_IN   curNode;
        TaxReportHierarchyNode_IN   newNode;

        insertList = new RecordInsertList(newNode.TableId);

        while select curNode
            where curNode.TaxReportHierarchyVersion_IN == hierarchyVersion.RecId
        {
            newNode.data(curNode);
            newNode.TaxReportHierarchyVersion_IN = _duplicateVersion.RecId;

            insertList.add(newNode);
        }

        insertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicateSetOffRules</Name>
				<Source><![CDATA[
        private void duplicateSetOffRules(TaxReportHierarchyVersion_IN _duplicateVersion)
    {
        RecordInsertList                            insertList;
        TaxReportHierarchySetOffRule_IN             curRule;
        TaxReportHierarchySetOffRule_IN             newRule;
        TaxReportHierarchySetOffRuleDirection_IN    curRuleDir;
        TaxReportHierarchySetOffRuleDirection_IN    newRuleDir;
        TaxReportHierarchySetOffRuleDetails_IN      curRuleDetail;
        TaxReportHierarchySetOffRuleDetails_IN      newRuleDetail;
        TaxReportHrchyNodeCollection_IN             curCollection;
        TaxReportHrchyNodeCollection_IN             newCollection;
        TaxReportHierarchyNode_IN                   curCollectionNode;
        TaxReportHierarchyNode_IN                   newCollectionNode;
        TaxReportHrchyNodeCollectionDetails_IN      curCollectionDetail;
        TaxReportHrchyNodeCollectionDetails_IN      newCollectionDetail;
        TaxReportHierarchyNode_IN                   curCollectionDetailNode;
        TaxReportHierarchyNode_IN                   newCollectionDetailNode;

        // Duplicate set off rules
        insertList = new RecordInsertList(newRule.TableId);

        while select curRule
            where curRule.TaxReportHierarchyVersion_IN == hierarchyVersion.RecId
        {
            newRule.data(curRule);
            newRule.TaxReportHierarchyVersion_IN = _duplicateVersion.RecId;

            insertList.add(newRule);
        }

        insertList.insertDatabase();

        // Duplicate set off directions
        insertList = new RecordInsertList(newRuleDir.TableId);

        while select curRuleDir
            join Name from curRule
                where curRule.RecId == curRuleDir.TaxReportHierarchySetOffRule_IN
            join TaxReportHierarchyNode_IN, Name from curCollection
                where curCollection.RecId == curRuleDir.TaxReportHrchyNodeCollection_IN
            join NodeId from curCollectionNode
                where curCollectionNode.TaxReportHierarchyVersion_IN == hierarchyVersion.RecId
                   && curCollectionNode.RecId == curCollection.TaxReportHierarchyNode_IN
            join RecId from newRule
                where newRule.TaxReportHierarchyVersion_IN == _duplicateVersion.RecId
                   && newRule.Name == curRule.Name
            join RecId from newCollectionNode
                where newCollectionNode.TaxReportHierarchyVersion_IN == _duplicateVersion.RecId
                   && newCollectionNode.NodeId == curCollectionNode.NodeId
            join RecId from newCollection
                where newCollection.TaxReportHierarchyNode_IN == newCollectionNode.RecId
                   && newCollection.Name == curCollection.Name
        {
            newRuleDir.data(curRuleDir);
            newRuleDir.TaxReportHierarchySetOffRule_IN = newRule.RecId;
            newRuleDir.TaxReportHrchyNodeCollection_IN = newCollection.RecId;

            insertList.add(newRuleDir);
        }

        insertList.insertDatabase();

        // Duplicate set off rule details
        insertList = new RecordInsertList(newRuleDetail.TableId);

        while select curRuleDetail
            join TaxReportHierarchySetOffRule_IN, TaxDirection from curRuleDir
                where curRuleDir.RecId == curRuleDetail.TaxReportHierarchySetOffRuleDirection_IN
            join Name from curRule
                where curRule.TaxReportHierarchyVersion_IN == hierarchyVersion.RecId
                   && curRule.RecId == curRuleDir.TaxReportHierarchySetOffRule_IN
            join RecId from newRule
                where newRule.TaxReportHierarchyVersion_IN == _duplicateVersion.RecId
                   && newRule.Name == curRule.Name
            join RecId from newRuleDir
                where newRuleDir.TaxReportHierarchySetOffRule_IN == newRule.RecId
                   && newRuleDir.TaxDirection == curRuleDir.TaxDirection
            join TaxReportHrchyNodeCollection_IN, TaxReportHierarchyNode_IN from curCollectionDetail
                where curCollectionDetail.RecId == curRuleDetail.TaxReportHrchyNodeCollectionDetails_IN
            join TaxReportHierarchyNode_IN, Name from curCollection
                where curCollection.RecId == curCollectionDetail.TaxReportHrchyNodeCollection_IN
            join NodeId from curCollectionNode
                where curCollectionNode.TaxReportHierarchyVersion_IN == hierarchyVersion.RecId
                   && curCollectionNode.RecId == curCollection.TaxReportHierarchyNode_IN
            join RecId from newCollectionNode
                where newCollectionNode.TaxReportHierarchyVersion_IN == _duplicateVersion.RecId
                   && newCollectionNode.NodeId == curCollectionNode.NodeId
            join RecId from newCollection
                where newCollection.TaxReportHierarchyNode_IN == newCollectionNode.RecId
                   && newCollection.Name == curCollection.Name
            join NodeId from curCollectionDetailNode
                where curCollectionDetailNode.TaxReportHierarchyVersion_IN == hierarchyVersion.RecId
                   && curCollectionDetailNode.RecId == curCollectionDetail.TaxReportHierarchyNode_IN
            join RecId from newCollectionDetailNode
                where newCollectionDetailNode.TaxReportHierarchyVersion_IN == _duplicateVersion.RecId
                   && newCollectionDetailNode.NodeId == curCollectionDetailNode.NodeId
            join RecId from newCollectionDetail
                where newCollectionDetail.TaxReportHrchyNodeCollection_IN == newCollection.RecId
                   && newCollectionDetail.TaxReportHierarchyNode_IN == newCollectionDetailNode.RecId
        {
            newRuleDetail.data(curRuleDetail);
            newRuleDetail.TaxReportHierarchySetOffRuleDirection_IN = newRuleDir.RecId;
            newRuleDetail.TaxReportHrchyNodeCollectionDetails_IN = newCollectionDetail.RecId;

            insertList.add(newRuleDetail);
        }

        insertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initalizes the instance of <c>TaxReportHierarchyDuplicator_IN</c> for given parameter.
    /// </summary>
    /// <param name="_hierarchyVersion">
    /// An instance of <c>TaxReportHierarchyVersion_IN</c>.
    /// </param>
    protected void init(TaxReportHierarchyVersion_IN _hierarchyVersion)
    {
        hierarchyVersion = _hierarchyVersion;
        hierarchy = TaxReportHierarchy_IN::find(_hierarchyVersion.TaxReportHierarchy_IN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static TaxReportHierarchyDuplicator_IN construct()
    {
        return new TaxReportHierarchyDuplicator_IN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the specified hierarchy version.
    /// </summary>
    /// <param name="_hierarchyVersion">
    /// The <c>TaxReportHierarchyVersion_IN</c> record of the original hierarchy version.
    /// </param>
    /// <returns>
    /// The <c>TaxReportHierarchyVersion_IN</c> record of the duplicate hierarchy version.
    /// </returns>
    /// <remarks>
    /// The method is run on server.
    /// </remarks>
    public static TaxReportHierarchyVersion_IN copyVersion(TaxReportHierarchyVersion_IN _hierarchyVersion)
    {
        TaxReportHierarchyDuplicator_IN     duplicator;
        TaxReportHierarchyVersion_IN        duplicateVersion;

        duplicator = TaxReportHierarchyDuplicator_IN::newDuplicator(_hierarchyVersion);
        duplicateVersion = duplicator.duplicate();

        return duplicateVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDuplicator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <c>TaxReportHierarchyDuplicator</c> object
    /// with the specified hierarchy version.
    /// </summary>
    /// <param name="_hierarchyVersion">
    /// The <c>TaxReportHierarchyVersion_IN</c> record.
    /// </param>
    /// <returns>
    /// The new instance of <c>TaxReportHierarchyDuplicator</c> object.
    /// </returns>
    public static TaxReportHierarchyDuplicator_IN newDuplicator(
        TaxReportHierarchyVersion_IN _hierarchyVersion)
    {
        TaxReportHierarchyDuplicator_IN     duplicator;

        duplicator = TaxReportHierarchyDuplicator_IN::construct();
        duplicator.init(_hierarchyVersion);

        return duplicator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDuplicateNodes</Name>
				<Source><![CDATA[
    private void updateDuplicateNodes(TaxReportHierarchyVersion_IN _duplicateVersion)
    {
        Query q = new Query();
        QueryBuildDataSource qbd = q.addDataSource(tableNum(TaxReportHierarchyNode_IN));
        qbd.addSortField(fieldNum(TaxReportHierarchyNode_IN, NodeId), SortOrder::Ascending);
        qbd.addRange(fieldNum(TaxReportHierarchyNode_IN, TaxReportHierarchyVersion_IN)).value(queryValue(_duplicateVersion.RecId));
        QueryRun qr = new QueryRun(q);

        ttsbegin;
        while (qr.next())
        {
            TaxReportHierarchyNode_IN duplicateNode = qr.get(tableNum(TaxReportHierarchyNode_IN));

            duplicateNode.selectForUpdate(true);
            if (duplicateNode.NodeType == TaxReportHierarchyNodeType_IN::Root)
            {
                duplicateNode.ComboDisplayValue = int642str(duplicateNode.RecId);
            }
            else
            {
                TaxReportHierarchyNode_IN parentNode = TaxReportHierarchyNode_IN::findbyHierarchyAndNodeId(_duplicateVersion.RecId, duplicateNode.ParentId);

                RefRecId runtimeRecId = this.getGTERuntimeRecIdFromHrchyVersion(_duplicateVersion, duplicateNode, parentNode);
                if (runtimeRecId)
                {
                    duplicateNode.GTERuntimeRecId = runtimeRecId;
                }

                duplicateNode.ComboDisplayValue = TaxReportHierarchyHelper_IN::getComboDisplayValue(parentNode.ComboDisplayValue, duplicateNode.DisplayValue);
                duplicateNode.ComboDisplayValueStr = TaxReportHierarchyHelper_IN::getComboDisplayValue(parentNode.ComboDisplayValueStr, duplicateNode.DisplayValue);
            }
            duplicateNode.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGTERuntimeRecIdFromHrchyVersion</Name>
				<Source><![CDATA[
    private RefRecId getGTERuntimeRecIdFromHrchyVersion(
        TaxReportHierarchyVersion_IN _version,
        TaxReportHierarchyNode_IN _node,
        TaxReportHierarchyNode_IN _parentNode = null)
    {
        switch(_node.RefClassId)
        {
            case classNum(TaxReportHrchyGTETaxTypeNode_IN):
                TaxRuntimeTaxType runtimeTaxType;
                TaxRuntimeTaxTypeVersion runtimeTaxTypeVersion;
                TaxRuntimeDocTaxTypeVersion runtimeDocTaxTypeVersion;
                select firstonly RecId from runtimeTaxType
                    where runtimeTaxType.Name == _node.DisplayValue
                    exists join runtimeTaxTypeVersion
                        where runtimeTaxTypeVersion.TaxRuntimeTaxType == runtimeTaxType.RecId
                            && runtimeTaxTypeVersion.DefContextVersion == _version.DefContextVersion
                    exists join runtimeDocTaxTypeVersion
                        where runtimeDocTaxTypeVersion.TaxRuntimeTaxTypeVersion == runtimeTaxTypeVersion.RecId
                            && runtimeDocTaxTypeVersion.DocContextVersion == _version.DocContextVersion;

                return runtimeTaxType.RecId;

            case classNum(TaxReportHrchyGTETaxComponentNode_IN):
                if (runtimeRecIdForComponentNodeCache.exists(_node.NodeId))
                {
                    return runtimeRecIdForComponentNodeCache.lookup(_node.NodeId);
                }
                else
                {
                    TaxRuntimeComponent runtimeTaxComponent;
                    TaxRuntimeComponentVersion runtimeTaxComponentVersion;
                    TaxRuntimeDocComponentVersion runtimeDocTaxComponentVersion;
                    select firstonly RecId from runtimeTaxComponent
                        where runtimeTaxComponent.Name == _node.DisplayValue
                        exists join runtimeTaxComponentVersion
                            where runtimeTaxComponentVersion.TaxRuntimeComponent == runtimeTaxComponent.RecId
                                && runtimeTaxComponentVersion.DefContextVersion == _version.DefContextVersion
                        exists join runtimeDocTaxComponentVersion
                            where runtimeDocTaxComponentVersion.TaxRuntimeComponentVersion == runtimeTaxComponentVersion.RecId
                                && runtimeDocTaxComponentVersion.DocContextVersion == _version.DocContextVersion;

                    runtimeRecIdForComponentNodeCache.insert(_node.NodeId, runtimeTaxComponent.RecId);
                    return runtimeTaxComponent.RecId;
                }

            case classNum(TaxReportHrchyGTEReferenceTableNode_IN):
            case classNum(TaxReportHrchyGTEReferenceEnumNode_IN):
            case classNum(TaxReportHrchyGTEReferenceNode_IN):
                // GTE reference node has the same <c>GTERuntimeRecId</c> value as its ancestor tax component node.
                if (runtimeRecIdForComponentNodeCache.exists(_node.ParentId))
                {
                    return runtimeRecIdForComponentNodeCache.lookup(_node.ParentId);
                }
                else
                {
                    TaxReportHierarchyNode_IN parentNode;
                    if (_parentNode)
                    {
                        parentNode = _parentNode;
                    }
                    else
                    {
                        parentNode = TaxReportHierarchyNode_IN::findbyHierarchyAndNodeId(_version.RecId, _node.ParentId);
                    }

                    RefRecId runtimeRecId = this.getGTERuntimeRecIdFromHrchyVersion(_version, parentNode);
                    runtimeRecIdForComponentNodeCache.insert(_node.ParentId, runtimeRecId);
                    return runtimeRecId;
                }

            default:
                return 0;

        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>