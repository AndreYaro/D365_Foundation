<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductNumberBuilderVariant</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResProductNumberBuilderVariant
{
    container           dimensions;
    EcoResProductNumber productNumber;
    char                separator;
    LanguageId          languageId;
    EcoResProductMaster productMaster;

    Map                 dimensionValueMap;
    Map                 dimensionValueNameMap;
    container           dimValue;
    int                 nameLen;

    private List dimensionFieldIds;

    private EcoResInstrumentationLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addNameIfExists</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a string from dimensionValueNameMap if it exists
    /// </summary>
    /// <param name="_inventDimFieldId">
    ///    Key used to lookup in dimensionValueNameMap
    /// </param>
    /// <param name="_result">
    ///    String that gets a string appended if it exists
    /// </param>
    /// <returns>
    ///    A string that is either unchanged or got something appended
    /// </returns>
    private str addNameIfExists(FieldId _inventDimFieldId, str _result)
    {
        if (dimensionValueNameMap.exists(_inventDimFieldId))
        {
            _result = this.addString(_result, dimensionValueNameMap.lookup(_inventDimFieldId));
        }
        return _result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addString</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a separator and a string to an existing string.
    ///    In case the existing string is empty the separator is not added
    /// </summary>
    /// <param name="_result">
    ///    The resulting string
    /// </param>
    /// <param name="_stringToAdd">
    ///    The string to add to the existing string
    /// </param>
    /// <returns>
    ///    The existing string with a separator and _stringToAdd appended
    /// </returns>
    private str addString(str _result, str _stringToAdd)
    {
        if (_stringToAdd != '')
        {
            _result = _result ? _result + separator + _stringToAdd : _stringToAdd;
        }
        return _result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildConcatNameString</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds a string of product name and product dimension values
    /// </summary>
    /// <returns>
    ///    A string containing product name and the dimension value names
    /// </returns>
    private EcoResProductDisplayProductNumber buildConcatNameString()
    {
        EcoResProductDisplayProductNumber result;

        this.reduceDimensionValueLengths();

        var productDims = this.getEnumeratorForEnabledOrderedProductDimensions();
        while (productDims.moveNext())
        {
            result = this.addNameIfExists(productDims.currentInventDimFieldId(), result);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDisplayProductName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the <c>EcoResProductDisplayProductName</c> value for distinct product variants
    /// </summary>
    /// <returns>
    ///    The <c>EcoResProductDisplayProductName</c> value.
    /// </returns>
    public EcoResProductName buildDisplayProductName()
    {
        EcoResProductMaster currProductMaster = this.parmProductMaster();

        this.populateDimensionValueStrings();
        
        if (currProductMaster)
        {
            EcoResNomenclatureRecId nomenclatureNameRecId = currProductMaster.nomenclature(EcoResNomenclatureRole::Name);
            if (nomenclatureNameRecId)
            {
                return this.buildDisplayProductNumberFromNomenclature(nomenclatureNameRecId);
            }
        }

        this.validateForName();
        
        return currProductMaster.displayProductName() ? currProductMaster.displayProductName() : this.buildConcatNameString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDisplayProductNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the <c>EcoResProductDisplayProductNumber</c> value for distinct product variants
    /// </summary>
    /// <returns>
    ///    The <c>EcoResProductDisplayProductNumber</c> value.
    /// </returns>
    public EcoResProductDisplayProductNumber buildDisplayProductNumber()
    {
        this.populateDimensionValueStrings();

        if (this.parmProductMaster())
        {
            EcoResNomenclatureRecId nomenclatureRecId = this.parmProductMaster().nomenclature(EcoResNomenclatureRole::Id);
            if (nomenclatureRecId)
            {
                return this.buildDisplayProductNumberFromNomenclature(nomenclatureRecId);
            }
        }

        return this.buildDisplayProductNumberFixedFormat();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDisplayProductNumberFixedFormat</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the <c>EcoResProductDisplayProductNumber</c> value for distinct product variants in a fixed number format.
    /// </summary>
    /// <returns>
    ///    The <c>EcoResProductDisplayProductNumber</c> value.
    /// </returns>
    protected EcoResProductDisplayProductNumber buildDisplayProductNumberFixedFormat()
    {
        this.validateForNumber();

        List productDimensionFieldIds = InventDim::dimProductDimensionEnabledFieldList();
        Enumerator productDimensionsEnumerator = productDimensionFieldIds.getEnumerator();

        List dimensionValues = new List(Types::String);

        while(productDimensionsEnumerator.moveNext())
        {
            dimensionValues.addEnd(this.dimensionValue(productDimensionsEnumerator.current()));
        }

        return this.formatProductDimensionValues(dimensionValues);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatProductDimensionValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats product dimension values into a string
    /// </summary>
    /// <param name = "_dimensionValues">Product dimension values.</param>
    /// <returns>String representation of product dimension values.</returns>
    protected str formatProductDimensionValues(List _dimensionValues)
    {
        str result = productNumber;

        Enumerator dimensionValuesEnumerator = _dimensionValues.getEnumerator();

        while (dimensionValuesEnumerator.moveNext())
        {
            result = strFmt('%1 %2 %3', result, separator, dimensionValuesEnumerator.current());
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDisplayProductNumberFromNomenclature</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the <c>EcoResProductDisplayProductNumber</c> value for distinct product variants based on a nomenclature.
    /// </summary>
    /// <returns>
    ///    The <c>EcoResProductDisplayProductNumber</c> value.
    /// </returns>
    protected EcoResProductDisplayProductNumber buildDisplayProductNumberFromNomenclature(EcoResNomenclatureRecId _nomenclatureRecId)
    {
        EcoResNomenclatureInput nomenclatureInput = EcoResNomenclatureInput::construct();
        nomenclatureInput.parmNomenclatureRecId(_nomenclatureRecId);
        nomenclatureInput.parmProductMaster(this.parmProductMaster());

        Enumerator InventDimensionEnumerator = this.getEnumeratorForEnabledOrderedProductDimensions();

        using (var activityContext = logger.variants().buildNameFromNomenclature())
        {
            while (InventDimensionEnumerator.moveNext())
            {
                InventProductDimension productDimension = InventDimensionEnumerator.current();

                nomenclatureInput.parmDimensionValue(productDimension, this.dimensionValue(productDimension.parmInventDimFieldId()));
                nomenclatureInput.parmDimensionValueName(productDimension, this.dimensionValueName(productDimension.parmInventDimFieldId()));
            }
        }

        return EcoResNomenclature::buildFromNomenclatureInput(nomenclatureInput);
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderedProductDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of explicitly ordered product dimensions.
    /// </summary>
    /// <returns>An list of explicitly ordered product dimensions.</returns>
    private List orderedProductDimensions()
    {
        if (!dimensionFieldIds)
        {
            dimensionFieldIds = this.initializeOrderedProductDimensions();
        }

        return dimensionFieldIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeOrderedProductDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a list of explicitly ordered product dimensions.
    /// </summary>
    /// <returns>An list of explicitly ordered product dimensions.</returns>
    protected List initializeOrderedProductDimensions()
    {      
        #InventDimDevelop        
        List result = new List(Types::Integer);

        result.addEnd(fieldNum(InventDim, ConfigId));
        result.addEnd(fieldNum(InventDim, InventSizeId));
        result.addEnd(fieldNum(InventDim, InventColorId));
        result.addEnd(fieldNum(InventDim, InventStyleId));
        if (isConfigurationkeyEnabled(configurationKeyNum(EcoResProductVersion)))
        {
            result.addEnd(fieldNum(InventDim, InventVersionId));      
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumeratorForEnabledOrderedProductDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an enumerator for enabled and explicitly ordered product dimensions.
    /// </summary>
    /// <returns>An enumerator for enabled and explicitly ordered product dimensions.</returns>
    private InventDimensionEnumerator getEnumeratorForEnabledOrderedProductDimensions()
    {
        return InventProductDimension::getEnumeratorForEnabledOrderedDimensions(this.orderedProductDimensions());
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Return a string from dimensionValueMap if it exists
    /// </summary>
    /// <param name="_inventDimFieldId">
    ///    Key used to lookup in dimensionValueMap
    /// </param>
    /// <returns>
    ///    the string identified by the key, empty string if no element
    /// </returns>
    private str dimensionValue(FieldId _inventDimFieldId)
    {
        str result;

        if (dimensionValueMap.exists(_inventDimFieldId))
        {
            result = dimensionValueMap.lookup(_inventDimFieldId);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionValueName</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Return a string from dimensionValueNameMap if it exists
    /// </summary>
    /// <param name="_inventDimFieldId">
    ///    Key used to lookup in dimensionValueNameMap
    /// </param>
    /// <returns>
    ///    the string identified by the key, empty string if no element
    /// </returns>
    private str dimensionValueName(FieldId _inventDimFieldId)
    {
        str result;

        if (dimensionValueNameMap.exists(_inventDimFieldId))
        {
            result = dimensionValueNameMap.lookup(_inventDimFieldId);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doRemoveShortElements</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes dimension values from the container if they are shorter than the average length
    ///    available provided it is necessary
    /// </summary>
    /// <returns>
    ///    true if it is necessary to shorten dimension values, false otherwise
    /// </returns>
    private boolean doRemoveShortElements()
    {
        boolean removedElements = true;
        boolean doRemoveShortElements = false;

        while (removedElements)
        {
            // Adjust for separator between name & values
            int maxLenForAll = nameLen-(conLen(dimValue)-1)*strLen(separator);

            if (this.getSummedlength() > maxLenForAll)
            {
                if (!doRemoveShortElements)
                {
                    doRemoveShortElements   = true;
                }

                int maxElementLen = maxLenForAll div conLen(dimValue);

                //Remove the elements with length below average
                removedElements = this.removeElementsBelowMaxElementLen(maxElementLen);
            }
            else
            {
                removedElements = false;
            }
        }
        return doRemoveShortElements;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSummedlength</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sums the length of the strings that are to be part of the display name
    /// </summary>
    /// <returns>
    ///    The summed length of the strings in dimValue
    /// </returns>
    private int getSummedlength()
    {
        int valueIndex;
        int valueType;
        int valueLength;
        str value;
        int sumLen;

        for (valueIndex=conLen(dimValue); valueIndex>0; valueIndex--)
        {
            [valueType, valueLength, value] = conPeek(dimValue, valueIndex);
            sumLen += valueLength;
        }

        return sumLen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lengthOfName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Find the max length of <c>EcoResProductDisplayProductNumber</c>
    /// </summary>
    /// <returns>
    ///    Field size of <c>DisplayProductNumber</c> in the table <c>EcoResProduct</c>
    /// </returns>
    private int lengthOfName()
    {
        SysDictField sysDictField = new sysDictField(tablenum(EcoResProduct), fieldNum(EcoResProduct, DisplayProductNumber));

        return sysDictField.fieldSize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        logger = EcoResInstrumentationLogger::createLogger(classStr(EcoResProductNumberBuilderVariant));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimensions</Name>
				<Source><![CDATA[
    public container parmDimensions(container _dimensions = dimensions)
    {
        dimensions = _dimensions;

        return dimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLanguageId</Name>
				<Source><![CDATA[
    public LanguageId parmLanguageId(LanguageId _languageId = languageId)
    {
        languageId = _languageId;

        return languageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductNumber</Name>
				<Source><![CDATA[
    public EcoResProductNumber parmProductNumber(EcoResProductNumber _productNumber = productNumber)
    {
        productNumber = _productNumber;

        return productNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSeparator</Name>
				<Source><![CDATA[
    public char parmSeparator(char _separator = separator)
    {
        separator = _separator;

        return separator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductMaster</Name>
				<Source><![CDATA[
    public EcoResProductMaster parmProductMaster(EcoResProductMaster _productMaster = productMaster)
    {
        productMaster = _productMaster;

        return productMaster;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDimensionValueStrings</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds and places product dimension values in dimensionValueMap and dimensionValueNameMap
    /// </summary>
    protected void populateDimensionValueStrings()
    {
        int                                 dimensionIndex;
        RefRecId                            productDimensionAttributeRecId;
        RefRecId                            dimensionTableRecId;
        Name                                dimValueTranslation;
        Name                                dimValueNameTranslation;

        dimensionValueMap           = new Map(Types::Integer,Types::String);
        dimensionValueNameMap       = new Map(Types::Integer,Types::String);
        RefRecId productMasterRecId = EcoResProduct::findByProductNumber(productNumber).RecId;

        EcoResProductDimensionDataModel productDimensionDataModel = EcoResProductDimensionDataModel::getInstance();

        // iterate product dimensions
        for (dimensionIndex = conLen(dimensions); dimensionIndex > 0; --dimensionIndex)
        {
            [productDimensionAttributeRecId, dimensionTableRecId, dimValueTranslation, dimValueNameTranslation] = conPeek(dimensions, dimensionIndex);

            EcoResProductDimensionAttribute ecoResProductDimensionAttribute = EcoResProductDimensionAttribute::find(productDimensionAttributeRecId);

            // get dimension values based on product attribute
            if (!dimValueTranslation)
            {
                dimValueTranslation = ecoResProductDimensionAttribute.getDimensionTableValue(dimensionTableRecId);
            }

            if (!dimValueNameTranslation)
            {
                dimValueNameTranslation = EcoResProductNumberBuilderVariant::getProductMasterDimValueNameTranslation(productMasterRecId, productDimensionAttributeRecId, dimensionTableRecId, languageId, ecoResProductDimensionAttribute);

                if (!dimValueNameTranslation)
                {
                    dimValueNameTranslation = dimValueTranslation;
                }
            }

            FieldId dimFieldId = productDimensionDataModel.dimensionTableId2InventDimFieldId(ecoResProductDimensionAttribute.getDimensionTableId());
            dimensionValueMap.insert(dimFieldId, dimValueTranslation);
            dimensionValueNameMap.insert(dimFieldId, dimValueNameTranslation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductMasterDimValueNameTranslation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the translated name of a product.
    /// </summary>
    /// <param name = "_productMasterRecId"> 
    ///     The ID of a product Master for which a name is retrieved.
    /// </param>
    /// <param name = "_productDimensionAttributeRecId">
    ///     The ID of a record in the <c>EcoResProductDimensionAttribute</c> table.
    /// </param>
    /// <param name = "_dimensionTableRecId">
    ///     the ID of a record that stores the dimension value.
    /// </param>
    /// <param name = "_languageId">
    ///     The ID of a language in which a name is retrieved.
    /// </param>
    /// <param name = "_ecoResProductDimensionAttribute">
    ///     The record in the <c>EcoResProductDimensionAttribute</c> table for <c>_productDimensionAttributeRecId</c>
    /// </param>
    /// <returns>
    ///     A translated name of a product.
    /// </returns>
    /// <remarks>
    ///    If a name in the language specified by the <c>_languageId</c> parameter is not found then a name in
    ///    the system language is returned.
    /// </remarks>
    internal static Name getProductMasterDimValueNameTranslation(RefRecId _productMasterRecId, RefRecId _productDimensionAttributeRecId, RefRecId _dimensionTableRecId,
        LanguageId _languageId = null, EcoResProductDimensionAttribute _ecoResProductDimensionAttribute = null)
    {
        if (!_ecoResProductDimensionAttribute)
        {
            _ecoResProductDimensionAttribute = EcoResProductDimensionAttribute::find(_productDimensionAttributeRecId);
        }

        SysDictTable sysDictTable = new SysDictTable(_ecoResProductDimensionAttribute.getMasterDimensionTableId());
        EcoResProductMasterDimensionValue productMasterDimensionValue = sysDictTable.makeRecord();
        RefRecId productMasterDimensionRecId = productMasterDimensionValue.lookupProductMasterDimensionValue(_productMasterRecId, _productDimensionAttributeRecId, _dimensionTableRecId);

        return EcoResProductMasterDimValueTranslation::getNameOrDefaultName(productMasterDimensionRecId, _languageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reduceDimensionValueLengths</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shortens dimension values that are concatenated into DisplayProductName so that the string length of
    ///    DisplayProductName does not go beyond the length of <c>EcoResProductDisplayProductNumber</c>
    /// </summary>
    private void reduceDimensionValueLengths()
    {
        MapEnumerator   me = dimensionValueNameMap.getEnumerator();

        nameLen = this.lengthOfName();

        while (me.moveNext())
        {
            dimValue   +=  [[me.currentKey(), strLen(me.currentValue()), me.currentValue()]];
        }

        if (this.doRemoveshortElements())
        {
            this.reduceSize();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reduceSize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reduces the size of relevant string that are concatenated into DisplayProductName
    /// </summary>
    /// <remarks>
    ///     dimValue contains the strings to reduce and based on that the strings in dimensionValueNameMap are reduced
    /// </remarks>
    private void reduceSize()
    {
        int     valueType;
        int     valueLength;
        str     value;
        boolean removedElements = false;

        int valueIndex = conLen(dimValue);

        int maxElementLen = (nameLen - (valueIndex - 1)*strLen(separator)) div valueIndex;
        int reminder = (nameLen - (valueIndex - 1)*strLen(separator)) - maxElementLen * valueIndex;

        for (valueIndex=conLen(dimValue); valueIndex>0; valueIndex--)
        {
            // Allow the last values to be one bigger, to compensate for rounding
            if (valueIndex == reminder)
            {
                maxElementLen += 1;
            }

            [valueType, valueLength, value] = conPeek(dimValue, valueIndex);
            value = strDel(value, maxElementLen+1, valueLength-maxElementLen);

            // Replace pair in dimensionValueNameMap
            dimensionValueNameMap.remove(valueType);
            dimensionValueNameMap.insert(valueType,value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeElementsBelowMaxElementLen</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes from dimValue the elements that are shorter or equal to _maxElementLen
    /// </summary>
    /// <param name="_maxElementLen">
    ///    The length below or at which strings will be removed from dimValue
    /// </param>
    /// <returns>
    ///    true if elements were removed from dimValue, false otherwise
    /// </returns>
    /// <remarks>
    ///    nameLen gets reduced with the length of the removed elements and the separator
    /// </remarks>
    private boolean removeElementsBelowMaxElementLen(int _maxElementLen)
    {
        int     valueType;
        int     valueLength;
        str     value;
        boolean removedElements = false;

        int valueIndex = conLen(dimValue);
        while (valueIndex > 0)
        {
            [valueType, valueLength, value] = conPeek(dimValue, valueIndex);

            if (valueLength<=_maxElementLen)
            {
                // Remove the element and reduce the length available for the remaining elements
                nameLen -= valueLength + strLen(separator);
                dimValue = conDel(dimValue, valueIndex, 1);
                removedElements = true;
            }
            valueIndex--;
        }
        return removedElements;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether the <c>ProductNumber</c> value and product dimensions have been specified; if
    ///    not, an error message is displayed.
    /// </summary>
    protected void validate()
    {
        if (productNumber           == ''
            || conLen(dimensions)   == 0
            || separator            == '')
        {
            throw error (Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateForName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether the <c>ProductNumber</c> value, product dimensions, and separator have been specified;
    ///    if not, an error message is displayed.
    /// </summary>
    protected void validateForName()
    {
        if (productNumber           == ''
            || conLen(dimensions)   == 0
            || separator            == '')
        {
            throw error (Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateForNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether the <c>ProductNumber</c> value and product dimensions have been specified; if
    ///    not, an error message is displayed.
    /// </summary>
    protected void validateForNumber()
    {
        if (productNumber           == ''
            || conLen(dimensions)   == 0
            || separator            == '')
        {
            throw error (Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildFromProductNumberAndDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a <c>EcoResProductDisplayProductNumber</c> value.
    /// </summary>
    /// <param name="_ecoResProductNumber">
    ///    A <c>EcoResProductNumber</c> value.
    /// </param>
    /// <param name="_productDimensions">
    ///    A container that contains product dimension values.
    /// </param>
    /// <returns>
    ///    The created instance of <c>EcoResProductDisplayProductNumber</c> string.
    /// </returns>
    public static EcoResProductDisplayProductNumber buildFromProductNumberAndDimensions(
                                                            EcoResProductNumber _ecoResProductNumber,
                                                            container           _productDimensions)
    {
        EcoResProductNumberBuilderVariant ecoResProductNumberBuilderVariant = EcoResProductNumberBuilderVariant::newFromProductNumberAndDimensions(
                                                                                                                                  _ecoResProductNumber,
                                                                                                                                  _productDimensions);
        return ecoResProductNumberBuilderVariant.buildDisplayProductNumber();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildFromProductMasterAndDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a <c>EcoResProductDisplayProductNumber</c> value.
    /// </summary>
    /// <param name="_ecoResProductMaster">
    ///    A <c>EcoResProductMaster</c> record.
    /// </param>
    /// <param name="_productDimensions">
    ///    A container that contains product dimension values.
    /// </param>
    /// <returns>
    ///    The created instance of <c>EcoResProductDisplayProductNumber</c> string.
    /// </returns>
    public static EcoResProductDisplayProductNumber buildFromProductMasterAndDimensions(
                                                            EcoResProductMaster _ecoResProductMaster,
                                                            container           _productDimensions)
    {
        EcoResProductNumberBuilderVariant ecoResProductNumberBuilderVariant = EcoResProductNumberBuilderVariant::newFromProductMasterAndDimensions(
                                                                                                                                  _ecoResProductMaster,
                                                                                                                                  _productDimensions);
        return ecoResProductNumberBuilderVariant.buildDisplayProductNumber();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildNameFromProductMasterAndDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a <c>EcoResProductProductName</c> value.
    /// </summary>
    /// <param name="_ecoResProductMaster">
    ///    A <c>EcoResProductMaster</c> record.
    /// </param>
    /// <param name="_productDimensions">
    ///    A container that contains product dimension values.
    /// </param>
    /// <returns>
    ///    The created instance of <c>EcoResProductProductName</c> string.
    /// </returns>
    public static EcoResProductName buildNameFromProductMasterAndDimensions(EcoResProductMaster _ecoResProductMaster,
                                                                            container           _productDimensions)
    {
        EcoResProductNumberBuilderVariant ecoResProductNameBuilderVariant = EcoResProductNumberBuilderVariant::newFromProductMasterAndDimensions(
                                                                                                                                  _ecoResProductMaster,
                                                                                                                                  _productDimensions);
        return ecoResProductNameBuilderVariant.buildDisplayProductName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildNameFromProductNumberAndDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a <c>EcoResProductDisplayProductName</c> value.
    /// </summary>
    /// <param name="_ecoResProductNumber">
    ///    A <c>EcoResProductNumber</c> value.
    /// </param>
    /// <param name="_languageId">
    ///    Id of the language in which to get the dimension value names
    /// </param>
    /// <param name="_productDimensions">
    ///    A container that contains product dimension values.
    /// </param>
    /// <returns>
    ///    The created instance of <c>EcoResProductDisplayProductName</c> string.
    /// </returns>
    public static EcoResProductDisplayProductNumber buildNameFromProductNumberAndDimensions(
                                                            EcoResProductNumber _ecoResProductNumber,
                                                            LanguageId          _languageId,
                                                            container           _productDimensions)
    {
        EcoResProductNumberBuilderVariant ecoResProductNumberBuilderVariant = EcoResProductNumberBuilderVariant::newNameFromProductNumberAndDimensions(
                                                                                                                                  _ecoResProductNumber,
                                                                                                                                  _languageId,
                                                                                                                                  _productDimensions);
        return ecoResProductNumberBuilderVariant.buildDisplayProductName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EcoResProductNumberBuilderVariant construct()
    {
        return new EcoResProductNumberBuilderVariant();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromProductNumberAndDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>EcoResProductNumberBuilderVariant</c> class.
    /// </summary>
    /// <param name="_ecoResProductNumber">
    ///    A <c>EcoResProductNumber</c> value.
    /// </param>
    /// <param name="_productDimensions">
    ///    The container that contains product dimension values.
    /// </param>
    /// <returns>
    ///    The new instance instance of the <c>EcoResProductNumberBuilderVariant</c> class.
    /// </returns>
    public static EcoResProductNumberBuilderVariant newFromProductNumberAndDimensions(
                                                            EcoResProductNumber _ecoResProductNumber,
                                                            container           _productDimensions)
    {
        EcoResProductNumberBuilderVariant ecoResProductNumberBuilderVariant = EcoResProductNumberBuilderVariant::construct();

        ecoResProductNumberBuilderVariant.parmProductNumber(_ecoResProductNumber);
        ecoResProductNumberBuilderVariant.parmDimensions(_productDimensions);
        ecoResProductNumberBuilderVariant.parmSeparator(':');

        return ecoResProductNumberBuilderVariant;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromProductMasterAndDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>EcoResProductNumberBuilderVariant</c> class.
    /// </summary>
    /// <param name="_ecoResProductMaster">
    ///    A <c>EcoResProductMaster</c> record that the number should be build for.
    /// </param>
    /// <param name="_productDimensions">
    ///    The container that contains product dimension values.
    /// </param>
    /// <returns>
    ///    The new instance instance of the <c>EcoResProductNumberBuilderVariant</c> class.
    /// </returns>
    public static EcoResProductNumberBuilderVariant newFromProductMasterAndDimensions(
                                                            EcoResProductMaster _ecoResProductMaster,
                                                            container           _productDimensions)
    {
        EcoResProductNumberBuilderVariant ecoResProductNumberBuilderVariant = EcoResProductNumberBuilderVariant::newFromProductNumberAndDimensions(_ecoResProductMaster.productNumber(), _productDimensions);
        ecoResProductNumberBuilderVariant.parmProductMaster(_ecoResProductMaster);

        return ecoResProductNumberBuilderVariant;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newNameFromProductNumberAndDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>EcoResProductNumberBuilderVariant</c> class for building a product variant name.
    /// </summary>
    /// <param name="_ecoResProductNumber">
    ///    A <c>EcoResProductNumber</c> value.
    /// </param>
    /// <param name="_languageId">
    ///    Id of the language in which to get the dimension values
    /// </param>
    /// <param name="_productDimensions">
    ///    The container that contains product dimension values.
    /// </param>
    /// <returns>
    ///    The new instance instance of the <c>EcoResProductNumberBuilderVariant</c> class.
    /// </returns>
    public static EcoResProductNumberBuilderVariant newNameFromProductNumberAndDimensions(
                                                            EcoResProductNumber _ecoResProductNumber,                                                       
                                                            LanguageId          _languageId,
                                                            container           _productDimensions)
    {
        EcoResProductNumberBuilderVariant ecoResProductNumberBuilderVariant = EcoResProductNumberBuilderVariant::construct();

        ecoResProductNumberBuilderVariant.parmProductNumber(_ecoResProductNumber);
        ecoResProductNumberBuilderVariant.parmDimensions(_productDimensions);
        ecoResProductNumberBuilderVariant.parmSeparator(' ');
        ecoResProductNumberBuilderVariant.parmLanguageId(_languageId);

        return ecoResProductNumberBuilderVariant;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>