<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustPostPaymJournalDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustPostPaymJournalDP</c> class provides data for the <c>CustPostPaymJournal</c>Microsoft
/// SQL Server Reporting Services reports.
/// </summary>
/// <remarks>
/// This is the report data provider class for the customer-posted payment journal SQL Server Reporting
/// Services (SSRS) report
/// </remarks>
[SRSReportQueryAttribute(queryStr(CustPostPaymJournal))]
class CustPostPaymJournalDP extends SrsReportDataProviderPreProcessTempDB
{
    private CustPostPaymJournalTmp custPostPaymJournalTmp;
    private LedgerJournalTable ledgerJournalTable_1;
    private LedgerJournalTrans ledgerJournalTrans_1;
    private CustTrans tmpCustTrans;
    private CustSettlement custSettlement;
    private boolean isBillingClassEnabled;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCustPostPaymJournalTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data from the <c>CustPostPaymJournalTmp</c> Table
    /// </summary>
    /// <returns>
    /// The data from the <c>CustPostPaymJournalTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tablestr(CustPostPaymJournalTmp))]
    public CustPostPaymJournalTmp getCustPostPaymJournalTmp()
    {
        select custPostPaymJournalTmp;
        return custPostPaymJournalTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustPostPaymJournalTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the temporary table.
    /// </summary>
    /// <param name="_printDetails">
    /// A boolean flag that indicates whether the line details need to be inserted or not.
    /// </param>
    /// <param name="_custTransRecId">
    /// RecId of the payment record.
    /// </param>
    public void insertCustPostPaymJournalTmp(boolean _printDetails = false, RecId _custTransRecId = 0)
    {
        // write the relevant field data to the temporary data store
        custPostPaymJournalTmp.JournalNum = ledgerJournalTable_1.JournalNum;
        custPostPaymJournalTmp.Name = ledgerJournalTable_1.Name;
        custPostPaymJournalTmp.AccountNum = ledgerJournalTrans_1.parmAccount();
        custPostPaymJournalTmp.AccountName = ledgerJournalTrans_1.accountName();  //  REVIEW (TJVass): this appears to be redundant data
        custPostPaymJournalTmp.Txt = ledgerJournalTrans_1.Txt;
        custPostPaymJournalTmp.Date = ledgerJournalTrans_1.TransDate;
        custPostPaymJournalTmp.Voucher = ledgerJournalTrans_1.Voucher;
        custPostPaymJournalTmp.PaymReference = ledgerJournalTrans_1.PaymReference;
        custPostPaymJournalTmp.AmountCurDebit = ledgerJournalTrans_1.AmountCurDebit;
        custPostPaymJournalTmp.AmountCurCredit = ledgerJournalTrans_1.AmountCurCredit;
        custPostPaymJournalTmp.CurrencyCode = ledgerJournalTrans_1.CurrencyCode;
        custPostPaymJournalTmp.CustTransRecId = _custTransRecId;

        if (_printDetails)
        {
            custPostPaymJournalTmp.InvoiceId = tmpCustTrans.Invoice;
            custPostPaymJournalTmp.TransDate = tmpCustTrans.TransDate;
            custPostPaymJournalTmp.CustCurrencyCode = tmpCustTrans.CurrencyCode;
            custPostPaymJournalTmp.AmountCur = tmpCustTrans.AmountCur;
            custPostPaymJournalTmp.SettleAmountCur = this.settleAmountCur();
            custPostPaymJournalTmp.UtilizedCashDisc = -1 * custSettlement.UtilizedCashDisc;
            custPostPaymJournalTmp.RemainAmount = tmpCustTrans.remainAmountCur();
            custPostPaymJournalTmp.PaymSettleAmount = this.paymSettleAmountCur();
        }

        if (isBillingClassEnabled && tmpCustTrans.CustBillingClassification)
        {
            custPostPaymJournalTmp.BillingClassification = CustBillingClassification::find(tmpCustTrans.CustBillingClassification).BillingClassification;
        }

        custPostPaymJournalTmp.insert();
        custPostPaymJournalTmp.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymSettleAmountCur</Name>
				<Source><![CDATA[
    private Amount paymSettleAmountCur()
    {
        CustSettlement tmpCustSettlement;
        Amount paymSettleAmountCur;

        select firstonly crosscompany SettleAmountCur from tmpCustSettlement
            where tmpCustSettlement.OffsetRecid == custSettlement.TransRecId
                && tmpCustSettlement.TransRecId == custSettlement.OffsetRecid
                && tmpCustSettlement.SettlementGroup == custSettlement.SettlementGroup
                && tmpCustSettlement.OffsetCompany == tmpCustTrans.company();

        // No easy way to determine if settlement record is a reversal or not so going with the
        // assumption that Payment and Payment currency amount will always carry same sign
        paymSettleAmountCur = tmpCustSettlement.SettleAmountCur;

        if (this.settleAmountCur() > 0)
        {
            if (!(paymSettleAmountCur > 0))
            {
                paymSettleAmountCur = -paymSettleAmountCur;
            }
        }
        else
        {
            if (paymSettleAmountCur > 0)
            {
                paymSettleAmountCur = -paymSettleAmountCur;
            }
        }

        return paymSettleAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// This method provides the ability to write the report business logic. This method will be called by
    /// SQL Server Reporting Services (SSRS) at run time. The method should compute data and populate the
    /// data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        Query query = new Query(this.parmQuery());
        QueryRun queryRun;
        Set custTransRecIdMap = new Set(Types::Int64);
        boolean printDetails;
        RecId orgCustTransRecId;

        isBillingClassEnabled = CustParameters::isBillingClassificationEnabled();

        // execute the base AX query and process the result set
        queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            LedgerJournalTrans ledgerJournalTransPayment;

            ledgerJournalTable_1 = queryRun.get(ledgerJournalTable_1.TableId);
            ledgerJournalTrans_1 = queryRun.get(ledgerJournalTrans_1.TableId);
            printDetails = false;

            if (ledgerJournalTrans_1.isCompanyIntercompany())
            {
                ledgerJournalTransPayment = LedgerJournalTrans::findIntercompanyPayment(ledgerJournalTrans_1);
            }
            else
            {
                ledgerJournalTransPayment = ledgerJournalTrans_1;
            }

            changecompany(ledgerJournalTransPayment.Company)
            {
                DimensionAttributeValueCombination dimAttrValueCombo;
                CustTrans orgCustTrans;

                while select orgCustTrans
                    order by orgCustTrans.RecId
                    where orgCustTrans.Voucher == ledgerJournalTransPayment.Voucher
                        && orgCustTrans.TransDate == ledgerJournalTransPayment.TransDate
                        && orgCustTrans.TransType == LedgerTransType::Payment
                    join RecId from dimAttrValueCombo
                        where dimAttrValueCombo.RecId == ledgerJournalTransPayment.LedgerDimension
                            && dimAttrValueCombo.DisplayValue == orgCustTrans.AccountNum
                {
                    // Added check if the CustTrans.RecId exists in the set because of
                    // scenarios where multiple customer transaction exist with the same voucher number.
                    if (custTransRecIdMap.in(orgCustTrans.RecId))
                    {
                        // Already printed this customer transactions settle, continue
                        // to see it there additional customer transaction with same voucher
                        continue;
                    }
                    else
                    {
                        custTransRecIdMap.add(orgCustTrans.RecId);
                        orgCustTransRecId = orgCustTrans.RecId;

                        while select crosscompany custSettlement order by TransDate
                            where custSettlement.OffsetRecid == orgCustTrans.RecId
                                && custSettlement.OffsetAccountNum == orgCustTrans.AccountNum
                                && custSettlement.OffsetCompany == orgCustTrans.company()
                        {
                            tmpCustTrans = CustTrans::findByCompany(custSettlement.company(), custSettlement.TransRecId);
                            printDetails = true;
                            this.insertCustPostPaymJournalTmp(printDetails, orgCustTransRecId);
                        }

                        // found customer transaction for the voucher to can now break
                        break;
                    }
                }
            }

            if (!printDetails)
            {
                this.insertCustPostPaymJournalTmp(printDetails, orgCustTransRecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleAmountCur</Name>
				<Source><![CDATA[
    private Amount settleAmountCur()
    {
        return -1 * ((custSettlement.SettleAmountCur - custSettlement.UtilizedCashDisc) + custSettlement.PennyDiff);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalTrans</Name>
				<Source><![CDATA[
    protected LedgerJournalTrans parmLedgerJournalTrans()
    {
        return ledgerJournalTrans_1;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>