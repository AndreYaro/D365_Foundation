<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSCatchWeightTagEventRegistration</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Base class for registering all events related to catch weight tags.
/// </summary>
abstract internal class WHSCatchWeightTagEventRegistration
{
    private WHSCatchWeightTagRegistrationEvent registrationEvent;
    private WHSCatchWeightTag catchWeightTag;
    private InventTransId inventTransId;
    private WHSWorkLineRecID workLineRecId;
    private WHSContainerLineRecId containerLineRecId;

    private InventDim storageInventDim;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>instantiateFromTagRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an instance of <c>WHSCatchWeightTagEventRegistration</c>.
    /// </summary>
    /// <param name = "_registrationEvent">Registration event.</param>
    /// <returns>An instance of the <c>WHSCatchWeightTagEventRegistration</c>.</returns>
    [Hookable(false)]
    internal static WHSCatchWeightTagEventRegistration instantiateFromTagRegistration(WHSCatchWeightTagRegistrationEvent _registrationEvent)
    {
        var attribute = new WHSCatchWeightTagEventRegistrationFactoryAttribute(_registrationEvent);
        WHSCatchWeightTagEventRegistration instance = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(WHSCatchWeightTagEventRegistration), attribute) as WHSCatchWeightTagEventRegistration;

        if (instance)
        {
            instance.registrationEvent = _registrationEvent;
        }
        
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateFromInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an instance of <c>WHSCatchWeightTagEventRegistration</c> based on the inventory lot ID.
    /// </summary>
    /// <param name = "_inventTransId">Inventory lot ID.</param>
    /// <param name = "_itemId">Tag item ID.</param>
    /// <returns>An instance of the <c>WHSCatchWeightTagEventRegistration</c>.</returns>
    [Hookable(false)]
    internal static WHSCatchWeightTagEventRegistration instantiateFromInventTransId(InventTransId _inventTransId, ItemId _itemId)
    {
        if (!_inventTransId)
        {
            throw(error(Error::wrongUseOfFunction(funcName())));
        }

        WHSCatchWeightTagEventRegistration instance = WHSCatchWeightTagEventRegistration::instantiateFromTagRegistration(WHSCatchWeightTagEventRegistration::tagRegistrationEvent(_inventTransId, _itemId));
        instance.parmInventTransId(_inventTransId);
        
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTagRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>WHSCatchWeightTagRegistration</c> buffer with the default values.
    /// </summary>
    /// <param name="_catchWeightTag">
    /// <c>WHSCatchWeightTag</c> buffer.
    /// </param>
    /// <returns>
    /// An instance of <c>WHSCatchWeightTagRegistration</c> buffer.
    /// </returns>
    [Hookable(false)]
    internal WHSCatchWeightTagRegistration initTagRegistration(WHSCatchWeightTag _catchWeightTag)
    {
        WHSCatchWeightTagRegistration tagRegistration;

        tagRegistration.TagNumber                   = _catchWeightTag.TagNumber;
        tagRegistration.ItemId                      = _catchWeightTag.ItemId;
        tagRegistration.CapturedWeight              = _catchWeightTag.CapturedWeight;
        tagRegistration.ProductDimensionInventDimId = _catchWeightTag.ProductDimensionInventDimId;
        tagRegistration.InventDimId                 = _catchWeightTag.InventDimId;
        tagRegistration.RegistrationEvent           = registrationEvent;

        return tagRegistration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLastRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an instance of the <c>WHSCatchWeightTagLastRegistration</c> buffer.
    /// </summary>
    /// <param name = "_tagNumber">Tag number to identify the last registration details.</param>
    /// <returns>An instance of the <c>WHSCatchWeightTagLastRegistration</c> buffer.</returns>
    [Hookable(false)]
    internal WHSCatchWeightTagLastRegistration initLastRegistration(WHSCatchWeightTagNumber _tagNumber)
    {
        WHSCatchWeightTagLastRegistration lastRegistration = WHSCatchWeightTagLastRegistration::find(_tagNumber, true);

        lastRegistration.TagNumber = _tagNumber;
        lastRegistration.RegistrationEvent = registrationEvent;
        lastRegistration.InventTransId = this.parmInventTransId();
        lastRegistration.WorkLine = this.parmWorkLineRecId();
        lastRegistration.ContainerLine = this.parmContainerLineRecId();

        return lastRegistration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers catch weight tag event.
    /// </summary>
    /// <param name="_catchWeightTag">The catch weight tag to register the event for.</param>
    internal abstract void registerEvent(WHSCatchWeightTag _catchWeightTag)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventTransId parmInventTransId(InventTransId _inventTransId = inventTransId)
    {
        inventTransId = _inventTransId;
        return inventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkLineRecId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWorkLineRecId parmWorkLineRecId(WHSWorkLineRecId _workLineRecId = workLineRecId)
    {
        workLineRecID = _workLineRecID;
        return workLineRecID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStorageInventDim</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventDim parmStorageInventDim(InventDim _storageInventDim = storageInventDim)
    {
        storageInventDim = _storageInventDim;
        return storageInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContainerLineRecId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSContainerLineRecId parmContainerLineRecId(WHSContainerLineRecId _containerLineRecId = containerLineRecId)
    {
        containerLineRecId = _containerLineRecId;
        return containerLineRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTagDimensionOnRegistration</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void updateTagDimensionOnRegistration(WHSCatchWeightTag _tag)
    {
        if ((storageInventDim || workLineRecId)
            && registrationEvent != WHSCatchWeightTagRegistrationEvent::OutboundPickingStarted
            && registrationEvent != WHSCatchWeightTagRegistrationEvent::PickingStarted
            && registrationEvent != WHSCatchWeightTagRegistrationEvent::PackingStarted
            && WHSInventTable::catchWeightTagDimensionTrackingMethod(_tag.ItemId) == WHSCatchWeightTagDimensionTrackingMethod::ProductTrackingAndAllStorageDimensions)
        {
            if (!storageInventDim)
            {
                storageInventDim = WHSWorkLine::findByRecId(workLineRecId).getToStorageDimensions();
            }

            InventDim inventDim = InventDim::find(_tag.InventDimId);
            inventDim.initFromInventDim(storageInventDim, InventDim::dimStorageDimFieldList());
            inventDim = InventDim::findOrCreate(inventDim);

            _tag.selectForUpdate(true);
            _tag.updateCatchWeightTagDimension(inventDim, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tagRegistrationEvent</Name>
				<Source><![CDATA[
    private static WHSCatchWeightTagRegistrationEvent tagRegistrationEvent(InventTransId _inventTransId, ItemId _itemId)
    {
        InventTransOrigin inventTransOrigin = InventTransOrigin::findByInventTransId(_inventTransId);

        if (!inventTransOrigin)
        {
            throw error(strFmt("@WAX:WHSCatchWeightTagInvalidInventoryLotID", _inventTransId));
        }

        if (inventTransOrigin.ItemId != _itemId)
        {
            throw error(strFmt("@WAX:WHSCatchWeightTagEntityItemMismatch", _itemId, inventTransOrigin.ItemId));
        }
 
        WHSCatchWeightTagRegistrationEvent localRegistrationEvent;

        switch (inventTransOrigin.ReferenceCategory)
        {
            case InventTransType::Production:
            case InventTransType::Purch:
            case InventTransType::TransferOrderReceive:
            case InventTransType::PmfProdCoBy:
                localRegistrationEvent = WHSCatchWeightTagRegistrationEvent::TagRegistered;
                break;

            case InventTransType::ProdLine:
            case InventTransType::Sales:
            case InventTransType::TransferOrderShip:
                localRegistrationEvent = WHSCatchWeightTagRegistrationEvent::Shipped;
                break;

            case InventTransType::InventTransfer:
                localRegistrationEvent = WHSCatchWeightTagEventRegistration::inventTransferTagRegistrationEvent(inventTransOrigin);
                break;

            case InventTransType::InventCounting:
                localRegistrationEvent = WHSCatchWeightTagEventRegistration::countingJournalTagRegistrationEvent(inventTransOrigin);
                break;

            default:
                throw error(strFmt("@WAX:WHSCatchWeightTagLotIdIsNotInboundOrOutbound", _inventTransId));
        }

        return localRegistrationEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransferTagRegistrationEvent</Name>
				<Source><![CDATA[
    private static WHSCatchWeightTagRegistrationEvent inventTransferTagRegistrationEvent(InventTransOrigin _inventTransOrigin)
    {
        WHSCatchWeightTagRegistrationEvent localRegistrationEvent;
        InventJournalTrans inventJournalTrans = InventTransOriginJournalTrans::inventJournalTrans(_inventTransOrigin.RecId);

        // If records exists then it is an issue transaction.
        if (inventJournalTrans.RecId)
        {
            localRegistrationEvent = WHSCatchWeightTagRegistrationEvent::Shipped;
        }
        else
        {
            // If record does not exists then it a receipt transaction.
            localRegistrationEvent = WHSCatchWeightTagRegistrationEvent::TagRegistered;
        }

        return localRegistrationEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countingJournalTagRegistrationEvent</Name>
				<Source><![CDATA[
    private static WHSCatchWeightTagRegistrationEvent countingJournalTagRegistrationEvent(InventTransOrigin _inventTransOrigin)
    {
        WHSCatchWeightTagRegistrationEvent localRegistrationEvent;

        if (WHSCatchWeightTagEventRegistration::inventDirection(_inventTransOrigin) == InventDirection::Receipt)
        {
            localRegistrationEvent = WHSCatchWeightTagRegistrationEvent::TagRegistered;
        }
        else
        {
            localRegistrationEvent = WHSCatchWeightTagRegistrationEvent::Shipped;
        }

        return localRegistrationEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDirection</Name>
				<Source><![CDATA[
    private static InventDirection inventDirection(InventTransOrigin _inventTransOrigin)
    {
        InventJournalTrans inventJournalTrans = InventJournalTrans::findInventTransId(_inventTransOrigin.InventTransId);

        return  inventJournalTrans.Qty < 0 ? InventDirection::Issue : InventDirection::Receipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeTagLastRegistrationEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes tag last registration event from the <c>WHSCatchWeightTagRegistration</c> table.
    /// Links tag last registration from the <c>WHSCatchWeightTagLastRegistration</c>table to another tag last registration event from the <c>WHSCatchWeightTagRegistration</c> table.
    /// </summary>
    /// <param name = "_tagNumber">Tag number to identify the last registration details.</param>
    [Hookable(false)]
    internal static void removeTagLastRegistrationEvent(WHSCatchWeightTagNumber _tagNumber)
    {
        ttsbegin;

        // Tag last registration event to be deleted
        WHSCatchWeightTagRegistration tagRegistration = WHSCatchWeightTagRegistration::findLastRegistration(_tagNumber, true);
        
        if (tagRegistration)
        {
            tagRegistration.delete();

            // Tag last registration event to be linked.
            tagRegistration = WHSCatchWeightTagRegistration::findLastRegistration(_tagNumber);

            if (tagRegistration)
            {
                WHSCatchWeightTagEventRegistration catchWeightTagEventRegistration = WHSCatchWeightTagEventRegistration::instantiateFromTagRegistration(tagRegistration.RegistrationEvent);

                catchWeightTagEventRegistration.parmContainerLineRecId(tagRegistration.ContainerLine);
                catchWeightTagEventRegistration.parmInventTransId(tagRegistration.InventTransId);
                catchWeightTagEventRegistration.parmWorkLineRecId(tagRegistration.WorkLine);

                WHSCatchWeightTagLastRegistration lastRegistration = catchWeightTagEventRegistration.initLastRegistration(_tagNumber);

                if (lastRegistration)
                {
                    lastRegistration.update();
                }
            }
            else
            {
                WHSCatchWeightTagLastRegistration lastRegistration = WHSCatchWeightTagLastRegistration::findFromDatabase(_tagNumber, true);

                if (lastRegistration)
                {
                    lastRegistration.delete();
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>