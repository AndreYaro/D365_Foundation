<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomCalcItemLine_PmfBurden</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BomCalcItemLine_PmfBurden extends BOMCalcItemLine
{
    CostPrice       burdenCost;
    PmfFormulaCoBy  coBy;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
public void calc()
    {
        setprefix("@SYS28550");
        setprefix(#PreFixField(coBy,ItemId));

        if (!this.validate())
        {
            throw Exception::Error;
        }

        this.init();

        this.calcConsumption();

        this.calcBurden();

        if (!this.calcCost(calcConsumptionInventQty))
        {
            return;
        }

        this.updateCalcPrices();
        this.recalc(); //go ahead and insert trans
    }
]]></Source>
			</Method>
			<Method>
				<Name>calcBurden</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates burden cost for coby products with an overhead.
    /// </summary>
    public void calcBurden()
    {
        burdenCost = 0;

        switch (coBy.BurdenType)
        {
            case PmfBurdenType::Percent :
                // The value in the CostAllocationAmt field is a percentage of the total cost
                burdenCost = (coBy.CostAllocationAmt / 100) * this.totalOtherCosts() / (calcConsumptionInventQty ? calcConsumptionInventQty : 1);
                break;
            case PmfBurdenType::PerSeries :
            case PmfBurdenType::PerQuantity :
                // When estimating these two scenarios should behave the same
                if (coBy.CoByQty != 0)
                {
                    burdenCost = coBy.CostAllocationAmt / coBy.CoByQty;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcConsumption</Name>
				<Source><![CDATA[
/// <summary>
    /// Calculates the consumption of the burden basis.
    /// </summary>
    /// <remarks>
    /// For the burden type <c>Percent</c> the consumption is the joint cost of production.
    /// For burden types <c>PerQuantity</c> and <c>PerSeries</c> the consumption is the quantity of byproduct produced.
    /// </remarks>
protected void calcConsumption()
    {
        Qty                     consumptionBOMQtyVariable,
                                consumptionBOMQtyConstant;
        BOMCalcItem localParentBOMCalcItem  = this.parmParentBOMCalc() as BOMCalcItem;
        Qty                     localSeriesSize;
        PmfCostAllocationPct    costAllocationPct;

        if (localParentBOMCalcItem.parmPmfParentCalcId() == '')
        {
            localSeriesSize     = localParentBOMCalcItem.parmSeriesSize();
            costAllocationPct   = coBy.bomVersion().pmfRemainCostAlloc();
        }
        else
        {
            localSeriesSize      = localParentBOMCalcItem.parmPmfFormulaSeriesSize();
            costAllocationPct   = localParentBOMCalcItem.parmPmfCostAllocationPct();
        }

            if (coBy.CoByQtySerie != 0)
            {
            switch (coBy.BurdenType)
            {
                case PmfBurdenType::Percent:
                    [consumptionBOMQtyVariable, consumptionBOMQtyConstant] = this.calculateBurdenVariableConstantOverhead();
                    break;
                case PmfBurdenType::PerQuantity:
                case PmfBurdenType::PerSeries:
                    consumptionBOMQtyVariable = coBy.CoByQty * localSeriesSize / coBy.CoByQtySerie
                                               * costAllocationPct / 100;
                    break;
            }
        }

        calcConsumptionInventQty = consumptionBOMQtyVariable + consumptionBOMQtyConstant;
        calcNetWeightConsumptionInventQty = calcConsumptionInventQty;
        calcConsumpVariableQty = consumptionBOMQtyVariable;
        calcConsumpConstantQty = consumptionBOMQtyConstant;
    }
]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
protected void initParameters()
    {
        BOMCalcItem localParentBOMCalcItem  = this.parmParentBOMCalc() as BOMCalcItem;
        BomCalcLinePmfBurdenInitializer  bomCalcLinePmfBurdenInitializer  = BomCalcLinePmfBurdenInitializer::construct();

        super();

        bomCalcData     = BOMCalcData::newInventTable(
                            seriesSize,
                            localParentBOMCalcItem.parmInventTable());

        bomCalcLinePmfBurdenInitializer.initializeBomCalcLine(this);
        bomCalcLinePmfBurdenInitializer.initializeBomCalcLineFromFormCoBy(this, coBy);

        bomCalcCost     = BOMCalcCost::construct();
    }
]]></Source>
			</Method>
			<Method>
				<Name>insertBOMCalcTrans</Name>
				<Source><![CDATA[
public void insertBOMCalcTrans()
    {
        this.initBOMCalcTrans();

        bomCalcTrans.insert();

        this.insertBOMCalcTransBreakdown();
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmPmfFormulaCoBy</Name>
				<Source><![CDATA[
        public PmfFormulaCoBy parmPmfFormulaCoBy(
        PmfFormulaCoBy _coBy = coBy)
    {
        coBy = _coBy;
        return coBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfBurdenAmount</Name>
				<Source><![CDATA[
        public CostPrice pmfBurdenAmount()
    {
        return burdenCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfIsBurden</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the class is representing burden.
    /// </summary>
    /// <returns>
    /// true if the class is representing burden; otherwise, false.
    /// </returns>
    public boolean pmfIsBurden()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalOtherCosts</Name>
				<Source><![CDATA[
/// <summary>
    /// Calculates the overhead amount used in the burden cost calculation.
    /// </summary>
    /// <returns>
    /// The overhead amount for the burden cost calculation.
    /// </returns>
    protected Amount totalOtherCosts()
    {
        Amount          totalVariableCost,
                        totalConstantCost;

        [totalVariableCost, totalConstantCost] = this.calculateBurdenVariableConstantOverhead();

        return totalVariableCost + totalConstantCost;
    }
]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
        public boolean validate(boolean _checkBOM = true)
    {
        boolean ret = true;

        if (!itemId)
        {
            return checkFailed("@SYS25157");
        }

        if (!parentBOMCalc)
        {
            return checkFailed(
                strfmt("@SYS27147", classId2Name(classidget(this))));
        }

        if (_checkBOM && !coBy)
        {
            ret = checkFailed(
                strfmt("@SYS29104", classstr(BomCalcItemLine_PmfBurden)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static BomCalcItemLine_PmfBurden construct()
    {
        return new BomCalcItemLine_PmfBurden();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBurdenCalcItem</Name>
				<Source><![CDATA[
        public static BomCalcItemLine_PmfBurden newBurdenCalcItem(
        PmfFormulaCoBy          _coBy,
        BOMCalcItem             _parentBOMCalcItem,
        CostingVersionId        _costingVersionId       = '',
        BOMCalcFallBack         _bomCalcFallBack        = BOMCalcFallBack::None,
        CostingVersionId        _fallBackVersionId      = '',
        InventSiteId            _siteId                 = '',
        BOMCalcExplosionMode    _bomCalcExplosionMode   = BOMCalcExplosionMode::MultiLevel
        )
    {
        BomCalcItemLine_PmfBurden   burdenCalcItemLine = BomCalcItemLine_PmfBurden::construct();

        burdenCalcItemLine.parmItemId(_coBy.ItemId);
        burdenCalcItemLine.parmInventDimId(_coBy.InventDimId);
        burdenCalcItemLine.parmPmfFormulaCoBy(_coBy);
        burdenCalcItemLine.parmParentBOMCalc(_parentBOMCalcItem);
        burdenCalcItemLine.parmCostingVersionId(_costingVersionId);
        burdenCalcItemLine.parmBOMCalcFallBack(_bomCalcFallBack);
        burdenCalcItemLine.parmFallBackVersionId(_fallBackVersionId);
        burdenCalcItemLine.parmSiteId(_siteId);
        burdenCalcItemLine.parmBomCalcExplosionMode(_bomCalcExplosionMode);

        return burdenCalcItemLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateBurdenVariableConstantOverhead</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the overhead variable and constant amount used in the burden cost calculation.
    /// </summary>
    /// <returns>
    /// The container with two elements: the variable overhead amount and the constant overhead amount for the burden cost calculation.
    /// </returns>
    protected container calculateBurdenVariableConstantOverhead()
    {
        BOMCalcTrans    bomCalcTransOtherCosts;
        PriceCalcId     priceCalcId;
        Level           level;
        Amount          totalVariableCost,
                        totalConstantCost;
        BOMCalcItem     parentBomCalcItem = this.parmParentBOMCalc();

        priceCalcId =   parentBomCalcItem.parmPriceCalcId();
        level       =   parentBomCalcItem.parmLevel() + 1;

        while select CostPriceQty, Qty, CostMarkupQty
            from bomCalcTransOtherCosts
            where  bomCalcTransOtherCosts.PriceCalcId   == priceCalcId
                && bomCalcTransOtherCosts.Level         == level
                && bomCalcTransOtherCosts.CalcType      != ItemCalcType::Burden
        {
            totalVariableCost += bomCalcTransOtherCosts.CostPriceQty  * bomCalcTransOtherCosts.Qty;
            totalConstantCost += bomCalcTransOtherCosts.CostMarkupQty;
        }

        return [totalVariableCost, totalConstantCost];
    }
]]></Source>
			</Method>
			<Method>
				<Name>updateCalcPrices</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates calculated prices.
    /// </summary>
    public void updateCalcPrices()
    {
        super();
        bomCalcTrans.CostPrice  = burdenCost;
        bomCalcTrans.CostMarkup = calcConsumpConstantQty * burdenCost;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>