<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlTrackBFAOnlyFeature</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
using Microsoft.Dynamics.ApplicationPlatform.FeatureExposure;

/// <summary>
/// The <c>BudgetControlTrackBFAOnlyFeature</c> class enables only tracking amounts that participate in the budget funds available calculation.
/// </summary>
[ExportAttribute(identifierStr(Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.IFeatureMetadata))]
[Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
public final class BudgetControlTrackBFAOnlyFeature implements IFeatureMetadata, IFeatureLifecycle, IFeatureMetadataEnablementNotifiable, IFeaturePrerequisites
{
    private static BudgetControlTrackBFAOnlyFeature instance;
    private str cannotEnableMessage;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>typeNew</Name>
				<Source><![CDATA[
    private static void typeNew()
    {
        instance = new BudgetControlTrackBFAOnlyFeature();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the singleton object instance.
    /// </summary>
    /// <returns>
    /// The <c>BudgetControlTrackBFAOnlyFeature</c> instance.
    /// </returns>
    [Hookable(false)]
    public static BudgetControlTrackBFAOnlyFeature instance()
    {
        return BudgetControlTrackBFAOnlyFeature::instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>label</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>FeatureLabelId</c> for the feature.
    /// </summary>
    /// <returns>
    /// The summary for the feature.
    /// </returns>
    [Hookable(false)]
    public FeatureLabelId label()
    {
        return literalStr("@Budget:TrackBudgetFundsAvailableOnlyFeatureName");
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>FeatureModuleV0</c> for the feature.
    /// </summary>
    /// <returns>
    /// The module for the feature.
    /// </returns>
    [Hookable(false)]
    public int module()
    {
        return FeatureModuleV0::Budgeting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>FeatureLabelId</c> for the feature.
    /// </summary>
    /// <returns>
    /// The summary for the feature.
    /// </returns>
    [Hookable(false)]
    public FeatureLabelId summary()
    {
        return literalStr("@Budget:TrackBudgetFundsAvailableOnlyFeatureSummary");
    }

]]></Source>
			</Method>
			<Method>
				<Name>learnMoreUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>WebSiteURL</c> for the feature.
    /// </summary>
    /// <returns>
    /// The URL for the feature.
    /// </returns>
    [Hookable(false)]
    public WebSiteURL learnMoreUrl()
    {
        return "https://go.microsoft.com/fwlink/?linkid=2164981";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabledByDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the feature is enabled by default.
    /// </summary>
    /// <returns>
    /// Returns true if the feature is enabled by default; otherwise, false.
    /// </returns>
    [Hookable(false)]
    public boolean isEnabledByDefault()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDisable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the feature can be disabled.
    /// </summary>
    /// <returns>
    /// Returns true if the feature can be disabled; otherwise, false.
    /// </returns>
    [Hookable(false)]
    public boolean canDisable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FeatureStage</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLifecycleStage FeatureStage()
    {
        return FeatureLifecycleStage::Released;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    internal static boolean isEnabled()
    {
        return Dynamics.AX.Application.FeatureStateProvider::isFeatureEnabled(BudgetControlTrackBFAOnlyFeature::instance());
    }

]]></Source>
			</Method>
			<Method>
				<Name>onEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void onEnabled()
    {
        BudgetControlParameters::setTrackBudgetFundsAvailableOnlySetting(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDisabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void onDisabled()
    {
        BudgetControlParameters::setTrackBudgetFundsAvailableOnlySetting(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cannotEnableMessage</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public LabelString cannotEnableMessage()
    {
        return cannotEnableMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEnable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canEnable()
    {
        BudgetControlConfiguration budgetControlConfiguration;
        container invalidLedgers;
        boolean isValid = true;
        cannotEnableMessage = '';

        // Check draft configurations as well so incorrect settings don't get persisted after enablement.
        // Category        |   PreRequisites
        //-----------------|-------------------------
        // PreEncumbrance  |   Encumbrance, Actuals
        // Encumbrance     |   Actuals
        while select * 
            from budgetControlConfiguration
        {
            if (this.isGeneralBudgetReservationInvalid(budgetControlConfiguration) 
                || this.isPreEncumbranceInvalid(budgetControlConfiguration) 
                || this.isEncumbranceInvalid(budgetControlConfiguration))
            {
                invalidLedgers += Ledger::name(budgetControlConfiguration.PrimaryLedger);
                isValid = false;
            }
        }

        if (!isValid)
        {
            cannotEnableMessage = strFmt("@Budget:TrackBudgetFundsAvailableOnlyFeatureCannotEnableMessage", con2StrUnlimited(invalidLedgers, ', '));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGeneralBudgetReservationInvalid</Name>
				<Source><![CDATA[
    private boolean isGeneralBudgetReservationInvalid(BudgetControlConfiguration _budgetControlConfiguration)
    {
        boolean isUsingPurchReqBudgetReservation = false;
        
        // Directly check integrator enablement since this might be a draft configuration
        if (BudgetControlSourceIntegratorEnabled::existByConfigurationSourceIntegrator(_budgetControlConfiguration.RecId, BudgetControlSourceIntegrator::BudgetReservation_PSN))
        {
            changecompany(CompanyInfo::getDataArea(Ledger::primaryForLegalEntity(_budgetControlConfiguration.PrimaryLedger)))
            {
                BudgetReservationType_PSN budgetReservationType;

                select firstonly RecId from budgetReservationType
                        where budgetReservationType.RelievingDocument == BudgetReservationRelievingDocument_PSN::PurchaseRequisition;

                isUsingPurchReqBudgetReservation = budgetReservationType.RecId != 0;
            }
        }

        // If using General budget reservation to Purchase requisition type, pre-encumbrance needs to be enabled so the document can be relieved.
        return isUsingPurchReqBudgetReservation
            && _budgetControlConfiguration.SubtractPreencumbrances == NoYes::No
            && _budgetControlConfiguration.SubtractEncumbrances == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPreEncumbranceInvalid</Name>
				<Source><![CDATA[
    private boolean isPreEncumbranceInvalid(BudgetControlConfiguration _budgetControlConfiguration)
    {
        return _budgetControlConfiguration.SubtractPreencumbrances == NoYes::Yes 
            && (_budgetControlConfiguration.SubtractEncumbrances == NoYes::No
            || _budgetControlConfiguration.SubtractActualExpenditures == NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEncumbranceInvalid</Name>
				<Source><![CDATA[
    private boolean isEncumbranceInvalid(BudgetControlConfiguration _budgetControlConfiguration)
    {
        return _budgetControlConfiguration.SubtractEncumbrances == NoYes::Yes
            && _budgetControlConfiguration.SubtractActualExpenditures == NoYes::No;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>