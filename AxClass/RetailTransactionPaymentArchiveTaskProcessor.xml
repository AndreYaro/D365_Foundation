<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionPaymentArchiveTaskProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>RetailTransactionPaymentArchiveTaskProcessor</c> class provides the functionality to execute a batch task of the archive credit card transaction data.
/// </summary>
internal final class RetailTransactionPaymentArchiveTaskProcessor extends RunBasebatch implements BatchRetryable
{
    private TransDate transactionsOlderThanDate;
    private RecId startRecId;
    private RecId endRecId;
    private NoYes isDeleteOnlyPaymentBlob;
    private NoYes isCompressNewPaymentBlob;
    private FeatureEnableDate featureEnabledDate = RetailTransactionPaymentsArchiverHelper::getFeatureEnabledDate();
    private CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        transactionsOlderThanDate,
        startRecId,
        endRecId,
        isDeleteOnlyPaymentBlob,
        isCompressNewPaymentBlob
    #ENDMACRO


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmTransactionsOlderThanDate</Name>
				<Source><![CDATA[
    internal TransDate parmTransactionsOlderThanDate(TransDate _transactionsOlderThanDate = this.transactionsOlderThanDate)
    {
        this.transactionsOlderThanDate = _transactionsOlderThanDate;

        return this.transactionsOlderThanDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartRecId</Name>
				<Source><![CDATA[
    internal RecId parmStartRecId(RecId _startRecId = startRecId)
    {
        this.startRecId = _startRecId;

        return this.startRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndRecId</Name>
				<Source><![CDATA[
    internal RecId parmEndRecId(RecId _endRecId = endRecId)
    {
        this.endRecId = _endRecId;

        return this.endRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsDeleteOnlyPaymentBlob</Name>
				<Source><![CDATA[
    internal NoYes parmIsDeleteOnlyPaymentBlob(NoYes _isDeleteOnlyPaymentBlob = this.isDeleteOnlyPaymentBlob)
    {
        this.isDeleteOnlyPaymentBlob = _isDeleteOnlyPaymentBlob;

        return this.isDeleteOnlyPaymentBlob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCompressNewPaymentBlob</Name>
				<Source><![CDATA[
    internal NoYes parmIsCompressNewPaymentBlob(NoYes _isCompressNewPaymentBlob = this.isCompressNewPaymentBlob)
    {
        this.isCompressNewPaymentBlob = _isCompressNewPaymentBlob;

        return this.isCompressNewPaymentBlob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static RetailTransactionPaymentArchiveTaskProcessor construct()
    {
        return new RetailTransactionPaymentArchiveTaskProcessor();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean unpack(container _packed)
    {
        Version version = RunBase::getVersion(_packed);

        switch (version)
        {
            case 1:
                [version, transactionsOlderThanDate, startRecId, endRecId, isDeleteOnlyPaymentBlob] = _packed;
                break;
            case 2:
                [version, #CurrentList] = _packed;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void run()
    {
        if (transactionsOlderThanDate == dateNull()
            || startRecId == 0
            || endRecId == 0)
        {
            return;
        }

        RetailTransactionPaymentsArchiverHelper retailTransactionPaymentsArchiverHelper = RetailTransactionPaymentsArchiverHelper::initFromTaskProcessor(this);

        // Perform the archival for transactions older than the specified date.
        if (!isDeleteOnlyPaymentBlob)
        {
            // Upload the payment blobs to Azure storage and then empty the table.
            retailTransactionPaymentsArchiverHelper.runPaymentBlobsArchival();
        }
        else
        {
            // Empty the payment blobs in the table.
            retailTransactionPaymentsArchiverHelper.runDeleteOnlyPaymentBlobs();
        }

        // Compress the payment blobs for transactions that occurred after the 'transactionsOlderThanDate' and before the feature was enabled.
        if (isCompressNewPaymentBlob
            && RetailTransactionPaymentsArchiverCompressFlight::instance().isEnabled()
            && RetailTransactionPaymentsArchiverHelper::isCompressTokensFeatureEnabledForMoreThanAWeek())
        {
            retailTransactionPaymentsArchiverHelper.runPaymentBlobsCompression();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>