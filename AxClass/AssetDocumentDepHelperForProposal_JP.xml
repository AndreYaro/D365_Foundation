<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDocumentDepHelperForProposal_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// It is a helper class to calculate depreciation of all documents for one asset when running the depreciation proposal.
/// </summary>
class AssetDocumentDepHelperForProposal_JP extends AssetDocumentDepHelper_JP
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTransForDocuments</Name>
				<Source><![CDATA[
/// <summary>
    /// Creates fixed asset depreciation journal line for each document that needs to run depreciation.
    /// </summary>
    /// <param name="_assetJournal">
    /// The journal to hold the journal line(s).
    /// </param>
    /// <param name="_transDate">
    /// The maximum transaction to calculate depreciation.
    /// </param>
    /// <param name="_normalDepAmount">
    /// The normal depreciation amount of current fixed asset in current period.
    /// </param>
    /// <param name="_amountToNormalDepreciation">
    /// The amount for normal depreciation.
    /// </param>
    /// <param name="_isDepreciationDone">
    /// The flag indicate if normal depreciation is done.
    /// </param>
    /// <param name="_revaluationTrans">
    /// A flag that indicates whether this transaction is for revaluating the fixed asset; optional.
    /// </param>
    /// <param name="_revaluationAmount">
    /// The amount to revaluate if it is a revaluation; optional.
    /// </param>
    /// <param name="_allowToAllocate">
    /// A flag that indicates whether it is allowed to use the allocation function; optional.
    /// </param>
    /// <returns>
    /// The number of created journal line(s).
    /// </returns>
    public int createTransForDocuments(
        AssetJournal            _assetJournal,
        AssetTransDate          _transDate,
        AssetAmount             _normalDepAmount,
        AssetAmount             _amountToNormalDepreciation,
        boolean                 _isDepreciationDone         = false,
        AssetRevaluationTrans   _revaluationTrans   = false,
        AssetRevaluationAmount  _revaluationAmount  = 0,
        boolean                 _allowToAllocate    = false)
    {
        int                     transactionCountLoc = 0;
        Map                     calcResult;
        MapEnumerator           mapEnumerator;
        AssetAmount             curDepAmount;
        AssetTransDate          curDepDate;
        AssetDocumentType_JP    curAssetDocumentType;
        container               resultForOneEntry;
        int                     i;
        AssetAllocator_CN       assetAllocator;

        if (_assetJournal)
        {
            if (_allowToAllocate)
            {
                assetAllocator = new AssetAllocator_CN();
            }

            this.applyNormalDepreciationAmount(_normalDepAmount);
            this.applyNormalDepreciationInfo(_amountToNormalDepreciation, _transDate, _isDepreciationDone);
            calcResult = this.calcSum(_transDate);

            mapEnumerator = calcResult.getEnumerator();
            while (mapEnumerator.moveNext())
            {
                resultForOneEntry = mapEnumerator.currentValue();
                for (i = 1; i <= conLen(resultForOneEntry); i++)
                {
                    [curDepAmount, curDepDate, curAssetDocumentType] = conPeek(resultForOneEntry, i);
                    if (curDepAmount)
                    {
                        if (assetAllocator)
                        {
                            transactionCountLoc += assetAllocator.createTransJournal(
                                _assetJournal,
                                -1 * curDepAmount,
                                AssetDepBookMap_JP,
                                curDepDate,
                                assetBudgetModelId,
                                0,
                                0,
                                _revaluationTrans,
                                _revaluationAmount,
                                0,
                                dateNull(),
                                false,
                                false,
                                curAssetDocumentType,
                                mapEnumerator.currentKey());
                        }
                        else
                        {
                            _assetJournal.createTrans(
                                -1 * curDepAmount,
                                AssetDepBookMap_JP,
                                curDepDate,
                                assetBudgetModelId,
                                0,
                                0,
                                _revaluationTrans,
                                _revaluationAmount,
                                0,
                                dateNull(),
                                false,
                                false,
                                curAssetDocumentType,
                                mapEnumerator.currentKey());

                            transactionCountLoc++;
                        }
                    }
                }
            }
        }

        return transactionCountLoc;
    }
]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <C>AssetDocumentDepHelperForProposal_JP</C>.
    /// </summary>
    /// <param name="_documentTypes">
    /// The list asset document type that needs to calculate depreciation.
    /// </param>
    /// <param name="_assetDepBookMap_JP">
    /// The value model / depreciation book.
    /// </param>
    /// <param name="_assetTable">
    /// The instance of <C>AssetTable</C> that related to the value model / depreciation book. Optional.
    /// </param>
    /// <returns>
    /// A new instance of <C>AssetDocumentDepHelperForProposal_JP</C>.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// A value model / depreciation book must be specified.
    /// </exception>
    public static AssetDocumentDepHelperForProposal_JP construct(
        container               _documentTypes,
        AssetDepBookMap_JP      _assetDepBookMap_JP,
        AssetTable              _assetTable = null)
    {
        AssetDocumentDepHelperForProposal_JP ret;

        if (!_assetDepBookMap_JP)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        ret = new AssetDocumentDepHelperForProposal_JP(_documentTypes, _assetDepBookMap_JP, _assetTable);

        return ret;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>