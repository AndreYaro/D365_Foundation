<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerDailySummaryReportDP_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerDailySummaryReportDP_CN</c> class provides data for the <c>LedgerDailySummaryReport_CN</c>
/// SQL Server Reporting Services (SSRS) report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(LedgerDailySummaryReport_CN)),
    SRSReportParameterAttribute(classStr(LedgerDailySummaryReportContract_CN))
]
public class LedgerDailySummaryReportDP_CN extends SRSReportDataProviderBase
{
    LedgerDailySummaryReportTmp_CN  dailySummaryReportTmp_CN;
    TransDate                       asOn;
    boolean                         isFirst;
    MainAccountNum                  oldAccountNo;
    AmountMSTDebCred                debitAmount;
    AmountMSTDebCred                creditAmount;
    AmountMSTDebCred                balAmount;
    AccountName                     accountName;
    Qty                             drQuantity;
    Qty                             crQuantity;
    CurrentOperationsTax            postingLayer;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// This builds the query with the given parameters.
    /// </summary>
    /// <param name="_fromAccount">
    /// The <c>MainAccountNum</c> field to which value is assigned.
    /// </param>
    /// <param name="_toAccount">
    /// The <c>MainAccountNum</c> field to which value is assigned.
    /// </param>
    /// <param name="_postingLayer">
    /// The <c>CurrentOperationsTax</c> field to which value is assigned.
    /// </param>
    /// <param name="_query">
    /// The <c>Query</c> object to which value is assigned.
    /// </param>
    private void buildQuery(
        MainAccountNum       _fromAccount,
        MainAccountNum       _toAccount,
        CurrentOperationsTax _postingLayer,
        Query                _query)
    {
        QueryBuildRange         qbRange;
        QueryBuildRange         qbRangePostingLayer;
        QueryBuildRange         qbrRangeLedger;
        QueryBuildDatasource    qbdsMainAccount;
        QueryBuildDataSource    qbdsGeneralJourEntry;

        qbdsMainAccount = _query.dataSourceTable(tableNum(MainAccount));

        SysQuery::findOrCreateRange(
            qbdsMainAccount,
            fieldNum(MainAccount, MainAccountId)).value(SysQuery::range(_fromAccount, _toAccount));

        qbdsGeneralJourEntry = _query.dataSourceTable(tableNum(GeneralJournalEntry));

        qbRange = qbdsGeneralJourEntry.addRange(fieldNum(GeneralJournalEntry, AccountingDate));
        qbRange.value(queryValue(asOn));

        qbRangePostingLayer = qbdsGeneralJourEntry.addRange(fieldNum(GeneralJournalEntry, PostingLayer));
        qbRangePostingLayer.value(queryValue(_postingLayer));

        qbrRangeLedger = qbdsGeneralJourEntry.addRange(fieldNum(GeneralJournalEntry, Ledger));
        qbrRangeLedger.value(queryValue(Ledger::current()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateLedgerBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates LedgerBalance Value.
    /// </summary>
    /// <param name="_accountNum">
    /// The <c>MainAccountNum</c> field to which value is assigned.
    /// </param>
    /// <returns>
    /// Value for LedgerBalance.
    /// </returns>
    private AmountMSTDebCred calculateLedgerBalance(MainAccountNum _accountNum)
    {
        AmountMSTDebCred                   ledgerBalance = 0;
        MainAccount                        mainAcc;
        DimensionAttributeValueCombination dimAttrValueComb;
        GeneralJournalAccountEntry         genJournalAccEntry;
        GeneralJournalEntry                genJournalEntry;

        select sum(AccountingCurrencyAmount) from genJournalAccEntry
            exists join RecId from dimAttrValueComb
                where genJournalAccEntry.LedgerDimension == dimAttrValueComb.RecId
            exists join RecId from mainAcc
                where dimAttrValueComb.MainAccount == mainAcc.RecId
            exists join RecId from genJournalEntry
                where genJournalAccEntry.GeneralJournalEntry == genJournalEntry.RecId
                    &&  mainAcc.MainAccountId                == _accountNum
                    &&  genJournalEntry.AccountingDate       == asOn
                    &&  genJournalEntry.PostingLayer         == postingLayer;

        ledgerBalance = genJournalAccEntry.AccountingCurrencyAmount;

        return ledgerBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDailySummaryReportTmp_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches data from the <c>LedgerDailySummaryReportTmp_CN</c> table.
    /// </summary>
    /// <returns>
    /// Data from the <c>LedgerDailySummaryReportTmp_CN</c> table for the report.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(LedgerDailySummaryReportTmp_CN))
    ]
    public LedgerDailySummaryReportTmp_CN getDailySummaryReportTmp_CN()
    {
        return dailySummaryReportTmp_CN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDailySummaryReportTmp_CN</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Insert data into <c>LedgerDailySummaryReportTmp_CN</c> temp table.
    /// </summary>
    /// <param name="_mainAccount">
    /// Passes the cursor of <c>MainAccount</c> table.
    /// </param>
    /// <param name="_generalJournalAccEntry">
    /// Passes the cursor of <c>GeneralJournalAccountEntry</c> table.
    /// </param>
    private void insertDailySummaryReportTmp_CN(
        MainAccount                _mainAccount,
        GeneralJournalAccountEntry _generalJournalAccEntry)
    {
        MainAccountNum      curAccountNo;
        NoYes               drCrediting;
        AmountMSTDebCred    amount;

        curAccountNo = _mainAccount.MainAccountId;
        amount       = _generalJournalAccEntry.AccountingCurrencyAmount;
        drCrediting  = _generalJournalAccEntry.IsCredit;

        if (isFirst)
        {
            oldAccountNo = curAccountNo;
            isFirst        = false;
        }

        if (oldAccountNo != curAccountNo)
        {
            if ((debitAmount != 0)
                || (creditAmount != 0)
                || (drQuantity != 0)
                || (crQuantity != 0))
            {
                balAmount = this.calculateLedgerBalance(oldAccountNo);

                dailySummaryReportTmp_CN.AccountNum   = oldAccountNo;
                dailySummaryReportTmp_CN.AccountName  = accountName;
                dailySummaryReportTmp_CN.CurrencyCode = CompanyInfoHelper::standardCurrency();
                dailySummaryReportTmp_CN.DebitAmount  = debitAmount;
                dailySummaryReportTmp_CN.CreditAmount = creditAmount;

                if (balAmount > 0)
                {
                    dailySummaryReportTmp_CN.Direction = 1;
                }
                else if (balAmount < 0)
                {
                    dailySummaryReportTmp_CN.Direction = -1;
                }
                else
                {
                    dailySummaryReportTmp_CN.Direction = 0;
                }

                dailySummaryReportTmp_CN.Amount     = balAmount;
                dailySummaryReportTmp_CN.DrQuantity = drQuantity;
                dailySummaryReportTmp_CN.CrQuantity = crQuantity;
                dailySummaryReportTmp_CN.insert();

                debitAmount  = 0;
                creditAmount = 0;
                drQuantity   = 0;
                crQuantity   = 0;
            }
        }
        if (drCrediting == NoYes::No)
        {
            debitAmount += amount;
            drQuantity++;
        }
        else
        {
            creditAmount += amount;
            crQuantity++;
        }
        oldAccountNo = curAccountNo;
        accountName  = _mainAccount.localizedName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the required data for the report.
    /// </summary>
    public void processReport()
    {
        QueryRun                   queryRun;
        MainAccountNum             fromAccount, toAccount;
        MainAccount                mainAccount;
        Query                      query;
        GeneralJournalAccountEntry generalJournalAccEntry;

        LedgerDailySummaryReportContract_CN contract = this.parmDataContract() as LedgerDailySummaryReportContract_CN;

        isFirst        = true;
        debitAmount  = 0;
        creditAmount = 0;
        drQuantity   = 0;
        crQuantity   = 0;
        fromAccount  = contract.parmFromAccount();
        toAccount    = contract.parmToAccount();
        asOn         = contract.parmAsOn();
        postingLayer = contract.parmPostingLayer();
        query        = this.parmQuery();

        this.buildQuery(fromAccount, toAccount, postingLayer, query);

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            mainAccount            = queryRun.get(tableNum(MainAccount));
            generalJournalAccEntry = queryRun.get(tableNum(GeneralJournalAccountEntry));

            this.insertDailySummaryReportTmp_CN(mainAccount, generalJournalAccEntry);
        }

        if ((debitAmount != 0) || (creditAmount != 0) || (drQuantity != 0) || (crQuantity != 0))
        {
            balAmount = this.calculateLedgerBalance(oldAccountNo);

            dailySummaryReportTmp_CN.AccountNum   = oldAccountNo;
            dailySummaryReportTmp_CN.AccountName  = accountName;
            dailySummaryReportTmp_CN.CurrencyCode = CompanyInfoHelper::standardCurrency();
            dailySummaryReportTmp_CN.DebitAmount  = debitAmount;
            dailySummaryReportTmp_CN.CreditAmount = creditAmount;

            if (balAmount > 0)
            {
                dailySummaryReportTmp_CN.Direction = 1;
            }

            else if (balAmount < 0)
            {
                dailySummaryReportTmp_CN.Direction = -1;
            }

            else
            {
                dailySummaryReportTmp_CN.Direction = 0;
            }
            dailySummaryReportTmp_CN.Amount     = balAmount;
            dailySummaryReportTmp_CN.DrQuantity = drQuantity;
            dailySummaryReportTmp_CN.CrQuantity = crQuantity;
            dailySummaryReportTmp_CN.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>