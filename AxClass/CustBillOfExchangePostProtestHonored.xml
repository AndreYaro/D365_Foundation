<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustBillOfExchangePostProtestHonored</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The class <c>CustBillOfExchangePostProtestHonored</c> is used when a protest settlement bill of exchange journal is posted.
/// </summary>
public class CustBillOfExchangePostProtestHonored extends CustBillOfExchangePost
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postNextStep</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates or updates open transactions for transactions settled by the settling transaction.
    /// </summary>
    /// <param name = "_custVoucher">
    ///     An instance of <c>CustVendVoucher</c>.
    /// </param>
    /// <param name = "_settlingTrans">
    ///     A <c>CustVendTrans</c> table buffer.
    /// </param>
    protected void postNextStep(CustVendVoucher _custVoucher, CustVendTrans _settlingTrans)
    {
        CustVoucher                 custVoucher = _custVoucher;
        CustSettlement              custSettlement;        
        CustTrans                   nextStepTrans;
        CustBillOfExchangeTrans     custBillOfExchangeTrans;

        if (ledgerJournalTrans.TransactionType == LedgerTransType::Fee)
        {
            custVoucher = CustVoucher::newCustVoucherJournal(ledgerJournalTrans, 0);

            custVoucher.post(ledgerVoucher, nextStepTrans);

            nextStepTrans.AmountCur = -nextStepTrans.AmountCur;
            if (this.protestProcess() != CustVendNegInstProtestProcess::OpenTrans)
            {
                nextStepTrans.AmountCur = -nextStepTrans.AmountCur;

                this.setNegInstFieldOnTrans(nextStepTrans,
                                            custBillOfExchangeTrans.BillOfExchangeId,
                                            custBillOfExchangeTrans.Status,
                                            custBillOfExchangeTrans.SeqNum);

                nextStepTrans.BankRemittanceFileId = ledgerJournalTrans.BankRemittanceFileId;
                nextStepTrans.update();
            }
        }
        else
        {
            QueryRun queryRun = SpecTrans::createQueryRunToRefTable(ledgerJournalTrans.company(),
                                                                    tablenum(LedgerJournalTrans),
                                                                    ledgerJournalTrans.RecId,
                                                                    tablenum(CustSettlement));

            queryRun.allowCrossCompany(true);

            RecordLinkList recordLinkList = new RecordLinkList();

            while (queryRun.next())
            {
                recordLinkList.ins(queryRun.get(tablenum(CustSettlement)));
            }

            SpecTransManager::newFromSpec(ledgerJournalTrans).deleteAll();

            custVoucher.parmSettlementType(this.getSettlementType());
            custVoucher.parmPostingProfile(CustVendNegInstPost::getPostingProfile(ledgerJournalType,
                                                                                  ledgerJournalTrans.BankRemittanceType));

            // Creates new open transactions for transactions settled by the settling transaction.
            while (recordLinkList.next(custSettlement))
            {
                this.postNextStepCustSettlement(custSettlement, custVoucher, nextStepTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postNextStepCustSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates new open transactions for transactions settled by the settling transaction.
    /// </summary>
    /// <param name = "_custSettlement">
    ///     A <c>CustSettlement</c> table buffer.
    /// </param>
    /// <param name = "_custVoucher">
    ///     An instance of <c>CustVoucher</c>.
    /// </param>
    /// <param name = "_nextStepTrans">
    ///     A <c>CustTrans</c> table buffer.
    /// </param>
    protected void postNextStepCustSettlement(CustSettlement _custSettlement, CustVoucher _custVoucher, CustTrans _nextStepTrans)
    {
        CustTrans settledTrans;

        // This code is run when posting a Bill Of Exchange Protest Journal for settled transactions.
        // In this code the settledTrans and custSettlement will always be in the current company so we do not
        // need to change to the OffsetCompany prior to the select statement.
        while select settledTrans
            where settledTrans.RecId == _custSettlement.OffsetRecid
        {
            _custVoucher.parmAmountCur(settledTrans.AmountCur);
            _custVoucher.parmCurrencyCode(settledTrans.CurrencyCode);
            _custVoucher.parmTransTxt(strfmt("@SYS83923", enum2str(ledgerJournalTrans.CustVendNegInstProtestReason), settledTrans.BillOfExchangeID));
            _custVoucher.parmTransRefType(CustTransRefType::BillOfExchange);
            _custVoucher.parmTransRefId(settledTrans.BillOfExchangeID);

            _custVoucher.post(ledgerVoucher, _nextStepTrans);

            
            CustBillOfExchangeJour custBillOfExchangeJour = CustBillOfExchangeJour::find(settledTrans.BillOfExchangeID, true);
            _nextStepTrans.AmountCur = -_nextStepTrans.AmountCur;
            CustBillOfExchangeTrans custBillOfExchangeTrans = this.insertNegInstTrans(custBillOfExchangeJour, _nextStepTrans);

            if (isConditionalTaxSpain)
            {
                this.taxSettlement_ES(custBillOfExchangeTrans);
            }

            if (this.protestProcess() != CustVendNegInstProtestProcess::OpenTrans)
            {
                _nextStepTrans.AmountCur = -_nextStepTrans.AmountCur;

                this.setNegInstFieldOnTrans(_nextStepTrans,
                                                    custBillOfExchangeTrans.BillOfExchangeId,
                                                    custBillOfExchangeTrans.Status,
                                                    custBillOfExchangeTrans.SeqNum);

                _nextStepTrans.BankRemittanceFileId = ledgerJournalTrans.BankRemittanceFileId;
                _nextStepTrans.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSettlingStep</Name>
				<Source><![CDATA[
    protected void postSettlingStep(CustVendVoucher custVendVoucher, CustVendTrans settlingTrans)
    {
        // There is no settling step
    }

]]></Source>
			</Method>
			<Method>
				<Name>protestProcess</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the selected option to protest settled process; that can be "as invoice" or "as open payment".
    /// </summary>
    /// <returns>
    ///     The protest settled process option.
    ///</returns>
    public CustVendNegInstProtestProcess protestProcess()
    {
        return ledgerJournalTrans.ledgerJournalTable().CustVendNegInstProtestProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>seqNum</Name>
				<Source><![CDATA[
    protected CustVendNegInstSeqNum seqNum(CustBillOfExchangeID _custBillOfExchangeID)
    {
        CustVendNegInstSeqNum seqNum = super(_custBillOfExchangeID);

        if (this.protestProcess() != CustVendNegInstProtestProcess::OpenTrans)
        {
            seqNum++;
        }

        return seqNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>status</Name>
				<Source><![CDATA[
    protected CustVendNegInstStatus status()
    {
        return CustVendNegInstStatus::Protested;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>