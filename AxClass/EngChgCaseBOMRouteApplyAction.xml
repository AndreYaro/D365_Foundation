<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EngChgCaseBOMRouteApplyAction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Executes approval and activation of the BOMs and routes associated with an engineering change case.
/// </summary>
public class EngChgCaseBOMRouteApplyAction extends RunBaseBatch implements BatchRetryable
{
    BOMRouteApprover                            approver;
    DialogField                                 fieldApprover;
    DialogField                                 fieldPlannedEffectiveDate;

    CaseRecId                                   caseDetailRecId;
    EngChgCasePlannedEffectiveDate              plannedEffectiveDate;

    Notes                                       caseLogNotes; // Initialized inside Run
    str                                         noteFormatCode; // Initialized in the new() method

    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentListSysLastValue
        approver
    #ENDMACRO

    #LocalMacro.CurrentListNewSession
        #CurrentListSysLastValue,
        caseDetailRecId,
        plannedEffectiveDate
    #EndMacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addEntityActionToCaseLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a log message for a BOM/Route entity.
    /// </summary>
    /// <param name="_action">
    /// The approval action.
    /// </param>
    /// <param name="_entityType">
    /// The entity type.
    /// </param>
    /// <param name="_entityId">
    /// The Id of the entity.
    /// </param>
    private void addEntityActionToCaseLog(
        EngChgCaseBOMRouteApprovalAction _action,
        CaseEntityType                   _entityType,
        EngChgCaseEntityId               _entityId
        )
    {
        str note;

        note = strFmt(noteFormatCode, _action, ': ', _entityType);
        note = strFmt(noteFormatCode, note, ' ', _entityId);

        this.addToCaseLogNote(note);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToCaseLogNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add a new text to the case log.
    /// </summary>
    /// <param name="_note">
    /// The text to add.
    /// </param>
    protected void addToCaseLogNote(str _note)
    {
        if (caseLogNotes != '')
        {
            caseLogNotes += '\n';
        }
        caseLogNotes += _note;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addVersionActionToCaseLog</Name>
				<Source><![CDATA[
    private void addVersionActionToCaseLog(
        EngChgCaseBOMRouteVersionApprovalAction _versionAction,
        CaseEntityType                          _entityType,
        EngChgCaseEntityId                      _entityId,
        ItemId                                  _itemId,
        InventDimId                             _inventDimId,
        FromDate                                _fromDate,
        ToDate                                  _toDate,
        FromQty                                 _fromQty
        )
    {
        ListEnumerator  dimFieldListEnumerator = InventDim::dimFieldListEnumerator();
        InventDim       inventDim;
        FieldId         inventDimFieldId;
        SysDictField    sysDictField;
        str             note;

        void addKeyValue(anytype _key, anytype _value)
        {
            str valueText;
            if (_value)
            {
                valueText = strFmt(noteFormatCode, _key, ' ', _value);
                if (note != '')
                {
                    note = strFmt(noteFormatCode, note, ', ', valueText);
                }
                else
                {
                    note = valueText;
                }
            }
        }

        addKeyValue("@SYS12836", _itemId);
        addKeyValue(_entityType, _entityId);
        addKeyValue("@SYS5209", _fromdate);
        addKeyValue("@SYS14656", _toDate);
        addKeyValue("@SYS79491", _fromQty);

        inventDim = inventDim::find(_inventDimId);
        while (dimFieldListEnumerator.moveNext())
        {
            inventDimFieldId = dimFieldListEnumerator.current();
            if (inventDim.(inventDimFieldId))
            {
                sysDictField = new SysDictField(tableNum(InventDim), inventDimFieldId);
                addKeyValue(sysDictField.label(), inventDim.(inventDimFieldId));
            }
        }

        note = strFmt(noteFormatCode, _versionAction, ': ', note);

        this.addToCaseLogNote(note);
    }

]]></Source>
			</Method>
			<Method>
				<Name>bomRouteApprove</Name>
				<Source><![CDATA[
    /// <summary>
    /// Approve the BOMs and routes with <c>EngChgCaseBOMRouteApprovalAction</c> set to approve.
    /// </summary>
    protected void bomRouteApprove()
    {
        EngChgCaseBOMRouteApproval      engChgCaseBOMRouteApproval;
        CaseAssociation                 caseAssociation;
        BOMTable                        bomTable;
        RouteTable                      routeTable;
        BOMApprove                      bomApprove;
        RouteApprove                    routeApprove;

        while select forUpdate engChgCaseBOMRouteApproval
            where engChgCaseBOMRouteApproval.ApproveAction == EngChgCaseBOMRouteApprovalAction::Approve
            join caseAssociation
                where caseAssociation.CaseRecId == this.parmCaseDetailRecId()
                   && caseAssociation.RecId == engChgCaseBOMRouteApproval.CaseAssociation
        {
            switch (caseAssociation.EntityType)
            {
                case CaseEntityType::BOM:
                    bomTable = BOMTable::findRecId(caseAssociation.RefRecId);
                    setPrefix(fieldLabelValue(tableNum(BOMTable), fieldNum(BOMTable,BomId), bomTable.bomId));

                    this.addEntityActionToCaseLog(engChgCaseBOMRouteApproval.ApproveAction, caseAssociation.EntityType, bomTable.BOMId);

                    bomApprove = BOMApprove::newBOMTable(bomTable);
                    bomApprove.parmApprover(this.parmApprover());
                    bomApprove.parmRemove(NoYes::No);
                    bomApprove.runOperation();

                    break;
                case CaseEntityType::Route:
                    routeTable = RouteTable::findRecId(caseAssociation.RefRecId);
                    setPrefix(fieldLabelValue(tableNum(RouteTable), fieldNum(RouteTable,RouteId), routeTable.RouteId));

                    this.addEntityActionToCaseLog(engChgCaseBOMRouteApproval.ApproveAction, caseAssociation.EntityType, routeTable.RouteId);

                    routeApprove = RouteApprove::newRouteTable(routeTable);
                    routeApprove.parmApprover(this.parmApprover());
                    routeApprove.parmRemove(NoYes::No);
                    routeApprove.runOperation();
                    break;
                default:
                    throw error("@SYS104799");
            }

            engChgCaseBOMRouteApproval.ApproveAction = EngChgCaseBOMRouteApprovalAction::None;
            engChgCaseBOMRouteApproval.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bomRouteVersionApproveActivate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Approve, activate and expire the BOM and route version with <c>EngChgCaseBOMRouteVersionApprovalAction</c> different from None.
    /// </summary>
    protected void bomRouteVersionApproveActivate()
    {
        EngChgCaseBOMRouteVersionApproval       engChgCaseBOMRouteApprovalVersion;
        CaseAssociation                         caseAssociation;

        while select forupdate engChgCaseBOMRouteApprovalVersion
            order by ApprovalVersionAction desc
            where engChgCaseBOMRouteApprovalVersion.ApprovalVersionAction != EngChgCaseBOMRouteVersionApprovalAction::None
            join caseAssociation
                where caseAssociation.CaseRecId == this.parmCaseDetailRecId()
                   && caseAssociation.RecId == engChgCaseBOMRouteApprovalVersion.EntityCaseAssociation
        {
            switch (engChgCaseBOMRouteApprovalVersion.EntityType)
            {
                case CaseEntityType::BOM:
                    this.bomVersionApproveActivateExpire(engChgCaseBOMRouteApprovalVersion);
                    break;

                case CaseEntityType::Route:
                    this.routeVersionApproveActivateExpire(engChgCaseBOMRouteApprovalVersion);
                    break;
                default:
                    throw error("@SYS104799");
            }

            engChgCaseBOMRouteApprovalVersion.ApprovalVersionAction = EngChgCaseBOMRouteVersionApprovalAction::None;
            engChgCaseBOMRouteApprovalVersion.OverrideEffectiveDate = dateNull();
            engChgCaseBOMRouteApprovalVersion.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bomVersionActivate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Activate the BOM version if not already active and set the FromDate.
    /// </summary>
    /// <param name="_engChgCaseBOMRouteApprovalVersion">
    /// The <c>EngChgCaseBOMRouteVersionApproval</c> record.
    /// </param>
    private void bomVersionActivate(EngChgCaseBOMRouteVersionApproval _engChgCaseBOMRouteApprovalVersion)
    {
        BOMVersion              bomVersion;
        BOMVersionActivate      bomVersionActivate;

        if (_engChgCaseBOMRouteApprovalVersion)
        {
            bomVersion = BOMVersion::findRecId(_engChgCaseBOMRouteApprovalVersion.EntityVersion, true);
            if (_engChgCaseBOMRouteApprovalVersion.OverrideEffectiveDate)
            {
                bomVersion.FromDate = _engChgCaseBOMRouteApprovalVersion.OverrideEffectiveDate;
                this.updateVersionRecord(bomVersion);
            }
            else if (this.parmPlannedEffectiveDate())
            {
                bomVersion.FromDate = this.parmPlannedEffectiveDate();
                this.updateVersionRecord(bomVersion);
            }

            if (!bomVersion || bomVersion.Active == NoYes::Yes)
            {
                // if bom version is already active, then no new activation is needed only updating the FromDate required
                return;
            }

            setPrefix(fieldLabelValue(tableNum(BOMVersion), fieldNum(BOMVersion,BOMId), bomVersion.BOMId));
            setPrefix(fieldLabelValue(tableNum(BOMVersion), fieldNum(BOMVersion,ItemId), bomVersion.ItemId));

            bomVersionActivate = BOMRouteVersionActivate::newBOMVersion(bomVersion);
            bomVersionActivate.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bomVersionApprove</Name>
				<Source><![CDATA[
    /// <summary>
    /// Approve the BOM version.
    /// </summary>
    /// <param name="_engChgCaseBOMRouteApprovalVersion">
    /// The <c>EngChgCaseBOMRouteVersionApproval</c> record.
    /// </param>
    private void bomVersionApprove(EngChgCaseBOMRouteVersionApproval _engChgCaseBOMRouteApprovalVersion)
    {
        BOMVersionApprove   bomVersionApprove;
        BOMVersion          bomVersion;

        if (_engChgCaseBOMRouteApprovalVersion)
        {
            bomVersion = BOMVersion::findRecId(_engChgCaseBOMRouteApprovalVersion.EntityVersion);

            if (bomVersion)
            {
                bomVersionApprove = BOMRouteVersionApprove::newBOMVersion(bomVersion);
                bomVersionApprove.parmApprover(this.parmApprover());
                bomVersionApprove.parmRemove(NoYes::No);
                bomVersionApprove.parmApproveBOM(NoYes::No);
                bomVersionApprove.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bomVersionApproveActivateExpire</Name>
				<Source><![CDATA[
    /// <summary>
    /// Call the approve, activate or expire BOM version approval process based on the <c>EngChgCaseBOMRouteVersionApproval</c> record action.
    /// </summary>
    /// <param name="_engChgCaseBOMRouteApprovalVersion">
    /// The <c>EngChgCaseBOMRouteVersionApproval</c> record.
    /// </param>
    private void bomVersionApproveActivateExpire(EngChgCaseBOMRouteVersionApproval _engChgCaseBOMRouteApprovalVersion)
    {
        BOMVersion bomVersion;

        if (_engChgCaseBOMRouteApprovalVersion)
        {
            switch (_engChgCaseBOMRouteApprovalVersion.ApprovalVersionAction)
            {
                case EngChgCaseBOMRouteVersionApprovalAction::Approve:
                    this.bomVersionApprove(_engChgCaseBOMRouteApprovalVersion);
                    break;
                case EngChgCaseBOMRouteVersionApprovalAction::ApproveActivate:
                    this.bomVersionApprove(_engChgCaseBOMRouteApprovalVersion);
                    this.bomVersionActivate(_engChgCaseBOMRouteApprovalVersion);
                    break;
                case EngChgCaseBOMRouteVersionApprovalAction::Activate:
                    this.bomVersionActivate(_engChgCaseBOMRouteApprovalVersion);
                    break;
                case EngChgCaseBOMRouteVersionApprovalAction::Expire:
                    this.bomVersionExpire(_engChgCaseBOMRouteApprovalVersion);
                    break;
                default:
                    throw error("@SYS104799");
            }

            bomVersion = bomVersion::findRecId(_engChgCaseBOMRouteApprovalVersion.EntityVersion);
            this.addVersionActionToCaseLog( _engChgCaseBOMRouteApprovalVersion.ApprovalVersionAction,
                                            _engChgCaseBOMRouteApprovalVersion.EntityType,
                                            bomVersion.BOMId,
                                            bomVersion.ItemId,
                                            bomVersion.InventDimId,
                                            bomVersion.FromDate,
                                            bomVersion.ToDate,
                                            bomVersion.FromQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bomVersionExpire</Name>
				<Source><![CDATA[
    /// <summary>
    /// Expire an active BOMVersion by setting the ToDate.
    /// </summary>
    /// <param name="_engChgCaseBOMRouteApprovalVersion">
    /// The <c>EngChgCaseBOMRouteVersionApproval</c> record.
    /// </param>
    private void bomVersionExpire(EngChgCaseBOMRouteVersionApproval _engChgCaseBOMRouteApprovalVersion)
    {
        BOMVersion              bomVersion;

        if (_engChgCaseBOMRouteApprovalVersion)
        {
            bomVersion = BOMVersion::findRecId(_engChgCaseBOMRouteApprovalVersion.EntityVersion, true);
            if (_engChgCaseBOMRouteApprovalVersion.OverrideEffectiveDate)
            {
                bomVersion.ToDate = _engChgCaseBOMRouteApprovalVersion.OverrideEffectiveDate;
                this.updateVersionRecord(bomVersion);
            }
            else if (this.parmPlannedEffectiveDate())
            {
                // subtract one day from the global date when expiring
                bomVersion.ToDate = num2date(date2num(this.parmPlannedEffectiveDate() - 1));
                this.updateVersionRecord(bomVersion);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the class is shown in the list of <c>Journal</c> types.
    /// </summary>
    /// <returns>
    ///    true if the class is shown in the list of <c>Journal</c> types; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A class that can be used in a batch journal is a class where the same parameters can be used
    ///    repeatedly. The dialog box can be shown and the parameters can be changed, but parameters of some
    ///    classes might build on data that is only valid for a short time. Running a class two times with the
    ///    same parameters is not always possible. If the <c>RunBaseBatch.canGoBatch</c> method is false, this
    ///    method will not have any effect.
    /// </remarks>
    public boolean canGoBatchJournal()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        DialogRunbase   dialog = super();
        Object          fieldApproverControl;

        fieldPlannedEffectiveDate = dialog.addFieldValue(extendedtypestr(EngChgCasePlannedEffectiveDate), this.parmPlannedEffectiveDate());

        fieldApprover = dialog.addFieldValue(extendedtypestr(BOMRouteApprover), approver, "@SYS3492");
        fieldApproverControl = fieldApprover.control();

        fieldApproverControl.registerOverrideMethod(identifierstr(LookupReference), methodstr(EngChgCaseBOMRouteApplyAction, workerLookup), this);
        fieldApproverControl.replacementFieldGroup(identifierstr(PersonnelNumber));

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Aligns the controls on the form after the execution of the form dialog.
    /// </summary>
    /// <param name="_dialog">
    ///     The instance of the dialog that was executed.
    /// </param>
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);
        fieldApprover.alignControl(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        this.parmApprover(fieldApprover.value());
        this.parmPlannedEffectiveDate(fieldPlannedEffectiveDate.value());

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        plannedEffectiveDate = dateNull();
        // Formatting the text according to LTR (left-to-right) or RTL (right-to-left).
        noteFormatCode = GlobalEx::generateStrConcatFormat();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Packs the <c>RunBase</c> class.
    /// </summary>
    /// <returns>
    ///    The packed class, as a container.
    /// </returns>
    /// <remarks>
    ///    All variables that you must have to re-instantiate the class after you construct it must be packed.
    ///    Typically, a macro declared in the class declaration is used to list the variables to pack. Another
    ///    macro holds a version number. This number refers to the version of variable list. When a new
    ///    variable is introduced you should typically do the following:
    ///    <list type="number">
    ///       <item>
    ///          <description>Increment the version number in the version macro.</description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///              Copy the current list to the <c>unpack</c> method.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>Add the new variable to the bottom of the list.</description>
    ///       </item>
    ///       <item>
    ///          <description>Recompile the class.</description>
    ///       </item>
    ///    </list>
    ///     When the
    ///    <c>
    ///       isSwappingPrompt
    ///    </c>
    ///     method returns true you may have to pack some prompt-related variables also.
    /// </remarks>
    public container pack()
    {
        if (this.inGetSaveLast())
        {
            return [#CurrentVersion, #CurrentListSysLastValue];
        }

        return [#CurrentVersion, #CurrentListNewSession];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmApprover</Name>
				<Source><![CDATA[
    BOMRouteApprover parmApprover(BOMRouteApprover _approver = approver)
    {
        if (!prmisDefault(_approver))
        {
            approver = _approver;
        }

        return approver;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCaseDetailRecId</Name>
				<Source><![CDATA[
    public CaseRecId parmCaseDetailRecId(CaseRecId _caseDetailRecId = caseDetailRecId)
    {
        if (!prmisDefault(_caseDetailRecId))
        {
            caseDetailRecId = _caseDetailRecId;
        }
        return caseDetailRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlannedEffectiveDate</Name>
				<Source><![CDATA[
    public EngChgCasePlannedEffectiveDate parmPlannedEffectiveDate(EngChgCasePlannedEffectiveDate _plannedEffectiveDate = plannedEffectiveDate)
    {
        if (_plannedEffectiveDate != dateNull())
        {
            plannedEffectiveDate = _plannedEffectiveDate;
        }

        return plannedEffectiveDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>routeVersionActivate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Activate the route version if not already active and set the FromDate.
    /// </summary>
    /// <param name="_engChgCaseBOMRouteApprovalVersion">
    /// The <c>EngChgCaseBOMRouteVersionApproval</c> record.
    /// </param>
    private void routeVersionActivate(EngChgCaseBOMRouteVersionApproval _engChgCaseBOMRouteApprovalVersion)
    {
        RouteVersion                routeVersion;
        RouteVersionActivate        routeVersionActivate;

        if (_engChgCaseBOMRouteApprovalVersion)
        {
            routeVersion = RouteVersion::findRecId(_engChgCaseBOMRouteApprovalVersion.EntityVersion, true);
            if (_engChgCaseBOMRouteApprovalVersion.OverrideEffectiveDate)
            {
                routeVersion.FromDate = _engChgCaseBOMRouteApprovalVersion.OverrideEffectiveDate;
                this.updateVersionRecord(routeVersion);
            }
            else if (this.parmPlannedEffectiveDate())
            {
                routeVersion.FromDate = this.parmPlannedEffectiveDate();
                this.updateVersionRecord(routeVersion);
            }

            if (!routeVersion || routeVersion.Active == NoYes::Yes)
            {
                return; // if route version is already active, then no new activation is needed only updating the FromDate is required.
            }

            setPrefix(fieldLabelValue(tableNum(RouteVersion), fieldNum(RouteVersion,RouteId), routeVersion.RouteId));
            setPrefix(fieldLabelValue(tableNum(RouteVersion), fieldNum(RouteVersion,ItemId), routeVersion.ItemId));

            routeVersionActivate = BOMRouteVersionActivate::newRouteVersion(routeVersion);
            routeVersionActivate.parmFailOnResourceInconsistency(true);
            routeVersionActivate.parmLogResourceInconsistency(true);
            routeVersionActivate.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>routeVersionApprove</Name>
				<Source><![CDATA[
    /// <summary>
    /// Approve the route version.
    /// </summary>
    /// <param name="_engChgCaseBOMRouteApprovalVersion">
    /// The <c>EngChgCaseBOMRouteVersionApproval</c> record.
    /// </param>
    private void routeVersionApprove(EngChgCaseBOMRouteVersionApproval _engChgCaseBOMRouteApprovalVersion)
    {
        RouteVersionApprove   routeVersionApprove;
        RouteVersion          routeVersion;

        if (_engChgCaseBOMRouteApprovalVersion)
        {
            routeVersion = RouteVersion::findRecId(_engChgCaseBOMRouteApprovalVersion.EntityVersion);

            routeVersionApprove = BOMRouteVersionApprove::newRouteVersion(routeVersion);
            routeVersionApprove.parmApprover(this.parmApprover());
            routeVersionApprove.parmRemove(NoYes::No);
            routeVersionApprove.parmApproveRoute(NoYes::No);
            routeVersionApprove.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>routeVersionApproveActivateExpire</Name>
				<Source><![CDATA[
    /// <summary>
    /// Call the approve, activate or expire route version approval process based on the <c>EngChgCaseBOMRouteVersionApproval</c> record action.
    /// </summary>
    /// <param name="_engChgCaseBOMRouteApprovalVersion">
    /// The <c>EngChgCaseBOMRouteVersionApproval</c> record.
    /// </param>
    private void routeVersionApproveActivateExpire(EngChgCaseBOMRouteVersionApproval _engChgCaseBOMRouteApprovalVersion)
    {
        RouteVersion routeVersion;

        if (_engChgCaseBOMRouteApprovalVersion)
        {
            switch (_engChgCaseBOMRouteApprovalVersion.ApprovalVersionAction)
            {
                case EngChgCaseBOMRouteVersionApprovalAction::Approve:
                    this.routeVersionApprove(_engChgCaseBOMRouteApprovalVersion);
                    break;
                case EngChgCaseBOMRouteVersionApprovalAction::ApproveActivate:
                    this.routeVersionApprove(_engChgCaseBOMRouteApprovalVersion);
                    this.routeVersionActivate(_engChgCaseBOMRouteApprovalVersion);
                    break;
                case EngChgCaseBOMRouteVersionApprovalAction::Activate:
                    this.routeVersionActivate(_engChgCaseBOMRouteApprovalVersion);
                    break;
                case EngChgCaseBOMRouteVersionApprovalAction::Expire:
                    this.routeVersionExpire(_engChgCaseBOMRouteApprovalVersion);
                    break;
                default:
                    throw error("@SYS104799");
            }

            routeVersion = routeVersion::findRecId(_engChgCaseBOMRouteApprovalVersion.EntityVersion);
            this.addVersionActionToCaseLog( _engChgCaseBOMRouteApprovalVersion.ApprovalVersionAction,
                                            _engChgCaseBOMRouteApprovalVersion.EntityType,
                                            routeVersion.RouteId,
                                            routeVersion.ItemId,
                                            routeVersion.InventDimId,
                                            routeVersion.FromDate,
                                            routeVersion.ToDate,
                                            routeVersion.FromQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>routeVersionExpire</Name>
				<Source><![CDATA[
    /// <summary>
    /// Expire an active RouteVersion by setting the ToDate.
    /// </summary>
    /// <param name="_engChgCaseBOMRouteApprovalVersion">
    /// The <c>EngChgCaseBOMRouteVersionApproval</c> record.
    /// </param>
    private void routeVersionExpire(EngChgCaseBOMRouteVersionApproval _engChgCaseBOMRouteApprovalVersion)
    {
        RouteVersion            routeVersion;

        if (_engChgCaseBOMRouteApprovalVersion)
        {
            routeVersion = RouteVersion::findRecId(_engChgCaseBOMRouteApprovalVersion.EntityVersion, true);
            if (_engChgCaseBOMRouteApprovalVersion.OverrideEffectiveDate)
            {
                routeVersion.ToDate = _engChgCaseBOMRouteApprovalVersion.OverrideEffectiveDate;
                this.updateVersionRecord(routeVersion);
            }
            else if (this.parmPlannedEffectiveDate())
            {
                // subtract one day from the global date when expiring
                routeVersion.ToDate = num2date(date2num(this.parmPlannedEffectiveDate() - 1));
                this.updateVersionRecord(routeVersion);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        try
        {
            ttsbegin;

            this.bomRouteApprove();
            this.bomRouteVersionApproveActivate();

            if (caseLogNotes)
            {
                CaseLog::createDefaultTypeCaseLog(this.parmCaseDetailRecId(), caseLogNotes, "@SYS4009246");
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);
        boolean     ret = false;

        switch (version)
        {
            case #CurrentVersion:
                if (this.inGetSaveLast())
                {
                    [version, #CurrentListSysLastValue] = _packedClass;
                }
                else
                {
                    [version, #CurrentListNewSession] = _packedClass;
                }
                ret = true;

                break;
            default :
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVersionRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a record with calling the validateWrite method first.
    /// </summary>
    /// <param name="_version">
    /// The record to update.
    /// </param>
    /// <exception cref="Exception::Error">
    /// An error is thrown if the validate write fails.
    /// </exception>
    private void updateVersionRecord(Common _version)
    {
        if (!_version.validateWrite())
        {
            throw Exception::Error;
        }

        _version.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Executes the validation of the batch job.
    /// </summary>
    /// <param name="_calledFrom">
    ///     The calling object that invoked the dialog.
    /// </param>
    /// <returns>
    ///     true if the validation suceeded; otherwise, false.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>workerLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a lookup for selecting a worker in the current legal entity.
    /// </summary>
    /// <param name="_callerControl">
    ///    The control that called the method.
    /// </param>
    /// <returns>
    ///    The selected record.
    /// </returns>
    public Common workerLookup(Object _callerControl)
    {
        return HcmWorkerLookup::newOnlyActiveEmployeesWithinCompany().lookupWorker(_callerControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EngChgCaseBOMRouteApplyAction construct()
    {
        return new EngChgCaseBOMRouteApplyAction();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS4009247";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        EngChgCaseBOMRouteApplyAction       engChgCaseBOMRouteApplyAction = EngChgCaseBOMRouteApplyAction::construct();
        CaseDetail                          caseDetail;

        if (args.dataset() != tableNum(CaseDetail))
        {
            throw error(strFmt("@SYS29104",classId2Name(classIdGet(engChgCaseBOMRouteApplyAction))));
        }

        caseDetail = args.record();

        engChgCaseBOMRouteApplyAction.init();
        engChgCaseBOMRouteApplyAction.getLast();
        engChgCaseBOMRouteApplyAction.parmCaseDetailRecId(caseDetail.RecId);
        engChgCaseBOMRouteApplyAction.parmPlannedEffectiveDate(caseDetail.PlannedEffectiveDate);

        if (engChgCaseBOMRouteApplyAction.prompt())
        {
            engChgCaseBOMRouteApplyAction.runOperation();
        }

        // reload the caller form after the approval process
        if (formHasMethod(args.caller(), identifierStr(reloadData)))
        {
            args.caller().reloadData();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>