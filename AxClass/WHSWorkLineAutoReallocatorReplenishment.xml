<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkLineAutoReallocatorReplenishment</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkLineAutoReallocatorReplenishment</c> class is responsible for automatically reallocating a replenishment work line.
/// </summary>
[WHSWorkLineReallocatorAttribute(WHSWorkTransType::Replenishment)]
public class WHSWorkLineAutoReallocatorReplenishment extends WHSWorkLineAutoReallocatorBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>reallocateWorkLine</Name>
				<Source><![CDATA[
    [SysObsolete('Method is obsoleted to support catch weight items. Callers should redirect their calls to the reallocateWorkLineHandlingQty method. Please file an extensibility request if other access is required.', false, 30\9\2019)]
    public InventQty reallocateWorkLine()
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), this.parmReallocateItemId());
        
        return this.reallocateWorkLineHandlingQuantity();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reallocateWorkLineHandlingQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public InventHandlingQty reallocateWorkLineHandlingQty()
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightItemLogic(funcName(), this.parmReallocateItemId()))
        {
            return this.reallocateWorkLineHandlingQuantity();
        }

        return this.reallocateWorkLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reallocateWorkLineHandlingQuantity</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal protected InventHandlingQty reallocateWorkLineHandlingQuantity()
    {
        ttsbegin;

        super();

        WHSWorkLineReallocationDemandWorkUpdator demandWorkUpdator = WHSWorkLineReallocationDemandWorkUpdator::newFromShortPickedWorkLine(workLineToReallocate, reallocatedInventHandlingQty, lastLineNumOfWorkBeforeReallocatedLinesAreCreated + 1);

        // if AutoDecrementShipment is false, the demand line's load line qty won't have decreased
        demandWorkUpdator.parmAdjustLoadLineQty(workException.AutoDecrementShipment);
        demandWorkUpdator.update();

        if (workLineToReallocate.QtyWork == 0)
        {
            /*
              When qtywork = 0 on the short pick work line and no quantity was reallocated,
              the work status of final put work line could be closed when there is only one pick line.
              In this scenario, we need update work status. And we can do it, because the replenishment work link are already updated.
            */
            WHSWorkTable::updateWorkStatusFromWorkLines(workLineToReallocate.WorkId, userId);
        }

        ttscommit;

        return reallocatedInventHandlingQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateHandlingQtyToReallocate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal protected InventHandlingQty calculateHandlingQtyToReallocate(InventHandlingQty _requestedInventHandlingQtyToReallocate)
    {
        return this.calculateInventHandlingQuantityToReallocate(_requestedInventHandlingQtyToReallocate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateInventHandlingQuantityToReallocate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal protected  InventHandlingQty calculateInventHandlingQuantityToReallocate(InventHandlingQty _requestedInventHandlingQtyToReallocate)
    {
        return _requestedInventHandlingQtyToReallocate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateQtyAvailForWorkCreationAboveLocationDims</Name>
				<Source><![CDATA[
    [SysObsolete('Method is obsoleted to support catch weight items. Callers should redirect their calls to the calculateHandlingQtyAvailForWorkCreationAboveLocationDims method. Please file an extensibility request if other access is required.', false, 30\9\2019)]
    public InventQty calculateQtyAvailForWorkCreationAboveLocationDims()
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), this.parmReallocateItemId());

        return this.calculateHandlingQuantityAvailForWorkCreationAboveLocationDims();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateHandlingQtyAvailForWorkCreationAboveLocationDims</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public InventHandlingQty calculateHandlingQtyAvailForWorkCreationAboveLocationDims()
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightItemLogic(funcName(), this.parmReallocateItemId()))
        {
            return this.calculateHandlingQuantityAvailForWorkCreationAboveLocationDims();
        }

        return this.calculateQtyAvailForWorkCreationAboveLocationDims();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateHandlingQuantityAvailForWorkCreationAboveLocationDims</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal protected InventHandlingQty calculateHandlingQuantityAvailForWorkCreationAboveLocationDims()
    {
        return initialWorkLineInventHandlingQty - workLineToReallocate.InventQtyWork;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpReallocatedWorkLines</Name>
				<Source><![CDATA[
    protected void initTmpReallocatedWorkLines()
    {
        tmpWorkLine.WorkType                = WHSWorkType::Pick;
        tmpWorkLine.WorkCreateId            = workTable.WorkBuildId;
        tmpWorkLine.WorkTransType           = WHSWorkTransType::Replenishment;

        this.initTmpWorkLineFromWorkLineToReallocate();
        this.initTmpWorkLineFromWaveTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpWorkLineFromWaveTable</Name>
				<Source><![CDATA[
    protected void initTmpWorkLineFromWaveTable()
    {
        WHSWaveTable waveTable = WHSWaveTable::find(workTable.WaveId);

        if (waveTable)
        {
            tmpWorkLine.OriginType  = WHSOriginType::Wave;
            tmpWorkLine.OriginRefId = waveTable.WaveId;
            tmpWorkLine.WaveId      = waveTable.WaveId;

            tmpWorkLine.WaveAttributeCode    = waveTable.WaveAttributeCode;
        }
        else
        {
            tmpWorkLine.OriginType = WHSOriginType::Replenishment;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpWorkLineFromWorkLineToReallocate</Name>
				<Source><![CDATA[
    protected void initTmpWorkLineFromWorkLineToReallocate()
    {
        tmpWorkLine.WorkId      = workLineToReallocate.WorkId;
        tmpWorkLine.ItemId      = workLineToReallocate.ItemId;

        InventDim inventDim = workLineToReallocate.inventDim();
        inventDim.clearLocationAndBelowDim(workLineToReallocate.ItemId);
        inventDim = InventDim::findOrCreate(inventDim);
        tmpWorkLine.InventDimId = inventDim.inventDimId;
        tmpWorkLine.InventTransId = workLineToReallocate.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSyncWorkHeaderStatusWhenNoQtyReallocated</Name>
				<Source><![CDATA[
    protected boolean shouldSyncWorkHeaderStatusWhenNoQtyReallocated()
    {
        /*
          For replenishment work, it is not needed to check work status.
          And when qtywork = 0 on short pick line and there is only one pick line, it is not allowed to check work status.
          Because work status will set to closed in this scenario, but qty on replenishment work link is not been updated.
          When work status of replenishment work is been set to closed, demand work will try to physical reserve the item,
          the quantity is based on the qty on replenishment work link.
        */
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>