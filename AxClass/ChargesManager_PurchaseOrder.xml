<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ChargesManager_PurchaseOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Charges event handlers for purchase order document.
/// </summary>
public class ChargesManager_PurchaseOrder
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>onInitCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize charge for purchase order based on charge on vendor invoice line.
    /// </summary>
    /// <param name="charge">
    /// The <c>MarkupTrans</c> charge buffer that has been created.
    /// </param>
    /// <param name="chargeOrigin">
    /// The <c>MarkupTrans</c> buffer which the charge originated from.
    /// </param>
    /// <param name="origin">
    /// The <c>Common</c> original buffer where the orginal <c>MarkupTrans</c> buffer came from.
    /// </param>
    /// <param name="destination">
    /// The <c>Common</c> buffer the charge is associated with.
    /// </param>
    /// <param name="reverseSign">
    /// Instruction on whether to reverse signing.
    /// </param>
    [SubscribesTo(classStr(Markup), delegatestr(Markup, chargeInitialized))]
    public static void onInitCharge(MarkupTrans charge, MarkupTrans chargeOrigin, Common origin, Common destination, NoYes reverseSign)
    {
        VendInvoiceTrans    vendInvoiceTrans;
        PurchLine           purchLine;
        PurchQty            purchQtyToHandle;

        //Credit note and copy from vendor invoice line scenarios with Proportional charge
        if (origin.TableId == tableNum(VendInvoiceTrans)
            && destination.TableId == tableNum(PurchLine)
            && charge.MarkupCategory == MarkupCategory::Proportional)
        {
            vendInvoiceTrans = origin;
            purchLine = destination;

            purchQtyToHandle = purchLine.PurchQty;
            if (reverseSign)
            {
                purchQtyToHandle = purchQtyToHandle * -1;
            }

            charge.Value = purchQtyToHandle / vendInvoiceTrans.Qty * chargeOrigin.getCalculatedAmountRepresentable();
            if (reverseSign)
            {
                charge.Value = charge.Value * -1;
            }

            charge.update();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>