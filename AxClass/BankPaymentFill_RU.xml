<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankPaymentFill_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankPaymentFill_RU</c> class is the base class for bank payment order filling.
/// </summary>
abstract class BankPaymentFill_RU
{
    BankAccountTable            bankAccountTable;

    BankPaymentOrderJour_RU     paymentOrderJour;

    CustVendTable               custVendTable;

    BankAccountMap              bankAccountMap;
    CustVendPaymModeTable       custVendPaymModeTable;

    BankAdvancedTransType_RU    advancedTransType;
    BankCurrencyTransferLog_RU  currencyTransferLog;

    protected const str comma = ', ';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addressBankPayer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the full address of the payer bank.
    /// </summary>
    /// <returns>
    /// The formatted information of the address of the payer bank.
    /// </returns>
    Addressing addressBankPayer()
    {
        if (this.isWePayer())
        {
            return bankAccountTable.bankShortAddressing_RU();
        }
        else
        {
            return bankAccountMap.bankShortAddressing_RU();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addressBankRecipient</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the full address of the recipient bank.
    /// </summary>
    /// <returns>
    /// The formatted information of the address of the recipient bank.
    /// </returns>
    Addressing addressBankRecipient()
    {
        if (this.isWePayer())
        {
            return bankAccountMap.bankShortAddressing_RU();
        }
        else
        {
            return bankAccountTable.bankShortAddressing_RU();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addressPayer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the full address of the payer.
    /// </summary>
    /// <returns>
    /// The formatted information of the address of the payer.
    /// </returns>
    Addressing addressPayer()
    {
        if (this.isWePayer())
            return CompanyInfo::find().postalAddress().Address;

        return DirParty::primaryPostalAddress(custVendTable.Party).Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addressRecipient</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the full address of the recipient.
    /// </summary>
    /// <returns>
    /// The formatted information of the address of the recipient.
    /// </returns>
    Addressing addressRecipient()
    {
        if (this.isWePayer())
            return DirParty::primaryPostalAddress(custVendTable.Party).Address;

        return CompanyInfo::find().postalAddress().Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>advancedTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the advanced transaction extended type.
    /// </summary>
    /// <returns>
    /// The transaction extended type.
    /// </returns>
    public BankAdvancedTransType_RU advancedTransType()
    {
        return advancedTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankAccountIdPayer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the account identification of the payer.
    /// </summary>
    /// <returns>
    /// Unique identification account of the payer.
    /// </returns>
    public BankAccountID bankAccountIdPayer()
    {
        if (this.isWePayer())
        {
            return bankAccountTable.AccountID;
        }
        else
        {
            return bankAccountMap.AccountID;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankAccountIdRecipient</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets account identification of the recipient.
    /// </summary>
    /// <returns>
    /// Unique indentification of recipient's account.
    /// </returns>
    public BankAccountID bankAccountIdRecipient()
    {
        if (this.isWePayer())
        {
            return bankAccountMap.AccountID;
        }
        else
        {
            return bankAccountTable.AccountID;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankAccountPayer</Name>
				<Source><![CDATA[
    BankAccount bankAccountPayer()
    {
        if (this.isWePayer())
        {
            if (bankAccountTable.fieldAccessRight(fieldStr(BankAccountTable, CorrAccount_W)) == AccessRight::NoAccess)
                return '';

            return bankAccountTable.AccountNum;
        }
        else
        {
            if (bankAccountMap.fieldAccessRight(fieldStr(BankAccountMap, CorrAccount_W)) == AccessRight::NoAccess)
                return '';

            return bankAccountMap.AccountNum;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankAccountRecipient</Name>
				<Source><![CDATA[
    BankAccount bankAccountRecipient()
    {
        if (this.isWePayer())
        {
            if (bankAccountTable.fieldAccessRight(fieldStr(BankAccountTable, CorrAccount_W)) == AccessRight::NoAccess)
                return '';

            return bankAccountMap.AccountNum;
        }
        else
        {
            if (bankAccountMap.fieldAccessRight(fieldStr(BankAccountMap, CorrAccount_W)) == AccessRight::NoAccess)
                return '';

            return bankAccountTable.AccountNum;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankNamePayer</Name>
				<Source><![CDATA[
    public TempStr bankNamePayer()
    {
        if (this.isWePayer())
        {
            return this.getBankNameFromBankAccountTable();
        }
        else
        {
            return this.getBankNameFromBankAccountMap();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankNameRecipient</Name>
				<Source><![CDATA[
    public TempStr bankNameRecipient()
    {
        if (this.isWePayer())
        {
            return this.getBankNameFromBankAccountMap();
        }
        else
        {
            return this.getBankNameFromBankAccountTable();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bic_Payer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the payer bank identification code.
    /// </summary>
    /// <returns>
    /// Payer BIC.
    /// </returns>
    BankBIC_RU bic_Payer()
    {
        if (this.isWePayer())
        {
            return bankAccountTable.bankBIC_RU();
        }
        else
        {
            return bankAccountMap.bankBIC_RU();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bic_Recipient</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the recipient bank identification code.
    /// </summary>
    /// <returns>
    /// Recipient BIC.
    /// </returns>
    BankBIC_RU bic_Recipient()
    {
        if (this.isWePayer())
        {
            return bankAccountMap.bankBIC_RU();
        }
        else
        {
            return bankAccountTable.bankBIC_RU();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>branchBankNamePayer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the payer's bank branch group name.
    /// </summary>
    /// <returns>
    /// The payer's bank branch group name.
    /// </returns>
    public TempStr branchBankNamePayer()
    {
        TempStr ret;

        if (this.isWePayer())
        {
            if (bankAccountTable.bankIsBranch_RU())
            {
                ret = this.getBankName(bankAccountTable);
            }
        }
        else
        {
            if (bankAccountMap.bankIsBranch_RU())
            {
                ret = this.getBankName(bankAccountMap);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>branchBankNameRecipient</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the recipient's bank branch name.
    /// </summary>
    /// <returns>
    /// The recipient's bank branch name.
    /// </returns>
    public TempStr branchBankNameRecipient()
    {
        TempStr ret;

        if (this.isWePayer())
        {
            if (bankAccountMap.bankIsBranch_RU())
            {
                ret = this.getBankName(bankAccountMap);
            }
        }
        else
        {
            if (bankAccountTable.bankIsBranch_RU())
            {
                ret = this.getBankName(bankAccountTable);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>commissionBankAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the commission bank account number.
    /// </summary>
    /// <returns>
    /// The commission bank account number.
    /// </returns>
    public AccountNum commissionBankAccount()
    {
        return currencyTransferLog.commBankAccountPayer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>corrBankAccountPayer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the correspondence bank account of the payer.
    /// </summary>
    /// <returns>
    /// The corr. bank account of the payer.
    /// </returns>
    BankCorrAccount_W corrBankAccountPayer()
    {
        if (this.isWePayer())
        {
            if (bankAccountTable.fieldAccessRight(fieldStr(BankAccountTable, CorrAccount_W)) == AccessRight::NoAccess)
                return '';

            return bankAccountTable.CorrAccount_W;
        }
        else
        {
            if (bankAccountMap.fieldAccessRight(fieldStr(BankAccountMap, CorrAccount_W)) == AccessRight::NoAccess)
                return '';

            return bankAccountMap.CorrAccount_W;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>corrBankAccountRecipient</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the correspondence bank account of the recipient.
    /// </summary>
    /// <returns>
    /// The recipient's corr. bank account.
    /// </returns>
    BankCorrAccount_W corrBankAccountRecipient()
    {
        if (this.isWePayer())
        {
            if (bankAccountTable.fieldAccessRight(fieldStr(BankAccountTable, CorrAccount_W)) == AccessRight::NoAccess)
                return '';

            return bankAccountMap.CorrAccount_W;
        }
        else
        {
            if (bankAccountMap.fieldAccessRight(fieldStr(BankAccountMap, CorrAccount_W)) == AccessRight::NoAccess)
                return '';

            return bankAccountTable.CorrAccount_W;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>countryOKSMCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the country code by OKSM.
    /// </summary>
    /// <returns>
    /// The country code defined by OKSM.
    /// </returns>
    CountryOKSMCode_RU countryOKSMCode()
    {
        if (CompanyInfo::find().Resident_W)
            return LogisticsAddressCountryRegion::find(DirParty::primaryPostalAddress(custVendTable.Party).CountryRegionId).oksmCode_RU;
        else
            return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bank payment order's currency full name.
    /// </summary>
    /// <returns>
    /// The name of the bank payment order's currency.
    /// </returns>
    Description currencyName()
    {
        return Currency::find(paymentOrderJour.CurrencyCode).Txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyTransferLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>BankCurrencyTransferLog_RU</c> record.
    /// </summary>
    /// <returns>
    /// The <c>BankCurrencyTransferLog_RU</c> record.
    /// </returns>
    protected BankCurrencyTransferLog_RU currencyTransferLog()
    {
        BankCurrencyTransferLog_RU currencyTransfer;

        if (advancedTransType == BankAdvancedTransType_RU::CurrBuy  ||
            advancedTransType == BankAdvancedTransType_RU::CurrSell ||
            advancedTransType == BankAdvancedTransType_RU::CurrTransfer)
        {
            currencyTransfer = BankCurrencyTransferLog_RU::findByLedgerTrans(paymentOrderJour.JournalNum, paymentOrderJour.Voucher);
        }

        return currencyTransfer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bank group name based on the <c>BankAccountMap</c> record provided.
    /// </summary>
    /// <param name="_localBankAccountMap">
    /// The given <c>BankAccountMap</c> instance.
    /// </param>
    /// <returns>
    /// Bank group name.
    /// </returns>
    protected TempStr getBankName(BankAccountMap _localBankAccountMap)
    {
        Addressing shortAddressing;
        TempStr    tempStr = _localBankAccountMap.bankName_RU();

        if (paymentOrderJour.PaymOrderType == PaymOrderType_RU::MST)
        {
            shortAddressing = _localBankAccountMap.bankShortAddressing_RU();

            if (shortAddressing)
            {
                tempStr += comma + shortAddressing;
            }
        }

        return tempStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankNameFromBankAccountMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bank group name based on the <c>BankAccountMap</c> table map.
    /// </summary>
    /// <returns>
    /// The bank group name.
    /// </returns>
    protected TempStr getBankNameFromBankAccountMap()
    {
        if (bankAccountMap.bankIsBranch_RU())
        {
            return this.getBaseBankName(bankAccountMap);
        }
        else
        {
            return this.getBankName(bankAccountMap);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankNameFromBankAccountTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bank group name based on the <c>BankAccountTable</c> table.
    /// </summary>
    /// <returns>
    /// Bank group name.
    /// </returns>
    protected TempStr getBankNameFromBankAccountTable()
    {
        if (bankAccountTable.bankIsBranch_RU())
        {
            return this.getBaseBankName(bankAccountTable);
        }
        else
        {
            return this.getBankName(bankAccountTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBaseBankName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bank main group name based on the <c>BankAccountMap</c> table map provided.
    /// </summary>
    /// <param name="_localBankAccountMap">
    /// The <c>BankAccountMap</c> table map.
    /// </param>
    /// <returns>
    /// Bank main group name.
    /// </returns>
    protected TempStr getBaseBankName(BankAccountMap _localBankAccountMap)
    {
        TempStr     tempStr = _localBankAccountMap.baseBankName_RU();
        Addressing  shortAddressing;

        if (paymentOrderJour.PaymOrderType == PaymOrderType_RU::MST)
        {
            shortAddressing = _localBankAccountMap.baseBankShortAddressing_RU();

            if (shortAddressing)
            {
                tempStr += strFmt('%1%2%3', "@SYS35667", ' ', shortAddressing);
            }
        }

        return tempStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getForeignRecipientInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the foreign bank recipient info.
    /// </summary>
    /// <returns>
    /// A string containing the foreign bank recipient info.
    /// </returns>
    protected str getForeignRecipientInfo()
    {
        container info = [this.getForeignRecipientName()];

        if (bankAccountMap.ForeignAccount_RU)
        {
            info += bankAccountMap.ForeignAccount_RU;
        }

        if (bankAccountMap.ForeignSWIFT_RU)
        {
            info += strFmt("@SYS76498", "@SYS9360", bankAccountMap.ForeignSWIFT_RU);
        }

        return con2str(info, comma);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getForeignRecipientName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the foreign recipient bank name.
    /// </summary>
    /// <returns>
    /// The name of the foreign recipient bank.
    /// </returns>
    abstract protected Name getForeignRecipientName()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBankAccountMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>BankAccountMap</c> table map instance.
    /// </summary>
    /// <returns>
    /// An initialized <c>BankAccountMap</c> table map instance.
    /// </returns>
    abstract protected BankAccountMap initBankAccountMap()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBankAccountTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>BankAccountTable</c> table buffer.
    /// </summary>
    /// <returns>
    /// <c>BankAccountTable</c> table.
    /// </returns>
    protected BankAccountTable initBankAccountTable()
    {
        return BankAccountTable::find(paymentOrderJour.BankIdPayer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBankTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes bank transaction extended type.
    /// </summary>
    protected void initBankTransType()
    {
        advancedTransType = BankTransType::find(paymentOrderJour.BankTransactionType).BankAdvancedTransType_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendPaymModeTable</Name>
				<Source><![CDATA[
    abstract protected CustVendPaymModeTable initCustVendPaymModeTable()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendTable</Name>
				<Source><![CDATA[
    abstract protected CustVendTable initCustVendTable()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inn_Payer</Name>
				<Source><![CDATA[
    INN_RU inn_Payer()
    {
        if (currencyTransferLog)
        {
            return currencyTransferLog.payerINN();
        }
        else if (this.isWePayer())
            return CompanyInfo::find().partyINNasOfDate_RU(paymentOrderJour.PaymentTransDate);
        else
            return TaxRegistration::legislationRegistrationValue(custVendTable.Party, TaxRegistrationTypesList::INN, paymentOrderJour.PaymentTransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inn_Recipient</Name>
				<Source><![CDATA[
    INN_RU inn_Recipient()
    {
        if (currencyTransferLog)
        {
            return currencyTransferLog.payerINN();
        }
        else if (this.isWePayer())
            return TaxRegistration::legislationRegistrationValue(custVendTable.Party, TaxRegistrationTypesList::INN, paymentOrderJour.PaymentTransDate);
        else
            return CompanyInfo::find().partyINNasOfDate_RU(paymentOrderJour.PaymentTransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWePayer</Name>
				<Source><![CDATA[
    abstract protected boolean isWePayer()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>kppu_Payer</Name>
				<Source><![CDATA[
    KPPUDisplay_RU kppu_Payer()
    {
        KPPUDisplay_RU ret;

        if (paymentOrderJour.PrintKPP)
        {
            if (currencyTransferLog)
            {
                ret = CompanyInfo::find().partyKPPasOfDate_RU(currencyTransferLog.TransDate);
            }
            else if (this.isWePayer())
            {
                ret = CompanyInfo::find().partyKPPasOfDate_RU(paymentOrderJour.PaymentTransDate);
            }
            else
            {
                ret = TaxRegistration::legislationRegistrationValue(custVendTable.Party, TaxRegistrationTypesList::KPP, paymentOrderJour.PaymentTransDate);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kppu_Recipient</Name>
				<Source><![CDATA[
    KPPUDisplay_RU kppu_Recipient()
    {
        KPPUDisplay_RU  ret = "";

        if (paymentOrderJour.PrintKPP)
        {
            if (currencyTransferLog)
            {
                ret = CompanyInfo::find().partyKPPasOfDate_RU(currencyTransferLog.TransDate);
            }
            else if (this.isWePayer())
            {
                ret = TaxRegistration::legislationRegistrationValue(custVendTable.Party, TaxRegistrationTypesList::KPP, paymentOrderJour.PaymentTransDate);
            }
            else
            {
                ret = CompanyInfo::find().partyKPPasOfDate_RU(paymentOrderJour.PaymentTransDate);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>namePayer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the payer name.
    /// </summary>
    /// <returns>
    /// A string containing the name of the payer.
    /// </returns>
    TempStr namePayer()
    {
        const str delimiter = '//';

        TempStr     address;
        CompanyInfo companyInfo;

        void prepAddress()
        {
            address = strReplace(address, '\n', '');
            while (strScan(address, '  ', 1, strlen(address)))
            {
                address = strReplace(address, '  ', ' ');
            }
        }

        if (currencyTransferLog)
        {
            return currencyTransferLog.namePayer();
        }
        else if (this.isWePayer())
        {
            if (paymentOrderJour.AccountNumForeignRecipient)
            {
                companyInfo = CompanyInfo::find();
                address = DirParty::getPostalAddressByType(companyInfo.RecId, LogisticsLocationRoleType::Payment);
                prepAddress();
                return companyInfo.Name + "@GLS102908" + delimiter + address + delimiter;
            }
            else
            {
                return CompanyInfo::find().Name;
            }
        }
        else
        {
            return custVendTable.name();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>nameRecipient</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the recipient name.
    /// </summary>
    /// <returns>
    /// A string containing the name of the recipient.
    /// </returns>
    VendName nameRecipient()
    {
        if (currencyTransferLog)
        {
            return currencyTransferLog.namePayer();
        }
        else if (this.isWePayer())
        {
            if (paymentOrderJour.AccountNumForeignRecipient)
            {
                if (paymentOrderJour.CorrBankRecipient)
                {
                    return bankAccountMap.foreignBankName_RU();
                }
                else
                {
                    return this.getForeignRecipientInfo() + comma + bankAccountMap.foreignBankName_RU();
                }
            }
            else
            {
                return custVendTable.name();
            }
        }
        else
        {
            return CompanyInfo::find().name();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>BankPaymentFill_RU</c> class initialized from <c>BankPaymentOrderJour_RU</c> table.
    /// </summary>
    /// <param name="_paymentOrderJour">
    /// <c>BankPaymentOrderJour_RU</c> table buffer.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Throws <c>Exception::Error</c> if no <c>BankPaymentOrder_RU</c> is provided.
    /// </exception>
    protected void new(BankPaymentOrderJour_RU _paymentOrderJour)
    {
        if (! _paymentOrderJour)
        {
            throw error(Error::missingRecord(funcName()));
        }
        paymentOrderJour         = _paymentOrderJour;
        this.initBankTransType();

        currencyTransferLog      = this.currencyTransferLog();
        custVendTable            = this.initCustVendTable();
        custVendPaymModeTable    = this.initCustVendPaymModeTable();

        bankAccountTable         = this.initBankAccountTable();
        bankAccountMap           = this.initBankAccountMap();
    }

]]></Source>
			</Method>
			<Method>
				<Name>numeralsToLetter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the amount in word representation.
    /// </summary>
    /// <returns>
    /// Amount value spelled out in words.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws <c>Exception::Error</c> exception if invalid payment order type is provided.
    /// </exception>
    NumeralsToLetter_RU numeralsToLetter()
    {
        NumeralsToLetter_RU     numeralsToLetter;
        Amount                  amount    = abs(paymentOrderJour.AmountCur);
        RNumDateInWordConverter converter = RNumDateInWordConverter::construct();

        switch (paymentOrderJour.PaymOrderType)
        {
            case PaymOrderType_RU::MST:
                // Base currency
                numeralsToLetter = converter.numeralsToCurrency(amount, paymentOrderJour.CurrencyCode);
                break;

            case PaymOrderType_RU::Cur:
                // Other currencies
                numeralsToLetter = str2Capital(converter.numeralsToCurrency(amount, paymentOrderJour.CurrencyCode));
                break;

            default :
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return numeralsToLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>okato</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Russian classification of objects of administrative devision (RCOAD).
    /// </summary>
    /// <returns>
    /// RCOAD (OKATO) code.
    /// </returns>
    public  OKATO_RU okato()
    {
        if (currencyTransferLog)
        {
            return CompanyInfoHelper::partyOKATOasOfDate_RU(CompanyInfo::find());
        }
        else if (this.isWePayer() && !paymentOrderJour.RecipientRCOAD)
        {
            return CompanyInfoHelper::partyOKATOasOfDate_RU(CompanyInfo::find());
        }
        else
        {
            return TaxRegistration::legislationRegistrationValue(custVendTable.Party, TaxRegistrationTypesList::OKATO);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>payerBankGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the payer bank group table.
    /// </summary>
    /// <returns>
    /// Payer bank group table.
    /// </returns>
    public BankGroup payerBankGroup()
    {
        if (this.isWePayer())
        {
            return BankGroup::find(bankAccountTable.BankGroupId);
        }
        else
        {
            return BankGroup::find(bankAccountMap.BankGroupId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>purposeCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the central bank purpose code.
    /// </summary>
    /// <returns>
    /// Central bank purpose code.
    /// </returns>
    BankCentralBankPurposeCode purposeCode()
    {
        BankCentralBankPurposeCode szRet;

        if (CompanyInfo::find().Resident_W)
        {
            szRet = paymentOrderJour.BankCentralBankPurposeCode ?
                    paymentOrderJour.BankCentralBankPurposeCode :
                    custVendTable.BankCentralBankPurposeCode;
        }

        return szRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purposeOfPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bank payment order purpose text.
    /// </summary>
    /// <returns>
    /// Purpose text.
    /// </returns>
    public BankCentralBankPurposeText purposeOfPayment()
    {
        if (paymentOrderJour.CorrBankRecipient)
        {
            return this.getForeignRecipientInfo() + comma + paymentOrderJour.PurposeOfPayment;
        }
        else
        {
            return paymentOrderJour.PurposeOfPayment;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>recipientBankGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the recipient bank group record.
    /// </summary>
    /// <returns>
    /// Recipient bank group table.
    /// </returns>
    public BankGroup recipientBankGroup()
    {
        if (this.isWePayer())
        {
            return BankGroup::find(bankAccountMap.BankGroupId);
        }
        else
        {
            return BankGroup::find(bankAccountTable.BankGroupId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>respEmplName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the responsible worker name.
    /// </summary>
    /// <returns>
    /// Responsible worker name.
    /// </returns>
    HcmWorkerName respEmplName()
    {
        HcmWorkerName emplName;

        if (paymentOrderJour.WorkerResponsible)
        {
            emplName = HcmWorker::find(paymentOrderJour.WorkerResponsible).name();
        }

        return emplName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>respPhone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the responsible person contact phone.
    /// </summary>
    /// <returns>
    /// A string containing descriptive info about responsible person's contact phone.
    /// </returns>
    TempStr respPhone()
    {
        HcmWorker hcmWorker;
        TempStr   respPhone = "";
        LogisticsElectronicAddress electronicAddress;

        if (paymentOrderJour.WorkerResponsible)
        {
            hcmWorker = HcmWorker::find(paymentOrderJour.WorkerResponsible);
            respPhone = CompanyInfo::find().phone();
            electronicAddress = DirParty::primaryElectronicAddress(hcmWorker.Person);
            if (electronicAddress && electronicAddress.LocatorExtension)
            {
                respPhone += "@GLS102328" + electronicAddress.LocatorExtension;
            }
        }

        return respPhone;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the template file Id for bank payment order printable version generation.
    /// </summary>
    /// <returns>
    /// Template file record Id.
    /// </returns>
    public RefRecId templateRefRecId()
    {
        RefRecId  refRecId;

        if (this.isWePayer())
        {
            if (bankAccountTable.TemplateRefRecId_RU)
            {
                refRecId = bankAccountTable.TemplateRefRecId_RU;
            }
            else
            {
                refRecId = BankGroup::find(bankAccountTable.BankGroupId).TemplateRefRecId;
            }
        }
        else
        {
            refRecId = BankGroup::find(bankAccountMap.BankGroupId).TemplateRefRecId;
        }

        return refRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transfer currency code.
    /// </summary>
    /// <returns>
    /// The transfer currency code.
    /// </returns>
    public CurrencyCode transferCurrency()
    {
        return currencyTransferLog.TransferCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transitBankAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transit bank account.
    /// </summary>
    /// <returns>
    /// The transit bank account code.
    /// </returns>
    public AccountNum transitBankAccount()
    {
        return currencyTransferLog ? currencyTransferLog.transitBankAccount() : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>BankPaymentFill_RU</c> derivative class based on the <c>BankPaymentOrderJour_RU</c> record.
    /// </summary>
    /// <param name="_paymentOrderJour">
    /// <c>BankPaymentOrderJour_RU</c> record.
    /// </param>
    /// <returns>
    /// <c>BankPaymentFill_RU</c> class successor.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws <c>Exception::Error</c> exception if no <c>BankPaymentOrderJour_RU</c> record is provided.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Throws <c>Exception::Error</c> exception if the provided <c>BankPaymentOrderJour_RU</c> record has invalid account type.
    /// </exception>
    public static BankPaymentFill_RU construct(BankPaymentOrderJour_RU  _paymentOrderJour)
    {
        BankPaymentFill_RU ret;

        if (! _paymentOrderJour)
            throw error(strFmt("@GLS103055",funcName()));

        switch (_paymentOrderJour.LedgerACType)
        {
            case LedgerJournalACType::Cust :
                ret = BankPaymentFill_Cust_RU::construct(_paymentOrderJour);
                break;
            case LedgerJournalACType::Vend :
                ret = BankPaymentFill_Vend_RU::construct(_paymentOrderJour);
                break;
            default :
                throw error(strFmt("@SYS23396",funcName()));
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>