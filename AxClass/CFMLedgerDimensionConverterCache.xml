<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMLedgerDimensionConverterCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Decorator class for <c>CFMLedgerDimensionConverterInterface</c>.
/// Caches the result of converter instance execution.
/// </summary>
public class CFMLedgerDimensionConverterCache implements CFMLedgerDimensionConverterInterface
{
    CFMLedgerDimensionConverterInterface converter;

    Map mapCacheLedgerDimension;
    Map mapCacheDefaultDimension;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>CFMLedgerDimensionConverterCache</c>.
    /// </summary>
    /// <param name="_converter">
    /// Set <c>CFMLedgerDimensionConverterCache</c>
    /// </param>
    /// <returns>
    /// Instance of <c>CFMLedgerDimensionConverterCache</c>
    /// </returns>
    public static CFMLedgerDimensionConverterCache construct(CFMLedgerDimensionConverterInterface _converter = null)
    {
        CFMLedgerDimensionConverterCache converterCache = new CFMLedgerDimensionConverterCache();

        converterCache.setConverter(_converter);
        converterCache.initialize();

        return converterCache;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts default dimension.
    /// </summary>
    /// <param name="_defaultDimension">
    /// Dimension, which should be converted
    /// </param>
    /// <returns>
    /// Cash flow management set - based dimension
    /// </returns>
    public CFMLedgerDimension convertDefaultDimension(DimensionDefault _defaultDimension)
    {
        CFMLedgerDimension dimensionConverted;

        if (mapCacheDefaultDimension.exists(_defaultDimension))
        {
            dimensionConverted = mapCacheDefaultDimension.lookup(_defaultDimension);
        }
        else
        {
            dimensionConverted = converter.convertDefaultDimension(_defaultDimension);
            mapCacheDefaultDimension.insert(_defaultDimension, dimensionConverted);
        }

        return dimensionConverted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts ledger dimension.
    /// </summary>
    /// <param name="_ledgerDimensionFrom">
    /// Ledger dimension
    /// </param>
    /// <returns>
    /// Cash flow management set - based dimension
    /// </returns>
    public CFMLedgerDimension convertLedgerDimension(LedgerDimensionBase _ledgerDimensionFrom)
    {
        CFMLedgerDimension dimensionConverted;

        if (mapCacheLedgerDimension.exists(_ledgerDimensionFrom))
        {
            dimensionConverted = mapCacheLedgerDimension.lookup(_ledgerDimensionFrom);
        }
        else
        {
            dimensionConverted = converter.convertLedgerDimension(_ledgerDimensionFrom);
            mapCacheLedgerDimension.insert(_ledgerDimensionFrom, dimensionConverted);
        }

        return dimensionConverted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the class state before the conversion.
    /// </summary>
    protected void initialize()
    {
        if (!converter)
        {
            converter = CFMLedgerDimensionConverter::construct();
        }

        mapCacheLedgerDimension = new Map(Types::Int64, Types::Int64);
        mapCacheDefaultDimension = new Map(Types::Int64, Types::Int64);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAggregationDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// set aggregation dimensions
    /// </summary>
    /// <param name = "_aggregationDimensions"></param>
    public void setAggregationDimensions(container _aggregationDimensions)
    {
        converter.setAggregationDimensions(_aggregationDimensions);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setConverter</Name>
				<Source><![CDATA[
    private void setConverter(CFMLedgerDimensionConverterInterface _converter)
    {
        converter = _converter;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>