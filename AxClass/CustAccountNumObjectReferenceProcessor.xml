<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustAccountNumObjectReferenceProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
using xpp = Microsoft.Dynamics.Ax.Xpp;
using model = Microsoft.Dynamics.AX.Metadata.MetaModel;
using core = Microsoft.Dynamics.AX.Metadata.Core.MetaModel;

internal final class CustAccountNumObjectReferenceProcessor
{
    private CustInstrumentationLogger custInstrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isValidTableType</Name>
				<Source><![CDATA[
    private boolean isValidTableType(model.AxTable _currentTable)
    {
        DictTable dictTable = DictTable::construct(_currentTable.Name);

        return dictTable
            && !dictTable.isView()
            && !dictTable.isTempDb()
            && !dictTable.isTmp()
            && !dictTable.isMap()
            && !dictTable.isAbstract()
            && _currentTable.TableType == core.TableType::Regular;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesTableFieldReferenceExist</Name>
				<Source><![CDATA[
    private boolean doesTableFieldReferenceExist(TableId _tableId, FieldId _fieldId)
    {
        CustAccountNumObjectReferences custAccountNumObjectReferences;

        select firstonly RecId from custAccountNumObjectReferences
            where custAccountNumObjectReferences.ReferenceTableNum == _tableId
                && custAccountNumObjectReferences.ReferenceFieldNum == _fieldId;

        return custAccountNumObjectReferences.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtendedTypesThatExtend</Name>
				<Source><![CDATA[
    private void getExtendedTypesThatExtend(ExtendedDataTypeName _baseEDT, Set _typesThatExtend)
    {
        // The base EDT should be in the list.
        _typesThatExtend.add(_baseEDT);

        var allEdts = xpp.MetadataSupport::EdtNames();

        while (allEdts.MoveNext())
        {
            model.AxEdt edt = xpp.MetadataSupport::GetEdt(allEdts.Current);
            if (edt.Extends == _baseEDT)
            {
                this.getExtendedTypesThatExtend(edt.Name, _typesThatExtend);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getListOfTableAndFields</Name>
				<Source><![CDATA[
    internal void getListOfTableAndFields(ExtendedDataTypeName _baseEDTName, boolean _checkForTableEntryExistance = true)
    {
        Counter totalCountOfReferences = 0;
        System.Exception exception;
        Set typesThatExtendEDT = new Set(Types::String);
        this.getExtendedTypesThatExtend(_baseEDTName, typesThatExtendEDT);
        TableName objectTableName = tableStr(CustTable);
        CustAccountNumObjectReferences custAccountNumObjectReferences;

        select count(RecId) from custAccountNumObjectReferences;

        totalCountOfReferences = custAccountNumObjectReferences.RecId;

        var listOfTables = xpp.MetadataSupport::GetAllTables().GetEnumerator();

        while (listOfTables.MoveNext())
        {
            model.AxTable currentTable = listOfTables.Current;
            TableName currentTableName = currentTable.Name;

            if (currentTableName != objectTableName // Skip the current and child object tables because we know they have references.
                && this.isValidTableType(currentTable))
            {
                using(SysInstrumentationActivityContext activityContext = this.getActivityContextForRun(CustAccountNumRenameInstrumentationConstants::CustAccountNumRenameCreateReferenceTable))
                {
                    try
                    {
                        totalCountOfReferences = totalCountOfReferences + this.findFieldsByEDT(currentTable, typesThatExtendEDT, _checkForTableEntryExistance);
                    }
                    catch (exception)
                    {
                        // Continue the execution, don't terminate the addition of other references
                        activityContext.addCustomProperty(CustAccountNumRenameInstrumentationConstants::TableName, currentTableName);
                        activityContext.addCustomProperty(CustAccountNumRenameInstrumentationConstants::TableError, exception.Message);
                    }
                }
            }
        }

        CustSharedTable custSharedTable;

        select firstonly forupdate custSharedTable;

        if (custSharedTable)
        {
            select count(RecId) from custAccountNumObjectReferences;

            ttsbegin;

            custSharedTable.TotalCustTableAccountNumReferenceCount = totalCountOfReferences;
            custSharedTable.FailedCustTableAccountNumReferenceCount = totalCountOfReferences - custAccountNumObjectReferences.RecId;
            custSharedTable.update();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFieldsByEDT</Name>
				<Source><![CDATA[
    private Counter findFieldsByEDT(model.AxTable _currentTable, set _typesThatExtendEDT, boolean _checkForTableEntryExistance)
    {
        Counter recordCount = 0;
        CustAccountNumObjectReferences custAccountNumObjectReferences;
        var fields = _currentTable.Fields.GetEnumerator();
        DictTable dictTable = DictTable::construct(_currentTable.Name);
        RecordInsertList recordList = new RecordInsertList(tableNum(CustAccountNumObjectReferences));

        if (!this.shouldTableBeProcessed(_currentTable, dictTable))
        {
            return 0;
        }

        while (fields.MoveNext())
        {
            model.AxTableField field = fields.Current;

            if (_typesThatExtendEDT.in(field.ExtendedDataType)
                && isConfigurationkeyEnabled(configurationKeyName2Id(field.ConfigurationKey)))
            {
                FieldName currentFieldName = field.Name;

                if (_checkForTableEntryExistance && this.doesTableFieldReferenceExist(dictTable.id(), dictTable.fieldName2Id(currentFieldName)))
                {
                    continue;
                }

                recordCount++;

                custAccountNumObjectReferences.clear();

                custAccountNumObjectReferences.ReferenceTableName = dictTable.name(DbBackend::Sql);
                custAccountNumObjectReferences.ReferenceFieldName = currentFieldName;
                custAccountNumObjectReferences.ReferenceTableNum = dictTable.id();
                custAccountNumObjectReferences.ReferenceFieldNum = dictTable.fieldName2Id(currentFieldName);
                custAccountNumObjectReferences.IsSaveDataPerCompany = dictTable.dataPrCompany();
                custAccountNumObjectReferences.LedgerFieldNames = this.fieldNamesByEDT(_currentTable, extendedTypeStr(LedgerRecIdBase));
                custAccountNumObjectReferences.LegalEntityFieldNames = this.fieldNamesByEDT(_currentTable, extendedTypeStr(CompanyInfoRecId));
                custAccountNumObjectReferences.DataAreaIdFieldNames = this.fieldNamesByEDT(_currentTable, extendedTypeStr(DataAreaId));
                custAccountNumObjectReferences.IsValidTimeState = dictTable.isValidTimeStateTable();
                custAccountNumObjectReferences.TableGroupType = enum2Symbol(enumNum(TableGroup), _currentTable.TableGroup);
                custAccountNumObjectReferences.CacheType = enum2Symbol(enumNum(RecordCacheLevel), _currentTable.CacheLookup);
                custAccountNumObjectReferences.ImpliedDataAreaStripingField = this.impliedDataAreaFieldName(_currentTable, field, custAccountNumObjectReferences);
                custAccountNumObjectReferences.ReferenceMetadataTableName = _currentTable.Name;

                recordList.add(custAccountNumObjectReferences);
            }
        }

        recordList.insertDatabase();

        return recordCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>impliedDataAreaFieldName</Name>
				<Source><![CDATA[
    private FieldName impliedDataAreaFieldName(
        model.AxTable _currentTable,
        model.AxTableField _currentField,
        CustAccountNumObjectReferences _tableReferencesTmp)
    {
        FieldName result;

        if (_currentTable.SaveDataPerCompany)
        {
            result = literalStr(DataAreaId);
        }

        const str OffsetKeyword = 'Offset';

        int dataAreaFieldCount = this.countFields(_tableReferencesTmp.DataAreaIdFieldNames);
        int ledgerFieldCount = this.countFields(_tableReferencesTmp.LedgerFieldNames);
        int legalEntityFieldCount = this.countFields(_tableReferencesTmp.LegalEntityFieldNames);

        // If there is offset in the name of the field see if there is a offset data area striping to use instead.
        // Even if table is data area striped it may have a more specific field to use
        if (match(OffsetKeyword, _currentField.Name))
        {
            if (match(OffsetKeyword, _tableReferencesTmp.LedgerFieldNames))
            {
                result = this.searchFieldNamesForPrefix(_tableReferencesTmp.LedgerFieldNames, OffsetKeyword);
            }
            else if (match(OffsetKeyword, _tableReferencesTmp.LegalEntityFieldNames))
            {
                result = this.searchFieldNamesForPrefix(_tableReferencesTmp.LegalEntityFieldNames, OffsetKeyword);
            }
            else if (match(OffsetKeyword, _tableReferencesTmp.DataAreaIdFieldNames))
            {
                result = this.searchFieldNamesForPrefix(_tableReferencesTmp.DataAreaIdFieldNames, OffsetKeyword);
            }
        }
        
        if (result == '')
        {
            if (ledgerFieldCount == 1)
            {
                result = _tableReferencesTmp.LedgerFieldNames;
            }
            else if (legalEntityFieldCount == 1)
            {
                result = _tableReferencesTmp.LegalEntityFieldNames;
            }
            else if (dataAreaFieldCount == 1)
            {
                result = _tableReferencesTmp.DataAreaIdFieldNames;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countFields</Name>
				<Source><![CDATA[
    private int countFields(str _fieldNames)
    {
        List strList = new List(Types::String);
        strList = strSplit(_fieldNames, ',');
        return !_fieldNames ? 0 : strList.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchFieldNamesForPrefix</Name>
				<Source><![CDATA[
    private FieldName searchFieldNamesForPrefix(str _fieldNames, str _prefixToSearch)
    {
        FieldName result;

        List strList = new List(Types::String);
        strList = strSplit(_fieldNames, ',');
        ListEnumerator liEnumerator = strList.getEnumerator();

        while (liEnumerator.moveNext())
        {
            FieldName field = liEnumerator.current();
            if (strStartsWith(field, _prefixToSearch))
            {
                result = field;
                break;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldNamesByEDT</Name>
				<Source><![CDATA[
    private str fieldNamesByEDT(model.AxTable _currentTable, ExtendedDataTypeName _baseEDTName)
    {
        str result;

        Set typesThatExtendEDT = new Set(Types::String);
        this.getExtendedTypesThatExtend(_baseEDTName, typesThatExtendEDT);

        var fields = _currentTable.Fields.GetEnumerator();
        DictTable dictTable = DictTable::construct(_currentTable.Name);

        if (_currentTable.SaveDataPerCompany && _baseEDTName == extendedTypeStr(DataAreaId))
        {
            result = literalStr(DataAreaId);
        }

        while (fields.MoveNext())
        {
            model.AxTableField field = fields.Current;

            if (isConfigurationkeyEnabled(configurationKeyName2Id(field.ConfigurationKey))
                && (typesThatExtendEDT.in(field.ExtendedDataType)
                    || (_baseEDTName == extendedTypeStr(LedgerRecIdBase)
                        && match(field.Name, literalStr(Ledger)))
                    || (_baseEDTName == extendedTypeStr(CompanyInfoRecId)
                        && match(field.Name, literalStr(LegalEntity)))
                    || (_baseEDTName == extendedTypeStr(DataAreaId)
                        && (match(field.Name, literalStr(DataAreaId))
                            || match(field.Name, literalStr(Company))))))
            {
                if (!result)
                {
                    result = field.Name;
                }
                else
                {
                    result = result + ',' + field.Name;
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldTableBeProcessed</Name>
				<Source><![CDATA[
    private boolean shouldTableBeProcessed(model.AxTable _table, DictTable _dictTable)
    {
        // Don't want the temp table, in memory table and CustAccountNumRenameDataMaintenance table to be added as we don't want to update them.
        return !_dictTable.isTempDb()
            && !(_table.TableType == core.TableType::InMemory)
            && !(_dictTable.id() == tableNum(CustAccountNumRenameDataMaintenance));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContextForRun</Name>
				<Source><![CDATA[
    private SysInstrumentationActivityContext getActivityContextForRun(str _activityName)
    {
        if (!custInstrumentationLogger)
        {
            custInstrumentationLogger = CustInstrumentationLogger::newFromInstrumentationNameSpace(CustAccountNumRenameInstrumentationConstants::CustAccountNumRenameInstrumentationNamespace);
        }

        return custInstrumentationLogger.activityContext(custInstrumentationLogger.activity(_activityName, CustAccountNumRenameInstrumentationConstants::CustAccountNumRenameInstrumentationNamespace));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>