<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MPSDisableDeprecatedMRPFunctionalityFlight</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.ApplicationPlatform.Environment;

/// <summary>
/// The <c>MPSDisableDeprecatedMRPFunctionalityFlight</c> class controls whether deprecated MRP can be executed.
/// Deprecated MRP must always be enabled for on premise customers and development environments.
/// Additionally, MRP must be enabled for environments in Mooncake, GCC and Germany regions, 
/// since flights cannot be controlled through ECS on a region level.
/// </summary>
internal final class MPSDisableDeprecatedMRPFunctionalityFlight extends Flight
{
    private static MPSDisableDeprecatedMRPFunctionalityFlight singleton = new MPSDisableDeprecatedMRPFunctionalityFlight();
    private IApplicationEnvironment environment;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isEnabledByDefault</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean isEnabledByDefault()
    {
        // This flight should remain disabled by default and should not be progressed using the standard lifecycle pattern.
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static MPSDisableDeprecatedMRPFunctionalityFlight instance()
    {
        return singleton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDeprecatedMRPEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final boolean isDeprecatedMRPEnabled()
    {
        return !MPSDisableDeprecatedMRPFunctionalityFlight::instance().isEnabled()
            || this.isOnPremisesEnvironment() 
            || this.isDevEnvironment() 
            || this.isLocalDevEnvironment()
            || this.isEnvironmentInEnabledByDefaultRegions()
            || (MPSCheckReqLogToEnableDeprecatedMRPFunctionalityFlight::instance().isEnabled() && ReqLog::hasMPRLogsFromThePastSixMonths());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOnPremisesEnvironment</Name>
				<Source><![CDATA[
    // Check for on prem environments
    private boolean isOnPremisesEnvironment()
    {
        environment = this.getEnvironment();

        return environment.Common.HostingEnvironment == HostingEnvironment::OnPremises
            || (environment.Common.HostingEnvironment == HostingEnvironment::ServiceFabric
                && environment.Common.DeploymentType == Settings.DeploymentType::OnPrem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDevEnvironment</Name>
				<Source><![CDATA[
    // Check for LCS dev environments
    private boolean isDevEnvironment()
    {
        environment = this.getEnvironment();

        return environment.Common.HostingEnvironment == HostingEnvironment::ComputeEmulator
            && environment.Common.DeploymentType == Settings.DeploymentType::Unknown
            && environment.Common.DeploymentEnvironmentType == Settings.EnvironmentType::InternalTest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLocalDevEnvironment</Name>
				<Source><![CDATA[
    // Check for local dev environments
    private boolean isLocalDevEnvironment()
    {
        environment = this.getEnvironment();

        return environment.Common.HostingEnvironment == HostingEnvironment::ComputeEmulator
            && environment.Common.DeploymentType == Settings.DeploymentType::Unknown
            && environment.Common.DeploymentEnvironmentType == Settings.EnvironmentType::Other;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnvironmentInEnabledByDefaultRegions</Name>
				<Source><![CDATA[
    // Cheks if environment is in Mooncake, USGov or Germany regions. These are regions we not deployed, so we should not disable MRP functionality.
    // We are deployed in GCC low but cannot filter on that level so exluding USGov entirely.
    private boolean isEnvironmentInEnabledByDefaultRegions()
    {
        var currentCloud = RetailDeploymentUtility::getCurrentCloud();

        return currentCloud == RetailDeploymentUtility::AzureChina
            || currentCloud == RetailDeploymentUtility::AzureUSGov
            || currentCloud == RetailDeploymentUtility::AzureGermany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnvironment</Name>
				<Source><![CDATA[
    private IApplicationEnvironment getEnvironment()
    {
        if (!environment)
        {
            environment = EnvironmentFactory::GetApplicationEnvironment();
        }

        return environment;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>