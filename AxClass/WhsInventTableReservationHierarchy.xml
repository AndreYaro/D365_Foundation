<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsInventTableReservationHierarchy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSInventTableReservationHierarchy</c> class is used to assign reservation hierarchies to items.
/// </summary>
class WhsInventTableReservationHierarchy
{
    ItemId                              itemId;
    DataAreaId                          itemDataAreaId;
    WHSReservationHierarchyRecId        newReservationHierarchyRecId, oldReservationHierarchyRecId;
    InventTable                         inventTable;
    EcoResStorageDimensionGroupRecId    ecoResStorageDimensionGroupRecId;
    EcoResTrackingDimensionGroupRecId   ecoResTrackingDimensionGroupRecId;
    WHSReservationHierarchyCache        whsReservationHierarchyCache;
    InventDimGroupSetup                 inventDimGroupSetup;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assignOrDeleteReservationHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates, updates or deletes the hierarchy association for the item.
    /// </summary>
    protected void assignOrDeleteReservationHierarchy()
    {
        WHSReservationHierarchyItem whsReservationHierarchyItem;

        ttsbegin;
        //clear the assigned hierarchy
        if (!newReservationHierarchyRecId)
        {
            delete_from whsReservationHierarchyItem
                where whsReservationHierarchyItem.ItemId            == itemId
                &&    whsReservationHierarchyItem.ItemDataAreaId    == itemDataAreaId;
        }
        else
        {
            whsReservationHierarchyItem = WHSReservationHierarchyItem::findByItem(itemDataAreaId,itemId, true);

            whsReservationHierarchyItem.ItemId                  = itemId;
            whsReservationHierarchyItem.ItemDataAreaId          = itemDataAreaId;
            whsReservationHierarchyItem.ReservationHierarchy    = newReservationHierarchyRecId;
            whsReservationHierarchyItem.write();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBlankIssueReceiptDims</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that dimensions allowing blank issue or receipt are only at the bottom of the hierarchy.
    /// </summary>
    /// <returns>
    /// true if the validation succeded; Otherwise, false.
    /// </returns>
    protected boolean checkBlankIssueReceiptDims()
    {
        return this.checkDimensionGroupsAssigned() && WHSInventTableReservationHierarchy::validateBlankIssueReceiptDims(
                    newReservationHierarchyRecId,
                    inventDimGroupSetup,
                    whsReservationHierarchyCache);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDimensionGroupsAssigned</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that storage and tracking dimension groups have been assigned to the item.
    /// </summary>
    /// <returns>
    /// true if the validation succeded; Otherwise, false.
    /// </returns>
    protected boolean checkDimensionGroupsAssigned()
    {
        boolean ret = true;

        if (!ecoResStorageDimensionGroupRecId)
        {
            ret =  checkFailed("@WAX4738");
        }

        if (!ecoResTrackingDimensionGroupRecId)
        {
            ret =  checkFailed("@WAX4739");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkHasInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the item has inventory transactions.
    /// </summary>
    /// <returns>
    /// true if the validation succeeds; Otherwise, false.
    /// </returns>
    protected boolean checkHasInventTrans()
    {
        boolean ret = true;

        if (inventTable.hasInventTrans())
        {
            ret = checkFailed("@WAX4740");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIsItemWHSEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the item is whs enabled.
    /// </summary>
    /// <returns>
    /// true if the validation succeded; Otherwise, false.
    /// </returns>
    protected boolean checkIsItemWHSEnabled()
    {
        boolean ret = true;

        if (!EcoResStorageDimensionGroup::find(ecoResStorageDimensionGroupRecId).IsWarehouseWHSEnabled)
        {
             ret =  checkFailed("@WAX4741");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPhysicalDimensionMatchWithHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the items physical storage and tracking dimensions macthes the dimensions from the hierarchy.
    /// </summary>
    /// <returns>
    /// true if the validation succeded; Otherwise, false.
    /// </returns>
    protected boolean checkPhysicalDimensionMatchWithHierarchy()
    {
        return this.checkDimensionGroupsAssigned() && WHSInventTableReservationHierarchy::validatePhysicalDimMatchWithHierarchy(
                    newReservationHierarchyRecId,
                    inventDimGroupSetup,
                    whsReservationHierarchyCache);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemDataAreaId</Name>
				<Source><![CDATA[
    public DataAreaId parmItemDataAreaId(DataAreaId _itemDataAreaId = itemDataAreaId)
    {
        itemDataAreaId = _itemDataAreaId;

        return itemDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;

        if (inventTable.ItemId != itemId)
        {
            this.setFromItemId(itemId);
        }

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEcoResStorageDimensionGroupRecId</Name>
				<Source><![CDATA[
    public EcoResStorageDimensionGroupRecId parmEcoResStorageDimensionGroupRecId(EcoResStorageDimensionGroupRecId _ecoResStorageDimensionGroupRecId = ecoResStorageDimensionGroupRecId)
    {
        ecoResStorageDimensionGroupRecId = _ecoResStorageDimensionGroupRecId;

        return ecoResStorageDimensionGroupRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEcoResTrackingDimensionGroupRecId</Name>
				<Source><![CDATA[
    public EcoResTrackingDimensionGroupRecId parmEcoResTrackingDimensionGroupRecId(EcoResTrackingDimensionGroupRecId _ecoResTrackingDimensionGroupRecId = ecoResTrackingDimensionGroupRecId)
    {
        ecoResTrackingDimensionGroupRecId = _ecoResTrackingDimensionGroupRecId;

        return ecoResTrackingDimensionGroupRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimGroupSetup</Name>
				<Source><![CDATA[
    public InventDimGroupSetup parmInventDimGroupSetup(InventDimGroupSetup _inventDimGroupSetup = inventDimGroupSetup)
    {
        inventDimGroupSetup = _inventDimGroupSetup;

        return inventDimGroupSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewReservationHierarchyRecId</Name>
				<Source><![CDATA[
    public WHSReservationHierarchyRecId parmNewReservationHierarchyRecId(WHSReservationHierarchyRecId _newReservationHierarchyRecId = newReservationHierarchyRecId)
    {
        newReservationHierarchyRecId = _newReservationHierarchyRecId;

        return newReservationHierarchyRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWhsReservationHierarchyCache</Name>
				<Source><![CDATA[
    public WHSReservationHierarchyCache parmWhsReservationHierarchyCache(WHSReservationHierarchyCache _whsReservationHierarchyCache = whsReservationHierarchyCache)
    {
        whsReservationHierarchyCache = _whsReservationHierarchyCache;

        return whsReservationHierarchyCache;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFromItemId</Name>
				<Source><![CDATA[
    private void setFromItemId(ItemId _setItemId)
    {
        inventTable = InventTable::find(_setItemId);
        this.parmItemDataAreaId(inventTable.DataAreaId);//use the actual dataareaId to support virtual company
        oldReservationHierarchyRecId = WHSReservationHierarchyItem::findByItem(inventTable.DataAreaId, inventTable.ItemId).ReservationHierarchy;
        ecoResStorageDimensionGroupRecId = inventTable.storageDimensionGroup();
        ecoResTrackingDimensionGroupRecId = inventTable.trackingDimensionGroup();
        inventDimGroupSetup = InventDimGroupSetup::newDimensionGroups(0, ecoResStorageDimensionGroupRecId, ecoResTrackingDimensionGroupRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCanAssignOrDeleteHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the reservation hierarchy can be assigned to the item.
    /// </summary>
    /// <returns>
    /// true if the hierarchy can be assigned; Otherwise, false.
    /// </returns>
    public boolean validateCanAssignOrDeleteHierarchy()
    {
        boolean ret = true;

        if (newReservationHierarchyRecId == oldReservationHierarchyRecId)
        {
            return true;
        }

        ret = this.checkDimensionGroupsAssigned() && ret;

        ret = this.checkIsItemWHSEnabled() && ret;

        ret = this.checkHasInventTrans() && ret;

        ret = this.checkPhysicalDimensionMatchWithHierarchy() && ret;

        ret = this.checkBlankIssueReceiptDims() && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCanChangeHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the reservation hierarchy can be assigned to the item.
    /// </summary>
    /// <returns>
    /// true if the hierarchy can be assigned; Otherwise, false.
    /// </returns>
    public boolean validateCanChangeHierarchy()
    {
        boolean ret = true;

        ret = this.checkDimensionGroupsAssigned() && ret;

        ret = this.checkPhysicalDimensionMatchWithHierarchy() && ret;

        ret = this.checkBlankIssueReceiptDims() && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignReservationHierarchyToItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns a reservation hierarchy to an item.
    /// </summary>
    /// <param name="_itemId">
    /// The item id that should have the hierarchy assigned.
    /// </param>
    /// <param name="_newReservationHierarchyRecId">
    /// The ID of the reservation hierarchy.
    /// </param>
    public static void assignReservationHierarchyToItem(
        ItemId                          _itemId,
        WHSReservationHierarchyRecId    _newReservationHierarchyRecId
        )
    {
        WHSInventTableReservationHierarchy  whsInventTableReservationHierarchy;

        whsInventTableReservationHierarchy = WHSInventTableReservationHierarchy::newFromParameters(_itemId,_newReservationHierarchyRecId);

        if (!whsInventTableReservationHierarchy.validateCanAssignOrDeleteHierarchy())
        {
            throw error(strFmt("@WAX4736",WHSReservationHierarchy::find(_newReservationHierarchyRecId).Name,_itemId));
        }

        whsInventTableReservationHierarchy.assignOrDeleteReservationHierarchy();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSInventTableReservationHierarchy construct()
    {
        return new WHSInventTableReservationHierarchy();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>WHSInventTableReservationHierarchy</c> class based on the parameters.
    /// </summary>
    /// <param name="_itemId">
    /// The item id that should have the hierarchy assigned.
    /// </param>
    /// <param name="_reservationHierarchyRecId">
    /// The ID of the reservation hierarchy.
    /// </param>
    /// <returns>
    /// An instance of the <c>WHSInventTableReservationHierarchy</c> class.
    /// </returns>
    public static WHSInventTableReservationHierarchy newFromParameters(
        ItemId                          _itemId,
        WHSReservationHierarchyRecId    _reservationHierarchyRecId
        )
    {
        WHSInventTableReservationHierarchy whsInventTableReservationHierarchy;

        whsInventTableReservationHierarchy = WHSInventTableReservationHierarchy::construct();
        whsInventTableReservationHierarchy.parmItemId(_itemId);
        whsInventTableReservationHierarchy.parmNewReservationHierarchyRecId(_reservationHierarchyRecId);
        whsInventTableReservationHierarchy.parmWhsReservationHierarchyCache(WHSReservationHierarchyCache::construct());//use default cache
        return whsInventTableReservationHierarchy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBlankIssueReceiptDims</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that dimensions allowing blank issue or receipt are only at the bottom of the hierarchy.
    /// </summary>
    /// <param name="_reservationHierarchy">
    /// A <c>WHSReservationHierarchyRecId</c> of the reservation hierarchy to validate.
    /// </param>
    /// <param name="_inventDimGroupSetup">
    /// The <c>InventDimGroupSetup</c> object containing inventory dimensions to validate against.
    /// </param>
    /// <param name="_reservationHierarchyCache">
    /// An instance of <c>WHSReservationHierarchyCache</c> used to get reservation hierarchy.
    /// </param>
    /// <returns>
    /// true if the validation succeded; Otherwise, false.
    /// </returns>
    public static boolean validateBlankIssueReceiptDims(
        WHSReservationHierarchyRecId    _reservationHierarchy,
        InventDimGroupSetup             _inventDimGroupSetup,
        WHSReservationHierarchyCache    _reservationHierarchyCache)
    {
        boolean                     ret = true;
        List                        list;
        ListEnumerator              le;
        InventDimGroupFieldSetup    inventDimGroupFieldSetup;
        boolean                     blankNotAllowed = false;

        if (_reservationHierarchy && _inventDimGroupSetup)
        {
            list = _reservationHierarchyCache.getDimListAll(
                        _reservationHierarchy,
                        WHSReservationHierarchySortOrder::BottomUp);
            le = WHSReservationHierarchyInventDimUtil::hierarchyList2FieldIdList(list).getEnumerator();
            while (le.moveNext())
            {
                inventDimGroupFieldSetup = _inventDimGroupSetup.getFieldSetup(le.current());

                if (blankNotAllowed)
                {
                    // License Plate is allowed to be blank since it is controlled by location setup, preventing a mix of inventory with/without blank License Plate dimension
                    if ((inventDimGroupFieldSetup.isAllowBlankIssueEnabled()
                        || inventDimGroupFieldSetup.isAllowBlankReceiptEnabled())
                        && le.current() != fieldNum(InventDim, LicensePlateId))
                    {
                        ret = checkFailed("@WAX4876");
                        break;
                    }
                }
                else
                {
                    blankNotAllowed = (!inventDimGroupFieldSetup.isAllowBlankIssueEnabled() || !inventDimGroupFieldSetup.isAllowBlankReceiptEnabled());
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePhysicalDimMatchWithHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the items physical storage and tracking dimensions macthes the dimensions from the hierarchy.
    /// </summary>
    /// <param name="_reservationHierarchy">
    /// A <c>WHSReservationHierarchyRecId</c> of the reservation hierarchy to validate.
    /// </param>
    /// <param name="_inventDimGroupSetup">
    /// The <c>InventDimGroupSetup</c> object containing inventory dimensions to validate against.
    /// </param>
    /// <param name="_reservationHierarchyCache">
    /// An instance of <c>WHSReservationHierarchyCache</c> used to get reservation hierarchy.
    /// </param>
    /// <returns>
    /// true if the validation succeded; Otherwise, false.
    /// </returns>
    public static boolean validatePhysicalDimMatchWithHierarchy(
        WHSReservationHierarchyRecId    _reservationHierarchy,
        InventDimGroupSetup             _inventDimGroupSetup,
        WHSReservationHierarchyCache    _reservationHierarchyCache)
    {
        List            hierarchyList;
        InventDimParm   inventDimParmActivePhysicalDimension;
        InventDimParm   inventDimParmDimensionsFromHierarchy;
        boolean         ret = true;

        if (_reservationHierarchy && _inventDimGroupSetup)
        {
            hierarchyList = _reservationHierarchyCache.getDimListAll(
                            _reservationHierarchy,
                            WHSReservationHierarchySortOrder::TopDown);
            WHSReservationHierarchyInventDimUtil::initInventDimParmFromHierarchyList(hierarchyList, inventDimParmDimensionsFromHierarchy);

            _inventDimGroupSetup.inventDimParmActivePhysicalInventory(inventDimParmActivePhysicalDimension);

            inventDimParmActivePhysicalDimension.clearProductDimensions();

            if (!InventDimParm::isInventDimParmEqual(inventDimParmActivePhysicalDimension,inventDimParmDimensionsFromHierarchy))
            {
                ret = checkFailed("@WAX4737");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>