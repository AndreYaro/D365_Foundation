<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCXmlSessionWriterDatabaseRelation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PCXmlSessionWriterDatabaseRelation</c> class is responsible for writing the session XML for
/// a database relation constraint.
/// </summary>
class PcXmlSessionWriterDatabaseRelation
{
    Query query;

    boolean isSystemTableEmpty; // a flag indicating if the generated table constraint contains data

    PCMetadataHelper                    metadataHelper;
    PCXmlSessionWriterDatabaseRelRow    xmlSessionWriterDatabaseRelationRow;
    PCRuntimeCacheController            runtimeCacheController;

    private PCInstrumentationLogger logger;

    #PC
    #PCTableConstraint
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkIfTableIsEmtpy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the target table of the system table constraint is empty.
    /// </summary>
    /// <param name="_databaseRelationConstraint">
    /// A system table constraint record.
    /// </param>
    protected void checkIfTableIsEmtpy(PCDatabaseRelationConstraintDefinition _databaseRelationConstraint)
    {
        if (isSystemTableEmpty)
        {
            throw error(strFmt("@SYS339193", _databaseRelationConstraint.Name));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>QueryRun</c> object; applies a query filter if one exists.
    /// </summary>
    /// <param name="_databaseRelationConstraint">
    /// A system table constraint record.
    /// </param>
    /// <returns>
    /// An initialized <c>queryRun</c> instance.
    /// </returns>
    protected QueryRun initializeQueryRun(PCDatabaseRelationConstraintDefinition _databaseRelationConstraint)
    {
        // if query filter exists use it
        if (_databaseRelationConstraint.Query != conNull())
        {
            query = new Query(_databaseRelationConstraint.Query);
        }
        else
        {
            query.addDataSource(_databaseRelationConstraint.ReferencedTableId);
        }

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        query = new Query();
        isSystemTableEmpty                  = true;
        metadataHelper                      = PCMetadataHelper::construct();
        xmlSessionWriterDatabaseRelationRow = PCXmlSessionWriterDatabaseRelRow::construct();
        runtimeCacheController              = PCRuntimeCacheController::construct();

        logger = PCInstrumentationLogger::createLogger(classStr(PCXmlSessionWriterDatabaseRelation));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMetadataHelper</Name>
				<Source><![CDATA[
    public PCMetadataHelper parmMetadataHelper(PCMetadataHelper _metadataHelper = metadataHelper)
    {
        metadataHelper = _metadataHelper;

        return metadataHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRuntimeCacheController</Name>
				<Source><![CDATA[
    public PCRuntimeCacheController parmRuntimeCacheController(PCRuntimeCacheController _runtimeCacheController = runtimeCacheController)
    {
        runtimeCacheController = _runtimeCacheController;

        return runtimeCacheController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmXmlSessionWriterDatabaseRelationRow</Name>
				<Source><![CDATA[
    public PCXmlSessionWriterDatabaseRelRow parmXmlSessionWriterDatabaseRelationRow(PCXmlSessionWriterDatabaseRelRow _xmlSessionWriterDatabaseRelRow = xmlSessionWriterDatabaseRelationRow)
    {
        xmlSessionWriterDatabaseRelationRow = _xmlSessionWriterDatabaseRelRow;

        return xmlSessionWriterDatabaseRelationRow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeColumnDefinitions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes XML for the column definitions of a system table constraint.
    /// </summary>
    /// <param name="_xmlWriter">
    /// An instance of the <c>PCXmlWriter</c> class.
    /// </param>
    /// <param name="_tableConstraint">
    /// A table constraint record.
    /// </param>
    /// <returns>
    /// A list enumerator that contains the field IDs and attribute data types selected for the system
    /// table constraint.
    /// </returns>
    protected ListEnumerator writeColumnDefinitions
    (
        PCXmlWriter           _xmlWriter,
        PCTableConstraint   _tableConstraint)
    {
        PCTableConstraintDatabaseColumnDef          column;
        PCTableConstraintColumnCategoryAttribute    constraintRelation;
        List                                        columnFieldIds = new List(Types::Container);

        // write column definitions
        while select constraintRelation
            where constraintRelation.TableConstraint == _tableConstraint.RecId
            join RecId, ReferencedFieldId, AttributeType
            from column
                where column.RecId == constraintRelation.TableConstraintColumnDefinition
        {
             // list is required to keep track of the column order when writing cells
             columnFieldIds.addEnd([column.ReferencedFieldId, column.getDataType()]);

             _xmlWriter.writeStartElement(#Column);
             PCAttributePathFacade::toXML(_xmlWriter, constraintRelation);
             _xmlWriter.writeEndElement();
        }

        return columnFieldIds.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates the XML representation of this record that is compatible with the product configuration.
    /// </summary>
    /// <param name="_xmlWriter">
    ///    The XML writer to use to store the XML representation of this record.
    /// </param>
    /// <param name="_tableConstraint">
    ///    A table constraint record.
    /// </param>
    /// <param name="_databaseRelationConstraint">
    ///    A system table constraint record.
    /// </param>
    public void write(
        PCXmlWriter                             _xmlWriter,
        PCTableConstraint                       _tableConstraint,
        PCDatabaseRelationConstraintDefinition  _databaseRelationConstraint)
    {
        str             xml;
        PCXmlWriter     xmlWriter;
        QueryRun        queryRun;
        ListEnumerator  columnFieldIdenumerator;
        PCRuntimeXml    cachedRuntimXml = runtimeCacheController.getRuntimeXml(_tableConstraint.TableId, _tableConstraint.RecId);

        using (var activityContext = logger.preRuntime().generateSystemDefinedTableContraintXml())
        {
            if (cachedRuntimXml != '')
            {
                _xmlWriter.writeRaw(cachedRuntimXml);
            }
            else
            {
                xmlWriter = PCXmlWriter::construct();

                columnFieldIdenumerator = this.writeColumnDefinitions(xmlWriter,
                                                              _tableConstraint);

                queryRun = this.initializeQueryRun(_databaseRelationConstraint);

                this.writeTableContent(xmlWriter,
                               queryRun,
                               columnFieldIdenumerator,
                               _databaseRelationConstraint);

                xml = xmlWriter.writeToString();
                _xmlWriter.writeRaw(xml);
                runtimeCacheController.createEntry(_tableConstraint.TableId, _tableConstraint.RecId, xml);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeTableContent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes XML for the content of the system table constraint.
    /// </summary>
    /// <param name="_xmlWriter">
    /// An instance of the <c>PCXmlWriter</c> class.
    /// </param>
    /// <param name="_queryRun">
    /// An instance of the <c>QueryRun</c> class.
    /// </param>
    /// <param name="_columnFieldEnumerator">
    /// A list enumerator that contains the field IDs of the source table.
    /// </param>
    /// <param name="_databaseRelationConstraint">
    /// A database relation constraint record.
    /// </param>
    protected void writeTableContent
    (
        PCXmlWriter                             _xmlWriter,
        QueryRun                                _queryRun,
        ListEnumerator                          _columnFieldEnumerator,
        PCDatabaseRelationConstraintDefinition  _databaseRelationConstraint)
    {
        Common      record;

        // write content of the table constraint
        while (_queryRun.next())
        {
            isSystemTableEmpty = false;

            record = _queryRun.get(_databaseRelationConstraint.ReferencedTableId);

            xmlSessionWriterDatabaseRelationRow.write(_xmlWriter,
                                                      _columnFieldEnumerator,
                                                      record);
        }

        this.checkIfTableIsEmtpy(_databaseRelationConstraint);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCXmlSessionWriterDatabaseRelation construct()
    {
        return new PCXmlSessionWriterDatabaseRelation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>