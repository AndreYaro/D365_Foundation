<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTransEntityInMemRollback</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerJournalTransEntityInMemRollback</c> class manages in-memory rollbacks for the
///    <c>LedgerJournalTrans</c> entity in the context of form usage.
/// </summary>
/// <remarks>
///    This class is used across the transaction forms to help manage writing and deletion.
///    The
///    <c>LedgerJournalTrans</c> entity includes <c>LedgerJournalTrans</c> and its sibling records,
///    <c>LedgerJournalTrans_Asset</c> and <c>LedgerJournalTrans_Project</c>.
/// </remarks>
public class LedgerJournalTransEntityInMemRollback
{
    // -------------------------------------
    // Form Datasources
    // -------------------------------------
    FormDataSource ledgerJournalTrans_DS; // Stores a reference to the LedgerJournalTrans_DS on the form
    FormDataSource ledgerJournalTrans_Asset_DS; // Stores a reference to the LedgerJournalTrans_Asset_DS on the form
    FormDataSource ledgerJournalTrans_Project_DS; // Stores a reference to the LedgerJournalTrans_Project_DS on the form
    FormDataSource tax1099Detail_DS; // Stores a reference to the Tax1099Detail_DS on the form

    // <GEERU>
    FormDataSource ledgerJournalTrans_RAsset_DS;
    FormDataSource ledgerJournalTrans_RDeferrals_DS;
    FormDataSource ledgerJournalTrans_RCash_DS;
    // </GEERU>
    // -------------------------------------
    // Buffer Snapshots
    LedgerJournalTrans ledgerJournalTransSnapshot;
    LedgerJournalTrans_Asset ledgerJournalTrans_AssetSnapshot;
    LedgerJournalTrans_Project ledgerJournalTrans_ProjectSnapshot;
    Tax1099BoxDetail tax1099DetailSnapshot;

    // <GEERU>
    LedgerJournalTrans_RAsset     ledgerJournalTrans_RAssetSnapshot;
    LedgerJournalTrans_RDeferrals ledgerJournalTrans_RDeferralsSnapshot;
    LedgerJournalTrans_RCash      ledgerJournalTrans_RCashSnapshot;
    // </GEERU>

    boolean isNewEntity; // Flag that indicates whether or not the transaction entity has yet been persisted to the database.
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearSnapShots</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the snapshots to prepare for another transaction.
    /// </summary>
    /// <remarks>
    ///    Call this method at the start of a transaction.
    /// </remarks>
    public void clearSnapShots()
    {
        ledgerJournalTransSnapshot.clear();
        ledgerJournalTrans_AssetSnapshot.clear();
        ledgerJournalTrans_ProjectSnapshot.clear();
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            tax1099DetailSnapshot.clear();
        }

        // <GEERU>
        ledgerJournalTrans_RAssetSnapshot.clear();
        ledgerJournalTrans_RDeferralsSnapshot.clear();
        ledgerJournalTrans_RCashSnapshot.clear();
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>LedgerJournalTransEntityInMemRollback</c> class.
    /// </summary>
    /// <param name="_ledgerJournalTrans_DS">
    /// A <c>LedgerJournalTrans</c> data source of the form that is not null.
    /// </param>
    /// <param name="_ledgerJournalTrans_Asset_DS">
    /// A <c>LedgerJournalTrans_Asset</c> data source of the form that is not null.
    /// </param>
    /// <param name="_ledgerJournalTrans_Project_DS">
    /// A <c>LedgerJournalTrans_Project</c> data source of the form that is not null.
    /// </param>
    /// <param name="_tax1099Detail_DS">
    /// A <c>Tax1099Detail_DS</c> data source of the form that is not null.
    /// </param>
    /// <param name="_ledgerJournalTrans_RAsset_DS">
    /// A <c>LedgerJournalTrans_RAsset</c> data source of the form.
    /// </param>
    /// <param name="_ledgerJournalTrans_RDeferrals_DS">
    /// A form's <c>LedgerJournalTrans_RDeferrals_DS</c> data source. This may be null.
    /// </param>
    /// <param name="_ledgerJournalTrans_RCash_DS">
    /// A <c>LedgerJournalTrans_RCash_DS</c> data source of the form.
    /// </param>
    public static LedgerJournalTransEntityInMemRollback construct(FormDataSource _ledgerJournalTrans_DS,
                    FormDataSource _ledgerJournalTrans_Asset_DS,
                    FormDataSource _ledgerJournalTrans_Project_DS
                    , FormDataSource _tax1099Detail_DS
                    , FormDataSource _ledgerJournalTrans_RAsset_DS = null,
                    FormDataSource _ledgerJournalTrans_RDeferrals_DS = null,
                    FormDataSource _ledgerJournalTrans_RCash_DS = null
    )
    {
        return new LedgerJournalTransEntityInMemRollback(_ledgerJournalTrans_Ds,
            _ledgerJournalTrans_Asset_DS,
            _ledgerJOurnalTrans_Project_DS,
            _tax1099Detail_DS
            // <GEERU>
            , _ledgerJournalTrans_RAsset_DS
            , _ledgerJournalTrans_RDeferrals_DS
            , _ledgerJournalTrans_RCash_DS
            // </GEERU>
            );
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>LedgerJournalTransEntityInMemRollback</c> class.
    /// </summary>
    /// <param name="_ledgerJournalTrans_DS">
    /// A <c>LedgerJournalTrans</c> data source of the form that is not null.
    /// </param>
    /// <param name="_ledgerJournalTrans_Asset_DS">
    /// A <c>LedgerJournalTrans_Asset</c> data source of the form that is not null.
    /// </param>
    /// <param name="_ledgerJournalTrans_Project_DS">
    /// A <c>LedgerJournalTrans_Project</c> data source of the form that is not null.
    /// </param>
    /// <param name="_tax1099Detail_DS">
    /// A <c>Tax1099Detail_DS</c> data source of the form that is not null.
    /// </param>
    /// <param name="_ledgerJournalTrans_RAsset_DS">
    /// A <c>LedgerJournalTrans_RAsset</c> data source of the form.
    /// </param>
    /// <param name="_ledgerJournalTrans_RDeferrals_DS">
    /// A form's <c>LedgerJournalTrans_RDeferrals_DS</c> data source. This may be null.
    /// </param>
    /// <param name="_ledgerJournalTrans_RCash_DS">
    /// A <c>LedgerJournalTrans_RCash_DS</c> data source of the form.
    /// </param>
    protected void new(FormDataSource _ledgerJournalTrans_DS,
                    FormDataSource _ledgerJournalTrans_Asset_DS,
                    FormDataSource _ledgerJournalTrans_Project_DS
                    , FormDataSource _tax1099Detail_DS
                    , FormDataSource _ledgerJournalTrans_RAsset_DS = null,
                    FormDataSource _ledgerJournalTrans_RDeferrals_DS = null,
                    FormDataSource _ledgerJournalTrans_RCash_DS = null
                    )
    {
        ;
        Debug::assert(_ledgerJournalTrans_DS != null); // A LedgerJournalTrans datasource is required.

        // Store references to the form datasources.
        ledgerJournalTrans_DS = _ledgerJournalTrans_DS;
        ledgerJournalTrans_Asset_DS = _ledgerJournalTrans_Asset_DS;
        ledgerJournalTrans_Project_DS = _ledgerJournalTrans_Project_DS;
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            tax1099Detail_DS = _tax1099Detail_DS;
        }

        // <GEERU>
        ledgerJournalTrans_RAsset_DS     = _ledgerJournalTrans_RAsset_DS;
        ledgerJournalTrans_RDeferrals_DS = _ledgerJournalTrans_RDeferrals_DS;
        ledgerJournalTrans_RCash_DS      = _ledgerJournalTrans_RCash_DS;
        // </GEERU>

        isNewEntity = true; // Default this to being a new entity.
    }

]]></Source>
			</Method>
			<Method>
				<Name>performRollbackForAbortedDelete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs a rollback of the <c>LedgerJournalTrans</c> entity.
    /// </summary>
    /// <remarks>
    ///    This method handles in-memory rollbacks for aborted delete transactions on forms.
    /// </remarks>
    public void performRollbackForAbortedDelete()
    {
        LedgerJournalTrans ledgerJournalTransCursor;
        LedgerJournalTrans_Asset ledgerJournalTrans_AssetCursor;
        LedgerJournalTrans_Project ledgerJournalTrans_ProjectCursor;

        Tax1099BoxDetail tax1099DetailCursor;

        // <GEERU>
        LedgerJournalTrans_RAsset     ledgerJournalTrans_RAssetCursor;
        LedgerJournalTrans_RDeferrals ledgerJournalTrans_RDeferralsCursor;
        LedgerJournalTrans_RCash      ledgerJournalTrans_RCashCursor;
        // </GEERU>

        // The cursor has been changed by the kernel, but the delete was unsuccessful. Re-read the records
        // and point to the correct buffer.

        // Note: We can't use research(true), positionToRecord or positionToRecordByValue as they do not
        // support data sources joined to views.
        ledgerJournalTrans_DS.formRun().args().lookupField(fieldNum(LedgerJournalTrans, RecId));
        ledgerJournalTrans_DS.formRun().args().lookupValue(int642Str(ledgerJournalTransSnapshot.RecId));
        ledgerJournalTrans_DS.research(false);

        // Get the cursors
        ledgerJournalTransCursor = ledgerJournalTrans_DS.cursor();

        if (ledgerJournalTrans_Asset_DS)
        {
            ledgerJournalTrans_AssetCursor = ledgerJournalTrans_Asset_DS.cursor();
        }

        if (ledgerJournalTrans_Project_DS)
        {
            ledgerJournalTrans_ProjectCursor = ledgerJournalTrans_Project_DS.cursor();
        }
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            if (tax1099Detail_DS)
            {
                tax1099DetailCursor = tax1099Detail_DS.cursor();
            }
        }

        // <GEERU>
        if (ledgerJournalTrans_RAsset_DS)
        {
            ledgerJournalTrans_RAssetCursor = ledgerJournalTrans_RAsset_DS.cursor();
        }
        if (ledgerJournalTrans_RDeferrals_DS)
        {
            ledgerJournalTrans_RDeferralsCursor = ledgerJournalTrans_RDeferrals_DS.cursor();
        }
        if (ledgerJournalTrans_RCash_DS)
        {
            ledgerJournalTrans_RCashCursor = ledgerJournalTrans_RCash_DS.cursor();
        }
        // </GEERU>

        // Restore the original record so that future updates work. Currently there is no means to do
        // this directly, so the record must be re-read from the database and the user's values copied back
        // to the active buffer on the form.
        if (ledgerJournalTransSnapshot)
        {
            // Restore the user's values.
            ledgerJournalTransSnapshot.copyTo(ledgerJournalTransCursor);
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            if (tax1099DetailSnapshot)
            {
                // Restore the user's values.
                tax1099DetailSnapshot.copyTo(tax1099DetailCursor);
            }
        }

        if (ledgerJournalTrans_AssetSnapshot)
        {
            // Restore the user's values.
            ledgerJournalTrans_AssetSnapshot.copyTo(ledgerJournalTrans_AssetCursor);
        }

        if (ledgerJournalTrans_ProjectSnapshot)
        {
            // Restore the user's values.
            ledgerJournalTrans_ProjectSnapshot.copyTo(ledgerJournalTrans_ProjectCursor);
        }

        // <GEERU>
        if (ledgerJournalTrans_RAssetSnapshot)
        {
            ledgerJournalTrans_RAssetSnapshot.copyTo(ledgerJournalTrans_RAssetCursor);
        }
        if (ledgerJournalTrans_RDeferralsSnapshot)
        {
            ledgerJournalTrans_RDeferralsSnapshot.copyTo(ledgerJournalTrans_RDeferralsCursor);
        }
        if (ledgerJournalTrans_RCashSnapshot)
        {
            ledgerJournalTrans_RCashSnapshot.copyTo(ledgerJournalTrans_RCashCursor);
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>performRollbackForAbortedWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs an in-memory rollback of the <c>LedgerJournalTrans</c> entity.
    /// </summary>
    /// <remarks>
    /// This method handles in-memory rollbacks for aborted write transactions on forms.
    /// </remarks>
    public void performRollbackForAbortedWrite()
    {
        LedgerJournalTrans ledgerJournalTransCursor;
        LedgerJournalTrans_Asset ledgerJournalTrans_AssetCursor;
        LedgerJournalTrans_Project ledgerJournalTrans_ProjectCursor;
        // <GEERU>
        LedgerJournalTrans_RAsset     ledgerJournalTrans_RAssetCursor;
        LedgerJournalTrans_RDeferrals ledgerJournalTrans_RDeferralsCursor;
        LedgerJournalTrans_RCash      ledgerJournalTrans_RCashCursor;
        // </GEERU>
        Tax1099BoxDetail tax1099DetailCursor;
        ;

        // Get the cursors
        ledgerJournalTransCursor = ledgerJournalTrans_DS.cursor();

        if (ledgerJournalTrans_Asset_DS)
        {
            ledgerJournalTrans_AssetCursor = ledgerJournalTrans_Asset_DS.cursor();
        }

        if (ledgerJournalTrans_Project_DS)
        {
            ledgerJournalTrans_ProjectCursor = ledgerJournalTrans_Project_DS.cursor();
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            if (tax1099Detail_DS)
            {
                tax1099DetailCursor = tax1099Detail_DS.cursor();
            }
        }

        // <GEERU>
        if (ledgerJournalTrans_RAsset_DS)
        {
            ledgerJournalTrans_RAssetCursor = ledgerJournalTrans_RAsset_DS.cursor();
        }
        if (ledgerJournalTrans_RDeferrals_DS)
        {
            ledgerJournalTrans_RDeferralsCursor = ledgerJournalTrans_RDeferrals_DS.cursor();
        }
        if (ledgerJournalTrans_RCash_DS)
        {
            ledgerJournalTrans_RCashCursor = ledgerJournalTrans_RCash_DS.cursor();
        }
        // </GEERU>

        // Handle in-memory roll-backs of the transaction buffers as the kernel does not perform this automatically.
        if (isNewEntity)
        {
            // This is a new record, so set the RecIds back to zero. This
            // is required to prevent future saves from working incorrectly.
            ledgerJournalTransCursor.RecId = 0;
            ledgerJournalTrans_AssetCursor.RecId = 0;
            ledgerJournalTrans_AssetCursor.RefRecId = 0;
            ledgerJournalTrans_ProjectCursor.RecId = 0;
            ledgerJournalTrans_ProjectCursor.RefRecId = 0;

            if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
            {
                tax1099DetailCursor.RecId = 0;
            }

            // <GEERU>
            ledgerJournalTrans_RAssetCursor.RecId = 0;
            ledgerJournalTrans_RAssetCursor.RefRecId = 0;
            ledgerJournalTrans_RDeferralsCursor.RecId = 0;
            ledgerJournalTrans_RDeferralsCursor.RefRecId = 0;
            ledgerJournalTrans_RCashCursor.RecId = 0;
            ledgerJournalTrans_RCashCursor.RefRecId = 0;
            // </GEERU>
        }
        else
        {
            // Restore the original RecVersion so that future updates work. Currently there is no means to do
            // this directly, so the record must be re-read from the database and the user's values copied back
            // to the active buffer on the form.
            if (ledgerJournalTransSnapshot)
            {
                // The record had been saved. Re-read the record and restore the user's values.
                ledgerJournalTrans_DS.reread();
                ledgerJournalTransSnapshot.copyTo(ledgerJournalTransCursor);
            }

            if (ledgerJournalTrans_AssetSnapshot)
            {
                // The record had been saved. Re-read the record and restore the user's values.
                ledgerJournalTrans_Asset_DS.reread();
                ledgerJournalTrans_AssetSnapshot.copyTo(ledgerJournalTrans_AssetCursor);
            }
            else
            {
                // This was a new sibling record. Reset its RecId so that it can be
                // saved properly on the next try.
                ledgerJournalTrans_AssetCursor.RecId = 0;
            }

            if (ledgerJournalTrans_ProjectSnapshot)
            {
                // The record had been saved. Re-read the record and restore the user's values.
                ledgerJournalTrans_Project_DS.reread();
                ledgerJournalTrans_ProjectSnapshot.copyTo(ledgerJournalTrans_ProjectCursor);
            }
            else
            {
                // This was a new sibling record. Reset its RecId so that it can be
                // saved properly on the next try.
                ledgerJournalTrans_ProjectCursor.RecId = 0;
            }

            // <GEERU>
            if (ledgerJournalTrans_RAssetSnapshot)
            {
                ledgerJournalTrans_RAsset_DS.reread();
                ledgerJournalTrans_RAssetSnapshot.copyTo(ledgerJournalTrans_RAssetCursor);
            }
            else
            {
                // This was a new sibling record. Reset its RecId so that it can be
                // saved properly on the next try.
                ledgerJournalTrans_RAssetCursor.RecId = 0;
            }
            if (ledgerJournalTrans_RDeferralsSnapshot)
            {
                ledgerJournalTrans_RDeferrals_DS.reread();
                ledgerJournalTrans_RDeferralsSnapshot.copyTo(ledgerJournalTrans_RDeferralsCursor);
            }
            else
            {
                // This was a new sibling record. Reset its RecId so that it can be
                // saved properly on the next try.
                ledgerJournalTrans_RDeferralsCursor.RecId = 0;
            }
            if (ledgerJournalTrans_RCashSnapshot)
            {
                ledgerJournalTrans_RCash_DS.reread();
                ledgerJournalTrans_RCashSnapshot.copyTo(ledgerJournalTrans_RCashCursor);
            }
            else
            {
                // This was a new sibling record. Reset its RecId so that it can be
                // saved properly on the next try.
                ledgerJournalTrans_RCashCursor.RecId = 0;
            }
            // </GEERU>

            if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
            {
                if (tax1099DetailSnapshot)
                {
                    // The record had been saved. Re-read the record and restore the user's values.
                    tax1099Detail_DS.reread();
                    tax1099DetailSnapshot.copyTo(tax1099DetailCursor);
                }
                else
                {
                    // This was a new sibling record. Reset its RecId so that it can be
                    // saved properly on the next try.
                    tax1099DetailCursor.RecId = 0;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>takeSnapshotOfLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Takes a snapshot of the <c>LedgerJournalTrans</c> buffer being pointed to by the
    ///    <c>LedgerJournalTrans</c> data source of the form.
    /// </summary>
    /// <remarks>
    ///    This method uses the data source specified during construction to obtain a pointer to the active
    ///    buffer.
    /// </remarks>
    public void takeSnapshotOfLedgerJournalTrans()
    {
        ;

        // Take a copy of the cursor's (active buffer) data.
        ledgerJournalTransSnapshot = ledgerJournalTrans_DS.cursor().data();

        isNewEntity = !ledgerJournalTransSnapshot.RecId; // Set isNewEntity to true if this record has not yet been saved to the database.
    }

]]></Source>
			</Method>
			<Method>
				<Name>takeSnapshotOfLedgerJournalTrans_Asset</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Takes a snapshot of the <c>LedgerJournalTrans_Asset</c> buffer being pointed to by the
    ///    <c>LedgerJournalTrans_Asset</c> data source of the form.
    /// </summary>
    /// <remarks>
    ///    This method uses the data source specified during construction to obtain a pointer to the active
    ///    buffer.
    /// </remarks>
    public void takeSnapshotOfLedgerJournalTrans_Asset()
    {
        ;

        Debug::assert(ledgerJournalTrans_Asset_DS != null); // There must be a valid reference to a LedgerJournalTrans_Asset datasource to take a snapshot.

        // Take a copy of the cursor's (active buffer) data.
        ledgerJournalTrans_AssetSnapshot = ledgerJournalTrans_Asset_DS.cursor().data();
    }

]]></Source>
			</Method>
			<Method>
				<Name>takeSnapshotOfLedgerJournalTrans_Project</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Takes a snapshot of the <c>LedgerJournalTrans_Project</c> buffer being pointed to by the
    ///    <c>LedgerJournalTrans_Project</c> data source of the form.
    /// </summary>
    /// <remarks>
    ///    This method uses the data source specified during construction to obtain a pointer to the active
    ///    buffer.
    /// </remarks>
    public void takeSnapshotOfLedgerJournalTrans_Project()
    {
        ;

        Debug::assert(ledgerJournalTrans_Project_DS != null); // There must be a valid reference to a LedgerJournalTrans_Project datasource to take a snapshot.

        // Take a copy of the cursor's (active buffer) data.
        ledgerJournalTrans_ProjectSnapshot = ledgerJournalTrans_Project_DS.cursor().data();
    }

]]></Source>
			</Method>
			<Method>
				<Name>takeSnapshotOfLedgerJournalTrans_RAsset</Name>
				<Source><![CDATA[
    public void takeSnapshotOfLedgerJournalTrans_RAsset()
    {
        Debug::assert(ledgerJournalTrans_RAsset_DS != null);
  
        ledgerJournalTrans_RAssetSnapshot = ledgerJournalTrans_RAsset_DS.cursor().data();
    }

]]></Source>
			</Method>
			<Method>
				<Name>takeSnapshotOfLedgerJournalTrans_RCash</Name>
				<Source><![CDATA[
    public void takeSnapshotOfLedgerJournalTrans_RCash()
    {
        ;

        Debug::assert(ledgerJournalTrans_RCash_DS != null);

        ledgerJournalTrans_RCashSnapshot = ledgerJournalTrans_RCash_DS.cursor().data();
    }

]]></Source>
			</Method>
			<Method>
				<Name>takeSnapshotOfLedgerJournalTrans_RDef</Name>
				<Source><![CDATA[
    public void takeSnapshotOfLedgerJournalTrans_RDef()
    {
        ;

        Debug::assert(ledgerJournalTrans_RDeferrals_DS != null);

        ledgerJournalTrans_RDeferralsSnapshot = ledgerJournalTrans_RDeferrals_DS.cursor().data();
    }

]]></Source>
			</Method>
			<Method>
				<Name>takeSnapshotOfTax1099Detail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Takes a snapshot of the <c>Tax1099Detail</c> buffer that is pointed to by the form's
    /// <c>Tax1099Detail</c> data source.
    /// </summary>
    /// <remarks>
    /// This method uses the data source that is specified during construction to get a pointer to the
    /// active buffer.
    /// </remarks>
    public void takeSnapshotOfTax1099Detail()
    {
        Debug::assert(tax1099Detail_DS != null); // There must be a valid reference to a Tax1099Detail datasource to take a snapshot.

        // Take a copy of the cursor's (active buffer) data.
        tax1099DetailSnapshot = tax1099Detail_DS.cursor().data();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>