<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTableData</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerJournalTableData</c> class contains methods to support ledger journals in the
/// context of the <c>JournalTableMap</c> map.
/// </summary>
[SysTableNameFactory(tableStr(LedgerJournalTable))]
public class LedgerJournalTableData extends JournalTableData
{
    private const str FeatureReferenceIT39 = 'IT-00039';

    #ISOCountryRegionCodes
    boolean countryRegion_RU;
    boolean countryRegion_EE;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromJournalName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the table buffer that is managed by this instance of the <c>LedgerJournalTableData</c>
    ///    class from a <c>LedgerJournalName</c> table record.
    /// </summary>
    /// <param name="_journalName">
    ///    The <c>JournalNameMap</c> map with which to initialize.
    /// </param>
    /// <remarks>
    ///    You will typically pass in a <c>LedgerJournalName</c> table buffer for the <paramref
    ///    name="_journalName" /> parameter.
    /// </remarks>
    public void initFromJournalName(JournalNameMap _journalName)
    {
        LedgerJournalTable  ledgerJournalTable  = this.journalTable();
        LedgerJournalName   ledgerJournalName   = _journalName;
        LedgerJournalTable_W ledgerJournalTable_W;

        journalTable.BlockUserGroupId   =   _journalName.BlockUserGroupId;
        if (!this.hasUserAccess())
        {
            return;
        }

        ledgerJournalTable.OffsetAccountType = ledgerJournalName.OffsetAccountType;
        ledgerJournalTable.parmOffsetLedgerDimension(ledgerJournalName.parmOffsetLedgerDimension());
        ledgerJournalTable.JournalType                  = ledgerJournalName.JournalType;
        ledgerJournalTable.JournalName                  = ledgerJournalName.JournalName;
        ledgerJournalTable.GroupBlockId                 = ledgerJournalName.BlockUserGroupId;
        ledgerJournalTable.DocumentNum                  = ledgerJournalName.DocumentNum;
        ledgerJournalTable.FixedExchRate                = ledgerJournalName.FixedExchRate;
        ledgerJournalTable.DetailSummaryPosting         = ledgerJournalName.DetailSummary;
        ledgerJournalTable.FixedOffsetAccount           = ledgerJournalName.FixedOffsetAccount;
        ledgerJournalTable.CurrencyCode                 = ledgerJournalName.CurrencyCode;
        ledgerJournalTable.CurrentOperationsTax         = ledgerJournalName.CurrentOperationsTax;
        ledgerJournalTable.Name                         = ledgerJournalName.Name;
        ledgerJournalTable.LedgerJournalInclTax         = ledgerJournalName.LedgerJournalInclTax;
        ledgerJournalTable.VoucherAllocatedAtPosting    = ledgerJournalName.VoucherAllocatedAtPosting;
        ledgerJournalTable.LinesLimitBeforeDistribution = ledgerJournalName.LinesLimitBeforeDistribution;
        ledgerJournalTable.OverrideSalesTax             = ledgerJournalName.OverrideSalesTax;

        ledgerJournalTable.DelayTaxCalculation = ledgerJournalName.DelayTaxCalculation;

        ledgerJournalTable.setDefaultDimension(ledgerJournalName);

        if (ledgerJournalName.VoucherAllocatedAtPosting)
        {
            ledgerJournalTable.NumberSequenceTable  = LedgerParameters::numRefLedgerTempVoucher().numberSequenceTable().RecId;
        }
        else
        {
            ledgerJournalTable.NumberSequenceTable  = ledgerJournalName.NumberSequenceTable;
        }

        if (ledgerJournalName.JournalType == LedgerJournalType::CustPaymRemittance ||
            ledgerJournalName.JournalType == LedgerJournalType::CustBillOfExchangeSettle)
        {
            ledgerJournalTable.BankRemittanceType = BankRemittanceType::Collection;
        }

        if (ledgerJournalName.JournalType == LedgerJournalType::VendPromissoryNoteRedraw)
        {
            ledgerJournalTable.ProtestSettledBill = NoYes::Yes;
        }

        if (ledgerJournalTable.CurrencyCode)
        {
            ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newExchangeDate(
                                                        Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                                        ledgerJournalTable.CurrencyCode,
                                                        DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

            ledgerJournalTable.ExchRate = exchangeRateHelper.getExchangeRate1();
            ledgerJournalTable.ExchrateSecondary = exchangeRateHelper.getExchangeRate2();

            if (Ledger::reportingCurrency())
            {
                if (Ledger::isReportingCurrencySameAsAccountingCurrency())
                {
                    ledgerJournalTable.ReportingCurrencyExchRate = ledgerJournalTable.ExchRate;
                    ledgerJournalTable.ReportingCurrencyExchRateSecondary = ledgerJournalTable.ExchrateSecondary;
                }
                else
                {
                    exchangeRateHelper.parmToCurrency(Ledger::reportingCurrency());
                    exchangeRateHelper.parmExchangeRateTypeRecId(Ledger::reportingCurrencyExchangeRateType());

                    ledgerJournalTable.ReportingCurrencyExchRate = exchangeRateHelper.getExchangeRate1();
                    ledgerJournalTable.ReportingCurrencyExchRateSecondary= exchangeRateHelper.getExchangeRate2();
                }
            }

            ledgerJournalTable.euroTriangulation = NoYes::No;
        }

        // Perform workflow approvals defaulting.
        ledgerJournalTable.initWFApprovalStatus(ledgerJournalName);

        // <GEEU>
        if (countryRegion_RU || countryRegion_EE)
        {
            ledgerJournalTable_W               = ledgerJournalTable.ledgerJournalTable_W();
            ledgerJournalTable_W.Prepayment_W  = ledgerJournalName.Prepayment_W;
            ledgerJournalTable_W.CashAccount_W = ledgerJournalName.CashAccount_W;
            ledgerJournalTable.packLedgerJournalTable_W(ledgerJournalTable_W);
        }
        // </GEEU>

        if (ledgerJournalTable.JournalType == LedgerJournalType::CustomsDeclaration_IT)
        {
            GlobalizationInstrumentationHelper::featureRun(FeatureReferenceIT39, funcName());

            LedgerJournalTable_Customs_IT ledgerJournalTable_Customs = ledgerJournalTable.ledgerJournalTable_Customs_IT();
            ledgerJournalTable_Customs.initFromLedgerJournalName(ledgerJournalName);
            ledgerJournalTable.packLedgerJournalTable_Customs_IT(ledgerJournalTable_Customs);
        }

        // <RUP>
        if (countryRegion_RU &&
            ledgerJournalTable.JournalType == LedgerJournalType::Payroll_RU)
        {
            ledgerJournalTable.Name += strfmt("@GLS110613", date2str(ledgerJournalTable.ledgerJournalTable_W().ReportPeriod_RU, 23, 0, 1, 4, 1, 4, DateFlags::None));
        }
        // </RUP>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLedgerJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>LedgerJournalTable</c> table buffer that is managed by this instance of the
    ///    <c>LedgerJournalTableData</c> class by using another <c>LedgerJournalTable</c> table buffer.
    /// </summary>
    /// <param name="_ledgerJournalTable">
    ///    The <c>LedgerJournalTable</c> that will be used as the source.
    /// </param>
    /// <remarks>
    ///    Workflow approvals status is not blindly copied. If the state of the source buffer is currently
    ///    "none" or "approved", the destination buffer will receive that value. If the workflow approvals
    ///    status of the source is active (a <c>LedgerJournalWFApprovalStatus</c> enumeration value of:
    ///    "submitted", "change request", and so on), the destination will be set to "not submitted" because
    ///    it has no active workflow context.
    /// </remarks>
    public void initFromLedgerJournalTable(LedgerJournalTable   _ledgerJournalTable)
    {
        LedgerJournalTable  ledgerJournalTable  = this.journalTable();

        ledgerJournalTable.JournalName                  = _ledgerJournalTable.JournalName;
        ledgerJournalTable.Name                         = _ledgerJournalTable.Name;
        ledgerJournalTable.OffsetAccountType            = _ledgerJournalTable.OffsetAccountType;
        ledgerJournalTable.OriginalJournalNum           = _ledgerJournalTable.JournalNum;
        ledgerJournalTable.ParentJournalNum             = _ledgerJournalTable.JournalNum;
        ledgerJournalTable.JournalType                  = _ledgerJournalTable.JournalType;
        ledgerJournalTable.parmOffsetLedgerDimension(_ledgerJournalTable.parmOffsetLedgerDimension());
        ledgerJournalTable.NumberSequenceTable          = _ledgerJournalTable.NumberSequenceTable;
        ledgerJournalTable.LedgerJournalInclTax         = _ledgerJournalTable.LedgerJournalInclTax;
        ledgerJournalTable.OverrideSalesTax             = _ledgerJournalTable.OverrideSalesTax;
        ledgerJournalTable.BankRemittanceType           = _ledgerJournalTable.BankRemittanceType;
        ledgerJournalTable.BankAccountId                = _ledgerJournalTable.BankAccountId;
        ledgerJournalTable.LinesLimitBeforeDistribution = _ledgerJournalTable.LinesLimitBeforeDistribution;
        ledgerJournalTable.CurrentOperationsTax         = _ledgerJournalTable.CurrentOperationsTax;
        ledgerJournalTable.VoucherAllocatedAtPosting    = _ledgerJournalTable.VoucherAllocatedAtPosting;
        ledgerJournalTable.DefaultDimension             = _ledgerJournalTable.DefaultDimension;
        ledgerJournalTable.Approver                     = _ledgerJournalTable.Approver;
        ledgerjournaltable.ReportedAsReadyBy            = _ledgerJournalTable.ReportedAsReadyBy;

        ledgerJournalTable.CurrencyCode                       = _ledgerJournalTable.CurrencyCode;
        ledgerJournalTable.ExchRate                           = _ledgerJournalTable.ExchRate;
        ledgerJournalTable.ExchRateSecondary                  = _ledgerJournalTable.ExchRateSecondary;
        ledgerJournalTable.FixedExchRate                      = _ledgerJournalTable.FixedExchRate;
        ledgerJournalTable.ReportingCurrencyFixedExchRate     = _ledgerJournalTable.ReportingCurrencyFixedExchRate;
        ledgerJournalTable.ReportingCurrencyExchRate          = _ledgerJournalTable.ReportingCurrencyExchRate;
        ledgerJournalTable.ReportingCurrencyExchRateSecondary = _ledgerJournalTable.ReportingCurrencyExchRateSecondary;
        ledgerJournalTable.DocumentNum                        = _ledgerJournalTable.DocumentNum;

        if (!_ledgerJournalTable.isInWFApprovalProcess() || _ledgerJournalTable.isWFApprovalApproved())
        {
            // The journal is not an active workflow approvals document, so just copy the prior workflow
            // state across. If the old journal is approved the new journal will be approved; if the old
            // journal is not in workflow (i.e. "None") then the new journal will not be in workflow.
            ledgerJournalTable.WorkflowApprovalStatus = _ledgerJournalTable.WorkflowApprovalStatus;
        }
        else
        {
            // The old journal is an active workflow approvals, but we can't just migrate the state across
            // to a different journal because it would not have an active instance of workflow. Just default
            // it to "Not Submitted" so that it can be submitted by the user later, if they choose to.
            ledgerJournalTable.WorkflowApprovalStatus = LedgerJournalWFApprovalStatus::NotSubmitted;
        }

        if (ledgerJournalTable.JournalType == LedgerJournalType::CustomsDeclaration_IT)
        {
            GlobalizationInstrumentationHelper::featureRun(FeatureReferenceIT39, funcName());

            LedgerJournalTable_Customs_IT ledgerJournalTable_Customs;

            ledgerJournalTable_Customs = ledgerJournalTable.ledgerJournalTable_Customs_IT();
            ledgerJournalTable_Customs.initFromLedgerJournalTable(_ledgerJournalTable);
            ledgerJournalTable.packLedgerJournalTable_Customs_IT(ledgerJournalTable_Customs);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveVoucherToJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves a voucher from the current journal to a new journal.
    /// </summary>
    /// <param name="_newLedgerJournalId">
    ///    The ID of the journal to move vouchers to.
    /// </param>
    /// <param name="_fromVoucher">
    ///    The voucher at the start of the range of vouchers to move.
    /// </param>
    /// <param name="_toVoucher">
    ///    The voucher at the end of the range of vouchers to move; optional. If not provided, uses <paramref name="_fromVoucher" />.
    /// </param>
    public void moveVoucherToJournal(
        LedgerJournalId     _newLedgerJournalId,
        Voucher             _fromVoucher,
        Voucher             _toVoucher = _fromVoucher)
    {
        LedgerJournalTable                  ledgerJournalTable = this.journalTable();
        LedgerJournalTable                  errorLedgerJournalTable = LedgerJournalTable::find(_newLedgerJournalId);
        LedgerJournalTrans                  ledgerJournalTrans;
        LedgerJournalVoucherChanged         ledgerJournalVoucherChanged;
        LedgerJournalTransVoucherTemplate   ledgerJournalTransVoucherTemplate;
        VendTrans                           vendTrans;
        TaxUncommitted                      taxUncommitted;

        ttsbegin;

        // <GEERU>
        if (countryRegion_RU &&
            (ledgerJournalTable.JournalType == LedgerJournalType::CustPayment ||
             ledgerJournalTable.JournalType == LedgerJournalType::Payment))
        {
            while select forupdate ledgerJournalTrans
                where ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum &&
                      ledgerJournalTrans.Voucher    >= _fromVoucher                  &&
                      ledgerJournalTrans.Voucher    <= _toVoucher
            {
                ledgerJournalTrans.JournalNum = _newLedgerJournalId;

                ledgerJournalTrans.updateBankPaymentOrderJour_RU();
                ledgerJournalTrans.updatePaymentOrderBudgetTrans_RU();

                ledgerJournalTrans.doUpdate();
            }
        }
        else
        {
        // </GEERU>
            ledgerJournalTrans.skipDataMethods(true);

            update_recordset ledgerJournalTrans
                setting JournalNum = _newLedgerJournalId
                where ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum
                   && ledgerJournalTrans.Voucher    >= _fromVoucher
                   && ledgerJournalTrans.Voucher    <= _toVoucher;
        // <GEERU>
        }
        // </GEERU>

        // need to update TaxUncommitted so that the taxUncommitted records for the
        // vouchers with errors points to the LedgerJournalTable record.
        update_recordset taxUncommitted
            setting HeadingTableId = errorLedgerJournalTable.TableId,
                    HeadingRecId = errorLedgerJournalTable.RecId
             where  taxUncommitted.HeadingTableId == ledgerJournalTable.TableId &&
                    taxUncommitted.HeadingRecId == ledgerJournalTable.RecId &&
                    taxUncommitted.Voucher    >= _fromVoucher &&
                    taxUncommitted.Voucher    <= _toVoucher;

        if (ledgerJournalTable.JournalType == LedgerJournalType::Approval)
        {
            while select RecId, JournalNum, Voucher from ledgerJournalTrans
                where ledgerJournalTrans.JournalNum == _newLedgerJournalId
                   && ledgerJournalTrans.Voucher    >= _fromVoucher
                   && ledgerJournalTrans.Voucher    <= _toVoucher
            {
                update_recordset ledgerJournalVoucherChanged
                    setting JournalNum = _newLedgerJournalId
                    where ledgerJournalVoucherChanged.JournalNum    == ledgerJournalTable.JournalNum
                       && ledgerJournalVoucherChanged.ToVoucher     == ledgerJournalTrans.Voucher;
            }

            while select ledgerJournalTrans group by VendTransId
                where ledgerJournalTrans.JournalNum == _newLedgerJournalId
            {
                select firstonly forupdate vendTrans
                    where vendTrans.RecId == ledgerJournalTrans.VendTransId;

                if (vendTrans)
                {
                    vendTrans.JournalNum = _newLedgerJournalId;
                    vendTrans.update();
                }
            }
        }

        if (ledgerJournalTable.JournalType == LedgerJournalType::Daily ||
            ledgerJournalTable.JournalType == LedgerJournalType::VendInvoiceRegister)
        {
            while select RecId, Voucher from ledgerJournalTrans
                where ledgerJournalTrans.JournalNum == _newLedgerJournalId
                   && ledgerJournalTrans.Voucher    >= _fromVoucher
                   && ledgerJournalTrans.Voucher    <= _toVoucher
            {
                update_recordset ledgerJournalTransVoucherTemplate
                    setting JournalNum = _newLedgerJournalId
                    where ledgerJournalTransVoucherTemplate.JournalType == ledgerJournalTable.JournalType
                       && ledgerJournalTransVoucherTemplate.JournalNum  == ledgerJournalTable.JournalNum
                       && ledgerJournalTransVoucherTemplate.Voucher     == ledgerJournalTrans.Voucher;
            }
        }
        // <GEEPL>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            ExportSalesInvoiceDomesticTaxVoucher::updateJournalNumber(ledgerJournalTable.JournalNum, _newLedgerJournalId, _fromVoucher, _toVoucher);
        }
        // </GEEPL>
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new <c>LedgerJournalTableData</c> object
    /// </summary>
    /// <param name = "_journalTable">The journal table.</param>
    /// <returns>A new intance of the <c>LedgerJournalTableData</c> object.</returns>
    [SysObsolete('Use JournalTableData::newTable() instead.', false, 31\05\2017)]
    public static LedgerJournalTableData construct(JournalTableMap _journalTable)
    {
        return new LedgerJournalTableData(_journalTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new instance of a <c>LedgerJournalTableData</c> class.
    /// </summary>
    /// <param name="_journalTable">
    ///     A <c>JournalTableMap</c> buffer.
    /// </param>
    protected void new(JournalTableMap _journalTable)
    {
        super(_journalTable);
        countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        countryRegion_EE = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL, #isoCZ, #isoHU, #isoLT, #isoLV, #isoEE]);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>