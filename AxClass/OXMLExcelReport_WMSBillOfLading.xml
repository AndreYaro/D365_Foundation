<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OXMLExcelReport_WMSBillOfLading</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class prints Bill of lading report to excel.
/// </summary>
class OXMLExcelReport_WMSBillOfLading extends XMLExcelReport_RU implements BatchRetryable, ERIReportPostProcessingWithPrintMgmtSupported
{
    #define.page1Width(49)
    #define.page2Width(77)

    WMSBillOfLading             billOfLading;
    WMSBillOfLadingId           billOfLadingId;

    TmpSalesPurchReportTable_RU header;
    TmpSalesPurchReportLine_RU  dynamicData;

    DialogField                 dlgBillOfLadingId;
    Counter                     totalLines;
    Counter                     totalPages;
    Label                       label;

    PrintCopyOriginal           printCopyOriginal;

    #define.Russian("ru")
    // Pages
    #define.Prolog             ("PROLOG")
    #define.Body               ("BODY")
    #define.Footer             ("FOOTER")
    #define.Page2              ("PAGE2")
    #define.Header             ("HEADER")

    // Page 1, header
    #define.DocNum             ("DocNum")
    #define.DocDate            ("DocDate")
    #define.ConsignorAddress   ("ConsignorAddress")
    #define.ConsignorOKPO      ("ConsignorOKPO")
    #define.ConsigneeAddress   ("ConsigneeAddress")
    #define.ConsigneeOKPO      ("ConsigneeOKPO")
    #define.CustomerBankAddress("CustomerBankAddress")
    #define.CustomerOKPO       ("CustomerOKPO")
    #define.PriceHeader        ("PriceHeader")
    #define.AmountHeader       ("AmountHeader")

    // Page 1, line header

    // Page 1, lines

    // Page1, body
    #define.ItemId  ("ItemId")
    #define.Qty     ("Qty")
    #define.Price   ("Price")
    #define.ItemName("ItemName")
    #define.Unit    ("Unit")
    #define.Packing ("Packing")
    #define.Places  ("Places")
    #define.Weight  ("Weight")
    #define.Amount  ("Amount")

    // Page1, footer
    #define.PageCount         ("PageCount")
    #define.RowCount          ("RowCount")
    #define.RowCountEx        ("RowCountEx")
    #define.PositionsCount    ("PositionsCount")
    #define.TotalAmountVAT    ("TotalAmountVAT")
    #define.TotalAmountVATEx  ("TotalAmountVATEx")
    #define.TotalNetWeight    ("TotalNetWeight")
    #define.TotalNetWeightEx  ("TotalNetWeightEx")
    #define.TotalGrossWeight  ("TotalGrossWeight")
    #define.TotalGrossWeightEx("TotalGrossWeightEx")
    #define.Accountant        ("Accountant")
    #define.AttorneyId        ("AttorneyId")
    #define.AttorneyIssuedBy  ("AttorneyIssuedBy")
    #define.ManagerTitle      ("ManagerTitle")
    #define.ManagerName       ("ManagerName")
    #define.SupplierTitle     ("SupplierTitle")
    #define.SupplierName      ("SupplierName")
    #define.AcceptorTitle     ("AcceptorTitle")
    #define.AcceptorName      ("AcceptorName")
    #define.TakerTitle        ("TakerTitle")
    #define.TakerName         ("TakerName")

    // Page 2
    #define.DocNum_2             ("DocNum_2")
    #define.ExpectedDeliveryDate ("ExpectedDeliveryDate")
    #define.CarrierAddress       ("CarrierAddress")
    #define.TransportName        ("TransportName")
    #define.VehicleNumber        ("VehicleNumber")
    #define.Waybill              ("Waybill")
    #define.CustomerBankAddressTR("CustomerBankAddressTR")
    #define.DriverName           ("DriverName")
    #define.DriverLicenseNumber  ("DriverLicenseNumber")
    #define.LicenseCardType      ("LicenseCardType")
    #define.LicenseCardRegNum    ("LicenseCardRegNum")
    #define.LicenseCardSeries    ("LicenseCardSeries")
    #define.LicenseCardNumber    ("LicenseCardNumber")
    #define.TransportationType   ("TransportationType")
    #define.LadingAddress        ("LadingAddress")
    #define.UnladingAddress      ("UnladingAddress")
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        #define.minHeight(17.5)

        return max(#minHeight,
                   document.getNamedRangeHeightWrapped(#ItemId, dynamicData.ItemId),
                   document.getNamedRangeHeightWrapped(#ItemName, dynamicData.ItemName)
                  );
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        totalLines = 0;
        totalPages = 1;

        this.initSectionMap();

        this.initData();

        //page1:
        this.setCurrentWorksheetNum(1,#page1Width);
        this.execute(#Prolog);
        this.execute(#Header);

        while select dynamicData
        {
            if (this.mustCreateNewPage())
            {
                document.insertPageBreak(currentRow, curWorksheetNum);
                currentHeight = 0;
                this.execute(#Header);
                totalPages ++;
            }

            this.execute(#Body);

            totalLines ++;
        }

        //footer for page1:
        this.execute(#Footer);
        this.setPrintArea();

        //page2:
        this.setCurrentWorksheetNum(2, #page2Width);
        this.execute(#Page2);
        this.setPrintArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    protected Filename fileName()
    {
        return 'RU_WMSBOL_1T';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    #define.Dash('_')
    protected Filename fileNamePostfix()
    {
        return #Dash + billOfLading.BillOfLadingId + #Dash + enum2str(printCopyOriginal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report file.
    /// </summary>
    /// <returns>
    /// The name of the report file.
    /// </returns>
    public str getReportFileName()
    {
        return this.excelFileName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report.
    /// </summary>
    /// <returns>
    /// The name of the report.
    /// </returns>
    public str getReportName()
    {
        return '1T';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    private void fillBody()
    {
        UnitOfMeasureRecId  sysUnitId  = UnitOfMeasureSystemUnit::findByUnitOfMeasureClass(UnitOfMeasureClass::Mass).UnitOfMeasure;
        UnitOfMeasureRecId  tonUnitId  =  UnitOfMeasure::findByInternalCode(UnitOfMeasureCodeSymbol::Tonnes).RecId;

        #define.Dash("-")

        this.insertValueToSection(#ItemId,   dynamicData.ItemId);
        this.insertValueToSection(#Qty,      strFmt("@GLS106745", dynamicData.Qty));
        this.insertValueToSection(#Price,    strFmt("@GLS106745", dynamicData.lineAmountWithVAT() / (dynamicData.Qty ? dynamicData.Qty : 1)));
        this.insertValueToSection(#ItemName, dynamicData.ItemName);
        this.insertValueToSection(#Unit,     dynamicData.Unit);
        this.insertValueToSection(#Packing,  dynamicData.Packing);
        this.insertValueToSection(#Places,   dynamicData.QtyNumber  ?
                                  int2str(any2int(dynamicData.QtyNumber)) :
                                  #Dash);

        this.insertValueToSection(#Weight,   strFmt("%1", EcoResProductUnitConverter::convertForReleasedProduct(dynamicData.ItemId,
                                                                                                                dynamicData.InventDimId,
                                                                                                                dynamicData.GrossWeight,
                                                                                                                sysUnitId,
                                                                                                                tonUnitId,
                                                                                                                NoYes::No)));
            
        this.insertValueToSection(#Amount,   strFmt("@GLS106745", dynamicData.lineAmountWithVAT()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case #Prolog:
                this.fillProlog();
                break;
            case #Body:
                this.fillBody();
                break;
            case #Footer:
                this.fillFooter();
                break;
            case #Page2:
                this.fillPage_2();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFooter</Name>
				<Source><![CDATA[
    #define.Underscore("_")
    private void fillFooter()
    {
        UnitOfMeasureRecId  sysUnitId = UnitOfMeasureSystemUnit::findByUnitOfMeasureClass(UnitOfMeasureClass::Mass).UnitOfMeasure;
        UnitOfMeasureRecId  tonUnitId = UnitOfMeasure::findByInternalCode(UnitOfMeasureCodeSymbol::Tonnes).RecId;
        UnitOfMeasure       kgUnitOfMeasure;
        TempStr             tempStr;

        RNumDateInWordConverter converter = RNumDateInWordConverter::construct(CompanyInfo::languageId());
        Weight              totalGrossWeightInTons;
        Weight              totalNetWeightInTons;

        // Units of measure checks should have already been performed in the OXMLExcelReport_WMSBillOfLading::checkUnitsOfMeasure method at the starting point of the report execution,
        // But just to be on the safe side...

        if (!sysUnitId)
        {
            throw error(strFmt("@GLS222804", UnitOfMeasureClass::Mass));
        }

        if (!tonUnitId)
        {
            throw error(strFmt("@GLS222805", UnitOfMeasureCodeSymbol::Tonnes));
        }

        if (!UnitOfMeasureConverter::canBeConverted(sysUnitId, tonUnitId))
        {
            throw error(strFmt("@GLS115414", UnitOfMeasure::find(sysUnitId).Symbol, UnitOfMeasure::find(tonUnitId).Symbol));
        }

        kgUnitOfMeasure = UnitOfMeasure::findByInternalCode(UnitOfMeasureCodeSymbol::Kilograms);

        if (!kgUnitOfMeasure)
        {
            throw error(strFmt("@GLS222805", UnitOfMeasureCodeSymbol::Kilograms));
        }

        if (!kgUnitOfMeasure.RecId != sysUnitId && !UnitOfMeasureConverter::canBeConverted(tonUnitId, kgUnitOfMeasure.RecId))
        {
            throw error(strFmt("@GLS115414", UnitOfMeasure::find(tonUnitId).Symbol, kgUnitOfMeasure.Symbol));
        }

        this.insertValueToSection(#Weight,   strFmt("%1", UnitOfMeasureConverter::convert(dynamicData.GrossWeight,
                                                                                          sysUnitId,
                                                                                          tonUnitId,
                                                                                          NoYes::No)));

        select sum(QtyNumber) from dynamicData;

        this.insertValueToSection(          #PageCount,         totalPages);
        this.insertValueToSection(          #RowCount,          converter.numeralsToTxt(any2int(totalLines)));
        this.insertValueToSectionNoOverflow(#RowCountEx,        converter.numeralsToTxt(any2int(totalLines)));
        this.insertValueToSectionNoOverflow(#PositionsCount,    converter.numeralsToTxt(dynamicData.QtyNumber));
        this.insertValueToSection(          #TotalAmountVAT,    header.TotalAmountWithVAT);
        this.insertValueToSection(          #TotalAmountVATEx,  converter.numeralsToCurrency(header.TotalAmountWithVAT, header.CurrencyCode));

        totalGrossWeightInTons = UnitOfMeasureConverter::convert(header.TotalGrossWeight,
                                                                 sysUnitId,
                                                                 tonUnitId,
                                                                 NoYes::No);

        tempStr = this.prepareTonWeightTextualRepresentation(totalGrossWeightInTons, header.TotalGrossWeight, sysUnitId, tonUnitId, kgUnitOfMeasure, converter);

        this.insertValueToSectionNoOverflow(#TotalGrossWeight,   tempStr);
        this.insertValueToSection(          #TotalGrossWeightEx, totalGrossWeightInTons);

        totalNetWeightInTons = UnitOfMeasureConverter::convert(header.TotalNetWeight,
                                                               sysUnitId,
                                                               tonUnitId,
                                                               NoYes::No);

        tempStr = this.prepareTonWeightTextualRepresentation(totalNetWeightInTons, header.TotalNetWeight, sysUnitId, tonUnitId, kgUnitOfMeasure, converter);

        this.insertValueToSectionNoOverflow(#TotalNetWeight,   tempStr);
        this.insertValueToSection(          #TotalNetWeightEx, totalNetWeightInTons);

        this.insertValueToSection(#AttorneyId,    (header.AttorneyId ? header.AttorneyId : strRep(#Underscore, 10)) +
                                                  (header.AttorneyDate                                   ?
                                                   strFmt(label.extractString(literalStr("@GLS107210")),
                                                          "",
                                                          converter.date2str(header.AttorneyDate, true)) :
                                                   ""));
        this.insertValueToSection(#AttorneyIssuedBy,   header.AttorneyIssuedName);

        // Officials
        this.insertValueToSectionNoOverflow(#ManagerName,        header.DirectorName);
        this.insertValueToSectionNoOverflow(#ManagerTitle,       header.DirectorTitle);
        this.insertValueToSectionNoOverflow(#Accountant,         header.AccountantName);
        this.insertValueToSectionNoOverflow(#AcceptorTitle,      header.AcceptorTitle);
        this.insertValueToSectionNoOverflow(#AcceptorName,       header.AcceptorName);
        this.insertValueToSectionNoOverflow(#TakerTitle,         header.TakerTitle);
        this.insertValueToSectionNoOverflow(#TakerName,          header.TakerName);
        this.insertValueToSectionNoOverflow(#SupplierTitle,      header.SupplierTitle);
        this.insertValueToSectionNoOverflow(#SupplierName,       header.SupplierName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPage_2</Name>
				<Source><![CDATA[
    private void fillPage_2()
    {
        SalesPurchReportCounteragentData_RU addressData;
        LogisticsLocationEntity             ladingLocation, unladingLocation;
        LogisticsPostalAddress              ladingAddress,  unladingAddress;

        ladingAddress    = LogisticsPostalAddress::findRecId(billOfLading.LadingPostalAddress_RU);
        unladingAddress  = LogisticsPostalAddress::findRecId(billOfLading.UnladingPostalAddress_RU);
        ladingLocation   = LogisticsLocationEntity::constructFromLocationRecId(ladingAddress.Location);
        unladingLocation = LogisticsLocationEntity::constructFromLocationRecId(unladingAddress.Location);

        this.insertValueToSectionNoOverflow(#CarrierAddress,        billOfLading.addressCarrier_RU(true, CompanyInfo::languageId()));
        this.insertValueToSection(#DocNum_2,              billOfLading.BillOfLadingId);
        this.insertValueToSection(#ExpectedDeliveryDate,  billOfLading.DeliveryDate_RU);
        this.insertValueToSection(#TransportName,         VehicleModelTable_W::description(billOfLading.VehicleModel_RU));
        this.insertValueToSection(#VehicleNumber,         billOfLading.VehiclePlateNum_RU);
        this.insertValueToSection(#Waybill,               billOfLading.WaybillNum_RU);
        this.insertValueToSectionNoOverflow(#CustomerBankAddressTR, header.CustBankAddress);
        this.insertValueToSection(#DriverName,            billOfLading.DriverName_RU);
        this.insertValueToSection(#DriverLicenseNumber,   billOfLading.DrivingLicenseNum_RU);

        // License card
        this.insertValueToSection(#LicenseCardType,   strLwr(label.extractString(billOfLading.LicenseCardType_RU == LicenseCardType_RU::Limited ?
                                                             literalStr("@GLS111065") :
                                                             literalStr("@GLS111064"))));
        this.insertValueToSection(#LicenseCardRegNum, billOfLading.LicenseCardRegNum_RU);
        this.insertValueToSection(#LicenseCardSeries, billOfLading.LicenseCardSeries_RU);
        this.insertValueToSection(#LicenseCardNumber, billOfLading.LicenseCardNum_RU);

        this.insertValueToSection(#TransportationType, TransportationTypeTable_RU::description(billOfLading.TransportationType_RU));

        // Lading address
        addressData = new SalesPurchReportCounteragentData_RU(CompanyInfo::languageId());
        addressData.parmAddress(ladingAddress.Address);
        addressData.parmPhone  (ladingLocation.getPhone());
        addressData.parmTelefax(ladingLocation.getTeleFax());
        this.insertValueToSectionNoOverflow(#LadingAddress, addressData.fullAddress(true, true));

        // Unlading address
        addressData = new SalesPurchReportCounteragentData_RU(CompanyInfo::languageId());
        addressData.parmAddress(unladingAddress.Address);
        addressData.parmPhone  (unladingLocation.getPhone());
        addressData.parmTelefax(unladingLocation.getTeleFax());
        this.insertValueToSectionNoOverflow(#UnladingAddress, addressData.fullAddress(true, true));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillProlog</Name>
				<Source><![CDATA[
    private void fillProlog()
    {
        str shortName       = CurrencyNameDeclension_RU::currencyExt(header.CurrencyCode);
        str shortNamePenny  = CurrencyNameDeclension_RU::currencyPennyExt(header.CurrencyCode);
        str currencyTxt     = shortName && shortNamePenny                       ?
                              strFmt("@SYS26868", shortName, shortNamePenny)    :
                              shortName + shortNamePenny;

        this.insertValueToSection(#DocNum,  billOfLading.BillOfLadingId);
        this.insertValueToSection(#DocDate, DateTimeUtil::date(billOfLading.CreatedDateTime));

        this.insertValueToSectionNoOverflow(#ConsignorAddress,    header.ConsignorBankAddress);
        this.insertValueToSection(          #ConsignorOKPO,       header.ConsignorOKPO);
        this.insertValueToSectionNoOverflow(#ConsigneeAddress,    header.ConsigneeBankAddress);
        this.insertValueToSection(          #ConsigneeOKPO,       header.ConsigneeOKPO);
        this.insertValueToSectionNoOverflow(#CustomerBankAddress, header.CustBankAddress);
        this.insertValueToSection(          #CustomerOKPO,        header.CustOKPO);
        this.insertValueToSection(          #PriceHeader,         strFmt("@SYS26868", SysLabel::labelId2String(literalStr("@SYS11865"), #Russian), currencyTxt));
        this.insertValueToSection(          #AmountHeader,        strFmt("@SYS26868", SysLabel::labelId2String(literalStr("@SYS62867"), #Russian), currencyTxt));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCompanyData</Name>
				<Source><![CDATA[
    private SalesPurchReportCounteragentData_RU initCompanyData(CompanyBankAccountId _bank = "")
    {
        CompanyInfo                         company = CompanyInfo::find();
        SalesPurchReportCounteragentData_RU ret = new SalesPurchReportCounteragentData_RU();

        ret.parmName            (company.Name);
        ret.parmAddress         (company.primaryAddress());
        ret.parmPhone           (company.phone());
        ret.parmTelefax         (company.teleFax());
        ret.parmBankAccountTable(BankAccountTable::find(_bank ? _bank : company.Bank));
        ret.parmOKDP            (CompanyInfoHelper::partyOKDPasOfDate_RU(company));
        ret.parmOKPO            (CompanyInfoHelper::partyOKPOasOfDate_RU(company));
        ret.parmINN             (company.partyINNasOfDate_RU());
        ret.parmStructDept      (SalesParameters::find().StructDepartment_RU);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendData</Name>
				<Source><![CDATA[
    private SalesPurchReportCounteragentData_RU initCustVendData(CustVendTable  _contragent,
                                                                 BankAccountMap _bankAccount,
                                                                 CustVendAC     _account)
    {
        SalesPurchReportCounteragentData_RU ret = new SalesPurchReportCounteragentData_RU();
        DirPartyTable partyTable;

        switch (_contragent.TableId)
        {
            case tableNum(CustTable):
                _contragent = CustTable::find(_contragent.AccountNum);
                break;

            case tableNum(VendTable):
                _contragent = VendTable::find(_contragent.AccountNum);
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        switch (_bankAccount.TableId)
        {
            case tableNum(CustBankAccount):
                _bankAccount = CustBankAccount::find(_contragent.AccountNum, _contragent.BankAccountId);
                break;

            case tableNum(VendBankAccount):
                _bankAccount = VendBankAccount::find(_contragent.AccountNum, _contragent.BankAccountId);
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        partyTable = DirPartyTable::findRec(_contragent.Party);

        ret.parmName            (partyTable.Name);
        ret.parmAddress         (partyTable.primaryAddress());
        ret.parmPhone           (_contragent.phone());
        ret.parmTelefax         (_contragent.telefax());
        ret.parmBankAccountTable(_bankAccount);
        ret.parmOKDP            (_contragent.partyOKDPasOfDate_RU());
        ret.parmOKPO            (_contragent.partyOKPOasOfDate_RU());
        ret.parmINN             (_contragent.partyINNasOfDate_RU());
        ret.parmStructDept      (_contragent.getStructDepartment_RU());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initData</Name>
				<Source><![CDATA[
    private void initData()
    {
        CustInvoiceJour         custInvoiceJour;
        CustPackingSlipJour     custPackingSlipJour;
        InventTransferJour      inventTransferJour;
        SalesReport_WMSBOL_RU   report;

        label           = new Label(#Russian);
        billOfLading    = WMSBillOfLading::find_RU(billOfLadingId);

        if ( billOfLading.ShipmentId )
        {
            this.initReportDataShipment(billOfLading);
        }
        else
        {
            switch (billOfLading.wmsReferenceType)
            {
                case WMSReferenceType::Sales:

                    select firstonly custInvoiceJour
                        where custInvoiceJour.BillOfLadingId == billOfLadingId;
                    if (custInvoiceJour)
                    {
                        report = new SalesReport_WMSBOL_RU();
                        report.setParameters(printCopyOriginal, custInvoiceJour);
                        report.preRun();

                        header = report.parmHeader();
                        dynamicData.setTmpData(report.parmDynamicData());
                    }
                    else
                    {
                        select firstonly custPackingSlipJour
                            where custPackingSlipJour.BillOfLadingId == billOfLadingId;
                        if (! custPackingSlipJour )
                        {
                            throw error(strFmt("@GLS111079", billOfLadingId));
                        }
                        this.initReportDataPackingSlip(billOfLading, custPackingSlipJour);
                    }
                    break;

                case WMSReferenceType::TransferOrderShipment:

                    select firstonly inventTransferJour
                        where inventTransferJour.BillOfLadingId_RU == billOfLadingId;

                    if ( ! inventTransferJour)
                    {
                        throw error(strFmt("@GLS115701", billOfLadingId));
                    }

                    this.initReportDataTransferJour(billOfLading, inventTransferJour);

                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeaderFromInventTransferJour</Name>
				<Source><![CDATA[
    private void initHeaderFromInventTransferJour( InventTransferJour _inventTransferJour)
    {
        SalesPurchReportCounteragentData_RU counteragentData;
        VendTable                           vendTable;
        switch (_inventTransferJour.TransferType_RU)
        {
            case InventTransferType_RU::Standard:
                counteragentData            = this.initCompanyData();
                header.VendBankAddress      = counteragentData.fullInvoiceInfo(true, true);
                header.VendOKPO             = counteragentData.parmOKPO();

                header.ConsignorBankAddress = counteragentData.fullInvoiceInfo(true, true);
                header.ConsignorOKPO        = counteragentData.parmOKPO();
                header.ConsignorOKDP        = counteragentData.parmOKDP();
                header.ConsignorStructDept  = counteragentData.parmStructDept();

                if (InventLocation::find(_inventTransferJour.InventLocationIdTo).VendAccount)
                {
                    vendTable                   = VendTable::find(InventLocation::find(_inventTransferJour.InventLocationIdTo).VendAccount);
                    counteragentData            = this.initCustVendData(vendTable,
                                                                        VendBankAccount::find(vendTable.AccountNum, vendTable.BankAccount),
                                                                        vendTable.AccountNum);
                }
                else
                {
                     counteragentData            = this.initCompanyData();
                }
                header.CustBankAddress      = counteragentData.fullInvoiceInfo(true, true);
                header.CustOKPO             = counteragentData.parmOKPO();

                header.ConsigneeBankAddress = counteragentData.fullInvoiceInfo(true, true);
                header.ConsigneeOKPO        = counteragentData.parmOKPO();
                header.ConsigneeOKDP        = counteragentData.parmOKDP();
                header.ConsigneeStructDept  = counteragentData.parmStructDept();
                break;
            case InventTransferType_RU::IssueToParty:
                counteragentData            = this.initCompanyData();
                header.VendBankAddress      = counteragentData.fullInvoiceInfo(true, true);
                header.VendOKPO             = counteragentData.parmOKPO();

                header.ConsignorBankAddress = counteragentData.fullInvoiceInfo(true, true);
                header.ConsignorOKPO        = counteragentData.parmOKPO();
                header.ConsignorOKDP        = counteragentData.parmOKDP();
                header.ConsignorStructDept  = counteragentData.parmStructDept();

                vendTable                   = _inventTransferJour.partyVendTable_RU();
                counteragentData            = this.initCustVendData(vendTable,
                                                                    VendBankAccount::find(vendTable.AccountNum, vendTable.BankAccount),
                                                                    vendTable.AccountNum);
                counteragentData.parmAddress(_inventTransferJour.toAddress());
                header.CustBankAddress      = counteragentData.fullInvoiceInfo(true, true);
                header.CustOKPO             = counteragentData.parmOKPO();

                header.ConsigneeBankAddress = counteragentData.fullInvoiceInfo(true, true);
                header.ConsigneeOKPO        = counteragentData.parmOKPO();
                header.ConsigneeOKDP        = counteragentData.parmOKDP();
                header.ConsigneeStructDept  = counteragentData.parmStructDept();
                break;
            case InventTransferType_RU::ReceiptFromParty:
                vendTable                   = _inventTransferJour.partyVendTable_RU();
                counteragentData            = this.initCustVendData(vendTable,
                                                                    VendBankAccount::find(vendTable.AccountNum, vendTable.BankAccount),
                                                                    vendTable.AccountNum);
                header.VendBankAddress      = counteragentData.fullInvoiceInfo(true, true);
                header.VendOKPO             = counteragentData.parmOKPO();

                header.ConsignorBankAddress = counteragentData.fullInvoiceInfo(true, true);
                header.ConsignorOKPO        = counteragentData.parmOKPO();
                header.ConsignorOKDP        = counteragentData.parmOKDP();
                header.ConsignorStructDept  = counteragentData.parmStructDept();

                counteragentData            = this.initCompanyData();
                header.CustBankAddress      = counteragentData.fullInvoiceInfo(true, true);
                header.CustOKPO             = counteragentData.parmOKPO();

                header.ConsigneeBankAddress = counteragentData.fullInvoiceInfo(true, true);
                header.ConsigneeOKPO        = counteragentData.parmOKPO();
                header.ConsigneeOKDP        = counteragentData.parmOKDP();
                header.ConsigneeStructDept  = counteragentData.parmStructDept();
                break;
        }

        header.CurrencyCode = _inventTransferJour.CurrencyCode_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeaderFromInventTransferTable</Name>
				<Source><![CDATA[
    private void initHeaderFromInventTransferTable( InventTransferTable _inventTransferTable)
    {
        SalesPurchReportCounteragentData_RU counteragentData;
        VendTable                           vendTable;
        switch (_inventTransferTable.TransferType_RU)
        {
            case InventTransferType_RU::Standard:
                counteragentData            = this.initCompanyData();
                header.VendBankAddress      = counteragentData.fullInvoiceInfo(true, true);
                header.VendOKPO             = counteragentData.parmOKPO();

                header.ConsignorBankAddress = counteragentData.fullInvoiceInfo(true, true);
                header.ConsignorOKPO        = counteragentData.parmOKPO();
                header.ConsignorOKDP        = counteragentData.parmOKDP();
                header.ConsignorStructDept  = counteragentData.parmStructDept();

                if (InventLocation::find(_inventTransferTable.InventLocationIdTo).VendAccount)
                {
                    vendTable                   = VendTable::find(InventLocation::find(_inventTransferTable.InventLocationIdTo).VendAccount);
                    counteragentData            = this.initCustVendData(vendTable,
                                                                        VendBankAccount::find(vendTable.AccountNum, vendTable.BankAccount),
                                                                        vendTable.AccountNum);
                }
                else
                {
                     counteragentData            = this.initCompanyData();
                }

                header.CustBankAddress      = counteragentData.fullInvoiceInfo(true, true);
                header.CustOKPO             = counteragentData.parmOKPO();

                header.ConsigneeBankAddress = counteragentData.fullInvoiceInfo(true, true);
                header.ConsigneeOKPO        = counteragentData.parmOKPO();
                header.ConsigneeOKDP        = counteragentData.parmOKDP();
                header.ConsigneeStructDept  = counteragentData.parmStructDept();
                break;
            case InventTransferType_RU::IssueToParty:
                counteragentData            = this.initCompanyData();
                header.VendBankAddress      = counteragentData.fullInvoiceInfo(true, true);
                header.VendOKPO             = counteragentData.parmOKPO();

                header.ConsignorBankAddress = counteragentData.fullInvoiceInfo(true, true);
                header.ConsignorOKPO        = counteragentData.parmOKPO();
                header.ConsignorOKDP        = counteragentData.parmOKDP();
                header.ConsignorStructDept  = counteragentData.parmStructDept();

                vendTable                   = _inventTransferTable.partyVendTable_RU();
                counteragentData            = this.initCustVendData(vendTable,
                                                                    VendBankAccount::find(vendTable.AccountNum, vendTable.BankAccount),
                                                                    vendTable.AccountNum);
                counteragentData.parmAddress(_inventTransferTable.toAddress());
                header.CustBankAddress      = counteragentData.fullInvoiceInfo(true, true);
                header.CustOKPO             = counteragentData.parmOKPO();

                header.ConsigneeBankAddress = counteragentData.fullInvoiceInfo(true, true);
                header.ConsigneeOKPO        = counteragentData.parmOKPO();
                header.ConsigneeOKDP        = counteragentData.parmOKDP();
                header.ConsigneeStructDept  = counteragentData.parmStructDept();
                break;
            case InventTransferType_RU::ReceiptFromParty:
                vendTable                   = _inventTransferTable.partyVendTable_RU();
                counteragentData            = this.initCustVendData(vendTable,
                                                                    VendBankAccount::find(vendTable.AccountNum, vendTable.BankAccount),
                                                                    vendTable.AccountNum);
                header.VendBankAddress      = counteragentData.fullInvoiceInfo(true, true);
                header.VendOKPO             = counteragentData.parmOKPO();

                header.ConsignorBankAddress = counteragentData.fullInvoiceInfo(true, true);
                header.ConsignorOKPO        = counteragentData.parmOKPO();
                header.ConsignorOKDP        = counteragentData.parmOKDP();
                header.ConsignorStructDept  = counteragentData.parmStructDept();

                counteragentData            = this.initCompanyData();
                header.CustBankAddress      = counteragentData.fullInvoiceInfo(true, true);
                header.CustOKPO             = counteragentData.parmOKPO();

                header.ConsigneeBankAddress = counteragentData.fullInvoiceInfo(true, true);
                header.ConsigneeOKPO        = counteragentData.parmOKPO();
                header.ConsigneeOKDP        = counteragentData.parmOKDP();
                header.ConsigneeStructDept  = counteragentData.parmStructDept();
                break;
        }

        header.CurrencyCode = _inventTransferTable.CurrencyCode_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeaderFromProdTable</Name>
				<Source><![CDATA[
    private void initHeaderFromProdTable(ProdTable _prodTable)
    {
        SalesPurchReportCounteragentData_RU counteragentData;

        counteragentData            = this.initCompanyData();
        header.VendBankAddress      = counteragentData.fullInvoiceInfo(true, true);
        header.VendOKPO             = counteragentData.parmOKPO();

        header.ConsignorBankAddress = counteragentData.fullInvoiceInfo(true, true);
        header.ConsignorOKPO        = counteragentData.parmOKPO();
        header.ConsignorOKDP        = counteragentData.parmOKDP();
        header.ConsignorStructDept  = counteragentData.parmStructDept();

        counteragentData = this.initCounteragentData(counteragentData);

        header.CustBankAddress      = counteragentData.fullInvoiceInfo(true, true);
        header.CustOKPO             = counteragentData.parmOKPO();

        header.ConsigneeBankAddress = counteragentData.fullInvoiceInfo(true, true);
        header.ConsigneeOKPO        = counteragentData.parmOKPO();
        header.ConsigneeOKDP        = counteragentData.parmOKDP();
        header.ConsigneeStructDept  = counteragentData.parmStructDept();

        header.CurrencyCode = _prodTable.CurrencyCode_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCounteragentData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills counteragentData according to carrier type.
    /// </summary>
    /// <param name = "_counteragentData">Instance of <c>SalesPurchReportCounteragentData_RU</c> class.</param>
    /// <returns>filled counteragentData container.</returns>
    protected SalesPurchReportCounteragentData_RU initCounteragentData(SalesPurchReportCounteragentData_RU _counteragentData)
    {
        SalesPurchReportCounteragentData_RU counteragentData;
        VendTable vendTable;
        CustTable custTable;
        
        switch (billOfLading.CarrierType_RU)
        {
            case CarrierType_W::InvoiceAccount:
                //same counteragent data
                counteragentData = _counteragentData;
                break;

            case CarrierType_W::Customer:
                custTable = CustTable::find( billOfLading.CarrierCode_RU);
                counteragentData = this.initCustVendData(custTable,
                    CustBankAccount::find(custTable.AccountNum, custTable.BankAccount),
                    custTable.AccountNum);
                break;

            case CarrierType_W::Vendor:
                vendTable = VendTable::find(billOfLading.CarrierCode_RU);
                counteragentData = this.initCustVendData(vendTable,
                    CustBankAccount::find(vendTable.AccountNum, vendTable.BankAccount),
                    vendTable.AccountNum);
                break;
        }

        return counteragentData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeaderFromSalesTable</Name>
				<Source><![CDATA[
    private void initHeaderFromSalesTable(SalesTable _salesTable)
    {
        SalesPurchReportCounteragentData_RU consigneeData;
        SalesPurchReportCounteragentData_RU consignorData;
        SalesPurchReportCounteragentData_RU tmpData;
        CustTable                           custTable;
        VendTable                           vendTable;
        SalesTotals                         salesTotals;
        boolean                             creditNote = false;

        if (_salesTable.salesTable_RU().ConsignorAccount_RU)
        {
            vendTable        = VendTable::find(_salesTable.salesTable_RU().ConsignorAccount_RU);
            consignorData    = this.initCustVendData(vendTable,
                                                     VendBankAccount::find(vendTable.AccountNum, vendTable.BankAccount),
                                                     vendTable.AccountNum);
        }
        else
        {
            consignorData    = this.initCompanyData();
        }

        if ( _salesTable.salesTable_RU().ConsigneeAccount_RU)
        {
            custTable        = CustTable::find(_salesTable.salesTable_RU().ConsigneeAccount_RU);
        }
        else
        {
            custTable        = CustTable::find(_salesTable.CustAccount);
        }

        consigneeData        = this.initCustVendData(custTable,
                                                     CustBankAccount::find(custTable.AccountNum, custTable.BankAccount),
                                                     custTable.AccountNum);

        if (_salesTable)
        {
            salesTotals = SalesTotals::construct(_salesTable);
            salesTotals.calc();
            creditNote = salesTotals.totalAmount() < 0;
        }

        if (creditNote)
        {
            tmpData = consignorData;
            consignorData = consigneeData;
            consigneeData = tmpData;
        }

        header.VendBankAddress      = consignorData.fullInvoiceInfo(true, true);
        header.VendOKPO             = consignorData.parmOKPO();

        header.ConsignorBankAddress = consignorData.fullInvoiceInfo(true, true);
        header.ConsignorOKPO        = consignorData.parmOKPO();
        header.ConsignorOKDP        = consignorData.parmOKDP();
        header.ConsignorStructDept  = consignorData.parmStructDept();

        header.CustBankAddress      = consigneeData.fullInvoiceInfo(true, true);
        header.CustOKPO             = consigneeData.parmOKPO();

        header.ConsigneeBankAddress = consigneeData.fullInvoiceInfo(true, true);
        header.ConsigneeOKPO        = consigneeData.parmOKPO();
        header.ConsigneeOKDP        = consigneeData.parmOKDP();
        header.ConsigneeStructDept  = consigneeData.parmStructDept();

        header.CurrencyCode         = _salesTable.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReportDataPackingSlip</Name>
				<Source><![CDATA[
    private void initReportDataPackingSlip(WMSBillOfLading _billOfLading, CustPackingSlipJour _custPackingSlipJour)
    {
        CustPackingSlipTrans    custPackingSlipTrans;
        InventTable             inventTable;
        
        this.initHeaderFromSalesTable(_custPackingSlipJour.salesTable());

        [ header.DirectorName,
          header.DirectorTitle ]   = OfficialsTrans_RU::getNameTitleByIdPosition(_custPackingSlipJour.OffSessionId_RU, OffPosition_RU::Director);
        [ header.AccountantName,
          header.AccountantTitle ] = OfficialsTrans_RU::getNameTitleByIdPosition(_custPackingSlipJour.OffSessionId_RU, OffPosition_RU::Accountant);
        [ header.AcceptorName,
          header.AcceptorTitle ]   = OfficialsTrans_RU::getNameTitleByIdPosition(_custPackingSlipJour.OffSessionId_RU, OffPosition_RU::Acceptor);
        [ header.TakerName,
          header.TakerTitle ]      = OfficialsTrans_RU::getNameTitleByIdPosition(_custPackingSlipJour.OffSessionId_RU, OffPosition_RU::Taker);
        [ header.SupplierName,
          header.SupplierTitle ]   = OfficialsTrans_RU::getNameTitleByIdPosition(_custPackingSlipJour.OffSessionId_RU, OffPosition_RU::Supplier);

        // init lines
        while select custPackingSlipTrans
            where custPackingSlipTrans.PackingSlipId == _custPackingSlipJour.PackingSlipId
        outer join inventTable
            where inventTable.ItemId                 == custPackingSlipTrans.ItemId
        {
            dynamicData.clear();
            dynamicData.ItemId          = custPackingSlipTrans.ItemId;
            dynamicData.InventDimId     = custPackingSlipTrans.InventDimId;
            dynamicData.ItemName        = custPackingSlipTrans.Name;
            dynamicData.Unit            = UnitOfMeasureTranslation::findByTranslation(
                UnitOfMeasure::findBySymbol(custPackingSlipTrans.SalesUnit).RecId,
                _billOfLading.LanguageId).Description;
            if (! dynamicData.Unit)
            {
                dynamicData.Unit        = custPackingSlipTrans.SalesUnit;
            }
            dynamicData.Packing         = inventTable.Packing_RU;
            dynamicData.Qty             = custPackingSlipTrans.Qty;

            Qty qtyInvent;
            //calculate qty in inventory units for weight and volume
            //item based line:
            if (inventTable)
            {
                EcoResProductUnitConverter productUnitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(
                                                                        custPackingSlipTrans.ItemId,
                                                                        custPackingSlipTrans.InventDimId,
                                                                        custPackingSlipTrans.SalesUnit,
                                                                        inventTable.inventUnitId(),
                                                                        NoYes::Yes);

                boolean conversionOk = productUnitConverter.canValueBeConverted();
                if (!conversionOk && inventTable)
                {
                    warning(strFmt("@SYS28690", custPackingSlipTrans.SalesUnit, inventTable.inventUnitId()));
                }

                qtyInvent = (custPackingSlipTrans.Qty && conversionOk) ? productUnitConverter.convertValue(custPackingSlipTrans.Qty) : custPackingSlipTrans.Qty;

                dynamicData.QtyNumber       = inventTable.TaxPackagingQty ? roundUp(qtyInvent / inventTable.TaxPackagingQty, 1) : 0;
                dynamicData.GrossWeight     = qtyInvent * inventTable.grossWeight();
            }
            //category-based line :
            else
            {
                dynamicData.GrossWeight  = SalesLineForeignTradeCategory::findSalesLine(custPackingSlipTrans.salesLine()).UnitWeight * custPackingSlipTrans.Qty;
            }

            dynamicData.LineAmount      = abs(custPackingSlipTrans.salesLine().calcLineAmountInclTax_RU(dynamicData.Qty));
            dynamicData.insert();

            header.TotalAmountWithVAT   += dynamicData.LineAmount;
            header.TotalGrossWeight     += dynamicData.GrossWeight;
            header.TotalNetWeight       += inventTable.NetWeight * qtyInvent;
            header.TotalVolume          += inventTable.UnitVolume * qtyInvent;
        }

        header.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReportDataShipment</Name>
				<Source><![CDATA[
    private void initReportDataShipment(WMSBillOfLading _billOfLading)
    {
        SalesLine               salesLine;
        ProdBOM                 prodBOM;
        InventTransferLine      inventTransferLine;
        InventTransferTable     inventTransferTable;

        WMSOrderTrans           wmsOrderTrans;
        InventTable             inventTable;
        InventDim               inventDim;
        SalesQty                salesQty;
        BOMQty                  bomQty;
        SalesTable              salesTable;
        ProdTable               prodTable;
        WMSShipment             wmsShipment = WMSShipment::find(_billOfLading.ShipmentId);

        switch (_billOfLading.wmsReferenceType)
        {
            case WMSReferenceType::ProductionLine :
            case WMSReferenceType::ProductionOrder_RU :

                prodTable = ProdTable::find(_billOfLading.InventTransRefId);
                this.initHeaderFromProdTable(prodTable);
                break;

            case WMSReferenceType::Sales :

                salesTable = SalesTable::find(_billOfLading.InventTransRefId);
                this.initHeaderFromSalesTable(salesTable);
                break;

            case WMSReferenceType::TransferOrderShipment :

                inventTransferTable = InventTransferTable::find(billOfLading.InventTransRefId);
                this.initHeaderFromInventTransferTable(inventTransferTable);
                break;
        }

        [ header.DirectorName,
          header.DirectorTitle ]   = OfficialsTrans_RU::getNameTitleByIdPosition(wmsShipment.OffSessionId_RU, OffPosition_RU::Director);
        [ header.AccountantName,
          header.AccountantTitle ] = OfficialsTrans_RU::getNameTitleByIdPosition(wmsShipment.OffSessionId_RU, OffPosition_RU::Accountant);
        [ header.AcceptorName,
          header.AcceptorTitle ]   = OfficialsTrans_RU::getNameTitleByIdPosition(wmsShipment.OffSessionId_RU, OffPosition_RU::Acceptor);
        [ header.TakerName,
          header.TakerTitle ]      = OfficialsTrans_RU::getNameTitleByIdPosition(wmsShipment.OffSessionId_RU, OffPosition_RU::Taker);
        [ header.SupplierName,
          header.SupplierTitle ]   = OfficialsTrans_RU::getNameTitleByIdPosition(wmsShipment.OffSessionId_RU, OffPosition_RU::Supplier);

        // init lines
        while select wmsOrderTrans
            order by InventTransRefId
            where wmsOrderTrans.ShipmentId      == _billOfLading.ShipmentId
               && wmsOrderTrans.Customer        == _billOfLading.CustAccount
               && wmsOrderTrans.DeliveryPostalAddress == _billOfLading.DeliveryPostalAddress
        join inventDim
            where inventDim.InventDimId == wmsOrderTrans.InventDimId
        join inventTable
            where inventTable.ItemId == wmsOrderTrans.ItemId
        {
            dynamicData.clear();
            dynamicData.ItemId          = wmsOrderTrans.ItemId;
            dynamicData.InventDimId     = wmsOrderTrans.inventDimId;
            dynamicData.ItemName        = wmsOrderTrans.inventTable().itemName(inventDim);
            dynamicData.Unit            = UnitOfMeasureTranslation::findByTranslation(
                                            UnitOfMeasure::findBySymbol(wmsOrderTrans.unitId()).RecId,
                                            _billOfLading.LanguageId).Description;
            if (! dynamicData.Unit)
            {
                dynamicData.Unit        = wmsOrderTrans.unitId();
            }
            dynamicData.Packing         = inventTable.Packing_RU;
            dynamicData.Qty             = wmsOrderTrans.Qty;
            dynamicData.QtyNumber       = inventTable.TaxPackagingQty ? roundUp(wmsOrderTrans.Qty / inventTable.TaxPackagingQty, 1) : 0;
            dynamicData.GrossWeight     = wmsOrderTrans.Qty * inventTable.grossWeight();

            if (wmsOrderTrans.isProdLine_RU())
            {
                prodBOM = ProdBOM::findTransId(wmsOrderTrans.InventTransId);

                if (prodBOM)
                {
                    bomQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                                                                wmsOrderTrans.ItemId,
                                                                wmsOrderTrans.inventDimId,
                                                                prodBOM.QtyBOMCalc,
                                                                prodBOM.UnitId,
                                                                wmsOrderTrans.unitId());
                    if (bomQty)
                    {
                        dynamicData.LineAmount  = CurrencyExchangeHelper::amount(prodBOM.LineAmount_RU * wmsOrderTrans.Qty / bomQty);
                    }
                }
            }
            else
            if (wmsOrderTrans.InventTransType == InventTransType::TransferOrderShip)
            {
                select firstonly inventTransferLine
                    where inventTransferLine.TransferId     == wmsOrderTrans.InventTransRefId
                       && inventTransferLine.InventTransId  == wmsOrderTrans.InventTransId;

                if (inventTransferLine)
                {
                    dynamicData.LineAmount  = CurrencyExchangeHelper::amount(inventTransferLine.LineAmount_RU * wmsOrderTrans.Qty / inventTransferLine.QtyTransfer);
                }
            }
            else
            {
                salesLine                = SalesLine::findInventTransId(wmsOrderTrans.InventTransId);
                salesQty                 = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                                                                wmsOrderTrans.ItemId,
                                                                wmsOrderTrans.InventDimId,
                                                                wmsOrderTrans.Qty,
                                                                wmsOrderTrans.unitId(),
                                                                salesLine.SalesUnit);

                dynamicData.LineAmount   = abs(salesLine.calcLineAmountInclTax_RU(salesQty));
                dynamicData.LineAmount   = CurrencyExchangeHelper::curAmount2CurAmount(dynamicData.LineAmount, salesLine.CurrencyCode, header.CurrencyCode, DateTimeUtil::date(_billOfLading.CreatedDateTime));
            }

            dynamicData.insert();

            header.TotalAmountWithVAT   += dynamicData.LineAmount;
            header.TotalGrossWeight     += dynamicData.GrossWeight;
            header.TotalNetWeight       += wmsOrderTrans.Qty * inventTable.NetWeight;
            header.TotalPackagingQty    += dynamicData.QtyNumber;
            header.TotalVolume          += wmsOrderTrans.Qty * inventTable.UnitVolume;
        }

        if (header.RecId)
        {
            header.update();
        }
        else
        {
            header.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReportDataTransferJour</Name>
				<Source><![CDATA[
    private void initReportDataTransferJour(WMSBillOfLading _billOfLading, InventTransferJour _inventTransferJour)
    {
        InventTransferJourLine              inventTransferJourLine;
        InventTable                         inventTable;

        this.initHeaderFromInventTransferJour(_inventTransferJour);

        [ header.DirectorName,
          header.DirectorTitle ]   = OfficialsTrans_RU::getNameTitleByIdPosition(_inventTransferJour.OffSessionId_RU, OffPosition_RU::Director);
        [ header.AccountantName,
          header.AccountantTitle ] = OfficialsTrans_RU::getNameTitleByIdPosition(_inventTransferJour.OffSessionId_RU, OffPosition_RU::Accountant);
        [ header.AcceptorName,
          header.AcceptorTitle ]   = OfficialsTrans_RU::getNameTitleByIdPosition(_inventTransferJour.OffSessionId_RU, OffPosition_RU::Acceptor);
        [ header.TakerName,
          header.TakerTitle ]      = OfficialsTrans_RU::getNameTitleByIdPosition(_inventTransferJour.OffSessionId_RU, OffPosition_RU::Taker);
        [ header.SupplierName,
          header.SupplierTitle ]   = OfficialsTrans_RU::getNameTitleByIdPosition(_inventTransferJour.OffSessionId_RU, OffPosition_RU::Supplier);

        // init lines
        while select inventTransferJourLine
            where inventTransferJourLine.TransferId == _inventTransferJour.TransferId
               && inventTransferJourLine.VoucherId  == _inventTransferJour.VoucherId
        join inventTable
            where inventTable.ItemId                == inventTransferJourLine.ItemId
        {
            dynamicData.clear();
            dynamicData.ItemId          = inventTransferJourLine.ItemId;
            dynamicData.InventDimId     = inventTransferJourLine.InventDimId;
            dynamicData.ItemName        = inventTransferJourLine.itemName();
            dynamicData.Unit            = UnitOfMeasureTranslation::findByTranslation(
                UnitOfMeasure::findBySymbol(inventTransferJourLine.UnitId).RecId,
                _billOfLading.LanguageId).Description;
            if (! dynamicData.Unit)
            {
                dynamicData.Unit        = inventTransferJourLine.UnitId;
            }
            dynamicData.Packing         = inventTable.Packing_RU;
            dynamicData.Qty             = inventTransferJourLine.QtyShipped;
            dynamicData.QtyNumber       = inventTable.TaxPackagingQty ? roundUp(inventTransferJourLine.QtyShipped / inventTable.TaxPackagingQty, 1) : 0;
            dynamicData.GrossWeight     = inventTransferJourLine.QtyShipped * inventTable.grossWeight();
            dynamicData.LineAmount      = inventTransferJourLine.LineAmountShipped_RU;
            dynamicData.insert();

            header.TotalAmountWithVAT   += dynamicData.LineAmount;
            header.TotalGrossWeight     += dynamicData.GrossWeight;
            header.TotalNetWeight       +=  inventTransferJourLine.QtyShipped * inventTable.NetWeight;
        }

        header.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        this.addSection(#Prolog);
        this.addSection(#Header);
        this.addSection(#Body, true);
        this.addSection(#Footer);
        this.addSection(#Page2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateNewPage</Name>
				<Source><![CDATA[
    private boolean mustCreateNewPage()
    {
        real requiredHeight = 0;
        boolean ret;

        requiredHeight = this.getRangeHeight(#body);
        requiredHeight += conPeek(mapSections.lookup(#Footer), #posSectionHeight);

        ret = pageHeight - currentHeight < requiredHeight;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        printCopyOriginal = PrintCopyOriginal::Original;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBillOfLading</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public WMSBillOfLading parmBillOfLading(WMSBillOfLading _billOfLading = billOfLading)
    {
        billOfLading    = _billOfLading;
        billOfLadingId  = _billOfLading.BillOfLadingId;
        return billOfLading;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintCopyOriginal</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PrintCopyOriginal parmPrintCopyOriginal(PrintCopyOriginal _printCopyOriginal = printCopyOriginal)
    {
        printCopyOriginal = _printCopyOriginal;
        return printCopyOriginal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareTonWeightTextualRepresentation</Name>
				<Source><![CDATA[
    private TempStr prepareTonWeightTextualRepresentation(Weight                    _weightInTons,
                                                          Weight                    _originalWeightInSysMassUnit,
                                                          UnitOfMeasureRecId        _sysMassUnitId,
                                                          UnitOfMeasureRecId        _tonUnitId,
                                                          UnitOfMeasure             _kgUnitOfMeasure,
                                                          RNumDateInWordConverter   _converter)
    {
        TempStr tempStr;
        Weight  massRemainder;

        if (_weightInTons >= 1.0)
        {
            tempStr = _converter.numeralsToTxt(_weightInTons) + ' ' + UnitOfMeasure::find(_tonUnitId).Symbol;
        }
        else
        {
            tempStr = '';
        }

        if (_kgUnitOfMeasure.RecId == _sysMassUnitId)
        {
            massRemainder = _originalWeightInSysMassUnit - UnitOfMeasureConverter::convert(trunc(_weightInTons),
                                                                                           _tonUnitId,
                                                                                           _sysMassUnitId,
                                                                                           NoYes::No);
        }
        else
        {
            massRemainder = UnitOfMeasureConverter::convert(frac(_weightInTons),
                                                            _tonUnitId,
                                                            _kgUnitOfMeasure.RecId,
                                                            NoYes::No);
        }

        massRemainder = decRound(massRemainder, _kgUnitOfMeasure.DecimalPrecision);

        if (massRemainder)
        {
            if (tempStr)
            {
                tempStr += ' ' + label.extractString(literalstr("@SYS5534")) + ' ';
            }
            tempStr += num2str(massRemainder, -1, 0, -1, -1) + ' ' + _kgUnitOfMeasure.Symbol;
        }

        return tempStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(WMSBOL_1T_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    protected Counter totalCells()
    {
        #define.prologCells(8)
        #define.footerCells(19)
        #define.bodyCells(9)
        return #prologCells + #footerCells + #bodyCells;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUnitsOfMeasure</Name>
				<Source><![CDATA[
    private static boolean checkUnitsOfMeasure()
    {
        boolean             ret = true;
        UnitOfMeasureRecId  sysMassUnitId;
        UnitOfMeasure       tonUnitOfMeasure;
        UnitOfMeasure       kgUnitOfMeasure;

        setPrefix("@SYS112321");

        sysMassUnitId = UnitOfMeasureSystemUnit::findByUnitOfMeasureClass(UnitOfMeasureClass::Mass).UnitOfMeasure;
        if (!sysMassUnitId)
        {
            ret = checkFailed(strFmt("@GLS222804", UnitOfMeasureClass::Mass));
        }

        tonUnitOfMeasure = UnitOfMeasure::findByInternalCode(UnitOfMeasureCodeSymbol::Tonnes);
        if (!tonUnitOfMeasure)
        {
            ret = checkFailed(strFmt("@GLS222805", UnitOfMeasureCodeSymbol::Tonnes));
        }

        if (sysMassUnitId && tonUnitOfMeasure
         && !UnitOfMeasureConverter::canBeConverted(sysMassUnitId, tonUnitOfMeasure.RecId))
        {
            ret = checkFailed(strFmt("@GLS115414", UnitOfMeasure::find(sysMassUnitId).Symbol, tonUnitOfMeasure.Symbol));
        }

        kgUnitOfMeasure = UnitOfMeasure::findByInternalCode(UnitOfMeasureCodeSymbol::Kilograms);
        if (!kgUnitOfMeasure)
        {
            ret = checkFailed(strFmt("@GLS222805", UnitOfMeasureCodeSymbol::Kilograms));
        }

        if (sysMassUnitId && tonUnitOfMeasure && kgUnitOfMeasure && kgUnitOfMeasure.RecId != sysMassUnitId
         && !UnitOfMeasureConverter::canBeConverted(tonUnitOfMeasure.RecId, kgUnitOfMeasure.RecId))
        {
            ret = checkFailed(strFmt("@GLS115414", tonUnitOfMeasure.Symbol, kgUnitOfMeasure.Symbol));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>OXMLExcelReport_WMSBillOfLading</c> class.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>OXMLExcelReport_WMSBillOfLading</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public OXMLExcelReport_WMSBillOfLading construct()
    {
        return new OXMLExcelReport_WMSBillOfLading();
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeWithPrintMgmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Exceutes the report taking print management setup into account.
    /// </summary>
    /// <param name="_args">
    /// Report arguments.
    /// </param>
    /// <param name="_settingDetail">
    /// Print management setting.
    /// </param>
    /// <param name="_recordId">
    /// Header record ID.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void executeWithPrintMgmt(
        Args                        _args,
        PrintMgmtPrintSettingDetail _settingDetail,
        RecId                       _recordId)
    {
        OXMLExcelReport_WMSBillOfLading report;
        PrintCopyOriginal               printCopyOriginal;
        WMSBillOfLading                 wmsBillOfLading;
        WMSShipment                     wmsShipment;

        if (!OXMLExcelReport_WMSBillOfLading::checkUnitsOfMeasure())
        {
            return;
        }

        report = OXMLExcelReport_WMSBillOfLading::construct();

        if (_settingDetail.parmType() == PrintMgmtDocInstanceType::Copy)
        {
            printCopyOriginal = PrintCopyOriginal::Copy;
        }
        else
        {
            printCopyOriginal = PrintCopyOriginal::Original;
        }

        _settingDetail.parmPrintJobSettings().numberOfCopies(_settingDetail.parmNumberOfCopies());

        report.parmArgs(_args);
        report.parmPrintCopyOriginal(printCopyOriginal);

        switch (_args.dataset())
        {
            case tableNum(WMSBillOfLading) :
                report.parmBillOfLading(WMSBillOfLading::findRecId(_recordId));

                var printDestinationSettings = _settingDetail.parmPrintJobSettings();
                
                if (report.isPdfConversionEnabled(printDestinationSettings))
                {
                    report.parmPrintDestinationSettings(printDestinationSettings);
                }

                if (report.init())
                {
                    report.runOperation();
                }
                break;

            case tableNum(WMSShipment) :
                wmsShipment = _args.record() as WMSShipment;
                while select wmsBillOfLading
                    where wmsBillOfLading.ShipmentId == wmsShipment.ShipmentId
                {
                    report.parmBillOfLading(wmsBillOfLading);
                    if (report.init())
                    {
                        report.runOperation();
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        OXMLExcelReport_WMSBillOfLading     report = OXMLExcelReport_WMSBillOfLading::construct();
        Common                              rec;
        WMSShipment                         wmsShipment;
        WMSBillOfLading                     wmsBillOfLading;

        if (!OXMLExcelReport_WMSBillOfLading::checkUnitsOfMeasure())
        {
            return;
        }

        if (_args)
        {
            report.parmArgs(_args);
            rec = _args.record();
            if (rec is WMSBillOfLading)
            {
                report.parmBillOfLading(rec);
                if (report.init())
                {
                    report.runOperation();
                }
            }

            if (rec is WMSShipment)
            {
                wmsShipment = rec as WMSShipment;
                while select wmsBillOfLading
                    where wmsBillOfLading.ShipmentId == wmsShipment.ShipmentId
                {
                    report.parmBillOfLading(wmsBillOfLading);
                    if (report.init())
                    {
                        report.runOperation();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>