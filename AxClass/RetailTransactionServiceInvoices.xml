<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionServiceInvoices</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>RetailTransactionServiceInvoices</c> class implements the invoice related methods of the service interface exposed by the <c>RetailTransactionService</c> class to the retail channels.
/// </summary>
public class RetailTransactionServiceInvoices
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

    private const str InvoicePaidStatusValuesAttribute = 'InvoicePaidStatusValues';
    private const str InvoiceIdsAttribute = 'InvoiceIds';
    private const str CustomerIdAttribute = 'CustomerId';
    private const str BusinessPartnerIdAttribute = 'BusinessPartnerId';
    private const str InvoiceTypeValuesAttribute = 'InvoiceTypeValues';
    private const str ArrayOfOrderInvoiceAttribute = 'ArrayOfOrderInvoice';
    private const str OrderInvoiceAttribute = 'OrderInvoice'; 
    private const str AmountBalanceAttribute = 'AmountBalance';
    private const str AmountPaidAttribute = 'AmountPaid';
    private const str CurrencyCodeAttribute = 'CurrencyCode';
    private const str CustomerAccountNumberAttribute = 'CustomerAccountNumber';
    private const str CustomerNameAttribute = 'CustomerName';
    private const str IdAttribute = 'Id';
    private const str InvoiceDateAttribute = 'InvoiceDate';
    private const str InvoiceDueDateAttribute = 'InvoiceDueDate';
    private const str InvoicePaidStatusValueAttribute = 'InvoicePaidStatusValue';
    private const str InvoiceTypeValueAttribute = 'InvoiceTypeValue';
    private const str TotalAmountAttribute = 'TotalAmount';
    private const str SortingAttribute = 'Sorting';
    private const str InvoiceIdsSortColumnName = 'InvoiceIds';

    private const str orStr = '|| ';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getSalesInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method returns the container <c>salesInvoice</c> having the data of the <c>CustTrans</c> and <c>CustTable</c>.
    /// </summary>
    /// <param name="_invoiceId">
    /// ID of the CustTrans.Invoice field.
    /// </param>
    /// <returns>
    /// Container <c>salesInvoice</c> having the data of the <c>CustTrans</c> and <c>CustTable</c>.
    /// </returns>
    public static container getSalesInvoice(InvoiceId _invoiceId)
    {
        return RetailTransactionServiceInvoices::getInvoiceInternal(_invoiceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesInvoiceList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method loops the <c>CustTrans</c> table to get the list of the sales invoices.
    /// </summary>
    /// <param name="_custAccount">
    /// ID of the CustTrans.AccountNum field.
    /// </param>
    /// <returns>
    /// Container <c>salesInvoice</c> having the data of the <c>CustTrans</c> and <c>CustTable</c>.
    /// </returns>
    /// <remarks>
    /// RetailTransactionService::getSalesInvoice method returns the container <c>salesInvoice</c> having the data of the <c>CustTrans</c> and
    /// <c>CustTable</c>.
    /// </remarks>
    public static container getSalesInvoiceList(CustAccount _custAccount)
    {
        CustTrans           custTrans;
        CustTransOpen       custTransOpen;
        container           salesInvoice = [true, ''];

        while select RecId, Invoice, AccountNum, TransType, AmountCur from custTrans
        where custTrans.AccountNum == _custAccount
           && custTrans.Invoice
           && custTrans.TransType == LedgerTransType::Sales
           && custTrans.AmountCur > 0
        {
            custTransOpen = CustTransOpen::findRefId(custTrans.RecId);

            if (custTransOpen)
            {
                salesInvoice += RetailTransactionServiceInvoices::getInvoiceInternal(custTrans.Invoice, custTrans.AccountNum);
            }
        }

        return salesInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the invoices based on a certain criteria.
    /// </summary>
    /// <param name = "_invoiceSearchCriteria">The invoice criteria.</param>
    /// <returns>The container data of the <c>CustTrans</c> and <c>CustTable</c>.</returns>
    public static container getInvoiceList(str _invoiceSearchCriteria)
    {
        boolean success = false;
        str errorMessage = '';
        int infologLine;
        XmlDocument resultDoc;

        try
        {
            infologLine = Global::infologLine();

            XmlDocument searchCriteriaXmlDoc = new XmlDocument();
            searchCriteriaXmlDoc.loadXml(_invoiceSearchCriteria);
            XmlElement searchCriteriaXmlRoot = searchCriteriaXmlDoc.documentElement();

            Query query = new Query();
            QueryBuildDataSource custTransDataSource = query.addDataSource(tableNum(CustTrans));

            // Sorting
            SortOrder InvoiceIdSortOrder = SortOrder::Ascending;
            XmlElement sortingRootElement = searchCriteriaXmlRoot.getNamedElement(sortingAttribute);
            if (sortingRootElement != null)
            {
                str columnName;
                SortOrder sortOrder;
                XmlNodeList sortColumns = sortingRootElement.childNodes();
                XmlNode sortColumnsNode;
                for (int i = 0; i < sortColumns.length(); i++)
                {
                    sortColumnsNode = sortColumns.item(i);
                    [columnName, sortOrder] = RetailTransactionServiceUtilities::parseSortColumn(sortColumnsNode);
                    if (columnName == InvoiceIdsSortColumnName)
                    {
                        InvoiceIdSortOrder = sortOrder;
                    }
                    else
                    {
                        throw error(strFmt("@Retail:ErrorInvoiceListSortColumnNotSupported", columnName));
                    }
                }
            }
            custTransDataSource.addSortField(fieldNum(CustTrans, RecId), InvoiceIdSortOrder);

            // Add invoice identifiers.
            XmlElement invoiceIdsRootElement = searchCriteriaXmlRoot.getNamedElement(InvoiceIdsAttribute);

            if (invoiceIdsRootElement != null)
            {
                XmlNodeList invoiceIds =  invoiceIdsRootElement.childNodes();

                for (int i = 0; i < invoiceIds.length(); i++)
                {
                    XmlNode invoiceIdNode = invoiceIds.item(i);
                    str invoiceId = invoiceIdNode.text();
                    custTransDataSource.addRange(fieldNum(CustTrans, Invoice)).value(invoiceId);
                }
            }

            // Get customer identifier.
            XmlElement customerIdElement = searchCriteriaXmlRoot.getNamedElement(CustomerIdAttribute);
     
            if (customerIdElement != null)
            {
                str customerId = customerIdElement.text();
                CustTable custTable = CustTable::find(customerId);

                // Get business partner identifier.
                XmlElement businessPartnerIdElement = searchCriteriaXmlRoot.getNamedElement(businessPartnerIdAttribute);
                boolean isB2B = businessPartnerIdElement != null && RetailB2BEcommerceFeature::isEnabled();

                boolean useCustomerInvoiceAccount = isB2B && custTable.InvoiceAccount;

                if (useCustomerInvoiceAccount)
                {
                    custTransDataSource.addRange(fieldNum(CustTrans, AccountNum)).value(custTable.InvoiceAccount);
                }
                else
                {
                    custTransDataSource.addRange(fieldNum(CustTrans, AccountNum)).value(custTable.AccountNum);
                }
            }

            // Add transaction types.
            Set invoiceTypeSet = new Set(Types::Enum);
            XmlElement invoiceTypesRootElement = searchCriteriaXmlRoot.getNamedElement(InvoiceTypeValuesAttribute);
            
            if (invoiceTypesRootElement != null)
            {
                XmlNodeList invoiceTypes =  invoiceTypesRootElement.childNodes();

                for (int i = 0; i < invoiceTypes.length(); i++)
                {
                    XmlNode invoiceTypeNode = invoiceTypes.item(i);
                    RetailInvoiceType invoiceType = str2Int(invoiceTypeNode.text());
                    invoiceTypeSet.add(invoiceType);
                }
            }

            System.Text.StringBuilder stringBuilderInvoiceType = new System.Text.StringBuilder();

            RetailTransactionServiceInvoices::populateInvoiceTypeFilter(custTransDataSource, invoiceTypeSet, stringBuilderInvoiceType);

            if (stringBuilderInvoiceType.Length > 0)
            {
                // Remove prefix 'or' ('||') at the beginning of the query range.
                stringBuilderInvoiceType = stringBuilderInvoiceType.Remove(0, strLen(orStr));
                custTransDataSource.addRange(fieldNum(CustTrans, TransType))
                    .value(strFmt('( %1 )', stringBuilderInvoiceType.ToString()));
            }
   
            // Add invoice paid status.
            XmlElement invoicePaidStatusRootElement = searchCriteriaXmlRoot.getNamedElement(InvoicePaidStatusValuesAttribute);
            Set invoicePaidStatusSet = new Set(Types::Enum);
            
            if (invoicePaidStatusRootElement != null)
            {
                XmlNodeList invoicePaidStatuslist =  invoicePaidStatusRootElement.childNodes();

                for (int i = 0; i < invoicePaidStatuslist.length(); i++)
                {
                    XmlNode invoicePaidStatusNode = invoicePaidStatuslist.item(i);
                    RetailInvoicePaidStatus invoicePaidStatus = str2Int(invoicePaidStatusNode.text());
                    invoicePaidStatusSet.add(invoicePaidStatus);
                }
            }

            if (invoicePaidStatusSet.empty())
            {
                QueryBuildDataSource custTransOpenDataSource = custTransDataSource.addDataSource(tableNum(CustTransOpen));
                custTransOpenDataSource.joinMode(JoinMode::ExistsJoin);
                custTransOpenDataSource.addLink(fieldNum(CustTrans, RecId), fieldNum(CustTransOpen, RefRecId));
                custTransOpenDataSource.addSortField(fieldNum(CustTransOpen, RecId), SortOrder::Ascending);
            }
            else
            {
                System.Text.StringBuilder stringBuilderInvoicePaidStatus = new System.Text.StringBuilder();

                RetailTransactionServiceInvoices::populateInvoicePaidStatusFilter(custTransDataSource, invoicePaidStatusSet, stringBuilderInvoicePaidStatus);

                if (stringBuilderInvoicePaidStatus.Length > 0)
                {
                    // Remove prefix 'or' ('||') at the beginning of the query range.
                    stringBuilderInvoicePaidStatus = stringBuilderInvoicePaidStatus.Remove(0, strLen(orStr));

                    custTransDataSource.addRange(fieldNum(CustTrans, SettleAmountCur))
                    .value(strFmt('( %1 )', stringBuilderInvoicePaidStatus.ToString()));
                }
            }

            // Get paging details
            int startingPosition, maxResultCount;
            int resultCounter = 0;
            [startingPosition, maxResultCount] = RetailTransactionServiceTransactions::parsePagingInfo(searchCriteriaXmlDoc);
            
            QueryRun qr = new QueryRun(query);
            qr.enablePositionPaging(true);
            qr.addPageRange(startingPosition, maxResultCount);

            // Initialize xml return result
            resultDoc = RetailTransactionServiceUtilities::getXmlDocumentForSerializedEntities();
            XmlElement resultRootElement = resultDoc.createElement(ArrayOfOrderInvoiceAttribute);
            resultRootElement.setAttribute('xmlns', RetailTransactionServiceUtilities::getCrtDataModelXmlNamespace());
            Map customerMap = new Map(Types::String, Types::String); // key: customerId, value: customerName

            while (qr.next())
            {
                // Counter reaches max result. Stop fetching data.
                if (resultCounter >= maxResultCount)
                {
                    break;
                }

                CustTrans custTransResult = qr.get(tableNum(CustTrans));
                RetailInvoiceType invoiceType;

                if (custTransResult.AmountCur >= 0)
                {
                    switch (custTransResult.TransType)
                    {
                        case LedgerTransType::Sales:
                            invoiceType = RetailInvoiceType::SalesOrder;
                            break;
                        case LedgerTransType::Cust:
                            invoiceType = RetailInvoiceType::FreeText;
                            break;
                        case LedgerTransType::Project:
                            invoiceType = RetailInvoiceType::Project;
                            break;
                        default:
                            invoiceType = RetailInvoiceType::None;
                            break;
                    }
                }
                else
                {
                    switch (custTransResult.TransType)
                    {
                        case LedgerTransType::Sales:
                            invoiceType = RetailInvoiceType::CreditNote;
                            break;
                        case LedgerTransType::Cust:
                            invoiceType = RetailInvoiceType::FreeTextCreditNote;
                            break;
                        case LedgerTransType::Project:
                            invoiceType = RetailInvoiceType::ProjectCreditNote;
                            break;
                        default:
                            invoiceType = RetailInvoiceType::None;
                            break;
                    }
                }

                container invoiceDetails = RetailTransactionServiceInvoices::getInvoiceInternal(custTransResult.Invoice, custTransResult.AccountNum, invoiceType, customerMap, true);

                // Insert the container as part of xml result if data retrieval succeeded.
                if (conPeek(invoiceDetails, 1))
                {
                    XmlElement invoiceElement = resultDoc.createElement(OrderInvoiceAttribute);
                    real amountPaid = conPeek(invoiceDetails, 4);
                    real totalAmount = conPeek(invoiceDetails, 5);
                    real amountBalance = totalAmount - amountPaid;

                    // Add OrderInvoice element sorted alphabetically.
                    RetailTransactionServiceUtilities::addElementResult(resultDoc, invoiceElement, AmountBalanceAttribute,
                        RetailTransactionServiceUtilities::realToString(amountBalance));
                    RetailTransactionServiceUtilities::addElementResult(resultDoc, invoiceElement, AmountPaidAttribute,
                        RetailTransactionServiceUtilities::realToString(amountPaid));
                    RetailTransactionServiceUtilities::addElementResult(resultDoc, invoiceElement, CurrencyCodeAttribute, conPeek(invoiceDetails, 10));
                    RetailTransactionServiceUtilities::addElementResult(resultDoc, invoiceElement, CustomerAccountNumberAttribute, conPeek(invoiceDetails, 6));
                    RetailTransactionServiceUtilities::addElementResult(resultDoc, invoiceElement, CustomerNameAttribute, conPeek(invoiceDetails, 7));
                    RetailTransactionServiceUtilities::addElementResult(resultDoc, invoiceElement, IdAttribute, conPeek(invoiceDetails, 3));

                    if (RetailUseDefaultValueForDateFlight::instance().isEnabled())
                    {
                        RetailTransactionServiceUtilities::addDateWithEmptyDefaultElementResult(resultDoc, invoiceElement, InvoiceDateAttribute, conPeek(invoiceDetails, 8));
                        RetailTransactionServiceUtilities::addDateWithEmptyDefaultElementResult(resultDoc, invoiceElement, InvoiceDueDateAttribute, conPeek(invoiceDetails, 9));
                    }
                    else
                    {
                         RetailTransactionServiceUtilities::addDateElementResult(resultDoc, invoiceElement, InvoiceDateAttribute, conPeek(invoiceDetails, 8));
                         RetailTransactionServiceUtilities::addDateElementResult(resultDoc, invoiceElement, InvoiceDueDateAttribute, conPeek(invoiceDetails, 9));
                    }

                    RetailTransactionServiceUtilities::addElementResult(resultDoc, invoiceElement, InvoicePaidStatusValueAttribute, int2Str(enum2int(conPeek(invoiceDetails, 11))));
                    RetailTransactionServiceUtilities::addElementResult(resultDoc, invoiceElement, InvoiceTypeValueAttribute, int2Str(enum2int(invoiceType)));
                    RetailTransactionServiceUtilities::addElementResult(resultDoc, invoiceElement, TotalAmountAttribute,
                        RetailTransactionServiceUtilities::realToString(totalAmount));

                    resultRootElement.appendChild(invoiceElement);
                }

                resultCounter++;
            }

            resultDoc.appendChild(resultRootElement);
            success = true;
        }
        catch(Exception::Error)
        {
            errorMessage = RetailTransactionServiceUtilities::getInfologMessages(infologLine);
            eventSource.EventWriteOrdersGetInvoiceListError(funcName());
        }

        return [success, errorMessage, resultDoc.toString()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method returns the container <c>openInvoice</c> having the data of the <c>CustTrans</c> and <c>CustTable</c>.
    /// </summary>
    /// <param name="_invoiceId">
    /// ID of the CustTrans.Invoice field.
    /// </param>
    /// <param name="_accountNum">
    /// Customer account number of custTrans.
    /// </param>
    /// <param name="_invoiceType">
    /// The invoice type.
    /// </param>
    /// <param name="_customerMap">
    /// The customer mapping for faster customer information retrieval.
    /// </param>
    /// <param name="_customerMap">
    /// The customer mapping for faster customer information retrieval.
    /// </param>
    /// <param name="_canAddAdditionalFields">
    /// Indicates if the additional items can be passed in the container, needed to maintain backward compatibility.
    /// </param>
    /// <returns>
    /// Container <c>openInvoice</c> having the data of the <c>CustTrans</c> and <c>CustTable</c>.
    /// </returns>
    private static container getInvoiceInternal(InvoiceId _invoiceId, CustAccount _accountNum = '', RetailInvoiceType _invoiceType = RetailInvoiceType::SalesOrder, Map _customerMap = null, boolean _canAddAdditionalFields = false)
    {
        CustTrans                   custTrans;
        CustTransOpen               custTransOpen;
        CustInvoiceJour             custInvoiceJour;
        ProjInvoiceJour             projInvoiceJour;
        CustTransCashDisc           custTransCashDisc;
        DiscGraceDays               foundGraceDays = 0;
        AmountCur                   cashDiscAmount = 0;
        container                   openInvoice;

        if (!_canAddAdditionalFields)
        {
            openInvoice = [false, '', '', '', '', '', '', ''];
        }
        else
        {
            openInvoice = [false, '', '', '', '', '', '', '', '', '', RetailInvoicePaidStatus::None];
        }

        LedgerTransType             transType = RetailTransactionServiceInvoices::invoiceTypeToLedgerTransType(_invoiceType);

        if (!_customerMap)
        {
            _customerMap = new Map(Types::String, Types::String);
        }

        if (_accountNum)
        {
            select firstonly custTrans
                where custTrans.Invoice == _invoiceId
                   && custTrans.TransType == transType
                   && custTrans.AccountNum == _accountNum;
        }
        else
        {
            select firstonly custTrans
                where custTrans.Invoice == _invoiceId
                   && custTrans.TransType == transType;
        }

        if (custTrans)
        {
            custTransOpen = CustTransOpen::findRefId(custTrans.RecId);

            if (_invoiceType == RetailInvoiceType::Project || _invoiceType == RetailInvoiceType::ProjectCreditNote)
            {
                select firstonly projInvoiceJour
                    where projInvoiceJour.ProjInvoiceId == _invoiceId
                    && projInvoiceJour.InvoiceAccount == custTrans.AccountNum;
            }
            else
            {
                custInvoiceJour = CustInvoiceJour::findFromCustTrans(custTrans.Invoice, custTrans.TransDate, custTrans.AccountNum);
            }

            foundGraceDays = CustPaymModeTable::discGraceDays(custTrans.PaymMode);
            // Find cash discount record based on transaction date
            custTransCashDisc = CustTransCashDisc::findByUseCashDisc(tableNum(CustTransOpen), custTransOpen.RecId, custTransOpen.UseCashDisc, DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), foundGraceDays);
            cashDiscAmount = custTransOpen.getCashDiscAmountToTake(custTransCashDisc.CashDiscAmount);
            str customerName;

            if (_customerMap.exists(custTrans.AccountNum))
            {
                customerName = _customerMap.lookup(custTrans.AccountNum);
            }
            else
            {
                customerName = CustTable::find(custTrans.AccountNum).name();
                _customerMap.insert(custTrans.AccountNum, customerName);
            }

            AmountCur invoiceAmount = custInvoiceJour ? custInvoiceJour.InvoiceAmount : projInvoiceJour.InvoiceAmount;

            if ((_canAddAdditionalFields || custTransOpen) && (custInvoiceJour || projInvoiceJour))
            {
                if (!_canAddAdditionalFields)
                {
                    openInvoice = [true,                                            // result
                    '',                                                             // comment
                    custTrans.Invoice,                                              // Invoice number
                    custTrans.SettleAmountCur,                                      // Amount paid
                    invoiceAmount - cashDiscAmount,                                 // Open Invoice amount
                    custTrans.AccountNum,                                           // Customer account
                    customerName,                                                   // Customer name
                    DateTimeUtil::toStr(custTrans.CreatedDateTime)];                // Invoice creation date
                }
                else
                {
                    RetailInvoicePaidStatus invoicePaidStatus =
                        custTrans.Closed != dateNull() ? RetailInvoicePaidStatus::Paid :
                        (custTrans.SettleAmountCur == 0 ? RetailInvoicePaidStatus::Unpaid : RetailInvoicePaidStatus::PartiallyPaid);

                    openInvoice = [true,                                            // result
                    '',                                                             // comment
                    custTrans.Invoice,                                              // Invoice number
                    custTrans.SettleAmountCur,                                      // Amount paid
                    invoiceAmount - cashDiscAmount,                                 // Open Invoice amount
                    custTrans.AccountNum,                                           // Customer account
                    customerName,                                                   // Customer name
                    DateTimeUtil::toStr(custTrans.CreatedDateTime),                 // Invoice creation date
                    DateTimeUtil::toStr(custTrans.DueDate),                         // Invoice due date
                    custTrans.CurrencyCode,                                         // Currency code
                    invoicePaidStatus];                                             // Invoice paid status
                }
            }
        }

        return openInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateInvoiceTypeFilter</Name>
				<Source><![CDATA[
    private static void populateInvoiceTypeFilter(QueryBuildDataSource custTransDataSource, Set invoiceTypeSet, System.Text.StringBuilder stringBuilderInvoiceType)
    {

        if (invoiceTypeSet.in(RetailInvoiceType::SalesOrder))
        {
            // query syntax: "||((custTrans.TransType == 2) && (custTrans.Amount > 0))"
            stringBuilderInvoiceType.Append(strFmt('%1((%2.%3 == %4) && (%2.%5 > 0))',
                     orStr, custTransDataSource.name(), fieldStr(CustTrans, TransType), enum2int(LedgerTransType::Sales), fieldStr(CustTrans, AmountCur)));
        }

        if (invoiceTypeSet.in(RetailInvoiceType::FreeText))
        {
            // query syntax: "||((custTrans.TransType == 8) && (custTrans.Amount > 0))"
            stringBuilderInvoiceType.Append(strFmt('%1((%2.%3 == %4) && (%2.%5 > 0))',
                     orStr, custTransDataSource.name(), fieldStr(CustTrans, TransType), enum2int(LedgerTransType::Cust), fieldStr(CustTrans, AmountCur)));
        }

        if (invoiceTypeSet.in(RetailInvoiceType::Project))
        {
            // query syntax: "||((custTrans.TransType == 6) && (custTrans.Amount > 0))"
            stringBuilderInvoiceType.Append(strFmt('%1((%2.%3 == %4) && (%2.%5 > 0))',
                    orStr, custTransDataSource.name(), fieldStr(CustTrans, TransType), enum2int(LedgerTransType::Project), fieldStr(CustTrans, AmountCur)));
        }
            
        if (invoiceTypeSet.in(RetailInvoiceType::CreditNote))
        {
            // query syntax: "||((custTrans.TransType == 2) && (custTrans.Amount < 0))"
            stringBuilderInvoiceType.Append(strFmt('%1((%2.%3 == %4) && (%2.%5 < 0))',
                     orStr, custTransDataSource.name(), fieldStr(CustTrans, TransType), enum2int(LedgerTransType::Sales), fieldStr(CustTrans, AmountCur)));
        }

        if (invoiceTypeSet.in(RetailInvoiceType::FreeTextCreditNote))
        {
            // query syntax: "||((custTrans.TransType == 8) && (custTrans.Amount < 0))"
            stringBuilderInvoiceType.Append(strFmt('%1((%2.%3 == %4) && (%2.%5 < 0))',
                     orStr, custTransDataSource.name(), fieldStr(CustTrans, TransType), enum2int(LedgerTransType::Cust), fieldStr(CustTrans, AmountCur)));
        }

        if (invoiceTypeSet.in(RetailInvoiceType::ProjectCreditNote))
        {
            // query syntax: "||((custTrans.TransType == 6) && (custTrans.Amount < 0))"
            stringBuilderInvoiceType.Append(strFmt('%1((%2.%3 == %4) && (%2.%5 < 0))',
                    orStr, custTransDataSource.name(), fieldStr(CustTrans, TransType), enum2int(LedgerTransType::Project), fieldStr(CustTrans, AmountCur)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateInvoicePaidStatusFilter</Name>
				<Source><![CDATA[
    private static void populateInvoicePaidStatusFilter(QueryBuildDataSource custTransDataSource, Set invoicePaidStatusSet, System.Text.StringBuilder stringBuilderInvoicePaidStatus)
    {
        str minDateStr = date2StrXpp(dateNull());

        if (invoicePaidStatusSet.in(RetailInvoicePaidStatus::Unpaid))
        {
            // query syntax: "||((CustTrans.Closed = '1900-01-01 00:00:00.000') && (custTrans.SettleAmountCur = 0))"
            stringBuilderInvoicePaidStatus.Append(strFmt('%1((%2.%3 = %4) && (%2.%5 = 0))',
                     orStr, custTransDataSource.name(), fieldStr(CustTrans, Closed), minDatestr, fieldStr(CustTrans, SettleAmountCur)));
        }

        if (invoicePaidStatusSet.in(RetailInvoicePaidStatus::PartiallyPaid))
        {
            // query syntax: "||((CustTrans.Closed = '1900-01-01 00:00:00.000') && (custTrans.SettleAmountCur > 0))"
            stringBuilderInvoicePaidStatus.Append(strFmt('%1((%2.%3 = %4) && (%2.%5 > 0))',
                     orStr, custTransDataSource.name(), fieldStr(CustTrans, Closed), minDateStr, fieldStr(CustTrans, SettleAmountCur)));
        }
                
        if (invoicePaidStatusSet.in(RetailInvoicePaidStatus::Paid))
        {
            // query syntax: "||(CustTrans.Closed != '1900-01-01 00:00:00.000')"
            stringBuilderInvoicePaidStatus.Append(strFmt('%1(%2.%3 != %4)',
                     orStr, custTransDataSource.name(), fieldStr(CustTrans, Closed), minDateStr));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceTypeToLedgerTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert retail invoice type to ledger transaction type.
    /// </summary>
    /// <param name = "_invoiceType">The retail invoice type.</param>
    /// <returns>The ledger transaction type.</returns>
    public static LedgerTransType invoiceTypeToLedgerTransType(RetailInvoiceType _invoiceType)
    {
        LedgerTransType transType;

        switch(_invoiceType)
        {
            case RetailInvoiceType::FreeText:
            case RetailInvoiceType::FreeTextCreditNote:
                transType = LedgerTransType::Cust;
                break;
            case RetailInvoiceType::Project:
            case RetailInvoiceType::ProjectCreditNote:
                transType = LedgerTransType::Project;
                break;
            case RetailInvoiceType::SalesOrder:
            case RetailInvoiceType::CreditNote:
                transType = LedgerTransType::Sales;
                break;
            default:
                transType = LedgerTransType::None;
                break;
        }

        return transType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNegativeInvoiceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine whether the invoice amount is positive or negative give the retail invoice type.
    /// </summary>
    /// <param name = "_invoiceType">The invoice type.</param>
    /// <returns>True if the invoice amount negative, false otherwise.</returns>
    public static boolean isNegativeInvoiceAmount(RetailInvoiceType _invoiceType)
    {
        boolean isNegativeAmount;

        switch (_invoiceType)
        {
            case RetailInvoiceType::CreditNote:
            case RetailInvoiceType::FreeTextCreditNote:
            case RetailInvoiceType::ProjectCreditNote:
                isNegativeAmount = true;
                break;
            case RetailInvoiceType::SalesOrder:
            case RetailInvoiceType::FreeText:
            case RetailInvoiceType::Project:
            default:
                isNegativeAmount = false;
                break;
        }

        return isNegativeAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSalesOrderInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine whether invoice is a sales order invoice given the retail invoice type.
    /// </summary>
    /// <param name = "_invoiceType">The retail invoice type.</param>
    /// <returns>True if invoice is a sales order invoice type, false otherwise.</returns>
    public static boolean isSalesOrderInvoice(RetailInvoiceType _invoiceType)
    {
        boolean isSalesOrderInvoice;

        switch (_invoiceType)
        {
            case RetailInvoiceType::SalesOrder:
            case RetailInvoiceType::CreditNote:
                isSalesOrderInvoice = true;
                break;
            case RetailInvoiceType::FreeText:
            case RetailInvoiceType::FreeTextCreditNote:
            case RetailInvoiceType::Project:
            case RetailInvoiceType::ProjectCreditNote:
            default:
                isSalesOrderInvoice = false;
                break;
        }

        return isSalesOrderInvoice;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>