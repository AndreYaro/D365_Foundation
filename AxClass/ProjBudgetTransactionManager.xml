<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjBudgetTransactionManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjBudgetTransactionManager</c> class manages the budget of a project during the project
///    budget transaction.
/// </summary>
class ProjBudgetTransactionManager
{
    List                            listError;
    ProjBudgetTransaction           projBudgetTransaction;
    boolean                         supressMessages;
    boolean                         allowOverBudget;
    boolean                         committedCostBudgetReduced;
    RecId                           fiscalCalendarRecId;
    boolean                         isBudgetDefined;
    boolean                         forValidationOnly;
    Map                             budgetCheckResult;
    boolean                         trackBudgetStatus;

    private boolean isBudgetTransactionManagerV2Enabled;
    private const str CostBudgetAllocatioLoneNotMatchingMessage = 'Scenario: %1, Class method: %2, Cost ProjBudgetAllocationLine RecId not matching, ProjBudgetReductionHistory RecId: %3, Actual ProjBudgetAllocationLineIdCost RecId: %4, Expected ProjBudgetAllocationLine RecId: %5';
    private const str SalesBudgetAllocatioLoneNotMatchingMessage = 'Scenario: %1, Class method: %2, Sales ProjBudgetAllocationLine RecId not matching, ProjBudgetReductionHistory RecId: %3, Actual ProjBudgetAllocationLineIdSales RecId: %4, Expected ProjBudgetAllocationLine RecId: %5';
    private const str BudgetAllocationLineMissing = 'Scenario: %1, Class method: %2, ProjBudgetReductionHistory missing ProjBudgetAllocationLine, Just inserted: %3, ProjBudgetaryControlOn: %4, ProjBudgetReductionHistory RecId: %5, ProjBudgetAllocationLineIdCost RecId: %6, ProjBudgetAllocationLineIdSales RecId: %7';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getProjTableForBudgetControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a <c>ProjTable</c> instance that can be used when checking budgets.
    /// If the project uses an alternate project for budgetting, the alternate project is returned.
    /// </summary>
    /// <param name = "_projId">The Id of the project for which budget control is to be performed.</param>
    /// <returns>The <c>ProjTable</c> instance that owns the Budget.</returns>
    public static ProjTable getProjTableForBudgetControl(ProjId _projId)
    {
        ProjTable projTable = ProjTable::find(_projId);

        if (projTable.UseAlternateProject)
        {
            projTable = ProjTable::find(projTable.AlternateBudgetProject);
        }
        else
        {
            ProjBudgetLine projBudgetLine;
            select firstonly ProjId from projBudgetLine
                where projBudgetLine.ProjId == _projId;
            if (projBudgetLine.projid)
            {
                projTable = ProjTable::find(projBudgetLine.ProjId);
            }
            else
            {
                projTable = ProjTable::find(ProjTable::getRootProjId(_projId));
            }
        }

        return projTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingIsInitialization_delegate</Name>
				<Source><![CDATA[
    delegate void kittingIsInitialization_delegate(ProjBudgetTransactionLine _projBudgetTransactionLine, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingIsInitialization</Name>
				<Source><![CDATA[
    protected boolean kittingIsInitialization(ProjBudgetTransactionLine _projBudgetTransactionLine)
    {
        EventHandlerResult resultValue = new EventHandlerResult();
        this.kittingIsinitialization_delegate(_projBudgetTransactionLine, resultValue);
        return resultValue.hasResult() && resultValue.booleanResult();
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustBudget</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adjusts the specified budget amounts.
    /// </summary>
    /// <param name="_projBudgetAdjustmentType">
    ///    The <c>ProjBudgetAdjustmentType</c> enumeration value that indicates the budget amounts to adjust.
    /// </param>
    /// <returns>
    ///    true if the budget is adjusted; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method will either increase or decrease the budget amounts depending on the <paramref
    ///    name="_projAdjustmentType" /> parameter. The transaction ID is made optional to identify the
    ///    current transaction from the set of objects in the <c>ProjBudgetTransactionLines</c> class.
    /// </remarks>
    public boolean adjustBudget(ProjBudgetAdjustmentType _projBudgetAdjustmentType)
    {
        boolean ret = true;

        SetEnumerator setEnumerator = projBudgetTransaction.getBudgetTransactionLinesEnumerator();
        listError = new List(Types::Container);
        budgetCheckResult = new Map(Types::String, Types::Container);

        while (setEnumerator.moveNext())
        {
            ProjBudgetTransactionLine projBudgetTransactionLine = setEnumerator.current();
            ProjTable projTable = ProjBudgetTransactionManager::getProjTableForBudgetControl(projBudgetTransactionLine.projId());

            if (isBudgetTransactionManagerV2Enabled)
            {
                projBudgetTransactionLine.setBudgetInformation(projTable.ProjId);
            }

            switch (_projBudgetAdjustmentType)
            {
                case ProjBudgetAdjustmentType::Decrement :
                    ret = this.adjustBudgetDecrement(projBudgetTransactionLine, projTable);
                    break;

                case ProjBudgetAdjustmentType::Increment :
                    this.adjustBudgetIncrement(projBudgetTransactionLine, projTable);
                    break;
            }
        }

        if (this.parmTrackBudgetStatus())
        {
            this.updateBudgetStatus(true);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustBudgetDecrement</Name>
				<Source><![CDATA[
    protected boolean adjustBudgetDecrement(ProjBudgetTransactionLine _projBudgetTransactionLine, ProjTable _projTable)
    {
        boolean ret = true;
        boolean useBudgeting = _projTable.UseBudgeting;
        isBudgetDefined = false;

        if (this.isBudgetaryControlValid(_projBudgetTransactionLine.transType(), _projTable.ProjBudgetaryControlOn) || !useBudgeting)
        {
            ret = true;
        }
        else if (_projTable.Status == ProjStatus::Completed)
        {
            ProjBudgetCheckErrorDescription message = strFmt("@SYS301172", _projTable.ProjId, _projTable.Stage());
            this.setBudgetCheckResultMap(_projBudgetTransactionLine.projId(), _projBudgetTransactionLine.categoryId(),0,0,ProjBudgetCheckResult::Failed, ProjBudgetControlErrorWarning::ProjectCompleted, message, '',
                        _projBudgetTransactionLine.activityNumber(), 0);

            if (!this.parmSupressMessages() && message != '')
            {
                error(message);
            }

            ret = false;
        }
        else
        {
            AmountCur costAmount;
            AmountCur salesAmount;

            ProjBudgetaryControlOn projBudgetaryControlOn = _projTable.ProjBudgetaryControlOn;
            projBudgetaryControlOn = this.getBudgetaryControlForRevenueOnly(_projBudgetTransactionLine.transType(), projBudgetaryControlOn);

            if (isBudgetTransactionManagerV2Enabled)
            {
                isBudgetDefined = this.isBudgetDefinedForBudgetTransactionLine(_projTable.ProjId, _projBudgetTransactionLine);
            }
            else
            {
                isBudgetDefined = this.isBudgetDefined(_projTable.ProjId, _projBudgetTransactionLine.categoryId(), projBudgetaryControlOn, _projBudgetTransactionLine.activityNumber());
            }

            if (_projBudgetTransactionLine.parmQty() >= 0 && (_projBudgetTransactionLine.costAmount() >= 0 || _projBudgetTransactionLine.salesAmount() >= 0))
            {
                costAmount = _projBudgetTransactionLine.costAmount();
                salesAmount = _projBudgetTransactionLine.salesAmount();
            }
            else
            {
                costAmount = _projBudgetTransactionLine.costAmount() > 0 ? 0 : _projBudgetTransactionLine.costAmount();
                salesAmount =  _projBudgetTransactionLine.salesAmount() > 0 ? 0 : _projBudgetTransactionLine.salesAmount();
            }

            if (!(costAmount == 0 && salesAmount == 0))
            {
                projBudgetaryControlOn = this.getBudgetaryControlForRevenueOnly(_projBudgetTransactionLine.transType(), _projTable.ProjBudgetaryControlOn);

                CostAmount  costAmountOrignal;
                SalesAmount salesAmountOrignal;
                CostAmount  costAmountRemaining;
                SalesAmount salesAmountRemaining;

                if (isBudgetTransactionManagerV2Enabled)
                {
                    container budgetCostAmounts = this.getTotalAndRemainingBudget(_projTable.ProjId, _projBudgetTransactionLine.categoryId(), _projBudgetTransactionLine.parmProjBudgetLineCost().ActivityNumber);
                    container budgetRevenueAmounts = this.getTotalAndRemainingBudget(_projTable.ProjId, _projBudgetTransactionLine.categoryId(), _projBudgetTransactionLine.parmProjBudgetLineRevenue().ActivityNumber);
                    costAmountOrignal = conPeek(budgetCostAmounts, 1);
                    salesAmountOrignal = conPeek(budgetRevenueAmounts, 2);
                    costAmountRemaining = conPeek(budgetCostAmounts, 3);
                    salesAmountRemaining = conPeek(budgetRevenueAmounts, 4);
                }
                else
                {
                    [costAmountOrignal, salesAmountOrignal, costAmountRemaining, salesAmountRemaining] = this.getTotalAndRemainingBudget(_projTable.ProjId, _projBudgetTransactionLine.categoryId(), _projBudgetTransactionLine.activityNumber());
                }

                if (!isBudgetDefined || ((costAmountOrignal > 0) && (costAmount > 0)) ||
                                ((salesAmountOrignal > 0) && (salesAmount > 0)) ||
                                ((costAmountOrignal < 0) && (costAmount  < 0)) ||
                                ((salesAmountOrignal < 0) && (salesAmount < 0)))
                {
                    ret = this.decrementBudget(_projTable, _projBudgetTransactionLine, projBudgetaryControlOn, costAmount, salesAmount);
                }
                else if ((((costAmountOrignal > 0) && (costAmount < 0)) ||
                                      ((salesAmountOrignal > 0) && (salesAmount < 0)) ||
                                      ((costAmountOrignal < 0) && (costAmount  > 0)) ||
                                      ((salesAmountOrignal < 0) && (salesAmount > 0))) && isBudgetDefined)
                {
                    this.incrementBudget(_projTable, _projBudgetTransactionLine, projBudgetaryControlOn, costAmount, salesAmount);
                }

                else if ((costAmountOrignal == 0 || salesAmountOrignal == 0) && isBudgetDefined)
                {
                    if (costAmount > 0 || salesAmount > 0)
                    {
                        ret = this.decrementBudget(_projTable, _projBudgetTransactionLine, projBudgetaryControlOn, costAmount, salesAmount);
                    }
                    else if (costAmount < 0 || salesAmount < 0)
                    {
                        this.incrementBudget(_projTable, _projBudgetTransactionLine, projBudgetaryControlOn, costAmount, salesAmount);
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustBudgetIncrement</Name>
				<Source><![CDATA[
    protected void adjustBudgetIncrement(ProjBudgetTransactionLine _projBudgetTransactionLine, ProjTable _projTable)
    {
        if (_projBudgetTransactionLine.transId() && !ProjBudgetReductionHistory::existProjTransId(_projBudgetTransactionLine.transId()))
        {
            boolean isKittingEnabled = FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance());
            if (!isKittingEnabled ||  !this.kittingIsinitialization(_projBudgetTransactionLine))
            {
                isBudgetDefined = this.adjustBudgetIncrementIsBudgetDefined(_projBudgetTransactionLine, _projTable);
                if (isBudgetDefined)
                {
                    warning(strFmt("@SYS301174", _projBudgetTransactionLine.projId()));
                }
            }
        }
        else
        {
            ProjBudgetReductionHistory projBudgetReductionHistory;

            select forupdate projBudgetReductionHistory where projBudgetReductionHistory.ProjTransId == _projBudgetTransactionLine.transId();

            if (projBudgetReductionHistory)
            {
                ProjTable projTable = ProjBudgetTransactionManager::getProjTableForBudgetControl(projBudgetReductionHistory.ProjIdOrig);

                ttsbegin;

                if (isBudgetTransactionManagerV2Enabled)
                {
                    this.increaseBudget(
                        projBudgetReductionHistory.CostAmountReduced,
                        0,
                        _projBudgetTransactionLine.transType(),
                        projBudgetReductionHistory.ProjBudgetAllocationLineIdCost,
                        projBudgetReductionHistory.ProjBudgetAllocationLineIdSales,
                        projTable.ProjId,
                        _projBudgetTransactionLine.categoryId(),
                        projBudgetReductionHistory.ProjTransId,
                        _projBudgetTransactionLine.transDate(),
                        projTable.ProjBudgetaryControlOn,
                        _projBudgetTransactionLine.parmProjBudgetLineCost().ActivityNumber);

                    this.increaseBudget(
                        0,
                        projBudgetReductionHistory.SalesAmountReduced,
                        _projBudgetTransactionLine.transType(),
                        projBudgetReductionHistory.ProjBudgetAllocationLineIdCost,
                        projBudgetReductionHistory.ProjBudgetAllocationLineIdSales,
                        projTable.ProjId,
                        _projBudgetTransactionLine.categoryId(),
                        projBudgetReductionHistory.ProjTransId,
                        _projBudgetTransactionLine.transDate(),
                        projTable.ProjBudgetaryControlOn,
                        _projBudgetTransactionLine.parmProjBudgetLineRevenue().ActivityNumber);
                }
                else
                {
                    this.increaseBudget(
                        projBudgetReductionHistory.CostAmountReduced,
                        projBudgetReductionHistory.SalesAmountReduced,
                        _projBudgetTransactionLine.transType(),
                        projBudgetReductionHistory.ProjBudgetAllocationLineIdCost,
                        projBudgetReductionHistory.ProjBudgetAllocationLineIdSales,
                        projTable.ProjId,
                        _projBudgetTransactionLine.categoryId(),
                        projBudgetReductionHistory.ProjTransId,
                        _projBudgetTransactionLine.transDate(),
                        projTable.ProjBudgetaryControlOn,
                        _projBudgetTransactionLine.activityNumber());
                }

                if (_projBudgetTransactionLine.parmSourceDocumentLine())
                {
                    ProjBudgetStatus projBudgetStatus = ProjBudgetStatus::findBySourceDocumentLine(_projBudgetTransactionLine.parmSourceDocumentLine(), true);

                    if (projBudgetStatus)
                    {
                        projBudgetStatus.delete();
                    }
                }

                projBudgetReductionHistory = ProjBudgetReductionHistory::findByProjTransId(_projBudgetTransactionLine.transId());
                if (projBudgetReductionHistory.RecId != 0)
                {
                    projBudgetReductionHistory.selectForUpdate(true);
                    projBudgetReductionHistory.delete();
                }

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustBudgetIncrementIsBudgetDefined</Name>
				<Source><![CDATA[
    protected boolean adjustBudgetIncrementIsBudgetDefined(ProjBudgetTransactionLine _projBudgetTransactionLine, ProjTable _projTable)
    {
        boolean ret = true;

        ProjBudgetaryControlOn projBudgetaryControlOn = this.getBudgetaryControlForRevenueOnly(_projBudgetTransactionLine.transType(), _projTable.ProjBudgetaryControlOn);

        if (isBudgetTransactionManagerV2Enabled)
        {
            ret = this.isBudgetDefinedForBudgetTransactionLine(_projTable.ProjId, _projBudgetTransactionLine);
        }
        else
        {
            ret = this.isBudgetDefined(_projTable.ProjId, _projBudgetTransactionLine.categoryId(), projBudgetaryControlOn, _projBudgetTransactionLine.activityNumber());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>decreaseBudget</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Decreases the budget by removing the cost and sales amounts from the budget.
    /// </summary>
    /// <param name="_projectForBudgetReduction">
    ///    The project ID for which the budget is to be obtained.
    /// </param>
    /// <param name="_projBudgetTransactionLine">
    ///    An object from the <c>ProjBudgetTransactionLine</c> class.
    /// </param>
    /// <param name="projBudgetaryControlOn">
    ///    A <c>ProjBudgetaryControlOn</c> enumeration value.
    /// </param>
    /// <param name="_projForecastTable">
    ///    A forecast table buffer corresponding to the project transaction type.
    /// </param>
    /// <returns>
    ///    true if the budget was decreased; otherwise, false.
    /// </returns>
    private boolean decreaseBudget(ProjId _projectForBudgetReduction, ProjBudgetTransactionLine _projBudgetTransactionLine, ProjBudgetaryControlOn projBudgetaryControlOn, Common _projForecastTable)
    {
        #OCCRetryCount
        ProjForecastEmpl           projForecastEmpl;
        ProjForecastCost           projForecastCost;
        ProjForecastRevenue        projForecastRevenue;
        ForecastSales              forecastSales;
        CostAmount                 costAmount;
        SalesAmount                salesAmount;
        ProjBudgetReductionHistory projBudgetReductionHistory;
        ProjBudgetAllocationLine   projBudgetAllocationLine;
        boolean                    ret;
        
        CostAmount                 costAmountOrignal;
        SalesAmount                salesAmountOrignal;
        CostAmount                 costAmountRemaining;
        SalesAmount                salesAmountRemaining;

        ProjBudgetTransactionLine_ExpenseJournal projBudgetTransactionLine_ExpenseJournal;

        ProjTable projTable = ProjBudgetTransactionManager::getProjTableForBudgetControl(_projBudgetTransactionLine.projId());

        [costAmountOrignal, salesAmountOrignal, costAmountRemaining, salesAmountRemaining] = this.getTotalAndRemainingBudget(projTable.ProjId, _projBudgetTransactionLine.CategoryId(), _projBudgetTransactionLine.activityNumber());
        
        if (projBudgetaryControlOn == ProjBudgetaryControlOn::CostsOnly || projBudgetaryControlOn == ProjBudgetaryControlOn::RevenuesAndCosts)
        {
            if (_projBudgetTransactionLine is ProjBudgetTransactionLine_ExpenseJournal)
            {
                projBudgetTransactionLine_ExpenseJournal = _projBudgetTransactionLine as ProjBudgetTransactionLine_ExpenseJournal;
                costAmount =  BudgetTransactionManager::calculateTransAmountToAccountingAmount(_projBudgetTransactionLine.costAmount(), _projBudgetTransactionLine.costAmountCurrencyCode(), _projBudgetTransactionLine.transDate(),0,false,projBudgetTransactionLine_ExpenseJournal.exchangeRate());
            }
            else
            {
                costAmount =  BudgetTransactionManager::calculateTransAmountToAccountingAmount(_projBudgetTransactionLine.costAmount(), _projBudgetTransactionLine.costAmountCurrencyCode(), _projBudgetTransactionLine.transDate(), 0, false, _projBudgetTransactionLine.parmExchRate());
            }
        }

        if (projBudgetaryControlOn == ProjBudgetaryControlOn::RevenuesOnly || projBudgetaryControlOn == ProjBudgetaryControlOn::RevenuesAndCosts
        && (!_projBudgetTransactionLine.linePropertyId() ||
            (ProjLineProperty::find(_projBudgetTransactionLine.linePropertyId()).ToBeInvoiced  &&
             ProjInvoiceTable::isBillingRuleInvoiceable(_projBudgetTransactionLine.ProjId(), _projBudgetTransactionLine.CategoryId(), '')))
        )
        {
            salesAmount = _projBudgetTransactionLine.salesAmount();
        }

        try
        {
            ttsbegin;
            select forupdate projBudgetReductionHistory where projBudgetReductionHistory.ProjTransId == _projBudgetTransactionLine.transId();

            projBudgetAllocationLine = this.getCurrentPeriodBudget(_projectForBudgetReduction, ProjBudgetLineType::Cost, _projBudgetTransactionLine.transDate(), _projBudgetTransactionLine.categoryId(), _projBudgetTransactionLine.activityNumber());

            if (projBudgetAllocationLine)
            {
                projBudgetAllocationLine.selectForUpdate(true);
                projBudgetAllocationLine.ReductionAmount += costAmount;
                projBudgetAllocationLine.update();

                if (projBudgetReductionHistory.RecId && projBudgetReductionHistory.ProjBudgetAllocationLineIdCost && projBudgetReductionHistory.ProjBudgetAllocationLineIdCost != projBudgetAllocationLine.RecId)
                {
                    ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(classStr(ProjBudgetTransactionManager));
                    
                    logger.logError(strFmt(CostBudgetAllocatioLoneNotMatchingMessage,
                        ProjOpsFinancialsInstrumentationActivites::ProjBudgetAllocationLineCost,
                        'ProjBudgetTransactionManager.decreaseBudget()',
                        projBudgetReductionHistory.RecId,
                        projBudgetReductionHistory.ProjBudgetAllocationLineIdCost,
                        projBudgetAllocationLine.RecId));

                    throw error("@Proj:ProjBudgetAllocationLineCostError");
                }

                if (!projBudgetReductionHistory.RecId || !projBudgetReductionHistory.ProjBudgetAllocationLineIdCost)
                {
                    projBudgetReductionHistory.ProjBudgetAllocationLineIdCost = projBudgetAllocationLine.RecId;
                }
            }
            
            projBudgetAllocationLine = this.getCurrentPeriodBudget(_projectForBudgetReduction, ProjBudgetLineType::Revenue, _projBudgetTransactionLine.transDate(), _projBudgetTransactionLine.categoryId(), _projBudgetTransactionLine.activityNumber());
            if (projBudgetAllocationLine)
            {
                projBudgetAllocationLine.selectForUpdate(true);
                projBudgetAllocationLine.ReductionAmount += salesAmount;
                projBudgetAllocationLine.update();

                if (projBudgetReductionHistory.RecId && projBudgetReductionHistory.ProjBudgetAllocationLineIdSales && projBudgetReductionHistory.ProjBudgetAllocationLineIdSales != projBudgetAllocationLine.RecId)
                {
                    ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(classStr(ProjBudgetTransactionManager));
                    
                    logger.logError(strFmt(SalesBudgetAllocatioLoneNotMatchingMessage,
                        ProjOpsFinancialsInstrumentationActivites::ProjBudgetAllocationLineSales,
                        'ProjBudgetTransactionManager.decreaseBudget()',
                        projBudgetReductionHistory.RecId,
                        projBudgetReductionHistory.ProjBudgetAllocationLineIdSales,
                        projBudgetAllocationLine.RecId));

                    throw error("@Proj:ProjBudgetAllocationLineSaleError");
                }

                if (!projBudgetReductionHistory.RecId || !projBudgetReductionHistory.ProjBudgetAllocationLineIdSales)
                {
                    projBudgetReductionHistory.ProjBudgetAllocationLineIdSales = projBudgetAllocationLine.RecId;
                }
            }

            NoYes insertRecord = NoYes::No;

            if (projBudgetReductionHistory.RecId)
            {
                projBudgetReductionHistory.CostAmountReduced = projBudgetReductionHistory.CostAmountReduced + costAmount;
                projBudgetReductionHistory.SalesAmountReduced = projBudgetReductionHistory.SalesAmountReduced + salesAmount;
                projBudgetReductionHistory.update();
            }
            else
            {
                projBudgetReductionHistory.ProjTransId = _projBudgetTransactionLine.transId();
                projBudgetReductionHistory.ProjTransType = _projBudgetTransactionLine.transType();
                projBudgetReductionHistory.ProjIdOrig = projTable.ProjId;
                projBudgetReductionHistory.CostAmountReduced = costAmount;
                projBudgetReductionHistory.SalesAmountReduced = salesAmount;
                projBudgetReductionHistory.insert();
                insertRecord = NoYes::Yes;
            }

            if ((projBudgetaryControlOn == ProjBudgetaryControlOn::CostsOnly
                    && !projBudgetReductionHistory.ProjBudgetAllocationLineIdCost)
                || (projBudgetaryControlOn == ProjBudgetaryControlOn::RevenuesOnly
                    && !projBudgetReductionHistory.ProjBudgetAllocationLineIdSales)
                || (!projBudgetReductionHistory.ProjBudgetAllocationLineIdCost
                    && !projBudgetReductionHistory.ProjBudgetAllocationLineIdSales))
            {
                ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(classStr(ProjBudgetTransactionManager));
                
                logger.logError(strFmt(BudgetAllocationLineMissing,
                    ProjOpsFinancialsInstrumentationActivites::ProjBudgetAllocationLineMissing,
                    'ProjBudgetTransactionManager.decreaseBudget()',
                    enum2Symbol(enumNum(NoYes), insertRecord),
                    enum2Symbol(enumNum(ProjBudgetaryControlOn), projBudgetaryControlOn),
                    projBudgetReductionHistory.RecId,
                    projBudgetReductionHistory.ProjBudgetAllocationLineIdCost,
                    projBudgetReductionHistory.ProjBudgetAllocationLineIdSales));
            }

            if (_projForecastTable)
            {
                _projForecastTable.selectForUpdate(true);
                switch (_projBudgetTransactionLine.transType())
                {
                    case ProjTransType::Hour :
                        projForecastEmpl = _projForecastTable as ProjForecastEmpl;
                        projForecastEmpl.SalesPrice -= salesAmount;
                        projForecastEmpl.CostPrice  -= costAmount;
                        projForecastEmpl.update();
                        break;
                    case ProjTransType::Cost :
                        projForecastCost = _projForecastTable as ProjForecastCost;
                        projForecastCost.SalesPrice -= salesAmount;
                        projForecastCost.CostPrice  -= costAmount;
                        projForecastCost.update();
                        break;
                    case ProjTransType::Item :
                        forecastSales = _projForecastTable as ForecastSales;
                        forecastSales.SalesPrice    -= salesAmount;
                        forecastSales.Amount         = forecastSales.calcLineAmount();
                        forecastSales.CostPrice     -= costAmount;
                        forecastSales.update();
                        break;
                    case ProjTransType::Revenue :
                        projForecastRevenue = _projForecastTable as ProjForecastRevenue;
                        projForecastRevenue.SalesPrice -= salesAmount;
                        projForecastRevenue.update();
                        break;
                }
                ret = true;
            }
            ttscommit;
        }
        catch (Exception::UpdateConflict)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::UpdateConflictNotRecovered;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::Error)
        {
            throw Exception::Error;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalCalendarRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Obtains the fiscal calendar record ID of the company.
    /// </summary>
    /// <returns>
    ///    The fiscal calendar record ID of the company.
    /// </returns>
    private RecId fiscalCalendarRecId()
    {
        if (!fiscalCalendarRecId)
        {
            fiscalCalendarRecId = CompanyInfoHelper::fiscalCalendarRecId();
        }

        return fiscalCalendarRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains budget for the selected period.
    /// </summary>
    /// <param name="_projId">
    /// The project ID for which budget is to be obtained.
    /// </param>
    /// <param name="_transType">
    /// The transaction type.
    /// </param>
    /// <param name="_projCategoryId">
    /// The category ID.
    /// </param>
    /// <param name="_projTransDate">
    /// The transaction date.
    /// </param>
    /// <param name="_budgetInterval">
    /// The budget interval for which budget is to be obtained.
    /// </param>
    /// <param name="_projDate">
    /// The project start date.
    /// </param>
    /// <param name="_projBudgetaryControlOn">
    /// A <c>ProjBudgetaryControlOn</c> enumeration value.
    /// </param>
    /// <param name="_activityNumber">
    /// A <c>activityNumber</c> specifying the activity.
    /// </param>
    /// <returns>
    /// A container of budget amounts.
    /// </returns>
    /// <remarks>
    /// The project ID passed into this method can be of the alternate project instead of the original project.
    /// The project category ID will be empty if this method is called for on account type transactions.
    /// </remarks>
    protected container getBudgetAmounts(ProjId _projId,
        ProjTransType       _transType,
        ProjCategoryId      _projCategoryId,
        ProjTransDate       _projTransDate,
        ProjBudgetInterval  _budgetInterval,
        ProjTransDate       _projDate,
        ProjBudgetaryControlOn _projBudgetaryControlOn,
        ProjActivityNumber  _activityNumber
    )
    {
        AmountMST   budgetCostAmount;
        AmountMST   budgetSalesAmount;

        switch (_projBudgetaryControlOn)
        {
            case ProjBudgetaryControlOn::CostsOnly:
                budgetCostAmount = this.getBudgetForSelectedPeriod(_projId, _transType, _projCategoryId, _projTransDate, _budgetInterval, _projDate,ProjBudgetLineType::Cost, _activityNumber);
                break;
            case ProjBudgetaryControlOn::RevenuesOnly:
                budgetSalesAmount = this.getBudgetForSelectedPeriod(_projId, _transType, _projCategoryId, _projTransDate, _budgetInterval, _projDate,ProjBudgetLineType::Revenue, _activityNumber);
                break;
            case ProjBudgetaryControlOn::RevenuesAndCosts :
                budgetCostAmount = this.getBudgetForSelectedPeriod(_projId, _transType, _projCategoryId, _projTransDate, _budgetInterval, _projDate,ProjBudgetLineType::Cost, _activityNumber);
                budgetSalesAmount = this.getBudgetForSelectedPeriod(_projId, _transType, _projCategoryId, _projTransDate, _budgetInterval, _projDate,ProjBudgetLineType::Revenue, _activityNumber);
                break;
        }
        return [budgetCostAmount,budgetSalesAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetaryControlForRevenueOnly</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Obtains the budgetary control for revenue-type transactions.
    /// </summary>
    /// <param name="_projTransType">
    ///    The transaction type of project.
    /// </param>
    /// <param name="_projBudgetaryControlOn">
    ///    The budgetary control.
    /// </param>
    /// <returns>
    ///    The budgetary control for revenue-type transactions.
    /// </returns>
    private ProjBudgetaryControlOn getBudgetaryControlForRevenueOnly(ProjTransType _projTransType, ProjBudgetaryControlOn _projBudgetaryControlOn)
    {
        ProjBudgetaryControlOn  projBudgetaryControlOn;

        projBudgetaryControlOn = _projBudgetaryControlOn;

        if (_projTransType == ProjTransType::Revenue && _projBudgetaryControlOn == ProjBudgetaryControlOn::RevenuesAndCosts)
        {
            projBudgetaryControlOn = ProjBudgetaryControlOn::RevenuesOnly;
        }

        return projBudgetaryControlOn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetForSelectedPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains budget for the selected period.
    /// </summary>
    /// <param name="_projId">
    /// The project ID for which budget is to be obtained.
    /// </param>
    /// <param name="_transType">
    /// The transaction type.
    /// </param>
    /// <param name="_projCategoryId">
    /// The category ID.
    /// </param>
    /// <param name="_projTransDate">
    /// The transaction date.
    /// </param>
    /// <param name="_budgetInterval">
    /// The budget interval.
    /// </param>
    /// <param name="_projDate">
    /// The project start date.
    /// </param>
    /// <param name="_projBudgetLineType">
    /// The budget type.
    /// </param>
    /// <param name="_activityNumber">
    /// A <c>activityNumber</c> specifying the activity.
    /// </param>
    /// <returns>
    /// A container of budget amounts.
    /// </returns>
    /// <remarks>
    /// The projet ID passed into this method can be of the alternate project instead of the original project.
    /// The project category ID will be empty if this method is called for on account type transactions.
    /// </remarks>
    private AmountMST getBudgetForSelectedPeriod(
        ProjId              _projId,
        ProjTransType       _transType,
        ProjCategoryId      _projCategoryId,
        ProjTransDate       _projTransDate,
        ProjBudgetInterval  _budgetInterval,
        ProjTransDate       _projDate,
        ProjBudgetLineType  _projBudgetLineType,
        ProjActivityNumber  _activityNumber
    )
    {
        FiscalCalendarYear          fiscalCalendarYear;
        FiscalCalendarPeriod        fiscalCalendarPeriod;
        ProjBudgetLine              projBudgetLine;
        ProjBudgetAllocationLine    projBudgetAllocationLine;
        Common                      buffer;
        AmountMST                   consumedAmount;
        AmountMST                   budgetAmount;

        void processTotalBudget()
        {
            ProjForecastEmpl           projForecastEmpl;
            ProjForecastCost           projForecastCost;
            ProjForecastRevenue        projForecastRevenue;
            ForecastSales              forecastSales;

            buffer = ProjBudgetReductionHistory::findForecastByProjAndCatId(_projId, _projCategoryId, _activityNumber);

            if (buffer)
            {
                switch (_transType)
                {
                    case ProjTransType::Hour :
                        projForecastEmpl = buffer as ProjForecastEmpl;
                        if (_projBudgetLineType == ProjBudgetLineType::Cost)
                        {
                            budgetAmount = projForecastEmpl.CostPrice;
                        }
                        else
                        {
                            budgetAmount = projForecastEmpl.SalesPrice;
                        }
                        break;
                    case ProjTransType::Cost :
                        projForecastCost = buffer as ProjForecastCost;
                        if (_projBudgetLineType == ProjBudgetLineType::Cost)
                        {
                            budgetAmount = projForecastCost.CostPrice;
                        }
                        else
                        {
                            budgetAmount = projForecastCost.SalesPrice;
                        }
                        break;

                    case ProjTransType::Item :
                        forecastSales = buffer as ForecastSales;
                        if (_projBudgetLineType == ProjBudgetLineType::Cost)
                        {
                            budgetAmount = forecastSales.CostPrice;
                        }
                        else
                        {
                            budgetAmount = forecastSales.SalesPrice;
                        }
                        break;
                    case ProjTransType::Revenue :
                        projForecastRevenue = buffer as ProjForecastRevenue;
                        if (_projBudgetLineType == ProjBudgetLineType::Revenue)
                        {
                            budgetAmount = projForecastRevenue.SalesPrice;
                        }
                        break;
                }
            }
        }

        void processCurrentPeriod()
        {
            fiscalCalendarYear = FiscalCalendarYear::findYearByCalendarDate(this.fiscalCalendarRecId(), _projTransDate);

            switch (projBudgetLine.ProjAllocationMethod)
            {
                case ProjAllocationMethod::Quarter:
                    while select RecId
                        from fiscalCalendarPeriod
                            where fiscalCalendarPeriod.FiscalCalendarYear == fiscalCalendarYear.RecId &&
                            fiscalCalendarPeriod.StartDate <= _projTransDate &&
                            fiscalCalendarPeriod.EndDate >= _projTransDate
                        join TotalAllocationAmount, ReductionAmount
                            from projBudgetAllocationLine
                            group by fiscalCalendarPeriod.FiscalCalendarYear, fiscalCalendarPeriod.Quarter, TotalAllocationAmount, ReductionAmount
                            where projBudgetAllocationLine.ProjBudgetLine == projBudgetLine.RecId &&
                                  projBudgetAllocationLine.FiscalCalendarYear == fiscalCalendarPeriod.FiscalCalendarYear &&
                                  projBudgetAllocationLine.Quarter == fiscalCalendarPeriod.Quarter
                    {
                        budgetAmount += projBudgetAllocationLine.TotalAllocationAmount;
                        consumedAmount += projBudgetAllocationLine.ReductionAmount;
                    }
                    
                    break;
                case ProjAllocationMethod::Periods:
                    select RecId
                        from fiscalCalendarPeriod
                            where fiscalCalendarPeriod.FiscalCalendarYear == fiscalCalendarYear.RecId &&
                            fiscalCalendarPeriod.StartDate <= _projTransDate &&
                            fiscalCalendarPeriod.EndDate >= _projTransDate
                        join TotalAllocationAmount, ReductionAmount
                            from projBudgetAllocationLine
                            where projBudgetAllocationLine.ProjBudgetLine == projBudgetLine.RecId &&
                                projBudgetAllocationLine.FiscalCalendarPeriod == fiscalCalendarPeriod.RecId;

                    if (projBudgetAllocationLine)
                    {
                        budgetAmount += projBudgetAllocationLine.TotalAllocationAmount;
                        consumedAmount += projBudgetAllocationLine.ReductionAmount;
                    }
                    break;
                case ProjAllocationMethod::Yearly:
                    select TotalAllocationAmount, ReductionAmount
                        from projBudgetAllocationLine
                        where projBudgetAllocationLine.ProjBudgetLine == projBudgetLine.RecId &&
                            projBudgetAllocationLine.FiscalCalendarYear == fiscalCalendarYear.RecId;

                    if (projBudgetAllocationLine)
                    {
                        budgetAmount += projBudgetAllocationLine.TotalAllocationAmount;
                        consumedAmount += projBudgetAllocationLine.ReductionAmount;
                    }
                    break;
            }
        }

        void processProjectToDate()
        {
            fiscalCalendarYear = FiscalCalendarYear::findYearByCalendarDate(this.fiscalCalendarRecId(), _projTransDate);
            switch (projBudgetLine.ProjAllocationMethod)
            {
                case ProjAllocationMethod::Quarter:
                    while select RecId
                        from fiscalCalendarPeriod
                            where fiscalCalendarPeriod.FiscalCalendarYear == fiscalCalendarYear.RecId &&
                            fiscalCalendarPeriod.StartDate <= _projTransDate
                        join TotalAllocationAmount, ReductionAmount
                            from projBudgetAllocationLine
                            group by fiscalCalendarPeriod.FiscalCalendarYear, fiscalCalendarPeriod.Quarter, TotalAllocationAmount, ReductionAmount
                            where projBudgetAllocationLine.ProjBudgetLine == projBudgetLine.RecId &&
                                  projBudgetAllocationLine.FiscalCalendarYear == fiscalCalendarPeriod.FiscalCalendarYear &&
                                  projBudgetAllocationLine.Quarter == fiscalCalendarPeriod.Quarter
                    {
                        budgetAmount += projBudgetAllocationLine.TotalAllocationAmount;
                        consumedAmount += projBudgetAllocationLine.ReductionAmount;
                    }
                    break;

                case ProjAllocationMethod::Periods:
                    while select RecId
                        from fiscalCalendarYear
                            where fiscalCalendarYear.FiscalCalendar == this.fiscalCalendarRecId()
                        join RecId
                        from fiscalCalendarPeriod
                            where fiscalCalendarPeriod.FiscalCalendarYear == fiscalCalendarYear.RecId &&
                            fiscalCalendarPeriod.StartDate <= _projTransDate
                        join TotalAllocationAmount, ReductionAmount
                            from projBudgetAllocationLine
                            where projBudgetAllocationLine.ProjBudgetLine == projBudgetLine.RecId &&
                                projBudgetAllocationLine.FiscalCalendarPeriod == fiscalCalendarPeriod.RecId
                    {
                        budgetAmount += projBudgetAllocationLine.TotalAllocationAmount;
                        consumedAmount += projBudgetAllocationLine.ReductionAmount;
                    }
                    break;

                case ProjAllocationMethod::Yearly:
                    while select RecId
                        from fiscalCalendarYear
                            where fiscalCalendarYear.FiscalCalendar == this.fiscalCalendarRecId() &&
                            fiscalCalendarYear.StartDate <= _projTransDate
                        join TotalAllocationAmount, ReductionAmount
                            from projBudgetAllocationLine
                            where projBudgetAllocationLine.ProjBudgetLine == projBudgetLine.RecId &&
                                projBudgetAllocationLine.FiscalCalendarYear == fiscalCalendarYear.RecId
                    {
                        budgetAmount += projBudgetAllocationLine.TotalAllocationAmount;
                        consumedAmount += projBudgetAllocationLine.ReductionAmount;
                    }
                    break;
            }
        }

        void processTotalYear()
        {
            fiscalCalendarYear = FiscalCalendarYear::findYearByCalendarDate(this.fiscalCalendarRecId(), _projTransDate);

            switch (projBudgetLine.ProjAllocationMethod)
            {
                case ProjAllocationMethod::Quarter:
                    while select RecId
                        from fiscalCalendarPeriod
                            where fiscalCalendarPeriod.FiscalCalendarYear == fiscalCalendarYear.RecId
                        join TotalAllocationAmount, ReductionAmount
                            from projBudgetAllocationLine
                            group by fiscalCalendarPeriod.FiscalCalendarYear, fiscalCalendarPeriod.Quarter, TotalAllocationAmount, ReductionAmount
                            where projBudgetAllocationLine.ProjBudgetLine == projBudgetLine.RecId &&
                                  projBudgetAllocationLine.FiscalCalendarYear == fiscalCalendarPeriod.FiscalCalendarYear &&
                                  projBudgetAllocationLine.Quarter == fiscalCalendarPeriod.Quarter
                    {
                        budgetAmount += projBudgetAllocationLine.TotalAllocationAmount;
                        consumedAmount += projBudgetAllocationLine.ReductionAmount;
                    }
                    break;
                case ProjAllocationMethod::Periods:
                    while select RecId
                        from fiscalCalendarPeriod
                            where fiscalCalendarPeriod.FiscalCalendarYear == fiscalCalendarYear.RecId
                        join TotalAllocationAmount, ReductionAmount
                            from projBudgetAllocationLine
                            where projBudgetAllocationLine.ProjBudgetLine == projBudgetLine.RecId &&
                                projBudgetAllocationLine.FiscalCalendarPeriod == fiscalCalendarPeriod.RecId
                    {
                        budgetAmount += projBudgetAllocationLine.TotalAllocationAmount;
                        consumedAmount += projBudgetAllocationLine.ReductionAmount;
                    }
                    break;

                case ProjAllocationMethod::Yearly:
                    while select TotalAllocationAmount, ReductionAmount
                            from projBudgetAllocationLine
                            where projBudgetAllocationLine.ProjBudgetLine == projBudgetLine.RecId &&
                                projBudgetAllocationLine.FiscalCalendarYear == fiscalCalendarYear.RecId
                    {
                        budgetAmount += projBudgetAllocationLine.TotalAllocationAmount;
                        consumedAmount += projBudgetAllocationLine.ReductionAmount;
                    }
                    break;
            }
        }

        void processYearToDate()
        {
            fiscalCalendarYear = FiscalCalendarYear::findYearByCalendarDate(this.fiscalCalendarRecId(), _projTransDate);

            switch (projBudgetLine.ProjAllocationMethod)
            {
                case ProjAllocationMethod::Quarter:
                    while select RecId
                        from fiscalCalendarPeriod
                            where fiscalCalendarPeriod.FiscalCalendarYear == fiscalCalendarYear.RecId &&
                            fiscalCalendarPeriod.StartDate <= _projTransDate
                        join TotalAllocationAmount, ReductionAmount
                            from projBudgetAllocationLine
                            group by fiscalCalendarPeriod.FiscalCalendarYear, fiscalCalendarPeriod.Quarter, TotalAllocationAmount, ReductionAmount
                            where projBudgetAllocationLine.ProjBudgetLine == projBudgetLine.RecId &&
                                  projBudgetAllocationLine.FiscalCalendarYear == fiscalCalendarPeriod.FiscalCalendarYear &&
                                  projBudgetAllocationLine.Quarter == fiscalCalendarPeriod.Quarter
                    {
                        budgetAmount += projBudgetAllocationLine.TotalAllocationAmount;
                        consumedAmount += projBudgetAllocationLine.ReductionAmount;
                    }
                    break;

                case ProjAllocationMethod::Periods:
                    while select RecId
                        from fiscalCalendarPeriod
                            where fiscalCalendarPeriod.FiscalCalendarYear == fiscalCalendarYear.RecId &&
                            fiscalCalendarPeriod.StartDate <= _projTransDate
                        join TotalAllocationAmount, ReductionAmount
                            from projBudgetAllocationLine
                            where projBudgetAllocationLine.ProjBudgetLine == projBudgetLine.RecId &&
                                projBudgetAllocationLine.FiscalCalendarPeriod == fiscalCalendarPeriod.RecId
                    {
                        budgetAmount += projBudgetAllocationLine.TotalAllocationAmount;
                        consumedAmount += projBudgetAllocationLine.ReductionAmount;
                    }
                    break;

                case ProjAllocationMethod::Yearly:
                    while select TotalAllocationAmount, ReductionAmount
                            from projBudgetAllocationLine
                            where projBudgetAllocationLine.ProjBudgetLine == projBudgetLine.RecId &&
                                projBudgetAllocationLine.FiscalCalendarYear == fiscalCalendarYear.RecId
                    {
                        budgetAmount += projBudgetAllocationLine.TotalAllocationAmount;
                        consumedAmount += projBudgetAllocationLine.ReductionAmount;
                    }
                    break;
            }
        }

        if (_activityNumber)
        {
            select ProjBudgetLineType, ProjAllocationMethod from projBudgetLine
                where   projBudgetLine.ProjId == _projId &&
                        projBudgetLine.ProjTransType == _transType &&
                        projBudgetLine.CategoryId == _projCategoryId &&
                        projBudgetLine.ActivityNumber == _activityNumber &&
                        projBudgetLine.ProjBudgetLineType == _projBudgetLineType;
        }

        if (!projBudgetLine)
        {
            select ProjBudgetLineType, ProjAllocationMethod from projBudgetLine
                where   projBudgetLine.ProjId == _projId &&
                        projBudgetLine.ProjTransType == _transType &&
                        projBudgetLine.CategoryId == _projCategoryId &&
                        projBudgetLine.ActivityNumber == '' &&
                        projBudgetLine.ProjBudgetLineType == _projBudgetLineType;
        }

        if (projBudgetLine)
        {
            switch (_budgetInterval)
            {
                case ProjBudgetInterval::TotalBudget:
                    processTotalBudget();
                    break;
                case ProjBudgetInterval::CurrentPeriod:
                    processCurrentPeriod();
                    break;
                case ProjBudgetInterval::ProjectToDate:
                    processProjectToDate();
                    break;
                case ProjBudgetInterval::TotalYear:
                    processTotalYear();
                    break;
                case ProjBudgetInterval::YearToDate:
                    processYearToDate();
                    break;
            }
        }
        budgetAmount = budgetAmount - consumedAmount;
        return budgetAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentPeriodBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains budget for the current transaction period.
    /// </summary>
    /// <param name="_projId">
    /// The project ID for which budget is to be obtained.
    /// </param>
    /// <param name="_budgetLineType">
    /// The budget type.
    /// </param>
    /// <param name="_projTransDate">
    /// The transaction date.
    /// </param>
    /// <param name="_projCategoryId">
    /// The category ID.
    /// </param>
    /// <param name="_activityNumber">
    /// A <c>activityNumber</c> specifying the activity.
    /// </param>
    /// <returns>
    /// A buffer of the <c>ProjBudgetAllocationLine</c> table.
    /// </returns>
    /// <remarks>
    /// The projet ID passed into this method can be of the alternate project instead of the original project.
    /// The project category ID will be empty if this method is called for on account type transactions.
    /// </remarks>
    private ProjBudgetAllocationLine getCurrentPeriodBudget(
        ProjId _projId,
        ProjBudgetLineType _budgetLineType,
        ProjTransDate _projTransDate,
        ProjCategoryId _projCategoryId,
        ProjActivityNumber _activityNumber)
    {
        ProjBudgetLine              projBudgetLine, projBudgetLineLoc;
        ProjBudgetAllocationLine    projBudgetAllocationLine, projBudgetAllocationLineLoc;
        FiscalCalendarYear          fiscalCalendarYear;
        FiscalCalendarPeriod        fiscalCalendarPeriod;

        fiscalCalendarYear = FiscalCalendarYear::findYearByCalendarDate(this.fiscalCalendarRecId(),_projTransDate);
        fiscalCalendarPeriod = this.getFiscalYearPeriod(_projTransDate);

        if ((fiscalCalendarYear || fiscalCalendarPeriod))
        {
            if (_activityNumber)
            {
                select firstonly projBudgetAllocationLine
                join RecId from  projBudgetLine
                    where   projBudgetAllocationLine.ProjBudgetLine == projBudgetLine.RecId &&
                            projBudgetLine.ProjId == _projId &&
                            projBudgetLine.CategoryId == _projCategoryId &&
                            projBudgetLine.ProjBudgetLineType == _budgetLineType &&
                            projBudgetLine.ActivityNumber == _activityNumber &&
                            ((projBudgetLine.ProjAllocationMethod == ProjAllocationMethod::Yearly && projBudgetAllocationLine.FiscalCalendarYear == fiscalCalendarYear.RecId) ||
                            (projBudgetLine.ProjAllocationMethod == ProjAllocationMethod::Periods && projBudgetAllocationLine.FiscalCalendarPeriod == fiscalCalendarPeriod.RecId) ||
                            (projBudgetLine.ProjAllocationMethod == ProjAllocationMethod::Quarter && projBudgetAllocationLine.FiscalCalendarYear == fiscalCalendarYear.RecId &&
                            projBudgetAllocationLine.Quarter == fiscalCalendarPeriod.Quarter));
            }

            if (!projBudgetAllocationLine.RecId)
            {
                select firstonly projBudgetAllocationLine
                join RecId from  projBudgetLine
                    where   projBudgetAllocationLine.ProjBudgetLine == projBudgetLine.RecId &&
                            projBudgetLine.ProjId == _projId &&
                            projBudgetLine.CategoryId == _projCategoryId &&
                            projBudgetLine.ActivityNumber == '' &&
                            projBudgetLine.ProjBudgetLineType == _budgetLineType &&
                            ((projBudgetLine.ProjAllocationMethod == ProjAllocationMethod::Yearly && projBudgetAllocationLine.FiscalCalendarYear == fiscalCalendarYear.RecId) ||
                            (projBudgetLine.ProjAllocationMethod == ProjAllocationMethod::Periods && projBudgetAllocationLine.FiscalCalendarPeriod == fiscalCalendarPeriod.RecId) ||
                            (projBudgetLine.ProjAllocationMethod == ProjAllocationMethod::Quarter && projBudgetAllocationLine.FiscalCalendarYear == fiscalCalendarYear.RecId &&
                            projBudgetAllocationLine.Quarter == fiscalCalendarPeriod.Quarter));
            }
        }

        select firstonly projBudgetAllocationLineLoc
            join RecId, ProjAllocationMethod from  projBudgetLineLoc
                where projBudgetAllocationLineLoc.ProjBudgetLine == projBudgetLineLoc.RecId &&
                      projBudgetLineLoc.ProjId == _projId &&
                      projBudgetLineLoc.CategoryId == _projCategoryId &&
                      projBudgetLineLoc.ProjBudgetLineType == _budgetLineType &&
                      projBudgetLineLoc.ActivityNumber == _activityNumber;

        if (projBudgetLineLoc.ProjAllocationMethod != ProjAllocationMethod::Periods
            || FeatureStateProvider::isFeatureEnabled(ProjBudgetByPeriodAllocationFeature::instance()))
        {
            if (FeatureStateProvider::isFeatureEnabled(ProjBudgetFutureCalendarYearAllocationFeature::instance()))
            {
                FiscalCalendarPeriod fiscalCalendarPeriodLoc;
                if (!projBudgetAllocationLine)
                {
                    select firstonly projBudgetAllocationLine order by Quarter desc
                        join RecId from projBudgetLine
                            where projBudgetAllocationLine.ProjBudgetLine == projBudgetLine.RecId
                                && projBudgetLine.ProjId == _projId
                                && projBudgetLine.CategoryId == _projCategoryId
                                && projBudgetLine.ProjBudgetLineType == _budgetLineType
                                && projBudgetLine.ActivityNumber == _activityNumber
                        outer join RecId from fiscalCalendarPeriodLoc order by Month desc
                            where projBudgetAllocationLine.FiscalCalendarPeriod == fiscalCalendarPeriodLoc.RecId;
                }

                if (!projBudgetAllocationLine)
                {
                    select firstonly projBudgetAllocationLine order by Quarter desc
                        join RecId from projBudgetLine
                            where projBudgetAllocationLine.ProjBudgetLine == projBudgetLine.RecId
                                && projBudgetLine.ProjId == _projId
                                && projBudgetLine.CategoryId == _projCategoryId
                                && projBudgetLine.ProjBudgetLineType == _budgetLineType
                                && projBudgetLine.ActivityNumber == ''
                        outer join RecId from fiscalCalendarPeriodLoc order by Month desc
                            where projBudgetAllocationLine.FiscalCalendarPeriod == fiscalCalendarPeriodLoc.RecId;
                }
            }
            else
            {
                if (!projBudgetAllocationLine)
                {
                    select firstonly projBudgetAllocationLine
                        join RecId from  projBudgetLine
                            where   projBudgetAllocationLine.ProjBudgetLine == projBudgetLine.RecId &&
                                projBudgetLine.ProjId == _projId &&
                                projBudgetLine.CategoryId == _projCategoryId &&
                                projBudgetLine.ProjBudgetLineType == _budgetLineType &&
                                projBudgetLine.ActivityNumber == _activityNumber;
                }

                if (!projBudgetAllocationLine)
                {
                    select firstonly projBudgetAllocationLine
                        join RecId from  projBudgetLine
                            where   projBudgetAllocationLine.ProjBudgetLine == projBudgetLine.RecId &&
                                projBudgetLine.ProjId == _projId &&
                                projBudgetLine.CategoryId == _projCategoryId &&
                                projBudgetLine.ProjBudgetLineType == _budgetLineType &&
                                projBudgetLine.ActivityNumber == '';
                }
            }
        }

        return projBudgetAllocationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalYearPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Obtains the period of a fiscal year.
    /// </summary>
    /// <param name="_transDate">
    ///    The transaction date.
    /// </param>
    /// <returns>
    ///    The period of the specified fiscal calendar year.
    /// </returns>
    private FiscalCalendarPeriod getFiscalYearPeriod(TransDate _transDate)
    {
        return LedgerFiscalCalendar::findPeriodByPeriodCodeDate(this.fiscalCalendarRecId(), _transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOverBudgetAction</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves over-budget action.
    /// </summary>
    /// <param name="_projId">
    ///    The project ID.
    /// </param>
    /// <returns>
    ///    The overrun option of the project.
    /// </returns>
    /// <remarks>
    ///    The specified project ID can be from the alternate project instead of the original project.An
    ///    optimized overrun option will be returned from this method if the user belongs to multiple user
    ///    groups.
    /// </remarks>
    private ProjBudgetOverrunOption getOverBudgetAction(ProjId _projId)
    {
        ProjBudgetUserGroupOption   projBudgetUserGroupOption;
        ProjBudgetOverrunOption     projBudgetOverrunOption = ProjBudgetOverrunOption::DisallowOverruns;
        UserGroupList               userGroupList;
        boolean                     foundProjBudgetOverrunAction;

        while select UserId from userGroupList
            where userGroupList.UserId == curUserId()
            join projBudgetUserGroupOption
                where projBudgetUserGroupOption.UserGroupInfo == userGroupList.GroupId &&
                    projBudgetUserGroupOption.ProjOrProjGroup == _projId
        {
            foundProjBudgetOverrunAction = true;
            if (projBudgetUserGroupOption.ProjBudgetOverrunOption == ProjBudgetOverrunOption::AllowOverruns)
            {
                projBudgetOverrunOption = ProjBudgetOverrunOption::AllowOverruns;
                break;
            }
            else if (projBudgetOverrunOption != ProjBudgetOverrunOption::AllowOverruns && projBudgetUserGroupOption.ProjBudgetOverrunOption == ProjBudgetOverrunOption::WarnOfOverruns)
            {
                projBudgetOverrunOption = ProjBudgetOverrunOption::WarnOfOverruns;
            }
            else if (projBudgetOverrunOption != ProjBudgetOverrunOption::AllowOverruns && projBudgetOverrunOption != ProjBudgetOverrunOption::WarnOfOverruns)
            {
                projBudgetOverrunOption = projBudgetUserGroupOption.ProjBudgetOverrunOption;
            }
        }

        if (!foundProjBudgetOverrunAction)
        {
            while select UserId from userGroupList
                where userGroupList.UserId == curUserId()
                join UserGroupInfo, ProjOrProjGroup, ProjBudgetOverrunOption from projBudgetUserGroupOption
                    where projBudgetUserGroupOption.UserGroupInfo ==  userGroupList.GroupId &&
                        projBudgetUserGroupOption.ProjOrProjGroup == ProjTable::find(_projId).ProjGroupId
            {
                foundProjBudgetOverrunAction = true;
                if (projBudgetUserGroupOption.ProjBudgetOverrunOption == ProjBudgetOverrunOption::AllowOverruns)
                {
                    projBudgetOverrunOption = ProjBudgetOverrunOption::AllowOverruns;
                    break;
                }
                else if (projBudgetOverrunOption != ProjBudgetOverrunOption::AllowOverruns && projBudgetUserGroupOption.ProjBudgetOverrunOption == ProjBudgetOverrunOption::WarnOfOverruns)
                {
                    projBudgetOverrunOption = ProjBudgetOverrunOption::WarnOfOverruns;
                }
                else if (projBudgetOverrunOption != ProjBudgetOverrunOption::AllowOverruns && projBudgetOverrunOption != ProjBudgetOverrunOption::WarnOfOverruns)
                {
                    projBudgetOverrunOption = projBudgetUserGroupOption.ProjBudgetOverrunOption;
                }
            }
        }

        if (!foundProjBudgetOverrunAction)
        {
            while select UserId from userGroupList
                where userGroupList.UserId == curUserId()
                join UserGroupInfo, ProjOrProjGroup, ProjBudgetOverrunOption from projBudgetUserGroupOption
                    where projBudgetUserGroupOption.UserGroupInfo ==  userGroupList.GroupId &&
                        projBudgetUserGroupOption.ProjBudgetValidFor == TableGroupAll::All
            {
                foundProjBudgetOverrunAction = true;
                if (projBudgetUserGroupOption.ProjBudgetOverrunOption == ProjBudgetOverrunOption::AllowOverruns)
                {
                    projBudgetOverrunOption = ProjBudgetOverrunOption::AllowOverruns;
                    break;
                }
                else if (projBudgetOverrunOption != ProjBudgetOverrunOption::AllowOverruns && projBudgetUserGroupOption.ProjBudgetOverrunOption == ProjBudgetOverrunOption::WarnOfOverruns)
                {
                    projBudgetOverrunOption = ProjBudgetOverrunOption::WarnOfOverruns;
                }
                else if (projBudgetOverrunOption != ProjBudgetOverrunOption::AllowOverruns && projBudgetOverrunOption != ProjBudgetOverrunOption::WarnOfOverruns)
                {
                    projBudgetOverrunOption = projBudgetUserGroupOption.ProjBudgetOverrunOption;
                }
            }
        }

        if (!foundProjBudgetOverrunAction)
        {
            projBudgetOverrunOption = ProjTable::find(_projId).ProjBudgetOverrunOption;
        }

        if (this.parmAllowOverBudget())
        {
            projBudgetOverrunOption = ProjBudgetOverrunOption::AllowOverruns;
        }

        return projBudgetOverrunOption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalAndRemainingBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified forecast table.
    /// </summary>
    /// <param name="_projId">
    /// The project ID.
    /// </param>
    /// <param name="_categoryId">
    /// The category ID.
    /// </param>
    /// <param name="_activityNumber">
    /// A <c>activityNumber</c> specifying the activity.
    /// </param>
    /// <returns>
    /// The forecast table.
    /// </returns>
    protected container getTotalAndRemainingBudget(ProjId _projId, CategoryId _categoryId, ProjActivityNumber _activityNumber)
    {
        ProjBudget                  projBudget;
        ProjBudgetLine              projBudgetLine;
        ProjForecastEmpl            projForecastEmpl;
        ProjForecastCost            projForecastCost;
        ProjForecastRevenue         projForecastRevenue;
        ForecastSales               forecastSales;
        CostAmount                  costAmountTotal;
        SalesAmount                 salesAmountTotal;
        CostAmount                  costAmountRemaining;
        SalesAmount                 salesAmountRemaining;

        if (_activityNumber)
        {
            select RecId, OriginalBudgetForecastModel, RemainingBudgetForecastModel
            from projBudget
                join RecId, ProjBudget, CategoryId, ProjTransType, ActivityNumber, ProjId
            from  projBudgetLine
                where   projBudgetLine.ProjBudget == projBudget.RecId &&
                        projBudgetLine.ProjId == _projId &&
                        projBudgetLine.CategoryId == _categoryId &&
                        projBudgetLine.ActivityNumber == _activityNumber;
        }

        if (!projBudgetLine.RecId)
        {
            select RecId, OriginalBudgetForecastModel, RemainingBudgetForecastModel
            from projBudget
                join RecId, ProjBudget, CategoryId, ProjTransType, ActivityNumber, ProjId
                from  projBudgetLine
                where   projBudgetLine.ProjBudget == projBudget.RecId &&
                        projBudgetLine.ProjId == _projId &&
                        projBudgetLine.CategoryId == _categoryId &&
                        projBudgetLine.ActivityNumber == '';
        }

        switch (projBudgetLine.ProjTransType)
        {
            case ProjTransType::Hour :

                select sum(CostPrice), sum(SalesPrice)
                from  projForecastEmpl
                where projForecastEmpl.ProjId == projBudgetLine.ProjId
                && projForecastEmpl.CategoryId == projBudgetLine.CategoryId
                && projForecastEmpl.ActivityNumber == projBudgetLine.ActivityNumber
                && projForecastEmpl.ModelId == projBudget.OriginalBudgetForecastModel;

                costAmountTotal = projForecastEmpl.CostPrice;
                salesAmountTotal = projForecastEmpl.SalesPrice;

                select sum(CostPrice), sum(SalesPrice)
                from  projForecastEmpl
                where projForecastEmpl.ProjId == projBudgetLine.ProjId
                && projForecastEmpl.CategoryId == projBudgetLine.CategoryId
                && projForecastEmpl.ActivityNumber == projBudgetLine.ActivityNumber
                && projForecastEmpl.ModelId == projBudget.RemainingBudgetForecastModel;

                costAmountRemaining = projForecastEmpl.CostPrice;
                salesAmountRemaining = projForecastEmpl.SalesPrice;

                break;

            case ProjTransType::Cost :

                select sum(CostPrice) , sum(SalesPrice)
                    from projForecastCost
                    where projForecastCost.ProjId == projBudgetLine.ProjId
                    && projForecastCost.CategoryId == projBudgetLine.CategoryId
                    && projForecastCost.ActivityNumber == projBudgetLine.ActivityNumber
                    && projForecastCost.ModelId == projBudget.OriginalBudgetForecastModel;

                costAmountTotal = projForecastCost.CostPrice;
                salesAmountTotal = projForecastCost.SalesPrice;

                select sum(CostPrice) , sum(SalesPrice)
                    from projForecastCost
                    where projForecastCost.ProjId == projBudgetLine.ProjId
                    && projForecastCost.CategoryId == projBudgetLine.CategoryId
                    && projForecastCost.ActivityNumber == projBudgetLine.ActivityNumber
                    && projForecastCost.ModelId == projBudget.RemainingBudgetForecastModel;

                costAmountRemaining = projForecastCost.CostPrice;
                salesAmountRemaining = projForecastCost.SalesPrice;
                break;

            case ProjTransType::Item :
                select sum(CostPrice), sum(SalesPrice)
                    from  forecastSales
                    where forecastSales.ProjId == projBudgetLine.ProjId
                    && forecastSales.ProjCategoryId == projBudgetLine.CategoryId
                    && forecastSales.ActivityNumber == projBudgetLine.ActivityNumber
                    && forecastSales.ModelId == projBudget.OriginalBudgetForecastModel;

                costAmountTotal = forecastSales.CostPrice;
                salesAmountTotal = forecastSales.SalesPrice;

                select sum(CostPrice), sum(SalesPrice)
                    from  forecastSales
                    where forecastSales.ProjId == projBudgetLine.ProjId
                    && forecastSales.ProjCategoryId == projBudgetLine.CategoryId
                    && forecastSales.ActivityNumber == projBudgetLine.ActivityNumber
                    && forecastSales.ModelId == projBudget.RemainingBudgetForecastModel;

                costAmountRemaining = forecastSales.CostPrice;
                salesAmountRemaining = forecastSales.SalesPrice;
                break;

            case ProjTransType::Revenue :

                select sum(SalesPrice)
                    from projForecastRevenue
                    where projForecastRevenue.ProjId == projBudgetLine.ProjId
                    && projForecastRevenue.CategoryId == projBudgetLine.CategoryId
                    && projForecastRevenue.ModelId == projBudget.OriginalBudgetForecastModel;

                salesAmountTotal = projForecastRevenue.SalesPrice;

                select sum(SalesPrice)
                    from projForecastRevenue
                    where projForecastRevenue.ProjId == projBudgetLine.ProjId
                    && projForecastRevenue.CategoryId == projBudgetLine.CategoryId
                    && projForecastRevenue.ModelId == projBudget.RemainingBudgetForecastModel;

                salesAmountRemaining = projForecastRevenue.SalesPrice;
                break;
        }

        return [costAmountTotal, salesAmountTotal, costAmountRemaining, salesAmountRemaining];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalTransactionBudget</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Obtains the total budget of a transaction based on a project ID, a category ID, and transaction
    ///    date.
    /// </summary>
    /// <param name="_projBudgetTransaction">
    ///    A <c>ProjBudgetTransaction</c> class object.
    /// </param>
    /// <returns>
    ///    A map that contains the total budget transactions.
    /// </returns>
    private Map getTotalTransactionBudget(ProjBudgetTransaction _projBudgetTransaction)
    {
        Map                         map;
        str                         keyValue;
        AmountMST                   costAmountTemp;
        AmountMST                   salesAmountTemp;
        AmountMST                   costAmountCurLine;
        AmountMST                   salesAmountCurLine;
        TransDate                   transDate;
        TransDate                   transDateTemp;
        ProjId                      projIdForBudgetReduction;
        CategoryId                  categoryId;
        ProjActivityNumber          activityNumber;
        SetEnumerator               setEnumerator;
        ProjBudgetTransactionLine   budgetTransactionLine;
        ProjBudgetInterval          projBudgetInterval;
        TransDate                   projDate;
        ProjBudgetaryControlOn      projBudgetaryControlOn;
        ProjTransType               projTransType;
        ProjBudgetReductionHistory  projBudgetReductionHistory;
        InventQty                   qty;
        InventQty                   qtyTemp;
        ProjLinePropertyId          linePropertyId;
        ProjTable                   projTable;

        map = new Map(Types::String, Types::Container);
        setEnumerator = _projBudgetTransaction.getBudgetTransactionLinesEnumerator();

        while (setEnumerator.moveNext())
        {
            budgetTransactionLine = setEnumerator.current();
            [keyValue,
            transDate,
            projBudgetInterval,
            projDate,
            projIdForBudgetReduction,
            projBudgetaryControlOn,
            projTransType] = this.keyValue(budgetTransactionLine);

            projTable = ProjTable::find(projIdForBudgetReduction);
            RefRecId sourceDocumentLine = budgetTransactionLine.parmSourceDocumentLine();

            if (this.mustProjectTransactionBudget(projTable))
            {
                linePropertyId = budgetTransactionLine.linePropertyId();
                costAmountCurLine  = BudgetTransactionManager::calculateTransAmountToAccountingAmount(budgetTransactionLine.costAmount(), budgetTransactionLine.costAmountCurrencyCode(), budgetTransactionLine.transDate()) ;
                salesAmountCurLine = BudgetTransactionManager::calculateTransAmountToAccountingAmount(budgetTransactionLine.salesAmount(), budgetTransactionLine.salesAmountCurrencyCode(), budgetTransactionLine.transDate()) ;
                qty = budgetTransactionLine.parmQty();

                if (forValidationOnly)
                {
                    select RecId from projBudgetReductionHistory where projBudgetReductionHistory.ProjTransId == budgetTransactionLine.transId();
                    if (projBudgetReductionHistory)
                    {
                        costAmountCurLine -= projBudgetReductionHistory.CostAmountReduced;
                        salesAmountCurLine -= projBudgetReductionHistory.SalesAmountReduced;
                    }
                }

                if (map.exists(keyValue))
                {
                    [costAmountTemp,
                        salesAmountTemp,
                        projIdForBudgetReduction,
                        categoryId,
                        activityNumber,
                        transDateTemp,
                        projBudgetInterval,
                        projDate,
                        projBudgetaryControlOn,
                        projTransType,
                        qtyTemp
                        ,linePropertyId,
                        sourceDocumentLine] = map.lookup(keyValue);
                    map.remove(keyValue);
                    costAmountTemp += costAmountCurLine;
                    salesAmountTemp += salesAmountCurLine;
                    qtyTemp += qty;
                    transDate = (transDateTemp < transDate ? transDate : transDateTemp);
                    map.insert(keyValue,
                    [costAmountTemp,
                        salesAmountTemp,
                        projIdForBudgetReduction,
                        categoryId,
                        activityNumber,
                        transDate,
                        projBudgetInterval,
                        projDate,
                        projBudgetaryControlOn,
                        projTransType,
                        qtyTemp
                        ,linePropertyId,
                        sourceDocumentLine]);
                }
                else
                {
                    costAmountTemp = costAmountCurLine;
                    salesAmountTemp = salesAmountCurLine;
                    map.insert(keyValue,
                        [costAmountTemp,
                        salesAmountTemp,
                        projIdForBudgetReduction,
                        budgetTransactionLine.categoryId(),
                        budgetTransactionLine.activityNumber(),
                        transDate,
                        projBudgetInterval,
                        projDate,
                        projBudgetaryControlOn,
                        projTransType,
                        qty
                        ,linePropertyId,
                        sourceDocumentLine]);
                }
            }
        }
        return map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustProjectTransactionBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether budget transaction for project is needed.
    /// </summary>
    /// <param name = "_projTable">A project table buffer</param>
    /// <returns>true if budget transaction for project is needed; otherwise, false</returns>
    protected boolean mustProjectTransactionBudget(ProjTable _projTable)
    {
        return _projTable.UseBudgeting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>increaseBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Increases cost and sales amounts on the budget.
    /// </summary>
    /// <param name="_costAmount">
    /// The cost amount to be increased.
    /// </param>
    /// <param name="_salesAmount">
    /// The sales amount to be increased.
    /// </param>
    /// <param name="_projTransType">
    ///  The transaction type.
    /// </param>
    /// <param name="_periodIdCost">
    /// The record ID of the <c>ProjBudgetAllocationLine</c> table buffer.
    /// </param>
    /// <param name="_periodIdSales">
    /// The record ID of the <c>ProjBudgetAllocationLine</c> table buffer.
    /// </param>
    /// <param name="_projId">
    /// The project ID on which budget is updated.
    /// </param>
    /// <param name="_projCategoryId">
    /// The category ID.
    /// </param>
    /// <param name="_transId">
    /// The transaction ID of current transaction.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date.
    /// </param>
    /// <param name="_projBudgetaryControlOn">
    /// A <c>ProjBudgetaryControlOn</c> enumeration value.
    /// </param>
    /// <param name="_activityNumber">
    /// A <c>activityNumber</c> specifying the activity.
    /// </param>
    /// <param name="_sourceDocumentLine">
    /// The ID of source document line; optional.
    /// </param>
    private void increaseBudget(
        CostAmount _costAmount,
        SalesAmount _salesAmount,
        ProjTransType _projTransType,
        RefRecId _periodIdCost,
        RefRecId _periodIdSales,
        ProjId _projId,
        ProjCategoryId _projCategoryId,
        ProjTransIdBase _transId,
        TransDate _transDate,
        ProjBudgetaryControlOn _projBudgetaryControlOn,
        ProjActivityNumber _activityNumber,
        RefRecId _sourceDocumentLine = 0
    )
    {
        ProjForecastEmpl                projForecastEmpl;
        ProjForecastCost                projForecastCost;
        ProjForecastRevenue             projForecastRevenue;
        ForecastSales                   forecastSales;
        Common                          buffer;
        CostAmount                      costAmount;
        SalesAmount                     salesAmount;
        ProjBudgetReductionHistory      projBudgetReductionHistory;
        ProjBudgetAllocationLine        projBudgetAllocationLine;
        boolean                         updateHistory;

        [costAmount, salesAmount] =this.negativeTransValidatedAmounts( _costAmount,
                                        _salesAmount,
                                        _projId,
                                        _projCategoryId,
                                        _projBudgetaryControlOn,
                                        _activityNumber,
                                        _sourceDocumentLine
                                        );

        if (_periodIdCost || _periodIdSales)
        {
            buffer = ProjBudgetReductionHistory::findForecastTable((_periodIdCost)?_periodIdCost:_periodIdSales);
        }
        else
        {
            buffer = ProjBudgetReductionHistory::findForecastByProjAndCatId(_projId, _projCategoryId, _activityNumber);
        }

        if (buffer)
        {
            buffer.selectForUpdate(true);

            switch (_projTransType)
            {
                case ProjTransType::Hour :
                    projForecastEmpl = buffer as ProjForecastEmpl;
                    projForecastEmpl.SalesPrice += salesAmount;
                    projForecastEmpl.CostPrice += costAmount;
                    projForecastEmpl.update();
                    break;
                case ProjTransType::Cost :
                    projForecastCost = buffer as ProjForecastCost;
                    projForecastCost.SalesPrice += salesAmount;
                    projForecastCost.CostPrice += costAmount;
                    projForecastCost.update();
                    break;
                case ProjTransType::Item :
                    forecastSales = buffer as ForecastSales;
                    forecastSales.SalesPrice += salesAmount;
                    forecastSales.CostPrice += costAmount;
                    forecastSales.Amount = forecastSales.calcLineAmount();
                    forecastSales.update();
                    break;
                case ProjTransType::Revenue :
                    projForecastRevenue = buffer as ProjForecastRevenue;
                    projForecastRevenue.SalesPrice += salesAmount;
                    projForecastRevenue.update();
                    break;
            }

            if (_periodIdCost && costAmount != 0)
            {
                this.updateBudgetAllocationPeriod(_periodIdCost, costAmount);
            }

            if (_periodIdSales && salesAmount != 0)
            {
                this.updateBudgetAllocationPeriod(_periodIdSales, salesAmount);
            }

            select forupdate projBudgetReductionHistory where projBudgetReductionHistory.ProjTransId == _transId;

            if (costAmount != 0 && !_periodIdCost)
            {
                if (_projBudgetaryControlOn == ProjBudgetaryControlOn::CostsOnly || _projBudgetaryControlOn == ProjBudgetaryControlOn::RevenuesAndCosts)
                {
                    projBudgetAllocationLine = this.getCurrentPeriodBudget(_projId, ProjBudgetLineType::Cost, _transDate, _projCategoryId, _activityNumber);

                    if (projBudgetAllocationLine)
                    {
                        projBudgetAllocationLine.selectForUpdate(true);
                        projBudgetAllocationLine.ReductionAmount -= costAmount;
                        projBudgetAllocationLine.update();
                        updateHistory = true;

                        if (projBudgetReductionHistory.RecId && projBudgetReductionHistory.ProjBudgetAllocationLineIdCost && projBudgetReductionHistory.ProjBudgetAllocationLineIdCost != projBudgetAllocationLine.RecId)
                        {
                            ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(classStr(ProjBudgetTransactionManager));
                            
                            logger.logError(strFmt(CostBudgetAllocatioLoneNotMatchingMessage,
                                ProjOpsFinancialsInstrumentationActivites::ProjBudgetAllocationLineCost,
                                'ProjBudgetTransactionManager.increaseBudget()',
                                projBudgetReductionHistory.RecId,
                                projBudgetReductionHistory.ProjBudgetAllocationLineIdCost,
                                projBudgetAllocationLine.RecId));

                            throw error("@Proj:ProjBudgetAllocationLineCostError");
                        }

                        if (!projBudgetReductionHistory.RecId || !projBudgetReductionHistory.ProjBudgetAllocationLineIdCost)
                        {
                            projBudgetReductionHistory.ProjBudgetAllocationLineIdCost = projBudgetAllocationLine.RecId;
                        }
                    }
                }
                else
                {
                    costAmount = 0;
                }
            }

            if (salesAmount !=0 && !_periodIdSales)
            {
                if (_projBudgetaryControlOn == ProjBudgetaryControlOn::RevenuesOnly || _projBudgetaryControlOn == ProjBudgetaryControlOn::RevenuesAndCosts)
                {
                    projBudgetAllocationLine = this.getCurrentPeriodBudget(_projId, ProjBudgetLineType::Revenue, _transDate, _projCategoryId, _activityNumber);

                    if (projBudgetAllocationLine)
                    {
                        projBudgetAllocationLine.selectForUpdate(true);
                        projBudgetAllocationLine.ReductionAmount -= salesAmount;
                        projBudgetAllocationLine.update();
                        updateHistory = true;

                        if (projBudgetReductionHistory.RecId && projBudgetReductionHistory.ProjBudgetAllocationLineIdSales && projBudgetReductionHistory.ProjBudgetAllocationLineIdSales != projBudgetAllocationLine.RecId)
                        {
                            ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(classStr(ProjBudgetTransactionManager));
                            
                            logger.logError(strFmt(SalesBudgetAllocatioLoneNotMatchingMessage,
                                ProjOpsFinancialsInstrumentationActivites::ProjBudgetAllocationLineSales,
                                'ProjBudgetTransactionManager.increaseBudget()',
                                projBudgetReductionHistory.RecId,
                                projBudgetReductionHistory.ProjBudgetAllocationLineIdSales,
                                projBudgetAllocationLine.RecId));
                                    
                            throw error("@Proj:ProjBudgetAllocationLineSaleError");
                        }

                        if (!projBudgetReductionHistory.RecId || !projBudgetReductionHistory.ProjBudgetAllocationLineIdSales)
                        {
                            projBudgetReductionHistory.ProjBudgetAllocationLineIdSales = projBudgetAllocationLine.RecId;
                        }
                    }
                }
                else
                {
                    salesAmount = 0;
                }
            }

            if (updateHistory)
            {
                NoYes insertRecord = NoYes::No;

                if (projBudgetReductionHistory.RecId)
                {
                    projBudgetReductionHistory.CostAmountReduced = projBudgetReductionHistory.CostAmountReduced - costAmount;
                    projBudgetReductionHistory.SalesAmountReduced = projBudgetReductionHistory.SalesAmountReduced - salesAmount;
                    projBudgetReductionHistory.update();
                }
                else
                {
                    projBudgetReductionHistory.ProjTransId = _transId;
                    projBudgetReductionHistory.ProjTransType = _projTransType;
                    projBudgetReductionHistory.ProjIdOrig = _projId;
                    projBudgetReductionHistory.CostAmountReduced = -costAmount;
                    projBudgetReductionHistory.SalesAmountReduced = -salesAmount;
                    projBudgetReductionHistory.insert();
                    insertRecord = NoYes::Yes;
                }

                if ((_projBudgetaryControlOn == ProjBudgetaryControlOn::CostsOnly
                        && !projBudgetReductionHistory.ProjBudgetAllocationLineIdCost)
                    || (_projBudgetaryControlOn == ProjBudgetaryControlOn::RevenuesOnly
                        && !projBudgetReductionHistory.ProjBudgetAllocationLineIdSales)
                    || (!projBudgetReductionHistory.ProjBudgetAllocationLineIdCost
                        && !projBudgetReductionHistory.ProjBudgetAllocationLineIdSales))
                {
                    ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(classStr(ProjBudgetTransactionManager));
                    
                    logger.logError(strFmt(BudgetAllocationLineMissing,
                        ProjOpsFinancialsInstrumentationActivites::ProjBudgetAllocationLineMissing,
                        'ProjBudgetTransactionManager.increaseBudget()',
                        enum2Symbol(enumNum(NoYes), insertRecord),
                        enum2Symbol(enumNum(ProjBudgetaryControlOn), _projBudgetaryControlOn),
                        projBudgetReductionHistory.RecId,
                        projBudgetReductionHistory.ProjBudgetAllocationLineIdCost,
                        projBudgetReductionHistory.ProjBudgetAllocationLineIdSales));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBudgetaryControlValid</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a budgetary control is valid.
    /// </summary>
    /// <param name="_projTransType">
    ///    The transaction type of the project.
    /// </param>
    /// <param name="_projBudgetaryControlOn">
    ///    The budgetary control.
    /// </param>
    /// <returns>
    ///    true if the budgetary control is valid; otherwise, false.
    /// </returns>
    private boolean isBudgetaryControlValid(ProjTransType _projTransType, ProjBudgetaryControlOn _projBudgetaryControlOn)
    {
        boolean ret;

        if (_projTransType == ProjTransType::Revenue && _projBudgetaryControlOn == ProjBudgetaryControlOn::CostsOnly)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBudgetDefined</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if budget is defined for the project.
    /// </summary>
    /// <param name="_projId">
    /// The project ID for which budget is to be obtained.
    /// </param>
    /// <param name="_projCategoryId">
    /// The category ID.
    /// </param>
    /// <param name="_projBudgetaryControlOn">
    /// A <c>ProjBudgetaryControlOn</c> enumeration value.
    /// </param>
    /// <param name="_activityNumber">
    /// The activity number of tha transaction.
    /// </param>
    /// <returns>
    /// true if budget is defined; otherwise, false.
    /// </returns>
    private boolean isBudgetDefined(ProjId _projId, ProjCategoryId _projCategoryId, ProjBudgetaryControlOn _projBudgetaryControlOn, ProjActivityNumber _activityNumber)
    {
        boolean         ret;
        ProjTable       projTable;

        boolean budgetExist(ProjBudgetLineType projBudgetLineType)
        {
            ProjBudget          projBudget;
            ProjBudgetLine      projBudgetLine;

            boolean     chkBudget;

            if (_activityNumber)
            {
                select RecId from projBudget
                exists join projBudgetLine
                    where projBudgetLine.ProjBudget == projBudget.RecId &&
                          projBudgetLine.ProjId == _projId &&
                          projBudgetLine.CategoryId == _projCategoryId &&
                          projBudgetLine.ActivityNumber == _activityNumber &&
                          projBudget.BudgetState != ProjBudgetState::Created &&
                          projBudgetLine.ProjBudgetLineType == projBudgetLineType;
            }

            if (!projBudget)
            {
                select RecId from projBudget
                exists join projBudgetLine
                    where projBudgetLine.ProjBudget == projBudget.RecId &&
                          projBudgetLine.ProjId == _projId &&
                          projBudgetLine.CategoryId == _projCategoryId &&
                          projBudgetLine.ActivityNumber == '' &&
                          projBudget.BudgetState != ProjBudgetState::Created &&
                          projBudgetLine.ProjBudgetLineType == projBudgetLineType;
            }

            if (projBudget.RecId)
            {
                chkBudget = true;
            }
            return chkBudget;
        }

        projTable = ProjTable::find(_projId);

        if (projTable)
        {
            switch (_projBudgetaryControlOn)
            {
                case ProjBudgetaryControlOn::CostsOnly:
                    ret = budgetExist(ProjBudgetLineType::Cost);
                    break;
                case ProjBudgetaryControlOn::RevenuesOnly:
                    ret = budgetExist(ProjBudgetLineType::Revenue);
                    break;
                case ProjBudgetaryControlOn::RevenuesAndCosts:
                    ret = budgetExist(ProjBudgetLineType::Cost) || budgetExist(ProjBudgetLineType::Revenue);
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayMessage</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Displays message for project budget check results.
    /// </summary>
    /// <param name = "_message">
    ///     The message to display.
    /// </param>
    /// <param name = "_projBudgetCheckResult">
    ///     The project budget check values.
    /// </param>
    protected void displayMessage(ProjBudgetCheckErrorDescription _message, ProjBudgetCheckResult _projBudgetCheckResult)
    {
        if (!this.parmSupressMessages() && _message != '')
        {
            switch (_projBudgetCheckResult)
            {
                case ProjBudgetCheckResult::Failed:
                    error(_message);
                    break;
                case ProjBudgetCheckResult::PassedWithWarnings:
                    warning(_message);
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostMessageForDisallowOverruns</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets project budget check cost message for disallow overruns.
    /// </summary>
    /// <param name = "_projId">
    ///     The project ID for message.
    /// </param>
    /// <param name = "_projCategoryId">
    ///     The category ID.
    /// </param>
    /// <param name = "_overBudgetedCostAmount">
    ///     The over-budgeted cost amount.
    /// </param>
    /// <param name = "_projActivityNumber">
    ///     The activity number.
    /// </param>
    /// <returns>
    ///     The error description.
    /// </returns>
    [Wrappable(true)]
    protected final ProjBudgetCheckErrorDescription getCostMessageForDisallowOverruns(
        ProjId _projId,
        ProjCategoryId _projCategoryId,
        AmountMST _overBudgetedCostAmount,
        ProjActivityNumber  _projActivityNumber)
    {
        ProjBudgetCheckErrorDescription costMessage;

        if (!_projActivityNumber)
        {
            costMessage = strFmt("@Proj:OverCostBudgetLimitError", _projCategoryId, _projId, _overBudgetedCostAmount);
        }
        else
        {
            costMessage = strFmt("@Proj:OverCostBudgetLimitWithActivityError", _projCategoryId, _projActivityNumber, _projId, _overBudgetedCostAmount);
        }

        return costMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostMessageForWarnOfOverruns</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets project budget check cost message for warn of overruns.
    /// </summary>
    /// <param name = "_projId">
    ///     The project ID for message.
    /// </param>
    /// <param name = "_projCategoryId">
    ///     The category ID.
    /// </param>
    /// <param name = "_overBudgetedCostAmount">
    ///     The over-budgeted cost amount.
    /// </param>
    /// <param name = "_projActivityNumber">
    ///     The activity number.
    /// </param>
    /// <returns>
    ///     The error description.
    /// </returns>
    [Wrappable(true)]
    protected final ProjBudgetCheckErrorDescription getCostMessageForWarnOfOverruns(
        ProjId _projId,
        ProjCategoryId _projCategoryId,
        AmountMST _overBudgetedCostAmount,
        ProjActivityNumber  _projActivityNumber)
    {
        ProjBudgetCheckErrorDescription costMessage;

        if (!_projActivityNumber)
        {
            costMessage = strFmt("@SYS300581", _projCategoryId, _projId, _overBudgetedCostAmount);
        }
        else
        {
            costMessage = strFmt("@GLS360037", _projActivityNumber, _projCategoryId, _projId, _overBudgetedCostAmount);
        }

        return costMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesMessageForDisallowOverruns</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets project budget check sales message for disallow overruns.
    /// </summary>
    /// <param name = "_projId">
    ///     The project ID for message.
    /// </param>
    /// <param name = "_projCategoryId">
    ///     The category ID.
    /// </param>
    /// <param name = "_overBudgetedSalesAmount">
    ///     The over-budgeted sales amount.
    /// </param>
    /// <param name = "_projActivityNumber">
    ///     The activity number.
    /// </param>
    /// <returns>
    ///     The error description.
    /// </returns>
    [Wrappable(true)]
    protected final ProjBudgetCheckErrorDescription getSalesMessageForDisallowOverruns(
        ProjId _projId,
        ProjCategoryId _projCategoryId,
        AmountMST _overBudgetedSalesAmount,
        ProjActivityNumber  _projActivityNumber)
    {
        ProjBudgetCheckErrorDescription salesMessage;

        if (!_projActivityNumber)
        {
            salesMessage = strFmt("@Proj:OverRevenueBudgetLimitError", _projCategoryId,_projId, _overBudgetedSalesAmount);
        }
        else
        {
            salesMessage = strFmt("@Proj:OverRevenueBudgetLimitWithActivityError", _projCategoryId, _projActivityNumber, _projId, _overBudgetedSalesAmount);
        }

        return salesMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesMessageForWarnOfOverruns</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets project budget check sales message for warn of overruns.
    /// </summary>
    /// <param name = "_projId">
    ///     The project ID for message.
    /// </param>
    /// <param name = "_projCategoryId">
    ///     The category ID.
    /// </param>
    /// <param name = "_overBudgetedSalesAmount">
    ///     The over-budgeted sales amount.
    /// </param>
    /// <param name = "_projActivityNumber">
    ///     The activity number.
    /// </param>
    /// <returns>
    ///     The error description.
    /// </returns>
    [Wrappable(true)]
    protected final ProjBudgetCheckErrorDescription getSalesMessageForWarnOfOverruns(
        ProjId _projId,
        ProjCategoryId _projCategoryId,
        AmountMST _overBudgetedSalesAmount,
        ProjActivityNumber  _projActivityNumber)
    {
        ProjBudgetCheckErrorDescription salesMessage;

        if (!_projActivityNumber)
        {
            salesMessage = strFmt("@SYS300174", _projCategoryId,_projId, _overBudgetedSalesAmount);
        }
        else
        {
            salesMessage = strFmt("@GLS360174", _projActivityNumber, _projCategoryId, _projId, _overBudgetedSalesAmount);
        }

        return salesMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOverrunAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether overrun is enabled for the project.
    /// </summary>
    /// <param name="_projId">
    ///    The project ID for which budget is to be obtained.
    /// </param>
    /// <param name="_projCategoryId">
    ///    The category ID.
    /// </param>
    /// <param name="_overBudgetedCostAmount">
    ///    The over-budgeted cost amount.
    /// </param>
    /// <param name="_overBudgetedSalesAmount">
    ///    The over-budgeted sales amount.
    /// </param>
    /// <param name="_projBudgetaryControlOn">
    ///    A <c>ProjBudgetaryControlOn</c> enumeration value.
    /// </param>
    /// <param name="_projActivityNumber">
    ///     A <c>activityNumber</c> specifying the activity.
    /// </param>
    /// <param name="_sourceDocumentLine">
    ///     The ID of the source document line; optional.
    /// </param>
    /// <returns>
    ///    true if overrun is enabled; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The specified project ID can be from the alternate project instead of the original project.The
    ///    project category ID will be empty if this method is called on account type transactions.
    /// </remarks>
    [Wrappable(true)]
    protected final boolean isOverrunAllowed(
        ProjId _projId,
        ProjCategoryId _projCategoryId,
        AmountMST _overBudgetedCostAmount,
        AmountMST _overBudgetedSalesAmount,
        ProjBudgetaryControlOn _projBudgetaryControlOn,
        ProjActivityNumber  _projActivityNumber,
        RefRecId _sourceDocumentLine =0
    )
    {
        boolean                         ret = true;
        ProjBudgetCheckErrorDescription costMessage ='', salesMessage ='';
        ProjBudgetOverrunOption         projBudgetOverrunOption;
        ProjBudgetCheckResult           projBudgetCheckResult = ProjBudgetCheckResult::Passed;
        ProjBudgetCheckResult           projBudgetCheckResultCost = ProjBudgetCheckResult::Passed;
        ProjBudgetCheckResult           projBudgetCheckResultSales = ProjBudgetCheckResult::Passed;
        ProjBudgetControlErrorWarning   projBudgetControlErrorWarning = ProjBudgetControlErrorWarning::NoError;
        ProjBudgetControlErrorWarning   projBudgetControlErrorWarningCost = ProjBudgetControlErrorWarning::NoError;
        ProjBudgetControlErrorWarning   projBudgetControlErrorWarningSales = ProjBudgetControlErrorWarning::NoError;

        projBudgetOverrunOption = this.getOverBudgetAction(_projId);

        if (projBudgetOverrunOption != ProjBudgetOverrunOption::AllowOverruns)
        {
            CostAmount  costAmountOrignal;
            SalesAmount salesAmountOrignal;
            CostAmount  costAmountRemaining;
            SalesAmount salesAmountRemaining;

            [costAmountOrignal, salesAmountOrignal, costAmountRemaining, salesAmountRemaining] = this.getTotalAndRemainingBudget(_projId, _projCategoryId, _projActivityNumber);

            if (_overBudgetedCostAmount > 0 &&
                    (_projBudgetaryControlOn == ProjBudgetaryControlOn::RevenuesAndCosts ||
                    _projBudgetaryControlOn == ProjBudgetaryControlOn::CostsOnly))

            {
                if (projBudgetOverrunOption == ProjBudgetOverrunOption::DisallowOverruns)
                {
                    costMessage = this.getCostMessageForDisallowOverruns(_projId, _projCategoryId, _overBudgetedCostAmount, _projActivityNumber);

                    projBudgetCheckResultCost = ProjBudgetCheckResult::Failed;
                    projBudgetControlErrorWarningCost = ProjBudgetControlErrorWarning::OverBudgetError;
                    ret = false;
                }
                else if (projBudgetOverrunOption == ProjBudgetOverrunOption::WarnOfOverruns)
                {
                    costMessage = this.getCostMessageForWarnOfOverruns(_projId, _projCategoryId, _overBudgetedCostAmount, _projActivityNumber);

                    projBudgetCheckResultCost = ProjBudgetCheckResult::PassedWithWarnings;
                    projBudgetControlErrorWarningCost = ProjBudgetControlErrorWarning::OverBudgetWarning;
                }
            }

            this.displayMessage(costMessage, projBudgetCheckResultCost);

            if (!ret)
            {
                throw error("@Proj:BudgetError");
            }

            if ((_overBudgetedSalesAmount > 0 || salesAmountRemaining < 0)
                    && (_projBudgetaryControlOn == ProjBudgetaryControlOn::RevenuesAndCosts ||
                    _projBudgetaryControlOn == ProjBudgetaryControlOn::RevenuesOnly))
            {
                if (projBudgetOverrunOption == ProjBudgetOverrunOption::DisallowOverruns)
                {
                    salesMessage = this.getSalesMessageForDisallowOverruns(_projId, _projCategoryId, _overBudgetedSalesAmount, _projActivityNumber);

                    projBudgetCheckResultSales = ProjBudgetCheckResult::Failed;
                    projBudgetControlErrorWarningSales = ProjBudgetControlErrorWarning::OverBudgetError;
                    ret = false;
                }
                else if (projBudgetOverrunOption == ProjBudgetOverrunOption::WarnOfOverruns)
                {
                    salesMessage = this.getSalesMessageForWarnOfOverruns(_projId, _projCategoryId, _overBudgetedSalesAmount, _projActivityNumber);

                    projBudgetCheckResultSales = ProjBudgetCheckResult::PassedWithWarnings;
                    projBudgetControlErrorWarningSales = ProjBudgetControlErrorWarning::OverBudgetWarning;
                }
            }

            this.displayMessage(salesMessage, projBudgetCheckResultSales);
        }

        if (costMessage != '' || salesMessage !='')
        {
            if (!ret)
            {
                projBudgetCheckResult = ProjBudgetCheckResult::Failed;
                projBudgetControlErrorWarning = ProjBudgetControlErrorWarning::OverBudgetError;
            }
            else if (projBudgetCheckResultCost > projBudgetCheckResultSales)
            {
                projBudgetCheckResult = projBudgetCheckResultCost;
                projBudgetControlErrorWarning = projBudgetControlErrorWarningCost;
            }
            else
            {
                projBudgetCheckResult = projBudgetCheckResultSales;
                projBudgetControlErrorWarning = projBudgetControlErrorWarningSales;
            }

            this.setBudgetCheckResultMap(_projId, _projCategoryId, (_overBudgetedCostAmount < 0) ? 0 : _overBudgetedCostAmount , (_overBudgetedSalesAmount < 0) ? 0 : _overBudgetedSalesAmount, projBudgetCheckResult, projBudgetControlErrorWarning,
            costMessage, salesMessage, _projActivityNumber, _sourceDocumentLine);
        }
        else if (costMessage == '' && salesMessage == ''  && ret)
        {
            this.setBudgetCheckResultMap(_projId, _projCategoryId, (_overBudgetedCostAmount < 0) ? 0 : _overBudgetedCostAmount , (_overBudgetedSalesAmount < 0) ? 0 : _overBudgetedSalesAmount, ProjBudgetCheckResult::Passed,
            ProjBudgetControlErrorWarning::NoError, '', '', _projActivityNumber, _sourceDocumentLine);
        }

        if (!ret)
        {
            this.parmErrorList().addEnd([_projId, _projCategoryId, (_overBudgetedCostAmount < 0) ? 0 : _overBudgetedCostAmount , (_overBudgetedSalesAmount < 0) ? 0 : _overBudgetedSalesAmount]);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>keyValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the key value that is associated with the current transaction.
    /// </summary>
    /// <param name="_budgetTransactionLine">
    ///    An object of the <c>ProjBudgetTransactionLine</c> class.
    /// </param>
    /// <returns>
    ///    A container with the key and transaction date.
    /// </returns>
    private container keyValue(ProjBudgetTransactionLine _budgetTransactionLine)
    {
        FiscalCalendarYear     fiscalCalendarYear;
        FiscalCalendarPeriod   fiscalCalendarPeriod;
        TransDate              transDate;
        ProjTable              projTable;
        str key = '';

        transDate = _budgetTransactionLine.transDate();
        projTable = ProjTable::find(_budgetTransactionLine.projId());

        fiscalCalendarYear = FiscalCalendarYear::findYearByCalendarDate(this.fiscalCalendarRecId(), transDate);
        fiscalCalendarPeriod = this.getFiscalYearPeriod(transDate);

        if (projTable.UseAlternateProject)
        {
            projTable = ProjTable::find(projTable.AlternateBudgetProject);
        }

        switch (projTable.ProjBudgetInterval)
        {
            case ProjBudgetInterval::TotalBudget, ProjBudgetInterval::ProjectToDate :
                key = projTable.ProjId + '#' +  _budgetTransactionLine.categoryId() + '#' + _budgetTransactionLine.activityNumber();
                break;
            case ProjBudgetInterval::TotalYear :
                key = projTable.ProjId + '#' +  _budgetTransactionLine.categoryId() + '#' + _budgetTransactionLine.activityNumber() + '#' + strFmt('%1', fiscalCalendarYear.RecId);
                transDate = fiscalCalendarYear.EndDate;
                break;
            case ProjBudgetInterval::CurrentPeriod:
                key = projTable.ProjId + '#' +  _budgetTransactionLine.categoryId() + '#' + _budgetTransactionLine.activityNumber() + '#' + strFmt('%1', fiscalCalendarYear.RecId) + '#' + strFmt('%1', fiscalCalendarPeriod.RecId);
                transDate = fiscalCalendarPeriod.EndDate;
                break;
            case ProjBudgetInterval::YearToDate:
                key = projTable.ProjId + '#' +  _budgetTransactionLine.categoryId() + '#' + _budgetTransactionLine.activityNumber() + '#' + strFmt('%1', fiscalCalendarYear.RecId);
                break;
        }
        return [key,
            transDate,
            projTable.ProjBudgetInterval,
            projTable.StartDate,
            projTable.ProjId,
            projTable.ProjBudgetaryControlOn,
            _budgetTransactionLine.transType()
            ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>negativeTransValidatedAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns cost and sales amounts after validating negative transaction.
    /// </summary>
    /// <param name="_transactionCostAmountMST">
    /// The cost amount to validate.
    /// </param>
    /// <param name="_transactionSalesAmountMST">
    /// The sales amount to validate.
    /// </param>
    /// <param name="_projId">
    /// The project ID for which budget is to be obtained.
    /// </param>
    /// <param name="_projCategoryId">
    /// The category ID.
    /// </param>
    /// <param name="_projBudgetaryControlOn">
    /// A <c>ProjBudgetaryControlOn</c> enumeration value.
    /// </param>
    /// <param name="_activityNumber">
    /// A <c>activityNumber</c> specifying the activity.
    /// </param>
    /// <param name="_sourceDocumentLine">
    ///     The ID of the source document line; optional.
    /// </param>
    /// <returns>
    /// A container of cost and sales amounts.
    /// </returns>
    private container negativeTransValidatedAmounts(AmountMST _transactionCostAmountMST,
        AmountMST _transactionSalesAmountMST,
        ProjId _projId,
        ProjCategoryId _projCategoryId,
        ProjBudgetaryControlOn _projBudgetaryControlOn,
        ProjActivityNumber _activityNumber,
        RefRecId _sourceDocumentLine = 0
        )
    {

        AmountMST getAmountNotReduced(AmountMST _orignalBudget, AmountMST _remainingBudget, AmountMST _transactionAmount)
        {
            AmountMST amountMST;

            if (((_remainingBudget + _transactionAmount > _orignalBudget) && (_orignalBudget > 0)) ||
                ((_remainingBudget + _transactionAmount < _orignalBudget) && (_orignalBudget < 0)))
            {
                amountMST = _remainingBudget + _transactionAmount - _orignalBudget;
            }

            return amountMST;
        }

        CostAmount  costAmount  = _transactionCostAmountMST;
        SalesAmount salesAmount = _transactionSalesAmountMST;

        CostAmount  costAmountOrignal;
        SalesAmount salesAmountOrignal;
        CostAmount  costAmountNotReduced;
        SalesAmount salesAmountNotReduced;
        CostAmount  costAmountRemaining;
        SalesAmount salesAmountRemaining;

        //Get Total Budget And Remaining Budget
        [costAmountOrignal, salesAmountOrignal, costAmountRemaining, salesAmountRemaining] = this.getTotalAndRemainingBudget(_projId, _projCategoryId, _activityNumber);

        ProjBudgetOverrunOption projBudgetOverrunOption = this.getOverBudgetAction(_projId);
        if (projBudgetOverrunOption != ProjBudgetOverrunOption::AllowOverruns)
        {
            //Get Amount Not Reduced
            costAmountNotReduced = getAmountNotReduced(costAmountOrignal, costAmountRemaining, costAmount);
            salesAmountNotReduced = getAmountNotReduced(salesAmountOrignal, salesAmountRemaining, salesAmount);

            if (projBudgetOverrunOption == ProjBudgetOverrunOption::DisallowOverruns)
            {
                //Get Actual Cost & Sales Amount to be reduced from the budget
                costAmount = (costAmountNotReduced == costAmount)? 0 : costAmount - costAmountNotReduced;
                salesAmount = (salesAmountNotReduced == salesAmount) ? 0 : salesAmount - salesAmountNotReduced;
            }
        }

        ProjBudgetCheckErrorDescription costMessage ='', salesMessage ='';
        boolean setStatus;

        if ((costAmountNotReduced != 0) && !this.parmSupressMessages() && ( _projBudgetaryControlOn == ProjBudgetaryControlOn::CostsOnly || _projBudgetaryControlOn == ProjBudgetaryControlOn::RevenuesAndCosts))
        {
            costMessage = strFmt("@SYS307221", _projCategoryId, _projId, costAmountNotReduced);
            setStatus = true;
        }

        if ((salesAmountNotReduced != 0) && !this.parmSupressMessages() && ( _projBudgetaryControlOn == ProjBudgetaryControlOn::RevenuesOnly || _projBudgetaryControlOn == ProjBudgetaryControlOn::RevenuesAndCosts))
        {
            salesMessage = strFmt("@SYS307222", _projCategoryId, _projId, salesAmountNotReduced);
            setStatus = true;
        }

        if (setStatus)
        {
            this.setBudgetCheckResultMap(_projId, _projCategoryId, costAmountNotReduced, salesAmountNotReduced, ProjBudgetCheckResult::PassedWithWarnings, ProjBudgetControlErrorWarning::NoError, costMessage,
            salesMessage , _activityNumber, _sourceDocumentLine);
        }

        if (!this.parmSupressMessages())
        {
            if (costMessage)
            {
                warning(costMessage);
            }

            if (salesMessage)
            {
                warning(salesMessage);
            }
        }

        return [costAmount, salesAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllowOverBudget</Name>
				<Source><![CDATA[
    public boolean parmAllowOverBudget(boolean _allowOverBudget = allowOverBudget)
    {
        allowOverBudget = _allowOverBudget;
        return allowOverBudget;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCommittedCostBudgetReduced</Name>
				<Source><![CDATA[
    public boolean parmCommittedCostBudgetReduced(boolean _committedCostBudgetReduced = committedCostBudgetReduced)
    {
        committedCostBudgetReduced = _committedCostBudgetReduced;

        return committedCostBudgetReduced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmErrorList</Name>
				<Source><![CDATA[
    public List parmErrorList(List _listError = listError)
    {
        listError = _listError;

        return listError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsBudgetDefined</Name>
				<Source><![CDATA[
    public boolean parmIsBudgetDefined(boolean _isBudgetDefined = isBudgetDefined)
    {
        isBudgetDefined = _isBudgetDefined;

        return isBudgetDefined;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjBudgetTransaction</Name>
				<Source><![CDATA[
    public ProjBudgetTransaction parmProjBudgetTransaction(ProjBudgetTransaction _projBudgetTransaction = projBudgetTransaction)
    {
        projBudgetTransaction = _projBudgetTransaction;

        return projBudgetTransaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSupressMessages</Name>
				<Source><![CDATA[
    public boolean parmSupressMessages(boolean _supressMessages = supressMessages)
    {
        supressMessages = _supressMessages;

        return supressMessages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTrackBudgetStatus</Name>
				<Source><![CDATA[
    public boolean parmTrackBudgetStatus(boolean _trackBudgetStatus = trackBudgetStatus)
    {
        trackBudgetStatus = _trackBudgetStatus;

        return trackBudgetStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBudgetCheckResultMap</Name>
				<Source><![CDATA[
    private void setBudgetCheckResultMap(ProjId _projId,
                                            ProjCategoryId _projCategoryId,
                                            AmountMST _overBudgetCostAmount,
                                            AmountMST _overBudgetSalesAmount,
                                            ProjBudgetCheckResult _projBudgetCheckResult,
                                            ProjBudgetControlErrorWarning _projBudgetControlErrorWarning,
                                            str _message,
                                            str _revenueMessage,
                                            ProjActivityNumber _projActivityNumber,
                                            RefRecId _sourceDocumentLine =0
                                            )
    {
        if (!budgetCheckResult)
        {
            budgetCheckResult = new Map(Types::String, Types::Container);
        }

        str key = (_sourceDocumentLine)?  strFmt('%1#%2#%3',_projId, _projCategoryId, _sourceDocumentLine) :  strFmt('%1#%2',_projId, _projCategoryId);
        budgetCheckResult.insert(key, [_projId, _projCategoryId, _overBudgetCostAmount, _overBudgetSalesAmount, _projBudgetCheckResult, _projBudgetControlErrorWarning, _message, _projActivityNumber, _sourceDocumentLine, _revenueMessage]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBudgetAllocationPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the amount of the budgeted period.
    /// </summary>
    /// <param name="_periodId">
    ///    The period ID.
    /// </param>
    /// <param name="_amount">
    ///    The amount to be updated.
    /// </param>
    private void updateBudgetAllocationPeriod(RefRecId _periodId, AmountMST _amount)
    {
        ProjBudgetAllocationLine projBudgetAllocationLine;

        projBudgetAllocationLine = ProjBudgetAllocationLine::find(_periodId,true);

        if (projBudgetAllocationLine)
        {
            projBudgetAllocationLine.ReductionAmount -= _amount;
            projBudgetAllocationLine.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBudgetStatus</Name>
				<Source><![CDATA[
    private void updateBudgetStatus(boolean _forAdjustment = false, ProjTransIdBase _projTransId ='')
    {
        SetEnumerator                   setEnumerator;
        ProjId                          projId;
        ProjCategoryId                  projCategoryId;
        ProjBudgetStatus                projBudgetStatus;
        RefRecId                        sourceDocumentLine;
        ProjActivityNumber              projActivityNumber;
        ProjBudgetCheckResult           projBudgetCheckResult;
        ProjBudgetStatusDetail          projBudgetStatusDetail;
        ProjBudgetTransactionLine       projBudgetTransactionLine;
        ProjBudgetControlErrorWarning   projBudgetControlErrorWarning;
        str                             message, revenueMessage, key='', keyBudgetStatus='';
        AmountMST                       overBudgetCostAmount, overBudgetSalesAmount;
        Map                             budgetStatusMap = new Map(Types::String, Types::String);

        str getKey(ProjBudgetTransactionLine _projBudgetTransactionLine)
        {
            str keyValue='';

            if (_forAdjustment)
            {
                keyValue = strFmt('%1#%2#%3', projBudgetTransactionLine.projId(), projBudgetTransactionLine.categoryId(), projBudgetTransactionLine.parmSourceDocumentLine());
            }
            else
            {
                keyValue = strFmt('%1#%2', projBudgetTransactionLine.projId(), projBudgetTransactionLine.categoryId());
            }
            return keyValue;
        }
        ;

        setEnumerator = projBudgetTransaction.getBudgetTransactionLinesEnumerator();
        while (setEnumerator.moveNext())
        {
            projBudgetTransactionLine = setEnumerator.current();
            projBudgetStatus = ProjBudgetStatus::findBySourceDocumentLine(projBudgetTransactionLine.parmSourceDocumentLine(), true);
            if (projBudgetStatus)
            {
                projBudgetStatus.delete();
                projBudgetStatus.clear();
            }
        }

        setEnumerator = projBudgetTransaction.getBudgetTransactionLinesEnumerator();
        listError = new List(Types::Container);

        while (setEnumerator.moveNext())
        {
            projBudgetTransactionLine = setEnumerator.current();

            ttsbegin;

            //Save budget check result for the source document line.
            if (projBudgetTransactionLine.parmSourceDocumentLine() && (_projTransId == '' || (_projTransId != '' && projBudgetTransactionLine.transId() == _projTransId)))
            {
                key = getKey(projBudgetTransactionLine);

                if (budgetCheckResult.exists(key))
                {
                    [projId, projCategoryId, overBudgetCostAmount, overBudgetSalesAmount, projBudgetCheckResult, projBudgetControlErrorWarning, message, projActivityNumber, sourceDocumentLine, revenueMessage] = budgetCheckResult.lookup(key);
                    projBudgetStatus = ProjBudgetStatus::findBySourceDocumentLine(projBudgetTransactionLine.parmSourceDocumentLine(), true);

                    keyBudgetStatus = strFmt('%1',projBudgetTransactionLine.parmSourceDocumentLine());

                    if (!budgetStatusMap.exists(keyBudgetStatus))
                    {
                        budgetStatusMap.insert(keyBudgetStatus,keyBudgetStatus);

                        if (projBudgetStatus)
                        {
                            projBudgetStatus.delete();
                            projBudgetStatus.clear();
                        }
                    }
                    //Update Budget Status

                    if (!projBudgetStatus)
                    {
                        projBudgetStatus.clear();
                        projBudgetStatus.SourceDocumentLine = projBudgetTransactionLine.parmSourceDocumentLine();
                        projBudgetStatus.BudgetCheckResult = projBudgetCheckResult;
                        projBudgetStatus.insert();
                    }
                    else
                    {
                        if (projBudgetStatus.BudgetCheckResult < projBudgetCheckResult)
                        {
                            projBudgetStatus.BudgetCheckResult = projBudgetCheckResult;
                            projBudgetStatus.update();
                        }
                    }

                    projBudgetStatusDetail.clear();
                    projBudgetStatusDetail.ProjId = projId;
                    projBudgetStatusDetail.ProjCategoryId = projCategoryId;
                    projBudgetStatusDetail.ProjBudgetStatus = projBudgetStatus.RecId;
                    projBudgetStatusDetail.ProjBudgetControlErrorWarning = projBudgetControlErrorWarning;
                    projBudgetStatusDetail.Message = message;
                    projBudgetStatusDetail.OverBudgetCostAmount = overBudgetCostAmount;
                    projBudgetStatusDetail.OverBudgetSalesAmount = overBudgetSalesAmount;
                    projBudgetStatusDetail.ActivityNumber = projActivityNumber;
                    projBudgetStatusDetail.RevenueMessage = revenueMessage;
                    projBudgetStatusDetail.insert();
                }
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudget</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the cost and sales amounts of a transaction from the budget.
    /// </summary>
    /// <returns>
    ///    true if the transaction is valid; otherwise, false.
    /// </returns>
    public boolean validateBudget()
    {
        boolean         ret = true;
        Map             totalTransactionMap;
        MapEnumerator   mapEnumerator;
        Ledger          primaryLedger;

        forValidationOnly = true;
        listError = new List(Types::Container);
        budgetCheckResult = new Map(Types::String, Types::Container);

        if (isBudgetTransactionManagerV2Enabled)
        {
            totalTransactionMap = this.getTotalTransactionBudgetCostRevenue(projBudgetTransaction);
        }
        else
        {
            totalTransactionMap = this.getTotalTransactionBudget(projBudgetTransaction);
        }

        if (!totalTransactionMap.empty())
        {
            primaryLedger = Ledger::findByLegalEntity(CompanyInfo::current());
            if (primaryLedger.BudgetExchangeRateType == 0)
            {
                ret = checkFailed(strfmt("@SYS323934", primaryLedger.Name));
            }
        }

        if (ret)
        {
            mapEnumerator = totalTransactionMap.getEnumerator();

            while (mapEnumerator.moveNext())
            {
                ret = this.validateKeyValue(mapEnumerator.currentValue()) && ret;
            }

            if (this.parmTrackBudgetStatus())
            {
                this.updateBudgetStatus(true);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetForLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the cost and sales amounts of a transaction from the budget.
    /// </summary>
    /// <param name="_projTransId">
    ///    The transaction ID of the current transaction.
    /// </param>
    /// <returns>
    ///    true if the transaction is valid; otherwise, false.
    /// </returns>
    public boolean validateBudgetForLine(ProjTransIdBase _projTransId)
    {
        str                             key;
        boolean                         ret = true;
        SetEnumerator                   setEnumerator;
        Map                             totalTransactionMap;
        ProjBudgetTransactionLine       projBudgetTransactionLine;

        budgetCheckResult = new Map(Types::String, Types::Container);
        listError = new List(Types::Container);
        setEnumerator = projBudgetTransaction.getBudgetTransactionLinesEnumerator();

        while (setEnumerator.moveNext())
        {
            projBudgetTransactionLine = setEnumerator.current();
            if (projBudgetTransactionLine.transId() == _projTransId)
            {
                if (isBudgetTransactionManagerV2Enabled)
                {
                    str keyCost, keyRevenue;
                    [keyCost, keyRevenue] = this.keyValueCostRevenue(projBudgetTransactionLine);
                    totalTransactionMap = this.getTotalTransactionBudgetCostRevenue(projBudgetTransaction);
                
                    if (totalTransactionMap.exists(keyCost))
                    {
                        ret = this.validateKeyValue(totalTransactionMap.lookup(keyCost));
                    }
                
                    if (ret && keyRevenue != keyCost && totalTransactionMap.exists(keyRevenue))
                    {
                        ret = this.validateKeyValue(totalTransactionMap.lookup(keyRevenue));
                    }

                    if ((totalTransactionMap.exists(keyCost) || totalTransactionMap.exists(keyRevenue))
                        && projBudgetTransactionLine.parmSourceDocumentLine()
                        && this.parmTrackBudgetStatus())
                    {
                        this.updateBudgetStatus(false, _projTransId);
                    }
                }
                else
                {
                    [key] =this.keyValue(projBudgetTransactionLine);
                    totalTransactionMap = this.getTotalTransactionBudget(projBudgetTransaction);
                    if (totalTransactionMap.exists(key))
                    {
                        ret = this.validateKeyValue(totalTransactionMap.lookup(key));

                        if (projBudgetTransactionLine.parmSourceDocumentLine() && this.parmTrackBudgetStatus())
                        {
                            this.updateBudgetStatus(false, _projTransId);
                        }
                    }
                }

                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateKeyValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the transaction amounts that are associated with a key.
    /// </summary>
    /// <param name="_transaction">
    ///    A container of transaction details.
    /// </param>
    /// <returns>
    ///    true if the transaction is valid; otherwise, false.
    /// </returns>
    private boolean validateKeyValue(container _transaction)
    {
        ProjId                          projId;
        ProjTransDate                   projTransDate;
        ProjTransType                   projTransType;
        container                       budgetAmounts;
        ProjCategoryId                  projCategoryId;
        AmountMST                       transactionCostAmountMST;
        AmountMST                       transactionSalesAmountMST;
        ProjBudgetInterval              projBudgetInterval;
        TransDate                       projDate;
        ProjBudgetaryControlOn          projBudgetaryControlOn;
        InventQty                       qty;
        ProjActivityNumber              projActivityNumber;
        ProjBudgetCheckErrorDescription message;
        ProjLinePropertyId              linePropertyId;
        RefRecId                        sourceDocumentLine;

        [transactionCostAmountMST,
        transactionSalesAmountMST,
        projId,
        projCategoryId,
        projActivityNumber,
        projTransDate,
        projBudgetInterval,
        projDate,
        projBudgetaryControlOn,
        projTransType,
        qty
        ,linePropertyId,
        sourceDocumentLine] = _transaction;

        ProjTable projTable = ProjTable::find(projId);
        boolean ret;

        if (this.isBudgetaryControlValid(projTransType, projBudgetaryControlOn) || !projTable.UseBudgeting)
        {
            ret = true;
        }
        else if (projTable.Status == ProjStatus::Completed)
        {
            message = strFmt("@SYS301172", projTable.ProjId, projTable.Stage());
            this.setBudgetCheckResultMap(projId, projCategoryId,0,0,ProjBudgetCheckResult::Failed, ProjBudgetControlErrorWarning::ProjectCompleted, message, '', projActivityNumber, 0);

            if (!this.parmSupressMessages() && message != '')
            {
                error(message);
            }
            ret = false;
        }
        else
        {
            projBudgetaryControlOn = this.getBudgetaryControlForRevenueOnly(projTransType, projBudgetaryControlOn);

            if (!forValidationOnly && transactionCostAmountMST == 0 && transactionSalesAmountMST == 0)
            {
                this.setBudgetCheckResultMap(projId, projCategoryId,0,0,ProjBudgetCheckResult::Passed, ProjBudgetControlErrorWarning::NoError, '', '', projActivityNumber, 0);
                ret = true;
            }
            else
            {
                CostAmount  costAmountOrignal;
                SalesAmount salesAmountOrignal;
                CostAmount  costAmountRemaining;
                SalesAmount salesAmountRemaining;
                
                [costAmountOrignal, salesAmountOrignal, costAmountRemaining, salesAmountRemaining] = this.getTotalAndRemainingBudget(projId, projCategoryId, projActivityNumber);

                if (((costAmountOrignal > 0 || salesAmountOrignal > 0) && (qty < 0)) ||
                    ((costAmountOrignal < 0 || salesAmountOrignal < 0) && ((qty > 0) && costAmountRemaining != 0)))
                {

                    this.negativeTransValidatedAmounts(transactionCostAmountMST,
                        transactionSalesAmountMST,
                        projId,
                        projCategoryId,
                        projBudgetaryControlOn,
                        projActivityNumber,
                        sourceDocumentLine);

                    ret = true;
                }
                else
                {
                    budgetAmounts = this.getBudgetAmounts(
                        projId,
                        projTransType,
                        projCategoryId,
                        projTransDate,
                        projBudgetInterval,
                        projDate,
                        projBudgetaryControlOn,
                        projActivityNumber);

                    ret = this.validateTransactionAmounts(
                        budgetAmounts,
                        transactionCostAmountMST,
                        transactionSalesAmountMST,
                        projId,
                        projCategoryId,
                        projBudgetaryControlOn,
                        projActivityNumber,
                        sourceDocumentLine,
                        linePropertyId
                        );
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTransactionAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the cost and sales amounts of a transaction from the budget.
    /// </summary>
    /// <param name="_budgetAmounts">
    ///    A container of budget amounts.
    /// </param>
    /// <param name="_transactionCostAmountMST">
    ///    The cost amount to validate.
    /// </param>
    /// <param name="_transactionSalesAmountMST">
    ///    The sales amount to validate.
    /// </param>
    /// <param name="_projId">
    ///    The project ID for which the budget is to be obtained.
    /// </param>
    /// <param name="_projCategoryId">
    ///    The category ID.
    /// </param>
    /// <param name="_projBudgetaryControlOn">
    ///    A <c>ProjBudgetaryControlOn</c> enumeration value.
    /// </param>
    /// <param name="_projActivityNumber">
    ///     A <c>activityNumber</c> specifying the activity.
    /// </param>
    /// <param name="_sourceDocumentLine">
    ///     The ID of source document line; optional.
    /// </param>
    /// <param name="linePropertyId">
    ///     The line property id; optional.
    /// </param>
    /// <returns>
    ///    true if the transaction is valid; otherwise, false.
    /// </returns>
    private boolean validateTransactionAmounts(
        container _budgetAmounts,
        AmountMST _transactionCostAmountMST,
        AmountMST _transactionSalesAmountMST,
        ProjId _projId,
        ProjCategoryId _projCategoryId,
        ProjBudgetaryControlOn  _projBudgetaryControlOn,
        ProjActivityNumber _projActivityNumber,
        RefRecId _sourceDocumentLine = 0,
        ProjLinePropertyId linePropertyId = '',
        ProjTransIdBase _transId = ''
    )
    {
        boolean         ret;
        AmountMST       budgetCostAmountMST;
        AmountMST       budgetSalesAmountMST;
        AmountMST       overBudgetedCostAmount;
        AmountMST       overBudgetedSalesAmount;

        [budgetCostAmountMST, budgetSalesAmountMST] = _budgetAmounts;

        overBudgetedCostAmount = _transactionCostAmountMST - budgetCostAmountMST;
        overBudgetedSalesAmount = _transactionSalesAmountMST - budgetSalesAmountMST;

        SourceDocumentLine sourceDocumentLineBuffer;
        if (_sourceDocumentLine)
        {
            sourceDocumentLineBuffer = SourceDocumentLine::find(_sourceDocumentLine);
        }

        if (sourceDocumentLineBuffer && ProjParameters::find().EnableBudgetCheckOnLineSave == NoYes::No)
        {
            SourceDocumentLineItem sourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLine(sourceDocumentLineBuffer);
            PurchId purchId = PurchLine::findBySourceDocumentLine(_sourceDocumentLine).PurchId;
            if (purchId && sourceDocumentLineItem is PurchOrderLineSourceDocumentLineItem)
            {
                RefRecId cacheSourceDocumentLine;
                AmountMST cacheCostAmountMST, cacheSalesAmountMST;

                str cacheKey = _projId + ':' + purchId + ':' + _projCategoryId + ':' + _projActivityNumber;
                SysGlobalCache globalCache = appl.globalCache();

                // Gets the value from cache till the last <c>PurchLine</c> is processed.
                [cacheSourceDocumentLine, cacheCostAmountMST, cacheSalesAmountMST] = globalCache.get(classStr(ProjBudgetTransactionManager), cacheKey, conNull());

                if (!cacheSourceDocumentLine)
                {
                    this.calcCostAndSalesAmountForPurchDocument(_projId, _projCategoryId, purchId, _projActivityNumber);
                    [cacheSourceDocumentLine, cacheCostAmountMST, cacheSalesAmountMST] = globalCache.get(classStr(ProjBudgetTransactionManager), cacheKey, conNull());
                }

                if (cacheSourceDocumentLine && cacheSourceDocumentLine == _sourceDocumentLine)
                {
                    if (forValidationOnly)
                    {
                        overBudgetedCostAmount = cacheCostAmountMST - budgetCostAmountMST;
                        overBudgetedSalesAmount = cacheSalesAmountMST - budgetSalesAmountMST;
                    }
                    else
                    {
                        overBudgetedCostAmount = _transactionCostAmountMST - budgetCostAmountMST;
                        overBudgetedSalesAmount = _transactionSalesAmountMST - budgetSalesAmountMST;
                    }
                    // Clears the cache after the last <c>PurchLine</c> is processed.
                    globalCache.clear(classStr(ProjBudgetTransactionManager));
                }
                else
                {
                    overBudgetedCostAmount = 0;
                    overBudgetedSalesAmount = 0;
                }
            }
        }

        if (!forValidationOnly)
        {
            overBudgetedCostAmount = (_transactionCostAmountMST == 0 )? 0:overBudgetedCostAmount;
            overBudgetedSalesAmount = (_transactionSalesAmountMST == 0 )? 0:overBudgetedSalesAmount;
        }

        // do not check sales price budget on transactions that are not billable
        if (linePropertyId && ProjLineProperty::find(linePropertyId).ToBeInvoiced == NoYes::No)
        {
            overBudgetedSalesAmount = 0;
        }

        if (ProjCorrectConsumedBudgetAfterInvRecalcFlight::instance().isEnabled())
        {
            ProjBudgetReductionHistory projBudgetReductionHistoryLocal;
            select firstonly projBudgetReductionHistoryLocal where projBudgetReductionHistoryLocal.ProjTransId == _transId;
            if (projBudgetReductionHistoryLocal && _transactionCostAmountMST != 0 )
            {
                overBudgetedCostAmount = projBudgetReductionHistoryLocal.CostAmountReduced - _transactionCostAmountMST - budgetCostAmountMST;
            }
        }

        ret = this.isOverrunAllowed(_projId,
                             _projCategoryId,
                             overBudgetedCostAmount,
                             overBudgetedSalesAmount,
                             _projBudgetaryControlOn,
                             _projActivityNumber,
                             _sourceDocumentLine);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjBudgetCheckResultImagePos</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the project budget check result image position in the image list that displays the
    /// <c>ProjBudgetCheckResult</c> values.
    /// </summary>
    /// <param name="_projBudgetCheckResult">
    /// The project budget check result.
    /// </param>
    /// <returns>
    /// An Integer value to indicate the image position in the image list that displays the
    /// <c>ProjBudgetCheckResult</c> values.
    /// </returns>
    public static int getProjBudgetCheckResultImagePos(ProjBudgetCheckResult _projBudgetCheckResult)
    {
        #BudgetCheckResultImages
        int image = #BudgetCheckNoImagePos;

        switch (_projBudgetCheckResult)
        {
            case ProjBudgetCheckResult::Failed:
                image = #BudgetCheckFailedPos;
                break;

            case ProjBudgetCheckResult::Passed:
                image = #BudgetCheckPassedPos;
                break;

            case ProjBudgetCheckResult::PassedWithWarnings:
                image = #BudgetCheckPassedWithWarningsPos;
                break;

            default:
                break;
        }

        return image;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjBudgetCheckResultToolTip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tool tip for the project budget check result.
    /// </summary>
    /// <param name="_projBudgetCheckResult">
    /// The project budget check result.
    /// </param>
    /// <returns>
    /// The tool tip for the project budget check result.
    /// </returns>
    public static str getProjBudgetCheckResultToolTip(ProjBudgetCheckResult _projBudgetCheckResult)
    {
        str ret = "@SYS328141";

        switch (_projBudgetCheckResult)
        {
            case ProjBudgetCheckResult::Passed:
                ret = "@SYS328124";
                break;

            case ProjBudgetCheckResult::PassedWithWarnings:
                ret = "@SYS328126";
                break;

            case ProjBudgetCheckResult::Failed:
                ret = "@SYS328127";
                break;

            default:
                break;
        }

        info(ret);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjBudgetSourceCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the <c>ProjBudgetCheckResult</c> value for the specified <c>SourceDocumentLine</c> record.
    /// </summary>
    /// <param name="_sourceDocumentLineId">
    /// The ID for the <c>SourceDocumentLine</c> record.
    /// </param>
    /// <returns>
    /// A <c>ProjBudgetCheckResult</c> value.
    /// </returns>
    public static ProjBudgetCheckResult getProjBudgetSourceCheckResult(RefRecId _sourceDocumentLineId)
    {
        ProjBudgetStatus        projBudgetStatus;
        ProjBudgetCheckResult   projBudgetCheckResult = ProjBudgetCheckResult::NoCheck;

        projBudgetStatus = ProjBudgetStatus::findBySourceDocumentLine(_sourceDocumentLineId);

        if (projBudgetStatus)
        {
            projBudgetCheckResult = projBudgetStatus.BudgetCheckResult;
        }

        return projBudgetCheckResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProjBudgetTransactionManager</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>ProjBudgetTransactionManager</c> class.
    /// </summary>
    /// <param name="_projBudgetTransaction">
    /// An object of the <c>ProjBudgetTransaction</c> class.
    /// </param>
    /// <returns>
    /// An instance of the <c>ProjBudgetTransactionManager</c> class.
    /// </returns>
    public static ProjBudgetTransactionManager newProjBudgetTransactionManager(ProjBudgetTransaction _projBudgetTransaction)
    {
        ProjBudgetTransactionManager projBudgetTransactionManager = new ProjBudgetTransactionManager();
        projBudgetTransactionManager.parmProjBudgetTransaction(_projBudgetTransaction);
        projBudgetTransactionManager.isBudgetTransactionManagerV2Enabled = FeatureStateProvider::isFeatureEnabled(ProjBudgetTransactionManagerV2Feature::instance());

        return projBudgetTransactionManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventAdjustIncreaseBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Increases the project budget on inventory adjustments.
    /// </summary>
    /// <param name="_projBudgetTransactionLine">
    /// The <c>ProjBudgetTransactionLine</c> class is used to hold the transaction information of the inventory adjusted line.
    /// </param>
    /// <remarks>
    /// Handles the project budget increase with the adjusted amount.
    /// </remarks>
    public void inventAdjustIncreaseBudget(ProjBudgetTransactionLine _projBudgetTransactionLine)
    {
        ProjBudgetaryControlOn          projBudgetaryControlOn;
        ProjTable                       projTable;
        AmountCur                       costAmount;
        boolean                         useBudgeting;

        projTable = ProjTable::find(_projBudgetTransactionLine.projId());
        useBudgeting = projTable.UseBudgeting;
        isBudgetDefined = false;

        if (projTable.UseAlternateProject)
        {
            projTable = ProjTable::find(projTable.AlternateBudgetProject);
        }

        projBudgetaryControlOn = projTable.ProjBudgetaryControlOn;
        costAmount = _projBudgetTransactionLine.costAmount();

        if (isBudgetTransactionManagerV2Enabled)
        {
            _projBudgetTransactionLine.setBudgetInformation(projTable.ProjId);
            isBudgetDefined = this.isBudgetDefinedForBudgetTransactionLine(projTable.ProjId, _projBudgetTransactionLine);
        }
        else
        {
            isBudgetDefined = this.isBudgetDefined(projTable.ProjId, _projBudgetTransactionLine.categoryId(), projBudgetaryControlOn, _projBudgetTransactionLine.activityNumber());
        }

        if (useBudgeting && isBudgetDefined)
        {
            ProjActivityNumber projActivityNumber = isBudgetTransactionManagerV2Enabled && _projBudgetTransactionLine.parmProjBudgetLineCost() ?
                _projBudgetTransactionLine.parmProjBudgetLineCost().ActivityNumber : _projBudgetTransactionLine.activityNumber();

            this.increaseBudget(
                    -BudgetTransactionManager::calculateTransAmountToAccountingAmount(costAmount, _projBudgetTransactionLine.costAmountCurrencyCode(), _projBudgetTransactionLine.transDate()),
                    0,
                    _projBudgetTransactionLine.transType(),
                    0,
                    0,
                    projTable.ProjId,
                    _projBudgetTransactionLine.categoryId(),
                    _projBudgetTransactionLine.transId(),
                    _projBudgetTransactionLine.transDate(),
                    projBudgetaryControlOn,
                    projActivityNumber);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>decrementBudget</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the transaction amounts and decreases the project budget.
    /// </summary>
    /// <param name="_projTable">
    ///    The project record of the current transaction.
    /// </param>
    /// <param name="_projBudgetTransactionLine">
    ///    An object from the <c>ProjBudgetTransactionLine</c> class.
    /// </param>
    /// <param name="_projBudgetaryControlOn">
    ///    A <c>ProjBudgetaryControlOn</c> enumeration value.
    /// </param>
    /// <param name="_costAmount">
    ///    A <c>CostAmount</c> of the transaction.
    /// </param>
    /// <param name="_salesAmount">
    ///    A <c>SalesAmount</c> of the transaction.
    /// </param>
    /// <returns>
    ///    true, if the budget is decreased; otherwise, false.
    /// </returns>
    private boolean decrementBudget(ProjTable _projTable,
                                    ProjBudgetTransactionLine _projBudgetTransactionLine,
                                    ProjBudgetaryControlOn _projBudgetaryControlOn,
                                    CostAmount _costAmount,
                                    SalesAmount _salesAmount)
    {
        boolean ret;

        container budgetAmounts;
        if (isBudgetTransactionManagerV2Enabled)
        {
            budgetAmounts = this.getBudgetAmountsForBudgetTransactionLine(_projTable, _projBudgetaryControlOn, _projBudgetTransactionLine);
        }
        else
        {
            budgetAmounts = this.getBudgetAmounts(
                _projTable.ProjId,
                _projBudgetTransactionLine.transType(),
                _projBudgetTransactionLine.categoryId(),
                _projBudgetTransactionLine.transDate(),
                _projTable.ProjBudgetInterval,
                _projTable.StartDate,
                _projBudgetaryControlOn,
                _projBudgetTransactionLine.activityNumber());
        }

        this.setExchangeRate(_projTable, _projBudgetTransactionLine);

        if (isBudgetTransactionManagerV2Enabled)
        {
            ret = this.validateTransactionAmounts(
                budgetAmounts,
                BudgetTransactionManager::calculateTransAmountToAccountingAmount(_costAmount, _projBudgetTransactionLine.costAmountCurrencyCode(), _projBudgetTransactionLine.transDate(), 0, false, _projBudgetTransactionLine.parmExchRate()),
                0,
                _projtable.ProjId,
                _projBudgetTransactionLine.categoryId(),
                _projBudgetaryControlOn,
                _projBudgetTransactionLine.parmProjBudgetLineCost().ActivityNumber,
                _projBudgetTransactionLine.parmSourceDocumentLine(),
                _projBudgetTransactionLine.linePropertyId(),
                _projBudgetTransactionLine.transId());

            ret = ret && this.validateTransactionAmounts(
                budgetAmounts,
                0,
                BudgetTransactionManager::calculateTransAmountToAccountingAmount(_salesamount, _projBudgetTransactionLine.salesAmountCurrencyCode(), _projBudgetTransactionLine.transDate()),
                _projtable.ProjId,
                _projBudgetTransactionLine.categoryId(),
                _projBudgetaryControlOn,
                _projBudgetTransactionLine.parmProjBudgetLineRevenue().ActivityNumber,
                _projBudgetTransactionLine.parmSourceDocumentLine(),
                _projBudgetTransactionLine.linePropertyId(),
                _projBudgetTransactionLine.transId());
        }
        else
        {
            ret = this.validateTransactionAmounts(
                                    budgetAmounts,
                                    BudgetTransactionManager::calculateTransAmountToAccountingAmount(_costAmount, _projBudgetTransactionLine.costAmountCurrencyCode(), _projBudgetTransactionLine.transDate(), 0, false, _projBudgetTransactionLine.parmExchRate()),
                                    _salesamount,
                                    _projTable.ProjId,
                                    _projBudgetTransactionLine.categoryId(),
                                    _projBudgetaryControlOn,
                                    _projBudgetTransactionLine.activityNumber(),
                                    _projBudgetTransactionLine.parmSourceDocumentLine(),
                                    _projBudgetTransactionLine.linePropertyId(),
                                    _projBudgetTransactionLine.transId());
        }

        if (ret && isBudgetDefined)
        {
            if (isBudgetTransactionManagerV2Enabled)
            {
                ProjActivityNumber activityNumberCost = _projBudgetTransactionLine.parmProjBudgetLineCost().ActivityNumber;
                ProjActivityNumber activityNumberRevenue = _projBudgetTransactionLine.parmProjBudgetLineRevenue().ActivityNumber;
                
                Common projForecastTableCost = ProjBudgetReductionHistory::findForecastByProjAndCatId(_projTable.ProjId, _projBudgetTransactionLine.categoryId(), activityNumberCost);
                Common projForecastTableRevenue = ProjBudgetReductionHistory::findForecastByProjAndCatId(_projTable.ProjId, _projBudgetTransactionLine.categoryId(), activityNumberRevenue);

                if (projForecastTableCost || projForecastTableRevenue)
                {
                    ret = this.decreaseBudgetV2(_projTable.ProjId, _projBudgetTransactionLine, _projBudgetaryControlOn, projForecastTableCost, projForecastTableRevenue);
                }
            }
            else
            {
                Common projForecastTable = ProjBudgetReductionHistory::findForecastByProjAndCatId(_projTable.ProjId, _projBudgetTransactionLine.categoryId(), _projBudgetTransactionLine.activityNumber());

                if (projForecastTable)
                {
                    ret = this.decreaseBudget(_projTable.ProjId, _projBudgetTransactionLine, _projBudgetaryControlOn, projForecastTable);
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>incrementBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Increases the project budget.
    /// </summary>
    /// <param name="_projTable">
    ///    The project record of the current transaction.
    /// </param>
    /// <param name="_projBudgetTransactionLine">
    ///    An object from the <c>ProjBudgetTransactionLine</c> class.
    /// </param>
    /// <param name="_projBudgetaryControlOn">
    ///    A <c>ProjBudgetaryControlOn</c> enumeration value.
    /// </param>
    /// <param name="_costAmount">
    ///    A <c>CostAmount</c> of the transaction.
    /// </param>
    /// <param name="_salesAmount">
    ///    A <c>SalesAmount</c> of the transaction.
    /// </param>
    private void incrementBudget(ProjTable _projTable,
                                 ProjBudgetTransactionLine _projBudgetTransactionLine,
                                 ProjBudgetaryControlOn _projBudgetaryControlOn,
                                 CostAmount _costAmount,
                                 SalesAmount _salesAmount)
    {
        _costAmount = (_projBudgetaryControlOn == ProjBudgetaryControlOn::CostsOnly || _projBudgetaryControlOn == ProjBudgetaryControlOn::RevenuesAndCosts)? _costAmount : 0;
        _salesAmount = (_projBudgetaryControlOn == ProjBudgetaryControlOn::RevenuesOnly || _projBudgetaryControlOn == ProjBudgetaryControlOn::RevenuesAndCosts)? _salesAmount :0;

        this.setExchangeRate(_projTable, _projBudgetTransactionLine);

        if (isBudgetTransactionManagerV2Enabled)
        {
            this.increaseBudget(
                -BudgetTransactionManager::calculateTransAmountToAccountingAmount(_costAmount, _projBudgetTransactionLine.costAmountCurrencyCode(), _projBudgetTransactionLine.transDate(), 0, false, _projBudgetTransactionLine.parmExchRate()),
                0,
                _projBudgetTransactionLine.transType(),
                0,
                0,
                _projTable.ProjId,
                _projBudgetTransactionLine.categoryId(),
                _projBudgetTransactionLine.transId(),
                _projBudgetTransactionLine.transDate(),
                _projBudgetaryControlOn,
                _projBudgetTransactionLine.parmProjBudgetLineCost().ActivityNumber);

            this.increaseBudget(
                0,
                -BudgetTransactionManager::calculateTransAmountToAccountingAmount(_salesAmount, _projBudgetTransactionLine.salesAmountCurrencyCode(), _projBudgetTransactionLine.transDate()),
                _projBudgetTransactionLine.transType(),
                0,
                0,
                _projTable.ProjId,
                _projBudgetTransactionLine.categoryId(),
                _projBudgetTransactionLine.transId(),
                _projBudgetTransactionLine.transDate(),
                _projBudgetaryControlOn,
                _projBudgetTransactionLine.parmProjBudgetLineRevenue().ActivityNumber);
        }
        else
        {
            this.increaseBudget(
                -BudgetTransactionManager::calculateTransAmountToAccountingAmount(_costAmount, _projBudgetTransactionLine.costAmountCurrencyCode(), _projBudgetTransactionLine.transDate(), 0, false, _projBudgetTransactionLine.parmExchRate()),
                -BudgetTransactionManager::calculateTransAmountToAccountingAmount(_salesAmount, _projBudgetTransactionLine.salesAmountCurrencyCode(), _projBudgetTransactionLine.transDate()),
                _projBudgetTransactionLine.transType(),
                0,
                0,
                _projTable.ProjId,
                _projBudgetTransactionLine.categoryId(),
                _projBudgetTransactionLine.transId(),
                _projBudgetTransactionLine.transDate(),
                _projBudgetaryControlOn,
                _projBudgetTransactionLine.activityNumber()
                );
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCostAndSalesAmountForPurchDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates total cost amount and sales amount of purchase order.
    /// </summary>
    /// <param name="_projId">
    ///     The project ID for which the budget is to be obtained.
    /// </param>
    /// <param name="_projCategoryId">
    ///     The project category ID.
    /// </param>
    /// <param name="_purchId">
    ///     The purchase order ID.
    /// </param>
    /// <param name="_projActivityNumber">
    ///     A <c>ActivityNumber</c> specifying the activity.
    /// </param>
    private void calcCostAndSalesAmountForPurchDocument(ProjId _projId, ProjCategoryId _projCategoryId, PurchId _purchId, ProjActivityNumber _projActivityNumber)
    {
        PurchTable purchTable;
        PurchLine purchLine;
        AmountCur costAmountLoc, salesAmountLoc;
        RefRecId sourceDocumentLineLoc;
        CostControlTransCommittedCost costControlTransCommittedCost;
        ProjBudgetReductionHistory projBudgetReductionHistory;

        while select PurchQty, CurrencyCode, DeliveryDate, ProjSalesCurrencyId,
        ProjSalesPrice, SourceDocumentLine, LineAmount from purchLine
            where purchLine.ProjId == _projId
                && purchLine.PurchId == _purchId
                && purchLine.ProjCategoryId == _projCategoryId
                && purchLine.ActivityNumber == _projActivityNumber
                notexists join  RefId, LineNum from costControlTransCommittedCost
                join projBudgetReductionHistory
                where (purchLine.PurchId == costControlTransCommittedCost.RefId
                && purchLine.LineNumber  == costControlTransCommittedCost.LineNum
                && projBudgetReductionHistory.ProjTransId == costControlTransCommittedCost.ProjTransId)
        {
            costAmountLoc += BudgetTransactionManager::calculateTransAmountToAccountingAmount(purchLine.calcLineAmount(purchLine.PurchQty), purchLine.CurrencyCode, purchLine.DeliveryDate);
            salesAmountLoc += BudgetTransactionManager::calculateTransAmountToAccountingAmount(CurrencyExchangeHelper::amount(purchLine.ProjSalesPrice * purchLine.PurchQty, purchLine.ProjSalesCurrencyId), purchLine.ProjSalesCurrencyId, purchLine.DeliveryDate);
            sourceDocumentLineLoc = purchLine.SourceDocumentLine;
        }


        str cacheKey =  _projId + ':' + _purchId + ':' + _projCategoryId + ':' + _projActivityNumber;
        SysGlobalCache globalCache = appl.globalCache();

        // Adding last <c>sourcedocumentline</c> to the cache in order to validate the budget amount with total purchase order amount.
        globalCache.set(classStr(ProjBudgetTransactionManager), cacheKey, [sourceDocumentLineLoc, costAmountLoc, salesAmountLoc]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves exchange rate entered while posting project PO invoice or expense report.
    /// </summary>
    /// <param name = "_projTable">
    /// The project record of the current transaction.
    /// </param>
    /// <param name = "_projBudgetTransactionLine">
    /// An object from the <c>ProjBudgetTransactionLine</c> class.
    /// </param>
    private void setExchangeRate(ProjTable _projTable, ProjBudgetTransactionLine _projBudgetTransactionLine)
    {
        RefRecId sourceDocumentLineId = _projBudgetTransactionLine.parmSourceDocumentLine();
        if (sourceDocumentLineId)
        {
            SourceDocumentLine sourceDocumentLine = SourceDocumentLine::find(sourceDocumentLineId);

            if (sourceDocumentLine.SourceRelationType == tableNum(TrvExpTrans))
            {
                TrvExpTrans trvExpTrans = TrvExpTrans::findBySourceDocumentLine(sourceDocumentLineId);
                if (trvExpTrans)
                {
                    _projBudgetTransactionLine.parmExchRate(trvExpTrans.ExchangeRate);
                }
            }
            else if (sourceDocumentLine.SourceRelationType == tableNum(VendInvoiceTrans))
            {
                VendInvoiceInfoTable vendInvoiceInfoTable;
                VendInvoiceTrans vendInvoiceTrans;
                
                select firstonly ExchRate from vendInvoiceInfoTable
                    exists join vendInvoiceTrans
                        where vendinvoicetrans.SourceDocumentLine == sourceDocumentLineId
                            && vendInvoiceInfoTable.Num == vendInvoiceTrans.InvoiceId
                            && vendInvoiceInfoTable.CurrencyCode == _projBudgetTransactionLine.costAmountCurrencyCode()
                            && vendInvoiceInfoTable.FixedExchRate == NoYes::Yes;
                
                _projBudgetTransactionLine.parmExchRate(vendInvoiceInfoTable.ExchRate);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>decreaseBudgetV2</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Decreases the budget by removing the cost and sales amounts from the budget.
    ///    This version allows to have different buffers for cost and revenue (sales) forecasts.
    /// </summary>
    /// <param name="_projectForBudgetReduction">
    ///    An object from the <c>ProjBudgetReductionHistory</c> class.
    /// </param>
    /// <param name="_projBudgetTransactionLine">
    ///    An object from the <c>ProjBudgetTransactionLine</c> class.
    /// </param>
    /// <param name="projBudgetaryControlOn">
    ///    A <c>ProjBudgetaryControlOn</c> enumeration value.
    /// </param>
    /// <param name="_projForecastTableCost">
    ///    A forecast table buffer corresponding to the project transaction type for cost.
    /// </param>
    /// <param name="_projForecastTableRevenue">
    ///    A forecast table buffer corresponding to the project transaction type for revenue.
    /// </param>
    /// <returns>
    ///    true if the budget was decreased; otherwise, false.
    /// </returns>
    private boolean decreaseBudgetV2(
        ProjId _projectForBudgetReduction,
        ProjBudgetTransactionLine _projBudgetTransactionLine,
        ProjBudgetaryControlOn _projBudgetaryControlOn,
        Common _projForecastTableCost,
        Common _projForecastTableRevenue)
    {
        #OCCRetryCount

        boolean ret = false;

        CostAmount costAmount;
        SalesAmount salesAmount;
        [costAmount, salesAmount] = this.calculateCostAndSalesAmounts(_projBudgetTransactionLine, _projBudgetaryControlOn);

        ttsbegin;

        try
        {
            ProjBudgetReductionHistory projBudgetReductionHistory;

            if (_projBudgetTransactionLine.parmProjBudgetReductionHistory())
            {
                projBudgetReductionHistory = _projBudgetTransactionLine.parmProjBudgetReductionHistory();
                projBudgetReductionHistory.reread();
                projBudgetReductionHistory.selectForUpdate(true);
            }

            ProjBudgetAllocationLine projBudgetAllocationLine = _projBudgetTransactionLine.parmProjBudgetAllocationLineCost();

            if (projBudgetAllocationLine)
            {
                projBudgetAllocationLine.reread();
                projBudgetAllocationLine.selectForUpdate(true);
                projBudgetAllocationLine.ReductionAmount += costAmount;
                projBudgetAllocationLine.update();

                if (projBudgetReductionHistory.RecId && projBudgetReductionHistory.ProjBudgetAllocationLineIdCost && projBudgetReductionHistory.ProjBudgetAllocationLineIdCost != projBudgetAllocationLine.RecId)
                {
                    ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(classStr(ProjBudgetTransactionManager));
                    
                    logger.logError(strFmt(CostBudgetAllocatioLoneNotMatchingMessage,
                        ProjOpsFinancialsInstrumentationActivites::ProjBudgetAllocationLineCost,
                        'ProjBudgetTransactionManager.decreaseBudgetV2()',
                        projBudgetReductionHistory.RecId,
                        projBudgetReductionHistory.ProjBudgetAllocationLineIdCost,
                        projBudgetAllocationLine.RecId));

                    throw error("@Proj:ProjBudgetAllocationLineCostError");
                }

                if (!projBudgetReductionHistory.RecId || !projBudgetReductionHistory.ProjBudgetAllocationLineIdCost)
                {
                    projBudgetReductionHistory.ProjBudgetAllocationLineIdCost = projBudgetAllocationLine.RecId;
                }
            }

            projBudgetAllocationLine = _projBudgetTransactionLine.parmProjBudgetAllocationLineRevenue();

            if (projBudgetAllocationLine)
            {
                projBudgetAllocationLine.reread();
                projBudgetAllocationLine.selectForUpdate(true);
                projBudgetAllocationLine.ReductionAmount += salesAmount;
                projBudgetAllocationLine.update();

                if (projBudgetReductionHistory.RecId && projBudgetReductionHistory.ProjBudgetAllocationLineIdSales && projBudgetReductionHistory.ProjBudgetAllocationLineIdSales != projBudgetAllocationLine.RecId)
                {
                    ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(classStr(ProjBudgetTransactionManager));
                    
                    logger.logError(strFmt(SalesBudgetAllocatioLoneNotMatchingMessage,
                        ProjOpsFinancialsInstrumentationActivites::ProjBudgetAllocationLineSales,
                        'ProjBudgetTransactionManager.decreaseBudgetV2()',
                        projBudgetReductionHistory.RecId,
                        projBudgetReductionHistory.ProjBudgetAllocationLineIdSales,
                        projBudgetAllocationLine.RecId));

                    throw error("@Proj:ProjBudgetAllocationLineSaleError");
                }

                if (!projBudgetReductionHistory.RecId || !projBudgetReductionHistory.ProjBudgetAllocationLineIdSales)
                {
                    projBudgetReductionHistory.ProjBudgetAllocationLineIdSales = projBudgetAllocationLine.RecId;
                }
            }

            NoYes insertRecord = NoYes::No;

            if (projBudgetReductionHistory.RecId)
            {
                projBudgetReductionHistory.CostAmountReduced = projBudgetReductionHistory.CostAmountReduced + costAmount;
                projBudgetReductionHistory.SalesAmountReduced = projBudgetReductionHistory.SalesAmountReduced + salesAmount;
                projBudgetReductionHistory.update();
            }
            else
            {
                projBudgetReductionHistory.ProjTransId = _projBudgetTransactionLine.transId();
                projBudgetReductionHistory.ProjTransType = _projBudgetTransactionLine.transType();
                projBudgetReductionHistory.ProjIdOrig = _projBudgetTransactionLine.projId();
                projBudgetReductionHistory.CostAmountReduced = costAmount;
                projBudgetReductionHistory.SalesAmountReduced = salesAmount;
                projBudgetReductionHistory.insert();
                _projBudgetTransactionLine.parmProjBudgetReductionHistory(projBudgetReductionHistory);
                insertRecord = NoYes::Yes;
            }

            if ((_projBudgetaryControlOn == ProjBudgetaryControlOn::CostsOnly
                    && !projBudgetReductionHistory.ProjBudgetAllocationLineIdCost)
                || (_projBudgetaryControlOn == ProjBudgetaryControlOn::RevenuesOnly
                    && !projBudgetReductionHistory.ProjBudgetAllocationLineIdSales)
                || (!projBudgetReductionHistory.ProjBudgetAllocationLineIdCost
                    && !projBudgetReductionHistory.ProjBudgetAllocationLineIdSales))
            {
                ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(classStr(ProjBudgetTransactionManager));
                
                logger.logError(strFmt(BudgetAllocationLineMissing,
                    ProjOpsFinancialsInstrumentationActivites::ProjBudgetAllocationLineMissing,
                    'ProjBudgetTransactionManager.decreaseBudgetV2()',
                    enum2Symbol(enumNum(NoYes), insertRecord),
                    enum2Symbol(enumNum(ProjBudgetaryControlOn), _projBudgetaryControlOn),
                    projBudgetReductionHistory.RecId,
                    projBudgetReductionHistory.ProjBudgetAllocationLineIdCost,
                    projBudgetReductionHistory.ProjBudgetAllocationLineIdSales));
            }

            if (_projForecastTableCost || _projForecastTableRevenue)
            {
                switch (_projBudgetTransactionLine.transType())
                {
                    case ProjTransType::Hour:
                        if (_projForecastTableCost)
                        {
                            ProjForecastEmpl projForecastEmpl = _projForecastTableCost as ProjForecastEmpl;
                            projForecastEmpl.selectForUpdate(true);
                            projForecastEmpl.CostPrice -= costAmount;
                            if (_projForecastTableRevenue && _projForecastTableCost.RecId == _projForecastTableRevenue.RecId)
                            {
                                projForecastEmpl.SalesPrice -= salesAmount;
                            }
                            projForecastEmpl.update();
                        }
                        
                        if (_projForecastTableRevenue && (!_projForecastTableCost || (_projForecastTableCost.RecId != _projForecastTableRevenue.RecId)))
                        {
                            ProjForecastEmpl projForecastEmpl = _projForecastTableRevenue as ProjForecastEmpl;
                            projForecastEmpl.selectForUpdate(true);
                            projForecastEmpl.SalesPrice -= salesAmount;
                            projForecastEmpl.update();
                        }

                        break;

                    case ProjTransType::Cost:
                        if (_projForecastTableCost)
                        {
                            ProjForecastCost projForecastCost = _projForecastTableCost as ProjForecastCost;
                            projForecastCost.selectForUpdate(true);
                            projForecastCost.CostPrice -= costAmount;
                            if (_projForecastTableRevenue && _projForecastTableCost.RecId == _projForecastTableRevenue.RecId)
                            {
                                projForecastCost.SalesPrice -= salesAmount;
                            }
                            projForecastCost.update();
                        }

                        if (_projForecastTableRevenue && (!_projForecastTableCost || (_projForecastTableCost.RecId != _projForecastTableRevenue.RecId)))
                        {
                            ProjForecastCost projForecastCost = _projForecastTableRevenue as ProjForecastCost;
                            projForecastCost.selectForUpdate(true);
                            projForecastCost.SalesPrice -= salesAmount;
                            projForecastCost.update();
                        }

                        break;

                    case ProjTransType::Item:
                        if (_projForecastTableCost)
                        {
                            ForecastSales forecastSales = _projForecastTableCost as ForecastSales;
                            forecastSales.selectForUpdate(true);
                            forecastSales.CostPrice -= costAmount;
                            if (_projForecastTableRevenue && _projForecastTableCost.RecId == _projForecastTableRevenue.RecId)
                            {
                                forecastSales.SalesPrice -= salesAmount;
                                forecastSales.Amount = forecastSales.calcLineAmount();
                            }
                            forecastSales.update();
                        }

                        if (_projForecastTableRevenue && (!_projForecastTableCost || (_projForecastTableCost.RecId != _projForecastTableRevenue.RecId)))
                        {
                            ForecastSales forecastSales = _projForecastTableRevenue as ForecastSales;
                            forecastSales.selectForUpdate(true);
                            forecastSales.SalesPrice -= salesAmount;
                            forecastSales.Amount = forecastSales.calcLineAmount();
                            forecastSales.update();
                        }

                        break;

                    case ProjTransType::Revenue:
                        if (_projForecastTableRevenue)
                        {
                            ProjForecastRevenue projForecastRevenue = _projForecastTableRevenue as ProjForecastRevenue;
                            projForecastRevenue.selectForUpdate(true);
                            projForecastRevenue.SalesPrice -= salesAmount;
                            projForecastRevenue.update();
                        }

                        break;
                }

                ret = true;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::UpdateConflictNotRecovered;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::Error)
        {
            throw Exception::Error;
        }

        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetAmountsForBudgetTransactionLine</Name>
				<Source><![CDATA[
    private container getBudgetAmountsForBudgetTransactionLine(ProjTable _projTable, ProjBudgetaryControlOn _projBudgetaryControlOn, ProjBudgetTransactionLine _projBudgetTransactionLine)
    {
        AmountMST budgetCostAmount, budgetSalesAmount;

        if (_projBudgetaryControlOn == ProjBudgetaryControlOn::RevenuesAndCosts || _projBudgetaryControlOn == ProjBudgetaryControlOn::CostsOnly)
        {
            budgetCostAmount = this.getBudgetForSelectedPeriod(
                _projTable.ProjId,
                _projBudgetTransactionLine.transType(),
                _projBudgetTransactionLine.categoryId(),
                _projBudgetTransactionLine.transDate(),
                _projTable.ProjBudgetInterval,
                _projTable.StartDate,
                ProjBudgetLineType::Cost,
                _projBudgetTransactionLine.parmProjBudgetLineCost() ? _projBudgetTransactionLine.parmProjBudgetLineCost().ActivityNumber : '');
        }

        if (_projBudgetaryControlOn == ProjBudgetaryControlOn::RevenuesAndCosts || _projBudgetaryControlOn == ProjBudgetaryControlOn::RevenuesOnly)
        {
            budgetSalesAmount = this.getBudgetForSelectedPeriod(
                _projTable.ProjId,
                _projBudgetTransactionLine.transType(),
                _projBudgetTransactionLine.categoryId(),
                _projBudgetTransactionLine.transDate(),
                _projTable.ProjBudgetInterval,
                _projTable.StartDate,
                ProjBudgetLineType::Revenue,
                _projBudgetTransactionLine.parmProjBudgetLineRevenue() ? _projBudgetTransactionLine.parmProjBudgetLineRevenue().ActivityNumber : '');
        }

        return [budgetCostAmount, budgetSalesAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBudgetDefinedForBudgetTransactionLine</Name>
				<Source><![CDATA[
    private boolean isBudgetDefinedForBudgetTransactionLine(ProjId _projId, ProjBudgetTransactionLine _projBudgetTransactionLine)
    {
        boolean ret = false;

        ProjTable projTable = ProjTable::find(_projId);

        if (projTable)
        {
            if (_projBudgetTransactionLine.parmProjBudget())
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>keyValueCostRevenue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the key values (Cost and Revenue) that are associated with the current transaction.
    /// </summary>
    /// <param name="_budgetTransactionLine">
    ///    An object of the <c>ProjBudgetTransactionLine</c> class.
    /// </param>
    /// <returns>
    ///    A container with the keys and transaction date.
    /// </returns>
    private container keyValueCostRevenue(ProjBudgetTransactionLine _budgetTransactionLine)
    {
        TransDate transDate = _budgetTransactionLine.transDate();
        FiscalCalendarYear fiscalCalendarYear = FiscalCalendarYear::findYearByCalendarDate(this.fiscalCalendarRecId(), transDate);
        FiscalCalendarPeriod fiscalCalendarPeriod = this.getFiscalYearPeriod(transDate);

        ProjTable projTable = ProjTable::find(_budgetTransactionLine.projId());
        if (projTable.UseAlternateProject)
        {
            projTable = ProjTable::find(projTable.AlternateBudgetProject);
        }

        _budgetTransactionLine.setBudgetInformation(projTable.ProjId);

        str keyCost = '';
        str keyRevenue = '';

        ProjActivityNumber activityNumberCost = _budgetTransactionLine.parmProjBudgetLineCost() ? _budgetTransactionLine.parmProjBudgetLineCost().ActivityNumber : '';
        ProjActivityNumber activityNumberRevenue = _budgetTransactionLine.parmProjBudgetLineRevenue() ? _budgetTransactionLine.parmProjBudgetLineRevenue().ActivityNumber : '';

        switch (projTable.ProjBudgetInterval)
        {
            case ProjBudgetInterval::TotalBudget, ProjBudgetInterval::ProjectToDate :
                keyCost = projTable.ProjId + '#' +  _budgetTransactionLine.categoryId() + '#' + activityNumberCost;
                keyRevenue = projTable.ProjId + '#' +  _budgetTransactionLine.categoryId() + '#' + activityNumberRevenue;
                break;
            case ProjBudgetInterval::TotalYear :
                keyCost = projTable.ProjId + '#' +  _budgetTransactionLine.categoryId() + '#' + activityNumberCost + '#' + strFmt('%1', fiscalCalendarYear.RecId);
                keyRevenue = projTable.ProjId + '#' +  _budgetTransactionLine.categoryId() + '#' + activityNumberRevenue + '#' + strFmt('%1', fiscalCalendarYear.RecId);
                transDate = fiscalCalendarYear.EndDate;
                break;
            case ProjBudgetInterval::CurrentPeriod:
                keyCost = projTable.ProjId + '#' +  _budgetTransactionLine.categoryId() + '#' + activityNumberCost + '#' + strFmt('%1', fiscalCalendarYear.RecId) + '#' + strFmt('%1', fiscalCalendarPeriod.RecId);
                keyRevenue = projTable.ProjId + '#' +  _budgetTransactionLine.categoryId() + '#' + activityNumberRevenue + '#' + strFmt('%1', fiscalCalendarYear.RecId) + '#' + strFmt('%1', fiscalCalendarPeriod.RecId);
                transDate = fiscalCalendarPeriod.EndDate;
                break;
            case ProjBudgetInterval::YearToDate:
                keyCost = projTable.ProjId + '#' +  _budgetTransactionLine.categoryId() + '#' + activityNumberCost + '#' + strFmt('%1', fiscalCalendarYear.RecId);
                keyRevenue = projTable.ProjId + '#' +  _budgetTransactionLine.categoryId() + '#' + activityNumberRevenue + '#' + strFmt('%1', fiscalCalendarYear.RecId);
                break;
        }

        return [keyCost, keyRevenue, transDate, projTable.ProjBudgetInterval, projTable.StartDate, projTable.ProjId, projTable.ProjBudgetaryControlOn, _budgetTransactionLine.transType()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalTransactionBudgetCostRevenue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Obtains the total budget of a transaction based on a project ID, a category ID, and transaction
    ///    date.
    /// </summary>
    /// <param name="_projBudgetTransaction">
    ///    A <c>ProjBudgetTransaction</c> class object.
    /// </param>
    /// <returns>
    ///    A map that contains the total budget transactions.
    /// </returns>
    private Map getTotalTransactionBudgetCostRevenue(ProjBudgetTransaction _projBudgetTransaction)
    {
        Map map;
        str keyValueCost, keyValueRevenue;
        AmountMST costAmountTemp;
        AmountMST salesAmountTemp;
        AmountMST costAmountCurLine;
        AmountMST salesAmountCurLine;
        TransDate transDate;
        TransDate transDateTemp;
        ProjId projIdForBudgetReduction;
        CategoryId categoryId;
        SetEnumerator setEnumerator;
        ProjBudgetTransactionLine projBudgetTransactionLine;
        ProjBudgetInterval projBudgetInterval;
        TransDate projDate;
        ProjBudgetaryControlOn projBudgetaryControlOn;
        ProjTransType projTransType;
        ProjBudgetReductionHistory projBudgetReductionHistory;
        InventQty qty;
        InventQty qtyTemp;
        ProjLinePropertyId linePropertyId;
        ProjTable projTable;
        RefRecId sourceDocumentLine;

        void UpsertTransactionLine(str _keyValue, ProjCostSales _projCostSales, ProjActivityNumber _activityNumber)
        {
            if (map.exists(_keyValue))
            {
                [costAmountTemp,
                    salesAmountTemp,
                    projIdForBudgetReduction,
                    categoryId,
                    _activityNumber,
                    transDateTemp,
                    projBudgetInterval,
                    projDate,
                    projBudgetaryControlOn,
                    projTransType,
                    qtyTemp,
                    linePropertyId,
                    sourceDocumentLine] = map.lookup(_keyValue);

                map.remove(_keyValue);

                if (_projCostSales != ProjCostSales::Sales)
                {
                    costAmountTemp += costAmountCurLine;
                }
                if (_projCostSales != ProjCostSales::Cost)
                {
                    salesAmountTemp += salesAmountCurLine;
                }

                qtyTemp += qty;
                transDate = transDateTemp < transDate ? transDate : transDateTemp;
                
                map.insert(_keyValue,
                    [costAmountTemp,
                        salesAmountTemp,
                        projIdForBudgetReduction,
                        categoryId,
                        _activityNumber,
                        transDate,
                        projBudgetInterval,
                        projDate,
                        projBudgetaryControlOn,
                        projTransType,
                        qtyTemp,
                        linePropertyId,
                        sourceDocumentLine]);
            }
            else
            {
                costAmountTemp = 0;
                salesAmountTemp = 0;

                if (_projCostSales != ProjCostSales::Sales)
                {
                    costAmountTemp = costAmountCurLine;
                }
                if (_projCostSales != ProjCostSales::Cost)
                {
                    salesAmountTemp = salesAmountCurLine;
                }

                map.insert(_keyValue,
                    [costAmountTemp,
                        salesAmountTemp,
                        projIdForBudgetReduction,
                        projBudgetTransactionLine.categoryId(),
                        _activityNumber,
                        transDate,
                        projBudgetInterval,
                        projDate,
                        projBudgetaryControlOn,
                        projTransType,
                        qty,
                        linePropertyId,
                        sourceDocumentLine]);
            }
        }

        map = new Map(Types::String, Types::Container);
        setEnumerator = _projBudgetTransaction.getBudgetTransactionLinesEnumerator();

        while (setEnumerator.moveNext())
        {
            projBudgetTransactionLine = setEnumerator.current();

            [keyValueCost, keyValueRevenue, transDate, projBudgetInterval, projDate, projIdForBudgetReduction, projBudgetaryControlOn, projTransType] = this.keyValueCostRevenue(projBudgetTransactionLine);
            projTable = ProjTable::find(projIdForBudgetReduction);
            sourceDocumentLine = projBudgetTransactionLine.parmSourceDocumentLine();

            if (this.mustProjectTransactionBudget(projTable))
            {
                linePropertyId = projBudgetTransactionLine.linePropertyId();
                costAmountCurLine = BudgetTransactionManager::calculateTransAmountToAccountingAmount(projBudgetTransactionLine.costAmount(), projBudgetTransactionLine.costAmountCurrencyCode(), projBudgetTransactionLine.transDate()) ;
                salesAmountCurLine = BudgetTransactionManager::calculateTransAmountToAccountingAmount(projBudgetTransactionLine.salesAmount(), projBudgetTransactionLine.salesAmountCurrencyCode(), projBudgetTransactionLine.transDate()) ;
                qty = projBudgetTransactionLine.parmQty();

                if (forValidationOnly)
                {
                    select RecId from projBudgetReductionHistory where projBudgetReductionHistory.ProjTransId == projBudgetTransactionLine.transId();
                    if (projBudgetReductionHistory)
                    {
                        costAmountCurLine -= projBudgetReductionHistory.CostAmountReduced;
                        salesAmountCurLine -= projBudgetReductionHistory.SalesAmountReduced;
                    }
                }

                ProjActivityNumber activityNumberCost = projBudgetTransactionLine.parmProjBudgetLineCost() ? projBudgetTransactionLine.parmProjBudgetLineCost().ActivityNumber : '';
                ProjActivityNumber activityNumberRevenue = projBudgetTransactionLine.parmProjBudgetLineRevenue() ? projBudgetTransactionLine.parmProjBudgetLineRevenue().ActivityNumber : '';

                if (keyValueCost == keyValueRevenue)
                {
                    Debug::assert(activityNumberCost == activityNumberRevenue);
                    UpsertTransactionLine(keyValueCost, ProjCostSales::None, activityNumberCost);
                }
                else
                {
                    UpsertTransactionLine(keyValueCost, ProjCostSales::Cost, activityNumberCost);
                    UpsertTransactionLine(keyValueRevenue, ProjCostSales::Sales, activityNumberRevenue);
                }
            }
        }

        return map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCostAndSalesAmounts</Name>
				<Source><![CDATA[
    private container calculateCostAndSalesAmounts(ProjBudgetTransactionLine _projBudgetTransactionLine, ProjBudgetaryControlOn _projBudgetaryControlOn)
    {
        ProjTable projTable = ProjBudgetTransactionManager::getProjTableForBudgetControl(_projBudgetTransactionLine.projId());

        CostAmount costAmountOrignal, costAmountRemaining;
        SalesAmount salesAmountOrignal, salesAmountRemaining;

        if (isBudgetTransactionManagerV2Enabled)
        {
            container budgetCostAmounts = this.getTotalAndRemainingBudget(projTable.ProjId, _projBudgetTransactionLine.categoryId(), _projBudgetTransactionLine.parmProjBudgetLineCost().ActivityNumber);
            container budgetRevenueAmounts = this.getTotalAndRemainingBudget(projTable.ProjId, _projBudgetTransactionLine.categoryId(), _projBudgetTransactionLine.parmProjBudgetLineRevenue().ActivityNumber);
            costAmountOrignal = conPeek(budgetCostAmounts, 1);
            salesAmountOrignal = conPeek(budgetRevenueAmounts, 2);
            costAmountRemaining = conPeek(budgetCostAmounts, 3);
            salesAmountRemaining = conPeek(budgetRevenueAmounts, 4);
        }
        else
        {
            [costAmountOrignal, salesAmountOrignal, costAmountRemaining, salesAmountRemaining] = this.getTotalAndRemainingBudget(projTable.ProjId, _projBudgetTransactionLine.CategoryId(), _projBudgetTransactionLine.activityNumber());
        }

        CostAmount costAmount;
        SalesAmount salesAmount;

        if (_projBudgetaryControlOn == ProjBudgetaryControlOn::CostsOnly || _projBudgetaryControlOn == ProjBudgetaryControlOn::RevenuesAndCosts)
        {
            if (_projBudgetTransactionLine is ProjBudgetTransactionLine_ExpenseJournal)
            {
                ProjBudgetTransactionLine_ExpenseJournal projBudgetTransactionLine_ExpenseJournal = _projBudgetTransactionLine as ProjBudgetTransactionLine_ExpenseJournal;
                costAmount =  BudgetTransactionManager::calculateTransAmountToAccountingAmount(_projBudgetTransactionLine.costAmount(), _projBudgetTransactionLine.costAmountCurrencyCode(), _projBudgetTransactionLine.transDate(),0,false,projBudgetTransactionLine_ExpenseJournal.exchangeRate());
            }
            else
            {
                costAmount =  BudgetTransactionManager::calculateTransAmountToAccountingAmount(_projBudgetTransactionLine.costAmount(), _projBudgetTransactionLine.costAmountCurrencyCode(), _projBudgetTransactionLine.transDate(), 0, false, _projBudgetTransactionLine.parmExchRate());
            }
        }

        if (_projBudgetaryControlOn == ProjBudgetaryControlOn::RevenuesOnly || _projBudgetaryControlOn == ProjBudgetaryControlOn::RevenuesAndCosts
        && (!_projBudgetTransactionLine.linePropertyId() ||
            (ProjLineProperty::find(_projBudgetTransactionLine.linePropertyId()).ToBeInvoiced  &&
             ProjInvoiceTable::isBillingRuleInvoiceable(_projBudgetTransactionLine.ProjId(), _projBudgetTransactionLine.CategoryId(), '')))
        )
        {
            salesAmount = BudgetTransactionManager::calculateTransAmountToAccountingAmount(_projBudgetTransactionLine.salesAmount(), _projBudgetTransactionLine.salesAmountCurrencyCode(), _projBudgetTransactionLine.transDate());
        }

        return [costAmount, salesAmount];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>