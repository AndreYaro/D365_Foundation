<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfReqCalcExplodePlanning</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class that serves to the explosion of plan planning items.
/// </summary>
public class PmfReqCalcExplodePlanning extends ReqCalcExplodePo
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createProcessTasks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the tasks for the master planning process.
    /// </summary>
    /// <remarks>
    /// Note that the tasks inserted here should be similar to those inserted in the main ReqCalc class, except that the following tasks are not needed:
    /// - Pre-Futures
    /// - Pre-Actions
    /// - Auto-Coverage
    /// - Update dynamic plan
    /// - Autofirming
    /// - Statistics
    /// </remarks>
    protected void createProcessTasks()
    {
        reqCalcTaskController.insertTaskAndBundle(ReqProcessStatus::RecalculateItemLevels);
        reqCalcTaskController.insertTaskAndBundle(ReqProcessStatus::PreUpdate);
        reqCalcTaskController.insertTaskAndBundle(ReqProcessStatus::PostUpdate);
        reqCalcTaskController.insertTaskAndBundle(ReqProcessStatus::PreCoverage);
        reqCalcTaskController.insertTaskAndBundle(ReqProcessStatus::PostCoverage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates inventory transactions for plan planning item transaction.
    /// </summary>
    protected void insertData()
    {
        ReqTrans reqTrans;
        ReqSetup setup;

        while select ItemId
            from reqTrans
            where  reqTrans.RefId       == this.parmRefId()
                && reqTrans.PlanVersion == this.reqPlanVersionRefRecId()
                && reqTrans.RefType     == ReqRefType::PmfFormulaLine
                && reqTrans.Direction   != InventDirection::Receipt
                && reqTrans.PmfPlanGroupId
        {
            setup = reqPlanData.newReqSetup(reqTrans.ItemId);
            this.insertItemInventSum(setup,true);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// substantiates the object
    /// </summary>
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns an instance of the class
    /// </summary>
    /// <returns>returns instance</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static PmfReqCalcExplodePlanning construct()
    {
        return new PmfReqCalcExplodePlanning();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newReqTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns an initialized instance of the class.
    /// </summary>
    /// <param name="_reqTrans">Planning order trans record.</param>
    /// <returns>returns instance</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ReqCalcExplode newReqTrans(
        ReqTrans        _reqTrans)
    {
        PmfReqCalcExplodePlanning   reqCalcExplode;
        ReqPlanId                   reqPlanId           = ReqPlanVersion::find(_reqTrans.PlanVersion).ReqPlanId;

        reqCalcExplode = PmfReqCalcExplodePlanning::construct();
        reqCalcExplode.parmRefId(_reqTrans.RefId);
        reqCalcExplode.parmRefType(_reqTrans.RefType);
        reqCalcExplode.parmReqPlanId(reqPlanId);
        reqCalcExplode.parmInventTransOriginId(_reqTrans.InventTransOrigin);
        reqCalcExplode.parmReqCalcUpdate(ReqCalcUpdate::NetChangeMinimized);
        reqCalcExplode.parmDeleteCoverage(true);
        reqCalcExplode.parmAutoReserveCoverage(false);
        reqCalcExplode.parmDeleteMarking(false);

        return reqCalcExplode;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>