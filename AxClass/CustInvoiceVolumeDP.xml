<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInvoiceVolumeDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustInvoiceVolumeDP</c> class supports the <c>CustInvoiceVolume</c>Microsoft SQL Server
/// Reporting Services report.
/// </summary>
/// <remarks>
/// Declares the variables, tables, enumeration values, macros, and so on that can be used for the
/// <c>CustInvoiceVolume</c>Reporting Services report.
/// </remarks>
[
    SRSReportQueryAttribute(queryStr(CustInvoiceVolume)),
    SRSReportParameterAttribute(classStr(CustInvoiceVolumeContract))
]
public class CustInvoiceVolumeDP extends SRSReportDataProviderPreProcessTempDB
{
    CustTable custTable;
    CustInvoiceVolumeTmp custInvoiceVolumeTmp;
    TmpCustVendVolume tmpCustVendVolume;
    QueryRun queryRun_CustInvoiceVolume;

    AccountVATNum groupingBy;
    TransDate fromDate;
    TransDate toDate;
    AmountMST minAmount;
    boolean separateTaxAmount;

    str rangeAccount;
    str rangeCountryRegion;
    str rangeCountryRegionType;
    str rangeVATNum;

    List listBillingClassification;
    NoYes inclTransWithNoBillingClass;
    boolean isPublicSectorScenario;

    RecordInsertList recordInsertList;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the Amount range.
    /// </summary>
    /// <returns>
    /// The amount range value.
    /// </returns>
    public str amountRange()
    {
        return strfmt('%1..', queryValue(minAmount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the date range.
    /// </summary>
    /// <returns>
    /// The date range value.
    /// </returns>
    public str dateRange()
    {
        str dateRange = '';

        if (fromDate && toDate)
        {
            dateRange = strfmt('%1..%2', fromDate, toDate);
        }
        else
        {
            if (fromDate && !toDate)
            {
                dateRange = strfmt ('%1', fromDate);
            }
            if (!fromDate && toDate)
            {
                dateRange = strfmt ('%1', toDate);
            }
        }
        return dateRange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustInvoiceVolumetmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a temporary table.
    /// </summary>
    /// <returns>
    /// The <c>CustInvoiceVolumeTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(CustInvoiceVolumeTmp))
    ]
    public CustInvoiceVolumeTmp getCustInvoiceVolumetmp()
    {
        select custInvoiceVolumeTmp;
        return custInvoiceVolumeTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendCalcVolume</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class object based on the specified <c>AccountVATNum</c> enumeration value and
    /// ranges.
    /// </summary>
    /// <returns>
    /// An instance of the <c>CustVendCalcVolume</c> class.
    /// </returns>
    public CustVendCalcVolume initCustVendCalcVolume()
    {
        CustVendCalcVolume custCalc = CustVendCalcVolume::construct(groupingBy, separateTaxAmount);

        // Parameters: Date Range, Country/region Type, Country/region Id Range, Account Range.

        if (isPublicSectorScenario)
        {
            custCalc.custInvoiceQuery(this.dateRange(), this.rangeCountryRegionType(), this.rangeCountryRegion(), this.rangeAccount(), this.rangeVATNum(), listBillingClassification, inclTransWithNoBillingClass);

            if (inclTransWithNoBillingClass)
            {
                this.processProjInvoiceQuery(custCalc);
            }                
        }
        else
        {
            custCalc.custInvoiceQuery(this.dateRange(), this.rangeCountryRegionType(), this.rangeCountryRegion(), this.rangeAccount(), this.rangeVATNum());
            this.processProjInvoiceQuery(custCalc);
        }

        return custCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processProjInvoiceQuery</Name>
				<Source><![CDATA[
    private void processProjInvoiceQuery(CustVendCalcVolume _custCalc)
    {
        if (_custCalc is CustVendCalcVolumeAccount)
        {
            _custCalc.projInvoiceQueryV2(this.dateRange(), this.rangeCountryRegionType(), this.rangeCountryRegion(), this.rangeAccount(), this.rangeVATNum(), true);
        }
        else
        {
            _custCalc.projInvoiceQuery(this.dateRange(), this.rangeCountryRegionType(), this.rangeCountryRegion(), this.rangeAccount(), this.rangeVATNum());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustInvoiceVolumeTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records into the <c>CustInvoiceVolumeTmp</c> temporary table.
    /// </summary>
    private void insertCustInvoiceVolumeTmp()
    {
        this.initializeCustInvoiceVolumeTmp();
        recordInsertList.add(custInvoiceVolumeTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCustInvoiceVolumeTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>CustInvoiceVolumeTmp</c> buffer for the report.
    /// </summary>
    [Wrappable(true)]
    protected final void initializeCustInvoiceVolumeTmp()
    {
        custInvoiceVolumeTmp.clear();

        if (groupingBy == AccountVATNum::VATNum)
        {
            custInvoiceVolumeTmp.vatNum = tmpCustVendVolume.vatNum;
        }

        if (groupingBy == AccountVATNum::AccountNum)
        {
            custInvoiceVolumeTmp.AccountNum = tmpCustVendVolume.AccountNum;
        }

        custInvoiceVolumeTmp.Name = tmpCustVendVolume.Name;
        custInvoiceVolumeTmp.AmountMST = tmpCustVendVolume.AmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// This method is used to process the report business logic that is used by the
    /// <c>CustInvoiceVolume</c> report.
    /// </remarks>
    public void processReport()
    {
        CustInvoiceVolumeContract contract = this.parmDataContract() as CustInvoiceVolumeContract;
        groupingBy = contract.parmGroupingBy();
        fromDate = contract.parmFromDate();
        toDate = contract.parmToDate();
        minAmount = contract.parmMinimumAmount();
        separateTaxAmount = contract.parmAmountExclSalesTax();

        recordInsertList = new RecordInsertList(custInvoiceVolumeTmp.TableId, true, true, true, false, true, custInvoiceVolumeTmp);

        isPublicSectorScenario = CustBillingClassificationReportManager::isPublicSectorScenario(contract.parmBillingClassification());

        if (isPublicSectorScenario)
        {
            listBillingClassification = contract.parmBillingClassification();
            inclTransWithNoBillingClass = contract.parmInclTransWithNoBillingClass();
        }

        queryRun_CustInvoiceVolume = new QueryRun(this.parmQuery());

        this.updateQuery();
        this.run();

        queryRun_CustInvoiceVolume.setCursor(this.tmpCustVendVolume());

        while (queryRun_CustInvoiceVolume.next())
        {
            tmpCustVendVolume = queryRun_CustInvoiceVolume.get(tableNum(TmpCustVendVolume));

            this.insertCustInvoiceVolumeTmp();
        }

        recordInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rangeAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the account range.
    /// </summary>
    /// <param name="_rangeAccount">
    /// The account number range to set; optional.
    /// </param>
    /// <returns>
    /// The range value.
    /// </returns>
    public str rangeAccount(str _rangeAccount = rangeAccount)
    {
        rangeAccount = _rangeAccount;
        return rangeAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rangeCountryRegion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the country region range.
    /// </summary>
    /// <param name="_rangeCountryRegion">
    /// The country region field range to set; optional.
    /// </param>
    /// <returns>
    /// The range value.
    /// </returns>
    public str rangeCountryRegion(str _rangeCountryRegion = rangeCountryRegion)
    {
        rangeCountryRegion = _rangeCountryRegion;
        return rangeCountryRegion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rangeCountryRegionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the country region type range.
    /// </summary>
    /// <param name="_rangeCountryRegionType">
    /// The country region type field range to set; optional.
    /// </param>
    /// <returns>
    /// The range value.
    /// </returns>
    public str rangeCountryRegionType(str _rangeCountryRegionType = rangeCountryRegionType)
    {
        rangeCountryRegionType = _rangeCountryRegionType;
        return rangeCountryRegionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rangeVATNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <paramref name="_rangeVATNum" /> parameter.
    /// </summary>
    /// <param name="_rangeVATNum">
    /// The value to set; optional.
    /// </param>
    /// <returns>
    /// The range value.
    /// </returns>
    public str rangeVATNum(str _rangeVATNum = rangeVATNum)
    {
        rangeVATNum = _rangeVATNum;
        return rangeVATNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the <c>CustVendCalcVolume</c> object.
    /// </summary>
    /// <remarks>
    /// Calculates the accumulated volume in the <c>tmpCustVendVolume</c> temporary table.
    /// </remarks>
    public void run()
    {
        CustVendCalcVolume custCalc = this.initCustVendCalcVolume();
        tmpCustVendVolume = custCalc.accumulateVolume();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpCustVendVolume</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TmpCustVendVolume</c> temporary table.
    /// </summary>
    /// <returns>
    /// The <c>TmpCustVendVolume</c> temporary table.
    /// </returns>
    public TmpCustVendVolume tmpCustVendVolume()
    {
        return tmpCustVendVolume;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the report query.
    /// </summary>
    /// <remarks>
    /// This method modifies the query based on ranges.
    /// </remarks>
    public void updateQuery()
    {
        QueryBuildDataSource queryBuildDataSource;
        QueryBuildRange queryBuildRange;
        int currentRange;
        int currentDataSource;
        Query query;

        if (!queryRun_CustInvoiceVolume)
        {
            queryRun_CustInvoiceVolume = new QueryRun(query);
        }

        query = queryRun_CustInvoiceVolume.query();

        for (currentDatasource = query.dataSourceCount(); currentDatasource > 0; currentDatasource--)
        {
            queryBuildDataSource = query.dataSourceNo(currentDatasource);

            for (currentRange = queryBuildDataSource.rangeCount(); currentRange > 0 ; currentRange --)
            {
                queryBuildRange = queryBuildDataSource.range(currentRange);

                if (tableid2name(queryBuildDataSource.table()) == tablestr(CustTable) &&
                    fieldid2name(queryBuildDataSource.table(), queryBuildRange.field()) == fieldstr(CustTable, AccountNum))
                {
                    this.rangeAccount(queryBuildRange.value());
                }

                if (tableid2name(queryBuildDataSource.table()) == tablestr(CustTable) &&
                    fieldid2name(queryBuildDataSource.table(), queryBuildRange.field()) == fieldstr(CustTable, vatNum))
                {
                    this.rangeVATNum(queryBuildRange.value());
                }

                if (tableid2name(queryBuildDataSource.table()) == tablestr(TmpCustVendVolume))
                {
                    if (fieldid2name(queryBuildDataSource.table(), queryBuildRange.field()) == fieldstr(TmpCustVendVolume, AmountMST))
                    {
                        queryBuildRange.value(this.amountRange());
                    }

                    if (fieldid2name(queryBuildDataSource.table(), queryBuildRange.field()) == fieldstr(TmpCustVendVolume, CountryRegionId))
                    {
                        this.rangeCountryRegion(queryBuildRange.value());
                    }

                    if (fieldid2name(queryBuildDataSource.table(), queryBuildRange.field()) == fieldstr(TmpCustVendVolume, CountryRegionType))
                    {
                        this.rangeCountryRegionType(queryBuildRange.value());
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>