<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EximEntitlement_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The exim entitlement class.
/// </summary>
abstract class  EximEntitlement_IN extends EximIncentiveSchemes_IN
{
    EximDEPBSchemesTableRecId_IN schemeTableRecId;
    EximDEPBSchemesTable_IN      depbSchemesTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object  dialog()
    {
        Args                    args = new Args();
        FormRun                 eximBasisRelatedForm;

        args.caller(this);
        args.record(EximDEPBSchemesTable_IN::findRecId(schemeTableRecId));

        switch (classidget(this))
        {
            case classnum(EximEntitlement_ExportOrder_IN) :
                if (hasMenuItemAccess(menuitemdisplaystr(TmpEximDEPBExportOrderTable_IN),  MenuItemType::Display))
                {
                    args.name(formstr(TmpEximDEPBExportOrderTable_IN));
                }
                else
                {
                    throw error(strfmt("@SYS104222", menuitemdisplaystr(TmpEximDEPBExportOrderTable_IN)));
                }
                break;

            default :
                throw error(strfmt("@SYS19306",funcname()));
        }
        eximBasisRelatedForm = classFactory.formRunClass(args);
        eximBasisRelatedForm.init();

        return eximBasisRelatedForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSchemeTableRecId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RefRecId parmSchemeTableRecId(EximDEPBSchemesTableRecId_IN _schemeTableRecId = schemeTableRecId)
    {
        schemeTableRecId = _schemeTableRecId;

        return schemeTableRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container  packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateScheme</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates table of the scheme.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateScheme()
    {
        depbSchemesTable = EximDEPBSchemesTable_IN::findRecId(schemeTableRecId, true);
        if (depbSchemesTable)
        {
            depbSchemesTable.Status = EximAuthorizationStatus_IN::Applied;
            depbSchemesTable.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the instance of the <c>EximEntitlement_IN</c> class.
    /// </summary>
    /// <param name="_eximDEPBBasis">
    /// The exim DEPB basis.
    /// </param>
    /// <returns>
    /// The instance of the <c>EximEntitlement_IN</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static EximEntitlement_IN construct(EximDEPBBasis_IN _eximDEPBBasis)
    {
        switch (_eximDEPBBasis)
        {
            case  EximDEPBBasis_IN::ExportOrder : return new EximEntitlement_ExportOrder_IN();
        }

        throw error(strfmt("@SYS19306", funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args  args)
    {
        Common                  record;
        FormDataSource          formDataSource;
        EximEntitlement_IN      eximEntitlementLoc;

        if (!args)
        {
            throw error("@SYS25407");
        }
        record     = args.record();

        if (record)
        {
            formDataSource  = FormDataUtil::getFormDataSource(args.record());
            eximEntitlementLoc = EximEntitlement_IN::construct(EximDEPBBasis_IN::ExportOrder);
            eximEntitlementLoc.getLast();
            eximEntitlementLoc.parmSchemeTableRecId(record.RecId);
            if (eximEntitlementLoc.prompt())
            {
                eximEntitlementLoc.runOperation();
            }
            EximEntitlement_IN::updateCallerDataSource(formDataSource,
                                                         true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCallerDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates data source of the caller.
    /// </summary>
    /// <param name="_formDataSource">
    /// The data source.
    /// </param>
    /// <param name="_recordExists">
    /// If 'True', the record exists.
    /// </param>
    // Method set to client static to be run on the client to minimize the interaction between tiers.
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected static void updateCallerDataSource(
        Object  _formDataSource = null,
        boolean _recordExists   = false)
    {
        if (_recordExists)
        {
            _formDataSource.executeQuery();
        }
        else
        {
            _formDataSource.reSearch();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>