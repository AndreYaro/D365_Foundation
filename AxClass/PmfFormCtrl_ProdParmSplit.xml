<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_ProdParmSplit</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class serves as a controller for the standard ProdParmSplit form. It will switch designs between Process Batch order layout
/// and standard Production order layout.
/// </summary>
public class PmfFormCtrl_ProdParmSplit extends PmfFormCtrl
{
    ProdMultiSplit                  prodMultiSplit;
    boolean                         calledFromFormula;
    PdsCWValidation_ProdParmSplit   cwValidation;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dataSourceActivePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called from the ProdParmSplit form when the user selects a ProdParmSplit record. It calls the similarily named
    /// method on class PdsCWValidation_ProdParmSplit.
    /// </summary>
    /// <example>
    /// PmfFormCtrl_ProdParmSplit.dataSourceActivePost();
    /// </example>
    public void dataSourceActivePost()
    {
        if (cwValidation)
        {
            cwValidation.dataSourceActivePost();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceValidateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Form control method to validate the field data for the data source before writing.
    /// </summary>
    /// <returns>true if the field data is valid; false otherwise.</returns>
    /// <remarks>
    /// This method should be called from the form data sources 'validateWrite' method.
    /// </remarks>
    public boolean dataSourceValidateWrite()
    {
        boolean         ret;
        ProdParmSplit   prodParmSplit;
        ProdTable       prodTable;

        ret = super();

        if (ret && this.isFormulaEnabled())
        {
            prodParmSplit = buffer;
            prodTable     = ProdTable::find(prodParmSplit.ProdId);

            ret = ReqTransPoSplit::pmfFormulaMultipleAndBOMValid(
                prodTable.ItemId, prodTable.inventDim(), prodTable.bomId,
                prodTable.RouteId, prodTable.bomDate, prodTable.DlvDate,
                prodTable.QtySched, prodParmSplit.QtySplit);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// When field looked up is production id on table ProdParmSplit, method performs a lookup on ProdTable records, filtering on
    /// production type (process or standard).
    /// </summary>
    /// <param name="_fieldId" >
    /// The looked up field's id on the ProdParmSplit record.
    /// </param>
    /// <param name="_formControl">
    /// The form control being lookup up on.
    /// </param>
    /// <param name="_filterStr">
    /// Not currently used.
    /// </param>
    /// <example>
    /// pmfFormCtrl_ProdParmSplit.fieldLookup(fieldnum(ProdParmSplit, ProdId), a_FormControl, '');
    /// </example>
    public void fieldLookup(
        fieldId     _fieldId,
        FormControl _formControl,
        str         _filterStr = '')
    {
        switch (_fieldId)
        {
            case fieldnum(ProdParmSplit, ProdId) :
                if (this.isFormulaEnabled())
                {
                    ProdTable::lookupStdOnlyProd(_formControl, ProdType::Process);
                }
                else
                {
                    ProdTable::lookupStdOnlyProd(_formControl);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called from the ProdParmSplit form when the user modifies the value of the ProdId field. The super() call launches a
    /// catch weight
    /// validation on the quantity fields. It also refreshes the quantity fields to enabled/disabled.
    /// </summary>
    /// <param name="_fieldId">
    /// The field id modified on ProdParmSplit record.
    /// </param>
    /// <example>
    /// pmfFormCtrl_ProdParmSplit.fieldModified(fieldnum(ProdParmSplit, ProdId));
    /// </example>
    public void fieldModified(fieldId _fieldId)
    {
        PmfFormCtrl subCtrl;
        int         i;

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(ProdParmSplit, ProdId):
                if (subFormCtrls)
                {
                    for (i = 1; i <= subFormCtrls.lastIndex(); i++)
                    {
                        subCtrl = subFormCtrls.value(i);
                        subCtrl.updateDesign();
                    }
                }

                this.updateDesign();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Switches the design on the form depending on whether order is a batch or not.
    /// </summary>
    /// <exception cref="wrongUseOfFunction" label="funcname()">Launched when the class was not instanciated from the ProdParmSplit
    /// form.
    /// </exception>
    /// <example>
    /// pmfFormCtrl_ProdParmSplit.initPost();
    /// </example>
    public void initPost()
    {
        super();

        if (this.isFormulaEnabled())
        {
            FormStringControl fsc = this.parmFormRun().design().controlName(formControlStr(ProdParmSplit,ProdParmSplit_ProdId));
            fsc.label("@PDS1470");
            fsc.helpText("@PDS1471");
            fsc = this.parmFormRun().design().controlName(formControlStr(ProdParmSplit,Identification_ProdId));
            fsc.label("@PDS1470");
            fsc.helpText("@PDS1471");
        }
        else if (this.isCatchWeightEnabled())
        {
            this.parmFormRun().design().controlName(formControlStr(ProdParmSplit,ProdParmSplit_PdsCWQtySplit)).visible(false);
            this.parmFormRun().design().controlName(formControlStr(ProdParmSplit,Split_PdsCWQtySplit)).visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Detects if the form was started from a batch order context or a standard production context.
    /// </summary>
    /// <exception cref="wrongUseOfFunction" label="funcname()">
    /// Launched when the class was not instanciated from the ProdParmSplit form.
    /// </exception>
    /// <example>
    /// pmfFormCtrl_ProdParmSplit.initPre();
    /// </example>
    public void initPre()
    {
        ProdParmSplit prodParmSplit;

        if (!this.parmFormRun())
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        prodMultiSplit = this.parmFormRun().args().caller().runbase();

        select firstonly ProdId
            from prodParmSplit
            where prodParmSplit.ParmId == prodMultiSplit.parmId();

        calledFromFormula =
            ProdTable::find(prodParmSplit.ProdId).ProdType == ProdType::Process;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether the current form was opened from a batch context or a standard context.
    /// </summary>
    /// <returns>
    /// Whether the current form was opened from a batch context or a standard context.
    /// </returns>
    public boolean isFormulaEnabled()
    {
        return calledFromFormula;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Protected 'new'.
    /// </summary>
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsCWValidation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method is used to set PdsCWValidation_ProdParmSplit object in
    /// </summary>
    /// <param name="_pdsCWValidation">
    /// PdsCWValidation_ProdParmSplit object.
    /// </param>
    /// <returns>
    /// The catch weight validation object
    /// </returns>
    protected PdsCWValidation_ProdParmSplit parmPdsCWValidation(
        PdsCWValidation_ProdParmSplit _pdsCWValidation = cwValidation)
    {
        if (!prmisdefault(_pdsCWValidation))
        {
            cwValidation = _pdsCWValidation;
        }

        return cwValidation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// A simple construct.
    /// </summary>
    /// <returns>
    /// A new instance of PmfFormCtrl_ProdParmSplit.
    /// </returns>
    public static PmfFormCtrl_ProdParmSplit construct()
    {
        return new PmfFormCtrl_ProdParmSplit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCatchWeightSubFormCtrl</Name>
				<Source><![CDATA[
    protected void addCatchWeightSubFormCtrl()
    {
        if (this.isCatchWeightEnabled())
        {
            PdsCWFormCtrl formCtrl = PdsCWFormCtrl_Std::construct();
            formCtrl.parmCWValidation(PdsCWValidation_ProdParmSplit::construct());
            formCtrl.parmFieldIds(PdsCWValidation::fieldMapFromContainers([[fieldnum(ProdParmSplit, QtySplit), fieldNum(ProdParmSplit,PdsCWQtySplit), false]]));
            
            this.addSubFormCtrl(formCtrl);
            this.parmPdsCWValidation(formCtrl.parmCWValidation());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new instance of PmfFormCtrl_ProdParmSplit containing a catch weight form control.
    /// </summary>
    /// <param name="_formRun">
    /// The form to be managed.
    /// </param>
    /// <returns>
    /// A new instance of PmfFormCtrl_ProdParmSplit.
    /// </returns>
    public static PmfFormCtrl_ProdParmSplit constructFromForm(FormRun _formRun)
    {
        PmfFormCtrl_ProdParmSplit   pmfFormCtrl_ProdParmSplit = PmfFormCtrl_ProdParmSplit::construct();

        pmfFormCtrl_ProdParmSplit.addCatchWeightSubFormCtrl();
        pmfFormCtrl_ProdParmSplit.parmFormRun(_formRun);

        return pmfFormCtrl_ProdParmSplit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>