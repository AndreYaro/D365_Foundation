<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSRFErrorCtrl</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSRFErrorCtrl</c> class is used to create tree control for RF errors.
/// </summary>
class WHSRFErrorCtrl
{
    FormTreeControl         tree;
    WHSRFErrorLog           errorLog;

    TmpInfoLog              tmpInfoLog;
    int                     offsetSeq;
    int                     treeItems;
    int                     treeId[];
    int                     firstPrefix;
    int                     sequenceCounter;

	}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildTree</Name>
				<Source><![CDATA[
    /// <summary>
	/// Builds infolog error tree.
	/// </summary>
    void buildTree()
    {
        SysInfologEnumerator    enum = SysInfologEnumerator::newData(errorLog);
        TmpInfolog              tmpLookup;
        int                     i = 1;
        int                     j;
        int                     batchCount;
        int                     oldParentId;

        treeItems = 0;
        offsetSeq = 1;

        this.clearTree();

        if (conLen(errorLog) == 0)
        {
            return;
        }

        enum.reset();
        enum.moveNext();

        SysInfologMessageStruct logLine = SysInfologMessageStruct::construct(enum.currentMessage());

        tmpInfoLog = this.selectInfoLog();
        tmpInfoLog.recordLevelSecurity(true);

        this.newHeadLine(logLine);

        boolean hasPrefix = false;

        enum.reset();
        i = 1;

        while (enum.moveNext())
        {
            logLine      = SysInfologMessageStruct::construct(enum.currentMessage());
            int parentId = 1;   // header has id = 1

            for (j = firstPrefix; j <= logLine.prefixDepth(); ++j)
            {
                tmpLookup.setTmpData(tmpInfoLog);
                tmpLookup = this.selectInfolog2(logLine.preFixTextElement(j), parentid);

                if (tmpLookup)
                {
                    parentId = tmpLookup.Seq;
                }
                else
                {
                    batchCount           = 0;
                    tmpInfoLog.Name      = logLine.preFixTextElement(j);
                    tmpInfoLog.Parent    = parentId;
                    tmpInfolog.Prefix    = tmpInfolog.Name;
                    tmpInfolog.ConIdx    = 0;
                    tmpInfoLog.Seq       = this.sequence();
                    tmpInfoLog.insert();
                    parentId             = tmpInfoLog.Seq;
                }
            }
            if (parentId != oldParentId)
            {
                batchCount  = 0;
                oldParentId = parentId;
            }

            tmpInfoLog.Parent   = parentId;
            tmpInfoLog.Seq      = this.sequence();

            tmpInfoLog.Name     = logLine.message();
            tmpInfolog.ConIdx   = i;

            tmpInfoLog.doInsert();
            ++batchCount;

            ++i;
        }

        while select forupdate tmpInfoLog
            order by Seq
            where tmpInfoLog.Seq > offsetSeq
        {
            SysInfoLogStr niceName = strRemoveCr(substr(tmpInfoLog.Name, 1, 254));

            FormTreeItem  treeItem = new FormTreeItem(niceName);
            ++treeItems;
            treeItem.data(0);
            treeItem.stateExpanded(true);

            treeId[tmpInfoLog.Seq] = tree.addItem(treeId[tmpInfoLog.Parent], 0, treeItem);
            if (treeId[tmpInfoLog.Seq])
            {
                treeItem = tree.getItem(treeId[tmpInfoLog.Seq]);

                if (tmpInfoLog.ConIdx)
                {
                    tmpInfoLog.delete();
                }
                else
                {
                    offsetSeq = tmpInfolog.Seq;
                    treeItem.children(true);
                }
                tree.setItem(treeItem);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTree</Name>
				<Source><![CDATA[
    /// <summary>
	/// Clears infolog error tree.
	/// </summary>
    void clearTree()
    {
        treeItems      = 0;
        tree.deleteAll();
        this.emptyTmpInfolog();
    }

]]></Source>
			</Method>
			<Method>
				<Name>emptyTmpInfolog</Name>
				<Source><![CDATA[
    /// <summary>
	/// Clears temporary infolog setup.
	/// </summary>
    void emptyTmpInfolog()
    {
        tmpInfoLog            = null;
        sequenceCounter       = 0;
        offsetSeq             = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newHeadLine</Name>
				<Source><![CDATA[
    /// <summary>
	/// Creates new headline.
	/// </summary>
	/// <param name="logline">
	/// Log line.
	/// </param>
	/// <exception cref="Exception::Error">
	/// Infolog name not found.
	/// </exception>
    void newHeadLine(SysInfologMessageStruct logline)
    {
        tmpInfoLog.recordLevelSecurity(true);

        if (logline.prefixDepth())
        {
            firstPrefix = 2;
            tmpInfoLog.Name = logline.preFixTextElement(1);
        }
        else
        {
            firstPrefix = 1;
            tmpInfoLog.Name = "@SYS14327";
        }

        tmpInfoLog.Parent    = 0;
        tmpInfoLog.Prefix    = tmpInfoLog.Name;
        tmpInfoLog.Seq       = this.sequence();
        tmpInfoLog.insert();

        FormTreeItem formTreeItem = new FormTreeItem(tmpInfoLog.Name);
        formTreeItem.stateBold(true);
        formTreeItem.stateExpanded(true);

        treeId[1] = tree.addItem(0, FormTreeAdd::First, formTreeItem);
        if (!treeId[1])
        {
            throw error(strfmt("@SYS76877", tmpInfoLog.Name));
        }

        tree.selectSetFirstVisible(treeId[1]);
        formTreeItem = tree.getItem(treeId[1]);
        tree.setItem(formTreeItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmErrorLog</Name>
				<Source><![CDATA[
    WHSRFErrorLog parmErrorLog (WHSRFErrorLog _errorLog = errorLog)
    {
        errorLog = _errorLog;

        return errorLog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTree</Name>
				<Source><![CDATA[
    FormTreeControl parmTree(FormTreeControl _tree = tree)
    {
        tree = _tree;

        return tree;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectInfolog</Name>
				<Source><![CDATA[
    private TmpInfolog selectInfolog()
    {
        TmpInfolog tmpinfolog2;

        tmpinfolog2.setTmpData(tmpInfoLog);

        select tmpinfolog2
            where tmpinfolog2.Seq == 1;

        if (tmpinfolog2)
        {
            return tmpinfolog2;
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectInfolog2</Name>
				<Source><![CDATA[
    private TmpInfolog selectInfolog2(SysInfologPrefix _prefix, int _parentid)
    {
        TmpInfolog tmpinfolog2;

        tmpinfolog2.setTmpData(tmpInfoLog);

        select tmpinfolog2
            where tmpinfolog2.Parent == _parentid   &&
                  tmpinfolog2.Prefix == _prefix;

        if (tmpinfolog2)
        {
            return tmpinfolog2;
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sequence</Name>
				<Source><![CDATA[
    private int sequence()
    {
        ++sequenceCounter;

        return sequenceCounter;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
