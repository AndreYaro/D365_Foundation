<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EximUpd_ReExport_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The exim update reexport class.
/// </summary>
public final class EximUpd_ReExport_IN extends EximUpdate_IN implements BatchRetryable
{
    EximLicenseNum_IN certificateNum;
    EximLicenseNum_IN origLicenseNum;
    TransDateTime     certificateIssueDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initAuthorizationScheme</Name>
				<Source><![CDATA[
        public void initAuthorizationScheme()
    {
        super();

        depbSchemesTable = EximDEPBSchemesTable_IN::findRecId(schemeTableRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCertificateIssueDateTime</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public TransDateTime parmCertificateIssueDateTime(TransDateTime _certificateIssueDate = certificateIssueDate)
    {
        certificateIssueDate = _certificateIssueDate;

        return certificateIssueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCertificateNumber</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public EximLicenseNum_IN parmCertificateNumber(EximLicenseNum_IN _certificateNum = certificateNum)
    {
        certificateNum = _certificateNum;

        return certificateNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrigLicenseNumber</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public EximLicenseNum_IN parmOrigLicenseNumber(EximLicenseNum_IN _origLicenseNum = origLicenseNum)
    {
        ;

        origLicenseNum = _origLicenseNum;

        return origLicenseNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
        public void run()
    {
        container schemeValues;
        ;

        schemeValues = [schemeTableId,
                        schemeTableRecId,
                        origLicenseNum,
                        licenseNum,
                        issueDateTime,
                        certificateNum,
                        certificateIssueDate,
                        importExpiryDateTime,
                        txt,
                        totalDutyEntitlement,
                        totalComponentAmount,
                        taxAccountGroup,
                        iECNumber,
                        transDate];

        EximUpd_ReExport_IN::runOnServer(
            schemeType,
            schemeValues,
            tmpTaxDetails,
            tmpEximEntitlementDetails);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAndPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates and posts exim entitlement details.
    /// </summary>
    public void updateAndPost()
    {
        super();

        if (depbSchemesLine)
        {
            depbSchemesLine.CertificateNum   = certificateNum;
            depbSchemesLine.RevisionDateTime = DateTimeUtil::removeTimeZoneOffset(certificateIssueDate, DateTimeUtil::getUserPreferredTimeZone());
            depbSchemesLine.update();

            update_recordset eximEntitlementDetails
                setting OrigLicenseNum = origLicenseNum
                    where eximEntitlementDetails.SchemesLineRecId == depbSchemesLine.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAuthorizationScheme</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates authorization scheme.
    /// </summary>
    protected void updateAuthorizationScheme()
    {
        ;

        switch (schemeTableId)
        {
            case tablenum(EximDEPBSchemesTable_IN) :
                depbSchemesTable = EximDEPBSchemesTable_IN::findRecId(schemeTableRecId, true);

                if (depbSchemesTable)
                {
                    depbSchemesTable.LicenseNum    = licenseNum;
                    depbSchemesTable.IssueDateTime = DateTimeUtil::removeTimeZoneOffset(issueDateTime, DateTimeUtil::getUserPreferredTimeZone());
                    depbSchemesTable.Status        = EximAuthorizationStatus_IN::Approved;
                    depbSchemesTable.update();
                }

                this.updateDEPBSchemeLine();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateIncentiveScheme</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update incentive scheme.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateIncentiveScheme()
    {
        #OCCRetryCount
        ;

        try
        {
            ttsbegin;
            this.updateAuthorizationScheme();

            this.updateAndPost();
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method run on the server side.
    /// </summary>
    /// <param name="_schemeType">
    /// The scheme type.
    /// </param>
    /// <param name="_schemeValues">
    /// The scheme values.
    /// </param>
    /// <param name="_tmpTaxDetails">
    /// The tmp tax details.
    /// </param>
    /// <param name="_tmpEximEntitlementDetails">
    /// The tmp exim entitlement details information.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void runOnServer(
        EximAuthorizationType_IN     _schemeType,
        container                    _schemeValues,
        TmpEximTaxDetails_IN         _tmpTaxDetails,
        TmpEximEntitlementDetails_IN _tmpEximEntitlementDetails)
    {
        EximUpd_ReExport_IN eximUpdReExport = new EximUpd_ReExport_IN();
        ;

        eximUpdReExport.parmSchemeType(_schemeType);
        eximUpdReExport.parmTmpEximTaxDetails(_tmpTaxDetails);
        eximUpdReExport.parmTmpEximEntitlementDetails(_tmpEximEntitlementDetails);

        eximUpdReExport.parmSchemeTableId(conpeek(_schemeValues, 1));
        eximUpdReExport.parmSchemeTableRecId(conpeek(_schemeValues, 2));
        eximUpdReExport.parmOrigLicenseNumber(conpeek(_schemeValues, 3));
        eximUpdReExport.parmLicenseNumber(conpeek(_schemeValues, 4));
        eximUpdReExport.parmIssueDateTime(conpeek(_schemeValues, 5));
        eximUpdReExport.parmCertificateNumber(conpeek(_schemeValues, 6));
        eximUpdReExport.parmCertificateIssueDateTime(conpeek(_schemeValues, 7));
        eximUpdReExport.parmImportExpiryDateTime(conpeek(_schemeValues, 8));
        eximUpdReExport.parmTxt(conpeek(_schemeValues, 9));
        eximUpdReExport.parmTotalDutyEntitlement(conpeek(_schemeValues, 10));
        eximUpdReExport.parmTotalComponentAmount(conpeek(_schemeValues, 11));
        eximUpdReExport.parmTaxAccountGroup(conpeek(_schemeValues, 12));
        eximUpdReExport.parmIECNumber(conpeek(_schemeValues, 13));
        eximUpdReExport.parmTransDate(conpeek(_schemeValues, 14));

        eximUpdReExport.updateIncentiveScheme();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if can run the inquiry in new session or not.
    /// </summary>
    /// <returns>
    /// True if can run the inquiry in new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>