<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendAgingQueryConverter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Builds a query with customers or vendors transactions as a root datasource based on the query with customers or vendors as a root datasource.
/// </summary>
/// <remarks>Transactions query is later used to include only filtered subset of customers/vendors transactions in aging process.</remarks>
class CustVendAgingQueryConverter
{
    TableId customersOrVendorsTableId;
    TableId customersOrVendorsTransactionsTableId;
    Query customersOrVendorsQuery;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>convertCustomers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts customers query to a customer transactions query.
    /// </summary>
    /// <param name = "_customersQuery"> The query object where <c>CustTable</c> is the root datasource. </param>
    /// <returns>The query object where <c>CustTrans</c> is the root datasource; Null if there is no transactional ranges provided on _customersQuery </returns>
    public static Query convertCustomers(Query _customersQuery)
    {
        var converter = CustVendAgingQueryConverter::construct(tableNum(CustTable), tableNum(CustTrans), _customersQuery);
        return converter.buildTransactionQuery(_customersQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertVendors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts vendors query to a vendor transactions query.
    /// </summary>
    /// <param name = "_vendorsQuery"> The query object where <c>VendTable</c> is the root datasource. </param>
    /// <returns>The query object where <c>VendTrans</c> is the root datasource; Null if there is no transactional ranges provided on _vendorsQuery. </returns>
    public static Query convertVendors(Query _vendorsQuery)
    {
        var converter = CustVendAgingQueryConverter::construct(tableNum(VendTable), tableNum(VendTrans), _vendorsQuery);
        return converter.buildTransactionQuery(_vendorsQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance based on specified parameters.
    /// </summary>
    /// <param name = "_custVendTableId"> <c>CustTable</c> or <c>VendTable</c> tableId </param>
    /// <param name = "_custVendTransId"> <c>CustTrans></c> or <c>VendTrans></c> tableId </param>
    /// <param name = "_custVendQuery"> Query containing selected customers or vendors </param>
    /// <returns>The constructed instance. </returns>
    public static CustVendAgingQueryConverter construct(TableId _custVendTableId, TableId _custVendTransId, Query _custVendQuery)
    {
        return new CustVendAgingQueryConverter(_custVendTableId, _custVendTransId, _custVendQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyRangesFromDataSource</Name>
				<Source><![CDATA[
    private void copyRangesFromDataSource(QueryBuildDataSource _fromDS, QueryBuildDataSource _toDS)
    {
        _toDS.fetchMode(_fromDS.fetchMode());

        var n = _fromDS.rangeCount();
        for (var i = 1; i <= n; i++)
        {
            var fromRange = _fromDS.range(i);
            var toRange = _toDS.addRange(fromRange.field(), fromRange.fieldArrayIndex(), fromRange.rangeType());
            toRange.value(fromRange.value());
            toRange.status(fromRange.status());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTransactionQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds customer/vendor transactions query based on the customers/vendors query.
    /// </summary>
    /// <param name = "_qr">The set of customers/vendors to be included in aging process.</param>
    /// <returns>The set of customers/vendors transactions to be included in aging process.</returns>
    private Query buildTransactionQuery(Query _qr)
    {
        Query transQuery;

        if (_qr.dataSourceTable(customersOrVendorsTransactionsTableId))
        {
            transQuery = new Query();
            transQuery.addDataSource(customersOrVendorsTransactionsTableId);

            this.copyRangesFromDataSource(_qr.dataSourceTable(customersOrVendorsTransactionsTableId),
                    transQuery.dataSourceTable(customersOrVendorsTransactionsTableId));

            transQuery.dataSourceTable(customersOrVendorsTransactionsTableId)
                .addDataSource(customersOrVendorsTableId);

            transQuery.dataSourceTable(customersOrVendorsTableId)
                .joinMode(JoinMode::ExistsJoin);

            this.copyRangesFromDataSource(_qr.dataSourceTable(customersOrVendorsTableId),
            transQuery.dataSourceTable(customersOrVendorsTableId));

            transQuery.dataSourceTable(customersOrVendorsTableId)
                .addLink(fieldName2Id(customersOrVendorsTransactionsTableId, 'AccountNum'), fieldName2Id(customersOrVendorsTableId, 'AccountNum'));
        }

        return transQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes new instance of <c>CustVendAgingQueryConverter</c>
    /// </summary>
    protected void new(TableId _custVendTableId, TableId _custVendTransId, Query _custVendQuery)
    {
        customersOrVendorsTransactionsTableId = _custVendTransId;
        customersOrVendorsTableId = _custVendTableId;
        customersOrVendorsQuery = _custVendQuery;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>