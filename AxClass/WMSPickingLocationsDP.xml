<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsPickingLocationsDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>WMSPickingLocations</c> class is a report data provider class for reports.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(WMSPickingLocations))
]
public class WmsPickingLocationsDP extends SRSReportDataProviderBase
{
    WMSPickingLocationsTmp      wmsPickingLocationsTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getWMSPickingLocationsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the actual data for the report from the temporary table.
    /// </summary>
    /// <returns>
    ///    The temporary <c>WMSPickingLocationsTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute('WMSPickingLocationsTmp')
    ]
    public WMSPickingLocationsTmp getWMSPickingLocationsTmp()
    {
        select  wmsPickingLocationsTmp;
        return  wmsPickingLocationsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts records into the temporary table.
    /// </summary>
    /// <param name="_wmsLocation">
    ///    The <c>WMSLocation</c> table buffer.
    /// </param>
    /// <param name="_inventItemLocation">
    ///    The <c>InventItemLocation</c> table buffer.
    /// </param>
    private void insertTmpTable(WMSLocation _wmsLocation, InventItemLocation _inventItemLocation)
    {
        wmsPickingLocationsTmp.InventLocationId =   _wmsLocation.InventLocationId;
        wmsPickingLocationsTmp.wmsLocationId    =   _wmsLocation.wmsLocationId;
        wmsPickingLocationsTmp.ItemId           =   _inventItemLocation.ItemId;
        wmsPickingLocationsTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic by and also calls helper methods and inserts data to temporary
    ///    table.
    /// </summary>
    /// <remarks>
    ///    Provides the ability to write the report business logic. This method will be called by SSRS at
    ///    runtime. The method should compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        QueryRun                    queryRun;
        boolean                     foundAny;
        InventDim                   inventDim;
        InventDim                   inventDimCriteria;
        InventDimParm               inventDimParm;
        InventItemLocation          inventItemLocation;
        WMSLocation                 wmsLocation;

        queryRun  = new QueryRun(this.parmQuery());

        while (queryRun.next())
        {
            wmsLocation =queryRun.get(tableNum(WMSLocation));
            if (wmsLocation)
            {
                foundAny = false;
                inventDimParm.InventLocationIdFlag = NoYes::Yes;
                inventDimCriteria.InventLocationId = wmsLocation.InventLocationId;
                while select inventItemLocation
                where   inventItemLocation.wmsPickingLocation  == wmsLocation.wmsLocationId
                #inventDimJoin(inventItemLocation.InventDimId,inventDim,inventDimCriteria,inventDimParm)
                {
                    foundAny = true;
                    this.insertTmpTable(wmsLocation,inventItemLocation);
                }
                if (!foundAny)
                {
                    this.insertTmpTable(wmsLocation,inventItemLocation);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
