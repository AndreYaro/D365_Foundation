<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendPaymPrinterSettings</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  Provides the ability to use payment printer settings.
/// </summary>
public class CustVendPaymPrinterSettings
{
    private Map mapPrinterSettings;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAllPrinterSettingsPacked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the packed printer settings.
    /// </summary>
    /// <returns>The packed printer settings.</returns>
    public container getAllPrinterSettingsPacked()
    {
        return mapPrinterSettings.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>callPrinterSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the printer settings dialog.
    /// </summary>
    /// <param name = "_paymentDocumentType">The type of payment document.</param>
    /// <param name = "_dialogPrinterName">The printer name dialog field.</param>
    /// <param name = "_dialogPrintMedium">The print medium dialog field.</param>
    public void callPrinterSettings(PaymDocumentType _paymentDocumentType, DialogField _dialogPrinterName, DialogField _dialogPrintMedium)
    {
        SRSPrintDestinationSettings printSettings;

        printSettings = new SRSPrintDestinationSettings(this.getPrinterSettings(_paymentDocumentType));
        printSettings.printAllPages(true);
        printSettings.printMediumType(SRSPrintMediumType::Screen);
        printSettings.printLandscape(false);

        if (SrsReportRunUtil::showSettingsDialog(printSettings))
        {
            this.updatePrinterSettings(PaymDocumentType::PaymAdvice, printSettings.pack());
            _dialogPrintMedium.value(printSettings.printMediumType());

            switch (printSettings.printMediumType())
            {
                case SRSPrintMediumType::Printer:
                    _dialogPrinterName.value(printSettings.printerName());
                    break;

                default:
                    _dialogPrinterName.value('');
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrinterSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the printer settings for the given payment document type.
    /// </summary>
    /// <param name = "_paymentDocumentType">The type of payment document.</param>
    /// <returns>The printer settings.</returns>
    public container getPrinterSettings(PaymDocumentType _paymentDocumentType)
    {
        container printerSettings = conNull();

        if (mapPrinterSettings.exists(_paymentDocumentType))
        {
            printerSettings = mapPrinterSettings.lookup(_paymentDocumentType);
        }

        return printerSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePrinterSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the printer settings.
    /// </summary>
    /// <param name = "_paymentDocumentType">The type of payment document.</param>
    /// <param name = "_printerSettings">The printer settings.</param>
    public void updatePrinterSettings(PaymDocumentType _paymentDocumentType, container _printerSettings)
    {
        mapPrinterSettings.insert(_paymentDocumentType, _printerSettings);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMapPrinterSettings</Name>
				<Source><![CDATA[
    protected Map parmMapPrinterSettings(Map _mapPrinterSettings = mapPrinterSettings)
    {
        mapPrinterSettings = _mapPrinterSettings;
        return mapPrinterSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForPackedPrinterSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a printer settings object from packed printer settings.
    /// </summary>
    /// <param name = "_packedPrinterSettings">The packed printer settings.</param>
    /// <returns>A printer settings object.</returns>
    public static CustVendPaymPrinterSettings newForPackedPrinterSettings(container _packedPrinterSettings)
    {
        CustVendPaymPrinterSettings custVendPaymPrinterSettings = new CustVendPaymPrinterSettings();

        custVendPaymPrinterSettings.parmMapPrinterSettings(Map::create(_packedPrinterSettings));

        return custVendPaymPrinterSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        mapPrinterSettings = new Map(Types::Enum, Types::Container);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>