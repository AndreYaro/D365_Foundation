<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ConfigTmpSave</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ConfigTmpSave implements SysPackable
{
    ConfigHierarchyChoose   hierarchyChoose;

    TmpConfigId             tmpId;

    TmpConfigValue          tmpValue;

    container               warnings;

    #localmacro.CurrentList
        tmpIdList%1,
        tmpValueList%1
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>approve</Name>
				<Source><![CDATA[
    boolean approve()
    {
        boolean                 found;
        ConfigValues            values;
        container               configsCon;
        Set                     configs;
        SetEnumerator           se;
        InventTable             inventTable;
        EcoResModelingIdentical isReuseExistingConfigurationEnabled;

        boolean                 manualConfigId = NumberSequenceTable::find(BOMParameters::numRefConfigId().NumberSequenceId).Manual;

        warnings = conNull();

        found  = false;
        while select tmpId
            index hint ConfigIdx
            where tmpId.ConfigId  == naStr()
        {
            values      = this.loadChoosenValues(tmpId.ItemNum);
            configsCon  = ConfigChoice::findConfig(hierarchyChoose.numItem2ItemId(tmpId.ItemNum),values);
            if (configsCon)
            {
                configs     = Set::create(configsCon);
            }
            else
            {
                configs = null;
            }

            inventTable = InventTable::find(hierarchyChoose.numItem2ItemId(tmpId.ItemNum));
            EcoResProductMaster productMaster = EcoResProductMaster::find(inventTable.Product);
            isReuseExistingConfigurationEnabled = productMaster.modelingPolicy().isReuseExistingConfigurationEnabled();
            if (configs && configs.elements() == 1 && ! isReuseExistingConfigurationEnabled)
            {
                se = configs.getEnumerator();
                se.moveNext();
                tmpId.ConfigId  = se.current();
                tmpId.update();
            }
            else
            {
                // Suggest new configId using a nomenclature
                BOMId bomId = hierarchyChoose.numItem2BOMId(tmpId.ItemNum);
                EcoResBOMDimBasedConfigurationNomenclature bomNomenclature = EcoResBOMDimBasedConfigurationNomenclature::findByBOMId(bomId, EcoResNomenclatureRole::Id);
                if (bomNomenclature.DimBasedConfigurationNomenclature && bomNomenclature.IsActive)
                {
                    EcoResNomenclatureInput nomenclatureInput = EcoResNomenclatureInput::construct();
                    nomenclatureInput.parmNomenclatureRecId(bomNomenclature.DimBasedConfigurationNomenclature);
                    nomenclatureInput.parmProductMaster(productMaster);
                    nomenclatureInput.parmConfigValues(values);

                    EcoResItemConfigurationName newConfigId = EcoResNomenclature::buildFromNomenclatureInput(nomenclatureInput);
                    if (newConfigId)
                    {
                        tmpId.ConfigId = newConfigId;
                        tmpId.update();

                        if (EcoResProductMasterConfiguration::existByProductConfiguration(productMaster.RecId,
                                                                                          EcoResProductDimensionAttribute::inventDimFieldId2DimensionAttributeRecId(fieldnum(InventDim, ConfigId)),
                                                                                          ecoResConfiguration::findByName(newConfigId).RecId)
                            )
                        {
                            warnings += strFmt("@SCM:NonUniqueNomenclatureMustBeCorrected", newConfigId);
                        }
                    }
                }

                found  = true;
            }
        }

        if (! found)
        {
            return true;
        }
        if (manualConfigId)
        {
            if (! this.dialog())
            {
                return false;
            }
        }

        this.saveTmp();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convConfigId</Name>
				<Source><![CDATA[
    EcoResItemConfigurationName convConfigId(EcoResItemConfigurationName configId)
    {
        return configId == naStr()
            ? "@SYS24320"
            : configId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createConfigChoice</Name>
				<Source><![CDATA[
    void createConfigChoice(ItemId _itemId, EcoResItemConfigurationName _itemConfigurationName)
    {
        ConfigChoice    choice;
        Integer         derivedNum;
        TmpConfigId     tmp;

        choice.ItemId   = _itemId;
        choice.ConfigId = _itemConfigurationName;
        choice.initFromTmpConfigValue(tmpValue);

        if ((select configChoice
                where configChoice.ItemId           == choice.ItemId        &&
                      configChoice.ConfigId         == choice.ConfigId      &&
                      configChoice.ChosenGroupId    == choice.ChosenGroupId &&
                      configChoice.ChosenItemId     == choice.ChosenItemId  &&
                      configChoice.ChosenConfigId   == choice.ChosenConfigId).RecId != 0)
            return;
        if (choice.ChosenConfigId == naStr())
        {
            derivedNum  = hierarchyChoose.numGroupItem2NumItem(tmpValue.GroupNum,tmpValue.ItemId);
            if (derivedNum)
            {
                tmp.setTmpData(tmpId);
                select tmp
                    index hint NumIdx
                    where tmp.ItemNum == derivedNum;
                if (tmp)
                    choice.ChosenConfigId = tmp.ConfigId;
            }
        }

        choice.Autogenerated = true;
        choice.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewVariantConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new product variant with a new configuration name.
    /// </summary>
    /// <param name="_itemId">
    ///    An item ID.
    /// </param>
    /// <param name="_configurationName">
    ///    A configuration name.
    /// </param>
    protected void createNewVariantConfiguration(ItemId _itemId, EcoResItemConfigurationName _configurationName)
    {
        container                   productDimensions;
        EcoResProductRecId          productMasterRecId  = InventTable::itemProduct(_itemId);
        EcoResProductRecId          distincProductVariantRecId;

        if (!EcoResProductVariantDimValue::newProductVariantDim_ConfigId().exist(productMasterRecId, _configurationName))
        {
            if (EcoResProductMasterManagerMethodSignatureChangeFlight::instance().isEnabled())
            {
                EcoResProductMasterManager::addNewProductDimensionValue(
                    productMasterRecId,
                    EcoResProductDimensionAttribute::inventDimFieldId2DimensionAttributeRecId(fieldNum(InventDim, ConfigId)),
                    _configurationName,
                    tmpId.Name,
                    '');
            }
            else
            {
                EcoResProductMasterManager::addProductDimensionValue(
                    productMasterRecId,
                    EcoResProductDimensionAttribute::inventDimFieldId2DimensionAttributeRecId(fieldNum(InventDim, ConfigId)),
                    _configurationName,
                    tmpId.Name,
                    '');
            }
        }

        productDimensions           = EcoResProductVariantDimValue::getDimensionValuesContainerForConfiguration(_configurationName);

        distincProductVariantRecId  = EcoResProductVariantManager::createProductVariant(productMasterRecId, '', productDimensions);

        EcoResProductReleaseManagerBase::releaseProduct(distincProductVariantRecId, CompanyInfo::findDataArea(curext()).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteChoice</Name>
				<Source><![CDATA[
    /*
    Remember do not use return, cause of tts.
    */
    void deleteChoice(Integer groupNum)
    {
        Integer             itemLevel;
        Integer             itemGroupNum;
        Integer             groupLevel;
        Integer             groupGroupNum;
        Integer             itemQty;
        Counter             itemI;
        Counter             groupI;
        Integer             derivedNum;

        this.ttsbegin();

        // Delete all selected via rules
        while select tmpValue
            index hint GroupNumIdx
            where tmpValue.GroupNum == groupNum
        {
            tmpValue.delete();

            ConfigExcludeInclude::search(hierarchyChoose,this,groupNum,tmpValue.ItemId,false);
        }

        // Delete tree from this group
        [itemLevel,itemGroupNum] = hierarchyChoose.numGroup2Derived(groupNum);
        if (itemLevel && itemGroupNum)
        {
            itemQty = hierarchyChoose.levelGroupCountItem(itemLevel,itemGroupNum);
            for (itemI=1; itemI<=itemQty; itemI++)
            {
                derivedNum = hierarchyChoose.levelGroupNum2NumItem(itemLevel,itemGroupNum,itemI);
                if (derivedNum)
                {
                    while select tmpId
                        where tmpId.ItemNum == derivedNum
                        tmpId.delete();

                    [groupLevel,groupGroupNum] = hierarchyChoose.numItem2Derived(derivedNum);
                    if (groupLevel && groupGroupNum)
                    {
                        for (groupI=1; groupI<=hierarchyChoose.levelGroupNumGroup(groupLevel,groupGroupNum); groupI++)
                        {
                            derivedNum = hierarchyChoose.levelGroupNum2NumGroup(groupLevel,groupGroupNum,groupI);
                            if (derivedNum)
                            {
                                this.deleteChoice(derivedNum);
                            }
                        }
                    }
                }
            }
        }

        this.ttscommit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    boolean dialog()
    {
        Args            args    = new Args(formStr(ConfigChoiceApprove));
        FormRun         formRun;
        args.caller(this);
        formRun = classfactory.formRunClass(args);
        formRun.init();
        formRun.run();
        formRun.wait();

        return formRun.closedOk();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConfigId</Name>
				<Source><![CDATA[
    EcoResItemConfigurationName getConfigId(ConfigGroupNum groupNum)
    {
        ConfigItemNum   itemAttachedTo = hierarchyChoose.numGroupAttachedTo(groupNum);

        select tmpValue
            index hint ItemNumIdx
            where tmpValue.ItemNum    == itemAttachedTo   &&
                  tmpValue.GroupNum   == groupNum;

        return tmpValue.ConfigId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hierarchyChoose</Name>
				<Source><![CDATA[
    ConfigHierarchyChoose hierarchyChoose()
    {
        return hierarchyChoose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGroupChosen</Name>
				<Source><![CDATA[
    boolean isGroupChosen(ConfigGroupNum groupNum)
    {
        ConfigItemNum   itemAttachedTo = hierarchyChoose.numGroupAttachedTo(groupNum);

        select tmpValue
            index hint ItemNumIdx
            where tmpValue.ItemNum    == itemAttachedTo   &&
                  tmpValue.GroupNum   == groupNum;
        if (tmpValue)
            return true;
        else
            return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemChosen</Name>
				<Source><![CDATA[
    boolean isItemChosen(
        Integer                     groupNum,
        ItemId                      itemNum,
        EcoResItemConfigurationName _itemConfigurationName  = '')
    {
        ConfigItemNum   itemAttachedTo = hierarchyChoose.numGroupAttachedTo(groupNum);

        select tmpValue
            index hint ItemNumIdx
            where tmpValue.ItemNum    == itemAttachedTo           &&
                  tmpValue.GroupNum   == groupNum                 &&
                  tmpValue.ItemId     == itemNum                  &&
                  (! _itemConfigurationName                       ||
                   tmpValue.ConfigId  == _itemConfigurationName
                  );
        if (tmpValue)
        {
            if (! prmisDefault(_itemConfigurationName) && ! _itemConfigurationName && tmpValue.ConfigId)
                return false;
            else
                return true;
        }
        else
            return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemIncluded</Name>
				<Source><![CDATA[
    boolean isItemIncluded(
        Integer                     groupNumOf,
        ItemId                      itemNum,
        EcoResItemConfigurationName _itemConfigurationName
        )
    {
        Integer          groupAttachedTo = hierarchyChoose.numGroupAttachedTo(groupNumOf);

        select tmpValue
            index hint ItemNumIdx
            where tmpValue.ItemNum      == groupAttachedTo          &&
                  tmpValue.GroupNum     == groupNumOf               &&
                  tmpValue.ItemId       == itemNum                  &&
                  tmpValue.ConfigId     == _itemConfigurationName;

        return tmpValue.Included;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadChoosenValues</Name>
				<Source><![CDATA[
    ConfigValues loadChoosenValues(
        Integer     loadItemNum,
        boolean     withGroupNum = false
        )
    {
        ConfigValues    values;

        while select tmpValue
            index ItemNumIdx
            where tmpValue.ItemNum == loadItemNum
        {
            if (withGroupNum)
                values += [[tmpValue.ConfigGroupId,tmpValue.ItemId,tmpValue.ConfigId,tmpValue.GroupNum]];
            else
                values += [[tmpValue.ConfigGroupId,tmpValue.ItemId,tmpValue.ConfigId]];
        }

        return values;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(ConfigHierarchyChoose  _hierarchyChoose)
    {
        hierarchyChoose = _hierarchyChoose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        List tmpIdList,tmpValueList;

        tmpIdList = new List(Types::Record);
        while select tmpId
        {
            tmpIdList.addEnd(tmpId);
        }

        tmpValueList = new List(Types::Record);
        while select tmpValue
        {
            tmpValueList.addEnd(tmpValue);
        }

        return [#currentList(.pack())];
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    void reset()
    {
        delete_from tmpId;
        delete_from tmpValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveConfig</Name>
				<Source><![CDATA[
    boolean saveConfig(
        Integer                     itemNumOf,
        EcoResItemConfigurationName _itemConfigurationName  = '')
    {
        select tmpId
            index hint NumIdx
            where tmpId.ItemNum == itemNumOf;

        if (! tmpId)
        {
            tmpId.ItemNum = itemNumOf;
        }

        if (_itemConfigurationName)
        {
            tmpId.ConfigId  = _itemConfigurationName;
        }

        this.setLevel(itemNumOf);

        tmpId.ItemId    =   hierarchyChoose.numItem2ItemId(itemNumOf);
        tmpId.Create    =   (tmpId.ConfigId == naStr());
        tmpId.Name      =   '';

        if (! tmpId.Create && _itemConfigurationName)
        {
            if (EcoResProductVariantDimValue::newProductVariantDim_ConfigId().exist(InventTable::itemProduct(tmpId.ItemId), _itemConfigurationName))
            {
                tmpId.Name = _itemConfigurationName;
            }
        }

        tmpId.write();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveTmp</Name>
				<Source><![CDATA[
    void saveTmp()
    {
        #OCCRetryCount
        TmpConfigId                 tmpConfigId;
        EcoResItemConfigurationName savedTmpItemConfigurationName;

        savedTmpItemConfigurationName   = ConfigTmpSave::saveOnServer(hierarchyChoose.pack(),this.pack());

        ttsbegin;
        tmpConfigId = this.tmpConfigId();
        select forupdate tmpConfigId
            where tmpConfigId.ItemNum == 1;

        tmpConfigId.ConfigId = savedTmpItemConfigurationName;

        if (tmpConfigId.ConfigId)
            tmpConfigId.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveTmpOnServer</Name>
				<Source><![CDATA[
    EcoResItemConfigurationName saveTmpOnServer()
    {
        #OCCRetryCount
        TmpConfigValue                  tmpValueJoin;
        EcoResItemConfigurationName     savedTmpItemConfigurationName;
        ItemId                          itemId;
        RefRecId                        product;
        EcoResItemConfigurationName     itemConfigurationName;

        try
        {
            this.ttsbegin();

            tmpValueJoin.setTmpData(tmpValue);

            // Select only tmpId with choice
            while select forupdate tmpId
                order by ItemNum desc
                exists join tmpValueJoin
                    where tmpValueJoin.ItemNum == tmpId.ItemNum
            {
                itemId = hierarchyChoose.numItem2ItemId(tmpId.ItemNum);
                product = InventTable::itemProduct(itemId);

                if (!EcoResProductMasterConfiguration::existByProductConfiguration(
                        product,
                        EcoResProductDimensionAttribute::inventDimFieldId2DimensionAttributeRecId(fieldNum(InventDim, ConfigId)),
                        EcoResConfiguration::findByName(tmpId.ConfigId).RecId)
                   )
                {
                    itemConfigurationName = tmpId.ConfigId;
                    if (itemConfigurationName == naStr())
                        itemConfigurationName = '';

                    if (!itemConfigurationName)
                    {
                        itemConfigurationName   = NumberSeq::newGetNum(BOMParameters::numRefConfigId(), false).num();
                    }

                    if (InventTable::find(tmpId.ItemId).configActive())
                    {
                        this.createNewVariantConfiguration(tmpId.ItemId, itemConfigurationName);
                    }

                    tmpId.ConfigId                  = itemConfigurationName;
                    savedTmpItemConfigurationName   = itemConfigurationName;

                    tmpId.update();

                    while select tmpValue
                        where tmpValue.ItemNum == tmpId.ItemNum
                    {
                        this.createConfigChoice(tmpId.ItemId, itemConfigurationName);
                    }
                }
            }
            this.ttscommit();
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

        return  savedTmpItemConfigurationName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveValue</Name>
				<Source><![CDATA[
    public void saveValue(
        Integer                     groupNum,
        ItemId                      itemId,
        EcoResItemConfigurationName itemConfigurationName   = '',
        boolean                     included                = false)
    {
        Integer          groupAttachedTo = hierarchyChoose.numGroupAttachedTo(groupNum);

        if (! itemId)
            return;

        select tmpValue
            index hint ItemNumIdx
            where tmpValue.ItemNum  == groupAttachedTo &&
                  tmpValue.GroupNum == groupNum;
        if (! tmpValue)
        {
            tmpValue.ItemNum  = groupAttachedTo;
            tmpValue.GroupNum = groupNum;
        }
        tmpValue.ConfigGroupId  = hierarchyChoose.numGroup2GroupId(groupNum);
        if (tmpValue.ItemId != itemId)
            tmpValue.ConfigId   = '';
        tmpValue.ItemId         = itemId;
        if (itemConfigurationName || tmpValue.ConfigId )
            tmpValue.ConfigId   = itemConfigurationName;
        tmpValue.Included       = included;
        tmpValue.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveValueSearchRules</Name>
				<Source><![CDATA[
    boolean saveValueSearchRules(
        Integer                     groupNum,
        ItemId                      itemId,
        EcoResItemConfigurationName itemConfigurationName = ''
        )
    {
        #OCCRetryCount
        boolean         ret;
        container       result, tmpSaveServer_Cont, hiearchyChoose_Cont;
        if (this.isItemChosen(groupNum,itemId, itemConfigurationName))
            return true;

        // Save ConfigId
        if (this.isItemChosen(groupNum,itemId))
        {
            this.saveValue(groupNum,itemId, itemConfigurationName);
            return true;
        }

        // If group is already chosen then delete old
        if (this.isGroupChosen(groupNum))
        {
            this.deleteChoice(groupNum);
        }

        try
        {
            this.ttsbegin();

            setPrefix("@SYS26330");

            // Save new
            this.saveValue(groupNum,itemId, itemConfigurationName);

            if (! ConfigExcludeInclude::search(hierarchyChoose,this,groupNum,itemId,true))
            {
                this.ttsabort();
                throw error("@SYS24847");
            }

            this.ttscommit();

            return true;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLevel</Name>
				<Source><![CDATA[
    void setLevel(Integer num)
    {
        container c = hierarchyChoose.numItem2LevelGroupNum(num);
        tmpId.Level         = conPeek(c,1);
        tmpId.LevelGroupNum = conPeek(c,2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpConfigId</Name>
				<Source><![CDATA[
    TmpConfigId  tmpConfigId()
    {
        return tmpId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpValue</Name>
				<Source><![CDATA[
    TmpConfigValue  tmpValue()
    {
        return tmpValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>warnings</Name>
				<Source><![CDATA[
    public container warnings()
    {
        return warnings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ttsabort</Name>
				<Source><![CDATA[
    void ttsabort()
    {
        tmpId.ttsabort();
        tmpValue.ttsabort();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ttsbegin</Name>
				<Source><![CDATA[
    void ttsbegin()
    {
        tmpId.ttsbegin();
        tmpValue.ttsbegin();
        ttsbegin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ttscommit</Name>
				<Source><![CDATA[
    void ttscommit()
    {
        tmpId.ttscommit();
        tmpValue.ttscommit();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public  boolean unpack(container packedClass)
    {
        container       tmpIdListCon,tmpValueListCon;
        ListEnumerator  le;

        [#currentList(con)] = packedClass;

        tmpId = null;
        if (tmpIdListCon)
        {
            le = List::create(tmpIdListCon).getEnumerator();
            while (le.moveNext())
            {
                tmpId.data(le.current());
                tmpId.doInsert();
            }
        }

        tmpValue = null;
        if (tmpValueListCon)
        {
            le = List::create(tmpValueListCon).getEnumerator();
            while (le.moveNext())
            {
                tmpValue.data(le.current());
                tmpValue.doInsert();
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static ConfigTmpSave construct(ConfigHierarchyChoose hierarchyChoose)
    {
        return new ConfigTmpSave(hierarchyChoose);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newOnServer</Name>
				<Source><![CDATA[
    static ConfigTmpSave newOnServer(
        container hierarchyChooseCon,
        container tmpSaveCon
        )
    {
        ConfigHierarchyChoose   hierarchyChoose = ConfigHierarchyChoose::newOnServer(hierarchyChooseCon);
        ConfigTmpSave           tmpSave;

        tmpSave = ConfigTmpSave::construct(hierarchyChoose);
        tmpSave.unpack(tmpSaveCon);

        return tmpSave;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveOnServer</Name>
				<Source><![CDATA[
    static EcoResItemConfigurationName saveOnServer(
        container hierarchyChooseCon,
        container tmpSaveCon
        )
    {
        #OCCRetryCount
        ConfigHierarchyChoose   hierarchyChoose = ConfigHierarchyChoose::newOnServer(hierarchyChooseCon);
        ConfigTmpSave           tmpSave;

        tmpSave = ConfigTmpSave::construct(hierarchyChoose);
        tmpSave.unpack(tmpSaveCon);

        return tmpSave.saveTmpOnServer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveValueSearchRules_Server</Name>
				<Source><![CDATA[
    public static container saveValueSearchRules_Server(
        container                   hierarchyChooseCon,
        container                   tmpSaveCon,
        Integer                     groupNum,
        ItemId                      itemId,
        EcoResItemConfigurationName itemConfigurationName = '')
    {
        ConfigTmpSave   tmpSaveServer;
        boolean         ret;
        container       result;
        tmpSaveServer = ConfigTmpSave::newOnServer(hierarchyChooseCon,tmpSaveCon);
        ret           = tmpSaveServer.saveValueSearchRules(groupNum,itemId,itemConfigurationName);
        result        = [ret, tmpSaveServer.pack(), tmpSaveServer.hierarchyChoose().pack()];
        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>