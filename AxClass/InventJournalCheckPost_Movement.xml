<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventJournalCheckPost_Movement</Name>
	<SourceCode>
		<Declaration><![CDATA[
[InventJournalTypeFactoryAttribute(InventJournalType::Movement),
InventJournalTypeFactoryAttribute(InventJournalType::LossProfit),
InventJournalTypeFactoryAttribute(InventJournalType::Transfer),
InventJournalTypeFactoryAttribute(InventJournalType::BOM),
InventJournalTypeFactoryAttribute(InventJournalType::Count),
InventJournalTypeFactoryAttribute(InventJournalType::project),
InventJournalTypeFactoryAttribute(InventJournalType::Asset)]
class InventJournalCheckPost_Movement extends JournalCheckPostLedger implements InventJournalReportPackable_RU, BatchRetryable
{
    // <GEERU>
    List             inventReportsList;
    NoYes            printReportList;
    DialogField      printField;

    UnknownNoYes     extendedValidation;

    Integer         journalType;
    boolean         isJournalTypeSetFromJournalRecord;
    private InventJournalCheckConsolidatedQty inventJournalCheckConsolidatedQty;   
    private boolean isInventJournalCheckWHSLicensePlateExistsOnOtherLocationFlightEnabled = InventJournalCheckWHSLicensePlateExistsOnOtherLocationFlight::instance().isEnabled();
    private boolean journalLineDuplicateCheckflightEnabled = InventCountingJournalLineCheckDuplicateFlight::instance().isEnabled();

    #DEFINE.CurrentVersion(14)

    #LOCALMACRO.CurrentList
        journalType,
        isJournalTypeSetFromJournalRecord,
        printReportList
    #ENDMACRO
    // </GEERU>
    // <GIN><GEERU>
    #ISOcountryRegionCodes
    // </GEERU></GIN>

    AssetId assetId_BR;
    AssetBookId bookId_BR;

    InventCostOnhandCache inventCostOnhandCache;
    Set                   setDuplicatedItemDim;

    private Map lpCheckOnLocationMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowTransferErrors</Name>
				<Source><![CDATA[
    protected boolean allowTransferErrors()
    {
        if (journalTableId          == tableNum(InventJournalTable)
        &&  this.getjournalType()   == InventJournalType::BOM)
        {
            return false;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemInventDimCacheKey</Name>
				<Source><![CDATA[
    private str getItemInventDimCacheKey(InventJournalTrans _inventJournalTransLoc)
    {
        return strFmt('%1,%2', _inventJournalTransLoc.ItemId, _inventJournalTransLoc.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDuplicatedItemDimensionSet</Name>
				<Source><![CDATA[
    private void populateDuplicatedItemDimensionSet()
    {
        Query queryDuplicatedItemDim = new Query(queryStr(InventJournalTransDuplicatedItemDim));

        setDuplicatedItemDim = new Set(Types::String);
        queryDuplicatedItemDim.dataSourceTable(tableNum(InventJournalTrans)).addRange(fieldnum(InventJournalTrans, JournalId)).value(queryValue(this.journalId));
        QueryRun queryRunDuplicatedItemDim = new QueryRun(queryDuplicatedItemDim);
        
        while (queryRunDuplicatedItemDim.next())
        {
            InventJournalTrans _inventJournalTransLoc = queryRunDuplicatedItemDim.get(tableNum(InventJournalTrans));
            setDuplicatedItemDim.add(this.getItemInventDimCacheKey(_inventJournalTransLoc));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the inventory journal.
    /// </summary>
    /// <param name="_journalTransList">
    ///    A list of inventory journal lines.
    /// </param>
    /// <returns>
    ///    true if the journal is valid; otherwise, false.
    /// </returns>
    protected boolean checkJournal(JournalTransList _journalTransList)
    {
        boolean ret = true;

        lpCheckOnLocationMap = new Map(Types::String, Types::String);

        inventJournalCheckConsolidatedQty = new InventJournalCheckConsolidatedQty();

        if (journalLineDuplicateCheckflightEnabled)
        {
            this.prepareDuplicatedItemDimensionSet(_journalTransList);
        }

        ret = this.validateProjPost();
        ret = super(_journalTransList) && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a journal line.
    /// </summary>
    /// <param name="_journalTransData">
    /// A journal line to validate.
    /// </param>
    /// <returns>
    /// true if journal line is valid; otherwise, false .
    /// </returns>
    protected boolean checkTrans(JournalTransData _journalTransData)
    {
        InventJournalTrans  inventJournalTrans  = _journalTransData.journalTrans();
        InventMov_Journal   movement            = InventMovement::construct(inventJournalTrans);
        InventMov_Journal   movement_Transfer;
        // <GEERU>
        InventTrans         origInventTrans, curInventTrans;
        boolean             countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>
        // <GIN>
        boolean                 isExciseEnable_IN   = TaxParameters::isExciseEnable_IN();
        // </GIN>

        var logger = InventInstrumentationLogger::createLogger(classStr(InventJournalCheckPost_Movement));
        var activity = logger.activity(methodStr(InventJournalCheckPost_Movement, checkTrans));

        using (var activityContext = logger.activityContext(activity))
        {
            activityContext.addCustomProperty("Journal Type", int2Str(journalType));
            activityContext.addCustomProperty("Line Number", any2Str(inventJournalTrans.LineNum));
            if (! super(_journalTransData))
            {
                return false;
            }

            movement.parmInventJournalCheckConsolidatedQty(inventJournalCheckConsolidatedQty);

            setPrefix(fieldLabelValue(inventJournalTrans.TableId, fieldNum(InventJournalTrans,ItemId), inventJournalTrans.ItemId));

            if (! movement.journalCheckTrans())
            {
                return false;
            }

            if (inventJournalTrans.JournalType == InventJournalType::Transfer)
            {
                movement_Transfer = InventMovement::construct(inventJournalTrans,InventMovSubType::TransferReceipt);

                if (movement.inventLocationId() == movement_Transfer.inventLocationId() &&
                movement.inventDimId()      == movement_Transfer.inventDimId())
                {
                    return checkFailed("@SYS16985");
                }

                if (! movement_Transfer.journalCheckTrans())
                {
                    return false;
                }

                if (inventJournalTrans.PdsCopyBatchAttrib
                && !movement_Transfer.pdsCheckCopyBatchAttrib(
                    inventJournalTrans.toInventDim()))
                {
                    return checkFailed(strFmt("@PDS1325",
                            inventJournalTrans.toInventDim().InventBatchId,
                            inventJournalTrans.inventDim().InventBatchId));
                }
            }

            if (inventJournalTrans.JournalType == InventJournalType::BOM)
            {
                if (! inventJournalTrans.bomLine)
                {
                    if (!inventJournalTrans.inventTable().inventItemType().canBeProduced())
                    {
                        return checkFailed(strFmt("@SYS78162",inventJournalTrans.inventTable().ItemType));
                    }
                }
                // <GEERU>
                if (countryRegion_RU           &&
                inventJournalTrans.bomLine &&
                inventJournalTrans.Storno_RU != InventJournalTrans::findInventTransId(inventJournalTrans.InventTransIdFather).Storno_RU)
                {
                    // Field "Storno" must match for BOM and BOM line.
                    return checkFailed(strFmt("@GLS102644",
                                          fieldPName(InventJournalTrans, Storno_RU),
                                          InventJournalTrans::findInventTransId(inventJournalTrans.InventTransIdFather).Storno_RU,
                                          inventJournalTrans.Storno_RU));
                }
                // </GEERU>
                // <GIN>
                if (isExciseEnable_IN
                && inventJournalTrans.JournalType == InventJournalType::BOM
                && inventJournalTrans.bomLine)
                {
                    InventJournalTrans  inventJournalTransFather   = InventJournalTrans::findInventTransId(inventJournalTrans.InventTransIdFather);
                    TransTaxInformation transTaxInformationBOM     = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(inventJournalTransFather);
                    TransTaxInformation transTaxInformationBOMLine = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(inventJournalTrans);

                    // Field "ECC number" must match for BOM and BOM line.
                    if (transTaxInformationBOM.ExciseECCRegistrationNumber != transTaxInformationBOMLine.ExciseECCRegistrationNumber)
                    {
                        return checkFailed("@SYP4860467");
                    }
                }
                // </GIN>
            }
        
            if (this.checkInventJournalType(inventJournalTrans))
            {
                return this.checkDupJounralTrans(_journalTransData);
            }

            if (!inventJournalTrans.checkReleaseDate())
            {
                return false;
            }
            // <GEERU>
            if (countryRegion_RU)
            {
                if (extendedValidation == UnknownNoYes::Unknown)
                {
                    extendedValidation = InventParameters::find().ValidateReturn_RU ? UnknownNoYes::Yes : UnknownNoYes::No;
                }

                if (extendedValidation              == UnknownNoYes::Yes             &&
                (inventJournalTrans.JournalType == InventJournalType::BOM        ||
                 inventJournalTrans.JournalType == InventJournalType::LossProfit ||
                 inventJournalTrans.JournalType == InventJournalType::Movement   ||
                 inventJournalTrans.JournalType == InventJournalType::project    ||
                 inventJournalTrans.JournalType == InventJournalType::Transfer))
                {
                    origInventTrans = TransLink_RU::findInventTransOrig(movement.inventTransOriginId());
                    if (! origInventTrans && movement.returnInventTransOrigin())
                    {
                        origInventTrans = InventTrans::findByInventTransOrigin(movement.returnInventTransOrigin());
                    }

                    if (origInventTrans                               &&
                    movement.transQty() * origInventTrans.Qty < 0 &&
                    origInventTrans.Storno_RU != inventJournalTrans.Storno_RU)
                    {
                        InventTransOrigin inventTransOrigin = origInventTrans.inventTransOrigin();

                        if (! origInventTrans.DatePhysical)
                        {
                            return checkFailed(strFmt("@GLS112470", inventTransOrigin.InventTransId, inventTransOrigin.ReferenceCategory, inventTransOrigin.ReferenceId));
                        }
                        else if (!DimensionDefaultFacade::areEqual(inventJournalTrans.DefaultDimension, origInventTrans.dimensionPhysicalDefaultDimension()))
                        {
                            return this.errorDimensionsAreDifferent_RU(movement.inventTransOriginId(), inventTransOrigin.RecId);
                        }

                        if (inventJournalTrans.InventTransIdReturn &&
                        inventJournalTrans.InventTransIdReturn != inventTransOrigin.InventTransId)
                        {
                            return checkFailed(strFmt("@GLS112472", inventJournalTrans.InventTransIdReturn, inventTransOrigin.InventTransId));
                        }

                        if (movement.transQty() > 0)
                        {
                            if (inventJournalTrans.JournalType != InventJournalType::BOM &&
                            ! inventJournalTrans.InventTransIdReturn)
                            {
                                return checkFailed(strFmt("@GLS112473", inventJournalTrans.InventTransId));
                            }

                            if (this.checkTransIdOrig_RU(movement.inventTransOriginId(), inventTransOrigin.RecId))
                            {
                                return checkFailed("@SYS112748");
                            }
                        }
                        else
                        {
                            if (inventJournalTrans.JournalType == InventJournalType::Transfer)
                            {
                                if (this.checkTransIdOrig_RU(movement.inventTransOriginId(),    inventTransOrigin.RecId) ||
                                this.checkTransIdOrig_RU(inventTransOrigin.RecId,           movement.inventTransOriginId()))
                                {
                                    return checkFailed("@SYS112748");
                                }

                                InventTransOriginId transferInventTransOriginId = origInventTrans.transferInventTransOrigin().RecId;
                                if (this.checkTransIdOrig_RU(movement_Transfer.inventTransOriginId(),   transferInventTransOriginId) ||
                                this.checkTransIdOrig_RU(transferInventTransOriginId,               movement_Transfer.inventTransOriginId()))
                                {
                                    return checkFailed("@GLS113818");
                                }
                            }

                            select firstonly curInventTrans
                            where curInventTrans.InventTransOrigin              == movement.inventTransOriginId() &&
                                  curInventTrans.MarkingRefInventTransOrigin    != origInventTrans.InventTransOrigin;

                            if (curInventTrans)
                            {
                                return checkFailed(strFmt("@GLS112474", inventJournalTrans.InventTransId, inventTransOrigin.InventTransId));
                            }
                        }
                    }
                }
            }
        }
        // </GEERU>

        if (  (inventJournalTrans.Qty > 0 || inventJournalTrans.InventOnHand > 0)
           && WHSInventEnabled::exist(inventJournalTrans.ItemId)
           && isInventJournalCheckWHSLicensePlateExistsOnOtherLocationFlightEnabled)
        {
            boolean lpCheckOk;
            WHSLicensePlateId licensePlateId;

            [lpCheckOk, licensePlateId] = this.validateLicensePlateOnLocation(inventJournalTrans);
            if (!lpCheckOk)
            {
                return checkFailed(strFmt("@WAX:LicensePlateExistsOnOtherLocation", licensePlateId));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLicensePlateOnLocation</Name>
				<Source><![CDATA[
    private container validateLicensePlateOnLocation(inventJournalTrans _inventJournalTrans)
    {
        InventDim inventDim;
        WMSLocation wmsLocation;

        boolean lpCheckOk = true;

        inventDim = InventDim::find(_inventJournalTrans.InventDimId);
        WHSLicensePlateId licensePlateId = inventDim.LicensePlateId;

        if (licensePlateId)
        {
            wmsLocation = WMSLocation::find(inventDim.wmsLocationId, inventDim.InventLocationId);
            if (!wmsLocation.whsLocationIsUserLocation())
            {
                if (_inventJournalTrans.Qty > 0)
                {
                    lpCheckOk = this.validateWHSLicensePlateOnOnhandLocation(licensePlateId, inventDim.InventLocationId, inventDim.wMSLocationId);
                }

                if (lpCheckOk)
                {
                    if (_inventJournalTrans.InventOnHand > 0)
                    {
                        str currentValue = inventDim.InventLocationId + '_' + inventDim.wMSLocationId;

                        if (lpCheckOnLocationMap && lpCheckOnLocationMap.exists(licensePlateId))
                        {
                            str previousValue = lpCheckOnLocationMap.lookup(licensePlateId);
                            if (currentValue != previousValue)
                            {
                                return [false, licensePlateId];
                            }
                        }
                        else
                        {
                            lpCheckOnLocationMap.add(licensePlateId, currentValue);
                        }
                    }
                }
                else
                {
                    return [false, licensePlateId];
                }
            }
        }

        return [true, ''];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWHSLicensePlateOnOnhandLocation</Name>
				<Source><![CDATA[
    private boolean validateWHSLicensePlateOnOnhandLocation(WHSLicensePlateId _licensePlateId, InventLocationId _inventLocationId, WMSLocationId _wMSLocationId)
    {
        InventSum   inventSum;

        select firstonly RecId from inventSum
            where inventSum.ClosedQty == NoYes::No
               && inventSum.PhysicalInvent > 0
               && inventSum.LicensePlateId == _licensePlateId
               && ((inventSum.InventLocationId && inventSum.InventLocationId != _inventLocationId)
                || (inventSum.WMSLocationId    && inventSum.WMSLocationId != _wMSLocationId));

        if (inventSum.RecId)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventJournalType</Name>
				<Source><![CDATA[
    protected boolean checkInventJournalType(InventJournalTrans _inventJournalTrans)
    {
        return _inventJournalTrans.JournalType == InventJournalType::Count;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTransIdOrig_RU</Name>
				<Source><![CDATA[
    private boolean checkTransIdOrig_RU(
        InventTransOriginId _current,
        InventTransOriginId _orig)
    {
        InventTrans inventTransCurr;
        InventTrans inventTransOrig;

        select firstonly RecId from inventTransCurr
            where inventTransCurr.InventTransOrigin == _current
        notexists join inventTransOrig
            where inventTransOrig.InventTransOrigin == _orig
               && inventTransOrig.InventDimId       == inventTransCurr.InventDimId;

        return inventTransCurr.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// An object of the <c>runbaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be built either by using the <c>dialog</c> system or by using a class that is created
    /// in the AOT.
    /// </remarks>
    #define.columns(2)
    public Object dialog()
    {
        super();

        if (inventReportsList && ! inventReportsList.empty())
        {
            ListIterator it = new ListIterator(inventReportsList);

            str warn = "@GLS106680";

            while (it.more())
            {
                InventJournalReport_RU report = it.value();
                warn += '\n' + report.description();
                it.next();
            }

            DialogGroup dialogGroup = dialog.addGroup();

            dialogGroup.frameType(FormFrameType::Auto);
            dialogGroup.widthMode(1);
            dialogGroup.heightMode(1);
            dialogGroup.columns(#columns);

            dialog.addInfoImage();

            dialog.addText(warn, 400);

            dialog.addMenuItemButton(MenuItemType::Display, menuitemDisplayStr(InventJournalPrint_RU), DialogMenuItemGroup::BottomGrp);

            dialog.addTabPage("@SYS70732");
            printField  = dialog.addFieldValue(enumStr(NoYes),printReportList, "@SYS55777", "@SYS12608");
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorDimensionsAreDifferent_RU</Name>
				<Source><![CDATA[
    private boolean errorDimensionsAreDifferent_RU(InventTransOriginId _derived,
                                                   InventTransOriginId _original)
    {
        return checkFailed(strFmt("@GLS112471",
                                  InventTransOrigin::find(_derived).InventTransId,
                                  InventTransOrigin::find(_original).InventTransId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        if (printField)
        {
            printReportList = printField.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getjournalType</Name>
				<Source><![CDATA[
    private anytype getjournalType()
    {
        if (!isJournalTypeSetFromJournalRecord)
        {
            this.setJournalType();
        }

        return journalType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleExciseQuantityRegister_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the excise quantity register.
    /// </summary>
    /// <param name="_taxModelExciseTaxable">
    /// The tax model excise taxable information.
    /// </param>
    protected void handleExciseQuantityRegister_IN(TaxModelExciseTaxable_IN _taxModelExciseTaxable)
    {
        TaxExciseQuantityRegister_IN            register;

        if (_taxModelExciseTaxable)
        {
            if (_taxModelExciseTaxable.isExicseDSA())
            {
                register = TaxExciseRegisterFacade_IN::updateDSAQuantityRegister(_taxModelExciseTaxable);
            }
            else if (_taxModelExciseTaxable.getExciseRecordType() == ExciseRecordType_IN::RG23D)
            {
                register = TaxExciseRegisterFacade_IN::updateRG23DQuantityRegister(_taxModelExciseTaxable);
            }
            else if (_taxModelExciseTaxable.getExciseRecordType() != ExciseRecordType_IN::None)
            {
                register = TaxExciseRegisterFacade_IN::updatePartIRegister(_taxModelExciseTaxable);
            }

            if (register.RecId != 0)
            {
                TaxTransExtensionRGQuantityHandler_IN rgQuantityHandler = new TaxTransExtensionRGQuantityHandler_IN();
                rgQuantityHandler.setExciseRegister(register);
                rgQuantityHandler.setTaxModelTaxable(_taxModelExciseTaxable as TaxModelTaxable_IN);
                rgQuantityHandler.init();
                rgQuantityHandler.setData();
                TaxTrans_IN taxTransIN = rgQuantityHandler.post();

                register.selectForUpdate(true);
                register.TaxTrans_IN = taxTransIN.RecId;
                register.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReportData_RU</Name>
				<Source><![CDATA[
    public void initReportData_RU()
    {
        InventJournalTable      inventJournalTable = InventJournalTable::find(journalId);

        inventReportsList = InventJournalReport_RU::buildReportList(InventJournalTable::find(journalId).JournalNameId);

        ListIterator it = new ListIterator(inventReportsList);

        while (it.more())
        {
            InventJournalReport_RU report = it.value();
            report.journalId(journalId);
            report.initOfficialsDefault(inventJournalTable.OffSessionId_RU);
            it.next();
        }

        if (inventReportsList.empty())
        {
            printReportList = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    public IdentifierName lastValueDesignName()
    {
        if (journalTableId && journalId)
        {
            JournalTableMap journal = JournalStatic::findJournalTableId(journalTableId,journalId,false);
            return enum2str(journal.JournalType);
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerSysModule</Name>
				<Source><![CDATA[
    protected SysModule ledgerSysModule()
    {
        return SysModule::Invent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTransTxtType</Name>
				<Source><![CDATA[
    protected LedgerTransTxt ledgerTransTxtType()
    {
        Integer journalTypeId = journalTableData.journalTable().JournalType;
        InventJournalType journalTypeEnumValue = any2Enum(journalTypeId);
                
        switch (journalTypeEnumValue)
        {
            case InventJournalType::Movement        : return LedgerTransTxt::InventJournalTransaction;
            case InventJournalType::LossProfit      : return LedgerTransTxt::InventJournalLossProfit;
            case InventJournalType::Transfer        : return LedgerTransTxt::InventJournalTransfer;
            case InventJournalType::BOM             : return LedgerTransTxt::InventJournalBOM;
            case InventJournalType::Count           : return LedgerTransTxt::InventJournalCount;
            case InventJournalType::project         : return LedgerTransTxt::InventJournalLossProfit;
        }
        return LedgerTransTxt::InventJournalTransaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTransType</Name>
				<Source><![CDATA[
    protected LedgerTransType ledgerTransType()
    {
        return LedgerTransType::Invent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, this.packReportList(), super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>packReportList</Name>
				<Source><![CDATA[
    public container packReportList()
    {
        if (inventReportsList)
        {
            return inventReportsList.pack();
        }

        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetBookId_BR</Name>
				<Source><![CDATA[
    public AssetBookId parmAssetBookId_BR(AssetBookId _bookdId = bookId_BR)
    {
        bookId_BR   = _bookdId;
        return bookId_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetId_BR</Name>
				<Source><![CDATA[
    public AssetId parmAssetId_BR(AssetId _assetId = assetId_BR)
    {
        assetId_BR = _assetId;
        return assetId_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePostedLines</Name>
				<Source><![CDATA[
    protected void deletePostedLines()
    {
        if (BrazilParameters::isEnabled())
        {
            this.insertFBProduction_BR();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFBProduction_BR</Name>
				<Source><![CDATA[
    private void insertFBProduction_BR()
    {
        if (journalTableId == tableNum(InventJournalTable)
            && this.getjournalType() == InventJournalType::BOM)
        {
            FBInventJournalCheckPostEventHandler_BR::insertFBProductionFromBOMJournal(this.parmJournalId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts journal and saves its data to the <c>InventJournalReportTable_RU</c> table.
    /// </summary>
    /// <param name="_journalTransList">
    /// A list of transactions to be posted.
    /// </param>
    protected void postJournal(JournalTransList _journalTransList)
    {
        super(_journalTransList);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.createTransLink_RU();
        }

        if (this.numOfPostedLines() >  0 &&
            inventReportsList            &&
            ! inventReportsList.empty()     )
        {
            ListIterator it = new ListIterator(inventReportsList);

            while (it.more())
            {
                InventJournalReport_RU report = it.value();
                report.saveReport(_journalTransList);
                it.next();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventJournalTransCostAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the cost amount from the <c>InventJournalTrans</c>.
    /// </summary>
    /// <param name = "_inventJournalTrans">An <c>InventJournalTrans</c> object.</param>
    /// <param name = "_movement">The <c>InventMovement</c> object.</param>
    /// <returns>The calculated <c>CostAmount</c> value.</returns>
    protected CostAmount inventJournalTransCostAmount(
        InventJournalTrans  _inventJournalTrans,
        InventMov_Journal   _movement)
    {
        return abs(_inventJournalTrans.CostAmount) * _movement.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventUpd_Financial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventUpd_Financial</c> class.
    /// </summary>
    /// <param name="_inventJournalTrans">
    /// An <c>InventJournalTrans</c> object.
    /// </param>
    /// <param name="_movement">
    /// The <c>InventMovement</c> object.
    /// </param>
    /// <param name="_ledgerVoucher">
    /// A <c>LedgerVoucher</c> object.
    /// </param>
    /// <returns>
    /// An instance of <c>InventUpd_Financial</c>.
    /// </returns>
    protected InventUpd_Financial createInventUpd_Financial(
        InventJournalTrans  _inventJournalTrans,
        InventMov_Journal   _movement,
        LedgerVoucher       _ledgerVoucher)
    {
        InventUpd_Financial financial;
        CostAmount          costAmount = this.inventJournalTransCostAmount(_inventJournalTrans, _movement);
        // <GEERU>
        boolean             countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        // <GEERU>
        if (countryRegion_RU)
        {
            financial = InventUpd_Financial::newCheckPostInventJournalTrans(_movement,
                                                            _ledgerVoucher,
                                                            costAmount,
                                                            abs(_inventJournalTrans.costAmountSecCurStd_RU()) * _movement.transSign());
        }
        else
        {
            // </GEERU>
            financial = InventUpd_Financial::newCheckPostInventJournalTrans(_movement, _ledgerVoucher, costAmount);
            // <GEERU>
        }
        // </GEERU>

        return financial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTransLedgerMovement</Name>
				<Source><![CDATA[
    protected InventUpd_Financial postTransLedgerMovement(
        InventJournalTrans  _inventJournalTrans,
        InventMov_Journal   _movement,
        LedgerVoucher       _ledgerVoucher)
    {
        InventUpd_Financial financial = this.createInventUpd_Financial(_inventJournalTrans, _movement, _ledgerVoucher);

        //use a cost cache to improve performance for scenarios where the same item is used on multiple journal lines, e.g. for serial number controlled items
        if (!inventCostOnhandCache)
        {
            inventCostOnhandCache = InventCostOnhandCache::construct();
        }
        financial.parmInventCostOnhandCache(inventCostOnhandCache);

        _movement.journalPostTrans(_ledgerVoucher, financial);

        return financial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTransLedger</Name>
				<Source><![CDATA[
    protected void postTransLedger(
        JournalTransData    _journalTransData,
        LedgerVoucher       _ledgerVoucher)
    {
        InventJournalTrans  inventJournalTrans = _journalTransData.journalTrans();
        // <PMF>
        // </PMF>

        // <GIN>
        boolean                 countryRegion_IN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
        // </GIN>
        // <GEERU>
        boolean             countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            this.setTransferredInventory_BR();
        }
        // </GBR>

        // <GEERU>
        if (countryRegion_RU)
        {
            _ledgerVoucher.findLedgerVoucherObject().parmCorrection(inventJournalTrans.Storno_RU);
        }
        // </GEERU>
        super(_journalTransData, _ledgerVoucher);

        // Set reason reference to zero when journal is posted in 'summary' mode
        if (inventJournalTrans.inventJournalTable().DetailSummary == DetailSummary::Summary)
        {
            inventJournalTrans.ReasonRefRecId = 0;
        }

        InventMov_Journal movement = InventMovement::construct(inventJournalTrans);

        if (movement.inventModelType().mustUpdateInventJournalCost(inventJournalTrans.JournalType) || movement.inventModelGroup().StandardCost)
        {
            // Update journal trans with the latest standard cost.
            inventJournalTrans.setCostPrice(movement.inventDimId(), movement.inventdim());
        }

        // <PMF>
        PdsCatchWeightOnHandAdjustment pdsCatchWeightOnHandAdjustment = PdsCatchWeightOnHandAdjustment::newMovement(movement);
        InventOnHand inventOnHand = InventOnHand::newPhysicalUpdate(movement,  movement.inventDim());
        if (movement.remainPhysical() < 0) // Do adjustment when reducing the on-hand quantity
        {
            pdsCatchWeightOnHandAdjustment.increaseQuantityIfNeeded(inventOnHand, -movement.remainPhysical(), -movement.pdsCWRemainPhysical(), movement.inventDimId());
        }
        // </PMF>

        InventUpd_Financial financial = this.postTransLedgerMovement(inventJournalTrans, movement, _ledgerVoucher);

        if (inventJournalTrans.ProjId)
        {
            ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(classStr(InventJournalCheckPost_Movement));

            using (var activityContext = logger.projOpsFinActivity().postProjectJournalContext())
            {
                JournalNameId journalName = _journalTransData.journalTableData().journalTable().JournalNameId;

                activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::JournalNameProperty, journalName);
                activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::JournalIdProperty, inventJournalTrans.JournalId);
                                
                logger.logInformation(strFmt(ProjOpsFinancialsInstrumentationActivites::JournalPostingLogMessageFmt,
                    journalName, inventJournalTrans.JournalId, inventJournalTrans.LineNum,
                    inventJournalTrans.ProjId, inventJournalTrans.ProjTransId, inventJournalTrans.Voucher));

                ProjPost::newCreateProjTransItem(inventJournalTrans, _ledgerVoucher, movement.projAdjustRefId(), movement.parmMustNotReduceForecast()).postTrans();
            }
        }

        if (inventJournalTrans.inventJournalTable().JournalType == InventJournalType::Transfer)
        {
            InventMov_Journal movement_Transfer = InventMovement::construct(inventJournalTrans,InventMovSubType::TransferReceipt);

            // <GEERU>
            if (countryRegion_RU)
            {
                financial = InventUpd_Financial::newCheckPostInventJournalTrans(movement_Transfer,
                                                                                _ledgerVoucher,
                                                                                -financial.updCostAmountInvent(),
                                                                                -financial.updCostAmountInventSecCur_RU(),
                                                                                NoYes::Yes);
            }
            else
            {
                // </GEERU>
                financial = InventUpd_Financial::newCheckPostInventJournalTrans(movement_Transfer, _ledgerVoucher, -financial.updCostAmountInvent());
                // <GEERU>
            }
            // </GEERU>
            financial.parmInventCostOnhandCache(inventCostOnhandCache);
            movement_Transfer.journalPostTrans(_ledgerVoucher, financial);
        }

        // <GIN>
        if (countryRegion_IN
            && TaxParameters::find().Excise_IN
            && !inventJournalTrans.ProjId)
        {
            TransTaxInformation transTaxInformation = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(inventJournalTrans);
            if ((inventJournalTrans.JournalType == InventJournalType::Movement
                    || (inventJournalTrans.JournalType == InventJournalType::BOM && inventJournalTrans.BOMLine))
                && transTaxInformation.ExciseType != ExciseType_IN::None && !transTaxInformation.ExciseECCRegistrationNumber)
            {
                throw error(strFmt("@SYS26332","@GLS5102"));
            }

            if (inventJournalTrans.JournalType != InventJournalType::BOM || inventJournalTrans.BOMLine)
            {
                this.updateExciseRegister_IN(inventJournalTrans);
            }
        }
        // </GIN>

        if (inventCostOnhandCache)
        {
            inventCostOnhandCache.clearCache(movement);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runEnd</Name>
				<Source><![CDATA[
    protected Integer runEnd(boolean _deleteErrors = false)
    {
        Integer ret = super(_deleteErrors);

        if (journalCheckPostType != JournalCheckPostType::Check
            && journalTableData.journalTable().Posted)
        {
            InventJournalTable inventJournalTable = journalTableData.journalTable();
            InventJournalPostedBusinessEvent::send(inventJournalTable);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrint_RU</Name>
				<Source><![CDATA[
    protected void runPrint_RU()
    {
        InventJournalReportTable_RU reportTable;

        if (printReportList)
        {
            while select reportTable
                where reportTable.JournalId == journalId
            {
                InventJournalReport_RU::printReport(reportTable, !inBatch);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJournalTableParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets parameters related to the journal.
    /// </summary>
    /// <param name="_tableId">
    /// The <c>tableId</c> ID of the table holding the JournalTable data.
    /// </param>
    /// <param name="_journalId">
    /// The <c>JournalId</c> ID of the journal.
    /// </param>
    public void setJournalTableParameters(
        TableId     _tableId,
        JournalId   _journalId)
    {
        this.parmJournalTableId(_tableId);
        this.parmJournalId(_journalId);
        this.setJournalType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJournalType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the journalType.
    /// </summary>
    private void setJournalType()
    {
        JournalTableMap journalTableMap = JournalStatic::findJournalTableId(journalTableId,journalId,false);

        //only set the flag if we found it based on an actual journal to prevent caching of a journalType for recId = 0
        if (journalTableMap.RecId)
        {
            isJournalTypeSetFromJournalRecord = true;
        }

        journalType = journalTableMap.JournalType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransferredInventory_BR</Name>
				<Source><![CDATA[
    private void setTransferredInventory_BR()
    {
        AssetBook       assetBook;
        AssetBookTable  assetBookTable;

        select firstonly assetBook
            where assetBook.AssetId == assetId_BR
            && assetBook.BookId == bookId_BR
            && assetBook.Status == AssetStatus::NoAcquisition
        exists join assetBookTable
            where assetBookTable.BookId == assetBook.BookId
            && assetBookTable.CurrentOperationsTax == CurrentOperationsTax::Current;

        if (assetBook)
        {
            AssetTable assetTable = AssetTable::find(assetId_BR, true);
            assetTable.TransferredFromInventory_BR = NoYes::Yes;
            assetTable.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogType</Name>
				<Source><![CDATA[
    protected TransactionLogType transactionLogType()
    {
        return TransactionLogType::InventJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferErrorJournalLine</Name>
				<Source><![CDATA[
    protected void transferErrorJournalLine(
        JournalTransMap     _journalTrans,
        JournalTableData    _toJournalTableData,
        JournalTableMap     _toJournalTable)
    {
        InventJournalTrans                      inventJournalTrans              = _journalTrans;

        if (inventJournalTrans.InventTransId)
        {
            InventTransOriginJournalTrans inventTransOriginJournalTrans = InventTransOriginJournalTrans::findByJournal(inventJournalTrans.DataAreaId, inventJournalTrans.JournalId, inventJournalTrans.LineNum, true);
            if (inventTransOriginJournalTrans.RecId)
            {
                inventTransOriginJournalTrans.InventJournalId   = _toJournalTable.JournalId;
                inventTransOriginJournalTrans.update();

                InventTransOrigin::changeReferenceId(inventTransOriginJournalTrans.InventTransOrigin, _toJournalTable.JournalId);
            }
        }

        if (inventJournalTrans.ToInventTransId)
        {
            InventTransOriginJournalTransReceipt inventTransOriginJournalTransReceipt = InventTransOriginJournalTransReceipt::findByJournal(inventJournalTrans.DataAreaId, inventJournalTrans.JournalId, inventJournalTrans.LineNum, true);
            if (inventTransOriginJournalTransReceipt.RecId)
            {
                inventTransOriginJournalTransReceipt.JournalTransferReceiptId = _toJournalTable.JournalId;
                inventTransOriginJournalTransReceipt.update();

                InventTransOrigin::changeReferenceId(inventTransOriginJournalTransReceipt.InventTransOrigin, _toJournalTable.JournalId);
            }
        }

        super(_journalTrans, _toJournalTableData, _toJournalTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        //changed in version 6.2
        #LOCALMACRO.ListVersion13
            printReportList
        #ENDMACRO

        Integer   version = conPeek(_packedClass,1);
        boolean   ret = true;
        container packedList, base;

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList, packedList, base] = _packedClass;

                if (packedList && (! this.inGetSaveLast() || this.isInBatch()))
                {
                    inventReportsList = List::create(packedList);
                }
                super(base);
                break;

            case 13 :
                [version, #ListVersion13, packedList, base] = _packedClass;

                if (packedList && (! this.inGetSaveLast() || this.isInBatch()))
                {
                    inventReportsList = List::create(packedList);
                }
                super(base);
                break;
            default :
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExciseRegister_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the excise register information.
    /// </summary>
    /// <param name="_inventJournalTrans">
    /// The invent journal transaction.
    /// </param>
    protected void updateExciseRegister_IN(InventJournalTrans _inventJournalTrans)
    {
        TaxModelExciseTaxable_IN taxModelExciseTaxable = TaxModelDocLineFactory::newTaxModelDocLine(_inventJournalTrans) as TaxModelExciseTaxable_IN;

        if (taxModelExciseTaxable)
        {
            if (taxModelExciseTaxable.shouldPostQuantityRegister())
            {
                this.handleExciseQuantityRegister_IN(taxModelExciseTaxable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransferRelations</Name>
				<Source><![CDATA[
    protected void updateTransferRelations(JournalTableData _toJournalTableData)
    {
        InventJournalTable  inventJournalTable = _toJournalTableData.journalTable();
        InventJournalId     inventJournalId = inventJournalTable.JournalId;

        if (inventJournalTable.JournalType  == InventJournalType::Count)
        {
            // Transfer counting locks on InventItemLocation
            if (journalTableData.journalTransList().first())
            {
                do
                {
                    InventJournalTrans inventJournalTrans = journalTableData.journalTransList().item();
                    if (this.hasTransError(inventJournalTrans))
                    {
                        InventDim inventDim = inventJournalTrans.inventDim();
                        ttsbegin;
                        if (inventJournalTrans.isCountingStatusRegistrationEnabled(inventJournalTable))
                        {
                            InventItemLocation::updateStopCounting( inventJournalTrans.ItemId, inventDim);
                            InventItemLocation::updateStartCounting(inventJournalTrans.ItemId, inventDim, inventJournalId);
                        }
                        ttscommit;
                    }
                }
                while (journalTableData.journalTransList().next());
            }
        }

        super(_toJournalTableData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBatch</Name>
				<Source><![CDATA[
    public void initBatch(Batch batch)
    {
        super(batch);

        if (skipBatchRetryable)
        {
            batch.retriesOnFailure = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the current class instance based on the journal header record argument.
    /// </summary>
    /// <param name = "_journalTable">The journal header record to initialize from.</param>
    public void initFromJournalTable(Common _journalTable)
    {
        super(_journalTable);

        #isoCountryRegionCodes
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            InventJournalTable inventJournalTableLocal = _journalTable as InventJournalTable;
            this.parmJournalId(inventJournalTableLocal.JournalId);
            this.initReportData_RU();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the project budget for the inventory journal.
    /// </summary>
    /// <returns>
    ///    true if the journal is valid; otherwise, false.
    /// </returns>
    private boolean validateProjPost()
    {
        boolean             ret = true;   
        JournalTransList    journalTransList = journalTableData.journalTransList();

        journalTransList.reset();

        while (journalTransList.next())
        {
            ret = ret && this.validateProjPostTrans(journalTransList.journalTransData().journalTrans());
        }

        journalTransList.reset(); // To avoid that call to journalTransList.next() doesn't return anything when called later.        

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjPostTrans</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean validateProjPostTrans(InventJournalTrans _inventJournalTrans)
    {
        return ProjPost::validateBudget(_inventJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [SysObsolete('Please use factory InventJournalCheckPost::constrct() instead', false, 31\05\2017)]
    public static InventJournalCheckPost_Movement construct()
    {
        return new InventJournalCheckPost_Movement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeJournalCheckPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>InventJournalCheckPost_Movement</c> class used for posting or validating a journal.
    /// </summary>
    /// <param name="_autoBlock">A Boolean value that indicates whether the journal should be automatically blocked during posting.</param>
    /// <param name="_showInfoResult">A Boolean value that indicates whether any errors should be shown in the Infolog.</param>
    /// <param name="_journalCheckPostType">A <c>JournalCheckPostType</c> enumeration value that indicates whether the new instance is used for posting or validating the journal.</param>
    /// <param name="_tableId">The table ID of the journal table.</param>
    /// <param name="_journalId">The ID of the journal to validate or post.</param>
    /// <param name="_journalTransData">An instance of <c>JournalTransData</c> class; optional.</param>
    public void initializeJournalCheckPost(
        boolean                 _autoBlock,
        boolean                 _showInfoResult,
        JournalCheckPostType    _journalCheckPostType,
        TableId                 _tableId,
        JournalId               _journalId,
        JournalTransData        _journalTransData = null)
    {
        super(_autoBlock, _showInfoResult, _journalCheckPostType, _tableId, _journalId, _journalTransData);

        this.parmJournalTableId(_tableId);  // in order to find the specific lastValue (see lastValueDesignName)
        this.parmJournalId(_journalId);
        this.getLast();

        this.parmAutoBlock(_autoBlock);
        this.parmShowInfoResult(_showInfoResult);
        this.parmJournalCheckPostType(_journalCheckPostType);
        this.setJournalTableParameters(_tableId, _journalId);
        this.parmThrowCheckFailed(false);

        if (_journalCheckPostType == JournalCheckPostType::Post && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.initReportData_RU();
        }

        if (_journalTransData)
        {
            if (BrazilParameters::isEnabled())
            {
                InventJournalTrans  journalTrans = _journalTransData.journalTrans();
                this.parmAssetId_BR(journalTrans.AssetId);
                this.parmAssetBookId_BR(journalTrans.AssetBookId);
            }

            if (SysDictField::isFieldMapped(tableStr(JournalTransMap), tableId2Name(_tableId), fieldStr(JournalTransMap, Voucher)))
            {
                this.parmVoucher(_journalTransData.journalTrans().Voucher);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalCheckPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventJournalCheckPost_Movement</c> class that is used for posting
    /// or validating a journal.
    /// </summary>
    /// <param name="_autoBlock">
    /// A Boolean value that indicates whether the journal should be automatically blocked during posting.
    /// </param>
    /// <param name="_showInfoResult">
    /// A Boolean value that indicates whether any errors should be shown in the Infolog.
    /// </param>
    /// <param name="_journalCheckPostType">
    /// A <c>JournalCheckPostType</c> enumeration value that indicates whether the new instance is used for
    /// posting or validating the journal.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the journal table.
    /// </param>
    /// <param name="_journalId">
    /// The ID of the journal to validate or post.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventJournalCheckPost_Movement</c> class.
    /// </returns>
    [SysObsolete('Please use factory InventJournalCheckPost::newJournalCheckPost() instead', false, 31\05\2017)]
    public static InventJournalCheckPost_Movement newJournalCheckPost(
        boolean                 _autoBlock,
        boolean                 _showInfoResult,
        JournalCheckPostType    _journalCheckPostType,
        TableId                 _tableId,
        JournalId               _journalId)
    {
        InventJournalCheckPost_Movement inventJournalCheckPost_Movement = InventJournalCheckPost_Movement::construct();

        inventJournalCheckPost_Movement.initializeJournalCheckPost(_autoBlock, _showInfoResult, _journalCheckPostType, _tableId, _journalId);

        return inventJournalCheckPost_Movement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalCheckPostVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventJournalCheckPost_Movement</c> class that is used for posting
    /// or validating a journal and specifying a specific voucher.
    /// </summary>
    /// <param name="_autoBlock">
    /// A Boolean value that indicates whether the journal should be automatically blocked during posting.
    /// </param>
    /// <param name="_showInfoResult">
    /// A Boolean value that indicates whether any errors should be shown in the Infolog.
    /// </param>
    /// <param name="_journalCheckPostType">
    /// A <c>JournalCheckPostType</c> enumeration value that indicates whether the new instance is used for
    /// posting or validating the journal.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the journal table.
    /// </param>
    /// <param name="_journalId">
    /// The ID of the journal to validate or post.
    /// </param>
    /// <param name="_voucher">
    /// The ID of the voucher to use.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventJournalCheckPost_Movement</c> class.
    /// </returns>
    [SysObsolete('Please use factory InventJournalCheckPost::newJournalCheckPost() instead', false, 31\05\2017)]
    public static InventJournalCheckPost_Movement newJournalCheckPostVoucher(
        boolean                 _autoBlock,
        boolean                 _showInfoResult,
        JournalCheckPostType    _journalCheckPostType,
        TableId                 _tableId,
        JournalId               _journalId,
        Voucher                 _voucher)
    {
        InventJournalCheckPost_Movement inventJournalCheckPost_Movement;

        inventJournalCheckPost_Movement = InventJournalCheckPost_Movement::newJournalCheckPost(_autoBlock, _showInfoResult, _journalCheckPostType, _tableId, _journalId);
        inventJournalCheckPost_Movement.parmVoucher(_voucher);

        return inventJournalCheckPost_Movement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransLink_RU</Name>
				<Source><![CDATA[
    private void createTransLink_RU()
    {
        TransLink_RU        transLink;
        InventTrans         inventTrans, inventTransOrig;
        InventTransOrigin   inventTransOrigin;
        JournalTransList    journalTransList = journalTableData.journalTransList();

        if (journalTransList.first())
        {
            do
            {
                InventJournalTrans inventJournalTrans = journalTransList.item();

                select firstonly inventTrans
                    join RefPri from transLink
                        where transLink.RefTableId  == inventTrans.TableId &&
                              transLink.RefSec      == inventTrans.RecId
                    exists join inventTransOrigin
                        where  inventTransOrigin.RecId         == inventTrans.InventTransOrigin
                           && (inventTransOrigin.InventTransId == inventJournalTrans.InventTransId
                           ||  inventTransOrigin.InventTransId == inventJournalTrans.ToInventTransId);

                if (inventTrans)
                {
                    inventTransOrig = InventTrans::findRecId(transLink.RefPri);

                    LedgerTransLink_RU ledgerTransLink = LedgerTransLink_RU::newTrans(inventTrans, inventTransOrig);
                    ledgerTransLink.parmVoucherField(fieldnum(InventTrans, Voucher));
                    ledgerTransLink.parmAccountingDateField(fieldnum(InventTrans, DateFinancial));
                    ledgerTransLink.parmReportingDate(inventTransOrig.DateFinancial);
                    ledgerTransLink.run();
                }
            }
            while (journalTransList.next());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIsJournalTableModified</Name>
				<Source><![CDATA[
    protected void checkIsJournalTableModified()
    {
        if (journalTableId == tableNum(InventJournalTable))
        {
            InventJournalTable localInventJournalTable =  InventJournalTable::find(journalId);
            inventjournalTable orig = journalTableData.journalTable() as InventJournalTable;
            if (localInventJournalTable.RecVersion != orig.RecVersion)
            {
                warning ("@SCM:InventoryJournalTableChanged");

                SysDictTable dictTable = new SysDictTable(journalTableId);
                FieldId fieldId;
                FieldName fieldName;

                fieldId = dictTable.fieldNext(0);
                while (fieldId)
                {
                    if (!isSysId(fieldId) && !this.isSkippedField(fieldId) && localInventJournalTable.(fieldId) != orig.(fieldId))
                    {
                        fieldName = dictTable.fieldName(fieldId);
                        warning (strFmt("@SCM:InventoryJournalValueChanged", fieldName, orig.(fieldId), localInventJournalTable.(fieldId)));
                    }
                    fieldId = dictTable.fieldNext(fieldId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSkippedField</Name>
				<Source><![CDATA[
    private boolean isSkippedField(FieldId _fieldId)
    {
        switch (_fieldId)
        {
            case fieldNum(InventJournalTable, Posted):
            case fieldNum(InventJournalTable, PostedDateTime):
            case fieldNum(InventJournalTable, PostedUserId):
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareDuplicatedItemDimensionSet</Name>
				<Source><![CDATA[
    private void prepareDuplicatedItemDimensionSet(JournalTransList _journalTransList)
    {
        Integer journalTypeId = _journalTransList.journalTableData().journalTable().JournalType;
        InventJournalType journalTypeEnumValue = any2Enum(journalTypeId);

        if (journalTypeEnumValue == InventJournalType::Count && _journalTransList.count() > 1)
        {
            this.populateDuplicatedItemDimensionSet();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDupJounralTrans</Name>
				<Source><![CDATA[
    private boolean checkDupJounralTrans(JournalTransData _journalTransData)
    {
        InventJournalTrans  inventJournalTrans  = _journalTransData.journalTrans();

        if (journalLineDuplicateCheckflightEnabled)
        {
            if (setDuplicatedItemDim && setDuplicatedItemDim.in(this.getItemInventDimCacheKey(inventJournalTrans)))
            {
                return checkFailed(strFmt("@SCM:MultipleJournalLinesHaveSameDimensionsItem", inventJournalTrans.ItemId, InventDim::find(inventJournalTrans.InventDimId).preFix()));
            }
        }
        else
        {
            if (!setDuplicatedItemDim && _journalTransData.journalTableData().getNumOfLines() > 1)
            {
                this.populateDuplicatedItemDimensionSet();
                if (setDuplicatedItemDim.in(this.getItemInventDimCacheKey(inventJournalTrans)))
                {
                    return checkFailed(strFmt("@SCM:MultipleJournalLinesHaveSameDimensionsItem", inventJournalTrans.ItemId, InventDim::find(inventJournalTrans.InventDimId).preFix()));
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>