<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResCancelSoftReservation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to detect and cancel soft reservation from the resource scheduling collection.
/// </summary>
class ResCancelSoftReservation
{
    ListEnumerator schedulesListEnum;
    ResReservationType reservationType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>hasSoftReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Detect whether the list of hard reservation contains any soft reservation commitment to the same activity.
    /// If so, this method can cancel soft reservation upon user request.
    /// </summary>
    /// <param name = "_timeScale">The specified time scale.</param>
    /// <returns>true if the list contains soft reservation; otherwise, false.</returns>
    public boolean hasSoftReservation(AVTimeframeType _timeScale = AVTimeframeType::Day)
    {
        boolean hasSoftReservation = false;
        schedulesListEnum.reset();

        while (!hasSoftReservation && schedulesListEnum.moveNext())
        {
            ResIReservationSchedule currentSchedule = schedulesListEnum.current();
            ResCommitType currentCommitment = currentSchedule.commitment();
            reservationType = currentSchedule.reservationType();

            // Determines if any soft reservation for the selected activity reosurce at the specific time frame.
            if ((currentCommitment == ResCommitType::HardBook) && !hasSoftReservation)
            {
                activityresourcerecid activityResource = currentSchedule.activityResource();

                // if schedule object conaints no activity resource, then attempt to look up by activity and resource
                if (!activityResource)
                {
                    activityResource = ActivityResourceFacade::findByActivityAndResource(currentSchedule.activity(), currentSchedule.resource());
                }

                if (activityResource)
                {
                    if (reservationType == ResReservationType::Assignment)
                    {
                        hasSoftReservation = ActivityResourceFacade::hasAssignmentByTimeFrame(activityResource,
                            currentSchedule.start(), currentSchedule.end(), ResCommitType::SoftBook, _timeScale);
                    }
                    else
                    {
                        hasSoftReservation = ActivityResourceFacade::hasBookingByTimeFrame(activityResource,
                            currentSchedule.start(), currentSchedule.end(), ResCommitType::SoftBook, _timeScale);
                    }
                }
            }
        }
        return hasSoftReservation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserFeedBackOnSoftReservationCancelling</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get user feed back on cancelling soft reservation by launching yes no message box.
    /// </summary>
    /// <returns>Whether soft reservation should be cancelled.</returns>
    public boolean getUserFeedBackOnSoftReservationCancelling()
    {
        boolean cancelSoftReservation = false;

        // ask the user if the soft reservation should be removed
        if (Box::yesNo(strFmt("@Res:SoftReservationHasBeenFound",
                strLwr(enum2Str(reservationType))), DialogButton::Yes) == DialogButton::Yes)
        {
            cancelSoftReservation = true;
        }

        return cancelSoftReservation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelSoftReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancel soft reservation from the schedules collection.
    /// </summary>
    /// <param name = "_updateRollUpAsync">Update <c>ResRollUp</c> table in async.</param>
    /// <param name = "_syncSpecificTimeScale">Whether to update <c>ResRollUp</c> synchronization in a specific time scale and the rest in asynch.</param>
    /// <param name = "_timeFrameType">If _synSpecificTimeScale is set to true, specify which timescale will be update in synchronous.</param>
    public void cancelSoftReservation(boolean _updateRollUpAsync = false,
        boolean _syncSpecificTimeScale = false, AVTimeframeType _timeFrameType = AVTimeframeType::Day)
    {
        schedulesListEnum.reset();
        List cancelSchedules = new List(Types::Class);
        while (schedulesListEnum.moveNext())
        {
            ResIReservationSchedule originalSchedule = schedulesListEnum.current();
            ResIReservationSchedule cancelSchedule = ResReservationSchedule::copyReservationSchedule(originalSchedule);
            cancelSchedule.commitment(ResCommitType::SoftBook);
            cancelSchedules.addEnd(cancelSchedule);
        }

        ResIResourceManager resourceManager = ResResourceManager::construct();
        resourceManager.CancelProcessor(ResCancelProcessor::getProcessor(ResCancelationType::EntireDay));
        resourceManager.Schedules(cancelSchedules);
        resourceManager.parmSyncSpecificTimeScale(_syncSpecificTimeScale);
        resourceManager.TimeFrameType(_timeFrameType);
        ttsbegin;
        resourceManager.Cancel(_updateRollUpAsync);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>ResCancelSoftReservation</c>.
    /// </summary>
    /// <param name = "_schedulesList">The schedules collection.</param>
    protected void new (List _schedulesList)
    {
        schedulesListEnum = _schedulesList.getEnumerator();
        reservationType = ResReservationType::Booking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contructs a new instance of the the <c>ResCancelSoftReservation</c>.
    /// </summary>
    /// <param name = "_schedulesList">The schedules collection.</param>
    /// <returns>Returns an instance of <c>ResCancelSoftReservation</c>..</returns>
    public static ResCancelSoftReservation construct(List _schedulesList)
    {
        ResCancelSoftReservation cancelSoftBooking = new ResCancelSoftReservation(_schedulesList);
        return cancelSoftBooking;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>