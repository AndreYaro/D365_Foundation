<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailMatrixPivotDimensionFactory</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  This class is used for matrix pivot.
/// </summary>
class RetailMatrixPivotDimensionFactory
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>GetProductDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of <c>RetailMatrixPivotDimension</c> for the master product.
    /// </summary>
    /// <param name = "_ecoResProductRecId">Master product RecId.</param>
    /// <param name = "_global">A boolean value to show global product variants.</param>
    /// <returns>A list enumerator.</returns>
    public static ListEnumerator GetProductDimensions(EcoResProductRecId _ecoResProductRecId, boolean _global = false)
    {
        if (!_ecoResProductRecId)
        {
            throw error("@RET9001");
        }

        EcoResColor color;
        EcoResProductVariantColor variantColor;
        EcoResDistinctProductVariant productVariant;
        InventDimCombination inventDimCombination;
        Map dimensionValues = new Map(Types::String, Types::Int64);

        List dimensions = new List(Types::Class);

        RetailMatrixPivotDimension dimension = null;

        dimension = RetailMatrixPivotDimensionFactory::CreateColorDimension(_ecoResProductRecId, _global);
        if (dimension != null)
        {
            dimensions.addEnd(dimension);
        }

        dimension = RetailMatrixPivotDimensionFactory::CreateConfigurationDimension(_ecoResProductRecId, _global);
        if (dimension != null)
        {
            dimensions.addEnd(dimension);
        }

        dimension = RetailMatrixPivotDimensionFactory::CreateSizeDimension(_ecoResProductRecId, _global);
        if (dimension != null)
        {
            dimensions.addEnd(dimension);
        }

        dimension = RetailMatrixPivotDimensionFactory::CreateStyleDimension(_ecoResProductRecId, _global);
        if (dimension != null)
        {
            dimensions.addEnd(dimension);
        }

        if (dimensions.elements() == 0)
        {
            throw error("@RET9002");
        }

        return dimensions.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetVariants</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>TmpRetailMatrixPivotVariants</c> with variants' and dimensions' RecId for the master product.
    /// </summary>
    /// <param name = "_ecoResProductRecId">Master product RecId</param>
    /// <param name = "_global">A boolean value to shows global product variants.</param>
    /// <returns></returns>
    public static TmpRetailMatrixPivotVariants GetVariants(EcoResProductRecId _ecoResProductRecId, boolean _global = false)
    {
        return RetailMatrixPivotDimensionFactory::GetVariantsByCatalog(_ecoResProductRecId, _global, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetVariantsByCatalog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>TmpRetailMatrixPivotVariants</c> with variants' and dimensions' RecId for the master product.
    /// </summary>
    /// <param name = "_ecoResProductRecId">Master product RecId</param>
    /// <param name = "_global">A boolean value to shows global product variants.</param>
    /// <param name = "_catalogRecId">The catalog's <c>RecId</c>.</param>
    /// <returns></returns>
    public static TmpRetailMatrixPivotVariants GetVariantsByCatalog(EcoResProductRecId _ecoResProductRecId, boolean _global, CatalogRefRecId _catalogRecId)
    {
        TmpRetailMatrixPivotVariants variants;
        EcoResDistinctProductVariant productVariant;
        EcoResProductVariantColor variantColor;
        EcoResProductVariantConfiguration variantConfig;
        EcoResProductVariantSize variantSize;
        EcoResProductVariantStyle variantStyle;
        InventDimCombination inventDimCombination;

        RetailMatrixPivotDimensionFactory retailMatrixPivotDimensionFactory = new RetailMatrixPivotDimensionFactory();

        ttsbegin;

        QueryRun queryRun = new QueryRun(retailMatrixPivotDimensionFactory.CreateEcoResDistinctProductVariantQuery(_ecoResProductRecId));

        while (queryRun.next())
        {
            productVariant = queryRun.get(tableNum(EcoResDistinctProductVariant));
            variantColor = queryRun.get(tableNum(EcoResProductVariantColor));
            variantConfig = queryRun.get(tableNum(EcoResProductVariantConfiguration));
            variantSize = queryRun.get(tableNum(EcoResProductVariantSize));
            variantStyle = queryRun.get(tableNum(EcoResProductVariantStyle));
            inventDimCombination = queryRun.get(tableNum(InventDimCombination));

            if (_global || inventDimCombination.RecId)
            {
                if (retailMatrixPivotDimensionFactory.setTmpRetailMatrixPivotVariants(variants, productVariant, variantColor, variantConfig, variantSize, variantStyle))
                {
                    variants.insert();
                }
            }
        }

        if (_catalogRecId)
        {
            CatalogProduct catalogProduct;

            update_recordset variants
                setting IsAvailable = NoYes::No
                notexists join catalogProduct
                where variants.Variant == catalogProduct.Product && catalogProduct.Catalog == _catalogRecId;
        }

        ttscommit;

        return variants;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEcoResDistinctProductVariantQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>EcoResDistinctProductVariant</c> query.
    /// </summary>
    /// <param name = "_ecoResProductRecId">The product's <c>RecId</c>.</param>
    /// <returns>
    /// The query object with fields selected.
    /// </returns>
    [Wrappable(true)]
    protected final Query createEcoResDistinctProductVariantQuery(EcoResProductRecId _ecoResProductRecId)
    {
        Query query = new Query();

        QueryBuildDataSource qbdsProductVariant = query.addDataSource(tableNum(EcoResDistinctProductVariant));
        qbdsProductVariant.addRange(fieldNum(EcoResDistinctProductVariant, ProductMaster)).value(queryValue(_ecoResProductRecId));
        qbdsProductVariant.addSelectionField(fieldNum(EcoResDistinctProductVariant, RecId));

        QueryBuildDataSource qbdsVariantColor = qbdsProductVariant.addDataSource(tableNum(EcoResProductVariantColor));
        qbdsVariantColor.joinMode(JoinMode::OuterJoin);
        qbdsVariantColor.addLink(fieldNum(EcoResDistinctProductVariant, RecId), fieldNum(EcoResProductVariantColor, DistinctProductVariant));
        qbdsVariantColor.addSelectionField(fieldNum(EcoResProductVariantColor, Color));

        QueryBuildDataSource qbdsVariantConfig = qbdsVariantColor.addDataSource(tableNum(EcoResProductVariantConfiguration));
        qbdsVariantConfig.joinMode(JoinMode::OuterJoin);
        qbdsVariantConfig.addLink(fieldNum(EcoResDistinctProductVariant, RecId), fieldNum(EcoResProductVariantConfiguration, DistinctProductVariant), qbdsProductVariant.name());
        qbdsVariantConfig.addSelectionField(fieldNum(EcoResProductVariantConfiguration, Configuration));

        QueryBuildDataSource qbdsVariantSize = qbdsVariantConfig.addDataSource(tableNum(EcoResProductVariantSize));
        qbdsVariantSize.joinMode(JoinMode::OuterJoin);
        qbdsVariantSize.addLink(fieldNum(EcoResDistinctProductVariant, RecId), fieldNum(EcoResProductVariantSize, DistinctProductVariant), qbdsProductVariant.name());
        qbdsVariantSize.addSelectionField(fieldNum(EcoResProductVariantSize, Size));

        QueryBuildDataSource qbdsVariantStyle = qbdsVariantSize.addDataSource(tableNum(EcoResProductVariantStyle));
        qbdsVariantStyle.joinMode(JoinMode::OuterJoin);
        qbdsVariantStyle.addLink(fieldNum(EcoResDistinctProductVariant, RecId), fieldNum(EcoResProductVariantStyle, DistinctProductVariant), qbdsProductVariant.name());
        qbdsVariantStyle.addSelectionField(fieldNum(EcoResProductVariantStyle, Style));

        QueryBuildDataSource qbdsInventDimCombination = qbdsVariantStyle.addDataSource(tableNum(InventDimCombination));
        qbdsInventDimCombination.joinMode(JoinMode::OuterJoin);
        qbdsInventDimCombination.addLink(fieldNum(EcoResDistinctProductVariant, RecId), fieldNum(InventDimCombination, DistinctProductVariant), qbdsProductVariant.name());

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTmpRetailMatrixPivotVariants</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>TmpRetailMatrixPivotVariants</c> table buffer.
    /// </summary>
    /// <param name = "_variants">The <c>TmpRetailMatrixPivotVariants</c> table buffer.</param>
    /// <param name = "_productVariant">The <c>EcoResDistinctProductVariant</c> table buffer.</param>
    /// <param name = "_variantColor">The <c>EcoResProductVariantColor</c> table buffer.</param>
    /// <param name = "_variantConfig">The <c>EcoResProductVariantConfiguration</c> table buffer.</param>
    /// <param name = "_variantSize">The <c>EcoResProductVariantSize</c> table buffer.</param>
    /// <param name = "_variantStyle">The <c>EcoResProductVariantStyle</c> table buffer.</param>
    /// <returns>true if <c>TmpRetailMatrixPivotVariants</c> table buffer is initialized.</returns>
    [Wrappable(true)]
    protected final boolean setTmpRetailMatrixPivotVariants(
        TmpRetailMatrixPivotVariants _variants,
        EcoResDistinctProductVariant _productVariant,
        EcoResProductVariantColor _variantColor,
        EcoResProductVariantConfiguration _variantConfig,
        EcoResProductVariantSize _variantSize,
        EcoResProductVariantStyle _variantStyle
        )
    {
        str dimensionsCombination = "";

        if (_variantColor)
        {
            dimensionsCombination += strfmt("%1;", _variantColor.Color);
        }

        if (_variantConfig)
        {
            dimensionsCombination += strfmt("%1;", _variantConfig.Configuration);
        }

        if (_variantSize)
        {
            dimensionsCombination += strfmt("%1;", _variantSize.Size);
        }

        if (_variantStyle)
        {
            dimensionsCombination += strfmt("%1;", _variantStyle.Style);
        }

        _variants.Variant = _productVariant.RecId;
        _variants.DimensionsCombination = dimensionsCombination;
        _variants.IsAvailable = NoYes::Yes;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateColorDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates color dimension.
    /// </summary>
    /// <param name = "_ecoResProductRecId">Product master record Id.</param>
    /// <param name = "_global">A boolean value to show global product variants.</param>
    /// <returns>Retial matrix pivot dimension.</returns>
    private static RetailMatrixPivotDimension CreateColorDimension(EcoResProductRecId _ecoResProductRecId, boolean _global)
    {
        RetailMatrixPivotDimension colorDimension = null;

        EcoResProductMasterColor masterColor;
        if (masterColor.hasDimensionValueForProductMaster(_ecoResProductRecId))
        {
            EcoResColor color;
            EcoResProductVariantColor variantColor;
            EcoResDistinctProductVariant productVariant;
            InventDimCombination inventDimCombination;
            Map dimensionValues = new Map(Types::String, Types::Int64);
            List sortedValues = new List(Types::Class); // Create a new list of class type.

            while select RecId, Name from color
            join RetailDisplayOrder from masterColor order by masterColor.RetailDisplayOrder where masterColor.ColorProductMaster == _ecoResProductRecId && masterColor.Color == color.RecId
            join RecId, DistinctProductVariant from variantColor where variantColor.Color == color.RecId
            join RecId from productVariant where productVariant.ProductMaster == _ecoResProductRecId && variantColor.DistinctProductVariant == productVariant.RecId
            outer join RecId from inventDimCombination where inventDimCombination.DistinctProductVariant == productVariant.RecId
            {
                if (_global || inventDimCombination.RecId)
                {
                    RetailMatrixPivotDimensionFactory retailMatrixPivotDimensionFactory = new RetailMatrixPivotDimensionFactory();

                    if (!dimensionValues.exists(color.Name))
                    {
                        if (retailMatrixPivotDimensionFactory.canInsertDimensionValues(productVariant))
                        {
                            // Assign dimension values.
                            RetailMatrixPivotDimensionValue matrixPivotDimensionValue = RetailMatrixPivotDimensionValue::construct();
                            matrixPivotDimensionValue.parmName(color.Name);
                            matrixPivotDimensionValue.parmValue(color.RecId);

                            // Add dimension values to the list.
                            sortedValues.addEnd(matrixPivotDimensionValue);
                            dimensionValues.insert(color.Name, color.RecId);
                        }
                    }
                }
            }

            str colorDimensionName = "@SYS73726";
            colorDimension = new RetailMatrixPivotDimension(colorDimensionName, sortedValues);
        }

        return colorDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInsertDimensionValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check to insert the variant dimension values.
    /// </summary>
    /// <param name = "_productVariant">The <c>EcoResDistinctProductVariant</c> table buffer.</param>
    /// <returns>true if dimension values can be inserted.</returns>
    [Wrappable(true)]
    protected final boolean canInsertDimensionValues(EcoResDistinctProductVariant _productVariant)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateConfigurationDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates configuration dimension.
    /// </summary>
    /// <param name = "_ecoResProductRecId">Product master record Id.</param>
    /// <param name = "_global">A boolean value to show global product variants.</param>
    /// <returns>Retial matrix pivot dimension.</returns>
    private static RetailMatrixPivotDimension CreateConfigurationDimension(EcoResProductRecId _ecoResProductRecId, boolean _global)
    {
        RetailMatrixPivotDimension configurationDimension = null;

        EcoResProductMasterConfiguration masterConfig;
        if (masterConfig.hasDimensionValueForProductMaster(_ecoResProductRecId))
        {
            EcoResProductVariantConfiguration variantConfig;
            EcoResConfiguration config;
            EcoResDistinctProductVariant productVariant;
            InventDimCombination inventDimCombination;
            Map dimensionValues = new Map(Types::String, Types::Int64);
            List sortedValues = new List(Types::Class); // Create a new list for class type.

            while select RecId, Name from config
            join RetailDisplayOrder from masterConfig order by masterConfig.RetailDisplayOrder where masterConfig.ConfigProductMaster == _ecoResProductRecId && masterConfig.Configuration == config.RecId
            join RecId, DistinctProductVariant from variantConfig where variantConfig.Configuration == config.RecId
            join RecId from productVariant where productVariant.ProductMaster == _ecoResProductRecId && variantConfig.DistinctProductVariant == productVariant.RecId
            outer join RecId from inventDimCombination where inventDimCombination.DistinctProductVariant == productVariant.RecId
            {
                if (_global || inventDimCombination.RecId)
                {
                    if (!dimensionValues.exists(config.Name))
                    {
                        // Assign dimension values.
                        RetailMatrixPivotDimensionValue matrixPivotDimensionValue = RetailMatrixPivotDimensionValue::construct();
                        matrixPivotDimensionValue.parmName(config.Name);
                        matrixPivotDimensionValue.parmValue(config.RecId);

                        // Add dimension values to the list.
                        sortedValues.addEnd(matrixPivotDimensionValue);
                        dimensionValues.insert(config.Name, config.RecId);
                    }
                }
            }

            str configurationDimensionName = "@SYS14011";
            configurationDimension = new RetailMatrixPivotDimension(configurationDimensionName, sortedValues);
        }

        return configurationDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateSizeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates size dimension.
    /// </summary>
    /// <param name = "_ecoResProductRecId">Product master record Id.</param>
    /// <param name = "_global">A boolean value to show global product variants.</param>
    /// <returns>Retial matrix pivot dimension.</returns>
    private static RetailMatrixPivotDimension CreateSizeDimension(EcoResProductRecId _ecoResProductRecId, boolean _global)
    {
        RetailMatrixPivotDimension sizeDimension = null;

        EcoResProductMasterSize masterSize;
        if (masterSize.hasDimensionValueForProductMaster(_ecoResProductRecId))
        {
            EcoResProductVariantSize variantSize;
            EcoResSize size;
            EcoResDistinctProductVariant productVariant;
            InventDimCombination inventDimCombination;
            Map dimensionValues = new Map(Types::String, Types::Int64);
            List sortedValues = new List(Types::Class); // Create a new list for class type.

            while select RecId, Name from size
            join RetailDisplayOrder from masterSize order by masterSize.RetailDisplayOrder where masterSize.SizeProductMaster == _ecoResProductRecId && masterSize.Size == size.RecId
            join RecId, DistinctProductVariant from variantSize where variantSize.Size == size.RecId
            join RecId from productVariant where productVariant.ProductMaster == _ecoResProductRecId && variantSize.DistinctProductVariant == productVariant.RecId
            outer join RecId from inventDimCombination where inventDimCombination.DistinctProductVariant == productVariant.RecId
            {
                if (_global || inventDimCombination.RecId)
                {
                    if (!dimensionValues.exists(size.Name))
                    {
                        // Assign dimension values.
                        RetailMatrixPivotDimensionValue matrixPivotDimensionValue = RetailMatrixPivotDimensionValue::construct();
                        matrixPivotDimensionValue.parmName(size.Name);
                        matrixPivotDimensionValue.parmValue(size.RecId);

                        // Add dimension values to the list.
                        sortedValues.addEnd(matrixPivotDimensionValue);
                        dimensionValues.insert(size.Name, size.RecId);
                    }
                }
            }

            str sizeDimensionName = "@SYS73727";
            sizeDimension = new RetailMatrixPivotDimension(sizeDimensionName, sortedValues);
        }

        return sizeDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateStyleDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates style dimension.
    /// </summary>
    /// <param name = "_ecoResProductRecId">Product master record Id.</param>
    /// <param name = "_global">A boolean value to show global product variants.</param>
    /// <returns>Retial matrix pivot dimension.</returns>
    private static RetailMatrixPivotDimension CreateStyleDimension(EcoResProductRecId _ecoResProductRecId, boolean _global)
    {
        RetailMatrixPivotDimension styleDimension = null;

        EcoResProductMasterStyle masterStyle;
        if (masterStyle.hasDimensionValueForProductMaster(_ecoResProductRecId))
        {
            EcoResProductVariantStyle variantStyle;
            EcoResStyle style;
            EcoResDistinctProductVariant productVariant;
            InventDimCombination inventDimCombination;
            Map dimensionValues = new Map(Types::String, Types::Int64);
            List sortedValues = new List(Types::Class); // Create a new list for class type.

            while select RecId, Name from style
            join RetailDisplayOrder from masterStyle order by masterStyle.RetailDisplayOrder where masterstyle.StyleProductMaster == _ecoResProductRecId && masterStyle.Style == style.RecId
            join RecId, DistinctProductVariant from variantStyle where variantStyle.Style == style.RecId
            join RecId from productVariant where productVariant.ProductMaster == _ecoResProductRecId && variantStyle.DistinctProductVariant == productVariant.RecId
            outer join RecId from inventDimCombination where inventDimCombination.DistinctProductVariant == productVariant.RecId
            {
                if (_global || inventDimCombination.RecId)
                {
                    if (!dimensionValues.exists(style.Name))
                    {
                        // Assign dimension values.
                        RetailMatrixPivotDimensionValue matrixPivotDimensionValue = RetailMatrixPivotDimensionValue::construct();
                        matrixPivotDimensionValue.parmName(style.Name);
                        matrixPivotDimensionValue.parmValue(style.RecId);

                        // Add dimension values to the list.
                        sortedValues.addEnd(matrixPivotDimensionValue);
                        dimensionValues.insert(style.Name, style.RecId);
                    }
                }
            }

            str styleDimensionName = "@RET3326";
            styleDimension = new RetailMatrixPivotDimension(styleDimensionName, sortedValues);
        }

        return styleDimension;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>