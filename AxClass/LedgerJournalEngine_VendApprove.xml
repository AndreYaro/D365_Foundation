<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalEngine_VendApprove</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerJournalEngine_VendApprove</c> class supports vendor invoice approval journals.
/// </summary>
/// <remarks>
///    This class is an extension of <see cref="T:LedgerJournalEngine" />.
/// </remarks>
public class LedgerJournalEngine_VendApprove extends LedgerJournalEngine
{
    LedgerJournalTrans previousledgerJournalTrans;
    // <GTH>
    LedgerJournalTransExtensionTH prevoiusLedgerJournalTransExtTH;
    // </GTH>

    FormDataSource vendTrans_ds;

    AmountCur taxAmountToPost;
    AmountCur taxAmountReverse;
    AmountMST taxAmountToPostMST;
    AmountMST taxAmountReverseMST;
    AmountMST taxAmountOrig;
    TmpAccountSum tmpAccountSum;
    RecordSortedList taxAmountsApproval;

    TmpFormLookUp tmpFetchVouchersSelection;
    RecId calendarRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountTypeModified</Name>
				<Source><![CDATA[
    public void accountTypeModified(LedgerJournalTrans _ledgerJournalTrans,
        LedgerJournalTrans_Project _ledgerJournalTrans_Project = null,
        LedgerJournalTrans_Asset _ledgerJournalTrans_Asset = null,
        LedgerJournalTrans_RCash _ledgerJournalTrans_RCash = null)
    {
        super(_ledgerJournalTrans, _ledgerJournalTrans_Project, _ledgerJournalTrans_Asset);

        if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger ||
            _ledgerJournalTrans.AccountType == LedgerJournalACType::Project)
        {
            // Call to super clears cash discount information, reset cash discount code to that
            // of retrieved invoice so it is recalculated
            _ledgerJournalTrans.CashDiscCode = previousledgerJournalTrans.CashDiscCode;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountDifference</Name>
				<Source><![CDATA[
    AmountMST amountDifference(LedgerJournalTrans _ledgerJournalTrans, LedgerJournalTrans_Asset _ledgerJournalTrans_Asset = null)
    {
        AmountMST amountMST = this.taxAmountToPost(_ledgerJournalTrans);
        AmountMST taxAmountReverseMSTLocal;

        if (amountMST)
            if (!this.ledgerJournalTable().LedgerJournalInclTax)
        {
            taxAmountReverseMSTLocal = this.taxAmountReverse(_ledgerJournalTrans, _ledgerJournalTrans_Asset);
            return -(amountMST - taxAmountReverseMSTLocal);
        }
        else
                return this.taxAmountReverse(_ledgerJournalTrans);

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountDifferenceMST</Name>
				<Source><![CDATA[
    AmountMST amountDifferenceMST(LedgerJournalTrans _ledgerJournalTrans)
    {
        AmountMST taxAmountToPostMSTLocal = this.taxAmountToPost(_ledgerJournalTrans);
        AmountMST taxAmountReverseMSTLocal;

        taxAmountToPostMSTLocal = taxAmountToPostMST;
        if (taxAmountToPostMSTLocal)
            if (!this.ledgerJournalTable().LedgerJournalInclTax)
        {
            taxAmountReverseMSTLocal = taxAmountReverseMST;
            return -(taxAmountToPostMSTLocal - taxAmountReverseMSTLocal);
        }
        else
                return taxAmountReverseMST;

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>approvedByModified</Name>
				<Source><![CDATA[
    public void approvedByModified(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTrans ledgerJournalTrans;

        ttsbegin;

        ledgerJournalTrans.skipDataMethods(true);
        update_recordset ledgerJournalTrans
            setting Approver = _ledgerJournalTrans.Approver
            where ledgerJournalTrans.JournalNum == _ledgerJournalTrans.JournalNum &&
                  ledgerJournalTrans.Voucher == _ledgerJournalTrans.Voucher &&
                  ledgerJournalTrans.RecId != _ledgerJournalTrans.RecId;

        ttscommit;

        if (ledgerJournalTrans_ds)
        {
            ledgerJournalTrans_ds.research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTaxForCompleteJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates tax totals for the whole journal.
    /// </summary>
    /// <remarks>
    ///    The tax total is stored in an instance of the temporary <c>TmpTaxTotals</c> table. The instance is
    ///    in scope for the lifetime of the <c>ledgerJournalEngine</c> object.
    /// </remarks>
    public void calculateTaxForCompleteJournal()
    {
        TaxTrans taxTrans;
        Voucher originalVoucher;
        TransDate originalTransDate;
        LedgerJournalVoucherChanged ledgerJournalVoucherChangedLocal;
        LedgerJournalTrans ledgerJournalTransLocal;
        LedgerJournalTrans ledgerJournalTransLocalWrk;

        super();

        while select ledgerJournalTransLocal
            group by Voucher, TransDate
            where ledgerJournalTransLocal.JournalNum == ledgerJournalTable.JournalNum

            notexists join ledgerJournalTransLocalWrk
                where ((ledgerJournalTransLocalWrk.TaxGroup && ledgerJournalTransLocalWrk.TaxItemGroup) || ledgerJournalTransLocalWrk.TaxCode) &&
                        ledgerJournalTransLocalWrk.PurchLedgerPosting == ArrivalPostingType::None &&
                        ledgerJournalTransLocalWrk.TransDate == ledgerJournalTransLocal.TransDate &&
                        ledgerJournalTransLocalWrk.Voucher == ledgerJournalTransLocal.Voucher &&
                        ledgerJournalTransLocalWrk.JournalNum == ledgerJournalTable.JournalNum

        {
            select firstonly ledgerJournalVoucherChangedLocal
                where ledgerJournalVoucherChangedLocal.JournalNum == ledgerJournalTable.JournalNum &&
                      ledgerJournalVoucherChangedLocal.ToVoucher == ledgerJournalTransLocal.Voucher &&
                      ledgerJournalVoucherChangedLocal.ToDate == ledgerJournalTransLocal.TransDate;

            if (ledgerJournalVoucherChangedLocal.RecId)
            {
                originalTransDate = ledgerJournalVoucherChangedLocal.FromDate;
                originalVoucher = ledgerJournalVoucherChangedLocal.FromVoucher;
            }
            else
            {
                originalTransDate = ledgerJournalTransLocal.TransDate;
                originalVoucher = ledgerJournalTransLocal.Voucher;
            }

            ttsbegin;

            while select
                      sum (TaxAmountCur),
                      TaxCode,
                      TaxDirection,
                      CurrencyCode
                  from taxTrans
                  group by TaxCode, TaxDirection, CurrencyCode, SourceCurrencyCode,
                           TaxAutogenerated, euroTriangulation, Source, TaxGroup,
                           TaxItemGroup, ExemptTax
                  where taxTrans.Voucher == originalVoucher &&
                        taxTrans.TransDate == originalTransDate &&
                        (taxTrans.ExemptTax == NoYes::No ||
                          (taxTrans.ExemptTax == NoYes::Yes &&
                           (taxTrans.TaxDirection == TaxDirection::TaxExemptPurchase ||
                            taxTrans.TaxDirection == TaxDirection::TaxExemptSales)))
            {
                select forupdate firstonly tmpTaxTotals
                    where tmpTaxTotals.JournalNum == ledgerJournalTable.JournalNum &&
                          tmpTaxTotals.TaxCode == taxTrans.TaxCode &&
                          tmpTaxTotals.TaxDirection == taxTrans.TaxDirection &&
                          tmpTaxTotals.CurrencyCode == taxTrans.CurrencyCode;

                if (tmpTaxTotals.RecId)
                {
                    tmpTaxTotals.TaxAmountCur += taxTrans.TaxAmountCur;
                    tmpTaxTotals.TaxAmountCurCorrect += taxTrans.TaxAmountCur;
                    tmpTaxTotals.update();
                }
                else
                {
                    tmpTaxTotals.clear();
                    tmpTaxTotals.JournalNum = ledgerJournalTable.JournalNum;
                    tmpTaxTotals.Name = ledgerJournalTable.Name;
                    tmpTaxTotals.TaxCode = taxTrans.TaxCode;
                    tmpTaxTotals.TaxDirection = taxTrans.TaxDirection;
                    tmpTaxTotals.CurrencyCode = taxTrans.CurrencyCode;
                    tmpTaxTotals.TaxAmountCur = taxTrans.TaxAmountCur;
                    tmpTaxTotals.TaxAmountCurCorrect = taxTrans.TaxAmountCur;
                    tmpTaxTotals.insert();
                }
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasSettledVoucher</Name>
				<Source><![CDATA[
    /// /// <summary>
    /// Determines whether a voucher has been settled for a <c>LedgerJournalTrans</c> table record.
    /// </summary>
    /// <returns>
    /// true if a voucher is settled for the <c>LedgerJournalTrans</c> table record; otherwise, false.
    /// </returns>
    internal boolean hasSettledVoucher(LedgerJournalTrans _ledgerJournalTrans)
    {
        VendTransOpen vendTransOpen;

        select firstonly vendTransOpen
            where vendTransOpen.RefRecId == _ledgerJournalTrans.VendTransId;

        return vendTransOpen.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Cancel the voucher for journal lines.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">
    ///     A <c>LedgerJournalTrans</c> table buffer.
    /// </param>
    public void cancelVoucher(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTrans saveLedgerJournalTrans;
        LedgerJournalTrans ledgerJournalTrans;
        VendTrans vendTrans;
        Voucher originalVoucher;
        LedgerJournalId ledgerJournalIdPool = LedgerJournalTable::findVendorInvoicePool().JournalNum;
        
        ttsbegin;

        originalVoucher = LedgerJournalVoucherChanged::find(ledgerJournalTable.JournalNum, _ledgerJournalTrans.Voucher).FromVoucher;

        if (!originalVoucher)
        {
            originalVoucher = _ledgerJournalTrans.Voucher;
        }

        // Load the transaction from the pool
        select firstonly *
            from ledgerJournalTrans
            where ledgerJournalTrans.JournalNum == ledgerJournalIdPool
               && ledgerJournalTrans.Voucher == originalVoucher
               && ledgerJournalTrans.TransferredTo == ledgerJournalIdPool
               && ledgerJournalTrans.AccountType == LedgerJournalACType::Vend;

        saveLedgerJournalTrans = ledgerJournalTrans.data();
        // <GTH>
        saveLedgerJournalTrans.SysExtensionSerializerMap::copyExtensionTableData(ledgerJournalTrans);
        // </GTH>

        saveLedgerJournalTrans.Voucher = _ledgerJournalTrans.Voucher;

        saveLedgerJournalTrans.TransDate = this.getTransactionDateForCancelVoucher(_ledgerJournalTrans);
        saveLedgerJournalTrans.Cancel = NoYes::Yes;
        saveLedgerJournalTrans.SettleVoucher = this.getSettlementType();
        saveLedgerJournalTrans.Approved = NoYes::Yes;
        saveLedgerJournalTrans.Approver = HcmWorker::userId2Worker(curUserId());
        saveLedgerJournalTrans.NoEdit = NoYes::Yes;
        saveLedgerJournalTrans.TaxGroup = '';
        saveLedgerJournalTrans.TaxItemGroup = '';

        if (originalVoucher != _ledgerJournalTrans.Voucher)
        {
            saveLedgerJournalTrans.VendTransId = LedgerJournalTrans::findVendTransId(ledgerJournalTable.JournalNum, _ledgerJournalTrans.Voucher);
        }

        if (saveLedgerJournalTrans.TransDate != ledgerJournalTrans.TransDate)
        {
            LedgerJournalVoucherChanged::modifyChangedVoucherDate(ledgerJournalTable.JournalNum,
                                                                  ledgerJournalTrans.Voucher,
                                                                  ledgerJournalTrans.TransDate,
                                                                  saveLedgerJournalTrans.Voucher,
                                                                  saveLedgerJournalTrans.TransDate);
        }
        else
        {
            if (saveLedgerJournalTrans.TransDate != _ledgerJournalTrans.TransDate)
            {
                LedgerJournalVoucherChanged::modifyChangedVoucherDate(_ledgerJournalTrans.JournalNum,
                                                                      _ledgerJournalTrans.Voucher,
                                                                      _ledgerJournalTrans.TransDate,
                                                                      saveLedgerJournalTrans.Voucher,
                                                                      saveLedgerJournalTrans.TransDate);
            }
        }

        while select forupdate ledgerJournalTrans
            where ledgerJournalTrans.Voucher == _ledgerJournalTrans.Voucher
               && ledgerJournalTrans.JournalNum == _ledgerJournalTrans.JournalNum
        {
            if (!saveLedgerJournalTrans.parmOffsetLedgerDimension() && ledgerJournalTrans.PurchLedgerPosting == ArrivalPostingType::Offset)
            {
                ledgerJournalTrans.JournalNum = _ledgerJournalTrans.JournalNum;
                ledgerJournalTrans.Voucher = saveLedgerJournalTrans.Voucher;
                ledgerJournalTrans.VendTransId = saveLedgerJournalTrans.VendTransId;
                ledgerJournalTrans.TransDate = saveLedgerJournalTrans.TransDate;
                ledgerJournalTrans.Cancel = NoYes::Yes;
                ledgerJournalTrans.Approved = NoYes::Yes;
                ledgerJournalTrans.Approver = HcmWorker::userId2Worker(curUserId());
                ledgerJournalTrans.update();
            }
            else
            {
                ledgerJournalTrans.doDelete();
            }
        }

        this.clearBalancesForVoucher(originalVoucher);
        ledgerJournalTrans.createTransferTrans(saveLedgerJournalTrans, _ledgerJournalTrans.JournalNum);

        // The select of ledgerJournalTrans must be performed in this method, because the ledgerJournalTrans is
        //   used for creating the specification
        //   Otherwise the function this.vendTrans(_ledgerJournalTrans) could be used.
        select firstonly * from ledgerJournalTrans
            where ledgerJournalTrans.Voucher == _ledgerJournalTrans.Voucher
               && ledgerJournalTrans.JournalNum == _ledgerJournalTrans.JournalNum
               && ledgerJournalTrans.PurchLedgerPosting != ArrivalPostingType::Offset
               && ledgerJournalTrans.VendTransId
            join AmountCur, RecId from vendTrans
                where vendTrans.RecId == ledgerJournalTrans.VendTransId;

        this.processVendTransForCancellation(ledgerJournalTrans, vendTrans);
        
        LedgerJournalTransTaxExtension::copyLedgerJournalTransTaxExtensionForInvoiceApproval(saveLedgerJournalTrans, ledgerJournalTrans);

        this.voucherTotals(_ledgerJournalTrans);
        journalTotalDebit += voucherTotalDebit;
        journalTotalCredit += voucherTotalCredit;
        journalTotalBalance = journalTotalDebit - journalTotalCredit;
        this.ledgerJournalTableUpdateTotals(ledgerJournalTable, false);
        this.clearTaxAmountCache(_ledgerJournalTrans);

        ttscommit;

        if (_ledgerJournalTrans && LedgerJournalTableType::isBudgetCheckRequiredAtLineItemEntry(
                                                            ledgerJournalTable.JournalType,
                                                            _ledgerJournalTrans.company()))
        {
            // Removes the original budget check result from the cache for the voucher to allow the cache update after budget check occurs.
            this.removeBudgetCheckResultFromCache(_ledgerJournalTrans.Voucher);

            // Have to re-check budget because a selected registered invoice voucher is canceled.
            _ledgerJournalTrans.checkBudget();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSettlementType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the settlement type.
    /// </summary>
    /// <returns>
    ///     The settlement type.
    /// </returns>
    protected SettlementType getSettlementType()
    {
        return SettlementType::SelectedTransact;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionDateForCancelVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the appropriate transaction date for the cancelled voucher.
    /// </summary>
    /// <param name="_saveLedgerJournalTrans">The <c>LedgerJournalTrans</c> buffer to determine the transaction date from.</param>
    /// <returns>The appropriate transaction date for the cancelled voucher.</returns>
    protected TransDate getTransactionDateForCancelVoucher(LedgerJournalTrans _saveLedgerJournalTrans)
    {
        SysModule sysModule = ledgerJournalTable.ledgerJournalName().getSysModuleForJournal();
        if (!LedgerFiscalCalendar::checkLedgerPeriodDateModule(calendarRecId, _saveLedgerJournalTrans.TransDate, sysModule, false))
        {
            return LedgerFiscalCalendar::findFirstOpenStartDateModule(calendarRecId, _saveLedgerJournalTrans.TransDate, sysModule);
        }

        return LedgerFiscalCalendar::findFirstOpenStartDateInAnyYear(calendarRecId, _saveLedgerJournalTrans.TransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processVendTransForCancellation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the <c>VendTransOpen</c> record associated with the given <c>VendTrans</c> record for cancellation.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The current <c>LedgerJournalTrans</c> record.</param>
    /// <param name = "_vendTrans">The current <c>VendTrans</c> record.</param>
    protected void processVendTransForCancellation(LedgerJournalTrans _ledgerJournalTrans, VendTrans _vendTrans)
    {
        VendTransOpen vendTransOpen;

        select forupdate vendTransOpen
            where vendTransOpen.RefRecId == _vendTrans.RecId;

        SpecTransManager specTransManager = SpecTransManager::constructServer(_ledgerJournalTrans, false);
        specTransManager.insert(vendTransOpen.DataAreaId, vendTransOpen.TableId, vendTransOpen.RecId, _vendTrans.AmountCur, _ledgerJournalTrans.CurrencyCode);

        vendTransOpen.UseCashDisc = UseCashDisc::Never;
        vendTransOpen.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscCodeModified</Name>
				<Source><![CDATA[
    void cashDiscCodeModified(LedgerJournalTrans _ledgerJournalTrans,
                              LedgerJournalTrans_Asset _ledgerJournalTrans_Asset = null,
                              boolean _updateCashDisc = false)
    {
        if (TaxParameters::find().TaxLessCashDisc && !this.doesManualCashDiscountExist(_ledgerJournalTrans))
        {
            super(_ledgerJournalTrans, _ledgerJournalTrans_Asset, _updateCashDisc);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesManualCashDiscountExist</Name>
				<Source><![CDATA[
    private boolean doesManualCashDiscountExist(LedgerJournalTrans _ledgerJournalTrans)
    {
        VendTransOpen       vendTransOpen;
        VendTransCashDisc   vendTransCashDisc;

        select firstonly vendTransCashDisc
                    where vendTransCashDisc.Manual
                exists join vendTransOpen
                    where vendTransCashDisc.RefTableId == vendTransOpen.TableId &&
                          vendTransCashDisc.RefRecId   == vendTransOpen.RecId   &&
                          vendTransOpen.RefRecId == _ledgerJournalTrans.VendTransId;

        return vendTransCashDisc.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscPercent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the cash discount percentage of the current cash discount code, if cash discount is
    ///    applicable.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    A <c>LedgerJournalTrans</c> record buffer.
    /// </param>
    /// <returns>
    ///    The cash discount percentage.
    /// </returns>
    public Percent cashDiscPercent(LedgerJournalTrans _ledgerJournalTrans)
    {
        return CashDisc::find(_ledgerJournalTrans.CashDiscCode).Percent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearBalancesForVoucher</Name>
				<Source><![CDATA[
    public void clearBalancesForVoucher(Voucher _voucher)
    {
        TmpVoucherSum tmpVoucherSum;

        voucherTotalDebit = 0;
        voucherTotalCredit = 0;
        voucherTotalBalance = 0;
        voucherTotalBalanceCur = 0;
        taxAmountOrig = 0;
        tmpVoucherSum.Voucher = _voucher;
        voucherBalance.find(tmpVoucherSum);
        journalTotalDebit -= tmpVoucherSum.Debit;
        journalTotalCredit -= tmpVoucherSum.Credit;
        journalTotalBalance = journalTotalDebit - journalTotalCredit;
        ledgerJournalTable.JournalTotalDebit = journalTotalDebit;
        ledgerJournalTable.JournalTotalCredit = journalTotalCredit;
        voucherBalance.del(tmpVoucherSum);
        this.clearTaxAmountCacheVoucher(_voucher);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTaxAmountCacheVoucher</Name>
				<Source><![CDATA[
    void clearTaxAmountCacheVoucher(Voucher _voucher, boolean _clearTaxUncommitted = true)
    {
        TmpAccountSum tmpAccountSumLocal;

        super(_voucher, _clearTaxUncommitted);

        tmpAccountSumLocal.Voucher = _voucher;
        if (taxAmountsApproval.find(tmpAccountSumLocal))
        {
            taxAmountsApproval.del(tmpAccountSumLocal);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    void delete(LedgerJournalTrans _ledgerJournalTrans,
                boolean _refresh = true,
                boolean _removeBudgetForAllVoucherLines = false,
                LedgerJournalTrans_RCash _ledgerJournalTrans_RCash = null)

    {
        this.updateTaxAmountToPost(_ledgerJournalTrans, null, true);

        // <GEERU>
        super(_ledgerJournalTrans, _refresh, _removeBudgetForAllVoucherLines, _ledgerJournalTrans_RCash);
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVendorBlocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether or not the vendor is blocked.
    /// </summary>
    /// <param name = "_vendAccount">The current vendor account.</param>
    /// <returns>true if the vendor is blocked; otherwise, false.</returns>
    protected boolean isVendorBlocked(LedgerJournalAC _vendAccount)
    {
        boolean isblocked;
        VendTable vendTableLoc = VendTable::find(_vendAccount);
        VendBlockedReleaseDate vendReleaseDate = vendTableLoc.BlockedReleaseDate;
        boolean isVendReleaseDateExpired = VendTable::isVendReleaseDateExpired(_vendAccount);

        if (VendTable::blocked(_vendAccount) == CustVendorBlocked::All)
        {
            if (!vendReleaseDate)
            {
                checkFailed(strFmt("@SYS128411", _vendAccount, vendTableLoc.Blocked));
                isblocked = true;
            }
            else if (!isVendReleaseDateExpired)
            {
                checkFailed(strFmt("@SYS128412", _vendAccount, vendTableLoc.Blocked, DateTimeUtil::date(vendReleaseDate)));
                isblocked = true;
            }
        }

        return isblocked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchVouchers</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Transfers vouchers from the invoice pool into an approval journal.
    /// </summary>
    /// <returns>
    ///    true if vouchers were transferred; otherwise, false.
    /// </returns>
    public boolean fetchVouchers()
    {
        #OCCRetryCount
        #AviFiles

        boolean ret;
        SysOperationProgress progress;
        LedgerJournalTrans ledgerJournalTransPool;
        Counter totalSkipped;
        Counter totalAdded;

        if (!ledgerJournalTable.Posted && !ledgerJournalTable.UserBlockId && this.fetchVouchersLookup())
        {
            setprefix("@SYS74266");

            progress = new SysOperationProgress();
            progress.setCaption("@SYS58698");

            while select LineNo from tmpFetchVouchersSelection
            {
                ledgerJournalTransPool = LedgerJournalTrans::findRecId(tmpFetchVouchersSelection.LineNo, false);

                progress.setText(strfmt('%1, %2', #fieldlabelvalue(ledgerJournalTransPool, Voucher), ledgerJournalTransPool.Txt));

                setprefix(#fieldLabelValue(ledgerJournalTransPool, Voucher));

                if (this.isVendorBlocked(ledgerJournalTransPool.parmAccount()))
                {
                    return checkFailed(strfmt("@SYS1138", ledgerJournalTransPool.parmAccount()));
                }

                try
                {
                    LedgerJournalEngine_Server::addVoucher(ledgerJournalTable, ledgerJournalTransPool);
                    totalAdded++;
                }
                catch (Exception::Deadlock)
                {
                    retry;
                }
                catch (Exception::UpdateConflict)
                {
                    if (appl.ttsLevel() == 0)
                    {
                        if (xSession::currentRetryCount() >= #RetryNum)
                        {
                            throw Exception::UpdateConflictNotRecovered;
                        }
                        else
                        {
                            retry;
                        }
                    }
                    else
                    {
                        throw Exception::UpdateConflict;
                    }
                }
                catch (Exception::Error)
                {
                    error("@SYS67865");
                    totalSkipped++;
                }
            }

            if (totalAdded)
            {
                ret = true;

                if (totalSkipped)
                {
                    info(strfmt("@SYS74268", totalAdded));
                    warning(strfmt("@SYS74267", totalSkipped));
                }
            }
            else
            {
                warning("@SYS74269");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchVouchersLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs the form for selecting vouchers to transfer into the approval journal.
    /// </summary>
    /// <returns>
    ///    true if vouchers were selected; otherwise, false.
    /// </returns>
    protected boolean fetchVouchersLookup()
    {
        boolean ret;
        FormRun lookupFormRun = classfactory.formRunClass(new Args(formstr(LedgerJournalTransApproveFetchVouchers)));

        lookupFormRun.run();
        lookupFormRun.wait();

        if (lookupFormRun.closedOk())
        {
            tmpFetchVouchersSelection = lookupFormRun.getTmpFormLookup();
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstFetchedVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Identifies the first voucher transferred to the journal by the "Fetch voucher" feature.
    /// </summary>
    /// <returns>
    ///    The <c>LedgerJournalTrans</c> record buffer for the first voucher.
    /// </returns>
    public LedgerJournalTrans firstFetchedVoucher()
    {
        select firstonly LineNo from tmpFetchVouchersSelection;

        return LedgerJournalTrans::findRecId(tmpFetchVouchersSelection.LineNo, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allFetchedVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Identifies the all vouchers transferred to the journal by the "Fetch voucher" feature.
    /// </summary>
    /// <returns>
    ///    A list of the <c>LedgerJournalTrans</c> record buffer for all selected vouchers.
    /// </returns>
    internal List allFetchedVoucher()
    {
        List allFetchedVouchers = new List(Types::record);
        LedgerJournalTrans ledgerJournalTrans;
        
        while select LineNo
            from tmpFetchVouchersSelection
            exists join ledgerJournalTrans
            where ledgerJournalTrans.RecId == tmpFetchVouchersSelection.LineNo
        {
            allFetchedVouchers.addEnd(LedgerJournalTrans::findRecId(tmpFetchVouchersSelection.LineNo, false));
        }

        return allFetchedVouchers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initExtensionValueTH</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method initializes values of extension table of ledger journal transaction.creates new <c>AssetTrans</c> for adjusting from an original <c>AssetTrans</c>.
    /// </summary>
    /// <param name="_ledgerJournalTransExtensionTH">
    ///     The <c>LedgerJournalTransExtensionTH</c> record to be initialized.
    /// </param>
    void initExtensionValueTH(LedgerJournalTransExtensionTH _ledgerJournalTransExtensionTH)
    {
        if (TaxThaiGovCertificationFeatureChecker::isUnrealizedVATEnabled())
        {
            _ledgerJournalTransExtensionTH.InvoiceDate = prevoiusLedgerJournalTransExtTH.InvoiceDate;
            _ledgerJournalTransExtensionTH.InvoiceReceiptDate = prevoiusLedgerJournalTransExtTH.InvoiceReceiptDate;
            _ledgerJournalTransExtensionTH.TaxInvoiceReceiptDate = prevoiusLedgerJournalTransExtTH.TaxInvoiceReceiptDate;
            _ledgerJournalTransExtensionTH.RealVendName = prevoiusLedgerJournalTransExtTH.RealVendName;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromMainAccount</Name>
				<Source><![CDATA[
    protected void initFromMainAccount(LedgerJournalTrans _ledgerJournalTrans)
    {
        MainAccount mainAccountLedger;

        mainAccountLedger = MainAccount::findByMainAccountId(
            LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(_ledgerJournalTrans.parmLedgerDimension()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxGroup</Name>
				<Source><![CDATA[
    void initTaxGroup(LedgerJournalTrans _ledgerJournalTrans)
    {
        VendTrans vendTrans;

        if (_ledgerJournalTrans.NoEdit != NoYes::Yes)
        {
            if (VendParameters::find().VendTaxRegisterApproval == VendTaxRegisterApproval::Register)
            {
                super(_ledgerJournalTrans);
            }
            else
            {
                if (vendTrans_ds)
                {
                    vendTrans = vendTrans_ds.cursor();
                    _ledgerJournalTrans.TaxGroup = VendTable::find(vendTrans.AccountNum).TaxGroup;

                    /*Possible that there is more than one line in the voucher*/
                    if (LedgerJournalEngine_Server::updateTaxGroup(_ledgerJournalTrans))
                    {
                        _ledgerJournalTrans.write();

                        if (ledgerJournalTrans_ds)
                        {
                            ledgerJournalTrans_ds.research(true);
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxItemGroup</Name>
				<Source><![CDATA[
    public void initTaxItemGroup(
        LedgerJournalTrans _ledgerJournalTrans,
        LedgerJournalTrans_Project _ledgerJournalTrans_Project = null)
    {
        if (_ledgerJournalTrans.NoEdit != NoYes::Yes)
        {
            super(_ledgerJournalTrans, _ledgerJournalTrans_Project);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    void initValue(LedgerJournalTrans _ledgerJournalTrans, LedgerJournalTrans_Asset _ledgerJournalTrans_Asset = null)
    {
        AmountMST taxAmountMST;
        VendTrans vendTrans;
        // <GCN>
        LedgerJournalTrans ledgerJournalTransLocal;
        // </GCN>
        #ISOCountryRegionCodes
        // <GEEU>
        #EECountryRegionCodes
        // </GEEU>

        if (!ledgerJournalTable)
            throw error("@SYS26538");

        if ( ! ledgerJournalTable.Posted && !ledgerJournalTable.Approver)
        {
            _ledgerJournalTrans.Txt = oldTransTxt;
            _ledgerJournalTrans.TransDate = oldTransDate;
            _ledgerJournalTrans.CurrencyCode = oldCurrencyCode;
            _ledgerJournalTrans.Voucher = curVoucher;
            // <GCN>
            if (LedgerParameters::isChineseVoucher_CN())
            {
                ledgerJournalTransLocal = LedgerJournalTrans::find(_ledgerJournalTrans.JournalNum, _ledgerJournalTrans.Voucher, false);
                if (ledgerJournalTransLocal.RecId)
                {
                    _ledgerJournalTrans.Voucher_CN = ledgerJournalTransLocal.Voucher_CN;
                    _ledgerJournalTrans.LedgerVoucherType_CN = ledgerJournalTransLocal.LedgerVoucherType_CN;
                }
            }
            // </GCN>
            _ledgerJournalTrans.AccountType = previousledgerJournalTrans.AccountType;
            _ledgerJournalTrans.Approved = previousledgerJournalTrans.Approved;
            _ledgerJournalTrans.Approver = previousledgerJournalTrans.Approver;
            _ledgerJournalTrans.Company = previousledgerJournalTrans.Company;
            _ledgerJournalTrans.CurrencyCode = previousledgerJournalTrans.CurrencyCode;
            _ledgerJournalTrans.CashDiscCode = previousledgerJournalTrans.CashDiscCode;
            _ledgerJournalTrans.CashDiscAmount = -previousledgerJournalTrans.CashDiscAmount;
            _ledgerJournalTrans.DateCashDisc = previousledgerJournalTrans.DateCashDisc;
            _ledgerJournalTrans.DocumentDate = previousledgerJournalTrans.DocumentDate;
            _ledgerJournalTrans.Due = previousledgerJournalTrans.Due;
            _ledgerJournalTrans.ForeignCompany = previousledgerJournalTrans.ForeignCompany;
            _ledgerJournalTrans.Invoice = previousledgerJournalTrans.Invoice;

            _ledgerJournalTrans.vatNumJournal = previousledgerJournalTrans.vatNumJournal;
            LedgerJournalTransTaxExtension previousTaxExtension = previousledgerJournalTrans.ledgerJournalTransTaxExtension();
            LedgerJournalTransTaxExtension taxExtension = _ledgerJournalTrans.ledgerJournalTransTaxExtension();
            taxExtension.VATNumRecId = previousTaxExtension.VATNumRecId;
            taxExtension.VATNumTableType = previousTaxExtension.VATNumTableType;
            _ledgerJournalTrans.packExtensionTable(taxExtension);

            _ledgerJournalTrans.JournalNum = previousledgerJournalTrans.JournalNum;
            _ledgerJournalTrans.Payment = previousledgerJournalTrans.Payment;
            _ledgerJournalTrans.PaymentAccount = previousledgerJournalTrans.PaymentAccount;
            _ledgerJournalTrans.PaymentNotes = previousledgerJournalTrans.PaymentNotes;
            _ledgerJournalTrans.PaymentStatus = previousledgerJournalTrans.PaymentStatus;
            _ledgerJournalTrans.PaymId = previousledgerJournalTrans.PaymId;
            _ledgerJournalTrans.PostingProfile = previousledgerJournalTrans.PostingProfile;
            _ledgerJournalTrans.SettleVoucher = previousledgerJournalTrans.SettleVoucher;
            _ledgerJournalTrans.PurchLedgerPosting = ArrivalPostingType::None;
            _ledgerJournalTrans.Invisible = NoYes::No;
            _ledgerJournalTrans.NoEdit = NoYes::No;
            _ledgerJournalTrans.TransactionType = previousledgerJournalTrans.TransactionType;
            _ledgerJournalTrans.PurchIdRange = previousledgerJournalTrans.PurchIdRange;
            _ledgerJournalTrans.BankTransType = previousledgerJournalTrans.BankTransType;
            _ledgerJournalTrans.RemittanceAddress = previousledgerJournalTrans.RemittanceAddress;
            _ledgerJournalTrans.RemittanceLocation = previousledgerJournalTrans.RemittanceLocation;
            _ledgerJournalTrans.InvoiceReleaseDate = previousledgerJournalTrans.InvoiceReleaseDate;
            _ledgerJournalTrans.ReleaseDateComment = previousledgerJournalTrans.ReleaseDateComment;

            _ledgerJournalTrans.ExchRate = previousledgerJournalTrans.ExchRate;
            _ledgerJournalTrans.ExchRateSecond = previousledgerJournalTrans.ExchRateSecond;
            _ledgerJournalTrans.Triangulation = previousledgerJournalTrans.Triangulation;

            _ledgerJournalTrans.ReportingCurrencyExchRate = previousledgerJournalTrans.ReportingCurrencyExchRate;
            _ledgerJournalTrans.ReportingCurrencyExchRateSecondary = previousledgerJournalTrans.ReportingCurrencyExchRateSecondary;

            _ledgerJournalTrans.FinTag = previousledgerJournalTrans.FinTag;

            if (vendTrans_ds)
            {
                vendTrans = vendTrans_ds.cursor();

                _ledgerJournalTrans.DocumentNum = vendTrans.DocumentNum;
                _ledgerJournalTrans.PaymReference = vendTrans.PaymReference;
                _ledgerJournalTrans.PaymMode = vendTrans.PaymMode;
                _ledgerJournalTrans.PaymSpec = vendTrans.PaymSpec;
            }

            // <GEERU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                _ledgerJournalTrans.AccountAgreementId_RU = previousledgerJournalTrans.AccountAgreementId_RU;
                if (_ledgerJournalTrans.AccountAgreementId_RU)
                {
                    _ledgerJournalTrans.initAgreementDimension_RU(AgreementHeaderExt_RU::findByAgreementId(_ledgerJournalTrans.AccountAgreementId_RU));
                }
            }
            // </GEERU>

            // <GEEU>
            if (TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
            {
                _ledgerJournalTrans.VatDueDate_W = previousledgerJournalTrans.VatDueDate_W;
            }

            if (SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAll))
            {
                _ledgerJournalTrans.ReceiptDate_W = previousledgerJournalTrans.ReceiptDate_W;
                _ledgerJournalTrans.TaxPeriodPaymentCode_PL = previousledgerJournalTrans.TaxPeriodPaymentCode_PL;
                _ledgerJournalTrans.Addressing_PL = previousledgerJournalTrans.Addressing_PL;
                _ledgerJournalTrans.CustVendName_PL = previousledgerJournalTrans.CustVendName_PL;
            }
            // </GEEU>

            VendTransCashDisc::copyCashDisc(previousledgerJournalTrans.TableId,
                                            previousledgerJournalTrans.RecId,
                                            _ledgerJournalTrans.TableId,
                                            _ledgerJournalTrans.RecId);

            taxAmountMST = this.amountDifference(previousledgerJournalTrans);
            if ((voucherTotalBalanceCur - taxAmountMST) > 0)
                _ledgerJournalTrans.AmountCurCredit = abs(voucherTotalBalanceCur - taxAmountMST);

            if ((voucherTotalBalanceCur - taxAmountMST) < 0)
                _ledgerJournalTrans.AmountCurDebit = abs(voucherTotalBalanceCur - taxAmountMST);

            // <GIN>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
                && TaxParameters::checkTaxParameters_IN())
            {
                _ledgerJournalTrans.ledgerJournalTransTaxExtensionIN().AssessableValueTransactionCurrency = _ledgerJournalTrans.AmountCurDebit ? _ledgerJournalTrans.AmountCurDebit :
                                                                                                _ledgerJournalTrans.AmountCurCredit;
            }
            // </GIN>

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
            {
                _ledgerJournalTrans.OperationType_MX = previousledgerJournalTrans.OperationType_MX;
                _ledgerJournalTrans.CFDIUUID_MX = previousledgerJournalTrans.CFDIUUID_MX;
                _ledgerJournalTrans.InvoiceSeries_MX = previousledgerJournalTrans.InvoiceSeries_MX;
            }

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCA]))
            {
                _ledgerJournalTrans.gsthstTaxType_CA = previousledgerJournalTrans.gsthstTaxType_CA;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVoucherChangeRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a new voucher number is needed after changing the transaction date.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The transaction line being edited.</param>
    /// <param name = "_newTransDate">The new transaction date.</param>
    /// <returns>true if a new voucher number is necessary; otherwise, false.</returns>
    public boolean isVoucherChangeRequired(LedgerJournalTrans _ledgerJournalTrans, TransDate _newTransDate)
    {
        boolean voucherChangeRequired;
        LedgerJournalVoucherChanged ledgerJournalVoucherChanged;

        if (_ledgerJournalTrans.TransDate != _newTransDate)
        {
            select firstonly ledgerJournalVoucherChanged
                where ledgerJournalVoucherChanged.ToDate == _ledgerJournalTrans.TransDate
                && ledgerJournalVoucherChanged.ToVoucher == _ledgerJournalTrans.Voucher;
            
            if (ledgerJournalVoucherChanged.ToVoucher == ledgerJournalVoucherChanged.FromVoucher)
            {
                //Voucher should be updated only if the voucher hasn't been updated yet.
                voucherChangeRequired = true;
            }
        }
        return voucherChangeRequired;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyDate</Name>
				<Source><![CDATA[
    public void modifyDate(LedgerJournalTrans _ledgerJournalTrans,
                           TransDate _newTransDate,
                           LedgerJournalTrans _newLedgerJournalTrans = null,
                           boolean _updateVoucher = false)
    {
        LedgerJournalTrans ledgerJournalTransLocal;
        boolean isDateChanged;
        boolean isVoucherChanged;
        Voucher newVoucher;

        if (!ledgerJournalTable.Posted && !ledgerJournalTable.Approver)
        {
            ttsbegin;

            if (!_newTransDate)
            {
                throw error(strfmt("@SYS22828", funcname()));
            }

            if (_newTransDate != _ledgerJournalTrans.TransDate && _updateVoucher)
            {
                // If the transaction date and voucher hasn't been updated yet, we should create a new voucher for the updated date.
                newVoucher = new JournalVoucherNum(JournalTableData::newTable(ledgerJournalTable)).getNew(false);
                
                if (!newVoucher)
                {
                    throw error("@SYS26396");
                }
                
                isVoucherChanged = true;
            }

            
            while select forupdate ledgerJournalTransLocal
                where ledgerJournalTransLocal.JournalNum == _ledgerJournalTrans.JournalNum &&
                      ledgerJournalTransLocal.Voucher == _ledgerJournalTrans.Voucher &&
                      ledgerJournalTransLocal.TransDate == _ledgerJournalTrans.TransDate &&
                      ledgerJournalTransLocal.RecId != _ledgerJournalTrans.RecId
            {
                ledgerJournalTransLocal.TransDate = _newTransDate;

                if (isVoucherChanged)
                {
                    ledgerJournalTransLocal.Voucher = newVoucher;
                }

                ledgerJournalTransLocal.update();

                if (!isDateChanged)
                {
                    isDateChanged = true;
                }
            }

            if (!isVoucherChanged)
            {
                newVoucher = _ledgerJournalTrans.Voucher;
            }
            
            if (isDateChanged)
            {
                // Removes the original budget check result from the cache for the voucher to allow the cache update after budget check occurs.
                this.removeBudgetCheckResultFromCache(_ledgerJournalTrans.Voucher);

                // The transaction dates on the voucher's journal lines are changed.
                // Recheck budget for the voucher.
                BudgetControlAccountingJournalProcessor::submitLedgerJournalVoucherToCheckBudget(
                    ledgerJournalTable.JournalType,
                    ledgerJournalTable.JournalNum,
                    ledgerJournalTable.company(),
                    newVoucher);
            }

            // Updates the date for the original voucher
            if (vendTrans_ds)
            {
                VendTrans vendTransLocal = vendTrans_ds.cursor();

                LedgerJournalVoucherChanged::modifyOrigVoucherDate(_ledgerJournalTrans.JournalNum,
                                                                vendTransLocal.Voucher,
                                                                vendTransLocal.TransDate,
                                                                newVoucher,
                                                                _newTransDate);
            }

            ttscommit;
            this.newJournalActive(ledgerJournalTable);

            if (isVoucherChanged)
            {
                _newLedgerJournalTrans.Voucher = newVoucher;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyDocumentDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Modifies the document date, the due date and the cash disc date for the voucher to approve.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    A <c>LedgerJournalTrans</c> record buffer.
    /// </param>
    /// <param name="_newDocumentDate">
    ///    The new document date.
    /// </param>
    public void modifyDocumentDate(LedgerJournalTrans _ledgerJournalTrans,
                                   TransDate _newDocumentDate)
    {
        LedgerJournalTrans ledgerJournalTransLocal;
        CashDiscdate cashDiscdate;

        if ( ! ledgerJournalTable.Posted && !ledgerJournalTable.Approver)
        {
            ttsbegin;

            while select forupdate ledgerJournalTransLocal
            where ledgerJournalTransLocal.JournalNum == _ledgerJournalTrans.JournalNum &&
                  ledgerJournalTransLocal.Voucher == _ledgerJournalTrans.Voucher &&
                  ledgerJournalTransLocal.TransDate == _ledgerJournalTrans.TransDate
            {
                cashDiscdate = _newDocumentDate ? _newDocumentDate : _ledgerJournalTrans.TransDate;
                ledgerJournalTransLocal.DocumentDate = _newDocumentDate;
                ledgerJournalTransLocal.Due = cashDiscdate;

                if (ledgerJournalTransLocal.Payment && ledgerJournalTransLocal.Invoice)
                {
                    ledgerJournalTransLocal.Due = PaymCalendarSourceLedgerJournalTrans::getUpdatedDueDate(ledgerJournalTransLocal, this.paymDayId(ledgerJournalTransLocal));
                }
                ledgerJournalTransLocal.DateCashDisc = CashDisc::cashDiscDate(ledgerJournalTransLocal.CashDiscCode, cashDiscdate);
                ledgerJournalTransLocal.update();
            }
            ttscommit;
            this.newJournalActive(ledgerJournalTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyVoucher</Name>
				<Source><![CDATA[
    public void modifyVoucher(LedgerJournalTrans _ledgerJournalTrans)
    {
        Voucher newVoucher;
        LedgerJournalTrans ledgerJournalTransLocal;
        boolean hasLedgerJournalTransUpdatedWithNewVoucher;

        if ((!ledgerJournalTable.Posted && !ledgerJournalTable.Approver) &&
            GeneralJournalEntry_Extension::existForSubledgerVoucher(_ledgerJournalTrans.Voucher))
        {
            ttsbegin;

            newVoucher = new JournalVoucherNum(JournalTableData::newTable(ledgerJournalTable)).getNew(false);

            if (!newVoucher)
                throw error("@SYS26396");

            while select forupdate ledgerJournalTransLocal
                where ledgerJournalTransLocal.JournalNum == _ledgerJournalTrans.JournalNum
                   && ledgerJournalTransLocal.Voucher == _ledgerJournalTrans.Voucher
                   && ledgerJournalTransLocal.TransDate == _ledgerJournalTrans.TransDate
            {
                ledgerJournalTransLocal.Voucher = newVoucher;
                ledgerJournalTransLocal.update();

                hasLedgerJournalTransUpdatedWithNewVoucher = true;
            }

            if (hasLedgerJournalTransUpdatedWithNewVoucher)
            {
                // Update voucher's budget source with new voucher number.
                BudgetSourceLedgerJournalTrans::updateBudgetSourcesWithNewVoucher(
                    CompanyInfo::findDataArea(_ledgerJournalTrans.company()).RecId,
                    _ledgerJournalTrans.JournalNum,
                    _ledgerJournalTrans.Voucher,
                    newVoucher);

                this.moveCachedBudgetCheckResult(_ledgerJournalTrans.Voucher, newVoucher);
            }

            LedgerJournalVoucherChanged::modifyChangedVoucherDate(_ledgerJournalTrans.JournalNum,
                                                                  _ledgerJournalTrans.Voucher,
                                                                  _ledgerJournalTrans.TransDate,
                                                                  newVoucher,
                                                                  _ledgerJournalTrans.TransDate);
            ttscommit;
            this.newJournalActive(ledgerJournalTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(FormRun _formRun)
    {
        super(_formRun);

        if (_formRun)
        {
            vendTrans_ds = _formRun.dataSource(2);
        }

        taxAmountsApproval = new RecordSortedList(tmpAccountSum.TableId);
        taxAmountsApproval.sortOrder(fieldnum(TmpAccountSum, Voucher));
        calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalActive</Name>
				<Source><![CDATA[
    void newJournalActive(LedgerJournalTable _ledgerJournalTable, boolean _recalc = false)
    {
        if (_ledgerJournalTable.JournalNum == ledgerJournalTable.JournalNum || ! ledgerJournalTable)
        {
            super(_ledgerJournalTable, _recalc);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preCreate</Name>
				<Source><![CDATA[
    void preCreate(LedgerJournalTrans _ledgerJournalTrans)
    {
        super(_ledgerJournalTrans);

        previousledgerJournalTrans = _ledgerJournalTrans.data();
        // <GTH>
        previousledgerJournalTrans.SysExtensionSerializerMap::copyExtensionTableData(_ledgerJournalTrans);

        if (TaxThaiGovCertificationFeatureChecker::isCountryRegionTH())
        {
            prevoiusLedgerJournalTransExtTH = LedgerJournalTransExtensionTH::findByLedgerJournalTrans(_ledgerJournalTrans.RecId).data();
        }
        // </GTH>
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshWhenPosted</Name>
				<Source><![CDATA[
    void refreshWhenPosted()
    {
        super();
        if (vendTrans_ds)
        {
            vendTrans_ds.research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes a voucher from the journal.
    /// </summary>
    /// <param name="_vendTrans">
    ///    The <c>VendTrans</c> record buffer with the voucher to remove.
    /// </param>
    /// <param name="_ledgerJournalTable">
    ///    The <c>LedgerJournalTable</c> record buffer to delete the specified TaxUncommitted records.
    /// </param>
    private void removeVoucher(VendTrans _vendTrans,
                               LedgerJournalTable _ledgerJournalTable = null)
    {
        Voucher voucher;
        Voucher journalVoucher;
        LedgerJournalVoucherChanged ledgerJournalVoucherChanged;

        voucher = _vendTrans.Voucher;
        journalVoucher = voucher;

        if (_ledgerJournalTable)
        {
            TaxUncommitted::deleteForVoucher(_ledgerJournalTable.TableId, _ledgerJournalTable.RecId, _vendTrans.Voucher);
        }

        ledgerJournalVoucherChanged = LedgerJournalVoucherChanged::findFromVoucher(ledgerJournalTable.JournalNum, voucher);

        if (ledgerJournalVoucherChanged.FromVoucher != ledgerJournalVoucherChanged.ToVoucher)
        {
            journalVoucher = ledgerJournalVoucherChanged.ToVoucher;
            this.clearBalancesForVoucher(journalVoucher);
            //If the voucher number was changed, release it back.
            NumberSeq::releaseNumber(ledgerJournalTable.NumberSequenceTable, journalVoucher);
        }

        if (LedgerJournalEngine_Server::removeVoucher(
                _vendTrans,
                ledgerJournalTable,
                journalVoucher))
        {
            this.removeBudgetCheckResultFromCache(journalVoucher);
        }

        this.clearBalancesForVoucher(voucher);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeVouchers</Name>
				<Source><![CDATA[
    public void removeVouchers(FormDataSource _vendTrans_ds,
                               boolean _confirmationDialog = false,
                               LedgerJournalTable _ledgerJournalTable = null
                               )
    {
        #AviFiles

        VendTrans vendTrans;
        SysOperationProgress progress;

        if (!_vendTrans_ds || !_vendTrans_ds.cursor() || _vendTrans_ds.cursor().TableId != tablenum(VendTrans))
            return;

        if (_confirmationDialog && Box::yesNo("@SYS74275", DialogButton::Yes, "@SYS74270") != DialogButton::Yes)
            return;

        setprefix("@SYS74270");

        vendTrans = _vendTrans_ds.getFirst(true);

        if (vendTrans)
        {
            progress = new SysOperationProgress();
            progress.setCaption("@SYS74270");

            do
            {
                this.removeVoucher(vendTrans, _ledgerJournalTable);
                progress.setText(strfmt('%1, %2', #fieldlabelvalue(vendTrans, Voucher), vendTrans.Txt));
                vendTrans = _vendTrans_ds.getNext();
            }
            while (vendTrans);
        }
        else
        {
            this.removeVoucher(_vendTrans_ds.cursor(), _ledgerJournalTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>takeNewVoucher</Name>
				<Source><![CDATA[
    public boolean takeNewVoucher()
    {
        // The approval journal should not take new voucher numbers automatically
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountApprovalTotals</Name>
				<Source><![CDATA[
    protected void taxAmountApprovalTotals(LedgerJournalTrans _ledgerJournalTrans,
                                           LedgerJournalTrans_Asset _ledgerJournalTrans_Asset)
    {
        TmpAccountSum tmpAccountSumLocal;
        LedgerJournalVoucherChanged ledgerJournalVoucherChanged;
        TransDate transDate;
        Voucher voucher;

        tmpAccountSumLocal.Voucher = _ledgerJournalTrans.Voucher;
        if (!taxAmountsApproval.find(tmpAccountSumLocal))
        {
            ledgerJournalVoucherChanged = LedgerJournalVoucherChanged::find(_ledgerJournalTrans.JournalNum, _ledgerJournalTrans.Voucher);
            if (ledgerJournalVoucherChanged)
            {
                voucher = ledgerJournalVoucherChanged.FromVoucher;
                transDate = ledgerJournalVoucherChanged.FromDate;
            }
            else
            {
                voucher = _ledgerJournalTrans.Voucher;
                transDate = _ledgerJournalTrans.TransDate;
            }
            tmpAccountSumLocal.Balance01 = Tax::netTaxTotalMSTVoucherDate(voucher, transDate, _ledgerJournalTrans.JournalNum);
            tmpAccountSumLocal.Balance02 = Tax::netTaxTotalVoucherDate(voucher, transDate, _ledgerJournalTrans.JournalNum);
            [tmpAccountSumLocal.Balance03, tmpAccountSumLocal.Balance04] =
                ledgerJournalEngine_Server.calcTotalTaxAmount(_ledgerJournalTrans, _ledgerJournalTrans_Asset, false, false);
            taxAmountsApproval.ins(tmpAccountSumLocal, true);
        }

        taxAmountReverseMST = tmpAccountSumLocal.Balance01;
        taxAmountReverse = tmpAccountSumLocal.Balance02;
        taxAmountToPostMST = tmpAccountSumLocal.Balance03;
        taxAmountToPost = tmpAccountSumLocal.Balance04;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountOrig</Name>
				<Source><![CDATA[
    void taxAmountOrig()
    {
        if (taxAmountToPost)
        {
            if (this.ledgerJournalTable().LedgerJournalInclTax)
            {
                taxAmountOrig = taxAmountReverse;
            }
            else
            {
                taxAmountOrig = -(taxAmountToPost - taxAmountReverse);
            }
        }
        else
        {
            taxAmountOrig = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountReverse</Name>
				<Source><![CDATA[
    AmountMST taxAmountReverse(LedgerJournalTrans _ledgerJournalTrans, LedgerJournalTrans_Asset _ledgerJournalTrans_Asset = null)
    {
        this.taxAmountApprovalTotals(_ledgerJournalTrans, _ledgerJournalTrans_Asset);
        return taxAmountReverse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountToPost</Name>
				<Source><![CDATA[
    AmountMST taxAmountToPost(LedgerJournalTrans _ledgerJournalTrans, LedgerJournalTrans_Asset _ledgerJournalTrans_Asset = null)
    {
        this.taxAmountApprovalTotals(_ledgerJournalTrans, _ledgerJournalTrans_Asset);
        return taxAmountToPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a tax field has changed.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    A <c>LedgerJournalTrans</c> record buffer.
    /// </param>
    /// <returns>
    ///    true if tax fields have changed; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method returns false, except for the implementation in the
    ///    <c>LedgerJournalEngine_VendApprove</c> class, where it returns true if one of the following fields
    ///    is changed: <c>TaxCode</c>, <c>TaxGroup</c>, <c>TaxItemGroup</c>.
    /// </remarks>
    protected boolean taxChanged(LedgerJournalTrans _ledgerJournalTrans)
    {
        return (ledgerJournalTransOrig.TaxCode != _ledgerJournalTrans.TaxCode ||
                ledgerJournalTransOrig.TaxGroup != _ledgerJournalTrans.TaxGroup ||
                ledgerJournalTransOrig.TaxItemGroup != _ledgerJournalTrans.TaxItemGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxDiffDebitCredit</Name>
				<Source><![CDATA[
    protected container taxDiffDebitCredit()
    {
        AmountMST debit;
        AmountMST credit;
        AmountMST taxAmount;
        AmountMST newtaxAmountOrig;

        if (!taxAmountToPostMST && !taxAmountOrig)
            return [0,0];

        if (this.ledgerJournalTable().LedgerJournalInclTax)
        {
            if (taxAmountToPost && taxAmountOrig)
                return [0,0];
            else
            {
                if (taxAmountToPost)
                {
                    taxAmount = taxAmountReverseMST;
                    taxAmountOrig = taxAmount;
                    if (taxAmount > 0)
                        credit = taxAmount;
                    else
                        debit = -taxAmount;
                }
                else // taxAmountOrig is filled
                {
                    taxAmount = taxAmountOrig;
                    taxAmountOrig = 0;
                    if (taxAmount > 0)
                        credit = -taxAmount;
                    else
                        debit = taxAmount;
                }
            }
        }
        else
        {
            if (taxAmountToPostMST)
                taxAmount = -(taxAmountToPostMST - taxAmountReverseMST);
            else
                taxAmount = 0;

            newtaxAmountOrig = taxAmount;

            taxAmount = taxAmount - taxAmountOrig;

            if (taxAmountOrig < 0)
            {
                if (taxAmount < 0)
                    debit -= taxAmount;
                else
                    credit += taxAmount;
            }
            else
            {
                if (taxAmount < 0)
                    credit += taxAmount;
                else
                    debit -= taxAmount;
            }

            taxAmountOrig = newtaxAmountOrig;
        }
        return [debit, credit];
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxAmountToPost</Name>
				<Source><![CDATA[
    void updateTaxAmountToPost(LedgerJournalTrans _ledgerJournalTrans,
                               LedgerJournalTrans_Asset _ledgerJournalTrans_Asset = null,
                               boolean _delete = false)
    {
        TmpAccountSum tmpAccountSumLocal;

        tmpAccountSumLocal.Voucher = _ledgerJournalTrans.Voucher;

        if (taxAmountsApproval.find(tmpAccountSumLocal))
        {
            [tmpAccountSumLocal.Balance03,
             tmpAccountSumLocal.Balance04] = ledgerJournalEngine_Server.calcTotalTaxAmount(_ledgerJournalTrans,
                                                                                           _ledgerJournalTrans_Asset,
                                                                                           false,
                                                                                           _delete,
                                                                                           [tmpAccountSumLocal.Balance03, tmpAccountSumLocal.Balance04]);

            taxAmountsApproval.ins(tmpAccountSumLocal, true);

            if (_ledgerJournalTrans.CurrencyCode == Ledger::accountingCurrency(CompanyInfo::current()))
            {
                taxAmountToPost = tmpAccountSumLocal.Balance03;
            }
            else
            {
                taxAmountToPost = tmpAccountSumLocal.Balance04;
            }
        }
        else
        {
            this.taxAmountApprovalTotals(_ledgerJournalTrans, _ledgerJournalTrans_Asset);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendTrans</Name>
				<Source><![CDATA[
    public VendTrans vendTrans(LedgerJournalTrans _ledgerJournalTrans,
                               boolean _forUpdate = false)
    {
        LedgerJournalTrans ledgerJournalTrans;
        VendTrans vendTrans;

        vendTrans.selectForUpdate(_forUpdate);

        select firstonly Voucher, JournalNum, VendTransId from ledgerJournalTrans
            where ledgerJournalTrans.Voucher == _ledgerJournalTrans.Voucher
               && ledgerJournalTrans.JournalNum == _ledgerJournalTrans.JournalNum
               && ledgerJournalTrans.VendTransId
        join vendTrans
            where vendTrans.RecId == ledgerJournalTrans.VendTransId;

        return vendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherTotals</Name>
				<Source><![CDATA[
    public boolean voucherTotals(LedgerJournalTrans _ledgerJournalTrans, boolean _reread = false)
    {
        boolean reread;
        TmpVoucherSum tmpVoucherSum;
        AmountMST amountDifference;

        reread = super(_ledgerJournalTrans, _reread);

        // Add tax difference
        if (reread)
        {
            tmpVoucherSum.Voucher = _ledgerJournalTrans.Voucher;
            if (voucherBalance.find(tmpVoucherSum))
            {
                amountDifference = this.amountDifferenceMST(_ledgerJournalTrans);
                if (amountDifference < 0)
                {
                    tmpVoucherSum.Debit -= amountDifference;
                }
                else
                {
                    tmpVoucherSum.Credit += amountDifference;
                }

                voucherBalance.ins(tmpVoucherSum, true);
            }
            else
            {
                throw error(strfmt("@SYS84672", _ledgerJournalTrans.Voucher));
            }

            voucherTotalDebit = tmpVoucherSum.Debit;
            voucherTotalCredit = tmpVoucherSum.Credit;
            voucherTotalBalance = voucherTotalDebit - voucherTotalCredit;
        }

        return reread;
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherTotalWithTax</Name>
				<Source><![CDATA[
    AmountMST voucherTotalWithTax(LedgerJournalTrans _ledgerJournalTrans)
    {
        return this.voucherDebit(_ledgerJournalTrans) -
               this.voucherCredit(_ledgerJournalTrans) -
               this.amountDifference(_ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the internal caches for journal and voucher tables and refreshes the data source of the
    ///    specified <c>LedgerJournalTrans</c> record buffer.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    A <c>LedgerJournalTrans</c> record buffer.
    /// </param>
    /// <param name="_updateCashDisc">
    ///    A Boolean flag that determines whether the cash discount of the journal line was manually entered;
    ///    optional.
    /// </param>
    /// <param name="_ledgerJournalTrans_Asset">A <c>LedgerJournalTrans_Asset</c> record buffer; optional.</param>
    /// <param name="_ledgerJournalTrans_RDeferrals">
    ///    A <c>LedgerJournalTrans_RDeferrals</c> record buffer; optional.
    /// </param>
    /// <param name="_ledgerJournalTrans_RCash">
    ///    A <c>LedgerJournalTrans_RCash</c> record buffer; optional.
    /// </param>
    /// <remarks>
    ///    This method must be called from the <c>LedgerJournalTrans</c> data source of the journal form
    ///    method <c>write</c> after the <c>super</c> method.
    /// </remarks>
    void write(
        LedgerJournalTrans _ledgerJournalTrans,
        boolean _updateCashDisc = false,
        LedgerJournalTrans_Asset _ledgerJournalTrans_Asset = null,
        LedgerJournalTrans_RDeferrals _ledgerJournalTrans_RDeferrals = null,
        LedgerJournalTrans_RCash _ledgerJournalTrans_RCash = null)
    {
        if (ledgerJournalCashDiscService)
        {
            ledgerJournalCashDiscService.allocateCashDiscAmount(VendTrans::find(_ledgerJournalTrans.VendTransId).possibleCashDisc());
        }
        this.updateTaxAmountToPost(_ledgerJournalTrans);
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            super(_ledgerJournalTrans, true, _ledgerJournalTrans_Asset, _ledgerJournalTrans_RDeferrals, _ledgerJournalTrans_RCash);
        }
        else
        {
            // </GEERU>
            super(_ledgerJournalTrans, true);
            // <GEERU>
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountCurDebitModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adjusts a <c>LedgerJournalTrans</c> table AmountCurDebit record.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    The <c>LedgerJournalTrans</c> table record being modified.
    /// </param>
    /// <param name="_ledgerJournalTransProj">
    ///    The <c>LedgerJournalTrans_Project</c> table record being modified; optional.
    /// </param>
    /// <param name="_ledgerJournalTrans_RCash">
    /// The optional <c>LedgerJournalTrans_RCash</c> table record being modified.
    /// </param>
    public void amountCurDebitModified(LedgerJournalTrans _ledgerJournalTrans, LedgerJournalTrans_Project _ledgerJournalTransProj = null, LedgerJournalTrans_RCash _ledgerJournalTrans_RCash = null)
    {
        DiscAmount discAmount;
        AmountCur totalBaseAmount;
        ledgerJournalTrans ledgerJournaltransDisc;
        VendTrans vendTrans;

        super(_ledgerJournalTrans, _ledgerJournalTransProj, _ledgerJournalTrans_RCash);

        vendTrans = VendTrans::find(_ledgerJournalTrans.VendTransId);
        discAmount = vendTrans.possibleCashDisc();

        if (discAmount != 0)
        {
            while select AmountCurDebit, AmountCurCredit from ledgerJournaltransDisc where
                        ledgerJournaltransDisc.AmountCurDebit != 0 && ledgerJournaltransDisc.PoolRecId == 0
                        && ledgerJournaltransDisc.JournalNum == _ledgerJournalTrans.JournalNum
            {
                totalBaseAmount += ledgerJournaltransDisc.amount();
            }
            
            if (VendTrans.AmountCur != totalBaseAmount)
            {
                _ledgerJournalTrans.CashDiscAmount = discAmount * (((_ledgerJournalTrans.amount() / VendTrans.AmountCur) * 100) / 100);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountCurCreditModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adjusts a <c>LedgerJournalTrans</c> table AmountCurCredit record.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    The <c>LedgerJournalTrans</c> table record being modified.
    /// </param>
    /// <param name="_ledgerJournalTransProj">
    ///    The <c>LedgerJournalTrans_Project</c> table record being modified; optional.
    /// </param>
    /// <param name="_ledgerJournalTrans_RCash">
    /// The optional <c>LedgerJournalTrans_RCash</c> table record being modified.
    /// </param>
    public void amountCurCreditModified(LedgerJournalTrans _ledgerJournalTrans, LedgerJournalTrans_Project _ledgerJournalTransProj = null, LedgerJournalTrans_RCash _ledgerJournalTrans_RCash = null)
    {
        DiscAmount discAmount;
        AmountCur totalBaseAmount;
        ledgerJournalTrans ledgerJournaltransDisc;
        VendTrans vendTrans;

        super(_ledgerJournalTrans, _ledgerJournalTransProj, _ledgerJournalTrans_RCash);

        vendTrans = VendTrans::find(_ledgerJournalTrans.VendTransId);
        discAmount = vendTrans.possibleCashDisc();

        if (discAmount != 0)
        {
            while select AmountCurCredit, AmountCurDebit from ledgerJournaltransDisc where
                        ledgerJournaltransDisc.AmountCurCredit != 0 && ledgerJournaltransDisc.PoolRecId == 0
                        && ledgerJournaltransDisc.JournalNum == _ledgerJournalTrans.JournalNum
            {
                totalBaseAmount += ledgerJournaltransDisc.amount();
            }
            
            if (VendTrans.AmountCur != totalBaseAmount)
            {
                _ledgerJournalTrans.CashDiscAmount = discAmount * (((_ledgerJournalTrans.amount() / VendTrans.AmountCur) * 100) / 100);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxGroupModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///	Force recalculation of line amounts and cash discount since the tax amounts may not exist before the tax group buffer is written.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> table record being modified.
    /// </param>
    public void taxGroupModified(LedgerJournalTrans _ledgerJournalTrans)
    {
        super(_ledgerJournalTrans);

        if (_ledgerJournalTrans.LedgerJournalTable().LedgerJournalInclTax)
        {
            if (_ledgerJournalTrans.AmountCurDebit != 0)
            {
                this.amountCurDebitModified(_ledgerJournalTrans, ledgerJournalTrans_Project);
            }
            else if (_ledgerJournalTrans.AmountCurCredit != 0)
            {
                this.amountCurCreditModified(_ledgerJournalTrans, ledgerJournalTrans_Project);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayCurrencyBeModified</Name>
				<Source><![CDATA[
    public boolean mayCurrencyBeModified(LedgerJournalTrans _ledgerJournalTrans)
    {
        super(_ledgerJournalTrans);

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maySecondaryCurrencyBeModified</Name>
				<Source><![CDATA[
    public boolean maySecondaryCurrencyBeModified(LedgerJournalTrans _ledgerJournalTrans)
    {
        super(_ledgerJournalTrans);

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>