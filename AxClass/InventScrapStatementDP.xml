<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventScrapStatementDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventScrapStatementDP</c> class is the data provider class for the
/// <c>InventScrapStatement</c> report.
/// </summary>
[
    SRSReportQuery(querystr(InventScrapStatement)),
    SRSReportParameterAttribute(classStr(InventScrapStatementContract))
]
class InventScrapStatementDP extends SRSReportDataProviderBase
{
    InventScrapStatementTmp     inventScrapStatementTmp;
    InventScrapStatementTmp     inventScrapStatementTmpLoc;
    EcoResConfigurationFlag     showConfigId;
    EcoResSizeFlag              showInventSizeId;
    InventBatchIdFlag           showInventBatchId;
    EcoResColorFlag             showInventColorId;
    InventLocationIdFlag        showInventLocationId;
    InventSerialIdFlag          showInventSerialId;
    InventSiteIdFlag            showInventSiteId;
    EcoResStyleFlag             showInventStyleId;
    EcoResVersionFlag           showInventVersionId;
    WMSLocationIdFlag           showWMSLocationId;
    WHSLicensePlateFlag         showLicensePlateId;
    InventOwnerIdFlag           showInventOwnerId;
    WHSInventStatusFlag         showInventStatus;
    boolean                     showDimensions;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearAmount</Name>
				<Source><![CDATA[
    private void clearAmount()
    {
        inventScrapStatementTmp.Qty = 0;
        inventScrapStatementTmp.CostAmountPosted = 0;
        inventScrapStatementTmp.CostValue = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearDimensions</Name>
				<Source><![CDATA[
    private void clearDimensions()
    {
        inventScrapStatementTmp.DimensionsLine = false;
        inventScrapStatementTmp.DimensionAttributeName = '';
        inventScrapStatementTmp.DimensionsName = '';
        inventScrapStatementTmp.DimensionValue = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventScrapStatementTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Queries the <c>InventScrapStatementTmp</c> table and retrieves the data table.
    /// </summary>
    /// <returns>
    ///    The required report data table.
    /// </returns>
    [
        SRSReportDataSet(tablestr(InventScrapStatementTmp))
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventScrapStatementTmp getInventScrapStatementTmp()
    {
        select inventScrapStatementTmp;
        return inventScrapStatementTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInventReportStatementTmp</Name>
				<Source><![CDATA[
    private void insertInventReportStatementTmp(InventTable             _inventTable,
                                                InventDim               _inventDim,
                                                InventTrans             _inventTrans,
                                                InventTransPosting      _inventTransPosting)
    {
        inventScrapStatementTmpLoc.ItemId      = _inventTable.ItemId;
        inventScrapStatementTmpLoc.ItemName    = InventTable::find(_inventTable.ItemId).itemName();
        inventScrapStatementTmpLoc.UnitId      = _inventTable.inventUnitId();

        inventScrapStatementTmpLoc.ConfigId            = showConfigId          ? _inventDim.configId : '';
        inventScrapStatementTmpLoc.InventBatchId       = showInventBatchId     ? _inventDim.inventBatchId : '';
        inventScrapStatementTmpLoc.InventColorId       = showInventColorId     ? _inventDim.InventColorId : '';
        inventScrapStatementTmpLoc.InventLocationId    = showInventLocationId  ? _inventDim.InventLocationId : '';
        inventScrapStatementTmpLoc.InventStyleId       = showInventStyleId     ? _inventDim.InventStyleId : '';
        inventScrapStatementTmpLoc.InventVersionId     = showInventVersionId   ? _inventDim.InventVersionId : '';
        inventScrapStatementTmpLoc.InventSerialId      = showInventSerialId    ? _inventDim.InventSerialId : '';
        inventScrapStatementTmpLoc.InventSiteId        = showInventSiteId      ? _inventDim.InventSiteId : '';
        inventScrapStatementTmpLoc.InventSizeId        = showInventSizeId      ? _inventDim.InventSizeId : '';
        inventScrapStatementTmpLoc.WMSLocationId       = showWMSLocationId     ? _inventDim.WMSLocationId : '';
        inventScrapStatementTmpLoc.LicensePlateId      = showLicensePlateId    ? _inventDim.LicensePlateId : '';
        inventScrapStatementTmpLoc.InventStatusId      = showInventStatus      ? _inventDim.InventStatusId : '';
        inventScrapStatementTmpLoc.InventOwnerId_RU    = showInventOwnerId     ? _inventDim.InventOwnerId_RU : '';

        int sign = (_inventTrans.StatusIssue     ? -1 : 1) *
               (_inventTrans.InvoiceReturned ? -1 : 1);

        inventScrapStatementTmpLoc.Qty                 = sign * _inventTrans.Qty;
        inventScrapStatementTmpLoc.CostAmountPosted    = sign * _inventTrans.CostAmountPosted;
        inventScrapStatementTmpLoc.CostValue           = sign * CurrencyExchangeHelper::amount(_inventTrans.CostAmountPosted + _inventTrans.CostAmountAdjustment);
        inventScrapStatementTmpLoc.insert();

        if (showDimensions)
        {
            RefRecId refRecIdTmp = inventScrapStatementTmpLoc.RecId;
            str dimensionsScope = this.printDimensions(_inventTransPosting.LedgerDimension);
            ttsBegin;
            select firstonly forupdate inventScrapStatementTmpLoc
                where inventScrapStatementTmpLoc.RecId == refRecIdTmp;
            inventScrapStatementTmpLoc.DimensionsScope = dimensionsScope;
            inventScrapStatementTmpLoc.update();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDimensions</Name>
				<Source><![CDATA[
    private FreeText printDimensions(LedgerDimensionAccount _ledgerDimensionAccount)
    {
        DimensionAttributeValue                 dimAttributeValue;
        DimensionAttribute                      dimAttribute;
        DimensionAttributeValueGroupCombination dimAttrValueGroupCombo;
        DimensionAttributeValueGroup            dimAttrValueGroup;
        DimensionAttributeLevelValue            dimAttrLevelValue;
        Set                                     dimAttributes = new Set(Types::Int64);
        Set                                     dimTemp = new Set(Types::Int64);
        RecId                                   mainAccountDimAttr = DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);
        str                                     dimensionScope;

        this.clearAmount();

        while select RecId from dimAttrValueGroupCombo
            order by dimAttrValueGroupCombo.Ordinal asc, dimAttribute.Name asc
            where dimAttrValueGroupCombo.DimensionAttributeValueCombination == _ledgerDimensionAccount
        join RecId from dimAttrValueGroup
            where dimAttrValueGroup.RecId == dimAttrValueGroupCombo.DimensionAttributeValueGroup
        join RecId from dimAttrLevelValue
            where dimAttrLevelValue.DimensionAttributeValueGroup == dimAttrValueGroup.RecId
        join * from dimAttributeValue
            where dimAttributeValue.RecId == dimAttrLevelValue.DimensionAttributeValue
        join * from dimAttribute
            where dimAttribute.RecId == dimAttributeValue.DimensionAttribute
                && dimAttribute.RecId != mainAccountDimAttr
        {
            // Prevent showing the same value if it exists in both an
            // account structure and a rule structure.
            if (!dimAttributes.in(dimAttribute.RecId))
            {
                dimAttributes.add(dimAttribute.RecId);
                inventScrapStatementTmpLoc.DimensionAttributeName = dimAttribute.localizedName();
                inventScrapStatementTmpLoc.DimensionsName = dimAttributeValue.getName();
                inventScrapStatementTmpLoc.DimensionValue = dimAttributeValue.getValue();
                inventScrapStatementTmpLoc.DimensionsLine = true;
                inventScrapStatementTmpLoc.insert();
                dimTemp.add(inventScrapStatementTmpLoc.RecId);
                dimensionScope += inventScrapStatementTmpLoc.DimensionValue;
                this.clearDimensions();
            }
        }
        SetEnumerator se = dimTemp.getEnumerator();
        while (se.moveNext())
        {
            ttsBegin;
            update_recordset inventScrapStatementTmpLoc
                setting DimensionsScope = dimensionScope
                where inventScrapStatementTmpLoc.RecId == se.current();
            ttsCommit;
        }

        return dimensionScope;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic for the <c>InventScrapStatement</c> report.
    /// </summary>
    public void processReport()
    {
        QueryRun                        queryRun = new QueryRun(this.parmQuery());
        InventScrapStatementContract    contract = this.parmDataContract();

        boolean                         zeroLine;

        showDimensions          = contract.parmShowDimensions();
        showConfigId            = contract.parmConfigId();
        showInventSizeId        = contract.parmInventSizeId();
        showInventBatchId       = contract.parmInventBatchId();
        showInventColorId       = contract.parmInventColorId();
        showInventLocationId    = contract.parmInventLocationId();
        showInventSerialId      = contract.parmInventSerialId();
        showInventSiteId        = contract.parmInventSiteId();
        showInventStyleId       = contract.parmInventStyleId();
        showInventVersionId     = contract.parmInventVersionId();
        showWMSLocationId       = contract.parmWMSLocationId();
        showLicensePlateId      = contract.parmLicensePlateId();
        showInventStatus        = contract.parmInventStatus();
        showInventOwnerId       = contract.parmInventOwnerId_RU();

        queryRun = new QueryRun(this.parmQuery());
        while (queryRun.next())
        {
            InventTable        inventTable        = queryRun.get(tableNum(InventTable));
            InventDim          inventDim          = queryRun.get(tableNum(InventDim));
            InventTrans        inventTrans        = queryRun.get(tableNum(InventTrans));
            InventTransPosting inventTransPosting = queryRun.get(tableNum(InventTransPosting));

            this.insertInventReportStatementTmp(inventTable, inventDim, inventTrans, inventTransPosting);
        }

        while select sum(Qty), sum(CostAmountPosted), sum(CostValue) from inventScrapStatementTmpLoc
            group by ItemId, ItemName, UnitId, ConfigId, InventBatchId, InventColorId, InventLocationId, InventSerialId, InventSiteId, InventSizeId, LicensePlateId,
                     InventStatusId, InventOwnerId_RU, InventStyleId, InventVersionId, WMSLocationId, DimensionAttributeName, DimensionsName, DimensionValue, DimensionsLine asc, DimensionsScope
        {
            if (!contract.parmShowZeroLines())
            {
                if (inventScrapStatementTmpLoc.DimensionsLine == NoYes::No)
                {
                    if (inventScrapStatementTmpLoc.Qty != 0 ||
                        inventScrapStatementTmpLoc.CostAmountPosted != 0 ||
                        inventScrapStatementTmpLoc.CostValue != 0)
                    {
                        inventScrapStatementTmp.data(inventScrapStatementTmpLoc);
                        inventScrapStatementTmp.insert();
                        zeroLine = false;
                    }
                    else
                    {
                        zeroLine = true;
                    }
                }
                else
                {
                    if (!zeroLine)
                    {
                        inventScrapStatementTmp.data(inventScrapStatementTmpLoc);
                        inventScrapStatementTmp.insert();
                    }
                }
            }
            else
            {
                inventScrapStatementTmp.data(inventScrapStatementTmpLoc);
                inventScrapStatementTmp.insert();
            }
        }
        delete_from inventScrapStatementTmpLoc;

        select sum (CostValue) from inventScrapStatementTmp;
        Amount amountTotalDig = inventScrapStatementTmp.CostValue;

        LanguageId langId = currentUserLanguage();
        update_recordSet inventScrapStatementTmp
            setting CostValueStr = RNumDateInWordConverter::construct(langId).numeralsToCurrency(amountTotalDig);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
