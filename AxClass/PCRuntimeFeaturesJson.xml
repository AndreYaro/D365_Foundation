<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCRuntimeFeaturesJson</Name>
	<SourceCode>
		<Declaration><![CDATA[
using StringBuilder = System.Text.StringBuilder;
using StringWriter = System.IO.StringWriter;
using JsonTextWriter = Newtonsoft.Json.JsonTextWriter;

/// <summary>
/// Serializes a collection of enabled features into a single JSON object string.
/// </summary>
internal class PCRuntimeFeaturesJson
{
    private const str nameProperty = 'Name';
    private static PCRuntimeFeaturesJson singleton;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>TypeNew</Name>
				<Source><![CDATA[
    private static void TypeNew()
    {
        singleton = new PCRuntimeFeaturesJson();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the singleton object instance.
    /// </summary>
    /// <returns>The <c>PCRuntimeFeaturesJson</c> instance.</returns>
    [Hookable(false)]
    internal static PCRuntimeFeaturesJson instance()
    {
        return PCRuntimeFeaturesJson::singleton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enabledFeatures</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the enabled features as JSON.
    /// </summary>
    /// <returns>The enabled features as JSON.</returns>
    [Hookable(false)]
    internal str enabledFeatures()
    {
        ListEnumerator le = PCRuntimeFeatures::instance().enabledFeaturesListEnumerator();

        var stringBuilder = new StringBuilder();

        using (var stringWriter = new StringWriter(stringBuilder))
        using (var writer = new JsonTextWriter(stringWriter))
        {
            writer.WriteStartArray();
            while (le.moveNext())
            {
                writer.WriteStartObject();
                writer.WritePropertyName(nameProperty);
                writer.WriteValue(le.current());
                writer.WriteEndObject();
            }
            writer.WriteEndArray();
        }
        
        return stringBuilder.ToString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>