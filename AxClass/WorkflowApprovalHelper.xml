<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WorkflowApprovalHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WorkflowApprovalHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getWorkflowSubmissionComment</Name>
				<Source><![CDATA[
    public static WorkflowComment getWorkflowSubmissionComment(RefRecId _workItemRecId)
    {
        WorkflowTrackingTable lastWorkItemTrackingRecord;
        WorkflowTrackingStatusTable trackingStatusTable;
        WorkflowTrackingCommentTable trackingCommentTable;
        WorkflowWorkItemTable workflowWorkItemTable;

        select firstonly Comment from trackingCommentTable
            order by trackingCommentTable.CreatedDateTime desc
            exists join lastWorkItemTrackingRecord
                where lastWorkItemTrackingRecord.TrackingContext == WorkflowTrackingContext::Workflow
                   && lastWorkItemTrackingRecord.TrackingType == WorkflowTrackingType::Submission
                   && lastWorkItemTrackingRecord.TrackingId == trackingCommentTable.TrackingId
            exists join trackingStatusTable
                where trackingStatusTable.RecId == lastWorkItemTrackingRecord.WorkflowTrackingStatusTable
            exists join workflowWorkItemTable
                where workflowWorkItemTable.CorrelationId == trackingStatusTable.CorrelationId
                   && workflowWorkItemTable.RecId == _workItemRecId;

        return trackingCommentTable.Comment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isImageFileType</Name>
				<Source><![CDATA[
    public static boolean isImageFileType(str _filetype)
    {
        switch (_filetype)
        {
            case "gif":
            case "jpeg":
            case "jpg":
            case "pjpeg":
            case "png":
            case "bmp":
            case "svg+xml":
            case "tiff":
            case "vnd.djvu":
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMIMEDescriptor</Name>
				<Source><![CDATA[
    public static str getMIMEDescriptor(str _filetype)
    {
        str mimeDescriptor;

        if (_filetype)
        {
            if(WorkflowApprovalHelper::isImageFileType(_filetype))
            {
                mimeDescriptor = strFmt('data:image/%1;base64,', _filetype);
            }
            else
            {
                mimeDescriptor = strFmt('data:application/%1;base64,', _filetype);
            }
        }

        return mimeDescriptor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLoggerActivities</Name>
				<Source><![CDATA[
    public static WorkflowApprovalAppInstrumentationActivities getLoggerActivities(str _name)
    {
        return WorkflowApprovalInstrumentationLogger::createLogger(_name).approvalActivities();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActionMenuItemLabel</Name>
				<Source><![CDATA[
    private static MenuItemName getActionMenuItemLabel(SysWorkflowElement _sysWorkflowElement, WorkflowOutcomeName _actionName, NoYes _isOutcome, MenuItemName _menuItem)
    {
        if (_isOutcome)
        {
            return _sysWorkflowElement.actionMenuItemLabel(_actionName);
        }
        else
        {
            MenuFunction actionMenuItem = new MenuFunction(_menuItem, MenuItemType::Action);
            return actionMenuItem.label();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActionButtonSequence</Name>
				<Source><![CDATA[
    private static int getActionButtonSequence(SysWorkflowElement _sysWorkflowElement, WorkflowOutcomeName _actionName, MenuItemName _menuItem)
    {
        int ret = 2;

        // Ensure the completing action/outcome is the first promoted action (i.e. Approve, Complete)
        if (_sysWorkflowElement.getCompletingOutcome() == _actionName)
        {
            ret = 0;
        }
        // Ensure the return/reject action/outcome is the second promoted action (i.e. Reject)
        else if (_sysWorkflowElement.outcomeType(_actionName) == WorkflowElementOutcomeType::Return
                 || _menuItem == menuitemActionStr(WorkflowManualGatewayChoice2))
        {
            ret = 1;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActionMap</Name>
				<Source><![CDATA[
    private static Map getActionMap(SysWorkflowElement _sysWorkflowElement, WorkflowOutcomeName _actionName, NoYes _isOutcome)
    {
        Map result = new Map(Types::String, Types::String);

        MenuItemName menuItem = _sysWorkflowElement.actionMenuItem(_actionName);

        result.add('ElementId', guid2Str(_sysWorkflowElement.elementId()));
        result.add('Name', _actionName);
        result.add('MenuItem', menuItem);
        result.add('Caption', WorkflowApprovalHelper::getActionMenuItemLabel(_sysWorkflowElement, _actionName, _isOutcome, menuItem));
        result.add('Sequence', int2Str(WorkflowApprovalHelper::getActionButtonSequence(_sysWorkflowElement, _actionName, menuItem)));

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addActionList</Name>
				<Source><![CDATA[
    private static void addActionList(str _elementId, List _actionList)
    {
        #Workflow

        WorkflowElementTable elementTable;
        select firstonly elementTable where elementTable.ElementId == str2Guid(_elementId);

        if (elementTable)
        {
            SysWorkflowElement sysWorkflowElement = SysWorkflowElement::newElementTable(elementTable);

            // Must look in the element outcome table for manual gateway
            if (elementTable.ElementType == WorkflowElementType::ManualGateway)
            {
                WorkflowElementOutcomeTable workflowOutcomeTable;
                while select Outcome from workflowOutcomeTable order by Name
                    where workflowOutcomeTable.ElementTable == elementTable.RecId
                {
                    _actionList.addEnd(WorkflowApprovalHelper::getActionMap(sysWorkflowElement, workflowOutcomeTable.Outcome, true));
                }

                _actionList.addEnd(WorkflowApprovalHelper::getActionMap(sysWorkflowElement, #WorkflowWorkItemActionDelegate, false));
            }

            WorkflowActionTable workflowActionTable;
            while select IsOutcome, Enabled, Name from workflowActionTable order by Name
                where workflowActionTable.WorkflowElementTable == elementTable.RecId
                   && (workflowActionTable.IsOutcome == NoYes::Yes
                    || workflowActionTable.Name == #WorkflowWorkItemActionDelegate)
            {
                _actionList.addEnd(WorkflowApprovalHelper::getActionMap(sysWorkflowElement, workflowActionTable.Name, workflowActionTable.IsOutcome));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getElementActions</Name>
				<Source><![CDATA[
    public static List getElementActions(List _elementIds)
    {
        List actionList = new List(Types::Class);

        ListEnumerator enumerator = _elementIds.getEnumerator();
        while (enumerator.moveNext())
        {
            str elementId = strLRTrim(enumerator.current());
            WorkflowApprovalHelper::addActionList(elementId, actionList);
        }

        return actionList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryGetApprovalElementId</Name>
				<Source><![CDATA[
    public static SysDaQueryObject buildQueryGetApprovalElementId(WorkflowWorkItemTable _workItemTable)
    {
        SysDaQueryObject queryObj = new SysDaQueryObject(_workItemTable);
        queryObj.projection().add(fieldStr(WorkflowWorkItemTable, ElementId));
        queryObj.groupByClause().add(fieldStr(WorkflowWorkItemTable, ElementId));

        queryObj.whereClause(WorkflowApprovalHelper::buildExpressionWorkItem(_workItemTable, true, WorkflowApprovalCategoryInitializer::getAllApprovalSourceTableIds()));

        return queryObj;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryGetApprovalCount</Name>
				<Source><![CDATA[
    public static SysDaQueryObject buildQueryGetApprovalCount(WorkflowWorkItemTable _workItemTable, boolean _countPendingOnly, List _approvalSourceTableIds)
    {
        SysDaQueryObject queryObj = new SysDaQueryObject(_workItemTable);
        queryObj.projection().addCount(fieldStr(WorkflowWorkItemTable, RecId));

        queryObj.whereClause(WorkflowApprovalHelper::buildExpressionWorkItem(_workItemTable, _countPendingOnly, _approvalSourceTableIds));

        return queryObj;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildExpressionWorkItem</Name>
				<Source><![CDATA[
    private static SysDaQueryExpression buildExpressionWorkItem(WorkflowWorkItemTable _workItemTable, boolean _addPendingStatusFilter, List _approvalSourceTableIds)
    {
        SysDaQueryExpression workItemTableClause =
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_workItemTable, fieldStr(WorkflowWorkItemTable, UserId)),
                new SysDaValueExpression(SysQueryRangeUtil::currentUserId()));

        if (_addPendingStatusFilter)
        {
            workItemTableClause = workItemTableClause.and(
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(_workItemTable, fieldStr(WorkflowWorkItemTable, Status)),
                    new SysDaValueExpression(WorkflowWorkItemStatus::Pending))
                .and(
                    new SysDaEqualsExpression(
                        new SysDaFieldExpression(_workItemTable, fieldStr(WorkflowWorkItemTable, IsClaimed)),
                        new SysDaValueExpression(NoYes::Yes))));
        }

        workItemTableClause = workItemTableClause.and(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_workItemTable, fieldStr(WorkflowWorkItemTable, Type)),
                new SysDaValueExpression(WorkflowWorkItemType::WorkItem))
            .or(
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(_workItemTable, fieldStr(WorkflowWorkItemTable, Type)),
                    new SysDaValueExpression(WorkflowWorkItemType::FinalApprover)))
            .or(
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(_workItemTable, fieldStr(WorkflowWorkItemTable, Type)),
                    new SysDaValueExpression(WorkflowWorkItemType::Escalated))));

        workItemTableClause = workItemTableClause.and(WorkflowApprovalHelper::buildExpressionWorkItemRefTableId(_workItemTable, _approvalSourceTableIds));

        return workItemTableClause;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildExpressionWorkItemRefTableId</Name>
				<Source><![CDATA[
    private static SysDaQueryExpression buildExpressionWorkItemRefTableId(WorkflowWorkItemTable _workItemTable, List _approvalSourceTableIds)
    {
        SysDaQueryExpression expression;
        ListEnumerator enumerator = _approvalSourceTableIds.getEnumerator();
        boolean isFirstElement = true;

        while (enumerator.moveNext())
        {
            if (isFirstElement)
            {
                expression = WorkflowApprovalHelper::createExpressionWorkItemRefTableId(_workItemTable, enumerator.current());
                isFirstElement = false;
            }
            else
            {
                expression = expression.or(WorkflowApprovalHelper::createExpressionWorkItemRefTableId(_workItemTable, enumerator.current()));
            }
        }

        return expression;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createExpressionWorkItemRefTableId</Name>
				<Source><![CDATA[
    private static SysDaEqualsExpression createExpressionWorkItemRefTableId(WorkflowWorkItemTable _workItemTable, TableId _tableId)
    {
        return new SysDaEqualsExpression(
                    new SysDaFieldExpression(_workItemTable, fieldStr(WorkflowWorkItemTable, RefTableId)),
                    new SysDaValueExpression(_tableId));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>