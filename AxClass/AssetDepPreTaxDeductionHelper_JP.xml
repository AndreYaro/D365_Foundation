<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepPreTaxDeductionHelper_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The asset depreciation pre-tax deduction helper
/// </summary>
class AssetDepPreTaxDeductionHelper_JP
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>depEntityTypeToDepType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the depreciation entity type to depreciation type
    /// </summary>
    /// <param name="_depEntityType">
    /// The depreciation entity type
    /// </param>
    /// <returns>
    /// Returns the depreciation type
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws exception when asset depreciation entity type not correct
    /// </exception>
    public static AssetDepType_JP depEntityTypeToDepType(AssetDepEntityType_JP _depEntityType)
    {
        switch (_depEntityType)
        {
            case AssetDepEntityType_JP::OrdinaryDepreciation:
                return AssetDepType_JP::OrdinaryDepreciation;

            case AssetDepEntityType_JP::AdditionalDepreciationWithDirectOff:
                return AssetDepType_JP::AdditionalDepreciationWithDirectOff;

            case AssetDepEntityType_JP::AdditionalDepreciationWithReserve:
                return AssetDepType_JP::AdditionalDepreciationWithReserve;

            case AssetDepEntityType_JP::SpecialDepreciationWithDirectOff:
                return AssetDepType_JP::SpecialDepreciationWithDirectOff;

            case AssetDepEntityType_JP::SpecialDepreciationWithReserve:
                return AssetDepType_JP::SpecialDepreciationWithReserve;

            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>depTypeToDepEntityType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the asset depreciation type to depreciation entity type
    /// </summary>
    /// <param name="_depType">
    /// The asset depreciation type
    /// </param>
    /// <returns>
    /// Returns the asset depreciation entity type
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws exception when asset depreciation type not correct
    /// </exception>
    public static AssetDepEntityType_JP depTypeToDepEntityType(AssetDepType_JP _depType)
    {
        switch (_depType)
        {
            case AssetDepType_JP::OrdinaryDepreciation:
                return AssetDepEntityType_JP::OrdinaryDepreciation;

            case AssetDepType_JP::AdditionalDepreciationWithDirectOff:
                return AssetDepEntityType_JP::AdditionalDepreciationWithDirectOff;

            case AssetDepType_JP::AdditionalDepreciationWithReserve:
                return AssetDepEntityType_JP::AdditionalDepreciationWithReserve;

            case AssetDepType_JP::SpecialDepreciationWithDirectOff:
                return AssetDepEntityType_JP::SpecialDepreciationWithDirectOff;

            case AssetDepType_JP::SpecialDepreciationWithReserve:
                return AssetDepEntityType_JP::SpecialDepreciationWithReserve;

            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>depTypeToDepLimitType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets asset depreciation type to asset depreciation limit type
    /// </summary>
    /// <param name="_depType">
    /// The asset depreciation type
    /// </param>
    /// <returns>
    /// Returns the asset depreciation limit type
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws exception when asset depreciation type not correct
    /// </exception>
    public static AssetDepLimitType_JP depTypeToDepLimitType(AssetDepType_JP _depType)
    {
        switch (_depType)
        {
            case AssetDepType_JP::OrdinaryDepreciation:
                return AssetDepLimitType_JP::OrdinaryDepreciation;

            case AssetDepType_JP::AdditionalDepreciationWithDirectOff:
            case AssetDepType_JP::AdditionalDepreciationWithReserve:
            case AssetDepType_JP::SpecialDepreciationWithDirectOff:
            case AssetDepType_JP::SpecialDepreciationWithReserve:
                return AssetDepLimitType_JP::ExtraordinaryDepreciation;

            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>determinOverUnderType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines over under type by amount
    /// </summary>
    /// <param name="_amount">
    /// The amount
    /// </param>
    /// <returns>
    /// Returns over or under depreciation
    /// </returns>
    public static AssetDepPreTaxDeductionOverUnderType_JP determinOverUnderType(AssetAmount _amount)
    {
        AssetDepPreTaxDeductionOverUnderType_JP     ret;

        ret = (_amount >= 0)
            ? AssetDepPreTaxDeductionOverUnderType_JP::OverDepreciation
            : AssetDepPreTaxDeductionOverUnderType_JP::UnderDepreciation;

        return ret;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>