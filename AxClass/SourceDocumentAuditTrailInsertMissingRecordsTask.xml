<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SourceDocumentAuditTrailInsertMissingRecordsTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data maintenance task to insert missing audit trail records.
/// </summary>
internal final class SourceDocumentAuditTrailInsertMissingRecordsTask implements IDataMaintenanceTask
{
    #OCCRetryCount
    private int maxRecordsToFix;
    private DataMaintenanceTaskResult taskResult;
    private utcdatetime cutOffDate;
    private utcdatetime backOffDate;
    private utcdatetime currentDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceCaption caption()
    {
        return literalStr("@SourceDocumentAccountingFramework:AuditTrailRecoverMissingRecordsTaskCaption");
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceTaskResult run()
    {
        System.Exception ex;
        taskResult = DataMaintenanceTaskResult::construct();

        SourceDocumentParameters sourceDocParamFind = SourceDocumentParameters::find();
        int64 totalUpdatedRows = 0;

        maxRecordsToFix = SourceDocumentParameters::find().MissingAuditTrailDMTaskRecordsLimit;
        currentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        cutOffDate = DateTimeUtil::addDays(currentDate, -sourceDocParamFind.MissingAuditTrailDMActionNumOfPriorDaysToInclude);
        backOffDate = DateTimeUtil::addDays(currentDate, -sourceDocParamFind.MissingAuditTrailDMActionNumOfRecentDaysToExclude);

        using (SysInstrumentationActivityContext activityContext = this.getActivityContextForRun())
        {
            try
            {
                totalUpdatedRows += this.updateTransactionIdInGeneralJournalEntry(activityContext);
                totalUpdatedRows += this.updateTransactionIdInGeneralJournalAccountEntry(activityContext);
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (SysTransientSqlConnectionErrorHandler::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    activityContext.addCustomProperty(
                        SourceDocumentInstrumentationConstants::DataMaintenanceTaskFinishedWithError,
                        'TransientSqlConnectionError');
                    throw Exception::Error;
                }
            }
            catch(ex)
            {
                activityContext.addCustomProperty(
                    SourceDocumentInstrumentationConstants::DataMaintenanceTaskFinishedWithError,
                    any2Str(ex.ToString()));
                throw ex;
            }
        }
        taskResult.parmCount(totalUpdatedRows);

        return taskResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContextForRun</Name>
				<Source><![CDATA[
    private SysInstrumentationActivityContext getActivityContextForRun()
    {
        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(classStr(SourceDocumentAuditTrailInsertMissingRecordsTask),
            methodStr(SourceDocumentAuditTrailInsertMissingRecordsTask, run));
        SysInstrumentationLogger instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(classStr(SourceDocumentAuditTrailInsertMissingRecordsTask));
        
        return instrumentationLogger.activityContextWithCustomProperties(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeSQL</Name>
				<Source><![CDATA[
    private int64 executeSQL(str _sqlStatement, Map _sqlStatementParams)
    {
        Connection sessionConn = new Connection();
        int64 impactedRows;
        
        try
        {
            Statement statement = sessionConn.createStatement();
            new SqlStatementExecutePermission(_sqlStatement).assert();

            impactedRows = statement.executeUpdateWithParameters(_sqlStatement, _sqlStatementParams);

            statement.close();
            CodeAccessPermission::revertAssert();
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        finally
        {
            sessionConn.finalize();
        }

        return impactedRows;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransactionIdInGeneralJournalEntry</Name>
				<Source><![CDATA[
    internal int64 updateTransactionIdInGeneralJournalEntry(SysInstrumentationActivityContext _actvityContext = null)
    {
        int impactedRows = 0;

        str sqlStatement = @"UPDATE TOP (@maxRecordsToFix) T1
                                    SET CREATEDTRANSACTIONID = T3.CREATEDTRANSACTIONID
                                FROM GENERALJOURNALENTRY T1
                                JOIN SUBLEDGERVOUCHERGENERALJOURNALENTRY T2
                                    ON T2.PARTITION = @currentPartition
                                    AND T2.GENERALJOURNALENTRY = T1.RECID
                                JOIN SUBLEDGERJOURNALENTRY T3
                                    ON T3.PARTITION = @currentPartition
                                    AND T3.TRANSFERID = T2.TRANSFERID
                                    AND T3.RECID = T2.SUBLEDGERJOURNALENTRY
                                WHERE T1.PARTITION = @currentPartition
                                    AND T1.SUBLEDGERVOUCHER <> ''
                                    AND T1.CREATEDDATETIME >= @cutOffDate
                                    AND T1.CREATEDDATETIME < @backOffDate
                                    AND NOT EXISTS
                                        (SELECT NULL FROM TRANSACTIONLOG T4
                                            WHERE T4.PARTITION = @currentPartition
                                                AND T4.CREATEDTRANSACTIONID = T1.CREATEDTRANSACTIONID
                                                AND T4.DATAAREAID = T1.SUBLEDGERVOUCHERDATAAREAID
                                                AND T4.PARTITION = T1.PARTITION)";

        Map paramMap = SqlParams::create();
        paramMap.add('maxRecordsToFix', maxRecordsToFix);
        paramMap.add('currentPartition', getCurrentPartitionRecId());
        paramMap.add('cutOffDate', DateTimeUtil::toStr(cutOffDate));
        paramMap.add('backOffDate', DateTimeUtil::toStr(backOffDate));

        impactedRows = this.executeSQL(sqlStatement, paramMap);

        if (_actvityContext)
        {
            _actvityContext.addCustomProperty(
                SourceDocumentInstrumentationConstants::NumberOfRecordsUpdatedInGeneralJournalEntryForMissingAuditTrail,
                int2Str(impactedRows));
        }

        if (taskResult)
        {
            taskResult.addMessage(
                DataMaintenanceMessageContract::constructForLabel(Exception::Info,
                literalStr("@SourceDocumentAccountingFramework:AuditTrailGeneralJournalEntryUpdateInfoMessage"),
                [int2Str(impactedRows)]));
        }
    
        return impactedRows;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransactionIdInGeneralJournalAccountEntry</Name>
				<Source><![CDATA[
    internal int64 updateTransactionIdInGeneralJournalAccountEntry(SysInstrumentationActivityContext _actvityContext = null)
    {
        int impactedRows = 0;

        str sqlStatement = @"UPDATE TOP (@maxRecordsToFix) T1
                                    SET CREATEDTRANSACTIONID = T4.CREATEDTRANSACTIONID
                                FROM GENERALJOURNALACCOUNTENTRY T1
                                JOIN GENERALJOURNALENTRY T2
                                    ON T2.PARTITION = @currentPartition
                                    AND T2.RECID = T1.GENERALJOURNALENTRY
                                JOIN SUBLEDGERVOUCHERGENERALJOURNALENTRY T3
                                    ON T3.PARTITION = @currentPartition
                                    AND T3.GENERALJOURNALENTRY = T2.RECID
                                JOIN SUBLEDGERJOURNALENTRY T4
                                    ON T4.PARTITION = @currentPartition
                                    AND T4.RECID = T3.SUBLEDGERJOURNALENTRY
                                    AND T4.TRANSFERID = T3.TRANSFERID
                                WHERE T1.PARTITION = @currentPartition
                                    AND T2.CREATEDDATETIME >= @cutOffDate
                                    AND T2.CREATEDDATETIME < @backOffDate
                                    AND T2.SUBLEDGERVOUCHER <> ''
                                    AND NOT EXISTS
                                        (SELECT NULL FROM TRANSACTIONLOG T5
                                            WHERE T5.PARTITION = @currentPartition
                                                AND T5.CREATEDTRANSACTIONID = T1.CREATEDTRANSACTIONID
                                                AND T5.DATAAREAID = T2.SUBLEDGERVOUCHERDATAAREAID
                                                AND T5.PARTITION = T2.PARTITION)";

        Map paramMap = SqlParams::create();
        paramMap.add('maxRecordsToFix', maxRecordsToFix);
        paramMap.add('currentPartition', getCurrentPartitionRecId());
        paramMap.add('cutOffDate', DateTimeUtil::toStr(cutOffDate));
        paramMap.add('backOffDate', DateTimeUtil::toStr(backOffDate));

        impactedRows = this.executeSQL(sqlStatement, paramMap);

        if (_actvityContext)
        {
            _actvityContext.addCustomProperty(
                SourceDocumentInstrumentationConstants::NumberOfRecordsUpdatedInGeneralJournalAccountEntryForMissingAuditTrail,
                int2Str(impactedRows));
        }

        if (taskResult)
        {
            taskResult.addMessage(
                DataMaintenanceMessageContract::constructForLabel(Exception::Info,
                literalStr("@SourceDocumentAccountingFramework:AuditTrailGeneralJournalAccountEntryUpdateInfoMessage"),
                [int2Str(impactedRows)]));
        }
    
        return impactedRows;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>