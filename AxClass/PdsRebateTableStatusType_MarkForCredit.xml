<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsRebateTableStatusType_MarkForCredit</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class that holds the rebate processes specific to rebate with status 'MarkForCredit'.
/// </summary>
public class PdsRebateTableStatusType_MarkForCredit extends PdsRebateTableStatusType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ledgerPostingAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the rebate corrected amount.
    /// </summary>
    /// <returns>
    /// The corrected rebate amount.
    /// </returns>
    public Amount ledgerPostingAmount()
    {
        return pdsRebateTable.PdsCorrectedRebateAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsRebateStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the rebate status as 'MarkForCredit'.
    /// </summary>
    /// <returns>
    /// The rebate status.
    /// </returns>
    public PdsRebateStatus pdsRebateStatus()
    {
        return PdsRebateStatus::MarkForCredit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the rebate payment process.
    /// </summary>
    public void runPayment()
    {
        ttsBegin;

        pdsRebateTable.type().runPayment();

        if (pdsRebateTable.PdsRebateBalance == 0)
        {
            this.setFinalStatus();
        }
        else
        {
            pdsRebateTable.PdsRebateStatus = PdsRebateStatus::MarkForCredit;
        }

        pdsRebateTable.update();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverts the claims that have been accrued and deletes the claims.
    /// </summary>
    /// <exception cref="Exception::UpdateConflictNotRecovered">
    /// Update conflict is not recovered.
    /// </exception>
    /// <exception cref="Exception::UpdateConflict">
    /// update conflict is present.
    /// </exception>
    public void runCancel()
    {
        #OCCRetryCount

        try
        {
            ttsbegin;

            if (pdsRebateTable.PdsRebateBalance != 0)
            {
                // Reverse the ledger when there is a balance left
                pdsRebateTable.type().postLedgerReversal();
            }

            pdsRebateTable.PdsRebateStatus = PdsRebateStatus::Canceled;

            pdsRebateTable.update();

            ttsCommit;
        }
        catch (Exception::Error)
        {
            exceptionTextFallThrough();
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the class.
    /// </summary>
    /// <returns>
    /// A new class instance.
    /// </returns>
    public static PdsRebateTableStatusType_MarkForCredit construct()
    {
        return new PdsRebateTableStatusType_MarkForCredit();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>