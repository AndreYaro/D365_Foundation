<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvBIExpenseDashboardHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TrvBIExpenseDashboardHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildReportDrillThru</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribe to drillthrough events on specific sections and handle launching filtered forms.
    /// </summary>
    /// <param name = "_data">An object representing drillthrough data passed from the report.</param>
    [SubscribesTo(classstr(PowerBIReportControl), delegatestr(PowerBIReportControl, buildReportDrillThru))]
    public static void buildReportDrillThru(PBIReportSelectedData _data)
    {
        if (!_data)
        {
            return;
        }

        switch (_data.report().displayName())
        {
            case 'Expense Admin Dashboard':
            case 'Expense Personal Dashboard':
                TrvBIExpenseDashboardHandler handler = new TrvBIExpenseDashboardHandler();
                handler.currentPage(_data);
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentPage</Name>
				<Source><![CDATA[
    private void currentPage(PBIReportSelectedData _data)
    {
        switch (_data.page().displayName())
        {
            case 'Expense overview':
                this.expenseOverview(_data);
                break;
            case 'Employee statistics':
                this.employeeStatistics(_data);
                break;
            case 'My expenses':
                this.myExpenses(_data);
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>expenseOverview</Name>
				<Source><![CDATA[
    private void expenseOverview(PBIReportSelectedData _data)
    {
        switch (_data.visual().title())
        {
            case 'Expense report policy violations':
                this.runAdminMenuFunction(menuItemDisplayStr(TrvBIAdminDashboardExpenseReportsList), _data, TrvBIAdminExpenseGraphs::ExpenseReportPolicyViolations);
                break;
            case 'Expense report summaries':
                this.runAdminMenuFunction(menuItemDisplayStr(TrvBIAdminDashboardExpenseReportsList), _data, TrvBIAdminExpenseGraphs::ExpenseReportsSummaries);
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>employeeStatistics</Name>
				<Source><![CDATA[
    private void employeeStatistics(PBIReportSelectedData _data)
    {
        switch (_data.visual().title())
        {
            case 'Expense reports by cost type':
                this.runAdminMenuFunction(menuItemDisplayStr(TrvBIAdminDashboardExpenseReportsList), _data, TrvBIAdminExpenseGraphs::ExpenseReportsByCostType);
                break;
            case 'Personal expenses':
                this.runAdminMenuFunction(menuItemDisplayStr(TrvBIAdminDashboardExpenseReportsList), _data, TrvBIAdminExpenseGraphs::PersonalExpenses);
                break;
            case 'Expense reports by statistics group':
                this.runAdminMenuFunction(menuItemDisplayStr(TrvBIAdminDashboardExpenseReportsList), _data, TrvBIAdminExpenseGraphs::ExpenseReportsByStatisticsGroup);
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>myExpenses</Name>
				<Source><![CDATA[
    private void myExpenses(PBIReportSelectedData _data)
    {
        switch (_data.visual().title())
        {
            case 'Expense reports':
                this.runPersonalMenuFunction(menuItemDisplayStr(TrvBIPersonalDashboardExpenseReportsList), _data, TrvBIPersonalExpenseGraphs::ExpenseReports);
                break;
            case 'Submitted but unapproved expense reports':
                this.runPersonalMenuFunction(menuItemDisplayStr(TrvBIPersonalDashboardExpenseReportsList), _data, TrvBIPersonalExpenseGraphs::SubmittedButUnapprovedExpenseReports);
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runAdminMenuFunction</Name>
				<Source><![CDATA[
    private void runAdminMenuFunction(str _menuItem, Object _object, TrvBIAdminExpenseGraphs _graph)
    {
        Args args = new Args();
        args.parmObject(_object);
        args.parmEnumType(enumNum(TrvBIAdminExpenseGraphs));
        args.menuItemName(_menuItem);
        args.parmEnum(_graph);
        
        new MenuFunction(_menuItem, MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPersonalMenuFunction</Name>
				<Source><![CDATA[
    private void runPersonalMenuFunction(str _menuItem, Object _object, TrvBIPersonalExpenseGraphs _graph)
    {
        Args args = new Args();
        args.parmObject(_object);
        args.parmEnumType(enumNum(TrvBIPersonalExpenseGraphs));
        args.menuItemName(_menuItem);
        args.parmEnum(_graph);
        
        new MenuFunction(_menuItem, MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIdentityListValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the first value in the identity list from the <c>PowerBIReportSelectedData</c> object.
    /// </summary>
    /// <param name = "_data">An object representing drillthrough data passed from the report.</param>
    /// <param name = "idx">An integer representing the index of the value to return from the identities list.</param>
    /// <returns>The specified value of the identities list.</returns>
    public static str getIdentityListValue(PBIReportSelectedData _data, int idx)
    {
        ListIterator iterator = new ListIterator(_data.dataPoints());
        List identitiesList = iterator.value().identities();
        ListEnumerator enum = identitiesList.getEnumerator();

        for (int i = 0; i <= idx; i++)
        {
            enum.moveNext();
        }

        return enum.current().identityEquals();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the first field id in the identity list from the <c>PowerBIReportSelectedData</c> object.
    /// </summary>
    /// <param name = "_data">An object representing drillthrough data passed from the report.</param>
    /// <returns>The first field id of the identities list.</returns>
    public static str getFieldId(PBIReportSelectedData _data)
    {
        ListIterator iterator = new ListIterator(_data.dataPoints());
        List identitiesList = iterator.value().identities();
        ListEnumerator enum = identitiesList.getEnumerator();
        enum.moveNext();

        return enum.current().target().column();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryForAdminExpenses</Name>
				<Source><![CDATA[
    /// <summary>
    /// Append query restrictions based on the data in the <c>PBIReportSelectedData</c> object for the collection pools list page.
    /// </summary>
    /// <param name = "_query">The query to modify.</param>
    /// <param name = "_graph">The graph that is being acted on.</param>
    /// <param name = "_data">An object representing drillthrough data passed from the report.</param>
    ///
    public static void buildQueryForAdminExpenses(Query _query, TrvBIAdminExpenseGraphs _graph, PBIReportSelectedData _data)
    {
        switch (_graph)
        {
            case TrvBIAdminExpenseGraphs::ExpenseReportPolicyViolations:
                TrvBIExpenseDashboardHandler::queryExpenseReportsWithPolicyViolations(_query, _data);
                break;
            case TrvBIAdminExpenseGraphs::ExpenseReportsSummaries:
                TrvBIExpenseDashboardHandler::queryExpenseReportsSummaries(_query, _data);
                break;
            case TrvBIAdminExpenseGraphs::ExpenseReportsByCostType:
                TrvBIExpenseDashboardHandler::queryExpenseReportsByCostType(_query, _data);
                break;
            case TrvBIAdminExpenseGraphs::PersonalExpenses:
                TrvBIExpenseDashboardHandler::queryPersonalExpenses(_query, _data);
                break;
            case TrvBIAdminExpenseGraphs::ExpenseReportsByStatisticsGroup:
                TrvBIExpenseDashboardHandler::queryExpenseReportsByStatisticsGroup(_query, _data);
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryForPersonalExpenses</Name>
				<Source><![CDATA[
    public static void buildQueryForPersonalExpenses(Query _query, TrvBIPersonalExpenseGraphs _graph, PBIReportSelectedData _data)
    {
        switch (_graph)
        {
            case TrvBIPersonalExpenseGraphs::ExpenseReports:
                TrvBIExpenseDashboardHandler::queryPersonalExpenseReports(_query, _data);
                break;
            case TrvBIPersonalExpenseGraphs::SubmittedButUnapprovedExpenseReports:
                TrvBIExpenseDashboardHandler::querySubmittedButUnapprovedPersonalExpenseReports(_query, _data);
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryPersonalExpenseReports</Name>
				<Source><![CDATA[
    protected static void queryPersonalExpenseReports(Query _query, PBIReportSelectedData _data)
    {
        QueryBuildDataSource qbds = SysQuery::findOrCreateDataSource(_query, tableNum(TrvExpTableView));

        qbds.addRange(fieldNum(TrvExpTableView, ExpNumber))
            .value(SysQuery::value(TrvBIExpenseDashboardHandler::getIdentityListValue(_data, 0)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>querySubmittedButUnapprovedPersonalExpenseReports</Name>
				<Source><![CDATA[
    protected static void querySubmittedButUnapprovedPersonalExpenseReports(Query _query, PBIReportSelectedData _data)
    {
        QueryBuildDataSource qbds = SysQuery::findOrCreateDataSource(_query, tableNum(TrvExpTableView));

        qbds.addRange(fieldNum(TrvExpTableView, ExpNumber))
            .value(SysQuery::value(TrvBIExpenseDashboardHandler::getIdentityListValue(_data, 0)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryExpenseReportsWithPolicyViolations</Name>
				<Source><![CDATA[
    protected static void queryExpenseReportsWithPolicyViolations(Query _query, PBIReportSelectedData _data)
    {
        QueryBuildDataSource qbds = SysQuery::findOrCreateDataSource(_query, tableNum(TrvExpTable));

        qbds.addRange(fieldNum(TrvExpTable, ExpNumber))
            .value(SysQuery::value(TrvBIExpenseDashboardHandler::getIdentityListValue(_data, 0)));
        qbds.addRange(fieldNum(TrvExpTable, ReferenceDataAreaId))
            .value(SysQuery::value(TrvBIExpenseDashboardHandler::getIdentityListValue(_data, 3)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryExpenseReportsSummaries</Name>
				<Source><![CDATA[
    protected static void queryExpenseReportsSummaries(Query _query, PBIReportSelectedData _data)
    {
        QueryBuildDataSource qbds = SysQuery::findOrCreateDataSource(_query, tableNum(TrvExpTable));

        qbds.addRange(fieldNum(TrvExpTable, ExpNumber))
            .value(SysQuery::value(TrvBIExpenseDashboardHandler::getIdentityListValue(_data, 1)));
        qbds.addRange(fieldNum(TrvExpTable, ReferenceDataAreaId))
            .value(SysQuery::value(TrvBIExpenseDashboardHandler::getIdentityListValue(_data, 2)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryExpenseReportsByCostType</Name>
				<Source><![CDATA[
    protected static void queryExpenseReportsByCostType(Query _query, PBIReportSelectedData _data)
    {
        QueryBuildDataSource qbds = SysQuery::findOrCreateDataSource(_query, tableNum(TrvExpTable));

        qbds.addRange(fieldNum(TrvExpTable, ExpNumber))
            .value(SysQuery::value(TrvBIExpenseDashboardHandler::getIdentityListValue(_data, 0)));
        qbds.addRange(fieldNum(TrvExpTable, ReferenceDataAreaId))
            .value(SysQuery::value(TrvBIExpenseDashboardHandler::getIdentityListValue(_data, 4)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryPersonalExpenses</Name>
				<Source><![CDATA[
    protected static void queryPersonalExpenses(Query _query, PBIReportSelectedData _data)
    {
        QueryBuildDataSource qbds = SysQuery::findOrCreateDataSource(_query, tableNum(TrvExpTable));

        qbds.addRange(fieldNum(TrvExpTable, ExpNumber))
            .value(SysQuery::value(TrvBIExpenseDashboardHandler::getIdentityListValue(_data, 0)));
        qbds.addRange(fieldNum(TrvExpTable, ReferenceDataAreaId))
            .value(SysQuery::value(TrvBIExpenseDashboardHandler::getIdentityListValue(_data, 4)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryExpenseReportsByStatisticsGroup</Name>
				<Source><![CDATA[
    protected static void queryExpenseReportsByStatisticsGroup(Query _query, PBIReportSelectedData _data)
    {
        ListIterator iterator = new ListIterator(_data.dataPoints());
        List identitiesList = iterator.value().identities();

        QueryBuildDataSource qbds = SysQuery::findOrCreateDataSource(_query, tableNum(TrvExpTable));

        if (TrvBIExpenseDashboardHandler::getFieldId(_data) == "Legal Entity")
        {
            if (identitiesList.elements() == 2)
            {
                qbds.addRange(fieldNum(TrvExpTable, ExpNumber))
                    .value(SysQuery::value(TrvBIExpenseDashboardHandler::getIdentityListValue(_data, 1)));
            }

            qbds.addRange(fieldNum(TrvExpTable, ReferenceDataAreaId))
                .value(SysQuery::value(TrvBIExpenseDashboardHandler::getIdentityListValue(_data, 0)));
        }
        else
        {
            qbds.addRange(fieldNum(TrvExpTable, ExpNumber))
                    .value(SysQuery::value(TrvBIExpenseDashboardHandler::getIdentityListValue(_data, 0)));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>