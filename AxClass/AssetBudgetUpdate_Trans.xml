<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetBudgetUpdate_Trans</Name>
	<SourceCode>
		<Declaration><![CDATA[
class AssetBudgetUpdate_Trans extends AssetBudgetUpdate
{
    QueryBuildRange qbrBudgetTransactionLine_AssetBudget;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    protected Query buildQuery(Common _common)
    {
        AssetBudget             assetBudget = _common as AssetBudget;
        QueryBuildDataSource    qbds;

        Query query = new Query();

        qbds = query.addDataSource(tablenum(AssetBudget));

        qbds.addRange(fieldnum(AssetBudget, AssetId)).value(assetBudget.AssetId);
        qbds.addRange(fieldnum(AssetBudget, TransDate));
        qbds.addRange(fieldnum(AssetBudget, BudgetModel)).value(assetBudget.BudgetModel);
        qbds.addRange(fieldnum(AssetBudget, BookId)).value(assetBudget.BookId);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryExistingLedgerBudget</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds a query for the existing ledger budget transactions to be transferred.
    /// </summary>
    protected void buildQueryExistingLedgerBudget()
    {
        QueryBuildDataSource qbdsBudgetTransactionLine;
        QueryBuildDataSource qbdsBudgetTransactionLineReversed;
        QueryBuildDataSource qbdsBudgetTransactionLineReversing;
        QueryBuildDataSource qbdsBudgetTransactionHeader;

        DictRelation reversedLineRelation;
        DictRelation reversingLineRelation;

        // Initialize query
        queryExistingLedgerBudget = new Query();

        // Add BudgetTransactionLine to query for previously transferred budget transactions
        qbdsBudgetTransactionLine = queryExistingLedgerBudget.addDataSource(tablenum(BudgetTransactionLine));
        qbrBudgetTransactionLine_AssetBudget = qbdsBudgetTransactionLine.addRange(fieldnum(BudgetTransactionLine, AssetBudget));

        // Add BudgetTransactionLineReverse to query for previously transferred budget transactions to exclude reversed budget transactions
        qbdsBudgetTransactionLineReversed = qbdsBudgetTransactionLine.addDataSource(tablenum(BudgetTransactionLineReverse));
        reversedLineRelation = new DictRelation(tablenum(BudgetTransactionLineReverse), UtilElementType::Table, 1);
        reversedLineRelation.loadFieldRelation(fieldnum(BudgetTransactionLineReverse, ReversedBudgetTransactionLine));
        qbdsBudgetTransactionLineReversed.addRelation(reversedLineRelation);
        qbdsBudgetTransactionLineReversed.joinMode(JoinMode::NoExistsJoin);

        // Add BudgetTransactionLineReverse to query for previous transferred budget transactions to exclude reversed budget transactions
        qbdsBudgetTransactionLineReversing = qbdsBudgetTransactionLine.addDataSource(tablenum(BudgetTransactionLineReverse));
        reversingLineRelation = new DictRelation(tablenum(BudgetTransactionLineReverse), UtilElementType::Table, 2);
        reversingLineRelation.loadFieldRelation(fieldnum(BudgetTransactionLineReverse, ReversingBudgetTransactionLine));
        qbdsBudgetTransactionLineReversing.addRelation(reversingLineRelation);
        qbdsBudgetTransactionLineReversing.joinMode(JoinMode::NoExistsJoin);

        // Add BudgetTransactionHeader to query for previously transferred budget transactions
        qbdsBudgetTransactionHeader = qbdsBudgetTransactionLine.addDataSource(tablenum(BudgetTransactionHeader));
        qbdsBudgetTransactionHeader.relations(true);
        qbdsBudgetTransactionHeader.joinMode(JoinMode::ExistsJoin);

        // Restrict BudgetTransactionHeader to transaction type to Fixed Asset
        qbdsBudgetTransactionHeader.addRange(fieldnum(BudgetTransactionHeader, BudgetTransactionType)).value(int2str(enum2int(budgetTransactionTypeAsset)));

        // Add range on BudgetTransactionHeader to restrict results by TransactionStatus for validation stage & processing stage
        qbrBudgetTransactionHeader_TransactionStatus = qbdsBudgetTransactionHeader.addRange(fieldnum(BudgetTransactionHeader, TransactionStatus));
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirmDraftBudgetTransNoReverse</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prompts the user to confirm that the draft budget transactions related to the asset budget
    ///    transactions will not be reversed.
    /// </summary>
    /// <returns>
    ///    true if the user confirms the prompt; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The user is only prompted if the option to delete the existing budget transactions is marked and at
    ///    least one draft budget transaction is found.
    /// </remarks>
    protected boolean confirmDraftBudgetTransNoReverse()
    {
        boolean ok = true;
        QueryRun assetBudgetQueryRun;
        QueryRun transCannotReverseQueryRun;
        AssetBudget assetBudget;

        if (deleteExistingLedgerBudget == true)
        {
            // Check if any previously transferred budget transactions exist in an draft status

            // Initialize query for asset budget transactions to be transferred
            assetBudgetQueryRun = new QueryRun(queryRun.query());

            // Initialize query for finding existing related budget transactions
            if (queryExistingLedgerBudget == null)
            {
                this.buildQueryExistingLedgerBudget();

                // Set up range to restrict to draft budget transactions for validation
                qbrBudgetTransactionHeader_TransactionStatus.value(int2str(enum2int(BudgetTransactionStatus::Draft)));
            }

            while (assetBudgetQueryRun.next())
            {
                assetBudget = assetBudgetQueryRun.get(tablenum(AssetBudget)) as AssetBudget;

                // Set up ranges for existing related budget transactions for asset budget to be transferred
                qbrBudgetTransactionLine_AssetBudget.value(SysQuery::value(assetBudget.RecId));

                transCannotReverseQueryRun = new QueryRun(queryExistingLedgerBudget);

                if (transCannotReverseQueryRun.next())
                {
                    // Confirm OK that draft budget transactions will not be reversed
                    if (Box::yesNo(strfmt("@SYS132977", budgetTransactionTypeAsset), DialogButton::Yes) == DialogButton::No)
                    {
                        ok = false;
                    }

                    break;
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    /// created in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        Dialog  dialog = super();

        dialog.addGroup("@SYS127773");

        dialogDeleteExistingLedgerBudget = dialog.addFieldValue(extendedtypestr(NoYesId), deleteExistingLedgerBudget, "@SYS67819", "@SYS67820");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processExistingBudget</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes existing ledger budget transaction depending on the option selected by the user.
    /// </summary>
    /// <param name="_assetBudgetQuery">
    ///    A Query for the asset budget transactions to be transferred.
    /// </param>
    /// <remarks>
    ///    The existing ledger budget transactions are reversed.
    /// </remarks>
    protected void processExistingBudget(Query _assetBudgetQuery)
    {
        QueryRun assetBudgetQueryRun;
        AssetBudget assetBudget;

        QueryRun transToReverseQueryRun;
        BudgetTransactionLine budgetTransactionLine;

        BudgetTransactionReverseManager reversalManager;

        if (queryExistingLedgerBudget == null)
        {
            // Initialize query for existing budget transactions to be reversed
            this.buildQueryExistingLedgerBudget();
        }

        if (qbrBudgetTransactionHeader_TransactionStatus != null)
        {
            // Set up range to restrict to completed budget transactions for finding transactions to reverse
            qbrBudgetTransactionHeader_TransactionStatus.value(int2str(enum2int(BudgetTransactionStatus::Completed)));
        }

        // Initialize map for caching reversal managers
        reversalManagers = new Map(Types::String, Types::Class);

        assetBudgetQueryRun = new QueryRun(_assetBudgetQuery);

        while (assetBudgetQueryRun.next())
        {
            // Get the asset budget details
            assetBudget = assetBudgetQueryRun.get(tablenum(AssetBudget)) as AssetBudget;

            // Set up ranges for existing related budget transaction for asset budget
            qbrBudgetTransactionLine_AssetBudget.value(SysQuery::value(assetBudget.RecId));

            transToReverseQueryRun = new QueryRun(queryExistingLedgerBudget);

            // Query for budget transaction lines to reverse
            while (transToReverseQueryRun.next())
            {
                // Get reversal manager for budget model
                if (reversalManagers.exists(assetBudget.BudgetModel))
                {
                    reversalManager = reversalManagers.lookup(assetBudget.BudgetModel);
                }
                else
                {
                    reversalManager = BudgetTransactionReverseManager::construct(
                                        budgetTransactionCode.Name,
                                        assetBudget.BudgetModel);
                }

                budgetTransactionLine = transToReverseQueryRun.get(tablenum(BudgetTransactionLine));

                if (budgetTransactionLine.RecId != 0)
                {
                    // Add budget transaction line to reversal manager
                    reversalManager.addTransactionLineToReverse(budgetTransactionLine.RecId);

                    // Add reversal manager to cache
                    reversalManagers.insert(assetBudget.BudgetModel, reversalManager);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processExistingBudgetReversals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes existing ledger budget transaction reversals that were determined by the
    /// <c>processExistingBudget</c> method.
    /// </summary>
    /// <remarks>
    /// The reversals must be processed separately from the <c>processExistingBudget</c> method to ensure
    /// they are done outside the transfer transaction scope to ensure any budget funds available checks
    /// for the reversals are processed as confirmed.
    /// </remarks>
    protected void processExistingBudgetReversals()
    {
        BudgetTransactionReverseManager reversalManager;
        MapEnumerator reversalsToProcess;

        if (deleteExistingLedgerBudget && reversalManagers.elements() > 0)
        {
            reversalsToProcess = reversalManagers.getEnumerator();

            while (reversalsToProcess.moveNext())
            {
                reversalManager = reversalsToProcess.currentValue();
                reversalManager.reverseTransactionLines();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the <c>QueryRun</c> object, which is used by the <c>QueryPrompt</c>.
    /// </summary>
    /// <returns>
    ///    The <c>QueryRun</c> object, which is used by the <c>QueryPrompt</c>.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    ///    dialog. Do not instantiate the <c>queryRun</c> object whenever the method is called. This should be
    ///    done in the <c>unpack</c> method and the <c>initParmDefault</c> method. Or it should be used in the
    ///    <c>init</c> method, if this is used, or in the method only when it is not instantiated.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        AssetBudget         assetBudget;
        Counter             progressTotal;
        Counter             progressFailures;
        Counter progressSkipped;

        queryRun.query().dataSourceTable(tablenum(AssetBudget)).update(true);

        // Initialize budget transaction supporting objects
        this.initForBudgetTransaction();

        ttsbegin;

        if (deleteExistingLedgerBudget)
        {
            // Handle existing budget transactions needing to be reversed
            this.processExistingBudget(queryRun.query());
        }

        progressTotal = QueryRun::getQueryRowCount(queryRun.query(), intMax());

        this.progressInit("@SYS25781", progressTotal, #AviFormLetter);

        setprefix("@SYS76888");

        while (queryRun.next())
        {
            progress.incCount();

            assetBudget = queryRun.get(tablenum(AssetBudget)) as AssetBudget;

            if (this.isUpdateLedgerNeeded(assetBudget))
            {
                if (this.validateBudget(assetBudget))
                {
                    // Create budget transaction for asset budget ledger account & offset
                    this.createBudgetTransaction(assetBudget);

                    assetBudget.BudgetPostingStatus  = AssetBudgetPostingStatus::PostedToBudgets;
                    assetBudget.update();
                }
                else
                {
                    progressFailures++;
                }
            }
            else 
            {
                progressSkipped++;
            }
        }

        if (budgetTransactionPost != null)
        {
            // Update budget balances for transactions created
            budgetTransactionPost.runOperation();
        }

        ttscommit;

        // Process the reversals outside of the transfer tts to ensure any budget funds available checks
        // for the reversals are processed as confirmed.
        this.processExistingBudgetReversals();

        // Warn for dimension attributes not in active budget structure captured during processing
        if (budgetTransactionManager != null)
        {
            budgetTransactionManager.showWarningsDimAttsNotBudgetEnabled("@SYS300283");
        }

        info(strfmt("@SYS67578", progressTotal-progressFailures-progressSkipped));

        if (progressFailures)
        {
            info(strfmt("@SYS55199", progressFailures, progressTotal));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether to add a Select button to the dialog. If you change the return value to true,
    ///    the button will be added.
    /// </summary>
    /// <returns>
    ///    Returns false by default.
    /// </returns>
    /// <remarks>
    ///    If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    ///    return a valid <c>queryRun</c> value.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudget</Name>
				<Source><![CDATA[
    private boolean validateBudget(AssetBudget assetBudget)
    {
        boolean ret = true;

        setprefix(strfmt("@SYS76889", assetBudget.BudgetModel, date2StrUsr(assetBudget.TransDate, DateFlags::FormatAll)));

        if (assetBudget.LedgerDimension == 0)
        {
            ret = checkFailed("@SYS25989");
        }
        else if (assetBudget.OffsetLedgerDimension == 0)
        {
            ret = checkFailed("@SYS25236");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS76888";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>