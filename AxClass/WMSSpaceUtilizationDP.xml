<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsSpaceUtilizationDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>WMSSpaceUtilizationDP</c> class is the Report Data Provider class for the
///    <c>WMSSpaceUtilization</c> report.
/// </summary>
[SRSReportParameterAttribute(classStr(WMSSpaceUtilizationContract))]
public class WmsSpaceUtilizationDP extends SRSReportDataProviderBase
{
    WMSSpaceUtilizationContract localContract;
    WMSSpaceUtilizationTmp      wmsSpaceUtilizationTmp;

    List                        sites;
    List                        storageLoadUnits;
    WMSStorageLoadUnitType      storageLoadUnitType;
    RefRecId                    setupId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds the query to retrieve data from the <c>WMSSpaceUtilForecast</c>
    ///    staging table.
    /// </summary>
    /// <returns>
    ///    The query to retrieve report data.
    /// </returns>
    private Query buildQuery()
    {
        Query                   q;
        QueryBuildDataSource    qbd;
        QueryBuildRange         qbr;

        ListEnumerator          storageLoadUnitsEnum;

        q = new Query();
        qbd = q.addDataSource(tableNum(WMSSpaceUtilForecast));

        // Filter by date (today or in the future)
        qbr = qbd.addRange(fieldNum(WMSSpaceUtilForecast, TrackingDate));
        qbr.value(strFmt('(%1.%2 >= %3)',
                    qbd.name(),
                    fieldStr(WMSSpaceUtilForecast, TrackingDate),
                    date2StrXpp(this.todayDate())));

        // Filter by the storage load units
        qbr = qbd.addRange(fieldNum(WMSSpaceUtilForecast, wmsStorageLoadUnit));
        storageLoadUnitsEnum = storageLoadUnits.getEnumerator();
        while (storageLoadUnitsEnum.moveNext())
        {
            qbr.value(queryRangeConcat(qbr.value(), storageLoadUnitsEnum.current()));
        }

        // Filter by setup
        qbr = qbd.addRange(fieldNum(WMSSpaceUtilForecast, wmsReportSetup));
        qbr.value(queryValue(setupId));

        return q;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillInconsistenciesField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides logic for filling in the load units in the inconsistencies table.
    /// </summary>
    private void fillInconsistenciesField()
    {
        WMSSpaceUtilInconsistencies     wmsSpaceUtilInconsistencies;
        Set     unitsWithInconsistencies = new Set(Types::Int64);
        Set     sitesWithInconsistencies = new Set(Types::String);

        if (localContract.parmShowBy() == WMSSpaceUtilShowBy::Site)
        {
            // get all the item inconsistencies on site level (not load unit identified)
            while select InventSiteId from wmsSpaceUtilInconsistencies
                group by wmsSpaceUtilInconsistencies.InventSiteId
                where wmsSpaceUtilInconsistencies.wmsStorageLoadUnit == 0
                      && wmsSpaceUtilInconsistencies.wmsReportSetup  == setupId
                      && (wmsSpaceUtilInconsistencies.InconsistencyType    == WMSSpaceUtilInconsistencyType::DefaultWarehouse
                          || wmsSpaceUtilInconsistencies.InconsistencyType == WMSSpaceUtilInconsistencyType::WarehouseItemSetup)

            {
                sitesWithInconsistencies.add(wmsSpaceUtilInconsistencies.InventSiteId);
            }
        }

        // Build the map with the load unit-specific inconsistencies contained
        while select wmsSpaceUtilizationTmp
            group by wmsSpaceUtilizationTmp.wmsStorageLoadUnit
        {
            select firstonly RecId from wmsSpaceUtilInconsistencies
                where wmsSpaceUtilInconsistencies.wmsStorageLoadUnit == wmsSpaceUtilizationTmp.wmsStorageLoadUnit
                      && wmsSpaceUtilInconsistencies.wmsReportSetup  == setupId;

            if (wmsSpaceUtilInconsistencies.RecId)
            {
                unitsWithInconsistencies.add(wmsSpaceUtilizationTmp.wmsStorageLoadUnit);
            }
        }

        // Apply the values to the records
        while select forupdate wmsSpaceUtilizationTmp
        {
            wmsSpaceUtilizationTmp.Inconsistencies =
                    sitesWithInconsistencies.in(wmsSpaceUtilizationTmp.InventSiteId)
                ||  unitsWithInconsistencies.in(wmsSpaceUtilizationTmp.wmsStorageLoadUnit)? 1 : 0;
            wmsSpaceUtilizationTmp.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillUnitsInSiteField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the <c>UnitsInSite</c> field in once the rest of the columns of the
    /// <c>WMSSpaceUtilizationTmp</c> table are filled.
    /// </summary>
    /// <remarks>
    /// The <c>UnitsInSite</c> field contains a list of storage load unit names that belong to the same
    /// site to which the current record does.
    /// </remarks>
    private void fillUnitsInSiteField()
    {
        Map     unitsBySite = new Map(Types::String, Types::String);
        str     units;
        #define.separator(',')

        // Build the map with the units contained in each site based on the content
        // of the table
        while select wmsSpaceUtilizationTmp
            group by wmsSpaceUtilizationTmp.InventSiteId,
                     wmsSpaceUtilizationTmp.wmsStorageLoadUnit
        {
            if (unitsBySite.exists(wmsSpaceUtilizationTmp.InventSiteId))
            {
                units = unitsBySite.lookup(wmsSpaceUtilizationTmp.InventSiteId) + #separator + int642str(wmsSpaceUtilizationTmp.wmsStorageLoadUnit);
            }
            else
            {
                units = int642str(wmsSpaceUtilizationTmp.wmsStorageLoadUnit);
            }
            unitsBySite.insert(wmsSpaceUtilizationTmp.InventSiteId,units);
        }

        // Fill the UnitsInSite with all the units per site found on the table
        while select forupdate wmsSpaceUtilizationTmp
        {
            wmsSpaceUtilizationTmp.UnitsInSite = unitsBySite.lookup(wmsSpaceUtilizationTmp.InventSiteId);
            wmsSpaceUtilizationTmp.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWMSSpaceUtilizationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches data from the <c>WMSSpaceUtilizationTmp</c> table
    /// </summary>
    /// <returns>
    /// The data from the <c>WMSSpaceUtilizationTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(WMSSpaceUtilizationTmp))
    ]
    public WMSSpaceUtilizationTmp getWMSSpaceUtilizationTmp()
    {
        select wmsSpaceUtilizationTmp;
        return wmsSpaceUtilizationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the parameters for processing the report.
    /// </summary>
    private void initializeParameters()
    {
        localContract       = this.parmDataContract() as WMSSpaceUtilizationContract;

        sites               = localContract.parmSites();
        storageLoadUnits    = localContract.parmStorageLoadUnits();
        storageLoadUnitType = localContract.parmStorageLoadUnitType();
        setupId             = localContract.parmWMSReportSetup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a line of data in the table.
    /// </summary>
    /// <param name="_date">
    /// The tracking date field.
    /// </param>
    /// <param name="_inventSiteId">
    /// The site ID field.
    /// </param>
    /// <param name="_inventSiteName">
    /// The site name field.
    /// </param>
    /// <param name="_unitRecId">
    /// The storage load unit record ID field.
    /// </param>
    /// <param name="_unitName">
    /// The storage load unit name field.
    /// </param>
    /// <param name="_currentSpace">
    /// The current space in use field.
    /// </param>
    /// <param name="_maxSpace">
    /// The maximum space field.
    /// </param>
    /// <param name="_spaceUtilization">
    /// The space utilization percentage field.
    /// </param>
    /// <param name="_overloaded">
    /// A flag that specifies whether the unit is overloaded for the date.
    /// </param>
    /// <param name="_hasBacklog">
    /// A flag that specifies whether the respective unit or site has backlog.
    /// </param>
    private void insertData(date _date,
                            InventSiteId _inventSiteId,
                            InventSiteName _inventSiteName,
                            RecId _unitRecId,
                            Name _unitName,
                            real _currentSpace,
                            real _maxSpace,
                            real _spaceUtilization,
                            boolean _overloaded,
                            boolean _hasBacklog)
    {
        wmsSpaceUtilizationTmp.clear();
        wmsSpaceUtilizationTmp.TrackingDate         = _date;
        wmsSpaceUtilizationTmp.InventSiteId         = _inventSiteId;
        wmsSpaceUtilizationTmp.SiteName             = _inventSiteName;
        wmsSpaceUtilizationTmp.wmsStorageLoadUnit   = _unitRecId;
        wmsSpaceUtilizationTmp.UnitName             = _unitName;
        wmsSpaceUtilizationTmp.CurrentSpace         = _currentSpace;
        wmsSpaceUtilizationTmp.MaxSpace             = _maxSpace;
        wmsSpaceUtilizationTmp.SpaceUtilization     = _spaceUtilization;
        wmsSpaceUtilizationTmp.IsOverloaded         = _overloaded ? NoYes::Yes : NoYes::No;
        wmsSpaceUtilizationTmp.HasBacklog           = _hasBacklog ? 1 : 0;

        wmsSpaceUtilizationTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic by obtaining records from the <c>WMSSpaceUtilForecast</c> table
    /// as required for the report into the <c>WmsSpaceUtilizationTmp</c> table.
    /// </summary>
    public void processReport()
    {
        WMSSpaceUtilForecast    wmsSpaceUtilForecast;
        PercentPositive         spaceUtilization;
        NoYes                   isOverloaded;
        InventSiteName          inventSiteName;
        Name                    wmsStorageLoadUnitName;
        QueryRun                qr;
        boolean                 addBacklog;
        real                    currentSpace;
        real                    maxSpace;

        this.initializeParameters();

        qr = new QueryRun(this.buildQuery());

        addBacklog = this.shouldAddBacklog();

        ttsbegin;

        while (qr.next())
        {
            wmsSpaceUtilForecast = qr.get(tableNum(WMSSpaceUtilForecast));

            switch (storageLoadUnitType)
            {
                case WMSStorageLoadUnitType::Pallet:
                    currentSpace = wmsSpaceUtilForecast.CurrentPalletCount;
                    maxSpace     = wmsSpaceUtilForecast.MaxPalletCount;
                    isOverloaded = wmsSpaceUtilForecast.IsFullPalletLoad;
                    break;

                case WMSStorageLoadUnitType::Volume:
                    currentSpace = wmsSpaceUtilForecast.CurrentVolume;
                    maxSpace     = wmsSpaceUtilForecast.MaxVolume;
                    isOverloaded = wmsSpaceUtilForecast.IsFullVolumeLoad;
                    break;

                case WMSStorageLoadUnitType::Weight:
                    currentSpace = wmsSpaceUtilForecast.CurrentWeight;
                    maxSpace     = wmsSpaceUtilForecast.MaxWeight;
                    isOverloaded = wmsSpaceUtilForecast.IsFullWeightLoad;
                    break;

                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }

            spaceUtilization = maxSpace ? currentSpace/maxSpace : 0;

            inventSiteName = InventSite::find(wmsSpaceUtilForecast.InventSiteId).Name;
            wmsStorageLoadUnitName = WMSStorageLoadUnit::find(wmsSpaceUtilForecast.wmsStorageLoadUnit).Name;

            this.insertData(wmsSpaceUtilForecast.TrackingDate,
                            wmsSpaceUtilForecast.InventSiteId,
                            inventSiteName,
                            wmsSpaceUtilForecast.wmsStorageLoadUnit,
                            wmsStorageLoadUnitName,
                            currentSpace,
                            maxSpace,
                            spaceUtilization,
                            isOverloaded,
                            addBacklog && wmsSpaceUtilForecast.HasBacklog);
        }

        this.fillUnitsInSiteField();
        this.fillInconsistenciesField();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldAddBacklog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether backlog indication should be added to the data.
    /// </summary>
    /// <returns>
    /// true if backlog indication should be added; otherwise, false.
    /// </returns>
    private boolean shouldAddBacklog()
    {
        WMSSpaceUtilizationRun  run;
        TransDate               lastRunDate;

        // Get last run date
        run = WMSSpaceUtilizationRun::lastRun(setupId);
        if (run)
        {
            lastRunDate = DateTimeUtil::date(
                DateTimeUtil::applyTimeZoneOffset(
                    run.LastRun,
                    WMSReportSetup::getCompanyTimezone()));
        }

        return lastRunDate == this.todayDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>todayDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the current date adapted to the report setup timezone.
    /// </summary>
    /// <returns>
    /// The current date adapted to the report setup timezone.
    /// </returns>
    protected TransDate todayDate()
    {
        return WMSReportSetup::getCompanyTodayDate();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
