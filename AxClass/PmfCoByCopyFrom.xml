<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfCoByCopyFrom</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Base class that provides the source for formula Co/By products when copying a formula.
/// </summary>
/// <remarks>
/// Concrete implementations should be retrieved from the construct static
/// constructor in this class.
/// </remarks>
abstract public class PmfCoByCopyFrom
{
    PmfCoByCopyTo     copyTo;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bomId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the id of the production BOM (process Formula) for this copy source.
    /// </summary>
    /// <returns>Production BOMid for this copy source.</returns>
    public abstract BOMId bomId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>copy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to loop thru the source co/by and send them to the destination.
    /// </summary>
    public abstract void copy()
    {
        #if.never
        ttsbegin;

        // Copy

        ttscommit;
        #endif
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete the items in the destination.
    /// </summary>
    /// <param name="_copyJob">Instance of the job object that owns this copy source.</param>
    /// <remarks>
    /// The base method implementation delegates the delete operation to the copy
    /// destination object (the 'to').
    /// </remarks>
    public void delete(BOMRouteCopyJob _copyJob)
    {
        copyTo.delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initToPmfFormulaCoBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the source from information stored in the destination formula record.
    /// </summary>
    /// <param name="_toFormulaCoBy">Destination record to be written.</param>
    /// <param name="_inventDim">InventDim for the destination.</param>
    /// <param name="_inventTable">InventTable for the destination.</param>
    /// <remarks>
    /// The base implementation does nothing.
    /// </remarks>
    public abstract void initToPmfFormulaCoBy(
        PmfFormulaCoBy          _toFormulaCoBy,
        InventDim               _inventDim,
        InventTable             _inventTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initToPmfProdCoBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the source from information stored in the destination production Co/By record.
    /// </summary>
    /// <param name="_toPmfProdCoBy">Destination production Co/By record to be written.</param>
    /// <param name="_copyRef">Specify if the document references should also be copied to the destination.</param>
    /// <remarks>
    /// The base implementation does nothing.
    /// </remarks>
    public abstract void initToPmfProdCoBy(
        PmfProdCoBy         _toPmfProdCoBy,
        boolean             _copyRef = false)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Standard protected new.
    /// </summary>
    /// <param name="_copyTo">Destination copy object that this source will send records to.</param>
    protected void new(PmfCoByCopyTo _copyTo)
    {
        copyTo  = _copyTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Static constructor used to create an appropriate instance of a Co/By copy source object based on the destination and search types.
    /// </summary>
    /// <param name="_copyTo">Co/By copy destination object as selected by the user.</param>
    /// <param name="_search">Co/By search object as selected by the user.</param>
    /// <returns>Instance of a Co/By copy source for the type of copy.</returns>
    public static PmfCoByCopyFrom construct(
        PmfCoByCopyTo         _copyTo,
        PmfCoBySearchBase     _search
        )
    {
        classId classId = classidget(_search);

        switch (true)
        {
            case SysDictClass::isEqualOrSuperclass(
                    classId,
                    classnum(PmfCoBySearch)):
                return PmfCoByCopyFromFormula::construct(_copyTo,_search);
            case SysDictClass::isEqualOrSuperclass(
                    classId,
                    classnum(PmfProdCoBySearch)):
                return PmfCoByCopyFromProd::construct(_copyTo,_search);
        }

        throw error(Error::wrongUseOfFunction(funcname()));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>