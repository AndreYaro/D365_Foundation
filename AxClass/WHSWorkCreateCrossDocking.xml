<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkCreateCrossDocking</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class contains logic for the advanced cross docking work creation process.
/// </summary>
internal final class WHSWorkCreateCrossDocking extends WhsWorkCreate
{
    private WHSLoadLine          loadLine;
    private WHSWorkCreateId      workCreateId;
    private InventQty            crossDockQty;
    private InventTransType      sourceTransType;
    private InventDim			 registeredInventDim;
    private WHSCrossDockTemplate crossDockTemplate;
    private WHSCrossDockLoadLine crossDockLoadLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createLoadForShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a load for the shipment if it currently doesn't have a load.
    /// </summary>
    private void createLoadForShipment()
    {
        if (!loadLine.LoadId)
        {
            WHSShipmentTable shipment = WHSShipmentTable::find(loadLine.ShipmentId);

            if (shipment.RecId != 0)
            {
                WHSLoadId newLoadId = shipment.createNewLoad();
                shipment.transferShipment(newLoadId);

                // Reread the loadline because it has been updated.
                loadLine.reread();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRemainingWorkOrderLineLoadLineReference</Name>
				<Source><![CDATA[
    protected final WHSWorkOrderLineInterface initRemainingWorkOrderLineLoadLineReference(
        LineNum			            _lineCounter,
        WHSTmpWorkLine	            _tmpWorkLine,
        WHSWorkOrderLineInterface   _workOrderLineInterface)
    {
        WHSWorkOrderLineInterface workOrderLineInterface = _workOrderLineInterface;

        if (_lineCounter == 1
            && _tmpWorkLine.WorkTransType == WHSWorkTransType::CrossDocking
            && crossDockLoadLine.LoadLineRecId)
        {
            workOrderLineInterface.parmLoadLineRefRecId(crossDockLoadLine.LoadLineRecId);
        }
        else if (_tmpWorkline.WorkTransType == WHSWorkTransType::CrossDocking)
        {
            workOrderLineInterface.parmLoadLineRefRecId(0);
        }
            
        workOrderLineInterface.parmInventTransOriginIdSupply(_tmpWorkLine.InventTransOriginIdSupply);

        return workOrderLineInterface;
    }

]]></Source>
			</Method>
			<Method>
				<Name>locationFromMimicWork</Name>
				<Source><![CDATA[
	[Hookable(false)]
	protected final void locationFromMimicWork(WHSTmpWorkLine _tmpWorkLine)
    {
        if (crossDockTemplate.RecId
			&& crossDockTemplate.LocatingType == WHSCrossDockLocatingType::Shipment
			&& WMSLocation::find(locationId, _tmpWorkLine.InventLocationId).whsLocationType() == WHSParameters::find().StageLocType)
        {
            WHSWorkId mimicWorkId = this.findActiveShipmentWork(_tmpWorkLine.ShipmentId);

            if (mimicWorkId)
            {
                WMSLocationId tmpStageLocationId = WHSWorkTable::getFirstStageLocation(mimicWorkId);

                if (tmpStageLocationId)
                {
                    locationId = tmpStageLocationId;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActiveShipmentWork</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected final WHSWorkId findActiveShipmentWork(WHSShipmentId _shipmentId)
    {
        WHSWorkTable    workTable;
        WHSWorkLine     workline;
        
        // Find work header for the shipment that has been processed the most.
        select firstOnly WorkId from workTable
            order by workTable.WorkStatus desc
            exists join workLine
                where workTable.WorkId      == workLine.WorkId
                &&    workTable.WorkStatus  <= WHSWorkStatus::Closed
                &&    workLine.ShipmentId   == _shipmentId;
        
        return workTable.WorkId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTempTable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void createTempTable()
    {
        ttsbegin;
    
        workInventDim.data(this.parmRegisteredInventDim());
    
        // Use default finished good location for production orders
        if (!startLocationId 
            && sourceTransType == InventTransType::Production)
        {
            startLocationId = workInventDim.inventLocation().DefaultProductionFinishGoodsLocation;
        }
        else if (!startLocationId) // Use default receipt location for purchase order and transfer orders
        {
            startLocationId = workInventDim.inventLocation().WMSLocationIdDefaultReceipt;
        }
    
        this.createLoadForShipment();

        tmpWorkLine.WorkType                        = WHSWorkType::Put;
        tmpWorkLine.OriginType                      = WHSOriginType::Load;
        tmpWorkLine.OriginRefId                     = loadLine.LoadId;
        tmpWorkLine.WorkCreateId                    = workCreateId;
        tmpWorkLine.WorkTransType                   = WHSWorkTransType::CrossDocking;
        tmpWorkLine.InventTransId                   = loadLine.InventTransId;
        tmpWorkLine.ItemId                          = loadLine.ItemId;
        tmpWorkLine.InventLocationId                = workInventDim.InventLocationId;
        tmpWorkLine.InventBatchId                   = workInventDim.inventBatchId;
        tmpWorkLine.RefTableId                      = tableNum(WHSLoadLine);
        tmpWorkLine.RefRecId                        = loadLine.RecId;
        tmpWorkLine.OrderNum                        = loadLine.OrderNum;
        tmpWorkLine.StartLocationId                 = startLocationId;
        tmpWorkLine.LoadId                          = loadLine.LoadId;
        tmpWorkLine.ShipmentId                      = loadLine.ShipmentId;
        tmpWorkLine.InventTransOriginIdSupply       = crossDockLoadLine.InventTransOriginIdSupply;
        tmpWorkLine.CustVendAC                      = loadLine.displayCustAccount();

        this.setLocationDirectiveHintCode();

        this.setGlobals();
    
        this.createTempLine(tmpWorkLine, crossDockQty);
    
        // Find and use the final ship location of normal sales work for the shipment.
        if (crossDockTemplate.LocatingType == WHSCrossDockLocatingType::Shipment
            && WMSLocation::find(tmpWorkLine.WMSLocationId, tmpWorkLine.InventLocationId).whsLocationType() == WHSParameters::find().ShipFinalLocType)
        {
            // Find a work header to mimic from the shipment.
            // If we don't find a work then default to locationd directive style
            WHSWorkId mimicWorkId = this.findActiveShipmentWork(loadLine.ShipmentId);

            if (mimicWorkId)
            {
                WHSWorkLine workLine = WHSWorkTable::getLastWorkLine(mimicWorkId);

                if (workLine.WMSLocationId)
                {
                    select firstOnly forupdate tmpWorkline
                        where tmpWorkLine.WorkCreateId == workCreateId;
    
                    if (tmpWorkline.RecId > 0)
                    {
                        tmpWorkLine.WMSLocationId = workLine.WMSLocationId;
                        tmpWorkLine.update();
                    }
                }
            }
        }
    
        loadLine = WHSLoadLine::findbyRecId(loadLine.RecId, true);
    
        loadLine.WorkCreatedQty += this.parmWorkCreatedQty();
        loadLine.update();
    
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLocationDirectiveHintCode</Name>
				<Source><![CDATA[
    private void setLocationDirectiveHintCode()
    {
        WHSLocDirHintCode locationDirectiveHintCode;        
        
        if (crossDockTemplate.LocationDirectiveHintCode)
        {
            locationDirectiveHintCode = crossDockTemplate.LocationDirectiveHintCode;
        }
    
        if (!locationDirectiveHintCode && crossDockTemplate.WorkTemplateCode)
        {
            // Fallback to setting the location directive code from the work template line.
            locationDirectiveHintCode = (select LocDirHintCode from WHSWorkTemplateLine
                                            order by LineNum desc
                                            where WHSWorkTemplateLine.WorkTemplateCode == crossDockTemplate.WorkTemplateCode).LocDirHintCode;
        }

        if (locationDirectiveHintCode)
        {
            this.parmLocDirHintCode(locationDirectiveHintCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(
        Common          _common, 
        WHSWorkCreateId _workCreateId)
    {
        loadLine = _common;
    
        workCreateId = _workCreateId ? _workCreateId : NumberSeq::newGetNum(WHSParameters::numRefWHSWorkCreateId()).num();
    
        super(loadLine, workCreateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParms</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize a new <c>WHSWorkCreateCrossDocking</c> class.
    /// </summary>
    /// <param name = "_common">The record to use during initialization.</param>
    /// <param name = "_workCreateId">The Work Create Id.</param>
    /// <returns>An instance of the <c>WHSWorkCreateCrossDocking</c> class.</returns>
    [Hookable(false)]
    internal static WHSWorkCreateCrossDocking newFromParms(
        Common          _common,
        WHSWorkCreateId _workCreateId)
    {
        return new WHSWorkCreateCrossDocking(_common, _workCreateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreateWorkInventTransWithTargetLP</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean parmCreateWorkInventTransWithTargetLP(boolean _createWorkInventTransWithTargetLP = createWorkInventTransWithTargetLP)
    {
        // We always want to reserve at the lp level for cross docking work.
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCrossDockingQuantity</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventQty parmCrossDockingQuantity(InventQty _crossDockQty = crossDockQty)
    {
        crossDockQty = _crossDockQty;
    
        return crossDockQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceTransType</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventTransType parmSourceTransType(InventTransType _sourceTransType = sourceTransType)
    {
        sourceTransType = _sourceTransType;
    
        return sourceTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkCreateId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSWorkCreateId parmWorkCreateId(WHSWorkCreateId _workCreateId = workCreateId)
    {
        workCreateId = _workCreateId;
    
        return workCreateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRegisteredInventDim</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventDim parmRegisteredInventDim(InventDim _registeredInventDim = registeredInventDim)
    {
        registeredInventDim = _registeredInventDim;
        
        return registeredInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCrossDockLoadLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSCrossDockLoadLine parmCrossDockLoadLine(WHSCrossDockLoadLine _crossDockLoadLine = crossDockLoadLine)
    {
        crossDockLoadLine = _crossDockLoadLine;
        
        return crossDockLoadLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCrossDockTemplate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSCrossDockTemplate parmCrossDockTemplate(WHSCrossDockTemplate _crossDockTemplate = crossDockTemplate)
    {
        crossDockTemplate = _crossDockTemplate;
        
        return crossDockTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeWorkOrderInterfaceFromTmpWorkLine</Name>
				<Source><![CDATA[
    protected final WHSWorkOrderInterface initializeWorkOrderInterfaceFromTmpWorkLine(WHSWorkTemplateTable _workTemplateTable)
    {
        WHSWorkOrderInterface workOrderInterface = super(_workTemplateTable);

        if (workOrderInterface.parmWorkTransType() == WHSWorkTransType::CrossDocking)
        {
            workOrderInterface.parmTargetLicensePlateId(registeredInventDim.LicensePlateId);
        }

        return workOrderInterface;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>