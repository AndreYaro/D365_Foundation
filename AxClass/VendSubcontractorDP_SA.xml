<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendSubcontractorDP_SA</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendSubcontractorDP_SA</c> class is the Report Data Provider class that supports the
/// <c>VendSubcontractor_SA</c> report.
/// </summary>
/// <remarks>
/// This class provides the methods that are used by the <c>VendSubcontractor_SA</c> report.
/// </remarks>
[
    SRSReportParameterAttribute(classstr(LedgerZakatReportContract_SA))
]
public class VendSubcontractorDP_SA extends SRSReportDataProviderBase
{
    // source of report data
    GeneralJournalAccountEntryZakat_SA      generalJournalAccountEntryZakat;
    VendInfoZakat_SA                        vendInfoZakat;
    VendTable                               vendTable;

    // temporary data store
    VendSubcontractorZakatTmp_SA            vendSubcontractorTmp;

    // Report parameters
    LedgerFiscalYearZakat_SA                fiscalYear;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate total transaction amount.
    /// </summary>
    /// <returns>
    /// The total transaction amount.
    /// </returns>
    private AmountCur amountCur()
    {
        GeneralJournalAccountEntryZakat_SA  generalJournalAccountEntryZakatLoc;
        GeneralJournalAccountEntry          generalJournalAccountEntryLoc;
        LedgerItemCodeZakat_SA              ledgerItemCodeLoc;

        select sum(TransactionCurrencyAmount)
            from generalJournalAccountEntryLoc
            join GeneralJournalAccountEntry, Subcontractor, PeriodCode, FiscalYr, ItemCode  from generalJournalAccountEntryZakatLoc
                where generalJournalAccountEntryZakatLoc.GeneralJournalAccountEntry == generalJournalAccountEntryLoc.RecId
                   && generalJournalAccountEntryZakatLoc.Subcontractor == vendInfoZakat.RecId
                   && generalJournalAccountEntryZakatLoc.PeriodCode    == FiscalPeriodType::Operating
                   && generalJournalAccountEntryZakatLoc.FiscalYr      == fiscalYear
                   && generalJournalAccountEntryZakatLoc.ItemCode      != ''
            join ItemType from ledgerItemCodeLoc
                where ledgerItemCodeLoc.ItemCode == generalJournalAccountEntryZakatLoc.ItemCode
                   && ledgerItemCodeLoc.ItemType == LedgerItemTypeZakat_SA::SubContractor;

        return generalJournalAccountEntryLoc.TransactionCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contractValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate total contract value.
    /// </summary>
    /// <returns>
    /// The total contract value.
    /// </returns>
    private AmountCur contractValue()
    {
        VendContractZakat_SA    vendContracts;

        select sum(Amount)
            from  vendContracts
                where vendContracts.VendAccount == vendTable.AccountNum;

        return vendContracts.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpVendSubcontractor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Queries the <c>VendSubcontractorZakatTmp_SA</c> table and returns the data table.
    /// </summary>
    /// <returns>
    /// The required report data table.
    /// </returns>
    [SRSReportDataSetAttribute('VendSubcontractorZakatTmp_SA')]
    public VendSubcontractorZakatTmp_SA getTmpVendSubcontractor()
    {
        select * from vendSubcontractorTmp;
        return vendSubcontractorTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSubcontractVendorsZakatTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the temporary table.
    /// </summary>
    public void insertSubcontractVendorsZakatTmp()
    {
        vendInfoZakat = VendInfoZakat_SA::find(generalJournalAccountEntryZakat.Subcontractor);
        vendTable = VendTable::find(vendInfoZakat.VendAccount);

        // write the relevant field data to the temporary data store
        vendSubcontractorTmp.Name               = vendTable.name();
        vendSubcontractorTmp.Address            = vendTable.postalAddress().Address;
        vendSubcontractorTmp.FileNumber         = vendInfoZakat.FileNumber;
        vendSubcontractorTmp.OrgNumber          = vendTable.OrganizationNumber();
        vendSubcontractorTmp.ContractValue      = this.contractValue();
        vendSubcontractorTmp.Amount             = this.amountCur();
        vendSubcontractorTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// This method is used to process the report business logic, which is used by the
    /// <c>VendSubcontractor_SA</c> report.
    /// </remarks>
    public void processReport()
    {
        LedgerItemCodeZakat_SA ledgerItemCode;

        // access the Report Data Contract information
        LedgerZakatReportContract_SA contract = this.parmDataContract() as LedgerZakatReportContract_SA;

        // retrieve the contract control parameters
        fiscalYear = contract.parmFiscalYear();

        while select generalJournalAccountEntryZakat
            group by Subcontractor
            where generalJournalAccountEntryZakat.FiscalYr == fiscalYear
            join ItemCode, ItemType from ledgerItemCode
                where ledgerItemCode.ItemCode == generalJournalAccountEntryZakat.ItemCode &&
                      ledgerItemCode.ItemType == LedgerItemTypeZakat_SA::SubContractor
        {
            // insert a record into the temporary table buffer
            this.insertSubcontractVendorsZakatTmp();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
