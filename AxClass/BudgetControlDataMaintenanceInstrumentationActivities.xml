<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlDataMaintenanceInstrumentationActivities</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class BudgetControlDataMaintenanceInstrumentationActivities
{
    private BudgetControlInstrumentationLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(BudgetControlInstrumentationLogger _logger)
    {
        logger = _logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLogger</Name>
				<Source><![CDATA[
    internal static BudgetControlDataMaintenanceInstrumentationActivities newFromLogger(BudgetControlInstrumentationLogger _logger)
    {
        return new BudgetControlDataMaintenanceInstrumentationActivities(_logger);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDataMaintenance</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext processDataMaintenance(BudgetControlDataMaintenanceRecId _budgetControlDataMaintenanceRecId, int64 _selectedDocuments)
    {
        SysInstrumentationActivity activity  = logger.activity(BudgetControlInstrumentationConstants::ProcessDataMaintenance);

        return logger.activityContext(activity)
            .addCustomProperty(BudgetControlInstrumentationConstants::DataMaintenanceRecId, any2Str(_budgetControlDataMaintenanceRecId))
            .addCustomProperty(BudgetControlInstrumentationConstants::DocumentCount, any2Str(_selectedDocuments));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDataMaintenanceProvider</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext processDataMaintenanceProvider(ClassName _providerClassName)
    {
        SysInstrumentationActivity activity  = logger.activity(BudgetControlInstrumentationConstants::ProcessDataMaintenanceProvider);

        return logger.activityContext(activity)
            .addCustomProperty(BudgetControlInstrumentationConstants::DataMaintenanceProviderName, _providerClassName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rebuildSummaryBalance</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext rebuildSummaryBalance()
    {
        SysInstrumentationActivity activity  = logger.activity(BudgetControlInstrumentationConstants::BudgetControlRebuildSummary);

        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeAllBudgetSourceData</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext removeAllBudgetSourceData()
    {
        SysInstrumentationActivity activity  = logger.activity(BudgetControlInstrumentationConstants::BudgetControlBudgetSourceRemover);

        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTrackingSummaryDetailsToRebuild</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext populateTrackingSummaryDetailsToRebuild()
    {
        SysInstrumentationActivity activity  = logger.activity(BudgetControlInstrumentationConstants::PopulateTrackingSummaryDetailsToRebuild);

        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDataMaintenance</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext findDataMaintenance(ClassName _providerClassName, BudgetControlDataMaintenanceRecId _budgetControlDataMaintenanceRecId)
    {
        SysInstrumentationActivity activity  = logger.activity(BudgetControlInstrumentationConstants::FindDataMaintenance);

        return logger.activityContext(activity)
            .addCustomProperty(BudgetControlInstrumentationConstants::DataMaintenanceProviderName, _providerClassName)
            .addCustomProperty(BudgetControlInstrumentationConstants::DataMaintenanceRecId, any2Str(_budgetControlDataMaintenanceRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSourceDocumentRelievingChain</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext processSourceDocumentRelievingChain(int _relievingChainCount)
    {
        SysInstrumentationActivity activity  = logger.activity(BudgetControlInstrumentationConstants::ProcessRelievingChain);

        return logger.activityContext(activity)
            .addCustomProperty(BudgetControlInstrumentationConstants::DocumentCount, any2Str(_relievingChainCount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLedgerJournalTransByJournalNum</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext processLedgerJournalTransByJournalNum(RecId _dataMaintenanceTrackingRecId, int _voucherCount)
    {
        SysInstrumentationActivity activity  = logger.activity(BudgetControlInstrumentationConstants::ProcessDataMaintenanceProvider);
        SysInstrumentationActivityContext activityContext = logger.activityContext(activity);
        
        activityContext.addCustomProperty(BudgetControlInstrumentationConstants::DataMaintenanceTrackingRecId, any2Str(_dataMaintenanceTrackingRecId));
        logger.logBucketizedCount(activityContext, _voucherCount);

        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorCreatingNewFromSourceDocumentHeader</Name>
				<Source><![CDATA[
    internal void errorCreatingNewFromSourceDocumentHeader(SourceDocumentHeaderRecId _sourceDocHeaderRecId,
        BudgetControldataMaintenanceRecId _budgetControldataMaintenanceRecId,
        Description255 _providerName)
    {
        SysInstrumentationEventDataJsonSerializer serializer = new SysInstrumentationEventDataJsonSerializer();

        serializer.setValue(BudgetControlInstrumentationConstants::Message, BudgetControlInstrumentationConstants::NewFromSourceDocumentHeaderError);
        serializer.setValue(extendedTypeStr(SourceDocumentHeaderRecId), any2Str(_sourceDocHeaderRecId));
        serializer.setValue(extendedTypeStr(BudgetControlDataMaintenanceRecId), any2Str(_budgetControldataMaintenanceRecId));
        serializer.setValue(BudgetControlInstrumentationConstants::DataMaintenanceProviderName, _providerName);

        logger.logWarning(serializer.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>missingDistributionsForSourceDocumentLine</Name>
				<Source><![CDATA[
    internal void missingDistributionsForSourceDocumentLine(SourceDocumentLineRecId _sourceDocumentLineRecId)
    {
        SysInstrumentationEventDataJsonSerializer serializer = new SysInstrumentationEventDataJsonSerializer();

        serializer.setValue(BudgetControlInstrumentationConstants::Message, BudgetControlInstrumentationConstants::MissingDistributionsForSourceDocumentLineWarningLabel);
        serializer.setValue(extendedTypeStr(SourceDocumentLineRecId), any2Str(_sourceDocumentLineRecId));

        logger.logWarning(serializer.toString());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>