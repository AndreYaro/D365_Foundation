<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rCashReport_Base</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rCashReport_Base extends RunBaseBatch implements BatchRetryable
{
    TransDate fromDate;
    TransDate toDate;
    RCashAccount cashAccount;

    DialogRunbase dialog;
    DialogField dialogFromDate;
    DialogField dialogToDate;
    DialogField dialogCashAccount;

    protected const Version currentVersion_Base = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog(DialogRunbase _dialog = null, boolean _forceOnClient = false)
    {
        dialog = super();

        dialog.addGroup("@GLS100666");
        dialogCashAccount = dialog.addField(extendedtypestr(RCashAccount), "@GLS104347");
        dialogCashAccount.value(cashAccount);

        dialog.addGroup("@SYS22526");
        dialogFromDate = dialog.addField(extendedtypestr(FromDate), "@SYS2168");
        dialogFromDate.value(fromDate);
        dialogToDate = dialog.addField(extendedtypestr(ToDate),   "@SYS14656");
        dialogToDate.value(toDate);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        fromDate = dialogFromDate.value();
        toDate = dialogToDate.value();
        cashAccount = dialogCashAccount.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        this.parmFromDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        this.parmToDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        cashAccount = RCashParameters::find().DefaultAccountNum;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [currentVersion_Base, fromDate, toDate, cashAccount] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCashAccount</Name>
				<Source><![CDATA[
    public RCashAccount parmCashAccount(RCashAccount  _cashAccount = "")
    {
        if (_cashAccount)
        {
            cashAccount = _cashAccount;
        }

        return cashAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public TransDate parmToDate(TransDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean ret;
        Integer version = conpeek(_packedClass,1);

        switch (version)
        {
            case currentVersion_Base:
                container base;
                [version, fromDate, toDate, cashAccount, base] = _packedClass;
                ret = super(base);
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = super(calledFrom);

        if (this.parmToDate() && this.parmFromDate() > this.parmToDate())
            ret = checkFailed("@GLS101164");

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>