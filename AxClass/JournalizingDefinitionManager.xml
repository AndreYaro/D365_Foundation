<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JournalizingDefinitionManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JournalizingDefinitionManager</c> class provides the base functionality to implement
///    journalizing definition in the modules.
/// </summary>
/// <remarks>
///    Each module that must provide its own implementation of journalizing definition has to extend this
///    base class.
/// </remarks>
abstract class JournalizingDefinitionManager
{
    JournalizingDefinitionId           journalizingDefinition;
    LedgerPostingType                  ledgerPostingType;
    TransDate                          transDate;
    #define.LedgerPostingType('LedgerPostingType')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDefaultJournalizingDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the journalizing definition ID by using the parameter values.
    /// </summary>
    /// <returns>
    ///    The journalizing definition ID based on the class parameter.
    /// </returns>
    public abstract JournalizingDefinitionId getDefaultJournalizingDefinition()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSystemGeneratedEntries</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the list of ledger dimension accounts and attributes based on the input parameters.
    /// </summary>
    /// <param name="_journalizingDefinitionDebitCredit">
    ///    The enumeration value that is used to retrieve ledger dimension accounts.
    /// </param>
    /// <param name="_ledgerDimensionAccount">
    ///    The ledger dimension account that is used by the journalizing definition engine for matching.
    /// </param>
    /// <returns>
    ///    The list of ledger dimension accounts and attributes.
    /// </returns>
    public List getSystemGeneratedEntries(
                                JournalizingDefinitionDebitCredit _journalizingDefinitionDebitCredit,
                                LedgerDimensionAccount _ledgerDimensionAccount)
    {
        List systemGeneratedEntries = new List(Types::Class);
        if (this.parmJournalizingDefinition())
        {
            systemGeneratedEntries = JournalizingDefinitionEngine::construct().getSystemGeneratedEntries(
                                                                            _ledgerDimensionAccount,
                                                                            _journalizingDefinitionDebitCredit,
                                                                            journalizingDefinition,
                                                                            transDate);
        }
        return systemGeneratedEntries;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJournalizngDefinitionEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the value of the journalizing definition parameter in the <c>LedgerParameters</c> table.
    /// </summary>
    /// <returns>
    ///    true if the journalizing definition is enabled; otherwise, false.
    /// </returns>
    boolean isJournalizngDefinitionEnabled()
    {
        return LedgerParameters::find().JournalizingDefinitionEnableValue == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalizingDefinition</Name>
				<Source><![CDATA[
    public JournalizingDefinitionId parmJournalizingDefinition(JournalizingDefinitionId _journalizingDefinitionId = journalizingDefinition)
    {
        journalizingDefinition = _journalizingDefinitionId;
        return journalizingDefinition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionType</Name>
				<Source><![CDATA[
    LedgerPostingType parmTransactionType(LedgerPostingType _ledgerPostingType = ledgerPostingType)
    {
        ledgerPostingType  = _ledgerPostingType;
        return  ledgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate  = _transDate;
        return  transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalizingDefinitionManagerALE</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>JournalizingDefinitionManagerLedger</c> class.
    /// </summary>
    /// <param name="_ledgerAccount">
    ///    The ledger account of the <c>JournalizingDefinitionManagerLedger</c> object.
    /// </param>
    /// <param name="_journalizingDefinitionId">
    ///    The journalizing definition of the <c>JournalizingDefinitionManagerLedger</c> object.
    /// </param>
    /// <param name="_transDate">
    ///    The transaction date to use.
    /// </param>
    /// <param name="_ledgerPostingType">
    ///    The Advanced Ledger Entry transaction type of the <c>JournalizingDefinitionManagerLedger</c> object.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>JournalizingDefinitionManagerLedger</c> class.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The value in the <paramref name="_ledgerPostingType" /> parameter is not valid for the purchasing
    ///    module.
    /// </exception>
    public static JournalizingDefinitionManager newJournalizingDefinitionManagerALE(
        LedgerDimensionDefaultAccount       _ledgerAccount,
        JournalizingDefinitionId            _journalizingDefinitionId,
        TransDate                           _transDate,
        LedgerPostingType                   _ledgerPostingType)
    {
        JournalizingDefinitionManagerALE journalizingDefinitionManagerALE;

        if (_ledgerPostingType == LedgerPostingType::LedgerJournal)
        {
            journalizingDefinitionManagerALE = new JournalizingDefinitionManagerALE();
            journalizingDefinitionManagerALE.parmLedgerAccount(_ledgerAccount);
            journalizingDefinitionManagerALE.parmTransactionType(_ledgerPostingType);
            journalizingDefinitionManagerALE.parmTransDate(_transDate);
            journalizingDefinitionManagerALE.parmJournalizingDefinition(_journalizingDefinitionId);
        }
        else
        {
            throw error(strfmt("@SYS134109",enum2str(_ledgerPostingType),#LedgerPostingType));
        }

        return journalizingDefinitionManagerALE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalizingDefinitionManagerBank</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>journalzingDefinitionManagerBank</c> class.
    /// </summary>
    /// <param name="_bankId">
    ///    The bank ID of the <c>journalzingDefinitionManagerBank</c> object.
    /// </param>
    /// <param name="_vendPaymModeId">
    ///    The vendor method of payment ID of the <c>JournalizingDefinitionManagerBank</c> object.
    /// </param>
    /// <param name="_transDate">
    ///    The transaction date to be use.
    /// </param>
    /// <param name="_ledgerPostingType">
    ///    The bank transaction type of the <c>JournalizingDefinitionManagerBank</c> object.
    /// </param>
    /// <returns>
    ///    The new instance of the <c>JournalizingDefinitionManagerBank</c> class.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The value input in <paramref name="_ledgerPostingType" /> parameter is not valid for bank module.
    /// </exception>
    public static JournalizingDefinitionManager newJournalizingDefinitionManagerBank(BankId _bankId, VendPaymMode _vendPaymModeId, TransDate _transDate, LedgerPostingType _ledgerPostingType)
    {
        JournalizingDefinitionManagerBank journalizingDefinitionManagerBank;

        journalizingDefinitionManagerBank = new JournalizingDefinitionManagerBank();
        journalizingDefinitionManagerBank.parmBankId(_bankId);
        journalizingDefinitionManagerBank.parmTransactionType(_ledgerPostingType);
        journalizingDefinitionManagerBank.parmVendPaymModeId(_vendPaymModeId);
        journalizingDefinitionManagerBank.parmTransDate(_transDate);

        return journalizingDefinitionManagerBank;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalizingDefinitionManagerBudget</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>JournalizingDefinitionManagerBudget</c> class.
    /// </summary>
    /// <param name="_budgetTransactionCodeReference">
    ///    The record ID of the <c>BudgetTransactionCode</c> table.
    /// </param>
    /// <param name="_ledgerPostingType">
    ///    The ledger posting type of the <c>JournalizingDefinitionManagerBudget</c> object.
    /// </param>
    /// <param name="_transDate">
    ///    The transaction date to use.
    /// </param>
    /// <returns>
    ///    The new instance of the <c>JournalizingDefinitionManagerBudget</c> class.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The ledger posting type is not valid for the budget module.
    /// </exception>

    public static JournalizingDefinitionManagerBudget newJournalizingDefinitionManagerBudget(RefRecId _budgetTransactionCodeReference, LedgerPostingType _ledgerPostingType, TransDate _transDate)
    {
        JournalizingDefinitionManagerBudget journalizingDefinitionManagerBudget;

        if (_ledgerPostingType == LedgerPostingType::Budget)
        {
            journalizingDefinitionManagerBudget = new JournalizingDefinitionManagerBudget();
            journalizingDefinitionManagerBudget.parmBudgetTransactionCodeReference(_budgetTransactionCodeReference);
            journalizingDefinitionManagerBudget.parmTransDate(_transDate);
            journalizingDefinitionManagerBudget.parmTransactionType(_ledgerPostingType);
        }
        else
        {
            throw error(strFmt("@SYS134109", enum2str(_ledgerPostingType), enumStr(LedgerPostingType)));
        }

        return journalizingDefinitionManagerBudget;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalizingDefinitionManagerCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>JournalizingDefinitionManagerCustomer</c> class.
    /// </summary>
    /// <param name="_billingCodeRefRecId">
    /// The billing code of the <c>JournalizingDefinitionManagerCustomer</c> object.
    /// </param>
    /// <param name="_billingClassificationRefRecId">
    /// The billing classification of the <c>JournalizingDefinitionManagerCustomer</c> object.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date to be use.
    /// </param>
    /// <param name="_ledgerPostingType">
    /// The purchasing transaction type of the <c>JournalizingDefinitionManagerCustomer</c> object.
    /// </param>
    /// <returns>
    /// The new instance of the <c>JournalizingDefinitionManagerCustomer</c> class.
    /// </returns>
    public static JournalizingDefinitionManager newJournalizingDefinitionManagerCustomer(BillingCodeRefRecId _billingCodeRefRecId, BillingClassificationRefRecId _billingClassificationRefRecId, TransDate _transDate, LedgerPostingType _ledgerPostingType )
    {
        JournalizingDefinitionManagerCustomer journalizingDefinitionManagerCustomer;

        journalizingDefinitionManagerCustomer = new JournalizingDefinitionManagerCustomer();
        journalizingDefinitionManagerCustomer.validateLedgerPostingType(_ledgerPostingType);

        journalizingDefinitionManagerCustomer.parmBillingCode(_billingCodeRefRecId);
        journalizingDefinitionManagerCustomer.parmBillingClassification(_billingClassificationRefRecId);
        journalizingDefinitionManagerCustomer.parmTransactionType(_ledgerPostingType);
        journalizingDefinitionManagerCustomer.parmTransDate(_transDate);

        return journalizingDefinitionManagerCustomer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLedgerPostingTypeValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the provided posting type is valid for use with the class.
    /// </summary>
    /// <param name = "_ledgerPostingType">The posting type to validate.</param>
    /// <returns>True if the posting type is valid; false otherwise.</returns>
    protected boolean isLedgerPostingTypeValid(LedgerPostingType _ledgerPostingType)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLedgerPostingType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the provided posting type is valid for use with the class, and displays an error if it is not.
    /// </summary>
    /// <param name = "_ledgerPostingType">The posting type to validate.</param>
    /// <returns>True if the posting type is valid; throws otherwise.</returns>
    protected boolean validateLedgerPostingType(LedgerPostingType _ledgerPostingType)
    {
        if (!this.isLedgerPostingTypeValid(_ledgerPostingType))
        {
            throw error(strfmt("@SYS134109",enum2str(_ledgerPostingType),#LedgerPostingType));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalizingDefinitionManagerLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>JournalizingDefinitionManagerLedger</c> class.
    /// </summary>
    /// <param name="_fundClassValueAll">
    /// The fund class to use for determining the journalizing definition.
    /// </param>
    /// <param name="_openCloseTransType">
    /// The transaction type.
    /// </param>
    /// <param name="_ledgerPostingType">
    /// The ledger posting type.
    /// </param>
    /// <returns>
    /// The new instance of the <c>JournalizingDefinitionManagerLedger</c> class.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The value input in <paramref name="_ledgerPostingType"/> paramter is not valid for general ledger module.
    /// </exception>
    public static JournalizingDefinitionManagerLedger newJournalizingDefinitionManagerLedger(FundClassValueAll _fundClassValueAll, LedgerOpenCloseTransType _openCloseTransType, LedgerPostingType _ledgerPostingType)
    {
        JournalizingDefinitionManagerLedger journalizingDefinitionManagerLedger;

        if ((_ledgerPostingType == LedgerPostingType::Closing) || (_ledgerPostingType == LedgerPostingType::None))
        {
            journalizingDefinitionManagerLedger = new JournalizingDefinitionManagerLedger();
            journalizingDefinitionManagerLedger.parmOpenCloseTransType(_openCloseTransType);
            journalizingDefinitionManagerLedger.parmFundClass(_fundClassValueAll);
        }
        else
        {
            throw error(strfmt("@SYS134109", enum2str(_ledgerPostingType), enumstr(LedgerPostingType)));
        }

        return journalizingDefinitionManagerLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalizingDefinitionManagerPayables</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>journalzingDefinitionManagerPayables</c> class.
    /// </summary>
    /// <param name="_itemId">
    ///    The item ID of an instance of the <c>journalzingDefinitionManagerPayables</c> class.
    /// </param>
    /// <param name="_inventCategoryRelation">
    ///    The category relation of an instance of the <c>journalzingDefinitionManagerPayables</c> class.
    /// </param>
    /// <param name="_vendAccount">
    ///    The vendor account of an instance of the <c>JournalizingDefinitionManagerPayables</c> class.
    /// </param>
    /// <param name="_transDate">
    ///    The transaction date to use.
    /// </param>
    /// <param name="_ledgerPostingType">
    ///    The purchasing transaction type of an instance of the <c>JournalizingDefinitionManagerPayables</c>
    ///    class.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>JournalizingDefinitionManagerPayables</c> class.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The value of the <paramref name="_ledgerPostingType" /> parameter is not valid for the accounts
    ///    payable module.
    /// </exception>
    public static JournalizingDefinitionManager newJournalizingDefinitionManagerPayables(ItemId _itemId, InventCategoryRelation _inventCategoryRelation,VendAccount _vendAccount,TransDate _transDate, LedgerPostingType _ledgerPostingType)
    {
        JournalizingDefinitionManagerPayables journalizingDefinitionManagerPayables;

        if (_ledgerPostingType == LedgerPostingType::APInvoice
            || _ledgerPostingType == LedgerPostingType::VendBalance)
        {
            journalizingDefinitionManagerPayables = new JournalizingDefinitionManagerPayables();
            journalizingDefinitionManagerPayables.parmItemId(_itemId);
            journalizingDefinitionManagerPayables.parmTransactionType(LedgerPostingType::APInvoice);
            journalizingDefinitionManagerPayables.parmVendAccount(_vendAccount);
            journalizingDefinitionManagerPayables.parmTransDate(_transDate);
            journalizingDefinitionManagerPayables.parmCategoryRelation(_inventCategoryRelation);
        }
        else
        {
                throw error(strFmt("@SYS134109",enum2str(_ledgerPostingType),#LedgerPostingType));
        }
        return journalizingDefinitionManagerPayables;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalizingDefinitionManagerPayablesWithVendorInvoiceSourceDoc</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>JournalzingDefinitionManagerPayables</c> class when journalizing definition is from vendor invoice.
    ///    This method is to be extended in public sector.
    /// </summary>
    /// <param name="_itemId">
    ///    The item ID of an instance of the <c>JournalzingDefinitionManagerPayables</c> class.
    /// </param>
    /// <param name="_inventCategoryRelation">
    ///    The category relation of an instance of the <c>JournalzingDefinitionManagerPayables</c> class.
    /// </param>
    /// <param name="_vendAccount">
    ///    The vendor account of an instance of the <c>JournalizingDefinitionManagerPayables</c> class.
    /// </param>
    /// <param name="_transDate">
    ///    The transaction date to use.
    /// </param>
    /// <param name="_ledgerPostingType">
    ///    The purchasing transaction type of an instance of the <c>JournalizingDefinitionManagerPayables</c> class.
    /// </param>
    /// <param name="_vendorInvoiceSourceDoc">
    ///    An instance of <c>VendorInvoiceSourceDoc</c> table.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>JournalizingDefinitionManagerPayables</c> class.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The value of the <paramref name="_ledgerPostingType" /> parameter is not valid for the accounts
    ///    payable module.
    /// </exception>
    public static JournalizingDefinitionManager newJournalizingDefinitionManagerPayablesWithVendorInvoiceSourceDoc(
        ItemId _itemId,
        InventCategoryRelation _inventCategoryRelation,
        VendAccount _vendAccount,
        TransDate _transDate,
        LedgerPostingType _ledgerPostingType,
        VendorInvoiceSourceDoc _vendorInvoiceSourceDoc)
    {
        JournalizingDefinitionManagerPayables journalizingDefinitionManagerPayables = JournalizingDefinitionManager::newJournalizingDefinitionManagerPayables(
            _itemId,
            _inventCategoryRelation,
            _vendAccount,
            _transDate,
            _ledgerPostingType);

        return journalizingDefinitionManagerPayables;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalizingDefinitionManagerPayroll</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>JournalizingDefinitionManagerPayroll</c> class.
    /// </summary>
    /// <param name="_benefitPlanRecId">
    ///    The benefit plan record ID of an instance of the <c>JournalizingDefinitionManagerPayroll</c> class.
    /// </param>
    /// <param name="_taxCodeRecId">
    ///    The tax code record ID of an instance of the <c>JournalizingDefinitionManagerPayroll</c> class.
    /// </param>
    /// <param name="_earningCodeRecId">
    ///    The earning code record ID of an instance of the <c>JournalizingDefinitionManagerPayroll</c> class.
    /// </param>
    /// <param name="_isEmployerLine">
    ///    Whether or not the line is created for the employer.
    /// </param>
    /// <param name="_transDate">
    ///    The transaction date to use.
    /// </param>
    /// <param name="_ledgerPostingType">
    ///    The payroll transaction type of an instance of the <c>JournalizingDefinitionManagerPayroll</c>
    ///    class.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>JournalizingDefinitionManagerPayroll</c> class.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///    The value of the <paramref name="_ledgerPostingType" /> parameter is not valid for the accounts
    ///    payable module.
    /// </exception>
    public static JournalizingDefinitionManager newJournalizingDefinitionManagerPayroll(
    HcmBenefitPlanRecId     _benefitPlanRecId,
    PayrollTaxCodeRecId     _taxCodeRecId,
    PayrollEarningCodeRecId _earningCodeRecId,
    NoYes                   _isEmployerLine,
    TransDate               _transDate,
    LedgerPostingType       _ledgerPostingType)
    {
        JournalizingDefinitionManagerPayroll journalizingDefinitionManagerPayroll;

        if (_ledgerPostingType == LedgerPostingType::Payroll ||
            _ledgerPostingType == LedgerPostingType::ProjPayrollAllocation)
        {
            journalizingDefinitionManagerPayroll = new JournalizingDefinitionManagerPayroll();
            journalizingDefinitionManagerPayroll.parmBenefitPlan(_benefitPlanRecId);
            journalizingDefinitionManagerPayroll.parmTaxCode(_taxCodeRecId);
            journalizingDefinitionManagerPayroll.parmEarningCode(_earningCodeRecId);
            journalizingDefinitionManagerPayroll.parmIsEmployerLine(_isEmployerLine);
            journalizingDefinitionManagerPayroll.parmTransactionType(_ledgerPostingType);
            journalizingDefinitionManagerPayroll.parmTransDate(_transDate);
        }
        else
        {
            throw error(strFmt("@SYS134109", enum2str(_ledgerPostingType), #LedgerPostingType));
        }
        return journalizingDefinitionManagerPayroll;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalizingDefinitionManagerPurch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>JournalizingDefinitionManagerPurch</c> class.
    /// </summary>
    /// <param name="_itemId">
    ///    The item ID of the <c>JournalizingDefinitionManagerPurch</c> object.
    /// </param>
    /// <param name="_inventCategoryRelation">
    ///    The category relation of the <c>JournalizingDefinitionManagerPurch</c> object.
    /// </param>
    /// <param name="_vendAccount">
    ///    The vendor account of the <c>JournalizingDefinitionManagerPurch</c> object.
    /// </param>
    /// <param name="_transDate">
    ///    The transaction date to use.
    /// </param>
    /// <param name="_ledgerPostingType">
    ///    The purchasing transaction type of the <c>JournalizingDefinitionManagerPurch</c> object.
    /// </param>
    /// <returns>
    ///    The new instance of the <c>JournalizingDefinitionManagerPurch</c> class.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The value in the <paramref name="_ledgerPostingType" /> parameter is not valid for the purchasing
    ///    module.
    /// </exception>
    public static JournalizingDefinitionManager newJournalizingDefinitionManagerPurch(ItemId _itemId, InventCategoryRelation _inventCategoryRelation,VendAccount _vendAccount,TransDate _transDate, LedgerPostingType _ledgerPostingType )
    {
        JournalizingDefinitionManagerPurch journalzingDefinitionManagerPurch;

        if (JournalizingDefinitionManager::validateLedgerPostingTypePurch(_ledgerPostingType))
        {
            journalzingDefinitionManagerPurch = new JournalizingDefinitionManagerPurch();
            journalzingDefinitionManagerPurch.parmItemId(_itemId);
            journalzingDefinitionManagerPurch.parmTransactionType(_ledgerPostingType);
            journalzingDefinitionManagerPurch.parmVendAccount(_vendAccount);
            journalzingDefinitionManagerPurch.parmTransDate(_transDate);
            journalzingDefinitionManagerPurch.parmCategoryRelation(_inventCategoryRelation);
        }
        else
        {
            throw error(strFmt("@SYS134109",enum2str(_ledgerPostingType),#LedgerPostingType));
        }
        return journalzingDefinitionManagerPurch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLedgerPostingTypePurch</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the purchasing transaction type.
    /// </summary>
    /// <param name = "_ledgerPostingType">
    ///     The purchasing transaction type of the <c>JournalizingDefinitionManagerPurch</c> object.
    /// </param>
    /// <returns>
    ///     true if the purchasing transaction type; otherwise, false.
    /// </returns>
    protected static boolean validateLedgerPostingTypePurch(LedgerPostingType _ledgerPostingType)
    {
        boolean ret = ( _ledgerPostingType == LedgerPostingType::PurchOrder
                        || _ledgerPostingType == LedgerPostingType::PurchReq
                        || _ledgerPostingType == LedgerPostingType::PurchPckSlp
                        || _ledgerPostingType == LedgerPostingType::PurchOrderYearEnd);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalizingDefinitionManagerBudgetReservation_PSN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>JournalizingDefinitionMgrBudgetRes_PSN</c> class.
    /// </summary>
    /// <param name="_budgetReservationTypeRecId_PSN">
    /// The record ID of the <c>BudgetReservationType_PSN</c> table.
    /// </param>
    /// <param name="_budgetReservationJournalizingType">
    /// The budget reservation journalizing type to be used.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date to use.
    /// </param>
    /// <returns>
    /// The new instance of the <c>JournalizingDefinitionManagerBudgetReservation_PSN</c> class.
    /// </returns>
    public static JournalizingDefinitionManagerBudgetReservation_PSN newJournalizingDefinitionManagerBudgetReservation_PSN(
    BudgetReservationTypeRecId_PSN          _budgetReservationTypeRecId,
    BudgetReservationJournalizingType_PSN   _budgetReservationJournalizingType,
    TransDate                               _transDate)
    {
        JournalizingDefinitionManagerBudgetReservation_PSN journalizingDefinitionManagerBudgetRes;

        journalizingDefinitionManagerBudgetRes = new JournalizingDefinitionManagerBudgetReservation_PSN();
        journalizingDefinitionManagerBudgetRes.parmBudgetReservationType(_budgetReservationTypeRecId);
        journalizingDefinitionManagerBudgetRes.parmTransDate(_transDate);
        journalizingDefinitionManagerBudgetRes.parmBudgetReservationJournalizingType(_budgetReservationJournalizingType);

        return journalizingDefinitionManagerBudgetRes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPurch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>JournalizingDefinitionManagerPurch</c> class.
    /// </summary>
    /// <param name="_itemId">
    ///    The item ID of an instance of the <c>JournalizingDefinitionManagerPurch</c> class.
    /// </param>
    /// <param name="_inventCategoryRelation">
    ///    The category relation of an instance of the <c>JournalizingDefinitionManagerPurch</c> class.
    /// </param>
    /// <param name="_vendAccount">
    ///    The vendor account of an instance of the <c>JournalizingDefinitionManagerPurch</c> class.
    /// </param>
    /// <param name="_transDate">
    ///    The transaction date to use.
    /// </param>
    /// <param name="_ledgerPostingType">
    ///    The purchasing transaction type of an instance of the <c>JournalizingDefinitionManagerPurch</c>
    ///    class.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>JournalizingDefinitionManagerPurch</c> class.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The value of the <paramref name="_ledgerPostingType" /> parameter is not valid for the purchasing
    ///    module.
    /// </exception>
    public static JournalizingDefinitionManager newPurch(ItemId _itemId, InventCategoryRelation _inventCategoryRelation,VendAccount _vendAccount,TransDate _transDate, LedgerPostingType _ledgerPostingType )
    {
        JournalizingDefinitionManagerPurch journalzingDefinitionManagerPurch;

        if (_ledgerPostingType == LedgerPostingType::PurchOrder || _ledgerPostingType == LedgerPostingType::PurchReq ||
            _ledgerPostingType == LedgerPostingType::PurchPckSlp)
        {
            journalzingDefinitionManagerPurch = new JournalizingDefinitionManagerPurch();
            journalzingDefinitionManagerPurch.parmItemId(_itemId);
            journalzingDefinitionManagerPurch.parmTransactionType(_ledgerPostingType);
            journalzingDefinitionManagerPurch.parmVendAccount(_vendAccount);
            journalzingDefinitionManagerPurch.parmTransDate(_transDate);
            journalzingDefinitionManagerPurch.parmCategoryRelation(_inventCategoryRelation);
        }
        else
        {
            throw error(strFmt("@SYS134109",enum2str(_ledgerPostingType),#LedgerPostingType));
        }
        return journalzingDefinitionManagerPurch;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>