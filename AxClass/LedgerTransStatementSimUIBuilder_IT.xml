<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTransStatementSimUIBuilder_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerTransStatementSimUIBuilder_IT extends SrsReportDataContractUIBuilder
{
    public boolean ledgerMessageShown, budgetMessageShown, cashflowMessageShown;
    public DialogField dialogFieldFromDate, dialogFieldToDate, dialogFieldDateCode, dialogFieldSecondaryDimension;
    public DialogField dialogFieldGroupBySecondary, dialogFieldTransactionType, dialogFieldSpecification;
    public DialogField dialogFieldWithoutTransactions, dialogFieldCurrencyTotal, dialogFieldSalesTaxSpecification, dialogFieldPostingLayer;
    public DialogField dialogFieldIncludeOpening, dialogFieldIncludeClosing, dialogFieldEmptyPeriods, dialogFieldOffsetAccount, dialogFieldCurrencySelection;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dateIntervalModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the start date and end date field based on the selected interval.
    /// </summary>
    /// <param name="_dateCodeDialogControl">
    /// The <c>FormStringControl</c> object that determines the date field values
    /// </param>
    /// <returns>
    /// true if the control value has been modified; otherwise false.
    /// </returns>
    public boolean dateIntervalModified(FormStringControl _dateCodeDialogControl)
    {
        boolean returnValue = _dateCodeDialogControl.modified();

        if (returnValue && dialogFieldDateCode.value())
        {
            LedgerPeriodCode ledgerPeriodCode = LedgerPeriodCode::find(dialogFieldDateCode.value());

            if (ledgerPeriodCode)
            {
                dialogFieldFromDate.value(ledgerPeriodCode.fromDate());
                dialogFieldToDate.value(ledgerPeriodCode.toDate());
            }
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateIntervalValidate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies that the date interval is valid.
    /// </summary>
    /// <param name="_control">
    /// The control behind the changed dialog field.
    /// </param>
    /// <returns>
    /// true if the control value is valid; otherwise false.
    /// </returns>
    /// <remarks>
    /// The date interval must occur in the <c>LedgerPeriodCode</c> table.
    /// </remarks>
    public boolean dateIntervalValidate(FormStringControl _control)
    {
        boolean returnValue = true;

        if (_control.modified() && dialogFieldDateCode.value())
        {
            returnValue = LedgerPeriodCode::checkExist(dialogFieldDateCode.value());

            if (!returnValue)
            {
                dialogFieldDateCode.value('');
            }
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the date interval parameter when the from or to date field is changed.
    /// </summary>
    /// <param name="_control">
    /// The <c>FormDateControl</c> that has changed.
    /// </param>
    /// <returns>
    /// true if the control value has been modified; otherwise false.
    /// </returns>
    public boolean dateModified(FormDateControl _control)
    {
        boolean returnValue = _control.modified();

        if (returnValue)
        {
            dialogFieldDateCode.value('');
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionSetLookupAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes the dimension set lookup.
    /// </summary>
    /// <param name="_dimensionSetDialogControl">
    /// The <c>FormStringControl</c> object for which the lookup field is associated.
    /// </param>
    public void dimensionSetLookupAll(FormStringControl _dimensionSetDialogControl)
    {
        DimensionHierarchyHelper::lookupDimensionSet(_dimensionSetDialogControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionSetLookupWithBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes the dimension set lookup filtered to only dimension sets that have balances.
    /// </summary>
    /// <param name="_dimensionSetDialogControl">
    /// The <c>FormStringControl</c> object for which the lookup field is associated.
    /// </param>
    public void dimensionSetLookupWithBalances(FormStringControl _dimensionSetDialogControl)
    {
        DimensionHierarchyHelper::lookupDimensionSet(_dimensionSetDialogControl, true, DimensionFocusBalanceInitializationState::Initialized);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSpecificationModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles events for when the specification control is modified.
    /// </summary>
    /// <param name="_specificationControl">
    /// The specification control.
    /// </param>
    /// <returns>
    /// true if the control value has been modified; otherwise false.
    /// </returns>
    /// <remarks>
    /// Updates the controls that depend on the value of the specification control.
    /// </remarks>
    public boolean onSpecificationModified(FormComboBoxControl _specificationControl)
    {
        LedgerTransStatementSimContract_IT contract = this.dataContractObject() as LedgerTransStatementSimContract_IT;
        boolean modified = _specificationControl.modified();

        if (modified)
        {
            this.updateParameterState(dialogFieldTransactionType.value(), _specificationControl.selection(), contract);
        }

        return modified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override this method in order to initialize the dialog fields after the fields are built.
    /// </summary>
    public void postBuild()
    {
        super();

        // from binding info, get the dialog field for dimension focus and add button
        DialogField dialogFieldPrimaryFocus = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(LedgerTransStatementSimContract_IT, parmPrimaryDimensionFocus));

        if (dialogFieldPrimaryFocus)
        {
            dialogFieldPrimaryFocus.lookupButton(2);
        }

        // from binding info, get the dialog field for dimension focus and add button
        DialogField dialogFieldSecondaryFocus = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(LedgerTransStatementSimContract_IT, parmSecondaryDimensionFocus));

        if (dialogFieldSecondaryFocus)
        {
            dialogFieldSecondaryFocus.lookupButton(2);
        }

        DialogField dialogSimulationGroupId = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(LedgerTransStatementSimContract_IT, parmSimulationJournalGroupId));
    
        if (dialogSimulationGroupId)
        {
            dialogSimulationGroupId.lookupButton(2);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override this method in order to register the dialog field methods to capture events.
    /// </summary>
    public void postRun()
    {
        DialogField dialogFieldPrimaryFocus;
        DialogField dialogFieldSecondaryFocus;
        DialogField dialogSimulationGroupId;
        Dialog dialogLocal = this.dialog();
        LedgerTransStatementSimContract_IT contract = this.dataContractObject() as LedgerTransStatementSimContract_IT;

        super();

        // This method should be called in order to handle events on dialogs.
        dialogLocal.dialogForm().formRun().controlMethodOverload(false);

        // Override the methods of dimension focus field.
        dialogFieldPrimaryFocus = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(LedgerTransStatementSimContract_IT, parmPrimaryDimensionFocus));
        dialogFieldPrimaryFocus.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(LedgerTransStatementSimUIBuilder_IT, dimensionSetLookupWithBalances), this);

        dialogFieldSecondaryFocus = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(LedgerTransStatementSimContract_IT, parmSecondaryDimensionFocus));
        dialogFieldSecondaryFocus.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(LedgerTransStatementSimUIBuilder_IT, dimensionSetLookupAll), this);
        // Override the modified method of the "Secondary financial dimension set" so that other parameters can be enabled/disabled accordingly
        dialogFieldSecondaryFocus.registerOverrideMethod(methodStr(FormStringControl, modified), methodStr(LedgerTransStatementSimUIBuilder_IT, secondaryDimensionSetModified), this);

        dialogSimulationGroupId = this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerTransStatementSimContract_IT, parmSimulationJournalGroupId));
        dialogSimulationGroupId.registerOverrideMethod(methodstr(FormStringControl, lookup), methodstr(LedgerTransStatementSimUIBuilder_IT, simulationGroupSetLookup), this);

        // Overrides the modified method of the Date Interval field so you can fill the dates based on the interval selected
        dialogFieldDateCode = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(LedgerTransStatementSimContract_IT, parmDateCode));
        dialogFieldFromDate = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(LedgerTransStatementSimContract_IT, parmFromDate));
        dialogFieldToDate = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(LedgerTransStatementSimContract_IT, parmToDate));

        dialogFieldTransactionType = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(LedgerTransStatementSimContract_IT, parmTransaction));
        dialogFieldCurrencySelection = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(LedgerTransStatementSimContract_IT, parmCurrencySelection));

        dialogFieldWithoutTransactions = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(LedgerTransStatementSimContract_IT, parmWithoutTrans));

        dialogFieldSpecification = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(LedgerTransStatementSimContract_IT, parmSpecification));
        dialogFieldCurrencyTotal = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(LedgerTransStatementSimContract_IT, parmCurrencyTotal));
        dialogFieldSalesTaxSpecification = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(LedgerTransStatementSimContract_IT, parmSalesTaxSpec));
        dialogFieldIncludeOpening = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(LedgerTransStatementSimContract_IT, parmOpeningTrans));
        dialogFieldIncludeClosing = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(LedgerTransStatementSimContract_IT, parmClosingTrans));
        dialogFieldEmptyPeriods = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(LedgerTransStatementSimContract_IT, parmEmptyPeriods));
        dialogFieldOffsetAccount = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(LedgerTransStatementSimContract_IT, parmOffsetAccount));
        dialogFieldGroupBySecondary = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(LedgerTransStatementSimContract_IT, parmGroupPerSec));
        dialogFieldPostingLayer = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(LedgerTransStatementSimContract_IT, parmPostingLayers));
        dialogFieldSecondaryDimension = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(LedgerTransStatementSimContract_IT, parmSecondaryDimensionFocus));

        // Override the modified method of the Date Interval field so that the From and To dates fields get populated based on the interval selected.
        dialogFieldDateCode.registerOverrideMethod(methodStr(FormStringControl, modified), methodStr(LedgerTransStatementSimUIBuilder_IT, dateIntervalModified), this);

        // Override the validate method of the Date Interval field.
        dialogFieldDateCode.registerOverrideMethod(methodStr(FormStringControl, validate), methodStr(LedgerTransStatementSimUIBuilder_IT, dateIntervalValidate), this);

        // Override the modified method of the From and To date fields so the date interval gets cleared when a date is manually changed.
        dialogFieldFromDate.registerOverrideMethod(methodStr(FormDateControl, modified), methodStr(LedgerTransStatementSimUIBuilder_IT, dateModified), this);
        dialogFieldToDate.registerOverrideMethod(methodStr(FormDateControl, modified), methodStr(LedgerTransStatementSimUIBuilder_IT, dateModified), this);

        // run these to sync to the system date
        this.dateIntervalModified(dialogFieldDateCode.control());

        // Override the modified method of the transaction type field so that the proper dynamic query is presented.
        dialogFieldTransactionType.registerOverrideMethod(methodStr(FormStringControl, modified), methodStr(LedgerTransStatementSimUIBuilder_IT, transactionTypeModified), this);

        dialogFieldSpecification.registerOverrideMethod(methodStr(FormComboBoxControl, modified), methodStr(LedgerTransStatementSimUIBuilder_IT, onSpecificationModified), this);

        // Update parameters for the values read from SysLastValue
        this.updateParameterState(dialogFieldTransactionType.value(), dialogFieldSpecification.value(), contract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>secondaryDimensionSetModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modified event handler for the secondary financial dimension set parameter.
    /// </summary>
    /// <param name="_secondaryDimensionDialogControl">
    /// The secondary financial dimension set control.
    /// </param>
    /// <returns>
    /// true if the control was modified; otherwise, false.
    /// </returns>
    public boolean secondaryDimensionSetModified(FormStringControl _secondaryDimensionDialogControl)
    {
        LedgerTransStatementSimContract_IT contract = this.dataContractObject() as LedgerTransStatementSimContract_IT;

        boolean returnValue = _secondaryDimensionDialogControl.modified();

        if (returnValue)
        {
            this.updateParameterState(dialogFieldTransactionType.value(), dialogFieldSpecification.value(), contract);
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionTypeModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables the correct query data source that is based on the selected transaction type.
    /// </summary>
    /// <param name="_control">
    /// The <c>FormComboBoxControl</c> object for the transaction type parameter.
    /// </param>
    /// <returns>
    /// true if the control value has been modified; otherwise false.
    /// </returns>
    public boolean transactionTypeModified(FormComboBoxControl _control)
    {
        DimensionsTransTableType transactionType;
        LedgerTransStatementSimContract_IT contract = this.dataContractObject() as LedgerTransStatementSimContract_IT;

        boolean isModified = _control.modified();

        if (isModified)
        {
            transactionType = dialogFieldTransactionType.value();

            switch (transactionType)
            {
                case DimensionsTransTableType::LedgerTrans:
                    if (!ledgerMessageShown)
                    {
                        LedgerTransStatementSimUIBuilder_IT::displayTransactionTypeMessage(
                            DimensionsTransTableType::LedgerTrans,
                            tableNum(GeneralJournalAccountEntry));
                        ledgerMessageShown = true;
                    }
                    break;

                case DimensionsTransTableType::LedgerBudget:
                    if (!budgetMessageShown)
                    {
                        LedgerTransStatementSimUIBuilder_IT::displayTransactionTypeMessage(
                            DimensionsTransTableType::LedgerBudget,
                            tableNum(BudgetTransactionLine));
                        budgetMessageShown = true;
                    }
                    break;
            }

            this.updateParameterState(transactionType, dialogFieldSpecification.value(), contract);
        }

        return isModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParameterState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Toggles parameters based on currently selected parameter values.
    /// </summary>
    /// <param name="_transactionType">
    /// The currently selected transaction type.
    /// </param>
    /// <param name="_specificationValue">
    /// The currently selected specification value.
    /// </param>
    /// <param name="_contract">
    /// The <c>LedgerTransStatementSimContract</c> object.
    /// </param>
    private void updateParameterState(DimensionsTransTableType _transactionType, DimensionsLedgerTransSpecDim _specificationValue, LedgerTransStatementSimContract_IT _contract)
    {
        // Sales tax specification
        if (_specificationValue == DimensionsLedgerTransSpecDim::Transaction
            && _transactionType == DimensionsTransTableType::LedgerTrans)
        {
            dialogFieldSalesTaxSpecification.enabled(true);
        }
        else
        {
            dialogFieldSalesTaxSpecification.enabled(false);
            dialogFieldSalesTaxSpecification.value(NoYes::No);
            _contract.parmSalesTaxSpec(false);
        }

        // Currency total
        if (_specificationValue == DimensionsLedgerTransSpecDim::Transaction
            && _transactionType == DimensionsTransTableType::LedgerTrans)
        {
            dialogFieldCurrencyTotal.enabled(true);
        }
        else
        {
            dialogFieldCurrencyTotal.enabled(false);
            dialogFieldCurrencyTotal.value(NoYes::No);
            _contract.parmCurrencyTotal(false);
        }

        // Empty periods
        if (_specificationValue != DimensionsLedgerTransSpecDim::Transaction
            && _specificationValue != DimensionsLedgerTransSpecDim::Total)
        {
            dialogFieldEmptyPeriods.enabled(true);
        }
        else
        {
            dialogFieldEmptyPeriods.enabled(false);
            dialogFieldEmptyPeriods.value(NoYes::No);
            _contract.parmEmptyPeriods(false);
        }

        // Offset account
        if (_specificationValue == DimensionsLedgerTransSpecDim::Transaction
            && _transactionType == DimensionsTransTableType::LedgerTrans)
        {
            dialogFieldOffsetAccount.enabled(true);
        }
        else
        {
            dialogFieldOffsetAccount.enabled(false);
            dialogFieldOffsetAccount.value(NoYes::No);
            _contract.parmOffsetAccount(false);
        }

        // Include opening
        dialogFieldIncludeOpening.enabled(true);

        // Include closing
        dialogFieldIncludeClosing.enabled(true);

        // Posting layer
        if (_transactionType == DimensionsTransTableType::LedgerTrans)
        {
            dialogFieldPostingLayer.enabled(true);
        }
        else
        {
            dialogFieldPostingLayer.enabled(false);
        }

        // Group per secondary dimension
        if (dialogFieldSecondaryDimension.value() == '')
        {
            dialogFieldGroupBySecondary.enabled(false);
            dialogFieldGroupBySecondary.value(false);
            _contract.parmGroupPerSec(false);
        }
        else
        {
            dialogFieldGroupBySecondary.enabled(true);
        }

        // Currency type > Accounting or Accounting and Reporting
        if (_specificationValue == DimensionsLedgerTransSpecDim::Transaction
            && _transactionType == DimensionsTransTableType::LedgerTrans)
        {
            dialogFieldCurrencySelection.enabled(true);
        }
        else
        {
            dialogFieldCurrencySelection.enabled(false);
            dialogFieldCurrencySelection.value(LedgerReportCurrencySelection::Accounting);
            _contract.parmCurrencySelection(LedgerReportCurrencySelection::Accounting);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTransactionTypeMessage</Name>
				<Source><![CDATA[
    private static void displayTransactionTypeMessage(DimensionsTransTableType _dimensionsTransTableType, tableId _tableId)
    {
        info(strFmt("@SYS344488", _dimensionsTransTableType, tableId2pname(_tableId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>simulationGroupSetLookup</Name>
				<Source><![CDATA[
    public void simulationGroupSetLookup(FormStringControl _simulationGroupSetDialogControl)
    {
        SimulationJournalGroupTable_IT::lookupSimulationGroupId(_simulationGroupSetDialogControl);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>