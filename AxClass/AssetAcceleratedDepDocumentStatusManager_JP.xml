<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetAcceleratedDepDocumentStatusManager_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used for managing status of the <c>AssetDocumentAcceleratedDepTable_JP</c> table.
/// </summary>
public class AssetAcceleratedDepDocumentStatusManager_JP
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>confirm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Confirm <c>AssetDocumentAcceleratedDepTable_JP</c>.
    /// </summary>
    /// <param name="_accDepDocTable">
    /// Instance of <c>AssetDocumentAcceleratedDepTable_JP</c>.
    /// </param>
    /// <returns>
    /// Returns ture if <c>AssetDocumentAcceleratedDepTable_JP</c> is confirmed; otherwise, returns false.
    /// </returns>
    public static boolean confirm(AssetDocumentAcceleratedDepTable_JP _accDepDocTable)
    {
        boolean ret = false;

        if (_accDepDocTable.Status == AssetAcceleratedDepDocumentStatus_JP::Open)
        {
            ttsbegin;

            _accDepDocTable.selectForUpdate(true);
            _accDepDocTable.Status = AssetAcceleratedDepDocumentStatus_JP::Confirmed;
            _accDepDocTable.update();

            ttscommit;

            ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reOpen</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reopen <c>AssetDocumentAcceleratedDepTable_JP</c>.
    /// </summary>
    /// <param name="_accDepDocTable">
    /// Instance of <c>AssetDocumentAcceleratedDepTable_JP</c>.
    /// </param>
    /// <returns>
    /// Returns ture if <c>AssetDocumentAcceleratedDepTable_JP</c> is reopened; otherwise, returns false.
    /// </returns>
    public static boolean reOpen(AssetDocumentAcceleratedDepTable_JP _accDepDocTable)
    {
        boolean ret = false;

        if (_accDepDocTable.Status == AssetAcceleratedDepDocumentStatus_JP::Confirmed)
        {
            ttsbegin;

            _accDepDocTable.selectForUpdate(true);
            _accDepDocTable.Status = AssetAcceleratedDepDocumentStatus_JP::Open;
            _accDepDocTable.update();

            ttscommit;

            ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancel <c>AssetDocumentAcceleratedDepTable_JP</c>.
    /// </summary>
    /// <param name="_accDepDocTable">
    /// Instance of <c>AssetDocumentAcceleratedDepTable_JP</c>.
    /// </param>
    /// <returns>
    /// Returns ture if <c>AssetDocumentAcceleratedDepTable_JP</c> is cancelled; otherwise, returns false.
    /// </returns>
    public static boolean cancel(AssetDocumentAcceleratedDepTable_JP _accDepDocTable)
    {
        boolean ret = false;

        if (_accDepDocTable.Status == AssetAcceleratedDepDocumentStatus_JP::Open
            || _accDepDocTable.Status == AssetAcceleratedDepDocumentStatus_JP::Confirmed
            || _accDepDocTable.Status == AssetAcceleratedDepDocumentStatus_JP::PartiallyPosted)
        {
            ttsbegin;

            _accDepDocTable.selectForUpdate(true);
            _accDepDocTable.Status = AssetAcceleratedDepDocumentStatus_JP::Cancelled;
            _accDepDocTable.update();

            ttscommit;

            ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateByPostOfAssetDocumentEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update status of <c>AssetDocumentAcceleratedDepTable_JP</c> when post accelerated depreciation.
    /// </summary>
    /// <param name="_assetDocumentEntryRecId">
    /// RecId of <c>AssetDocumentEntry_JP</c>.
    /// </param>
    public static void updateByPostOfAssetDocumentEntry(RefRecId _assetDocumentEntryRecId)
    {
        AssetDocumentAcceleratedDepTable_JP accDepDocTable;
        AssetDocumentEntry_JP               docEntry;
        AssetBook                           AssetBookMin;
        AssetBook                           AssetBookMax;

        ttsbegin;

        select firstonly forupdate Status, AssetDocumentTable_JP, ValidFrom, validTo, RecId
            from accDepDocTable
            exists join docEntry
            where docEntry.AssetDocumentTable_JP == accDepDocTable.AssetDocumentTable_JP
                && docEntry.RecId == _assetDocumentEntryRecId;

        if (accDepDocTable.RecId
            && (accDepDocTable.Status == AssetAcceleratedDepDocumentStatus_JP::Confirmed
                ||accDepDocTable.Status == AssetAcceleratedDepDocumentStatus_JP::PartiallyPosted))
        {
            select minof(LastDepreciationDateAccelerated_JP) from AssetBookMin
                join maxof(LastDepreciationDateAccelerated_JP) from AssetBookMax
                    where AssetBookMin.RecId == AssetBookMax.RecId
                exists join docEntry
                    where AssetBookMin.AssetId == docEntry.AssetId
                        && AssetBookMin.BookId == docEntry.BookId
                        && AssetBookMax.AssetId == docEntry.AssetId
                        && AssetBookMax.BookId == docEntry.BookId
                        && docEntry.AssetDocumentTable_JP == accDepDocTable.AssetDocumentTable_JP;

            if (AssetBookMin.LastDepreciationDateAccelerated_JP >= accDepDocTable.ValidTo)
            {
                accDepDocTable.Status = AssetAcceleratedDepDocumentStatus_JP::Posted;
                accDepDocTable.update();
            }
            else if (AssetBookMax.LastDepreciationDateAccelerated_JP >= accDepDocTable.ValidFrom
                && accDepDocTable.Status == AssetAcceleratedDepDocumentStatus_JP::Confirmed)
            {
                accDepDocTable.Status = AssetAcceleratedDepDocumentStatus_JP::PartiallyPosted;
                accDepDocTable.update();
            }
            else if (AssetBookMax.LastDepreciationDateAccelerated_JP < accDepDocTable.ValidFrom
                && accDepDocTable.Status == AssetAcceleratedDepDocumentStatus_JP::PartiallyPosted)
            {
                accDepDocTable.Status = AssetAcceleratedDepDocumentStatus_JP::Confirmed;
                accDepDocTable.update();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>