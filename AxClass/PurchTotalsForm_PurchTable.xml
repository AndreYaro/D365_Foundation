<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchTotalsForm_PurchTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchTotalsForm_PurchTable extends PurchtotalsForm
{
    PurchTotals purchTotals;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cashDiscValue</Name>
				<Source><![CDATA[
    public VendCashDiscAmount cashDiscValue()
    {
        return conPeek(displayFields, PurchTotals::posCashDisc());
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructTotals</Name>
				<Source><![CDATA[
    protected TradeTotalsBase constructTotals()
    {
        PurchUpdate purchUpdate = any2Enum(specQty);
        PurchTotals purchTotalsLoc = PurchTotals::newPurchTable(this.parmCallingTable(), purchUpdate);

        // Calculates global withholding tax when click 'Totals' on purchase order.
        if (TaxWithholdingGlobalFeature::isCalcWHTInInvoiceEnabled())
        {
            purchTotalsLoc.parmIsWHTCalcNeeded(true);
        }

        return purchTotalsLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCodeValue</Name>
				<Source><![CDATA[
    public CurrencyCode currencyCodeValue()
    {
        return conPeek(displayFields, PurchTotals::posCurrency());
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDiscValue</Name>
				<Source><![CDATA[
    public PurchEndDiscAmount endDiscValue()
    {
        return conPeek(displayFields, PurchTotals::posEndDisc());
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateValue</Name>
				<Source><![CDATA[
    public ExchRate exchRateValue()
    {
        ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), this.currencyCodeValue());

        return exchangeRateHelper.displayStoredExchangeRate(conPeek(displayFields, PurchTotals::posExchRate()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAmountValue</Name>
				<Source><![CDATA[
    public AmountCur invoiceAmountValue()
    {
        return conPeek(displayFields, PurchTotals::posTotalAmount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceRoundOffValue</Name>
				<Source><![CDATA[
    public RoundOff invoiceRoundOffValue()
    {
        return conPeek(displayFields, PurchTotals::posRoundOff());
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDiscValue</Name>
				<Source><![CDATA[
    public PurchSumLineDiscAmount lineDiscValue()
    {
        return conPeek(displayFields, PurchTotals::posLineDisc());
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupFreightAmountMST_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the <c>Freight</c> markup type in accounting currency.
    /// </summary>
    /// <returns>
    ///    The value of the <c>Freight</c> markup type.
    /// </returns>
    public MarkupAmount markupFreightAmountMST_BR()
    {
        return conPeek(displayFields, PurchTotals::posMarkupFreight_BR());
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupInsuranceAmountMST_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the <c>Insurance</c> markup type in accounting currency.
    /// </summary>
    /// <returns>
    ///    The value of the <c>Insurance</c> markup type.
    /// </returns>
    public MarkupAmount markupInsuranceAmountMST_BR()
    {
        return conPeek(displayFields, PurchTotals::posMarkupInsurance_BR());
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupOthersAmountMST_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the <c>Other</c> markup type in transaction currency.
    /// </summary>
    /// <returns>
    ///    The value of the <c>Other</c> markup type.
    /// </returns>
    public MarkupAmount markupOthersAmountMST_BR()
    {
        return conPeek(displayFields, PurchTotals::posMarkupOther_BR());
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupSiscomexAmountMST_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the <c>Siscomex</c> markup type in accounting currency.
    /// </summary>
    /// <returns>
    ///    The value of the <c>Siscomex</c> markup type.
    /// </returns>
    public MarkupAmount markupSiscomexAmountMST_BR()
    {
        return conPeek(displayFields, PurchTotals::posMarkupSiscomex_BR());
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupTotalAmount_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the total markup value in the accounting currency.
    /// </summary>
    /// <returns>
    ///    Total markup value.
    /// </returns>
    public MarkupSumPurch markupTotalAmount_BR()
    {
        PurchTable purchTable = callingTable;

        if (purchTable.isDirectImport_BR())
        {
            return conPeek(displayFields, PurchTotals::posTotalMarkup_BR());
        }
        else
        {
            return this.sumMarkUpValue();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Purch table CW inventory qty.
    /// </summary>
    /// <returns>CW quantity.</returns>
    public PdsCWInventQty pdsCWQtyValue()
    {
        return conPeek(displayFields, PurchTotals::pdsCWPosQty());
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepayVisible</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>PurchTotals</c> form should display the <c>Prepay</c> group.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    boolean prepayVisible()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchCOFINSTotal_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the <c>COFINS</c> tax type from the <c>displayFields</c> container.
    /// </summary>
    /// <returns>
    ///    The the value of the <c>COFINS</c> tax type.
    /// </returns>
    public TaxAmount purchCOFINSTotal_BR()
    {
        return conPeek(displayFields, PurchTotals::posCOFINSTotal_BR());
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchCSLLTotal_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the <c>CSLL</c> tax type from the <c>displayFields</c> container.
    /// </summary>
    /// <returns>
    ///    The the value of the <c>CSLL</c> tax type.
    /// </returns>
    public TaxAmount purchCSLLTotal_BR()
    {
        return conPeek(displayFields, PurchTotals::posCSLLTotal_BR());
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchICMSTotal_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the <c>ICMS</c> tax type from the <c>displayFields</c> container.
    /// </summary>
    /// <returns>
    ///    The the value of the <c>ICMS</c> tax type.
    /// </returns>
    public TaxAmount purchICMSTotal_BR()
    {
        return conPeek(displayFields, PurchTotals::posICMSTotal_BR());
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchICMSSTTotal_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the <c>ICMS-ST</c> tax type from the <c>displayFields</c> container.
    /// </summary>
    /// <returns>
    ///    The the value of the <c>ICMS-ST</c> tax type.
    /// </returns>
    public TaxAmount purchICMSSTTotal_BR()
    {
        return conPeek(displayFields, PurchTotals::posICMSSTTotal_BR());
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchICMSDiffTotal_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the <c>ICMS-Dif</c> tax type from the <c>displayFields</c> container.
    /// </summary>
    /// <returns>
    ///    The the value of the <c>ICMS-Dif</c> tax type.
    /// </returns>
    public TaxAmount purchICMSDiffTotal_BR()
    {
        return conPeek(displayFields, PurchTotals::posICMSDiffTotal_BR());
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchImportTaxTotal_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the <c>ImportTax</c> tax type from the <c>displayFields</c> container.
    /// </summary>
    /// <returns>
    ///    The the value of the <c>ImportTax</c> tax type.
    /// </returns>
    public TaxAmount purchImportTaxTotal_BR()
    {
        return conPeek(displayFields, PurchTotals::posImportTaxTotal_BR());
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchINSSRetainedTotal_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the <c>INSSRetained</c> tax type from the <c>displayFields</c> container.
    /// </summary>
    /// <returns>
    ///    The the value of the <c>INSSRetained</c> tax type.
    /// </returns>
    public TaxAmount purchINSSRetainedTotal_BR()
    {
        return conPeek(displayFields, PurchTotals::posRetainedINSSTotal_BR());
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchINSSTotal_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the <c>INSS</c> tax type from the <c>displayFields</c> container.
    /// </summary>
    /// <returns>
    ///    The the value of the <c>INSS</c> tax type.
    /// </returns>
    public TaxAmount purchINSSTotal_BR()
    {
        return conPeek(displayFields, PurchTotals::posINSSTotal_BR());
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchIPITotal_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the <c>IPI</c> tax type from the <c>displayFields</c> container.
    /// </summary>
    /// <returns>
    ///    The the value of the <c>IPI</c> tax type.
    /// </returns>
    public TaxAmount purchIPITotal_BR()
    {
        return conPeek(displayFields, PurchTotals::posIPITotal_BR());
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchIRRFTotal_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the <c>IRRF</c> tax type from the <c>displayFields</c> container.
    /// </summary>
    /// <returns>
    ///    The the value of the <c>IRRF</c> tax type.
    /// </returns>
    public TaxAmount purchIRRFTotal_BR()
    {
        return conPeek(displayFields, PurchTotals::posIRRFTotal_BR());
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchISSTotal_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the <c>ISS</c> tax type from the <c>displayFields</c> container.
    /// </summary>
    /// <returns>
    ///    The the value of the <c>ISS</c> tax type.
    /// </returns>
    public TaxAmount purchISSTotal_BR()
    {
        return conPeek(displayFields, PurchTotals::posISSTotal_BR());
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchPISTotal_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the <c>PIS</c> tax type from the <c>displayFields</c> container.
    /// </summary>
    /// <returns>
    ///    The the value of the <c>PIS</c> tax type.
    /// </returns>
    public TaxAmount purchPISTotal_BR()
    {
        return conPeek(displayFields, PurchTotals::posPISTotal_BR());
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchPrepayAvailable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the <c>Available</c> field of the <c>PurchPrepayTable</c> table from the
    ///    <c>displayFields</c> container.
    /// </summary>
    /// <returns>
    ///    The vendor advance available value.
    /// </returns>
    public PurchPrepayAvailable purchPrepayAvailable()
    {
        return (conPeek(displayFields, PurchTotals::posPrepayAvailable()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchPrepayLimit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the <c>Limit</c> field of the <c>PurchPrepayTable</c> table from the
    ///    <c>displayFields</c> container.
    /// </summary>
    /// <returns>
    ///    The vendor advance limit value.
    /// </returns>
    public PurchPrepayLimit purchPrepayLimit()
    {
        return (conPeek(displayFields, PurchTotals::posPrepayLimit()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyValue</Name>
				<Source><![CDATA[
    public PurchQty qtyValue()
    {
        return conPeek(displayFields, PurchTotals::posQty());
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumLinesValue</Name>
				<Source><![CDATA[
    public AmountCur sumLinesValue()
    {
        return conPeek(displayFields, PurchTotals::posBalance());
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumMarkUpValue</Name>
				<Source><![CDATA[
    public MarkupSumPurch sumMarkUpValue()
    {
        return conPeek(displayFields, PurchTotals::posMarkup());
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumTaxValue</Name>
				<Source><![CDATA[
    public TaxAmountCur sumTaxValue()
    {
        return conPeek(displayFields, PurchTotals::posTaxTotal());
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumTaxWithhold_THValue</Name>
				<Source><![CDATA[
    public TaxAmountCur sumTaxWithhold_THValue()
    {
        if (TaxWithholdingGlobalFeature::isExtendedWHTSupportedInCountryRegionOrParamEnabled())
        {
            return (conPeek(displayFields, PurchTotals::posTaxWithholdTotal()));
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSelectionType</Name>
				<Source><![CDATA[
    public int updateSelectionType()
    {
        return enumNum(PurchUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendCreditMaxValue</Name>
				<Source><![CDATA[
    public VendCreditMaxMST vendCreditMaxValue()
    {
        return conPeek(displayFields, PurchTotals::posCreditMax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendFreeValueValue</Name>
				<Source><![CDATA[
    public VendCreditFreeValueMST vendFreeValueValue()
    {
        return conPeek(displayFields, PurchTotals::posFreeValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>volumeValue</Name>
				<Source><![CDATA[
    public Volume volumeValue()
    {
        return conPeek(displayFields, PurchTotals::posVolume());
    }

]]></Source>
			</Method>
			<Method>
				<Name>weightValue</Name>
				<Source><![CDATA[
    public Weight weightValue()
    {
        return conPeek(displayFields, PurchTotals::posWeight());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static PurchTotalsForm_PurchTable  construct()
    {
        return new PurchTotalsForm_PurchTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeDisplayFieldsServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates totals and sets the fields values to be shown on the totals form.
    /// </summary>
    /// <param name="_orderTable">
    /// The order table to calculate totals for.
    /// </param>
    /// <param name="_specQty">
    /// Quantity to calculate totals for.
    /// </param>
    /// <returns>
    /// Container of the field values to be shown on the totals form.
    /// </returns>
    static public container executeDisplayFieldsServer(PurchTable _orderTable, PurchUpdate _specQty)
    {
        PurchTotalsForm_PurchTable totalsForm = PurchtotalsForm::newPurchTotalsForm(_orderTable, enum2int(_specQty));
        PurchTotals                totals = totalsForm.constructTotals();
        
        if (TaxSalesTaxDetailIsNotNeededToggle::instance().isEnabled())
        {
            totals.parmIsSalesTaxDetailNotNeeded(totalsForm.parmSalesTaxDetailIsNotNeeded());
        }

        if (TaxWithholdingGlobalFeature::isCalcWHTInInvoiceEnabled())
        {
            totals.parmIsWHTCalcNeeded(true);
        }

        totals.parmSkipPurchLineSortedList(true);
        totals.parmUpdateTotalsSummary(true);
        totals.calc(true);

        return totals.displayFields();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>