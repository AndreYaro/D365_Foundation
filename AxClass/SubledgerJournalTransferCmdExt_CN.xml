<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerJournalTransferCmdExt_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SubledgerJournalTransferCmdExt_CN</c> class is extension of <c>SubledgerJournalTransferCommand</c> class
/// handles China specific functionality.
/// </summary>
[SourceDocumentExtensionAttribute()]
class SubledgerJournalTransferCmdExt_CN extends SubledgerJournalTransferCommandExtension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canSubscribe</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether to subscribe the command event.
    /// </summary>
    /// <returns>
    /// True if we can subscribe the command event; otherwise, false.
    /// </returns>
    protected boolean canSubscribe()
    {
        return LedgerParameters::isChineseVoucher_CN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertGeneralJourEntryWForSummarization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts <c>GeneralJournalEntry_W</c> record for summarization.
    /// </summary>
    /// <param name="_transferId">
    /// Identifier of transfer process.
    /// </param>
    protected void insertGeneralJourEntryWForSummarization(SubledgerJournalTransferId _transferId)
    {
        GeneralJournalEntry                 generalJournalEntry;
        GeneralJournalEntry_W               generalJournalEntryW;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherLink;
        SubledgerJournalEntry               subledgerJournalEntry;
        LedgerVoucherType_CN                ledgerVoucherTypeCN;
        Voucher_CN                          voucherCN;

        // For each transfer, subledger journal entries in only one company are transferred
        while select RecId, AccountingDate from generalJournalEntry
                group by generalJournalEntry.RecId, generalJournalEntry.AccountingDate,
                    subledgerJournalEntry.VoucherDataAreaId
                where generalJournalEntry.TransferId == _transferId
            join RecId from subledgerVoucherLink
                where subledgerVoucherLink.GeneralJournalEntry == generalJournalEntry.RecId
            join RecId, VoucherDataAreaId from subledgerJournalEntry
                where subledgerJournalEntry.TransferId == _transferId
                    && subledgerJournalEntry.Voucher == subledgerVoucherLink.Voucher

        {
            // Change company because Chinese voucher number is created per company
            changeCompany(subledgerJournalEntry.VoucherDataAreaId)
            {
                ledgerVoucherTypeCN = SubledgerVoucherHelper_CN::getVoucherTypeForSubledgerSummary(_transferId);
                voucherCN = ledgerVoucherTypeCN.getVoucherNumber(generalJournalEntry.AccountingDate);
            }

            generalJournalEntryW.clear();
            generalJournalEntryW.GeneralJournalEntry  = generalJournalEntry.RecId;
            generalJournalEntryW.LedgerVoucherType_CN = ledgerVoucherTypeCN.RecId;
            generalJournalEntryW.Voucher_CN           = voucherCN;
            generalJournalEntryW.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertGeneralJournalEntryW</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts <c>GeneralJournalEntry_W</c> record.
    /// </summary>
    /// <param name="_transferId">
    /// Identifier of transfer process.
    /// </param>
    protected void insertGeneralJournalEntryW(SubledgerJournalTransferId  _transferId)
    {
        GeneralJournalEntry_W               generalJournalEntryW;
        GeneralJournalEntry                 generalJournalEntry;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherLink;
        SubledgerJournalEntry               subledgerJournalEntry;
        SubledgerJournalEntryExt_CN         subledgerJournalEntryExtCN;
        LedgerVoucherType_CN                ledgerVoucherTypeCN;
        AccountingEvent                     accountingEvent;
        RecId                               ledgerVoucherTypeCNId;
        Voucher_CN                          voucherCN;
        Map                                 ledgerVoucherTypeCNIdMap;
        Map                                 voucherCNMap;
        DataAreaId                          dataAreaId;

        ledgerVoucherTypeCNIdMap = new Map(Types::String, Types::Int64);
        voucherCNMap = new Map(Types::String, Types::String);

        SourceDocumentHeader sourceDocumentHeader;

        while select generalJournalEntry
            group by generalJournalEntry.RecId, generalJournalEntry.AccountingDate,
                subledgerJournalEntry.VoucherDataAreaId, sourceDocumentHeader.TypeEnumName,
                sourceDocumentHeader.TypeEnumValue, subledgerJournalEntryExtCN.Voucher,
                subledgerJournalEntryExtCN.LedgerVoucherType
            where generalJournalEntry.TransferId == _transferId
            join RecId from subledgerVoucherLink
                where subledgerVoucherLink.GeneralJournalEntry == generalJournalEntry.RecId
            join RecId, VoucherDataAreaId from subledgerJournalEntry
                where subledgerJournalEntry.TransferId == _transferId
                    && subledgerJournalEntry.Voucher == subledgerVoucherLink.Voucher
                    && subledgerJournalEntry.Ledger == generalJournalEntry.Ledger
                    && subledgerJournalEntry.PostingLayer == generalJournalEntry.PostingLayer
            join RecId from accountingEvent
                where accountingEvent.RecId == subledgerJournalEntry.AccountingEvent
                    && accountingEvent.AccountingDate == generalJournalEntry.AccountingDate
            outer join TypeEnumName, TypeEnumValue from sourceDocumentHeader
                where sourceDocumentHeader.RecId == accountingEvent.SourceDocumentHeader
            outer join LedgerVoucherType, Voucher from subledgerJournalEntryExtCN
                where subledgerJournalEntryExtCN.SubledgerJournalEntry == subledgerJournalEntry.RecId
        {
            dataAreaId = subledgerJournalEntry.VoucherDataAreaId;

            // If subledger journal transfer rule is Scheduled batch + Summarize, Chinese voucher number will not
            // be created in advance. When user do Transfer entry, this would be considered as No Summarize and
            // comes here.Thus Chinese voucher number need to be created here for those lines.
            if (subledgerJournalEntryExtCN.Voucher)
            {
                ledgerVoucherTypeCNId = subledgerJournalEntryExtCN.LedgerVoucherType;
                voucherCN = subledgerJournalEntryExtCN.Voucher;
            }
            else if (voucherCNMap.exists(dataAreaId)
                && !this.shouldCreateNewVoucherCN(sourceDocumentHeader.TypeEnumName, sourceDocumentHeader.TypeEnumValue))
            {
                ledgerVoucherTypeCNId = ledgerVoucherTypeCNIdMap.lookup(dataAreaId);
                voucherCN = voucherCNMap.lookup(dataAreaId);
            }
            else
            {
                changeCompany(dataAreaId)
                {
                    ledgerVoucherTypeCN = SubledgerVoucherHelper_CN::getVoucherTypeForSubledgerSummary(_transferId);
                    voucherCN = ledgerVoucherTypeCN.getVoucherNumber(generalJournalEntry.AccountingDate);

                    ledgerVoucherTypeCNId = ledgerVoucherTypeCN.RecId;
                    ledgerVoucherTypeCNIdMap.insert(dataAreaId, ledgerVoucherTypeCNId);
                    voucherCNMap.insert(dataAreaId, voucherCN);
                }
            }

            generalJournalEntryW.clear();
            generalJournalEntryW.GeneralJournalEntry  = generalJournalEntry.RecId;
            generalJournalEntryW.LedgerVoucherType_CN = ledgerVoucherTypeCNId;
            generalJournalEntryW.Voucher_CN           = voucherCN;
            generalJournalEntryW.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insGeneralJourEntryRelatedEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Occurs after <c>InsertGeneralJourEntryRelated</c> method for the action is called.
    /// </summary>
    /// <param name="_transferId">
    /// Identifier of transfer process.
    /// </param>
    /// <param name="_doSummarization">
    /// The value that indicates whether to do subledger account entry summarization or not.
    /// </param>
    public void insGeneralJourEntryRelatedEventHandler(
        SubledgerJournalTransferId      _transferId,
        boolean                         _doSummarization)
    {
        if (_doSummarization)
        {
            this.insertGeneralJourEntryWForSummarization(_transferId);
        }
        else
        {
            this.insertGeneralJournalEntryW(_transferId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseVoucherNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// (Obsolete) Releases the Chinese voucher number.
    /// </summary>
    /// <param name="_transferId">
    /// Identifier of transfer process.
    /// </param>
    protected void releaseVoucherNumber(SubledgerJournalTransferId _transferId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    protected void subscribe()
    {
        super();

        if (this.canSubscribe())
        {
            command.insertedGeneralJournalEntryRelated += eventhandler(this.insGeneralJourEntryRelatedEventHandler);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCreateNewVoucherCN</Name>
				<Source><![CDATA[
    private boolean shouldCreateNewVoucherCN(EnumName _enumName, SourceDocumentTypeEnumValue _enumValue)
    {
        return (_enumName == enumStr(SourceDocument_ExpenseReport) && _enumValue == SourceDocument_ExpenseReport::ExpenseReport)
            || (_enumName == enumStr(SourceDocument_CustomerInvoice) && _enumValue == SourceDocument_CustomerInvoice::CustomerFreeTextInvoice);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>