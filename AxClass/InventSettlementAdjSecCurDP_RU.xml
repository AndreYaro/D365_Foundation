<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSettlementAdjSecCurDP_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// RDP class for report <c> InventSettlementAdjSecCurDP_RU </c>
/// </summary>
[
    SRSReportParameterAttribute(classStr(InventSettlementAdjSecCurContract_RU)),
    SRSReportQueryAttribute(queryStr(InventSettlementAdjSecCur_RU))
]
public class InventSettlementAdjSecCurDP_RU extends SRSReportDataProviderBase
{
    TmpInventSettlementAdjSecCur_RU tmpInventSettlementAdjSecCur_RU;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTmpInventSettlementAdjSecCur_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>TmpInventSettlementAdjSecCur_RU</c> temporary table.
    /// </summary>
    /// <returns>
    /// <c>TmpInventSettlementAdjSecCur_RU</c> temporary table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(TmpInventSettlementAdjSecCur_RU))]
    public TmpInventSettlementAdjSecCur_RU getTmpInventSettlementAdjSecCur_RU()
    {
        return tmpInventSettlementAdjSecCur_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpInventSettlementAdjSecCur_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// serts all the values into the <c>tmpInventSettlementAdjSecCur_RU</c> temporary table.
    /// </summary>
    /// <param name="_inventTrans">
    /// Passes <c>InventTrans</c> table object.
    /// </param>
    /// <param name="_inventSettlement">
    /// Passes <c>InventSettlement</c> table object.
    /// </param>
    /// <param name="_inventTransOrigin">
    /// Passes <c>InventTransOrigin</c> table object.
    /// </param>
    private void insertTmpInventSettlementAdjSecCur_RU(
        InventTrans _inventTrans,
        InventSettlement _inventSettlement,
        InventTransOrigin _inventTransOrigin)
    {
        tmpInventSettlementAdjSecCur_RU.clear();
        tmpInventSettlementAdjSecCur_RU.Cancelled                       =   _inventSettlement.Cancelled;
        tmpInventSettlementAdjSecCur_RU.ItemId                          =   _inventSettlement.ItemId;
        tmpInventSettlementAdjSecCur_RU.TransDate                       =   _inventSettlement.TransDate;
        tmpInventSettlementAdjSecCur_RU.Voucher                         =   _inventSettlement.Voucher;
        tmpInventSettlementAdjSecCur_RU.SettleModel                     =   _inventSettlement.SettleModel;
        tmpInventSettlementAdjSecCur_RU.CostAmountSecCurAdjustment_RU   =   _inventSettlement.CostAmountAdjustment ;
        tmpInventSettlementAdjSecCur_RU.DateFinancial                   =   _inventTrans.DateFinancial;
        tmpInventSettlementAdjSecCur_RU.Qty                             =   _inventTrans.Qty;
        tmpInventSettlementAdjSecCur_RU.CostAmountSecCurPosted_RU       =   _inventTrans.CostAmountSecCurPosted_RU;
        tmpInventSettlementAdjSecCur_RU.ReferenceCategory               =   _inventTransOrigin.ReferenceCategory;
        tmpInventSettlementAdjSecCur_RU.ReferenceId                     =   _inventTransOrigin.ReferenceId;
        tmpInventSettlementAdjSecCur_RU.StornoTxt_RU                    =   _inventTrans.stornoTxt_RU();
        tmpInventSettlementAdjSecCur_RU.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes business logic used in the report <c>InventSettlementAdjSecCurDP_RU</c>
    /// </summary>
    public void processReport()
    {
        InventTrans         inventTrans;
        TransLink_RU        link;

        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00121, funcName());

        Set excludeSet = new Set(extendedTypeId2Type(extendedTypeNum(RecId)));
        InventSettlementAdjSecCurContract_RU contract = this.parmDataContract() as InventSettlementAdjSecCurContract_RU;
        boolean hideStorno = contract.parmHideStorno();

        if (hideStorno)
        {
            select firstonly RecId from link
                where link.RefTableId == tableNum(InventTrans);
        }

        QueryRun tmpQueryRun = new QueryRun(this.parmQuery());

        if (link)
        {
            while (tmpQueryRun.next())
            {
                inventTrans = tmpQueryRun.get(tableNum(InventTrans));
                TransLink_RU::findInventTransStornoRef(inventTrans, excludeSet);
            }
        }

        tmpQueryRun.reset();

        while (tmpQueryRun.next())
        {
            inventTrans = tmpQueryRun.get(tableNum(InventTrans));
            InventSettlement inventSettlement = tmpQueryRun.get(tableNum(InventSettlement));
            InventTransOrigin inventTransOrigin = tmpQueryRun.get(tableNum(InventTransOrigin));
            if (!excludeSet.in(inventTrans.RecId))
            {
                this.insertTmpInventSettlementAdjSecCur_RU(inventTrans, inventSettlement, inventTransOrigin);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>