<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Barcode</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract public class Barcode
{
    const int MaxStringLength = 250;

    boolean                 encoded;
    BarcodeContentType      barcodeContentType;
    str                     string;
    BarCodeString           barcodeStr;
    BarCodeString           barcodeStrHR;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isValidAssetLabelBarcodeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if the bar code type is valid for fixed asset labels.
    /// </summary>
    /// <returns>true, if is valid; otherwise, false.</returns>
    public boolean isValidAssetLabelBarcodeType()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidLocationLabelBarcodeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if the bar code type is valid for location labels.
    /// </summary>
    /// <returns>true, if is valid; otherwise, false.</returns>
    public boolean isValidLocationLabelBarcodeType()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasFixedLength</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if the bar code type has fixed length.
    /// </summary>
    /// <returns>true, if it has fixed length; otherwise, false.</returns>
    public boolean hasFixedLength()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixedLength</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes the bar code type's fixed length including check digit.
    /// </summary>
    /// <returns>For bar code types with fixed length, the fixed length is returned; otherwise, zero.</returns>
    public Integer fixedLength()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addExtraLookupFields</Name>
				<Source><![CDATA[
    public void addExtraLookupFields(SysTableLookup _sysTableLookup)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>barcodeStr</Name>
				<Source><![CDATA[
    public BarCodeString barcodeStr()
    {
        if (!encoded)
        {
            this.encode();
        }

        return barcodeStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>barcodeStrHR</Name>
				<Source><![CDATA[
    public str barcodeStrHR()
    {
        if (!encoded)
        {
            this.encode();
        }

        return barcodeStrHR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>barcodeType</Name>
				<Source><![CDATA[
    public abstract BarcodeType barcodeType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>clear</Name>
				<Source><![CDATA[
    public void clear()
    {
        string = '';
        encoded = false;
        barcodeStr = '';
        barcodeStrHR = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFont</Name>
				<Source><![CDATA[
    abstract public FontName defaultFont()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>encode</Name>
				<Source><![CDATA[
    public void encode()
    {
        barcodeStr = string;
        barcodeStrHR = string;
        encoded = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupFontName</Name>
				<Source><![CDATA[
    public void lookupFontName(FormStringControl _ctrl)
    {
        TmpFontName             tmpFontName = this.validFontNames(false);
        SysTableLookup          sysTableLookup;

        sysTableLookup = SysTableLookup::newParameters(tableNum(TmpFontName), _ctrl);
        sysTableLookup.addLookupfield(fieldNum(TmpFontName, FontName));
        sysTableLookup.addLookupfield(fieldNum(TmpFontName, WidthHeightRatio));
        this.addExtraLookupFields(sysTableLookup);

        sysTableLookup.parmTmpBuffer(tmpFontName);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>string</Name>
				<Source><![CDATA[
    public str string(
        boolean             _set                = false,
        str                 _string             = '',
        BarcodeContentType  _barcodeContentType = BarcodeContentType::Undefined)
    {
        if (_set)
        {
            if (strLen(_string) > MaxStringLength)
            {
                throw(error("@SYS90717"));
            }
            string              = _string;
            barcodeContentType  = _barcodeContentType;
            encoded             = false;
        }
        return string;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBarcode</Name>
				<Source><![CDATA[
    public boolean validateBarcode(str _barcode)
    {
        return this.validateCharacters(_barcode) && this.validateCheckDigit(_barcode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCharacters</Name>
				<Source><![CDATA[
    protected boolean validateCharacters(BarCodeString _barCodeString)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCheckDigit</Name>
				<Source><![CDATA[
    protected boolean validateCheckDigit(BarCodeString _barCodeString)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFontName</Name>
				<Source><![CDATA[
    public boolean validateFontName(FontName _fontName)
    {
        return this.validFonts().in(_fontName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validFontInfo</Name>
				<Source><![CDATA[
    abstract protected container validFontInfo()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validFontNames</Name>
				<Source><![CDATA[
    protected TmpFontName validFontNames(boolean _warnIfMissing = true)
    {
        TmpFontName         tmpFontName;

        container           validFontInfo           = this.validFontInfo();
        Counter             i;
        container           fontInfo;
        FontName            fontName;
        Integer             widthHeightRatio;
        FontDescription     description;

        if (validFontInfo)
        {
            for (i=1;i<=conLen(validFontInfo);i++)
            {
                fontInfo            = conPeek(validFontInfo,i);
                fontName            = conPeek(fontInfo,1);
                widthHeightRatio    = conPeek(fontInfo,2);
                description         = conPeek(fontInfo,3);
                tmpFontName.insertFont(fontName, widthHeightRatio, description, _warnIfMissing);
            }
        }

        return tmpFontName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validFonts</Name>
				<Source><![CDATA[
    protected Set validFonts()
    {
        Set         validFontNames          = new Set(Types::String);
        container   validFontInfo           = this.validFontInfo();
        Counter     i;
        FontName    fontName;

        if (validFontInfo)
        {
            for (i=1;i<=conLen(validFontInfo);i++)
            {
                fontName = conPeek(conPeek(validFontInfo,i),1);
                validFontNames.add(fontName);
            }
        }

        return validFontNames;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static Barcode construct(BarcodeType _barcodeType)
    {
        Barcode barcode = Barcode::constructNoThrow(_barcodeType);

        if (!barcode)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return barcode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructNoThrow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>Barcode</c> object from a bar code type.
    /// </summary>
    /// <param name = "_barcodeType">The bar code type.</param>
    /// <returns>The instantiated object; otherwise, null.</returns>
    public static Barcode constructNoThrow(BarcodeType _barcodeType)
    {
        BarcodeTypeFactoryAttribute attr = new BarcodeTypeFactoryAttribute(_barcodeType);
        Barcode barcode = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(Barcode), attr) as Barcode;
        return barcode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertModulo10CheckDigit</Name>
				<Source><![CDATA[
    public static str insertModulo10CheckDigit(
        str         _inputString,
        Integer     _stringLength)
    {
        Integer checkDigit = 0;
        Integer counter;
        Integer temp;

        Integer digit(Integer position)
        {
            return any2int(subStr(_inputString, _stringLength + 1 - position, 1));
        }

        counter = 2;
        while (counter <= _stringLength)
        {
            checkDigit += digit(counter);
            counter += 2;
        }
        checkDigit = 3 * checkDigit;

        counter = 3;
        while (counter <= _stringLength)
        {
            checkDigit += digit(counter);
            counter += 2;
        }

        temp = checkDigit mod 10;
        if (temp)
        {
            checkDigit = 10 - temp;
        }
        else
        {
            checkDigit = 0;
        }

        return subStr(_inputString, 1, _stringLength - 1) + num2str(checkDigit, 1,0,0,0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItemBarcode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates and converts the barcode to an item ID.
    /// </summary>
    /// <param name="_buffer">
    ///    The record where the resulting item ID and dimension should be stored; or null.
    /// </param>
    /// <param name="_barCodeString">
    ///    The input value, which is typically either an item ID or an item barcode.
    /// </param>
    /// <returns>
    ///    The ID of the identified item or the input barcode.
    /// </returns>
    /// <remarks>
    ///    Must be called before the <c>validateField</c> method is called.Note that the update of a joined
    ///    inventory dimension data source in a form may require special handling.
    /// </remarks>
    public static ItemId validateItemBarcode(
        Common          _buffer,
        BarCodeString   _barCodeString)
    {
        InventItemBarcode   inventItemBarcode;
        InventDim           inventDim;

        boolean updateCallerItem(ItemId _itemId)
        {
            FieldId             fieldItemId     = fieldName2id(_buffer.TableId, fieldStr(InventTable,ItemId));

            if (fieldItemId)
            {
                _buffer.(fieldItemId) = _itemId;
                return true;
            }
            return false;
        }

        void updateCallerInventDimId(InventDimId _inventDimId, ItemId _itemId)
        {
            FieldId             fieldInventDimId;
            if (_inventDimId != InventDim::inventDimIdBlank())
            {
                fieldInventDimId = fieldName2id(_buffer.TableId,fieldStr(InventDim,InventDimId));
                if (fieldInventDimId)
                {
                    inventDim = InventDim::find(_buffer.(fieldInventDimId));
                    inventDim.mergeUsedDim(InventDimGroupSetup::newItemId(_itemId), InventDim::find(_inventDimId));
                    _buffer.(fieldInventDimId) = InventDim::findOrCreate(inventDim).InventDimId;
                }
            }
        }

        if (!_barCodeString)
        {
            return '';
        }

        if (InventTable::exist(_barCodeString))
        {
            // input string is just an item ID, no further conversion
            updateCallerItem(_barCodeString);
            return _barCodeString;
        }

        inventItemBarcode = InventItemBarcode::findInputBarcode(_barCodeString);
        if (inventItemBarcode)
        {
            // input string is a known barcode for an item
            if (updateCallerItem(inventItemBarcode.ItemId))
            {
                updateCallerInventDimId(inventItemBarcode.InventDimId, inventItemBarcode.ItemId);
            }
            return inventItemBarcode.ItemId;
        }

        return _barCodeString;  // Just return the input string for standard validation
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>