<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankMarkChequeReconcile</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankMarkChequeReconcile extends RunBase
{
    protected BankChequeNum fromCheque;
    protected BankChequeNum toCheque;

    private BankAccountStatement bankAccountStatement;
    private DialogGroup fromToGroup;
    private DialogField dialogFromCheque;
    private DialogField dialogToCheque;

    protected LedgerJournalTrans ledgerJournalTrans;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        FromCheque,
        ToCheque
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = new DialogRunbase("@SYS53123", this);

        fromToGroup = dialog.addGroup('');
        fromToGroup.columns(2);
        fromToGroup.frameType(1);

        dialog.addGroup("@SYS12899",fromToGroup);

        dialogFromCheque = dialog.addFieldValue(extendedTypeStr(BankChequeNum), fromCheque, "@SYS4083");
        dialogToCheque = dialog.addFieldValue(extendedTypeStr(BankChequeNum), toCheque, "@SYS8828");

        FormBuildStringControl fromChequeControl = dialogFromCheque.control() as FormBuildStringControl;
        FormBuildStringControl toChequeControl = dialogToCheque.control() as FormBuildStringControl;

        toChequeControl.mandatory(true);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        fromCheque = dialogFromCheque.value();
        toCheque = dialogToCheque.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        BankAccountTrans bankAccountTrans;

        LedgerJournalTable ledgerJournalTable;
        Args args;
        DimensionAttributeValueCombination dimAttrValueCombo;

        #ISOCountryRegionCodes

        ttsbegin;

        if (FeatureStateProvider::isFeatureEnabled(BankBridgingVendorTransactionDetailsFeature::instance()) &&
            BankMarkChequeReconcileClearedDateSetFlight::instance().isEnabled())
        {
            update_recordset bankAccountTrans
                setting Included = NoYes::Yes,
                    AccountStatement = bankAccountStatement.AccountStatementNum,
                    AccountStatementDate = bankAccountStatement.AccountStatementDate,
                    ClearedDate = bankAccountStatement.AccountStatementDate
                where bankAccountTrans.AccountId == bankAccountStatement.AccountId
                    && bankAccountTrans.ChequeNum >= fromCheque
                    && bankAccountTrans.ChequeNum <= toCheque
                    && bankAccountTrans.Manual == false
                    && bankAccountTrans.Reconciled == false
                    && bankAccountTrans.Included == false
                    && bankAccountTrans.CancelPending == NoYes::No;
        }
        else
        {
            update_recordset bankAccountTrans
                setting Included = NoYes::Yes,
                    AccountStatement = bankAccountStatement.AccountStatementNum,
                    AccountStatementDate = bankAccountStatement.AccountStatementDate
                where bankAccountTrans.AccountId == bankAccountStatement.AccountId
                    && bankAccountTrans.ChequeNum >= fromCheque
                    && bankAccountTrans.ChequeNum <= toCheque
                    && bankAccountTrans.Manual == false
                    && bankAccountTrans.Reconciled == false
                    && bankAccountTrans.Included == false
                    && bankAccountTrans.CancelPending == NoYes::No;
        }

        ttscommit;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]) && FormDataUtil::getFormDataSource(ledgerJournalTrans))
        {
            args = new Args();

            ttsbegin;

            while select ledgerJournalTrans
                where ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank
                    && (ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::Sent
                        || ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::Recieved)
                    && ledgerJournalTrans.BankChequeNum >= fromCheque
                    && ledgerJournalTrans.BankChequeNum <= toCheque
                join RecId from dimAttrValueCombo
                    where dimAttrValueCombo.RecId == ledgerJournalTrans.OffsetLedgerDimension
                        && dimAttrValueCombo.DisplayValue == bankAccountStatement.AccountId
                exists join ledgerJournalTable
                    where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
                        && ledgerJournalTable.Posted == NoYes::No
            {
                args.record(ledgerJournalTrans);

                if (ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
                {
                    new MenuFunction(menuItemActionStr(PaymReconConfirmVendPaym), MenuItemType::Action).run(args);
                }
                else if (ledgerJournalTrans.AccountType == LedgerJournalACType::Cust)
                {
                    new MenuFunction(menuItemActionStr(PaymReconConfirmCustPaym), MenuItemType::Action).run(args);
                }
            }

            ttscommit;
        }
        // Check if there were checks in the range that were pending cancellation and display message
        select firstonly bankAccountTrans
            where bankAccountTrans.AccountId == bankAccountStatement.AccountId
                && bankAccountTrans.ChequeNum >= fromCheque
                && bankAccountTrans.ChequeNum <= toCheque
                && bankAccountTrans.Manual == false
                && bankAccountTrans.Reconciled == false
                && bankAccountTrans.Included == false
                && bankAccountTrans.CancelPending == NoYes::Yes;

        if (bankAccountTrans.RecId != 0)
        {
            warning("@SYS117705");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBankAccountStatement</Name>
				<Source><![CDATA[
    public void setBankAccountStatement(BankAccountStatement _bankAccountStatement)
    {
        bankAccountStatement = _bankAccountStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerJournalTrans_RU</Name>
				<Source><![CDATA[
    private void setLedgerJournalTrans_RU(LedgerJournalTrans _ledgerJournalTrans)
    {
        ledgerJournalTrans = _ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ok = super(_calledFrom);

        if (toCheque == '')
        {
            ok = checkFailed(strFmt("@SYS136411", "@SYS8828"));
        }

        if (ok && (fromCheque > toCheque))
        {
            ok = checkFailed("@SYS53129");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS53123";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        BankMarkChequeReconcile bankMarkChequeReconcile;
        BankAccountStatement bankAccountStatement;

        #ISOCountryRegionCodes

        boolean isRU = (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]));

        if ((isRU && args.caller().name() == formStr(BankReconciliation_RU))
            || (!isRU && args.dataset() == tableNum(BankAccountTrans)
                && args.caller().name() == formStr(BankReconciliation)))
        {
            bankAccountStatement = args.caller().bankAccountStatement();

            bankMarkChequeReconcile = new BankMarkChequeReconcile();
            bankMarkChequeReconcile.setBankAccountStatement(bankAccountStatement);

            if (isRU)
            {
                bankMarkChequeReconcile.setLedgerJournalTrans_RU(args.caller().ledgerJournalTrans());
            }

            if (bankMarkChequeReconcile.prompt())
            {
                bankMarkChequeReconcile.runOperation();
            }
        }
        else
        {
            throw error("@SYS53138");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>