<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureJourCreateAdvAdjCorCust_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FactureJourCreateAdvAdjCorCust_RU extends FactureJourCreateAdvAdjCor_RU implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findInvoiceJourByTrans</Name>
				<Source><![CDATA[
    protected Common findInvoiceJourByTrans(Common _trans)
    {
        CustInvoiceTrans localCustInvoiceTrans = _trans as CustInvoiceTrans;
        ;

        return CustInvoiceJour::findFromCustInvoiceTrans(localCustInvoiceTrans.SalesId,
                                                         localCustInvoiceTrans.InvoiceId,
                                                         localCustInvoiceTrans.InvoiceDate,
                                                         localCustInvoiceTrans.NumberSequenceGroup,
                                                         true,
                                                         ! localCustInvoiceTrans.InvoiceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInvoiceTransByFacture</Name>
				<Source><![CDATA[
    protected Common findInvoiceTransByFacture()
    {
        return CustInvoiceTrans::findFacture_RU(factureTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournal</Name>
				<Source><![CDATA[
    protected void initJournal()
    {
        DictType            dictType;
        NumberSequenceTable numTable;
        boolean             error   = false;

        numberSeq = NumberSeq::newGetNum(CustParameters::numRefCustFactureId_RU(),false,true);

        if (! numberSeq)
        {
            warning(strfmt("@SYS53911", "@GLS106861", "@SYS25196"));
            error    = true;
        }
        else
        {
            numTable = numberSeq.parmNumTableNum(numTable);
            if (numTable.Manual)
            {
                dictType = new DictType(extendedtypenum(CustFactureId_RU));
                warning(strfmt("@GLS104926", dictType.label(), "@SYS25196"));
                error    = true;
            }
        }

        if (error)
        {
            throw error("@GLS106933");
        }

        super();

        factureJour.FactureId             = numberSeq.num();
        factureJour.NumberSequenceGroupId = factureExtIdNumSeq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    public FactureModule_RU module()
    {
        return FactureModule_RU::Cust;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>