<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTrialBalanceRptController_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class <c>LedgerTrialBalanceRptController_CN</c> is a controller class
/// for <c>LedgerTrialBalanceReport_CN</c> report.
/// </summary>
public class LedgerTrialBalanceRptController_CN extends SrsReportRunController implements BatchRetryable
{
    #define.DateStr('DateStr')

    SrsReportRdlDataContract    rdlContract;
    QueryBuildRange             rangeLevel;
    QueryBuildDataSource        dsLevel;
    TransDate                   periodStart;
    TransDate                   periodEnd;
    Voucher                     voucher;
    Voucher_CN                  voucherCN;
    LedgerVoucherTypeId_CN      voucherType;
    Level                       levelMin;
    boolean                     isShow;
    Query                       query;
    TempStr                     dateStr;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getParmValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Getting values from form.
    /// </summary>
    /// <param name="_periodStart">
    /// <c>_periodStart</c> to which it is assigned to
    /// </param>
    /// <param name="_periodEnd">
    /// <c>_periodEnd</c> to which it is assigned to
    /// </param>
    /// <param name="_voucher">
    /// <c>_voucher</c> to which it is assigned to
    /// </param>
    /// <param name="_voucherCN">
    /// <c>_voucherCN</c> to which it is assigned to
    /// </param>
    /// <param name="_voucherType">
    /// <c>_voucherType</c> to which it is assigned to
    /// </param>
    /// <param name="_levelMin">
    /// <c>_levelMin</c> to which it is assigned to
    /// </param>
    /// <param name="_isShow">
    /// <c>_isShow</c> to which it is assigned to
    /// </param>
    public void getParmValues(
        TransDate              _periodStart,
        TransDate              _periodEnd,
        Voucher                _voucher,
        Voucher_CN             _voucherCN,
        LedgerVoucherTypeId_CN _voucherType,
        Level                  _levelMin,
        Boolean                _isShow)
    {
        periodStart     = _periodStart;
        periodEnd       = _periodEnd;
        voucher         = _voucher;
        voucherCN       = _voucherCN;
        voucherType     = _voucherType;
        levelMin        = _levelMin;
        isShow          = _isShow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
        protected void prePromptModifyContract()
    {
        QueryBuildDataSource dsGeneral;
        QueryBuildRange      rangeAccountingDate;
        QueryBuildRange      rangeVoucherCN;
        QueryBuildDataSource dsSubledger;
        QueryBuildRange      rangeVoucher;
        QueryBuildDataSource dsLedgerVoucher;
        QueryBuildRange      rangeLedgerVoucher;

        LedgerTrialBalanceReportContract_CN contract;
        contract = this.parmReportContract().parmRdpContract() as LedgerTrialBalanceReportContract_CN;

        if (isShow)
        {
            contract.parmLedgerPrintLayoutCurrency(LedgerPrintLayoutCurrency_CN::DefaultCurrency);
        }
        else
        {
            contract.parmLedgerPrintLayoutCurrency(LedgerPrintLayoutCurrency_CN::ForeignCurrency);
        }

        query = this.getFirstQuery();
        query.clearQueryFilters();

        dsGeneral = query.dataSourceTable(tablenum(GeneralJournalEntry));
        rangeAccountingDate = dsGeneral.findRange(fieldnum(GeneralJournalEntry, AccountingDate));
        rangeAccountingDate.value(queryRange(periodStart, periodEnd));

        dsGeneral = query.dataSourceTable(tableNum(GeneralJournalEntry_W));
        rangeVoucherCN = SysQuery::findOrCreateRange(dsGeneral, fieldNum(GeneralJournalEntry_W, Voucher_CN));
        rangeVoucherCN.value(voucherCN);

        dsSubledger = query.dataSourceTable(tablenum(SubledgerVoucherGeneralJournalEntry));
        rangeVoucher = dsSubledger.findRange(fieldnum(SubledgerVoucherGeneralJournalEntry, Voucher));
        rangeVoucher.value(voucher);

        dsLedgerVoucher = query.dataSourceTable(tablenum(LedgerVoucherType_CN));
        rangeLedgerVoucher = SysQuery::findOrCreateRange(dsLedgerVoucher, fieldnum(LedgerVoucherType_CN, Id));
        rangeLedgerVoucher.value(voucherType);

        contract.parmLevel(levelMin);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
        protected void preRunModifyContract()
    {
        #define.Quote('"')
        #define.Space(' ')

        TempStr     dateRangeStr;

        query = this.getFirstQuery();

        rdlContract = this.parmReportContract().parmRdlContract();

        dateRangeStr = query.dataSourceTable(
            tablenum(GeneralJournalEntry)).findRange(fieldnum(
            GeneralJournalEntry,
            AccountingDate)).value();

        dateStr = strRem(dateRangeStr, #Quote);
        dateStr = strRem(dateStr, #Space);

        rdlContract.setValue(#DateStr, dateStr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCN00012, funcName());

        LedgerTrialBalanceRptController_CN controller  = _args.parmObject();

        if (controller)
        {
            controller.parmReportName(ssrsReportStr(LedgerTrialBalanceReport_CN, Report));
            controller.parmArgs(_args);
            controller.startOperation();
        }
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>