<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxSalesEmpty</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Empty tax sales used for core tax sales when GTE is enabled
/// </summary>
class TaxSalesEmpty extends TaxSales
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTaxAdjustmentTypes</Name>
				<Source><![CDATA[
    protected void addTaxAdjustmentTypes()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowAdjustBaseAmountForTaxAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the transaction supports adjusting the calculated base amount when the tax is
    /// included in item price and the user adjusts the tax amount.
    /// </summary>
    /// <returns>
    /// true if the transaction supports adjusting the calculated base amount; otherwise, false.
    /// </returns>
    public boolean allowAdjustBaseAmountForTaxAdjustment()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowSingleLineAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the transaction supports adjusting a single line.
    /// </summary>
    /// <returns>
    /// true if adjusting a single line is supported; otherwise, false.
    /// </returns>
    public boolean allowSingleLineAdjustment()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    TaxAmount calc()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateLineSpecificTaxCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the taxes for an individual line. This function does not calculate codes that are
    /// considered based on invoice total, tax on tax, and others It calculates only tax codes that are
    /// line specific.
    /// </summary>
    /// <returns>
    /// The tax amount calculated for this line for all codes which are not based on invoice total.
    /// </returns>
    protected TaxAmount calculateLineSpecificTaxCodes()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates taxes total taxes excluding use taxes. This is the base calculate taxes method derived
    ///    classes are required to implement.
    /// </summary>
    /// <returns>
    ///    The tax amount excluding the use tax.
    /// </returns>
    public TaxAmountCur calculateTax()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTaxForLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates taxes for a transaction line.
    /// </summary>
    /// <returns>
    /// The tax amount excluding use tax for the transaction line.
    /// </returns>
    [HookableAttribute(true)]
    protected TaxAmount calculateTaxForLine()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalTaxCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the taxes that are based on the invoice total.
    /// </summary>
    /// <returns>
    /// The total tax amount calculated to this point.
    /// </returns>
    /// <remarks>
    /// This method does not calculate codes that are considered line-specific.
    /// </remarks>
    protected TaxAmountCur calculateTotalTaxCodes()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureTaxForLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Configures the tax engine for a transaction line.
    /// </summary>
    /// <param name="_taxableLine">
    /// An instance of the <c>TaxableLine</c> interface that represents a transaction line.
    /// </param>
    protected void configureTaxForLine(TaxableLine _taxableLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalizeCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finalizes tax calculations by processing tax adjustments and optionally inserting records into the
    ///    <c>TaxUncommitted</c> and <c>SourceDoucmentLine</c> tables.
    /// </summary>
    /// <param name="_calculateTaxDifferenceAmount">
    ///    true if tax difference amount need to be calculated; optional.
    /// </param>
    /// <param name="_doIsolateTransactionScope">
    /// true if <c>TaxUncommitted</c> should be maintained in a independent transaction scope; otherwise false.
    /// </param>
    /// <returns>
    ///    The final tax total amount.
    /// </returns>
    protected TaxAmountCur finalizeCalculation(
        boolean _calculateTaxDifferenceAmount = false,
        boolean _doIsolateTransactionScope = false
    )
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaintainExistingTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>maintainExistingTaxUncommitted</c> value that indicates whether new records will
    ///    be added to the <c>TaxUncommitted</c> table.
    /// </summary>
    /// <returns>
    ///    true if newly calculated tax lines will be added to the <c>TaxUncommitted</c> table; otherwise,
    ///    false.
    /// </returns>
    public boolean getMaintainExistingTaxUncommitted()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInstance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the instatce of the <c>TaxCalculationEmpty</c> object.
    /// </summary>
    /// <param name="_initializationClass">
    ///    The initialization class for the given transaction.
    /// </param>
    /// <returns>
    ///    The TaxCalculationEmpty.
    /// </returns>
    public static TaxCalculationEmpty getInstance(Object _initializationClass)
    {
        return new TaxCalculationEmpty(_initializationClass, false, false, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTaxForLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads transaction line information into the <c>Tax</c> table.
    /// </summary>
    /// <param name="_amountInclTax">
    ///    A Boolean value that specifies whether the line amount includes tax.
    /// </param>
    /// <param name="_baseAmount">
    ///    The line amount excluding tax.
    /// </param>
    /// <param name="_baseAmountIncludingTax">
    ///    The line amount.
    /// </param>
    /// <param name="_dimensionDefault">
    ///    The default dimensions.
    /// </param>
    /// <param name="_operationLedgerDimension">
    ///    The operation account.
    /// </param>
    /// <param name="ledgerPostingType">
    ///    The ledger posting type for the transaction line.
    /// </param>
    /// <param name="_unitAmount">
    ///    The unit amount for the line.
    /// </param>
    /// <param name="_itemId">
    ///    The item ID if inventory is supported.
    /// </param>
    /// <param name="_quantity">
    ///    The quantity from the transaction line.
    /// </param>
    /// <param name="_baseUnit">
    ///    The unit on the transaction line.
    /// </param>
    /// <param name="_exchRate_W">
    ///    The exchange rate
    /// </param>
    /// <param name="_vatDueDate_W">
    ///    The VAT register date.
    /// </param>
    /// <returns>
    ///    The base amount, excluding taxes and cash discounts.
    /// </returns>
    protected TaxAmountCur initializeTaxForLine(boolean _amountInclTax,
                                                TaxBase _baseAmount,
                                                TaxBase _baseAmountIncludingTax,
                                                DimensionDefault _dimensionDefault,
                                                LedgerDimensionAccount _operationLedgerDimension,
                                                LedgerPostingType ledgerPostingType,
                                                TaxBase _unitAmount = 0,
                                                ItemId _itemId = '',
                                                Qty _quantity = 0,
                                                UnitOfMeasureSymbol _baseUnit = '',
                                                ExchRate            _exchRate_W = 0,
                                                VatDueDate_W        _vatDueDate_W = dateNull()
                                                )
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxTransactionExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize default tax exchange rate
    /// </summary>
    protected void initTaxTransactionExchangeRate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadFromTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads tax records from the <c>TaxUncommitted</c> table into the <c>TmpTaxWorkTrans</c> table.
    /// </summary>
    protected void loadFromTaxUncommitted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustContinueCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to continue the tax calculation.
    /// </summary>
    /// <returns>
    /// true if continue the tax calculation ; otherwise, false.
    /// </returns>
    protected boolean mustContinueCalculation()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the line amount from the <c>SalesFormLetter</c> instance.
    /// </summary>
    /// <returns>The line amount.</returns>
    protected AmountCur retrieveLineAmount()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveBaseAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the line amount excluding tax (base amount) from the <c>SalesFormLetter</c> instance.
    /// </summary>
    /// <param name = "_lineAmount">Line amount.</param>
    /// <returns>The line amount excluding tax.</returns>
    protected TaxBaseCur retrieveBaseAmount(AmountCur _lineAmount)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveEndDiscPercent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total discount percent from the <c>SalesFormLetter</c> instance.
    /// </summary>
    /// <returns>The total discount percent.</returns>
    [Replaceable]
    protected Percent retrieveEndDiscPercent()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcMarkup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performes the calculation of the tax markup, based on the <c>salesFormLetter</c> variable. This method is called from the <c>calc</c> method.
    /// </summary>
    /// <param name="_amountInclTax">
    ///   Map which will be used to store the tax included line amounts for tax included in item price scenarios.
    /// </param>
    /// <param name="_amountExclTax">
    ///   Map which will be used to store the tax excluded line amounts for tax included in item price scenarios.
    /// </param>
    protected void calcMarkup(Map _amountInclTax, Map _amountExclTax)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipMarkupTransCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether markup transaction calculation need to skip.
    /// </summary>
    /// <param name="_markupTrans">
    /// A record of the <c>MarkupTrans</c> table.
    /// </param>
    /// <returns>true if markup transaction calculation need to skip; otherwise, false.</returns>
    [Replaceable]
    protected boolean skipMarkupTransCalculation(MarkupTrans _markupTrans)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureTaxForMarkupLine</Name>
				<Source><![CDATA[
    protected void configureTaxForMarkupLine()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureTaxForSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Configures tax calculation for sales line.
    /// </summary>
    protected void configureTaxForSalesLine()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAdjustmentDetailDescription</Name>
				<Source><![CDATA[
    public TaxAdjustmentDetailDescription getTaxAdjustmentDetailDescription(RefTableId _sourceTableId, RefRecId _sourceRecId)
    {
        TaxAdjustmentDetailDescription taxAdjustmentDetailDescription;

        return taxAdjustmentDetailDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAdjustmentDetailReference</Name>
				<Source><![CDATA[
    public TaxAdjustmentDetailReference getTaxAdjustmentDetailReference(RefTableId _sourceTableId, RefRecId _sourceRecId)
    {
        TaxAdjustmentDetailReference taxAdjustmentDetailReference;

        return taxAdjustmentDetailReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAdjustmentDetailType</Name>
				<Source><![CDATA[
    public TaxAdjustmentDetailType getTaxAdjustmentDetailType(RefTableId _sourceTableId, RefRecId _sourceRecId)
    {
        TaxAdjustmentDetailType taxAdjustmentDetailType;

        return taxAdjustmentDetailType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventProfileTaxTrans_RU</Name>
				<Source><![CDATA[
    protected boolean inventProfileTaxTrans_RU()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimension_RU</Name>
				<Source><![CDATA[
    protected LedgerDimensionDefaultAccount ledgerDimension_RU(TmpTaxWorkTrans _tmpTaxWorkTrans, TaxLedgerAccountGroup _taxLedgerAccountGroup)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPerLineTaxAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads tax adjustments that are adjusting taxes for a specific line.
    /// </summary>
    /// <param name="_companyId">
    /// A value that specifies whether a tax adjustment can be located in another company. If they can, the
    /// current company and passed in company will be checked for adjustments.
    /// </param>
    /// <param name="_sourceTableId">
    /// The table ID of the transaction line.
    /// </param>
    /// <param name="_sourceRecId">
    /// The record ID of the transaction line.
    /// </param>
    /// <param name="_amountInclTax">
    /// A collection of transaction amounts that include tax amounts.
    /// </param>
    protected void loadPerLineTaxAdjustments(SelectableDataArea _companyId, RefTableId _sourceTableId, RefRecId _sourceRecId, Map _amountInclTax)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadTaxAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads tax adjustments that are adjusting taxes for a transaction.
    /// </summary>
    /// <param name="_amountInclTax">
    /// A collection of transaction amounts that include tax amounts.
    /// </param>
    protected void loadTaxAdjustments(Map _amountInclTax)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupTransRecId_RU</Name>
				<Source><![CDATA[
    public RecId markupTransRecId_RU()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrGetReturnTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the tax total related to the return portion of the order.
    /// </summary>
    /// <returns>
    ///     The tax total return to the return portion of the order.
    /// </returns>
    TaxAmountCur mcrGetReturnTaxAmount()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrOrderBalanceAbsoluteValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the balance of a sales order.
    /// </summary>
    /// <param name="_recId">
    /// The record ID used to find the appropriate <c>MCRorderBalancesAbsoluteValue</c> record.
    /// </param>
    /// <returns>
    /// The balance of a sales order if one is found; otherwise, 0.
    /// </returns>
    public AmountCur mcrOrderBalanceAbsoluteValue(RecId _recId)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetLedgerDimension_RU</Name>
				<Source><![CDATA[
    protected LedgerDimensionDefaultAccount offsetLedgerDimension_RU(TaxLedgerAccountGroup _taxLedgerAccountGroup)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderBalance</Name>
				<Source><![CDATA[
    public AmountCur orderBalance(RecId _recId)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoicePostingType_RU</Name>
				<Source><![CDATA[
    public SalesInvoicePostingType_RU parmInvoicePostingType_RU(SalesInvoicePostingType_RU _invoicePostingType = invoicePostingType)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentSourceRecId</Name>
				<Source><![CDATA[
    public RefRecId parmParentSourceRecId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentSourceTableId</Name>
				<Source><![CDATA[
    public RefTableId parmParentSourceTableId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingProfile_RU</Name>
				<Source><![CDATA[
    protected PostingProfile postingProfile_RU()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseChargeAmount_W</Name>
				<Source><![CDATA[
    public TaxAmountCur reverseChargeAmount_W()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceLinesHaveTaxGroups</Name>
				<Source><![CDATA[
    protected boolean sourceLinesHaveTaxGroups()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the <c>RecId</c> of the transaction that is to be taxed. For instance, if the tax is called from a <c>SalesLine</c>, this method will return the <c>RecId</c> of that <c>SalesLine</c>.
    /// </summary>
    /// <returns>
    ///    The ID of the transaction to be taxed.
    /// </returns>
    /// <remarks>
    ///    This method is overridden by derived methods.
    /// </remarks>
    public RecId sourceRecId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the <c>TableId</c> of the transaction that is to be taxed. That is, if the tax is called from a <c>SalesLine</c>, this method will return the <c>TableId </c>of the <c>SalesLine</c>.
    /// </summary>
    /// <returns>
    ///    The ID of the transaction to be taxed.
    /// </returns>
    /// <remarks>
    ///    This method is overridden by derived methods.
    /// </remarks>
    public RefTableId sourceTableId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalTaxAmountBySign_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///   This method returns the actual tax amount.
    /// </summary>
    /// <param name="_includeUseTax">
    ///    A flag that indicates whether use tax should be included in the tax total.
    /// </param>
    /// <returns>
    ///   The actual tax amount in transactional currency.
    /// </returns>
    public container totalTaxAmountBySign_RU(boolean _includeUseTax = false)
    {
        return [0, 0];
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSubLedgerJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the current transaction to calculate supports the <c>SubLedgerDistributions</c>
    ///    or <c>SubLedgerJournalLines</c> records. By default, this base implementation is that they do not
    ///    support them. As the individual transaction support the sub-ledger, they must override this method
    ///    and return true.
    /// </summary>
    /// <returns>
    ///    true if the current transaction to calculate supports the <c>SubLedgerDistributions</c> or
    ///    <c>SubLedgerJournalLines</c> records; otherwise, false.
    /// </returns>
    public boolean useSubLedgerJournalLines()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>Tax</c> class should use the <c>TaxUncommitted</c> table.
    /// </summary>
    /// <returns>
    ///    true if the <c>Tax</c> class should use the <c>TaxUncommitted</c> table; otherwise, false.
    /// </returns>
    public boolean useTaxUncommitted()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTxt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the transaction text for the current tax transaction.
    /// </summary>
    /// <returns>
    ///    The <c>ItemId</c> value of the <c>SalesLine</c> record if present; otherwise the sales category of
    ///    the <c>SalesLine</c> record.
    /// </returns>
    protected TransTxt transTxt()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxWorkTrans_RU</Name>
				<Source><![CDATA[
    protected void updateTaxWorkTrans_RU(TmpTaxWorkTrans _taxWorkTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSalesTaxAdjustments</Name>
				<Source><![CDATA[
    public boolean useSalesTaxAdjustments()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TaxSales construct(SalesCalcTax_Sales   _salesForm)
    {
        TaxSales taxSales = new TaxSales();
        return taxSales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custTaxGroup</Name>
				<Source><![CDATA[
    static TaxGroup custTaxGroup(CustDlvTermId _dlvTermId, TaxGroup _taxGroup, LogisticsLocationRecId _location = 0)
    {
        return "";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>