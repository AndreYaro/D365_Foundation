<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmaCopyAgreementLines</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>SMACopyAgreementLines</c> class is used to copy service agreement lines.
/// </summary>
public class SmaCopyAgreementLines extends RunBase
{
    SMAAgreementTable           destinationAgreementTable;
    SMAServiceOrderTable        destinationServiceOrderTable;

    SMACopyLines                copyLines;

    // Dialog
    DialogRunbase               dialog;

    QueryRun                    queryRun;
    SMAAgreementId              criteriaAgreementId;
    ProjId                      criteriaProjId;

    container                   templateLineList;

    SMACopyFrom                 copyType;
    DialogField                 dialogIncludeTasks;
    DialogField                 dialogIncludeObjects;

    NoYes                       includeTasks;
    NoYes                       includeObjects;

    #define.CurrentVersion(2)
    #localMacro.CurrentList
        includeTasks,
        includeObjects
    #endMacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        dialog = super();
        this.initDialogCopyLines();

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        includeObjects  = dialogIncludeObjects.value();
        includeTasks    = dialogIncludeTasks.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCopyLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the class from the given arguments.
    /// </summary>
    /// <param name="_args">
    ///    The given arguments to use to create the <c>SMACopyAgreementLines</c> instance.
    /// </param>
    protected void initCopyLines(Args _args = null)
    {
        SMAServiceOrderTable    serviceOrderTable;

        copyLines = SMACopyLines::construct();
        if (_args && _args.parmEnumType() == enumnum(SMACopyFrom))
        {
            this.getLast();
            if (_args.dataset() == tablenum(SMAAgreementTable))
            {
                this.parmDestinationAgreement(_args.record());
                this.parmCriteriaAgreementId('');
                this.parmCriteriaProjId('');
            }
            else if (_args.dataset() == tablenum(SMAServiceOrderTable))
            {
                this.parmDestinationServiceOrder(_args.record());
                serviceOrderTable   = _args.record();
                this.parmCriteriaAgreementId(serviceOrderTable.AgreementId);
                this.parmCriteriaProjId(serviceOrderTable.ProjId);
            }

            this.parmCopyType(_args.parmEnum());
            this.queryBuild();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDialogCopyLines</Name>
				<Source><![CDATA[
    protected void initDialogCopyLines()
    {
        // Copy lines from service agreement
        dialog.caption("@SYS79064");

        // Include
        dialog.addGroup("@SYS28109");

        // Include
        dialog.addGroup("@SYS28109");

        // Objects
        includeObjects = NoYes::Yes;
        dialogIncludeObjects = dialog.addFieldValue(enumstr(NoYes), includeObjects, "@SYS88962");
        // Tasks
        includeTasks = NoYes::Yes;
        dialogIncludeTasks   = dialog.addFieldValue(enumstr(NoYes), includeTasks, "@SYS87778");
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container pack = connull();
        if (queryRun)
        {
            pack = queryRun.pack();
        }
        return [#CurrentVersion, #CurrentList] + [pack];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopyType</Name>
				<Source><![CDATA[
    public SMACopyFrom parmCopyType(SMACopyFrom _copyType = copyType)
    {
        // Set copy type (source of the copy)
        copyType = _copyType;
        return copyType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCriteriaAgreementId</Name>
				<Source><![CDATA[
    public SMAAgreementId parmCriteriaAgreementId(SMAAgreementId _agreementId = criteriaAgreementId)
    {
        criteriaAgreementId = _agreementId;
        return criteriaAgreementId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCriteriaProjId</Name>
				<Source><![CDATA[
    public ProjId parmCriteriaProjId(ProjId _projId = criteriaProjId)
    {
        criteriaProjId = _projId;
        return criteriaProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDestinationAgreement</Name>
				<Source><![CDATA[
    public SMAAgreementTable parmDestinationAgreement(SMAAgreementTable _agreementTable = destinationAgreementTable)
    {
        // Set the destination agreement
        destinationAgreementTable = _agreementTable;

        return destinationAgreementTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDestinationServiceOrder</Name>
				<Source><![CDATA[
    public SMAServiceOrderTable parmDestinationServiceOrder(SMAServiceOrderTable _serviceOrderTable = destinationServiceOrderTable)
    {
        // Set id of the destination service order
        destinationServiceOrderTable = _serviceOrderTable;
        return destinationServiceOrderTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    public QueryRun queryBuild()
    {
        QueryBuildDataSource    qbdsSMAAgreementTable;
        QueryBuildDataSource    qbdsSMAAgreementLine;
        Query                   q;

        q = new Query();
        qbdsSMAAgreementTable = q.addDataSource(tablenum(SMAAgreementTable));
        qbdsSMAAgreementLine = qbdsSMAAgreementTable.addDataSource(tablenum(SMAAgreementLine));

        qbdsSMAAgreementLine.relations(true);

        // Ranges on SMAAgreementTable
        qbdsSMAAgreementTable.addRange(fieldnum(SMAAgreementTable, AgreementId)).value(criteriaAgreementId);
        qbdsSMAAgreementTable.addRange(fieldnum(SMAAgreementTable, ProjId)).value(criteriaProjId);

        qbdsSMAAgreementTable.addRange(fieldnum(SMAAgreementTable, AgreementGroupId));
        // agreeement is not suspended
        qbdsSMAAgreementTable.addRange(fieldnum(SMAAgreementTable, Suspended)).value(queryValue(NoYes::No));

        // Ranges on SMAAgreementLine
        qbdsSMAAgreementLine.addRange(fieldnum(SMAAgreementLine, TransactionType));
        qbdsSMAAgreementLine.addRange(fieldnum(SMAAgreementLine, Suspended)).value(queryValue(NoYes::No));

        queryRun = new QueryRun(q);
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    /// The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    /// This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    /// dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    /// in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        copyLines.parmQueryRun(queryRun);
        copyLines.setDestinationAgreement(destinationAgreementTable);
        copyLines.setDestinationServiceOrder(destinationServiceOrderTable);

        switch (copyType)
        {
            // Service agreements are source for the copy
            case SMACopyFrom::Agreement:
                copyLines.parmIncludeObjects(includeObjects);
                copyLines.parmIncludeTasks(includeTasks);
                // Copy the selected service agreement lines
                copyLines.copyServiceAgreementLines();
                if (destinationServiceOrderTable)
                {
                    this.updateServiceOrderProgress(destinationServiceOrderTable.ServiceOrderId);
                }
                break;

            // Service agreements templates are source for the copy
            case SMACopyFrom::Template:
                copyLines.parmIncludeObjects(true);
                copyLines.parmIncludeTasks(true);
                // Copy the selected service agreement templates
                copyLines.copyTemplateLines(templateLineList);
                if (destinationServiceOrderTable)
                {
                    this.updateServiceOrderProgress(destinationServiceOrderTable.ServiceOrderId);
                }
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTemplateLineList</Name>
				<Source><![CDATA[
    public void setTemplateLineList(container _templateLineList)
    {
        // Set container with agreement template rec ids
        templateLineList = _templateLineList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to add a select button to the dialog.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    /// return a valid <c>queryRun</c> object.If you change the return value to false the button will no
    /// longer be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean     ret         = false;
        int         version     = RunBase::getVersion(_packedClass);
        container   packedQuery = connull();

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList, packedQuery] = _packedClass;

                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                    ret = true;
                }
                break;

            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateServiceOrderProgress</Name>
				<Source><![CDATA[
    public void updateServiceOrderProgress(SMAServiceOrderId _serviceOrderId)
    {
        SMAServiceOrderTable    serviceOrder;

        ttsbegin;

        select forupdate serviceOrder where serviceOrder.ServiceOrderId == _serviceOrderId;

        serviceOrder.updateProgress();

        serviceOrder.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static SMACopyAgreementLines construct()
    {
        return new SMACopyAgreementLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        // Copy lines
        return "@SYS79064";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SMACopyAgreementLines   copyAgreementLines;

        // check if there are arguments and if they are of the correct type
        if (!(_args && _args.parmEnumType() == enumnum(SMACopyFrom)))
        {
            // function has been used incorrectly
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        copyAgreementLines = SMACopyAgreementLines::newArgs(_args);
        copyAgreementLines.parmCopyType(_args.parmEnum());

        if (copyAgreementLines)
        {
            if (copyAgreementLines.prompt())
            {
                copyAgreementLines.runOperation();
            }
        }
        if (_args.caller() && formHasMethod(_args.caller(), identifierstr(refreshLines)))
        {
            _args.caller().refreshLines();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newArgs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new <c>SMACopyAgreementLines</c> instance from the given arguments.
    /// </summary>
    /// <param name="_args">
    ///    The given arguments to use to create the <c>SMACopyAgreementLines</c> instance.
    /// </param>
    /// <returns>
    ///    The new <c>SMACopyAgreementLines</c> instance.
    /// </returns>
    public static SMACopyAgreementLines newArgs(Args _args)
    {
        SMACopyAgreementLines   smaCopyAgreementLines;

        // check if there are arguments and if they are of the correct type
        if (!(_args && _args.parmEnumType() == enumnum(SMACopyFrom)))
        {
            // function has been used incorrectly
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        smaCopyAgreementLines = SMACopyAgreementLines::construct();
        smaCopyAgreementLines.initCopyLines(_args);
        return smaCopyAgreementLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new <c>SMACopyAgreementLines</c> instance.
    /// </summary>
    /// <returns>
    ///    The new <c>SMACopyAgreementLines</c> instance.
    /// </returns>
    public static SMACopyAgreementLines newStandard()
    {
        SMACopyAgreementLines   smaCopyAgreementLines;

        smaCopyAgreementLines = SMACopyAgreementLines::construct();
        smaCopyAgreementLines.initCopyLines(null);
        return smaCopyAgreementLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>