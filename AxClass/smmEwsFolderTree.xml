<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmmEwsFolderTree</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class <c>smmEwsFolderTree</c> creates the tree
/// nodes to be displayed in the folder picker form for exchange server folders.
/// </summary>
[SysObsolete('Microsoft discontinued support for synchronizing contacts, appointments, and tasks between Dynamics 365 Supply Chain Management and Outlook.', false, 01\12\2023)]
class SmmEwsFolderTree
{
    List                folders;
    smmEwsConnection    exchangeConnection;
    FormTreeControl     folderTreeControl;
    str                 rootFolderId;
    int                 imageIdx;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createRoot</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates root of the folder picker tree.
    /// </summary>
    /// <param name="category">
    /// Activity category that is the exchange item type, contacts, appointments or tasks.
    /// </param>
    public void createRoot(smmActivityCategory category)
    {
        FormTreeItem    formTreeItem;
        str             categoryName;

        categoryName = enum2str(category);

        if (enum2str(category))
        {
            formTreeItem = new FormTreeItem();
            formTreeItem.text(categoryName);
        }

        folderTreeControl.deleteAll();
        folderTreeControl.setImagelist(this.imageList());
        this.createSubTree(rootFolderId, 0, imageIdx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSubTree</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the subtree of folders with the current node passed as a parent.
    /// </summary>
    /// <param name="parentNodeId">
    /// Id of parent node of the tree.
    /// </param>
    /// <param name="parentIdx">
    /// Index of the node which is the parent for the subtree.
    /// </param>
    /// <param name="imageId">
    /// Imagelist container index to use for the tree item image.
    /// </param>
    public void createSubTree(str parentNodeId, int parentIdx, int imageId)
    {
        ListEnumerator  folderEnumerator;
        smmEwsFolder    currentFolder;
        FormTreeItem    formTreeItem;
        int             idx = 0;
        str             nodeName;
        str             parentFolderId;
        str             folderEntryId;

        folderEnumerator = folders.getEnumerator();

        while (folderEnumerator.moveNext())
        {
            currentFolder = folderEnumerator.current();
            parentFolderId = currentFolder.storeId();
            if (parentFolderId == parentNodeId)
            {
                formTreeItem = new FormTreeItem();

                nodeName = currentFolder.displayName();
                formTreeItem.data(currentFolder.exchangeEntryId());
                formTreeItem.text(nodeName);
                formTreeItem.image(imageId);
                formTreeItem.selectedImage(imageId);

                idx = folderTreeControl.addItem(parentIdx, 1, formTreeItem);
                folderEntryId = currentFolder.exchangeEntryId();

                this.createSubTree(folderEntryId, idx, imageId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFolders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the folders from exchange for a particular category(appointment or task or contacts).
    /// </summary>
    /// <param name="folderType">
    /// Folder type is the exchange item type, possible values are appointment, contacts and tasks.
    /// </param>
    /// <returns>
    /// List of folders obtained from exchange server.
    /// </returns>
    public List getFolders(smmOutlookMappingTypes folderType)
    {
        exchangeConnection = smmEwsConnection::instance();
        folders = exchangeConnection.getFolders(folderType);

        return folders;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getImageIndex</Name>
				<Source><![CDATA[
    /// <summary>
    /// Image index to use from the image list.
    /// </summary>
    /// <param name="folderType">
    /// Folder type is the exchange item type, possible values are appointment, contacts and tasks.
    /// </param>
    /// <returns>
    /// Integer representing on of the exchange item types. 0 = appointments, 1 = tasks, 2 = contacts.
    /// </returns>
    public int getImageIndex(smmOutlookMappingTypes folderType)
    {
        if (folderType == smmOutlookMappingTypes::Appointments)
        {
            return 0;
        }

        if (folderType == smmOutlookMappingTypes::Tasks)
        {
            return 1;
        }

        if (folderType == smmOutlookMappingTypes::Contacts)
        {
            return 2;
        }

        return -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRootFolderId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the entry id of current user in exchange server.
    /// </summary>
    /// <returns>
    /// User entry id from exchange server.
    /// </returns>
    public str getRootFolderId()
    {
        rootFolderId = exchangeConnection.CurrentUserEntryId();

        return rootFolderId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>imageList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of images.
    /// </summary>
    /// <returns>
    /// A list of images.
    /// </returns>
    public Imagelist imageList()
    {
        #macrolib.Resource
        #ResAppl

        Imagelist imagelist;

        imagelist = new Imagelist(Imagelist::smallIconWidth(), Imagelist::smallIconHeight());
        imagelist.add(new Image(#RES_CALENDAR_FOLDER));
        imagelist.add(new Image(#RES_TASK_FOLDER));
        imagelist.add(new Image(#RES_CONTACT_FOLDER));

        return imagelist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the <c>smmEwsFolderTree</c>.
    /// </summary>
    /// <param name="_folderTreeControl">
    /// Tree control representing the nodes.
    /// </param>
    /// <param name="folderType">
    /// Mapping type for which the folder tree control has to be constucted.
    /// Contacts, Appointments or Tasks are the possible values for folder type.
    /// </param>
    public void new(FormTreeControl _folderTreeControl, smmOutlookMappingTypes folderType)
    {
        folderTreeControl = _folderTreeControl;
        this.getFolders(folderType);
        imageIdx = this.getImageIndex(folderType);
        this.getRootFolderId();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>