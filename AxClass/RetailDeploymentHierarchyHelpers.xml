<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailDeploymentHierarchyHelpers</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper functions used by hierarchy viewer.
/// </summary>
class RetailDeploymentHierarchyHelpers
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>containerTypeToInstanceType</Name>
				<Source><![CDATA[
/// <summary>
    /// Converts from the container type of the node to the real type of the node.
    /// </summary>
    /// <param name="_container">
    /// The container type to be converted.
    /// </param>
    /// <returns>
    /// The real node type.
    /// </returns>
    public static RetailDeploymentHierarchyNodeType containerTypeToInstanceType(RetailDeploymentHierarchyNodeType _container)
    {
        RetailDeploymentHierarchyNodeType realType;
        switch (_container)
        {
            case RetailDeploymentHierarchyNodeType::RealTimeServiceCollection :
                realType = RetailDeploymentHierarchyNodeType::RealTimeService;
                break;

            case RetailDeploymentHierarchyNodeType::SynchServerServiceCollection :
                realType = RetailDeploymentHierarchyNodeType::SynchServerService;
                break;

            case RetailDeploymentHierarchyNodeType::SynchClientCollection :
                realType = RetailDeploymentHierarchyNodeType::SynchClient;
                break;

            case RetailDeploymentHierarchyNodeType::RetailServerCollection :
                realType = RetailDeploymentHierarchyNodeType::RetailServer;
                break;

            case RetailDeploymentHierarchyNodeType::ChannelDBCollection :
                realType = RetailDeploymentHierarchyNodeType::ChannelDB;
                break;

            case RetailDeploymentHierarchyNodeType::EPOSCollection :
                realType = RetailDeploymentHierarchyNodeType::EPOS;
                break;

            case RetailDeploymentHierarchyNodeType::ModernPOSCollection :
                realType = RetailDeploymentHierarchyNodeType::ModernPos;
                break;

            case RetailDeploymentHierarchyNodeType::HardwareStationCollection :
                realType = RetailDeploymentHierarchyNodeType::HardwareStation;
                break;

            default:
                realType = _container;
        }

        return realType;
    }
]]></Source>
			</Method>
			<Method>
				<Name>doesRecordExistInAx</Name>
				<Source><![CDATA[
/// <summary>
    /// Checks if a record currently exists in AX.
    /// </summary>
    /// <param name="recId">
    /// The recid of the record to be checked.
    /// </param>
    /// <param name="type">
    /// The type of node to be checked.
    /// </param>
    /// <returns>
    /// True if the record exists, false otherwise.
    /// </returns>
    public static boolean doesRecordExistInAx(RefRecId recId, RetailDeploymentHierarchyNodeType type)
    {
        RetailDeploymentRTSProfile rts;
        RetailCDXHeadOfficeProfile sSrv;
        RetailCDXClientProfile cdxC;
        RetailServerServiceProfile rSrv;
        RetailChannelDatabaseProfiles cdB;
        RetailModernPOSProfile mpoS;
        RetailDeploymentPOSRegisters epoS;
        RetailHardwareStationProfile hw;

        switch (type)
        {
            case RetailDeploymentHierarchyNodeType::RealTimeService :
                select WebApplicationName, RecId from rts where rts.RecId == recId;
                if (rts)
                {
                    return true;
                }
                break;

            case RetailDeploymentHierarchyNodeType::SynchServerService :
                select WebApplicationName, RecId from sSrv where sSrv.RecId == recId;
                if (sSrv)
                {
                    return true;
                }
                break;

            case RetailDeploymentHierarchyNodeType::SynchClient :
                select Name, RecId from cdxC where cdxC.RecId == recId;
                if (cdxC)
                {
                    return true;
                }
                break;

            case RetailDeploymentHierarchyNodeType::ChannelDB :
                select Name, RecId from cdB where cdB.RecId == recId;
                if (cdB)
                {
                    return true;
                }
                break;

            case RetailDeploymentHierarchyNodeType::RetailServer :
                select WebApplicationName, RecId from rSrv where rSrv.RecId == recId;
                if (rSrv)
                {
                    return true;
                }
                break;

            case RetailDeploymentHierarchyNodeType::EPOS :
                select Name, RecId from epoS where epoS.RecId == recId;
                if (epoS)
                {
                    return true;
                }
                break;

            case RetailDeploymentHierarchyNodeType::ModernPos :
                select Name, RecId from mpoS where mpoS.RecId == recId;
                if (mpoS)
                {
                    return true;
                }
                break;

            case RetailDeploymentHierarchyNodeType::HardwareStation :
                select Name, recId from hw where hw.RecId == recId;
                if (hw)
                {
                    return true;
                }
        }
        return false;
    }
]]></Source>
			</Method>
			<Method>
				<Name>instanceTypeToContainerType</Name>
				<Source><![CDATA[
/// <summary>
    /// Converts from the instance type of the node to the container type.
    /// </summary>
    /// <param name="_instance">
    /// The instance to be converted.
    /// </param>
    /// <returns>
    /// The container type for that node.
    /// </returns>
    public static RetailDeploymentHierarchyNodeType instanceTypeToContainerType(RetailDeploymentHierarchyNodeType _instance)
    {
        RetailDeploymentHierarchyNodeType containerType;
        switch (_instance)
        {
            case RetailDeploymentHierarchyNodeType::RealTimeService :
                containerType = RetailDeploymentHierarchyNodeType::RealTimeServiceCollection;
                break;

            case RetailDeploymentHierarchyNodeType::SynchServerService :
                containerType = RetailDeploymentHierarchyNodeType::SynchServerServiceCollection;
                break;

            case RetailDeploymentHierarchyNodeType::SynchClient :
                containerType = RetailDeploymentHierarchyNodeType::SynchClientCollection;
                break;

            case RetailDeploymentHierarchyNodeType::RetailServer :
                containerType = RetailDeploymentHierarchyNodeType::RetailServerCollection;
                break;

            case RetailDeploymentHierarchyNodeType::ChannelDB :
                containerType = RetailDeploymentHierarchyNodeType::ChannelDBCollection;
                break;

            case RetailDeploymentHierarchyNodeType::EPOS :
                containerType = RetailDeploymentHierarchyNodeType::EPOSCollection;
                break;

            case RetailDeploymentHierarchyNodeType::ModernPos :
                containerType = RetailDeploymentHierarchyNodeType::ModernPOSCollection;
                break;

            case RetailDeploymentHierarchyNodeType::HardwareStation :
                containerType = RetailDeploymentHierarchyNodeType::HardwareStationCollection;
                break;

            default:
                containerType = _instance;
        }

        return containerType;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>