<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResCalendarAvailabilityChart</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ResCalendarAvailabilityChart extends ResResourceAvailabilityChart
{
    private AVTimeframeType timescale;
    private ResRollUpCoverage coverage;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmTimeScale</Name>
				<Source><![CDATA[
    public AVTimeframeType parmTimeScale(AVTimeframeType _timescale)
    {
        timescale = _timescale;
        return timescale;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCoverage</Name>
				<Source><![CDATA[
    public ResRollUpCoverage parmCoverage(ResRollUpCoverage _coverage)
    {
        coverage = _coverage;
        return coverage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChartQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the chart query to be used to get resource availability chart data.
    /// </summary>
    /// <param name = "_timescale">Chart data aggregation level.</param>
    /// <param name = "_resources">Resource identifiers.</param>
    /// <param name = "_start">Starting time period.</param>
    /// <param name = "_end">Ending time period.</param>
    /// <returns>Assignment chart data query object.</returns>
    /// <remarks>_resources is not needed in this method. But since this is needed to override the parent class method, hence this parameter is needed to be kept.</remarks>
    public Query getChartQuery(AVTimeframeType _timescale, str _resources, utcdatetime _start, utcdatetime _end)
    {
        timescale = _timescale;
        Query query;
        QueryBuildDataSource dataSource;

        switch(timescale)
        {
            case AVTimeframeType::Hour:
                query = new Query(querystr(ResCalendarHourQuery));
                dataSource = query.dataSourceTable(tableNum(ResCalendarCapacity));
                dataSource.rangeField(fieldNum(ResCalendarCapacity, Hour)).value(queryRange(_start, _end));
                break;
            case AVTimeframeType::Day:
                query = new Query(querystr(ResCalendarDayQuery));
                dataSource = query.dataSourceTable(tableNum(ResCalendarCapacity));
                dataSource.rangeField(fieldNum(ResCalendarCapacity, Day)).value(queryRange(_start, _end));
                break;
            case AVTimeframeType::Week:
                query = new Query(querystr(ResCalendarWeekQuery));
                dataSource = query.dataSourceTable(tableNum(ResCalendarCapacity));
                dataSource.rangeField(fieldNum(ResCalendarCapacity, Week)).value(queryRange(_start, _end));
                break;
            case AVTimeframeType::Month:
                query = new Query(querystr(ResCalendarMonthQuery));
                dataSource = query.dataSourceTable(tableNum(ResCalendarCapacity));
                dataSource.rangeField(fieldNum(ResCalendarCapacity, Month)).value(queryRange(_start, _end));
                break;
            case AVTimeframeType::Quarter:
                query = new Query(querystr(ResCalendarQuarterQuery));
                dataSource = query.dataSourceTable(tableNum(ResCalendarCapacity));
                dataSource.rangeField(fieldNum(ResCalendarCapacity, Quarter)).value(queryRange(_start, _end));
                break;
            case AVTimeframeType::HalfYear:
                query = new Query(querystr(ResCalendarHalfYearQuery));
                dataSource = query.dataSourceTable(tableNum(ResCalendarCapacity));
                dataSource.rangeField(fieldNum(ResCalendarCapacity, HalfYear)).value(queryRange(_start, _end));
                break;
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the cached resource chart item entity.
    /// </summary>
    /// <param name = "_record">Record identifier.</param>
    /// <param name = "_collectionKey">Activity resource identifier.</param>
    /// <returns>Chart item data object.</returns>
    public ChartItemDataContract resolveEntity(QueryRun _record, str _collectionKey = '')
    {
        List properties = new List(Types::Class);
        str timelineKey;

        if (_record && _collectionKey)
        {
            ResCalendarCapacity calendarCapacity = _record.get(tableNum(ResCalendarCapacity));
            
            timelineKey = this.resolveTimelineKey(calendarCapacity);
            utcdatetime targetDateTime = DateTimeUtil::parse(timelineKey);
            ResourceRecId resourceRecId = ResUtil::getResourceRecId(_collectionKey);

            ResultSet calcResults = this.getResultSet(_collectionKey, resourceRecId, targetDateTime, timelineKey);
            
            str hardLocked = '0.0';
            str remaining = '0.0';
            int statusEnumValue = enum2int(ProjScheduleStatus::Unavailable);
            str statusLabel = enum2Str(ProjScheduleStatus::Unavailable);
            int isTaggedValue;
            EnumId enumId = enumNum(ProjScheduleStatus);
            DictEnum dictEnum = new DictEnum(enumId);

            if (calcResults && calcResults.next())
            {
                hardLocked = calcResults.getString(1);
                remaining = calcResults.getString(2);
                statusEnumValue = str2Int(calcResults.getString(3));
                statusLabel = dictEnum.value2Label(statusEnumValue);

                boolean isTagged;
                if (calcResults.getString(4) == '1')
                {
                    isTagged = true;
                }

                if (!isTagged && resourceRecId)
                {
                    isTagged = this.hasResourceRequest(targetDateTime, resourceRecId);
                }

                isTaggedValue = isTagged ? 1 : 0;
            }

            properties.addEnd(EntityFieldDataContract::construct('HardBooked', hardLocked));
            properties.addEnd(EntityFieldDataContract::construct('CapacityContent', remaining));

            str status = dictEnum.value2Symbol(statusEnumValue);
            properties.addEnd(EntityFieldDataContract::construct('Status', status));

            properties.addEnd(EntityFieldDataContract::construct('StatusLabel', statusLabel));
            properties.addEnd(EntityFieldDataContract::construct('SoftBooked', isTaggedValue));

            this.setProperties(properties);
        }
        
        ChartItemDataContract chartItem = ChartItemDataContract::construct();
        chartItem.collectionKey(_collectionKey);
        chartItem.timelineKey(timelineKey);
        chartItem.setKeyFactors();
        chartItem.properties(properties);
        return chartItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResultSet</Name>
				<Source><![CDATA[
    private ResultSet getResultSet(str _collectionKey, ResourceRecId _resourceRecId, utcdatetime _targetDateTime, str _timelineKey)
    {
        ResultSet calcResults;
        str sqlStatement;
        ActivityResourceRecId activityResourceRecId;

        switch (coverage)
        {
            case ResRollUpCoverage::Availability:
                sqlStatement = ResSchedulingSQLObjects::getNamedResourceAvailabilitySQLStatement(timescale, _resourceRecId, _targetDateTime, _timelineKey);
                calcResults = this.executeSQLStatement(sqlStatement);
                break;

            case ResRollUpCoverage::Activity:
                activityResourceRecId = ResUtil::getActivityResourceRecId(_collectionKey);

                if (_resourceRecId)
                {
                    sqlStatement = ResSchedulingSQLObjects::getNamedResourceActivitySQLStatement(timescale, _resourceRecId, activityResourceRecId, _targetDateTime, _timelineKey);
                    calcResults = this.executeSQLStatement(sqlStatement);
                }
                else
                {
                    CalendarRecId calendarRecId = ActivityResourceFacade::getCalendarByDateTime(activityResourceRecId, true, _targetDateTime);
                    sqlStatement = ResSchedulingSQLObjects::getPlannedResourceActivitySQLStatement(timescale, calendarRecId, activityResourceRecId, _targetDateTime, _timelineKey);
                    calcResults = this.executeSQLStatement(sqlStatement);
                }
                break;

            case ResRollupCoverage::Assignment:
                activityResourceRecId = ResUtil::getActivityResourceRecId(_collectionKey);

                if (_resourceRecId)
                {
                    sqlStatement = ResSchedulingSQLObjects::getNamedResourceAssignmentSQLStatement(timescale, _resourceRecId, activityResourceRecId, _targetDateTime, _timelineKey);
                    calcResults = this.executeSQLStatement(sqlStatement);
                }
                else
                {
                    CalendarRecId calendarRecId = ActivityResourceFacade::getCalendarByDateTime(activityResourceRecId, true, _targetDateTime);
                    sqlStatement = ResSchedulingSQLObjects::getPlannedResourceAssignmentSQLStatement(timescale, calendarRecId, activityResourceRecId, _targetDateTime, _timelineKey);
                    calcResults = this.executeSQLStatement(sqlStatement);
                }
                break;
        }

        return calcResults;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasResourceRequest</Name>
				<Source><![CDATA[
    private boolean hasResourceRequest(utcdatetime _timeScaleDateTime, ResourceRecId _resource)
    {
        boolean hasRequest;
        
        if (_resource)
        {
            str currentUser = curUserId();
            boolean requestRequestEnabled = PSAParameters::find().EnableSchedulingWorkflow == NoYes::Yes ? true : false;

            if (currentUser && requestRequestEnabled)
            {
                ResRequest resourceRequest;
                ResRequestLine resourceRequestLine;
                WorkflowWorkItemTable workflowItem;

                switch(timescale)
                {
                    case AVTimeframeType::Hour:
                    while select CreatedBy from resourceRequest
                        group by resourceRequest.CreatedBy, workflowItem.UserId
                            where resourceRequest.ApprovalStatus != ResApprovalStatus::Completed
                        join RecId from resourceRequestLine
                            where resourceRequestLine.Request == resourceRequest.RecId &&
                                resourceRequestLine.AssignedResource == _resource &&
                                resourceRequestLine.Hour == _timeScaleDateTime
                        outer join UserId from workflowItem
                            where workflowItem.RefRecId == resourceRequestLine.RecId &&
                                workflowItem.RefTableId == resourceRequestLine.TableId
                        {
                            if (resourceRequest.CreatedBy == currentUser || workflowItem.UserId == currentUser)
                            {
                                hasRequest = true;
                                break;
                            }
                        }
                        break;

                    case AVTimeframeType::Day:
                    while select CreatedBy from resourceRequest
                        group by resourceRequest.CreatedBy, workflowItem.UserId
                            where resourceRequest.ApprovalStatus != ResApprovalStatus::Completed
                        join RecId from resourceRequestLine
                            where resourceRequestLine.Request == resourceRequest.RecId &&
                                resourceRequestLine.AssignedResource == _resource &&
                                resourceRequestLine.Day == _timeScaleDateTime
                        outer join UserId from workflowItem
                            where workflowItem.RefRecId == resourceRequestLine.RecId &&
                                workflowItem.RefTableId == resourceRequestLine.TableId
                        {
                            if (resourceRequest.CreatedBy == currentUser || workflowItem.UserId == currentUser)
                            {
                                hasRequest = true;
                                break;
                            }
                        }
                        break;

                    case AVTimeframeType::Week:
                    while select CreatedBy from resourceRequest
                        group by resourceRequest.CreatedBy, workflowItem.UserId
                            where resourceRequest.ApprovalStatus != ResApprovalStatus::Completed
                        join RecId from resourceRequestLine
                            where resourceRequestLine.Request == resourceRequest.RecId &&
                                resourceRequestLine.AssignedResource == _resource &&
                                resourceRequestLine.Week == _timeScaleDateTime
                        outer join UserId from workflowItem
                            where workflowItem.RefRecId == resourceRequestLine.RecId &&
                                workflowItem.RefTableId == resourceRequestLine.TableId
                        {
                            if (resourceRequest.CreatedBy == currentUser || workflowItem.UserId == currentUser)
                            {
                                hasRequest = true;
                                break;
                            }
                        }
                        break;

                    case AVTimeframeType::Month:
                    while select CreatedBy from resourceRequest
                        group by resourceRequest.CreatedBy, workflowItem.UserId
                            where resourceRequest.ApprovalStatus != ResApprovalStatus::Completed
                        join RecId from resourceRequestLine
                            where resourceRequestLine.Request == resourceRequest.RecId &&
                                resourceRequestLine.AssignedResource == _resource &&
                                resourceRequestLine.Month == _timeScaleDateTime
                        outer join UserId from workflowItem
                            where workflowItem.RefRecId == resourceRequestLine.RecId &&
                                workflowItem.RefTableId == resourceRequestLine.TableId
                        {
                            if (resourceRequest.CreatedBy == currentUser || workflowItem.UserId == currentUser)
                            {
                                hasRequest = true;
                                break;
                            }
                        }
                        break;

                    case AVTimeframeType::Quarter:
                    while select CreatedBy from resourceRequest
                        group by resourceRequest.CreatedBy, workflowItem.UserId
                            where resourceRequest.ApprovalStatus != ResApprovalStatus::Completed
                        join RecId from resourceRequestLine
                            where resourceRequestLine.Request == resourceRequest.RecId &&
                                resourceRequestLine.AssignedResource == _resource &&
                                resourceRequestLine.Quarter == _timeScaleDateTime
                        outer join UserId from workflowItem
                            where workflowItem.RefRecId == resourceRequestLine.RecId &&
                                workflowItem.RefTableId == resourceRequestLine.TableId
                        {
                            if (resourceRequest.CreatedBy == currentUser || workflowItem.UserId == currentUser)
                            {
                                hasRequest = true;
                                break;
                            }
                        }
                        break;

                    case AVTimeframeType::HalfYear:
                    while select CreatedBy from resourceRequest
                        group by resourceRequest.CreatedBy, workflowItem.UserId
                            where resourceRequest.ApprovalStatus != ResApprovalStatus::Completed
                        join RecId from resourceRequestLine
                            where resourceRequestLine.Request == resourceRequest.RecId &&
                                resourceRequestLine.AssignedResource == _resource &&
                                resourceRequestLine.HalfYear == _timeScaleDateTime
                        outer join UserId from workflowItem
                            where workflowItem.RefRecId == resourceRequestLine.RecId &&
                                workflowItem.RefTableId == resourceRequestLine.TableId
                        {
                            if (resourceRequest.CreatedBy == currentUser || workflowItem.UserId == currentUser)
                            {
                                hasRequest = true;
                                break;
                            }
                        }
                        break;
                }
            }
        }

        return hasRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveTimelineKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolve chart data item timeline key.
    /// </summary>
    /// <param name = "_entity">Chart item record.</param>
    /// <returns>Timeline key string value.</returns>
    protected str resolveTimelineKey(Common _entity)
    {
        str timeLineKey;

        switch(timescale)
        {
            case AVTimeframeType::Hour:
                timeLineKey = AVUtil::getDateTimeStr(_entity.getFieldValue('Hour'));
                break;
            case AVTimeframeType::Day:
                timeLineKey = AVUtil::getDateTimeStr(_entity.getFieldValue('Day'));
                break;
            case AVTimeframeType::Week:
                timeLineKey = AVUtil::getDateTimeStr(_entity.getFieldValue('Week'));
                break;
            case AVTimeframeType::Month:
                timeLineKey = AVUtil::getDateTimeStr(_entity.getFieldValue('Month'));
                break;
            case AVTimeframeType::Quarter:
                timeLineKey = AVUtil::getDateTimeStr(_entity.getFieldValue('Quarter'));
                break;
            case AVTimeframeType::HalfYear:
                timeLineKey = AVUtil::getDateTimeStr(_entity.getFieldValue('HalfYear'));
                break;
        }

        return timeLineKey;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProperties</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allow setting <c>EntityFieldDataContract</c> properties by extension.
    /// </summary>
    /// <param name = "_properties"><c>EntityFieldDataContract</c> list properties.</param>
    protected void setProperties(List _properties)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of calendar availability chart controller.
    /// </summary>
    /// <returns>Calendar availability chart controller.</returns>
    public static ResCalendarAvailabilityChart construct()
    {
        ResCalendarAvailabilityChart controller = new ResCalendarAvailabilityChart();
        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeSQLStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Execute SQL statement.
    /// </summary>
    /// <param name = "_statement">SQL statement string.</param>
    /// <returns>SQL statement result set.</returns>
    private ResultSet executeSQLStatement(str _statement)
    {
        Connection userConnection = new Connection();
        Statement stmt = userConnection.createStatement();
        new SqlStatementExecutePermission(_statement).assert();
        return stmt.executeQuery(_statement);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>