<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgRegistrationActionPaneTreeClass</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgRegistrationActionPaneTreeClass</c> class is used to map a tree control with the
///    <c>JmgRegistrationButtonTable</c> table.
/// </summary>
class JmgRegistrationActionPaneTreeClass
{
    FormTreeControl         ftc;
    Imagelist               imagelist;
    int                     rootNode;
    JmgActionPaneRecId      currSetupId;
    FormDataSource          formDataSource;
    FormGroupControl        formGroup;
    FormComboBoxControl     functionCombo;
    FormStringControl       labelEdit;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addNode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds children or siblings to the currently selected node.
    /// </summary>
    /// <remarks>
    ///    A child is added when the node is a tab or button group; otherwise, a sibling is added.
    /// </remarks>
    public void addNode()
    {
        int                         idx             = ftc.getSelection();
        int                         parentIdx;
        int                         insertAfterIdx;
        int                         newSeq;
        str                         nodeText;
        JmgRegistrationButtonTable  currentNode;
        JmgRegistrationButtonTable  buttonTable;
        JmgButtonSetupType          newType;
        FormTreeItem                treeItem;

        buttonTable.recordLevelSecurity(true);

        ttsbegin;

        if (ftc.getItem(idx).data() == 0)
        {
            //Root node found
            select firstonly buttonTable
                order by Sequence desc
                where buttonTable.ActionPaneSetupID == currSetupId;

            newSeq  = buttonTable.Sequence + 1;
            newType = JmgButtonSetupType::Tab;
            currentNode.ActionPaneSetupID = currSetupId;
            parentIdx = ftc.getRoot();
        }
        else
        {
            //Sub node found
            select firstonly currentNode where currentNode.RecId == ftc.getItem(idx).data();

            newType = max(0,currentNode.ButtonSetupType - 1);

            if (newType == currentNode.ButtonSetupType)
            {
                parentIdx       = ftc.getParent(idx);
                insertAfterIdx  = idx;
            }
            else
            {
                parentIdx       = idx;
                insertAfterIdx  = FormTreeAdd::Last;
            }

            select firstonly buttonTable
                order by Sequence
                where buttonTable.ActionPaneSetupID == currentNode.ActionPaneSetupID &&
                      buttonTable.Sequence          >  currentNode.Sequence          &&
                      buttonTable.ButtonSetupType   >= currentNode.ButtonSetupType;

            if (!buttonTable.RecId)
            {
                select firstonly buttonTable
                    order by Sequence desc
                    where buttonTable.ActionPaneSetupID == currentNode.ActionPaneSetupID;

                newSeq = buttonTable.Sequence + 1;
            }
            else
            {
                newSeq = buttonTable.Sequence;
            }

            update_recordset buttonTable
                setting Sequence = buttonTable.Sequence + 1
                where buttonTable.Sequence          >= newSeq &&
                      buttonTable.ActionPaneSetupID == currentNode.ActionPaneSetupID;
        }

        if (newType != JmgButtonSetupType::Button)
        {
            buttonTable.Label = "@SYS2952";
        }

        buttonTable.ActionPaneSetupID   = currentNode.ActionPaneSetupID;
        buttonTable.ButtonFunction      = JmgSignInButtonFunction::Blank;
        buttonTable.ButtonSetupType     = newType;
        buttonTable.Sequence            = newSeq;
        buttonTable.insert();

        if (buttonTable.Label == "")
        {
            nodeText = enum2str(buttonTable.ButtonFunction);
        }
        else
        {
            nodeText = buttonTable.Label;
        }

        treeItem = new FormTreeItem(nodeText,buttonTable.ButtonSetupType,newType != JmgButtonSetupType::Button,buttonTable.RecId);

        int newIdx = ftc.addItem(parentIdx,insertAfterIdx,treeItem);

        ftc.expand(parentIdx,FormTreeExpand::Expand);

        ttscommit;

        if (formDataSource)
        {
            formDataSource.research(true);
        }

        ftc.select(newIdx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTree</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills a tree control with the logical tree of a selected action pane setup, as defined in the
    ///    <c>JmgRegistrationButtonTable</c> table.
    /// </summary>
    /// <param name="_actionPaneSetupId">
    ///    The ID of the action pane, the tree will be populated with.
    /// </param>
    public void fillTree(JmgActionPaneRecId _actionPaneSetupId)
    {
        JmgRegistrationButtonTable buttonTable;
        FormTreeItem    treeItem;
        int             tabRoot;
        int             groupRoot;
        int             idx;
        str             name;

        currSetupId = _actionPaneSetupId;

        ftc.deleteAll();

        treeItem = new FormTreeItem("@SYS320256",3,1,0);
        treeItem.stateExpanded(true);
        treeItem.stateBold(true);
        rootNode  = ftc.addItem(0,0,treeItem);

        buttonTable.recordLevelSecurity(true);

        while select buttonTable
            order by Sequence
            where buttonTable.ActionPaneSetupID == _actionPaneSetupId
        {
            if (buttonTable.ButtonSetupType == JmgButtonSetupType::Tab)
            {
                name = buttonTable.Label;

                treeItem = new FormTreeItem(name,buttonTable.ButtonSetupType,1,buttonTable.RecId);
                treeItem.stateExpanded(true);
                tabRoot  = ftc.addItem(rootNode,0,treeItem);
            }
            else if (buttonTable.ButtonSetupType == JmgButtonSetupType::ButtonGroup)
            {
                treeItem = new FormTreeItem(buttonTable.Label,buttonTable.ButtonSetupType,1,buttonTable.RecId);
                groupRoot = ftc.addItem(tabRoot,0,treeItem);
            }
            else if (buttonTable.ButtonSetupType == JmgButtonSetupType::Button)
            {
                //If no label is defined, use button name
                if (buttonTable.Label == '')
                {
                    name = enum2str(buttonTable.ButtonFunction);
                }
                else
                {
                    name = buttonTable.Label;
                }

                treeItem = new FormTreeItem(name,buttonTable.ButtonSetupType,0,buttonTable.RecId);
                ftc.addItem(groupRoot,0,treeItem);
            }
        }
        //make sure a node is selected
        idx = ftc.getFirstVisible();
        ftc.selectItems(idx,idx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastNode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the last child node of a given parent node.
    /// </summary>
    /// <param name="_parentIdx">
    ///    The ID of the node for which to retrieve the last child.
    /// </param>
    /// <returns>
    ///    The ID of the last child node of the specified parent node.
    /// </returns>
    private int findLastNode(int _parentIdx)
    {
        int currIdx = ftc.getChild(_parentIdx);
        int lastIdx = currIdx;
        while (currIdx)
        {
            if (currIdx)
            {
                lastIdx = currIdx;
            }
            currIdx = ftc.getNextSibling(currIdx);
        }
        return lastIdx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>JmgRegistrationActionPaneTreeClass</c> class.
    /// </summary>
    private void init()
    {
        #JmgIcons

        imagelist = new Imagelist(Imagelist::smallIconWidth(), Imagelist::smallIconHeight());

        ftc.setImagelist(imagelist);
        imagelist.add(new Image(#JMG_IMG_BUTTON));
        imagelist.add(new Image(#JMG_IMG_BUTTONGROUP));
        imagelist.add(new Image(#JMG_IMG_ACTIONPANETAB));
        imagelist.add(new Image(#JMG_IMG_ACTIONPANE));
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedNode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates a given node with text from the record it corresponds to in the
    ///    <c>JmgRegistrationButtonTable</c> table.
    /// </summary>
    /// <param name="_item">
    ///    The tree node item that will be updated.
    /// </param>
    public void modifiedNode(FormTreeItem _item = ftc.getItem(ftc.getSelection()))
    {
        if (_item == null)
            return; // item was deleted.

        JmgRegistrationButtonTable  buttonTable;
        str                         nodeText;

        buttonTable.recordLevelSecurity(true);

        buttonTable = formDataSource.cursor();

        if (buttonTable.ButtonSetupType != JmgButtonSetupType::Button || buttonTable.Label != '')
        {
            nodeText = buttonTable.Label;
        }
        else
        {
            nodeText = enum2str(buttonTable.ButtonFunction);
        }

        _item.text(nodeText);

        ftc.setItem(_item);
        ftc.hasChanged(true);
        ftc.updateWindow();
        ftc.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves a node up or down in a tree control.
    /// </summary>
    /// <param name="_moveUp">
    ///    A Boolean value that indicates whether the node moves up or down.
    /// </param>
    public void moveNode(boolean _moveUp)
    {
        int                         idx = ftc.getSelection();
        JmgRegistrationButtonTable  buttonTable;

        if (ftc.getItem(idx).data() == 0)
        {
            return;
        }

        select firstonly buttonTable where buttonTable.RecId == ftc.getItem(idx).data();

        if (!JmgRegistrationButtonTable::moveLine(buttonTable,_moveUp))
        {
            return;
        }

        this.updateTree(idx, _moveUp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>JmgRegistrationActionPaneTreeClass</c> class.
    /// </summary>
    /// <param name="_ftc">
    ///    The <c>FormTreeControl</c> element that the class uses to create a tree structure.
    /// </param>
    private void new(FormTreeControl _ftc)
    {
        ftc = _ftc;

        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeNode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes the selected node from the tree, and the <c>JmgRegistrationButtonTable</c> table.
    /// </summary>
    /// <param name="_bypassPrompt">
    ///    A Boolean value that indicates whether to prompt the user before deleting a node that has children.
    /// </param>
    public void removeNode(boolean _bypassPrompt = false)
    {
        int                         nodeToRemoveIdx = ftc.getSelection();
        boolean                     hasChildren     = ftc.getChild(nodeToRemoveIdx) != 0;
        JmgRegistrationButtonTable  buttonTable;
        JmgButtonSetupType          buttonType;
        int                         fromSeq;
        int                         toSeq;
        int                         seqDiff;

        buttonTable.recordLevelSecurity(true);

        if (!_bypassPrompt && hasChildren && (Box::yesNo("@SYS320258",DialogButton::No,"@SYS320257") == DialogButton::No))
        {
            return;
        }

        select firstonly Sequence, RecId, ButtonSetupType from buttonTable
            where buttonTable.RecId == ftc.getItem(nodeToRemoveIdx).data();

        fromSeq     = buttonTable.Sequence;
        buttonType  = buttonTable.ButtonSetupType;

        select firstonly Sequence, RecId, ButtonSetupType, ActionPaneSetupID from buttonTable
            order by Sequence
            where buttonTable.Sequence          >  fromSeq      &&
                  buttonTable.ActionPaneSetupID == currSetupId  &&
                  buttonTable.ButtonSetupType   >= buttonType;
        if (!buttonTable.RecId)
        {
            //select last node
            select firstonly Sequence, ActionPaneSetupID from buttonTable
            order by Sequence desc
                where buttonTable.ActionPaneSetupID == currSetupId;
            buttonTable.Sequence++;
        }

        toSeq = buttonTable.Sequence;

        seqDiff = toSeq - fromSeq;

        ttsbegin;
        delete_from buttonTable
            where buttonTable.Sequence          >= fromSeq      &&
                  buttonTable.Sequence          <  toSeq        &&
                  buttonTable.ActionPaneSetupID == currSetupId;

        update_recordset buttonTable
            setting Sequence = buttonTable.Sequence - seqDiff
            where buttonTable.Sequence          >= toSeq        &&
                  buttonTable.ActionPaneSetupID == currSetupId;
        ttscommit;

        ftc.delete(nodeToRemoveIdx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the controls on the parent form.
    /// </summary>
    /// <param name="_newItem">
    ///    The new item that has been selected.
    /// </param>
    public void selectionChanged(FormTreeItem _newItem)
    {
        JmgRegistrationButtonTable  buttonTable;
        str                         caption;

        if (_newItem.idx() == ftc.getRoot())
        {
            formGroup.enabled(false);
            formGroup.caption(strfmt("@SYS76785","@SYS10344","@SYS320256"));
            labelEdit.enabled(false);
            functionCombo.enabled(false);
        }
        else
        {
            select firstonly buttonTable where buttonTable.RecId == _newItem.data();

            if (formDataSource)
            {
                formDataSource.positionToRecord(buttonTable);
            }

            //If the record is not a button or a label is defined, then use label as caption, otherwise use buttonfunction.
            if (buttonTable.ButtonSetupType != JmgButtonSetupType::Button || buttonTable.Label != '')
            {
                caption = buttonTable.Label;
            }
            else
            {
                caption = enum2str(buttonTable.ButtonFunction);
            }

            caption = strfmt("@SYS320716","@SYS10344",enum2str(buttonTable.ButtonSetupType),caption);
            formGroup.caption(caption);
            formGroup.enabled(true);
            labelEdit.enabled(true);
            functionCombo.enabled(buttonTable.ButtonSetupType == JmgButtonSetupType::Button);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the <c>FormDataSource</c> table that displays the contents of the temporary buffer.
    /// </summary>
    /// <param name="_formDataSource">
    ///    A reference to the <c>FormDataSource</c> table that currently displays the contents of the
    ///    temporary buffer.
    /// </param>
    /// <remarks>
    ///    Whenever the internal temporary buffer is updated, the form data source set by this method will be
    ///    refreshed.
    /// </remarks>
    public void setFormDataSource(FormDataSource _formDataSource)
    {
        QueryBuildDataSource    qbds;
        Query                   q;

        formDataSource = _formDataSource;

        q       = new Query();
        qbds    = q.addDataSource(tablenum(JmgRegistrationButtonTable));

        formDataSource.query(q);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFunctionControl</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the <c>FormComboBoxControl</c> control that displays the <c>JmgSignInButtonFunction</c> field
    ///    in the <c>JmgRegistrationButtonTable</c> data source table.
    /// </summary>
    /// <param name="_functionCombo">
    ///    A reference to the <c>FormComboBoxControl</c> control that displays the
    ///    <c>JmgSignInButtonFunction</c> field in the <c>JmgRegistrationButtonTable</c> data source table.
    /// </param>
    public void setFunctionControl(FormComboBoxControl _functionCombo)
    {
        functionCombo = _functionCombo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>FormGroupControl</c> which displays the fields in the datasource table.
    /// </summary>
    /// <param name="_formGroupControl">
    /// A reference to the <c>FormGroupControl</c> tabpage which currently displays the fields in the datasource table.
    /// </param>
    public void setGroup(FormGroupControl _formGroupControl)
    {
        formGroup = _formGroupControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLabelControl</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the <c>FormStringControl</c> control that displays the <c>JmgLabel</c> field in the
    ///    <c>JmgRegistrationButtonTable</c> data source table.
    /// </summary>
    /// <param name="_labelEdit">
    ///    A reference to the <c>FormStringControl</c> control that displays the <c>JmgLabel</c> field in the
    ///    <c>JmgRegistrationButtonTable</c> data source table.
    /// </param>
    public void setLabelControl(FormStringControl _labelEdit)
    {
        labelEdit = _labelEdit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTree</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the tree when a node is to be moved up or down in a tree control.
    /// </summary>
    /// <param name="_nodeIdx">
    ///    The ID of the node to move in the tree control.
    /// </param>
    /// <param name="_moveUp">
    ///    A Boolean value that indicates whether to move the node up or down.
    /// </param>
    private void updateTree(int _nodeIdx, boolean _moveUp)
    {
        int myParentIdx     = ftc.getParent(_nodeIdx);
        int myPrevNodeIdx   = ftc.getPrevSibling(_nodeIdx);
        int myNextNodeIdx   = ftc.getNextSibling(_nodeIdx);
        int myMovedItem;

        if (!myParentIdx)
        {
            return;
        }

        if (_moveUp && myPrevNodeIdx)
        {
            //Move up within same parent
            myMovedItem = ftc.moveItem(myPrevNodeIdx,myParentIdx,_nodeIdx);
        }
        else if (!_moveUp && myNextNodeIdx)
        {
            //Move down within sam parent
            myMovedItem = ftc.moveItem(_nodeIdx,myParentIdx,myNextNodeIdx);
        }
        else if (_moveUp && !myPrevNodeIdx)
        {
            //Move up to another parent
            myParentIdx = ftc.getPrevSibling(myParentIdx);
            if (!myParentIdx)
            {
                myParentIdx = ftc.getPrevSibling(ftc.getParent(ftc.getParent(_nodeIdx)));
                myParentIdx = this.findLastNode(myParentIdx);
            }
            if (!myParentIdx)
            {
                return;
            }
            ftc.expand(myParentIdx,FormTreeExpand::Expand);
            myMovedItem = ftc.moveItem(_nodeIdx,myParentIdx);
        }
        else if (!_moveUp && !myNextNodeIdx)
        {
            //Move down to another parent
            myParentIdx = ftc.getNextSibling(myParentIdx);
            if (!myParentIdx)
            {
                myParentIdx = ftc.getNextSibling(ftc.getParent(ftc.getParent(_nodeIdx)));
                myParentIdx = ftc.getChild(myParentIdx);
            }
            if (!myParentIdx)
            {
                return;
            }
            ftc.expand(myParentIdx,FormTreeExpand::Expand);
            myMovedItem = ftc.moveItem(_nodeIdx,myParentIdx,FormTreeAdd::First);
        }

        if (_moveUp && myPrevNodeIdx)
        {
            ftc.select(_nodeIdx);
        }
        else
        {
            ftc.select(myMovedItem);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static JmgRegistrationActionPaneTreeClass construct(FormTreeControl _ftc)
    {
        return new JmgRegistrationActionPaneTreeClass(_ftc);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>