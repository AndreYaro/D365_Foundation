<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWarehouseTransactionItemTracingQuery</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSWarehouseTransactionItemTracingQuery
{
    private WHSInventoryTransactionOriginId inventoryTransactionOriginId;
    private boolean queryOnlyArchivedTransactionsFlightIsEnabled = WHSTracingFormsQueryOnlyArchivedTransactionsFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findIssueTransaction</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSInventoryTransactionView findIssueTransaction(ItemId _itemId, InventDim _inventDim)
    {
        return this.findTransactions(_itemId, _inventDim, InventDimParm::allInventDim(), WHSInventoryTransactionTypeEnum::RegisteredIssue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findReceiptTransaction</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSInventoryTransactionView findReceiptTransaction(ItemId _itemId, InventDim _inventDim, InventDimParm _inventDimParm = InventDimParm::allInventDim())
    {
        return this.findTransactions(_itemId, _inventDim, _inventDimParm, WHSInventoryTransactionTypeEnum::RegisteredReceipt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelatedTransactions</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSInventoryTransactionView findRelatedTransactions(
        WHSInventoryTransactionTypeEnum _transactionType,
        InventDim _inventDim,
        InventDimParm _inventDimParm,
        InventTrackingDimTracingWHSInventoryTransactionDTO _currentNodeDTO)
    {
        if (this.nodeForWorkWithUserLocationSkip(_currentNodeDTO))
        {
            Debug::assert(  _transactionType == WHSInventoryTransactionTypeEnum::RegisteredIssue
                         || _transactionType == WHSInventoryTransactionTypeEnum::RegisteredReceipt);

            WHSWorkLine workLine = _transactionType == WHSInventoryTransactionTypeEnum::RegisteredIssue
                ? WHSWorkTable::getFirstPickWorkLine(_currentNodeDTO.referenceId())
                : WHSWorkTable::getFirstPutWorkLine(_currentNodeDTO.referenceId());

            return this.findTransactionsForMovementWithoutUserLocationUsage(
                _currentNodeDTO.itemId(),
                _inventDim,
                _inventDimParm,
                _transactionType,
                _currentNodeDTO.referenceId(),
                workLine.LineNum);
        }
        else
        {
            this.inventoryTransactionOriginId = _currentNodeDTO.inventoryTransactionOriginId();

            return this.findTransactions(_currentNodeDTO.itemId(), _inventDim, _inventDimParm, _transactionType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>nodeForWorkWithUserLocationSkip</Name>
				<Source><![CDATA[
    private boolean nodeForWorkWithUserLocationSkip(InventTrackingDimTracingWHSInventoryTransactionDTO _currentNodeDTO)
    {
        if (_currentNodeDTO.referenceCategory() != WHSInventoryTransactionReferenceCategoryEnum::Work)
        {
            return false;
        }

        WHSWorkTable workTable = WHSWorkTable::find(_currentNodeDTO.referenceId());

        return workTable.ExecutedWithoutUserLocation && workTable.WorkTransType == WHSWorkTransType::Invent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransactions</Name>
				<Source><![CDATA[
    private WHSInventoryTransactionView findTransactions(
        ItemId _itemId,
        InventDim _inventDim,
        InventDimParm _inventDimParm,
        WHSInventoryTransactionTypeEnum _transactionType)
    {
        WHSInventoryTransactionView itemTracingView;

        select itemTracingView
            where (!queryOnlyArchivedTransactionsFlightIsEnabled || itemTracingView.Archived == NoYes::Yes)
               && itemTracingView.Type == _transactionType
               && itemTracingView.ItemId == _itemId
               && (!inventoryTransactionOriginId || itemTracingView.InventoryTransactionOriginId == inventoryTransactionOriginId)
               && (!_inventDimParm.InventSiteIdFlag || itemTracingView.InventSiteId == _inventDim.inventSiteId)
               && (!_inventDimParm.InventLocationIdFlag || itemTracingView.InventLocationId == _inventDim.inventLocationId)
               && (!_inventDimParm.WMSLocationIdFlag || itemTracingView.WMSLocationId == _inventDim.wmsLocationId)
               && (!_inventDimParm.LicensePlateFlag || itemTracingView.LicensePlateId == _inventDim.licensePlateId)
               && (!_inventDimParm.ConfigIdFlag || itemTracingView.configId == _inventDim.ConfigId)
               && (!_inventDimParm.InventBatchIdFlag || itemTracingView.inventBatchId == _inventDim.InventBatchId)
               && (!_inventDimParm.InventColorIdFlag || itemTracingView.inventColorId == _inventDim.InventColorId)
               && (!_inventDimParm.InventGtdIdFlag_RU || itemTracingView.inventGtdId_RU == _inventDim.InventGtdId_RU)
               && (!_inventDimParm.InventOwnerIdFlag_RU || itemTracingView.inventOwnerId_RU == _inventDim.InventOwnerId_RU)
               && (!_inventDimParm.InventProfileIdFlag_RU || itemTracingView.inventProfileId_RU == _inventDim.InventProfileId_RU)
               && (!_inventDimParm.InventSerialIdFlag || itemTracingView.inventSerialId == _inventDim.InventSerialId)
               && (!_inventDimParm.InventSizeIdFlag || itemTracingView.inventSizeId == _inventDim.InventSizeId)
               && (!_inventDimParm.InventStatusFlag || itemTracingView.inventStatusId == _inventDim.InventStatusId)
               && (!_inventDimParm.InventStyleIdFlag || itemTracingView.inventStyleId == _inventDim.InventStyleId)
               && (!_inventDimParm.InventVersionIdFlag || itemTracingView.inventVersionId == _inventDim.InventVersionId)
               && (!_inventDimParm.InventDimension1Flag || itemTracingView.inventDimension1 == _inventDim.InventDimension1)
               && (!_inventDimParm.InventDimension2Flag || itemTracingView.inventDimension2 == _inventDim.InventDimension2)
               && (!_inventDimParm.InventDimension3Flag || itemTracingView.inventDimension3 == _inventDim.InventDimension3)
               && (!_inventDimParm.InventDimension4Flag || itemTracingView.inventDimension4 == _inventDim.InventDimension4)
               && (!_inventDimParm.InventDimension5Flag || itemTracingView.inventDimension5 == _inventDim.InventDimension5)
               && (!_inventDimParm.InventDimension6Flag || itemTracingView.inventDimension6 == _inventDim.InventDimension6)
               && (!_inventDimParm.InventDimension7Flag || itemTracingView.inventDimension7 == _inventDim.InventDimension7)
               && (!_inventDimParm.InventDimension8Flag || itemTracingView.inventDimension8 == _inventDim.InventDimension8)
               && (!_inventDimParm.InventDimension9Flag || itemTracingView.inventDimension9 == _inventDim.InventDimension9)
               && (!_inventDimParm.InventDimension10Flag || itemTracingView.inventDimension10 == _inventDim.InventDimension10)
               && (!_inventDimParm.InventDimension11Flag || itemTracingView.inventDimension11 == _inventDim.InventDimension11)
               && (!_inventDimParm.InventDimension12Flag || itemTracingView.inventDimension12 == _inventDim.InventDimension12);
        
        return itemTracingView;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransactionsForMovementWithoutUserLocationUsage</Name>
				<Source><![CDATA[
    private WHSInventoryTransactionView findTransactionsForMovementWithoutUserLocationUsage(
        ItemId _itemId,
        InventDim _inventDim,
        InventDimParm _inventDimParm,
        WHSInventoryTransactionTypeEnum _transactionType,
        WHSWorkId _workId,
        LineNum _linenum)
    {
        WHSWorkInventTrans workInventTrans;
        WHSInventoryTransactionView itemTracingView;

        select itemTracingView
            where (!queryOnlyArchivedTransactionsFlightIsEnabled || itemTracingView.Archived == NoYes::Yes)
               && itemTracingView.Type == _transactionType
               && itemTracingView.ItemId == _itemId
               && (!_inventDimParm.InventSiteIdFlag || itemTracingView.InventSiteId == _inventDim.inventSiteId)
               && (!_inventDimParm.InventLocationIdFlag || itemTracingView.InventLocationId == _inventDim.inventLocationId)
               && (!_inventDimParm.WMSLocationIdFlag || itemTracingView.WMSLocationId == _inventDim.wmsLocationId)
               && (!_inventDimParm.LicensePlateFlag || itemTracingView.LicensePlateId == _inventDim.licensePlateId)
               && (!_inventDimParm.ConfigIdFlag || itemTracingView.configId == _inventDim.ConfigId)
               && (!_inventDimParm.InventBatchIdFlag || itemTracingView.inventBatchId == _inventDim.InventBatchId)
               && (!_inventDimParm.InventColorIdFlag || itemTracingView.inventColorId == _inventDim.InventColorId)
               && (!_inventDimParm.InventGtdIdFlag_RU || itemTracingView.inventGtdId_RU == _inventDim.InventGtdId_RU)
               && (!_inventDimParm.InventOwnerIdFlag_RU || itemTracingView.inventOwnerId_RU == _inventDim.InventOwnerId_RU)
               && (!_inventDimParm.InventProfileIdFlag_RU || itemTracingView.inventProfileId_RU == _inventDim.InventProfileId_RU)
               && (!_inventDimParm.InventSerialIdFlag || itemTracingView.inventSerialId == _inventDim.InventSerialId)
               && (!_inventDimParm.InventSizeIdFlag || itemTracingView.inventSizeId == _inventDim.InventSizeId)
               && (!_inventDimParm.InventStatusFlag || itemTracingView.inventStatusId == _inventDim.InventStatusId)
               && (!_inventDimParm.InventStyleIdFlag || itemTracingView.inventStyleId == _inventDim.InventStyleId)
               && (!_inventDimParm.InventVersionIdFlag || itemTracingView.inventVersionId == _inventDim.InventVersionId)
               && (!_inventDimParm.InventDimension1Flag || itemTracingView.inventDimension1 == _inventDim.InventDimension1)
               && (!_inventDimParm.InventDimension2Flag || itemTracingView.inventDimension2 == _inventDim.InventDimension2)
               && (!_inventDimParm.InventDimension3Flag || itemTracingView.inventDimension3 == _inventDim.InventDimension3)
               && (!_inventDimParm.InventDimension4Flag || itemTracingView.inventDimension4 == _inventDim.InventDimension4)
               && (!_inventDimParm.InventDimension5Flag || itemTracingView.inventDimension5 == _inventDim.InventDimension5)
               && (!_inventDimParm.InventDimension6Flag || itemTracingView.inventDimension6 == _inventDim.InventDimension6)
               && (!_inventDimParm.InventDimension7Flag || itemTracingView.inventDimension7 == _inventDim.InventDimension7)
               && (!_inventDimParm.InventDimension8Flag || itemTracingView.inventDimension8 == _inventDim.InventDimension8)
               && (!_inventDimParm.InventDimension9Flag || itemTracingView.inventDimension9 == _inventDim.InventDimension9)
               && (!_inventDimParm.InventDimension10Flag || itemTracingView.inventDimension10 == _inventDim.InventDimension10)
               && (!_inventDimParm.InventDimension11Flag || itemTracingView.inventDimension11 == _inventDim.InventDimension11)
               && (!_inventDimParm.InventDimension12Flag || itemTracingView.inventDimension12 == _inventDim.InventDimension12)
            exists join workInventTrans
                where workInventTrans.InventoryTransactionOriginId == itemTracingView.InventoryTransactionOriginId
                   && workInventTrans.WorkId == _workId
                   && workInventTrans.LineNum == _lineNum
                   && workInventTrans.ItemId == _itemId;

        return itemTracingView;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>