<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AmountAdjustEngine_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class AmountAdjustEngine_W
{
    AmountMST totalMST,
              totalMST_Calculated,
              totalMST_Locked;

    Map       adjustMap,
              lockedMap;

    #define.AmountPosition(2)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds line to the map for the further analysis.
    /// </summary>
    /// <param name="_line">
    ///    Line to be inserted.
    /// </param>
    /// <remarks>
    ///    The map is being sorted by the key, so the first element of the container key is the absolute value of the amount.
    ///    This is made for the sorting to be independent of the sign (to make credit-note lines be processed in the same order as direct document lines).
    /// </remarks>
    final protected void addLine(Common _line)
    {
        AmountMST       amountCalculated, amountLocked;
        MarkupTable     markupTable;
        ;
        switch (_line.TableId)
        {
            case tablenum(CustInvoiceTrans)         :
                [ amountCalculated, amountLocked ] = this.calcLine_CustInvoiceTrans(_line);
                break;
            case tablenum(VendInvoiceTrans)         :
                [ amountCalculated, amountLocked ] = this.calcLine_VendInvoiceTrans(_line);
                break;
            case tablenum(MarkupTrans)              :
                [ amountCalculated, amountLocked ] = this.calcLine_MarkupTrans(_line);
                markupTable                        = _line.markupTable();
                break;
            case tablenum(CustInvoice4PaymTrans_RU) :
                [ amountCalculated, amountLocked ] = this.calcLine_CustInvoice4PaymTrans(_line);
                break;
            case tablenum(VendInvoice4PaymTrans_RU) :
                [ amountCalculated, amountLocked ] = this.calcLine_VendInvoice4PaymTrans(_line);
                break;
            default :
                throw error("@SYS83964");
        }

        if (amountLocked)
        {
            lockedMap.insert([ abs(amountLocked), amountLocked, _line.TableId, _line.RecId ], _line);

            totalMST_Locked += amountLocked;
        }

        if (amountCalculated && !((markupTable.CustType == MarkupType::LedgerAccount) && (markupTable.VendType == MarkupType::LedgerAccount)))
        {
            adjustMap.insert([ abs(amountCalculated), amountCalculated, _line.TableId, _line.RecId ], _line);
            totalMST_Calculated += amountCalculated;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLine_CustInvoice4PaymTrans</Name>
				<Source><![CDATA[
    protected container calcLine_CustInvoice4PaymTrans(CustInvoice4PaymTrans_RU _line)
    {
        AmountMST dummy() // BP warning
        {
            return _line.LineAmountMST;
        }

        return [ 0, 0 ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLine_CustInvoiceTrans</Name>
				<Source><![CDATA[
    protected container calcLine_CustInvoiceTrans(CustInvoiceTrans _line)
    {
        AmountMST dummy() // BP warning
        {
            return _line.LineAmountMST;
        }

        return [ 0, 0 ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLine_MarkupTrans</Name>
				<Source><![CDATA[
    protected container calcLine_MarkupTrans(MarkupTrans _line)
    {
        AmountMST dummy() // BP warning
        {
            return _line.CalculatedAmountMST_W;
        }

        return [ 0, 0 ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLine_VendInvoice4PaymTrans</Name>
				<Source><![CDATA[
    protected container calcLine_VendInvoice4PaymTrans(VendInvoice4PaymTrans_RU _line)
    {
        AmountMST dummy() // BP warning
        {
            return _line.LineAmountMST;
        }

        return [ 0, 0 ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLine_VendInvoiceTrans</Name>
				<Source><![CDATA[
    protected container calcLine_VendInvoiceTrans(VendInvoiceTrans _line)
    {
        AmountMST dummy() // BP warning
        {
            return _line.LineAmountMST_W;
        }

        return [ 0, 0 ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>editLine</Name>
				<Source><![CDATA[
    private void editLine(Common _line, AmountMST _newAmountMST)
    {
        if(!_line.selectForUpdate())
        {
            _line.selectForUpdate(true);
        }

        switch (_line.TableId)
        {
            case tablenum(CustInvoiceTrans)         :
                this.editLine_CustInvoiceTrans(_line, _newAmountMST);
                break;
            case tablenum(VendInvoiceTrans)         :
                this.editLine_VendInvoiceTrans(_line, _newAmountMST);
                break;
            case tablenum(MarkupTrans)              :
                this.editLine_MarkupTrans(_line, _newAmountMST);
                break;
            case tablenum(CustInvoice4PaymTrans_RU) :
                this.editLine_CustInvoice4PaymTrans(_line, _newAmountMST);
                break;
            case tablenum(VendInvoice4PaymTrans_RU) :
                this.editLine_VendInvoice4PaymTrans(_line, _newAmountMST);
                break;
        }

        _line.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editLine_CustInvoice4PaymTrans</Name>
				<Source><![CDATA[
    private void editLine_CustInvoice4PaymTrans(CustInvoice4PaymTrans_RU _line, AmountMST _newAmountMST)
    {
        _line.LineAmountMST = _newAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editLine_CustInvoiceTrans</Name>
				<Source><![CDATA[
    private void editLine_CustInvoiceTrans(CustInvoiceTrans _line, AmountMST _newAmountMST)
    {
        _line.LineAmountMST = _newAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editLine_MarkupTrans</Name>
				<Source><![CDATA[
    private void editLine_MarkupTrans(MarkupTrans _line, AmountMST _newAmountMST)
    {
        _line.CalculatedAmountMST_W = _newAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editLine_VendInvoice4PaymTrans</Name>
				<Source><![CDATA[
    private void editLine_VendInvoice4PaymTrans(VendInvoice4PaymTrans_RU _line, AmountMST _newAmountMST)
    {
        _line.LineAmountMST = _newAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editLine_VendInvoiceTrans</Name>
				<Source><![CDATA[
    private void editLine_VendInvoiceTrans(VendInvoiceTrans _line, AmountMST _newAmountMST)
    {
        _line.LineAmountMST_W = _newAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    final protected void new()
    {
        adjustMap = new Map(Types::Container, Types::Record);
        lockedMap = new Map(Types::Container, Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalMST</Name>
				<Source><![CDATA[
    final protected void parmTotalMST(AmountMST _totalMST = totalMST)
    {
        totalMST = _totalMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    final protected void run()
    {
        this.updateAdjust();
        this.updateLocked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAdjust</Name>
				<Source><![CDATA[
    private void updateAdjust()
    {
        MapIterator iterator = new MapIterator(adjustMap);
        int         curLine;

        Amount      difference       = totalMST - totalMST_Calculated - totalMST_Locked,
                    differenceRemain = difference,
                    differenceAllocate;

        Amount      curAmount;

        while (iterator.more())
        {
            curLine ++;

            curAmount = conpeek(iterator.key(), #AmountPosition);

            differenceAllocate = curLine == adjustMap.elements() ?
                                 differenceRemain                :
                                 (  (totalMST - totalMST_Locked)                                            ?
                                    CurrencyExchangeHelper::amount(difference * curAmount / (totalMST - totalMST_Locked)) :
                                    0
                                 );

            this.editLine(iterator.value(), curAmount + differenceAllocate);

            differenceRemain -= differenceAllocate;

            iterator.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLocked</Name>
				<Source><![CDATA[
    private void updateLocked()
    {
        MapIterator iterator = new MapIterator(lockedMap);

        while (iterator.more())
        {
            this.editLine(iterator.value(), conpeek(iterator.key(), #AmountPosition));

            iterator.next();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>