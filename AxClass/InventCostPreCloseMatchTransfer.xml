<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostPreCloseMatchTransfer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventCostPreCloseMatchTransfer</c> class matches return inventory transactions.
/// </summary>
/// <remarks>
///    Non return inventory transactions are not matched.
/// </remarks>
class InventCostPreCloseMatchTransfer extends InventCostPreCloseMatch
{
    InventCostReferenceCategoryCache    referenceCategoryCache;
    Map                                 transferInventTransOriginMap;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addInventTrans</Name>
				<Source><![CDATA[
/// <summary>
    ///    Adds an inventory transaction to match.
    /// </summary>
    /// <param name="_inventTrans">
    ///    The inventory transaction to add.
    /// </param>
    public void addInventTrans(InventTrans _inventTrans)
    {
        if (this.isTransfer(_inventTrans.InventTransOrigin)
        // <GEERU>
        && !(countryRegion_RU && _inventTrans.isTransferOrderStorno_RU())
        // </GEERU>
        )
        {
            super(_inventTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMatching</Name>
				<Source><![CDATA[
/// <summary>
    ///    Indicates if an inventory transaction matches other inventory transactions.
    /// </summary>
    /// <param name="_inventTrans">
    ///    The inventory transaction to check.
    /// </param>
    /// <returns>
    ///    true if the inventory transactions matches other inventory transactions; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    All inventory transactions need to be added to the match before you call this method.
    /// </remarks>
    public boolean isMatching(InventTrans _inventTrans)
    {
        if (this.isTransfer(_inventTrans.InventTransOrigin)
        // <GEERU>
        && !(countryRegion_RU && _inventTrans.isTransferOrderStorno_RU())
        // </GEERU>
        )
        {
            return super(_inventTrans);
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>key</Name>
				<Source><![CDATA[
/// <summary>
    ///    Computes the key that is used in the match.
    /// </summary>
    /// <param name="_inventTrans">
    ///    The inventory transaction.
    /// </param>
    /// <returns>
    ///    The key that is used in the match.
    /// </returns>
    protected str key(InventTrans _inventTrans)
    {
        if (_inventTrans.Qty > 0)
        {
            return int642str(_inventTrans.InventTransOrigin) + '#' + int642str(this.getTransferInventTransOrigin(_inventTrans)) + '#' + _inventTrans.VoucherPhysical;
        }
        else if (_inventTrans.Qty < 0)
        {
            return int642str(this.getTransferInventTransOrigin(_inventTrans)) + '#' + int642str(_inventTrans.InventTransOrigin) + '#' + _inventTrans.VoucherPhysical;
        }

        throw error(strFmt("@SYS19378",funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static InventCostPreCloseMatchTransfer construct(
        InventTransCurrency_RU  _inventTransCurrency = InventTransCurrency_RU::PrimaryCur)
    {
        InventCostPreCloseMatchTransfer inventCostPreCloseMatchTransfer = new InventCostPreCloseMatchTransfer();
        InventCostPreCloseMatchTransfer.parmInventTransCurrency(_inventTransCurrency);

        return inventCostPreCloseMatchTransfer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransferInventTransOrigin</Name>
				<Source><![CDATA[
    private InventTransOriginId getTransferInventTransOrigin(InventTrans _inventTrans)
    {
        InventTransOriginId     transferInventTransOrigin;

        if (!transferInventTransOriginMap)
        {
            transferInventTransOriginMap = new Map(Types::Int64, Types::Int64);
        }

        if (transferInventTransOriginMap.exists(_inventTrans.RecId))
        {
            transferInventTransOrigin = transferInventTransOriginMap.lookup(_inventTrans.RecId);
        }
        else
        {
            transferInventTransOrigin = _inventTrans.transferInventTransOrigin().RecId;
            transferInventTransOriginMap.insert(_inventTrans.RecId, transferInventTransOrigin);
        }

        return transferInventTransOrigin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasSettlements</Name>
				<Source><![CDATA[
    protected boolean hasSettlements(InventTrans _inventTrans)
    {
        boolean hasSettlements;
        InventTransType referenceCategory = referenceCategoryCache.getReferenceCategory(_inventTrans.InventTransOrigin);

        if (this.isTransferAlwaysFinancialUpdated(referenceCategory))
        {
            if (inventTransCurrency == InventTransCurrency_RU::PrimaryCur)
            {
                hasSettlements = (_inventTrans.QtySettled != 0.0 || _inventTrans.CostAmountSettled != 0.0 || _inventTrans.CostAmountAdjustment != 0.0);
            }
            else
            {
                hasSettlements = (_inventTrans.QtySettledSecCur_RU != 0.0 || _inventTrans.CostAmountSettledSecCur_RU != 0.0 || _inventTrans.CostAmountSecCurAdjustment_RU != 0.0);
            }
        }
        else
        {
            hasSettlements = super(_inventTrans);
        }

        return hasSettlements;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if an InventTransOriginId is a transfer.
    /// </summary>
    /// <param name="_inventTransOriginId">
    /// The <c>InventTransOriginId</c>.
    /// </param>
    /// <returns>
    /// true if the <c>InventTransOriginId</c> is a transfer; otherwise false.
    /// </returns>
    private boolean isTransfer(InventTransOriginId _inventTransOriginId)
    {
        if (!referenceCategoryCache)
        {
            referenceCategoryCache = InventCostReferenceCategoryCache::construct();
        }

        InventTransType referenceCategory = referenceCategoryCache.getReferenceCategory(_inventTransOriginId);

        return InventTransOrigin::isReferenceCategoryTransfer(referenceCategory);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransferAlwaysFinancialUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a transfer always is financially updated.
    /// </summary>
    /// <param name="_referenceCategory">
    /// The reference category of the transfer.
    /// </param>
    /// <returns>
    /// true if the transfer always is financially updated; otherwise false.
    /// </returns>
    private boolean isTransferAlwaysFinancialUpdated(InventTransType _referenceCategory)
    {
        if (_referenceCategory == InventTransType::QuarantineOrder)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReferenceCategoryCache</Name>
				<Source><![CDATA[
    public InventCostReferenceCategoryCache parmReferenceCategoryCache(InventCostReferenceCategoryCache _referenceCategoryCache = referenceCategoryCache)
    {
        referenceCategoryCache = _referenceCategoryCache;

        return referenceCategoryCache;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>