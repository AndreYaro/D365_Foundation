<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxRecalcForUnpostedTransaction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///   Recalculate tax for unposted transactions.
/// </summary>
class TaxRecalcForUnpostedTransaction extends RunBaseBatch implements BatchRetryable
{
    FormDataSource  taxItemGroupHeadingDS;
    List            taxGroupHeadings;
    boolean         recalcAll;
    FormDataSource  taxTableDS;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the class is shown in the list of <c>Journal</c> types.
    /// </summary>
    /// <returns>
    /// true if the class is shown in the list of <c>Journal</c> types; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A class that can be used in a batch journal is a class where the same parameters can be used
    /// repeatedly. The dialog box can be shown and the parameters can be changed but parameters of some
    /// classes might build on data that is only valid for a short time. Running a class two times with the
    /// same parameters is not always possible. If <see cref="M:RunBaseBatch.canGoBatch" /> is false, this
    /// method will not have any effect.
    /// </remarks>
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the batch job will be run with the account of the user who created the job.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// If you want a batch job that extends this class to run on a client, you must override this method
    /// to return false. Jobs that return true must not access any client-side functionality. If true is
    /// returned, the batch server will execute the job by using the <c>runAs</c> method.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS343791";
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemGroupHeadingDataSource</Name>
				<Source><![CDATA[
    public FormDataSource parmItemGroupHeadingDataSource(FormDataSource _formDataSource = taxItemGroupHeadingDS)
    {
        taxItemGroupHeadingDS = _formDataSource;
        return taxItemGroupHeadingDS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmListTaxGroup</Name>
				<Source><![CDATA[
    public List parmListTaxGroup(List _list = taxGroupHeadings)
    {
        taxGroupHeadings = _list;
        return taxGroupHeadings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecalcAll</Name>
				<Source><![CDATA[
    public boolean parmRecalcAll(boolean _recalcAll = recalcAll)
    {
        recalcAll = _recalcAll;
        return recalcAll;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxTableDataSource</Name>
				<Source><![CDATA[
    public FormDataSource parmTaxTableDataSource(FormDataSource _formDataSource = taxTableDS)
    {
        taxTableDS = _formDataSource;
        return taxTableDS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run in new session.
    /// </summary>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the main logic of the class.
    /// </summary>
    public void run()
    {
        if(recalcAll)
        {
            TaxUncommitted::deleteTaxUncommitted();
        }
        else if (taxItemGroupHeadingDS)
        {
            TaxItemGroupHeading localTaxItemGroupHeading;
            for (localTaxItemGroupHeading = getFirstSelection(taxItemGroupHeadingDS);
                localTaxItemGroupHeading;
                localTaxItemGroupHeading = taxItemGroupHeadingDS.getNext())
            {
                TaxUncommitted::deleteForItemTaxGroup(localTaxItemGroupHeading.TaxItemGroup);
            }
        }
        else if(taxGroupHeadings)
        {
            var enumerator = taxGroupHeadings.getEnumerator();
            while (enumerator.moveNext())
            {
                TaxUncommitted::deleteForTaxGroup(enumerator.current());
            }
        }
        else if(taxTableDS)
        {
            TaxTable localTaxTable;
            for (localTaxTable = getFirstSelection(taxTableDS);
                localTaxTable;
                localTaxTable = taxTableDS.getNext())
            {
                TaxUncommitted::deleteForTaxCode(localTaxTable.TaxCode);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>