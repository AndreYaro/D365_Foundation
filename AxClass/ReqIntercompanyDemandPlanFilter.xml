<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqIntercompanyDemandPlanFilter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The class <c>ReqIntercompanyDemandPlanFilter</c> implements the building a plan version filter that
///    is based on the intercompany group setup.
/// </summary>
class ReqIntercompanyDemandPlanFilter
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getPlanVersions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a set of plan versions on which to filter, when querying for intercompany demand in various
    ///    companies.
    /// </summary>
    /// <param name="_planId">
    ///    The master plan ID for which to retrieve demand.
    /// </param>
    /// <param name="_intercompanyGroup">
    ///    The intercompany group for which to retrieve demand; optional.
    /// </param>
    /// <param name="_callerReqTrans">
    ///    The calling <c>ReqTrans</c> record; optional.
    /// </param>
    /// <returns>
    ///    A <c>Set</c> that contains plan version record IDs.
    /// </returns>
    public Set getPlanVersions(ReqPlanIdSched _planId, ReqIntercompanyPlanningGroupRecId _intercompanyGroup = 0, ReqTrans _callerReqTrans = null)
    {
        Set             planVersions = new Set(Types::Int64);
        ReqPlanSched    vendorPlan;
        ReqPlanVersion  customerPlanVersion;
        ReqIntercompanyPlanningGroupMember intercompanyGroupMember;
        ReqIntercompanyMasterPlanMapping masterPlanMapping;
        ReqPlanSched            reqPlanSched;
        ReqPO reqPO;

        reqPlanSched = reqPlanSched::find(_planId);
        if (reqPlanSched.includePlannedIntercompanyDemand == NoYes::No)
        {
            return planVersions;
        }

        if (_callerReqTrans && _callerReqTrans.IntercompanyPlannedOrder)
        {
            select firstonly crossCompany PlanVersion from reqPO where reqPO.RecId == _callerReqTrans.IntercompanyPlannedOrder;

            if (reqPO)
            {
                planVersions.add(reqPO.PlanVersion);
            }
        }

        if (ReqDeprecatedFunctionalitySharedParameters::find().IsIntercompanyGroupDownstreamDemandDeprecated)
        {
            this.addIntercompanyDemandPlanVersions(_planId, planVersions);
        }
        else
        {
            if (_intercompanyGroup)
            {
                while select RecId from customerPlanVersion
                where   customerPlanVersion.ReqPlanDataAreaId != curext()
                &&      customerPlanVersion.Active
                    exists join intercompanyGroupMember
                    where   intercompanyGroupMember.PlanningGroup               == _intercompanyGroup
                    &&      intercompanyGroupMember.IntercompanyPlanId          == customerPlanVersion.ReqPlanId
                    &&      intercompanyGroupMember.IntercompanyPlanDataAreaId  == customerPlanVersion.ReqPlanDataAreaId
                {
                    planVersions.add(customerPlanVersion.RecId);
                }
            }

            while select RecId from customerPlanVersion
            where   customerPlanVersion.Active
                exists join masterPlanMapping
                where   masterPlanMapping.CustomerPlanId        == customerPlanVersion.ReqPlanId
                &&      masterPlanMapping.CustomerDataAreaId    == customerPlanVersion.ReqPlanDataAreaId
                exists join vendorPlan
                where   masterPlanMapping.VendorPlanId          == vendorPlan.ReqPlanIdSched
                &&      masterPlanMapping.VendorDataAreaId      == vendorPlan.DataAreaId
                &&      vendorPlan.ReqPlanIdSched               == _planId
                &&          vendorPlan.IncludePlannedIntercompanyDemand
                // exclude all plans from the companies which are included into the planning group, if the group is specified
                notexists join intercompanyGroupMember
                    where   (intercompanyGroupMember.PlanningGroup               == _intercompanyGroup && _intercompanyGroup)
                        && intercompanyGroupMember.IntercompanyPlanDataAreaId == customerPlanVersion.ReqPlanDataAreaId
            {
                planVersions.add(customerPlanVersion.RecId);
            }
        }

        return planVersions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addIntercompanyDemandPlanVersions</Name>
				<Source><![CDATA[
    private void addIntercompanyDemandPlanVersions(ReqPlanIdSched _planId, Set _planVersions)
    {
        ReqPlanSched                        vendorPlan;
        ReqPlanVersion                      customerPlanVersion;
        ReqIntercompanyMasterPlanMapping    masterPlanMapping;
        
        while select RecId from customerPlanVersion
            where   customerPlanVersion.Active
                exists join masterPlanMapping
                where   masterPlanMapping.CustomerPlanId        == customerPlanVersion.ReqPlanId
                &&      masterPlanMapping.CustomerDataAreaId    == customerPlanVersion.ReqPlanDataAreaId
                exists join vendorPlan
                where   masterPlanMapping.VendorPlanId          == vendorPlan.ReqPlanIdSched
                &&      masterPlanMapping.VendorDataAreaId      == vendorPlan.DataAreaId
                &&      vendorPlan.ReqPlanIdSched               == _planId
                &&      vendorPlan.IncludePlannedIntercompanyDemand
        {
            _planVersions.add(customerPlanVersion.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ReqIntercompanyDemandPlanFilter construct()
    {
        return new ReqIntercompanyDemandPlanFilter();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>