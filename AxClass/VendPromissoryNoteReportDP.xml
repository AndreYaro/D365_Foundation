<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendPromissoryNoteReportDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendPromissoryNoteReportDP</c> class fetches records for the <c>VendPromissoryNoteReport</c>
/// SSRS report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(VendPromissoryNoteReport)),
    SRSReportParameterAttribute(classstr(VendPromissoryNoteReportDPContract))
]
public class VendPromissoryNoteReportDP extends SRSReportDataProviderBase
{
    private VendPromissoryNoteReportTmp vendPromissoryNoteReportTmp;
    private VendPromissoryNoteJour vendPromissoryNoteJour;

    private VendPromissoryNoteInvoice vendPromissoryNoteInvoice;
    private VendTrans vendTrans;
    private VendTransOpen vendTransOpen;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the currency code from the <c>VendPromissoryNoteTrans</c> table.
    /// </summary>
    /// <returns>
    /// The <c>CurrencyCode</c> value.
    /// </returns>
    private CurrencyCode getCurrencyCode()
    {
        VendPromissoryNoteTrans vendPromissoryNoteTrans;
        CustVendNegInstSeqNum seqNum = VendPromissoryNoteTrans::maxSeqNum(vendPromissoryNoteJour.PromissoryNoteId);

        select firstonly CurrencyCode from vendPromissoryNoteTrans
            where vendPromissoryNoteTrans.PromissoryNoteId == vendPromissoryNoteJour.PromissoryNoteId
                && vendPromissoryNoteTrans.Status == vendPromissoryNoteJour.Status
                && vendPromissoryNoteTrans.SeqNum == seqNum;

        return vendPromissoryNoteTrans.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the <c>PaymMode</c> if the condition is satisfied.
    /// </summary>
    /// <returns>
    /// The <c>PaymMode</c> value.
    /// </returns>
    private CustPaymMode getPaymMode()
    {
        VendPromissoryNoteTrans vendPromissoryNoteTrans;
        CustVendNegInstSeqNum seqNum = VendPromissoryNoteTrans::maxSeqNum(vendPromissoryNoteJour.PromissoryNoteId);

        select firstonly PromissoryNoteId, VendAccount, Voucher, TransDate from vendPromissoryNoteTrans
            where vendPromissoryNoteTrans.PromissoryNoteId == vendPromissoryNoteJour.PromissoryNoteId
                && vendPromissoryNoteTrans.Status == vendPromissoryNoteJour.Status
                && vendPromissoryNoteTrans.SeqNum == seqNum;

        if (vendPromissoryNoteTrans)
        {
            select firstonly PaymMode from vendTrans
                where vendTrans.PromissoryNoteID == vendPromissoryNoteTrans.PromissoryNoteId
                    && vendTrans.AccountNum == vendPromissoryNoteTrans.VendAccount
                    && vendTrans.Voucher == vendPromissoryNoteTrans.Voucher
                    && vendTrans.TransDate == vendPromissoryNoteTrans.TransDate;
        }

        return vendTrans.PaymMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendPromissoryNoteReportTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data for the report from the <c>VendPromissoryNoteReportTmp</c> table.
    /// </summary>
    /// <returns>
    /// The <c>VendPromissoryNoteReportTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tablestr(VendPromissoryNoteReportTmp)), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public VendPromissoryNoteReportTmp getVendPromissoryNoteReportTmp()
    {
        select vendPromissoryNoteReportTmp;
        return vendPromissoryNoteReportTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertVendPromissoryNoteReportTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records into the <c>VendPromissoryNoteReportTmp</c> table.
    /// </summary>
    /// <param name="_cursor">
    /// The parameter is used when inserting the records.
    /// </param>
    /// <remarks>
    /// The records are inserted into the <c>VendPromissoryNoteReportTmp</c> table that is based on the
    /// value of the parameter passed.The parameter pointer is passed from the <c>processReport</c> method.
    /// </remarks>
    private void insertVendPromissoryNoteReportTmp(Common _cursor)
    {
        if (_cursor.TableId == tablenum(VendPromissoryNoteJour))
        {
            vendPromissoryNoteReportTmp.clear();
            vendPromissoryNoteReportTmp.PromissoryNoteId = vendPromissoryNoteJour.PromissoryNoteId;
            vendPromissoryNoteReportTmp.VendAccount = vendPromissoryNoteJour.VendAccount;
            vendPromissoryNoteReportTmp.DueDate = vendPromissoryNoteJour.DueDate;
            vendPromissoryNoteReportTmp.DocumentDate = vendPromissoryNoteJour.DocumentDate;
            vendPromissoryNoteReportTmp.ApprovalDate = vendPromissoryNoteJour.ApprovalDate;
            vendPromissoryNoteReportTmp.Status = vendPromissoryNoteJour.Status;
            vendPromissoryNoteReportTmp.AmountDrawn = vendPromissoryNoteJour.amountDrawn();
            vendPromissoryNoteReportTmp.AmountMSTDrawn = vendPromissoryNoteJour.amountMSTDrawn();
            vendPromissoryNoteReportTmp.AmountMSTOpen = vendPromissoryNoteJour.amountMSTOpen();
            vendPromissoryNoteReportTmp.Currency = this.getCurrencyCode();
            vendPromissoryNoteReportTmp.PaymMode = this.getPaymMode();
        }

        if (_cursor.TableId == tablenum(VendPromissoryNoteInvoice))
        {
            vendPromissoryNoteReportTmp.clear();
            vendPromissoryNoteReportTmp.PromissoryNoteId = vendPromissoryNoteJour.PromissoryNoteId;
            vendPromissoryNoteReportTmp.InvoiceId = vendPromissoryNoteInvoice.InvoiceId;
            vendPromissoryNoteReportTmp.InvoiceAccountNum = vendPromissoryNoteInvoice.InvoiceAccountNum;
            vendPromissoryNoteReportTmp.InvoiceCompany = vendPromissoryNoteInvoice.InvoiceCompany;
            vendPromissoryNoteReportTmp.Voucher_NoteInvoice = vendPromissoryNoteInvoice.Voucher;
            vendPromissoryNoteReportTmp.DueDate_NoteInvoice = vendPromissoryNoteInvoice.DueDate;
            vendPromissoryNoteReportTmp.InvoiceAmountCur = vendPromissoryNoteInvoice.InvoiceAmountCur;
            vendPromissoryNoteReportTmp.CurrencyCode = vendPromissoryNoteInvoice.CurrencyCode;
        }

        if (_cursor.TableId == tablenum(VendTrans))
        {
            vendPromissoryNoteReportTmp.clear();
            vendPromissoryNoteReportTmp.PromissoryNoteId = vendPromissoryNoteJour.PromissoryNoteId;
            vendPromissoryNoteReportTmp.Voucher = vendTrans.Voucher;
            vendPromissoryNoteReportTmp.TransDate = vendTrans.TransDate;
            vendPromissoryNoteReportTmp.PostingProfile = vendTrans.PostingProfile;
            vendPromissoryNoteReportTmp.AmountMST = vendTrans.AmountMST;
            vendPromissoryNoteReportTmp.Txt = vendTrans.Txt;
        }

        if (_cursor.TableId == tablenum(VendTransOpen))
        {
            vendPromissoryNoteReportTmp.BankDiscNoticeDeadline = vendTransOpen.BankDiscNoticeDeadline;
        }

        vendPromissoryNoteReportTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>printSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the records into the <c>VendPromissoryNoteReportTmp</c> table if the settlement parameter
    /// is selected.
    /// </summary>
    private void printSettlement()
    {
        while select vendPromissoryNoteInvoice
            where vendPromissoryNoteInvoice.PromissoryNoteId == vendPromissoryNoteJour.PromissoryNoteId
        {
            this.insertVendPromissoryNoteReportTmp(vendPromissoryNoteInvoice);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the records into the <c>VendPromissoryNoteReportTmp</c> table if the transactions parameter
    /// is selected.
    /// </summary>
    private void printTransactions()
    {
        while select vendTrans
            where vendTrans.PromissoryNoteID == vendPromissoryNoteJour.PromissoryNoteId
            outer join vendTransOpen
                where vendTransOpen.AccountNum == vendTrans.AccountNum
                    && vendTransOpen.RecId == vendTrans.RecId
        {
            this.insertVendPromissoryNoteReportTmp(vendTrans);
            this.insertVendPromissoryNoteReportTmp(vendTransOpen);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves records based on the parameters entered.
    /// </summary>
    public void processReport()
    {
        VendPromissoryNoteReportDPContract contract = this.parmDataContract() as VendPromissoryNoteReportDPContract;
        QueryRun queryRun = new QueryRun(this.parmQuery());


        NoYes showSettlement = contract.parmShowSettlement();
        NoYes showTransactions = contract.parmShowTransactions();

        while (queryRun.next())
        {
            vendPromissoryNoteJour = queryRun.get(tablenum(VendPromissoryNoteJour));

            this.insertVendPromissoryNoteReportTmp(vendPromissoryNoteJour);

            if (showSettlement)
            {
                this.printSettlement();
            }

            if (showTransactions)
            {
                this.printTransactions();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>