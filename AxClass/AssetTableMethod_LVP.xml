<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTableMethod_LVP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>AssetTableMethod_LVP</c> class calculates depreciation for a specific period using the low
///    value pool depreciation method.
/// </summary>

class AssetTableMethod_LVP extends AssetTableMethod
{
    boolean                                     theEnd;
    AssetAmount                                 totalAmountDep;
    AssetNetBookValue                           netBookValue;
    AssetAmount                                 firstYearPercent;
    AssetAmount                                 lvpPercent;
    AssetTransDate                              currentYear;
    boolean                                     firstTime;
    AssetTableInterval                          yearlyInterval;
    AssetAmount                                 firstYearPrevDepAmount;
    AssetAmount                                 prevYearsDepAmount;
    AssetAmount                                 prevYearsDepAmountTemp;
    boolean                                     firstYearCalculated;

    /// <summary>
    ///    Calculates depreciation for a specific period by using the low value pool depreciation method.
    /// </summary>
    /// <returns>
    ///    The amount of depreciation for the specific period.
    /// </returns>

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public AssetAmount calc()
    {
        AssetAmount                                 assetAmount;
        AssetTransDate                              orgPeriodEnd;
        AssetTransDate                              startOfPeriod;
        AssetTransDate                              endOfPeriod;
        AssetTransDate                              startOfPeriodYear;
        AssetTransDate                              endOfPeriodYear;
        AssetAmount                                 lowValueAmount;
        AssetAmount                                 lowCostAmount;
        AssetAmount                                 secondaryAmount;
        int                                         numberOfRemainingPeriods;
        AssetTrans                                  assetTrans;
        AssetSumCalc_Trans                          assetSumCalc_Trans_Current;

        orgPeriodEnd = periodEnd;
        startOfPeriod = deprInterval.startOfPeriod(periodstart);
        endOfPeriod = deprInterval.endPeriod(periodstart);
        startOfPeriodYear = yearlyInterval.startOfPeriod(periodstart);
        endOfPeriodYear = yearlyInterval.endPeriod(startOfPeriodYear);

        if (!startOfPeriodYear)
        {
            throw error(strFmt("@SYS344546", periodstart));
        }

        //Depreciation continues so long as net book value is above 2.00
        assetSumCalc_Trans_Current = AssetSumCalc_Trans::newAssetPeriod(assetBook.AssetId, assetBook.BookId, dateNull(), endOfPeriodYear);
        amountToDepreciate = assetSumCalc_Trans_Current.netBookValue() - totalAmountDep - firstYearPrevDepAmount;

        if (!currentYear)
        {
            currentYear = endOfPeriod;
        }

        // If starting a new year, then calculate the net book value at the
        // end of the previous year.  This will not include any depreciation that
        // may have been calculted for this run, so that must be subtracted.
        // But, the net book value at the end of the previous year will include
        // the depreciation calculated for the first year of the asset, so we do 
        // not include the firstYearPrevDepAmount in the calculation.
        if (deprInterval.hasYearChanged(currentYear, startOfPeriod) || firstTime)
        {
            prevYearsDepAmount += prevYearsDepAmountTemp;
            prevYearsDepAmountTemp = 0;

            if (firstTime == false && AssetTableMethod_LVPNetBookValueFlight::instance().isEnabled())
            {
                netBookValue = this.prevYearsNetBookValue(startOfPeriod) - prevYearsDepAmount;
            }
            else
            {
                netBookValue = this.prevYearsNetBookValue(startOfPeriod) - prevYearsDepAmount - firstYearPrevDepAmount;
            }

            currentYear = endOfPeriod;
            firstTime = false;
        }

        // Loop through assetTrans and sum totals by low value cost, low value asset, and
        // secondary element cost for the period
        while select assetTrans
            where assetTrans.AssetId == assetBook.AssetId
                && assetTrans.BookId == assetBook.BookId
                && assetTrans.TransDate >= startOfPeriodYear
                && assetTrans.TransDate <= endOfPeriod
        {
            // Amounts are prorated based on the number of periods left in the year
            // including the period in which the transaction occured.
            numberOfRemainingPeriods = this.numberOfPeriodsLeftInYear(assetTrans.TransDate);

            // If the first period to depreciation is not the first period of the year
            // then calculate the depreciation amount from first of year to the start period
            if (!firstYearCalculated && startOfPeriodYear != startOfPeriod)
            {
                this.calcFirstYearPrevDepAmount(startOfPeriodYear, startOfPeriod, netBookValue);
            }
            firstYearCalculated = true;

            switch (assetTrans.LowValuePoolType_AU)
            {
                case AssetLowValuePoolType_AU::LowCostAsset     :
                    lowCostAmount += assetTrans.AmountMST / numberOfRemainingPeriods;
                    break;
                case AssetLowValuePoolType_AU::LowValueAsset     :
                    lowValueAmount += assetTrans.AmountMST / numberOfRemainingPeriods;
                    break;
                case AssetLowValuePoolType_AU::SecondElementCost     :
                    secondaryAmount += assetTrans.AmountMST / numberOfRemainingPeriods;
                    break;
            }
        }

        assetAmount = (((lowCostAmount + secondaryAmount) * firstYearPercent)
                        + ((lowValueAmount + (netBookValue/deprInterval.numOfPeriodsPerYear())) * lvpPercent));

        if (isReportingCurrencyDepreciation)
        {
            assetAmount = assetBook.roundOffDepreciation(assetAmount);
        }
        else
        {
            assetAmount = assetBook.roundOffDepreciationReportingCurrency(assetAmount);
        }

        AssetLowValuePoolMinDepreciationAmount_W minDeprAmount = assetDepreciationProfile.getMinDepreciationAmount();

        // If the depreciation amount for the year is less than min depreciation amount defined at depreciation profile and there are not future transactions
        // which would produce a depreciation amount in the future, then this
        // depreciation run is finished
        if (assetAmount * deprInterval.numOfPeriodsPerYear() < minDeprAmount && !AssetTrans::existTransAfterDate(assetBook.AssetId, assetBook.BookId, periodEnd))
        {
            assetAmount = 0;
            theEnd = true;
        }

        prevYearsDepAmountTemp += assetAmount;
        totalAmountDep += assetAmount;

        periodEnd++;
        periodstart = periodEnd;
        periodEnd   = deprInterval.endPeriod(periodstart);

        return assetAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcFirstYearPrevDepAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the depreciation amount from the start of the year to the start of the first
    ///    depreciation period calculated.
    /// </summary>
    /// <param name="_startDate">
    ///    The date of the start of the year.
    /// </param>
    /// <param name="_endDate">
    ///    The start date of the start of the first depreciation period calculated.
    /// </param>
    /// <param name="_netBookValue">
    ///    The net book value of the previous year.
    /// </param>
    /// <remarks>
    ///    This function is only used in the case that the first depreciation period falls in the middle of
    ///    the year. In this case, the depreciation must be calculated for previous periods in the year so
    ///    that net book value is correct for subsequent years calculated.
    /// </remarks>

    protected void calcFirstYearPrevDepAmount(  AssetTransDate _startDate,
                                                    AssetTransDate _endDate,
                                                    AssetNetBookValue _netBookValue)
    {
        AssetAmount                                 assetAmount;
        AssetTransDate                              startOfPeriod;
        AssetTransDate                              endOfPeriod;
        AssetTransDate                              startOfPeriodYear;
        AssetAmount                                 lowValueAmount;
        AssetAmount                                 lowCostAmount;
        AssetAmount                                 secondaryAmount;
        int                                         numberOfRemainingPeriods;
        AssetTrans                                  assetTrans;

        startOfPeriod = deprInterval.startOfPeriod(_startDate);
        endOfPeriod = deprInterval.endPeriod(startOfPeriod);
        startOfPeriodYear = yearlyInterval.startOfPeriod(_startDate);

        while (endOfPeriod < _endDate)
        {
            // Loop through assetTrans and sum totals by low value cost, low value asset, and
            // secondary element cost for the period
            while select TransDate, LowValuePoolType_AU, AmountMST from assetTrans
                where assetTrans.AssetId == assetBook.AssetId
                    && assetTrans.BookId == assetBook.BookId
                    && assetTrans.TransDate >= startOfPeriodYear
                    && assetTrans.TransDate <= endOfPeriod
            {
                // Amounts are prorated based on the number of periods left in the year
                // including the period in which the transaction occured.
                numberOfRemainingPeriods = this.numberOfPeriodsLeftInYear(assetTrans.TransDate);

                switch (assetTrans.LowValuePoolType_AU)
                {
                    case AssetLowValuePoolType_AU::LowCostAsset     :
                        lowCostAmount += assetTrans.AmountMST / numberOfRemainingPeriods;
                        break;
                    case AssetLowValuePoolType_AU::LowValueAsset     :
                        lowValueAmount += assetTrans.AmountMST / numberOfRemainingPeriods;
                        break;
                    case AssetLowValuePoolType_AU::SecondElementCost     :
                        secondaryAmount += assetTrans.AmountMST / numberOfRemainingPeriods;
                        break;
                }
            }

            firstYearPrevDepAmount = (((lowCostAmount + secondaryAmount) * firstYearPercent)
                            + ((lowValueAmount + (netBookValue/deprInterval.numOfPeriodsPerYear())) * lvpPercent));

            startOfPeriod = deprInterval.startOfPeriod(endOfPeriod + 1);
            endOfPeriod = deprInterval.endPeriod(startOfPeriod);

            if (isReportingCurrencyDepreciation)
            {
                assetAmount = assetBook.roundOffDepreciationReportingCurrency(assetAmount);
            }
            else
            {
                assetAmount = assetBook.roundOffDepreciation(assetAmount);
            }

            firstYearPrevDepAmount += assetAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes this instance of the <c>AssetTableMethod_LVP</c> class.
    /// </summary>

    public void init()
    {
        super();

        firstYearPercent = assetDepreciationProfile.lvpFirstYearPercentage_AU /100;
        lvpPercent = assetDepreciationProfile.lvpPercentage_AU / 100;
        firstTime = true;
        firstYearCalculated = false;

        switch (assetDepreciationProfile.DepreciationYear)
        {
            case AssetDepreciationYear::Calendar :
                yearlyInterval = new AssetTableInterval_Calendar(AssetAccrual::Yearly);
                break;
            case AssetDepreciationYear::Fiscal  :
                yearlyInterval =  AssetTableInterval_Fiscal::newFiscalCalendar(AssetAccrual::Yearly);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether there is another period for which depreciation should be calculated.
    /// </summary>
    /// <returns>
    ///    true if another period exists; otherwise, false.
    /// </returns>

    public boolean next()
    {
        if (theEnd)
            return false;

        if (parmRunDate <= baseDate)
            return false;

        this.setDepDate();

    //
    //  This prevents depreciations with invalid dates from
    //  being handled.
    //
        if (!depreciationDate ||
            depreciationDate > parmRunDate)
        {
            return false;
        }

        if (periodEnd < periodstart)
            return false;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfPeriodsLeftInYear</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the number of periods that remain in the year.
    /// </summary>
    /// <param name="_date">
    ///    The transaction date.
    /// </param>
    /// <returns>
    ///    The number of periods that remain in the year.
    /// </returns>
    /// <remarks>
    ///    The calculated number of periods includes the period that contains the transaction date.
    /// </remarks>

    private int numberOfPeriodsLeftInYear(AssetTransDate _date)
    {
        AssetTransDate      origStartDate;
        AssetTransDate      startPeriodDate;
        AssetTransDate      endPeriodDate;
        int                 numberOfPeriods;

        numberOfPeriods = 1;
        origStartDate = deprInterval.startOfPeriod(_date);
        startPeriodDate = deprInterval.endPeriod(origStartDate) + 1;
        endPeriodDate = deprInterval.endPeriod(startPeriodDate);

        while (!deprInterval.hasYearChanged(origStartDate, endPeriodDate))
        {
            numberOfPeriods++;
            startPeriodDate = endPeriodDate + 1;
            endPeriodDate = deprInterval.endPeriod(startPeriodDate);
        }

        return numberOfPeriods;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prevYearsNetBookValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the net book value for the prior year.
    /// </summary>
    /// <param name="_assetTransDate">
    ///    The current transaction date.
    /// </param>
    /// <returns>
    ///    The net book value of the prior year.
    /// </returns>

    private AssetAmount prevYearsNetBookValue(AssetTransDate _assetTransDate)
    {
        AssetTransDate toDate = yearlyInterval.openingPeriodDate(_assetTransDate) - 1;

        //
        //  Create a period based AssetSumCalc_Trans for the current asset
        //  using the lowest date value dateNull() (01/01/1900) and the
        //  to date as the date range.
        //  This date range represents the earliest transaction date possible to the
        //  last day of the previous year.
        //
        AssetSumCalc_Trans assetSumCalc_Trans_PriorYears = AssetSumCalc_Trans::newAssetPeriod(assetBook.AssetId, assetBook.BookId, dateNull(), toDate);

        //
        //  Create a total for all the asset depreciations and
        //  depreciation adjustments between (including) the two (2) dates.
        //
        AssetAmount retValue = assetSumCalc_Trans_PriorYears.netBookValue();

        return retValue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>