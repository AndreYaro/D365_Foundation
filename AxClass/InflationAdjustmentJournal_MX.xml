<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InflationAdjustmentJournal_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c> InflationAdjustmentJournal_MX </c>class handles the dialog of the inflation adjustment
///    process.
/// </summary>
public class InflationAdjustmentJournal_MX extends RunBaseBatch implements BatchRetryable
{
    Dialog                      dialog;

    DialogField                 dialogPostingLayer;
    DialogField                 dialogPostingDate;
    DialogField                 dialogTransTxt;
    DialogField                 dialogNotes;

    CurrentOperationsTax        postingLayer;
    TransDate                   postingDate;
    TransTxt                    transTxt;
    Notes                       notes;
    FromDate                    fromDate;
    ToDate                      toDate;

    RepomoReportTmp_MX          repomoReportTmp;
    RepomoReportTmp_MX          repomoReportTmpPL;
    InvAdjustmentReportTmp_MX   invReportTmp;
    CapitalAdjReportTmp_MX      capitalReportTmp;
    InflationAdjJournal_MX      inflationAdjJournalTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        #ISOCountryRegionCodes
        super();
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoMX, GlobalizationConstants::FeatureReferenceMX00002] ],
            funcName()
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a Dialog class with the necessary fields.
    /// </summary>
    /// <returns>
    ///    The Dialog class that is constructed.
    /// </returns>
    /// <remarks>
    ///    A Dialog class with the fields required for the inflation adjustment process.
    /// </remarks>
    public Object dialog()
    {
        dialog = super();

        dialog.caption("@SYS312853");

        dialog.addGroup("@SYS28007");
        dialogPostingLayer = dialog.addFieldValue(enumstr(CurrentOperationsTax), postingLayer, "","@SYS312355");
        dialogPostingDate  = dialog.addFieldValue(extendedtypestr(TransDate), postingDate, "@SYS14475","@SYS312354");
        dialogPostingDate.allowEdit(false);

        dialog.addGroup("@SYS40182");
        dialogTransTxt     = dialog.addFieldValue(extendedtypestr(TransTxt), transTxt, "", "@SYS312854");
        dialogNotes        = dialog.addFieldValue(extendedtypestr(Notes), notes, "","@SYS312855");

        dialog.addMenuItemButton(MenuItemType::Action, menuitemactionstr(InfAdjValidate_MX));

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the values from the <c>Dialog</c> class.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>Dialog</c> class.
    /// </returns>
    public boolean getFromDialog()
    {
        postingLayer = dialogPostingLayer.value();
        postingDate  = dialogPostingDate.value();
        transTxt     = dialogTransTxt.value();
        notes        = dialogNotes.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether the transactions exist or the amounts to be posted are greater than zero.
    /// </summary>
    /// <returns>
    ///    true if there are no errors; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method stops the posting routine if no transactions exist or if the amounts to be posted are
    ///    zero.
    /// </remarks>
    public boolean isValidTrans()
    {
        boolean                     ret = true;
        RepomoReportTmp_MX          repomoReport;
        CapitalAdjReportTmp_MX      capitalReport;
        InvAdjustmentReportTmp_MX   inventoryReport;
        #InflationAdjustment_MX

        repomoReport.setTmpData(repomoReportTmpPL);
        capitalReport.setTmpData(capitalReportTmp);
        inventoryReport.setTmpData(invReportTmp);

        select sum(BalanceMonthTotal)
            from repomoReport
            where repomoReport.ReportType == #PLAdjust;

        select sum(AdjustedAmount)
            from capitalReport;

        select sum(BalanceAdjusted)
            from inventoryReport;

        if (!repomoReportTmpPL
            && !capitalReportTmp
            && !invReportTmp)
        {
            info("@SYS28652");
            ret = false;
        }

        if (ret
            && !repomoReport.BalanceMonthTotal
            && !capitalReport.AdjustedAmount
            && !inventoryReport.BalanceAdjusted)
        {
            warning("@SYS25624");
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <paramref name="fromDate" /> parameter.
    /// </summary>
    /// <param name="_fromDate">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <paramref name="fromDate" /> parameter.
    /// </returns>
    FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInflationAdjJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <paramref name="inflationAdjJournalTable" /> parameter.
    /// </summary>
    /// <param name="_inflationAdjJournal">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <paramref name="inflationAdjJournalTable" /> parameter.
    /// </returns>
    InflationAdjJournal_MX parmInflationAdjJournal(InflationAdjJournal_MX _inflationAdjJournal = inflationAdjJournalTable)
    {
        inflationAdjJournalTable = _inflationAdjJournal;
        return inflationAdjJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNotes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <paramref name="notes" /> parameter.
    /// </summary>
    /// <param name="_notes">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <paramref name="notes" /> parameter.
    /// </returns>
    Notes parmNotes(Notes _notes = notes)
    {
        notes = _notes;
        return notes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <paramref name="postingDate" /> parameter.
    /// </summary>
    /// <param name="_postingDate">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <paramref name="postingDate" /> parameter.
    /// </returns>
    TransDate parmPostDate(TransDate _postingDate = postingDate)
    {
        postingDate = _postingDate;
        return postingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingLayer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <paramref name="postingLayer" /> parameter.
    /// </summary>
    /// <param name="_postingLayer">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <paramref name="postingLayer" /> parameter.
    /// </returns>
    CurrentOperationsTax parmPostingLayer(CurrentOperationsTax _postingLayer = postingLayer)
    {
        postingLayer = _postingLayer;
        return postingLayer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <paramref name="toDate" /> parameter.
    /// </summary>
    /// <param name="_toDate">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <paramref name="toDate" /> parameter.
    /// </returns>
    ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the inflation adjustment for all adjustment methods and posts the voucher.
    /// </summary>
    public void run()
    {
        InfAdjMethod_OpenBalance_MX     infAdjustmentMethod_OpenBalance;
        InfAdjMethod_MonthBalance_MX    infAdjustmentMethod_MonthBalance;
        InfAdjMethod_Balance_MX         infAdjustmentMethod_Balance;
        InfAdjMethod_TransDate_MX       infAdjustmentMethod_TransDate;
        InfAdjPost_MX                   inflationPost = new InfAdjPost_MX();
        container                       conRepomoMonthlyAdjustment;
        RepomoReportTmp_MX              repomoTmpPL;

        super();

        infAdjustmentMethod_OpenBalance  = InfAdjMethod_MX::construct(AdjustmentMethod_MX::OpenBalance);
        infAdjustmentMethod_MonthBalance = InfAdjMethod_MX::construct(AdjustmentMethod_MX::MonthlyBalance);
        infAdjustmentMethod_Balance      = InfAdjMethod_MX::construct(AdjustmentMethod_MX::Balance);
        infAdjustmentMethod_TransDate    = InfAdjMethod_MX::construct(AdjustmentMethod_MX::TransactionDate);

        //Repomo calculation
        repomoReportTmp             = infAdjustmentMethod_OpenBalance.populateTmpTable(fromDate, toDate);
        repomoReportTmp             = infAdjustmentMethod_OpenBalance.calculate(repomoReportTmp);
        conRepomoMonthlyAdjustment  = infAdjustmentMethod_OpenBalance.parmConRepomoMonthlyAdjustment();

        //P&L calculation
        infAdjustmentMethod_MonthBalance.parmConRepomoMonthlyAdjustment(conRepomoMonthlyAdjustment);
        repomoTmpPL                 = infAdjustmentMethod_MonthBalance.populateTmpTable(fromDate, toDate);
        repomoReportTmpPL           = infAdjustmentMethod_MonthBalance.calculate(repomoTmpPL);

        //Capital calculation
        capitalReportTmp            = infAdjustmentMethod_TransDate.populateTmpTable(fromDate, toDate);

        //Inventory calculation
        invReportTmp                = infAdjustmentMethod_Balance.populateTmpTable(fromDate, toDate);

        //Post voucher
        if (this.isValidTrans())
        {
            inflationPost.post(toDate, repomoReportTmpPL, capitalReportTmp, invReportTmp, transTxt, notes, inflationAdjJournalTable, postingLayer);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the inflation adjustment process.
    /// </summary>
    /// <param name="args">
    ///    The current record from which the process is named.
    /// </param>
    public static void main(Args args)
    {
        InflationAdjustmentJournal_MX   inflationAdj;

        if (!args.caller())
        {
            throw error(strfmt("@SYS22828", funcname()));
        }

        inflationAdj = InflationAdjustmentJournal_MX::newInflationAdjJournal(args.record());

        if (inflationAdj.prompt())
        {
            inflationAdj.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInflationAdjJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Instantiates an object of the InflationAdjustmentJournal_MX class.
    /// </summary>
    /// <param name="_inflationAdjJournal">
    ///    The InflationAdjJournal_MX table buffer.
    /// </param>
    /// <returns>
    ///    A new constructed object that uses the necessary values available in the global variables.
    /// </returns>
    static InflationAdjustmentJournal_MX newInflationAdjJournal(InflationAdjJournal_MX _inflationAdjJournal)
    {
        InflationAdjustmentJournal_MX   inflationAdj = new InflationAdjustmentJournal_MX();

        inflationAdj.parmPostDate(_inflationAdjJournal.TransDate);
        inflationAdj.parmFromDate(_inflationAdjJournal.FromDate);
        inflationAdj.parmToDate(_inflationAdjJournal.ToDate);
        inflationAdj.parmPostingLayer(_inflationAdjJournal.PostingLayer);
        inflationAdj.parmNotes(_inflationAdjJournal.Notes);
        inflationAdj.parmInflationAdjJournal(_inflationAdjJournal);

        return inflationAdj;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for execution the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>