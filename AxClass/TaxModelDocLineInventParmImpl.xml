<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxModelDocLineInventParmImpl</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The tax model class for <c>inventTransferParmLine</c>.
/// </summary>
[TaxModelDocumentLineAttribute(tableStr(InventTransferParmLine))]
public class TaxModelDocLineInventParmImpl extends TaxModelDocLineInventTransImpl
{
    InventTransferParmLine      inventTransferParmLine;
    InventTransferParmTable     inventTransferParmTable;
    InventTransferUpdateType    inventTransferUpdateType;
    TransTaxInformation         fromTransTaxInformation;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDocumentLineMainTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TableId</c> of the document line main table.
    /// </summary>
    /// <returns>
    /// The <c>TableId</c>
    /// </returns>
    public TableId getDocumentLineMainTableId()
    {
        return inventTransferParmLine.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentLineMainTableRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> of the document line main table.
    /// </summary>
    /// <returns>
    /// The <c>RecId</c> of the document line main table.
    /// </returns>
    public RecId getDocumentLineMainTableRecId()
    {
        return inventTransferParmLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventTransferUpdateType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invent transfer update type.
    /// </summary>
    /// <returns>
    /// The instance of the <c>InventTransferUpdateType</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventTransferUpdateType getInventTransferUpdateType()
    {
        return inventTransferUpdateType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the quantity from the transaction line.
    /// </summary>
    /// <returns>
    ///    The quantity.
    /// </returns>
    /// <remarks>
    ///    If the transaction does not support quantities, 0 may be passed as the quantity. This will be used
    ///    to calculate taxes by unit.
    /// </remarks>
    public Qty getQuantity()
    {
        if (this.isShipment())
        {
            return inventTransferParmLine.QtyShipNow;
        }
        else
        {
            return inventTransferParmLine.QtyReceiveNow;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultTransTaxInformationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default transaction tax information type;
    /// </summary>
    /// <returns>The default transaction tax information type.</returns>
    protected TransTaxInformationType_IN getDefaultTransTaxInformationType()
    {
        TransTaxInformationType_IN type;

        if (inventTransferParmTable.UpdateType == InventTransferUpdateType::Shipment)
        {
            type = TransTaxInformationType_IN::InventTransferFrom;
        }
        else if (inventTransferParmTable.UpdateType == InventTransferUpdateType::Receive)
        {
            type = TransTaxInformationType_IN::InventTransferTo;
        }

        return type;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax direction.
    /// </summary>
    /// <returns>
    /// The tax direction
    /// </returns>
    public TaxDirection getTaxDirection()
    {
        if (this.isShipment())
        {
            return super();
        }
        else
        {
            return TaxDirection::IncomingTax;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxLocationRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax location <c>RefRecId</c> on the transaction.
    /// </summary>
    /// <returns>
    /// The tax location of the transaction.
    /// </returns>
    /// <remarks>
    /// The method may be required to be overridden by different type of transaction.
    /// </remarks>
    public RefRecId getTaxLocationRefRecId()
    {
        if (this.isShipment())
        {
            return super();
        }
        else
        {
            return inventTransferTable.toLocation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction posting date
    /// </summary>
    /// <returns>
    /// The transaction posting date
    /// </returns>
    public TransDate getTransDate()
    {
        return inventTransferParmTable.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the domain object.
    /// The method should only be called by the <c>TaxModelDocLineFactoryable</c> classes.
    /// </summary>
    /// <param name="_documentLineMap">
    /// The document line buffer.
    /// </param>
    public void init(SalesPurchJournalLine _documentLineMap)
    {
        inventTransferParmLine = _documentLineMap;
        inventTransferParmTable = inventTransferParmLine.inventTransferParmTable();
        super(inventTransferParmLine.inventTransferLine());
        inventTransferUpdateType = inventTransferParmLine.inventTransferParmTable().UpdateType;

        fromTransTaxInformation =  TransTaxInformationHelper::newHelper().findTransTaxInformationByRecord(
            inventTransferLine,
            TransTaxInformationType_IN::InventTransferFrom);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReceive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the invent transfer update type if the invent should be receive.
    /// </summary>
    /// <returns>
    /// Returns true if the invent should be receive.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isReceive()
    {
        return inventTransferUpdateType == InventTransferUpdateType::Receive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the invent transfer update type is shipment.
    /// </summary>
    /// <returns>
    /// Returns true if the invent transfer update type is shipment.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isShipment()
    {
        return inventTransferUpdateType == InventTransferUpdateType::Shipment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPostTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if tax transaction should be posted or not.
    /// </summary>
    /// <returns>
    /// True if the document line should post tax transaction; otherwise, false.
    /// </returns>
    public NoYes shouldPostTaxTrans()
    {
        boolean postFinancial;
        ItemId itemId = this.getItemId();
        postFinancial = InventTable::find(itemId).modelGroup().PostOnhandFinancial;

        if (inventTransferUpdateType == InventTransferUpdateType::PickingList || !postFinancial)
        {
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeliveryDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction delivery date
    /// </summary>
    /// <returns>
    /// The transaction delivery date
    /// </returns>
    public date getDeliveryDate()
    {
        date    deliveryDate;

        if (inventTransferParmTable.UpdateType == InventTransferUpdateType::Shipment)
        {
            deliveryDate = inventTransferParmLine.inventTransferLine().ShipDate;
        }
        else if (inventTransferParmTable.UpdateType == InventTransferUpdateType::Receive)
        {
            deliveryDate = inventTransferParmLine.inventTransferLine().ReceiveDate;
        }

        return deliveryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the line amount of the document line.
    /// </summary>
    /// <returns>
    /// The line amount.
    /// </returns>
    public LineAmount getLineAmount()
    {
        LineAmount  lineAmount;

        if (inventTransferParmTable.UpdateType == InventTransferUpdateType::Shipment)
        {
            lineAmount = inventTransferParmLine.inventTransferLine().UnitPrice * inventTransferParmLine.QtyShipNow;
        }
        else
        {
            lineAmount = inventTransferParmLine.inventTransferLine().UnitPrice * inventTransferParmLine.QtyReceiveNow;
        }

        return lineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyLogisticsPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the party <c>LogisticsPostalAddress</c> of this transaction document line.
    /// </summary>
    /// <returns>
    /// The tax <c>LogisticsPostalAddress</c>
    /// </returns>
    public LogisticsPostalAddress getPartyLogisticsPostalAddress()
    {
        LogisticsPostalAddress logisticsPostalAddress;

        if (this.isShipment())
        {
            logisticsPostalAddress = LogisticsPostalAddress::findByLocation(inventTransferTable.toLocation());
        }
        else
        {
            logisticsPostalAddress = LogisticsPostalAddress::findByLocation(inventTransferTable.fromLocation());
        }

        return logisticsPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction invoice date
    /// </summary>
    /// <returns>
    /// The transaction invoice date
    /// </returns>
    public InvoiceDate getDocumentInvoiceDate()
    {
        return inventTransferParmTable.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction document date
    /// </summary>
    /// <returns>
    /// The transaction document date
    /// </returns>
    public DocumentDate getDocumentDate()
    {
        return inventTransferParmTable.TransDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>