<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdStandardVarianceList_Process</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Produces a list of variances for co-products
/// </summary>
class ProdStandardVarianceList_Process extends ProdStandardVarianceList
{
    PmfProdCoBy prodCoBy;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcProdStandardVariance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run a calculation on the standard variance object.
    /// </summary>
    /// <param name="_prodStandardVariance">A the standard variance object.</param>
    /// <returns>true if the calculation was good; otherwise, false.</returns>
    protected boolean calcProdStandardVariance(ProdStandardVariance_Prod _prodStandardVariance)
    {
        return _prodStandardVariance.calc(prodCoBy.ProdId,
                                        ProdTransRefType::Production,
                                        prodCoBy.prodTable().CollectRefLevel,
                                        prodCoBy.prodTable().CollectRefProdId,
                                        prodCoBy.RealDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructProdStandardVariance</Name>
				<Source><![CDATA[
/// <summary>
    /// Creates an instance of the <c>ProdStandardVariance_Prod</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>ProdStandardVariance_Prod</c> class.
    /// </returns>
    protected ProdStandardVariance_Prod constructProdStandardVariance()
    {
        if (!prodCoBy)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        return ProdStandardVariance_PmfCoBy::newFromProdCoBy(prodCoBy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the lot Id of the transaction.
    /// </summary>
    /// <returns>
    /// The lot Id of the transaction.
    /// </returns>
    protected InventTransId inventTransId()
    {
        return prodCoBy.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// object is created
    /// </summary>
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPmfProdCoBy</Name>
				<Source><![CDATA[
        public PmfProdCoBy parmPmfProdCoBy(PmfProdCoBy _prodCoBy = prodCoBy)
    {
        prodCoBy = _prodCoBy;
        return prodCoBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns an instance of the class
    /// </summary>
    /// <returns>
    /// returns instance
    /// </returns>
    public static ProdStandardVarianceList construct()
    {
        return new ProdStandardVarianceList_Process();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>