<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionAuditableExcelFilterBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailTransactionAuditableExcelFilterBuilder</c> builds OData filters used by Edit/Audit feature.
/// </summary>
internal static class RetailTransactionAuditableExcelFilterBuilder
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>filterByStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a filter by Retail Statement.
    /// </summary>
    /// <param name = "_statementTable">The statement record.</param>
    /// <param name = "_entityName">The name of the entity.</param>
    /// <param name = "_storeFieldName">The store number field name on the entity.</param>
    /// <param name = "_statementFieldName">The statement id field name on the entity.</param>
    /// <returns>An OData filter.</returns>
    internal static Microsoft.Dynamics.Platform.Integration.Office.FilterCollectionNode filterByStatement(RetailStatementTable _statementTable, TableName _entityName, FieldName _storeFieldName, FieldName _statementFieldName)
    {        
        return RetailTransactionAuditableExcelFilterBuilder::filterByStoreIdAndStatementId(_statementTable.storeId, _statementTable.statementId, _entityName, _storeFieldName, _statementFieldName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterByStoreIdAndStatementId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a filter by Store Id and Statement Id.
    /// </summary>
    /// <param name = "_storeId">The store id.</param>
    /// <param name = "_statementId">The statement id.</param>
    /// <param name = "_entityName">The name of the entity.</param>
    /// <param name = "_storeFieldName">The store number field name on the entity.</param>
    /// <param name = "_statementFieldName">The statement id field name on the entity.</param>
    /// <returns>An OData filter.</returns>
    internal static Microsoft.Dynamics.Platform.Integration.Office.FilterCollectionNode filterByStoreIdAndStatementId(RetailStoreId _storeId, RetailStatementId _statementId, TableName _entityName, FieldName _storeFieldName, FieldName _statementFieldName)
    {
        ExportToExcelFilterTreeBuilder filterBuilder = new ExportToExcelFilterTreeBuilder(_entityName);

        Microsoft.Dynamics.Platform.Integration.Office.FilterCollectionNode collectionNode = new Microsoft.Dynamics.Platform.Integration.Office.FilterCollectionNode();
        collectionNode.Operator = Microsoft.Dynamics.Platform.Integration.Office.FilterOperators::And;

        var collection = collectionNode.Collection;
        
        collection.Add(filterBuilder.companyFilter());
        collection.Add(filterBuilder.areEqual(_storeFieldName, _storeId));
        collection.Add(filterBuilder.areEqual(_statementFieldName, _statementId));
        
        return collectionNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterByStatementAndType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a filter by statement and id and transaction type.
    /// </summary>
    /// <param name = "_statementTable">The statement record.</param>
    /// <param name = "_entityName">The name of the entity.</param>
    /// <param name = "_storeFieldName">The store number field name on the entity.</param>
    /// <param name = "_statementFieldName">The statement id field name on the entity.</param>
    /// <param name = "_typeFieldName">The transaction type field name on the entity.</param>
    /// <param name = "_types">The list of types to be filtered.</param>
    /// <returns>An OData filter.</returns>
    internal static Microsoft.Dynamics.Platform.Integration.Office.FilterCollectionNode filterByStatementAndType(RetailStatementTable _statementTable, TableName _entityName, FieldName _storeFieldName, FieldName _statementFieldName, FieldName _typeFieldName, container _types)
    {
        Microsoft.Dynamics.Platform.Integration.Office.FilterCollectionNode collectionNode = new Microsoft.Dynamics.Platform.Integration.Office.FilterCollectionNode();
        collectionNode.Operator = Microsoft.Dynamics.Platform.Integration.Office.FilterOperators::And;
        
        var collection = collectionNode.Collection;

        var statementFilter = RetailTransactionAuditableExcelFilterBuilder::filterByStoreIdAndStatementId(_statementTable.storeId, _statementTable.statementId, _entityName, _storeFieldName, _statementFieldName);
        collection.Add(statementFilter);

        var typeFilter = RetailTransactionAuditableExcelFilterBuilder::buildTypeFilter(_entityName, _typeFieldName, _types);
        collection.Add(typeFilter);

        return collectionNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterUnmarkedAndFailedTransactionsByStore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a filter by statement and id and transaction type.
    /// </summary>
    /// <param name = "_storeTable">The store record.</param>
    /// <param name = "_entityName">The name of the entity.</param>
    /// <param name = "_storeFieldName">The store number field name on the entity.</param>
    /// <param name = "_statementFieldName">The statement id field name on the entity.</param>
    /// <param name = "_validationStatusFieldName">The transaction validation status field name on the entity.</param>
    /// <param name = "_typeFieldName">The transaction type field name on the entity.</param>
    /// <param name = "_types">The list of types to be filtered.</param>
    /// <returns>An OData filter.</returns>
    internal static Microsoft.Dynamics.Platform.Integration.Office.FilterCollectionNode filterUnmarkedAndFailedTransactionsByStore(RetailStoreTable _storeTable, TableName _entityName, FieldName _storeFieldName, FieldName _statementFieldName, FieldName _validationStatusFieldName, FieldName _typeFieldName, container _types)
    {
        const str EmptyStatementId = '';

        ExportToExcelFilterTreeBuilder filterBuilder = new ExportToExcelFilterTreeBuilder(_entityName);

        Microsoft.Dynamics.Platform.Integration.Office.FilterCollectionNode collectionNode = new Microsoft.Dynamics.Platform.Integration.Office.FilterCollectionNode();
        collectionNode.Operator = Microsoft.Dynamics.Platform.Integration.Office.FilterOperators::And;
        
        var collection = collectionNode.Collection;

        var unmarkedTransactionByStoreFilter = RetailTransactionAuditableExcelFilterBuilder::filterByStoreIdAndStatementId(_storeTable.StoreNumber, EmptyStatementId, _entityName, _storeFieldName, _statementFieldName);
        collection.Add(unmarkedTransactionByStoreFilter);

        var typeFilter = RetailTransactionAuditableExcelFilterBuilder::buildTypeFilter(_entityName, _typeFieldName, _types);
        collection.Add(typeFilter);

        collection.Add(filterBuilder.areEqual(_validationStatusFieldName, RetailTransactionValidationStatus::Failed));

        return collectionNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterByTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a filter by transaction.
    /// </summary>
    /// <param name = "_transactionTable">The transaction record.</param>
    /// <param name = "_entityName">The name of the entity.</param>
    /// <param name = "_operatingUnitFieldName">The operating unit field name on the entity.</param>
    /// <param name = "_storeFieldName">The store number field name on the entity.</param>
    /// <param name = "_registerNumberFieldName">The register number field name on the entity.</param>
    /// <param name = "_transactionIdFieldName">The transaction id field name on the entity.</param>
    /// <returns>An OData filter.</returns>
    internal static Microsoft.Dynamics.Platform.Integration.Office.FilterCollectionNode filterByTransaction(RetailTransactionTable _transactionTable,
        TableName _entityName, 
        FieldName _operatingUnitFieldName,
        FieldName _storeFieldName,
        FieldName _registerNumberFieldName,
        FieldName _transactionIdFieldName)
    {
        ExportToExcelFilterTreeBuilder filterBuilder = new ExportToExcelFilterTreeBuilder(_entityName);

        Microsoft.Dynamics.Platform.Integration.Office.FilterCollectionNode collectionNode = new Microsoft.Dynamics.Platform.Integration.Office.FilterCollectionNode();
        collectionNode.Operator = Microsoft.Dynamics.Platform.Integration.Office.FilterOperators::And;

        var collection = collectionNode.Collection;
        
        RetailChannelTable channelTable = RetailChannelTable::findByRecId(_transactionTable.Channel);
        OMOperatingUnit operatingUnit = OMOperatingUnit::find(channelTable.OMOperatingUnitID, OMOperatingUnitType::RetailChannel);

        collection.Add(filterBuilder.companyFilter());
        collection.Add(filterBuilder.areEqual(_operatingUnitFieldName, operatingUnit.OMOperatingUnitNumber));
        collection.Add(filterBuilder.areEqual(_storeFieldName, _transactionTable.store));
        collection.Add(filterBuilder.areEqual(_registerNumberFieldName, _transactionTable.terminal));
        collection.Add(filterBuilder.areEqual(_transactionIdFieldName, _transactionTable.transactionId));
        
        return collectionNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTypeFilter</Name>
				<Source><![CDATA[
    private static Microsoft.Dynamics.Platform.Integration.Office.FilterCollectionNode buildTypeFilter(TableName _entityName, FieldName _typeFieldName, container _types)
    {
        ExportToExcelFilterTreeBuilder headerFilterBuilder = new ExportToExcelFilterTreeBuilder(_entityName);

        Microsoft.Dynamics.Platform.Integration.Office.FilterCollectionNode collectionNode = new Microsoft.Dynamics.Platform.Integration.Office.FilterCollectionNode();
        collectionNode.Operator = Microsoft.Dynamics.Platform.Integration.Office.FilterOperators::Or;
        
        var collection = collectionNode.Collection;

        for (int i = 1; i <= conLen(_types); i++)
        {
            RetailTransactionType type = conPeek(_types, i);

            collection.Add(headerFilterBuilder.areEqual(_typeFieldName, type));
        }

        return collectionNode;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>