<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendGeneralTopPickingFinalizer</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class CustVendGeneralTopPickingFinalizer extends RunBaseBatch implements BatchRetryable
{
    private RecId parentId;
    private const int CurrentVersion = 1;
    private const str PolicyClass = classStr(CustVendGeneralTopPickingPolicyAttribute);
    private CustVendGeneralTopPickingLogger custVendGeneralTopPickingLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, parentId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packed)
    {
        int version = RunBase::getVersion(_packed);
        switch (version)
        {
            case CurrentVersion:
                [version, parentId] = _packed;
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal void new(RecId _parentId)
    {
        super();
        parentId = _parentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        custVendGeneralTopPickingLogger = CustVendGeneralTopPickingLogger::createLogger();
        using (var runActivityContext = custVendGeneralTopPickingLogger.activityContextWithCustomProperties(CustVendGeneralTopPickingInstrumentationConstants::CustVendGeneralTopPickingFinalizingPhase))
        {
            runActivityContext.addCustomProperty(
                CustVendGeneralTopPickingInstrumentationConstants::IsTTSLevelZero,
                CustVendGeneralTopPickingLogger::bool2str(appl.ttsLevel() == 0));

            CustVendGeneralTopPickingHeader custVendGeneralTopPickingHeader;
            select firstonly forupdate custVendGeneralTopPickingHeader
                where custVendGeneralTopPickingHeader.RecId == parentId;
            if (custVendGeneralTopPickingHeader.RecId)
            {
                custVendGeneralTopPickingLogger.logInformation(strFmt('Starting finalization for CustVendGeneralTopPickingHeader %1', int642Str(parentId)));
                this.setProcessingStatus(custVendGeneralTopPickingHeader);
                ttsbegin;
                custVendGeneralTopPickingHeader.update();
                ttscommit;

                boolean shouldCleanUp;
                str methodName;
                str jobName;
                [shouldCleanUp, methodName, jobName] = this.getBatchPolicyInfo(custVendGeneralTopPickingHeader.ClassId);

                this.handleResult(parentId, shouldCleanUp);
                custVendGeneralTopPickingLogger.logInformation(strFmt('Clean up invoked for CustVendGeneralTopPickingHeader %1 with flag %2', int642Str(parentId), CustVendGeneralTopPickingLogger::bool2str(shouldCleanUp)));

                this.handleCallback(custVendGeneralTopPickingHeader.ClassId, methodName, custVendGeneralTopPickingHeader.Payload);
                custVendGeneralTopPickingLogger.logInformation(strFmt('Callback invoked for CustVendGeneralTopPickingHeader %1 with class name %2, method name %3', int642Str(parentId), classId2Name(custVendGeneralTopPickingHeader.ClassId), methodName));
            }
            else
            {
                custVendGeneralTopPickingLogger.logError(strFmt('Can not find record CustVendGeneralTopPickingHeader %1', int642Str(parentId)));
            }
            if (this.hasErrorInSubItems(custVendGeneralTopPickingHeader.RecId))
            {
                this.sendNotification(custVendGeneralTopPickingHeader);
                throw Error("@CashManagement:SubTasksFaildedInTopPickingBachJob");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProcessingStatus</Name>
				<Source><![CDATA[
    private void setProcessingStatus(CustVendGeneralTopPickingHeader _custVendGeneralTopPickingHeader)
    {
        if (this.hasErrorInSubItems(_custVendGeneralTopPickingHeader.RecId))
        {
            _custVendGeneralTopPickingHeader.JobStatus = CustVendGeneralTopPickingJobStatus::FinishedWithErrors;
        }
        else
        {
            _custVendGeneralTopPickingHeader.JobStatus = CustVendGeneralTopPickingJobStatus::Finished;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasErrorInSubItems</Name>
				<Source><![CDATA[
    private boolean hasErrorInSubItems(RecId _parentId)
    {
        return CustVendGeneralTopPickingItems::hasError(_parentId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendNotification</Name>
				<Source><![CDATA[
    private void sendNotification(CustVendGeneralTopPickingHeader _custVendGeneralTopPickingHeader)
    {
        BatchJob batchJob;

        select firstonly Caption from batchJob
            where batchJob.RecId == _custVendGeneralTopPickingHeader.BatchHeader;

        SystemNotificationDataContract notificationDataContract = new SystemNotificationDataContract();
        Array actions = new Array(Types::Class);
        Array userList = new Array(Types::String);
        userList.value(1, curUserId());
        notificationDataContract.Message(strFmt("@CashManagement:BatchJobFailedMessage", batchJob.Caption));
        notificationDataContract.Title("@CashManagement:BatchJobFailed");
        notificationDataContract.Type(SystemNotificationType::Alert);
        notificationDataContract.State(SystemNotificationState::Active);
        notificationDataContract.Severity(SystemNotificationSeverity::Informational);
        notificationDataContract.Users(userList);
        notificationDataContract.RuleId(classStr(CustVendGeneralTopPickingFinalizer));
        utcdatetime expirationDateTime = DateTimeUtil::addDays(DateTimeUtil::getSystemDateTime(), 1);
        notificationDataContract.ExpirationDateTime(expirationDateTime);
        // Create the hyperlink to the form
        SystemNotificationActionDataContract actionDataContract = new SystemNotificationActionDataContract();
        actionDataContract.Message("@CashManagement:CheckDetails");
        actionDataContract.Type(SystemNotificationActionType::AxDisplayMenuFunction);
        SystemNotificationMenuFunctionDataContract notificationActionData = new SystemNotificationMenuFunctionDataContract();
        notificationActionData.MenuItemName(menuItemDisplayStr(CustVendGeneralTopPickingRecover));
        notificationActionData.Data(int642Str(_custVendGeneralTopPickingHeader.RecId));
        actionDataContract.Data(FormJsonSerializer::serializeClass(notificationActionData));
        actions.value(1, actionDataContract);
        notificationDataContract.Actions(actions);
        // Add to the Message center
        SystemNotificationsManager::AddSystemNotification(notificationDataContract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleCallback</Name>
				<Source><![CDATA[
    private void handleCallback(ClassId _classId, str _methodName, container _payload)
    {
        if (_methodName)
        {
            DictClass dictClass = new DictClass(_classId);
            dictClass.callStatic(_methodName, _payload);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleResult</Name>
				<Source><![CDATA[
    private void handleResult(RecId _parentId, boolean _shouldCleanUp)
    {
        if (_shouldCleanUp)
        {
            CustVendGeneralTopPickingItems custVendGeneralTopPickingItems;
            ttsbegin;
            delete_from custVendGeneralTopPickingItems
                where custVendGeneralTopPickingItems.CustVendGeneralTopPickingHeader == _parentId
                    && custVendGeneralTopPickingItems.ProcessingStatus != CustVendGeneralTopPickingProcessingStatus::FinishedWithError;
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBatchPolicyInfo</Name>
				<Source><![CDATA[
    private container getBatchPolicyInfo(ClassId _classId)
    {
        DictClass dictClass = new DictClass(_classId);
        Object attributeAsObject = dictClass.getAttribute(PolicyClass);
        if (attributeAsObject != null)
        {
            CustVendGeneralTopPickingPolicyAttribute custVendGeneralTopPickingPolicyAttribute = attributeAsObject as CustVendGeneralTopPickingPolicyAttribute;
            return [custVendGeneralTopPickingPolicyAttribute.parmCleanUp(), custVendGeneralTopPickingPolicyAttribute.parmCallbackMethodName(), custVendGeneralTopPickingPolicyAttribute.parmJobName()];
        }
        return [true, '', ''];
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@CashManagement:TopPickingFinalizer";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>