<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendDocumentUtil</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendDocumentUtil</c> class contains utility methods for vendor documents.
/// </summary>
public final class VendDocumentUtil
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildFieldMapping</Name>
				<Source><![CDATA[
    private static Map buildFieldMapping(tableId _mapid, tableId _tableId)
    {
        SysDictTable mapTable = new SysDictTable(_mapid);
        Map idTranslation = new Map(Types::Integer, Types::Integer); // ID in map, ID in table

        int mapCount = mapTable.mapCnt();
        for (int tableMapNumber = 1; tableMapNumber <= mapCount; tableMapNumber++)
        {
            DictTableMap dictMap = mapTable.mapObject(tableMapNumber);
            if (dictMap.table() == _tableId)
            {
                int fieldCount = dictMap.fieldCnt();
                for (int fieldMapNumber = 1; fieldMapNumber <= fieldCount; fieldMapNumber++)
                {
                    idTranslation.insert(dictMap.fieldCnt2FieldFrom(fieldMapNumber),
                                         dictMap.fieldCnt2FieldTo(fieldMapNumber));
                }
            }
        }

        return idTranslation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a structure (map) that is used to translate field IDs between a map and a mapped table.
    /// </summary>
    /// <param name="_mapid">
    /// The map ID.
    /// </param>
    /// <param name="_tableId">
    /// The table ID.
    /// </param>
    /// <returns>
    /// The translation map.
    /// </returns>
    public static Map fieldMapping(tableId _mapid, tableId _tableId)
    {
        SysGlobalCache cache = classfactory.globalCache();
        str mapName = Global::tableId2Name(_mapid);
        Map map = cache.get(mapName, _tableId, null);

        if (map == null)
        {
            map = VendDocumentUtil::buildFieldMapping(_mapid, _tableId);
            cache.set(mapName, _tableId, map);
        }

        return map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the field ID in a table from the field ID in a <c>VendDocument</c> map that maps to the
    /// table.
    /// </summary>
    /// <param name="_fieldIdInMap">
    /// The field ID in the map.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the table that is mapped to the map.
    /// </param>
    /// <returns>
    /// The field ID in the specified table.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The specified parameters are not valid.
    /// </exception>
    public static fieldId fieldNum(fieldId _fieldIdInMap, tableId _tableId)
    {
        Map idMapping;
        tableId mapId;
        fieldId fieldIdInTable;
        SysGlobalObjectCache globalObjectCache = new SysGlobalObjectCache();
        container result = globalObjectCache.find(funcname(), [_fieldIdInMap, _tableId]);

        if (result == connull())
        {
            switch (_tableId)
            {
                case tablenum(VendInvoiceInfoTable), tablenum(PurchParmTable):
                    mapId = tablenum(VendDocumentTableMap);
                    break;

                case tablenum(VendInvoiceInfoSubTable), tablenum(PurchParmSubTable):
                    mapId = tablenum(VendDocumentSubTableMap);
                    break;

                case tablenum(VendInvoiceInfoLine), tablenum(PurchParmLine):
                    mapId = tablenum(VendDocumentLineMap);
                    break;

                case tablenum(VendInvoiceInfoLine_Asset), tablenum(PurchParmLine_Asset):
                    mapId = tablenum(VendDocumentLineAssetMap);
                    break;

                case tablenum(VendInvoiceInfoLine_Project), tablenum(PurchParmLine_Project):
                    mapId = tablenum(VendDocumentLineProjectMap);
                    break;

                default:
                    throw error(strfmt("@SYS19306", funcname()));
            }

            idMapping = VendDocumentUtil::fieldMapping(mapId, _tableId);
            fieldIdInTable = idMapping.lookup(_fieldIdInMap);
            result = [fieldIdInTable];
            globalObjectCache.insert(funcname(), [_fieldIdInMap, _tableId], result);
        }

        return conpeek(result, 1);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>