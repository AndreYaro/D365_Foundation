<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqItemTableWizard</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ReqItemTableWizard extends SysWizard
{
    ItemId          itemId;
    Set             setInventDim;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    formName formName()
    {
        return formstr(ReqItemTableWizard);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        InventTable inventTable;

        if (! itemId)
        {
            setprefix("@SYS56253");
            return checkFailed(strfmt("@SYS27080",this.formName()));
        }

        inventTable = InventTable::find(itemId);

        if (! inventTable)
        {
            setprefix("@SYS56253");
            return checkFailed(strfmt("@SYS5307",itemId));
        }

        if (! EcoResStorageDimensionGroup::find(inventTable.storageDimensionGroup()).RecId)
        {
            setprefix("@SYS56253");
            return checkFailed(strfmt("@SYS315358", itemId));
        }

        if (inventTable.ReqGroupId)
        {
            if (! ReqGroup::exist(inventTable.ReqGroupId))
            {
                setprefix("@SYS56253");
                setprefix(strfmt("@SYS14077",itemId));
                return checkFailed(strfmt(ReqGroup::txtNotExist(),inventTable.ReqGroupId));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    void next()
    {
        formRun.skipPages();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run(Args _args=null)
    {
        Set setItemId;

        formRun.updateReqItemTable();

        if (_args.caller().name() == formstr(ReqItemTable))
        {
           _args.caller().doresearch();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCovDimId</Name>
				<Source><![CDATA[
    public static container calcCovDimId(
        ItemId      _itemId,
        container   _mapSelectedDimPacked)
    {
        Map                 mapSelectedDim      = new Map(typeName2Type(extendedtypestr(tableId)),Types::Class);
        MapEnumerator       meSelectedDim;

        Set                 setSelectedValue    = new Set(Types::String);
        SetEnumerator       seSelectedValue;

        Set                 setDimLoop          = new Set(Types::Record);

        Set                 setDimResult        = new Set(Types::Record);
        SetEnumerator       seDimResult;

        Set                 setCovDimId         = new Set(typeName2Type(extendedtypestr(InventDimId)));

        InventDim           inventDimResult;
        fieldId             lastFieldId;

        ReqItemTable        reqItemTable;

        InventDim           inventDimBlank;

        boolean             isProductMaster;

        void buildInventDim(
            fieldId dimField,
            str     value)
        {
            InventDim       inventDim;
            InventDim       inventDimNew;
            SetEnumerator   se;

            if (lastFieldId && lastFieldId != dimField)
            {
                setDimLoop = new Set(Types::Record);
                setDimLoop = Set::create(setDimResult.pack());
                setDimResult = new Set(Types::Record);
            }

            lastFieldId = dimField;

            if (setDimLoop.elements())
            {
                se = setDimLoop.getEnumerator();

                while (se.moveNext())
                {
                    inventDim = se.current();
                    inventDimNew = inventDim.data();
                    inventDimNew.(dimField)= value;

                    setDimResult.add(inventDimNew);
                }
            }
            else
            {
                inventDimNew.clear();
                inventDimNew.(dimField)= value;

                setDimResult.add(inventDimNew);
            }
        }

        mapSelectedDim = Map::create(_mapSelectedDimPacked);
        meSelectedDim = mapSelectedDim.getEnumerator();

        while (meSelectedDim.moveNext())  // loop dimfields
        {
            setSelectedValue = meSelectedDim.currentValue();
            seSelectedValue = setSelectedValue.getEnumerator();
            while (seSelectedValue.moveNext())
            {
                buildInventDim(meSelectedDim.current(),seSelectedValue.current());
            }
        }

        if (setDimResult.elements() == 0)
        {
            setDimResult.add(inventDimBlank);
        }

        seDimResult = setDimResult.getEnumerator();

        if (setDimResult.elements() > 0)
        {
            isProductMaster = EcoResProduct::find(InventTable::itemProduct(_itemId)).isProductMaster();
        }

        while (seDimResult.moveNext())
        {
            inventDimResult = seDimResult.current();
            if (! isProductMaster || InventDimCombination::existByInventDim(_itemId, inventDimResult))
            {
                inventDimResult = InventDim::findOrCreate(inventDimResult);
                if (! ReqItemTable::find(_itemId,inventDimResult.InventDimId))
                {
                    reqItemTable.ItemId         = _itemId;
                    reqItemTable.CovInventDimId = inventDimResult.InventDimId;
                    if (reqItemTable.checkCovInventDim(inventDimResult, false))
                    {
                        setCovDimId.add(inventDimResult.InventDimId);
                    }
                }
            }
        }

        return setCovDimId.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInvalidReqItemTable</Name>
				<Source><![CDATA[
    public static container findInvalidReqItemTable(ItemId _itemId)
    {
        ReqItemTable                    reqItemTable;
        InventDim                       inventDim;
        Set                             setInvalidInventDimId;   // contains InventDimId
        InventDimGroupSetup             inventDimGroupSetup;

        if (! _itemId)
        {
            return connull();
        }

        setInvalidInventDimId   = new Set(Types::String);
        inventDimGroupSetup = InventDimGroupSetup::newItemId(_itemId);

        reqItemTable.recordLevelSecurity(true);
        while select reqItemTable where reqItemTable.ItemId == _itemId
        {
            inventDim = InventDim::find(reqItemTable.CovInventDimId);

            if (! reqItemTable.checkCovInventDim(inventDim, false) ||
                (reqItemTable.MinInventOnhand && ! reqItemTable.allCovDimSpecified(inventDimGroupSetup))
               )
            {
                setInvalidInventDimId.add(reqItemTable.CovInventDimId);
            }
        }

        return setInvalidInventDimId.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        ReqItemTableWizard wizard;

        if (!args)
        {
            throw error(strfmt("@SYS22678", wizard.formName()));
        }

        wizard = ReqItemTableWizard::newArgs(args);

        if (wizard.init())
        {
            if (wizard.prompt())
            {
                wizard.run(args);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newArgs</Name>
				<Source><![CDATA[
    static ReqItemTableWizard newArgs(Args _args)
    {
        ReqItemTableWizard wizard = new ReqItemTableWizard();

        wizard.parmItemId(ReqCalc::argsItemId(_args));

        return wizard;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>