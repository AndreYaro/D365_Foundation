<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendDisputeHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustVendDisputeHelper</c> class manages dispute information for customers and vendors.
/// </summary>
class CustVendDisputeHelper
{
    // Class properties
    ReasonCode reasonCode;
    ReasonComment reasonComment;
    CustVendDisputeStatus status;
    CompanyId companyId;

    CustDispute custVendDispute;

    ReasonTableRef reasonTableRef;

    AmountCur transactionBalance;
    AmountCur lastPayment;
    AmountCur amountCur;

    TransDate followUpDate;

    CurrencyCode transactionCurrency;

    smmActivityUserMemo note;

    boolean isAutomatic;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteDispute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the specified dispute if it already exists.
    /// </summary>
    /// <remarks>
    ///    Disputes are deleted when the <c>Status</c> parameter is set to None and the
    ///    <c>CustVendDisputeHelper.Update</c> method is called. If the dispute does not already exist,
    ///    nothing will be done.
    /// </remarks>
    protected void deleteDispute()
    {
        if (custVendDispute != null)
        {
            this.createCustDisputeHistoryRecordForDeletedCustDispute();

            ReasonTableRef::deleteByReference(custVendDispute.ReasonTableRef);

            custVendDispute.selectForUpdate(true);
            custVendDispute.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustDisputeHistoryRecordForDeletedCustDispute</Name>
				<Source><![CDATA[
    private void createCustDisputeHistoryRecordForDeletedCustDispute()
    {
        CustDisputeHistory history;
        history.CustTrans = custVendDispute.CustTrans;
        history.StatusChangedDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        history.Status = this.parmStatus();
        history.AmountCur = this.parmAmountCur();
        history.FollowUpDate = this.parmFollowUpDate();

        ReasonTableRef localRef;
        localRef.Reason = this.parmReasonCode();
        localRef.ReasonComment = this.parmReasonComment();
        localRef.insert();

        history.ReasonTableRef = localRef.RecId;
        history.TransactionBalance = this.getTransactionBalance();
        history.TransactionCurrency = this.getTransactionCurrency();
        history.Note = this.parmNote();

        history.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>CustVendDisputeHelper</c> class.
    /// </summary>
    /// <param name="_companyId">
    ///    The company ID of the disputed transaction.
    /// </param>
    /// <param name="_disputedTransactionTableNum">
    ///    The table ID of the disputed transaction.
    /// </param>
    /// <param name="_disputedTransactionRecId">
    ///    The record ID of the disputed transaction.
    /// </param>
    /// <remarks>
    ///    This is for internal use only.
    /// </remarks>
    protected void new(CompanyId _companyId, tableId _disputedTransactionTableNum, RecId _disputedTransactionRecId)
    {
        companyId = _companyId;

        changecompany(companyId)
        {
            // Cross-company disputes are not allowable, but it is possible that the status
            // of a dispute in another company needs to be retrieved or changed.

            switch (_disputedTransactionTableNum)
            {
                case tablenum(CustTransOpen):
                    _disputedTransactionRecId = (select custTransOpen where custTransOpen.RecId == _disputedTransactionRecId).RefRecId;
                    // fallthrough
                case tablenum(CustTrans):

                    custVendDispute = CustDispute::findByCustTrans(_disputedTransactionRecId);

                    if (custVendDispute)
                    {
                        status = custVendDispute.Status;
                        reasonTableRef = ReasonTableRef::find(custVendDispute.ReasonTableRef);
                        Debug::assert(reasonTableRef != null);
                        reasonCode = reasonTableRef.Reason;
                        reasonComment = reasonTableRef.ReasonComment;
                        transactionBalance = custVendDispute.TransactionBalance;
                        transactionCurrency = custVendDispute.TransactionCurrency;
                        followUpDate = custVendDispute.FollowUpDate;
                        amountCur = custVendDispute.AmountCur;
                        note = custVendDispute.Note;
                    }
                    else
                    {
                        custVendDispute.CustTrans = _disputedTransactionRecId;
                        status = CustVendDisputeStatus::None;

                        CustTrans custTransLocal = CustTrans::find(_disputedTransactionRecId);
                        transactionBalance = custTransLocal.remainAmountCur();
                        transactionCurrency = custTransLocal.CurrencyCode;
                    }

                    break;

                // Other types of disputes will eventually go here

                default:
                    throw Exception::Error;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValuesByContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the vales from <c>CustCollectionsSetTransactionStatusContext</c> passed in
    /// </summary>
    /// <param name = "_context"><c>CustCollectionsSetTransactionStatusContext</c> to set values from</param>
    public void setValuesByContext(CustCollectionsSetTransactionStatusContext _context)
    {
        this.parmStatus(_context.parmStatus());
        this.parmReasonCode(_context.parmReasonCode());
        this.parmReasonComment(_context.parmReasonComment());
        this.parmAmountCur(_context.parmAmountCur());
        this.parmFollowUpDate(_context.parmFollowUpDate());
        this.parmNote(_context.parmNote());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the notes on the dispute status
    /// </summary>
    /// <param name = "_note">The note on the status</param>
    /// <returns>The note on the status</returns>
    public smmActivityUserMemo parmNote(smmActivityUserMemo _note = note)
    {
        note = _note;
        return note;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>ReasonCode</c> parameter.
    /// </summary>
    /// <param name="_reasonCode">
    ///    The value to set.
    /// </param>
    /// <returns>
    ///    The value of the <c>ReasonCode</c> parameter.
    /// </returns>
    /// <remarks>
    ///    The value of the <c>ReasonCode</c> parameter is maintained in the <c>ReasonTableRef</c> record that
    ///    relates to this dispute.
    /// </remarks>
    public ReasonCode parmReasonCode(ReasonCode _reasonCode = reasonCode)
    {
        reasonCode = _reasonCode;
        return reasonCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonComment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>ReasonComment</c> parameter.
    /// </summary>
    /// <param name="_reasonComment">
    ///    The value to set.
    /// </param>
    /// <returns>
    ///    The value of the <c>ReasonComment</c> parameter.
    /// </returns>
    /// <remarks>
    ///    The value of the <c>ReasonComment</c> parameter is maintained in the <c>ReasonTableRef</c> record
    ///    that relates to this dispute.
    /// </remarks>
    public ReasonCode parmReasonComment(ReasonComment _reasonComment = reasonComment)
    {
        reasonComment = _reasonComment;
        return reasonComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>Status</c> parameter.
    /// </summary>
    /// <param name="_status">
    ///    The value to set.
    /// </param>
    /// <returns>
    ///    The value of the <c>Status</c> parameter.
    /// </returns>
    /// <remarks>
    ///    A status of None implies that no <c>CustVendDispute</c> record exists.The default value for this
    ///    parameter is a <c>CustVendDisputeStatus</c> enumeration value of None for disputes that do not
    ///    already exist. If the dispute does exist, the parameter will be set to the value stored in the
    ///    database.
    /// </remarks>
    public CustVendDisputeStatus parmStatus(CustVendDisputeStatus _status = status)
    {
        status = _status;
        return status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transaction balance
    /// </summary>
    /// <returns>The transaction balance</returns>
    public AmountCur getTransactionBalance()
    {
        return transactionBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the amount on the dispute record
    /// </summary>
    /// <param name = "_amountCur">The amount to be saved on the dispute record</param>
    /// <returns>The amount on dispute record</returns>
    public AmountCur parmAmountCur(AmountCur _amountCur = amountCur)
    {
        amountCur = _amountCur;
        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLastPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the last payment from automation
    /// </summary>
    /// <param name = "_lastPayment">Amount of the payment</param>
    /// <returns>The amount equal to the last payment</returns>
    public AmountCur parmLastPayment(AmountCur _lastPayment = lastPayment)
    {
        lastPayment = _lastPayment;
        return lastPayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFollowUpDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the follow up date on the dispute record
    /// </summary>
    /// <param name = "_followUpDate">The follow up date on the dispute record</param>
    /// <returns>The follow up date</returns>
    public TransDate parmFollowUpDate(TransDate _followUpDate = followUpDate)
    {
        followUpDate = _followUpDate;
        return followUpDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsAutomaticUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the automatic status if the update was from the system
    /// </summary>
    /// <param name = "_isAutomatic">The status to be saved if update is from system</param>
    /// <returns>isAutomaticUpdate</returns>
    public boolean parmIsAutomaticUpdate(boolean _isAutomatic = isAutomatic)
    {
        isAutomatic = _isAutomatic;
        return isAutomatic;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transaction currency
    /// </summary>
    /// <returns>Transaction currency</returns>
    public CurrencyCode getTransactionCurrency()
    {
        return transactionCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the dispute status and reason information.
    /// </summary>
    /// <remarks>
    ///    A new dispute will be created if one does not already exist. If the status is changed to None, the
    ///    dispute will be removed.
    /// </remarks>
    public void update()
    {
        #OCCRetryCount

        try
        {
            changecompany(companyId)
            {
                // Cross-company disputes are not allowable, but it is possible that the status
                // of a dispute in another company needs to be changed.

                ttsbegin;

                CustTrans custTrans = CustTrans::find(custVendDispute.CustTrans);

                transactionBalance = custTrans.remainAmountCur();
                transactionCurrency = custTrans.CurrencyCode;

                if (this.canDeleteDispute())
                {
                    // When changing the status to None it implies the dispute should
                    // be deleted.

                    this.deleteDispute();
                }
                else
                {
                    this.updateDispute();
                }

                ttscommit;
            }
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDeleteDispute</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether dispute delete is allowed.
    /// </summary>
    /// <returns>
    ///     true if dispute can be deleted; otherwise, false.
    /// </returns>
    [Wrappable(true)]
    protected final boolean canDeleteDispute()
    {
        return status == CustVendDisputeStatus::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDisputeTableUpdateRequired</Name>
				<Source><![CDATA[
    private boolean isDisputeTableUpdateRequired()
    {
        return (custVendDispute == null ||
                custVendDispute.Status != status ||
                custVendDispute.ReasonTableRef == 0 ||
                custVendDispute.AmountCur != amountCur ||
                custVendDispute.FollowUpDate != followUpDate ||
                custVendDispute.TransactionBalance != transactionBalance ||
                custVendDispute.TransactionCurrency != transactionCurrency);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReasonTableUpdateRequired</Name>
				<Source><![CDATA[
    private boolean isReasonTableUpdateRequired()
    {
        return (reasonTableRef == null ||
                reasonTableRef.Reason != reasonCode ||
                reasonTableRef.ReasonComment != reasonComment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDispute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the dispute information.
    /// </summary>
    /// <remarks>
    ///    Dispute information will only be updated when it is necessary.
    /// </remarks>
    protected void updateDispute()
    {
        boolean reasonUpdated;

        if (this.isReasonTableUpdateRequired())
        {
            // Reason information will always be created, even if the reason code and comment are emtpy.
            // This was a design decision based on the following factors: (a) consistency, (b) easier
            // reporting since joins always return a valid record and (c) reason information will be
            // entered for the majority of disputes.

            reasonTableRef.selectForUpdate(true);
            reasonTableRef.Reason = reasonCode;
            reasonTableRef.ReasonComment = reasonComment;
            reasonTableRef.write();
            reasonUpdated = true;
        }

        Debug::assert(reasonTableRef.RecId != 0);

        if (this.isDisputeTableUpdateRequired() || reasonUpdated)
        {
            custVendDispute.selectForUpdate(true);
            custVendDispute.StatusChangedDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            custVendDispute.IsAutomaticUpdate = this.parmIsAutomaticUpdate();
            custVendDispute.ReasonTableRef = reasonTableRef.RecId;
            custVendDispute.Status = status;
            custVendDispute.AmountCur = amountCur;
            custVendDispute.LastPayment = lastPayment;
            custVendDispute.FollowUpDate = followUpDate;
            custVendDispute.TransactionBalance = transactionBalance;
            custVendDispute.TransactionCurrency = transactionCurrency;
            custVendDispute.Note = note;
            custVendDispute.write();

            CollectionStatusUpdatedBusinessEvent::newFromCustDispute(custVendDispute).send();
        }

        Debug::assert(custVendDispute.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>CustVendDisputeHelper</c> class.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID of the disputed transaction.
    /// </param>
    /// <param name="_disputedTransactionTableNum">
    /// The table ID of the disputed transaction.
    /// </param>
    /// <param name="_disputedTransactionRecId">
    /// The record ID of the disputed transaction.
    /// </param>
    /// <returns>
    /// An instance of the <c>CustVendDisputeHelper</c> class.
    /// </returns>
    /// <remarks>
    /// This method should be called even for transactions that are not currently disputed. Once done set
    /// the dispute properties and call the <see cref="M:CustVendDisputeHelper.Update" /> method.
    /// </remarks>
    public static CustVendDisputeHelper construct(CompanyId _companyId, tableId _disputedTransactionTableNum, RecId _disputedTransactionRecId)
    {
        // This method could eventually create the appropriate derivative, but it is not necessary at this point.
        // The factory pattern simply allows for that option going forward.

        return new CustVendDisputeHelper(_companyId, _disputedTransactionTableNum, _disputedTransactionRecId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>