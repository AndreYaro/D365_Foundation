<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventValueReportInit</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventValueReportInit</c> class initializes the data creation for the
///    <c>InventValueReport</c> report.
/// </summary>
/// <remarks>
///    This class is responsible for creating subtasks that can be executed in the enhanced batch
///    framework.The subtasks are either executed directly or by the enhanced batch framework.
/// </remarks>
class InventValueReportInit extends InventValueReportBase
{
    Query           reportQuery;
    List            taskList;
    UserConnection  userConnection;
    boolean         skipPrintLedgerValue;

    private const int DefaultBundleSize = 20000;
    private const int BundleTaskSize = 3;
    private boolean isInventValueReportStorageBundleFeatureEnabled = InventValueReportStorageBundleFeature::isEnabled();

    private CostManagementInstrumentationLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmUserConnection</Name>
				<Source><![CDATA[
    public UserConnection parmUserConnection(UserConnection _userConnection = userConnection)
    {
        userConnection = _userConnection;
        return userConnection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    final internal CostManagementInstrumentationLogger instrumentationLogger()
    {
        if (!logger)
        {
            logger = CostManagementInstrumentationLogger::createLogger(classStr(InventValueReportInit));
        }

        return logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipPrintLedgerValue</Name>
				<Source><![CDATA[
    public boolean parmSkipPrintLedgerValue(boolean _skipPrintLedgerValue = skipPrintLedgerValue)
    {
        skipPrintLedgerValue = _skipPrintLedgerValue;
        return skipPrintLedgerValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustFromAndToDateToDateInterval</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adjusts the <c>fromDate</c> and the <c>toDate</c> according to the <c>dateInterval</c>.
    /// </summary>
    protected void adjustFromAndToDateToDateInterval()
    {
        inventValueReportContract.adjustFromAndToDateToDateInterval();
    }

]]></Source>
			</Method>
			<Method>
				<Name>indirectCostNodeTypeList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a list of indirect cost <c>CostSheetNodeType</c>s.
    /// </summary>
    /// <param name = "_indirectNodeTypes">This param can be overridden with CoC to add additional indirect cost types.</param>
    /// <returns>A list of indirect cost <c>CostSheetNodeType</c>s</returns>
    protected List indirectCostNodeTypeList(List _indirectNodeTypes = new List(Types::Enum))
    {
        _indirectNodeTypes.addEnd(CostSheetNodeType::CalculationSurcharge);
        _indirectNodeTypes.addEnd(CostSheetNodeType::CalculationRate);
        _indirectNodeTypes.addEnd(CostSheetNodeType::CalculationOutUnitBased);
        _indirectNodeTypes.addEnd(CostSheetNodeType::CalculationInUnitBased);

        return _indirectNodeTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createIndirectTasks</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates subtasks for indirect costs data collection.
    /// </summary>
    protected void createIndirectTasks()
    {
        using (var activityContext = this.instrumentationlogger().inventoryValueReportActivity().createIndirectTasks(this.parmCreatedTransactionId()))
        {
            const UtilElementName MeasureNumberOfTasks = 'IndirectTaskCount';

            Query query = new Query();
            QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(CostSheetNodeTable));
            queryBuildDataSource.addRange(fieldNum(CostSheetNodeTable, Type))
                .value(SysQueryRangeUtil::queryListRange(this.indirectCostNodeTypeList()));
            QueryBuildRange queryBuildRange = this.parmInventValueReportContract().parmQuery().dataSourceTable(tableNum(InventValueReportTmpLine)).findRange(fieldNum(InventValueReportTmpLine, ResourceId));

            if (queryBuildRange != null)
            {
                queryBuildDataSource.addRange(fieldNum(CostSheetNodeTable, Code)).value(queryBuildRange.value());
            }

            queryBuildRange = this.parmInventValueReportContract().parmQuery().dataSourceTable(tableNum(InventValueReportTmpLine)).findRange(fieldNum(InventValueReportTmpLine, ResourceGroupId));
            if (queryBuildRange != null)
            {
                QueryBuildDataSource queryBuildDataSourceParentCostGroup = queryBuildDataSource.addDataSource(tableNum(CostSheetNodeTable));
                queryBuildDataSourceParentCostGroup.addLink(fieldNum(CostSheetNodeTable, ParentNodeId), fieldNum(CostSheetNodeTable, NodeId));
                queryBuildDataSourceParentCostGroup.joinMode(JoinMode::ExistsJoin);
                queryBuildDataSourceParentCostGroup.addRange(fieldNum(CostSheetNodeTable, CostGroupId)).value(queryBuildRange.value());
            }

            QueryRun queryRunCostSheetNodeTable = new QueryRun(query);

            int64 numberOfTasks;

            while (queryRunCostSheetNodeTable.next())
            {
                CostSheetNodeTable costSheetNodeTable = queryRunCostSheetNodeTable.get(tableNum(CostSheetNodeTable));
                InventValueReportPopulateIndirect inventValueReportPopulateIndirect = InventValueReportPopulateIndirect::construct();
                inventValueReportPopulateIndirect.parmInventValueReportContract(inventValueReportContract);
                inventValueReportPopulateIndirect.parmResourceId(costSheetNodeTable.Code);

                taskList.addEnd(inventValueReportPopulateIndirect);

                numberOfTasks++;
            }

            Set instrumentationPropertyCollection = new Set(Types::Class);
            var loggerProperties = this.instrumentationLogger().properties();
            instrumentationPropertyCollection.add(loggerProperties.addCount(MeasureNumberOfTasks, numberOfTasks));
            this.instrumentationLogger().logPropertyCollection(instrumentationPropertyCollection);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventValueItemList</Name>
				<Source><![CDATA[
    private void createInventValueItemList()
    {
        InventValueItemList inventValueItemList;
        Map insertRecordsetMap = new Map(Types::String, Types::Container);

        Query query = InventValueReportPopulateItem::createItemRangeQueryRecId(inventValueReportContract);
        QueryBuildDataSource inventTableDS = query.dataSourceTable(tableNum(InventTable));
        query.clearAllFields();
        inventTableDS.addSelectionField(fieldNum(InventTable, ItemId));
        insertRecordsetMap.insert(fieldStr(InventValueItemList, ItemId), [inventTableDS.uniqueId(), fieldStr(InventTable, ItemId)]);

        ttsbegin;
        Query::insert_recordset(inventValueItemList, insertRecordsetMap, query);
        update_recordset inventValueItemList
            setting TransactionId = this.parmCreatedTransactionId()
            where inventValueItemList.TransactionId == 0;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBundle</Name>
				<Source><![CDATA[
    private InventValueBundleRecId createBundle()
    {
        InventValueBundleList inventValueBundleList;

        inventValueBundleList.ProcessingState = InventValueBundleState::Waiting;
        inventValueBundleList.TransactionId = this.parmCreatedTransactionId();
        inventValueBundleList.insert();

        return inventValueBundleList.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBundleSize</Name>
				<Source><![CDATA[
    protected InventValueBundleSize getBundleSize()
    {
        InventParameters inventParameters = InventParameters::find();

        if (inventParameters.InventValueBundleSize > 0)
        {
            return inventParameters.InventValueBundleSize;
        }

        return DefaultBundleSize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignBundle</Name>
				<Source><![CDATA[
    private void assignBundle()
    {
        InventValueItemList inventValueItemList;
        RecId minRecId, maxRecId;
        RecId startRecId, endRecId;

        inventValueItemList.readPast(true);

        select firstonly RecId from inventValueItemList
            order by RecId asc
            where inventValueItemList.TransactionId == this.parmCreatedTransactionId()
               && inventValueItemList.Bundle == 0;

        minRecId = inventValueItemList.RecId;
        startRecId = minRecId;

        select firstonly RecId from inventValueItemList
            order by RecId desc
            where inventValueItemList.TransactionId == this.parmCreatedTransactionId()
               && inventValueItemList.Bundle == 0;

        maxRecId = inventValueItemList.RecId;

        InventValueBundleSize bundleSize = this.getBundleSize();

        while (startRecId <= maxRecId)
        {
            endRecId = startRecId + bundleSize - 1;

            ttsbegin;
            InventValueBundleRecId bundleRecId = this.createBundle();

            update_recordset inventValueItemList
                setting Bundle = bundleRecId
                where inventValueItemList.TransactionId == this.parmCreatedTransactionId()
                    && inventValueItemList.Bundle == 0
                    && inventValueItemList.RecId >= startRecId
                    && inventValueItemList.RecId <= min(endRecId, maxRecId);
            ttscommit;

            startRecId = endRecId + 1;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBundleTask</Name>
				<Source><![CDATA[
    private void createBundleTask(Array _arrayOfBundles)
    {
        int arraySize = _arrayOfBundles.lastIndex();
        RecId minRecId, maxRecId;

        if (arraySize == 0)
        {
            return;
        }
        else if (arraySize == 1)
        {
            minRecId = _arrayOfBundles.value(1);
            maxRecId = minRecId;
        }
        else
        {
            minRecId = _arrayOfBundles.value(1);
            maxRecId = _arrayOfBundles.value(arraySize);
        }

        InventValueReportContract inventValueReportContractLocal = new InventValueReportContract();
        InventValueReportPopulateItem inventValueReportPopulateItemLocal = InventValueReportPopulateItem::construct();
        inventValueReportContractLocal.unpack(inventValueReportContract.pack());

        inventValueReportContractLocal.parmMinBundleRecId(minRecId);
        inventValueReportContractLocal.parmMaxBundleRecId(maxRecId);

        inventValueReportPopulateItemLocal.parmInventValueReportContract(inventValueReportContractLocal);
        taskList.addEnd(inventValueReportPopulateItemLocal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>BundleTaskCount</Name>
				<Source><![CDATA[
    protected int BundleTaskCount()
    {
        return BundleTaskSize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBundleItemTasks</Name>
				<Source><![CDATA[
    protected void createBundleItemTasks()
    {
        using (var activityContext = this.instrumentationlogger().inventoryValueReportActivity().createItemTasks(this.parmCreatedTransactionId()))
        {
            const UtilElementName measureNumberOfTasks = 'ItemTaskCount';
            int numberOfTasks = 0;

            if (!InventValueBundleList::exist(this.parmCreatedTransactionId()))
            {
                this.createInventValueItemList();
                this.assignBundle();
            }

            InventValueBundleList inventValueBundleList;
            select count(RecId) from inventValueBundleList
                    where inventValueBundleList.TransactionId == this.parmCreatedTransactionId();

            real avgBundlesPerTask = inventValueBundleList.RecId / this.BundleTaskCount();

            int currentTask = 0;
            int currentBundleCounter = 0;
            Array arrayOfBundles = new Array(Types::Int64);

            while select RecId from inventValueBundleList
                order by RecId asc
                where inventValueBundleList.TransactionId == this.parmCreatedTransactionId()
            {
                currentBundleCounter ++;
                int whichTaskShouldTheBundleUse = roundDown((currentBundleCounter - 1) / avgBundlesPerTask, 1);

                if (whichTaskShouldTheBundleUse == currentTask)
                {
                    arrayOfBundles.value(min(2, arrayOfBundles.lastIndex() + 1), inventValueBundleList.RecId);
                }
                else
                {
                    this.createBundleTask(arrayOfBundles);
                    currentTask++;
                    arrayOfBundles = new Array(Types::Int64);
                    arrayOfBundles.value(1, inventValueBundleList.RecId);
                }
            }

            if (arrayOfBundles.lastIndex() != 0)
            {
                this.createBundleTask(arrayOfBundles);
                currentTask++;
            }

            numberOfTasks = currentTask;

            Set instrumentationPropertyCollection = new Set(Types::Class);
            var loggerProperties = this.instrumentationLogger().properties();
            instrumentationPropertyCollection.add(loggerProperties.addCount(measureNumberOfTasks, numberOfTasks));
            this.instrumentationLogger().logPropertyCollection(instrumentationPropertyCollection);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createItemTasks</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a subtask for material data collection.
    /// </summary>
    protected void createItemTasks()
    {
        using (var activityContext = this.instrumentationlogger().inventoryValueReportActivity().createItemTasks(this.parmCreatedTransactionId()))
        {
            const UtilElementName measureNumberOfTasks = 'ItemTaskCount';
            int numberOfTasks = 1;

            InventValueReportPopulateItem inventValueReportPopulateItem = InventValueReportPopulateItem::construct();
            inventValueReportPopulateItem.parmInventValueReportContract(inventValueReportContract);
            taskList.addEnd(inventValueReportPopulateItem);

            Set instrumentationPropertyCollection = new Set(Types::Class);
            var loggerProperties = this.instrumentationLogger().properties();
            instrumentationPropertyCollection.add(loggerProperties.addCount(measureNumberOfTasks, numberOfTasks));
            this.instrumentationLogger().logPropertyCollection(instrumentationPropertyCollection);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createItemTask</Name>
				<Source><![CDATA[
    private void createItemTask(Array _arrayOfItems)
    {
        int arraySize = _arrayOfItems.lastIndex();
        str itemRangeValue;
        if (arraySize == 0)
        {
            return;
        } 
        else if (arraySize == 1)
        {
            itemRangeValue = queryValue(_arrayOfItems.value(1));
        } 
        else
        {
            itemRangeValue = queryRange(_arrayOfItems.value(1), _arrayOfItems.value(arraySize));
        }

        InventValueReportContract inventValueReportContractLocal = new InventValueReportContract();
        InventValueReportPopulateItem inventValueReportPopulateItemLocal = InventValueReportPopulateItem::construct();
        inventValueReportContractLocal.unpack(inventValueReportContract.pack());
        QueryBuildDataSource queryBuildDataSource = inventValueReportContractLocal.parmQuery().dataSourceTable(tableNum(InventValueReportTmpLine));
        SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(InventValueReportTmpLine, RecId)).value(itemRangeValue);

        inventValueReportPopulateItemLocal.parmInventValueReportContract(inventValueReportContractLocal);

        taskList.addEnd(inventValueReportPopulateItemLocal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createServiceTasks</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates subtasks for the direct outsourced services data collection.
    /// </summary>
    protected void createServiceTasks()
    {
        using (var activityContext = this.instrumentationlogger().inventoryValueReportActivity().createServiceTasks(this.parmCreatedTransactionId()))
        {
            const UtilElementName MeasureNumberOfTasks = 'ServiceTaskCount';

            Query query = new Query();

            // We need a builder to parse through the InventTable
            QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(InventTable));
            queryBuildDataSource.addGroupByField(fieldNum(InventTable, ItemId));

            // If the item is specified in the InventValueReportContract, we need to set the corresponding range value
            QueryBuildRange queryBuildRange = this.parmInventValueReportContract().parmQuery().dataSourceTable(tableNum(InventValueReportTmpLine)).findRange(fieldNum(InventValueReportTmpLine, ResourceId));
            if (queryBuildRange != null)
            {
                queryBuildDataSource.addRange(fieldNum(InventTable, ItemId)).value(queryBuildRange.value());
            }

            // We need a join to the item group table. We'll use the relations defined on the table to link it to our query
            QueryBuildDataSource qbdsInventItemGroupItem = queryBuildDataSource.addDataSource(tableNum(InventItemGroupItem));
            qbdsInventItemGroupItem.relations(true);
            qbdsInventItemGroupItem.joinMode(JoinMode::ExistsJoin);

            // If the resource group is specified in the InventValueReportContract, we have to set the corresponding range value
            queryBuildRange = this.parmInventValueReportContract().parmQuery().dataSourceTable(tableNum(InventValueReportTmpLine)).findRange(fieldNum(InventValueReportTmpLine, ResourceGroupId));
            if (queryBuildRange != null)
            {
                qbdsInventItemGroupItem.addRange(fieldNum(InventItemGroupItem, ItemGroupId)).value(queryBuildRange.value());
            }

            // Optimize the query by only selecting the items that are present in the ProdRouteTrans table as subcontracted service items
            QueryBuildDataSource qbdsProdRouteTrans = queryBuildDataSource.addDataSource(tableNum(ProdRouteTrans));
            qbdsProdRouteTrans.addLink(fieldNum(InventTable, ItemId), fieldNum(ProdRouteTrans, ServiceItemId));
            qbdsProdRouteTrans.joinMode(JoinMode::ExistsJoin);

            int64 numberOfTasks;
        
            // For each item found, create the InventValueReportPopulateSubcontracted instance that will populate the corresponding data in the report
            QueryRun queryRunInventTable = new QueryRun(query);
            while (queryRunInventTable.next())
            {
                InventTable inventTable = queryRunInventTable.get(tableNum(InventTable));
                InventValueReportPopulateSubcontracted inventValueReportPopulateSubcont = InventValueReportPopulateSubcontracted::construct();
                inventValueReportPopulateSubcont.parmInventValueReportContract(inventValueReportContract);
                inventValueReportPopulateSubcont.parmResourceId(inventTable.ItemId);

                taskList.addEnd(inventValueReportPopulateSubcont);

                numberOfTasks++;
            }

            Set instrumentationPropertyCollection = new Set(Types::Class);
            var loggerProperties = this.instrumentationLogger().properties();
            instrumentationPropertyCollection.add(loggerProperties.addCount(MeasureNumberOfTasks, numberOfTasks));
            this.instrumentationLogger().logPropertyCollection(instrumentationPropertyCollection);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>connectionKeepAlivePingIntervalInMilliSec</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the interval in milliseconds that is used when pinging the connection.
    /// </summary>
    /// <returns>The interval in milliseconds that is used when pinging the connection.</returns>
    private int connectionKeepAlivePingIntervalInMilliSec()
    {
        return 15*60*1000; // 15 minutes in ms.
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxItemTaskCount</Name>
				<Source><![CDATA[
    protected int maxItemTaskCount()
    {
        return max(1, System.Environment::ProcessorCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>waitForAsyncTasks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Waits for all tasks to be completed.
    /// </summary>
    /// <param name = "_threadTasklist">List of tasks currently executing.</param>
    /// <remarks>
    /// This method is used to keep the connection alive for the duration of the task life time. SQL Azure now has a hard time limit (variable depending on load)
    /// and it will kill any idle connection. Thus it is required to issue a simple keep alive query from the connection in order to avoid this from happening.
    /// </remarks>
    private void waitForAsyncTasks(System.Threading.Tasks.Task[] _threadTasklist)
    {
        int connectionKeepAlivePingIntervalInMilliSec = this.connectionKeepAlivePingIntervalInMilliSec();
        
        while (!System.Threading.Tasks.Task::WaitAll(_threadTasklist, connectionKeepAlivePingIntervalInMilliSec))
        {
            if (this.parmUserConnection())
            {
                var statement = this.parmUserConnection().createStatement();
                var sqlKeepAlive = 'select SYSDATETIME();';
        
                ResultSet resultset = statement.executeQueryWithParameters(sqlKeepAlive, SqlParams::create());
                resultset.next();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTasks</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates subtasks for the data collection for the inventory value report.
    /// </summary>
    /// <remarks>
    ///    The subtasks are either executed directly or by the enhanced batch framework.
    /// </remarks>
    public void createTasks()
    {
        InventValueReport inventValueReport = InventValueReport::findByReportId(inventValueReportContract.parmReportId());

        this.adjustFromAndToDateToDateInterval();

        /*
            Dependencies:

            item tasks          -->
            labor tasks         --> ledger task
            indirect cost tasks -->

        */
        using (var activityContext = this.instrumentationlogger().inventoryValueReportActivity().populateReportData(this.parmCreatedTransactionId()))
        {
            if (!InventValueBundleList::exist(this.parmCreatedTransactionId()))
            {
                if (inventValueReport.ViewLabor)
                {
                    this.createWrkCtrTasks();
                }

                if (inventValueReport.ViewIndirect)
                {
                    this.createIndirectTasks();
                }

                if (this.mustCreateServiceTasks(inventValueReport))
                {
                    this.createServiceTasks();
                }
            }

            if (inventValueReport.ViewMaterial)
            {
                InventValueExecutionHistory executionHistory = InventValueExecutionHistory::find(this.parmCreatedTransactionId());
                if (isInventValueReportStorageBundleFeatureEnabled && executionHistory && executionHistory.RunInBundle)
                {
                    this.createBundleItemTasks();
                }
                else
                {
                    this.createItemTasks();
                }
            }

            int taskListLength = taskList.elements();
            System.Threading.Tasks.Task[] threadTasklist = new System.Threading.Tasks.Task[taskListLength]();

            int i = 0;

            using (var activityContext2 = this.instrumentationlogger().inventoryValueReportActivity().runAsyncTasks(this.parmCreatedTransactionId()))
            {
                ListEnumerator tasksEnumerator = taskList.getEnumerator();
                while (tasksEnumerator.moveNext())
                {
                    CostIAsyncRunnable asyncRunnableTask = tasksEnumerator.current() as CostIAsyncRunnable;

                    if (asyncRunnableTask)
                    {
                        threadTasklist.SetValue(asyncRunnableTask.runAsync(), i);
                        i++;
                    }
                }

                this.waitForAsyncTasks(threadTasklist);
            }

            if (inventValueReport.PrintLedgerValue && (!this.parmSkipPrintLedgerValue() || !InventValueReportStorageFeature::isEnabled()))
            {
                using (var activityContext2 = this.instrumentationlogger().inventoryValueReportActivity().runPopulateLedger(this.parmCreatedTransactionId()))
                {
                    InventValueReportPopulateLedger inventValueReportPopulateLedger = InventValueReportPopulateLedger::construct();
                    inventValueReportPopulateLedger.parmInventValueReportContract(inventValueReportContract);
                    inventValueReportPopulateLedger.parmUserConnection(this.parmUserConnection());
                    inventValueReportPopulateLedger.run();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWrkCtrTasks</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a subtask for labor data collection.
    /// </summary>
    protected void createWrkCtrTasks()
    {
        using (var activityContext = this.instrumentationlogger().inventoryValueReportActivity().createWrkCtrTasks(this.parmCreatedTransactionId()))
        {
            const UtilElementName MeasureNumberOfTasks = 'WrkCtrTaskCount';

            WrkCtrTable                     wrkCtrTable;

            InventValueReportPopulateWrkCtr inventValueReportPopulateWrkCtr = InventValueReportPopulateWrkCtr::construct();
            inventValueReportPopulateWrkCtr.parmInventValueReportContract(inventValueReportContract);

            taskList.addEnd(inventValueReportPopulateWrkCtr);

            Set instrumentationPropertyCollection = new Set(Types::Class);
            var loggerProperties = this.instrumentationLogger().properties();
            instrumentationPropertyCollection.add(loggerProperties.addCount(MeasureNumberOfTasks, 1));
            this.instrumentationLogger().logPropertyCollection(instrumentationPropertyCollection);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateServiceTasks</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the report will contain details for subcontracted services.
    /// </summary>
    /// <param name="_inventValueReport">
    ///    A record that contains the definition of the report.
    /// </param>
    /// <returns>
    ///    true, if subcontracted services will be displayed on the report; otherwise, false.
    /// </returns>
    private boolean mustCreateServiceTasks(InventValueReport _inventValueReport)
    {
        return (_inventValueReport.ViewDirectOutsourcing && isConfigurationkeyEnabled(configurationKeyNum(LeanManufacturing)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        taskList = new List(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventValueReportInit construct()
    {
        return new InventValueReportInit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>InventValueReportContract</c> parameter.
    /// </summary>
    /// <param name="_inventValueReportContract">
    ///    The contract class to initialize.
    /// </param>
    /// <param name="_query">
    ///    The query to add to the contract.
    /// </param>
    /// <remarks>
    ///    Each time this method is called, a new transaction ID is assigned. This is on purpose in order to
    ///    separate data from multiple reports.
    /// </remarks>
    protected void initContract(InventValueReportContract _inventValueReportContract, Query _query)
    {
        if (!_inventValueReportContract.parmTransactionId())
        {
            _inventValueReportContract.parmTransactionId(appl.curTransactionId(true));
        }
        _inventValueReportContract.parmQuery(_query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the report data generation.
    /// </summary>
    public void run()
    {
        this.initContract(inventValueReportContract, reportQuery);
        this.createTasks();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuery</Name>
				<Source><![CDATA[
    public Query parmQuery(Query _query = reportQuery)
    {
        reportQuery = _query;

        return reportQuery;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>