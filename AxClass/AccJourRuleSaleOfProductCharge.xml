<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccJourRuleSaleOfProductCharge</Name>
	<SourceCode>
		<Declaration><![CDATA[
[
SourceDocumentEnumLiteralExtensionAttribute(enumStr(BusinessEvent_CustomerInvoice), enumLiteralStr(BusinessEvent_CustomerInvoice, CashSaleOfProduct), MonetaryAmount::Charge),
SourceDocumentEnumLiteralExtensionAttribute(enumStr(BusinessEvent_CustomerInvoice), enumLiteralStr(BusinessEvent_CustomerInvoice, CreditSaleOfProduct), MonetaryAmount::Charge),
SourceDocumentEnumLiteralExtensionAttribute(enumStr(BusinessEvent_CustomerInvoice), enumLiteralStr(BusinessEvent_CustomerInvoice, ReturnOfProduct), MonetaryAmount::Charge)
]
class AccJourRuleSaleOfProductCharge extends AccountingJournalizingRule
{
    MarkupTable                 markupTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addChargeIssueToDimAllocList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds charges to the specified list.
    /// </summary>
    /// <param name="_ledgerDimensionAllocationList">
    /// The ledger dimension allocation list.
    /// </param>
    /// <param name="_thisSide">
    /// The debit credit side.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void addChargeIssueToDimAllocList(LedgerDimensionAllocationList _ledgerDimensionAllocationList, DebitCredit _thisSide = this.parmSide())
    {
        LedgerDimensionDefaultAccount           ledgerDimensionDefaultAccount;

        CustVendTable                           invoiceAccount;
        PostingProfile                          postingProfile;
        DebitCredit                             otherSide;

        Object                                  sourceDocument;
        SourceDocumentIParty                    iParty;
        SourceDocumentIAccountingRule           iAccountingRule;
        container                               cacheResult;
        LedgerCacheScope                        ledgerCacheScope = LedgerCacheScope::PartyMainAccountDimensionListProvCust;

        if (!markupTable.needChargeIssue())
            return;

        if (sourceDocumentLineItem is SourceDocumentIParty)
        {
            iParty            = sourceDocumentLineItem as SourceDocumentIParty;
            invoiceAccount    = iParty.parmPartyAccount();
        }
        else
        {
            sourceDocument = sourceDocumentLineItem.parmSourceDocument();
            if (sourceDocument is SourceDocumentIParty)
            {
                iParty            = sourceDocument as SourceDocumentIParty;
                invoiceAccount    = iParty.parmPartyAccount();
            }
        }

        if (sourceDocument is SourceDocumentIAccountingRule)
        {
            iAccountingRule = sourceDocument as SourceDocumentIAccountingRule;
            postingProfile = iAccountingRule.parmPostingProfile();
        }

        if (!invoiceAccount)
        {
            throw error('Must have invoice account');
        }

        otherSide = _thisSide == DebitCredit::Debit ? DebitCredit::Credit : DebitCredit::Debit;

        cacheResult = LedgerCache::getValue(ledgerCacheScope, [curext(), invoiceAccount.AccountNum, postingProfile]);

        if (cacheResult == conNull())
        {
            ledgerDimensionDefaultAccount = CustLedgerAccounts::summaryLedgerDimension(invoiceAccount.AccountNum,
                                                                                    postingProfile,
                                                                                    false);

            LedgerCache::insertValue(ledgerCacheScope, [curext(), invoiceAccount.AccountNum, postingProfile], [ledgerDimensionDefaultAccount]);
        }
        else
        {
            [ledgerDimensionDefaultAccount] = cacheResult;
        }

        _ledgerDimensionAllocationList.addEnd(LedgerDimensionAllocation::newFromParameters(
            ledgerDimensionDefaultAccount,
            1,
            _thisSide,
            false,
            0,
            AccountingDistributionReferenceRole::None,
            0,
            LedgerPostingType::CustBalance));

        ledgerDimensionDefaultAccount = MarkupCustPosting_RU::findLedger(MarkupCustPostingType_RU::SalesRevenue,
                                                                invoiceAccount.AccountNum,
                                                                markupTable.MarkupCode).LedgerDimension;
        if (! ledgerDimensionDefaultAccount)
        {
            throw error(strFmt("@GLS114840", markupTable.MarkupCode));
        }

        _ledgerDimensionAllocationList.addEnd(LedgerDimensionAllocation::newFromParameters(
            ledgerDimensionDefaultAccount,
            1,
            otherSide,
            false,
            0,
            AccountingDistributionReferenceRole::None,
            0,
            LedgerPostingType::SalesRevenue));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalAccountEntryLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger account to use to enter a subledger journal entry.
    /// </summary>
    /// <param name="_defaultLedgerDimension">
    /// The default ledger dimension.
    /// </param>
    /// <param name="_accountingDistributionLedgerDimension">
    /// The accounting distribution ledger dimension.
    /// </param>
    /// <returns>
    /// A <c>LedgerDimensionAccount</c> object.
    /// </returns>
    public LedgerDimensionAccount getJournalAccountEntryLedgerDimension(LedgerDimensionDefaultAccount _defaultLedgerDimension, LedgerDimensionAccount _accountingDistributionLedgerDimension)
    {
        LedgerDimensionDefaultAccount  defaultLedgerDimension;
        LedgerDimensionAccount         ret;

        if (markupTable.needChargeIssue()    &&
            currentLedgerDimensionAllocation &&
            currentLedgerDimensionAllocation.parmLedgerPostingType() != LedgerPostingType::CustBalance)
        {
            // dimension of fixet offset trans should be always same as dimension of the _accountingDistributionLedgerDimension
            defaultLedgerDimension = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(_defaultLedgerDimension);
            ret = LedgerDimensionFacade::serviceLedgerDimensionFromLedgerDims(defaultLedgerDimension, _accountingDistributionLedgerDimension);
        }
        else
        {
            ret = super(_defaultLedgerDimension, _accountingDistributionLedgerDimension);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimAllocList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the accounting rule's dimension allocation list.
    /// </summary>
    protected void initDimAllocList()
    {
        super();

        if (markupTable.needChargeIssue())
        {
            this.addChargeIssueToDimAllocList(ledgerDimensionAllocationList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the accounting rule.
    /// </summary>
    protected void initialize()
    {
        Object                          object = sourceDocumentLineItem;
        SourceDocumentLineItemICharge   iCharge;

        super();

        if (object is SourceDocumentLineItemICharge)
        {
            iCharge = object as SourceDocumentLineItemICharge;
            markupTable = iCharge.parmMarkupTable();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalizingDefLedgerPostingType</Name>
				<Source><![CDATA[
    public LedgerPostingType parmJournalizingDefLedgerPostingType()
    {
        LedgerPostingType journalizingDefLedgerPostingType;

        journalizingDefLedgerPostingType = LedgerPostingType::CustBalance;

        return journalizingDefLedgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerPostingType</Name>
				<Source><![CDATA[
    public LedgerPostingType parmLedgerPostingType()
    {
        LedgerPostingType markupPostingType;

        markupPostingType = LedgerPostingType::CustBalance;

        // <GEERU>
        #ISOCountryRegionCodes

        if (markupTable.needChargeIssue())
        {
            markupPostingType = LedgerPostingType::SalesConsump;
        }
        else
        {
        // </GEERU>
            if (markupTable.CustType == MarkupType::LedgerAccount &&
                markupTable.VendType == MarkupType::LedgerAccount)
            {
                markupPostingType = markupTable.CustPosting;
            }
        // <GEERU>
        }
        // </GEERU>

        return markupPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSide</Name>
				<Source><![CDATA[
    public DebitCredit parmSide()
    {
        DebitCredit     side = DebitCredit::Debit;

        if (this.parmAccountingdistribution().TransactionCurrencyAmount < 0)
        {
            if (side == DebitCredit::Credit)
            {
                side = DebitCredit::Debit;
            }
            else
            {
                side = DebitCredit::Credit;
            }
        }

        return side;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>