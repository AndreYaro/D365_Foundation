<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTransOnAccProposal</Name>
	<SourceCode>
		<Declaration><![CDATA[
class   ProjTransOnAccProposal extends ProjTransOnAcc
{
    ProjProposalOnAcc   projProposalOnAcc;
    ProjOnAccTrans      projOnAccTrans;
    ProjTransStatus     proposalTransStatus;

    boolean             calcTransTurnover;
    AmountCur           transTurnover;
    boolean             calcLedgerSalesAmountMST;
    AmountMST           ledgerSalesAmountMST;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>categoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the category ID for a transaction.
    /// </summary>
    /// <returns>
    /// The category ID for the transaction.
    /// </returns>
    public ProjCategoryId categoryId()
    {
        return projOnAccTrans.CategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyIdSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code for sales amounts that are reported by a transaction.
    /// </summary>
    /// <returns>
    /// The currency code for sales amounts that are reported by the transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjSalesCurrencyCode currencyIdSales()
    {
        return projOnAccTrans.CurrencyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault defaultDimension()
    {
        return projOnAccTrans.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fundingSource</Name>
				<Source><![CDATA[
    public ProjFundingSourceRefId fundingSource()
    {
        return projProposalOnAcc.projProposalJour().FundingSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxTransDate</Name>
				<Source><![CDATA[
    TransDate getTaxTransDate()
    {
        return projOnAccTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTaxBuffer</Name>
				<Source><![CDATA[
    boolean hasTaxBuffer()
    {
        if (projOnAccTrans)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linePropertyId</Name>
				<Source><![CDATA[
    public ProjLinePropertyId linePropertyId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ProjProposalOnAcc _projProposalOnAcc)
    {
        projProposalOnAcc   = _projProposalOnAcc;
        projOnAccTrans      = ProjOnAccTrans::find(projProposalOnAcc.TransId);

        super(_projProposalOnAcc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the project that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The ID of the project that is associated with this transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjId projId()
    {
        return projOnAccTrans.ProjID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the project proposal that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The ID of the project proposal that is associated with this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjProposalId proposalId()
    {
        return projProposalOnAcc.ProposalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposalTransStatus</Name>
				<Source><![CDATA[
    private ProjTransStatus proposalTransStatus()
    {
        ProjProposalOnAccDetail  projProposalOnAccDetail;
        ProjOnAccTransSale       projOnAccTransSale;

        if (!proposalTransStatus)
        {
            select SaleRefRecId from projProposalOnAccDetail
                where projProposalOnAccDetail.ProposalRefRecId == projProposalOnAcc.RecId
                    join TransStatus from projOnAccTransSale
                        where projOnAccTransSale.RecId == projProposalOnAccDetail.SaleRefRecId;

            proposalTransStatus = projOnAccTransSale.TransStatus;
        }

        return proposalTransStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaContractLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the contract billing rule that is associated with this transaction.
    /// </summary>
    /// <returns>
    ///    The ID of the contract billing rule that is associated with this transaction.
    /// </returns>
    public PSAContractLineNum psaContractLineNum()
    {
        return projProposalOnAcc.psaContractLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaIsOnAccount</Name>
				<Source><![CDATA[
    public NoYes psaIsOnAccount()
    {
        return projOnAccTrans.psaIsOnAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaRefRecIdBudgetTrans</Name>
				<Source><![CDATA[
    public RefRecId psaRefRecIdBudgetTrans()
    {
        return projOnAccTrans.psaRefRecIdBudgetTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaRefTableIdBudgetTrans</Name>
				<Source><![CDATA[
    public RefTableId psaRefTableIdBudgetTrans()
    {
        return projOnAccTrans.psaRefTableIdBudgetTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionOrigin</Name>
				<Source><![CDATA[
    public ProjOrigin transactionOrigin()
    {
        return projOnAccTrans.TransactionOrigin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    public Qty qty()
    {
        boolean                 invoiced = ProjProposalJour::find(projProposalOnAcc.ProposalId).LineProperty   == ProjLinePropertyCode::Invoiced;
        ProjInvoiceOnAcc        projInvoiceOnAcc;
        ProjInvoiceOnAccDetail  projInvoiceOnAccDetail;
        ProjProposalOnAccDetail projProposalOnAccDetail;

        if (invoiced)
        {
            select RecId from projInvoiceOnAcc
                 where projInvoiceOnAcc.ProjInvoiceId == ProjProposalJour::find(projProposalOnAcc.ProposalId).ProjInvoiceId
                    && projInvoiceOnAcc.TransId       == this.transId();

            select sum(AmountMST) from projInvoiceOnAccDetail
                where projInvoiceOnAccDetail.InvoiceRefRecId == projInvoiceOnAcc.RecId;

            select sum(AmountCur) from projProposalOnAccDetail
                where projProposalOnAccDetail.ProposalRefRecId == projProposalOnAcc.RecId;

            if (projInvoiceOnAccDetail.AmountMST < 0)
            {
                if (projProposalOnAccDetail.AmountCur < 0)
                {
                    return ProjOnAccTrans::find(this.transId()).Qty;
                }
                else
                {
                    return -ProjOnAccTrans::find(this.transId()).Qty;
                }
            }
            else
            {
                if (projProposalOnAccDetail.AmountCur < 0)
                {
                    return -ProjOnAccTrans::find(this.transId()).Qty;
                }
                else
                {
                    return ProjOnAccTrans::find(this.transId()).Qty;
                }
            }
        }
        else
        {
            if (this.proposalTransStatus()   == ProjTransStatus::CreditnoteProposal)
            {
                return -1;
            }
            else
            {
                return 1;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>recId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID for this transaction.
    /// </summary>
    /// <returns>
    /// The record ID for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public RecId recId()
    {
        return projProposalOnAcc.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the sales price for this transaction.
    /// </summary>
    /// <returns>
    ///    The sales price for this transaction.
    /// </returns>
    SalesPrice salesPrice()
    {
        SalesPrice  ret;
        Qty         qty;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransOnAccProposal)))
        {
            qty = this.qty();
            ret = qty ? CurrencyExchangeHelper::price(this.transTurnover() / qty, this.currencyIdSales()) : 0;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID for this transaction.
    /// </summary>
    /// <returns>
    /// The table ID for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TableId tableId()
    {
        return tableName2id(tableStr(ProjProposalOnAcc));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the tax group for this transaction.
    /// </summary>
    /// <returns>
    /// The tax group for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TaxGroup taxGroup()
    {
        return projProposalOnAcc.TaxGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxItemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the item tax group for this transaction.
    /// </summary>
    /// <returns>
    /// The item tax group for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TaxItemGroup taxItemGroup()
    {
        return projProposalOnAcc.TaxItemGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    public TransDate transDate()
    {
        return projProposalOnAcc.projOnAccTrans().TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction ID.
    /// </summary>
    /// <returns>
    /// The transaction ID.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TransactionID transId()
    {
        return projProposalOnAcc.TransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTurnover</Name>
				<Source><![CDATA[
    public AmountCur transTurnover()
    {
        AmountCur               ret;
        ProjProposalOnAccDetail projProposalOnAccDetail;
        ProjOnAccTransSale      projOnAccTransSale;
        ProjTrans               projTransSale;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransOnAccProposal)))
        {
            if (!calcTransTurnover)
            {
                calcTransTurnover = true;
                while select projProposalOnAccDetail
                    where projProposalOnAccDetail.ProposalRefRecId == projProposalOnAcc.RecId
                        join projOnAccTransSale
                            where projOnAccTransSale.RecId == projProposalOnAccDetail.SaleRefRecId
                {
                    projTransSale = ProjTrans::newProjProposalOnAccSale(projProposalOnAcc, projProposalOnAccDetail, projOnAccTransSale);
                    transTurnover += projTransSale.transTurnover();
                }
            }

            ret = transTurnover;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTurnoverGTE</Name>
				<Source><![CDATA[
    public AmountCur transTurnoverGTE()
    {
        ITaxDocumentLine               taxDocumentLineObject;
        AmountCur                      inclTaxAmount;
        AmountCur                      balanceGTE;
        AmountCur                      balance            = this.transTurnover();
        TaxEngineProjOnAcctTransHeader onAcctTransHeader  = TaxEngineProjOnAcctTransHeader::findOrCreateByProjProposalJour(projProposalOnAcc.projProposalJour());
        ITaxDocument                   taxDocumentObject  = TaxBusinessService::getTaxDocumentBySource(onAcctTransHeader.TableId, onAcctTransHeader.RecId);
        
        if (taxDocumentObject)
        {
            taxDocumentLineObject = taxDocumentObject.findLineBySource(projProposalOnAcc.TableId, projProposalOnAcc.RecId);
            inclTaxAmount = taxDocumentLineObject.getInclTax().amountTransactionCurrency();

            if (inclTaxAmount)
            {
                if (balance < 0)
                {
                    balanceGTE = CurrencyExchangeHelper::amount(abs(balance) - abs(inclTaxAmount)) * -1;
                }
                else
                {
                    balanceGTE = CurrencyExchangeHelper::amount(balance - abs(inclTaxAmount));
                }
            }
            else
            {
                balanceGTE = balance;
            }
        }
        else
        {
            balanceGTE = balance;
        }
        return balanceGTE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txt</Name>
				<Source><![CDATA[
    public TransTxt txt()
    {
        return projProposalOnAcc.Txt;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>