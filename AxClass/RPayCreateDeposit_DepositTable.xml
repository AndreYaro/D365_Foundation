<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayCreateDeposit_DepositTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class RPayCreateDeposit_DepositTable extends RPayCreateDeposit
{
    RPayDepositTable    rPayDepositTable;
    FormDataSource      rPayDepositTable_ds;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTotalAmount</Name>
				<Source><![CDATA[
        protected void calcTotalAmount()
    {
        RPayDepositTable rPayDepositTableLocal, rPayDepositTableCheck;
        paySheetDepositAmount = 0;

        for (rPayDepositTableLocal = rPayDepositTable_ds.getFirst(true) ? rPayDepositTable_ds.getFirst(true) : rPayDepositTable_ds.cursor();
             rPayDepositTableLocal;
             rPayDepositTableLocal = rPayDepositTable_ds.getNext())
        {
            rPayDepositTableCheck = RPayDepositTable::find(rPayDepositTableLocal.RecId);
            if (! rPayDepositTableCheck.Voucher)
            {
                paySheetDepositAmount += rPayDepositTableLocal.DepositSum;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
        protected void createTrans()
    {
        RPayDepositTable    rPayDepositTableLocal, rPayDepositTableUpdate;
        RPaySheetTable      rPaySheetTableUpdate;
        ttsbegin;

        super();

        for (rPayDepositTableLocal = rPayDepositTable_ds.getFirst(true) ? rPayDepositTable_ds.getFirst(true) : rPayDepositTable_ds.cursor();
             rPayDepositTableLocal;
             rPayDepositTableLocal = rPayDepositTable_ds.getNext())
        {
            rPayDepositTableUpdate = RPayDepositTable::find(rPayDepositTableLocal.RecId, true);
            if (! rPayDepositTableUpdate.Voucher)
            {
                rPayDepositTableUpdate.Voucher     = voucherNum;
                rPayDepositTableUpdate.VoucherDate = ledgerVoucher.lastTransDate();
                rPayDepositTableUpdate.update();
            }
        }

        rPayDepositTableUpdate.selectForUpdate(false);

        while select sum(DepositSum) from rPayDepositTableUpdate group by RefPaySheetTableRecId
            where rPayDepositTableUpdate.Voucher     == voucherNum &&
                  rPayDepositTableUpdate.VoucherDate == ledgerVoucher.lastTransDate()
        {
            rPaySheetTableUpdate = RPaySheetTable::find(rPayDepositTableUpdate.RefPaySheetTableRecId, true);
            if (rPaySheetTableUpdate)
            {
                rPaySheetTableUpdate.updateDisbursedSum(rPayDepositTableUpdate.DepositSum);
            }
        }

        ttscommit;

        rPayDepositTable_ds.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(Common _rPayDepositTable, FormDataSource _rPayDepositTable_ds)
    {
        super(null,null);
        rPayDepositTable    = _rPayDepositTable;
        rPaySheetTable      = RPaySheetTable::find(rPayDepositTable.RefPaySheetTableRecId);
        rPayDepositTable_ds = _rPayDepositTable_ds;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>