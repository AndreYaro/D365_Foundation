<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationDocumentObjectContext</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationDocumentObjectContext</c> class is a context for <c>TaxIntegrationDocumentObject</c>.
/// This context object is saved as per company in document object, in case of intercompany scenario.
/// </summary>
internal final class TaxIntegrationDocumentObjectContext
{
    private const str CacheKeyTagTaxGroup = 'TaxGroup';
    private const str CacheKeyTagTaxItemGroup = 'TaxItemGroup';
    private const str CacheKeyTagLedgerDimension = 'LedgerDimension';
    private const str CacheKeyTagTaxId = 'TaxId';

    private const str GlobalCacheScope = classStr(TaxIntegrationDocumentObjectContext);

    private VendParameters vendParameters;
    private Ledger ledger;

    private Map generalCache;
    private Map taxCollectLimitMinMaxCache;

    private Map taxTableCache;
    private Map taxGroupDataCache;

    // This map maintains the total line amount of a transaction.
    // Note, there can be multiple transactions in one document,
    // the amount is saved per TableId and RecId of the transaction header table.
    // It is added for header charge amount calculation only.
    private Map documentTotalLineAmountCache;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        generalCache = new Map(Types::String, Types::AnyType);
        taxCollectLimitMinMaxCache = new Map(Types::String, Types::Container);
        taxTableCache = new Map(Types::String, Types::AnyType);
        taxGroupDataCache = new Map(Types::String, Types::AnyType);
        documentTotalLineAmountCache = new Map(Types::String, Types::Real);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets from cache.
    /// </summary>
    /// <param name = "_cacheKey">The cache key.</param>
    /// <param name = "_fromGlobalCache">From global cache or not.</param>
    /// <returns>The container with result value.</returns>
    private container getFromCache(str _cacheKey, boolean _fromGlobalCache = false)
    {
        if (_fromGlobalCache)
        {
            return this.getFromGlobalCache(_cacheKey);
        }
        else
        {
            return this.getFromLocalCache(_cacheKey);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromGlobalCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets from global cache.
    /// </summary>
    /// <param name = "_cacheKey">The cache key.</param>
    /// <returns>The container with result value.</returns>
    private container getFromGlobalCache(str _cacheKey)
    {
        SysGlobalObjectCache cache = classFactory.globalObjectCache();
        return cache.find(GlobalCacheScope, [_cacheKey]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromLocalCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets from local cache.
    /// </summary>
    /// <param name = "_cacheKey">The cache key.</param>
    /// <returns>The container with result value.</returns>
    private container getFromLocalCache(str _cacheKey)
    {
        if (generalCache.exists(_cacheKey))
        {
            return [generalCache.lookup(_cacheKey)];
        }

        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds to cache.
    /// </summary>
    /// <param name = "_cacheKey">The cache key.</param>
    /// <param name = "_value">The value to cache.</param>
    /// <param name = "_toGlobalCache">To global cache or not.</param>
    private void addToCache(str _cacheKey, anytype _value, boolean _toGlobalCache = false)
    {
        if (_toGlobalCache)
        {
            this.addToGlobalCache(_cacheKey, _value);
        }
        else
        {
            this.addToLocalCache(_cacheKey, _value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToGlobalCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds to global cache.
    /// </summary>
    /// <param name = "_cacheKey">The cache key.</param>
    /// <param name = "_value">The value to cache.</param>
    private void addToGlobalCache(str _cacheKey, anytype _value)
    {
        SysGlobalObjectCache cache = classFactory.globalObjectCache();
        cache.insert(GlobalCacheScope, [_cacheKey], [_value]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToLocalCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds to local cache.
    /// </summary>
    /// <param name = "_cacheKey">The cache key.</param>
    /// <param name = "_value">The value to cache.</param>
    private void addToLocalCache(str _cacheKey, anytype _value)
    {
        generalCache.add(_cacheKey, _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFinancialDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets financial dimension.
    /// </summary>
    /// <param name = "_ledgerDimension">The ledger dimension RecId.</param>
    /// <returns>The dictionary with dimension display name and value.</returns>
    public Microsoft.Dynamics.TaxCalculation.ApiContracts.CaseInsensitiveDictionary<str> getFinancialDimension(DimensionDefault _ledgerDimension)
    {
        Microsoft.Dynamics.TaxCalculation.ApiContracts.CaseInsensitiveDictionary<str> result;
        str cacheKey = TaxIntegrationDocumentObjectContext::CacheKeyTagLedgerDimension + TaxIntegrationTaxServiceConstants::CacheKeyDelimiter + int642Str(_ledgerDimension);

        container conResult = this.getFromCache(cacheKey);
        if (conResult == conNull())
        {
            result = new Microsoft.Dynamics.TaxCalculation.ApiContracts.CaseInsensitiveDictionary<str>();
            DimensionAttributeValueSetStorage dimStorage = DimensionAttributeValueSetStorage::find(_ledgerDimension);
            for (int i = 1; i <= dimStorage.elements(); i++)
            {
                result.add(DimensionAttribute::find(dimStorage.getAttributeByIndex(i)).Name, DimensionAttributeValue::find(dimStorage.getValueByIndex(i)).DisplayValue);
            }

            this.addToCache(cacheKey, result);
        }
        else
        {
            result = conPeek(conResult, 1);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxIdFromTaxPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax Id from tax period.
    /// </summary>
    /// <param name = "_taxPeriod">The tax period.</param>
    /// <returns>The tax Id.</returns>
    public TaxRegistrationRecId getTaxIdFromTaxPeriod(TaxPeriod _taxPeriod)
    {
        TaxRegistrationRecId result;
        str cacheKey = TaxIntegrationDocumentObjectContext::CacheKeyTagTaxId + TaxIntegrationTaxServiceConstants::CacheKeyDelimiter + _taxPeriod;

        if (generalCache.exists(cacheKey))
        {
            result = generalCache.lookup(cacheKey);
        }
        else
        {
            result = TaxPeriodHead::find(_taxPeriod).TaxID;
            generalCache.add(cacheKey, result);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNormalizedTaxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets normalized tax group.
    /// </summary>
    /// <param name = "_taxGroup">The original tax group.</param>
    /// <returns>The normalized tax group.</returns>
    public TaxGroup getNormalizedTaxGroup(TaxGroup _taxGroup)
    {
        TaxGroup result;
        str cacheKey = TaxIntegrationDocumentObjectContext::CacheKeyTagTaxGroup + TaxIntegrationTaxServiceConstants::CacheKeyDelimiter + _taxGroup;

        if (generalCache.exists(cacheKey))
        {
            result = generalCache.lookup(cacheKey);
        }
        else
        {
            result = TaxGroupHeading::find(_taxGroup).TaxGroup;
            generalCache.add(cacheKey, result);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNormalizedTaxItemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets normalized tax item group.
    /// </summary>
    /// <param name = "_taxItemGroup">The original tax item group.</param>
    /// <returns>The normalized tax item group.</returns>
    public TaxItemGroup getNormalizedTaxItemGroup(TaxItemGroup _taxItemGroup)
    {
        TaxItemGroup result;
        str cacheKey = TaxIntegrationDocumentObjectContext::CacheKeyTagTaxItemGroup + TaxIntegrationTaxServiceConstants::CacheKeyDelimiter + _taxItemGroup;

        if (generalCache.exists(cacheKey))
        {
            result = generalCache.lookup(cacheKey);
        }
        else
        {
            result = TaxItemGroupHeading::find(_taxItemGroup).TaxItemGroup;
            generalCache.add(cacheKey, result);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxGroupData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>TaxGroupData</c> record.
    /// </summary>
    /// <param name = "_taxGroup">The tax group.</param>
    /// <param name = "_taxCode">The tax code.</param>
    /// <returns>The <c>TaxGroupData</c> record.</returns>
    public TaxGroupData getTaxGroupData(TaxGroup _taxGroup, TaxCode _taxCode)
    {
        TaxGroupData result;
        str cacheKey = _taxGroup + TaxIntegrationTaxServiceConstants::CacheKeyDelimiter + _taxCode;

        if (taxGroupDataCache.exists(cacheKey))
        {
            result = taxGroupDataCache.lookup(cacheKey).getRecord();
        }
        else
        {
            result = TaxGroupData::find(_taxGroup, _taxCode);
            taxGroupDataCache.add(cacheKey, new TaxIntegrationTableRecordWrapper(result));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>TaxTable</c> record.
    /// </summary>
    /// <param name = "_taxCode">The tax code.</param>
    /// <returns>The <c>TaxTable</c> record.</returns>
    public TaxTable getTaxTable(TaxCode _taxCode)
    {
        TaxTable result;

        if (taxTableCache.exists(_taxCode))
        {
            result = taxTableCache.lookup(_taxCode).getRecord();
        }
        else
        {
            result = TaxTable::find(_taxCode);
            taxTableCache.add(_taxCode, new TaxIntegrationTableRecordWrapper(result));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCollectLimitMinMax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets collect limit min and max.
    /// </summary>
    /// <param name = "_taxCode">The tax code.</param>
    /// <param name = "_date">The date.</param>
    /// <returns>The container with Min and Max.</returns>
    public container getCollectLimitMinMax(TaxCode _taxCode, TransDate _date)
    {
        str cacheKey = _taxCode + TaxIntegrationTaxServiceConstants::CacheKeyDelimiter + any2Str(_date);
        container result;

        if (taxCollectLimitMinMaxCache.exists(cacheKey))
        {
            result = taxCollectLimitMinMaxCache.lookup(cacheKey);
        }
        else
        {
            TaxAmount taxMin = TaxCollectLimit::taxMin(_taxCode, _date);
            TaxAmount taxMax = TaxCollectLimit::taxMax(_taxCode, _date);

            result = [taxMin, taxMax];
            taxCollectLimitMinMaxCache.add(cacheKey, result);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentTransactionAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total document transaction amount per order.
    /// </summary>
    /// <param name = "_headerTableId">The TableId of document table.</param>
    /// <param name = "_headerRecId">The RecId of document table.</param>
    /// <returns>The total transaction amount of a specific document table.</returns>
    [SysObsolete("The method has been deprecated use getDocumentLineAmount instead", false, 28\2\2024)]
    public LineAmount getDocumentTransactionAmount(RefTableId _headerTableId, RefRecId _headerRecId)
    {
        str cacheKey = any2Str(_headerTableId) + TaxIntegrationTaxServiceConstants::CacheKeyDelimiter + any2Str(_headerRecId);
        LineAmount result = 0;

        if (documentTotalLineAmountCache.exists(cacheKey))
        {
            result = documentTotalLineAmountCache.lookup(cacheKey);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentTotalLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total document line amount per order.
    /// </summary>
    /// <param name = "_headerTableId">The TableId of document table.</param>
    /// <param name = "_headerRecId">The RecId of document table.</param>
    /// <returns>The total line amount of a specific document table.</returns>
    internal LineAmount getDocumentTotalLineAmount(RefTableId _headerTableId, RefRecId _headerRecId)
    {
        str cacheKey = any2Str(_headerTableId) + TaxIntegrationTaxServiceConstants::CacheKeyDelimiter + any2Str(_headerRecId);
        LineAmount result = 0;

        if (documentTotalLineAmountCache.exists(cacheKey))
        {
            result = documentTotalLineAmountCache.lookup(cacheKey);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDocumentTransactionAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add current line amount to the total document transaction amount per order.
    /// </summary>
    /// <param name = "_headerTableId">The TableId of document table.</param>
    /// <param name = "_headerRecId">The RecId of document table.</param>
    /// <param name = "_lineAmount">The line amount to add.</param>
    [SysObsolete("The method has been deprecated use addDocumentLineAmount instead", false, 28\2\2024)]
    public void addDocumentTransactionAmount(RefTableId _headerTableId, RefRecId _headerRecId, LineAmount _lineAmount)
    {
        str cacheKey = any2Str(_headerTableId) + TaxIntegrationTaxServiceConstants::CacheKeyDelimiter + any2Str(_headerRecId);
        LineAmount lineAmount = this.getDocumentTransactionAmount(_headerTableId, _headerRecId);
        lineAmount += _lineAmount;
        documentTotalLineAmountCache.insert(cacheKey, lineAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDocumentTotalLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add current line amount to the total document line amount per order.
    /// </summary>
    /// <param name = "_headerTableId">The TableId of document table.</param>
    /// <param name = "_headerRecId">The RecId of document table.</param>
    /// <param name = "_lineAmount">The line amount to add.</param>
    internal void addDocumentTotalLineAmount(RefTableId _headerTableId, RefRecId _headerRecId, LineAmount _lineAmount)
    {
        str cacheKey = any2Str(_headerTableId) + TaxIntegrationTaxServiceConstants::CacheKeyDelimiter + any2Str(_headerRecId);
        LineAmount totalLineAmount = this.getDocumentTotalLineAmount(_headerTableId, _headerRecId);
        totalLineAmount += _lineAmount;
        documentTotalLineAmountCache.insert(CacheKey, totalLineAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>VendParameters</c>.
    /// </summary>
    /// <returns>The <c>VendParameters</c>.</returns>
    public VendParameters getVendParameters()
    {
        if (!vendParameters)
        {
             this.vendParameters = VendParameters::find();
        }

        return this.vendParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>Ledger</c>.
    /// </summary>
    /// <returns>The <c>Ledger</c>.</returns>
    public Ledger getLedger()
    {
        if (!ledger)
        {
            this.ledger = Ledger::findByLegalEntity(CompanyInfo::current());
        }

        return this.ledger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>