<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdReport_Balance</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract public class ProdReport_Balance extends RunBase
{
    TmpProdBalance     tmpProdBalance;

    // Packed variables
    TransDate fromDate;
    TransDate toDate;

    DialogField     dialogFromDate;
    DialogField     dialogToDate;
    DialogRunbase   dialog;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        FromDate,
        ToDate
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcData</Name>
				<Source><![CDATA[
    TmpProdBalance calcData()
    {
        delete_from tmpProdBalance;
        this.updatePosting();
        return this.tmpProdBalance();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDataSRS</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets all the records from the <c>tmpProdBalance</c> temporary table.
    /// </summary>
    /// <param name="_fromDate">
    ///    The date from which to get the data.
    /// </param>
    /// <param name="_toDate">
    ///    The date to which to get the data.
    /// </param>
    /// <param name="_perPostingType">
    ///    A <c>NoYes</c> enumeration value.
    /// </param>
    /// <returns>
    ///    The records from the <c>tmpProdBalance</c> table.
    /// </returns>
    public TmpProdBalance calcDataSRS(date _fromDate,date _toDate,NoYes  _perPostingType = NoYes::No)
    {
        delete_from tmpProdBalance;
        this.updatePostingSRS(_fromDate,_toDate,_perPostingType);
        select * from tmpProdBalance order by tmpProdBalance.LedgerDimension asc,
            tmpProdBalance.Posting asc,tmpProdBalance.DateFinancial asc ;
        return tmpProdBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCalcFromProdRouteTrans</Name>
				<Source><![CDATA[
    void createCalcFromProdRouteTrans(ProdRouteTrans prodRouteTrans)
    {
        tmpProdBalance.WrkCtrNum       = prodRouteTrans.WrkCtrId;
        tmpProdBalance.ProdUnitId      = prodRouteTrans.ProdUnitId;
        tmpProdBalance.DateFinancial   = prodRouteTrans.DateCalc;
        tmpProdBalance.Voucher         = prodRouteTrans.VoucherCalc;
        tmpProdBalance.PostedValue     = prodRouteTrans.Amount;

        tmpProdBalance.LedgerDimension = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(prodRouteTrans.wipIssueLedgerDimension);

        tmpProdBalance.Posting         = prodRouteTrans.PostingWIPIssue;
        this.insertTmpProdBalance(tmpProdBalance);

        tmpProdBalance.PostedValue     = -prodRouteTrans.Amount;

        tmpProdBalance.LedgerDimension = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(prodRouteTrans.wipValuationLedgerDimension);
        tmpProdBalance.Posting         = prodRouteTrans.PostingWIPValuation;

        this.insertTmpProdBalance(tmpProdBalance);

        tmpProdBalance.PostedValue      = prodRouteTrans.Amount;
        tmpProdBalance.LedgerDimension  = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(prodRouteTrans.IssueOffsetLedgerDimension);
        tmpProdBalance.Posting          = prodRouteTrans.PostingCalcIssueOffset;
        this.insertTmpProdBalance(tmpProdBalance);

        tmpProdBalance.PostedValue     = -prodRouteTrans.Amount;
        tmpProdBalance.LedgerDimension = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(prodRouteTrans.IssueLedgerDimension);
        tmpProdBalance.Posting         = prodRouteTrans.PostingCalcIssue;
        this.insertTmpProdBalance(tmpProdBalance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCalcFromProdRouteTransSRS</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Assinging the data into tmpprodbalance table
    /// </summary>
    /// <param name="prodRouteTrans">
    ///    prodRouteTrans table
    /// </param>
    /// <param name="_perPostingType">
    ///    posting type - yes or no
    /// </param>
    public void createCalcFromProdRouteTransSRS(ProdRouteTrans prodRouteTrans,NoYes  _perPostingType = NoYes::No)
    {
        tmpProdBalance.WrkCtrNum       = prodRouteTrans.WrkCtrId;
        tmpProdBalance.ProdUnitId      = prodRouteTrans.ProdUnitId;
        tmpProdBalance.DateFinancial   = prodRouteTrans.DateCalc;
        tmpProdBalance.Voucher         = prodRouteTrans.VoucherCalc;
        tmpProdBalance.PostedValue     = prodRouteTrans.Amount;
        tmpProdBalance.LedgerDimension = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(prodRouteTrans.wipIssueLedgerDimension);
        tmpProdBalance.Posting         = prodRouteTrans.PostingWIPIssue;
        this.insertTmpProdBalanceSRS(tmpProdBalance,_perPostingType);

        tmpProdBalance.PostedValue     = -prodRouteTrans.Amount;

        tmpProdBalance.LedgerDimension = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(prodRouteTrans.wipValuationLedgerDimension);
        tmpProdBalance.Posting         = prodRouteTrans.PostingWIPValuation;
        this.insertTmpProdBalanceSRS(tmpProdBalance,_perPostingType);

        tmpProdBalance.PostedValue     = prodRouteTrans.Amount;
        tmpProdBalance.LedgerDimension = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(prodRouteTrans.IssueOffsetLedgerDimension);
        tmpProdBalance.Posting         = prodRouteTrans.PostingCalcIssueOffset;
        this.insertTmpProdBalanceSRS(tmpProdBalance,_perPostingType);

        tmpProdBalance.PostedValue     = -prodRouteTrans.Amount;
        tmpProdBalance.LedgerDimension = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(prodRouteTrans.IssueLedgerDimension);
        tmpProdBalance.Posting         = prodRouteTrans.PostingCalcIssue;
        this.insertTmpProdBalanceSRS(tmpProdBalance,_perPostingType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWIPFromProdRouteTrans</Name>
				<Source><![CDATA[
    void createWIPFromProdRouteTrans(ProdRouteTrans prodRouteTrans)
    {
        tmpProdBalance.WrkCtrNum       = prodRouteTrans.WrkCtrId;
        tmpProdBalance.ProdUnitId      = prodRouteTrans.ProdUnitId;
        tmpProdBalance.DateFinancial   = prodRouteTrans.DateWIP;
        tmpProdBalance.Voucher         = prodRouteTrans.VoucherWIP;
        tmpProdBalance.PostedValue     = prodRouteTrans.Amount;

        tmpProdBalance.LedgerDimension = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(prodRouteTrans.wipValuationLedgerDimension);
        tmpProdBalance.Posting         = prodRouteTrans.PostingWIPValuation;
        this.insertTmpProdBalance(tmpProdBalance);

        tmpProdBalance.PostedValue     = -prodRouteTrans.Amount;
        tmpProdBalance.LedgerDimension = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(prodRouteTrans.wipIssueLedgerDimension);
        tmpProdBalance.Posting         = prodRouteTrans.PostingWIPIssue;
        this.insertTmpProdBalance(tmpProdBalance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWIPFromProdRouteTransSRS</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Assinging the data into tmpprodbalance table
    /// </summary>
    /// <param name="prodRouteTrans">
    ///    prodRouteTrans table
    /// </param>
    /// <param name="_perPostingType">
    ///    posting type - yes or no
    /// </param>
    public void createWIPFromProdRouteTransSRS(ProdRouteTrans prodRouteTrans,NoYes  _perPostingType = NoYes::No)
    {
        tmpProdBalance.WrkCtrNum       = prodRouteTrans.WrkCtrId;
        tmpProdBalance.ProdUnitId      = prodRouteTrans.ProdUnitId;
        tmpProdBalance.DateFinancial   = prodRouteTrans.DateWIP;
        tmpProdBalance.Voucher         = prodRouteTrans.VoucherWIP;
        tmpProdBalance.PostedValue     = prodRouteTrans.Amount;
        tmpProdBalance.LedgerDimension = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(prodRouteTrans.wipValuationLedgerDimension);
        tmpProdBalance.Posting         = prodRouteTrans.PostingWIPValuation;
        this.insertTmpProdBalanceSRS(tmpProdBalance,_perPostingType);

        tmpProdBalance.PostedValue     = -prodRouteTrans.Amount;
        tmpProdBalance.LedgerDimension = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(prodRouteTrans.wipIssueLedgerDimension);
        tmpProdBalance.Posting         = prodRouteTrans.PostingWIPIssue;
        this.insertTmpProdBalanceSRS(tmpProdBalance,_perPostingType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog(DialogRunbase  _dialog = dialog)
    {
        dialogFromDate  = _dialog.addFieldValue(extendedtypestr(FromDate), fromDate);
        dialogToDate    = _dialog.addFieldValue(extendedtypestr(ToDate), toDate);

        return _dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        fromDate            = dialogFromDate.value();
        toDate              = dialogToDate.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables.
    /// </summary>
    /// <remarks>
    ///    This method is called when no <c>SysLastValue</c> record can be found when calling the
    ///    <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    void initParmDefault()
    {
        toDate          = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpProdBalance</Name>
				<Source><![CDATA[
    void insertTmpProdBalance(TmpProdBalance _tmpProdBalance)
    {
        if (_tmpProdBalance.PostedValue)
            _tmpProdBalance.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpProdBalanceSRS</Name>
				<Source><![CDATA[
    /// <summary>
    ///    checking if there is any posted value and inserting the data into tmpprodbalance
    /// </summary>
    /// <param name="_tmpProdBalance">
    ///    tmpProdBalance table
    /// </param>
    /// <param name="_perPostingType">
    ///    posting type - yes or no
    /// </param>
    public void insertTmpProdBalanceSRS(TmpProdBalance _tmpProdBalance,NoYes  _perPostingType = NoYes::No)
    {
        if (_tmpProdBalance.PostedValue)
            _tmpProdBalance.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    TransDate parmToDate(TransDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpProdBalance</Name>
				<Source><![CDATA[
    TmpProdBalance tmpProdBalance()
    {
        return tmpProdBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        container       base;
        boolean         ret;
        Integer         version     = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, base] = packedClass;
                ret = true;
                break;
            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePosting</Name>
				<Source><![CDATA[
    void updatePosting()
    {
        ProdRouteTrans       prodRouteTrans;

        while select prodRouteTrans
            index hint WIPDateVoucherIdx
            where prodRouteTrans.DateWIP     >= fromDate     &&
                  prodRouteTrans.DateWIP     <= toDate
        {
            this.createWIPFromProdRouteTrans(prodRouteTrans);
        }

        while select prodRouteTrans
            index hint CalcDateVoucherIdx
            where prodRouteTrans.DateCalc     >= fromDate     &&
                  prodRouteTrans.DateCalc     <= toDate       &&
                  prodRouteTrans.Calculated   == NoYes::Yes
        {
            this.createCalcFromProdRouteTrans(prodRouteTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePostingSRS</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Selects data from the <c>ProdRouteTrans</c> table.
    /// </summary>
    /// <param name="_fromDate">
    ///    The date from which to get the data.
    /// </param>
    /// <param name="_toDate">
    ///    The to date.
    /// </param>
    /// <param name="_perPostingType">
    ///    A <c>NoYes</c> enumeration value that indicates the posting type; optional.
    /// </param>
    public void updatePostingSRS(date _fromDate,date _toDate,NoYes  _perPostingType = NoYes::No)
    {
        ProdRouteTrans       prodRouteTrans;

        while select prodRouteTrans
            index hint WIPDateVoucherIdx
            where prodRouteTrans.DateWIP     >= _fromDate     &&
                  prodRouteTrans.DateWIP     <= _toDate
        {
            this.createWIPFromProdRouteTransSRS(prodRouteTrans,_perPostingType);
        }

        while select prodRouteTrans
            index hint CalcDateVoucherIdx
            where prodRouteTrans.DateCalc     >= _fromDate     &&
                  prodRouteTrans.DateCalc     <= _toDate       &&
                  prodRouteTrans.Calculated   == NoYes::Yes
        {
            this.createCalcFromProdRouteTransSRS(prodRouteTrans,_perPostingType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate(Object _calledFrom = null)
    {
        if (fromDate > toDate && toDate)
        {
            return checkFailed("@SYS104511");
        }
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>