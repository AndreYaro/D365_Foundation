<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsAutoCreateLoadLinePurch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSAutoCreateLoadLinePurch</c> is responisble for creating load lines automatically for purch lines.
/// </summary>
[WHSAutoCreateLoadLineAttribute(tableStr(PurchLine))]
class WhsAutoCreateLoadLinePurch extends WhsAutoCreateLoadLineInboundShipment
{
    PurchLine   purchLine;

    private boolean forceCreate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>autoCreateLoadLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a load line for a purchase line.
    /// </summary>
    public void autoCreateLoadLine()
    {
        this.autoCreateInboundLoadLine(purchLine, InventTransType::Purch);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBuffer</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WhsAutoCreateLoadLinePurch newFromBuffer(PurchLine _purchLine, boolean _forceCreate = false)
    {
        var autoCreateLoad = new WhsAutoCreateLoadLinePurch();
        autoCreateLoad.initFromBuffer(_purchLine);
        autoCreateLoad.forceCreate = _forceCreate;
        return autoCreateLoad;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBuffer</Name>
				<Source><![CDATA[
    protected void initFromBuffer(Common _common)
    {
        if (!(_common is PurchLine))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        purchLine = _common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldAutoCreateLoadLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether or not a load line should be created automatically for a given purchase order line
    /// </summary>
    /// <returns>
    /// Returns a flag that indicates if the load line should be automatically generated
    /// </returns>
    protected boolean shouldAutoCreateLoadLine()
    {
        boolean         ret;
        boolean         whsEnabled;
        boolean         tmsEnabled;

        ret = purchLine.PurchQty > 0;

        if (ret)
        {
            whsEnabled = WHSInventEnabled::exist(purchLine.ItemId);
            tmsEnabled = TMSInventEnabled::exist(purchLine.ItemId);

            ret = forceCreate
                || (whsEnabled && WHSParameters::find().AutoCreateLoadPO) 
                || (tmsEnabled && TMSParameters::find().AutoCreateLoadPO);

            ret = ret && this.checkInventDim(purchLine.inventDim());

            if (ret
              && PurchParameters::find().ChangeRequestEnabled 
              && purchLine.purchTable().DocumentState == VersioningDocumentState::Draft)
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadTemplateId</Name>
				<Source><![CDATA[
    internal WHSLoadTemplateId loadTemplateId()
    {
        WHSLoadTemplateId loadTemplateId = this.findLoadTemplateId(TMSPurchTable::find(purchLine.PurchId).TransportationTemplateId, purchLine.ItemId);
        return loadTemplateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPaysFreight</Name>
				<Source><![CDATA[
    internal TMSLoadPaysFreight loadPaysFreight()
    {
        TMSLoadPaysFreight loadPaysFreight = TMSDlvTerm::find(PurchTable::find(purchLine.PurchId).DlvTerm).TransferChargesToOrder;
        return loadPaysFreight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInboundLineToShipment</Name>
				<Source><![CDATA[
    internal WHSShipmentId addInboundLineToShipment(WHSLoadTable _loadTable)
    {
        WHSShipmentId shipmentId = _loadTable.addPurchLineToShipment(purchLine);
        return shipmentId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>