<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailDocumentOperationMonitorBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailDocumentOperationMonitorBatch</c> class is used to monitor operations to detect operation which is terminated unexpected or exceeds processing/committed timeout.
/// </summary>
internal class RetailDocumentOperationMonitorBatch extends SysOperationServiceController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a RetailDocumentOperationMonitorBatch. RetailDocumentOperationMonitorBatch is used to execute monitorOperations.
    /// </summary>
    /// <param name="_executionMode">
    /// The execution mode to use when executing the service operation.
    /// </param>
    public void new(SysOperationExecutionMode _executionMode = SysOperationExecutionMode::ScheduledBatch)
    {
        super();
        this.parmClassName(classStr(RetailDocumentOperationMonitorBatch));
        this.parmMethodName(methodStr(RetailDocumentOperationMonitorBatch, monitorOperations));
        this.parmExecutionMode(_executionMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Conveys whether the job must be run in batch.
    /// </summary>
    /// <returns>Always returns true.</returns>
    public boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>monitorOperations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Query all operation instances in Processing and Committed status. Use app lock to detect if these operations are terminated unexpectedly.
    /// </summary>
    public void monitorOperations()
    {
        RetailDocumentOperation retailDocumentOperationTable;
        RetailDocumentOperationConfigurationManager configManager = RetailDocumentOperationConfigurationManager::instance;

        utcdatetime monitoredOperationsStartTime = DateTimeUtil::addSeconds(DateTimeUtil::utcNow(), -configManager.getMinimumOperationRuntimeTimeToMonitorSeconds());

        int64 queuedNumber = RetailDocumentOperationService::getOperationNumberByStatus(RetailDocumentOperationStatus::Queued);
        RetailDocumentOperationLogger::logNumberOfOperationsByStatus(RetailDocumentOperationStatus::Queued, queuedNumber);
        int64 errorNumber = RetailDocumentOperationService::getOperationNumberByStatus(RetailDocumentOperationStatus::RetriableError);
        RetailDocumentOperationLogger::logNumberOfOperationsByStatus(RetailDocumentOperationStatus::RetriableError, errorNumber);
        int64 noneNumber = RetailDocumentOperationService::getOperationNumberByStatus(RetailDocumentOperationStatus::None);
        RetailDocumentOperationLogger::logNumberOfOperationsByStatus(RetailDocumentOperationStatus::None, noneNumber);

        // check all operation in processing status
        while select retailDocumentOperationTable
            order by retailDocumentOperationTable.CommittedDateTime ASC
            where retailDocumentOperationTable.Status == RetailDocumentOperationStatus::Processing  && retailDocumentOperationTable.StartDateTime <= monitoredOperationsStartTime
        {
            if (RetailDocumentOperationService::isOperationTerminated(retailDocumentOperationTable.RecId))
            {
                RetailDocumentOperationService::updateOperationToRetriableError(retailDocumentOperationTable.RecId, RetailDocumentOperationProcessingErrorCode::UnexpectedTerminated);
                continue;
            }

            if (RetailDocumentOperationService::isProcessingTimeout(retailDocumentOperationTable))
            {
                //log timeout error
                RetailDocumentOperationLogger::logOperationError(retailDocumentOperationTable.RequestId,
                                                                 retailDocumentOperationTable.RecId,
                                                                 retailDocumentOperationTable.OperationName,
                                                                 RetailDocumentOperationProcessingErrorCode::ProcessingTimeout);
            }
        }

        while select retailDocumentOperationTable
            order by retailDocumentOperationTable.CommittedDateTime ASC
            where retailDocumentOperationTable.Status == RetailDocumentOperationStatus::Committed
        {
            if (RetailDocumentOperationService::isCommittedTimeout(retailDocumentOperationTable))
            {
                // in case, the operation got picked up during the monitor service is executing, so need to check app lock again
                using (ReqReaderWriterLock innerLock = ReqReaderWriterLock::construct())
                {
                    str operationAppLockName = int642Str(retailDocumentOperationTable.RecId);
                    if (innerLock.tryEnterUpdateLock(operationAppLockName))
                    {
                        RetailDocumentOperationLogger::logOperationMessage(retailDocumentOperationTable.RequestId,
                                                                   retailDocumentOperationTable.RecId,
                                                                   retailDocumentOperationTable.OperationName,
                                                                   'Successfully got app lock for committed timeout monitor');
                        RetailDocumentOperationService::updateOperationToRetriableError(retailDocumentOperationTable.RecId, RetailDocumentOperationProcessingErrorCode::CommittedTimeout);
                    }
                    else
                    {
                        RetailDocumentOperationLogger::logOperationMessage(retailDocumentOperationTable.RequestId,
                                                                   retailDocumentOperationTable.RecId,
                                                                   retailDocumentOperationTable.OperationName,
                                                                   'Failed to get app lock for committed timeout monitor');
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SysOperationServiceController controller = new RetailDocumentOperationMonitorBatch();

        if (controller.prompt())
        {
            controller.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>