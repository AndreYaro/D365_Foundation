<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRCatalogAreaAnalysisDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>MCRCatalogAreaAnalysisDP</c> class is the Report Data Provider class that supports the
///    <c>MCRCatalogAreaAnalysis</c> report.
/// </summary>
/// <remarks>
///    This class provides the methods that are used by the <c>MCRCatalogAreaAnalysis</c> report.
/// </remarks>
[
    SRSReportQueryAttribute(querystr(MCRCatalogAreaAnalysis)),
    SRSReportParameterAttribute(classstr(MCRCatalogAreaAnalysisContract))
]
public class MCRCatalogAreaAnalysisDP extends SRSReportDataProviderBase
{
    const int                       secondsInDay = 86400;
    Catalog                         catalog;
    MCRCatalogPage                  mcrCatalogPage;
    MCRCatalogProductPage           mcrCatalogProductPage;
    MCRCatalogAreaAnalysisTmp       mcrCatalogAreaAnalysisTmp;
    InventTable                     inventTable;
    utcdatetime                     fromDateTime;
    utcdatetime                     toDateTime;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>catalogName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catalog name.
    /// </summary>
    /// <param name="_refRecId">
    /// The catalog record Id.
    /// </param>
    /// <returns>
    /// The name of the catalog.
    /// </returns>
    public Name catalogName(RefRecId _refRecId)
    {
        SystemLanguageId    systemLanguageId;
        CatalogTranslation  catalogTranslation;

        systemLanguageId = SystemParameters::getSystemLanguageId();

        select firstonly FriendlyName from catalogTranslation
            where catalogTranslation.Language == systemLanguageId
                && catalogTranslation.Catalog == _refRecId;

        return catalogTranslation.FriendlyName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMCRCatalogAreaAnalysisTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the actual data for the report from the temporary table.
    /// </summary>
    /// <returns>
    ///    The <c>MCRCatalogAreaAnalysisTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(MCRCatalogAreaAnalysisTmp))
    ]
    public MCRCatalogAreaAnalysisTmp getMCRCatalogAreaAnalysisTmp()
    {
        select  mcrCatalogAreaAnalysisTmp;

        return  mcrCatalogAreaAnalysisTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertMCRCatalogAreaAnalysisTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the <c>MCRCatalogAreaAnalysisTmp</c> temporary table.
    /// </summary>
    private void insertMCRCatalogAreaAnalysisTmp()
    {
        Percent         percentOfPage;
        AmountMST       cost;
        AmountMST       sales;

        mcrCatalogAreaAnalysisTmp.clear();

        percentOfPage =  mcrCatalogProductPage.PercentOfPage / 100;
        cost = this.itemPrice(ModuleInventPurchSales::Invent);
        sales = this.itemPrice(ModuleInventPurchSales::Sales);

        mcrCatalogAreaAnalysisTmp.CatalogName = this.catalogName(catalog.RecId);
        mcrCatalogAreaAnalysisTmp.PageNum = mcrCatalogPage.PageNum;
        mcrCatalogAreaAnalysisTmp.PagePosition = mcrCatalogProductPage.PagePosition;
        mcrCatalogAreaAnalysisTmp.Cost = cost;
        mcrCatalogAreaAnalysisTmp.Retail = sales;
        mcrCatalogAreaAnalysisTmp.ItemId = inventTable.ItemId;
        mcrCatalogAreaAnalysisTmp.ItemName = InventTable::findByProduct(inventTable.product).itemName();
        mcrCatalogAreaAnalysisTmp.Quantity = this.salesQuantity();
        mcrCatalogAreaAnalysisTmp.Sales = this.salesQuantity() * sales;
        mcrCatalogAreaAnalysisTmp.PercentOfPage = percentOfPage;
        mcrCatalogAreaAnalysisTmp.CogsDollars = this.salesQuantity() * cost;
        mcrCatalogAreaAnalysisTmp.GrossMargin = this.salesQuantity() * (sales  - cost);

        //Avoid division by zero
        if (sales == 0)
        {
            mcrCatalogAreaAnalysisTmp.CogsPercent = 0;
        }
        else
        {
            mcrCatalogAreaAnalysisTmp.CogsPercent = cost / sales;
        }

        mcrCatalogAreaAnalysisTmp.SpaceCostDollars = percentOfPage * mcrCatalogPage.PageCost;
        mcrCatalogAreaAnalysisTmp.Contribution = (this.salesQuantity() * sales) - (percentOfPage * mcrCatalogPage.PageCost);

        mcrCatalogAreaAnalysisTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the item.
    /// </summary>
    /// <param name="_moduleInventPurchSales">
    /// The module type of the item.
    /// </param>
    /// <returns>
    /// Either the cost or sales price of the item.
    /// </returns>
    public Price itemPrice(ModuleInventPurchSales _moduleInventPurchSales)
    {
        InventTableModule       inventTableMoudle;

        select firstonly Price from inventTableMoudle
            where inventTableMoudle.ItemId == inventTable.ItemId
                && inventTableMoudle.ModuleType == _moduleInventPurchSales;

        return inventTableMoudle.Price;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the business logic for the <c>MCRCatalogAreaAnalysis</c> report.
    /// </summary>
    public void processReport()
    {
        MCRCatalogAreaAnalysisContract contract;
        contract = this.parmDataContract() as MCRCatalogAreaAnalysisContract;

        toDateTime = DateTimeUtil::newDateTime(contract.parmToDate(), secondsInDay - 1, DateTimeUtil::getUserPreferredTimeZone());
        fromDateTime = DateTimeUtil::newDateTime(contract.parmFromDate(), 0, DateTimeUtil::getUserPreferredTimeZone());

        QueryRun    queryRun;
        queryRun = new QueryRun(this.parmQuery());

        while (queryRun.next())
        {
            catalog = queryRun.get(tableNum(Catalog));
            mcrCatalogPage = queryRun.get(tableNum(mcrCatalogPage));
            mcrCatalogProductPage = queryRun.get(tableNum(MCRCatalogProductPage));
            inventTable = queryRun.get(tableNum(InventTable));

            this.insertMCRCatalogAreaAnalysisTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sales quantity of the item.
    /// </summary>
    /// <returns>
    /// The sales quantity of the item, otherwise zero.
    /// </returns>
    public SalesQty salesQuantity()
    {
        MCRSourceCodeSetup  mcrSourceCodeSetup;
        SalesLine           salesLine;
        MCRSalesLine        mcrSalesLine;

        select SourceId from mcrSourceCodeSetup
            Where mcrSourceCodeSetup.Catalog == mcrCatalogProductPage.Catalog;

        //if the Source id does exist, gets the sales quantity.
        if (mcrSourceCodeSetup.SourceId)
        {
            select sum(salesQty) from salesLine
                    where salesLine.CreatedDateTime >= fromDateTime && salesLine.CreatedDateTime <= toDateTime
                exists join mcrSalesLine
                    where salesLine.Recid == MCRSalesLine.SalesLine
                exists join inventTable
                    where inventTable.ItemId == salesLine.ItemId
                        && inventTable.product == mcrCatalogProductPage.Product;
        }

        return salesLine.salesQty;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>