<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailReturnPolicyHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper for applying policy to inventory dimensions.
/// </summary>
abstract class RetailReturnPolicyHelper
{
    RefRecId                retailStoreTableRecId;
    ItemId                  itemId;
    RefRecId                policyRefRecId;
    RetailReturnPolicyLine  retailReturnPolicyLine;
    boolean                 isBlocked;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>apply</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies return policy to inventory dimensions.
    /// </summary>
    /// <param name="_lineInventDimId">
    /// Original inventory dimension id.
    /// </param>
    /// <returns>
    /// True if policy applied; otherwise false.
    /// </returns>
    public abstract boolean apply(InventDimId _lineInventDimId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimFromStore</Name>
				<Source><![CDATA[
        private InventDim getInventDimFromStore()
    {
        InventDim       inventDim;
        InventLocation  inventLocation = RetailStoretable::findInventlocation(retailStoreTableRecId);

        inventDim.initFromInventLocation(inventLocation);
        inventDim.inventLocationId = inventLocation.InventLocationId;

        return InventDim::findOrCreate(inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMergedInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates original InventDim due to return policy.
    /// </summary>
    /// <param name="_lineInventDimId">
    /// Source invent dimension id.
    /// </param>
    /// <param name="_allowGenerateFromStore">
    /// Determines create InventDim from store warehouse if _lineInventDimId parm is empty or not create.
    /// </param>
    /// <returns>
    /// Updated InventDim id.
    /// </returns>
    public InventDimId getMergedInventDimId(InventDimId _lineInventDimId, boolean _allowGenerateFromStore = false)
    {
        InventDim               lineInventDim;
        InventDimGroupSetup     inventDimGroupSetup = InventDimGroupSetup::newItemId(itemId);
        WMSLocationId           wmsLocationId;
        RetailReturnPolicy      retailReturnPolicy;
        InventLocation          lineInventLocation,
                                policyInventLocation;
        InventLocationId        inventLocationId;
        WMSPalletId             wmsPalletId;

        if (_lineInventDimId)
        {
            lineInventDim = InventDim::find(_lineInventDimId);
        }
        else if (_allowGenerateFromStore)
        {
            lineInventDim = this.getInventDimFromStore();
        }

        lineInventLocation  = lineInventDim.inventLocation();

        if (retailReturnPolicyLine)
        {
            inventLocationId    = retailReturnPolicyLine.InventLocationId;
            policyInventLocation = InventLocation::find(RetailReturnPolicyLine.InventLocationId);

            if (!retailReturnPolicyLine.WMSLocationId)
            {
                wmsLocationId = policyInventLocation.RetailWMSLocationIdDefaultReturn;
            }
            else
            {
                wmsLocationId = retailReturnPolicyLine.WMSLocationId;
            }

            if (!retailReturnPolicyLine.wMSPalletId)
            {
                wmsPalletId = policyInventLocation.RetailWMSPalletIdDefaultReturn;
            }
            else
            {
                wmsPalletId = retailReturnPolicyLine.wMSPalletId;
            }

            isBlocked = retailReturnPolicyLine.BlockItem;
        }
        // find default return location for warehouse
        else if (lineInventLocation.InventLocationId)
        {
            retailReturnPolicy = RetailReturnPolicy::find(policyRefRecId);
            if (retailReturnPolicy)
            {
                inventLocationId    = lineInventLocation.InventLocationId;
                wmsLocationId       = lineInventLocation.RetailWMSlocationIdDefaultReturn;
                wmsPalletId         = lineInventLocation.RetailWMSPalletIdDefaultReturn;
                isBlocked           = retailReturnPolicy.BlockInDefaultReturnLocation;
            }
        }

        if (inventLocationId)
        {
            lineInventDim.initFromInventLocation(InventLocation::find(inventLocationId));
            lineInventDim.InventLocationId = inventLocationId;

            // If WMSLocation dimension isn't active don't change it
            if (inventDimGroupSetup.isDimensionActive(fieldNum(inventDim, WMSLocationId)))
            {
                lineInventDim.WMSLocationId = wmsLocationId;
            }

            // If wMSPalletId dimension isn't active don't change it
            if (inventDimGroupSetup.isDimensionActive(fieldNum(inventDim, wMSPalletId)))
            {
                lineInventDim.wMSPalletId = wmsPalletId;
            }

            return InventDim::findOrCreate(lineInventDim).inventDimId;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRetailStoreTableRecIdAndItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits class from <c>RetailStoreTable</c> record RecId and <c>InventTable</c> record ItemId.
    /// </summary>
    /// <param name="_retailStoreTableRecId">
    /// <c>RetailStoreTable</c> record RecId.
    /// </param>
    /// <param name="_itemId">
    /// <c>InventTable</c> record ItemId.
    /// </param>
    protected void initFromRetailStoreTableRecIdAndItemId(RefRecId _retailStoreTableRecId, ItemId _itemId)
    {
        retailStoreTableRecId   = _retailStoreTableRecId;
        itemId                  = _itemId;
        policyRefRecId          = RetailAttributesLegalEntityLookup::findReturnPolicyByCategory(EcoResProductCategory::findRetailCategoryByItem(_itemId)).ReturnPolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>policyPrintLabels</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines print return labels or not.
    /// </summary>
    /// <returns>
    /// True if flag <c>PolicyPrintLabels</c> is checked; otherwise false.
    /// </returns>
    public boolean policyPrintLabels()
    {
        return (select firstOnly RecId from retailReturnPolicy
            where retailReturnPolicy.RecId                == policyRefRecId
               && retailReturnPolicy.PolicyPrintLabels    == NoYes::Yes).RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>