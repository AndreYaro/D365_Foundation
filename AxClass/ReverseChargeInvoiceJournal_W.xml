<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReverseChargeInvoiceJournal_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///   The class <c>ReverseChargeInvoiceJournal_W</c> contains logic of appliyng reverse charge tax groups to GL journal lines.
///   The class used only for invoices in daily journal or vendor invoice journal.
/// </summary>
public class ReverseChargeInvoiceJournal_W extends ReverseCharge_W
{
    private LedgerJournalTrans  ledgerJournalTransHeader,  //is the last header for current voucher, detached from datasource
                                ledgerJournalTrans; //current datasource cursor

    private LedgerJournalTable  ledgerJournalTable;

    private ReverseChargeDocumentType_W documentType;

    private Voucher             lastVoucher;
    private TransDate           lastTransDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>custVendAccountModified</Name>
				<Source><![CDATA[
    private boolean custVendAccountModified()
    {
        if ((ledgerJournalTrans.Invoice &&
        (ledgerJournalTrans.AccountType == LedgerJournalACType::Cust ||
         ledgerJournalTrans.AccountType == LedgerJournalACType::Vend) &&
         ledgerJournalTrans.LedgerDimension != ledgerJournalTrans.orig().LedgerDimension) ||
       ((ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Cust ||
         ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend) &&
         ledgerJournalTrans.OffsetLedgerDimension != ledgerJournalTrans.orig().OffsetLedgerDimension))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentType</Name>
				<Source><![CDATA[
    protected ReverseChargeDocumentType_W documentType()
    {
        return documentType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerChanged</Name>
				<Source><![CDATA[
    protected void headerChanged()
    {
        super();

        //for unsaved ledgerJournalTrans must take current value
        if (ledgerJournalTrans.Invoice &&
            (ledgerJournalTrans.AccountType       == LedgerJournalACType::Cust ||
            ledgerJournalTrans.AccountType       == LedgerJournalACType::Vend ||
            ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Cust ||
            ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend))
        {
            ledgerJournalTransHeader = ledgerJournalTrans.data();
        }
        else
        {
            select firstOnly ledgerJournalTransHeader
                where ledgerJournalTransHeader.Voucher == ledgerJournalTrans.Voucher         &&
                    ledgerJournalTransHeader.TransDate == ledgerJournalTrans.TransDate       &&
                    ledgerJournalTransHeader.Invoice                                         &&
                   (ledgerJournalTransHeader.AccountType       == LedgerJournalACType::Cust  ||
                    ledgerJournalTransHeader.AccountType       == LedgerJournalACType::Vend  ||
                    ledgerJournalTransHeader.OffsetAccountType == LedgerJournalACType::Cust  ||
                    ledgerJournalTransHeader.OffsetAccountType == LedgerJournalACType::Vend);
        }

        if (ledgerJournalTransHeader.Invoice)
        {
            if (ledgerJournalTransHeader.AccountType == LedgerJournalACType::Cust)
            {
                documentType = ReverseChargeDocumentType_W::CustInvoiceJournal;
                partnerCountryRegionType = IntrastatCountryRegionParameters::getCountryRegionType(CustTable::find(ledgerJournalTransHeader.parmAccount()).postalAddress());
            }
            else if (ledgerJournalTransHeader.OffsetAccountType == LedgerJournalACType::Cust)
            {
                documentType = ReverseChargeDocumentType_W::CustInvoiceJournal;
                partnerCountryRegionType = IntrastatCountryRegionParameters::getCountryRegionType(CustTable::find(ledgerJournalTransHeader.parmOffsetAccount()).postalAddress());
            }
            else if (ledgerJournalTransHeader.AccountType == LedgerJournalACType::Vend)
            {
                documentType = ReverseChargeDocumentType_W::VendInvoiceJournal;
                partnerCountryRegionType = IntrastatCountryRegionParameters::getCountryRegionType(VendTable::find(ledgerJournalTransHeader.parmAccount()).postalAddress());
            }
            else if (ledgerJournalTransHeader.OffsetAccountType == LedgerJournalACType::Vend)
            {
                documentType = ReverseChargeDocumentType_W::VendInvoiceJournal;
                partnerCountryRegionType = IntrastatCountryRegionParameters::getCountryRegionType(VendTable::find(ledgerJournalTransHeader.parmOffsetAccount()).postalAddress());
            }

            lastVoucher   = ledgerJournalTransHeader.Voucher;
            lastTransDate = ledgerJournalTransHeader.TransDate;
        }
        else
        {
            isHeaderInitialized = false;
            lastVoucher         = '';
            lastTransDate       = dateNull();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerRecId</Name>
				<Source><![CDATA[
    protected RecId headerRecId()
    {
        return ledgerJournalTransHeader.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceLineExists</Name>
				<Source><![CDATA[
    private boolean invoiceLineExists()
    {
        LedgerJournalTrans ledgerJournalTransLine;

        select firstOnly RecId from ledgerJournalTransLine
        where ledgerJournalTransLine.Voucher   == ledgerJournalTrans.Voucher
            && ledgerJournalTransLine.TransDate == ledgerJournalTrans.TransDate
            && ((ledgerJournalTransLine.LedgerDimension
            &&   ledgerJournalTransLine.AccountType != LedgerJournalACType::Cust
            &&   ledgerJournalTransLine.AccountType != LedgerJournalACType::Vend)
            ||  (ledgerJournalTransLine.OffsetLedgerDimension
            &&   ledgerJournalTransLine.OffsetAccountType != LedgerJournalACType::Cust
            &&   ledgerJournalTransLine.OffsetAccountType != LedgerJournalACType::Vend));

        return (ledgerJournalTransLine.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isHeaderChanged</Name>
				<Source><![CDATA[
    protected boolean isHeaderChanged()
    {
        return (lastVoucher != ledgerJournalTrans.Voucher || lastTransDate != ledgerJournalTrans.TransDate || this.custVendAccountModified());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReverseChargeGroupSet</Name>
				<Source><![CDATA[
    protected boolean isReverseChargeGroupSet()
    {
        return
            (documentType == ReverseChargeDocumentType_W::CustInvoiceJournal && ledgerJournalTrans.TaxGroup == salesTaxGroup) ||
            (documentType == ReverseChargeDocumentType_W::VendInvoiceJournal && ledgerJournalTrans.TaxGroup == purchTaxGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidLineForThresholdCalculation</Name>
				<Source><![CDATA[
    protected boolean isValidLineForThresholdCalculation()
    {
        if (ledgerJournalTrans.AccountType          == LedgerJournalACType::Cust ||
            ledgerJournalTrans.OffsetAccountType    == LedgerJournalACType::Cust ||
            ledgerJournalTrans.AccountType          == LedgerJournalACType::Vend ||
            ledgerJournalTrans.OffsetAccountType    == LedgerJournalACType::Vend)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmount</Name>
				<Source><![CDATA[
    protected AmountMST lineAmount(RecId _lineRecId, Common _line = null)
    {
        LedgerJournalTrans ledgerJournalTransLocal;
        AmountCur          amountExclTaxCur, amountCur;
        TaxModuleType      taxModuleType;
        TaxDirection       taxDirection;

        if (prmisDefault(_line))
        {
            ledgerJournalTransLocal = LedgerJournalTrans::findRecId(_lineRecId, false);
        }
        else
        {
            ledgerJournalTransLocal = _line;
        }

        amountCur = ledgerJournalTransLocal.AmountCurDebit ? ledgerJournalTransLocal.AmountCurDebit : ledgerJournalTransLocal.AmountCurCredit;

        if (LedgerJournalTable.LedgerJournalInclTax)
        {
            switch (documentType)
            {
                case ReverseChargeDocumentType_W::VendInvoice:
                    taxModuleType = TaxModuleType::Purch;
                    taxDirection  = TaxDirection::IncomingTax;
                    break;
                case ReverseChargeDocumentType_W::CustInvoiceJournal:
                    taxModuleType = TaxModuleType::Sales;
                    taxDirection  = TaxDirection::OutgoingTax;
                    break;
            }
            amountExclTaxCur = Tax::baseAmountExclTax(
                ledgerJournalTransLocal.TaxGroup,
                ledgerJournalTransLocal.TaxItemGroup,
                ledgerJournalTransLocal.TransDate,
                ledgerJournalTransLocal.CurrencyCode,
                amountCur,
                taxModuleType,
                0,
                '',
                '',
                taxDirection);
        }
        else
        {
            amountExclTaxCur = amountCur;
        }

        return CurrencyExchangeHelper::mstAmount(amountExclTaxCur, ledgerJournalTransLocal.CurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineChanged</Name>
				<Source><![CDATA[
    protected void lineChanged()
    {
        super();

        //setting mark that current line is valid invoice line
        //i.e that header(line related to CustVendBalance) is initialized
        //and current line is not only CustVendBalance.
        if (isHeaderInitialized
             && ((ledgerJournalTrans.LedgerDimension
             &&   ledgerJournalTrans.AccountType != LedgerJournalACType::Cust
             &&   ledgerJournalTrans.AccountType != LedgerJournalACType::Vend)
             ||  (ledgerJournalTrans.OffsetLedgerDimension
             &&   ledgerJournalTrans.OffsetAccountType != LedgerJournalACType::Cust
             &&   ledgerJournalTrans.OffsetAccountType != LedgerJournalACType::Vend))
             ||  (this.invoiceLineExists()))
        {
            lineNotInitialized = false;
        }
        else
        {
            lineNotInitialized = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDSPostWrite</Name>
				<Source><![CDATA[
    public void lineDSPostWrite()
    {
        if (this.isEnabled() && isHeaderInitialized)
        {
            //do not cache lines
            this.setReverseChargeGroupMatchingLines();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDSPreWrite</Name>
				<Source><![CDATA[
    public void lineDSPreWrite()
    {
        if (this.isEnabled())
        {
            if (!isHeaderInitialized || this.isHeaderChanged())
            {
                this.headerChanged();
            }

            if (isHeaderInitialized)
            {
                this.lineChanged();
                this.setReverseChargeGroupIfApplicable();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineRecord</Name>
				<Source><![CDATA[
    protected void setLineRecord(Common _lineRecord)
    {
        super(_lineRecord);

        ledgerJournalTrans = _lineRecord as LedgerJournalTrans;

        ledgerJournalTable = ledgerJournalTrans.ledgerJournalTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReverseChargeGroup</Name>
				<Source><![CDATA[
    protected void setReverseChargeGroup()
    {
        switch (documentType)
        {
            case ReverseChargeDocumentType_W::VendInvoiceJournal:
                ledgerJournalTrans.TaxGroup = purchTaxGroup;
                this.setOverrideSalesTax(ledgerJournalTrans);
                break;
            case ReverseChargeDocumentType_W::CustInvoiceJournal:
                ledgerJournalTrans.TaxGroup = salesTaxGroup;
                this.setOverrideSalesTax(ledgerJournalTrans);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOverrideSalesTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets OverrideSalesTax to yes if the tax service is enabled.
    /// </summary>
    /// <param name = "_lineRecord">The transaction line record.</param>
    protected void setOverrideSalesTax(SalesPurchJournalLine _lineRecord)
    {
        if (_lineRecord.TableId == tableNum(LedgerJournalTrans))
        {
            LedgerJournalTrans ledgerJournalTransLocal = _lineRecord as LedgerJournalTrans;
            LedgerJournalTransTaxExtension ledgerJournalTransTaxExtension = ledgerJournalTransLocal.ledgerJournalTransTaxExtension();
            ledgerJournalTransTaxExtension.OverrideSalesTax = Tax::isTaxIntegrationEnabledForTable(_lineRecord.TableId);
            ledgerJournalTransLocal.packExtensionTable(ledgerJournalTransTaxExtension);
        }
        else
        {
            super(_lineRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>needSetOverrideSalesTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Whether the transaction line record needs to set the OverrideSalesTax.
    /// </summary>
    /// <param name = "_lineRecord">The transaction line record.</param>
    /// <returns>true if need to set OverrideSalesTax; otherwise, false.</returns>
    protected boolean needSetOverrideSalesTax(SalesPurchJournalLine _lineRecord)
    {
        if (_lineRecord.TableId == tableNum(LedgerJournalTrans))
        {
            LedgerJournalTrans ledgerJournalTransLocal = _lineRecord as LedgerJournalTrans;
            LedgerJournalTransTaxExtension ledgerJournalTransTaxExtension = ledgerJournalTransLocal.ledgerJournalTransTaxExtension();
            return Tax::isTaxIntegrationEnabledForTable(_lineRecord.TableId) && ledgerJournalTransTaxExtension.OverrideSalesTax == NoYes::No;
        }
        else
        {
            return super(_lineRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReverseChargeGroupMatchingLines</Name>
				<Source><![CDATA[
    public void setReverseChargeGroupMatchingLines(boolean _fromHeader = false)
    {
        #OCCRetryCount

        LedgerJournalTrans  ledgerJournalTransLocal;
        TaxGroup            reverseChargeTaxGroup;
        boolean             researchDS;
        FormObjectSet       dataSource;

        if (updateMatchingLines)
        {
            try
            {
                switch (documentType)
                {
                    case ReverseChargeDocumentType_W::CustInvoiceJournal:
                        reverseChargeTaxGroup = salesTaxGroup;
                        break;
                    case ReverseChargeDocumentType_W::VendInvoiceJournal:
                        reverseChargeTaxGroup = purchTaxGroup;
                        break;
                }

                ttsBegin;

                if (TaxIntegrationUtils::isTaxIntegrationEnabledForJournalType(ledgerJournalTrans.ledgerJournalTable().JournalType))
                {
                    LedgerJournalTransTaxExtension ledgerJournalTransTaxExtension;
                    while select forUpdate ledgerJournalTransLocal
                        where ledgerJournalTransLocal.Voucher == ledgerJournalTrans.Voucher
                            && ledgerJournalTransLocal.TransDate == ledgerJournalTrans.TransDate
                            && ((ledgerJournalTransLocal.LedgerDimension
                                    && ledgerJournalTransLocal.AccountType != LedgerJournalACType::Cust
                                    && ledgerJournalTransLocal.AccountType != LedgerJournalACType::Vend)
                                || (ledgerJournalTransLocal.OffsetLedgerDimension
                                    && ledgerJournalTransLocal.OffsetAccountType != LedgerJournalACType::Cust
                                    && ledgerJournalTransLocal.OffsetAccountType != LedgerJournalACType::Vend))
                            && (_fromHeader || ledgerJournalTransLocal.RecId != ledgerJournalTrans.RecId)
                        outer join ledgerJournalTransTaxExtension
                            where ledgerJournalTransLocal.RecId == ledgerJournalTransTaxExtension.LedgerJournalTrans
                                && (ledgerJournalTransLocal.TaxGroup != reverseChargeTaxGroup
                                    || ledgerJournalTransTaxExtension.OverrideSalesTax == NoYes::No)
                    {
                        ledgerJournalTransLocal.TaxGroup = reverseChargeTaxGroup;
                        this.setOverrideSalesTax(ledgerJournalTransLocal);
                        ledgerJournalTransLocal.update();

                        researchDS = true;
                    }
                }
                else
                {
                    while select forUpdate ledgerJournalTransLocal
                        where ledgerJournalTransLocal.Voucher == ledgerJournalTrans.Voucher
                            && ledgerJournalTransLocal.TransDate == ledgerJournalTrans.TransDate
                            && ((ledgerJournalTransLocal.LedgerDimension
                                    && ledgerJournalTransLocal.AccountType != LedgerJournalACType::Cust
                                    && ledgerJournalTransLocal.AccountType != LedgerJournalACType::Vend)
                                || (ledgerJournalTransLocal.OffsetLedgerDimension
                                    && ledgerJournalTransLocal.OffsetAccountType != LedgerJournalACType::Cust
                                    && ledgerJournalTransLocal.OffsetAccountType != LedgerJournalACType::Vend))
                            && ledgerJournalTransLocal.TaxGroup != reverseChargeTaxGroup
                            && (_fromHeader || ledgerJournalTransLocal.RecId != ledgerJournalTrans.RecId)
                    {
                        ledgerJournalTransLocal.TaxGroup = reverseChargeTaxGroup;
                        ledgerJournalTransLocal.update();

                        researchDS = true;
                    }
                }

                ttsCommit;
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::Error)
            {
                throw error("@SYS93835");
            }

            dataSource = FormDataUtil::getFormDataSource(ledgerJournalTrans);
            if (researchDS && dataSource)
            {
                dataSource.research(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>thresholdByGroupUseDB</Name>
				<Source><![CDATA[
    protected AmountMST thresholdByGroupUseDB(ReverseChargeItemGroupId_W _ruleItemGroupId)
    {
        LedgerJournalTrans          ledgerJournalTransLocal;
        AmountMST                   threshold;

        //To calculate total amount its enough to select only balance transactions
        while select ledgerJournalTransLocal
        where ledgerJournalTransLocal.Voucher            == ledgerJournalTrans.Voucher   &&
              ledgerJournalTransLocal.TransDate          == ledgerJournalTrans.TransDate &&
              ledgerJournalTransLocal.RecId              != ledgerJournalTrans.RecId     &&
             (ledgerJournalTransLocal.AccountType        == LedgerJournalACType::Cust ||
              ledgerJournalTransLocal.OffsetAccountType  == LedgerJournalACType::Cust ||
              ledgerJournalTransLocal.AccountType        == LedgerJournalACType::Vend ||
              ledgerJournalTransLocal.OffsetAccountType  == LedgerJournalACType::Vend)
        {
            threshold += this.lineAmount(ledgerJournalTransLocal.RecId, ledgerJournalTransLocal);
        }

        return threshold;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>