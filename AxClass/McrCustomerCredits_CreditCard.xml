<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>McrCustomerCredits_CreditCard</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>MCRCustomerCredits</c> class that handels On Account credit types
///     and posts to the appropriate tables.
/// </summary>
/// <remarks>
///     This class does not
///     touch the customers account.
///     Other than the Ledger tables it posts to the
///     <c>CCSettlementTable</c>.
/// </remarks>
public class McrCustomerCredits_CreditCard extends MCRCustomerCredits
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createPaymentRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates an <c>MCRCustPaymTable</c> object that has
    ///     required information for all payment types.
    /// </summary>
    /// <param name="_mcrCustCreditTable">
    ///     The <c>MCRCustCreditTable</c> record used to create the payment record.
    /// </param>
    /// <returns>
    ///     The newly created <c>MCRCustPaymTable</c> record.
    /// </returns>
    public MCRCustPaymTable createPaymentRecord(MCRCustCreditTable _mcrCustCreditTable)
    {
        MCRCustPaymTable mcrCustPaymTable_Orig;

        if (_mcrCustCreditTable)
        {
            mcrCustPaymTable_Orig   = MCRCustPaymTable::findByRecID(_mcrCustCreditTable.OrigPaymID);
        }
        else
        {
            throw error("@MCR27548");
        }

        mcrCustPaymTable.data(mcrCustPaymTable_Orig);
        mcrCustPaymTable.PaymInfoRecId          = mcrCustPaymTable_Orig.PaymInfoRecId;
        mcrCustPaymTable.PaymInfoTableId        = mcrCustPaymTable_Orig.PaymInfoTableId;
        mcrCustPaymTable.RefTableId             = mcrCustPaymTable_Orig.RefTableId;
        mcrCustPaymTable.RefRecId               = mcrCustPaymTable_Orig.RefRecId;
        mcrCustPaymTable.OrigRefundRecID        = mcrCustPaymTable_Orig.RecId;
        mcrCustPaymTable.PostedAmount           = 0;
        mcrCustPaymTable.Amount                 = -_mcrCustCreditTable.TotalCredit;
        mcrCustPaymTable.Status                 = MCRCustPaymStatus::NotSubmitted;

        return mcrCustPaymTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines how much was paid with credit cards
    ///     and returns the amount that is allowed to
    ///     be put on this card.
    /// </summary>
    /// <param name="_origPayment">
    ///     The original <c>MCRCustPaymTable</c> record used to find the unpaid amount.
    /// </param>
    /// <param name="_amountLeft">
    ///     The amount yet to be paid on this payment record.
    /// </param>
    /// <returns>
    ///     The amount that is allowed to be put on this card.
    /// </returns>
    AmountCur determineAmount(MCRCustPaymTable _origPayment, AmountCur _amountLeft)
    {
        real            amountPaid;
        AmountCur       retAmount;

        if (_origPayment)
        {
            amountPaid = _origPayment.PostedAmount;
        }
        else
        {
            throw error("@MCR27548");
        }

        if (amountPaid > _amountLeft)
        {
            retAmount = _amountLeft;
        }
        else
        {
            retAmount = amountPaid;
        }

        return retAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertMultipleCredits</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Credits multiple cards, do not include refunds.
    /// </summary>
    /// <remarks>
    ///     This method relies on the fact that the credit amount
    ///     does not exceed the amount posted for the sales order.
    ///     Because the amount credited to each card is the percentage
    ///     of the amount paid, and that the credit amount cannot
    ///     exceed that value.  There does not need to be any validation
    ///     to make sure that the amount going to the card is greater than
    ///     the amount paid on that card.
    /// </remarks>
    public void insertMultipleCredits()
    {
        MCRCustPaymTable    custPaymTable;
        AmountCur           creditAmount;
        AmountCur           amountLeft;
        SalesTable          salesTable;
        SalesLine           salesLine;
        MCRCustCreditTable  newCustCredit;

        salesTable  = SalesTable::find(mcrCustCreditTable.OrigSalesID);
        salesLine   = SalesLine::findInventTransId(mcrCustCreditTable.InventTransID);
        amountLeft  = mcrCustCreditTable.TotalCredit;

        while select custPaymTable
            where   custPaymTable.RefRecId      == salesTable.RecId
            &&      custPaymTable.RefTableId    == salesTable.TableId
            &&      custPaymTable.CustPaymType  == MCRCustPaymType::CreditCard
            &&      custPaymTable.Amount        > 0
            &&      amountLeft                  > 0
        {
            creditAmount = this.determineAmount(custPaymTable, amountLeft);
            // Cannot allow negative or 0 credits
            if (creditAmount > 0)
            {
                ttsbegin;
                newCustCredit.createCredit(salesTable,
                                           mcrCustCreditTable.RetailInfocodeId,
                                           mcrCustCreditTable.ReasonCode,
                                           creditAmount,
                                           salesLine,
                                           false,
                                           custPaymTable);

                if (RetailPricingCorrectedPriceChargeForCreditCardFlight::instance().isEnabled())
                {
                    // Should retain the new price for price match.
                    newCustCredit.NewPrice = mcrCustCreditTable.NewPrice;
                }

                if (!newCustCredit.CreditID)
                {
                    newCustCredit.CreditID = NumberSeq::newGetNum(CustParameters::mcrNumRefCreditTableID()).num();
                }

                if (newCustCredit.validateWrite())
                {
                    newCustCredit.insert();
                }
                else
                {
                    throw error("@SYS104318");
                }

                newCustCredit.postCredit();
                ttscommit;

                amountLeft -= creditAmount;
            }
            newCustCredit.clear();
        }

        // If the credit was larger than all invoiced amounts on the
        //      credit cards added together, but less than the amount invoiced
        //      on the entire sales order.  Create an on account credit for the
        //      rest.
        if (amountLeft > 0)
        {
            ttsbegin;
            newCustCredit.createCredit(salesTable,
                                        mcrCustCreditTable.RetailInfocodeId,
                                        mcrCustCreditTable.ReasonCode,
                                        amountLeft,
                                        salesLine,
                                        true);

            if (RetailPricingCorrectedPriceChargeForCreditCardFlight::instance().isEnabled())
            {
                // Should retain the new price for price match.
                newCustCredit.NewPrice = mcrCustCreditTable.NewPrice;
            }

            if (!newCustCredit.CreditID)
            {
                newCustCredit.CreditID = NumberSeq::newGetNum(CustParameters::mcrNumRefCreditTableID()).num();
            }

            if (newCustCredit.validateWrite())
            {
                newCustCredit.insert();
            }
            else
            {
                throw error("@SYS104318");
            }

            newCustCredit.postCredit();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    LedgerJournalTrans post()
    {
        MCRCustPaym             mcrCustPaym;
        MCRCustPaymTotals       mcrCustPaymTotals;
        MCROrderParameters      mcrOrderParameters;

        mcrCustPaymTable = this.createPaymentRecord(mcrCustCreditTable);
        if (mcrCustPaymTable.validateWrite())
        {
            mcrCustPaymTable.insert();
        }
        else
        {
            throw error("@SYS104318");
        }

        super();

        if (ledgerJournalTrans)
        {
            ledgerJournalTrans.reread();
            // Bank reconcilation was failing, fields set incorrectly
            // or missing
            ledgerJournalTrans.PaymReference = mcrCustPaymTable.getCCNumMasked();
            if (ledgerJournalTrans.validateWrite())
            {
                ledgerJournalTrans.update();
            }
            else
            {
                throw error("@SYS104318");
            }

            mcrOrderParameters = MCROrderParameters::find();
            if (!mcrOrderParameters.CustCreditManualJourPost)
            {
                mcrLedgerJournal.post();
            }
            else
            {
                info(strFmt("@GLS105883", ledgerJournalTable.JournalNum, "@MCR25766"),'',SysInfoAction_TableField::newBuffer(ledgerJournalTable));
            }

            mcrCustPaym = MCRCustPaym::construct(mcrCustPaymTable);
            mcrCustPaym.parmMcrCustomerCredit(mcrCustCreditTable);
            mcrCustPaym.processPaym(mcrCustPaymTable.Amount);

            // Need to save the settlment rec ID in case the settlement fails
            mcrCustCreditTable.CustCreditStatus     = MCRCustCreditStatus::Pending;

            if (mcrCustCreditTable.validateWrite())
            {
                mcrCustCreditTable.update();
            }
            else
            {
                throw error("@SYS104318");
            }

            mcrCustPaymTotals = MCRCustPaymTotals::construct(mcrCustCreditTable.TableId, mcrCustCreditTable.RecId);
            
            if (RetailPaymentsAutoSettleOrderCreditOpenTransactionsFlight::instance().isEnabled())
            {
                mcrCustPaymTotals.settleByOrderID(mcrCustCreditTable.OrigSalesID);
            }
            else
            {
                mcrCustPaymTotals.settleByOrderID(mcrCustCreditTable.CreditID);
            }
        }

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>