<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDocumentLink_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class <c>AssetDocumentLink_JP</c> is an asset document link.
/// </summary>
class AssetDocumentLink_JP
{
    AssetDocumentLinkTable_JP     linkTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates asset document link table.
    /// </summary>
    public void create()
    {
        if (!linkTable.RecId)
        {
            ttsBegin;
            linkTable.insert();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes asset document link table.
    /// </summary>
    public void delete()
    {
        AssetDocumentLinkTable_JP     linkTableLoc;

        if (this.parmRecId())
        {
            ttsBegin;
            delete_from linkTableLoc
                where linkTableLoc.RecId == this.parmRecId();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds <c>AssetDocumentLinkTable_JP</c> based on imported parameters.
    /// </summary>
    /// <param name="_refTableId">
    /// The reference record table id.
    /// </param>
    /// <param name="_refRecId">
    /// The reference record id.
    /// </param>
    /// <param name="_docRecId">
    /// The <c>AssetDocumentEntry_JP</c> RecId.
    /// </param>
    public void findByReference(
        RefTableId            _refTableId,
        RefRecId              _refRecId,
        AssetDocumentRecId_JP _docRecId)
    {
        this.parmLinkTable(AssetDocumentLinkTable_JP::find(_refTableId, _refRecId, _docRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the asset document link based on reference table record.
    /// </summary>
    /// <param name="_record">
    /// The reference table record.
    /// </param>
    public void init(Common _record)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetDocumentEntryRecId</Name>
				<Source><![CDATA[
        public AssetDocumentRecId_JP parmAssetDocumentEntryRecId(AssetDocumentRecId_JP  _entryRecId = linkTable.AssetDocumentEntry_JP)
    {
        linkTable.AssetDocumentEntry_JP = _entryRecId;
        return linkTable.AssetDocumentEntry_JP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLinkTable</Name>
				<Source><![CDATA[
        public AssetDocumentLinkTable_JP parmLinkTable(AssetDocumentLinkTable_JP _linkTable = linkTable)
    {
        linkTable = _linkTable;
        return linkTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecId</Name>
				<Source><![CDATA[
        public RecId parmRecId(RecId _recid = linkTable.RecId)
    {
        linkTable.RecId = _recid;
        return linkTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefRecId</Name>
				<Source><![CDATA[
        public RefRecId parmRefRecId(RefRecId _refRecId = linkTable.RefRecId)
    {
        linkTable.RefRecId = _refRecId;
        return linkTable.RefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefTableId</Name>
				<Source><![CDATA[
        public RefTableId parmRefTableId(RefTableId _refTableId = linkTable.RefTableId)
    {
        linkTable.RefTableId = _refTableId;
        return linkTable.RefTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates asset document link table.
    /// </summary>
    public void update()
    {
        // do nothing in link table
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an asset document link instance.
    /// </summary>
    /// <param name="_extensionType">
    /// The asset document link type.
    /// </param>
    /// <param name="_documentType">
    /// The asset document type.
    /// </param>
    /// <returns>
    /// The asset document link instance.
    /// </returns>
    public static AssetDocumentLink_JP construct(
        AssetDocumentLinkType_JP    _extensionType,
        AssetDocumentType_JP        _documentType )
    {
        AssetDocumentLink_JP documentExt;

        if (_documentType == AssetDocumentType_JP::AssetReductionEntry_DirectOff
            || _documentType == AssetDocumentType_JP::AssetReductionEntry_Reserve )
        {
            if (_extensionType == AssetDocumentLinkType_JP::Purch)
            {
                documentExt = new AssetDocumentReductionEntryPurchLnk_JP();
            }
            else if (_extensionType == AssetDocumentLinkType_JP::Invoice)
            {
                documentExt = new AssetDocumentReductionEntryInvoiceLnk_JP();
            }
        }

        return documentExt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteDocumentExtensionsByRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes document links by reference table record.
    /// </summary>
    /// <param name="_refTableId">
    /// The reference table id.
    /// </param>
    /// <param name="_refRecId">
    /// The reference table record id.
    /// </param>
    public static void deleteDocumentExtensionsByRef(
        RefTableId            _refTableId,
        RefRecId              _refRecId)
    {
        AssetDocumentLinkTable_JP   linkTable;

        delete_from linkTable
            where linkTable.RefTableId == _refTableId
                && linkTable.RefRecId     == _refRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>