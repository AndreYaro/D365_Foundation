<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmmResponsibility</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SmmResponsibility
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyResponsibilitiesToSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update responsible on activities for selected responsibilities.
    /// </summary>
    /// <param name = "_callerDataSource">FormDataSource with select responsibilities</param>
    public static void applyResponsibilitiesToSelected(FormDataSource _callerDataSource)
    {
        smmResponsibilitiesEmplTable smmResponsibilitiesEmplTable;

        // Is a range of resp assignments selected on the form
        smmResponsibilitiesEmplTable = _callerDataSource.getFirst(true);

        // Only one resp assigment is selected
        if (!smmResponsibilitiesEmplTable)
        {
            // Get resp assignment
            smmResponsibilitiesEmplTable = _callerDataSource.cursor();

            if (smmResponsibilitiesEmplTable)
            {
                // Apply the select resp assignment to activities
                smmResponsibility::applyResponsibilities(tablenum(smmResponsibilitiesEmplTable),
                    smmResponsibilitiesEmplTable.RecId);
            }
        }
        else
        {
            // Traverse the selected resp assignments
            for (smmResponsibilitiesEmplTable = _callerDataSource.getFirst(true); smmResponsibilitiesEmplTable; smmResponsibilitiesEmplTable = _callerDataSource.getNext())
            {
                // Apply the select resp assignment to activities
                smmResponsibility::applyResponsibilities(tablenum(smmResponsibilitiesEmplTable),
                    smmResponsibilitiesEmplTable.RecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyResponsibilities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update responsible on activities for all/selected responsibilities shown.
    /// </summary>
    /// <param name = "_refTableId"><c>TableId</c> of entity used assign responsibilities.</param>
    /// <param name = "_refRecId"><c>RecId</c> of entity used assign responsibilities.</param>
    /// <returns></returns>
    public static Counter applyResponsibilities(RefTableId _refTableId, RefRecId _refRecId)
    {
        smmResponsibilitiesEmplTable    responsibilitiesEmplTable;
        smmActivities                   activities;
        smmActivityParentLinkTable      activityParentLinkTable;
        Counter                         noOfActivitiesUpdated;
        boolean                         selfSelectedRecordOnly;

        ttsbegin;

        // If resp assignment reference itself is passed
        if (_refTableId == tablenum(smmResponsibilitiesEmplTable))
        {
            selfSelectedRecordOnly = true;
        }

        // Select resp assignments to apply to activities
        // Two cases - 1.selfSelectedRecordOnly - Apply single resp assignment to associated activities
        //  2.!selfSelectedRecordOnly - Apply all resp assignments to associated activities
        while select Worker from responsibilitiesEmplTable
            where (!selfSelectedRecordOnly &&
                responsibilitiesEmplTable.RefTableId == _refTableId &&
                responsibilitiesEmplTable.RefRecId == _refRecId) ||
                (selfSelectedRecordOnly && responsibilitiesEmplTable.RecId == _refRecId)
            join forupdate activities
            where !activities.IsTemplate && activities.ResponsibilityId == responsibilitiesEmplTable.ResponsibilityId &&
                  activities.Closed == NoYes::No
            exists join activityParentLinkTable
            where activityParentLinkTable.ActivityNumber == activities.ActivityNumber &&
                  ((selfSelectedRecordOnly && activityParentLinkTable.RefTableId == responsibilitiesEmplTable.RefTableId && activityParentLinkTable.RefRecId == responsibilitiesEmplTable.RefRecId) ||
                   (!selfSelectedRecordOnly && activityParentLinkTable.RefTableId == _refTableId && activityParentLinkTable.RefRecId   == _refRecId))
        {
            // If activity is not synch with Outlook
            if (!activities.OutlookEntryID)
            {
                activities.ResponsibleWorker = responsibilitiesEmplTable.Worker;
                if (activities.validateWrite(true))
                {
                    activities.update();
                }

                noOfActivitiesUpdated++;
            }
            // If activity is synch with outlook and it is possible to change responsible
            else if (smmResponsibility::changeResponsible(activities, responsibilitiesEmplTable.Worker, true))
            {
                if (activities.validateWrite(true))
                {
                    activities.update();
                }
                noOfActivitiesUpdated++;
            }
        }
        ttscommit;

        // Responsibilities have been successfuly applied to - %1 %2.
        info(strfmt("@SYS102495",noOfActivitiesUpdated,(noOfActivitiesUpdated == 1) ? "@SYS38381" : "@SYS80847"));

        return noOfActivitiesUpdated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultResponsibilities</Name>
				<Source><![CDATA[
    /// <summary>
    /// To create default responsibilities for a entity based on the setup defined by user
    /// </summary>
    /// <param name = "_hierarchyType">Hierarchy type to default.</param>
    /// <param name = "_id">ID of Hierarchy to default.</param>
    public static void defaultResponsibilities(HierarchyType _hierarchyType, str _id)
    {
        smmSalesUnitId              salesUnitId;
        HierarchyIdBase             hierarchyId;
        smmResponsibilityGroup      responsibilityGroup;
        smmResponsibilitiesTable    responsibilitiesTable;
        smmResponsibilitiesTable    newResponsibilitiesTable;
        fieldId                     fieldIdForFlag;

        if (_hierarchyType == HierarchyType::None)
        {
            salesUnitId = _id;
        }
        else
        {
            hierarchyId = _id;
        }

        // Find the field id of the flag to check whether repsonsibility is applicable to current entity or not
        fieldIdForFlag = smmResponsibility::hierarchyType2FieldIdForFlag(_hierarchyType);

        ttsbegin;

        // Select responsibilities from the setup which are applicable for current entity but have not been created by user
        while select ResponsibilityId from responsibilityGroup order by ResponsibilityId
            where responsibilityGroup.(fieldIdForFlag) == NoYes::Yes
            notexists join responsibilitiesTable where
            responsibilitiesTable.ResponsibilityId == responsibilityGroup.ResponsibilityId &&
            responsibilitiesTable.HierarchyType == _hierarchyType &&
            (_hierarchyType == HierarchyType::None || responsibilitiesTable.HierarchyId == hierarchyId )&&
            (_hierarchyType != HierarchyType::None || responsibilitiesTable.SalesUnitId == salesUnitId)
        {
            // Create responsibility
            newResponsibilitiesTable.clear();
            newResponsibilitiesTable.HierarchyType = _hierarchyType;
            newResponsibilitiesTable.HierarchyId = hierarchyId;
            newResponsibilitiesTable.SalesUnitId = salesUnitId;
            newResponsibilitiesTable.ResponsibilityId = responsibilityGroup.ResponsibilityId;
            newResponsibilitiesTable.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hierarchyType2FieldIdForFlag</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the ID of the field to check whether repsonsibility is applicable to specified hierarchy type.
    /// </summary>
    /// <param name = "_type"><c>HierarchyType</c> to check.</param>
    /// <returns><c>FieldId</c> in <c>smmResponsibilityGroup</c></returns>
    public static fieldId hierarchyType2FieldIdForFlag(HierarchyType _type)
    {
        switch (_type)
        {
            case HierarchyType::None :          return fieldnum(smmResponsibilityGroup, IsSalesUnit);
            case HierarchyType::Campaign :      return fieldnum(smmResponsibilityGroup, IsCampaign);
            case HierarchyType::Lead :          return fieldnum(smmResponsibilityGroup, IsLead);
            case HierarchyType::Opportunity :   return fieldnum(smmResponsibilityGroup, IsOpportunity);
            case HierarchyType::Case :          return fieldnum(smmResponsibilityGroup, IsCase);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupResponsibilityHierarchyId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup for responsibilities by hieararchy Id
    /// </summary>
    /// <param name = "_formControl">Target control</param>
    /// <param name = "_hierarchyId"><c>HierarchyId</c> used to find related responsibilities.</param>
    public static void lookupResponsibilityHierarchyId(FormControl _formControl, HierarchyIdBase _hierarchyId)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tablenum(smmResponsibilitiesTable), _formControl);
        Query                           query;
        QueryBuildDataSource            queryBuildDataSource;
        QueryBuildRange                 queryBuildRange;

        sysTableLookup.addLookupfield(fieldnum(smmResponsibilitiesTable, ResponsibilityId),true);

        query = new Query();
        queryBuildDataSource = query.addDataSource(tablenum(smmResponsibilitiesTable));
        queryBuildRange = queryBuildDataSource.addRange(fieldnum(smmResponsibilitiesTable, HierarchyId));
        queryBuildRange.value(_hierarchyId);

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>refTableid2FieldIdForFlag</Name>
				<Source><![CDATA[
    /* Find the field id of the flag to check whether repsonsibility
       is applicable to specified table or not */
    public static fieldId refTableid2FieldIdForFlag(tableId _refTableId)
    {
        fieldId fieldId;

        switch (_refTableId)
        {
            case tablenum(smmLeadTable) :
            fieldId = fieldnum(smmResponsibilityGroup,IsLead);
            break;

            case tablenum(smmOpportunityTable) :
            fieldId = fieldnum(smmResponsibilityGroup,IsOpportunity);
            break;

            case tablenum(smmBusRelTable) :
            fieldId = fieldnum(smmResponsibilityGroup,IsBusinessRel);
            break;

            case tablenum(VendTable) :
            fieldId = fieldnum(smmResponsibilityGroup,IsVend);
            break;

            case tablenum(CustTable) :
            fieldId = fieldnum(smmResponsibilityGroup,IsCust);
            break;

            case tablenum(smmTMCallListGroup) :
            fieldId = fieldnum(smmResponsibilityGroup,IsCallList);
            break;

            case tablenum(smmCampaignTable) :
            fieldId = fieldnum(smmResponsibilityGroup,IsCampaign);
            break;

            case tablenum(smmSalesUnit) :
            fieldId = fieldnum(smmResponsibilityGroup,IsSalesUnit);
            break;

            case tablenum(CaseCategoryHierarchyDetail) :
            case tablenum(CaseDetail) :
            case tablenum(CaseDetailBase) :
            fieldId = fieldnum(smmResponsibilityGroup,IsCase);
            break;
        }

        return fieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    public static void updateQuery(Query _query,tableId _tableId,smmResponsibilityId _responsibilityId)
    {
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         rangeRefTableId;
        QueryBuildRange         rangeRespId;

        // Get the manual created responsibilities assignment datasource
        queryBuildDataSource = _query.dataSourceTable(tablenum(smmResponsibilitiesEmplTable));

        // If the datasource isn't created already
        if (!queryBuildDataSource)
        {
            // Add the extra responsibility assigment data source
            queryBuildDataSource    = _query.dataSourceTable(_tableId).addDataSource(tablenum(smmResponsibilitiesEmplTable));

            // Link the new datasource to the existing query
            queryBuildDataSource.joinMode(JoinMode::ExistsJoin);
            queryBuildDataSource.fetchMode(QueryFetchMode::One2One);
            queryBuildDataSource.addLink(fieldname2id(_tableId, identifierstr(RecId)), fieldnum(smmResponsibilitiesEmplTable, RefRecId));
        }

        rangeRefTableId   = queryBuildDataSource.findRange(fieldnum(smmResponsibilitiesEmplTable, RefTableId));
        if (!rangeRefTableId)
        {
            rangeRefTableId   = queryBuildDataSource.addRange(fieldnum(smmResponsibilitiesEmplTable, RefTableId));
        }
        rangeRefTableId.status(RangeStatus::Hidden);

        rangeRespId       = queryBuildDataSource.findRange(fieldnum(smmResponsibilitiesEmplTable, ResponsibilityId));
        if (!rangeRespId)
        {
            rangeRespId   = queryBuildDataSource.addRange(fieldnum(smmResponsibilitiesEmplTable, ResponsibilityId));
        }
        rangeRespId.status(RangeStatus::Hidden);

        // Filter on the responsibilities assigments for _tableId, selected responsibility
        rangeRefTableId.value(queryValue(_tableId));
        rangeRespId.value(queryValue(_responsibilityId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeResponsible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Change responsible on a activity which is already synchronized to Outlook
    /// </summary>
    /// <param name = "_activity">
    /// The activity.
    /// </param>
    /// <param name = "_newResponsible">
    /// The responsible worker.
    /// </param>
    /// <param name = "_showInfo">
    /// true if errors should be shown.
    /// </param>
    /// <returns>
    /// true if successful; otherwise, false.
    /// </returns>
    public static boolean changeResponsible(smmActivities _activity, HcmWorkerRecId _newResponsible, boolean _showInfo = true)
    {
        smmDeletedActivities smmDeletedActivities;

        // Do the person that will recieve the activity already have a entry for this activity from a previous reassigment
        smmDeletedActivities = smmDeletedActivities::find(_activity.ActivityNumber, _newResponsible);

        if (smmDeletedActivities)
        {
            if (_showInfo)
            {
                // Responsbile cannot be changed on activity - %1.The employee %1 already have a unresolved deleted activity.
                checkFailed(strFmt("@SYS102494",_activity.ActivityNumber)+strFmt("@SYS90215", HcmWorker::worker2Name(_newResponsible)));
            }
            return false;
        }
        else
        {
            // Is activity synchronized to Outlook and have responsible changed
            if (_activity.OutlookEntryID && _activity.ResponsibleWorker != _newResponsible)
            {
                smmDeletedActivities.ActivityNumber        = _activity.ActivityNumber;
                smmDeletedActivities.OutlookEntryID        = _activity.OutlookEntryID;
                smmDeletedActivities.OutlookGlobalObjectID = _activity.OutlookGlobalObjectID;
                smmDeletedActivities.Category              = _activity.Category;
                smmDeletedActivities.ResponsibleWorker     = _activity.ResponsibleWorker;

                smmDeletedActivities.OriginalAppointmentStartDateTime  = _activity.OriginalAppointmentStartDateTime;
                smmDeletedActivities.RecurrenceState                   = _activity.RecurrenceState;
                smmDeletedActivities.IsMasterAppointment               = _activity.IsMasterAppointment;

                if (smmDeletedActivities.validateWrite(true))
                {
                    smmDeletedActivities.insert();
                }

                _activity.OutlookEntryID        = '';
                _activity.OutlookGlobalObjectID = '';
                _activity.ResponsibleWorker     = _newResponsible;
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCommonUsingTemplateEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the <c>HierarchyTreeTable.preDeleteActivity()</c> event.
    /// </summary>
    /// <param name = "_eventArgs">
    /// The arguments for the event.
    /// </param>
    [SubscribesTo(tableStr(smmActivities), delegatestr(smmActivities, initFromCommonUsingTemplateEvent))]
    public static void initFromCommonUsingTemplateEvent(Common _table, smmActivities _templateActivity, smmActivities _activities)
    {
        smmResponsibilitiesEmplTable        smmResponsibilitiesEmplTable;

        // Assign responsible employee
        smmResponsibilitiesEmplTable = smmResponsibilitiesEmplTable::find(_templateActivity.ResponsibilityId, _table.TableId, _table.RecId);

        if (smmResponsibilitiesEmplTable && smmResponsibilitiesEmplTable.Worker)
        {
            _activities.ResponsibleWorker = smmResponsibilitiesEmplTable.Worker;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>