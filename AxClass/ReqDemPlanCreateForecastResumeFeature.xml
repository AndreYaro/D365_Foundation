<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqDemPlanCreateForecastResumeFeature</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
using IFeatureMetadata = Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.IFeatureMetadata;
using IFeatureLifecycle = Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.IFeatureLifecycle;
using FeatureLifecycleStage = Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.FeatureLifecycleStage;

/// <summary>
/// The ReqDemPlanCreateForecastResumeFeature handles the flighting logic of resume functionality for
/// Generate statistical demand forecast batch job. The logic will be turned on in case of AOS failure.
/// It stores the batch id ans forecast stage in the ReqDemPlanGeneratedForecast record at the beginning of the demand forecast run.
/// In case of failure for the current batch id the ReqDemPlanGeneratedForecastforecast record with latest succesfull stage will be found.
/// Then generation will be resumed or restarted, depending on the execution phase it had reached before failure.
/// </summary>
[ExportAttribute(identifierStr(Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.IFeatureMetadata))]
internal final class ReqDemPlanCreateForecastResumeFeature implements IFeatureLifecycle, IFeatureMetadata
{
    private static ReqDemPlanCreateForecastResumeFeature instance;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>TypeNew</Name>
				<Source><![CDATA[
    private static void TypeNew()
    {
        instance = new ReqDemPlanCreateForecastResumeFeature();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    internal static ReqDemPlanCreateForecastResumeFeature instance()
    {
        return ReqDemPlanCreateForecastResumeFeature::instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>FeatureModuleV0</c> for the feature.
    /// </summary>
    /// <returns>
    /// The module for the feature.
    /// </returns>
    [Hookable(false)]
    public int module()
    {
        return FeatureModuleV0::MasterPlanning;
    }

]]></Source>
			</Method>
			<Method>
				<Name>label</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>FeatureLabelId</c> for the feature.
    /// </summary>
    /// <returns>
    /// The label of the  feature.
    /// </returns>
    [Hookable(false)]
    public FeatureLabelId label()
    {
        return literalStr("@DMP:RestartResumeDemPlanCreateForecastFeatureName");
    }

]]></Source>
			</Method>
			<Method>
				<Name>summary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>FeatureLabelId</c> for the feature.
    /// </summary>
    /// <returns>
    /// The summary for the feature.
    /// </returns>
    [Hookable(false)]
    public FeatureLabelId summary()
    {
        return literalStr("@DMP:RestartResumeDemPlanCreateForecastFeatureSummary");
    }

]]></Source>
			</Method>
			<Method>
				<Name>learnMoreUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>WebSiteURL</c> for the feature.
    /// </summary>
    /// <returns>
    /// The URL for the feature.
    /// </returns>
    [Hookable(false)]
    public WebSiteURL learnMoreUrl()
    {
        return 'https://go.microsoft.com/fwlink/?linkid=2167650';
    }

]]></Source>
			</Method>
			<Method>
				<Name>FeatureStage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates the stage of the feature in its lifecycle.
    /// </summary>
    /// <returns>A <c>FeatureLifeCycleState</c> value.</returns>
    /// <remarks>
    /// a. Incomplete – feature is disabled by default. It can be only enabled on MS internal environments (think dev boxes, AxToday, TIE, etc.) with a flight. The flight name is the same as the class name (MyFeature)
    /// b. PrivatePreview – feature is enabled by flight. The flight name is the same as the class name (MyFeature)
    /// c. PublicPreview – feature is enabled by default, it can be turned off with the kill switch. The kill switch is flight called ClassName_KillSwitch  (MyFeature_KillSwitch).
    /// d. Released – feature is enabled by default and cannot be disabled
    /// </remarks>
    [Hookable(false)]
    public FeatureLifecycleStage FeatureStage()
    {
        return FeatureLifecycleStage::Released;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabledByDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the feature for demand forecasting on Machine Learning Service is enabled by default.
    /// </summary>
    /// <returns>
    /// true if the feature is enabled by default; otherwise, false.
    /// </returns>
    [Hookable(false)]
    public boolean isEnabledByDefault()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDisable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the feature can be disabled.
    /// </summary>
    /// <returns>
    /// true if the feature can be disabled; otherwise false.
    /// </returns>
    [Hookable(false)]
    public boolean canDisable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>