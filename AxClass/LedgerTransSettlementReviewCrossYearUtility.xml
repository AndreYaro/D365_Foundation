<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTransSettlementReviewCrossYearUtility</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class LedgerTransSettlementReviewCrossYearUtility
{
    private LedgerTransOpenTmp ledgerTransOpenTmp;
    private FromDate fromDate;
    private ToDate toDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runProcess</Name>
				<Source><![CDATA[
    internal void runProcess(LedgerTransSettlementReviewCrossYearUtilityParameters _parameters)
    {
        fromDate = _parameters.parmFromDate();
        toDate = _parameters.parmToDate();

        ledgerTransOpenTmp.linkPhysicalTableInstance(_parameters.parmLedgerTransOpenTmp());

        delete_from ledgerTransOpenTmp;

        this.populateSettledTransactionData();

        this.translateMainAccountName();
        this.fillDebitCreditAmounts();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSettledTransactionData</Name>
				<Source><![CDATA[
    private void populateSettledTransactionData()
    {
        GeneralJournalEntry gje_OutOfFiscalYear;
        GeneralJournalEntry gje_WithinFiscalYear;
        GeneralJournalAccountEntry gjae_OutOfFiscalYear;
        GeneralJournalAccountEntry gjae_WithinFiscalYear;
        LedgerTransSettlement ledgerTransSettlementOutOfFiscalYear;
        LedgerTransSettlement ledgerTransSettlementWithinFiscalYear;
        MainAccountLedgerDimensionView mainAccountLedgerDimensionView;

        LedgerSettlementStatus settledSettlementStatus = LedgerSettlementStatus::Settled;

        if (LedgerTransSettlementReviewCrossYearPopulateOptimizeFlight::instance().isEnabled())
        {
            // This query reduces using 'exists join' and do not use dimensionAttributeValueCombination in order to get a better performance.
            // DimensionAttributeValueCombination was needed for displayValue. The same value, however, could be found in ledgerAccount of GJAE.
            MainAccount mainAccount;
            LedgerRecId currentLedgerRecId = Ledger::current();

            insert_recordset ledgerTransOpenTmp
                    (SettlementStatus, AccountingDate, JournalNumber, SubledgerVoucher, GeneralJournalEntry,
                    TransactionCurrencyCode, Text, GeneralJournalAccountEntry, LedgerDimension,
                    FullyQualifiedAccount, MainAccountId, Name, Type,
                    SettlementId, AutomationRule)
            select settledSettlementStatus, AccountingDate, JournalNumber, SubledgerVoucher, RecId
                from gje_OutOfFiscalYear
                    where gje_OutOfFiscalYear.Ledger == currentLedgerRecId
                        && (gje_OutOfFiscalYear.AccountingDate < fromDate
                            || gje_OutOfFiscalYear.AccountingDate > toDate)
                join TransactionCurrencyCode, Text, RecId, LedgerDimension, LedgerAccount from gjae_OutOfFiscalYear
                    where gjae_OutOfFiscalYear.GeneralJournalEntry == gje_OutOfFiscalYear.RecId
                join MainAccountId, Name, Type from mainAccount
                    where mainAccount.RecId == gjae_OutOfFiscalYear.MainAccount
                join SettleId, AutomationRule from ledgerTransSettlementOutOfFiscalYear
                    where ledgerTransSettlementOutOfFiscalYear.TransRecId == gjae_OutOfFiscalYear.RecId
                        && ledgerTransSettlementOutOfFiscalYear.DataAreaId == gje_OutOfFiscalYear.SubledgerVoucherDataAreaId
                exists join ledgerTransSettlementWithinFiscalYear
                    where ledgerTransSettlementOutOfFiscalYear.SettleId == ledgerTransSettlementWithinFiscalYear.SettleId
                        && ledgerTransSettlementOutOfFiscalYear.RecId != ledgerTransSettlementWithinFiscalYear.RecId
                    join gjae_WithinFiscalYear
                        where gjae_WithinFiscalYear.RecId == ledgerTransSettlementWithinFiscalYear.TransRecId
                    join gje_WithinFiscalYear
                        where gje_WithinFiscalYear.Ledger == currentLedgerRecId
                            && gje_WithinFiscalYear.RecId == gjae_WithinFiscalYear.GeneralJournalEntry
                            && gje_WithinFiscalYear.AccountingDate >= fromDate
                            && gje_WithinFiscalYear.AccountingDate <= toDate;
        }
        else
        {
            insert_recordset ledgerTransOpenTmp
                (SettlementStatus, AccountingDate, JournalNumber, SubledgerVoucher, GeneralJournalEntry,
                TransactionCurrencyCode, Text, GeneralJournalAccountEntry, LedgerDimension,
                FullyQualifiedAccount, MainAccountId, Name, Type,
                SettlementId, AutomationRule)
            select settledSettlementStatus, AccountingDate, JournalNumber, SubledgerVoucher, RecId from gje_OutOfFiscalYear
                    where gje_OutOfFiscalYear.Ledger == Ledger::current()
                        && (gje_OutOfFiscalYear.AccountingDate < fromDate
                            || gje_OutOfFiscalYear.AccountingDate > toDate)
                join TransactionCurrencyCode, Text, RecId, LedgerDimension from gjae_OutOfFiscalYear
                    where gjae_OutOfFiscalYear.GeneralJournalEntry == gje_OutOfFiscalYear.RecId
                join FullyQualifiedAccount, MainAccount, Name, Type from mainAccountLedgerDimensionView
                        where mainAccountLedgerDimensionView.LedgerDimensionId == gjae_OutOfFiscalYear.LedgerDimension
                join SettleId, AutomationRule from ledgerTransSettlementOutOfFiscalYear
                    where ledgerTransSettlementOutOfFiscalYear.TransRecId == gjae_OutOfFiscalYear.RecId
                exists join ledgerTransSettlementWithinFiscalYear
                    where ledgerTransSettlementOutOfFiscalYear.SettleId == ledgerTransSettlementWithinFiscalYear.SettleId
                    exists join gjae_WithinFiscalYear
                        where gjae_WithinFiscalYear.RecId == ledgerTransSettlementWithinFiscalYear.TransRecId
                    exists join gje_WithinFiscalYear
                        where gje_WithinFiscalYear.Ledger == Ledger::current()
                            && gje_WithinFiscalYear.RecId == gjae_WithinFiscalYear.GeneralJournalEntry
                            && gje_WithinFiscalYear.AccountingDate >= fromDate
                            && gje_WithinFiscalYear.AccountingDate <= toDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>translateMainAccountName</Name>
				<Source><![CDATA[
    private void translateMainAccountName()
    {
        GeneralJournalAccountEntry generalJournalAccountEntry;
        DimensionAttributeValueCombination dimensionAttributeValueCombination;
        MainAccountTranslation mainAccountTranslation;

        LanguageId languageId = DimensionCache::currentDimensionValueLanguageId();

        if (languageId)
        {
            update_recordset ledgerTransOpenTmp
                setting 
                    Name = mainAccountTranslation.Name
                join RecId from generalJournalAccountEntry
                    where generalJournalAccountEntry.RecId == ledgerTransOpenTmp.GeneralJournalAccountEntry
                join RecId from dimensionAttributeValueCombination
                    where dimensionAttributeValueCombination.RecId == generalJournalAccountEntry.LedgerDimension
                join Name from mainAccountTranslation
                    where mainAccountTranslation.MainAccount == dimensionAttributeValueCombination.MainAccount
                        && mainAccountTranslation.LanguageId == languageId
                        && mainAccountTranslation.Name != '';
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDebitCreditAmounts</Name>
				<Source><![CDATA[
    private void fillDebitCreditAmounts()
    {
        GeneralJournalAccountEntry generalJournalAccountEntry;

        // Fill in the credit amount
        update_recordSet ledgerTransOpenTmp 
            setting
                AccountingCurrencyAmountCredit = generalJournalAccountEntry.AccountingCurrencyAmount * -1,
                TransactionCurrencyAmountCredit = generalJournalAccountEntry.TransactionCurrencyAmount * -1,
                ReportingCurrencyCreditAmount = generalJournalAccountEntry.ReportingCurrencyAmount * -1
            join generalJournalAccountEntry
                where generalJournalAccountEntry.RecId == ledgerTransOpenTmp.GeneralJournalAccountEntry
                    && generalJournalAccountEntry.IsCredit == true;

        // Fill in the debit amount
        update_recordSet ledgerTransOpenTmp 
            setting
                AccountingCurrencyAmountDebit = generalJournalAccountEntry.AccountingCurrencyAmount,
                TransactionCurrencyAmountDebit = generalJournalAccountEntry.TransactionCurrencyAmount,
                ReportingCurrencyDebitAmount = generalJournalAccountEntry.ReportingCurrencyAmount
            join generalJournalAccountEntry
                where generalJournalAccountEntry.RecId == ledgerTransOpenTmp.GeneralJournalAccountEntry
                    && generalJournalAccountEntry.IsCredit == false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasYearEndCloseBeenRun</Name>
				<Source><![CDATA[
    public static boolean hasYearEndCloseBeenRun(TransDate _startDate)
    {
        return !LedgerSettleYECValidator::checkYearEndCloseHasNotBeenRun(_startDate);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>