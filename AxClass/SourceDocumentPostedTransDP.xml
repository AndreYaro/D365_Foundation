<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SourceDocumentPostedTransDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SourceDocumentPostedTransDP</c> class is responsible for preparing the data for the <c>SourceDocumentPostedTrans</c> report.
/// This report processes the data in three steps
///     Fetches and inserts all the data into the staging table
///         Conditionally getting the distinct ledger dimensions from the SYS query
///         Getting the disticnt Source document headers, transaction number and transaction text.
///         Inserts all the data using insert_recordSet
///     Summarizes the data.
///     Inserts the summarized data into the data provider table
///         Conditonally populating the finanical dimension's specific information.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(SourceDocumentPostedTrans)),
    SRSReportParameterAttribute(classStr(SourceDocumentPostedTransContract))
]
public class SourceDocumentPostedTransDP extends SrsReportDataProviderPreProcessTempDB
{
    SourceDocumentPostedTransTmp sourceDocumentPostedTransTmp;
    private boolean isConnectionSetup = SourceDocumentPostedTransDPDisposeTempTableFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getSourceDocumentPostedTransTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches data from the <c>SourceDocumentPostedTransTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// Data from the <c>SourceDocumentPostedTransTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(SourceDocumentPostedTransTmp))
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public SourceDocumentPostedTransTmp getSourceDocumentPostedTransTmp()
    {
        select sourceDocumentPostedTransTmp;

        return sourceDocumentPostedTransTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSourceDocPostedAccEntTmpDet</Name>
				<Source><![CDATA[
    private SourceDocumentPostedTransAccEntryTmpDet insertSourceDocPostedAccEntTmpDet(
        SourceDocumentPostedTransAccEntryTmpDet _sourceDocumentPostedTransAccEntryTmpDet,
        sourceDocumentPostedTransTmpLedgerDim   _sourceDocumentPostedTransTmpLedgerDim,
        SourceDocumentPostedTransAccEntryTmpDet _sourceDocumentPostedTransAccEntryTmpDetSourceDoc,
        boolean                                 _showLedgerAccountTypeOnly,
        TransDate                               _fromDate,
        TransDate                               _toDate,
        MainAccountNum                          _fromMainAccount,
        MainAccountNum                          _toMainAccount,
        boolean                                 _queryHasFilters,
        PostingTypeDescription                  _postingTypeDescription,
        LedgerRecId                             _currentLedger)
    {
        SubledgerJournalEntry                    subledgerJournalEntry;
        SubledgerJournalAccountEntry             subledgerJournalAccountEntry;
        SubledgerJournalAccountEntryDistribution subledgerJournalAccountEntryDistribution;

        AccountingDistribution         accountingDistribution;
        ProjectAccountingDistribution  projectAccountingDistribution;
        AccountingEvent                accountingEvent;
        GeneralJournalAccountEntry     generalJournalAccountEntry;
        MainAccountLedgerDimensionView mainAccountLedgerDimViewAccDist;

        #define.Empty('')

        if (_queryHasFilters)
        {
            insert_recordSet _sourceDocumentPostedTransAccEntryTmpDet(
                LedgerVoucher,
                LedgerDimension,
                PostingType,
                PostingTypeDescription,
                DebitCredit,
                TransferPolicy,
                IsCorrection,
                AccountingDate,
                TransText,
                TransactionCurrencyAmount,
                TransactionCurrencyCode,
                TransactionNumber,
                TransactionText)
            select Voucher from subledgerJournalEntry
                where subledgerJournalEntry.Ledger == _currentLedger
            join LedgerDimension, PostingType, _postingTypeDescription, Side, IsTransferredInDetail, IsCorrection from subledgerJournalAccountEntry
                where subledgerJournalAccountEntry.SubledgerJournalEntry == subledgerJournalEntry.RecId
                      && subledgerJournalAccountEntry.IsTransferredInDetail != TransferPolicy::DoNotTransfer
                      && ((subledgerJournalAccountEntry.PostingType == LedgerPostingType::LedgerJournal
                           && _showLedgerAccountTypeOnly == true)
                          || _showLedgerAccountTypeOnly == false)
            join AccountingDate from accountingEvent
                where accountingEvent.RecId == subledgerJournalEntry.AccountingEvent
                      && accountingEvent.State == AccountingEventState::Complete
                      && accountingEvent.AccountingDate >= _fromDate
                      && accountingEvent.AccountingDate <= _toDate
            join subledgerJournalAccountEntryDistribution
                where subledgerJournalAccountEntryDistribution.SubledgerJournalAccountEntry == subledgerJournalAccountEntry.RecId
            join Text from generalJournalAccountEntry
                where generalJournalAccountEntry.RecId == subledgerJournalAccountEntry.GeneralJournalAccountEntry
            join TransactionCurrencyAmount, TransactionCurrency from accountingDistribution
                where accountingDistribution.RecId == subledgerJournalAccountEntryDistribution.AccountingDistribution
            join TransactionNumber, TransactionText from _sourceDocumentPostedTransAccEntryTmpDetSourceDoc
                where accountingDistribution.SourceDocumentHeader == _sourceDocumentPostedTransAccEntryTmpDetSourceDoc.SourceDocumentHeaderRecId
            exists join _sourceDocumentPostedTransTmpLedgerDim
                where _sourceDocumentPostedTransTmpLedgerDim.LedgerDimension == accountingDistribution.LedgerDimension
            notExists join projectAccountingDistribution
                where projectAccountingDistribution.AccountingDistribution == accountingDistribution.RecId;
        }
        else
        {
            insert_recordSet _sourceDocumentPostedTransAccEntryTmpDet(
                LedgerVoucher,
                LedgerDimension,
                PostingType,
                PostingTypeDescription,
                DebitCredit,
                TransferPolicy,
                IsCorrection,
                AccountingDate,
                TransText,
                TransactionCurrencyAmount,
                TransactionCurrencyCode,
                TransactionNumber,
                TransactionText)
            select Voucher from subledgerJournalEntry
                where subledgerJournalEntry.Ledger == _currentLedger
            join LedgerDimension, PostingType, _postingTypeDescription, Side, IsTransferredInDetail, IsCorrection from subledgerJournalAccountEntry
                where subledgerJournalAccountEntry.SubledgerJournalEntry == subledgerJournalEntry.RecId
                      && subledgerJournalAccountEntry.IsTransferredInDetail != TransferPolicy::DoNotTransfer
                      && ((subledgerJournalAccountEntry.PostingType == LedgerPostingType::LedgerJournal
                           && _showLedgerAccountTypeOnly == true)
                          || _showLedgerAccountTypeOnly == false)
            join AccountingDate from accountingEvent
                where accountingEvent.RecId == subledgerJournalEntry.AccountingEvent
                      && accountingEvent.State == AccountingEventState::Complete
                      && accountingEvent.AccountingDate >= _fromDate
                      && accountingEvent.AccountingDate <= _toDate
            join subledgerJournalAccountEntryDistribution
                where subledgerJournalAccountEntryDistribution.SubledgerJournalAccountEntry == subledgerJournalAccountEntry.RecId
            join Text from generalJournalAccountEntry
                where generalJournalAccountEntry.RecId == subledgerJournalAccountEntry.GeneralJournalAccountEntry
            join TransactionCurrencyAmount, TransactionCurrency from accountingDistribution
                where accountingDistribution.RecId == subledgerJournalAccountEntryDistribution.AccountingDistribution
            join TransactionNumber, TransactionText from _sourceDocumentPostedTransAccEntryTmpDetSourceDoc
                where accountingDistribution.SourceDocumentHeader == _sourceDocumentPostedTransAccEntryTmpDetSourceDoc.SourceDocumentHeaderRecId
            exists join mainAccountLedgerDimViewAccDist
                where mainAccountLedgerDimViewAccDist.LedgerDimensionId == accountingDistribution.LedgerDimension
                      && ((mainAccountLedgerDimViewAccDist.MainAccount    >= _fromMainAccount
                           && mainAccountLedgerDimViewAccDist.MainAccount <= _toMainAccount
                           && _fromMainAccount != #Empty)
                          || _fromMainAccount == #Empty)
            notExists join projectAccountingDistribution
                where projectAccountingDistribution.AccountingDistribution == accountingDistribution.RecId;
        }

        return _sourceDocumentPostedTransAccEntryTmpDet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSourceDocPostedAccEntTmpDetForProj</Name>
				<Source><![CDATA[
    private SourceDocumentPostedTransAccEntryTmpDet insertSourceDocPostedAccEntTmpDetForProj(
        SourceDocumentPostedTransAccEntryTmpDet _sourceDocumentPostedTransAccEntryTmpDet,
        sourceDocumentPostedTransTmpLedgerDim   _sourceDocumentPostedTransTmpLedgerDim,
        SourceDocumentPostedTransAccEntryTmpDet _sourceDocumentPostedTransAccEntryTmpDetSourceDoc,
        boolean                                 _showLedgerAccountTypeOnly,
        TransDate                               _fromDate,
        TransDate                               _toDate,
        MainAccountNum                          _fromMainAccount,
        MainAccountNum                          _toMainAccount,
        boolean                                 _queryHasFilters,
        PostingTypeDescription                  _postingTypeDescription,
        ProjId                                  _projId,
        LedgerRecId                             _currentLedger)
    {
        SubledgerJournalEntry                    subledgerJournalEntry;
        SubledgerJournalAccountEntry             subledgerJournalAccountEntry;
        SubledgerJournalAccountEntryDistribution subledgerJournalAccountEntryDistribution;

        AccountingDistribution         accountingDistribution;
        ProjectAccountingDistribution  projectAccountingDistribution;
        AccountingEvent                accountingEvent;
        GeneralJournalAccountEntry     generalJournalAccountEntry;
        MainAccountLedgerDimensionView mainAccountLedgerDimViewAccDist;
        ProjTable                      projTable;
        ProjCategory                   projCategory;

        #define.Empty('')

        if (_queryHasFilters)
        {
            insert_recordSet _sourceDocumentPostedTransAccEntryTmpDet(
                LedgerVoucher,
                LedgerDimension,
                PostingType,
                PostingTypeDescription,
                DebitCredit,
                TransferPolicy,
                IsCorrection,
                AccountingDate,
                TransText,
                TransactionCurrencyAmount,
                TransactionCurrencyCode,
                TransactionNumber,
                TransactionText,
                ProjectId,
                ProjectCategory)
            select Voucher from subledgerJournalEntry
                where subledgerJournalEntry.Ledger == _currentLedger
            join LedgerDimension, PostingType, _postingTypeDescription, Side, IsTransferredInDetail, IsCorrection from subledgerJournalAccountEntry
                where subledgerJournalAccountEntry.SubledgerJournalEntry == subledgerJournalEntry.RecId
                      && subledgerJournalAccountEntry.IsTransferredInDetail != TransferPolicy::DoNotTransfer
                      && ((subledgerJournalAccountEntry.PostingType == LedgerPostingType::LedgerJournal
                           && _showLedgerAccountTypeOnly == true)
                          || _showLedgerAccountTypeOnly == false)
            join AccountingDate from accountingEvent
                where accountingEvent.RecId == subledgerJournalEntry.AccountingEvent
                      && accountingEvent.State == AccountingEventState::Complete
                      && accountingEvent.AccountingDate >= _fromDate
                      && accountingEvent.AccountingDate <= _toDate
            join subledgerJournalAccountEntryDistribution
                where subledgerJournalAccountEntryDistribution.SubledgerJournalAccountEntry == subledgerJournalAccountEntry.RecId
            join Text from generalJournalAccountEntry
                where generalJournalAccountEntry.RecId == subledgerJournalAccountEntry.GeneralJournalAccountEntry
            join TransactionCurrencyAmount, TransactionCurrency from accountingDistribution
                where accountingDistribution.RecId == subledgerJournalAccountEntryDistribution.AccountingDistribution
            join TransactionNumber, TransactionText from _sourceDocumentPostedTransAccEntryTmpDetSourceDoc
                where accountingDistribution.SourceDocumentHeader == _sourceDocumentPostedTransAccEntryTmpDetSourceDoc.SourceDocumentHeaderRecId
            join projectAccountingDistribution
                where projectAccountingDistribution.AccountingDistribution == accountingDistribution.RecId
            join ProjId from projTable
                where projTable.RecId == projectAccountingDistribution.projTable
                      && ((_projId != #Empty
                           && projTable.ProjId == _projId)
                          || _projId == #Empty)
            join CategoryId from projCategory
                where projCategory.RecId == projectAccountingDistribution.projCategory
            exists join _sourceDocumentPostedTransTmpLedgerDim
                where _sourceDocumentPostedTransTmpLedgerDim.LedgerDimension == accountingDistribution.LedgerDimension;
        }
        else
        {
            insert_recordSet _sourceDocumentPostedTransAccEntryTmpDet(
                LedgerVoucher,
                LedgerDimension,
                PostingType,
                PostingTypeDescription,
                DebitCredit,
                TransferPolicy,
                IsCorrection,
                AccountingDate,
                TransText,
                TransactionCurrencyAmount,
                TransactionCurrencyCode,
                TransactionNumber,
                TransactionText,
                ProjectId,
                ProjectCategory)
            select Voucher from subledgerJournalEntry
                where subledgerJournalEntry.Ledger == _currentLedger
            join LedgerDimension, PostingType, _postingTypeDescription, Side, IsTransferredInDetail, IsCorrection from subledgerJournalAccountEntry
                where subledgerJournalAccountEntry.SubledgerJournalEntry == subledgerJournalEntry.RecId
                      && subledgerJournalAccountEntry.IsTransferredInDetail != TransferPolicy::DoNotTransfer
                      && ((subledgerJournalAccountEntry.PostingType == LedgerPostingType::LedgerJournal
                           && _showLedgerAccountTypeOnly == true)
                          || _showLedgerAccountTypeOnly == false)
            join AccountingDate from accountingEvent
                where accountingEvent.RecId == subledgerJournalEntry.AccountingEvent
                      && accountingEvent.State == AccountingEventState::Complete
                      && accountingEvent.AccountingDate >= _fromDate
                      && accountingEvent.AccountingDate <= _toDate
            join subledgerJournalAccountEntryDistribution
                where subledgerJournalAccountEntryDistribution.SubledgerJournalAccountEntry == subledgerJournalAccountEntry.RecId
            join Text from generalJournalAccountEntry
                where generalJournalAccountEntry.RecId == subledgerJournalAccountEntry.GeneralJournalAccountEntry
            join TransactionCurrencyAmount, TransactionCurrency from accountingDistribution
                where accountingDistribution.RecId == subledgerJournalAccountEntryDistribution.AccountingDistribution
            join TransactionNumber, TransactionText from _sourceDocumentPostedTransAccEntryTmpDetSourceDoc
                where accountingDistribution.SourceDocumentHeader == _sourceDocumentPostedTransAccEntryTmpDetSourceDoc.SourceDocumentHeaderRecId
            join projectAccountingDistribution
                where projectAccountingDistribution.AccountingDistribution == accountingDistribution.RecId
            join ProjId from projTable
                where projTable.RecId == projectAccountingDistribution.projTable
                      && ((_projId != #Empty
                           && projTable.ProjId == _projId)
                          || _projId == #Empty)
            join CategoryId from projCategory
                where projCategory.RecId == projectAccountingDistribution.projCategory
            exists join mainAccountLedgerDimViewAccDist
                where mainAccountLedgerDimViewAccDist.LedgerDimensionId == accountingDistribution.LedgerDimension
                      && ((mainAccountLedgerDimViewAccDist.MainAccount   >= _fromMainAccount
                           && mainAccountLedgerDimViewAccDist.MainAccount <= _toMainAccount
                           && _fromMainAccount != #Empty)
                          || _fromMainAccount == #Empty);
        }

        return _sourceDocumentPostedTransAccEntryTmpDet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSourceDocumentPostedTransTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the processed data in the <c>sourceDocumentPostedTransTmp</c> table
    ///     Populates the transactional data from the <c>SourceDocumentPostedTransAccEntryTmpSum</c> table.
    ///     Populates the ledger dimension's specific data conditionally.
    /// </summary>
    /// <param name="_sourceDocumentPostedTransAccEntryTmpSum">
    /// A <c>SourceDocumentPostedTransAccEntryTmpSum</c> table.
    /// </param>
    /// <param name="_showFullLedgerAccount">
    /// A value of <c>ShowFullLedgerAccount</c> control in report parameter form.
    /// </param>
    /// <param name="_showDimensions">
    /// A value of <c>ShowDimensions</c> control in report parameter form.
    /// </param>
    private void insertSourceDocumentPostedTransTmp(
        SourceDocumentPostedTransAccEntryTmpSum _sourceDocumentPostedTransAccEntryTmpSum,
        boolean                                 _showFullLedgerAccount,
        boolean                                 _showDimensions)
    {
        boolean                               transactionFound = true;
        LedgerTransPerJournal                 ledgerTransPerJournal;
        SourceDocumentPostedTransTmpLedgerDim sourceDocumentPostedTransTmpLedgerDim;
        MainAccountLedgerDimensionView        mainAccountLedgerDimensionView;

        if (_showFullLedgerAccount)
        {
            insert_recordSet sourceDocumentPostedTransTmp(
                TransactionsFound,
                DimensionsFound,
                TransactionNumber,
                TransactionText,
                TransText,
                Voucher,
                AccountingDate,
                PostingType,
                CurrencyCode,
                ProjId,
                ProjCategoryId,
                AmountDebit,
                AmountCredit,
                VoucherTransactionCounter, // VoucherTransactionCounter populates from RecId, it is used to group transaction lines with ledger dimension lines in report design.
                IsCorrection,
                Id,
                IdName)
            select
                transactionFound,
                _showDimensions,
                TransactionNumber,
                TransactionText,
                TransText,
                LedgerVoucher,
                AccountingDate,
                PostingTypeDescription,
                TransactionCurrencyCode,
                ProjectId,
                ProjectCategory,
                TransactionCurrencyAmount,
                TransactionCurrencyAmount,
                RecId,
                IsCorrection
            from _sourceDocumentPostedTransAccEntryTmpSum
                join FullyQualifiedAccount, Name from mainAccountLedgerDimensionView
                    where mainAccountLedgerDimensionView.LedgerDimensionId == _sourceDocumentPostedTransAccEntryTmpSum.LedgerDimension;

            if (_showDimensions)
            {
                ledgerTransPerJournal = LedgerTransPerJournal::Three;

                sourceDocumentPostedTransTmpLedgerDim = this.populateDimensions(_sourceDocumentPostedTransAccEntryTmpSum);

                insert_recordSet sourceDocumentPostedTransTmp(
                    DimensionsFound,
                    TransactionNumber,
                    Voucher,
                    VoucherTransactionCounter,
                    Flag,
                    Value,
                    DimensionsName,
                    DimensionAttributeName,
                    Id)
                select
                    _showDimensions,
                    TransactionNumber,
                    LedgerVoucher,
                    RecId,
                    LedgerTransPerJournal
                from _sourceDocumentPostedTransAccEntryTmpSum
                    join Value, Name, DimensionAttributeName
                        from sourceDocumentPostedTransTmpLedgerDim
                            where sourceDocumentPostedTransTmpLedgerDim.LedgerDimension == _sourceDocumentPostedTransAccEntryTmpSum.LedgerDimension
                    join FullyQualifiedAccount from mainAccountLedgerDimensionView
                        where mainAccountLedgerDimensionView.LedgerDimensionId == _sourceDocumentPostedTransAccEntryTmpSum.LedgerDimension;
            }
        }
        else
        {
            insert_recordSet sourceDocumentPostedTransTmp(
                TransactionsFound,
                DimensionsFound,
                TransactionNumber,
                TransactionText,
                TransText,
                Voucher,
                AccountingDate,
                PostingType,
                CurrencyCode,
                ProjId,
                ProjCategoryId,
                AmountDebit,
                AmountCredit,
                VoucherTransactionCounter, // VoucherTransactionCounter populates from RecId, it is used to group transaction lines with ledger dimension lines in report design.
                IsCorrection,
                Id,
                IdName)
            select
                transactionFound,
                _showDimensions,
                TransactionNumber,
                TransactionText,
                TransText,
                LedgerVoucher,
                AccountingDate,
                PostingTypeDescription,
                TransactionCurrencyCode,
                ProjectId,
                ProjectCategory,
                TransactionCurrencyAmount,
                TransactionCurrencyAmount,
                RecId,
                IsCorrection
            from _sourceDocumentPostedTransAccEntryTmpSum
                join MainAccount, Name from mainAccountLedgerDimensionView
                    where mainAccountLedgerDimensionView.LedgerDimensionId == _sourceDocumentPostedTransAccEntryTmpSum.LedgerDimension;

            if (_showDimensions)
            {
                ledgerTransPerJournal = LedgerTransPerJournal::Three;

                sourceDocumentPostedTransTmpLedgerDim = this.populateDimensions(_sourceDocumentPostedTransAccEntryTmpSum);

                insert_recordSet sourceDocumentPostedTransTmp(
                    DimensionsFound,
                    TransactionNumber,
                    Voucher,
                    VoucherTransactionCounter,
                    Flag,
                    Value,
                    DimensionsName,
                    DimensionAttributeName,
                    Id)
                select
                    _showDimensions,
                    TransactionNumber,
                    LedgerVoucher,
                    RecId,
                    LedgerTransPerJournal
                from _sourceDocumentPostedTransAccEntryTmpSum
                    join Value, Name, DimensionAttributeName
                        from sourceDocumentPostedTransTmpLedgerDim
                            where sourceDocumentPostedTransTmpLedgerDim.LedgerDimension == _sourceDocumentPostedTransAccEntryTmpSum.LedgerDimension
                    join MainAccount from mainAccountLedgerDimensionView
                        where mainAccountLedgerDimensionView.LedgerDimensionId == _sourceDocumentPostedTransAccEntryTmpSum.LedgerDimension;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSubLedgerJournalAccEntryTmpSummary</Name>
				<Source><![CDATA[
    private SourceDocumentPostedTransAccEntryTmpSum insertSubLedgerJournalAccEntryTmpSummary(
        SourceDocumentPostedTransAccEntryTmpDet _sourceDocumentPostedTransAccEntryTmpDet,
        boolean                                 _showLedgerAccountTypeOnly)
    {
        SourceDocumentPostedTransAccEntryTmpSum sourceDocumentPostedTransAccEntryTmpSum;
        SourceDocumentPostedTransAccEntryTmpSum sourceDocumentPostedTransAccEntryTmpSumUpdate;
        DictEnum                                ledgerPostingType = new DictEnum(enumName2Id(enumStr(LedgerPostingType)));
        PostingTypeDescription                  postingTypeDescription;

        try
        {
            if (isConnectionSetup)
            {
                this.setUserConnection(sourceDocumentPostedTransAccEntryTmpSum);
                this.setUserConnection(sourceDocumentPostedTransAccEntryTmpSumUpdate);
            }
            else
            {
                this.takeOwnershipOfTempTable(sourceDocumentPostedTransAccEntryTmpSum);
                this.takeOwnershipOfTempTable(sourceDocumentPostedTransAccEntryTmpSumUpdate);
            }
            sourceDocumentPostedTransAccEntryTmpSumUpdate.linkPhysicalTableInstance(sourceDocumentPostedTransAccEntryTmpSum);

            insert_recordSet sourceDocumentPostedTransAccEntryTmpSum(
                TransactionNumber,
                LedgerDimension,
                PostingType,
                DebitCredit,
                TransferPolicy,
                IsCorrection,
                AccountingDate,
                TransactionCurrencyCode,
                TransactionCurrencyAmount,
                ProjectId,
                ProjectCategory,
                TransactionText,
                TransText,
                LedgerVoucher,
                PostingTypeDescription)
            select
                TransactionNumber,
                LedgerDimension,
                PostingType,
                DebitCredit,
                TransferPolicy,
                IsCorrection,
                AccountingDate,
                TransactionCurrencyCode,
                sum(TransactionCurrencyAmount),
                ProjectId,
                ProjectCategory,
                TransactionText,
                TransText,
                LedgerVoucher,
                PostingTypeDescription
            from _sourceDocumentPostedTransAccEntryTmpDet
                group by TransactionNumber,
                         LedgerDimension,
                         PostingType,
                         DebitCredit,
                         TransferPolicy,
                         IsCorrection,
                         AccountingDate,
                         TransactionCurrencyCode,
                         ProjectId,
                         ProjectCategory,
                         TransactionText,
                         TransText,
                         LedgerVoucher,
                         PostingTypeDescription;

            if (!_showLedgerAccountTypeOnly)
            {
                while select PostingType from sourceDocumentPostedTransAccEntryTmpSum
                    group by sourceDocumentPostedTransAccEntryTmpSum.PostingType
                {
                    postingTypeDescription = ledgerPostingType.value2Label(enum2int(sourceDocumentPostedTransAccEntryTmpSum.PostingType));

                    update_recordSet sourceDocumentPostedTransAccEntryTmpSumUpdate
                        setting PostingTypeDescription = postingTypeDescription
                            where sourceDocumentPostedTransAccEntryTmpSumUpdate.PostingType == sourceDocumentPostedTransAccEntryTmpSum.PostingType;
                }
            }
        }
        finally
        {
            if (isConnectionSetup)
            {
                // sourceDocumentPostedTransAccEntryTmpSum and sourceDocumentPostedTransAccEntryTmpSumUpdate are the same temp table.
                // It would be enough to dispose one only.
                this.disposeTempTable(sourceDocumentPostedTransAccEntryTmpSum);
            }
        }

        return sourceDocumentPostedTransAccEntryTmpSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the detailed information of ledger dimensions and its fragmensts.
    /// </summary>
    /// <param name="_sourceDocumentPostedTransAccEntryTmpSum">
    /// A buffer of the <c>SourceDocumentPostedTransAccEntryTmpSum</c> table
    /// </param>
    /// <returns>
    /// The <c>SourceDocumentPostedTransTmpLedgerDim</c> table.
    /// </returns>
    private SourceDocumentPostedTransTmpLedgerDim populateDimensions(SourceDocumentPostedTransAccEntryTmpSum _sourceDocumentPostedTransAccEntryTmpSum)
    {
        DimensionAttributeLevelValueView dimensionAttributeLevelValueView;
        DimensionAttributeRecId          mainAccountDimAttr;
        DimensionAttribute               dimensionAttribute;
        DimensionAttributeValue          dimensionAttributeValue;
        UserConnection                   userConnection;

        sourceDocumentPostedTransTmpLedgerDim sourceDocumentPostedTransTmpLedgerDim;
        sourceDocumentPostedTransTmpLedgerDim sourceDocPostedTransTmpLedgerDimJoin;
        sourceDocumentPostedTransTmpLedgerDim sourceDocPostedTransTmpLedgerDimDistinctDim;

        Name           dimensionAttrName;
        Name           dimensionAttrValueName;
        DimensionValue dimensionAttrValue;

        mainAccountDimAttr = DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);
        userConnection     = this.parmUserConnection();

        sourceDocumentPostedTransTmpLedgerDim.setConnection(userConnection);
        sourceDocPostedTransTmpLedgerDimJoin.setConnection(userConnection);
        sourceDocPostedTransTmpLedgerDimDistinctDim.setConnection(userConnection);

        insert_recordSet sourceDocPostedTransTmpLedgerDimDistinctDim(
            LedgerDimension)
        select LedgerDimension
            from _sourceDocumentPostedTransAccEntryTmpSum
                group by _sourceDocumentPostedTransAccEntryTmpSum.LedgerDimension;

        insert_recordSet sourceDocumentPostedTransTmpLedgerDim(
            DimensionAttributeRecId,
            DimensionAttributeValueRecId,
            LedgerDimension)
        Select
            DimensionAttribute,
            AttributeValueRecId,
            ValueCombinationRecId
        from dimensionAttributeLevelValueView
            where dimensionAttributeLevelValueView.DimensionAttribute != mainAccountDimAttr
        join sourceDocPostedTransTmpLedgerDimDistinctDim
            where sourceDocPostedTransTmpLedgerDimDistinctDim.LedgerDimension == dimensionAttributeLevelValueView.ValueCombinationRecId;

        sourceDocPostedTransTmpLedgerDimJoin.linkPhysicalTableInstance(sourceDocumentPostedTransTmpLedgerDim);

        while select DimensionAttributeRecId from sourceDocumentPostedTransTmpLedgerDim
            group by sourceDocumentPostedTransTmpLedgerDim.DimensionAttributeRecId
                where sourceDocumentPostedTransTmpLedgerDim.DimensionAttributeRecId != 0
        {
            dimensionAttribute = DimensionAttribute::find(sourceDocumentPostedTransTmpLedgerDim.DimensionAttributeRecId);
            dimensionAttrName  = dimensionAttribute.localizedName();

            update_recordSet sourceDocPostedTransTmpLedgerDimJoin
                setting DimensionAttributeName = dimensionAttrName
                    where sourceDocPostedTransTmpLedgerDimJoin.DimensionAttributeRecId == sourceDocumentPostedTransTmpLedgerDim.DimensionAttributeRecId;
        }

        while select DimensionAttributeValueRecId
            from sourceDocumentPostedTransTmpLedgerDim
                group by sourceDocumentPostedTransTmpLedgerDim.DimensionAttributeValueRecId
                    where sourceDocumentPostedTransTmpLedgerDim.DimensionAttributeValueRecId != 0
        {
            dimensionAttributeValue = dimensionAttributeValue::find(sourceDocumentPostedTransTmpLedgerDim.DimensionAttributeValueRecId);
            dimensionAttrValueName  = dimensionAttributeValue.getName();
            dimensionAttrValue      = dimensionAttributeValue.getValue();

            update_recordSet sourceDocPostedTransTmpLedgerDimJoin
                setting Name  = dimensionAttrValueName,
                        Value = dimensionAttrValue
                    where sourceDocPostedTransTmpLedgerDimJoin.DimensionAttributeValueRecId == sourceDocumentPostedTransTmpLedgerDim.DimensionAttributeValueRecId;
        }

        return sourceDocumentPostedTransTmpLedgerDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateQueryRange</Name>
				<Source><![CDATA[
    private void populateQueryRange(
        Query                             _query,
        SourceDocumentPostedTransContract _contract,
        SourceDocument                    _sourceDocument,
        LedgerRecId                       _currentLedger)
    {
        SourceDocumentPostedTransHelperCtrl sourceDocumentPostedTransHelperCtrl;

        QueryBuildDataSource qbdsSourceDocument;
        QueryBuildDataSource qbdsAccountingEvent;
        QueryBuildDataSource qbdsMainAccountLedgerDimensionView;
        QueryBuildDataSource qbdsProjTable;
        QueryBuildDataSource qbdsSubLedgerJournalEntry;

        QueryBuildRange qbrDocumentNumber;
        QueryBuildRange qbrAccountingDateRange;
        QueryBuildRange qbrMainAccountRange;
        QueryBuildRange qbrProjIdRange;
        QueryBuildRange qbrLedger;

        RefTableId  sourceDocumentRelationType;
        RefFieldId  documentNumberRangeField;
        DocumentNum documentNumber;
        ProjId      projId;

        sourceDocumentRelationType = _contract.parmSourceDocumentRelationType();
        documentNumber             = _contract.parmDocumentNumber();

        qbdsAccountingEvent    = _query.dataSourceTable(tableNum(AccountingEvent));
        qbrAccountingDateRange = SysQuery::findOrCreateRange(qbdsAccountingEvent, fieldNum(AccountingEvent, AccountingDate));

        qbrAccountingDateRange.value(SysQuery::range(_contract.parmFromDate(), _contract.parmToDate()));

        qbdsSubLedgerJournalEntry = _query.dataSourceTable(tableNum(SubLedgerJournalEntry));
        qbrLedger                 = SysQuery::findOrCreateRange(qbdsSubLedgerJournalEntry, fieldNum(SubLedgerJournalEntry, Ledger));

        qbrLedger.value(SysQuery::value(_currentLedger));

        qbdsMainAccountLedgerDimensionView = _query.dataSourceTable(tableNum(MainAccountLedgerDimensionView));
        qbrMainAccountRange                = SysQuery::findOrCreateRange(qbdsMainAccountLedgerDimensionView, fieldNum(MainAccountLedgerDimensionView, MainAccount));

        qbrMainAccountRange.value(SysQuery::range(_contract.parmFromMainAccount(), _contract.parmToMainAccount()));

        projId = _contract.parmProjId();

        if (projId)
        {
            // Sets the range value for the Project Id.
            qbdsProjTable = _query.dataSourceTable(tableNum(ProjTable));

            qbrProjIdRange = SysQuery::findOrCreateRange(qbdsProjTable, fieldNum(ProjTable, ProjId));

            qbrProjIdRange.value(SysQuery::value(projId));
        }

        if (_sourceDocument)
        {
            sourceDocumentPostedTransHelperCtrl = SourceDocumentPostedTransHelperCtrl::newForSourceDocument(_sourceDocument);
            sourceDocumentPostedTransHelperCtrl.setRange();

            qbdsSourceDocument = SysQuery::findOrCreateDataSource(
                                    _query,
                                    sourceDocumentRelationType,
                                    tableNum(SourceDocumentHeader));

            qbdsSourceDocument.relations(true);
            qbdsSourceDocument.addGroupByField(sourceDocumentPostedTransHelperCtrl.parmRangeField());
            qbdsSourceDocument.addGroupByField(sourceDocumentPostedTransHelperCtrl.parmDocumentTextField());

            if (documentNumber)
            {
                documentNumberRangeField = sourceDocumentPostedTransHelperCtrl.parmRangeField();
                qbrDocumentNumber        = qbdsSourceDocument.findRange(documentNumberRangeField);

                if (!qbrDocumentNumber)
                {
                    qbrDocumentNumber = qbdsSourceDocument.addRange(documentNumberRangeField);
                }

                qbrDocumentNumber.value(SysQuery::value(documentNumber));
            }
        }

        _query.dataSourceTable(tableNum(SourceDocumentHeader)).addGroupByField(fieldNum(SourceDocumentHeader, RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// This method is used to process the report business logic that is used by the
    /// <c>SourceDocumentPostedTrans</c> report.
    /// </remarks>
    public void processReport()
    {
        SourceDocumentPostedTransTmpLedgerDim   sourceDocumentPostedTransTmpLedgerDim;
        SourceDocumentPostedTransAccEntryTmpDet sourceDocumentPostedTransAccEntryTmpDet;
        SourceDocumentPostedTransAccEntryTmpDet sourceDocumentPostedTransAccEntryTmpDetSourceDoc;
        SourceDocumentPostedTransTmp            sourceDocumentPostedTransTmpJoin;
        SourceDocumentHeader                    sourceDocumentHeader;
        SourceDocument                          sourceDocument;
        SourceDocumentPostedTransHelperDP       sourceDocumentPostedTransHelperDP;
        SourceDocumentPostedTransContract       contract;
        SourceDocumentPostedAccDistView         sourceDocumentPostedAccDistView;

        boolean showLedgerAccountTypeOnly;
        boolean showFullLedgerAccount;
        boolean showDimensions;
        boolean queryHasFilters;

        Query          query;
        QueryRun       queryRun;
        ProjId         projId;
        TransDate      fromDate;
        TransDate      toDate;
        DictEnum       ledgerPostingType;
        Description    postingTypeDescription;
        LedgerRecId    currentLedger = Ledger::current();
        RefTableId     sourceDocumentRelationType;
        MainAccountNum fromMainAccount;
        MainAccountNum toMainAccount;

        contract = this.parmDataContract() as SourceDocumentPostedTransContract;

        showLedgerAccountTypeOnly  = contract.parmShowLedgerAccountTypeOnly();
        showDimensions             = contract.parmShowDimensions();
        showFullLedgerAccount      = contract.parmShowFullLedgerAccount();
        sourceDocumentRelationType = contract.parmSourceDocumentRelationType();
        projId                     = contract.parmProjId();
        fromMainAccount            = contract.parmFromMainAccount();
        toMainAccount              = contract.parmToMainAccount();
        fromDate                   = contract.parmFromDate();
        toDate                     = contract.parmToDate();

        select firstOnly sourceDocumentHeader
        where sourceDocumentHeader.SourceRelationType == sourceDocumentRelationType;

        if (sourceDocumentHeader)
        {
            if (showLedgerAccountTypeOnly)
            {
                ledgerPostingType      = new DictEnum(enumName2Id(enumStr(LedgerPostingType)));
                postingTypeDescription = ledgerPostingType.value2Label(enum2int(ledgerPostingType::LedgerJournal));
            }
                                               
            try
            {
                if (isConnectionSetup)
                {
                    this.setUserConnection(sourceDocumentPostedTransAccEntryTmpDet);
                    this.setUserConnection(sourceDocumentPostedTransTmpLedgerDim);
                    this.setUserConnection(sourceDocumentPostedTransAccEntryTmpDetSourceDoc);
                }
                else
                {
                    this.takeOwnershipOfTempTable(sourceDocumentPostedTransTmp);
                    this.takeOwnershipOfTempTable(sourceDocumentPostedTransTmpJoin);
                    this.takeOwnershipOfTempTable(sourceDocumentPostedTransAccEntryTmpDet);
                    this.takeOwnershipOfTempTable(sourceDocumentPostedTransTmpLedgerDim);
                    this.takeOwnershipOfTempTable(sourceDocumentPostedTransAccEntryTmpDetSourceDoc);
                    sourceDocumentPostedTransTmpJoin.linkPhysicalTableInstance(sourceDocumentPostedTransTmp);
                }

                sourceDocument = SourceDocument::newFromSourceDocumentHeader(sourceDocumentHeader);

                query = this.parmQuery();

                queryHasFilters = SysQuery::queryHasRangesOrFilters(query);

                this.populateQueryRange(
                    query,
                    contract,
                    sourceDocument,
                    currentLedger);

                queryRun = new QueryRun(query);

                sourceDocumentPostedTransHelperDP = SourceDocumentPostedTransHelperDP::newForSourceDocument(sourceDocument, queryRun);

                // Gets the distinct list of SourceDocumentHeader, TransactionNumber and TransactionText
                while (queryRun.next())
                {
                    sourceDocumentHeader = queryRun.get(tableNum(SourceDocumentHeader)) as SourceDocumentHeader;

                    sourceDocumentPostedTransAccEntryTmpDetSourceDoc.SourceDocumentHeaderRecId = sourceDocumentHeader.RecId;

                    sourceDocumentPostedTransHelperDP.setDocumentData();

                    sourceDocumentPostedTransAccEntryTmpDetSourceDoc.TransactionNumber = sourceDocumentPostedTransHelperDP.parmDocumentNumber();
                    sourceDocumentPostedTransAccEntryTmpDetSourceDoc.TransactionText   = sourceDocumentPostedTransHelperDP.parmDocumentText();

                    sourceDocumentPostedTransAccEntryTmpDetSourceDoc.insert();
                }

                if (queryHasFilters)
                {
                    query.clearGroupBy();

                    query.dataSourceTable(tableNum(SourceDocumentPostedAccDistView)).addGroupByField(fieldNum(SourceDocumentPostedAccDistView, LedgerDimension));

                    queryRun = new QueryRun(query);

                    // Gets the disticnt list of Ledger dimensions
                    while (queryRun.next())
                    {
                        sourceDocumentPostedAccDistView = queryRun.get(tableNum(SourceDocumentPostedAccDistView)) as SourceDocumentPostedAccDistView;

                        sourceDocumentPostedTransTmpLedgerDim.LedgerDimension = sourceDocumentPostedAccDistView.LedgerDimension;

                        sourceDocumentPostedTransTmpLedgerDim.insert();
                    }
                }

                if (!projId)
                {
                    //Insert records for non project transactions
                    sourceDocumentPostedTransAccEntryTmpDet = this.insertSourceDocPostedAccEntTmpDet(
                                                                    sourceDocumentPostedTransAccEntryTmpDet,
                                                                    sourceDocumentPostedTransTmpLedgerDim,
                                                                    sourceDocumentPostedTransAccEntryTmpDetSourceDoc,
                                                                    showLedgerAccountTypeOnly,
                                                                    fromDate,
                                                                    toDate,
                                                                    fromMainAccount,
                                                                    toMainAccount,
                                                                    queryHasFilters,
                                                                    postingTypeDescription,
                                                                    currentLedger);
                }

                // Insert records for project transactions
                sourceDocumentPostedTransAccEntryTmpDet = this.insertSourceDocPostedAccEntTmpDetForProj(
                                                                sourceDocumentPostedTransAccEntryTmpDet,
                                                                sourceDocumentPostedTransTmpLedgerDim,
                                                                sourceDocumentPostedTransAccEntryTmpDetSourceDoc,
                                                                showLedgerAccountTypeOnly,
                                                                fromDate,
                                                                toDate,
                                                                fromMainAccount,
                                                                toMainAccount,
                                                                queryHasFilters,
                                                                postingTypeDescription,
                                                                projId,
                                                                currentLedger);

                update_recordSet sourceDocumentPostedTransAccEntryTmpDet
                    setting TransactionCurrencyAmount = -1 * sourceDocumentPostedTransAccEntryTmpDet.TransactionCurrencyAmount
                        where ((sourceDocumentPostedTransAccEntryTmpDet.DebitCredit == DebitCredit::Credit
                                && sourceDocumentPostedTransAccEntryTmpDet.TransactionCurrencyAmount > 0)
                               || (sourceDocumentPostedTransAccEntryTmpDet.DebitCredit == DebitCredit::Debit
                                   && sourceDocumentPostedTransAccEntryTmpDet.TransactionCurrencyAmount < 0));

                this.insertSourceDocumentPostedTransTmp(
                    this.insertSubLedgerJournalAccEntryTmpSummary(
                        sourceDocumentPostedTransAccEntryTmpDet,
                        showLedgerAccountTypeOnly),
                    showFullLedgerAccount,
                    showDimensions);
            }
            finally
            {
                if (isConnectionSetup)
                {
                    this.disposeTempTable(sourceDocumentPostedTransAccEntryTmpDet);
                    this.disposeTempTable(sourceDocumentPostedTransTmpLedgerDim);
                    this.disposeTempTable(sourceDocumentPostedTransAccEntryTmpDetSourceDoc);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUserConnection</Name>
				<Source><![CDATA[
    private void setUserConnection(Common _common)
    {
        UserConnection con = this.parmUserConnection();

        if (con)
        {
            _common.setConnection(con);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>disposeTempTable</Name>
				<Source><![CDATA[
    private void disposeTempTable(Common _common)
    {
        _common.dispose();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>