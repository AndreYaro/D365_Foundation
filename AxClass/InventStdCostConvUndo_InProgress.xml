<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventStdCostConvUndo_InProgress</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventStdCostConvUndo_InProgress extends InventStdCostConvUndo
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reverts the <c>Status</c> value of the <c>InventStdCostConv</c> record buffer from a value of
    ///    <c>InventStdCostConvStatus::InProgress</c> to a value of <c>InventStdCostConvStatus::Ready</c>.
    /// </summary>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    An update conflict was caught in a transaction scope.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    ///    An update conflict could not be recovered.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    A validation failed.
    /// </exception>
    public void run()
    {
        #OCCRetryCount

        try
        {
            ttsbegin;

            inventStdCostConv = InventStdCostConv::find(inventStdCostConv.RecId, true);

            if (!this.validate())
            {
                throw Exception::Error;
            }

            inventStdCostConv.Status = InventStdCostConvStatus::Ready;
            inventStdCostConv.update();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the status can be reverted.
    /// </summary>
    /// <returns>
    ///    true if no errors exist; otherwise, false
    /// </returns>
    public boolean validate()
    {
        boolean ret = true;

        if (!inventStdCostConv.allowUndoInProgressConversion())
        {
            return checkFailed(strFmt("@SYS120300",InventStdCostConvStatus::Ready));
        }

        if (!this.validateItemsConverted())
        {
            ret = false;
        }

        if (!ret)
        {
            ret = checkFailed(strFmt("@SYS120301",InventStdCostConvStatus::Ready));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItemsConverted</Name>
				<Source><![CDATA[
        protected boolean validateItemsConverted()
    {
        InventStdCostConvItem   inventStdCostConvItem;
        boolean                 ret = true;

        select count(RecId)
            from inventStdCostConvItem
            where inventStdCostConvItem.StdCostConvRecId    == inventStdCostConv.RecId
               && inventStdCostConvItem.Status              == InventStdCostConvItemStatus::Converted;

        if (inventStdCostConvItem.RecId)
        {
            ret = checkFailed(strFmt("@SYS120304",inventStdCostConvItem.RecId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Instantiates an <c>InventStdCostConvUndo_InProgress</c> object.
    /// </summary>
    /// <param name="_inventStdCostConv">
    ///    An <c>InventStdCostConv</c> record buffer that must be have the status reverted.
    /// </param>
    /// <returns>
    ///    An <c>InventStdCostConvUndo_InProgress</c> object.
    /// </returns>
    /// <remarks>
    ///    This method should not be called directly. An <c>InventStdCostConvUndo</c> type object should be
    ///    instantiated using the constructor on the <c>InventStdCostConvUndo</c> class.
    /// </remarks>
    public static InventStdCostConvUndo_InProgress construct(InventStdCostConv _inventStdCostConv)
    {
        return new InventStdCostConvUndo_InProgress(_inventStdCostConv);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>