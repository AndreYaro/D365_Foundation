<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustomJournalImportGTDIssueWorkCancel_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustomJournalImportGTDIssueWorkCancel_RU</c> class provides ability to cancel works and revert inventory transactions related to GTD issue.
/// </summary>
internal class CustomJournalImportGTDIssueWorkCancel_RU
{
    private InventCostOnhandCache inventCostOnhandCache;
    private CustomJournalId_RU    customJournalId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes a new instance of <c>CustomJournalImportGTDIssueWorkCancel_RU</c>.
    /// </summary>
    /// <param name = "_customJournalId">The identificator of the journal for processing.</param>
    /// <returns>Initialized instance of the object.</returns>
    public static CustomJournalImportGTDIssueWorkCancel_RU construct(CustomJournalId_RU _customJournalId)
    {
        CustomJournalImportGTDIssueWorkCancel_RU customsJournalGTDWorkCancel = new CustomJournalImportGTDIssueWorkCancel_RU();

        customsJournalGTDWorkCancel.customJournalId = _customJournalId;

        return customsJournalGTDWorkCancel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        WHSWorkTable                         workTable;
        CustomJournalGTDIssueWHSWorkTable_RU customJournalGTDIssueWHSWorkTable;

        ttsbegin;
        while select forupdate workTable
            where workTable.WorkStatus == WHSWorkStatus::Closed
            exists join customJournalGTDIssueWHSWorkTable
                where customJournalGTDIssueWHSWorkTable.WorkId == workTable.WorkId
                && customJournalGTDIssueWHSWorkTable.CustomJournalId == customJournalId
        {
            WHSWorkTable reverseWorkTable;
            reverseWorkTable.data(workTable);
            reverseWorkTable.setWorkId();
            reverseWorkTable.WorkBuildId = WHSWorkTable::getNextWorkCreateId();

            // Work is moving quantities between InventGtdId_RU dimensions. This is not supported by the new warehouse inventory transaction stack, so use InventTrans.
            using (var context = WHSEnforceInventoryTransactionMechanismContext::defaultInventoryTransactionMechanism(WHSInventoryTransactionMechanismEnum::InventTrans))
            {
                reverseWorkTable.insert();
            }

            WHSWorkLine workLine;
            while select workLine
                order by LineNum desc
                where workLine.WorkId == workTable.WorkId
            {
                WHSWorkLine reverseWorkLine;
                reverseWorkLine.data(workLine);
                reverseWorkLine.WorkId = reverseWorkTable.WorkId;
                reverseWorkLine.insert();

                InventTransId parentInventTransId;
                WHSWorkInventTrans workInventTrans;
                while select workInventTrans
                    where workInventTrans.WorkId == workLine.WorkId
                        && workInventTrans.LineNum == workLine.LineNum
                {
                    WHSWorkInventTrans reverseWorkInventTrans;

                    if (!parentInventTransId)
                    {
                        parentInventTransId = workInventTrans.InventTransIdTo;
                    }

                    reverseWorkInventTrans.initFromWorkLine(reverseWorkLine);
                    reverseWorkInventTrans.InventTransIdParent = parentInventTransId;
                    reverseWorkInventTrans.TransDateTime = workInventTrans.TransDateTime;

                    reverseWorkInventTrans.InventDimIdFrom = workInventTrans.InventDimIdTo;
                    reverseWorkInventTrans.InventDimIdTo   = workInventTrans.InventDimIdFrom;
                    reverseWorkInventTrans.InventTransIdFrom = '';
                    reverseWorkInventTrans.InventTransIdTo = '';
                    reverseWorkInventTrans.insert();

                    WHSInvent::moveWorkQuantities(
                        reverseWorkInventTrans,
                        reverseWorkInventTrans.InventDimIdFrom,
                        reverseWorkInventTrans.InventDimIdTo,
                        reverseWorkInventTrans.Qty,
                        0,
                        this.inventCostOnhandCache());

                    parentInventTransId = reverseWorkInventTrans.InventTransIdTo;
                }
                reverseWorkLine.setStatusClosed();
                reverseWorkLine.update();
            }
            WHSWorkTable::updateWorkStatusFromWorkLines(reverseWorkTable.WorkId);

            CustomJournalGTDIssueWHSWorkTable_RU gtdIssueLink;
            gtdIssueLink.customJournalId = customJournalId;
            gtdIssueLink.WorkId = reverseWorkTable.WorkId;
            gtdIssueLink.insert();

            using (WHSWorkInventTransDeletionContext context = WHSWorkInventTransDeletionContext::newFromParms(true))
            {
                WHSWorkTable::performWorkCancelation(workTable, true);
                WHSWorkTable::performWorkCancelation(reverseWorkTable, true);
            }

        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventCostOnhandCache</Name>
				<Source><![CDATA[
    private InventCostOnhandCache inventCostOnhandCache()
    {
        if (!inventCostOnhandCache)
        {
            inventCostOnhandCache = InventCostOnhandCache::construct();
        }

        return inventCostOnhandCache;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>