<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvCalendarControl</Name>
	<SourceCode>
		<Declaration><![CDATA[
[FormControlAttribute('TrvCalendarControl', '/resources/html/TrvCalendar', classStr(TrvCalendarControlBuild))]
public class TrvCalendarControl extends FormTemplateControl
{
    FormProperty AmountTotalProperty;
    FormProperty DayDetailProperty;
    FormProperty CurrentDayProperty;
    FormProperty ItemizedTotalProperty;
    FormProperty RemainingTotalProperty;

    private str dataSourceName;
    private str dateFieldName;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTotalValue</Name>
				<Source><![CDATA[
    delegate void getTotalValue(EventHandlerResult _result) {}

]]></Source>
			</Method>
			<Method>
				<Name>getItemizedValue</Name>
				<Source><![CDATA[
    delegate void getItemizedValue(EventHandlerResult _result) {}

]]></Source>
			</Method>
			<Method>
				<Name>getRemainingValue</Name>
				<Source><![CDATA[
    delegate void getRemainingValue(EventHandlerResult _result) {}

]]></Source>
			</Method>
			<Method>
				<Name>getDayValue</Name>
				<Source><![CDATA[
    delegate void getDayValue(date _date, EventHandlerResult _result) {}

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(FormBuildControl _build, FormRun _formRun)
    {
        super(_build, _formRun);

        this.setTemplateId('TrvCalendarControl');
        this.setResourceBundleName('/resources/html/TrvCalendar');

        CurrentDayProperty = this.addProperty(methodStr(TrvCalendarControl, parmCurrentDay), Types::Date);

        AmountTotalProperty = this.addProperty(methodStr(TrvCalendarControl, parmAmountTotal), Types::String);
        DayDetailProperty = this.addProperty(methodStr(TrvCalendarControl, parmDayDetail), Types::String);
        ItemizedTotalProperty = this.addProperty(methodStr(TrvCalendarControl, parmItemizedTotal), Types::String);
        RemainingTotalProperty = this.addProperty(methodStr(TrvCalendarControl, parmRemainingTotal), Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyBuild</Name>
				<Source><![CDATA[
    public void applyBuild()
    {
        super();

        TrvCalendarControlBuild build = this.build() as TrvCalendarControlBuild;

        if (build)
        {
            this.parmDataSourceName(build.parmTargetDataSourceName());
            this.parmDateFieldName(build.parmDateFieldName());
            
            //
            // Various amounts need to be updated when the bound datasource performs operations
            // Binding event handlers to the needed delegates
            //
            if (this.parmDataSourceName() != '')
            {
                FormDataSource ds = this.formRun().dataSource(this.parmDataSourceName());

                if (ds)
                {
                    if (build.parmDayDetailFieldName())
                    {
                        FormDataObject dataField = ds.object(fieldName2Id(ds.table(), build.parmDayDetailFieldName()));

                        if (dataField)
                        {
                            dataField.onModified += eventhandler(this.dataField_OnModified);
                        }
                    }

                    if (build.parmDayDetailField2Name())
                    {
                        FormDataObject dataField = ds.object(fieldName2Id(ds.table(), build.parmDayDetailField2Name()));

                        if (dataField)
                        {
                            dataField.onModified += eventhandler(this.dataField_OnModified);
                        }
                    }

                    ds.OnDeleted += eventhandler(this.dataSourceModified);
                    ds.OnCreated += eventhandler(this.dataSourceModified);
                    ds.OnWritten += eventhandler(this.dataSourceModified);
                    ds.OnQueryExecuted += eventhandler(this.dataSourceQueried);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    protected void initialize()
    {
        super();

        this.setFilterDate(this.initialDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the date the control should be set to when it initializes.
    /// </summary>
    /// <returns>The date the control should select when initializing.</returns>
    public date initialDate()
    {
        return DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataSourceName</Name>
				<Source><![CDATA[
    private str parmDataSourceName(str _dataSourceName = dataSourceName)
    {
        if (!prmisDefault(_dataSourceName))
        {
            dataSourceName = _dataSourceName;
        }

        return dataSourceName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateFieldName</Name>
				<Source><![CDATA[
    private str parmDateFieldName(str _dateFieldName = dateFieldName)
    {
        if (!prmisDefault(_dateFieldName))
        {
            dateFieldName = _dateFieldName;
        }

        return dateFieldName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentDay</Name>
				<Source><![CDATA[
    [FormPropertyAttribute(FormPropertyKind::Value, 'CurrentDay')]
    private date parmCurrentDay(anytype _currentDay = CurrentDayProperty.parmValue())
    {
        if (!prmisDefault(_currentDay))
        {
            CurrentDayProperty.setValueOrBinding(_currentDay);
        }

        return CurrentDayProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAmountTotal</Name>
				<Source><![CDATA[
    [FormPropertyAttribute(FormPropertyKind::Value, 'TotalAmount')]
    private str parmAmountTotal(anytype _amountTotal = AmountTotalProperty.parmValue())
    {
        if (!prmisDefault(_amountTotal))
        {
            AmountTotalProperty.setValueOrBinding(_amountTotal);
        }

        return AmountTotalProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDayDetail</Name>
				<Source><![CDATA[
    [FormPropertyAttribute(FormPropertyKind::Value, 'DayDetail')]
    private str parmDayDetail(anytype _dayDetail = DayDetailProperty.parmValue())
    {
        if (!prmisDefault(_dayDetail))
        {
            DayDetailProperty.setValueOrBinding(_dayDetail);
        }

        return DayDetailProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemizedTotal</Name>
				<Source><![CDATA[
    [FormPropertyAttribute(FormPropertyKind::Value, 'ItemizedAmount')]
    private str parmItemizedTotal(anytype _itemizedTotal = ItemizedTotalProperty.parmValue())
    {
        if (!prmisDefault(_itemizedTotal))
        {
            ItemizedTotalProperty.setValueOrBinding(_itemizedTotal);
        }

        return ItemizedTotalProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRemainingTotal</Name>
				<Source><![CDATA[
    [FormPropertyAttribute(FormPropertyKind::Value, 'RemainingAmount')]
    private str parmRemainingTotal(anytype _remainingTotal = RemainingTotalProperty.parmValue())
    {
        if (!prmisDefault(_remainingTotal))
        {
            RemainingTotalProperty.setValueOrBinding(_remainingTotal);
        }

        return RemainingTotalProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFilterDateCommand</Name>
				<Source><![CDATA[
    [FormCommandAttribute('SetFilterDate')]
    private void setFilterDateCommand(str _targetDate)
    {
        if (this.allowButtonClickInteraction())
        {
            List dateTimeComponents = strSplit(_targetDate, "T");
            ListEnumerator componentEnumerator = dateTimeComponents.getEnumerator();

            if (componentEnumerator.moveNext())
            {
                date target = str2Date(componentEnumerator.current(), 321);

                if (target)
                {
                    container taskRecorderArgs = [target];
                    using (var scope = SysTaskRecorder::addCommandUserAction('SetFilterDate', this, taskRecorderArgs, literalStr("@TrvCalendarControl:TaskRecording_DateSelectionCommand")))
                    {
                        this.setFilterDate(target);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFilterDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the control's filter to the given date.
    /// </summary>
    /// <param name = "_targetDate">Date to set on the control and that filters the bound datasource.</param>
    public void setFilterDate(date _targetDate)
    {
        FormDataSource ds = this.formRun().dataSource(this.parmDataSourceName());
        SysQuery::findOrCreateRange(ds.queryBuildDataSource(), fieldName2Id(ds.table(), this.parmDateFieldName())).value(queryValue(_targetDate));
        ds.executeQuery();

        this.parmCurrentDay(_targetDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFilterDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current date from the filter.
    /// </summary>
    /// <returns>Date of the current filter for the control.</returns>
    public date getFilterDate()
    {
        return this.parmCurrentDay();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAmountTotalValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the total amount displayed on the control.
    /// </summary>
    private void updateAmountTotalValue()
    {
        str total;

        if (this.getTotalValue)
        {
            EventHandlerResult result = EventHandlerResult::newDefault();
            result.result('');

            this.getTotalValue(result);

            total = result.result();
        }

        this.parmAmountTotal(total);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateItemizedTotalValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the itemized amount displayed on the control.
    /// </summary>
    private void updateItemizedTotalValue()
    {
        str total;

        if (this.getItemizedValue)
        {
            EventHandlerResult result = EventHandlerResult::newDefault();
            result.result('');

            this.getItemizedValue(result);

            total = result.result();
        }

        this.parmItemizedTotal(total);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRemainingTotalValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the amount remaining displayed on the control.
    /// </summary>
    private void updateRemainingTotalValue()
    {
        str total;

        if (this.getRemainingValue)
        {
            EventHandlerResult result = EventHandlerResult::newDefault();
            result.result('');

            this.getRemainingValue(result);

            total = result.result();
        }

        this.parmRemainingTotal(total);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDayDetailValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the day detail value for the given date.
    /// </summary>.
    /// <param name = "_date">The date of the detail value.</param>
    private void updateDayDetailValue(date _date)
    {
        str total;

        if (this.getDayValue)
        {
            EventHandlerResult result = EventHandlerResult::newDefault();
            result.result('');

            this.getDayValue(_date, result);

            total = result.result();
        }

        this.parmDayDetail(total);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataField_OnModified</Name>
				<Source><![CDATA[
    private void dataField_OnModified(FormDataObject sender, FormDataFieldEventArgs e)
    {
        date currentDate = sender.datasource().cursor().(fieldName2Id(sender.datasource().table(), this.parmDateFieldName()));
        this.updateItemizationTotals(currentDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceModified</Name>
				<Source><![CDATA[
    private void dataSourceModified(FormDataSource sender, FormDataSourceEventArgs e)
    {
        date currentDate = sender.cursor().(fieldName2Id(sender.table(), this.parmDateFieldName()));
        this.updateItemizationTotals(currentDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceQueried</Name>
				<Source><![CDATA[
    private void dataSourceQueried(FormDataSource sender, FormDataSourceEventArgs e)
    {
        this.updateAmountTotalValue();

        date currentDate = sender.cursor().(fieldName2Id(sender.table(), this.parmDateFieldName()));
        this.updateItemizationTotals(currentDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateItemizationTotals</Name>
				<Source><![CDATA[
    private void updateItemizationTotals(date _date)
    {
        this.updateItemizedTotalValue();
        this.updateRemainingTotalValue();
        this.updateDayDetailValue(_date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowButtonClickInteraction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if an interaction is allowed given the state of the control.
    /// </summary>
    /// <returns>
    /// true if the interaction is allowed; otherwise, false.
    /// </returns>
    private boolean allowButtonClickInteraction()
    {
        boolean allowInteraction;

        if (this.isDisplayed() && this.isEnabled())
        {
            allowInteraction = true;
        }

        return allowInteraction;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>