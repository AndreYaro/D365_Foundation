<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxEnterpriseBranchNumber_BE</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TaxEnterpriseBranchNumber_BE
{
    #isoCountryRegionCodes
    const Integer CheckMod = 97;
    const Integer BranchLength = 13;
    const Integer EnterpriseNumLength = 12;
    const str NumberRange = '0123456789';
    const str NewLine = '\n';
    const str BTW = 'BTW';
    const str TVA = 'TVA';
    const str AlphaNumeric = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkBranchNumberDigits</Name>
				<Source><![CDATA[
    public boolean checkBranchNumberDigits (TaxBranchNumber _branchNumber)
    {
        boolean ret;
        int     checkComponent, checkDigits, result;

        checkComponent = str2int(substr(strkeep(_branchNumber, NumberRange),1,8));
        checkDigits    = str2int(substr(strkeep(_branchNumber, NumberRange),9,2));

        result = checkComponent mod CheckMod;

        ret = CheckMod - result == checkDigits;
        if (! ret)
        {
            error (strfmt("@SYS94001", _branchNumber));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBranchNumberLength</Name>
				<Source><![CDATA[
    public boolean checkBranchNumberLength (TaxBranchNumber _branchNumber)
    {
        boolean ret;

        ret = (strlen(TaxEnterpriseBranchNumber_BE::taxEnterpriseNumberWithoutLeadingText(_branchNumber)) == BranchLength);
        if (! ret)
        {
            error (strfmt("@SYS94003",_branchNumber));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnterpriseDigits</Name>
				<Source><![CDATA[
    public boolean checkEnterpriseDigits (TaxEnterpriseNumber _enterprisenumber)
    {
        boolean ret;
        int     checkComponent, checkDigits, result;

        checkComponent = str2int(substr(strkeep(_enterprisenumber, NumberRange),1,8));
        checkDigits    = str2int(substr(strkeep(_enterprisenumber, NumberRange),9,2));

        result = checkComponent mod CheckMod;

        ret = CheckMod - result == checkDigits;
        if (! ret)
        {
            error (strfmt("@SYS94000", _enterprisenumber));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnterpriseLength</Name>
				<Source><![CDATA[
    public boolean checkEnterpriseLength (TaxEnterpriseNumber _enterprisenumber)
    {
        boolean ret;

        ret = (strlen(TaxEnterpriseBranchNumber_BE::taxEnterpriseNumberWithoutLeadingText(_enterprisenumber)) == EnterpriseNumLength);
        if (! ret)
        {
            error (strfmt("@SYS94002", _enterprisenumber));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVatNumEnterprise</Name>
				<Source><![CDATA[
    public boolean checkVatNumEnterprise (TaxEnterpriseNumber _enterpriseNumber, VATNum _vatNum)
    {
        boolean ret = true;

        ret = strkeep(_enterpriseNumber, NumberRange) == strkeep(_vatNum,NumberRange);

        if (!ret)
        {
            error("@SYS94004");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBranchNumber</Name>
				<Source><![CDATA[
    public static boolean checkBranchNumber(TaxBranchNumber _branchNumber)
    {
        boolean ret = true;
        TaxEnterpriseBranchNumber_BE taxEnterpriseBranchNumber_BE = new TaxEnterpriseBranchNumber_BE();

        if (_branchNumber)
        {
            ret = ret && taxEnterpriseBranchNumber_BE.checkBranchNumberLength(_branchNumber);
            if (ret)
            {
                ret = ret && taxEnterpriseBranchNumber_BE.checkBranchNumberDigits(_branchNumber);
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnterPriseNumber</Name>
				<Source><![CDATA[
    public static boolean checkEnterPriseNumber(TaxEnterpriseNumber _enterpriseNumber, VATNum _vatNum = '', boolean _checkVAT = true)
    {
        boolean ret = true;
        TaxEnterpriseBranchNumber_BE taxEnterpriseBranchNumber_BE = new TaxEnterpriseBranchNumber_BE();

        if (_enterpriseNumber)
        {
            ret = ret && taxEnterpriseBranchNumber_BE.checkEnterpriseLength(_enterpriseNumber);
            if (ret)
            {
                ret = ret && taxEnterpriseBranchNumber_BE.checkEnterpriseDigits(_enterpriseNumber);
            }
            if (ret && _checkVAT && _vatNum)
            {
                ret = ret && taxEnterpriseBranchNumber_BE.checkVatNumEnterprise(_enterpriseNumber, _vatNum);
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnterpriseNumDuplicates</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks a customer or vendor for duplicates of the specified enterprise number without leading text
    ///    and displays an error message if found.
    /// </summary>
    /// <param name="_taxEnterpriseNumberWithoutLeadingText">
    ///    The enterprise number for which to check.
    /// </param>
    /// <param name="_vatNum">
    ///    The VAT number of the customer or vendor.
    /// </param>
    /// <param name="_accountNum">
    ///    The account number of the customer or vendor.
    /// </param>
    /// <param name="_moduleCustVend">
    ///    The current module of the customer or vendor.
    /// </param>
    /// <returns>
    ///    true if no duplicates are found or if the user accepts the error message; otherwise, false.
    /// </returns>

    private static boolean checkEnterpriseNumDuplicates(
        TaxEnterpriseNumber _taxEnterpriseNumberWithoutLeadingText,
        CustVendAC          _accountNum,
        ModuleCustVend      _moduleCustVend)
    {
        CustTable                       duplicateCustTable;
        VendTable                       duplicateVendTable;
        boolean                         ret = true;
        DirPartyTable                   dirPartyTable;
        DirPartyLocation                dirPartyLocation;
        LogisticsPostalAddress          logisticsPostalAddress;
        LogisticsAddressCountryRegion   logisticsAddressCountryRegion;
        str                             message = '';

        LogisticsAddressCountryRegionId countryRegionIdBE = LogisticsAddressCountryRegion::findByISOCode(#isoBE).CountryRegionId;
        RegNumView regNumView;

        while select AccountNum from duplicateVendTable
            join Name from regNumView
            where regNumView.DirPartyTableRecId == duplicateVendTable.Party &&
                regNumView.IsPrimary == NoYes::Yes &&
                regNumView.TaxRegistrationTypesList == TaxRegistrationTypesList::UID &&
                regNumView.CountryRegionId == countryRegionIdBE &&
                (regNumView.RegistrationNumber like strfmt('*%1', _taxEnterpriseNumberWithoutLeadingText))
        {
            if (TaxEnterpriseBranchNumber_BE::taxEnterpriseNumberWithoutLeadingText(regNumView.RegistrationNumber) == _taxEnterpriseNumberWithoutLeadingText
                && (_moduleCustVend == ModuleCustVend::Cust || duplicateVendTable.AccountNum != _accountNum))
            {
                message = strfmt("@SYS183522", message, duplicateVendTable.AccountNum, regNumView.Name);
            }
        }

        while select AccountNum from duplicateCustTable
            join Name from regNumView
            where regNumView.DirPartyTableRecId == duplicateCustTable.Party &&
                regNumView.IsPrimary == NoYes::Yes &&
                regNumView.TaxRegistrationTypesList == TaxRegistrationTypesList::UID &&
                regNumView.CountryRegionId == countryRegionIdBE &&
                (regNumView.RegistrationNumber like strfmt('*%1', _taxEnterpriseNumberWithoutLeadingText))
        {
            if (TaxEnterpriseBranchNumber_BE::taxEnterpriseNumberWithoutLeadingText(regNumView.RegistrationNumber) == _taxEnterpriseNumberWithoutLeadingText
                && (_moduleCustVend == ModuleCustVend::Vend || duplicateCustTable.AccountNum != _accountNum))
            {
                message = strfmt("@SYS183521", message, duplicateCustTable.AccountNum, regNumView.Name);
            }
        }

        if (message)
        {
            message = strdel(message, strlen(message), -1); // needed for correct formatting, remove trailing ','
            message = strdel(message, 0, 1); // needed for correct formatting, remove leading space ' '

            message = strfmt("@SYS183524", _taxEnterpriseNumberWithoutLeadingText, NewLine,
             message, "@SYS73804");
            if (Box::yesNo(message, DialogButton::Yes) == DialogButton::No)
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVatObligation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the enterprise number is VAT obliged.
    /// </summary>
    /// <param name="_enterprisenumber">
    ///    The enterprise number to check.
    /// </param>
    /// <returns>
    ///    true if the enterprise number is VAT obliged; otherwise, false
    /// </returns>
    /// <remarks>
    ///    An enterprise number is VAT obliged if it contains TVA or BTW as leading text before the number,
    ///    For example, TVA 0000.000.097 is a VAT obliged enterprise number.
    /// </remarks>
    public static boolean checkVatObligation(TaxEnterpriseNumber _enterprisenumber)
    {
        boolean             ret = false;
        TaxEnterpriseNumber enterpriseNumber;

        enterpriseNumber = strupr(strkeep(_enterpriseNumber, AlphaNumeric));
        // if _enterpriseNumber contains TVA or BTW
        if (strscan(_enterpriseNumber, TVA, 1, strlen(enterpriseNumber)) > 0 || strscan(_enterpriseNumber, BTW, 1, strlen(enterpriseNumber)) > 0)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVatNumUIDAccordance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates relation between Enterprise number and Tax exempt number.
    /// </summary>
    /// <param name = "_enterpriseNumber">Value of enterprise number.</param>
    /// <param name = "_dirPartyRecId">The recod id of party.</param>
    /// <remarks>
    /// Gives a message in case of inaccordance between Enterprise number and Tax exempt number.
    /// </remarks>
    public static void validateVatNumUIDAccordance(TaxEnterpriseNumber _enterpriseNumber, DirPartyRecId _dirPartyRecId)
    {
        VATNum vatNum = TaxRegistration::categoryTaxRegistration(_dirPartyRecId, TaxRegistrationTypesList::TAXID, LogisticsAddressCountryRegion::findByISOCode(#isoBE).CountryRegionId).RegistrationNumber;

        if (vatNum)
        {
            TaxEnterpriseNumber taxEnterpriseNumberWithoutLeadingText = TaxEnterpriseBranchNumber_BE::taxEnterpriseNumberWithoutLeadingText(_enterpriseNumber);
            boolean isVatObliged = TaxEnterpriseBranchNumber_BE::checkVatObligation(_enterpriseNumber);

            // If Enterprise Number has leading text(VAT obliged) check if EnterpriseNum(number + dots) is same as VATNum
            if (isVatObliged && 
                vatNum != taxEnterpriseNumberWithoutLeadingText)
            {
                warning(strFmt("@RegistrationNumbers:TheTaxExemptNumberDiffersFromTheEnterpriseNumber", DirPartyTable::findrec(_dirPartyRecId).Name, vatNum, taxEnterpriseNumberWithoutLeadingText));
            }
            else if (!isVatObliged &&
                     _enterpriseNumber) // VatNum should be empty for Non VAT obliged case
            {
                warning(strFmt("@RegistrationNumbers:ThePartyContainsAValueForTheTaxExemptNumber", DirPartyTable::findrec(_dirPartyRecId).Name, vatNum));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TaxEnterpriseBranchNumber_BE construct()
    {
        return new TaxEnterpriseBranchNumber_BE();
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeBTWTVA</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes any special symbols from a company enterprise number.
    /// </summary>
    /// <param name="_enterprisenumber">
    /// The enterprise number to process.
    /// </param>
    /// <returns>
    /// The updated enterprise number without any special symbols.
    /// </returns>
    /// <remarks>
    /// These symbols will be presented in number if this is VAT obligated company.An enterprise number is
    /// VAT obliged if it contains TVA or BTW as leading text before the number, For example, TVA
    /// 0000.000.097 is a VAT obliged enterprise number.
    /// </remarks>
    public static TaxEnterpriseNumber removeBTWTVA(TaxEnterpriseNumber _enterprisenumber)
    {
        int pos;
        const Integer StrLen = 3;

        //remove space and convert to upper case
        _enterprisenumber = strupr(_enterprisenumber);

        //Remove 'TVA' and 'BTW', if any
        pos = strscan(_enterprisenumber, TVA, 1, strlen(_enterprisenumber));
        if (pos > 0)
        {
            _enterprisenumber = strdel(_enterprisenumber, pos, StrLen);
            pos = 0;
        }

        pos = strscan(_enterprisenumber, BTW, 1, strlen(_enterprisenumber));
        if (pos > 0)
        {
            _enterprisenumber = strdel(_enterprisenumber, pos, StrLen);
        }

        return _enterprisenumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDuplicates</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the specified enterprise number occurs in the <c>TaxVatNumTable</c> table, and then
    ///    if it is found, searches the customer or vendor records for duplicates in the <c>VATNum</c> field
    ///    and displays a message if found.
    /// </summary>
    /// <param name="_enterpriseNumber">
    ///    The EnterpriseNumber entered by user in the Customer/Vendor Form
    /// </param>
    /// <param name="_vatNum">
    ///    VatNum value from the Customer/vendor Form
    /// </param>
    /// <param name="_accountNum">
    ///    Account Number of the Customer/Vendor
    /// </param>
    /// <param name="_moduleCustVend">
    ///    Current Module: Customer/Vendor
    /// </param>
    /// <returns>
    ///    True if no errors or if user accepts the errors, else false
    /// </returns>
    /// <remarks>
    ///    If the specified enterprise number is not found in the <c>TaxVatNumTable</c> table, the
    ///    <c>checkEnterpriseNumDuplicates</c> method is called to search for duplicates of the enterprise
    ///    number in the enterprise number field.
    /// </remarks>
    public static boolean validateDuplicates(
        TaxEnterpriseNumber _enterpriseNumber,
        VATNum              _vatNum,
        CustVendAC          _accountNum,
        ModuleCustVend      _moduleCustVend)
    {
        boolean                                 ret = true;
        str                                     message;
        CustTable                               duplicateCustTable;
        VendTable                               duplicateVendTable;
        TaxEnterpriseNumber                     taxEnterpriseNumberWithoutLeadingText;
        LogisticsAddressCountryRegion           logisticsAddressCountryRegion;
        TaxVATNumTable                          taxVATNumTable;
        DirPartyTable                           dirPartyTable;
        DirPartyLocation                        dirPartyLocation;
        TaxRegistration                         taxRegistration;
        TaxRegistrationTypeApplicabilityRule    taxRegistrationTypeApplicabilityRule;
        TaxRegistrationLegislationTypes         taxRegistrationLegislationTypes;
        LogisticsPostalAddress                  logisticsPostalAddress;

        taxEnterpriseNumberWithoutLeadingText = TaxEnterpriseBranchNumber_BE::taxEnterpriseNumberWithoutLeadingText(_enterpriseNumber);

        LogisticsAddressCountryRegionId countryRegionIdBE = LogisticsAddressCountryRegion::findByISOCode(#isoBE).CountryRegionId;

        // First check TaxVatNumTable if the enterprise number already exists and find out the Customer/Vendor using that Enterprise Number
        select firstonly RecId
            from taxVATNumTable
            where taxVATNumTable.vatNum == taxEnterpriseNumberWithoutLeadingText &&
                  taxVATNumTable.CountryRegionId == countryRegionIdBE;

        //Enterprise Number 10 digit exist in Tax Exempt Number table
        if (taxVATNumTable.RecId)
        {
            message = '';

            while select AccountNum
                from duplicateCustTable
                where duplicateCustTable.vatNum == taxEnterpriseNumberWithoutLeadingText
                join Name from dirPartyTable
                    where dirPartyTable.RecId == duplicateCustTable.Party
            {
                if (_moduleCustVend == ModuleCustVend::Vend || duplicateCustTable.AccountNum != _accountNum)
                {
                    message = strfmt("@SYS183521", message, duplicateCustTable.AccountNum, dirPartyTable.Name);
                }
            }

            RegNumView regNumView;

            select firstonly AccountNum
                from duplicateCustTable
                join regNumView
                where regNumView.DirPartyTableRecId == duplicateCustTable.Party &&
                      regNumView.IsPrimary == true &&
                      regNumView.RegistrationNumber == taxEnterpriseNumberWithoutLeadingText && 
                      regNumView.TaxRegistrationTypesList == TaxRegistrationTypesList::TAXID &&
                      regNumView.CountryRegionId == countryRegionIdBE;

            if (duplicateCustTable.AccountNum)
            {
                if (_moduleCustVend == ModuleCustVend::Vend || duplicateCustTable.AccountNum != _accountNum)
                {
                    message = strfmt("@SYS183521", message, duplicateCustTable.AccountNum, dirPartyTable.Name);
                }
            }

            while select AccountNum
                from duplicateVendTable
                where duplicateVendTable.vatNum == taxEnterpriseNumberWithoutLeadingText
                join Name from dirPartyTable
                    where dirPartyTable.RecId == duplicateVendTable.Party
            {
                if (_moduleCustVend == ModuleCustVend::Cust || duplicateVendTable.AccountNum != _accountNum)
                {
                    message = strfmt("@SYS183522", message, duplicateVendTable.AccountNum, dirPartyTable.Name);
                }
            }

            select firstonly AccountNum
                from duplicateVendTable
                join regNumView
                where regNumView.DirPartyTableRecId == duplicateVendTable.Party &&
                      regNumView.IsPrimary == true &&
                      regNumView.RegistrationNumber == taxEnterpriseNumberWithoutLeadingText &&
                      regNumView.TaxRegistrationTypesList == TaxRegistrationTypesList::TAXID &&
                      regNumView.CountryRegionId == countryRegionIdBE;

            if (duplicateVendTable.AccountNum)
            {
                if (_moduleCustVend == ModuleCustVend::Cust || duplicateVendTable.AccountNum != _accountNum)
                {
                    message = strfmt("@SYS183521", message, duplicateVendTable.AccountNum, dirPartyTable.Name);
                }
            }

            if (message)
            {
                message = strdel(message, strlen(message), -1); // needed for correct formatting, remove trailing ','
                message = strfmt("@SYS183523", message, '');
                warning(message);
            }
        }

        if (ret) // Check for duplicates on Enterprise Number
        {
            ret = TaxEnterpriseBranchNumber_BE::checkEnterpriseNumDuplicates(
                taxEnterpriseNumberWithoutLeadingText,
                _accountNum,
                _moduleCustVend);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxEnterpriseNumberWithoutLeadingText</Name>
				<Source><![CDATA[
    static private TaxEnterpriseNumber taxEnterpriseNumberWithoutLeadingText(TaxEnterpriseNumber _enterpriseNumber)
    {
        return strkeep(_enterpriseNumber, '0123456789.');
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>