<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransArchiveTaskBundleHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventTransArchiveTaskBundleHelper
{
    public static const int defaultBundleSize = 5000;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createAndAssignBundle</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public static void createAndAssignBundle(SysGuidString _sessionId, int _bundleSize)
    {
        InventTransArchiveTask inventTransArchiveTask;

        select firstonly maxof(BundleId), maxof(BundleCategory) from inventTransArchiveTask
            where inventTransArchiveTask.SessionId == _sessionId;

        int64 bundleId = 1 + inventTransArchiveTask.BundleId;

        if (!InventTransArchiveTaskBundlePerfFlight::instance().isEnabled())
        {
            InventTransArchiveTaskBundleHelper::assignBundleCategory(_sessionId);
        }

        int currCategory = 0;
        int maxBundleCategory = inventTransArchiveTask.BundleCategory;

        while (currCategory <= maxBundleCategory)
        {
            bundleId = InventTransArchiveTaskBundleHelper::assignBundleId(currCategory, bundleId, _bundleSize, _sessionId);
            currCategory++;
        }

        InventTransArchiveProcessHistoryTable inventTransArchiveProcessHistoryTable =
            InventTransArchiveProcessHistoryTable::findBySessionId(_sessionId, true);

        if (inventTransArchiveProcessHistoryTable.BundleCount == 0)
        {
            ttsbegin;

            inventTransArchiveProcessHistoryTable.BundleCount = bundleId - 1;
            inventTransArchiveProcessHistoryTable.update();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignBundleId</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public static int64 assignBundleId(int _categoryId, int64 _bundleId, int _bundleSize, SysGuidString _sessionId)
    {
        if (!InventTransArchiveTask::existsBundleCategoryNotAssignedBundleId(_sessionId, _categoryId))
        {
            return _bundleId;
        }

        int updatedCount = _bundleSize;
        Statement statement;

        while (updatedCount == _bundleSize)
        {
            Connection connection = new Connection();

            try
            {
                connection.ttsbegin();

                str sqlStatement =
                InventTransArchiveTaskBundleHelper::buildInventTransArchiveTaskAssignBundleStatement(_bundleSize, _bundleId, _categoryId, _sessionId);

                statement = connection.createStatement();
                updatedCount = statement.executeUpdateWithParameters(sqlStatement, SqlParams::create());

                connection.ttscommit();
            }
            finally
            {
                if (statement != null)
                {
                    if (updatedCount > 0)
                    {
                        _bundleId++;
                    }

                    statement.close();
                }

                if (connection)
                {
                    connection.finalize();
                    connection = null;
                }
            }
        }

        return _bundleId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventTransArchiveTaskAssignBundleStatement</Name>
				<Source><![CDATA[
    protected static str buildInventTransArchiveTaskAssignBundleStatement(int _bundleSize, int64 _currentBundleId, int _categoryId, SysGuidString _sessionId)
    {
        /*
            Update statement should be like:
            UPDATE TOP(1000) T1 SET BundleId = 1 FROM InventTransArchiveTask T1
            WHERE BundleCategory = 1
            AND BundleId = 0
            AND DataAreaId = N'USMF'
            AND Partition = 5637144576
        */

        SysSqlSystem sqlSystem = new SysSqlSystem();

        str directSQL = "";
        directSQL += strFmt("UPDATE TOP(%1) T1 SET %2 = %3 ", _bundleSize, fieldStr(InventTransArchiveTask, BundleId), _currentBundleId);
        directSQL += strFmt("FROM %1 T1 ",      tableStr(InventTransArchiveTask));
        directSQL += strFmt("WHERE %1 = %2 ",   fieldStr(InventTransArchiveTask, SessionId),  sqlSystem.sqlLiteral(_sessionId));
        directSQL += strFmt("AND %1 = %2 ",     fieldStr(InventTransArchiveTask, BundleCategory), _categoryId);
        directSQL += strFmt("AND %1 = 0 ",      fieldStr(InventTransArchiveTask, BundleId));
        directSQL += strFmt("AND %1 = %2 ",     fieldStr(InventTransArchiveTask, DataAreaId), sqlSystem.sqlLiteral(curExt()));
        directSQL += strFmt("AND %1 = %2 ",     fieldStr(InventTransArchiveTask, Partition), sqlSystem.sqlLiteral(getCurrentPartitionRecId()));

        return directSQL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaskBundleSize</Name>
				<Source><![CDATA[
    [SysObsolete('This method is obsolete, use parmBundleSize() in InventTransArchiveService class instead', false,  14\3\2024)]
    public static void setTaskBundleSize(int _taskBundleSize)
    {
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taskBundleSize</Name>
				<Source><![CDATA[
    [SysObsolete('This method is obsolete, use parmBundleSize() in InventTransArchiveService class instead', false,  14\3\2024)]
    public static int taskBundleSize()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextBundle</Name>
				<Source><![CDATA[
    public static int64 getNextBundle(SysGuidString _sessionId)
    {
        if (!_sessionId)
        {
            throw error(strFmt("@SYS118114", funcName()));
        }

        int64 currentBundleId =
            (select firstonly minof(BundleId) from inventTransArchiveTask
                where inventTransArchiveTask.SessionId == _sessionId).BundleId;

        return currentBundleId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignBundleCategory</Name>
				<Source><![CDATA[
    protected static void assignBundleCategory(SysGuidString _sessionId)
    {
        InventTransArchiveTask inventTransArchiveTask;

        // Assign bundle category based on IsWHSItem, mustBeClosed and IsTransTypeOnlyAffectsLocationAndBelow
        // When IsWHSItem = No, IsTransTypeOnlyAffectsLocationAndBelow always equals to 'No'
        update_recordset inventTransArchiveTask
            setting
                BundleCategory = 0
            where inventTransArchiveTask.IsWHSItem == NoYes::No
                && inventTransArchiveTask.mustBeClosed == NoYes::No
                && inventTransArchiveTask.IsTransTypeOnlyAffectsLocationAndBelow == NoYes::No
                && inventTransArchiveTask.BundleId == 0
                && inventTransArchiveTask.sessionId == _sessionId;

        update_recordset inventTransArchiveTask
            setting
                BundleCategory = 1
            where inventTransArchiveTask.IsWHSItem == NoYes::No
                && inventTransArchiveTask.mustBeClosed == NoYes::Yes
                && inventTransArchiveTask.IsTransTypeOnlyAffectsLocationAndBelow == NoYes::No
                && inventTransArchiveTask.BundleId == 0
                && inventTransArchiveTask.sessionId == _sessionId;

        update_recordset inventTransArchiveTask
            setting
                BundleCategory = 2
            where inventTransArchiveTask.IsWHSItem == NoYes::Yes
                && inventTransArchiveTask.mustBeClosed == NoYes::No
                && inventTransArchiveTask.IsTransTypeOnlyAffectsLocationAndBelow == NoYes::No
                && inventTransArchiveTask.BundleId == 0
                && inventTransArchiveTask.sessionId == _sessionId;

        update_recordset inventTransArchiveTask
            setting
                BundleCategory = 3
            where inventTransArchiveTask.IsWHSItem == NoYes::Yes
                && inventTransArchiveTask.mustBeClosed == NoYes::No
                && inventTransArchiveTask.IsTransTypeOnlyAffectsLocationAndBelow == NoYes::Yes
                && inventTransArchiveTask.BundleId == 0
                && inventTransArchiveTask.sessionId == _sessionId;

        update_recordset inventTransArchiveTask
            setting
                BundleCategory = 4
            where inventTransArchiveTask.IsWHSItem == NoYes::Yes
                && inventTransArchiveTask.mustBeClosed == NoYes::Yes
                && inventTransArchiveTask.IsTransTypeOnlyAffectsLocationAndBelow == NoYes::No
                && inventTransArchiveTask.BundleId == 0
                && inventTransArchiveTask.sessionId == _sessionId;

        update_recordset inventTransArchiveTask
            setting
                BundleCategory = 5
            where inventTransArchiveTask.IsWHSItem == NoYes::Yes
                && inventTransArchiveTask.mustBeClosed == NoYes::Yes
                && inventTransArchiveTask.IsTransTypeOnlyAffectsLocationAndBelow == NoYes::Yes
                && inventTransArchiveTask.BundleId == 0
                && inventTransArchiveTask.sessionId == _sessionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackProcessingTime</Name>
				<Source><![CDATA[
    public static void trackProcessingTime(SysGuidString _sessionId, real _durationMs)
    {
        ttsbegin;
        InventTransArchiveProcessHistoryTable inventTransArchiveProcessHistoryTable =
            InventTransArchiveProcessHistoryTable::findBySessionId(_sessionId, true);

        inventTransArchiveProcessHistoryTable.DurationMs += _durationMs;
        inventTransArchiveProcessHistoryTable.update();
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>