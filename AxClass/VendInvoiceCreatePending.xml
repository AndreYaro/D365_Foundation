<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceCreatePending</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class to create pending vendor invoice from exception handling form.
/// </summary>
public class VendInvoiceCreatePending
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static VendInvoiceCreatePending construct()
    {
        return new VendInvoiceCreatePending();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        VendInvoiceCreatePending vendorInvoiceCreatePending = VendInvoiceCreatePending::construct();

        if (_args.dataset() == tableNum(VendorInvoiceHeaderStaging) && _args.record())
        {
            FormRun formRun = _args.caller();

            VendorInvoiceHeaderStaging headerTable = _args.record();
            vendorInvoiceCreatePending.createPendingInvoice(headerTable);
            
            formRun.close();
        }
        else
        {
            throw error("@DMF:DMFInvalidBuffer", funcname());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected internal void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPendingInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes logic for creating the pending vendor invoice.
    /// </summary>
    /// <param name = "headerTable">The <c>VendorInvoiceHeaderStaging</c> table buffer.</param>
    internal void createPendingInvoice(VendorInvoiceHeaderStaging headerTable)
    {  
        VendInvoiceCreatePending::selectAllVendorInvoiceStagingRelatedRecords(headerTable);

        str vendorInvoiceHeaderEntityName;
        container entityList;
             
        // The import was via a composite entity
        if (this.isCompositeEntity(headerTable))
        {
            entityList = this.findAllEntityNamesForCompositeEntity(headerTable);
            vendorInvoiceHeaderEntityName = this.findCompositeHeaderEntityName(headerTable);
        }
        // The import was via a non-composite entity
        else
        {
            entityList = this.findAllEntityNamesForNonCompositeEntity(headerTable);   
            vendorInvoiceHeaderEntityName = conpeek(entityList, 1);
        }
            
        DMFDefinitionGroupExecution defGrpExecution = DMFDefinitionGroupExecution::find(headerTable.DefinitionGroup, vendorInvoiceHeaderEntityName, headerTable.ExecutionId);
        this.DMFMenuFunctionActions(defGrpExecution, entityList);

        Box::info("@AccountsPayable:PendingVendorInvoiceCreationScheduled");
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectAllVendorInvoiceStagingRelatedRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// This is to set IsSelected fields of <c>VendorInvoiceHeaderStaging</c> table record and its related child records.
    /// </summary>
    /// <param name = "_headerTable">The <c>VendorInvoiceHeaderStaging</c> table buffer.</param>
    public static void selectAllVendorInvoiceStagingRelatedRecords(VendorInvoiceHeaderStaging _headerTable)
    {
        VendorInvoiceHeaderStaging headerTable;
        VendorInvoiceLineStaging lineTable;
        VendorInvoiceSubLineStaging subLineTable;
        VendorInvoiceDocumentAttachmentStaging documentAttachmentTable;

        ttsbegin;
        headerTable.skipEvents(true);
        headerTable.skipDataMethods(true);
        
        update_recordset headerTable
            setting IsSelected = NoYes::No
                    where headerTable.ExecutionId == _headerTable.ExecutionId
                       && headerTable.DefinitionGroup  == _headerTable.DefinitionGroup;

        update_recordset headerTable
                setting IsSelected = NoYes::Yes
                    where headerTable.HeaderReference == _headerTable.HeaderReference
                       && headerTable.ExecutionId == _headerTable.ExecutionId
                       && headerTable.DefinitionGroup  == _headerTable.DefinitionGroup;

        lineTable.skipEvents(true);
        lineTable.skipDataMethods(true);
        
        update_recordset lineTable
            setting IsSelected = NoYes::No
                    where lineTable.ExecutionId == _headerTable.ExecutionId
                       && lineTable.DefinitionGroup  == _headerTable.DefinitionGroup;
       
         // The DMF UI assumes the user will validate the errors before rerunning the import. Therefore, vendor invoice lines are not picked up by DMF
        // if they previously had errors. By setting TransferStatus to NotStarted, this will pick up all the lines/attachments associated with the header.

        update_recordset lineTable
                setting IsSelected = NoYes::Yes, TransferStatus = DMFTransferStatus::NotStarted
                    where lineTable.HeaderReference == _headerTable.HeaderReference
                       && lineTable.ExecutionId == _headerTable.ExecutionId
                       && lineTable.DefinitionGroup  == _headerTable.DefinitionGroup;
        
        subLineTable.skipEvents(true);
        subLineTable.skipDataMethods(true);

        update_recordset subLineTable
            setting IsSelected = NoYes::No
                where subLineTable.ExecutionId == _headerTable.ExecutionId
                    && subLineTable.DefinitionGroup  == _headerTable.DefinitionGroup;

        update_recordset subLineTable
            setting IsSelected = NoYes::Yes, TransferStatus = DMFTransferStatus::NotStarted
                where subLineTable.InvoiceLineReference == _headerTable.HeaderReference
                    && subLineTable.ExecutionId == _headerTable.ExecutionId
                    && subLineTable.DefinitionGroup  == _headerTable.DefinitionGroup;


        documentAttachmentTable.skipEvents(true);
        documentAttachmentTable.skipDataMethods(true);
        
        update_recordset documentAttachmentTable
            setting IsSelected = NoYes::No
                    where documentAttachmentTable.ExecutionId == _headerTable.ExecutionId
                       && documentAttachmentTable.DefinitionGroup  == _headerTable.DefinitionGroup;

        update_recordset documentAttachmentTable
               setting IsSelected = NoYes::Yes, TransferStatus = DMFTransferStatus::NotStarted
                    where documentAttachmentTable.HeaderReference == _headerTable.HeaderReference
                       && documentAttachmentTable.ExecutionId == _headerTable.ExecutionId
                       && documentAttachmentTable.DefinitionGroup  == _headerTable.DefinitionGroup;
        ttscommit;

    }

]]></Source>
			</Method>
			<Method>
				<Name>isCompositeEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current vendor invoice import was through composite entity.
    /// </summary>
    /// <param name = "_headerTable">The <c>VendorInvoiceHeaderStaging</c> table buffer.</param>
    internal boolean isCompositeEntity(VendorInvoiceHeaderStaging _headerTable)
    {
        DMFEntity dMFEntityRecord;
        DMFDefinitionGroupExecution dMFDefinitionGroupExecutionRecord;
        
        select firstonly dMFDefinitionGroupExecutionRecord
            where dMFDefinitionGroupExecutionRecord.ExecutionId == _headerTable.ExecutionId
                && dMFDefinitionGroupExecutionRecord.DefinitionGroup == _headerTable.DefinitionGroup
            exists join dMFEntityRecord
                where dMFEntityRecord.EntityType == DMFEntityTypes::CompositEntity
                    && dMFDefinitionGroupExecutionRecord.Entity == dMFEntityRecord.EntityName;
        
        return dMFDefinitionGroupExecutionRecord.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAllEntityNamesForCompositeEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds all the entity names of the composite entity.
    /// </summary>
    /// <param name = "_headerTable">The <c>VendorInvoiceHeaderStaging</c> table buffer.</param>
    internal container findAllEntityNamesForCompositeEntity(VendorInvoiceHeaderStaging _headerTable)
    {
        DMFEntity dMFEntityRecord;
        DMFDefinitionGroupExecution dMFDefinitionGroupExecutionRecord;
        container entityList;

        while select dMFEntityRecord
            where dMFEntityRecord.EntityType != DMFEntityTypes::CompositEntity
            exists join dMFDefinitionGroupExecutionRecord
                where dMFDefinitionGroupExecutionRecord.ExecutionId == _headerTable.ExecutionId
                    && dMFDefinitionGroupExecutionRecord.DefinitionGroup == _headerTable.DefinitionGroup
                    && dMFDefinitionGroupExecutionRecord.Entity == dMFEntityRecord.EntityName
        {
            entityList += [dMFEntityRecord.EntityName];
        }
        
        return entityList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCompositeHeaderEntityName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the header entity name of the composite entity.
    /// </summary>
    /// <param name = "_headerTable">The <c>VendorInvoiceHeaderStaging</c> table buffer.</param>
    internal str findCompositeHeaderEntityName(VendorInvoiceHeaderStaging _headerTable)
    {
        DMFEntity dMFEntityRecord;
        DMFDefinitionGroupExecution dMFDefinitionGroupExecutionRecord;
        str vendorInvoiceHeaderEntityName;

        select firstonly dMFEntityRecord
            where dMFEntityRecord.CompositeEntitySequence == 1
            exists join dMFDefinitionGroupExecutionRecord
                where dMFDefinitionGroupExecutionRecord.ExecutionId == _headerTable.ExecutionId
                    && dMFDefinitionGroupExecutionRecord.DefinitionGroup == _headerTable.DefinitionGroup
                    && dMFDefinitionGroupExecutionRecord.Entity == dMFEntityRecord.EntityName;
        
        if (dMFEntityRecord)
        {
            vendorInvoiceHeaderEntityName = dMFEntityRecord.EntityName;
        }

        return vendorInvoiceHeaderEntityName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAllEntityNamesForNonCompositeEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the entity names of the non-composite entity.
    /// </summary>
    /// <param name = "_headerTable">The <c>VendorInvoiceHeaderStaging</c> table buffer.</param>
    internal container findAllEntityNamesForNonCompositeEntity(VendorInvoiceHeaderStaging _headerTable)
    {
        DMFDefinitionGroupExecution vendorInvoiceHeaderEntity = VendInvoiceCreatePending::findVendorInvoiceEntity(_headerTable.DefinitionGroup, _headerTable.ExecutionId, tableNum(VendorInvoiceHeaderEntity));
        DMFDefinitionGroupExecution vendorInvoiceLineEntity = VendInvoiceCreatePending::findVendorInvoiceEntity(_headerTable.DefinitionGroup, _headerTable.ExecutionId, tableNum(VendorInvoiceLineEntity));
        DMFDefinitionGroupExecution vendorInvoiceSubLineEntity = VendInvoiceCreatePending::findVendorInvoiceEntity(_headerTable.DefinitionGroup, _headerTable.ExecutionId, tableNum(VendorInvoiceSubLineEntity));
        DMFDefinitionGroupExecution vendInvoiceDocumentAttachmentEntity = VendInvoiceCreatePending::findVendorInvoiceEntity(_headerTable.DefinitionGroup, _headerTable.ExecutionId, tableNum(VendorInvoiceDocumentAttachmentEntity));

        container entityList = [vendorInvoiceHeaderEntity.Entity];

        if (vendorInvoiceLineEntity.Entity)
        {
            entityList += [vendorInvoiceLineEntity.Entity];
        }

        if (vendorInvoiceSubLineEntity.Entity)
        {
            entityList += [vendorInvoiceSubLineEntity.Entity];
        }

        if (vendInvoiceDocumentAttachmentEntity.Entity)
        {
            entityList += [vendInvoiceDocumentAttachmentEntity.Entity];
        }

        return entityList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DMFMenuFunctionActions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform DMF related tasks.
    /// </summary>
    /// <param name = "defGrpExecution">The <c>DMFDefinitionGroupExecution</c> table buffer.</param>
    /// <param name = "entityList">Container having the entity names of either composite or non-composite entity.</param>
    internal void DMFMenuFunctionActions(DMFDefinitionGroupExecution defGrpExecution, container entityList)
    {
        NoYes selectedData = NoYes::Yes;
        NoYes errorData = NoYes::No;
        NoYes skipFormNavigation = NoYes::Yes;

        Args argsMarker = new Args();
        argsMarker.record(defGrpExecution);
        argsMarker.parm(con2Str(entityList));
        MenuFunction menuFunction = new MenuFunction(menuitemActionStr(DMFDefinitionGroupExecutionReRunMarker), MenuItemType::Action);
        if (!menuFunction || !menuFunction.checkAccessRights())
        {
            throw error(strFmt("@SYS104222", menuitemActionStr(DMFDefinitionGroupExecutionReRunMarker)));
        }
        menuFunction.run(argsMarker);

        // Set the execution parameters to send to DMFRunTargetAsync
        DMFWriteExecutionParameters dmfWriteExecutionParameters = DMFWriteExecutionParameters::construct();
        dmfWriteExecutionParameters.parmSelectedData(selectedData);
        dmfWriteExecutionParameters.parmErrorStatus(errorData);
        dmfWriteExecutionParameters.parmSkipFormNavigation(skipFormNavigation);
            
        Args argsAsync = new Args();
        argsAsync.record(defGrpExecution);
        argsAsync.parmObject(dmfWriteExecutionParameters);
        menuFunction = new MenuFunction(menuitemActionStr(DMFRunTargetAsync), MenuItemType::Action);
        if (!menuFunction || !menuFunction.checkAccessRights())
        {
            throw error(strFmt("@SYS104222", menuitemActionStr(DMFRunTargetAsync)));
        }
        menuFunction.run(argsAsync);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVendorInvoiceEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>DMFDefinitionGroupExecution</c> record for currecnt execution based on definition group and table num.
    /// </summary>
    /// <param name = "_definitionGroup">Definition group name</param>
    /// <param name = "_executionId">Execution Id</param>
    /// <param name = "_entityId">Table Id</param>
    /// <returns> A <c>DMFDefinitionGroupExecution</c> record </returns>
    public static DMFDefinitionGroupExecution findVendorInvoiceEntity(DMFDefinitionGroupName _definitionGroup, DMFExecutionId _executionId, TableId _entityId)
    {
        DMFDefinitionGroupExecution dmfDefinitionGroupExecution;
        DMFEntity dmfEntity;
        str aotName = tableId2Name(_entityId);

        while select EntityName from dmfEntity
            order by dmfEntity.EntityName asc
                where dmfEntity.targetEntity == aotName
        {
            dmfDefinitionGroupExecution = DMFDefinitionGroupExecution::find(_definitionGroup, dmfEntity.EntityName, _executionId);

            if (dmfDefinitionGroupExecution)
            {
                return dmfDefinitionGroupExecution;
            }
        }

        return dmfDefinitionGroupExecution;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>