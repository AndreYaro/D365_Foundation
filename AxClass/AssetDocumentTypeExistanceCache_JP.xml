<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDocumentTypeExistanceCache_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to manage the cache of the existance of
/// <c>AssetDocumentEntry_JP</c> of a specific <c>AssetDocumentType_JP</c>.
/// </summary>
class AssetDocumentTypeExistanceCache_JP
{
    #AssetDepCalculation_JP
    SysGlobalObjectCache    cache;
    GlobalObjectCacheScope  scope;
    container               key;
    AssetId                 assetId;
    AssetBookId             assetBookId;
    AssetDocumentType_JP    assetDocumentType;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clear the cache.
    /// </summary>
    public void clearCache()
    {
        cache.clear(scope);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExistance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if there are <c>AssetDocumentEntry_JP</c> records in specific type
    /// represented by this instance exist.
    /// </summary>
    /// <returns>
    /// The cached value.
    /// </returns>
    public boolean getExistance()
    {
        container result;
        boolean   value;

        result = cache.find(scope, [key]);
        if (conNull() != result)
        {
            [value] = result;
        }

        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the cache for <c>AssetDocumentEntry_JP</c> of a specific type
    /// represented by this instance exist.
    /// </summary>
    /// <returns>
    /// If the cache has been set.
    /// </returns>
    public boolean isSet()
    {
        container result;

        result = cache.find(scope, [key]);
        return result != conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new instance of <c>AssetDocumentTypeExistanceCache_JP</c>.
    /// </summary>
    /// <param name="_assetId">
    /// The asset id.
    /// </param>
    /// <param name="_assetBookId">
    /// The asset book id or asset depreciation book id
    /// </param>
    /// <param name="_type">
    /// The AssetDocumentType_JP that want to be cached.
    /// </param>
    private void new(AssetId _assetId, AssetBookId _assetBookId, AssetDocumentType_JP _type)
    {
        assetId = _assetId;
        assetBookId = _assetBookId;
        assetDocumentType = _type;

        scope = AssetDocumentTypeExistanceCache_JP::getCacheScopeStr(_type);
        key = [_assetId, _assetBookId];

        cache = classFactory.globalObjectCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExistance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the existance to true
    /// </summary>
    /// <param name="_val">
    /// The new value
    /// </param>
    public void setExistance(boolean _val)
    {
        cache.insert(scope, [key], [_val]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCacheForAssetDocType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clear all cache of an <c>AssetDocumentType_JP</c>.
    /// </summary>
    /// <param name="_type">
    /// The <c>AssetDocumentType_JP</c>
    /// </param>
    public static void clearCacheForAssetDocType(AssetDocumentType_JP _type)
    {
        GlobalObjectCacheScope localScope = AssetDocumentTypeExistanceCache_JP::getCacheScopeStr(_type);
        SysGlobalObjectCache   localCache = classFactory.globalObjectCache();
        localCache.clear(localScope);
    }

]]></Source>
			</Method>
			<Method>
				<Name>Construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct an instance of <c>AssetDocumentTypeExistanceCache_JP</c> base on asset id, book id and AssetDocumentType_JP.
    /// </summary>
    /// <param name="_assetId">
    /// The asset id.
    /// </param>
    /// <param name="_assetBookId">
    /// The book id.
    /// </param>
    /// <param name="_type">
    /// The <c>AssetDocumentType_JP</c>
    /// </param>
    /// <returns>
    /// A newly created instance of <c>AssetDocumentTypeExistanceCache_JP</c>
    /// </returns>
    public static AssetDocumentTypeExistanceCache_JP Construct(AssetId _assetId, AssetBookId _assetBookId, AssetDocumentType_JP _type)
    {
        return new AssetDocumentTypeExistanceCache_JP(_assetId, _assetBookId, _type);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCacheScopeStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cache scope identifier for cache of the existance of
    /// <c>AssetDocumentEntry_JP</c> of a specific <c>AssetDocumentType_JP</c>.
    /// </summary>
    /// <param name="_type">
    /// The AssetDocumentType.
    /// </param>
    /// <returns>
    /// The identifier of the existance of <c>AssetDocumentEntry_JP</c>
    /// of a specific <c>AssetDocumentType_JP</c>.
    /// </returns>
    private static str getCacheScopeStr(AssetDocumentType_JP _type)
    {
        return strFmt('%1 %2 %3', #AssetDocTypeExistanceCacheScope, enum2int(_type), curext());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>