<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPeriodPostingSelectCost</Name>
	<SourceCode>
		<Declaration><![CDATA[
class   ProjPeriodPostingSelectCost extends ProjPeriodPostingSelect
{
    DialogField             dialogCost;
    DialogField             dialogEmpl;
    DialogField             dialogItem;
    DialogField             dialogProjLedgerStatus;
    DialogGroup             dialogGroupCostSales;

    DialogGroup             dialogGroupProjType;
    DialogField             dialogTimeMaterial;
    DialogField             dialogInternal;
    DialogField             dialogTransDate;

    TransDate               transActionDate;

    ProjActivateTrans       queryCost;
    ProjActivateTrans       queryEmpl;
    ProjActivateTrans       queryItem;

    ProjLedgerStatus        projLedgerStatus;

    ProjInternal            projInternal;
    ProjTimeMaterial        projTimeMaterial;

    QueryBuildRange         costTransStatusPosted, costTransStatusProposal,
                            emplTransStatusPosted, emplTransStatusProposal,
                            itemTransStatusPosted, itemTransStatusProposal;

    QueryBuildRange         emplTransId;

    QueryBuildDataSource    emplDataSource,
                            emplDataSourceCost,
                            costDataSource,
                            costDataSourceCost,
                            itemDataSource,
                            itemDataSourceCost;

    QueryBuildRange         queryRangeInternal,
                            queryRangeTimeMaterial;

    QueryBuildRange         itemTransDate,
                            itemLedgerStatus,
                            itemProjId,
                            itemLineType1,
                            itemLineType2,
                            itemLineType3,
                            itemLineType4,
                            itemLineType5,
                            itemLineType6,
                            itemLineType7;

    QueryBuildRange         emplTransDate,
                            emplLedgerStatus1,
                            emplLedgerStatus2,
                            emplProjId;

    QueryBuildRange         costTransDate,
                            costLedgerStatus,
                            costProjId;

    boolean enableProjMultipleContractLinesForProjectFeature = ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled();

    #Define.CurrentVersion(5)

    #LOCALMACRO.CurrentList
        queryCost,
        queryEmpl,
        queryItem,
        projLedgerStatus,
        fromDate,
        toDate,
        projInternal,
        projTimeMaterial,
        transactionDate
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>account</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount account(ProjPost _projPost,ProjFundingSourceRefId _fundingSourceId )
    {
        return _projPost.debitAccountCostValueLedgerDimension(_fundingSourceId  );
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountOffset</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountOffset(ProjPost _projPost , ProjFundingSourceRefId _fundingSourceId )
    {
            return _projPost.creditAccountCostValueLedgerDimension( _fundingSourceId );
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMST</Name>
				<Source><![CDATA[
    public AmountMST amountMST(ProjTrans _projTrans)
    {
        return _projTrans.transCostMST();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPostTrans</Name>
				<Source><![CDATA[
    public boolean checkPostTrans(
        ProjTrans           _projTrans)
    {
        ProjTable           projTable   = ProjTable::find(_projTrans.projId());
        ProjEmplTrans       projEmplTrans;
        ProjEmplTransSale   projEmplTransSale;
        ProjCostTrans       projCostTrans;
        ProjCostTransSale   projCostTransSale;
        ProjItemTrans       projItemTrans;
        ProjItemTransSale   projItemTransSale;
        ProjTrans           projTransSale;
        container           con;
        Query               locQuery;
        QueryRun            locQueryRun;

        boolean checkPostTransSale(ProjTrans _projTransSale)
        {
            if (_projTransSale.ledgerSalesPosted())
            {
                return false;
            }

            if (_projTransSale.invoiced())
            {
                return false;
            }

            return true;
        }

        // Skips the selection of transactions where project stage is closed/finished.
        if (projTable.Status == ProjStatus::Completed)
        {
            return false;
        }

        if (this.enableProjMultipleContractLinesForProjectFeature)
        {
            if (projTable.ProjInvoiceProjId)
            {
                PSAContractLineItems contractLine = ProjMultipleContractLinesForProjectFeatureHelper::getProjContractLineByContractIdTransType(projTable.ProjId, projTable.ProjInvoiceProjId, _projTrans.transType());
                if (!contractLine || contractLine.BillingMethod == ProjContractBillingMethod::FixedPrice)
                {
                    return false;
                }
            }
            else
            {
                return false;
            }
        }
        else
        {
            if ((projTable.Type == ProjType::Cost) ||
                (projTable.Type == ProjType::FixedPrice) ||
                (projTable.Type == ProjType::Investment) ||
                (projTable.Type == ProjType::Time))
            {
                return false;
            }

            if (! projInternal     && (projTable.Type == ProjType::Internal))
            {
                return false;
            }

            if (! projTimeMaterial && (projTable.Type == ProjType::TimeMaterial))
            {
                return false;
            }
        }

        if (projLedgerStatus == ProjLedgerStatus::BalanceSheet || projLedgerStatus == ProjLedgerStatus::None)
        {
            switch (_projTrans.transType())
            {
                case ProjTransType::Hour:
                    projEmplTrans = ProjEmplTrans::find(_projTrans.transId());
                    con = ProjEmplTransSale::findForCostRefRecId(_projTrans.recId());
                    locQuery = new Query(con);
                    locQueryRun = new QueryRun(locQuery);
                    while (locQueryRun.next())
                    {
                        projEmplTransSale = locQueryRun.get(tableNum(ProjEmplTransSale));
                        projTransSale = ProjTrans::newProjEmplTransSale(projEmplTrans, projEmplTransSale);
                        if (!checkPostTransSale(projTransSale))
                        {
                            return false;
                        }
                    }
                    break;

                case ProjTransType::Cost:
                    projCostTrans = ProjCostTrans::find(_projTrans.transId());
                    con = ProjCostTransSale::findForCostRefRecId(_projTrans.recId());
                    locQuery = new Query(con);
                    locQueryRun = new QueryRun(locQuery);
                    while (locQueryRun.next())
                    {
                        projCostTransSale = locQueryRun.get(tableNum(ProjCostTransSale));
                        projTransSale = ProjTrans::newProjCostTransSale(projCostTrans, projCostTransSale);
                        if (!checkPostTransSale(projTransSale))
                        {
                            return false;
                        }
                    }
                    break;

                case ProjTransType::Item:
                    projItemTrans = ProjItemTrans::find(_projTrans.transId());
                    con = ProjItemTransSale::findForCostRefRecId(_projTrans.recId());
                    locQuery = new Query(con);
                    locQueryRun = new QueryRun(locQuery);
                    while (locQueryRun.next())
                    {
                        projItemTransSale = locQueryRun.get(tableNum(ProjItemTransSale));
                        projTransSale = ProjTrans::newProjItemTransSale(projItemTrans, projItemTransSale);
                        if (!checkPostTransSale(projTransSale))
                        {
                            return false;
                        }
                    }
                    break;
            }

            if (projLedgerStatus == ProjLedgerStatus::BalanceSheet)
            {
                if (!_projTrans.projLineProperty().ToBeCapitalize)
                {
                    return false;
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costSales</Name>
				<Source><![CDATA[
    protected ProjCostSales costSales()
    {
        return ProjCostSales::Cost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCost</Name>
				<Source><![CDATA[
    private void createCost()
    {
        ProjCostTrans           projCostTrans;
        ProjCostTransCost       projCostTransCost;
        ProjTrans               projTrans;
        ProjPost                projPost;
        Query                   costQuery;
        QueryBuildDataSource    costQbds;
        QueryBuildRange         transIdQbr;
        QueryRun                costQueryRun;

        projCostTrans = queryRun.get(tableNum(ProjCostTrans));

        costQuery = new Query();
        costQbds = costQuery.addDataSource(tableNum(ProjCostTransCost));

        transIdQbr = costQbds.addRange(fieldNum(ProjCostTransCost,TransId));
        transIdQbr.value(projCostTrans.TransId);

        this.setDialogRangesCostCost(costQbds);

        costQueryRun = new QueryRun(costQuery);
        while (costQueryRun.next())
        {
            projCostTransCost = costQueryRun.get(tableNum(ProjCostTransCost));
            projTrans = ProjTrans::newProjCostTransCost(projCostTrans, projCostTransCost);

            if (this.checkPostTrans(projTrans))
            {
                this.findOrInsertTmpPeriodic(projTrans);
                this.insertTmpPeriodicCost(projTrans);
                projPost = ProjPost::newProjTrans_TrxDetail(projCostTrans, projCostTransCost, projLedgerStatus);
                this.insertTmpPeriodicLedger(projPost,projTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEmpl</Name>
				<Source><![CDATA[
    private void createEmpl()
    {
        ProjEmplTrans           projEmplTrans;
        ProjEmplTransCost       projEmplTransCost;
        ProjTrans               projTrans;
        ProjPost                projPost;
        Query                   costQuery;
        QueryBuildDataSource    costQbds;
        QueryBuildRange         transIdQbr;
        QueryRun                costQueryRun;

        projEmplTrans = queryRun.get(tableNum(ProjEmplTrans));

        costQuery = new Query();
        costQbds = costQuery.addDataSource(tableNum(ProjEmplTransCost));

        transIdQbr = costQbds.addRange(fieldNum(ProjEmplTransCost,TransId));
        transIdQbr.value(projEmplTrans.TransId);

        this.setDialogRangesEmplCost(costQbds);

        costQueryRun = new QueryRun(costQuery);
        while (costQueryRun.next())
        {
            projEmplTransCost = costQueryRun.get(tableNum(ProjEmplTransCost));
            projTrans = ProjTrans::newProjEmplTransCost(projEmplTrans, projEmplTransCost);

            if (this.checkPostTrans(projTrans))
            {
                this.findOrInsertTmpPeriodic(projTrans);
                this.insertTmpPeriodicCost(projTrans);
                projPost = ProjPost::newProjTrans_TrxDetail(projEmplTrans, projEmplTransCost, projLedgerStatus);
                this.insertTmpPeriodicLedger(projPost,projTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createItem</Name>
				<Source><![CDATA[
    private void createItem()
    {
        ProjItemTrans           projItemTrans;
        ProjItemTransCost       projItemTransCost;
        ProjTrans               projTrans;
        ProjPost                projPost;
        Query                   costQuery;
        QueryBuildDataSource    costQbds;
        QueryBuildRange         inventTransIdQbr;
        QueryBuildRange         projAdjustRefIdQbr;
        QueryRun                costQueryRun;

        projItemTrans = queryRun.get(tableNum(ProjItemTrans));

        costQuery = new Query();
        costQbds = costQuery.addDataSource(tableNum(ProjItemTransCost));

        inventTransIdQbr = costQbds.addRange(fieldNum(ProjItemTransCost,InventTransId));
        inventTransIdQbr.value(projItemTrans.InventTransId);

        projAdjustRefIdQbr = costQbds.addRange(fieldNum(ProjItemTransCost,ProjAdjustRefId));
        projAdjustRefIdQbr.value(projItemTrans.ProjAdjustRefId);

        this.setDialogRangesItemCost(costQbds);

        costQueryRun = new QueryRun(costQuery);
        while (costQueryRun.next())
        {
            projItemTransCost = costQueryRun.get(tableNum(ProjItemTransCost));
            projTrans = ProjTrans::newProjItemTransCost(projItemTransCost);

            if (this.checkPostTrans(projTrans))
            {
                this.findOrInsertTmpPeriodic(projTrans);
                this.insertTmpPeriodicCost(projTrans);
                projPost = ProjPost::newProjTrans_TrxDetail(projItemTrans, projItemTransCost, projLedgerStatus);
                this.insertTmpPeriodicLedger(projPost,projTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    public void createTrans()
    {
        delete_from tmpProjPeriodicCost;
        delete_from tmpProjPeriodicSale;
        delete_from tmpProjPeriodicLedger;

        this.setDialogRanges();

        // Perform separate queries for each of the choosen transaction types
        // to improve performance since less DB calls are made
        costDataSource.enabled(false);
        costDataSourceCost.enabled(false);
        itemDataSource.enabled(false);
        itemDataSourceCost.enabled(false);
        emplDataSource.enabled(false);
        emplDataSourceCost.enabled(false);

        if (queryEmpl)
        {
            emplDataSource.enabled(true);
            emplDataSourceCost.enabled(true);

            while (queryRun.next())
            {
                if (queryRun.changed(tableNum(ProjEmplTrans)))
                {
                    this.createEmpl();
                }
            }

            emplDataSource.enabled(false);
            emplDataSourceCost.enabled(false);
            queryRun.reset();
        }

        if (queryCost)
        {
            costDataSource.enabled(true);
            costDataSourceCost.enabled(true);

            while (queryRun.next())
            {
                if (queryRun.changed(tableNum(ProjCostTrans)))
                {
                    this.createCost();
                }
            }

            costDataSource.enabled(false);
            costDataSourceCost.enabled(false);
            queryRun.reset();
        }

        if (queryItem)
        {
            itemDataSource.enabled(true);
            itemDataSourceCost.enabled(true);

            while (queryRun.next())
            {
                if (queryRun.changed(tableNum(ProjItemTrans)))
                {
                    this.createItem();
                }
            }

            itemDataSource.enabled(false);
            itemDataSourceCost.enabled(false);
            queryRun.reset();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryCost</Name>
				<Source><![CDATA[
    void initQueryCost()
    {
        costProjId                      = costDataSource.findRange(fieldNum(ProjCostTrans,ProjId));
        if (! costProjId)
        {
            costProjId                  = costDataSource.addRange(fieldNum(ProjCostTrans,ProjId));
        }

        costTransDate                   = costDataSource.findRange(fieldNum(ProjCostTrans,TransDate));
        if (! costTransDate)
        {
            costTransDate               = costDataSource.addRange(fieldNum(ProjCostTrans,TransDate));
        }

        costProjId.status(RangeStatus::Hidden);
        costTransDate.status(RangeStatus::Hidden);

        costTransStatusPosted           = costDataSourceCost.findRange(fieldNum(ProjCostTransCost,TransStatus),1);
        if (! costTransStatusPosted)
        {
            costTransStatusPosted       = costDataSourceCost.addRange(fieldNum(ProjCostTransCost,TransStatus));
        }

        costTransStatusProposal         = costDataSourceCost.findRange(fieldNum(ProjCostTransCost,TransStatus),2);
        if (! costTransStatusProposal)
        {
            costTransStatusProposal     = costDataSourceCost.addRange(fieldNum(ProjCostTransCost,TransStatus));
        }

        costLedgerStatus                = costDataSourceCost.findRange(fieldNum(ProjCostTransCost,LedgerStatusCost));
        if (! costLedgerStatus)
        {
            costLedgerStatus            = costDataSourceCost.addRange(fieldNum(ProjCostTransCost,LedgerStatusCost));
        }

        costTransStatusPosted.status(RangeStatus::Hidden);
        costTransStatusProposal.status(RangeStatus::Hidden);
        costLedgerStatus.status(RangeStatus::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryEmpl</Name>
				<Source><![CDATA[
    void initQueryEmpl()
    {
        emplProjId                  = emplDataSource.findRange(fieldNum(ProjEmplTrans,ProjId));
        if (! emplProjId)
        {
            emplProjId              = emplDataSource.addRange(fieldNum(ProjEmplTrans,ProjId));
        }

        emplTransDate               = emplDataSource.findRange(fieldNum(ProjEmplTrans,TransDate));
        if (! emplTransDate)
        {
            emplTransDate           = emplDataSource.addRange(fieldNum(ProjEmplTrans,TransDate));
        }

        emplProjId.status(RangeStatus::Hidden);
        emplTransDate.status(RangeStatus::Hidden);

        emplTransStatusPosted       = emplDataSourceCost.findRange(fieldNum(ProjEmplTransCost,TransStatus),1);
        if (! emplTransStatusPosted)
        {
            emplTransStatusPosted   = emplDataSourceCost.addRange(fieldNum(ProjEmplTransCost,TransStatus));
        }

        emplTransStatusProposal     = emplDataSourceCost.findRange(fieldNum(ProjEmplTransCost,TransStatus),2);
        if (! emplTransStatusProposal)
        {
            emplTransStatusProposal = emplDataSourceCost.addRange(fieldNum(ProjEmplTransCost,TransStatus));
        }

        emplLedgerStatus1           = emplDataSourceCost.findRange(fieldNum(ProjEmplTransCost,LedgerStatusCost),1);
        if (! emplLedgerStatus1)
        {
            emplLedgerStatus1       = emplDataSourceCost.addRange(fieldNum(ProjEmplTransCost,LedgerStatusCost));
        }

        emplLedgerStatus2           = emplDataSourceCost.findRange(fieldNum(ProjEmplTransCost,LedgerStatusCost),2);
        if (! emplLedgerStatus2)
        {
            emplLedgerStatus2       = emplDataSourceCost.addRange(fieldNum(ProjEmplTransCost,LedgerStatusCost));
        }

        emplTransStatusPosted.status(RangeStatus::Hidden);
        emplTransStatusProposal.status(RangeStatus::Hidden);
        emplLedgerStatus1.status(RangeStatus::Hidden);
        emplLedgerStatus2.status(RangeStatus::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryItem</Name>
				<Source><![CDATA[
    void initQueryItem()
    {
        itemLineType1 = itemDataSource.findRange(fieldNum(ProjItemTrans,TransactionOrigin),1);
        if (! itemLineType1)
        {
            itemLineType1   = itemDataSource.addRange(fieldNum(ProjItemTrans, TransactionOrigin));
        }
        itemLineType1.value(queryValue(ProjOrigin::ItemRequirement));
        itemLineType1.status(RangeStatus::Hidden);

        itemLineType2 = itemDataSource.findRange(fieldNum(ProjItemTrans,TransactionOrigin),2);
        if (! itemLineType2)
        {
            itemLineType2   = itemDataSource.addRange(fieldNum(ProjItemTrans, TransactionOrigin));
        }
        itemLineType2.value(queryValue(ProjOrigin::PurchaseOrder));
        itemLineType2.status(RangeStatus::Hidden);

        itemLineType3 = itemDataSource.findRange(fieldNum(ProjItemTrans,TransactionOrigin),3);
        if (! itemLineType3)
        {
            itemLineType3   = itemDataSource.addRange(fieldNum(ProjItemTrans, TransactionOrigin));
        }
        itemLineType3.value(queryValue(ProjOrigin::ItemJournal));
        itemLineType3.status(RangeStatus::Hidden);

        itemLineType4 = itemDataSource.findRange(fieldNum(ProjItemTrans,TransactionOrigin),4);
        if (! itemLineType4)
        {
            itemLineType4   = itemDataSource.addRange(fieldNum(ProjItemTrans, TransactionOrigin));
        }
        itemLineType4.value(queryValue(ProjOrigin::ProductionFinished));
        itemLineType4.status(RangeStatus::Hidden);

        itemLineType5 = itemDataSource.findRange(fieldNum(ProjItemTrans,TransactionOrigin),5);
        if (! itemLineType5)
        {
            itemLineType5   = itemDataSource.addRange(fieldNum(ProjItemTrans, TransactionOrigin));
        }
        itemLineType5.value(queryValue(ProjOrigin::ProductionConsumed));
        itemLineType5.status(RangeStatus::Hidden);

        itemLineType6 = itemDataSource.findRange(fieldNum(ProjItemTrans,TransactionOrigin),6);
        if (! itemLineType6)
        {
            itemLineType6   = itemDataSource.addRange(fieldNum(ProjItemTrans, TransactionOrigin));
        }
        itemLineType6.value(queryValue(ProjOrigin::VendorInvoice));
        itemLineType6.status(RangeStatus::Hidden);

        itemLineType7 = itemDataSource.findRange(fieldNum(ProjItemTrans,TransactionOrigin),7);
        if (! itemLineType7)
        {
            itemLineType7   = itemDataSource.addRange(fieldNum(ProjItemTrans, TransactionOrigin));
        }
        itemLineType7.value(queryValue(ProjOrigin::BeginningBalance));
        itemLineType7.status(RangeStatus::Hidden);

        itemProjId          = itemDataSource.findRange(fieldNum(ProjItemTrans,ProjId));
        if (! itemProjId)
        {
            itemProjId          = itemDataSource.addRange(fieldNum(ProjItemTrans,ProjId));
        }
        itemTransDate       = itemDataSource.findRange(fieldNum(ProjItemTrans,TransDate));
        if (! itemTransDate)
        {
            itemTransDate       = itemDataSource.addRange(fieldNum(ProjItemTrans,TransDate));
        }
        itemProjId.status(RangeStatus::Hidden);
        itemTransDate.status(RangeStatus::Hidden);

        itemTransStatusPosted   = itemDataSourceCost.findRange(fieldNum(ProjItemTransCost,TransStatus),1);
        if (! itemTransStatusPosted)
        {
            itemTransStatusPosted       = itemDataSourceCost.addRange(fieldNum(ProjItemTransCost,TransStatus));
        }

        itemTransStatusProposal = itemDataSourceCost.findRange(fieldNum(ProjItemTransCost,TransStatus),2);
        if (! itemTransStatusProposal)
        {
            itemTransStatusProposal     = itemDataSourceCost.addRange(fieldNum(ProjItemTransCost,TransStatus));
        }

        itemLedgerStatus    = itemDataSourceCost.findRange(fieldNum(ProjItemTransCost,LedgerStatusCost));
        if (! itemLedgerStatus)
        {
            itemLedgerStatus    = itemDataSourceCost.addRange(fieldNum(ProjItemTransCost,LedgerStatusCost));
        }

        if (projLedgerStatus == ProjLedgerStatus::BalanceSheet)
        {
            itemLedgerStatus.value(queryValue(ProjLedgerStatus::Operations));
        }
        else if (projLedgerStatus == ProjLedgerStatus::Operations)
        {
            itemLedgerStatus.value(queryValue(ProjLedgerStatus::BalanceSheet));
        }

        itemTransStatusPosted.status(RangeStatus::Hidden);
        itemTransStatusProposal.status(RangeStatus::Hidden);
        itemLedgerStatus.status(RangeStatus::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList,queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjInternal</Name>
				<Source><![CDATA[
    public ProjInternal parmProjInternal(ProjInternal   _projInternal  = projInternal)
    {
        projInternal   = _projInternal;

        return projInternal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjLedgerStatus</Name>
				<Source><![CDATA[
    public ProjLedgerStatus parmProjLedgerStatus(ProjLedgerStatus   _projLedgerStatus  = projLedgerStatus)
    {
        projLedgerStatus   = _projLedgerStatus;

        return projLedgerStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjTimeMaterial</Name>
				<Source><![CDATA[
    public ProjTimeMaterial parmProjTimeMaterial(ProjTimeMaterial   _projTimeMaterial  = projTimeMaterial)
    {
        projTimeMaterial   = _projTimeMaterial;

        return projTimeMaterial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryCost</Name>
				<Source><![CDATA[
    public ProjActivateTrans parmQueryCost(ProjActivateTrans   _queryCost  = queryCost)
    {
        queryCost   = _queryCost;

        return queryCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryEmpl</Name>
				<Source><![CDATA[
    public ProjActivateTrans parmQueryEmpl(ProjActivateTrans   _queryEmpl  = queryEmpl)
    {
        queryEmpl   = _queryEmpl;

        return queryEmpl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryItem</Name>
				<Source><![CDATA[
    public ProjActivateTrans parmQueryItem(ProjActivateTrans   _queryItem  = queryItem)
    {
        queryItem   = _queryItem;

        return queryItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReverseTurnover</Name>
				<Source><![CDATA[
    boolean parmReverseTurnover(boolean _reverseTurnover = false)
    {
        throw error(strFmt("@SYS68912",funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmtransActionDate</Name>
				<Source><![CDATA[
    public TransDate parmtransActionDate(TransDate _transActionDate = transActionDate)
    {
        transActionDate = _transActionDate;

        return transActionDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingType</Name>
				<Source><![CDATA[
    public LedgerPostingType postingType(ProjPost _projPost)
    {
        return _projPost.postingTypeCost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeOffset</Name>
				<Source><![CDATA[
    public LedgerPostingType postingTypeOffset(ProjPost _projPost)
    {
        return _projPost.postingTypeOffsetCost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>projLedgerStatus</Name>
				<Source><![CDATA[
    public ProjLedgerStatus projLedgerStatus()
    {
        return projLedgerStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    public QueryRun queryBuild()
    {
        Query                   query = new Query();

        queryRun = new SysQueryRun(query);

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDialogRanges</Name>
				<Source><![CDATA[
    void setDialogRanges()
    {
        costDataSource.enabled(false);
        costDataSourceCost.enabled(false);
        itemDataSource.enabled(false);
        itemDataSourceCost.enabled(false);
        emplDataSource.enabled(false);
        emplDataSourceCost.enabled(false);

        if (!this.enableProjMultipleContractLinesForProjectFeature)
        {
            queryRangeInternal     = SysQuery::findOrCreateRange(queryRun.query().dataSourceTable(tableNum(ProjTable)), fieldNum(ProjTable, Type), 1);
            queryRangeTimeMaterial = SysQuery::findOrCreateRange(queryRun.query().dataSourceTable(tableNum(ProjTable)), fieldNum(ProjTable, Type), 2);

            if (projInternal && queryRangeInternal)
            {
                queryRangeInternal.value(queryValue(ProjType::Internal));
            }

            if (projTimeMaterial && queryRangeTimeMaterial)
            {
                queryRangeTimeMaterial.value(queryValue(ProjType::TimeMaterial));
            }
        }

        if (queryCost)
        {
            costDataSource.enabled(true);

            costTransDate           = costDataSource.findRange(fieldNum(ProjCostTrans,TransDate));
            if (! costTransDate)
            {
                costTransDate       = costDataSource.addRange(fieldNum(ProjCostTrans,TransDate));
            }

            if (fromDate || toDate)
            {
                costTransDate.value(this.queryFromDate()+'..'+this.queryToDate());
            }

            costDataSourceCost.enabled(true);

            this.setDialogRangesCostCost(costDataSourceCost);
        }

        if (queryEmpl)
        {
            emplDataSource.enabled(true);

            emplTransDate           = emplDataSource.findRange(fieldNum(ProjEmplTrans,TransDate));
            if (! emplTransDate)
            {
                emplTransDate       = emplDataSource.addRange(fieldNum(ProjEmplTrans,TransDate));
            }

            if (fromDate || toDate)
            {
                emplTransDate.value(this.queryFromDate()+'..'+this.queryToDate());
            }

            emplDataSourceCost.enabled(true);

            this.setDialogRangesEmplCost(emplDataSourceCost);
        }

        if (queryItem)
        {
            itemDataSource.enabled(true);

            itemTransDate       = itemDataSource.findRange(fieldNum(ProjItemTrans,TransDate));
            if (! itemTransDate)
            {
                itemTransDate       = itemDataSource.addRange(fieldNum(ProjItemTrans,TransDate));
            }

            if (fromDate || toDate)
            {
                itemTransDate.value(this.queryFromDate()+'..'+this.queryToDate());
            }

            itemDataSourceCost.enabled(true);

            this.setDialogRangesItemCost(itemDataSourceCost);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDialogRangesCostCost</Name>
				<Source><![CDATA[
    void setDialogRangesCostCost(QueryBuildDataSource _costDataSourceCost)
    {
        QueryBuildRange locCostLedgerStatus,
                        locCostTransStatusPosted,
                        locCostTransStatusProposal;

        locCostLedgerStatus        = _costDataSourceCost.findRange(fieldNum(ProjCostTransCost,LedgerStatusCost));
        if (! locCostLedgerStatus)
        {
            locCostLedgerStatus    = _costDataSourceCost.addRange(fieldNum(ProjCostTransCost,LedgerStatusCost));
        }

        locCostTransStatusPosted           = _costDataSourceCost.findRange(fieldNum(ProjCostTransCost,TransStatus),1);
        if (! locCostTransStatusPosted)
        {
            locCostTransStatusPosted       = _costDataSourceCost.addRange(fieldNum(ProjCostTransCost,TransStatus));
        }

        locCostTransStatusProposal         = _costDataSourceCost.findRange(fieldNum(ProjCostTransCost,TransStatus),2);
        if (! locCostTransStatusProposal)
        {
            locCostTransStatusProposal     = _costDataSourceCost.addRange(fieldNum(ProjCostTransCost,TransStatus));
        }

        switch (projLedgerStatus)
        {
            case ProjLedgerStatus::BalanceSheet:
                locCostLedgerStatus.value(queryValue(ProjLedgerStatus::Operations));
                break;

            case ProjLedgerStatus::Operations:
                locCostLedgerStatus.value(queryValue(ProjLedgerStatus::BalanceSheet));
                break;
        }

        locCostTransStatusPosted.value(queryValue(ProjTransStatus::Posted));

        locCostTransStatusProposal.value(queryValue(ProjTransStatus::InvoiceProposal));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDialogRangesEmplCost</Name>
				<Source><![CDATA[
    void setDialogRangesEmplCost(QueryBuildDataSource _emplDataSourceCost)
    {
        QueryBuildRange locEmplLedgerStatus1,
                        locEmplLedgerStatus2,
                        locEmplTransStatusPosted,
                        locEmplTransStatusProposal;

        locEmplLedgerStatus1       = _emplDataSourceCost.findRange(fieldNum(ProjEmplTransCost,LedgerStatusCost),1);
        if (! locEmplLedgerStatus1)
        {
            locEmplLedgerStatus1   = _emplDataSourceCost.addRange(fieldNum(ProjEmplTransCost,LedgerStatusCost));
        }

        locEmplLedgerStatus2       = _emplDataSourceCost.findRange(fieldNum(ProjEmplTransCost,LedgerStatusCost),2);
        if (! locEmplLedgerStatus2)
        {
            locEmplLedgerStatus2   = _emplDataSourceCost.addRange(fieldNum(ProjEmplTransCost,LedgerStatusCost));
        }

        locEmplTransStatusPosted       = _emplDataSourceCost.findRange(fieldNum(ProjEmplTransCost,TransStatus),1);
        if (! locEmplTransStatusPosted)
        {
            locEmplTransStatusPosted   = _emplDataSourceCost.addRange(fieldNum(ProjEmplTransCost,TransStatus));
        }

        locEmplTransStatusProposal     = _emplDataSourceCost.findRange(fieldNum(ProjEmplTransCost,TransStatus),2);
        if (! locEmplTransStatusProposal)
        {
            locEmplTransStatusProposal = _emplDataSourceCost.addRange(fieldNum(ProjEmplTransCost,TransStatus));
        }

        switch (projLedgerStatus)
        {
            case ProjLedgerStatus::None:
                locEmplLedgerStatus1.value(queryValue(ProjLedgerStatus::BalanceSheet));
                locEmplLedgerStatus2.value(queryValue(ProjLedgerStatus::Operations));
                break;

            case ProjLedgerStatus::BalanceSheet:
                locEmplLedgerStatus1.value(queryValue(ProjLedgerStatus::None));
                locEmplLedgerStatus2.value(queryValue(ProjLedgerStatus::Operations));
                break;

            case ProjLedgerStatus::Operations:
                locEmplLedgerStatus1.value(queryValue(ProjLedgerStatus::None));
                locEmplLedgerStatus2.value(queryValue(ProjLedgerStatus::BalanceSheet));
                break;
        }

        locEmplTransStatusPosted.value(queryValue(ProjTransStatus::Posted));

        locEmplTransStatusProposal.value(queryValue(ProjTransStatus::InvoiceProposal));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDialogRangesItemCost</Name>
				<Source><![CDATA[
    void setDialogRangesItemCost(QueryBuildDataSource _itemDataSourceCost)
    {
        QueryBuildRange locItemLedgerStatus,
                        locItemTransStatusPosted,
                        locItemTransStatusProposal;

        locItemLedgerStatus        = _itemDataSourceCost.findRange(fieldNum(ProjItemTransCost,LedgerStatusCost));
        if (! locItemLedgerStatus)
        {
            locItemLedgerStatus    = _itemDataSourceCost.addRange(fieldNum(ProjItemTransCost,LedgerStatusCost));
        }

        locItemTransStatusPosted   = _itemDataSourceCost.findRange(fieldNum(ProjItemTransCost,TransStatus),1);
        if (! locItemTransStatusPosted)
        {
            locItemTransStatusPosted       = _itemDataSourceCost.addRange(fieldNum(ProjItemTransCost,TransStatus));
        }

        locItemTransStatusProposal = _itemDataSourceCost.findRange(fieldNum(ProjItemTransCost,TransStatus),2);
        if (! locItemTransStatusProposal)
        {
            locItemTransStatusProposal     = _itemDataSourceCost.addRange(fieldNum(ProjItemTransCost,TransStatus));
        }

        if (projLedgerStatus == ProjLedgerStatus::BalanceSheet)
        {
            locItemLedgerStatus.value(queryValue(ProjLedgerStatus::Operations));
        }
        else if (projLedgerStatus == ProjLedgerStatus::Operations)
        {
            locItemLedgerStatus.value(queryValue(ProjLedgerStatus::BalanceSheet));
        }

        locItemTransStatusPosted.value(queryValue(ProjTransStatus::Posted));

        locItemTransStatusProposal.value(queryValue(ProjTransStatus::InvoiceProposal));
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer         version         = conPeek(packedClass,1);
        container       packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,packedQuery] = packedClass;
                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }
                else
                {
                    queryRun = this.queryBuild();
                }
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        ret = true;

        if (projLedgerStatus    == ProjLedgerStatus::None)
        {
            if (queryCost)
            {
                ret = checkFailed(strFmt("@SYS62095",projLedgerStatus));
            }

            if (queryItem)
            {
                ret = checkFailed(strFmt("@SYS62096",projLedgerStatus));
            }
        }

        if (!projInternal && !projTimeMaterial && !this.enableProjMultipleContractLinesForProjectFeature)
        {
           // No project selected
           ret = checkFailed("@SYS91026");
        }

        if (!queryCost && !queryEmpl && !queryItem)
        {
           // No transaction selected
           ret = checkFailed("@SYS91027");
        }

        if (fromDate > toDate && toDate)
        {
            // Invalid date interval
            ret = checkFailed("@SYS91020");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYS87007";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>