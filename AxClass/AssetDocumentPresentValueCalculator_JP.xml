<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDocumentPresentValueCalculator_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is the asset document present value calculator.
/// </summary>
class AssetDocumentPresentValueCalculator_JP
{
    AssetDocumentIPresentValueProvider_JP pvProvider;

    Array resultArray;

    AmountCur targetAmount;
    AssetDiscountRateValue_JP currentDiscountRate;

    ListEnumerator                      costEnum;
    AssetDocumentPresentValueCost_JP    cost;
    real accumulateServiceLife;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculatePresentValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the present value on the input date.
    /// </summary>
    /// <param name="_date">
    /// The input date.
    /// </param>
    public void calculatePresentValue(TransDate _date)
    {
        int i;
        int costListLength;

        AmountCur                           tmpAmount;
        AmountCur                           accumulateAmount;
        AmountCur                           interestAmount;
        AmountCur                           lastAccumulateAmount;
        AmountCur                           lastAccumulateAmountProcessed;
        TransDate                           lastAdjustmentDate;

        costEnum = pvProvider.getCostList().getEnumerator();
        costListLength = pvProvider.getCostList().elements();

        for (i = 0; i <= costListLength; i++)
        {
            if ( i < costListLength)
            {
                costenum.moveNext();
                cost = costEnum.current();
            }

            //save adjustment
            if (lastAdjustmentDate
                && (lastAdjustmentDate < cost.parmCostDate()
                    || i == 1
                    || i == costListLength))
            {
                //Process amount first. Current calculation can gurantee that the total difference is only the rounding precision
                resultArray.value(resultArray.lastIndex() + 1,
                    AssetDocumentPresentValueResult_JP::construct(
                        this.processAmount(accumulateAmount - lastAccumulateAmount - interestAmount),
                        this.processAmount(accumulateAmount)
                            - this.processAmount(accumulateAmount - lastAccumulateAmount - interestAmount)
                            - lastAccumulateAmountProcessed,
                        lastAdjustmentDate,
                        this.getCurrentDiscountRate()));
                lastAccumulateAmount = accumulateAmount;
                lastAccumulateAmountProcessed = this.processAmount(accumulateAmount);

                if (lastAdjustmentDate >= _date)
                {
                    break;
                }
            }

            if (i == costListLength)
            {
                //it is the end
                break;
            }

            //calculate interest
            if (accumulateAmount > 0
                && lastAdjustmentDate < cost.parmCostDate())
            {
                interestAmount = (accumulateAmount * power((1 + currentDiscountRate), this.getCurrentYearRatio()) - accumulateAmount)  * this.getCurrentYearEffectiveRatio();
                accumulateAmount += interestAmount;

                accumulateServiceLife += this.getCurrentYearRatio();
            }

            if (cost.parmCostAmount() > 0)
            {
                targetAmount +=  cost.parmCostAmount();
                tmpAmount = cost.parmCostAmount() / power(1 + cost.parmDiscountRate(), this.getRemainingYearLength());
                accumulateAmount += tmpAmount;

                //effective rate
                if (this.getRemainingYearLength() > 0 && accumulateAmount > 0)
                {
                    currentDiscountRate = power((targetAmount / accumulateAmount), 1 / this.getRemainingYearLength()) - 1;
                }
            }
            else if (cost.parmCostAmount() < 0)
            {
                targetAmount += cost.parmCostAmount();
                accumulateAmount = targetAmount / power(1 + currentDiscountRate, this.getRemainingYearLength());
            }
            lastAdjustmentDate = cost.parmCostDate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentDiscountRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the asset discount rate.
    /// </summary>
    /// <returns>
    /// The discount rate.
    /// </returns>
    protected AssetDiscountRateValue_JP getCurrentDiscountRate()
    {
        return currentDiscountRate * 100;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentYearEffectiveRatio</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current year effective ratio.
    /// </summary>
    /// <returns>
    /// The current year effective ratio.
    /// </returns>
    protected real getCurrentYearEffectiveRatio()
    {
        return cost.parmYearEffectiveRatio();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentYearRatio</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current year ratio.
    /// </summary>
    /// <returns>
    /// The current year ratio.
    /// </returns>
    protected real getCurrentYearRatio()
    {
        return cost.parmYearRatio();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemainingYearLength</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the remaining year length.
    /// </summary>
    /// <returns>
    /// The remaining year length.
    /// </returns>
    protected real getRemainingYearLength()
    {
        return pvProvider.getServiceLife() - accumulateServiceLife;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResults</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the calculation result.
    /// </summary>
    /// <returns>
    /// An array of calculation result.
    /// </returns>
    public Array getResults()
    {
        return resultArray;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTargetAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the target amount.
    /// </summary>
    /// <returns>
    /// The target amount.
    /// </returns>
    public AmountCur getTargetAmount()
    {
        return targetAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs initialization.
    /// </summary>
    protected void initialize()
    {
        resultArray = new Array(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetDocumentPresentValueProvider</Name>
				<Source><![CDATA[
    public AssetDocumentIPresentValueProvider_JP parmAssetDocumentPresentValueProvider(AssetDocumentIPresentValueProvider_JP _presentValueProvider = pvProvider)
    {
        pvProvider = _presentValueProvider;
        return pvProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process the calculated amount, so far it is rounding.
    /// </summary>
    /// <param name="_amount">
    /// The calculated amount
    /// </param>
    /// <returns>
    /// The amount after process.
    /// </returns>
    protected Amount processAmount(Amount _amount)
    {
        return CurrencyExchangeHelper::amount(_amount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of <c>AssetDocumentPresentValueCalculator_JP</c>.
    /// </summary>
    /// <param name="_presentValueProvider">
    /// The present value attribute provider.
    /// </param>
    /// <returns>
    /// An instance of <c>AssetDocumentPresentValueCalculator_JP</c>.
    /// </returns>
    public static AssetDocumentPresentValueCalculator_JP construct(AssetDocumentIPresentValueProvider_JP _presentValueProvider)
    {
        AssetDocumentPresentValueCalculator_JP presentValueCalculator;

        presentValueCalculator = new AssetDocumentPresentValueCalculator_JP();
        presentValueCalculator.parmAssetDocumentPresentValueProvider(_presentValueProvider);
        presentValueCalculator.initialize();

        return presentValueCalculator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
