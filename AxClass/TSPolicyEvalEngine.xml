<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TSPolicyEvalEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Evaluation engine for the timesheet policies
/// </summary>
class TSPolicyEvalEngine
{
    #TimeConstants

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TSPolicyEvalEngine construct()
    {
        return new TSPolicyEvalEngine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePolicyCacheForTimesheet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the stale policy cache for the given timesheet
    /// </summary>
    /// <param name = "_tsTimesheetTable">Timesheet table for which the cache should be deleted</param>
    /// <param name = "_projPeriodTimesheetWeek">Optional _projPeriodTimesheetWeek parameter which removes the cache corresponding to that particular week</param>
    public static void deletePolicyCacheForTimesheet(TSTimesheetTable _tsTimesheetTable, ProjPeriodTimesheetWeek _projPeriodTimesheetWeek = null)
    {
        TSTimesheetTable        tsTimesheetTable;
        TSPolicyViolationsCache cache;

        ttsBegin;

        delete_from cache
            where cache.TimesheetNbr == _tsTimesheetTable.TimesheetNbr
                && (!_projPeriodTimesheetWeek || cache.ProjPeriodTimesheetWeek == _projPeriodTimesheetWeek.RecId);

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>evaluatePoliciesForTimesheet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Evaluates all the rules corresponding to the passed policyType on the given record
    /// </summary>
    /// <param name="_record">
    /// Record on which the policies are to be evaluated
    /// </param>
    /// <param name="_policyType">
    /// Policy type whose rules are to be considered
    /// </param>
    /// <returns>
    /// Returns false if there are 'error' policy violations else returns true
    /// </returns>
    public static boolean evaluatePoliciesForTimesheet(Common _record, SysPolicyTypeEnum _policyType)
    {
        SysPolicyRuleType                                   policyRuleType;
        SysPolicyType                                       policyType;
        TSPolicyEvalEngine                                  tsPolicyEvaluationEngine  =   new TSPolicyEvalEngine();
        boolean                                             ret                       =   true;
        DictEnum                                            ruleTypeEnum              =   new DictEnum(enumNum(SysPolicyRuleTypeEnum));
        TSPolicyEvaluator                                   tsPolicyEvaluator;

        if (_policyType == SysPolicyTypeEnum::TimesheetPolicy )
        {
            while select policyRuleType
                exists join policyType
                where policyType.PolicyType == _policyType
                    && policyRuleType.PolicyType == policyType.RecId
            {
                tsPolicyEvaluator = TSPolicyEvaluator::getPolicyEvaluator(any2Enum(ruleTypeEnum.symbol2Value(policyRuleType.Name)));
                tsPolicyEvaluator.evaluate(_record, _policyType, policyRuleType);
                ret = tsPolicyEvaluator.throwInfologs() && ret;
            }
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPolicyViolations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if there are policy violations for the passed record
    /// </summary>
    /// <param name="_record">
    /// Record for which the policy violations are to be checked
    /// </param>
    /// <param name="_policyType">
    /// Policy type for which the policy violations are to be checked
    /// </param>
    /// <param name="_considerOnlyErrors">
    /// Flag to indicate whether only errors or even warnings are to be considered
    /// </param>
    /// <returns>
    /// True if there are any policy violations for the passed criteria else false
    /// </returns>
    public static boolean hasPolicyViolations(
        Common _record,
        SysPolicyTypeEnum _policyType,
        boolean _considerOnlyErrors = false)
    {
        TSPolicyViolationsCache        cache;
        TSTimesheetTable               tsTimesheetTable;
        TSTimesheetLine                tsTimesheetLine;
        TSTimesheetNbr                 timesheetNumber;
        SysPolicy                      sysPolicy;
        TSPolicyRule                   tsPolicyRule;
        utcDateTime                    dateTimeFrom, dateTimeTo;

        dateTimeFrom        = DateTimeUtil::newDateTime(dateNull(), 0);
        dateTimeTo          = DateTimeUtil::newDateTime(dateMax(), #secondsPerDay-1);

        if (_record.TableId == tableNum(tsTimesheetTable))
        {
            tsTimesheetTable = _record as TSTimesheetTable;
            timesheetNumber = tsTimesheetTable.TimesheetNbr;
        }
        else if (_record.TableId == tableNum(tsTimesheetLine))
        {
            tsTimesheetLine     = _record as tsTimesheetLine;
            timesheetNumber = tsTimesheetLine.TimesheetNbr;
        }

        //check for error violations
        select firstonly validTimeState(dateTimeFrom, dateTimeTo)  RecId, Rule from cache
            where (cache.PolicyViolationLevel == TSPolicyViolationLevel::Error || (cache.PolicyViolationLevel == TSPolicyViolationLevel::Warning && !_considerOnlyErrors))
                && cache.PolicyType       == _policyType
                && cache.TimesheetNbr     == timesheetNumber
            exists join tsPolicyRule
            where tsPolicyRule.RecId      == cache.Rule
            exists join sysPolicy
            where  sysPolicy.RecId        == tsPolicyRule.Policy
                && sysPolicy.IsActive     == NoYes::Yes;

        return (cache.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPolicyCreated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to determine if there are any policies created for the given policy type
    /// </summary>
    /// <param name="_policyType">
    /// Policy type for which to the check is done
    /// </param>
    /// <returns>
    /// True if there are any policies created; otherwise false
    /// </returns>
    public static boolean isPolicyCreated(SysPolicyTypeEnum _policyType)
    {
        SysPolicy sysPolicy;
        SysPolicyType sysPolicyType;

        select RecId from sysPolicy
            where sysPolicy.IsActive        == NoYes::Yes
            exists join policyType from sysPolicyType
            where sysPolicy.PolicyType      == sysPolicyType.RecId
                && sysPolicyType.PolicyType == SysPolicyTypeEnum::TimesheetPolicy;

        return (sysPolicy.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        Common common;

        if (_args.record() && _args.dataset() == tableNum(TSTimesheetTable))
        {
            common = TSTimesheetTable::findRecId(_args.record().RecId);
        }
        else if (_args.record() && _args.dataset() == tableNum(TSTimesheetLine))
        {
            common = TSTimesheetLine::findRecId(_args.record().RecId);
        }
        else
        {
            info("@SYS30498");
        }

        if (TSPolicyEvalEngine::evaluatePoliciesForTimesheet(common, SysPolicyTypeEnum::TimesheetPolicy))
        {
            if (!TSPolicyEvalEngine::hasPolicyViolations(common, SysPolicyTypeEnum ::TimesheetPolicy, false))
            {
                info("@Timesheet:ThereAreNoPolicyOrRuleViolations");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to show the policy violation
    /// </summary>
    /// <param name="_violationLevelIsError">
    /// Enum value based on which either a warning or error is shown
    /// </param>
    /// <param name="_msg">
    /// Message to be displayed
    /// </param>
    /// <returns>
    /// True if a warning is displayed; otherwise false
    /// </returns>
    public static boolean showMessage(TSPolicyViolationLevel _violationLevelIsError, str _msg)
    {
        boolean showMessage = false;

        if (_violationLevelIsError == TSPolicyViolationLevel::Warning)
        {
            warning(_msg);
            showMessage = true;
        }
        else if (_violationLevelIsError == TSPolicyViolationLevel::Error)
        {
            error(_msg);
        }

        return showMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPolicyViolationsInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to show all the violations corresponding to the passed timesheet record
    /// </summary>
    /// <param name="_tsTimesheetTable">
    /// Record for which the violations are to be displayed
    /// </param>
    public static void showPolicyViolationsInfo(TSTimesheetTable _tsTimesheetTable)
    {
        TSPolicyViolationsCache cache, cacheLocal;
        TSPolicyRule            tsPolicyRule;
        utcDateTime             dateTimeFrom, dateTimeTo;
        TSPolicyViolationsDates tsPolicyViolationsDates;
        str                     errorMessage, adminMessage;
        int                     errorCount = 0;
        str                     fromDateCaption;
        SysPolicy               sysPolicy;

        dateTimeFrom = DateTimeUtil::newDateTime(dateNull(),0);
        dateTimeTo   = DateTimeUtil::newDateTime(dateMax(),0);

        while select validTimeState(dateTimeFrom, dateTimeTo) Rule, PolicyViolationLevel from cache
            where (cache.PolicyViolationLevel == TSPolicyViolationLevel::Error || (cache.PolicyViolationLevel == TSPolicyViolationLevel::Warning))
                && cache.TimesheetNbr    == _tsTimesheetTable.TimesheetNbr
            exists join tsPolicyRule
            where tsPolicyRule.RecId   == cache.Rule
            exists join sysPolicy
            order by cache.PolicyViolationLevel
            group by cache.Rule, cache.PolicyViolationLevel
            where sysPolicy.RecId == tsPolicyRule.Policy
                && sysPolicy.IsActive  == NoYes::Yes
        {
            errorCount = 0;
            errorMessage ='';
            adminMessage ='';

            while select FromDate, ToDate from tsPolicyViolationsDates
                join PolicyRuleType from cacheLocal
                order by tsPolicyViolationsDates.FromDate
                where tsPolicyViolationsDates.TSPolicyViolationsCache == cacheLocal.RecId
                    && cacheLocal.TimesheetNbr                        == _tsTimesheetTable.TimesheetNbr
                    && cacheLocal.Rule                                == cache.Rule
            {
                fromDateCaption = TSPeriods::getDateCaption(tsPolicyViolationsDates.FromDate);

                if (cacheLocal.PolicyRuleType == SysPolicyRuleTypeEnum::TSDayHoursRule)
                {
                    if (errorMessage == '')
                    {
                        errorMessage = fromDateCaption;
                    }
                    else
                    {
                        errorMessage = strFmt("@SYS26868", errorMessage, fromDateCaption);
                    }
                }
                else if (cacheLocal.PolicyRuleType == SysPolicyRuleTypeEnum::TSWeekHoursRule)
                {
                    if (errorMessage == '')
                    {
                        errorMessage = strFmt("@SYS76785", fromDateCaption, TSPeriods::getDateCaption(tsPolicyViolationsDates.ToDate));
                    }
                    else
                    {
                        errorMessage = strFmt("@SYS26868", errorMessage, strFmt("@SYS76785", fromDateCaption, TSPeriods::getDateCaption(tsPolicyViolationsDates.ToDate)));
                    }
                }

                errorCount++;
            }

            if (errorCount > 1)
            {
                adminMessage = strFmt("@SYS76498", TSPolicyRule::find(cache.Rule).usermessage(), strFmt("@SYS111640", errorCount));
            }
            else
            {
                adminMessage = TSPolicyRule::find(cache.Rule).usermessage();
            }

            errorMessage = strFmt("@SYS191501", adminMessage, errorMessage);

            TSPolicyEvalEngine::showMessage(cache.PolicyViolationLevel, errorMessage);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>