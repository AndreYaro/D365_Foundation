<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TSTimesheetProjectService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TSTimesheetProjectService</c> class contains the methods for the retrieval of project information for the <c>TsTimesheetService</c> class.
/// </summary>
public class TSTimesheetProjectService extends TsTimesheetService
{
    const int maxProjectSearchResultCount = 200;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getRecentAndAssignedProjects</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve the recently used and assigned to projects for the given resource and legal entity.
    /// </summary> 
    /// <param name="_resource">
    ///     The <c>RecId</c> of the resource.
    /// </param>
    /// <param name = "_legalEntity">
    ///     Pull projects from the provided legal entity.
    /// </param>
    /// <param name = "_timeEntryDate">
    ///     The cut-off date for how far in the past to go for "recently" used projects.
    /// </param>
    /// <returns>
    ///     A <c>List</c> of <c>TSTimesheetProject</c> objects.
    /// </returns>
    public List getRecentAndAssignedProjects(ResourceRecId _resource, DataAreaId _legalEntity, TSDate _timeEntryDate)
    {
        List projects = new List(Types::Class);

        TSTimesheetProjectFilterRulesParams projectFilterRulesParams = TSTimesheetProjectFilterRulesParams::construct();
        projectFilterRulesParams.parmIncludeAllInProcessProjects(false);
        projectFilterRulesParams.parmIncludeProjectIfAssignedToResource(true);
        projectFilterRulesParams.parmIncludeProjectIfUsedbyResourceRecently(true);
        projectFilterRulesParams.parmRecentlyUsedCutoffDate(_timeEntryDate);
        projectFilterRulesParams.parmIncludeCategories(true);
        projectFilterRulesParams.parmIncludeActivities(true);

        projects = this.getProjectsForResource(_resource, _legalEntity, projectFilterRulesParams);

        return projects;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectsBySearch</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieve the projects where project or customer information matches the search string provided.
    /// </summary>
    /// <param name="_resource">
    ///     The record identifier of the resource.
    /// </param>
    /// <param name = "_legalEntity">
    ///     Pull projects from the provided legal entity.
    /// </param>
    /// <param name = "_searchString">
    ///     The string used to search based on project or customer information.
    /// </param>
    /// <returns>
    ///     A <c>TSTimesheetProjectList</c> object.
    /// </returns>
    public List getProjectsBySearch(ResourceRecId _resource, DataAreaId _legalEntity, str _searchString)
    {
        List projects = new List(Types::Class);

        TSTimesheetProjectFilterRulesParams projectFilterRulesParams = TSTimesheetProjectFilterRulesParams::construct();
        projectFilterRulesParams.parmIncludeAllInProcessProjects(true);
        projectFilterRulesParams.parmSearchString(_searchString);

        projects = this.getProjectsForResource(_resource, _legalEntity, projectFilterRulesParams);

        return projects;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectDetailsByRules</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieve detailed information regarding resource's legal entities including all fields that user would
    ///     need to know in order to complete a timesheet entry (e.g. categories, line property).
    /// </summary>
    /// <param name="_resource">
    ///     The <c>RecId</c> of the resource.
    /// </param>
    /// <param name="_projectIncludeFieldRulesParams">
    ///     Rules on which fields to retrieve.  Can impact performance.
    /// </param>
    /// <returns>
    ///     An object of <c>TSTimesheetProjectDetails</c> class.
    /// </returns>
    public TSTimesheetProjectDetails getProjectDetailsByRules(ResourceRecId _resource, TSTimesheetProjectIncludeFieldRulesParams _projectIncludeFieldRulesParams)
    {
        List legalEntityList = new List(Types::Class);

        SysGlobalCache cache = classfactory.globalCache();

        TSTimesheetProjectDetails tsTimesheetProjectDetails = new TSTimesheetProjectDetails();

        if (this.isValidResource(_resource))
        {
            DataAreaId resourceCompanyId = this.getResourceLegalEntity(_resource);
            changecompany(resourceCompanyId)
            {
                //Get all legal entities from Ledger Inter Company along with the default legal entity.
                //Timesheet module is using LedgerInterCompany Table to populate entity field.
                ProjParameters projParameters = ProjParameters::find();
                List allLegalEntities = this.getLegalEntities(projParameters.EnableIntercompanyTimesheet == NoYes::Yes);
                ListEnumerator listEnum = allLegalEntities.getEnumerator();

                // For each legal entity, Get all TSTimesheetProject class list and TSTimesheetCategory list
                while (listEnum.moveNext())
                {
                    TSTimesheetLegalEntity tsTimesheetLegalEntity = new TSTimesheetLegalEntity();
                    
                    //Add the LE and list of the projects to the new TSTimesheetLegalEntity object
                    DataAreaId legalEntity = listEnum.current();
                    container conCompanies = [legalEntity];

                    if (_projectIncludeFieldRulesParams.parmIncludeProjects())
                    {
                        TSTimesheetProjectFilterRulesParams projectFilterRulesParams = TSTimesheetProjectFilterRulesParams::construct();
                        projectFilterRulesParams.parmIncludeAllInProcessProjects(true);
                        projectFilterRulesParams.parmIncludeProjectIfUsedByResource(true);
                        projectFilterRulesParams.parmIncludeCategories(true);
                        projectFilterRulesParams.parmIncludeActivities(true);

                        List projectList = this.getProjectsForResource(_resource, legalEntity, projectFilterRulesParams);

                        // If no projects in the legal entity when trying to retrieve projects, then don't add anything else to the list and continue
                        if (projectList.elements() == 0)
                        {
                            continue;
                        }

                        tsTimesheetLegalEntity.parmProject(projectList);
                    }

                    tsTimesheetLegalEntity.parmLegalEntity(listEnum.current());

                    //Get line property per legal entity
                    tsTimesheetLegalEntity.parmProjLineProperty(this.getLinePropertyList(conCompanies));

                    // Get Sales tax groups
                    if (_projectIncludeFieldRulesParams.parmIncludeTaxGroups())
                    {
                        tsTimesheetLegalEntity.parmSalesTaxGroupList(this.getSalesTaxGroupList(conCompanies));
                        tsTimesheetLegalEntity.parmSalesItemTaxGroupList(this.getSalesItemTaxGroupList(conCompanies));
                    }

                    //Populate TSTimesheetCategories if project category validation is not enabled.
                    changecompany(legalEntity)
                    {
                        ProjParameters projParametersCategory = ProjParameters::find();

                        if (projParametersCategory.ValidationProjCategory == ProjValParameter::None && projParametersCategory.ValidationEmplCategory == ProjValParameter::None)
                        {
                            //Add list of the categories to the TSTimesheetLegalEntity object
                            tsTimesheetLegalEntity.parmCategory(this.getCategoriesList(conCompanies));
                        }

                        //Get minimum time increment per legal entity
                        tsTimesheetLegalEntity.parmMinTimeIncrement(projParametersCategory.MinTimeIncrement);

                        //Get the default hour category per legal entity
                        ProjCategory projCategory = this.findDefaultCategoryForLegalEntity(legalEntity);
                        tsTimesheetLegalEntity.parmDefaultHourCategory(projCategory.CategoryId);
                        tsTimesheetLegalEntity.parmDefaultHourCategoryName(projCategory.Name);
                    }

                    legalEntityList.addEnd(tsTimesheetLegalEntity);

                    //Clear the cache of queries from ProjCategoryLookup to make sure any future changes are reflected,
                    //and the cache is not used across companies
                    cache.clear(classStr(ProjCategoryLookup));
                }

                //Add list of the legal entities to the TSTimesheetProjectDetails object
                tsTimesheetProjectDetails.parmTSTimesheetProject(legalEntityList);
            }
        }

        return tsTimesheetProjectDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDefaultCategoryForLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Get the default project category for the given legal entity.
    /// </summary>
    /// <param name="_legalEntity">
    ///     The <c>DataAreaId</c> record.
    /// </param>
    /// <returns>
    ///     A <c>ProjCategory</c> record.
    /// </returns>
    protected ProjCategory findDefaultCategoryForLegalEntity(DataAreaId _legalEntity)
    {
        return TsTimesheetService::findDefaultCategoryForLegalEntity(_legalEntity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectDetailsByProjId</Name>
				<Source><![CDATA[
    public TSTimesheetProject getProjectDetailsByProjId(ResourceRecId _resource, LegalEntityDataAreaId _legalEntity, ProjId _projId)
    {
        TSProjCustGrantLookup projProjectLookup;

        changecompany(_legalEntity)
        {
            select firstonly * from projProjectLookup
                where projProjectLookup.ProjId == _projId;
        }

        TSTimesheetProjectFilterRulesParams projectFilterRulesParams = TSTimesheetProjectFilterRulesParams::construct();
        projectFilterRulesParams.parmIncludeCategories(true);
        projectFilterRulesParams.parmIncludeActivities(true);

        return this.getProjectMobile(_resource, _legalEntity, projProjectLookup, projectFilterRulesParams);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProject</Name>
				<Source><![CDATA[
    private TSTimesheetProject getProject(ResourceRecId _resource, LegalEntityDataAreaId _legalEntity, 
        ProjProjectLookup _projProjectLookup, TSTimesheetProjectFilterRulesParams _projectFilterRulesParams, 
        Map _custNames = null)
    {
        TSTimesheetProject tsTimesheetProject = new TSTimesheetProject();

        tsTimesheetProject.parmProjId(_projProjectLookup.ProjId);
        tsTimesheetProject.parmProjName(_projProjectLookup.Name);
        tsTimesheetProject.parmProjectCustAccount(_projProjectLookup.CustAccount);

        if (_projProjectLookup.CustAccount)
        {
            if (_custNames && _custNames.exists(_projProjectLookup.CustAccount))
            {
                tsTimesheetProject.parmProjCustName(_custNames.lookup(_projProjectLookup.CustAccount));
            }
            else
            {
                CustName custName;

                changecompany(_legalEntity)
                {
                    custName = CustTable::find(_projProjectLookup.CustAccount).name();
                }

                tsTimesheetProject.parmProjCustName(custName);

                if (_custNames)
                {
                    _custNames.insert(_projProjectLookup.CustAccount, custName);
                }
            }
        }

        tsTimesheetProject.parmProjStatus(_projProjectLookup.Status);
        tsTimesheetProject.parmProjType(_projProjectLookup.Type);

        changecompany(_legalEntity)
        {
            tsTimesheetProject.parmDefaultSalesTaxGroup(ProjParameters::taxGroupInvoice(_projProjectLookup.ProjId));

            boolean isAssignedToResource;

            if (TSTimesheetHelper::isTSDisplayResourceGroupProjEnabled())
            {
                isAssignedToResource = ProjValEmplProjSetup::isProjAssignedToResource(_resource, _projProjectLookup.ProjId, _legalEntity);
            }
            else
            {
                isAssignedToResource = ProjValEmplProjSetup::existDirect(_projProjectLookup.ProjId, _resource);
            }

            tsTimesheetProject.parmIsAssignedToResource(isAssignedToResource);

            //Get project id modified latest and resource name based on current user.
            TSTimesheetLine tsTimesheetLine;
            select firstonly ModifiedDateTime from tsTimesheetLine
                order by tsTimesheetLine.ModifiedDateTime desc
                    where tsTimesheetLine.ProjId == _projProjectLookup.ProjId;

            tsTimesheetProject.parmTimesheetLineModifiedDateTime(tsTimesheetLine.ModifiedDateTime);

            select firstonly ModifiedDateTime from tsTimesheetLine
                order by tsTimesheetLine.ModifiedDateTime desc
                    where tsTimesheetLine.ProjId == _projProjectLookup.ProjId
                        && tsTimesheetLine.Resource == _resource;

            tsTimesheetProject.parmLastUsedOnTimesheetByResource(DateTimeUtil::date(tsTimesheetLine.ModifiedDateTime));
        }

        //Get favorite data only if favorites are enabled in the company passed in as _legalEntity parameter
        ProjParameters projParameters = ProjParameters::find();

        if (projParameters.UseFavorites == NoYes::Yes)
        {
            tsTimesheetProject.parmIsFavorite(this.isFavoriteProject(_resource, _legalEntity, _projProjectLookup.ProjId));
        }
        else
        {
            tsTimesheetProject.parmIsFavorite(false);
        }

        if (_projectFilterRulesParams.parmIncludeActivities())
        {
            tsTimesheetProject.parmProjActivity(this.getActivitiesForProject(_legalEntity, this.findProjRecId(_projProjectLookup.ProjId, _legalEntity)));
        }

        if (_projectFilterRulesParams.parmIncludeCategories())
        {
            //Attaching category to corresponding project after filtering on the basis of resource and project if validation is done.
            ProjParameters projParametersCategory;
            List categories = new List(Types::Class);

            changecompany(_legalEntity)
            {
                projParametersCategory = ProjParameters::find();

                if (projParametersCategory.TimesheetServiceEnableDefaultLineProperty
                    || projParametersCategory.ValidationProjCategory == ProjValParameter::Mandatory
                    || projParametersCategory.ValidationProjCategory == ProjValParameter::Lookup
                    || projParametersCategory.ValidationEmplCategory == ProjValParameter::Mandatory
                    || projParametersCategory.ValidationEmplCategory == ProjValParameter::Lookup)
                {
                    categories = this.getCategoriesListForProject(_resource, _legalEntity, _projProjectLookup.ProjId);
                }
            }

            //Add list of the categories to the TSTimesheetProject object
            tsTimesheetProject.parmCategory(categories);
        }

        return tsTimesheetProject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectMobile</Name>
				<Source><![CDATA[
    private TSTimesheetProject getProjectMobile(ResourceRecId _resource, LegalEntityDataAreaId _legalEntity, 
        TSProjCustGrantLookup _projProjectLookup, TSTimesheetProjectFilterRulesParams _projectFilterRulesParams, 
        Map _custNames = null)
    {
        TSTimesheetProject tsTimesheetProject = new TSTimesheetProject();

        tsTimesheetProject.parmProjId(_projProjectLookup.ProjId);
        tsTimesheetProject.parmProjName(_projProjectLookup.Name);
        tsTimesheetProject.parmProjectCustAccount(_projProjectLookup.CustAccount);

        if (_projProjectLookup.CustAccount)
        {
            if (_custNames && _custNames.exists(_projProjectLookup.CustAccount))
            {
                tsTimesheetProject.parmProjCustName(_custNames.lookup(_projProjectLookup.CustAccount));
            }
            else
            {
                CustName custName;

                changecompany(_legalEntity)
                {
                    custName = CustTable::find(_projProjectLookup.CustAccount).name();
                }

                tsTimesheetProject.parmProjCustName(custName);

                if (_custNames)
                {
                    _custNames.insert(_projProjectLookup.CustAccount, custName);
                }
            }
        }

        tsTimesheetProject.parmProjStatus(_projProjectLookup.Status);
        tsTimesheetProject.parmProjType(_projProjectLookup.Type);

        changecompany(_legalEntity)
        {
            tsTimesheetProject.parmDefaultSalesTaxGroup(ProjParameters::taxGroupInvoice(_projProjectLookup.ProjId));

            boolean isAssignedToResource;

            if (TSTimesheetHelper::isTSDisplayResourceGroupProjEnabled())
            {
                isAssignedToResource = ProjValEmplProjSetup::isProjAssignedToResource(_resource, _projProjectLookup.ProjId, _legalEntity);
            }
            else
            {
                isAssignedToResource = ProjValEmplProjSetup::existDirect(_projProjectLookup.ProjId, _resource);
            }

            tsTimesheetProject.parmIsAssignedToResource(isAssignedToResource);

            //Get project id modified latest and resource name based on current user.
            TSTimesheetLine tsTimesheetLine;
            select firstonly ModifiedDateTime from tsTimesheetLine
                order by tsTimesheetLine.ModifiedDateTime desc
                    where tsTimesheetLine.ProjId == _projProjectLookup.ProjId;

            tsTimesheetProject.parmTimesheetLineModifiedDateTime(tsTimesheetLine.ModifiedDateTime);

            select firstonly ModifiedDateTime from tsTimesheetLine
                order by tsTimesheetLine.ModifiedDateTime desc
                    where tsTimesheetLine.ProjId == _projProjectLookup.ProjId
                        && tsTimesheetLine.Resource == _resource;

            tsTimesheetProject.parmLastUsedOnTimesheetByResource(DateTimeUtil::date(tsTimesheetLine.ModifiedDateTime));
        }

        //Get favorite data only if favorites are enabled in the CURRENT company
        ProjParameters projParameters = ProjParameters::find();

        if (projParameters.UseFavorites == NoYes::Yes)
        {
            tsTimesheetProject.parmIsFavorite(this.isFavoriteProject(_resource, _legalEntity, _projProjectLookup.ProjId));
        }
        else
        {
            tsTimesheetProject.parmIsFavorite(false);
        }

        if (_projectFilterRulesParams.parmIncludeActivities())
        {
            tsTimesheetProject.parmProjActivity(this.getActivitiesForProject(_legalEntity, this.findProjRecId(_projProjectLookup.ProjId, _legalEntity)));
        }

        if (_projectFilterRulesParams.parmIncludeCategories())
        {
            //Attaching category to corresponding project after filtering on the basis of resource and project if validation is done.
            ProjParameters projParametersCategory;
            List categories = new List(Types::Class);

            changecompany(_legalEntity)
            {
                projParametersCategory = ProjParameters::find();
                    
                if (projParametersCategory.TimesheetServiceEnableDefaultLineProperty
                    || projParametersCategory.ValidationProjCategory == ProjValParameter::Mandatory
                    || projParametersCategory.ValidationProjCategory == ProjValParameter::Lookup
                    || projParametersCategory.ValidationEmplCategory == ProjValParameter::Mandatory
                    || projParametersCategory.ValidationEmplCategory == ProjValParameter::Lookup)
                {
                    categories = this.getCategoriesListForProject(_resource, _legalEntity, _projProjectLookup.ProjId);
                }
            }

            //Add list of the categories to the TSTimesheetProject object
            tsTimesheetProject.parmCategory(categories);
        }

        return tsTimesheetProject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectsForResource</Name>
				<Source><![CDATA[
    private List getProjectsForResource(ResourceRecId _resource, LegalEntityDataAreaId _legalEntity, TSTimesheetProjectFilterRulesParams _projectFilterRulesParams)
    {
        List projectList = new List(Types::Class);
        Map custNames = new Map(Types::String, Types::String);
        TSTimesheetProjectServiceTmp tmpProjectsTable;
        boolean performanceFeatureEnabled = FeatureStateProvider::isFeatureEnabled(TSTimesheetProjectServicePerformanceImprovementFeature::instance());
        FromDateTime startDateTime = DateTimeUtil::utcNow();

        if (performanceFeatureEnabled 
            && (_projectFilterRulesParams.parmSearchString() == '')
            && (!_projectFilterRulesParams.parmIncludeProjectIfAssignedToResource())
            && (!_projectFilterRulesParams.parmIncludeProjectIfUsedbyResourceRecently()))
        {
            return projectList;
        }

        TSTimesheetInstrumentationLogger mobileSearchLogger = TSTimesheetInstrumentationLogger::createLogger('TsTimesheetProjectService');
        TSTimesheetInstrumentationActivities submissionActivities = TSTimesheetInstrumentationActivities::construct(mobileSearchLogger);

        using (var submitContext = submissionActivities.mobileTimesheetSearch())
        {
           //Get all Projects data for the legal entity abstracted in TSTimesheetProject object
            Query queryProject = TSTimesheetProjectService::projectLookup(_resource, _projectFilterRulesParams, _legalEntity);

            boolean tmpRecordsCreated;

            // There are performance constraints on how we fetch the top 200 projects. The service go through each project in order to find if it pass the other filters. 
            // The other filters also made two to four queries for each project. 
            // This cause the service to keep iterating projects if project is not fulfilling the nested queries filter criteria. 
            // This makes the performance of the service directly proportional to the amount of the projects.
            // Using set based operations in order to avoid iterating through each project when performance feature is enabled.
            if (performanceFeatureEnabled)
                tmpRecordsCreated = this.addProjectFilters(queryProject, tmpProjectsTable, _projectFilterRulesParams, _legalEntity, _resource);

            QueryRun qRunProject = new QueryRun(queryProject);

            if (tmpRecordsCreated)
            {
                qRunProject.setRecord(tmpProjectsTable);
            }

            while (qRunProject.next())
            {
                TSProjCustGrantLookup projCustGrantLookup = qRunProject.get(tableNum(TSProjCustGrantLookup));

                // We need to fetch all projects based on rules provided to method
                if (performanceFeatureEnabled
                    || this.includeProjectMobile(_resource, projCustGrantLookup, _projectFilterRulesParams, _legalEntity))
                {
                    projectList.addEnd(this.getProjectMobile(_resource, _legalEntity, projCustGrantLookup, _projectFilterRulesParams, custNames));
                }

                // Limit search results to maxProjectSearchResultCount.
                if (projectList.elements() >= maxProjectSearchResultCount)
                {
                    break;
                }
            }

            mobileSearchLogger.logInformation(
                strFmt('Timesheet mobile app performance- Performance flag: %1, Total time: %2 Total projects found: %3',
                performanceFeatureEnabled, DateTimeUtil::getDifference(DateTimeUtil::utcNow(), startDateTime), projectList.elements()));
        }

        return projectList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProjectFilters</Name>
				<Source><![CDATA[
    protected boolean addProjectFilters(
        Query _queryProject, 
        TSTimesheetProjectServiceTmp _tmpProjectsTable, 
        TSTimesheetProjectFilterRulesParams _projectFilterRulesParams,
        LegalEntityDataAreaId _legalEntity,
        ResourceRecId _resource)
    {
        boolean tmpRecordsAdded;
        ProjTable projTableLocal;
        
        if (_projectFilterRulesParams.parmIncludeAllInProcessProjects())
        {
            _queryProject.dataSourceTable(tableNum(TSProjCustGrantLookup))
                .addRange(fieldNum(TSProjCustGrantLookup, Status)).value(queryValue(ProjStatus::InProcess));
        }

        if (_projectFilterRulesParams.parmIncludeProjectIfUsedByResource())
        {
            changecompany(_legalEntity)
            {
                TSTimesheetLine tsTimesheetLine;

                insert_recordset _tmpProjectsTable (ProjId)
                select ProjId from tsTimesheetLine
                    group by tsTimesheetLine.Projid
                    where tsTimesheetLine.Resource == _resource
                       && tsTimesheetLine.ProjectDataAreaId == _legalEntity
                    exists join projTableLocal
                    where projTableLocal.ProjId == tsTimesheetLine.ProjId
                       && (projTableLocal.Status == ProjStatus::Completed
                            || projTableLocal.Status == ProjStatus::User1
                            || projTableLocal.Status == ProjStatus::User2
                            || projTableLocal.Status == ProjStatus::User3);
            }

            tmpRecordsAdded = true;
        }

        if (_projectFilterRulesParams.parmIncludeProjectIfUsedbyResourceRecently())
        {
            changecompany(_legalEntity)
            {
                TSTimesheetLine tsTimesheetLine;
                TSTimesheetTable tsTimesheetTable;

                insert_recordset _tmpProjectsTable (ProjId)
                select ProjId from tsTimesheetLine
                    group by tsTimesheetLine.Projid
                    exists join tsTimesheetTable
                    where tsTimesheetTable.TimesheetNbr == tsTimesheetLine.TimesheetNbr
                        && tsTimesheetLine.Resource == _resource
                        && tsTimesheetTable.CreatedDateTime >= DateTimeUtil::newDateTime(_projectFilterRulesParams.parmRecentlyUsedCutoffDate(), 0);
            }

            tmpRecordsAdded = true;
        }

        if (_projectFilterRulesParams.parmIncludeProjectIfAssignedToResource())
        {
            ProjValEmplProjSetup    projValEmplProjSetup;
            ProjValEmplProjSetup    projValEmplProjSetup2;

            insert_recordset _tmpProjectsTable (ProjId)
            select Projid from projValEmplProjSetup
                group by projValEmplProjSetup.Projid
                where projValEmplProjSetup.GroupId
                    exists join projValEmplProjSetup2
                    where projValEmplProjSetup2.Resource == _resource
                       && projValEmplProjSetup2.GroupId == projValEmplProjSetup.GroupId;

            insert_recordset _tmpProjectsTable (ProjId)
            select Projid from projValEmplProjSetup
                group by projValEmplProjSetup.Projid
                where projValEmplProjSetup.Resource == _resource
                    && projValEmplProjSetup.GroupId == projValEmplProjSetup.GroupId;
            
            tmpRecordsAdded = true;
        }

        if (tmpRecordsAdded)
        {
            QueryBuildDataSource tmpProjectsDS = _queryProject.dataSourceTable(tableNum(TSProjCustGrantLookup)).addDataSource(tableNum(TSTimesheetProjectServiceTmp));
            tmpProjectsDS.addLink(fieldNum(TSProjCustGrantLookup, ProjId), fieldNum(TSTimesheetProjectServiceTmp, ProjId));
            tmpProjectsDS.joinMode(JoinMode::ExistsJoin);
        }

        return tmpRecordsAdded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the query for the activities associated with a project.
    /// </summary>
    /// <param name="_legalEntity">
    ///     The legal entity.
    /// </param>
    /// <param name="_projectRecId">
    ///     The project's <c>RecId</c>.
    /// </param>
    /// <returns>
    ///     The query to get the activities associated with a project in the legal entity.
    /// </returns>
    protected Query getActivityQuery(LegalEntityDataAreaId _legalEntity, ProjectRecId _projectRecId)
    {
        return ActivityFacade::getActivitiesByProject(_legalEntity, _projectRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivitiesForProject</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the activities for a given project in a given legal entity.
    /// </summary>
    /// <param name="_legalEntity">
    ///     The legal entity.
    /// </param>
    /// <param name="_projectRecId">
    ///     The project's <c>RecId</c>.
    /// </param>
    /// <returns>
    ///     A <c>List</c> of TSTimesheetActivity objects.
    /// </returns>
    protected List getActivitiesForProject(LegalEntityDataAreaId _legalEntity, ProjectRecId _projectRecId)
    {
        changecompany(_legalEntity)
        {
			Query queryActivity = this.getActivityQuery(_legalEntity, _projectRecId);
			QueryRun qRunActivity = new QueryRun(queryActivity);

			List activityList = new List(Types::Class);

			while (qRunActivity.next())
			{
				smmActivities smmActivities;
				smmActivities = qRunActivity.get(tableNum(smmActivities));
				TSTimesheetActivity tsTimesheetActivity = new TSTimesheetActivity();
				tsTimesheetActivity.parmProjActivityNumber(smmActivities.ActivityNumber);
				tsTimesheetActivity.parmProjActivityPurpose(smmActivities.Purpose);

                ProjCategory projCategory = this.findDefaultCategoryForActivity(smmActivities);
				tsTimesheetActivity.parmDefaultHourCategory(projCategory.CategoryId);
				tsTimesheetActivity.parmDefaultHourCategoryName(projCategory.Name);

				activityList.addEnd(tsTimesheetActivity);
			}

			return activityList;
		}
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDefaultCategoryForActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Get the default project category for the given activity.
    /// </summary>
    /// <param name="_smmActivities">
    ///     The <c>smmActivities</c> record.
    /// </param>
    /// <returns>
    ///     A <c>ProjCategory</c> record.
    /// </returns>
    protected ProjCategory findDefaultCategoryForActivity(smmActivities _smmActivities)
    {
        return TsTimesheetService::findDefaultCategoryForActivity(_smmActivities.ActivityNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLinePropertyList</Name>
				<Source><![CDATA[
    private List getLinePropertyList(container _conCompanies)
    {
        ProjLineProperty projLineProperty;

        List linePropertyList = new List(Types::Class);

        while select crossCompany : _conCompanies
            LinePropertyId, Name from projLineProperty
        {
            TSTimesheetLineProperty tsTimesheetLineProperty = new TSTimesheetLineProperty();
            tsTimesheetLineProperty.parmProjLineProperty(projLineProperty.LinePropertyId);
            tsTimesheetLineProperty.parmProjLinePropertyName(projLineProperty.Name);
            linePropertyList.addEnd(tsTimesheetLineProperty);
        }

        return linePropertyList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesTaxGroupList</Name>
				<Source><![CDATA[
    private List getSalesTaxGroupList(container _conCompanies)
    {
        TaxGroupHeading taxGroupHeading;

        List salesTaxGroupList = new List(Types::Class);

        while select crossCompany : _conCompanies
            TaxGroup, TaxGroupName from taxGroupHeading
        {
            TSTimesheetSalesTaxGroup tsTimesheetSalesTaxGroup = new TSTimesheetSalesTaxGroup();
            tsTimesheetSalesTaxGroup.parmSalesTaxGroup(taxGroupHeading.TaxGroup);
            tsTimesheetSalesTaxGroup.parmDescription(taxGroupHeading.TaxGroupName);
            salesTaxGroupList.addEnd(tsTimesheetSalesTaxGroup);
        }

        return salesTaxGroupList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesItemTaxGroupList</Name>
				<Source><![CDATA[
    private List getSalesItemTaxGroupList(container _conCompanies)
    {
        TaxItemGroupHeading taxItemGroupHeading;

        List salesItemTaxGroupList = new List(Types::Class);

        while select crossCompany : _conCompanies
            TaxItemGroup, Name from taxItemGroupHeading
        {
            TSTimesheetSalesItemTaxGroup tsTimesheetSalesItemTaxGroup = new TSTimesheetSalesItemTaxGroup();
            tsTimesheetSalesItemTaxGroup.parmSalesItemTaxGroup(taxItemGroupHeading.TaxItemGroup);
            tsTimesheetSalesItemTaxGroup.parmDescription(taxItemGroupHeading.Name);
            salesItemTaxGroupList.addEnd(tsTimesheetSalesItemTaxGroup);
        }

        return salesItemTaxGroupList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCategoriesList</Name>
				<Source><![CDATA[
    private List getCategoriesList(container _conCompanies)
    {
        List categoriesList = new List(Types::Class);

        ProjCategory projCategory;

        while select crossCompany : _conCompanies
            Name, CategoryId, TaxItemGroupId from projCategory
                where projCategory.CategoryType == ProjCategoryType::Hour 
                    && projCategory.Active == NoYes::Yes
        {
            TSTimesheetCategory tsTimesheetCategory = new TSTimesheetCategory();
            tsTimesheetCategory.parmProjCategoryName(projCategory.Name);
            tsTimesheetCategory.parmProjCategoryId(projCategory.CategoryId);
            tsTimesheetCategory.parmDefaultSalesItemTaxGroup(projCategory.TaxItemGroupId);
            categoriesList.addEnd(tsTimesheetCategory);
        }

        return categoriesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCategoriesListForProject</Name>
				<Source><![CDATA[
    private List getCategoriesListForProject(ResourceRecId _resource, DataAreaId _legalEntity, ProjId _projId)
    {
        List categoriesList = new List(Types::Class);

        Query queryCategory = TSTimesheetProjectService::projCategoryLookup(_resource, _projId, _legalEntity, ProjTable::find(_projId), true);
        QueryRun qRunCategory = new QueryRun(queryCategory);
                                    
        while (qRunCategory.next())
        {
            ProjCategory projCategory = qRunCategory.get(tableNum(ProjCategory));
            TSTimesheetCategory tsTimesheetCategory = new TSTimesheetCategory();
            tsTimesheetCategory.parmProjCategoryName(projCategory.Name);
            tsTimesheetCategory.parmProjCategoryId(projCategory.CategoryId);
            tsTimesheetCategory.parmDefaultSalesItemTaxGroup(projCategory.TaxItemGroupId);
            tsTimesheetCategory.parmDefaultLineProperty(ProjLinePropertySetup::findLinePropertyId(_projId, projCategory.CategoryId));
            categoriesList.addEnd(tsTimesheetCategory);
        }

        return categoriesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFavoriteProject</Name>
				<Source><![CDATA[
    private boolean isFavoriteProject(ResourceRecId _resource, DataAreaId _legalEntity, ProjId _projId)
    {
        TSTimesheetFavorites tsTimesheetFavorites;
        ProjValEmplProjSetup resourceValidation;
        ProjValEmplProjSetup projectValidation;

        // Empl and All
        select firstonly RecId from tsTimesheetFavorites
            where ((tsTimesheetFavorites.Resource         == _resource
                &&   tsTimesheetFavorites.TableGroupAll   == TableGroupAll::Table)
                ||  tsTimesheetFavorites.TableGroupAll    == TableGroupAll::All)
                && tsTimesheetFavorites.ProjId            == _projId
                && tsTimesheetFavorites.ProjectDataAreaId == _legalEntity;

        //group
        if (tsTimesheetFavorites.RecId == 0)
        {
            select firstonly RecId from resourceValidation
                join projectValidation
                    group by resourceValidation.GroupId, resourceValidation.Projid, resourceValidation.RecId
                    where resourceValidation.GroupId  == projectValidation.GroupId
                    && resourceValidation.Resource    == _resource
                    && resourceValidation.Projid      == ''
                    && projectValidation.Resource     == 0
                exists join tsTimesheetFavorites
                    where tsTimesheetFavorites.ProjValEmplGroup  == resourceValidation.GroupId
                    &&    tsTimesheetFavorites.TableGroupAll     == TableGroupAll::GroupId
                    &&    tsTimesheetFavorites.ProjId            == _projId
                    &&    tsTimesheetFavorites.ProjectDataAreaId == _legalEntity;
        }

        return (tsTimesheetFavorites.RecId != 0 || resourceValidation.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeProject</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Detemines whether project should be included based on filter rules passed into method.
    /// </summary>
    /// <param name="_resource">
    ///     The <c>RecId</c> of the resource.
    /// </param>
    /// <param name = "_projProjectLookup">
    ///     The project lookup record to evaluate.
    /// </param>
    /// <param name="_projectFilterRulesParams">
    ///     Rules for how to filter project records.
    /// </param>
    /// <param name="_legalEntity">
    ///     Company context for the project and user.
    /// </param>
    /// <returns>
    ///     true if project should be included in results; otherwise, false.
    /// </returns>
    protected boolean includeProject(ResourceRecId _resource, ProjProjectLookup _projProjectLookup, 
        TSTimesheetProjectFilterRulesParams _projectFilterRulesParams, DataAreaId _legalEntity = curExt())
    {
        if (_projectFilterRulesParams.parmIncludeAllInProcessProjects())
        {
            if (_projProjectLookup.Status == ProjStatus::InProcess)
            {
                return true;
            }
        }

        if (_projectFilterRulesParams.parmIncludeProjectIfUsedByResource())
        {
            if (this.shouldGetTSTimesheetLine(_projProjectLookup))
            {
                changecompany(_legalEntity)
                {
                    TSTimesheetLine tsTimesheetLine;

                    select firstonly RecId from tsTimesheetLine where
                        tsTimesheetLine.Resource == _resource
                            && tsTimesheetLine.ProjId == _projProjectLookup.ProjId;

                    if (tsTimesheetLine.RecId != 0)
                    {
                        return true;
                    }
                }
            }
        }

        if (_projectFilterRulesParams.parmIncludeProjectIfUsedbyResourceRecently())
        {
            changecompany(_legalEntity)
            {
                TSTimesheetLine tsTimesheetLine;
                TSTimesheetTable tsTimesheetTable;

                select firstonly RecId from tsTimesheetLine
                    exists join tsTimesheetTable
                    where tsTimesheetTable.TimesheetNbr == tsTimesheetLine.TimesheetNbr
                        && tsTimesheetLine.Resource == _resource
                        && tsTimesheetLine.ProjId == _projProjectLookup.ProjId
                        && tsTimesheetTable.PeriodFrom >= _projectFilterRulesParams.parmRecentlyUsedCutoffDate();
                
                if (tsTimesheetLine.RecId != 0)
                {
                    return true;
                }
            }
        }

        if (_projectFilterRulesParams.parmIncludeProjectIfAssignedToResource())
        {
            changecompany(_legalEntity)
            {
                boolean isAssignedToResource;

                if (TSTimesheetHelper::isTSDisplayResourceGroupProjEnabled())
                {
                    isAssignedToResource = ProjValEmplProjSetup::isProjAssignedToResource(_resource, _projProjectLookup.ProjId, _legalEntity);
                }
                else
                {
                    isAssignedToResource = ProjValEmplProjSetup::existDirect(_projProjectLookup.ProjId, _resource);
                }

                return isAssignedToResource;               
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeProjectMobile</Name>
				<Source><![CDATA[
    protected boolean includeProjectMobile(ResourceRecId _resource, TSProjCustGrantLookup _projProjectLookup,
        TSTimesheetProjectFilterRulesParams _projectFilterRulesParams, DataAreaId _legalEntity = curExt())
    {        
        boolean ret = false;

        if (_projectFilterRulesParams.parmIncludeAllInProcessProjects())
        {
            if (_projProjectLookup.Status == ProjStatus::InProcess)
            {
                ret = true;
            }
        }

        if (_projectFilterRulesParams.parmIncludeProjectIfUsedByResource() && !ret)
        {
            if (this.shouldGetTSTimesheetLineMobile(_projProjectLookup))
            {
                changecompany(_legalEntity)
                {
                    TSTimesheetLine tsTimesheetLine;

                    select firstonly RecId from tsTimesheetLine where
                        tsTimesheetLine.Resource == _resource
                            && tsTimesheetLine.ProjId == _projProjectLookup.ProjId;

                    if (tsTimesheetLine.RecId != 0)
                    {
                        ret = true;
                    }
                }
            }
        }

        if (_projectFilterRulesParams.parmIncludeProjectIfUsedbyResourceRecently() && !ret)
        {
            changecompany(_legalEntity)
            {
                TSTimesheetLine tsTimesheetLine;
                TSTimesheetTable tsTimesheetTable;

                if (TSTimesheetHelper::isTSDisplayResourceGroupProjEnabled())
                {
                    select firstonly RecId from tsTimesheetLine
                        order by CreatedDateTime desc
                        where tsTimesheetLine.Resource == _resource
                            && tsTimesheetLine.ProjId == _projProjectLookup.ProjId
                        && tsTimesheetLine.CreatedDateTime <= DateTimeUtil::newDateTime(_projectFilterRulesParams.parmRecentlyUsedCutoffDate(), 0);

                }
                else
                {
                    select firstonly RecId from tsTimesheetLine
                        exists join tsTimesheetTable
                        where tsTimesheetTable.TimesheetNbr == tsTimesheetLine.TimesheetNbr
                            && tsTimesheetLine.Resource == _resource
                            && tsTimesheetLine.ProjId == _projProjectLookup.ProjId
                            && tsTimesheetTable.PeriodFrom >= _projectFilterRulesParams.parmRecentlyUsedCutoffDate();
                }

                if (tsTimesheetLine.RecId != 0)
                {
                    ret = true;
                }
            }
        }

        if (_projectFilterRulesParams.parmIncludeProjectIfAssignedToResource() && !ret)
        {
            changecompany(_legalEntity)
            {
                if (ProjValEmplProjSetup::existDirect(_projProjectLookup.ProjId, _resource))
                {
                    ret = true;
                }
                else if (TSTimesheetHelper::isTSDisplayResourceGroupProjEnabled())
                {
                    ret = ProjValEmplProjSetup::isProjAssignedToResource(_resource, _projProjectLookup.ProjId, _legalEntity);
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projectLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns query for project lookup, for the specifed resource and category.
    /// </summary>
    /// <param name="_resource">
    ///     The <c>RecId</c> of the resource.
    /// </param>
    /// <param name="_projectFilterRulesParams">
    ///     Rules on which records to retrieve.  Can impact performance.
    /// </param>
    /// <param name="legalEntity">
    ///     The legal entity of the project to be loaded.
    /// </param>
    /// <returns>
    ///     Query for project lookup.
    /// </returns>
    private static Query projectLookup(
        ResourceRecId         _resource,
        TSTimesheetProjectFilterRulesParams _projectFilterRulesParams,
        LegalEntityDataAreaId _legalEntity = curext())
    {
        Query projTableLookQuery;
        boolean isInterCompany  = (_legalEntity != curext());

        // if the project/category, resource/project, resource/category validations setup is turned on at one legal entity and line is
        // created in other legal entity, then we need to changecompany to fetch the appropriate project parameter values
        changecompany(_legalEntity)
        {
            ProjTableLookup projTableLookup = new ProjTableLookup();
            projTableLookup.parmIsIntercompany(isInterCompany);
            projTableLookQuery = projTableLookup.buildProjectLookupQueryResourceMobile(tableNum(TSTimesheetLine), '', _resource, false, true);

            // Returns no search results if search string is empty and not in the recent or assigned tab.
            if ((_projectFilterRulesParams.parmSearchString() == '') &&
     	        (!_projectFilterRulesParams.parmIncludeProjectIfAssignedToResource()) &&
     		        (!_projectFilterRulesParams.parmIncludeProjectIfUsedbyResourceRecently()))
            {
                return projTableLookQuery;
            }

            // We need more fields returned from the query as the downstream code needs those fields.
            var tableNumber = tableNum(TSProjCustGrantLookup);
            
            QueryBuildDataSource qbds = projTableLookQuery.dataSourceTable(tableNumber);
            QueryBuildRange qbrStageLanguage = SysQuery::findOrCreateRange(qbds, fieldNum(TSProjCustGrantLookup, StageLanguage));
            qbrStageLanguage.value(currentUserLanguage());

            qbds.addSortField(fieldNum(TSProjCustGrantLookup, RecId));
            qbds.addSortField(fieldNum(TSProjCustGrantLookup, ValidateProjCategory));
            qbds.addSortField(fieldNum(TSProjCustGrantLookup, Status));

            if (_projectFilterRulesParams.parmSearchString() != '')
            {
                var filter = strFmt('((%1.%2 like "%6") || (%1.%3 like "%6") || (%1.%4 like "%6") || (%1.%5 like "%6"))',
                    tableStr(TSProjCustGrantLookup),
                    fieldStr(TSProjCustGrantLookup, Name),
                    fieldStr(TSProjCustGrantLookup, ProjId),
                    fieldStr(TSProjCustGrantLookup, CustAccount),
                    fieldStr(TSProjCustGrantLookup, CustName),
                    queryValue(strFmt('*\%1*', _projectFilterRulesParams.parmSearchString())));
                qbds.addRange(fieldNum(TSProjCustGrantLookup, Name)).value(filter);
            }            
        }

        if (isInterCompany)
        {
            projTableLookQuery.allowCrossCompany(true);
            projTableLookQuery.addCompanyRange(SysQuery::value(_legalEntity));
        }

        return projTableLookQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projCategoryLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     BuildQueryProjCategory returns a crosscompany <c>Query</c> object that will be used for Category selection.
    /// </summary>
    /// <param name="_resource">
    ///     The <c>RecId</c> of the resource.
    /// </param>
    /// <param name="_projId">
    ///     The project ID.
    /// </param>
    /// <param name="_legalEntity">
    ///     The legal entity of the project to be loaded.
    /// </param>
    /// <param name="_projTable">
    ///     The project.
    /// </param>
    /// <param name="_useQueryCache">
    ///     true if it is ok to use cached queries.
    /// </param>
    /// <returns>
    ///     Query for category lookup.
    /// </returns>
    private static Query projCategoryLookup(
        ResourceRecId         _resource,
        ProjId                _projId,
        LegalEntityDataAreaId _legalEntity   = curext(),
        ProjTable             _projTable     = null,
        boolean               _useQueryCache = false)
    {
        Query   query;
        boolean isInterCompany = (_legalEntity != curext());

        changecompany(_legalEntity)
        {
            ProjCategoryLookup projCategoryLookup = new ProjCategoryLookup();
            projCategoryLookup.parmCategoryType(ProjCategoryType::Hour);
            projCategoryLookup.parmIsIntercompany(isInterCompany);
            projCategoryLookup.parmUseQueryCache(_useQueryCache);

            query = projCategoryLookup.buildQuery(tableNum(TSTimesheetLine), _projId, _resource, _projTable);
        }

        if (isInterCompany)
        {
            query.allowCrossCompany(true);
            query.addCompanyRange(SysQuery::value(_legalEntity));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLegalEntities</Name>
				<Source><![CDATA[
    private List getLegalEntities(boolean isIntercompany)
    {
        List    listLegalEntities = new List(Types::String);

        if (isIntercompany)
        {
            // Used LedgerInterCompany table to get legal entity because in Timesheet scenario LE is populated from this table.
            LedgerInterCompany ledgerInterCompany;
            while select DestinationCompany from ledgerInterCompany
                where ledgerInterCompany.OriginatingCompany == curExt()
            {
                listLegalEntities.addEnd(ledgerInterCompany.DestinationCompany);
            }
        }

        listLegalEntities.addEnd(this.getDefaultLegalEntity());
        return listLegalEntities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProjRecId</Name>
				<Source><![CDATA[
    private RecId findProjRecId(ProjId _projId, LegalEntityDataAreaId _legalEntity)
    {
        ProjTable projTable;
        container interCompLE = [_legalEntity];

        if (_projId)
        {
            select firstonly crossCompany : interCompLE RecId from projTable
                where projTable.ProjId == _projId;
        }

        return projTable.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>