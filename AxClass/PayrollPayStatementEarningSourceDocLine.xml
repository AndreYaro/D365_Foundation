<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollPayStatementEarningSourceDocLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PayrollPayStatementEarningSourceDocLine</c> class provides the information
///    to handle the distributions and sub-ledger journal account entries that apply to
///    pay statement earning lines.
/// </summary>
[SourceDocumentEnumLiteralClassExtensionAttribute(enumStr(SourceDocumentLine_PayrollPayStatement), enumLiteralStr(SourceDocumentLine_PayrollPayStatement, PayStatementEarningLine))]
class PayrollPayStatementEarningSourceDocLine extends PayrollPayStatementSourceDocumentLine
    implements SourceDocumentLineItemIProductQuantity
{
    PayrollPayStatementEarningLine  payStatementEarningLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateSourceDocumentAmountMap</Name>
				<Source><![CDATA[
    protected SourceDocumentAmountMap calculateSourceDocumentAmountMap()
    {
        SourceDocumentAmountMap     sourceDocumentAmountMap;
        SourceDocumentLine          sourceDocumentLineValue;

        // Create map
        sourceDocumentAmountMap = SourceDocumentAmountMap::construct();
        sourceDocumentLineValue = this.parmSourceDocumentLine();

        sourceDocumentAmountMap.insert(SourceDocumentAmount::newFromParameters(sourceDocumentLineValue, payStatementLine.AccountingCurrencyAmount, MonetaryAmount::PayrollCost));

        return sourceDocumentAmountMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeImplementation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the instance variables.
    /// </summary>
    /// <param name="_sourceDocumentLineImplementation">
    /// A source document line implementation table.
    /// </param>
    /// <param name="_additionalInformation">
    /// A map to hold buffers of pre initiliazed objects need by the framework to the source document.
    /// </param>
    protected void initializeImplementation(SourceDocumentLineImplementation _sourceDocumentLineImplementation, Map _additionalInformation = null)
    {
        super(_sourceDocumentLineImplementation);

        // Initialize the pay statement earning line from the base pay statement line
        select firstonly payStatementEarningLine
        where payStatementEarningLine.RecId == payStatementLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDefaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault parmDefaultDimension()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDescription</Name>
				<Source><![CDATA[
    public Description parmDescription()
    {
        return strFmt("@Payroll:EarningCode1", PayrollEarningCode::find(this.parmEarningCode()).EarningCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEarningCode</Name>
				<Source><![CDATA[
    public PayrollEarningCodeRecId parmEarningCode()
    {
        return payStatementEarningLine.EarningCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsDocumentLineEditable</Name>
				<Source><![CDATA[
    public boolean parmIsDocumentLineEditable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsEmployerLine</Name>
				<Source><![CDATA[
    public NoYes parmIsEmployerLine()
    {
        // IsEmployerLine is always No for earning lines
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerDimensionDefaultAccount</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount parmLedgerDimensionDefaultAccount(LegalEntityRecId _legalEntityRecId = this.parmLegalEntityRecId())
    {
        AccountingDistribution              accountingDistribution;
        PayrollEarningStatementLine         payrollEarningStatementLine;
        HcmPositionDetail                   hcmPositionDetail;
        LedgerDimensionDefaultAccount       defaultAccount;

        select count(RecId) from payrollEarningStatementLine
        where payrollEarningStatementLine.PayStatementEarningLine == payStatementEarningLine.RecId;

        if (payrollEarningStatementLine.RecId == 1)
        {
            select firstonly LedgerDimension from accountingDistribution
            exists join payrollEarningStatementLine
                where accountingDistribution.SourceDocumentLine == payrollEarningStatementLine.SourceDocumentLine
                    && payrollEarningStatementLine.PayStatementEarningLine == payStatementEarningLine.RecId;

            defaultAccount = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(accountingDistribution.LedgerDimension);
        }
        else
        {
            //
            // Earning lines were consolidated to generate this line or it is a grossup earning line (which will have no earning statement lines).
            // Use the default dimension from earning code.
            //
            hcmPositionDetail = HcmPositionDetail::findByPosition(payStatementEarningLine.Position,
                                                              DateTimeUtil::newDateTime(this.parmAccountingDate(), 0, DateTimeUtil::getCompanyTimeZone()));

            defaultAccount = PayrollEarningCodeAccountingRule::getEarningCodeLedgerDimension(_legalEntityRecId,
                                                                                         this.parmEarningCode(),
                                                                                         payStatement.Worker,
                                                                                         hcmPositionDetail.Department,
                                                                                         hcmPositionDetail.Job);
        }

        return defaultAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuantity</Name>
				<Source><![CDATA[
    public Qty parmQuantity()
    {
        return payStatementEarningLine.Quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuantityDecimalPlaces</Name>
				<Source><![CDATA[
    public Decimals parmQuantityDecimalPlaces()
    {
        return 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>