<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSControlOutboundCatchWeightTags</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSControlOutboundCatchWeightTags</c> class is responsible for handling the outbound catch weight tags control on the mobile device.
/// </summary>
#WHSRF
[WhsControlFactory(#OutboundCatchWeightTags)]
public class WHSControlOutboundCatchWeightTags extends WhsControl
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the control.
    /// </summary>
    /// <returns>true if processing succeeded; otherwise, false.</returns>
    public boolean process()
    {
        boolean ret = super();

        if (ret)
        {
            WHSWorkLine workLine = controlData.parmWorkLine();
            InventDim workInventDim = this.getWorkInventDim(workLine);

            container selectedCon = str2con(this.parmData(), #FastValidationListSeparator);
            int		  len = conLen(selectedCon);
            for (int i = 1; i <= len; i++)
            {
                WHSCatchWeightTagNumber tagNumber = conPeek(selectedCon, i);
                WHSCatchWeightTag catchWeightTag = WHSCatchWeightTag::find(tagNumber);
                if (!catchWeightTag || catchWeightTag.ItemId != workLine.ItemId
                    || !this.validateInventDim(workLine.ItemId, workInventDim, InventDim::find(catchWeightTag.InventDimId)))
                {
                    ret = this.fail(strFmt("@WAX:CatchWeightTagInvalidTagNumber", tagNumber));
                    break;
                }
                else if (!WHSCatchWeightTagStatus::isActive(tagNumber))
                {
                    return this.fail(strFmt("@WAX:MobileDeviceControlValidationCatchWeightTagInvalidStatus", tagNumber));
                }
            }

            if (ret)
            {
                fieldValues.insert(WHSWorkExecuteDisplayCatchWeightControls::OutboundCatchWeightTags, this.parmData());
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventDim</Name>
				<Source><![CDATA[
    private boolean validateInventDim(ItemId _itemId, InventDim _workInventDim, InventDim _tagInventDim)
    {
        if (WHSInventTable::catchWeightTagDimensionTrackingMethod(_itemId) == WHSCatchWeightTagDimensionTrackingMethod::ProductTrackingAndAllStorageDimensions)
        {
            _tagInventDim.clearNotSelectedDim(_workInventDim.toDimParm());
        }
        else
        {
            _workInventDim.clearLocationAndBelowDim(_itemId);
            _tagInventDim.clearLocationAndBelowDim(_itemId);
        }

        return InventDim::isInventDimEqual(_tagInventDim, _workInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkInventDim</Name>
				<Source><![CDATA[
    private InventDim getWorkInventDim(WHSWorkLine _workLine)
    {
        InventDim workInventDim;
        if (WHSInventTable::catchWeightTagDimensionTrackingMethod(_workLine.ItemId) == WHSCatchWeightTagDimensionTrackingMethod::ProductTrackingAndAllStorageDimensions)
        {
            workInventDim = pass.createInventDimFromPass();

            if (mode == WHSWorkExecuteMode::MovementByTemplate && pass.lookupStr(#InventoryStatus) != pass.lookupStr(#FromInventoryStatus))
            {
                workInventDim.InventStatusId = pass.lookupStr(#FromInventoryStatus);
                workInventDim = InventDim::findOrCreate(workInventDim);
            }
        }
        else
        {
            InventDimID workInventDimId = WHSCatchWeightTag::inventDimWithTagSpecificDimensions(_workLine.inventDim(), _workLine.ItemId);
            workInventDim = InventDim::find(workInventDimId);
        }
        return workInventDim;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>