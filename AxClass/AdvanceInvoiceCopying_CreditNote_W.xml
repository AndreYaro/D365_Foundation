<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AdvanceInvoiceCopying_CreditNote_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
class AdvanceInvoiceCopying_CreditNote_W
{
    Set                         selectedHeaders;
    Set                         selectedLines;

    Map                         origTableOpenFractions;

    FormDataSource              callerTableDataSource;
    FormDataSource              linesDataSource;

    CzCustAdvanceInvoiceTable   callerTable;

    boolean                     createCorrectiveLines;
    boolean                     deleteLines;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initOrigOpenFractions</Name>
				<Source><![CDATA[
    private void initOrigOpenFractions(RecId _origTableRecId)
    {
        CzCustAdvanceInvoiceTable origTable = CzCustAdvanceInvoiceTable::findRecId(_origTableRecId);

        origTableOpenFractions.insert([ origTable.TableId, origTable.RecId ],
                                      (origTable.CustPostingProfile && origTable.InvoiceAmount) ?
                                      (origTable.amountCurOpen() / origTable.InvoiceAmount)     :
                                      1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        selectedHeaders        = new Set(Types::Container); // [ TableId, RecId ]
        selectedLines          = new Set(Types::Container); // [ TableId, RecId ]

        origTableOpenFractions = new Map(Types::Container, Types::Real); // [ TableId, RecId ] --> open amount / invoice amount
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerTable</Name>
				<Source><![CDATA[
    public CzCustAdvanceInvoiceTable parmCallerTable(CzCustAdvanceInvoiceTable _callerTable = callerTable)
    {
        if (! prmisdefault(_callerTable))
        {
            if (FormDataUtil::isFormDataSource(_callerTable))
            {
                callerTableDataSource = FormDataUtil::getFormDataSource(_callerTable);
            }
            callerTable = CzCustAdvanceInvoiceTable::findRecId(_callerTable.RecId);
        }

        return callerTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreateCorrectiveLines</Name>
				<Source><![CDATA[
    public boolean parmCreateCorrectiveLines(boolean _createCorrectiveLines = createCorrectiveLines)
    {
        createCorrectiveLines = _createCorrectiveLines;
        return createCorrectiveLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeleteLines</Name>
				<Source><![CDATA[
    public boolean parmDeleteLines(boolean _deleteLines = deleteLines)
    {
        deleteLines = _deleteLines;
        return deleteLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLinesDataSource</Name>
				<Source><![CDATA[
    public FormDataSource parmLinesDataSource(FormDataSource _linesDataSource = linesDataSource)
    {
        linesDataSource = _linesDataSource;
        return linesDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        SetIterator               tableIterator = new SetIterator(selectedHeaders);
        SetIterator               lineIterator  = new SetIterator(selectedLines);
        CzCustAdvanceInvoiceTable origTable;
        CzCustAdvanceInvoiceLine  origLine;
        LineNum                   lineNum;
        real                      factor;

        ttsbegin;

        callerTable = CzCustAdvanceInvoiceTable::findRecId(callerTable.RecId, true);

        if (tableIterator.more())
        {
            origTable = CzCustAdvanceInvoiceTable::findRecId(conpeek(tableIterator.value(), 2));
            callerTable.initFromAdvanceInvoiceTable(origTable);
        }

        if (this.parmDeleteLines())
        {
            delete_from origLine
                where origLine.ParentRecId == callerTable.RecId;

            lineNum = 0;
        }
        else
        {
            select maxof(LineNum) from origLine
                where origLine.ParentRecId == callerTable.RecId;

            lineNum = origLine.LineNum + 1;
        }

        while (lineIterator.more())
        {
            origLine  = CzCustAdvanceInvoiceLine::findRecId(conpeek(lineIterator.value(), 2));

            if (! origTable)
            {
                origTable = CzCustAdvanceInvoiceTable::findRecId(origLine.ParentRecId);
                callerTable.CurrencyCode   = origTable.CurrencyCode;
                callerTable.ExchRate       = origTable.ExchRate;
                callerTable.ExchrateSecond = origTable.ExchrateSecond;
                callerTable.Triangulation  = origTable.Triangulation;
            }

            if (! origTableOpenFractions.exists([ origTable.TableId, origLine.ParentRecId ]))
            {
                this.initOrigOpenFractions(origLine.ParentRecId);
            }

            factor = origTableOpenFractions.lookup([ origTable.TableId, origLine.ParentRecId ]);

            origLine.ParentRecId                   =   callerTable.RecId;
            if (this.parmCreateCorrectiveLines())
            {
                origLine.AmountCur                 = - origLine.AmountCur;
            }
            else
            {
                origLine.AmountCur                 = - CurrencyExchangeHelper::amount(origLine.AmountCur * factor, callerTable.CurrencyCode);
            }
            origLine.OrigAdvanceInvoiceLineRecId   =   origLine.RecId;
            origLine.AdvanceInvoiceLineInternalRef =   0;
            origLine.LineNum                       =   lineNum;
            origLine.insert();
            lineNum ++;

            if (this.parmCreateCorrectiveLines())
            {
                origLine.AdvanceInvoiceLineInternalRef =   origLine.RecId;
                origLine.update();

                origLine.AmountCur                     = - origLine.AmountCur;
                origLine.OrigAdvanceInvoiceLineRecId   =   0;
                origLine.LineNum                       =   lineNum;
                origLine.insert();
                lineNum ++;
            }

            lineIterator.next();
        }

        callerTable.calcInvoiceAmount();
        callerTable.Type = AdvanceInvoiceType_W::CreditNote;
        callerTable.update();

        ttscommit;

        if (callerTableDataSource)
        {
            callerTableDataSource.research(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectLine</Name>
				<Source><![CDATA[
    public NoYes selectLine(
        tableId _tableId,
        RecId   _recId,
        boolean _set      = false,
        NoYes   _selected = NoYes::No)
    {
        if (_set)
        {
            if (_selected)
            {
                selectedLines.add       ([ _tableId, _recId ]);
            }
            else
            {
                if (selectedLines.in    ([ _tableId, _recId ]))
                {
                    selectedLines.remove([ _tableId, _recId ]);
                }
            }
        }

        return selectedLines.in([ _tableId, _recId ]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectLines</Name>
				<Source><![CDATA[
    protected void selectLines(
        RecId   _headerRecId,
        NoYes   _select)
    {
        CzCustAdvanceInvoiceLine line;

        while select TableId, RecId from line
            where line.ParentRecId == _headerRecId
        {
            this.selectLine(line.TableId, line.RecId, true, _select);
        }

        if (linesDataSource)
        {
            linesDataSource.research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectTable</Name>
				<Source><![CDATA[
    public NoYes selectTable(
        tableId _tableId,
        RecId   _recId,
        boolean _set      = false,
        NoYes   _selected = NoYes::No)
    {
        if (_set)
        {
            if (_selected)
            {
                selectedHeaders.add       ([ _tableId, _recId ]);
                this.selectLines(_recId, NoYes::Yes);
            }
            else
            {
                if (selectedHeaders.in    ([ _tableId, _recId ]))
                {
                    selectedHeaders.remove([ _tableId, _recId ]);
                    this.selectLines(_recId, NoYes::No);
                }
            }
        }

        return selectedHeaders.in([ _tableId, _recId ]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate()
    {
        boolean ret = true;

        SetIterator               tableIterator = new SetIterator(selectedHeaders);
        SetIterator               lineIterator  = new SetIterator(selectedLines);
        CzCustAdvanceInvoiceTable origTable;
        CzCustAdvanceInvoiceLine  origLine;
        Set                       origTableSet  = new Set(extendedTypeId2Type(extendedtypenum(recId)));
        Set                       currencySet   = new Set(Types::String);
        Set                       exchRateSet   = new Set(Types::Container);

        if (callerTable.Posted)
        {
            ret = checkFailed(strfmt("@GLS114112", callerTable.InvoiceId));
        }

        if (! selectedLines.elements())
        {
            ret = checkFailed(strfmt("@SYS34359", callerTable.InvoiceId));
        }

        while (tableIterator.more())
        {
            origTable = CzCustAdvanceInvoiceTable::findRecId(conpeek(tableIterator.value(), 2));
            origTableSet.add(origTable.RecId);

            currencySet.add(origTable.CurrencyCode);
            exchRateSet.add([ origTable.ExchRate, origTable.ExchrateSecond, origTable.Triangulation ]);

            origTableOpenFractions.insert([ origTable.TableId, origTable.RecId ],
                                          (origTable.CustPostingProfile && origTable.InvoiceAmount) ?
                                          (origTable.amountCurOpen() / origTable.InvoiceAmount)     :
                                          1);

            if (origTableOpenFractions.lookup([ origTable.TableId, origTable.RecId ]) < 1)
            {
                info(strfmt("@GLS114114", origTable.InvoiceId, origTable.amountCurOpen(), origTable.CurrencyCode));
            }

            tableIterator.next();
        }

        while (lineIterator.more())
        {
            origLine  = CzCustAdvanceInvoiceLine::findRecId(conpeek(lineIterator.value(), 2));

            if (ret && origLine.OrigAdvanceInvoiceLineRecId && this.parmCreateCorrectiveLines())
            {
                ret = checkFailed("@GLS110673");
            }

            if (! origTableSet.in(origLine.ParentRecId))
            {
                origTable = CzCustAdvanceInvoiceTable::findRecId(origLine.ParentRecId);
                origTableSet.add(origTable.RecId);

                currencySet.add(origTable.CurrencyCode);
                exchRateSet.add([ origTable.ExchRate, origTable.ExchrateSecond, origTable.Triangulation ]);
            }

            lineIterator.next();
        }
        if (currencySet.elements() > 1)
        {
            ret = checkFailed("@GLS114160");
        }
        else
        {
            if (exchRateSet.elements() > 1)
            {
                ret = checkFailed("@GLS114161");
            }
        }

        if (  this.parmCreateCorrectiveLines() &&
            ! this.parmDeleteLines()           &&
              CzCustAdvanceInvoiceLine::exist(callerTable.RecId))
        {
            ret = checkFailed("@GLS114132");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static AdvanceInvoiceCopying_CreditNote_W construct()
    {
        return new AdvanceInvoiceCopying_CreditNote_W();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>