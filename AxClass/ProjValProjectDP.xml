<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjValProjectDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjValProjectDP</c> class is a report data provider class for the <c>ProjValProject</c>
///    report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(ProjValProject)),
    SRSReportParameterAttribute(classStr(ProjValProjCategoryContract))
]
public class ProjValProjectDP extends SRSReportDataProviderBase
{
    #ProjReports

    ProjValEmplCategory         valEmplCategory;
    ProjValEmplProj             valEmplProj;
    ProjValProjCategory         valProjCategory;

    ProjValProject              valProject;

    ProjOptionTM                projTM;
    ProjOptionFixedPrice        projFixedPrice;
    ProjOptionInternal          projInternal;
    ProjOptionInvestment        projInvestment;
    ProjOptionTime              projTime;

    NoYes                       projTMBillingMethod;
    NoYes                       projFixedPriceBillingMethod;

    ProjOptionHours             categoryHour;
    ProjOptionItem              categoryItem;
    ProjOptionCost              categoryCost;
    ProjOptionRevenue           categoryRevenue;

    ProjValProject              projValProjectEnum;

    QueryBuildDataSource        qb_MainTable;
    QueryRun                    queryRun;

    ProjValProjectTmp           projValProjectTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getParameterValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the parameter values and assigns them to the variables.
    /// </summary>
    private void getParameterValues()
    {
        ProjValProjCategoryContract contract = this.parmDataContract() as ProjValProjCategoryContract;

        projTM = contract.parmTimeMaterial();
        projFixedPrice = contract.parmFixedPrice();
        projInvestment = contract.parmInvestment();
        projInternal = contract.parmInternalCost();
        projTime = contract.parmTime();

        projTMBillingMethod = contract.parmTimeMaterialBillingMethod();
        projFixedPriceBillingMethod = contract.parmFixedPriceBillingMethod();

        categoryHour = contract.parmHour();
        categoryCost = contract.parmExpenses();
        categoryItem = contract.parmItem();
        categoryRevenue = contract.parmRevenue();

        projValProjectEnum = contract.parmValProject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjValProjectTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the data from the <c>ProjValProjectTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>ProjValProjectTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute('ProjValProjectTmp')]
    public ProjValProjectTmp getProjValProjectTmp()
    {
        select * from projValProjectTmp;
        return projValProjectTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the query ranges.
    /// </summary>
    void initQuery()
    {
        int occurrence;

        qb_MainTable = queryRun.query().dataSourceTable(tableNum(ProjTable));

        for (occurrence=1; occurrence<=3; occurrence++)
        {
            qb_MainTable.clearRange(fieldNum(ProjTable,Type),1);
        }

        if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
        {
            QueryBuildDataSource qbdsPSAContractLineItems = queryRun.query().dataSourceTable(tableNum(PSAContractLineItems));
            qbdsPSAContractLineItems.enabled(true);
            PSAContractLineItemRangesHelper::addBillingMethodRangesToDS(
                qbdsPSAContractLineItems,
                projTMBillingMethod,
                projFixedPriceBillingMethod);
            PSAContractLineItemRangesHelper::addTransactionTypeRangesToDS(
                qbdsPSAContractLineItems,
                categoryHour,
                categoryCost,
                categoryRevenue,
                categoryItem,
                false);
        }
        else
        {
            if (projTM)
            {
                qb_MainTable.addRange(fieldNum(ProjTable, Type)).value(queryValue(ProjType::TimeMaterial));
            }

            if (projFixedPrice)
            {
                qb_MainTable.addRange(fieldNum(ProjTable, Type)).value(queryValue(ProjType::FixedPrice));
            }

            if (projInternal)
            {
                qb_MainTable.addRange(fieldNum(ProjTable, Type)).value(queryValue(ProjType::Internal));
                qb_MainTable.addRange(fieldNum(ProjTable, Type)).value(queryValue(ProjType::Cost));
            }

            if (projInvestment)
            {
                qb_MainTable.addRange(fieldNum(ProjTable, Type)).value(queryValue(ProjType::Investment));
            }

            if (projTime)
            {
                qb_MainTable.addRange(fieldNum(ProjTable, Type)).value(queryValue(ProjType::Time));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProjValProjectTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserting the values into the temporary table.
    /// </summary>
    /// <param name="_projTable">
    /// A <c>ProjTable</c> table buffer.
    /// </param>
    /// <param name="_projCategory">
    /// A <c>ProjCategory</c> table buffer.
    /// </param>
    /// <param name="_resource">
    /// A <c>ResourceView</c> table buffer.
    /// </param>
    private void insertProjValProjectTmp(ProjTable  _projTable, ProjCategory _projCategory, ResourceView _resource)
    {
        projValProjectTmp.clear();
        projValProjectTmp.ProjId = _projTable.ProjId;
        projValProjectTmp.Name = _projTable.Name;
        projValProjectTmp.CategoryId = _projCategory.CategoryId;
        projValProjectTmp.CategoryName = _projCategory.Name;
        projValProjectTmp.Resource = _resource.RecId;
        projValProjectTmp.ResourceId = _resource.ResourceId;
        projValProjectTmp.ResourceName = _resource.Name;
        projValProjectTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method provides the ability to write the report business logic. It will be called by SQL
    ///    Server Reporting Services (SSRS) at run time. The method should compute data and populate the data
    ///    tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        ProjTable                   qr_ProjTable;

        ProjCategory                projCategory;
        ResourceView                resource;

        ProjValEmplCategorySetUp    projValEmplCategorySetUp1, projValEmplCategorySetUp2;
        ProjValProjCategorySetUp    projValProjCategorySetUp1, projValProjCategorySetUp2;
        ProjValEmplProjSetup        projValEmplProjSetup1, projValEmplProjSetup2;

        ProjId                      prev_Id;

        this.getParameterValues();

        queryRun = new QueryRun(this.parmQuery());

        this.initQuery();

        while (queryRun.next())
        {
            switch (projValProjectEnum)
            {
                case ProjValProject::Category:
                    qr_ProjTable = queryRun.get(tableNum(ProjTable));

                    while select projValProjCategorySetUp1
                        where (projValProjCategorySetUp1.ProjId == qr_ProjTable.ProjId) && (projValProjCategorySetUp1.CategoryId || projValProjCategorySetUp1.GroupId)
                        join projCategory group by CategoryId, Name
                            where (!(categoryItem ^
                                     categoryHour ^
                                     categoryCost ^
                                     categoryRevenue) ||
                                    (categoryHour     && projCategory.CategoryType == ProjCategoryType::Hour)      ||
                                    (categoryItem     && projCategory.CategoryType == ProjCategoryType::Item)      ||
                                    (categoryCost     && projCategory.CategoryType == ProjCategoryType::Cost)      ||
                                    (categoryRevenue  && projCategory.CategoryType == ProjCategoryType::Revenue))
                            join CategoryId, GroupId from  projValProjCategorySetUp2
                                where (projValProjCategorySetUp2.CategoryId == projCategory.CategoryId) &&
                                    (((projValProjCategorySetUp2.CategoryId == projValProjCategorySetUp1.CategoryId) && (projValProjCategorySetUp1.CategoryId)) ||
                                     ((projValProjCategorySetUp2.GroupId    == projValProjCategorySetUp1.GroupId)    && (projValProjCategorySetUp2.GroupId)))
                    {
                        if (qr_ProjTable.ProjId != prev_Id)
                        {
                           prev_Id = qr_ProjTable.ProjId;
                        }

                        this.insertProjValProjectTmp(qr_ProjTable, projCategory, resource);
                    }
                    break;

                case ProjValProject::Employee:
                    qr_ProjTable    = queryRun.get(tableNum(ProjTable));

                    while select projValEmplProjSetup1
                        where (projValEmplProjSetup1.Projid == qr_ProjTable.ProjId) && (projValEmplProjSetup1.Resource || projValEmplProjSetup1.GroupId)
                        join resource group by RecId, Name, ResourceId
                        join Resource, GroupId from projValEmplProjSetup2
                            where (projValEmplProjSetup2.Resource  == resource.RecId) &&
                                (((projValEmplProjSetup2.Resource  == projValEmplProjSetup1.Resource)  && (projValEmplProjSetup1.Resource)) ||
                                ((projValEmplProjSetup2.GroupId == projValEmplProjSetup1.GroupId) && (projValEmplProjSetup2.GroupId)))
                    {
                        if (qr_ProjTable.ProjId != prev_Id)
                        {
                            prev_Id = qr_ProjTable.ProjId;
                        }
                        this.insertProjValProjectTmp(qr_ProjTable, projCategory, resource);
                    }
                    break;

                case ProjValProject::CategoryEmpl:
                    qr_ProjTable = queryRun.get(tableNum(ProjTable));

                    while select projValEmplProjSetup1
                        where (projValEmplProjSetup1.Projid == qr_ProjTable.ProjId)
                            join projValEmplProjSetup2
                                where ((projValEmplProjSetup2.GroupId == projValEmplProjSetup1.GroupId) && projValEmplProjSetup2.Resource || projValEmplProjSetup2.GroupId) ||
                                      ((projValEmplProjSetup2.Projid  == projValEmplProjSetup1.Projid)  && projValEmplProjSetup2.Resource)
                        join projValProjCategorySetUp1
                            where (projValProjCategorySetUp1.ProjId == qr_ProjTable.ProjId)
                            join projValProjCategorySetUp2
                                where ((projValProjCategorySetUp2.GroupId == projValProjCategorySetUp1.GroupId) &&
                                        projValProjCategorySetUp2.CategoryId && projValProjCategorySetUp2.GroupId) ||
                                      ((projValProjCategorySetUp2.ProjId  == projValProjCategorySetUp1.ProjId)  && projValProjCategorySetUp2.CategoryId)
                        join projValEmplCategorySetUp1
                            where (projValEmplCategorySetUp1.Resource == projValEmplProjSetup2.Resource)
                            join projValEmplCategorySetUp2
                                where ((projValEmplCategorySetUp2.GroupId == projValEmplCategorySetUp1.GroupId) && (projValEmplCategorySetUp2.CategoryId == projValProjCategorySetUp2.CategoryId) && projValEmplCategorySetUp2.GroupId) ||
                                      ((projValEmplCategorySetUp2.Resource  == projValEmplCategorySetUp1.Resource)  && (projValEmplCategorySetUp2.CategoryId == projValProjCategorySetUp2.CategoryId))
                        join projCategory
                            group by CategoryId, Name
                            where projCategory.CategoryId == projValEmplCategorySetUp2.CategoryId &&
                                    (!(categoryItem ^
                                       categoryHour ^
                                       categoryCost ^
                                       categoryRevenue) ||
                                      (categoryHour     && projCategory.CategoryType == ProjCategoryType::Hour)      ||
                                      (categoryItem     && projCategory.CategoryType == ProjCategoryType::Item)      ||
                                      (categoryCost     && projCategory.CategoryType == ProjCategoryType::Cost)      ||
                                      (categoryRevenue  && projCategory.CategoryType == ProjCategoryType::Revenue)
                                    )
                        join resource
                            group by RecId, Name, ResourceId
                            where resource.RecId == projValEmplProjSetup2.Resource
                    {
                        if (qr_ProjTable.ProjId != prev_Id)
                        {
                            prev_Id = qr_ProjTable.ProjId;
                        }
                        this.insertProjValProjectTmp(qr_ProjTable, projCategory, resource);
                    }
                    break;

                case ProjValProject::EmplCategory:
                    qr_ProjTable    = queryRun.get(tableNum(ProjTable));

                    while select projValEmplProjSetup1
                        where (projValEmplProjSetup1.Projid == qr_ProjTable.ProjId)
                            join projValEmplProjSetup2
                                where ((projValEmplProjSetup2.GroupId == projValEmplProjSetup1.GroupId) && projValEmplProjSetup2.Resource || projValEmplProjSetup2.GroupId) ||
                                      ((projValEmplProjSetup2.Projid  == projValEmplProjSetup1.Projid)  && projValEmplProjSetup2.Resource)
                        join projValProjCategorySetUp1
                            where (projValProjCategorySetUp1.ProjId == qr_ProjTable.ProjId)
                            join projValProjCategorySetUp2
                                where ((projValProjCategorySetUp2.GroupId == projValProjCategorySetUp1.GroupId) &&
                                        projValProjCategorySetUp2.CategoryId && projValProjCategorySetUp2.GroupId) ||
                                      ((projValProjCategorySetUp2.ProjId  == projValProjCategorySetUp1.ProjId)  && projValProjCategorySetUp2.CategoryId)
                        join projValEmplCategorySetUp1
                            where (projValEmplCategorySetUp1.Resource == projValEmplProjSetup2.Resource)
                            join projValEmplCategorySetUp2
                                where ((projValEmplCategorySetUp2.GroupId == projValEmplCategorySetUp1.GroupId) && (projValEmplCategorySetUp2.CategoryId == projValProjCategorySetUp2.CategoryId) && projValEmplCategorySetUp2.GroupId) ||
                                      ((projValEmplCategorySetUp2.Resource  == projValEmplCategorySetUp1.Resource)  && (projValEmplCategorySetUp2.CategoryId == projValProjCategorySetUp2.CategoryId))
                        join resource
                            group by RecId, Name, ResourceId
                            where resource.RecId == projValEmplProjSetup2.Resource
                        join projCategory
                            group by CategoryId, Name
                            where projCategory.CategoryId == projValEmplCategorySetUp2.CategoryId &&
                                    (!(categoryItem ^
                                       categoryHour ^
                                       categoryCost ^
                                       categoryRevenue) ||
                                      (categoryHour     && projCategory.CategoryType == ProjCategoryType::Hour)      ||
                                      (categoryItem     && projCategory.CategoryType == ProjCategoryType::Item)      ||
                                      (categoryCost     && projCategory.CategoryType == ProjCategoryType::Cost)      ||
                                      (categoryRevenue  && projCategory.CategoryType == ProjCategoryType::Revenue)
                                    )
                    {
                        if (qr_ProjTable.ProjId != prev_Id)
                        {
                            prev_Id = qr_ProjTable.ProjId;
                        }
                        this.insertProjValProjectTmp(qr_ProjTable, projCategory, resource);
                    }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>