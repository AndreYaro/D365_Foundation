<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventConsistencyCheck_Trans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventConsistencyCheck_Trans extends SysConsistencyCheck implements BatchRetryable
{
    DialogField         dialogCheckReferences;
    DialogField         dialogCheckFields;
    DialogField         dialogCheckBasic;
    DialogField         dialogCheckInventBatchId;
    NoYes               checkReferences;
    NoYes               checkFields;
    NoYes               checkBasic;
    NoYes               checkInventBatchId;
    private Map         inventTransRefTypeTableNameMap;

    #define.CurrentVersion(4)
    #localmacro.CurrentList
        CheckFields,
        CheckReferences,
        CheckBasic,
        CheckInventBatchId
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = new DialogRunbase(InventConsistencyCheck_Trans::description(),this);

        dialogCheckBasic = dialog.addField(enumStr(NoYes), "@SYS5921");
        dialogCheckBasic.value(checkBasic);

        dialogCheckReferences = dialog.addField(enumStr(NoYes), "@SYS14018");
        dialogCheckReferences.value(checkReferences);

        dialogCheckFields = dialog.addField(enumStr(NoYes), "@SYS3852");
        dialogCheckFields.value(checkFields);

        dialogCheckInventBatchId = dialog.addField(enumStr(NoYes), "@SYS53635");
        dialogCheckInventBatchId.value(checkInventBatchId);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        checkReferences = dialogCheckReferences.value();
        checkFields = dialogCheckFields.value();
        checkBasic = dialogCheckBasic.value();
        checkInventBatchId = dialogCheckInventBatchId.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDialog</Name>
				<Source><![CDATA[
    boolean hasDialog()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        checkReferences = NoYes::Yes;
        checkFields = NoYes::Yes;
        checkBasic = NoYes::Yes;
        checkInventBatchId = NoYes::Yes;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        #OCCRetryCount
        QueryRun                        queryRun, queryTrans;
        InventTransOrigin               inventTransOrigin;
        InventTrans                     inventTrans;
        InventTable                     inventTable;

        InventConsistencyCheck_Table consistencyCheck_Table = consistencyCheckJob.parentClass(classIdGet(this));
        if (! consistencyCheck_Table)
        {
            return;
        }

        this.checkInventTransWithoutLineReference();

        queryRun = consistencyCheck_Table.queryRun();

        if (checkBasic)
        {
            Query query = new Query();
            QueryBuildRange queryBuildRange = queryRun.query().dataSourceNo(1).range(1);
            query.addDataSource(tableNum(InventTrans)).addRange(fieldNum(InventTrans, ItemId)).value(queryBuildRange.value());
            queryTrans      = new QueryRun(query);
            this.kernelCheckRecords(queryTrans);

            setPrefix("@SYS1286");
            while select inventTrans
                notexists join inventTable where inventTable.ItemId == inventTrans.ItemId
            {
                warning(strFmt("@SYS5307", inventTrans.ItemId), '', SysInfoAction_TableField::newBuffer(inventTrans));
            }
            this.updateNotCorrected();
        }

        if (! (checkFields || checkReferences || checkInventBatchId))
        {
            return;
        }

        while (queryRun.next())
        {
            inventTable = queryRun.get(tableNum(InventTable)) as InventTable;
            setPrefix(strFmt("@SYS14077", inventTable.ItemId));

            try
            {
                ttsbegin;

                while select optimisticlock
                inventTrans
                    where inventTrans.ItemId == inventTable.ItemId
                    join inventTransOrigin
                        where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                {
                    setPrefix(#preFixField(InventTransOrigin,InventTransId));
                    setPrefix(#preFixField(InventTransOrigin,ReferenceId));
                    setPrefix(#preFixField(InventTrans,RecId));

                    inventTrans.checkFixSettlement(this);
                    // <GEERU>
                    inventTrans.checkFixSettlementSecCur_RU(this);
                    // </GEERU>

                    if (checkFields)
                    {
                        inventTrans.checkFixFields(this, inventTransOrigin);
                    }

                    if (checkReferences)
                    {
                        inventTrans.checkFixReference(this, inventTransOrigin);
                    }

                    if (checkInventBatchId)
                    {
                        inventTrans.checkFixBatchNumber(this, inventTransOrigin);
                    }
                }

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventTransWithoutLineReference</Name>
				<Source><![CDATA[
    private void checkInventTransWithoutLineReference()
    {
        this.initInventTransTypeTableNameMap();
        if (!this.inventTransRefTypeTableNameMap || !this.inventTransRefTypeTableNameMap.elements())
        {
            return;
        }
        
        InventTrans inventtrans;
        MapEnumerator me = this.inventTransRefTypeTableNameMap.getEnumerator();
        setPrefix("@SYS1286");

        #OCCRetryCount
        while (me.moveNext())
        {
            InventTransType inventTransType = me.currentKey();
            int tableNumber = me.currentValue();

            Query query = new Query();
            QueryBuildDataSource inventTransDS = query.addDataSource(tableNum(InventTrans));
            inventTransDS.update(true);
            inventTransDS.addRange(fieldNum(InventTrans, StatusIssue)).value(
                strFmt('(((%1 == %3) && (%2 == %4)) || ((%2 == %5) && (%1 == %6)))',
                fieldStr(InventTrans, StatusIssue),
                fieldStr(InventTrans, StatusReceipt),
                enum2int(StatusIssue::OnOrder),
                enum2int(StatusReceipt::None),
                enum2int(StatusReceipt::Ordered),
                enum2int(StatusIssue::None)));

            inventTransDS.addRange(fieldNum(InventTrans, ProjId)).value(SysQuery::valueEmptyString());

            QueryBuildDataSource inventTransOriginDS = inventTransDS.addDataSource(tableNum(InventTransOrigin));
            inventTransOriginDS.addRange(fieldNum(InventTransOrigin, ReferenceCategory)).value(SysQuery::value(inventTransType));
            inventTransOriginDS.relations(true);
            inventTransOriginDS.joinMode(JoinMode::ExistsJoin);

            QueryBuildDataSource inventTransOriginLinesDS = inventTransOriginDS.addDataSource(tableNumber);
            inventTransOriginLinesDS.relations(true);
            inventTransOriginLinesDS.joinMode(JoinMode::NoExistsJoin);

            QueryRun queryRun = new QueryRun(query);

            try
            {
                while (queryRun.next())
                {
                    inventTrans = queryRun.get(tableNum(InventTrans));
                    
                    if (this.checkFix() == CheckFix::Fix)
                    {
                        ttsbegin;
                        inventTrans.delete();
                        ttscommit;
                        this.updateCorrected();
                    }
                    checkFailed(strFmt("@SCM:InventTransNotPhysicallyUpdatedWithoutLineReference", inventtrans.RecId, inventtrans.ItemId, tableId2name(tableNumber)));
                }
                this.updateNotCorrected();
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::Deadlock;
                }
                else
                {
                    queryRun.reset();
                    retry;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        queryRun.reset();
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTransTypeTableNameMap</Name>
				<Source><![CDATA[
    private void initInventTransTypeTableNameMap()
    {
        inventTransRefTypeTableNameMap = new Map(Types::Enum, Types::Int64);
        inventTransRefTypeTableNameMap.insert(InventTransType::Sales, tableNum(InventTransOriginSalesLine));
        inventTransRefTypeTableNameMap.insert(InventTransType::Purch, tableNum(InventTransOriginPurchLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>showInTree</Name>
				<Source><![CDATA[
    boolean showInTree()
    {
        return isTableUserEnabled(tableNum(InventTable), AccessType::View)  &&
               isTableUserEnabled(tableNum(InventTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeParentClassId</Name>
				<Source><![CDATA[
    ClassId treeParentClassId()
    {
        return classNum(InventConsistencyCheck_Table);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version      = RunBase::getVersion(_packedClass);
        NoYes       dummy;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                break;
            case 1:
                [version, dummy, checkFields, checkReferences, checkBasic] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS1286";
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
    static HelpTxt helpText()
    {
        return "@SYS58232";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>