<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalDocumentPresumedTaxCalc_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Calculates the presumed tax information on fiscal document.
/// </summary>
abstract class FiscalDocumentPresumedTaxCalc_BR
{
    protected FiscalDocumentParmData_BR       fiscalDocumentParmData;
    protected FiscalEstablishmentId_BR        fiscalEstablishmentId;
    protected FiscalDocumentLine_BR           fdLine;
    protected FiscalDocumentTaxTrans_BR       fdTaxTransICMSST;
    protected FiscalDocumentTaxTrans_BR       fdTaxTransICMS;
    protected FBBookingPeriod_BR              fbBookingPeriod;
    protected FBBookingPeriod_BR              previousFBBookingPeriod;
    protected FDPresumedSourceDocumentType_BR fdPresumedSourceDocumentType;
    protected TransDate                       fiscalDocumentDate;
    protected Query                           queryTaxLines;
    protected Query                           queryTaxMiscCharges;
    protected Query                           queryPurchComplement;
    protected Query                           querySalesComplement;
    protected Query                           queryReferenceDocument;
    protected Query                           queryOrigFiscalDocument;
    protected Query                           queryOutDocuments;
    protected Query                           queryOutDocumentsWithOrig;
    protected boolean                         canHavePresumedTaxes;
    protected boolean                         isSalesComplement;
    protected RecId                           fbBookingPeriodId;
    protected container                       taxTypes;
    protected Map                             purchForLineMap;
    protected SysOperationProgress            progress;
    protected int                             presumedOutDocuments;
    protected LogisticsAddressStateId         stateId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addRangesToInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds inventory dimension ranges to query.
    /// </summary>
    /// <param name="_query">
    /// The <c>Query</c> object.
    /// </param>
    /// <param name="_inventTransId">
    /// The inventory transaction lot Id.
    /// </param>
    protected void addRangesToInventDim(Query _query, InventTransId _inventTransId)
    {
        InventDim           inventDim;
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;

        QueryBuildDataSource qbds = _query.dataSourceTable(tableNum(InventDim));
        qbds.clearRanges();

        while select inventDim
            group by Configid, InventSizeId, InventColorId, InventStyleId, inventVersionId, inventBatchId, InventSerialId
        exists join inventTrans
            where inventTrans.InventDimId == inventDim.InventDimId
        exists join inventTransOrigin
            where inventTransOrigin.RecId == inventTrans.InventTransOrigin
                && inventTransOrigin.InventTransId == _inventTransId
        {
            qbds.addRange(fieldNum(InventDim, Configid)).value(queryValue(inventDim.Configid));
            qbds.addRange(fieldNum(InventDim, InventSizeId)).value(queryValue(inventDim.InventSizeId));
            qbds.addRange(fieldNum(InventDim, InventColorId)).value(queryValue(inventDim.InventColorId));
            qbds.addRange(fieldNum(InventDim, InventStyleId)).value(queryValue(inventDim.InventStyleId));
            qbds.addRange(fieldNum(InventDim, InventVersionId)).value(queryValue(inventDim.InventVersionId));
            qbds.addRange(fieldNum(InventDim, inventBatchId)).value(strFmt((
                '((%1.%2 == "%4") && (%1.%3 == "%5"))'),
                qbds.name(),
                fieldStr(InventDim, inventBatchId),
                fieldStr(InventDim, inventSerialId),
                inventDim.inventBatchId,
                inventDim.inventSerialId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePresumedTaxForSPED</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates presumed taxes for all documents in current period.
    /// </summary>
    public void calculatePresumedTaxForSPED()
    {
        #AviFiles

        presumedOutDocuments = 0;

        progress = new SysOperationProgress();
        progress.setCaption("@FiscalBooks_SpedFiscal:PresumedTaxCalc");
        progress.setTotal(this.getCountOutDocumements());

        FBBookingPeriodPresumedIncDocuments_BR fbBookingPeriodPresumedIncDocumentsOld;

        delete_from fbBookingPeriodPresumedIncDocumentsOld
            where fbBookingPeriodPresumedIncDocumentsOld.FBBookingPeriod_BR == fbBookingPeriod.RecId;

        Query query = new Query(this.initQueryOutDocuments());
        QueryRun queryRun = new QueryRun(query);
        progress.setText(strfmt("@FiscalBooks_SpedFiscal:OutDocProcessed", presumedOutDocuments, progress.getTotal()));

        this.processOutDocumentsQueryRun(queryRun, progress);

        query = new Query(this.initQueryOutDocumentsWithOrig());
        queryRun = new QueryRun(query);

        this.processOutDocumentsQueryRun(queryRun, progress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a real value measured in one unit of measure to the real value measured in another unit of measure.
    /// </summary>
    /// <param name="_itemId">
    /// A item Id.
    /// </param>
    /// <param name="_unitFrom">
    /// A unit of measure Id to convert from.
    /// </param>
    /// <param name="_unitTo">
    /// A unit of measure Id to convert to.
    /// </param>
    /// <param name="_qty">
    /// A real value measured in the unit of measure to convert from.
    /// </param>
    /// <returns>
    /// A real value measured in the unit of measure to convert to.
    /// </returns>
    protected real convertQty(
        ItemId _itemId,
        UnitOfMeasureSymbol _unitFrom,
        UnitOfMeasureSymbol _unitTo,
        UnitQty _qty)
    {
         return EcoResProductUnitConverter::convertForReleasedProduct(
               _itemId,
               InventTable::getInventDimId(_itemId),
               _qty,
               UnitOfMeasure::unitOfMeasureIdBySymbol(_unitFrom),
               UnitOfMeasure::unitOfMeasureIdBySymbol(_unitTo),
               NoYes::No,
               NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPresumedTaxForLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the presumed tax information on fiscal document line.
    /// </summary>
    /// <param name="_fiscalDocumentLineParmData">
    /// The <c>FiscalDocumentLineParmData_BR</c> object.
    /// </param>
    public abstract void createPresumedTaxForLine(FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPresumedTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the presumed tax information on fiscal document.
    /// </summary>
    public abstract void createPresumedTax()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCountOutDocumements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets number of outgoing documents which whould be processed.
    /// </summary>
    /// <returns>
    /// Number of outgoing fiscal documents.
    /// </returns>
    public int64 getCountOutDocumements()
    {
        int64 ret;

        Query query = new Query(this.initQueryOutDocuments());
        QueryBuildDataSource qbds = query.dataSourceTable(tableNum(FiscalDocumentTaxTrans_BR));
        qbds.addSelectionField(fieldNum(FiscalDocumentTaxTrans_BR, RecId), SelectionField::Count);
        qbds.firstOnly(true);

        QueryRun queryRun = new QueryRun(query);
        FiscalDocumentTaxTrans_BR fiscalDocumentTaxTrans;

        if (queryRun.next())
        {
            fiscalDocumentTaxTrans = queryRun.get(tableNum(FiscalDocumentTaxTrans_BR));
            ret = fiscalDocumentTaxTrans.RecId;
        }

        query = new Query(this.initQueryOutDocumentsWithOrig());
        qbds = query.dataSourceTable(tableNum(FiscalDocumentTaxTrans_BR));
        qbds.addSelectionField(fieldNum(FiscalDocumentTaxTrans_BR, RecId), SelectionField::Count);
        qbds.firstOnly(true);

        queryRun = new QueryRun(query);

        if (queryRun.next())
        {
            fiscalDocumentTaxTrans = queryRun.get(tableNum(FiscalDocumentTaxTrans_BR));
            ret += fiscalDocumentTaxTrans.RecId;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPresumedTaxFromMiscChargesForLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets presumed tax values for line from misc charges.
    /// </summary>
    /// <param name="_fiscalDocumentLineRef">
    /// The fiscal document line reference.
    /// </param>
    /// <param name="_taxType">
    /// A tax type.
    /// </param>
    /// <returns>
    /// <c>container</c> with presumed tax values.
    /// </returns>
    protected abstract container getPresumedTaxFromMiscChargesForLine(RefRecId _fiscalDocumentLineRef, TaxType_BR _taxType)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPresumedTaxFromPurchForLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets presumed tax values for line from purchase order.
    /// </summary>
    /// <param name="_fiscalDocumentLineParmData">
    /// The <c>FiscalDocumentLineParmData_BR</c> object.
    /// </param>
    /// <param name="_taxType">
    /// A tax type.
    /// </param>
    /// <returns>
    /// <c>container</c> with presumed tax values.
    /// </returns>
    protected abstract container getPresumedTaxFromPurchForLine(FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData, TaxType_BR _taxType)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPresumedTaxFromPurchComplementForLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets presumed tax values for line from purchase complement.
    /// </summary>
    /// <param name="_fiscalDocumentLineRef">
    /// The fiscal document line reference.
    /// </param>
    /// <param name="_taxType">
    /// A tax type.
    /// </param>
    /// <returns>
    /// <c>container</c> with presumed tax values.
    /// </returns>
    protected abstract container getPresumedTaxFromPurchComplementForLine(RefRecId _fiscalDocumentLineRef, TaxType_BR _taxType)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPresumedTaxFromSaleForLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets presumed tax values for line from sales order.
    /// </summary>
    /// <param name="_fiscalDocumentLineParmData">
    /// The <c>FiscalDocumentLineParmData_BR</c> object.
    /// </param>
    /// <param name="_taxType">
    /// A tax type.
    /// </param>
    /// <returns>
    /// <c>container</c> with presumed tax values.
    /// </returns>
    protected abstract container getPresumedTaxFromSaleForLine(FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData, TaxType_BR _taxType)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPresumedTaxFromMiscCharges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets presumed tax values from misc charges.
    /// </summary>
    /// <returns>
    /// <c>container</c> with presumed tax values.
    /// </returns>
    protected abstract container getPresumedTaxFromMiscCharges()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPresumedTaxFromPurch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets presumed tax values from purchase order.
    /// </summary>
    /// <returns>
    /// <c>container</c> with presumed tax values.
    /// </returns>
    protected abstract container getPresumedTaxFromPurch()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPresumedTaxFromPurchComplement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets presumed tax values from purchase complement.
    /// </summary>
    /// <returns>
    /// <c>container</c> with presumed tax values.
    /// </returns>
    protected abstract container getPresumedTaxFromPurchComplement()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPresumedTaxFromSale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets presumed tax values from sales order.
    /// </summary>
    /// <returns>
    /// <c>container</c> with presumed tax values.
    /// </returns>
    protected abstract container getPresumedTaxFromSale()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets product name of the item.
    /// </summary>
    /// <param name="_itemId">
    /// Item Id.
    /// </param>
    /// <param name="_inventDim">
    /// Inventory dimension.
    /// </param>
    /// <returns>
    /// Product name.
    /// </returns>
    protected EcoResProductName getProductName(ItemId _itemId, InventDim _inventDim)
    {
        RefRecId productRecId = InventDimCombination::findByInventDim(_itemId, _inventDim).DistinctProductVariant;

        if (!productRecId)
        {
            productRecId = InventTable::find(_itemId).Product;
        }

        return EcoResProduct::find(productRecId).productName(CompanyInfo::languageId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the object.
    /// </summary>
    public void init()
    {
        if (!previousFBBookingPeriod && fbBookingPeriod)
        {
            previousFBBookingPeriod = fbBookingPeriod.getPreviousBookingPeriod();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes query for tax transactions.
    /// </summary>
    /// <returns>
    /// <c>Query</c> object.
    /// </returns>
    protected Query initQueryLines()
    {
        if (!queryTaxLines)
        {
            queryTaxLines = new Query();
            QueryBuildDataSource qbdsFiscalDocumentTaxTransICMS = queryTaxLines.addDataSource(tableNum(FiscalDocumentTaxTrans_BR));
            qbdsFiscalDocumentTaxTransICMS.addSelectionField(fieldNum(FiscalDocumentTaxTrans_BR, TaxBaseAmountOther));
            qbdsFiscalDocumentTaxTransICMS.addSelectionField(fieldNum(FiscalDocumentTaxTrans_BR, TaxAmountOther));
            qbdsFiscalDocumentTaxTransICMS.addSelectionField(fieldNum(FiscalDocumentTaxTrans_BR, TaxValue));
            qbdsFiscalDocumentTaxTransICMS.addSelectionField(fieldNum(FiscalDocumentTaxTrans_BR, RecId));
            findOrCreateRange_W(qbdsFiscalDocumentTaxTransICMS, fieldNum(FiscalDocumentTaxTrans_BR, Type), queryValue(TaxType_BR::ICMS));

            if (stateId != FiscalBooksConstants_BR::StateSP)
            {
                findOrCreateRange_W(qbdsFiscalDocumentTaxTransICMS, fieldNum(FiscalDocumentTaxTrans_BR, TaxationCode), queryValue(FiscalBooksConstants_BR::TaxationCode60));
                findOrCreateRange_W(qbdsFiscalDocumentTaxTransICMS, fieldNum(FiscalDocumentTaxTrans_BR, TaxAmountOther), SysQuery::valueNot(0.00));
            }
            
            QueryBuildDataSource qbdsPresumedICMS = qbdsFiscalDocumentTaxTransICMS.addDataSource(tableNum(FiscalDocumentTaxTransPresumed_BR));
            qbdsPresumedICMS.relations(true);
            qbdsPresumedICMS.joinMode(JoinMode::OuterJoin);
            qbdsPresumedICMS.fetchMode(QueryFetchMode::One2One);
            qbdsPresumedICMS.addSelectionField(fieldNum(FiscalDocumentTaxTransPresumed_BR, RecId));
            qbdsPresumedICMS.addSelectionField(fieldNum(FiscalDocumentTaxTransPresumed_BR, PresumedTaxAmount));
            qbdsPresumedICMS.addSelectionField(fieldNum(FiscalDocumentTaxTransPresumed_BR, PresumedTaxBaseAmount));
            qbdsPresumedICMS.addSelectionField(fieldNum(FiscalDocumentTaxTransPresumed_BR, PresumedTaxPercentage));
            qbdsPresumedICMS.addSelectionField(fieldNum(FiscalDocumentTaxTransPresumed_BR, PresumedFCPTaxAmount));
            qbdsPresumedICMS.addSelectionField(fieldNum(FiscalDocumentTaxTransPresumed_BR, PresumedFCPTaxBaseAmount));
            qbdsPresumedICMS.addSelectionField(fieldNum(FiscalDocumentTaxTransPresumed_BR, PresumedFCPTaxPercentage));
            qbdsPresumedICMS.addSelectionField(fieldNum(FiscalDocumentTaxTransPresumed_BR, PresumedvICMSSubstituto));
            
            QueryBuildDataSource qbdsFCPICMS = qbdsFiscalDocumentTaxTransICMS.addDataSource(tableNum(FiscalDocumentTaxTransPovertyFund_BR));
            qbdsFCPICMS.relations(true);
            qbdsFCPICMS.joinMode(JoinMode::OuterJoin);
            qbdsFCPICMS.fetchMode(QueryFetchMode::One2One);
            qbdsFCPICMS.addSelectionField(fieldNum(FiscalDocumentTaxTransPovertyFund_BR, TaxPovertyFundAmount));
            qbdsFCPICMS.addSelectionField(fieldNum(FiscalDocumentTaxTransPovertyFund_BR, TaxPovertyFundBaseAmount));
            qbdsFCPICMS.addSelectionField(fieldNum(FiscalDocumentTaxTransPovertyFund_BR, TaxPovertyFundPercentage));
            
            QueryBuildDataSource qbdsFiscalDocumentLine = qbdsFiscalDocumentTaxTransICMS.addDataSource(tableNum(FiscalDocumentLine_BR));
            qbdsFiscalDocumentLine.joinMode(JoinMode::InnerJoin);
            qbdsFiscalDocumentLine.fetchMode(QueryFetchMode::One2One);
            qbdsFiscalDocumentLine.relations(true);
            qbdsFiscalDocumentLine.addSelectionField(fieldNum(FiscalDocumentLine_BR, RecId));
            qbdsFiscalDocumentLine.addSelectionField(fieldNum(FiscalDocumentLine_BR, Unit));
            qbdsFiscalDocumentLine.addSelectionField(fieldNum(FiscalDocumentLine_BR, Quantity));
            qbdsFiscalDocumentLine.addSelectionField(fieldNum(FiscalDocumentLine_BR, FiscalDocument));
            qbdsFiscalDocumentLine.addSelectionField(fieldNum(FiscalDocumentLine_BR, InventTransId));

            QueryBuildDataSource qbdsFiscalDocumentTaxTransICMSST = qbdsFiscalDocumentLine.addDataSource(tableNum(FiscalDocumentTaxTrans_BR));
            qbdsFiscalDocumentTaxTransICMSST.relations(false);
            qbdsFiscalDocumentTaxTransICMSST.joinMode(JoinMode::OuterJoin);
            qbdsFiscalDocumentTaxTransICMSST.fetchMode(QueryFetchMode::One2One);
            qbdsFiscalDocumentTaxTransICMSST.addLink(fieldNum(FiscalDocumentLine_BR, RecId), fieldNum(FiscalDocumentTaxTrans_BR, FiscalDocumentLine));
            qbdsFiscalDocumentTaxTransICMSST.addSelectionField(fieldNum(FiscalDocumentTaxTrans_BR, TaxBaseAmountOther));
            qbdsFiscalDocumentTaxTransICMSST.addSelectionField(fieldNum(FiscalDocumentTaxTrans_BR, TaxAmountOther));
            qbdsFiscalDocumentTaxTransICMSST.addSelectionField(fieldNum(FiscalDocumentTaxTrans_BR, TaxValue));
            qbdsFiscalDocumentTaxTransICMSST.addSelectionField(fieldNum(FiscalDocumentTaxTrans_BR, RecId));
            findOrCreateRange_W(qbdsFiscalDocumentTaxTransICMSST, fieldNum(FiscalDocumentTaxTrans_BR, Type), queryValue(TaxType_BR::ICMSST));

            if (stateId != FiscalBooksConstants_BR::StateSP)
            {
                findOrCreateRange_W(qbdsFiscalDocumentTaxTransICMSST, fieldNum(FiscalDocumentTaxTrans_BR, TaxationCode), queryValue(FiscalBooksConstants_BR::TaxationCode60));
                findOrCreateRange_W(qbdsFiscalDocumentTaxTransICMSST, fieldNum(FiscalDocumentTaxTrans_BR, TaxAmountOther), SysQuery::valueNot(0.00));
            }
            
            QueryBuildDataSource qbdsPresumedICMSST = qbdsFiscalDocumentTaxTransICMSST.addDataSource(tableNum(FiscalDocumentTaxTransPresumed_BR));
            qbdsPresumedICMSST.relations(true);
            qbdsPresumedICMSST.joinMode(JoinMode::OuterJoin);
            qbdsPresumedICMSST.fetchMode(QueryFetchMode::One2One);
            qbdsPresumedICMSST.addSelectionField(fieldNum(FiscalDocumentTaxTransPresumed_BR, RecId));
            qbdsPresumedICMSST.addSelectionField(fieldNum(FiscalDocumentTaxTransPresumed_BR, PresumedTaxAmount));
            qbdsPresumedICMSST.addSelectionField(fieldNum(FiscalDocumentTaxTransPresumed_BR, PresumedTaxBaseAmount));
            qbdsPresumedICMSST.addSelectionField(fieldNum(FiscalDocumentTaxTransPresumed_BR, PresumedTaxPercentage));
            qbdsPresumedICMSST.addSelectionField(fieldNum(FiscalDocumentTaxTransPresumed_BR, PresumedFCPTaxAmount));
            qbdsPresumedICMSST.addSelectionField(fieldNum(FiscalDocumentTaxTransPresumed_BR, PresumedFCPTaxBaseAmount));
            qbdsPresumedICMSST.addSelectionField(fieldNum(FiscalDocumentTaxTransPresumed_BR, PresumedFCPTaxPercentage));
            qbdsPresumedICMSST.addSelectionField(fieldNum(FiscalDocumentTaxTransPresumed_BR, PresumedvICMSSubstituto));
            
            QueryBuildDataSource qbdsFCPICMSST = qbdsFiscalDocumentTaxTransICMSST.addDataSource(tableNum(FiscalDocumentTaxTransPovertyFund_BR));
            qbdsFCPICMSST.relations(true);
            qbdsFCPICMSST.joinMode(JoinMode::OuterJoin);
            qbdsFCPICMSST.fetchMode(QueryFetchMode::One2One);
            qbdsFCPICMSST.addSelectionField(fieldNum(FiscalDocumentTaxTransPovertyFund_BR, TaxPovertyFundAmount));
            qbdsFCPICMSST.addSelectionField(fieldNum(FiscalDocumentTaxTransPovertyFund_BR, TaxPovertyFundBaseAmount));
            qbdsFCPICMSST.addSelectionField(fieldNum(FiscalDocumentTaxTransPovertyFund_BR, TaxPovertyFundPercentage));
            
            QueryBuildDataSource qbdsInventTransOrigin = qbdsFiscalDocumentLine.addDataSource(tableNum(InventTransOrigin));
            qbdsInventTransOrigin.joinMode(JoinMode::ExistsJoin);
            qbdsInventTransOrigin.relations(false);
            qbdsInventTransOrigin.addLink(fieldNum(FiscalDocumentLine_BR, InventTransId), fieldNum(InventTransOrigin, InventTransId));

            QueryBuildDataSource qbdsInventTrans = qbdsInventTransOrigin.addDataSource(tableNum(InventTrans));
            qbdsInventTrans.joinMode(JoinMode::ExistsJoin);
            qbdsInventTrans.relations(true);

            QueryBuildDataSource qbdsInventDim = qbdsInventTrans.addDataSource(tableNum(InventDim));
            qbdsInventDim.joinMode(JoinMode::ExistsJoin);
            qbdsInventDim.relations(true);

            QueryBuildDataSource qbdsFiscalDocument = qbdsFiscalDocumentLine.addDataSource(tableNum(FiscalDocument_BR));
            qbdsFiscalDocument.joinMode(JoinMode::InnerJoin);
            qbdsFiscalDocument.relations(true);
            qbdsFiscalDocument.fetchMode(QueryFetchMode::One2One);
            qbdsFiscalDocument.addSelectionField(fieldNum(FiscalDocument_BR, RecId));
            qbdsFiscalDocument.addSelectionField(fieldNum(FiscalDocument_BR, RefTableId));
            qbdsFiscalDocument.addSelectionField(fieldNum(FiscalDocument_BR, FiscalDocumentAccountNum));
            qbdsFiscalDocument.addSelectionField(fieldNum(FiscalDocument_BR, FiscalDocumentDate));
            findOrCreateRange_W(qbdsFiscalDocument, fieldNum(FiscalDocument_BR, Status), queryValue(FiscalDocumentStatus_BR::Approved));
            qbdsFiscalDocument.addRange(fieldNum(FiscalDocument_BR, RefTableId)).value(queryValue(tableNum(VendInvoiceJour)));
            qbdsFiscalDocument.addRange(fieldNum(FiscalDocument_BR, RefTableId)).value(queryValue(tableNum(InventTransferJour)));

            if (stateId == FiscalBooksConstants_BR::StateSP)
            {
                qbdsFiscalDocument.addRange(fieldNum(FiscalDocument_BR, AccessKey)).value(SysQuery::valueNotEmptyString());
            }

            findOrCreateRange_W(qbdsFiscalDocument, fieldNum(FiscalDocument_BR, Direction), queryValue(FiscalDocDirection_BR::Incoming));
            findOrCreateRange_W(qbdsFiscalDocument, fieldNum(FiscalDocument_BR, FiscalEstablishment), queryValue(fiscalEstablishmentId ? fiscalEstablishmentId : fiscalDocumentParmData.parmFiscalEstablishmentID()));
            qbdsFiscalDocument.addOrderByField(fieldNum(FiscalDocument_BR, FiscalDocumentDateTime), SortOrder::Descending);

            if (fbBookingPeriod)
            {
                QueryBuildDataSource qbdsFBBookingPeriodFiscalDocument = qbdsFiscalDocument.addDataSource(tableNum(FBBookingPeriodFiscalDocument_BR));
                qbdsFBBookingPeriodFiscalDocument.relations(true);
                qbdsFBBookingPeriodFiscalDocument.joinMode(JoinMode::ExistsJoin);
            }
        }

        return queryTaxLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryMiscCharges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes query for misc charges.
    /// </summary>
    /// <returns>
    /// <c>Query</c> object.
    /// </returns>
    protected Query initQueryMiscCharges()
    {
        if (!queryTaxMiscCharges)
        {
            queryTaxMiscCharges = new Query();
            QueryBuildDataSource qbdsFiscalDocumentTaxTrans = queryTaxMiscCharges.addDataSource(tableNum(FiscalDocumentTaxTrans_BR));
            qbdsFiscalDocumentTaxTrans.addSelectionField(fieldNum(FiscalDocumentTaxTrans_BR, TaxBaseAmountOther), SelectionField::Sum);
            qbdsFiscalDocumentTaxTrans.addSelectionField(fieldNum(FiscalDocumentTaxTrans_BR, TaxAmountOther), SelectionField::Sum);
            findOrCreateRange_W(qbdsFiscalDocumentTaxTrans, fieldNum(FiscalDocumentTaxTrans_BR, TaxationCode), queryValue(FiscalBooksConstants_BR::taxationCode60));
            findOrCreateRange_W(qbdsFiscalDocumentTaxTrans, fieldNum(FiscalDocumentTaxTrans_BR, TaxAmountOther), SysQuery::valueNot(0.00));

            QueryBuildDataSource qbdsMiscCharge = qbdsFiscalDocumentTaxTrans.addDataSource(tableNum(FiscalDocumentMiscCharge_BR));
            qbdsMiscCharge.joinMode(JoinMode::ExistsJoin);
            qbdsMiscCharge.relations(true);
        }

        return queryTaxMiscCharges;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryOrigFiscalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes query for original fiscal document.
    /// </summary>
    /// <returns>
    /// <c>Query</c> object.
    /// </returns>
    protected Query initQueryOrigFiscalDocument()
    {
        if (!queryOrigFiscalDocument)
        {
            queryOrigFiscalDocument = new Query();
            QueryBuildDataSource qbdsFiscalDocument = queryOrigFiscalDocument.addDataSource(tableNum(FiscalDocument_BR));
            qbdsFiscalDocument.addSelectionField(fieldNum(FiscalDocument_BR, RecId));
            
            QueryBuildDataSource qbdsfiscalReferenceParm = qbdsFiscalDocument.addDataSource(tableNum(FiscalReferenceParm_BR));
            qbdsfiscalReferenceParm.relations(false);
            qbdsfiscalReferenceParm.joinMode(JoinMode::ExistsJoin);
            qbdsfiscalReferenceParm.addLink(fieldNum(FiscalDocument_BR, RecId), fieldNum(FiscalReferenceParm_BR, RefRecId));
            qbdsfiscalReferenceParm.addLink(fieldNum(FiscalDocument_BR, TableId), fieldNum(FiscalReferenceParm_BR, RefTableId));
            
            QueryBuildDataSource qbdsVendInvoiceInfoTable = qbdsfiscalReferenceParm.addDataSource(tableNum(VendInvoiceInfoTable));
            qbdsVendInvoiceInfoTable.relations(false);
            qbdsVendInvoiceInfoTable.joinMode(JoinMode::ExistsJoin);
            qbdsVendInvoiceInfoTable.addLink(fieldNum(FiscalReferenceParm_BR, SourceRecId), fieldNum(VendInvoiceInfoTable, RecId));
            qbdsVendInvoiceInfoTable.addLink(fieldNum(FiscalReferenceParm_BR, SourceTableId), fieldNum(VendInvoiceInfoTable, TableId));
            
            QueryBuildDataSource qbdsVendInvoiceTrans = qbdsVendInvoiceInfoTable.addDataSource(tableNum(VendInvoiceTrans));
            qbdsVendInvoiceTrans.relations(false);
            qbdsVendInvoiceTrans.joinMode(JoinMode::ExistsJoin);
            qbdsVendInvoiceTrans.addLink(fieldNum(VendInvoiceInfoTable, PurchId), fieldNum(VendInvoiceTrans, PurchId));
        }

        return queryOrigFiscalDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryOutDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes query for outgoing fiscal documents.
    /// </summary>
    /// <returns>
    /// <c>Query</c> object.
    /// </returns>
    public Query initQueryOutDocuments()
    {
        if (!queryOutDocuments)
        {
            queryOutDocuments = new Query();
            QueryBuildDataSource qbdsFiscalDocumentTaxTransICMSST = queryOutDocuments.addDataSource(tableNum(FiscalDocumentTaxTrans_BR));
            qbdsFiscalDocumentTaxTransICMSST.addSelectionField(fieldNum(FiscalDocumentTaxTrans_BR, RecId));
            findOrCreateRange_W(qbdsFiscalDocumentTaxTransICMSST, fieldNum(FiscalDocumentTaxTrans_BR, Type), queryValue(TaxType_BR::ICMSST));

            if (stateId != FiscalBooksConstants_BR::StateSP)
            {
                findOrCreateRange_W(qbdsFiscalDocumentTaxTransICMSST, fieldNum(FiscalDocumentTaxTrans_BR, TaxationCode), queryValue(FiscalBooksConstants_BR::TaxationCode60));
            }

            QueryBuildDataSource qbdsFiscalDocumentLine = qbdsFiscalDocumentTaxTransICMSST.addDataSource(tableNum(FiscalDocumentLine_BR));
            qbdsFiscalDocumentLine.relations(false);
            qbdsFiscalDocumentLine.joinMode(JoinMode::InnerJoin);
            qbdsFiscalDocumentLine.fetchMode(QueryFetchMode::One2One);
            qbdsFiscalDocumentLine.addSelectionField(fieldNum(FiscalDocumentLine_BR, RecId));
            qbdsFiscalDocumentLine.addSelectionField(fieldNum(FiscalDocumentLine_BR, ItemId));
            qbdsFiscalDocumentLine.addSelectionField(fieldNum(FiscalDocumentLine_BR, Unit));
            qbdsFiscalDocumentLine.addSelectionField(fieldNum(FiscalDocumentLine_BR, Quantity));
            qbdsFiscalDocumentLine.addSelectionField(fieldNum(FiscalDocumentLine_BR, InventTransId));

            if (stateId == FiscalBooksConstants_BR::StateSC)
            {
                qbdsFiscalDocumentLine.addSelectionField(fieldNum(FiscalDocumentLine_BR, FiscalDocument));
            }

            qbdsFiscalDocumentLine.addLink(fieldNum(FiscalDocumentTaxTrans_BR, FiscalDocumentLine), fieldNum(FiscalDocumentLine_BR, RecId));
            findOrCreateRange_W(qbdsFiscalDocumentLine, fieldNum(FiscalDocumentLine_BR, InventTransId), SysQuery::valueNot(''));
            
            QueryBuildDataSource qbdsFiscalDocumentTaxTransICMS = qbdsFiscalDocumentLine.addDataSource(tableNum(FiscalDocumentTaxTrans_BR));
            qbdsFiscalDocumentTaxTransICMS.relations(false);
            qbdsFiscalDocumentTaxTransICMS.joinMode(JoinMode::InnerJoin);
            qbdsFiscalDocumentTaxTransICMS.fetchMode(QueryFetchMode::One2One);
            qbdsFiscalDocumentTaxTransICMS.addSelectionField(fieldNum(FiscalDocumentTaxTrans_BR, RecId));
            qbdsFiscalDocumentTaxTransICMS.addLink(fieldNum(FiscalDocumentLine_BR, RecId), fieldNum(FiscalDocumentTaxTrans_BR, FiscalDocumentLine));
            findOrCreateRange_W(qbdsFiscalDocumentTaxTransICMS, fieldNum(FiscalDocumentTaxTrans_BR, Type), queryValue(TaxType_BR::ICMS));

            if (stateId != FiscalBooksConstants_BR::StateSP)
            {
                findOrCreateRange_W(qbdsFiscalDocumentTaxTransICMS, fieldNum(FiscalDocumentTaxTrans_BR, TaxationCode), queryValue(FiscalBooksConstants_BR::TaxationCode60));
            }

            QueryBuildDataSource qbdsFiscalDocument = qbdsFiscalDocumentLine.addDataSource(tableNum(FiscalDocument_BR));
            qbdsFiscalDocument.relations(true);
            qbdsFiscalDocument.joinMode(JoinMode::InnerJoin);
            qbdsFiscalDocument.fetchMode(QueryFetchMode::One2One);
            qbdsFiscalDocument.addRange(fieldNum(FiscalDocument_BR, RefTableId)).value(queryValue(tableNum(SalesComplementaryInvoiceHeader)));
            qbdsFiscalDocument.addRange(fieldNum(FiscalDocument_BR, RefTableId)).value(queryValue(tableNum(CustInvoiceJour)));
            qbdsFiscalDocument.addRange(fieldNum(FiscalDocument_BR, RefTableId)).value(queryValue(tableNum(VendInvoiceJour)));
            qbdsFiscalDocument.addRange(fieldNum(FiscalDocument_BR, RefTableId)).value(queryValue(tableNum(CustPackingSlipJour)));
            qbdsFiscalDocument.addRange(fieldNum(FiscalDocument_BR, RefTableId)).value(queryValue(tableNum(ProjInvoiceJour)));
            qbdsFiscalDocument.addRange(fieldNum(FiscalDocument_BR, RefTableId)).value(queryValue(tableNum(InventTransferJour)));
            qbdsFiscalDocument.addSelectionField(fieldNum(FiscalDocument_BR, RecId));
            qbdsFiscalDocument.addSelectionField(fieldNum(FiscalDocument_BR, RefTableId));
            qbdsFiscalDocument.addSelectionField(fieldNum(FiscalDocument_BR, Direction));

            if (stateId == FiscalBooksConstants_BR::StateSP)
            {
                qbdsFiscalDocument.addRange(fieldNum(FiscalDocument_BR, AccessKey)).value(SysQuery::valueNotEmptyString());
            }

            findOrCreateRange_W(qbdsFiscalDocument, fieldNum(FiscalDocument_BR, Direction), queryValue(FiscalDocDirection_BR::Outgoing));
            
            QueryBuildDataSource qbdsFBBookingPeriodFiscalDocument = qbdsFiscalDocument.addDataSource(tableNum(FBBookingPeriodFiscalDocument_BR));
            qbdsFBBookingPeriodFiscalDocument.relations(true);
            qbdsFBBookingPeriodFiscalDocument.joinMode(JoinMode::ExistsJoin);
            qbdsFBBookingPeriodFiscalDocument.addSelectionField(fieldNum(FBBookingPeriodFiscalDocument_BR, RecId));
            findOrCreateRange_W(qbdsFBBookingPeriodFiscalDocument, fieldNum(FBBookingPeriodFiscalDocument_BR, FBBookingPeriod_BR), queryValue(fbBookingPeriod.RecId));
        }
        
        return queryOutDocuments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryOutDocumentsWithOrig</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes query for outgoing fiscal documents which have original documents.
    /// </summary>
    /// <returns>
    /// <c>Query</c> object.
    /// </returns>
    public Query initQueryOutDocumentsWithOrig()
    {
        if (!queryOutDocumentsWithOrig)
        {
            queryOutDocumentsWithOrig = new Query(this.initQueryOutDocuments());
            QueryBuildDataSource qbdsFiscalDocument = queryOutDocumentsWithOrig.dataSourceTable(tableNum(FiscalDocument_BR));
            qbdsFiscalDocument.clearRange(fieldNum(FiscalDocument_BR, RefTableId));
            qbdsFiscalDocument.clearRange(fieldNum(FiscalDocument_BR, RefTableId));
            qbdsFiscalDocument.addRange(fieldNum(FiscalDocument_BR, RefTableId)).value(queryValue(tableNum(VendInvoiceJour)));
            qbdsFiscalDocument.addRange(fieldNum(FiscalDocument_BR, RefTableId)).value(queryValue(tableNum(SalesComplementaryInvoiceHeader)));
            
            QueryBuildDataSource qbdsFiscalDocumentLine = queryOutDocumentsWithOrig.dataSourceTable(tableNum(FiscalDocumentLine_BR));
            qbdsFiscalDocumentLine.addSelectionField(fieldNum(FiscalDocumentLine_BR, RefRecId));
        }
        
        return queryOutDocumentsWithOrig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryPurchComplement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes query for purchase complement lines.
    /// </summary>
    /// <returns>
    /// <c>Query</c> object.
    /// </returns>
    protected Query initQueryPurchComplement()
    {
        if (!queryPurchComplement)
        {
            queryPurchComplement = new Query();
            QueryBuildDataSource qbdsPurchComplementaryInvoiceLine = queryPurchComplement.addDataSource(tableNum(PurchComplementaryInvoiceLine));

            QueryBuildDataSource qbdsFiscalDocumentLine = qbdsPurchComplementaryInvoiceLine.addDataSource(tableNum(FiscalDocumentLine_BR));
            qbdsFiscalDocumentLine.joinMode(JoinMode::InnerJoin);
            qbdsFiscalDocumentLine.fetchMode(QueryFetchMode::One2One);
            qbdsFiscalDocumentLine.relations(false);
            qbdsFiscalDocumentLine.addLink(fieldNum(PurchComplementaryInvoiceLine, RecId), fieldNum(FiscalDocumentLine_BR, RefRecId));
            findOrCreateRange_W(qbdsFiscalDocumentLine, fieldNum(FiscalDocumentLine_BR, RefTableId), queryValue(tableNum(PurchComplementaryInvoiceLine)));
            qbdsFiscalDocumentLine.addSelectionField(fieldNum(FiscalDocumentLine_BR, RecId));
            qbdsFiscalDocumentLine.addSelectionField(fieldNum(FiscalDocumentLine_BR, Unit));
            qbdsFiscalDocumentLine.addSelectionField(fieldNum(FiscalDocumentLine_BR, Quantity));

            QueryBuildDataSource qbdsFiscalDocumentTaxTrans = qbdsFiscalDocumentLine.addDataSource(tableNum(FiscalDocumentTaxTrans_BR));
            qbdsFiscalDocumentTaxTrans.relations(true);
            qbdsFiscalDocumentTaxTrans.joinMode(JoinMode::InnerJoin);
            qbdsFiscalDocumentTaxTrans.fetchMode(QueryFetchMode::One2One);
            qbdsFiscalDocumentTaxTrans.addSelectionField(fieldNum(FiscalDocumentTaxTrans_BR, TaxBaseAmountOther), SelectionField::Sum);
            qbdsFiscalDocumentTaxTrans.addSelectionField(fieldNum(FiscalDocumentTaxTrans_BR, TaxAmountOther),  SelectionField::Sum);
            findOrCreateRange_W(qbdsFiscalDocumentTaxTrans, fieldNum(FiscalDocumentTaxTrans_BR, TaxationCode), queryValue(FiscalBooksConstants_BR::taxationCode60));
            findOrCreateRange_W(qbdsFiscalDocumentTaxTrans, fieldNum(FiscalDocumentTaxTrans_BR, TaxAmountOther), SysQuery::valueNot(0.00));

            QueryBuildDataSource qbdsFCP = qbdsFiscalDocumentTaxTrans.addDataSource(tableNum(FiscalDocumentTaxTransPovertyFund_BR));
            qbdsFCP.relations(true);
            qbdsFCP.joinMode(JoinMode::OuterJoin);
            qbdsFCP.fetchMode(QueryFetchMode::One2One);
            qbdsFCP.addSelectionField(fieldNum(FiscalDocumentTaxTransPovertyFund_BR, TaxPovertyFundAmount), SelectionField::Sum);
            qbdsFCP.addSelectionField(fieldNum(FiscalDocumentTaxTransPovertyFund_BR, TaxPovertyFundBaseAmount), SelectionField::Sum);
        }

        return queryPurchComplement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryReferenceDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes query for referenced document.
    /// </summary>
    /// <returns>
    /// <c>Query</c> object.
    /// </returns>
    protected Query initQueryReferenceDocument()
    {
        if (!queryReferenceDocument)
        {
            queryReferenceDocument = new Query();
            
            QueryBuildDataSource qbdsPresumedRef = queryReferenceDocument.addDataSource(tableNum(FiscalDocumentTaxTransPresumed_BR));
            qbdsPresumedRef.firstOnly(true);
            
            QueryBuildDataSource qbdsFiscalDocumentTaxTransRef = qbdsPresumedRef.addDataSource(tableNum(FiscalDocumentTaxTrans_BR));
            qbdsFiscalDocumentTaxTransRef.relations(true);
            qbdsFiscalDocumentTaxTransRef.joinMode(JoinMode::InnerJoin);
            qbdsFiscalDocumentTaxTransRef.fetchMode(QueryFetchMode::One2One);
            qbdsFiscalDocumentTaxTransRef.addSelectionField(fieldNum(FiscalDocumentTaxTrans_BR, RecId));
            
            QueryBuildDataSource qbdsFiscalDocumentLineRef = qbdsFiscalDocumentTaxTransRef.addDataSource(tableNum(FiscalDocumentLine_BR));
            qbdsFiscalDocumentLineRef.joinMode(JoinMode::InnerJoin);
            qbdsFiscalDocumentLineRef.fetchMode(QueryFetchMode::One2One);
            qbdsFiscalDocumentLineRef.relations(true);
            
            QueryBuildDataSource qbdsCustInvoiceTransRef = qbdsFiscalDocumentLineRef.addDataSource(tableNum(CustInvoiceTrans));
            qbdsCustInvoiceTransRef.joinMode(JoinMode::ExistsJoin);
            qbdsCustInvoiceTransRef.relations(false);
            qbdsCustInvoiceTransRef.addLink(fieldNum(FiscalDocumentLine_BR, RefRecId), fieldNum(CustInvoiceTrans, RecId));
            qbdsCustInvoiceTransRef.addLink(fieldNum(FiscalDocumentLine_BR, RefTableID), fieldNum(CustInvoiceTrans, TableId));
            qbdsCustInvoiceTransRef.enabled(false);
            
            QueryBuildDataSource qbdsSalesLine = qbdsCustInvoiceTransRef.addDataSource(tableNum(SalesLine));
            qbdsSalesLine.joinMode(JoinMode::ExistsJoin);
            qbdsSalesLine.relations(false);
            qbdsSalesLine.addLink(fieldNum(CustInvoiceTrans, InventTransId), fieldNum(SalesLine, InventTransIdReturn));
            qbdsSalesLine.enabled(false);
            
            QueryBuildDataSource qbdsCustInvoiceTrans = qbdsSalesLine.addDataSource(tableNum(CustInvoiceTrans));
            qbdsCustInvoiceTrans.joinMode(JoinMode::ExistsJoin);
            qbdsCustInvoiceTrans.relations(false);
            qbdsCustInvoiceTrans.addLink(fieldNum(SalesLine, SalesId), fieldNum(CustInvoiceTrans, SalesId));
            qbdsCustInvoiceTrans.enabled(false);
            
            QueryBuildDataSource qbdsInventTransferJourLineRef = qbdsFiscalDocumentLineRef.addDataSource(tableNum(InventTransferJourLine));
            qbdsInventTransferJourLineRef.joinMode(JoinMode::ExistsJoin);
            qbdsInventTransferJourLineRef.relations(false);
            qbdsInventTransferJourLineRef.addLink(fieldNum(FiscalDocumentLine_BR, RefRecId), fieldNum(InventTransferJourLine, RecId));
            qbdsInventTransferJourLineRef.addLink(fieldNum(FiscalDocumentLine_BR, RefTableID), fieldNum(InventTransferJourLine, TableId));
            qbdsInventTransferJourLineRef.enabled(false);
            
            QueryBuildDataSource qbdsInventTransferJourRef = qbdsInventTransferJourLineRef.addDataSource(tableNum(InventTransferJour));
            qbdsInventTransferJourRef.joinMode(JoinMode::ExistsJoin);
            qbdsInventTransferJourRef.relations(true);
            qbdsInventTransferJourRef.enabled(false);
            findOrCreateRange_W(qbdsInventTransferJourRef, fieldNum(InventTransferJour, UpdateType), queryValue(InventTransferUpdateType::Shipment));
            
            QueryBuildDataSource qbdsInventTransferJour = qbdsInventTransferJourRef.addDataSource(tableNum(InventTransferJour));
            qbdsInventTransferJour.joinMode(JoinMode::ExistsJoin);
            qbdsInventTransferJour.relations(false);
            qbdsInventTransferJour.addLink(fieldNum(InventTransferJour, TransferId), fieldNum(InventTransferJour, TransferId));
            findOrCreateRange_W(qbdsInventTransferJour, fieldNum(InventTransferJour, UpdateType), queryValue(InventTransferUpdateType::Receive));
            qbdsInventTransferJour.enabled(false);
            
            QueryBuildDataSource qbdsInventTransferJourLine = qbdsInventTransferJour.addDataSource(tableNum(InventTransferJourLine));
            qbdsInventTransferJourLine.joinMode(JoinMode::ExistsJoin);
            qbdsInventTransferJourLine.relations(true);
            qbdsInventTransferJourLine.enabled(false);
            qbdsInventTransferJourLine.addRange(fieldNum(InventTransferJourLine, LineNum)).value(strFmt((
                '(%1.%2 == %3.%4)'),
                qbdsInventTransferJourLine.name(),
                fieldStr(InventTransferJourLine, LineNum),
                qbdsInventTransferJourLineRef.name(),
                fieldStr(InventTransferJourLine, LineNum)));
        }

        return queryReferenceDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuerySalesComplement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes query for sale complement lines.
    /// </summary>
    /// <returns>
    /// <c>Query</c> object.
    /// </returns>
    protected Query initQuerySalesComplement()
    {
        if (!querySalesComplement)
        {
            querySalesComplement = new Query();
            QueryBuildDataSource qbdsSalesComplementaryInvoiceLine = querySalesComplement.addDataSource(tableNum(SalesComplementaryInvoiceLine));
            qbdsSalesComplementaryInvoiceLine.addSelectionField(fieldNum(SalesComplementaryInvoiceLine, RecId));

            QueryBuildDataSource qbdsFiscalDocumentLine = qbdsSalesComplementaryInvoiceLine.addDataSource(tableNum(FiscalDocumentLine_BR));
            qbdsFiscalDocumentLine.joinMode(JoinMode::InnerJoin);
            qbdsFiscalDocumentLine.fetchMode(QueryFetchMode::One2One);
            qbdsFiscalDocumentLine.relations(true);
            qbdsFiscalDocumentLine.addSelectionField(fieldNum(FiscalDocumentLine_BR, RecId));

            if (stateId == FiscalBooksConstants_BR::StateSC)
            {
                QueryBuildDataSource qbdsFiscalDocument = qbdsFiscalDocumentLine.addDataSource(tableNum(FiscalDocument_BR));
                qbdsFiscalDocument.relations(true);
                qbdsFiscalDocument.joinMode(JoinMode::InnerJoin);
                qbdsFiscalDocument.fetchMode(QueryFetchMode::One2One);
            }

            QueryBuildDataSource qbdsFiscalDocumentTaxTrans = qbdsFiscalDocumentLine.addDataSource(tableNum(FiscalDocumentTaxTrans_BR));
            qbdsFiscalDocumentTaxTrans.relations(true);
            qbdsFiscalDocumentTaxTrans.joinMode(JoinMode::InnerJoin);
            qbdsFiscalDocumentTaxTrans.fetchMode(QueryFetchMode::One2One);
            findOrCreateRange_W(qbdsFiscalDocumentTaxTrans, fieldNum(FiscalDocumentTaxTrans_BR, TaxationCode), queryValue(FiscalBooksConstants_BR::taxationCode60));
            findOrCreateRange_W(qbdsFiscalDocumentTaxTrans, fieldNum(FiscalDocumentTaxTrans_BR, TaxAmountOther), SysQuery::valueNot(0.00));

            QueryBuildDataSource qbdsPresumed = qbdsFiscalDocumentTaxTrans.addDataSource(tableNum(FiscalDocumentTaxTransPresumed_BR));
            qbdsPresumed.relations(true);
            qbdsPresumed.joinMode(JoinMode::InnerJoin);
            qbdsPresumed.fetchMode(QueryFetchMode::One2One);
        }

        return querySalesComplement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        purchForLineMap = new Map(Types::Container, Types::Container);
        taxTypes = [TaxType_BR::ICMS, TaxType_BR::ICMSST];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCanHavePresumedTaxes</Name>
				<Source><![CDATA[
    public boolean parmCanHavePresumedTaxes(boolean _canHavePresumedTaxes = canHavePresumedTaxes)
    {
        canHavePresumedTaxes = _canHavePresumedTaxes;

        return canHavePresumedTaxes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFBBookingPeriod</Name>
				<Source><![CDATA[
    public FBBookingPeriod_BR parmFBBookingPeriod(FBBookingPeriod_BR _fbBookingPeriod = fbBookingPeriod)
    {
        fbBookingPeriod = _fbBookingPeriod;

        return fbBookingPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFDPresumedSourceDocumentType</Name>
				<Source><![CDATA[
    public FDPresumedSourceDocumentType_BR parmFDPresumedSourceDocumentType(FDPresumedSourceDocumentType_BR _fdPresumedSourceDocumentType = fdPresumedSourceDocumentType)
    {
        fdPresumedSourceDocumentType = _fdPresumedSourceDocumentType;

        return fdPresumedSourceDocumentType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalDocumentDate</Name>
				<Source><![CDATA[
    public TransDate parmFiscalDocumentDate(TransDate _fiscalDocumentDate = fiscalDocumentDate)
    {
        fiscalDocumentDate = _fiscalDocumentDate;

        return fiscalDocumentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalDocumentLine</Name>
				<Source><![CDATA[
    public FiscalDocumentLine_BR parmFiscalDocumentLine(FiscalDocumentLine_BR _fdLine = fdLine)
    {
        fdLine = _fdLine;

        return fdLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalDocumentParmData</Name>
				<Source><![CDATA[
    public FiscalDocumentParmData_BR parmFiscalDocumentParmData(FiscalDocumentParmData_BR _fiscalDocumentParmData = fiscalDocumentParmData)
    {
        fiscalDocumentParmData = _fiscalDocumentParmData;

        return fiscalDocumentParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalDocumentTaxTransICMS</Name>
				<Source><![CDATA[
    public FiscalDocumentTaxTrans_BR parmFiscalDocumentTaxTransICMS(FiscalDocumentTaxTrans_BR _fdTaxTransICMS = fdTaxTransICMS)
    {
        fdTaxTransICMS = _fdTaxTransICMS;

        return fdTaxTransICMS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalDocumentTaxTransICMSST</Name>
				<Source><![CDATA[
    public FiscalDocumentTaxTrans_BR parmFiscalDocumentTaxTransICMSST(FiscalDocumentTaxTrans_BR _fdTaxTransICMSST = fdTaxTransICMSST)
    {
        fdTaxTransICMSST = _fdTaxTransICMSST;

        return fdTaxTransICMSST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalEstablishmentId</Name>
				<Source><![CDATA[
    public FiscalEstablishmentId_BR parmFiscalEstablishmentId(FiscalEstablishmentId_BR _fiscalEstablishmentId = fiscalEstablishmentId)
    {
        fiscalEstablishmentId = _fiscalEstablishmentId;

        return fiscalEstablishmentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsSalesComplement</Name>
				<Source><![CDATA[
    public boolean parmIsSalesComplement(boolean _isSalesComplement = isSalesComplement)
    {
        isSalesComplement = _isSalesComplement;

        return isSalesComplement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPreviousFBBookingPeriod</Name>
				<Source><![CDATA[
    public FBBookingPeriod_BR parmPreviousFBBookingPeriod(FBBookingPeriod_BR _previousFBBookingPeriod = previousFBBookingPeriod)
    {
        previousFBBookingPeriod = _previousFBBookingPeriod;
        
        return previousFBBookingPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProgress</Name>
				<Source><![CDATA[
    public SysOperationProgress parmProgress(SysOperationProgress _progress = progress)
    {
        progress = _progress;
        
        return progress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmState</Name>
				<Source><![CDATA[
    public LogisticsAddressStateId parmState(LogisticsAddressStateId _stateId = stateId)
    {
        stateId = _stateId;

        return stateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processOutDocumentsQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processing <c>QueryRun</c> object result and run presumed tax calculation.
    /// </summary>
    /// <param name = "_queryRun">
    /// <c>QueryRun</c> object.
    /// </param>
    /// <param name = "_progress">
    /// <c>SysOperationProgress</c> object.
    /// </param>
    public void processOutDocumentsQueryRun(
        QueryRun _queryRun,
        SysOperationProgress _progress)
    {
        while (_queryRun.next())
        {
            FiscalDocument_BR fiscalDocument = _queryRun.get(tableNum(FiscalDocument_BR));
            fdLine = _queryRun.get(tableNum(FiscalDocumentLine_BR));
            fdTaxTransICMSST = _queryRun.get(tableNum(FiscalDocumentTaxTrans_BR));
            fdTaxTransICMS = _queryRun.get(tableNum(FiscalDocumentTaxTrans_BR), 2);
            this.parmFiscalDocumentLine(fdLine);
            this.setPresumedSDTypeByRefTableAndDirection(fiscalDocument.RefTableId, fiscalDocument.Direction);
            
            ttsBegin;
            
            this.createPresumedTax();
            
            ttsCommit;
            
            presumedOutDocuments++;
            progress.setText(strfmt("@FiscalBooks_SpedFiscal:OutDocProcessed", presumedOutDocuments, _progress.getTotal()));
            progress.setCount(presumedOutDocuments);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPresumedSDTypeByRefTableAndDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets fiscal document's source document type.
    /// </summary>
    /// <param name="_tableId">
    /// Table Id.
    /// </param>
    /// <param name="_direction">
    /// Fiscal document direction.
    /// </param>
    public void setPresumedSDTypeByRefTableAndDirection(int _tableId, FiscalDocDirection_BR _direction)
    {
        switch (_tableId)
        {
            case tableNum(SalesComplementaryInvoiceHeader):
                fdPresumedSourceDocumentType = FDPresumedSourceDocumentType_BR::SalesComplement;
                break;
            
            case tableNum(VendInvoiceJour):
                if (_direction == FiscalDocDirection_BR::Outgoing)
                {
                    fdPresumedSourceDocumentType = FDPresumedSourceDocumentType_BR::PurchOrderReturn;
                }
                else
                {
                    fdPresumedSourceDocumentType = FDPresumedSourceDocumentType_BR::VendInvoice;
                }
                break;
            
            default:
                fdPresumedSourceDocumentType = FDPresumedSourceDocumentType_BR::Default;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventoryBalanceCalc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes new object for calculation inventory balance.
    /// </summary>
    /// <returns>
    /// <c>FiscalDocumentPresumedTaxCalc_BR</c> object
    /// </returns>
    public static FBPeriodInventoryBalanceCalculator_BR initInventoryBalanceCalc()
    {
        FBPeriodInventoryBalanceCalculator_BR ret = new FBPeriodInventoryBalanceCalculator_BR();
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPresumedTaxCalc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an instance of <c>FiscalDocumentPresumedTaxCalc_BR</c>.
    /// </summary>
    /// <param name = "_presumedTaxAlgorithm">A <c>PresumedTaxAlgorithm_BR</c> value.</param>
    /// <returns>An instance of <c>FiscalDocumentPresumedTaxCalc_BR</c></returns>
    public static FiscalDocumentPresumedTaxCalc_BR initPresumedTaxCalc(PresumedTaxAlgorithm_BR _presumedTaxAlgorithm)
    {
        PresumedTaxAlgorithmCalcFactoryAttribute_BR attr = new PresumedTaxAlgorithmCalcFactoryAttribute_BR(_presumedTaxAlgorithm);
        FiscalDocumentPresumedTaxCalc_BR fiscalDocumentPresumedTaxCalc = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(FiscalDocumentPresumedTaxCalc_BR), attr) as FiscalDocumentPresumedTaxCalc_BR;
        
        if (!fiscalDocumentPresumedTaxCalc)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return fiscalDocumentPresumedTaxCalc;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
