<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalEngine_ProjectCost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerJournalEngine_ProjectCost</c> class supports project expense journals.
/// </summary>
/// <remarks>
/// This class extends the <c>LedgerJournalEngine</c> class.
/// </remarks>
public class LedgerJournalEngine_ProjectCost extends LedgerJournalEngine
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountModified</Name>
				<Source><![CDATA[
    public DebCredProposal accountModified(LedgerJournalTrans           _ledgerJournalTrans,
                                           LedgerJournalTrans_Project   _ledgerJournalTrans_Project = null,
                                           LedgerJournalTrans_Asset     _ledgerJournalTrans_Asset = null
                                           , Tax1099BoxDetail                _tax1099Detail = null
                                           , LedgerJournalTrans_RAsset     _ledgerJournalTrans_RAsset     = null
                                           , LedgerJournalTrans_RDeferrals _ledgerJournalTrans_RDeferrals = null
                                           )

    {
        super(_ledgerJournalTrans, _ledgerJournalTrans_Project, _ledgerJournalTrans_Asset
        , _tax1099Detail
        //<GEERU>
        , _ledgerJournalTrans_RAsset, _ledgerJournalTrans_RDeferrals
        //</GEERU>
        );
        return DebCredProposal::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscCodeModified</Name>
				<Source><![CDATA[
    void cashDiscCodeModified(LedgerJournalTrans       _ledgerJournalTrans,
                              LedgerJournalTrans_Asset _ledgerJournalTrans_Asset = null,
                              boolean                  _updateCashDisc = false)
    {
        LedgerJournalTrans ledgerJournalTransSwapped;

        if (!ledgerJournalCashDiscService)
        {
            ledgerJournalCashDiscService = new LedgerJournalCashDiscService(_ledgerJournalTrans.JournalNum,
                                                                            _ledgerJournalTrans.Voucher);
            activeVoucher = _ledgerJournalTrans.Voucher;
        }

        ledgerJournalTransSwapped.data(_ledgerJournalTrans);
        ledgerJournalTransSwapped.swapAccountOffsetAccount();
        ledgerJournalTransSwapped.AmountCurDebit  = _ledgerJournalTrans.AmountCurDebit;
        ledgerJournalTransSwapped.AmountCurCredit = _ledgerJournalTrans.AmountCurCredit;
        ledgerJournalTransSwapped.CashDiscAmount  = _ledgerJournalTrans.CashDiscAmount;

        ledgerJournalCashDiscService.setCashDiscParameters(ledgerJournalTransSwapped.Company,
                                                           ledgerJournalTransSwapped.CashDiscCode,
                                                           ledgerJournalTransSwapped.Invoice,
                                                           ledgerJournalTransSwapped.AccountType);

        if (ledgerJournalCashDiscService.invoiceId() && ledgerJournalCashDiscService.cashDiscCode())
        {
            this.findCashDisc(ledgerJournalCashDiscService.getCompany(), ledgerJournalCashDiscService.cashDiscCode());
            this.calcCashDisc(ledgerJournalTransSwapped, _ledgerJournalTrans_Asset, _updateCashDisc);

            _ledgerJournalTrans.CashDiscAmount = ledgerJournalTransSwapped.CashDiscAmount;
            _ledgerJournalTrans.DateCashDisc   = ledgerJournalTransSwapped.DateCashDisc;

            this.updateCashDiscDetail(_ledgerJournalTrans, false);
        }
        else
        {
            this.deleteCashDisc(_ledgerJournalTrans);

            _ledgerJournalTrans.CashDiscAmount = 0;
            _ledgerJournalTrans.DateCashDisc   = dateNull();
        }

        if (TaxParameters::find().TaxLessCashDisc)
        {
            this.clearTaxAmountCache(_ledgerJournalTrans);
        }

        this.refreshDataSource(_ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initApprovedBy</Name>
				<Source><![CDATA[
    void initApprovedBy(LedgerJournalTrans _ledgerJournalTrans)
    {
        if (_ledgerJournalTrans.Approved)
        {
            _ledgerJournalTrans.Approver = HcmWorker::userId2Worker(curUserId());
        }
        else
        {
            _ledgerJournalTrans.Approver = 0;
        }

        this.refreshDataSource(_ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendTable</Name>
				<Source><![CDATA[
    protected void initFromVendTable(LedgerJournalTrans ledgerJournalTrans, Tax1099BoxDetail _tax1099Detail = null)
    {
        DueDate     dueDate;
        PaymTerm    paymTerm;

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            super(ledgerJournalTrans, _tax1099Detail);
        }
        else
        {
            super(ledgerJournalTrans);
        }

        ledgerJournalTrans.PostingProfile       = VendParameters::find().PostingProfile;

        ledgerJournalTrans.Approved = NoYes::Yes;
        ledgerJournalTrans.Approver = HcmWorker::userId2Worker(curUserId());

        if (vendTable.BankAccount)
        {
            ledgerJournalTrans.CustVendBankAccountId = vendTable.BankAccount;
        }

        if (ledgerJournalTrans.OffsetLedgerDimension && !ledgerJournalTrans.Invoice)
        {
            if (vendTable.PaymTermId)
            {
                this.findPayment(vendTable.PaymTermId);
                //  If an Invoice number and Document date exist use the Document date to determine the Due date
                //  otherwise use the Transaction date.
                dueDate = payment.due(ledgerJournalTrans.DocumentDate ?
                                ledgerJournalTrans.DocumentDate : ledgerJournalTrans.TransDate,
                                this.paymDayId(ledgerJournalTrans));

                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES]))
                {
                    paymTerm = PaymTerm::find(ledgerJournalTrans.Payment);
                    dueDate = this.getDueDateBaseDate(ledgerJournalTrans);

                    if (dueDate || !paymTerm.UseDeliveryDateForDueDate_ES)
                    {
                        dueDate = payment.due(
                            dueDate,
                            this.paymDayId(ledgerJournalTrans),
                            false,
                            this.getDueDateLimit(ledgerJournalTrans));
                    }
                }
                else if (isConfigurationkeyEnabled(configurationKeyNum(PaymCalendar)))
                {
                    dueDate = this.adjustDueDate(dueDate, ledgerJournalTrans);
                }

                ledgerJournalTrans.Due = dueDate;
            }
            else
            {
                ledgerJournalTrans.Due = ledgerJournalTrans.TransDate;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue(LedgerJournalTrans _ledgerJournalTrans, LedgerJournalTrans_Asset _ledgerJournalTrans_Asset = null)
    {
        FormRun     caller,
                    parentCaller;

        ProjTable   localProjTable;

        super(_ledgerJournalTrans);

        _ledgerJournalTrans.AccountType             = LedgerJournalACType::Project;
        _ledgerJournalTrans.SettleVoucher           = SettlementType::None;

        if (ledgerJournalTrans_ds &&
            ledgerJournalTrans_ds.formRun() &&
            ledgerJournalTrans_ds.formRun().args())
        {
            caller = ledgerJournalTrans_ds.formRun().args().caller();

            if (caller && caller.args())
            {
                parentCaller = caller.args().caller();

                if (parentCaller && caller.args().dataset() == tableNum(ProjTable))
                {
                    localProjTable = caller.args().record();
                    _ledgerJournalTrans.parmAccount(localProjTable.ProjId);
                }
            }
        }

        if (ledgerJournalTable.OffsetAccountType == LedgerJournalACType::Ledger)
        {
            if (ledgerJournalTable.OffsetLedgerDimension)
            {
                this.initDefaultDimension(_ledgerJournalTrans);
            }
            _ledgerJournalTrans.setOffsetLedgerDimension(ledgerJournalTable,
                                                ledgerJournalTable.OffsetAccountType,
                                                _ledgerJournalTrans.getOffsetLedgerDimensionForLedgerType(ledgerJournalTable.OffsetLedgerDimension, _ledgerJournalTrans.getOffsetCompany()));
        }
        else
        {
            _ledgerJournalTrans.setOffsetLedgerDimension(ledgerJournalTable,
                                            ledgerJournalTable.OffsetAccountType,
                                            ledgerJournalTable.parmOffsetLedgerDimension());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValueProject</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes project-related fields for the created transaction.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    The <c>LedgerJournalTrans</c> table buffer that stores part of the transaction.
    /// </param>
    /// <param name="_ledgerJournalTrans_Project">
    ///    The <c>LedgerJournalTrans_Project</c> table buffer that stores part of the transaction.
    /// </param>
    public void initValueProject(LedgerJournalTrans    _ledgerJournalTrans, LedgerJournalTrans_Project _ledgerJournalTrans_Project)
    {
        _ledgerJournalTrans_Project.SalesCurrencyId = ProjInvoiceTable::find(_ledgerJournalTrans.findProjTable().ProjInvoiceProjId).CurrencyId;
        _ledgerJournalTrans.TaxItemGroup            = ProjCategory::find(_ledgerJournalTrans_Project.CategoryId).TaxItemGroupId;
        _ledgerJournalTrans_Project.Qty             = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetAcctModified</Name>
				<Source><![CDATA[
    void offsetAcctModified(
        LedgerJournalTrans          _ledgerJournalTrans,
        LedgerJournalTrans_Project  _ledgerJournalTrans_Project)
    {
        CurrencyCode previousCurrencyCode = _ledgerJournalTrans.CurrencyCode;

        switch (_ledgerJournalTrans.OffsetAccountType)
        {
            case LedgerJournalACType::Vend:
                vendTable = _ledgerJournalTrans.findVendTable();
                this.initFromVendTable(_ledgerJournalTrans);
                if (previousCurrencyCode != _ledgerJournalTrans.CurrencyCode)
                {
                    this.currencyModified(_ledgerJournalTrans);
                    LedgerJournalEngine::setProjCostSalesPrice(_ledgerJournalTrans, _ledgerJournalTrans_Project, this.parmSalesPrice());
                }
                break;

            case LedgerJournalACType::Cust:
                _ledgerJournalTrans.Approved = NoYes::Yes;
                _ledgerJournalTrans.Approver = HcmWorker::userId2Worker(curUserId());
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerJournalTransDebitAndCreditAmountsforProj</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the journal line credit/debit amounts for project-related scenarios.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    The journal line being changed.
    /// </param>
    /// <param name="_ledgerJournalTrans_Project">
    ///    The project journal line being changed.
    /// </param>
    /// <param name="_projExpenseJournal">
    ///    True if an expense journal scenario and false otherwise.
    /// </param>
    /// <param name="_amount">
    ///    Calculated based on project cost price and quantity or debit value entered.
    /// </param>
    [Hookable(false)]
    internal static void updateLedgerJournalTransDebitAndCreditAmountsforProj(LedgerJournalTrans _ledgerJournalTrans, LedgerJournalTrans_Project _ledgerJournalTrans_Project,  Amount _amount, boolean _projExpenseJournal = false)
    {
        if (_projExpenseJournal)
        {
            if (_amount < 0 && !_ledgerJournalTrans_Project.Correction && ProjExpenseJournalNegativeAmountCreditingFlight::instance().isEnabled())
            {
                _ledgerJournalTrans.AmountCurDebit  = 0;
                _ledgerJournalTrans.AmountCurCredit = -_amount;
            }
            else
            {
                _ledgerJournalTrans.AmountCurDebit  = _amount;
                _ledgerJournalTrans.AmountCurCredit = 0;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preWrite</Name>
				<Source><![CDATA[
    public void preWrite(
        LedgerJournalTrans          _ledgerJournalTrans,
        LedgerJournalTrans_Project  _ledgerJournalTrans_Project = null,
        LedgerJournalTrans_RCash    _ledgerJournalTrans_RCash   = null)
    {
        Amount amount = CurrencyExchangeHelper::amount(_ledgerJournalTrans_Project.Qty * _ledgerJournalTrans_Project.CostPrice, _ledgerJournalTrans.CurrencyCode);

        LedgerJournalEngine_ProjectCost::updateLedgerJournalTransDebitAndCreditAmountsForProj(_ledgerJournalTrans, _ledgerJournalTrans_Project, amount, true);
        
        // <GEERU>
        super(_ledgerJournalTrans, _ledgerJournalTrans_Project, _ledgerJournalTrans_RCash);
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaInit</Name>
				<Source><![CDATA[
    // Description    : Initialize member variables needed for the engine to
    //                  function when not having a formRun behind it
    // Parameters     : _tLedgerJournalTrans: Transaction to initialize from
    void psaInit(LedgerJournalTrans _tLedgerJournalTrans)
    {
        LedgerJournalTable  tLedgerJournalTable;
        LedgerJournalTrans  tOldLedgerJournalTrans;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
        ledgerJournalEngine_Server = LedgerJournalEngine_Server::construct();
        tLedgerJournalTable = LedgerJournalTable::find(_tLedgerJournalTrans.JournalNum);
        this.ledgerJournalTable(tLedgerJournalTable);

        if (tLedgerJournalTable.ledgerJournalName().NewVoucher == NewVoucher::OneVoucher)
        {
            select firstonly tOldLedgerJournalTrans
                order by LineNum desc
                where tOldLedgerJournalTrans.JournalNum == _tLedgerJournalTrans.JournalNum;

            this.psaSetOld(tOldLedgerJournalTrans.Voucher, tOldLedgerJournalTrans.TransDate, tOldLedgerJournalTrans.parmAccount());
        }

        numberSeqFormHandlerJournal = new NumberSeqFormHandlerLedgerJournal();
        numberSeqFormHandlerJournal.parmFieldIdNum(fieldNum(LedgerJournalTrans, Voucher));
        numberSeqFormHandlerJournal.parmDontThrowOnMissingRefSetUp(false);

        numberSeqFormHandlerJournal.parmLedgerJournalEngine(this);
        numberSeqFormHandlerJournal.parmLedgerJournalTrans(_tLedgerJournalTrans);
        numberSeqFormHandlerJournal.formMethodDataSourceCreate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaNewEngine</Name>
				<Source><![CDATA[
    // Description    : Creates a new instance of LedgerJournalEngine_ProjectCost
    //                  Used by LedgerJournalTrans.PSAInitFromExpense
    // Parameters     : _tLedgerJournalTrans: Transaction being initialized
    static LedgerJournalEngine_ProjectCost psaNewEngine(LedgerJournalTrans _tLedgerJournalTrans = null)
    {
        LedgerJournalEngine_ProjectCost ledgerJournalEngine = new LedgerJournalEngine_ProjectCost(null);

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            ledgerJournalEngine.PSAInit(_tLedgerJournalTrans);
        }

        return ledgerJournalEngine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentDateModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the Due dates of <c>LedgerJounalTrans</c> buffer When their exists Offset Ledger Dimensions
    ///     and No Invoice number on the supplied <c>LedgerJounalTrans</c> buffer.
    /// </summary>
    /// <param name="ledgerJournalTrans">
    ///     A supplied <c>LedgerJournalTrans</c> buffer.
    /// </param>
    /// <remarks>
    ///     This method is Overridden to supply specific functionality for the Project Expense Journals.
    /// </remarks>
    public void documentDateModified(LedgerJournalTrans ledgerJournalTrans)
    {
        super(ledgerJournalTrans);

        if (ledgerJournalTrans.OffsetLedgerDimension && !ledgerJournalTrans.Invoice)
        {
            ledgerJournalTrans.Due = PaymCalendarSourceLedgerJournalTrans::getUpdatedDueDate(ledgerJournalTrans, this.paymDayId(ledgerJournalTrans));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the Due dates of <c>LedgerJounalTrans</c> buffer When their exists Offset Ledger Dimensions
    ///     and No Invoice number on the supplied <c>LedgerJounalTrans</c> buffer.
    /// </summary>
    /// <param name="ledgerJournalTrans">
    ///     A supplied <c>LedgerJournalTrans</c> buffer.
    /// </param>
    /// <remarks>
    ///     This method is Overridden to supply specific functionality for the Project Expense Journals.
    /// </remarks>
    public void paymentModified(LedgerJournalTrans ledgerJournalTrans)
    {
        super(ledgerJournalTrans);

        if (ledgerJournalTrans.OffsetLedgerDimension && !ledgerJournalTrans.Invoice)
        {
            ledgerJournalTrans.Due = PaymCalendarSourceLedgerJournalTrans::getUpdatedDueDate(ledgerJournalTrans, this.paymDayId(ledgerJournalTrans));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>