<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionAuditLogChangeCollector</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>RetailTransactionAuditLogChangeCollector</c> class is used to detect and collect field changes.
/// </summary>
internal class RetailTransactionAuditLogChangeCollector
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>collectChanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Iterates through all fields of the record, looking for changes and collecting them.
    /// </summary>
    /// <param name = "_common"></param>
    /// <returns>
    /// A list of <c>RetailTransactionAuditLogField</c> containing all the fields that changed and their old/new value pair.
    /// </returns>
    /// <remarks>
    /// Currently this method does not handle Table Inheritance.
    /// </remarks>
    public static List collectChanges(Common _common)
    {
        using (var telemetry = RetailTransactionAuditLogTelemetry::construct('CollectChanges', _common))
        {
            List logList = new List(Types::Class);

            Common origBuf = _common.orig();

            Set fields = RetailTransactionAuditLogChangeCollector::getFieldList(_common);
            SetEnumerator fieldsEnumerator = fields.getEnumerator();

            while (fieldsEnumerator.moveNext())
            {
                SysDictField field = fieldsEnumerator.current();

                if (field.isSystem() || field.name() == 'InstanceRelationType')
                {
                    continue;
                }

                FieldId fieldId = field.id();

                anytype oldValue = origBuf.(fieldId);
                anytype newValue = _common.(fieldId);

                if (oldValue != newValue)
                {
                    RetailTransactionAuditLogField auditLogField = RetailTransactionAuditLogField::construct(_common, fieldId, oldValue, newValue);

                    logList.addEnd(auditLogField);
                }
            }

            eventSource.EventWriteEditAuditNumberOfChangesFields(tableId2Name(_common.TableId), _common.RecId, logList.elements());

            return logList;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldList</Name>
				<Source><![CDATA[
    private static Set getFieldList(Common _common)
    {
        SysDictTable dictTable = new SysDictTable(_common.TableId);
        
        return dictTable.fields(/* includeNonSavedFields */        false, 
                                /* includeInheritedFields */       true,
                                /* includeIndividualArrayFields */ false);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>