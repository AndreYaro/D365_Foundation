<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventJournalTransTransferController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventJournalTransTransferController</c> class is the controller class for the
///    <c>InventJournalTransTransfer</c> report.
/// </summary>
#isoCountryRegionCodes
class InventJournalTransTransferController extends SrsReportRunController implements BatchRetryable
{
    private const str ISOCode = 'ISOCode';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>hideParameters</Name>
				<Source><![CDATA[
    private void hideParameters(container _parameters)
    {
        SysOperationDataContractInfo    rdpInfo;
        int                             conIdx, conLng = conLen(_parameters);

        void hideParameter(str _parameterName)
        {
            SrsReportRdpDataMemberInfo memberInfo       = rdpInfo.getMembers().lookup(_parameterName);
            SrsReportDesignProperties  reportProperties = memberInfo as SrsReportDesignProperties;

            if (reportProperties)
            {
                reportProperties.parmHidden(true);
            }
        }

        if (! conLng)
        {
            return;
        }

        SysOperationDataContractInfo wrapperInfo = this.getDataContractInfoObjectsRecursively().lookup(classStr(SrsReportRdpRdlWrapperContract));
        rdpInfo = wrapperInfo.getMemberObjectInfo(this.parmReportContract().parmRdpContract());

        for (conIdx = 1; conIdx <= conLng; conIdx ++)
        {
            hideParameter(conPeek(_parameters, conIdx));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hideParameters_RU</Name>
				<Source><![CDATA[
    private void hideParameters_RU()
    {
        SrsReportRdlDataContract rdlContract = this.parmReportContract().parmRdlContract();

        void hideParameterBoolean(str _parmName)
        {
            SRSReportParameter parm = rdlContract.getParameter(_parmName);

            if (!parm)
                return;

            parm.setValueTyped(false);
            parm.hidden(true);
        }

        hideParameterBoolean(fieldStr(InventDim, InventGtdId_RU));
        hideParameterBoolean(fieldStr(InventDim, InventOwnerId_RU));
        hideParameterBoolean(fieldStr(InventDim, InventProfileId_RU));
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the ability to modify the report contract before a dialog box is displayed to the user.
    /// </summary>
    /// <remarks>
    /// Use this method to change the report contract. This method is called only during the interactive
    /// scenario before rendering the UI to user.In a batch scenario, this method is not called because
    /// there is no user interaction and the contract values are already saved in batch.Do not instantiate
    /// any instance variables in this code if they are used during the lifetime of controller because
    /// these will fail in batch cases.
    /// </remarks>
    protected void prePromptModifyContract()
    {
        // <GEERU>
        if (!SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
        {
            this.hideParameters_RU();
        }
        // </GEERU>

        if (!isConfigurationkeyEnabled(configurationKeyNum(EcoResProductVersion)) && InventJournalTransAddInventVersionIdParamFlight::instance().isEnabled())
        {
            SrsReportRdlDataContract rdlContract = this.parmReportContract().parmRdlContract();

            if (rdlContract.parameterExists(fieldStr(InventDim, InventVersionId)))
            {
                SRSReportParameter parm = rdlContract.getParameter(fieldStr(InventDim, InventVersionId));

                if (parm)
                {
                    parm.setValueTyped(false);
                    parm.hidden(true);
                }
            }
        }

        this.setRanges(this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        super();

        this.parmReportContract().parmRdlContract().getParameter(ISOCode).setValueTyped(SysCountryRegionCode::countryInfo());
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunValidate</Name>
				<Source><![CDATA[
    protected container preRunValidate()
    {
        // More than 100,000 rows will take more than 10 minutes on a warm box with low volume
        // and not under load while 1,000 records will take about 10 seconds, so these are
        // used as the warning and error limits.
        #Define.ErrorLimit(100000)
        #Define.WarningLimit(1000)

        // Using the query from the contract, count up to the error limit + 1 since anything
        // over the error limit will return the same error
        container   validateResult;
        Query       query = this.getFirstQuery();
        int         rowCount = QueryRun::getQueryRowCount(query, #ErrorLimit + 1);

        if (rowCount > #ErrorLimit)
        {
            validateResult = [SrsReportPreRunState::Error];
        }
        else if (rowCount > #WarningLimit)
        {
            validateResult = [SrsReportPreRunState::Warning];
        }
        else
        {
            validateResult = super();
        }

        return validateResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRanges</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the report query ranges based on the caller.
    /// </summary>
    /// <param name="_query">
    ///    The <c>Query</c> object of the report.
    /// </param>
    public void setRanges(Query _query)
    {
        InventJournalTable      inventJournalTable;

        if (this.parmArgs().caller())
        {
            if (! this.parmArgs().record().RecId)
            {
                throw error(strFmt("@SYS22338",funcName()));
            }

            switch (this.parmArgs().dataset())
            {
                case tableNum(InventJournalTable):
                    inventJournalTable = this.parmArgs().record();

                    if (inventJournalTable.JournalType != InventJournalType::Transfer)
                    {
                        throw error(strFmt("@SYS23396",funcName()));
                    }
                    break;

                default:
                    throw error(strFmt("@SYS23396",funcName()));
            }
        }

        if (_query)
        {
            if (inventJournalTable.JournalId)
            {
                QueryBuildDataSource queryBuildDataSource = _query.dataSourceTable(tableNum(InventJournalTrans));

                SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(InventJournalTrans, JournalId)).value(inventJournalTable.JournalId);
                SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(InventJournalTrans, JournalType)).value(queryValue(InventJournalType::Transfer));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        InventJournalTransTransferController  controller = new InventJournalTransTransferController();

        controller.parmReportName(ssrsReportStr(InventJournalTransTransfer, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>