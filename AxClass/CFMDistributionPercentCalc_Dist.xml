<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMDistributionPercentCalc_Dist</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Calculates a distribution percent based on accounting distributions.
/// </summary>
public abstract class CFMDistributionPercentCalc_Dist extends CFMDistributionPercentCalc
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillDistribution</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fill temp distribution table based on source accounting distribution.
    /// </summary>
    protected void fillDistribution()
    {
        AccountingDistribution accountingDistribution;
        AccountingDistribution reversingAccountingDistribution;
        SourceDocumentLine sourceDocumentLine;
        CFMLedgerDimension cfmLedgerDimensionHeader = cfmDimensionConverter.convertDefaultDimension(this.headerDefaultDimension());

        while select LedgerDimension, TransactionCurrencyAmount from accountingDistribution
            where accountingDistribution.SourceDocumentHeader == this.sourceDocumentHeader().SourceDocumentHeader
               && accountingDistribution.ReferenceRole != AccountingDistributionReferenceRole::Reversing
        join sourceDocumentLine 
            where sourceDocumentLine.RecId == accountingDistribution.SourceDocumentLine
        notexists join reversingAccountingDistribution
            where reversingAccountingDistribution.ReferenceDistribution == accountingDistribution.RecId
                && reversingAccountingDistribution.ReferenceRole == AccountingDistributionReferenceRole::Reversing
        {
            TaxItemGroup taxItemGroup;
            TaxGroup taxGroup;
            int correction;

            [correction, taxGroup, taxItemGroup] = this.getSourceDocumentTaxData(sourceDocumentLine);

            this.addAmount(paymentRequestsEnabled ? cfmDimensionConverter.convertLedgerDimension(accountingDistribution.LedgerDimension) : cfmLedgerDimensionHeader,
                taxGroup,
                taxItemGroup,
                correction * this.paymentSign() * accountingDistribution.TransactionCurrencyAmount);

            this.processReferenceAccountingDistribution(accountingDistribution.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceDocumentTaxData</Name>
				<Source><![CDATA[
    protected container getSourceDocumentTaxData(SourceDocumentLine _sourceDocumentLine)
    {
        TaxGroup taxGroup;
        TaxItemGroup taxItemGroup;
        int correction = 1;

        switch (_sourceDocumentLine.SourceRelationType)
        {
            case tableNum(PurchLine):
                PurchLine purchLine = PurchLine::findBySourceDocumentLine(_sourceDocumentLine.RecId);

                taxGroup = purchLine.TaxGroup;
                taxItemGroup = purchLine.TaxItemGroup;
                break;

            case tableNum(VendInvoiceTrans):
                VendInvoiceTrans vendInvoiceTrans = VendInvoiceTrans::findSourceDocumentLine(_sourceDocumentLine.RecId);

                taxGroup = vendInvoiceTrans.TaxGroup;
                taxItemGroup = vendInvoiceTrans.TaxItemGroup;
                break;

            case tableNum(CustInvoiceLine):
                CustInvoiceLine custInvoiceLine = CustInvoiceLine::findBySourceDocumentLine(_sourceDocumentLine.RecId);

                taxGroup = custInvoiceLine.TaxGroup;
                taxItemGroup = custInvoiceLine.TaxItemGroup;
                break;

            case tableNum(TaxUncommitted):
                TaxUncommitted taxUncommitted = TaxUncommitted::findBySourceDocumentLine(_sourceDocumentLine.RecId);

                if (taxUncommitted.IsDeleted == NoYes::Yes)
                {
                    correction = 0;
                }
                else
                {
                    correction = this.taxCorrection(taxUncommitted, _sourceDocumentLine);
                }

                taxGroup = taxUncommitted.TaxGroup;
                taxItemGroup = taxUncommitted.TaxItemGroup;
                break;

            case tableNum(TaxTrans):
                TaxTrans taxTrans = TaxTrans::findBySourceDocumentLine(_sourceDocumentLine.RecId);

                correction = this.taxCorrection(taxTrans, _sourceDocumentLine);
                taxGroup = taxTrans.TaxGroup;
                taxItemGroup = taxTrans.TaxItemGroup;
                break;

            case tableNum(MarkupTrans):
                MarkupTrans markupTrans = MarkupTrans::findBySourceDocumentLine(_sourceDocumentLine.RecId);

                if (markupTrans.markupTable().VendType != MarkupType::CustVend && markupTrans.markupTable().CustType != MarkupType::CustVend)
                {
                    correction = 0;
                }

                taxGroup = markupTrans.TaxGroup;
                taxItemGroup = markupTrans.TaxItemGroup;
                break;

            default:
                // Get item tax group from parent line
                SourceDocumentLine sourceDocumentLineParent = SourceDocumentLine::findTopParentSourceDocumentLine(_sourceDocumentLine.RecId);

                if (sourceDocumentLineParent.RecId != _sourceDocumentLine.RecId)
                {
                    [correction, taxGroup, taxItemGroup] = this.getSourceDocumentTaxData(sourceDocumentLineParent);
                }
                else
                {
                    taxGroup = "";
                    taxItemGroup = "";
                }
        }

        return [correction, taxGroup, taxItemGroup];
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerDefaultDimension</Name>
				<Source><![CDATA[
    protected abstract DimensionDefault headerDefaultDimension()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>processReferenceAccountingDistribution</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes reference accounting distribution lines related to source document.
    /// </summary>
    /// <param name="_originalAccountingDistributionRecId">
    /// Source accounting distribution line record.
    /// </param>
    protected void processReferenceAccountingDistribution(AccountingDistributionRecId _originalAccountingDistributionRecId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDocumentHeader</Name>
				<Source><![CDATA[
    protected SourceDocumentHeaderImplementation sourceDocumentHeader()
    {
        return source;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxCorrection</Name>
				<Source><![CDATA[
    private int taxCorrection(TaxMap _taxLine, SourceDocumentLine _sourceDocumentLine)
    {
        int correction = 1;

        switch (_taxLine.TaxDirection)
        {
            case TaxDirection::UseTax:
            case TaxDirection::TaxExemptPurchase:
            case TaxDirection::TaxExemptSales:
                correction = 0;
                break;

            case TaxDirection::OutgoingTax:
            case TaxDirection::OutgoingTax_W:
                correction = -1;
                break;
        }
        if (SourceDocumentLine::find(_sourceDocumentLine.ParentSourceDocumentLine).SourceRelationType == tableNum(CustInvoiceLine))
        {
            correction = 0;
        }

        return correction;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>