<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMPaymentRequestSource_CustVend</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class creates single payment request from single payment request source of different type for Custmer or Vendor.
/// </summary>
[CFMPaymentRequestSourceAttribute(tableStr(VendTransOpen))
,CFMPaymentRequestSourceAttribute(tableStr(CustTransOpen))]
public class CFMPaymentRequestSource_CustVend extends CFMPaymentRequestSource
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDataAreaId</Name>
				<Source><![CDATA[
    protected SelectableDataArea getDataAreaId()
    {
        return sourceRecord.company();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPaymentRequest</Name>
				<Source><![CDATA[
    protected void initPaymentRequest()
    {
        CustVendTransOpen sourceTransOpen = sourceRecord;
        CFMPRCustVendData sourceData = CFMPRCustVendData::construct(sourceTransOpen);
        CustVendInvoiceJour sourceInvoiceJour = sourceData.sourceInvoiceJour();
        CustVendTrans sourceTrans = sourceData.sourceTrans();
        CustVendPaymModeTable sourcePaymModeTable = sourceData.sourcePaymModeTable();
        AmountCur paymentRequestAmountTotal = abs(sourceTransOpen.AmountCur);

        select count(RecId) from distributionPercentTmpTable;

        CFMDistributionPercentCalc distributionCalculator;

        if (distributionPercentTmpTable.RecId == 0)
        {
            if (sourceInvoiceJour)
            {
                distributionCalculator = CFMDistributionPercentCalc::construct(sourceInvoiceJour);
            }
            else
            {
                distributionCalculator = CFMDistributionPercentCalc::construct(sourceTrans);
            }

            if (distributionCalculator)
            {
                distributionPercentTmpTable = distributionCalculator.calc();
            }
        }

        ttsbegin;

        paymentRequestTable.clear();
        paymentRequestTable.SourceDataAreaId = sourceTrans.company();
        paymentRequestTable.initLegalEntities();
        paymentRequestTable.Status = CFMPaymentRequestStatus::Confirmed;
        paymentRequestTable.PaymentRequestType = sourceData.requestType();
        paymentRequestTable.AccountType = sourceData.accountType();
        paymentRequestTable.SourceType = sourceData.sourceType();
        paymentRequestTable.AgreementID = sourceData.agreementId();
        paymentRequestTable.RecepientBankAccountId = sourceData.ThirdPartyBankAccountId();
        paymentRequestTable.Prepayment = sourceData.isPrepayment();

        //From open trans
        paymentRequestTable.AccountNum = sourceTransOpen.AccountNum;
        paymentRequestTable.InvoiceAccountNum = sourceTransOpen.AccountNum;
        paymentRequestTable.DueDate = sourceTransOpen.DueDate;
        paymentRequestTable.PaymentDate = sourceTransOpen.DueDate;
        paymentRequestTable.SourceRefRecId = sourceTransOpen.RecId;

        //From trans
        paymentRequestTable.CurrencyCode = sourceTrans.CurrencyCode;
        paymentRequestTable.BankPurposeText = sourceTrans.BankCentralBankPurposeText;
        paymentRequestTable.DefaultDimension = sourceTrans.DefaultDimension;
        paymentRequestTable.PaymentCurrency = sourceTrans.CurrencyCode;
        paymentRequestTable.PaymMode = sourceTrans.PaymMode;
        paymentRequestTable.PaymSpec = sourceTrans.PaymSpec;
        paymentRequestTable.PostingProfile = sourceTrans.PostingProfile;
        paymentRequestTable.HeaderRefRecId = sourceTrans.RecId;

        //From invoice jour if exists
        if (sourceInvoiceJour)
        {
            paymentRequestTable.AccountNum = sourceInvoiceJour.OrderAccount;
        }

        //Calculated fields
        paymentRequestTable.initPaymentRequestInitiator();
        paymentRequestTable.initPaymentPriority();
        paymentRequestTable.initWorkflowStatus();

        if (sourcePaymModeTable)
        {
            paymentRequestTable.initFromCustVendPaymModeTable(sourceData.sourcePaymModeTable());
        }

        //payment order
        if (sourceData.agreementId())
        {
            PurchAgreementHeader purchAgreement = PurchAgreementHeader::findAgreementId(sourceData.agreementId());

            CFMAgreementPaymentOrder agreementPaymentOrder = sourceData.agreementPaymentOrder();

            if (agreementPaymentOrder)
            {
                CFMPaymentRequestPaymentOrderCreate paymentOrderCreate = CFMPaymentRequestPaymentOrderCreate::construct(agreementPaymentOrder);
                paymentRequestTable.PaymentOrder = paymentOrderCreate.findOrCreate(agreementPaymentOrder).RecId;
            }
        }

        paymentRequestTable.insert();

        this.initPaymentRequestLines(paymentRequestAmountTotal);

        CFMPaymentRequestCashDiscCreate::createPaymRequestCashDiscounts(paymentRequestTable);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPaymentRequestLines</Name>
				<Source><![CDATA[
    private void initPaymentRequestLines(AmountCur _totalAmount)
    {
        RealBase percentDistributed;
        AmountCur amountDistributed;

        while select distributionPercentTmpTable
        {
            percentDistributed += distributionPercentTmpTable.Percent;
            AmountCur amountCur = _totalAmount * percentDistributed / 100 - amountDistributed;
            amountDistributed += amountCur;

            CFMPaymentRequestLine curPaymentRequestLine;

            curPaymentRequestLine.clear();
            curPaymentRequestLine.initFromPaymentRequestTable(paymentRequestTable);
            curPaymentRequestLine.AmountCur = amountCur;
            curPaymentRequestLine.BalanceAmountCur = amountCur;
            curPaymentRequestLine.LedgerDimension = distributionPercentTmpTable.LedgerDimension;
            curPaymentRequestLine.TaxItemGroup = distributionPercentTmpTable.TaxItemGroup;
            curPaymentRequestLine.TaxGroup = distributionPercentTmpTable.TaxGroup;

            curPaymentRequestLine.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>