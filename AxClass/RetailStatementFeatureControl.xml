<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailStatementFeatureControl</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailStatementFeatureControl</c> class is used to control feature flags.
/// </summary>
internal class RetailStatementFeatureControl
{
    // Flighting key strings. Length can be maximum 60 characters.
    private const str UseNewTransformerNonAggregatedFlightingKey = 'EOD_STATEMENT_USE_NEW_TRANSFORMER_NONAGGREGATED';
    private const str NotAggregateInventoryReservationFlightingKey = 'EOD_STATEMENT_NOT_AGGREGATE_INVENTORY_RESERVATION';
    private const str ThrowLegacyObsoleteErrorsFlightingKey = 'EOD_STATEMENT_THROW_LEGACY_OBSOLETE_ERRORS';
    private const str PrioritizePaymentMethodDefaultDimensionsFlightingKey = 'EOD_STATEMENT_PRIORITIZE_PAYMENT_DEFAULT_DIMENSIONS';
    private const str UseDateWhenFindingSalesLineFlightingKey = 'EOD_STATEMENT_USE_DATE_WHEN_FINDING_SALES_LINE';
    private const str UseExchangeRateTypeFromRetailSharedParametersFlightingKey = 'EOD_STATEMENT_EXCHANGE_RATE_FROM_RETAIL_SHARED_PARAMETERS';
    private const str UseLineNumberFromSalesTransFlightingKey = 'EOD_STATEMENT_USE_LINE_NUMBER_FROM_SALES_TRANS';
    private const str OverrideMaxNumberOfThreadsConsistencyCheckerFlightingKey = 'EOD_STATEMENT_OVERRIDE_MAX_THREADS_CONSISTENCY_CHECKER';
    private const str AutomaticallyPostSalesLineKitOrderFlightingKey = 'EOD_STATEMENT_AUTOMATICALLY_POST_SALES_LINE_KIT_ORDER';
    private const str RetailJobSyncManagerMaxWaitMillisecondsFlightingKey = 'EOD_STATEMENT_RETAIL_JOB_SYNC_MANAGER_MAX_WAIT_MILLISECONDS';
    private const str ManageJobConcurrencyWithLocksFlightingKey = 'EOD_STATEMENT_MANAGE_JOB_CONCURRENCY_WITH_LOCKS';
    private const str SkipAggregationForPaymentsOnAccountFlightingKey = 'EOD_STATEMENT_SKIP_AGGREGATION_FOR_PAYMENTS_ON_ACCOUNT';
    private const str PostDifferenceByStatementLineFlightingKey = 'EOD_STATEMENT_POST_DIFFERENCE_BY_STATEMENT_LINE';
    private const str RestrictInvoicingFlightingKey = 'EOD_STATEMENT_RESTRICT_INVOICING';
    private const str LoyaltyPointsCalculatedForSalesOrderFlightingKey = 'EOD_STATEMENT_LOYALTY_POINTS_CALCULATED_FOR_SALESORDER';
    private const str LoyaltyPointUpdatesUseFullTransactionPrimaryKeyFlightingKey = 'EOD_STATEMENT_LOYALTYPOINT_UPDATES_USE_FULL_TRANSACTION_KEY';
    private const str SkipShipStartDateValidationFlightKey = 'EOD_STATEMENT_SKIP_SHIP_START_DATE_VALIDATION';
    private const str AdjustChargeTaxesFlightingKey = 'EOD_STATEMENT_ADJUST_CHARGE_TAXES';
    private const str StampDimensionInPostInventoryOnceFlightingKey = 'EOD_STATEMENT_STAMP_DIMENSION_IN_POST_INV_ONCE';
    private const str UseSettlementNoneForSalesOrdersFlightingKey = 'EOD_STATEMENT_USE_SETTLEMENT_NONE_FOR_SO';
    private const str PostDiscountStatementWithDefaultCustAccoutMethodFlightingKey = 'EOD_STATEMENT_POST_DISCOUNT_WITH_DEFAULT_CUST_ACCOUNT';
    private const str UseTransactionCountToAddTenderDeclarationFlightingKey = 'EOD_STATEMENT_USE_TRX_COUNT_ADD_TENDER_DECLARE';
    private const str IgnoreDropShipmentFlightingKey = 'EOD_STATEMENT_IGNORE_DROP_SHIPMENT';
    private const str MaxOpenTransactionalStatementsPerStoreFlightingKey = 'EOD_MAX_OPEN_TRANSACTIONAL_STATEMENTS_PER_STORE';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isNewTransformerForNonAggregatedEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether or not we should use <c>RetailEodAggregationTransformer</c> instead of <c>RetailEodTransactionTransformer</c> to create the CustomerOrderInfo for the non-aggregated scenario.
    /// </summary>
    /// <returns>
    /// true if record is not found or if record is found and has value '1'; otherwise, false.
    /// </returns>
    internal static boolean isNewTransformerForNonAggregatedEnabled()
    {
        return RetailFeatureControl::isFeatureFlightKeySet(UseNewTransformerNonAggregatedFlightingKey, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNotAggregateInventoryReservationEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether or not the inventory reservations should not be aggregated (even if aggregation is ON for statement posting).
    /// </summary>
    /// <returns>
    /// True if record is not found or if record is found and has value '1'; otherwise, false.
    /// </returns>
    internal static boolean isNotAggregateInventoryReservationEnabled()
    {
        return RetailFeatureControl::isFeatureFlightKeySet(NotAggregateInventoryReservationFlightingKey, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isThrowLegacyObsoleteErrorsEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether or not to suppress obsolete errors thrown by legacy posting engine api.
    /// </summary>
    /// <returns>
    /// True if record is not found or if record is found and has value '1'; otherwise, false.
    /// </returns>
    internal static boolean isThrowLegacyObsoleteErrorsEnabled()
    {
        return RetailFeatureControl::isFeatureFlightKeySet(ThrowLegacyObsoleteErrorsFlightingKey, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndThrowIfLegacyObsoleteErrorsEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check the value of the IsThrowLegacyObsoleteErrorsEnabled method and throw an exception if it returns TRUE.
    /// </summary>
    /// <param name = "_callingFunctionName">The name of the calling function, for logging purposes.</param>
    static internal void checkAndThrowIfLegacyObsoleteErrorsEnabled(str _callingFunctionName)
    {
        if (RetailStatementFeatureControl::isThrowLegacyObsoleteErrorsEnabled())
        {
            throw error(error::wrongUseOfFunction(_callingFunctionName));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPrioritizePaymentMethodDefaultDimensionsEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether or not the payment method default dimensions are prioritized.
    /// </summary>
    /// <returns>
    /// True if record is found and has value '1'; otherwise, false.
    /// </returns>
    internal static boolean isPrioritizePaymentMethodDefaultDimensionsEnabled()
    {
        return RetailFeatureControl::isFeatureFlightKeySet(PrioritizePaymentMethodDefaultDimensionsFlightingKey, funcName(), false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUseDateWhenFindingSalesLineEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether or not <c>SalesLine.findByRetailSalesTrans</c> uses Date when finding the SalesLine.
    /// </summary>
    /// <returns>
    /// true if record is not found or if record is found and has value '1'; otherwise, false.
    /// </returns>
    internal static boolean isUseDateWhenFindingSalesLineEnabled()
    {
        return RetailFeatureControl::isFeatureFlightKeySet(UseDateWhenFindingSalesLineFlightingKey, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUseExchangeRateTypeFromRetailSharedParametersEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether or not the exchange rate type from Retail Parameters should be used.
    /// </summary>
    /// <returns>
    /// true if record is not found or if record is found and has value '1'; otherwise, false.
    /// </returns>
    internal static boolean isUseExchangeRateTypeFromRetailSharedParametersEnabled()
    {
        return RetailFeatureControl::isFeatureFlightKeySet(UseExchangeRateTypeFromRetailSharedParametersFlightingKey, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUseLineNumberFromSalesTransEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether or not line number from sales trans should be used to create the sales line.
    /// </summary>
    /// <returns>
    /// true if record is not found or if record is found and has value '1'; otherwise, false.
    /// </returns>
    internal static boolean isUseLineNumberFromSalesTransEnabled()
    {
        return RetailFeatureControl::isFeatureFlightKeySet(UseLineNumberFromSalesTransFlightingKey, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOverridenMaxNumberOfThreadsConsistencyCheckerValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether or not we override the customer's setting for the maximum number of threads
    /// to use for Retail Transaction Consistency Checker.
    /// </summary>
    /// <returns>
    /// Value field of the record if record is found; otherwise, 0.
    /// </returns>
    internal static int getOverridenMaxNumberOfThreadsConsistencyCheckerValue()
    {
        return str2Int(RetailFeatureControl::getFeatureFlightKeyValue(OverrideMaxNumberOfThreadsConsistencyCheckerFlightingKey, funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAutomaticallyPostSalesLineKitOrderEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether or not the kit orders created for sales order from statement should be automatically posted.
    /// </summary>
    /// <returns>
    /// True if record is not found or if record is found and has value '1'; otherwise, false.
    /// </returns>
    internal static int isAutomaticallyPostSalesLineKitOrderEnabled()
    {
        return RetailFeatureControl::isFeatureFlightKeySet(AutomaticallyPostSalesLineKitOrderFlightingKey, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRetailJobSyncManagerMaxWaitMilliseconds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling the default maximum wait time RetailJobSyncManager should wait to acquire a lock.
    /// </summary>
    /// <returns>
    /// Value field of the record if record is found; otherwise, 0.
    /// </returns>
    internal static int getRetailJobSyncManagerMaxWaitMilliseconds()
    {
        return str2Int(RetailFeatureControl::getFeatureFlightKeyValue(RetailJobSyncManagerMaxWaitMillisecondsFlightingKey, funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isManageJobConcurrencyWithLocksEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether or not we should enable managing job concurrency with locks.
    /// </summary>
    /// <returns>
    /// True if record is not found or if record is found and has value '1'; otherwise, false.
    /// </returns>
    internal static boolean isManageJobConcurrencyWithLocksEnabled()
    {
        return RetailFeatureControl::isFeatureFlightKeySet(ManageJobConcurrencyWithLocksFlightingKey, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPostDifferenceByStatementLineEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether or not we should post the statement difference by statement line.
    /// </summary>
    /// <returns>
    /// True if record is not found or if record is found and has value '1'; otherwise, false.
    /// </returns>
    internal static boolean isPostDifferenceByStatementLineEnabled()
    {
        return RetailFeatureControl::isFeatureFlightKeySet(PostDifferenceByStatementLineFlightingKey, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLoyaltyPointsForSalesOrderInStatementEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether to calculate loyalty Points for sales order.
    /// </summary>
    /// <returns>
    /// true if record is not found or if record is found and has value '1'; otherwise, false.
    /// </returns>
    internal static boolean isLoyaltyPointsForSalesOrderInStatementEnabled()
    {
        return RetailFeatureControl::isFeatureFlightKeySet(LoyaltyPointsCalculatedForSalesOrderFlightingKey, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSkipAggregationForPaymentsOnAccountEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether or not we should skip aggregating for payments on account.
    /// </summary>
    /// <returns>
    /// True if record is not found or if record is found and has value '1'; otherwise, false.
    /// </returns>
    internal static boolean isSkipAggregationForPaymentsOnAccountEnabled()
    {
        return RetailFeatureControl::isFeatureFlightKeySet(SkipAggregationForPaymentsOnAccountFlightingKey, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRestrictInvoicingEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether or not invoicing of Retail cash and carry sales orders should be restricted.
    /// </summary>
    /// <returns>
    /// true if record is not found or if record is found and has value '1'; otherwise, false.
    /// </returns>
    internal static boolean isRestrictInvoicingEnabled()
    {
        return RetailFeatureControl::isFeatureFlightKeySet(RestrictInvoicingFlightingKey, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSkipShipStartDateValidationEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether or not invoicing of Retail cash and carry sales orders should respect the ship start date restriction
    /// set on for the item.
    /// </summary>
    /// <returns>
    /// true if record is not found or if record is found and has value '1'; otherwise, false.
    /// </returns>
    internal static boolean isSkipShipStartDateValidationEnabled()
    {
        return RetailFeatureControl::isFeatureFlightKeySet(SkipShipStartDateValidationFlightKey, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLoyaltyUpdatesUseFullTransactionPrimaryKeyEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether or not loyalty point updates should use the full transaction primary key index.
    /// </summary>
    /// <returns>
    /// true if record is not found or if record is found and has value '1'; otherwise, false.
    /// </returns>
    internal static boolean isLoyaltyUpdatesUseFullTransactionPrimaryKeyEnabled()
    {
        return RetailFeatureControl::isFeatureFlightKeySet(LoyaltyPointUpdatesUseFullTransactionPrimaryKeyFlightingKey, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAdjustChargeTaxesEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether or not we should adjust charge taxes.
    /// </summary>
    /// <returns>
    /// True if record is not found or if record is found and has value '1'; otherwise, false.
    /// </returns>
    internal static boolean isAdjustChargeTaxesEnabled()
    {
        return RetailFeatureControl::isFeatureFlightKeySet(AdjustChargeTaxesFlightingKey, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStampDimensionsInPostInventoryOnceEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether or not we should stamp the transaction dimensions in post inventory just once.
    /// </summary>
    /// <returns>
    /// True if record is not found or if record is found and has value '1'; otherwise, false.
    /// </returns>
    internal static boolean isStampDimensionsInPostInventoryOnceEnabled()
    {
        return RetailFeatureControl::isFeatureFlightKeySet(StampDimensionInPostInventoryOnceFlightingKey, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSettlementNoneForSalesOrdersEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether or not Retail statements should use settlement type as None for sales orders.
    /// </summary>
    /// <returns>
    /// True if record is not found or if record is found and has value '1'; otherwise, false.
    /// </returns>
    internal static boolean isSettlementNoneForSalesOrdersEnabled()
    {
        return RetailFeatureControl::isFeatureFlightKeySet(UseSettlementNoneForSalesOrdersFlightingKey, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPostDiscountStatementWithDefaultCustAccountEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether or not we should use the default customer to post discount on statement posting for unnamed transactions.
    /// </summary>
    /// <returns>
    /// True if the record has value '1', or is NOT found; otherwise, false.
    /// </returns>
    internal static boolean isPostDiscountStatementWithDefaultCustAccountEnabled()
    {
        return RetailFeatureControl::isFeatureFlightKeySet(PostDiscountStatementWithDefaultCustAccoutMethodFlightingKey, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUseTransactionCountToAddTenderDeclarationEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether the number of transactions should be considered to add a new statement line
    /// for a tender declaration.
    /// </summary>
    /// <returns>
    /// True if the record has value '1', or is NOT found; otherwise, false.
    /// </returns>
    internal static boolean isUseTransactionCountToAddTenderDeclarationEnabled()
    {
        return RetailFeatureControl::isFeatureFlightKeySet(UseTransactionCountToAddTenderDeclarationFlightingKey, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIgnoreDropShipmentEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether the drop shipment configuration in released products should be ignored in statements.
    /// </summary>
    /// <returns>
    /// True if the record has value '1', or is NOT found; otherwise, false.
    /// </returns>
    internal static boolean isIgnoreDropShipmentEnabled()
    {
        return RetailFeatureControl::isFeatureFlightKeySet(IgnoreDropShipmentFlightingKey, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxOpenTransactionalStatementsPerStore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling the max number of open transactional statements for any store.
    /// </summary>
    /// <returns>
    /// The value of the record if the record is found and the value is positive; otherwise, the default value is 50.
    /// </returns>
    internal static int getMaxOpenTransactionalStatementsPerStore()
    {
        const int defaultValue = 50;
        int ret = defaultValue;

        str valueInRetailConfigurationParameters = RetailFeatureControl::getFeatureFlightKeyValue(MaxOpenTransactionalStatementsPerStoreFlightingKey, funcName());

        if (valueInRetailConfigurationParameters)
        {
            int maxStatementsPerStore;
            try
            {
                maxStatementsPerStore = str2Int(valueInRetailConfigurationParameters);
            }
            catch
            {
                return ret;
            }

            if (maxStatementsPerStore > 0)
            {
                ret = maxStatementsPerStore;
            }
                
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>