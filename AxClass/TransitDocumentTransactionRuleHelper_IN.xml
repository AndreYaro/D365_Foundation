<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TransitDocumentTransactionRuleHelper_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The helper class for initializing rule definitions.
/// </summary>
public class TransitDocumentTransactionRuleHelper_IN
        implements ITaxSolutionInitMetadataActionable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes rule definitions.
    /// </summary>
    public static void initRule()
    {
        List ruleObjectList;
        List ruleExtObjectList;
        TransitDocumentTransactionRuleHelper_IN transitDocumentRuleHelper;

        transitDocumentRuleHelper = new TransitDocumentTransactionRuleHelper_IN();

        ruleObjectList = new List(Types::Class);
        ruleExtObjectList = new List(Types::Class);

        transitDocumentRuleHelper.initTransitDocumentTransactionRuleList(ruleObjectList);
        if (ruleObjectList)
        {
            transitDocumentRuleHelper.defineRules(ruleObjectList);
        }

        //Rule extension
        transitDocumentRuleHelper.initTransitDocumentTransRuleExtList(ruleExtObjectList);
        if (ruleExtObjectList)
        {
            transitDocumentRuleHelper.defineRuleExtensions(ruleExtObjectList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransitDocumentTransactionRuleList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init transact document transaction rule list.
    /// </summary>
    /// <param name = "_ruleList">The list which is containing all rule objects.</param>
    delegate void initTransitDocumentTransactionRuleList(List _ruleList)
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>defineRules</Name>
				<Source><![CDATA[
    /// <summary>
    /// Define rules from the list.
    /// </summary>
    /// <param name = "_transitDocumentTransactionRuleList">The list of rule objects.</param>
    private void defineRules(List _transitDocumentTransactionRuleList)
    {
        RecordInsertList transactionRuleRecordList;
        ListEnumerator enumerator;
        TransitDocumentTransactionRuleObject_IN ruleObject;
        TransitDocumentTransactionRule_IN existingRule;
        TransitDocumentTransactionRule_IN rule;

        transactionRuleRecordList = new RecordInsertList(tableNum(TransitDocumentTransactionRule_IN));

        enumerator = _transitDocumentTransactionRuleList.getEnumerator();
        while (enumerator.moveNext())
        {
            ruleObject = enumerator.current();

            existingRule = TransitDocumentTransactionRule_IN::findRule(ruleObject.transactionType(), ruleObject.transitDocumentType().RecId);
            if (existingRule)
            {
                if (ruleObject.transitDocumentType().UseRuleExtension)
                {
                    if (existingRule.TransitAction != TransitDocumentTransitAction_IN::None
                        || existingRule.TransitOption != TransitDocumentTransitOption_IN::None)
                    {
                        ttsBegin;

                        existingRule.selectForUpdate(true);
                        existingRule.TransitAction          = TransitDocumentTransitAction_IN::None;
                        existingRule.TransitOption          = TransitDocumentTransitOption_IN::None;
                        existingRule.update();

                        ttsCommit;
                    }
                }
                else
                {
                    if (existingRule.TransitAction != ruleObject.transitAction()
                        || existingRule.TransitOption != ruleObject.transitOption())
                    {
                        ttsBegin;

                        existingRule.selectForUpdate(true);
                        existingRule.TransitAction          = ruleObject.transitAction();
                        existingRule.TransitOption          = ruleObject.transitOption();
                        existingRule.update();

                        ttsCommit;
                    }
                }
            }
            else
            {
                rule.initValue();
                rule.TransactionType        = ruleObject.transactionType();
                rule.TransitDocumentType    = ruleObject.transitDocumentType().RecId;
                if (ruleObject.transitDocumentType().UseRuleExtension == NoYes::No)
                {
                    rule.TransitAction          = ruleObject.transitAction();
                    rule.TransitOption          = ruleObject.transitOption();
                }
                transactionRuleRecordList.add(rule);
            }
        }

        ttsBegin;
        transactionRuleRecordList.insertDatabase();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defineRuleExtensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Define rule extensions from the list.
    /// </summary>
    /// <param name = "_transitDocumentTransRuleExtList">The list of rule extension objects.</param>
    private void defineRuleExtensions(List _transitDocumentTransRuleExtList)
    {
        RecordInsertList                        ruleExtensionRecordList;
        ListEnumerator                          enumerator;
        TransitDocumentTransRuleExtObject_IN    ruleExtensionObject;
        TransitDocumentTransactionRule_IN       sourceRule;
        TransitDocumentTransactionRule_IN       targetRule;
        TransitDocumentTransRuleExtension_IN    existingRuleExtension;
        TransitDocumentTransRuleExtension_IN    newRuleExtension;

        ruleExtensionRecordList = new RecordInsertList(tableNum(TransitDocumentTransRuleExtension_IN));

        enumerator = _transitDocumentTransRuleExtList.getEnumerator();
        while (enumerator.moveNext())
        {
            ruleExtensionObject = enumerator.current();

            sourceRule = TransitDocumentTransactionRule_IN::findRule(ruleExtensionObject.sourceTransactionType(), ruleExtensionObject.transitDocumentType().RecId);
            targetRule = TransitDocumentTransactionRule_IN::findRule(ruleExtensionObject.targetTransactionType(), ruleExtensionObject.transitDocumentType().RecId);

            if (ruleExtensionObject.transitDocumentType().UseRuleExtension
                && sourceRule && targetRule)
            {
                existingRuleExtension = TransitDocumentTransRuleExtension_IN::findBySourceAndTargetRule(sourceRule.RecId, targetRule.RecId);
                if (existingRuleExtension)
                {
                    //Delete the existing rule extension if transit action is none
                    if (ruleExtensionObject.transitAction() == TransitDocumentTransitAction_IN::None)
                    {
                        ttsBegin;

                        existingRuleExtension.selectForUpdate(true);
                        existingRuleExtension.delete();

                        ttsCommit;
                    }
                    else if (existingRuleExtension.TransitAction != ruleExtensionObject.transitAction()
                        || existingRuleExtension.TransitOption != ruleExtensionObject.transitOption())
                    {
                        ttsBegin;
                        //Update existing rule extension if action or option is different
                        existingRuleExtension.selectForUpdate(true);
                        existingRuleExtension.TransitAction = ruleExtensionObject.transitAction();
                        existingRuleExtension.TransitOption = ruleExtensionObject.transitOption();
                        existingRuleExtension.update();
                        ttsCommit;
                    }
                }
                else if (ruleExtensionObject.transitAction() != TransitDocumentTransitAction_IN::None)
                {
                    //Only insert rule extensio when transit action != None
                    newRuleExtension.initValue();
                    newRuleExtension.SourceRule = sourceRule.RecId;
                    newRuleExtension.TargetRule = targetRule.RecId;
                    newRuleExtension.TransitAction = ruleExtensionObject.transitAction();
                    newRuleExtension.TransitOption = ruleExtensionObject.transitOption();
                    ruleExtensionRecordList.add(newRuleExtension);
                }
            }
        }

        ttsBegin;
        ruleExtensionRecordList.insertDatabase();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxSolutionInitActionInfo</Name>
				<Source><![CDATA[
    public str getTaxSolutionInitActionInfo()
    {
        return "@TransitDocument:UpdateTransitDocumentData";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxSolutionMetadata</Name>
				<Source><![CDATA[
    public void initTaxSolutionMetadata(
        Name                _taxSolutionScopeName,
        ERSolutionVersionID _taxSolutionScopeVersion)
    {
        TransitDocumentTransactionRuleHelper_IN::initRule();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransitDocumentTransRuleExtList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init transit document transaction rule extension list.
    /// </summary>
    /// <param name = "_ruleList">The list which is containing all rule extension objects.</param>
    delegate void initTransitDocumentTransRuleExtList(List _ruleList)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransitDocumentTransRuleList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets transit document transaction rule list.
    /// </summary>
    /// <returns>The list which includes all rule objects.</returns>
    public static List getTransitDocumentTransRuleList()
    {
        List ruleList = new List(Types::Class);

        TransitDocumentTransactionRuleHelper_IN transitDocumentRuleHelper = new TransitDocumentTransactionRuleHelper_IN();

        transitDocumentRuleHelper.initTransitDocumentTransactionRuleList(ruleList);

        return ruleList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>