<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntentLetterCreateDataContract_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The data contract class for intent letter creating.
/// </summary>
[DataContract,
SysOperationGroup('PostingDate', "@SYS14475", '1', FormArrangeMethod::HorizontalFlushRight),
SysOperationGroup('Amount', "@SYS62867", '2', FormArrangeMethod::HorizontalFlushRight),
SysOperationGroup('Notes', "@SYS40182", '3', FormArrangeMethod::HorizontalFlushRight),
SysOperationGroup('Type', "@ExtendedItallianLocalization:LetterType", '4', FormArrangeMethod::HorizontalFlushRight),
SysOperationGroup('Validity', "@SYS29148", '5', FormArrangeMethod::HorizontalFlushRight),
SysOperationContractProcessing(classstr(IntentLetterCreateUIBuilder_IT))]
public class IntentLetterCreateDataContract_IT implements SysOperationValidatable
{
    public IntentLetterPostingDate_IT postingDate;
    public IntentLetterType_IT letterType;
    public FromDate fromDate;
    public ToDate toDate;
    public AmountMST amountMST;
    public Notes letterNotes;
    public str packedQuery;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmPostingDate</Name>
				<Source><![CDATA[
    [DataMember,
    SysOperationControlVisibility(true),
    SysOperationDisplayOrder('1'),
    SysOperationLabel("@SYS14475"),
    SysOperationGroupMember('PostingDate')]
    public IntentLetterPostingDate_IT parmPostingDate(IntentLetterPostingDate_IT _postingDate = postingDate)
    {
        postingDate = _postingDate;
        return postingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAmountMST</Name>
				<Source><![CDATA[
    [DataMember,
    SysOperationControlVisibility(true),
    SysOperationDisplayOrder('2'),
    SysOperationLabel("@SYS62867"),
    SysOperationGroupMember('Amount')]
    public AmountMST parmAmountMST(AmountMST _amountMST = amountMST)
    {
        amountMST = _amountMST;
        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLetterNotes</Name>
				<Source><![CDATA[
    [DataMember,
    SysOperationControlVisibility(true),
    SysOperationDisplayOrder('3'),
    SysOperationLabel("@SYS40182"),
    SysOperationGroupMember('Notes')]
    public Notes parmLetterNotes(Notes _letterNotes = letterNotes)
    {
        letterNotes = _letterNotes;
        return letterNotes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLetterType</Name>
				<Source><![CDATA[
    [DataMember,
    SysOperationControlVisibility(true),
    SysOperationDisplayOrder('4'),
    SysOperationLabel("@ExtendedItallianLocalization:LetterType"),
    SysOperationGroupMember('Type')]
    public IntentLetterType_IT parmLetterType(IntentLetterType_IT _letterType = letterType)
    {
        letterType = _letterType;
        return letterType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    [DataMember,
    SysOperationControlVisibility(true),
    SysOperationDisplayOrder('5'),
    SysOperationLabel("@ApplicationSuiteElectronicReportingIntegration:FromDate"),
    SysOperationGroupMember('Validity')]
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    [DataMember,
    SysOperationControlVisibility(true),
    SysOperationDisplayOrder('6'),
    SysOperationLabel("@ApplicationSuiteElectronicReportingIntegration:ToDate"),
    SysOperationGroupMember('Validity')]
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPackedQuery</Name>
				<Source><![CDATA[
    [DataMember,
    AifQueryType('_packedQuery', queryStr(VendorListBasic))]
    public str parmPackedQuery(str _packedQuery = packedQuery)
    {
        packedQuery = _packedQuery;

        return packedQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuery</Name>
				<Source><![CDATA[
    public Query getQuery()
    {
        return new Query(SysOperationHelper::base64Decode(packedQuery));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQuery</Name>
				<Source><![CDATA[
    public void setQuery(Query _query)
    {
        packedQuery = SysOperationHelper::base64Encode(_query.pack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes vendor query.
    /// </summary>
    public void initQuery()
    {
        Query newQuery = this.buildQuery();

        this.setQuery(newQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes vendor query.
    /// </summary>
    /// <returns>The query object.</returns>
    public Query buildQuery()
    {
        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tablenum(VendTable));

        qbds.addRange(fieldNum(VendTable, AccountNum));
        qbds.addRange(fieldNum(VendTable, VendGroup));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>