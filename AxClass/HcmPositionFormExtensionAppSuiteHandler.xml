<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmPositionFormExtensionAppSuiteHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the ApplicationSuite form extension events for the HcmPosition form.
/// </summary>
public static class HcmPositionFormExtensionAppSuiteHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>HcmPosition_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// An OnInitialized event handler for the HcmPosition.ExtensionAppSuite form extension.
    /// </summary>
    /// <param name="_sender">The instance of the HcmPosition form being initialized.</param>
    /// <param name="_e">The args for the event.</param>
    [FormEventHandler(formStr(HcmPosition), FormEventType::Initialized)]
    public static void HcmPosition_OnInitialized(xFormRun _sender, FormEventArgs _e)
    {
        // Hide the controls for retail essentials mode
        if (RetailDelegates::RetailSMBEnabled())
        {
            // Hide info parts: Skill
            RetailUtils::HidePart(_sender, identifierStr(PositionSkills));
        }

        boolean usingPersonnelActions = HcmSharedParameters::find().PersonnelActionPosition;

        if (usingPersonnelActions)
        {
            FormDataSource hcmPositionBudgetDefaultValue_ds = _sender.dataSource(formDataSourceStr(HcmPosition, HcmPositionBudgetDefaultValue)) as FormDataSource;
            FormDataSource hcmPositionBudgetAccountLine_ds = _sender.dataSource(formDataSourceStr(HcmPosition, HcmPositionBudgetAccountLine)) as FormDataSource;

            hcmPositionBudgetDefaultValue_ds.allowCreate(false);
            hcmPositionBudgetAccountLine_ds.allowCreate(false);
            hcmPositionBudgetDefaultValue_ds.allowEdit(false);
            hcmPositionBudgetAccountLine_ds.allowEdit(false);

            var budgetAccountLineActionPaneControl = _sender.design().controlName(formControlStr(HcmPosition, BudgetAccountLineActionPane)) as FormActionPaneControl;
            budgetAccountLineActionPaneControl.enabled(false);
        }

        DimensionEntryControl dimensionEntryControl = _sender.control(_sender.controlId(formControlStr(HcmPosition, DimensionEntryControl))) as DimensionEntryControl;
        dimensionEntryControl.parmCompany(curext());
        dimensionEntryControl.reactivate();


        FormRun positionForm = _sender as FormRun;

        if (positionForm)
        {
            FormGridControl defaultDimensionsGrid = positionForm.design().controlName(formControlStr(HcmPosition, PositionDefaultDimensions));
            FormTabPageControl dimensionGridTabPage = positionForm.design().controlName(formControlStr(HcmPosition, DimensionsGridTabPage));
            FormGroupControl budgetGroup = positionForm.design().controlName(formControlStr(HcmPosition, BudgetGroup));

            if (defaultDimensionsGrid && dimensionGridTabPage && budgetGroup)
            {
                dimensionGridTabPage.moveControl(budgetGroup.id(), defaultDimensionsGrid.id());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmPosition_controlsUpdating</Name>
				<Source><![CDATA[
    [SubscribesTo(formStr(HcmPosition), delegateStr(HcmPosition, controlsUpdating))]
    public static void HcmPosition_controlsUpdating(FormRun _formElement, SelectableDataArea _selectableDataArea)
    {
        DimensionEntryControl dimensionEntryControl = _formElement.control(_formElement.controlId(formControlStr(HcmPosition, DimensionEntryControl))) as DimensionEntryControl;
        dimensionEntryControl.parmCompany(_selectableDataArea);
        dimensionEntryControl.reactivate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmPosition_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// An OnActivated event handler for the HcmPosition data source of the HcmPosition.ExtensionAppSuite form extension.
    /// </summary>
    /// <param name="_sender">The HcmPosition data source being activated.</param>
    /// <param name="_e">The args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmPosition, HcmPosition), FormDataSourceEventType::Activated)]
    public static void HcmPosition_OnActivated(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormRun positionForm = _sender.formRun();
        boolean futureRecordsExist = HcmPositionFormExtensionAppSuiteHandler::checkFutureRecordsForBudgetDatasources(positionForm);

        // Let the position form know if it should display the future records message, if it wasn't already in that mode
        positionForm.parmShowFutureRecordsExistWarning(futureRecordsExist || positionForm.parmShowFutureRecordsExistWarning());
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmPositionBudgetDefaultValue_OnInitValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// An OnInitValue event handler for the HcmPositionBudgetDefaultValue data source of the HcmPosition.ExtensionAppSuite form extension.
    /// </summary>
    /// <param name="_sender">The HcmPositionBudgetDefaultValue data source that the event was raised from.</param>
    /// <param name="_e">The args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmPosition, HcmPositionBudgetDefaultValue), FormDataSourceEventType::InitValue)]
    public static void HcmPositionBudgetDefaultValue_OnInitValue(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormDataSource hcmPosition_ds = _sender.formRun().dataSource(formDataSourceStr(HcmPosition, HcmPosition)) as FormDataSource;
        HcmPosition hcmPosition = hcmPosition_ds.cursor();

        HcmPositionBudgetDefaultValue hcmPositionBudgetDefaultValue = _sender.cursor();

        hcmPositionBudgetDefaultValue.Position = hcmPosition.RecId;
        hcmPositionBudgetDefaultValue.LegalEntity = CompanyInfo::findDataArea(curext()).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmPositionBudgetDefaultValue_OnQueryExecuting</Name>
				<Source><![CDATA[
    /// <summary>
    /// An OnQueryExecuting event handler for the HcmPositionBudgetDefaultValue data source of the HcmPosition.ExtensionAppSuite form extension.
    /// </summary>
    /// <param name="_sender">The HcmPositionBudgetDefaultValue data source that the event was raised from.</param>
    /// <param name="_e">The args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmPosition, HcmPositionBudgetDefaultValue), FormDataSourceEventType::QueryExecuting)]
    public static void HcmPositionBudgetDefaultValue_OnQueryExecuting(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        RefRecId selectedDataAreaRecId = CompanyInfo::findDataArea(curext()).RecId;
        QueryBuildRange rangeBudgetDefaultLegalEntity;

        rangeBudgetDefaultLegalEntity = SysQuery::findOrCreateRange(_sender.query().dataSourceTable(tablenum(HcmPositionBudgetDefaultValue)), fieldnum(HcmPositionBudgetDefaultValue, LegalEntity));
        rangeBudgetDefaultLegalEntity.value(queryValue(selectedDataAreaRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmPositionBudgetAccountLine_OnInitValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// An OnInitValue event handler for the HcmPositionBudgetAccountLine data source of the HcmPosition.ExtensionAppSuite form extension.
    /// </summary>
    /// <param name="_sender">The HcmPositionBudgetAccountLine form data source.</param>
    /// <param name="_e">The args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmPosition, HcmPositionBudgetAccountLine), FormDataSourceEventType::InitValue)]
    public static void HcmPositionBudgetAccountLine_OnInitValue(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        RefRecId selectedDataAreaRecId = CompanyInfo::findDataArea(curext()).RecId;
        HcmPositionBudgetAccountLine hcmPositionBudgetAccountLine = _sender.cursor();

        hcmPositionBudgetAccountLine.LegalEntity = selectedDataAreaRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BudgetPurposeType_OnValidated</Name>
				<Source><![CDATA[
    /// <summary>
    /// An OnValidated event handler for the HcmPositionBudgetAccountLine data source of the HcmPosition.ExtensionAppSuite form extension.
    /// </summary>
    /// <param name="_sender">The HcmPositionBudgetAccountLine form data source.</param>
    /// <param name="_e">The args for the event.</param>
    [FormDataFieldEventHandler(formDataFieldStr(HcmPosition, HcmPositionBudgetAccountLine, BudgetPurposeType), FormDataFieldEventType::Validated)]
    public static void BudgetPurposeType_OnValidated(FormDataObject _sender, FormDataFieldEventArgs _e)
    {
        utcdatetime validFrom;

        if (_sender.datasource().queryRun().query().getValidTimeStateQueryType() == ValidTimeStateQueryType::Current)
        {
            validFrom = DateTimeUtil::utcNow();
        }
        else if (_sender.datasource().queryRun().query().getValidTimeStateQueryType() == ValidTimeStateQueryType::AsOf)
        {
            validFrom = _sender.datasource().queryRun().query().validTimeStateAsOfDateTime();
        }

        HcmPositionBudgetAccountLine hcmPositionBudgetAccountLine = _sender.datasource().cursor();
        if (HcmPositionBudgetAccountLine::findByPositionLEBudgetPurposeType(hcmPositionBudgetAccountLine.Position, hcmPositionBudgetAccountLine.LegalEntity, hcmPositionBudgetAccountLine.BudgetPurposeType, validFrom).RecId)
        {
            throw error("@Workforce:TheBudgetPurposeTypeIsAlreadyInUse");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmPositionBudgetAccountLine_OnQueryExecuting</Name>
				<Source><![CDATA[
    /// <summary>
    /// An OnQueryExecuting event handler for the HcmPositionBudgetAccountLine data source of the HcmPosition.ExtensionAppSuite form extension.
    /// </summary>
    /// <param name="_sender">The HcmPositionBudgetAccountLine form data source.</param>
    /// <param name="_e">The args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmPosition, HcmPositionBudgetAccountLine), FormDataSourceEventType::QueryExecuting)]
    public static void HcmPositionBudgetAccountLine_OnQueryExecuting(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        RefRecId selectedDataAreaRecId = CompanyInfo::findDataArea(curext()).RecId;
        QueryBuildRange rangeBudgetAccountLineLegalEntity;

        rangeBudgetAccountLineLegalEntity = SysQuery::findOrCreateRange(_sender.query().dataSourceTable(tablenum(HcmPositionBudgetAccountLine)), fieldnum(HcmPositionBudgetAccountLine, LegalEntity));
        rangeBudgetAccountLineLegalEntity.value(queryValue(selectedDataAreaRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>LegalEntity_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// An OnModified event handler for the LegalEntity form control of the HcmPosition.ExtensionAppSuite form extension.
    /// </summary>
    /// <param name="_sender">The LegalEntity control being modified.</param>
    /// <param name="_e">The args for the event.</param>
    [FormControlEventHandler(formControlStr(HcmPosition, LegalEntity), FormControlEventType::Modified)]
    public static void LegalEntity_OnModified(FormControl _sender, FormControlEventArgs e)
    {
        boolean futureRecordsExist;
        HcmPositionBudgetDefaultValue defaultBudgetDefaultReset;
        HcmPositionBudgetAccountLine defaultBudgetAccountLineReset;
        RefRecId selectedDataAreaRecId = CompanyInfo::findDataArea(curext()).RecId;

        FormRun positionForm = _sender.formRun();
        HcmPosition hcmPosition = positionForm.dataSource(formDataSourceStr(HcmPosition, HcmPosition)).cursor();

        defaultBudgetDefaultReset = HcmPositionBudgetDefaultValue::findByPositionLegalEntity(hcmPosition.RecId, selectedDataAreaRecId);
        if (!defaultBudgetDefaultReset)
        {
            defaultBudgetDefaultReset.Position = hcmPosition.RecId;
            defaultBudgetDefaultReset.LegalEntity = selectedDataAreaRecId;
        }

        // Reset the datasource so it knows to do an insert vs. update based on new LE choice
        FormDataSource hcmPositionBudgetDefaultValue_ds = positionForm.dataSource(formDataSourceStr(HcmPosition, HcmPositionBudgetDefaultValue)) as FormDataSource;
        HcmPositionBudgetDefaultValue hcmPositionBudgetDefaultValue = hcmPositionBudgetDefaultValue_ds.cursor();
        hcmPositionBudgetDefaultValue.data(defaultBudgetDefaultReset);
        hcmPositionBudgetDefaultValue_ds.executeQuery();

        defaultBudgetAccountLineReset = HcmPositionBudgetAccountLine::findByPositionLegalEntity(hcmPosition.RecId, selectedDataAreaRecId);
        if (!defaultBudgetAccountLineReset)
        {
            defaultBudgetAccountLineReset.Position = hcmPosition.RecId;
            defaultBudgetAccountLineReset.LegalEntity = selectedDataAreaRecId;
        }

        // Reset the datasource so it knows to do an insert vs. update based on new LE choice
        FormDataSource hcmPositionBudgetAccountLine_ds = positionForm.dataSource(formDataSourceStr(HcmPosition, HcmPositionBudgetAccountLine)) as FormDataSource;
        HcmPositionBudgetAccountLine hcmPositionBudgetAccountLine = hcmPositionBudgetAccountLine_ds.cursor();
        hcmPositionBudgetAccountLine.data(defaultBudgetDefaultReset);
        hcmPositionBudgetAccountLine_ds.executeQuery();

        futureRecordsExist = HcmPositionFormExtensionAppSuiteHandler::checkFutureRecordsForBudgetDatasources(positionForm);

        // Let the position form know if it should display the future records message, if it wasn't already in that mode
        positionForm.parmShowFutureRecordsExistWarning(futureRecordsExist || positionForm.parmShowFutureRecordsExistWarning());
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmPosition_dateEffectivePaneControllerUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// An event handler for the dateEffectivePaneControllerUpdated event raised by the HcmPosition form which
    /// indicates that its date effective pane controller has been updated.
    /// </summary>
    /// <param name="_formElement">The form instance that raised the event.</param>
    /// <param name="_isUpdatedToCurrent">True indicates that the date effective pane controller has been switched to the
    /// current datetime value; otherwise the _asOfDateTime is used.</param>
    /// <param name="_asOfDateTime">The effective datetime value used to query date effective tables.</param>
    [SubscribesTo(formStr(HcmPosition), delegateStr(HcmPosition, dateEffectivePaneControllerUpdated))]
    public static void HcmPosition_dateEffectivePaneControllerUpdated(FormRun _formElement, boolean _isUpdatedToCurrent, utcdatetime _asOfDateTime)
    {
        FormDataSource hcmPositionBudgetDefaultValue_ds = _formElement.dataSource(formDataSourceStr(HcmPosition, HcmPositionBudgetDefaultValue)) as FormDataSource;
        FormDataSource hcmPositionBudgetAccountLine_ds = _formElement.dataSource(formDataSourceStr(HcmPosition, HcmPositionBudgetAccountLine)) as FormDataSource;

        if (_isUpdatedToCurrent)
        {
            hcmPositionBudgetDefaultValue_ds.validTimeStateAutoQuery(ValidTimeStateAutoQuery::AsOfDate);
            hcmPositionBudgetDefaultValue_ds.query().resetValidTimeStateQueryType();

            hcmPositionBudgetAccountLine_ds.validTimeStateAutoQuery(ValidTimeStateAutoQuery::AsOfDate);
            hcmPositionBudgetAccountLine_ds.query().resetValidTimeStateQueryType();
        }
        else
        {
            hcmPositionBudgetDefaultValue_ds.validTimeStateAutoQuery(ValidTimeStateAutoQuery::AsOfDate);
            hcmPositionBudgetDefaultValue_ds.query().validTimeStateAsOfDateTime(_asOfDateTime);

            hcmPositionBudgetAccountLine_ds.validTimeStateAutoQuery(ValidTimeStateAutoQuery::AsOfDate);
            hcmPositionBudgetAccountLine_ds.query().validTimeStateAsOfDateTime(_asOfDateTime);
        }

        hcmPositionBudgetDefaultValue_ds.executeQuery();
        hcmPositionBudgetAccountLine_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFutureRecordsForBudgetDatasources</Name>
				<Source><![CDATA[
    private static boolean checkFutureRecordsForBudgetDatasources(FormRun _positionForm)
    {
        HcmPositionBudgetDefaultValue   positionBudgetDefaultValue;
        HcmPositionBudgetAccountLine    positionBudgetAccountLine;
        utcdatetime                     asOfDateTime;
        utcdatetime                     maxDateValue = DateTimeUtil::maxValue();
        boolean                         futureRecordsExist;
        boolean                         showFutureRecordsWarning;

        asOfDateTime = _positionForm.getAsOfDateTimeFromPositionQuery();
        boolean usingPersonnelActions = HcmSharedParameters::find().PersonnelActionPosition;
        RefRecId selectedDataAreaRecId = CompanyInfo::findDataArea(curext()).RecId;
        FormDataSource hcmPosition_ds = _positionForm.dataSource(formDataSourceStr(HcmPosition, HcmPosition)) as FormDataSource;
        HcmPosition hcmPosition = hcmPosition_ds.cursor();

        select firstonly ValidTimeState(asOfDateTime, maxDateValue) RecId, ValidFrom from positionBudgetDefaultValue
                order by positionBudgetDefaultValue.ValidFrom desc
                where positionBudgetDefaultValue.Position == hcmPosition.RecId &&
                        positionBudgetDefaultValue.LegalEntity == selectedDataAreaRecId;

        if (positionBudgetDefaultValue.RecId && positionBudgetDefaultValue.ValidFrom > asOfDateTime)
        {
            showFutureRecordsWarning = true;
            futureRecordsExist = true;
        }
        else
        {
            futureRecordsExist = false;
        }

        FormDataSource hcmPositionBudgetDefaultValue_ds = _positionForm.dataSource(formDataSourceStr(HcmPosition, HcmPositionBudgetDefaultValue)) as FormDataSource;
        hcmPositionBudgetDefaultValue_ds.allowEdit(!futureRecordsExist && !usingPersonnelActions);

        select firstonly ValidTimeState(asOfDateTime, maxDateValue) RecId, ValidFrom from positionBudgetAccountLine
                order by positionBudgetAccountLine.ValidFrom desc
                where positionBudgetAccountLine.Position == hcmPosition.RecId &&
                        positionBudgetAccountLine.LegalEntity == selectedDataAreaRecId;

        if (positionBudgetAccountLine.RecId && positionBudgetAccountLine.ValidFrom > asOfDateTime)
        {
            showFutureRecordsWarning = true;
            futureRecordsExist = true;
        }
        else
        {
            futureRecordsExist = false;
        }

        FormDataSource hcmPositionBudgetAccountLine_ds = _positionForm.dataSource(formDataSourceStr(HcmPosition, HcmPositionBudgetAccountLine)) as FormDataSource;
        hcmPositionBudgetAccountLine_ds.allowEdit(!futureRecordsExist && !usingPersonnelActions);

        return showFutureRecordsWarning;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>