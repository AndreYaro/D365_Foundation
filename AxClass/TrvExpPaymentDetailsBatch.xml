<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvExpPaymentDetailsBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Updates payment information for posted expenses.
/// </summary>
class TrvExpPaymentDetailsBatch extends RunBaseBatch implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Caption for the expense payment dialog.
    /// </summary>
    /// <returns>
    /// Caption for the dialog.
    /// </returns>
    public ClassDescription caption()
    {
        return "@Expense:PaymentInfoUpdate";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>TrvExpPaymentDetailsBatch</c> class and calls the run operation.
    /// </summary>
    /// <param name = "_args">
    /// Caller details.
    /// </param>
    public static void main(Args _args)
    {
        TrvExpPaymentDetailsBatch paymentDetailsBatch = new TrvExpPaymentDetailsBatch();

        if (paymentDetailsBatch.prompt())
        {
            paymentDetailsBatch.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the batch job will be run with the account of the user who created the job.
    /// </summary>
    /// <returns>
    /// True if the batch job is run on the AOS server as the submitting user account; otherwise, false.
    /// </returns>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
    
        try
        {
            this.updateExpensePaymentInformation();
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() <= #RetryNum)
            {
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExpensePaymentInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the expense payment information if the payment is completed.
    /// </summary>
    private void updateExpensePaymentInformation()
    {
        VendTrans               vendTrans;
        TrvExpPaymentDetails    expensePaymentDetails;
        
        AccountingDistribution  expenseDistribution;
        TrvExpTrans             expense;
        
        LedgerJournalTrans      ledgerJournalTrans;
        Map                     paymentsToDelete = new Map(Types::Int64, Types::AnyType);

        ttsbegin;

        // Update expense payment when these conditions are met.
        // 1) Vendor transaction invoice id matches and vendor transaction last settle voucher is not equal.
        // 2) Expense voucher matches with vendor transaction voucher.
        // 3) Expense distribution accounting date matches with vendor transaction transaction date.
        while select forupdate expensePaymentDetails
            join vendTrans
                where vendTrans.Invoice == expensePaymentDetails.InvoiceId
                   && vendTrans.LastSettleVoucher != expensePaymentDetails.PaymentVoucher
            join expense
                where expense.RecId == expensePaymentDetails.TrvExpTrans
                   && expense.Voucher == vendTrans.Voucher
            exists join expenseDistribution
                where expenseDistribution.SourceDocumentLine == expense.SourceDocumentLine
                   && expenseDistribution.AccountingDate == vendTrans.TransDate
        {   
			select firstonly BankChequeNum from ledgerJournalTrans
				where ledgerJournalTrans.VendTransId == vendTrans.RecId;
            
            if (!expensePaymentDetails.PaymentVoucher)
            {
                expensePaymentDetails.PaymentVoucher = vendTrans.LastSettleVoucher;
                expensePaymentDetails.PaymentDate = vendTrans.LastSettleDate;
                expensePaymentDetails.CheckNum = ledgerJournalTrans.BankChequeNum;
                expensePaymentDetails.PaymentStatus = TrvPaymentStatus::Completed;
                expensePaymentDetails.update();
            }
            else if (!vendTrans.LastSettleVoucher && expensePaymentDetails.PaymentVoucher)
            {
                //Ensures that when settlement is reversed, corresponding payment details are cleansed.
                TrvExpTable trvExpTable = TrvExpTable::findRecId(expensePaymentDetails.TrvExpTable, true);

                if (trvExpTable.PaymentVoucher == expensePaymentDetails.PaymentVoucher)
                {
                    trvExpTable.PaymentVoucher = '';
                    trvExpTable.PaymentDate = dateNull();
                    trvExpTable.update();
                }

                RecId key = expensePaymentDetails.TrvExpTrans;
                TrvExpTransPaymentsContainer payments;
                if (paymentsToDelete.exists(expensePaymentDetails.TrvExpTrans))
                {                   
                   payments =  paymentsToDelete.lookup(key);
                }
                else 
                {
                    payments = TrvExpTransPaymentsContainer::construct(key);
                    paymentsToDelete.add(key, payments);
                }

                payments.addPaymentRecord(expensePaymentDetails);
            }
            else
            {
                TrvExpPaymentDetails	expensePaymentDetailsRef;

                select firstonly RecId from expensePaymentDetailsRef
                    where expensePaymentDetailsRef.PaymentVoucher == vendTrans.LastSettleVoucher
                    && expensePaymentDetailsRef.TrvExpTrans == expensePaymentDetails.TrvExpTrans;

                if (!expensePaymentDetailsRef)
                {                    
                    expensePaymentDetailsRef.data(expensePaymentDetails);
                    expensePaymentDetailsRef.PaymentVoucher = vendTrans.LastSettleVoucher;
                    expensePaymentDetailsRef.PaymentDate = vendTrans.LastSettleDate;
                    expensePaymentDetailsRef.CheckNum = ledgerJournalTrans.BankChequeNum;
                    expensePaymentDetailsRef.PaymentStatus = TrvPaymentStatus::Completed;
                    expensePaymentDetailsRef.insert();
                }
            }
        }        

        MapIterator payments = new MapIterator(paymentsToDelete);
        while (payments.more())
        {
            payments.value().reverseSettlements();
            payments.next();
        }
        
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns true.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    This method must be in this class because it is called from the <c>DialogRunbase</c> class.
    /// </remarks>
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// True if the class is designed for executing the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>