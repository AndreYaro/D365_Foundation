<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkCreateSortedInventoryPicking</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class contains logic for the sorted inventory picking work creation process.
/// </summary>
final internal class WHSWorkCreateSortedInventoryPicking extends WHSWorkCreate
{
    private WHSWorkCreateId         workCreateId;
    private WHSOutboundSortPosition sortPosition;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>combineLikeWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Go through any work headers created and combine their final put lines if we can.
    /// </summary>
    private void combineLikeWork()
    {
        WHSWorkTable        workTable;
        WHSWorkLine         initialPickLine;
    
        ttsBegin;
    
        while select WorkId from workTable
            where workTable.WorkBuildId     == workCreateId
            &&    workTable.WorkTransType   == WHSWorkTransType::SortedInventoryPicking
        {
            LineNum finalPutLineNum = this.determineFirstPutLineToGroup(workTable.WorkId);

            if (finalPutLineNum)
            {
                WHSWorkLine workLine;

                // Delete the workLines for the put lines after finalPutWorkLine
                delete_from workLine
                    where workLine.WorkId      == workTable.WorkId
                    &&    workLine.WorkType    == WHSWorkType::Put
                    &&    workLine.LineNum      > finalPutLineNum;
    
                initialPickLine = WHSWorkLine::firstOpenOrInProcessPickLine(workTable.WorkId);

                workLine = WHSWorkLine::find(workTable.WorkId, finalPutLineNum, true);
                workLine.InventDimId        = initialPickLine.inventDimId;
                workLine.InventQtyRemain    = initialPickLine.InventQtyRemain;
                workLine.InventQtyWork      = initialPickLine.InventQtyWork;
                workLine.QtyRemain          = initialPickLine.QtyRemain;
                workLine.QtyWork            = initialPickLine.QtyWork;
                workLine.UnitId             = initialPickLine.UnitId;
                workLine.ItemId             = initialPickLine.ItemId;
                workLine.LoadId             = initialPickLine.LoadId;
                workLine.ShipmentId         = initialPickLine.ShipmentId;
                workLine.OrderNum           = initialPickLine.OrderNum;

                if (workLine.InventTransId != initialPickLine.InventTransId)
                {
                    workLine.InventTransId      = '';
                }
                workLine.update();
            }
        }
    
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineFirstPutLineToGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the first final put work line if lines can be combined.
    /// </summary>
    /// <param name = "_workId">
    /// The Id of the sorted inventory picking work being evaluated.
    /// </param>
    /// <returns>
    /// Returns the first final put work line number if lines can be combined; otherwise, returns 0.
    /// </returns>
    private LineNum determineFirstPutLineToGroup(WHSWorkId _workId)
    {
        LineNum             finalPutLineNum;
        WHSWorkLine         workLine;
        WMSLocationId       putLocationId;
        boolean             groupLines;
        int                 numOfPutLines;
        boolean             isPutLocationSet;

        // Iterate through final put locations and make sure we can combine them based on location.
        while select WMSLocationId, WorkType, LineNum from workLine
            order by LineNum desc
            where workLine.WorkId   == _workId
            &&    workLine.WorkType != WHSWorkType::Print
            &&    workLine.WorkType != WHSWorkType::Custom
        {
            if (!isPutLocationSet)
            {
                putLocationId       = workLine.WMSLocationId;
                isPutLocationSet    = true;
            }
            else if (workLine.WorkType == WHSWorkType::Pick)
            {
                groupLines = true;
                break;
            }
            else if (putLocationId != workLine.WMSLocationId)
            {
                break;
            }
            
            finalPutLineNum = workLine.LineNum;
            numOfPutLines++;
        }

        return groupLines && numOfPutLines > 1 ? finalPutLineNum : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the temporary work lines for sorted inventory work.
    /// </summary>
    public void createTempTable()
    {
        using (var activityContext = this.instrumentationLogger().outboundSortingActivities().createTmpWorkLines())
        {
            this.instrumentationLogger().logRecordInformation(sortPosition);

            WHSTmpWorkLine                  findTmpWorkLine;
            LineNum                         tmpLineNum;
            InventQty                       locInventQty;
            WHSOutboundSortPositionTrans    sortPositionTrans;
            WHSShipmentTable                shipmentTable;
            WHSLoadLine                     loadLine;
    
            ttsBegin;
    
            if (!workTransType)
            {
                workTransType = WHSWorkTransType::SortedInventoryPicking;
            }
    
            findTmpWorkLine.setTmp();

            // Set target license plate to sort position license plate.
            this.parmTargetLicensePlateId(sortPosition.LicensePlateId);
    
            startLocationId  = sortPosition.WMSLocationId;
            inventLocationId = sortPosition.inventLocationId;
    
            while select ItemId, InventDimId, UnitSymbol, ProductQuantity from sortPositionTrans
                where sortPositionTrans.OutboundSortPosition == sortPosition.RecId
                    join InventDimId, Qty, InventTransId, LoadId, ItemId, PackingQty, OrderNum, RecId from loadLine
                        where loadLine.RecId == sortPositionTrans.LoadLine
                        join ShipmentId, LoadId, WaveId, CarrierCode, CarrierServiceCode, ModeCode from shipmentTable
                            where shipmentTable.ShipmentId == loadLine.ShipmentId
            {
                tmpWorkLine.clear();
                tmpLineNum++;
                tmpWorkLine.InventBatchId           = inventBatchId;
                tmpWorkLine.WorkType                = WHSWorkType::Put;
                tmpWorkLine.OriginType              = WHSOriginType::SortedInventory;
                tmpWorkLine.WorkCreateId            = workCreateId;
                tmpWorkLine.WorkTransType           = workTransType;
                tmpWorkLine.WaveId                  = shipmentTable.WaveId;
                tmpWorkLine.LoadId                  = shipmentTable.LoadId;
                tmpWorkLine.ShipmentId              = shipmentTable.ShipmentId;
                tmpWorkLine.RefTableId              = tableNum(WHSLoadLine);
                tmpWorkLine.StartLocationId         = startLocationId;
                tmpWorkLine.CarrierCode             = shipmentTable.CarrierCode;
                tmpWorkLine.CarrierServiceCode      = shipmentTable.CarrierServiceCode;
                tmpWorkLine.ModeCode                = shipmentTable.ModeCode;
                tmpWorkLine.InventLocationId        = inventLocationId;
                tmpWorkLine.LineNum                 = tmpLineNum;
    
                workInventDim                   = InventDim::find(loadLine.InventDimId);
                workInventDim.InventLocationId  = inventLocationId;
                workInventDim.InventSiteId      = InventLocation::find(inventLocationId).InventSiteId;
                workInventDim.clearLocationAndBelowDim(sortPositionTrans.ItemId);
                workInventDim                   = InventDim::findOrCreate(workInventDim);

                locInventQty = WHSCatchWeightHelper::convertInventQuantity(
                                                        loadLine.ItemId,
                                                        sortPositionTrans.UnitSymbol,
                                                        sortPositionTrans.ProductQuantity,
                                                        sortPositionTrans.InventDimId);
    
                // Determine if we need to group with another tmpWorkLine.
                findTmpWorkLine.setTmpData(tmpWorkLine);
    
                select firstonly findTmpWorkLine
                    where findTmpWorkLine.InventTransId == loadLine.InventTransId
                    &&    findTmpWorkLine.InventDimId   == workInventDim.InventDimId;
    
                if (findTmpWorkLine)
                {
                    tmpWorkLine.data(findTmpWorkLine);
    
                    tmpWorkLine.InventQty += locInventQty;
                    tmpWorkLine.update();
                }
                else
                {
                    if (!tmpWorkLine.OriginRefId)
                    {
                        tmpWorkLine.OriginRefId = loadLine.LoadId;
                    }
    
                    tmpWorkLine.RefRecId            = loadLine.RecId;
                    tmpWorkLine.InventTransId       = loadLine.InventTransId;
                    tmpWorkLine.ItemId              = loadLine.ItemId;
                    tmpWorkLine.LicensePlateId      = sortPosition.LicensePlateId;
                    tmpWorkLine.LoadLineRefRecId    = 0;
                    tmpWorkLine.PackingQty          = loadLine.PackingQty;
                    tmpWorkLine.OrderNum            = loadLine.OrderNum;
                    tmpWorkLine.InventDimId         = workInventDim.InventDimId;
                    this.createTempLine(tmpWorkLine, locInventQty);
                }
            }
    
            ttsCommit;

            this.instrumentationLogger().outboundSortingActivities().createdTmpWorkLines(activityContext, tmpLineNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLocationDirective</Name>
				<Source><![CDATA[
    protected WHSLocationDirective createLocationDirective(WHSTmpWorkLine _tmpWorkLine)
    {
        WHSLocationDirective locationDirective;

        locationDirective = super(_tmpWorkLine);

        locationDirective.parmIsFinalPutWorkLine(true);

        return locationDirective;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(Common _common, WHSWorkCreateId _workCreateId = '')
    {
        sortPosition = _common;
    
        workCreateId = _workCreateId ? _workCreateId : NumberSeq::newGetNum(WHSParameters::numRefWHSWorkCreateId()).num();
    
        super(sortPosition, workCreateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreateWorkInventTransWithTargetLP</Name>
				<Source><![CDATA[
    public boolean parmCreateWorkInventTransWithTargetLP(boolean _createWorkInventTransWithTargetLP = createWorkInventTransWithTargetLP)
    {
        // We always want to reserve at the license plate level for sorted inventory picking work.
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkCreateId</Name>
				<Source><![CDATA[
    public WHSWorkCreateId parmWorkCreateId(WHSWorkCreateId _workCreateId = workCreateId)
    {
        workCreateId = _workCreateId;
    
        return workCreateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static WHSWorkCreateSortedInventoryPicking construct(Common _common)
    {
        return new WHSWorkCreateSortedInventoryPicking(_common);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTempTable</Name>
				<Source><![CDATA[
    public WHSWorkBuildId processTempTable()
    {
        WHSWorkBuildId workBuildId = super();

        // Combine final put lines of any sorted inventory work.
        this.combineLikeWork();

        this.updateSortTransWithWorkLineReference(workBuildId);
        
        return workBuildId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSortTransWithWorkLineReference</Name>
				<Source><![CDATA[
    private void updateSortTransWithWorkLineReference(WHSWorkBuildId _workBuildId)
    {
        WHSWorkTable        workTable;
        WHSWorkLine         workLine;
        
        select firstonly workLine
            order by workLine.LineNum desc
            where workLine.WorkType == WHSWorkType::Put
                && workLine.WorkStatus != WHSWorkStatus::Cancelled
                && workLine.WorkStatus != WHSWorkStatus::Closed
            exists join workTable   
                where  workTable.WorkId        == workLine.WorkId
                    && workTable.WorkBuildId   == _workBuildId
                    && workTable.WorkTransType == WHSWorkTransType::SortedInventoryPicking;
        
        if (workLine)
        {
            this.updateSortTrans(workLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSortTrans</Name>
				<Source><![CDATA[
    private void updateSortTrans(WHSWorkLine _workLine)
    {
        WHSOutboundSortPositionTrans    sortPositionTrans;
        
        ttsbegin;

        while select forupdate sortPositionTrans
            where sortPositionTrans.OutboundSortPosition == sortPosition.RecId
        {
            sortPositionTrans.WorkLine = _workLine.RecId;
            sortPositionTrans.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>