<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBSubAssessmentAdjustmentCreator_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Complement/restitution adjustment for E111/E220 SPED Fiscal records creating class.
/// </summary>
public class FBSubAssessmentAdjustmentCreator_BR
{
    protected FBBookingPeriod_BR fbBookingPeriod;
    protected FBSubAssessmentCalculatorICMSST_BR calculator;

    protected FiscalEstablishment_BR fiscalEstablishment;
    protected FBParametersPerState_BR fiscalBooksParametersPerState;

    protected FBGeneralAdjustmentCodeICMS_BR generalAdjustmentCode;
    protected FBGeneralAdjustmentCodeLedger_BR generalAdjustmentCodeLedger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and posts general ICMS* adjustment for restitution/complement amount.
    /// </summary>
    public void createAdjustment()
    {
        fiscalEstablishment = fbBookingPeriod.fiscalEstablishment();
        fiscalBooksParametersPerState = FBParametersPerState_BR::find(fiscalEstablishment.postalAddress());

        if (!fbBookingPeriod || !fiscalEstablishment || !fiscalBooksParametersPerState)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        if (!calculator)
        {
            calculator = FBSubAssessmentCalculatorICMSST_BR::construct();
            calculator.parmFBBookingPeriod(fbBookingPeriod);
            calculator.parmIsRetail(fiscalBooksParametersPerState.IsRetailCompany);
            calculator.parmSubTaxAssessment(fiscalBooksParametersPerState.FBSubTaxAssessment_BR);
            calculator.calculate();
        }

        if (!calculator.getDebitAdjustments())
        {
            warning("@FiscalBooks_SpedFiscal:ValidateNoOutgoingFDWithICMSST");
            return;
        }

        if (!calculator.getBalance())
        {
            warning("@FiscalBooks_SpedFiscal:ValidateZeroBalance");
            return;
        }

        generalAdjustmentCode = FBGeneralAdjustmentCode_BR::find(
            calculator.getBalance() > 0 ?
            fiscalBooksParametersPerState.ICMSGeneralAdjustmentCodeComplementE220 :
            fiscalBooksParametersPerState.ICMSGeneralAdjustmentCodeRestitutionE111) as FBGeneralAdjustmentCodeICMS_BR;

        if (!generalAdjustmentCode)
        {
            error("@FiscalBooks_SpedFiscal:ValidateNoAdjustmentCodeForRestitutionComplement");
            return;
        }

        select firstonly generalAdjustmentCodeLedger
            where generalAdjustmentCodeLedger.Company == curext()
                && generalAdjustmentCodeLedger.FBGeneralAdjustmentCode_BR == generalAdjustmentCode.RecId;

        if (!generalAdjustmentCodeLedger)
        {
            error("@FiscalBooks_SpedFiscal:ValidateNoPostingProfileForAdjCodeForRestitutionComplement");
            return;
        }

        ttsBegin;
        LedgerJournalTable journalTable = this.createLedgerJournalTable();
        LedgerJournalTrans journalLine = this.createLedgerJournalTrans(journalTable, abs(calculator.getBalance()));
        this.postJournal(journalTable);
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerJournalTable</Name>
				<Source><![CDATA[
    private LedgerJournalTable createLedgerJournalTable()
    {
        LedgerJournalTable journalTable;

        journalTable.initValue();
        journalTable.initFromLedgerJournalName(fiscalBooksParametersPerState.SubTaxAssesmentLedgerJournalNameId);
        journalTable.JournalNum = NumberSeq::newGetNum(LedgerParameters::numRefJournalNum()).num();

        journalTable.write();

        return journalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerJournalTrans</Name>
				<Source><![CDATA[
    private LedgerJournalTrans createLedgerJournalTrans(LedgerJournalTable _journalTable, AmountMST _amount)
    {
        FBLedgerJournalEngine_TaxAssessAdj_BR ledgerJournalEngine = new FBLedgerJournalEngine_TaxAssessAdj_BR();
        ledgerJournalEngine.ledgerJournalTable(_journalTable);
        ledgerJournalEngine.newJournalActive(_journalTable);

        LedgerJournalTrans journalLine;

        journalLine.initValue();
        ledgerJournalEngine.initValue(journalLine);
        ledgerJournalEngine.active(journalLine);

        journalLine.LineNum         = 1;
        journalLine.Company         = fiscalEstablishment.company();
        journalLine.TransDate        = fbBookingPeriod.periodTo();
        ledgerJournalEngine.transDateModified(journalLine);

        journalLine.TaxCode         = generalAdjustmentCodeLedger.TaxCode;
        LedgerDimensionAccount offsetLedgerDimension       = generalAdjustmentCodeLedger.LedgerDimension;
        journalLine.OffsetCompany   = journalLine.Company;

        LedgerDimensionAccount ledgerDimension;
        if (journalLine.TaxCode)
        {
            ledgerDimension = TaxLedgerAccountGroup::accountLedgerDimension(journalLine.TaxCode, TaxDirection::IncomingTax);
        }

        journalLine.LedgerDimension          = FBLedgerJournalTrans_FiscalBooks_BR::getLedgerDimension(ledgerDimension, journalLine, fiscalEstablishment);
        ledgerJournalEngine.accountModified(journalLine);
        journalLine.OffsetLedgerDimension    = FBLedgerJournalTrans_FiscalBooks_BR::getLedgerDimension(offsetLedgerDimension, journalLine, fiscalEstablishment);
        ledgerJournalEngine.offsetAccountModified(journalLine);
        journalLine.Txt = generalAdjustmentCode.Description;

        FBLedgerJournalTrans_FiscalBooks_BR journalLineFiscalBooks = journalLine.SysExtensionSerializerMap::getExtensionTable(tableNum(FBLedgerJournalTrans_FiscalBooks_BR), false);

        journalLineFiscalBooks.initValue();
        journalLineFiscalBooks.FiscalEstablishment_BR = fiscalEstablishment.RecId;
        journalLineFiscalBooks.State = fiscalEstablishment.postalAddress().State;
        journalLineFiscalBooks.TaxType                   = generalAdjustmentCode.TaxType;
        journalLineFiscalBooks.AdjustmentType            = FBTaxAssessmentAdjustmentType_BR::General;
        journalLineFiscalBooks.GeneralAdjustmentCode     = generalAdjustmentCode.RecId;
        journalLineFiscalBooks.FiscalEstablishment_BR    = fiscalEstablishment.RecId;
        journalLineFiscalBooks.TaxAmount                 = _amount;
        this.setAmountCurDebitCredit(journalLine, journalLineFiscalBooks);

        journalLine.write();
        ledgerJournalEngine.voucherTotals(journalLine);

        journalLineFiscalBooks.LedgerJournalTrans        = journalLine.RecId;
        journalLineFiscalBooks.write();

        journalLine.SysExtensionSerializerMap::packExtensionTable(journalLineFiscalBooks);
        journalLine.write();

        ledgerJournalEngine.ledgerJournalTableUpdateTotals(_journalTable);
        _journalTable.write();

        return journalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFBBookingPeriod</Name>
				<Source><![CDATA[
    public FBBookingPeriod_BR parmFBBookingPeriod(FBBookingPeriod_BR _fbBookingPeriod = fbBookingPeriod)
    {
        fbBookingPeriod = _fbBookingPeriod;

        return fbBookingPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubAssessmentCalculatorICMSST</Name>
				<Source><![CDATA[
    public FBSubAssessmentCalculatorICMSST_BR parmSubAssessmentCalculatorICMSST(FBSubAssessmentCalculatorICMSST_BR _calculator = calculator)
    {
        calculator = _calculator;

        return calculator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postJournal</Name>
				<Source><![CDATA[
    private void postJournal(LedgerJournalTable _journalTable)
    {
        LedgerJournalCheckPost ledgerJournalCheckPost = LedgerJournalCheckPost::newLedgerJournalTable(_journalTable, NoYes::Yes);

        ledgerJournalCheckPost.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAmountCurDebitCredit</Name>
				<Source><![CDATA[
    private void setAmountCurDebitCredit(LedgerJournalTrans _ledgerJournalTrans, FBLedgerJournalTrans_FiscalBooks_BR _ledgerJournalTransFiscalBooks)
    {
        if (_ledgerJournalTransFiscalBooks.isLedgerCredit())
        {
            _ledgerJournalTrans.AmountCurCredit = _ledgerJournalTransFiscalBooks.TaxAmount;
            _ledgerJournalTrans.AmountCurDebit = 0;
        }
        else
        {
            _ledgerJournalTrans.AmountCurDebit = _ledgerJournalTransFiscalBooks.TaxAmount;
            _ledgerJournalTrans.AmountCurCredit = 0;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>