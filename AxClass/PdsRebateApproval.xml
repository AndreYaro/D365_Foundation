<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsRebateApproval</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class that serves to approve calculated rebates.
/// </summary>
class PdsRebateApproval
{
    RecordSortedList    journalList;

    PdsRebateTable      toDoList;
    PdsRebateId         pdsRebateId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// substantiates the object
    /// </summary>
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalList</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method gets/sets if the list of rebates selected.
    /// </summary>
    /// <param name="_journalList">sorted list of rebates</param>
    /// <returns>returns sorted list of rebates</returns>
    public RecordSortedList parmJournalList(
        RecordSortedList _journalList = journalList)
    {
        journalList = _journalList;
        return journalList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method processes the list of records selected and approve the calculated rebates.
    /// </summary>
    /// <param name="_args">Any arguments passed</param>
    public void run(Args _args)
    {
        PdsRebateTable      pdsRebateTable;

        try
        {
            ttsbegin;

            journalList.first(toDoList);

            while (toDoList)
            {
                select forupdate pdsRebateTable
                    where pdsRebateTable.RecId == toDoList.RecId;

                if (pdsRebateTable.PdsRebateStatus == PdsRebateStatus::Calculated)
                {
                    if (pdsRebateTable.PdsMarkForCredit == NoYes::No)
                    {
                        pdsRebateTable.PdsRebateStatus = PdsRebateStatus::Approved;
                        pdsRebateTable.update();

                        if (_args && _args.caller() && formHasMethod(_args.caller(), identifierstr(refreshRecord)))
                        {
                            _args.caller().refreshRecord();
                        }
                    }
                    else
                    {
                        warning(strfmt("@PRO1143", pdsRebateTable.PdsRebateId)) ;
                    }
                }
                else
                {
                    warning(strfmt("@PRO1141", pdsRebateTable.PdsRebateId)) ;
                }

                if (!journalList.next(toDoList))
                {
                    break;
                }
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns an instance of the class
    /// </summary>
    /// <returns>returns instance</returns>
    public static PdsRebateApproval construct()
    {
        return new PdsRebateApproval();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method constructs an instance and runs the class
    /// </summary>
    /// <param name="_args">Any arguments passed</param>
    public static void main(Args _args)
    {
        Common              record;
        FormDataSource      pdsRebateTable_ds;
        PdsRebateApproval   pdsRebateApproval = PdsRebateApproval::construct();
        RecordSortedList    journalList;

        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContext(_args))
        {
            try
            {
                record = _args.record();
                if (record)
                {
                    journalList = FormLetter::createJournalListCopy(record);
                }
                else
                {
                    throw error("@PRO1126");
                }

                pdsRebateApproval.parmJournalList(journalList);

                pdsRebateApproval.run(_args);

                if (FormDataUtil::getFormDataSource(record))
                {
                    pdsRebateTable_ds = FormDataUtil::getFormDataSource(record);
                    pdsRebateTable_ds.research();
                }
            }
            catch (Exception::Error)
            {
                throw error("@SYS4205");
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>