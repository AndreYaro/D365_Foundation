<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPeriodPostingSelectSales</Name>
	<SourceCode>
		<Declaration><![CDATA[
class   ProjPeriodPostingSelectSales extends ProjPeriodPostingSelect
{
    TransDate               transActionDate;
    DialogField             dialogCostSalesPrice;
    DialogField             dialogEmplSalesPrice;
    DialogField             dialogRevenueSalesPrice;
    DialogField             dialogItemSalesPrice;
    DialogField             dialogTransDate;

    DialogGroup             dialogGroupCostSale;
    DialogField             dialogReverseTurnover;

    boolean                 queryCost;
    boolean                 queryEmpl;
    boolean                 queryRevenue;
    boolean                 queryItem;

    boolean                 reverseTurnover;
    ProjLedgerStatus        projLedgerStatus;

    QueryBuildRange         costTransStatusPosted,      costTransStatusProposal,
                            emplTransStatusPosted,      emplTransStatusProposal,
                            revenueTransStatusPosted,   revenueTransStatusProposal,
                            itemTransStatusPosted,      itemTransStatusProposal;

    QueryBuildDataSource    emplDataSource,
                            emplDataSourceSale,
                            costDataSource,
                            costDataSourceSale,
                            itemDataSource,
                            itemDataSourceSale,
                            revenueDataSource,
                            revenueDataSourceSale;

    QueryBuildRange         emplTransDate,
                            emplProjId,
                            emplSalesPosted;

    QueryBuildRange         costTransDate,
                            costProjId,
                            costSalesPosted;

    QueryBuildRange         revenueTransDate,
                            revenueProjId,
                            revenueSalesPosted;

    QueryBuildRange         itemTransDate,
                            itemProjId,
                            itemSalesPosted;

    boolean enableProjMultipleContractLinesForProjectFeature = ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled();

    #Define.CurrentVersion(26)

    #LOCALMACRO.CurrentList
        ReverseTurnover,
        queryCost,
        queryEmpl,
        queryRevenue,
        queryItem,
        TransactionDate,
        FromDate,
        ToDate
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>account</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount account(ProjPost _projPost,ProjFundingSourceRefId _fundingSourceId )
    {
        if (this.parmReverseTurnover() == true)
        {
            return _projPost.debitAccountSalesAccruedLedgerDimension(_fundingSourceId  );
        }

        return _projPost.creditAccountSalesAccruedLedgerDimension(_fundingSourceId  );
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountOffset</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountOffset(ProjPost _projPost,ProjFundingSourceRefId _fundingSourceId )
    {
        if (this.parmReverseTurnover() == true)
        {
            return _projPost.creditAccountSalesAccruedLedgerDimension(_fundingSourceId  );
        }

        return _projPost.debitAccountSalesAccruedLedgerDimension(_fundingSourceId  );
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMST</Name>
				<Source><![CDATA[
    public AmountMST amountMST(ProjTrans _projTrans)
    {
        return CurrencyExchangeHelper::amountCur2MST(_projTrans.transTurnover(), _projTrans.currencyIdSales(), _projTrans.exchRateSales(transActionDate), transActionDate, _projTrans.exchRateSecondarySales(), _projTrans.triangulationSales());
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPostTrans</Name>
				<Source><![CDATA[
    public boolean checkPostTrans(ProjTrans _projTrans)
    {
        ProjTable           projTable   = ProjTable::find(_projTrans.projId());
        ProjEmplTrans       projEmplTrans;
        ProjEmplTransCost   projEmplTransCost;
        ProjCostTrans       projCostTrans;
        ProjCostTransCost   projCostTransCost;
        ProjItemTransCost   projItemTransCost;
        ProjTrans           projTransCost;
        container           con;
        Query               locQuery;
        QueryRun            locQueryRun;

        boolean checkPostTransCost(ProjTrans _projTransCost)
        {
            if (_projTransCost.ledgerStatusCost() == ProjLedgerStatus::None ||
                _projTransCost.ledgerStatusCost() == ProjLedgerStatus::BalanceSheet)
            {
                return false;
            }

            return true;
        }

        // Skips the selection of transactions where project stage is closed/finished.
        if (projTable.Status == ProjStatus::Completed)
        {
            return false;
        }

        if (this.enableProjMultipleContractLinesForProjectFeature)
        {
            if (projTable.ProjInvoiceProjId)
            {
                PSAContractLineItems contractLine = ProjMultipleContractLinesForProjectFeatureHelper::getProjContractLineByContractIdTransType(projTable.ProjId, projTable.ProjInvoiceProjId, _projTrans.transType());
                if (!contractLine || contractLine.BillingMethod == ProjContractBillingMethod::FixedPrice)
                {
                    return false;
                }
            }
            else
            {
                return false;
            }
        }
        else
        {
            if ((projTable.Type == ProjType::Cost) ||
                (projTable.Type == ProjType::FixedPrice) ||
                (projTable.Type == ProjType::Investment) ||
                (projTable.Type == ProjType::Time)          ||
                (projTable.Type == ProjType::Internal))
            {
                return false;
            }
        }

        if (reverseTurnover)
        {
            if (!_projTrans.ledgerSalesAmountMST())
            {
                return false;
            }
        }

        if (! _projTrans.transTurnover())
        {
            return false;
        }

        if (! _projTrans.canBeAccrued())
        {
            return false;
        }

        if (! reverseTurnover)
        {
            if (_projTrans.transType() == ProjTransType::Cost       ||
                _projTrans.transType() == ProjTransType::Hour       ||
                _projTrans.transType() == ProjTransType::Item)
            {
                switch (_projTrans.transType())
                {
                    case ProjTransType::Hour:
                        projEmplTrans = ProjEmplTrans::find(_projTrans.transId());
                        con = ProjEmplTransCost::findForSalesRefRecId(_projTrans.recId());
                        locQuery = new Query(con);
                        locQueryRun = new QueryRun(locQuery);
                        while (locQueryRun.next())
                        {
                            projEmplTransCost = locQueryRun.get(tablenum(ProjEmplTransCost));
                            projTransCost = ProjTrans::newProjEmplTransCost(projEmplTrans, projEmplTransCost);
                            if (!checkPostTransCost(projTransCost))
                            {
                                return false;
                            }
                        }
                        break;

                    case ProjTransType::Cost:
                        projCostTrans = ProjCostTrans::find(_projTrans.transId());
                        con = ProjCostTransCost::findForSalesRefRecId(_projTrans.recId());
                        locQuery = new Query(con);
                        locQueryRun = new QueryRun(locQuery);
                        while (locQueryRun.next())
                        {
                            projCostTransCost = locQueryRun.get(tablenum(ProjCostTransCost));
                            projTransCost = ProjTrans::newProjCostTransCost(projCostTrans, projCostTransCost);
                            if (!checkPostTransCost(projTransCost))
                            {
                                return false;
                            }
                        }
                        break;

                    case ProjTransType::Item:
                        con = ProjItemTransCost::findForSalesRefRecId(_projTrans.recId());
                        locQuery = new Query(con);
                        locQueryRun = new QueryRun(locQuery);
                        while (locQueryRun.next())
                        {
                            projItemTransCost = locQueryRun.get(tablenum(ProjItemTransCost));
                            projTransCost = ProjTrans::newProjItemTransCost(projItemTransCost);
                            if (!checkPostTransCost(projTransCost))
                            {
                                return false;
                            }
                        }
                        break;
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costSales</Name>
				<Source><![CDATA[
    protected ProjCostSales costSales()
    {
        return ProjCostSales::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCost</Name>
				<Source><![CDATA[
    private void createCost()
    {
        ProjCostTrans           projCostTrans;
        ProjCostTransSale       projCostTransSale;
        ProjTrans               projTrans;
        ProjPost                projPost;
        Query                   saleQuery;
        QueryBuildDataSource    saleQbds;
        QueryBuildRange         transIdQbr;
        QueryRun                saleQueryRun;

        projCostTrans = queryRun.get(tablenum(ProjCostTrans));

        saleQuery = new Query();
        saleQbds = saleQuery.addDataSource(tablenum(ProjCostTransSale));

        transIdQbr = saleQbds.addRange(fieldnum(ProjCostTransSale,TransId));
        transIdQbr.value(projCostTrans.TransId);

        this.setDialogRangesCostSale(saleQbds);

        saleQueryRun = new QueryRun(saleQuery);
        while (saleQueryRun.next())
        {
            projCostTransSale = saleQueryRun.get(tablenum(ProjCostTransSale));
            projTrans = ProjTrans::newProjCostTransSale(projCostTrans, projCostTransSale);

            if (this.checkPostTrans(projTrans))
            {
                this.findOrInsertTmpPeriodic(projTrans);
                this.insertTmpPeriodicSale(projTrans);
                projPost = ProjPost::newCheckTransAmount(projCostTrans, projCostTransSale);
                this.insertTmpPeriodicLedger(projPost,projTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEmpl</Name>
				<Source><![CDATA[
    private void createEmpl()
    {
        ProjEmplTrans           projEmplTrans;
        ProjEmplTransSale       projEmplTransSale;
        ProjTrans               projTrans;
        ProjPost                projPost;
        Query                   saleQuery;
        QueryBuildDataSource    saleQbds;
        QueryBuildRange         transIdQbr;
        QueryRun                saleQueryRun;

        projEmplTrans = queryRun.get(tablenum(ProjEmplTrans));

        saleQuery = new Query();
        saleQbds = saleQuery.addDataSource(tablenum(ProjEmplTransSale));

        transIdQbr = saleQbds.addRange(fieldnum(ProjEmplTransSale,TransId));
        transIdQbr.value(projEmplTrans.TransId);

        this.setDialogRangesEmplSale(saleQbds);

        saleQueryRun = new QueryRun(saleQuery);
        while (saleQueryRun.next())
        {
            projEmplTransSale = saleQueryRun.get(tablenum(ProjEmplTransSale));
            projTrans = ProjTrans::newProjEmplTransSale(projEmplTrans, projEmplTransSale);

            if (this.checkPostTrans(projTrans))
            {
                this.findOrInsertTmpPeriodic(projTrans);
                this.insertTmpPeriodicSale(projTrans);
                projPost = ProjPost::newCheckTransAmount(projEmplTrans, projEmplTransSale);
                this.insertTmpPeriodicLedger(projPost,projTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createItem</Name>
				<Source><![CDATA[
    private void createItem()
    {
        ProjItemTrans           projItemTrans;
        ProjItemTransSale       projItemTransSale;
        ProjTrans               projTrans;
        ProjPost                projPost;
        Query                   saleQuery;
        QueryBuildDataSource    saleQbds;
        QueryBuildRange         transIdQbr;
        QueryRun                saleQueryRun;

        projItemTrans = queryRun.get(tablenum(ProjItemTrans));

        saleQuery = new Query();
        saleQbds = saleQuery.addDataSource(tablenum(ProjItemTransSale));

        transIdQbr = saleQbds.addRange(fieldnum(ProjItemTransSale,ProjTransId));
        transIdQbr.value(projItemTrans.ProjTransId);

        this.setDialogRangesItemSale(saleQbds);

        saleQueryRun = new QueryRun(saleQuery);
        while (saleQueryRun.next())
        {
            projItemTransSale = saleQueryRun.get(tablenum(ProjItemTransSale));
            projTrans = ProjTrans::newProjItemTransSale(projItemTrans, projItemTransSale);

            if (this.checkPostTrans(projTrans))
            {
                this.findOrInsertTmpPeriodic(projTrans);
                this.insertTmpPeriodicSale(projTrans);
                projPost = ProjPost::newCheckTransAmount(projItemTrans, projItemTransSale);
                this.insertTmpPeriodicLedger(projPost,projTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRevenue</Name>
				<Source><![CDATA[
    private void createRevenue()
    {
        ProjRevenueTrans        projRevenueTrans;
        ProjRevenueTransSale    projRevenueTransSale;
        ProjTrans               projTrans;
        ProjPost                projPost;
        Query                   saleQuery;
        QueryBuildDataSource    saleQbds;
        QueryBuildRange         transIdQbr;
        QueryRun                saleQueryRun;

        projRevenueTrans = queryRun.get(tablenum(ProjRevenueTrans));

        saleQuery = new Query();
        saleQbds = saleQuery.addDataSource(tablenum(ProjRevenueTransSale));

        transIdQbr = saleQbds.addRange(fieldnum(ProjRevenueTransSale,TransId));
        transIdQbr.value(projRevenueTrans.TransId);

        this.setDialogRangesRevenueSale(saleQbds);

        saleQueryRun = new QueryRun(saleQuery);
        while (saleQueryRun.next())
        {
            projRevenueTransSale = saleQueryRun.get(tablenum(ProjRevenueTransSale));
            projTrans = ProjTrans::newProjRevenueTransSale(projRevenueTrans, projRevenueTransSale);

            if (this.checkPostTrans(projTrans))
            {
                this.findOrInsertTmpPeriodic(projTrans);
                this.insertTmpPeriodicSale(projTrans);
                projPost = ProjPost::newCheckTransAmount(projRevenueTrans, projRevenueTransSale);
                this.insertTmpPeriodicLedger(projPost,projTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    public void createTrans()
    {
        delete_from tmpProjPeriodicCost;
        delete_from tmpProjPeriodicSale;
        delete_from tmpProjPeriodicLedger;

        this.setDialogRanges();

        // For performance reasons, enable one set of data sources at a time and execute
        // the query. This way only one query is executed for each transaction type,
        // instead of one query per transaction type per existing project.

        emplDataSource.enabled(false);
        emplDataSourceSale.enabled(false);
        costDataSource.enabled(false);
        costDataSourceSale.enabled(false);
        revenueDataSource.enabled(false);
        revenueDataSourceSale.enabled(false);
        itemDataSource.enabled(false);
        itemDataSourceSale.enabled(false);

        if (queryEmpl)
        {
            emplDataSource.enabled(true);
            emplDataSourceSale.enabled(true);

            while (queryRun.next())
            {
                this.createEmpl();
            }
            queryRun.reset();

            emplDataSource.enabled(false);
            emplDataSourceSale.enabled(false);
        }

        if (queryCost)
        {
            costDataSource.enabled(true);
            costDataSourceSale.enabled(true);

            while (queryRun.next())
            {
               this.createCost();
            }
            queryRun.reset();

            costDataSource.enabled(false);
            costDataSourceSale.enabled(false);
        }

        if (queryRevenue)
        {
            revenueDataSource.enabled(true);
            revenueDataSourceSale.enabled(true);

            while (queryRun.next())
            {
                this.createRevenue();
            }
            queryRun.reset();

            revenueDataSource.enabled(false);
            revenueDataSourceSale.enabled(false);
        }

        if (queryItem)
        {
            itemDataSource.enabled(true);
            itemDataSourceSale.enabled(true);

            while (queryRun.next())
            {
                this.createItem();
            }
            queryRun.reset();

            itemDataSource.enabled(false);
            itemDataSourceSale.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryCost</Name>
				<Source><![CDATA[
    void initQueryCost()
    {
        if (queryCost)
        {
            costDataSource.enabled(true);

            costProjId          = costDataSource.findRange(fieldnum(ProjCostTrans,ProjId));
            if (! costProjId)
            {
                costProjId      = costDataSource.addRange(fieldnum(ProjCostTrans,ProjId));
            }

            costTransDate       = costDataSource.findRange(fieldnum(ProjCostTrans,TransDate));
            if (! costTransDate)
            {
                costTransDate   = costDataSource.addRange(fieldnum(ProjCostTrans,TransDate));
            }

            costProjId.status(RangeStatus::Hidden);
            costTransDate.status(RangeStatus::Hidden);

            if (fromDate || toDate)
            {
                costTransDate.value(this.queryFromDate()+'..'+this.queryToDate());
            }

            costDataSourceSale.enabled(true);

            costTransStatusPosted           = costDataSourceSale.findRange(fieldnum(ProjCostTransSale,TransStatus),1);
            if (! costTransStatusPosted)
            {
                costTransStatusPosted       = costDataSourceSale.addRange(fieldnum(ProjCostTransSale,TransStatus));
            }

            costTransStatusProposal         = costDataSourceSale.findRange(fieldnum(ProjCostTransSale,TransStatus),2);
            if (! costTransStatusProposal)
            {
                costTransStatusProposal     = costDataSourceSale.addRange(fieldnum(ProjCostTransSale,TransStatus));
            }

            costSalesPosted     = costDataSourceSale.findRange(fieldnum(ProjCostTransSale,LedgerSalesPosted));
            if (! costSalesPosted)
            {
                costSalesPosted = costDataSourceSale.addRange(fieldnum(ProjCostTransSale,LedgerSalesPosted));
            }

            costTransStatusPosted.status(RangeStatus::Hidden);
            costTransStatusProposal.status(RangeStatus::Hidden);
            costSalesPosted.status(RangeStatus::Hidden);

            costTransStatusPosted.value(queryValue(ProjTransStatus::Posted));
            costTransStatusProposal.value(queryValue(ProjTransStatus::InvoiceProposal));
            if (reverseTurnover)
            {
                costSalesPosted.value(queryValue(NoYes::Yes));
            }
            else
            {
                costSalesPosted.value(queryValue(NoYes::No));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryEmpl</Name>
				<Source><![CDATA[
    void initQueryEmpl()
    {
        #define.2(2)

        if (queryEmpl)
        {
            emplDataSource.enabled(true);

            emplProjId          = emplDataSource.findRange(fieldnum(ProjEmplTrans,ProjId));
            if (! emplProjId)
            {
                emplProjId      = emplDataSource.addRange(fieldnum(ProjEmplTrans,ProjId));
            }

            emplTransDate       = emplDataSource.findRange(fieldnum(ProjEmplTrans,TransDate));
            if (! emplTransDate)
            {
                emplTransDate   = emplDataSource.addRange(fieldnum(ProjEmplTrans,TransDate));
            }

            emplProjId.status(#2);
            emplTransDate.status(#2);

            if (fromDate || toDate)
            {
                emplTransDate.value(this.queryFromDate()+'..'+this.queryToDate());
            }

            emplDataSourceSale.enabled(true);

            emplTransStatusPosted       = emplDataSourceSale.findRange(fieldnum(ProjEmplTransSale,TransStatus),1);
            if (! emplTransStatusPosted)
            {
                emplTransStatusPosted   = emplDataSourceSale.addRange(fieldnum(ProjEmplTransSale,TransStatus));
            }

            emplTransStatusProposal     = emplDataSourceSale.findRange(fieldnum(ProjEmplTransSale,TransStatus),2);
            if (! emplTransStatusProposal)
            {
                emplTransStatusProposal = emplDataSourceSale.addRange(fieldnum(ProjEmplTransSale,TransStatus));
            }

            emplSalesPosted     = emplDataSourceSale.findRange(fieldnum(ProjEmplTransSale,LedgerSalesPosted));
            if (! emplSalesPosted)
            {
                emplSalesPosted = emplDataSourceSale.addRange(fieldnum(ProjEmplTransSale,LedgerSalesPosted));
            }

            emplTransStatusPosted.status(RangeStatus::Hidden);
            emplTransStatusProposal.status(RangeStatus::Hidden);
            emplSalesPosted.status(#2);

            emplTransStatusPosted.value(queryValue(ProjTransStatus::Posted));
            emplTransStatusProposal.value(queryValue(ProjTransStatus::InvoiceProposal));
            if (reverseTurnover)
            {
                emplSalesPosted.value(queryValue(NoYes::Yes));
            }
            else
            {
                emplSalesPosted.value(queryValue(NoYes::No));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryItem</Name>
				<Source><![CDATA[
    void initQueryItem()
    {
        #define.2(2)

        if (queryItem)
        {
            itemDataSource.enabled(true);

            itemProjId          = itemDataSource.findRange(fieldnum(ProjItemTrans,ProjId));
            if (! itemProjId)
            {
                itemProjId      = itemDataSource.addRange(fieldnum(ProjItemTrans,ProjId));
            }

            itemTransDate       = itemDataSource.findRange(fieldnum(ProjItemTrans,TransDate));
            if (! itemTransDate)
            {
                itemTransDate   = itemDataSource.addRange(fieldnum(ProjItemTrans,TransDate));
            }

            itemProjId.status(#2);
            itemTransDate.status(#2);

            if (fromDate || toDate)
            {
                itemTransDate.value(this.queryFromDate()+'..'+this.queryToDate());
            }

            itemDataSourceSale.enabled(true);

            itemTransStatusPosted   = itemDataSourceSale.findRange(fieldnum(ProjItemTransSale,TransStatus),1);
            if (! itemTransStatusPosted)
            {
                itemTransStatusPosted       = itemDataSourceSale.addRange(fieldnum(ProjItemTransSale,TransStatus));
            }

            itemTransStatusProposal = itemDataSourceSale.findRange(fieldnum(ProjItemTransSale,TransStatus),2);
            if (! itemTransStatusProposal)
            {
                itemTransStatusProposal     = itemDataSourceSale.addRange(fieldnum(ProjItemTransSale,TransStatus));
            }

            itemSalesPosted     = itemDataSourceSale.findRange(fieldnum(ProjItemTransSale,LedgerSalesPosted));
            if (! itemSalesPosted)
            {
                itemSalesPosted = itemDataSourceSale.addRange(fieldnum(ProjItemTransSale,LedgerSalesPosted));
            }

            itemTransStatusPosted.status(RangeStatus::Hidden);
            itemTransStatusProposal.status(RangeStatus::Hidden);
            itemSalesPosted.status(#2);

            itemTransStatusPosted.value(queryValue(ProjTransStatus::Posted));
            itemTransStatusProposal.value(queryValue(ProjTransStatus::InvoiceProposal));
            if (reverseTurnover)
            {
                itemSalesPosted.value(queryValue(NoYes::Yes));
            }
            else
            {
                itemSalesPosted.value(queryValue(NoYes::No));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRevenue</Name>
				<Source><![CDATA[
    void initQueryRevenue()
    {
        #define.2(2)

        if (queryRevenue)
        {
            revenueDataSource.enabled(true);

            revenueProjId          = revenueDataSource.findRange(fieldnum(ProjRevenueTrans,ProjId));
            if (! revenueProjId)
            {
                revenueProjId          = revenueDataSource.addRange(fieldnum(ProjRevenueTrans,ProjId));
            }

            revenueTransDate       = revenueDataSource.findRange(fieldnum(ProjRevenueTrans,TransDate));
            if (! revenueTransDate)
            {
                revenueTransDate       = revenueDataSource.addRange(fieldnum(ProjRevenueTrans,TransDate));
            }

            revenueProjId.status(#2);
            revenueTransDate.status(#2);

            if (fromDate || toDate)
            {
                revenueTransDate.value(this.queryFromDate()+'..'+this.queryToDate());
            }

            revenueDataSourceSale.enabled(true);

            revenueTransStatusPosted           = revenueDataSourceSale.findRange(fieldnum(ProjRevenueTransSale,TransStatus),1);
            if (! revenueTransStatusPosted)
            {
                revenueTransStatusPosted       = revenueDataSourceSale.addRange(fieldnum(ProjRevenueTransSale,TransStatus));
            }

            revenueTransStatusProposal         = revenueDataSourceSale.findRange(fieldnum(ProjRevenueTransSale,TransStatus),2);
            if (! revenueTransStatusProposal)
            {
                revenueTransStatusProposal     = revenueDataSourceSale.addRange(fieldnum(ProjRevenueTransSale,TransStatus));
            }

            revenueSalesPosted     = revenueDataSourceSale.findRange(fieldnum(ProjRevenueTransSale,LedgerSalesPosted));
            if (! revenueSalesPosted)
            {
                revenueSalesPosted     = revenueDataSourceSale.addRange(fieldnum(ProjRevenueTransSale,LedgerSalesPosted));
            }

            revenueTransStatusPosted.status(RangeStatus::Hidden);
            revenueTransStatusProposal.status(RangeStatus::Hidden);
            revenueSalesPosted.status(#2);

            revenueTransStatusPosted.value(queryValue(ProjTransStatus::Posted));
            revenueTransStatusProposal.value(queryValue(ProjTransStatus::InvoiceProposal));
            if (reverseTurnover)
            {
                revenueSalesPosted.value(queryValue(NoYes::Yes));
            }
            else
            {
                revenueSalesPosted.value(queryValue(NoYes::No));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList,queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryCost</Name>
				<Source><![CDATA[
    public boolean parmQueryCost(boolean   _queryCost  = queryCost)
    {
        queryCost   = _queryCost;

        return queryCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryEmpl</Name>
				<Source><![CDATA[
    public boolean parmQueryEmpl(boolean   _queryEmpl  = queryEmpl)
    {
        queryEmpl   = _queryEmpl;

        return queryEmpl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryItem</Name>
				<Source><![CDATA[
    public boolean parmQueryItem(boolean   _queryItem  = queryItem)
    {
        queryItem   = _queryItem;

        return queryItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryRevenue</Name>
				<Source><![CDATA[
    public boolean parmQueryRevenue(boolean   _queryRevenue  = queryRevenue)
    {
        queryRevenue   = _queryRevenue;

        return queryRevenue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReverseTurnover</Name>
				<Source><![CDATA[
    public boolean parmReverseTurnover(boolean _reverseTurnover = reverseTurnover)
    {
        reverseTurnover = _reverseTurnover;

        return reverseTurnover;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmtransActionDate</Name>
				<Source><![CDATA[
    public TransDate parmtransActionDate(TransDate _transActionDate = transActionDate)
    {
        transActionDate = _transActionDate;

        return transActionDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingType</Name>
				<Source><![CDATA[
    public LedgerPostingType postingType(ProjPost _projPost)
    {
        if (this.parmReverseTurnover() == true)
        {
            return _projPost.postingTypeTurnoverAccrued();
        }

        return _projPost.postingTypeOffsetTurnoverAccrued();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeOffset</Name>
				<Source><![CDATA[
    public LedgerPostingType postingTypeOffset(ProjPost _projPost)
    {
        if (this.parmReverseTurnover() == true)
        {
            return _projPost.postingTypeOffsetTurnoverAccrued();
        }

        return _projPost.postingTypeTurnoverAccrued();
    }

]]></Source>
			</Method>
			<Method>
				<Name>projLedgerStatus</Name>
				<Source><![CDATA[
    ProjLedgerStatus projLedgerStatus()
    {
        throw error(strfmt("@SYS68912",funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    public QueryRun queryBuild()
    {
        Query                   query = new Query();

        queryRun = new SysQueryRun(query);

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDialogRanges</Name>
				<Source><![CDATA[
    void setDialogRanges()
    {
        if (queryCost)
        {
            costTransDate       = costDataSource.findRange(fieldnum(ProjCostTrans,TransDate));
            if (! costTransDate)
            {
                costTransDate   = costDataSource.addRange(fieldnum(ProjCostTrans,TransDate));
            }

            if (fromDate || toDate)
            {
                costTransDate.value(this.queryFromDate()+'..'+this.queryToDate());
            }

            this.setDialogRangesCostSale(costDataSourceSale);
        }

        if (queryEmpl)
        {
            emplTransDate       = emplDataSource.findRange(fieldnum(ProjEmplTrans,TransDate));
            if (! emplTransDate)
            {
                emplTransDate   = emplDataSource.addRange(fieldnum(ProjEmplTrans,TransDate));
            }

            if (fromDate || toDate)
            {
                emplTransDate.value(this.queryFromDate()+'..'+this.queryToDate());
            }

            this.setDialogRangesEmplSale(emplDataSourceSale);
        }

        if (queryItem)
        {
            itemTransDate       = itemDataSource.findRange(fieldnum(ProjItemTrans,TransDate));
            if (! itemTransDate)
            {
                itemTransDate   = itemDataSource.addRange(fieldnum(ProjItemTrans,TransDate));
            }

            if (fromDate || toDate)
            {
                itemTransDate.value(this.queryFromDate()+'..'+this.queryToDate());
            }

            this.setDialogRangesItemSale(itemDataSourceSale);
        }

        if (queryRevenue)
        {
            revenueTransDate            = revenueDataSource.findRange(fieldnum(ProjRevenueTrans,TransDate));
            if (! revenueTransDate)
            {
                revenueTransDate       = revenueDataSource.addRange(fieldnum(ProjRevenueTrans,TransDate));
            }

            if (fromDate || toDate)
            {
                revenueTransDate.value(this.queryFromDate()+'..'+this.queryToDate());
            }

            this.setDialogRangesRevenueSale(revenueDataSourceSale);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDialogRangesCostSale</Name>
				<Source><![CDATA[
    void setDialogRangesCostSale(QueryBuildDataSource _costDataSourceSale)
    {
        QueryBuildRange locCostTransStatusPosted,
                        locCostTransStatusProposal,
                        locCostSalesPosted;

        locCostTransStatusPosted           = _costDataSourceSale.findRange(fieldnum(ProjCostTransSale,TransStatus));
        if (! locCostTransStatusPosted)
        {
            locCostTransStatusPosted       = _costDataSourceSale.addRange(fieldnum(ProjCostTransSale,TransStatus));
        }

        locCostTransStatusProposal         = _costDataSourceSale.findRange(fieldnum(ProjCostTransSale,TransStatus),2);
        if (! locCostTransStatusProposal)
        {
            locCostTransStatusProposal     = _costDataSourceSale.addRange(fieldnum(ProjCostTransSale,TransStatus));
        }

        locCostSalesPosted     = _costDataSourceSale.findRange(fieldnum(ProjCostTransSale,LedgerSalesPosted),1);
        if (! locCostSalesPosted)
        {
            locCostSalesPosted = _costDataSourceSale.addRange(fieldnum(ProjCostTransSale,LedgerSalesPosted));
        }

        locCostTransStatusPosted.value(queryValue(ProjTransStatus::Posted));

        locCostTransStatusProposal.value(queryValue(ProjTransStatus::InvoiceProposal));

        if (reverseTurnover)
        {
            locCostSalesPosted.value(queryValue(NoYes::Yes));
        }
        else
        {
            locCostSalesPosted.value(queryValue(NoYes::No));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDialogRangesEmplSale</Name>
				<Source><![CDATA[
    void setDialogRangesEmplSale(QueryBuildDataSource _emplDataSourceSale)
    {
        QueryBuildRange locEmplTransStatusPosted,
                        locEmplTransStatusProposal,
                        locEmplSalesPosted;

        locEmplTransStatusPosted       = _emplDataSourceSale.findRange(fieldnum(ProjEmplTransSale,TransStatus));
        if (! locEmplTransStatusPosted)
        {
            locEmplTransStatusPosted   = _emplDataSourceSale.addRange(fieldnum(ProjEmplTransSale,TransStatus));
        }

        locEmplTransStatusProposal     = _emplDataSourceSale.findRange(fieldnum(ProjEmplTransSale,TransStatus),2);
        if (! locEmplTransStatusProposal)
        {
            locEmplTransStatusProposal = _emplDataSourceSale.addRange(fieldnum(ProjEmplTransSale,TransStatus));
        }

        locEmplSalesPosted     = _emplDataSourceSale.findRange(fieldnum(ProjEmplTransSale,LedgerSalesPosted),1);
        if (! locEmplSalesPosted)
        {
            locEmplSalesPosted = _emplDataSourceSale.addRange(fieldnum(ProjEmplTransSale,LedgerSalesPosted));
        }

        locEmplTransStatusPosted.value(queryValue(ProjTransStatus::Posted));

        locEmplTransStatusProposal.value(queryValue(ProjTransStatus::InvoiceProposal));

        if (reverseTurnover)
        {
            locEmplSalesPosted.value(queryValue(NoYes::Yes));
        }
        else
        {
            locEmplSalesPosted.value(queryValue(NoYes::No));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDialogRangesItemSale</Name>
				<Source><![CDATA[
    void setDialogRangesItemSale(QueryBuildDataSource _itemDataSourceSale)
    {
        QueryBuildRange locItemTransStatusPosted,
                        locItemTransStatusProposal,
                        locItemSalesPosted;

        locItemTransStatusPosted           = _itemDataSourceSale.findRange(fieldnum(ProjItemTransSale,TransStatus));
        if (! locItemTransStatusPosted)
        {
            locItemTransStatusPosted       = _itemDataSourceSale.addRange(fieldnum(ProjItemTransSale,TransStatus));
        }

        locItemTransStatusProposal         = _itemDataSourceSale.findRange(fieldnum(ProjItemTransSale,TransStatus),2);
        if (! locItemTransStatusProposal)
        {
            locItemTransStatusProposal     = _itemDataSourceSale.addRange(fieldnum(ProjItemTransSale,TransStatus));
        }

        locItemSalesPosted     = _itemDataSourceSale.findRange(fieldnum(ProjItemTransSale,LedgerSalesPosted),1);
        if (! locItemSalesPosted)
        {
            locItemSalesPosted = _itemDataSourceSale.addRange(fieldnum(ProjItemTransSale,LedgerSalesPosted));
        }

        locItemTransStatusPosted.value(queryValue(ProjTransStatus::Posted));

        locItemTransStatusProposal.value(queryValue(ProjTransStatus::InvoiceProposal));

        if (reverseTurnover)
        {
            locItemSalesPosted.value(queryValue(NoYes::Yes));
        }
        else
        {
            locItemSalesPosted.value(queryValue(NoYes::No));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDialogRangesRevenueSale</Name>
				<Source><![CDATA[
    void setDialogRangesRevenueSale(QueryBuildDataSource _revenueDataSourceSale)
    {
        QueryBuildRange locRevenueTransStatusPosted,
                        locRevenueTransStatusProposal,
                        locRevenueSalesPosted;

        locRevenueTransStatusPosted           = _revenueDataSourceSale.findRange(fieldnum(ProjRevenueTransSale,TransStatus),1);
        if (! locRevenueTransStatusPosted)
        {
            locRevenueTransStatusPosted       = _revenueDataSourceSale.addRange(fieldnum(ProjRevenueTransSale,TransStatus));
        }

        locRevenueTransStatusProposal         = _revenueDataSourceSale.findRange(fieldnum(ProjRevenueTransSale,TransStatus),2);
        if (! locRevenueTransStatusProposal)
        {
            locRevenueTransStatusProposal     = _revenueDataSourceSale.addRange(fieldnum(ProjRevenueTransSale,TransStatus));
        }

        locRevenueSalesPosted          = _revenueDataSourceSale.findRange(fieldnum(ProjRevenueTransSale,LedgerSalesPosted));
        if (! locRevenueSalesPosted)
        {
            locRevenueSalesPosted      = _revenueDataSourceSale.addRange(fieldnum(ProjRevenueTransSale,LedgerSalesPosted));
        }

        locRevenueTransStatusPosted.status(RangeStatus::Hidden);

        locRevenueTransStatusProposal.status(RangeStatus::Hidden);

        locRevenueTransStatusPosted.value(queryValue(ProjTransStatus::Posted));

        locRevenueTransStatusProposal.value(queryValue(ProjTransStatus::InvoiceProposal));

        if (reverseTurnover)
        {
            locRevenueSalesPosted.value(queryValue(NoYes::Yes));
        }
        else
        {
            locRevenueSalesPosted.value(queryValue(NoYes::No));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer         version         = conpeek(packedClass,1);
        container       packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,packedQuery] = packedClass;
                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }
                else
                {
                    queryRun = this.queryBuild();
                }
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        ret = true;

        if (!dialogTransDate.value())
        {
            ret = checkFailed("@SYS24455");
        }

        if ( !(queryCost || queryEmpl || queryRevenue || queryItem) )
        {
            // No transaction type selected
            ret = checkFailed("@SYS91027");
        }

        if (fromDate > toDate && toDate)
        {
            // Invalid date interval
            ret = checkFailed("@SYS91020");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYS87008";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>