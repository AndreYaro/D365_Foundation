<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetCreateBalance</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BudgetCreateBalance
{
    TmpBudgetBalance        balances;
    AmountMST               totalAmount;
    Qty                     totalQty;

    Query                   initQ;
    TransDate               yr;
    BudgetModelId           modelId;

    Query                   q;
    QueryBuildDataSource    qB;
    QueryBuildRange         criteriaStartDate;
    QueryBuildRange         criteriaModel;

    Integer                 numOfPeriod;

    boolean                 created;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    protected void add(BudgetMap  budget)
    {
        balances.Amount += CurrencyExchangeHelper::mstAmount(budget.Amount, budget.Currency, budget.StartDate);
        balances.Qty += budget.Qty;
        balances.PdsCWQty +=  budget.PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAcc</Name>
				<Source><![CDATA[
    protected void addAcc()
    {
        totalAmount         += balances.Amount;
        totalQty            += balances.Qty;

        balances.AccAmount  += balances.Amount;
        balances.AccQty     += balances.Qty;

        balances.PdsCWAccQty+= balances.PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>budgetBalances</Name>
				<Source><![CDATA[
    TmpBudgetBalance budgetBalances()
    {
        return  balances;
    }

]]></Source>
			</Method>
			<Method>
				<Name>budgetModel</Name>
				<Source><![CDATA[
    BudgetModelMap budgetModel()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdModelId</Name>
				<Source><![CDATA[
    /*MAN
    Used when creating balances.
    */
    fieldId fieldIdModelId()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdQty</Name>
				<Source><![CDATA[
    /*MAN
    Used when creating balances.
    */
    fieldId fieldIdQty()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfPeriod</Name>
				<Source><![CDATA[
    Integer numOfPeriod()
    {
        return numOfPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSearch</Name>
				<Source><![CDATA[
    void setSearch()
    {
        #BudgetMapFieldNames

        #define.CWQty('PdsCWQty')
        fieldId             id;

        SysQuery::mergeRanges(q, initQ);
        qB = q.dataSourceNo(1);

        qB.orderMode(OrderMode::GroupBy);
        qB.addSortField(fieldname2id(qB.file(), #Currency));

        qB.addSelectionField(this.fieldIdQty(), SelectionField::Sum);
        qB.addSelectionField(fieldname2id(qB.file(), #Amount), SelectionField::Sum);
        qB.addSelectionField(fieldName2id(qb.file(),#CWQty), SelectionField::Sum);

        id = fieldname2id(qB.file(), #StartDate);
        qB.addSortField(id);
        if (qB.findRange(id))
        {
            criteriaStartDate = qB.findRange(id);
        }
        else
        {
            criteriaStartDate = qB.addRange(id);
        }

        id = this.fieldIdModelId();
        if (qB.findRange(id))
        {
            criteriaModel = qB.findRange(id);
        }
        else
        {
            criteriaModel = qB.addRange(id);
        }

        id = fieldname2id(qB.file(), #Report);
        if (qB.findRange(id))
        {
            qB.findRange(id).value('1');
        }
        else
        {
            qB.addRange(id).value('1');
        }

        id = fieldname2id(qB.file(), #ExpandId);
        if (qB.findRange(id))
        {
            qB.findRange(id).value('');
        }
        else
        {
            qB.addRange(id).value('');
        }

        id = fieldname2id(qB.file(), #Active);
        if (qB.findRange(id))
        {
            qB.findRange(id).value('1');
        }
        else
        {
            qB.addRange(id).value('1');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumUp</Name>
				<Source><![CDATA[
    void sumUp(
        Query           _initQ,
        TransDate       _year,
        BudgetModelId   _model
    )
    {
        TransDate               periodStart;
        TransDate               periodEnd;
        FiscalCalendarPeriod    period;
        BudgetModelMap          budgetModel;
        BudgetMap               budget;
        QueryRun                qr;
        RecId                   calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();

        if ((initQ && initQ.pack()  != _initQ.pack())   ||
            yr                      != _year            ||
            modelId                 != _model
           )
        {
            created = false;
        }

        if (created)
        {
            return;
        }

        initQ   = _initQ;
        yr      = _year;
        modelId = _model;

        periodStart  = LedgerFiscalCalendar::findOpeningPeriodByDate(calendarRecId,yr).StartDate;
        if (! LedgerFiscalCalendar::existOpeningPeriodForDate(calendarRecId, periodStart))
        {
            throw error(strfmt("@SYS18887", yr));
        }

        periodEnd   = LedgerFiscalCalendar::findClosingPeriodByDate(calendarRecId,yr).EndDate;
        if (! LedgerFiscalCalendar::existClosingPeriodForDate(calendarRecId, periodEnd))
        {
            throw error(strfmt("@SYS7005", yr));
        }

        q = new Query();
        this.setSearch();

        ttsbegin;

        totalAmount= 0;
        totalQty   = 0;

        while select StartDate, EndDate from period
            order by period.StartDate
            where period.StartDate          >= periodStart   &&
                  period.EndDate            <= periodEnd     &&
                  period.Type               == FiscalPeriodType::Operating &&
                  period.FiscalCalendarYear ==
                  FiscalCalendarYear::findYearByCalendarDate(calendarRecId, periodStart).RecId

        {
            balances.Period     = period.StartDate;
            balances.Qty        = 0;
            balances.Amount     = 0;
            balances.PdsCWQty   = 0;

            budgetModel = this.budgetModel();
            while select budgetModel
                where budgetModel.ModelId == modelId
            {
                criteriaStartDate.value(queryRange(period.StartDate, period.EndDate));
                criteriaModel.value(queryValue(budgetModel.SubModelId));

                qr = new QueryRun(q);
                while (qr.next())
                {
                    budget = qr.getNo(1);
                    this.add(budget);
                }
            }

            this.addAcc();

            balances.insert();
            numOfPeriod++;
        }

        ttscommit;

        created = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalAmount</Name>
				<Source><![CDATA[
    AmountMST totalAmount()
    {
        return totalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalQty</Name>
				<Source><![CDATA[
    Qty   totalQty()
    {
        return totalQty;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
