<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransReportById</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  Orchestrates the process to get the data for the TaxTransReportById report.
/// </summary>
class TaxTransReportById
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTaxAmountByReportId_Amount</Name>
				<Source><![CDATA[
    /// <summary>
    ///  This method will return the amount for a specific report id. The report id is given in a record to the method as a parameter.
    /// </summary>
    /// <param name = "_taxReportCollection">The record containing the report id.</param>
    /// <param name = "_taxReportPeriod">The period range to search for amounts within.</param>
    /// <param name = "_taxReportLayout">The tax report layout. Impacts how amounts are calculated.</param>
    /// <returns>
    ///  The amount in company currency that represents a sum of all valid tax transactions that fall under a given report id
    ///  according to rules from the provided report layout.
    /// </returns>
    public static AmountMST getTaxAmountByReportId_Amount(
        TaxTransReportByIdTransactionQuery  _transactionQuery,
        TaxTransReportByIdTableBuilder      _tableBuilder,
        TaxReportCollection                 _taxReportCollection, //Specific ReportId
        TaxReportPeriod                     _taxReportPeriod,     //Period
        TaxReportLayout                     _taxReportLayout = TaxReportLayout::Default)

    {
        TaxTable            taxTable;
        TmpTaxReportById    tmpTaxReportById;
        #TaxReportingCodesBE

        while select  taxTable
              where   taxTable.TaxPeriod                          == _taxReportPeriod.TaxPeriod && (
                      taxTable.RepFieldBaseIncoming               == _taxReportCollection.TaxReportField ||
                      taxTable.RepFieldBaseOutgoing               == _taxReportCollection.TaxReportField ||
                      taxTable.RepFieldBaseUseTax                 == _taxReportCollection.TaxReportField ||
                      taxTable.RepFieldBaseUseTaxOffset           == _taxReportCollection.TaxReportField ||
                      taxTable.RepFieldTaxFreeBuy                 == _taxReportCollection.TaxReportField ||
                      taxTable.RepFieldTaxFreeSales               == _taxReportCollection.TaxReportField ||
                      taxTable.RepFieldTaxIncoming                == _taxReportCollection.TaxReportField ||
                      taxTable.RepFieldTaxOutgoing                == _taxReportCollection.TaxReportField ||
                      taxTable.RepFieldUseTax                     == _taxReportCollection.TaxReportField ||
                      taxTable.RepFieldUseTaxOffset               == _taxReportCollection.TaxReportField ||
                      taxTable.RepFieldBaseIncomingCreditNote     == _taxReportCollection.TaxReportField ||
                      taxTable.RepFieldBaseOutgoingCreditNote     == _taxReportCollection.TaxReportField ||
                      taxTable.RepFieldBaseUseTaxCreditNote       == _taxReportCollection.TaxReportField ||
                      taxTable.RepFieldBaseUseTaxOffsetCreditNote == _taxReportCollection.TaxReportField ||
                      taxTable.RepFieldTaxFreeBuyCreditNote       == _taxReportCollection.TaxReportField ||
                      taxTable.RepFieldTaxFreeSalesCreditNote     == _taxReportCollection.TaxReportField ||
                      taxTable.RepFieldTaxIncomingCreditNote      == _taxReportCollection.TaxReportField ||
                      taxTable.RepFieldTaxOutgoingCreditNote      == _taxReportCollection.TaxReportField ||
                      taxTable.RepFieldUseTaxCreditNote           == _taxReportCollection.TaxReportField ||
                      taxTable.RepFieldUseTaxOffsetCreditNote     == _taxReportCollection.TaxReportField)
        {
            // Selects only transactions not caused by credit notes.
            tmpTaxReportById = _transactionQuery.getReportingAmountsForNonCreditNoteTransactions(_tableBuilder, tmpTaxReportById, taxTable.TaxCode, _taxReportPeriod, _taxReportCollection, _taxReportLayout);

            // Selects only transactions caused by credit notes.
            tmpTaxReportById = _transactionQuery.getReportingAmountsForCreditNoteTransactions(_tableBuilder, tmpTaxReportById, taxTable.TaxCode, _taxReportPeriod, _taxReportCollection, _taxReportLayout);
        }

        select firstonly tmpTaxReportById
            where tmpTaxReportById.TaxReportField == _taxReportCollection.TaxReportField;

        if (_taxReportCollection.TaxReportLayout == TaxReportLayout::Belgium &&
           (tmpTaxReportById.TaxReportField == #field_81                     ||
            tmpTaxReportById.TaxReportField == #field_82                     ||
            tmpTaxReportById.TaxReportField == #field_83                     ||
            tmpTaxReportById.TaxReportField == #field_84                     ||
            tmpTaxReportById.TaxReportField == #field_85))
        {
            return tmpTaxReportById.Amount + tmpTaxReportById.TaxInCostPrice;
        }

        return tmpTaxReportById.Amount - tmpTaxReportById.TaxInCostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountByReportId_Table</Name>
				<Source><![CDATA[
    /// <summary>
    ///  This method will return a table containing records with all report ids and amounts for a given period.
    /// </summary>
    /// <param name = "_fromDate">From date.</param>
    /// <param name = "_toDate">To date.</param>
    /// <param name = "_taxPeriod">Tax period.</param>
    /// <param name = "_taxRepVersion">Tax report version.</param>
    /// <param name = "_taxRepCounter">Tax report counter.</param>
    /// <param name = "_reported">Has this tax period been reported?</param>
    /// <param name = "_debitCredit">Is this debit or credit? If none will process for both debit and credit.</param>
    /// <param name = "_propertiesBagPacked">Sets the parameters on the <c>TaxTransReport</c> based on the parameters in the container.</param>
    /// <returns>
    ///  A table of the type <c>TmpTaxReportById</c> containing records for report ids and their tax amounts for all tax
    ///  transactions in the given from and to date range for the given tax period inside the calculated version min and max.
    /// </returns>
    /// <remarks>
    ///  The from date, tax period, tax report version, tax report counter, and has this tax period been reported are used to
    ///  calculate the tax version min and max.
    /// </remarks>
    public static TmpTaxReportById taxAmountByReportId_Table(
        TransDate           _fromDate,
        TransDate           _toDate,
        TaxPeriod           _taxPeriod,
        TaxRepVersion       _taxRepVersion,
        TaxVersion          _taxRepCounter  = 0,
        NoYes               _reported       = NoYes::No,
        DebCredProposal     _debitCredit    = DebCredProposal::None,
        container           _propertiesBagPacked  = conNull()
        )
    {
        TaxTransReport      taxTransReport;
        Counter             versionMin;
        Counter             versionMax;

        [versionMin, versionMax] = TaxTransReportById::taxAmountByReportId_VersionMinMax(_fromDate, _taxPeriod, _taxRepVersion, _taxRepCounter, _reported);

        taxTransReport = TaxTransReport::construct(_taxPeriod);
        taxTransReport.setPropertiesBag(_propertiesBagPacked);

        return taxTransReport.taxAmountByReportId_Table(_fromDate,
                                                        _toDate,
                                                        _taxPeriod,
                                                        _taxRepVersion,
                                                        _taxRepCounter,
                                                        _reported,
                                                        _debitCredit,
                                                        versionMin,
                                                        versionMax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountByReportId_VersionMinMax</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Determine the the version min and max for the tax period.
    /// </summary>
    /// <param name = "_fromDate">
    ///  The date to locate the period date range in the tax period.
    /// </param>
    /// <param name = "_taxPeriod">
    ///  The tax period.
    /// </param>
    /// <param name = "_taxRepVersion">
    ///  The tax report version to find the version min and max for.
    ///  Each tax report version has different rules on how to determine the version min and max.
    /// </param>
    /// <param name = "_taxRepCounter">
    ///  The tax report counter. If it is provided it is used to set the version min and max.
    /// </param>
    /// <param name = "_reported">
    ///  Has this tax period been reported?
    /// </param>
    /// <returns></returns>
    public static container taxAmountByReportId_VersionMinMax(
        TransDate           _fromDate,
        TaxPeriod           _taxPeriod,
        TaxRepVersion       _taxRepVersion,
        TaxVersion          _taxRepCounter  = 0,
        NoYes               _reported       = NoYes::No)
    {
        Counter             versionMin;
        Counter             versionMax;

        if (_taxRepCounter)
        {
            versionMax = _taxRepCounter;
            versionMin = _taxRepCounter;
        }
        else
        {
            versionMax = TaxReport::counterMax(_taxRepVersion, _taxPeriod, _fromDate);
            versionMin = TaxReport::counterMin(_taxRepVersion, _taxPeriod, _fromDate);

            if (_reported && _taxRepVersion == TaxRepVersion::Latest)
            {
                versionMax -= 1;
                versionMin -= 1;
            }
        }

        return [versionMin, versionMax];
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountByTaxDirectionAndReportId</Name>
				<Source><![CDATA[
    /// <summary>
    ///  This method will return a table of the type <c>TmpTaxReportById</c> containing records for report ids and their tax amounts
    ///  for a given tax transaction.
    /// </summary>
    /// <param name = "_taxTrans">
    ///  The tax transaction record to get the tax amounts for the report ids.
    /// </param>
    /// <param name = "_tmpTaxReportById">
    ///  The temporary table buffer to add report id records with their amounts from a tax transaction to or update existing
    ///  records for a report id with additional amounts from a tax transaction.
    /// </param>
    /// <param name = "_isCredit">
    ///  Is the transaction only caused by credit notes?
    /// </param>
    /// <param name = "_taxReportCollection">
    ///  Restricts the method to only add or update the amounts in the temporary table related to the provided report id.
    ///  If null it will add or update the amounts for all report ids for the tax transactions tax direction and tax code.
    /// </param>
    /// <param name = "_taxReportLayout">
    ///  The tax report layout. It will change how the amounts are determined for the report id.
    /// </param>
    /// <param name = "_isDebit">
    ///  Parameter added by Malaysia to restrict how amounts are added and updated in the temporary table when working in Malaysia.
    /// </param>
    /// <returns>
    ///  A temporary table buffer that contains 0 to n records. Each record is for a single report id that contains the summarized tax and
    ///  tax in cost price amount for the given tax transaction.
    /// </returns>
    public static TmpTaxReportById taxAmountByTaxDirectionAndReportId(
        TaxTrans                    _taxTrans,
        TmpTaxReportById            _tmpTaxReportById,               //Contains the table where the amounts and reportIds should be placed.
        boolean                     _isCredit            = NoYes::No,//Is the transaction only caused by credit notes?
        TaxReportCollection         _taxReportCollection = null,     //If the parameter is given, then will the method only return the amount for the given reportId.
        TaxReportLayout             _taxReportLayout     = TaxReportLayout::Default,
        boolean                     _isDebit             = NoYes::No
        )
    {
        TaxTransReportByIdTableBuilder tableBuilderProcess = TaxTransReportByIdTableBuilderFactory::newTableBuilderProcess(_taxReportLayout);

        return tableBuilderProcess.getTaxAmountByTaxDirectionAndReportId(_taxTrans,
                                                                         _tmpTaxReportById,
                                                                         _isCredit,
                                                                         _taxReportCollection,
                                                                         _taxReportLayout,
                                                                         _isDebit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAdjustmentInTmpTaxReportById</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Updates or inserts a record into the <c>TmpTaxReportById</c> temporary table based on an adjustment record provided for the same table.
    /// </summary>
    /// <param name = "_tmpTaxReportById">
    ///  The table buffer to update or insert a new record into.
    /// </param>
    /// <param name = "_adjustments">
    ///  The adjustment record to use to find the record in the table buffer to update along with the adjusted amount to add to the exisitng record.
    ///  Or if no existing record can be found in the table buffer the details for the new record to add to the table buffer allong with its amounts.
    /// </param>
    public static void insertAdjustmentInTmpTaxReportById(TmpTaxReportById _tmpTaxReportById,
                                                                TmpTaxReportById _adjustments)
    {
        TmpTaxReportById tmpTaxReportById;
        TmpTaxReportById adjustments;

        tmpTaxReportById = _tmpTaxReportById;
        adjustments      = _adjustments;

        while select adjustments
        {
            select firstonly forupdate tmpTaxReportById
                where tmpTaxReportById.TaxReportField == adjustments.TaxReportField;

            if (tmpTaxReportById)
            {
                tmpTaxReportById.Amount         += adjustments.Amount;
                tmpTaxReportById.TaxInCostPrice += adjustments.TaxInCostPrice;
                tmpTaxReportById.update();
            }
            else
            {
                tmpTaxReportById.TaxReportField = adjustments.TaxReportField;
                tmpTaxReportById.Amount         = adjustments.Amount;
                tmpTaxReportById.TaxInCostPrice = adjustments.TaxInCostPrice;
                tmpTaxReportById.Description    = adjustments.Description;

                tmpTaxReportById.insert();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>