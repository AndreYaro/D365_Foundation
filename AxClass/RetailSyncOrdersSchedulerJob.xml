<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailSyncOrdersSchedulerJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// This job is aimed to synchronize pending orders from Retail order staging tables to AX.
/// This job creates sub-tasks one per each channel, so that each task processes the orders for that channel.
/// </summary>
class RetailSyncOrdersSchedulerJob extends RunBaseBatch implements RetailIOperatingUnitPickerCaller, BatchRetryable
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

    internal const str SynchronizeOrdersSetSizeKey = 'SYNCHRONIZE_ORDERS_SET_SIZE';

    BatchHeader batchHeader;
    Set     selectedOMInternalOrgRecIds = new Set(Types::Container);
    RecId   oMHierarchyRecId;
    container   packedOMUnits;

    private int numberOfWorkersScheduled = 0;

    #define.CurrentVersion(3)
    #localmacro.CurrentList
        packedOMUnits,
        oMHierarchyRecId
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run base batch dialog.
    /// </summary>
    /// <returns>Dialog object.</returns>
    public Object dialog()
    {
        DialogRunbase   dialog = Dialog::newFormnameRunbase(formstr(RetailOperatingUnitPicker), this);

        dialog = this.dialogInternal(dialog);
        dialog.caption("@SYS115063");
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes after the <c>dialog</c> method has been called.
    /// </summary>
    /// <param name="dialog">
    /// The <c>DialogRunBase</c> object to which to append.
    /// </param>
    /// <remarks>
    /// Method was overriden to makes batch execution the default way of executing this operation.
    /// </remarks>
    protected void dialogPost(Object dialog)
    {
        super(dialog);

        this.batchInfo().fieldBatchExecuteValue(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        if (selectedOMInternalOrgRecIds)
        {
            packedOMUnits = selectedOMInternalOrgRecIds.pack();
        }

        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOMHierarchyRecId</Name>
				<Source><![CDATA[
    public RecId  parmOMHierarchyRecId(RecId _oMHierarchyRecId = oMHierarchyRecId)
    {
        oMHierarchyRecId = _oMHierarchyRecId;
        return oMHierarchyRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectedOMInternalOrgRecIds</Name>
				<Source><![CDATA[
    public Set  parmSelectedOMInternalOrgRecIds(Set _selectedOMInternalOrgRecIds = selectedOMInternalOrgRecIds)
    {
        selectedOMInternalOrgRecIds = _selectedOMInternalOrgRecIds;
        return selectedOMInternalOrgRecIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPickerInitParameters</Name>
				<Source><![CDATA[
    RetailOperatingUnitPickerData getPickerInitParameters()
    {
        RetailOperatingUnitPickerData pickerInitParameter = new RetailOperatingUnitPickerData();
        pickerInitParameter.hierarchyPurpose = HierarchyPurpose::RetailAssortment;

        if (this.parmInBatch())
        {
            pickerInitParameter.omInternalOrganizationRecIds = selectedOMInternalOrgRecIds;
            pickerInitParameter.omHierarchyTypeRecId = this.oMHierarchyRecId;
        }

        return pickerInitParameter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processOperatingUnitPickerData</Name>
				<Source><![CDATA[
    void processOperatingUnitPickerData(RetailOperatingUnitPickerData operatingUnitPickerData)
    {
        this.parmSelectedOMInternalOrgRecIds(operatingUnitPickerData.omInternalOrganizationRecIds);
        this.parmOMHierarchyRecId(operatingUnitPickerData.omHierarchyTypeRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorker</Name>
				<Source><![CDATA[
    private void createWorker(Array _work)
    {
        RetailSyncOrdersSchedulerTask worker = new RetailSyncOrdersSchedulerTask();

        worker.parmPackedTransactionRecIdList(_work.pack());

        if (this.isInBatch())
        {
            if (!batchHeader)
            {
                batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
            }

            batchHeader.addRuntimeTask(worker, this.parmCurrentBatch().RecId);

            // Need to make the jobs critical to enable monitoring.
            batchHeader.parmCritical(NoYes::Yes);
            batchHeader.parmMonitoringCategory(BatchMonitoringCategory::RetailSyncOrdersSchedulerTask);
        }
        else
        {
            worker.runOperation();
        }

        this.numberOfWorkersScheduled++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkers</Name>
				<Source><![CDATA[
    private void createWorkers()
    {
        int                             batchSize = this.getDefaultBatchSize();
        Array                           work = new Array(Types::Int64);
        int                             currentBatchSize = 0;

        OMOperatingUnit                 omOperatingUnit;
        Set                             omOperatingUnits;
        SetEnumerator                   selectedEnumerator;
        SetEnumerator                   operatingUnitEnumerator;
        Set organizationTypes           = new Set(Types::Enum);

        // Used to filter the organization model to include only operating units.
        organizationTypes.add(OMInternalOrganizationType::OperatingUnit);

        selectedEnumerator = selectedOMInternalOrgRecIds.getEnumerator();
        while (selectedEnumerator.moveNext())
        {
            omOperatingUnits = OMInternalOrganization::getDescendantsAndSelf(selectedEnumerator.current(), oMHierarchyRecId, DateTimeUtil::utcNow(), organizationTypes);
            operatingUnitEnumerator = omOperatingUnits.getEnumerator();
            while (operatingUnitEnumerator.moveNext())
            {
                omOperatingUnit = OMOperatingUnit::find(operatingUnitEnumerator.current(), OMOperatingUnitType::RetailChannel);
                if (!omOperatingUnit)
                {
                    // The operating unit was not a retail channel. No need to explode it.
                    continue;
                }

                RetailChannelTable channelTable = RetailChannelTable::findByOperatingUnitId(omOperatingUnit.RecId);

                eventSource.EventWriteSynchronizeOrdersJobSchedulingWorkersForChannel(channelTable.RecId);
                
                RetailTransactionTable       retailTransactionTable;
                RetailTransactionOrderStatus retailTransactionOrderStatus;                

                int64 transactionCount = 0;

                while select RecId
                    from retailTransactionTable
                    where
                           retailTransactionTable.Channel      == channelTable.RecId
                        && retailTransactionTable.salesOrderId == ''
                        &&       (retailTransactionTable.entryStatus == RetailEntryStatus::None
                               || retailTransactionTable.entryStatus  == RetailEntryStatus::Posted)
                        &&       (retailTransactionTable.type  == RetailTransactionType::PendingSalesOrder
                               || retailTransactionTable.type  == RetailTransactionType::AsyncCustomerOrder
                               || retailTransactionTable.type  == RetailTransactionType::AsyncCustomerQuote)
                    notExists join retailTransactionOrderStatus
                        where retailTransactionTable.Channel       == retailTransactionOrderStatus.Channel
                           && retailTransactionTable.store         == retailTransactionOrderStatus.store
                           && retailTransactionTable.terminal      == retailTransactionOrderStatus.terminal
                           && retailTransactionTable.transactionId == retailTransactionOrderStatus.transactionId
                           && (retailTransactionOrderStatus.Status == RetailTransactionOrderStatusType::Succeeded
                            || retailTransactionOrderStatus.Status == RetailTransactionOrderStatusType::Editing)
                {
                    transactionCount++;

                    currentBatchSize++;
                    work.value(currentBatchSize, retailTransactionTable.RecId);

                    if (currentBatchSize >= batchSize)
                    {
                        this.createWorker(work);

                        // Reset buffer
                        currentBatchSize = 0;
                        work = new Array(Types::Int64);
                    }
                }

                eventSource.EventWriteSynchronizeOrdersJobScheduledWorkersForChannel(channelTable.RecId, transactionCount);
            }
        }

        // Process last partially filled buffer
        if (currentBatchSize > 0)
        {
            this.createWorker(work);
        }

        if (batchHeader)
        {
            batchHeader.save();
        }

        eventSource.EventWriteSynchronizeOrdersSchedulerStatistics(batchSize, this.numberOfWorkersScheduled, this.isInBatch());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultBatchSize</Name>
				<Source><![CDATA[
    private int getDefaultBatchSize()
    {
        RetailSharedConfigurationParameters configParameters = RetailSharedConfigurationParameters::findByName(SynchronizeOrdersSetSizeKey);

        if (configParameters)
        {
            int configValue = str2Int(configParameters.Value);
            return configValue <= 0 ? 1 : configValue;
        }
        else
        {
            return 1;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.createWorkers();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer     version     = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList] = packedClass;
                if (packedOMUnits)
                {
                    selectedOMInternalOrgRecIds = Set::create(packedOMUnits);
                }
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@Retail:SyncOrdersJob";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RetailSyncOrdersSchedulerJob scheduler = new RetailSyncOrdersSchedulerJob();

        if (scheduler.prompt())
        {
            scheduler.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>RetailSyncOrdersSchedulerJob</c>
    /// class can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>RetailSyncOrdersSchedulerJob</c> can
    /// be run in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>