<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInPaymSE_BGMax</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustInPaymSE_BGMax extends CustInPaymSE
{
    #define.appendDelimiter(" â€“ ")
    ErrorTxt errorTxt;
    CustName payersName;
    Amount extraPaymentAmount;
    Amount extraTotalAmount;
    boolean extraReferenceCode;
    boolean extraError;
    TransactionTextBGMax_SE extraReferenceNumberTxt;
    str endErrorTxt1;
    str endErrorTxt2;
    str endErrorTxt3;
    boolean errorSomewhere;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addNewPaymentReference</Name>
				<Source><![CDATA[
    public ErrorTxt addNewPaymentReference(LedgerJournalTransImport _ledgerJournalTransImport, UnknownNoYes _insert = UnknownNoYes::Unknown)
    {
        // A new payment reference is added to the LedgerJournalTrans
        if (!ledgerJournalTrans.parmLedgerDimension() && _ledgerJournalTransImport.accountNum())
        {
            // LedgerJournalTransImport.accountNum() only holds a MainAccountNum
            RecId mainAccountRecId = MainAccount::findByMainAccountId(_ledgerJournalTransImport.accountNum()).RecId;
            ledgerJournalTrans.parmLedgerDimension(LedgerDimensionDefaultingEngine::getLedgerDimensionFromAccountAndDim(mainAccountRecId, DimensionHierarchy::getAccountStructure(mainAccountRecId, Ledger::primaryLedger(CompanyInfo::current(ledgerJournalTrans.Company()))), 0));
        }

        extraReferenceNumberTxt = extraReferenceNumberTxt + ',' + strRem(_ledgerJournalTransImport.paymId(),' ');

        CustTrans custTrans;
        CustTransOpen custTransOpen;
        if (!ledgerJournalTrans.parmLedgerDimension())
        {
            errorTxt = "@SYS111576";
        }
        else if (!ledgerJournalTrans.Company)
        {
            errorTxt = "@SYS111576";
        }
        else if (! _ledgerJournalTransImport.invoice())
        {
            errorTxt = "@SYS111576";
        }
        else
        {
            CustTable custTable = CustTable::findByCompany(ledgerJournalTrans.Company, ledgerJournalTrans.parmAccount());
            if (custTable)
            {
                ledgerJournalTrans.DefaultDimension = custTable.DefaultDimension;
                ledgerJournalTrans.Payment = custTable.PaymTermId;
                container custCompany = [ledgerJournalTrans.Company];

                select crosscompany:custCompany custTrans
                    where custTrans.AccountNum == ledgerJournalTrans.parmAccount()
                        && custTrans.Invoice == _ledgerJournalTransImport.invoice();

                if (custTrans)
                {
                    ledgerJournalTrans.CustTransId = custTrans.RecId;
                    ledgerJournalTrans.DefaultDimension = custTrans.DefaultDimension;
                    ledgerJournalTrans.PaymId = custTrans.PaymId;

                    select crosscompany:custCompany custTransOpen
                        where custTransOpen.RefRecId == custTrans.RecId;

                    if (custTransOpen)
                    {
                        ledgerJournalTrans.Due = custTransOpen.DueDate;
                    }
                    else
                    {
                        errorTxt = "@SYS111576";
                    }
                }
                else
                {
                    errorTxt = strFmt("@SYS111576",custTrans.Invoice);
                }

                if (ledgerJournalTrans.AccountType != LedgerJournalACType::Ledger)
                {
                    LedgerJournalEngine ledgerJournalEngine = new LedgerJournalEngine();
                    LedgerJournalTrans_Asset ledgerJournalTrans_Asset;
                    ledgerJournalEngine.initAssetBookid(ledgerJournalTrans, ledgerJournalTrans_Asset);
                    ledgerJournalEngine.initOffsetDefaultDimension(ledgerJournalTrans, ledgerJournalTrans_Asset);
                }
            }
            else
            {
                errorTxt = strFmt("@SYS111576", ledgerJournalTrans.parmAccount());
            }
        }

        if (errorTxt)
        {
            ledgerJournalTrans.PaymId = _ledgerJournalTransImport.paymId();
        }

        else
        {
            if (custTrans.CurrencyCode == ledgerJournalTrans.CurrencyCode)
            {
                // Check whether the amount is correct (consider cash discount and maximum over/underpayment)
                if (custTransOpen.CashDiscDate >= ledgerJournalTrans.TransDate)
                {
                    if (extraPaymentAmount)
                    {
                        if (-extraPaymentAmount != custTransOpen.AmountCur - custTransOpen.PossibleCashDisc
                                && abs(-extraPaymentAmount - (custTransOpen.AmountCur - custTransOpen.PossibleCashDisc)) > CustParameters::findByCompany(ledgerJournalTrans.Company).MaxMSTOverUnder)
                        {
                            errorTxt = "@SYS111576";
                        }
                    }
                    extraTotalAmount = extraTotalAmount + custTransOpen.AmountCur - custTransOpen.PossibleCashDisc;
                }
                else
                {
                    if (extraPaymentAmount)
                    {
                        if (-extraPaymentAmount != custTransOpen.AmountCur
                                && abs(-extraPaymentAmount -  custTransOpen.AmountCur) > CustParameters::findByCompany(ledgerJournalTrans.Company).MaxMSTOverUnder)
                        {
                            errorTxt = "@SYS111576";
                        }
                    }

                    extraTotalAmount = extraTotalAmount + custTransOpen.AmountCur;
                }
            }
            else
            {
                errorTxt = "@SYS111576";
            }
        }

        if (custTransOpen)
        {
            // Marking of the transaction for settlement
            SpecTransManager specTransManager = SpecTransManager::newFromSpec(ledgerJournalTrans);
            if (specTransManager.exist(custTransOpen.company(), custTransOpen.TableId, custTransOpen.RecId))
            {
                errorTxt = "@SYS111576";
            }
            else
            {
                if (extraPaymentAmount)
                {
                    specTransManager.insert(
                        custTransOpen.company(),
                        custTransOpen.TableId,
                        custTransOpen.RecId,
                        extraPaymentAmount * -1,
                        custTrans.CurrencyCode);
                }
                else
                {
                    specTransManager.insert(
                        custTransOpen.company(),
                        custTransOpen.TableId,
                        custTransOpen.RecId,
                        custTransOpen.AmountCur,
                        custTrans.CurrencyCode);
                }

                ledgerJournalTrans.SettleVoucher = SettlementType::SelectedTransact;
                ledgerJournalTrans.MarkedInvoice = custTrans.Invoice;
                ledgerJournalTrans.update();
            }
        }

        return errorTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the record in the <c>LedgerJournalTrans</c> table.
    /// </summary>
    /// <param name = "_ledgerJournalTransImport">
    ///     A instance of <c>LedgerJournalTransImport</c> class.
    /// </param>
    /// <param name = "_insert">
    ///    A <c>UnknownNoYes</c> enumeration value.
    /// </param>
    /// <returns>
    ///     The error text.
    /// </returns>
    public ErrorTxt createLedgerJournalTrans (LedgerJournalTransImport _ledgerJournalTransImport, UnknownNoYes _insert = UnknownNoYes::Unknown)
    {
        SpecTransManager specTransManager = SpecTransManager::newFromSpec(ledgerJournalTrans);

        // A new LedgerJournalTrans is created
        if (!extraError)
        {
            ledgerJournalTrans.clear();
        }
        else
        {
            specTransManager.deleteAll();
        }

        CustPaymModeTable custPaymModeTable = CustPaymModeTable::find(paymMode);

        ledgerJournalTrans.JournalNum = ledgerJournalId;
        ledgerJournalTrans.PaymMode = paymMode;
        ledgerJournalTrans.LoadingDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        ledgerJournalTrans.TransDate = _ledgerJournalTransImport.transDate();

        ledgerJournalTrans.Company = _ledgerJournalTransImport.primaryCompany();
        ledgerJournalTrans.parmAccount(_ledgerJournalTransImport.accountNum(), LedgerJournalACType::Cust);

        // Get the offset company from the customer payment mode buffer since the method of payment will be found in the company where
        // the LedgerJournalTrans is being created and where the bank account exists.
        ledgerJournalTrans.OffsetCompany = custPaymModeTable.company();

        if (custPaymModeTable.FurtherPosting)
        {
            ledgerJournalTrans.parmOffsetLedgerDimension(ledgerJournalTrans.getOffsetLedgerDimensionForLedgerType(custPaymModeTable.InterCompanyLedgerDimension, custPaymModeTable.company()));
            ledgerJournalTrans.OffsetAccountType = LedgerJournalACType::Ledger;
        }
        else
        {
            if (custPaymModeTable.AccountType == LedgerJournalACType::Ledger)
            {
                LedgerDimensionDefaultAccount defaultAccount = custPaymModeTable.parmPaymentLedgerDimension();
                ledgerJournalTrans.parmOffsetLedgerDimension(ledgerJournalTrans.getOffsetLedgerDimensionForLedgerType(defaultAccount, custPaymModeTable.company()));
            }
            else
            {
                ledgerJournalTrans.parmOffsetAccount(custPaymModeTable.parmPaymAccount(), custPaymModeTable.AccountType);
            }
        }

        ledgerJournalTrans.PaymReference = _ledgerJournalTransImport.paymId();
        ledgerJournalTrans.BankTransType = custPaymModeTable.BankTransType;
        ledgerJournalTrans.TransactionType = LedgerTransType::Cust;

        ledgerJournalTrans.PostingProfile = CustParameters::findByCompany(ledgerJournalTrans.Company).PostingProfile;
        ledgerJournalTrans.CurrencyCode = _ledgerJournalTransImport.currencyCode();
        ledgerJournalTrans.AmountCurCredit = _ledgerJournalTransImport.amountCurCredit();
        ledgerJournalTrans.AmountCurDebit = _ledgerJournalTransImport.amountCurDebit();
        ledgerJournalTrans.SettleVoucher = this.findAutomaticSettlementType();
        ledgerJournalTrans.MarkedInvoice = _ledgerJournalTransImport.invoice();

        ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(ledgerJournalTrans.Company).RecId), ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.TransDate);
        ledgerJournalTrans.ExchRate = exchangeRateHelper.getExchangeRate1();
        ledgerJournalTrans.ExchRateSecond = exchangeRateHelper.getExchangeRate2();

        if (Ledger::reportingCurrency())
        {
            [ledgerJournalTrans.ReportingCurrencyExchRate, ledgerJournalTrans.ReportingCurrencyExchRateSecondary] = CustInPaym::calculateReportingCurrencyExchRate(
                Ledger::reportingCurrencyExchangeRateType(),
                ledgerJournalTrans.CurrencyCode,
                Ledger::reportingCurrency(),
                ledgerJournalTrans.TransDate);
        }

        LedgerJournalEngine ledgerJournalEngine = new LedgerJournalEngine();
        ledgerJournalEngine.initTaxItemGroup(ledgerJournalTrans);
        extraReferenceNumberTxt = strRem(_ledgerJournalTransImport.paymId(), ' ');

        CustTrans custTrans;
        CustTransOpen custTransOpen;
        if (!ledgerJournalTrans.parmLedgerDimension())
        {
            errorTxt = "@SYS68580";
        }
        else if (! ledgerJournalTrans.MarkedInvoice)
        {
            errorTxt = "@SYS24539";
        }
        else
        {
            CustTable custTable = CustTable::findByCompany(ledgerJournalTrans.Company, ledgerJournalTrans.parmAccount());

            if (custTable)
            {
                ledgerJournalTrans.DefaultDimension = custTable.DefaultDimension;
                ledgerJournalTrans.Payment = custTable.PaymTermId;

                container custCompany = [ledgerJournalTrans.Company];

                select crosscompany:custCompany custTrans
                    where custTrans.AccountNum == ledgerJournalTrans.parmAccount()
                        && custTrans.Invoice == ledgerJournalTrans.MarkedInvoice;

                if (custTrans)
                {
                    ledgerJournalTrans.CustTransId = custTrans.RecId;

                    // If multiple customer transactions were found, change the transaction text.
                    if (numCustTransFound > 1)
                    {
                        ledgerJournalTrans.Txt = "@SYS68654" + #appendDelimiter + custTrans.Txt;
                    }
                    else
                    {
                        ledgerJournalTrans.Txt = custTrans.Txt;
                    }

                    ledgerJournalTrans.DefaultDimension = custTrans.DefaultDimension;
                    ledgerJournalTrans.PaymId = custTrans.PaymId;
                    ledgerJournalTrans.Approved = custTrans.Approved;
                    ledgerJournalTrans.Approver = custTrans.Approver;

                    select crosscompany:custCompany custTransOpen
                        where custTransOpen.RefRecId == custTrans.RecId;

                    if (custTransOpen)
                    {
                        ledgerJournalTrans.Due = custTransOpen.DueDate;
                    }
                    else
                    {
                        errorTxt = "@SYS68581";
                    }
                }
                else
                {
                    errorTxt = strFmt("@SYS68582",ledgerJournalTrans.MarkedInvoice);
                }
            }
            else
            {
                errorTxt = strFmt("@SYS16734",ledgerJournalTrans.parmAccount());
            }
            if (ledgerJournalTrans.AccountType != LedgerJournalACType::Ledger)
            {
                LedgerJournalTrans_Asset ledgerJournalTrans_Asset;
                ledgerJournalEngine.initAssetBookid(ledgerJournalTrans, ledgerJournalTrans_Asset);
                ledgerJournalEngine.initOffsetDefaultDimension(ledgerJournalTrans, ledgerJournalTrans_Asset);
            }
        }
        AmountCur settleAmountCur;
        if (errorTxt)
        {
            ledgerJournalTrans.PaymId = _ledgerJournalTransImport.paymId();
        }
        else
        {
            if (custTrans.CurrencyCode == ledgerJournalTrans.CurrencyCode)
            {
                // Check whether the amount is correct (consider cash discount and maximum over-/underpayment)
                if (custTransOpen.CashDiscDate >= ledgerJournalTrans.TransDate)
                {
                    if (!extraReferenceCode)
                    {
                        if (-ledgerJournalTrans.amount() != custTransOpen.AmountCur - custTransOpen.PossibleCashDisc
                                && abs(-ledgerJournalTrans.amount() - (custTransOpen.AmountCur - custTransOpen.PossibleCashDisc)) > CustParameters::findByCompany(ledgerJournalTrans.Company).MaxMSTOverUnder)
                        {
                            errorTxt = "@SYS68583";
                        }
                        else
                        {
                            settleAmountCur = custTransOpen.AmountCur - custTransOpen.PossibleCashDisc;
                        }
                    }
                    else
                    {
                        if (extraPaymentAmount)
                        {
                            if (-extraPaymentAmount != custTransOpen.AmountCur - custTransOpen.PossibleCashDisc
                                    && abs(-extraPaymentAmount - (custTransOpen.AmountCur - custTransOpen.PossibleCashDisc)) > CustParameters::findByCompany(ledgerJournalTrans.Company).MaxMSTOverUnder)
                            {
                                errorTxt = "@SYS68583";
                            }
                        }
                        extraTotalAmount = extraTotalAmount + custTransOpen.AmountCur - custTransOpen.PossibleCashDisc;
                    }
                }
                else
                {
                    if (!extraReferenceCode)
                    {
                        if (-ledgerJournalTrans.amount() != custTransOpen.AmountCur
                                && abs(-ledgerJournalTrans.amount() - custTransOpen.AmountCur) > CustParameters::findByCompany(ledgerJournalTrans.Company).MaxMSTOverUnder)
                        {
                            errorTxt = "@SYS68584";
                        }
                    }
                    else
                    {
                        if (extraPaymentAmount)
                        {
                            if (-extraPaymentAmount != custTransOpen.AmountCur
                                    && abs(-extraPaymentAmount - custTransOpen.AmountCur) > CustParameters::findByCompany(ledgerJournalTrans.Company).MaxMSTOverUnder)
                            {
                                errorTxt = "@SYS68584";
                            }
                        }
                        extraTotalAmount = extraTotalAmount + custTransOpen.AmountCur;
                    }
                }
            }
            else
            {
                errorTxt = "@SYS77389";
            }
        }

        if (_insert == UnknownNoYes::Yes || (_insert == UnknownNoYes::Unknown && errorTxt == ''))
        {
            if (!extraError)
            {
                this.loadVoucherNum();
            }
            ledgerJournalTrans.Voucher = voucher;
            if (!ledgerJournalTrans.Txt && ledgerJournalTrans.parmAccount())
            {
                ledgerJournalTrans.Txt = extraReferenceNumberTxt;
            }
            if (!ledgerJournalTrans.Txt && !ledgerJournalTrans.parmAccount())
            {
                ledgerJournalTrans.Txt = payersName + ' ' + extraReferenceNumberTxt;
            }
            if (!extraError)
            {
                ledgerJournalTrans.insert();
            }
            else
            {
                ledgerJournalTrans.update();
            }
            extraError = false;
            if (custTransOpen)
            {
                // Reset specTransManager because its specRecId (ledgerJournalTrans.RecId in this case) may
                // be changed after it was first created
                specTransManager = SpecTransManager::newFromSpec(ledgerJournalTrans);

                // Marking of the transaction for settlement
                if (specTransManager.existForOtherSpec(custTransOpen.company(), custTransOpen.TableId, custTransOpen.RecId))
                {
                    errorTxt = "@SYS29065";
                    if (_insert == UnknownNoYes::Unknown)
                    {
                        extraError = true;
                    }
                }
                else
                {
                    if (extraReferenceCode)
                    {
                        if (extraPaymentAmount)
                        {
                            specTransManager.insert(
                                custTransOpen.company(),
                                custTransOpen.TableId,
                                custTransOpen.RecId,
                                extraPaymentAmount * -1,
                                custTrans.CurrencyCode);
                        }
                        else
                        {
                            specTransManager.insert(
                                custTransOpen.company(),
                                custTransOpen.TableId,
                                custTransOpen.RecId,
                                custTransOpen.AmountCur,
                                custTrans.CurrencyCode);
                        }
                    }
                    else
                    {
                        DiscGraceDays discGraceDays = CustPaymModeTable::discGraceDays(ledgerJournalTrans.PaymMode);
                        DiscDate calcDiscDate = CustVendTransOpenData::construct(custTransOpen).calcDiscDate(num2date(date2num(ledgerJournalTrans.TransDate) - discGraceDays));
                        settleAmountCur = CustVendTransOpenData::construct(custTransOpen).remainAmountCashDisc(calcDiscDate);

                        if (!settleAmountCur)
                        {
                            settleAmountCur =  custTransOpen.AmountCur;
                        }
                        specTransManager.insert(
                            custTransOpen.company(),
                            custTransOpen.TableId,
                            custTransOpen.RecId,
                            settleAmountCur,
                            custTrans.CurrencyCode);
                    }

                    ledgerJournalTrans.SettleVoucher = this.getSettlementType();
                    ledgerJournalTrans.MarkedInvoice = custTrans.Invoice;
                    ledgerJournalTrans.update();
                }
            }
        }

        if (extraReferenceCode && errorTxt != '')
        {
            errorTxt = "@SYS111576";
        }

        return errorTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustTransFromPaymId</Name>
				<Source><![CDATA[
    public CustTrans findCustTransFromPaymId(PaymId _paymId, CompanyId _company)
    {
        CustTrans custTrans;

        if (_paymId)
        {
            custTrans = this.findInvoiceCustTransByPaymId(_paymId, _company);
            boolean isCustTransInvoiceFound;
            str 25 invoice;
            if (custTrans)
            {
                invoice = custTrans.Invoice;
            }
            else
            {
                invoice = _paymId;
                
                custTrans = this.findInvoiceCustTransByInvoice(invoice, _company);

                if (custTrans)
                {
                    isCustTransInvoiceFound = true;
                }
                else
                {
                    int pos = strFind(invoice, '0123456789', 1, 25);

                    if (pos != 0)
                    {
                        int pos2 = strNFind(invoice, '0123456789', pos,(26 - pos));

                        if (pos2 > 0)
                        {
                            invoice = subStr(invoice, pos, (pos2 - pos));
                        }
                        else
                        {
                            invoice = subStr(invoice, pos, (26 - pos));
                        }
                    }
                }
            }

            if (invoice && !isCustTransInvoiceFound)
            {
                custTrans = this.findInvoiceCustTransByInvoice(invoice, _company);
            }

            if (!custTrans)
            {
                invoice = strLRTrim(invoice);
                int antal_i = strLen(invoice);
                invoice = subStr(invoice, 1, antal_i - 1);

                if (invoice)
                {
                    custTrans = this.findInvoiceCustTransByInvoice(invoice, _company);
                }

                if (!custTrans)
                {
                    invoice = strLRTrim(invoice);
                    antal_i = strLen(invoice);
                    invoice = subStr(invoice,1,antal_i - 1);

                    if (invoice)
                    {
                        custTrans = this.findInvoiceCustTransByInvoice(invoice, _company);
                    }

                    if (!custTrans.Invoice)
                    {
                        invoice = '';
                    }
                }
            }
        }

        return custTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDisk2Journal</Name>
				<Source><![CDATA[
    void fromDisk2Journal()
    {
        errorSomewhere = false;
        this.fromDisk2JournalLogic();
        this.printControlReport();

        if (errorSomewhere)
        {
            warning("@SYS13619");
            if (endErrorTxt1) warning(endErrorTxt1);
            if (endErrorTxt2) warning(endErrorTxt2);
            if (endErrorTxt3) warning(endErrorTxt3);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDisk2JournalLogic</Name>
				<Source><![CDATA[
    void fromDisk2JournalLogic()
    {
        #define.startRecordTxt("BGMAX")
        #define.startRecordPos("3-22")

        if (asciiFile)
        {
            CustTrans custTrans;

            int lineNumber15;
            int lineNumber20;
            Amount endRecAmount_SEK;
            Amount endRecAmount_EUR;
            TmpCustInPaymBGMax_SE tmpCustInPaymBGMax_SE;
            TmpCustInPaymBGMax_SE tmpCustInPaymBGMax_SE_Future;

            ttsbegin;

            LedgerJournalTransImport ledgerJournalTransImport = new LedgerJournalTransImport();

            totalAmount_SEK = 0;
            totalAmount_EUR = 0;
            numOfRecord = 0;
            boolean checkedFile = false;
            int lineNum = 1;

            while (asciiFile.status() == IO_Status::Ok)
            {
                str 80 inRecord;
                [inRecord] = asciiFile.read();

                if (inRecord && inRecord != '0')
                {
                    if (!checkedFile)
                    {
                        //Check the format of the file before it is inserted in the tmp file
                        if (subStr(inRecord, 3, 5) != #startRecordTxt)
                        {
                            ttsabort;
                            throw error(strFmt("@SYS84821", #startRecordTxt, #startRecordPos));
                        }

                        checkedFile = true;
                    }

                    //Insert the transactions in the tmp file
                    tmpCustInPaymBGMax_SE.LineNum = lineNum;
                    tmpCustInPaymBGMax_SE.TransactionType = subStr(inRecord,1,2);
                    tmpCustInPaymBGMax_SE.TransactionText = inRecord;
                    tmpCustInPaymBGMax_SE.insert();
                    lineNum ++;
                }
            }

            tmpCustInPaymBGMax_SE_Future.setTmpData(tmpCustInPaymBGMax_SE);

            AmountCurDebit amountCurDebit;
            AmountCurCredit amountCurCredit;
            PaymId paymId;
            TransDate transDate;
            CurrencyCode currencyCode;
            boolean newOpeningFile = false;
            UnknownNoYes insertRecord;
            boolean firstExtraReferenceCode;
            boolean kredit;

            while select tmpCustInPaymBGMax_SE
                order by LineNum
            {
                if (tmpCustInPaymBGMax_SE)
                {
                    switch (tmpCustInPaymBGMax_SE.TransactionType)
                    {
                        // Initial record
                        case '01':
                            break;
                        // Opening record
                        case '05':
                            currencyCode = subStr(tmpCustInPaymBGMax_SE.TransactionText, 23, 3);
                            newOpeningFile = true;
                            break;
                        // Deposit record
                        case '15':
                            break;
                        // Payment and Deduction record
                        case '20', '21':
                            errorTxt = '';
                            extraTotalAmount = 0;
                            extraReferenceCode = false;
                            firstExtraReferenceCode = false;

                            if (newOpeningFile)
                            {
                                select firstonly tmpCustInPaymBGMax_SE_Future
                                    order by LineNum
                                    where tmpCustInPaymBGMax_SE_Future.LineNum > tmpCustInPaymBGMax_SE.LineNum
                                        && tmpCustInPaymBGMax_SE_Future.TransactionType == '15';

                                transDate = str2date(subStr(tmpCustInPaymBGMax_SE_Future.TransactionText, 40, 6), 321);
                                lineNumber15 = tmpCustInPaymBGMax_SE_Future.LineNum;

                                if (currencyCode == ISOCurrencyCodeHelper::getISOCurrencyCodeAlpha(ISOCurrencyCodes::SEK))
                                {
                                    endRecAmount_SEK = endRecAmount_SEK + this.getLineAmount(tmpCustInPaymBGMax_SE_Future.TransactionText);
                                }
               
                                if (currencyCode == ISOCurrencyCodeHelper::getISOCurrencyCodeAlpha(ISOCurrencyCodes::EUR))
                                {
                                    endRecAmount_EUR = endRecAmount_EUR + this.getLineAmount(tmpCustInPaymBGMax_SE_Future.TransactionText);
                                }

                                newOpeningFile = false;
                            }

                            // Finding the next line with transaction type 20
                            select firstonly tmpCustInPaymBGMax_SE_Future
                                order by LineNum
                                where tmpCustInPaymBGMax_SE_Future.LineNum > tmpCustInPaymBGMax_SE.LineNum
                                    && tmpCustInPaymBGMax_SE_Future.TransactionType == '20';

                            lineNumber20 = tmpCustInPaymBGMax_SE_Future.LineNum;

                            // Find the name of the payer for this payment
                            select firstonly tmpCustInPaymBGMax_SE_Future
                                order by LineNum
                                where tmpCustInPaymBGMax_SE_Future.LineNum > tmpCustInPaymBGMax_SE.LineNum
                                    && tmpCustInPaymBGMax_SE_Future.LineNum < lineNumber15
                                    && tmpCustInPaymBGMax_SE_Future.TransactionType == '26';
                                payersName  = subStr(tmpCustInPaymBGMax_SE_Future.TransactionText, 3, 37);

                            if (!lineNumber20)
                            {
                                if (tmpCustInPaymBGMax_SE.TransactionType == '20')
                                {
                                    select firstonly LineNum from tmpCustInPaymBGMax_SE_Future
                                        order by LineNum
                                        where tmpCustInPaymBGMax_SE_Future.LineNum > tmpCustInPaymBGMax_SE.LineNum
                                           && tmpCustInPaymBGMax_SE_Future.TransactionType == '21';

                                    lineNumber20 = tmpCustInPaymBGMax_SE_Future.LineNum ? tmpCustInPaymBGMax_SE_Future.LineNum : lineNumber15;
                                }
                                else
                                {
                                    lineNumber20 = lineNumber15;
                                }
                            }

                            select maxof(LineNum)
                                from tmpCustInPaymBGMax_SE_Future
                                where tmpCustInPaymBGMax_SE_Future.LineNum > tmpCustInPaymBGMax_SE.LineNum
                                    && tmpCustInPaymBGMax_SE_Future.LineNum < lineNumber20
                                    && (tmpCustInPaymBGMax_SE_Future.TransactionType == '22'
                                        || tmpCustInPaymBGMax_SE_Future.TransactionType == '23');

                            int maxExtraRefLineNum = tmpCustInPaymBGMax_SE_Future.LineNum;

                            while select tmpCustInPaymBGMax_SE_Future
                                order by LineNum
                                where tmpCustInPaymBGMax_SE_Future.LineNum > tmpCustInPaymBGMax_SE.LineNum
                                    && tmpCustInPaymBGMax_SE_Future.LineNum < lineNumber20
                                    && (tmpCustInPaymBGMax_SE_Future.TransactionType == '22'
                                        || tmpCustInPaymBGMax_SE_Future.TransactionType == '23')
                            {
                                paymId = strltrim(subStr(tmpCustInPaymBGMax_SE_Future.TransactionText, 13, 25));
                                custTrans = this.findCustTransFromPaymId(paymId, ledgerJournalTrans.company());
                                kredit = false;
                                extraReferenceCode = true;
                                int referenceCode = str2num(subStr(tmpCustInPaymBGMax_SE.TransactionText, 56, 1));

                                if (tmpCustInPaymBGMax_SE_Future.TransactionType == '23')
                                {
                                    kredit = true;
                                }

                                if (!kredit && tmpCustInPaymBGMax_SE.TransactionType == '21')
                                {
                                    kredit = true;
                                }

                                if (!kredit)
                                {
                                    amountCurCredit = str2num(subStr(tmpCustInPaymBGMax_SE.TransactionText, 38, 18)) / 100;
                                    extraPaymentAmount = -str2num(subStr(tmpCustInPaymBGMax_SE_Future.TransactionText, 38, 18)) / 100;
                                    amountCurDebit = 0;
                                }
                                else
                                {
                                    amountCurDebit = str2num(subStr(tmpCustInPaymBGMax_SE.TransactionText, 38, 18)) / 100;
                                    extraPaymentAmount = str2num(subStr(tmpCustInPaymBGMax_SE_Future.TransactionText, 38, 18)) / 100;
                                    amountCurCredit = 0;
                                }

                                if (insertIncorrectRecords == NoYes::Yes)
                                {
                                    insertRecord = UnknownNoYes::Yes;
                                }
                                else
                                {
                                    insertRecord = UnknownNoYes::Unknown;
                                }

                                // Expecting to find customer transaction with reference code 2 and transaction type 22
                                // If we did not find the correct transaction id, proceed with last iteration
                                if (custTrans
                                    || tmpCustInPaymBGMax_SE_Future.LineNum == maxExtraRefLineNum
                                    || (referenceCode == 2 && tmpCustInPaymBGMax_SE_Future.TransactionType == '22'))
                                {
                                    ledgerJournalTransImport.accountNum(custTrans.AccountNum);
                                    ledgerJournalTransImport.primaryCompany(custTrans ? custTrans.company() : ledgerJournalTrans.company());
                                    ledgerJournalTransImport.amountCurDebit(amountCurDebit);
                                    ledgerJournalTransImport.amountCurCredit(amountCurCredit);
                                    ledgerJournalTransImport.currencyCode(currencyCode);
                                    ledgerJournalTransImport.invoice(custTrans.Invoice);
                                    ledgerJournalTransImport.paymId(paymId);
                                    ledgerJournalTransImport.transDate(transDate);

                                    if (!firstExtraReferenceCode)
                                    {
                                        errorTxt = this.createLedgerJournalTrans(ledgerJournalTransImport, insertRecord);

                                        if (insertIncorrectRecords == NoYes::Yes || (insertIncorrectRecords == NoYes::No && errorTxt == ''))
                                        {
                                            if (currencyCode == ISOCurrencyCodeHelper::getISOCurrencyCodeAlpha(ISOCurrencyCodes::SEK))
                                            {
                                                totalAmount_SEK += (ledgerJournalTrans.AmountCurCredit - ledgerJournalTrans.AmountCurDebit);
                                            }

                                            if (currencyCode == ISOCurrencyCodeHelper::getISOCurrencyCodeAlpha(ISOCurrencyCodes::EUR))
                                            {
                                                totalAmount_EUR += (ledgerJournalTrans.AmountCurCredit - ledgerJournalTrans.AmountCurDebit);
                                            }

                                            numOfRecord ++;
                                        }

                                        firstExtraReferenceCode = true;
                                    }
                                    else
                                    {
                                        //Check if the ledgerJournalTrans exists (insertIncorrectRecords)
                                        if (ledgerJournalTrans && !extraError)
                                        {
                                            errorTxt = this.addNewPaymentReference(ledgerJournalTransImport, insertRecord);
                                            if (!ledgerJournalTrans.parmLedgerDimension())
                                            {
                                                ledgerJournalTrans.Txt = payersName + ' ' + extraReferenceNumberTxt;
                                            }
                                            else
                                            {
                                                ledgerJournalTrans.Txt = extraReferenceNumberTxt;
                                            }

                                            ledgerJournalTrans.PaymReference = '*';

                                            if (insertIncorrectRecords == NoYes::No && errorTxt != '')
                                            {
                                                if (currencyCode == ISOCurrencyCodeHelper::getISOCurrencyCodeAlpha(ISOCurrencyCodes::SEK))
                                                {
                                                    totalAmount_SEK -= (ledgerJournalTrans.AmountCurCredit - ledgerJournalTrans.AmountCurDebit);
                                                }

                                                if (currencyCode == ISOCurrencyCodeHelper::getISOCurrencyCodeAlpha(ISOCurrencyCodes::EUR))
                                                {
                                                    totalAmount_EUR -= (ledgerJournalTrans.AmountCurCredit - ledgerJournalTrans.AmountCurDebit);
                                                }

                                                extraError = true;
                                                numOfRecord --;
                                            }
                                        }
                                    }
                                }
                            }

                            if (!extraReferenceCode)
                            {
                                paymId = strltrim(subStr(tmpCustInPaymBGMax_SE.TransactionText, 13, 25));
                                custTrans = this.findCustTransFromPaymId(paymId, ledgerJournalTrans.company());
                                kredit = false;

                                if (tmpCustInPaymBGMax_SE.TransactionType == '21')
                                {
                                    kredit = true;
                                }

                                if (!kredit)
                                {
                                    amountCurCredit = str2num(subStr(tmpCustInPaymBGMax_SE.TransactionText, 38, 18)) / 100;
                                    amountCurDebit = 0;
                                }
                                else
                                {
                                    amountCurCredit = 0;
                                    amountCurDebit = str2num(subStr(tmpCustInPaymBGMax_SE.TransactionText, 38, 18)) / 100;
                                }

                                if (insertIncorrectRecords == NoYes::Yes)
                                {
                                    insertRecord = UnknownNoYes::Yes;
                                }
                                else
                                {
                                    insertRecord = UnknownNoYes::Unknown;
                                }

                                ledgerJournalTransImport.accountNum(custTrans.AccountNum);
                                ledgerJournalTransImport.primaryCompany(custTrans.company());
                                ledgerJournalTransImport.amountCurDebit(amountCurDebit);
                                ledgerJournalTransImport.amountCurCredit(amountCurCredit);
                                ledgerJournalTransImport.currencyCode(currencyCode);
                                ledgerJournalTransImport.invoice(custTrans.Invoice);
                                ledgerJournalTransImport.paymId(paymId);
                                ledgerJournalTransImport.transDate(transDate);

                                errorTxt = this.createLedgerJournalTrans(ledgerJournalTransImport, insertRecord);

                                if (insertIncorrectRecords == NoYes::Yes || (insertIncorrectRecords == NoYes::No && errorTxt == ''))
                                {
                                    if (currencyCode == ISOCurrencyCodeHelper::getISOCurrencyCodeAlpha(ISOCurrencyCodes::SEK))
                                    {
                                        totalAmount_SEK += (ledgerJournalTrans.AmountCurCredit - ledgerJournalTrans.AmountCurDebit);
                                    }

                                    if (currencyCode == ISOCurrencyCodeHelper::getISOCurrencyCodeAlpha(ISOCurrencyCodes::EUR))
                                    {
                                        totalAmount_EUR += (ledgerJournalTrans.AmountCurCredit - ledgerJournalTrans.AmountCurDebit);
                                    }

                                    numOfRecord ++;
                                }
                            }
                            if (errorTxt == "@SYS68580")
                            {
                                errorTxt = strFmt("@SYS82640", paymId);
                            }
                            if (extraReferenceCode && errorTxt == '')
                                {
                                    //Check if extra total amount with over under payment
                                    if (-ledgerJournalTrans.amount() != extraTotalAmount
                                        && abs(-ledgerJournalTrans.amount() - extraTotalAmount) > CustParameters::findByCompany(ledgerJournalTrans.Company).MaxMSTOverUnder)
                                    {
                                        errorTxt = "@SYS111576";
                                        if (insertIncorrectRecords == NoYes::No && errorTxt != '')
                                        {
                                            if (currencyCode == ISOCurrencyCodeHelper::getISOCurrencyCodeAlpha(ISOCurrencyCodes::SEK))
                                            {
                                                totalAmount_SEK -= (ledgerJournalTrans.AmountCurCredit - ledgerJournalTrans.AmountCurDebit);
                                            }
                                            if (currencyCode == ISOCurrencyCodeHelper::getISOCurrencyCodeAlpha(ISOCurrencyCodes::EUR))
                                            {
                                                totalAmount_EUR -= (ledgerJournalTrans.AmountCurCredit - ledgerJournalTrans.AmountCurDebit);
                                            }
                                            extraError = true;
                                            numOfRecord --;
                                        }
                                    }
                                }
                            if (insertIncorrectRecords == NoYes::Yes || (insertIncorrectRecords == NoYes::No && errorTxt == ''))
                            {
                                if (errorTxt)
                                {
                                    errorSomewhere = true;
                                    ledgerJournalTrans.PaymentStatus = CustVendPaymStatus::Recieved;
                                }
                                else
                                {
                                    ledgerJournalTrans.PaymentStatus = CustVendPaymStatus::Confirmed;
                                }
                                ledgerJournalTrans.update();
                                this.fillControlReport(ledgerJournalTrans, tmpCustInPaymBGMax_SE.TransactionType, errorTxt);
                            }
                            if (LedgerJournalTrans.Invoice)
                            {
                                ledgerJournalTrans.Invoice = '';
                                ledgerJournalTrans.doUpdate();
                            }
                            if (!insertRecord && errorTxt != '')
                            {
                                error(errorTxt);
                            }
                            break;
                        // Extra reference number record
                        case '22', '23':
                            break;
                        // Information record
                        case '25':
                            break;
                        // Name record
                        case '26':
                            break;
                        // Address record 1
                        case '27':
                            break;
                        // Addrees record 2
                        case '28':
                            break;
                        // Corporate identity record
                        case '29':
                            break;
                        // Trailer record
                        case '70':
                            if (ledgerJournalTrans && insertIncorrectRecords == NoYes::No && errorTxt != '')
                            {
                                ledgerJournalTrans.delete();
                            }

                            int endQty = str2int(subStr(tmpCustInPaymBGMax_SE.TransactionText, 3, 8)) + str2int(subStr(tmpCustInPaymBGMax_SE.TransactionText, 11, 8));

                            if (endQty != numOfRecord)
                            {
                                endErrorTxt1 = strFmt("@SYS18621", numOfRecord, endQty);
                                errorSomewhere = true;
                            }

                            if (endRecAmount_SEK != totalAmount_SEK)
                            {
                                endErrorTxt2 = strFmt("@SYS82643", endRecAmount_SEK, ISOCurrencyCodeHelper::getISOCurrencyCodeAlpha(ISOCurrencyCodes::SEK), totalAmount_SEK, ISOCurrencyCodeHelper::getISOCurrencyCodeAlpha(ISOCurrencyCodes::SEK));
                                errorSomewhere = true;
                            }

                            if (endRecAmount_EUR != totalAmount_EUR)
                            {
                                endErrorTxt3 = strFmt("@SYS82643", endRecAmount_EUR, ISOCurrencyCodeHelper::getISOCurrencyCodeAlpha(ISOCurrencyCodes::EUR), totalAmount_EUR, ISOCurrencyCodeHelper::getISOCurrencyCodeAlpha(ISOCurrencyCodes::EUR));
                                errorSomewhere = true;
                            }
                            break;
                        default:
                    }
                }
            }

            if (numOfRecord > 0)
            {
                ttscommit;
            }
            else
            {
                ttsabort;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineAmount</Name>
				<Source><![CDATA[
    private real getLineAmount(str _transactionText)
    {
        return str2num(subStr(_transactionText, 51, 18)) / 100;
    }

]]></Source>
			</Method>
			<Method>
				<Name>importFileText</Name>
				<Source><![CDATA[
    public TempStr importFileText()
    {
        return 'Bankgirot Max  ' + "@SYS4047" + ': ' + filename;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interfaceName</Name>
				<Source><![CDATA[
    className interfaceName()
    {
        return 'Bankgirot Max (SE)';
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return new CustInPaymSE_BGMax().interfaceName();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>