<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkBlockingReason</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class is an abstraction for blocking reasons for work.
/// </summary>
public abstract class WHSWorkBlockingReason
{
    protected WHSWorkTable workTable;
    protected WHSWorkBlockingReasonType reasonType;
    private boolean manualUnBlock;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init(
        WHSWorkBlockingReasonType   _reasonType,
        WHSWorkTable                _workTable)
    {
        reasonType = _reasonType;
        workTable = _workTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newManualUnBlockFromReasonType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a new blocking reason based on the type that allows manual unblocking.
    /// </summary>
    /// <param name = "_reasonType">The reason type.</param>
    /// <param name = "_workTable">The work.</param>
    /// <returns>A new blocking reason based on the type.</returns>
    [Hookable(false)]
    internal static WHSWorkBlockingReason newManualUnBlockFromReasonType(WHSWorkBlockingReasonType _reasonType, WHSWorkTable _workTable)
    {
        WHSWorkBlockingReason instance = WHSWorkBlockingReason::newFromReasonType(_reasonType, _workTable);
        instance.manualUnBlock = true;

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromReasonType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a new blocking reason based on the type.
    /// </summary>
    /// <param name = "_reasonType">The reason type.</param>
    /// <param name = "_workTable">The work.</param>
    /// <returns>A new blocking reason based on the type.</returns>
    public static WHSWorkBlockingReason newFromReasonType(WHSWorkBlockingReasonType _reasonType, WHSWorkTable _workTable)
    {
        WHSWorkBlockingReasonTypeAttribute attribute = new WHSWorkBlockingReasonTypeAttribute(_reasonType);
        WHSWorkBlockingReason instance = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(WHSWorkBlockingReason), attribute) as WHSWorkBlockingReason;
        
        if (!instance)
        {
            throw Error(Error::wrongUseOfFunction(funcName()));
        }
        
        instance.init(_reasonType, _workTable);
        
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>blockReason</Name>
				<Source><![CDATA[
    /// <summary>
    /// Blocks the reason.
    /// </summary>
    internal void blockReason()
    {
        WHSWorkBlockingReasonAssociation::findOrCreate(workTable.WorkId, reasonType);   
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryUnBlockReason</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unblocks the reason if possible.
    /// </summary>
    /// <returns>The result of the unblocking.</returns>
    internal WHSWorkUnBlockingValidationResult tryUnBlockReason()
    {
        WHSWorkUnBlockingValidationResult result = this.canUnBlockReason();

        if (result.parmCanUnBlockResult())
        {
            this.unblockReason();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUnBlockReason</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the blocking reason can be unblocked.
    /// </summary>
    /// <returns>The result of the validation.</returns>
    public abstract WHSWorkUnBlockingValidationResult canUnBlockReason()
    {}

]]></Source>
			</Method>
			<Method>
				<Name>canCancelBlockedWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the blocked work can be canceled.
    /// </summary>
    /// <returns>true if the blocked work can be canceled; otherwise false.</returns>
    [Hookable(false)]
    internal boolean canCancelBlockedWork()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBlocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the work is blocked by the reason code.
    /// </summary>
    /// <returns>true if the work is blocked by the reason code; otherwise, false.</returns>
    public final boolean isBlocked() 
    {
        return WHSWorkBlockingReasonAssociation::find(workTable.workId, reasonType).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>detailedBlockingMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a string representing the blocking message when we are blocked by the current reason.
    /// </summary>
    /// <returns>A string representing the detailed blocking message.</returns>
    protected internal abstract str detailedBlockingMessage()
    {}

]]></Source>
			</Method>
			<Method>
				<Name>overrideUnBlockValidation</Name>
				<Source><![CDATA[
    /// <summary>
    /// If the work blocking reason type is allowed to be be manually unblocked and the manual unblock is being performed all unblock validation will be overridden.
    /// </summary>
    /// <returns>true if an override is possible; otherwise false</returns>
    [Hookable(false)]
    protected boolean overrideUnBlockValidation()
    {
        return manualUnBlock
            && this.allowManualUnblock();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unBlockReason</Name>
				<Source><![CDATA[
    private void unBlockReason()
    {
        WHSWorkBlockingReasonAssociation::deleteAssociation(workTable.WorkId, this.reasonType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a description of the blocking reason.
    /// </summary>
    /// <returns>
    /// A description of the blocking reason.
    /// </returns>
    [Hookable(false)]
    protected internal WHSWorkBlockingReasonDescription description()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowManualUnblock</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows an override of the unblocking of reason code validation when the 
    /// unblock is called from a manual button click.
    /// </summary>
    /// <returns>true if manual blocking is allowed; otherwise false</returns>
    [Hookable(false)]
    protected internal boolean allowManualUnblock()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isManualUnBlock</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean isManualUnBlock()
    {
        return manualUnBlock;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>