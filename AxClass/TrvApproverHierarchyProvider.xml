<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvApproverHierarchyProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class controlling workflow hierarchy that uses user defined approver structure.
/// </summary>
class TrvApproverHierarchyProvider implements WorkflowHierarchyProvider
{
    const str Workflow_InterimApprover = 'Employee';
    const str Workflow_LastApprover = 'IsLastApprover';

    ExpressionDataSource dataSource;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>convertToNodeDataType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a value to the data type that the provider supports.
    /// </summary>
    /// <param name="_dataType">
    /// The value that identifies the extended data type from which to convert.
    /// </param>
    /// <param name="_value">
    /// The value that is converted.
    /// </param>
    /// <param name="_workflowContext">
    /// An instance of the <c>WorkflowContext</c> class that contains information about the workflow
    /// instance.
    /// </param>
    /// <returns>
    /// The value converted to the data type that the provider supports.
    /// </returns>
    public anytype convertToNodeDataType(extendedDataTypeName dataType, anytype value, WorkflowContext _workflowContext)
    {
        UserId                  approver;
        SysDictType             dictType;
        extendedTypeId          dataTypeId = extendedTypeName2Id(dataType);

        if (dataTypeId == 0)
        {
            throw error(strfmt("@SYS96579", dataType));
        }

        dictType = new SysDictType(dataTypeId);

        // check if the value is of the same type as dataType
        if (dictType.baseType() != typeof(value))
        {
            throw error(strfmt("@SYS119361", dataType, dictType.baseType()));
        }

        if (dictType.id() == extendedtypenum(UserId) || dictType.isExtending(extendedtypenum(UserId)))
        {
            approver = value;
        }
        else
        {
            throw error("@SYS118082");
        }

        if (!approver)
        {
            throw error("Workflow person not found during approver hierarchy processing");
        }

        return approver;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertUserIdToNodeDataType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a user ID to the data type that the provider supports.
    /// </summary>
    /// <param name="_userId">
    /// The user ID to convert.
    /// </param>
    /// <param name="_workflowContext">
    /// An instance of the <c>WorkflowContext</c> class that contains information about the workflow
    /// instance.
    /// </param>
    /// <returns>
    /// The value that identifies the converted user ID.
    /// </returns>
    public anytype convertUserIdToNodeDataType(userId userId, WorkflowContext _workflowContext)
    {
        return userId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the design-time <c>WorkflowHierarchyProviderNode</c> attributes.
    /// </summary>
    /// <returns>
    /// An instance of the <c>ExpressionDataSource</c> class.
    /// </returns>
    /// <remarks>
    /// Nodes in a hierarchy are homogeneous. The attributes are used to define filter and stop conditions.
    /// </remarks>
    public ExpressionDataSource getDataSource()
    {
        return dataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextInterimApprover</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the next interim approver
    /// </summary>
    /// <param name = "_workflowCorrelationId">The workflow correlation ID.</param>
    /// <param name = "_nextIndex">The index of the next approver.</param>
    /// <returns>The user ID of the next approver.</returns>
    private static UserId getNextInterimApprover(WorkflowCorrelationId _workflowCorrelationId, int _nextIndex)
    {
            TrvInterimApprover approverTable;

            select Approver from approverTable
            where approverTable.WorkflowCorrelationId == _workflowCorrelationId
                && approverTable.ApproverOrder == _nextIndex;

            return approverTable.Approver;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the next node in the workflow assignment chain.
    /// </summary>
    /// <param name = "_nodeId">Current node the workflow is assigned to.</param>
    /// <param name = "_level">Current level the workflow is at.</param>
    /// <param name = "workflowContext">The context of the workflow.</param>
    /// <returns></returns>
    public WorkflowHierarchyProviderNode getNextNode(anytype _nodeId, WorkflowHierarchyLevel _level, WorkflowContext workflowContext)
    {
        int                         nextApproverIndex = _level + 1;
        WorkflowUser                nextApproverUser, delegateUser;
        WorkflowCorrelationId       workflowCorrelationId;
        SysWorkflowTable            sysWorkflowTable;
        TrvExpTable                 trvExpTable = TrvExpTable::findRecId(workflowContext.parmRecId());
        boolean                     valid;
        ExpressionDataSource        nodeDataSource = ExpressionDataSource::newDataSourceValue(dataSource.parmName());

        workflowCorrelationId = workflowContext.parmRootCorrelationId();

        do
        {
            if (TrvApproverHierarchyProvider::isLastInterimApprover(workflowCorrelationId, _level))
            {
                nextApproverUser = HcmWorker::findPersonUser(trvExpTable.FinalApprover).User;

                nodeDataSource.addField(ExpressionField::newFieldValue(Workflow_LastApprover, extendedtypestr(TrvIsLastApprover), true));
            }
            else
            {
                nextApproverUser = TrvApproverHierarchyProvider::getNextInterimApprover(workflowCorrelationId, nextApproverIndex);

                nodeDataSource.addField(ExpressionField::newFieldValue(Workflow_LastApprover, extendedtypestr(TrvIsLastApprover), false));
            }

            valid = TrvApproverHierarchyProvider::validateUser(nextApproverUser);

            if (valid && !TrvApproverHierarchyProvider::ignoreApproverDelegate(trvExpTable, nextApproverIndex, nextApproverUser))
            {
                sysWorkflowTable = SysWorkflowTable::find(workflowContext.parmWorkflowCorrelationId());
                delegateUser = SysWorkflowHelper::getDelegate(nextApproverUser, WorkflowVersionTable::find(sysWorkflowTable.ConfigurationId));

                if (nextApproverUser != delegateUser)
                {
                    if (TrvApproverHierarchyProvider::validateUser(delegateUser))
                    {
                        if (TrvApproverHierarchyProvider::canBeDelegatedUser(delegateUser, trvExpTable))
                        {
                            nextApproverUser = delegateUser;
                        }
                    }
                }
            }

            if (!valid)
            {
                // In the event of an invalid user being selected and none further in the chain, assign to admin so the workflow doesn't stall
                if (nextApproverUser == '' || TrvApproverHierarchyProvider::isLastInterimApprover(workflowCorrelationId, nextApproverIndex))
                {
                    nextApproverUser = 'Admin';
                    valid = true;
                }
                else
                {
                    // Move to the next approver to see if that one is valid.
                    nextApproverIndex++;
                }
            }
        }
        while (!valid);

        TrvApproverHierarchyProvider::setHasApprovedToOtherApprovers(workflowContext, nextApproverIndex);

        // advance the current approver flag
        TrvApproverHierarchyProvider::setNextApproverToCurrent(WorkflowCorrelationId, nextApproverIndex);

        return TrvApproverHierarchyProviderNode::newProviderNode(nextApproverUser, nextApproverUser, nextApproverIndex, nodeDataSource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodeDataType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>ExtendedDataTypeName</c> value.
    /// </summary>
    /// <returns>
    ///    The <c>ExtendedDataTypeName</c> value that identifies the extended data type.
    /// </returns>
    /// <remarks>
    ///    <c>ExtendedDataTypeName</c> value represents the data type that the
    ///    <c>WorkflowHierarchyProvider</c> implementation expects as input to the <c>getNode</c> method.
    /// </remarks>
    public extendedDataTypeName getNodeDataType()
    {
        return extendedtypestr(UserId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSupportedDataType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>Set</c> of the extended data types that the provider supports.
    /// </summary>
    /// <returns>
    /// A <c>Set</c> of supported extended data type of type <c>ExtendedDataTypeName</c>.
    /// </returns>
    /// <remarks>
    /// The <c>Set</c> value represents the data types that the provider can convert into the node data
    /// type.This is also used to filter the fields used in the provider UI.
    /// </remarks>
    public Set getSupportedDataType()
    {
        Set supportedDataTypes = new Set(Types::String);

        supportedDataTypes.add(extendedtypestr(HcmPersonnelNumberId));
        supportedDataTypes.add(extendedtypestr(userId));
        supportedDataTypes.add(extendedtypestr(DirPartyRecId));

        return supportedDataTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the provider and initialized the design time datasource.
    /// </summary>
    void new()
    {
        dataSource = ExpressionDataSource::newDataSourceDefinition(Workflow_InterimApprover, "@SYS101316");
        dataSource.addField(ExpressionField::newFieldDefinition(Workflow_LastApprover, extendedtypestr(TrvIsLastApprover), "@Expense:IsLastApprover"));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the user is a valid approver.
    /// </summary>
    /// <param name = "_user">The user to validate.</param>
    /// <returns>True if the user is a valid approver, otherwise false.</returns>
    private static boolean validateUser(UserId _user)
    {
        UserInfo userInfo;

        select Enable from userInfo where userInfo.id == _user;

        if (!userInfo.enable)
        {
            return false;
        }

        DirPersonUser dirPersonInfo = DirPersonUser::find(_user);

        if (dirPersonInfo.ValidTo < DateTimeUtil::utcNow())
        {
            return false;
        }

        if (!HcmEmployment::getActiveEmploymentsByWorker(HcmWorker::findByPerson(dirPersonInfo.PersonParty).RecId))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ignoreApproverDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// If delegate submits ER, then expense owner is auto-added as first interim approver, in this case
    //  we always want expense owner to remain interim approver, so ignore if approver delegate exist
    /// </summary>
    /// <param name = "_trvExpTable">Expense report being approved</param>
    /// <param name = "_nextIndex">The index of the next approver</param>
    /// <param name = "_userId">The user ID of the next approver</param>
    /// <returns>True if the expense report owner is the first approver, otherwise false</returns>
    private static boolean ignoreApproverDelegate(TrvExpTable _trvExpTable, int _nextIndex, UserId _userId)
    {
        return _nextIndex == 1 && _trvExpTable.CreatingWorker == HcmWorker::userId2Worker(_userId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLastInterimApprover</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the given index will be the last approver in the chain.
    /// </summary>
    /// <param name = "_workflowCorrelationId">The workflow correlation ID.</param>
    /// <param name = "_index">Index of the next approver.</param>
    /// <returns>True if the next approver will be the last approver, otherwise false.</returns>
    private static boolean isLastInterimApprover(WorkflowCorrelationId _workflowCorrelationId, int _index)
    {
        TrvInterimApprover approverTable;
        int maxIndex;

        select maxof(ApproverOrder) from approverTable
        where approverTable.WorkflowCorrelationId == _workflowCorrelationId;

        maxIndex = approverTable.ApproverOrder;

        if (_index == maxIndex)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHasApprovedToOtherApprovers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the current and all previous approvers to marked as having approved.
    /// </summary>
    /// <param name = "_workflowContext">The workflow context.</param>
    /// <param name = "_nextIndex">The index of the next approver.</param>
    private static void setHasApprovedToOtherApprovers(WorkflowContext _workflowContext, int _nextIndex)
    {
        TrvInterimApprover approverTable;
        WorkflowCorrelationId workflowCorrelationId;

        workflowCorrelationId = _workflowContext.parmWorkflowCorrelationId();

        ttsbegin;

        update_recordset approverTable
            setting HasApproved = true
            where approverTable.WorkflowCorrelationId == workflowCorrelationId &&
                approverTable.ApproverOrder < _nextIndex;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNextApproverToCurrent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the next approver flag from the existing records, and sets it for the new next approver.
    /// </summary>
    /// <param name = "_workflowCorrelationId">The workflow correlation ID.</param>
    /// <param name = "_nextIndex">Index of the next approver.</param>
    private static void setNextApproverToCurrent(WorkflowCorrelationId _workflowCorrelationId, int _nextIndex)
    {
        TrvInterimApprover  approverTable;

        ttsbegin;

        update_recordset approverTable
            setting isCurrentApprover = false
            where approverTable.WorkflowCorrelationId == _workflowCorrelationId;

        while select forupdate approverTable
            where approverTable.WorkflowCorrelationId == _workflowCorrelationId
            && approverTable.ApproverOrder == _nextIndex
        {
            approverTable.IsCurrentApprover = true;
            approverTable.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeDelegatedUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the report approval can be delegated to the given user.
    /// </summary>
    /// <param name = "_userId">User to delegate to.</param>
    /// <param name = "_trvExpTable">Expense report to delegate.</param>
    /// <returns>True if the report can be delegated to the user, otherwise false.</returns>
    private static boolean canBeDelegatedUser(UserId _userId, TrvExpTable _trvExpTable)
    {
        WorkflowTrackingStatusTable     workflowTrackingStatusTable;
        WorkflowTrackingTable           workflowTrackingTable;

        DirPersonUser dirPersonUser = DirPersonUser::find(_userId);

        if (_trvExpTable.CreatingWorker == HcmWorker::findByPerson(dirPersonUser.PersonParty).RecId)
        {
            return false;
        }

        select firstOnly RecId from workflowTrackingTable
        where workflowTrackingTable.TrackingContext == WorkflowTrackingContext::WorkItem &&
            workflowTrackingTable.TrackingType == WorkflowTrackingType::Approval &&
            workflowTrackingTable.User == _userId
        exists join workflowTrackingStatusTable
            where workflowTrackingStatusTable.RecId == workflowTrackingTable.WorkflowTrackingStatusTable &&
                workflowTrackingStatusTable.ContextTableId == tableNum(TrvExpTable) &&
                workflowTrackingStatusTable.ContextRecId == _trvExpTable.RecId &&
                workflowTrackingStatusTable.TrackingStatus == WorkflowTrackingStatus::Pending;

        return workflowTrackingTable.RecId == 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>