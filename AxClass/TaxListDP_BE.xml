<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxListDP_BE</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxListDP_BE</c> class provides data for the <c>TacList_BE</c> report.
/// </summary>
[
    SRSReportQuery(queryStr(TaxList_BE))
]
public class TaxListDP_BE extends SrsReportDataProviderPreProcessTempDB
{
    private const str FeatureReference = 'BE-00007';

    TaxListTmp_BE   taxListTmp_BE;
    TaxTrans_BE     taxTrans_BE;
    AmountMST       netTaxAmount;
    AmountMST       baseAmount;
    AmountMST       amountInclTax;
    TaxTrans        taxTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxListTmp_BE</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Queries the temporary table to retrieve the required report data.
    /// </summary>
    /// <returns>
    ///    The required report data from the temporary table.
    /// </returns>
    [
        SRSReportDataSet('TaxListTmp_BE')
    ]
    public TaxListTmp_BE getTaxListTmp_BE()
    {
        select taxListTmp_BE;
        return  taxListTmp_BE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the class object and adds ranges to query.
    /// </summary>
    private void init()
    {
        taxTrans_BE = new TaxTrans_BE();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the required data and inserts it into the temporary table.
    /// </summary>
    public void insertTmpTable()
    {
        LedgerDimensionAccount taxLedgerDimension;

        taxLedgerDimension = TaxTransGeneralJournalAccountEntry::getTaxLedgerDimensionForTaxTrans(taxTrans.RecId);

        taxListTmp_BE.AccountName       =   LedgerDimensionFacade::getMainAccountFromLedgerDimension(taxLedgerDimension).localizedName();
        taxListTmp_BE.AccountNum        =   LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(taxLedgerDimension);
        taxListTmp_BE.AmountInclTax     =   amountInclTax;
        taxListTmp_BE.TaxName           =   taxTrans.taxName();
        taxListTmp_BE.TaxCode           =   taxTrans.TaxCode;
        taxListTmp_BE.BaseAmount        =   baseAmount;
        taxListTmp_BE.NetTaxAmount      =   netTaxAmount;
        taxListTmp_BE.TaxBaseQty        =   taxTrans.TaxBaseQty;
        taxListTmp_BE.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public  void  processReport( )
    {
        QueryRun    queryRun;
        Query       query;

        this.init();
        query = this.parmQuery();
        query.dataSourceTable(tablenum(TaxTrans)).addRange(fieldnum(TaxTrans,TaxOrigin)).value(strfmt('!%1',SysQuery::value(TaxOrigin::TaxReporting)));
        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            taxTrans =   queryRun.get(tablenum(TaxTrans));
            taxTrans_BE.parmTaxTrans(taxTrans);
            amountInclTax = taxTrans_BE.amountInclTax();
            baseAmount    = taxTrans_BE.baseAmount();
            netTaxAmount  = taxTrans_BE.netTaxAmount();
            this.insertTmpTable();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>