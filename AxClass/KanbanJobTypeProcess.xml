<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanJobTypeProcess</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanJobTypeProcess</c> class controls kanban jobs that are of the process type.
/// </summary>
[LeanKanbanJobTypeFactoryAttribute(LeanKanbanJobType::Process)]
public class KanbanJobTypeProcess extends KanbanJobType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canChangeLicensePlateId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the license plate dimension can be changed.
    /// </summary>
    /// <returns>
    ///    true if the license plate dimension can be changed; otherwise, false.
    /// </returns>
    protected boolean canChangeLicensePlateId()
    {
        return    this.mustBeInventoryControlled()
               && (kanbanJob.Status == LeanKanbanJobStatus::NotPlanned
               ||  kanbanJob.Status == LeanKanbanJobStatus::Planned
               ||  kanbanJob.Status == LeanKanbanJobStatus::Completed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHaveBOM</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a kanban job can have a BOM.
    /// </summary>
    /// <returns>
    ///    true if the job can have a BOM; otherwise, false.
    /// </returns>
    public boolean canHaveBOM()
    {
        return kanbanJob.kanban().type().canHaveBOM();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHaveNonDefaultReceivedQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a kanban job can have a non-default received quantity.
    /// </summary>
    /// <returns>
    ///    true if the job can have a non-default received quantity; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Always returns true.
    /// </remarks>
    public boolean canHaveNonDefaultReceivedQty()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHaveScrapQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a kanban job can have scrap quantity.
    /// </summary>
    /// <returns>
    ///    true if the job can have scrap quantity; otherwise, false.
    /// </returns>
    public boolean canHaveScrapQty()
    {
        return kanbanJob.kanban().type().canHaveScrapQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the inventory movement related to the kanban job.
    /// </summary>
    public void deleteMovement()
    {
        if (this.mustBeInventoryControlled())
        {
            InventUpd_DeleteMovement::newMovement(kanbanJob.inventMovement(),false).updateNow();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the inventory dimensions for issue and receipt by merging the item dimensions and
    /// location dimensions.
    /// </summary>
    /// <param name="_kanban">
    /// A <c>Kanban</c> table buffer that is used to initialize the inventory dimensions.
    /// </param>
    /// <param name="_issueInventDim">
    /// A <c>InventDim</c> table buffer that is used to initialize the inventory dimensions.
    /// </param>
    /// <param name="_receiptInventDim">
    /// A <c>InventDim</c> table buffer that is used to initialize the inventory dimensions.
    /// </param>
    public void initInventDimIds(
        Kanban    _kanban,
        InventDim _issueInventDim,
        InventDim _receiptInventDim)
    {
        InventDim   receiptInventDim = _receiptInventDim.data();

        // validation takes place in the KanbanLicensePlate class
        // should a license plate have already been set, then the original value will be returned.
        if (this.mustBeInventoryControlled())
        {
            receiptInventDim.LicensePlateId = KanbanLicensePlate::newStandard(kanbanJob,false,this).setLicensePlate(receiptInventDim);
        }

        super(_kanban,_issueInventDim,receiptInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTransType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the <c>LedgerTransType</c> enumeration value to use with ledger postings.
    /// </summary>
    /// <returns>
    ///    A <c>LedgerTransType</c> enumeration value.
    /// </returns>
    public LedgerTransType ledgerTransType()
    {
        return LedgerTransType::Production;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeInventoryControlled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the kanban job must be inventory-controlled.
    /// </summary>
    /// <returns>
    ///    true if the kanban job must be inventory-controlled; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Inventory-controlled means that ending a kanban job creates inventory transactions.
    /// </remarks>
    public boolean mustBeInventoryControlled()
    {
        boolean result = kanbanJob.InventTransId != '';

        if (   !result
            && !kanbanJob.RecId)
        {
            result = this.mustBeInventoryControlledReceipt();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustHaveKanbanJobIssue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a kanban job must have a <c>KanbanJobIssue</c> record.
    /// </summary>
    /// <returns>
    ///    A Boolean value that indicates whether a <c>KanbanJobIssue</c> record is required.
    /// </returns>
    /// <remarks>
    ///    A kanban whose first job obtains semi-finished items can trigger event kanbans and therefore need
    ///    the source document line, which is an issue record.
    /// </remarks>
    public boolean mustHaveKanbanJobIssue()
    {
        return    !kanbanJob.existPreviousJob()
               && kanbanJob.leanProductionFlowActivity().PickUpSemiFinished;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventTransIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>KanbanJob</c> inventory transaction ids as required.
    /// </summary>
    public void setInventTransIds()
    {
        if (   !kanbanJob.InventTransId
            && this.mustBeInventoryControlled())
        {
            kanbanJob.InventTransId         = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();
            kanbanJob.InventTransDataAreaId = kanbanJob.InventTransId ? appl.company().dataArea(tableNum(InventTransOrigin)) : '';
        }
        var sourceRequirement = KanbanSourceRequirement::findKanban(kanbanJob.Kanban);
        if (sourceRequirement.ParentSourceRequirementTableId == tableNum(SalesLine) && kanbanJob.Type == LeanKanbanJobType::Process)
        {
            var salesLine = SalesLine::findRecId(sourceRequirement.ParentSourceRequirementRecId);
            if (salesLine)
            {
                kanbanJob.IssueInventTransId = salesLine.InventTransId;
                kanbanJob.IssueInventTransDataAreaId= salesLine.dataAreaId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sysModule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the <c>SysModule</c> enumeration value to use with the ledger postings.
    /// </summary>
    /// <returns>
    ///    A <c>SysModule</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    The base class method is abstract.
    /// </remarks>
    public SysModule sysModule()
    {
        return SysModule::Prod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the class.
    /// </summary>
    /// <param name="_kanbanJob">
    ///    The <c>KanbanJob</c> table buffer to use to instantiate the class.
    /// </param>
    /// <returns>
    ///    An instance of the <c>KanbanJobTypeProcess</c> class.
    /// </returns>
    public static KanbanJobType construct(KanbanJob _kanbanJob)
    {
        return new KanbanJobTypeProcess(_kanbanJob);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>