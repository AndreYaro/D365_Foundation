<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25Query</Name>
	<SourceCode>
		<Declaration><![CDATA[
// General class for data insertion and selection from a plain
// register data model
class rTax25Query
{
    RTax25RegType               regType;
    RTax25RegisterTable         registerTable;

    RTax25RegisterId            registerId;
    RTax25RegisterJournalNum    journalNum;
    RTax25PeriodType            periodType;
    RTax25PeriodNum             periodNum;
    Yr                          fiscalYear;
    RTax25RegisterJournalType   registerJournalType;

    RTax25RegisterJournalTrans  journalTrans;
    RTax25RegisterLineNum64     currentLineNum;
    List                        rangeList;

    container                   fieldBaseTypes;
    container                   fieldId;
    NumberOf                    fieldCount;

    RecordSortedList            regBuffer;
    SystemSequence              systemSequence;
    RTax25RegisterTransMap      trans;
    Query                       queryTrans;
    QueryRun                    queryRunTrans;
    boolean                     isDetached;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addBodyRecord</Name>
				<Source><![CDATA[
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
public RTax25RegisterTransMap addBodyRecord(RefRecId                 _profitTableRecId,
        container                _fieldValues,
        tableId                  _refTableId = 0,
        RefRecId                 _refRecId = 0,
        RTax25Description        _lineDescription = "",
                                                RTax25RegisterLineNum64  _lineNumber = 0,
        Amount                   _profitAmount = 0)
    {
        int balanceField = regType.balanceField();

        trans = this.initRecord(_profitTableRecId, _fieldValues, _lineDescription, _lineNumber);
        trans.BlockType = ReportBlockType::Body;

        if (balanceField == -1)
        {
            trans.ProfitAmount = _profitAmount;
        }
        else
        {
            trans.ProfitAmount = conpeek(_fieldValues, balanceField);
        }
        trans.RefTableId = _refTableId;
        trans.RefRecId   = _refRecid;

        regBuffer.ins(trans);
        return trans;
    }
]]></Source>
			</Method>
			<Method>
				<Name>addFooterRecord</Name>
				<Source><![CDATA[
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
public void addFooterRecord(RefRecId                    _profitTableRecId = 0,
        container                   _fieldValues = connull(),
        RTax25FieldId               _blockFieldId = 0,
        RTax25Description           _lineDescription = _blockFieldId ?
                                                         strfmt("@GLS103974",
                                                                conpeek(regType.fieldLabel(), _blockFieldId)) :
                                                         strfmt("@SYS7446"),
                                RTax25RegisterLineNum64     _lineNumber = 0)

    {
        ;

        trans = this.initRecord(_profitTableRecId, _fieldValues, _lineDescription, _lineNumber);

        trans.BlockType     = ReportBlockType::Footer;
        if (_blockFieldId)
            trans.BlockFieldNum = _blockFieldId;

        regBuffer.ins(trans);
    }
]]></Source>
			</Method>
			<Method>
				<Name>addHeaderRecord</Name>
				<Source><![CDATA[
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
public void addHeaderRecord(RefRecId                    _profitTableRecId = 0,
                                container                   _fieldValues = connull(),
                                RTax25FieldId               _blockFieldId = 0,
                                RTax25Description           _lineDescription = _blockFieldId ?
                                                                                 strfmt("@GLS104108",
                                                                                        conpeek(regType.fieldLabel(), _blockFieldId)) :
                                                                                 strfmt("@SYS4925"),
                                RTax25RegisterLineNumber    _lineNumber = 0)
    {
        int i;
        Types       fieldBaseType;
        container headerValues = regType.headerFields();

        if (headerValues)
        {
            if (conlen(headerValues) != this.fieldCount())
            {
            checkFailed(strfmt("@GLS103888", this.fieldCount()));
            return;
        }
        for (i = 1; i <= this.fieldCount(); i++)
        {
                fieldBaseType   = typeof(conpeek(headerValues, i));
            if (fieldBaseType != Types::Integer)
            {
                checkFailed(strfmt("@GLS103818", i, "@SYS3845",fieldBaseType));
                return;
            }
                if (conpeek(headerValues, i) != 1 && conpeek(headerValues, i) != 0)
            {
                checkFailed(strfmt("@SYS30705", "@GLS104110"));
                return;
            }
        }
        }

        trans.clear();
        if (systemSequence && regType.suspendRecIds())
            trans.RecId  = systemSequence.reserveValues(1, regType.detachedTableId());

        trans.RTax25RegisterTransMap::initFromRegisterJournalTrans(journalTrans);

        if (_lineNumber)
        {
            currentLineNum = _lineNumber;
        }
        else
        {
            if (systemSequence && regType.suspendRecIds())
                currentLineNum = -trans.RecId;
            else
                currentLineNum = currentLineNum + 1;
        }

        trans.LineNumber      = currentLineNum;
        trans.LineDescription = _lineDescription;
        trans.ManualInput     = NoYes::No;
        trans.RTax25ProfitTable = _profitTableRecId;
        trans.BlockType       = ReportBlockType::Header;
        if (_blockFieldId)
            trans.BlockFieldNum = _blockFieldId;

        regBuffer.ins(trans);
    }
]]></Source>
			</Method>
			<Method>
				<Name>addRange</Name>
				<Source><![CDATA[
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
public RTax25QueryRange addRange(RTax25FieldId _rangeFieldId, boolean _isNotContainerField = true)
    {
        RTax25QueryRange   range;

        if (isDetached || _isNotContainerField)
        {
            SysQuery::findOrCreateRange(queryTrans.dataSourceNo(1), _rangeFieldId);
        }
        else
        {
            range = RTax25QueryRange::newParameters(_rangeFieldId, this);
        rangeList.addEnd(range);
        }
        return range;
    }
]]></Source>
			</Method>
			<Method>
				<Name>addRangeValue</Name>
				<Source><![CDATA[
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
public RTax25QueryRange addRangeValue(RTax25FieldId _rangeFieldId, anytype _value, boolean _isNotContainerField = true)
    {
        RTax25QueryRange   range = this.addRange(_rangeFieldId, _isNotContainerField);
        ;

        if (isDetached || _isNotContainerField)
        {
            findOrCreateRange_W(queryTrans.dataSourceNo(1), _rangeFieldId, _value);
        }
        else
        {
        range.setValue(_value);
        }

        return range;
    }
]]></Source>
			</Method>
			<Method>
				<Name>checkInRange</Name>
				<Source><![CDATA[
private boolean checkInRange()
    {
        ListIterator          rangeListIterator;
        RTax25QueryRange      range;
        boolean               ret;

        if (rangeList.empty())
            return true;

        rangeListIterator = new ListIterator(rangeList);
        while (rangeListIterator.more())
        {
            range = rangeListIterator.value();
            if (range.interval())
            {
                ret = this.getField(range.field()) >= range.fromValue() &&
                      this.getField(range.field()) <= range.toValue();
            }
            else
            {
                ret = this.getField(range.field()) == range.value();
            }
            if (! ret)
                return ret;

            rangeListIterator.next();
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>clearRanges</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void clearRanges()
    {
        ListIterator rangeListIterator = new ListIterator(rangeList);

        while (! rangeList.empty())
        {
            rangeListIterator.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRecords</Name>
				<Source><![CDATA[
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
public void deleteRecords()
    {
        RTax25RegisterHideSetup registerHideSetup;
        RTax25RegisterTrans     regTrans;

        if (RTax25RegisterTrans::existAny(journalTrans.JournalNum,
                                          journalTrans.RegisterId,
                                          journalTrans.PeriodType,
                                          journalTrans.PeriodNum,
                                          journalTrans.FiscalYear))
        {
            delete_from regTrans
                where regTrans.RegisterId == registerId &&
                      regTrans.JournalNum == journalNum &&
                      regTrans.FiscalYear == fiscalYear &&
                      regTrans.PeriodType == periodType &&
                      regTrans.PeriodNum  == periodNum;
        }
        if (RTax25Parameters::find().CancelRegisters)
        {
            delete_from registerHideSetup
                where registerHideSetup.TableTrans == NoneTableTrans::Transaction &&
                      registerHideSetup.RegisterId == journalTrans.RegisterId     &&
                      registerHideSetup.FiscalYear == journalTrans.FiscalYear     &&
                      registerHideSetup.PeriodNum  == journalTrans.PeriodNum      &&
                      registerHideSetup.PeriodType == journalTrans.PeriodType     &&
                      registerHideSetup.JournalNum == journalTrans.JournalNum;

            journalTrans.Cancelled = NoYes::Yes;
            journalTrans.doUpdate();

            journalTrans.Cancelled = NoYes::No;
            journalTrans.Status    = RTax25RegisterStatus::NotCalculated;
            journalTrans.insert();
        }
        else
        {
            delete_from trans
                where trans.JournalTransRefRecId == journalTrans.RecId;
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>fieldBaseTypes</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public container fieldBaseTypes()
    {
        return fieldBaseTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldCount</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public NumberOf fieldCount()
    {
        return fieldCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>first</Name>
				<Source><![CDATA[
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
public boolean first(RefRecId        _profitTableRecId = 0,
                         ReportBlockType _blockType        = ReportBlockType::Body)
    {
        if (! queryTrans)
            queryTrans = this.createRegQuery(_profitTableRecId, _blockType);

        queryRunTrans = new QueryRun(queryTrans);
        queryRunTrans.next();
        trans = queryRunTrans.get(trans.TableId);

        if (! trans.RecId)
            return false;

        if (! isDetached)
        {
            while (! this.checkInRange())
        {
                queryRunTrans.next();
                trans = queryRunTrans.get(trans.TableId);
                if (! trans.RecId)
                return false;
        }
        }
        return true;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getField</Name>
				<Source><![CDATA[
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
public anytype getField(RTax25FieldId   _fieldId)
    {
        Common   common;
        ;

        if (isDetached)
        {
            common  = trans;
            return common.(conpeek(fieldId, _fieldId));
        }
        return conpeek(trans.RegisterValues, _fieldId);
    }
]]></Source>
			</Method>
			<Method>
				<Name>getFieldTotal</Name>
				<Source><![CDATA[
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
public real getFieldTotal(RTax25FieldId _fieldId,
                              RTax25FieldId _rangeFieldId,
                              anytype _rangeValue)
    {
        RTax25RegisterTrans regTrans;
        Common                      common;
        real ret;
        QueryRun                    queryRun;
        Query                       query  = this.createRegQuery();

        if (isDetached)
        {
            if (_rangeFieldId)
                findOrCreateRange_W(query.dataSourceNo(1), conpeek(fieldId, _rangeFieldId), _rangeValue);
            query.dataSourceNo(1).addSelectionField(conpeek(fieldId, _fieldId), SelectionField::Sum);

            queryRun = new QueryRun(query);
            queryRun.next();
            common = queryRun.get(trans.TableId);

            return common.(conpeek(fieldId, _fieldId));
        }

        while select RegisterValues from regTrans
            order by LineNumber
            where regTrans.RegisterId          == registerId              &&
                  regTrans.JournalNum          == journalNum              &&
                  regTrans.FiscalYear          == fiscalYear              &&
                  regTrans.PeriodType          == periodType              &&
                  regTrans.PeriodNum           == periodNum               &&
                  regTrans.RegisterJournalType == registerJournalType     &&
                  regTrans.BlockType           == ReportBlockType::Body
        {
            if (! _rangeFieldId || conpeek(regTrans.RegisterValues, _rangeFieldId) == _rangeValue)
            {
                ret += conpeek(regTrans.RegisterValues, _fieldId);
            }
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getProfitAmountTotal</Name>
				<Source><![CDATA[
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
public real getProfitAmountTotal(RefRecId _profitTableRecId)
    {
        RTax25RegisterTransMap  regTransMap;
        RTax25RegisterTrans regTrans;

        if (isDetached)
        {
            regTransMap = new SysDictTable(regType.detachedTableId()).makeRecord();
            select sum(ProfitAmount) from regTransMap
                where regTransMap.JournalTransRefRecId == journalTrans.RecId      &&
                      regTransMap.BlockType            == ReportBlockType::Body   &&
                      regTransMap.RTax25ProfitTable    == _profitTableRecId;
            return regTransMap.ProfitAmount;
        }

        select sum(ProfitAmount) from regTrans
            where regTrans.RegisterId          == registerId              &&
                  regTrans.JournalNum          == journalNum              &&
                  regTrans.FiscalYear          == fiscalYear              &&
                  regTrans.PeriodType          == periodType              &&
                  regTrans.PeriodNum           == periodNum               &&
                  regTrans.RegisterJournalType == registerJournalType     &&
                  regTrans.BlockType           == ReportBlockType::Body   &&
                  regTrans.rTax25ProfitTable   == _profitTableRecId;
        return regTrans.ProfitAmount;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getProfitTotal</Name>
				<Source><![CDATA[
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
public real getProfitTotal(RTax25FieldId _fieldId,
                               RefRecId      _profitTableRecId)
    {
        RTax25RegisterTrans regTrans;
        Common                  common;
        real ret;
        QueryRun                queryRun;
        Query                   query  = this.createRegQuery(_profitTableRecId);
        ;

        if (isDetached)
        {
            query.dataSourceNo(1).addSelectionField(conpeek(fieldId, _fieldId), SelectionField::Sum);

            queryRun = new QueryRun(query);
            queryRun.next();
            common = queryRun.get(trans.TableId);

            return common.(conpeek(fieldId, _fieldId));
        }

        while select RegisterValues from regTrans
            order by LineNumber
            where regTrans.RegisterId          == registerId              &&
                  regTrans.JournalNum          == journalNum              &&
                  regTrans.FiscalYear          == fiscalYear              &&
                  regTrans.PeriodType          == periodType              &&
                  regTrans.PeriodNum           == periodNum               &&
                  regTrans.RegisterJournalType == registerJournalType     &&
                  regTrans.BlockType           == ReportBlockType::Body   &&
                  regTrans.rTax25ProfitTable   == _profitTableRecId
        {
            ret += conpeek(regTrans.RegisterValues, _fieldId);
        }
        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getRecord</Name>
				<Source><![CDATA[
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
public RTax25RegisterTransMap getRecord()
    {
        return trans;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getTotalRecCount</Name>
				<Source><![CDATA[
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
public int64 getTotalRecCount()
    {
        RTax25RegisterTransMap         regTrans = new SysDictTable(regType.detachedTableId()).makeRecord();;

        select count(RecId) from regTrans
             where regTrans.JournalTransRefRecId == journalTrans.RecId &&
                   regTrans.BlockType            == ReportBlockType::Body;

        return regTrans.RecId;
    }
]]></Source>
			</Method>
			<Method>
				<Name>initRecord</Name>
				<Source><![CDATA[
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
protected RTax25RegisterTransMap initRecord(RefRecId                 _profitTableRecId = 0,
        container                _fieldValues = connull(),
        RTax25Description        _lineDescription = "",
                                                RTax25RegisterLineNum64  _lineNumber = 0)
    {
        trans.clear();
        if (systemSequence && regType.suspendRecIds())
            trans.RecId  = systemSequence.reserveValues(1, regType.detachedTableId());

        trans.RTax25RegisterTransMap::initFromRegisterJournalTrans(journalTrans);

        if (_lineNumber)
        {
            currentLineNum = _lineNumber;
        }
        else
        {
            if (systemSequence && regType.suspendRecIds())
            {
                currentLineNum = -trans.RecId;
            }
            else
            {
                currentLineNum = currentLineNum + 1;
            }
        }

        trans.LineNumber      = currentLineNum;
        trans.LineDescription = _lineDescription;
        trans.ManualInput     = NoYes::No;
        trans.rTax25ProfitTable = _profitTableRecId;
        if (isDetached)
        {
            this.fillDetachedTable(_fieldValues);
        }
        else
        {
            trans.RegisterValues = _fieldValues;
        }
        return trans;
    }
]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
public void new(RTax25RegType  _regType)
    {
        SysDictTable                dictTable;
        ;

        regType        = _regType;
        registerId     = regType.registerId();
        isDetached     = regType.detachedTableId();
        fieldBaseTypes = regType.fieldBaseType();
        fieldId        = regType.fieldId();
        fieldCount     = regType.fieldCount();

        rangeList      = new List(Types::Class);

        dictTable      = isDetached ?
                         new SysDictTable(regType.detachedTableId()) :
                         new SysDictTable(tablenum(RTax25RegisterTrans));

        trans = dictTable.makeRecord();

        this.initRegBuffer();

        trans.skipDataMethods(true);
        trans.skipTTSCheck(true);
        trans.skipDatabaseLog(true);
        trans.selectLocked(0);
        trans.skipEvents(true);
    }
]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
public boolean next()
    {
        do
        {
            queryRunTrans.next();
            trans = queryRunTrans.get(trans.TableId);
        }
        while (trans.RecId && ! isDetached && ! this.checkInRange());

        return trans.RecId != 0;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmJournalTrans</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public RTax25RegisterJournalNum parmJournalTrans(RTax25RegisterJournalTrans _journalTrans = journalTrans)
    {
        ;
        journalTrans        = _journalTrans;

        journalNum          = journalTrans.JournalNum;
        periodType          = journalTrans.PeriodType;
        periodNum           = journalTrans.PeriodNum;
        fiscalYear          = journalTrans.FiscalYear;
        registerJournalType = journalTrans.RegisterJournalType;

        return journalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
public static RTax25Query newParameters(RTax25RegisterType  _registerType,
                                            RTax25RegisterJournalTrans  _journalTrans,
                                            boolean                     _useDetachedTable = true)
    {
        RTax25Query query = new RTax25Query(RTax25RegType::construct(_registerType, _journalTrans.AssessedTaxRegisterType, _useDetachedTable));

        query.parmJournalTrans(_journalTrans);

        return query;
    }
]]></Source>
			</Method>
			<Method>
				<Name>createRegQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates query for tax register lines table.
    /// </summary>
    /// <param name="_profitTableRecId">
    /// Record ID of <c>RTax25ProfitTable</c> table record.
    /// </param>
    /// <param name="_blockType">
    /// Report block type.
    /// </param>
    /// <returns>
    /// Query object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Query createRegQuery(RefRecId        _profitTableRecId = 0,
                                ReportBlockType _blockType      = ReportBlockType::Body)
    {
        QueryBuildDataSource qbdt;

        queryTrans = new Query();

        qbdt  = queryTrans.addDataSource(trans.TableId);
        qbdt.addOrderByField(fieldName2Id(trans.TableId, 'LineNumber'));
        if (_blockType == ReportBlockType::Body   ||
            _blockType == ReportBlockType::Footer ||
            _blockType == ReportBlockType::Header)
            qbdt.addRange(fieldName2Id(trans.TableId, 'BlockType')).value(QueryValue(_blockType));
        if (_profitTableRecId)
            qbdt.addRange(fieldName2Id(trans.TableId, 'RTax25ProfitTable')).value(QueryValue(_profitTableRecId));

        if (isDetached)
        {
            qbdt.addRange(fieldName2Id(trans.TableId, 'JournalTransRefRecId')).value(QueryValue(journalTrans.RecId));
        }
        else
        {
            qbdt.addRange(fieldName2Id(trans.TableId, 'RegisterId')).value(QueryValue(registerId));
            qbdt.addRange(fieldName2Id(trans.TableId, 'JournalNum')).value(QueryValue(journalNum));
            qbdt.addRange(fieldName2Id(trans.TableId, 'FiscalYear')).value(QueryValue(fiscalYear));
            qbdt.addRange(fieldName2Id(trans.TableId, 'PeriodType')).value(QueryValue(periodType));
            qbdt.addRange(fieldName2Id(trans.TableId, 'PeriodNum')).value(QueryValue(periodNum));
        }

        return queryTrans;
    }
]]></Source>
			</Method>
			<Method>
				<Name>fillDetachedTable</Name>
				<Source><![CDATA[
    private void fillDetachedTable(container  _fieldValues)
    {
        int i;
        Common common = trans;
        FieldId curfieldId;
        Types curFieldType;

        for (i = 1; i <= min(fieldCount, conLen(_fieldValues)); i++)
        {
            curfieldId   = conpeek(fieldId, i);
            curFieldType = conPeek(fieldBaseTypes, i);

            switch (curFieldType)
            {
                case Types::Real:
                    common.(curfieldId) = any2real(conpeek(_fieldValues, i));
                    break;

                default:
                    common.(curfieldId) = conpeek(_fieldValues, i);
            }
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>getCurrentLineNum64</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RTax25RegisterLineNum64 getCurrentLineNum64()
    {
        return currentLineNum;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getRegType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RTax25RegType getRegType()
    {
        return regType;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getSortedList</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RecordSortedList getSortedList()
    {
        return regBuffer;
    }
]]></Source>
			</Method>
			<Method>
				<Name>initRegBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes tax register lines record buffer.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initRegBuffer()
    {
        regBuffer = new RecordSortedList(trans.TableId);
        if (isDetached)
        {
            regBuffer.sortOrder(fieldName2Id(trans.TableId, 'LineNumber'),
                                fieldName2Id(trans.TableId, 'JournalTransRefRecId'));
        }
        else
        {
            regBuffer.sortOrder(fieldnum(RTax25RegisterTrans, JournalNum),
                                fieldnum(RTax25RegisterTrans, PeriodType),
                                fieldnum(RTax25RegisterTrans, FiscalYear),
                                fieldnum(RTax25RegisterTrans, PeriodNum),
                                fieldnum(RTax25RegisterTrans, RegisterId),
                                fieldnum(RTax25RegisterTrans, LineNumber));
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>initSuspendRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Suspend automatic recId allocation for tax transactions lines.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initSuspendRecId()
    {
        if (regType.suspendRecIds())
        {
            systemSequence = new SystemSequence();
            systemSequence.suspendRecIds(regType.detachedTableId());
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>insertDatabase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts buffer with tax register lines into database and removes suspended automatic recId allocation .
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void insertDatabase()
    {
        if (regBuffer)
            regBuffer.insertDatabase();
        regBuffer = null;

        if (systemSequence)
            systemSequence.removeRecIdSuspension(regType.detachedTableId());
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>