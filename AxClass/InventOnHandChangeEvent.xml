<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventOnHandChangeEvent</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DataContract]
public class InventOnHandChangeEvent
{
    private str organizationId;
    private str productId;
    private str id;
    private InventOnHandChangeEventDimensionSet dimensions;
    private InventOnHandChangeEventQuantities quantities;
    private List reserveOffset;
    private List adjustmentOffset;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        dimensions = new InventOnHandChangeEventDimensionSet();
        quantities = new InventOnHandChangeEventQuantities();
        reserveOffset = new List(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrganizationId</Name>
				<Source><![CDATA[
    [DataMember('organizationId')]
    public str parmOrganizationId(str _organizationId = organizationId)
    {
        organizationId = _organizationId;
        return organizationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductId</Name>
				<Source><![CDATA[
    [DataMember('productId')]
    public str parmProductId(str _productId = productId)
    {
        productId = _productId;
        return productId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuantities</Name>
				<Source><![CDATA[
    [DataMember('quantities')]
    public InventOnHandChangeEventQuantities parmQuantities(InventOnHandChangeEventQuantities _quantities = quantities)
    {
        quantities = _quantities;
        return quantities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmId</Name>
				<Source><![CDATA[
    [DataMember('id')]
    public str parmId(str _id = id)
    {
        id = _id;
        return id;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimensionSet</Name>
				<Source><![CDATA[
    [DataMember('dimensions')]
    public InventOnHandChangeEventDimensionSet parmDimensionSet(InventOnHandChangeEventDimensionSet _dimensions = dimensions)
    {
        dimensions = _dimensions;
        return dimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReserveOffset</Name>
				<Source><![CDATA[
    [DataMember('onHandOffsetEvents')]
    public List parmReserveOffset(List _reserveOffset = reserveOffset)
    {
        reserveOffset = _reserveOffset;
        return reserveOffset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdjustmentOffset</Name>
				<Source><![CDATA[
    [DataMember('onHandAdjustmentOffsetEvents')]
    public List parmAdjustmentOffset(List _adjustmentOffset = adjustmentOffset)
    {
        adjustmentOffset = _adjustmentOffset;
        return adjustmentOffset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildFromInventSum</Name>
				<Source><![CDATA[
    public static InventOnHandChangeEvent buildFromInventSum(InventSum _inventSum, RecId inventSumQueueRecId)
    {
        var quantities = new InventOnHandChangeEventQuantities();
        quantities.parmFnoModifiers(InventOnHandChangeEventModifiers::buildFromInventSum(_inventSum));

        var changeEvent = new InventOnHandChangeEvent();
        changeEvent.parmId(int642str(inventSumQueueRecId));
        changeEvent.parmProductId(_inventSum.ItemId);
        changeEvent.parmOrganizationId(_inventSum.DataAreaId);
        changeEvent.parmDimensionSet(InventOnHandChangeEventDimensionSet::BuildDimensionSetFromInventSum(_inventSum));
        changeEvent.parmQuantities(quantities);

        return changeEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildZeroQtyEvent</Name>
				<Source><![CDATA[
    public static InventOnHandChangeEvent buildZeroQtyEvent(InventInventoryDataServiceInventSumQueueTemp _inventSumQueueTemp)
    {
        var changeEvent = new InventOnHandChangeEvent();
        var _inventDim = InventDim::findInLegalEntity(_inventSumQueueTemp.InventDimId, _inventSumQueueTemp.Company);
        if (_inventDim)
        {
            var zeroQuantities = new InventOnHandChangeEventQuantities();
            zeroQuantities.parmFnoModifiers(InventOnHandChangeEventModifiers::buildZeroQtyModifiers());
            changeEvent.parmId(int642str(_inventSumQueueTemp.RecId));
            changeEvent.parmProductId(_inventSumQueueTemp.ItemId);
            changeEvent.parmOrganizationId(_inventSumQueueTemp.Company);
            changeEvent.parmDimensionSet(InventOnHandChangeEventDimensionSet::BuildDimensionSetFromInventDim(_inventDim));
            changeEvent.parmQuantities(zeroQuantities);
        }

        return changeEvent;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>