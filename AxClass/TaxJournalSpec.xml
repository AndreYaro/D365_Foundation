<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxJournalSpec</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxJournalSpec</c> class is used by invoice reports to hold and return several variables. This class is derived from the <c>TaxSpec</c> class.
/// </summary>
final class TaxJournalSpec extends TaxSpec
{
    TaxJournalTrans taxJournalTrans;
    tableId         sourceTableId;
    recId           sourceRecId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initTaxSpecCodeSet</Name>
				<Source><![CDATA[
        private Set initTaxSpecCodeSet()
    {
        return new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        void new(tableId _sourceTableId, recId _sourceRecId)
    {
        ;
        sourceTableId   = _sourceTableId;
        sourceRecId     = _sourceRecId;

        released  = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxSpec</Name>
				<Source><![CDATA[
        boolean parmTaxSpec(
        boolean _canGroupOnTaxDirection = true
    )
    {
        TaxWriteSelection       taxWriteSelection;
        TaxGroup                lastTaxGroup;
        InventTransId           lastInventTransId;
        DimensionDisplayValue   lastOperationAccount;
        Set                     taxSpecCodeSet;

        DimensionAttributeValueCombination dimensionAttributeValueCombination;

        // <GEEHU>
        #ISOCountryRegionCodes
        boolean isCountryRegionHU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]);

        TaxJournalTransExchangeRateAmount taxJournalTransExchangeRateAmount;
        // </GEEHU>

        if (released  == NoYes::No)
        {
            taxSpecTmp.setTmp();
            lastTaxGroup        = '';
            lastInventTransId   = '';
            lastOperationAccount = '';
            taxSpecCodeSet = this.initTaxSpecCodeSet();

            while select taxJournalTrans
                where taxJournalTrans.TransTableId == sourceTableId    &&
                      taxJournalTrans.TransRecId   == sourceRecId
                outer join  DisplayValue, RecId from dimensionAttributeValueCombination
                order by taxJournalTrans.TaxGroup, taxJournalTrans.InventTransId, dimensionAttributeValueCombination.DisplayValue
                where dimensionAttributeValueCombination.RecId == taxJournalTrans.OperationLedgerDimension
            {
                if (taxJournalTrans.TaxPrintDetail != TaxPrintDetail::NoDetail)
                {
                    taxSpecTmp.clear();

                    if (taxJournalTrans.TaxCode && !taxJournalTrans.ExemptCode)
                    {
                        switch (taxJournalTrans.TaxPrintDetail)
                        {
                            case TaxPrintDetail::TaxCode:
                                taxSpecTmp.TaxSpecCode  = taxJournalTrans.TaxCode;
                                break;
                            case TaxPrintDetail::TaxGroup:
                                taxSpecTmp.TaxSpecCode  = taxJournalTrans.TaxGroup;
                                break;
                        }
                    }

                    switch (taxJournalTrans.TaxPrintDetail)
                    {
                        case TaxPrintDetail::TaxCode:
                            taxSpecTmp.ReportTaxSpecCode = taxJournalTrans.TaxCode;
                            break;
                        case TaxPrintDetail::TaxGroup:
                            taxSpecTmp.ReportTaxSpecCode = taxJournalTrans.TaxGroup;
                            break;
                    }

                    if (taxJournalTrans.TaxCode && taxJournalTrans.ExemptTax && taxJournalTrans.ExemptCode)
                    {
                        taxSpecTmp.TaxSpecCode  = taxJournalTrans.ExemptCode;
                    }

                    if (taxJournalTrans.TaxGroup         != lastTaxGroup ||
                        taxJournalTrans.InventTransId    != lastInventTransId ||
                        dimensionAttributeValueCombination.DisplayValue != lastOperationAccount)
                    {
                        taxSpecCodeSet       = this.initTaxSpecCodeSet();
                        lastTaxGroup         = taxJournalTrans.TaxGroup;
                        lastInventTransId    = taxJournalTrans.InventTransId;
                        lastOperationAccount = dimensionAttributeValueCombination.DisplayValue;
                    }

                    // Only upgrade these fields are empty.
                    if (!taxJournalTrans.TaxGroup && !taxJournalTrans.InventTransId && !taxJournalTrans.OperationLedgerDimension)
                    {
                        taxSpecCodeSet       = this.initTaxSpecCodeSet();
                    }

                    // <GEEHU>
                    if (isCountryRegionHU)
                    {
                        taxJournalTransExchangeRateAmount = TaxJournalTransExchangeRateAmount::findByTaxJournalTrans(taxJournalTrans.RecId);
                    }
                    // </GEEHU>

                    taxWriteSelection = this.parmTaxWriteSelection(_canGroupOnTaxDirection);

                    if (!taxSpecCodeSet.in(taxSpecTmp.TaxSpecCode) || (taxWriteSelection == TaxWriteSelection::TaxRate && taxJournalTrans.TaxPrintDetail == TaxPrintDetail::TaxCode))
                    {
                        taxSpecTmp.SourceBaseAmountCur  = taxJournalTrans.SourceBaseAmountCur;
                        // <GEEHU>
                        if (taxJournalTransExchangeRateAmount)
                        {
                            if (taxJournalTransExchangeRateAmount.ExchangeRateSourceBaseAmountRegulated)
                            {
                                taxSpecTmp.TaxBaseAmount = taxJournalTransExchangeRateAmount.ExchangeRateSourceBaseAmountRegulated;
                            }
                            else
                            {
                                taxSpecTmp.TaxBaseAmount = taxJournalTransExchangeRateAmount.ExchangeRateTaxBaseAmount;
                            }
                        }
                        else
                        {
                        // </GEEHU>
                            taxSpecTmp.TaxBaseAmount    = taxJournalTrans.TaxBaseAmount;
                        // <GEEHU>
                        }
                        // </GEEHU>
                        taxSpecTmp.TaxBaseQty           = taxJournalTrans.TaxBaseQty;
                        taxSpecCodeSet.add(taxSpecTmp.TaxSpecCode);
                    }
                    else
                    {
                        taxSpecTmp.SourceBaseAmountCur  = 0;
                        taxSpecTmp.TaxBaseAmount        = 0;
                        taxSpecTmp.TaxBaseQty           = 0;
                    }

                    taxSpecTmp.SourceTaxAmountCur       = taxJournalTrans.SourceTaxAmountCur;
                    taxSpecTmp.SourceRegulateAmountCur  = taxJournalTrans.SourceRegulateAmountCur;
                    // <GEEHU>
                    if (taxJournalTransExchangeRateAmount)
                    {
                        if (taxJournalTransExchangeRateAmount.ExchangeRateSourceRegulateAmount)
                        {
                            taxSpecTmp.TaxAmount        = taxJournalTransExchangeRateAmount.ExchangeRateSourceRegulateAmount;
                        }
                        else
                        {
                            taxSpecTmp.TaxAmount        = taxJournalTransExchangeRateAmount.ExchangeRateTaxAmount;
                        }
                    }
                    else
                    {
                    // </GEEHU>
                        taxSpecTmp.TaxAmount            = taxJournalTrans.TaxAmount;
                    // <GEEHU>
                    }
                    // </GEEHU>
                    taxSpecTmp.TaxCode                  = taxJournalTrans.TaxCode;
                    taxSpecTmp.SourceCurrencyCode       = taxJournalTrans.SourceCurrencyCode;
                    taxSpecTmp.TaxDirection             = taxJournalTrans.TaxDirection;
                    taxSpecTmp.TaxAutoGenerated         = taxJournalTrans.TaxAutoGenerated;
                    taxSpecTmp.TransDate                = taxJournalTrans.TransDate;
                    taxSpecTmp.euroTriangulation        = taxJournalTrans.euroTriangulation;
                    taxSpecTmp.ExemptTax                = taxJournalTrans.ExemptTax;
                    taxSpecTmp.ExemptCode               = taxJournalTrans.ExemptCode;
                    taxSpecTmp.TransRecId               = taxJournalTrans.TransRecId;
                    taxSpecTmp.TransTableId             = taxJournalTrans.TransTableId;

                    if (!taxJournalTrans.ExemptCode && taxJournalTrans.TaxPrintDetail != TaxPrintDetail::TaxGroup)
                    {
                        if (taxWriteSelection == TaxWriteSelection::PrintCode)
                        {
                            if (taxJournalTrans.PrintCode)
                            {
                                taxSpecTmp.PrintCode    = taxJournalTrans.PrintCode;
                            }
                            else
                            {
                                taxSpecTmp.PrintCode    = TaxTable::printCode(taxJournalTrans.TaxCode, taxJournalTrans.TransDate);
                            }
                        }
                        else if ((taxWriteSelection == TaxWriteSelection::TaxRate) && taxJournalTrans.TaxValue)
                        {
                            taxSpecTmp.PrintCode    = this.taxValue2str(taxJournalTrans.TaxValue);
                        }
                    }

                    if (taxJournalTrans.TaxPrintDetail != TaxPrintDetail::TaxGroup)
                    {
                        if (taxWriteSelection == TaxWriteSelection::PrintCode)
                        {
                            if (taxJournalTrans.PrintCode)
                            {
                                taxSpecTmp.ReportPrintCode = taxJournalTrans.PrintCode;
                            }
                            else
                            {
                                taxSpecTmp.ReportPrintCode = TaxTable::printCode(taxJournalTrans.TaxCode, taxJournalTrans.TransDate);
                            }
                        }
                        else if ((taxWriteSelection == TaxWriteSelection::TaxRate) && taxJournalTrans.TaxValue)
                        {
                            taxSpecTmp.ReportPrintCode = this.taxValue2str(taxJournalTrans.TaxValue);
                        }
                    }

                    taxSpecTmp.insert();
                }
            }

            select
                sum(TaxBaseQty),
                sum(SourceTaxAmountCur),
                sum(SourceBaseAmountCur),
                sum(SourceRegulateAmountCur),
                sum(TaxAmount),
                sum(TaxBaseAmount)
            from taxSpecTmp
            group by TaxSpecCode, TaxDirection, ExemptTax, ExemptCode, PrintCode, SourceCurrencyCode, TransDate, euroTriangulation, ReportTaxSpecCode, ReportPrintCode
            where taxSpecTmp.TransTableId == sourceTableId    &&
                  taxSpecTmp.TransRecId   == sourceRecId;
        }
        else
        {
            next taxSpecTmp;
        }

        released  = NoYes::Yes;

        if (taxSpecTmp)
        {
            taxCode             = taxSpecTmp.TaxSpecCode;
            taxDirection        = taxSpecTmp.TaxDirection;
            taxWriteCode        = taxSpecTmp.PrintCode;
            taxExemptTax        = taxSpecTmp.ExemptTax;
            taxExemptCode       = taxSpecTmp.ExemptCode;
            currencyCode        = taxSpecTmp.SourceCurrencyCode;
            taxExemptDescription    = '';
            reportingTaxCode = taxSpecTmp.ReportTaxSpecCode;
            reportingTaxWriteCode = taxSpecTmp.ReportPrintCode;

            if (taxSpecTmp.ExemptTax && taxSpecTmp.ExemptCode)
            {
                taxExemptDescription = TaxExemptCodeTable::txt(taxExemptCode, languageId);
                taxCode              = '';
                taxWriteCode         = '';
            }

            taxAmountCur    = taxSpecTmp.SourceRegulateAmountCur;
            taxAmountMST    = taxSpecTmp.TaxAmount;
            taxBaseAmountCur    = taxSpecTmp.SourceBaseAmountCur;
            taxBaseAmountMST    = taxSpecTmp.TaxBaseAmount;
            taxBaseQty          = taxSpecTmp.TaxBaseQty;

            // <GEEHU>
            if (isCountryRegionHU)
            {
                totalTaxAmountMST += taxSpecTmp.TaxAmount;
            }
            // </GEEHU>

            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTmpTaxWorkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the instance of the <c>TmpTaxWorkTrans</c> table.
    /// </summary>
    /// <param name="_tmpTaxWorkTrans">
    ///    The instance of the <c>TmpTaxWorkTrans</c> table to set; optional
    /// </param>
    void setTmpTaxWorkTrans(TmpTaxWorkTrans _tmpTaxWorkTrans = null)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxWriteSelection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the Enum TaxWriteSelection.
    /// </summary>
    /// <param name = "_canGroupOnTaxDirection">Determines whether group on TaxDirection</param>
    /// <returns>
    /// Returns the value of TaxWriteSelection.
    /// </returns>
    public TaxWriteSelection parmTaxWriteSelection(boolean _canGroupOnTaxDirection = true)
    {
        TaxWriteSelection taxWriteSelection;

        taxWriteSelection = TaxTable::find(taxJournalTrans.TaxCode).TaxWriteSelection;

        return taxWriteSelection;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>