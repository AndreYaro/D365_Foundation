<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReqWorkflow</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchReqWorkflow
{
    PurchReqTable               purchReqTable;
    PurchReqLine                purchReqLine;
    WorkflowVersionTable        workflowConfigurationTable;
    WorkflowComment             workflowComment;
    boolean                     submit;
    WorkflowWorkItemTable       workflowWorkItemTable;
    UserId                      userId;
    MenuItemName                menuItemName;
    WorkflowTypeName            workflowTemplateName;
    Args                        args;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialogOk</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Opens a dialog box for submitting a purchase requisition.
    /// </summary>
    /// <returns>
    ///    true if the dialog box was closed by pressing the Ok button; otherwise, false.
    /// </returns>
    public boolean dialogOk()
    {
        WorkflowSubmitDialog            workflowSubmitDialog;
        WorkflowWorkItemActionDialog    workflowWorkItemActionDialog;
        boolean                         ok;

        if (menuItemName == menuitemActionStr(PurchReqSubmitToWorkflow))
        {
            workflowSubmitDialog = WorkflowSubmitDialog::construct(this.parmWorkflowConfigurationTable());
            workflowSubmitDialog.preDialogRun += eventhandler(this.preWorkflowDialogRun);
            workflowSubmitDialog.run();
            this.parmWorkflowComment(workflowSubmitDialog.parmWorkflowComment());
            ok = workflowSubmitDialog.parmIsClosedOK();
        }
        else if (menuItemName == menuitemActionStr(PurchReqReSubmit))
        {
            workflowWorkItemActionDialog = WorkflowWorkItemActionDialog::construct( workflowWorkItemTable,
                                                                                    WorkflowWorkItemActionType::Resubmit,
                                                                                    new MenuFunction(menuitemActionStr(PurchReqReSubmit), MenuItemType::Action));
            workflowWorkItemActionDialog.preDialogRun += eventhandler(this.preWorkflowDialogRun);
            workflowWorkItemActionDialog.run();
            this.parmWorkflowComment(workflowWorkItemActionDialog.parmWorkflowComment());
            ok = workflowWorkItemActionDialog.parmIsClosedOK();
            userId = workflowWorkItemActionDialog.parmTargetUser();
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preWorkflowDialogRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the workflow dialog run event.
    /// </summary>
    protected void preWorkflowDialogRun()
    {
        PurchReqPreWorkflowController::main(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init(   Common                      _documentRecord,
                        MenuItemName                _menuItemName,
                        WorkflowVersionTable        _workflowConfigurationTable,
                        WorkflowWorkItemTable       _workflowWorkItemTable
                        )
    {
        if (_documentRecord.TableId == tableNum(PurchReqTable))
        {
            this.parmPurchReqTable(_documentRecord);
        }
        else
        {
            this.parmPurchReqLine(_documentRecord);
        }

        this.parmSubmit(_menuItemName == menuitemActionStr(PurchReqSubmitToWorkflow));
        this.parmMenuItemName(_menuItemName);
        this.parmWorkflowConfigurationTable(_workflowConfigurationTable);
        this.parmWorkflowWorkItemtable(_workflowWorkItemTable);
        this.parmWorkflowTemplateName(this.parmWorkflowConfigurationTable().workflowTable().TemplateName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMenuItemName</Name>
				<Source><![CDATA[
    public MenuItemName parmMenuItemName(MenuItemName _menuItemName = menuItemName)
    {
        menuItemName = _menuItemName;

        return menuItemName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchReqLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>PurchReqLine</c> record.
    /// </summary>
    /// <param name="_purchReqLine">
    ///    The <c>PurchReqLine</c> record to set.
    /// </param>
    /// <returns>
    ///    The current <c>PurchReqLine</c> record.
    /// </returns>
    public PurchReqLine parmPurchReqLine(PurchReqLine _purchReqLine = purchReqLine)
    {
        purchReqLine = _purchReqLine;

        return purchReqLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchReqTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>PurchReqTable</c> record.
    /// </summary>
    /// <param name="_purchReqTable">
    ///    The <c>PurchReqTable</c> record to set.
    /// </param>
    /// <returns>
    ///    The current <c>PurchReqTable</c> record.
    /// </returns>
    public PurchReqTable parmPurchReqTable(PurchReqTable _purchReqTable = purchReqTable)
    {
        purchReqTable = _purchReqTable;

        return purchReqTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubmit</Name>
				<Source><![CDATA[
    public boolean parmSubmit(boolean _submit = submit)
    {
        submit = _submit;

        return submit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowComment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>WorkflowComment</c> record.
    /// </summary>
    /// <param name="_workflowComment">
    ///    The <c>WorkflowComment</c> record to set.
    /// </param>
    /// <returns>
    ///    The current <c>WorkflowComment</c> record.
    /// </returns>
    public WorkflowComment parmWorkflowComment(WorkflowComment _workflowComment = workflowComment)
    {
        workflowComment = _workflowComment;

        return workflowComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowConfigurationTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>WorkflowConfigurationTable</c> record.
    /// </summary>
    /// <param name="_workflowConfigurationTable">
    ///    The <c>WorkflowVersionTable</c> record to set.
    /// </param>
    /// <returns>
    ///    The current <c>WorkflowVersionTable</c> record.
    /// </returns>
    public WorkflowVersionTable parmWorkflowConfigurationTable(WorkflowVersionTable _workflowConfigurationTable = workflowConfigurationTable)
    {
        workflowConfigurationTable = _workflowConfigurationTable;

        return workflowConfigurationTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowTemplateName</Name>
				<Source><![CDATA[
    public WorkflowTypeName parmWorkflowTemplateName(WorkflowTypeName _workflowTemplateName = workflowTemplateName)
    {
        workflowTemplateName = _workflowTemplateName;

        return workflowTemplateName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowWorkItemtable</Name>
				<Source><![CDATA[
    public WorkflowWorkItemTable parmWorkflowWorkItemtable(WorkflowWorkItemTable _workflowWorkItemTable = workflowWorkItemTable)
    {
        workflowWorkItemTable = _workflowWorkItemTable;

        return workflowWorkItemTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmArgs</Name>
				<Source><![CDATA[
    public Args parmArgs(Args _args = args)
    {
        args = _args;

        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reSubmitPurchReqTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resubmits the purchase requisition to workflow.
    /// </summary>
    /// <param name="_args">
    ///    An <c>Args</c> value from the caller.
    /// </param>
    /// <param name="_purchReqTableRecId">
    ///    Record ID of the record in <c>PurchReqTable</c> table.
    /// </param>
    /// <remarks>
    ///    This method is called from the workflow framework when the task/approval is resubmitted.
    /// </remarks>

    void reSubmitPurchReqTable(Args _args, RecId _purchReqTableRecId)
    {
        PurchReqTable           purchReqTableLocal;

        update_recordset purchReqTableLocal setting IsWorkflowToBeResubmitted = true
            where purchReqTableLocal.RecId == _purchReqTableRecId;

        Workflow::cancelWorkflow(this.parmWorkflowWorkItemtable().CorrelationId, this.parmWorkflowComment());
    }

]]></Source>
			</Method>
			<Method>
				<Name>submit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Activates purchase requisition workflow.
    /// </summary>
    /// <remarks>
    ///    This method starts the workflow configuration by calling the <c>ActivateWorkflowtemplate</c> method
    ///    on the <c>Workflow</c> class that has information about the purchase requisition record. The
    ///    <c>submittedBy</c> and <c>submittedDateTime</c> fields in the <c>PurchReqTable</c> table are set
    ///    based on the user and time for the submission.
    /// </remarks>
    void submit()
    {
        ttsbegin;
        if (PurchReqWFStatusTransitionHelper::setPurchReqTable2InReview(purchReqTable.RecId))
        {
            this.activateWorkflow();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activateWorkflow</Name>
				<Source><![CDATA[
    protected void activateWorkflow()
    {
        Workflow::activateFromWorkflowType(this.parmWorkflowTemplateName(),
                                               purchReqTable.RecId,
                                               this.parmWorkflowComment(),
                                               NoYes::No,
                                               DirPersonUserEx::worker2UserId(purchReqTable.Originator));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubmit</Name>
				<Source><![CDATA[
    public static boolean canSubmit(PurchReqTable purchReqTable)
    {
        PurchReqLine        purchReqLine;
        boolean             canSubmit   = true;
        PurchReqTable       purchReqTableLocal;

        purchReqTableLocal.disableCache(true);

        select firstonly RequisitionStatus from purchReqTableLocal where purchReqTableLocal.RecId == purchReqTable.RecId;

        if (purchReqTableLocal.RequisitionStatus != purchReqTable.RequisitionStatus)
        {
            return checkFailed("@SYS343266");
        }

        while select * from purchReqLine where purchReqLine.PurchReqTable == purchReqTable.RecId
        {
            changecompany(purchReqLine.buyingLegalEntity2DataArea())
            {
                canSubmit = PurchReqWorkflow::validateSubmissionRules(purchReqLine) && canSubmit;
                canSubmit = PurchReqWorkflow::validateQuestionnaire(purchReqLine.RecId) && canSubmit;

                if (isConfigurationkeyEnabled(configurationKeyNum(Asset)))
                {
                    canSubmit = PurchReqWorkflow::validateFixedAsset(purchReqLine.RecId) && canSubmit;
                }

                if (purchReqLine.ProjId && Project::enabled())
                {
                    canSubmit = PurchReqWorkflow::validateProjCategoryId(purchReqLine)
                        && PurchReqWorkflow::validateActivityNumber(purchReqLine)
                        && PurchReqWorkflow::validateWritePost(purchReqLine)
                        && canSubmit;
                }
            }

            if (canSubmit && isConfigurationkeyEnabled(configurationKeyNum(BudgetReservation_PSN)))
            {
                canSubmit = PurchReqWorkflow::validateBudgetReservationHasBalanceAvailableForPurchReq(purchReqLine, purchReqTable);
            }

            if (canSubmit && purchReqLine.RequisitionPurpose != RequisitionPurpose::Replenishment)
            {
                canSubmit = PurchReqWorkflow::validateAccountingDateForOpenFiscalPeriodLine(purchReqLine, purchReqTable.TransDate);
            }
        }

        if (purchReqTable.areLinesPartiallyDistributed())
        {
            canSubmit  =  false;
        }
        else if (canSubmit)
        {
            canSubmit = PurchReqWorkflow::validateAccountingDistributions(purchReqTable.RecId) && canSubmit;
        }

        if (canSubmit &&
            isConfigurationkeyEnabled(configurationKeyNum(Project)) &&
            ProjFundingLimitTrackingManager::hasLimitErrorSourceDocument(purchReqTable.SourceDocumentHeader))
        {
            canSubmit = checkFailed("@SYS4110062");
        }

        return canSubmit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchReqWorkflow construct()
    {
        return new PurchReqWorkflow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    protected void initFromArgs(Args _args)
    {
        if (_args.menuItemName() == menuitemActionStr(PurchReqSubmitToWorkflow)
        || _args.menuItemName() == menuitemActionStr(PurchReqReSubmit))
        {
            this.init(_args.record(), _args.menuItemName(), _args.caller().getActiveWorkflowConfiguration(), _args.caller().getActiveWorkflowWorkItem());
        }
        else
        {
            this.init(_args.record(), _args.menuItemName(), null, null);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePurchReqTableDocumentAndSubmit</Name>
				<Source><![CDATA[
    protected void validatePurchReqTableDocumentAndSubmit(Args _args)
    {
        boolean ret = true;

        purchReqTable = _args.record();

        if (PurchReqWorkflow::canSubmit(purchReqTable))
        {
            this.initFromArgs(_args);

            if (purchReqTable && (_args.menuItemName() == menuitemActionStr(PurchReqSubmitToWorkflow)
                || _args.menuItemName() == menuitemActionStr(PurchReqReSubmit)))
            {
                ret = RequisitionReleaseStrategy::validateAllLines(purchReqTable) && ret;
            }

            if (ret && this.dialogOk())
            {
                if (this.parmSubmit())
                {
                    this.submit();
                }
                else
                {
                    this.reSubmitPurchReqTable(_args, purchReqTable.RecId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Submits a purchase requisition document and starts corresponding workflow.
    /// </summary>
    /// <param name="args">
    ///    An <c>Args</c> value from the caller.
    /// </param>
    public static void main(Args _args)
    {
    //move code to run method
        PurchReqWorkflow                purchReqWorkflow;
        PurchReqLine                    purchReqLine;
        Object                          callerDataSource;

        if (_args.dataset() == tableNum(PurchReqTable))
        {
            purchReqWorkflow = PurchReqWorkflow::construct();
            purchReqWorkflow.parmArgs(_args);
            purchReqWorkflow.validatePurchReqTableDocumentAndSubmit(_args);
        }
        else
        {
            purchReqLine = _args.record();
            purchReqWorkflow = PurchReqWorkflow::construct();
            purchReqWorkflow.parmArgs(_args);
            purchReqWorkflow.init(_args.record(), _args.menuItemName(), _args.caller().getActiveWorkflowConfiguration(), _args.caller().getActiveWorkflowWorkItem());
            purchReqWorkflow.reSubmitPurchReqTable(_args, purchReqLine.PurchReqTable);
        }

        callerDataSource = FormDataUtil::getFormDataSource(_args.record());
        if (callerDataSource)
        {
            callerDataSource.research(true);
        }

        _args.caller().updateWorkflowControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAccountingDateForOpenFiscalPeriodLine</Name>
				<Source><![CDATA[
    private static boolean validateAccountingDateForOpenFiscalPeriodLine(PurchReqLine _purchReqLine, PurchReqAccountingDate _accountingDate)
    {
        boolean ret = true;
        LedgerRecId primaryLedger = Ledger::primaryLedger(_purchReqLine.BuyingLegalEntity);
        
        if (BudgetControlConfigurationManager::isPurchaseRequisitionBudgetControlEnabled(primaryLedger))
        {
            if (!LedgerFiscalCalendar::checkDateIsValid(
                Ledger::findByLegalEntity(_purchReqLine.BuyingLegalEntity).FiscalCalendar,
                _accountingDate,
                FiscalPeriodType::Operating,
                false))
            {
                ret = checkFailed(strFmt("@SCM:AccountingDateIsNotOpenFiscalCalendarPeriod", _accountingDate));//
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAccountingDistributions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the accounting distributions for all lines of the <c>PurchReqTable</c> transaction.
    /// </summary>
    /// <param name="_purchReqTableId">
    /// The <c>PurchReqTable</c> record to evaluate.
    /// </param>
    /// <returns>
    /// true if the distributions are valid; otherwise false.
    /// </returns>
    public static boolean validateAccountingDistributions(RecId _purchReqTableId)
    {
        PurchReqTable               purchReqTable;
        boolean                     ret = true;

        purchReqTable = PurchReqTable::find(_purchReqTableId);

        if (purchReqTable.isConsumption())
        {
            setPrefix(strFmt("@SYS345092", purchReqTable.PurchReqId));
            // transition the lines to fully distributed, if this is not possible the line is not ready to be submitted
            SourceDocumentProcessorFacade::submitSourceDocumentLinesForHeader(purchReqTable, SourceDocumentLineAccountingStatus::FullyDistributed);
            ret = SourceDocumentProvider::areSourceDocAccDistAccountValid(SourceDocumentHeader::find(purchReqTable.SourceDocumentHeader), true, true);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFixedAsset</Name>
				<Source><![CDATA[
/// <summary>
    ///    Validates that the ID of the fixed asset group is required for the specified <c>PurchReqLine</c>
    ///    record.
    /// </summary>
    /// <param name="_recId">
    ///    The <c>PurchReqLine</c> record to validate.
    /// </param>
    /// <returns>
    ///    true if the fixed asset group ID is required and specified; otherwise, false.
    /// </returns>

    public static boolean validateFixedAsset(RecId _recId)
    {
        #Define.PosQualifier(5)
        boolean         ret             = true;
        PurchReqLine    purchReqLine    = PurchReqLine::find(_recId);
        container       assetRules;
        container       qualifiers;

        if (purchReqLine.isConsumption())
        {
            assetRules      = purchReqLine.findAndProcessRule();
            if (conLen(assetRules) > 0)
            {
                qualifiers = conPeek(assetRules, #PosQualifier);

                if (conLen(qualifiers) > 0)
                {
                    if (    (!purchReqLine.AssetRuleQualifierOption && !purchReqLine.AssetRuleQualifierOptionLocal) ||
                            (!conFind(qualifiers, purchReqLine.AssetGroup)) ||
                            (purchReqLine.AssetRuleQualifierOption && !conFind(qualifiers, purchReqLine.AssetRuleQualifierOption)) ||
                            (purchReqLine.AssetRuleQualifierOptionLocal && !conFind(qualifiers, purchReqLine.AssetRuleQualifierOptionLocal))
                        )
                    {
                        ret = checkFailed(strFmt("@SYS345422", purchReqLine.SequenceNumber));
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePurchReqOnHold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the purchase requisition is on hold.
    /// </summary>
    /// <param name="_args">
    /// The <c>PurchReqTable</c> form arguments.
    /// </param>
    /// <param name="_purchReqTable">
    /// The <c>PurchReqTable</c> record.
    /// </param>
    /// <returns>
    /// true if requistion is not on hold; otherwise false.
    /// </returns>
    public static boolean validatePurchReqOnHold(Args _args, PurchReqTable _purchReqTable)
    {
        if ((_args.menuItemName() == menuitemActionStr(PurchReqTaskComplete))
                && PurchReqTable::find(_purchReqTable.RecId).OnHold)
        {
            return checkFailed("@EPR4460078");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQuestionnaire</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether the required questionnaires are completed for the <c>PurchReqLine</c> record.
    /// </summary>
    /// <param name="_recId">
    ///    The <c>PurchReqLine</c> record to evaluate.
    /// </param>
    /// <returns>
    ///    true if all questionnaires have been completed; otherwise false.
    /// </returns>
    public static boolean validateQuestionnaire(RecId _recId)
    {
        PurchReqLineKMCollection    purchReqLineKMCollection;
        boolean                     ret = true;

        if (PurchReqLine::find(_recId).isConsumption())
        {
            while select purchReqLineKMCollection where purchReqLineKMCollection.PurchReqLine == _recId
            {
                if (purchReqLineKMCollection.questionnaireStatus() == PurchReqQuestionnaireStatus::NotStarted)
                {
                    ret = ret && checkFailed(strFmt("@SYS305261", purchReqLineKMCollection.kmCollectionId));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSubmissionRules</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the workflow submission rules for the <c>PurchReqLine</c> record.
    /// </summary>
    /// <param name="_purchReqLine">
    /// The <c>PurchReqLine</c> record to evaluate.
    /// </param>
    /// <returns>
    ///    true if the submission rules were validated successfully; otherwise, false.
    /// </returns>

    public static boolean validateSubmissionRules(PurchReqLine _purchReqLine)
    {
        boolean                                     ret = true;
        int64                                       orgArray[2];
        int64                                       purchReqControlRuleRecId;
        PurchReqControlRule                         purchReqControlRule;
        PurchReqControlSubmissionParameter          purchReqControlSubmissionParameter;
        PurchReqControlSubmsnParameterExpression    purchReqControlSubmsnParameterExpression;
        ExpressionTable                             expressionTable;
        str                                         fieldName;

        if (_purchReqLine.RequisitionPurpose == RequisitionPurpose::Replenishment)
        {
            ret = PurchReqWorkflow::validateSubmissionRulesReplenishment(_purchReqLine);
        }
        else
        {
            orgArray[1] = _purchReqLine.BuyingLegalEntity;
            orgArray[2] = _purchReqLine.ReceivingOperatingUnit;

            purchReqControlRuleRecId = SysPolicies::getPolicyRuleID(
                                            orgArray,
                                            SysPolicyRuleType::findByRuleTypePolicyType(
                                                                            SysPolicyRuleTypeEnum::PurchReqControlRule,
                                                                            SysPolicyTypeEnum::PurchasingPolicy
                                                                            ).RecId,
                                            SysPolicyTypeEnum::PurchasingPolicy);

            purchReqControlRule      = PurchReqControlRule::find(purchReqControlRuleRecId);
            //This selection can be transferred to the calling method (for performance) if number of lines is large and not all lines may have associated control rule

            if (purchReqControlRule)
            {
                while select PurchReqControlSubmissionRequirement, FieldId, RecId from  purchReqControlSubmissionParameter where purchReqControlSubmissionParameter.PurchReqControlRule == purchReqControlRule.RecId
                {
                    fieldName = fieldId2pname(_purchReqLine.TableId, purchReqControlSubmissionParameter.FieldId);

                    switch (purchReqControlSubmissionParameter.PurchReqControlSubmissionRequirement)
                    {
                        case PurchReqControlSubmissionRequirement::Required :
                            if (!_purchReqLine.(purchReqControlSubmissionParameter.FieldId))
                            {
                                ret = checkFailed(strFmt("@SYS305260", int2str(_purchReqLine.SequenceNumber), fieldName));
                            }
                            break;

                        case PurchReqControlSubmissionRequirement::Conditional :
                            select firstonly TableId from purchReqControlSubmsnParameterExpression where purchReqControlSubmsnParameterExpression.PurchReqControlSubmissionParameter == purchReqControlSubmissionParameter.RecId
                                join expressionTable where expressionTable.RecId == purchReqControlSubmsnParameterExpression.ExpressionTable;

                            if (expressionTable && SysExpression::evaluate(CompanyInfo::findRecId(_purchReqLine.BuyingLegalEntity).DataArea, _purchReqLine.TableId , _purchReqLine.RecId, expressionTable))
                            {
                                if (!_purchReqLine.(purchReqControlSubmissionParameter.FieldId))
                                {
                                    ret = checkFailed(strFmt("@SYS305260", int2str(_purchReqLine.SequenceNumber), fieldName));
                                }
                            }

                            break;
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSubmissionRulesReplenishment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the workflow submission rules for the <c>PurchReqLine</c> record for replenish ment requisitions.
    /// </summary>
    /// <param name="_purchReqLine">
    /// The <c>PurchReqLine</c> record to evaluate.
    /// </param>
    /// <returns>
    ///    true if the submission rules for replenishment were validated successfully; otherwise, false.
    /// </returns>
    private static boolean validateSubmissionRulesReplenishment(PurchReqLine _purchReqLine)
    {
        boolean                                     ret = true;
        int64                                       orgArray[2];
        int64                                       replenishControlRuleRecId;
        RequisitionReplenishControlRule             requisitionReplenishControlRule;
        RequisitionReplenishControlSubmsnParam      requisitionReplenishControlSubmsnParam;
        RequisitionReplenishContrSubmsnParamExpr    requisitionReplenishContrSubmsnParamExpr;
        ExpressionTable                             expressionTable;
        str                                         fieldName;

        orgArray[1] = _purchReqLine.BuyingLegalEntity;
        orgArray[2] = _purchReqLine.ReceivingOperatingUnit;

        replenishControlRuleRecId = SysPolicies::getPolicyRuleID(
                                        orgArray,
                                        SysPolicyRuleType::findByRuleTypePolicyType(
                                                                        SysPolicyRuleTypeEnum::RequisitionReplenishControlRule,
                                                                        SysPolicyTypeEnum::PurchasingPolicy
                                                                      ).RecId,
                                        SysPolicyTypeEnum::PurchasingPolicy);

        requisitionReplenishControlRule      = RequisitionReplenishControlRule::find(replenishControlRuleRecId);
        //This selection can be transferred to the calling method (for performance) if number of lines is large and not all lines may have associated control rule

        if (requisitionReplenishControlRule)
        {
            while select PurchReqControlSubmissionRequirement, FieldId, RecId from  requisitionReplenishControlSubmsnParam
                where requisitionReplenishControlSubmsnParam.RequisitionReplenishControlRule == requisitionReplenishControlRule.RecId
            {
                fieldName = fieldId2pname(_purchReqLine.TableId, requisitionReplenishControlSubmsnParam.FieldId);

                switch (requisitionReplenishControlSubmsnParam.PurchReqControlSubmissionRequirement)
                {
                    case PurchReqControlSubmissionRequirement::Required :
                        if (!_purchReqLine.(requisitionReplenishControlSubmsnParam.FieldId))
                        {
                            ret = checkFailed(strFmt("@SYS305260", int2str(_purchReqLine.SequenceNumber), fieldName));
                        }
                        break;

                    case PurchReqControlSubmissionRequirement::Conditional :
                        select firstonly TableId from requisitionReplenishContrSubmsnParamExpr
                            where requisitionReplenishContrSubmsnParamExpr.RequisitionReplenishControlSubmsnParam == requisitionReplenishControlSubmsnParam.RecId
                            join expressionTable where expressionTable.RecId == requisitionReplenishContrSubmsnParamExpr.ExpressionTable;

                        if (expressionTable && SysExpression::evaluate(CompanyInfo::findRecId(_purchReqLine.BuyingLegalEntity).DataArea, _purchReqLine.TableId , _purchReqLine.RecId, expressionTable))
                        {
                            if (!_purchReqLine.(requisitionReplenishControlSubmsnParam.FieldId))
                            {
                                ret = checkFailed(strFmt("@SYS305260", int2str(_purchReqLine.SequenceNumber), fieldName));
                            }
                        }

                        break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjCategoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the project category id for <c>PurchReqLine</c> while submitting the workflow.
    /// </summary>
    /// <param name="_purchReqLine">
    /// The <c>PurchReqLine</c> project category id.
    /// </param>
    /// <returns>
    ///    true if project category id is there ; otherwise, false.
    /// </returns>
    private static boolean validateProjCategoryId(PurchReqLine _purchReqLine)
    {
        boolean ret = true;

        if (!_purchReqLine.ProjCategoryId)
        {
            ret = checkFailed(strFmt("@Proj:ProjCategoryIsMandatory", _purchReqLine.SequenceNumber));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateActivityNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the activity number for <c>PurchReqLine</c> while submitting the workflow.
    /// </summary>
    /// <param name="_purchReqLine">
    /// The <c>PurchReqLine</c>.
    /// </param>
    /// <returns>
    ///    true if activity number is set or not required; otherwise, false.
    /// </returns>
    private static boolean validateActivityNumber(PurchReqLine _purchReqLine)
    {
        boolean ret = true;

        if (!_purchReqLine.ActivityNumber
            && ProjInventJournalTransMapForm::construct(_purchReqLine).isActivityNumberRequired())
        {
            ret = checkFailed(strFmt("@Proj:ProjActivityIsMandatory", _purchReqLine.SequenceNumber));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWritePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates <c>PurchReqLine</c> while submitting the workflow.
    /// </summary>
    /// <param name="_purchReqLine">
    /// The <c>PurchReqLine</c>.
    /// </param>
    /// <returns>
    ///    true if the purchase requisition line is valid; otherwise, false.
    /// </returns>
    private static boolean validateWritePost(PurchReqLine _purchReqLine)
    {
        boolean ret = true;

        if (!ProjInventJournalTransMapForm::construct(_purchReqLine).validateWritePost())
        {
            ret = false;
            error(strFmt("@SYS332047", _purchReqLine.purchReqId(), _purchReqLine.SequenceNumber));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetReservationHasBalanceAvailableForPurchReq</Name>
				<Source><![CDATA[
    private static boolean validateBudgetReservationHasBalanceAvailableForPurchReq(PurchReqLine _purchReqLine, PurchReqTable _purchReqTable)
    {
        boolean canSubmit = true;
        BudgetReservationLine_PSN budgetReservationLine = BudgetReservationLine_PSN::find(_purchReqLine.BudgetReservationLine_PSN);

        if (budgetReservationLine)
        {
            // Includes this purchase requisition's draft amount in calculating the available budget.
            Amount availableGeneralBudgetReservationBalance = BudgetReservationCalculateBalance_PSN::getBudgetReservationLineTotalBalance(budgetReservationLine.RecId, _purchReqTable.SourceDocumentHeader);
            Amount purchaseRequisitionsInReviewTotal = PurchReqWorkflow::getTotalAmountOfPurchReqInReviewForBudgetReservationLine(budgetReservationLine.RecId);

            if (availableGeneralBudgetReservationBalance < purchaseRequisitionsInReviewTotal)
            {
                canSubmit = false;
                error(strFmt("@Budgeting_BudgetReservationPS:PurchReqWorkflowExceedsBudgetError", budgetReservationLine.getBudgetReservationHeader().DocumentNumber));
            }
        }

        return canSubmit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalAmountOfPurchReqInReviewForBudgetReservationLine</Name>
				<Source><![CDATA[
    private static Amount getTotalAmountOfPurchReqInReviewForBudgetReservationLine(BudgetReservationLineRecId_PSN _budgetReservationLineRecId)
    {
        PurchReqLine localPurchReqLine;
        select sum(LineAmount) from localPurchReqLine
            where localPurchReqLine.BudgetReservationLine_PSN == _budgetReservationLineRecId
                && localPurchReqLine.RequisitionStatus == PurchReqRequisitionStatus::InReview;

        return localPurchReqLine.LineAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>