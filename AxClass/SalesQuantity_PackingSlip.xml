<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuantity_PackingSlip</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DocumentStatusFactory(DocumentStatus::PackingSlip)]
[DocumentStatusFactory(DocumentStatus::ProjectPackingSlip)]
public  class   SalesQuantity_PackingSlip extends SalesQuantity
{
    InventQty   qtyPicked;
    RecId       salesLineRecId;
    PdsCWQty    cwQtyPicked;
    RecId       cwSalesLineRecId;
    // <GEERU>
    boolean     countryRegion_RU;
    // </GEERU>

    protected Map salesLineUnpostedDeliveredQtyMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateQtyUpdateInventDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for calculating <c>QtyUpdate</c> for inventory.
    /// </summary>
    /// <param name = "_salesLine">The sales order line.</param>
    /// <param name = "_specQty">The requested type of update.</param>
    /// <param name = "_eventHandlerResult">An <c>EventHandlerResult</c> for returning the calculated value.</param>
    delegate void calculateQtyUpdateInventDelegate(SalesLine _salesLine, SalesUpdate _specQty, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyUpdateInvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the <c>QtyUpdate</c> for inventory.
    /// </summary>
    /// <param name = "_salesLine">The sales order line.</param>
    /// <param name = "_salesLineRemainInventPhysical">The physical remaining inventory quantity.</param>
    /// <param name = "_qty">The quantity. If provided, use this instead of calculating the new inventory quantity.</param>
    /// <param name = "_specQty">The requested type of update.</param>
    /// <returns>The <c>QtyUpdate</c> for inventory.</returns>
    protected InventQty calcQtyUpdateInvent(
        SalesLine _salesLine,
        InventQty _salesLineRemainInventPhysical,
        InventQty _qty,
        SalesUpdate _specQty)
    {
        if (_qty != naReal())
        {
            return _qty;
        }

        InventQty qtyUpdate;

        // <GEERU>
        if (countryRegion_RU)
        {
            switch (_specQty)
            {
                case SalesUpdate::DeliverNow:
                    qtyUpdate = this.inventDeliverNow_RU(_salesLine);
                    break;

                case SalesUpdate::All:
                    if (_salesLine.DeliveryType == TradeLineDlvType::DropShip)
                    {
                        qtyUpdate = this.inventDeliverNow_RU(_salesLine);
                    }
                    else
                    {
                        qtyUpdate = _salesLineRemainInventPhysical;
                    }
                    break;

                case SalesUpdate::PickingList,
                     SalesUpdate::PickingListAndNonInventoried:
                    InventTransIdSum inventTransIdSum = InventTransIdSum::newTransOriginId(InventTransOriginSalesLine::findInventTransOriginId(_salesLine.DataAreaId, _salesLine.InventTransId));
                    inventTransIdSum.parmInventDimCriteria(inventDimCriteria);
                    inventTransIdSum.parmInventDimParmCriteria(inventDimParm);
                    qtyUpdate = -inventTransIdSum.picked();
                    break;
                    
                default:
                    EventHandlerResult result = EventHandlerResult::newSingleResponse();
                    this.calculateQtyUpdateInventDelegate(_salesLine, _specQty, result);
                    if (result.hasResult())
                    {
                        qtyUpdate = result.result();
                    }
                    else if (_salesLine.DeliveryType == TradeLineDlvType::DropShip)
                    {
                        qtyUpdate = 0;
                    }
                    else
                    {
                        qtyUpdate = _salesLineRemainInventPhysical;
                    }
                    break;
            }
        }
        else
        {
            // </GEERU>
            switch (_specQty)
            {
                case SalesUpdate::DeliverNow:
                    qtyUpdate = _salesLine.InventDeliverNow;
                    break;

                case SalesUpdate::All:
                    if (_salesLine.DeliveryType == TradeLineDlvType::DropShip)
                    {
                        qtyUpdate = _salesLine.InventDeliverNow;
                    }
                    else
                    {
                        qtyUpdate = _salesLine.RemainInventPhysical;
                    }
                    break;
                
                case SalesUpdate::PickingList,
                     SalesUpdate::PickingListAndNonInventoried:
                    qtyUpdate = -this.getQtyPicked(_salesLine);
                    break;

                default:
                    if (SalesPackingSlipNoSpecQtyAllowedFlight::instance().isEnabled())
                    {
                        EventHandlerResult result = EventHandlerResult::newSingleResponse();
                        this.calculateQtyUpdateInventDelegate(_salesLine, _specQty, result);
                        if (result.hasResult())
                        {
                            qtyUpdate = result.result();
                        }
                    }
                    else
                    {
                         qtyUpdate = _salesLine.DeliveryType == TradeLineDlvType::DropShip ? 0 : _salesLine.RemainSalesPhysical;
                    }
                    break;
            }
            // <GEERU>
        }
        // </GEERU>

        return qtyUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyInvent</Name>
				<Source><![CDATA[
    protected container calcQtyInvent(
        Common _salesLine,
        SalesUpdate _specQty = SalesUpdate::All,
        InventQty _qty = naReal(),
        boolean _creditRemaining = false,
        boolean _calcRemaining = true,
        PackingSlipIdForUpdate_W _packingSlips = "")
    {
        SalesLine           salesLine = _salesLine as SalesLine;
        InventQty           numOfRemainOri;
        InventQty           qtyRemainNew;
        // <GEERU>
        InventQty           salesLineRemainInventPhysical;
        // </GEERU>

        // <GEERU>
        if (countryRegion_RU)
        {
            salesLineRemainInventPhysical = salesLine.remainInventPhysical_RU(inventDimCriteria, inventDimParm);
        }
        // </GEERU>

        if (!_salesLine.isStocked())
        {
            return [0,0,0];
        }

        InventQty qtyUpdate = this.calcQtyUpdateInvent(salesLine, salesLineRemainInventPhysical, _qty, _specQty);

        if (_calcRemaining)
        {
            // <GEERU>
            if (countryRegion_RU)
            {
                numOfRemainOri = salesLineRemainInventPhysical;
            }
            else
            {
                // </GEERU>
                numOfRemainOri = salesLine.RemainInventPhysical;
                // <GEERU>
            }
            // </GEERU>

            boolean remainOk = false;

            remainOk = salesLine.type(null).setPackingSlipRemainOk(qtyUpdate,_creditRemaining);

            if (remainOk)
            {
                // <GEERU>
                if (countryRegion_RU)
                {
                    qtyRemainNew = salesLineRemainInventPhysical;
                }
                else
                {
                    // </GEERU>
                    qtyRemainNew = salesLine.RemainInventPhysical;
                    // <GEERU>
                }
                // </GEERU>
            }
            else
            {
                qtyRemainNew = numOfRemainOri - qtyUpdate;

                if (qtyRemainNew * salesLine.SalesQty < 0)
                {
                    qtyRemainNew = 0;
                }
            }
        }

        return [qtyUpdate, numOfRemainOri, qtyRemainNew];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateQtyUpdateSalesDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for calculating <c>QtyUpdate</c> for sales.
    /// </summary>
    /// <param name = "_salesLine">The sales order line.</param>
    /// <param name = "_specQty">The requested type of update.</param>
    /// <param name = "_eventHandlerResult">An <c>EventHandlerResult</c> for returning the calculated value.</param>
    delegate void calculateQtyUpdateSalesDelegate(SalesLine _salesLine, SalesUpdate _specQty, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyUpdateSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the <c>QtyUpdate</c> for sales.
    /// </summary>
    /// <param name = "_salesLine">The sales order line.</param>
    /// <param name = "_salesLineRemainInventPhysical">The physical remaining inventory quantity.</param>
    /// <param name = "_qty">The quantity. If provided, use this instead of calculating the new inventory quantity.</param>
    /// <param name = "_specQty">The requested type of update.</param>
    /// <returns>The <c>QtyUpdate</c> for sales.</returns>
    protected SalesQty calcQtyUpdateSales(
        SalesLine _salesLine,
        SalesQty _salesLineRemainSalesPhysical,
        SalesQty _qty,
        SalesUpdate _specQty)
    {
        if (_qty != naReal())
        {
            return _qty;
        }

        EcoResProductUnitConverter ecoResProductUnitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(_salesLine.ItemId,
                                                                                                                                  _salesLine.InventDimId,
                                                                                                                                  InventTableModule::find(_salesLine.ItemId, ModuleInventPurchSales::Invent).UnitId,
                                                                                                                                  _salesLine.SalesUnit,
                                                                                                                                  NoYes::Yes);
        SalesQty qtyUpdate;

        // <GEERU>
        if (countryRegion_RU)
        {
            switch (_specQty)
            {
                case SalesUpdate::DeliverNow:
                    qtyUpdate = this.salesDeliverNow_RU(_salesLine);
                    break;

                case SalesUpdate::All:
                    if (_salesLine.DeliveryType == TradeLineDlvType::DropShip)
                    {
                        qtyUpdate = this.salesDeliverNow_RU(_salesLine);
                    }
                    else
                    {
                        qtyUpdate = _salesLineRemainSalesPhysical;
                    }
                    break;

                case SalesUpdate::PickingList,
                     SalesUpdate::PickingListAndNonInventoried:
                    InventTransIdSum inventTransIdSum = InventTransIdSum::newTransOriginId(InventTransOriginSalesLine::findInventTransOriginId(_salesLine.DataAreaId, _salesLine.InventTransId));
                    inventTransIdSum.parmInventDimCriteria(inventDimCriteria);
                    inventTransIdSum.parmInventDimParmCriteria(inventDimParm);
                    qtyUpdate = ecoResProductUnitConverter.convertValue(-inventTransIdSum.picked());
                    break;

                default:
                    EventHandlerResult result = EventHandlerResult::newSingleResponse();
                    this.calculateQtyUpdateSalesDelegate(_salesLine, _specQty, result);
                    if (result.hasResult())
                    {
                        qtyUpdate = result.result();
                    }
                    else if (_salesLine.DeliveryType == TradeLineDlvType::DropShip)
                    {
                        qtyUpdate = 0;
                    }
                    else
                    {
                        qtyUpdate = _salesLineRemainSalesPhysical;
                    }
                    break;
            }
        }
        else
        {
            // </GEERU>
            switch (_specQty)
            {
                case SalesUpdate::DeliverNow:
                    qtyUpdate = _salesLine.SalesDeliverNow;
                    break;

                case SalesUpdate::All:
                    if (_salesLine.DeliveryType == TradeLineDlvType::DropShip)
                    {
                        qtyUpdate = _salesLine.SalesDeliverNow;
                    }
                    else
                    {
                        qtyUpdate = _salesLine.RemainSalesPhysical;
                    }
                    break;

                case SalesUpdate::PickingListAndNonInventoried:
                    if (DirectDeliverySalesOrderIsNotPostedInPackingSipFlight::instance().isEnabled())
                    {
                        if (!_salesLine.isStocked())
                        {
                            qtyUpdate = _salesLine.RemainSalesPhysical;
                        }
                    }
                    else
                    {
                        if (_salesLine.DeliveryType == TradeLineDlvType::DropShip
                            && !_salesLine.isStocked())
                        {
                            qtyUpdate = _salesLine.SalesDeliverNow;
                        }
                        else
                        {
                            qtyUpdate = _salesLine.RemainSalesPhysical;
                        }
                    }

                //Fall through
                case SalesUpdate::PickingList:
                    if (DirectDeliverySalesOrderIsNotPostedInPackingSipFlight::instance().isEnabled() 
                        && _salesLine.DeliveryType == TradeLineDlvType::DropShip)
                    {
                        qtyUpdate = _salesLine.SalesDeliverNow;
                    }
                    else if (_salesLine.isStocked())
                    {
                        qtyUpdate = ecoResProductUnitConverter.convertValue(-this.getQtyPicked(_salesLine));
                        this.getCWQtyPicked(_salesLine);
                    }
                    break;

                default:
                    EventHandlerResult result = EventHandlerResult::newSingleResponse();
                    this.calculateQtyUpdateSalesDelegate(_salesLine, _specQty, result);
                    if (result.hasResult())
                    {
                        qtyUpdate = result.result();
                    }
                    else
                    {
                        if (!SalesPackingSlipNoSpecQtyAllowedFlight::instance().isEnabled())
                        {
                            qtyUpdate = _salesLine.DeliveryType == TradeLineDlvType::DropShip ? 0 : _salesLine.RemainSalesPhysical;
                        }
                    }
            }
            // <GEERU>
        }
        // </GEERU>

        return qtyUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtySales</Name>
				<Source><![CDATA[
    protected container calcQtySales(
        Common _salesLine,
        SalesUpdate _specQty = SalesUpdate::All,
        SalesQty _qty = naReal(),
        boolean _creditRemaining = false,
        boolean _calcRemaining = true,
        PackingSlipIdForUpdate_W _packingSlips   = "")
    {
        SalesLine           salesLine = _salesLine as SalesLine;
        SalesQty            numOfRemainOri;
        SalesQty            qtyRemainNew;
        // <GEERU>
        SalesQty            salesLineRemainSalesPhysical;
        // </GEERU>

        // <GEERU>
        if (countryRegion_RU)
        {
            salesLineRemainSalesPhysical = salesLine.remainSalesPhysical_RU(inventDimCriteria, inventDimParm);
        }
        // </GEERU>

        SalesQty qtyUpdate = this.calcQtyUpdateSales(salesLine, salesLineRemainSalesPhysical, _qty, _specQty);

        if (_calcRemaining)
        {
            // <GEERU>
            if (countryRegion_RU)
            {
                numOfRemainOri = salesLineRemainSalesPhysical;
            }
            else
            {
                // </GEERU>
                numOfRemainOri = salesLine.RemainSalesPhysical;
                // <GEERU>
            }
            // </GEERU>

            boolean remainOk = false;

            remainOk = salesLine.type(null).setPackingSlipRemainOk(qtyUpdate,_creditRemaining);

            if (remainOk)
            {
                // <GEERU>
                if (countryRegion_RU)
                {
                    qtyRemainNew = salesLineRemainSalesPhysical;
                }
                else
                {
                    // </GEERU>
                    qtyRemainNew = salesLine.RemainSalesPhysical;
                    // <GEERU>
                }
                // </GEERU>
            }
            else
            {
                if (PdsGlobal::pdsIsCWItem(salesLine.ItemId) && !(cwQtyPicked + salesLine.PdsCWRemainInventPhysical))
                {
                    qtyRemainNew = 0;
                }
                else
                {
                    qtyRemainNew = salesLine.RemainSalesPhysical - qtyUpdate;
                }

                if (qtyRemainNew * salesLine.SalesQty < 0)
                {
                    qtyRemainNew = 0;
                }
            }
        }

        return [qtyUpdate, numOfRemainOri, qtyRemainNew];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQtyPicked</Name>
				<Source><![CDATA[
    protected InventQty getQtyPicked(SalesLine _salesLine)
    {
        if (salesLineRecId != _salesLine.RecId)
        {
            qtyPicked = InventTransIdSumSingleStatus::qtyPicked(InventTransOriginSalesLine::findInventTransOriginId(_salesLine.DataAreaId, _salesLine.InventTransId));
            salesLineRecId = _salesLine.RecId;
        }

        return qtyPicked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDeliverNow_RU</Name>
				<Source><![CDATA[
    protected InventQty  inventDeliverNow_RU(SalesLine _salesLine)
    {
        InventTransOrigin inventTransOrigin;
        InventTrans       inventTrans;
        InventDim         inventDim;
        InventQty         transQty  = _salesLine.InventDeliverNow;
        InventQty         inventDeliverNow;
        if (! inventDimParm.isAllFlagNo())
        {
            while select RecId from inventTransOrigin
                where inventTransOrigin.InventTransId == _salesLine.InventTransId
            join Qty from inventTrans
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                   && ((inventTrans.StatusReceipt > StatusReceipt::Purchased && inventTrans.StatusIssue == StatusIssue::None)
                   || (inventTrans.StatusReceipt == StatusReceipt::None && inventTrans.StatusIssue > StatusIssue::Sold))
            join inventDim
                where inventDim.InventDimId         == inventTrans.InventDimId
            {
                if (_salesLine.InventDeliverNow > 0)
                {
                    if (transQty > -inventTrans.Qty)
                    {
                        transQty -= -inventTrans.Qty;
                        if (InventDim::isInventDimEqual(inventDim, inventDimCriteria, inventDimParm.selectedDimFields()))
                        {
                            inventDeliverNow += -inventTrans.Qty;
                        }
                    }
                    else
                    {
                        if (InventDim::isInventDimEqual(inventDim, inventDimCriteria, inventDimParm.selectedDimFields()))
                        {
                            inventDeliverNow += transQty;
                        }
                        transQty = 0;
                    }
                }
                else
                {
                    if (transQty < inventTrans.Qty)
                    {
                        transQty -= inventTrans.Qty;
                        if (InventDim::isInventDimEqual(inventDim, inventDimCriteria, inventDimParm.selectedDimFields()))
                        {
                            inventDeliverNow += inventTrans.Qty;
                        }
                    }
                    else
                    {
                        if (InventDim::isInventDimEqual(inventDim, inventDimCriteria, inventDimParm.selectedDimFields()))
                        {
                            inventDeliverNow += transQty;
                        }
                        transQty = 0;
                    }
                }

                if (! transQty)
                    break;
            }
            return inventDeliverNow;
        }
        return _salesLine.InventDeliverNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        // <GEERU>
        countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateQtyUpdateInventCWDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for calculating <c>QtyUpdate</c> for catch weight inventory.
    /// </summary>
    /// <param name = "_salesLine">The sales order line.</param>
    /// <param name = "_specQty">The requested type of update.</param>
    /// <param name = "_eventHandlerResult">An <c>EventHandlerResult</c> for returning the calculated value.</param>
    delegate void calculateQtyUpdateInventCWDelegate(SalesLine _salesLine, SalesUpdate _specQty, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCalcQtyInvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the catch weight quantity when you post.
    /// </summary>
    /// <param name="_common">
    /// The transaction record.
    /// </param>
    /// <param name="_specQty">
    /// The quantity specification to process.
    /// </param>
    /// <param name="_qty">
    /// The catch weight quantity.
    /// </param>
    /// <param name="_creditRemaining">
    /// A Boolean value that indicates whether the remaining quantity is to be credited.
    /// </param>
    /// <param name="_calcRemaining">
    /// A Boolean value that indicates whether the remaining quantities should be calculated.
    /// </param>
    /// <returns>
    /// A container that contains catch weight quantities.
    /// </returns>
    protected container pdsCWCalcQtyInvent(
        Common          _common,
        SalesUpdate     _specQty             = SalesUpdate::All,
        PdsCWInventQty  _qty                 = naReal(),
        boolean         _creditRemaining     = false,
        boolean         _calcRemaining       = true)
    {
        PdsCWInventQty      qtyUpdate;
        PdsCWInventQty      qtyRemainNew;
        PdsCWInventQty      numOfRemainOri;
        SalesLine           salesLine = _common;

        InventTransIdSum inventTransIdSum = InventTransIdSum::newTransOriginId(
                                                     InventTransOrigin::findByInventTransId(salesLine.InventTransId).RecId);

        if (_qty != naReal())
        {
            qtyUpdate = _qty;
        }
        else
        {
            switch (_specQty)
            {
                case SalesUpdate::DeliverNow :
                    qtyUpdate = salesLine.PdsCWInventDeliverNow;
                    break;

                case SalesUpdate::All :
                    if (salesLine.DeliveryType == TradeLineDlvType::DropShip)
                    {
                        qtyUpdate = salesLine.PdsCWInventDeliverNow;
                    }
                    else
                    {
                        qtyUpdate = salesLine.PdsCWRemainInventPhysical;
                    }
                    break;

                case SalesUpdate::PickingListAndNonInventoried:
                    qtyUpdate = salesLine.PdsCWRemainInventPhysical;

					if (salesLine.isStocked())
                    {
                        qtyUpdate = -inventTransIdSum.pdsCWPicked();
					}
                    break;	
					
                case SalesUpdate::PickingList :
                    qtyUpdate = -inventTransIdSum.pdsCWPicked();
                    break;

                default :
                    EventHandlerResult result = EventHandlerResult::newSingleResponse();
                    this.calculateQtyUpdateInventCWDelegate(salesLine, _specQty, result);
                    if (result.hasResult())
                    {
                        qtyUpdate = result.result();
                    }
                    else if (salesLine.DeliveryType == TradeLineDlvType::DropShip)
                    {
                        qtyUpdate = 0;
                    }
                    else
                    {
                        qtyUpdate = salesLine.PdsCWRemainInventPhysical;
                    }
                    break;
            }
        }

        if (_calcRemaining)
        {
            NoYes remainOk = NoYes::No;

            numOfRemainOri = salesLine.PdsCWRemainInventPhysical;

            remainOk = salesLine.type().pdsCWSetPackingSlipRemainOk(
                                            qtyUpdate,
                                            _creditRemaining);

            if (remainOk)
            {
                qtyRemainNew = salesLine.PdsCWRemainInventPhysical;
            }
            else
            {
                qtyRemainNew = numOfRemainOri - qtyUpdate;

                if (qtyRemainNew * salesLine.PdsCWQty < 0)
                {
                    qtyRemainNew = 0;
                }
            }
        }

        return [qtyUpdate, numOfRemainOri, qtyRemainNew];
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the remaining quantity in catch weight units.
    /// </summary>
    /// <param name="_salesLine">
    /// The order line for which to calculate the remaining quantity.
    /// </param>
    /// <param name="_salesParmLine">
    /// The <c>SalesParmLine</c> for which to calculate the remaining quantity.
    /// </param>
    /// <returns>
    /// The remaining quantity in catch weight units.
    /// </returns>
    public PdsCWInventQty pdsCWQtyRemainPhysical(SalesLine _salesLine, SalesParmLine _salesParmLine)
    {
        if (_salesParmLine.PdsCWRemainBefore < _salesParmLine.PdsCWDeliverNow)
        {
            return _salesParmLine.PdsCWDeliverNow;
        }

        return _salesParmLine.PdsCWRemainBefore - _salesParmLine.PdsCWRemainAfterInvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyRemainInventPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the remaining quantity in inventory units.
    /// </summary>
    /// <param name="_salesLine">
    ///    The order line for which to calculate the remaining quantity.
    /// </param>
    /// <param name="_salesParmLine">
    ///    The parm order line for which to calculate the remaining quantity.
    /// </param>
    /// <returns>
    ///    The remaining quantity in inventory units.
    /// </returns>
    public InventQty qtyRemainInventPhysical(SalesLine _salesLine, SalesParmLine _salesParmLine)
    {
        if (_salesParmLine.RemainBeforeInvent < _salesParmLine.InventNow)
        {
            return _salesParmLine.InventNow;
        }

        return _salesParmLine.RemainBeforeInvent - _salesParmLine.RemainAfterInvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyRemainSalesPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the remaining quantity in sales units.
    /// </summary>
    /// <param name="_salesLine">
    ///    The order line for which to calculate the remaining quantity.
    /// </param>
    /// <param name="_salesParmLine">
    ///    The parm order line for which to calculate the remaining quantity.
    /// </param>
    /// <returns>
    ///    The remaining quantity in sales units.
    /// </returns>
    public InventQty qtyRemainSalesPhysical(SalesLine _salesLine, SalesParmLine _salesParmLine)
    {
        if (_salesParmLine.RemainBefore < _salesParmLine.DeliverNow)
        {
            return _salesParmLine.DeliverNow;
        }

        return _salesParmLine.RemainBefore - _salesParmLine.RemainAfter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesDeliverNow_RU</Name>
				<Source><![CDATA[
    protected SalesQty  salesDeliverNow_RU(SalesLine _salesLine)
    {
        if (! inventDimParm.isAllFlagNo())
        {
            return EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_salesLine.ItemId,
                                                                                         _salesLine.InventDimId,
                                                                                         this.inventDeliverNow_RU(_salesLine),
                                                                                         _salesLine.inventTable().inventUnitId(),
                                                                                         _salesLine.SalesUnit,
                                                                                         NoYes::Yes);
        }
        return _salesLine.SalesDeliverNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCWQtyPicked</Name>
				<Source><![CDATA[
    protected InventQty getCWQtyPicked(SalesLine _salesLine)
    {
        if (cwSalesLineRecId != _salesLine.RecId && PdsGlobal::pdsIsCWItem(_salesLine.ItemId))
        {
            cwQtyPicked = InventTransIdSumSingleStatus::pdsCWQtyPicked(InventTransOriginSalesLine::findInventTransOriginId(_salesLine.DataAreaId, _salesLine.InventTransId));
            cwSalesLineRecId = _salesLine.RecId;
        }
        
        return cwQtyPicked;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>