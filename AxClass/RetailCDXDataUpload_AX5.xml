<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCDXDataUpload_AX5</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Retail CDX data upload for AX 2009.
/// </summary>
class RetailCDXDataUpload_AX5 extends RetailCDXDataUpload implements BatchRetryable
{
    RetailConnAOSProfile aosProfile;
    RetailConnSchedulerJobTable schedulerJob;
    RetailConnStoreConnectProfile hqSCProfile;
    str hqConnStr;

    RetailConnAX5SCClient ax5SCClient;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildAXConnectionString</Name>
				<Source><![CDATA[
    private str buildAXConnectionString(RetailConnProfileName _dbProfileName)
    {
        str connStr;
        str prefixName;
        ;

        prefixName = _dbProfileName;

        connStr = strFmt('CDXDataStore=%1;%2', _dbProfileName, hqConnStr);
        return connStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProfiles</Name>
				<Source><![CDATA[
        private void initializeProfiles()
    {
        RetailConnSchedule schedule;
        RetailConnConnectionProfile hqConnectionProfile;
        RetailConnChannelSchema channelSchema;
        str name;

        select schedulerJob
            where schedulerJob.jobId == jobId;

        select aosProfile
            join Name from schedule
                where schedule.RetailConnAOSProfile == aosProfile.RecId
                   && schedule.RecId == scheduleRecId;

        if (!aosProfile)
        {
            name = schedule.Name;
            throw Global::error(strFmt("@REX4040007", name));
        }

        select hqSCProfile
            where hqSCProfile.RecId == aosProfile.StoreConnectRecId;

        select firstOnly ConnectionString from hqConnectionProfile
            where hqConnectionProfile.Profile == aosProfile.RecId
               && hqConnectionProfile.Type == RetailConnProfileConnectionTypeEnum::AOS
        exists join channelSchema
            where channelSchema.RecId == schedulerJob.RetailConnChannelSchema
               && channelSchema.SchemaType == hqConnectionProfile.SchemaType;

        if (!hqSCProfile || !hqConnectionProfile)
        {
            name = aosProfile.Name;
            throw Global::error(strfmt("@RET4160017", name));
        }

        hqConnStr = hqConnectionProfile.ConnectionString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSubJob</Name>
				<Source><![CDATA[
        private void processSubJob(RefRecId _dataStoreRecID, RetailConnSubJobId _subjobID)
    {
        #RetailCDX

        RetailConnSchedulerSubjobTable subjob;
        RetailConnSchedulerSubjobFieldList fieldMapping;
        int marker;
        int sqlType;

        select *
        from subjob
        where subjob.subJobId == _subjobID;

        // Hard-coded...
        ax5SCClient.setRequestType(0);
        ax5SCClient.setResultTypeEx(5, 2);

        ax5SCClient.setResultTable(subjob.TempDBTableName);

        while select toFieldName
        from fieldMapping
            order by fieldMapping.toFieldName
            where fieldMapping.subjobId == _subjobID
        {
            sqlType = RetailCDXDataUpload_AX5::GetSCSqlType(subjob.TempDBTableName, fieldMapping.toFieldName);
            ax5SCClient.addFieldEx(fieldMapping.toFieldName, sqlType, 0, '');
        }

        if (!RetailConnReplicationUtilities::isGlobalTable(subjob.TempDBTableName))
        {
            sqlType = RetailCDXDataUpload_AX5::GetSCSqlType(subjob.TempDBTableName, 'DataAreaId');
            ax5SCClient.addFieldEx('DataAreaId', sqlType, 0, '');
        }

        // Source table...
        ax5SCClient.setTable(subjob.ChannelTableName);

        while select fromFieldName
        from fieldMapping
            order by fieldMapping.toFieldName
            where fieldMapping.subjobId == _subjobID
        {
            sqlType = RetailCDXDataUpload_AX5::GetSCSqlType(subjob.TempDBTableName, fieldMapping.toFieldName);
            ax5SCClient.addFieldEx(fieldMapping.fromFieldName, sqlType, 0, '');
        }

        if (!RetailConnReplicationUtilities::isGlobalTable(subjob.TempDBTableName))
        {
            sqlType = RetailCDXDataUpload_AX5::GetSCSqlType(subjob.TempDBTableName, 'DataAreaId');
            ax5SCClient.addFieldEx('DATAAREAID', sqlType, 0, '');
        }

        marker = RetailCDXUploadCounter::getCounter(
            _dataStoreRecID,
            subjob.AXTableName);

        ax5SCClient.addParamField(subjob.ReplicationCounterFieldName, 8, 2); // GreaterThan
        ax5SCClient.addParam(marker);
        ax5SCClient.endParamValues();

        ax5SCClient.endRequest();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
        public void run()
    {
        RetailConnDatabaseProfile dbProfile;
        RefRecId dataStoreRecID;
        int i;
        ;

        this.initializeProfiles();

        if (conLen(targetDataStore) > 0)
        {
            for (i = 1; i <= conLen(targetDataStore); ++i)
            {
                dataStoreRecID = conPeek(targetDataStore, i);

                this.uploadDataStore(dataStoreRecID);
            }
        }
        else
        {
            while select RecId
                from dbProfile
                where dbProfile.DataGroup == dataGroupRecId
            {
                this.uploadDataStore(dbProfile.RecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>uploadDataStore</Name>
				<Source><![CDATA[
        private void uploadDataStore(RefRecId _dataStoreRecID)
    {
        #RetailConn

        RetailConnDatabaseProfile dbProfile;
        RetailConnConnectionProfile connectionProfile;
        RetailConnStoreConnectProfile scProfile;
        RetailConnChannelSchema channelSchema;
        RetailConnSchedulerJobLine jobLine;

        guid messageGuid;

        str scServerName;
        int scPort;
        str connectionString;
        boolean interactive;
        boolean useIPSec;
        boolean preferIPV6;
        ;

        select firstOnly ConnectionString from connectionProfile
            where connectionProfile.Profile == _dataStoreRecID
               && connectionProfile.Type == RetailConnProfileConnectionTypeEnum::Database
            exists join channelSchema
                where channelSchema.RecId == schedulerJob.RetailConnChannelSchema
                    && channelSchema.SchemaType == connectionProfile.SchemaType;

        select firstOnly scProfile
            exists join dbProfile
                where dbProfile.RecId == _dataStoreRecID
                   && dbProfile.StoreConnectRecId == scProfile.RecId;

        select firstOnly Name from dbProfile where dbProfile.RecId == _dataStoreRecID;

        if (!scProfile || !connectionProfile)
        {
            throw Global::error(strfmt("@RET4160017", dbProfile.Name));
        }

        new InteropPermission(InteropKind::ComInterop).assert();
        ax5SCClient = new RetailConnAX5SCClient();
        messageGuid = newGuid();

        scServerName = scProfile.Server;
        scPort = scProfile.Port;
        connectionString = connectionProfile.ConnectionString;
        interactive = false;
        useIPSec = !scProfile.NoIPSec;
        preferIPV6 = scProfile.PreferIPV6;

        ax5SCClient.CreateConnection(scServerName, scPort, connectionString, interactive, useIPSec, preferIPV6, messageGuid);
        ax5SCClient.SetJobId(schedulerJob.jobId);

        ax5SCClient.SetMsgId(strfmt("%1 %2 %3", schedulerJob.jobId, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone())));

        while select subJobId from jobline
            where jobLine.jobId == schedulerJob.jobId
               && jobLine.enabled == NoYes::Yes
        {
            this.processSubJob(_dataStoreRecID, jobLine.subJobId);
        }

        ax5SCClient.AddReceiver(hqSCProfile.Name, hqSCProfile.Server, hqSCProfile.Port, this.buildAXConnectionString(dbProfile.Name));

        if (ax5SCClient.Send(''))
        {
            ax5SCClient.GetPkgNo();
        }
        else
        {
            throw Global::error(strfmt("@RET391", RetailConnReplicationUtilities::GetErrorString(ax5SCClient.GetLastError())));
        }

        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetSCSqlType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the datatype for the given table name and field name.
    /// </summary>
    /// <param name="_toTableName">
    /// Name of the table.
    /// </param>
    /// <param name="_toFieldName">
    /// Name of the field.
    /// </param>
    /// <returns>
    /// Integer value
    /// </returns>
    private static int GetSCSqlType(TableName _toTableName, FieldName _toFieldName)
    {
        DictField dictField;
        int tableid;
        int fieldid;
        Types baseType;

        tableid = tableName2id(_toTableName);
        fieldid = fieldName2id(tableid, _toFieldName);

        dictField = new DictField(tableid, fieldid);

        if (dictField)
        {
            baseType = dictField.baseType();

            switch (baseType)
            {
                case Types::Integer:
                    return 8;
                case Types::Enum:
                    return 8;
                case Types::Int64:
                    return 18;
                case Types::String:
                case Types::VarString:
                    return 16;
                case Types::Real:
                    return 7;
                case Types::Date:
                    return 5;
                case Types::Time:
                    return 8;
                case Types::UtcDateTime:
                    return 17;
                case Types::Guid:
                    return 19;
                default:
                    throw Global::error("@SYS34959");
            }
        }
        else
        {
            throw Global::error(strFmt("@SYS75684", _toFieldName, _toTableName));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>RetailCDXDataUpload_AX5</c>
    /// class can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>RetailCDXDataUpload_AX5</c> can
    /// be run in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>