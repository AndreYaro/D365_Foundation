<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepreciationScheduleDP_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Report Data Provider <c>AssetDepreciationScheduleDP_IN</c> class for
/// <c>AssetDepreciationSchedule_IN</c> report.
/// </summary>
[
    SRSReportParameterAttribute(classstr(AssetDepScheduleContract_IN))
]
class AssetDepreciationScheduleDP_IN extends SrsReportDataProviderPreProcessTempDB
{
    InventItemGroup inventItemGroup;

    Amount                     receiptAmount;
    Amount                     issueAmount;
    Amount                     addition;
    Amount                     deduction;
    Amount                     deprDuringYear;
    Amount                     deductInDepr;
    InventTable                inventTable;
    TmpItemGroup_IN            tmpItemGroup;
    InventTrans                inventTrans;
    TmpAssetTable_IN           tmpAssetTable;
    AssetTable                 assetTable;
    AssetTrans                 assetTrans;
    AssetGroupBookSetup        assetGroupBookSetup;
    TmpDepreciationSchedule_IN tmpDepreciationSchedule_IN;
    PreviousYear_IN            previousYear;
    AssetGroupTrans_IN         assetGroupTrans;
    AssetGroupInformation_IN   assetGroupInformation;

    ToDate        closingDatePriorYear;
    ToDate        closingDateThisYear;

    Num                  scheduleNum;
    Notes                headerNotes;
    Notes                footerNotes;
    AssetBookId          assetBookId;
    CurrentOperationsTax currentOperationsTax;

    AssetDepreciationScheduleReportType_IN  reportType;

    AssetGroupId assetGroupFromId;
    AssetGroupId assetGroupToId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the value for <c>Additions</c> field for the report.
    /// </summary>
    /// <returns>
    /// <c>Additions</c> field for the report.
    /// </returns>
    private Amount addition()
    {
        select sum(ReceiptAccount) from tmpItemGroup;
        select sum(Addition) from tmpAssetTable;

        return (tmpItemGroup.ReceiptAccount + tmpAssetTable.Addition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetBookDepreciationSchedule</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is to calculate AssetBookDepreciationSchedule.
    /// </summary>
    /// <param name="_assetId">
    /// Asset id.
    /// </param>
    /// <param name="_bookId">
    /// Asset book id.
    /// </param>
    /// <remarks>
    /// Specify parmeters _assetId and _bookId for depreciaiton schedule II report.
    /// </remarks>
    [SysObsolete('Asset Depreciation Book is not used anymore. Only value models are used.', true, 01\01\2018)]
    public void assetBookDepreciationSchedule(
        AssetId                 _assetId = '',
        AssetDepreciationBookId _bookId = '')
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetTransQueryAcq</Name>
				<Source><![CDATA[
    private void assetTransQueryAcq(
        AssetBook  _assetBook,
        AssetTrans _assetTrans,
        TransDate  _fromDate,
        TransDate  _toDate)
    {
        select sum(AmountMST) from _assetTrans
            where _assetTrans.AssetId    == _assetBook.AssetId
                && _assetTrans.BookId     == _assetBook.BookId
                && _assetTrans.TransDate  > _fromDate
                && _assetTrans.TransDate  <= _toDate
                && (_assetTrans.TransType == AssetTransType::Acquisition
                    || _assetTrans.TransType  == AssetTransType::AcquisitionAdj
                    || _assetTrans.TransType  == AssetTransType::WriteUpAdj
                    || _assetTrans.TransType  == AssetTransType::WriteDownAdj
                    || _assetTrans.TransType  == AssetTransType::Revaluation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>balance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the value for <c>AssetBalance</c> field for the report.
    /// </summary>
    /// <returns>
    /// <c>AssetBalance</c> field for the report.
    /// </returns>
    private Amount balance()
    {
        select sum(Balance) from tmpItemGroup;
        select sum(BalanceAsset) from tmpAssetTable;

        return (tmpItemGroup.Balance + tmpAssetTable.BalanceAsset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentBal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the value for <c>CurrentBal</c> field for the report.
    /// </summary>
    /// <returns>
    /// <c>CurrentBal</c> field for the report.
    /// </returns>
    private Amount currentBal()
    {
        select sum(CurrentBal) from tmpAssetTable;
        select sum(CurrentBal) from tmpItemGroup;

        return (tmpAssetTable.CurrentBal + tmpItemGroup.CurrentBal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the value for <c>Deduction</c> field for the report.
    /// </summary>
    /// <returns>
    /// <c>Deduction</c> field for the report.
    /// </returns>
    private Amount deduction()
    {
        select sum(IssueAccount) from tmpItemGroup;
        select sum(Deduction) from tmpAssetTable;

        return (tmpItemGroup.IssueAccount + tmpAssetTable.Deduction);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deprDeduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the value for <c>DeductionInDepr</c> field for the report.
    /// </summary>
    /// <returns>
    /// <c>DeductionInDepr</c> field for the report.
    /// </returns>
    private Amount deprDeduction()
    {
        select sum(DeductionInDepr) from tmpAssetTable;

        return tmpAssetTable.DeductionInDepr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deprDuringyr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the value for <c>DeprDuringYr</c> field for the report.
    /// </summary>
    /// <returns>
    /// <c>DeprDuringYr</c> field for the report.
    /// </returns>
    private Amount deprDuringyr()
    {
        select sum(DeprDuringYr) from tmpAssetTable;

        return tmpAssetTable.DeprDuringYr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deprOpenBal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the value for <c>DeprOpening</c> field for the report.
    /// </summary>
    /// <returns>
    /// <c>DeprOpening</c> field for the report.
    /// </returns>
    private Amount deprOpenBal()
    {
        select sum(DeprOpening) from tmpAssetTable;

        return tmpAssetTable.DeprOpening;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeprOpeningBal</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is to calculate DeprOpeningBal.
    /// </summary>
    /// <param name="_fromDate">
    /// Passes FromDate.
    /// </param>
    /// <param name="_toDate">
    /// Passes ToDate.
    /// </param>
    /// <param name="_groupId">
    /// Passes GroupId.
    /// </param>
    /// <param name="_layer">
    /// Passes Layer.
    /// </param>
    /// <param name="_assetId">
    /// Asset id.
    /// </param>
    /// <param name="_bookId">
    /// Asset book id.
    /// </param>
    /// <returns>
    /// Value for DeprOpeningBal.
    /// </returns>
    private AmountMst getDeprOpeningBal(
        TransDate            _fromDate,
        TransDate            _toDate,
        AssetGroupId         _groupId,
        CurrentOperationsTax _layer,
        AssetId              _assetId = '',
        assetBookId          _bookId = '')
    {
        AmountMST           openBal;
        AmountMST           openBalLoc;
        AssetGroup          assetGroupLoc;
        AssetTable          assetTableLoc;
        AssetBookTable      assetBookTableLoc;
        AssetBook           assetBookLoc;
        AssetTrans          assetTransLoc;
        AssetGroupTrans_IN  assetGroupTransLoc;
        container           assetGroupBook;

        select firstonly assetGroupLoc
            where assetGroupLoc.GroupId == _groupId;
        if (assetGroupLoc)
        {
            openBal    = 0;
            openBalLoc = 0;

            while select AssetGroupDepreciation_IN, AssetId, BookId, AssetGroup from assetBookLoc
                where assetBookLoc.AssetGroup == _groupId
                    && (!_assetId || assetBookLoc.AssetId == _assetId)
                    && (!_bookId || assetBookLoc.BookId == _bookId)
                exists join assetTableLoc
                    where assetTableLoc.AssetGroup == _groupId
                        && assetTableLoc.AssetId == assetBookLoc.AssetId
                exists join assetBookTableLoc
                    where assetBookTableLoc.BookId               == assetBookLoc.BookId
                        && assetBookTableLoc.CurrentOperationsTax == _layer
            {
                if (assetBookLoc.AssetGroupDepreciation_IN == NoYes::No)
                {
                    select sum(AmountMST) from assetTransLoc
                        where assetTransLoc.AssetId    == assetBookLoc.AssetId
                            && assetTransLoc.BookId     == assetBookLoc.BookId
                            && assetTransLoc.TransDate   > _fromDate
                            && assetTransLoc.TransDate  <= _toDate
                            && (assetTransLoc.TransType == AssetTransType::Depreciation
                                || assetTransLoc.TransType  == AssetTransType::DepreciationAdj
                                || assetTransLoc.TransType  == AssetTransType::ExtraordinaryDepreciation
                                || assetTransLoc.TransType  == AssetTransType::BonusDepreciation);

                    openBal += assetTransLoc.AmountMST;
                }
                else
                {
                    if (!confind(assetGroupBook, assetBookLoc.AssetGroup, assetBookLoc.BookId, assetBookLoc.AssetId))
                    {
                        select sum(AmountMst) from assetGroupInformation
                            where assetGroupInformation.AssetGroup == assetBookLoc.AssetGroup
                                && assetGroupInformation.TransDate   > _fromDate
                                && assetGroupInformation.TransDate  <= _toDate
                                && (assetGroupInformation.TransType == AssetTransType::Depreciation
                                    || assetGroupInformation.TransType == AssetTransType::DepreciationAdj
                                    || assetGroupInformation.TransType == AssetTransType::ExtraordinaryDepreciation
                                    || assetGroupInformation.TransType == AssetTransType::BonusDepreciation)
                            join AssetGroupInformation from assetGroupTransLoc
                                where assetGroupTransLoc.AssetGroupInformation == assetGroupInformation.RecId
                                    && assetGroupTransLoc.AssetId == assetBookLoc.AssetId
                                    && assetGroupTransLoc.BookId == assetBookLoc.BookId;

                        openBal += assetGroupInformation.AmountMst;

                        assetGroupBook = conins(assetGroupBook,conlen(assetGroupBook)+1,assetBookLoc.AssetGroup);
                        assetGroupBook = conins(assetGroupBook,conlen(assetGroupBook)+1,assetBookLoc.BookId);
                        assetGroupBook = conins(assetGroupBook,conlen(assetGroupBook)+1,assetBookLoc.AssetId);
                    }
                }
                select sum(AmountMST) from assetTransLoc
                    where assetTransLoc.AssetId     == assetBookLoc.AssetId
                        && assetTransLoc.BookId     == assetBookLoc.BookId
                        && assetTransLoc.TransDate   > _fromDate
                        && assetTransLoc.TransDate  <= _toDate
                        && (assetTransLoc.TransType == AssetTransType::DepAdjPriorYears
                                || assetTransLoc.TransType == AssetTransType::DepAdjThisYear
                                || assetTransLoc.TransType == AssetTransType::DepPriorYears
                                || assetTransLoc.TransType == AssetTransType::DepThisYear
                                || assetTransLoc.TransType == AssetTransType::ExtraDepPriorYears
                                || assetTransLoc.TransType == AssetTransType::ExtraDepThisYear);

                openBalLoc += assetTransLoc.AmountMST;
            }
        }
        return (openBal + openBalLoc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOpeningBal</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is to calculate OpeningBal.
    /// </summary>
    /// <param name="_fromDate">
    /// Passes FromDate.
    /// </param>
    /// <param name="_toDate">
    /// Passes ToDate.
    /// </param>
    /// <param name="_groupId">
    /// Passes GroupId.
    /// </param>
    /// <param name="_layer">
    /// Passes Layer.
    /// </param>
    /// <param name="_assetId">
    /// Asset id.
    /// </param>
    /// <param name="_bookId">
    /// Asset book id.
    /// </param>
    /// <returns>
    /// Value for OpeningBal.
    /// </returns>
    private AmountMst getOpeningBal(
        TransDate            _fromDate,
        TransDate            _toDate,
        AssetGroupId         _groupId,
        CurrentOperationsTax _layer,
        AssetId              _assetId = '',
        assetBookId          _bookId = '')
    {
        AmountMST           openBal;
        AmountMST           openBalLoc;
        AssetGroup          assetGroupLoc;
        AssetTable          assetTableLoc;
        AssetBookTable      assetBookTableLoc;
        AssetBook           assetBookLoc;
        AssetTrans          assetTransLoc;

        select firstonly assetGroupLoc
            where assetGroupLoc.GroupId == _groupId;
        if (assetGroupLoc)
        {
            openBal    = 0;
            openBalLoc = 0;

            while select AssetId, BookId from assetBookLoc
                where assetBookLoc.AssetGroup == _groupId
                    && (!_assetId || assetBookLoc.AssetId == _assetId)
                    && (!_bookId || assetBookLoc.BookId == _bookId)
                exists join assetTableLoc
                    where assetTableLoc.AssetGroup == _groupId
                        && assetTableLoc.AssetId == assetBookLoc.AssetId
                exists join assetBookTableLoc
                    where assetBookTableLoc.BookId               == assetBookLoc.BookId
                        && assetBookTableLoc.CurrentOperationsTax == _layer
            {
                this.assetTransQueryAcq(
                    assetBookLoc,
                    assetTransLoc,
                    _fromDate,
                    _toDate);

                openBal += assetTransLoc.AmountMST;

                select sum(AmountMST) from assetTransLoc
                    where assetTransLoc.AssetId    == assetBookLoc.AssetId
                        && assetTransLoc.BookId     == assetBookLoc.BookId
                        && assetTransLoc.TransDate   > _fromDate
                        && assetTransLoc.TransDate  <= _toDate
                        && (assetTransLoc.TransType == AssetTransType::AcqAdjPriorYears
                            || assetTransLoc.TransType == AssetTransType::AcqAdjThisYear
                            || assetTransLoc.TransType == AssetTransType::AcqPriorYears
                            || assetTransLoc.TransType == AssetTransType::AcqThisYear
                            || assetTransLoc.TransType == AssetTransType::WriteUpAdjPriorYears
                            || assetTransLoc.TransType == AssetTransType::WriteUpAdjThisYear
                            || assetTransLoc.TransType == AssetTransType::WriteDownAdjThisYear
                            || assetTransLoc.TransType == AssetTransType::WriteDownAdjPriorYears
                            || assetTransLoc.TransType == AssetTransType::RevaluePriorYears
                            || assetTransLoc.TransType == AssetTransType::RevalueThisYear);

                openBalLoc += assetTransLoc.AmountMST;
            }
        }

        return (openBal + openBalLoc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrevBal</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is to calculate PrevBal.
    /// </summary>
    /// <param name="_fromDate">
    /// Passes FromDate.
    /// </param>
    /// <param name="_toDate">
    /// Passes ToDate.
    /// </param>
    /// <param name="_groupId">
    /// Passes GroupId.
    /// </param>
    /// <param name="_layer">
    /// Passes Layer.
    /// </param>
    /// <param name="_assetId">
    /// Asset id.
    /// </param>
    /// <param name="_bookId">
    /// Asset book id.
    /// </param>
    /// <returns>
    /// Value for PrevBal.
    /// </returns>
    private AmountMst getPrevBal(
        TransDate            _fromDate,
        TransDate            _toDate,
        AssetGroupId         _groupId,
        CurrentOperationsTax _layer,
        AssetId              _assetId = '',
        assetBookId          _bookId = '')
    {
        AmountMST           openBal;
        AmountMST           openBalLocal;
        AmountMST           openBalCopy;
        AmountMST           openBalDisp;
        AssetGroup          assetGroupLoc;
        AssetTable          assetTableLoc;
        AssetBookTable      assetBookTableLoc;
        AssetBook           assetBookLoc;
        AssetTrans          assetTransLoc;
        AssetGroupTrans_IN  assetGroupTransLoc;

        select firstonly assetGroupLoc
            where assetGroupLoc.GroupId == _groupId;

        if (assetGroupLoc)
        {
            openBal      = 0;
            openBalLocal = 0;
            openBalCopy  = 0;
            openBalDisp  = 0;

            while select AssetId, BookId from assetBookLoc
                where assetBookLoc.AssetGroup == _groupId
                    && (!_assetId || assetBookLoc.AssetId == _assetId)
                    && (!_bookId  || assetBookLoc.BookId  == _bookId)
                exists join assetTableLoc
                    where assetTableLoc.AssetGroup == _groupId
                        && assetTableLoc.AssetId   == assetBookLoc.AssetId
                exists join assetBookTableLoc
                    where assetBookTableLoc.BookId                == assetBookLoc.BookId
                        && assetBookTableLoc.CurrentOperationsTax == _layer
            {
                this.assetTransQueryAcq(
                    assetBookLoc,
                    assetTransLoc,
                    _fromDate,
                    _toDate);

                openBal += assetTransLoc.AmountMST;

                select sum(AmountMST) from assetTransLoc
                    where assetTransLoc.AssetId    == assetBookLoc.AssetId
                        && assetTransLoc.BookId     == assetBookLoc.BookId
                        && assetTransLoc.TransDate   > _fromDate
                        && assetTransLoc.TransDate  <= _toDate
                        && (assetTransLoc.TransType == AssetTransType::Depreciation
                            || assetTransLoc.TransType  == AssetTransType::DepreciationAdj
                            || assetTransLoc.TransType  == AssetTransType::ExtraordinaryDepreciation);

                openBalLocal += assetTransLoc.AmountMST;

                    select sum(AmountMst) from assetGroupInformation
                    where assetGroupInformation.TransDate   > _fromDate
                        && assetGroupInformation.TransDate  <= _toDate
                        && (assetGroupInformation.TransType == AssetTransType::Depreciation
                            || assetGroupInformation.TransType  == AssetTransType::DepreciationAdj
                            || assetGroupInformation.TransType  == AssetTransType::ExtraordinaryDepreciation)
                        join AssetGroupInformation from assetGroupTransLoc
                        where assetGroupTransLoc.AssetGroupInformation == assetGroupInformation.RecId
                                && assetGroupTransLoc.AssetId == assetBookLoc.AssetId
                                && assetGroupTransLoc.BookId == assetBookLoc.BookId;

                openBalLocal += assetGroupInformation.AmountMST;

                select sum(AmountMST) from assetTransLoc
                    where assetTransLoc.AssetId    == assetBookLoc.AssetId
                        && assetTransLoc.BookId     == assetBookLoc.BookId
                        && assetTransLoc.TransDate   > _fromDate
                        && assetTransLoc.TransDate  <= _toDate
                        && (assetTransLoc.TransType == AssetTransType::DepAdjPriorYears
                            || assetTransLoc.TransType == AssetTransType::DepAdjThisYear
                            || assetTransLoc.TransType == AssetTransType::DepThisYear
                            || assetTransLoc.TransType == AssetTransType::DepPriorYears
                            || assetTransLoc.TransType == AssetTransType::ExtraDepPriorYears
                            || assetTransLoc.TransType == AssetTransType::ExtraDepThisYear);

                openBalCopy += assetTransLoc.AmountMST;

                select sum(AmountMst) from assetGroupInformation
                    where assetGroupInformation.TransDate   >  _fromDate
                        && assetGroupInformation.TransDate  <= _toDate
                        && (assetGroupInformation.TransType == AssetTransType::DepAdjPriorYears
                            || assetGroupInformation.TransType == AssetTransType::DepAdjThisYear
                            || assetGroupInformation.TransType == AssetTransType::DepThisYear
                            || assetGroupInformation.TransType == AssetTransType::DepPriorYears
                            || assetGroupInformation.TransType == AssetTransType::ExtraDepPriorYears
                            || assetGroupInformation.TransType == AssetTransType::ExtraDepThisYear)
                        join AssetGroupInformation from assetGroupTransLoc
                        where assetGroupTransLoc.AssetGroupInformation == assetGroupInformation.RecId
                                && assetGroupTransLoc.AssetId == assetBookLoc.AssetId
                                && assetGroupTransLoc.BookId == assetBookLoc.BookId;

                openBalCopy += assetTransLoc.AmountMST;

                while select AmountMST from assetTransLoc
                    where assetTransLoc.AssetId    == assetBookLoc.AssetId
                        && assetTransLoc.BookId     == assetBookLoc.BookId
                        && assetTransLoc.TransDate   >  _fromDate
                        && assetTransLoc.TransDate  <= _toDate
                        && (assetTransLoc.TransType == AssetTransType::DisposalSale
                            || assetTransLoc.TransType  == AssetTransType::DisposalScrap)
                {
                    openBalDisp += assetTransLoc.AmountMST;

                    if (abs(openBalDisp) >= openBal)
                    {
                        openBalDisp  = -openBal;
                        openBalLocal = 0;
                    }
                }
            }
        }
        return (openBal + openBalLocal + openBalCopy + openBalDisp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpAssetTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes temporary table.
    /// </summary>
    /// <returns>
    /// Returns temporary table <c>TmpAssetTable_IN</c>.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(TmpAssetTable_IN))
    ]
    public TmpAssetTable_IN getTmpAssetTable()
    {
        return tmpAssetTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpDepreciationSchedule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes temporary table.
    /// </summary>
    /// <returns>
    /// Returns temporary table <c>TmpDepreciationSchedule_IN</c>.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(TmpDepreciationSchedule_IN))
    ]
    public TmpDepreciationSchedule_IN getTmpDepreciationSchedule()
    {
        return tmpDepreciationSchedule_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpItemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes temporary table.
    /// </summary>
    /// <returns>
    /// Returns temporary table <c>TmpItemGroup_IN</c>.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(TmpItemGroup_IN))
    ]
    public TmpItemGroup_IN getTmpItemGroup()
    {
        return tmpItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpAssetTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert <c>TmpAssetTable</c> record.
    /// </summary>
    /// <param name="_groupId">
    /// Asset group id.
    /// </param>
    /// <param name="_assetId">
    /// Asset id.
    /// </param>
    /// <param name="_bookId">
    /// Asset book id.
    /// </param>
    /// <remarks>
    /// Specify parmeters _assetId and _bookId for component depreciaiton schedule report.
    /// </remarks>
    private void insertTmpAssetTable(
        AssetGroupId        _groupId,
        AssetId             _assetId = '',
        AssetBookMergeId    _bookId = '')
    {
        container           assetGroupBook;
        Amount              deductionDisp;
        Amount              deductionDispLoc;
        AssetBook           assetBook;
        AssetBookTable      assetBookTableLoc;
        AssetTable          assetTableLoc;
        AssetTrans          assetTransLoc;
        AssetTable          assetTablePrinciple;
        AssetTable          assetTableComponent;

        addition                      = 0;
        deduction                     = 0;
        deprDuringYear                = 0;
        deductInDepr                  = 0;
        tmpAssetTable.OpeningBal      = 0;
        tmpAssetTable.DeductionInDepr = 0;
        tmpAssetTable.DeprDuringYr    = 0;
        tmpAssetTable.DeprOpening     = 0;
        deductionDisp                 = 0;

        select firstOnly assetTable
            where assetTable.AssetGroup == _groupId
                && (!_assetId || assetTable.AssetId == _assetId);

        if (assetTable)
        {
            tmpAssetTable.clear();

            if (_assetId)
            {
                tmpAssetTable.AssetId            = _assetId;
                tmpAssetTable.BookId             = _bookId;
                if (assetTable.MainAssetId)
                {
                    assetTableComponent = assetTable::find(assetTable.MainAssetId);
                }
                if (assetTableComponent && assetTableComponent.MainAssetId)
                {
                    assetTablePrinciple = assetTable::find(assetTableComponent.MainAssetId);
                }
                if (assetTableComponent && assetTablePrinciple)
                {
                    tmpAssetTable.PrincipleAssetId   = assetTablePrinciple.AssetId;
                    tmpAssetTable.PrincipleAssetName = assetTablePrinciple.Name;
                    tmpAssetTable.ComponentAssetId   = assetTableComponent.AssetId;
                }
                else
                {
                    tmpAssetTable.PrincipleAssetId   = assetTable.AssetId;
                    tmpAssetTable.PrincipleAssetName = assetTable.Name;
                    tmpAssetTable.ComponentAssetId   = '';
                }
            }

            while select AssetGroup, AssetId, BookId, AssetGroupDepreciation_IN, Status from assetBook
                where assetBook.AssetGroup == _groupId
                    && (!_assetId || assetBook.AssetId == _assetId)
                    && (!_bookId  || assetBook.BookId  == _bookId)
                exists join assetTableLoc
                    where assetTableLoc.AssetGroup == _groupId
                        && assetTableLoc.AssetId   == assetBook.AssetId
                exists join assetBookTableLoc
                    where assetBookTableLoc.BookId                == assetBook.BookId
                        && assetBookTableLoc.CurrentOperationsTax == currentOperationsTax
            {
                while select assetTrans
                    where assetTrans.AssetId     == assetBook.AssetId
                        && assetTrans.BookId      == assetBook.BookId
                        && assetTrans.TransDate    > closingDatePriorYear
                        && assetTrans.TransDate   <= closingDateThisYear
                        && (assetTrans.TransType  == AssetTransType::Acquisition
                            || assetTrans.TransType == AssetTransType::AcquisitionAdj
                            || assetTrans.TransType == AssetTransType::WriteUpAdj
                            || assetTrans.TransType == AssetTransType::WriteDownAdj
                            || assetTrans.TransType == AssetTransType::Revaluation)
                {
                    addition += assetTrans.AmountMST;
                    if (assetTrans.TransType == AssetTransType::Acquisition)
                    {
                        deductionDisp += assetTrans.AmountMST;
                    }
                }

                if (assetBook.AssetGroupDepreciation_IN == NoYes::Yes)
                {
                    select sum(AmountMST) from assetTrans
                        where assetTrans.BookId      == assetBook.BookId
                            && assetTrans.TransDate    > closingDatePriorYear
                            && assetTrans.TransDate   <= closingDateThisYear
                            && assetTrans.TransType   == AssetTransType::Acquisition;

                    deductionDisp = assetTrans.AmountMST;
                }

                if (assetBook.AssetGroupDepreciation_IN == NoYes::No)
                {
                    select sum(AmountMST) from assetTrans
                        where assetTrans.AssetId    == assetBook.AssetId
                            && assetTrans.BookId     == assetBook.BookId
                            && assetTrans.TransDate   > closingDatePriorYear
                            && assetTrans.TransDate  <= closingDateThisYear
                            && (assetTrans.TransType == AssetTransType::AcqAdjPriorYears
                                || assetTrans.TransType == AssetTransType::AcqAdjThisYear
                                || assetTrans.TransType == AssetTransType::AcqPriorYears
                                || assetTrans.TransType == AssetTransType::AcqThisYear
                                || assetTrans.TransType == AssetTransType::WriteUpAdjPriorYears
                                || assetTrans.TransType == AssetTransType::WriteUpAdjThisYear
                                || assetTrans.TransType == AssetTransType::WriteDownAdjPriorYears
                                || assetTrans.TransType == AssetTransType::WriteDownAdjThisYear
                                || assetTrans.TransType == AssetTransType::RevaluePriorYears
                                || assetTrans.TransType == AssetTransType::RevalueThisYear);

                    deduction += assetTrans.AmountMST;
                }
                else
                {
                    while select assetTrans
                        where assetTrans.AssetId    == assetBook.AssetId
                            && assetTrans.BookId     == assetBook.BookId
                            && assetTrans.TransDate   > closingDatePriorYear
                            && assetTrans.TransDate  <= closingDateThisYear
                            && (assetTrans.TransType == AssetTransType::DisposalSale
                                || assetTrans.TransType  == AssetTransType::DisposalScrap)
                    {
                        if (!addition)
                        {
                            deductionDisp    = 0;
                            deductionDispLoc = 0;

                            select sum(AmountMST) from assetTransLoc
                                where assetTransLoc.AssetGroup  == assetBook.AssetGroup
                                    && assetTransLoc.BookId      == assetBook.BookId
                                    && (assetTransLoc.TransType  == AssetTransType::Acquisition
                                        || assetTransLoc.TransType == AssetTransType::AcquisitionAdj
                                        || assetTransLoc.TransType == AssetTransType::WriteUpAdj
                                        || assetTransLoc.TransType == AssetTransType::WriteDownAdj
                                        || assetTransLoc.TransType == AssetTransType::Revaluation
                                        || assetTransLoc.TransType == AssetTransType::AcqThisYear);

                            deductionDisp += assetTransLoc.AmountMST;
                        }

                        if (abs(assetTrans.AmountMST) > deductionDisp)
                        {
                            deduction       += -deductionDisp;
                            deductionDispLoc = abs(assetTrans.AmountMST);
                        }
                        else
                        {
                            deduction       += assetTrans.AmountMST;
                            deductionDispLoc = abs(assetTrans.AmountMST);
                        }
                    }
                }

                if (assetBook.AssetGroupDepreciation_IN == NoYes::No)
                {
                    select sum(AmountMST) from assetTrans
                        where assetTrans.AssetId    == assetBook.AssetId
                            && assetTrans.BookId     == assetBook.BookId
                            && assetTrans.TransDate   > closingDatePriorYear
                            && assetTrans.TransDate  <= closingDateThisYear
                            && (assetTrans.TransType == AssetTransType::Depreciation
                                || assetTrans.TransType  == AssetTransType::DepreciationAdj
                                || assetTrans.TransType  == AssetTransType::ExtraordinaryDepreciation
                                || assetTrans.TransType  == AssetTransType::BonusDepreciation);

                    deprDuringYear += assetTrans.AmountMST;

                    select sum(AmountMST) from assetTrans
                        where assetTrans.AssetId   == assetBook.AssetId
                            && assetTrans.BookId    == assetBook.BookId
                            && assetTrans.TransDate  > closingDatePriorYear
                            && assetTrans.TransDate <= closingDateThisYear
                            &&(assetTrans.TransType == AssetTransType::DepAdjPriorYears
                                || assetTrans.TransType == AssetTransType::DepAdjThisYear
                                || assetTrans.TransType == AssetTransType::DepThisYear
                                || assetTrans.TransType == AssetTransType::DepPriorYears
                                || assetTrans.TransType == AssetTransType::ExtraDepPriorYears
                                || assetTrans.TransType == AssetTransType::ExtraDepThisYear);

                    deductInDepr += assetTrans.AmountMST;
                }
                else
                {
                    if (!confind(assetGroupBook, assetBook.AssetGroup,assetBook.BookId, assetBook.AssetId) || !addition)
                    {
                        while select assetGroupTrans
                            join assetGroupInformation
                                where assetGroupTrans.AssetId            == assetBook.AssetId
                                && assetGroupTrans.BookId                == assetBook.BookId
                                && assetGroupTrans.AssetGroupInformation == assetGroupInformation.RecId
                                && assetGroupInformation.TransDate       > closingDatePriorYear
                                && assetGroupInformation.TransDate       <= closingDateThisYear
                                && (assetGroupInformation.TransType      == AssetTransType::Depreciation
                                    || assetGroupInformation.TransType == AssetTransType::DepreciationAdj
                                    || assetGroupInformation.TransType == AssetTransType::ExtraordinaryDepreciation
                                    || assetGroupInformation.TransType == AssetTransType::BonusDepreciation)
                        {
                            deprDuringYear += assetGroupInformation.AmountMst;

                            if (assetBook.Status    == AssetStatus::Sold
                                || assetBook.Status == AssetStatus::Scrapped
                                || assetBook.Status == AssetStatus::Open)
                            {
                                if (deductionDispLoc >= abs(deductionDisp))
                                {
                                    deductInDepr += -(assetGroupInformation.AmountMST);
                                }
                            }
                        }

                        if ((assetBook.Status   == AssetStatus::Sold
                            || assetBook.Status == AssetStatus::Scrapped)
                            && !deductInDepr)
                        {
                            if ((deductionDispLoc || deductionDisp)
                                && deductionDispLoc >= abs(deductionDisp))
                            {
                                select sum(AmountMST) from assetGroupInformation
                                    join assetGroupTrans
                                    where assetGroupTrans.AssetId == assetBook.AssetId
                                        && assetGroupTrans.BookId == assetBook.BookId
                                        && assetGroupTrans.AssetGroupInformation == assetGroupInformation.RecId
                                        && (assetGroupInformation.TransType == AssetTransType::Depreciation
                                            || assetGroupInformation.TransType == AssetTransType::DepreciationAdj
                                            || assetGroupInformation.TransType == AssetTransType::ExtraordinaryDepreciation
                                            || assetGroupInformation.TransType == AssetTransType::BonusDepreciation);

                                deductInDepr += -(assetGroupInformation.AmountMST);
                            }
                        }

                        select sum(AmountMST) from assetGroupInformation
                            join assetGroupTrans
                            where assetGroupTrans.AssetId      == assetBook.AssetId
                                && assetGroupTrans.BookId          == assetBook.BookId
                                && assetGroupInformation.TransDate  > closingDatePriorYear
                                && assetGroupInformation.TransDate <= closingDateThisYear
                                &&(assetGroupInformation.TransType == AssetTransType::DepAdjPriorYears
                                    || assetGroupInformation.TransType == AssetTransType::DepAdjThisYear
                                    || assetGroupInformation.TransType == AssetTransType::DepThisYear
                                    || assetGroupInformation.TransType == AssetTransType::DepPriorYears
                                    || assetGroupInformation.TransType == AssetTransType::ExtraDepPriorYears
                                    || assetGroupInformation.TransType == AssetTransType::ExtraDepThisYear);

                        deductInDepr += assetGroupInformation.AmountMST;

                        if (deprDuringYear || deductInDepr)
                        {
                            assetGroupBook = conins(assetGroupBook,conlen(assetGroupBook)+1,assetBook.AssetGroup);
                            assetGroupBook = conins(assetGroupBook,conlen(assetGroupBook)+1,assetBook.BookId);
                            assetGroupBook = conins(assetGroupBook,conlen(assetGroupBook)+1,assetBook.AssetId);
                        }
                    }
                }
            }

            tmpAssetTable.OpeningBal = this.getOpeningBal(dateNull(),
                                                                closingDatePriorYear,
                                                                _groupId,
                                                                currentOperationsTax,
                                                                _assetId,
                                                                _bookId);

            tmpAssetTable.Addition          = addition;
            tmpAssetTable.Deduction         = deduction;
            tmpAssetTable.BalanceAsset      = addition + deduction + tmpAssetTable.OpeningBal;

            if (tmpAssetTable.OpeningBal)
            {
                tmpAssetTable.DeprOpening = this.getDeprOpeningBal(dateNull(),
                                                                        closingDatePriorYear,
                                                                        _groupId,
                                                                        currentOperationsTax,
                                                                        _assetId,
                                                                        _bookId);
            }

            tmpAssetTable.DeprDuringYr    = deprDuringYear;
            tmpAssetTable.DeductionInDepr = deductInDepr;
            tmpAssetTable.TotaldeprBal    = deprDuringYear + deductInDepr + tmpAssetTable.DeprOpening;
            tmpAssetTable.CurrentBal      = tmpAssetTable.BalanceAsset + tmpAssetTable.TotaldeprBal;

            tmpAssetTable.PreviousBal = this.getPrevBal(dateNull(),
                                                                    closingDatePriorYear,
                                                                    _groupId,
                                                                    currentOperationsTax,
                                                                    _assetId,
                                                                    _bookId);
            tmpAssetTable.AssetGroup   = _groupId;
            tmpAssetTable.PostingLayer = currentOperationsTax;
            tmpAssetTable.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpDepreciationSchedule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records into Temporary table <c>TmpDepreciationSchedule_IN</c>.
    /// </summary>
    /// <param name="_prevYear">
    /// Passes PrevYear
    /// </param>
    private void insertTmpDepreciationSchedule(PreviousYear_IN _prevYear)
    {
        select firstonly _prevYear
            where _prevYear.Fromdate == prevyr(closingDatePriorYear)
                && _prevYear.ToDate   == prevyr(closingDateThisYear);

        tmpDepreciationSchedule_IN.OpeningBalance = _prevYear.OpeningBal;
        tmpDepreciationSchedule_IN.Additions      = _prevYear.Addition;
        tmpDepreciationSchedule_IN.Deductions     = _prevYear.Deduction;
        tmpDepreciationSchedule_IN.AssetBalance   = _prevYear.BalanceofAsset;
        tmpDepreciationSchedule_IN.DepOpeningBal  = _prevYear.DeprOpening;
        tmpDepreciationSchedule_IN.DepDuringYear  = _prevYear.DeprDuringyr;
        tmpDepreciationSchedule_IN.Deductions     = _prevYear.DeductioninDepr;
        tmpDepreciationSchedule_IN.TotalDepBal    = _prevYear.TotalDepr;
        tmpDepreciationSchedule_IN.CurrentBal     = _prevYear.CurrentBal;
        tmpDepreciationSchedule_IN.PreviousBal    = _prevYear.PreviousBal;

        tmpDepreciationSchedule_IN.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>openingBalItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the value for OpeningBalItem.
    /// </summary>
    /// <param name="_fromDate">
    /// Passes FromDate.
    /// </param>
    /// <param name="_toDate">
    /// Passes ToDate.
    /// </param>
    /// <param name="_groupId">
    /// Passes GroupId.
    /// </param>
    /// <returns>
    /// Value for OpeningBalItem.
    /// </returns>
    private Amount openingBalItem(
        TransDate   _fromDate,
        TransDate   _toDate,
        ItemGroupId _groupId)
    {
        InventItemGroup inventItemGroupLoc;
        InventTable     inventTableLoc;
        InventTrans     inventTransLoc;
        AmountMST       openBal,openBalLoc;

        while select AssetGroup_IN from inventItemGroupLoc
            where inventItemGroupLoc.AssetGroup_IN == NoYes::Yes
        {
            openBal    = 0;
            openBalLoc = 0;

            while select ItemId from inventTableLoc
                where inventTableLoc.dataAreaId       == inventItemGroupLoc.DataAreaId
                    && inventItemGroupLoc.ItemGroupId == _groupId
            {
                select sum(CostAmountPosted) from inventTransLoc
                    where inventTransLoc.ItemId           == inventTableLoc.ItemId
                       && inventTransLoc.DatePhysical      > _fromDate
                       && inventTransLoc.DatePhysical     <= _toDate
                       && inventTransLoc.CostAmountPosted  > 0;

                openBal += inventTransLoc.CostAmountPosted;

                select sum(CostAmountPosted) from inventTransLoc
                    where inventTransLoc.ItemId           == inventTableLoc.ItemId
                       && inventTransLoc.DatePhysical      > _fromDate
                       && inventTransLoc.DatePhysical     <= _toDate
                       && inventTransLoc.CostAmountPosted <= 0;

                openBalLoc += inventTransLoc.CostAmountPosted;
            }
        }

        return openBal + openBalLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>previousBal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the value for <c>PreviousBal</c> field for the report.
    /// </summary>
    /// <returns>
    /// Value for PreviousBal.
    /// </returns>
    private Amount previousBal()
    {
        select sum(PreviousBal) from tmpAssetTable;
        select sum(PreviousBal) from tmpItemGroup;

        return (tmpAssetTable.PreviousBal + tmpItemGroup.PreviousBal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        AssetGroup                  assetGroup;
        AssetDepScheduleContract_IN contract;
        InventItemGroupItem         inventItemGroupItem;

        contract = this.parmDataContract() as AssetDepScheduleContract_IN;

        reportType              = contract.parmReportType();
        closingDateThisYear     = contract.parmClosingDateThisYear();
        closingDatePriorYear    = contract.parmClosingDatePriorYear();
        assetGroupFromId        = contract.parmAssetGroupFromId();
        assetGroupToId          = contract.parmAssetGroupToId();
        currentOperationsTax    = contract.parmCurrentOperationsTax();
        assetBookId             = contract.parmValueModel();

        delete_from tmpItemGroup;
        delete_from tmpAssetTable;

        if (reportType == AssetDepreciationScheduleReportType_IN::DepreciationSchedule)
        {
            while select GroupId from assetGroup
                where assetGroup.GroupId >= contract.parmAssetGroupFromId()
                   && assetGroup.GroupId <= contract.parmAssetGroupToId()
            {
                this.insertTmpAssetTable(assetGroup.GroupId);
            }

            while select inventItemGroup
                where inventItemGroup.AssetGroup_IN == NoYes::Yes
            {
                receiptAmount = 0;
                issueAmount   = 0;

                while select inventTable
                    join ItemGroupId from inventItemGroupItem
                    where inventItemGroupItem.ItemId         == inventTable.ItemId
                       && inventItemGroupItem.ItemDataAreaId == inventTable.dataAreaId
                {
                    select sum(CostAmountPosted) from inventTrans
                        where inventTrans.ItemId           == inventTable.ItemId
                           && inventTrans.DatePhysical      > closingDatePriorYear
                           && inventTrans.DatePhysical     <= closingDateThisYear
                           && inventTrans.CostAmountPosted  > 0;

                    receiptAmount += inventTrans.CostAmountPosted;

                    select sum(CostAmountPosted) from inventTrans
                        where inventTrans.ItemId           == inventTable.ItemId
                           && inventTrans.DatePhysical      > closingDatePriorYear
                           && inventTrans.DatePhysical     <= closingDateThisYear
                           && inventTrans.CostAmountPosted <= 0;

                    issueAmount += inventTrans.CostAmountPosted;
                }

                tmpItemGroup.OpeningBalance = this.openingBalItem(
                                                dateNull(),
                                                closingDatePriorYear,
                                                inventItemGroup.ItemGroupId);

                tmpItemGroup.ReceiptAccount = receiptAmount;
                tmpItemGroup.IssueAccount   = issueAmount;
                tmpItemGroup.Balance        = tmpItemGroup.OpeningBalance + receiptAmount + issueAmount;
                tmpItemGroup.CurrentBal     = tmpItemGroup.Balance;
                tmpItemGroup.PreviousBal    = this.openingBalItem(
                                                dateNull(),
                                                closingDatePriorYear,
                                                inventItemGroup.ItemGroupId);

                tmpItemGroup.ItemGroupId    = inventItemGroup.ItemGroupId;
                tmpItemGroup.insert();
            }

            ttsbegin;

            select forupdate previousYear
                where previousYear.Fromdate == closingDatePriorYear
                   && previousYear.ToDate   == closingDateThisYear;

            previousYear.Fromdate        = closingDatePriorYear;
            previousYear.ToDate          = closingDateThisYear;
            previousYear.OpeningBal      = this.totalOpeningBal();
            previousYear.Addition        = this.addition();
            previousYear.Deduction       = this.deduction();
            previousYear.BalanceofAsset  = this.balance();
            previousYear.DeprOpening     = this.deprOpenBal();
            previousYear.DeprDuringyr    = this.deprDuringyr();
            previousYear.DeductioninDepr = this.deprDeduction();
            previousYear.TotalDepr       = this.totalDepr();
            previousYear.CurrentBal      = this.currentBal();
            previousYear.PreviousBal     = this.previousBal();

            if (previousYear.RecId)
            {
                previousYear.update();
            }
            else
            {
                previousYear.insert();
            }

            this.insertTmpDepreciationSchedule(previousYear);

            ttscommit;
        }
        else if (reportType == AssetDepreciationScheduleReportType_IN::ComponentDepreciationSchedule)
        {
            this.processReportForCmpDepSchedule();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReportForCmpDepSchedule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic for component depreciaiton schedule.
    /// </summary>
    protected void processReportForCmpDepSchedule()
    {
        TmpAssetTable_IN    tmpAssetTableLocal;

        this.processReportForCmpDepScheduleValueModel();

        // Update principle asset net book value
        tmpAssetTableLocal.setTmpData(tmpAssetTable);
        while select PrincipleAssetId, BookId, sum(CurrentBal) from tmpAssetTable
            group by PrincipleAssetId, BookId
        {
            update_recordSet tmpAssetTableLocal
            setting PrincipleAssetNBV = tmpAssetTable.CurrentBal
            where tmpAssetTableLocal.PrincipleAssetId   == tmpAssetTable.PrincipleAssetId
                && tmpAssetTableLocal.BookId            == tmpAssetTable.BookId;
        }

        // Not show value model with opening balance = 0 and closing balance = 0 for the same period in the report
        // e.g. any asset purchased and sold in the same year, does not form a part of the balance sheet.
        delete_from tmpAssetTable
            where tmpAssetTable.PreviousBal == 0
                && tmpAssetTable.CurrentBal == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReportForCmpDepScheduleValueModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic for component depreciaiton schedule/value model.
    /// </summary>
    protected void processReportForCmpDepScheduleValueModel()
    {
        AssetBook           assetBook;
        AssetBookTable      assetBookTable;
        AssetTable          assetTablePrinciple;
        AssetTable          assetTableComponent;
        AssetTable          assetTablePart;

        // Principle assets with strcuture
        while select AssetId, BookId from assetBook
                where (!assetBookId || assetBook.BookId == assetBookId)
                    && assetBook.AssetGroupDepreciation_IN == NoYes::No
                    && assetBook.Status != AssetStatus::NoAcquisition
            join AssetId, MainAssetId from assetTablePart
                where assetTablePart.AssetId == assetBook.AssetId
            join AssetId, MainAssetId from assetTableComponent
                where assetTableComponent.AssetId == assetTablePart.MainAssetId
            join AssetId, AssetGroup, MainAssetId from assetTablePrinciple
                where assetTablePrinciple.MainAssetId == ''
                    && assetTablePrinciple.AssetGroup >= assetGroupFromId
                    && assetTablePrinciple.AssetGroup <= assetGroupToId
                    && assetTablePrinciple.AssetId == assetTableComponent.MainAssetId
            exists join assetBookTable
                where assetBookTable.BookId == assetBook.BookId
                    && assetBookTable.CurrentOperationsTax == currentOperationsTax
        {
            this.insertTmpAssetTable(assetTablePrinciple.AssetGroup, assetBook.AssetId, assetBook.BookId);
        }

        // Principle assets without strcuture
        while select AssetId, BookId from assetBook
                where (!assetBookId || assetBook.BookId == assetBookId)
                    && assetBook.AssetGroupDepreciation_IN == NoYes::No
                    && assetBook.Status != AssetStatus::NoAcquisition
            join AssetId, AssetGroup from assetTablePrinciple
                where assetTablePrinciple.MainAssetId == ''
                    && assetTablePrinciple.AssetGroup >= assetGroupFromId
                    && assetTablePrinciple.AssetGroup <= assetGroupToId
                    && assetTablePrinciple.AssetId == assetBook.AssetId
            exists join assetBookTable
                where assetBookTable.BookId == assetBook.BookId
                    && assetBookTable.CurrentOperationsTax == currentOperationsTax
            notexists join AssetId, MainAssetId from assetTableComponent
                where assetTablePrinciple.AssetId == assetTableComponent.MainAssetId
        {
            this.insertTmpAssetTable(assetTablePrinciple.AssetGroup, assetBook.AssetId, assetBook.BookId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalDepr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the value for <c>TotaldeprBal</c> field for the report.
    /// </summary>
    /// <returns>
    /// <c>TotaldeprBal</c> field for the report.
    /// </returns>
    private Amount totalDepr()
    {
        select sum(TotaldeprBal) from tmpAssetTable;

        return tmpAssetTable.TotaldeprBal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalOpeningBal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the value for <c>TotalOpeningBal</c> field for the report.
    /// </summary>
    /// <returns>
    /// Value for TotalOpeningBal
    /// </returns>
    private Amount totalOpeningBal()
    {
        select sum(OpeningBalance) from tmpItemGroup;
        select sum(OpeningBal) from tmpAssetTable;

        return (tmpItemGroup.OpeningBalance + tmpAssetTable.OpeningBal);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>