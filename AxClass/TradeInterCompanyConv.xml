<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeInterCompanyConv</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TradeInterCompanyConv</c> class converts field values between companies.
/// </summary>
/// <remarks>
/// This class is set up in the Application Integration Framework (AIF) from Microsoft Dynamics AX.An
/// endpoints form, by clicking Action policies, and then clicking Configure for both the sending
/// company and the receiving company.The conversion methods are called two times:1. The first time in
/// the sending company with a value which is converted according to the setup in company A, returning
/// the initial value.2. The second time in the receiving company, with a value that converts the value
/// that is converted in the first call, according to the setup in company B, returning the final
/// converted value.
/// </remarks>
class  TradeInterCompanyConv
{
    str         intercompanyCode;
    RefRecId    product;
    RefRecId    distinctProductVariant;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>axCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode axCurrencyCode(AifEndpointActionValueMap _gatewaySchemaSetup, CurrencyCode _currencyCode = '')
    {
        XMLAxId2Code        xmlAxId2Code;
        XMLCode2AxId        xmlCode2AxId;
        tableId             tableId             = tablenum(Currency);
        CurrencyCode        axCurrencyCode;

        setprefix("@SYS72850");

        if (!prmisdefault(_currencyCode))
        {
            xmlAxId2Code = XMLAxId2Code::newXMLMapCurrencyCode(_gatewaySchemaSetup.xmlMapCurrencyCode,
                                                               tableId,
                                                               _currencyCode,
                                                               _gatewaySchemaSetup.CurrencyExtCodeId,
                                                               '');

            this.intercompanyCode(xmlAxId2Code.xmlCode());

            axCurrencyCode = _currencyCode;
        }
        else
        {
            xmlCode2AxId = XMLCode2AxId::newXMLMapCurrencyCode(_gatewaySchemaSetup.xmlMapCurrencyCode,
                                                               tableId,
                                                               ExtCodeSubModule::None,
                                                               this.intercompanyCode(),
                                                               _gatewaySchemaSetup.CurrencyExtCodeId,
                                                               '');

            axCurrencyCode = xmlCode2AxId.axId();
        }

        return axCurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>axCustAccount</Name>
				<Source><![CDATA[
    public CustAccount axCustAccount(AifEndpointActionValueMap _gatewaySchemaSetup, CustAccount _custAccount = '')
    {
        XMLAxId2Code        xmlAxId2Code;
        XMLCode2AxId        xmlCode2AxId;
        tableId             tableId             = tablenum(CustTable);
        CustAccount         axCustAccount;

        if (!prmisdefault(_custAccount))
        {
            xmlAxId2Code = XMLAxId2Code::newXMLMapExternalCode(_gatewaySchemaSetup.xmlMapCustAccount,
                                                               tableId,
                                                               _custAccount,
                                                               _gatewaySchemaSetup.CustAccountExtCodeId,
                                                               '');

            this.intercompanyCode(xmlAxId2Code.xmlCode());

            axCustAccount = _custAccount;
        }
        else
        {
            xmlCode2AxId = XMLCode2AxId::newXMLMapExternalCode(_gatewaySchemaSetup.xmlMapCustAccount,
                                                               tableId,
                                                               ExtCodeSubModule::None,
                                                               this.intercompanyCode(),
                                                               _gatewaySchemaSetup.CustAccountExtCodeId,
                                                               '');

            axCustAccount = xmlCode2AxId.axId();
        }

        return axCustAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>axDlvModeId</Name>
				<Source><![CDATA[
    public DlvModeId axDlvModeId(AifEndpointActionValueMap _gatewaySchemaSetup, DlvModeId _dlvModeId = '')
    {
        XMLAxId2Code        xmlAxId2Code;
        XMLCode2AxId        xmlCode2AxId;
        tableId             tableId             = tablenum(DlvMode);
        DlvModeId           axDlvModeId;

        if (!prmisdefault(_dlvModeId))
        {
            xmlAxId2Code = XMLAxId2Code::newXMLMapExternalCode(_gatewaySchemaSetup.xmlMapDlvMode,
                                                               tableId,
                                                               _dlvModeId,
                                                               _gatewaySchemaSetup.DlvModeExtCodeId,
                                                               '');

            this.intercompanyCode(xmlAxId2Code.xmlCode());

            axDlvModeId = _dlvModeId;
        }
        else
        {
            xmlCode2AxId = XMLCode2AxId::newXMLMapExternalCode(_gatewaySchemaSetup.xmlMapDlvMode,
                                                               tableId,
                                                               ExtCodeSubModule::None,
                                                               this.intercompanyCode(),
                                                               _gatewaySchemaSetup.DlvModeExtCodeId,
                                                               '');
            axDlvModeId = xmlCode2AxId.axId();
        }

        return axDlvModeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>axDlvTermId</Name>
				<Source><![CDATA[
    public DlvTermId axDlvTermId(AifEndpointActionValueMap _gatewaySchemaSetup, DlvTermId _dlvTermId = '')
    {
        XMLAxId2Code        xmlAxId2Code;
        XMLCode2AxId        xmlCode2AxId;
        tableId             tableId             = tablenum(DlvTerm);
        DlvTermId           axDlvTermId;

        if (!prmisdefault(_dlvTermId))
        {
            xmlAxId2Code = XMLAxId2Code::newXMLMapExternalCode(_gatewaySchemaSetup.xmlMapDlvTerm,
                                                               tableId,
                                                               _dlvTermId,
                                                               _gatewaySchemaSetup.DlvTermExtCodeId,
                                                               '');

            this.intercompanyCode(xmlAxId2Code.xmlCode());

            axDlvTermId = _dlvTermId;
        }
        else
        {
            xmlCode2AxId = XMLCode2AxId::newXMLMapExternalCode(_gatewaySchemaSetup.xmlMapDlvTerm,
                                                               tableId,
                                                               ExtCodeSubModule::None,
                                                               this.intercompanyCode(),
                                                               _gatewaySchemaSetup.DlvTermExtCodeId,
                                                               '');
            axDlvTermId = xmlCode2AxId.axId();
        }

        return axDlvTermId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>axInventLocationId</Name>
				<Source><![CDATA[
    public InventLocationId axInventLocationId(AifEndpointActionValueMap _gatewaySchemaSetup, InventLocationId _inventLocationId = '')
    {
        XMLAxId2Code            xmlAxId2Code;
        XMLCode2AxId            xmlCode2AxId;
        tableId                 tableId             = tablenum(InventLocation);
        InventLocationId        axInventLocationId;

        setprefix("@SYS93823");
        if (!prmisdefault(_inventLocationId))
        {
            if (_inventLocationId)
            {
                xmlAxId2Code = XMLAxId2Code::newXMLMapExternalCode(_gatewaySchemaSetup.xmlMapInventLocation,
                                                                   tableId,
                                                                   _inventLocationId,
                                                                   _gatewaySchemaSetup.InventLocationExtCodeId,
                                                                   '');
                this.intercompanyCode(xmlAxId2Code.xmlCode());
            }
            else
            {
                this.intercompanyCode('');
            }

            axInventLocationId = _inventLocationId;
        }
        else
        {
            if (this.intercompanyCode())
            {
                xmlCode2AxId = XMLCode2AxId::newXMLMapExternalCode(_gatewaySchemaSetup.xmlMapInventLocation,
                                                                   tableId,
                                                                   ExtCodeSubModule::None,
                                                                   this.intercompanyCode(),
                                                                   _gatewaySchemaSetup.InventLocationExtCodeId,
                                                                   '');

                axInventLocationId = xmlCode2AxId.axId();
            }
            else
            {
                axInventLocationId = '';
            }
        }

        return axInventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>axInventProfileId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extracts and sets either inter company code or profile ID.
    /// </summary>
    /// <param name="_gatewaySchemaSetup">
    /// The <c>AifEndpointActionValueMap</c> record.
    /// </param>
    /// <param name="_inventProfileId">
    /// The default <c>InventProfileId_RU</c> invent profile ID.
    /// </param>
    /// <returns>
    /// An <c>InventProfileId_RU</c> invent profile ID; optional.
    /// </returns>
    public InventProfileId_RU axInventProfileId(AifEndpointActionValueMap _gatewaySchemaSetup, InventProfileId_RU _inventProfileId = '')
    {
        XMLAxId2Code            xmlAxId2Code;
        XMLCode2AxId            xmlCode2AxId;
        TableId                 tableId             = tableNum(InventProfile_RU);
        InventProfileId_RU      axInventProfileId;
        AifEndPointActionValueMapExt_RU gatewaySchemaSetupExt = _gatewaySchemaSetup.aifEndPointActionValueMapExt_RU();

        setPrefix("@GLS221820");
        if (!prmisDefault(_inventProfileId))
        {
            if (_inventProfileId)
            {
                xmlAxId2Code = XMLAxId2Code::newXMLMapExternalCode(gatewaySchemaSetupExt.xmlMapInventProfile,
                                                                   tableId,
                                                                   _inventProfileId,
                                                                   gatewaySchemaSetupExt.InventProfileExtCodeId,
                                                                   '');
                this.intercompanyCode(xmlAxId2Code.xmlCode());
            }
            else
            {
                this.intercompanyCode('');
            }

            axInventProfileId = _inventProfileId;
        }
        else
        {
            if (this.intercompanyCode())
            {
                xmlCode2AxId = XMLCode2AxId::newXMLMapExternalCode(gatewaySchemaSetupExt.xmlMapInventProfile,
                                                                   tableId,
                                                                   ExtCodeSubModule::None,
                                                                   this.intercompanyCode(),
                                                                   gatewaySchemaSetupExt.InventProfileExtCodeId,
                                                                   '');

                axInventProfileId = xmlCode2AxId.axId();
            }
            else
            {
                axInventProfileId = '';
            }
        }

        return axInventProfileId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>axMarkupCode</Name>
				<Source><![CDATA[
    public MarkupCode axMarkupCode(AifEndpointActionValueMap _gatewaySchemaSetup, MarkupModule _markupModule =
                                                                                                    MarkupModuleType::Invent
                                                                                                    , MarkupCode _markupCode = '')
    {
        XMLAxId2Code            xmlAxId2Code;
        XMLCode2AxId            xmlCode2AxId;
        tableId                 tableId = tablenum(MarkupTable);
        MarkupCode              axMarkupCode;
        ExtCodeSubModule        extCodeSubModule;

        setprefix("@SYS93824");
        if (!prmisdefault(_markupCode))
        {
            if (_markupCode)
            {
                xmlAxId2Code = XMLAxId2Code::newXMLMapExternalCode(_gatewaySchemaSetup.xmlMapMarkup,
                                                                   tableId,
                                                                  [_markupModule,_markupCode],
                                                                   _gatewaySchemaSetup.MarkupExtCodeId,
                                                                   '');
                this.intercompanyCode(xmlAxId2Code.xmlCode());
            }
            else
            {
                this.intercompanyCode('');
            }

            axMarkupCode = _markupCode;
        }
        else
        {
            if (this.intercompanyCode())
            {
                switch (_markupModule)
                {
                    case MarkupModuleType::Cust:
                                                      extCodeSubModule = ExtCodeSubModule::Cust; break;
                    case MarkupModuleType::Vend:
                                                      extCodeSubModule = ExtCodeSubModule::Vend; break;
                    default:                          extCodeSubModule = ExtCodeSubModule::None; break;
                }
                xmlCode2AxId = XMLCode2AxId::newXMLMapExternalCode(_gatewaySchemaSetup.xmlMapMarkup,
                                                                   tableId,
                                                                   extCodeSubModule,
                                                                   this.intercompanyCode(),
                                                                   _gatewaySchemaSetup.MarkupExtCodeId,
                                                                   _markupModule);

                axMarkupCode = conpeek(xmlCode2AxId.axId(), 2);
            }
            else
            {
                axMarkupCode = '';
            }
        }

        return axMarkupCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>axPurchAgreementClassification</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts a value that relates to purchase agreement classifications by using the map policy passed
    ///    in the configuration parameter.
    /// </summary>
    /// <param name="_gatewaySchemaSetup">
    ///    An <c>AifEndpointActionValueMap</c> record that contains the value mapping configuration.
    /// </param>
    /// <param name="_name">
    ///    The name of the purchase classification that is to be converted.
    /// </param>
    /// <returns>
    ///    The name of the converted purchase agreement classification.
    /// </returns>
    public Name axPurchAgreementClassification(AifEndpointActionValueMap _gatewaySchemaSetup, Name _name = '')
    {
        XMLAxId2Code        xmlAxId2Code;
        XMLCode2AxId        xmlCode2AxId;
        tableId             tableId             = tablenum(AgreementClassification);
        Name                axName;

        if (!prmisdefault(_name))
        {
            xmlAxId2Code = XMLAxId2Code::newXMLMapExternalCode(_gatewaySchemaSetup.xmlMapAgreementClassification,
                                                               tableId,
                                                               [_name,tablenum(PurchAgreementHeader)],
                                                               _gatewaySchemaSetup.AgreementClassificationExtCodeId,
                                                               '');

            this.intercompanyCode(xmlAxId2Code.xmlCode());

            axName = _name;
        }
        else
        {
            xmlCode2AxId = XMLCode2AxId::newXMLMapExternalCode(_gatewaySchemaSetup.xmlMapAgreementClassification,
                                                               tableId,
                                                               ExtCodeSubModule::Vend,
                                                               this.intercompanyCode(),
                                                               _gatewaySchemaSetup.AgreementClassificationExtCodeId,
                                                               '');
            axName = conpeek(xmlCode2AxId.axId(), 1);
        }

        return axName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>axPurchItemId</Name>
				<Source><![CDATA[
    public container axPurchItemId(AifEndpointActionValueMap _gatewayDocSetup, VendAccount _vendAccount, ItemId _itemId = '', InventDim _inventDim = null)
    {
        XMLAxId2Code        xmlAxId2Code;
        XMLCode2AxId        xmlCode2AxId;
        tableId             tableId             = _gatewayDocSetup.xmlMapItemId == XMLMapItemId::ExternalItemId ? tablenum(VendTable) : tablenum(InventTable);
        ItemId              axItemId;
        InventDim           axInventDim;
        InventDim           inventDim;
        anytype             foreignKey;

        setprefix("@SYS72872");
        if (!prmisdefault(_itemId))
        {
            inventDim.data(_inventDim);
            inventDim.clearNotProductDim(InventDimGroupSetup::newItemId(_itemId));
            inventDim = InventDim::findOrCreate(inventDim);

            // If Intercompany organization then always map items via product
            if (VendTable::find(_vendAccount).interCompanyTradingRelationActive())
            {
                product                = InventTable::itemProduct(_itemId);
                distinctProductVariant = InventDimCombination::find(_itemId, inventDim.InventDimId).DistinctProductVariant;
            }
            else
            {
                switch (_gatewayDocSetup.xmlMapItemId)
                {
                    case XMLMapItemId::ExternalItemId:
                        foreignKey  = _vendAccount;
                        break;

                    case XMLMapItemId::BarCode:
                        foreignKey  = _gatewayDocSetup.BarCodeSetupId;
                        break;
                }

                xmlAxId2Code = XMLAxId2Code::newXMLMapItemId(_gatewayDocSetup.xmlMapItemId,
                                                             tableId,
                                                             [_itemId, inventDim],
                                                             _gatewayDocSetup.ItemExtCodeId,
                                                             foreignKey);

                this.intercompanyCode(xmlAxId2Code.xmlCode());

                switch (_gatewayDocSetup.xmlMapItemId)
                {
                    case XMLMapItemId::Our:
                        if (inventDim.InventDimId != InventDim::inventDimIdBlank())
                        {
                            throw error(strfmt("@SYS74300", XMLMapItemId::Our));
                        }
                        break;
                }
            }
        }
        else
        {
            // If Intercompany organization then always map items via product
            if (VendTable::find(_vendAccount).interCompanyTradingRelationActive())
            {
                axItemId    = this.retrieveItemId();
                axInventDim = this.retrieveInventDim();

                if (distinctProductVariant && !axInventDim)
                {
                    throw error(strfmt("@SYS152315", axItemId, curext()));
                }
            }
            else
            {
                switch (_gatewayDocSetup.xmlMapItemId)
                {
                    case XMLMapItemId::ExternalItemId:
                        foreignKey  = _vendAccount;
                        break;

                    case XMLMapItemId::BarCode:
                        foreignKey  = _gatewayDocSetup.BarCodeSetupId;
                        break;
                }

                xmlCode2AxId = XMLCode2AxId::newXMLMapItemId(_gatewayDocSetup.xmlMapItemId,
                                                            tableId,
                                                            ExtCodeSubModule::None,
                                                            this.intercompanyCode(),
                                                            _gatewayDocSetup.ItemExtCodeId,
                                                            foreignKey);

                switch (typeof(xmlCode2AxId.axId()))
                {
                    case Types::Container:
                        axItemId    = conpeek(xmlCode2AxId.axId(), 1);
                        axInventDim = conpeek(xmlCode2AxId.axId(), 2);
                        break;

                    default:
                        axItemId    = xmlCode2AxId.axId();
                        axInventDim = InventDim::find(InventDim::inventDimIdBlank());
                }
            }
        }

        return [axItemId, axInventDim];
    }

]]></Source>
			</Method>
			<Method>
				<Name>axReturnDispositionCodeId</Name>
				<Source><![CDATA[
    public ReturnDispositionCodeId axReturnDispositionCodeId(AifEndpointActionValueMap _aifEndpointActionValueMap, ReturnDispositionCodeId _returnDispositionCodeId = '')
    {
        XMLAxId2Code            xmlAxId2Code;
        XMLCode2AxId            xmlCode2AxId;
        tableId                 tableId = tablenum(ReturnDispositionCode);
        ReturnDispositionCodeId axReturnDispositionCodeId;

        if (!prmisdefault(_returnDispositionCodeId))
        {
            xmlAxId2Code = XMLAxId2Code::newXMLMapExternalCode(_aifEndpointActionValueMap.xmlMapReturnDispCodeId,
                                                               tableId,
                                                               _returnDispositionCodeId,
                                                               _aifEndpointActionValueMap.ReturnDispCodeExtCodeId,
                                                               '');

            this.intercompanyCode(xmlAxId2Code.xmlCode());

            axReturnDispositionCodeId = _returnDispositionCodeId;
        }
        else
        {
            xmlCode2AxId = XMLCode2AxId::newXMLMapExternalCode(_aifEndpointActionValueMap.xmlMapReturnDispCodeId,
                                                               tableId,
                                                               ExtCodeSubModule::None,
                                                               this.intercompanyCode(),
                                                               _aifEndpointActionValueMap.ReturnDispCodeExtCodeId,
                                                               '');
            axReturnDispositionCodeId = xmlCode2AxId.axId();
        }

        return axReturnDispositionCodeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>axReturnReasonCodeId</Name>
				<Source><![CDATA[
    public ReturnReasonCodeId axReturnReasonCodeId(AifEndpointActionValueMap _aifEndpointActionValueMap, ReturnReasonCodeId _returnReasonCodeId = '')
    {
        XMLAxId2Code        xmlAxId2Code;
        XMLCode2AxId        xmlCode2AxId;
        tableId             tableId = tablenum(ReturnReasonCode);
        ReturnReasonCodeId  axReturnReasonCodeId;

        if (!prmisdefault(_returnReasonCodeId))
        {
            xmlAxId2Code = XMLAxId2Code::newXMLMapExternalCode(_aifEndpointActionValueMap.XMLMapReturnReasonCodeId,
                                                               tableId,
                                                               _returnReasonCodeId,
                                                               _aifEndpointActionValueMap.ReturnReasonCodeExtCodeId,
                                                               '');

            this.intercompanyCode(xmlAxId2Code.xmlCode());

            axReturnReasonCodeId = _returnReasonCodeId;
        }
        else
        {
            xmlCode2AxId = XMLCode2AxId::newXMLMapExternalCode(_aifEndpointActionValueMap.XMLMapReturnReasonCodeId,
                                                               tableId,
                                                               ExtCodeSubModule::None,
                                                               this.intercompanyCode(),
                                                               _aifEndpointActionValueMap.ReturnReasonCodeExtCodeId,
                                                               '');
            axReturnReasonCodeId = xmlCode2AxId.axId();
        }

        return axReturnReasonCodeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>axSalesAgreementClassification</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts a value that relates to sales agreement classifications by using the map policy passed in
    ///    the configuration parameter.
    /// </summary>
    /// <param name="_gatewaySchemaSetup">
    ///    A <c>AifEndpointActionValueMap</c> record that contains the value mapping configuration.
    /// </param>
    /// <param name="_name">
    ///    The name of the sales agreement classification that is to be converted.
    /// </param>
    /// <returns>
    ///    The name of the converted purchase classification.
    /// </returns>
    public Name axSalesAgreementClassification(AifEndpointActionValueMap _gatewaySchemaSetup, Name _name = '')
    {
        XMLAxId2Code        xmlAxId2Code;
        XMLCode2AxId        xmlCode2AxId;
        tableId             tableId             = tablenum(AgreementClassification);
        Name                axName;

        if (!prmisdefault(_name))
        {
            xmlAxId2Code = XMLAxId2Code::newXMLMapExternalCode(_gatewaySchemaSetup.xmlMapAgreementClassification,
                                                               tableId,
                                                               [_name,tablenum(SalesAgreementHeader)],
                                                               _gatewaySchemaSetup.AgreementClassificationExtCodeId,
                                                               '');

            this.intercompanyCode(xmlAxId2Code.xmlCode());

            axName = _name;
        }
        else
        {
            xmlCode2AxId = XMLCode2AxId::newXMLMapExternalCode(_gatewaySchemaSetup.xmlMapAgreementClassification,
                                                               tableId,
                                                               ExtCodeSubModule::Cust,
                                                               this.intercompanyCode(),
                                                               _gatewaySchemaSetup.AgreementClassificationExtCodeId,
                                                               '');
            switch (typeof(xmlCode2AxId.axId()))
            {
                case Types::Container:
                    axName    = conpeek(xmlCode2AxId.axId(), 1);
                                    break;

                default:
                    axName    = xmlCode2AxId.axId();
            }
        }

        return axName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>axSalesItemId</Name>
				<Source><![CDATA[
    public container axSalesItemId(AifEndpointActionValueMap _gatewayDocSetup, CustAccount _custAccount, ItemId _itemId = '', InventDim _inventDim = null)
    {
        XMLAxId2Code        xmlAxId2Code;
        XMLCode2AxId        xmlCode2AxId;
        tableId             tableId             = _gatewayDocSetup.xmlMapItemId == XMLMapItemId::ExternalItemId ? tablenum(CustTable) : tablenum(InventTable);
        ItemId              axItemId;
        InventDim           axInventDim;
        InventDim           inventDim;
        anytype             foreignKey;

        setprefix("@SYS72872");
        if (!prmisdefault(_itemId))
        {
            inventDim.data(_inventDim);
            inventDim.clearNotProductDim(InventDimGroupSetup::newItemId(_itemId));
            inventDim = InventDim::findOrCreate(inventDim);

            // If Intercompany organization then always map items via product
            if (CustTable::find(_custAccount).interCompanyTradingRelationActive())
            {
                product                = InventTable::itemProduct(_itemId);
                distinctProductVariant = InventDimCombination::find(_itemId, inventDim.InventDimId).DistinctProductVariant;
            }
            else
            {
                switch (_gatewayDocSetup.xmlMapItemId)
                {
                    case XMLMapItemId::ExternalItemId:
                        foreignKey  = _custAccount;
                        break;

                    case XMLMapItemId::BarCode:
                        foreignKey  = _gatewayDocSetup.BarCodeSetupId;
                        break;
                }

                xmlAxId2Code = XMLAxId2Code::newXMLMapItemId(_gatewayDocSetup.xmlMapItemId,
                                                             tableId,
                                                             [_itemId, inventDim],
                                                             _gatewayDocSetup.ItemExtCodeId,
                                                             foreignKey);

                this.intercompanyCode(xmlAxId2Code.xmlCode());

                switch (_gatewayDocSetup.xmlMapItemId)
                {
                    case XMLMapItemId::Our:
                        if (inventDim.InventDimId != InventDim::inventDimIdBlank())
                        {
                            throw error(strfmt("@SYS74300", XMLMapItemId::Our));
                        }
                        break;
                }
            }
        }
        else
        {
            // If Intercompany organization then always map items via product
            if (CustTable::find(_custAccount).interCompanyTradingRelationActive())
            {
                axItemId    = this.retrieveItemId();
                axInventDim = this.retrieveInventDim();

                if (distinctProductVariant && !axInventDim)
                {
                    throw error(strfmt("@SYS152315", axItemId, curext()));
                }
            }
            else
            {
                switch (_gatewayDocSetup.xmlMapItemId)
                {
                    case XMLMapItemId::ExternalItemId:
                        foreignKey  = _custAccount;
                        break;

                    case XMLMapItemId::BarCode:
                        foreignKey  = _gatewayDocSetup.BarCodeSetupId;
                        break;
                }

                xmlCode2AxId = XMLCode2AxId::newXMLMapItemId(_gatewayDocSetup.xmlMapItemId,
                                                             tableId,
                                                             ExtCodeSubModule::None,
                                                             this.intercompanyCode(),
                                                             _gatewayDocSetup.ItemExtCodeId,
                                                             foreignKey);

                switch (typeof(xmlCode2AxId.axId()))
                {
                    case Types::Container:
                        axItemId    = conpeek(xmlCode2AxId.axId(), 1);
                        axInventDim = conpeek(xmlCode2AxId.axId(), 2);
                        break;

                    default:
                        axItemId    = xmlCode2AxId.axId();
                        axInventDim = InventDim::find(InventDim::inventDimIdBlank());
                }
            }
        }

        return [axItemId, axInventDim];
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the item id.
    /// </summary>
    /// <returns>An <c>ItemId</c> value.</returns>
    protected ItemId retrieveItemId()
    {
        return InventTable::findByProduct(product).ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>InventDim</c>.
    /// </summary>
    /// <returns>An <c>InventDim</c> record.</returns>
    protected InventDim retrieveInventDim()
    {
        return InventDim::find(InventDimCombination::findByDistinctProductVariant(distinctProductVariant).InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>axVendAccount</Name>
				<Source><![CDATA[
    public VendAccount axVendAccount(AifEndpointActionValueMap _gatewaySchemaSetup, VendAccount _vendAccount = '')
    {
        XMLAxId2Code        xmlAxId2Code;
        XMLCode2AxId        xmlCode2AxId;
        tableId             tableId             = tablenum(VendTable);
        VendAccount         axVendAccount;

        setprefix("@SYS72852");
        if (!prmisdefault(_vendAccount))
        {
            xmlAxId2Code = XMLAxId2Code::newXMLMapExternalCode(_gatewaySchemaSetup.xmlMapVendAccount,
                                                               tableId,
                                                               _vendAccount,
                                                               _gatewaySchemaSetup.VendAccountExtCodeId,
                                                               '');

            this.intercompanyCode(xmlAxId2Code.xmlCode());

            axVendAccount = _vendAccount;
        }
        else
        {
            xmlCode2AxId = XMLCode2AxId::newXMLMapExternalCode(_gatewaySchemaSetup.xmlMapVendAccount,
                                                               tableId,
                                                               ExtCodeSubModule::None,
                                                               this.intercompanyCode(),
                                                               _gatewaySchemaSetup.VendAccountExtCodeId,
                                                               '');

            axVendAccount = xmlCode2AxId.axId();
        }

        return axVendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>intercompanyCode</Name>
				<Source><![CDATA[
    public str intercompanyCode(str _intercompanyCode = intercompanyCode)
    {
        intercompanyCode = _interCompanyCode;
        return intercompanyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TradeInterCompanyConv construct()
    {
        return new TradeInterCompanyConv();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>