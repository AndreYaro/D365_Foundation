<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanActivityRelationshipWrapper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanActivityRelationshipWrapper</c> class represents the information needed by the system to
///    generate kanban flows.
/// </summary>
class LeanActivityRelationshipWrapper implements SysPackable
{
    // serializable fields
    PlanActivityName                    independentActivityName;
    PlanActivityName                    dependentActivityName;

    PlanActivityType                    independentActivityType;
    PlanActivityType                    dependentActivityType;

    LeanCycleTimeInUnit                 independentActivityCycleTime;
    LeanCycleTimeInUnit                 dependentActivityCycleTime;

    RefRecId                            leanProdFlowPlanActRelationRecId;

    RefRecId                            independentActivityRecId;
    RefRecid                            dependentActivityRecId;

    boolean                             dependentActInputSemiFinished;
    boolean                             dependentActOutputSemiFinished;

    boolean                             dependentActivityFeederBridge;

    PlanCycleTimeRatio                  cycleTimeRatio;
    ConstraintValue                     minConstraintValue;
    RefRecId                            minValueUnitOfMeasure;

    #LOCALMACRO.CurrentList
        independentActivityName,
        dependentActivityName,
        independentActivityType,
        dependentActivityType,
        independentActivityCycleTime,
        dependentActivityCycleTime,
        leanProdFlowPlanActRelationRecId,
        independentActivityRecId,
        dependentActivityRecId,
        cycleTimeRatio,
        minConstraintValue,
        minValueUnitOfMeasure,
        dependentActInputSemiFinished,
        dependentActOutputSemiFinished,
        dependentActivityFeederBridge
    #ENDMACRO

    // the fields below are needed during production flow path finding
    // and don't need to be serialized
    boolean                             alreadyInContainer;

    LeanActivityRelationshipWrapper     nextWrapper;
    LeanActivityRelationshipWrapper     prevWrapper;

    KanbanFlowStateMachineStates        currentFSMState;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clone</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a copy of the current <c>LeanActivityRelationshipWrapper</c> object.
    /// </summary>
    /// <returns>
    ///    A <c>LeanActivityRelationshipWrapper</c> object.
    /// </returns>
    /// <remarks>
    ///    The scanning part of the state of this object is not cloned.
    /// </remarks>
    public LeanActivityRelationshipWrapper clone()
    {
        LeanActivityRelationshipWrapper leanActivityRelationshipWrapper = LeanActivityRelationshipWrapper::construct();

        leanActivityRelationshipWrapper.parmAlreadyInContainer(this.parmAlreadyInContainer());
        leanActivityRelationshipWrapper.parmDependentActivityName(this.parmDependentActivityName());
        leanActivityRelationshipWrapper.parmDependentActivityRecId(this.parmDependentActivityRecId());
        leanActivityRelationshipWrapper.parmIndependentActivityName(this.parmIndependentActivityName());
        leanActivityRelationshipWrapper.parmIndependentActivityRecId(this.parmIndependentActivityRecId());
        leanActivityRelationshipWrapper.parmLeanProdFlowPlanActRelationRecId(this.parmLeanProdFlowPlanActRelationRecId());
        leanActivityRelationshipWrapper.parmMinConstraintValue(this.parmMinConstraintValue());
        leanActivityRelationshipWrapper.parmMinValueUnitOfMeasure(this.parmMinValueUnitOfMeasure());
        leanActivityRelationshipWrapper.parmCycleTimeRatio(this.parmCycleTimeRatio());

        leanActivityRelationshipWrapper.parmCurrentFSMState(this.parmCurrentFSMState());
        leanActivityRelationshipWrapper.parmDependentActInputSemiFinished(this.parmDependentActInputSemiFinished());
        leanActivityRelationshipWrapper.parmDependentActivityCycleTime(this.parmDependentActivityCycleTime());
        leanActivityRelationshipWrapper.parmDependentActivityFeederBridge(this.parmDependentActivityFeederBridge());
        leanActivityRelationshipWrapper.parmDependentActOutputSemiFinished(this.parmDependentActOutputSemiFinished());
        leanActivityRelationshipWrapper.parmDependentActivityType(this.parmDependentActivityType());
        leanActivityRelationshipWrapper.parmIndependentActivityCycleTime(this.parmIndependentActivityCycleTime());
        leanActivityRelationshipWrapper.parmIndependentActivityType(this.parmIndependentActivityType());

        return leanActivityRelationshipWrapper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dependentPlanActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the dependent <c>PlanActivity</c> record specified by the current wrapper instance.
    /// </summary>
    /// <returns>
    ///    A <c>PlanActivity</c> record if one is found; otherwise, an empty record.
    /// </returns>
    public PlanActivity dependentPlanActivity()
    {
        return PlanActivity::find(dependentActivityRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dependentPlanActivityPlan</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the dependent <c>Plan</c> record specified by the current wrapper instance.
    /// </summary>
    /// <returns>
    ///    A <c>Plan</c> record if one is found; otherwise, an empty record.
    /// </returns>
    public Plan dependentPlanActivityPlan()
    {
        return LeanActivityRelationshipWrapper::planActivityPlan(dependentActivityRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>independentPlanActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the independent <c>PlanActivity</c> record specified by the current wrapper instance.
    /// </summary>
    /// <returns>
    ///    A <c>PlanActivity</c> record if one is found; otherwise, an empty record.
    /// </returns>
    public PlanActivity independentPlanActivity()
    {
        return PlanActivity::find(independentActivityRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>independentPlanActivityPlan</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the independent <c>Plan</c> record specified by the current wrapper instance.
    /// </summary>
    /// <returns>
    ///    A <c>Plan</c> record if one is found; otherwise, an empty record.
    /// </returns>
    public Plan independentPlanActivityPlan()
    {
        return LeanActivityRelationshipWrapper::planActivityPlan(independentActivityRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAlreadyInContainer</Name>
				<Source><![CDATA[
    public boolean parmAlreadyInContainer(boolean _alreadyInContainer = alreadyInContainer)
    {
        alreadyInContainer = _alreadyInContainer;

        return alreadyInContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentFSMState</Name>
				<Source><![CDATA[
    public KanbanFlowStateMachineStates parmCurrentFSMState(KanbanFlowStateMachineStates _currentFSMState = currentFSMState)
    {
        currentFSMState = _currentFSMState;

        return currentFSMState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCycleTimeRatio</Name>
				<Source><![CDATA[
    public PlanCycleTimeRatio parmCycleTimeRatio(PlanCycleTimeRatio _cycleTimeRatio = cycleTimeRatio)
    {
        cycleTimeRatio = _cycleTimeRatio;

        return cycleTimeRatio;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDependentActInputSemiFinished</Name>
				<Source><![CDATA[
    public boolean parmDependentActInputSemiFinished(boolean _dependentActInputSemiFinished = dependentActInputSemiFinished)
    {
        dependentActInputSemiFinished = _dependentActInputSemiFinished;

        return dependentActInputSemiFinished;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDependentActivityCycleTime</Name>
				<Source><![CDATA[
    public LeanCycleTimeInUnit parmDependentActivityCycleTime(LeanCycleTimeInUnit _dependentActivityCycleTime = dependentActivityCycleTime)
    {
        dependentActivityCycleTime = _dependentActivityCycleTime;

        return dependentActivityCycleTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDependentActivityFeederBridge</Name>
				<Source><![CDATA[
    public boolean parmDependentActivityFeederBridge(boolean _dependentActivityFeederBridge = dependentActivityFeederBridge)
    {
        dependentActivityFeederBridge = _dependentActivityFeederBridge;

        return dependentActivityFeederBridge;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDependentActivityName</Name>
				<Source><![CDATA[
    public PlanActivityName parmDependentActivityName(PlanActivityName _dependentActivityName = dependentActivityName)
    {
        dependentActivityName = _dependentActivityName;

        return dependentActivityName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDependentActivityRecId</Name>
				<Source><![CDATA[
    public RefRecId parmDependentActivityRecId(RefRecId _dependentActivityRecId = dependentActivityRecId)
    {
        dependentActivityRecId = _dependentActivityRecId;

        return dependentActivityRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDependentActivityType</Name>
				<Source><![CDATA[
    public PlanActivityType parmDependentActivityType(PlanActivityType _dependentActivityType = dependentActivityType)
    {
        dependentActivityType = _dependentActivityType;

        return dependentActivityType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDependentActOutputSemiFinished</Name>
				<Source><![CDATA[
    public boolean parmDependentActOutputSemiFinished(boolean _dependentActOutputSemiFinished = dependentActOutputSemiFinished)
    {
        dependentActOutputSemiFinished = _dependentActOutputSemiFinished;

        return dependentActOutputSemiFinished;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIndependentActivityCycleTime</Name>
				<Source><![CDATA[
    public LeanCycleTimeInUnit parmIndependentActivityCycleTime(LeanCycleTimeInUnit _independentActivityCycleTime = independentActivityCycleTime)
    {
        independentActivityCycleTime = _independentActivityCycleTime;

        return independentActivityCycleTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIndependentActivityName</Name>
				<Source><![CDATA[
    public PlanActivityName parmIndependentActivityName(PlanActivityName _independentActivityName = independentActivityName)
    {
        independentActivityName = _independentActivityName;

        return independentActivityName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIndependentActivityRecId</Name>
				<Source><![CDATA[
    public RefRecId parmIndependentActivityRecId(RefRecId _independentActivityRecId = independentActivityRecId)
    {
        independentActivityRecId = _independentActivityRecId;

        return independentActivityRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIndependentActivityType</Name>
				<Source><![CDATA[
    public PlanActivityType parmIndependentActivityType(PlanActivityType _independentActivityType = independentActivityType)
    {
        independentActivityType = _independentActivityType;

        return independentActivityType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLeanProdFlowPlanActRelationRecId</Name>
				<Source><![CDATA[
    public RefRecId parmLeanProdFlowPlanActRelationRecId(RefRecId _leanProdFlowPlanActRelationRecId = leanProdFlowPlanActRelationRecId)
    {
        leanProdFlowPlanActRelationRecId = _leanProdFlowPlanActRelationRecId;

        return leanProdFlowPlanActRelationRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMinConstraintValue</Name>
				<Source><![CDATA[
    public ConstraintValue parmMinConstraintValue(ConstraintValue _minConstraintValue = minConstraintValue)
    {
        minConstraintValue = _minConstraintValue;

        return minConstraintValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMinValueUnitOfMeasure</Name>
				<Source><![CDATA[
    public RefRecId parmMinValueUnitOfMeasure(RefRecId _minValueUnitOfMeasure = minValueUnitOfMeasure)
    {
        minValueUnitOfMeasure = _minValueUnitOfMeasure;

        return minValueUnitOfMeasure;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNextWrapper</Name>
				<Source><![CDATA[
    public LeanActivityRelationshipWrapper parmNextWrapper(LeanActivityRelationshipWrapper _nextWrapper = nextWrapper)
    {
        nextWrapper = _nextWrapper;

        return nextWrapper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrevWrapper</Name>
				<Source><![CDATA[
    public LeanActivityRelationshipWrapper parmPrevWrapper(LeanActivityRelationshipWrapper _prevWrapper = prevWrapper)
    {
        prevWrapper = _prevWrapper;

        return prevWrapper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        [#CurrentList] = _packedClass;
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static LeanActivityRelationshipWrapper construct()
    {
        return new LeanActivityRelationshipWrapper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBuffers</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs an instance of the <c>LeanActivityRelationshipWrapper</c> class.
    /// </summary>
    /// <param name="_leanProdFlowPlanActivityRelation">
    ///    The <c>LeanProdFlowPlanActivityRelation</c> buffer.
    /// </param>
    /// <param name="_planActivityRelationship">
    ///    The <c>PlanActivityRelationship</c> buffer.
    /// </param>
    /// <param name="_independentActivity">
    ///    The <c>IndependentActivity</c> buffer.
    /// </param>
    /// <param name="_dependentActivity">
    ///    The <c>DependentActivity</c> buffer.
    /// </param>
    /// <param name="_planConstraint">
    ///    The <c>PlanConstraint</c> buffer.
    /// </param>
    /// <param name="_planSequenceConstraintValue">
    ///    The <c>PlanSequenceConstraintValue</c> buffer.
    /// </param>
    /// <returns>
    ///    An instance of the <c>LeanActivityRelationshipWrapper</c> class.
    /// </returns>
    public static LeanActivityRelationshipWrapper newBuffers( LeanProdFlowPlanActivityRelation _leanProdFlowPlanActivityRelation,
                                                                PlanActivityRelationship _planActivityRelationship,
                                                                PlanActivity _independentActivity,
                                                                PlanActivity _dependentActivity,
                                                                PlanConstraint _planConstraint,
                                                                PlanSequenceConstraintValue _planSequenceConstraintValue)
    {
        LeanActivityRelationshipWrapper leanActivityRelationshipWrapper = LeanActivityRelationshipWrapper::construct();

        // validate input parameters and data consistency
        if (!_leanProdFlowPlanActivityRelation.RecId ||
            !_planActivityRelationship.RecId ||
            !_independentActivity.RecId ||
            !_dependentActivity.RecId)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        LeanProductionFlowActivity independentLeanProductionFlowActivity = LeanProductionFlowActivity::findPlanActivity(_independentActivity.RecId);
        LeanProductionFlowActivity dependentLeanProductionFlowActivity = LeanProductionFlowActivity::findPlanActivity(_dependentActivity.RecId);

        leanActivityRelationshipWrapper.parmLeanProdFlowPlanActRelationRecId(_leanProdFlowPlanActivityRelation.RecId);
        leanActivityRelationshipWrapper.parmDependentActivityRecId(_dependentActivity.RecId);
        leanActivityRelationshipWrapper.parmDependentActivityName(_dependentActivity.Name);
        leanActivityRelationshipWrapper.parmDependentActivityCycleTime(dependentLeanProductionFlowActivity.CycleTime);
        leanActivityRelationshipWrapper.parmIndependentActivityRecId(_independentActivity.RecId);
        leanActivityRelationshipWrapper.parmIndependentActivityName(_independentActivity.Name);
        leanActivityRelationshipWrapper.parmIndependentActivityCycleTime(independentLeanProductionFlowActivity.CycleTime);
        leanActivityRelationshipWrapper.parmCycleTimeRatio(_leanProdFlowPlanActivityRelation.CycleTimeRatio);

        leanActivityRelationshipWrapper.parmIndependentActivityType(_independentActivity.PlanActivityType);
        leanActivityRelationshipWrapper.parmDependentActivityType(_dependentActivity.PlanActivityType);
        leanActivityRelationshipWrapper.parmDependentActivityFeederBridge(dependentLeanProductionFlowActivity.FeederBridge == NoYes::Yes);
        leanActivityRelationshipWrapper.parmDependentActInputSemiFinished(dependentLeanProductionFlowActivity.PickUpSemiFinished);
        leanActivityRelationshipWrapper.parmDependentActOutputSemiFinished(dependentLeanProductionFlowActivity.ReceiveSemiFinished);

        if (_planSequenceConstraintValue.RecId)
        {
            leanActivityRelationshipWrapper.parmMinConstraintValue(_planSequenceConstraintValue.Value);
            leanActivityRelationshipWrapper.parmMinValueUnitOfMeasure(_planSequenceConstraintValue.UnitOfMeasure);
        }

        return leanActivityRelationshipWrapper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newKanbanFlowActRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>LeanActivityRelationshipWrapper</c> class.
    /// </summary>
    /// <param name="_kanbanFlowActivityRelationship">
    ///    The <c>KanbanFlowActivityRelationship</c> record that is used as a data source.
    /// </param>
    /// <returns>
    ///    An instance of the <c>LeanActivityRelationshipWrapper</c> class.
    /// </returns>
    public static LeanActivityRelationshipWrapper newKanbanFlowActRelationship(KanbanFlowActivityRelationship  _kanbanFlowActivityRelationship)
    {
        return LeanActivityRelationshipWrapper::newStandard(LeanProdFlowPlanActivityRelation::find(_kanbanFlowActivityRelationship.LeanProdFlowActivityRelation));
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>LeanActivityRelationshipWrapper</c> class.
    /// </summary>
    /// <param name="_leanProdFlowPlanActivityRelation">
    ///    The <c>LeanProdFlowPlanActivityRelation</c> record that is used as a data source.
    /// </param>
    /// <returns>
    ///    An instance of the <c>LeanActivityRelationshipWrapper</c> class.
    /// </returns>
    public static LeanActivityRelationshipWrapper newStandard(LeanProdFlowPlanActivityRelation _leanProdFlowPlanActivityRelation)
    {
        PlanActivityRelationship        planActivityRelationship        = PlanActivityRelationship::find(_leanProdFlowPlanActivityRelation.PlanActivityRelationship);
        PlanActivity                    independentActivity             = planActivityRelationship.independentActivity();
        PlanActivity                    dependentActivity               = planActivityRelationship.dependentActivity();
        PlanConstraint                  planConstraint                  = planActivityRelationship.constraint();
        PlanSequenceConstraintValue     planSequenceConstraintValue;

        if (planConstraint.RecId)
        {
            planSequenceConstraintValue = planConstraint.value(ConstraintRoleTypes::Minimum);
        }

        return LeanActivityRelationshipWrapper::newBuffers(_leanProdFlowPlanActivityRelation, planActivityRelationship, independentActivity, dependentActivity, planConstraint, planSequenceConstraintValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>planActivityPlan</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the independent <c>PlanActivity</c> record specified by the current wrapper instance.
    /// </summary>
    /// <param name="_planActivityRecId">
    ///    The record ID of the <c>PlanActivity</c> record to find.
    /// </param>
    /// <returns>
    ///    A <c>Plan</c>record if one is found; otherwise, an empty record.
    /// </returns>
    private static Plan planActivityPlan(RefRecId _planActivityRecId)
    {
        Plan                plan;
        PlanPlanActivity    planPlanActivity;

        if (_planActivityRecId)
        {
            select firstonly plan
                exists join planPlanActivity
                    where planPlanActivity.Plan == plan.RecId &&
                          planPlanActivity.PlanActivity == _planActivityRecId;
        }

        return plan;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
