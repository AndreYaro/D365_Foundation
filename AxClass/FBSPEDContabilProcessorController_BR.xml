<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBSPEDContabilProcessorController_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Controller class for SPED Contabil file generation.
/// </summary>
[
FBTaxStatement_BRAttribute("@FBK66", menuitemActionStr(FBSPEDContabilProcessor_BR), MenuItemType::Action),
FBTaxStatementSetupTable_BRAttribute(tableStr(FBSPEDContabilSetupParameters_BR)),
FBTaxStatementValidation_BRAttribute(menuitemActionStr(FBSPEDContabilValidate_BR), MenuItemType::Action)
]
public class FBSPEDContabilProcessorController_BR extends ERFormatMappingRunBaseController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the <c>FBSPEDContabilProcessorController_BR</c> class.
    /// </summary>
    /// <param name="_args">
    /// <c>Args</c> class instance representing the arguments used to construct the controller class.
    /// </param>
    /// <returns>
    /// An instance of the <c>FBSPEDContabilProcessorController_BR</c> class.
    /// </returns>
    public static FBSPEDContabilProcessorController_BR construct(Args _args)
    {
        FBSPEDContabilProcessorController_BR  controller;

        controller = new FBSPEDContabilProcessorController_BR();

        controller.initializeFromArgs(_args);
        controller.parmShowProgressForm(true);

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        FBSPEDContabilProcessorController_BR::construct(_args).startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>afterOperation</Name>
				<Source><![CDATA[
    protected void afterOperation(SysOperationExecutionMode _executionMode, AifAsyncResult _asyncResult)
    {
        if (_executionMode == SysOperationExecutionMode::ReliableAsynchronous)
        {
            if (this.hasOperationCompletedSuccessfuly(_asyncResult))
            {
                this.sendFileToUser();
            }
        }
        else
        {
            super(_executionMode, _asyncResult);

            if (this.hasOperationCompletedSuccessfuly(_asyncResult))
            {
                this.saveFileAsAttachment();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendFileToUser</Name>
				<Source><![CDATA[
    private void sendFileToUser()
    {
        Browser br = new Browser();

        str url = this.getFormatMappingRunJobAttachmentPublicUrl();

        if (url)
        {
            br.navigate(url);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveFileAsAttachment</Name>
				<Source><![CDATA[
    private void saveFileAsAttachment()
    {
        FBSPEDContabilProcessorContract_BR contract = this.getContract();
        str tempFile = contract.parmFileName();

        if (System.IO.File::Exists(tempFile))
        {
            using (System.IO.Stream stream = System.IO.File::OpenRead(tempFile))
            {
                FiscalOrganization_BR fiscalOrganization = FiscalOrganization_BR::find(contract.parmFiscalOrganization());

                var attachmentName = FBUtil_BR::getDefaultFileNameSpedContabil(
                    fiscalOrganization.fiscalEstablishment().CNPJCPFNum_BR,
                    contract.parmFromDate(),
                    contract.parmToDate(),
                    contract.parmType()
                );

                contract.getFileDestination().saveFile(stream, attachmentName);
            }

            System.IO.File::Delete(contract.parmFileName());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOperationCompletedSuccessfuly</Name>
				<Source><![CDATA[
    private boolean hasOperationCompletedSuccessfuly(AifAsyncResult _asyncResult)
    {
        return _asyncResult.parmIsCompleted() && !_asyncResult.parmHasException();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContract</Name>
				<Source><![CDATA[
    private FBSPEDContabilProcessorContract_BR getContract()
    {
        return this.getDataContractObject() as FBSPEDContabilProcessorContract_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>