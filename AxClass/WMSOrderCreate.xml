<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsOrderCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WmsOrderCreate
{
    InventMovement      movement;
    InventQty           qty;
    InventQty           maxQty;
    boolean             mustBeWMSOrderControlled;

    WMSOrderId          updWMSOrderId;
    WMSOrder            wmsOrder;
    WMSOrderType        wmsOrderType;

    PdsCWInventQty      cwQty;
    PdsCWInventQty      maxCWQty;
    boolean             recalculateMaxQtyForValidation;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkNotAutoReportAsFinished</Name>
				<Source><![CDATA[
    boolean checkNotAutoReportAsFinished()
    {
        InventTable inventTable = movement.inventTable();

        if (inventTable.AutoReportFinished)
        {
            return checkFailed(strFmt("@SYS73733", inventTable.ItemId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMaxQty</Name>
				<Source><![CDATA[
    private void initMaxQty()
    {
        [maxQty, maxCWQty] = InventTrans::quantitiesNoWMSIssue(movement.inventTransOriginId());
        maxCWQty = -maxCWQty;
        maxQty = -maxQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(InventMovement _inventMovement)
    {
        super();

        movement                        = _inventMovement;
        wmsOrderType                    = WMSOrderType::OrderPick;//default
        recalculateMaxQtyForValidation  = true;

        this.initMaxQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMaxCWQty</Name>
				<Source><![CDATA[
    public PdsCWInventQty parmMaxCWQty(PdsCWInventQty _maxCWQty = maxCWQty)
    {
        if (!prmisDefault(_maxCWQty))
        {
            if (cwQty > _maxCWQty)
            {
                throw(error(strFmt("@SYS50286", _maxCWQty)));
            }
            maxCWQty = _maxCWQty;
        }

        return maxCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMaxQty</Name>
				<Source><![CDATA[
    public InventQty parmMaxQty(InventQty _qty = maxQty)
    {
        maxQty = _qty;

        if (qty > maxQty)
        {
            throw(error(strFmt("@SYS50286", maxQty)));
        }

        return maxQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMustBeWMSOrderControlled</Name>
				<Source><![CDATA[
    public boolean parmMustBeWMSOrderControlled(boolean _mustBeWMSOrderControlled = mustBeWMSOrderControlled)
    {
        mustBeWMSOrderControlled = _mustBeWMSOrderControlled;
        return mustBeWMSOrderControlled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsCWInventQty</Name>
				<Source><![CDATA[
    public PdsCWInventQty parmPdsCWInventQty(
        PdsCWInventQty _pdsCWInventQty = cwQty)
    {
        cwQty = _pdsCWInventQty;
        return cwQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQty</Name>
				<Source><![CDATA[
    public InventQty parmQty(InventQty _qty = qty)
    {
        if (qty > maxQty)
        {
            throw(error(strFmt("@SYS50286", maxQty)));
        }

        qty = _qty;

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecalculateMaxQtyForValidation</Name>
				<Source><![CDATA[
    public boolean parmRecalculateMaxQtyForValidation(boolean _recalculateMaxQtyForValidation = recalculateMaxQtyForValidation)
    {
        recalculateMaxQtyForValidation = _recalculateMaxQtyForValidation;

        return recalculateMaxQtyForValidation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdWMSOrderId</Name>
				<Source><![CDATA[
    public WMSOrderId parmUpdWMSOrderId(WMSOrderId _updWMSOrderId = updWMSOrderId)
    {
        updWMSOrderId = _updWMSOrderId;
        return updWMSOrderId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWMSOrder</Name>
				<Source><![CDATA[
    public WMSOrder parmWMSOrder(WMSOrder _wmsOrder = wmsOrder)
    {
        wmsOrder = _wmsOrder;
        return wmsOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWMSOrderType</Name>
				<Source><![CDATA[
    public WMSOrderType parmWMSOrderType(WMSOrderType _wmsOrderType = wmsOrderType)
    {
        wmsOrderType = _wmsOrderType;
        return wmsOrderType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        if (!this.validate())
        {
            return;
        }

        ttsbegin;
        WMSOrder wmsOrderDefault;
        movement.initWMSOrder(wmsOrderDefault);
        wmsOrderDefault.OrderId = movement.transChildRefId();

        wmsOrder        = WMSOrderCreate::updateCreatewmsOrder(wmsOrderDefault, qty, wmsOrderType, updWMSOrderId
                                                                , cwQty
                                                                );
        updWMSOrderId   = wmsOrder.OrderId;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate()
    {
        InventQty       maxQtyOrig = maxQty;
        PdsCWInventQty  maxCWQtyOrig = maxCWQty;

        if (qty <= 0)
        {
            return checkFailed("@SYS50502");
        }

        if (!mustBeWMSOrderControlled)
        {
            return false;
        }

        if (this.parmRecalculateMaxQtyForValidation())
        {
            this.initMaxQty();
        }

        if (PdsGlobal::pdsIsCWItem(movement.itemId()))
        {
            if (cwQty > maxCWQty)
            {
                if (maxCWQtyOrig > maxCWQty)
                {
                    return checkFailed(strFmt("@SYS112692", maxCWQty));
                }
                else
                {
                    return checkFailed(strFmt("@SYS50286", maxCWQty));
                }
            }
        }
        else
        {
            if (qty > maxQty)
            {
                if (maxQtyOrig > maxQty)
                {
                    return checkFailed(strFmt("@SYS112692", maxQty));
                }
                else
                {
                    return checkFailed(strFmt("@SYS50286", maxQty));
                }
            }
        }

        if (!this.checkNotAutoReportAsFinished())
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>WMSOrderCreate</c> class.
    /// </summary>
    /// <param name="_movement">
    /// An instance of the <c>InventMovement</c> class.
    /// </param>
    /// <returns>
    /// An instance of the <c>WMSOrderCreate</c> class.
    /// </returns>
    protected static WMSOrderCreate construct(InventMovement _movement)
    {
        return new WMSOrderCreate(_movement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateWMSOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>WMSOrder</c> record or updates an existing <c>WMSOrder</c> record.
    /// </summary>
    /// <param name="_movement">
    /// An instance of the <c>InventMovement</c> class.
    /// </param>
    /// <param name="_quantity">
    /// A quantity that should be created or updated.
    /// </param>
    /// <param name="_wmsOrderType">
    /// The type of the <c>WMSOrder</c> record. This parameter is optional.
    /// </param>
    /// <param name="_newWMSOrderId">
    /// A <c>WMSOrderId</c> ID that will be used if a new order is created. This parameter is optional.
    /// </param>
    /// <param name="_pdsCWInventQty">
    /// A catch weight quantity that should be created or updated.
    /// </param>
    /// <returns>
    /// A <c>WMSOrder</c> record.
    /// </returns>
    public static WMSOrder createOrUpdateWMSOrder(
        InventMovement  _movement,
        InventQty       _quantity,
        WMSOrderType    _wmsOrderType = WMSOrderType::OrderPick,
        WMSOrderId      _newWMSOrderId = '', 
        PdsCWInventQty  _pdsCWInventQty = 0
        )
    {
        WMSOrderCreate  wmsOrderCreate;

        wmsOrderCreate = WMSOrderCreate::newMovement(_movement, _quantity, false, _pdsCWInventQty);
        wmsOrderCreate.parmMustBeWMSOrderControlled(true);
        wmsOrderCreate.parmWMSOrderType(_wmsOrderType);
        wmsOrderCreate.parmUpdWMSOrderId(_newWMSOrderId);
        //no need to recalculate the maxQty since we are running without any pausing from UI
        wmsOrderCreate.parmRecalculateMaxQtyForValidation(false);

        wmsOrderCreate.run();

        return wmsOrderCreate.parmWMSOrder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>WMSOrderCreate</c> class.
    /// </summary>
    /// <param name="_movement">
    ///    An instance of the <c>InventMovement</c> class.
    /// </param>
    /// <param name="_qty">
    /// The quantity that should be created or updated.
    /// </param>
    /// <param name="_useMovementsWMSControl">
    /// A Boolean value used to determine if the wms control should be initialized based on the movement. The default value is true.
    /// </param>
    /// <param name="_pdsCWInventQty">
    /// The catch weight quantity that should be created or updated.
    /// </param>
    /// <returns>
    /// An instance of the <c>WMSOrderCreate</c> class.
    /// </returns>
    public static WMSOrderCreate newMovement(
        InventMovement      _movement,
        InventQty           _qty,
        boolean             _useMovementsWMSControl = true,
        PdsCWInventQty      _pdsCWInventQty = 0
        )
    {
        WMSOrderCreate wmsOrderCreate = WMSOrderCreate::construct(_movement);

        if (wmsOrderCreate.parmMaxQty() < -_qty)
        {
            wmsOrderCreate.parmQty(wmsOrderCreate.parmMaxQty());
        }
        else
        {
            wmsOrderCreate.parmQty(-_qty);
        }

        if (wmsOrderCreate.parmMaxCWQty() < - _pdsCWInventQty)
        {
            wmsOrderCreate.parmPdsCWInventQty(wmsOrderCreate.parmMaxCWQty());
        }
        else
        {
            wmsOrderCreate.parmPdsCWInventQty(-_pdsCWInventQty);
        }

        return wmsOrderCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCreatewmsOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates or creates a <c>WMSOrder</c>.
    /// </summary>
    /// <param name = "_wmsOrderDefault">A <c>WMSOrder</c></param>
    /// <param name = "_qty">The quantity.</param>
    /// <param name = "_wmsOrderType">The order type to use.</param>
    /// <param name = "_wmsOrderId">The order Id to use.</param>
    /// <param name = "_pdsCWQty">The catch weight quantity.</param>
    /// <returns></returns>
    protected static WMSOrder updateCreatewmsOrder(
        WMSOrder         _wmsOrderDefault,
        InventQty        _qty,
        WMSOrderType     _wmsOrderType,
        WMSOrderId       _wmsOrderId = '',
        PdsCWInventQty  _pdsCWQty = 0
        )
    {
        InventQty           addQty;
        InventQty           addReserv           = _qty;
        WMSOrder            wmsOrder;
        InventTransOrigin   inventTransOrigin;
        InventTrans         inventTrans;
        boolean             createOrder = false;

        PdsCWInventQty      pdsAddCWQty;
        PdsCWInventQty      pdsAddReserveCW = _pdsCWQty;
        boolean             isCWItem;

        if (_wmsOrderDefault.OrderId)
        {
            wmsOrder = WMSOrder::find(_wmsOrderDefault.OrderId,true);

            //if the order is not matching on the below criteria we should create a new one
            if (wmsOrder.Type           != _wmsOrderType
            ||  wmsOrder.InventTransId  != _wmsOrderDefault.InventTransId)
            {
                wmsOrder = null;
            }
        }

        if (!wmsOrder)
        {
            wmsOrder.data(_wmsOrderDefault.data());

            if (!_wmsOrderId)
            {
                wmsOrder.OrderId = NumberSeq::newGetNum(WMSParameters::numRefWMSOrderId()).num();
            }
            else
            {
                wmsOrder.OrderId = _wmsOrderId;
            }
            wmsOrder.Type = _wmsOrderType;
            createOrder = true;
        }

        wmsOrder.QtyRequested   += _qty;
        wmsOrder.Qty            += _qty;
        wmsOrder.QtyNoShipment  += _qty;

        isCWItem = PdsGlobal::pdsIsCWItem(wmsOrder.ItemId);
        wmsOrder.PdsCWQtyRequested  += _pdsCWQty;
        wmsOrder.PdsCWQty           += _pdsCWQty;
        wmsOrder.PdsCWQtyNoShipment += _pdsCWQty;

        if (createOrder)
        {
            if (wmsOrder.validateWrite())
            {
                wmsOrder.insert();
            }
            else
            {
                createOrder = false;
                return wmsOrder;
            }
        }
        else
        {
            wmsOrder.update();
        }

        while select TableId from inventTransOrigin
            where   inventTransOrigin.InventTransId == _wmsOrderDefault.InventTransId
            join forupdate inventTrans
                order by StatusIssue
                where  inventTrans.InventTransOrigin    ==  inventTransOrigin.RecId
                   &&  inventTrans.TransChildType       ==  InventTransChildType::None
                   &&  inventTrans.StatusReceipt        ==  StatusReceipt::None
                   && (inventTrans.StatusIssue          ==  StatusIssue::OnOrder        ||
                       inventTrans.StatusIssue          ==  StatusIssue::ReservOrdered  ||
                       inventTrans.StatusIssue          ==  StatusIssue::ReservPhysical)
        {
            if (isCWItem && inventTrans.PdsCWQty == 0)
            {
                continue;
            }
            if (inventTrans.Qty > -addReserv)
            {
                addQty      = -inventTrans.Qty;
                pdsAddCWQty = -inventTrans.PdsCWQty;
            }
            else
            {
                addQty   = addReserv;
                pdsAddCWQty = pdsAddReserveCW;
            }

            WMSOrderCreate::updateInventTrans(inventTrans, wmsOrder, addQty, pdsAddCWQty);

            addReserv -= addQty;
            pdsAddReserveCW -= pdsAddCWQty;

            if (!addReserv)
            {
                break;
            }
        }

        if (isCWItem && pdsAddReserveCW == 0 && addReserv != 0)
        {
            wmsOrder.selectForUpdate(true);
            // order may have been adjusted by CW differences
            wmsOrder.reread();

            wmsOrder.QtyRequested   -= addReserv;
            wmsOrder.Qty            -= addReserv;
            wmsOrder.QtyNoShipment  -= addReserv;
            wmsOrder.update();
        }

        return wmsOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the inventory transaction.
    /// </summary>
    /// <param name = "_inventTrans">The inventory transaction.</param>
    /// <param name = "_wmsOrder">A <c>WMSOrder</c> instance.</param>
    /// <param name = "_addQty">The quantity to update the transaction with.</param>
    /// <param name = "_pdsAddCWQty">The catch weight quantity to update the transaction with.</param>
    protected static void updateInventTrans(InventTrans _inventTrans, WMSOrder _wmsOrder, InventQty _addQty, PdsCWInventQty _pdsAddCWQty)
    {
        if (_addQty && _addQty < -_inventTrans.Qty
                && !PdsCatchWeight::isTransFullVisSerialReserved(_inventTrans))
        {
            _inventTrans.updateSplit(-_addQty, -_pdsAddCWQty);
        }

        _inventTrans.TransChildType  = InventTransChildType::WMSOrder;
        _inventTrans.TransChildRefId = _wmsOrder.OrderId;
        _inventTrans.update(NoYes::Yes);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>