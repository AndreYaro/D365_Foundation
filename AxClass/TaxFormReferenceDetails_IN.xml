<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxFormReferenceDetails_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Operations related to form reference details, including:
/// 1) Show form references of transactions
/// 2) Update form references for selected transactions
/// </summary>
class TaxFormReferenceDetails_IN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createCustTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates form reference details for customer transactions, including sales
    /// orders and free text invoices.
    /// </summary>
    /// <param name="_detailsHeader">
    /// Inquiry for form reference details.
    /// </param>
    /// <param name="_detailsLine">
    /// Result lines of form reference details.
    /// </param>
    private static void createCustTransactions(
        TmpTransitDocumentDetailsHeader_IN   _detailsHeader,
        TmpTransitDocumentDetailsLine_IN     _detailsLine)
    {
        CustTrans   custTrans;

        if (!_detailsHeader.Account)
        {
            return;
        }

        while select Voucher, TransDate, Invoice, AccountNum, TransType from custTrans
            group by TransDate, Voucher, Invoice, AccountNum, TransType
            where custTrans.AccountNum  == _detailsHeader.Account
                && (!_detailsHeader.TransDateFrom ||
                    custTrans.TransDate >= _detailsHeader.TransDateFrom)
                && (!_detailsHeader.TransDateTo ||
                    custTrans.TransDate <= _detailsHeader.TransDateTo)
        {
            switch (custTrans.TransType)
            {
                case LedgerTransType::Sales:
                    TaxFormReferenceDetails_IN::insertSalesTransactions(
                        custTrans,
                        _detailsHeader,
                        _detailsLine,
                        TaxModuleType::Sales);
                    break;

				case LedgerTransType::Cust:
                    TaxFormReferenceDetails_IN::insertFreeTextInvoiceTransactions(
                        custTrans,
                        _detailsHeader,
                        _detailsLine,
                        TaxModuleType::FreeTxtInvoice);
                    break;

                default:
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFormReferenceDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates form reference details.
    /// </summary>
    /// <param name="_detailsHeader">
    /// Inquiry for form reference details.
    /// </param>
    /// <param name="_detailsLine">
    /// Result lines of form reference details.
    /// </param>
    public static void createFormReferenceDetails(
        TmpTransitDocumentDetailsHeader_IN  _detailsHeader,
        TmpTransitDocumentDetailsLine_IN    _detailsLine)
    {
        // Clear the last result
        delete_from _detailsLine;

        switch (_detailsHeader.Role)
        {
            case FormTrackingRole_IN::Warehouse:
                TaxFormReferenceDetails_IN::createStockTransferTransactions(
                    _detailsHeader, _detailsLine);
                break;

            case FormTrackingRole_IN::Party:
                switch (_detailsHeader.AccountType)
                {
                    case VendCustType_IN::Vendor:
                        TaxFormReferenceDetails_IN::createVendTransactions(
                            _detailsHeader, _detailsLine);
                        break;

                    case VendCustType_IN::Customer:
                        TaxFormReferenceDetails_IN::createCustTransactions(
                            _detailsHeader, _detailsLine);
                        break;
                }
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createStockTransferTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates form reference details stock transfer transactions.
    /// </summary>
    /// <param name="_detailsHeader">
    /// Inquiry for form reference details.
    /// </param>
    /// <param name="_detailsLine">
    /// Result lines of form reference details.
    /// </param>
    private static void createStockTransferTransactions(
        TmpTransitDocumentDetailsHeader_IN  _detailsHeader,
        TmpTransitDocumentDetailsLine_IN    _detailsLine)
    {
        InventTransferTable         inventTransferTable;
        InventTransferJourLine      inventTransferJourLine;
        InventTransferParmLine      inventTransferParmLine;
        InventTransferParmTable     inventTransferParmTable;
        InventTransferLine_IN       inventTransferLine_IN;

        if (!_detailsHeader.WarehouseFrom || !_detailsHeader.WarehouseTo)
        {
            return;
        }

        while select inventTransferParmLine
            join RecId, TransDate from inventTransferParmTable
                where inventTransferParmTable.TransferId == inventTransferParmLine.TransferId
                   && inventTransferParmTable.ParmId == inventTransferParmLine.ParmId
                   && (!_detailsHeader.TransDateFrom ||
                       inventTransferParmTable.TransDate >= _detailsHeader.TransDateFrom)
                   && (!_detailsHeader.TransDateTo ||
                       inventTransferParmTable.TransDate <= _detailsHeader.TransDateTo)
            join RecId from inventTransferTable
                where inventTransferTable.TransferId           == inventTransferParmTable.TransferId
                   && inventTransferTable.InventLocationIdFrom == _detailsHeader.WarehouseFrom
                   && inventTransferTable.InventLocationIdTo   == _detailsHeader.WarehouseTo
                   && inventTransferTable.TransferType_IN      == TransferType_IN::StockTransfer
        {
            ttsBegin;

            select VoucherId, TableId, RecId from inventTransferJourLine
                where inventTransferJourLine.TransferId == inventTransferParmLine.TransferId
                    && inventTransferJourLine.InventTransId == inventTransferParmLine.InventTransId
                    && inventTransferJourLine.InventTransIdTransit == inventTransferParmLine.InventTransIdTransit
                    && inventTransferJourLine.TransDate == inventTransferParmTable.TransDate;

            inventTransferLine_IN = inventTransferParmLine.inventTransferLine().inventTransferLine_IN();

            _detailsLine.clear();
            _detailsLine.Voucher           = inventTransferJourLine.VoucherId;
            _detailsLine.Date              = inventTransferParmTable.TransDate;
            _detailsLine.Source            = TaxModuleType::StockTransfer_IN;
            _detailsLine.TransactionAmount = inventTransferLine_IN.NetAmount;

            // Tax
            _detailsLine.SourceTableId = inventTransferJourLine.TableId;
            _detailsLine.SourceRecId   = inventTransferJourLine.RecId;

            _detailsLine.AssessableValue = inventTransferLine_IN.AssessableValueTransactionCurrency;

            TaxFormReferenceDetails_IN::populateFormTrackingInfo(
                _detailsHeader,
                _detailsLine,
                inventTransferParmLine);

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates form reference details for vendor transactions, including purchase
    /// orders.
    /// </summary>
    /// <param name="_detailsHeader">
    /// Inquiry for form reference details.
    /// </param>
    /// <param name="_detailsLine">
    /// Result lines of form reference details.
    /// </param>
    private static void createVendTransactions(
        TmpTransitDocumentDetailsHeader_IN  _detailsHeader,
        TmpTransitDocumentDetailsLine_IN    _detailsLine)
    {
        VendTrans   vendTrans;

        if (!_detailsHeader.Account)
        {
            return;
        }

        while select Voucher, TransDate, Invoice, AccountNum, TransType from vendTrans
            group by TransDate, Voucher, Invoice, AccountNum, TransType
            where vendTrans.AccountNum  == _detailsHeader.Account
                && (!_detailsHeader.TransDateFrom ||
                    vendTrans.TransDate >= _detailsHeader.TransDateFrom)
                && (!_detailsHeader.TransDateTo ||
                    vendTrans.TransDate <= _detailsHeader.TransDateTo)
        {
            switch (vendTrans.TransType)
            {
                case LedgerTransType::Purch:
                    TaxFormReferenceDetails_IN::insertPurchTransactions(
                        vendTrans,
                        _detailsHeader,
                        _detailsLine,
                        TaxModuleType::Purch);
                    break;

                default:
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFreeTextInvoiceTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert form reference details for free text invoices.
    /// </summary>
    /// <param name="_custTrans">
    /// The customer transaction for the free text invoice.
    /// </param>
    /// <param name="_detailsHeader">
    /// Inquiry for form reference details.
    /// </param>
    /// <param name="_detailsLine">
    /// Result lines of form reference details.
    /// </param>
    /// <param name="_source">
    /// Tax module type.
    /// </param>
    private static void insertFreeTextInvoiceTransactions(
        CustTrans                             _custTrans,
        TmpTransitDocumentDetailsHeader_IN    _detailsHeader,
        TmpTransitDocumentDetailsLine_IN      _detailsLine,
        TaxModuleTypeId                       _source)
    {
        CustInvoiceJour             custInvoiceJour;
        CustInvoiceTrans            custInvoiceTrans;

        custInvoiceJour = CustInvoiceJour::findFromCustTrans(
            _custTrans.Invoice, _custTrans.TransDate, _custTrans.AccountNum);

        while select firstOnly custInvoiceTrans
            where custInvoiceTrans.SalesId             == custInvoiceJour.SalesId
               && custInvoiceTrans.InvoiceId           == custInvoiceJour.InvoiceId
               && custInvoiceTrans.InvoiceDate         == custInvoiceJour.InvoiceDate
               && custInvoiceTrans.numberSequenceGroup == custInvoiceJour.numberSequenceGroup
        {
            ttsBegin;

            _detailsLine.AccountType       = _detailsHeader.AccountType;
            _detailsLine.Account           = _detailsHeader.Account;
            _detailsLine.Voucher           = _custTrans.Voucher;
            _detailsLine.CustInvoiceId     = custInvoiceTrans.InvoiceId;
            _detailsLine.Date              = _custTrans.TransDate;
            _detailsLine.Source            = _source;

            _detailsLine.TransactionAmount = custInvoiceJour.SalesBalance;
            _detailsLine.SourceTableId     = custInvoiceJour.TableId;
            _detailsLine.SourceRecId       = custInvoiceJour.RecId;

            _detailsLine.AssessableValue = CustInvoiceTrans_IN::findByCustInvoiceTrans(custInvoiceTrans.RecId).AssessableValue_IN;

            TaxFormReferenceDetails_IN::populateFormTrackingInfo(
                _detailsHeader,
                _detailsLine,
                custInvoiceTrans);

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPurchTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert form reference details for purchase orders.
    /// </summary>
    /// <param name="_vendTrans">
    /// The vendor transaction for the purchase order.
    /// </param>
    /// <param name="_detailsHeader">
    /// Inquiry for form reference details.
    /// </param>
    /// <param name="_detailsLine">
    /// Result lines of form reference details.
    /// </param>
    /// <param name="_source">
    /// Tax module type.
    /// </param>
    private static void insertPurchTransactions(
        VendTrans                           _vendTrans,
        TmpTransitDocumentDetailsHeader_IN  _detailsHeader,
        TmpTransitDocumentDetailsLine_IN    _detailsLine,
        TaxModuleTypeId                     _source)
    {
        VendInvoiceJour     vendInvoiceJour;
        VendInvoiceTrans    vendInvoiceTrans;

        vendInvoiceJour = VendInvoiceJour::findFromVendTrans(
            _vendTrans.Invoice, _vendTrans.TransDate, _vendTrans.AccountNum);

        while select vendInvoiceTrans
            where vendInvoiceTrans.PurchID             == vendInvoiceJour.PurchId
               && vendInvoiceTrans.InvoiceId           == vendInvoiceJour.InvoiceId
               && vendInvoiceTrans.InvoiceDate         == vendInvoiceJour.InvoiceDate
               && vendInvoiceTrans.numberSequenceGroup == vendInvoiceJour.numberSequenceGroup
               && vendInvoiceTrans.InternalInvoiceId   == vendInvoiceJour.InternalInvoiceId
        {
            ttsBegin;

            _detailsLine.AccountType       = _detailsHeader.AccountType;
            _detailsLine.Account           = _detailsHeader.Account;
            _detailsLine.Voucher           = _vendTrans.Voucher;
            _detailsLine.VendInvoiceId     = vendInvoiceTrans.InvoiceId;
            _detailsLine.Date              = _vendTrans.TransDate;
            _detailsLine.Source            = _source;

            _detailsLine.TransactionAmount = vendInvoiceTrans.LineAmount;
            _detailsLine.SourceTableId     = vendInvoiceTrans.TableId;
            _detailsLine.SourceRecId       = vendInvoiceTrans.RecId;

            _detailsLine.AssessableValue = vendInvoiceTrans.AssessableValue_IN;

            TaxFormReferenceDetails_IN::populateFormTrackingInfo(
                _detailsHeader,
                _detailsLine,
                vendInvoiceTrans);

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSalesTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert form reference details for sales orders.
    /// </summary>
    /// <param name="_custTrans">
    /// The customer transaction for the sales order.
    /// </param>
    /// <param name="_detailsHeader">
    /// Inquiry for form reference details.
    /// </param>
    /// <param name="_detailsLine">
    /// Result lines of form reference details.
    /// </param>
    /// <param name="_source">
    /// Tax module type.
    /// </param>
    private static void insertSalesTransactions(
        CustTrans                           _custTrans,
        TmpTransitDocumentDetailsHeader_IN  _detailsHeader,
        TmpTransitDocumentDetailsLine_IN    _detailsLine,
        TaxModuleTypeId                     _source)
    {
        CustInvoiceJour             custInvoiceJour;
        CustInvoiceTrans            custInvoiceTrans;

        custInvoiceJour = CustInvoiceJour::findFromCustTrans(
            _custTrans.Invoice, _custTrans.TransDate, _custTrans.AccountNum);

        while select custInvoiceTrans
            where custInvoiceTrans.SalesId             == custInvoiceJour.SalesId
               && custInvoiceTrans.InvoiceId           == custInvoiceJour.InvoiceId
               && custInvoiceTrans.InvoiceDate         == custInvoiceJour.InvoiceDate
               && custInvoiceTrans.numberSequenceGroup == custInvoiceJour.numberSequenceGroup
        {
            ttsBegin;

            _detailsLine.AccountType       = _detailsHeader.AccountType;
            _detailsLine.Account           = _detailsHeader.Account;
            _detailsLine.Voucher           = _custTrans.Voucher;
            _detailsLine.CustInvoiceId     = custInvoiceTrans.InvoiceId;
            _detailsLine.Date              = _custTrans.TransDate;
            _detailsLine.Source            = _source;

            _detailsLine.TransactionAmount = custInvoiceTrans.LineAmount;
            _detailsLine.SourceTableId     = custInvoiceTrans.TableId;
            _detailsLine.SourceRecId       = custInvoiceTrans.RecId;

            _detailsLine.AssessableValue = CustInvoiceTrans_IN::findByCustInvoiceTrans(custInvoiceTrans.RecId).AssessableValue_IN;

            TaxFormReferenceDetails_IN::populateFormTrackingInfo(
                _detailsHeader,
                _detailsLine,
                custInvoiceTrans);

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateFormTrackingInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the form reference details for the specified transaction.
    /// </summary>
    /// <param name="_tmpTransitDocumentDetailsHeader">
    /// The header information.
    /// </param>
    /// <param name="_tmpTransitDocumentDetailsLine">
    /// The form reference detail lines to be populated.
    /// </param>
    /// <param name="_trans">
    /// The transaction of which the form attached will be populated as detail lines.
    /// </param>
    private static void populateFormTrackingInfo(
        TmpTransitDocumentDetailsHeader_IN  _tmpTransitDocumentDetailsHeader,
        TmpTransitDocumentDetailsLine_IN    _tmpTransitDocumentDetailsLine,
        Common                              _trans)
    {
        TransitDocumentManager_IN       manager;
        TransitDocumentSalesTaxForm_IN  trackingForm;
        List                            formList;
        ListEnumerator                  formListEnumerator;
        TaxTrans_IN                     taxTrans_IN;
        TaxTrans                        taxTrans;

        manager = TransitDocumentManager_IN::newManager();
        trackingForm.Direction = _tmpTransitDocumentDetailsHeader.SalesTaxFormDirection;

        // Find all attached forms of the selected direction
        formList = manager.findTransitDocuments(_trans, trackingForm);
        formListEnumerator = formList.getEnumerator();

        while (formListEnumerator.moveNext())
        {
            trackingForm = formListEnumerator.current();

            // Filter by the form type
            if (_tmpTransitDocumentDetailsHeader.SalesTaxFormType > 0 &&
                _tmpTransitDocumentDetailsHeader.SalesTaxFormType != trackingForm.FormType)
            {
                continue;
            }

            // Insert a line for each form attached
            _tmpTransitDocumentDetailsLine.TransitDocumentSalesTaxForm_IN = trackingForm.RecId;
            _tmpTransitDocumentDetailsLine.SalesTaxFormTypes  = trackingForm.FormType;
            _tmpTransitDocumentDetailsLine.SalesTaxFormSeries = trackingForm.SeriesNumber;
            _tmpTransitDocumentDetailsLine.SalesTaxFormNumber = trackingForm.FormNumber;
            _tmpTransitDocumentDetailsLine.SalesTaxFormDate   = trackingForm.FormDate;
            _tmpTransitDocumentDetailsLine.SalesTaxFormValue  = trackingForm.FormValue;

            select sum(TaxAmount), sum(TaxValue) from taxTrans
                where taxTrans.SourceTableId == _trans.TableId
                    && taxTrans.SourceRecId   == _trans.RecId
                    exists join taxTrans_IN
                        where taxTrans_IN.RefRecId        == taxTrans.RecId
                            && taxTrans_IN.TaxType        == SalesTaxFormTypes_IN::find(_tmpTransitDocumentDetailsLine.SalesTaxFormTypes).TaxType;

            _tmpTransitDocumentDetailsLine.TaxAmount = taxTrans.TaxAmount;

            _tmpTransitDocumentDetailsLine.TaxValue  = taxTrans.TaxValue;

            _tmpTransitDocumentDetailsLine.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFormReferences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates form references for selected transactions.
    /// </summary>
    /// <param name="_detailsHeader">
    /// Inquiry for form reference details.
    /// </param>
    /// <param name="_detailsLine">
    /// Result lines of form reference details.
    /// </param>
    public static void updateFormReferences(
        TmpTransitDocumentDetailsHeader_IN  _detailsHeader,
        TmpTransitDocumentDetailsLine_IN    _detailsLine)
    {
        VendInvoiceTrans    vendInvoiceTransLoc;
        CustInvoiceTrans    custInvoiceTransLoc;
        CustInvoiceJour     custInvoiceJourLoc;

        InventTransferJourLine  inventTransferJourLine;

        if (_detailsHeader.SalesTaxFormSeries ||
            _detailsHeader.SalesTaxFormNumber ||
            _detailsHeader.SalesTaxFormDate   ||
            _detailsHeader.SalesTaxFormValue)
        {
            while select _detailsLine
                where _detailsLine.Mark == NoYes::Yes
            {
                ttsbegin;

                switch (_detailsLine.SourceTableId)
                {
                    // Purchase orders
                    case tableNum(VendInvoiceTrans):
                        vendInvoiceTransLoc = VendInvoiceTrans::findRecId(_detailsLine.SourceRecId);

                        TaxFormReferenceDetails_IN::updateFormTrackingInfo(
                            _detailsHeader, _detailsLine, vendInvoiceTransLoc);
                        break;

                    // Sales orders
                    case tableNum(CustInvoiceTrans):
                        custInvoiceTransLoc = CustInvoiceTrans::findRecId(_detailsLine.SourceRecId);

                        TaxFormReferenceDetails_IN::updateFormTrackingInfo(
                            _detailsHeader, _detailsLine, custInvoiceTransLoc);
                        break;

                    // Stock transfer orders
                    case tableNum(InventTransferJourLine):
                        select RecId from inventTransferJourLine
                            where inventTransferJourLine.RecId == _detailsLine.SourceRecId;

                        TaxFormReferenceDetails_IN::updateFormTrackingInfo(
                            _detailsHeader, _detailsLine, inventTransferJourLine);

                        break;

                    // Free text invoices
                    case tableNum(CustInvoiceJour):
                        custInvoiceJourLoc = CustInvoiceJour::findRecId(_detailsLine.SourceRecId);

                        while select RecId from custInvoiceTransLoc
                            where custInvoiceTransLoc.SalesId             == custInvoiceJourLoc.SalesId
                               && custInvoiceTransLoc.InvoiceId           == custInvoiceJourLoc.InvoiceId
                               && custInvoiceTransLoc.InvoiceDate         == custInvoiceJourLoc.InvoiceDate
                               && custInvoiceTransLoc.numberSequenceGroup == custInvoiceJourLoc.numberSequenceGroup
                        {
                            TaxFormReferenceDetails_IN::updateFormTrackingInfo(
                                _detailsHeader, _detailsLine, custInvoiceTransLoc);
                        }

                        break;

                    default:
                        break;
                }

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFormTrackingInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the form reference inforamtion of detail line.
    /// </summary>
    /// <param name="_detailsHeader">
    /// The header information.
    /// </param>
    /// <param name="_detailsLine">
    /// The detail line.
    /// </param>
    /// <param name="_trans">
    /// The transaction.
    /// </param>
    public static void updateFormTrackingInfo(
        TmpTransitDocumentDetailsHeader_IN  _detailsHeader,
        TmpTransitDocumentDetailsLine_IN    _detailsLine,
        Common                              _trans)
    {
        TransitDocumentManager_IN           manager;
        TransitDocumentSalesTaxForm_IN      formToUpdate;
        TmpTransitDocumentSalesTaxForm_IN   tmpForm;

        manager = TransitDocumentManager_IN::newManager();

        tmpForm.Direction         = _detailsHeader.SalesTaxFormDirection;
        tmpForm.SalesTaxFormTypes = _detailsLine.SalesTaxFormTypes;

        if (_detailsHeader.SalesTaxFormSeries)
        {
            tmpForm.SeriesNumber = _detailsHeader.SalesTaxFormSeries;
        }
        else
        {
            tmpForm.SeriesNumber = _detailsLine.SalesTaxFormSeries;
        }

        if (_detailsHeader.SalesTaxFormNumber)
        {
            tmpForm.FormNumber   = _detailsHeader.SalesTaxFormNumber;
        }
        else
        {
            tmpForm.FormNumber   = _detailsLine.SalesTaxFormNumber;
        }

        if (_detailsHeader.SalesTaxFormDate)
        {
            tmpForm.FormDate     = _detailsHeader.SalesTaxFormDate;
        }
        else
        {
            tmpForm.FormDate     = _detailsLine.SalesTaxFormDate;
        }

        if (_detailsHeader.SalesTaxFormValue)
        {
            tmpForm.FormValue    = _detailsHeader.SalesTaxFormValue;
        }
        else
        {
            tmpForm.FormValue    = _detailsLine.SalesTaxFormValue;
        }
        ttsBegin;

        formToUpdate = TransitDocumentSalesTaxForm_IN::findByTmpSalesTaxForm(tmpForm);
        if (!formToUpdate)
        {
            formToUpdate.initFromTmpSalesTaxForm(tmpForm);
            formToUpdate.insert();
        }

        manager.removeTransitDocument(
            _trans, TransitDocumentSalesTaxForm_IN::find(
                _detailsLine.TransitDocumentSalesTaxForm_IN));
        manager.addTransitDocument(_trans, formToUpdate);

        // Update the result line accordingly
        _detailsLine.TransitDocumentSalesTaxForm_IN = formToUpdate.RecId;
        _detailsLine.SalesTaxFormTypes  = formToUpdate.FormType;
        _detailsLine.SalesTaxFormSeries = formToUpdate.SeriesNumber;
        _detailsLine.SalesTaxFormNumber = formToUpdate.FormNumber;
        _detailsLine.SalesTaxFormDate   = formToUpdate.FormDate;
        _detailsLine.SalesTaxFormValue  = formToUpdate.FormValue;
        _detailsLine.update();

        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>