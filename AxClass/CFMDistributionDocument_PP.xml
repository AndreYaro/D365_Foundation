<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMDistributionDocument_PP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class represents the instance of <c>CFMDistributionDocument</c> based on <c>CFMPlannedPaymentTable</c> and <c>CFMPlannedPaymentLine</c> tables.
/// </summary>
class CFMDistributionDocument_PP extends CFMDistributionDocument
{
    QueryBuildRange lineHeaderRange;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates instance of <c>CFMDistributionDocument_PP</c> based on planned payments source record.
    /// </summary>
    /// <param name="_sourceRecId">
    /// Planned payment source.
    /// </param>
    /// <param name="_sourceDataAreaId">
    /// Data area of planned payment source.
    /// </param>
    /// <param name="_sourceType">
    /// The type of planned payment source.
    /// </param>
    /// <param name="_currency">
    /// Document currency code.
    /// </param>
    /// <returns>
    /// Instance of <c>CFMDistributionDocument_PP</c>.
    /// </returns>
    public static CFMDistributionDocument_PP construct(RefRecId _sourceRecId, DataAreaId _sourceDataAreaId, CFMPlannedPaymentSourceType _sourceType, CurrencyCode _currency)
    {
        CFMDistributionDocument_PP distributionDocument = new CFMDistributionDocument_PP();

        distributionDocument.initializeFromSource(_sourceRecId, _sourceDataAreaId, _sourceType, _currency);

        return distributionDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode currencyCode()
    {
        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentHeader</Name>
				<Source><![CDATA[
    protected CFMPlannedPaymentTable currentHeader()
    {
        CFMPlannedPaymentTable header;

        if (this.existsHeader())
        {
            header = headerQueryRun.get(tableNum(CFMPlannedPaymentTable));
        }

        return header;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentLine</Name>
				<Source><![CDATA[
    protected CFMPlannedPaymentLine currentLine()
    {
        return lineQueryRun.get(tableNum(CFMPlannedPaymentLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteHeader</Name>
				<Source><![CDATA[
    public void deleteHeader()
    {
        CFMPlannedPaymentTable currentHeader = this.currentHeader();
        currentHeader.delete();

        headerSelected = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLinesForHeader</Name>
				<Source><![CDATA[
    protected void deleteLinesForHeader()
    {
        CFMPlannedPaymentLine plannedPaymentLine;

        delete_from plannedPaymentLine
            where plannedPaymentLine.PlannedPaymentTable == this.currentHeader().RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSelectedLinesForHeader</Name>
				<Source><![CDATA[
    protected void deleteSelectedLinesForHeader()
    {
        CFMPlannedPaymentLine plannedPaymentLine;
        CFMPlannedPaymentTable currentHeader = this.currentHeader();

        switch (lineSelectionType)
        {
            case CFMDistributionLineSelectionType::All:
                delete_from plannedPaymentLine
                    where plannedPaymentLine.PlannedPaymentTable == currentHeader.RecId;
                break;

            case CFMDistributionLineSelectionType::Positive:
                delete_from plannedPaymentLine
                    where plannedPaymentLine.PlannedPaymentTable == currentHeader.RecId
                       && plannedPaymentLine.DueAmount > 0;
                break;

            case CFMDistributionLineSelectionType::Negative:
                delete_from plannedPaymentLine
                    where plannedPaymentLine.PlannedPaymentTable == currentHeader.RecId
                       && plannedPaymentLine.DueAmount < 0;
                break;

            case CFMDistributionLineSelectionType::Zero:
                delete_from plannedPaymentLine
                    where plannedPaymentLine.PlannedPaymentTable == currentHeader.RecId
                       && plannedPaymentLine.DueAmount == 0;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class from planned payments source data.
    /// </summary>
    /// <param name="_sourceRecId">
    /// Planned payment source.
    /// </param>
    /// <param name="_sourceDataAreaId">
    /// Data area of planned payment source.
    /// </param>
    /// <param name="_sourceType">
    /// The type of planned payment source.
    /// </param>
    /// <param name="_currency">
    /// Document currency code.
    /// </param>
    protected void initializeFromSource(RefRecId _sourceRecId, DataAreaId _sourceDataAreaId, CFMPlannedPaymentSourceType _sourceType, CurrencyCode _currency)
    {
        currencyCode = _currency;

        headerQuery = new Query();

        QueryBuildDataSource qbds = headerQuery.addDataSource(tableNum(CFMPlannedPaymentTable));

        qbds.addRange(fieldNum(CFMPlannedPaymentTable, SourceRecId)).value(queryValue(_sourceRecID));
        qbds.addRange(fieldNum(CFMPlannedPaymentTable, SourceDataAreaId)).value(queryValue(_sourceDataAreaId));
        qbds.addRange(fieldNum(CFMPlannedPaymentTable, SourceType)).value(queryValue(_sourceType));

        qbds.addOrderByField(fieldNum(CFMPlannedPaymentTable, Prepayment), SortOrder::Descending);
        qbds.addOrderByField(fieldNum(CFMPlannedPaymentTable, DueDate));

        qbds.update(true);

        headerQueryRun = new QueryRun(headerQuery);

        lineQuery = new Query();

        qbds = lineQuery.addDataSource(tableNum(CFMPlannedPaymentLine));

        qbds.update(true);

        lineAmountRange = qbds.addRange(fieldNum(CFMPlannedPaymentLine, DueAmount));
        lineLedgerDimensionRange = qbds.addRange(fieldNum(CFMPlannedPaymentLine, LedgerDimension));
        lineTaxGroupRange = qbds.addRange(fieldNum(CFMPlannedPaymentLine, TaxGroup));
        lineTaxItemGroupRange = qbds.addRange(fieldNum(CFMPlannedPaymentLine, TaxItemGroup));
        lineHeaderRange = qbds.addRange(fieldNum(CFMPlannedPaymentLine, PlannedPaymentTable));

        this.lineQueryRunCreate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmount</Name>
				<Source><![CDATA[
    public AmountCur lineAmount()
    {
        return this.currentLine().DueAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineLedgerDimension</Name>
				<Source><![CDATA[
    public CFMLedgerDimension lineLedgerDimension()
    {
        return this.currentLine().LedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineQueryRunCreate</Name>
				<Source><![CDATA[
    protected void lineQueryRunCreate()
    {
        lineQueryRun = new QueryRun(lineQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineTaxGroup</Name>
				<Source><![CDATA[
    public TaxGroup lineTaxGroup()
    {
        return this.currentLine().TaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineTaxItemGroup</Name>
				<Source><![CDATA[
    public TaxItemGroup lineTaxItemGroup()
    {
        return this.currentLine().TaxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetLineRanges</Name>
				<Source><![CDATA[
    protected void resetLineRanges()
    {
        super();

        if (this.existsHeader())
        {
            lineHeaderRange.value(queryValue(this.currentHeader().RecId));
        }
        else
        {
            lineHeaderRange.value(SysQuery::valueUnlimited());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineAmount</Name>
				<Source><![CDATA[
    public void setLineAmount(AmountCur _amount)
    {
        CFMPlannedPaymentLine currentLine = this.currentLine();

        currentLine.DueAmount = _amount;
        currentLine.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalAmountForHeader</Name>
				<Source><![CDATA[
    public AmountCur totalAmountForHeader()
    {
        CFMPlannedPaymentLine plannedPaymentLine;

        select sum(DueAmount) from plannedPaymentLine
            where plannedPaymentLine.plannedPaymentTable == this.currentHeader().RecId;

        return plannedPaymentLine.DueAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalPositiveAmountForHeader</Name>
				<Source><![CDATA[
    public AmountCur totalPositiveAmountForHeader()
    {
        CFMPlannedPaymentLine plannedPaymentLine;

        select sum(DueAmount) from plannedPaymentLine
            where plannedPaymentLine.plannedPaymentTable == this.currentHeader().RecId
               && plannedPaymentLine.DueAmount > 0;

        return plannedPaymentLine.DueAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>