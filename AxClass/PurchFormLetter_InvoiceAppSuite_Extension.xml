<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchFormLetter_InvoiceAppSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(PurchFormLetter_Invoice))]
final class PurchFormLetter_InvoiceAppSuite_Extension
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        next run();

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            container contCorrection;
            Voucher ledgerVoucher, ledgerVoucherCorr;
            TransDate invoiceDate, invoiceDateCorr;

            contCorrection = VendInvoiceJourCorrLink_RU::findCorrectionData(formletterOutputContract.parmJournal().RecId);

            if (contCorrection != conNull())
            {
                [ledgerVoucher, invoiceDate, ledgerVoucherCorr, invoiceDateCorr] = contCorrection;

                TransLink_RU::createGeneralJourTransLink(ledgerVoucher,
                    invoiceDate,
                    ledgerVoucherCorr,
                    invoiceDateCorr);
            }
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate(Object _calledFrom)
    {
        boolean ok = next validate(_calledFrom);

        if (ok && FeatureStateProvider::isFeatureEnabled(BaseDocumentTrackingImprovementsFeature_IT::instance()))
        {
            VendInvoiceInfoTable vendInvoiceInfoTable;
            VendTable vendTable;
            BaseDocument_IT baseDocument;

            select firstonly InvoiceAccount, Num, PurchId from vendInvoiceInfoTable
                where vendInvoiceInfoTable.ParmId == this.purchParmUpdate().ParmId
            exists join vendTable
                where vendTable.AccountNum == vendInvoiceInfoTable.InvoiceAccount
                    && vendTable.IsPublicSector_IT == NoYes::Yes
            notexists join baseDocument
                where baseDocument.RefRecId == vendInvoiceInfoTable.RecId
                    && baseDocument.RefTableId == vendInvoiceInfoTable.TableId
                    && baseDocument.DocumentType != DocumentType_IT::None
                    && baseDocument.CIPEcode
                    && baseDocument.TenderCode;

            if (vendInvoiceInfoTable)
            {
                ok = checkFailed(strFmt("@BaseDocument_IT:PublicSectorBaseDocumentValidationError",
                    vendInvoiceInfoTable.InvoiceAccount,
                    strFmt("@SYS76498", "@SYS3179", vendInvoiceInfoTable.Num)));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reArrangeValidate</Name>
				<Source><![CDATA[
    protected boolean reArrangeValidate(boolean _logErrors)
    {
        boolean ret = next reArrangeValidate(_logErrors);

        if (ret && FeatureStateProvider::isFeatureEnabled(BaseDocumentTrackingImprovementsFeature_IT::instance()))
        {
            if (this.purchParmUpdate().numberOfTables() == 1)
            {
                ret = true;
            }
            else
            {
                VendInvoiceInfoTable vendInvoiceInfoTable;
                BaseDocument_IT baseDocument;
                container baseDocumentPacked;

                while select RecId from vendInvoiceInfoTable
                    where vendInvoiceInfoTable.ParmId == this.purchParmUpdate().ParmId
                join baseDocument
                    where baseDocument.RefRecId == vendInvoiceInfoTable.RecId
                        && baseDocument.RefTableId == vendInvoiceInfoTable.TableId
                        && baseDocument.DocumentType != DocumentType_IT::None
                {
                    if (baseDocumentPacked
                        && baseDocumentPacked != baseDocument.pack())
                    {
                        ret = checkFailed("@BaseDocument_IT:VendorInvoiceDifferentBaseDocumentsError");
                        break;
                    }

                    baseDocumentPacked = baseDocument.pack();
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>