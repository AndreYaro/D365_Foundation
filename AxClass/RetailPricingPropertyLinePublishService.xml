<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPricingPropertyLinePublishService</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Application.Instrumentation;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// Publish pricing property definition changes on line level, refresh all records in <c>RetailDiscountApplicabilityRule</c> to align with the latest definition.
/// </summary>
internal final class RetailPricingPropertyLinePublishService extends SysOperationServiceBase
{
    private const str RetailInstrumentationSegmentArea = 'PricingPropertyPublish.LineLevel';

    private container propValueFieldNumsPendingDeletion, salesLineAttrPropertiesPendingValueDeletion;
    private container refRecIdFieldNumsPendingDeletion;

    private container propValueFieldNumber = [
        fieldNum(RetailDiscountApplicabilityRule, PropValue0),
        fieldNum(RetailDiscountApplicabilityRule, PropValue1),
        fieldNum(RetailDiscountApplicabilityRule, PropValue2),
        fieldNum(RetailDiscountApplicabilityRule, PropValue3),
        fieldNum(RetailDiscountApplicabilityRule, PropValue4),
        fieldNum(RetailDiscountApplicabilityRule, PropValue5),
        fieldNum(RetailDiscountApplicabilityRule, PropValue6),
        fieldNum(RetailDiscountApplicabilityRule, PropValue7),
        fieldNum(RetailDiscountApplicabilityRule, PropValue8),
        fieldNum(RetailDiscountApplicabilityRule, PropValue9)
    ];

    private container refRecIdeFieldNumber = [
        fieldNum(RetailDiscountApplicabilityRule, EcoResCategoryRefRecId),
        fieldNum(RetailDiscountApplicabilityRule, EcoResProductRefRecId),
        fieldNum(RetailDiscountApplicabilityRule, EcoResDistinctProductVariantRefRecId),
        fieldNum(RetailDiscountApplicabilityRule, UnitOfMeasureSymbol),
        fieldNum(RetailDiscountApplicabilityRule, DlvModeCode),
        fieldNum(RetailDiscountApplicabilityRule, InventSiteId),
        fieldNum(RetailDiscountApplicabilityRule, InventLocationId),
        fieldNum(RetailDiscountApplicabilityRule, CatalogRefRecId),
        fieldNum(RetailDiscountApplicabilityRule, EcoResStyleName),
        fieldNum(RetailDiscountApplicabilityRule, EcoResSizeName),
        fieldNum(RetailDiscountApplicabilityRule, EcoResConfigurationName),
        fieldNum(RetailDiscountApplicabilityRule, EcoResColorName)
    ];

    private container tmpPropValueFieldNumber = [
        fieldNum(RetailDiscountApplicabilityRuleTmp, PropValue0),
        fieldNum(RetailDiscountApplicabilityRuleTmp, PropValue1),
        fieldNum(RetailDiscountApplicabilityRuleTmp, PropValue2),
        fieldNum(RetailDiscountApplicabilityRuleTmp, PropValue3),
        fieldNum(RetailDiscountApplicabilityRuleTmp, PropValue4),
        fieldNum(RetailDiscountApplicabilityRuleTmp, PropValue5),
        fieldNum(RetailDiscountApplicabilityRuleTmp, PropValue6),
        fieldNum(RetailDiscountApplicabilityRuleTmp, PropValue7),
        fieldNum(RetailDiscountApplicabilityRuleTmp, PropValue8),
        fieldNum(RetailDiscountApplicabilityRuleTmp, PropValue9)
    ];

    private container tmpRefRecIdeFieldNumber = [
        fieldNum(RetailDiscountApplicabilityRuleTmp, EcoResCategoryRefRecId),
        fieldNum(RetailDiscountApplicabilityRuleTmp, EcoResProductRefRecId),
        fieldNum(RetailDiscountApplicabilityRuleTmp, EcoResDistinctProductVariantRefRecId),
        fieldNum(RetailDiscountApplicabilityRuleTmp, UnitOfMeasureSymbol),
        fieldNum(RetailDiscountApplicabilityRuleTmp, DlvModeCode),
        fieldNum(RetailDiscountApplicabilityRuleTmp, InventSiteId),
        fieldNum(RetailDiscountApplicabilityRuleTmp, InventLocationId),
        fieldNum(RetailDiscountApplicabilityRuleTmp, CatalogRefRecId),
        fieldNum(RetailDiscountApplicabilityRuleTmp, EcoResStyleName),
        fieldNum(RetailDiscountApplicabilityRuleTmp, EcoResSizeName),
        fieldNum(RetailDiscountApplicabilityRuleTmp, EcoResConfigurationName),
        fieldNum(RetailDiscountApplicabilityRuleTmp, EcoResColorName)
    ];

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refresh all records in <c>RetailDiscountApplicabilityRule</c> to align with the latest line property definition.
    /// </summary>
    public void process()
    {
        System.Exception ex;

        try
        {
            using(var PublishTelemetry = RetailPricingInstrumentationSegment::construct(
                RetailInstrumentationSegmentArea, methodStr(RetailPricingPropertyLinePublishService, process)))
            {
                ttsbegin;

                this.initPendingDeletionInfo();

                if (conLen(propValueFieldNumsPendingDeletion) > 0)
                {
                    using(var PublishPerCompanyTelemetry = RetailPricingInstrumentationSegment::construct(
                        RetailInstrumentationSegmentArea,
                        methodStr(RetailPricingPropertyLinePublishService, processRetailDiscountApplicabilityRulePerCompany)))
                    {
                        this.processRetailDiscountApplicabilityRulePerCompany();
                    }
                }

                RetailPricingAttributePropertyHelper::deleteEcoResAttributeValuesForPricingSimulator(salesLineAttrPropertiesPendingValueDeletion);
                
                RetailPricingPropertyDefinition lineProperty;
                delete_from lineProperty where lineProperty.PropertyLevel == RetailPricingPropertyLevel::Line
                    && lineProperty.IsPendingDeletion == NoYes::Yes;

                // Create new published properties.
                // Keep the draft copy, so that users can immediately view them when research on the property definition form.
                RetailPricingPropertyDefinition::copyPropertyDefinitions(RetailPricingPropertyLevel::Line, RetailPricingPropertyProcessStatus::Draft, RetailPricingPropertyProcessStatus::Published);

                RetailPricingSharedParameters retailPricingSharedParameters = RetailPricingSharedParameters::find(true);
                retailPricingSharedParameters.DiscountApplicabilityRuleProcessStatus = RetailPricingPropertyProcessStatus::Published;
                retailPricingSharedParameters.update();

                ttscommit;

                RetailDiscountLineV2Entity::generatMapping();

                this.addSystemNotification(
                    strFmt("@RetailPricing:RetailPricingPropertyPublishBatchSucceedTitle", "@RetailPricing:RetailPricingPropertyPublishLineBatchLabel"),
                    "@RetailPricing:RetailPricingPropertyPublishLineBatchSucceedMessage");
            }
        }
        catch(ex)
        {
            ttsbegin;
            RetailPricingSharedParameters retailPricingSharedParameters = RetailPricingSharedParameters::find(true);
            retailPricingSharedParameters.DiscountApplicabilityRuleProcessStatus = RetailPricingPropertyProcessStatus::Draft;
            retailPricingSharedParameters.update();
            ttscommit;

            var exceptionTelemetry = RetailPricingInstrumentatioBatchFailureSegment::construct(
                    classStr(RetailPricingPropertyLinePublishService),
                    methodStr(RetailPricingPropertyLinePublishService, process));
            exceptionTelemetry.addException(ex);
            exceptionTelemetry.log();
            
            this.addSystemNotification(
                strFmt("@RetailPricing:RetailPricingPropertyPublishBatchFailTitle", "@RetailPricing:RetailPricingPropertyPublishLineBatchLabel"),
                "@RetailPricing:RetailPricingPropertyPublishLineBatchFailMessage");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPendingDeletionInfo</Name>
				<Source><![CDATA[
    internal void initPendingDeletionInfo()
    {
        RetailPricingPropertyDefinition lineProperty;

        int propValueIndex = 1;
        while select lineProperty
            order by lineProperty.RecId asc
            where lineProperty.PropertyLevel == RetailPricingPropertyLevel::Line && lineProperty.Status == RetailPricingPropertyProcessStatus::Draft
        {
            if (lineProperty.IsPendingDeletion == NoYes::Yes)
            {
                propValueFieldNumsPendingDeletion += conPeek(propValueFieldNumber, propValueIndex);

                if (lineProperty.PropertyType == RetailPricingPropertyType::Predefined)
                {
                    refRecIdFieldNumsPendingDeletion += RetailPricingPredefinedPropertyHelper::getPredefinedPropertyFieldNum(lineProperty.PredefinedProperty);
                }
                else if (lineProperty.PropertyType == RetailPricingPropertyType::EcoResAttribute
                    && lineProperty.PropertySource == RetailPricingPropertySource::SalesOrderLine)
                {
                    salesLineAttrPropertiesPendingValueDeletion += lineProperty;
                }
            }

            propValueIndex ++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRetailDiscountApplicabilityRulePerCompany</Name>
				<Source><![CDATA[
    internal void processRetailDiscountApplicabilityRulePerCompany()
    {
        RetailPricingPropertyDefinition lineProperty;
        RetailDiscountApplicabilityRule discountApplicabilityRule;

        // RecordInsertList will automatically write into DB when the stored data is large enough,
        // so we target RecordInsertList at temp table first, then dump all from temp table into the formal table.
        RetailDiscountApplicabilityRuleTmp newRetailDiscountApplicabilityRule;
        RecordInsertList newRetailDiscountApplicabilityRuleList = new RecordInsertList(
            tableNum(RetailDiscountApplicabilityRuleTmp),
            true, // skip insert
            true, // skip database log
            true, // skip events
            true, // skip aos validation
            true, // skip RLS validation
            newRetailDiscountApplicabilityRule); // buffer where records will be inserted.

        int lastFieldNumIndex = conLen(propValueFieldNumber);

        discountApplicabilityRule.skipDeleteActions(true);
        discountApplicabilityRule.skipDatabaseLog(true);
        discountApplicabilityRule.skipDataMethods(true);
        discountApplicabilityRule.skipEvents(true);

        while select discountApplicabilityRule
        {
            newRetailDiscountApplicabilityRule.clear();

            for (int fieldNumIndex = 1, newFieldNumIdex = 1; fieldNumIndex <= lastFieldNumIndex; fieldNumIndex ++)
            {
                int discountApplicabilityRuleFieldNum = conPeek(propValueFieldNumber, fieldNumIndex);
                int newDiscountApplicabilityRuleFieldNum = conPeek(tmpPropValueFieldNumber, newFieldNumIdex);

                if (conFind(propValueFieldNumsPendingDeletion, discountApplicabilityRuleFieldNum) == 0)
                {
                    str propValue = discountApplicabilityRule.(discountApplicabilityRuleFieldNum);
                    newRetailDiscountApplicabilityRule.(newDiscountApplicabilityRuleFieldNum) = propValue;
                    newFieldNumIdex += 1;
                }
            }

            int refRecIdCount = conLen(refRecIdeFieldNumber);
            for (int fieldNumIndex = 1; fieldNumIndex <= refRecIdCount; fieldNumIndex ++)
            {
                int discountApplicabilityRuleFieldNum = conPeek(refRecIdeFieldNumber, fieldNumIndex);
                int newDiscountApplicabilityRuleFieldNum = conPeek(tmpRefRecIdeFieldNumber, fieldNumIndex);

                if (conFind(refRecIdFieldNumsPendingDeletion, discountApplicabilityRuleFieldNum) == 0)
                {
                    newRetailDiscountApplicabilityRule.(newDiscountApplicabilityRuleFieldNum) = discountApplicabilityRule.(discountApplicabilityRuleFieldNum);
                }
            }

            newRetailDiscountApplicabilityRule.RetailPeriodicDiscountLine = discountApplicabilityRule.RetailPeriodicDiscountLine;
            newRetailDiscountApplicabilityRule.SHA3HashHex = newRetailDiscountApplicabilityRule.SHA3Value();

            newRetailDiscountApplicabilityRuleList.add(newRetailDiscountApplicabilityRule);
        }
        
        // Write into DB.
        newRetailDiscountApplicabilityRuleList.insertDatabase();

        delete_from discountApplicabilityRule;
        insert_recordset discountApplicabilityRule
        (
            RetailPeriodicDiscountLine, PropValue0, PropValue1, PropValue2, PropValue3, PropValue4, PropValue5, PropValue6, PropValue7, PropValue8, PropValue9,
            EcoResCategoryRefRecId, EcoResProductRefRecId, EcoResDistinctProductVariantRefRecId, UnitOfMeasureSymbol, DlvModeCode, InventSiteId, InventLocationId, CatalogRefRecId, EcoResStyleName, EcoResSizeName, EcoResConfigurationName, EcoResColorName
        )
        select
            RetailPeriodicDiscountLine, PropValue0, PropValue1, PropValue2, PropValue3, PropValue4, PropValue5, PropValue6, PropValue7, PropValue8, PropValue9,
            EcoResCategoryRefRecId, EcoResProductRefRecId, EcoResDistinctProductVariantRefRecId, UnitOfMeasureSymbol, DlvModeCode, InventSiteId, InventLocationId, CatalogRefRecId, EcoResStyleName, EcoResSizeName, EcoResConfigurationName, EcoResColorName
        from newRetailDiscountApplicabilityRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSystemNotification</Name>
				<Source><![CDATA[
    private void addSystemNotification(str _title, str _message)
    {
        SystemNotificationDataContract notification = new SystemNotificationDataContract();
        notification.Users().value(1, curUserId());
        notification.RuleId(classStr(RetailPricingPropertyLinePublishService));
        notification.Title(_title);
        notification.Message(_message);
        notification.ExpirationDateTime(DateTimeUtil::addHours(DateTimeUtil::utcNow(), 1));

        SystemNotificationsManager::AddSystemNotification(notification);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>