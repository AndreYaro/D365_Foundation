<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendOutPaymRecord</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class CustVendOutPaymRecord
{
    StreamIo file;
    CustVendPaymStatus paymStatus;
    CustVendPaym custVendPaym;
    Object custVendOutPaym;
    boolean isPrenote;
    #define.emptyString('')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkValues</Name>
				<Source><![CDATA[
    public boolean checkValues(
        LedgerJournalTrans _ledgerJournalTrans = null,
        RunbaseProgress _progress = null)
    {
        boolean ret = true;

        if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Bank && _ledgerJournalTrans.parmAccount())
        {
            ret = BankAccountTable::checkIsActive(_ledgerJournalTrans.parmAccount(), _ledgerJournalTrans.TransDate);
        }

        if (_ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank && _ledgerJournalTrans.parmOffsetAccount())
        {
            ret = BankAccountTable::checkIsActive(_ledgerJournalTrans.parmOffsetAccount(), _ledgerJournalTrans.TransDate);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertAmountTransCurToAmountPaymCur</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts the specified amount from the currency of the open transaction to the currency of the
    ///    payment.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    The payment from which to get the final currency
    /// </param>
    /// <param name="_custVendTrans">
    ///    The customer or vendor transaction from the open transaction for the transaction currency
    /// </param>
    /// <param name="_specTrans">
    ///    The <c>specTrans</c> related to the open transactions
    /// </param>
    /// <param name="_amountTransCur">
    ///    The amount to convert to the payment currency.
    /// </param>
    /// <returns>
    ///    The specified amount converted to the currency of the open transaction.
    /// </returns>
    protected AmountCur convertAmountTransCurToAmountPaymCur(
                                            LedgerJournalTrans  _ledgerJournalTrans,
                                            CustVendTrans       _custVendTrans,
                                            SpecTrans           _specTrans,
                                            AmountCur           _amountTransCur)
    {
        AmountCur           amountPaymCur;
        AmountCur           interimAmount;
        CurrencyCode        transMstCurrency;
        CurrencyCode        paymentMstCurrency;
        ExchRate            paymentExchRate;

        CurrencyExchangeHelper  displayExchRateHelper;
        CurrencyExchangeHelper  transExchRateHelper;
        ExchangeRateHelper      exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(_ledgerJournalTrans.Company).RecId), _ledgerJournalTrans.CurrencyCode);

        // Inititalize currency exchange rate helpers
        displayExchRateHelper = CurrencyExchangeHelper::construct();
        transExchRateHelper   = CurrencyExchangeHelper::construct();

        if (_custVendTrans.CurrencyCode == _ledgerJournalTrans.CurrencyCode)
        {
            // Currencies are the same between the marked transaction & the payment
            amountPaymCur = _amountTransCur;
        }
        else
        {
            if (_specTrans.CrossRate != 0)
            {
                // Cross rate is specified, convert directly from payment to marked transaction currency
                amountPaymCur = CurrencyExchange::round(CurrencyExchange::calculateAmount(_amountTransCur, _specTrans.CrossRate), _ledgerJournalTrans.CurrencyCode);
            }
            else
            {
                //This find on the company currency needs to happen in the context of the _ledgerJournalTrans.Company
                changecompany(_ledgerJournalTrans.Company)
                {
                    paymentMstCurrency  = CompanyInfoHelper::standardCurrency();
                    paymentExchRate     = exchangeRateHelper.prepareExchangeRateForStorage(_ledgerJournalTrans.crossrate());
                }

                // Convert from transaction currency to transaction company currency
                transExchRateHelper.parmLedgerRecId(Ledger::primaryLedger(CompanyInfo::findDataArea(_custVendTrans.company()).RecId));
                transExchRateHelper.parmExchangeDate(_ledgerJournalTrans.TransDate);
                interimAmount = transExchRateHelper.calculateTransactionToAccounting(_custVendTrans.CurrencyCode, _amountTransCur, false);

                if (_ledgerJournalTrans.Company != _custVendTrans.company())
                {
                    // Convert from transaction company currency to payment company currency
                    changecompany(_custVendTrans.company())
                    {
                        // Get trans company currency
                        transMstCurrency = CompanyInfoHelper::standardCurrency();
                    }

                    if (transMstCurrency != paymentMstCurrency)
                    {
                        interimAmount = transExchRateHelper.calculateAccountingToTransaction(paymentMstCurrency, interimAmount, false);
                    }
                }

                // Convert from payment company currency to payment currency
                if (paymentExchRate != 0)
                {
                    displayExchRateHelper.parmExchangeRate1(paymentExchRate);
                }

                amountPaymCur = displayExchRateHelper.calculateAccountingToTransaction(_ledgerJournalTrans.CurrencyCode, interimAmount, true);
            }
        }

        return amountPaymCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interfaceName</Name>
				<Source><![CDATA[
    public PaymInterfaceName interfaceName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>output</Name>
				<Source><![CDATA[
    /// <summary>
    /// Outputs a record that is currently being processed.
    /// </summary>
    /// <remarks>
    /// A concrete <c>CustVendOutPaymRecord</c> implementation should override this method as default
    /// implementation is an empty method.
    /// </remarks>
    void output()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendOutPaym</Name>
				<Source><![CDATA[

    public void parmCustVendOutPaym(CustVendOutPaym _custVendOutPaym)
    {
        custVendOutPaym = _custVendOutPaym;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendPaym</Name>
				<Source><![CDATA[
    public CustVendPaym parmCustVendPaym(CustVendPaym _custVendPaym = custVendPaym)
    {
        custVendPaym = _custVendPaym;

        return custVendPaym;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFile</Name>
				<Source><![CDATA[
    public void parmFile(StreamIo _file = file)
    {
        file = _file;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsPrenote</Name>
				<Source><![CDATA[
    public boolean parmIsPrenote(boolean _isPrenote = isPrenote)
    {
        isPrenote = _isPrenote;

        return isPrenote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymStatus</Name>
				<Source><![CDATA[
    /*
    This method have to be overloaded if the paymStatus of the journalline should be different from Sent.
    The overloaded method should look like this:

    CustVendPaymStatus paymStatus()
    {
        return paymStatus;
    }

    The variable paymentStatus should be set to the desired value in the output method
    */
    CustVendPaymStatus paymStatus()
    {
        return CustVendPaymStatus::Sent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>replaceDanishLetters</Name>
				<Source><![CDATA[
    str replaceDanishLetters(str input)
    {
        int idx;
        int char;

        idx = strFind(input,'æøå',1,9999);
        while (idx)
        {
            char = char2num(input,idx);

            switch (char)
            {
                case char2num('æ',1):
                    input = strDel(input,idx,1);
                    input = strIns(input,'ae',idx);
                    break;

                case char2num('ø',1):
                    input = strDel(input,idx,1);
                    input = strIns(input,'oe',idx);
                    break;

                case char2num('å',1):
                    input = strDel(input,idx,1);
                    input = strIns(input,'aa',idx);
                    break;

                case char2num('Æ',1):
                    input = strDel(input,idx,1);
                    input = strIns(input,'Ae',idx);
                    break;

                case char2num('Ø',1):
                    input = strDel(input,idx,1);
                    input = strIns(input,'Oe',idx);
                    break;

                case char2num('Å',1):
                    input = strDel(input,idx,1);
                    input = strIns(input,'Aa',idx);
                    break;
            }

            idx = strFind(input,'æøå',1,9999);
        }
        return input;
    }

]]></Source>
			</Method>
			<Method>
				<Name>callPrinterSettings</Name>
				<Source><![CDATA[
    static boolean callPrinterSettings(CustVendOutPaym   _custVendOutPaym,
                                              PaymDocumentType  _documentType)
    {
        SRSPrintDestinationSettings printSettings = new SRSPrintDestinationSettings(_custVendOutPaym.getPrinterSettings(_documentType));
        boolean ok = SrsReportRunUtil::showSettingsDialog(printSettings);

        _custVendOutPaym.updatePrinterSettings(_documentType, printSettings.pack());

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static Object construct(PaymMode         _paymMode,
                                   PaymSpec         _paymSpec,
                                   CustVendOutPaym  _custVendOutPaym,
                                   CustVendPaym     _custVendPaym)
    {
        CustVendOutPaymRecord   custVendOutPaymRecord;
        classId                 classId;
        classId                 mustInheritFromClassId;
        CustVendPaymModeSpec    paymModeSpec;

        if (!_paymSpec)
        {
            classId = _custVendOutPaym.custVendOutPaymRecordRootClassId();
        }
        else
        {
            paymModeSpec = _custVendOutPaym.findPaymModeSpec(_paymMode, _paymSpec);

            classId = paymModeSpec.ClassId;

            if (! classId)
            {
                throw error(strFmt("@SYS63356", _paymSpec));
            }

            switch (paymModeSpec.TableId)
            {
                case tableNum(CustPaymModeSpec) :
                    mustInheritFromClassId = classNum(CustOutPaymRecord);
                    break;

                case tableNum(VendPaymModeSpec) :
                    mustInheritFromClassId = classNum(VendOutPaymRecord);
                    break;

                default :
                    throw error(Error::wrongUseOfFunction(funcName()));
            }

            if (!SysDictClass::isSuperclass(classId, mustInheritFromClassId))
            {
                throw error(strFmt("@SYS63357", _paymSpec));
            }
        }

        custVendOutPaymRecord = new DictClass(classId).makeObject();
        custVendOutPaymRecord.parmCustVendPaym(_custVendPaym);
        custVendOutPaymRecord.parmCustVendOutPaym(_custVendOutPaym);

        return custVendOutPaymRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interfaceName2ClassName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the specified interface name and retrieves the class name.
    /// </summary>
    /// <param name="_interfaceName">
    ///    The interface name, class name or the user-entered text.
    /// </param>
    /// <param name="_classId">
    ///    The parent class ID that is related to the interfce name or the class name.
    /// </param>
    /// <returns>
    ///    The class name if the interface name is valid; otherwise, the same class name as was specified.
    /// </returns>
    /// <remarks>
    ///    This method creates the list of all the child classes for the given parent class and loops through
    ///    each class until the interface name matches.If found returns the class name else the same parm
    ///    variable is returned back.
    /// </remarks>
    static className interfaceName2ClassName(
        className   _interfaceName,
        classId     _classId)
    {
        Object          obj;
        DictClass       curClass;
        List            list;
        ListEnumerator  listEnum;

        if (!_classId)
        {
            return #emptyString;
        }

        list = new DictClass(_classId).extendedBy();
        list.addStart(_classId);
        listEnum = list.getEnumerator();

        while (listEnum.moveNext())
        {
            curClass = new DictClass(listEnum.current());
            if (curClass && !curClass.isAbstract())
            {
                obj = curClass.makeObject();
                if (obj.interfaceName() == _interfaceName)
                {
                    return curClass.name();
                }
            }
        }

        return _interfaceName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCustVendOutPaymRecord</Name>
				<Source><![CDATA[
    static CustVendOutPaymRecord newCustVendOutPaymRecord(Common paymModeSpec)
    {
        CustVendOutPaymRecord custVendOutPaymRecord;

        switch (paymModeSpec.TableId)
        {
            case tableNum(CustPaymModeSpec) :
                custVendOutPaymRecord = CustOutPaymRecord::newCustOutPaymRecord(paymModeSpec);
                break;

            case tableNum(VendPaymModeSpec) :
                custVendOutPaymRecord = VendOutPaymRecord::newVendOutPaymRecord(paymModeSpec);
                break;

            default:
                throw error(Error::missingRecord(funcName()));
        }

        return custVendOutPaymRecord;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
