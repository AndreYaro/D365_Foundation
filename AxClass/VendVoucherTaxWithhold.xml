<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendVoucherTaxWithhold</Name>
	<SourceCode>
		<Declaration><![CDATA[
class VendVoucherTaxWithhold extends VendVoucher
{
    TaxWithholdTrans taxWithholdTrans;
    VendTrans invoiceVendTrans;

    BankTransactionTypes bankTransactionTypes;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createVoucherForDifferentSummaryAccount</Name>
				<Source><![CDATA[
        protected void createVoucherForDifferentSummaryAccount(
        VendTrans _invoiceVendTrans,
        VendTrans _withholdingVendTrans,
        LedgerVoucher _ledgerPostingJournal)
    {
        CustVendTransSettleDistController invoiceSettleDistController;
        CustVendTransSettleDistController withholdingSettleDistController;
        LedgerDimensionAccount ledgerDimensionAccount;
        TransTxt localTransTxt;
        boolean invoiceHasSourceDocumentData;
        boolean mustOffset;

        invoiceHasSourceDocumentData = CustVendTransDistributionController::custVendTransHasSourceDocumentData(_invoiceVendTrans);

        if (invoiceHasSourceDocumentData == false)
        {
            return;
        }

        invoiceSettleDistController = CustVendTransSettleDistController::construct(false);
        withholdingSettleDistController = CustVendTransSettleDistController::construct(false);

        ledgerDimensionAccount = this.mergeLedgerDimensionAndDefaultDimension(this.summaryLedgerDimension(), defaultDimension);

        invoiceSettleDistController.getDistributionFactors(
            _invoiceVendTrans,
            ledgerPostingType,
            ledgerDimensionAccount,
            false);
        withholdingSettleDistController.getDistributionFactors(
            _withholdingVendTrans,
            ledgerPostingType,
            ledgerDimensionAccount,
            false);

        mustOffset = invoiceSettleDistController.distributionDifferencesExist(withholdingSettleDistController);

        if (mustOffset)
        {
            localTransTxt = this.setTransactionTxt(languageId, _ledgerPostingJournal.lastVoucher(), _ledgerPostingJournal.lastTransDate());
            localTransTxt = localTransTxt ? localTransTxt : transTxt;

            this.summaryAccountCreateVoucher(
                _invoiceVendTrans,
                _ledgerPostingJournal,
                invoiceSettleDistController,
                _withholdingVendTrans.AmountCur,
                _withholdingVendTrans.AmountMST,
                _withholdingVendTrans.ReportingCurrencyAmount,
                localTransTxt,
                ledgerDimensionAccount);

            this.summaryAccountCreateVoucher(
                _withholdingVendTrans,
                _ledgerPostingJournal,
                withholdingSettleDistController,
                -_withholdingVendTrans.AmountCur,
                -_withholdingVendTrans.AmountMST,
                -_withholdingVendTrans.ReportingCurrencyAmount,
                localTransTxt,
                ledgerDimensionAccount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankTransactionTypes</Name>
				<Source><![CDATA[
        public BankTransactionTypes parmBankTransactionTypes(BankTransactionTypes _bankTransactionTypes = bankTransactionTypes)
    {
        bankTransactionTypes = _bankTransactionTypes;

        return bankTransactionTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceVendTrans</Name>
				<Source><![CDATA[
        public VendTrans parmInvoiceVendTrans(VendTrans _invoiceVendTrans = invoiceVendTrans)
    {
        invoiceVendTrans = _invoiceVendTrans;

        return invoiceVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
        public void post(
        LedgerVoucher _ledgerPostingJournal,
        CustVendTrans _vendTrans,
        NoYes _approval = NoYes::No,
        UnknownNoYes _euroTriangulation = Currency::noYes2UnknownNoYes(triangulation),
        boolean _withHoldTaxType = false,
        boolean _useSubLedger = false)
    {
        ttsbegin;

        super(_ledgerPostingJournal, _vendTrans, _approval, _euroTriangulation, _withHoldTaxType, _useSubLedger);

        if (invoiceVendTrans.AccountingEvent != 0)
        {
            this.createVoucherForDifferentSummaryAccount(invoiceVendTrans, _vendTrans, _ledgerPostingJournal);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxWithholdTrans</Name>
				<Source><![CDATA[
        public void setTaxWithholdTrans(TaxWithholdTrans _taxWithholdTrans)
    {
        taxWithholdTrans = _taxWithholdTrans;

        if (BrazilParameters::isEnabled())
        {
            taxWithholdType = TaxWithholdTable::find(taxWithholdTrans.TaxWithholdCode).TaxWithholdType_BR;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleTaxWithhold</Name>
				<Source><![CDATA[
public void settleTaxWithhold(VendTrans _vendTrans, TransDate _lastTransDate)
    {
        VendTrans vendTransInvoice;
        VendSettlement vendSettlement;
        VendTransOpen vendTransOpen;
        RecId settlementGroup;
        RecId vendTransOpenRecId;

        Debug::assert(curext() == _vendTrans.company());

        ttsbegin;

        vendTransInvoice = VendTrans::find(taxWithholdTrans.VendTransInvoiceId, true);

        // Settlement of the withholding tax paymment
        _vendTrans.SettleAmountMST = _vendTrans.AmountMST;
        _vendTrans.SettleAmountCur = _vendTrans.AmountCur;
        _vendTrans.SettleAmountReporting = _vendTrans.ReportingCurrencyAmount;

        _vendTrans.LastSettleDate = _lastTransDate;
        _vendTrans.LastSettleVoucher = vendTransInvoice.Voucher;
        _vendTrans.LastSettleAccountNum = vendTransInvoice.AccountNum;
        _vendTrans.LastSettleCompany = vendTransInvoice.DataAreaId;

        _vendTrans.Closed = CustVendTransData::construct(_vendTrans).maxSettlementDate(vendTransInvoice.TransDate);
        _vendTrans.OffsetRecid = taxWithholdTrans.VendTransInvoiceId;
        _vendTrans.update();

        vendSettlement.initFromVendTrans(_vendTrans);
        vendSettlement.CanBeReversed = NoYes::Yes;
        vendSettlement.SettlementVoucher = _vendTrans.Voucher;
        vendSettlement.insert();

        // update the settlement group
        settlementGroup = vendSettlement.RecId;
        vendSettlement.SettlementGroup = settlementGroup;
        vendSettlement.update();

        // Delete the VendTransOpen related to the WHT
        delete_from vendTransOpen
            where vendTransOpen.RefRecId == _vendTrans.RecId;

        // Settlement of the invoice for the withholding tax amount
        vendTransInvoice.SettleAmountMST -= _vendTrans.SettleAmountMST;
        vendTransInvoice.SettleAmountCur -= _vendTrans.SettleAmountCur;
        vendTransInvoice.SettleAmountReporting -= _vendTrans.SettleAmountReporting;

        vendTransInvoice.LastSettleDate = _lastTransDate;
        vendTransInvoice.LastSettleVoucher = _vendTrans.Voucher;
        vendTransInvoice.LastSettleAccountNum = _vendTrans.AccountNum;
        vendTransInvoice.LastSettleCompany = _vendTrans.DataAreaId;

        vendTransInvoice.OffsetRecid = _vendTrans.RecId;
        vendTransInvoice.update();

        vendSettlement.initFromVendTrans(vendTransInvoice);
        vendSettlement.SettleAmountMST = - _vendTrans.SettleAmountMST;
        vendSettlement.SettleAmountCur = - _vendTrans.SettleAmountCur;
        vendSettlement.SettleAmountReporting = - _vendTrans.SettleAmountReporting;
        vendSettlement.CanBeReversed = NoYes::Yes;
        vendSettlement.SettlementGroup = settlementGroup;
        vendSettlement.SettlementVoucher = _vendTrans.Voucher;
        vendSettlement.DueDate = vendTransInvoice.DueDate;
        vendSettlement.insert();

        if (BrazilParameters::isEnabled())
        {
            vendTransOpen = VendTransOpen::find(taxWithholdTrans.CustVendTransOpenRecId_BR, true);
        }
        else
        {
            SpecTrans taxWithholdLinkedVendTransOpenSpecTrans = SpecTrans::findByRecId(taxWithholdTrans.SpecTransId);
            vendTransOpen = VendTransOpen::find(taxWithholdLinkedVendTransOpenSpecTrans.RefRecId, true);
        }
        vendTransOpen.AmountMST += _vendTrans.SettleAmountMST;
        vendTransOpen.AmountCur += _vendTrans.SettleAmountCur;
        vendTransOpen.ReportingCurrencyAmount += _vendTrans.SettleAmountReporting;
        vendTransOpen.update();

        // <GBR>
        // When WHT amount is equal to the total amount to settle, the payment amount will be 0, so we need to delete the vendTransOpen related to the invoice payment
        if (BrazilParameters::isEnabled() && (!vendTransOpen.AmountCur || !vendTransOpen.AmountMST))
        {
            vendTransOpenRecId = vendTransOpen.RecId;

            delete_from vendTransOpen
                where vendTransOpen.RecId == vendTransOpenRecId;
        }
        // </GBR>

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summaryAccountCreateVoucher</Name>
				<Source><![CDATA[
        protected void summaryAccountCreateVoucher(
        VendTrans _vendTrans,
        LedgerVoucher _ledgerPostingJournal,
        CustVendTransSettleDistController _distributionController,
        AmountCur _amountTransaction,
        AmountMST _amountAccounting,
        Money _amountReporting,
        TransTxt _transTxt,
        LedgerDimensionAccount _ledgerDimensionAccount)
    {
        LedgerVoucherObject ledgerVoucherObject;
        LedgerVoucherTransObject ledgerVoucherTransObject;
        TransTxt localTransTxt;
        List distributions;
        ListEnumerator distributionEnumerator;
        CustVendTransDistribution distribution;
        Factor signFactor;
        List generatedEntriesList, generatedDistributionsList;
        ListEnumerator generatedEntriesListEnumerator;
        CustVendTransDistribution generatedDistribution;
        JournalizingDefinitionManagerBank journalizingDefinitionManagerBank;
        JournalizingDefinitionEntry journalizingDefinitionEntry;

        ledgerVoucherObject = _ledgerPostingJournal.findLedgerVoucherObject();

        distributions = _distributionController.generateDistributions(
            _vendTrans,
            ledgerPostingType,
            _amountTransaction,
            _amountAccounting,
            _amountReporting,
            _ledgerDimensionAccount,
            false);

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            distributionEnumerator = distributions.getEnumerator();

            if (_vendTrans.TransType == LedgerTransType::Purch && LedgerParameters::find().JournalizingDefinitionEnableValue == NoYes::Yes)
            {
                generatedDistributionsList = new List(Types::Class);

                journalizingDefinitionManagerBank = JournalizingDefinitionManager::newJournalizingDefinitionManagerBank(
                                                        this.parmCompanyBankAccountId(),
                                                        this.parmPaymMode(),
                                                        taxWithholdTrans.TransDate,
                                                        LedgerPostingType::Bank);

                journalizingDefinitionManagerBank.parmBankTransactionTypes(bankTransactionTypes);
                journalizingDefinitionManagerBank.parmJournalizingDefinition(journalizingDefinitionManagerBank.getDefaultJournalizingDefinition());

                while (distributionEnumerator.moveNext())
                {
                    distribution = distributionEnumerator.current();
                    generatedEntriesList = journalizingDefinitionManagerBank.getSystemGeneratedEntries(DebitCredit::Debit, distribution.ledgerDimension());
                    generatedEntriesListEnumerator = generatedEntriesList.getEnumerator();

                    while (generatedEntriesListEnumerator.moveNext())
                    {
                        journalizingDefinitionEntry = generatedEntriesListEnumerator.current();
                        signFactor = journalizingDefinitionEntry.parmJournalizingDefinitionDebitCredit() == DebitCredit::Debit ? 1 : -1;

                        generatedDistribution = new CustVendTransDistribution(
                                                    journalizingDefinitionEntry.parmLedgerDimension(),
                                                    distribution.transactionAmount() * signFactor,
                                                    distribution.accountingAmount() * signFactor,
                                                    distribution.reportingAmount() * signFactor);

                        generatedDistributionsList.addEnd(generatedDistribution);
                    }
                }

                distributions.appendList(generatedDistributionsList);
            }
        }

        distributionEnumerator = distributions.getEnumerator();
        while (distributionEnumerator.moveNext())
        {
            distribution = distributionEnumerator.current();

            ledgerVoucherTransObject = LedgerVoucherTransObject::newBasicDefault(
                                            ledgerVoucherObject,
                                            ledgerPostingType,
                                            distribution.ledgerDimension(),
                                            _vendTrans.CurrencyCode,
                                            distribution.transactionAmount(),
                                            distribution.accountingAmount(),
                                            distribution.reportingAmount());

            ledgerVoucherTransObject.parmTransTxt(localTransTxt);
            ledgerVoucherTransObject.parmSkipDimensionValidation(true);
            _ledgerPostingJournal.addTrans(ledgerVoucherTransObject);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>