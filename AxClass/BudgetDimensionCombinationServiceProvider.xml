<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetDimensionCombinationServiceProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BudgetDimensionCombinationServiceProvider</c> class resolves and validates budget dimension combinations.
/// </summary>
[System.ComponentModel.Composition.ExportMetadataAttribute(enumstr(LedgerDimensionType), LedgerDimensionType::Budget),
 System.ComponentModel.Composition.ExportAttribute(identifierstr(Dynamics.AX.Application.DimensionCombinationServiceProvider))]
public class BudgetDimensionCombinationServiceProvider extends DimensionCombinationServiceProvider
{
    DimensionHierarchyId accountStructureId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDimensionStorage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a <c>DimensionStorage</c> instance with the resolve values.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>DimensionStorage</c> class.
    /// </returns>
    protected DimensionStorage getDimensionStorage()
    {
        LedgerDimensionType ledgerDimensionType = this.getCombinationContract().getLedgerDimensionType();

        LedgerDimensionDefaultingEngine defaultingEngine = LedgerDimensionDefaultingEngine::constructForAccountStructure(
            this.accountStructureId,
            LedgerDimensionDefaultingEngine::getValueSetStorageDimensionSpecifiers(this.getResolvedValues()),
            ledgerDimensionType);

        return defaultingEngine.getStorage(ledgerDimensionType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForBudgetAccountContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Create a new instance of the <c>BudgetDimensionCombinationServiceProvider</c> class for the specified
    ///    budget account contract.
    /// </summary>
    /// <param name="_contract">
    ///    A <c>BudgetAccountContract</c> instance.
    /// </param>
    /// <returns>
    ///    The <c>BudgetDimensionCombinationServiceProvider</c> instance.
    /// </returns>
    public static BudgetDimensionCombinationServiceProvider newForBudgetAccountContract(BudgetAccountContract _contract)
    {
        BudgetDimensionCombinationServiceProvider serviceProvider = new BudgetDimensionCombinationServiceProvider();
        serviceProvider.initialize(_contract);
        return serviceProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNameValueListContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the <c>DimensionNameValueListContract</c> instance and updates the dimension storage result with any errors.
    /// </summary>
    /// <returns>
    ///    true if the contract is valid; otherwise, false.
    /// </returns>
    protected boolean validateNameValueListContract()
    {
        BudgetAccountContract budgetAccountContract = this.getCombinationContract() as BudgetAccountContract;

        if (budgetAccountContract)
        {
            this.accountStructureId = DimensionHierarchy::findByTypeAndName(
                DimensionHierarchyType::AccountStructure,
                budgetAccountContract.parmAccountStructure()).RecId;

            if (this.accountStructureId)
            {
                super();
            }
            else
            {
                this.getDimensionStorageResult().parmStatus(DimensionStorageResultStatus::InvalidPrimaryStructure);
                this.getDimensionStorageResult().parmInvalidPrimaryStructureName(budgetAccountContract.parmAccountStructure());
            }
        }
        else
        {
            this.getDimensionStorageResult().parmStatus(DimensionStorageResultStatus::InvalidContract);
        }

        return this.getDimensionStorageResult().isValid();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>