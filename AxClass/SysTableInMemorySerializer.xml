<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SysTableInMemorySerializer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SysTableInMemorySerializer</c> class is used to serialize and deserialize
/// in-memory tables.
/// </summary>
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
class SysTableInMemorySerializer
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>packTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serializes an in-memory table to a container.
    /// </summary>
    /// <param name="_buffer">
    /// A cursor into the in-memory table to be serialized.
    /// </param>
    /// <returns>
    /// A container containing the serialized table in form:
    ///     [
    ///         tableId,
    ///         packed list of records
    ///     ]
    /// </returns>
    /// <remarks>
    /// Use <c>unpackTable</c> method to deserialize the table.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Thrown when serializing table that is not an in-memory table.
    /// </exception>
    public static container packTable(Common _buffer)
    {
        Common  tmpBuffer;
        List    packedRecords = new List(Types::Container);

        if (!_buffer.isTmp())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        tmpBuffer = _buffer;
        tmpBuffer.setTmpData(_buffer);
        while select tmpBuffer
        {
            packedRecords.addEnd(buf2Con(tmpBuffer));
        }

        return [_buffer.TableId, packedRecords.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks the in-memory table packed with <c>packTable</c>.
    /// </summary>
    /// <param name="_packedTable">
    /// A container containing the serialiazed table.
    /// </param>
    /// <param name="_targetBuffer">
    /// A cursor into the target buffer.
    /// </param>
    /// <remarks>
    /// Use <c>packTable</c> to serialize the table.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Thrown when <paramref name="_targetBuffer"/> is not an in-memory table.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Thrown when the serialized table is not the same type as <paramref name="_targetBuffer"/>.
    /// </exception>
    public static void unpackTable(container _packedTable, Common _targetBuffer)
    {
        TableId         packedTableId;
        container       packedRecordsList;
        ListEnumerator  le;

        if (!_targetBuffer.isTmp())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        [packedTableId, packedRecordsList] = _packedTable;
        if (packedTableId != _targetBuffer.TableId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        ttsbegin;

        delete_from _targetBuffer;

        le = List::create(packedRecordsList).getEnumerator();
        while (le.moveNext())
        {
            _targetBuffer.data(con2Buf(le.current()));
            _targetBuffer.doInsert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>