<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMJournalProtoTrans_CustVendDebt</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class CFMJournalProtoTrans_CustVendDebt extends CFMJournalProtoTrans
{
    CustVendTransOpen custVendTransOpen;
    CustVendTrans custVendTrans;
    CustVendTransOpenData custVendTransOpenData;
    CustVendPaymModeTable custVendPaymModeTable;
    ModuleCustVend moduleCustVend;
    CFMDirPartyTable cfmDirParty;
    CFMPaymentPriorityRecId defaultPaymentPriority;
    NoYes aggregatedRecords;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    protected CurrencyCode currencyCode()
    {
        return custVendTrans.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAfterSources</Name>
				<Source><![CDATA[
    protected void initAfterSources()
    {
        moduleCustVend = custVendTransOpen.CustVendTransOpen::getModule();

        PaymMode paymMode = this.parmUseUncommittedValues() ? uncommittedValues.PaymMode : custVendTrans.PaymMode;
        custVendPaymModeTable = CustVendPaymModeTable::findModule(moduleCustVend, paymMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSources</Name>
				<Source><![CDATA[
    protected void initSources(CFMJournalProtoTransParmContract _parmContract)
    {
        CFMJournalProtoTransParmContractCustVend parmContract = _parmContract as CFMJournalProtoTransParmContractCustVend;

        custVendTransOpen = parmContract.parmCustVendTransOpen();
        custVendTrans = parmContract.parmCustVendTrans();
        dirPartyMap = parmContract.parmDirPartyMap();
        cfmDirParty = parmContract.parmCFMDirParty();
        aggregatedRecords = parmContract.parmAggregatedRecords();

        if (aggregatedRecords == NoYes::No)
        {
            custVendTransOpenData = this.transOpenData();
        }

        if (this.parmUseUncommittedValues())
        {
            uncommittedValues   = parmContract.parmDataEditUncommitted();
        }

        this.initAfterSources();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimension</Name>
				<Source><![CDATA[
    protected CFMLedgerDimension ledgerDimension()
    {
        return custVendTrans.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        defaultPaymentPriority = CFMPaymentPriority::getPaymentPriorityDefault();
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentAccountNum</Name>
				<Source><![CDATA[
    protected CFMPaymentAccountNum paymentAccountNum()
    {
        if (this.parmUseUncommittedValues())
        {
            return uncommittedValues.PaymentAccountNum;
        }
        else if (custVendPaymModeTable && custVendPaymModeTable.paymACType() == LedgerJournalACType::RCash || custVendPaymModeTable.paymACType() == LedgerJournalACType::Bank)
        {
            return custVendPaymModeTable.parmPaymAccount();
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentAccountType</Name>
				<Source><![CDATA[
    protected CFMPaymentAccountType paymentAccountType()
    {
        if (this.parmUseUncommittedValues())
        {
            return uncommittedValues.PaymentAccountType;
        }
        else if (custVendPaymModeTable && custVendPaymModeTable.paymACType() == LedgerJournalACType::RCash)
        {
            return CFMPaymentAccountType::Cash_RU;
        }

        return CFMPaymentAccountType::Bank;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentAmount</Name>
				<Source><![CDATA[
    protected CFMPaymentAmount paymentAmount()
    {
        if (aggregatedRecords == NoYes::No)
        {
            return custVendTransOpenData.remainAmountCashDisc(this.TransDate());
        }
        else
        {
            return custVendTransOpen.AmountCur;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentPriority</Name>
				<Source><![CDATA[
    protected CFMPaymentPriorityRecId paymentPriority()
    {
        return cfmDirParty.PaymentPriority ? cfmDirParty.PaymentPriority : defaultPaymentPriority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymMode</Name>
				<Source><![CDATA[
    protected PaymMode paymMode()
    {
        return this.parmUseUncommittedValues() ? uncommittedValues.PaymMode : custVendPaymModeTable.PaymMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDataArea</Name>
				<Source><![CDATA[
    protected SelectableDataArea sourceDataArea()
    {
        return custVendTransOpen.dataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    protected TransDate transDate()
    {
        return this.parmUseUncommittedValues() ? uncommittedValues.DueDate : custVendTransOpen.DueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transOpenData</Name>
				<Source><![CDATA[
    abstract protected CustVendTransOpenData transOpenData()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateParmContractType</Name>
				<Source><![CDATA[
    protected boolean validateParmContractType(CFMJournalProtoTransParmContract _parmContract)
    {
        return _parmContract is CFMJournalProtoTransParmContractCustVend;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>