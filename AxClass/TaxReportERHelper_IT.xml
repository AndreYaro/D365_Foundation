<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportERHelper_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxReportERHelper_IT
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTaxReportFormatMappingID</Name>
				<Source><![CDATA[
    public static ERFormatMappingID getTaxReportFormatMappingID(TaxAuthority _taxAuthority)
    {
        ERFormatMappingID taxReportFormatMappingID;

        if (TaxIntegrationUtils::isMultipleTaxIdEnabledForVATDeclarations())
        {
            TaxAuthorityAddress taxAuthorityAddress = TaxAuthorityAddress::find(_taxAuthority);
            taxReportFormatMappingID = EUSalesListReportingParameter::findByCountryRegionIdAndReport(
                taxAuthorityAddress.logisticsPostalAddress().CountryRegionId,
                ReportingParameterReportCallerName::VATDeclaration).ReportERFormatMappingId;
        }
        else
        {
            taxReportFormatMappingID = TaxParameters::find().TaxReportFormatMappingID_UK;
        }

        return taxReportFormatMappingID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isERReportShouldBeUsed</Name>
				<Source><![CDATA[
    public static boolean isERReportShouldBeUsed(TaxAuthority _taxAuthority)
    {
        TaxAuthorityAddress taxAuthorityAddress = TaxAuthorityAddress::find(_taxAuthority);
        ERFormatMappingID taxReportFormatMappingID = TaxReportERHelper_IT::getTaxReportFormatMappingID(_taxAuthority);

        return taxAuthorityAddress.TaxReportLayout == TaxReportLayout::Default
            && !taxAuthorityAddress.UseDefaultLayout
            && taxReportFormatMappingID
            && taxAuthorityAddress.isIT()
            && SAFTERHelper_W::isEqualOrChildSolution(
                str2Guid(TaxReportERHelper_IT::taxReportFormatSolutionGuidStr()),
                ERSolutionTable::find(ERFormatMappingTable::find(
                    taxReportFormatMappingID).Solution).GUID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxReportFormatSolutionGuidStr</Name>
				<Source><![CDATA[
    [Replaceable]
    public static str taxReportFormatSolutionGuidStr()
    {
        return '69E65E0E-A6D5-41A4-A8FA-6B451FD8E87F';
    }

]]></Source>
			</Method>
			<Method>
				<Name>separateTaxSummaryTaxBookId</Name>
				<Source><![CDATA[
    [Replaceable]
    public static TaxBookId separateTaxSummaryTaxBookId()
    {
        return 'TaxSummary';
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipUpdateTaxBookStatus</Name>
				<Source><![CDATA[
    internal static boolean skipUpdateTaxBookStatus(TaxBookStatus _taxBookStatus)
    {
        boolean ret = false;

        TaxReportERContext_IT taxReportERContext = TaxReportERContext_IT::current();
        if (taxReportERContext && taxReportERContext.parmTaxReportERContract_IT())
        {
            TaxBookId taxBookIdSkipUpdateNumberOfPages = taxReportERContext.parmTaxReportERContract_IT().parmTaxBookIdSkipUpdateNumberOfPages();
            if (taxBookIdSkipUpdateNumberOfPages)
            {
                ret = (taxBookIdSkipUpdateNumberOfPages == TaxReportERHelper_IT::separateTaxSummaryTaxBookId()
                        && _taxBookStatus.TaxBookStatusType == TaxBookStatusType::TaxSummary)
                    || (TaxBook::findByTaxBookId(taxBookIdSkipUpdateNumberOfPages).RecId == _taxBookStatus.TaxBook);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useCompetencePeriod</Name>
				<Source><![CDATA[
    internal static boolean useCompetencePeriod()
    {
        boolean ret = TaxParameters::reportUseVatDueDate_W();

        if (ret)
        {
            TaxReportERContext_IT taxReportERContext = TaxReportERContext_IT::current();
            if (taxReportERContext
                && taxReportERContext.parmTaxReportERContract_IT()
                && taxReportERContext.parmTaxReportERContract_IT().parmIsVariativePeriod())
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>switchTaxTransAmounts</Name>
				<Source><![CDATA[
    internal static void switchTaxTransAmounts(TaxTrans _taxTrans)
    {
        _taxTrans.TaxBaseAmount = _taxTrans.TaxBaseAmountCur;
        _taxTrans.TaxAmount = _taxTrans.TaxAmountCur;
        _taxTrans.TaxInCostPriceMST = _taxTrans.TaxInCostPriceCur;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>