<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdMultiStartUp</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProdMultiStartUp</c> class shows the user dialog box to start the production order.
/// </summary>
/// <remarks>
/// Several production orders can be selected in the user dialog box. Each production order will be
/// started by using the <c>ProdUpdStartUp</c> class.
/// </remarks>
class ProdMultiStartUp extends ProdMulti implements BatchRetryable
{
    ProdParmStartUp         standardParmStartUp;
    private Set             referenceOrders = new Set(Types::Int64);

    #DEFINE.CurrentVersion(9)
    #LOCALMACRO.CurrentList
        standardParmStartUp
    #ENDMACRO

    #LOCALMACRO.CurrentList6
        ParmId,
        dummy,
        standardParmStartUp.EndPicklist,
        standardParmStartUp.EndRouteCard,
        standardParmStartUp.PostNowBOM,
        standardParmStartUp.DrawNegative,
        standardParmStartUp.ReducePhysical,
        standardParmStartUp.BOMAutoConsump,
        standardParmStartUp.RouteAutoConsump,
        standardParmStartUp.RouteJournalNameId,
        standardParmStartUp.BOMJournalNameId,
        standardParmStartUp.References
    #ENDMACRO
    #LOCALMACRO.CurrentList7
        ParmId,
        dummy,
        standardParmStartUp.EndPicklist,
        standardParmStartUp.EndRouteCard,
        standardParmStartUp.PostNowBOM,
        standardParmStartUp.DrawNegative,
        standardParmStartUp.ReducePhysical,
        standardParmStartUp.BOMAutoConsump,
        standardParmStartUp.RouteAutoConsump,
        standardParmStartUp.RouteJournalNameId,
        standardParmStartUp.BOMJournalNameId,
        standardParmStartUp.References,
        standardParmStartUp.PostNowRoute,
        standardParmStartUp.PrintPickList,
        standardParmStartUp.SetupPrintPickList
    #ENDMACRO

    #LOCALMACRO.CurrentList8
        standardParmStartUp
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Decides whether the class is shown in the list of batch journal types.
    /// </summary>
    /// <returns>
    ///    true if the class is set to be shown in the list of batch journal types; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A class that can be used in a batch journal is a class for which the same parameters can repeatedly
    ///    be used. Of course, the dialog box can be shown and the parameters can be changed, but parameters
    ///    of some classes might build on data that is only valid for a short time. Running a class two times
    ///    with the same parameters is not always possible. If <see cref="M:RunBaseBatch.canGoBatch" />
    ///    returns a value of false, this method will have no effect.
    /// </remarks>
    boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBuffer</Name>
				<Source><![CDATA[
    boolean checkBuffer(Common _prodTable)
    {
        ProdTable prodTable = _prodTable as ProdTable;
        Common anyBuffer;

        return !ProdParmStartUp::exist(parmId,prodTable.ProdId) && prodTable.status().runStartUp(anyBuffer,true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables you to perform any clean up that you want to after a dialog box has been canceled.
    /// </summary>
    /// <remarks>
    ///    Override this method if any clean-up is necessary after a dialog box has been canceled.
    /// </remarks>
    void cleanupDialog()
    {
        super();

        ProdParmStartUp::deleteParameters(this.parmId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultParmBuffer</Name>
				<Source><![CDATA[
    ParmBuffer defaultParmBuffer()
    {
        ProdParmStartUp prodParm;

        return prodParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the name of the form that is provided with a user interface for specifying parameters for
    ///    update of production.
    /// </summary>
    /// <returns>
    ///    The name of the form.
    /// </returns>
    formName formName()
    {
        return  formstr(ProdParmStartUp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmBuffer</Name>
				<Source><![CDATA[
    void initParmBuffer(ParmBuffer     _prodParmStartUp)
    {
        ProdParmStartUp prodParmStartUp = _prodParmStartUp;
        ProdParmStartUp saveProdParmStartUp;
        saveProdParmStartUp.data(prodParmStartUp);
        prodParmStartUp.data(standardParmStartUp);

        prodParmStartUp.ParmId              = saveProdParmStartUp.ParmId;
        prodParmStartUp.RecId               = saveProdParmStartUp.RecId;
        prodParmStartUp.LineNum             = saveProdParmStartUp.LineNum;
        prodParmStartUp.ProdId              = saveProdParmStartUp.ProdId;
        prodParmStartUp.JobStatus           = saveProdParmStartUp.JobStatus;
        prodParmStartUp.ExecutedDateTime    = saveProdParmStartUp.ExecutedDateTime;

        prodParmStartUp.StartUpQty          = saveProdParmStartUp.StartUpQty;
        prodParmStartUp.FromOprNum          = saveProdParmStartUp.FromOprNum;
        prodParmStartUp.ToOprNum            = saveProdParmStartUp.ToOprNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    void insert(Common  _common, ParmBuffer _prodParmStartUp)
    {
        ProdTable   prodTable;
        ProdBOM     prodBOM;
        ProdRoute   prodRoute;
        ProdParmStartUp prodParmStartUp = _prodParmStartUp;

        switch (_common.TableId)
        {
            case tablenum(ProdTable):
                prodTable                   = _common;
                break;
            case tablenum(ProdBOM):
                prodBOM                     = _common;
                prodTable = ProdTable::find(prodBOM.ProdId);
                break;
            case tablenum(ProdRoute):
                prodRoute                   = _common;
                prodTable = ProdTable::find(prodRoute.ProdId);
                break;
            default:
                break;
        }

        if (usedInitParmDefault)
        {
            standardParmStartUp.initFromProdParametersDim(prodTable.prodParametersDim());
            usedInitParmDefault = false;
        }

        super(_common, prodParmStartUp);

        switch (_common.TableId)
        {
            case tablenum(ProdTable):
                prodParmStartUp.ProdId      = prodTable.ProdId;
                prodParmStartUp.StartUpQty  = ProdUpdStartUp::proposalStartUpQty(prodTable.ProdId);
                prodParmStartUp.PdsCWStartupQty =
                    ProdUpdStartUp::pdsCWProposalStartupQty(prodTable.ProdId);
                break;

            case tablenum(ProdBOM):
                prodParmStartUp.ProdId      = prodTable.ProdId;
                prodParmStartUp.StartUpQty  = ProdUpdStartUp::proposalStartUpQty(prodTable.ProdId);

                prodParmStartUp.FromOprNum  = prodBOM.prodRoute().OprNum;
                prodParmStartUp.ToOprNum    = prodParmStartUp.FromOprNum;
                break;

            case tablenum(ProdRoute):
                prodParmStartUp.ProdId      = prodTable.ProdId;
                prodParmStartUp.StartUpQty  = ProdUpdStartUp::proposalStartUpQty(prodTable.ProdId);
                prodParmStartUp.PdsCWStartupQty =
                    ProdUpdStartUp::pdsCWProposalStartupQty(prodTable.ProdId);

                prodParmStartUp.FromOprNum  = prodRoute.OprNum;
                prodParmStartUp.ToOprNum    = prodParmStartUp.FromOprNum;
                break;

            default:
                break;
        }

        prodParmStartUp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    LineNum lastLineNum()
    {
        return ProdParmStartUp::lastLineNum(parmId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Serializes the current instance of the <c>ProdMultiStartUp</c> class.
    /// </summary>
    /// <returns>
    ///    A container that contains the current instance of the <c>ProdMultiStartUp</c> class.
    /// </returns>
    /// <remarks>
    ///    All variables that are required to re-instantiate the class after constructing it must be packed.
    ///    Typically, a macro that is declared in the class declaration is used to list the variables to pack.
    ///    Another macro holds a version number, which refers to the version of variable list. When a new
    ///    variable is introduced, follow these steps:
    ///    <list type="number">
    ///       <item>
    ///          <description>Increment the version number in the version macro.</description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Copy the current list to the <c>unpack</c> method.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>Add the new variable to the bottom of the list.</description>
    ///       </item>
    ///       <item>
    ///          <description>Recompile the class.</description>
    ///       </item>
    ///    </list>
    ///     When the
    ///    <c>
    ///       isSwappingPrompt
    ///    </c>
    ///     method returns true, you may have to pack some prompt-related variables.
    /// </remarks>
    container pack()
    {
        return [#CurrentVersion,#CurrentList,super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStandardParm</Name>
				<Source><![CDATA[
    ParmBuffer parmStandardParm(ParmBuffer _standard = standardParmStartUp)
    {
        standardParmStartUp = _standard;

        return standardParmStartUp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    Query query()
    {
        return new QueryRun(querystr(ProdMultiSelectStartUp)).query();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        using (var m = ProdInstrumentationSegmentFactory::create(ProdInstrumentationActivities::MultiStartUp))
        {
            #OCCRetryCount

            super();

            ProdMultiPurchLateSubmissionToWorkflow subcontractingHelper = ProdMultiPurchLateSubmissionToWorkflow::construct();
            subcontractingHelper.setLateSubmissionOfPurchaseOrdersToWorkflow(this.setProduction());

            ProdPurch prodPurch = ProdPurch::newProd();
            ProdParmStartUp prodParmStartUp = this.setProduction();

            while (prodParmStartUp)
            {
                try
                {
                    this.startProductionOrder(prodParmStartUp, prodPurch);
                }
                catch (Exception::Deadlock)
                {
                    retry;
                }
                catch (Exception::UpdateConflict)
                {
                    if (appl.ttsLevel() == 0)
                    {
                        if (xSession::currentRetryCount() >= #RetryNum)
                        {
                            throw Exception::UpdateConflictNotRecovered;
                        }
                        else
                        {
                            retry;
                        }
                    }
                    else
                    {
                        throw Exception::UpdateConflict;
                    }
                }
                catch (Exception::Error)
                {
                    exceptionTextFallThrough();
                }
                next prodParmStartUp;
            }

            subcontractingHelper.performLateSubmissionOfPurchaseOrdersToWorkflow();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>startProductionOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts a single production order.
    /// </summary>
    /// <param name = "_prodParmStartUp">Production order start parameters.</param>
    /// <param name = "_prodPurch">A linked purchase order creation helper.</param>
    [Replaceable]
    protected void startProductionOrder(ProdParmStartUp _prodParmStartUp, ProdPurch _prodPurch)
    {
        // Only run when the Prod Order is not Stopped.
        if (WHSProdTable::find(_prodParmStartUp.ProdId).Stopped)
        {
            error(strFmt("@WAX1701", _prodParmStartUp.ProdId));
        }
        else
        {
            ProdTable prodTable = this.initProdTable(_prodParmStartUp.ProdId);
            if (ProdMultiStartUpReferenceFlight::instance().isEnabled() && _prodParmStartUp.References == NoYes::Yes)
            {
                this.startProdTableReference(prodTable, _prodParmStartUp, _prodPurch);
            }
            else if (!(this.updatedRecs && this.updatedRecs.exists(prodTable.Recid)) || (_prodParmStartUp.References == NoYes::No))
            {
                prodTable.status().runStartUp(_prodParmStartUp, false, _prodPurch, this);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container _packedClass)
    {
        boolean     ret;
        Integer     version     = conpeek(_packedClass,1);
        container   base;
        boolean     dummy;

        switch (version)
        {
            case #currentVersion:
                [version,#CurrentList,base] = _packedClass;
                standardParmStartUp.PostDate            = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                ret = super(base);
                break;
            case 6:
                [version,#CurrentList6] = _packedClass;
                ret = true;
                break;
            case 7:
                [version,#CurrentList7] = _packedClass;
                ret = true;
                break;
            case 8:
                [version,#CurrentList8] = _packedClass;
            default:
                this.initParmDefault();
                ret = true;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static ProdMultiStartUp construct(Args _args)
    {
        ProdMultiStartUp prodMultiStartUp = new ProdMultiStartUp();
        return prodMultiStartUp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS4398" + ' - ' + "@SYS12531";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if (_args.parmEnum() == RunChoose::Run)
        {
            ProdMultiStartUp prodMultiStartUp = ProdMultiStartUp::construct(_args);
            RunBaseMultiParm::initFromForm(prodMultiStartUp,_args);

            if (! prodMultiStartUp.prompt())
            {
                return;
            }

            using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextByFormAndAction(prodMultiStartUp.formName(), _args.menuItemName()))
            {
                prodMultiStartUp.runOnServer();
            }

            if (_args && _args.caller())
            {
                prodMultiStartUp.refreshOrRereadCaller(_args);
            }
        }
        else
        {
            RunBaseMultiParm::runSpecial(_args);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startProdTableReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a referenced production order has already been started, if not, we start the order based on the current <c>ProdParmStartUp</c> record.
    /// </summary>
    /// <param name = "_prodTable">The <c>ProdTable</c> record.</param>
    /// <param name = "_prodParmStartUp">Production order start parameters.</param>
    /// <param name = "_prodPurch">A linked purchase order creation helper.</param>
    [Hookable(false)]
    internal void startProdTableReference(ProdTable _prodTable, ProdParmStartUp _prodParmStartup, ProdPurch _prodPurch)
    {
        ProdTable prodTableRef = _prodTable.referenceProdSearch(_prodTable.CollectRefLevel+1);
        Set diffReferenceOrders = new Set(Types::Int64);

        while (prodTableRef)
        {
            if (!referenceOrders.in(prodTableRef.RecId))
            {
                referenceOrders.add(prodTableRef.RecId);
            }
            next prodTableRef;
        }
            
        if (this.updatedRecs && referenceOrders)
        {
            diffReferenceOrders = Set::difference(referenceOrders, this.updatedRecs.keySet());
        }

        if (diffReferenceOrders.elements() || !this.updatedRecs || (this.updatedRecs && !referenceOrders.elements()))
        {
            _prodTable.status().runStartUp(_prodParmStartUp, false, _prodPurch, this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReferenceOrdersProcessed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if referenced production order has already been processed.
    /// </summary>
    /// <param name = "_referenceOrders"> A set of RecIds associated with referenced production order. </param>
    /// <returns>true if order has been processed; otherwise false. </returns>
    private boolean isReferenceOrdersProcessed(Set _referenceOrders)
    {
        return (this.updatedRecs && Set::intersection(_referenceOrders, this.updatedRecs.keySet()).elements() != 0);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>