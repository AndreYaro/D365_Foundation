<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>UniqueCertificationCreateVendDetail_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class contains the logic of vendor list details population for Unique certification report.
/// </summary>
public class UniqueCertificationCreateVendDetail_IT extends RunBase
{
    public UniqueCertificationVendorList_IT vendorList;
    public boolean fetchAllVendor;
    public ATECOFINCode_IT atecofin;
    public boolean skipAddresses;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmSkipAddresses</Name>
				<Source><![CDATA[
    // <summary>
    /// Gets or sets the value of the <c>skipAddresses</c> variable.
    /// </summary>
    /// <param name = "_skipAddresses">
    /// The new value of the <c>skipAddresses</c> variable; optional.
    /// </param>
    /// <returns>
    /// The current value of the <c>skipAddresses</c> variable.
    /// </returns>
    public boolean parmSkipAddresses(boolean _skipAddresses = skipAddresses)
    {
        skipAddresses = _skipAddresses;
        return skipAddresses;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchAllVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts vendor details and withhold tax records that are related to the assigned vendor list.
    /// </summary>
    public void fetchAllVendor()
    {
        UniqueCertificationVendorList_IT localVendorList;

        while select localVendorList
            where localVendorList.RefRecId == this.parmVendorList().RefRecId
        {
            this.fetchSingleVendor(localVendorList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchSingleVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts vendor details and withhold tax records that are needed for Unique Certification.
    /// </summary>
    /// <param name = "_vendorList">The current <c>UniqueCertificationVendorList_IT</c> record.</param>
    public void fetchSingleVendor(UniqueCertificationVendorList_IT _vendorList)
    {
        UniqueCertificationExtraction_IT extraction = this.parmVendorList().uniqueCertificationHeader().uniqueCertificationExtraction();
        UniqueCertificationVendorDetail_IT vendorDetail;

        vendorDetail.clear();
        vendorDetail.initValue();
        vendorDetail.initFromExtraction(extraction);
        vendorDetail.initFromCompanyInfo();
        vendorDetail.initFromVendor(_vendorList.VendAccount);
        vendorDetail.initFromVendorList(_vendorList);
        vendorDetail.SubstituteATECOFINCode_IT = atecofin;

        if (skipAddresses)
        {
            vendorDetail.VendorAddressCountyIdActualYear = '';
            vendorDetail.VendorResidenceAddressCityActualYear = '';
            vendorDetail.VendorAddressCountyIdNextYear = '';
            vendorDetail.VendorResidenceAddressCityNextYear = '';
        }

        vendorDetail.insert();

        this.fetchTaxWitholdTrans(_vendorList, vendorDetail);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchTaxWitholdTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts withhold tax records for Unique Certification.
    /// </summary>
    /// <param name = "_vendorList"><c>UniqueCertificationVendorList_IT</c> record.</param>
    /// <param name = "_vendorDetail"><c>UniqueCertificationVendorDetail_IT</c> record.</param>
    public void fetchTaxWitholdTrans(UniqueCertificationVendorList_IT _vendorList, UniqueCertificationVendorDetail_IT _vendorDetail)
    {
        TaxWithholdTrans taxWithholdTrans;
        UniqueCertificationHeader_IT uniqueCertificationHeader =_vendorList.uniqueCertificationHeader();
        Yr yr = uniqueCertificationHeader.uniqueCertificationExtraction().Year;
        Fromdate fromDate = Mkdate(01, 01, yr);
        ToDate toDate = Mkdate(31, 12, yr);
        UniqueCertificationTaxWithhold_IT certificationTaxWithhold;
        TaxWithholdtable taxWithholdtable = TaxWithholdtable::find(_vendorList.TaxWithholdCode);

        while select
            sum(TaxReimbursement_IT),
            sum(InvoiceExemptedAmount),
            sum(InvoiceNotTaxableExpenses),
            sum(TaxExemptedAmount),
            sum(TaxNotTaxableByTreaty),
            sum(TaxNotTaxableExpenses),
            sum(TaxTaxWithholdAmount),
            sum(TaxWithholdBaseAmount),
            sum(InvoiceAmount),
            sum(InvoiceTaxAmount)
        from taxWithholdTrans
            where taxWithholdTrans.TransDate >= fromDate
                && taxWithholdTrans.TransDate <= toDate
                && taxWithholdTrans.VendAccount == _vendorList.VendAccount
                && taxWithholdTrans.TaxWithholdCode == _vendorList.TaxWithholdCode
                && taxWithholdTrans.Posted == NoYes::Yes
                && !taxWithholdTrans.HideInReport_IT
        {
            certificationTaxWithhold.clear();
            certificationTaxWithhold.initValue();
            certificationTaxWithhold.RefRecId = _vendorDetail.RecId;
            certificationTaxWithhold.initFromTaxWithholdTrans(taxWithholdTrans,taxWithholdtable);
            certificationTaxWithhold.initfromTaxWithholdTable(taxWithholdtable);
            certificationTaxWithhold.initFromVendorList(_vendorList);
            certificationTaxWithhold.initFromHeader(uniqueCertificationHeader);
            certificationTaxWithhold.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets ATECOFIN code.
    /// </summary>
    public void initialize()
    {
        TaxBook taxBook;

        select firstonly ATECOFINCode_IT from taxbook
            where taxbook.ATECOFINCode_IT != '';

        atecofin = stralpha(taxbook.ATECOFINCode_IT);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        fetchAllVendor = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFetchAllVendor</Name>
				<Source><![CDATA[
    public boolean parmFetchAllVendor(boolean _fetchAllVendor = fetchAllVendor)
    {
        fetchAllVendor = _fetchAllVendor;
        return fetchAllVendor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendorList</Name>
				<Source><![CDATA[
    public UniqueCertificationVendorList_IT parmVendorList(UniqueCertificationVendorList_IT _vendorList = vendorList)
    {
        vendorList = _vendorList;
        return vendorList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preFetchValidate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if ATECOFIN code was set.
    /// </summary>
    /// <returns>true if ATECOFIN code was assigned; false otherwise.</returns>
    public boolean preFetchValidate()
    {
        boolean ret = true;

        if (!atecofin)
        {
            ret = checkFailed("@ExtendedItallianLocalization:RevenueTypology");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts vendor details and withhold tax records that are related to the assigned vendor list.
    /// </summary>
    /// <exception>Throws exception if validation fails.</exception>
    public void run()
    {
        ttsBegin;

        this.initialize();

        if (!this.preFetchValidate())
        {
            throw error("@ExtendedItallianLocalization:Anticipation");
        }

        if (fetchAllVendor)
        {
            this.fetchAllVendor();
        }
        else
        {
            this.fetchSingleVendor(this.parmVendorList());
        }

        info("@ExtendedItallianLocalization:ExtractionCompleted");

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static UniqueCertificationCreateVendDetail_IT construct()
    {
        return new UniqueCertificationCreateVendDetail_IT();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        UniqueCertificationCreateVendDetail_IT vendDetail = UniqueCertificationCreateVendDetail_IT::construct();

        if (_args && _args.record().TableId == tablenum(UniqueCertificationVendorList_IT))
        {
            vendDetail.parmVendorList(_args.record());
        }
        else
        {
            throw error("@SYS80663");
        }

        vendDetail.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>