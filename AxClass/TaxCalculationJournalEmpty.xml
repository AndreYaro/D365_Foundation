<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxCalculationJournalEmpty</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Empty tax calculation journal used for core tax calculation journal when GTE is enabled
/// </summary>
class TaxCalculationJournalEmpty extends TaxCalculationJournal
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowAdjustBaseAmountForTaxAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Determines whether the transaction supports adjusting the calculated base amount
    ///   when tax is included in item price and the users adjusts the tax amount.
    /// </summary>
    /// <returns>
    ///   true if adjusting the calculated base amount is supported; otherwise, false.
    /// </returns>
    public boolean allowAdjustBaseAmountForTaxAdjustment()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowSingleLineAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the transaction supports adjusting a single tax line.
    /// </summary>
    /// <returns>
    ///    true if adjusting a single line is supported; otherwise, false.
    /// </returns>
    public boolean allowSingleLineAdjustment()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateLineSpecificTaxCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the taxes for an individual line. This function does not calculate codes that are
    /// considered based on invoice total, tax on tax, and others It calculates only tax codes that are
    /// line specific.
    /// </summary>
    /// <returns>
    /// The tax amount calculated for this line for all codes which are not based on invoice total.
    /// </returns>
    protected TaxAmount calculateLineSpecificTaxCodes()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates taxes total taxes excluding use taxes. This is the base calculate taxes method derived
    ///    classes are required to implement.
    /// </summary>
    /// <returns>
    ///    The tax amount excluding the use tax.
    /// </returns>
    public TaxAmountCur calculateTax()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTaxDifferenceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates tax difference amount in accounting currency by the difference between accounting exchange rate and tax exchange rate.
    /// </summary>
    protected void calculateTaxDifferenceAmount()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTaxForLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates taxes for a transaction line.
    /// </summary>
    /// <returns>
    /// The tax amount, excluding the use tax for the transaction line.
    /// </returns>
    protected TaxAmount calculateTaxForLine()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalTaxCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the taxes that are based on the invoice total.
    /// </summary>
    /// <returns>
    /// The total tax amount calculated to this point.
    /// </returns>
    /// <remarks>
    /// This method does not calculate codes that are considered line-specific.
    /// </remarks>
    protected TaxAmountCur calculateTotalTaxCodes()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>capitalGoodsAmount_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns invoiceAmount to post for Vat transactions with capitalGoodsAmount
    /// </summary>
    /// <returns>invoice Amount</returns>
    public Amount capitalGoodsAmount_IN()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIntersection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the default implementation of an error condition that occurs when the tax groups are
    /// intersected.
    /// </summary>
    /// <param name="_found">
    /// A Boolean value that indicates whether tax codes that match were found in both the tax group and
    /// the item tax group.
    /// </param>
    /// <param name="_taxGroup">
    /// The tax group from the transaction line.
    /// </param>
    /// <param name="_taxItemGroup">
    /// The item tax group from the transaction line.
    /// </param>
    /// <returns>
    /// true if this is a supported tax scenario; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Subclasses may provide transaction-specific implementations of this method.
    /// </remarks>
    protected boolean checkIntersection(boolean _found, TaxGroup _taxGroup, TaxItemGroup _taxItemGroup)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureTaxForLine</Name>
				<Source><![CDATA[
    protected void configureTaxForLine(TaxableLine _taxableLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalizeCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finalizes tax calculations by processing tax adjustments and optionally inserting records into the
    ///    <c>TaxUncommitted</c> and <c>SourceDoucmentLine</c> tables.
    /// </summary>
    /// <param name="_calculateTaxDifferenceAmount">
    ///    true if tax difference amount need to be calculated; optional.
    /// </param>
    /// <param name="_doIsolateTransactionScope">
    /// true if <c>TaxUncommitted</c> should be maintained in a independent transaction scope; otherwise false.
    /// </param>
    /// <returns>
    ///    The final tax total amount.
    /// </returns>
    protected TaxAmountCur finalizeCalculation(
        boolean _calculateTaxDifferenceAmount = true,
        boolean _doIsolateTransactionScope = false)

    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaintainExistingTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>maintainExistingTaxUncommitted</c> value that indicates whether new records will
    ///    be added to the <c>TaxUncommitted</c> table.
    /// </summary>
    /// <returns>
    ///    true if newly calculated tax lines will be added to the <c>TaxUncommitted</c> table; otherwise,
    ///    false.
    /// </returns>
    public boolean getMaintainExistingTaxUncommitted()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInstance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the instatce of the <c>TaxCalculationEmpty</c> object.
    /// </summary>
    /// <param name="_initializationClass">
    ///    The initialization class for the given transaction.
    /// </param>
    /// <returns>
    ///    The TaxCalculationEmpty.
    /// </returns>
    public static TaxCalculationEmpty getInstance(Object _initializationClass)
    {
        return new TaxCalculationEmpty(_initializationClass, false, false, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxTransactionExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize default tax exchange rate
    /// </summary>
    protected void initTaxTransactionExchangeRate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTaxForLine</Name>
				<Source><![CDATA[
    protected TaxAmountCur initializeTaxForLine(boolean _amountInclTax, TaxBase _baseAmount, TaxBase _baseAmountIncludingTax, DimensionDefault _dimensionDefault, LedgerDimensionAccount _operationLedgerDimension, LedgerPostingType _ledgerPostingType, TaxBase _unitAmount = 0, ItemId _itemId = '', Qty _quantity = 0, UnitOfMeasureSymbol _baseUnit = '', ExchRate _exchRate_W = 0, VatDueDate_W _vatDueDate_W = dateNull())
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntersection</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method calls base implementation of the method and updates tax transactions for Tax agent.
    /// </summary>
    /// <param name="_taxGroup">
    /// Tax group.
    /// </param>
    /// <param name="_taxItemGroup">
    /// Tax item group.
    /// </param>
    /// <param name="_inventTransId">
    /// Inventory trans identificator.
    /// </param>
    /// <param name="_txt">
    /// Text of transaction.
    /// </param>
    /// <param name="_taxCalculationDate">
    /// Calculation date.
    /// </param>
    /// <param name="_invoiceId">
    /// Invoice identification.
    /// </param>
    /// <param name="_gsthstTaxType_CA">
    /// GST/HST tax type.
    /// </param>

    protected void insertIntersection(TaxGroup               _taxGroup,
                                      TaxItemGroup           _taxItemGroup,
                                      InventTransId          _inventTransId,
                                      TransactionTextlarge   _txt,
                                      TransDate              _taxCalculationDate,
                                      InvoiceId              _invoiceId        = '',
                                      GSTHSTTaxType_CA       _gsthstTaxType_CA = GSTHSTTaxType_CA::None)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventProfileTaxTrans_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies whether tax transactions should be created.
    /// </summary>
    /// <returns>
    /// True is tax transactions should be created; otherwise false.
    /// </returns>
    protected boolean inventProfileTaxTrans_RU()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadFromTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads tax records from the <c>TaxUncommitted</c> table into the <c>TmpTaxWorkTrans</c> table.
    /// </summary>
    protected void loadFromTaxUncommitted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPerLineTaxAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads tax adjustments that are adjusting taxes for a specific line.
    /// </summary>
    /// <param name="_companyId">
    ///    A value that specifies whether a tax adjustment can be located in another company. If they can, the
    ///    current company and passed in company will be checked for adjustments.
    /// </param>
    /// <param name="_sourceTableId">
    ///    The table ID of the transaction line.
    /// </param>
    /// <param name="_sourceRecId">
    ///    The record ID of the transaction line.
    /// </param>
    /// <param name="_headingSourceTableId">
    ///    The table ID of the heading transaction line.
    /// </param>
    /// <param name="_headingSourceRecId">
    ///    The record ID of the heading transaction line.
    /// </param>
    protected void loadPerLineTaxAdjustments(
        SelectableDataArea  _companyId,
        RefTableId          _sourceTableId,
        RefRecId            _sourceRecId
        ,RefTableId         _headingSourceTableId = 0
        ,RefRecId           _headingSourceRecId = 0
        )
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadTaxAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads tax adjustments that are adjusting the taxes for a transaction.
    /// </summary>
    protected void loadTaxAdjustments()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAmountCurCrVat_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns invoiceAmount to post for Vat capitalGoodsAmount transactions for jounals
    /// </summary>
    /// <param name="_amountCurCrVat">invoice amount for VAT capital goods transactions</param>
    /// <returns>invoice amount</returns>
    public AmountCur parmAmountCurCrVat_IN(AmountCur _amountCurCrVat = amountCurCrVat)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInclTax_IN</Name>
				<Source><![CDATA[
    public boolean parmInclTax_IN(boolean _inclTax = inclTax)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResetExemptTax_RU</Name>
				<Source><![CDATA[
    public boolean parmResetExemptTax_RU(boolean _value = resetExemptTax_RU)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveTaxTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a <c>TmpTaxWorkTrans</c> record that represents a tax transfer.
    /// </summary>
    /// <param name="_taxableLine">
    ///    The transaction line that represents this tax transfer.
    /// </param>
    /// <returns>
    ///    The tax amount for this tax transfer.
    /// </returns>
    protected TaxAmountCur saveTaxTransfer(TaxableLine _taxableLine)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Determines what the accounts should be for the <c>TmpTaxWorkTrans</c> record.
    /// </summary>
    /// <param name="_taxWorkTrans">
    ///    The <c>TmpTaxWorkTrans</c> table buffer.
    /// </param>
    /// <param name="_taxTable">
    ///    The <c>TaxTable</c> table buffer.
    /// </param>
    /// <param name="_dimensionDefault">
    ///    The default dimensions.
    /// </param>
    /// <param name="_operationLedgerDimension">
    ///    The default operation ledger dimension.
    /// </param>
    protected void setLedgerDimensions(TmpTaxWorkTrans _taxWorkTrans, TaxTable _taxTable, DimensionDefault _dimensionDefault, LedgerDimensionAccount _operationLedgerDimension)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipTaxCalculations</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determins if taxes need to be calculated.
    /// </summary>
    /// <returns>
    ///     Return False if the taxes need to be calculated for the source document; otherwise, return false.
    /// </returns>
    public boolean skipTaxCalculations()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVATTaxAgentFields_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates VAT tax agent related fields in tax Work Trans
    /// </summary>
    /// <param name="_line">
    /// <c>LedgerJournalTaxLine</c> object
    /// </param>
    /// <param name="setIncomingTaxDirection">
    /// Determines whether tax direction should be set to incoming tax
    /// </param>
    protected void updateVATTaxAgentFields_RU(LedgerJournalTaxLine _line, boolean setIncomingTaxDirection = false)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSalesTaxAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a Boolean value that indicates whether the current transaction being calculated supports
    /// sales tax adjustments.
    /// </summary>
    /// <returns>
    /// true if the current transaction supports sales tax adjustment; otherwise, false.
    /// </returns>
    /// <remarks>
    /// By default, the current transaction does not support sales tax adjustments.
    /// </remarks>
    public boolean useSalesTaxAdjustments()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSubLedgerJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the current transaction to calculate supports the <c>SubLedgerDistributions</c>
    ///    or <c>SubLedgerJournalLines</c> records. By default, this base implementation is that they do not
    ///    support them. As the individual transaction support the sub-ledger, they must override this method
    ///    and return true.
    /// </summary>
    /// <returns>
    ///    true if the current transaction to calculate supports the <c>SubLedgerDistributions</c> or
    ///    <c>SubLedgerJournalLines</c> records; otherwise, false.
    /// </returns>
    public boolean useSubLedgerJournalLines()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>Tax</c> class should use the <c>TaxUncommitted</c> table.
    /// </summary>
    /// <returns>
    ///    true if the <c>Tax</c> class should use the <c>TaxUncommitted</c> table; otherwise, false.
    /// </returns>
    public boolean useTaxUncommitted()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>emptyBaseForOutgoingTax_W</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Indicates, that tax base amount should not be calculated for inverted outgoing tax transactions
    ///   for reverse charge.
    /// </summary>
    /// <param name="_taxGroupData">
    ///   <c>TaxGroupData</c> record related to current tax calculation.
    /// </param>
    /// <returns>
    ///   True, if tax base must be ignored by UK VAT 100 report; Otherwise, false.
    /// </returns>
    protected NoYes emptyBaseForOutgoingTax_W(TaxGroupData _taxGroupData)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBaseAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the base amount.
    /// </summary>
    /// <param name = "ledgerJournalTrans">
    /// The buffer of <c>LedgerJournalTrans</c>.
    /// </param>
    /// <param name = "currencyExchangeHelper">
    /// The instance of <c>CurrencyExchangeHelper</c>.
    /// </param>
    protected void updateBaseAmount(LedgerJournalTrans      ledgerJournalTrans,
                                    CurrencyExchangeHelper  currencyExchangeHelper)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxWorkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>TmpTaxWorkTrans</c>.
    /// </summary>
    /// <param name = "_taxableLine">
    /// The transaction line that represents this tax transfer.
    /// </param>
    [Hookable(true)]
    protected void initTaxWorkTrans(TaxableLine _taxableLine)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>