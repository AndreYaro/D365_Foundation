<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerBalanceSheetDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerBalanceSheetDP</c> class is the data provider for the <c>LedgerBalanceSheet</c> SSRS report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(LedgerBalanceSheet)),
    SRSReportParameterAttribute(classStr(LedgerBalanceSheetContract))
]
class LedgerBalanceSheetDP extends SrsReportDataProviderPreProcessTempDB
{
    LedgerBalanceSheetTmp LedgerBalanceSheetTmp;

    // these are member variables so they can be accessed from 2 methods without being passed as parameters
    AmountMST currentGross[];
    AmountMST currentCorrection[];
    AmountMST previousGross[];
    AmountMST previousCorrection[];

    // the number of characters in the line number value is a report specific legal requirement
    #define.BalanceSheetLineNumberSize(3)

    #define.ZeroGross(0.0)
    #define.ZeroCorrection(0.0)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcCorrection</Name>
				<Source><![CDATA[
    private AmountMST calcCorrection(Map _mapCorrection, Map _mapCorrAccount, LedgerBalanceMainAccountRangeAmounts _amounts, LedgerReportLineNumber _line)
    {
        LedgerBalanceSheetHeader        header;
        LedgerBalanceSheetCorrection    correction;
        MainAccountNum                  mainAccountId;
        AmountMST                       ret;
        MapEnumerator                   enumerator = _mapCorrection.getEnumerator();

        select firstOnly RecId, LineType from header
            where header.Line == _line;

        while (enumerator.moveNext())
        {
            correction = enumerator.currentValue();
            if (correction.LedgerBalanceSheetHeader != header.RecId)
            {
                continue;
            }

            if (correction.LineReference)
            {
                ret += this.calcCorrection(_mapCorrection, _mapCorrAccount, _amounts, correction.LineReference);
            }
            else
            {
                if (_mapCorrAccount.exists(correction.RecId))
                {
                    mainAccountId = _mapCorrAccount.lookup(correction.RecId);
                }
                else
                {
                    mainAccountId = '';
                }

                ret += (correction.ReverseSign ? -1 : 1) * this.getBalance(_amounts, header.LineType, mainAccountId, correction.AccountsGroup);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcGross</Name>
				<Source><![CDATA[
    private AmountMST calcGross(Map _mapGross, Map _mapGrossAccount, LedgerBalanceMainAccountRangeAmounts _amounts, LedgerReportLineNumber _line)
    {
        LedgerBalanceSheetHeader header;
        LedgerBalanceSheetGross  gross;
        MainAccountNum           mainAccountId;
        AmountMST                ret;
        MapEnumerator            enumerator = _mapGross.getEnumerator();

        select firstOnly RecId, LineType from header
            where header.Line == _line;

        while (enumerator.moveNext())
        {
            gross = enumerator.currentValue();
            if (gross.LedgerBalanceSheetHeader != header.RecId)
            {
                continue;
            }

            if (gross.LineReference)
            {
                ret += this.calcGross(_mapGross, _mapGrossAccount, _amounts, gross.LineReference);
            }
            else
            {
                if (_mapGrossAccount.exists(gross.RecId))
                {
                    mainAccountId = _mapGrossAccount.lookup(gross.RecId);
                }
                else
                {
                    mainAccountId = '';
                }

                ret += (gross.ReverseSign ? -1 : 1) * this.getBalance(_amounts, header.LineType, mainAccountId, gross.AccountsGroup);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBalance</Name>
				<Source><![CDATA[
    private AmountMST getBalance(
        LedgerBalanceMainAccountRangeAmounts _mainAccountBalance,
        LedgerReportBalanceType _balanceType,
        MainAccountNum _mainAccountId,
        LedgerReportAccountsGroup _mainAccountRange)
    {
        AmountMST balance;

        if (_mainAccountBalance == null || (_mainAccountId == '' && _mainAccountRange == ''))
        {
            return 0.0;
        }

        if (_balanceType == LedgerReportBalanceType::Assets)
        {
            _mainAccountBalance.parmMainAccountTypes([DimensionLedgerAccountType::Asset, DimensionLedgerAccountType::BalanceSheet]);
        }
        else if (_balanceType == LedgerReportBalanceType::Liabilities)
        {
            _mainAccountBalance.parmMainAccountTypes([DimensionLedgerAccountType::BalanceSheet, DimensionLedgerAccountType::Liability, DimensionLedgerAccountType::Equity]);
        }
        else
        {
            Debug::assert(false); // unexpected value
        }

        if (_mainAccountId != '' && (_mainAccountRange == '' || !Global::strStartsWith(_mainAccountId, _mainAccountRange)))
        {
            _mainAccountBalance.calculateBalance(_mainAccountId);
             balance += _mainAccountBalance.getAccountingCurrencyBalance();
        }

        if (_mainAccountRange != '')
        {
            _mainAccountBalance.calculateBalance(_mainAccountRange + '*');
            balance += _mainAccountBalance.getAccountingCurrencyBalance();
        }

        return balance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerBalanceSheetTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the temporary table for the report data provider.
    /// </summary>
    /// <returns>
    ///     The temporary table for the report data provider.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(LedgerBalanceSheetTmp))]
    public LedgerBalanceSheetTmp getLedgerBalanceSheetTmp()
    {
        select ledgerBalanceSheetTmp;
        return ledgerBalanceSheetTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLedgerBalanceSheetTmp</Name>
				<Source><![CDATA[
    private void insertLedgerBalanceSheetTmp(
        LedgerBalanceSheetHeader _header,
        AmountMST _grossAmount,
        AmountMST _correctionAmount,
        AmountMST _currentPeriodAmount,
        AmountMST _lastPeriodAmount)
    {
        int i;

        ledgerBalanceSheetTmp.LineType = _header.LineType;
        ledgerBalanceSheetTmp.MarkValue = _header.Mark;
        ledgerBalanceSheetTmp.Text = _header.Txt;
        ledgerBalanceSheetTmp.Line = _header.Line;

        ledgerBalanceSheetTmp.LineNumber = int2str(_header.Line);
        for (i = strLen(ledgerBalanceSheetTmp.LineNumber); i < #BalanceSheetLineNumberSize; i++)
        {
            ledgerBalanceSheetTmp.LineNumber = '0' + ledgerBalanceSheetTmp.LineNumber;
        }

        ledgerBalanceSheetTmp.CurrentPeriodGrossAmount = _grossAmount;
        ledgerBalanceSheetTmp.CurrentPeriodCorrectionAmount = _correctionAmount;
        ledgerBalanceSheetTmp.CurrentPeriodAmount = _currentPeriodAmount;

        ledgerBalanceSheetTmp.LastPeriodAmount = _lastPeriodAmount;

        ledgerBalanceSheetTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpForAsset</Name>
				<Source><![CDATA[
    private void insertTmpForAsset(
        LedgerBalanceSheetHeader _header,
        AmountMST _grossAmount,
        AmountMST _correctionAmount,
        AmountMST _lastPeriodAmount)
    {
        this.insertLedgerBalanceSheetTmp(_header, _grossAmount, _correctionAmount, (_grossAmount - _correctionAmount), _lastPeriodAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpForLiability</Name>
				<Source><![CDATA[
    private void insertTmpForLiability(
        LedgerBalanceSheetHeader _header,
        AmountMST _currentPeriodAmount,
        AmountMST _lastPeriodAmount)
    {
        this.insertLedgerBalanceSheetTmp(_header, #ZeroGross, #ZeroCorrection, _currentPeriodAmount, _lastPeriodAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadAmounts</Name>
				<Source><![CDATA[
    private void loadAmounts(
        LedgerBalanceMainAccountRangeAmounts currentBalance,
        LedgerBalanceMainAccountRangeAmounts currentOpeningBalance,
        LedgerBalanceMainAccountRangeAmounts previousBalance,
        LedgerBalanceMainAccountRangeAmounts previousOpeningBalance)
    {
        LedgerBalanceSheetHeader header;
        LedgerBalanceSheetCorrection correction;
        LedgerBalanceSheetGross gross;
        MainAccount correctionMain;
        MainAccount grossMain;
        Query query;
        QueryRun run;
        AmountMST currentTemp;
        AmountMST previousTemp;
        MapEnumerator mapEnumerator;
        Map mapGrossAccount = new Map(Types::Int64, Types::String);
        Map mapCorrAccount  = new Map(Types::Int64, Types::String);
        Map mapHeader       = new Map(Types::Int64, Types::Record);
        Map mapGross        = new Map(Types::Int64, Types::Record);
        Map mapCorrection   = new Map(Types::Int64, Types::Record);

        query = this.parmQuery();

        run = new QueryRun(query);
        while (run.next())
        {
            header      = run.get(tableNum(LedgerBalanceSheetHeader)) as LedgerBalanceSheetHeader;
            gross       = run.get(tableNum(LedgerBalanceSheetGross)) as LedgerBalanceSheetGross;
            grossMain   = run.get(tableNum(MainAccount), 1) as MainAccount;

            mapHeader.insert(header.RecId, header);
            mapGross.insert(gross.RecId, gross);
            mapGrossAccount.insert(gross.RecId, grossMain.MainAccountId);

            if (header.LineType == LedgerReportBalanceType::Assets)
            {
                correction = run.get(tableNum(LedgerBalanceSheetCorrection)) as LedgerBalanceSheetCorrection;
                if (correction)
                {
                    mapCorrection.insert(correction.RecId, correction);

                    correctionMain = run.get(tableNum(MainAccount), 2) as MainAccount;
                    mapCorrAccount.insert(correction.RecId, correctionMain.MainAccountId);
                }
            }
        }

        mapEnumerator = mapHeader.getEnumerator();
        while (mapEnumerator.moveNext())
        {
            header = mapEnumerator.currentValue();

            currentTemp  = this.calcGross(mapGross, mapGrossAccount, currentOpeningBalance, header.Line) + this.calcGross(mapGross, mapGrossAccount, currentBalance, header.Line);
            previousTemp = this.calcGross(mapGross, mapGrossAccount, previousOpeningBalance, header.Line) + this.calcGross(mapGross, mapGrossAccount, previousBalance, header.Line);

            currentGross[header.Line] = currentTemp;
            previousGross[header.Line] = previousTemp;

            if (header.LineType == LedgerReportBalanceType::Assets)
            {
                currentTemp  = this.calcCorrection(mapCorrection, mapCorrAccount, currentOpeningBalance, header.Line) + this.calcCorrection(mapCorrection, mapCorrAccount, currentBalance, header.Line);
                previousTemp = this.calcCorrection(mapCorrection, mapCorrAccount, previousOpeningBalance, header.Line) + this.calcCorrection(mapCorrection, mapCorrAccount, previousBalance, header.Line);

                currentCorrection[header.Line] = currentTemp;
                previousCorrection[header.Line] = previousTemp;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        LedgerBalanceSheetHeader header;
        LedgerBalanceMainAccountRangeAmounts currentBalance;
        LedgerBalanceMainAccountRangeAmounts currentOpeningBalance;
        LedgerBalanceMainAccountRangeAmounts previousBalance;
        LedgerBalanceMainAccountRangeAmounts previousOpeningBalance;
        LedgerBalanceSheetContract contract;
        LedgerReportUnitOption unitOption;
        date fiscalPeriodStartDate;
        real unitFactor;
        real roundFactor;
        int decimalPlaces;

        contract = this.parmDataContract() as LedgerBalanceSheetContract;

        unitOption = contract.parmUnitOption();
        switch (unitOption)
        {
            case LedgerReportUnitOption::One:
                decimalPlaces = 0;
                unitFactor = 1;
                break;

            case LedgerReportUnitOption::Thousand:
                decimalPlaces = 0;
                unitFactor = 1000;
                break;

            default:
                // do nothing
                decimalPlaces = -1;
        }

        currentBalance = LedgerBalanceMainAccountRangeAmounts::construct();
        currentBalance.parmIncludeRegularPeriod(true);
        currentBalance.parmAccountingDateRange(contract.parmStartDate(), contract.parmEndDate());

        previousBalance = LedgerBalanceMainAccountRangeAmounts::construct();
        previousBalance.parmIncludeRegularPeriod(true);
        previousBalance.parmAccountingDateRange(prevYr(contract.parmStartDate()), endMth(prevYr(contract.parmEndDate())));

        if (contract.parmIncludeOpeningTransactions())
        {
            fiscalPeriodStartDate = LedgerFiscalCalendar::findOpeningPeriodStartDateByDate(Ledger::fiscalCalendar(CompanyInfo::current()), contract.parmStartDate());
            if (fiscalPeriodStartDate != dateNull())
            {
                currentOpeningBalance = LedgerBalanceMainAccountRangeAmounts::construct();
                currentOpeningBalance.parmIncludeOpeningPeriod(true);
                currentOpeningBalance.parmAccountingDateRange(fiscalPeriodStartDate, fiscalPeriodStartDate);
            }

            fiscalPeriodStartDate = LedgerFiscalCalendar::findOpeningPeriodStartDateByDate(Ledger::fiscalCalendar(CompanyInfo::current()), prevYr(contract.parmStartDate()));
            if (fiscalPeriodStartDate != dateNull())
            {
                previousOpeningBalance = LedgerBalanceMainAccountRangeAmounts::construct();
                previousOpeningBalance.parmIncludeOpeningPeriod(true);
                previousOpeningBalance.parmAccountingDateRange(fiscalPeriodStartDate, fiscalPeriodStartDate);
            }
        }

        this.loadAmounts(currentBalance, currentOpeningBalance, previousBalance, previousOpeningBalance);

        while select header
            order by header.Line asc
        {
            if (decimalPlaces != -1)
            {
                switch (header.RoundType)
                {
                    case RoundOffType::RoundDown:
                        roundFactor = -0.499999999999999 * unitFactor;
                        break;

                    case RoundOffType::RoundUp:
                        roundFactor = 0.499999999999999 * unitFactor;
                        break;

                    default:
                        roundFactor = 0;
                        break;
                }

                currentGross[header.Line] = decRound((currentGross[header.Line] + roundFactor) / unitFactor, decimalPlaces);
                currentCorrection[header.Line] = decRound((currentCorrection[header.Line] + roundFactor) / unitFactor, decimalPlaces);
                previousGross[header.Line] = decRound((previousGross[header.Line] + roundFactor) / unitFactor, decimalPlaces);
                previousCorrection[header.Line] = decRound((previousCorrection[header.Line] + roundFactor) / unitFactor, decimalPlaces);
            }

            if (header.LineType == LedgerReportBalanceType::Assets)
            {
                this.insertTmpForAsset(
                    header,
                    currentGross[header.Line],
                    currentCorrection[header.Line],
                    previousGross[header.Line] - previousCorrection[header.Line]);
            }
            else if (header.LineType == LedgerReportBalanceType::Liabilities)
            {
                this.insertTmpForLiability(
                    header,
                    currentGross[header.Line],
                    previousGross[header.Line] - previousCorrection[header.Line]);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>