<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustFreeInvoiceCorrectionPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustFreeInvoiceCorrectionPost
{
    CustInvoiceTable correctedCustInvoiceTable;
    CustInvoiceTable parentCustInvoiceTable;
    CustTrans parentCustTrans;

    Set parentSettlements;
    Map parentSettlementLines;
    AmountCur parentSettlementAmount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createAdjustingFacture_RU</Name>
				<Source><![CDATA[
    private void createAdjustingFacture_RU(CustInvoiceTable _adjustingInvoice)
    {
        FactureJourCreateCustFreeInvCor_RU factureJourCreate;
        FactureTransCreateCustFreeInvCor_RU factureTransCreate;
        CustInvoiceJour custInvoiceJour, custInvoiceJourAdj;
        CustInvoiceJour_RU custInvoiceJour_RU;
        CustInvoiceTrans custInvoiceTrans, custInvoiceTransAdj;
        CustInvoiceTrans_RU custInvoiceTrans_RU, custInvoiceTransAdj_RU;
        CustInvoiceTrans_W custInvoiceTrans_W;
        FactureTrans_RU factureTransSrc;
        FactureJour_RU factureJourSrc;
        Map factureJourMap = new Map(Types::Int64, Types::Class);

        ttsbegin;

        _adjustingInvoice = CustInvoiceTable::findRecId(_adjustingInvoice.RecId);
        custInvoiceJourAdj = _adjustingInvoice.custInvoiceJour();
        custInvoiceJour = parentCustInvoiceTable.custInvoiceJour();

        while select LineNum, InvoiceDate, InvoiceId, SalesId, NumberSequenceGroup from custInvoiceTrans
            where custInvoiceTrans.SalesId == custInvoiceJour.SalesId &&
                  custInvoiceTrans.InvoiceDate == custInvoiceJour.InvoiceDate &&
                  custInvoiceTrans.InvoiceId == custInvoiceJour.InvoiceId &&
                  custInvoiceTrans.NumberSequenceGroup == custInvoiceJour.NumberSequenceGroup
        outer join FacturedFully_RU, FacturedQty_RU from custInvoiceTrans_RU
            where custInvoiceTrans_RU.CustInvoiceTrans == custInvoiceTrans.RecId
        notexists join RefReturnInvoiceTrans_W from custInvoiceTrans_W
            where custInvoiceTrans_W.CustInvoiceTrans == custInvoiceTrans.RecId &&
                  custInvoiceTrans_W.RefReturnInvoiceTrans_W
        {
            select firstonly factureTransSrc
                where factureTransSrc.Module == FactureModule_RU::Cust &&
                      factureTransSrc.FactureLineType == FactureLineType_RU::InvoiceLine &&
                      factureTransSrc.InvoiceLineNum == custInvoiceTrans.LineNum &&
                      factureTransSrc.InvoiceDate == custInvoiceTrans.InvoiceDate &&
                      factureTransSrc.InvoiceId == custInvoiceTrans.InvoiceId &&
                      factureTransSrc.SalesPurchId == custInvoiceTrans.SalesId &&
                      factureTransSrc.NumberSequenceGroup == custInvoiceTrans.NumberSequenceGroup;

            factureJourSrc = FactureJour_RU::find(factureTransSrc.FactureId, FactureModule_RU::Cust);

            if (factureJourSrc.RecId)
            {
                if (factureJourMap.exists(factureJourSrc.RecId))
                {
                    factureJourCreate = factureJourMap.lookup(factureJourSrc.RecId);
                }
                else
                {
                    factureJourCreate = FactureJourCreateCustFreeInvCor_RU::construct(factureJourSrc);
                    factureJourCreate.initParameters(NoYes::Yes,
                                                     NoYes::No,
                                                     Printout::After,
                                                     NoYes::Yes,
                                                     '',
                                                     _adjustingInvoice.InvoiceDate,
                                                     factureJourSrc.CustVendInvoiceAccount,
                                                     factureJourSrc.CurrencyCode,
                                                     factureJourSrc.FactureType,
                                                     '', '', '', '', '', dateNull(), 0,
                                                     _adjustingInvoice.InvoiceDate,
                                                     factureJourSrc.NumberSequenceGroupId);
                    factureJourCreate.parmCorrect(NoYes::Yes);
                    factureJourCreate.runOperation();
                    factureJourMap.insert(factureJourSrc.RecId, factureJourCreate);
                    info(strFmt("@GLS116016",
                         factureJourSrc.FactureExternalId,
                         factureJourCreate.getFactureJour().FactureExternalId));
                }
                factureTransCreate = FactureTransCreateCustFreeInvCor_RU::construct(factureJourCreate, factureTransSrc, custInvoiceJourAdj.InvoiceId);
                factureTransCreate.createTrans();

                // Update FacturedFully
                if (custInvoiceTrans_RU.FacturedFully_RU || custInvoiceTrans_RU.FacturedQty_RU)
                {
                    select firstonly forupdate custInvoiceTransAdj
                        where custInvoiceTransAdj.SalesId == custInvoiceJourAdj.SalesId &&
                              custInvoiceTransAdj.InvoiceDate == custInvoiceJourAdj.InvoiceDate &&
                              custInvoiceTransAdj.InvoiceId == custInvoiceJourAdj.InvoiceId &&
                              custInvoiceTransAdj.LineNum == custInvoiceTrans.LineNum &&
                              custInvoiceTransAdj.NumberSequenceGroup == custInvoiceJourAdj.NumberSequenceGroup;

                    if (custInvoiceTransAdj)
                    {
                        custInvoiceTransAdj_RU = custInvoiceTransAdj.custInvoiceTrans_RU();
                        custInvoiceTransAdj_RU.FacturedFully_RU = custInvoiceTrans_RU.FacturedFully_RU;
                        custInvoiceTransAdj_RU.FacturedQty_RU = custInvoiceTrans_RU.FacturedQty_RU;
                        custInvoiceTransAdj.packCustInvoiceTrans_RU(custInvoiceTransAdj_RU);
                        custInvoiceTransAdj.update();
                    }
                }
            }
        }

        // Update FacturedFully
        custInvoiceJour_RU = custInvoiceJour_RU::findByCustInvoiceJour(custInvoiceJourAdj.RecId, true);
        custInvoiceJour_RU.FacturedFully_RU = custInvoiceJour.custInvoiceJour_RU().FacturedFully_RU;
        custInvoiceJour_RU.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustTransOpenLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the specified record in the <c>CustTransOpenLine</c> table.
    /// </summary>
    /// <param name="_parentInvoiceLineRecId">
    ///    The record ID of the record in the <c>CustInvoiceLine</c> table to use to get a record in the
    ///    <c>CustTransOpenLine</c> table.
    /// </param>
    /// <param name="_invoiceId">
    ///    The invoice ID of the corrected invoice.
    /// </param>
    /// <returns>
    ///    The specified record in the <c>CustTransOpenLine</c> table.
    /// </returns>
    private CustTransOpenLine getCustTransOpenLine(recId _parentInvoiceLineRecId, InvoiceId _invoiceId)
    {
        CustInvoiceLineMapping custInvoiceLineMapping;
        CustInvoiceTrans custInvoiceTrans;
        CustTransOpenLine custTransOpenLine;

        //Find the CustTransOpenLine buffer using the parent and corrected invoice mapping.
        select firstonly RecId from custInvoiceLineMapping
            where custInvoiceLineMapping.ParentInvoiceLineRecId == _parentInvoiceLineRecId
        join RecId from custInvoiceTrans
            where custInvoiceTrans.InvoiceId == _invoiceId &&
            custInvoiceTrans.LineNum == custInvoiceLineMapping.ParentInvoiceLineLineNum
        join * from custTransOpenLine
            where custTransOpenLine.CustInvoiceLineIdRef == custInvoiceTrans.CustInvoiceLineIdRef;

        return custTransOpenLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the class level variables.
    /// </summary>
    /// <param name="_correctedCustInvoiceTable">
    ///    The <c>CustInvoicetable</c> record of the corrected invoice.
    /// </param>
    private void init(CustInvoiceTable _correctedCustInvoiceTable)
    {
        correctedCustInvoiceTable = _correctedCustInvoiceTable;
        parentCustInvoiceTable = CustRelatedInvoice::findParentInvoiceForChild(_correctedCustInvoiceTable.RecId);
        parentCustTrans = parentCustInvoiceTable.custInvoiceJour().custTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadParentSettlementLinesMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads settlement line records from the <c>CustSettlementLine</c> table into a map.
    /// </summary>
    private void loadParentSettlementLinesMap()
    {
        CustInvoiceLine custInvoiceLine;
        CustInvoiceTrans custInvoiceTrans;
        CustSettlementLine custSettlementLine;

        parentSettlementLines = new Map(Types::Int64, Types::Real);

        //Loop through all the parent invoice lines and get the sum of settled amount against them.
        while select RecId from custInvoiceLine
            where custInvoiceLine.ParentRecId == parentCustInvoiceTable.RecId
        join RecId, CustInvoiceLineIdRef from custInvoiceTrans
            where custInvoiceTrans.InvoiceId == parentCustInvoiceTable.InvoiceId &&
            custInvoiceTrans.LineNum == custInvoiceLine.LineNum
        {
            while select SettledAmountCur from custSettlementLine
                where custSettlementLine.CustInvoiceLineIdRef == custInvoiceTrans.CustInvoiceLineIdRef
            {
                if (custSettlementLine.SettledAmountCur != 0)
                {
                    if (parentSettlementLines.exists(custInvoiceLine.RecId))
                    {
                        custSettlementLine.SettledAmountCur += parentSettlementLines.lookup(custInvoiceLine.RecId);
                    }
                    parentSettlementLines.insert(custInvoiceLine.RecId, custSettlementLine.SettledAmountCur);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadParentSettlementSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads settlement records from the <c>CustSettlement</c> table into a set.
    /// </summary>
    private void loadParentSettlementSet()
    {
        CustSettlement custSettlement;

        parentSettlements = new Set(Types::Record);

        parentSettlementAmount = parentCustTrans.SettleAmountCur;

        //Loop through all the payment records against parent invoice and store RecIds in a Set.
        while select crossCompany RecId, OffsetRecid, OffsetCompany from custSettlement
            where custSettlement.TransCompany == parentCustTrans.company() &&
            custSettlement.TransRecId == parentCustTrans.RecId &&
            custSettlement.AccountNum == parentCustTrans.AccountNum &&
            custSettlement.CanBeReversed == NoYes::Yes
        {
            parentSettlements.add(custSettlement);
        }

        //if payment exist, get payment lines as well.
        if (!parentSettlements.empty())
        {
            this.loadParentSettlementLinesMap();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markParentPayments</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Marks the parent invoice payment transactions to be settled by inserting the corresponding rows
    ///    into the <c>SpecTrans</c> table.
    /// </summary>
    /// <param name="_specTransManager">
    ///    The <c>SpecTransManager</c> object to use for marking.
    /// </param>
    /// <param name="_currencyCode">
    ///    The currency code of the transaction.
    /// </param>
    /// <returns>
    ///    The total payment amount.
    /// </returns>
    private AmountCur markParentPayments(SpecTransManager _specTransManager, CurrencyCode _currencyCode)
    {
        CustSettlement custSettlement;
        SetEnumerator enumerator;
        CustTransOpen custTransOpen;
        AmountCur totalPaymentAmount;

        enumerator = parentSettlements.getEnumerator();

        //Get the parent payment transactions and mark them in SpecTrans table for settlement.
        while (enumerator.moveNext())
        {
            custSettlement = enumerator.current();
            changecompany(custSettlement.OffsetCompany)
            {
                custTransOpen = CustTransOpen::findRefId(custSettlement.OffsetRecid);
            }

            totalPaymentAmount += -(custTransOpen.AmountCur);

            if (!_specTransManager.existForOtherSpec(custSettlement.DataAreaId, custSettlement.TableId, custSettlement.RecId))
            {
                _specTransManager.insert(custTransOpen.DataAreaId,
                                         tableNum(CustTransOpen),
                                         custTransOpen.RecId,
                                         custTransOpen.AmountCur - custTransOpen.PossibleCashDisc,
                                         _currencyCode);
            }
            else
            {
                str message = SpecTransManager::getTransactionMarkedMessageByRef(
                    custTransOpen.company(),
                    custTransOpen.TableId,
                    custTransOpen.RecId);

                throw error(message);
            }
        }

        return totalPaymentAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the correction process for the parent invoice.
    /// </summary>
    /// <remarks>
    ///    The correction process is as follows:
    ///    <list type="bullet">
    ///       <item>
    ///          <description>Reverse all the payments created against the parent invoice.</description>
    ///       </item>
    ///       <item>
    ///          <description>Create and post the adjusting invoice opposite in amount of the parent
    ///          invoice.</description>
    ///       </item>
    ///       <item>
    ///          <description>Settle the adjusting invoice against the parent invoice.</description>
    ///       </item>
    ///    </list>
    /// </remarks>
    public void post()
    {
        #OCCRetryCount

        try
        {
            if (!this.validate(correctedCustInvoiceTable, InvoiceAssociationType::CorrectedInvoice))
            {
                throw Exception::Error;
            }

            this.loadParentSettlementSet();

            // executing reversal of parent invoice payments
            this.reverseParentSettlements();

            // creates adjusting invoice and settle it against parent invoice
            this.processAdjustingInvoice();
            this.processAdjustingInvoiceForInterest();
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postAdjustingInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Posts the adjusting invoice.
    /// </summary>
    /// <param name="_adjustingInvoice">
    ///    The <c>CustInvoicetable</c> record of the adjusting invoice.
    /// </param>
    final protected void postAdjustingInvoice(CustInvoiceTable _adjustingInvoice)
    {
        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>
        CustPostInvoice custPostInvoice;
        SourceDocumentHeader sourceDocumentHeader;

        if (Debug::debugMode())
        {
            Debug::assert(_adjustingInvoice.RecId);
        }

        custPostInvoice = CustPostInvoice::construct(_adjustingInvoice,
            CustParameters::find().CreditMaxCheck,
            LedgerParameters::find().TransactionReversalCorrection
            );

        sourceDocumentHeader = SourceDocumentHeader::find(_adjustingInvoice.SourceDocumentHeader);
        custPostInvoice.parmCustInvoiceTable(_adjustingInvoice);

        //Reverse the fixed assets on parent invoice.
        this.reverseFixedAssets();

        custPostInvoice.run();

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.createAdjustingFacture_RU(_adjustingInvoice);
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAdjustingInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an adjusting invoice and settles it against the parent invoice.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    There is a non-existent adjusting invoice.
    /// </exception>
    private void processAdjustingInvoice()
    {
        CustFreeInvoiceCorrection custFreeInvoiceCorrection;
        CustInvoiceTable adjustingInvoice;
        CustInvoiceLine adjustingInvoiceLine;
        // <GEEU>
        CustRelatedInvoice custRelatedInvoice;
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU, #isoPL, #isoHU, #isoCZ, #isoLT, #isoLV, #isoEE]))
        {
            custRelatedInvoice = CustRelatedInvoice::findByParentCustInvoiceInvoiceType(parentCustInvoiceTable.RecId, InvoiceAssociationType::AdjustingInvoice);
            if (custRelatedInvoice)
            {
                adjustingInvoice = CustInvoiceTable::findRecId(custRelatedInvoice.CustInvoice, true);
            }
            else
            {
                custFreeInvoiceCorrection = CustFreeInvoiceCorrection::newCorrectedInvoice(parentCustInvoiceTable.RecId);
                adjustingInvoice = CustInvoiceTable::findRecId(custFreeInvoiceCorrection.createAdjustingInvoice(), true);
            }
        }
        else
        {
        // </GEEU>
        custFreeInvoiceCorrection = CustFreeInvoiceCorrection::newCorrectedInvoice(parentCustInvoiceTable.RecId);
        adjustingInvoice = CustInvoiceTable::findRecId(custFreeInvoiceCorrection.createAdjustingInvoice(), true);
        // <GEEU>
        }
        // </GEEU>

        if (adjustingInvoice.RecId)
        {
            if (WorkflowTable::findActiveTemplate(workFlowTypeStr(CustFreeTextInvoiceTemplate)).RecId != 0)
            {
                adjustingInvoice.WorkflowApprovalState = CustFreeInvoiceWFApprovalState::Approved;
                adjustingInvoice.WorkflowApprovalStatus = CustFreeInvoiceWFApprovalStatus::Approved;
            }

            adjustingInvoice.CashDiscCode = '';
            adjustingInvoice.CashDiscDate = dateNull();
            adjustingInvoice.CashDiscPercent = 0;
            adjustingInvoice.update();

            update_recordset adjustingInvoiceLine
                setting
                    AssetId = '',
                    AssetBookId = ''
                where adjustingInvoiceLine.ParentRecId == adjustingInvoice.RecId;

            this.settleParentInvoice(adjustingInvoice);

            this.postAdjustingInvoice(adjustingInvoice);
        }
        else
        {
            throw error("@SYS21628");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAdjustingInvoiceForInterest</Name>
				<Source><![CDATA[
    private void processAdjustingInvoiceForInterest()
    {
        CustInterestJour custInterestJour;
        CustInterestTrans custInterestTrans;

        CustInterestAdjust custInterestAdjust = new CustInterestAdjust();

        parentCustTrans = CustTrans::findFromInvoice(parentCustInvoiceTable.InvoiceId);

        while select custInterestTrans
            where custInterestTrans.CustTransId == parentCustTrans.RecId
        {
            while select custInterestJour
                where custInterestJour.InterestNote == custInterestTrans.InterestNote
            {
                if (custInterestJour.Status == PrintPostCancel::Posted)
                {
                    custInterestAdjust.reverseTransaction(custInterestTrans);
                    info("@SYS322872");
                }
                else
                {
                    ttsbegin;
                    custInterestJour = CustInterestJour::find(custInterestJour.InterestNote, true);
                    custInterestJour.Status = PrintPostCancel::Canceled;
                    custInterestJour.update();
                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseFixedAssets</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reverses the fixed assets transactions that exist against a free text invoice.
    /// </summary>
    private void reverseFixedAssets()
    {
        TransactionReversal_Asset transactionReversal_Asset = TransactionReversal_Asset::construct();
        AssetTrans assetTrans;
        Args args = new Args();
        TransDate reversalDate = parentCustInvoiceTable.AdjustingInvoiceDate;
        CustInvoiceJour localCustInvoiceJour;

        //Get the assets transaction record buffer
        select assetTrans
            where assetTrans.TransDate == parentCustInvoiceTable.InvoiceDate
        join LedgerVoucher from localCustInvoiceJour
            where localCustInvoiceJour.LedgerVoucher == assetTrans.Voucher &&
            localCustInvoiceJour.InvoiceId == parentCustInvoiceTable.InvoiceId &&
            localCustInvoiceJour.InvoiceDate == parentCustInvoiceTable.InvoiceDate;

        if (assetTrans != null)
        {
            args.record(assetTrans);
            args.parm(date2str(reversalDate, -1, -1, -1, -1, -1, -1, DateFlags::None));

            //Reverse fixed assets
            transactionReversal_Asset.parmIsFTICorrection(true);
            transactionReversal_Asset.reversal(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseParentSettlements</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reverses the settlements that are created against the invoice.
    /// </summary>
    private void reverseParentSettlements()
    {
        CustTable custTable;
        CustSettlement reverseCustSettlements;
        SpecTransManager specTransManager;

        custTable = CustTable::find(correctedCustInvoiceTable.OrderAccount);

        specTransManager = SpecTransManager::newRefTableId(custTable, tableNum(CustSettlement), true);

        while select crossCompany reverseCustSettlements
            order by RecId desc
            where reverseCustSettlements.TransRecId == parentCustTrans.RecId &&
            reverseCustSettlements.TransCompany == parentCustTrans.DataAreaId &&
            reverseCustSettlements.CanBeReversed == NoYes::Yes
        {
            if (!specTransManager.existForOtherSpec(reverseCustSettlements.DataAreaId, reverseCustSettlements.TableId, reverseCustSettlements.RecId))
            {
               reverseCustSettlements.CustVendSettlement::markThisAndRelatedOffsets(specTransManager, parentCustTrans.CurrencyCode);
            }
            else
            {
                throw error("@SYS117108");
            }
        }

        if (specTransManager.getSpecTransCount() > 0)
        {
            CustTrans::reverseTransact(custTable, null, SettleDatePrinc::SelectDate, parentCustInvoiceTable.AdjustingInvoiceDate);
            specTransManager.deleteAll();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleCorrectedInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Settles the corrected invoice with the payment transactions from the parent invoice.
    /// </summary>
    public void settleCorrectedInvoice()
    {
        AmountCur totalAmountToSettle;
        AmountCur totalAmountOnCorrectedInvoice = 0;
        AmountCur amountToMark;
        CustTrans custTrans;
        CustTransOpen custTransOpen;
        SpecTransManager specTransManager;
        AmountCur totalPaymentAmount;
        CustTransData custTransData;

        //Settle the corrected invoice only if parent invoice had settlements.
        if (!parentSettlements.empty())
        {
            custTrans = CustTrans::findFromInvoice(CustInvoiceTable::findRecId(correctedCustInvoiceTable.RecId).InvoiceId);
            specTransManager = SpecTransManager::newRefTableId(correctedCustInvoiceTable, tableNum(CustTransOpen), true);

            // Mark payment transactions from parent invoice
            totalPaymentAmount = this.markParentPayments(specTransManager, custTrans.CurrencyCode);

            // amount to settle should be the lesser of the parent settled amount or the corrected invoice amount balance
            totalAmountToSettle = min(custTrans.AmountCur - custTrans.SettleAmountCur, parentSettlementAmount);

            // An invoice can have multiple open transactions in case of payment schedule.
            // Loop through all the open transactions and mark them in SpecTrans table.
            while select * from custTransOpen
                where custTransOpen.RefRecId == custTrans.RecId
            {
                if (totalAmountToSettle != 0)
                {
                    totalAmountOnCorrectedInvoice = custTransOpen.AmountCur;

                    //Identify the amount needed to be marked.
                    if (totalAmountToSettle >= totalAmountOnCorrectedInvoice)
                    {
                        amountToMark = totalAmountOnCorrectedInvoice;
                    }
                    else
                    {
                        amountToMark = totalAmountToSettle;
                    }

                    //Mark corrected invoice for settlement
                    if (!specTransManager.existForOtherSpec(custTransOpen.DataAreaId, custTransOpen.TableId, custTransOpen.RecId))
                    {
                        specTransManager.insert(custTransOpen.DataAreaId, custTransOpen.TableId, custTransOpen.RecId, amountToMark, custTrans.CurrencyCode);
                    }
                    else
                    {
                        str message = SpecTransManager::getTransactionMarkedMessageByRef(
                            custTransOpen.company(),
                            custTransOpen.TableId,
                            custTransOpen.RecId);

                        throw error(message);
                    }

                    totalAmountToSettle -= amountToMark;

                    // Mark corrected invoice lines for settlement
                    if (CustParameters::find().MarkOpenInvoiceLine == NoYes::Yes && !parentSettlementLines.empty())
                    {
                        // inserting of the specTrans automatically marks all lines, so if the full amount is to be marked
                        // nothing else needs to be done.
                        if (amountToMark != custTransOpen.AmountCur)
                        {
                            // Delete all the marked lines as we have to mark lines according to parent invoice settlement
                            specTransManager.deleteAllLine(custTransOpen.DataAreaId, custTransOpen.TableId, custTransOpen.RecId);
                            this.settleLines(custTransOpen, amountToMark);
                        }
                    }
                }
            }

            //Settle the corrected invoice
            custTransData = custTrans.transData();
            // set the datePrinciple and selected date variable before calling updateOffsetVoucher.
            // These variables are used in the updateOffsetVoucher method.
            custTransData.parmDatePrinciple(SettleDatePrinc::DateOfPayment);
            custTransData.parmSelectedDate(dateNull());
            custTransData.updateOffsetVoucher(SettlementType::SelectedTransact,
                                                      null,
                                                      correctedCustInvoiceTable,
                                                      true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks the invoice lines to select the corrected invoice.
    /// </summary>
    /// <param name="_custTransOpen">
    /// The <c>CustTransOpen</c> table buffer.
    /// </param>
    /// <param name="_amountToMark">
    /// The amount to mark for settlement.
    /// </param>
    private void settleLines(CustTransOpen _custTransOpen, AmountCur _amountToMark)
    {
        CustOpenTransLineManager custOpenTransLineManager;
        CustInvoiceLineMapping custInvoiceLineMapping;
        CustTransOpenLine custTransOpenLine;
        CustInvoiceTrans custInvoiceTrans;
        CustInvoiceTable custInvoiceTable;
        MapEnumerator enumerator;
        AmountCur amountToMark = _amountToMark;
        AmountCur amountToMarkOnLine;

        custInvoiceTable = CustInvoiceTable::findRecId(correctedCustInvoiceTable.RecId);

        //Constructing CustOpenTransLineManager object for marking invoice lines.
        custOpenTransLineManager = CustOpenTransLineManager::construct(_custTransOpen.RecId, custInvoiceTable);

        //Leave the total cash discount as zero, this will let the settlement process calculate the discounts.
        custOpenTransLineManager.parmCashDiscAmountToTake(0);

        enumerator = parentSettlementLines.getEnumerator();

        //Mark those lines first that were settled on parent invoice
        while (enumerator.moveNext())
        {
            custTransOpenLine = this.getCustTransOpenLine(enumerator.currentKey(), custInvoiceTable.InvoiceId);

            if (custTransOpenLine)
            {
                //Mark this open line for settlement
                custOpenTransLineManager.markTransLine(custTransOpenLine);

                // If last settled amount is less than the new line amount, use the last settled amount
                if (abs(enumerator.currentValue()) < abs(custTransOpenLine.AmountCur))
                {
                    custOpenTransLineManager.updateSettlementLineAmount(custTransOpenLine.RecId, enumerator.currentValue());
                    amountToMark -= enumerator.currentValue();
                }
                else
                {
                    amountToMark -= custTransOpenLine.AmountCur;
                }
            }
        }

        //if amount left over, iterate those lines that were settled on parent and add amount (if possible)
        if (amountToMark != 0)
        {
            enumerator = parentSettlementLines.getEnumerator();

            while (enumerator.moveNext() && amountToMark != 0)
            {
                custTransOpenLine = this.getCustTransOpenLine(enumerator.currentKey(), custInvoiceTable.InvoiceId);

                if (custTransOpenLine)
                {
                    if (abs(enumerator.currentValue()) < abs(custTransOpenLine.AmountCur))
                    {
                        // lines where the previous marked is less than the line amount.
                        // The previous marked values is currently marked, need to adjust the marked amount
                        // by the lesser of the line amount or the amount available to mark
                        if (custOpenTransLineManager.isTransMarkedLine(custTransOpenLine))
                        {
                            if (abs(custTransOpenLine.AmountCur - enumerator.currentValue()) < abs(amountToMark))
                            {
                                amountToMarkOnLine = custTransOpenLine.AmountCur;
                                amountToMark -= custTransOpenLine.AmountCur - enumerator.currentValue();
                            }
                            else
                            {
                                amountToMarkOnLine = amountToMark + enumerator.currentValue();
                                amountToMark = 0;
                            }
                            custOpenTransLineManager.updateSettlementLineAmount(custTransOpenLine.RecId, amountToMarkOnLine);
                        }
                    }
                }
            }
        }

        //if amount left over after completely marking those lines that were settled on parent.
        //Mark any other available lines on corrected invoice
        if (amountToMark != 0)
        {
            while select ParentInvoiceLineParentRecId, ParentInvoiceLineLineNum, ParentInvoiceLineRecId
                from custInvoiceLineMapping
                where custInvoiceLineMapping.ParentInvoiceLineParentRecId == parentCustInvoiceTable.RecId
            {
                if (amountToMark != 0 && parentSettlementLines.exists(custInvoiceLineMapping.ParentInvoiceLineRecId) == false)
                {
                    select firstonly InvoiceId, LineNum from custInvoiceTrans
                        where custInvoiceTrans.InvoiceId == custInvoiceTable.InvoiceId &&
                        custInvoiceTrans.LineNum == custInvoiceLineMapping.ParentInvoiceLineLineNum
                    join RecId, AmountCur from custTransOpenLine
                        where custTransOpenLine.CustInvoiceLineIdRef == custInvoiceTrans.CustInvoiceLineIdRef;

                    custOpenTransLineManager.markTransLine(custTransOpenLine);

                    //if this line cannot be marked completely, update the marked amount.
                    if (abs(amountToMark) < abs(custTransOpenLine.AmountCur))
                    {
                        custOpenTransLineManager.updateSettlementLineAmount(custTransOpenLine.RecId, amountToMark);
                        amountToMark -= amountToMark;
                    }
                    else
                    {
                        amountToMark -= custTransOpenLine.AmountCur;
                    }
                }
            }
        }

        Debug::assert(amountToMark == 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleParentInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Settles the parent invoice against the adjusting invoice.
    /// </summary>
    /// <param name="_adjustingInvoice">
    ///    The <c>CustInvoicetable</c> record of the adjusting invoice.
    /// </param>
    private void settleParentInvoice(CustInvoiceTable _adjustingInvoice)
    {
        CustTransOpen parentCustTransOpen;
        SpecTransManager specTransManager;

        if (Debug::debugMode())
        {
            Debug::assert(parentCustTrans.RecId);
            Debug::assert(_adjustingInvoice.RecId);
        }

        specTransManager = SpecTransManager::newRefTableId(_adjustingInvoice, tableNum(CustTransOpen), false);

        while select forupdate * from parentCustTransOpen
            where parentCustTransOpen.RefRecId == parentCustTrans.RecId
        {
            parentCustTransOpen.UseCashDisc = UseCashDisc::Never;
            parentCustTransOpen.setCashDisc(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
            parentCustTransOpen.update();

            specTransManager.insert(
                parentCustTransOpen.company(),
                parentCustTransOpen.TableId,
                parentCustTransOpen.RecId,
                parentCustTransOpen.AmountCur,
                parentCustTrans.CurrencyCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the corrected invoice is ready to post.
    /// </summary>
    /// <param name="_custInvoiceTable">
    ///    The buffer of the <c>CustInvoiceTable</c> table to validate.
    /// </param>
    /// <param name="_invoiceAssociationType">
    ///    The <c>InvoiceAssociationType</c> enumeration value that specifies the invoice type.
    /// </param>
    /// <returns>
    ///    true if the invoice is valid; otherwise, false.
    /// </returns>
    final protected boolean validate(CustInvoiceTable _custInvoiceTable, InvoiceAssociationType _invoiceAssociationType)
    {
        CustPostInvoice custPostInvoice;
        CustTransOpen custTransOpen;
        CustFreeInvoiceCalcTotals custFreeInvoiceCalcTotals;
        boolean ret = true;

        // perform invoice basic validations
        custPostInvoice = CustPostInvoice::construct(_custInvoiceTable
            , CustParameters::find().CreditMaxCheck
            , LedgerParameters::find().TransactionReversalCorrection
            );

        custFreeInvoiceCalcTotals = new CustFreeInvoiceCalcTotals(_custInvoiceTable);
        custFreeInvoiceCalcTotals.calc();

        if (!custPostInvoice.validate(custFreeInvoiceCalcTotals.custFreeInvoiceInvoiceAmount()))
        {
            ret = false;
        }

        // Reason code exist.
        if ((ret) && (!_custInvoiceTable.CorrectionReasonCode) && (!ReasonTableRef::checkExist(_custInvoiceTable.CorrectionReasonCode)))
        {
            ret = checkFailed("@SYS300515");
        }

        // Adjusting inovoice date should not be less then InvoiceDate
        if ((ret) && (parentCustInvoiceTable.InvoiceDate > parentCustInvoiceTable.AdjustingInvoiceDate))
        {
            ret = checkFailed("@SYS300083");
        }

        // Adjusting invoice date, should not lie in close period.
        if ((ret) && (!LedgerFiscalCalendar::isDateInOpenPeriod(CompanyInfoHelper::fiscalCalendarRecId(), parentCustInvoiceTable.AdjustingInvoiceDate)))
        {
            ret = checkFailed("@SYS300084");
        }

        if (ret)
        {
            // checking marking for parent invoice.
            while select TableId, RecId from custTransOpen
                where custTransOpen.RefRecId == parentCustTrans.RecId
            {
                if (SpecTrans::existByRef(custTransOpen.company(), custTransOpen.TableId, custTransOpen.RecId))
                {
                    ret = checkFailed("@SYS300516");
                    break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCorrectedInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>CustFreeInvoiceCorrectionPost</c> class.
    /// </summary>
    /// <param name="_correctedCustInvoiceTable">
    ///    The buffer of the <c>CustInvoicetable</c> table.
    /// </param>
    /// <returns>
    ///    An instance of the <c>CustFreeInvoiceCorrectionPost</c> class.
    /// </returns>
    public static CustFreeInvoiceCorrectionPost newCorrectedInvoice(CustInvoiceTable _correctedCustInvoiceTable)
    {
        CustFreeInvoiceCorrectionPost custFreeInvoiceCorrectionPost;

        custFreeInvoiceCorrectionPost = new CustFreeInvoiceCorrectionPost();
        custFreeInvoiceCorrectionPost.init(_correctedCustInvoiceTable);

        return custFreeInvoiceCorrectionPost;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>