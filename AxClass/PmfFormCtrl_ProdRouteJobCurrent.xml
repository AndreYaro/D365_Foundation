<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_ProdRouteJobCurrent</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Form control handler for the <c>ProdRouteJobCurrent</c> form
/// </summary>
class PmfFormCtrl_ProdRouteJobCurrent
    extends PmfFormCtrl
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to be called after the form element has been initialized
    /// </summary>
    /// <remarks>
    /// Initializes the form button manager and adjusts various
    /// properties for the usage of the form with production batch orders
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// throws an exception, if the form element has not been set for this class
    /// </exception>
    public void initPost()
    {
        super();

        this.updateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerCtrlRules</Name>
				<Source><![CDATA[
    protected void registerCtrlRules()
    {
        super();

        if (this.isPmfEnabled())
        {
            this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ProdRouteJobCurrent,ctrlProduction)),
                methodstr(PmfFormCtrl_ProdRouteJobCurrent, isBatchEnabled),
                ButtonRuleEffectType::Caption,
                "@PRO138");

            this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdRouteJobCurrent,Identification)),
                formRun.design().controlName(formControlStr(ProdRouteJobCurrent,Identification_ProdId)),
                methodstr(PmfFormCtrl_ProdRouteJobCurrent, isBatchEnabled),
                ButtonRuleEffectType::Label,
                "@PRO138");

            this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ProdRouteJobCurrent,Production_M_pdsCWUnitId)),
                methodstr(PmfFormCtrl_ProdRouteJobCurrent, isBatchEnabled),
                ButtonRuleEffectType::Visible);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBatchEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check, if the underlying order is a production batch order
    /// </summary>
    /// <returns>
    /// true, if the order is a production batch order
    /// </returns>
    /// <remarks>
    /// This method is mostly used for the button manager to determine the states of various controls
    /// </remarks>
    public boolean isBatchEnabled()
    {
        ProdRoute   callerProdRoute;
        Common      common = this.callerBuffer();
        ProdTable   prodTable = buffer;
        boolean     ret = false;

        switch (common.TableId)
        {
            case tablenum(ProdRoute) :
                callerProdRoute = common;
                ret = callerProdRoute.prodTable().ProdType == ProdType::Process;
                break;
            default:
            // break;
        }

        ret = ret
            || this.menuItemName()
                    == menuitemdisplaystr(PmfProdBatchRouteCurrent)
            || (this.caller()
                && this.caller().name() == formstr(ProdRouteOprOverview)
                && this.caller().pmfIsEnabled())
            || prodTable.ProdType == ProdType::Process;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        formButtonManager = FormButtonManager::construct();
        formButtonManager.parmRuleImplementer(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the datasources that are to be used in the rule computation process.
    /// </summary>
    /// <param name="_datasources1">
    /// A table buffer (Common) belonging to the 1st datasource instance.
    /// </param>
    /// <param name="_datasources2">
    /// A table buffer (Common) belonging to the 2nd datasource instance.
    /// </param>
    /// <param name="_datasources3">
    /// A table buffer (Common) belonging to the 3rd datasource instance.
    /// </param>
    /// <param name="_datasources4">
    /// A table buffer (Common) belonging to the 4th datasource instance.
    /// </param>
    /// <param name="_datasources5">
    /// A table buffer (Common) belonging to the 5th datasource instance.
    /// </param>
    /// <remarks>
    /// Up to 5 datasources can be passed. If the implementation requires more datasources
    /// additional custom methods should be implemented on the rule implementer class.
    /// The method is called by FormButtonManager on the rule class implementing the ButtonStateProvider interface.
    /// </remarks>
    public void setDatasources(
        Common  _datasources1 = buffer,
        Common  _datasources2 = null,
        Common  _datasources3 = null,
        Common  _datasources4 = null,
        Common  _datasources5 = null)
    {
        if (_datasources1.TableId != tablenum(ProdTable))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        super(
            _datasources1,
            _datasources2,
            _datasources3,
            _datasources4,
            _datasources5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the form design
    /// </summary>
    /// <remarks>
    /// Updates the states and visibility of form controls based on the type order
    /// </remarks>
    public void updateDesign()
    {
        super();

        this.visibleDSField(
            fieldnum(ProdTable,PdsCWBatchSched),
            this.isBatchEnabled());

        this.visibleDSField(
            fieldnum(ProdTable,PdsCWBatchSize),
            this.isBatchEnabled());

        this.visibleDSField(
            fieldnum(ProdTable,PdsCWRemainInventPhysical),
            this.isBatchEnabled());

        this.visibleDSField(
            fieldnum(ProdTable,PdsCWBatchStup),
            this.isBatchEnabled());

        this.visibleDSField(
            fieldnum(ProdTable,PdsCWBatchEst),
            this.isBatchEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PmfFormCtrl_ProdRouteJobCurrent construct()
    {
        return new PmfFormCtrl_ProdRouteJobCurrent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new form control handler from the form element
    /// </summary>
    /// <param name="_fr">
    /// The form element to create the form control handler for
    /// </param>
    /// <returns>
    /// The created form control handler
    /// </returns>
    public static PmfFormCtrl_ProdRouteJobCurrent newFromForm(FormRun _fr)
    {
        PmfFormCtrl frmCtrl;

        frmCtrl = PmfFormCtrl_ProdRouteJobCurrent::construct();
        frmCtrl.parmFormRun(_fr);
        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>