<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetProposalDepreciation</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetProposalDepreciation extends RAssetProposal implements BatchRetryable
{
    Map mapAssetCheck;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetTransType</Name>
				<Source><![CDATA[
        public RAssetTransType assetTransType()
    {
        return RAssetTransType::Depreciation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateJournalLine</Name>
				<Source><![CDATA[
        public boolean canCreateJournalLine(RAssetStandardId _rAssetStandardId)
    {
        boolean ret = rAssetStandards.Depreciation && !rAssetStandards.BlockDepreciation;

        ret = ret && rAssetStandards.postingProfile(runDate);
        ret = ret && this.checkRegisterDate();

        return ret && super(_rAssetStandardId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRegisterDate</Name>
				<Source><![CDATA[
        protected boolean checkRegisterDate()
    {
        container   key = [ rAssetTable.AccountNum, rAssetStandards.AssetStandardId ];
        boolean     ret = true;

        if (mapAssetCheck.exists(key))
        {
            ret = mapAssetCheck.lookup(key);
        }
        else
        {
            if (rAssetTable.isRealtyOrVehicle() &&
              ! rAssetTable.VehiclePlateDate    &&
                rAssetStandards.assetGroup().InitDepStartDate == RAssetInitDepStartDate::RegistrationDate)
            {
                ret = checkFailed(strFmt("@GLS114686", rAssetTable.AccountNum));
            }

            mapAssetCheck.insert(key, ret);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDepreciationBonusLine</Name>
				<Source><![CDATA[
        #define.space(" ")
    protected void createDepreciationBonusLine(TransDate          _transDate,
                                               Map                _bonusTrans,
                                               RAssetDeprAccount  _assetDeprAccount = null)
    {
        RAssetLocationId              assetLocationId;
        RAssetPostingProfile          postingProfile = rAssetStandards.postingProfile(_transDate);
        LedgerDimensionDefaultAccount offsetDefaultAccount,
                                      defaultAccount = RAssetDisposalParameters::ledgerDimensionAccount(postingProfile,
                                                                                                        RAssetDisposalType::DepreciationBonus,
                                                                                                        rAssetStandards.AssetId,
                                                                                                        rAssetStandards.AssetStandardId);
        MapEnumerator                 bonusEnumerator = _bonusTrans.getEnumerator();
        RAssetTrans                   rAssetTransLocal;
        RAssetBonus                   rAssetBonusLocal;
        RAssetAmount                  amount;

        void updateDeprPeriod(LedgerDimensionAccount _offsetLedger = 0)
        {
            LedgerJournalTrans        ledgerJournalTransLocal;
            LedgerJournalTrans_RAsset ledgerJournalTransLocal_RAsset;

            ledgerJournalTransLocal = rAssetJournal.ledgerJournalTrans();
            ledgerJournalTransLocal_RAsset = rAssetJournal.ledgerJournalTrans_RAsset();

            ledgerJournalTransLocal.selectForUpdate(true);
            ledgerJournalTransLocal_RAsset.selectForUpdate(true);

            ledgerJournalTransLocal_RAsset.DeprPeriod      = _transDate;
            ledgerJournalTransLocal.NoEdit                 = NoYes::Yes;
            if (_offsetLedger)
                ledgerJournalTransLocal.parmOffsetLedgerDimension(_offsetLedger);

            ledgerJournalTransLocal_RAsset.ToFromRecId     = bonusEnumerator.currentKey();
            ledgerJournalTransLocal_RAsset.DepreciationBonusId = rAssetTransLocal.DeprBonusId;
            ledgerJournalTransLocal.doUpdate();
            ledgerJournalTransLocal_RAsset.doUpdate();
        }

        if (_assetDeprAccount.RecId)
        {
            while (bonusEnumerator.moveNext())
            {
                if (bonusEnumerator.currentValue().exists(_assetDeprAccount.RecId))
                {
                    rAssetTransLocal = RAssetTrans::find(bonusEnumerator.currentKey());
                    rAssetBonusLocal = RAssetBonus::find(rAssetTransLocal.DeprBonusId);

                    amount = bonusEnumerator.currentValue().lookup(_assetDeprAccount.RecId);
                    rAssetJournal.createTrans(-amount,
                                              rAssetTable,
                                              _transDate,
                                              rAssetStandards,
                                              rAssetBudgetModelId,
                                              "@GLS116827" + #space + _assetDeprAccount.AssetTransTxt,
                                              defaultAccount,
                                              NoYes::Yes,
                                              rAssetTransLocal.DeprBonusId ?
                                              rAssetBonusLocal.dimension(_assetDeprAccount.DefaultDimension) :
                                              _assetDeprAccount.DefaultDimension);

                    updateDeprPeriod(this.mergeLedgerDimensionAndDefaultDimension(_assetDeprAccount.DepreciationBonusLedgerDimension,
                                                                                  rAssetJournal.ledgerJournalTrans().DefaultDimension));
                }
            }
        }
        else
        {
            if (! RAssetLending::findLent(rAssetStandards.AssetId, _transDate))
            {
                assetLocationId = RAssetMoveHist::findLastOperation(rAssetStandards.AssetId,
                                                                    RAssetMoveType::Transfer,
                                                                    NoYes::No,
                                                                   _transDate).NewLocation;
                if (assetLocationId)
                {
                    defaultAccount = RAssetLedgerAccountsByLocation::ledgerDimensionForBonus(rAssetStandards.AssetId,
                                                                                             assetLocationId,
                                                                                             rAssetStandards.AssetStandardId);
                }
            }

            offsetDefaultAccount = RAssetDisposalParameters::offsetLedgerDimensionAccount(postingProfile,
                                                                                          RAssetDisposalType::DepreciationBonus,
                                                                                          rAssetStandards.AssetId,
                                                                                          rAssetStandards.AssetStandardId);
            while (bonusEnumerator.moveNext())
            {
                if (bonusEnumerator.currentValue().exists(0))
                {
                    rAssetTransLocal = RAssetTrans::find(bonusEnumerator.currentKey());
                    rAssetBonusLocal = RAssetBonus::find(rAssetTransLocal.DeprBonusId);

                    amount = bonusEnumerator.currentValue().lookup(0);
                    rAssetJournal.createTrans(-amount,
                                              rAssetTable,
                                              _transDate,
                                              rAssetStandards,
                                              rAssetBudgetModelId,
                                              "@GLS116827",
                                              defaultAccount,
                                              NoYes::Yes,
                                              rAssetBonusLocal.dimension());
                    updateDeprPeriod(this.mergeLedgerDimensionAndDefaultDimension(offsetDefaultAccount,
                                                                                  rAssetJournal.ledgerJournalTrans().DefaultDimension));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLines</Name>
				<Source><![CDATA[
#define.space(" ")
    public void createJournalLines(RAssetStandardId _assetStandardId,
                                   boolean          _runFromBatch = true,
                                   RAssetAmount     _assetAmount  = 0)
    {
        AmountCur                   amountCur;
        AmountCur                   amountCurTrans;
        RAssetTransDate             transDate,
                                    assetDeprPeriod,
                                    accountingDate;
        RAssetDeprAccount           rAssetDeprAccount;
    
        RassetTableMethodIterator   iterator = RassetTableMethodIterator::construct(rAssetStandards);
    
        void updateDeprPeriod(LedgerDimensionAccount _offsetLedger = 0)
        {
            LedgerJournalTrans        ledgerJournalTransLocal;
            LedgerJournalTrans_RAsset ledgerJournalTransLocal_RAsset;
    
            ledgerJournalTransLocal = rAssetJournal.ledgerJournalTrans();
            ledgerJournalTransLocal_RAsset = rAssetJournal.ledgerJournalTrans_RAsset();
    
            ledgerJournalTransLocal.selectForUpdate(true);
            ledgerJournalTransLocal_RAsset.selectForUpdate(true);
    
            ledgerJournalTransLocal_RAsset.DeprPeriod = assetDeprPeriod;
            ledgerJournalTransLocal.NoEdit            = isBudgetJournal ? NoYes::No : NoYes::Yes;
            if (_offsetLedger)
                ledgerJournalTransLocal.parmOffsetLedgerDimension(_offsetLedger);
            ledgerJournalTransLocal.doUpdate();
            ledgerJournalTransLocal_RAsset.doUpdate();
        }
    
        iterator.parmCalcToTransDate(calcToTransDate);
        iterator.initValue(rAssetStandards, runDate, rAssetBudgetModelId);
    
        while (iterator.nextInterval())
        {
            assetDeprPeriod = iterator.parmPostingDate();
    
            transDate = iterator.parmDeprStartDate();
            accountingDate = this.checkFirstDate(transDate, rAssetTable.AccountNum);
    
            if (transDate != accountingDate)
            {
                rAssetJournal.parmCorrect(true);
                rAssetJournal.parmAccountingDate(accountingDate);
            }
            else
            {
                rAssetJournal.parmCorrect(false);
            }
    
            iterator.calculate();
            amountCur = iterator.sumDeprInterval();
    
            if (amountCur != 0)
            {
                if ((select firstonly rAssetDeprAccount
                         where rAssetDeprAccount.AssetId         == rAssetTable.AccountNum &&
                               rAssetDeprAccount.AssetStandardId == _assetStandardId).RecId)
                {
                    while select rAssetDeprAccount
                        where rAssetDeprAccount.AssetId         == rAssetTable.AccountNum &&
                              rAssetDeprAccount.AssetStandardId == _assetStandardId
                    {
                        amountCurTrans = RAssetProposal::roundAmount(_assetStandardId,
                                                                     rAssetTable,
                                                                     transDate,
                                                                     amountCur * rAssetDeprAccount.Percentage/100,
                                                                     rAssetStandards.CurrencyCode);
    
                        if (amountCurTrans >= RAssetGroup::assetDepreciationMin(rAssetStandards.AssetGroup))
                        {
                            rAssetJournal.createVoucher();
                            rAssetJournal.createTrans(-amountCurTrans,
                                                      rAssetTable,
                                                      transDate,
                                                      rAssetStandards,
                                                      rAssetBudgetModelId,
                                                      strFmt("@GLS116532", assetDeprPeriod) + #space + rAssetDeprAccount.AssetTransTxt,
                                                      0, NoYes::Yes, rAssetDeprAccount.DefaultDimension);
                            updateDeprPeriod(this.mergeLedgerDimensionAndDefaultDimension(rAssetDeprAccount.AssetLedgerDimension,
                                                                                          rAssetJournal.ledgerJournalTrans().DefaultDimension));
                            if (! rAssetBudgetModelId && iterator.getBonusTrans())
                            {
                                this.createDepreciationBonusLine(transDate, iterator.getBonusTrans(), rAssetDeprAccount);
                            }
                        }
                    }
                }
                else
                {
                    amountCur = RAssetProposal::roundAmount(_assetStandardId,
                                                            rAssetTable,
                                                            transDate,
                                                            amountCur,
                                                            rAssetStandards.CurrencyCode);
                    if (amountCur >= RAssetGroup::assetDepreciationMin(rAssetStandards.AssetGroup))
                    {
                        rAssetJournal.createVoucher();
                        rAssetJournal.createTrans(-amountCur,
                                                  rAssetTable,
                                                  transDate,
                                                  rAssetStandards,
                                                  rAssetBudgetModelId,
                                                  strFmt("@GLS116532", assetDeprPeriod));
                        updateDeprPeriod();
                        if (! rAssetBudgetModelId && iterator.getBonusTrans())
                        {
                            this.createDepreciationBonusLine(transDate, iterator.getBonusTrans());
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
public Object dialog()
    {
        DialogRunbase   dialog = super();
        ;
    
        dialog.caption("@GLS116122");
    
        corrGroup.visible(false);
    
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
        public void initParameters(LedgerJournalId      _p1,
                               RAssetTransDate      _p2,
                               RAssetStandards      _p3,
                               RAssetPostingProfile _postingProfileDisposal = '',
                               boolean              _singleOperation        = false)
    {
        super(_p1, _p2, _p3, _postingProfileDisposal, _singleOperation);
        mapAssetCheck = new Map(Types::Container, Types::Enum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
        public void run(QueryRun _queryRun = queryRun)
    {
        mapAssetCheck = new Map(Types::Container, Types::Enum);

        _queryRun.query().dataSourceName(tableStr(RAssetTable)).addRange(fieldNum(RAssetTable, Status)).value(queryValue(RAssetStatus::Suspended));
        super(_queryRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>