<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransferOrderOverviewDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventTransferOrderOverviewDP</c> class is the Report Data Provider class for the
///    <c>InventTransferOrderOverview</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(InventTransferOrderOverview)),
    SRSReportParameterAttribute(classStr(InventTransferOrderOverviewContract))
]
public class  InventTransferOrderOverviewDP extends InventTransferOrderDPBase
{
    InventTransferOrderOverviewTmp  inventTransferOrderOverviewTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getInventTransferOrderOverviewtmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets data from the <c>InventTransferOrderOverviewTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// The data from the <c>InventTransferOrderOverviewTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(InventTransferOrderOverviewTmp))
    ]
    public InventTransferOrderOverviewTmp getInventTransferOrderOverviewtmp()
    {
        select  inventTransferOrderOverviewTmp;
        return  inventTransferOrderOverviewTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates data for the report.
    /// </summary>
    /// <param name="_inventTrans">
    /// The table buffer of the <c>InventTrans</c> table.
    /// </param>
    /// <param name="_inventDim">
    /// The table buffer of the <c>InventDim</c> table.
    /// </param>
    /// <param name="_inventTransferLine">
    /// The table buffer of the <c>InventTransferLine</c> table.
    /// </param>
    /// <param name="_inventTransferTable">
    /// The table buffer of the <c>InventTransferTable</c> table.
    /// </param>
    protected void createData(
        InventTrans _inventTrans,
        InventDim _inventDim,
        InventTransferLine _inventTransferLine,
        InventTransferTable _inventTransferTable)
    {
        showLine = true;

        if (isTaxInTransferOrderEnabled)
        {
            boolean existJournal = false;
            InventTransferJour inventTransferJour;
            while select inventTransferJour
                where inventTransferJour.TransferId == _inventTransferTable.TransferId
            {
                this.processRegistrationNumber(_inventTransferTable.RecId, inventTransferJour);
                this.insertTaxes(_inventTrans, _inventDim, _inventTransferLine, _inventTransferTable, inventTransferJour);
                existJournal = true;
            }

            if (!existJournal)
            {
                this.insertTmpTable(_inventTrans, _inventDim, _inventTransferLine, _inventTransferTable);
            }
        }
        else
        {
            this.insertTmpTable(_inventTrans, _inventDim, _inventTransferLine, _inventTransferTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the invoice taxes information.
    /// </summary>
    /// <param name="_inventTrans">
    /// The table buffer of the <c>InventTrans</c> table.
    /// </param>
    /// <param name="_inventDim">
    /// The table buffer of the <c>InventDim</c> table.
    /// </param>
    /// <param name="_inventTransferLine">
    /// The table buffer of the <c>InventTransferLine</c> table.
    /// </param>
    /// <param name="_inventTransferTable">
    /// The table buffer of the <c>InventTransferTable</c> table.
    /// </param>
    /// <param name="_inventTransferJour">
    /// The table buffer of the <c>InventTransferJour</c> table.
    /// </param>
    protected void insertTaxes(
        InventTrans _inventTrans,
        InventDim _inventDim,
        InventTransferLine _inventTransferLine,
        InventTransferTable _inventTransferTable,
        InventTransferJour _inventTransferJour)
    {
        isNewJournalLine = true;
        if (_inventTransferJour)
        {
            this.processTaxCodeSet(_inventTransferTable.RecId, _inventTransferJour.UpdateType);

            InventTransferJourLine inventTransferJourLine;
            select firstonly inventTransferJourLine
                where inventTransferJourLine.TransferId == _inventTransferLine.TransferId
                    && inventTransferJourLine.LineNum == _inventTransferLine.LineNum
                    && inventTransferJourLine.VoucherId == _inventTransferJour.VoucherId;

            TaxTransferOrderJournalSpec taxSpec = new TaxTransferOrderJournalSpec(inventTransferJourLine.TableId, inventTransferJourLine.RecId);
            taxSpec.parmLanguageId(languageId);

            // It aims to generate data to table <c>TaxSpecTmp</c>.
            boolean existTaxTrans = taxSpec.parmTaxSpec(false);

            // Traverses the record in table <c>TaxSpecTmp</c>.
            while (taxSpec.parmTaxSpec(false))
            {
                this.processSingleTaxTransRecord(taxSpec, _inventTransferJour.UpdateType);
                this.insertTmpTable(_inventTrans, _inventDim, _inventTransferLine, _inventTransferTable);
            }

            if (!existTaxTrans)
            {
                this.insertTmpTable(_inventTrans, _inventDim, _inventTransferLine, _inventTransferTable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the temporary table.
    /// </summary>
    /// <param name="_inventTrans">
    /// The table buffer of the <c>InventTrans</c> table.
    /// </param>
    /// <param name="_inventDim">
    /// The table buffer of the <c>InventDim</c> table.
    /// </param>
    /// <param name="_inventTransferLine">
    /// The table buffer of the <c>InventTransferLine</c> table.
    /// </param>
    /// <param name="_inventTransferTable">
    /// The table buffer of the <c>InventTransferTable</c> table.
    /// </param>
    private void insertTmpTable(
        InventTrans _inventTrans,
        InventDim _inventDim,
        InventTransferLine _inventTransferLine,
        InventTransferTable _inventTransferTable)
    {
        this.initInventTransferOrderOverviewTmp(_inventTrans, _inventDim, _inventTransferLine, _inventTransferTable);
        inventTransferOrderOverviewTmp.insert();
        this.initLineAndTaxLineData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTransferOrderOverviewTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>InventTransferOrderOverviewTmp</c> record.
    /// </summary>
    /// <param name="_inventTrans">
    /// The table buffer of the <c>InventTrans</c> table.
    /// </param>
    /// <param name="_inventDim">
    /// The table buffer of the <c>inventDim</c> table.
    /// </param>
    /// <param name="_inventTransferLine">
    /// The table buffer of the <c>inventTransferLine</c> table.
    /// </param>
    /// <param name="_inventTransferTable">
    /// The table buffer of the <c>inventTransferTable</c> table.
    /// </param>
    protected void initInventTransferOrderOverviewTmp(InventTrans _inventTrans,
                                                      InventDim _inventDim,
                                                      InventTransferLine _inventTransferLine,
                                                      InventTransferTable _inventTransferTable)
    {
        inventTransferOrderOverviewTmp.StatusIssue          = _inventTrans.StatusIssue;
        inventTransferOrderOverviewTmp.TransferId           = _inventTransferLine.TransferId;
        inventTransferOrderOverviewTmp.ItemId               = _inventTransferLine.ItemId;
        inventTransferOrderOverviewTmp.InventLocationIdFrom = _inventTransferTable.InventLocationIdFrom;
        inventTransferOrderOverviewTmp.Quantity             = _inventTrans.Qty;
        inventTransferOrderOverviewTmp.QtyTransfer          = _inventTransferLine.QtyTransfer;
        inventTransferOrderOverviewTmp.QtyShipped           = _inventTransferLine.QtyShipped;
        inventTransferOrderOverviewTmp.QtyShipNow           = _inventTransferLine.QtyShipNow;
        inventTransferOrderOverviewTmp.QtyReceived          = _inventTransferLine.QtyReceived;
        inventTransferOrderOverviewTmp.QtyReceiveNow        = _inventTransferLine.QtyReceiveNow;
        inventTransferOrderOverviewTmp.LineShipDate         = _inventTransferLine.ShipDate;
        inventTransferOrderOverviewTmp.InventLocationIdTo   = _inventTransferTable.InventLocationIdTo;
        inventTransferOrderOverviewTmp.ShipDate             = _inventTransferTable.ShipDate;
        inventTransferOrderOverviewTmp.ReceiveDate          = _inventTransferTable.ReceiveDate;
        inventTransferOrderOverviewTmp.TransferStatus       = _inventTransferTable.TransferStatus;
        inventTransferOrderOverviewTmp.LocationNameFrom     = _inventTransferTable.locationNameFrom();
        inventTransferOrderOverviewTmp.LocationNameTo       = _inventTransferTable.locationNameTo();
        inventTransferOrderOverviewTmp.ItemName             = _inventTransferLine.itemName();
        inventTransferOrderOverviewTmp.LineNum              = _inventTransferLine.LineNum;
        inventTransferOrderOverviewTmp.ShowLine             = showLine;

        if (isTaxInTransferOrderEnabled)
        {
            inventTransferOrderOverviewTmp.FromAddress = _inventTransferTable.fromAddress();
            inventTransferOrderOverviewTmp.ToAddress = _inventTransferTable.toAddress();
            inventTransferOrderOverviewTmp.FromAddressName = _inventTransferTable.FromAddressName;
            inventTransferOrderOverviewTmp.ToAddressName = _inventTransferTable.ToAddressName;
            inventTransferOrderOverviewTmp.UnitPrice = _inventTransferLine.UnitPrice;
            inventTransferOrderOverviewTmp.NetAmount = _inventTransferLine.NetAmount;
            inventTransferOrderOverviewTmp.FromCountryRegionId =
                LogisticsPostalAddress::findRecId(_inventTransferTable.FromPostalAddress).CountryRegionId;
            inventTransferOrderOverviewTmp.ToCountryRegionId =
                LogisticsPostalAddress::findRecId(_inventTransferTable.ToPostalAddress).CountryRegionId;
            inventTransferOrderOverviewTmp.FromRegistrationNumber = fromRegistrationNumber;
            inventTransferOrderOverviewTmp.ToRegistrationNumber = toRegistrationNumber;
            inventTransferOrderOverviewTmp.ShipmentNetAmount = shipmentTaxBaseAmount;
            inventTransferOrderOverviewTmp.ShipmentSumTax = shipmentTaxAmount;
            inventTransferOrderOverviewTmp.ShipmentCurrencyCode = shipmentCurrencyCode;
            inventTransferOrderOverviewTmp.ReceiptNetAmount = receiptTaxBaseAmount;
            inventTransferOrderOverviewTmp.ReceiptSumTax = receiptTaxAmount;
            inventTransferOrderOverviewTmp.ReceiptCurrencyCode = receiptCurrencyCode;
            inventTransferOrderOverviewTmp.PrintCode = taxWriteCode;
            inventTransferOrderOverviewTmp.TaxExemptDescription = exemptDescription;
            inventTransferOrderOverviewTmp.ShowTaxTrans = showTaxTrans;
            inventTransferOrderOverviewTmp.JournalName = taxCodeSource;
        }

        inventTransferOrderOverviewTmp.InventDimFieldsMap::initAllDimensionsFrom(_inventDim);

        if (_inventDim != null && _inventDim.InventDimId != InventDim::inventDimIdBlank())
        {
            InventDimParm inventDimParm;
            inventDimParm.initFromInventDim(_inventDim);
            inventTransferOrderOverviewTmp.InventDimPrint   = FormLetter::inventDimReport(_inventDim, inventDimParm.selectedDimFields().pack(), currentUserLanguage());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by  at runtime.
    /// The method should compute data and populate the data tables that will be returned to .
    /// </remarks>
    public void processReport()
    {
        InventDim               inventDim;
        InventTrans             inventTrans;
        RecId                   currentHeaderRecId;

        InventTransferOrderOverviewContract contract = this.parmDataContract() as InventTransferOrderOverviewContract;

        QueryRun queryRun = new QueryRun(this.parmQuery());
        while (queryRun.next())
        {
            InventTransferLine inventTransferLine = queryRun.get(tableNum(InventTransferLine));

            if (inventTransferLine.TableId == tableNum(InventTransferLine))
            {
                InventTransferTable inventTransferTable = queryRun.get(tableNum(InventTransferTable));

                if (inventTransferTable.RecId != currentHeaderRecId)
                {
                    this.initHeaderData();
                    currentHeaderRecId = inventTransferTable.RecId;
                }

                InventTransOriginId inventTransOriginId = InventTransOrigin::findByInventTransId(inventTransferLine.InventTransId).RecId;
                boolean isRecordAdded = false;

                if (contract.parmShowReservation())
                {
                    while select inventTrans
                        where inventTrans.InventTransOrigin == inventTransOriginId &&
                        inventTrans.StatusIssue >= StatusIssue::Sold &&
                        inventTrans.StatusIssue <= StatusIssue::ReservOrdered &&
                        inventTrans.StatusReceipt == StatusReceipt::None
                    {
                        inventDim = InventDim::find(inventTrans.InventDimId);
                        this.createData(inventTrans, inventDim, inventTransferLine, inventTransferTable);
                        isRecordAdded = true;
                    }
                }

                if (!isRecordAdded)
                {
                    inventDim = inventTransferLine.inventDim();
                    this.createData(null, inventDim, inventTransferLine, inventTransferTable);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>