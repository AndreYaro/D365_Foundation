<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayPFRegister2File</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayPFRegister2File extends RunBaseBatch implements BatchRetryable
{
    str                     directoryName;

    RPayPFRegister          rPayPFRegister;
    RPayPFRegisterTotals    rPayPFRegisterTotals;
    RPayPFBatches           rPayPFBatches;
    RPayPFRegisterAdd       rPayPFRegisterAdd;
    RPayPFRegisterStudents  rPayPFRegisterStudents;
    RPayPFRegisterTrans     rPayPFRegisterTrans;
    RPayPFRegister          prevRPayPFRegister;

    CompanyInfo         companyInfo;
    XMLDocument         xmlDoc;
    XMLElement          xmlLevel_Document;
    str                 fileGUID;
    TransDate           fileDate;
    FileName            reportName;
    GniCode_RU          taxAuthorityCode;
    Counter             maxFileRecords;
    FilePath            filePath;
    boolean             newDocument, newFile;
    boolean             taxByBranch;
    GniCode_RU          taxAuthorityTo, taxAuthorityEventual;
    INN_RU              inn;
    KPPU_RU             kpp, kppBranch;
    OKATO_RU            okato;
    Phone               phone;
    Name                name;

    XMLElement          xmlRoot, xmlHeaderElement, xmlLevel_PFRData, xmlLevel_Batch;

    SysOperationProgress    operationProgress;

    #define.LawYear(2014)
    #File

    #define.CurrentVersion(5)
    #localmacro.CurrentList
        rPayPFRegister
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>aggregatePersData</Name>
				<Source><![CDATA[
    private void aggregatePersData()
    {
        RPayAmount paymentTotal1,
                   paymentTotal2,
                   paymentTotal3,
                   paymentTotal,
                   fundBase1,
                   fundBase2,
                   fundBase3,
                   fundBaseTotal,
                   fundBaseAgreement1,
                   fundBaseAgreement2,
                   fundBaseAgreement3,
                   fundBaseAgreementTotal,
                   overLimitBase1,
                   overLimitBase2,
                   overLimitBase3,
                   overLimitBaseTotal,
                   pfInsTotal;

        RPayPFRegister              rPayPFRegisterOrig;
        RPayPFRegister              rPayPFRegister6, rPayPFRegister9;
        RPayPFRegisterTrans         rPayPFRegisterTransExists;
        int                         corrYear, currYear;
        RPayReportSocialTaxPeriod   corrPeriod, currPeriod;

        RPayPFEmplCategory  currentCategory;
        RHRMEmplId          currentEmplId;

        int                 strCodeNum = 390;

        Date                dateFrom, dateTo, date1, date2, date3;

        RPayPFRegisterPersTmp   rPayPFRegisterPersTmp;

        void writePersTmp(
            RHRMEmplId          _emplId,
            RPayPFEmplCategory  _category,
            int                 _strCodeNum,
            int                 _batchNumber,
            ReportPeriod_RU     _period,
            RPayAmount          _paymentTotal,
            RPayAmount          _fundBaseTotal,
            RPayAmount          _overLimitBaseTotal,
            RPayAmount          _fundBaseAgreementTotal,
            RPayAmount          _pfInsTotal = 0
            )
        {
            ;
            rPayPFRegisterPersTmp = RPayPFRegisterPersTmp::find(
                _emplId,
                _category,
                _strCodeNum,
                _batchNumber,
                _period,
                true);

            rPayPFRegisterPersTmp.BatchNumber       =  _batchNumber;
            rPayPFRegisterPersTmp.EmplId            =  _emplId;
            rPayPFRegisterPersTmp.Category          =  _category;
            rPayPFRegisterPersTmp.PaymentTotal      += _paymentTotal;
            rPayPFRegisterPersTmp.FundBase          += _fundBaseTotal;
            rPayPFRegisterPersTmp.OverLimitBase     += _overLimitBaseTotal;
            rPayPFRegisterPersTmp.StrCodeNum        =  _strCodeNum;
            rPayPFRegisterPersTmp.Period            =  _period;
            rPayPFRegisterPersTmp.FundBaseAgreement += _fundBaseAgreementTotal;
            rPayPFRegisterPersTmp.PFIns             += _pfInsTotal;

            if (rPayPFRegisterPersTmp.RecId)
            {
                rPayPFRegisterPersTmp.update();
            }
            else
            {
                rPayPFRegisterPersTmp.insert();
            }
        }

        void insertData()
        {
            strCodeNum += 10;

            if (currentCategory && currentEmplId)
            {
                writePersTmp(
                    currentEmplId,
                    currentCategory,
                    strCodeNum,
                    rPayPFBatches.Number,
                    datenull(),
                    paymentTotal,
                    fundBaseTotal,
                    overLimitBaseTotal,
                    fundBaseAgreementTotal);

                 writePersTmp(
                    currentEmplId,
                    currentCategory,
                    strCodeNum + 1,
                    rPayPFBatches.Number,
                    date1 + 1,
                    paymentTotal1,
                    fundBase1,
                    overLimitBase1,
                    fundBaseAgreement1);

                 writePersTmp(
                    currentEmplId,
                    currentCategory,
                    strCodeNum + 2,
                    rPayPFBatches.Number,
                    date2 + 1,
                    paymentTotal2,
                    fundBase2,
                    overLimitBase2,
                    fundBaseAgreement2);

                 writePersTmp(
                    currentEmplId,
                    currentCategory,
                    strCodeNum + 3,
                    rPayPFBatches.Number,
                    date3 + 1,
                    paymentTotal3,
                    fundBase3,
                    overLimitBase3,
                    fundBaseAgreement3,
                    pfInsTotal);
            }
        }

        void fillData()
        {
            if (currentCategory != rPayPFRegisterTrans.Category || currentEmplId != rPayPFRegisterTrans.EmplId)
            {
                if (currentEmplId)
                {
                    insertData();

                    if (currentEmplId != rPayPFRegisterTrans.EmplId)
                    {
                        strCodeNum = 390;
                    }
                }

                paymentTotal1 = 0;
                paymentTotal2 = 0;
                paymentTotal3 = 0;
                paymentTotal = 0;
                fundBase1 = 0;
                fundBase2 = 0;
                fundBase3 = 0;
                fundBaseTotal = 0;
                fundBaseAgreement1 = 0;
                fundBaseAgreement2 = 0;
                fundBaseAgreement3 = 0;
                fundBaseAgreementTotal = 0;
                overLimitBase1 = 0;
                overLimitBase2 = 0;
                overLimitBase3 = 0;
                overLimitBaseTotal = 0;
                pfInsTotal = 0;

                currentEmplId = rPayPFRegisterTrans.EmplId;
                currentCategory = rPayPFRegisterTrans.Category;
            }

            if (rPayPFRegisterTrans.LineType == RPayPFLineType::Total)
            {
                paymentTotal += rPayPFRegisterTrans.TotalPayments;
                fundBaseTotal += rPayPFRegisterTrans.FundBase;

                if (rPayPFRegisterTrans.Agreement == RHRMSortOfWork::CivilContract)
                {
                    fundBaseAgreementTotal += rPayPFRegisterTrans.FundBase;
                }

                overLimitBaseTotal += rPayPFRegisterTrans.OverLimitBase;
            }
            else
            {
                if ((rPayPFRegisterTrans.Period > date3) && (rPayPFRegisterTrans.Period <= dateTo))
                {
                    paymentTotal3 += rPayPFRegisterTrans.TotalPayments;
                    fundBase3 += rPayPFRegisterTrans.FundBase;

                    if (rPayPFRegisterTrans.Agreement == RHRMSortOfWork::CivilContract)
                    {
                        fundBaseAgreement3 += rPayPFRegisterTrans.FundBase;
                    }

                    overLimitBase3 += rPayPFRegisterTrans.OverLimitBase;
                }

                if ((rPayPFRegisterTrans.Period > date2) && (rPayPFRegisterTrans.Period <= date3))
                {
                    paymentTotal2 += rPayPFRegisterTrans.TotalPayments;
                    fundBase2 += rPayPFRegisterTrans.FundBase;

                    if (rPayPFRegisterTrans.Agreement == RHRMSortOfWork::CivilContract)
                    {
                        fundBaseAgreement2 += rPayPFRegisterTrans.FundBase;
                    }

                    overLimitBase2 += rPayPFRegisterTrans.OverLimitBase;
                }

                if ((rPayPFRegisterTrans.Period > date1) && (rPayPFRegisterTrans.Period <= date2))
                {
                    paymentTotal1 += rPayPFRegisterTrans.TotalPayments;
                    fundBase1 += rPayPFRegisterTrans.FundBase;

                    if (rPayPFRegisterTrans.Agreement == RHRMSortOfWork::CivilContract)
                    {
                        fundBaseAgreement1 += rPayPFRegisterTrans.FundBase;
                    }

                    overLimitBase1 += rPayPFRegisterTrans.OverLimitBase;
                }

                if ((rPayPFRegisterTrans.Period > date1) && (rPayPFRegisterTrans.Period <= dateTo))
                {
                    pfInsTotal += rPayPFRegisterTrans.PFIns;
                }
            }
        }
        ;
        corrPeriod = this.getTaxPeriodOnDate(rPayPFBatches.Period);
        corrYear = year(rPayPFBatches.Period);

        select firstonly rPayPFRegisterOrig
            where rPayPFRegisterOrig.Year == mkdate(31, 12, corrYear) &&
                  rPayPFRegisterOrig.Period == corrPeriod &&
                  rPayPFRegisterOrig.CorrType == RPayPFCorrectionType::None;

        if (rPayPFBatches.Type == RpayPensionFundExportKindOfCorrection::None)
        {
            currPeriod = rPayPFRegister.Period;
            currYear = year(rPayPFRegister.Year);
        }
        else
        {
            currPeriod = corrPeriod;
            currYear = corrYear;
        }

        dateFrom = mkdate(1, 1, currYear);

        switch (currPeriod)
        {
            case RPayReportSocialTaxPeriod::Quarter:
                dateTo = endmth(mkdate(1, 3, currYear));
                break;
            case RPayReportSocialTaxPeriod::HalfYear:
                dateTo = endmth(mkdate(1, 6, currYear));
                break;
            case RPayReportSocialTaxPeriod::NineMonth:
                dateTo = endmth(mkdate(1, 9, currYear));
                break;
            case RPayReportSocialTaxPeriod::Year:
                dateTo = endmth(mkdate(1, 12, currYear));
                break;
        }

        delete_from rPayPFRegisterPersTmp
            where rPayPFRegisterPersTmp.BatchNumber == rPayPFBatches.Number;

        date3 = endmth(prevmth(dateTo));
        date2 = endmth(prevmth(date3));
        date1 = endmth(prevmth(date2));

        ttsbegin;
        if (rPayPFBatches.Type == RpayPensionFundExportKindOfCorrection::None)
        {
            while select rPayPFRegisterTrans
                order by rPayPFRegisterTrans.EmplId, rPayPFRegisterTrans.Category
                where ((rPayPFRegisterTrans.RegisterRefRecId == rPayPFRegister.RecId &&
                        (rPayPFRegisterTrans.BatchRefRecId == rPayPFBatches.RecId ||
                         rPayPFRegisterTrans.Type != RpayPensionFundExportKindOfCorrection::None))) &&
                      rPayPFRegisterTrans.ListCode == RPayPFListCode::Normal
            exists join rPayPFRegisterTransExists
                where rPayPFRegisterTransExists.EmplId == rPayPFRegisterTrans.EmplId &&
                      rPayPFRegisterTransExists.LineType == RPayPFLineType::Month &&
                      (rPayPFRegisterTransExists.RegisterRefRecId == rPayPFRegister.RecId &&
                        rPayPFRegisterTransExists.BatchRefRecId == rPayPFBatches.RecId)

            {
                fillData();
            }

            if (currentEmplId)
            {
                insertData();
            }
        }
        else
        {
            if (rPayPFRegisterOrig.Period < RPayReportSocialTaxPeriod::HalfYear &&
                rPayPFRegister.Period > RPayReportSocialTaxPeriod::HalfYear)
            {
                rPayPFRegister6 = RPayPFRegister::find(rPayPFRegister.Year, RPayReportSocialTaxPeriod::HalfYear);
            }

            if (rPayPFRegisterOrig.Period < RPayReportSocialTaxPeriod::NineMonth &&
                rPayPFRegister.Period > RPayReportSocialTaxPeriod::NineMonth)
            {
                rPayPFRegister9 = RPayPFRegister::find(rPayPFRegister.Year, RPayReportSocialTaxPeriod::NineMonth);
            }

            while select rPayPFRegisterTrans
                order by rPayPFRegisterTrans.EmplId, rPayPFRegisterTrans.Category
                where (rPayPFRegisterTrans.BatchRefRecId == rPayPFBatches.RecId &&
                       (rPayPFRegisterTrans.RegisterRefRecId == rPayPFRegister.RecId ||
                        rPayPFRegisterTrans.RegisterRefRecId == prevRPayPFRegister.RecId) ||
                      ((rPayPFRegisterTrans.RegisterRefRecId == rPayPFRegisterOrig.RecId ||
                        ((rPayPFRegisterTrans.RegisterRefRecId == rPayPFRegister6.RecId ||
                         rPayPFRegisterTrans.RegisterRefRecId == rPayPFRegister9.RecId) &&
                         rPayPFRegisterTrans.Type == RpayPensionFundExportKindOfCorrection::Correctional)) &&
                       rPayPFBatches.Type == RpayPensionFundExportKindOfCorrection::Correctional)) &&
                      rPayPFRegisterTrans.ListCode == RPayPFListCode::Normal
            exists join rPayPFRegisterTransExists
                where rPayPFRegisterTransExists.EmplId == rPayPFRegisterTrans.EmplId &&
                      (rPayPFRegisterTransExists.BatchRefRecId == rPayPFBatches.RecId &&
                       (rPayPFRegisterTransExists.RegisterRefRecId == rPayPFRegister.RecId ||
                        rPayPFRegisterTransExists.RegisterRefRecId == prevRPayPFRegister.RecId))
            {
                fillData();
            }

            if (currentEmplId)
            {
                insertData();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>aggregatePersDataWorkCond</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void aggregatePersDataWorkCond()
    {
        RPayAmount paymentTotal1lc1,
                   paymentTotal2lc1,
                   paymentTotal3lc1,
                   paymentTotallc1,
                   paymentTotal1lc2,
                   paymentTotal2lc2,
                   paymentTotal3lc2,
                   paymentTotallc2;

        RPayPFRegister              rPayPFRegisterOrig;
        RPayPFRegister              rPayPFRegister6, rPayPFRegister9;
        RPayPFRegisterTrans         rPayPFRegisterTransExists;
        int                         corrYear, currYear;
        RPayReportSocialTaxPeriod   corrPeriod, currPeriod;

        RPayPFWorkCondCode  currentWorkCode;
        RHRMEmplId          currentEmplId;

        int                 strCodeNum = 690;

        Date                dateFrom, dateTo, date1, date2, date3;

        RPayPFRegisterPersWKTmp   rPayPFRegisterPersTmp;

        void writePersTmp(
            RHRMEmplId          _emplId,
            RPayPFWorkCondCode  _workCondCode,
            int                 _strCodeNum,
            int                 _batchNumber,
            ReportPeriod_RU     _period,
            RPayAmount          _paymentTotallc1,
            RPayAmount          _paymentTotallc2
            )
        {
            ;
            rPayPFRegisterPersTmp = RPayPFRegisterPersWKTmp::find(
                _emplId,
                _workCondCode,
                _strCodeNum,
                _batchNumber,
                _period,
                true);

            rPayPFRegisterPersTmp.BatchNumber       =  _batchNumber;
            rPayPFRegisterPersTmp.EmplId            =  _emplId;
            rPayPFRegisterPersTmp.WorkCondCode      =  _workCondCode;
            rPayPFRegisterPersTmp.PaymentTotallc1   += _paymentTotallc1;
            rPayPFRegisterPersTmp.PaymentTotallc2   += _paymentTotallc2;
            rPayPFRegisterPersTmp.StrCodeNum        =  _strCodeNum;
            rPayPFRegisterPersTmp.Period            =  _period;

            if (rPayPFRegisterPersTmp.RecId)
            {
                rPayPFRegisterPersTmp.update();
            }
            else
            {
                rPayPFRegisterPersTmp.insert();
            }
        }

        void insertData()
        {
            strCodeNum += 10;

            if (currentEmplId)
            {
                writePersTmp(
                    currentEmplId,
                    currentWorkCode,
                    strCodeNum,
                    rPayPFBatches.Number,
                    datenull(),
                    paymentTotallc1,
                    paymentTotallc2);

                writePersTmp(
                    currentEmplId,
                    currentWorkCode,
                    strCodeNum + 1,
                    rPayPFBatches.Number,
                    date1 + 1,
                    paymentTotal1lc1,
                    paymentTotal1lc2);

                writePersTmp(
                    currentEmplId,
                    currentWorkCode,
                    strCodeNum + 2,
                    rPayPFBatches.Number,
                    date2 + 1,
                    paymentTotal2lc1,
                    paymentTotal2lc2);

                writePersTmp(
                    currentEmplId,
                    currentWorkCode,
                    strCodeNum + 3,
                    rPayPFBatches.Number,
                    date3 + 1,
                    paymentTotal3lc1,
                    paymentTotal3lc2);
            }
        }

        void fillData()
        {
            if (currentWorkCode != rPayPFRegisterTrans.WorkCondCode || currentEmplId != rPayPFRegisterTrans.EmplId)
            {
                if (currentEmplId)
                {
                    insertData();

                    if (currentEmplId != rPayPFRegisterTrans.EmplId)
                    {
                        strCodeNum = 690;
                    }
                }

                paymentTotal1lc1 = 0;
                paymentTotal2lc1 = 0;
                paymentTotal3lc1 = 0;

                paymentTotallc1 = 0;

                paymentTotal1lc2 = 0;
                paymentTotal2lc2 = 0;
                paymentTotal3lc2 = 0;

                paymentTotallc2 = 0;

                currentEmplId = rPayPFRegisterTrans.EmplId;
                currentWorkCode = rPayPFRegisterTrans.WorkCondCode;
            }

            if (rPayPFRegisterTrans.LineType == RPayPFLineType::Total)
            {
                if (rPayPFRegisterTrans.ListCode == RPayPFListCode::Extra1)
                {
                    paymentTotallc1 += rPayPFRegisterTrans.TotalPayments;
                }

                if (rPayPFRegisterTrans.ListCode == RPayPFListCode::Extra2)
                {
                    paymentTotallc2 += rPayPFRegisterTrans.TotalPayments;
                }
            }
            else
            {
                if ((rPayPFRegisterTrans.Period > date3) && (rPayPFRegisterTrans.Period <= dateTo))
                {
                    if (rPayPFRegisterTrans.ListCode == RPayPFListCode::Extra1)
                    {
                        paymentTotal3lc1 += rPayPFRegisterTrans.TotalPayments;
                    }

                    if (rPayPFRegisterTrans.ListCode == RPayPFListCode::Extra2)
                    {
                        paymentTotal3lc2 += rPayPFRegisterTrans.TotalPayments;
                    }
                }

                if ((rPayPFRegisterTrans.Period > date2) && (rPayPFRegisterTrans.Period <= date3))
                {
                    if (rPayPFRegisterTrans.ListCode == RPayPFListCode::Extra1)
                    {
                        paymentTotal2lc1 += rPayPFRegisterTrans.TotalPayments;
                    }

                    if (rPayPFRegisterTrans.ListCode == RPayPFListCode::Extra2)
                    {
                        paymentTotal2lc2 += rPayPFRegisterTrans.TotalPayments;
                    }
                }

                if ((rPayPFRegisterTrans.Period > date1) && (rPayPFRegisterTrans.Period <= date2))
                {
                    if (rPayPFRegisterTrans.ListCode == RPayPFListCode::Extra1)
                    {
                        paymentTotal1lc1 += rPayPFRegisterTrans.TotalPayments;
                    }

                    if (rPayPFRegisterTrans.ListCode == RPayPFListCode::Extra2)
                    {
                        paymentTotal1lc2 += rPayPFRegisterTrans.TotalPayments;
                    }
                }
            }
        }
        ;
        corrPeriod = this.getTaxPeriodOnDate(rPayPFBatches.Period);
        corrYear = year(rPayPFBatches.Period);

        select firstonly rPayPFRegisterOrig
            where rPayPFRegisterOrig.Year == mkdate(31, 12, corrYear) &&
                  rPayPFRegisterOrig.Period == corrPeriod &&
                  rPayPFRegisterOrig.CorrType == RPayPFCorrectionType::None;

        if (rPayPFBatches.Type == RpayPensionFundExportKindOfCorrection::None)
        {
            currPeriod = rPayPFRegister.Period;
            currYear = year(rPayPFRegister.Year);
        }
        else
        {
            currPeriod = corrPeriod;
            currYear = corrYear;
        }

        dateFrom = mkdate(1, 1, currYear);

        switch (currPeriod)
        {
            case RPayReportSocialTaxPeriod::Quarter:
                dateTo = endmth(mkdate(1, 3, currYear));
                break;
            case RPayReportSocialTaxPeriod::HalfYear:
                dateTo = endmth(mkdate(1, 6, currYear));
                break;
            case RPayReportSocialTaxPeriod::NineMonth:
                dateTo = endmth(mkdate(1, 9, currYear));
                break;
            case RPayReportSocialTaxPeriod::Year:
                dateTo = endmth(mkdate(1, 12, currYear));
                break;
        }

        delete_from rPayPFRegisterPersTmp
            where rPayPFRegisterPersTmp.BatchNumber == rPayPFBatches.Number;

        date3 = endmth(prevmth(dateTo));
        date2 = endmth(prevmth(date3));
        date1 = endmth(prevmth(date2));

        ttsbegin;
        if (rPayPFBatches.Type == RpayPensionFundExportKindOfCorrection::None)
        {
            while select rPayPFRegisterTrans
                order by rPayPFRegisterTrans.EmplId, rPayPFRegisterTrans.WorkCondCode
                where ((rPayPFRegisterTrans.RegisterRefRecId == rPayPFRegister.RecId &&
                        (rPayPFRegisterTrans.BatchRefRecId == rPayPFBatches.RecId ||
                         rPayPFRegisterTrans.Type != RpayPensionFundExportKindOfCorrection::None))) &&
                      rPayPFRegisterTrans.ListCode != RPayPFListCode::Normal
            exists join rPayPFRegisterTransExists
                where rPayPFRegisterTransExists.EmplId == rPayPFRegisterTrans.EmplId &&
                      rPayPFRegisterTransExists.LineType == RPayPFLineType::Month &&
                      (rPayPFRegisterTransExists.RegisterRefRecId == rPayPFRegister.RecId &&
                        rPayPFRegisterTransExists.BatchRefRecId == rPayPFBatches.RecId)

            {
                fillData();
            }

            if (currentEmplId)
            {
                insertData();
            }
        }
        else
        {
            if (rPayPFRegisterOrig.Period < RPayReportSocialTaxPeriod::HalfYear &&
                rPayPFRegister.Period > RPayReportSocialTaxPeriod::HalfYear)
            {
                rPayPFRegister6 = RPayPFRegister::find(rPayPFRegister.Year, RPayReportSocialTaxPeriod::HalfYear);
            }

            if (rPayPFRegisterOrig.Period < RPayReportSocialTaxPeriod::NineMonth &&
                rPayPFRegister.Period > RPayReportSocialTaxPeriod::NineMonth)
            {
                rPayPFRegister9 = RPayPFRegister::find(rPayPFRegister.Year, RPayReportSocialTaxPeriod::NineMonth);
            }

            while select rPayPFRegisterTrans
                order by rPayPFRegisterTrans.EmplId, rPayPFRegisterTrans.WorkCondCode
                where (rPayPFRegisterTrans.BatchRefRecId == rPayPFBatches.RecId &&
                       (rPayPFRegisterTrans.RegisterRefRecId == rPayPFRegister.RecId ||
                        rPayPFRegisterTrans.RegisterRefRecId == prevRPayPFRegister.RecId) ||
                      ((rPayPFRegisterTrans.RegisterRefRecId == rPayPFRegisterOrig.RecId ||
                        ((rPayPFRegisterTrans.RegisterRefRecId == rPayPFRegister6.RecId ||
                         rPayPFRegisterTrans.RegisterRefRecId == rPayPFRegister9.RecId) &&
                         rPayPFRegisterTrans.Type == RpayPensionFundExportKindOfCorrection::Correctional)) &&
                       rPayPFBatches.Type == RpayPensionFundExportKindOfCorrection::Correctional)) &&
                      rPayPFRegisterTrans.ListCode != RPayPFListCode::Normal
            exists join rPayPFRegisterTransExists
                where rPayPFRegisterTransExists.EmplId == rPayPFRegisterTrans.EmplId &&
                      (rPayPFRegisterTransExists.BatchRefRecId == rPayPFBatches.RecId &&
                       (rPayPFRegisterTransExists.RegisterRefRecId == rPayPFRegister.RecId ||
                        rPayPFRegisterTransExists.RegisterRefRecId == prevRPayPFRegister.RecId))

            {
                fillData();
            }

            if (currentEmplId)
            {
                insertData();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amount2str</Name>
				<Source><![CDATA[
    private str amount2str(anytype _value)
    {
        return strreplace(System.String::Format('{0:0.00}', _value), ',', '.');
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendXMLElement</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected XMLElement appendXMLElement(XMLElement _toXmlElement, str _elementName, str _text = '')
    {
        XMLElement  xmlElement;
        ;

        xmlElement = xmlDoc.createElement(_elementName);

        if (_text)
        {
            xmlElement.text(_text);
        }

        _toXmlElement.appendChild(xmlElement);

        return xmlElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCompanyFile</Name>
				<Source><![CDATA[
    private void createCompanyFile()
    {
        this.insertHeader();
        this.fillDocument();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDirectory</Name>
				<Source><![CDATA[
    private void createDirectory()
    {
        directoryName = strupr(WinApi::createGUID());
        filePath = rPayPFRegister.FilePath + #FilePathDelimiter + directoryName;

        try
        {
            Winapi::createDirectory(filePath);
        }
        catch (Exception::CLRError)
        {
            throw error(AifUtil::getClrErrorMessage());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFilesByPersons</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createFilesByPersons()
    {
        while select RPayPFBatches
            where RPayPFBatches.RegisterRefRecId == rPayPFRegister.RecId &&
                  RPayPFBatches.Period >= mkdate(1, 1, #LawYear)
        {
            this.insertPersHeader(RPayPFBatches.Number);
            this.insertPersBatch();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>date2quarter</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    int date2quarter(Date _date)
    {
        int q;
        ;

        q = (date2qtr(_date) mod 4) * 3;

        return q;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected FileName fileName(int _batchNum = 0)
    {
        FileName         fileName;
        str 5               packNum = num2str0(_batchNum ? _batchNum : rPayPFRegister.FirstBatchNum, 5);
        ;

        fileName = strFmt('PFR-700-Y-%1-ORG-%2-DCK-%3-DPT-000000-DCK-00000.XML',
                          year(rPayPFRegister.Year),
                          companyInfo.PFRegNum_RU,
                          packNum);

        return fileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePers</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    str fileNamePers(int _batchNumber)
    {
        FileName         fileName;
        str 5               packNum = num2str0(_batchNumber, 5);
        ;

        fileName = strFmt('PFR-700-Y-%1-ORG-%2-DCK-%3-DPT-000000-DCK-00000.XML',
                          year(rPayPFRegister.Year),
                          companyInfo.PFRegNum_RU,
                          packNum);

        return fileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDocument</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillDocument()
    {
        ;

        companyInfo = CompanyInfo::find();

        this.insertBatch();
        this.insertSection1();
        this.insertSection2();
        this.insertSection4();
        this.insertSection5();
        this.insertFooter();

        if (xmlDoc)
        {
            xmlDoc.save(filePath + #FilePathDelimiter + this.fileName());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCertTypeStr</Name>
				<Source><![CDATA[
    private str getCertTypeStr()
    {
        str ret;

        switch (rPayPFRegister.CertType)
        {
            case RPayPFCertType::Attestation:
                ret = 'РЕЗУЛЬТАТЫ АТТЕСТАЦИИ РАБОЧИХ МЕСТ';
                break;
            case RPayPFCertType::SpecEstimationAndAttestation:
                ret = 'РЕЗУЛЬТАТЫ СПЕЦОЦЕНКИ И РЕЗУЛЬТАТЫ АТТЕСТАЦИИ РАБОЧИХ МЕСТ';
                break;
            case RPayPFCertType::SpecialEstimation:
                ret = 'РЕЗУЛЬТАТЫ СПЕЦОЦЕНКИ';
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineTypeStr</Name>
				<Source><![CDATA[
    private str getLineTypeStr()
    {
        str ret;

        if (RPayPFRegisterTrans.LineType == RPayPFLineType::Total)
        {
            ret = 'ИТОГ';
        }

        if (RPayPFRegisterTrans.LineType == RPayPFLineType::Month)
        {
            ret = 'МЕСЦ';
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineTypeStrAggregated</Name>
				<Source><![CDATA[
    private str getLineTypeStrAggregated(int _strNum)
    {
        str ret;

        if (_strNum mod 10 == 0)
        {
            ret = 'ИТОГ';
        }
        else
        {
            ret = 'МЕСЦ';
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodCodeOnDate</Name>
				<Source><![CDATA[
    private str getPeriodCodeOnDate(ReportPeriod_RU _period)
    {
        int mth = mthOfYr(_period);

        if (mth <= 3)
        {
            return '3';
        }

        if (mth <= 6)
        {
            return '6';
        }

        if (mth <= 9)
        {
            return '9';
        }

        return '0';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodOnDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayReportSocialTaxPeriod getPeriodOnDate(ReportPeriod_RU _period)
    {
        int mth = mthOfYr(_period);

        if (mth <= 3)
        {
            return RPayReportSocialTaxPeriod::Quarter;
        }

        if (mth <= 6)
        {
            return RPayReportSocialTaxPeriod::HalfYear;
        }

        if (mth <= 9)
        {
            return RPayReportSocialTaxPeriod::NineMonth;
        }

        return RPayReportSocialTaxPeriod::Year;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSectionLineColValue</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    real getSectionLineColValue(int _section, int _line, int _col, str 10 _addInfo = '')
    {
        RPayPFRegisterTotals    totals;
        ;

        select totals where
            totals.LineNum == _line &&
            totals.ColNum == _col && (! _addInfo || totals.AddInfo == _addInfo) && totals.RegisterRefRecId == rPayPFRegister.RecId;

        return totals.Value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSectionLineColValueInt</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    int getSectionLineColValueInt(int _section, int _line, int _col, str 10 _addInfo = '')
    {
        int                    value;

        value = real2int(this.getSectionLineColValue(_section, _line, _col, _addInfo));

        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSectionLineColValueIntStr</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    str getSectionLineColValueIntStr(int _section, int _line, int _col, str 10 _addInfo = '')
    {
    ;
        return this.intAmount2str(this.getSectionLineColValueInt(_section, _line, _col, _addInfo));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSectionLineColValueStr</Name>
				<Source><![CDATA[
    private str getSectionLineColValueStr(int _section, int _line, int _col, str 10 _addInfo = '')
    {
        return this.amount2str(this.getSectionLineColValue(_section, _line, _col, _addInfo));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxPeriodOnDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayReportSocialTaxPeriod getTaxPeriodOnDate(ReportPeriod_RU _period)
    {
        int mth = mthOfYr(_period);

        if (mth <= 3)
        {
            return RPayReportSocialTaxPeriod::Quarter;
        }

        if (mth <= 6)
        {
            return RPayReportSocialTaxPeriod::HalfYear;
        }

        if (mth <= 9)
        {
            return RPayReportSocialTaxPeriod::NineMonth;
        }

        return RPayReportSocialTaxPeriod::Year;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTypeStr</Name>
				<Source><![CDATA[
    private str getTypeStr()
    {
        str ret;

        switch (rPayPFBatches.Type)
        {
            case RpayPensionFundExportKindOfCorrection::None:
                ret = 'ИСХОДНАЯ';
                break;
            case RpayPensionFundExportKindOfCorrection::Correctional:
                ret = 'КОРРЕКТИРУЮЩАЯ';
                break;
            case RpayPensionFundExportKindOfCorrection::Cancellative:
                ret = 'ОТМЕНЯЮЩАЯ';
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initData</Name>
				<Source><![CDATA[
    private void initData()
    {
        RPayPFRegisterPersTmp       rPayPFRegisterPersTmp;
        RPayPFRegisterPersWKTmp     RPayPFRegisterPersWKTmp;
        int                         prevYear;
        RPayReportSocialTaxPeriod   prevPeriod;

        delete_from RPayPFRegisterPersTmp;
        delete_from RPayPFRegisterPersWKTmp;

        [prevPeriod, prevYear] = rPayPFRegister.getPreviousPeriod();

        select firstonly recId from prevRPayPFRegister
            order by CorrNum desc
            where prevRPayPFRegister.Year == mkdate(31, 12, prevYear) &&
                  prevRPayPFRegister.Period == prevPeriod &&
                  prevRPayPFRegister.CorrType != RPayPFCorrectionType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionsLineColMap</Name>
				<Source><![CDATA[
    private void initSectionsLineColMap()
    {
        container sectionsSturcture;

        sectionsSturcture += [1,                    // section number
                             [100,                  // line code
                                   [[1, 100, 3],    // section, line, column
                                    [1, 100, 4],
                                    [1, 100, 5],
                                    [1, 100, 6],
                                    [1, 100, 7],
                                    [1, 100, 8]]]];
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBatch</Name>
				<Source><![CDATA[
    private void insertBatch()
    {
        XMLElement  xml;

        xmlLevel_Batch = this.appendXMLElement(xmlRoot, 'ПачкаВходящихДокументов');
        xmlLevel_Batch.setAttribute('Окружение', 'Единичный запрос');

        xmlLevel_PFRData = this.appendXMLElement(xmlLevel_Batch, 'РАСЧЕТ_ПО_СТРАХОВЫМ_ВЗНОСАМ_НА_ОПС_И_ОМС_ПЛАТЕЛЬЩИКАМИ_ПРОИЗВОДЯЩИМИ_ВЫПЛАТЫ_ФЛ_2014');

        xml = this.appendXMLElement(xmlLevel_PFRData, 'НомерВпачке', '1');
        xml = this.appendXMLElement(xmlLevel_PFRData, 'РегистрационныйНомерПФР', companyInfo.PFRegNum_RU);
        xml = this.appendXMLElement(xmlLevel_PFRData, 'НомерКорректировки', num2str0(str2int(rpayPfRegister.CorrNum), 3));
        xml = this.appendXMLElement(xmlLevel_PFRData, 'КодОтчетногоПериода', this.reportPeriodCode(rpayPfRegister.Period));
        xml = this.appendXMLElement(xmlLevel_PFRData, 'КалендарныйГод', int2str(year(rpayPfRegister.year)));

        if (rpayPfRegister.Termination == NoYes::Yes)
        {
            xml = this.appendXMLElement(xmlLevel_PFRData, 'ПрекращениеДеятельности', 'Л');
        }

        xml = this.appendXMLElement(xmlLevel_PFRData, 'ТипКорректировки', this.rPayPFCorrectionType2Code(rpayPfRegister.CorrType));
        xml = this.appendXMLElement(xmlLevel_PFRData, 'НаименованиеОрганизации', strupr(companyInfo.Name));

        xml = this.appendXMLElement(xmlLevel_PFRData, 'ИННсимвольный', CompanyInfoHelper::partyINNasOfDate_RU(companyInfo, rPayPFRegister.ReportDate));
        xml = this.appendXMLElement(xmlLevel_PFRData, 'КПП', CompanyInfoHelper::partyKPPasOfDate_RU(companyInfo, rPayPFRegister.ReportDate));
        xml = this.appendXMLElement(xmlLevel_PFRData, 'КодПоОКВЭД', CompanyInfoHelper::partyOKDPasOfDate_RU(companyInfo, rPayPFRegister.ReportDate));
        xml = this.appendXMLElement(xmlLevel_PFRData, 'Телефон', companyInfo.phone());

        xml = this.appendXMLElement(xmlLevel_PFRData, 'КоличествоЗЛ', this.intAmount2str(rpayPfRegister.InsuredPersonsNum));
        xml = this.appendXMLElement(xmlLevel_PFRData, 'СреднесписочнаяЧисленность', this.intAmount2str(rpayPfRegister.AverageHeadCount));
        xml = this.appendXMLElement(xmlLevel_PFRData, 'КоличествоСтраниц', '3');
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFooter</Name>
				<Source><![CDATA[
    private void insertFooter()
    {
        XmlElement      xmlLevel_SignerFio;
        DirPersonName   dirPersonName;

        dirPersonName = RHRMEMpLTable::find(rPayPFRegister.Signer).personTable().dirPersonName();

        this.appendXMLElement(xmlLevel_PFRData, 'ЛицоПодтверждающееСведения', strfmt("%1", enum2int(rPayPFRegister.SignerCategory) + 1));

        xmlLevel_SignerFio = this.appendXMLElement(xmlLevel_PFRData, 'ФИОлицаПодтверждающегоСведения');

        this.appendXMLElement(xmlLevel_SignerFio, 'Фамилия', strUpr(dirPersonName.LastName));
        this.appendXMLElement(xmlLevel_SignerFio, 'Имя', strUpr(dirPersonName.FirstName));
        this.appendXMLElement(xmlLevel_SignerFio, 'Отчество', strUpr(dirPersonName.MiddleName));

        this.appendXMLElement(xmlLevel_PFRData, 'ДатаЗаполнения', date2str(rPayPFRegister.ReportDate, 123, 2, 2, 2, 2, 4, DateFlags::FormatAll));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertHeader</Name>
				<Source><![CDATA[
    private void insertHeader()
    {
        XMLElement xml, xmlLevel_FileHeader, xmlLevel_FileSourceProgram;
        ;

        xmlDoc = XMLDocument::newXML('<?xml version="1.0" encoding = "windows-1251"?>\n' +
                                     '<ФайлПФР>\n' +
                                     '<ИмяФайла>' + this.fileName() + '</ИмяФайла>' +
                                     '</ФайлПФР>',
                                     true);

        xmlRoot = xmlDoc.documentElement();

        xmlLevel_FileHeader = this.appendXMLElement(xmlRoot, 'ЗаголовокФайла');
        xml = this.appendXMLElement(xmlLevel_FileHeader, 'ВерсияФормата', '07.00');

        xml = this.appendXMLElement(xmlLevel_FileHeader, 'ТипФайла', 'ВНЕШНИЙ');

        xmlLevel_FileSourceProgram = this.appendXMLElement(xmlLevel_FileHeader, 'ПрограммаПодготовкиДанных');
        xml = this.appendXMLElement(xmlLevel_FileSourceProgram, 'НазваниеПрограммы', 'MICROSOFT DYNAMICS AX');
        xml = this.appendXMLElement(xmlLevel_FileSourceProgram, 'Версия', '5.0');
        xml = this.appendXMLElement(xmlLevel_FileHeader, 'ИсточникДанных', 'СТРАХОВАТЕЛЬ');
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPersBatch</Name>
				<Source><![CDATA[
    private void insertPersBatch()
    {
        XMLElement  xml,
                    xmlLevel_batchCreator,
                    xmlLevel_taxNumber,
                    xmlLevel_docContent,
                    xmlLevel_docExistance,
                    xmlLevel_reportPeriod,
                    xmlLevel_fio;

        RPayPFRegisterPersTmp   rPayPFRegisterPersTmp,
                                rPayPFRegisterPersTmpSum;

        RPayReportSocialTaxPeriod   corrPeriod;
        int                         corrYear;
        RPayAmount                  batchFundBase, batchPFIns;

        RHRMEmplTable       emplTable;
        DirPersonName       dirPersonName;

        int lineNumber = 1;
        int numberInPack = 1;

        xmlLevel_Batch = this.appendXMLElement(xmlRoot, 'ПачкаВходящихДокументов');
        xmlLevel_Batch.setAttribute('Стадия', 'До обработки');
        xmlLevel_Batch.setAttribute('Окружение', 'В составе файла');

        xmlLevel_PFRData = this.appendXMLElement(xmlLevel_Batch, 'СВЕДЕНИЯ_ПО_ПАЧКЕ_ДОКУМЕНТОВ_РАЗДЕЛА_6');

        this.appendXMLElement(xmlLevel_PFRData, 'НомерВпачке', strfmt('%1', numberInPack));
        xml = this.appendXMLElement(xmlLevel_PFRData, 'ТипВходящейОписи', 'ОПИСЬ ПАЧКИ');

        xmlLevel_batchCreator = this.appendXMLElement(xmlLevel_PFRData, 'СоставительПачки');
        xmlLevel_taxNumber = this.appendXMLElement(xmlLevel_BatchCreator, 'НалоговыйНомер');
        xml = this.appendXMLElement(xmlLevel_taxNumber, 'ИНН', companyInfo.partyINNasOfDate_RU(rPayPFRegister.ReportDate));
        xml = this.appendXMLElement(xmlLevel_taxNumber, 'КПП', companyInfo.partyKPPasOfDate_RU(rPayPFRegister.ReportDate));

        this.appendXMLElement(xmlLevel_batchCreator, 'НаименованиеКраткое', strupr(companyInfo.Name));
        this.appendXMLElement(xmlLevel_batchCreator, 'РегистрационныйНомер', companyInfo.PFRegNum_RU);

        xmlLevel_batchCreator = this.appendXMLElement(xmlLevel_PFRData, 'НомерПачки');
        this.appendXMLElement(xmlLevel_batchCreator, 'Основной', int2str(rPayPFBatches.Number));

        xmlLevel_docContent = this.appendXMLElement(xmlLevel_PFRData, 'СоставДокументов');
        this.appendXMLElement(xmlLevel_docContent, 'Количество', '1');

        xmlLevel_docExistance = this.appendXMLElement(xmlLevel_docContent, 'НаличиеДокументов');
        this.appendXMLElement(xmlLevel_docExistance, 'ТипДокумента', 'СВЕДЕНИЯ_О_СУММЕ_ВЫПЛАТ_И_СТРАХОВОМ_СТАЖЕ_ЗЛ');

        this.appendXMLElement(xmlLevel_docExistance, 'Количество', int2str(rPayPFBatches.Qty));

        this.appendXMLElement(xmlLevel_PFRData, 'ДатаСоставления', date2str(rPayPFRegister.ReportDate, 123, 2, 2, 2, 2, 4, DateFlags::FormatAll));
        this.appendXMLElement(xmlLevel_PFRData, 'ТипСведений', this.getTypeStr());

        xmlLevel_reportPeriod = this.appendXMLElement(xmlLevel_PFRData, 'ОтчетныйПериод');
        this.appendXMLElement(xmlLevel_reportPeriod, 'Квартал', this.reportPeriodCode(rPayPFRegister.Period));
        this.appendXMLElement(xmlLevel_reportPeriod, 'Год', int2str(year(rPayPFRegister.Year)));
        this.appendXMLElement(xmlLevel_reportPeriod, 'Название', this.reportPeriodStr(year(rPayPFRegister.Year), rPayPFRegister.Period));

        if (rPayPFBatches.Type != RpayPensionFundExportKindOfCorrection::None)
        {
            corrPeriod = this.getTaxPeriodOnDate(rPayPFBatches.Period);
            corrYear = year(rPayPFBatches.Period);
            xmlLevel_reportPeriod = this.appendXMLElement(xmlLevel_PFRData, 'КорректируемыйОтчетныйПериод');
            this.appendXMLElement(xmlLevel_reportPeriod, 'Квартал', this.reportPeriodCode(corrPeriod));
            this.appendXMLElement(xmlLevel_reportPeriod, 'Год', int2str(corrYear));
            this.appendXMLElement(xmlLevel_reportPeriod, 'Название', this.reportPeriodStr(corrYear, corrPeriod));
        }

        this.aggregatePersData();
        this.aggregatePersDataWorkCond();

        if (rPayPFBatches.Type != RpayPensionFundExportKindOfCorrection::None)
        {
            select sum(FundBase), sum(PFIns) from rPayPFRegisterPersTmpSum
                where rPayPFRegisterPersTmpSum.BatchNumber == rPayPFBatches.Number &&
                      rPayPFRegisterPersTmpSum.StrCodeNum mod 10 != 0;

            batchFundBase = rPayPFRegisterPersTmpSum.FundBase;
            batchPFIns = rPayPFRegisterPersTmpSum.PFIns;
        }
        else
        {
            batchFundBase = rPayPFBatches.FundBase;
            batchPFIns = rPayPFBatches.PFIns;
        }

        this.appendXMLElement(xmlLevel_PFRData, 'БазаДляНачисленияСтраховыхВзносовНеПревышающаяПредельную', this.amount2str(batchFundBase));
        this.appendXMLElement(xmlLevel_PFRData, 'СтраховыхВзносовОПС', this.amount2str(batchPFIns));

        lineNumber = 1;

        while select rPayPFRegisterPersTmp
            order by rPayPFRegisterPersTmp.EmplId, rPayPFRegisterPersTmp.StrCodeNum
            where rPayPFRegisterPersTmp.BatchNumber == rPayPFBatches.Number
        {
            if (emplTable.EmployeeId != rPayPFRegisterPersTmp.EmplId)
            {
                if (emplTable)
                {
                    select sum(PFIns) from rPayPFRegisterPersTmpSum
                        where rPayPFRegisterPersTmpSum.EmplId == emplTable.EmployeeId
                           && rPayPFRegisterPersTmpSum.BatchNumber == rPayPFBatches.Number;

                    if (rPayPFBatches.Type != RpayPensionFundExportKindOfCorrection::Cancellative)
                    {
                        this.appendXMLElement(xmlLevel_PFRData, 'СуммаВзносовНаОПС',  this.amount2str(rPayPFRegisterPersTmpSum.PFIns));

                        this.insertPersCorrections(emplTable.EmployeeId);
                        this.insertPersWorkCond(emplTable.EmployeeId);
                        this.insertPersSeniority(emplTable.EmployeeId);
                    }

                    this.appendXMLElement(xmlLevel_PFRData, 'ДатаЗаполнения', date2str(rPayPFRegister.ReportDate, 123, 2, 2, 2, 2, 4, DateFlags::FormatAll));

                    lineNumber = 1;
                }

                emplTable = RHRMEmplTable::find(rPayPFRegisterPersTmp.EmplId);

                xmlLevel_PFRData = this.appendXMLElement(xmlLevel_Batch, 'СВЕДЕНИЯ_О_СУММЕ_ВЫПЛАТ_И_СТРАХОВОМ_СТАЖЕ_ЗЛ');

                numberInPack++;
                this.appendXMLElement(xmlLevel_PFRData, 'НомерВпачке', strfmt('%1', numberInPack));

                this.appendXMLElement(xmlLevel_PFRData, 'ТипСведений', this.getTypeStr());
                this.appendXMLElement(xmlLevel_PFRData, 'РегистрационныйНомер', companyInfo.PFRegNum_RU);
                this.appendXMLElement(xmlLevel_PFRData, 'СтраховойНомер', emplTable.personTable().partySNILSasOfDate_RU(rPayPFRegister.ReportDate));

                dirPersonName = RHRMEMpLTable::find(rPayPFRegisterPersTmp.EmplId).personTable().dirPersonName();

                xmlLevel_fio = this.appendXMLElement(xmlLevel_PFRData, 'ФИО');

                this.appendXMLElement(xmlLevel_FIO, 'Фамилия', strUpr(dirPersonName.LastName));
                this.appendXMLElement(xmlLevel_FIO, 'Имя', strUpr(dirPersonName.FirstName));
                this.appendXMLElement(xmlLevel_FIO, 'Отчество', strUpr(dirPersonName.MiddleName));

                xmlLevel_reportPeriod = this.appendXMLElement(xmlLevel_PFRData, 'ОтчетныйПериод');
                this.appendXMLElement(xmlLevel_reportPeriod, 'Квартал', this.reportPeriodCode(rPayPFRegister.Period));
                this.appendXMLElement(xmlLevel_reportPeriod, 'Год', int2str(year(rPayPFRegister.Year)));
                this.appendXMLElement(xmlLevel_reportPeriod, 'Название', this.reportPeriodStr(year(rPayPFRegister.Year), rPayPFRegister.Period));

                if (rPayPFBatches.Type != RpayPensionFundExportKindOfCorrection::None)
                {
                    corrPeriod = this.getTaxPeriodOnDate(rPayPFBatches.Period);
                    corrYear = year(rPayPFBatches.Period);
                    xmlLevel_reportPeriod = this.appendXMLElement(xmlLevel_PFRData, 'КорректируемыйОтчетныйПериод');
                    this.appendXMLElement(xmlLevel_reportPeriod, 'Квартал', this.reportPeriodCode(corrPeriod));
                    this.appendXMLElement(xmlLevel_reportPeriod, 'Год', int2str(corrYear));
                    this.appendXMLElement(xmlLevel_reportPeriod, 'Название', this.reportPeriodStr(corrYear, corrPeriod));
                }
            }

            if (rPayPFBatches.Type != RpayPensionFundExportKindOfCorrection::Cancellative)
            {
                xmlLevel_reportPeriod = this.appendXMLElement(xmlLevel_PFRData, 'СведенияОсуммеВыплатИвознагражденийВпользуЗЛ');

                this.appendXMLElement(xmlLevel_reportPeriod, 'НомерСтроки', strfmt("%1", lineNumber));

                this.appendXMLElement(xmlLevel_reportPeriod, 'ТипСтроки', this.getLineTypeStrAggregated(rPayPFRegisterPersTmp.StrCodeNum));

                if (rPayPFRegisterPersTmp.StrCodeNum mod 10 != 0)
                {
                    this.appendXMLElement(xmlLevel_reportPeriod, 'Месяц',  strfmt("%1", mthofyr(rPayPFRegisterPersTmp.Period)));
                }

                this.appendXMLElement(xmlLevel_reportPeriod, 'КодСтроки',  strfmt("%1", rPayPFRegisterPersTmp.StrCodeNum));
                this.appendXMLElement(xmlLevel_reportPeriod, 'КодКатегории',  rPayPFRegisterPersTmp.Category);
                this.appendXMLElement(xmlLevel_reportPeriod, 'СуммаВыплатИныхВознаграждений',  this.amount2str(rPayPFRegisterPersTmp.PaymentTotal));
                this.appendXMLElement(xmlLevel_reportPeriod, 'НеПревышающиеВсего',  this.amount2str(rPayPFRegisterPersTmp.FundBase));
                this.appendXMLElement(xmlLevel_reportPeriod, 'НеПревышающиеПоДоговорам',  this.amount2str(rPayPFRegisterPersTmp.FundBaseAgreement));
                this.appendXMLElement(xmlLevel_reportPeriod, 'ПревышающиеПредельную',  this.amount2str(rPayPFRegisterPersTmp.OverLimitBase));

                lineNumber++;
            }
        }

        if (emplTable)
        {
            select sum(PFIns) from rPayPFRegisterPersTmpSum
                where rPayPFRegisterPersTmpSum.EmplId == emplTable.EmployeeId
                   && rPayPFRegisterPersTmpSum.BatchNumber == rPayPFBatches.Number;

            if (rPayPFBatches.Type != RpayPensionFundExportKindOfCorrection::Cancellative)
            {
                this.appendXMLElement(xmlLevel_PFRData, 'СуммаВзносовНаОПС',  this.amount2str(rPayPFRegisterPersTmpSum.PFIns));

                this.insertPersCorrections(emplTable.EmployeeId);
                this.insertPersWorkCond(emplTable.EmployeeId);
                this.insertPersSeniority(emplTable.EmployeeId);
            }

            this.appendXMLElement(xmlLevel_PFRData, 'ДатаЗаполнения', date2str(rPayPFRegister.ReportDate, 123, 2, 2, 2, 2, 4, DateFlags::FormatAll));
        }

        if (xmlDoc)
        {
            xmlDoc.save(filePath + #FilePathDelimiter + this.fileNamePers(RPayPFBatches.Number));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPersCorrections</Name>
				<Source><![CDATA[
    private void insertPersCorrections(RHRMEmplId _emplId)
    {
        int                         lineNumber = 1;
        XMLElement                  xmlLevel_adjustments;
        int                         corrYear;
        str                         corrPeriod;
        Map                         correctings = new Map(Types::Container, Types::Container);
        MapEnumerator               me;
        real tmp14, sumIns14 = 0;
        real tmp13Ins, sumIns13 = 0;
        real tmp13Acc, sumAcc13 = 0;

        if (rPayPFBatches.Type == RpayPensionFundExportKindOfCorrection::None)
        {
            while select sum(PFIns), sum(PFAcc) from rPayPFRegisterTrans group by Category, Period, Type
                where (rPayPFRegisterTrans.RegisterRefRecId == rPayPFRegister.RecId
                    || rPayPFRegisterTrans.RegisterRefRecId == prevRPayPFRegister.RecId)
                   && rPayPFRegisterTrans.Type != RpayPensionFundExportKindOfCorrection::None
                   && rPayPFRegisterTrans.EmplId == _emplId
                   && rPayPFRegisterTrans.LineType == RPayPFLineType::Month
                   && rPayPFRegisterTrans.ListCode == RPayPFListCode::Normal
            {
                corrYear = year(rPayPFRegisterTrans.Period);
                corrPeriod = this.getPeriodCodeOnDate(rPayPFRegisterTrans.Period);

                if (correctings.exists([corrYear, corrPeriod]))
                {
                    [tmp14, tmp13Ins, tmp13Acc] = correctings.lookup([corrYear, corrPeriod]);
                }
                else
                {
                    [tmp14, tmp13Ins, tmp13Acc] = [0,0,0];
                }
                if (corrYear >= #LawYear)
                {
                    tmp14 += rPayPFRegisterTrans.PFIns + rPayPFRegisterTrans.PFAcc;
                    sumIns14 += rPayPFRegisterTrans.PFIns + rPayPFRegisterTrans.PFAcc;
                }
                else
                {
                    tmp13Ins += rPayPFRegisterTrans.PFIns;
                    tmp13Acc += rPayPFRegisterTrans.PFAcc;

                    sumIns13 += rPayPFRegisterTrans.PFIns;
                    sumAcc13 += rPayPFRegisterTrans.PFAcc;
                }

                correctings.insert([corrYear, corrPeriod], [tmp14, tmp13Ins, tmp13Acc]);
            }

            me = correctings.getEnumerator();
            while (me.moveNext())
            {
                xmlLevel_adjustments = this.appendXMLElement(xmlLevel_PFRData, 'СведенияОкорректировках');

                this.appendXMLElement(xmlLevel_adjustments, 'НомерСтроки', strfmt("%1", lineNumber));
                this.appendXMLElement(xmlLevel_adjustments, 'ТипСтроки', 'МЕСЦ');

                [corrYear, corrPeriod] = me.currentKey();
                this.appendXMLElement(xmlLevel_adjustments, 'Квартал', strfmt("%1", corrPeriod));
                this.appendXMLElement(xmlLevel_adjustments, 'Год', strfmt("%1", corrYear));

                [tmp14, tmp13Ins, tmp13Acc] = me.currentValue();
                this.appendXMLElement(xmlLevel_adjustments, 'СуммаДоначисленныхВзносовОПС', this.amount2str(tmp14));
                this.appendXMLElement(xmlLevel_adjustments, 'СуммаДоначисленныхВзносовНаСтраховую', this.amount2str(tmp13Ins));
                this.appendXMLElement(xmlLevel_adjustments, 'СуммаДоначисленныхВзносовНаНакопительную', this.amount2str(tmp13Acc));

                lineNumber++;
            }

            if (correctings.elements())
            {
                xmlLevel_adjustments = this.appendXMLElement(xmlLevel_PFRData, 'СведенияОкорректировках');

                this.appendXMLElement(xmlLevel_adjustments, 'НомерСтроки', strfmt("%1", lineNumber));
                this.appendXMLElement(xmlLevel_adjustments, 'ТипСтроки', 'ИТОГ');

                this.appendXMLElement(xmlLevel_adjustments, 'СуммаДоначисленныхВзносовОПС', this.amount2str(sumIns14));
                this.appendXMLElement(xmlLevel_adjustments, 'СуммаДоначисленныхВзносовНаСтраховую', this.amount2str(sumIns13));
                this.appendXMLElement(xmlLevel_adjustments, 'СуммаДоначисленныхВзносовНаНакопительную', this.amount2str(sumAcc13));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPersHeader</Name>
				<Source><![CDATA[
    private void insertPersHeader(int _fileNumber)
    {
        XMLElement xml, xmlLevel_FileHeader, xmlLevel_FileSourceProgram;
        ;

        xmlDoc = XMLDocument::newXML('<?xml version="1.0" encoding = "windows-1251"?>\n' +
                                     '<ФайлПФР>\n' +
                                     '<ИмяФайла>' + this.fileNamePers(_fileNumber) + '</ИмяФайла>' +
                                     '</ФайлПФР>',
                                     true);

        xmlRoot = xmlDoc.documentElement();

        xmlLevel_FileHeader = this.appendXMLElement(xmlRoot, 'ЗаголовокФайла');
        xml = this.appendXMLElement(xmlLevel_FileHeader, 'ВерсияФормата', '07.00');

        xml = this.appendXMLElement(xmlLevel_FileHeader, 'ТипФайла', 'ВНЕШНИЙ');

        xmlLevel_FileSourceProgram = this.appendXMLElement(xmlLevel_FileHeader, 'ПрограммаПодготовкиДанных');
        xml = this.appendXMLElement(xmlLevel_FileSourceProgram, 'НазваниеПрограммы', 'MICROSOFT DYNAMICS AX');
        xml = this.appendXMLElement(xmlLevel_FileSourceProgram, 'Версия', '5.0');
        xml = this.appendXMLElement(xmlLevel_FileHeader, 'ИсточникДанных', 'СТРАХОВАТЕЛЬ');
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPersSeniority</Name>
				<Source><![CDATA[
    private void insertPersSeniority(RHRMEmplId _emplId)
    {
        int             lineNumber;
        RPayPFSeniority rPayPFSeniority;
        XMLElement      xmlLevel_experience, xmlLevel_preferentialSeniority, xmlLevel_special;
        RefRecId        registerRefRecId = rPayPFRegister.RecId;
        RPayPFRegister  rPayPFRegisterSource;

        lineNumber = 1;

        if (rPayPFBatches.Type != RpayPensionFundExportKindOfCorrection::None)
        {
            select firstonly recId from rPayPFRegisterSource
                order by CorrNum desc
                where rPayPFRegisterSource.Period == this.getPeriodOnDate(rPayPFBatches.Period) &&
                      rPayPFRegisterSource.Year == mkdate(31, 12, year(rPayPFBatches.Period));

            if (rPayPFRegisterSource)
            {
                registerRefRecId = rPayPFRegisterSource.RecId;
            }
        }

        while select rPayPFSeniority
            where rPayPFSeniority.RegisterRefRecId == registerRefRecId &&
                  rPayPFSeniority.EmplId == _emplId
        {
            xmlLevel_experience = this.appendXMLElement(xmlLevel_PFRData, 'СтажевыйПериод');

            this.appendXMLElement(xmlLevel_experience, 'НомерСтроки', strfmt("%1", lineNumber));
            this.appendXMLElement(xmlLevel_experience, 'ДатаНачалаПериода', date2str(rpayPFSeniority.StartDate, 123, 2, 2, 2, 2, 4, DateFlags::FormatAll));
            this.appendXMLElement(xmlLevel_experience, 'ДатаКонцаПериода', date2str(rpayPFSeniority.EndDate, 123, 2, 2, 2, 2, 4, DateFlags::FormatAll));

            if (rPayPFSeniority.SpecCond  || rPayPFSeniority.SeniorityTypeId)
            {
                this.appendXMLElement(xmlLevel_experience, 'КоличествоЛьготныхСоставляющих', '1');
            }
            else
            {
                this.appendXMLElement(xmlLevel_experience, 'КоличествоЛьготныхСоставляющих', '0');
            }

            if (rPayPFSeniority.SpecCond || rPayPFSeniority.SeniorityTypeId)
            {
                xmlLevel_preferentialSeniority = this.appendXMLElement(xmlLevel_experience, 'ЛьготныйСтаж');
                this.appendXMLElement(xmlLevel_preferentialSeniority, 'НомерСтроки', '1');

                xmlLevel_special = this.appendXMLElement(xmlLevel_preferentialSeniority, 'ОсобенностиУчета');

                xmlLevel_preferentialSeniority = this.appendXMLElement(xmlLevel_special, 'ОсобыеУсловияТруда');

                if (rPayPFSeniority.SeniorityTypeId)
                {
                    this.appendXMLElement(xmlLevel_special, 'ДекретДети', rPayPFSeniority.SeniorityTypeId);
                }

                this.appendXMLElement(xmlLevel_preferentialSeniority, 'ОснованиеОУТ', rPayPFSeniority.SpecCond);
                this.appendXMLElement(xmlLevel_preferentialSeniority, 'ПозицияСписка', rPayPFSeniority.PositionList);
            }

            lineNumber++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPersWorkCond</Name>
				<Source><![CDATA[
    private void insertPersWorkCond(RHRMEmplId _emplId)
    {
        RPayPFWorkCondCode          workCondCode;
        int                         lineNumber;
        RPayPFRegisterPersWKTmp     rPayPFRegisterPersTmp;
        XMLElement                  xmlLevel_reportPeriod;

        workCondCode = -1;
        lineNumber = 1;

        while select WorkCondCode, StrCodeNum, Period, PaymentTotallc1, PaymentTotallc2 from rPayPFRegisterPersTmp
            order by rPayPFRegisterPersTmp.EmplId, rPayPFRegisterPersTmp.StrCodeNum, rPayPFRegisterPersTmp.WorkCondCode
            where rPayPFRegisterPersTmp.BatchNumber == rPayPFBatches.Number &&
                  rPayPFRegisterPersTmp.EmplId == _emplId
        {
            if (workCondCode != rPayPFRegisterPersTmp.WorkCondCode)
            {
                xmlLevel_reportPeriod = this.appendXMLElement(xmlLevel_PFRData, 'СведенияОсуммеВыплатИвознагражденийПоДопТарифу');
            }

            this.appendXMLElement(xmlLevel_reportPeriod, 'НомерСтроки', strfmt("%1", lineNumber));

            this.appendXMLElement(xmlLevel_reportPeriod, 'ТипСтроки', this.getLineTypeStrAggregated(rPayPFRegisterPersTmp.StrCodeNum));

            if (rPayPFRegisterPersTmp.StrCodeNum mod 10 != 0)
            {
                this.appendXMLElement(xmlLevel_reportPeriod, 'Месяц',  strfmt("%1", mthofyr(rPayPFRegisterPersTmp.Period)));
            }

            this.appendXMLElement(xmlLevel_reportPeriod, 'КодСтроки',  strfmt("%1", rPayPFRegisterPersTmp.StrCodeNum));

            this.appendXMLElement(xmlLevel_reportPeriod, 'КодСпециальнойОценкиУсловийТруда', enum2str(rPayPFRegisterPersTmp.WorkCondCode));

            this.appendXMLElement(xmlLevel_reportPeriod, 'СуммаВыплатПоДопТарифу27-1', this.amount2str(rPayPFRegisterPersTmp.PaymentTotallc1));
            this.appendXMLElement(xmlLevel_reportPeriod, 'СуммаВыплатПоДопТарифу27-2-18', this.amount2str(rPayPFRegisterPersTmp.PaymentTotallc2));

            lineNumber++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSection1</Name>
				<Source><![CDATA[
    private void insertSection1()
    {
        XMLElement  xmlLevel_Section1, xmlLevel_debtBalance2014, xmlLevel_accrued, xmlLevel_accruedTotal;

        xmlLevel_Section1 = this.appendXMLElement(xmlLevel_PFRData, 'Раздел1РасчетПоНачисленнымУплаченным2014');
        xmlLevel_debtBalance2014 = this.appendXMLElement(xmlLevel_Section1, 'ОстатокЗадолженностиНаНачалоРасчетногоПериода2014');

        this.appendXMLElement(xmlLevel_debtBalance2014, 'КодСтроки', '100');
        this.appendXMLElement(xmlLevel_debtBalance2014, 'СтраховыеВзносыОПС', this.getSectionLineColValueStr(1, 100, 3));
        this.appendXMLElement(xmlLevel_debtBalance2014, 'ОПСстраховаяЧасть', this.getSectionLineColValueStr(1, 100, 4));
        this.appendXMLElement(xmlLevel_debtBalance2014, 'ОПСнакопительнаяЧасть', this.getSectionLineColValueStr(1, 100, 5));
        this.appendXMLElement(xmlLevel_debtBalance2014, 'ВзносыПоДопТарифу1', this.getSectionLineColValueStr(1, 100, 6));
        this.appendXMLElement(xmlLevel_debtBalance2014, 'ВзносыПоДопТарифу2_18', this.getSectionLineColValueStr(1, 100, 7));
        this.appendXMLElement(xmlLevel_debtBalance2014, 'СтраховыеВзносыОМС', this.getSectionLineColValueStr(1, 100, 8));

        xmlLevel_accrued = this.appendXMLElement(xmlLevel_Section1, 'НачисленоСначалаРасчетногоПериода2014');
        xmlLevel_accruedTotal = this.appendXMLElement(xmlLevel_accrued, 'ВсегоСначалаРасчетногоПериода2014');

        this.appendXMLElement(xmlLevel_accruedTotal, 'КодСтроки', '110');
        this.appendXMLElement(xmlLevel_accruedTotal, 'СтраховыеВзносыОПС', this.getSectionLineColValueStr(1, 110, 3));
        this.appendXMLElement(xmlLevel_accruedTotal, 'ВзносыПоДопТарифу1', this.getSectionLineColValueStr(1, 110, 6));
        this.appendXMLElement(xmlLevel_accruedTotal, 'ВзносыПоДопТарифу2_18', this.getSectionLineColValueStr(1, 110, 7));
        this.appendXMLElement(xmlLevel_accruedTotal, 'СтраховыеВзносыОМС', this.getSectionLineColValueStr(1, 110, 8));

        xmlLevel_accruedTotal = this.appendXMLElement(xmlLevel_accrued, 'ПоследниеТриМесяца1с2014');

        this.appendXMLElement(xmlLevel_accruedTotal, 'КодСтроки', '111');
        this.appendXMLElement(xmlLevel_accruedTotal, 'СтраховыеВзносыОПС', this.getSectionLineColValueStr(1, 111, 3));
        this.appendXMLElement(xmlLevel_accruedTotal, 'ВзносыПоДопТарифу1', this.getSectionLineColValueStr(1, 111, 6));
        this.appendXMLElement(xmlLevel_accruedTotal, 'ВзносыПоДопТарифу2_18', this.getSectionLineColValueStr(1, 111, 7));
        this.appendXMLElement(xmlLevel_accruedTotal, 'СтраховыеВзносыОМС', this.getSectionLineColValueStr(1, 111, 8));

        xmlLevel_accruedTotal = this.appendXMLElement(xmlLevel_accrued, 'ПоследниеТриМесяца2с2014');

        this.appendXMLElement(xmlLevel_accruedTotal, 'КодСтроки', '112');
        this.appendXMLElement(xmlLevel_accruedTotal, 'СтраховыеВзносыОПС', this.getSectionLineColValueStr(1, 112, 3));
        this.appendXMLElement(xmlLevel_accruedTotal, 'ВзносыПоДопТарифу1', this.getSectionLineColValueStr(1, 112, 6));
        this.appendXMLElement(xmlLevel_accruedTotal, 'ВзносыПоДопТарифу2_18', this.getSectionLineColValueStr(1, 112, 7));
        this.appendXMLElement(xmlLevel_accruedTotal, 'СтраховыеВзносыОМС', this.getSectionLineColValueStr(1, 112, 8));

        xmlLevel_accruedTotal = this.appendXMLElement(xmlLevel_accrued, 'ПоследниеТриМесяца3с2014');

        this.appendXMLElement(xmlLevel_accruedTotal, 'КодСтроки', '113');
        this.appendXMLElement(xmlLevel_accruedTotal, 'СтраховыеВзносыОПС', this.getSectionLineColValueStr(1, 113, 3));
        this.appendXMLElement(xmlLevel_accruedTotal, 'ВзносыПоДопТарифу1', this.getSectionLineColValueStr(1, 113, 6));
        this.appendXMLElement(xmlLevel_accruedTotal, 'ВзносыПоДопТарифу2_18', this.getSectionLineColValueStr(1, 113, 7));
        this.appendXMLElement(xmlLevel_accruedTotal, 'СтраховыеВзносыОМС', this.getSectionLineColValueStr(1, 113, 8));

        xmlLevel_accruedTotal = this.appendXMLElement(xmlLevel_accrued, 'ПоследниеТриМесяцаИтого2014');

        this.appendXMLElement(xmlLevel_accruedTotal, 'КодСтроки', '114');
        this.appendXMLElement(xmlLevel_accruedTotal, 'СтраховыеВзносыОПС', this.getSectionLineColValueStr(1, 114, 3));
        this.appendXMLElement(xmlLevel_accruedTotal, 'ВзносыПоДопТарифу1', this.getSectionLineColValueStr(1, 114, 6));
        this.appendXMLElement(xmlLevel_accruedTotal, 'ВзносыПоДопТарифу2_18', this.getSectionLineColValueStr(1, 114, 7));
        this.appendXMLElement(xmlLevel_accruedTotal, 'СтраховыеВзносыОМС', this.getSectionLineColValueStr(1, 114, 8));

        xmlLevel_accrued = this.appendXMLElement(xmlLevel_Section1, 'ДоначисленоСначалаРасчетногоПериода2014всего');

        this.appendXMLElement(xmlLevel_accrued, 'КодСтроки', '120');
        this.appendXMLElement(xmlLevel_accrued, 'СтраховыеВзносыОПС', this.getSectionLineColValueStr(1, 120, 3));
        this.appendXMLElement(xmlLevel_accrued, 'ОПСстраховаяЧасть', this.getSectionLineColValueStr(1, 120, 4));
        this.appendXMLElement(xmlLevel_accrued, 'ОПСнакопительнаяЧасть', this.getSectionLineColValueStr(1, 120, 5));
        this.appendXMLElement(xmlLevel_accrued, 'ВзносыПоДопТарифу1', this.getSectionLineColValueStr(1, 120, 6));
        this.appendXMLElement(xmlLevel_accrued, 'ВзносыПоДопТарифу2_18', this.getSectionLineColValueStr(1, 120, 7));
        this.appendXMLElement(xmlLevel_accrued, 'СтраховыеВзносыОМС', this.getSectionLineColValueStr(1, 120, 8));

        xmlLevel_accrued = this.appendXMLElement(xmlLevel_Section1, 'ДоначисленоСначалаРасчетногоПериода2014превышающие');

        this.appendXMLElement(xmlLevel_accrued, 'КодСтроки', '121');
        this.appendXMLElement(xmlLevel_accrued, 'СтраховыеВзносыОПС', this.getSectionLineColValueStr(1, 121, 3));
        this.appendXMLElement(xmlLevel_accrued, 'ОПСстраховаяЧасть', this.getSectionLineColValueStr(1, 121, 4));

        xmlLevel_accrued = this.appendXMLElement(xmlLevel_Section1, 'ВсегоКуплате2014');

        this.appendXMLElement(xmlLevel_accrued, 'КодСтроки', '130');
        this.appendXMLElement(xmlLevel_accrued, 'СтраховыеВзносыОПС', this.getSectionLineColValueStr(1, 130, 3));
        this.appendXMLElement(xmlLevel_accrued, 'ОПСстраховаяЧасть', this.getSectionLineColValueStr(1, 130, 4));
        this.appendXMLElement(xmlLevel_accrued, 'ОПСнакопительнаяЧасть', this.getSectionLineColValueStr(1, 130, 5));
        this.appendXMLElement(xmlLevel_accrued, 'ВзносыПоДопТарифу1', this.getSectionLineColValueStr(1, 130, 6));
        this.appendXMLElement(xmlLevel_accrued, 'ВзносыПоДопТарифу2_18', this.getSectionLineColValueStr(1, 130, 7));
        this.appendXMLElement(xmlLevel_accrued, 'СтраховыеВзносыОМС', this.getSectionLineColValueStr(1, 130, 8));

        xmlLevel_accrued = this.appendXMLElement(xmlLevel_Section1, 'УплаченоСначалаРасчетногоПериода2014');
        xmlLevel_accruedTotal = this.appendXMLElement(xmlLevel_accrued, 'ВсегоСначалаРасчетногоПериода2014');

        this.appendXMLElement(xmlLevel_accruedTotal, 'КодСтроки', '140');
        this.appendXMLElement(xmlLevel_accruedTotal, 'СтраховыеВзносыОПС', this.getSectionLineColValueStr(1, 140, 3));
        this.appendXMLElement(xmlLevel_accruedTotal, 'ОПСстраховаяЧасть', this.getSectionLineColValueStr(1, 140, 4));
        this.appendXMLElement(xmlLevel_accruedTotal, 'ОПСнакопительнаяЧасть', this.getSectionLineColValueStr(1, 140, 5));
        this.appendXMLElement(xmlLevel_accruedTotal, 'ВзносыПоДопТарифу1', this.getSectionLineColValueStr(1, 140, 6));
        this.appendXMLElement(xmlLevel_accruedTotal, 'ВзносыПоДопТарифу2_18', this.getSectionLineColValueStr(1, 140, 7));
        this.appendXMLElement(xmlLevel_accruedTotal, 'СтраховыеВзносыОМС', this.getSectionLineColValueStr(1, 140, 8));

        xmlLevel_accruedTotal = this.appendXMLElement(xmlLevel_accrued, 'ПоследниеТриМесяца1с2014');

        this.appendXMLElement(xmlLevel_accruedTotal, 'КодСтроки', '141');
        this.appendXMLElement(xmlLevel_accruedTotal, 'СтраховыеВзносыОПС', this.getSectionLineColValueStr(1, 141, 3));
        this.appendXMLElement(xmlLevel_accruedTotal, 'ОПСстраховаяЧасть', this.getSectionLineColValueStr(1, 141, 4));
        this.appendXMLElement(xmlLevel_accruedTotal, 'ОПСнакопительнаяЧасть', this.getSectionLineColValueStr(1, 141, 5));
        this.appendXMLElement(xmlLevel_accruedTotal, 'ВзносыПоДопТарифу1', this.getSectionLineColValueStr(1, 141, 6));
        this.appendXMLElement(xmlLevel_accruedTotal, 'ВзносыПоДопТарифу2_18', this.getSectionLineColValueStr(1, 141, 7));
        this.appendXMLElement(xmlLevel_accruedTotal, 'СтраховыеВзносыОМС', this.getSectionLineColValueStr(1, 141, 8));

        xmlLevel_accruedTotal = this.appendXMLElement(xmlLevel_accrued, 'ПоследниеТриМесяца2с2014');

        this.appendXMLElement(xmlLevel_accruedTotal, 'КодСтроки', '142');
        this.appendXMLElement(xmlLevel_accruedTotal, 'СтраховыеВзносыОПС', this.getSectionLineColValueStr(1, 142, 3));
        this.appendXMLElement(xmlLevel_accruedTotal, 'ОПСстраховаяЧасть', this.getSectionLineColValueStr(1, 142, 4));
        this.appendXMLElement(xmlLevel_accruedTotal, 'ОПСнакопительнаяЧасть', this.getSectionLineColValueStr(1, 142, 5));
        this.appendXMLElement(xmlLevel_accruedTotal, 'ВзносыПоДопТарифу1', this.getSectionLineColValueStr(1, 142, 6));
        this.appendXMLElement(xmlLevel_accruedTotal, 'ВзносыПоДопТарифу2_18', this.getSectionLineColValueStr(1, 142, 7));
        this.appendXMLElement(xmlLevel_accruedTotal, 'СтраховыеВзносыОМС', this.getSectionLineColValueStr(1, 142, 8));

        xmlLevel_accruedTotal = this.appendXMLElement(xmlLevel_accrued, 'ПоследниеТриМесяца3с2014');

        this.appendXMLElement(xmlLevel_accruedTotal, 'КодСтроки', '143');
        this.appendXMLElement(xmlLevel_accruedTotal, 'СтраховыеВзносыОПС', this.getSectionLineColValueStr(1, 143, 3));
        this.appendXMLElement(xmlLevel_accruedTotal, 'ОПСстраховаяЧасть', this.getSectionLineColValueStr(1, 143, 4));
        this.appendXMLElement(xmlLevel_accruedTotal, 'ОПСнакопительнаяЧасть', this.getSectionLineColValueStr(1, 143, 5));
        this.appendXMLElement(xmlLevel_accruedTotal, 'ВзносыПоДопТарифу1', this.getSectionLineColValueStr(1, 143, 6));
        this.appendXMLElement(xmlLevel_accruedTotal, 'ВзносыПоДопТарифу2_18', this.getSectionLineColValueStr(1, 143, 7));
        this.appendXMLElement(xmlLevel_accruedTotal, 'СтраховыеВзносыОМС', this.getSectionLineColValueStr(1, 143, 8));

        xmlLevel_accruedTotal = this.appendXMLElement(xmlLevel_accrued, 'ПоследниеТриМесяцаИтого2014');

        this.appendXMLElement(xmlLevel_accruedTotal, 'КодСтроки', '144');
        this.appendXMLElement(xmlLevel_accruedTotal, 'СтраховыеВзносыОПС', this.getSectionLineColValueStr(1, 144, 3));
        this.appendXMLElement(xmlLevel_accruedTotal, 'ОПСстраховаяЧасть', this.getSectionLineColValueStr(1, 144, 4));
        this.appendXMLElement(xmlLevel_accruedTotal, 'ОПСнакопительнаяЧасть', this.getSectionLineColValueStr(1, 144, 5));
        this.appendXMLElement(xmlLevel_accruedTotal, 'ВзносыПоДопТарифу1', this.getSectionLineColValueStr(1, 144, 6));
        this.appendXMLElement(xmlLevel_accruedTotal, 'ВзносыПоДопТарифу2_18', this.getSectionLineColValueStr(1, 144, 7));
        this.appendXMLElement(xmlLevel_accruedTotal, 'СтраховыеВзносыОМС', this.getSectionLineColValueStr(1, 144, 8));

        xmlLevel_accrued = this.appendXMLElement(xmlLevel_Section1, 'ОстатокЗадолженностиНаКонецРасчетногоПериода2014');

        this.appendXMLElement(xmlLevel_accrued, 'КодСтроки', '150');
        this.appendXMLElement(xmlLevel_accrued, 'СтраховыеВзносыОПС', this.getSectionLineColValueStr(1, 150, 3));
        this.appendXMLElement(xmlLevel_accrued, 'ОПСстраховаяЧасть', this.getSectionLineColValueStr(1, 150, 4));
        this.appendXMLElement(xmlLevel_accrued, 'ОПСнакопительнаяЧасть', this.getSectionLineColValueStr(1, 150, 5));
        this.appendXMLElement(xmlLevel_accrued, 'ВзносыПоДопТарифу1', this.getSectionLineColValueStr(1, 150, 6));
        this.appendXMLElement(xmlLevel_accrued, 'ВзносыПоДопТарифу2_18', this.getSectionLineColValueStr(1, 150, 7));
        this.appendXMLElement(xmlLevel_accrued, 'СтраховыеВзносыОМС', this.getSectionLineColValueStr(1, 150, 8));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSection2</Name>
				<Source><![CDATA[
    private void insertSection2()
    {
        XMLElement  xmlLevel_Section2,
                    xmlLevel_Payments,
                    xmlLevel_subSection2_1,
                    xmlLevel_SubSection2_2,
                    xmlLevel_SubSection2_3,
                    xmlLevel_SubSection2_4,
                    xmlLevel_SubSection2_5,
                    xmlLevel_beadroll,
                    xmlLevel_batchInfo,
                    xmlLevel_reportPeriodCorrected;

        int i, j, k, l;
        boolean     sectionLineFound;

        str 10      addInfo,
                    addInfo2find;

        container   addInfoCon = ['1', '2'];
        container   section_2_4_lines, linesCon;
        int64       numberOfBatches;

        RPayPFRegisterTotals    rPayPFRegisterTotalsLocal;

        RPayAmount  fundBaseSum, pfInsSum, pfInsSum2014, pfAccSum;
        int         qtySum;

        void addBlock1(xmlElement __xmlLevel, str __text, int __strCode, str _addInfo = addInfo)
        {
            XmlElement xmlLevel_headerLocal, xmlLevel_sumsLocal;

            xmlLevel_headerLocal = this.appendXMLElement(__xmlLevel, __text);

            this.appendXMLElement(xmlLevel_headerLocal, 'КодСтроки', int2str(__strCode));

            xmlLevel_sumsLocal = this.appendXMLElement(xmlLevel_headerLocal, 'РасчетСумм');

            this.appendXMLElement(xmlLevel_sumsLocal, 'СуммаВсегоСначалаРасчетногоПериода', this.getSectionLineColValueStr(2, __strCode, 3, _addInfo));
            this.appendXMLElement(xmlLevel_sumsLocal, 'СуммаПоследние1месяц', this.getSectionLineColValueStr(2, __strCode, 4, _addInfo));
            this.appendXMLElement(xmlLevel_sumsLocal, 'СуммаПоследние2месяц', this.getSectionLineColValueStr(2, __strCode, 5, _addInfo));
            this.appendXMLElement(xmlLevel_sumsLocal, 'СуммаПоследние3месяц', this.getSectionLineColValueStr(2, __strCode, 6, _addInfo));
        }

        void addBlock1Total(xmlElement __xmlLevel, str __text, int __strCode, str _addInfo = '')
        {
            XmlElement xmlLevel_PaymentsLocal;

            xmlLevel_PaymentsLocal = this.appendXMLElement(__xmlLevel, __text);

            this.appendXMLElement(xmlLevel_PaymentsLocal, 'КодСтроки', int2str(__strCode));

            this.appendXMLElement(xmlLevel_PaymentsLocal, 'КоличествоЗЛ_Всего',  this.getSectionLineColValueIntStr(2, __strCode, 3, _addInfo));
            this.appendXMLElement(xmlLevel_PaymentsLocal, 'КоличествоЗЛ_1месяц', this.getSectionLineColValueIntStr(2, __strCode, 4, _addInfo));
            this.appendXMLElement(xmlLevel_PaymentsLocal, 'КоличествоЗЛ_2месяц', this.getSectionLineColValueIntStr(2, __strCode, 5, _addInfo));
            this.appendXMLElement(xmlLevel_PaymentsLocal, 'КоличествоЗЛ_3месяц', this.getSectionLineColValueIntStr(2, __strCode, 6, _addInfo));
        }

        void addBlock2Section2_4(xmlElement __xmlLevel, str __workConditionsCode, container __lines)
        {
            XmlElement xmlLevel_headerLocal, xmlLevel_sumsLocal;

            xmlLevel_headerLocal = this.appendXMLElement(__xmlLevel, 'РасчетНачисленныхПоКодуСпецОценкиУТ');
            this.appendXMLElement(xmlLevel_headerLocal, 'КодСпециальнойОценкиУсловийТруда', __workConditionsCode);

            xmlLevel_sumsLocal = this.appendXMLElement(xmlLevel_headerLocal, 'РасчетНачисленныхПоДопТарифу');

            addBlock1(xmlLevel_sumsLocal, 'СуммаВыплатИвознагражденийПоДопТарифу', conpeek(__lines, 1));
            addBlock1(xmlLevel_sumsLocal, 'НеПодлежащиеОбложениюПоДопТарифу', conpeek(__lines, 2));
            addBlock1(xmlLevel_sumsLocal, 'БазаДляНачисленияСтраховыхВзносовПоДопТарифу', conpeek(__lines, 3));
            addBlock1(xmlLevel_sumsLocal, 'НачисленоПоДопТарифу', conpeek(__lines, 4));
            addBlock1Total(xmlLevel_sumsLocal, 'КоличествоФЛпоДопТарифу', conpeek(__lines, 5), addInfo);
        }

        xmlLevel_Section2 = this.appendXMLElement(xmlLevel_PFRData, 'Раздел2РасчетПоТарифуИдопТарифу');

        while select addInfo from rPayPFRegisterTotalsLocal
            group by addInfo
            where rPayPFRegisterTotalsLocal.RegisterRefRecId == rPayPFRegister.RecId &&
                  rPayPFRegisterTotalsLocal.LineNum >= 200 && rPayPFRegisterTotalsLocal.LineNum <= 215

        {
            addInfo = rPayPFRegisterTotalsLocal.AddInfo;

            xmlLevel_SubSection2_1 = this.appendXMLElement(xmlLevel_Section2, 'Раздел_2_1');
            this.appendXMLElement(xmlLevel_SubSection2_1, 'КодТарифа', addInfo);

            xmlLevel_Payments = this.appendXMLElement(xmlLevel_SubSection2_1, 'НаОбязательноеПенсионноеСтрахование2014');

            addBlock1(xmlLevel_Payments, 'СуммаВыплатИвознагражденийОПС', 200);
            addBlock1(xmlLevel_Payments, 'НеПодлежащиеОбложениюОПС', 201);
            addBlock1(xmlLevel_Payments, 'СуммаРасходовПринимаемыхКвычетуОПС', 202);
            addBlock1(xmlLevel_Payments, 'ПревышающиеПредельнуюВеличинуБазыОПС', 203);
            addBlock1(xmlLevel_Payments, 'БазаДляНачисленияСтраховыхВзносовНаОПС', 204);
            addBlock1(xmlLevel_Payments, 'НачисленоНаОПСсСуммНеПревышающих', 205);
            addBlock1(xmlLevel_Payments, 'НачисленоНаОПСсСуммПревышающих', 206);
            addBlock1Total(xmlLevel_Payments, 'КоличествоФЛвсего', 207, addInfo);
            addBlock1Total(xmlLevel_Payments, 'КоличествоФЛпоКоторымБазаПревысилаПредел', 208, addInfo);

            xmlLevel_Payments = this.appendXMLElement(xmlLevel_SubSection2_1, 'НаОбязательноеМедицинскоеСтрахование');

            addBlock1(xmlLevel_Payments, 'СуммаВыплатИвознаграждений', 210);
            addBlock1(xmlLevel_Payments, 'НеПодлежащиеОбложению', 211);
            addBlock1(xmlLevel_Payments, 'СуммаРасходовПринимаемыхКвычету', 212);
            addBlock1(xmlLevel_Payments, 'ПревышающиеПредельнуюВеличинуБазы', 213);
            addBlock1(xmlLevel_Payments, 'БазаДляНачисленияСтраховыхВзносовНаОМС', 214);
            addBlock1(xmlLevel_Payments, 'НачисленоНаОМС', 215);
        }

        if (this.getSectionLineColValue(2, 225, 3, '') != 0)
        {
            xmlLevel_SubSection2_2 = this.appendXMLElement(xmlLevel_Section2, 'Раздел_2_2');

            addBlock1(xmlLevel_SubSection2_2, 'СуммаВыплатИвознагражденийПоДопТарифу', 220, '');
            addBlock1(xmlLevel_SubSection2_2, 'НеПодлежащиеОбложениюПоДопТарифу', 221, '');
            addBlock1(xmlLevel_SubSection2_2, 'БазаДляНачисленияСтраховыхВзносовПоДопТарифу', 223, '');
            addBlock1(xmlLevel_SubSection2_2, 'НачисленоПоДопТарифу', 224, '');

            addBlock1Total(xmlLevel_SubSection2_2, 'КоличествоФЛпоДопТарифу', 225);
        }

        if (this.getSectionLineColValue(2, 235, 3, '') != 0)
        {
            xmlLevel_SubSection2_3 = this.appendXMLElement(xmlLevel_Section2, 'Раздел_2_3');

            addBlock1(xmlLevel_SubSection2_3, 'СуммаВыплатИвознагражденийПоДопТарифу', 230, '');
            addBlock1(xmlLevel_SubSection2_3, 'НеПодлежащиеОбложениюПоДопТарифу', 231, '');
            addBlock1(xmlLevel_SubSection2_3, 'БазаДляНачисленияСтраховыхВзносовПоДопТарифу', 233, '');
            addBlock1(xmlLevel_SubSection2_3, 'НачисленоПоДопТарифу', 234, '');
            addBlock1Total(xmlLevel_SubSection2_3, 'КоличествоФЛпоДопТарифу', 235);
        }

        select firstonly rPayPFRegisterTotals
            where (rPayPFRegisterTotals.AddInfo == '1' || rPayPFRegisterTotals.AddInfo == '2') &&
                  rPayPFRegisterTotals.RegisterRefRecId == rPayPFRegister.RecId;

        if (rPayPFRegisterTotals)
        {
            section_2_4_lines += [[240, 241, 243, 244, 245],
                                  [246, 247, 249, 250, 251],
                                  [252, 253, 255, 256, 257],
                                  [258, 259, 261, 262, 263],
                                  [264, 265, 267, 268, 269]];

            sectionLineFound = false;

            for (i = 1; i <= 2; i++)
            {
                addInfo2find = conpeek(addInfoCon, i);

                select firstonly rPayPFRegisterTotals
                    where rPayPFRegisterTotals.AddInfo == addInfo2find &&
                          rPayPFRegisterTotals.RegisterRefRecId == rPayPFRegister.RecId &&
                          rPayPFRegisterTotals.LineNum >= 240 && rPayPFRegisterTotals.LineNum <= 269 && rPayPFRegisterTotals.Value != 0;

                if (! rPayPFRegisterTotals)
                    continue;

                xmlLevel_SubSection2_4 = this.appendXMLElement(xmlLevel_Section2, 'Раздел_2_4');

                for (j = 1; j <= conlen(section_2_4_lines); j++)
                {
                    linesCon = conpeek(section_2_4_lines, j);

                    for (k = 1; k <= conlen(linesCon); k++)
                    {
                        l = conpeek(linesCon, k);

                        select firstonly rPayPFRegisterTotals
                            where rPayPFRegisterTotals.LineNum == l &&
                                  rPayPFRegisterTotals.AddInfo == addInfo2find &&
                                  rPayPFRegisterTotals.RegisterRefRecId == rPayPFRegister.RecId;

                        if (rPayPFRegisterTotals)
                        {
                            sectionLineFound = true;
                            addInfo = addInfo2Find;
                            break;
                        }
                    }

                    if (sectionLineFound)
                    {
                        break;
                    }
                }

                if (sectionLineFound)
                {
                    this.appendXMLElement(xmlLevel_SubSection2_4, 'КодОснованияРасчетаПоДопТарифу', addInfo2find);
                    this.appendXMLElement(xmlLevel_SubSection2_4, 'ОснованиеЗаполненияРаздела2_4', this.getCertTypeStr());

                    addBlock2Section2_4(xmlLevel_SubSection2_4, 'О4', conpeek(section_2_4_lines, 1));
                    addBlock2Section2_4(xmlLevel_SubSection2_4, 'В3.4', conpeek(section_2_4_lines, 2));
                    addBlock2Section2_4(xmlLevel_SubSection2_4, 'В3.3', conpeek(section_2_4_lines, 3));
                    addBlock2Section2_4(xmlLevel_SubSection2_4, 'В3.2', conpeek(section_2_4_lines, 4));
                    addBlock2Section2_4(xmlLevel_SubSection2_4, 'В3.1', conpeek(section_2_4_lines, 5));

                    sectionLineFound = false;
                }
            }
        }

        if (!rPayPFRegister.isCorrRegister())
        {
            xmlLevel_SubSection2_5 = this.appendXMLElement(xmlLevel_Section2, 'Раздел_2_5');

            xmlLevel_beadroll = this.appendXMLElement(xmlLevel_SubSection2_5, 'ПереченьПачекИсходныхСведенийПУ');

            select count(RecId) from rPayPFBatches
                where rPayPFBatches.Type == RpayPensionFundExportKindOfCorrection::None &&
                      rPayPFBatches.RegisterRefRecId == rPayPFRegister.RecId;

            numberOfBatches = rPayPFBatches.RecId;

            this.appendXMLElement(xmlLevel_beadroll, 'КоличествоПачек', int642str(numberOfBatches));

            i = 1;

            fundBaseSum = 0;
            pfInsSum = 0;
            qtySum = 0;

            while select rPayPFBatches where
                rPayPFBatches.Type == RpayPensionFundExportKindOfCorrection::None &&
                rPayPFBatches.RegisterRefRecId == rPayPFRegister.RecId
            {
                xmlLevel_batchInfo = this.appendXMLElement(xmlLevel_beadroll, 'СведенияОпачкеИсходных');

                this.appendXMLElement(xmlLevel_batchInfo, 'НомерПП', int2str(i));
                this.appendXMLElement(xmlLevel_batchInfo, 'БазаДляНачисленияСтраховыхВзносовНеПревышающаяПредельную', this.amount2str(rPayPFBatches.FundBase));
                this.appendXMLElement(xmlLevel_batchInfo, 'СтраховыхВзносовОПС', this.amount2str(rPayPFBatches.PFIns));
                this.appendXMLElement(xmlLevel_batchInfo, 'КоличествоЗЛвПачке', this.intAmount2str(rPayPFBatches.Qty));
                this.appendXMLElement(xmlLevel_batchInfo, 'ИмяФайла', strfmt("%1", this.fileName(rPayPFBatches.Number)));

                fundBaseSum += rPayPFBatches.FundBase;
                pfInsSum += rPayPFBatches.PFIns;
                qtySum += rPayPFBatches.Qty;

                i++;
            }

            xmlLevel_batchInfo = this.appendXMLElement(xmlLevel_beadroll, 'ИтогоСведенияПоПачкам');

            this.appendXMLElement(xmlLevel_batchInfo, 'БазаДляНачисленияСтраховыхВзносовНеПревышающаяПредельную', this.amount2str(fundBaseSum));
            this.appendXMLElement(xmlLevel_batchInfo, 'СтраховыхВзносовОПС', this.amount2str(pfInsSum));
            this.appendXMLElement(xmlLevel_batchInfo, 'КоличествоЗЛвПачке', this.intAmount2str(qtySum));

            select count(RecId) from rPayPFBatches
                where rPayPFBatches.Type != RpayPensionFundExportKindOfCorrection::None &&
                      rPayPFBatches.RegisterRefRecId == rPayPFRegister.RecId;

            if (rPayPFBatches.RecId > 0)
            {
                xmlLevel_beadroll = this.appendXMLElement(xmlLevel_SubSection2_5, 'ПереченьПачекКорректирующихСведенийПУ');

                numberOfBatches = rPayPFBatches.RecId;

                this.appendXMLElement(xmlLevel_beadroll, 'КоличествоПачек', int642str(numberOfBatches));

                i = 1;

                fundBaseSum = 0;
                pfInsSum = 0;
                pfInsSum2014 = 0;
                qtySum = 0;
                pfAccSum = 0;

                while select rPayPFBatches
                    where rPayPFBatches.Type != RpayPensionFundExportKindOfCorrection::None &&
                          rPayPFBatches.RegisterRefRecId == rPayPFRegister.RecId
                {
                    xmlLevel_batchInfo = this.appendXMLElement(xmlLevel_beadroll, 'СведенияОпачкеКорректирующих');

                    this.appendXMLElement(xmlLevel_batchInfo, 'НомерПП', int2str(i));

                    xmlLevel_reportPeriodCorrected = this.appendXMLElement(xmlLevel_batchInfo, 'КорректируемыйОтчетныйПериод');
                    this.appendXMLElement(xmlLevel_reportPeriodCorrected, 'Квартал', strfmt("%1", this.date2quarter(rPayPFBatches.Period)));
                    this.appendXMLElement(xmlLevel_reportPeriodCorrected, 'Год', int2str(year(rPayPFBatches.Period)));
                    this.appendXMLElement(xmlLevel_reportPeriodCorrected, 'Название', this.reportPeriodStrFromDate(rPayPFBatches.Period));

                    this.appendXMLElement(xmlLevel_batchInfo, 'ДоначисленоСтраховыхВзносовОПС', year(rPayPFBatches.Period) >= 2014 ? this.amount2str(rPayPFBatches.PFIns) : '0.00');
                    this.appendXMLElement(xmlLevel_batchInfo, 'ДоначисленоНаСтраховуюЧасть', year(rPayPFBatches.Period) < 2014 ? this.amount2str(rPayPFBatches.PFIns) : '0.00');
                    this.appendXMLElement(xmlLevel_batchInfo, 'ДоначисленоНаНакопительнуюЧасть', year(rPayPFBatches.Period) < 2014 ? this.amount2str(rPayPFBatches.PFAcc) : '0.00');

                    this.appendXMLElement(xmlLevel_batchInfo, 'КоличествоЗЛвПачке', this.intAmount2str(rPayPFBatches.Qty));
                    this.appendXMLElement(xmlLevel_batchInfo, 'ИмяФайла', this.fileName(rPayPFBatches.Number));

                    if (year(rPayPFBatches.Period) >= 2014)
                    {
                        pfInsSum2014 += rPayPFBatches.PFIns;
                    }

                    if (year(rPayPFBatches.Period) < 2014)
                    {
                        pfInsSum += rPayPFBatches.PFIns;
                        pfAccSum += rPayPFBatches.PFAcc;
                    }

                    qtySum += rPayPFBatches.Qty;

                    i++;
                }

                xmlLevel_batchInfo = this.appendXMLElement(xmlLevel_beadroll, 'ИтогоСведенияПоПачкамКорректирующих');

                this.appendXMLElement(xmlLevel_batchInfo, 'ДоначисленоСтраховыхВзносовОПС', this.amount2str(pfInsSum2014));
                this.appendXMLElement(xmlLevel_batchInfo, 'ДоначисленоНаСтраховуюЧасть', this.amount2str(pfInsSum));
                this.appendXMLElement(xmlLevel_batchInfo, 'ДоначисленоНаНакопительнуюЧасть', this.amount2str(pfAccSum));
                this.appendXMLElement(xmlLevel_batchInfo, 'КоличествоЗЛвПачке', this.intAmount2str(qtySum));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSection4</Name>
				<Source><![CDATA[
    private void insertSection4()
    {
        XmlElement xmlLevel_taxesAdditionallyPremiums;
        XmlNode xmlLevel_Section4;

        RPayAmount  pfInsSum,
                    pfInsSum_2014,
                    pfInsOverLimitSum,
                    pfInsOverLimitSum_2014,
                    PfAccSum,
                    pfAdd1Sum,
                    pfAdd2Sum,
                    pfAdd3Sum;

        RPayPFRegister      rPayPFRegisterRetrospective,
                            rPayPFRegisterRetrospectiveExist;

        int i;

        select firstonly rPayPFRegisterRetrospectiveExist join rPayPFRegisterAdd
            order by rPayPFRegisterRetrospectiveExist.CorrNum
            where (rPayPFRegisterRetrospectiveExist.Period == rPayPFRegister.Period && rPayPFRegisterRetrospectiveExist.Year == rPayPFRegister.Year && (rPayPFRegisterRetrospectiveExist.CorrNum <= rPayPFRegister.CorrNum || !rPayPFRegister.CorrNum) &&
                  (RPayPFRegisterAdd.RegisterRefRecId == rPayPFRegisterRetrospective.RecId &&
                      RPayPFRegisterAdd.Type == RPayPFAddPremiumType::AddAmounts));

        if (rPayPFRegisterRetrospectiveExist)
        {
            xmlLevel_Section4 = this.appendXMLElement(xmlLevel_PFRData, 'Раздел4СуммыДоначисленныхСтраховыхВзносов2014');

            i = 1;

            while select rPayPFRegisterRetrospective
                order by rPayPFRegisterRetrospective.CorrNum
                where (rPayPFRegisterRetrospective.Period == rPayPFRegister.Period && rPayPFRegisterRetrospective.Year == rPayPFRegister.Year && (rPayPFRegisterRetrospective.CorrNum <= rPayPFRegister.CorrNum || !rPayPFRegister.CorrNum))
            {
                while select rPayPFRegisterAdd
                    where (RPayPFRegisterAdd.RegisterRefRecId == rPayPFRegisterRetrospective.RecId &&
                          RPayPFRegisterAdd.Type == RPayPFAddPremiumType::AddAmounts)
                {
                    xmlLevel_taxesAdditionallyPremiums = this.appendXMLElement(xmlLevel_Section4, 'Раздел4СуммыДоначисленныхСтраховыхВзносов2014');

                    this.appendXMLElement(xmlLevel_taxesAdditionallyPremiums, 'НомерПП', strfmt("%1", i));
                    this.appendXMLElement(xmlLevel_taxesAdditionallyPremiums, 'ОснованиеДляДоначисления', strfmt("%1", enum2int(rPayPFRegisterAdd.Reason) + 1));
                    this.appendXMLElement(xmlLevel_taxesAdditionallyPremiums, 'КодОснованияДляДопТарифа', enum2str(rPayPFRegisterAdd.Explanation));
                    this.appendXMLElement(xmlLevel_taxesAdditionallyPremiums, 'Год', strfmt("%1", year(RpayPFregisterAdd.Period)));
                    this.appendXMLElement(xmlLevel_taxesAdditionallyPremiums, 'Месяц', strfmt("%1", mthofyr(RpayPFregisterAdd.Period)));

                    if (year(RpayPFregisterAdd.Period) < 2014)
                    {
                        this.appendXMLElement(xmlLevel_taxesAdditionallyPremiums, 'СуммаДоначисленныхВзносовНаСтраховуюВсего', this.amount2str(RpayPFregisterAdd.PFIns));
                        pfInsSum += RpayPFregisterAdd.PFIns;
                    }

                    if (year(RpayPFregisterAdd.Period) >= 2014)
                    {
                        this.appendXMLElement(xmlLevel_taxesAdditionallyPremiums, 'СуммаДоначисленныхВзносовОПС2014всего', this.amount2str(RpayPFregisterAdd.PFIns));
                        pfInsSum_2014 += RpayPFregisterAdd.PFIns;
                    }

                    if (year(RpayPFregisterAdd.Period) < 2014)
                    {
                        this.appendXMLElement(xmlLevel_taxesAdditionallyPremiums, 'СуммаДоначисленныхВзносовНаСтраховуюПревышающие', this.amount2str(RpayPFregisterAdd.PFInsOverLimit));
                        pfInsOverLimitSum += RpayPFregisterAdd.PFInsOverLimit;
                    }

                    if (year(RpayPFregisterAdd.Period) >= 2014)
                    {
                        this.appendXMLElement(xmlLevel_taxesAdditionallyPremiums, 'СуммаДоначисленныхВзносовОПС2014превыщающие', this.amount2str(RpayPFregisterAdd.PFInsOverLimit));
                        pfInsOverLimitSum_2014 += RpayPFregisterAdd.PFInsOverLimit;
                    }

                    this.appendXMLElement(xmlLevel_taxesAdditionallyPremiums, 'СуммаДоначисленныхВзносовНаНакопительную', this.amount2str(RpayPFregisterAdd.PFAcc));
                    this.appendXMLElement(xmlLevel_taxesAdditionallyPremiums, 'СтраховыхДоначисленныхВзносовПоДопТарифуЧ1', this.amount2str(RpayPFregisterAdd.PFAdd1));
                    this.appendXMLElement(xmlLevel_taxesAdditionallyPremiums, 'СтраховыхДоначисленныхВзносовПоДопТарифуЧ2', this.amount2str(RpayPFregisterAdd.PFAdd2));
                    this.appendXMLElement(xmlLevel_taxesAdditionallyPremiums, 'СтраховыхДоначисленныхВзносовПоДопТарифуЧ2_1', this.amount2str(RpayPFregisterAdd.PFAdd3));

                    this.appendXMLElement(xmlLevel_taxesAdditionallyPremiums, 'СтраховыеВзносыОМС', this.amount2str(RpayPFregisterAdd.MedIns));

                    i++;
                }
            }

            xmlLevel_taxesAdditionallyPremiums = this.appendXMLElement(xmlLevel_Section4, 'ИтогоДоначисленоНачинаяС2014');

            this.appendXMLElement(xmlLevel_taxesAdditionallyPremiums, 'СуммаДоначисленныхВзносовНаСтраховуюВсего', this.amount2str(pfInsSum));
            this.appendXMLElement(xmlLevel_taxesAdditionallyPremiums, 'СуммаДоначисленныхВзносовОПС2014всего', this.amount2str(pfInsSum_2014));
            this.appendXMLElement(xmlLevel_taxesAdditionallyPremiums, 'СуммаДоначисленныхВзносовНаСтраховуюПревышающие', this.amount2str(pfInsOverLimitSum));
            this.appendXMLElement(xmlLevel_taxesAdditionallyPremiums, 'СуммаДоначисленныхВзносовОПС2014превыщающие', this.amount2str(pfInsOverLimitSum_2014));
            this.appendXMLElement(xmlLevel_taxesAdditionallyPremiums, 'СуммаДоначисленныхВзносовНаНакопительную', this.amount2str(pfAccSum));
            this.appendXMLElement(xmlLevel_taxesAdditionallyPremiums, 'СтраховыхДоначисленныхВзносовПоДопТарифуЧ1', this.amount2str(pfAdd1Sum));
            this.appendXMLElement(xmlLevel_taxesAdditionallyPremiums, 'СтраховыхДоначисленныхВзносовПоДопТарифуЧ2', this.amount2str(pfAdd2Sum));
            this.appendXMLElement(xmlLevel_taxesAdditionallyPremiums, 'СтраховыхДоначисленныхВзносовПоДопТарифуЧ2_1', this.amount2str(pfAdd3Sum));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSection5</Name>
				<Source><![CDATA[
    private void insertSection5()
    {
        XmlElement  xmlLevel_Section5,
                    xmlLevel_Student,
                    xmlLevel_FIO,
                    xmlLevel_Payments,
                    xmlLevel_closing;

        DirPersonName   dirPersonName;

        int i;

        RPayAmount  paymentsSum,
                    payments1sum,
                    payments2sum,
                    payments3sum;

        select count(RecId) from rPayPFRegisterStudents
            where rPayPFRegisterStudents.RegisterRefRecId == rPayPFRegister.RecId;

        if (rPayPFRegisterStudents.RecId == 0)
            return;

        xmlLevel_Section5 = this.appendXMLElement(xmlLevel_PFRData, 'Раздел5СведенияОВыплатахВпользуОбучающихся2014');

        this.appendXMLElement(xmlLevel_Section5, 'КоличествоОбучающихся', strfmt("%1", rPayPFRegisterStudents.RecId));

        i = 1;

        while select rPayPFRegisterStudents
            where rPayPFRegisterStudents.RegisterRefRecId == rPayPFRegister.RecId
        {
            xmlLevel_Student = this.appendXMLElement(xmlLevel_Section5, 'СведенияОбОбучающемся');

            this.appendXMLElement(xmlLevel_Student, 'НомерПП', strfmt("%1", i));

            xmlLevel_FIO = this.appendXMLElement(xmlLevel_Student, 'ФИО');

            dirPersonName = RHRMEMpLTable::find(rPayPFRegisterStudents.EmplId).personTable().dirPersonName();

            this.appendXMLElement(xmlLevel_FIO, 'Фамилия', strUpr(dirPersonName.LastName));
            this.appendXMLElement(xmlLevel_FIO, 'Имя', strUpr(dirPersonName.FirstName));
            this.appendXMLElement(xmlLevel_FIO, 'Отчество', strUpr(dirPersonName.MiddleName));

            this.appendXMLElement(xmlLevel_Student, 'НомерСправкиОчленствеВстудОтряде', rPayPFRegisterStudents.BrigadeNumber);
            this.appendXMLElement(xmlLevel_Student, 'ДатаВыдачиСправкиОчленствеВстудОтряде', date2str(rPayPFRegisterStudents.BrigadeDate, 123, 2, 2, 2, 2, 4, DateFlags::FormatAll));
            this.appendXMLElement(xmlLevel_Student, 'НомерСправкиОбОчномОбучении', rPayPFRegisterStudents.UniversityNumber);
            this.appendXMLElement(xmlLevel_Student, 'ДатаВыдачиСправкиОбОчномОбучении', date2str(rPayPFRegisterStudents.UniversityDate, 123, 2, 2, 2, 2, 4, DateFlags::FormatAll));

            xmlLevel_Payments = this.appendXMLElement(xmlLevel_Student, 'СуммыВыплатИвознаграждений');
            this.appendXMLElement(xmlLevel_Payments, 'СуммаВсегоСначалаРасчетногоПериода', this.amount2str(rPayPFRegisterStudents.Payments));
            this.appendXMLElement(xmlLevel_Payments, 'СуммаПоследние1месяц', this.amount2str(rPayPFRegisterStudents.Payments1));
            this.appendXMLElement(xmlLevel_Payments, 'СуммаПоследние2месяц', this.amount2str(rPayPFRegisterStudents.Payments2));
            this.appendXMLElement(xmlLevel_Payments, 'СуммаПоследние3месяц', this.amount2str(rPayPFRegisterStudents.Payments3));

            paymentsSum  += rPayPFRegisterStudents.Payments;
            payments1sum += rPayPFRegisterStudents.Payments1;
            payments2sum += rPayPFRegisterStudents.Payments2;
            payments3sum += rPayPFRegisterStudents.Payments3;

            i++;
        }

        xmlLevel_Payments = this.appendXMLElement(xmlLevel_Section5, 'ИтогоВыплат');

        this.appendXMLElement(xmlLevel_Payments, 'СуммаВсегоСначалаРасчетногоПериода', this.amount2str(paymentsSum));
        this.appendXMLElement(xmlLevel_Payments, 'СуммаПоследние1месяц', this.amount2str(payments1sum));
        this.appendXMLElement(xmlLevel_Payments, 'СуммаПоследние2месяц', this.amount2str(payments2sum));
        this.appendXMLElement(xmlLevel_Payments, 'СуммаПоследние3месяц', this.amount2str(payments3sum));

        xmlLevel_closing = this.appendXMLElement(xmlLevel_Section5, 'СведенияИзРеестраМДОО');
        this.appendXMLElement(xmlLevel_closing, 'КодСтроки', '501');

        xmlLevel_closing = this.appendXMLElement(xmlLevel_closing, 'РеквизитыЗаписиВреестре');
        this.appendXMLElement(xmlLevel_closing, 'ДатаЗаписиВреестре', '01.01.2014');
        this.appendXMLElement(xmlLevel_closing, 'НомерЗаписиВреестре', '1');
    }

]]></Source>
			</Method>
			<Method>
				<Name>intAmount2str</Name>
				<Source><![CDATA[
    private str intAmount2str(int _value)
    {
        return System.String::Format('{0:0}', _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(RPayPFRegister _rPayPFRegister)
    {
        ;
        rPayPFRegister = _rPayPFRegister;

        companyInfo = CompanyInfo::find();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRPayPFRegister</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayPFRegister parmRPayPFRegister(RPayPFRegister _rPayPFRegister = rPayPFRegister)
    {
        ;
        rPayPFRegister = _rPayPFRegister;
        return rPayPFRegister;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportPeriodCode</Name>
				<Source><![CDATA[
    private str reportPeriodCode(RPayReportSocialTaxPeriod _period)
    {
        str ret;

        switch (_period)
        {
            case RPayReportSocialTaxPeriod::Quarter:
                ret = '3';
                break;
            case RPayReportSocialTaxPeriod::HalfYear:
                ret = '6';
                break;
            case RPayReportSocialTaxPeriod::NineMonth:
                ret = '9';
                break;
            case RPayReportSocialTaxPeriod::Year:
                ret = '0';
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportPeriodStr</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str reportPeriodStr(int _year, RPayReportSocialTaxPeriod _period)
    {
        Date periodFrom, periodTo;

        periodFrom = mkdate(1, 1, _year);

        switch (_period)
        {
            case RPayReportSocialTaxPeriod::Quarter :
                periodTo = endmth(mkdate(1, 3, _year));
                break;
            case RPayReportSocialTaxPeriod::HalfYear :
                periodTo = endmth(mkdate(1, 6, _year));
                break;
            case RPayReportSocialTaxPeriod::NineMonth :
                periodTo = endmth(mkdate(1, 9, _year));
                break;
            case RPayReportSocialTaxPeriod::Year :
                periodTo = endmth(mkdate(1, 12, _year));
                break;
        }

        return strfmt('С %1 ПО %2', date2str(periodFrom, 123, 2, 2, 2, 2, 4, DateFlags::FormatAll), date2str(periodTo, 123, 2, 2, 2, 2, 4, DateFlags::FormatAll));
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportPeriodStrFromDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str reportPeriodStrFromDate(Date _date)
    {
        Date periodFrom, periodTo;

        periodFrom = mkdate(1, 1, year(_date));
        periodTo = endmth(mkdate(1, date2qtr(_date) * 3, year(_date)));

        return strfmt('С %1 ПО %2', date2str(periodFrom, 123, 2, 2, 2, 2, 4, DateFlags::FormatAll), date2str(periodTo, 123, 2, 2, 2, 2, 4, DateFlags::FormatAll));
    }

]]></Source>
			</Method>
			<Method>
				<Name>rPayPFCorrectionType2Code</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected str rPayPFCorrectionType2Code(RPayPFCorrectionType _type)
    {
        switch (_type)
        {
            case RPayPFCorrectionType::Payments:
                return '1';
            case RPayPFCorrectionType::PremiumsCalc:
                return '2';
            case RPayPFCorrectionType::MedIns:
                return '3';
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.initData();

        this.createDirectory();
        this.createCompanyFile();
        this.createFilesByPersons();

        rPayPFRegister.FileName = filePath + #FilePathDelimiter + this.fileName();
        rPayPFRegister.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer             version = conPeek(_packedClass,1);
        RPayPFRegister      rPayPFRegisterNew;

        switch (version)
        {
            case #CurrentVersion:
                rPayPFRegisterNew = this.parmRPayPFRegister();

                [version, #CurrentList] = _packedClass;

                if (rPayPFRegisterNew)
                {
                    this.parmRPayPFRegister(rPayPFRegisterNew);
                }
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static ClassDescription description()
    {
        return 'Creating of RSV register data to xml file';
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RPayPFRegister2File rPayPFRegister2File;
        ;

        if (! _args || ! _args.record())
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        rPayPFRegister2File = new rPayPFRegister2File(_args.record());

        if (rPayPFRegister2File.prompt())
        {
            rPayPFRegister2File.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>