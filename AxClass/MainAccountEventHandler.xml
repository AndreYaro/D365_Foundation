<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MainAccountEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>MainAccount</c> event handlers.
/// </summary>
public class MainAccountEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>MainAccount_onValidatingField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles <c>MainAccount</c> field validation event.
    /// </summary>
    /// <param name = "_sender">The <c>MainAccount</c>.</param>
    /// <param name = "_e">The event arguments.</param>
    [DataEventHandler(tableStr(MainAccount), DataEventType::ValidatingField), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void MainAccount_onValidatingField(Common _sender, DataEventArgs _e)
    {
        MainAccount mainAccount = _sender as MainAccount;
        ValidateFieldEventArgs ve = _e;
        boolean isValid;

        LedgerISubledgerJournalProvider ledgerSubledgerProvider = LedgerSubledgerJournalProviderFactory::newLedgerSubledgerJournalProvider();

        int fieldNumber = ve.parmFieldId();
        if (mainAccount.RecId != 0 && (fieldNumber == fieldNum(MainAccount, Closing) ||
            fieldNumber == fieldNum(MainAccount, DebitCreditCheck) ||
            fieldNumber == fieldNum(MainAccount, ValidatePosting) ||
            fieldNumber == fieldNum(MainAccount, ValidateCurrency) ||
            fieldNumber == fieldNum(MainAccount, ValidateUser)))
        {
            isValid = !ledgerSubledgerProvider.subLedgerJournalNotTransferredRecId(mainAccount.RecId);
            if (!isValid)
            {
                error(strFmt("@SYS329026",fieldId2pname(mainAccount.TableId, fieldNumber), mainAccount.MainAccountId));
            }

            ve.parmValidateResult(isValid);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatingBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the <c>MainAccount</c> updatingBalances event.
    /// </summary>
    /// <param name = "_eventArgs">The event arguments.</param>
    [SubscribesTo(TableStr(MainAccount), staticdelegatestr(MainAccount, updatingBalances))]
    public static void updatingBalances(MainAccountEventArgs _eventArgs)
    {
        DimensionHierarchy dimHier = DimensionHierarchy::getMainAccountFocus();

        if (dimHier != null)
        {
            if (FeatureStateProvider::IsFeatureEnabled(GeneralLedgerBalanceFeature::instance()))
            {
                LedgerRecId ledgerRecId = _eventArgs.parmBalanceLedgerRecId();

                if (ledgerRecId == 0)
                {
                    ledgerRecId = Ledger::current();
                }

                GeneralLedgerBalanceProvider::getBalanceStatus(ledgerRecId);
            }
            else
            {
                if (DimensionFocusBalanceUpdateByLedgerFlight::instance().isEnabled()
                    && _eventArgs
                    && _eventArgs.parmBalanceLedgerRecId() > 0)
                {
                    DimensionFocusUpdateBalance::updateBalance(
                        dimHier,
                        false,
                        true,
                        _eventArgs.parmBalanceLedgerRecId());
                }
                else
                {
                    DimensionFocusUpdateBalance::updateBalance(dimHier);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>