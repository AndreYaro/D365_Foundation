<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailDocumentOperationSemaphoreManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
using ACL = System.Security.AccessControl;

/// <summary>
/// The <c>RetailDocumentOperationSemaphoreManager</c> class manages semaphore for Document Operation Framework.
/// </summary>
internal class RetailDocumentOperationSemaphoreManager
{
    
    /// <summary>
    /// For each operation initiated by RTS API, by default the framework will use two worker threads to execute the operation (one for worker thread, another for applock).
    private const int ThreadNumberUsedPerOperation = 2;

    /// <summary>
    /// The maximum number of parallel operations for document operation framework.
    /// This value will limit the calculated maximumParallelOperationNumber value.
    /// The value of 250 is set based on that the maximum number of .NET thread pool, which is 500.
    /// </summary>
    private const int HardMaximumConcurrentOperationsNumber = 250;

    private str semaphoreName;
    private int maxNumThreads;

    private System.Threading.Semaphore concurrentOperationsSemaphore;

    private const int SemaphoreDontWait = 0;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static RetailDocumentOperationSemaphoreManager construct(int _maxNumThreads, str _semaphoreName)
    {
        return RetailDocumentOperationSemaphoreManager::constructInternal(_maxNumThreads, _semaphoreName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructInternal</Name>
				<Source><![CDATA[
    private static RetailDocumentOperationSemaphoreManager constructInternal(int _maxNumThreads, str _semaphoreName)
    {
        RetailDocumentOperationSemaphoreManager semaphoreManager = new RetailDocumentOperationSemaphoreManager(_maxNumThreads, _semaphoreName);

        return semaphoreManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Private constructor of <c>RetailDocumentOperationSemaphoreManager</c>.
    /// </summary>
    /// <param name = "_maxNumThreads">Maximum allowed threads number enforced by the semaphor.</param>
    /// <param name = "_semaphoreName">The name of the semaphore.</param>
    private void new(int _maxNumThreads, str _semaphoreName)
    {
        this.semaphoreName = _semaphoreName;
        this.maxNumThreads = _maxNumThreads;

        System.Threading.WaitHandleCannotBeOpenedException waitHandleCannotBeOpenedException;
        System.UnauthorizedAccessException unauthorizedAccessException;

        boolean doesNotExist = false;
        boolean unauthorized = false;

        if (this.semaphoreName)
        {
            try
            {
                concurrentOperationsSemaphore = System.Threading.Semaphore::OpenExisting(_semaphoreName);
            }
            catch(waitHandleCannotBeOpenedException)
            {
                doesNotExist = true;
            }
            catch(unauthorizedAccessException)
            {
                unauthorized = true;
            }

            if (doesNotExist)
            {
                int maximumConcurrentOperationsNumber = real2int((maxNumThreads * System.Environment::ProcessorCount)/ThreadNumberUsedPerOperation);
                maximumConcurrentOperationsNumber = min(maximumConcurrentOperationsNumber, HardMaximumConcurrentOperationsNumber);

                boolean createdNew = false;
                this.concurrentOperationsSemaphore = new System.Threading.Semaphore(maximumConcurrentOperationsNumber, maximumConcurrentOperationsNumber, this.semaphoreName, byref createdNew);

                if(!createdNew)
                {
                    //if create fail, that means other thread have already created, so try open existing again
                    concurrentOperationsSemaphore = System.Threading.Semaphore::OpenExisting(_semaphoreName);
                }
            }
            else if (unauthorized)
            {
                concurrentOperationsSemaphore = RetailDocumentOperationSemaphoreManager::tryResetAccessRuleAndOpenSemaphore(_semaphoreName);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryEnterConcurrentOperationsSemaphore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Makes an attempt to enter the semaphore.
    /// </summary>
    /// <returns>
    /// true if the semaphore has been entered; otherwise, false.
    /// </returns>
    internal boolean tryEnterConcurrentOperationsSemaphore()
    {
        return this.tryEnterConcurrentOperationsSemaphoreInternal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseConcurrentOperationsSemaphore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Releases the semaphore object once
    /// </summary>
    /// <returns>
    /// The previous count of the semaphore.
    /// </returns>
    internal int releaseConcurrentOperationsSemaphore()
    {
        return this.releaseConcurrentOperationsSemaphoreInternal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setConcurrentOperationsSemaphore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the concurrent semaphore object.
    /// </summary>
    /// <param name = "_concurrentOperationsSemaphore">The semaphore object to set.</param>
    internal void setConcurrentOperationsSemaphore(System.Threading.Semaphore _concurrentOperationsSemaphore)
    {
        this.concurrentOperationsSemaphore = _concurrentOperationsSemaphore;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryEnterConcurrentOperationsSemaphoreInternal</Name>
				<Source><![CDATA[
    //This method is created for known limitation that SysDetourContext can not detour to internal method(tryEnterConcurrentOperationsSemaphore).
    private boolean tryEnterConcurrentOperationsSemaphoreInternal()
    {
        return this.concurrentOperationsSemaphore.WaitOne(SemaphoreDontWait);
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseConcurrentOperationsSemaphoreInternal</Name>
				<Source><![CDATA[
    //This method is created for known limitation that SysDetourContext can not detour to internal method(releaseConcurrentOperationsSemaphore).
    private int releaseConcurrentOperationsSemaphoreInternal()
    {
        return this.concurrentOperationsSemaphore.Release();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryResetAccessRuleAndOpenSemaphore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Try reset the semaphore access rule and open it.
    /// </summary>
    /// <param name="_semaphoreName">
    /// The semaphore name.
    /// </param>
    /// <returns>
    /// The semaphore.
    /// </returns>
    private static System.Threading.Semaphore tryResetAccessRuleAndOpenSemaphore(str _semaphoreName)
    {
        System.Threading.Semaphore semaphore = System.Threading.Semaphore::OpenExisting(_semaphoreName, ACL.SemaphoreRights::ReadPermissions | ACL.SemaphoreRights::ChangePermissions);

        ACL.SemaphoreSecurity semSec = semaphore.GetAccessControl();

        str currentUser = System.Environment::UserDomainName + "\\" + System.Environment::UserName;

        // remove the deny rule
        ACL.SemaphoreAccessRule rule = new ACL.SemaphoreAccessRule(currentUser, ACL.SemaphoreRights::Synchronize | ACL.SemaphoreRights::Modify, ACL.AccessControlType::Deny);
        semSec.RemoveAccessRule(rule);

        // add the allow rule
        rule = new ACL.SemaphoreAccessRule(currentUser, ACL.SemaphoreRights::Synchronize | ACL.SemaphoreRights::Modify, ACL.AccessControlType::Allow);
        semSec.AddAccessRule(rule);

        semaphore.SetAccessControl(semSec);

        semaphore = System.Threading.Semaphore::OpenExisting(_semaphoreName);

        return semaphore;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>