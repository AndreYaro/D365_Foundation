<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailClearExternalIdentity</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>RetailClearExternalIdentity</c> class clears the existing external identity for Retail worker(s).
/// </summary>
class RetailClearExternalIdentity
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

    HcmWorker hcmWorker;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>HcmWorker</c> with the caller record.
    /// </summary>
    /// <param name="_args">
    /// Details of the caller datasource.
    /// </param>
    /// <remarks>
    /// Calls the <c>HcmWorker</c> method to initialize the table.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// The caller dataset is not <c>HcmWorker</c> table.
    /// </exception>
    void initFromArgs(Args _args)
    {
        if (_args && _args.dataset())
        {
            switch (_args.dataset())
            {
                case tablenum(HcmWorker) :
                    this.hcmWorker(_args.record());
                    break;
                default :
                    throw error ("@Retail:ClearExternalIdentityMustBeCalledByHcmWorker");
            }
        }
        else
        {
            throw error ("@Retail:ClearExternalIdentityMustBeCalledByHcmWorker");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hcmWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns the table instance passed as the parameter to the class variable.
    /// </summary>
    /// <param name="_hcmWorker">
    /// The table instance of <c>HcmWorker</c> table.
    /// </param>
    /// <returns>
    /// The table instance of <c>HcmWorker</c> table after assigning from the parameter.
    /// </returns>
    public HcmWorker hcmWorker(HcmWorker _hcmWorker = hcmWorker)
    {
        hcmWorker = _hcmWorker;

        return hcmWorker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the existing external identity information associated with the worker.
    /// </summary>
    public void run()
    {
        if (box::yesNo("@Retail:RetailExternalIdentityClearConfirmation", DialogButton::Yes) == DialogButton::Yes)
        {
            RetailStaffTable retailStaff;
            FormDataSource ds = FormDataUtil::getFormDataSource(this.hcmWorker());

            // We declare a string list for the ease of string concatenation.
            List modifiedStaffRecIdList = new List(Types::String);

            ttsbegin;

            //If there were any selected rows from the datasource, then add their RecIds to the list.
            if (ds.anyMarked())
            {
                HcmWorker row = ds.getFirst(1, false);
                while (row)
                {
                    select forupdate retailStaff
                    where retailStaff.staffId == row.PersonnelNumber;

                    retailStaff.ExternalIdentityAlias = '';
                    retailStaff.ExternalIdentityName = '';
                    retailStaff.ExternalIdentityId = '';
                    retailStaff.ExternalIdentitySubId = '';
                    retailStaff.tmpExternalIdentityAlias = '';

                    retailStaff.update();

                    modifiedStaffRecIdList.addEnd(int642Str(retailStaff.RecId));
                    row = ds.getNext();
                }
            }
            else
            {
                //Add the single current record.

                select forupdate retailStaff
                where retailStaff.staffId == this.hcmWorker().PersonnelNumber;

                retailStaff.ExternalIdentityAlias = '';
                retailStaff.ExternalIdentityName = '';
                retailStaff.ExternalIdentityId = '';
                retailStaff.ExternalIdentitySubId = '';
                retailStaff.tmpExternalIdentityAlias = '';

                retailStaff.update();

                modifiedStaffRecIdList.addEnd(int642Str(retailStaff.RecId));
            }

            ttscommit;

            // Refresh caller datasource
            ds.research(true);
            ds.refresh();

            eventSource.EventWriteCriticalEmployeeDataModified(strList2str(modifiedStaffRecIdList, ', '), 'ExternalIdentity', 'delete');
            info("@Retail:RetailExternalIdentityClearFinished");

            if (FeatureStateProvider::isFeatureEnabled(RetailEmployeeExternalIdentityLocalAuthFeature::instance()))
            {
                info("@Retail:RetailWorkerAuthInfoChanged");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RetailClearExternalIdentity identityClear = new RetailClearExternalIdentity();

        identityClear.initFromArgs(_args);
        identityClear.run();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>