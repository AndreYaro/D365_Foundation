<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostAllocationSelectBase_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CostAllocationSelectBase_RU
{
    Object                      callerObject;
    CostAllocationForm_RU       costAllocationForm;

    QueryRun                    queryRun;
    Query                       query;

    VendInvoiceJour             sourceVendInvoiceJour;

    VendInvoiceJour             vendInvoiceJour;
    VendInvoiceTrans            vendInvoiceTrans;

    CustInvoiceJour             custInvoiceJour;
    CustInvoiceTrans            custInvoiceTrans;

    CostAllocationType_RU       costAllocationType;
    CostMarkupAllocate_RU       allocateAfter;

    TmpCostAllocationBase_RU    costAllocationBase;

    boolean                     stockedOnly;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromCaller</Name>
				<Source><![CDATA[
        protected void initFromCaller(Object _callerObject)
    {
        if (!_callerObject)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        callerObject        = _callerObject;
        costAllocationForm  = callerObject.costAllocationForm();

        if (!costAllocationForm)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        costAllocationType      = costAllocationForm.allocationType();
        allocateAfter           = costAllocationForm.allocateAfter();
        sourceVendInvoiceJour   = callerObject.sourceVendInvoiceJour();
        this.parmStockedOnly(costAllocationForm.stockedProduct());

        if (costAllocationType == CostAllocationType_RU::Expenses)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
        protected void initQuery()
    {
        #define.stockedQueryName    ("AllocationSelectBaseStocked_RU")
        #define.NonStockedQueryName ("AllocationSelectBaseNonStocked_RU")

        QueryBuildDataSource        qbdsVendInvoiceTrans;

        switch (costAllocationType)
        {
            case CostAllocationType_RU::Overhead:

                if (this.parmStockedOnly())
                {
                    query = new Query(#stockedQueryName);
                }
                else
                {
                    query = new Query(#nonStockedQueryName);
                    qbdsVendInvoiceTrans = query.dataSourceTable(tablenum(VendInvoiceTrans));
                    qbdsVendInvoiceTrans.addRange(fieldNum(VendInvoiceTrans, PurchId));
                }
            break;

            case CostAllocationType_RU::Indebtedness:
                query = new Query();

                QueryBuildDataSource qbdsVendInvoiceJour = query.addDataSource(tablenum(VendInvoiceJour));

                qbdsVendInvoiceTrans = qbdsVendInvoiceJour.addDataSource(tablenum(VendInvoiceTrans));
                qbdsVendInvoiceTrans.relations(true);

                QueryBuildDataSource qbdsCustInvoiceJour = query.addDataSource(tablenum(CustInvoiceJour));

                QueryBuildDataSource qbdsCustInvoiceTrans = qbdsCustInvoiceJour.addDataSource(tablenum(CustInvoiceTrans));
                qbdsCustInvoiceTrans.relations(true);

              break;
        }

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStockedOnly</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Property - show only stocked items
    /// </summary>
    /// <param name="_value">
    ///  new value
    /// </param>
    /// <returns>
    ///  current value
    /// </returns>
    public boolean parmStockedOnly(boolean _value = stockedOnly)
    {
        stockedOnly = _value;
        return stockedOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
        private boolean prompt()
    {
        return queryRun.prompt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
        public void run()
    {
        #OCCRetryCount

        if (! this.validate())
        {
            throw error("@SYS25904");
        }

        try
        {
            ttsbegin;

            this.runSelectBase();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runSelectBase</Name>
				<Source><![CDATA[
        protected void runSelectBase()
    {
        TmpCostAllocationBase_RU tmpCostAllocationBase;

        callerObject.clearTmpTables();
        costAllocationForm.initMarkRecordSets();
        costAllocationForm.recalcAmounts();

        switch (costAllocationType)
        {
            case CostAllocationType_RU::Overhead:
                while (queryRun.next())
                {
                    vendInvoiceTrans = queryRun.get(tablenum(VendInvoiceTrans));
                    if (vendInvoiceTrans.vendInvoiceJour().RecId == sourceVendInvoiceJour.RecId ||
                        vendInvoiceTrans.inventDim().inventProfile_RU().LockCostAdjustment)
                    {
                        continue;
                    }

                    costAllocationBase.clear();
                    costAllocationBase.AllocSourceJourRecId = sourceVendInvoiceJour.RecId;
                    costAllocationBase.initFromVendInvoiceTrans(vendInvoiceTrans);
                    costAllocationBase.insert();
                }
                break;

            case CostAllocationType_RU::Indebtedness:
                while (queryRun.next())
                {
                    vendInvoiceTrans    = queryRun.get(tablenum(VendInvoiceTrans));
                    custInvoiceTrans    = queryRun.get(tablenum(CustInvoiceTrans));
                    custInvoiceJour     = queryRun.get(tablenum(CustInvoiceJour));
                    vendInvoiceJour     = queryRun.get(tablenum(VendInvoiceJour));

                    if (vendInvoiceTrans)
                    {
                        if (vendInvoiceTrans.vendInvoiceJour().OrderAccount == sourceVendInvoiceJour.OrderAccount ||
                            vendInvoiceJour.isCostAllocationInvoice_RU())
                        {
                            continue;
                        }

                        tmpCostAllocationBase.initFromVendInvoiceTrans(vendInvoiceTrans);
                    }
                    else
                    {
                        if (custInvoiceJour.isCostAllocationInvoice_RU())
                        {
                            continue;
                        }

                        tmpCostAllocationBase.initFromCustInvoiceTrans(custInvoiceTrans);
                    }

                    tmpCostAllocationBase.insert();
                }

                while select sum(InvoiceQty), sum(LineAmount), sum(LineAmountMST), sum(ItemGrossWeight), sum(Volume)
                    from tmpCostAllocationBase
                    group by CustVend, AccountNum, AgreementHeaderExt, PostingProfile, DefaultDimension
                {
                    costAllocationBase.data(tmpCostAllocationBase);
                    costAllocationBase.insert();
                }

                break;
        }

        callerObject.setCostAllocationBase(costAllocationBase);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
        public boolean validate()
    {
        boolean ret = true;

        if (!sourceVendInvoiceJour.RecId)
        {
            ret = checkFailed("@GLS114546");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        static CostAllocationSelectBase_RU construct()
    {
        return new CostAllocationSelectBase_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        static void main(Args _args)
    {
        if (!_args || !_args.caller() || !formHasMethod(_args.caller(), identifierstr(costAllocationForm)) || !formHasMethod(_args.caller(), identifierstr(sourceVendInvoiceJour)))
        {
            throw error("@SYS59121");
        }

        CostAllocationSelectBase_RU costAllocationSelectBase = CostAllocationSelectBase_RU::newFromCaller(_args.caller());
        costAllocationSelectBase.initQuery();

        if (costAllocationSelectBase.prompt())
        {
            costAllocationSelectBase.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromCaller</Name>
				<Source><![CDATA[
        static CostAllocationSelectBase_RU newFromCaller(Object _callerObject)
    {
        if (!_callerObject || !formHasMethod(_callerObject, identifierstr(costAllocationForm)))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        CostAllocationSelectBase_RU costAllocationSelectBase = CostAllocationSelectBase_RU::construct();
        costAllocationSelectBase.initFromCaller(_callerObject);

        return costAllocationSelectBase;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
