<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerVoucherTypeRule_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the type rule for chinese ledger voucher.
/// </summary>
class LedgerVoucherTypeRule_CN
{
    List debitAccList;
    List creditAccList;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkAllCreditContain</Name>
				<Source><![CDATA[
    private boolean checkAllCreditContain(LedgerVoucherType_CN _ledgerVoucherType_CN)
    {
        boolean ret = true;
        LedgerAccountRestrictionMap_CN ledgerAccountRestriction;
        Query ledgerAccountRestrictionQuery = this.getLedgerAccountRestrictionQuery(_ledgerVoucherType_CN.RecId, LedgerVoucherRestrictionType_CN::AllCreditContain);

        if (QueryRun::getQueryRowCount(ledgerAccountRestrictionQuery, 1) == 0)
        {
            return ret;
        }

        QueryRun queryRun = new QueryRun(ledgerAccountRestrictionQuery);

        ListEnumerator enumerator = creditAccList.getEnumerator();
        while (ret && enumerator.moveNext())
        {
            ret = false;
            while (queryRun.next())
            {
                ledgerAccountRestriction = queryRun.get(this.ledgerAccountRestrictionTableId());
                if (this.isLedgerAccountRestrictionSatisfied(enumerator.current(), ledgerAccountRestriction))
                {
                    ret = true;
                    break;
                }
            }
            queryRun.reset();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAllCreditExclude</Name>
				<Source><![CDATA[
    private boolean checkAllCreditExclude(LedgerVoucherType_CN _ledgerVoucherType_CN)
    {
        boolean ret = true;
        LedgerAccountRestrictionMap_CN ledgerAccountRestriction;

        QueryRun queryRun = new QueryRun(this.getLedgerAccountRestrictionQuery(_ledgerVoucherType_CN.RecId, LedgerVoucherRestrictionType_CN::AllCreditExclude));
        while (queryRun.next())
        {
            ledgerAccountRestriction = queryRun.get(this.ledgerAccountRestrictionTableId());

            ListEnumerator enumerator = creditAccList.getEnumerator();
            while (enumerator.moveNext())
            {
                if (this.isLedgerAccountRestrictionSatisfied(enumerator.current(), ledgerAccountRestriction))
                {
                    return false;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAllDebitContain</Name>
				<Source><![CDATA[
    private boolean checkAllDebitContain(LedgerVoucherType_CN _ledgerVoucherType_CN)
    {
        boolean ret = true;
        LedgerAccountRestrictionMap_CN ledgerAccountRestriction;
        Query ledgerAccountRestrictionQuery = this.getLedgerAccountRestrictionQuery(_ledgerVoucherType_CN.RecId, LedgerVoucherRestrictionType_CN::AllDebitContain);

        if (QueryRun::getQueryRowCount(ledgerAccountRestrictionQuery, 1) == 0)
        {
            return ret;
        }

        QueryRun queryRun = new QueryRun(ledgerAccountRestrictionQuery);

        ListEnumerator enumerator = debitAccList.getEnumerator();
        while (ret && enumerator.moveNext())
        {
            ret = false;
            while (queryRun.next())
            {
                ledgerAccountRestriction = queryRun.get(this.ledgerAccountRestrictionTableId());
                if (this.isLedgerAccountRestrictionSatisfied(enumerator.current(), ledgerAccountRestriction))
                {
                    ret = true;
                    break;
                }
            }
            queryRun.reset();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAllDebitExclude</Name>
				<Source><![CDATA[
    private boolean checkAllDebitExclude(LedgerVoucherType_CN _ledgerVoucherType_CN)
    {
        boolean ret = true;
        LedgerAccountRestrictionMap_CN ledgerAccountRestriction;

        QueryRun queryRun = new QueryRun(this.getLedgerAccountRestrictionQuery(_ledgerVoucherType_CN.RecId, LedgerVoucherRestrictionType_CN::AllDebitExclude));
        while (queryRun.next())
        {
            ledgerAccountRestriction = queryRun.get(this.ledgerAccountRestrictionTableId());

            ListEnumerator enumerator = debitAccList.getEnumerator();
            while (enumerator.moveNext())
            {
                if (this.isLedgerAccountRestrictionSatisfied(enumerator.current(), ledgerAccountRestriction))
                {
                    return false;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCreditContain</Name>
				<Source><![CDATA[
    private boolean checkCreditContain(LedgerVoucherType_CN _ledgerVoucherType_CN)
    {
        boolean ret = true;
        LedgerAccountRestrictionMap_CN ledgerAccountRestriction;

        QueryRun queryRun = new QueryRun(this.getLedgerAccountRestrictionQuery(_ledgerVoucherType_CN.RecId, LedgerVoucherRestrictionType_CN::CreditContain));
        while (queryRun.next())
        {
            ledgerAccountRestriction = queryRun.get(this.ledgerAccountRestrictionTableId());

            if (ret)
            {
                ret = false;
            }

            ListEnumerator enumerator = creditAccList.getEnumerator();
            while (enumerator.moveNext())
            {
                if (this.isLedgerAccountRestrictionSatisfied(enumerator.current(), ledgerAccountRestriction))
                {
                    return true;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDebitContain</Name>
				<Source><![CDATA[
    private boolean checkDebitContain(LedgerVoucherType_CN _ledgerVoucherType_CN)
    {
        boolean ret = true;
        LedgerAccountRestrictionMap_CN ledgerAccountRestriction;

        QueryRun queryRun = new QueryRun(this.getLedgerAccountRestrictionQuery(_ledgerVoucherType_CN.RecId, LedgerVoucherRestrictionType_CN::DebitContain));
        while (queryRun.next())
        {
            ledgerAccountRestriction = queryRun.get(this.ledgerAccountRestrictionTableId());

            if (ret)
            {
                ret = false;
            }

            ListEnumerator enumerator = debitAccList.getEnumerator();
            while (enumerator.moveNext())
            {
                if (this.isLedgerAccountRestrictionSatisfied(enumerator.current(), ledgerAccountRestriction))
                {
                    return true;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVoucherExclude</Name>
				<Source><![CDATA[
    private boolean checkVoucherExclude(LedgerVoucherType_CN _ledgerVoucherType_CN)
    {
        boolean ret = true;
        LedgerAccountRestrictionMap_CN ledgerAccountRestriction;

        QueryRun queryRun = new QueryRun(this.getLedgerAccountRestrictionQuery(_ledgerVoucherType_CN.RecId, LedgerVoucherRestrictionType_CN::VoucherExclude));
        while (queryRun.next())
        {
            ledgerAccountRestriction = queryRun.get(this.ledgerAccountRestrictionTableId());

            ListEnumerator enumerator = debitAccList.getEnumerator();
            while (enumerator.moveNext())
            {
                if (this.isLedgerAccountRestrictionSatisfied(enumerator.current(), ledgerAccountRestriction))
                {
                    return false;
                }
            }

            enumerator = creditAccList.getEnumerator();
            while (enumerator.moveNext())
            {
                if (this.isLedgerAccountRestrictionSatisfied(enumerator.current(), ledgerAccountRestriction))
                {
                    return false;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVoucherInclude</Name>
				<Source><![CDATA[
    private boolean checkVoucherInclude(LedgerVoucherType_CN _ledgerVoucherType_CN)
    {
        boolean ret = true;
        LedgerAccountRestrictionMap_CN ledgerAccountRestriction;

        QueryRun queryRun = new QueryRun(this.getLedgerAccountRestrictionQuery(_ledgerVoucherType_CN.RecId, LedgerVoucherRestrictionType_CN::VoucherInclude));
        while (queryRun.next())
        {
            ledgerAccountRestriction = queryRun.get(this.ledgerAccountRestrictionTableId());

            if (ret)
            {
                ret = false;
            }

            ListEnumerator enumerator = debitAccList.getEnumerator();
            while (enumerator.moveNext())
            {
                if (this.isLedgerAccountRestrictionSatisfied(enumerator.current(), ledgerAccountRestriction))
                {
                    return true;
                }
            }

            enumerator = creditAccList.getEnumerator();
            while (enumerator.moveNext())
            {
                if (this.isLedgerAccountRestrictionSatisfied(enumerator.current(), ledgerAccountRestriction))
                {
                    return true;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVoucherTypeRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the ledgerJournalTrans complies with voucher type rules.
    /// </summary>
    /// <param name="_ledgerVoucherType_CN">
    /// A record of table <c>LedgerVoucherType_CN</c>
    /// </param>
    /// <returns>
    /// True if the ledgerJournalTrans complies with the voucher type rules, otherwise false.
    /// </returns>
    public boolean checkVoucherTypeRule(LedgerVoucherType_CN _ledgerVoucherType_CN)
    {
        boolean ret = false;

        ret = this.checkDebitContain(_ledgerVoucherType_CN)
              && this.checkCreditContain(_ledgerVoucherType_CN)
              && this.checkAllDebitExclude(_ledgerVoucherType_CN)
              && this.checkAllCreditExclude(_ledgerVoucherType_CN)
              && this.checkVoucherExclude(_ledgerVoucherType_CN)
              && this.checkVoucherInclude(_ledgerVoucherType_CN)
              && this.checkAllDebitContain(_ledgerVoucherType_CN)
              && this.checkAllCreditContain(_ledgerVoucherType_CN);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucherType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets voucher type.
    /// </summary>
    /// <returns>
    /// The instance of the <c>LedgerVoucherType_CN</c> class.
    /// </returns>
    public LedgerVoucherType_CN getVoucherType()
    {
        LedgerVoucherType_CN ledgerVoucherType_CN;

        while select ledgerVoucherType_CN
            order by Priority desc
            where ledgerVoucherType_CN.DefaultType == NoYes::No
        {
            if (this.checkVoucherTypeRule(ledgerVoucherType_CN))
            {
                return ledgerVoucherType_CN;
            }
        }
        return LedgerVoucherType_CN::findDefault();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreditAccSet</Name>
				<Source><![CDATA[
    private List parmCreditAccSet(List _creditAccList = creditAccList)
    {
        creditAccList = _creditAccList;
        return creditAccList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDebitAccSet</Name>
				<Source><![CDATA[
    private List parmDebitAccSet(List _debitAccListt = debitAccList)
    {
        debitAccList = _debitAccListt;
        return debitAccList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInterCompanyAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets inter company account.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The ledger journal transaction.
    /// </param>
    /// <param name="_accountOffsetaccount">
    /// The off set account.
    /// </param>
    /// <returns>
    /// The intsance of the <c>LedgerDimensionDefaultAccount</c> class.
    /// </returns>
    public static LedgerDimensionDefaultAccount getInterCompanyAccount(
        LedgerJournalTrans   _ledgerJournalTrans,
        AccountOffsetaccount _accountOffsetaccount)
    {
        LedgerJournalTrans ledgerJournalTransOffset;

        if (_accountOffsetaccount == AccountOffsetaccount::Account)
        {
            AmountMSTDebCred transactionAmount = _ledgerJournalTrans.AmountCurDebit ?
                abs(_ledgerJournalTrans.AmountCurDebit) :
                - abs(_ledgerJournalTrans.AmountCurCredit);

            return LedgerInterCompany::getOriginatingCompanyLedgerDimensionWithAmount(
                transactionAmount,
                curExt(),
                _ledgerJournalTrans.Company);
        }
        else
        {
            ledgerJournalTransOffset.AmountCurCredit = _ledgerJournalTrans.AmountCurDebit;
            ledgerJournalTransOffset.AmountCurDebit  = _ledgerJournalTrans.AmountCurCredit;
            ledgerJournalTransOffset.Company         = _ledgerJournalTrans.OffsetCompany;

            AmountMSTDebCred transactionAmount = ledgerJournalTransOffset.AmountCurDebit ?
                abs(ledgerJournalTransOffset.AmountCurDebit) :
                - abs(ledgerJournalTransOffset.AmountCurCredit);

            return LedgerInterCompany::getOriginatingCompanyLedgerDimensionWithAmount(
                transactionAmount,
                curExt(),
                ledgerJournalTransOffset.Company);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new type rule from account.
    /// </summary>
    /// <param name="_debitAccSet">
    /// The account settings.
    /// </param>
    /// <param name="_creditAccSet">
    /// The account credit settings.
    /// </param>
    /// <returns>
    /// The instance of the <c>LedgerVoucherTypeRule_CN</c> class.
    /// </returns>
    public static LedgerVoucherTypeRule_CN newFromAccount(List _debitAccSet, List _creditAccSet)
    {
        LedgerVoucherTypeRule_CN ledgerVoucherTypeRule;

        ledgerVoucherTypeRule = new LedgerVoucherTypeRule_CN();
        ledgerVoucherTypeRule.parmDebitAccSet(_debitAccSet);
        ledgerVoucherTypeRule.parmCreditAccSet(_creditAccSet);
        return ledgerVoucherTypeRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new type rule from voucher.
    /// </summary>
    /// <param name="_journalNum">
    /// The journal number.
    /// </param>
    /// <param name="_voucher">
    /// The voucher.
    /// </param>
    /// <returns>
    /// The instance of the <c>LedgerVoucherTypeRule_CN</c> class.
    /// </returns>
    public static LedgerVoucherTypeRule_CN newFromVoucher(JournalId _journalNum, Voucher _voucher)
    {
        LedgerVoucherTypeRule_CN    ledgerVoucherTypeRule;
        LedgerJournalTrans          ledgerJournalTrans;
        List                        debitAccSetLocal  = new List(Types::Container);
        List                        creditAccSetLocal = new List(Types::Container);
        LedgerAccount               ledgerAccount;
        LedgerDimensionAccount      ledgerDimensionAccount;

        ledgerVoucherTypeRule = new LedgerVoucherTypeRule_CN();

        while select Company, OffsetCompany, AccountType, OffsetAccountType, LedgerDimension, OffsetLedgerDimension, AmountCurDebit, AmountCurCredit
            from ledgerJournalTrans
           where ledgerJournalTrans.JournalNum == _journalNum
              && ledgerJournalTrans.Voucher    == _voucher
        {
            if (ledgerJournalTrans.LedgerDimension)
            {
                if (ledgerJournalTrans.Company == curext())
                {
                    if (ledgerJournalTrans.AmountCurDebit != 0)
                    {
                        if (ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger)
                        {
                            ledgerAccount = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(ledgerJournalTrans.LedgerDimension);

                            if (ledgerAccount)
                            {
                                debitAccSetLocal.addEnd([ledgerAccount, ledgerJournalTrans.AccountType, ledgerJournalTrans.RecId]);
                            }
                        }
                        else
                        {
                            debitAccSetLocal.addEnd([ledgerJournalTrans.LedgerDimension, ledgerJournalTrans.AccountType, ledgerJournalTrans.RecId]);
                        }
                    }
                    else if (ledgerJournalTrans.AmountCurCredit != 0)
                    {
                        if (ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger)
                        {
                            ledgerAccount = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(ledgerJournalTrans.LedgerDimension);

                            if (ledgerAccount)
                            {
                                creditAccSetLocal.addEnd([ledgerAccount, ledgerJournalTrans.AccountType, ledgerJournalTrans.RecId]);
                            }
                        }
                        else
                        {
                            creditAccSetLocal.addEnd([ledgerJournalTrans.LedgerDimension, ledgerJournalTrans.AccountType, ledgerJournalTrans.RecId]);
                        }
                    }
                }
                else
                {
                    ledgerDimensionAccount = LedgerVoucherTypeRule_CN::getInterCompanyAccount(ledgerJournalTrans, AccountOffsetaccount::Account);
                    ledgerAccount = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(ledgerDimensionAccount);

                    if (!ledgerAccount)
                    {
                        // Fail to get the account for intercompany transaction
                        throw error("@GLS60259");
                    }

                    if (ledgerJournalTrans.AmountCurDebit != 0)
                    {
                        debitAccSetLocal.addEnd([ledgerAccount, LedgerJournalACType::Ledger, ledgerJournalTrans.RecId]);
                    }
                    else if (ledgerJournalTrans.AmountCurCredit != 0)
                    {
                        creditAccSetLocal.addEnd([ledgerAccount, LedgerJournalACType::Ledger, ledgerJournalTrans.RecId]);
                    }
                }
            }
            if (ledgerJournalTrans.OffsetLedgerDimension)
            {
                if (ledgerJournalTrans.OffsetCompany == curext())
                {
                    if (ledgerJournalTrans.AmountCurDebit != 0)
                    {
                        if (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger)
                        {
                            ledgerAccount = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(ledgerJournalTrans.OffsetLedgerDimension);

                            if (ledgerAccount)
                            {
                                creditAccSetLocal.addEnd([ledgerAccount, ledgerJournalTrans.OffsetAccountType, ledgerJournalTrans.RecId]);
                            }
                        }
                        else
                        {
                            creditAccSetLocal.addEnd([ledgerJournalTrans.OffsetLedgerDimension, ledgerJournalTrans.OffsetAccountType, ledgerJournalTrans.RecId]);
                        }
                    }
                    else if (ledgerJournalTrans.AmountCurCredit != 0)
                    {
                        if (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger)
                        {
                            ledgerAccount = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(ledgerJournalTrans.OffsetLedgerDimension);

                            if (ledgerAccount)
                            {
                                debitAccSetLocal.addEnd([ledgerAccount, ledgerJournalTrans.OffsetAccountType, ledgerJournalTrans.RecId]);
                            }
                        }
                        else
                        {
                            debitAccSetLocal.addEnd([ledgerJournalTrans.OffsetLedgerDimension, ledgerJournalTrans.OffsetAccountType, ledgerJournalTrans.RecId]);
                        }
                    }
                }
                else
                {
                    ledgerDimensionAccount = LedgerVoucherTypeRule_CN::getInterCompanyAccount(ledgerJournalTrans, AccountOffsetaccount::OffsetAccount);
                    ledgerAccount = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(ledgerDimensionAccount);

                    if (!ledgerAccount)
                    {
                        // Fail to get the account for intercompany transaction
                        throw error("@GLS60259");
                    }

                    if (ledgerJournalTrans.AmountCurDebit != 0)
                    {
                        creditAccSetLocal.addEnd([ledgerAccount, LedgerJournalACType::Ledger, ledgerJournalTrans.RecId]);
                    }
                    else
                    {
                        debitAccSetLocal.addEnd([ledgerAccount, LedgerJournalACType::Ledger, ledgerJournalTrans.RecId]);
                    }
                }
            }
        }

        ledgerVoucherTypeRule.parmDebitAccSet(debitAccSetLocal);
        ledgerVoucherTypeRule.parmCreditAccSet(creditAccSetLocal);

        return ledgerVoucherTypeRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerAccountRestrictionQuery</Name>
				<Source><![CDATA[
    private Query getLedgerAccountRestrictionQuery(RefRecId _ledgerVoucherTypeRecId, LedgerVoucherRestrictionType_CN _ledgerVoucherRestrictionType)
    {
        int ledgerAccountRestrictionTableId = this.ledgerAccountRestrictionTableId();
        int ledgerVoucherTypeFieldId = fieldName2Id(ledgerAccountRestrictionTableId, identifierStr(LedgerVoucherType));
        int restrictionTypeFieldId = fieldName2Id(ledgerAccountRestrictionTableId, identifierStr(RestrictionType));

        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(ledgerAccountRestrictionTableId);
        qbds.addRange(ledgerVoucherTypeFieldId).value(queryValue(_ledgerVoucherTypeRecId));
        qbds.addRange(restrictionTypeFieldId).value(queryValue(_ledgerVoucherRestrictionType));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerAccountRestrictionTableId</Name>
				<Source><![CDATA[
    private RefTableId ledgerAccountRestrictionTableId()
    {
        return LedgerAccountRestrictionV2Feature_CN::isEnabled() ?
            tableName2Id(tableStr(LedgerAccountRestrictionV2_CN)) :
            tableName2Id(tableStr(LedgerAccountRestriction_CN));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLedgerAccountRestrictionSatisfied</Name>
				<Source><![CDATA[
    private boolean isLedgerAccountRestrictionSatisfied(container _enumeratorValue, LedgerAccountRestrictionMap_CN _ledgerAccountRestriction)
    {
        LedgerJournalACType accountType = conpeek(_enumeratorValue, 2);
        anytype accountValue = conpeek(_enumeratorValue, 1);
        boolean ret = false;

        if (_ledgerAccountRestriction is LedgerAccountRestriction_CN)
        {
            if (accountType == _ledgerAccountRestriction.AccountType
                && accountValue == this.getLedgerDimensionValueForComparison(_ledgerAccountRestriction))
            {
                ret = true;
            }
        }
        else
        {
            if (_ledgerAccountRestriction.AccountCode == TableGroupAll::Table
                && accountType == _ledgerAccountRestriction.AccountType
                && accountValue == this.getLedgerDimensionValueForComparison(_ledgerAccountRestriction)
                && this.additionalConditionsSatisfied(_enumeratorValue, _ledgerAccountRestriction))
            {
                ret = true;
            }

            if (!ret)
            {
                if (_ledgerAccountRestriction.AccountCode == TableGroupAll::GroupId
                    && accountType == _ledgerAccountRestriction.AccountType
                    && typeOf(accountValue) == typeName2Type(extendedTypeStr(DimensionDynamicAccount))
                    && this.getGroupIdFromAccountTypeValue(accountType, accountValue) == _ledgerAccountRestriction.AccountRelation
                    && this.additionalConditionsSatisfied(_enumeratorValue, _ledgerAccountRestriction))
                {
                    ret = true;
                }
            }

            if (!ret)
            {
                if (_ledgerAccountRestriction.AccountCode == TableGroupAll::All
                    && accountType == _ledgerAccountRestriction.AccountType
                    && this.additionalConditionsSatisfied(_enumeratorValue, _ledgerAccountRestriction))
                {
                    ret = true;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerDimensionValueForComparison</Name>
				<Source><![CDATA[
    private anytype getLedgerDimensionValueForComparison(LedgerAccountRestrictionMap_CN _ledgerAccountRestriction)
    {
        anytype ret;

        if (_ledgerAccountRestriction.AccountType == LedgerJournalACType::Ledger)
        {
            ret = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(_ledgerAccountRestriction.LedgerDimension);
        }
        else
        {
            ret = _ledgerAccountRestriction.LedgerDimension;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGroupIdFromAccountTypeValue</Name>
				<Source><![CDATA[
    private SysGroup getGroupIdFromAccountTypeValue(LedgerJournalACType _accountType, DimensionDynamicAccount _accountValue)
    {
        LedgerJournalAC accountNum = LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(_accountValue);
        SysGroup ret = '';

        switch (_accountType)
        {
            case LedgerJournalACType::Bank:
                ret = BankAccountTable::find(accountNum).BankGroupId;
                break;
            case LedgerJournalACType::Cust:
                ret = CustTable::find(accountNum).CustGroup;
                break;
            case LedgerJournalACType::FixedAssets:
                ret = AssetTable::find(accountNum).AssetGroup;
                break;
            case LedgerJournalACType::Project:
                ret = ProjTable::find(accountNum).ProjGroupId;
                break;
            case LedgerJournalACType::Vend:
                ret = VendTable::find(accountNum).VendGroup;
                break;
            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>additionalConditionsSatisfied</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs additional validations when checking if particular debit or credit list
    /// element satisfies the conditions set up in the current ledger account restriction.
    /// </summary>
    /// <param name = "_enumeratorValue">Debit or credit list element.</param>
    /// <param name = "_ledgerAccountRestriction">
    /// <c>LedgerAccountRestrictionMap_CN</c> record against which validation is performed.
    /// </param>
    /// <returns>
    /// true if addidional conditions are satisfied; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The method is meant as an extension point to perform additional validations when running restriction check.
    /// </remarks>
    protected boolean additionalConditionsSatisfied(container _enumeratorValue, LedgerAccountRestrictionMap_CN _ledgerAccountRestriction)
    {
        boolean ret = true;

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>