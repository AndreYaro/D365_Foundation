<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmPositionActionCompletionAppSuiteHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
class HcmPositionActionCompletionAppSuiteHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>HcmPositionActionCompletion_transferForPositionAndAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for the transferForPositionAndAction delegate of the <c>HcmPositionActionCompletion</c> form
    /// which processes budget-related position transfers.
    /// </summary>
    /// <param name="_positionActionCompletion"></param>
    /// <param name="_positionRecId"></param>
    /// <param name="_actionStateRecId"></param>
    /// <param name="_effectiveOn"></param>
    [SubscribesTo(classStr(HcmPositionActionCompletion), delegateStr(HcmPositionActionCompletion, transferForPositionAndAction))]
    public static void HcmPositionActionCompletion_transferForPositionAndAction(HcmPositionActionCompletion _positionActionCompletion,
        HcmPositionRecId _positionRecId,
        HcmActionStateRecId _actionStateRecId,
        HcmActionType _actionType,
        utcdatetime _effectiveOn)
    {
        boolean isTransferComplete = false;

        isTransferComplete = HcmPositionActionCompletionAppSuiteHandler::transferPositionBudgetDefaultValue(_positionRecId, _actionStateRecId, _actionType, _effectiveOn);

        isTransferComplete = isTransferComplete && HcmPositionActionCompletionAppSuiteHandler::transferPositionBudgetAccountLine(_positionRecId, _actionStateRecId, _actionType, _effectiveOn);

        // AND the result of these transfers with any existing transfers' result tracked by the original class
        _positionActionCompletion.parmIsTransferComplete(_positionActionCompletion.parmIsTransferComplete() && isTransferComplete);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferPositionBudgetAccountLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfers the stage data from the <c>HcmPositionActionBudgetAccountLine</c> table to the
    /// <c>HcmPositionBudgetAccountLine</c> table .
    /// </summary>
    /// <param name="_positionRecId">
    /// The record ID of the <c>HcmPosition</c> record for update.
    /// </param>
    /// <param name="_actionStateRecId">
    /// The record ID of the <c>HcmActionState</c> record .
    /// </param>
    /// <param name="_actionType">
    /// The <c>HcmActionType</c> value of the <c>HcmActionState</c> record .
    /// </param>
    /// <param name="_effectiveOn">
    /// The effective date of the record to be selected.
    /// </param>
    /// <returns>
    /// true if the transfers succeed; otherwise, false.
    /// </returns>
    /// <exception cref="M:Exception::UpdateConflict">
    /// The record of the <c>HcmPositionBudgetAccountLine</c> table has changed after staging.
    /// </exception>
    private static boolean transferPositionBudgetAccountLine(HcmPositionRecId _positionRecId,
        HcmActionStateRecId _actionStateRecId,
        HcmActionType _actionType,
        EffectiveDateTime _effectiveOn)
    {
        boolean isTransferred = true;
        HcmPositionBudgetAccountLine hcmPositionBudgetAccountLine;
        HcmPositionActionBudgetAccountLine hcmPositionActionBudgetAccountLine;
        boolean recordModified;
        boolean recordExpired;
        utcdatetime maxDateTime = DateTimeUtil::maxValue();
        utcdatetime minDateTime = DateTimeUtil::minValue();

        while select * from hcmPositionActionBudgetAccountLine
            where hcmPositionActionBudgetAccountLine.ActionState == _actionStateRecId
        {
            // Set defaults for the addition of new data regardless of Create or Modify action type.
            recordExpired = false;
            recordModified = true;

            if (_actionType == HcmActionType::PositionEdit)
            {
                if (hcmPositionActionBudgetAccountLine.PositionBudgetAccountLineRecId)
                {
                    // An edit to existing data is expected.
                    select firstonly validTimeState(minDateTime, maxDateTime) * from hcmPositionBudgetAccountLine
                        where hcmPositionBudgetAccountLine.RecId == hcmPositionActionBudgetAccountLine.PositionBudgetAccountLineRecId
                        &&    hcmPositionBudgetAccountLine.RecVersion == hcmPositionActionBudgetAccountLine.PositionBudgetAccountLineRecVersion;

                    if (!hcmPositionBudgetAccountLine)
                    {
                        // Expected edit or expiration cannot be completed.
                        throw Exception::UpdateConflict;
                    }
                    else
                    {
                        hcmPositionBudgetAccountLine.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);

                        if (hcmPositionActionBudgetAccountLine.OkToExpire)
                        {
                            // Prepare to expire the record.
                            hcmPositionBudgetAccountLine.selectForUpdate(true);
                            recordExpired = true;
                        }
                    }
                }
            }

            if (recordModified)
            {
                if (recordExpired)
                {
                    // Expire the record
                    hcmPositionBudgetAccountLine.ValidTo = DateTimeUtil::addSeconds(_effectiveOn, -1);
                }
                else
                {
                    // New record or new version of a record.
                    hcmPositionBudgetAccountLine.clear();
                    hcmPositionBudgetAccountLine.Position = _positionRecId;
                    hcmPositionBudgetAccountLine.LegalEntity = hcmPositionActionBudgetAccountLine.LegalEntity;
                    hcmPositionBudgetAccountLine.BudgetPurposeType = hcmPositionActionBudgetAccountLine.BudgetPurposeType;
                    hcmPositionBudgetAccountLine.ValidFrom = _effectiveOn;
                    hcmPositionBudgetAccountLine.ValidTo = DateTimeUtil::maxValue();
                }

                if (hcmPositionBudgetAccountLine.validateWrite())
                {
                    hcmPositionBudgetAccountLine.write();
                }
                else
                {
                    if (isTransferred)
                    {
                        isTransferred = false;
                    }
                }
            }
        }

        return isTransferred;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferPositionBudgetDefaultValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfers the stage data from the <c>HcmPositionActionBudgetDefaultValue</c> table to the
    /// <c>HcmPositionBudgetDefaultValue</c> table .
    /// </summary>
    /// <param name="_positionRecId">
    /// The record ID of the <c>HcmPosition</c> record for update.
    /// </param>
    /// <param name="_actionStateRecId">
    /// The record ID of the <c>HcmActionState</c> record .
    /// </param>
    /// <param name="_actionType">
    /// The <c>HcmActionType</c> value of the <c>HcmActionState</c> record .
    /// </param>
    /// <param name="_effectiveOn">
    /// The effective date of the record to be selected.
    /// </param>
    /// <returns>
    /// true if the transfers succeed; otherwise, false.
    /// </returns>
    /// <exception cref="M:Exception::UpdateConflict">
    /// The record of the <c>HcmPositionBudgetDefaultValue</c> table has changed after staging.
    /// </exception>
    private static boolean transferPositionBudgetDefaultValue(HcmPositionRecId _positionRecId,
        HcmActionStateRecId _actionStateRecId,
        HcmActionType _actionType,
        EffectiveDateTime _effectiveOn)
    {
        boolean isTransferred = true;
        HcmPositionBudgetDefaultValue hcmPositionBudgetDefaultValue;
        HcmPositionActionBudgetDefaultValue hcmPositionActionBudgetDefaultValue;
        boolean recordModified;
        utcdatetime maxDateTime = DateTimeUtil::maxValue();
        utcdatetime minDateTime = DateTimeUtil::minValue();

        while select * from hcmPositionActionBudgetDefaultValue
            where hcmPositionActionBudgetDefaultValue.ActionState == _actionStateRecId
        {
            // Set defaults for the addition of new data regardless of Create or Modify action type.
            recordModified = true;

            if (_actionType == HcmActionType::PositionEdit)
            {
                if (hcmPositionActionBudgetDefaultValue.PositionBudgetDefaultValueRecId)
                {
                    // An edit to existing data is expected.
                    select firstonly validTimeState(minDateTime, maxDateTime) * from hcmPositionBudgetDefaultValue
                        where hcmPositionBudgetDefaultValue.RecId == hcmPositionActionBudgetDefaultValue.PositionBudgetDefaultValueRecId
                        &&    hcmPositionBudgetDefaultValue.RecVersion == hcmPositionActionBudgetDefaultValue.PositionBudgetDefaultValueRecVersion;

                    if (!hcmPositionBudgetDefaultValue)
                    {
                        // Expected edit cannot be completed.
                        throw Exception::UpdateConflict;
                    }
                    else
                    {
                        // Prepare to create a new version of the record.
                        hcmPositionBudgetDefaultValue.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
                    }
                }
            }

            if (recordModified)
            {
                // New record or new version of a record.
                hcmPositionBudgetDefaultValue.clear();
                hcmPositionBudgetDefaultValue.Position = _positionRecId;
                hcmPositionBudgetDefaultValue.LegalEntity = hcmPositionActionBudgetDefaultValue.LegalEntity;
                hcmPositionBudgetDefaultValue.ValidFrom = _effectiveOn;
                hcmPositionBudgetDefaultValue.ValidTo = DateTimeUtil::maxValue();

                if (hcmPositionBudgetDefaultValue.validateWrite())
                {
                    hcmPositionBudgetDefaultValue.write();
                }
                else
                {
                    if (isTransferred)
                    {
                        isTransferred = false;
                    }
                }
            }
        }

        return isTransferred;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>