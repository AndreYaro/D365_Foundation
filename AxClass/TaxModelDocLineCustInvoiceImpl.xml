<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxModelDocLineCustInvoiceImpl</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The tax model class for <c>CustInvoiceLine</c>.
/// </summary>
[TaxModelDocumentLineAttribute(tableStr(CustInvoiceLine))]
public class TaxModelDocLineCustInvoiceImpl extends TaxModelDocLineBaseImpl
{
    CustInvoiceTable custInvoiceTable;
    CustInvoiceLine  custInvoiceLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCustTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustTable</c> based on the cust account on the transaction line.
    /// </summary>
    /// <returns>
    /// The <c>CustTable</c>
    /// </returns>
    public CustTable getCustTable()
    {
        return custInvoiceTable.custTable_OrderAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeliveryDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction delivery date
    /// </summary>
    /// <returns>
    /// The transaction delivery date
    /// </returns>
    public Date getDeliveryDate()
    {
        return custInvoiceTable.InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>InventTransId</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>InventTransId</c>
    /// </returns>
    public InventTransId getInventTransId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ItemId</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>ItemId</c>
    /// </returns>
    public ItemId getItemId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the quantity from the transaction line.
    /// </summary>
    /// <returns>
    ///    The quantity.
    /// </returns>
    /// <remarks>
    ///    If the transaction does not support quantities, 0 may be passed as the quantity. This will be used
    ///    to calculate taxes by unit.
    /// </remarks>
    public Qty getQuantity()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax direction.
    /// </summary>
    /// <returns>
    /// The tax direction
    /// </returns>
    public TaxDirection getTaxDirection()
    {
        return TaxDirection::OutgoingTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the document line transaction currency.
    /// </summary>
    /// <returns>The document line transaction currency.</returns>
    public CurrencyCode getTransactionCurrency()
    {
        return custInvoiceTable.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>TaxModelTransactionType_IN</c> of the transaction
    /// </summary>
    /// <returns>
    /// The <c>TaxModelTransactionType_IN</c> of the transaction
    /// </returns>
    public TaxModelTransactionType getTransactionType()
    {
        if (custInvoiceLine.AmountCur >= 0)
        {
            return TaxModelTransactionType::Normal;
        }
        else
        {
            return TaxModelTransactionType::StrikeBalance;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction posting date
    /// </summary>
    /// <returns>
    /// The transaction posting date
    /// </returns>
    public TransDate getTransDate()
    {
        return custInvoiceTable.InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the domain object.
    /// The method should only be called by the <c>TaxModelDocLineFactoryable_IN</c> classes.
    /// </summary>
    /// <param name="_documentLineMap">
    /// The document line buffer.
    /// </param>
    public void init(SalesPurchJournalLine _documentLineMap)
    {
        if (_documentLineMap is CustInvoiceLine)
        {
            custInvoiceLine = _documentLineMap;
            custInvoiceTable = custInvoiceLine.custInvoiceTable();
        }

        super(_documentLineMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canModifyTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction tax information can be modified or not.
    /// </summary>
    /// <returns>
    /// True if the tax information of document line can be modified; otherwise, false.
    /// </returns>
    public NoYes canModifyTaxInformation()
    {
        if (documentLineMap is CustInvoiceLineTemplate)
        {
            return true;
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxModuleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax module type
    /// </summary>
    /// <returns>
    /// The transaction tax module type
    /// </returns>
    public TaxModuleType getTaxModuleType()
    {
        return TaxModuleType::FreeTxtInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxLogisticsPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax <c>LogisticsPostalAddress</c> of this transaction document line.
    /// </summary>
    /// <param name="_type">
    /// The type. 
    /// </param>
    /// <returns>
    /// The tax <c>LogisticsPostalAddress</c>
    /// </returns>
    public LogisticsPostalAddress getTaxLogisticsPostalAddress(TransTaxInformationType_IN _type = TransTaxInformationType_IN::Normal)
    {
        CompanyInfo         companyInfoLoc;
        DirPartyLocation    dirPartyLocation;

        companyInfoLoc = CompanyInfo::findByCompany_IN(curExt());

        dirPartyLocation = DirPartyLocation::findPrimaryPartyLocation(companyInfoLoc.RecId);

        return LogisticsPostalAddress::findByLocation(dirPartyLocation.Location);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>InventDimId</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>InventDimId</c>
    /// </returns>
    public InventDimId getInventDimId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransTaxPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax <c>LogisticsPostalAddress</c> of this transaction document line.
    /// </summary>
    /// <returns>
    /// The tax <c>LogisticsPostalAddress</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LogisticsPostalAddress getTransTaxPostalAddress()
    {
        return LogisticsPostalAddress::findRecId(this.getTaxLocationRefRecid());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the unit of the item in this transaction document line.
    /// </summary>
    /// <returns>The unit of the item in this transaction line.</returns>
    public UnitOfMeasureSymbol getUnit()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction invoice date
    /// </summary>
    /// <returns>
    /// The transaction invoice date
    /// </returns>
    public InvoiceDate getDocumentInvoiceDate()
    {
        return custInvoiceTable.InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction document date
    /// </summary>
    /// <returns>
    /// The transaction document date
    /// </returns>
    public DocumentDate getDocumentDate()
    {
        return custInvoiceTable.DocumentDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>