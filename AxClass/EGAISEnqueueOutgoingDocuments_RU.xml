<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EGAISEnqueueOutgoingDocuments_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>EGAISEnqueueOutgoingDocuments_RU</c> class is used to enqueue EGAIS outgoing documents.
/// </summary>
public class EGAISEnqueueOutgoingDocuments_RU extends RunBase
{
    RecId outgoingDocumentRecId;

    protected const int CurrentVersion = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSaveLast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines if the last user choices can be saved and restored.
    /// </summary>
    /// <returns>
    /// true, if the last user choices can be saved and restored; false, otherwise
    /// </returns>
    protected boolean canSaveLast()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the last choice that is stored in the last value table.
    /// </summary>
    /// <remarks>
    ///    If no record can be found or the <c>unpack</c> method returns false, <c>initParmDefault</c> method
    ///    will be called. Normally, this method should not be overridden.
    /// </remarks>
    public void getLast()
    {
        if (this.canSaveLast())
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, outgoingDocumentRecId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOutgoingDocumentRecId</Name>
				<Source><![CDATA[
    public RefRecId parmOutgoingDocumentRecId(RefRecId _outgoingDocumentRecId = outgoingDocumentRecId)
    {
        outgoingDocumentRecId = _outgoingDocumentRecId;

        return outgoingDocumentRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
        EGAISOutgoingDocument_RU outgoingDocument;

        setPrefix(EGAISEnqueueOutgoingDocuments_RU::description());

        if (!this.validate())
        {
            throw error("@SYS18447");
        }

        try
        {
            ttsbegin;

            while select forUpdate outgoingDocument
                where (outgoingDocument.RecId == outgoingDocumentRecId || !outgoingDocumentRecId)
                   && (outgoingDocument.Status == EGAISOutgoingDocumentStatus_RU::Created
                    || outgoingDocument.Status == EGAISOutgoingDocumentStatus_RU::Error)
            {
                outgoingDocument.Status = EGAISOutgoingDocumentStatus_RU::Enqueued;
                outgoingDocument.update();
            }

            ttsCommit;

            info("@SYS9265");
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Saves the last choice by using the <c>pack</c> method.
    /// </summary>
    /// <remarks>
    ///    This method should not normally be overridden.
    /// </remarks>
    public void saveLast()
    {
        if (this.canSaveLast())
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer version = conPeek(packedClass,1);

        switch (version)
        {
            case CurrentVersion:
                [version, outgoingDocumentRecId] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = super(calledFrom);;
        EGAISOutgoingDocument_RU outgoingDocument;

        if (outgoingDocumentRecId)
        {
            outgoingDocument = EGAISOutgoingDocument_RU::findRecId(outgoingDocumentRecId);

            if (outgoingDocument
                && outgoingDocument.Status != EGAISOutgoingDocumentStatus_RU::Created
                && outgoingDocument.Status != EGAISOutgoingDocumentStatus_RU::Error)
            {
                ret = checkFailed(strFmt("@EGAIS:OutgoingDocumentHasWrongStatus", outgoingDocument.DocumentId));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EGAISEnqueueOutgoingDocuments_RU construct()
    {
        return new EGAISEnqueueOutgoingDocuments_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the description of the class.
    /// </summary>
    /// <returns>
    ///    The description of the class.
    /// </returns>
    static public ClassDescription description()
    {
        return "@EGAIS:QueueEgaisOutgoingDocuments";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        EGAISEnqueueOutgoingDocuments_RU runClass;
        FormDataSource formDataSource;
        EGAISOutgoingDocument_RU outgoingDocument;

        if (_args
            && _args.parmEnumType() == enumNum(AllChosen)
            && _args.parmEnum()     == allChosen::Chosen)
        {
            if (!_args.record() || _args.dataset() != tableNum(EGAISOutgoingDocument_RU))
            {
                throw error("@SYS82774");
            }

            outgoingDocument = _args.record();
        }

        runClass = EGAISEnqueueOutgoingDocuments_RU::newFromOutgoingDocument(outgoingDocument);

        if (runClass.prompt())
        {
            runClass.runOperation();

            if (_args && _args.record() && _args.record().isFormDataSource())
            {
                formDataSource = _args.record().dataSource();

                if (formDataSource)
                {
                    formDataSource.research(true);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromOutgoingDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates instance of the <c>EGAISEnqueueOutgoingDocuments_RU</c> class based on the <c>EGAISOutgoingDocument_RU</c> record.
    /// </summary>
    /// <param name="_outgoingDocument">
    ///    <c>EGAISOutgoingDocument_RU</c> table record which has to be enqueued.
    /// </param>
    /// <returns>
    ///    Instance of the <c>EGAISEnqueueOutgoingDocuments_RU</c> class.
    /// </returns>
    public static EGAISEnqueueOutgoingDocuments_RU newFromOutgoingDocument(EGAISOutgoingDocument_RU _outgoingDocument)
    {
        EGAISEnqueueOutgoingDocuments_RU runClass = EGAISEnqueueOutgoingDocuments_RU::construct();

        runClass.parmOutgoingDocumentRecId(_outgoingDocument.RecId);

        return runClass;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>