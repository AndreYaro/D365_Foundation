<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCLanguageServiceErrorHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PCLanguageServiceErrorHandler</c> class handles all exceptions, which are caused by <c>Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.LanguageService.ILanguageService</c> service.
/// </summary>
class PCLanguageServiceErrorHandler
{
    str expressionParseText;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustPositionToFormStringControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts end position of the last character for the invalid symbol to correspond to the format of <c>FormStringControl</c> control.
    /// </summary>
    /// <param name="_positionlineIndex">
    /// An end character position of an invalid symbol.
    /// </param>
    /// <param name="_errorLineIndex">
    /// A line of an invalid symbol speficied.
    /// </param>
    /// <returns>
    /// An adjusted end position of the last character for the invalid symbol.
    /// </returns>
    private int adjustPositionToFormStringControl(int _positionlineIndex, int _errorLineIndex)
    {
        if (_positionlineIndex)
        {
            _positionlineIndex += _errorLineIndex - 1;
        }

        return _positionlineIndex;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getErrorCharEndInParsedText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an end position of an invalid symbol in the <c>FormStringControl</c> editor.
    /// </summary>
    /// <param name="_errorLineIndex">
    /// A line of an invalid symbol speficied.
    /// </param>
    /// <param name="_errorColumnIndexEnd">
    /// An end position of the invalid symbol
    /// </param>
    /// <param name="_text">
    /// A specified parsed expression.
    /// </param>
    /// <returns>
    /// An end position of an invalid symbol in the <c>FormStringControl</c> editor.
    /// </returns>
    private int getErrorCharEndInParsedText(int _errorLineIndex, int _errorColumnIndexEnd, str _text)
    {
        int positionlineIndex;
        int counter;

        for (counter = 1; counter < _errorLineIndex; Counter++)
        {
            positionlineIndex = strFind(_text, '\n', positionlineIndex + 1, strlen(_text));
        }

        return this.adjustPositionToFormStringControl(positionlineIndex, _errorLineIndex) + _errorColumnIndexEnd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleLanguageServiceException</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the processing of <c>Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.LanguageService.LanguageServiceException</c> exception.
    /// </summary>
    /// <param name="_exception">
    /// A specified <c>Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.LanguageService.LanguageServiceException</c> exception.
    /// </param>
    /// <returns>
    /// An instance of <c>PCLanguageServiceError</c> class.
    /// </returns>
    protected PCLanguageServiceError handleLanguageServiceException(CLRObject _exception)
    {
        CLRObject errorType = _exception.get_ErrorType();
        PCLanguageServiceError  languageServiceError    = PCLanguageServiceError::construct();
        str                     failureSymbol           = _exception.get_FailureString();
        int                     errorLineIndex          = _exception.get_LinePosition();
        int                     errorColumnIndexEnd     = _exception.get_ColumnPosition();
        int                     errorCharEnd;
        int                     errorCharStart;
        str                     errorLabel;

        #define.Attribute(1)
        #define.EnumValue(0)
        #define.InvalidConstant(4)
        #define.InvalidLanguageConstruct(5)
        #define.InvalidToken(2)
        #define.InvalidOperator(3)

        errorCharEnd = this.getErrorCharEndInParsedText(errorLineIndex, errorColumnIndexEnd, this.parmExpressionParseText());
        errorCharStart = errorCharEnd - strLen(failureSymbol);

        switch (any2int(CLRInterop::getAnyTypeForObject(errorType)))
        {
            case #Attribute:
                errorLabel = "@SYS4004643";
                break;
            case #EnumValue:
                // Offset by surrounding quote chars
                errorCharStart-=2;
                errorLabel = "@SYS4004654";
                break;
            case #InvalidConstant:
                errorLabel = "@SYS4004665";
                break;
            case #InvalidLanguageConstruct:
                // The span is a larger construct.
                errorCharStart = errorCharEnd;
                errorLabel = "@SYS4004669";
                break;
            case #InvalidOperator:
                errorLabel = "@SYS4004670";
                break;
            case #InvalidToken:
                errorLabel = "@SYS4004671";
                break;
            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }

        languageServiceError.init(errorCharStart, errorCharEnd, strFmt(errorLabel, failureSymbol, errorLineIndex, errorColumnIndexEnd));

        return  languageServiceError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExpressionParseText</Name>
				<Source><![CDATA[
        public str parmExpressionParseText(str _expressionParseText = expressionParseText)
    {
        expressionParseText = _expressionParseText;

        return expressionParseText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processException</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the processing of <c>System.Exception</c> exception, which is cause by <c>Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.LanguageService.ILanguageService</c> service.
    /// </summary>
    /// <param name="_exception">
    /// A specified <c>System.Exception</c> exception.
    /// </param>
    /// <returns>
    /// An instance of <c>PCLanguageServiceError</c> class.
    /// </returns>
    public PCLanguageServiceError processException(System.Exception _exception)
    {
        PCLanguageServiceError  languageServiceError;
        System.Exception        innerException      = _exception.get_InnerException();
        System.Type             type;
        str                     typeString;

        if (innerException)
        {
            type        = innerException.GetType();
            typeString  = type.get_FullName();

            if (typeString == 'Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.LanguageService.LanguageServiceException')
            {
                languageServiceError = this.handleLanguageServiceException(innerException);
            }
            else
            {
                languageServiceError = PCLanguageServiceError::construct();
                languageServiceError.parmErrorText(innerException.get_Message());
            }
        }
        else
        {
            languageServiceError = PCLanguageServiceError::construct();
            languageServiceError.parmErrorText("@SYS343054");
        }

        return languageServiceError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static PCLanguageServiceErrorHandler construct()
    {
        return new PCLanguageServiceErrorHandler();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>