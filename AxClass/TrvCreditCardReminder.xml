<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvCreditCardReminder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is responsible for running a job showing a dialog that let's users
/// select some values for a query that picks approvers to send a reminder email to.
/// </summary>
class TrvCreditCardReminder extends RunBaseBatch implements BatchRetryable
{
    Notes               notes;
    int                 reccount;
    TrvHcmWorkerRecId   worker;

    FreeTxt             emailSubject;
    FreeTxt             emailText;
    TrvDays             daysOld;
    NoYesId             notifyDelegate;

    DialogField         dialogEmailSubject;
    DialogField         dialogEmailText;
    DialogField         dialogDaysOld;
    DialogField         dialogNotifyDelegate;

    // This is the query that is the base for this job.
    QueryRun trvExpTableQueryRun;

    // The version of the class, it is used when packing and unpacking.
    #define.CurrentVersion(6)
    #localmacro.CurrentList
        emailSubject,
        emailText,
        daysOld,
        notifyDelegate
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return "@Expense:UnattachedExpenseReminder";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <param name="_dialog">
    ///    An already initialized instance of the <c>DialogRunBase</c> class; optional.
    /// </param>
    /// <param name="_forceOnClient">
    ///    A Boolean value that specifies whether the dialog must be created on the client; optional.
    /// </param>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog(DialogRunbase _dialog = null, boolean _forceOnClient = false)
    {
        Object ret;

        ret = this.dialogInternal(_dialog, _forceOnClient);

        dialogEmailSubject   = ret.addFieldValue(extendedTypeStr(FreeTxt), emailSubject, "@SYS101366", "@SYS101367");
        dialogEmailText      = ret.addFieldValue(extendedTypeStr(FreeTxt), emailText, "@SYS2595", "@SYS101969");

        dialogDaysOld        = ret.addFieldValue(extendedTypeStr(TrvDays), daysOld, "@SYS117518");
        dialogNotifyDelegate = ret.addFieldValue(extendedTypeStr(NoYesId), notifyDelegate, "@Expense:DelegateNotification");

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

		emailSubject = dialogEmailSubject.value();
        emailText = dialogEmailText.value();

        daysOld = dialogDaysOld.value();
        notifyDelegate = dialogNotifyDelegate.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mail</Name>
				<Source><![CDATA[
    private void mail(HcmWorker _hcmWorker)
    {
        TrvAppEmplSub trvAppEmplSub;
        Email		  toDelegatedUserEmail;
        str			  toEmailAddresses;
        const char semiColon = ';';

		if (notes)
        {
            toEmailAddresses = _hcmWorker.email();

            if (notifyDelegate == NoYes::Yes)
            {
                trvAppEmplSub = TrvAppEmplSub::findAllDelegatedUsers(_hcmWorker.RecId);
            }

            while (trvAppEmplSub)
            {
                toDelegatedUserEmail = HcmWorker::findByPerson(DirPersonUser::find(trvAppEmplSub.DelegatedUser).PersonParty).email();

                if (toDelegatedUserEmail)
                {
                    toEmailAddresses = toEmailAddresses + semiColon + toDelegatedUserEmail;
                }
                next trvAppEmplSub;
            }

            TrvMailHelper::sendMailV2(toEmailAddresses, emailSubject, notes);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        trvExpTableQueryRun = new QueryRun(queryStr(TrvEmpl));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, trvExpTableQueryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return trvExpTableQueryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        QueryRun                queryRun;
        HcmWorker               hcmWorker;
        TrvExpTrans             expTrans;
        TrvHcmWorkerRecId       theWorker;

        TrvDateStd              beforeDate;

        QueryBuildRange         dateRange;

        queryRun = this.queryRun();

        beforeDate = DateTimeUtil::date(DateTimeUtil::addDays(DateTimeUtil::getSystemDateTime(), - daysOld));

        dateRange = queryRun.query().dataSourceTable(tableNum(TrvExpTrans)).addRange(fieldNum(TrvExpTrans, TransDate));
        dateRange.value(strFmt('%1..%2', dateNull(), beforeDate));
		
        while (queryRun.next())
        {
            hcmWorker = queryRun.get(tableNum(HcmWorker));
            expTrans  = queryRun.get(tableNum(TrvExpTrans));

            try
            {
                if (theWorker && theWorker != hcmWorker.RecId && HcmWorker::find(theWorker).email())
                {
                    this.mail(HcmWorker::find(theWorker));
                }

                theWorker = hcmWorker.RecId;
                this.runQT( hcmWorker, expTrans );
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
        }

        if (theWorker && HcmWorker::find(theWorker).email())
        {
            this.mail(HcmWorker::find(theWorker));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runQT</Name>
				<Source><![CDATA[
    public void runQT(HcmWorker _hcmWorker, TrvExpTrans _expTrans)
    {
        const str newLine = "\r\n";

        notes = this.formatEmailBodyForNonWorker(_hcmworker, newLine);

        worker  =  _hcmWorker.RecId;

        reccount ++;

        // Note that the literal string is used here instead of the macro because the format
        // specifiers got another meaning in a macro.
        notes = this.formatEmailBodyForDetailedInfo(_expTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormatString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of string format.
    /// </summary>
    /// <returns>
    /// Returns value of string format.
    /// </returns>
    [Wrappable(true)]
    protected final str setFormatString()
    {
        const str formatString = "\r\n\%1 \%2 \%3 \%4 \%5 \%6 \%7";

        return formatString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatEmailBodyForNonWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats the email body for non worker.
    /// </summary>
    /// <param name = "_hcmworker">
    /// The <c>HcmWorker</c> buffer.
    /// </param>
    /// <param name = "_newLine">
    /// The new line.
    /// </param>
    /// <returns>
    /// Returns the notes containing email text and new line.
    /// </returns>
    [Wrappable(true)]
    protected final Notes formatEmailBodyForNonWorker(HcmWorker _hcmworker, str _newLine)
    {
        if (worker != _hcmWorker.RecId)
        {
            reccount = 0;
            notes = emailText + _newLine;
        }

        return notes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatEmailBodyForDetailedInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats the email body for detailed information.
    /// </summary>
    /// <param name = "_expTrans">
    /// The <c>TrvExpTrans</c> buffer.
    /// </param>
    /// <returns>
    /// Returns the notes containing the email body with detailed information.
    /// </returns>
    [Wrappable(true)]
    protected final Notes formatEmailBodyForDetailedInfo(TrvExpTrans _expTrans)
    {
        return notes + strFmt(this.setFormatString(), date2StrUsr(_expTrans.TransDate, DateFlags::FormatAll),
                                                         _expTrans.Paymethod,
                                                         _expTrans.MerchantId,
                                                         _expTrans.editCity(false, ''),
                                                         _expTrans.CountryRegion,
                                                         _expTrans.AmountCurr,
                                                         _expTrans.ExchangeCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether to add a select button to the dialog.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    ///    return a valid <c>queryRun</c> .If you change the return value to false the button will no longer
    ///    be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer         version        = conPeek(packedClass,1);
        container       packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQuery] = packedClass;
                if (packedQuery)
                    trvExpTableQueryRun = new QueryRun(packedQuery);
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@Expense:UnattachedExpenseReminder";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        TrvCreditCardReminder   reminder;

        reminder = new TrvCreditCardReminder();

        if (reminder.prompt())
        {
            reminder.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>