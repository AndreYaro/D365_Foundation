<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransArchiveFormHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
final internal class InventTransArchiveFormHelper
{
    #ISOCountryRegionCodes
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>formQueryAddDynalink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a dynamic link to the form data sources.
    /// </summary>
    /// <param name="_inventTransOrigin">
    /// An <c>InventTransOrigin</c> form data source.
    /// </param>
    /// <param name="_inventTransArchive">
    /// An <c>InventTransArchive</c> form data source.
    /// </param>
    /// <param name="_callerArgs">
    /// An <c>Args</c> object.
    /// </param>
    public static void formQueryAddDynalink(
        FormDataSource _inventTransOrigin,
        FormDataSource _inventTransArchive,
        Args           _callerArgs)
    {
        InventTransOriginFormDataSourceDynalinkWithInventTransArchive::construct().addCallerDynalink(_inventTransOrigin, _inventTransArchive, _callerArgs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formQueryAddDefaultOriginLink</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public static void formQueryAddDefaultOriginLink(
        FormDataSource _inventTransOriginDS,
        FormDataSource _inventTransArchiveDS)
    {
        if (_inventTransOriginDS == null || _inventTransArchiveDS == null)
        {
            return; //we can be called with null
        }

        QueryBuildDataSource qbdsInventTransArchive = _inventTransArchiveDS.query().dataSourceTable(tableNum(InventTransArchive));

        if (_inventTransArchiveDS)
        {
            qbdsInventTransArchive.clearLinks();
            qbdsInventTransArchive.addLink(fieldNum(InventTransOrigin, RecId), fieldNum(InventTransArchive, InventTransOrigin), _inventTransOriginDS.name());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formQueryPreExecute</Name>
				<Source><![CDATA[
    public static void formQueryPreExecute(
        FormDataSource _inventTransOrigin,
        FormDataSource _inventTransArchive,
        Args           _callerArgs)
    {
        InventTransRelationType         relationType = _callerArgs.parmEnum();
        QueryBuildRange                 queryBuildRange;

        switch (_callerArgs.dataset())
        {
            case tableNum(InventSum):
            case tableNum(InventJournalTrans):
            case tableNum(InventTransferLine):
            case tableNum(InventTransferJourLine):
            case tableNum(InventBlocking):
            case tableNum(ProdTable):
            case tableNum(PurchLine):
            case tableNum(PurchRFQLine):
            case tableNum(KanbanJob):
            case tableNum(KanbanBoardTmpProcessJob):
            case tablenum(PmfProdCoBy):
            case tableNum(KanbanBoardTmpTransferJob):
            // <GEERU>
            case tablenum(ProdJournalRelease_RU):
            // </GEERU>
                InventTransFormHelper::buildFormQueryPreExecuteOnCommonTable(_inventTransOrigin, _inventTransArchive, _callerArgs);
                break;           

            case tableNum(WMSJournalTrans):
                WMSJournalTrans wmsJournalTrans = _callerArgs.record() as WMSJournalTrans;
                QueryBuildDataSource queryBuildDataSource = _inventTransArchive.query().dataSourceTable(tableNum(InventTransArchive));
                queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(InventTransArchive, StatusReceipt));
                queryBuildRange.value(queryValue(StatusReceipt::Purchased));                
                break;

            case tableNum(WMSOrderTrans):
                WMSOrderTrans wmsOrderTrans = _callerArgs.record() as WMSOrderTrans;

                queryBuildDataSource = _inventTransArchive.query().dataSourceTable(tableNum(InventTransArchive));

                if (wmsOrderTrans.OrderType == WMSOrderType::Transport)
                {
                    queryBuildRange     = InventTransOrigin::queryAddRangeInventTransId(_inventTransOrigin.query());
                    queryBuildRange.value(wmsOrderTrans.InventTransId);
                }                
                else
                {
                    queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(InventTrans, PickingRouteID));
                    queryBuildRange.value(queryValue(wmsOrderTrans.RouteId));
                }
                break; 

            // <GCN>
            case tablenum(InventPhysQtySumTmp_CN):
                // try to find physical transaction, do nothing because archive transaction is already financial updated.
                break;
            // </GCN>           

            // <GEERU>
            case tablenum(SalesLine):
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
                {
                    if (relationType == InventTransRelationType::InventTransIdGoodsInRoute_RU)
                    {
                        SalesLine salesLine = _callerArgs.record();

                        queryBuildDataSource =  _inventTransArchive.query().dataSourceTable(tablenum(InventTransOrigin));
                        queryBuildDataSource.clearDynalinks();

                        queryBuildDataSource = _inventTransArchive.query().dataSourceTable(tableNum(InventTransArchive));
                        queryBuildDataSource = queryBuildDataSource.addDataSource(tableNum(InventTransOrigin));
                        queryBuildDataSource.joinMode(JoinMode::ExistsJoin);

                        queryBuildRange = queryBuildDataSource.addRange(fieldNum(InventTransOrigin, InventTransId));
                        queryBuildRange.value(queryValue(salesLine.InventTransId));
                        queryBuildRange.status(RangeStatus::Hidden);

                        queryBuildRange = queryBuildDataSource.addRange(fieldNum(InventTransOrigin, RecId));
                        queryBuildRange.value(strfmt('((%1==%2.%3) || (%1==%2.%4))',
                                                fieldstr(InventTransOrigin, RecId),
                                                queryBuildDataSource.parentDataSource().name(),
                                                fieldStr(InventTransArchive, InventTransOrigin),
                                                fieldStr(InventTransArchive, InventTransOriginSales_RU)
                                                ));
                        queryBuildRange.status(RangeStatus::Hidden);
                    }
                }
                break;          
            // </GEERU>
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>