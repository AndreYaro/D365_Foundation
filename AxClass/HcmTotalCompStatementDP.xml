<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmTotalCompStatementDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>HcmTotalCompStatementDP</c> class is the report data provider class for <c>HcmTotalCompStatementReport</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(HcmTotalCompStatementReport)),
    SRSReportParameterAttribute(classStr(HcmTotalCompStatementContract))
]
public class HcmTotalCompStatementDP extends SrsReportDataProviderPreProcess
{
    Map                                     taxCodeDescriptionMap;
    HcmWorker                               hcmWorker;
    HcmWorkerName                           hcmWorkerName;
    UtcDateTime                             dateTimeFrom, dateTimeTo;
    HcmPersonnelNumberId                    hcmPersonnelNumber;
    HcmTmpTotalCompStatement                hcmTmpTotalCompStatement;
    HcmTmpTotalCompStatementTax             hcmTmpTotalCompStatementTax;
    HcmTotalCompStatementContract           contract;
    HcmTmpTotalCompStatementBenefit         hcmTmpTotalCompStatementBenefit;
    HcmTmpTotalCompStatementEarning         hcmTmpTotalCompStatementEarning;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getHcmTmpTotalCompStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data for the report from the temporary table.
    /// </summary>
    /// <returns>
    /// The temporary table <c>PayrollStateWageTaxPrepTmp</c> record.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(HcmTmpTotalCompStatement))
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public HcmTmpTotalCompStatement getHcmTmpTotalCompStatement()
    {
        select hcmTmpTotalCompStatement;
        return hcmTmpTotalCompStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasRangeSet</Name>
				<Source><![CDATA[
    private boolean hasRangeSet(QueryBuildDataSource _qdbs)
    {
        boolean         ret;
        int             cnt, i;
        QueryBuildRange range;

        cnt = _qdbs.rangeCount();

        for (i = 1; i <= cnt; i++)
        {
            range = _qdbs.range(i);
            if (range.value())
            {
                ret = true;
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBenefits</Name>
				<Source><![CDATA[
    private void insertBenefits(HcmWorkerRecId _worker)
    {
        HcmBenefit                              hcmBenefit;
        HcmBenefitRecId                         hcmBenefitRecId;
        HcmBenefitPlan                          hcmBenefitPlan;
        PayrollPayStatement                     payrollPayStatement;
        PayrollPayStatementBenefitLine          payrollPayStatementBenefitLine;

        hcmTmpTotalCompStatement.clear();

        while select Benefit, IsEmployer, sum(AccountingCurrencyAmount), Position from payrollPayStatementBenefitLine
            where payrollPayStatementBenefitLine.IsMarkedForRemoval == NoYes::No
            join StatementSectionName, StatementSectionRecId, DisplayIndex from hcmTmpTotalCompStatementBenefit
                where payrollPayStatementBenefitLine.Benefit == hcmTmpTotalCompStatementBenefit.Benefit
            join hcmBenefit
                where payrollPayStatementBenefitLine.Benefit == hcmBenefit.RecId
            join Description from hcmBenefitPlan
                where hcmBenefit.BenefitPlan == hcmBenefitPlan.RecId
            exists join payrollPayStatement
            group by payrollPayStatementBenefitLine.Benefit,
                        payrollPayStatementBenefitLine.Position,
                        payrollPayStatementBenefitLine.IsEmployer,
                        hcmTmpTotalCompStatementBenefit.StatementSectionName,
                        hcmTmpTotalCompStatementBenefit.StatementSectionRecId,
                        hcmTmpTotalCompStatementBenefit.DisplayIndex,
                        hcmBenefitPlan.Description
            order by payrollPayStatementBenefitLine.Benefit
            where payrollPayStatementBenefitLine.PayStatement == payrollPayStatement.RecId
                && payrollPayStatement.IsReversed == NoYes::No
                && payrollPayStatement.Worker == _worker
                && payrollPayStatement.PaymentStatus == PayrollPaymentStatus::PaymentIssued
                && payrollPayStatement.PaymentDate >= contract.parmFromDate()
                && payrollPayStatement.PaymentDate <= contract.parmToDate()
        {
            if (hcmBenefitRecId != payrollPayStatementBenefitLine.Benefit)
            {
                if (hcmTmpTotalCompStatement.EmployerContribution != 0 || hcmTmpTotalCompStatement.EmployeeContribution != 0)
                {
                    ttsBegin;
                    hcmTmpTotalCompStatement.insert();
                    ttsCommit;
                }

                hcmTmpTotalCompStatement.clear();
                hcmBenefitRecId = payrollPayStatementBenefitLine.Benefit;
            }

            hcmTmpTotalCompStatement.PersonnelNumber = hcmWorker.PersonnelNumber;
            hcmTmpTotalCompStatement.EmployeeName = hcmWorkerName;
            if (payrollPayStatementBenefitLine.Position)
            {
                hcmTmpTotalCompStatement.Position = HcmPositionDetail::findByPosition(payrollPayStatementBenefitLine.Position, dateTimeFrom, dateTimeTo).Description;
            }
            hcmTmpTotalCompStatement.IsBenefit = NoYes::Yes;
            hcmTmpTotalCompStatement.Benefit = payrollPayStatementBenefitLine.Benefit;
            hcmTmpTotalCompStatement.Description = hcmBenefitPlan.Description;
            hcmTmpTotalCompStatement.StatementSectionName = hcmTmpTotalCompStatementBenefit.StatementSectionName;
            hcmTmpTotalCompStatement.StatementSectionRecId = hcmTmpTotalCompStatementBenefit.StatementSectionRecId;
            hcmTmpTotalCompStatement.StatementSectionDisplayIndex = hcmTmpTotalCompStatementBenefit.DisplayIndex;

            switch (contract.parmContributionType())
            {
                case HcmTotalCompStatementContributionType::EmployerAndEmployee:
                    if (payrollPayStatementBenefitLine.IsEmployer)
                    {
                        hcmTmpTotalCompStatement.EmployerContribution = payrollPayStatementBenefitLine.AccountingCurrencyAmount;
                    }
                    else
                    {
                        hcmTmpTotalCompStatement.EmployeeContribution = payrollPayStatementBenefitLine.AccountingCurrencyAmount;
                    }
                    break;

                case HcmTotalCompStatementContributionType::EmployerOnly:
                    if (payrollPayStatementBenefitLine.IsEmployer)
                    {
                        hcmTmpTotalCompStatement.EmployerContribution = payrollPayStatementBenefitLine.AccountingCurrencyAmount;
                    }
                    break;

                case HcmTotalCompStatementContributionType::EmployeeOnly:
                    if (!payrollPayStatementBenefitLine.IsEmployer)
                    {
                        hcmTmpTotalCompStatement.EmployeeContribution = payrollPayStatementBenefitLine.AccountingCurrencyAmount;
                    }
                    break;
            }
        }

        if (hcmTmpTotalCompStatement.PersonnelNumber
            && (hcmTmpTotalCompStatement.EmployerContribution != 0
            || hcmTmpTotalCompStatement.EmployeeContribution != 0))
        {
            ttsBegin;
            hcmTmpTotalCompStatement.insert();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertData</Name>
				<Source><![CDATA[
    private void insertData(HcmWorkerRecId _worker)
    {
        this.insertBenefits(_worker);
        this.insertTaxes(_worker);

        if (contract.parmContributionType() != HcmTotalCompStatementContributionType::EmployeeOnly)
        {
            this.insertEarnings(_worker);
        }

        this.updatePositions(_worker);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEarnings</Name>
				<Source><![CDATA[
    private void insertEarnings(HcmWorkerRecId _worker)
    {
        PayrollEarningCode                      payrollEarningCode;
        PayrollPayStatement                     payrollPayStatement;
        PayrollPayStatementEarningLine          payrollPayStatementEarningLine;

        hcmTmpTotalCompStatement.clear();

        while select sum(AccountingCurrencyAmount), EarningCode, Position from payrollPayStatementEarningLine
            where payrollPayStatementEarningLine.IsMarkedForRemoval == NoYes::No
                && payrollPayStatementEarningLine.Source != PayrollPayStatementLineSource::FringeBenefitRecover
            join StatementSectionName, StatementSectionRecId, displayIndex from hcmTmpTotalCompStatementEarning
                where payrollPayStatementEarningLine.EarningCode == hcmTmpTotalCompStatementEarning.Earningcode
            join Description from payrollEarningCode
                where payrollPayStatementEarningLine.EarningCode == payrollEarningCode.RecId
            exists join payrollPayStatement
            group by payrollPayStatementEarningLine.EarningCode,
                     payrollPayStatementEarningLine.Position,
                     hcmTmpTotalCompStatementEarning.StatementSectionName,
                     hcmTmpTotalCompStatementEarning.StatementSectionRecId,
                     hcmTmpTotalCompStatementEarning.displayIndex,
                     payrollEarningCode.Description
            where payrollPayStatementEarningLine.PayStatement == payrollPayStatement.RecId
                && payrollPayStatement.IsReversed == NoYes::No
                && payrollPayStatement.Worker == _worker
                && payrollPayStatement.PaymentStatus == PayrollPaymentStatus::PaymentIssued
                && payrollPayStatement.PaymentDate >= contract.parmFromDate()
                && payrollPayStatement.PaymentDate <= contract.parmToDate()
        {
            if (payrollPayStatementEarningLine.AccountingCurrencyAmount != 0)
            {
                hcmTmpTotalCompStatement.clear();

                hcmTmpTotalCompStatement.PersonnelNumber = hcmWorker.PersonnelNumber;
                hcmTmpTotalCompStatement.EmployeeName = hcmWorkerName;

                if (payrollPayStatementEarningLine.Position)
                {
                    hcmTmpTotalCompStatement.Position = HcmPositionDetail::findByPosition(payrollPayStatementEarningLine.Position, dateTimeFrom, dateTimeTo).Description;
                }

                hcmTmpTotalCompStatement.EmployerContribution = payrollPayStatementEarningLine.AccountingCurrencyAmount;
                hcmTmpTotalCompStatement.EarningCode = payrollPayStatementEarningLine.EarningCode;
                hcmTmpTotalCompStatement.Description = payrollEarningCode.Description;
                hcmTmpTotalCompStatement.StatementSectionName = hcmTmpTotalCompStatementEarning.StatementSectionName;
                hcmTmpTotalCompStatement.StatementSectionRecId = hcmTmpTotalCompStatementEarning.StatementSectionRecId;
                hcmTmpTotalCompStatement.StatementSectionDisplayIndex = hcmTmpTotalCompStatementEarning.DisplayIndex;
                hcmTmpTotalCompStatement.IsEarning = NoYes::Yes;

                ttsBegin;
                hcmTmpTotalCompStatement.insert();
                ttsCommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserthcmTmpTotalCompStatementBenefit</Name>
				<Source><![CDATA[
    private void inserthcmTmpTotalCompStatementBenefit(HcmTotalCompStatementSectionsList _sectionList)
    {
        List                                    sectionList;
        ListEnumerator                          enumSectionList;
        HcmTotalCompStatementSectionBenefitAll  hcmTotalCompStatementSectionBenefitAll;
        HcmTotalCompStatementDisplayIndex       displayIndex;

        sectionList = strSplit(_sectionList, ",");
        enumSectionList = sectionList.getEnumerator();
        displayIndex = 1;
        while (enumSectionList.moveNext())
        {
            ttsBegin;

            insert_recordset hcmTmpTotalCompStatementBenefit (Benefit, StatementSectionName, StatementSectionRecId, DisplayIndex)
                select Benefit, StatementSectionName, StatementSection, displayIndex from hcmTotalCompStatementSectionBenefitAll
                    group by Benefit, StatementSectionName, StatementSection
                    where hcmTotalCompStatementSectionBenefitAll.StatementSection == str2int64(enumSectionList.current());

            ttsCommit;

            displayIndex++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserthcmTmpTotalCompStatementEarning</Name>
				<Source><![CDATA[
    private void inserthcmTmpTotalCompStatementEarning(HcmTotalCompStatementSectionsList _sectionList)
    {
        List                                    sectionList;
        ListEnumerator                          enumSectionList;
        HcmTotalCompStatementSectionEarningAll  hcmTotalCompStatementSectionEarningAll;
        HcmTotalCompStatementDisplayIndex       displayIndex;

        sectionList = strSplit(_sectionList, ",");
        enumSectionList = sectionList.getEnumerator();
        displayIndex = 1;

        while (enumSectionList.moveNext())
        {
            ttsBegin;

            insert_recordset hcmTmpTotalCompStatementEarning (Earningcode, StatementSectionName, StatementSectionRecId, DisplayIndex)
                select Earningcode, StatementSectionName, StatementSection, displayIndex from hcmTotalCompStatementSectionEarningAll
                    group by Earningcode, StatementSectionName, StatementSection
                    where hcmTotalCompStatementSectionEarningAll.StatementSection == str2int64(enumSectionList.current());

            ttsCommit;

            displayIndex++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserthcmTmpTotalCompStatementTax</Name>
				<Source><![CDATA[
    private void inserthcmTmpTotalCompStatementTax(HcmTotalCompStatementSectionsList _sectionList)
    {
        List                                    sectionList;
        ListEnumerator                          enumSectionList;
        HcmTotalCompStatementSectionTaxAll      hcmTotalCompStatementSectionTaxAll;
        HcmTotalCompStatementDisplayIndex       displayIndex;

        sectionList = strSplit(_sectionList, ",");
        enumSectionList = sectionList.getEnumerator();
        displayIndex = 1;

        while (enumSectionList.moveNext())
        {
            ttsBegin;

            insert_recordset hcmTmpTotalCompStatementTax (TaxCode, StatementSectionName, StatementSectionRecId, DisplayIndex)
                select TaxCode, StatementSectionName, StatementSection, displayIndex from hcmTotalCompStatementSectionTaxAll
                    group by TaxCode, StatementSectionName, StatementSection
                    where hcmTotalCompStatementSectionTaxAll.StatementSection == str2int64(enumSectionList.current());

            ttsCommit;

            displayIndex++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxes</Name>
				<Source><![CDATA[
    private void insertTaxes(HcmWorkerRecId _worker)
    {
        PayrollTaxCode                      payrollTaxCode;
        PayrollTaxCodeDetail                payrollTaxCodeDetail;
        PayrollPayStatement                 payrollPayStatement;
        PayrollPayStatementTaxLine          payrollPayStatementTaxLine;

        while select sum(AccountingCurrencyAmount), TaxCode, Position, IsEmployer from payrollPayStatementTaxLine
            where payrollPayStatementTaxLine.IsMarkedForRemoval == NoYes::No
            join StatementSectionName, StatementSectionRecId, DisplayIndex from hcmTmpTotalCompStatementTax
                where payrollPayStatementTaxLine.TaxCode == hcmTmpTotalCompStatementTax.Taxcode
            join Description from payrollTaxCode
                where payrollPayStatementTaxLine.TaxCode == payrollTaxCode.RecId
            exists join payrollPayStatement
            group by payrollPayStatementTaxLine.TaxCode,
                     payrollPayStatementTaxLine.Position,
                     payrollPayStatementTaxLine.IsEmployer,
                     hcmTmpTotalCompStatementTax.StatementSectionName,
                     hcmTmpTotalCompStatementTax.StatementSectionRecId,
                     hcmTmpTotalCompStatementTax.DisplayIndex,
                     payrollTaxCode.Description
            where payrollPayStatementTaxLine.PayStatement == payrollPayStatement.RecId
                && payrollPayStatement.IsReversed == NoYes::No
                && payrollPayStatement.Worker == _worker
                && payrollPayStatement.PaymentStatus == PayrollPaymentStatus::PaymentIssued
                && payrollPayStatement.PaymentDate >= contract.parmFromDate()
                && payrollPayStatement.PaymentDate <= contract.parmToDate()
        {
            if (payrollPayStatementTaxLine.AccountingCurrencyAmount != 0)
            {
                hcmTmpTotalCompStatement.clear();

                hcmTmpTotalCompStatement.PersonnelNumber = hcmWorker.PersonnelNumber;
                hcmTmpTotalCompStatement.EmployeeName = hcmWorkerName;

                if (payrollPayStatementTaxLine.Position)
                {
                    hcmTmpTotalCompStatement.Position = HcmPositionDetail::findByPosition(payrollPayStatementTaxLine.Position, dateTimeFrom, dateTimeTo).Description;
                }

                hcmTmpTotalCompStatement.TaxCode = payrollPayStatementTaxLine.TaxCode;

                switch (contract.parmContributionType())
                {
                    case HcmTotalCompStatementContributionType::EmployerAndEmployee:
                        if (payrollPayStatementTaxLine.IsEmployer)
                        {
                            hcmTmpTotalCompStatement.EmployerContribution = payrollPayStatementTaxLine.AccountingCurrencyAmount;
                        }
                        else
                        {
                            hcmTmpTotalCompStatement.EmployeeContribution = payrollPayStatementTaxLine.AccountingCurrencyAmount;
                        }
                        break;

                    case HcmTotalCompStatementContributionType::EmployerOnly:
                        if (payrollPayStatementTaxLine.IsEmployer)
                        {
                            hcmTmpTotalCompStatement.EmployerContribution = payrollPayStatementTaxLine.AccountingCurrencyAmount;
                        }
                        break;

                    case HcmTotalCompStatementContributionType::EmployeeOnly:
                        if (!payrollPayStatementTaxLine.IsEmployer)
                        {
                            hcmTmpTotalCompStatement.EmployeeContribution = payrollPayStatementTaxLine.AccountingCurrencyAmount;
                        }
                        break;
                }

                hcmTmpTotalCompStatement.StatementSectionName = hcmTmpTotalCompStatementTax.StatementSectionName;
                hcmTmpTotalCompStatement.StatementSectionRecId = hcmTmpTotalCompStatementTax.StatementSectionRecId;
                hcmTmpTotalCompStatement.StatementSectionDisplayIndex = hcmTmpTotalCompStatementTax.DisplayIndex;
                hcmTmpTotalCompStatement.IsTax = NoYes::Yes;

                if (!taxCodeDescriptionMap.exists(payrollPayStatementTaxLine.TaxCode))
                {
                    payrollTaxCodeDetail = PayrollTaxCodeDetail::findByPayrollTaxCodeLegalEntity(payrollPayStatementTaxLine.TaxCode, CompanyInfo::current());
                    if (payrollTaxCodeDetail.RecId && payrollTaxCodeDetail.ReportDescription)
                    {
                        taxCodeDescriptionMap.insert(payrollPayStatementTaxLine.TaxCode, payrollTaxCodeDetail.ReportDescription);
                    }
                    else
                    {
                        taxCodeDescriptionMap.insert(payrollPayStatementTaxLine.TaxCode, payrollTaxCode.Description);
                    }
                }
                hcmTmpTotalCompStatement.Description = taxCodeDescriptionMap.lookup(payrollPayStatementTaxLine.TaxCode);

                if (hcmTmpTotalCompStatement.EmployerContribution != 0
                       || hcmTmpTotalCompStatement.EmployeeContribution != 0)
                {
                    ttsBegin;
                    hcmTmpTotalCompStatement.insert();
                    ttsCommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        QueryRun                queryRun;
        Query                   query;
        HcmWorkerRecId          workerRecId;

        taxCodeDescriptionMap   = new Map(Types::Int64, Types::String);

        contract     = this.parmDataContract() as HcmTotalCompStatementContract;
        dateTimeFrom = datetoendUtcDateTime(contract.parmFromDate(), DateTimeUtil::getUserPreferredTimeZone());
        dateTimeTo   = datetoendUtcDateTime(contract.parmToDate(), DateTimeUtil::getUserPreferredTimeZone());

        this.insertHcmTmpTotalCompStatementBenefit(contract.parmStatementSectionsList());
        this.insertHcmTmpTotalCompStatementTax(contract.parmStatementSectionsList());
        this.insertHcmTmpTotalCompStatementEarning(contract.parmStatementSectionsList());

        hcmTmpTotalCompStatement.setConnection(this.parmUserConnection());

        query = this.parmQuery();

        if (!this.hasRangeSet(query.dataSourceTable(tableNum(HcmPositionHierarchy))))
        {
            //Disable HcmPositionHierarchy from query if there is no range on this table
            //because not all position has a report to position set on this table
            query.dataSourceTable(tableNum(HcmPositionDetail)).childDataSourceNo(1).enabled(false);
        }

        query.validTimeStateDateTimeRange(dateTimeFrom, dateTimeTo);

        //Filter out paystatements whose status is not PaymentIssued
        SrsReportHelper::addParameterValueRangeToQuery(query,
                                                    tableNum(PayrollPayStatement),
                                                    fieldNum(PayrollPayStatement, PaymentStatus),
                                                    SysQuery::value(PayrollPaymentStatus::PaymentIssued));

        //Filter out paystatements which is reversed
        SrsReportHelper::addParameterValueRangeToQuery(query,
                                                    tableNum(PayrollPayStatement),
                                                    fieldNum(PayrollPayStatement, IsReversed),
                                                    SysQuery::value(NoYes::No));

        //Filter out payment date
        SrsReportHelper::addFromAndToDateRangeToQuery(query,
                                                    contract.parmFromDate(),
                                                    contract.parmToDate(),
                                                    tableNum(PayrollPayStatement),
                                                    fieldNum(PayrollPayStatement, PaymentDate));

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            hcmWorker = queryRun.get(tableNum(HcmWorker));

            if (workerRecId != hcmWorker.RecId)
            {
                hcmWorkerName = hcmWorker.name();
                workerRecId = hcmWorker.RecId;
                hcmPersonnelNumber = hcmWorker.PersonnelNumber;
                this.insertData(hcmWorker.RecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePositions</Name>
				<Source><![CDATA[
    private void updatePositions(HcmWorkerRecId _worker)
    {
        HcmPositionDetail                           hcmPositionDetail;
        HcmPositionWorkerAssignment                 hcmPositionWorkerAssignment;
        HcmTotalCompStatementReportPositions        positionsStr;
        HcmTotalCompStatementReportPositionCount    positionsCount;

        //get all positions for the worker
        while select validTimeState(dateTimeFrom, dateTimeTo) RecId from hcmPositionWorkerAssignment
            join Description from hcmPositionDetail
            group by hcmPositionDetail.Description
            order by hcmPositionDetail.Description asc
            where hcmPositionDetail.Position == hcmPositionWorkerAssignment.Position
                && hcmPositionWorkerAssignment.Worker == _worker
        {
            if (positionsStr)
            {
                positionsStr += "; ";
            }
            positionsStr += hcmPositionDetail.Description;
            positionsCount++;
        }

        update_recordSet hcmTmpTotalCompStatement
            setting Positions = positionsStr, PositionCount = positionsCount
            where hcmTmpTotalCompStatement.PersonnelNumber == hcmPersonnelNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static HcmTotalCompStatementDP construct()
    {
        return new HcmTotalCompStatementDP();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
