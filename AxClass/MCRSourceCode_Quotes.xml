<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRSourceCode_Quotes</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>MCRSourceCode_Quotes</c> controls source code
/// logic specific to sales quotation headers.
/// </summary>
class MCRSourceCode_Quotes extends MCRSourceCode
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mcrCreateCatalogGiftLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a gift line in sales quotations.
    /// </summary>
    public void mcrCreateCatalogGiftLine()
    {
        SalesQuotationLine      salesQuotationLine;
        MCRSalesQuotationLine   mcrSalesQuotationLine;
        mcrSalesQuotationTable  mcrSalesQuotationTableLocal;
        InventTable             inventTable;
        AxSalesQuotationLine    axSalesQuotationLine;
        container               c;
        int                     idx;
        ItemId                  itemId;

        // If the order hasn't been saved yet, there shouldn't be any items created.
        if (!salesQuotationTable.RecId)
        {
            return;
        }

        // Delete any of the free gifts that may have been awarded by a different offer since this logic is called when the source is changed.
        ttsBegin;
        delete_from salesQuotationLine
            exists join mcrSalesQuotationLine
            where mcrSalesQuotationLine.SalesQuotationLine == salesQuotationLine.RecId
                && salesQuotationLine.QuotationId == salesQuotationTable.QuotationId
                && mcrSalesQuotationLine.LineType == MCRLineType::CatalogFreeGift;
        ttsCommit;

        mcrSalesQuotationTableLocal = salesQuotationTable.mcrSalesQuotationTable();

        // Find all free items in the catalog product table
        c = MCRCatalogFreeProduct::getFreeGiftItems(MCRSourceCodeSetup::find(salesQuotationTable.mcrSalesQuotationTable().SourceId).Catalog);
        if (c != conNull())
        {
            // Write new free gifts.
            for (idx = 1; idx <= conlen(c); idx++)
            {
                axSalesQuotationLine = AXSalesQuotationLine::construct();
                itemId = conpeek(c, idx);
                inventTable = InventTable::find(itemId);

                // Assign Sales Line values.
                axSalesQuotationLine.parmItemId(itemId);
                axSalesQuotationLine.parmQtyOrdered(1);
                axSalesQuotationLine.parmSalesQty(1);
                // Get the default sales  unit from the inventTable
                axSalesQuotationLine.parmSalesUnit(InventTableModule::find(itemId, ModuleInventPurchSales::Sales).UnitId);
                axSalesQuotationLine.parmQuotationId(salesQuotationTable.QuotationId);
                axSalesQuotationLine.parmCustAccount(salesQuotationTable.CustAccount);
                axSalesQuotationLine.parmCurrencyCode(salesQuotationTable.CurrencyCode);
                axSalesQuotationLine.parmSalesPrice(0);
                axSalesQuotationLine.save();
                salesQuotationLine = axSalesQuotationLine.currentRecord();

                mcrSalesQuotationLine.clear();
                mcrSalesQuotationLine.SalesQuotationLine = salesQuotationLine.RecId;
                mcrSalesQuotationLine.LineType = MCRLineType::CatalogFreeGift;
                mcrSalesQuotationLine.SourceId = mcrSalesQuotationTableLocal.SourceId;
                mcrSalesQuotationLine.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrInitFromSourceCodeSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the sales quotation with values form the <c>MCRSourceCodeSetup</c> table.
    /// </summary>
    /// <param name="_sourceCodeSetup">
    /// A record from the <c>MCRSourceCodeSetup</c> table.
    /// </param>
    /// <param name="_custBRAcct">
    /// An external customer account number.
    /// </param>
    /// <returns>
    /// The <c>SalesQuotationTable</c> record initialized with source code information.
    /// </returns>
    public Common mcrInitFromSourceCodeSetup(MCRSourceCodeSetup _sourceCodeSetup, ExternalAccount _custBRAcct)
    {
        MCRDefaultDimensions    mcrDefaultDimensions;

        if (_sourceCodeSetup.SourceID
            && MCRSourceCodeSetup::ValidateSourceEffective(_sourceCodeSetup.SourceID))
        {
            // Set the financial dimensions using class MCRDefaultDimensions
            mcrDefaultDimensions = MCRDefaultDimensions::construct(salesQuotationTable);
            mcrDefaultDimensions.setDefaultDimensions();

            mcrSalesQuotationTable = salesQuotationTable.mcrSalesQuotationTable();

            // If a future order date is on the offer, assign it to the sales
            // table delivery date, else put in the system date.
            if (_sourceCodeSetup.FutureOrderDate != dateNull())
            {
                salesQuotationTable.ShippingDateRequested  = _sourceCodeSetup.FutureOrderDate;
            }
            else
            {
                salesQuotationTable.ShippingDateRequested = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            }

            this.mcrCreateCatalogGiftLine();

            salesQuotationTable.mcrPackMCRSalesQuotationTable(mcrSalesQuotationTable);
        }

        return salesQuotationTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(SalesQuotationTable _salesQuotationTable)
    {
        salesQuotationTable = _salesQuotationTable;
        smmBusRelTable = smmBusRelTable::find(salesQuotationTable.BusRelAccount);
        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>