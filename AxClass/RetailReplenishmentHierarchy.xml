<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailReplenishmentHierarchy</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The class <c>RetailReplenishmentHierarchy</c> inserts and gets the invent location list based on Buyers push Id.
/// </summary>
class RetailReplenishmentHierarchy
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToWarehouses</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds invent locations associated with Retail channel specified by RecId to given instance of RetailTmpInventLocation
    /// </summary>
    /// <param name="_channelId">
    /// RecId of specified retail channel.
    /// </param>
    /// <param name="_warehouses">
    /// Table buffer to insert invent location.
    /// </param>
    /// <param name="_buyersPushId">
    /// Id of the current buyer's push/cross docking. Optional.
    /// </param>
    /// <returns>
    /// Returns true, if warehouse under the channel specified exists and has been added to the temp table; otherwise - false
    /// </returns>
    public static boolean addToWarehouses(RecId _channelId, RetailTmpinventLocation _warehouses, RetailBuyersPushId _buyersPushId = '')
    {
        RetailChannelTable      retailChannelTable;
        InventLocation          inventLocation;
        RetailBuyersPushLineQty retailBuyersPushLineQty;

        if (_channelId > 0)
        {
            select crossCompany RecId, InventLocation, InventLocationDataAreaId from retailChannelTable
                join InventLocationId, RecId, DataAreaId, InventSiteId, FSHStore, RetailWeightEx1 from InventLocation
                where retailChannelTable.RecId == _channelId &&
                      retailChannelTable.inventLocation == inventLocation.InventLocationId &&
                      retailChannelTable.inventLocationDataAreaId == inventLocation.dataAreaId &&
                      inventLocation.FSHStore == NoYes::Yes;

            if (inventLocation.RecId > 0)
            {
                // if buyer's push parameter is set...
                if (_buyersPushId)
                {
                    //verify if the warehouse is used by buyer's push specified
                    select crossCompany BuyersPushId, InventLocationId, WarehouseDataAreaId, RecId from retailBuyersPushLineQty
                        where   retailBuyersPushLineQty.BuyersPushId == _buyersPushId &&
                                retailBuyersPushLineQty.InventLocationId == inventLocation.InventLocationId &&
                                retailBuyersPushLineQty.WarehouseDataAreaId == inventLocation.dataAreaId;

                    // if warehouse is not used, skip it
                    if (retailBuyersPushLineQty.RecId == 0)
                    {
                        return false;
                    }
                }

                _warehouses.clear();
                _warehouses.InventLocationId = inventLocation.InventLocationId;
                _warehouses.InventLocationDataAreaId = inventLocation.dataAreaId;
                _warehouses.RetailWeightEx1 = inventLocation.RetailWeightEx1;
                _warehouses.InventSiteId = inventLocation.InventSiteId;
                _warehouses.insert();

                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllOperatingUnitsUnderRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of all operating units under the selected organization hierarchy (or part of such hierarchy).
    /// </summary>
    /// <param name="_relationshipId">
    /// Id of the relationship.
    /// </param>
    /// <returns>
    /// List of operating unit IDs.
    /// </returns>
    private static List getAllOperatingUnitsUnderRelationship(RecId _relationshipId)
    {
        OMHierarchyRelationship omRelationship;
        select firstonly ChildOrganization, HierarchyType from omRelationship
            where omRelationship.RecId == _relationshipId;

        Set descendantOrganizationTypes = new Set(Types::Integer);
        descendantOrganizationTypes.add(OMInternalOrganizationType::OperatingUnit);

        Set resultSet = OMInternalOrganization::getDescendantsAndSelf(omRelationship.ChildOrganization, omRelationship.HierarchyType, DateTimeUtil::utcNow(), descendantOrganizationTypes);

        SetEnumerator resultSetEnumerator = resultSet.getEnumerator();
        List result = new List(Types::Int64);

        while (resultSetEnumerator.moveNext())
        {
            result.addEnd(resultSetEnumerator.current());
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLocationsListByRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of invent locations based on the rule of the <c>RetailReplenishmentRuleLines</c> table.
    /// </summary>
    /// <param name="_ruleId">
    /// The value for the rule Id of the table <c>RetailReplenishmentRuleLines</c>.
    /// </param>
    /// <param name="_locations">
    /// The instance of <c>RetailTmpInventLocation</c> table.
    /// </param>
    public static void getLocationsListByRule(RetailReplenishmentRuleId _ruleId, RetailTmpInventLocation _locations)
    {
        RetailReplenishmentRuleLines    ruleLine;

        while select RuleId, Type, RelationId from ruleLine
                where ruleLine.RuleId == _ruleId
        {
            switch (ruleLine.Type)
            {
                case RetailReplenishmentRuleType::GroupType:
                    RetailReplenishmentHierarchy::getWarehousesList(ruleLine.RelationId, _locations);
                    break;
                case RetailReplenishmentRuleType::LocationType:
                    RetailReplenishmentHierarchy::addToWarehouses(ruleLine.RelationId, _locations);
                    break;
                default:
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWarehousesList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of invent locations for <c>OMHierarchyRelationship</c> for a given buyers push Id.
    /// </summary>
    /// <param name="_hierarchyId">
    /// The RecId value for the <c>OMHierarchyRelationship</c> table.
    /// </param>
    /// <param name="_warehouses">
    /// A table instance to insert invent location.
    /// </param>
    /// <param name="_buyersPushId">
    /// The value for buyers push Id.
    /// </param>
    /// <returns>
    /// The count of warehouses found by the list.
    /// </returns>
    public static int getWarehousesList(RecId _hierarchyId, RetailTmpInventLocation _warehouses, RetailBuyersPushId _buyersPushId = '')
    {
        OMOperatingUnit         omOperatingUnit;
        RetailChannelTable      retailChannel;
        List                    allOperatingUnits = RetailReplenishmentHierarchy::getAllOperatingUnitsUnderRelationship(_hierarchyId);
        ListEnumerator          le = allOperatingUnits.getEnumerator();
        int                     warehousesCount = 0;
        CommerceHQEventSource   eventSource = CommerceHQEventSource::Log;

        eventSource.EventWriteGetListOfWarehouseUnderReplenishmentHierarchy(funcName());

        // walk through the list of all operating units under the hierarchy specified
        while (le.moveNext())
        {
            select firstonly RecId from retailChannel
                    where retailChannel.omOperatingUnitID == le.current()
                    exists join RecId from omOperatingUnit
                    where retailChannel.omOperatingUnitID == omOperatingUnit.RecId
                        && omOperatingUnit.OrganizationType == OMInternalOrganizationType::OperatingUnit
                        && omOperatingUnit.omOperatingUnitType == OMOperatingUnitType::RetailChannel;

            if (retailChannel.RecId)
            {
                warehousesCount += RetailReplenishmentHierarchy::addToWarehouses(retailChannel.RecId, _warehouses, _buyersPushId);
            }
        }

        eventSource.EventWriteReplenishmentNumberOfWarehousesFound(funcName(), warehousesCount);

        return warehousesCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDraftHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the hierarchy specified has draft.
    /// </summary>
    /// <param name="_hierarchyRecId">
    /// RecId of the hierarchy
    /// </param>
    /// <returns>
    /// true, if the hierarchy is in draft state; false - otherwise
    /// </returns>
    public static boolean isDraftHierarchy(RefRecId _hierarchyRecId)
    {
        return (select RecId from OMRevisionEdit where OMRevisionEdit.Hierarchy == _hierarchyRecId).RecId > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isHierarchyCurrent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the hierarchy specified is current.
    /// </summary>
    /// <param name="_hierarchyRecId">
    /// RecId of the hierarchy
    /// </param>
    /// <returns>
    /// true, if the hierarchy is current; false - otherwise
    /// </returns>
    public static boolean isHierarchyCurrent(RefRecId _hierarchyRecId)
    {
        return (select firstOnly OMHierarchyRelationship where OMHierarchyRelationship.HierarchyType == _hierarchyRecId).RecId > 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>