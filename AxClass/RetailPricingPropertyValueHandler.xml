<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPricingPropertyValueHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Threading.Tasks;
using Microsoft.Dynamics.Commerce.Runtime.Services.PricingEngine;
using Microsoft.Dynamics.Commerce.Runtime.DataModel;

/// <summary>
/// The X++ implementation of property value handler. It uses <c>SysPluginFactory</c> to lookup handlers for each property.
/// </summary>
internal final class RetailPricingPropertyValueHandler implements IPricingPropertyValueHandler
{
    // The order item temp table re-used for perf perposes. In order to get rid of creating extra temp tables in each property handler.
    private RetailTempOrderItem mTmpOrderItem;
    private RetailTransactionId mTransactionId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(RetailTempOrderItem _mTmpOrderItem, RetailTransactionId _mTransactionId)
    {
        this.mTmpOrderItem = _mTmpOrderItem;
        this.mTransactionId = _mTransactionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Resolve</Name>
				<Source><![CDATA[
    public void Resolve(PricingPropertyValueContext valueContext, SalesTransaction transaction, PricingPropertyDefinition definition)
    {
        Array providers = SysPluginFactory::Instances(identifierStr(Dynamics.AX.Application), classStr(RetailPricingPropertyValueProviderBase),  new SysPluginMetadataCollection());

        int len = providers.lastIndex();
        for (int i = 1; i <= len; i++)
        {
            RetailPricingPropertyValueProviderBase provider = providers.value(i);
            provider.parmRetailTempOrderItem(mTmpOrderItem);
            provider.parmTransactionId(mTransactionId);

            if (provider.IsPropertySupported(definition))
            {
                provider.Resolve(valueContext, transaction);
                return ;
            }
        }

        throw Global::error(strFmt('@RetailPricing:PropertyProviderNotFound', definition.ToString()));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>