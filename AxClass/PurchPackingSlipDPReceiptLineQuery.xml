<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchPackingSlipDPReceiptLineQuery</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchPackingSlipDPReceiptLineQuery</c> builds the query used to retrieve product receipt lines in the <c>PurchPackingSlipDP</c> class.
/// </summary>
public class PurchPackingSlipDPReceiptLineQuery extends SysCommonCollectionQuery
{
    private QueryBuildDataSource    vendPackingSlipTrans;
    private QueryBuildDataSource    vendPackingSlipTransInventDim;
    private QueryBuildDataSource    vendPackingSlipTransHistory;

    private PurchPackingSlipDP      packingSlipDP;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDataSources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds data sources to the receipt line query.
    /// </summary>
    /// <param name = "_query">
    /// The <c>Query</c> object where data sources will be added to.
    /// </param>
    protected void addDataSources(Query _query)
    {
        this.addVendPackingSlipTrans(_query);
        this.addVendPackingSlipTransInventDim(_query);

        if (this.parmPackingSlipDP().parmVendPackingSlipVersion().isArchived())
        {
            this.addVendPackingSlipTransHistory(_query);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addVendPackingSlipTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the <c>VendPackingSlipTrans</c> table as a data source to the receipt line query.
    /// </summary>
    /// <param name = "_query">
    /// The receipt line query object.
    /// </param>
    protected void addVendPackingSlipTrans(Query _query)
    {
        vendPackingSlipTrans = _query.addDataSource(tableNum(VendPackingSlipTrans));

        vendPackingSlipTrans.addRange(fieldNum(VendPackingSlipTrans, VendPackingSlipJour)).value(SysQuery::value(this.parmPackingSlipDP().parmVendPackingSlipJour().RecId));

        this.addReadableDataSource(vendPackingSlipTrans.id());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendPackingSlipTrans</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public QueryBuildDataSource parmVendPackingSlipTrans()
    {
        return vendPackingSlipTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addVendPackingSlipTransInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the <c>InventDim</c> table associated with <c>VendPackingSlipTrans</c> table as a data source to the receipt line query.
    /// </summary>
    /// <param name = "_query">
    /// The receipt line query object.
    /// </param>
    protected void addVendPackingSlipTransInventDim(Query _query)
    {
        vendPackingSlipTransInventDim = this.parmVendPackingSlipTrans().addDataSource(tableNum(InventDim));

        vendPackingSlipTransInventDim.joinMode(JoinMode::OuterJoin);
        vendPackingSlipTransInventDim.fetchMode(QueryFetchMode::One2One);

        vendPackingSlipTransInventDim.relations(false);
        vendPackingSlipTransInventDim.addLink(fieldNum(VendPackingSlipTrans, InventDimId), fieldNum(InventDim, inventDimId), this.parmVendPackingSlipTrans().name());

        this.addReadableDataSource(vendPackingSlipTransInventDim.id());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendPackingSlipTransInventDim</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public QueryBuildDataSource parmVendPackingSlipTransInventDim()
    {
        return vendPackingSlipTransInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addVendPackingSlipTransHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the <c>VendPackingSlipTransHistory</c> table associated with <c>VendPackingSlipTrans</c> table as a data source to the receipt line query.
    /// </summary>
    /// <param name = "_query">
    /// The receipt line query object.
    /// </param>
    protected void addVendPackingSlipTransHistory(Query _query)
    {
        _query.validTimeStateAsOfDateTime(this.parmPackingSlipDP().parmVendPackingSlipVersion().VersionDateTime);

        vendPackingSlipTransHistory = this.parmVendPackingSlipTrans().addDataSource(tableNum(VendPackingSlipTransHistory));

        vendPackingSlipTransHistory.relations(true);
        vendPackingSlipTransHistory.joinMode(JoinMode::InnerJoin);
        vendPackingSlipTransHistory.fetchMode(QueryFetchMode::One2One);

        this.addReadableDataSource(vendPackingSlipTransHistory.id());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendPackingSlipTransHistory</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public QueryBuildDataSource parmVendPackingSlipTransHistory()
    {
        return vendPackingSlipTransHistory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeDataProvider</Name>
				<Source><![CDATA[
    private void initializeDataProvider(PurchPackingSlipDP _packingSlipDP)
    {
        packingSlipDP = _packingSlipDP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPackingSlipDP</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public PurchPackingSlipDP parmPackingSlipDP()
    {
        return packingSlipDP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCommonCollection</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public SysICommonCollection createCommonCollection()
    {
        return PurchPackingSlipDPReceiptLineQuerySelection::newFromReceiptLineQuery(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a query to retrieve order lines.
    /// </summary>
    /// <param name = "_packingSlipDP">
    /// A <c>PurchPackingSlipDP</c> object to create the query for.
    /// </param>
    /// <returns>
    /// The instantiated <c>PurchPackingSlipDPReceiptLineQuery</c> object.
    /// </returns>
    [Hookable(false), Wrappable(false)]
    public static PurchPackingSlipDPReceiptLineQuery newQuery(PurchPackingSlipDP _packingSlipDP)
    {
        PurchPackingSlipDPReceiptLineQuery query = new PurchPackingSlipDPReceiptLineQuery();
        
        query.initializeDataProvider(_packingSlipDP);
        query.buildQuery();

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>