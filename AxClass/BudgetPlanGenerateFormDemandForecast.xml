<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanGenerateFormDemandForecast</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanGenerateFormDemandForecast</c> class supports the business logic of the <c>BudgetPlanGenerate</c> form for demand forecast.
/// </summary>
public class BudgetPlanGenerateFormDemandForecast extends BudgetPlanGenerateForm
{
    FormCheckBoxControl sourceDemandForecastConsumption;
    FormCheckBoxControl sourceDemandForecastSalesOrder;
    FormGroupControl    sourceDemandForecastGroup;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>BudgetPlanGenerateFormDemandForecast</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>BudgetPlanGenerateFormDemandForecast</c> class.
    /// </returns>
    public static BudgetPlanGenerateFormDemandForecast construct()
    {
        return new BudgetPlanGenerateFormDemandForecast();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInstructionText</Name>
				<Source><![CDATA[
    protected void setInstructionText()
    {
        instruction.text("@Budget:BudgetPlanning_GenerateFromDemandForecastsSupplemental_InstructionText");
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMandatoryControls</Name>
				<Source><![CDATA[
    protected void setMandatoryControls()
    {
        // The Demand forecasts specific group only contains couple of checkboxes.
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleControls</Name>
				<Source><![CDATA[
    protected void setVisibleControls()
    {
        super();

        sourceDemandForecastGroup.visible(true);
        targetBudgetClass.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initControlSet</Name>
				<Source><![CDATA[
    protected void initControlSet()
    {
        super();

        controlSet.add(formControlStr(BudgetPlanGenerate, SourceDemandForecastGroup));
        controlSet.add(formControlStr(BudgetPlanGenerate, SourceDemandForecastConsumption));
        controlSet.add(formControlStr(BudgetPlanGenerate, SourceDemandForecastSalesOrder));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormControl</Name>
				<Source><![CDATA[
    protected void setFormControl(FormControl _formControl)
    {
        super(_formControl);

        switch (_formControl.name())
        {
            case formControlStr(BudgetPlanGenerate, SourceDemandForecastGroup) :
                SourceDemandForecastGroup = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, SourceDemandForecastConsumption) :
                SourceDemandForecastConsumption = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, SourceDemandForecastSalesOrder) :
                SourceDemandForecastSalesOrder = _formControl;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveControlValue</Name>
				<Source><![CDATA[
    public void saveControlValue(FormControl _formControl)
    {
        BudgetPlanGenerateContractDemandForecast budgetPlanGenerateContractDemandForecast = budgetPlanGenerateContract as BudgetPlanGenerateContractDemandForecast;

        super(_formControl);

        switch (_formControl.name())
        {
            case formControlStr(BudgetPlanGenerate, SourceDemandForecastConsumption) :
                budgetPlanGenerateContractDemandForecast.parmSourceDemandForecastConsumption(SourceDemandForecastConsumption.checked());
                break;

            case formControlStr(BudgetPlanGenerate, SourceDemandForecastSalesOrder) :
                budgetPlanGenerateContractDemandForecast.parmSourceDemandForecastSalesOrder(SourceDemandForecastSalesOrder.checked());
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCanClose</Name>
				<Source><![CDATA[
    public boolean validateCanClose()
    {
        boolean canClose;
        BudgetPlanGenerateContractDemandForecast budgetPlanGenerateContractDemandForecast;

        canClose = super();

        budgetPlanGenerateContractDemandForecast = this.parmBudgetPlanGenerateContract() as BudgetPlanGenerateContractDemandForecast;

        if (canClose
            && !(budgetPlanGenerateContractDemandForecast.parmSourceDemandForecastConsumption()
                 || budgetPlanGenerateContractDemandForecast.parmSourceDemandForecastSalesOrder()))
        {
            error("@SYS91231");
            canClose = false;
        }

        return canClose;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>