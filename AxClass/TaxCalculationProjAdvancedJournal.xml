<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxCalculationProjAdvancedJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxCalculationProjAdvancedJournal</c> class is the tax calculation class for the project advanced journal.
/// </summary>
class TaxCalculationProjAdvancedJournal extends TaxCalculation
{
    ProjAdvancedJournalLine projAdvancedJournalLine;
    private boolean isTaxIntegrationEnabledForProject = Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Project);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init(Object _initializationClass = null)
    {
        ProjAdvancedJournalLineTaxDocument projAdvancedJournalLineTaxDocument = _initializationClass as ProjAdvancedJournalLineTaxDocument;

        if (projAdvancedJournalLineTaxDocument == null)
        {
            throw error("@SYS95118");
        }

        projAdvancedJournalLine = projAdvancedJournalLineTaxDocument.parmProjAdvancedJournalLine();

        if (TaxIntegrationTaxAdjustReportDiffAmountFlight::instance().isEnabled()
            && isTaxIntegrationEnabledForProject)
        {
            this.setExchRates(
                projAdvancedJournalLine.CostCurrency,
                projAdvancedJournalLine.CostExchangeRate);
        }

        super(_initializationClass);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowAdjustBaseAmountForTaxAdjustment</Name>
				<Source><![CDATA[
    public boolean allowAdjustBaseAmountForTaxAdjustment()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDirection</Name>
				<Source><![CDATA[
    protected TaxDirection determineDirection(TaxGroupData _taxGroupData)
    {
        return taxableLineCurrentlyBeingCalculated.getDefaultTaxDirection(_taxGroupData, this.getCompany());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault getDefaultDimension(RefRecId _sourceRecId)
    {
        DimensionDefault ret;

        ret = taxableLineCurrentlyBeingCalculated.getDefaultDimension();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Overrides the tax amount calculated by the tax engine with the provided tax amount
    ///     and clears the calculated tax amount from the project advanced journal line.
    /// </summary>
    public void correctTaxAmount()
    {
        if (!projAdvancedJournalLine.RecId || projAdvancedJournalLine.ProvidedTaxAmount == 0)
        {
            return;
        }

        ttsbegin;

        TaxRegulation taxRegulation = new TaxRegulation();

        TaxUncommitted::deleteForDocumentLine(tableNum(ProjAdvancedJournalLine), ProjAdvancedJournalLine.RecId);
        taxRegulation.setTax(this);
        taxRegulation.createSumsFromTmp();
        taxRegulation.allocateAmount(projAdvancedJournalLine.ProvidedTaxAmount);
        taxRegulation.saveTaxRegulation();

        ttscommit;

        if (projAdvancedJournalLine.CalculatedTaxAmount != 0)
        {
            ProjAdvancedJournalLine::updateCalculatedTaxAmount(ProjAdvancedJournalLine.RecId, 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates taxes total taxes excluding use taxes for project advanced journal line.
    /// </summary>
    /// <returns>
    /// The tax amount excluding the use tax.
    /// </returns>
    public TaxAmountCur calculateTax()
    {
        TaxAmountCur taxAmount;

        if (isTaxIntegrationEnabledForProject)
        {
            taxAmount = this.calcUsingTaxIntegration();
        }
        else
        {
            taxAmount = super();
        }

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcUsingTaxIntegration</Name>
				<Source><![CDATA[
    private TaxAmount calcUsingTaxIntegration()
    {
        Microsoft.Dynamics.Ax.Xpp.ErrorException errorEx;
        ReqReaderWriterLock lock = ReqReaderWriterLock::construct();
        TaxAmountCur taxAmount;
        str lockName = this.lockName();
        try
        {
            this.enterTaxableDocumentLock(lock, lockName);

            ProjAdvancedJournal projAdvancedJournal = projAdvancedJournalLine.getProjAdvancedJournal();
            TaxIntegrationDocumentObject document = TaxIntegrationDocumentObject::constructWithRecord(projAdvancedJournal);

            this.setFieldsForLegacyTax();
            this.setFieldsForTaxIntegrationDocumentObject(document);
            TaxIntegrationFacade::calculate(document);
            amountInclTaxMap = document.getAmountIncludingTax();
            amountExclTaxMap = document.getAmountExcludingTax();

            this.calculateBankTaxExchangeRate(document);
            taxAmount = this.finalizeCalculationForTaxIntegration(true);
        }
        catch (errorEx) // errorEx is the same as Exception::Error
        {
            throw Exception::Error;
        }
        finally
        {
            this.exitTaxableDocumentLock(lock, lockName);
        }
        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldsForLegacyTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets fields for legacy tax.
    /// </summary>
    /// <remarks>
    /// This method is called by calcUsingTaxIntegration().
    /// </remarks>
    protected void setFieldsForLegacyTax()
    {
        if (TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
        {
            this.parmVatRegData_W(this.vatRegData_W());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldsForTaxIntegrationDocumentObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets fields for tax integration document object.
    /// </summary>
    /// <param name = "_document">The tax integration document object.</param>
    protected void setFieldsForTaxIntegrationDocumentObject(TaxIntegrationDocumentObject _document)
    {
        _document.setCompany(this.getCompany());
        _document.setHeadingTableId(taxableDocument.getSourceHeader().TableId);
        _document.setHeadingRecId(taxableDocument.getSourceHeader().RecId);

        _document.setSign(1);
        _document.setSource(taxModuleType);

        _document.setLegacyTax(this);
        _document.setTransactionDate(projAdvancedJournalLine.AccountingDate);
        _document.setVoucher(taxableDocument.getReferenceNumber());
        _document.setShouldSkipDocumentCharge(true);
        _document.setShouldSkipLineCharge(true);
        _document.setBusinessProcess(TaxIntegrationBusinessProcess::Project);
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatRegData_W</Name>
				<Source><![CDATA[
    private container vatRegData_W()
    {
        VatDueDate_W vatDueDateLocal = projAdvancedJournalLine.VatDueDate_W;
        DocumentDate documentDateLocal;
        PlCustVendName custVendNameLocal;
        VATNumJournal vatNumJournalLocal;
        Addressing addressingLocal;
        PlTaxPeriodPaymentCode taxPeriodPaymentCodeLocal;
        CzPostponeVAT postponeVATLocal = NoYes::No;
        IntraComVATDueDate_W intraComVatDueDateLocal;
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            if (projAdvancedJournalLine.OffsetAccountType == LedgerJournalACType::Cust
                || projAdvancedJournalLine.OffsetAccountType == LedgerJournalACType::Vend)
            {
                AccountNum account = DimensionAttributeValueCombination::find(projAdvancedJournalLine.OffsetLedgerDimension).DisplayValue;
                ModuleCustVend moduleCustVend = projAdvancedJournalLine.OffsetAccountType == LedgerJournalACType::Vend ? ModuleCustVend::Vend : ModuleCustVend::Cust;
                CustVendTable custVendTable = CustVendTable::findModule(moduleCustVend, account);

                CustVendTable custVendTableInvoiceAccount;
                if (custVendTable.InvoiceAccount)
                {
                    custVendTableInvoiceAccount = CustVendTable::findModule(moduleCustVend, custVendTable.InvoiceAccount);
                }
                custVendTableInvoiceAccount = custVendTableInvoiceAccount ? custVendTableInvoiceAccount : custVendTable;

                taxPeriodPaymentCodeLocal = custVendTableInvoiceAccount.TaxPeriodPaymentCode_PL;
                addressingLocal = DirParty::getAddress(custVendTableInvoiceAccount.Party);
                custVendNameLocal = custVendTableInvoiceAccount.name();
                vatNumJournalLocal = custVendTableInvoiceAccount.VATNum;
            }
        }

        return [
            vatDueDateLocal,
            documentDateLocal,
            custVendNameLocal,
            vatNumJournalLocal,
            addressingLocal,
            taxPeriodPaymentCodeLocal,
            postponeVATLocal,
            intraComVatDueDateLocal
            ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateBankTaxExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the exchange rate amount for bank exchange rate
    /// </summary>
    /// <param name = "_document">The tax integration document object.</param>
    private void calculateBankTaxExchangeRate(TaxIntegrationDocumentObject _document)
    {
        if (TaxSpecificExchangeRateHelper::isTaxSpecificExchRateEnabledByBusinessProcess(TaxIntegrationBusinessProcess::Project))
        {
            VatDueDate_W vatDueDate = TaxSpecificExchangeRate::getDateOfVATRegister(_document.getHeadingTableId(), _document.getHeadingRecId());

            if (!vatDueDate)
            {
                vatDueDate = projAdvancedJournalLine.VatDueDate_W;
            }

            if (!vatDueDate)
            {
                vatDueDate = this.parmTaxDate();
            }

            TaxSpecificExchangeRateHelper taxSpecificExchangeRateHelper = new TaxSpecificExchangeRateHelper(
                _document.getHeadingTableId(),
                _document.getHeadingRecId(),
                TransactionType::Purchase,
                _document.getTransactionCurrencyCode(),
                vatDueDate);

            taxSpecificExchangeRateHelper.maintainAccountingCurrencyTaxSpecificExchangeRate();
            taxSpecificExchangeRateHelper.maintainReportingCurrencyTaxSpecificExchangeRate();

            TmpTaxWorkTrans localTaxWorkTrans;
            localTaxWorkTrans.setTmpData(taxWorkTrans);

            while select CurrencyCode from localTaxWorkTrans
                group by localTaxWorkTrans.CurrencyCode
            {
                taxSpecificExchangeRateHelper.maintainTaxSpecificExchangeRate(localTaxWorkTrans.CurrencyCode);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>