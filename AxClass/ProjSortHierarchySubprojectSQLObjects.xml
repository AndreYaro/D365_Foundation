<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjSortHierarchySubprojectSQLObjects</Name>
	<SourceCode>
		<Declaration><![CDATA[
public final class ProjSortHierarchySubprojectSQLObjects extends ApplicationSQLObjects
{
    private const str procProjTableSortingDelete = 'ProjTableSortingDelete';

    // Force to create SQL stored procedure for truncation of <c>ProjTableSorting</c> table but will not execute at this time.
    private static boolean initSuccess = ProjSortHierarchySubprojectSQLObjects::createProjTableSortingDeleteStoreProcedure();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processProjTableSortingByProjId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Truncates existing data from <c>ProjTableSorting</c> table, performs sorting
    /// to maitain project hierarchy in correct order and inserts newly sorted data into <c>ProjTableSorting</c> table.
    /// This operation is one time activity that executes for all projects accross all companies to avoid performance issues.
    /// </summary>
    [Hookable(false)]
    public static void processProjTableSortingByProjId()
    {
        if (ProjSortHierarchySubprojectSQLObjects::createProjTableSortingDeleteStoreProcedure())
        {
            // Execute store procedure to truncate data from <c>ProjTableSorting</c> table
            // %1 SP name, %2 Partition
            str sqlStatement = strFmt(@'EXEC %1 %2', procProjTableSortingDelete, int642Str(getCurrentPartitionRecId()));
            boolean isSuccessful = ProjSortHierarchySubprojectSQLObjects::executeSQLStatement(sqlStatement);
            if (isSuccessful)
            {
                ProjTable projTableAcrossCompanies;

                while select crosscompany ProjId from projTableAcrossCompanies
                order by projTableAcrossCompanies.DataAreaId
                where projTableAcrossCompanies.ParentId == ''
                {
                    changecompany(projTableAcrossCompanies.DataAreaId)
                    {
                        ProjTableSortingDataHelper::insertProjTableSortingRecordsOrderByProjId(projTableAcrossCompanies.ProjId);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateTableTruncationStatement</Name>
				<Source><![CDATA[
    [Hookable(false)]
    private str generateTableTruncationStatement(str _tableName)
    {
        str sqlStatementText = @"
            SET @hasRecordInOtherPartition = 0;

            IF OBJECT_ID('%1', 'U') IS NOT NULL
                BEGIN
                IF EXISTS(SELECT TOP 1 'x' FROM %1 WHERE Partition != @partition)
                    SET @hasRecordInOtherPartition = 1
                IF @hasRecordInOtherPartition = 1
                    BEGIN
                        DELETE %1 WHERE PARTITION = @partition;
                    END
                ELSE
                    BEGIN
                        TRUNCATE TABLE %1;
                    END
                END
            ";

        sqlStatementText = strFmt(sqlStatementText, _tableName);
        return sqlStatementText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjTableSortingDeleteStoreProcedure</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static boolean createProjTableSortingDeleteStoreProcedure(boolean _forceCreate = false)
    {
        boolean isSuccessful = true;
        SysGlobalObjectCache objectCache = ClassFactory.globalObjectCache();

        if (_forceCreate || objectCache.find(classStr(ProjSortHierarchySubprojectSQLObjects), ApplicationSQLObjects::SQLObjectsCreatedKey) == conNull())
        {
            ProjSortHierarchySubprojectSQLObjects projSortHierarchySubprojectSQLObjects = new ProjSortHierarchySubprojectSQLObjects();
            projSortHierarchySubprojectSQLObjects.initialize();
            // Drop the procedure.
            projSortHierarchySubprojectSQLObjects.dropProcedure(procProjTableSortingDelete);

            if (!projSortHierarchySubprojectSQLObjects.existProcedure(procProjTableSortingDelete))
            {
                str sqlStatementStartText = @"
                CREATE PROCEDURE %1
                    @partition AS BIGINT
                AS
                BEGIN
                SET NOCOUNT ON;

                DECLARE @hasRecordInOtherPartition INT;
                ";
            
                str sqlStatementEndText = @"
                END";

                str sqlStatementText = strFmt(sqlStatementStartText, procProjTableSortingDelete) + projSortHierarchySubprojectSQLObjects.generateTableTruncationStatement(tableStr(ProjTableSorting))
                    + sqlStatementEndText;
        
                isSuccessful = ProjSortHierarchySubprojectSQLObjects::executeSQLStatement(sqlStatementText, SqlParams::create());
            }

            if (isSuccessful)
            {
                // Add the SQL objects created indicator to the cache.
                objectCache.insert(classStr(ProjSortHierarchySubprojectSQLObjects), ApplicationSQLObjects::SQLObjectsCreatedKey, [true]);
            }
        }

        return isSuccessful;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeSQLStatement</Name>
				<Source><![CDATA[
    [Hookable(false)]
    private static boolean executeSQLStatement(str _statement, Map _paramMap = null)
    {
        boolean isSuccessful;
        Connection connection = new Connection();

        if (connection)
        {
            try
            {
                Statement stmt = connection.createStatement();
                new SqlStatementExecutePermission(_statement).assert();
                stmt.executeUpdateWithParameters(_statement, _paramMap);
                CodeAccessPermission::revertAssert();
                stmt.close();
                isSuccessful = true;
            }
            catch
            {
                throw error(strFmt("@SYS93289"));  // Operation canceled
            }
            finally
            {
                connection.finalize();
            }
        }
        else
        {
            throw error(strFmt("@SYS73525"));  // Connection not established
        }

        return isSuccessful;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>