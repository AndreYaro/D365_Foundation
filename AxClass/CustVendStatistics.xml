<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendStatistics</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustVendStatistics
{
    CustVendAC fromAccount;
    CustVendAC toAccount;
    SysGroup fromGroup;
    SysGroup toGroup;
    TransDate fromDate;
    TransDate toDate;

    AmountCur revenue;
    AmountCur lineDisc;
    AmountCur endDisc;
    AmountCur costValue;
    AmountCur markup;

    AmountCur totalDisc;
    Percent lineDiscPct;
    Percent endDiscPct;
    Percent totalDiscPct;
    Percent markupPct;
    AmountCur contributionMargin;
    Percent contributionMarginPct;

    Qty invoiceQty;
    Qty qty;

    CurrencyCode fromCurrency;
    CurrencyCode toCurrency;
    AmountMST balanceMST;
    AmountMST openBalanceMST;

    CustVendTable custVendTable;
    CustTable custTable;
    VendTable vendTable;

    CustTrans custTrans;
    VendTrans vendTrans;
    CustVendTrans custVendTrans;

    CustTransOpen custTransOpen;
    VendTransOpen vendTransOpen;
    CustVendTransOpen custVendTransOpen;

    CustInvoiceJour custInvoiceJour;
    VendInvoiceJour vendInvoiceJour;
    CustVendInvoiceJour custVendInvoiceJour;

    TmpAccountSum tmpAccountSum;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>balanceMST</Name>
				<Source><![CDATA[
    AmountMST balanceMST()
    {
        return balanceMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcBalanceCurrency</Name>
				<Source><![CDATA[
    CustVendTrans calcBalanceCurrency()
    {
        select custVendTable
            where custVendTable.AccountNum >= fromAccount &&
                  custVendTable.AccountNum <= toAccount &&
                  custVendTable.GroupId >= fromGroup &&
                  (!toGroup || custVendTable.GroupId <= toGroup)
            join sum (AmountCur),
                    sum (AmountMST),
                    sum (SettleAmountCur),
                    sum (SettleAmountMST) from custVendTrans
                    group by CurrencyCode
                    where custVendTrans.AccountNum == custVendTable.AccountNum &&
                          custVendTrans.TransDate >= fromDate &&
                          custVendTrans.TransDate <= toDate &&
                          custVendTrans.CurrencyCode >= fromCurrency &&
                          (!toCurrency || custVendTrans.CurrencyCode <= toCurrency);

        return custVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcBalanceMST</Name>
				<Source><![CDATA[
    AmountMST calcBalanceMST()
    {
        select TableId from custVendTable
            where custVendTable.AccountNum >= fromAccount &&
                  custVendTable.AccountNum <= toAccount &&
                  custVendTable.GroupId >= fromGroup &&
                  (!toGroup || custVendTable.GroupId <= toGroup)
            join sum (AmountMST) from custVendTrans
                where custVendTrans.AccountNum == custVendTable.AccountNum &&
                      custVendTrans.TransDate >= fromDate &&
                      custVendTrans.TransDate <= toDate;

        return custVendTrans.AmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcOpenBalanceMST</Name>
				<Source><![CDATA[
    AmountMST calcOpenBalanceMST()
    {
        select TableId from custVendTable
            where custVendTable.AccountNum >= fromAccount &&
                  custVendTable.AccountNum <= toAccount &&
                  custVendTable.GroupId >= fromGroup &&
                  (!toGroup || custVendTable.GroupId <= toGroup)
            join sum(AmountMST) from custVendTransOpen
                where custVendTransOpen.AccountNum == custVendTable.AccountNum;

        return custVendTransOpen.AmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRevenueStatistics</Name>
				<Source><![CDATA[
    void calcRevenueStatistics()
    {
        while select custVendInvoiceJour
        where custVendInvoiceJour.OrderAccount >= fromAccount &&
               custVendInvoiceJour.OrderAccount <= toAccount &&
               custVendInvoiceJour.GroupId >= fromGroup &&
               (!toGroup || custVendInvoiceJour.GroupId <= toGroup) &&
               custVendInvoiceJour.InvoiceDate >= fromDate &&
               custVendInvoiceJour.InvoiceDate <= toDate
        {
            revenue += custVendInvoiceJour.amountMST(custVendInvoiceJour.SalesOrderbalance);
            costValue += custVendInvoiceJour.costValue();

            invoiceQty++;

            if (revenue)
            {
                totalDisc = endDisc + lineDisc;
                lineDiscPct = lineDisc / revenue * 100;
                endDiscPct = endDisc / revenue * 100;
                totalDiscPct = totalDisc / revenue * 100;
                markupPct = markup / revenue * 100;

                contributionMargin = revenue - costValue - endDisc;
                contributionMarginPct = contributionMargin / revenue * 100;
            }
        }

        if (revenue)
        {
            totalDisc = endDisc + lineDisc;
            lineDiscPct = lineDisc / revenue * 100;
            endDiscPct = endDisc / revenue * 100;
            totalDiscPct = totalDisc / revenue * 100;
            markupPct = markup / revenue * 100;

            contributionMargin = revenue - costValue - endDisc;
            contributionMarginPct = contributionMargin / revenue * 100;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>contributionMargin</Name>
				<Source><![CDATA[
    AmountCur contributionMargin()
    {
        return contributionMargin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contributionMarginPct</Name>
				<Source><![CDATA[
    Percent contributionMarginPct()
    {
        return contributionMarginPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costValue</Name>
				<Source><![CDATA[
    AmountCur costValue()
    {
        return costValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCurrencyBalances</Name>
				<Source><![CDATA[
    void createCurrencyBalances()
    {
        AmountMST totalMST;
        recId oldRecId;
        CustVendTransData custVendTransData;

        custVendTransData = CustVendTransData::construct(custVendTrans);

        this.calcBalanceCurrency();
        while (custVendTrans.CurrencyCode && custVendTrans.RecId != oldRecId)
        {
            custVendTransData.parmCustVendTrans(custVendTrans);

            tmpAccountSum.AccountNum = custVendTrans.AccountNum;
            tmpAccountSum.CurrencyCode = custVendTrans.CurrencyCode;
            tmpAccountSum.Balance01 = custVendTrans.remainAmountCur();

            tmpAccountSum.Balance02 = custVendTransData.remainAmountMST();
            tmpAccountSum.insert();

            totalMST += tmpAccountSum.Balance02;

            next custVendTrans;
            oldRecId = custVendTrans.RecId;
        }

        tmpAccountSum.AccountNum = strfmt('%1',"@SYS9242");
        tmpAccountSum.CurrencyCode = Ledger::accountingCurrency();
        tmpAccountSum.Balance01 = 0;

        tmpAccountSum.Balance02 = totalMST;
        tmpAccountSum.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyBalances</Name>
				<Source><![CDATA[
    TmpAccountSum currencyBalances()
    {
        return tmpAccountSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDisc</Name>
				<Source><![CDATA[
    AmountCur endDisc()
    {
        return endDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDiscPct</Name>
				<Source><![CDATA[
    Percent endDiscPct()
    {
        return endDiscPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceQty</Name>
				<Source><![CDATA[
    Qty invoiceQty()
    {
        return invoiceQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDisc</Name>
				<Source><![CDATA[
    AmountCur lineDisc()
    {
        return lineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDiscPct</Name>
				<Source><![CDATA[
    Percent lineDiscPct()
    {
        return lineDiscPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markup</Name>
				<Source><![CDATA[
    AmountCur markup()
    {
        return markup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupPct</Name>
				<Source><![CDATA[
    Percent markupPct()
    {
        return markupPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new (NoYes calc,
              CustVendAC _fromAccount,
              CustVendAC _toAccount = '',
              SysGroup _fromGroup = '',
              SysGroup _toGroup = '',
              TransDate _fromDate = dateNull(),
              TransDate _toDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
              CurrencyCode _fromCurrency = '',
              CurrencyCode _toCurrency = '')
    {
        fromAccount = _fromAccount;
        toAccount = _toAccount ? _toAccount : _fromAccount;
        fromGroup = _fromGroup;
        toGroup = _toGroup ? _toGroup : _fromGroup;
        fromDate = _fromDate;
        toDate = _toDate ? _toDate : _fromDate;
        fromCurrency = _fromCurrency;
        toCurrency = _toCurrency ? _toCurrency : _fromCurrency;

        this.setBuffer();

        if (calc)
        {
            this.calcBalanceCurrency();
            this.calcOpenBalanceMST();
            this.calcBalanceMST();
            this.calcRevenueStatistics();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openBalanceMST</Name>
				<Source><![CDATA[
    AmountMST openBalanceMST()
    {
        return openBalanceMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    Qty qty()
    {
        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>revenue</Name>
				<Source><![CDATA[
    AmountCur revenue()
    {
        return revenue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBuffer</Name>
				<Source><![CDATA[
    void setBuffer()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalDisc</Name>
				<Source><![CDATA[
    AmountCur totalDisc()
    {
        return totalDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalDiscPct</Name>
				<Source><![CDATA[
    Percent totalDiscPct()
    {
        return totalDiscPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static CustVendStatistics construct(SysModule module ,
                                        NoYes calc,
                                        CustVendAC fromAccount,
                                        CustVendAC toAccount = '',
                                        SysGroup fromGroup = '',
                                        SysGroup toGroup = '',
                                        TransDate fromDate = dateNull(),
                                        TransDate toDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                        CurrencyCode fromCurrency = '',
                                        CurrencyCode toCurrency = '')

    {
        CustVendStatistics custVendStatistics;

        switch (module)
        {
            case SysModule::Cust :
                custVendStatistics = new CustStatistics(calc,
                                                         fromAccount,
                                                         toAccount,
                                                         fromGroup,
                                                         toGroup,
                                                         fromDate,
                                                         toDate,
                                                         fromCurrency,
                                                         toCurrency);
                break;

            case SysModule::Vend :
                custVendStatistics = new VendStatistics(calc,
                                                        fromAccount,
                                                        toAccount,
                                                        fromGroup,
                                                        toGroup,
                                                        fromDate,
                                                        toDate,
                                                        fromCurrency,
                                                        toCurrency);
                break;

            default :
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        return custVendStatistics;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>