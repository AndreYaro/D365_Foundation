<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankBillOfExchangeCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public final class BankBillOfExchangeCreate extends BankNegInstCreate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createDocument</Name>
				<Source><![CDATA[
    public void createDocument(BankNegInstNum    _noteNum,
        CompanyBankAccountId     _accountID)
    {
        BankBillOfExchangeTable::createBillOfExchange(_noteNum, _accountId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialogFromNegInstNum    = dialog.addFieldValue(extendedTypeStr(BankBillOfExchangeStartNum), fromNegInstNum, "@SYS4083");
        dialogNumOfNegInst      = dialog.addFieldValue(extendedTypeStr(BankBillOfExchangeQty), numOfNegInst, "@SYS14578");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtDocsAreCreated</Name>
				<Source><![CDATA[
    protected str txtDocsAreCreated()
    {
        return "@SYS79244";
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        if (BankBillOfExchangeLayout::find(accountID).noteNumMethod != BankBillOfExchangeNumMethod::Fixed)
        {
            return checkFailed(strfmt("@SYS79241", BankBillOfExchangeNumMethod::Fixed));
        }
        if (!fromNegInstNum)
        {
            return checkFailed("@SYS79242");
        }
        if (!numOfNegInst)
        {
            return checkFailed("@SYS24140");
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS79240";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        BankBillOfExchangeCreate    bankBillOfExchangeCreate;
        BankBillOfExchangeTable     bankBillOfExchangeTable;

        switch (args.dataset())
        {
            case tableNum(BankAccountTable):
                bankBillOfExchangeCreate = BankNegInstCreate::newBankAccountTable(BankNegInst::BillOfExchange, args.record());
                bankBillOfExchangeCreate.setAccountIdInactive();
                break;

            case tableNum(BankBillOfExchangeTable):
                bankBillOfExchangeTable = args.record();
                bankBillOfExchangeCreate = BankNegInstCreate::newBankAccountTable(BankNegInst::BillOfExchange, BankAccountTable::find(bankBillOfExchangeTable.bankAccountID));
                break;

            default:
                throw error(Error::wrongUseOfFunction(BankBillOfExchangeCreate::description()));
        }

        if (bankBillOfExchangeCreate.prompt())
        {
            bankBillOfExchangeCreate.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for executing the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>