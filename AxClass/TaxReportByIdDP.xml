<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportByIdDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxReportByIdDP</c> class that supports the SRS report <c>TaxReportById</c>.
/// </summary>
/// <remarks>
/// Declare variables,tables,enums,etc. that can be used for SRS report<c>TaxReportById</c>.
/// </remarks>
[
    SRSReportQueryAttribute(queryStr(TaxReportById)),
    SRSReportParameterAttribute(classstr(TaxReportByIdContract))
]
public class TaxReportByIdDP extends SrsReportDataProviderPreProcessTempDB
{
    TaxReportPeriod taxReportPeriod;
    TaxReportByIdTmp taxReportByIdTmp;
    TaxReportCollection taxReportCollection;
    TaxReportLayout taxReportLayout;
    private TaxReportCurrency taxReportCurrency;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTaxReportByIdTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Queries the <c>TaxReportByIdTmp</c> temporary table and returns the data table to the calling
    /// method.
    /// </summary>
    /// <returns>
    /// The required report data from the <c>TaxReportByIdTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute('TaxReportByIdTmp')
    ]
    public TaxReportByIdTmp getTaxReportByIdTmp()
    {
        select taxReportByIdTmp;
        return taxReportByIdTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxReportByIdTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the data into the <c>TaxReportByIdTmp</c> temporary table.
    /// </summary>
    private void insertTaxReportByIdTmp()
    {
        TaxReportByIdContext context = TaxReportByIdContext::current();

        taxReportByIdTmp.selectForUpdate(true);
        taxReportByIdTmp.TaxReportField = taxReportCollection.TaxReportField;
        taxReportByIdTmp.Name = taxReportCollection.Name;
        taxReportByIdTmp.TaxAmount = TaxTrans::taxAmountByReportId_Amount(taxReportCollection, taxReportPeriod, taxReportLayout);
        taxReportByIdTmp.TaxPeriod = taxReportPeriod.TaxPeriod;
        taxReportByIdTmp.FromDate = taxReportPeriod.FromDate;
        taxReportByIdTmp.ToDate = taxReportPeriod.ToDate;
        taxReportByIdTmp.TaxReportLayout = taxReportLayout;
        taxReportByIdTmp.CurrencyCode = context ? context.taxReportCurrencyCode : '';

        ttsbegin;
        taxReportByIdTmp.insert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// This method is used to process the report business logic that is used by the <c>TaxReportById</c>
    /// report.
    /// </remarks>
    public void processReport()
    {
        QueryRun queryRun;
        TaxPeriod taxperiod;
        TaxPeriodDate taxPeriodDate;
        TmpTaxReportById tmpTaxReportById;
        TaxReportInitializeDE taxReportInitializeDE;

        Microsoft.Dynamics.Tax.Instrumentation.TaxEventSource taxEventSourceLog = Microsoft.Dynamics.Tax.Instrumentation.TaxEventSource::Log;
        System.Diagnostics.Stopwatch stopWatch;
        guid identifier;
        NoYes isSuccessfulReport;

        try
        {
            stopWatch = new System.Diagnostics.Stopwatch();
            identifier = newGuid();
            taxEventSourceLog.TaxReportStart(identifier);
            stopWatch.Start();

            TaxReportByIdContract contract = this.parmDataContract() as TaxReportByIdContract;

            taxPeriod = contract.parmTaxPeriod();
            taxPeriodDate = contract.parmTaxPeriodDate();
            taxReportCurrency = contract.parmTaxReportCurrency();
            taxReportLayout = TaxAuthorityAddress::find(TaxPeriodHead::find(taxPeriod).TaxAuthority).TaxReportLayout;

            queryRun = new QueryRun(this.parmQuery());
            taxReportPeriod = TaxReportPeriod::find(taxPeriod, taxPeriodDate);

            while (queryRun.next())
            {
                taxReportCollection = queryRun.get(tablenum(TaxReportCollection));
                if (taxReportCurrency == TaxReportCurrency::SalesTaxCodeCurrency)
                {
                    SetEnumerator se = this.getTaxReportCollectionCurrencyCodes(taxReportPeriod, taxReportCollection).getEnumerator();
                    while (se.moveNext())
                    {
                        using (TaxReportByIdContext context = new TaxReportByIdContext())
                        {
                            context.taxReportCurrencyCode = se.current();
                            this.insertTaxReportByIdTmp();
                        }
                    }
                }
                else
                {
                    this.insertTaxReportByIdTmp();
                }
            }

            if (taxReportLayout == TaxReportLayout::Germany)
            {
                while select taxReportByIdTmp
                    group by TaxReportField
                {
                    tmpTaxReportById.TaxReportField = taxReportByIdTmp.TaxReportField;
                    tmpTaxReportById.Amount = 1;
                    tmpTaxReportById.insert();
                }

                taxReportInitializeDE = TaxReportInitialize::construct(taxReportLayout);
                taxReportInitializeDE.init(tmpTaxReportById, taxPeriod);
                taxReportInitializeDE.invertSigns();

                while select tmpTaxReportById
                    where tmpTaxReportById.Amount < 0
                {
                    while select taxReportByIdTmp
                        where taxReportByIdTmp.TaxReportField == tmpTaxReportById.TaxReportField
                    {
                        taxReportByIdTmp.TaxAmount = -taxReportByIdTmp.TaxAmount;
                        taxReportByIdTmp.update();
                    }
                }
            }

            isSuccessfulReport = NoYes::Yes;
        }
        catch(Exception::Error)
        {
            isSuccessfulReport = NoYes::No;
            throw Exception::Error;
        }
        finally
        {
            stopWatch.Stop();
            taxEventSourceLog.TaxReportStop(identifier, SysCountryRegionCode::countryInfo(), new MenuFunction(menuItemOutputStr(TaxReportById), MenuItemType::Output).label(), 'TaxReportById', isSuccessfulReport, stopWatch.ElapsedMilliseconds);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxReportCollectionCurrencyCodes</Name>
				<Source><![CDATA[
    private Set getTaxReportCollectionCurrencyCodes(TaxReportPeriod _taxReportPeriod, TaxReportCollection _taxReportCollection)
    {
        Set taxReportCollectionCurrencyCodes = new Set(Types::String);
        TaxTable taxTable;

        while select taxTable
            group by TaxCurrencyCode
            where taxTable.TaxPeriod                        == _taxReportPeriod.taxPeriod &&(
                taxTable.RepFieldBaseIncoming               == _taxReportCollection.TaxReportField ||
                taxTable.RepFieldBaseOutgoing               == _taxReportCollection.TaxReportField ||
                taxTable.RepFieldBaseUseTax                 == _taxReportCollection.TaxReportField ||
                taxTable.RepFieldBaseUseTaxOffset           == _taxReportCollection.TaxReportField ||
                taxTable.RepFieldTaxFreeBuy                 == _taxReportCollection.TaxReportField ||
                taxTable.RepFieldTaxFreeSales               == _taxReportCollection.TaxReportField ||
                taxTable.RepFieldTaxIncoming                == _taxReportCollection.TaxReportField ||
                taxTable.RepFieldTaxOutgoing                == _taxReportCollection.TaxReportField ||
                taxTable.RepFieldUseTax                     == _taxReportCollection.TaxReportField ||
                taxTable.RepFieldUseTaxOffset               == _taxReportCollection.TaxReportField ||
                taxTable.RepFieldBaseIncomingCreditNote     == _taxReportCollection.TaxReportField ||
                taxTable.RepFieldBaseOutgoingCreditNote     == _taxReportCollection.TaxReportField ||
                taxTable.RepFieldBaseUseTaxCreditNote       == _taxReportCollection.TaxReportField ||
                taxTable.RepFieldBaseUseTaxOffsetCreditNote == _taxReportCollection.TaxReportField ||
                taxTable.RepFieldTaxFreeBuyCreditNote       == _taxReportCollection.TaxReportField ||
                taxTable.RepFieldTaxFreeSalesCreditNote     == _taxReportCollection.TaxReportField ||
                taxTable.RepFieldTaxIncomingCreditNote      == _taxReportCollection.TaxReportField ||
                taxTable.RepFieldTaxOutgoingCreditNote      == _taxReportCollection.TaxReportField ||
                taxTable.RepFieldUseTaxCreditNote           == _taxReportCollection.TaxReportField ||
                taxTable.RepFieldUseTaxOffsetCreditNote     == _taxReportCollection.TaxReportField)
        {
            taxReportCollectionCurrencyCodes.add(taxTable.TaxCurrencyCode);
        }

        return taxReportCollectionCurrencyCodes;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>