<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesPickingListJournalPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DocumentStatusFactoryAttribute(DocumentStatus::PickingList)]
[DocumentStatusFactoryAttribute(DocumentStatus::ProjectPickingList)]
class SalesPickingListJournalPost
extends FormletterJournalPost
{
    WMSPickingRoute     wmsPickingRoute;
    WMSOrderTrans       wmsOrderTrans;
    SalesParmTable      salesParmTable;
    SalesTable          salesTable;
    SalesLine           salesLine;

    List                listProformaWMSOrder;
    RecordInsertList    recordListLinks;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToInventReportDimHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a record to the <c>InventReportDimHistory</c> table.
    /// </summary>
    /// <param name="_journalline">
    /// A journal line record.
    /// </param>
    protected void addToInventReportDimHistory(Common _journalline)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfWMSOrderTransExist</Name>
				<Source><![CDATA[
    protected boolean checkIfWMSOrderTransExist()
    {
        return (select firstonly RecId from wmsOrderTrans
                    where wmsOrderTrans.RouteId == wmsPickingRoute.PickingRouteID).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDocuRefLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies document references to the journal line.
    /// </summary>
    //performed in SalesPickingListJournalCreate
    protected void copyDocuRefLine()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLink</Name>
				<Source><![CDATA[
    protected void  createJournalLink()
    {
        WMSPickingRouteLink     wmsPickingRouteLink;
        SalesParmLine           localSalesParmLine;

        while select localSalesParmLine
            group by OrigSalesId
            where localSalesParmLine.ParmId == salesParmTable.ParmId
               && localSalesParmLine.TableRefId == salesParmTable.TableRefId
        {
            wmsPickingRouteLink.clear();
            wmsPickingRouteLink.initFromSalesTable     (SalesTable::find(localSalesParmLine.OrigSalesId));
            wmsPickingRouteLink.initFromWMSPickingRoute(wmsPickingRoute);
            recordListLinks.add(wmsPickingRouteLink);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the type of document.
    /// </summary>
    /// <returns>
    /// The <c>DocumentStatus::PickingList</c> enumeration value.
    /// </returns>
    protected DocumentStatus  documentStatus()
    {
        return DocumentStatus::PickingList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>docuRefFindAndCopyMultiple</Name>
				<Source><![CDATA[
    protected void docuRefFindAndCopyMultiple(Common _to)
    {
        SetEnumerator se = ordersPosted.getEnumerator();
        while (se.moveNext())
        {
            this.docuRefCopy(SalesTable::find(se.current()), _to);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>endLines</Name>
				<Source><![CDATA[
    protected void endLines()
    {
        if (!this.postMarkupLineBeforeInventory())
        {
            this.postMarkupOnSalesLine();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>endPostLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ends the posting of one journal line.
    /// </summary>
    protected void endPostLine()
    {
        super();

        InventQualityManagementCreateHandler::createSalesPickingListAfterPost(salesLine, wmsOrderTrans.qty, wmsOrderTrans.PdsCWQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formletterType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the formletter type.
    /// </summary>
    /// <returns>
    /// The <c>FormletterType::Sales</c> enumeration value.
    /// </returns>
    protected FormletterType formletterType()
    {
        return FormletterType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a voucher number.
    /// </summary>
    /// <returns>
    /// An empty <c>Num</c> value.
    /// </returns>
    protected Num getVoucher()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class.
    /// </summary>
    public void init()
    {
        super();
        salesTable = salesParmTable.salesTable();

        if (proforma)
        {
            listProformaWMSOrder = new List(Types::String);//WMSOrder.orderId is used as value
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecordLists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the record lists.
    /// </summary>
    protected void initRecordLists()
    {
        super();

        recordListLinks = new RecordInsertList(tableNum(WMSPickingRouteLink));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRelatedLineTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the records that are related to the current journal line.
    /// </summary>
    protected void initRelatedLineTables()
    {
        super();
        salesLine = SalesLine::findInventTransId(wmsOrderTrans.InventTransId, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecordList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records in the record lists into the database.
    /// </summary>
    protected void insertRecordList()
    {
        recordListLinks.insertDatabase();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the current journal line record.
    /// </summary>
    /// <param name="_journalLine">
    /// A journal line record.
    /// </param>
    /// <returns>
    /// A journal line record.
    /// </returns>
    protected Common journalLine(Common _journalLine = null)
    {
        return wmsOrderTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLineTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID for the journal line table.
    /// </summary>
    /// <returns>
    /// A table ID.
    /// </returns>
    protected TableId journalLineTableId()
    {
        return tableNum(WMSOrderTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalTable</Name>
				<Source><![CDATA[
    public Common parmJournalTable(Common _journalTable = wmsPickingRoute)
    {
        wmsPickingRoute = _journalTable as WMSPickingRoute;
        return wmsPickingRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmTable</Name>
				<Source><![CDATA[
    public Common parmParmTable(Common _parmTable = salesParmTable)
    {
        salesParmTable = _parmTable as SalesParmTable;
        return salesParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the markup for the current journal line.
    /// </summary>
    protected void postMarkupLine()
    {
        // Overridden to save a call to this.postMarkupOnTrans()
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupOnJour</Name>
				<Source><![CDATA[
    protected void postMarkupOnJour(SalesTable _salesTableMarkup)
    {
        Markup::updateMarkupAsPosted(_salesTableMarkup,this.documentStatus());
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupOnSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts markup for the journal lines.
    /// </summary>
    protected void postMarkupOnSalesLine()
    {
        MarkupTrans     markupTrans;
        SalesLine       localSalesLine;
        SalesParmLine   localSalesParmLine;

        ttsbegin;
        markupTrans.skipDataMethods(true);

        update_recordset markupTrans
            setting DocumentStatus = DocumentStatus::PickingList
            where  markupTrans.TransTableId      == tableNum(SalesLine)
                && markupTrans.Keep              == NoYes::No
                && markupTrans.DocumentStatus    != DocumentStatus::PickingList
                && markupTrans.DocumentStatus    != DocumentStatus::PackingSlip
        exists join localSalesLine
            where localSalesLine.RecId              == markupTrans.TransRecId
        exists join localSalesParmLine
            where  localSalesParmLine.ParmId        == salesParmTable.ParmId
                && localSalesParmLine.TableRefId    == salesParmTable.TableRefId
                && localSalesParmLine.OrigSalesId   == localSalesLine.SalesId
                && localSalesParmLine.InventTransId == localSalesLine.InventTransId
                && localSalesParmLine.WMSOrder      == NoYes::No
                && localSalesParmLine.DeliverNow    != 0;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the markup for the journal header.
    /// </summary>
    protected void postMarkupTable()
    {
        SalesTable          salesTableMarkup;
        SalesParmSubTable   localSalesParmSubTable;

        if (this.checkIfWMSOrderTransExist())
        {
            while select RecId from localSalesParmSubTable
                where  localSalesParmSubTable.ParmId     == salesParmTable.ParmId
                    && localSalesParmSubTable.TableRefId == salesParmTable.TableRefId
            join salesTableMarkup
                where salesTableMarkup.SalesId == localSalesParmSubTable.OrigSalesId
            {
                this.postMarkupOnJour(salesTableMarkup);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectFormletterJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Selects a picking list journal line.
    /// </summary>
    protected void selectFormletterJournalTrans()
    {
        select forupdate formletterJournalTrans
            where formletterJournalTrans.JournalId          == formletterJournal.JournalId
            && formletterJournalTrans.InternalJournalId     == formletterJournal.InternalJournalId
            && formletterJournalTrans.OrderId               == formletterJournal.OrderId
            && formletterJournalTrans.NumberSequenceGroup   == formletterJournal.NumberSequenceGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCopyMultipleDocuRef</Name>
				<Source><![CDATA[
    protected boolean shouldCopyMultipleDocuRef()
    {
        return !ordersPosted.empty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source line record for the current journal line.
    /// </summary>
    /// <returns>
    /// A source line record.
    /// </returns>
    protected Common sourceLine()
    {
        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source header record for the journal header.
    /// </summary>
    /// <returns>
    /// A source header record.
    /// </returns>
    protected Common sourceTable()
    {
        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startLines</Name>
				<Source><![CDATA[
    protected void startLines()
    {
        if (this.postMarkupLineBeforeInventory())
        {
            this.postMarkupOnSalesLine();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an instance of the <c>TransTxt</c> object.
    /// </summary>
    /// <returns>
    /// An instance of the <c>TransTxt</c> object.
    /// </returns>
    protected TransTxt  transactionLogTxt()
    {
        return "@SYS50969";
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transaction log type.
    /// </summary>
    /// <returns>
    /// The <c>TransactionLogType::SalesPickingList</c> enumeration value.
    /// </returns>
    protected TransactionLogType  transactionLogType()
    {
        return TransactionLogType::SalesPickingList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transaction Date.
    /// </summary>
    /// <returns>
    /// A transaction date.
    /// </returns>
    protected TransDate updateDate()
    {
        return wmsPickingRoute.DlvDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the journal line.
    /// </summary>
    protected void updateJournalLine()
    {
        if (proforma)
        {
            WMSOrder wmsOrder = wmsOrderTrans.wmsOrder();
            listProformaWMSOrder.addEnd(wmsOrder.OrderId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the source table for the journal header.
    /// </summary>
    protected void updateSourceTable()
    {
        WMSOrderTrans   wmsOrderTransProforma;
        SetEnumerator   se = ordersPosted.getEnumerator();

        ttsbegin;

        if (proforma && SalesParameters::find().PickRouteStatusOnUpdate == WMSPickRouteStatusOnUpdate::completed)//don't complete since transactions will the be picked
        {
             wmsPickingRoute.updateRoute(WMSPickRouteStatusOnUpdate::activated);
             wmsPickingRoute.ExpeditionStatus = WMSExpeditionStatus::Complete;
             wmsPickingRoute.doUpdate();

             wmsOrderTransProforma.skipDataMethods(true);

             update_recordset wmsOrderTransProforma
                setting ExpeditionStatus = WMSExpeditionStatus::Complete
                where wmsOrderTransProforma.RouteId == wmsPickingRoute.PickingRouteID;
        }
        else
        {
             wmsPickingRoute.updateRoute(SalesParameters::find().PickRouteStatusOnUpdate);
        }

        this.createJournalLink();

        while (se.moveNext())
        {
            salesTable = SalesTable::find(se.current(),true);
            if (salesTable)
            {
                salesTable.updateDocumentStatus(this.documentStatus());
                salesTable.updateBackStatus();
                salesTable.updateSalesType();

                sourceTableRecIdSet.add(salesTable.RecId);
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSumSalesId</Name>
				<Source><![CDATA[
    protected void  updateSumSalesId()
    {
        if (SalesTable::exist(salesLine.SalesId))
        {
            ttsbegin;

            SalesTable localSalesTable = salesLine.salesTable(true);

            localSalesTable.updateBackStatus();
            localSalesTable.write();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesPickingListJournalPost construct()
    {
        return new SalesPickingListJournalPost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxableDocumentDescriptor</Name>
				<Source><![CDATA[
    public TaxableDocumentDescriptor parmTaxableDocumentDescriptor()
    {
        return TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(wmsPickingRoute);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTaxDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post current tax doucment.
    /// </summary>
    /// <param name="_checkLedgerVoucher">
    /// A Boolean value that indicates whether checking the LedgerVoucher; optional.
    /// </param>
    public void postTaxDocument(boolean _checkLedgerVoucher = true)
    {
        super(false);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>