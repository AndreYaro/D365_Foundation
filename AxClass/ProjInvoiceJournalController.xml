<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>ProjInvoiceJournalController</Name>
  <SourceCode>
    <Declaration><![CDATA[
/// <summary>
/// The <c>ProjInvoiceJournalController</c> class is the controller class for the
/// <c>ProjInvoiceJournal</c> report.
/// </summary>
class ProjInvoiceJournalController extends SrsReportRunController implements BatchRetryable
{
    str                         noYesInvoice;
    str                         noYesOnAccount;
    str                         contributionRatioLabel;
    str                         invoiceSort;
    int                         contributionRatioDecimals;

    TransDate                   fromDate, toDate;

    #define.ReportName          ('ProjInvoiceJournal.Report')
    #define.ConRatioLabel       ('ConRatioLabel')
    #define.ConRatioDecimals    ('ConRatioDecimals')
    #define.ProjInvoiceSort     ('ProjInvoiceSort')
    #define.FromDate            ('FromDate')
    #define.ToDate              ('ToDate')
    #define.InvoiceDateCheck    ('InvoiceDateCheck')
    #ProjReports
}
]]></Declaration>
    <Methods>
      <Method>
        <Name>modifyQuery</Name>
        <Source><![CDATA[
/// <summary>
    /// Modifies the query based on the UI parameters.
    /// </summary>
    /// <param name="_query">
    /// Gets a query object and get this updated.
    /// </param>
    /// <param name="_noYesInvoice">
    /// Gets a invoice value.
    /// </param>
    /// <param name="_noYesOnAccount">
    /// Gets a account value.
    /// </param>
    /// <param name="_fromDate">
    /// Gets a from date value.
    /// </param>
    /// <param name="_toDate">
    /// Gets a to date value.
    /// </param>
    /// <param name="_invoiceSort">
    /// Gets the sorting value from the <c>Sorting</c> UI parameter and used for manipulation in the method.
    /// </param>
    /// <remarks>
    /// Modifies the query based on the given UI parameters: the <c>FromDate</c>, <c>ToDate</c>,
    /// <c>Invoice</c>, and <c>OnAccount</c> parameters.
    /// </remarks>
    public void modifyQuery(Query _query,str _noYesInvoice, str _noYesOnAccount, TransDate _fromDate, TransDate _toDate, str _invoiceSort)
    {
        QueryBuildDataSource    queryProjInvoiceJourDS;
        TransDate               tmpFromDate, tmpToDate;
        QueryBuildRange         invoiceTypeRange, datesRange;

        queryProjInvoiceJourDS  =   _query.dataSourceTable(tableNum(ProjInvoiceJour));

        // Setting hidden range ProjInvoiceType for the report query.
        if (_noYesInvoice == 'True')
        {
            invoiceTypeRange    =   queryProjInvoiceJourDS.addRange(fieldNum(ProjInvoiceJour,ProjInvoiceType));
            invoiceTypeRange.value(queryValue(ProjInvoiceType::Invoice));
            invoiceTypeRange.status(RangeStatus::Hidden);
        }
        if (_noYesOnAccount == 'True')
        {
            invoiceTypeRange    =   queryProjInvoiceJourDS.addRange(fieldNum(ProjInvoiceJour,ProjInvoiceType));
            invoiceTypeRange.value(queryValue(ProjInvoiceType::OnAccount));
            invoiceTypeRange.status(RangeStatus::Hidden);
        }

        tmpFromDate = (_fromDate ? _fromDate : dateNull());
        tmpToDate = (_toDate ? _toDate : dateMax());

        // Setting hidden range InvoiceDate for the report query.
        if (tmpFromDate <= tmpToDate)
        {
            queryProjInvoiceJourDS.clearRange((fieldNum(ProjInvoiceJour, InvoiceDate)));
            datesRange  =   queryProjInvoiceJourDS.addRange(fieldNum(ProjInvoiceJour, InvoiceDate));
            datesRange.value(strFmt('%1..%2',queryValue(tmpFromDate), queryValue(tmpToDate)));
            datesRange.status(RangeStatus::Hidden);
        }
        this.setSortField(_query, _invoiceSort);
    }
]]></Source>
      </Method>
      <Method>
        <Name>prePromptModifyContract</Name>
        <Source><![CDATA[
        public void prePromptModifyContract()
    {
        SrsReportRdlDataContract    rdlContract;
        rdlContract = this.parmReportContract().parmRdlContract();
        rdlContract.setValue(#InvoiceDateCheck,true);
    }

]]></Source>
      </Method>
      <Method>
        <Name>preRunModifyContract</Name>
        <Source><![CDATA[
    /// <summary>
    /// Changes the report contract before running the report.
    /// </summary>
    public void preRunModifyContract()
    {
        SrsReportRdlDataContract rdlContract;
        rdlContract = this.parmReportContract().parmRdlContract();

        contributionRatioLabel      =   ProjParameters::find().grossMarginDisplayLabel();
        contributionRatioDecimals   =   ProjParameters::find().GrossMarginDecimals;

        rdlContract.getParameter(#ConRatioLabel).value(contributionRatioLabel);
        rdlContract.getParameter(#ConRatioDecimals).value(contributionRatioDecimals);

        // Getting values for parameters FromDate, ToDate and InvoiceSort.
        fromDate        = rdlContract.getValue(#FromDate);
        toDate          = rdlContract.getValue(#ToDate);
        invoiceSort     = rdlContract.getParameter(#ProjInvoiceSort).value();

        this.modifyQuery(this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey()), 'False', 'False', fromDate, toDate, invoiceSort);
    }

]]></Source>
      </Method>
      <Method>
        <Name>setSortField</Name>
        <Source><![CDATA[
    /// <summary>
    /// Sets the sorting field for the report query based on the given <c>ProjInvoiceSort</c> UI parameter.
    /// </summary>
    /// <param name="_query">
    /// Gets a query object and get this updated.
    /// </param>
    /// <param name="_invoiceSort">
    /// Gets the sorting value from the <c>Sorting</c> UI parameter and used for manipulation in the method.
    /// </param>
    public void setSortField(Query _query, str _invoiceSort)
    {
        QueryBuildDataSource    queryProjInvoiceJourDS;

        queryProjInvoiceJourDS  =   _query.dataSourceTable(tableNum(ProjInvoiceJour));

        queryProjInvoiceJourDS.sortClear();

        queryProjInvoiceJourDS.addSortField(fieldNum(ProjInvoiceJour,CurrencyId));

        switch (_invoiceSort)
        {
            case enum2str(projInvoiceSort::InvoiceDate):
                queryProjInvoiceJourDS.addSortField(fieldNum(ProjInvoiceJour,InvoiceDate));
                break;
            case enum2str(projInvoiceSort::Customer):
                queryProjInvoiceJourDS.addSortField(fieldNum(ProjInvoiceJour,InvoiceAccount));
                break;
            case enum2str(projInvoiceSort::InvoiceProject):
                queryProjInvoiceJourDS.addSortField(fieldNum(ProjInvoiceJour,ProjInvoiceProjId));
                break;
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>main</Name>
        <Source><![CDATA[
        public static void main(Args _args)
    {
        ProjInvoiceJournalController controller  = new ProjInvoiceJournalController();
        controller.parmReportName(#ReportName);
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
      </Method>
      <Method>
        <Name>isRetryable</Name>
        <Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source>
      </Method>
    </Methods>
  </SourceCode>
</AxClass>