<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerJournalValidateMarkUpTransAccountEntries</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// Validates the subledger journal markup trans entries are linked with source document line and there is no orphan tax record that exists
/// </summary>
[ExportMetadataAttribute(classstr(SubledgerJournalValidateMarkUpTransAccountEntries), identifierStr(''))]
[ExportMetadataAttribute(identifierStr('SourceDocumentDataConsistencyValidators'), identifierStr(''))]
[ExportAttribute('Microsoft.Dynamics.AX.Application.SubledgerJournalizerDocumentValidationIProvider')]
internal final class SubledgerJournalValidateMarkUpTransAccountEntries implements SubledgerJournalizerDocumentValidationIProvider
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the subledger journal markup trans entries are linked with source document line and there is no orphan tax 
    /// record that exists
    /// </summary>
    /// <param name = "_accountingEvent">The accounting event for the journalization task using source document accounting processor</param>
    /// <param name = "_voucher">The voucher used for the posting to ledger; if no accounting is generated then this will be blank</param>
    /// <param name = "_sourceDocumentLineSubmittedForProcessing">All the source document lines that are submitted to source document accounting processor</param>
    /// <param name = "_accountingDistributionTmpForValidation">Accounting distribution detail for the document submitted for processing</param>
    /// <param name = "_subledgerJournalAccountEntryTmpForValidation">Detail accounting of the voucher that is getting posted</param>
    [Hookable(false)]
    void validateDocument(
        AccountingEvent _accountingEvent,
        Voucher _voucher,
        SourceDocumentLineRecIdTmp _sourceDocumentLineSubmittedForProcessing,
        AccountingDistributionTmpForValidation _accountingDistributionTmpForValidation,
        SubledgerJournalAccountEntryTmpForValidation _subledgerJournalAccountEntryTmpForValidation)
    {
        SourceDocumentLineRecIdTmp sourceDocumentLineRecIdTmpLocal;

        sourceDocumentLineRecIdTmpLocal.linkPhysicalTableInstance(_sourceDocumentLineSubmittedForProcessing);

        while select SourceRelationType from sourceDocumentLineRecIdTmpLocal
            group by SourceRelationType
        where sourceDocumentLineRecIdTmpLocal.SourceRelationType == tableNum(MarkupTrans)
        {
            this.validateSourceDocumentLineLinkForMarkUpTrans(
                _accountingEvent,
                _sourceDocumentLineSubmittedForProcessing,
                _accountingDistributionTmpForValidation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSourceDocumentLineLinkForMarkUpTrans</Name>
				<Source><![CDATA[
    private void validateSourceDocumentLineLinkForMarkUpTrans(
        AccountingEvent _accountingEvent,
        SourceDocumentLineRecIdTmp _sourceDocumentLineSubmittedForProcessing,
        AccountingDistributionTmpForValidation _accountingDistributionTmpForValidation)
    {
        using (SysInstrumentationActivityContext activityContext = SourceDocumentAccountingFrameworkInstrumentationLogger::getActivityContext(
                SourceDocumentInstrumentationConstants::SourceDocumentValidationFrameworkNamespace,
                classStr(SubledgerJournalValidateMarkUpTransAccountEntries),
                'ValidateSourceDocumentLineLinkForMarkUpTrans'))
        {
            MarkupTrans markUpTrans;
        
            //Check if there is a markup trans record with orphan source document line record
            select firstonly crosscompany SourceDocumentLineRecId, SourceDocumentHeader, SourceRelationType from _sourceDocumentLineSubmittedForProcessing
                where _sourceDocumentLineSubmittedForProcessing.SourceRelationType == tableNum(MarkupTrans) &&
                    _sourceDocumentLineSubmittedForProcessing.SourceDocumentHeader == _accountingEvent.SourceDocumentHeader
            notexists join markUpTrans
                where markUpTrans.SourceDocumentLine == _sourceDocumentLineSubmittedForProcessing.SourceDocumentLineRecId;
        
            if (_sourceDocumentLineSubmittedForProcessing.SourceDocumentLineRecId != 0)
            {
                //log telemetry that the tax lines are orphan
                activityContext.addCustomProperty('ValidationResult', 'Fail');

                activityContext.addCustomProperty(
                    'Message', SourceDocumentInstrumentationConstants::ErrorWhileValidatingMarkUpTransEntriesForDocument);

                activityContext.addCustomProperty(
                    'SourceDocumentHeader', int642Str(_accountingEvent.SourceDocumentHeader));

                activityContext.addCustomProperty(
                    'AccountingEvent', int642Str(_accountingEvent.RecId));

                if (FeatureStateProvider::isFeatureEnabled(EnableSourceDocumentValidationFramework::instance()))
                {
                    throw error("@SourceDocumentAccountingFramework:ErrorMessageForValidatingMarkUpTransEntriesDuringJournalization");
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>