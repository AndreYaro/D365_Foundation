<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailFiscalTransaction_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailFiscalTransaction_BR</c> is a contract class for the retail fiscal transaction.
/// </summary>
internal final class RetailFiscalTransaction_BR
{
    private RetailTransactionFiscalTrans fiscalTrans;
    private RetailTransactionFiscalTrans contingencyFiscalTrans;
    private RetailTransactionFiscalTrans statusRequestFiscalTrans;
    private RetailFiscalIntegrationRegisterResponse_BR registerResponse;
    private RetailFiscalIntegrationRegisterResponse_BR contingencyRegisterResponse;
    private RetailFiscalIntegrationRegisterResponse_BR statusRequestRegisterResponse;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getReturnCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the return code from fiscal integration response details.
    /// </summary>
    /// <returns>The return code.</returns>
    /// <remarks>Returns empty string if there is no response details.</remarks>
    public EFDocReturnCode_BR getReturnCode()
    {
        return this.getLastRegisterResponse() ? this.getLastRegisterResponse().parmStatusCode() : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMessageStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the message status based on fiscal integration registration status.
    /// </summary>
    /// <returns>The message status.</returns>
    public EFDocMessageStatus_BR getMessageStatus()
    {
        if (contingencyFiscalTrans)
        {
            return EFDocMessageStatus_BR::Waiting;
        }

        return this.getLastFiscalTrans() && this.getLastFiscalTrans().RegistrationStatus == RetailFiscalIntegrationFiscalTransStatus::Completed
            ? EFDocMessageStatus_BR::Processed
            : EFDocMessageStatus_BR::Blank;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastFiscalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the last RetailTransactionFiscalTrans.
    /// </summary>
    /// <returns>the last RetailTransactionFiscalTrans.</returns>
    public RetailTransactionFiscalTrans getLastFiscalTrans()
    {
        return statusRequestFiscalTrans
            ? statusRequestFiscalTrans
            : fiscalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalTrans</Name>
				<Source><![CDATA[
    public RetailTransactionFiscalTrans parmFiscalTrans(RetailTransactionFiscalTrans _fiscalTrans = fiscalTrans)
    {
        fiscalTrans = _fiscalTrans;
        return fiscalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContingencyFiscalTrans</Name>
				<Source><![CDATA[
    public RetailTransactionFiscalTrans parmContingencyFiscalTrans(RetailTransactionFiscalTrans _contingencyFiscalTrans = contingencyFiscalTrans)
    {
        contingencyFiscalTrans = _contingencyFiscalTrans;
        return contingencyFiscalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStatusRequestFiscalTrans</Name>
				<Source><![CDATA[
    public RetailTransactionFiscalTrans parmStatusRequestFiscalTrans(RetailTransactionFiscalTrans _statusRequestFiscalTrans = statusRequestFiscalTrans)
    {
        statusRequestFiscalTrans = _statusRequestFiscalTrans;
        return statusRequestFiscalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRegisterResponse</Name>
				<Source><![CDATA[
    public RetailFiscalIntegrationRegisterResponse_BR parmRegisterResponse(RetailFiscalIntegrationRegisterResponse_BR _registerResponse = registerResponse)
    {
        registerResponse = _registerResponse;
        return registerResponse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContingencyRegisterResponse</Name>
				<Source><![CDATA[
    public RetailFiscalIntegrationRegisterResponse_BR parmContingencyRegisterResponse(RetailFiscalIntegrationRegisterResponse_BR _contingencyRegisterResponse = contingencyRegisterResponse)
    {
        contingencyRegisterResponse = _contingencyRegisterResponse;
        return contingencyRegisterResponse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStatusRequestRegisterResponse</Name>
				<Source><![CDATA[
    public RetailFiscalIntegrationRegisterResponse_BR parmStatusRequestRegisterResponse(RetailFiscalIntegrationRegisterResponse_BR _statusRequestRegisterResponse = statusRequestRegisterResponse)
    {
        statusRequestRegisterResponse = _statusRequestRegisterResponse;
        return statusRequestRegisterResponse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBePostedToStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if fiscal transactions can be posted to statement.
    /// </summary>
    /// <returns>True if fiscal transactions can be posted to statement; otherwise, false.</returns>
    public boolean canBePostedToStatement()
    {
        if (!this.hasAnyFiscalTrans())
        {
            return false;
        }

        boolean isContingencySkipped = this.parmStatusRequestFiscalTrans() && this.getLastRegisterResponse().parmIsSkipAllowed();

        if (this.isManuallySwitchedToContingency() && !contingencyFiscalTrans && !isContingencySkipped)
        {
            return false;
        }

        if (this.IsStatusRequestFiscalTransactionRequired() &&
            this.IsStatusRequestTransactionMissed())
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastRegisterResponse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the last RetailFiscalIntegrationRegisterResponse_BR.
    /// </summary>
    /// <returns>The last RetailFiscalIntegrationRegisterResponse_BR.</returns>
    [Hookable(false)]
    public RetailFiscalIntegrationRegisterResponse_BR getLastRegisterResponse()
    {
        return statusRequestRegisterResponse
            ? statusRequestRegisterResponse
            : registerResponse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasAnyFiscalTrans</Name>
				<Source><![CDATA[
    private boolean hasAnyFiscalTrans()
    {
        return fiscalTrans || contingencyFiscalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isManuallySwitchedToContingency</Name>
				<Source><![CDATA[
    private boolean isManuallySwitchedToContingency()
    {
        return fiscalTrans && fiscalTrans.RegistrationStatus == RetailFiscalIntegrationFiscalTransStatus::Postponed ||
            (statusRequestFiscalTrans && statusRequestFiscalTrans.RegistrationStatus == RetailFiscalIntegrationFiscalTransStatus::Postponed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsStatusRequestTransactionMissed</Name>
				<Source><![CDATA[
    private boolean IsStatusRequestTransactionMissed()
    {
        return fiscalTrans.RegistrationStatus == RetailFiscalIntegrationFiscalTransStatus::Completed &&
            !statusRequestFiscalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsStatusRequestFiscalTransactionRequired</Name>
				<Source><![CDATA[
    private boolean IsStatusRequestFiscalTransactionRequired()
    {
        return fiscalTrans.RegisterInfo != enum2Symbol(enumNum(EFDocWebService_BR), EFDocWebService_BR::Events);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>