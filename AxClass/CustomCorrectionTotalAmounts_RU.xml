<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustomCorrectionTotalAmounts_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustomCorrectionTotalAmounts_RU
{
    CustomCorrectionTable_RU            customCorrectionTable;
    CustomJournalTable_RU               customJournalTable;

    MapAmountIteration_RU               mapCorrectionAmounts;
    TmpCustomJournalTotalsFilters_RU    tmpCustomJournalTotalsFilters;

    TransDate                           onDate;
    boolean                             includeCurrrentJournal;
    boolean                             useFilter;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>correctionAmount</Name>
				<Source><![CDATA[
        CustomAmount_RU correctionAmount(CustomTotalType_RU _customTotalType)
    {
        if (mapCorrectionAmounts)
        {
            return mapCorrectionAmounts.value(_customTotalType);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctionAmountsMap</Name>
				<Source><![CDATA[
        MapAmountIteration_RU correctionAmountsMap()
    {
        return mapCorrectionAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>estimativeLineTotalAmount</Name>
				<Source><![CDATA[
        CustomAmount_RU estimativeLineTotalAmount()
    {
        if (mapCorrectionAmounts)
        {
            return mapCorrectionAmounts.value(CustomTotalType_RU::Cost) +
                   mapCorrectionAmounts.value(CustomTotalType_RU::Duty) +
                   mapCorrectionAmounts.value(CustomTotalType_RU::VAT)  +
                   mapCorrectionAmounts.value(CustomTotalType_RU::Excise);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomCorrectionTable</Name>
				<Source><![CDATA[
        public CustomCorrectionTable_RU parmCustomCorrectionTable(CustomCorrectionTable_RU _customCorrectionTable = customCorrectionTable)
    {
        customCorrectionTable = _customCorrectionTable;
        return customCorrectionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomJournalTable</Name>
				<Source><![CDATA[
        public CustomJournalTable_RU parmCustomJournalTable(CustomJournalTable_RU _customJournalTable = customJournalTable)
    {
        customJournalTable = _customJournalTable;
        return customJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOnDate</Name>
				<Source><![CDATA[
        void parmOnDate(TransDate _onDate, boolean _includeCurrrentJournal = false)
    {
        onDate                  = _onDate;
        includeCurrrentJournal  = _includeCurrrentJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpCustomJournalTotalsFilters</Name>
				<Source><![CDATA[
        void parmTmpCustomJournalTotalsFilters(TmpCustomJournalTotalsFilters_RU _tmpCustomJournalTotalsFilters)
    {
        tmpCustomJournalTotalsFilters.setTmpData(_tmpCustomJournalTotalsFilters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalc</Name>
				<Source><![CDATA[
        public void recalc()
    {
        CustomCorrectionTrans_RU    customCorrectionTrans;
        CustomJournalCharge_RU      customJournalCharge;
        Query                       query   = new Query();
        QueryRun                    queryRun;
        QueryBuildDataSource        queryBuildDataSource;
        CustomJournalId_RU          customJournalId = customCorrectionTable.JournalId ? customCorrectionTable.JournalId : customJournalTable.CustomJournalId;

        mapCorrectionAmounts    = new MapAmountIteration_RU(Types::Enum);

        queryBuildDataSource = query.addDataSource(tablenum(CustomCorrectionTrans_RU));
        queryBuildDataSource.orderMode(OrderMode::GroupBy);

        queryBuildDataSource.addSelectionField(fieldnum(CustomCorrectionTrans_RU, CorrectionCost)   , SelectionField::Sum);
        queryBuildDataSource.addSelectionField(fieldnum(CustomCorrectionTrans_RU, CorrectionDuty)   , SelectionField::Sum);
        queryBuildDataSource.addSelectionField(fieldnum(CustomCorrectionTrans_RU, CorrectionExcise) , SelectionField::Sum);
        queryBuildDataSource.addSelectionField(fieldnum(CustomCorrectionTrans_RU, CorrectionVAT)    , SelectionField::Sum);

        while select tmpCustomJournalTotalsFilters
                where (! customJournalTable.CustomJournalId || tmpCustomJournalTotalsFilters.CustomJournalId    == customJournalTable.CustomJournalId) &&
                      (! customCorrectionTable.CorrectionId || tmpCustomJournalTotalsFilters.CustomCorrectionId == customCorrectionTable.CorrectionId) &&
                      tmpCustomJournalTotalsFilters.Range
        {
            useFilter = true;
            switch (tmpCustomJournalTotalsFilters.CustomTotalFilterType)
            {
                case CustomTotalFilterType_RU::Item :
                    queryBuildDataSource.addRange(fieldnum(CustomCorrectionTrans_RU, ItemId)).value(tmpCustomJournalTotalsFilters.Range);
                    break;
                case CustomTotalFilterType_RU::FEACC :
                    queryBuildDataSource.addRange(fieldnum(CustomCorrectionTrans_RU, feaccId)).value(tmpCustomJournalTotalsFilters.Range);
                    break;
                case CustomTotalFilterType_RU::CustomPartition :
                    queryBuildDataSource.addRange(fieldnum(CustomCorrectionTrans_RU, CustomPartition)).value(tmpCustomJournalTotalsFilters.Range);
                    break;
                case CustomTotalFilterType_RU::CountryRegionId :
                    queryBuildDataSource.addRange(fieldnum(CustomCorrectionTrans_RU, CountryRegionId)).value(tmpCustomJournalTotalsFilters.Range);
                    break;
            }
        }

        if (customCorrectionTable)
        {
            queryBuildDataSource.addRange(fieldnum(CustomCorrectionTrans_RU, CorrectionJournalId)).value(queryValue(customCorrectionTable.CorrectionJournalId));
        }
        else
        if (customJournalTable)
        {
            queryBuildDataSource = queryBuildDataSource.addDataSource(tablenum(CustomCorrectionTable_RU));
            queryBuildDataSource.relations(true);
            queryBuildDataSource.joinMode(JoinMode::ExistsJoin);
            queryBuildDataSource.addRange(fieldnum(CustomCorrectionTable_RU, JournalId)).value(queryValue(customJournalTable.CustomJournalId));

            if (onDate)
            {
                if (includeCurrrentJournal)
                {
                    queryBuildDataSource.addRange(fieldnum(CustomCorrectionTable_RU, CorrectionDate)).value('..' + queryValue(onDate));
                }
                else
                {
                    queryBuildDataSource.addRange(fieldnum(CustomCorrectionTable_RU, CorrectionDate)).value('<' + queryValue(onDate));
                }
            }
        }

        queryRun = new QueryRun(query);
        if (queryRun.next())
        {
            customCorrectionTrans = queryRun.get(tablenum(CustomCorrectionTrans_RU));
            mapCorrectionAmounts.add(CustomTotalType_RU::Cost,      customCorrectionTrans.CorrectionCost);
            mapCorrectionAmounts.add(CustomTotalType_RU::Duty,      customCorrectionTrans.CorrectionDuty);
            mapCorrectionAmounts.add(CustomTotalType_RU::Excise,    customCorrectionTrans.CorrectionExcise);
            mapCorrectionAmounts.add(CustomTotalType_RU::VAT,       customCorrectionTrans.CorrectionVAT);
            mapCorrectionAmounts.add(CustomTotalType_RU::Total,     //customCorrectionTrans.CorrectionCost    +
                                                                    customCorrectionTrans.CorrectionDuty    +
                                                                    customCorrectionTrans.CorrectionExcise  +
                                                                    customCorrectionTrans.CorrectionVAT);
        }

        while select sum (Amount) from customJournalCharge
            group by ChargeType
            where  customJournalCharge.CustomJournalId       == customJournalId
               &&  customJournalCharge.OriginatingDocument   == CustomDocument_RU::Correction
               && (customCorrectionTable.CorrectionJournalId == ''
                || customJournalCharge.CorrectionJournalId   == customCorrectionTable.CorrectionJournalId)
        {
            switch (customJournalCharge.ChargeType)
            {
                case CustomChargeTypeCalc_RU::Escort:
                    mapCorrectionAmounts.add(CustomTotalType_RU::ChargeEscort, customJournalCharge.Amount);
                    break;
                case CustomChargeTypeCalc_RU::Storage:
                    mapCorrectionAmounts.add(CustomTotalType_RU::ChargeStorage, customJournalCharge.Amount);
                    break;
            }
        }

        if (! customCorrectionTable)
        {
            select sum(CorrectionAdminCharge) from customCorrectionTable
                where customCorrectionTable.JournalId == customJournalId;
        }

        mapCorrectionAmounts.add(CustomTotalType_RU::ChargeAdmin, customCorrectionTable.CorrectionAdminCharge);
        if (!useFilter)
        {
            mapCorrectionAmounts.add(CustomTotalType_RU::Total, customCorrectionTable.CorrectionAdminCharge);
            mapCorrectionAmounts.add(CustomTotalType_RU::Total, mapCorrectionAmounts.value(CustomTotalType_RU::ChargeEscort));
        }
        mapCorrectionAmounts.add(CustomTotalType_RU::Total, mapCorrectionAmounts.value(CustomTotalType_RU::ChargeStorage));
    }

]]></Source>
			</Method>
			<Method>
				<Name>useFilter</Name>
				<Source><![CDATA[
        boolean useFilter()
    {
        return useFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static CustomCorrectionTotalAmounts_RU construct()
    {
        return new CustomCorrectionTotalAmounts_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromCorrection</Name>
				<Source><![CDATA[
        public static CustomCorrectionTotalAmounts_RU createFromCorrection(CustomCorrectionTable_RU         _customCorrectionTable,
                                                                       TmpCustomJournalTotalsFilters_RU _tmpCustomJournalTotalsFilters  = null)
    {
        CustomCorrectionTotalAmounts_RU customCorrectionTotalAmounts = CustomCorrectionTotalAmounts_RU::construct();

        customCorrectionTotalAmounts.parmCustomCorrectionTable(_customCorrectionTable);
        customCorrectionTotalAmounts.parmTmpCustomJournalTotalsFilters(_tmpCustomJournalTotalsFilters);
        customCorrectionTotalAmounts.recalc();

        return customCorrectionTotalAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromJournal</Name>
				<Source><![CDATA[
        public static CustomCorrectionTotalAmounts_RU createFromJournal(CustomJournalTable_RU               _customJournalTable,
                                                                    TmpCustomJournalTotalsFilters_RU    _tmpCustomJournalTotalsFilters  = null,
                                                                    TransDate                           _onDate                         = dateNull(),
                                                                    boolean                             _includeCurrrentJournal         = false)
    {
        CustomCorrectionTotalAmounts_RU customCorrectionTotalAmounts = CustomCorrectionTotalAmounts_RU::construct();

        customCorrectionTotalAmounts.parmCustomJournalTable(_customJournalTable);
        customCorrectionTotalAmounts.parmTmpCustomJournalTotalsFilters(_tmpCustomJournalTotalsFilters);
        customCorrectionTotalAmounts.parmOnDate(_onDate, _includeCurrrentJournal);
        customCorrectionTotalAmounts.recalc();

        return customCorrectionTotalAmounts;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>