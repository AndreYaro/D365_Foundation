<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PaymProposalReportProposal</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PaymProposalReportProposal extends PaymProposalReport
{
    private QueryBuildDataSource qbdsCustVendPaymProposalLine;
    private QueryBuildDataSource qbdsSpecTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    private void initQuery()
    {
        query = new Query();
        qbdsCustVendPaymProposalLine = query.addDataSource(tableNum(CustVendPaymProposalLine));
        qbdsSpecTrans = qbdsCustVendPaymProposalLine.addDataSource(tableNum(SpecTrans));

        DictRelation specTransRelation = new DictRelation(tableNum(SpecTrans));
        specTransRelation.loadTableRelation(tableNum(CustVendPaymProposalLine));

        qbdsSpecTrans.addRelation(specTransRelation);
        qbdsSpecTrans.joinMode(JoinMode::ExistsJoin);

        if (rangeCustVendACStart || rangeCustVendACEnd)
        {
            qbdsCustVendPaymProposalLine.addRange(fieldNum(CustVendPaymProposalLine, AccountNum)).value(
                queryRange(rangeCustVendACStart, rangeCustVendACEnd));
        }

        if (rangeCompanyBankAccountIdStart || rangeCompanyBankAccountIdEnd)
        {
            this.addJoinToDAVCAndQueryRange(
                qbdsCustVendPaymProposalLine,
                fieldNum(CustVendPaymProposalLine, LedgerDimension),
                rangeCompanyBankAccountIdStart,
                rangeCompanyBankAccountIdEnd);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the data for the report and inserts into the temp table.
    /// </summary>
    /// <param name = "_custVendPaymProposalTmp">Instance of the report temp table.</param>
    public void createTmpTable(CustVendPaymProposalTmp _custVendPaymProposalTmp)
    {
        CustVendPaymProposalLine custVendPaymProposalLine;
        CustVendTransOpen custVendTransOpen;
        CustVendTrans custVendTrans;
        CustVendTransStatic custVendTransStatic;
        boolean first = true;

        custVendPaymProposalLine.recordLevelSecurity(true);
        custVendTrans.recordLevelSecurity(true);
        custVendTransOpen.recordLevelSecurity(true);

        this.initQuery();
        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            custVendPaymProposalLine = queryRun.get(tableNum(CustVendPaymProposalLine));

            if (first)
            {
                first = false;
                custVendTransStatic = CustVendTransStatic::newModuleCustVend(custVendPaymProposalLine.AccountType);
                custVendTrans = custVendTransStatic.custVendTrans();
                custVendTransOpen = custVendTransStatic.custVendTransOpen();
                journalId = custVendPaymProposalLine.JournalId;
            }

            if (printPaymLines)
            {
                this.proposalInsertPayment(_custVendPaymProposalTmp, custVendPaymProposalLine);
            }

            if (printInvoiceLines)
            {
                this.proposalInsertInvoice(_custVendPaymProposalTmp, custVendPaymProposalLine, custVendTrans, custVendTransOpen);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposalInsertInvoice</Name>
				<Source><![CDATA[
    private void proposalInsertInvoice(
        CustVendPaymProposalTmp _custVendPaymProposalTmp,
        CustVendPaymProposalLine _custVendPaymProposalLine,
        CustVendTrans _custVendTrans,
        CustVendTransOpen _custVendTransOpen)
    {
        SpecTrans specTrans;
        CustVendTransOpenData custVendTransOpenData;
        CustVendTable custVendTable;
        AmountCur possibleCashDisc;
        AmountCur cashDiscToTake;
        DiscGraceDays discGraceDays;

        while select crosscompany SpecCompany, RefCompany, Balance01 from specTrans
            where specTrans.SpecTableId == _custVendPaymProposalLine.TableId
                && specTrans.SpecRecId == _custVendPaymProposalLine.RecId
                && specTrans.SpecCompany == _custVendPaymProposalLine.DataAreaId
            join _custVendTransOpen
                where _custVendTransOpen.TableId == specTrans.RefTableId
                    && _custVendTransOpen.RecId == specTrans.RefRecId
                    && _custVendTransOpen.DataAreaId == specTrans.RefCompany
            join _custVendTrans
                where _custVendTrans.RecId == _custVendTransOpen.RefRecId
                    && _custVendTrans.DataAreaId == specTrans.RefCompany
        {
            this.checkForCrossCompanySettlement(specTrans.SpecCompany, specTrans.RefCompany);
            this.checkForIntercompanyAccount(_custVendTransOpen.company());

            changecompany(_custVendTransOpen.company())
            {
                custVendTransOpenData = CustVendTransOpenData::construct(_custVendTransOpen);
                custVendTable = custVendTransOpenData.transData().custVendTable();
                _custVendPaymProposalTmp.initFromCustVendTrans(_custVendTrans);
                _custVendPaymProposalTmp.initFromCustVendTransOpen(_custVendTransOpen);
                _custVendPaymProposalTmp.AmountCur = specTrans.Balance01;
                _custVendPaymProposalTmp.AmountMST = CurrencyExchangeHelper::amountCur2MST(_custVendPaymProposalTmp.AmountCur, _custVendTrans.CurrencyCode, 0, _custVendPaymProposalLine.PaymDate);
                _custVendPaymProposalTmp.Company = _custVendTransOpen.company();

                discGraceDays = _custVendPaymProposalLine.paymModeTable().DiscGraceDays;

                possibleCashDisc = CustVendTransCashDisc::findByUseCashDisc(
                    _custVendPaymProposalLine.AccountType,
                    _custVendTransOpen.TableId,
                    _custVendTransOpen.RecId,
                    _custVendTransOpen.UseCashDisc,
                    _custVendPaymProposalLine.PaymDate,
                    discGraceDays).CashDiscAmount;

                cashDiscToTake = _custVendTransOpen.getCashDiscAmountToTake(possibleCashDisc);

                _custVendPaymProposalTmp.DiscAmountMST = CurrencyExchangeHelper::mstAmount(cashDiscToTake, _custVendTrans.CurrencyCode, _custVendPaymProposalLine.PaymDate);
            }

            this.insertInvoice(_custVendPaymProposalTmp);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposalInsertPayment</Name>
				<Source><![CDATA[
    private void proposalInsertPayment(CustVendPaymProposalTmp _custVendPaymProposalTmp, CustVendPaymProposalLine _custVendPaymProposalLine)
    {
        _custVendPaymProposalTmp.initFromCustVendPaymProposalLine(_custVendPaymProposalLine);

        changecompany(_custVendPaymProposalLine.AccountNumCompany)
        {
            _custVendPaymProposalTmp.Name = CustVendTable::findModule(_custVendPaymProposalLine.AccountType, _custVendPaymProposalLine.AccountNum).Name();
        }

        this.checkForIntercompanyAccount(_custVendPaymProposalLine.AccountNumCompany);

        this.insertPayment(_custVendPaymProposalTmp);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>