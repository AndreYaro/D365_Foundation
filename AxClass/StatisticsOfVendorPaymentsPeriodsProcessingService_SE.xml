<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>StatisticsOfVendorPaymentsPeriodsProcessingService_SE</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>StatisticsOfVendorPaymentsPeriodsProcessingService_SE</c> class collects data for Statistics of Vendor payments periods.
/// </summary>
internal final class StatisticsOfVendorPaymentsPeriodsProcessingService_SE extends SysOperationServiceBase
{
    private FromDate dateFrom;
    private ToDate dateTo;
    private container postingProfiles;
    private container vendGroupIds;
    private TaxablePaymentsAnnualReportPeriod_AU period;
    private StatisticsOfVendorPaymentsPeriodsProcessingContract_SE contract;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    internal void run(StatisticsOfVendorPaymentsPeriodsProcessingContract_SE _contract)
    {
        this.initializeFromContract(_contract);

        ttsbegin;

        this.cleanupStatistics();

        this.collectVendInvoices();
        this.collectStatistics();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromContract</Name>
				<Source><![CDATA[
    private void initializeFromContract(StatisticsOfVendorPaymentsPeriodsProcessingContract_SE _contract)
    {
        period = _contract.parmReportPeriod();
        dateFrom = period.DateFrom;
        dateTo = period.DateTo;
        postingProfiles = this.postingProfiles(_contract);
        vendGroupIds = this.vendGroupIds(_contract);
        contract = _contract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupVendInvoices</Name>
				<Source><![CDATA[
    private void cleanupVendInvoices()
    {
        StatisticsOfVendorPaymentsPeriodsVendInvoices_SE vendInvoices;
        delete_from vendInvoices
            where vendInvoices.ReportPeriodRefRecId == period.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupStatistics</Name>
				<Source><![CDATA[
    private void cleanupStatistics()
    {
        StatisticsOfVendorPaymentsPeriodsStats_SE stats;
        delete_from stats
            where stats.ReportPeriodRefRecId == period.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>multiSelectedValue2Con</Name>
				<Source><![CDATA[
    private container multiSelectedValue2Con(str _multiselectedValue)
    {
        const str Delimiter = ';';
        return _multiselectedValue ? str2con(_multiselectedValue, Delimiter) : [''];
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingProfiles</Name>
				<Source><![CDATA[
    private container postingProfiles(StatisticsOfVendorPaymentsPeriodsProcessingContract_SE _contract)
    {
        return this.multiSelectedValue2Con(_contract.parmPostingProfiles());
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendGroupIds</Name>
				<Source><![CDATA[
    private container vendGroupIds(StatisticsOfVendorPaymentsPeriodsProcessingContract_SE _contract)
    {
        return this.multiSelectedValue2Con(_contract.parmVendGroupIds());
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectVendInvoices</Name>
				<Source><![CDATA[
    private void collectVendInvoices()
    {
        RecordInsertList vendInvoicesList = new RecordInsertList(tableNum(StatisticsOfVendorPaymentsPeriodsVendInvoices_SE), true, true, true, true);

        for (int profileIdx = 1; profileIdx <= conLen(postingProfiles); profileIdx++)
        {
            PostingProfile profile = conPeek(postingProfiles, profileIdx);

            for (int groupIdsIdx = 1; groupIdsIdx <= conLen(vendGroupIds); groupIdsIdx++)
            {
                VendGroupId vendGroupId = conPeek(vendGroupIds, groupIdsIdx);
                this.collectVendInvoicesInternal(profile, vendGroupId, vendInvoicesList);
            }
        }

        vendInvoicesList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectVendInvoicesInternal</Name>
				<Source><![CDATA[
    private void collectVendInvoicesInternal(
        PostingProfile _profile,
        VendGroupId _vendGroupId,
        RecordInsertList _vendInvoicesList)
    {
        VendSettlement vendSettlement;
        VendTrans vendTransInvoice, vendTransPayment;
        VendorSizeCategory_SE vendorSizeCategory;
        VendTable vendTable;

        StatisticsOfVendorPaymentsPeriodsCalculationDate_SE primaryDate = contract.parmPrimaryDate();
        StatisticsOfVendorPaymentsPeriodsCalculationDate_SE secondaryDate = contract.parmSecondaryDate();

        while select minOf(AccountNum) from vendSettlement
            where vendSettlement.TransDate >= dateFrom
                && vendSettlement.TransDate <= dateTo
                && vendSettlement.CanBeReversed
            join minOf(DocumentDate), minOf(TransDate), minOf(Invoice), minOf(DueDate), minOf(PaymTermId), RecId from vendTransInvoice
                group by vendTransInvoice.RecId
                where vendTransInvoice.RecId == vendSettlement.TransRecId
                    && vendTransInvoice.dataAreaId == vendSettlement.TransCompany
                    && (vendTransInvoice.TransType == LedgerTransType::Vend
                    || vendTransInvoice.TransType == LedgerTransType::Purch
                    || vendTransInvoice.TransType == LedgerTransType::GeneralJournal)
                    && (!_profile || vendTransInvoice.PostingProfile == _profile)
            join maxof(TransDate) from vendTransPayment
                order by vendTransInvoice.RecId asc, vendTransPayment.TransDate desc
                where vendTransPayment.RecId == vendSettlement.OffsetRecid
                    && (vendTransPayment.TransType == LedgerTransType::Payment
                    || vendTransPayment.TransType == LedgerTransType::None) // Compensation
            join minof(RecId) from vendTable
                where vendTable.AccountNum == vendTransInvoice.AccountNum
                    && (!_vendGroupId || vendTable.VendGroup == _vendGroupId)
            join minof(Category) from vendorSizeCategory
                where vendorSizeCategory.ReportPeriodRefRecId == period.RecId
                    && vendorSizeCategory.VendTable == vendTable.RecId
        {
            StatisticsOfVendorPaymentsPeriodsVendInvoices_SE vendInvoices;
            vendInvoices.ReportPeriodRefRecId = period.RecId;
            vendInvoices.Category = vendorSizeCategory.Category;
            vendInvoices.InvoiceAccount = vendSettlement.AccountNum;
            vendInvoices.InvoiceId = vendTransInvoice.Invoice;
            vendInvoices.InvoiceDate = vendTransInvoice.TransDate;
            vendInvoices.DocumentDate = vendTransInvoice.DocumentDate;

            vendInvoices.SelectedDate = primaryDate == StatisticsOfVendorPaymentsPeriodsCalculationDate_SE::DocumentDate ? vendTransInvoice.DocumentDate : vendTransInvoice.TransDate;

            if (!vendInvoices.SelectedDate)
            {
                vendInvoices.SelectedDate = secondaryDate == StatisticsOfVendorPaymentsPeriodsCalculationDate_SE::DocumentDate ? vendTransInvoice.DocumentDate : vendTransInvoice.TransDate;
            }

            vendInvoices.DueDate = vendTransInvoice.DueDate;
            vendInvoices.SettlementDate = vendTransPayment.TransDate;
            vendInvoices.PaymTermId = vendTransInvoice.PaymTermId;
            vendInvoices.AgreedPaymentPeriodInDays = vendTransInvoice.DueDate - vendInvoices.SelectedDate;
            vendInvoices.ActualPaymentPeriodInDays = vendTransPayment.TransDate - vendInvoices.SelectedDate;
            _vendInvoicesList.add(vendInvoices);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectStatistics</Name>
				<Source><![CDATA[
    private void collectStatistics()
    {
        StatisticsOfVendorPaymentsPeriodsVendInvoices_SE vendInvoices;

        while select avg(AgreedPaymentPeriodInDays), avg(ActualPaymentPeriodInDays), count(RecId) from vendInvoices
            order by Category asc
            group by Category
            where vendInvoices.ReportPeriodRefRecId == period.RecId
        {
            StatisticsOfVendorPaymentsPeriodsVendInvoices_SE vendInvoicesLoc;
            select count(RecId) from vendInvoicesLoc
                where vendInvoicesLoc.Category == vendInvoices.Category
                    && vendInvoicesLoc.SettlementDate > vendInvoicesLoc.DueDate
                    && vendInvoicesLoc.ReportPeriodRefRecId == period.RecId;

            StatisticsOfVendorPaymentsPeriodsStats_SE stats;
            stats.AverageAgreedPaymentPeriodInDays = vendInvoices.AgreedPaymentPeriodInDays;
            stats.AverageActualPaymentTimeInDays = vendInvoices.ActualPaymentPeriodInDays;
            stats.Category = vendInvoices.Category;
            stats.ReportPeriodRefRecId = period.RecId;
            stats.ProportionOfInvoicesPaidAfterDueDate = (vendInvoicesLoc.RecId * 100.0) / vendInvoices.RecId;
            stats.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>