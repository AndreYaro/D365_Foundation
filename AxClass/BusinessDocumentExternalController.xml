<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BusinessDocumentExternalController</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Newtonsoft.Json.Linq;
using System.Diagnostics;

/// <summary>
/// The class implements integration logic for generating a business document and 
/// communication with the Business Document Submission Service for import scenarios.
/// </summary>
final internal class BusinessDocumentExternalController
{
    private const str jsonEmtpyArray = '[]';
    private BusinessDocumentSubmissionExternal businessDocumentSubmissionExternal;
    private SysGuid uid;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newSubmission</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method instantiates the controller based on the incoming business document submission.
    /// </summary>
    /// <param name = "_submission">The business document submission.</param>
    /// <returns>The controller instance.</returns>
    public static BusinessDocumentExternalController newSubmission(BusinessDocumentSubmissionExternal _submission)
    {
        if (!_submission)
        {
            throw Error(Error::wrongUseOfFunction(funcName()));
        }

        var commonDoc = _submission.getDocument();
        var controller = new BusinessDocumentExternalController();

        controller.parmUID(_submission.UID);
        controller.parmSubmissionExternal(_submission);

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDocumentCompleted</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void setDocumentCompleted()
    {
        this.setExternalDocumentState(
            BusinessDocumentServiceActions::Complete,
            BusinessDocumentState::Completed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDocumentPostProcessFailed</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void setDocumentPostProcessFailed()
    {
        this.setExternalDocumentState(
            BusinessDocumentServiceActions::PostProcessFail,
            BusinessDocumentState::PostProcessFailed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDocumentFailed</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void setDocumentFailed()
    {
        this.setExternalDocumentState(
            BusinessDocumentServiceActions::Fail,
            BusinessDocumentState::Failed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDocumentCanceled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void setDocumentCanceled()
    {
        this.setExternalDocumentState(
            BusinessDocumentServiceActions::Cancel,
            BusinessDocumentState::Canceled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUID</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public SysGuid parmUID(SysGuid _uid = uid)
    {
        uid = _uid;
        return uid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubmissionExternal</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public BusinessDocumentSubmissionExternal parmSubmissionExternal(BusinessDocumentSubmissionExternal _submission = businessDocumentSubmissionExternal)
    {
        businessDocumentSubmissionExternal = _submission;
        return businessDocumentSubmissionExternal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resubmit</Name>
				<Source><![CDATA[
    [Hookable(false)]
	public void resubmit()
    {
        Stopwatch stopwatch;
        boolean success;

        if (!businessDocumentSubmissionExternal)
        {
            throw Error(Error::wrongUseOfFunction(funcName()));
        }

        BusinessDocumentTelemetry::startEvent(
            BusinessDocumentInstrumentationConstants::ResubmitIncoming,
            funcName());

        stopwatch = Stopwatch::StartNew();

        try
        {
            JObject response = BusinessDocumentServiceController::requestServiceForJSON(
                jsonEmtpyArray,
                BusinessDocumentServiceActions::Resubmit,
                businessDocumentSubmissionExternal.documentUidStr(),
                false,
                BusinessDocumentWebHelper::HttpPost);

            if (response)
            {
                JToken exception = response.SelectToken(BusinessDocumentWebHelper::ExceptionToken);

                ttsbegin;

                businessDocumentSubmissionExternal.selectForUpdate(true);
                
                if (exception)
                {
                    businessDocumentSubmissionExternal.Log = businessDocumentSubmissionExternal.Log +
                        BusinessDocumentWebHelper::getErrorLog(response);
                }
                else
                {
                    businessDocumentSubmissionExternal.State = BusinessDocumentState::Scheduled;
                }

                businessDocumentSubmissionExternal.write();

                ttscommit;
            }

            success = true;
        }
        finally
        {
            stopwatch.Stop();
            BusinessDocumentTelemetry::finishEvent(
                BusinessDocumentInstrumentationConstants::ResubmitIncoming,
                funcName(),
                success,
                stopwatch.ElapsedMilliseconds);
        }

        BusinessDocumentTelemetry::actionEvent(
            strFmt(BusinessDocumentInstrumentationConstants::Resubmit,
            ERForInvoicingInstrumentationConstants::SubmissionTypeResubmission,
            businessDocumentSubmissionExternal.documentUidStr()),
            funcName());
      
	}

]]></Source>
			</Method>
			<Method>
				<Name>lookupDocumentInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method returns the business document submission information.
    /// </summary>
    /// <returns>A <c>BusinessDocumentInfo</c> class instance containing the business document submission information.</returns>
    public BusinessDocumentInfo lookupDocumentInfo()
    {
        BusinessDocumentInfo documentInfo;
        boolean isSuccess;

        if (!businessDocumentSubmissionExternal)
        {
            throw Error(Error::wrongUseOfFunction(funcName()));
        }

        ERForInvoicingActivities activities = ERForInvoicingActivities::newFromCategory(classStr(BusinessDocumentServiceController));
        using (var activityContext = activities.lookupDocumentInfo())
        {
            try
            {
                JObject response = BusinessDocumentServiceController::requestServiceForJSON(
                        '',
                        '',
                        businessDocumentSubmissionExternal.documentUidStr(),
                        true);

                if (response)
                {
                    documentInfo = BusinessDocumentInfo::newFromJSON(response);
                    
                    BusinessDocumentWebHelper::showErrorLog(response);
                }

                isSuccess = true;
            }
            catch (Exception::CLRError)
            {
                str message = SRSProxy::getLastClrExceptionMessage();
                activityContext.addCustomProperty(ERForInvoicingInstrumentationConstants::CustomPropertyError, message);
                error(message);
            }
            finally
            {
                activityContext.addCustomProperty(ERForInvoicingInstrumentationConstants::CustomPropertyIsSuccess, any2Str(isSuccess));
            }
        }

        return documentInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExternalDocumentState</Name>
				<Source><![CDATA[
    private void setExternalDocumentState(str _setStateAction, BusinessDocumentState _state)
    {
        if (!businessDocumentSubmissionExternal)
        {
            throw Error(Error::wrongUseOfFunction(funcName()));
        }
        
        ERForInvoicingActivities activities = ERForInvoicingActivities::newFromCategory(classStr(BusinessDocumentServiceController));
        boolean isSuccess;
        using (var activityContext = activities.setExternalDocumentState())
        {
            try
            {
                JObject response = BusinessDocumentServiceController::requestServiceForJSON(
                    '',
                    _setStateAction,
                    businessDocumentSubmissionExternal.documentUidStr(),
                    false,
                    BusinessDocumentWebHelper::HttpPost);

                container log;
                              
                if (response)
                {
                    log += BusinessDocumentWebHelper::getErrorLog(response);

                    JToken exception = response.SelectToken(BusinessDocumentWebHelper::ExceptionToken);

                    ttsbegin;
                    businessDocumentSubmissionExternal.selectForUpdate(true);
                    businessDocumentSubmissionExternal.Log += BusinessDocumentWebHelper::getErrorLog(response);
                  
                    if (!exception)
                    {
                        businessDocumentSubmissionExternal.State = _state;
                    }
            
                    businessDocumentSubmissionExternal.write();
                    ttscommit;
                
                }

                if (log)
                {
                    Error("@BusinessDocumentSubmissionService:StateChangeFailedOnServer");
                }
                isSuccess = true;
            }
            catch (Exception::CLRError)
            {
                str message = SRSProxy::getLastClrExceptionMessage();
                activityContext.addCustomProperty(ERForInvoicingInstrumentationConstants::CustomPropertyError, message);
                error(message);
            }
            finally
            {
                activityContext.addCustomProperty(ERForInvoicingInstrumentationConstants::CustomPropertyIsSuccess, any2Str(isSuccess));
            }
        }
      
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>