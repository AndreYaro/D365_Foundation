<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rCustVendTurnoverHolder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RCustVendTurnoverHolder</c> class is the base class for collection and keep data about one
/// customer or vendor.
/// </summary>
abstract class rCustVendTurnoverHolder
{
    CustVendTable           custVendTable;              //Customer or Vendor

    TransDate               dateFrom;                   //Date beginning of period
    TransDate               dateTo;                     //Date end of period

    RHolderData             rHolderData;                //Repository of data

    List                    listAccountableDimAttr;         //Accountable dimension
    List                    listDimAttrIntoQuery;

    TableId                 custVendTransID;            //ID  CustVendTable

    CurrencyTypeBrief_RU    currencyTypeBrief;
    CurrencyCode            currencyCode;               //Curency code

    Query                   queryBase;                  //Base query for selected transaction

    QueryRun                qrCalculateBalanceDebit;    //This QueryRun use for balance of debit calculate
    QueryRun                qrCalculateBalanceCredit;   //This QueryRun use for balance of credit calculate
    QueryRun                qrCalculateBegBalance;      //This QueryRun use for balance on beginnin of period calculate

    NoYes                   groupByLedgerAccount;       //Need ledger account separate?

    int                     iKeyLen;                    //Key length use into rHolderData

    LedgerAccount           ledgerAccount;

#define.fieldIdPostingProfile("PostingProfile")
#define.fieldIdDimension("DefaultDimension")
#define.fieldIdCorrect("Correct")
#define.fieldIdTransDate("TransDate")
#define.fieldIdAccountNum("AccountNum")
#define.fieldIdCurrencyCode("CurrencyCode")
#define.fieldIdAmountCur("AmountCur")
#define.fieldIdAmountMST("AmountMST")
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountFromCustVendTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Amount amountFromCustVendTrans(CustVendTrans _custVendTrans)
    {
        if (currencyTypeBrief == CurrencyTypeBrief_RU::Currency)
        {
            return _custVendTrans.AmountCur;
        }

        return _custVendTrans.AmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the balance.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calculate()
    {
        container       conKey, conData;
        LedgerAccount   localLedgerAccount;

        CustVendTrans   custVendTrans;
        QueryRun        qr;

        Amount          amount;
        Amount          amountBegDebit, amountBegCredit;
        Amount          amountDebit, amountCredit;
        Amount          amountEndDebit, amountEndCredit;

        qr = new QueryRun(this.createQuery(dateNull(), dateTo));
        while (qr.next())
        {
            custVendTrans = qr.get(custVendTransID);

            localLedgerAccount = this.getLedgerAccount(custVendTrans);

            if ((ledgerAccount) && (localLedgerAccount != ledgerAccount))
            {
                //We can to take into consideration transaction on stated ledger account only
                continue;
            }

            //Calculate balance on beginning of period
            [amountBegDebit, amountBegCredit] = this.calculateBegBalance(custVendTrans.PostingProfile,
                                                                         custVendTrans.DefaultDimension,
                                                                         custVendTrans.Correct);

            //Calculate balance of period
            [amountDebit, amountCredit]  = this.calculateBalance(custVendTrans.PostingProfile,
                                                                 custVendTrans.DefaultDimension,
                                                                 custVendTrans.Correct);

            //Calculate balance on end of period
            amount = amountBegDebit + amountBegCredit + amountDebit + amountCredit;

            amountEndDebit  = 0;
            amountEndCredit = 0;

            if (amount >= 0)
            {
                amountEndDebit = amount;
            }
            else
            {
                amountEndCredit = amount;
            }

            //Remember balances
            conKey  = this.createKey(localLedgerAccount, custVendTrans.DefaultDimension);
            conData = [amountBegDebit, amountBegCredit, amountDebit, amountCredit, amountEndDebit, amountEndCredit];

            rHolderData.insert(conKey, conData);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateBalance</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container calculateBalance(PostingProfile     _postingProfile,
                                         DimensionDefault   _defaultDimension,
                                         NoYes              _correct)
    {
        CustVendTrans   custVendTrans;
        Amount          debit, credit;

        //Set new range value into query of debit
        this.setAttributeQrCalculateBalance(qrCalculateBalanceDebit, _postingProfile, _defaultDimension, _correct);
        qrCalculateBalanceDebit.reset();

        //Calculate balance of debit
        while (qrCalculateBalanceDebit.next())
        {
            custVendTrans = qrCalculateBalanceDebit.get(custVendTransID);

            if (custVendTrans.Correct == NoYes::No)
            {
                debit  += this.amountFromCustVendTrans(custVendTrans);
            }
            else
            {
                credit += this.amountFromCustVendTrans(custVendTrans);
            }
        }

        //Set new range value into query of credit
        this.setAttributeQrCalculateBalance(qrCalculateBalanceCredit, _postingProfile, _defaultDimension, _correct);
        qrCalculateBalanceCredit.reset();

        //Calculate balance of credit
        while (qrCalculateBalanceCredit.next())
        {
            custVendTrans = qrCalculateBalanceCredit.get(custVendTransID);

            if (custVendTrans.Correct == NoYes::No)
            {
                credit += this.amountFromCustVendTrans(custVendTrans);
            }
            else
            {
                debit  += this.amountFromCustVendTrans(custVendTrans);
            }
        }

        return [debit, credit];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateBegBalance</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container calculateBegBalance(PostingProfile      _postingProfile,
                                            DimensionDefault    _defaultDimension,
                                            NoYes               _correct)
    {
        CustVendTrans   custVendTrans;
        Amount          amount;

        //Set new range value into query
        this.setAttributeQrCalculateBalance(qrCalculateBegBalance,
                                            _postingProfile,
                                            _defaultDimension,
                                            _correct);

        qrCalculateBegBalance.reset();

        //Calculate balance of debit
        while (qrCalculateBegBalance.next())
        {
            custVendTrans = qrCalculateBegBalance.get(custVendTransID);

            amount += this.amountFromCustVendTrans(custVendTrans);
        }

        if (amount >= 0)
        {
            return [amount, 0];
        }

        return [0, amount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createKey</Name>
				<Source><![CDATA[
    private container createKey(LedgerAccount _ledgerAccount, DimensionDefault _defaultDimension)
    {
        container       conRet = conNull();
        int             cx;
        RecId           dimensionAttribute;
        Map             dimensionSpecifiers = LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(_defaultDimension);
        anytype         value;
        ListEnumerator  le;

        if (groupByLedgerAccount)
        {
            conRet += strLTrim(_ledgerAccount);
        }

        le = listDimAttrIntoQuery.getEnumerator();
        while (le.moveNext())
        {
            dimensionAttribute = le.current();
            if (dimensionSpecifiers.exists(dimensionAttribute))
            {
                [value] = dimensionSpecifiers.lookup(dimensionAttribute);
                conRet += value;
            }
        }

        if (!conRet)
        { //Create key top lelev
            for (cx = 1; cx <= iKeyLen; cx++)
            {
                conRet += rHolderData.getSumKeyField();
            }
        }

        return conRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQrCalculateBalanceCredit</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected QueryRun createQrCalculateBalanceCredit()
    {
        Query                   q;
        QueryBuildRange         range;

        FieldId                 amountFieldID;

        q = this.createQuery(dateFrom, dateTo);

        findOrCreateRange_W(q.dataSourceTable(custVendTransID),
                            fieldName2id(custVendTransID, #fieldIdPostingProfile));

        //Set attribute to credit
        if (currencyTypeBrief == CurrencyTypeBrief_RU::Standard)
        {
            amountFieldID = fieldName2id(custVendTransID, #fieldIdAmountMST);
        }
        else
        {
            amountFieldID = fieldName2id(custVendTransID, #fieldIdAmountCur);
        }

        range = findOrCreateRange_W(q.dataSourceTable(custVendTransID), amountFieldID);
        range.value("@GLS111254");

        findOrCreateRange_W(q.dataSourceTable(custVendTransID), fieldName2id(custVendTransID, #fieldIdCorrect));

        return new QueryRun(q);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQrCalculateBalanceDebit</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected QueryRun createQrCalculateBalanceDebit()
    {
        Query                   q;
        QueryBuildRange         range;

        FieldId                 amountFieldID;

        q = this.createQuery(dateFrom, dateTo);

        findOrCreateRange_W(q.dataSourceTable(custVendTransID),
                            fieldName2id(custVendTransID, #fieldIdPostingProfile));

        //Set attribute to debit
        if (currencyTypeBrief == CurrencyTypeBrief_RU::Standard)
        {
            amountFieldID = fieldName2id(custVendTransID, #fieldIdAmountMST);
        }
        else
        {
            amountFieldID = fieldName2id(custVendTransID, #fieldIdAmountCur);
        }

        range = findOrCreateRange_W(q.dataSourceTable(custVendTransID), amountFieldID);
        range.value("@GLS111253");

        findOrCreateRange_W(q.dataSourceTable(custVendTransID), fieldName2id(custVendTransID, #fieldIdCorrect));

        return new QueryRun(q);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQrCalculateBegBalance</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected QueryRun createQrCalculateBegBalance()
    {
        Query q = this.createQuery(dateNull(), dateFrom - 1);

        findOrCreateRange_W(q.dataSourceTable(custVendTransID),
                            fieldName2id(custVendTransID, #fieldIdPostingProfile));

        return new QueryRun(q);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuery</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Query createQuery(date _dtFrom, date _dtTo)
    {
        QueryBuildDataSource    ds;
        QueryBuildDataSource    qbdsCustTrans_W;
        QueryBuildRange         range;
        Query                   q;

        RecId                   dimensionAttribute;
        str                     dimensionAttributeName;
        ListEnumerator          le;

        if (queryBase)
        {
            q = new Query(queryBase);
            ds = q.dataSourceTable(custVendTransID);
        }
        else
        {
            q = new Query();
            ds = q.addDataSource(custVendTransID);
        }

        //Choose dates of period
        range = findOrCreateRange_W(ds, fieldName2id(custVendTransID, #fieldIdTransDate));
        range.value(queryRange(_dtFrom, _dtTo));

        //Choose customer/vender
        range = findOrCreateRange_W(ds, fieldName2id(custVendTransID, #fieldIdAccountNum));

        range.value(custVendTable.AccountNum);

        //Choose currency code
        if (currencyCode)
        {
            range = findOrCreateRange_W(ds, fieldName2id(custVendTransID, #fieldIdCurrencyCode));
            range.value(currencyCode);
        }

        //Skip customer transaction with non-standard invoice posting type
        if (custVendTransID == tableNum(CustTrans))
        {
            qbdsCustTrans_W = CustTrans_W::addToQuery(ds, JoinMode::OuterJoin);
            range = findOrCreateRange_W(qbdsCustTrans_W, fieldNum(CustTrans_W, InvoicePostingType_RU));
            range.value(queryValue(SalesInvoicePostingType_RU::Standard));
        }

        ds.orderMode(OrderMode::GroupBy);

        //Set selective fields
        if (currencyTypeBrief == CurrencyTypeBrief_RU::Currency)
        {
            ds.addSelectionField(fieldName2id(custVendTransID, #fieldIdAmountCur), SelectionField::Sum);
        }
        else
        {
            ds.addSelectionField(fieldName2id(custVendTransID, #fieldIdAmountMST), SelectionField::Sum);
        }

        //Set group fields
        ds.addSortField(fieldName2id(custVendTransID, #fieldIdPostingProfile));
        ds.addSortField(fieldName2id(custVendTransID, #fieldIdCorrect));

        //Set "group by" and "order by" on  Dimension
        le = listDimAttrIntoQuery.getEnumerator();
        while (le.moveNext())
        {
            dimensionAttribute      = le.current();
            dimensionAttributeName  = DimensionAttribute::find(dimensionAttribute).Name;
            if (dimensionAttributeName)
            {
                SysQuery::addOrderByDimensionAttribute(q,
                                                       ds.name(),
                                                       #fieldIdDimension,
                                                       DimensionComponent::DimensionAttribute,
                                                       SortOrder::Ascending,
                                                       dimensionAttributeName);
            }
        }

        return q;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger account.
    /// </summary>
    /// <param name="_custVendTrans">
    /// The customer or vendor transaction.
    /// </param>
    /// <returns>
    /// The ledger account.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract protected LedgerAccount getLedgerAccount(CustVendTrans  _custVendTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMapBuff</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the map with data.
    /// </summary>
    /// <returns>
    /// An instance of map.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Map getMapBuff()
    {
        return rHolderData.getMap();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSumKeyField</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TempStr getSumKeyField()
    {
        return rHolderData.getSumKeyField();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    // _?ustVendTable        -> Customer or Vendor.
    // _dateFrom             -> Date beginning of period.
    // _dateTo               -> Date end of period.
    // _groupByLedgerAccount -> Need ledger account separate?
    // _queryBase            -> Query for selected transaction.
    // _conAccountableDim    -> Accountable dimension.
    // _currencyTypeBrief    ->
    // _currencyCode         -> Curency code
    // _ledgerAccount        -> Range is of ledger account
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void new(CustVendTable        _custVendTable,
                    TransDate            _dateFrom,
                    TransDate            _dateTo,
                    NoYes                _groupByLedgerAccount = NoYes::No,
                    Query                _queryBase            = null,
                    container            _conAccountableDim    = conNull(),
                    CurrencyTypeBrief_RU _currencyTypeBrief    = CurrencyTypeBrief_RU::Standard,
                    CurrencyCode         _currencyCode         = '',
                    LedgerAccount        _ledgerAccount        = '')
    {
        int                 cx;
        DimensionAttribute  dimAttr;
        str                 name;
        SysDictEnum         sysDictEnum = new SysDictEnum(enumNum(SysDimension));

        if (! _custVendTable)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if ((_queryBase) && (_queryBase.dataSourceNo(1).table() != custVendTransID))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if ((_currencyTypeBrief == CurrencyTypeBrief_RU::Currency) && (!strLTrim(_currencyCode)))
        {
            throw error(strFmt("@GLS105092", enum2str(_currencyTypeBrief)));
        }

        custVendTable = _custVendTable;
        dateFrom      = _dateFrom;
        dateTo        = _dateTo;

        groupByLedgerAccount = _groupByLedgerAccount;

        currencyTypeBrief    = _currencyTypeBrief;
        currencyCode         = _currencyCode;

        ledgerAccount        = _ledgerAccount;

        listAccountableDimAttr = new List(Types::Int64);

        if (_conAccountableDim)
        {
            for (cx = 1; cx <= conLen(_conAccountableDim); cx++)
            {
                name = sysDictEnum.index2Symbol(conPeek(_conAccountableDim, cx)-1);
                dimAttr = DimensionAttribute::findByName(name);
                listAccountableDimAttr.addEnd(dimAttr.RecId);
            }
            listDimAttrIntoQuery = listAccountableDimAttr;
        }
        else
        {
            listDimAttrIntoQuery = new List(Types::Int64);

            while select dimAttr order by dimAttr.Name
                where dimAttr.Type != DimensionAttributeType::DynamicAccount
                   && dimAttr.BackingEntityType != tableNum(MainAccount)
            {
                listDimAttrIntoQuery.addEnd(dimAttr.RecId);
            }
        }

        if (_queryBase)
        {
            queryBase  = new Query(_queryBase);
        }

        qrCalculateBalanceDebit  = this.createQrCalculateBalanceDebit();
        qrCalculateBalanceCredit = this.createQrCalculateBalanceCredit();
        qrCalculateBegBalance    = this.createQrCalculateBegBalance();

        iKeyLen = conLen(_conAccountableDim);

        if (groupByLedgerAccount)
        {
            iKeyLen += 1;
        }

        rHolderData = new RHolderData_RCustVendTurnoverHolder(iKeyLen);

        this.calculate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAttributeQrCalculateBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set new range value of query.
    /// </summary>
    /// <param name="_qr">
    /// The query run object.
    /// </param>
    /// <param name="_postingProfile">
    /// The posting profile.
    /// </param>
    /// <param name="_defaultDimension">
    /// The financial dimension.
    /// </param>
    /// <param name="_correct">
    /// The correction value.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void setAttributeQrCalculateBalance(QueryRun          _qr,
                                                  PostingProfile    _postingProfile,
                                                  DimensionDefault  _defaultDimension,
                                                  NoYes             _correct)
    {
        QueryBuildRange range;

        this.setDimCriteria(_qr.query(), _qr.query().dataSourceTable(custVendTransID), _defaultDimension);

        range = findOrCreateRange_W(_qr.query().dataSourceTable(custVendTransID),
                                    fieldName2id(custVendTransID, #fieldIdPostingProfile));

        if (_postingProfile)
        {
            range.value(_postingProfile);
        }
        else
        {
            range.value(SysQuery::valueEmptyString());
        }

        range = findOrCreateRange_W(_qr.query().dataSourceTable(custVendTransID),
                                    fieldName2id(custVendTransID, #fieldIdCorrect));

        range.value(queryValue(_correct));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDimCriteria</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void setDimCriteria(Query _query, QueryBuildDataSource _ds, DimensionDefault _defaultDimension)
    {
        RecId           dimensionAttribute;
        Map             dimensionSpecifiers = LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(_defaultDimension);
        str             dimensionAttributeName;
        anytype         value;
        ListEnumerator  le = listDimAttrIntoQuery.getEnumerator();

        while (le.moveNext())
        {
            dimensionAttribute = le.current();
            if (dimensionSpecifiers.exists(dimensionAttribute))
            {
                [value] = dimensionSpecifiers.lookup(dimensionAttribute);
            }
            else
            {
                value = SysQuery::valueEmptyString();
            }

            dimensionAttributeName = DimensionAttribute::find(dimensionAttribute).Name;
            if (dimensionAttributeName)
            {
                SysQuery::addDimensionAttributeRange(_query,
                                                     _ds.name(),
                                                     #fieldIdDimension,
                                                     DimensionComponent::DimensionAttribute,
                                                     value,
                                                     dimensionAttributeName);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>