<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLicensePlateConsolidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSLicensePlateConsolidator</c> class is responsible for consolidating two license plates.
/// </summary>
public class WHSLicensePlateConsolidator
{
    WHSWorkTable fromWork;
    WMSLocation fromLocation;
    WMSLocation toLocation;
    WHSWorkTable toWork;
    WHSLicensePlateId fromLicensePlateId;
    WHSLicensePlateId toLicensePlateId;
    WHSUserId whsUserId;
    WHSLicensePlateConsolidationOptions consolidationOptions;

    WHSWorkLine fromWorkNextOpenPickWorkLine;
    WHSWorkLine fromWorkNextOpenPutWorkLine;

    private boolean isWHSInventoryTransactionWHSLicensePlateConsolidatorItemSetElementsFlightEnabled = WHSInventoryTransactionWHSLicensePlateConsolidatorItemSetElementsFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmFromLicensePlateId</Name>
				<Source><![CDATA[
    protected WHSLicensePlateId parmFromLicensePlateId(WHSLicensePlateId _fromLicensePlateId = fromLicensePlateId)
    {
        fromLicensePlateId = _fromLicensePlateId;
        return fromLicensePlateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToLicensePlateId</Name>
				<Source><![CDATA[
    protected WHSLicensePlateId parmToLicensePlateId(WHSLicensePlateId _toLicensePlateId = toLicensePlateId)
    {
        toLicensePlateId = _toLicensePlateId;
        return toLicensePlateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWHSUserId</Name>
				<Source><![CDATA[
    protected WHSUserId parmWHSUserId(WHSUserId _whsUserId = whsUserId)
    {
        whsUserId = _whsUserId;
        return whsUserId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConsolidationOptions</Name>
				<Source><![CDATA[
    protected WHSLicensePlateConsolidationOptions parmConsolidationOptions(WHSLicensePlateConsolidationOptions _consolidationOptions = consolidationOptions)
    {
        consolidationOptions = _consolidationOptions;
        return consolidationOptions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init()
    {
        fromWork = WHSWorkTable::findByTargetLicensePlate(fromLicensePlateId);
        fromLocation = WHSLicensePlate::getWMSLocationWithOnHand(fromLicensePlateId);
        fromWorkNextOpenPickWorkLine = WHSWorkTable::getNextOpenPickWorkLine(fromWork.WorkId);
        fromWorkNextOpenPutWorkLine = WHSWorkLine::getNextOppositeWorkLineFromWorkLine(fromWorkNextOpenPickWorkLine);

        if (WHSLicensePlate::exist(toLicensePlateId))
        {
            toLocation = WHSLicensePlate::getWMSLocationWithOnHand(toLicensePlateId);

            if (toLocation)
            {
                toWork = WHSWorkTable::findByTargetLicensePlate(toLicensePlateId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLicencePlates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new <c>WHSLicensePlateConsolidator</c> instance with the specified parameters.
    /// </summary>
    /// <param name = "_fromLicensePlateId">License plate Id to consolidate from.</param>
    /// <param name = "_toLicensePlateId">License plate Id to consolidate to.</param>
    /// <param name = "_consolidationOptions">License plate consolidation options.</param>
    /// <param name = "_whsUserId">Work user to use for executing _fromWork.</param>
    public static WHSLicensePlateConsolidator newFromLicencePlates(
        WHSLicensePlateId                   _fromLicensePlateId,
        WHSLicensePlateId                   _toLicensePlateId,
        WHSLicensePlateConsolidationOptions _consolidationOptions,
        WHSUserId                           _whsUserId)
    {
        WHSLicensePlateConsolidator consolidator =  WHSLicensePlateConsolidator::construct();

        consolidator.parmFromLicensePlateId(_fromLicensePlateId);
        consolidator.parmToLicensePlateId(_toLicensePlateId);
        consolidator.parmConsolidationOptions(_consolidationOptions);
        consolidator.parmWHSUserId(_whsUserId);
        consolidator.init();

        return consolidator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static WHSLicensePlateConsolidator construct()
    {
        return new WHSLicensePlateConsolidator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLicensePlateValidator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the <c>WHSLicensePlateConsolidationValidator</c> instance.
    /// </summary>
    /// <returns>A new instance of the validator for consolidating license plates.</returns>
    protected WHSLicensePlateConsolidationValidator getLicensePlateValidator()
    {
        return WHSLicensePlateConsolidationValidator::newFromMergeFromLicensePlateId(
            fromLicensePlateId, toLicensePlateId, consolidationOptions,
            fromWork, toWork,
            fromLocation, toLocation,
            fromWorkNextOpenPickWorkLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>consolidate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Consolidate two license plates
    /// </summary>
    public void consolidate()
    {
        ttsbegin;

        if (!this.validate())
        {
            throw error("@SYS18447");
        }

        WHSLicensePlate::createLicensePlate(toLicensePlateId);

        this.cancelRemainingWorkLines();

        // Move all physical qty on the from-lp to the to-lp and update from-work
        this.updateFromWork();

        if (toWork)
        {
            // Update the to-work so it includes the contribution from the from-work
            this.updateToWork();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromWork</Name>
				<Source><![CDATA[
    private void updateFromWork()
    {
        this.pickFromLP();

        this.putLPToLocation();

        // If moving to an empty LP, set it as target LP on FromWork as this is the only work.
        if (!toLocation)
        {
            this.updateFromWorkTargetLP();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelRemainingWorkLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancel all lines after the staging pick apart from the staging put.
    /// If merging to an empty LP, also re-create remaining work lines accordingly after the last line.
    /// </summary>
    private void cancelRemainingWorkLines()
    {
        WHSWorkLine workLineFromToCancel;
        lineNum     maxLineNum = WHSWorkLine::lastLineNum(fromWorkNextOpenPickWorkLine.WorkId);
        LineNum     lineNum = maxLineNum + 1;
        WHSWorkLine newWorkLine;

        while select forupdate workLineFromToCancel
            order by LineNum
            where workLineFromToCancel.WorkId == fromWorkNextOpenPickWorkLine.WorkId
                && workLineFromToCancel.WorkStatus != WHSWorkStatus::Skipped
                && workLineFromToCancel.WorkStatus != WHSWorkStatus::Cancelled
                && workLineFromToCancel.LineNum >= fromWorkNextOpenPickWorkLine.LineNum
                && workLineFromToCancel.LineNum <= maxLineNum
        {
            // If toLocation is null, it means toLicensePlateId is new or empty
            // So we need to re-create the lines as we go along
            if (!toLocation)
            {
                newWorkLine.clear();
                buf2Buf(workLineFromToCancel, newWorkLine);
                newWorkLine.LineNum = lineNum;
                newWorkLine.insert();
                lineNum++;
            }

            // Do not cancel the actual Pick/Put pair we are going to modify and execute later on.
            if (workLineFromToCancel.LineNum != fromWorkNextOpenPickWorkLine.LineNum
                && workLineFromToCancel.LineNum != fromWorkNextOpenPutWorkLine.LineNum)
            {
                workLineFromToCancel.WorkStatus = WHSWorkStatus::Cancelled;
                workLineFromToCancel.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromWorkTargetLP</Name>
				<Source><![CDATA[
    private void updateFromWorkTargetLP()
    {
        WHSWorkTable work = WHSWorkTable::find(fromWork.WorkId, true);

        work.TargetLicensePlateId = toLicensePlateId;
        work.doUpdate(); // Calling doUpdate here to avoid redundant status updates for Load/Shipment.
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickFromLP</Name>
				<Source><![CDATA[
    private void pickFromLP()
    {
        this.changeNextPutWorkLineLocation();

        WhsWorkExecute workExecute = WhsWorkExecute::construct();

        // We expect to pick the full quantity of the LP for this pick line
        workExecute.pickWorkFromLicensePlate(fromLicensePlateId,
                                             fromWorkNextOpenPickWorkLine,
                                             whsUserId,
                                             null,
                                             '',
                                             0,
                                             false,
                                             NoYes::No,
                                             false,
                                             false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>putLPToLocation</Name>
				<Source><![CDATA[
    private void putLPToLocation()
    {
        WhsWorkExecute workExecute = WhsWorkExecute::construct();

        workExecute.putAwayToLocation(fromWorkNextOpenPutWorkLine.WorkId, fromWorkNextOpenPutWorkLine.LineNum, fromWorkNextOpenPutWorkLine.wMSLocationId,
            WHSWorkPutFlow::MoveAll, whsUserId, fromLicensePlateId, toLicensePlateId);

        if (!toLocation)
        {
            // Because the putAwayToLocation uses getFirstOpenLine method, which locks the work unless it's all done, we need to unlock it here
            // for the case where we are consolidating with an empty LP
            WHSWorkTable::lockUnlockWork(fromWorkNextOpenPutWorkLine.WorkId, '');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate that the specified license plates can be consolidated.
    /// </summary>
    /// <returns>True, if the validation succeeded; otherwise, false.</returns>
    protected boolean validate()
    {
        var validator = this.getLicensePlateValidator();

        boolean ret = validator.validateTargetLicensePlate();
        ret = ret && validator.validateLicensePlateMergeFrom();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createConsolidatedWorkLine</Name>
				<Source><![CDATA[
    private void createConsolidatedWorkLine(WHSWorkLine _originWorkLine, WHSWorkLine _consolidatedWorkLine)
    {
        WHSConsolidatedWorkLine consolidatedWorkLine;

        consolidatedWorkLine.ConsolidatedWorkLine = _consolidatedWorkLine.recId;
        consolidatedWorkLine.OriginWorkLine = _originWorkLine.RecId;
        consolidatedWorkLine.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateToWork</Name>
				<Source><![CDATA[
    private void updateToWork()
    {
        // Update the to work line with new quantities etc.
        WHSWorkLine toPickLineMatch = this.updateToWorkLines(fromWorkNextOpenPutWorkLine);

        // Create the details so the to work knows what load lines it is now responsible for updating on the final put
        this.createWorkLineLoadLineDetails(fromWorkNextOpenPickWorkLine, toPickLineMatch);

        fromWorkNextOpenPutWorkLine.reread();
        // Update the to-WIT to get contribution from the from-work
        this.createOrUpdateToWIT(fromWorkNextOpenPutWorkLine, toPickLineMatch);

        // The to-work now also originated from the from-work so record that
        this.createConsolidatedWorkLine(fromWorkNextOpenPutWorkLine, toPickLineMatch);

        // Update the to-work table in case values are different
        this.updateToWorkTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateToWorkTable</Name>
				<Source><![CDATA[
    private void updateToWorkTable()
    {
        toWork = WHSWorkTable::find(toWork.WorkId, true);

        if (fromWork.WorkTransType != toWork.WorkTransType)
        {
            throw error(strFmt("@WAX:MergeLP_WorkOrderTypesDifferentError", fromWork.TargetLicensePlateId, toWork.TargetLicensePlateId, fromWork.WorkTransType, toWork.WorkTransType));
        }

        boolean updateToWork;
        if (fromWork.OrderNum != toWork.OrderNum)
        {
            toWork.OrderNum = '';
            updateToWork = true;
        }

        if (fromWork.ShipmentId != toWork.ShipmentId)
        {
            toWork.ShipmentId = '';
            updateToWork = true;
        }

        if (updateToWork)
        {
            toWork.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateToWorkLines</Name>
				<Source><![CDATA[
    private WHSWorkLine updateToWorkLines(WHSWorkLine _fromWorkPutLine)
    {
        WHSWorkLine toPickLineMatch;

        // Find the next open pick since that is the one that will get the WIT
        select firstonly forupdate toPickLineMatch
            order by LineNum
            where toPickLineMatch.WorkId == toWork.WorkId
                && toPickLineMatch.WMSLocationId == toLocation.wMSLocationId
                && toPickLineMatch.WorkType == WHSWorkType::Pick
                && toPickLineMatch.WorkStatus == WHSWorkStatus::Open;

        if (!toPickLineMatch.RecId)
        {
            throw error(strFmt("@WAX:MergeLP_OpenPickWorkLineNotFound", toWork.WorkId, toLocation.wMSLocationId));
        }

        InventDimId inventDimIdCommon;
        boolean canKeepItemId = false;
        boolean canKeepProductDim = false;
        boolean cankeepUnit = false;

        [canKeepProductDim, inventDimIdCommon] = this.determineCommonInventDim(_fromWorkPutLine.inventDim(), toPickLineMatch.inventDim());

        canKeepItemId = canKeepProductDim && (_fromWorkPutLine.ItemId == toPickLineMatch.ItemId);

        Qty qtyWork;

        // We found a matching item so we need to determine how much of the common information can be kept
        if (canKeepItemId)
        {
            EcoResReleasedProductUnitConverter releasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct();
            UnitOfMeasureRecId fromWorkLinePutUnit = UnitOfMeasure::unitOfMeasureIdBySymbol(_fromWorkPutLine.UnitId);
            UnitOfMeasureRecId toPickLineMatchUnit = UnitOfMeasure::unitOfMeasureIdBySymbol(toPickLineMatch.UnitId);

            cankeepUnit = releasedProductUnitConverter.canBeConverted(fromWorkLinePutUnit, toPickLineMatchUnit, _fromWorkPutLine.ItemId, _fromWorkPutLine.InventDimId);

            if (cankeepUnit)
            {
                qtyWork = releasedProductUnitConverter.convert(_fromWorkPutLine.QtyWork,
                                                        fromWorkLinePutUnit,
                                                        toPickLineMatchUnit,
                                                        NoYes::No,
                                                        _fromWorkPutLine.ItemId,
                                                        _fromWorkPutLine.InventDimId,
                                                        NoYes::No);
            }
            else
            {
                qtyWork = _fromWorkPutLine.QtyWork;
            }
        }
        else
        {
            qtyWork = _fromWorkPutLine.QtyWork;
        }

        boolean canKeepInventTransId = (_fromWorkPutLine.InventTransId == toPickLineMatch.InventTransId);
        boolean canKeepOrderNum = (_fromWorkPutLine.OrderNum == toPickLineMatch.OrderNum);
        boolean canKeepShipmentId = (_fromWorkPutLine.ShipmentId == toPickLineMatch.ShipmentId);
        boolean canKeepLoadId = (_fromWorkPutLine.LoadId == toPickLineMatch.LoadId);

        WHSWorkLine toWorkLine;

        while select forupdate toWorkLine
            where toWorkLine.WorkId == toPickLineMatch.WorkId
                    && toWorkLine.LineNum >= toPickLineMatch.LineNum
                    && toWorkLine.WorkStatus == WHSWorkStatus::Open
        {
            if (!canKeepItemId)
            {
                toWorkLine.itemId = '';
            }

            if (!cankeepUnit)
            {
                toWorkLine.UnitId = '';
            }

            if (toWorkLine.InventDimId != inventDimIdCommon)
            {
                toWorkLine.InventDimId = inventDimIdCommon;
            }

            if (!canKeepInventTransId)
            {
                toWorkLine.InventTransId = '';
            }

            if (!canKeepOrderNum)
            {
                toWorkLine.OrderNum = '';
            }

            if (!canKeepShipmentId)
            {
                toWorkLine.ShipmentId = '';
            }

            if (!canKeepLoadId)
            {
                toWorkLine.LoadId = '';
            }

            toWorkLine.InventQtyRemain += _fromWorkPutLine.InventQtyWork;
            toWorkLine.InventQtyWork += _fromWorkPutLine.InventQtyWork;
            toWorkLine.QtyRemain += qtyWork;
            toWorkLine.QtyWork += qtyWork;

            toWorkLine.update();
        }

        return toPickLineMatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineCommonInventDim</Name>
				<Source><![CDATA[
    private container determineCommonInventDim(InventDim _fromWorkLineInventDim, InventDim _toWorkLineInventDim)
    {
        InventDim inventDimCommon;
        boolean canKeepProductDim;

        boolean canKeepInventDim = (_fromWorkLineInventDim.InventDimId == _toWorkLineInventDim.InventDimId);
        // Dimensions are the same so just return one of the inventDimIds
        if (canKeepInventDim)
        {
            return [true, _toWorkLineInventDim.InventDimId];
        }

        // No product dimensions - so we can keep the blank product dims
        if (!_fromWorkLineInventDim.anyProductDimensionSpecified() && !_toWorkLineInventDim.anyProductDimensionSpecified())
        {
            //creation of workInventTrans depends on the blank InventDimId to indicate that the line is carrying different dimensions for the same item. e.g. different batches for a batch above location item
            inventDimCommon = InventDim::findOrCreateBlank();
            canKeepProductDim = true;
        }
        else //determine if we can keep only the product dimensions
        {
            List productDimList = InventDim::dimProductDimensionEnabledFieldList();

            canKeepProductDim  = InventDim::isInventDimEqual(_fromWorkLineInventDim, _toWorkLineInventDim, productDimList);

            if (canKeepProductDim)
            {
                //if we can keep the product dimensions it must mean that some other dimensions differ - so we need to construct a dim only with the product dimensions
                inventDimCommon.initFromInventDim(_toWorkLineInventDim, productDimList);
                inventDimCommon = InventDim::findOrCreate(inventDimCommon);
            }
            else
            {
                inventDimCommon = InventDim::findOrCreateBlank();
            }
        }

        return [canKeepProductDim, inventDimCommon.inventDimId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkLineLoadLineDetails</Name>
				<Source><![CDATA[
    private void createWorkLineLoadLineDetails(WHSWorkLine _fromWorkLine, WHSWorkLine _toWorkLine)
    {
        // If WorkLineLoadLineDetails already exist for _toWorkLine, means we do not need to add them again
        if (!WHSWorkLineLoadLineDetails::existForWorkLine(_toWorkLine))
        {
            WHSWorkLine prevPickWorkLine = WHSWorkLine::getPrevOppositeWorkLine(_toWorkLine.WorkId, _toWorkLine.LineNum, WHSWorkType::Put);

            if (prevPickWorkLine)
            {
                // Copy WorkLineLoadLineDetails from previous Pick work line if they exist (which would mean it was a STAGE pick, and was already consolidated), or from initial pick lines
                WHSWorkLineLoadLineDetails::createWorkLineLoadLineDetailsFromWorkLine(_toWorkLine, prevPickWorkLine);
            }
        }
        // Create new WorkLineLoadLineDetails based on _fromWorkLine
        WHSWorkLineLoadLineDetails::createWorkLineLoadLineDetailsFromWorkLine(_toWorkLine, _fromWorkLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateToWIT</Name>
				<Source><![CDATA[
    private void createOrUpdateToWIT(
        WHSWorkLine _fromWorkLine,
        WHSWorkLine _toWorkLine)
    {
        WHSWorkInventTrans  fromWorkInventTransTo;

        // Loop all the from WIT and copy them to the _toWorkLine
        while select fromWorkInventTransTo
            where fromWorkInventTransTo.WorkId == _fromWorkLine.WorkId
                && fromWorkInventTransTo.LineNum == _fromWorkLine.LineNum
        {
            WHSWorkInventTrans toWorkInventTransFrom;

            // Try and find a match to update - we are looking for WIT for the same parent on the same dimensions
            toWorkInventTransFrom = WHSWorkInventTrans::find(_toWorkLine.WorkId, _toWorkLine.LineNum, fromWorkInventTransTo.ItemId, fromWorkInventTransTo.InventTransIdParent, fromWorkInventTransTo.InventDimIdTo, true);

            if (toWorkInventTransFrom.RecId)
            {
                // If we found a match we can just increase the qty
                toWorkInventTransFrom.increaseQuantities(fromWorkInventTransTo.Qty, fromWorkInventTransTo.TransactionWeight);

                if (WHSInventoryTransactionConfigurationProvider::shouldUseWarehouseInventoryTransactionStack(toWorkInventTransFrom.WorkId))
                {
                    // Need to duplicate an item set since it could have been used by warehouse transactions already.
                    var newItemSetId = WHSInventoryItemSetElement::duplicateItemSet(toWorkInventTransFrom.ItemSetId);

                    // Add the contents of the "from" item set to the "to" work's item set.
                    WHSInventoryItemSetElement::addItemsFromSet(fromWorkInventTransTo.ItemSetId, newItemSetId);

                    toWorkInventTransFrom.ItemSetId = newItemSetId;
                    toWorkInventTransFrom.doUpdate();
                }
            }
            else
            {
                this.createWITToFromWITFrom(fromWorkInventTransTo, _toWorkLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWITToFromWITFrom</Name>
				<Source><![CDATA[
    private void createWITToFromWITFrom(
        WHSWorkInventTrans  _fromWorkInventTrans,
        WHSWorkLine         _whsWorkLineTo)
    {
        WHSWorkInventTrans newWorkInventTrans;

        newWorkInventTrans.initFromWorkInventTrans(_fromWorkInventTrans);
        // The old to becomes the new from
        newWorkInventTrans.inventDimIdFrom = _fromWorkInventTrans.InventDimIdTo;

        InventDim newSourceInventDimTo = InventDim::find(_fromWorkInventTrans.InventDimIdFrom);
        // Clear location and all dimensions below since we do not know the final destination for this WIT since it is determined by the to-work
        newSourceInventDimTo.clearLocationAndBelowDim(_fromWorkInventTrans.ItemId);
        newSourceInventDimTo = InventDim::findOrCreate(newSourceInventDimTo);

        newWorkInventTrans.InventDimIdTo      = newSourceInventDimTo.InventDimId;
        newWorkInventTrans.WorkId             = _whsWorkLineTo.WorkId;
        newWorkInventTrans.LineNum            = _whsWorkLineTo.LineNum;
        newWorkInventTrans.WorkHasReservation = NoYes::No;

        if (WHSInventoryTransactionConfigurationProvider::shouldUseWarehouseInventoryTransactionStack(newWorkInventTrans.WorkId))
        {
            if (isWHSInventoryTransactionWHSLicensePlateConsolidatorItemSetElementsFlightEnabled)
            {
                // Need to duplicate an item set since it could have been used by warehouse transactions already be archived/deleted before the work is processed.
                newWorkInventTrans.ItemSetId = WHSInventoryItemSetElement::duplicateItemSet(_fromWorkInventTrans.ItemSetId);
            }
            else
            {
                // We are dealing with staged picks here so can simply reuse the item set.
                newWorkInventTrans.ItemSetId = _fromWorkInventTrans.ItemSetId;
            }
        }

        // No insert list since we want this one to be available for subsequent selects
        newWorkInventTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeNextPutWorkLineLocation</Name>
				<Source><![CDATA[
    private void changeNextPutWorkLineLocation()
    {
        WHSWorkLine putWorkLine = WHSWorkLine::find(fromWorkNextOpenPutWorkLine.WorkId, fromWorkNextOpenPutWorkLine.LineNum, true);

        putWorkLine.wmsLocationId = toLocation ? toLocation.wMSLocationId : fromWorkNextOpenPickWorkLine.wMSLocationId;
        putWorkLine.update();

        fromWorkNextOpenPutWorkLine.reread();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>