<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesCalcTax_Sales</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class       SalesCalcTax_Sales
extends     SalesCalcTax
{
    TradeTotalsIQueryRun    lineQueryRun;
    SalesTable      salesTable;
    SalesUpdate     specQty;
    boolean         lineExist;
    SalesLine       prevSalesLine;
    int             numberOfTaxLines;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assessableValue_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns assessable value.
    /// </summary>
    /// <returns>
    /// Returns assessable value zero.
    /// </returns>
    public AmountCur assessableValue_IN()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberOfTaxLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of tax lines for sales order lines included in tax calculation and related charges.
    /// </summary>
    /// <returns>The number of tax lines.</returns>
    internal int getNumberOfTaxLines()
    {
        return numberOfTaxLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>baseAmount_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets base amount.
    /// </summary>
    /// <param name="_rounded">
    /// If 'True', the base amount is rounded.
    /// </param>
    /// <returns>
    /// The base amount.
    /// </returns>
    public container baseAmount_IN(boolean _rounded = true)
    {
        AmountCur  amountCur;
        DiscAmount lineEndDisc;

        if (TaxParameters::checkVatExciseParameters_IN())
        {
            amountCur = salesLine.calcLineAmountExclTax(this.destructiveQty_IN(), this.invoiceDate(), tax);

            if (this.endDisc() && salesLine.endDisc())
            {
                if (!_rounded)
                {
                    lineEndDisc = CurrencyExchangeHelper::amount(amountCur, this.currencyCode()) * this.endDisc() / 100;
                }
                else
                {
                    lineEndDisc = amountCur * this.endDisc() / 100;
                }
            }
        }

        return [lineEndDisc - amountCur, -amountCur, -lineEndDisc];
    }

]]></Source>
			</Method>
			<Method>
				<Name>baseAmountInclTax</Name>
				<Source><![CDATA[
    AmountCur  baseAmountInclTax()
    {
        AmountCur amountCur = this.transLineAmountInclTax();
        if (this.endDisc() && salesLine.endDisc())
        {
            amountcur   -= CurrencyExchange::roundWithRuleType((amountCur * this.endDisc() / 100), this.currencyCode(),CurrencyRoundingRuleType::SalesOrder);
        }
        else if (salesLine.salesTable().SalesType == SalesType::ReturnItem)
        {
            DiscPct endDiscPct = SalesLine::findInventTransId(salesLine.InventTransIdReturn).salesTable().DiscPercent;
            amountcur   -= CurrencyExchange::roundWithRuleType((amountCur * endDiscPct / 100), this.currencyCode(),CurrencyRoundingRuleType::SalesOrder);
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>baseAmountInclTax_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets base amount incl tax.
    /// </summary>
    /// <returns>
    /// The instance of the <c>AmountCur</c> class.
    /// </returns>
    public AmountCur baseAmountInclTax_IN()
    {
        AmountCur amountCur;

        if (TaxParameters::checkVatExciseParameters_IN())
        {
            amountCur = salesLine.calcLineAmount(this.destructiveQty_IN());

            if (this.endDisc() && salesLine.endDisc())
            {
                amountCur -= amountCur * this.endDisc() / 100;
            }
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the tax amount.
    /// </summary>
    /// <param name="_salesTotals">
    /// The sales totals.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxAmountCur</c> class.
    /// </returns>
    [Replaceable]
    public TaxAmountCur calcTax(TradeTotalsBase _salesTotals)
    {
        salesTotals = _salesTotals as SalesTotals;

        TaxSales taxSales = TaxSales::construct(this);

        this.initializeTaxSales(taxSales, _salesTotals);

        if (isAutoChargesSetupSequenceCompoundFeatureEnabled)
        {
            markupBaseValueCalcEngineProvider = MarkupBaseValueCalcEngineProvider::construct();
        }

        TaxAmountCur amountCur = taxSales.calc();

        this.tax(taxSales);

        numberOfTaxLines = taxSales.getNumberOfInsertedTaxLines();

        return -amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTaxSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>TaxSales</c> instance.
    /// </summary>
    /// <param name = "_taxSales">
    /// The <c>TaxSales</c> class to be initialized.
    /// </param>
    /// <param name = "_salesTotals">
    /// The sales totals.
    /// </param>
    protected void initializeTaxSales(TaxSales _taxSales, SalesTotals _salesTotals)
    {
        // <GEEU>
        if (TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
        {
            _taxSales.parmVatRegData_W(this.vatRegData_W());
        }
        // </GEEU>

        // <GEERU>
        _taxSales.parmInvoicePostingType_RU(_salesTotals.parmSalesInvoicePostingType_RU());
        // </GEERU>

        _taxSales.parmSkipLineMarkup(skipLineMarkup);
        _taxSales.parmSkipTableMarkup(skipTableMarkup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcWithholdTax_IN</Name>
				<Source><![CDATA[
    public TaxAmountCur calcWithholdTax_IN(TradeTotalsBase _salesTotals)
    {
        salesTotals = _salesTotals as SalesTotals;

        TaxWithholdCalculation_IN taxWithholdCalcSales = TaxWithholdCalcSales_IN::construct(this);

        TaxAmountCur amountCur = taxWithholdCalcSales.calculateTax();

        this.taxWithholdCalculation_IN(taxWithholdCalcSales);

        return -amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLineQueryRun</Name>
				<Source><![CDATA[
    protected TradeTotalsIQueryRun createLineQueryRun()
    {
        TradeTotalsIContract tradeTotalsIContract = this.parmContract();

        if (tradeTotalsIContract is SalesTotalsTransContract 
            && salesTotals
            && SalesCalcTaxInitEstimateFlight::instance().isEnabled())
        {
            SalesTotalsTransContract salesTotalsTransContract = tradeTotalsIContract;
            salesTotalsTransContract.parmCalcEstimate(salesTotals.parmCalcEstimate());
        }

        return TradeTotalsCommonEnumerator::newFromCommonEnumerator(
                this.parmEnumerableFactory().createLineEnumerableProvider().lineEnumerable(tradeTotalsIContract).getEnumerator());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMarkupQueryRun</Name>
				<Source><![CDATA[
    protected TradeTotalsIQueryRun createMarkupQueryRun(TableId      tableId, RecId        recId)
    {
        return TradeTotalsCommonEnumerator::newFromCommonEnumerator(
                this.parmEnumerableFactory().createMarkupEnumerableProvider().markupEnumerable(tableId, recId, update).getEnumerator());
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    CurrencyCode currencyCode()
    {
        return salesTable.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDate</Name>
				<Source><![CDATA[
    DlvDate deliveryDate()
    {
        return salesLine.deliveryDate(this.invoiceDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDateMarkup</Name>
				<Source><![CDATA[
    DlvDate deliveryDateMarkup()
    {
        if (salesLine)
            return this.deliveryDate();

        return salesTable.deliveryDateDisplay(this.invoiceDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMarkupAutoOriginSource</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal Common getMarkupAutoOriginSource()
    {
        return source;
    }

]]></Source>
			</Method>
			<Method>
				<Name>destructiveQty_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Destructs quantity.
    /// </summary>
    /// <returns>
    /// The instance of the <c>InventQualityOrderQty</c> class.
    /// </returns>
    public InventQualityOrderQty destructiveQty_IN()
    {
        InventQualityOrderQty qty;

        if (TaxParameters::checkVatExciseParameters_IN())
        {
            qty = InventQualityOrderTable::findSalesPurchRefTransId_IN(salesLine.InventTransId, InventTestReferenceType::Sales).Qty;
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentDate</Name>
				<Source><![CDATA[
    public DocumentDate documentDate()
    {
        return DateTimeUtil::date(salesTable.CreatedDateTime) ? DateTimeUtil::date(salesTable.CreatedDateTime) : salesTotals.documentDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doTaxGroupExistsForDocument</Name>
				<Source><![CDATA[
    public boolean doTaxGroupExistsForDocument()
    {
        SalesLine salesLineLocal;
        MarkupTrans markupTransLine;
        boolean taxGroupsExist;

        select firstonly RecId from salesLineLocal
            where salesLineLocal.SalesId == salesTable.SalesId &&
                  salesLineLocal.TaxGroup != '' &&
                  salesLineLocal.TaxItemGroup != '';
        if (salesLineLocal != null)
        {
            taxGroupsExist = true;
        }

        if (!taxGroupsExist)
        {
            if (MarkupTrans::doTaxGroupExistsForMarkup(salesTable.TableId, salesTable.RecId))
            {
                taxGroupsExist = true;
            }
        }

        if (!taxGroupsExist)
        {
            select firstonly RecId from markupTransLine
                where markupTransLine.TaxGroup != '' &&
                      markupTransLine.TaxItemGroup != '' &&
                      !markupTransLine.IsDeleted
            exists join salesLineLocal
                where salesLineLocal.SalesId == salesTable.SalesId &&
                      salesLineLocal.TableId == markupTransLine.TransTableId &&
                      salesLineLocal.RecId == markupTransLine.TransRecId;
            if (markupTransLine != null)
            {
                taxGroupsExist = true;
            }
        }

        return taxGroupsExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDisc</Name>
				<Source><![CDATA[
    DiscPct   endDisc()
    {
        if (salesLine.endDisc())
        {
            return salesLine.salesTable().DiscPercent;
        }

        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    CustExchRate exchRate(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return salesTable.exchRate(_date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    ExchrateSecondary exchRateSecondary(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return salesTable.exchRateSecondary(_date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingCurrencyExchRate</Name>
				<Source><![CDATA[
    internal CustExchRate reportingCurrencyExchRate(date _date = dateNull())
    {
        CustExchRate reportingCurrencyExchRate = salesTable.reportingCurrencyFixedExchangeRate();
        if (!reportingCurrencyExchRate
            && EnableReportingCurrencyExchRateInSOInvoice_WFlight::instance().isEnabled()
            && SalesParameters::find().DateOfExchRate_W != DateOfExchRate_W::PostingDate 
            && _date
            && Ledger::isReportingCurrencyDefined())
        {
            reportingCurrencyExchRate = salesTable.reportingCurrencyExchRate(_date);
        }
        return reportingCurrencyExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesParmTable_RU</Name>
				<Source><![CDATA[
    public SalesParmTable getSalesParmTable_RU()
    {
        SalesParmTable salesParmTable;

        return salesParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesTotals_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets sales totals.
    /// </summary>
    /// <param name="_salesTotals">
    /// The sales totals.
    /// </param>
    /// <returns>
    /// The instance of the <c>SalesTotals</c> class.
    /// </returns>
    public SalesTotals getSalesTotals_IN(SalesTotals _salesTotals)
    {
        return _salesTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursor</Name>
				<Source><![CDATA[
    void  initCursor()
    {
        lineQueryRun = this.createLineQueryRun();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNewLine</Name>
				<Source><![CDATA[
    public boolean isNewLine()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxIncluded</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether tax is included in the item price for the sales document.
    /// </summary>
    /// <returns>
    ///    true if tax is included in the item price; otherwise false.
    /// </returns>
    public boolean isTaxIncluded()
    {
        return salesTable.InclTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineEndDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the end discount amount for sales order line.
    /// </summary>
    /// <param name="baseAmount">
    /// The base amount for the discount calculation.
    /// </param>
    /// <param name="_obsoleteParameterRounded">
    /// Parameter obsoleteParameterRounded is obsolete and not used.
    /// </param>
    /// <returns>
    /// The end discount amount.
    /// </returns>
    public DiscAmount lineEndDisc(TaxBaseCur baseAmount, boolean _obsoleteParameterRounded = true)
    {
        DiscAmount lineEndDisc;

        if (salesTotals)
        {
            lineEndDisc = salesTotals.lineEndDiscBalance(salesLine.RecId);
        }

        if (!lineEndDisc && this.endDisc() && salesLine.endDisc())
        {
            lineEndDisc = baseAmount * this.endDisc() / 100;
        }

        return lineEndDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineExist</Name>
				<Source><![CDATA[
    boolean lineExist()
    {
        return lineExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineQueryRunGet</Name>
				<Source><![CDATA[
    protected Common lineQueryRunGet(
        TradeTotalsIQueryRun    _lineQueryRun)
    {
        TradeTotalsCommonEnumerator commonEnumerator = _lineQueryRun as TradeTotalsCommonEnumerator;
        return commonEnumerator.parmCommonEnumerator().current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineQueryRunNext</Name>
				<Source><![CDATA[
    protected boolean lineQueryRunNext(
        TradeTotalsIQueryRun    _lineQueryRun)
    {
        TradeTotalsCommonEnumerator commonEnumerator = _lineQueryRun as TradeTotalsCommonEnumerator;
        return commonEnumerator.parmCommonEnumerator().moveNext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupDefaultDimension</Name>
				<Source><![CDATA[
    DimensionDefault markupDefaultDimension()
    {
        if (salesLine)
            return salesLine.DefaultDimension;

        return salesTable.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupQueryRunGet</Name>
				<Source><![CDATA[
    protected Common markupQueryRunGet(TradeTotalsIQueryRun _markupQueryRun)
    {
        TradeTotalsCommonEnumerator commonEnumerator = _markupQueryRun as TradeTotalsCommonEnumerator;

        MarkupTrans markupTransStatement = commonEnumerator.parmCommonEnumerator().current();

        return markupTransStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupQueryRunNext</Name>
				<Source><![CDATA[
    protected boolean markupQueryRunNext(TradeTotalsIQueryRun _markupQueryRun)
    {
        TradeTotalsCommonEnumerator queryRun = _markupQueryRun as TradeTotalsCommonEnumerator;
        return queryRun.parmCommonEnumerator().moveNext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>maximumRetailPrice_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns Maximum retail price.
    /// </summary>
    /// <returns>
    /// Returns Maximum retail price zero.
    /// </returns>
    public MaximumRetailPrice_IN maximumRetailPrice_IN()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void  new(Common        _source,
              SalesUpdate   _specQty)
    {
        super(_source);

        if (_source.TableId == tableNum(SalesTable))
            salesTable      = _source;

        specQty         = _specQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    Common nextLine()
    {
        prevSalesLine = salesLine.data();
        salesLine = null;
        lineExist = false;

        while (this.lineQueryRunNext(lineQueryRun))
        {
            salesLine = this.lineQueryRunGet(lineQueryRun);

            if (salesLine)
            {
                lineExist = true;
                this.initCursorMarkupLine(salesLine.TableId, salesLine.RecId);
                break;
            }
        }

        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationAccount</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount operationAccount()
    {
        return salesLine.accountSalesLedgerDimension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationAccountMarkup</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount operationAccountMarkup()
    {
        LedgerDimensionDefaultAccount ledgerAccount;

        switch (markupTrans.markupTable().VendType)
        {
            case MarkupType::Item :
                if (salesLine)
                {
                    ledgerAccount = this.operationAccount();
                }
                break;

            case MarkupType::LedgerAccount :
                ledgerAccount = markupTrans.markupTable().parmVendorLedgerDimension();
                break;

            case MarkupType::CustVend :
                ledgerAccount = CustLedgerAccounts::summaryLedgerDimension(salesTable.InvoiceAccount,salesTable.PostingProfile);
                break;
        }

        return ledgerAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationPosting</Name>
				<Source><![CDATA[
    LedgerPostingType operationPosting()
    {
        return salesLine.postingSales();
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationPostingMarkup</Name>
				<Source><![CDATA[
    LedgerPostingType operationPostingMarkup()
    {
        LedgerPostingType ledgerPostingType;
        switch (markupTrans.markupTable().VendType)
        {
            case MarkupType::Item           :   if (salesLine)
                                                    ledgerPostingType = this.operationPosting();
                                                break;

            case MarkupType::LedgerAccount  :   ledgerPostingType = markupTrans.markupTable().VendPosting;
                                                break;

            case MarkupType::CustVend       :   ledgerPostingType = LedgerPostingType::CustBalance;
                                                break;
        }

        return ledgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderLine_orderTable</Name>
				<Source><![CDATA[
    public Common orderLine_orderTable()
    {
        return salesLine.salesTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContract</Name>
				<Source><![CDATA[
    abstract protected TradeTotalsIContract parmContract()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSource</Name>
				<Source><![CDATA[
    public Common getSource()
    {
        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMCRCSForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets or sets a <c>boolean</c> value indicating if the mcrCSForm is passed to the next level class.
    /// </summary>
    /// <param name="_mcrCSForm">
    ///     A <c>boolean</c> value indicating if the mcrCSForm is passed to the next level class.
    /// </param>
    /// <returns>
    ///     A <c>boolean</c> value indicating if the mcrCSForm is passed to the next level class.
    /// </returns>
    public boolean parmMCRCSForm(boolean _mcrCSForm = false)
    {
        if (!prmisdefault(_mcrCSForm))
        {
            salesTotals.parmMCRCSForm(_mcrCSForm);
        }
        return salesTotals.parmMCRCSForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTableRecID</Name>
				<Source><![CDATA[
    RecId  salesTableRecID()
    {
        return salesTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesTotals_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets sales totals.
    /// </summary>
    /// <param name="_salesTotals">
    /// The sales totals.
    /// </param>
    public void setSalesTotals_IN(SalesTotals _salesTotals)
    {
        salesTotals = _salesTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxCashDiscPercent</Name>
				<Source><![CDATA[
    DiscPct taxCashDiscPercent()
    {
        if (TaxParameters::find().CashDiscOnInvoice)
            return salesTable.CashDiscPercent;
        else
            return salesTotals.taxCashDiscPercent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmount</Name>
				<Source><![CDATA[
    AmountCur  transLineAmount()
    {
        AmountCur   transLineAmount;

        if (markupTrans.MarkupCategory == MarkupCategory::InterCompanyPercent)
        {
            transLineAmount = salesLine.interCompanyLineAmount(this.transQty(), this.invoiceDate(), tax);
        }
        else
        {
            transLineAmount = salesLine.calcLineAmount(this.transQty());
        }

        return transLineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmountInclTax</Name>
				<Source><![CDATA[
    AmountCur  transLineAmountInclTax()
    {
        return salesLine.calcLineAmount(this.transQty());
    }

]]></Source>
			</Method>
			<Method>
				<Name>transPcsPrice</Name>
				<Source><![CDATA[
    PriceCur transPcsPrice()
    {
        return salesLine.taxPcsPrice(this.invoiceDate(), tax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSpecQty</Name>
				<Source><![CDATA[
    internal SalesUpdate getSpecQty()
    {
        return specQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    SalesQty  transQty()
    {
        custInvoiceTrans    custInvoiceTrans;

        if (salesLine.RecId == 0)
        {
            return salesLine.SalesQty;
        }

        if (salesLine.canInvoiceOrderLineFromCurrentSalesStatus())
        {
            return SalesQuantity::construct(DocumentStatus::Invoice).calcSalesQty(salesLine, specQty);
        }

        // Set the quantity for invoiced sales orders when called from customer service form
        if (salestotals && salestotals.parmMCRCSForm())
        {
            select sum(qty) from custInvoiceTrans
                where custInvoiceTrans.InventTransId == salesLine.InventTransId;

            return custInvoiceTrans.qty;
        }

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
             && TaxParameters::find().Customs_IN)
        {
            if (salesLine.SalesStatus == SalesStatus::Invoiced &&
                SalesTable::find(salesLine.SalesId).CustomsExportOrder_IN == NoYes::Yes &&
                CustomsExportOrderTable_IN::existSalesId(salesLine.SalesId))
            {
                return SalesQuantity::construct(DocumentStatus::ShippingBill_IN).calcSalesQty(salesLine, specQty);
            }
        }
        // </GIN>

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTaxGroup</Name>
				<Source><![CDATA[
    TaxGroup    transTaxGroup()
    {
        return salesLine.TaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTaxItemGroup</Name>
				<Source><![CDATA[
    TaxItemGroup    transTaxItemGroup()
    {
        return salesLine.TaxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTransId</Name>
				<Source><![CDATA[
    TradeInventTransId  transTransId()
    {
        return salesLine.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>triangulation</Name>
				<Source><![CDATA[
    EUROTriangulation  triangulation(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return salesTable.euroTriangulation(_date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>useAndConsumption_BR</Name>
				<Source><![CDATA[
    public boolean useAndConsumption_BR()
    {
        return salesTable.salesTable_BR().CustFinalUser_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatRegData_W</Name>
				<Source><![CDATA[
    public container vatRegData_W()
    {
        DocumentDate           documentDate;
        PlCustVendName         custVendName;
        VATNum                 vatNum;
        Addressing             addressing;
        PlTaxPeriodPaymentCode  taxPeriodPaymentCode;
        VatDueDate_W vatDate      = this.projInvoiceParmTable().VatDueDate_W;
        CzPostponeVAT postponeVAT;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
        {
            postponeVAT = (this.projInvoiceParmTable().PostponeVAT) && salesTable.isCreditNote_CZ();
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            taxPeriodPaymentCode = salesTable.TaxPeriodPaymentCode_PL;
            CustTable custTable  = CustTable::find(salesTable.InvoiceAccount);
            custVendName         = custTable.name();
            addressing           = custTable.address();
            if (salesTable.VATNum)
            {
                vatNum = salesTable.VATNum;
            }
            else
            {
                vatNum = custTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, this.projInvoiceParmTable().DocumentDate_W);
            }
        }

        return [ vatDate,
                 documentDate,
                 custVendName,
                 vatNum,
                 addressing,
                 taxPeriodPaymentCode,
                 postponeVAT,
                 NoYes::No];
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static SalesCalcTax construct(Common            _source,
                                  SalesUpdate       _specQty,
                                  AccountOrder      _sumBy          = AccountOrder::None,
                                  ParmId            _parmId         = '',
                                  SalesId           _sumSalesId     = '',
                                  DocumentStatus    _documentStatus = DocumentStatus::None)
    {
        if (_parmId == '')
            return new SalesCalcTax_Trans(_source, _specQty);

        return new SalesCalcTax_ParmTrans(_source, _specQty, _sumBy, _parmId, _sumSalesId, _documentStatus);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>