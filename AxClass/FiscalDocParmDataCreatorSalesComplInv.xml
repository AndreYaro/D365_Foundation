<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalDocParmDataCreatorSalesComplInv</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is reponsible for generating a <c>FiscalDocumentParmData_BR</c> object
/// model for a sales complementary invoice posting scenario.
/// </summary>
class FiscalDocParmDataCreatorSalesComplInv extends FiscalDocumentParmDataCreator_BR
{
    FiscalDocument_BR               origFiscalDocument;
    SalesComplementaryInvoiceHeader complInvoice;
    CustTable                       custTable;
    FiscalDocumentType_BR           fiscalDocType;
    SalesComplInvCalcTotals         calcTotals;
    CustTrans                       custTrans;

    AmountMST                       orderBalance;
    private TaxPovertyFundSetupHeading_BR taxPovertyFundSetupHeading;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canHavePresumedTaxes</Name>
				<Source><![CDATA[
    protected boolean canHavePresumedTaxes()
    {
        return origFiscalDocument.Direction == FiscalDocDirection_BR::Outgoing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalReferenceSourceCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns currency code of fiscal reference
    /// </summary>
    /// <returns>
    /// The currency code
    /// </returns>
    protected CurrencyCode fiscalReferenceSourceCurrencyCode()
    {
        return complInvoice.Currency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalReferenceSourceRecId</Name>
				<Source><![CDATA[
    protected RecId fiscalReferenceSourceRecId()
    {
        return complInvoice.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalReferenceSourceTableId</Name>
				<Source><![CDATA[
    protected TableId fiscalReferenceSourceTableId()
    {
        return complInvoice.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCustVendTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the fiscal document in context has customer-vendor transactions.
    /// </summary>
    /// <returns>
    /// true if the fiscal document has customer-vendor transactions; otherwise, false.
    /// </returns>
    protected boolean hasCustVendTrans()
    {
        return CustTrans != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendTransParmData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>FiscalDocumentCustVendTransParmData_BR</c> class that represents
    /// a customer-vendor transaction that is associated with the fiscal document.
    /// </summary>
    /// <returns>
    /// An instance of the <c>FiscalDocumentCustVendTransParmData_BR</c> class.
    /// </returns>
    protected FiscalDocumentCustVendTransParmData_BR initCustVendTransParmData()
    {
        List                installments = new List(Types::Class);
        CustPaymSched       custPaymSched;
        CustPaymSchedLine   custPaymSchedLine;

        FiscalDocumentCustVendTransParmData_BR custVendTransParmData = new FiscalDocumentCustVendTransParmData_BR();
        FiscalDocumentInstallmentParmData_BR installmentParmData;

        custVendTransParmData.parmAmount(custTrans.AmountMST);
        custVendTransParmData.parmDocumentType(CustPaymModeTable::find(complInvoice.CustPaymModeTable).PrimaryMethod_BR);
        custVendTransParmData.parmDueDate(custTrans.DueDate);

        while select DueDate, DueAmount from custPaymSchedLine
            join recId from custPaymSched
            where custPaymSchedLine.ParentRecID == custPaymSched.RecId
                && custPaymSched.ExtRecId == complInvoice.RecId
                && custPaymSched.ExtTableId == complInvoice.TableId
        {
            installmentParmData = new FiscalDocumentInstallmentParmData_BR();

            installmentParmData.parmDueDate(custPaymSchedLine.DueDate);
            installmentParmData.parmAmount(CurrencyExchangeHelper::amountCur2MST(custPaymSchedLine.DueAmount, complInvoice.Currency, complInvoice.ExchRate()));

            custVendTransParmData.addInstallment(installmentParmData);
        }

        return custVendTransParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeaderParmData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>FiscalDocumentParmData_BR</c> class that represents the fiscal
    /// document header information.
    /// </summary>
    /// <returns>
    /// An instance of the <c>FiscalDocumentParmData_BR</c> class.
    /// </returns>
    protected FiscalDocumentParmData_BR initHeaderParmData()
    {
        FiscalDocumentParmData_BR   fiscalDocument;
        FiscalDocumentSeries_BR     series;

        fiscalDocument = new FiscalDocumentParmData_BR();
        series         = FiscalDocumentType_BR::getFiscalDocumentSeries(fiscalDocType.RecId);

        fiscalDocument.parmAccountingDate(complInvoice.DocumentDate);
        fiscalDocument.parmComplementaryType(complInvoice.ComplementaryType);
        fiscalDocument.parmComplementedFiscalDocument(complInvoice.ComplementedFiscalDocument);
        fiscalDocument.parmDirection(origFiscalDocument.Direction);
        fiscalDocument.parmFinalUser(complInvoice.CustFinalUser);
        if (fiscalDocument.parmFinalUser())
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00087, funcName());
        }
        fiscalDocument.parmPresenceType(EFDocPresenceType_BR::DoesNotApply);
        fiscalDocument.parmPaymentMethod(origFiscalDocument.PaymentMethod);
        fiscalDocument.parmPaymentAmount(complInvoice.TotalAmount);
    
        fiscalDocument.parmFiscalDocumentAccountType(CustVendType_BR::Customer);
        fiscalDocument.parmFiscalDocumentAccountNum(complInvoice.CustTable);
        fiscalDocument.parmFiscalDocumentDate(complInvoice.DocumentDate);
        fiscalDocument.parmFiscalDocumentType(fiscalDocType);
        fiscalDocument.parmFiscalDocumentIssuer(FiscalDocumentIssuer_BR::OwnEstablishment);

        fiscalDocument.parmFiscalDocumentNumber(this.getInvoiceIdWithoutSeriesPrefix(complInvoice.FiscalDocumentNumber, series));
        fiscalDocument.parmFiscalDocumentSeries(series);

        fiscalDocument.parmSpecie(fiscalDocType.FiscalDocumentSpecie);
        fiscalDocument.parmModel(fiscalDocType.FiscalDocumentModel);

        fiscalDocument.parmFiscalEstablishmentID(origFiscalDocument.FiscalEstablishment);
        fiscalDocument.parmFiscalEstablishmentCCMNum(origFiscalDocument.FiscalEstablishmentCCMNum);
        fiscalDocument.parmFiscalEstablishmentCNPJCPF(origFiscalDocument.FiscalEstablishmentCNPJCPF);
        fiscalDocument.parmFiscalEstablishmentIE(origFiscalDocument.FiscalEstablishmentIE);
        fiscalDocument.parmFiscalEstablishmentName(origFiscalDocument.FiscalEstablishmentName);
        fiscalDocument.parmFiscalEstablishmentPostalAddress(origFiscalDocument.FiscalEstablishmentPostalAddress);
        fiscalDocument.parmFiscalEstablishmentPhone(origFiscalDocument.FiscalEstablishmentPhone);

        fiscalDocument.parmThirdPartyCCMNum(origFiscalDocument.ThirdPartyCCMNum);
        fiscalDocument.parmThirdPartyCNPJCPF(origFiscalDocument.ThirdPartyCNPJCPF);
        fiscalDocument.parmThirdPartyIE(origFiscalDocument.ThirdPartyIE);
        fiscalDocument.parmThirdPartyName(origFiscalDocument.ThirdPartyName);
        fiscalDocument.parmThirdPartyPostalAddress(origFiscalDocument.ThirdPartyPostalAddress);
        fiscalDocument.parmThirdPartyPhone(origFiscalDocument.ThirdPartyPhone);
        fiscalDocument.parmThirdPartyEmail(origFiscalDocument.ThirdPartyEmail);
        fiscalDocument.parmThirdPartyIcmsContributor(origFiscalDocument.ThirdPartyICMSContributor);
        fiscalDocument.parmFreightChargeTerms(FiscalDocumentFreightTerms_BR::Nofreight);

        fiscalDocument.parmVoucher(complInvoice.LedgerVoucher);
        fiscalDocument.parmRefRecId(complInvoice.RecId);
        fiscalDocument.parmRefTableId(complInvoice.TableId);
        fiscalDocument.parmTotalAmount(complInvoice.TotalAmount);

        fiscalDocument.parmListOfTextsParmData(this.addTexts(complInvoice));
        this.initTagsReplacer(fiscalDocument.parmTextTagReplacer());

        return fiscalDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLinesParmData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a list of instances of the <c>FiscalDocumentLineParmData_BR</c> class that represent
    /// the fiscal document lines.
    /// </summary>
    /// <returns>
    /// A list of instances of the <c>FiscalDocumentLineParmData_BR</c> class.
    /// </returns>
    protected List initLinesParmData()
    {
        FiscalDocumentLineParmData_BR fiscalDocLine;
        SalesComplementaryInvoiceLine complInvLine;
        FiscalDocumentLine_BR originalFiscalDocumentLine;
        InventTable inventTable;

        List ret = new List(Types::Class);

        LogisticsPostalAddress logisticsPostalAddress = LogisticsPostalAddress::findRecId(origFiscalDocument.FiscalEstablishmentPostalAddress);
        TaxBenefitCodeSetupHeading_BR taxBenefitCodeSetupHeading = TaxBenefitCodeSetupHeading_BR::findByCountryRegionIdAndStateId(logisticsPostalAddress.CountryRegionId, logisticsPostalAddress.State);

        while select complInvLine
            where complInvLine.SalesComplementaryInvoiceHeader == complInvoice.RecId
            join Origin, ServiceCode, FiscalClassification, ItemId, ItemType, FciNumber, FinancialLedgerDimension, Unit from originalFiscalDocumentLine
            where originalFiscalDocumentLine.RecId == complInvLine.OriginalFiscalDocumentLine
        {
            inventTable = InventTable::find(complInvLine.ItemCode);
            // Skip complementary lines with zero amount
            if (complInvoice.ComplementaryType == InvoiceComplementaryType_BR::Price &&
                complInvLine.Amount == 0)
            {
                continue;
            }
            else if (complInvoice.ComplementaryType == InvoiceComplementaryType_BR::Tax &&
                     complInvLine.AdditionalIPIAmount == 0 && complInvLine.AdditionalICMSAmount == 0)
            {
                continue;
            }

            fiscalDocLine = new FiscalDocumentLineParmData_BR();

            fiscalDocLine.parmCFOP(CFOPTable_BR::find(complInvLine.CFOPTable_BR).CFOPId);
            fiscalDocLine.parmDescription(complInvLine.Description);
            fiscalDocLine.parmLineAmount(complInvLine.Amount);

            fiscalDocLine.parmFiscalClassification(originalFiscalDocumentLine.FiscalClassification);
            fiscalDocLine.parmItemId(complInvLine.ItemCode);
            fiscalDocLine.parmItemType(originalFiscalDocumentLine.ItemType);
            fiscalDocLine.parmOrigin(originalFiscalDocumentLine.Origin);
            fiscalDocLine.parmServiceCode(originalFiscalDocumentLine.ServiceCode);
            fiscalDocLine.parmQuantity(1);
            fiscalDocLine.parmUnit(originalFiscalDocumentLine.Unit);
            fiscalDocLine.parmFciNumber(originalFiscalDocumentLine.FCINumber);
            fiscalDocLine.parmScaleIndicator(inventTable.ScaleIndicator_BR);
            fiscalDocLine.parmCNPJ(inventTable.CNPJ_BR);
            
            fiscalDocLine.parmBenefitCode(TaxBenefitCodeSetupData_BR::findAdjustmentCode(
                                            taxBenefitCodeSetupHeading.RecId,
                                            complInvLine.ItemCode,
                                            CustVendType_BR::Customer,
                                            complInvoice.CustTable,
                                            fiscalDocLine.parmCFOP(),
                                            SalesPurchTrntype_BR::Sales));
            fiscalDocLine.parmAdjustmentCode53(TaxBenefitCodeSetupData_BR::findAdjustmentCode53(
                                                taxBenefitCodeSetupHeading.RecId,
                                                complInvLine.ItemCode,
                                                CustVendType_BR::Customer,
                                                complInvoice.CustTable,
                                                fiscalDocLine.parmCFOP(),
                                                SalesPurchTrntype_BR::Sales));
            fiscalDocLine.parmObservationCode(TaxBenefitCodeSetupData_BR::findObservationCode(
                                                taxBenefitCodeSetupHeading.RecId,
                                                complInvLine.ItemCode,
                                                CustVendType_BR::Customer,
                                                complInvoice.CustTable,
                                                fiscalDocLine.parmCFOP(),
                                                SalesPurchTrntype_BR::Sales));

            fiscalDocLine.parmFinancialLedgerDimension(FiscalDocParmDataCreatorSalesComplInv::getFinancialDimension(complInvLine, originalFiscalDocumentLine));

            fiscalDocLine.parmRefRecId(complInvLine.RecId);
            fiscalDocLine.parmRefTableId(complInvLine.TableId);

            fiscalDocLine.parmListOfTextsParmData().appendList(this.addTexts(complInvLine));
            this.initTagsReplacer(fiscalDocLine.parmTextTagReplacer());

            if (this.shouldHaveApproximateTaxDescription())
            {
                fiscalDocLine.parmApproximateTaxAmount     (round(InventTable::find(complInvLine.ItemCode).approximateTaxValue_BR() * complInvLine.Amount / 100, 0.01));
                totalApproxTaxAmount += fiscalDocLine.parmApproximateTaxAmount();
                orderBalance += complInvLine.Amount;

                fiscalDocLine.parmListOfTextsParmData().appendList(this.addApproximateTaxTextLine(InventTable::find(complInvLine.ItemCode), fiscalDocLine));
            }

            ret.addEnd(fiscalDocLine);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfInstallments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a list of instances of the <c>FiscalDocumentInstallmentParmData_BR</c> class that
    /// represent the fiscal document installments.
    /// </summary>
    /// <returns>
    /// A list of instances of the <c>FiscalDocumentInstallmentParmData_BR</c> class.
    /// </returns>
    protected List initListOfInstallments()
    {
        int installmentNum;

        List list = new List(Types::Class);

        FiscalDocumentInstallmentParmData_BR installment;

        CustPaymSched       custPaymSched;
        CustPaymSchedLine   custPaymSchedLine;

        select firstonly recId from custPaymSched
            where custPaymSched.ExtTableId == complInvoice.TableId
                && custPaymSched.ExtRecId == complInvoice.RecId;

        if (custPaymSched)
        {
            while select DueDate, DueAmount from custPaymSchedLine
                    where CustPaymSchedLine.ParentRecID == custPaymSched.RecId
            {
                installmentNum++;

                installment = new FiscalDocumentInstallmentParmData_BR();

                installment.parmDueDate(custPaymSchedLine.DueDate);
                installment.parmAmount(CurrencyExchangeHelper::amountCur2MST(custPaymSchedLine.DueAmount, complInvoice.Currency, complInvoice.ExchRate()));
                installment.parmInstallmentNumber(installmentNum);

                list.addEnd(installment);
            }
        }

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfShipmentStatParmData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a list of instances of the <c>FiscalDocumentParmData_BR</c> class that represent the
    /// shipment specifications for a specified fiscal document line.
    /// </summary>
    /// <param name="_fiscalDocumentParmData">
    /// An instance of the <c>FiscalDocumentParmData_BR</c> class that represents a fiscal document line.
    /// </param>
    /// <returns>
    /// A list of instances of the <c>FiscalDocumentParmData_BR</c> class.
    /// </returns>
    protected List initListOfShipmentStatParmData(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        List ret = new List(Types::Class);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTagsReplacer</Name>
				<Source><![CDATA[
    private void initTagsReplacer(FiscalDocumentTextTagReplacer_BR _replacer)
    {
        _replacer.parmCustomer_Address(custTable.postalAddress().Address);
        _replacer.parmCustomer_CnpjCpf(custTable.CNPJCPFNum_BR);
        _replacer.parmCustomer_IE(custTable.IENum_BR);
        _replacer.parmCustomer_Name(custTable.name());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxTransParmDataFromTaxTrans</Name>
				<Source><![CDATA[
    protected void initTaxTransParmDataFromTaxTrans(FiscalDocumentParmData_BR _fiscalDocumentParmData,
        FiscalDocumentTaxTransParmData_BR _fiscalDocumentTaxTransParmData,
        TaxTrans _taxTrans,
        TaxTrans_BR _taxTrans_BR)
    {
        super(_fiscalDocumentParmData,
              _fiscalDocumentTaxTransParmData,
              _taxTrans,
              _taxTrans_BR);

        if (complInvoice.ComplementaryType == InvoiceComplementaryType_BR::Tax)
        {
            _fiscalDocumentTaxTransParmData.parmTaxBaseAmount(0);
            _fiscalDocumentTaxTransParmData.parmTaxBaseAmountExempt(0);
            _fiscalDocumentTaxTransParmData.parmTaxBaseAmountOther(0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(SalesComplementaryInvoiceHeader _complementaryInvoiceHeader, CustTrans _custTrans)
    {
        super();

        complInvoice = _complementaryInvoiceHeader;
        custTable = CustTable::find(complInvoice.CustTable);
        fiscalDocType = FiscalDocumentType_BR::findRecId(complInvoice.FiscalDocumentType_BR);
        origFiscalDocument = FiscalDocument_BR::find(complInvoice.ComplementedFiscalDocument);
        custTrans = _custTrans;

        this.initTaxPovertySetupHeading(origFiscalDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareFiscalDocumentText</Name>
				<Source><![CDATA[
    protected void prepareFiscalDocumentText(FiscalDocumentParmData_BR  _fiscalDocumentParmData)
    {
        this.initTagsReplacer(_fiscalDocumentParmData.parmTextTagReplacer());

        _fiscalDocumentParmData.parmListOfTextsParmData().appendList(this.addApproximateTaxTextHeader(orderBalance));

        super(_fiscalDocumentParmData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPovertyFundTaxForLine</Name>
				<Source><![CDATA[
    protected void setPovertyFundTaxForLine(FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData,
                                            FiscalDocumentTaxPovertyFundCalc_BR _fiscalDocumentTaxPovertyFundCalc)
    {
        SalesComplementaryInvoiceLine       salesComplementaryInvoiceLine;
        ListEnumerator                      taxesEnumerator;
        FiscalDocumentTaxTransParmData_BR   fiscalDocumentTaxTransParmData;

        if (complInvoice.ComplementaryType == InvoiceComplementaryType_BR::Tax)
        {
            select firstonly RecId, TableId, AdditionalPovertyFundAmount from salesComplementaryInvoiceLine
                where salesComplementaryInvoiceLine.RecId == _fiscalDocumentLineParmData.parmRefRecId()
                    && salesComplementaryInvoiceLine.TableId == _fiscalDocumentLineParmData.parmRefTableId();

            taxesEnumerator = _fiscalDocumentLineParmData.parmListOfTaxes().getEnumerator();
            while (taxesEnumerator.moveNext())
            {
                fiscalDocumentTaxTransParmData = taxesEnumerator.current();
                if (fiscalDocumentTaxTransParmData.parmType() == TaxType_BR::ICMS)
                {
                    fiscalDocumentTaxTransParmData.parmTaxPovertyFundPercentage(0);

                    if (fiscalDocumentTaxTransParmData.parmFiscalValue() == TaxFiscalValue_BR::WithoutCreditDebitExempt)
                    {
                        fiscalDocumentTaxTransParmData.parmTaxPovertyFundAmount(0);
                    }
                    else
                    {
                        fiscalDocumentTaxTransParmData.parmTaxPovertyFundAmount(salesComplementaryInvoiceLine.AdditionalPovertyFundAmount);

                        if (salesComplementaryInvoiceLine.AdditionalPovertyFundAmount)
                        {
                            TaxPovertyFundSetupData_BR taxPovertyFundSetupData = TaxPovertyFundSetupData_BR::find(
                                taxPovertyFundSetupHeading.RecId,
                                _fiscalDocumentLineParmData.parmItemId(),
                                CustVendType_BR::Customer,
                                complInvoice.CustTable,
                                complInvoice.DocumentDate);
                            fiscalDocumentTaxTransParmData.parmTaxPovertyFundPercentage(taxPovertyFundSetupData.TaxPercentage);
                        }
                    }
                }
            }
        }
        else
        {
            super(_fiscalDocumentLineParmData, _fiscalDocumentTaxPovertyFundCalc);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPresumedTaxForLine</Name>
				<Source><![CDATA[
    protected void setPresumedTaxForLine(
        FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData,
        FiscalDocumentPresumedTaxCalc_BR _fiscalDocumentPresumedTaxCalc)
    {
        _fiscalDocumentPresumedTaxCalc.parmIsSalesComplement(true);
        super(_fiscalDocumentLineParmData, _fiscalDocumentPresumedTaxCalc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldHaveApproximateTaxDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if the approximate tax description should be written.
    /// </summary>
    /// <returns>
    /// True if the text that describe the approximate taxes should be exported, false otherwise.
    /// </returns>
    public boolean shouldHaveApproximateTaxDescription()
    {
        RecId            SalesPurchOperationType;
        CustInvoiceJour  custInvoiceJour;

        if (brazilParameters.ApproxTaxPrintOnlyFinalUser && !complInvoice.CustFinalUser)
        {
            return false;
        }

        if (complInvoice.ComplementaryType != InvoiceComplementaryType_BR::Price)
        {
            return false;
        }

        if (origFiscalDocument.RefTableId == tableNum(custInvoiceJour))
        {
            custInvoiceJour = origFiscalDocument.findRefRecord();

            SalesPurchOperationType = custInvoiceJour.custInvoiceJour_BR().SalesPurchOperationType_BR;

            if ((!SalesPurchOperationType || SalesPurchOperationType_BR::find(SalesPurchOperationType).CreateFinancialTrans == NoYes::Yes))
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFDPresumedSourceDocumentType</Name>
				<Source><![CDATA[
    protected FDPresumedSourceDocumentType_BR getFDPresumedSourceDocumentType()
    {
        return FDPresumedSourceDocumentType_BR::SalesComplement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalDocumentPurpose</Name>
				<Source><![CDATA[
    protected FiscalDocumentPurpose_BR getFiscalDocumentPurpose()
    {
        FiscalDocumentPurpose_BR    fiscalDocumentPurpose;

        if (complInvoice.ComplementaryType == InvoiceComplementaryType_BR::Price)
        {
            fiscalDocumentPurpose = FiscalDocumentPurpose_BR::PriceComplement;
        }
        else
        {
            fiscalDocumentPurpose = FiscalDocumentPurpose_BR::TaxComplement;
        }

        return fiscalDocumentPurpose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFinancialDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the financial dimension for the given SalesComplementaryInvoiceLine
    /// </summary>
    /// <param name="_salesComplementaryInvoiceLine">
    /// The SalesComplementaryInvoiceLine record
    /// </param>
    /// <param name="_originalFiscalDocumentLine">
    /// The original FiscalDocumentLine_BR record
    /// </param>
    /// <returns>
    /// The financial dimension record id
    /// </returns>
    public static RecId getFinancialDimension(SalesComplementaryInvoiceLine _salesComplementaryInvoiceLine, FiscalDocumentLine_BR _originalFiscalDocumentLine = null)
    {
        FiscalDocumentLine_BR originalFiscalDocumentLine = _originalFiscalDocumentLine;

        if (!originalFiscalDocumentLine)
        {
            select firstonly FinancialLedgerDimension from originalFiscalDocumentLine
                where originalFiscalDocumentLine.RecId == _salesComplementaryInvoiceLine.OriginalFiscalDocumentLine;
        }

        return originalFiscalDocumentLine.FinancialLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxPovertySetupHeading</Name>
				<Source><![CDATA[
    private void initTaxPovertySetupHeading(FiscalDocument_BR _fiscalDocument)
    {
        if (complInvoice.ComplementaryType == InvoiceComplementaryType_BR::Tax)
        {
            LogisticsPostalAddress povertyFundStatePostalAddress;
            if (_fiscalDocument.Direction == FiscalDocDirection_BR::Incoming)
            {
                povertyFundStatePostalAddress = LogisticsPostalAddress::findRecId(_fiscalDocument.FiscalEstablishmentPostalAddress);
            }
            else
            {
                povertyFundStatePostalAddress = LogisticsPostalAddress::findRecId(_fiscalDocument.ThirdPartyPostalAddress);
            }
            taxPovertyFundSetupHeading = TaxPovertyFundSetupHeading_BR::findByCountryRegionIdAndStateId(povertyFundStatePostalAddress.CountryRegionId, povertyFundStatePostalAddress.State);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>