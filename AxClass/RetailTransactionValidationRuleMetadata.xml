<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionValidationRuleMetadata</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailTransactionValidationRuleMetadata</c> class holds the metadata for rules that exist in the system.
/// This metadata is used every time we need to execute the rule.
/// </summary>
[System.Diagnostics.DebuggerDisplayAttribute("{toString()}")]
internal final class RetailTransactionValidationRuleMetadata implements SysPackable
{
    internal const int CurrentSerializationVersion = 2;

    // Persistent properties
    private ClassId classId;
    private MethodName methodName;
    private str description;
    private RetailTransactionValidationRuleType ruleType;
    private boolean enabled;
    private Set applicableToTypes;

    // Transient properties
    private ClassName className;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        applicableToTypes = new Set(Types::Enum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <c>RetailTransactionValidationRuleMetadata</c>.
    /// </summary>
    /// <param name = "_classId">The ClassId for the class that holds the code for the rule.</param>
    /// <param name = "_methodName">The name of the method to be executed when the rule is invoked.</param>
    /// <param name = "_description">A friendly short description of the rule.</param>
    /// <param name = "_helpText">A friendly help text of the rule.</param>
    /// <param name = "_ruleType">The rule type.<param>
    /// <param name = "_enabled">A flag indicating if this rule is enabled.</param>
    /// <param name = "_applicableToTypes">Set containing the transaction types that should be validated by the rule.</param>
    /// <returns>A <c>RetailTransactionValidationRuleMetadata</c> object.</returns>
    public static RetailTransactionValidationRuleMetadata construct(ClassId _classId, MethodName _methodName, str _description, RetailTransactionValidationRuleType _ruleType, boolean _enabled, Set _applicableToTypes)
    {
        RetailTransactionValidationRuleMetadata metadata = new RetailTransactionValidationRuleMetadata();

        metadata.classId = _classId;
        metadata.className = classId2Name(_classId);
        metadata.methodName = _methodName;
        metadata.description = _description;
        metadata.ruleType = _ruleType;
        metadata.enabled = _enabled;
        metadata.applicableToTypes = _applicableToTypes;

        return metadata;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getClassId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the class id that holds the code for the rule.
    /// </summary>
    /// <returns>The class id.</returns>
    public ClassId getClassId()
    {
        return classId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getClassName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the class name that holds the code for the rule.
    /// </summary>
    /// <returns>The class id.</returns>
    public ClassName getClassName()
    {
        return className;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMethodName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the method that contains the code for the rule.
    /// </summary>
    /// <returns>The method name.</returns>
    public MethodName getMethodName()
    {
        return methodName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a friendly short description of the rule.
    /// </summary>
    /// <returns>A friendly description of the rule.</returns>
    public str getDescription()
    {
        return description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRuleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the rule type.
    /// </summary>
    /// <returns>The rule type.</returns>
    public RetailTransactionValidationRuleType getRuleType()
    {
        return ruleType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if this rule is enabled or not.
    /// </summary>
    /// <returns>true if the rule is enabled; otherwise, false.</returns>
    public boolean isEnabled()
    {
        return enabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isApplicableTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if this rule is applicable to a given transaction type or not.
    /// </summary>
    /// <param name = "_transactionType">The transaction type.</param>
    /// <returns>true if the rule is applicatble to the given transaction type; otherwise, false.</returns>
    public boolean isApplicableTo(RetailTransactionType _transactionType)
    {
        return applicableToTypes.in(_transactionType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serializes the current instance of the RetailTransactionValidationRuleMetadata.
    /// </summary>
    /// <returns>A container that contains the current instance of the RetailTransactionValidationRuleMetadata.</returns>
    public container pack()
    {
        return [CurrentSerializationVersion, [classId, methodName, description, ruleType, enabled, applicableToTypes.pack()]];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes the <paramref name="_packedClass"/> parameter to the current instance of the RetailTransactionValidationRuleMetadata.
    /// </summary>
    /// <param name = "_packedClass">The container from which to deserialize the instance.</param>
    /// <returns>true if deserialization was successful; otherwise, false.</returns>
    public boolean unpack(container _packedClass)
    {
        boolean ret = false;

        int version = 0;
        container data = conNull();

        [version, data] = _packedClass;

        if (version == 1)
        {
            [classId, methodName, description, ruleType, enabled] = data;
            applicableToTypes = RetailTransactionValidationRuleMetadata::getAllSupportedTransactionTypes();
            className = classId2Name(classId);

            ret = true;
        }
        else if (version == CurrentSerializationVersion)
        {
            container serializedSet;
            [classId, methodName, description, ruleType, enabled, serializedSet] = data;

            applicableToTypes = Set::create(serializedSet);

            className = classId2Name(classId);

            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>RetailTransactionValidationRuleMetadata</c> from a container which has previously serialized data.
    /// </summary>
    /// <param name = "_packedObject">The container containing the serialized object.</param>
    /// <returns>The deserialized <c>RetailTransactionValidationRuleMetadata</c>.</returns>
    public static RetailTransactionValidationRuleMetadata create(container _packedObject)
    {
        RetailTransactionValidationRuleMetadata instance = new RetailTransactionValidationRuleMetadata();

        if (instance.unpack(_packedObject))
        {
            return instance;
        }
        else
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>toString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a human readable representation of this type
    /// </summary>
    /// <returns>A string representing an instance of this type.</returns>
    [Hookable(false)]
    public str toString()
    {
        return strFmt('%1.%2 (RuleType: %3 / IsEnabled: %4)', this.className, this.methodName, enum2Symbol(enumNum(RetailTransactionValidationRuleType), this.ruleType), this.enabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllSupportedTransactionTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a set containing all the transaction types that are supported by transaction validation.
    /// </summary>
    /// <returns>A <c>Set</c> cointaining all the types supported by transaction validation.</returns>
    internal static Set getAllSupportedTransactionTypes()
    {
        Set allSupportedTransactionTypes = new Set(Types::Enum);

        allSupportedTransactionTypes.add(RetailTransactionType::Sales);
        allSupportedTransactionTypes.add(RetailTransactionType::AsyncCustomerOrder);
        allSupportedTransactionTypes.add(RetailTransactionType::AsyncCustomerQuote);
        allSupportedTransactionTypes.add(RetailTransactionType::PendingSalesOrder);

        return allSupportedTransactionTypes;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>