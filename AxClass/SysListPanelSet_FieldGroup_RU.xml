<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SysListPanelSet_FieldGroup_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
class SysListPanelSet_FieldGroup_RU extends SysListPanelSet_Fields
{
    List                selectedFields;
    identifiername      groupName;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addData</Name>
				<Source><![CDATA[
    public void addData(container data)
    {
        super(data);
        selectedFields = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAllowedSet</Name>
				<Source><![CDATA[
    protected void createAllowedSet()
    {
        DictFieldGroup    dictGroup = new DictFieldGroup(tableId, groupName);
        DictField         dictField;
        int               idx;

        if (! dictGroup)
        {
            throw error(strfmt("@GLS1179", groupName, tableid2name(tableId)));
        }

        allowedSet = new Set(Types::Integer);

        for (idx = 1; idx <= dictGroup.numberOfFields(); idx++)
        {
            dictField = new DictField(tableId, dictGroup.field(idx));
            if (dictField.isSql())
            {
                allowedSet.add(dictField.id());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getData</Name>
				<Source><![CDATA[
    public container getData()
    {
        if (!allowedSet)
        {
            this.createAllowedSet();
        }

        Set restFields = Set::create(allowedSet.pack());

        container selectedData = this.getDataSelected(restFields);
        container availableData = this.getDataAvailable(restFields);

        return [availableData, selectedData];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataItem</Name>
				<Source><![CDATA[
    protected container getDataItem(fieldId _fieldId)
    {
        SysDictField    dictField = new SysDictField(tableId, _fieldId);
        int             arrayIdx  = fieldExt2Idx(_fieldId);

        return [_fieldId, dictField.image(), dictField.label(arrayIdx), dictField.help(arrayIdx)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataSelected</Name>
				<Source><![CDATA[
    private container getDataSelected(Set _restFields)
    {
        ListEnumerator  e = this.parmSelectedFields().getEnumerator();
        container       selectedData;
        fieldId         fieldId;

        while (e.moveNext())
        {
            fieldId   = e.current();
            selectedData += [this.getDataItem(fieldId)];
           _restFields.remove(fieldId);
        }
        return selectedData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataAvailable</Name>
				<Source><![CDATA[
    private container getDataAvailable(Set _restFields)
    {
        SetEnumerator   e = _restFields.getEnumerator();
        container       availableData;

        while (e.moveNext())
        {
            availableData += [this.getDataItem(e.current())];
        }
        return availableData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedFields</Name>
				<Source><![CDATA[
    private void getSelectedFields()
    {
        int           idx = viewSelected.getNextItem(FormListNext::All);
        FormListItem  formListItem;

        selectedFields = new List(Types::Integer);

        while (idx != -1)
        {
            formListItem = viewSelected.getItem(idx);
            selectedFields.addEnd(formListItem.data());
            idx = viewSelected.getNextItem(FormListNext::All, idx);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGroupName</Name>
				<Source><![CDATA[
    public identifiername parmGroupName(identifiername _groupName = groupName)
    {
        groupName = _groupName;
        return groupName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectedFields</Name>
				<Source><![CDATA[
    public List parmSelectedFields(List _selectedFields = selectedFields)
    {
        inSet = this.parmInSet();
        if (! prmisdefault(_selectedFields))
        {
            this.setSelectedFields(_selectedFields);
        }
        if (! selectedFields)
        {
            this.getSelectedFields();
        }
        return selectedFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>positionsUpdated</Name>
				<Source><![CDATA[
    protected container positionsUpdated()
    {
        container ret = super();
        selectedFields = null;
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeData</Name>
				<Source><![CDATA[
    public void removeData(container data)
    {
        super(data);
        selectedFields = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSelectedFields</Name>
				<Source><![CDATA[
    private void setSelectedFields(List _selectedFields)
    {
        ListEnumerator  e = _selectedFields.getEnumerator();

        while (e.moveNext())
        {
            inSet.add(e.current());
        }

        selectedFields = _selectedFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortMethod</Name>
				<Source><![CDATA[
    protected FormListSort sortMethod()
    {
        if (this.parmHasUpDownButton())
        {
            return FormListSort::NoSort;
        }
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SysListPanelSet_FieldGroup_RU construct()
    {
        return new SysListPanelSet_FieldGroup_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
    public static SysListPanelSet_FieldGroup_RU newForm(FormRun         _formRun,
                                                        int             _parentId,
                                                        tableId         _tableId,
                                                        identifiername  _groupname,
                                                        boolean         _hasUpDownButton = false)
    {
        SysListPanelSet_FieldGroup_RU sysListPanel = SysListPanelSet_FieldGroup_RU::construct();

        sysListPanel.parmFormRun(_formRun);
        sysListPanel.parmParentId(_parentId);
        sysListPanel.parmTableId(_tableId);
        sysListPanel.parmGroupName(_groupname);
        sysListPanel.parmHasUpDownButton(_hasUpDownButton);
        sysListPanel.build();

        return sysListPanel;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>