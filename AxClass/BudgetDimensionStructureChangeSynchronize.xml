<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetDimensionStructureChangeSynchronize</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetDimensionStructureChangeSynchronize</c> class provides an API for synchronizing unposted transactions
/// after the structure is changed by a modification to the dimensions for budgeting.
/// </summary>
public class BudgetDimensionStructureChangeSynchronize extends DimensionStructureChangeSynchronize
{
    RecId disabledBudgetDimensionsSetId;
    LedgerRecId ledgerId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDimensionStructureSynchronizationMasterDataProviders</Name>
				<Source><![CDATA[
    protected Array getDimensionStructureSynchronizationMasterDataProviders()
    {
        // No master data provider updates are required for budget enabled dimension changes.
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionStructureSynchronizationTransactionProviders</Name>
				<Source><![CDATA[
    protected Array getDimensionStructureSynchronizationTransactionProviders()
    {
        Array providers = new Array(Types::Class);

        // Only the budget enabled dimension provider is required for budget enabled dimension changes.
        providers.value(1, new BudgetEnabledDimensionStructureSynchronizationProvider());

        return providers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionStructureSynchronizationAssociationProviders</Name>
				<Source><![CDATA[
    protected Array getDimensionStructureSynchronizationAssociationProviders()
    {
        // No association data provider updates are required for budget enabled dimension changes.
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSynchronizationRequest</Name>
				<Source><![CDATA[
    protected DimensionStructureISynchronizationRequest getSynchronizationRequest()
    {
        BudgetDimensionStructureSynchronizationRequest synchronizationRequest = BudgetDimensionStructureSynchronizationRequest::newForDimensionSynchronize(
            dimSynchronize,
            dimSynchronizeLedger,
            disabledBudgetDimensionsSetId,
            ledgerId);

        return synchronizationRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForBudgetChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>DimensionStructureChangeSynchronize</c> class for changes to the dimensions enabled for budgeting.
    /// </summary>
    /// <param name="_disabledBudgetDimensionsSetId">
    /// The record ID of the <c>DimensionAttributeSet</c> record that contains the dimension attributes that were disabled for budgeting.
    /// </param>
    /// <param name="_ledgerId">
    /// The record ID of the <c>Ledger</c> record that was modified.
    /// </param>
    private void initForBudgetChange(RecId _disabledBudgetDimensionsSetId, LedgerRecId _ledgerId)
    {
        disabledBudgetDimensionsSetId = _disabledBudgetDimensionsSetId;
        ledgerId = _ledgerId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processBudgetRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the budget structure change synchronize request.
    /// </summary>
    /// <param name = "_structureChangeSynchronizeRequest">
    /// The <c>BudgetDimensionStructureChangeSynchronizeRequest</c> instance for which to process.
    /// </param>
    public void processBudgetRequest(BudgetDimensionStructureChangeSynchronizeRequest _structureChangeSynchronizeRequest)
    {
        if (_structureChangeSynchronizeRequest.parmDoProcessBudgetEnabledDimensionsChange())
        {
            BudgetDimensionStructureChangeSynchronize dimStructureChangeSynchronize = new BudgetDimensionStructureChangeSynchronize();
            dimStructureChangeSynchronize.initForBudgetChange(_structureChangeSynchronizeRequest.parmDisabledBudgetDimensionsSetId(), _structureChangeSynchronizeRequest.parmLedgerId());
            dimStructureChangeSynchronize.process();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitRequest</Name>
				<Source><![CDATA[
    private static void submitRequest(BudgetDimensionStructureChangeSynchronizeRequest _structureChangeSynchronizeRequest)
    {
        SysOperationServiceController controller = new SysOperationServiceController(
            classStr(BudgetDimensionStructureChangeSynchronize),
            methodStr(BudgetDimensionStructureChangeSynchronize, processBudgetRequest));

        BudgetDimensionStructureChangeSynchronizeRequest request = controller.getDataContractInfoObject().dataContractObject() as BudgetDimensionStructureChangeSynchronizeRequest;

        request.initializeFromBudgetRequest(_structureChangeSynchronizeRequest);

        // Do not show the dialog and process the request directly.
        controller.parmShowDialog(false);

        // Set the caption as it is used as the reliable async batch job name.
        controller.parmDialogCaption("@Budget:ProcessBudgetEnabledDimensionsChange");

        if (appl.ttsLevel() > 0)
        {
            // Wait for the operation to complete as there could be dependent transactional changes.
            controller.parmExecutionMode(SysOperationExecutionMode::Synchronous);
        }
        else
        {
            // Do not wait for the operation to complete as there are no dependent transactional changes.
            controller.parmExecutionMode(SysOperationExecutionMode::ReliableAsynchronous);
            controller.parmRegisterCallbackForReliableAsyncCall(false);
        }

        // Start the reliable async operation.
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processBudgetEnabledDimensionsChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates budget transaction lines after dimensions were disabled for budgeting.
    /// </summary>
    /// <param name="_disabledBudgetDimensions">
    /// The record ID of the <c>DimensionAttributeSet</c> record that contains the dimension attributes that were disabled for budgeting.
    /// </param>
    /// <param name="_ledgerId">
    /// The record ID of the <c>Ledger</c> record; optional.
    /// </param>
    public static void processBudgetEnabledDimensionsChange(RecId _disabledBudgetDimensions, LedgerRecId _ledgerId = Ledger::current())
    {
        // Validate input parameters
        if (!_disabledBudgetDimensions || !_ledgerId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        BudgetDimensionStructureChangeSynchronizeRequest request = new BudgetDimensionStructureChangeSynchronizeRequest();

        request.parmDoProcessBudgetEnabledDimensionsChange(true);
        request.parmDisabledBudgetDimensionsSetId(_disabledBudgetDimensions);
        request.parmLedgerId(_ledgerId);

        BudgetDimensionStructureChangeSynchronize::submitRequest(request);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>