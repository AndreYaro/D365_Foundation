<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPeriodPostingSelectCost_Menu</Name>
	<SourceCode>
		<Declaration><![CDATA[
class   ProjPeriodPostingSelectCost_Menu extends ProjPeriodPostingSelectCost
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    /// created in the AOT.
    /// </remarks>
    public Object dialog()
    {
        #define.two(2)
        DialogRunbase  dialogRunbase = super();

        dialogRunbase.caption("@SYS87007");
        dialogRunbase.addGroup("@SYS90562");
        dialogProjLedgerStatus = dialogRunbase.addFieldValue(enumStr(ProjLedgerStatusPeriodic), ProjGroup::ledgerStatus2periodic(projLedgerStatus), "@SYS90563");

        if (!this.enableProjMultipleContractLinesForProjectFeature)
        {
            dialogRunbase.addGroup("@SYS78367",dialogGroupProjType);
            dialogTimeMaterial  = dialogRunbase.addFieldValue(extendedTypeStr(ProjTimeMaterial), projTimeMaterial, "@SYS53874", "@SYS78362");
            dialogInternal      = dialogRunbase.addFieldValue(extendedTypeStr(ProjInternal), projInternal, "@SYS15017", "@SYS90564");
        }

        dialogRunbase.addGroup("@SYS78373",dialogGroupCostSales);

        dialogEmpl          = dialogRunbase.addFieldValue(extendedTypeStr(ProjOptionHours),             queryEmpl,          "@SYS5269",  "@SYS78368");
        dialogCost          = dialogRunbase.addFieldValue(extendedTypeStr(ProjOptionCost),              queryCost,          "@SYP4882014", "@SYS78369");
        dialogItem          = dialogRunbase.addFieldValue(extendedTypeStr(ProjOptionItem),              queryItem,          "@SYS7407",  "@SYS78372");

        dialogRunbase.addGroup("@SYS54242");
        dialogFromDate      = dialogRunbase.addFieldValue(extendedTypeStr(TransDate), fromDate, "@SYS5209",  "@SYS90467");
        dialogToDate        = dialogRunbase.addFieldValue(extendedTypeStr(TransDate), toDate,   "@SYS14656", "@SYS90468");

        dialogRunbase.addGroup("@SYS23410");
        dialogTransDate = dialogRunbase.addFieldValue(extendedTypeStr(TransDate), transActionDate, "@SYS14475", "@SYS90567");

        dialogGroupCostSales = dialogRunbase.addGroup('');
        dialogGroupCostSales.frameType(1);
        dialogGroupCostSales.columns(#two);

        this.initQuery();
        dialogRunbase.useConfigKey(true);

        return dialogRunbase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        this.parmProjLedgerStatus(ProjGroup::periodic2ledgerStatus(dialogProjLedgerStatus.value()));
        this.parmTransActionDate(dialogTransDate.value());

        this.parmQueryCost(dialogCost.value());
        this.parmQueryEmpl(dialogEmpl.value());
        this.parmQueryItem(dialogItem.value());

        this.parmFromDate(dialogFromDate.value());
        this.parmToDate(dialogToDate.value());

        if (!this.enableProjMultipleContractLinesForProjectFeature)
        {
            this.parmProjInternal(dialogInternal.value());
            this.parmProjTimeMaterial(dialogTimeMaterial.value());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    void initQuery()
    {
        projGroupDataSource     = queryRun.query().dataSourceTable(tableNum(ProjGroup));
        SysQuery::findOrCreateRange(projGroupDataSource, fieldNum(ProjGroup, ProjGroupId));
        projTableDataSource     = queryRun.query().dataSourceTable(tableNum(ProjTable));
        SysQuery::findOrCreateRange(projTableDataSource, fieldNum(ProjTable, ProjId));

        if (!this.enableProjMultipleContractLinesForProjectFeature)
        {
            queryRangeInternal      = queryRun.query().dataSourceTable(tableNum(ProjTable)).addRange(fieldNum(ProjTable,Type));
            queryRangeInternal.status(RangeStatus::Hidden);
            queryRangeTimeMaterial  = queryRun.query().dataSourceTable(tableNum(ProjTable)).addRange(fieldNum(ProjTable,Type));
            queryRangeTimeMaterial.status(RangeStatus::Hidden);
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            emplDataSource          = queryRun.query().dataSourceTable(tableNum(ProjEmplTrans));
            emplDataSourceCost      = queryRun.query().dataSourceTable(tableNum(ProjEmplTransCost));
            SysQuery::findOrCreateRange(emplDataSource, fieldNum(ProjEmplTrans, TransId));
            this.initQueryEmpl();
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            costDataSource          = queryRun.query().dataSourceTable(tableNum(ProjCostTrans));
            costDataSourceCost      = queryRun.query().dataSourceTable(tableNum(ProjCostTransCost));
            SysQuery::findOrCreateRange(costDataSource, fieldNum(ProjCostTrans, TransId));
            this.initQueryCost();
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(LogisticsBasic)))
        {
            itemDataSource          = queryRun.query().dataSourceTable(tableNum(ProjItemTrans));
            itemDataSourceCost      = queryRun.query().dataSourceTable(tableNum(ProjItemTransCost));
            SysQuery::findOrCreateRange(itemDataSource, fieldNum(ProjItemTrans, InventTransId));
            this.initQueryItem();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList,queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    public QueryRun queryBuild()
    {
        Query                   query = new Query();
        QueryBuildDataSource    dsProjGroup, dsProjTable, dsProjEmplTrans, dsProjCostTrans, dsProjItemTrans, dsProjItemTransCost;
        QueryBuildDataSource    dsProjEmplTransCost, dsProjCostTransCost;

        dsProjGroup         = query.addDataSource(tableNum(ProjGroup));

        dsProjTable         = dsProjGroup.addDataSource(tableNum(ProjTable));
        dsProjTable.addLink(fieldNum(ProjGroup,ProjGroupId),fieldNum(ProjTable,ProjGroupId));

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            dsProjEmplTrans     = dsProjTable.addDataSource(tableNum(ProjEmplTrans));
            dsProjEmplTrans.addLink(fieldNum(ProjTable,ProjId),fieldNum(ProjEmplTrans,ProjId));

            dsProjEmplTransCost = dsProjEmplTrans.addDataSource(tableNum(ProjEmplTransCost));
            dsProjEmplTransCost.relations(true);
            dsProjEmplTransCost.joinMode(JoinMode::ExistsJoin);
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            dsProjCostTrans     = dsProjTable.addDataSource(tableNum(ProjCostTrans));
            dsProjCostTrans.addLink(fieldNum(ProjTable,ProjId),fieldNum(ProjCostTrans,ProjId));

            dsProjCostTransCost = dsProjCostTrans.addDataSource(tableNum(ProjCostTransCost));
            dsProjCostTransCost.relations(true);
            dsProjCostTransCost.joinMode(JoinMode::ExistsJoin);
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(LogisticsBasic)))
        {
            dsProjItemTrans     = dsProjTable.addDataSource(tableNum(ProjItemTrans));
            dsProjItemTrans.addLink(fieldNum(ProjTable,ProjId),fieldNum(ProjItemTrans,ProjId));

            dsProjItemTransCost = dsProjItemTrans.addDataSource(tableNum(ProjItemTransCost));
            dsProjItemTransCost.relations(true);
            dsProjItemTransCost.joinMode(JoinMode::ExistsJoin);
        }

        queryRun = new SysQueryRun(query);

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showIndexFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches for the first enabled index when a user is adding query range fields to the dialog box and
    /// when a data source does not have any ranges specified.
    /// </summary>
    /// <param name="id">
    /// The table ID of the table in the test.
    /// </param>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// This method also displays the visible fields from the index.
    /// </remarks>
    public boolean showIndexFields(TableId id)
    {
        boolean ret = true;
        switch (id)
        {
            case tableNum(ProjEmplTransCost):
            case tableNum(ProjCostTransCost):
            case tableNum(ProjItemTransCost):
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer         version         = conPeek(packedClass,1);
        container       packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,packedQuery] = packedClass;
                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }
                else
                {
                    queryRun = this.queryBuild();
                }
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        Args args;
        boolean ret = true;
        FormRun callerForm;

        if (_calledFrom && _calledFrom is FormRun)
        {
            callerForm = _calledFrom;
            args = callerForm.args();
            if (args && args.caller() && SysDictClass::isEqualOrSuperclass(classIdGet(args.caller()), classNum(DialogRunbase)))
            {
                ret = super();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYS87007";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>