<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsMRCRegulated_Purch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class controls the MRC Regulated for purchasing
/// </summary>
class PdsMRCRegulated_Purch extends PdsMRCRegulated
{
    PurchLine   purchLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>alertOnAdvise</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends alert of the MRC parameters is set to alert on advise for purchaseorder line.
    /// </summary>
    protected void alertOnAdvise()
    {
        if (parameters.AlertOnAdviseIntervalPurchase)
        {
            this.sendEvent(PdsMRCEventType::PurchAdvise);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>alertOnExpiry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends alert of the MRC parameters is set to alert on expiry for purchaseorder line.
    /// </summary>
    protected void alertOnExpiry()
    {
        if (parameters.AlertOnExpiryPurchase)
        {
            this.sendEvent(PdsMRCEventType::PurchExpiry);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>alertOnNoDoc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends alert of the MRC parameters is set to alert on no document for purchaseorder line.
    /// </summary>
    protected void alertOnNoDoc()
    {
        if (parameters.AlertOnExpiryPurchase)
        {
            this.sendEvent(PdsMRCEventType::PurchNoDoc);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// substantiates the object
    /// </summary>
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record into the MRCEventTracker table from the
    /// active document for the current purchLine, with the eventType of
    /// _eventType.
    /// </summary>
    /// <param name="_eventType">Type of event to be sent.</param>
    protected void sendEvent(PdsMRCEventType _eventType)
    {
        tracker.initFromPurchLine(purchLine);
        tracker.initFromPdsMRCDocuments(activeDocument, _eventType);
        tracker.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the global variables for the class from the common parameter, in this case a PurchLine record.
    /// </summary>
    /// <param name="_common">Record used to initialize and run the class.</param>
    public void setBuffer(Common _common)
    {
        LogisticsPostalAddress  deliveryAddress;

        purchLine       = _common;
        itemId          = purchLine.ItemId;
        bomId           = purchLine.ItemBOMId;
        languageId      = purchLine.purchTable().LanguageId;

        if (isConfigurationkeyEnabled(configurationkeynum(TradeMultiShipTo)))
        {
            deliveryAddress = purchLine.deliveryAddress();
        }
        else
        {
            deliveryAddress = purchLine.purchTable().deliveryAddress();
        }

        addrCountryRegId    = deliveryAddress.CountryRegionId;
        addrStateId         = deliveryAddress.State;

        //Determine the appropriate effective date.
        if (parameters.EffectiveDayType == PdsMRCEffectiveDateBasis::CurrentDate)
        {
            effectiveDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }
        else
        {
            effectiveDate = purchLine.deliveryDate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record into the MRCVendorHistory table with the information from the current purchline
    /// </summary>
    /// <returns>Returns whether or not the history record was able to be inserted without error.</returns>
    protected boolean updateHistory()
    {
        PdsMRCVendorHistory history;

        history = PdsMRCVendorHistory::find(purchLine.PurchId,
            purchLine.VendAccount,
            purchLine.ItemId,
            activeDocument.DocumentId,
            true);

        history.Vendor          = purchLine.VendAccount;
        history.ItemId          = purchLine.ItemId;
        history.LastReceived    = any2date(activeDocument.CreatedDateTime);
        history.PurchaseId      = purchLine.PurchId;
        history.DocumentId      = activeDocument.DocumentId;

        try
        {
            if (history.RecId)
            {
                ttsbegin;
                history.update();
                ttscommit;
            }
            else
            {
                history.insert();
            }
        }
        catch (Exception::Error)
        {
            if (history.RecId)
            {
                ttsabort;
            }
            return checkFailed("@PDS909");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>warningOnExpiry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Issues a warning if Regulation warnign on purchase orders is set on the MRC parameters.
    /// </summary>
    /// <param name="_ignoreParameters">Should the
    /// MRC parameters to issue warning be ignored?
    /// </param>
    protected void warningOnExpiry(boolean _ignoreParameters = false)
    {
        if (parameters.RegulationWarningOnPurchase || _ignoreParameters)
        {
            warning(strfmt("@PDS910", purchLine.ItemId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>wasDocumentSent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether or not the document was sent.
    /// </summary>
    /// <param name="_docId">Document to check if sent.</param>
    /// <returns>result of check in MRCVendorHistoryTable for
    /// document with DocumentId of _docId.  True if found, otherwise
    /// false.</returns>
    protected boolean wasDocumentSent(PdsMRCDocumentId _docId)
    {
        PdsMRCVendorHistory history;

        history = PdsMRCVendorHistory::find(purchLine.PurchId,
            purchLine.VendAccount,
            purchLine.ItemId,
            _docId);

        if (history.RecId)
        {
            lastSent = history.LastReceived;
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns an instance of the class
    /// </summary>
    /// <returns>returns instance</returns>
    public static PdsMRCRegulated_Purch construct()
    {
        return new PdsMRCRegulated_Purch();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>