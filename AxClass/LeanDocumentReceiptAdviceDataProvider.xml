<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanDocumentReceiptAdviceDataProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanDocumentReceiptAdviceDataProvider</c> class is the provider class of kanban jobs for
///    which receipt advices must be created.
/// </summary>
public class LeanDocumentReceiptAdviceDataProvider extends LeanDocumentContractDataProvider
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>equal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the two objects are equal.
    /// </summary>
    /// <param name="otherObject">
    ///    The object to check.
    /// </param>
    /// <returns>
    ///    true if the two objects are equal otherwise false.
    /// </returns>
    public boolean equal(Object otherObject)
    {
        LeanDocumentReceiptAdviceDataProvider otherProvider = otherObject as LeanDocumentReceiptAdviceDataProvider;

        return  otherObject == this
                || (otherProvider != null
                    && super(otherProvider)) ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal state of the providers.
    /// </summary>
    protected void init()
    {
        QueryBuildDataSource qbdsKanbanJob = query.dataSourceTable(tablenum(KanbanJob));

        // include only kanban jobs that already have an assigned purchase line
        QueryBuildDataSource qbds = qbdsKanbanJob.addDataSource(tablenum(KanbanJobPurchaseLine));
        qbds.addLink(fieldnum(KanbanJob, RecId), fieldnum(KanbanJobPurchaseLine, KanbanJob));
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.fetchMode(QueryFetchMode::One2One);

        qbds = qbds.addDataSource(tablenum(PurchLine));
        qbds.addLink(fieldnum(KanbanJobPurchaseLine, PurchLineInventTransId), fieldnum(PurchLine, InventTransId));
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.addSelectionField(fieldnum(PurchLine, RecId));
        qbds.addSelectionField(fieldnum(PurchLine, DeliveryDate));
        qbds.addSelectionField(fieldnum(PurchLine, PurchQty));
        qbds.addSelectionField(fieldnum(PurchLine, PurchUnit));
        qbds.addSelectionField(fieldnum(PurchLine, PurchId));
        qbds.addSelectionField(fieldnum(PurchLine, InventTransId));
        qbds.addSelectionField(fieldnum(PurchLine, SourceDocumentLine));

        // exclude kanban jobs that already have an assigned receipt advice line
        qbds = qbdsKanbanJob.addDataSource(tablenum(KanbanJobReceiptAdviceLine));
        qbds.addLink(fieldnum(KanbanJob, RecId), fieldnum(KanbanJobReceiptAdviceLine, KanbanJob));
        qbds.joinMode(JoinMode::NoExistsJoin);
        qbds.fetchMode(QueryFetchMode::One2One);

        // set the minimum status to Completed as we only want to pick completed jobs
        LeanKanbanJobStatus minimumJobStatus = dataContract.parmMinimumJobStatus();
        dataContract.parmMinimumJobStatus(LeanKanbanJobStatus::Completed);

        // this needs to be done after all the ranges have been added, otherwise the QueryRUn
        // created in the parent won't fetch them during the t-sql generation
        super();

        // restore the original minimum status within the data contract
        dataContract.parmMinimumJobStatus(minimumJobStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an instance of the <c>LeanDocumentReceiptAdviceDataProvider</c> class.
    /// </summary>
    /// <param name="_contract">
    ///    The data contract object.
    /// </param>
    /// <returns>
    ///    An instance of the <c>LeanDocumentReceiptAdviceDataProvider</c> class .
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanDocumentReceiptAdviceDataProvider newStandard(LeanDocumentDataContract _contract)
    {
        LeanDocumentReceiptAdviceDataProvider res = new LeanDocumentReceiptAdviceDataProvider(_contract);
        res.init();

        return res;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
