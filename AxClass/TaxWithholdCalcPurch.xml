<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdCalcPurch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxWithholdCalcPurch</c> class integrates with the calculation of withholding tax for purchase order.
/// </summary>
internal final class TaxWithholdCalcPurch extends TaxWithholdCalculation
{
    private PurchCalcTax purchCalcTax;
    private int64 numberOfLines = 0;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Object _initializationClass)
    {
        super();

        this.init(_initializationClass);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public final static TaxWithholdCalcPurch construct(Object _initializationClass)
    {
        return new TaxWithholdCalcPurch(_initializationClass);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init(Object _initializationClass)
    {
        purchCalcTax = _initializationClass as PurchCalcTax;

        if (purchCalcTax == null)
        {
            throw error("@SYS95118");
        }

        headingTableId = purchCalcTax.headingTableID();
        headingRecId = purchCalcTax.headingRecID();
        invoiceDate = purchCalcTax.invoiceDate();
        sourceCurrencyCode = purchCalcTax.currencyCode();
        inclTax = purchCalcTax.isTaxIncluded();
        tax = purchCalcTax.tax();

        super(_initializationClass);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTax</Name>
				<Source><![CDATA[
    public TaxAmountCur calculateTax()
    {
        TradeInstrumentationStopWatch stopWatch = TradeInstrumentationStopWatch::newStopwatch();

        if (!headingRecId)
        {
            return 0;
        }

        if (!doGenerateWHTUncommitted)
        {
            taxWithholdUncommitted.setTempDB();
        }

        this.insertTaxWithholdCalcTmpMarkup();

        this.fillCalcBasicDataForLine();

        // Make sure that the invoice amount is higher that the minimum amount specified on GL Parameter form.
        if (abs(totalInvoiceAmount) >= ledgerParameters.TaxWithholdMinInvoice_TH)
        {
            this.summaryTmpTaxWithholdCalc();
            this.calculate();
        }

        TaxWithHoldInstrumentationTelemetry::logGWHTTelemetry(
            GlobalizationConstants::FeatureReferenceTAX00036,
            funcName(),
            TaxWithHoldInstrumentationTelemetry::PurchTotals,
            enum2Str(SalesPurch::Purch),
            true,
            numberOfLines,
            stopWatch.elapsedMilliseconds());

        return totalTaxWithholdAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxWithholdCalcTmpMarkup</Name>
				<Source><![CDATA[
    private void insertTaxWithholdCalcTmpMarkup()
    {
        if (taxWithholdCalcTmpMarkupList)
        {
            taxWithholdCalcTmpMarkupList.insertDatabase();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    private void calculate()
    {
        ttsbegin;

        RecordInsertList taxWithholdUncommittedList = new RecordInsertList(tableNum(TaxWithholdUncommitted), false, false, false, false, false, taxWithholdUncommitted);

        while select forupdate * from taxWithholdCalcTmpSum
            where taxWithholdCalcTmpSum.HeadingTableId == headingTableId
                && taxWithholdCalcTmpSum.HeadingRecId == headingRecId
        {
            taxWithholdUncommitted.initFromTaxWithholdCalcTmp(taxWithholdCalcTmpSum);

            TaxWithholdAmount baseAmount;
            TaxWithholdTable taxWithholdTable = TaxWithholdTable::find(taxWithholdUncommitted.TaxWithholdCode);

            // Calculation of the base amount to find the correct TaxWithholdData record.
            if (taxWithholdTable.TaxWithholdBaseType == TaxWithholdBaseType::PctPerGross)
            {
                baseAmount = taxWithholdUncommitted.InvoiceAmount;
            }
            else
            {
                baseAmount = taxWithholdUncommitted.invoiceAmountExclTax();
            }

            ExchRate exchRate = this.getExchRatePerWHTExchRateType(sourceCurrencyCode, taxWithholdTable.CurrencyCode, invoiceDate);
            AmountCur baseAmountInTaxCurrency = this.any2TaxWithhold(baseAmount, sourceCurrencyCode, taxWithholdTable.CurrencyCode, exchRate, invoiceDate);

            // Withholding tax code limitation based on withholding tax currency code.
            TaxWithholdData taxWithholdData = TaxWithholdData::find(taxWithholdUncommitted.TaxWithholdCode, invoiceDate, baseAmountInTaxCurrency);

            if (taxWithholdData && (taxWithholdData.TaxWithholdValue || ledgerParameters.IsPostZeroRatedWHT))
            {
                taxWithholdUncommitted.TaxWithholdValue = taxWithholdData.TaxWithholdValue;
                taxWithholdUncommitted.TaxWithholdExclude = taxWithholdData.TaxWithholdExclude;
                taxWithholdUncommitted.InvoiceTaxWithholdBaseAmount = baseAmount;
                taxWithholdUncommitted.InvoiceCurrency = sourceCurrencyCode;
                taxWithholdUncommitted.TaxWithholdCurrency = taxWithholdTable.CurrencyCode;
                taxWithholdUncommitted.TaxWithholdPeriodHead = taxWithholdTable.TaxWithholdPeriodHead_TH;
                taxWithholdUncommitted.TransDate = invoiceDate;

                if (isEnabledWHTCurrencyExchRateFeature)
                {
                    taxWithholdUncommitted.TaxWithholdExchRateDate = taxWithholdUncommitted.TransDate;
                    taxWithholdUncommitted.TaxWithholdExchRate = exchRate;
                }

                this.applyTaxWithholdExempt(taxWithholdUncommitted, taxWithholdData, taxWithholdTable);
                this.initTaxWithholdBaseAmount(taxWithholdUncommitted);
                this.initTaxWithholdAmount(taxWithholdUncommitted, taxWithholdData, taxWithholdTable);
                this.applyTaxWithholdLimits(taxWithholdUncommitted);
                this.roundOffTaxWithholdAmount(taxWithholdUncommitted, taxWithholdTable);

                taxWithholdUncommittedList.add(taxWithholdUncommitted);

                totalTaxWithholdAmount += taxWithholdUncommitted.InvoiceTaxWithholdAmount;
            }
        }

        taxWithholdUncommittedList.insertDatabase();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyTaxWithholdExempt</Name>
				<Source><![CDATA[
    private TaxWithholdUncommitted applyTaxWithholdExempt(TaxWithholdUncommitted _taxWithholdUncommitted, TaxWithholdData _taxWithholdData, TaxWithholdTable _taxWithholdTable)
    {
        // Apply tax withhold exempted amount
        if (isJPCountryRegion && _taxWithholdTable.TaxCalcMethod_JP == TaxCalcMode::Interval)
        {
            _taxWithholdUncommitted = this.calcExemptedAmountByInterval_JP(_taxWithholdUncommitted);
        }
        else
        {
            _taxWithholdUncommitted.InvoiceTaxExemptedAmount = _taxWithholdUncommitted.InvoiceTaxWithholdBaseAmount * _taxWithholdData.TaxWithholdExclude / 100;

            if (_taxWithholdUncommitted.InvoiceTaxExemptedAmount)
            {
                if (isEnabledWHTCurrencyExchRateFeature)
                {
                    _taxWithholdUncommitted.TaxExemptedAmount = this.any2TaxWithhold(
                        _taxWithholdUncommitted.InvoiceTaxExemptedAmount,
                        _taxWithholdUncommitted.InvoiceCurrency,
                        _taxWithholdUncommitted.TaxWithholdCurrency,
                        _taxWithholdUncommitted.TaxWithholdExchRate,
                        _taxWithholdUncommitted.TaxWithholdExchRateDate);
                }
                else
                {
                    _taxWithholdUncommitted.TaxExemptedAmount = CurrencyExchangeHelper::curAmount2CurAmount(
                        _taxWithholdUncommitted.InvoiceTaxExemptedAmount,
                        _taxWithholdUncommitted.InvoiceCurrency,
                        _taxWithholdUncommitted.TaxWithholdCurrency,
                        _taxWithholdUncommitted.TransDate);
                }
            }
        }

        return _taxWithholdUncommitted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxWithholdBaseAmount</Name>
				<Source><![CDATA[
    private TaxWithholdUncommitted initTaxWithholdBaseAmount(TaxWithholdUncommitted _taxWithholdUncommitted)
    {
        taxWithholdUncommitted.InvoiceTaxWithholdBaseAmount = taxWithholdUncommitted.InvoiceTaxWithholdBaseAmount - taxWithholdUncommitted.InvoiceTaxExemptedAmount;

        // Tax withhold base amount in tax currency
        if (isEnabledWHTCurrencyExchRateFeature)
        {
            _taxWithholdUncommitted.TaxWithholdBaseAmount = this.any2TaxWithhold(
                taxWithholdUncommitted.InvoiceTaxWithholdBaseAmount,
                taxWithholdUncommitted.InvoiceCurrency,
                taxWithholdUncommitted.TaxWithholdCurrency,
                taxWithholdUncommitted.TaxWithholdExchRate,
                taxWithholdUncommitted.TaxWithholdExchRateDate);
        }
        else
        {
            _taxWithholdUncommitted.TaxWithholdBaseAmount = CurrencyExchangeHelper::curAmount2CurAmount(
                taxWithholdUncommitted.InvoiceTaxWithholdBaseAmount,
                taxWithholdUncommitted.InvoiceCurrency,
                taxWithholdUncommitted.TaxWithholdCurrency,
                taxWithholdUncommitted.TransDate);
        }

        return _taxWithholdUncommitted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxWithholdAmount</Name>
				<Source><![CDATA[
    private TaxWithholdUncommitted initTaxWithholdAmount(TaxWithholdUncommitted _taxWithholdUncommitted, TaxWithholdData _taxWithholdData, TaxWithholdTable _taxWithholdTable)
    {
        if (isJPCountryRegion && _taxWithholdTable.TaxCalcMethod_JP == TaxCalcMode::Interval)
        {
            _taxWithholdUncommitted.TaxWithholdAmount = this.calcWithholdTaxAmountByInterval_JP(_taxWithholdUncommitted);

            if (isEnabledWHTCurrencyExchRateFeature)
            {
                _taxWithholdUncommitted.InvoiceTaxWithholdAmount = this.taxWithhold2Any(
                    _taxWithholdUncommitted.TaxWithholdAmount,
                    _taxWithholdUncommitted.TaxWithholdCurrency,
                    _taxWithholdUncommitted.InvoiceCurrency,
                    _taxWithholdUncommitted.TaxWithholdExchRate,
                    _taxWithholdUncommitted.TaxWithholdExchRateDate);
            }
            else
            {
                _taxWithholdUncommitted.InvoiceTaxWithholdAmount = CurrencyExchangeHelper::curAmount2CurAmount(
                    _taxWithholdUncommitted.TaxWithholdAmount,
                    _taxWithholdUncommitted.TaxWithholdCurrency,
                    _taxWithholdUncommitted.InvoiceCurrency,
                    _taxWithholdUncommitted.TransDate);
            }
        }
        else
        {
            _taxWithholdUncommitted.InvoiceTaxWithholdAmount = _taxWithholdUncommitted.InvoiceTaxWithholdBaseAmount * _taxWithholdData.TaxWithholdValue / 100;

            // Tax withhold amount in tax currency
            if (isEnabledWHTCurrencyExchRateFeature)
            {
                _taxWithholdUncommitted.TaxWithholdAmount = this.any2TaxWithhold(
                    _taxWithholdUncommitted.InvoiceTaxWithholdAmount,
                    _taxWithholdUncommitted.InvoiceCurrency,
                    _taxWithholdUncommitted.TaxWithholdCurrency,
                    _taxWithholdUncommitted.TaxWithholdExchRate,
                    _taxWithholdUncommitted.TaxWithholdExchRateDate);
            }
            else
            {
                _taxWithholdUncommitted.TaxWithholdAmount = CurrencyExchangeHelper::curAmount2CurAmount(
                    _taxWithholdUncommitted.InvoiceTaxWithholdAmount,
                    _taxWithholdUncommitted.InvoiceCurrency,
                    _taxWithholdUncommitted.TaxWithholdCurrency,
                    _taxWithholdUncommitted.TransDate);
            }
        }

        return _taxWithholdUncommitted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyTaxWithholdLimits</Name>
				<Source><![CDATA[
    private TaxWithholdUncommitted applyTaxWithholdLimits(TaxWithholdUncommitted _taxWithholdUncommitted)
    {
        TaxWithholdLimit taxWithholdLimit = TaxWithholdLimit::find(_taxWithholdUncommitted.TaxWithholdCode, _taxWithholdUncommitted.TransDate);

        if (taxWithholdLimit.TaxWithholdAmountMin != 0 && abs(_taxWithholdUncommitted.TaxWithholdAmount) < taxWithholdLimit.TaxWithholdAmountMin)
        {
            _taxWithholdUncommitted.InvoiceTaxWithholdAmount = 0;
            _taxWithholdUncommitted.TaxWithholdAmount = 0;
        }
        else
        {
            if (taxWithholdLimit.TaxWithholdAmountMax != 0 && _taxWithholdUncommitted.TaxWithholdAmount > taxWithholdLimit.TaxWithholdAmountMax)
            {
                _taxWithholdUncommitted.InvoiceTaxWithholdAmount = taxWithholdLimit.TaxWithholdAmountMax;

                if (isEnabledWHTCurrencyExchRateFeature)
                {
                    _taxWithholdUncommitted.TaxWithholdAmount = this.any2TaxWithhold(
                        taxWithholdLimit.TaxWithholdAmountMax,
                        _taxWithholdUncommitted.InvoiceCurrency,
                        _taxWithholdUncommitted.TaxWithholdCurrency,
                        _taxWithholdUncommitted.TaxWithholdExchRate,
                        _taxWithholdUncommitted.TaxWithholdExchRateDate);
                }
                else
                {
                    _taxWithholdUncommitted.TaxWithholdAmount = CurrencyExchangeHelper::curAmount2CurAmount(
                        taxWithholdLimit.TaxWithholdAmountMax,
                        _taxWithholdUncommitted.InvoiceCurrency,
                        _taxWithholdUncommitted.TaxWithholdCurrency,
                        _taxWithholdUncommitted.TransDate);
                }
            }
        }

        return _taxWithholdUncommitted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summaryTmpTaxWithholdCalc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Summaries the amount group by withhold tax group, withhold item tax group and withhold tax code.
    /// </summary>
    private void summaryTmpTaxWithholdCalc()
    {
        insert_recordset taxWithholdCalcTmpSum (InvoiceAmount, InvoiceTaxAmount, TaxWithholdGroup, TaxWithholdItemGroup, TaxWithholdCode, HeadingTableId, HeadingRecId)
            select sum(InvoiceAmount), sum(InvoiceTaxAmount), TaxWithholdGroup, TaxWithholdItemGroup, TaxWithholdCode, HeadingTableId, HeadingRecId from taxWithholdCalcTmp
                group by taxWithholdCalcTmp.TaxWithholdGroup,
                    taxWithholdCalcTmp.TaxWithholdItemGroup,
                    taxWithholdCalcTmp.TaxWithholdCode,
                    taxWithholdCalcTmp.HeadingTableId,
                    taxWithholdCalcTmp.HeadingRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCalcBasicDataForLine</Name>
				<Source><![CDATA[
    public void fillCalcBasicDataForLine()
    {
        purchCalcTax.initCursor();

        Common line = purchCalcTax.nextLine();
        boolean isSpecQtyNotAll = purchCalcTax is PurchCalcTax_Purch && purchCalcTax.getSpecQty() != PurchUpdate::All;

        while (line)
        {
            // For purchase order (without create vendor invoice), the withholding tax shouldn't be calculated if the specQty isn't all and the qty is zero.
            if (isSpecQtyNotAll && purchCalcTax.transQty() == 0)
            {
                line= purchCalcTax.nextLine();
                numberOfLines++;
                continue;
            }

            TaxWithholdItemGroupId_TH taxWithholdItemGroup;
            TaxWithholdGroup taxWithholdGroup;
            PurchCategory procurementCategory;
            ItemId itemId;

            switch (line.TableId)
            {
                case tableNum(PurchLine) :
                    PurchLine purchLineLoc = line as PurchLine;
                    taxWithholdGroup = purchLineLoc.TaxWithholdGroup_TH;
                    taxWithholdItemGroup = purchLineLoc.TaxWithholdItemGroupHeading_TH;
                    itemId = purchLineLoc.ItemId;
                    procurementCategory = purchLineLoc.ProcurementCategory;
                    break;

                case tableNum(VendInvoiceInfoLine) :
                    VendInvoiceInfoLine vendInvoiceInfoLineLoc = line as VendInvoiceInfoLine;
                    taxWithholdGroup = vendInvoiceInfoLineLoc.TaxWithholdGroup;
                    taxWithholdItemGroup = vendInvoiceInfoLineLoc.TaxWithholdItemGroupHeadingId;
                    itemId = vendInvoiceInfoLineLoc.ItemId;
                    procurementCategory = vendInvoiceInfoLineLoc.ProcurementCategory;
                    break;

                default :
                    throw error(Error::wrongUseOfFunction(funcName()));
            }

            boolean isCalcWHTForLine = false;

            if (itemId)
            {
                isCalcWHTForLine = InventTableModule::find(itemId, ModuleInventPurchSales::Purch).TaxWithholdCalculate_TH;
            }
            else if (procurementCategory)
            {
                isCalcWHTForLine = ProcCategoryItemTaxGroup::getProcCategoryTaxItemWithholdItemGroup(procurementCategory).TaxWithholdCalculate;
            }

            AmountCur lineAmount = purchCalcTax.transLineAmount();

            if (isCalcWHTForLine && lineAmount)
            {
                if (endDiscPercent && purchCalcTax.lineEndDisc())
                {
                    lineAmount -= purchCalcTax.lineEndDiscAmount(lineAmount);
                }

                lineAmount = this.deducteCashDisc(lineAmount);
                AmountCur taxAmount = TaxUncommitted::getCalculatedTaxAmountForSourceLine(line.TableId, line.RecId, false);

                totalInvoiceAmount += (inclTax ? lineAmount : lineAmount + taxAmount);

                if (taxWithholdGroup && taxWithholdItemGroup)
                {
                    TaxWithholdGroupData taxWithholdGroupData;
                    TaxWithholdOnItem_TH taxWithholdOnItem_TH;

                    while select TaxWithholdCode from taxWithholdOnItem_TH
                        where taxWithholdOnItem_TH.TaxWithholdItemGroupHeading_TH == taxWithholdItemGroup
                            exists join taxWithholdGroupData
                                where taxWithholdGroupData.TaxWithholdGroup == taxWithholdGroup
                                    && taxWithholdOnItem_TH.TaxWithholdCode == taxWithholdGroupData.TaxWithholdCode
                    {
                        taxWithholdCalcTmp = this.fillTaxWithholdCalcTmp(
                            taxWithholdCalcTmp,
                            [taxWithholdGroup,
                            taxWithholdItemGroup,
                            taxWithholdOnItem_TH.TaxWithholdCode,
                            inclTax ? lineAmount - taxAmount : lineAmount,
                            taxAmount]);

                        taxWithholdCalcTmpList.add(taxWithholdCalcTmp);
                    }
                }
            }

            // Process line charges
            if (taxWithholdCalcTmpMarkupList)
            {
                while select * from taxWithholdCalcTmpMarkup
                    where taxWithholdCalcTmpMarkup.TransTableId == line.TableId
                        && taxWithholdCalcTmpMarkup.TransRecId == line.RecId
                {
                    taxWithholdCalcTmp.data(taxWithholdCalcTmpMarkup);
                    taxWithholdCalcTmpList.add(taxWithholdCalcTmp);
                }
            }

            line= purchCalcTax.nextLine();
            numberOfLines++;
        }

        // Process header charges
        if (taxWithholdCalcTmpMarkupList && headingTableId)
        {
            if (headingTableId == tableNum(VendInvoiceInfoTable))
            {
                VendInvoiceInfoTable vendInvoiceInfoTable = VendInvoiceInfoTable::findRecId(headingRecId);

                if (VendInvoiceInfoSubTable::count(vendInvoiceInfoTable.ParmId, vendInvoiceInfoTable.TableRefId) > 1)
                {
                    // Process summary invoice, post multiple POs in one invoice.
                    while select * from taxWithholdCalcTmpMarkup
                        where taxWithholdCalcTmpMarkup.TransTableId == headingTableId
                            && taxWithholdCalcTmpMarkup.TransRecId == headingRecId
                    {
                        taxWithholdCalcTmp.data(taxWithholdCalcTmpMarkup);
                        taxWithholdCalcTmpList.add(taxWithholdCalcTmp);
                    }
                }
                else
                {
                    VendInvoiceInfoSubTable vendInvoiceInfoSubTable;

                    while select * from taxWithholdCalcTmpMarkup
                        exists join vendInvoiceInfoSubTable
                            where taxWithholdCalcTmpMarkup.TransTableId == vendInvoiceInfoSubTable.TableId
                                && taxWithholdCalcTmpMarkup.TransRecId == vendInvoiceInfoSubTable.RecId
                                && vendInvoiceInfoSubTable.ParmId == vendInvoiceInfoTable.ParmId
                                && vendInvoiceInfoSubTable.TableRefId == vendInvoiceInfoTable.TableRefId
                    {
                        taxWithholdCalcTmp.data(taxWithholdCalcTmpMarkup);
                        taxWithholdCalcTmpList.add(taxWithholdCalcTmp);
                    }
                }
            }
            else
            {
                while select * from taxWithholdCalcTmpMarkup
                    where taxWithholdCalcTmpMarkup.TransTableId == headingTableId
                        && taxWithholdCalcTmpMarkup.TransRecId == headingRecId
                {
                    taxWithholdCalcTmp.data(taxWithholdCalcTmpMarkup);
                    taxWithholdCalcTmpList.add(taxWithholdCalcTmp);
                }
            }
        }

        taxWithholdCalcTmpList.insertDatabase();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>