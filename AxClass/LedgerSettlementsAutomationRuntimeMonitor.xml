<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerSettlementsAutomationRuntimeMonitor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerSettlementsAutomationRuntimeMonitor</c> class handles monitoring running ledger settlements automations and logging
/// success or failure messages based on the running status of the automation.
/// </summary>
internal final class LedgerSettlementsAutomationRuntimeMonitor extends SysOperationServiceController
{
    private LedgerSettlementsAutomationRuntimeMonitorContract contract;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getContract</Name>
				<Source><![CDATA[
    private LedgerSettlementsAutomationRuntimeMonitorContract getContract()
    {
        return this.getDataContractObject(classStr(LedgerSettlementsAutomationRuntimeMonitorContract)) as LedgerSettlementsAutomationRuntimeMonitorContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCaption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected ClassDescription defaultCaption()
    {
        return "@GeneralLedger:LedgerSettlementsRuntimeMonitorCaption";
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ClassDescription caption()
    {
        return this.defaultCaption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runMonitor</Name>
				<Source><![CDATA[
    internal void runMonitor(LedgerSettlementsAutomationRuntimeMonitorContract _contract)
    {
        contract = _contract;

        if (contract.validate())
        {
            if (contract.parmIsFinalRuntimeMonitor())
            {
                this.validateFinalState();
            }
            else
            {
                this.validateCurrentState();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCurrentState</Name>
				<Source><![CDATA[
    private void validateCurrentState()
    {
        Batch batch;

        select count(RecId) from batch
            where batch.BatchJobId == contract.parmBatchJobId()
                && (batch.Status == BatchStatus::Canceled
                    || batch.Status == BatchStatus::Cancelling
                    || batch.Status == BatchStatus::Error);
        
        boolean isValid = batch.RecId == 0;

        if (!isValid)
        {
            this.logError();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFinalState</Name>
				<Source><![CDATA[
    private void validateFinalState()
    {
        Batch batch;

        select count(RecId) from batch
            where batch.BatchJobId == contract.parmBatchJobId()
                && batch.Status != BatchStatus::Finished
                && batch.RecId != BatchHeader::getCurrentBatchTask().RecId;
                
        boolean isValid = batch.RecId == 0;

        if (isValid)
        {
            this.logFinalSuccess();
        }
        else
        {
            this.logError();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logFinalSuccess</Name>
				<Source><![CDATA[
    private void logFinalSuccess()
    {
        ttsbegin;
        
        this.createMessageLog(false);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logError</Name>
				<Source><![CDATA[
    private void logError()
    {
        ttsbegin;
        
        this.createMessageLog(true);

        ttscommit;

        throw error(contract.parmFailureMessage());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMessageLog</Name>
				<Source><![CDATA[
    private void createMessageLog(boolean _isError)
    {
        ProcessExecutionSourceLink sourceLink;

        select forupdate firstonly sourceLink
            where sourceLink.RecId == contract.parmProcessExecutionSourceLinkRecId();

        if (_isError)
        {
            sourceLink.Message = contract.parmFailureMessage();
            sourceLink.Status = ProcessExecutionSourceStatus::Error;
        }
        else
        {
            sourceLink.Message = contract.parmSuccessMessage();
            sourceLink.Status = ProcessExecutionSourceStatus::Success;
        }
        sourceLink.update();
        
        ProcessExecutionMessageLogItem messageLogItem = ProcessExecutionMessageLogItem::construct();
        messageLogItem.parmProcessExecutionSourceLink(contract.parmProcessExecutionSourceLinkRecId());
        if (_isError)
        {
            messageLogItem.parmException(Exception::Error);
            messageLogItem.parmMessage(contract.parmFailureMessage());
        }
        else
        {
            messageLogItem.parmException(Exception::Info);
            messageLogItem.parmMessage(contract.parmSuccessMessage());
        }

        ProcessExecutionMessageLog::insertMessage(messageLogItem);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>