<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTransType_Vend</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerJournalTransType_Vend extends LedgerJournalTransType
{
    VendTable vendTableAccountNum;
    VendTable vendTableOffsetAccountNum;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultOffsetDefaultDimension</Name>
				<Source><![CDATA[
    protected void defaultOffsetDefaultDimension()
    {
        if (operation == LedgerJournalOperation::Create)
        {
            if (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::FixedAssets && !ledgerJournalTrans.OffsetDefaultDimension)
            {
                LedgerJournalEngine ledgerJournalEngine = LedgerJournalEngine::construct(ledgerJournalTrans.ledgerJournalTable().JournalType);

                ledgerJournalEngine.offsetAccountModified(ledgerJournalTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTaxItemGroup</Name>
				<Source><![CDATA[
    protected void defaultTaxItemGroup()
    {
        // don't default for Vend
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTaxWithholdGroup</Name>
				<Source><![CDATA[
    protected void defaultTaxWithholdGroup()
    {
        TaxGroupJournal taxWithholdGroup;

        if (operation == LedgerJournalOperation::Create)
        {
            if (!ledgerJournalTrans.isFieldSet(fieldNum(LedgerJournalTrans, TaxWithholdGroup)))
            {
                taxWithholdGroup = this.determineDefaultTaxWithholdGroup();
                ledgerJournalTrans.TaxWithholdGroup = taxWithholdGroup;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultCurrencyCode</Name>
				<Source><![CDATA[
    protected CurrencyCode determineDefaultCurrencyCode()
    {
        CurrencyCode currencyCode;

        if (ledgerJournalTrans.AccountType == LedgerJournalACType::Vend && ledgerJournalTrans.parmLedgerDimension())
        {
            this.initializeVendTableAccountNum();
            // get CurrencyCode from the account first
            currencyCode = vendTableAccountNum.Currency;
        }

        // if still not defaulted, use fallback
        if (currencyCode == '')
        {
            currencyCode = super();
        }

        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultDimension</Name>
				<Source><![CDATA[
    protected DimensionDefault determineDefaultDimension()
    {
        DimensionDefault defaultDimension;
        DimensionDefault defaultDimensionVendTableAccountNum;

        defaultDimension = super();

        if (ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
        {
            this.initializeVendTableAccountNum();

            if (vendTableAccountNum && vendTableAccountNum.DefaultDimension)
            {
                defaultDimensionVendTableAccountNum = vendTableAccountNum.DefaultDimension;
                defaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(defaultDimension, defaultDimensionVendTableAccountNum);
            }
        }

        return defaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultTaxGroup</Name>
				<Source><![CDATA[
    protected TaxGroupJournal determineDefaultTaxGroup()
    {
        TaxGroupJournal taxGroup;

        if (ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
        {
            this.initializeVendTableAccountNum();
            if (vendTableAccountNum)
            {
                taxGroup = vendTableAccountNum.TaxGroup;
            }
        }

        return taxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultTaxWithholdGroup</Name>
				<Source><![CDATA[
    protected TaxGroupJournal determineDefaultTaxWithholdGroup()
    {
        TaxGroupJournal taxWithholdGroup;

        if (ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
        {
            this.initializeVendTableAccountNum();
            if (vendTableAccountNum)
            {
                taxWithholdGroup = vendTableAccountNum.TaxWithholdGroup;
            }
        }

        return taxWithholdGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeVendTableAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the vendor for a ledger journal transaction.
    /// </summary>
    protected void initializeVendTableAccountNum()
    {
        if (ledgerJournalTrans.parmLedgerDimension())
        {
            if (ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
            {
                if (vendTableAccountNum.DataAreaId != ledgerJournalTrans.Company ||
                    vendTableAccountNum.AccountNum != ledgerJournalTrans.parmAccount())
                {
                    this.defaultCompany();
                    this.validateCompany();
                    vendTableAccountNum = ledgerJournalTrans.findVendTable();
                }
            }
            else
            {
                vendTableAccountNum.clear();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeVendTableOffsetAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the vendor for a ledger journal offset transaction.
    /// </summary>
    protected void initializeVendTableOffsetAccountNum()
    {
        if (ledgerJournalTrans.parmOffsetLedgerDimension())
        {
            if (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend)
            {
                if (vendTableOffsetAccountNum.DataAreaId != ledgerJournalTrans.OffsetCompany ||
                    vendTableOffsetAccountNum.AccountNum != ledgerJournalTrans.parmOffsetAccount())
                {
                    this.defaultOffsetCompany();
                    this.validateOffsetCompany();
                    vendTableOffsetAccountNum = ledgerJournalTrans.findVendForOffset();
                }
            }
            else
            {
                vendTableOffsetAccountNum.clear();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an instance of the <c>LedgerJournalTransType_Vend</c> class.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    An instance of the <c>LedgerJournalTrans</c> table that is defaulted and validated.
    /// </param>
    /// <param name="_operation">
    ///    A <c>LedgerJournalOperation</c> enumeration value that indicates the callers operation.
    /// </param>
    /// <param name="_isInteractiveContext">
    ///    A Boolean value that indicates the caller context.
    /// </param>
    protected void new(LedgerJournalTrans _ledgerJournalTrans, LedgerJournalOperation _operation, boolean _isInteractiveContext)
    {
        ledgerJournalTrans = _ledgerJournalTrans;
        operation = _operation;
        isInteractiveContext = _isInteractiveContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLedgerDimension</Name>
				<Source><![CDATA[
    protected boolean validateLedgerDimension(boolean _logFault = true)
    {
        boolean isValid = true;

        if (ledgerJournalTrans.AccountType == LedgerJournalACType::Vend && ledgerJournalTrans.parmLedgerDimension())
        {
            this.initializeVendTableAccountNum();
            if (!vendTableAccountNum)
            {
                isValid = false;
                if (_logFault)
                {
                    checkFailed(strFmt("@SYS11817", ledgerJournalTrans.parmAccount()));
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOffsetLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the offset ledger dimension is correct for the given account type.
    /// </summary>
    /// <param name = "logFault">true if an error should be added to the infolog; otherwise, suppress. Optional.</param>
    /// <returns>true if the offset ledger dimension is valid; otherwise, false.</returns>
    protected boolean validateOffsetLedgerDimension(boolean _logFault = true)
    {
        boolean isValid = true;

        if (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend && ledgerJournalTrans.parmOffsetLedgerDimension())
        {
            this.initializeVendTableOffsetAccountNum();
            if (!vendTableOffsetAccountNum)
            {
                isValid = false;
                if (_logFault)
                {
                    checkFailed(strFmt("@SYS11817", ledgerJournalTrans.parmOffsetAccount()));
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineCashDiscCode</Name>
				<Source><![CDATA[
    protected CashDiscCode determineCashDiscCode()
    {
        CashDiscCode cashDiscCode = ledgerJournalTrans.CashDiscCode;

        if (!cashDiscCode)
        {
            if (this.isVendInvoiceEntryType())
            {
                this.initializeVendTableAccountNum();

                if (vendTableAccountNum && vendTableAccountNum.CashDisc)
                {
                    cashDiscCode = vendTableAccountNum.CashDisc;
                }
            }
        }

        return cashDiscCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDateCashDiscAndCashDiscAmount</Name>
				<Source><![CDATA[
    protected container determineDateCashDiscAndCashDiscAmount()
    {
        container dateCashDiscAndCashDiscAmount;

        if (ledgerJournalTrans.DateCashDisc == dateNull() || !ledgerJournalTrans.CashDiscAmount)
        {
            if (this.isVendInvoiceEntryType())
            {
                dateCashDiscAndCashDiscAmount = LedgerJournalEngine_Server::calcVirtualCashDiscOnInvoice(ledgerJournalTrans, 0);
            }
        }

        return dateCashDiscAndCashDiscAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determinePostingProfile</Name>
				<Source><![CDATA[
    protected PostingProfile determinePostingProfile()
    {
        PostingProfile postingProfile = ledgerJournalTrans.PostingProfile;

        if (!postingProfile)
        {
            if (this.isVendInvoiceEntryType())
            {
                postingProfile = VendParameters::find().PostingProfile;
            }
        }

        return postingProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineCustVendBankAccountId</Name>
				<Source><![CDATA[
    protected BankAccountID determineCustVendBankAccountId()
    {
        BankAccountID bankAcccountId = ledgerJournalTrans.CustVendBankAccountId;

        if (!ledgerJournalTrans.CustVendBankAccountId)
        {
            if (this.isVendInvoiceEntryType())
            {
                this.initializeVendTableAccountNum();
                if (vendTableAccountNum && vendTableAccountNum.BankAccount)
                {
                    bankAcccountId = vendTableAccountNum.BankAccount;
                }
            }
        }
        return bankAcccountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineTax1099Fields</Name>
				<Source><![CDATA[
    protected Tax1099FieldsRecId determineTax1099Fields()
    {
        Tax1099FieldsRecId tax1099FieldsRecId = ledgerJournalTrans.Tax1099Fields;

        if (!tax1099FieldsRecId)
        {
            if (this.isVendInvoiceEntryType())
            {
                this.initializeVendTableAccountNum();

                if (vendTableAccountNum && vendTableAccountNum.Tax1099Fields)
                {
                    tax1099FieldsRecId = vendTableAccountNum.Tax1099Fields;
                }
            }
        }
        return tax1099FieldsRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDue</Name>
				<Source><![CDATA[
    protected DueDate determineDue()
    {
        DueDate dueDate;

        if (ledgerJournalTrans.Due == dateNull())
        {
            if (ledgerJournalTrans.DocumentDate || ledgerJournalTrans.TransDate)
            {
                if (this.isVendInvoiceEntryType())
                {
                    ledgerJournalTrans.Due = ledgerJournalTrans.DocumentDate ? ledgerJournalTrans.DocumentDate : ledgerJournalTrans.TransDate;

                    dueDate = PaymCalendarSourceLedgerJournalTrans::getUpdatedDueDate(ledgerJournalTrans, '');
                }
            }
        }
        else
        {
            dueDate = ledgerJournalTrans.Due;
        }

        return dueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determinePayment</Name>
				<Source><![CDATA[
    protected PaymTermId determinePayment()
    {
        PaymTermId payment = ledgerJournalTrans.Payment;

        if (!payment)
        {
            if (this.isVendInvoiceEntryType())
            {
                this.initializeVendTableAccountNum();

                if (vendTableAccountNum && vendTableAccountNum.PaymTermId)
                {
                    payment = vendTableAccountNum.PaymTermId;
                }
            }
        }

        return payment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determinePaymMode</Name>
				<Source><![CDATA[
    protected PaymMode determinePaymMode()
    {
        PaymMode methodOfPayment = ledgerJournalTrans.PaymMode;

        if (!methodOfPayment)
        {
            if (this.isVendInvoiceEntryType())
            {
                this.initializeVendTableAccountNum();

                if (vendTableAccountNum && vendTableAccountNum.PaymMode)
                {
                    methodOfPayment = vendTableAccountNum.PaymMode;
                }
            }
        }

        return methodOfPayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determinePaymSpec</Name>
				<Source><![CDATA[
    protected PaymSpec determinePaymSpec()
    {
        PaymSpec paymentSpecification = ledgerJournalTrans.PaymSpec;

        if (!paymentSpecification)
        {
            if (this.isVendInvoiceEntryType())
            {
                this.initializeVendTableAccountNum();

                if (vendTableAccountNum && vendTableAccountNum.PaymSpec)
                {
                    paymentSpecification = vendTableAccountNum.PaymSpec;
                }
            }
        }

        return paymentSpecification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineVATNumJournal</Name>
				<Source><![CDATA[
    protected VATNumJournal determineVATNumJournal()
    {
        VATNumJournal taxExemptNumber = ledgerJournalTrans.VATNumJournal;

        if (!taxExemptNumber)
        {
            if (this.isVendInvoiceEntryType())
            {
                this.initializeVendTableAccountNum();

                if (vendTableAccountNum && vendTableAccountNum.VATNum)
                {
                    taxExemptNumber = vendTableAccountNum.VATNum;
                }
            }
        }

        return taxExemptNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves an initialized instance of the <c>LedgerJournalTransType_Vend</c> class.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    An instance of the <c>LedgerJournalTrans</c> table that represents the data that is applied and
    ///    validated.
    /// </param>
    /// <param name="_operation">
    ///    A <c>LedgerJournalOperation</c> enumeration value that indicates the callers operation.
    /// </param>
    /// <param name="_isInteractiveContext">
    ///    A Boolean value that indicates the caller context.
    /// </param>
    /// <returns>
    ///    A <c>LedgerJournalTableType_Vend</c> instance.
    /// </returns>
    public static LedgerJournalTransType_Vend construct(LedgerJournalTrans _ledgerJournalTrans, LedgerJournalOperation _operation, boolean _isInteractiveContext)
    {
        return new LedgerJournalTransType_Vend(_ledgerJournalTrans, _operation, _isInteractiveContext);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultOffsetAccount</Name>
				<Source><![CDATA[
    protected void defaultOffsetAccount()
    {
        if (!(operation == LedgerJournalOperation::Create
            && ledgerJournalTrans.OffsetLedgerDimension == 0
            && this.isConsumerStateTracked()
            && (this.defaultOffsetAccountForPurchaseLedger() || this.defaultOffsetAccountForPayment())))
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVendInvoiceEntryType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the JournalType is either VendInvoiceRegister or PurchaseLedger.
    /// </summary>
    /// <remarks>
    /// There are three types of invoices:
    ///     1. General Journal (Daily)
    ///     2. Vendor invoice journal (VendInvoiceRegister)
    ///     3. Vendor invoice register (PurchaseLedger)
    /// Invoices can be entered only through VendInvoiceRegister or PurchaseLedger.
    /// </remarks>
    /// <returns>true if JournalType is either VendInvoiceRegister or PurchaseLedger; otherwise, false.</returns>
    private boolean isVendInvoiceEntryType()
    {
        boolean journalTypeIsVendInvoiceRegisterOrPurchaseLedger;

        this.initializeLedgerJournalTable();

        if (ledgerjournalTable.JournalType == LedgerJournalType::Daily
            || ledgerjournalTable.JournalType == LedgerJournalType::VendInvoiceRegister
            || ledgerjournalTable.JournalType == LedgerJournalType::PurchaseLedger)
        {
            journalTypeIsVendInvoiceRegisterOrPurchaseLedger = true;
        }

        return journalTypeIsVendInvoiceRegisterOrPurchaseLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultOffsetAccountForPurchaseLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default value for OffsetLedgerDimension property on the <c>LedgerJournalTrans</c> table buffer if the JournalType is PurchaseLedger.
    /// </summary>
    /// <returns>true if the default value for OffsetLedgerDimension is set; otherwise, false</returns>
    private boolean defaultOffsetAccountForPurchaseLedger()
    {
        boolean offsetAccountForPurchaseLedgerDefaulted;
        LedgerDimensionDefaultAccount ledgerDimensionDefaultAccount;
        LedgerDimensionAccount ledgerDimensionAccount;

        this.initializeLedgerJournalTable();

        if (ledgerjournalTable.JournalType == LedgerJournalType::PurchaseLedger)
        {
            this.initializeVendTableAccountNum();

            ledgerDimensionDefaultAccount = VendLedgerAccounts::purchasingOffsetLedgerDimension(vendTableAccountNum.AccountNum, VendParameters::find().PostingProfile);

            ledgerDimensionAccount = ledgerJournalTrans.getOffsetLedgerDimensionForLedgerType(ledgerDimensionDefaultAccount, ledgerJournalTrans.getOffsetCompany());

            this.defaultFieldValue(fieldNum(LedgerJournalTrans, OffsetLedgerDimension), ledgerDimensionAccount); 

            offsetAccountForPurchaseLedgerDefaulted = true;
        }

        return offsetAccountForPurchaseLedgerDefaulted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultOffsetAccountForPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default value for OffsetLedgerDimension property on the <c>LedgerJournalTrans</c> table buffer if the JournalType is Payment.
    /// </summary>
    /// <remarks>
    /// Additional condition for setting the default OffsetLedgerDimension is the vendor should have a bridging account.
    /// In this case, the OffsetCompany is set to the current company and OffsetAccountType is set to Ledger.
    /// </remarks>
    /// <returns>true if the default value for OffsetCompany, OffsetAccountType and OffsetLedgerDimension is set; otherwise, false</returns>
    private boolean defaultOffsetAccountForPayment()
    {
        boolean offsetAccountForPaymentDefaulted;

        this.initializeLedgerJournalTable();
        if (ledgerJournalTable.JournalType == LedgerJournalType::Payment && ledgerJournalTrans.PaymMode != '')
        {
            // When payments use bridging, we know the offset information
            VendPaymModeTable vendPaymModeTable = VendPaymModeTable::find(ledgerJournalTrans.PaymMode);

            if (vendPaymModeTable.FurtherPosting == NoYes::Yes)
            {
                this.defaultFieldValue(fieldNum(LedgerJournalTrans, OffsetCompany), curExt());
                this.defaultFieldValue(fieldNum(LedgerJournalTrans, OffsetAccountType), LedgerJournalACType::Ledger);
                this.defaultFieldValue(fieldNum(LedgerJournalTrans, OffsetLedgerDimension), vendPaymModeTable.InterCompanyLedgerDimension);
                offsetAccountForPaymentDefaulted = true;
            }
        }
        return offsetAccountForPaymentDefaulted;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>