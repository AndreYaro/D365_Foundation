<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSumDatePhysicalDim</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventSumDatePhysicalDim extends InventSumDatePhysical
{
    InventDim       inventDimCriteria;
    InventDimParm   inventDimParm;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmInventDim</Name>
				<Source><![CDATA[
    InventDim parmInventDim(InventDim _inventDimCriteria = inventDimCriteria)
    {
        inventDimCriteria = _inventDimCriteria;
        return inventDimCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimParm</Name>
				<Source><![CDATA[
    InventDimParm parmInventDimParm(InventDimParm _inventDimParm = inventDimParm)
    {
        inventDimParm = _inventDimParm;
        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectInventSum</Name>
				<Source><![CDATA[
    protected void selectInventSum()
    {
        this.addInventSum(InventSum::findSumQty(itemId,inventDimCriteria,inventDimParm));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subtracts the quantities updated after the query date from the sum.
    /// </summary>
    /// <param name="_inventTrans">
    /// Transaction used for the adjustment.
    /// </param>
    protected void addInventTrans(InventTrans _inventTrans)
    {
        boolean isFinancialDateInRange  = _inventTrans.DateFinancial > perDate;
        boolean isPhysicalDateInRange   = _inventTrans.DatePhysical > perDate;

        if (isFinancialDateInRange)
        {
            this.addInventTransFinancial(_inventTrans);
        }

        if (isPhysicalDateInRange)
        {
            this.addInventTransPhysical(_inventTrans);
        }

        // We should not include the transaction in the picked/registered quantities if it has already been accounted for in the physical or financial additions.
        if (!isFinancialDateInRange && !isPhysicalDateInRange && _inventTrans.DateInvent > perDate)
        {
            if (!_inventTrans.DateFinancial && !_inventTrans.DatePhysical)
            {
                this.addInventTransPickedRegistered(_inventTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventTransPickedRegistered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subtracts the quantity picked or registered after the query date from the sum.
    /// </summary>
    /// <param name="_inventTrans">
    /// Transaction used for adjustment.
    /// </param>
    protected void addInventTransPickedRegistered(InventTrans _inventTrans)
    {
        if (_inventTrans.Qty < 0)
        {
            // Negative quantity, addition is subtraction
            cwPickedQty += _inventTrans.PdsCWQty;
            pickedQty   += _inventTrans.Qty;
        }
        else if (_inventTrans.Qty > 0)
        {
            cwRegisteredQty -= _inventTrans.PdsCWQty;
            registeredQty   -= _inventTrans.Qty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>requestedStatusIssue</Name>
				<Source><![CDATA[
    protected StatusIssue requestedStatusIssue()
    {
        return StatusIssue::Picked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requestedStatusReceipt</Name>
				<Source><![CDATA[
    protected StatusReceipt requestedStatusReceipt()
    {
        return StatusReceipt::Registered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectInventTrans</Name>
				<Source><![CDATA[
    protected void selectInventTrans()
    {
        InventSumDatePhysicalDimView inventSumDatePhysicalDimView;
        InventDim                    inventDim;
        
        if (inventDimParm.InventSerialIdFlag && inventDimCriteria.InventSerialId)
        {
            this.selectInventTransSerialOptimized();
            return;
        }
        
        while select sum(Qty), sum(PdsCWQty), StatusIssue, StatusReceipt, PackingSlipReturned, DateFinancial, DatePhysical, DateInvent
            from inventSumDatePhysicalDimView
            group by StatusIssue, StatusReceipt, PackingSlipReturned, DateFinancial, DatePhysical, DateInvent
            where inventSumDatePhysicalDimView.ItemId                 == itemId
                  && inventSumDatePhysicalDimView.DateMax             >  perDate
                  && ((inventSumDatePhysicalDimView.StatusReceipt     <= this.requestedStatusReceipt()
                       && inventSumDatePhysicalDimView.StatusIssue    == StatusIssue::None)
                      || (inventSumDatePhysicalDimView.StatusReceipt  == StatusReceipt::None
                          && inventSumDatePhysicalDimView.StatusIssue <= this.requestedStatusIssue()))
            #InventDimExistsJoin(inventSumDatePhysicalDimView.InventDimId, inventDim, inventDimCriteria, inventDimParm)
        {
            this.addInventTrans(inventSumDatePhysicalDimView.inventTrans());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectInventTransSerialOptimized</Name>
				<Source><![CDATA[
    private void selectInventTransSerialOptimized()
    {
        InventSumDatePhysicalDimView inventSumDatePhysicalDimView;
        InventDim                    inventDim;
        
        while #inventDimSelect(inventDim, inventDimCriteria, inventDimParm, forcePlaceholders tableId from, serialIdIdx)
            join sum(Qty), sum(PdsCWQty), StatusIssue, StatusReceipt, PackingSlipReturned, DateFinancial, DatePhysical, DateInvent
            from inventSumDatePhysicalDimView
            group by StatusIssue, StatusReceipt, PackingSlipReturned, DateFinancial, DatePhysical, DateInvent
            where inventSumDatePhysicalDimView.ItemId                 == itemId
                  && inventSumDatePhysicalDimView.DateMax             >  perDate
                  && ((inventSumDatePhysicalDimView.StatusReceipt     <= this.requestedStatusReceipt()
                       && inventSumDatePhysicalDimView.StatusIssue    == StatusIssue::None)
                      || (inventSumDatePhysicalDimView.StatusReceipt  == StatusReceipt::None
                          && inventSumDatePhysicalDimView.StatusIssue <= this.requestedStatusIssue()))
                  && inventSumDatePhysicalDimView.InventDimId         == inventDim.InventDimId
        {
            this.addInventTrans(inventSumDatePhysicalDimView.inventTrans());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValueQty</Name>
				<Source><![CDATA[
    protected void setValueQty()
    {
        this.selectInventSum();
        this.selectInventTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    static InventSumDatePhysicalDim newParameters(
        TransDate       _perDate,
        ItemId          _itemId,
        InventDim       _inventDimCriteria,
        InventDimParm   _inventDimParm
        )
    {
        InventSumDatePhysicalDim inventSumDatePhysicalDim = new InventSumDatePhysicalDim();

        inventSumDatePhysicalDim.parmItemId(_itemId);
        inventSumDatePhysicalDim.parmPerDate(_perDate);
        inventSumDatePhysicalDim.parmInventDim(_inventDimCriteria);
        inventSumDatePhysicalDim.parmInventDimParm(_inventDimParm);

        inventSumDatePhysicalDim.init();

        return inventSumDatePhysicalDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onHandQty</Name>
				<Source><![CDATA[
    static InventQty  onHandQty(
        TransDate       _transDate,
        ItemId          _itemId,
        InventDim       _inventDim,
        InventDimParm   _inventDimParm
        )
    {
        InventSumDatePhysicalDim   inventSumDatePhysicalDim = InventSumDatePhysicalDim::newParameters(_transDate,_itemId,_inventDim,_inventDimParm);

        return inventSumDatePhysicalDim.postedQty()     +
               inventSumDatePhysicalDim.receivedQty()   -
               inventSumDatePhysicalDim.deductedQty()   -
               inventSumDatePhysicalDim.pickedQty()     +
               inventSumDatePhysicalDim.registeredQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWOnHandQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the standard on-hand and catch weight on-hand quantities.
    /// </summary>
    /// <param name="_transDate">
    /// A <c>TransDate</c> value for which to find the on-hand quantity.
    /// </param>
    /// <param name="_itemId">
    /// An <c>ItemId</c> value for which to find the on-hand quantity.
    /// </param>
    /// <param name="_inventDim">
    /// An <c>InventDim</c> value for which to find on-hand quantity.
    /// </param>
    /// <param name="_inventDimParm">
    /// An <c>InventDimParm</c> record that is used in finding the on-hand quantity.
    /// </param>
    /// <returns>
    /// A container that contains the standard on-hand quantity and the catch weight on-hand quantity.
    /// </returns>
    public static container pdsCWOnHandQty(
        TransDate       _transDate,
        ItemId          _itemId,
        InventDim       _inventDim,
        InventDimParm   _inventDimParm)
    {
        InventSumDatePhysicalDim inventSumDatePhysicalDim =
            InventSumDatePhysicalDim::newParameters(
                _transDate,_itemId,_inventDim,_inventDimParm);

        return [inventSumDatePhysicalDim.postedQty()
                + inventSumDatePhysicalDim.receivedQty()
                - inventSumDatePhysicalDim.deductedQty()
                - inventSumDatePhysicalDim.pickedQty()
                + inventSumDatePhysicalDim.registeredQty(),
                inventSumDatePhysicalDim.pdsCWPostedQty()
                + inventSumDatePhysicalDim.pdsCWReceivedQty()
                - inventSumDatePhysicalDim.pdsCWDeductedQty()
                - inventSumDatePhysicalDim.pdsCWPickedQty()
                + inventSumDatePhysicalDim.pdsCWRegisteredQty() ];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>