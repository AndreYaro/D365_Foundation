<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWaveMethodStatusDisplay</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWaveMethodStatusDisplay</c> class provides wave method status display information in wave progress form.
/// </summary>
public class WHSWaveMethodStatusDisplay
{
    protected WHSWaveMethodStatus waveMethodStatus;
  
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmWaveMethodStatus</Name>
				<Source><![CDATA[
    public final WHSWaveMethodStatus parmWaveMethodStatus(WHSWaveMethodStatus _waveMethodStatus = waveMethodStatus)
    {
        waveMethodStatus = _waveMethodStatus;

        return waveMethodStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExecutedSteps</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets executed steps to show in wave progress form.
    /// </summary>
    /// <returns>
    /// Executed steps to show in wave progress form.
    /// </returns>
    public WHSExecutedSteps getExecutedSteps()
    {
        return waveMethodStatus.ExecutedSteps;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalStepsLabelText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets label text of total steps in General tab.
    /// </summary>
    /// <returns>
    /// The label text for field Total Steps in General Tab in wave progress form.
    /// </returns>
    public str getTotalStepsLabelText()
    {
        return "@WAX3152";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExecutedStepsLabelText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets label text of executed steps in General tab.
    /// </summary>
    /// <returns>
    /// The label text for field Executed Steps in General Tab in wave progress form.
    /// </returns>
    public str getExecutedStepsLabelText()
    {
        return "@WAX3150";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalStepsLabelTextInSubMethodStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets label text of total steps in sub wave method status tab.
    /// </summary>
    /// <returns>
    /// The label text for column Total Steps in Sub Method Tab in wave progress form.
    /// </returns>
    public str getTotalStepsLabelTextInSubMethodStatus()
    {
        return "@WAX3152";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExecutedStepsLabelTextInSubMethodStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to get label text of executed steps in sub wave method status tab.
    /// </summary>
    /// <returns>
    /// The label text for column Executed Steps in Sub Method Table in wave progress form.
    /// </returns>
    public str getExecutedStepsLabelTextInSubMethodStatus()
    {
        return "@WAX3150";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalStepsHelpTextInSubMethodStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets help text of total steps in sub wave method status tab.
    /// </summary>
    /// <returns>
    /// The help text for column Total Steps in Sub Method Tab in wave progress form.
    /// </returns>
    public str getTotalStepsHelpTextInSubMethodStatus()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExecutedStepsHelpTextInSubMethodStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets help text of executed steps in sub wave method status tab.
    /// </summary>
    /// <returns>
    /// The help text for column Executed Steps in Sub Method Table in wave progress form.
    /// </returns>
    public str getExecutedStepsHelpTextInSubMethodStatus()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>canShowEstimatedCompletionDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns if can show estimated completion date and time.
    /// </summary>
    /// <returns>
    /// True, if can show estimated completion data and time.
    /// </returns>
    public boolean canShowEstimatedCompletionDateTime()
    {
        if (waveMethodStatus.TotalSteps == 0 || this.getExecutedSteps() == 0 || waveMethodStatus.MethodEndDateTime > DateTimeUtil::minValue())
        {
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canShowEstimatedCompletionDateTimeInSubMethodStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns if can show estimated completion date and time in sub wave method status tab.
    /// </summary>
    /// <returns>
    /// True, if can show estimated completion data and time in sub wave method status tab.
    /// </returns>
    public boolean canShowEstimatedCompletionDateTimeInSubMethodStatus()
    {
        return waveMethodStatus.MethodEndDateTime == DateTimeUtil::minValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canShowTotalStepsInSubMethodStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns if show total steps in sub wave method status tab. 
    /// </summary>
    /// <returns>
    /// True, if show total steps in sub wave method status tab.
    /// </returns>
    public boolean canShowTotalStepsInSubMethodStatus()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWaveMethodStatusDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of a <c>WHSWaveMethodStatusDisplay</c> class based on a <c>WHSWaveMethodStatus</c> object.
    /// </summary>
    /// <param name = "_waveMethodStatus">The WHSWaveMethodStatus object passed to factory to create a WHSWaveMethodStatusDisplay instance.</param>
    /// <returns>A WHSWaveMethodStatusDisplay instance.</returns>
    static internal WHSWaveMethodStatusDisplay getWaveMethodStatusDisplay(WHSWaveMethodStatus _waveMethodStatus)
    {
        WhsPostMethodNameFactoryAttribute attribute = new WhsPostMethodNameFactoryAttribute(_waveMethodStatus.PostMethodName);
        WHSWaveMethodStatusDisplay instance = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(WHSWaveMethodStatusDisplay), attribute) as WHSWaveMethodStatusDisplay;
        if (!instance)
        {
            instance = new WHSWaveMethodStatusDisplay();
        }

        instance.parmWaveMethodStatus(_waveMethodStatus);

        return instance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>