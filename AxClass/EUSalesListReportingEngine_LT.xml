<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EUSalesListReportingEngine_LT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>EUSalesListReportingEngine_LT</c> extends the functionality of <c>EUSalesListReportingEngine</c>
///     class to support Lithuanian specific requirements.
/// </summary>
#ISOCountryRegionCodes
[CountryRegionAttribute(#isoLT)]
class EUSalesListReportingEngine_LT extends EUSalesListReportingEngine implements BatchRetryable
{
    // For Lithuania, we report corrected and not corrected lines together.
    // When reporting, we mark an aggregated as corrected iff one or more of the lines were corrections.
    boolean         isCurrentLineCorrection;

    FilingDate      filingDate;
    ContactInfo_LT  contactInfo;
    ReportType_LT   reportType;

    DialogField     dialogFilingDate;
    DialogField     dialogContactInfo;
    DialogField     dialogReportType;

    #define.CurrentVersion(1)

    #localmacro.CurrentList
        filingDate,
        contactInfo,
        reportType
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addHeader</Name>
				<Source><![CDATA[
    protected EUSalesListReportingHeader addHeader()
    {
        CompanyInfo                 companyInfo = companyInfo::find();
        EUSalesListReportingHeader  header;

        header                  = super();
        header.FilingDate       = filingDate;
        header.ContactInfo_LT   = contactInfo;
        header.ReportType_LT    = reportType;
        header.UserId_LT        = curUserId();
        header.StrippedVATNum   = TaxVATNumTable::stripVATNum(companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, filingDate), header.EUSalesListTaxCode);

        header.update();
        return header;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialogFilingDate    = dialog.addFieldValue(extendedTypeStr(FilingDate), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        dialogContactInfo   = dialog.addFieldValue(extendedTypeStr(ContactInfo_LT), contactInfo);
        dialogReportType    = dialog.addFieldValue(enumStr(ReportType_LT), ReportType_LT::Primary);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        filingDate  = dialogFilingDate.value();
        contactInfo = dialogContactInfo.value();
        reportType  = dialogReportType.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNewGroup</Name>
				<Source><![CDATA[
    protected boolean isNewGroup()
    {
        #DEFINE.FirstPageLines(9)
        #DEFINE.AdditionalPagesLines(16)

        boolean ret = false;

        // First page can only hold 9 lines.
        if (lineCount > #FirstPageLines)
        {
            // New group on lines 10, 26, 42 (assuming 16 lines per page after the first page.)
            ret = ((lineCount-#FirstPageLines-1) mod #AdditionalPagesLines) == 0;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLastLineAmounts</Name>
				<Source><![CDATA[
    protected void saveLastLineAmounts(EUSalesListReportingLine _euSalesListReportingLine)
    {
        if (isCurrentLineCorrection)
        {
            _euSalesListReportingLine.Corrected = true;
        }
        isCurrentLineCorrection = false;
        super(_euSalesListReportingLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer         version = RunBase::getVersion(packedClass);
        container       packedSuper;

        switch (version)
        {
            case #CurrentVersion:
                [version, #currentList, packedSuper] = packedClass;
                if (packedSuper)
                {
                    return super(packedSuper);
                }
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLineAmounts</Name>
				<Source><![CDATA[
    protected void updateLineAmounts(EUSalesListReportingLine _euSalesListReportingLine)
    {
        EUSalesList euSalesList;

        super(_euSalesListReportingLine);

        euSalesList = queryRun.get(tableNum(EUSalesList));
        isCurrentLineCorrection = isCurrentLineCorrection || euSalesList.Corrected;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return EUSalesListReportingEngine::description();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>