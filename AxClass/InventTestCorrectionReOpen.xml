<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTestCorrectionReOpen</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventTestCorrectionReOpen</c> is used to remove the marking of test correction as closed.
/// </summary>
class InventTestCorrectionReOpen extends InventTestCorrectionUpdate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <param name="_dialog">
    ///    The initial dialog box that was created by the <c>RunBase</c> framework.
    /// </param>
    /// <param name="_forceOnClient">
    ///    This parameter is not used in this class. See the base class, <c>RunBase</c>, for a description.
    /// </param>
    /// <returns>
    ///    A <c>DialogRunbase</c> object.
    /// </returns>
    public Object dialog(DialogRunbase _dialog = null, boolean _forceOnClient =  false)
    {
        DialogRunbase dialog = this.dialogInternal(_dialog, _forceOnClient);
        dialog.formBuildDesign().dialogSize(0); // DialogSize::Small

        dialog.addText("@SYS114170");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the actual change of the ended marking.
    /// </summary>
    public void run()
    {
        InventTestCorrection    inventTestCorrection;

        super();
        ttsbegin;
        update_recordset inventTestCorrection
            setting
                CorrectionCompleted         = NoYes::No,
                CorrectionCompletedDateTime = utcDateTimeNull()
            where inventTestCorrection.InventNonConformanceID   == inventNonConformanceID
               && inventTestCorrection.RecId                    == recId
               && inventTestCorrection.CorrectionCompleted          == NoYes::Yes;

        if (inventTestCorrection.RowCount() != 1)
        {
            throw error(strFmt("@SYS114167", inventNonConformanceID));
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates <c>RunBase</c> classes.
    /// </summary>
    /// <param name="calledFrom">
    ///    See the base class for a description. The parameter is not used by this class.
    /// </param>
    /// <returns>
    ///    true if the validation succeeded; otherwise, false.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = super(calledFrom);

        if (inventNonConformanceID)
        {
            InventNonConformanceTable inventNonConformanceTable = InventNonConformanceTable::find(inventNonConformanceID);
            if (!inventNonConformanceTable
                || inventNonConformanceTable.InventNonConformanceApproval == InventNonConformanceApproval::Refused
                || inventNonConformanceTable.Closed == NoYes::Yes)
            {
                return checkFailed(strFmt("@SCM:OpenCorrectionForNonConformanceMessage", inventNonConformanceID));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventTestCorrectionReOpen construct()
    {
        return new InventTestCorrectionReOpen();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS114169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        InventTestCorrectionReOpen  inventTestCorrectionReOpen = InventTestCorrectionReOpen::construct();

        inventTestCorrectionReOpen.initFromArgs(args);

        if (!inventTestCorrectionReOpen.prompt())
        {
            return;
        }

        inventTestCorrectionReOpen.runOperation();

        if (args && args.record() && args.dataset() == tableNum(InventTestCorrection))
        {
            InventTestCorrectionUpdate::refreshCaller(args.record());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>