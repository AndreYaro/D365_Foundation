<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmmCreateMailing</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract public class SmmCreateMailing extends RunBase
{
    // Packed
    Filename        filename;
    NoYes           updateStatus;
    date            userDate;
    QueryRun        mailingQR;

    // Dialog
    DialogField     dialogFileName;
    DialogField     dialogSentDate;
    DialogField     dialogStatus;

    List            fileList;

    #define.CurrentVersion(2)
    #localmacro.CurrentList
        fileName,
        updateStatus,
        userDate
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the description from the current class by calling the static description method of the
    /// class.
    /// </summary>
    /// <returns>
    /// The description from the current class.
    /// </returns>
    /// <remarks>
    /// This method can be overridden to give a more precise description; for example, when you need
    /// internal variables to build the description text.The static description method of the
    /// <c>RunBase</c> class can be used to obtain the description of a class because you do not have to
    /// create an instance of the class to call it. However, this method speeds up displaying the
    /// description in a grid.
    /// </remarks>
    public ClassDescription caption()
    {
        return smmCreateMailing::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    /// created in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {

        // Mailing file
        DialogRunbase dialog = super();
        // File name
        dialog.addGroup("@SYS80053");
        // File name
        dialogFileName = dialog.addField(extendedtypestr(Filename), "@SYS80053");
        dialogFileName.value(this.fileName());

        // Add update status group
        dialog.addGroup("@SYS80052");
        dialogStatus = dialog.addField(enumstr(NoYes));
        dialogStatus.value(updateStatus);
        // Update Status
        dialogStatus.label("@SYS80055");

        // Date
        dialog.addGroup("@SYS80056");
        dialogSentDate = dialog.addField(extendedtypestr(TransDate));
        dialogSentDate.value(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        // Date sent
        dialogSentDate.label("@SYS80057");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileListPack</Name>
				<Source><![CDATA[
    container fileListPack()
    {
        return fileList.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    public Filename fileName()
    {
        return filename;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        updateStatus    = dialogStatus.value();
        userDate        = dialogSentDate.value();
        filename        = dialogFileName.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOverwriteMessage</Name>
				<Source><![CDATA[
    public str getOverwriteMessage()
    {
        #define.blank(' ')

        // <Filename> exists already. Overwrite?
        return filename + #blank + "@SYS80664";
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        // Init the list used to save the "lines" in the file
        fileList = new List(Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList,(mailingQR ? mailingQR.pack() : connull())];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileName</Name>
				<Source><![CDATA[
    Filename parmFileName(Filename _filename = filename)
    {
        filename = _filename;
        return filename;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateStatus</Name>
				<Source><![CDATA[
    boolean parmUpdateStatus(boolean _updateStatus = updateStatus)
    {
        updateStatus = _updateStatus;
        return updateStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserDate</Name>
				<Source><![CDATA[
    date parmUserDate(date _userDate = userDate)
    {
        userDate = _userDate;
        return userDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryRun</Name>
				<Source><![CDATA[
    public void setQueryRun(QueryRun _queryRun)
    {
        mailingQR = _queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a Select button is to be added to the dialog box.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    /// return a valid <c>queryRun</c> method. If you change the return value to false, the button will not
    /// be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        int         version = RunBase::getVersion(packedClass);
        container   packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList,packedQuery] = packedClass;
                if (SysQuery::isPackedOk(packedQuery))
                {
                    mailingQR = new QueryRun(packedQuery);
                }
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    void write(container line)
    {
        fileList.addEnd(line);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeHeader</Name>
				<Source><![CDATA[
    public void writeHeader()
    {
        #define.PartyId   ('PartyId')
        #define.CompanyName     ('CompanyName')
        #define.ContactTitle    ('ContactTitle')
        #define.ContactName     ('ContactName')
        #define.AddrLine1       ('AddrLine1')
        #define.AddrLine2       ('AddrLine2')
        #define.AddrLine3       ('AddrLine3')
        #define.AddrLine4       ('AddrLine4')
        #define.Addrline5       ('AddrLine5')
        #define.AddrLine6       ('AddrLine6')
        #define.AddrLine7       ('AddrLine7')
        #define.Telephone       ('Telephone')
        #define.Telefax         ('Telefax')
        #define.Email           ('E-mail')
        #define.FirstName       ('FirstName')
        #define.MiddleName      ('MiddleName')
        #define.LastName        ('LastName')
        #define.NickName        ('NickName')
        #define.Salutation1     ('Salutation1')
        #define.Salutation2     ('Salutation2')
        #define.Complimentary1  ('Complimentary1')
        #define.Complimentary2  ('Complimentary2')

        this.write(
            [#PartyId,
             #CompanyName,
        #ContactTitle,
        #ContactName,
        #AddrLine1,
        #AddrLine2,
        #AddrLine3,
        #AddrLine4,
        #AddrLine5,
        #AddrLine6,
        #AddrLine7,
        #Telephone,
        #Telefax,
        #Email,
        #FirstName,
        #MiddleName,
        #LastName,
        #NickName,
        #Salutation1,
        #Salutation2,
        #Complimentary1,
        #Complimentary2
        ]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeLine</Name>
				<Source><![CDATA[
    public void writeLine(DirPartyRecId _party, Name _name, ContactPerson _contactPerson )
    {
        LogisticsPostalAddress      postalAddress;
        LogisticsLocationEntity     location;
        DirPersonName               personName;
        ContactPerson               contactPerson = _contactPerson;
        location = DirParty::primaryPostalAddressLocation(contactPerson.Party);
        if (!(location && location.parmLocationRecId()))
        {
            postalAddress = DirParty::primaryPostalAddress(_party);
            DirParty::setPrimaryAddressLocation(contactPerson.Party, (postalAddress ?postalAddress.Location :0));
        }

        select FirstName, MiddleName, LastName from personName
                where personName.Person == contactPerson.Party;

        postalAddress = DirParty::primaryPostalAddress(contactPerson.Party);
        this.write(
            [_party,
             _name,
             contactPerson.Title,
             contactPerson.personName(),
             strline(postalAddress.Address, 0),
             strline(postalAddress.Address, 1),
             strline(postalAddress.Address, 2),
             strline(postalAddress.Address, 3),
             strline(postalAddress.Address, 4),
             strline(postalAddress.Address, 5),
             strline(postalAddress.Address, 6),
             contactPerson.phone(),
             contactPerson.telefax(),
             contactPerson.email(),
             personName.FirstName,
             personName.MiddleName,
             personName.LastName,
             contactPerson.getPerson(false).KnownAs,
             contactPerson.DocuIntro1,
             contactPerson.DocuIntro2,
             contactPerson.DocuGreeting1,
             contactPerson.DocuGreeting2
            ]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        // Mailing file
        return "@SYS80054";
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveFileToClient</Name>
				<Source><![CDATA[
    public static void saveFileToClient(Filename _filename, container _file)
    {
        #File

        TextStreamIo    ioData;
        List            list;
        ListEnumerator  le;

        // Open file for writing
        ioData = TextStreamIo::constructForWrite();

        // Check file open status
        if (!ioData)
        {
            // File '%1' could not be opened.
            throw error(strfmt("@SYS19312", _filename));
        }

        // Set file delimiters
        ioData.outRecordDelimiter(#delimiterEnter);
        ioData.outFieldDelimiter(#delimiterTab);

        // Create list and enumerator
        if (!_file)
        {
            throw error(strfmt("@SYS63093", funcname()));
        }

        list = List::create(_file);

        // Create the file from the list
        le = list.getEnumerator();
        while (le.moveNext())
        {
            ioData.write(le.current());
        }

        Filename filenameOnly, type, path;
        [filenameOnly, type, path] = Docu::splitFilename(_filename);

        // Add or fix extension if needed
        if (!type || type != 'csv')
        {
            type = 'csv';
        }

        File::SendFileToUser(ioData.getStream(), strFmt("%1.%2", filenameOnly, type));
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>