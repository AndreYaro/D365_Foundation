<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendCompensation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustVendCompensation</c> class creates the ledger journal table and trans records needed for the compensation feature.
/// </summary>
class CustVendCompensation
{
    // Server only variables
    real lineNum;
    VoucherJournal voucher;
    RecId ledgerCustRecId;
    RecId ledgerVendRecId;

    // Variables from client to server
    boolean useCust;
    container custTransRecIds;
    container vendTransRecIds;
    LedgerJournalNameId journalName;
    LedgerJournalId journalNum;
    TransDate transDate;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        useCust,
        custTransRecIds,
        vendTransRecIds,
        journalName,
        journalNum,
        transDate
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createJournalHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the ledger journal table records needed for the compensation feature.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// The journal has already been posted.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// The journal number does not exist.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Unable to create a new voucher.
    /// </exception>
    protected void createJournalHeader()
    {
        LedgerJournalTable ledgerJournalTable;

        if (journalNum)
        {
            ledgerJournalTable = LedgerJournalTable::find(journalNum);
            if (!ledgerJournalTable)
            {
                throw error(strFmt("@SYS17145", journalNum));
            }
            if (ledgerJournalTable.Posted)
            {
                throw error(strFmt("@SYS18421", ledgerJournalTable.JournalNum));
            }
        }
        else
        {
            ledgerJournalTable.clear();
            ledgerJournalTable.JournalName = journalName;
            ledgerJournalTable.JournalNum = JournalTableData::newTable(ledgerJournalTable).nextJournalId();
            ledgerJournalTable.initFromLedgerJournalName();
            ledgerJournalTable.insert();
            journalNum = ledgerJournalTable.JournalNum;
        }

        lineNum = (select maxof(LineNum) from ledgerJournalTrans where ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum).LineNum;

        voucher = new JournalVoucherNum(JournalTableData::newTable(ledgerJournalTable)).getNew(false);

        if (!voucher)
        {
            throw error("@SYS26396");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the ledger journal trans records needed for the compensation feature.
    /// </summary>
    /// <param name="_recIds">
    /// A container of CustVendTrans RecIds.
    /// </param>
    /// <param name="_type">
    /// A <c>LedgerJournalACType</c> type.
    /// </param>
    /// <param name="_journalAmount">
    /// The amount to settle.
    /// </param>
    /// <param name="_exchRate">
    /// The exchange rate of the amount to settle.
    /// </param>
    /// <param name="_settleSign">
    /// Determines if the amount is a credit or debit.
    /// </param>
    /// <returns>
    /// The recId of a <c>LedgerJournalTrans</c> record.
    /// </returns>
    protected RecId createJournalLines(container _recIds, LedgerJournalACType _type, AmountCur _journalAmount, ExchRate _exchRate, int _settleSign)
    {
        CustVendTrans trans = this.getTrans(_type == LedgerJournalACType::Cust, conPeek(_recIds, 1));
        Amount settleAmount = abs(_journalAmount);
        LedgerJournalTrans ledgerJournalTrans = this.insertJournalTrans(_type, trans.AccountNum, _journalAmount, trans.CurrencyCode, _exchRate);
        SpecTransManager specTransManager = SpecTransManager::newFromSpec(ledgerJournalTrans);
        Amount settleNow;
        CustVendTransOpen transOpen;
        int i;

        for (i = 1; i <= conLen(_recIds); i++)
        {
            trans = this.getTrans(_type == LedgerJournalACType::Cust, conPeek(_recIds, i));
            transOpen = new DictTable(_type == LedgerJournalACType::Cust ? tableNum(CustTransOpen) : tableNum(VendTransOpen)).makeRecord();
            while select transOpen
                where transOpen.RefRecId == trans.RecId
            {
                settleNow = min(settleAmount, abs(transOpen.AmountCur)) * sign(transOpen.AmountCur);
                settleAmount += _settleSign * settleNow;

                specTransManager.insert(transOpen.company(), transOpen.TableId, transOpen.RecId, settleNow, trans.CurrencyCode);
            }
        }

        return ledgerJournalTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get either a <c>CustTrans</c> or <c>VendTrans</c> record.
    /// </summary>
    /// <param name="_getCust">
    /// If true returns a <c>CustTrans</c> else a <c>VendTrans</c> record.
    /// </param>
    /// <param name="_recId">
    /// The recId of the record returned.
    /// </param>
    /// <returns>
    /// A <c>CustTrans</c> or <c>VendTrans</c> record.
    /// </returns>
    protected CustVendTrans getTrans(boolean _getCust, RecId _recId)
    {
        if (_getCust)
        {
            return CustTrans::find(_recId);
        }
        else
        {
            return VendTrans::find(_recId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransOpenForTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get either a <c>CustTransOpen</c> or <c>VendTransOpen</c> record for a corresponding <c>CustVendTrans</c> record.
    /// </summary>
    /// <param name="_getCust">
    /// If true returns a <c>CustTransOpen</c> else a <c>VendTransOpen</c> record.
    /// </param>
    /// <param name="_refRecId">
    /// The recId of the <c>CustVendTrans</c> record returned.
    /// </param>
    /// <returns>
    /// A <c>CustTransOpen</c> or <c>VendTransOpen</c> record.
    /// </returns>
    protected CustVendTransOpen getTransOpenForTrans(boolean _getCust, RecId _refRecId)
    {
        if (_getCust)
        {
            return CustTransOpen::findRefId(_refRecId);
        }
        else
        {
            return VendTransOpen::findRefId(_refRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts  ledger journal trans records needed for the compensation feature.
    /// </summary>
    /// <param name="_type">
    /// A <c>LedgerJournalACType</c> type.
    /// </param>
    /// <param name="_account">
    /// An account number.
    /// </param>
    /// <param name="_journalAmount">
    /// The amount to settle.
    /// </param>
    /// <param name="_currencyCode">
    /// The currency code of the amount to settle.
    /// </param>
    /// <param name="_exchRate">
    /// The exchange rate of the amount to settle.
    /// </param>
    /// <returns>
    /// The a <c>LedgerJournalTrans</c> record.
    /// </returns>
    protected LedgerJournalTrans insertJournalTrans(LedgerJournalACType _type, LedgerJournalAC _account, Amount _journalAmount, CurrencyCode _currencyCode, ExchRate _exchRate)
    {
        LedgerJournalTrans ledgerJournalTrans;

        lineNum++;

        ledgerJournalTrans.clear();
        ledgerJournalTrans.initValue();

        ledgerJournalTrans.LineNum = lineNum;
        ledgerJournalTrans.Voucher = voucher;
        ledgerJournalTrans.JournalNum = journalNum;
        ledgerJournalTrans.AccountType = _type;
        ledgerJournalTrans.parmAccount(_account, _type);
        ledgerJournalTrans.CurrencyCode = _currencyCode;
        ledgerJournalTrans.ExchRate = _exchRate;
        ledgerJournalTrans.SettleVoucher = SettlementType::SelectedTransact;
        ledgerJournalTrans.Txt = "@GLS109589";
        ledgerJournalTrans.TransDate = transDate;

        switch (ledgerJournalTrans.AccountType)
        {
            case LedgerJournalACType::Cust :
                ledgerJournalTrans.DefaultDimension = CustTable::find(_account).DefaultDimension;
                break;
            case LedgerJournalACType::Vend :
                ledgerJournalTrans.DefaultDimension = VendTable::find(_account).DefaultDimension;
                break;
        }

        if (_journalAmount > 0)
        {
            ledgerJournalTrans.AmountCurCredit = CurrencyExchangeHelper::amount(abs(_journalAmount), _currencyCode);
        }
        else
        {
            ledgerJournalTrans.AmountCurDebit = CurrencyExchangeHelper::amount(abs(_journalAmount), _currencyCode);
        }

        if (ledgerJournalTrans.AmountCurCredit || ledgerJournalTrans.AmountCurDebit)
        {
            ledgerJournalTrans.insert();
        }
        else
        {
            throw error("@SYS24803");
        }

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerCustRecId</Name>
				<Source><![CDATA[
    protected RecId parmLedgerCustRecId()
    {
        return ledgerCustRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerVendRecId</Name>
				<Source><![CDATA[
    protected RecId parmLedgerVendRecId()
    {
        return ledgerVendRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSetData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the data related information necessary process compensation.
    /// </summary>
    /// <param name="_useCust">
    /// true if customer transactions are the basis for compensation; otherwise, false.
    /// </param>
    /// <param name="_custTrans_ds">
    /// A <c>FormDataSource</c> containing <c>CustTrans</c> records.
    /// </param>
    /// <param name="_vendTrans_ds">
    /// A <c>FormDataSource</c> containing <c>VendTrans</c> records.
    /// </param>
    /// <param name="_conCustTransRecIds">
    /// A <c>container</c> of <c>CustTrans</c> record <c>RecId</c>s.
    /// </param>
    /// <param name="_conVendTransRecIds">
    /// A <c>container</c> of <c>VendTrans</c> record <c>RecId</c>s.
    /// </param>
    public void parmSetData(boolean _useCust, FormDataSource _custTrans_ds, FormDataSource _vendTrans_ds, container _conCustTransRecIds = conNull(), container _conVendTransRecIds = conNull())
    {
        useCust = _useCust;
        custTransRecIds = _conCustTransRecIds ? _conCustTransRecIds : CustVendCompensation::formDataSource2Container(_custTrans_ds, useCust);
        vendTransRecIds = _conVendTransRecIds ? _conVendTransRecIds : CustVendCompensation::formDataSource2Container(_vendTrans_ds, !useCust);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSetJournalName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the journal name to use for compensation transactions.
    /// </summary>
    /// <param name="_journalName">
    /// The name of a journal.
    /// </param>
    public void parmSetJournalName(LedgerJournalNameId _journalName)
    {
        journalName = _journalName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSetJournalNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the journal number to use for compensation.
    /// </summary>
    /// <param name="_journalNum">
    /// A ledger journal number.
    /// </param>
    public void parmSetJournalNum(LedgerJournalId _journalNum)
    {
        journalNum = _journalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSetTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the transaction date to use for compensation.
    /// </summary>
    /// <param name="_transDate">
    /// A transaction date.
    /// </param>
    public void parmSetTransDate(TransDate _transDate)
    {
        transDate = _transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates the business logic for the feature.
    /// </summary>
    protected void process()
    {
        AmountCur totalDebitAmount;
        AmountCur totalCreditAmount;
        AmountCur journalAmount;
        ExchRate exchRate;
        ExchRate exchRateTmp;

        [totalDebitAmount, exchRate] = this.totalOfTrans(useCust, useCust ? custTransRecIds : vendTransRecIds);
        [totalCreditAmount, exchRateTmp] = this.totalOfTrans(!useCust, !useCust ? custTransRecIds : vendTransRecIds);
        exchRate = min(exchRate, exchRateTmp);

        ttsbegin;

        this.createJournalHeader();

        journalAmount = abs(totalDebitAmount) < abs(totalCreditAmount) ? totalDebitAmount : - totalCreditAmount;

        if (useCust)
        {
            ledgerCustRecId = this.createJournalLines(custTransRecIds, LedgerJournalACType::Cust, journalAmount, exchRate, -1);
            ledgerVendRecId = this.createJournalLines(vendTransRecIds, LedgerJournalACType::Vend, -journalAmount, exchRate, 1);
        }
        else
        {
            ledgerVendRecId = this.createJournalLines(vendTransRecIds, LedgerJournalACType::Vend, journalAmount, exchRate, 1);
            ledgerCustRecId = this.createJournalLines(custTransRecIds, LedgerJournalACType::Cust, -journalAmount, exchRate, -1);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the business logic on the server.
    /// </summary>
    /// <returns>
    /// A container with two recIds for <c>LedgerJournalTrans</c> records, the customer and the vendor, respectively.
    /// </returns>
    public container run()
    {
        return CustVendCompensation::runOnServer(this.pack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalOfTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a container of total amount in <c>CustVendTrans</c> records and the smallest exchanges rate found.
    /// </summary>
    /// <param name="_useCust">
    /// If true totals  <c>CustTrans</c> else <c>VendTrans</c> records.
    /// </param>
    /// <param name="_recIds">
    /// A container of <c>CustVendTrans</c> recIds.
    /// </param>
    /// <returns>
    /// A two element container of the total amount in the <c>CustVendTrans</c> records and the smallest exchanges rate found.
    /// </returns>
    protected container totalOfTrans(boolean _useCust, container _recIds)
    {
        AmountCur total = 0;
        CustVendTrans trans;
        ExchRate exchRate = 0;
        int i;

        for (i = 1; i <= conLen(_recIds); i++)
        {
            trans = this.getTrans(_useCust, conPeek(_recIds, i));
            total += trans.AmountCur - trans.SettleAmountCur;
            if (trans.ExchRate)
            {
                if (exchRate)
                {
                    exchRate = min(exchRate, trans.ExchRate);
                }
                else
                {
                    exchRate = trans.ExchRate;
                }
            }
        }
        return [total, exchRate];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
        case #CurrentVersion:
            [version, #CurrentList] = packedClass;
            break;

        default:
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of CustVendCompensation.
    /// </summary>
    /// <param name="_packed">
    /// A <c>container</c> of the serialized state of the class.
    /// </param>
    /// <returns>
    /// AN instance of the <c>CustVendCompensation</c> class.
    /// </returns>
    public static CustVendCompensation construct(container _packed)
    {
        CustVendCompensation instance = new CustVendCompensation();
        instance.unpack(_packed);
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formDataSource2Container</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns recIds for records in <c>FormDataSource</c>.
    /// </summary>
    /// <param name="_ds">
    /// A <c>FormDataSource</c> object.
    /// </param>
    /// <param name="_all">
    /// True to return all recIds; otherwise, just the recIds of selected records.
    /// </param>
    /// <returns>
    /// A container of recIds.
    /// </returns>
    public static container formDataSource2Container(FormDataSource _ds, boolean _all)
    {
        Common common = _all ? _ds.getFirst() : _ds.getFirst(true);
        container recIds = conNull();

        while (common)
        {
            recIds += common.RecId;
            common = _ds.getNext();
        }

        return recIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runIL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the business logic on the server in IL.
    /// </summary>
    /// <param name="_packed">
    /// The serialized state of the class instance.
    /// </param>
    /// <returns>
    /// A container with two recIds for <c>LedgerJournalTrans</c> records, the customer and the vendor, respectively.
    /// </returns>
    protected static container runIL(container _packed)
    {
        CustVendCompensation instance = CustVendCompensation::construct(_packed);

        instance.process();

        return [instance.parmLedgerCustRecId(), instance.parmLedgerVendRecId()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the business logic on the server.
    /// </summary>
    /// <param name="_packed">
    /// The serialized state of the class instance.
    /// </param>
    /// <returns>
    /// A container with two recIds for <c>LedgerJournalTrans</c> records, the customer and the vendor, respectively.
    /// </returns>
    protected static container runOnServer(container _packed)
    {
        XppILExecutePermission xppILExecutePermission = new XppILExecutePermission();
        container results;

        xppILExecutePermission.assert();

        results = CustVendCompensation::runIL(_packed);

        CodeAccessPermission::revertAssert();

        return results;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>