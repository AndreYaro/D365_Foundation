<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCheckReceiptCostPcsContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data Contract class for <c>InventCheckReceiptCostPricePcs</c> SSRS report
/// </summary>
/// <remarks>
/// This is the Data Contract class for the InventCheckReceiptCostPricePcs SSRS Report.
/// </remarks>
[
    DataContractAttribute,
    SysOperationContractProcessingAttribute(classStr(InventCheckReceiptCostPricePcsUIBuilder), SysOperationDataContractProcessingMode::CreateUIBuilderForRootContractOnly)
]
public class InventCheckReceiptCostPcsContract implements SysOperationValidatable, SysOperationInitializable
{
    TransDate               toDate;
    boolean                 ignoreProduction;
    Percent                 maxDeviationPercent;
    CostPriceBase           costPriceBase;
    Amount                  minDeviation;
    InventDimViewContract   inventDimViewContract;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the contract parameters.
    /// </summary>
    public void initialize()
    {
        toDate              = InventCostClosing::defaultDate();
        ignoreProduction    = NoYes::Yes;
        maxDeviationPercent = 50;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostPriceBase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter CostPriceBase.
    /// </summary>
    /// <param name="_costPriceBase">
    /// The new value of the datacontract parameter CostPriceBase; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter CostPriceBase
    /// </returns>
    [
        DataMemberAttribute('CostPriceBase'),
        SysOperationDisplayOrderAttribute('4')
    ]
    public CostPriceBase parmCostPriceBase(CostPriceBase _costPriceBase = costPriceBase)
    {
        costPriceBase = _costPriceBase;
        return costPriceBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIgnoreProduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter IgnoreProduction.
    /// </summary>
    /// <param name="_ignoreProduction">
    /// The new value of the datacontract parameter IgnoreProduction; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter IgnoreProduction
    /// </returns>
    [
        DataMemberAttribute('IgnoreProduction'),
        SysOperationLabelAttribute(literalStr("@SYS96888")),
        SysOperationHelpTextAttribute(literalStr("@SYS96889")),
        SysOperationDisplayOrderAttribute('2')
    ]
    public boolean parmIgnoreProduction(boolean _ignoreProduction = ignoreProduction)
    {
        ignoreProduction = _ignoreProduction;
        return ignoreProduction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimViewContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter InventDimViewContract.
    /// </summary>
    /// <param name="_inventDimViewContract">
    /// The new value of the datacontract parameter InventDimViewContract; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter InventDimViewContract.
    /// </returns>
    [
        DataMemberAttribute('InventDimViewContract')
    ]
    public InventDimViewContract parmInventDimViewContract(InventDimViewContract _inventDimViewContract = inventDimViewContract)
    {
        inventDimViewContract = _inventDimViewContract;

        return inventDimViewContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMaxDeviationPercent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter MaxDeviationPercent.
    /// </summary>
    /// <param name="_maxDeviationPercent">
    /// The new value of the datacontract parameter MaxDeviationPercent; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter MaxDeviationPercent
    /// </returns>
    [
        DataMemberAttribute('MaxDeviationPercent'),
        SysOperationLabelAttribute(literalStr("@SYS96890")),
        SysOperationDisplayOrderAttribute('3'),
        SysOperationHelpTextAttribute(literalStr("@SYS96891"))
    ]
    public Percent parmMaxDeviationPercent(Percent _maxDeviationPercent = maxDeviationPercent)
    {
        maxDeviationPercent = _maxDeviationPercent;
        return maxDeviationPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMinDeviation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter MinDeviation.
    /// </summary>
    /// <param name="_minDeviation">
    /// The new value of the datacontract parameter MinDeviation; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter MinDeviation
    /// </returns>
    [
        DataMemberAttribute('MinDeviation'),
        SysOperationLabelAttribute(literalStr("@SYS96894")),
        SysOperationDisplayOrderAttribute('5'),
        SysOperationHelpTextAttribute(literalStr("@SYS96895"))
    ]
    public Amount parmMinDeviation(Amount _minDeviation = minDeviation)
    {
        minDeviation = _minDeviation;
        return minDeviation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ToDate.
    /// </summary>
    /// <param name="_toDate">
    /// The new value of the datacontract parameter ToDate; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter ToDate
    /// </returns>
    [
        DataMemberAttribute('ToDate'),
        SysOperationLabelAttribute(literalStr("@SYS97051")),
        SysOperationHelpTextAttribute(literalStr("@SYS96887")),
        SysOperationDisplayOrderAttribute('1')
    ]
    public TransDate parmToDate(TransDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the UI parameters.
    /// </summary>
    /// <returns>
    ///    true if validation is successful; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method validates the UI parameters and throws the exception before you run the report.
    /// </remarks>
    public boolean validate()
    {
        if (any2real(maxDeviationPercent) <= 0)
        {
            return checkFailed("@SYS96884");
        }

        if (any2real(minDeviation) < 0)
        {
            return checkFailed("@SYS96885");
        }

        if (toDate <= InventClosing::inventClosingLast(InventAdjustmentType::Closing).TransDate)
        {
            return checkFailed(strFmt("@SYS18892",date2StrUsr(InventClosing::inventClosingLast(InventAdjustmentType::Closing).TransDate, DateFlags::FormatAll)));
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>