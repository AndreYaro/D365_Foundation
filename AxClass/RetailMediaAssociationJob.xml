<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailMediaAssociationJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to process media association.
/// </summary>
class RetailMediaAssociationJob extends RunBaseBatch implements BatchRetryable
{
    container packedRecIdList;
    int mediaEntityType;
    int subMediaEntityType;

    #define.CurrentVersion(4)
    #localmacro.CurrentList
        packedRecIdList,
        mediaEntityType,
        subMediaEntityType
    #endmacro
    BatchHeader batchHeader;
    private const int defaultBatchSize = 100;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// The main routine.
    /// </summary>
    /// <param name = "args"></param>
    public static void main(Args args)
    {
        RetailMediaAssociationJob scheduler = new RetailMediaAssociationJob();
        if (scheduler.prompt())
        {
            scheduler.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// This routine initiate the tasks to be executed.
    /// </summary>
    public void run()
    {
        this.executeTasks();
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeTasks</Name>
				<Source><![CDATA[
    /// <summary>
    /// This routine execute the tasks.
    /// </summary>
    private void executeTasks()
    {
        this.invokeAssociateCatalogTask();
        this.invokeAssociateWorkerTask();
        this.invokeAssociateCategoryTask();
        this.invokeAssociateCustomerTask();
        this.invokeAssociateProductTask();
        this.invokeAssociateChannelProductTask();
        this.invokeAssociateCatalogProductTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeAssociateCatalogTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// This routine associate the media with the catalogs.
    /// </summary>
    private void invokeAssociateCatalogTask()
    {
        RetailTmpCatalogMedia catalogMedia;
        Array work = new Array(Types::Int64);
        int  currentBatchSize = 1;

        //Iterate thru all the Catalogs which are not yet associated with images.
        while select RecId from catalogMedia where catalogMedia.AssociationStatus != RetailMediaAssociationStatus::Associated
        {
            work.value(currentBatchSize, catalogMedia.RecId);
            currentBatchSize++;

            if (currentBatchSize >= defaultBatchSize)
            {
                //The array is filled up, now create the woker task to process the association.
                this.createWorker(work, RetailMediaMasterEntity::Catalog, RetailMediaMasterEntity::Catalog);
                currentBatchSize = 1;
                work = new Array(Types::Int64);
            }
        }

        if (currentBatchSize > 0)
        {
            this.createWorker(work, RetailMediaMasterEntity::Catalog, RetailMediaMasterEntity::Catalog);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeAssociateWorkerTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// This routine associate the media with the workers.
    /// </summary>
    private void invokeAssociateWorkerTask()
    {
        RetailTmpWorkerMedia workerMedia;
        Array work = new Array(Types::Int64);
        int  currentBatchSize = 1;

        //Iterate thru all the workers who are not yet associated with images.
        while select RecId from workerMedia where workerMedia.AssociationStatus != RetailMediaAssociationStatus::Associated
        {
            work.value(currentBatchSize, workerMedia.RecId);
            currentBatchSize++;

            if (currentBatchSize >= defaultBatchSize)
            {
                //The array is filled up, now create the woker task to process the association.
                this.createWorker(work, RetailMediaMasterEntity::Worker, RetailMediaMasterEntity::Worker);

                currentBatchSize = 1;
                work = new Array(Types::Int64);
            }
        }

        if (currentBatchSize > 0)
        {
            this.createWorker(work, RetailMediaMasterEntity::Worker, RetailMediaMasterEntity::Worker);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeAssociateCategoryTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// This routine associate the media with the categories.
    /// </summary>
    private void invokeAssociateCategoryTask()
    {
        RetailTmpCategoryMedia categoryMedia;
        Array work = new Array(Types::Int64);
        int  currentBatchSize = 1;

        //Iterate thru all the Categories which are not yet associated with images.
        while select RecId from categoryMedia where categoryMedia.AssociationStatus != RetailMediaAssociationStatus::Associated
        {
            work.value(currentBatchSize, categoryMedia.RecId);
            currentBatchSize++;

            if (currentBatchSize >= defaultBatchSize)
            {
                //The array is filled up, now create the woker task to process the association.
                this.createWorker(work, RetailMediaMasterEntity::Category, RetailMediaMasterEntity::Category);

                currentBatchSize = 1;
                work = new Array(Types::Int64);
            }
        }

        if (currentBatchSize > 0)
        {
            this.createWorker(work, RetailMediaMasterEntity::Category, RetailMediaMasterEntity::Category);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeAssociateCustomerTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// This routine associate the media with the customers.
    /// </summary>
    private void invokeAssociateCustomerTask()
    {
        RetailTmpCustomerMedia customerMedia;
        Array work = new Array(Types::Int64);
        int  currentBatchSize = 1;

        //Iterate thru all the Customers who are not yet associated with images.
        while select RecId from customerMedia where customerMedia.AssociationStatus != RetailMediaAssociationStatus::Associated
        {
            work.value(currentBatchSize, customerMedia.RecId);
            currentBatchSize++;

            if (currentBatchSize >= defaultBatchSize)
            {
                //The array is filled up, now create the woker task to process the association.
                this.createWorker(work, RetailMediaMasterEntity::Customer, RetailMediaMasterEntity::Customer);

                currentBatchSize = 1;
                work = new Array(Types::Int64);
            }
        }

        if (currentBatchSize > 0)
        {
            this.createWorker(work, RetailMediaMasterEntity::Customer, RetailMediaMasterEntity::Customer);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeAssociateProductTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// This routine associate the media with the products.
    /// </summary>
    private void invokeAssociateProductTask()
    {
        RetailTmpProductMedia productMedia;
        Array work = new Array(Types::Int64);
        int  currentBatchSize = 1;

        //Iterate thru all the Products which are not yet associated with images.
        while select RecId from productMedia where productMedia.AssociationStatus != RetailMediaAssociationStatus::Associated
        {
            work.value(currentBatchSize, productMedia.RecId);
            currentBatchSize++;

            if (currentBatchSize >= defaultBatchSize)
            {
                //The array is filled up, now create the woker task to process the association.
                this.createWorker(work, RetailMediaMasterEntity::Product, RetailMediaMasterEntity::Product);

                currentBatchSize = 1;
                work = new Array(Types::Int64);
            }
        }

        if (currentBatchSize > 0)
        {
            this.createWorker(work, RetailMediaMasterEntity::Product, RetailMediaMasterEntity::Product);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeAssociateCatalogProductTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// This routine associate the media with the catalog's products, catalog enrichment.
    /// </summary>
    private void invokeAssociateCatalogProductTask()
    {
        RetailTmpCatalogProductMedia catalogProductMedia;
        Array work = new Array(Types::Int64);
        int  currentBatchSize = 1;

        //Iterate thru all the Catalog's products which are not yet associated with images.
        while select RecId from catalogProductMedia where catalogProductMedia.AssociationStatus != RetailMediaAssociationStatus::Associated
        {
            work.value(currentBatchSize, catalogProductMedia.RecId);
            currentBatchSize++;

            if (currentBatchSize >= defaultBatchSize)
            {
                //The array is filled up, now create the woker task to process the association.
                this.createWorker(work, RetailMediaMasterEntity::Product, RetailMediaMasterEntity::Catalog);

                currentBatchSize = 1;
                work = new Array(Types::Int64);
            }
        }

        if (currentBatchSize > 0)
        {
            this.createWorker(work, RetailMediaMasterEntity::Product, RetailMediaMasterEntity::Catalog);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeAssociateChannelProductTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// This routine associate the media with the channel's products, channel enrichment.
    /// </summary>
    private void invokeAssociateChannelProductTask()
    {
        RetailTmpChannelProductMedia channelProductMedia;
        Array work = new Array(Types::Int64);
        int  currentBatchSize = 1;

        //Iterate thru all the Channel's products which are not yet associated with images.
        while select RecId from channelProductMedia where channelProductMedia.AssociationStatus != RetailMediaAssociationStatus::Associated
        {
            work.value(currentBatchSize, channelProductMedia.RecId);
            currentBatchSize++;

            if (currentBatchSize >= defaultBatchSize)
            {
                //The array is filled up, now create the woker task to process the association.
                this.createWorker(work, RetailMediaMasterEntity::Product, RetailMediaMasterEntity::Category);

                currentBatchSize = 1;
                work = new Array(Types::Int64);
            }
        }

        if (currentBatchSize > 0)
        {
            this.createWorker(work, RetailMediaMasterEntity::Product, RetailMediaMasterEntity::Category);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// This routine creates a new task.
    /// </summary>
    /// <param name = "taskItems">The task item collection, contains the media entity RecIds</param>
    /// <param name = "mediaEntity">RetailMediaMasterEntity, media entity type</param>
    /// <param name = "subMediaEntity">RetailMediaMasterEntity, media sub entity type</param>
    private void createWorker(Array taskItems, RetailMediaMasterEntity mediaEntity, RetailMediaMasterEntity subMediaEntity)
    {
        RetailMediaAssociationTask task = new RetailMediaAssociationTask();
        task.parmRecIdList(taskItems.pack());
        task.parmMediaEntityType(enum2int(mediaEntity));
        task.parmSubMediaEntityType(enum2int(subMediaEntity));

        if (this.isInBatch())
        {
            if (!batchHeader)
            {
                batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
            }

            batchHeader.addRuntimeTask(task, this.parmCurrentBatch().RecId);
        }
        else
        {
            task.runOperation();
        }

        if (batchHeader)
        {
            batchHeader.save();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// overriding the pack routine.
    /// </summary>
    /// <returns>container</returns>
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// overriding the unpack routine.
    /// </summary>
    /// <param name = "packedClass">container</param>
    /// <returns>true/false</returns>
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>RetailMediaAssociationJob</c> class
    /// can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>RetailMediaAssociationJob</c> can
    /// be run in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>