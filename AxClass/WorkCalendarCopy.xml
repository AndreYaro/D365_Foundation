<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WorkCalendarCopy</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WorkCalendarCopy extends RunBase
{
    CalendarId      fromCalendarId;
    CalendarId      toCalendarId;
    boolean         copyPropertyId;
    boolean         copyClosedForPickup;

    // Dialog fields
    DialogField     fieldFromCalendarId;
    DialogField     fieldToCalendarId;
    DialogField     fieldcopyPropertyId;
    DialogField     fieldcopyClosedForPickup;

    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        fromCalendarId,
        toCalendarId,
        copyPropertyId,
        copyClosedForPickup
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copy</Name>
				<Source><![CDATA[
    void copy()
    {
        WorkCalendarTable       workCalendarTable;
        WorkCalendarDate        workCalendarDateFrom;
        WorkCalendarDate        workCalendarDateTo;
        WorkCalendarDateLine    workCalendarDateLineFrom;
        WorkCalendarDateLine    workCalendarDateLineTo;

        setprefix(WorkCalendarCopy::description());

        workCalendarDateLineFrom.disableCache(true);
        workCalendarDateLineTo.disableCache(true);

        if (! WorkCalendarTable::exist(toCalendarId))
        {
            workCalendarTable               = WorkCalendarTable::find(fromCalendarId);
            workCalendarTable.CalendarId    = toCalendarId;
            workCalendarTable.Name          = strfmt("@SYS54296",workCalendarTable.Name);
            workCalendarTable.insert();
        }

        setprefix(fieldLabelValue(tablenum(WorkCalendarDateLine), fieldnum(WorkCalendarDateLine, CalendarId), toCalendarId));

        while select forupdate workCalendarDateFrom
            index CalendarDateIdx
            where workCalendarDateFrom.CalendarId   == fromCalendarId
        {
            setprefix(fieldLabelValue(tablenum(WorkCalendarDate), fieldnum(WorkCalendarDate, TransDate), workCalendarDateFrom.TransDate));

            select firstonly forupdate workCalendarDateTo
                where workCalendarDateTo.CalendarId == toCalendarId  &&
                      workCalendarDateTo.TransDate  == workCalendarDateFrom.TransDate;

            workCalendarDateTo.CalendarId       = toCalendarId;
            workCalendarDateTo.Name             = workCalendarDateFrom.Name;
            workCalendarDateTo.WorkTimeControl  = workCalendarDateFrom.WorkTimeControl;
            workCalendarDateTo.TransDate        = workCalendarDateFrom.TransDate;
            switch (workCalendarDateTo.WorkTimeControl)
            {
                case WorkTimeControl::Open :
                    workCalendarDateTo.ClosedForPickup = copyClosedForPickup ? workCalendarDateFrom.ClosedForPickup : NoYes::No;
                    break;
                case WorkTimeControl::Closed :
                    workCalendarDateTo.ClosedForPickup = NoYes::Yes;
                    break;
                case WorkTimeControl::Holiday :
                    workCalendarDateTo.ClosedForPickup = NoYes::Yes;
                    break;
                case WorkTimeControl::UseBasic :
                    workCalendarDateTo.ClosedForPickup = NoYes::No;
                    break;
            }
            workCalendarDateTo.write();

            delete_from workCalendarDateLineTo
                index CalendarDateFromIdx
                where workCalendarDateLineTo.CalendarId   == toCalendarId   &&
                      workCalendarDateLineTo.TransDate    == workCalendarDateFrom.TransDate;

            while select forupdate workCalendarDateLineFrom
                index CalendarDateFromIdx
                where workCalendarDateLineFrom.CalendarId   == fromCalendarId   &&
                      workCalendarDateLineFrom.TransDate    == workCalendarDateFrom.TransDate
            {
                setprefix(strfmt("@SYS54524",
                    time2str(workCalendarDateLineFrom.FromTime,-1,-1),
                    time2str(workCalendarDateLineFrom.ToTime,-1,-1)));

                workCalendarDateLineTo.data(workCalendarDateLineFrom);
                workCalendarDateLineTo.CalendarId = toCalendarId;
                if (! copyPropertyId)
                {
                    workCalendarDateLineTo.PropertyId = '';
                }

                workCalendarDateLineTo.insert();
            }
        }

        workCalendarDateLineFrom.disableCache(false);
        workCalendarDateLineTo.disableCache(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog = super();

        // Init fields
        fieldFromCalendarId = dialog.addField(extendedTypeStr(CalendarId),"@SYS55232");
        fieldToCalendarId   = dialog.addField(extendedTypeStr(CalendarId),"@SYS55233");
        fieldcopyPropertyId = dialog.addField(enumStr(NoYes),"@SYS54288","@SYS54289");
        fieldcopyClosedForPickup = dialog.addField(enumStr(NoYes),"@SYS88267","@SYS88268");

        // Init values
        fieldFromCalendarId.value(fromCalendarId);
        fieldToCalendarId.value(toCalendarId);
        fieldcopyPropertyId.value(copyPropertyId);
        fieldcopyClosedForPickup.value(copyClosedForPickup);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        fromCalendarId  = fieldFromCalendarId.value();
        toCalendarId    = fieldToCalendarId.value();
        copyPropertyId  = fieldcopyPropertyId.value();
        copyClosedForPickup = fieldcopyClosedForPickup.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopyClosedForPickup</Name>
				<Source><![CDATA[
    boolean parmCopyClosedForPickup(boolean copy = copyClosedForPickup)
    {
        copyClosedForPickup = copy;

        return copyClosedForPickup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromCalendarId</Name>
				<Source><![CDATA[
    WorkTimeId parmFromCalendarId(CalendarId id = fromCalendarId)
    {
        fromCalendarId= id;
        return fromCalendarId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToCalendarId</Name>
				<Source><![CDATA[
    CalendarId parmToCalendarId(CalendarId id = toCalendarId )
    {
        toCalendarId = id;
        return toCalendarId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        if (! this.validate())
        {
            throw error("@SYS18722");
        }

        try
        {
            ttsbegin;

            this.copy();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer         version         = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate(Object _calledFrom = null)
    {
        if (! fromCalendarId)
        {
            return checkFailed("@SYS55230");
        }

        if (! strLRTrim(toCalendarId))
        {
            return checkFailed("@SYS86248");
        }

        if (! WorkCalendarTable::checkExist(fromCalendarId))
        {
            return false;
        }

        if (fromCalendarId == toCalendarId)
        {
            return checkFailed("@SYS55231");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS55229";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        WorkCalendarCopy        copy;

        switch (args.dataset())
        {
            case tablenum(WorkCalendarTable):
                copy = WorkCalendarCopy::newWorkCalendarTable(args.record());
                break;
            default:
                throw error(strfmt("@SYS29104",classId2Name(classidget(copy))));
        }

        if (copy.prompt())
        {
            copy.runOperation();
        }

        Object fr = args.caller();
        if (fr != null)
        {
            fr.doResearch(null);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newWorkCalendarTable</Name>
				<Source><![CDATA[
    static WorkCalendarCopy newWorkCalendarTable(WorkCalendarTable   workCalendarTable)
    {
        WorkCalendarCopy    copy           = new WorkCalendarCopy();

        copy.parmFromCalendarId(workCalendarTable.CalendarId);

        return copy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>