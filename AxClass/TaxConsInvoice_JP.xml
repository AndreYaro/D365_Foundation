<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxConsInvoice_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxConsInvoice_JP</c> class is the tax calculation class for Japan consolidated invoice.
/// </summary>
internal class TaxConsInvoice_JP extends Tax
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newForSourceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of TaxConsInvoice_JP based on the source table.
    /// </summary>
    /// <param name="_initTable">
    /// The initialization table, <c>CustConsInvoice_JP</c> or <c>VendConsInvoice_JP</c>.
    /// </param>
    /// <returns>
    ///     The new instance of TaxConsInvoice_JP.
    /// </returns>
    [Replaceable]
    static TaxConsInvoice_JP newForSourceTable(CustVendConsInvoice_JP _initTable)
    {
        TaxConsInvoice_JP taxConsInvoice;

        taxConsInvoice = new TaxConsInvoice_JP();
        taxConsInvoice.init(_initTable);

        return taxConsInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialization.
    /// </summary>
    /// <param name="_initTable">
    /// The initialization table, <c>CustConsInvoice_JP</c> or <c>VendConsInvoice_JP</c>.
    /// </param>
    protected void init(CustVendConsInvoice_JP _initTable)
    {
        headingTableId = _initTable.TableId;
        headingRecId = _initTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNondeductibleTaxLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets account for posting nondeductible tax by specified tax code.
    /// </summary>
    /// <param name="_taxCode">
    ///     Tax code.
    /// </param>
    /// <param name="_dimensionDefault">
    ///     The ID of the <c>DimensionAttributeValueSet</c> record that provides the default values for
    ///     the ledger dimension; optional.
    /// </param>
    /// <returns>
    /// Account for posting nondeductible tax.
    /// </returns>
    internal static LedgerDimensionAccount getNondeductibleTaxLedgerDimension(TaxCode _taxCode, DimensionDefault _dimensionDefault = 0)
    {
        LedgerDimensionDefaultAccount defaultAccount = TaxLedgerAccountGroup::nondeductibleTaxLedgerDimension(_taxCode);
        if (!defaultAccount)
        {
            return 0;
        }
        return LedgerDimensionFacade::serviceCreateLedgerDimension(defaultAccount, _dimensionDefault);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax info of a consolidated invoice.
    /// </summary>
    /// <returns>Records in table <c>TmpTaxWorkTrans</c>.</returns>
    /// <remarks>
    /// TmpTaxWorkTrans.SourceRegulateAmountCur refers to actual sales tax amount.
    /// TmpTaxWorkTrans.TaxInCostPriceRegulated refers to actual nonductible sales tax amount.
    /// </remarks>
    public TmpTaxWorkTrans calculateTax()
    {
        Query query;
        QueryBuildDataSource invoiceJournal_WQbds;
        QueryBuildDataSource invoiceJournalQbds;
        QueryBuildDataSource taxTransQbds;
        QueryRun queryRun;

        TaxTrans taxTrans;
        TaxTrans groupTaxTrans;
        TmpTaxWorkTrans tmpTaxWorkTrans;
        TransDate consDate;

        query = new Query();

        if (headingTableId == tableNum(CustConsInvoice_JP))
        {
            invoiceJournal_WQbds = query.addDataSource(tableNum(CustInvoiceJour_W));
            invoiceJournal_WQbds.addRange(fieldNum(CustInvoiceJour_W, CustConsInvoice_JP)).value(queryValue(headingRecId));
            invoiceJournalQbds = invoiceJournal_WQbds.addDataSource(tableNum(CustInvoiceJour));
            invoiceJournalQbds.relations(true);

            // get consolidation date
            consDate = CustConsInvoice_JP::find(headingRecId).ConsDate;
        }
        else if (headingTableId == tableNum(VendConsInvoice_JP))
        {
            invoiceJournalQbds = query.addDataSource(tableNum(VendInvoiceJour));
            invoiceJournalQbds.addRange(fieldNum(VendInvoiceJour, VendConsInvoice_JP)).value(queryValue(headingRecId));

            // get consolidation date
            consDate = VendConsInvoice_JP::find(headingRecId).ConsDate;
        }

        taxTransQbds = invoiceJournalQbds.addDataSource(tableNum(TaxTrans));
        taxTransQbds.relations(true);
        taxTransQbds.addGroupByField(fieldNum(TaxTrans, TaxCode));
        taxTransQbds.addSelectionField(fieldNum(TaxTrans, RecId), SelectionField::Max);
        taxTransQbds.addSelectionField(fieldNum(TaxTrans, TaxBaseQty), SelectionField::Sum);
        taxTransQbds.addSelectionField(fieldNum(TaxTrans, SourceBaseAmountCur), SelectionField::Sum);
        taxTransQbds.addSelectionField(fieldNum(TaxTrans, SourceRegulateAmountCur), SelectionField::Sum);
        taxTransQbds.addSelectionField(fieldNum(TaxTrans, TaxInCostPriceRegulated), SelectionField::Sum);

        queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            taxTrans = queryRun.get(tableNum(TaxTrans));

            tmpTaxWorkTrans.clear();
            TaxTrans sourceTaxTrans = TaxTrans::findByRecId(taxTrans.RecId);
            tmpTaxWorkTrans.initFromTaxTrans(sourceTaxTrans);

            tmpTaxWorkTrans.TaxBaseQty = taxTrans.TaxBaseQty;
            tmpTaxWorkTrans.SourceBaseAmountCur = taxTrans.SourceBaseAmountCur;
            tmpTaxWorkTrans.SourceRegulateAmountCur =  taxTrans.SourceRegulateAmountCur;
            tmpTaxWorkTrans.TaxInCostPriceRegulated = taxTrans.TaxInCostPriceRegulated;

            tmpTaxWorkTrans.ConsolidateSourceBaseAmountCur_JP = tmpTaxWorkTrans.SourceBaseAmountCur;
            tmpTaxWorkTrans.ConsolidateSourceTaxAmountCurPosted_JP = tmpTaxWorkTrans.SourceRegulateAmountCur;
            tmpTaxWorkTrans.ConsolidateTaxIncostPricePosted_JP = tmpTaxWorkTrans.TaxInCostPriceRegulated;
            tmpTaxWorkTrans.SourceBaseAmountCur = 0;
            tmpTaxWorkTrans.SourceBaseAmountCurRegulated = 0;
            tmpTaxWorkTrans.HeadingTableId = headingTableId;
            tmpTaxWorkTrans.HeadingRecId = headingRecId;
            tmpTaxWorkTrans.TransDate = consDate;
            tmpTaxWorkTrans.CalculationDate = consDate;

            if (!(tmpTaxWorkTrans.ExemptTax))
            {
                // rounding tax amount
                TaxAmountCur taxAmount = tmpTaxWorkTrans.ConsolidateSourceBaseAmountCur_JP * tmpTaxWorkTrans.TaxValue / 100;
                TaxAmountCur taxAmountRounded = taxAmount;
                TaxTable taxTable = TaxTable::find(tmpTaxWorkTrans.TaxCode);
                if (tmpTaxWorkTrans.SourceCurrencyCode == taxTable.TaxCurrencyCode)
                {
                    taxAmountRounded = taxTable.roundedOffTax(taxAmountRounded);
                }
                Currency sourceCurrency = Currency::find(tmpTaxWorkTrans.SourceCurrencyCode);
                taxAmountRounded = sourceCurrency.amount_Instance(taxAmountRounded);

                // rounding nondeductible tax 
                TaxAmountCur taxInCostPrice = taxAmount * sourceTaxTrans.VATExemptPct / 100;
                if (taxTable.isRoundDeductibleFirstApplicable(sourceTaxTrans.VATExemptPct))
                {
                    TaxAmountCur deductibleTaxAmountRounded = taxAmount - taxInCostPrice;
                    if (tmpTaxWorkTrans.SourceCurrencyCode == taxTable.TaxCurrencyCode)
                    {
                        deductibleTaxAmountRounded = taxTable.roundedOffTax(deductibleTaxAmountRounded);
                    }
                    deductibleTaxAmountRounded = sourceCurrency.amount_Instance(deductibleTaxAmountRounded);
                    taxInCostPrice = taxAmountRounded - deductibleTaxAmountRounded;
                }
                else
                {
                    if (tmpTaxWorkTrans.SourceCurrencyCode == taxTable.TaxCurrencyCode)
                    {
                        taxInCostPrice = taxTable.roundedOffTax(taxInCostPrice);
                    }
                    taxInCostPrice = sourceCurrency.amount_Instance(taxInCostPrice);
                }
         
                tmpTaxWorkTrans.ConsolidateSourceTaxAmountCur_JP = taxAmountRounded;
                tmpTaxWorkTrans.ConsolidateTaxInCostPrice_JP = taxInCostPrice;

                tmpTaxWorkTrans.ConsolidateSourceRegulateAmountCur_JP = tmpTaxWorkTrans.ConsolidateSourceTaxAmountCur_JP;
                tmpTaxWorkTrans.ConsolidateTaxIncostPriceRegulated_JP = tmpTaxWorkTrans.ConsolidateTaxIncostPrice_JP;
            
                // diff
                tmpTaxWorkTrans.SourceTaxAmountCur = tmpTaxWorkTrans.ConsolidateSourceTaxAmountCur_JP - tmpTaxWorkTrans.ConsolidateSourceTaxAmountCurPosted_JP;
                tmpTaxWorkTrans.TaxInCostPrice = tmpTaxWorkTrans.ConsolidateTaxIncostPrice_JP - tmpTaxWorkTrans.ConsolidateTaxIncostPricePosted_JP;
            
                // currency conversion
                TaxCurrencyConversionHelper conversionHelper = new TaxCurrencyConversionHelper(tmpTaxWorkTrans.SourceCurrencyCode, tmpTaxWorkTrans.TransDate);
                conversionHelper.setTaxCurrencyCode(taxTable.TaxCurrencyCode);
                // convert to accounting currency
                tmpTaxWorkTrans.TaxBaseAmount = 0;
                tmpTaxWorkTrans.TaxAmount = conversionHelper.convertTransactionToAccounting(tmpTaxWorkTrans.SourceTaxAmountCur);
                tmpTaxWorkTrans.TaxInCostPriceMST = conversionHelper.convertTransactionToAccounting(tmpTaxWorkTrans.TaxInCostPrice);
                // rounding account currency
                Currency companyCurrency = this.getCompanyCurrency();
                tmpTaxWorkTrans.TaxAmount = companyCurrency.amount_Instance(tmpTaxWorkTrans.TaxAmount);
                tmpTaxWorkTrans.TaxInCostPriceMST = companyCurrency.amount_Instance(tmpTaxWorkTrans.TaxInCostPriceMST);

                if (tmpTaxWorkTrans.SourceTaxAmountCur < 0)
                {
                    tmpTaxWorkTrans.NegativeTax = true;
                }
            }
            tmpTaxWorkTrans.TaxAutogenerated = true;
            // SourceTaxAmountCur and TaxInCostPrice will be copied to SourceRegulateAmountCur and TaxInCostPriceRegulated respectively during inserting.
            tmpTaxWorkTrans.insert();
        }

        this.tmpTaxWorkTrans(tmpTaxWorkTrans);
        this.loadTaxAdjustments();

        return this.tmpTaxWorkTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxDifferencePostingOnConsInvoiceEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the feature CustVendConsInvoiceTaxDifferencePostingFeature_JP is enabled for Japan.
    /// </summary>
    /// <param name="_checkCountryRegion">
    /// Whether needs to check country region.
    /// </param>
    /// <returns>
    ///     True if feature CustVendConsInvoiceTaxDifferencePostingFeature_JP is enabled for Japan;
    ///     otherwise false.
    /// </returns>
    internal static boolean isTaxDifferencePostingOnConsInvoiceEnabled(boolean _checkCountryRegion = true)
    {
        boolean enabled = true;
        if (_checkCountryRegion)
        {
            enabled = enabled && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]);
        }

        return enabled && FeatureStateProvider::isFeatureEnabled(CustVendConsInvoiceTaxDifferencePostingFeature_JP::instance());
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSalesTaxAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the current transaction being calculated supports sales tax adjustments.
    /// </summary>
    /// <returns>
    /// True if the current transaction supports sales tax adjustment; otherwise, false.
    /// </returns>
    public boolean useSalesTaxAdjustments()
    {
        return headingTableId == tableNum(VendConsInvoice_JP);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadTaxAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads tax adjustments that are adjusting taxes for a transaction.
    /// </summary>
    public void loadTaxAdjustments()
    {
        if (this.useSalesTaxAdjustments())
        {
            TaxCalculationAdjustment taxCalculationAdjustment = TaxCalculationAdjustment::construct(taxWorkTrans, this);
            taxCalculationAdjustment.loadTaxAdjustments();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSalesTaxTransactionProperties</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates sales tax transaction properties.
    /// </summary>
    /// <returns>
    /// True if all validation passed; otherwise, throw error.
    /// </returns>
    /// <remarks>
    /// 1. Sales tax direction, Exempt, Value, Nondeductible value, Sales tax currency should be same per sales tax code.
    /// 2. Only the following sales tax calculation parameters are supported:
    ///     Origin = Percentage of net amount
    ///     Marginal base = Net amount of invoice balance
    ///     Calculation method = Whole amount
    /// 3. Sales tax code parameters do not change during the invoicing period.
    /// 4. Tax inclusive scenario is not supported.
    ///
    /// For error messages,
    /// 1. If tax inclusive, use TaxCoreTax:ConsInvoiceIncludesTaxInclusiveInvoiceError.
    /// 2. If Origin/Marginal base/Calculation method is not correct, use TaxCoreTax:ConsInvoiceSalesTaxPropertyValidationFailure.
    /// 3. For other errors, 
    ///     if triggered by the Post button, use AccountsReceivable:ConsInvoiceSalesTaxValidationFailure.
    ///     else use TaxCoreTax:ConsInvoiceSalesTaxValidationFailure.
    /// </remarks>
    internal boolean validateSalesTaxTransactionProperties(boolean _isForPosting = true)
    {
        TaxCode taxcode = this.findInvalidTaxCode();
        if (taxcode == '')
        {
            return true;
        }
        if (_isForPosting)
        {
            throw Error(strFmt('@AccountsReceivable:ConsInvoiceSalesTaxValidationFailure', taxcode));
        }
        throw Error(strFmt('@TaxCoreTax:ConsInvoiceSalesTaxValidationFailure', taxcode));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInvalidTaxCode</Name>
				<Source><![CDATA[
    private TaxCode findInvalidTaxCode()
    {
        Query query;
        QueryBuildDataSource invoiceJournal_WDs;
        QueryBuildDataSource invoiceJournalDs;
        QueryBuildDataSource taxTransDs;
        QueryRun queryRun;

        TaxTrans taxTrans;
        // key: taxcode, value: record of TaxTrans
        Map groupTaxTrans = new Map(Types::String, Types::Record);
        MapEnumerator enumerator;
        CustInvoiceJour custInvoiceJour;
        VendInvoiceJour vendInvoiceJour;
        TransDate consDate;

        query = new Query();

        if (headingTableId == tableNum(CustConsInvoice_JP))
        {
            invoiceJournal_WDs = query.addDataSource(tableNum(CustInvoiceJour_W));
            invoiceJournal_WDs.addRange(fieldNum(CustInvoiceJour_W, CustConsInvoice_JP)).value(queryValue(headingRecId));
            invoiceJournalDs = invoiceJournal_WDs.addDataSource(tableNum(CustInvoiceJour));
            invoiceJournalDs.relations(true);
            invoiceJournalDs.addSelectionField(fieldNum(CustInvoiceJour, InclTax), SelectionField::Sum);
            // get consolidation date
            consDate = CustConsInvoice_JP::find(headingRecId).ConsDate;
        }
        else if (headingTableId == tableNum(VendConsInvoice_JP))
        {
            invoiceJournalDs = query.addDataSource(tableNum(VendInvoiceJour));
            invoiceJournalDs.addRange(fieldNum(VendInvoiceJour, VendConsInvoice_JP)).value(queryValue(headingRecId));
            invoiceJournalDs.addSelectionField(fieldNum(VendInvoiceJour, InclTax), SelectionField::Sum);
            // get consolidation date
            consDate = VendConsInvoice_JP::find(headingRecId).ConsDate;
        }

        taxTransDs = invoiceJournalDs.addDataSource(tableNum(TaxTrans));
        taxTransDs.relations(true);
        taxTransDs.addGroupByField(fieldNum(TaxTrans, TaxCode));
        taxTransDs.addGroupByField(fieldNum(TaxTrans, TaxDirection));
        taxTransDs.addGroupByField(fieldNum(TaxTrans, ExemptTax));
        taxTransDs.addGroupByField(fieldNum(TaxTrans, TaxValue));
        taxTransDs.addGroupByField(fieldNum(TaxTrans, VATExemptPct));
        taxTransDs.addGroupByField(fieldNum(TaxTrans, CurrencyCode));
       
        queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            if (headingTableId == tableNum(CustConsInvoice_JP))
            {
                custInvoiceJour = queryRun.get(tableNum(CustInvoiceJour));
                if (custInvoiceJour.InclTax)
                {
                    throw Error('@TaxCoreTax:ConsInvoiceIncludesTaxInclusiveInvoiceError');
                }
            }
            else if (headingTableId == tableNum(VendConsInvoice_JP))
            {
                vendInvoiceJour = queryRun.get(tableNum(VendInvoiceJour));
                if (vendInvoiceJour.InclTax)
                {
                    throw Error('@TaxCoreTax:ConsInvoiceIncludesTaxInclusiveInvoiceError');
                }
            }
            taxTrans = queryRun.get(tableNum(TaxTrans));
            if (!groupTaxTrans.exists(taxTrans.TaxCode))
            {
                taxTrans.TransDate = consDate;
                groupTaxTrans.insert(taxTrans.TaxCode, taxTrans);
            }
            else
            {
                return taxTrans.TaxCode;
            }
        }
        
        TaxTrans tmpTaxTrans;
        enumerator = groupTaxTrans.getEnumerator();
        while (enumerator.moveNext())
        {
            tmpTaxTrans = enumerator.currentValue();
            if (!this.checkTaxCode(tmpTaxTrans))
            {
                return tmpTaxTrans.TaxCode;
            }
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxCode</Name>
				<Source><![CDATA[
    private boolean checkTaxCode(TaxTrans _taxTrans)
    {
        TaxTable taxTable = this.getTaxTable(_taxTrans.TaxCode);
        if (taxTable.TaxBase != TaxBaseType::PctPerNet 
            || taxTable.TaxLimitBase != TaxLimitBase::InvoiceWithoutVAT 
            || taxTable.TaxCalcMethod != TaxCalcMode::FullAmounts)
        {
            throw Error(strFmt('@TaxCoreTax:ConsInvoiceSalesTaxPropertyValidationFailure',
                _taxTrans.TaxCode,
                "@SYS10299",
                taxTable.TaxBase,
                "@SYS21897",
                taxTable.TaxLimitBase,
                "@SYS21899",
                taxTable.TaxCalcMethod,
                "@SYS23160",
                "@SYS23166",
                "@SYS23159"));
        }
        // If the validation fails with below conditions, it will throw error in the method validateSalesTaxTransactionProperties().
        boolean ret = true;
        TaxData taxData = TaxData::find(_taxTrans.TaxCode, _taxTrans.TransDate, _taxTrans.SourceBaseAmountCur);
        if (taxData.TaxValue != _taxTrans.TaxValue)
        {
            ret = false;
        }
        else if (_taxTrans.TaxDirection == TaxDirection::IncomingTax && taxData.VATExemptPct != _taxTrans.VATExemptPct)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>