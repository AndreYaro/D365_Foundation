<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PriceDiscAdmCheckPostOutputContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PriceDiscAdmCheckPostOutputContract</c> class is used as a return value for the <c>PriceDiscAdmCheckPost.runOnServer</c> method.
/// </summary>
class PriceDiscAdmCheckPostOutputContract implements SysPackable
{
    boolean         warningsFound;
    boolean         postJournal;
    boolean         isPosted;

    #define.CurrentVersion(1)

    #localmacro.CurrentList
        warningsFound,
        postJournal,
        isPosted
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsPosted</Name>
				<Source><![CDATA[
        public boolean parmIsPosted(boolean _isPosted = isPosted)
    {
        isPosted = _isPosted;
        return isPosted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostJournal</Name>
				<Source><![CDATA[
        public boolean parmPostJournal(boolean _postJournal = postJournal)
    {
        postJournal = _postJournal;
        return postJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWarningsFound</Name>
				<Source><![CDATA[
        public boolean parmWarningsFound(boolean _warningsFound = warningsFound)
    {
        warningsFound = _warningsFound;
        return warningsFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean unpack(container _packedClass)
    {
        int version     = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                return true;
            default :
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static PriceDiscAdmCheckPostOutputContract construct()
    {
        return new PriceDiscAdmCheckPostOutputContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PriceDiscAdmCheckPostOutputContract</c> class based on a container
    /// from a prior call to the <c>PriceDiscAdmCheckPostOutputContract.pack</c> method.
    /// </summary>
    /// <param name="_packedClass">
    /// A <c>Container</c> holding the packed class.
    /// </param>
    /// <returns>
    /// An instance of the <c>PriceDiscAdmCheckPostOutputContract</c> class identical to the one that was
    /// packed into the <c>container</c> .
    /// </returns>
    static public PriceDiscAdmCheckPostOutputContract create(container _packedClass)
    {
        PriceDiscAdmCheckPostOutputContract priceDiscAdmCheckPostOutputContract = PriceDiscAdmCheckPostOutputContract::construct();
        priceDiscAdmCheckPostOutputContract.unpack(_packedClass);
        return priceDiscAdmCheckPostOutputContract;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>