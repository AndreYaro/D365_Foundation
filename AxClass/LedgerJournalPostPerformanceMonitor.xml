<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalPostPerformanceMonitor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerJournalPostPerformanceMonitor</c> monitors performance metrics for journal framework posting
/// and provides aggregated telemetry based on the statistical profile of the operation.
/// </summary>
internal final class LedgerJournalPostPerformanceMonitor
{
    private SysInstrumentationLogger logger;

    private LedgerJournalTableRecId journalRecId;
    private LedgerJournalType journalType;

    private Map lineProcessingTime;
    private Set vouchers;

    private real totalLineProcessingTime;
    private int numberOfLines;

    private real preprocessingTime;
    private real postprocessingTime;
    private Map processingTimePerSubledger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>startNewStopwatch</Name>
				<Source><![CDATA[
    internal System.Diagnostics.Stopwatch startNewStopwatch()
    {
        System.Diagnostics.Stopwatch stopWatch= new System.Diagnostics.Stopwatch();
        stopWatch.Start();

        return stopWatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackJournal</Name>
				<Source><![CDATA[
    internal void trackJournal(LedgerJournalTable _journal)
    {
        journalRecId = _journal.RecId;
        journalType = _journal.JournalType;

        lineProcessingTime = new Map(Types::Int64, Types::Real);
        vouchers = new Set(Types::String);

        totalLineProcessingTime = 0;
        numberOfLines = 0;
        preprocessingTime = 0;
        postprocessingTime = 0;
        processingTimePerSubledger = new Map(Types::String, Types::Integer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackJournalLine</Name>
				<Source><![CDATA[
    internal void trackJournalLine(LedgerJournalTrans _ledgerJournalTrans, real _durationMs)
    {
        if (_ledgerJournalTrans.RecId != 0)
        {
            lineProcessingTime.add(_ledgerJournalTrans.RecId, _durationMs);
            vouchers.add(_ledgerJournalTrans.Voucher);

            totalLineProcessingTime += _durationMs;
            numberOfLines++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackPreprocessingTime</Name>
				<Source><![CDATA[
    internal void trackPreprocessingTime(real _durationMs)
    {
        preprocessingTime += _durationMs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackProcessingTimePerSubledger</Name>
				<Source><![CDATA[
    internal void trackProcessingTimePerSubledger(str _className, real _durationMs)
    {
        if (processingTimePerSubledger.exists(_className))
        {
            int totalDuration = processingTimePerSubledger.lookup(_className) + _durationMs;

            processingTimePerSubledger.insert(_className, totalDuration);
        }
        else
        {
            processingTimePerSubledger.insert(_className, _durationMs);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackPostprocessingTime</Name>
				<Source><![CDATA[
    internal void trackPostprocessingTime(real _durationMs)
    {
        postprocessingTime += _durationMs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalizeForValidation</Name>
				<Source><![CDATA[
    internal str finalizeForValidation(boolean _validationStatus, real _durationMs)
    {
        str performanceSnapshot;

        if (journalRecId != 0)
        {
            LedgerJournalInstrumentationValidationResult validationResult = new LedgerJournalInstrumentationValidationResult();
            validationResult.action(LedgerJournalInstrumentationConstants::JournalActionValidateJournal);
            validationResult.JournalRecId(journalRecId);
            validationResult.JournalType(enum2Symbol(enumNum(LedgerJournalType), journalType));
            validationResult.validationDurationMs(_durationMs);
            validationResult.validated(_validationStatus ? NoYes::Yes : NoYes::No);

            performanceSnapshot = FormJsonSerializer::serializeClass(validationResult);
            logger.logInformation(performanceSnapshot);
        }

        return performanceSnapshot;
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalizeForPosting</Name>
				<Source><![CDATA[
    internal str finalizeForPosting(SysInstrumentationActivityContext _activityContext, boolean _posted, real _totalPostingDuration, boolean _isRunningInBatch)
    {
        str performanceSnapshot;

        if (journalRecId != 0)
        {
            LedgerJournalInstrumentationPostingResult postingResult = new LedgerJournalInstrumentationPostingResult();
            postingResult.action(LedgerJournalInstrumentationConstants::JournalActionPostJournal);
            postingResult.JournalRecId(journalRecId);
            postingResult.JournalType(enum2Symbol(enumNum(LedgerJournalType), journalType));
            postingResult.isRunningInBatch(_isRunningInBatch ? NoYes::Yes : NoYes::No);
            postingResult.posted(_posted ? NoYes::Yes : NoYes::No);

            postingResult.totalPostingDurationMs(_totalPostingDuration);
            postingResult.preprocessingDurationMs(preprocessingTime);
            postingResult.postprocessingDurationMs(postprocessingTime);

            if (numberOfLines > 0)
            {
                real mean = this.calculateMean();
                real standardDeviation = this.calculateStandardDeviation(mean);

                postingResult.avgLineDurationMs(mean);
                postingResult.lineDurationStDev(standardDeviation);

                postingResult.sizeOfJournal(trunc(log10(numberOfLines)));
                postingResult.linesPerVoucherRatio(this.calculateLineToVoucherRatio());
            }

            performanceSnapshot = FormJsonSerializer::serializeClass(postingResult);

            logger.logInformation(performanceSnapshot);

            this.addSubledgerDurationToCustomProperties(_activityContext);
        }

        return performanceSnapshot;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSubledgerDurationToCustomProperties</Name>
				<Source><![CDATA[
    private void addSubledgerDurationToCustomProperties(SysInstrumentationActivityContext _activityContext)
    {
        if (_activityContext != null && processingTimePerSubledger != null)
        {
            MapEnumerator mapJSONEnumerator = processingTimePerSubledger.getEnumerator();

            while (mapJSONEnumerator.moveNext())
            {
                str submoduleDuration = strFmt(LedgerJournalInstrumentationConstants::SubmoduleDurationFormat, mapJSONEnumerator.currentKey());

                _activityContext.addCustomProperty(submoduleDuration, mapJSONEnumerator.currentValue());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateMean</Name>
				<Source><![CDATA[
    private real calculateMean()
    {
        real meanTime;

        if (numberOfLines > 0)
        {
            meanTime = totalLineProcessingTime / numberOfLines;
        }

        return meanTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateStandardDeviation</Name>
				<Source><![CDATA[
    private real calculateStandardDeviation(real _mean)
    {
        real variance;
        real stdev;

        if (numberOfLines > 0)
        {
            MapEnumerator durationEnumerator = lineProcessingTime.getEnumerator();
            real deviationFromMean;

            while (durationEnumerator.moveNext())
            {
                real currentDuration = durationEnumerator.currentValue();

                // Note: the power method in X++ requires positive values. A runtime error is thrown for negative values.
                deviationFromMean += power(abs(currentDuration - _mean), 2);
            }

            variance = deviationFromMean / numberOfLines;

            if (variance > 0)
            {
                stdev = sqrt(variance);
            }
        }

        return stdev;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateLineToVoucherRatio</Name>
				<Source><![CDATA[
    private real calculateLineToVoucherRatio()
    {
        int numberOfVouchers = vouchers.elements();
        real linesPerVoucherRatio;

        if (numberOfVouchers > 0)
        {
            linesPerVoucherRatio = round(numberOfLines / numberOfVouchers, 1.00);
        }

        return linesPerVoucherRatio;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init()
    {
        lineProcessingTime = new Map(Types::Int64, Types::Real);
        vouchers = new Set(Types::String);
        processingTimePerSubledger = new Map(Types::String, Types::Integer);

        logger = SysInstrumentationLoggerFactory::CreateLogger(LedgerJournalInstrumentationConstants::LedgerJournalPerformanceMonitor);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMonitor</Name>
				<Source><![CDATA[
    internal static LedgerJournalPostPerformanceMonitor newMonitor()
    {
        LedgerJournalPostPerformanceMonitor perfMonitor = new LedgerJournalPostPerformanceMonitor();
        perfMonitor.init();

        return perfMonitor;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>