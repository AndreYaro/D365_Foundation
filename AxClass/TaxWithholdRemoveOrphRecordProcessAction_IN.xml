<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdRemoveOrphRecordProcessAction_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
/// <summary>
/// Data maintenance action to detect TaxWithholdUncommitted_IN record that are orphan in source document line and delete related SouceDocumentLine and AccountingDistribution.
/// </summary>
[Export(identifierStr(Dynamics.AX.Application.IDataMaintenanceAction))]
internal final class TaxWithholdRemoveOrphRecordProcessAction_IN implements IDataMaintenanceAction, IDataMaintenanceOpportunity, IDataMaintenanceActionParameters
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceCaption caption()
    {
        return literalStr("@TaxWithholdUncommitted_IN:WHTRemoveOrphanedRecordProcessCaption");
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceDescription description()
    {
        return literalStr("@TaxWithholdUncommitted_IN:WHTRemoveOrphanedRecordProcessDescription");
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isEnabled()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>category</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceActionCategory category()
    {
        return DataMaintenanceActionCategory::DataCorruption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ModuleAxapta module()
    {
        return ModuleAxapta::Tax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tasks</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Array tasks()
    {
        Array tasks = new Array(Types::String);
        tasks.value(1, classStr(TaxWithholdRemoveOrphSDLRelatedUncommittedTask_IN));
        return tasks;
    }

]]></Source>
			</Method>
			<Method>
				<Name>opportunityResult</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceOpportunityResult opportunityResult()
    {
        DataMaintenanceOpportunityResult scanResult = DataMaintenanceOpportunityResult::construct();
        scanResult.parmOpportunityFound(this.isTaxWithholdUncommittedOrphanInSDLExist());

        return scanResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>automaticallySchedule</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean automaticallySchedule()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parameters</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceActionParameters parameters()
    {
        DataMaintenanceActionParameters actionParameters = new DataMaintenanceActionParameters();

        actionParameters.IsSystemAction = true;

        return actionParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxWithholdUncommittedOrphanInSDLExist</Name>
				<Source><![CDATA[
    private boolean isTaxWithholdUncommittedOrphanInSDLExist()
    {
        SourceDocumentLine sourceDocumentLine;
        TaxWithholdUncommitted_IN taxWithholdUncommitted;

        select firstonly crosscompany RecId from sourceDocumentLine
            where sourceDocumentLine.SourceRelationType == tableNum(TaxWithholdUncommitted_IN)
                && sourceDocumentLine.AccountingStatus < SourceDocumentLineAccountingStatus::Completed
            notexists join taxWithholdUncommitted
                where taxWithholdUncommitted.SourceDocumentLine == sourceDocumentLine.RecId;

        return sourceDocumentLine.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>