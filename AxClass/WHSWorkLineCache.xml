<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkLineCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkLineCache</c> class provides a simple cache of a work's pick and put line numbers.
/// </summary>
class WHSWorkLineCache
{
    guid        identifier;
    WHSWorkId   workId;
    LineNum     firstPut;
    LineNum     firstPick;
    LineNum     firstLineNum;
    LineNum     firstNonCancelledLineNum;
    LineNum     lastLineNum;
    LineNum     lastNonCancelledPick;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>hasPutLineBeforeLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a put line exists before a given line number.
    /// </summary>
    /// <param name="_lineNum">
    /// The line number to check.
    /// </param>
    /// <returns>
    /// true, if a put line with a lower line number exists; otherwise, false.
    /// </returns>
    public boolean hasPutLineBeforeLine(LineNum _lineNum)
    {
        return firstPut && firstPut < _lineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes local variables.
    /// </summary>
    private void init()
    {
        WHSWorkLine     workLine;

        identifier = newGuid();

        while select LineNum, WorkType, WorkStatus from workLine
            order by LineNum
            where workLine.WorkId == workId
               && workLine.WorkStatus != WHSWorkStatus::Skipped
        {
            if (firstLineNum == 0)
            {
                firstLineNum = workLine.LineNum;
            }

            if (firstNonCancelledLineNum == 0
                && workLine.WorkStatus != WHSWorkStatus::Cancelled)
            {
                firstNonCancelledLineNum = workLine.LineNum;
            }

            if (firstPut == 0
                && workLine.WorkStatus != WHSWorkStatus::Cancelled
                && workLine.WorkType == WHSWorkType::Put)
            {
                firstPut = workLine.LineNum;
            }

            if (firstPick == 0
                && workLine.WorkType == WHSWorkType::Pick)
            {
                firstPick = workLine.LineNum;
            }

            if (workLine.WorkStatus != WHSWorkStatus::Cancelled &&
                workLine.WorkType == WHSWorkType::Pick)
            {
                lastNonCancelledPick = workLine.LineNum;
            }
            lastLineNum = workLine.LineNum;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFirstPickWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a line number is the first pick line.
    /// </summary>
    /// <param name="_lineNum">
    /// The line number to check.
    /// </param>
    /// <returns>
    /// true, if the line is the first pick line; otherwise, false.
    /// </returns>
    public boolean isFirstPickWorkLine(LineNum _lineNum)
    {
        return firstPick && _lineNum == firstPick;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFirstWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a line number is the first work line.
    /// </summary>
    /// <param name="_lineNum">
    /// The line number to check.
    /// </param>
    /// <returns>
    /// true, if the line is the first work line; otherwise, false.
    /// </returns>
    public boolean isFirstWorkLine(LineNum _lineNum)
    {
        return firstLineNum && _lineNum == firstLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFirstNonCancelledWorkLine</Name>
				<Source><![CDATA[
    public boolean isFirstNonCancelledWorkLine(LineNum _lineNum)
    {
        return firstNonCancelledLineNum && _lineNum == firstNonCancelledLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLastWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a line number is the last work line.
    /// </summary>
    /// <param name="_lineNum">
    /// The line number to check.
    /// </param>
    /// <returns>
    /// true, if the line is the last work line; otherwise, false.
    /// </returns>
    public boolean isLastWorkLine(LineNum _lineNum)
    {
        return lastLineNum && _lineNum == lastLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFirstPickLineNum</Name>
				<Source><![CDATA[
    public LineNum parmFirstPickLineNum()
    {
        return firstPick;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFirstPutLineNum</Name>
				<Source><![CDATA[
    public LineNum parmFirstPutLineNum()
    {
        return firstPut;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLastNonCancelledPickLineNum</Name>
				<Source><![CDATA[
    public LineNum parmLastNonCancelledPickLineNum()
    {
        return lastNonCancelledPick;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIdentifier</Name>
				<Source><![CDATA[
    private guid parmIdentifier()
    {
        return identifier;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkId</Name>
				<Source><![CDATA[
    private WHSWorkId parmWorkId(WHSWorkId _workId = workId)
    {
        workId = _workId;

        return workId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>aosCacheKey</Name>
				<Source><![CDATA[
    private static container aosCacheKey(WHSWorkId _workId)
    {
        container key = [curext(), _workId];

        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSWorkLineCache construct()
    {
        return new WHSWorkLineCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWorkId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>WHSWorkLineCache</c> class for a work ID.
    /// </summary>
    /// <param name="_workId">
    /// The work ID.
    /// </param>
    /// <returns>
    /// An instance of the <c>WHSWorkLineCache</c> class.
    /// </returns>
    public static WHSWorkLineCache newFromWorkId(WHSWorkId _workId)
    {
        container        aosKey       = WHSWorkLineCache::AOSCacheKey(_workId);   // This key allows to cache a serialized version for each work ID.
        str              sessionKey   = WHSWorkLineCache::sessionCacheKey();      // This key allows to cache one instance only.

        WHSWorkLineCache sessionCache = classFactory.globalCache().get(classStr(WHSWorkLineCache), sessionKey, null);

        if (sessionCache)
        {
            if (sessionCache.parmWorkId() != _workId)
            {
                // We are processing a different work, so the cache is irrelevant
                sessionCache = null;
            }
            else
            {
                // Get the identifier from the AOS cache
                container aosCachedIdentifier = classFactory.globalObjectCache().find(classStr(WHSWorkLineCache), aosKey);

                if (!aosCachedIdentifier ||
                    aosCachedIdentifier != [sessionCache.parmIdentifier()])
                {
                    // The identifier has been flushed from the AOS, do not use the session cache
                    sessionCache = null;
                }
            }
        }

        if (!sessionCache)
        {
            sessionCache = WHSWorkLineCache::construct();
            sessionCache.parmWorkId(_workId);
            sessionCache.init();

            // Store the instance in the session cache
            classFactory.globalCache().set(classStr(WHSWorkLineCache), sessionKey, sessionCache);

            // Store the identifier in the AOS cache
            classFactory.globalObjectCache().insert(classStr(WHSWorkLineCache), aosKey, [sessionCache.parmIdentifier()]);
        }

        return sessionCache;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remove</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the cached values for a given work ID.
    /// </summary>
    /// <param name="_workId">
    /// The work ID.
    /// </param>
    /// <remarks>
    /// This will remove the cache for all sessions on all AOSes.
    /// This method should be called when lines are added to an existing work.
    /// </remarks>
    public static void remove(WHSWorkId _workId)
    {
        container key = WHSWorkLineCache::aosCacheKey(_workId);

        classFactory.globalObjectCache().remove(classStr(WHSWorkLineCache), key);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sessionCacheKey</Name>
				<Source><![CDATA[
    private static str sessionCacheKey()
    {
        str key = curext();

        return key;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>