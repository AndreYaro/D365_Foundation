<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendSumForPaymPayrollDisbursement</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// A dialog to select the method of payment for issuing worker payments from the
/// payroll disbursement journal.
/// </summary>
/// <remarks>
/// First of two dialogs that will result in worker payments.
/// </remarks>
class VendSumForPaymPayrollDisbursement extends VendSumForPaym
{
    VendPaymMode        electronicPaymMode;
    VendPaymMode        checkPaymMode;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the query used for the payroll payment disbursement.
    /// </summary>
    /// <returns>
    ///     The query used for the payroll payment disbursement.
    /// </returns>
    protected Query buildQuery()
    {
        Query   query;
        QueryBuildDataSource    qbdsLJT, qbdsLJTPayroll, qbdsPayStatement, qbdsWorker, qbdsParty;
        query = super();

        // add the LedgerJournalTransPayrollDisbursement to the query
        qbdsLJT = query.dataSourceTable(tableNum(LedgerJournalTrans));
        qbdsLJTPayroll = qbdsLJT.addDataSource(tableNum(LedgerJournalTransPayrollDisbursement));
        qbdsLJTPayroll.addLink(fieldNum(LedgerJournalTrans, RecId), fieldNum(LedgerJournalTransPayrollDisbursement, RefRecId));
        qbdsLJTPayroll.fetchMode(QueryFetchMode::One2One);
        qbdsLJTPayroll.joinMode(JoinMode::InnerJoin);
        qbdsLJTPayroll.allowAdd(QueryAllowAdd::NoFields);

        // Add pay statement to query so we can update it
        qbdsPayStatement = qbdsLJTPayroll.addDataSource(tableNum(PayrollPayStatement));
        qbdsPayStatement.addSelectionField(fieldNum(PayrollPayStatement, PaymentStatus));
        qbdsPayStatement.addSelectionField(fieldNum(PayrollPayStatement, DocumentNumber));
        qbdsPayStatement.addSelectionField(fieldNum(PayrollPayStatement, PayPeriod));
        qbdsPayStatement.addSelectionField(fieldNum(PayrollPayStatement, PaymentDate));
        qbdsPayStatement.addSelectionField(fieldNum(PayrollPayStatement, GrossAccountingCurrencyAmount));
        qbdsPayStatement.addSelectionField(fieldNum(PayrollPayStatement, NetAccountingCurrencyAmount));
        qbdsPayStatement.addSelectionField(fieldNum(PayrollPayStatement, RecId));
        qbdsPayStatement.addLink(fieldNum(LedgerJournalTransPayrollDisbursement, PayStatement), fieldNum(PayrollPayStatement, RecId));
        qbdsPayStatement.joinMode(JoinMode::InnerJoin);
        qbdsPayStatement.fetchMode(QueryFetchMode::One2One);
        qbdsPayStatement.update(true);
        qbdsPayStatement.allowAdd(QueryAllowAdd::NoFields);

        // add in the worker
        qbdsWorker = qbdsPayStatement.addDataSource(tableNum(HcmWorker));
        qbdsWorker.addAllFields(tableId2name(tableNum(HcmWorker)));
        qbdsWorker.addLink(fieldNum(PayrollPayStatement, Worker), fieldNum(HcmWorker, RecId));
        qbdsWorker.fetchMode(QueryFetchMode::One2One);
        qbdsWorker.joinMode(JoinMode::InnerJoin);
        qbdsWorker.allowAdd(QueryAllowAdd::NoFields);

        // add in the DirParty for the worker name
        qbdsParty = qbdsWorker.addDataSource(tableNum(DirPartyTable));
        qbdsParty.addLink(fieldNum(HcmWorker, Person), fieldNum(DirPartyTable, RecId));
        qbdsParty.joinMode(JoinMode::InnerJoin);
        qbdsParty.fetchMode(QueryFetchMode::One2One);
        qbdsParty.addSelectionField(fieldNum(DirPartyTable, Name));
        qbdsParty.allowAdd(QueryAllowAdd::NoFields);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        PayrollParameters   payrollParameters;

        // skip the base class dialog initialization
        dialog = this.dialogInternal();

        dialogPaymMode = dialog.addFieldValue(this.typePaymMode(), paymMode);
        dialogPaymMode.registerOverrideMethod(methodStr(FormStringControl, lookup),
                                                             methodStr(VendSumForPaymPayrollDisbursement, lookupPaym),
                                                             this);

        dialogErFileName = dialog.addFieldValue(extendedTypeStr(ERFileName), erFileName);
        dialogPaymMode.control().registerOverrideMethod(methodStr(FormStringControl, modified),
                                                             methodStr(CustVendSumForPaym, dialogPaymMode_modified),
                                                             this);
        dialogErFileName.visible(this.useGERConfiguration());

        dialogBank = new DialogField(dialog, extendedTypeStr(CompanyBankAccountId), #dialogBankFieldNo);
        dialog.addCtrlDialogField(dialogBank.name());
        dialogBank.init(dialog);
        dialogBank.value(bankAccountID);

        dialogBank.control().registerOverrideMethod(methodStr(FormStringControl, lookup),
                                                             methodStr(CustVendSumForPaym, bank_lookup),
                                                             this);

        dialogBank.control().registerOverrideMethod(methodStr(FormStringControl, modified),
                                                             methodStr(CustVendSumForPaym, bank_modified),
                                                             this);

        select firstonly PaymMode, ElectronicPaymMode from payrollParameters;

        checkPaymMode = payrollParameters.PaymMode;
        electronicPaymMode = payrollParameters.ElectronicPaymMode;

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the parameter values from the dialog form.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean getFromDialog()
    {
        if (bankAccountID && bankAccountID != dialogBank.value())
        {
            custVendOutPaym = CustVendOutPaym::newCustVendSumForPaym(this);
            if (xSysLastValue::existLast(custVendOutPaym))
            {
                xSysLastValue::deleteLast(custVendOutPaym);
            }
        }

        paymMode             = dialogPaymMode.value();
        bankAccountID        = dialogBank.value();

        Args argsForPayrollDisbursement = new Args();

        argsForPayrollDisbursement.parmEnumType(enumNum(UserInteractive));
        argsForPayrollDisbursement.parmEnum(UserInteractive::Yes);

        this.parmArgs(argsForPayrollDisbursement);

        if (!this.useGERConfiguration())
        {
            this.initCustVendOutPaym();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPaym</Name>
				<Source><![CDATA[
    /// <summary>
    /// Restrict selection on Method of payment to the values set in payroll parameters.
    /// </summary>
    /// <param name="_formControl">
    /// The form launching the dialog.
    /// </param>
    /// <remarks>
    /// Uses the <c>paymMode</c> and <c>ElectronicPaymMode</c> fields to restrict the selection.
    /// </remarks>
    private void lookupPaym(FormControl _formControl)
    {
        QueryBuildDataSource    qbdsPaymMode;
        QueryBuildRange         qbr;
        Query                   query = new Query();
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(VendTable), _formControl);

        sysTableLookup = SysTableLookup::newParameters(tableNum(VendPaymModeTable),
                                                        dialog.formRun().controlCallingMethod(),
                                                        true);

        sysTableLookup.parmQuery(query);

        qbdsPaymMode = query.addDataSource(tableNum(VendPaymModeTable));

        // query on ListType field, _listType
        qbr = qbdsPaymMode.addRange(fieldNum(VendPaymModeTable, PaymMode));
        qbr.value(queryValue(checkPaymMode) + ',' + queryValue(electronicPaymMode));

        sysTableLookup.addLookupfield(fieldNum(VendPaymModeTable, PaymMode));
        sysTableLookup.addLookupfield(fieldNum(VendPaymModeTable, Name));

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTransactions</Name>
				<Source><![CDATA[
    public boolean validateTransactions()
    {
        // we have not identified any pre-dialog validations that need to occur
        // before generating payments for the Payroll disbursement journal
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@SYS24287";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        if (args.dataset() != tableNum(LedgerJournalTrans))
        {
            throw error(Error::wrongUseOfFunction("@SYS24287"));
        }

        VendSumForPaym vendSumForPaym = CustVendSumForPaym::newLedgerJournalTrans(args.record());

        vendSumForPaym.parmArgs(args);

        if (vendSumForPaym.prompt())
        {
            vendSumForPaym.runOperation();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>