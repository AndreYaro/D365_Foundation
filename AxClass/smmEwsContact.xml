<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>smmEwsContact</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class <c>smmEwsContact</c> represents an Microsoft Exchange server contact.
/// Translates the information between exchange server contact and ax contact.
/// </summary>
/// <remarks>
/// Uses exchangeintegration dll.
/// </remarks>
public class SmmEwsContact implements SysIMapiExContact, smmIContact
{
    Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact    contact;
    Microsoft.Dynamics.AX.ExchangeIntegration.Connection            connection;
    Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationFolder     folder;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>body</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the contact's html body.
    /// </summary>
    /// <param name="_body">
    /// Body field in the contact.
    /// </param>
    /// <returns>
    /// A string containing the html of the contact's body.
    /// </returns>
    public str body(str _body = '')
    {
        str ret;

        ret = contact.body();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    /// <summary>
    /// Closes the contact's connection.
    /// This is an interface member. Not needed in exchange integration.
    /// </summary>
    public void close()
    {
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the contact from exchange.
    /// </summary>
    /// <remarks>
    /// Makes a call to the exchange server.
    /// Does not delete all the contact's records, it just moves the contact to the delete folder.
    /// </remarks>
    public void delete()
    {
        contact.delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>email1</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the first email address.
    /// </summary>
    /// <returns>
    /// A str containing the address or empty string if it was never set.
    /// </returns>
    public str email1()
    {
        str ret;

        ret = contact.email(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::firstEmail());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>email1DisplayName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the first email display name.
    /// </summary>
    /// <returns>
    /// A str containing the email's display name or empty string if it was never set.
    /// </returns>
    public str email1DisplayName()
    {
        str ret;

        ret = contact.emailDisplayName(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::firstEmail());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>email1Type</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the first email's type.
    /// </summary>
    /// <returns>
    /// A str containing the email type or empty string if the first email was never set.
    /// </returns>
    public str email1Type()
    {
        str ret;

        ret = contact.emailType(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::firstEmail());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>email2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the second email address.
    /// </summary>
    /// <returns>
    /// A str containing the address or empty string if it was never set.
    /// </returns>
    public str email2()
    {
        str ret;

        ret = contact.email(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::secondEmail());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>email2DisplayName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the second email display name.
    /// </summary>
    /// <returns>
    /// A str containing the email's display name or empty string if it was never set.
    /// </returns>
    public str email2DisplayName()
    {
        str ret;

        ret = contact.emailDisplayName(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::secondEmail());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>email2Type</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the second email's type.
    /// </summary>
    /// <returns>
    /// A str containing the email type or empty string if the second email was never set.
    /// </returns>
    public str email2Type()
    {
        str ret = contact.emailType(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::secondEmail());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>email3</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the third email address.
    /// </summary>
    /// <returns>
    /// A str containing the address or empty string if it was never set.
    /// </returns>
    public str email3()
    {
        str ret = contact.email(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::thirdEmail());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>email3DisplayName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the third email display name.
    /// </summary>
    /// <returns>
    /// A str containing the email's display name or empty string if it was never set.
    /// </returns>
    public str email3DisplayName()
    {
        str ret = contact.emailDisplayName(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::thirdEmail());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>email3Type</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the third email's type.
    /// </summary>
    /// <returns>
    /// A str containing the email type or empty string if the third email was never set.
    /// </returns>
    public str email3Type()
    {
        str ret;

        ret = contact.emailType(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::thirdEmail());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>entryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the outlookId of the contact.
    /// </summary>
    /// <returns>
    /// The outlookId of the contact or empty string if there was a problem with the connection.
    /// </returns>
    /// <remarks>
    /// Uses a call to the exchange server.
    /// </remarks>
    public str entryId()
    {
        str exchangeId;
        str ret;

        exchangeId = contact.entryId();

        //Synchronization is managed with the outlookIds, so the translation is needed
        ret = connection.convertExchangeIdToOutlookId(exchangeId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats postal address of a contact.
    /// </summary>
    /// <param name="city">
    /// City field of contact's address.
    /// </param>
    /// <param name="state">
    /// State field of contact's address.
    /// </param>
    /// <param name="postalCode">
    /// Postal code of contact's address.
    /// </param>
    /// <param name="street">
    /// Street field of contact's address
    /// </param>
    /// <param name="country">
    /// Country field of contact's address.
    /// </param>
    /// <param name="postOfficeBox">
    /// PO Box of contact's address.
    /// </param>
    /// <returns>
    /// Formatted address.
    /// </returns>
    private str formatAddress(str city, str state, str postalCode,
                              str street, str country, str postOfficeBox)
    {
        var addressStringBuilderParameters = new LogisticsPostalAddressStringBuilderParameters();

        addressStringBuilderParameters.parmStreet(street);
        addressStringBuilderParameters.parmZipCodeId(postalCode);
        addressStringBuilderParameters.parmCityName(city);
        addressStringBuilderParameters.parmCountryRegionId(country);
        addressStringBuilderParameters.parmStateId(state);
        addressStringBuilderParameters.parmPostBox(postOfficeBox);

        str address = LogisticsPostalAddressStringBuilder::buildAddressStringFromParameters(addressStringBuilderParameters);

        return address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAnniversary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the contact anniversary date.
    /// </summary>
    /// <returns>
    /// A date containing the contact's anniversary.
    /// </returns>
    public date getAnniversary()
    {
        date    ret = Global::dateNull();
        boolean hasAnniversary;

        hasAnniversary = contact.hasWeddingAnniversary();

        if (hasAnniversary)
        {
            ret = contact.weddingAnniversary();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssistantName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the contact assistant's name.
    /// </summary>
    /// <returns>
    /// The contact assistant's name.
    /// </returns>
    public smmAssistantName getAssistantName()
    {
        smmAssistantName ret;

        ret = contact.assistantName();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssistantTelephoneNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the contact assistant's telephone number.
    /// </summary>
    /// <returns>
    /// The contact assistant's telephone number.
    /// </returns>
    public smmAssistantPhone getAssistantTelephoneNumber()
    {
        smmAssistantPhone ret;

        ret = contact.telephoneNumber(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::assistantTelephone());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBillingInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets current contact billing information.
    /// </summary>
    /// <returns>
    /// Contact billing information.
    /// </returns>
    public smmBillingInformation  getBillingInformation()
    {
        smmBillingInformation ret;

        ret = contact.billingInformation();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBirthDay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets current contact's birth day.
    /// </summary>
    /// <returns>
    /// Contact's birth day.
    /// </returns>
    public date getBirthDay()
    {
        date        ret = Global::dateNull();
        boolean     hasBirthDay;

        hasBirthDay = contact.hasBirthDay();

        if (hasBirthDay)
        {
            ret = contact.birthDay();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the contact's html body.
    /// </summary>
    /// <returns>
    /// A string containing the html of the contact's body.
    /// </returns>
    public str getBody()
    {
        return this.Body();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBusiness2TelephoneNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets current contact's business 2 telephone number.
    /// </summary>
    /// <returns>
    /// Contact's business 2 telephone number.
    /// </returns>
    public str getBusiness2TelephoneNumber()
    {
        str ret;

        ret = contact.telephoneNumber(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::business2Telephone());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBusinessAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets current contact's business address.
    /// </summary>
    /// <returns>
    /// Contact's business address.
    /// </returns>
    public str getBusinessAddress()
    {
        return this.formatAddress(this.getBusinessAddressCity(),
                                  this.getBusinessAddressState(),
                                  this.getBusinessAddressPostalCode(),
                                  this.getBusinessAddressStreet(),
                                  this.getBusinessAddressCountry(),
                                  this.getBusinessAddressPostOfficeBox());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBusinessAddressCity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets current contact's business address city.
    /// </summary>
    /// <returns>
    /// Contact's business address city.
    /// </returns>
    public str getBusinessAddressCity()
    {
        str ret;

        ret = contact.postalAddressCity(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::businessAddressKey());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBusinessAddressCountry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets current contact's business address country.
    /// </summary>
    /// <returns>
    /// Contact's business address country.
    /// </returns>
    public str getBusinessAddressCountry()
    {
        str ret;

        ret = contact.postalAddressCountryOrRegion(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::businessAddressKey());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBusinessAddressPostalCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the business address postal code.
    /// </summary>
    /// <returns>
    /// A str containing the business address postal code or empty string if it was never set.
    /// </returns>
    public str getBusinessAddressPostalCode()
    {
        str ret;

        ret = contact.postalAddressPostalCode(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::businessAddressKey());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBusinessAddressPostOfficeBox</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets current contact's business address PO Box.
    /// </summary>
    /// <returns>
    /// Contact's business address PO Box.
    /// </returns>
    public str getBusinessAddressPostOfficeBox()
    {
        str ret;

        ret = contact.businessAddressPOBox();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBusinessAddressState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets current contact's business address state.
    /// </summary>
    /// <returns>
    /// Contact  business addresss state.
    /// </returns>
    public str getBusinessAddressState()
    {
        str ret;

        ret = contact.postalAddressState(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::businessAddressKey());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBusinessAddressStreet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets current contact's business address street.
    /// </summary>
    /// <returns>
    /// Contact's business address street.
    /// </returns>
    public str getBusinessAddressStreet()
    {
        str ret;

        ret = contact.postalAddressStreet(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::businessAddressKey());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBusinessFaxNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets current contact's business address fax number.
    /// </summary>
    /// <returns>
    /// Contact's business address fax number.
    /// </returns>

    public str getBusinessFaxNumber()
    {
        str ret;

        ret = contact.telephoneNumber(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::businessFaxNumber());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBusinessHomePage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets current contact's business address home page.
    /// </summary>
    /// <returns>
    /// Contact's business address home page.
    /// </returns>
    public str getBusinessHomePage()
    {
        str ret;

        ret = contact.businessHomePage();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBusinessTelephoneNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets current contact's business telephone number.
    /// </summary>
    /// <returns>
    /// Contact's business telephone number.
    /// </returns>
    public str getBusinessTelephoneNumber()
    {
        str ret;

        ret = contact.telephoneNumber(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::businessTelephone());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCallbackTelephoneNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets current contact's callback telephone number.
    /// </summary>
    /// <returns>
    /// Contact's callback telephone number.
    /// </returns>
    public str getCallbackTelephoneNumber()
    {
        str ret;

        ret = contact.telephoneNumber(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::callbackTelephone());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCarTelephoneNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets current contact's car telephone number.
    /// </summary>
    /// <returns>
    /// Contact's car telephone number.
    /// </returns>
    public str getCarTelephoneNumber()
    {
        str ret;

        ret = contact.telephoneNumber(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::carTelephone());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCategories</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets current contact's categories.
    /// </summary>
    /// <returns>
    /// Contact's categories.
    /// </returns>
    public smmOutlookCategories getCategories()
    {
        smmOutlookCategories ret;

        ret = contact.categories();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChildren</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets current contact's children names.
    /// </summary>
    /// <returns>
    /// Contact's children names.
    /// </returns>
    public DirPersonChildrenNames getChildren()
    {
        DirPersonChildrenNames ret;

        ret = contact.children();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getComputerNetworkName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets current contact's computer network name.
    /// </summary>
    /// <returns>
    /// Contact's computer network name.
    /// </returns>
    public smmComputerNetworkName getComputerNetworkName()
    {
        smmComputerNetworkName ret;

        ret = contact.computerNetworkName();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDepartment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets current contact's department name.
    /// </summary>
    /// <returns>
    /// Contact's computer department name.
    /// </returns>
    public smmDepartment getDepartment()
    {
        smmDepartment ret;

        ret = contact.department();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmail1Address</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets current contact's Email1DisplayName.
    /// </summary>
    /// <returns>
    /// Contact's computer Email1DisplayName.
    /// </returns>
    public str getEmail1Address()
    {
        return this.Email1DisplayName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmail2Address</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the second email display name.
    /// </summary>
    /// <returns>
    /// A str containing the email's display name or empty string if it was never set.
    /// </returns>
    public str getEmail2Address()
    {
        return this.Email2DisplayName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmail3Address</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the third email display name.
    /// </summary>
    /// <returns>
    /// A str containing the email's display name or empty string if it was never set.
    /// </returns>
    public str getEmail3Address()
    {
        return this.Email3DisplayName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets first name of contact.
    /// </summary>
    /// <returns>
    /// First name of contact.
    /// </returns>
    public FirstName getFirstName()
    {
        FirstName ret;

        ret = contact.firstName();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFtpSite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ftp site of a contact.
    /// </summary>
    /// <returns>
    /// FTP site of contact.
    /// </returns>
    public str getFtpSite()
    {
        return contact.ftpSite();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFullName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets full name of contact.
    /// </summary>
    /// <returns>
    /// Full name of contact.
    /// </returns>
    public FirstName getFullName()
    {
        str ret;

        ret = contact.fullName();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGender</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets gender of a contact person.
    /// </summary>
    /// <returns>
    /// Gender of contact person.
    /// </returns>
    public int getGender()
    {
        int ret;

        ret = contact.gender();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGovernmentIDNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Goverment ID number of contact.
    /// </summary>
    /// <returns>
    /// Goverment ID number of contact.
    /// </returns>
    public smmGovernmentIDNumber getGovernmentIDNumber()
    {
        smmGovernmentIDNumber ret;

        ret = contact.governmentIdNumber();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHobby</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets hobbies of a contact.
    /// </summary>
    /// <returns>
    /// Hobbies of contact.
    /// </returns>
    public DirPersonHobbies getHobby()
    {
        DirPersonHobbies ret;

        ret = contact.hobby();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHome2TelephoneNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets second home telephone number.
    /// </summary>
    /// <returns>
    /// Second home telephone number.
    /// </returns>
    public str getHome2TelephoneNumber()
    {
        str ret;

        ret = contact.telephoneNumber(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::home2Telephone());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHomeAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets formatted home address of contact.
    /// </summary>
    /// <returns>
    /// Formatted home address of contact.
    /// </returns>
    public str getHomeAddress()
    {
        return this.formatAddress(this.getHomeAddressCity(),
                                  this.getHomeAddressState(),
                                  this.getHomeAddressPostalCode(),
                                  this.getHomeAddressStreet(),
                                  this.getHomeAddressCountry(),
                                  this.getHomeAddressPostOfficeBox());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHomeAddressCity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets city field of home address.
    /// </summary>
    /// <returns>
    /// City field of home address.
    /// </returns>
    public str getHomeAddressCity()
    {
        str ret;

        ret = contact.postalAddressCity(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::homeAddressKey());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHomeAddressCountry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets country field of home address.
    /// </summary>
    /// <returns>
    /// Country field of home address.
    /// </returns>
    public str getHomeAddressCountry()
    {
        str ret;

        ret = contact.postalAddressCountryOrRegion(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::homeAddressKey());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHomeAddressPostalCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets postal code field of home address.
    /// </summary>
    /// <returns>
    /// Postal code field of home address.
    /// </returns>
    public str getHomeAddressPostalCode()
    {
        str ret;

        ret = contact.postalAddressPostalCode(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::homeAddressKey());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHomeAddressPostOfficeBox</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets home address PO box.
    /// </summary>
    /// <returns>
    /// Returns home address PO box.
    /// </returns>
    public str getHomeAddressPostOfficeBox()
    {
        str ret;

        ret = contact.homeAddressPOBox();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHomeAddressState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets state field of home address.
    /// </summary>
    /// <returns>
    /// State field of home address.
    /// </returns>
    public str getHomeAddressState()
    {
        str ret;

        ret = contact.postalAddressState(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::homeAddressKey());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHomeAddressStreet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets street field of home address.
    /// </summary>
    /// <returns>
    /// Street field of home address.
    /// </returns>
    public str getHomeAddressStreet()
    {
        str ret;

        ret = contact.postalAddressStreet(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::homeAddressKey());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHomeFaxNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets fax number field of home address.
    /// </summary>
    /// <returns>
    /// Fax number of home address.
    /// </returns>
    public str getHomeFaxNumber()
    {
        str ret;

        ret = contact.telephoneNumber(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::homeFax());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHomeTelephoneNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets telephone number field of home address.
    /// </summary>
    /// <returns>
    /// Telephone number field of home address.
    /// </returns>
    public str getHomeTelephoneNumber()
    {
        str ret;

        ret = contact.telephoneNumber(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::homeTelephone());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHomeTelephoneNumber2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets second telephone number field of home address.
    /// </summary>
    /// <returns>
    /// City field of home address.
    /// </returns>
    public str getHomeTelephoneNumber2()
    {
        str ret;

        ret = contact.telephoneNumber(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::homeTelephone());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getImAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets IM address of contact.
    /// </summary>
    /// <returns>
    /// IM address of contact.
    /// </returns>
    public str getImAddress()
    {
        return this.IMAddress();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInitials</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets current contact's initials.
    /// </summary>
    /// <returns>
    /// Contact's initials.
    /// </returns>
    public DirPersonInitials getInitials()
    {
        DirPersonInitials ret;

        ret = contact.initials();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInternetFreeBusyAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets internetfreebusy address property of a contact.
    /// </summary>
    /// <returns>
    /// Internetfreebusyaddress of contact.
    /// </returns>
    public str getInternetFreeBusyAddress()
    {
        str ret;

        ret = contact.internetFreeBusyAddress();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsdnNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets ISDN number for current contact.
    /// </summary>
    /// <returns>
    /// ISDN number for contact.
    /// </returns>
    public str getIsdnNumber()
    {
        str ret;

        ret = contact.isdnNumber();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJobTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets job title of contact.
    /// </summary>
    /// <returns>
    /// Job title of contact.
    /// </returns>
    public DirNameProfessionalTitle getJobTitle()
    {
        DirNameProfessionalTitle ret;

        ret = contact.jobTitle();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets language of contact.
    /// </summary>
    /// <returns>
    /// Language of contact.
    /// </returns>
    public LanguageId getLanguage()
    {
        LanguageId ret;

        ret = contact.language();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets last name of contact.
    /// </summary>
    /// <returns>
    /// Lst name of contact.
    /// </returns>
    public LastName getLastName()
    {
        LastName ret;

        ret = contact.lastName();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMiddleName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets middle name of contact.
    /// </summary>
    /// <returns>
    /// Middle name of contact.
    /// </returns>
    public MiddleName getMiddleName()
    {
        MiddleName ret;

        ret = contact.middleName();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMileage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets current contact's mileage.
    /// </summary>
    /// <returns>
    /// Contact's mileage.
    /// </returns>
    public smmMileage getMileage()
    {
        smmMileage ret;

        ret = contact.mileage();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMobileTelephoneNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets mobile telephone number of contact.
    /// </summary>
    /// <returns>
    /// Mobile telephone number of contact.
    /// </returns>
    public str getMobileTelephoneNumber()
    {
        str ret;

        ret = contact.telephoneNumber(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::mobileTelephone());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNickName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets nick name of contact.
    /// </summary>
    /// <returns>
    /// Nick name of contact.
    /// </returns>
    public DirPersonNickName getNickName()
    {
        DirPersonNickName ret;

        ret = contact.nickName();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOfficeLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets office location of contact.
    /// </summary>
    /// <returns>
    /// Office location of contact.
    /// </returns>
    public smmOfficeLocation getOfficeLocation()
    {
        smmOfficeLocation ret;

        ret = contact.officeLocation();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrganizationalIdNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets organizational id number of contact.
    /// </summary>
    /// <returns>
    /// Organizational id number of contact.
    /// </returns>
    public smmOrganizationalIDNumber getOrganizationalIdNumber()
    {
        smmOrganizationalIDNumber organizationalIdNumber;

        organizationalIdNumber = contact.organizationalIdNumber();

        return organizationalIdNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOtherAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets other address of contact.
    /// </summary>
    /// <returns>
    /// Other address of contact.
    /// </returns>
    public str getOtherAddress()
    {
        return this.formatAddress(this.getOtherAddressCity(),
                                  this.getOtherAddressState(),
                                  this.getOtherAddressPostalCode(),
                                  this.getOtherAddressStreet(),
                                  this.getOtherAddressCountry(),
                                  this.getOtherAddressPostOfficeBox());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOtherAddressCity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets city field of other address.
    /// </summary>
    /// <returns>
    /// City field of other address.
    /// </returns>
    public str getOtherAddressCity()
    {
        str ret;

        ret = contact.postalAddressCity(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::otherAddressKey());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOtherAddressCountry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets country field of other address.
    /// </summary>
    /// <returns>
    /// Country field of other address.
    /// </returns>
    public str getOtherAddressCountry()
    {
        str ret;

        ret = contact.postalAddressCountryOrRegion(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::otherAddressKey());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOtherAddressPostalCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets postal code field of other address.
    /// </summary>
    /// <returns>
    /// Postal code field of other address.
    /// </returns>
    public str getOtherAddressPostalCode()
    {
        str ret;

        ret = contact.postalAddressPostalCode(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::otherAddressKey());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOtherAddressPostOfficeBox</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets PO box field of other address.
    /// </summary>
    /// <returns>
    /// PO box field of other address.
    /// </returns>
    public str getOtherAddressPostOfficeBox()
    {
        str ret;

        ret = contact.otherAddressPOBox();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOtherAddressState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets state field of other address.
    /// </summary>
    /// <returns>
    /// State field of other address.
    /// </returns>
    public str getOtherAddressState()
    {
        str ret;

        ret = contact.postalAddressState(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::otherAddressKey());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOtherAddressStreet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets street field of other address.
    /// </summary>
    /// <returns>
    /// Street field of other address.
    /// </returns>
    public str getOtherAddressStreet()
    {
        str ret;

        ret = contact.postalAddressStreet(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::otherAddressKey());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOtherFaxNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets fax number field of other address.
    /// </summary>
    /// <returns>
    /// Fax number field of other address.
    /// </returns>
    public str getOtherFaxNumber()
    {
        str ret;

        ret = contact.telephoneNumber(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::otherFax());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOtherTelephoneNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets telephone number field of other address.
    /// </summary>
    /// <returns>
    /// Telephone number field of other address.
    /// </returns>
    public str getOtherTelephoneNumber()
    {
        str ret;

        ret = contact.telephoneNumber(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::otherTelephone());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPagerNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets pager number of contact.
    /// </summary>
    /// <returns>
    /// Pager number of contact.
    /// </returns>
    public str getPagerNumber()
    {
        str ret;

        ret = contact.telephoneNumber(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::pager());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPersonalHomePage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets personal home page of contact.
    /// </summary>
    /// <returns>
    /// Personal home page of contact.
    /// </returns>
    public str getPersonalHomePage()
    {
        return contact.personalHomePage();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrimaryTelephoneNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets primary telephone number of contact.
    /// </summary>
    /// <returns>
    /// Primary telephone number of contact.
    /// </returns>
    public str getPrimaryTelephoneNumber()
    {
        str ret;

        ret = contact.telephoneNumber(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::primaryTelephone());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProfession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets profession of contact.
    /// </summary>
    /// <returns>
    /// Profession of contact.
    /// </returns>
    public smmProfession getProfession()
    {
        smmProfession ret;

        ret = contact.profession();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRadioTelephoneNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets radio telephone number of contact.
    /// </summary>
    /// <returns>
    /// Radio telephone number of contact.
    /// </returns>
    public str getRadioTelephoneNumber()
    {
        str ret;

        ret = contact.telephoneNumber(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::radioTelephone());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedMailingAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the selected mailing address of contact.
    /// </summary>
    /// <returns>
    /// Selected mailing address of contact.
    /// </returns>
    public smmSelectedMailingAddress getSelectedMailingAddress()
    {
        smmSelectedMailingAddress   selectedAddress;
        int                         ret;

        ret = contact.selectedMailingAddress();

        switch (ret)
        {
            case 1 :
                selectedAddress = smmSelectedMailingAddress::Home;
                break;
            case 2 :
                selectedAddress = smmSelectedMailingAddress::Business;
                break;
            case 3 :
                selectedAddress = smmSelectedMailingAddress::Other;
                break;
        }

        return selectedAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSensitivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets sensitivity of a contact.
    /// </summary>
    /// <returns>
    /// sensitivity of a contact.
    /// </returns>
    public smmSensitivity getSensitivity()
    {
        smmSensitivity  sensitivity;
        str             ret;

        ret =  contact.sensitivity();

        switch (ret)
        {
            case '0' :
                sensitivity = smmSensitivity::Normal;
                break;
            case '1' :
                sensitivity = smmSensitivity::Personal;
                break;
            case '2' :
                sensitivity = smmSensitivity::Privat;
                break;
            case '3' :
                sensitivity = smmSensitivity::Confidential;
                break;
        }

        return sensitivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSpouse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets spouse of a contact.
    /// </summary>
    /// <returns>
    /// Spouse of a contact.
    /// </returns>
    public smmSpouse getSpouse()
    {
        return contact.spouseName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSuffix</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets suffix of contact.
    /// </summary>
    /// <returns>
    /// Suffix of contact.
    /// </returns>
    public DirNameAffixValue getSuffix()
    {
        DirNameAffixValue ret;

        ret = contact.suffix();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTelexNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets telex number of contact.
    /// </summary>
    /// <returns>
    /// Telex number of contact.
    /// </returns>
    public str getTelexNumber()
    {
        str ret;

        ret = contact.telephoneNumber(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::telex());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets title of contact.
    /// </summary>
    /// <returns>
    /// Title of contact.
    /// </returns>
    public DirNameAffixValue getTitle()
    {
        DirNameAffixValue ret;

        ret = contact.title();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTtytddTelephoneNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets ttytdd telephone number of contact.
    /// </summary>
    /// <returns>
    /// Ttytdd telephone number of contact.
    /// </returns>
    public str getTtytddTelephoneNumber()
    {
        str ret;

        ret = contact.telephoneNumber(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::ttyTddPhone());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWebPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets webpage of contact.
    /// </summary>
    /// <returns>
    /// Web page of contact.
    /// </returns>
    public str getWebPage()
    {
        str ret;

        ret = contact.webPage();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>imAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the contact's IM address.
    /// </summary>
    /// <returns>
    /// A str with the IM address or empty string if it was never set.
    /// </returns>

    public str imAddress()
    {
        str ret = contact.imAddress(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::firstIMAddress());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastModificationTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the last date and time the contact was modified in exchange.
    /// </summary>
    /// <returns>
    /// An utcdatetime with the latest date and time when the contact was modified in exchange.
    /// If it's a new contact, until saved it will just exist locally and it will return
    /// DateTimeUtil::minValue().
    /// </returns>
    public utcdatetime lastModificationTime()
    {
        utcdatetime ret = DateTimeUtil::minValue();
        boolean     isNew;

        isNew = contact.isNew();
        // new contacts don't have a lastModificationTime
        // contacts don't exist in Exchange until saved.
        if (! isNew)
        {
            ret = contact.lastModificationTime();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>smmEwsContact</c> to represent an Exchange contact.
    /// </summary>
    /// <param name="_target">
    /// The ExchangeIntegration dll contact that this class will represent.
    /// </param>
    /// <param name="_connection">
    /// The <c>smmEwsConnection</c> to be used by the contact.
    /// </param>
    public void new(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact _target, Microsoft.Dynamics.AX.ExchangeIntegration.Connection _connection)
    {
        contact = _target;
        connection = _connection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the id of the folder in which the contact was saved.
    /// </summary>
    /// <returns>
    /// A string containing the id or empty string if the connection to exchange failed.
    /// </returns>
    /// <remarks>
    /// Makes a connection to the exchange server.
    /// </remarks>
    public smmIItem parent()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parentFolderId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets entry id of parent folder for current contact.
    /// </summary>
    /// <returns>
    /// Entry id of parent folder for current contact.
    /// </returns>
    public str parentFolderId()
    {
        str parentId = contact.parentFolderId();
        str ret;

        //Folder's are managed with the outlookIds, so the translation is needed
        ret = connection.convertExchangeIdToOutlookId(parentId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFolder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the folder for the contact.
    /// </summary>
    /// <param name="_folder">
    /// The folder where the contact should be stored.
    /// </param>
    /// <returns>
    /// The folder where the contact is going to be saved when calling save().
    /// </returns>
    /// <remarks>
    /// The contact will only use the folder when created, during the save() method,
    /// to select where the contact will be created in the exchange server.
    /// Once created in exchange, the folder can't be changed.
    /// </remarks>
    public Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationFolder parmFolder(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationFolder _folder = folder)
    {
        folder = _folder;

        return folder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>save</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the contact in the folder provided.
    /// This will create the contact in exchange (contacts are created locally until saved).
    /// </summary>
    /// <returns>
    /// True if the save method succeeded; otherwise, false.
    /// It may fail due to connection problems.
    /// </returns>
    /// <remarks>
    /// Makes a call to the exchange server.
    /// </remarks>
    public boolean save()
    {
        boolean ret;

        try
        {
            if (contact.isNew())
            {
                if (folder)
                {
                    ret = contact.save(folder.entryId());
                }
                else
                {
                    ret = contact.save("");
                }
            }
            else
            {
               ret = contact.update();
            }
        }
        catch
        {
            error("@SYP4860456");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the contact by calling Save().
    /// </summary>
    /// <returns>
    /// The same <c>smmEwsContact</c> instance that called the method.
    /// </returns>
    public smmIContact saveItem()
    {
        this.Save();
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets account of contact.
    /// </summary>
    /// <param name="_account">
    /// Account of contact.
    /// </param>
    public void setAccount(str _account)
    {
        contact.account(_account);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAnniversary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets anniversary of contact.
    /// </summary>
    /// <param name="_anniversary">
    /// Anniversary of contact.
    /// </param>
    public void setAnniversary(date _anniversary)
    {
        contact.weddingAnniversary(_anniversary);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAssistantName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets assistant name of contact.
    /// </summary>
    /// <param name="_assistantName">
    /// Assistant name of contact.
    /// </param>
    public void setAssistantName(str _assistantName)
    {
        contact.assistantName(_assistantName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAssistantTelephoneNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets assistant telephone number of contact.
    /// </summary>
    /// <param name="_assistantTelephoneNumber">
    /// Assistant telephone number of contact.
    /// </param>
    public void setAssistantTelephoneNumber(str _assistantTelephoneNumber)
    {
        CLRObject key = Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::assistantTelephone();

        contact.telephoneNumber(key, _assistantTelephoneNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBillingInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets billing information of contact.
    /// </summary>
    /// <param name="_billingInformation">
    /// Billing information of contact.
    /// </param>
    public void setBillingInformation(str _billingInformation)
    {
        contact.billingInformation(_billingInformation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBirthDay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets birthday of contact.
    /// </summary>
    /// <param name="_birthDay">
    /// Birthday of contact.
    /// </param>
    public void setBirthDay(date _birthDay)
    {
        contact.birthDay(_birthDay);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets body of contact.
    /// </summary>
    /// <param name="_body">
    /// Body of contact.
    /// </param>
    public void setBody(str _body)
    {
        contact.body(_body);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBusiness2TelephoneNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets telephone number 2 of business address of contact.
    /// </summary>
    /// <param name="_business2TelephoneNumber">
    /// Telephone number 2 of business address of contact.
    /// </param>
    public void setBusiness2TelephoneNumber(str _business2TelephoneNumber)
    {
        CLRObject key = Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::business2Telephone();

        contact.telephoneNumber(key, _business2TelephoneNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBusinessAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets business address of contact.
    /// </summary>
    /// <param name="_businessAddress">
    /// Business address to set for contact.
    /// </param>
    public void setBusinessAddress(str _businessAddress)
    {
        contact.setBusinessAddress(_businessAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBusinessAddressCity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets city of business address of contact.
    /// </summary>
    /// <param name="_businessAddressCity">
    /// City of business address of contact.
    /// </param>
    public void setBusinessAddressCity(str _businessAddressCity)
    {
        CLRObject key = Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::businessAddressKey();

        contact.postalAddressCity(key, _businessAddressCity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBusinessAddressCountry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets country of business address of contact.
    /// </summary>
    /// <param name="_businessAddressCountry">
    /// Country of business address of contact.
    /// </param>
    public void setBusinessAddressCountry(str _businessAddressCountry)
    {
        CLRObject key = Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::businessAddressKey();

        contact.postalAddressCountryOrRegion(key, _businessAddressCountry);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBusinessAddressPostalCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets postal code of business address of contact.
    /// </summary>
    /// <param name="_businessAddressPostalCode">
    /// Postal code of business address of contact.
    /// </param>
    public void setBusinessAddressPostalCode(str _businessAddressPostalCode)
    {
        CLRObject key = Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::businessAddressKey();

        contact.postalAddressPostalCode(key, _businessAddressPostalCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBusinessAddressPostOfficeBox</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets PO box of business address of contact.
    /// </summary>
    /// <param name="_businessAddressPostOfficeBox">
    /// PO box of business address of contact.
    /// </param>
    public void setBusinessAddressPostOfficeBox(str _businessAddressPostOfficeBox)
    {
        contact.businessAddressPOBox(_businessAddressPostOfficeBox);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBusinessAddressState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets state of business address of contact.
    /// </summary>
    /// <param name="_businessAddressState">
    /// State of business address of contact.
    /// </param>
    public void setBusinessAddressState(str _businessAddressState)
    {
        CLRObject key = Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::businessAddressKey();

        contact.postalAddressState(key, _businessAddressState);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBusinessAddressStreet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets street of business address of contact.
    /// </summary>
    /// <param name="_businessAddressStreet">
    /// Street of business address of contact.
    /// </param>
    public void setBusinessAddressStreet(str _businessAddressStreet)
    {
        CLRObject key = Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::businessAddressKey();

        contact.postalAddressStreet(key, _businessAddressStreet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBusinessFaxNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets fax number of business address of contact.
    /// </summary>
    /// <param name="_businessFaxNumber">
    /// Fax number of business address of contact.
    /// </param>
    public void setBusinessFaxNumber(str _businessFaxNumber)
    {
        CLRObject key = Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::businessFaxNumber();

        contact.telephoneNumber(key, _businessFaxNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBusinessHomePage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets home page of business address of contact.
    /// </summary>
    /// <param name="_businessHomePage">
    /// Home page of business address of contact.
    /// </param>
    public void setBusinessHomePage(str _businessHomePage)
    {
        contact.businessHomePage(_businessHomePage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBusinessTelephoneNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets telephone number of business address of contact.
    /// </summary>
    /// <param name="_businessTelephoneNumber">
    /// Telephone number of business address of contact.
    /// </param>
    public void setBusinessTelephoneNumber(str _businessTelephoneNumber)
    {
        CLRObject key = Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::businessTelephone();

        contact.telephoneNumber(key, _businessTelephoneNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCallbackTelephoneNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets call back telephone number of the contact person.
    /// </summary>
    /// <param name="_callbackTelephoneNumber">
    /// Call back telephone number of contact person.
    /// </param>
    public void setCallbackTelephoneNumber(str _callbackTelephoneNumber)
    {
        CLRObject key = Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::callbackTelephone();

        contact.telephoneNumber(key, _callbackTelephoneNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCarTelephoneNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets car telephone number of the contact person.
    /// </summary>
    /// <param name="_carTelephoneNumber">
    /// Car telephone number of contact person.
    /// </param>
    public void setCarTelephoneNumber(str _carTelephoneNumber)
    {
        CLRObject key = Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::carTelephone();

        contact.telephoneNumber(key, _carTelephoneNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCategories</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets categories on contact.
    /// </summary>
    /// <param name="_categories">
    /// Categories on contact.
    /// </param>
    public void setCategories(str _categories)
    {
        contact.categories(_categories);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setChildren</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets children of the contact person.
    /// </summary>
    /// <param name="_children">
    /// Children of contact person.
    /// </param>
    public void setChildren(str _children)
    {
        contact.children(_children);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCompanyMainTelephoneNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets company main telephone number.
    /// </summary>
    /// <param name="_companyMainTelephoneNumber">
    /// Company main telephone number to set.
    /// </param>
    public void setCompanyMainTelephoneNumber(str _companyMainTelephoneNumber)
    {
        contact.companyMainTelephoneNumber(_companyMainTelephoneNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCompanyName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets company name of the contact person.
    /// </summary>
    /// <param name="_companyName">
    /// Company name of contact person.
    /// </param>
    public void setCompanyName(str _companyName)
    {
        contact.companyName(_companyName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setComputerNetworkName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets computer network name of the contact person.
    /// </summary>
    /// <param name="_computerNetworkName">
    /// Computer network name of contact person.
    /// </param>
    public void setComputerNetworkName(str _computerNetworkName)
    {
        contact.computerNetworkName(_computerNetworkName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustomerId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets customer id of the contact person.
    /// </summary>
    /// <param name="_customerId">
    /// Customer id of contact person.
    /// </param>
    public void setCustomerId(str _customerId)
    {
        contact.customerId(_customerId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDepartment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets department of the contact person.
    /// </summary>
    /// <param name="_department">
    /// Department of contact person.
    /// </param>
    public void setDepartment(str _department)
    {
        contact.department(_department);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEmail1Address</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets first e-mail address of the contact person.
    /// </summary>
    /// <param name="_email1Address">
    /// First e-mail address of contact person.
    /// </param>
    public void setEmail1Address(str _email1Address)
    {
        CLRObject key = Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::firstEmail();

        contact.email(key, _email1Address);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEmail2Address</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets second e-mail address of the contact person.
    /// </summary>
    /// <param name="_email2Address">
    /// Second e-mail address of contact person.
    /// </param>
    public void setEmail2Address(str _email2Address)
    {
        CLRObject key = Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::secondEmail();

        contact.email(key, _email2Address);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEmail3Address</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets third e-mail address of the contact person.
    /// </summary>
    /// <param name="_email3Address">
    /// Third e-mail address of contact person.
    /// </param>
    public void setEmail3Address(str _email3Address)
    {
        CLRObject key = Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::thirdEmail();

        contact.email(key, _email3Address);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFirstName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets first name of the contact person.
    /// </summary>
    /// <param name="_firstName">
    /// First name of contact person.
    /// </param>
    public void setFirstName(str _firstName)
    {
        contact.firstName(_firstName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFtpSite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets ftp site of the contact person.
    /// </summary>
    /// <param name="_ftpSite">
    /// FTP site of contact person.
    /// </param>
    public void setFtpSite(str _ftpSite)
    {
        contact.ftpSite(_ftpSite);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGender</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets gender of contact.
    /// </summary>
    /// <param name="_gender">
    /// Gender of conact. 0 = Unknown, 1 = male, 2= female.
    /// </param>
    public void setGender(int _gender)
    {
        contact.gender(_gender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGovernmentIDNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets government ID number of contact.
    /// </summary>
    /// <param name="_governmentIDNumber">
    /// Government ID number of contact.
    /// </param>
    public void setGovernmentIDNumber(str _governmentIDNumber)
    {
        contact.governmentIdNumber(_governmentIDNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHobby</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets hobby of contact.
    /// </summary>
    /// <param name="_hobby">
    /// Hobby of contact.
    /// </param>
    public void setHobby(str _hobby)
    {
        contact.hobby(_hobby);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHome2TelephoneNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets second telephone numbe 2 of home address of contact.
    /// </summary>
    /// <param name="_home2TelephoneNumber">
    /// Second telephone number of home address of contact.
    /// </param>
    public void setHome2TelephoneNumber(str _home2TelephoneNumber)
    {
        CLRObject key = Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::home2Telephone();

        contact.telephoneNumber(key, _home2TelephoneNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHomeAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets home address of contact.
    /// </summary>
    /// <param name="_homeAddress">
    /// Home address of contact.
    /// </param>
    public void setHomeAddress(str _homeAddress)
    {
        contact.setHomeAddress(_homeAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHomeAddressCity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets city of home address of contact.
    /// </summary>
    /// <param name="_homeAddressCity">
    /// City of home address of contact.
    /// </param>
    public void setHomeAddressCity(str _homeAddressCity)
    {
        CLRObject key = Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::homeAddressKey();

        contact.postalAddressCity(key, _homeAddressCity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHomeAddressCountry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets country of home address of contact.
    /// </summary>
    /// <param name="_homeAddressCountry">
    /// Country of home address of contact.
    /// </param>
    public void setHomeAddressCountry(str _homeAddressCountry)
    {
        CLRObject key = Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::homeAddressKey();

        contact.postalAddressCountryOrRegion(key, _homeAddressCountry);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHomeAddressPostalCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets postal code of home address of contact.
    /// </summary>
    /// <param name="_homeAddressPostalCode">
    /// Postal code of home address of contact.
    /// </param>
    public void setHomeAddressPostalCode(str _homeAddressPostalCode)
    {
        CLRObject key = Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::homeAddressKey();

        contact.postalAddressPostalCode(key, _homeAddressPostalCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHomeAddressPostOfficeBox</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets home address PO box.
    /// </summary>
    /// <param name="_homeAddressPostOfficeBox">
    /// Home address PO box.
    /// </param>
    public void setHomeAddressPostOfficeBox(str _homeAddressPostOfficeBox)
    {
        contact.homeAddressPOBox(_homeAddressPostOfficeBox);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHomeAddressState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets state of home address of contact.
    /// </summary>
    /// <param name="_homeAddressState">
    /// State of home address of contact.
    /// </param>
    public void setHomeAddressState(str _homeAddressState)
    {
        CLRObject key = Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::homeAddressKey();

        contact.postalAddressState(key, _homeAddressState);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHomeAddressStreet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets street of home address of contact.
    /// </summary>
    /// <param name="_homeAddressStreet">
    /// Street of home address of contact.
    /// </param>
    public void setHomeAddressStreet(str _homeAddressStreet)
    {
        CLRObject key = Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::homeAddressKey();

        contact.postalAddressStreet(key, _homeAddressStreet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHomeFaxNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets fax number of home address of contact.
    /// </summary>
    /// <param name="_homeFaxNumber">
    /// Fax number of home address of contact.
    /// </param>
    public void setHomeFaxNumber(str _homeFaxNumber)
    {
        CLRObject key = Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::homeFax();

        contact.telephoneNumber(key, _homeFaxNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHomeTelephoneNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets telephone number of home address of contact.
    /// </summary>
    /// <param name="_homeTelephoneNumber">
    /// Telephone number of home address of contact.
    /// </param>
    public void setHomeTelephoneNumber(str _homeTelephoneNumber)
    {
        CLRObject key = Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::homeTelephone();

        contact.telephoneNumber(key, _homeTelephoneNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setImAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets IM address of contact
    /// </summary>
    /// <param name="_imAddress">
    /// IM address of contact.
    /// </param>
    public void setImAddress(str _imAddress)
    {
        CLRObject key = Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::firstIMAddress();

        contact.imAddress(key, _imAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInitials</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets contact initials.
    /// </summary>
    /// <param name="_initials">
    /// Initials for current contact.
    /// </param>
    public void setInitials(str _initials)
    {
        contact.initials(_initials);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInternetFreeBusyAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets internet free busy address property of a contact.
    /// </summary>
    /// <param name="_internetFreeBusyAddress">
    /// Internet free busy address of contact.
    /// </param>
    public void setInternetFreeBusyAddress(str _internetFreeBusyAddress)
    {
        contact.internetFreeBusyAddress(_internetFreeBusyAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIsdnNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets ISDN number for current contact.
    /// </summary>
    /// <param name="_isdnNumber">
    /// ISDN number for contact.
    /// </param>

    public void setIsdnNumber(str _isdnNumber)
    {
        contact.isdnNumber(_isdnNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJobTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets contact job title.
    /// </summary>
    /// <param name="_jobTitle">
    /// Job title for current contact.
    /// </param>
    public void setJobTitle(str _jobTitle)
    {
        contact.jobTitle(_jobTitle);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets contact language.
    /// </summary>
    /// <param name="_language">
    /// Language for current contact.
    /// </param>
    public void setLanguage(str _language)
    {
        contact.language(_language);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLastName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets contact last name.
    /// </summary>
    /// <param name="_lastName">
    /// Last name for current contact.
    /// </param>
    public void setLastName(str _lastName)
    {
        contact.lastName(_lastName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setManagerName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets contact manager name.
    /// </summary>
    /// <param name="_managerName">
    /// Manager name for current contact.
    /// </param>
    public void setManagerName(str _managerName)
    {
        contact.managerName(_managerName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMiddleName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets contact middle name.
    /// </summary>
    /// <param name="_middleName">
    /// Middle name for current contact.
    /// </param>
    public void setMiddleName(str _middleName)
    {
        contact.middleName(_middleName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMileage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets contact mileage.
    /// </summary>
    /// <param name="_mileage">
    /// Mileage for current contact.
    /// </param>
    public void setMileage(str _mileage)
    {
        contact.mileage(_mileage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMobileTelephoneNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets mobile telephone number.
    /// </summary>
    /// <param name="_mobileTelephoneNumber">
    /// Mobile telephone number for current contact.
    /// </param>
    public void setMobileTelephoneNumber(str _mobileTelephoneNumber)
    {
        CLRObject key = Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::mobileTelephone();

        contact.telephoneNumber(key, _mobileTelephoneNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNickName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets nick name of contact.
    /// </summary>
    /// <param name="_nickName">
    /// Nick name for current contact.
    /// </param>
    public void setNickName(str _nickName)
    {
        contact.nickName(_nickName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOfficeLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets office location of contact.
    /// </summary>
    /// <param name="_officeLocation">
    /// Office location for current contact.
    /// </param>
    public void setOfficeLocation(str _officeLocation)
    {
        contact.officeLocation(_officeLocation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOrganizationalIdNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets organizational ID number of contact.
    /// </summary>
    /// <param name="_organizationalIdNumber">
    /// Organizational ID number of contact.
    /// </param>
    public void setOrganizationalIdNumber(str _organizationalIdNumber)
    {
        contact.organizationalIdNumber(_organizationalIdNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOtherAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets other address of contact.
    /// </summary>
    /// <param name="_otherAddress">
    /// Other address of contact.
    /// </param>
    public void setOtherAddress(str _otherAddress)
    {
        contact.setOtherAddress(_otherAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOtherAddressCity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets city of other address of contact.
    /// </summary>
    /// <param name="_otherAddressCity">
    /// City of other address of contact.
    /// </param>
    public void setOtherAddressCity(str _otherAddressCity)
    {
        CLRObject key = Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::otherAddressKey();

        contact.postalAddressCity(key, _otherAddressCity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOtherAddressCountry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets country of other address of contact.
    /// </summary>
    /// <param name="_otherAddressCountry">
    /// Country of other address of contact.
    /// </param>
    public void setOtherAddressCountry(str _otherAddressCountry)
    {
        CLRObject key = Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::otherAddressKey();

        contact.postalAddressCountryOrRegion(key, _otherAddressCountry);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOtherAddressPostalCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets postal code of other address of contact.
    /// </summary>
    /// <param name="_otherAddressPostalCode">
    /// Postal code of other address of contact.
    /// </param>
    public void setOtherAddressPostalCode(str _otherAddressPostalCode)
    {
        CLRObject key = Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::otherAddressKey();

        contact.postalAddressPostalCode(key, _otherAddressPostalCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOtherAddressPostOfficeBox</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets PO box of other address of contact.
    /// </summary>
    /// <param name="_otherAddressPostOfficeBox">
    /// PO box of other address of contact.
    /// </param>
    public void setOtherAddressPostOfficeBox(str _otherAddressPostOfficeBox)
    {
        contact.otherAddressPOBox(_otherAddressPostOfficeBox);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOtherAddressState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets state of other address of contact.
    /// </summary>
    /// <param name="_otherAddressState">
    /// State of other address of contact.
    /// </param>
    public void setOtherAddressState(str _otherAddressState)
    {
        contact.postalAddressState(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::otherAddressKey(), _otherAddressState);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOtherAddressStreet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets street of other address of contact.
    /// </summary>
    /// <param name="_otherAddressStreet">
    /// Street of other address of contact.
    /// </param>
    public void setOtherAddressStreet(str _otherAddressStreet)
    {
        CLRObject key = Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::otherAddressKey();

        contact.postalAddressStreet(key, _otherAddressStreet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOtherFaxNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets other address fax number of contact.
    /// </summary>
    /// <param name="_otherFaxNumber">
    /// Fax number for other address of contact.
    /// </param>
    public void setOtherFaxNumber(str _otherFaxNumber)
    {
        CLRObject key = Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::otherFax();

        contact.telephoneNumber(key, _otherFaxNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOtherTelephoneNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets telephone number of other address of contact.
    /// </summary>
    /// <param name="_otherTelephoneNumber">
    /// Telephone number of other address of contact.
    /// </param>
    public void setOtherTelephoneNumber(str _otherTelephoneNumber)
    {
        CLRObject key = Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::otherTelephone();

        contact.telephoneNumber(key, _otherTelephoneNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPagerNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets pager number of contact.
    /// </summary>
    /// <param name="_pagerNumber">
    /// Pager number of contact.
    /// </param>
    public void setPagerNumber(str _pagerNumber)
    {
        CLRObject key = Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::pager();

        contact.telephoneNumber(key, _pagerNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPersonalHomePage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets personal home page of contact.
    /// </summary>
    /// <param name="_personalHomePage">
    /// Personal home page of contact.
    /// </param>
    public void setPersonalHomePage(str _personalHomePage)
    {
        contact.personalHomePage(_personalHomePage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPrimaryTelephoneNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets primary telephone number of contact.
    /// </summary>
    /// <param name="_primaryTelephoneNumber">
    /// Primary telephone number of contact.
    /// </param>
    public void setPrimaryTelephoneNumber(str _primaryTelephoneNumber)
    {
        CLRObject key = Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::primaryTelephone();

        contact.telephoneNumber(key, _primaryTelephoneNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProfession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets profession of contact.
    /// </summary>
    /// <param name="_profession">
    /// Profession of contact.
    /// </param>
    public void setProfession(str _profession)
    {
        contact.profession(_profession);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRadioTelephoneNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets radio telephone number of contact.
    /// </summary>
    /// <param name="_radioTelephoneNumber">
    /// Radio telephone number of contact.
    /// </param>
    public void setRadioTelephoneNumber(str _radioTelephoneNumber)
    {
        CLRObject key = Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::radioTelephone();

        contact.telephoneNumber(key, _radioTelephoneNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSelectedMailingAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets selected mailing address of contact.
    /// </summary>
    /// <param name="_selectedMailingAddress">
    /// Selected mailing address of contact.
    /// </param>
    public void setSelectedMailingAddress(int _selectedMailingAddress)
    {
        contact.selectedMailingAddress(_selectedMailingAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSensitivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets sensitivity of contact.
    /// </summary>
    /// <param name="_sensitivity">
    /// Sensitivity of contact.
    /// </param>
    public void setSensitivity(int _sensitivity)
    {
        contact.sensitivity(_sensitivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSpouse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets spouse property of contact.
    /// </summary>
    /// <param name="_spouse">
    /// Spouse of contact.
    /// </param>
    public void setSpouse(str _spouse)
    {
        contact.spouseName(_spouse);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSuffix</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets suffix of contact.
    /// </summary>
    /// <param name="_suffix">
    /// Suffix of contact.
    /// </param>
    public void setSuffix(str _suffix)
    {
        contact.suffix(_suffix);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTelexNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets telex number of contact.
    /// </summary>
    /// <param name="_telexNumber">
    /// Telex number of contact.
    /// </param>
    public void setTelexNumber(str _telexNumber)
    {
        CLRObject key = Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::telex();

        contact.telephoneNumber(key, _telexNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets title of contact.
    /// </summary>
    /// <param name="_title">
    /// Title of contact.
    /// </param>
    public void setTitle(str _title)
    {
        contact.title(_title);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTtytddTelephoneNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets ttytdd telephone number of contact.
    /// </summary>
    /// <param name="_ttytddTelephoneNumber">
    /// Ttytdd telephone number of contact.
    /// </param>
    public void setTtytddTelephoneNumber(str _ttytddTelephoneNumber)
    {
        CLRObject key = Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact::ttyTddPhone();

        contact.telephoneNumber(key, _ttytddTelephoneNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUser1</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets user 1 property of contact.
    /// </summary>
    /// <param name="_user1">
    /// User 1 property of contact.
    /// </param>
    public void setUser1(str _user1)
    {
        contact.userField1(_user1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUser2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets user 2 property of contact.
    /// </summary>
    /// <param name="_user2">
    /// User 2 property of contact.
    /// </param>
    public void setUser2(str _user2)
    {
        contact.userField2(_user2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUser3</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets user 3 property of contact.
    /// </summary>
    /// <param name="_user3">
    /// User 3 property of contact.
    /// </param>
    public void setUser3(str _user3)
    {
        contact.userField3(_user3);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUser4</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets user 4 property of contact.
    /// </summary>
    /// <param name="_user4">
    /// User 4 property of contact.
    /// </param>
    public void setUser4(str _user4)
    {
        contact.userField4(_user4);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWebPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets webpage of contact.
    /// </summary>
    /// <param name="_webPage">
    /// Web page of contact.
    /// </param>
    public void setWebPage(str _webPage)
    {
        contact.webPage(_webPage);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>