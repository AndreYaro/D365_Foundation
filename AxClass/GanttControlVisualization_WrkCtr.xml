<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GanttControlVisualization_WrkCtr</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the visualization of the general resource scenario when used with a GanttControl form control.
/// </summary>
public class GanttControlVisualization_WrkCtr extends GanttControlVisualization
{
    const str DeliveryDateSymbolName = 'Diamond';
    const str MaterialAvailabilitySymbolName = 'Pickup';
    const str MaterialAvailabilityWarningSymbolName = 'Warning';
    const str MaterialAvailabilityUnknownSymbolName = 'Help';

    const int defaultGridWidth = 600;

    List groupFields;
    List sortFields;

    // Internal representation of the last generated activity list
    Map activityMap;
    
    Map summaryActivityFieldGroupMap;

    // Since summary activities might change ID when reloading from db, we keep track on collapsed state per summary "tree path"
    Map summaryActivityPathMap;
    Map summaryPathCollapsedMap;
    
    boolean undoHasWrkCtrChange;    
    
    GanttTableField ganttTableFieldWrkCtrId;
    GanttTableField ganttTableFieldSchedFromDate;
    GanttTableField ganttTableFieldSchedToDate;
    GanttTableField ganttTableFieldSchedFromTime;
    GanttTableField ganttTableFieldSchedToTime;
    GanttTableField ganttTableFieldSchedFromDateTime;
    GanttTableField ganttTableFieldSchedToDateTime;
    GanttTableField ganttTableFieldSchedFromWrkCtrIdSort;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        boolean ret = super();

        if (ret)
        {
            this.createForm();
            this.runForm();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTableFields</Name>
				<Source><![CDATA[
    public void initTableFields()
    {
        ganttTableFieldWrkCtrId = GanttTableField::newFieldData(tableNum(GanttTmpWrkCtrJob), fieldNum(GanttTmpWrkCtrJob, WrkCtrId));
        ganttTableFieldSchedFromDate = GanttTableField::newFieldData(tableNum(GanttTmpWrkCtrJob), fieldNum(GanttTmpWrkCtrJob, SchedFromDate));
        ganttTableFieldSchedToDate = GanttTableField::newFieldData(tableNum(GanttTmpWrkCtrJob), fieldNum(GanttTmpWrkCtrJob, SchedToDate));
        ganttTableFieldSchedFromTime = GanttTableField::newFieldData(tableNum(GanttTmpWrkCtrJob), fieldNum(GanttTmpWrkCtrJob, SchedFromTime));
        ganttTableFieldSchedToTime = GanttTableField::newFieldData(tableNum(GanttTmpWrkCtrJob), fieldNum(GanttTmpWrkCtrJob, SchedToTime));
        ganttTableFieldSchedFromDateTime = GanttTableField::newFieldData(tableNum(GanttTmpWrkCtrJob), fieldNum(GanttTmpWrkCtrJob, SchedFromDateTime));
        ganttTableFieldSchedToDateTime = GanttTableField::newFieldData(tableNum(GanttTmpWrkCtrJob), fieldNum(GanttTmpWrkCtrJob, SchedToDateTime));
        ganttTableFieldSchedFromWrkCtrIdSort = GanttTableField::newFieldData(tableNum(GanttTmpWrkCtrJob), fieldNum(GanttTmpWrkCtrJob, SchedFromWrkCtrIdSort));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static GanttControlVisualization_WrkCtr construct()
    {
        return new GanttControlVisualization_WrkCtr();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newGanttClient</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance if the class based on a <c>GanttClient</c> object.
    /// </summary>
    /// <param name = "_ganttClient">The client object.</param>
    /// <returns>A new instance of the class.</returns>
    public static GanttControlVisualization_WrkCtr newGanttClient(GanttClient_WrkCtr _ganttClient)
    {
        GanttControlVisualization_WrkCtr ganttVisualization = GanttControlVisualization_WrkCtr::construct();
        ganttVisualization.parmGanttClient(_ganttClient);
        ganttVisualization.parmShowInUserTZ(ProdGanttApplyUserTimezoneOffsetFlight::instance().isEnabled() &&
            ProdApplyUserTimezoneOffsetFlight::instance().isEnabled() &&
            ProdParameters::find().ShowSchedDateTimeWithUserTimeZone == ProdShowDateTimeTimeZone::UserTimeZone);
        
        return ganttVisualization;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    public formName formName()
    {
        return formstr(GanttWrkCtr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGanttDialog</Name>
				<Source><![CDATA[
    protected GanttDialog createGanttDialog()
    {
        return GanttDialog_WrkCtr::newDialogFromVisualization(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the gantt control configuration settings.
    /// </summary>
    /// <returns>A <c>Configuration</c> object with values set based on the client and setup information.</returns>
    public GanttControlConfiguration getConfiguration()
    {
        GanttControlConfiguration ret;

        ret = super();

        GanttSetup_WrkCtr ganttSetup = ganttClient.parmGanttSetup() as GanttSetup_WrkCtr;
        ret.parmShowAllLinks(ganttSetup.parmShowAllLinks());

        GanttColor_WrkCtr ganttColor = ganttClient.parmGanttColor() as GanttColor_WrkCtr;
        ret.parmUseThemeColors(ganttColor.parmUseThemeColors());

        ret.parmGridWidth(defaultGridWidth);

        ret.parmAllowMoveActivities(true);

        if (this.allowVerticalDrag())
        {
            ret.parmVerticalMoveMode(GanttControlVerticalMoveMode::SameLevel);
        }
        else
        {
            ret.parmVerticalMoveMode(GanttControlVerticalMoveMode::None);
        }


        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowVerticalDrag</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if change of resource using vertical drag is allowed.
    /// </summary>
    /// <returns>true if change of resource using vertical drag is allowed; otherwise, false.</returns>
    protected boolean allowVerticalDrag()
    {
        GanttView_WrkCtr ganttView = ganttClient.parmGanttView() as GanttView_WrkCtr;
        
        if (ganttView.parmCurrentView() == GanttViewWrkCtr::ResourceView
            && ganttView.parmResourceViewWrkCtrId()
            && !ganttView.parmResourceViewRefId()
            && !ganttView.parmResourceViewRefStatus()
            && !ganttView.parmResourceViewOprId())
        {
            return true;
        }
        
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getColumns</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the columns to display in the gantt control.
    /// </summary>
    /// <returns>A List of gantt column settings.</returns>
    public List getColumns()
    {
        List columns = new List(Types::Class);

        boolean showOperationNum = true;
        boolean showRouteJobType = true;
        boolean showResource = true;
        boolean showStartEndDateTime = true;

        if (GanttWrkCtrViewLeftPaneFeature::instance().isEnabled())
        {
            GanttView_WrkCtr ganttView = ganttClient.parmGanttView() as GanttView_WrkCtr;
            showOperationNum        = ganttView.parmShowOperationNum();
            showRouteJobType        = ganttView.parmShowRouteJobType();
            showResource            = ganttView.parmShowResource();
            showStartEndDateTime    = ganttView.parmShowStartEndDateTime();
        }

        columns.addEnd(GanttControlColumn::newParameters(fieldPName(GanttTmpWrkCtrJob, RefId), 0, true));
        columns.addEnd(GanttControlColumn::newParameters(fieldPName(GanttTmpWrkCtrJob, OprNum), 60, showOperationNum));
        columns.addEnd(GanttControlColumn::newParameters(fieldPName(GanttTmpWrkCtrJob, JobType), 80, showRouteJobType));
        columns.addEnd(GanttControlColumn::newParameters(fieldPName(GanttTmpWrkCtrJob, WrkCtrId), 100, showResource));
        columns.addEnd(GanttControlColumn::newParameters(fieldPName(GanttTmpWrkCtrJob, SchedFromDateTime), 130, showStartEndDateTime));
        columns.addEnd(GanttControlColumn::newParameters(fieldPName(GanttTmpWrkCtrJob, SchedToDateTime), 130, showStartEndDateTime));

        return columns;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGroupingAndSortFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the group and sort information based on view settings.
    /// </summary>
    /// <returns>true if grouping on the resource level; otherwise, false.</returns>
    protected boolean setGroupingAndSortFields()
    {
        GanttClient_WrkCtr  localGanttClient = this.parmGanttClient() as GanttClient_WrkCtr;
        GanttView_WrkCtr  ganttView = localGanttClient.parmGanttView() as GanttView_WrkCtr;
        GanttCallerWrkCtr ganttCallerWrkCtr = localGanttClient.parmGanttCaller();

        groupFields = new List(Types::Class);
        sortFields = new List(Types::Integer);

        boolean groupByResource = false;
        boolean isCollapsed;        

        if (ganttView.parmCurrentView() == GanttViewWrkCtr::OrderView)
        {
            isCollapsed = ganttView.parmOrderViewInitiallyCollapsed();

            // Group by site
            if (ganttView.parmOrderViewInventSiteId())
            {
                groupFields.addEnd(GanttTableGroupField::newStandard(GanttTableGroupFieldType::Site, fieldNum(GanttTmpWrkCtrJob, InventSiteId), false, isCollapsed));
                sortFields.addEnd(fieldNum(GanttTmpWrkCtrJob, InventSiteId));
            }

            // Group by status
            if (ganttView.parmOrderViewRefStatus())
            {
                groupFields.addEnd(GanttTableGroupField::newStandard(GanttTableGroupFieldType::OrderStatus, fieldNum(GanttTmpWrkCtrJob, RefStatus), false, isCollapsed));
                sortFields.addEnd(fieldNum(GanttTmpWrkCtrJob, RefStatusSort));
            }

            // Group by order/project id
            if (ganttView.parmOrderViewRefId())
            {
                groupFields.addEnd(GanttTableGroupField::newStandard(GanttTableGroupFieldType::OrderNumber, fieldNum(GanttTmpWrkCtrJob, RefId), ganttView.parmOrderViewRefIdSummaryBar(), isCollapsed, ganttView.mustShowDeliveryDate()));
                sortFields.addEnd(fieldNum(GanttTmpWrkCtrJob, RefId));
            }

            // Group by production unit
            if (ganttView.parmOrderViewProdUnitId())
            {
                groupFields.addEnd(GanttTableGroupField::newStandard(GanttTableGroupFieldType::ProductionUnit, fieldNum(GanttTmpWrkCtrJob, ProdUnitId), false, isCollapsed));
                sortFields.addEnd(fieldNum(GanttTmpWrkCtrJob, ProdUnitId));
            }

            // Group by resource group
            if (ganttView.parmOrderViewWrkCtrGroupId())
            {
                groupFields.addEnd(GanttTableGroupField::newStandard(GanttTableGroupFieldType::ResourceGroup, fieldNum(GanttTmpWrkCtrJob, WrkCtrGroupId), false, isCollapsed));
                sortFields.addEnd(fieldNum(GanttTmpWrkCtrJob, WrkCtrGroupId));
            }

            // Group by resource
            if (ganttView.parmOrderViewWrkCtrId())
            {
                groupFields.addEnd(GanttTableGroupField::newStandard(GanttTableGroupFieldType::Resource, fieldNum(GanttTmpWrkCtrJob, WrkCtrId), false, isCollapsed));
                groupByResource = true;

                switch (ganttCallerWrkCtr)
                {
                    case GanttCallerWrkCtr::Prod:
                    case GanttCallerWrkCtr::PlannedProd:
                    case GanttCallerWrkCtr::Proj:
                        sortFields.addEnd(fieldNum(GanttTmpWrkCtrJob, SchedFromWrkCtrIdSort));
                        break;
                    default:
                        sortFields.addEnd(fieldNum(GanttTmpWrkCtrJob, WrkCtrId));
                        break;
                }
            }
            
            // Group by operation
            if (ganttView.parmOrderViewOprId())
            {
                groupFields.addEnd(GanttTableGroupField::newStandard(GanttTableGroupFieldType::Operation, fieldNum(GanttTmpWrkCtrJob, OprId), ganttView.parmOrderViewOprIdSummaryBar(), isCollapsed));
                sortFields.addEnd(fieldNum(GanttTmpWrkCtrJob, OprId));
            }
        }
        else
        {
            isCollapsed = ganttView.parmResourceViewInitiallyCollapsed();

            // Group by site
            if (ganttView.parmResourceViewInventSiteId())
            {
                groupFields.addEnd(GanttTableGroupField::newStandard(GanttTableGroupFieldType::Site, fieldNum(GanttTmpWrkCtrJob, InventSiteId), false, isCollapsed));
                sortFields.addEnd(fieldNum(GanttTmpWrkCtrJob, InventSiteId));
            }

            // Group by production unit
            if (ganttView.parmResourceViewProdUnitId())
            {
                groupFields.addEnd(GanttTableGroupField::newStandard(GanttTableGroupFieldType::ProductionUnit, fieldNum(GanttTmpWrkCtrJob, ProdUnitId), false, isCollapsed));
                sortFields.addEnd(fieldNum(GanttTmpWrkCtrJob, ProdUnitId));
            }

            // Group by resource group
            if (ganttView.parmResourceViewWrkCtrGroupId())
            {
                groupFields.addEnd(GanttTableGroupField::newStandard(GanttTableGroupFieldType::ResourceGroup, fieldNum(GanttTmpWrkCtrJob, WrkCtrGroupId), false, isCollapsed));
                sortFields.addEnd(fieldNum(GanttTmpWrkCtrJob, WrkCtrGroupId));
            }

            // Group by resource
            if (ganttView.parmResourceViewWrkCtrId())
            {
                groupFields.addEnd(GanttTableGroupField::newStandard(GanttTableGroupFieldType::Resource, fieldNum(GanttTmpWrkCtrJob, WrkCtrId), ganttView.parmResourceViewWrkCtrIdCapacityBar(), isCollapsed, false, GanttControlSummaryType::TaskPreviewWithOverlapExt));
                groupByResource = true;

                switch (ganttCallerWrkCtr)
                {
                    case GanttCallerWrkCtr::Prod:
                    case GanttCallerWrkCtr::PlannedProd:
                    case GanttCallerWrkCtr::Proj:
                        sortFields.addEnd(fieldNum(GanttTmpWrkCtrJob, SchedFromWrkCtrIdSort));
                        break;
                    default:
                        sortFields.addEnd(fieldNum(GanttTmpWrkCtrJob, WrkCtrId));
                        break;
                }
            }

            // Group by status
            if (ganttView.parmResourceViewRefStatus())
            {
                groupFields.addEnd(GanttTableGroupField::newStandard(GanttTableGroupFieldType::OrderStatus, fieldNum(GanttTmpWrkCtrJob, RefStatus), false, isCollapsed));
                sortFields.addEnd(fieldNum(GanttTmpWrkCtrJob, RefStatusSort));
            }

            // Group by order/project id
            if (ganttView.parmResourceViewRefId())
            {
                groupFields.addEnd(GanttTableGroupField::newStandard(GanttTableGroupFieldType::OrderNumber, fieldNum(GanttTmpWrkCtrJob, RefId), false, isCollapsed, ganttView.mustShowDeliveryDate()));
                sortFields.addEnd(fieldNum(GanttTmpWrkCtrJob, RefId));
            }

            // Group by operation
            if (ganttView.parmResourceViewOprId())
            {
                groupFields.addEnd(GanttTableGroupField::newStandard(GanttTableGroupFieldType::Operation, fieldNum(GanttTmpWrkCtrJob, OprId), ganttView.parmResourceViewOprIdSummaryBar(), isCollapsed));
                sortFields.addEnd(fieldNum(GanttTmpWrkCtrJob, OprId));
            }
        }

        // Add fallback sort fields
        sortFields.addEnd(fieldNum(GanttTmpWrkCtrJob, RefType));
        sortFields.addEnd(fieldNum(GanttTmpWrkCtrJob, RefId));
        sortFields.addEnd(fieldNum(GanttTmpWrkCtrJob, OprNum));
        sortFields.addEnd(fieldNum(GanttTmpWrkCtrJob, OprNumActivityNumber));
        sortFields.addEnd(fieldNum(GanttTmpWrkCtrJob, JobType));
        sortFields.addEnd(fieldNum(GanttTmpWrkCtrJob, OprPriority));
        sortFields.addEnd(fieldNum(GanttTmpWrkCtrJob, SchedFromDate));
        sortFields.addEnd(fieldNum(GanttTmpWrkCtrJob, SchedFromTime));

        return groupByResource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the activities to display in the gantt control.
    /// </summary>
    /// <returns>A List of gantt activities.</returns>
    public List getActivities()
    {
        List activities = new List(Types::Class);
        activityMap = new Map(Types::String, Types::Class);
        
        summaryActivityFieldGroupMap = new Map (Types::String, Types::Container);
        summaryActivityPathMap = new Map(Types::String, Types::String);

        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(GanttTmpWrkCtrJob));

        qbds.addRange(fieldNum(GanttTmpWrkCtrJob, SchedFromDate)).value(SysQuery::range(null,ganttClient.parmToDate()));
        qbds.addRange(fieldNum(GanttTmpWrkCtrJob, SchedToDate)).value(SysQuery::range(ganttClient.parmFromDate(), null));
        qbds.addRange(fieldNum(GanttTmpWrkCtrJob, IsDisplayed)).value(SysQuery::value(NoYes::Yes));

        boolean groupByResource = this.setGroupingAndSortFields();

        // Add sorting
        ListEnumerator sortFieldEnumerator = sortFields.getEnumerator();
        while (sortFieldEnumerator.moveNext())
        {
            qbds.addSortField(sortFieldEnumerator.current());
        }

        ListEnumerator groupFieldEnumerator = groupFields.getEnumerator();

        QueryRun queryRun = new QueryRun(query);
        GanttData_WrkCtr ganttData_WrkCtr = ganttClient.parmGanttData() as GanttData_WrkCtr;
        queryRun.setRecord(ganttData_WrkCtr.parmGanttTableWrkCtrJob().parmTableBuffer());

        Map summaryPathActivityMap = new Map(Types::String, Types::Class);

        while (queryRun.next())
        {
            GanttTmpWrkCtrJob ganttTmpWrkCtrJob = queryRun.get(tableNum(GanttTmpWrkCtrJob));

            boolean isActive = this.parmGanttClient().parmSetLoadIds().in(ganttTmpWrkCtrJob.RefId);
                        
            // Add new groupings
            str parentActivityId = this.addGroupingActivities(ganttTmpWrkCtrJob, groupFieldEnumerator, summaryPathActivityMap, activities, isActive, false);

            // Add the activity
            GanttControlTaskActivitySchedulable activity = GanttControlTaskActivitySchedulable::construct(this.recIdToActivityId(ganttTmpWrkCtrJob.RecId));
            this.setActivityPropertiesFromTmp(activity, ganttTmpWrkCtrJob);
            activity.parmParentId(parentActivityId);
            activity.parmIsActive(isActive);            
            activity.parmAllowResize(false);
            activity.parmAllowCompletionChange(false);
            
            activities.addEnd(activity);
            activityMap.insert(activity.parmId(), activity);
        }

        if (groupByResource)
        {
            // Add empty resource groupings
            ganttData_WrkCtr.initEmptyWrkCtrIds();
        
            str emptyGroupName = GanttView::emptyGroupName();
            Set setCurrentEmptyWrkCtrIds = ganttData_WrkCtr.getSetEmptyWrkCtrIds();
            SetEnumerator emptyWrkCtrIdsEnumerator = setCurrentEmptyWrkCtrIds.getEnumerator();
            while (emptyWrkCtrIdsEnumerator && emptyWrkCtrIdsEnumerator.moveNext())
            {
                Map emptyWrkCtrIdFields = emptyWrkCtrIdsEnumerator.current();
            
                GanttTmpWrkCtrJob ganttTmpWrkCtrJob;
                ganttTmpWrkCtrJob.WrkCtrId = emptyWrkCtrIdFields.exists(fieldstr(GanttTmpWrkCtrJob, WrkCtrId)) ? emptyWrkCtrIdFields.lookup(fieldstr(GanttTmpWrkCtrJob, WrkCtrId)) : emptyGroupName;
                ganttTmpWrkCtrJob.InventSiteId = emptyWrkCtrIdFields.exists(fieldstr(GanttTmpWrkCtrJob, InventSiteId)) ? emptyWrkCtrIdFields.lookup(fieldstr(GanttTmpWrkCtrJob, InventSiteId)) : emptyGroupName;
                ganttTmpWrkCtrJob.ProdUnitId = emptyWrkCtrIdFields.exists(fieldstr(GanttTmpWrkCtrJob, ProdUnitId)) ? emptyWrkCtrIdFields.lookup(fieldstr(GanttTmpWrkCtrJob, ProdUnitId)) : emptyGroupName;
                ganttTmpWrkCtrJob.WrkCtrGroupId = emptyWrkCtrIdFields.exists(fieldstr(GanttTmpWrkCtrJob, WrkCtrGroupId)) ? emptyWrkCtrIdFields.lookup(fieldstr(GanttTmpWrkCtrJob, WrkCtrGroupId)) : emptyGroupName;
                ganttTmpWrkCtrJob.CalendarId = ganttTmpWrkCtrJob.WrkCtrId;
                ganttTmpWrkCtrJob.RefStatus = emptyGroupName;
                ganttTmpWrkCtrJob.RefId = emptyGroupName;
                ganttTmpWrkCtrJob.OprId = emptyGroupName;
                ganttTmpWrkCtrJob.RefStatus = emptyGroupName;
            
                this.addGroupingActivities(ganttTmpWrkCtrJob, groupFieldEnumerator, summaryPathActivityMap, activities, false, true);
            }
        }

        return activities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGroupingActivities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds grouping activities.
    /// </summary>
    /// <param name = "_ganttTmpWrkCtrJob">The job to add groups for.</param>
    /// <param name = "_groupFieldEnumerator">An enumerator of grouping fields.</param>
    /// <param name = "_summaryPathActivityMap">A map where the path and activity relations will be written to.</param>
    /// <param name = "_activities">The activity list that the group should be added to.</param>
    /// <param name = "_isActive">Determines if the group should use the active color.</param>
    /// <param name = "_resourceFieldNeverCollapsed">Determines if the resource group field should never be collapsed, independent of the groupField settings.</param>
    /// <returns>The Id of the last group added.</returns>
    private str addGroupingActivities(GanttTmpWrkCtrJob     _ganttTmpWrkCtrJob, 
                                      ListEnumerator        _groupFieldEnumerator, 
                                      Map                   _summaryPathActivityMap,
                                      List                  _activities, 
                                      boolean               _isActive,
                                      boolean               _resourceFieldNeverCollapsed)
    {
        GanttView_WrkCtr ganttView = ganttClient.parmGanttView() as GanttView_WrkCtr;
        GanttColor_WrkCtr ganttColor = ganttClient.parmGanttColor() as GanttColor_WrkCtr;
        boolean isResourceView = (ganttView.parmCurrentView() == GanttViewWrkCtr::ResourceView);
        
        str parentActivityId;
        str summaryPath;

        if (!summaryPathCollapsedMap)
        {
            this.resetSummaryPathCollapsedMap();
        }

        // Add the grouping activities
        _groupFieldEnumerator.reset();
        while (_groupFieldEnumerator.moveNext())
        {
            GanttTableGroupField groupField = _groupFieldEnumerator.current();

            GanttControlSummaryActivity groupActivity;
            summaryPath += strFmt("#%1", _ganttTmpWrkCtrJob.(groupField.parmFieldId()));

            if (!_summaryPathActivityMap.exists(summaryPath))
            {
                str newActivityId = strFmt("grp%1", guid2str(newGuid()));
                        
                GanttCalendarId groupCalendarId = '';
                boolean isCollapsed;
                
                if (summaryPathCollapsedMap && summaryPathCollapsedMap.exists(summaryPath))
                {
                    isCollapsed = summaryPathCollapsedMap.lookup(summaryPath);
                }
                else
                {
                    isCollapsed = groupField.parmIsCollapsed();
                }
                
                if (groupField.parmFieldId() == fieldNum(ganttTmpWrkCtrJob, WrkCtrId))
                {
                    groupCalendarId = _ganttTmpWrkCtrJob.CalendarId;
                    if (_resourceFieldNeverCollapsed)
                    {
                        isCollapsed = false;
                    }
                }

                groupActivity = GanttControlSummaryActivity::newParameters(
                        newActivityId,
                        parentActivityId,
                        groupField.text(_ganttTmpWrkCtrJob),
                        groupCalendarId,
                        isResourceView ? ganttColor.parmActiveNodeColor() : _ganttTmpWrkCtrJob.Color,
                        groupField.parmShowSummaryBar(),
                        isCollapsed,
                        groupField.tooltipText(_ganttTmpWrkCtrJob),
                        isResourceView || _isActive,
                        new List(Types::Class),
                        groupField.parmSummaryType()
                        );

                if (groupField.parmShowDeliveryDateMarker())
                {
                    utcdatetime deliveryDateTime = DateTimeUtil::newDateTime(_ganttTmpWrkCtrJob.RefDeliveryDate, _ganttTmpWrkCtrJob.RefDeliveryTime, DateTimeUtil::getUserPreferredTimeZone());
                    
                    GanttControlMilestoneMarker milestoneMarker = GanttControlMilestoneMarker::newParameters(
                            strFmt('%1ODateMark', groupActivity.parmId()),
                            deliveryDateTime,
                            "@SYS16056",
                            DeliveryDateSymbolName,
                            ganttColor.parmDeliveryDateColor());

                    groupActivity.parmMilestoneMarkers().addEnd(milestoneMarker);
                }

                _activities.addEnd(groupActivity);
                activityMap.insert(groupActivity.parmId(), groupActivity);

                summaryActivityFieldGroupMap.insert(groupActivity.parmId(), [groupField.parmFieldId(), _ganttTmpWrkCtrJob.(groupField.parmFieldId())]);
                summaryActivityPathMap.insert(groupActivity.parmId(), summaryPath);
                summaryPathCollapsedMap.insert(summaryPath, groupActivity.parmCollapsed());

                _summaryPathActivityMap.insert(summaryPath, groupActivity);                
            }
            else
            {
                groupActivity = _summaryPathActivityMap.lookup(summaryPath);
            }

            parentActivityId = groupActivity.parmId();
        }

        return parentActivityId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSummaryActivityExpand</Name>
				<Source><![CDATA[
    public void onSummaryActivityExpand(str _activityId)
    {
        super(_activityId);

        if (summaryActivityPathMap.exists(_activityId))
        {
            summaryPathCollapsedMap.insert(summaryActivityPathMap.lookup(_activityId), false);
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSummaryActivityCollapse</Name>
				<Source><![CDATA[
    public void onSummaryActivityCollapse(str _activityId)
    {
        super(_activityId);

        if (summaryActivityPathMap.exists(_activityId))
        {
            summaryPathCollapsedMap.insert(summaryActivityPathMap.lookup(_activityId), true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanAll</Name>
				<Source><![CDATA[
    public void cleanAll()
    {
        this.resetSummaryPathCollapsedMap();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetSummaryPathCollapsedMap</Name>
				<Source><![CDATA[
    protected void resetSummaryPathCollapsedMap()
    {
        summaryPathCollapsedMap = new Map(Types::String, Types::Enum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSiblingActivities</Name>
				<Source><![CDATA[
    protected Set getSiblingActivities(str _activityId)
    {
        Set siblingActivities = super(_activityId);

        GanttData_WrkCtr ganttData_WrkCtr = this.parmGanttClient().parmGanttData();
        Set setGroupRecIds = ganttData_WrkCtr.getGroupRecIds(ganttData_WrkCtr.getLinkGroupByRecId(this.activityIdToRecId(_activityId)));

        SetEnumerator setEnumerator = setGroupRecIds.getEnumerator();
        while (setEnumerator.moveNext())
        {
            siblingActivities.add(this.recIdToActivityId(setEnumerator.current()));
        }

        return siblingActivities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getColumnTexts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a list with the column details of the Gantt temp job.
    /// </summary>
    /// <param name = "_ganttTmpWrkCtrJob">The job record to get details from.</param>
    /// <returns>A list with the column texts of th job.</returns>
    protected List getColumnTexts(GanttTmpWrkCtrJob _ganttTmpWrkCtrJob)
    {
        // DateTime is shown in company time zone since the manufacturing related data do not change based on location
        List columnTexts = new List(Types::String);
        columnTexts.addEnd(_ganttTmpWrkCtrJob.RefId);
        columnTexts.addEnd(int2Str(_ganttTmpWrkCtrJob.OprNum));
        columnTexts.addEnd(enum2Str(_ganttTmpWrkCtrJob.JobType));        
        columnTexts.addEnd(_ganttTmpWrkCtrJob.WrkCtrId);      
        columnTexts.addEnd(strFmt('%1', DateTimeUtil::applyTimeZoneOffset(_ganttTmpWrkCtrJob.SchedFromDateTime, DateTimeUtil::getUserPreferredTimeZone())));
        columnTexts.addEnd(strFmt('%1', DateTimeUtil::applyTimeZoneOffset(_ganttTmpWrkCtrJob.SchedToDateTime, DateTimeUtil::getUserPreferredTimeZone())));
                
        return columnTexts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setActivityPropertiesFromTmp</Name>
				<Source><![CDATA[
    private void setActivityPropertiesFromTmp(GanttControlTaskActivitySchedulable _activity, GanttTmpWrkCtrJob _ganttTmpWrkCtrJob)
    {
        List columnTexts = this.getColumnTexts(_ganttTmpWrkCtrJob);

        _activity.parmFromDateTime(_ganttTmpWrkCtrJob.SchedFromDateTime);
        _activity.parmToDateTime(_ganttTmpWrkCtrJob.SchedToDateTime);
        _activity.parmCapacityRequired(_ganttTmpWrkCtrJob.JobDuration);
        _activity.parmGroupLoad(_ganttTmpWrkCtrJob.LoadPercent);
        _activity.parmText(this.activityLabelText(_ganttTmpWrkCtrJob));
        _activity.parmCalendarId(_ganttTmpWrkCtrJob.CalendarId);        
        _activity.parmTooltipText(this.activityTooltipText(_ganttTmpWrkCtrJob));
        _activity.parmColumnTexts(columnTexts);
        _activity.parmCompletionPct(_ganttTmpWrkCtrJob.Completion);
        _activity.parmAllowMove(!_ganttTmpWrkCtrJob.JobFinished && _ganttTmpWrkCtrJob.AllowEdit);
        _activity.parmIsHighlighted(_ganttTmpWrkCtrJob.Highlighted);

        this.setActivityColor(_activity, _ganttTmpWrkCtrJob.Color, _ganttTmpWrkCtrJob.Highlighted);

        this.setActivityMarkersAndSymbols(_activity, _ganttTmpWrkCtrJob);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setActivityMarkersAndSymbols</Name>
				<Source><![CDATA[
    protected void setActivityMarkersAndSymbols(GanttControlTaskActivitySchedulable _activity, GanttTmpWrkCtrJob _ganttTmpWrkCtrJob)
    {
        GanttSetup_WrkCtr localGanttSetup = this.parmGanttClient().parmGanttSetup() as GanttSetup_WrkCtr;

        if ((_ganttTmpWrkCtrJob.RefType == WrkCtrCapRefType::Production && localGanttSetup.parmShowProdJobMaterialDate())
             || (_ganttTmpWrkCtrJob.RefType == WrkCtrCapRefType::PlannedOrder && localGanttSetup.parmShowPlannedProdJobMaterialDate()))
        {
            GanttColor_WrkCtr ganttColor = ganttClient.parmGanttColor() as GanttColor_WrkCtr;
            
            if (!_activity.parmMilestoneMarkers().empty())
            {
                // Clear the existing markers in case of re-assignment
                _activity.parmMilestoneMarkers(new List(Types::Class));
            }
            
            _activity.parmSymbolName('');

            if (_ganttTmpWrkCtrJob.MaterialAvailabilityDateTime)
            {
                GanttControlMilestoneMarker marker = GanttControlMilestoneMarker::newParameters(
                                                            'MDateMark' + _activity.parmId(),
                                                            _ganttTmpWrkCtrJob.MaterialAvailabilityDateTime,
                                                            '',
                                                            MaterialAvailabilitySymbolName,
                                                            ganttColor.parmMaterialAvailabilityMarkerColor());
            
                _activity.parmMilestoneMarkers().addEnd(marker);
            
                if (_ganttTmpWrkCtrJob.SchedFromDateTime < _ganttTmpWrkCtrJob.MaterialAvailabilityDateTime)
                {
                    _activity.parmSymbolName(MaterialAvailabilityWarningSymbolName);
                }                
            }
            else if (this.ganttData().jobRequiresMaterials(_ganttTmpWrkCtrJob))
            {
                _activity.parmSymbolName(MaterialAvailabilityUnknownSymbolName);
            }            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setActivityColor</Name>
				<Source><![CDATA[
    private void setActivityColor(GanttControlTaskActivity _activity, OLE_Color _baseColor, boolean _isHighlighted)
    {
        GanttColorId activityColor = _baseColor;

        if (_isHighlighted)
        {
            GanttColor_WrkCtr ganttColor = ganttClient.parmGanttColor() as GanttColor_WrkCtr;
            activityColor = ganttColor.parmHighlightNodeColor();
        }
    
        _activity.parmStyle().parmColor(activityColor);
        _activity.parmStyle().parmTextColor(GanttReadableColorProvider::getReadableTextColor(activityColor));
    }

]]></Source>
			</Method>
			<Method>
				<Name>activityLabelText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the label text for an activity.
    /// </summary>
    /// <param name = "_ganttTmpWrkCtrJob">The job record representing the activity.</param>
    /// <returns>The label text.</returns>
    protected str activityLabelText(ganttTmpWrkCtrJob _ganttTmpWrkCtrJob)
    {
        str strLabel = _ganttTmpWrkCtrJob.JobId;
        switch (_ganttTmpWrkCtrJob.RefType)
        {
            case WrkCtrCapRefType::Production:
            case WrkCtrCapRefType::PlannedOrder:
                strLabel = _ganttTmpWrkCtrJob.OprId;
                break;
            case WrkCtrCapRefType::Project:
                if (_ganttTmpWrkCtrJob.OprNumActivityNumber)
                {
                    smmActivities activity = smmActivities::find(_ganttTmpWrkCtrJob.OprNumActivityNumber);
                    if (activity)
                    {
                        strLabel = activity.Purpose;
                    }
                }
                else
                {
                    ProjTable proj = ProjTable::find(_ganttTmpWrkCtrJob.RefId);
                    if (proj)
                    {
                        strLabel = proj.Name;
                    }
                }

                break;
        }

        return strLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activityTooltipText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tooptip text for an activity.
    /// </summary>
    /// <param name = "_ganttTmpWrkCtrJob">The job record representing the activity.</param>
    /// <returns>The tooltip text.</returns>
    protected str activityTooltipText(ganttTmpWrkCtrJob _ganttTmpWrkCtrJob)
    {
        str                     strToolTip;
        GanttClient_WrkCtr      localGanttClient = this.parmGanttClient() as GanttClient_WrkCtr;
        GanttView_WrkCtr        ganttView = localGanttClient.parmGanttView() as GanttView_WrkCtr;
        Ganttsetup_WrkCtr       ganttSetup = localGanttClient.parmGanttSetup() as GanttSetup_WrkCtr;

        WrkCtrCapRefType        refType = _ganttTmpWrkCtrJob.RefType;

        switch (refType)
        {
            // Production order

            case WrkCtrCapRefType::Production:
                if (ganttView.parmCurrentView() == GanttViewWrkCtr::ResourceView)
                {
                    strToolTip = strfmt("@SYS59442", _ganttTmpWrkCtrJob.WrkCtrId,
                                                        _ganttTmpWrkCtrJob.RefId,
                                                        _ganttTmpWrkCtrJob.OprNum,
                                                        _ganttTmpWrkCtrJob.JobType,
                                                        _ganttTmpWrkCtrJob.OprPriority,
                                                        _ganttTmpWrkCtrJob.OprId);
                }
                else if (ganttView.parmCurrentView() == GanttViewWrkCtr::OrderView)
                {
                    strToolTip = strfmt("@SYS59027", _ganttTmpWrkCtrJob.RefId,
                                                        _ganttTmpWrkCtrJob.OprNum,
                                                        _ganttTmpWrkCtrJob.JobType,
                                                        _ganttTmpWrkCtrJob.OprPriority,
                                                        _ganttTmpWrkCtrJob.OprId,
                                                        _ganttTmpWrkCtrJob.WrkCtrId);
                }

                if (ganttSetup.parmShowProdJobCompletion())
                {
                    strToolTip = strToolTip + ', ' + "@SYS114002" + ' ' + num2Str0(_ganttTmpWrkCtrJob.Completion, 0) + '%';
                }
                break;

            case WrkCtrCapRefType::PlannedOrder     :
                if (ganttView.parmCurrentView() == GanttViewWrkCtr::ResourceView)
                {
                    strToolTip = strfmt("@SYS113115", _ganttTmpWrkCtrJob.WrkCtrId,
                                                        _ganttTmpWrkCtrJob.RefId,
                                                        _ganttTmpWrkCtrJob.ReqPlanId,
                                                        _ganttTmpWrkCtrJob.OprNum,
                                                        _ganttTmpWrkCtrJob.JobType,
                                                        _ganttTmpWrkCtrJob.OprPriority,
                                                        _ganttTmpWrkCtrJob.OprId);
                }
                else if (ganttView.parmCurrentView() == GanttViewWrkCtr::OrderView)
                {
                    strToolTip = strfmt("@SYS113116", _ganttTmpWrkCtrJob.RefId,
                                                        _ganttTmpWrkCtrJob.ReqPlanId,
                                                        _ganttTmpWrkCtrJob.OprNum,
                                                        _ganttTmpWrkCtrJob.JobType,
                                                        _ganttTmpWrkCtrJob.OprPriority,
                                                        _ganttTmpWrkCtrJob.OprId,
                                                        _ganttTmpWrkCtrJob.WrkCtrId);
                }

                break;

            case WrkCtrCapRefType::Project:
                ProjForecastEmpl projForecastEmpl = ProjForecastEmpl::findRecId(str2int64(_ganttTmpWrkCtrJob.JobId));

                if (!projForecastEmpl.RecId)
                {
                    warning(strfmt("@SYS113080", _ganttTmpWrkCtrJob.JobId, tablepname(ProjForecastEmpl)));
                }

                strToolTip = strfmt("@SYS62415", _ganttTmpWrkCtrJob.RefId, projForecastEmpl.ActivityNumber, _ganttTmpWrkCtrJob.WrkCtrId);
                break;
        }

        return strToolTip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLinks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the links to display in the gantt control.
    /// </summary>
    /// <returns>A List of gantt links.</returns>
    public List getLinks()
    {
        List links = new List(Types::Class);

        GanttData_WrkCtr ganttData_wrkCtr = ganttClient.parmGanttData() as GanttData_WrkCtr;
        GanttTmpLink ganttTmpLink = ganttData_wrkCtr.parmGanttTableLink().parmTableBuffer();

        GanttTmpLink prevRecord;

        while select ganttTmpLink
            order by PredecessorRecId, SuccessorRecId, LinkType
            where ganttTmpLink.Visible            
        {
            // Only load "distinct" links
            if (prevRecord.PredecessorRecId != ganttTmpLink.PredecessorRecId ||
                prevRecord.SuccessorRecId != ganttTmpLink.SuccessorRecId ||
                prevRecord.LinkType != ganttTmpLink.LinkType)
            {
                GanttControlLink link = GanttControlLink::newParameters(
                    int642Str(ganttTmpLink.RecId),
                    int642Str(ganttTmpLink.PredecessorRecId),
                    int642Str(ganttTmpLink.SuccessorRecId),
                    ganttTmpLink.LinkType);

                links.addEnd(link);
            }

            prevRecord.data(ganttTmpLink);
        }

        return links;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ganttData</Name>
				<Source><![CDATA[
    public GanttData_WrkCtr ganttData()
    {
        return ganttClient.parmGanttData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedGanttTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>GanttTable</c> class instance that represents the currently selected activity.
    /// </summary>
    /// <param name = "_throwErrorIfNotFound">throws error if not found</param>
    /// <returns>The <c>GanttTable</c> class instance that represents the currently selected activity.</returns>
    public GanttTable_WrkCtrJob getSelectedGanttTable(boolean  _throwErrorIfNotFound = true)
    {
        GanttTable_WrkCtrJob ganttTable = this.ganttData().parmGanttTableWrkCtrJob();
        ganttTable.findRecId(str2int64(lastSelectedActivityId), _throwErrorIfNotFound);
        return ganttTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedWrkCtrTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>WrkCtrTable</c> record that represents the currently selected activity.
    /// </summary>
    /// <returns>The <c>WrkCtrTable</c> record that represents the currently selected activity, or an empty
    /// <c>WrkCtrTable</c> record if the selected activity is not a job, resource or resource group.</returns>
    public WrkCtrTable getSelectedWrkCtrTable()
    {
        GanttControlActivity activity = this.getActivity(lastSelectedActivityId);
        WrkCtrTable wrkCtrTable;
        
        if (activity is GanttControlTaskActivity)
        {
            GanttTmpWrkCtrJob tmpWrkCtrJob = this.getSelectedGanttTable().parmTableBuffer();
            wrkCtrTable = WrkCtrTable::find(tmpWrkCtrJob.WrkCtrId);
        }
        else if (activity is GanttControlSummaryActivity)
        {
            fieldId summaryField;
            anytype summaryFieldValue;
            [summaryField, summaryFieldValue] = summaryActivityFieldGroupMap.lookup(lastSelectedActivityId);

            if (summaryField == fieldNum(GanttTmpWrkCtrJob, WrkCtrId) || summaryField == fieldNum(GanttTmpWrkCtrJob, WrkCtrGroupId))
            {
                wrkCtrTable = WrkCtrTable::find(summaryFieldValue);
            }
        }
        
        return wrkCtrTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllSelectedProdJobRecIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the RecIds of all the selected production jobs.
    /// </summary>
    /// <returns>A set of selected RecIds.</returns>
    public Set getAllSelectedProdJobRecIds()
    {
        Set recIdSet = new Set(Types::Int64);

        if (this.allSelectedActivityIds)
        {
            GanttTable_WrkCtrJob ganttTable = this.ganttData().parmGanttTableWrkCtrJob();

            ListEnumerator enumerator = allSelectedActivityIds.parmActivityIds().getEnumerator();
            while (enumerator.moveNext())
            {
                GanttControlActivityId selectedActivityId = enumerator.current();
                RefRecId recId = str2int64(selectedActivityId.parmId());

                ganttTable.findRecId(recId, false);
                GanttTmpWrkCtrJob ganttTmpWrkCtrJob = this.getSelectedGanttTable().parmTableBuffer();

                if (ganttTmpWrkCtrJob.RefType == WrkCtrCapRefType::Production)
                {
                    recIdSet.add(RecId);
                }
            }
        }

        return recIdSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onActivtySelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// handler of the event that an activity is selected
    /// </summary>
    /// <param name = "_activityId">Activity ID</param>
    /// <param name = "_allSelectedActivityIds">All selected activity IDs</param>
    public void onActivtySelected(str _activityId, GanttControlActivityIdCollection _allSelectedActivityIds)
    {
        super(_activityId, _allSelectedActivityIds);        
    }

]]></Source>
			</Method>
			<Method>
				<Name>preUpdateModificationCollection</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Create modifications for the rest of the jobs in the same link group for the jobs modified by the
    ///    user.
    /// </summary>
    /// <returns>
    ///    true if updating of the modification collection was succesful; otherwise, false.
    /// </returns>
    protected boolean preUpdateModificationCollection()
    {
        List modifications = new List(Types::Class);
        
        // Iterate through all modifications and build up a new list as we might add new modifications to the collection later
        // which is not supported while looping over the collection
        GanttDataModification ganttDataModification = ganttDataModificationCollection.findFirst();
        while (ganttDataModification)
        {
            modifications.addEnd(ganttDataModification);

            ganttDataModification = ganttDataModificationCollection.findNext();
        }
            
        
        ListEnumerator modificationsEnumerator = modifications.getEnumerator();
        while (modificationsEnumerator && modificationsEnumerator.moveNext())
        {
            ganttDataModification = modificationsEnumerator.current();
                
            // Schedule dependent first level jobs (like overlap jobs or multi-qty-operations)
            str activityIdModification = this.recIdToActivityId(ganttDataModification.parmModifiedRecId());
            utcdatetime scheduleFrom = str2datetime(ganttDataModification.parmMapModifiedFields().lookup(ganttTableFieldSchedFromDateTime.fieldName()), GanttTableField::date2StrSequence());
            if (!this.scheduleParrallelSSActivitiesWithNoModification(activityIdModification, scheduleFrom))
            {
                return false;
            }
            
            // Iterate over all jobs in the same linkGroup
            // Note: Some of the jobs in the linkGroup will already have been found and scheduled in the above call
            //       but secondary jobs do not have the SS links so they must be processed seperately 
            GanttData_WrkCtr ganttData_WrkCtr = this.parmGanttClient().parmGanttData();
            Set setGroupRecIds = ganttData_WrkCtr.getGroupRecIds(ganttData_WrkCtr.getLinkGroupByRecId(ganttDataModification.parmModifiedRecId()));
            
            List capacityReservationsList;
            Map capacityReservations = this.parmGanttClient().parmGanttData().parmCapacityReservationsByActivityId();
            boolean isGanttControlSchedulerTimeZoneFlightEnabled = GanttControlSchedulerTimeZoneFlight::instance().isEnabled();

            if (isGanttControlSchedulerTimeZoneFlightEnabled)
            {
                if (capacityReservations.exists(ganttDataModification.parmModifiedRecId()))
                {
                    capacityReservationsList = capacityReservations.lookup(ganttDataModification.parmModifiedRecId());
                }
            }

            SetEnumerator setEnumerator = setGroupRecIds.getEnumerator();
            if (setEnumerator)
            {
                while (setEnumerator.moveNext())
                {
                    if (!ganttDataModificationCollection.findModifiedRecId(setEnumerator.current()))
                    {
                        // Create new modification for the linked job to apply the same changes 
                        GanttDataModification ganttNewDataModification = GanttDataModification::newModification(
                                                                                ganttDataModification,
                                                                                Map::create(ganttDataModification.parmMapModifiedFields().pack()));

                        ganttNewDataModification.parmModifiedRecId(setEnumerator.current());
                        ganttNewDataModification.parmMapModifiedFields().remove(ganttTableFieldWrkCtrId.fieldName());
                        ganttNewDataModification.parmMapModifiedFields().remove(ganttTableFieldSchedFromWrkCtrIdSort.fieldName());

                        if (!this.validateAndInsertModification(ganttNewDataModification, false, false))
                        {
                            return false;
                        }        
            
                        if (isGanttControlSchedulerTimeZoneFlightEnabled && capacityReservationsList)
                        {
                            if (!capacityReservations.exists(setEnumerator.current()))
                            {
                                capacityReservations.insert(setEnumerator.current(), capacityReservationsList);
                            }
                        }
                    }
                }
            }

        }
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateModificationCollection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate that all jobs in one group are having the same resource after the modification has been made
    /// </summary>
    /// <param name="_validateAllModifications">
    /// Set to true if all modifications in the modifications collection should be validated by the method; otherwise set to false.
    /// </param>
    /// <returns>
    /// True if validation passed; false otherwise.
    /// </returns>
    protected boolean validateModificationCollection(boolean _validateAllModifications = false)
    {
        GanttData_WrkCtr ganttData_WrkCtr = this.parmGanttClient().parmGanttData();
        if (_validateAllModifications)
        {
            // request GanttData to load the records that we will use during validation in one shot
            Set setModifiedRecIds = new Set(Types::Int64);
            ganttData_WrkCtr.parmGanttTableWrkCtrJob().loadAllValidationRecords(setModifiedRecIds);
        }

        return super(_validateAllModifications);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateModification</Name>
				<Source><![CDATA[
    protected boolean validateModification(GanttDataModification _ganttDataModification)
    {
        if (!this.checkFieldsNotEmpty(_ganttDataModification))
        {
            return false;
        }

        if (!super(_ganttDataModification))
        {
            return false;
        }

        if (!this.checkModificationPartlyLoadedNodes(_ganttDataModification))
        {
            return false;
        }

        if (!this.checkModificationInsideTimeScaleInterval(_ganttDataModification))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSetFieldsToBeCheckedIfEmpty</Name>
				<Source><![CDATA[
    protected Set getSetFieldsToBeCheckedIfEmpty()
    {
        Set setFieldsToBeCheckedIfEmpty = new Set(Types::String);

        setFieldsToBeCheckedIfEmpty.add(fieldstr(GanttTmpWrkCtrJob, InventSiteId));
        setFieldsToBeCheckedIfEmpty.add(fieldstr(GanttTmpWrkCtrJob, RefStatus));
        setFieldsToBeCheckedIfEmpty.add(fieldstr(GanttTmpWrkCtrJob, RefId));
        setFieldsToBeCheckedIfEmpty.add(fieldstr(GanttTmpWrkCtrJob, ProdUnitId));
        setFieldsToBeCheckedIfEmpty.add(fieldstr(GanttTmpWrkCtrJob, WrkCtrGroupId));
        setFieldsToBeCheckedIfEmpty.add(fieldstr(GanttTmpWrkCtrJob, WrkCtrId));
        setFieldsToBeCheckedIfEmpty.add(fieldstr(GanttTmpWrkCtrJob, OprId));
        setFieldsToBeCheckedIfEmpty.add(fieldstr(GanttTmpWrkCtrJob, CalendarId));

        return setFieldsToBeCheckedIfEmpty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldNameSchedFromDate</Name>
				<Source><![CDATA[
    protected fieldName fieldNameSchedFromDate()
    {
        return fieldstr(GanttTmpWrkCtrJob, SchedFromDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldNameSchedToDate</Name>
				<Source><![CDATA[
    protected fieldName fieldNameSchedToDate()
    {
        return fieldstr(GanttTmpWrkCtrJob, SchedToDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDataModificationFromActivity</Name>
				<Source><![CDATA[
    protected GanttDataModification createDataModificationFromActivity(GanttControlTaskActivity _activity)
    {
        return this.createDataModificationFromParameters(_activity.parmId(), GanttControlActivityModificationType::Move, _activity.parmFromDateTime(), _activity.parmToDateTime());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDataModificationFromGanttControlModification</Name>
				<Source><![CDATA[
    protected GanttDataModification createDataModificationFromGanttControlModification(GanttControlActivityModification _modification, WrkCtrId _newWrkCtrId = '')
    {
        return this.createDataModificationFromParameters(_modification.parmActivityId(), _modification.parmModificationType(), _modification.parmNewFromDateTime(), _modification.parmNewToDateTime(), _newWrkCtrId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDataModificationFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new data modification.
    /// </summary>
    /// <param name = "_activityId">The id of the activity to create the modification for.</param>
    /// <param name = "_modificationType">The modification type.</param>
    /// <param name = "_newFromDateTime">The new from date/time.</param>
    /// <param name = "_newToDateTime">The new to date/time.</param>
    /// <param name = "_newWrkCtrId">The new resource Id to apply; optional.</param>
    /// <returns>A new data modification.</returns>
    protected GanttDataModification createDataModificationFromParameters(str _activityId, GanttControlActivityModificationType _modificationType, utcDateTime _newFromDateTime, utcDateTime _newToDateTime, WrkCtrId _newWrkCtrId = '')
    {
        GanttDataModification   ganttDataModification = null;
        RecId recId = this.activityIdToRecId(_activityId);

        if (recId)
        {
            ganttDataModification = GanttDataModification::newModificationAction(GanttModificationAction::Update);

            ganttDataModification.parmModifiedTableName(tableStr(GanttTmpWrkCtrJob));
            ganttDataModification.parmModifiedRecId(recId);

            if (_modificationType == GanttControlActivityModificationType::Move)
            {
                this.initTableFields();
                
                FromDate    fromDate;
                FromTime    fromTime;
                ToDate      toDate;
                ToTime      toTime;

                if (showInUserTZ)
                {
                    fromDate = DateTimeUtil::date(_newFromDateTime);
                    fromTime = DateTimeUtil::time(_newFromDateTime);
                    toDate = DateTimeUtil::date(_newToDateTime);
                    toTime = DateTimeUtil::time(_newToDateTime);
                }
                else
                {
                    utcdatetime localFromDateTime = DateTimeUtil::applyTimeZoneOffset(_newFromDateTime, DateTimeUtil::getUserPreferredTimeZone());
                    utcdatetime localToDateTime = DateTimeUtil::applyTimeZoneOffset(_newToDateTime, DateTimeUtil::getUserPreferredTimeZone());
                    fromDate = DateTimeUtil::date(localFromDateTime);
                    fromTime = DateTimeUtil::time(localFromDateTime);
                    toDate = DateTimeUtil::date(localtoDateTime);
                    toTime = DateTimeUtil::time(localtoDateTime);
                }

                ganttDataModification.parmMapModifiedFields().insert(ganttTableFieldSchedFromDate.fieldName(), GanttTableField::fieldValue2Str(ganttTableFieldSchedFromDate, fromDate));
                ganttDataModification.parmMapModifiedFields().insert(ganttTableFieldSchedToDate.fieldName(), GanttTableField::fieldValue2Str(ganttTableFieldSchedToDate, toDate));
                ganttDataModification.parmMapModifiedFields().insert(ganttTableFieldSchedFromTime.fieldName(), GanttTableField::fieldValue2Str(ganttTableFieldSchedFromTime, fromTime));
                ganttDataModification.parmMapModifiedFields().insert(ganttTableFieldSchedToTime.fieldName(), GanttTableField::fieldValue2Str(ganttTableFieldSchedToTime, toTime));
                ganttDataModification.parmMapModifiedFields().insert(ganttTableFieldSchedFromDateTime.fieldName(), GanttTableField::fieldValue2Str(ganttTableFieldSchedFromDateTime, _newFromDateTime));
                ganttDataModification.parmMapModifiedFields().insert(ganttTableFieldSchedToDateTime.fieldName(), GanttTableField::fieldValue2Str(ganttTableFieldSchedToDateTime, _newToDateTime));
            
                if (_newWrkCtrId != '')
                {
                    ganttDataModification.parmMapModifiedFields().insert(ganttTableFieldWrkCtrId.fieldName(), GanttTableField::fieldValue2Str(ganttTableFieldWrkCtrId, _newWrkCtrId));
                    ganttDataModification.parmMapModifiedFields().insert(ganttTableFieldSchedFromWrkCtrIdSort.fieldName(), GanttTableField::fieldValue2Str(ganttTableFieldSchedFromWrkCtrIdSort, this.ganttData().parmGanttTableWrkCtrJob().getWrkCtrIdSort(_newWrkCtrId)));
                }
            }
                
        }

        return ganttDataModification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postUpdateModificationCollection</Name>
				<Source><![CDATA[
    protected void postUpdateModificationCollection()
    {
        super();

        GanttDataModification ganttDataModification = ganttDataModificationCollection.findFirst();
        while (ganttDataModification)
        {
            this.updateActivtyFromModification(ganttDataModification);
                        
            ganttDataModification = ganttDataModificationCollection.findNext();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivity</Name>
				<Source><![CDATA[
    public GanttControlActivity getActivity(str _activityId)
    {
        GanttControlActivity activity;

        if (this.activityMap.exists(_activityId))
        {
            activity = activityMap.lookup(_activityId);
        }

        return activity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateActivityFromNewParent</Name>
				<Source><![CDATA[
    protected WrkCtrId updateActivityFromNewParent(GanttControlTaskActivity _activity, str _newParentActivityId)
    {
        fieldId summaryActivityFieldNum;
        anytype summaryActivityFieldValue;

        if (summaryActivityFieldGroupMap.exists(_newParentActivityId))
        {
            [summaryActivityFieldNum, summaryActivityFieldValue] = summaryActivityFieldGroupMap.lookup(_newParentActivityId);
        }
        
        if (summaryActivityFieldNum != fieldNum(GanttTmpWrkCtrJob, WrkCtrId))
        {
            error(error::wrongUseOfFunction(methodStr(GanttControlVisualization_WrkCtr, updateActivityFromNewParent)));
            return '';
        }

        GanttControlSummaryActivity summaryActivity = activityMap.lookup(_newParentActivityId) as GanttControlSummaryActivity;

        WrkCtrId newWrkCtrId = summaryActivityFieldValue;
        
        this.updateActivityFromNewWrkCtrId(_activity, newWrkCtrId);
        
        _activity.parmParentId(_newParentActivityId);

        return newWrkCtrId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateActivityFromNewWrkCtrId</Name>
				<Source><![CDATA[
    protected void updateActivityFromNewWrkCtrId(GanttControlTaskActivity _activity, str _newWrkCtrId)
    {
        GanttTable_WrkCtrJob ganttTable = this.ganttData().parmGanttTableWrkCtrJob();
        ganttTable.findRecId(this.activityIdToRecId(_activity.parmId()));
        GanttCalendarId newCalendarId = ganttTable.getCalendarName(_newWrkCtrId);
  
        _activity.parmCalendarId(newCalendarId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGanttTmpWrkCtrJobFromActivityId</Name>
				<Source><![CDATA[
    protected GanttTmpWrkCtrJob getGanttTmpWrkCtrJobFromActivityId(str _activityId)
    {
        GanttTable_WrkCtrJob ganttTable = this.ganttData().parmGanttTableWrkCtrJob();
        ganttTable.findRecId(this.activityIdToRecId(_activityId));
        return ganttTable.parmTableBuffer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateActivtyFromModification</Name>
				<Source><![CDATA[
    protected GanttControlActivity updateActivtyFromModification(GanttDataModification _ganttDataModification)
    {
        // Update activities from the values in db and save in the ganttControlModificationResponseList
        str activityId = this.recIdToActivityId(_ganttDataModification.parmModifiedRecId());
        GanttControlTaskActivity activity = this.getActivity(activityId) as GanttControlTaskActivity;
        if (activity)
        {
            GanttTmpWrkCtrJob ganttTmpWrkCtrJob = this.getGanttTmpWrkCtrJobFromActivityId(activityId);

            this.setActivityPropertiesFromTmp(activity, ganttTmpWrkCtrJob);

            if (ganttControlModificationResponseList)
            {
                ganttControlModificationResponseList.addEnd(activity);
            }

            return activity;
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preUndoTransaction</Name>
				<Source><![CDATA[
    public void preUndoTransaction()
    {
        super();
                
        undoHasWrkCtrChange = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>undoModification</Name>
				<Source><![CDATA[
    public void undoModification(GanttDataModification _ganttDataModificationPrev)
    {
        super(_ganttDataModificationPrev);
                
        if (_ganttDataModificationPrev.parmMapModifiedFields().exists(ganttTableFieldWrkCtrId.fieldName()))
        {
            undoHasWrkCtrChange = true;
        }
        else
        {
            this.updateActivtyFromModification(_ganttDataModificationPrev);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postUndoTransaction</Name>
				<Source><![CDATA[
    public void postUndoTransaction()
    {
        super();

        if (undoHasWrkCtrChange)
        {
            this.reloadActivities();
        }        
        else
        {
            this.renderAllActivities();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSelectedOnDifferentOrders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether all the selected jobs belong to different orders.
    /// </summary>
    /// <returns>true if all the selected jobs belong to different orders; otherwise, false.</returns>
    protected boolean checkSelectedOnDifferentOrders()
    {
        GanttTable_WrkCtrJob ganttTable = this.ganttData().parmGanttTableWrkCtrJob();
        Set selectedOrders = new Set(Types::String);

        ListEnumerator enumerator = allSelectedActivityIds.parmActivityIds().getEnumerator();
        while (enumerator.moveNext())
        {
            GanttControlTaskActivity activity = this.getActivity(enumerator.current().parmId()) as GanttControlTaskActivity;
            
            if (activity)
            {
                ganttTable.findRecId(this.activityIdToRecId(activity.parmId()));
                GanttTmpWrkCtrJob ganttTmpWrkCtrJob = ganttTable.parmTableBuffer();

                if (selectedOrders.in(ganttTmpWrkCtrJob.RefId))
                {
                    return false;
                }

                selectedOrders.add(ganttTmpWrkCtrJob.RefId);
            }

        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toggleHighlightOnSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Toggles highlight color on the orders of the selected jobs.
    /// </summary>
    public void toggleHighlightOnSelected()
    {
        Set ordersToggled = new Set(Types::String);
        GanttTable_WrkCtrJob ganttTable = this.ganttData().parmGanttTableWrkCtrJob();

        ListEnumerator enumerator = allSelectedActivityIds.parmActivityIds().getEnumerator();
        while (enumerator.moveNext())
        {
            GanttControlActivityId selectedActivityId = enumerator.current();
            GanttControlTaskActivity activity = this.getActivity(selectedActivityId.parmId()) as GanttControlTaskActivity;
            if (activity)
            {
                ganttTable.findRecId(this.activityIdToRecId(activity.parmId()));
                GanttTmpWrkCtrJob ganttTmpWrkCtrJob = ganttTable.parmTableBuffer();

                str orderKey = strFmt('%1#%2#%3', ganttTmpWrkCtrJob.RefId, ganttTmpWrkCtrJob.RefType, ganttTmpWrkCtrJob.ReqPlanId);
                if (!ordersToggled.in(orderKey))
                {
                    GanttTmpWrkCtrJob tmpGanttTmpWrkCtrJobUpdate;
                    tmpGanttTmpWrkCtrJobUpdate.setTmpData(ganttTmpWrkCtrJob);

                    boolean newHighlightValue = !(ganttTmpWrkCtrJob.Highlighted == NoYes::Yes);

                    while select tmpGanttTmpWrkCtrJobUpdate
                        where  tmpGanttTmpWrkCtrJobUpdate.RefType    == ganttTmpWrkCtrJob.RefType
                            && tmpGanttTmpWrkCtrJobUpdate.RefId      == ganttTmpWrkCtrJob.RefId
                            && tmpGanttTmpWrkCtrJobUpdate.ReqPlanId  == ganttTmpWrkCtrJob.ReqPlanId
                            && tmpGanttTmpWrkCtrJobUpdate.IsDisplayed
                    {
                        ganttTable.updateField(tmpGanttTmpWrkCtrJobUpdate.RecId, fieldstr(GanttTmpWrkCtrJob, Highlighted), newHighlightValue ? NoYes::Yes : NoYes::No);
                        GanttControlTaskActivitySchedulable orderActivity = this.getActivity(this.recIdToActivityId(tmpGanttTmpWrkCtrJobUpdate.RecId));
                        orderActivity.parmIsHighlighted(newHighlightValue);
                        this.setActivityColor(orderActivity, tmpGanttTmpWrkCtrJobUpdate.Color, newHighlightValue);
                    }
                
                    ordersToggled.add(orderKey);
                }
            }
        }

        if (!ordersToggled.empty())
        {
            // Update control
            this.renderAllActivities();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>arrangeSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Arranges the selected jobs after each other.
    /// </summary>
    /// <remarks>Requires that all the selected jobs are within the same resource.</remarks>
    public void arrangeSelected()
    {
        if (allSelectedActivityIds.parmActivityIds().elements() <= 1)
        {
            return;
        }
        
        this.switchOffModificationResponseList();

        Map sortedActivites;
        boolean isGanttArrangeJobsTopologicalOrderFlightEnabled = GanttControlVisualization_ArrangeJobsTopologicalOrderFlight::instance().isEnabled();

        List activitiesToSchedule = new List(Types::Class);
        List linksToSchedule = new List(Types::Class);

        utcdatetime minFromDateTime;        
        if (isGanttArrangeJobsTopologicalOrderFlightEnabled)
        {
            sortedActivites = new Map(Types::Integer, Types::Class);
            minFromDateTime = this.sortJobs(activitiesToSchedule, sortedActivites);
        }
        else
        {
            sortedActivites = new Map(Types::String, Types::Class);
            minFromDateTime = this.sortJobsClassic(activitiesToSchedule, sortedActivites);
        }

        // Loop through the activities sorted by fromDateTime and add links
        GanttControlTaskActivity previousActivity;
        MapEnumerator sortedActivitesEnumerator = sortedActivites.getEnumerator();
        while (sortedActivitesEnumerator.moveNext())
        {
            GanttControlTaskActivity activity = sortedActivitesEnumerator.currentValue();
            if (previousActivity)
            {
                linksToSchedule.addEnd(GanttControlLink::newParameters(activity.parmId(), previousActivity.parmId(), activity.parmId(), GanttLinkType::FS));
            }
            previousActivity = activity;
        }

        // Run scheduling
        List activityModifications = this.scheduleActivities(activitiesToSchedule, SchedDirection::Forward, minFromDateTime, linksToSchedule);

        // Process result
        if (this.applyGanttControlModifications(activityModifications))
        {
            this.processModificationCollection();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortJobsClassic</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sort jobs in a chronological order (classic). Will be deprecated when a flight's lifecycle ends.
    /// </summary>
    /// <param name = "activitiesToSchedule">A list of jobs to schedule.</param>
    /// <param name = "sortedActivites">A sorted map of jobs to schedule.</param>
    /// <returns>A minimum planning date used as a baseline.</returns>
    private utcdatetime sortJobsClassic(List activitiesToSchedule, Map sortedActivites)
    {
        WrkCtrId wrkCtrId;
        utcdatetime minFromDateTime = DateTimeUtil::maxValue();

        // Check the resource and insert activities into the sorting list based on fromDateTime
        ListEnumerator enumerator = allSelectedActivityIds.parmActivityIds().getEnumerator();
        while (enumerator.moveNext())
        {
            GanttControlActivityId selectedActivityId = enumerator.current();
            GanttControlTaskActivity activity = this.getActivity(selectedActivityId.parmId()) as GanttControlTaskActivity;
            
            if (activity)
            {
                GanttTmpWrkCtrJob ganttTmpWrkCtrJob = this.getGanttTmpWrkCtrJobFromActivityId(activity.parmId());

                if (ganttTmpWrkCtrJob.JobType == RouteJobType::Overlap)
                {
                    throw error("@SCM:GanttOverlapJobsCannotBeArranged");
                }
                else if (!wrkCtrId || ganttTmpWrkCtrJob.WrkCtrId == wrkCtrId)
                {
                    wrkCtrId = ganttTmpWrkCtrJob.WrkCtrId;
                    minFromDateTime = min(ganttTmpWrkCtrJob.SchedFromDateTime, minFromDateTime);
                
                    activitiesToSchedule.addEnd(activity);
                    
                    str sortKey = DateTimeUtil::toStr(ganttTmpWrkCtrJob.SchedFromDateTime) + activity.parmId();
                    sortedActivites.insert(sortKey, activity);
                }
                else
                {
                    throw error("@SCM:GanttJobsMustBeOnSameResource");
                }
            }
        }
        return minFromDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJobsOrderMapKey</Name>
				<Source><![CDATA[
    private str getJobsOrderMapKey(WrkCtrRefId _refId, OprNum _oprNum)
    {
        return strFmt('%1#%2', _refId, _oprNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJobsOrderMap</Name>
				<Source><![CDATA[
    private Map getJobsOrderMap(GanttTmpWrkCtrJob _ganttTmpWrkCtrJob)
    {
        Map         orderByJobIdMap = new Map(Types::String, Types::Integer);
        Stack       jobsStack       = new Stack();
        OprNum      numNext;
        WrkCtrRefId refId;
        str         parentKey;

        GanttTmpWrkCtrJob ganttTmpWrkCtrJobLocal;

        ganttTmpWrkCtrJobLocal.setTmpData(_ganttTmpWrkCtrJob);

        while select ganttTmpWrkCtrJobLocal
            group by ganttTmpWrkCtrJobLocal.RefId, ganttTmpWrkCtrJobLocal.OprNum
            where ganttTmpWrkCtrJobLocal.OprNumNext == 0
        {
            str jobOrderKey = this.getJobsOrderMapKey(ganttTmpWrkCtrJobLocal.RefId, ganttTmpWrkCtrJobLocal.OprNum);
            orderByJobIdMap.insert(jobOrderKey, intMax());

            jobsStack.push([ganttTmpWrkCtrJobLocal.OprNum, ganttTmpWrkCtrJobLocal.RefId, jobOrderKey]);
        }

        while (jobsStack.qty() > 0)
        {
            int jobOrderNum = intMax();

            [numNext, refId, parentKey] = jobsStack.pop();

            while select ganttTmpWrkCtrJobLocal
                group by ganttTmpWrkCtrJobLocal.RefId, ganttTmpWrkCtrJobLocal.OprNum
                where ganttTmpWrkCtrJobLocal.OprNumNext == numNext
                    && ganttTmpWrkCtrJobLocal.RefId     == refId
            {
                str jobOrderKey = this.getJobsOrderMapKey(ganttTmpWrkCtrJobLocal.RefId, ganttTmpWrkCtrJobLocal.OprNum);

                [jobOrderNum] = orderByJobIdMap.lookup(parentKey);

                if (!orderByJobIdMap.exists(jobOrderKey))
                {
                    orderByJobIdMap.insert(jobOrderKey, jobOrderNum - 1);
                    jobsStack.push([ganttTmpWrkCtrJobLocal.OprNum, ganttTmpWrkCtrJobLocal.RefId, jobOrderKey]);
                }
            }
        }

        return orderByJobIdMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortJobs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sort jobs in both chronological order AND the logical sequence.
    /// </summary>
    /// <param name = "activitiesToSchedule">A list of jobs to schedule.</param>
    /// <param name = "sortedActivites">A sorted map of jobs to schedule.</param>
    /// <returns>A minimum planning date used as a baseline.</returns>
    private utcdatetime sortJobs(List activitiesToSchedule, Map sortedActivites)
    {
        WrkCtrId wrkCtrId;
        Map orderByJobIdMap;
        utcdatetime minFromDateTime = DateTimeUtil::maxValue();
        Map chronologicalSequenceOrders = new Map(Types::UtcDateTime, Types::Class);
        Map topologicalSequenceJobs = new Map(Types::String, Types::Class);
        boolean isGanttArrangeJobsFollowOperationSequenceFlightEnabled = GanttControlVisualizationArrangeJobsFollowOperationSequenceFlight::instance().isEnabled();

        ListEnumerator listEnumerator = allSelectedActivityIds.parmActivityIds().getEnumerator();

        if (isGanttArrangeJobsFollowOperationSequenceFlightEnabled)
        {
            orderByJobIdMap = this.getJobsOrderMap(this.ganttData().parmGanttTableWrkCtrJob().parmTableBuffer());
        }

        while (listEnumerator.moveNext())
        {
            GanttControlActivityId selectedActivityId = listEnumerator.current();
            GanttControlTaskActivity activity = this.getActivity(selectedActivityId.parmId()) as GanttControlTaskActivity;
            
            if (activity)
            {
                GanttTmpWrkCtrJob ganttTmpWrkCtrJob = this.getGanttTmpWrkCtrJobFromActivityId(activity.parmId());

                if (ganttTmpWrkCtrJob.JobType == RouteJobType::Overlap)
                {
                    throw error("@SCM:GanttOverlapJobsCannotBeArranged");
                }
                else if (!wrkCtrId || ganttTmpWrkCtrJob.WrkCtrId == wrkCtrId)
                {
                    wrkCtrId = ganttTmpWrkCtrJob.WrkCtrId;
                    minFromDateTime = min(ganttTmpWrkCtrJob.SchedFromDateTime, minFromDateTime);
                
                    activitiesToSchedule.addEnd(activity);

                    Map jobsPerOrder = new Map(Types::String, Types::Class);
                    Set ordersSequence = new Set(Types::String);
                    if (topologicalSequenceJobs.exists(ganttTmpWrkCtrJob.RefId))
                    {
                        jobsPerOrder = topologicalSequenceJobs.lookup(ganttTmpWrkCtrJob.RefId);
                    }

                    str sortKey;

                    if (isGanttArrangeJobsFollowOperationSequenceFlightEnabled)
                    {
                        str jobOrderKey = this.getJobsOrderMapKey(ganttTmpWrkCtrJob.RefId, ganttTmpWrkCtrJob.OprNum);
                        int jobOrder = orderByJobIdMap.exists(jobOrderKey)
                            ? orderByJobIdMap.lookup(jobOrderKey)
                            : intMax();

                        sortKey = ganttTmpWrkCtrJob.RefId + '#' +
                                  int2Str(jobOrder) + '#' +
                                  int2Str(ganttTmpWrkCtrJob.OprNum) + '#' +
                                  int2Str(ganttTmpWrkCtrJob.JobType) + '#' +
                                  int2Str(ganttTmpWrkCtrJob.OprPriority) + '#' +
                                  activity.parmId();
                    }
                    else
                    {
                        sortKey = ganttTmpWrkCtrJob.RefId + '#' +
                                  int2Str(ganttTmpWrkCtrJob.OprNum) + '#' +
                                  int2Str(ganttTmpWrkCtrJob.JobType) + '#' +
                                  int2Str(ganttTmpWrkCtrJob.OprPriority) + '#' +
                                  activity.parmId();
                    }
                    
                    jobsPerOrder.insert(sortKey, activity);
                    topologicalSequenceJobs.insert(ganttTmpWrkCtrJob.RefId, jobsPerOrder);

                    if (chronologicalSequenceOrders.exists(ganttTmpWrkCtrJob.SchedFromDateTime))
                    {
                        ordersSequence = chronologicalSequenceOrders.lookup(ganttTmpWrkCtrJob.SchedFromDateTime);
                    }
                    ordersSequence.add(ganttTmpWrkCtrJob.RefId);
                    chronologicalSequenceOrders.insert(ganttTmpWrkCtrJob.SchedFromDateTime, ordersSequence);
                }
                else
                {
                    throw error("@SCM:GanttJobsMustBeOnSameResource");
                }
            }
        }

        if (!chronologicalSequenceOrders.elements())
        {
            return minFromDateTime;
        }
        
        int topologicalSequence = 0;
        MapEnumerator chronologicalSequenceOrdersEnumerator = chronologicalSequenceOrders.getEnumerator();
        MapEnumerator topologicalSequenceJobsEnumerator;
        SetEnumerator ordersEnumerator;

        while (chronologicalSequenceOrdersEnumerator.moveNext())
        {
            ordersEnumerator = chronologicalSequenceOrdersEnumerator.currentValue().getEnumerator();
            while (ordersEnumerator.moveNext())
            {
                str orderId = ordersEnumerator.current();
                if (topologicalSequenceJobs.exists(orderId))
                {
                    topologicalSequenceJobsEnumerator = topologicalSequenceJobs.lookup(orderId).getEnumerator();
                    while (topologicalSequenceJobsEnumerator.moveNext())
                    {
                        var value = topologicalSequenceJobsEnumerator.currentValue();
                        sortedActivites.insert(topologicalSequence, value);
                        topologicalSequence++;
                    }
                    topologicalSequenceJobs.remove(orderId);
                }
            }
        }
        return minFromDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveActivitySchedDateDirection</Name>
				<Source><![CDATA[
    protected container resolveActivitySchedDateDirection(GanttControlTaskActivity _activity, GanttSchedDirection _direction, date _date, TimeOfDay _time)
    {
        SchedDirection direction;
        utcDateTime schedDateTime;
        
        if (_direction == GanttSchedDirection::ForwardFromMaterialAvailabilityDate)
        {
            direction = SchedDirection::Forward;

            GanttTable_WrkCtrJob ganttTable = this.ganttData().parmGanttTableWrkCtrJob();
            ganttTable.findRecId(this.activityIdToRecId(_activity.parmId()));
            GanttTmpWrkCtrJob ganttTmpWrkCtrJob = ganttTable.parmTableBuffer();
                                                
            if (ganttTmpWrkCtrJob.MaterialAvailabilityDateTime == DateTimeUtil::minValue())
            {
                throw error("@SCM:GanttNoMaterialAvailbilityDate");
            }

            schedDateTime = ganttTmpWrkCtrJob.MaterialAvailabilityDateTime;
        }
        else
        {
            if (showInUserTZ || !ProdGanttApplyUserTimezoneOffsetFlight::instance().isEnabled())
            {
                schedDateTime = DateTimeUtil::newDateTime(_date, _time, DateTimeUtil::getUserPreferredTimeZone());
            }
            else
            {
                schedDateTime = DateTimeUtil::newDateTime(_date, _time);
            }

            if (_direction == GanttSchedDirection::BackwardFromSchedDate)
            {
                direction = SchedDirection::Backward;
            }
            else
            {
                direction = SchedDirection::Forward;
            }
        }
        
        return [direction, schedDateTime];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpWrkCtrIdLoaded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a temporary buffer filled with the Ids of the loaded resources. 
    /// </summary>
    /// <returns>A temporary buffer filled with the Ids of the loaded resources.</returns>
    public WrkCtrTmpFilter getTmpWrkCtrIdLoaded()
    {
        GanttData_WrkCtr ganttData_WrkCtr = ganttClient.parmGanttData() as GanttData_WrkCtr;
        return ganttData_WrkCtr.getTmpWrkCtrIdLoaded();        
    }

]]></Source>
			</Method>
			<Method>
				<Name>getApplicableResourcesSearchDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default search date for applicable resources query.
    /// </summary>
    /// <returns>The default search date.</returns>
    public date getApplicableResourcesSearchDate()
    {
        GanttTmpWrkCtrJob tmpWrkCtrJob = this.getSelectedGanttTable(false).parmTableBuffer();
        if (tmpWrkCtrJob.SchedFromDate)
        {
            return tmpWrkCtrJob.SchedFromDate;
        }
        else
        {
            return DateTimeUtil::getToday(DateTimeUtil::getCompanyTimeZone());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getApplicableResourcesResultForSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a tmp buffer with the applicable resources for the selected job.
    /// </summary>
    /// <param name = "_searchFromDate">The date to search from.</param>
    /// <returns>A tmp buffer containing the Ids of the applicable resources.</returns>
    public WrkCtrTmpFilter getApplicableResourcesResultForSelected(date _searchFromDate)
    {
        WrkCtrTmpFilter resultBuffer;        
        
        if (allSelectedActivityIds && allSelectedActivityIds.parmActivityIds().elements() == 1)
        {
            GanttControlTaskActivity activity = this.getActivity(lastSelectedActivityId) as GanttControlTaskActivity;
            if (activity)
            {
                GanttTable_WrkCtrJob ganttTable = this.getSelectedGanttTable();
                GanttTmpWrkCtrJob ganttTmpWrkCtrJob = ganttTable.parmTableBuffer() as GanttTmpWrkCtrJob;
                        
                WrkCtrActivityRequirementSet wrkCtrActivityRequirementSet = ganttTable.activityRequirementSet();

                Query query = wrkCtrActivityRequirementSet.applicableResourcesQuery(_searchFromDate, _searchFromDate, ganttTmpWrkCtrJob.InventSiteId, true, false, false);
                QueryRun queryRun = new QueryRun(query);
                while (queryRun.next())
                {
                    WrkCtrTable wrkCtrTable = queryRun.get(tableNum(WrkCtrTable));

                    resultBuffer.WrkCtrId = wrkCtrTable.wrkCtrId;
                    resultBuffer.insert();
                }
            }            
        }

        return resultBuffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadAdditionalResources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads data for additional resources.
    /// </summary>
    /// <param name = "_selectedWrkCtrIds">The set of new resource Ids to load data for.</param>
    public void loadAdditionalResources(Set _selectedWrkCtrIds)
    {
        this.ganttData().loadAdditionalResources(_selectedWrkCtrIds);         

        this.refresh();
        this.ensureSelectedActivitiesFocus();       
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>