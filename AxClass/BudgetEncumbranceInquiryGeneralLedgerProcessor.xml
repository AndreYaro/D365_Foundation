<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetEncumbranceInquiryGeneralLedgerProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the data retrieval from general journal tables based on the parameters.
/// </summary>
public final class BudgetEncumbranceInquiryGeneralLedgerProcessor
{
    private LedgerTrialBalanceListPageBalanceParms trialBalanceParameter;
    private LedgerTrialBalanceTmp ledgerTrialBalanceTmp;
    private BudgetEncumbranceLedgerAccountTransactionTmp ledgerTransactionDetail;
    private BudgetEncumbranceDistinctLedgerDocumentTmp uniqueBudgetAccountDocumentAmounts;
    
    private boolean isLedgerBalanceFeatureEnabled = FeatureStateProvider::IsFeatureEnabled(GeneralLedgerBalanceFeature::instance());

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the instance of the processor to retrieve general journal data with parameters.
    /// </summary>
    /// <param name = "_ledgerParameter">The parameters to retrieve ledger journal data.</param>
    /// <returns>The instance of the <c>BudgetEncumbranceInquiryGeneralLedgerProcessor</c>.</returns>
    internal static BudgetEncumbranceInquiryGeneralLedgerProcessor construct(LedgerTrialBalanceListPageBalanceParms _ledgerParameter)
    {
        BudgetEncumbranceInquiryGeneralLedgerProcessor ledgerTransactionProcessor = new BudgetEncumbranceInquiryGeneralLedgerProcessor();

        ledgerTransactionProcessor.setTrialBalanceParameter(_ledgerParameter);

        return ledgerTransactionProcessor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    internal void run(BudgetEncumbranceLedgerAccountTransactionTmp _detail, LedgerTrialBalanceTmp _summary)
    {
        ledgerTransactionDetail.linkPhysicalTableInstance(_detail);
        ledgerTrialBalanceTmp.linkPhysicalTableInstance(_summary);

        this.executeRetrieval();
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeRetrieval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Execute retrieval of ledger data.
    /// </summary>
    private void executeRetrieval()
    {
        this.populateLedgerDetailByMainAccounts();

        this.generateTrialBalanceSummary();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTrialBalanceParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Setter function to set the trial balance parameter.
    /// </summary>
    /// <param name = "_ledgerParameter">Ledger parameter</param>
    private void setTrialBalanceParameter(LedgerTrialBalanceListPageBalanceParms _ledgerParameter)
    {
        trialBalanceParameter = _ledgerParameter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateLedgerDetailByMainAccounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate ledger data on the basis of the encumbrnace reconciliation main account.
    /// </summary>
    private void populateLedgerDetailByMainAccounts()
    {
        this.generateLedgerTransactionDetail();

        this.updateLedgerTransactionDetail();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateTrialBalanceSummary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate trial balance summary.
    /// </summary>
    private void generateTrialBalanceSummary()
    {
        if (isLedgerBalanceFeatureEnabled)
        {
            insert_recordset ledgerTrialBalanceTmp
            (
                LedgerDimension,
                EndingBalance
            )
            select
                ReportingDimension,
                sum (Amount)
                from ledgerTransactionDetail
                    group by ReportingDimension;
        }
        else
        {
            insert_recordset ledgerTrialBalanceTmp
            (
                LedgerDimension,
                EndingBalance
            )
            select
                FocusLedgerDimension,
                sum (Amount)
                from ledgerTransactionDetail
                    group by FocusLedgerDimension;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentOperationTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the posting layer which is of type CurrentOperationsTax.
    /// </summary>
    /// <returns>CurrentOperationType: This is a posting layer for source documentation type</returns>
    private CurrentOperationsTax getCurrentOperationTax()
    {
        CurrentOperationsTax currentOperationsTax = CurrentOperationsTax::None;

        List postLayer = trialBalanceParameter.parmPostingLayers();
        ListEnumerator enumerator = postLayer.getEnumerator();

        if (enumerator.moveNext())
        {
            currentOperationsTax = enumerator.current();
        }

        return currentOperationsTax;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateLedgerTransactionDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate ledger transaction detail
    /// </summary>
    private void generateLedgerTransactionDetail()
    {
        GeneralJournalAccountEntry generalJournalAccountEntry;
        GeneralJournalEntry generalJournalEntry;
        FiscalCalendarPeriod fiscalCalendarPeriod;
        BudgetEncumbranceInquiryMainAccount budgetEncumbranceInquiryMainAccount;
        CurrentOperationsTax postingLayer = this.getCurrentOperationTax();

        if (isLedgerBalanceFeatureEnabled)
        {
            insert_recordset ledgerTransactionDetail
            (
                GeneralJournalAccountEntry,
                Amount,
                ReportingDimension,
                AccountingDate,
                JournalNumber,
                SubledgerVoucher,
                DocumentNumber
            )
            select RecId, AccountingCurrencyAmount, LedgerDimension from generalJournalAccountEntry
                join AccountingDate, JournalNumber, SubledgerVoucher, DocumentNumber from generalJournalEntry
                    where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                join fiscalCalendarPeriod
                    where fiscalCalendarPeriod.RecId == generalJournalEntry.FiscalCalendarPeriod
                    && generalJournalEntry.AccountingDate >= trialBalanceParameter.parmStartDate()
                    && generalJournalEntry.AccountingDate <= trialBalanceParameter.parmEndDate()
                    && generalJournalEntry.Ledger == Ledger::current()
                    && generalJournalEntry.PostingLayer == postingLayer
                    && (fiscalCalendarPeriod.type == FiscalPeriodType::Operating
                        || fiscalCalendarPeriod.type == FiscalPeriodType::Opening
                        || (trialBalanceParameter.parmIncludeClosingTransactions() && fiscalCalendarPeriod.type == FiscalPeriodType::Closing))
                exists join budgetEncumbranceInquiryMainAccount
                    where budgetEncumbranceInquiryMainAccount.MainAccount == generalJournalAccountEntry.MainAccount;
        }
        else
        {
            insert_recordset ledgerTransactionDetail
            (
                GeneralJournalAccountEntry,
                Amount,
                FocusLedgerDimension,
                AccountingDate,
                JournalNumber,
                SubledgerVoucher,
                DocumentNumber
            )
            select RecId, AccountingCurrencyAmount, LedgerDimension from generalJournalAccountEntry
                join AccountingDate, JournalNumber, SubledgerVoucher, DocumentNumber from generalJournalEntry
                    where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                join fiscalCalendarPeriod
                    where fiscalCalendarPeriod.RecId == generalJournalEntry.FiscalCalendarPeriod
                    && generalJournalEntry.AccountingDate >= trialBalanceParameter.parmStartDate()
                    && generalJournalEntry.AccountingDate <= trialBalanceParameter.parmEndDate()
                    && generalJournalEntry.Ledger == Ledger::current()
                    && generalJournalEntry.PostingLayer == postingLayer
                    && (fiscalCalendarPeriod.type == FiscalPeriodType::Operating
                        || fiscalCalendarPeriod.type == FiscalPeriodType::Opening
                        || (trialBalanceParameter.parmIncludeClosingTransactions() && fiscalCalendarPeriod.type == FiscalPeriodType::Closing))
                exists join budgetEncumbranceInquiryMainAccount
                    where budgetEncumbranceInquiryMainAccount.MainAccount == generalJournalAccountEntry.MainAccount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerTransactionDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the ledger transaction detail.
    /// </summary>
    private void updateLedgerTransactionDetail()
    {
        // update source header and subledger Amount
        this.updateSourceDocumentHeaderAndSubledgerAmount();

        // Update document number with subvoucher
        this.updateLedgerTransactionDocumentNumber();
        
        // Update ledger dimension
        this.updateLedgerDetailForFocusLedgerDimension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerDetailForFocusLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update ledger transaction detail for focus ledger dimension.
    /// </summary>
    private void updateLedgerDetailForFocusLedgerDimension()
    {
        if (isLedgerBalanceFeatureEnabled)
        {
            GeneralLedgerBalanceReportingDimensionReference dimensionReference; 

            update_recordset ledgerTransactionDetail
                setting ReportingDimension = dimensionReference.ReportingDimension
                join dimensionReference
                    where dimensionReference.AccountEntryLedgerDimension == ledgerTransactionDetail.ReportingDimension
                        && dimensionReference.FocusDimensionHierarchy == trialBalanceParameter.parmDimensionSetHierarchy().RecId;
        }
        else
        {
            DimensionFocusLedgerDimensionReference focusLedgerDimensionReference;

            update_recordset ledgerTransactionDetail
                setting FocusLedgerDimension = focusLedgerDimensionReference.FocusLedgerDimension
                join focusLedgerDimensionReference
                    where focusLedgerDimensionReference.AccountEntryLedgerDimension == ledgerTransactionDetail.FocusLedgerDimension
                        && focusLedgerDimensionReference.FocusDimensionHierarchy == trialBalanceParameter.parmDimensionSetHierarchy().RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceDocumentHeaderAndSubledgerAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update source document header and sub ledger amount
    /// </summary>
    private void updateSourceDocumentHeaderAndSubledgerAmount()
    {
        BudgetEncumbranceGeneralJournalSourceDocumentTmp subledgerDetail = this.getSubledgerAmountAndSourceDocumentHeader();

        this.updateLedgerDetailBySubledgerData(subledgerDetail);

        BudgetEncumbranceGeneralJournalSourceDocumentTmp summarizedLedgerDetail = this.getSummarizedLedgerDetail(subledgerDetail);

        this.updateLedgerDetailBySummarizedData(subledgerDetail, summarizedLedgerDetail);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerDetailBySummarizedData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update ledger detail by summarized ledger details.
    /// </summary>
    /// <param name = "_subledgerDetail">Sub ledger detail.</param>
    /// <param name = "_summarizedLedgerDetail">Summarized ledger detail.</param>
    private void updateLedgerDetailBySummarizedData(BudgetEncumbranceGeneralJournalSourceDocumentTmp _subledgerDetail, BudgetEncumbranceGeneralJournalSourceDocumentTmp _summarizedLedgerDetail)
    {
        this.deleteSummarizedGeneralJournal(_summarizedLedgerDetail);

        this.insertLedgerDetailFromSummarizedData(_subledgerDetail, _summarizedLedgerDetail);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSummarizedGeneralJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete summarized general journal transaction detail.
    /// </summary>
    /// <param name = "_summarizedLedgerDetail">Summarized ledger detail.</param>
    private void deleteSummarizedGeneralJournal(BudgetEncumbranceGeneralJournalSourceDocumentTmp _summarizedLedgerDetail)
    {
        delete_from ledgerTransactionDetail
             exists join _summarizedLedgerDetail
                where ledgerTransactionDetail.GeneralJournalAccountEntry == _summarizedLedgerDetail.GeneralJournalAccountEntry
                    && _summarizedLedgerDetail.RecordRecId > 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerDetailBySubledgerData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update ledger detail by sub ledger data.
    /// </summary>
    /// <param name = "_subledgerDetail">Sub ledger detail</param>
    private void updateLedgerDetailBySubledgerData(BudgetEncumbranceGeneralJournalSourceDocumentTmp _subledgerDetail)
    {
        update_recordset ledgerTransactionDetail
            setting SourceDocumentHeader = _subledgerDetail.SourceDocumentHeader,
                SubledgerAmount = _subledgerDetail.SubledgerAmount,
                SubledgerVoucher = _subledgerDetail.SubledgerVoucher
            join _subledgerDetail
                where ledgerTransactionDetail.GeneralJournalAccountEntry == _subledgerDetail.GeneralJournalAccountEntry
                    && ledgerTransactionDetail.Amount == _subledgerDetail.SubledgerAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLedgerDetailFromSummarizedData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert ledger detail from summarized detail.
    /// </summary>
    /// <param name = "_subledgerDetail">Sub ledger detail</param>
    /// <param name = "_summarizedLedgerDetail">Summarized ledger detail.</param>
    private void insertLedgerDetailFromSummarizedData(BudgetEncumbranceGeneralJournalSourceDocumentTmp _subledgerDetail, BudgetEncumbranceGeneralJournalSourceDocumentTmp _summarizedLedgerDetail)
    {
        insert_recordset ledgerTransactionDetail
       (
            GeneralJournalAccountEntry,
            DocumentNumber,
            FocusLedgerDimension,
            JournalNumber,
            SubledgerVoucher,
            AccountingDate,
            Amount,
            SourceDocumentHeader
        )
        select
            GeneralJournalAccountEntry,
            DocumentNumber,
            LedgerDimension,
            JournalNumber,
            SubledgerVoucher,
            AccountingDate,
            SubledgerAmount,
            SourceDocumentHeader
            from _subledgerDetail
            exists join _summarizedLedgerDetail
                where _subledgerDetail.GeneralJournalAccountEntry == _summarizedLedgerDetail.GeneralJournalAccountEntry
                    && _summarizedLedgerDetail.RecordRecId > 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSummarizedLedgerDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the summarized ledger detail.
    /// </summary>
    /// <param name = "_subledgerDetail"><C>BudgetEncumbranceGeneralJournalSourceDocumentTmp</C> buffer</param>
    /// <returns><C>BudgetEncumbranceGeneralJournalSourceDocumentTmp</C> buffer</returns>
    private BudgetEncumbranceGeneralJournalSourceDocumentTmp getSummarizedLedgerDetail(BudgetEncumbranceGeneralJournalSourceDocumentTmp _subledgerDetail)
    {
        BudgetEncumbranceGeneralJournalSourceDocumentTmp summarizedLedgerDetail;

        insert_recordset summarizedLedgerDetail (GeneralJournalAccountEntry, RecordRecId)
            select GeneralJournalAccountEntry, count(RecId)
                from _subledgerDetail
                    group by _subledgerDetail.GeneralJournalAccountEntry;

        return summarizedLedgerDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubledgerAmountAndSourceDocumentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the subledger amount and source document header from ledger transaction detail.
    /// </summary>
    /// <returns><C>BudgetEncumbranceGeneralJournalSourceDocumentTmp</C> buffer.</returns>
    private BudgetEncumbranceGeneralJournalSourceDocumentTmp getSubledgerAmountAndSourceDocumentHeader()
    {
        BudgetEncumbranceGeneralJournalSourceDocumentTmp sourceDocumentTmp;
        BudgetEncumbranceGeneralJournalSourceDocumentTmp uniqueSourceDocumentTmp;
        SubledgerJournalAccountEntry subledgerJournalAccountEntry;
        SubledgerJournalAccountEntryDistribution subledgerJournalDistribution;
        AccountingDistribution accountingDistribution;

        insert_recordset sourceDocumentTmp
        (
            GeneralJournalAccountEntry,
            SubledgerVoucher,
            JournalNumber,
            DocumentNumber,
            AccountingDate,
            SubledgerAmount,
            LedgerDimension,
            SourceDocumentHeader
        )
        select GeneralJournalAccountEntry, SubledgerVoucher, JournalNumber, DocumentNumber, AccountingDate
            from ledgerTransactionDetail
            join AccountingCurrencyAmount, LedgerDimension from subledgerJournalAccountEntry
                where subledgerJournalAccountEntry.GeneralJournalAccountEntry == ledgerTransactionDetail.GeneralJournalAccountEntry
            join subledgerJournalDistribution
                where subledgerJournalDistribution.SubledgerJournalAccountEntry == subledgerJournalAccountEntry.RecId
            join SourceDocumentHeader from accountingDistribution
                group by accountingDistribution.SourceDocumentHeader,
                    ledgerTransactionDetail.GeneralJournalAccountEntry,
                    ledgerTransactionDetail.JournalNumber,
                    ledgerTransactionDetail.DocumentNumber,
                    ledgerTransactionDetail.AccountingDate,
                    ledgerTransactionDetail.SubledgerVoucher,
                    subledgerJournalAccountEntry.AccountingCurrencyAmount,
                    subledgerJournalAccountEntry.LedgerDimension
                where subledgerJournalDistribution.accountingDistribution == accountingDistribution.RecId;

        insert_recordset uniqueSourceDocumentTmp
        (
            GeneralJournalAccountEntry,
            SubledgerVoucher,
            JournalNumber,
            DocumentNumber,
            AccountingDate,
            LedgerDimension,
            SourceDocumentHeader,
            SubledgerAmount
        )
        select
            GeneralJournalAccountEntry,
            SubledgerVoucher,
            JournalNumber,
            DocumentNumber,
            AccountingDate,
            LedgerDimension,
            SourceDocumentHeader,
            sum(SubledgerAmount)
            from sourceDocumentTmp
                group by sourceDocumentTmp.GeneralJournalAccountEntry,
                    sourceDocumentTmp.SubledgerVoucher,
                    sourceDocumentTmp.JournalNumber,
                    sourceDocumentTmp.DocumentNumber,
                    sourceDocumentTmp.AccountingDate,
                    sourceDocumentTmp.LedgerDimension,
                    sourceDocumentTmp.SourceDocumentHeader;

        return uniqueSourceDocumentTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerTransactionDocumentNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update ledger transaction document number.
    /// </summary>
    private void updateLedgerTransactionDocumentNumber()
    {
        update_recordset ledgerTransactionDetail
            setting DocumentNumber = ledgerTransactionDetail.SubledgerVoucher
                where ledgerTransactionDetail.SourceDocumentHeader == 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>