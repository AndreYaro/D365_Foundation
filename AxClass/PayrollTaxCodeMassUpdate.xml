<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollTaxCodeMassUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PayrollTaxCodeMassUpdate</c> class is the form helper class which manages the mass update of data for a given list of tax codes.
/// </summary>
class PayrollTaxCodeMassUpdate implements SysPackable
{
    #OCCRetryCount

    int taxCodeTypeId;
    int updatedTaxCodeRecords;
    int totalTaxCodeRecords;

    boolean editVendorAccount;
    boolean editProjectCategory;
    boolean editDefaultDimension;
    boolean editMainAccount;
    boolean editW2BoxNumber;
    boolean editW2Box20Label;

    PayrollTaxGroupId taxGroupId;
    VendAccount vendorAccount;
    ProjCategoryId projCategoryId;
    LedgerDimensionDefaultAccount mainAccount;
    SelectableDataArea vendDataAreaId;
    SelectableDataArea categoryDataAreaId;
    SelectableDataArea selectedLegalEntityDataAreaId;
    SelectableDataArea taxReportingDataAreaId;
    PayrollW2BoxNumber w2BoxNumber;
    PayrollW2BoxLabel w2BoxLabel;
    PayrollW2Box20Label w2Box20Label;
    PayrollW2Box20Other w2Box20Other;
    EffectiveDate effectiveOnDate;

    PayrollTaxGroupCodeRecId payrollTaxGroupRecId;
    PayrollTaxCodeRecId payrollTaxCodeRecId;
    CompanyInfoRecId legalEntityRecId;
    DimensionDefault dimensionDefaultRecId;

    #define.currentversion(2)
    #localmacro.currentlist
    editVendorAccount,
    editProjectCategory,
    editDefaultDimension,
    editMainAccount,
    taxGroupId,
    vendorAccount,
    projCategoryId,
    mainAccount,
    vendDataAreaId,
    categoryDataAreaId,
    selectedLegalEntityDataAreaId,
    payrollTaxGroupRecId,
    payrollTaxCodeRecId,
    legalEntityRecId,
    dimensionDefaultRecId,
    editW2BoxNumber,
    editW2Box20Label,
    w2BoxNumber,
    w2BoxLabel,
    w2Box20Label,
    w2Box20Other,
    effectiveOnDate,
    updatedTaxCodeRecords,
    totalTaxCodeRecords
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertTaxAccountingRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts <c>PayrollTaxAccountingRule</c> records for a list of tax codes.
    /// </summary>
    /// <param name="_runForSystemDefinedTaxGroup">
    /// The flag is set to true if the Tax group is system defined; otherwise, false.
    /// </param>
    private void insertTaxAccountingRule(boolean _runForSystemDefinedTaxGroup)
    {
        PayrollTaxAccountingRule taxAccountingRule;
        PayrollTaxGroup taxGroup;
        PayrollTaxCode taxCode;
        PayrollTaxGroupCode taxGroupCode;

        //
        // If the user has selected main account check box on the form then perform set based insert operation; otherwise not.
        //
        if (editMainAccount)
        {
            if (_runForSystemDefinedTaxGroup)
            {
                // Run for system defined tax group

                insert_recordset taxAccountingRule (PayrollTaxCode, LegalEntity, LedgerDimension)
                    select RecId, legalEntityRecId, mainAccount from taxCode
                        where taxCode.Type == taxCodeTypeId
                        notExists join taxAccountingRule
                            where taxAccountingRule.PayrollTaxCode == taxCode.RecId
                                && taxAccountingRule.LegalEntity == legalEntityRecId;
            }
            else
            {
                // Run for user defined tax group

                insert_recordset taxAccountingRule (PayrollTaxCode, LegalEntity, LedgerDimension)
                    select TaxCode, legalEntityRecId, mainAccount from taxGroupCode
                        join taxGroup
                            where taxGroup.RecId == taxGroupCode.TaxGroup
                                && taxGroup.GroupId == taxGroupId
                            join taxCode
                                where taxCode.RecId == taxGroupCode.TaxCode
                                notExists join taxAccountingRule
                                    where taxCode.RecId == taxAccountingRule.PayrollTaxCode
                                        && taxAccountingRule.LegalEntity == legalEntityRecId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxCodeDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert set of records in <c>PayrollTaxCodeDefaultDimension</c> table for a list of tax codes.
    /// </summary>
    /// <param name="_runForSystemDefinedTaxGroup">
    /// Set to true if the method is called for a system defined tax group.
    /// </param>
    private void insertTaxCodeDefaultDimension(boolean _runForSystemDefinedTaxGroup)
    {
        PayrollTaxCodeDefaultDimension taxCodeDefaultDimension;
        PayrollTaxGroup taxGroup;
        PayrollTaxCode taxCode;
        PayrollTaxGroupCode taxGroupCode;

        //
        // If the user has selected main account check box on the form then perform set based insert operation; otherwise, not.
        //
        if (editVendorAccount || editProjectCategory || editDefaultDimension)
        {
            if (_runForSystemDefinedTaxGroup)
            {
                // Run for system defined tax group

                insert_recordset taxCodeDefaultDimension (VendDataAreaId, VendAccountNum, CategoryDataAreaId, CategoryId, DefaultDimension, LegalEntity, PayrollTaxCode)
                    select vendDataAreaId, vendorAccount, categoryDataAreaId, projCategoryId, dimensionDefaultRecId, legalEntityRecId, RecId from taxCode
                        where taxCode.Type == taxCodeTypeId
                        notExists join taxCodeDefaultDimension
                            where taxCodeDefaultDimension.PayrollTaxCode == taxCode.RecId
                                && taxCodeDefaultDimension.LegalEntity == legalEntityRecId;
            }
            else
            {
                // Run for user defined tax group

                insert_recordset taxCodeDefaultDimension (VendDataAreaId, VendAccountNum, CategoryDataAreaId, CategoryId, DefaultDimension, LegalEntity, PayrollTaxCode)
                    select vendDataAreaId, vendorAccount, categoryDataAreaId, projCategoryId, dimensionDefaultRecId, legalEntityRecId from taxGroupCode
                    join taxGroup
                        where taxGroup.RecId == taxGroupCode.TaxGroup
                            && taxGroup.GroupId == taxGroupId
                        join RecId from taxCode
                            where taxCode.RecId == taxGroupCode.TaxCode
                            notExists join taxCodeDefaultDimension
                                where taxCodeDefaultDimension.PayrollTaxCode == taxCode.RecId
                                    && taxCodeDefaultDimension.LegalEntity == legalEntityRecId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCategoryDataAreaId</Name>
				<Source><![CDATA[
    public DataAreaId parmCategoryDataAreaId(DataAreaId _CategoryDataAreaId = categoryDataAreaId)
    {
        categoryDataAreaId = _categoryDataAreaId;

        return categoryDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimensionDefaultRecId</Name>
				<Source><![CDATA[
    public DimensionDefault parmDimensionDefaultRecId(DimensionDefault _dimensionDefaultRecId = dimensionDefaultRecId)
    {
        dimensionDefaultRecId = _dimensionDefaultRecId;

        return dimensionDefaultRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEditDefaultDimension</Name>
				<Source><![CDATA[
    public boolean parmEditDefaultDimension(boolean _editDefaultDimension = editDefaultDimension)
    {
        editDefaultDimension = _editDefaultDimension;

        return editDefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEditMainAccount</Name>
				<Source><![CDATA[
    public boolean parmEditMainAccount(boolean _editMainAccount = editMainAccount)
    {
        editMainAccount = _editMainAccount;

        return editMainAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEditProjectCategory</Name>
				<Source><![CDATA[
    public boolean parmEditProjectCategory(boolean _editProjectCategory = editProjectCategory)
    {
        editProjectCategory = _editProjectCategory;

        return editProjectCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEditVendorAccount</Name>
				<Source><![CDATA[
    public boolean parmEditVendorAccount(boolean _editVendorAccount = editVendorAccount)
    {
        editVendorAccount = _editVendorAccount;

        return editVendorAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEditW2Box20Label</Name>
				<Source><![CDATA[
    public boolean parmEditW2Box20Label(boolean _editW2Box20Label = editW2Box20Label)
    {
        editW2Box20Label = _editW2Box20Label;

        return editW2Box20Label;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEditW2BoxNumber</Name>
				<Source><![CDATA[
    public boolean parmEditW2BoxNumber(boolean _editW2BoxNumber = editW2BoxNumber)
    {
        editW2BoxNumber = _editW2BoxNumber;

        return editW2BoxNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEffectiveOnDate</Name>
				<Source><![CDATA[
    public final EffectiveDate parmEffectiveOnDate(EffectiveDate _effectiveOnDate = effectiveOnDate)
    {
        effectiveOnDate = _effectiveOnDate;

        return effectiveOnDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLegalEntityRecId</Name>
				<Source><![CDATA[
    public LegalEntityRecId parmLegalEntityRecId(LegalEntityRecId _legalEntityRecId = legalEntityRecId)
    {
        legalEntityRecId = _legalEntityRecId;

        return legalEntityRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMainAccount</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount parmMainAccount(LedgerDimensionDefaultAccount _mainAccount = mainAccount)
    {
        mainAccount = _mainAccount;

        return mainAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjCategoryId</Name>
				<Source><![CDATA[
    public ProjCategoryId parmProjCategoryId(ProjCategoryId _projCategoryId = projCategoryId)
    {
        projCategoryId = _projCategoryId;

        return projCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectedLegalEntityDataAreaId</Name>
				<Source><![CDATA[
    public SelectableDataArea parmSelectedLegalEntityDataAreaId(SelectableDataArea _selectedLegalEntityDataAreaId = selectedLegalEntityDataAreaId)
    {
        selectedLegalEntityDataAreaId = _selectedLegalEntityDataAreaId;

        return selectedLegalEntityDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxGroupId</Name>
				<Source><![CDATA[
    public PayrollTaxGroupId parmTaxGroupId(PayrollTaxGroupId _taxGroupId = taxGroupId)
    {
        taxGroupId = _taxGroupId;

        return taxGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxReportingDataAreaId</Name>
				<Source><![CDATA[
    public DataAreaId parmTaxReportingDataAreaId(DataAreaId _taxReportingDataAreaId = taxReportingDataAreaId)
    {
        taxReportingDataAreaId = _taxReportingDataAreaId;

        return taxReportingDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalTaxCodeRecords</Name>
				<Source><![CDATA[
    public int parmTotalTaxCodeRecords(int _totalTaxCodeRecords = totalTaxCodeRecords)
    {
        totalTaxCodeRecords = _totalTaxCodeRecords;

        return totalTaxCodeRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdatedTaxCodeRecords</Name>
				<Source><![CDATA[
    public int parmUpdatedTaxCodeRecords(int _updatedTaxCodeRecords = updatedTaxCodeRecords)
    {
        updatedTaxCodeRecords = _updatedTaxCodeRecords;

        return updatedTaxCodeRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendDataAreaId</Name>
				<Source><![CDATA[
    public DataAreaId parmVendDataAreaId(DataAreaId _vendDataAreaId = vendDataAreaId)
    {
        vendDataAreaId = _vendDataAreaId;

        return vendDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendorAccount</Name>
				<Source><![CDATA[
    public VendAccount parmVendorAccount(VendAccount _vendorAccount = vendorAccount)
    {
        vendorAccount = _vendorAccount;

        return vendorAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmW2Box20Label</Name>
				<Source><![CDATA[
    public PayrollW2Box20Label parmW2Box20Label(PayrollW2Box20Label _w2Box20Label = w2Box20Label)
    {
        w2Box20Label = _w2Box20Label;

        return w2Box20Label;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmW2Box20Other</Name>
				<Source><![CDATA[
    public PayrollW2Box20Other parmW2Box20Other(PayrollW2Box20Other _w2Box20Other = w2Box20Other)
    {
        w2Box20Other = _w2Box20Other;

        return w2Box20Other;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmW2BoxLabel</Name>
				<Source><![CDATA[
    public PayrollW2BoxLabel parmW2BoxLabel(PayrollW2BoxLabel _w2BoxLabel = w2BoxLabel)
    {
        w2BoxLabel = _w2BoxLabel;

        return w2BoxLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmW2BoxNumber</Name>
				<Source><![CDATA[
    public PayrollW2BoxNumber parmW2BoxNumber(PayrollW2BoxNumber _w2BoxNumber = w2BoxNumber)
    {
        w2BoxNumber = _w2BoxNumber;

        return w2BoxNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performMassUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs mass udpate on a list of tax codes.
    /// </summary>
    /// <remarks>
    /// This method contains the code that performs the actual job of the class.
    /// </remarks>
    public void performMassUpdate()
    {
        PayrollTaxGroup taxGroup;

        DictEnum taxCodeType = new DictEnum(enumName2Id(enumStr(PayrollTaxCodeType)));

        taxGroup = PayrollTaxGroup::findByTaxGroup(taxGroupId);

        if (taxGroup.IsImmutable == NoYes::Yes)
        {
            taxCodeTypeId = taxCodeType.symbol2Value(taxGroup.GroupId);
            this.updateTaxAccountingRule(true);
            this.insertTaxAccountingRule(true);
            this.updateTaxCodeDefaultDimension(true);
            this.insertTaxCodeDefaultDimension(true);
            this.updateTaxReporting(true);
        }
        else
        {
            this.updateTaxAccountingRule(false);
            this.insertTaxAccountingRule(false);
            this.updateTaxCodeDefaultDimension(false);
            this.insertTaxCodeDefaultDimension(false);
            this.updateTaxReporting(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the Perfom mass update process on server.
    /// </summary>
    public void run()
    {
        PayrollTaxCodeMassUpdate::runOnServer(this.pack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer version = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the Default dimension for  a set of records in <c>PayrollTaxCodeDefaultDimension</c> table.
    /// </summary>
    /// <param name="_runForSystemDefinedTaxGroup">
    /// Set to true if the method is called for a system defined Tax group.
    /// </param>
    private void updateDefaultDimension(boolean _runForSystemDefinedTaxGroup)
    {
        PayrollTaxCodeDefaultDimension taxCodeDefaultDimension;
        PayrollTaxGroup taxGroup;
        PayrollTaxCode taxCode;
        PayrollTaxGroupCode taxGroupCode;

        // If the user has selected default dimension check box on the form then perform set based update operation; otherwise, not

        if (editDefaultDimension)
        {
            if (_runForSystemDefinedTaxGroup)
            {
                update_recordset taxCodeDefaultDimension
                    setting DefaultDimension = dimensionDefaultRecId
                        exists join taxCode
                            where taxCode.Type == taxCodeTypeId
                                && taxCode.RecId == taxCodeDefaultDimension.PayrollTaxCode
                                && taxCodeDefaultDimension.LegalEntity == legalEntityRecId;
            }
            else
            {
                update_recordSet taxCodeDefaultDimension
                    setting DefaultDimension = dimensionDefaultRecId
                        exists join taxGroupCode
                            exists join taxGroup
                                where taxGroup.RecId == taxGroupCode.TaxGroup
                                    && taxGroup.GroupId == taxGroupId
                                exists join Code from taxCode
                                    where taxCode.RecId == taxGroupCode.TaxCode
                                        && taxCode.RecId == taxCodeDefaultDimension.PayrollTaxCode
                                        && taxCodeDefaultDimension.LegalEntity == legalEntityRecId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMainAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the Main Account for  a set of records in the <c>PayrollTaxAccountingRule</c> table.
    /// </summary>
    /// <param name="_runForSystemDefinedTaxGroup">
    /// Set to true if the method is called for a system defined Tax group.
    /// </param>
    private void updateMainAccount(boolean _runForSystemDefinedTaxGroup)
    {
        PayrollTaxAccountingRule taxAccountingRule;
        PayrollTaxGroup taxGroup;
        PayrollTaxCode taxCode;
        PayrollTaxGroupCode taxGroupCode;

        // If the user has selected main account check box on the form then perform set based update operation; otherwise, not.

        if (editMainAccount)
        {
            if (_runForSystemDefinedTaxGroup)
            {
                // Run mass update for system defined tax group

                update_recordset taxAccountingRule
                    setting LedgerDimension = mainAccount
                        exists join taxCode
                            where taxCode.Type == taxCodeTypeId
                                && taxCode.RecId == taxAccountingRule.PayrollTaxCode
                                && taxAccountingRule.LegalEntity == legalEntityRecId;
            }
            else
            {
                // Run mass update for user defined tax group

                update_recordSet taxAccountingRule
                    setting LedgerDimension = mainAccount
                        exists join taxGroupCode
                            exists join taxGroup
                                where taxGroup.RecId == taxGroupCode.TaxGroup
                                    && taxGroup.GroupId == taxGroupId
                                exists join taxCode
                                    where taxCode.RecId == taxGroupCode.TaxCode
                                        && taxCode.RecId == taxAccountingRule.PayrollTaxCode
                                        && taxAccountingRule.LegalEntity == legalEntityRecId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the Project category and Category Data area Id for  a set of records in <c>PayrollTaxCodeDefaultDimension</c> table.
    /// </summary>
    /// <param name="_runForSystemDefinedTaxGroup">
    /// Set to true if the method is called for a system defined Tax group.
    /// </param>
    private void updateProjCategory(boolean _runForSystemDefinedTaxGroup)
    {
        PayrollTaxCodeDefaultDimension taxCodeDefaultDimension;
        PayrollTaxGroup taxGroup;
        PayrollTaxCode taxCode;
        PayrollTaxGroupCode taxGroupCode;

        // If the user has selected project category check box on the form then perform set based update operation ; otherwise, not.

        if (editProjectCategory)
        {
            if (_runForSystemDefinedTaxGroup)
            {
                // Run mass update for system defined tax group

                update_recordset taxCodeDefaultDimension
                    setting
                        CategoryId = projCategoryId,
                        CategoryDataAreaId = categoryDataAreaId
                    exists join taxCode
                        where taxCode.Type == taxCodeTypeId
                            && taxCode.RecId == taxCodeDefaultDimension.PayrollTaxCode
                            && taxCodeDefaultDimension.LegalEntity == legalEntityRecId;
            }
            else
            {
                // Run mass update for user defined tax group

                update_recordSet taxCodeDefaultDimension
                    setting CategoryId = projCategoryId,
                        CategoryDataAreaId = categoryDataAreaId
                            exists join taxGroupCode
                            exists join taxGroup
                                where taxGroup.RecId == taxGroupCode.TaxGroup
                                    && taxGroup.GroupId == taxGroupId
                                exists join taxCode
                                    where taxCode.RecId == taxGroupCode.TaxCode
                                        && taxCode.RecId == taxCodeDefaultDimension.PayrollTaxCode
                                        && taxCodeDefaultDimension.LegalEntity == legalEntityRecId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxAccountingRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the Main Account for  a set of records in <c>PayrollTaxAccountingRule</c> table.
    /// </summary>
    /// <param name="_runForSystemDefinedTaxGroup">
    /// Set to true if the method is called for a system defined Tax group.
    /// </param>
    public void updateTaxAccountingRule(boolean _runForSystemDefinedTaxGroup)
    {
        this.updateMainAccount(_runForSystemDefinedTaxGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxCodeDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates Vendor, Project category and Default Dimension for a set of records in <c>PayrollTaxCodeDefaultDimension</c> table.
    /// </summary>
    /// <param name="_runForSystemDefinedTaxGroup">
    /// Set to true if the method is called for a system defined Tax group.
    /// </param>
    private void updateTaxCodeDefaultDimension(boolean _runForSystemDefinedTaxGroup)
    {
        this.updateVendor(_runForSystemDefinedTaxGroup);
        this.updateProjCategory(_runForSystemDefinedTaxGroup);
        this.updateDefaultDimension(_runForSystemDefinedTaxGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxReporting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the W2BoxNumber, W2BoxLabel, W2Box20Label and W2Box20Other fields a set of records in <c>PayrollTaxExternalReporting</c> table.
    /// </summary>
    /// <param name="_runForSystemDefinedTaxGroup">
    /// Set to true if the method is called for a system defined Tax group.
    /// </param>
    private void updateTaxReporting(boolean _runForSystemDefinedTaxGroup)
    {
        PayrollTaxExternalReporting taxExternalReportingSourceCount;
        PayrollTaxExternalReporting taxExternalReportingSource;
        PayrollTaxExternalReporting taxExternalReporting;
        PayrollTaxGroup taxGroup;
        PayrollTaxCode taxCode;
        PayrollTaxGroupCode taxGroupCode;
        date validFrom = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        date validTo = validFrom;
        date validFromMin = DateTimeUtil::date(DateTimeUtil::minValue());
        date validToMax = dateMax();

        // If the user has selected W2BoxNumber or W2Box20Label method check box on the form then perform set based update operation ; otherwise, not

        if (this.parmEditW2BoxNumber() || this.parmEditW2Box20Label())
        {
            if (_runForSystemDefinedTaxGroup)
            {
                // Run mass update for system defined tax group

                //get the count of total tax code records for this tax code type
                select ValidTimeState(validFromMin, validToMax) count(RecId) from taxCode
                    exists join taxExternalReportingSourceCount
                        where taxCode.Type == taxCodeTypeId
                            && taxCode.RecId == taxExternalReportingSourceCount.PayrollTaxCode;

                this.parmTotalTaxCodeRecords(any2int(taxCode.RecId));

                while select ValidTimeState(validFromMin, validTo) taxExternalReportingSource
                    exists join taxCode
                        where taxCode.Type == taxCodeTypeId
                            && taxCode.RecId == taxExternalReportingSource.PayrollTaxCode
                {
                    taxExternalReporting.clear();

                    if (this.updateTaxReportingRecord(taxExternalReportingSource, taxExternalReporting))
                    {
                        this.parmUpdatedTaxCodeRecords(this.parmUpdatedTaxCodeRecords() + 1);
                    }
                }
            }
            else
            {
                // Run mass update for User defined tax group

                //get the count of total tax code records for this tax code type
                select ValidTimeState(validFromMin, validToMax) count(RecId) from taxCode
                    exists join taxGroupCode
                        exists join taxGroup
                            where taxGroup.RecId == taxGroupCode.TaxGroup
                                && taxGroup.GroupId == taxGroupId
                            exists join taxExternalReportingSourceCount
                                where taxCode.RecId == taxGroupCode.TaxCode
                                    && taxCode.RecId == taxExternalReportingSourceCount.PayrollTaxCode;

                this.parmTotalTaxCodeRecords(any2int(taxCode.RecId));

                while select ValidTimeState(validFromMin, validTo) taxExternalReportingSource
                    exists join taxGroupCode
                        exists join taxGroup
                            where taxGroup.RecId == taxGroupCode.TaxGroup
                                && taxGroup.GroupId == taxGroupId
                            exists join taxCode
                                where taxCode.RecId == taxGroupCode.TaxCode
                                    && taxCode.RecId == taxExternalReportingSource.PayrollTaxCode
                {
                    taxExternalReporting.clear();

                    if (this.updateTaxReportingRecord(taxExternalReportingSource, taxExternalReporting))
                    {
                        this.parmUpdatedTaxCodeRecords(this.parmUpdatedTaxCodeRecords() + 1);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxReportingRecord</Name>
				<Source><![CDATA[
    private boolean updateTaxReportingRecord(PayrollTaxExternalReporting _sourceRecord, PayrollTaxExternalReporting _newRecord)
    {
        if (_sourceRecord.futureRecordExists())
        {
            return false;
        }
        else
        {
            buf2Buf(_sourceRecord, _newRecord);

            if (this.parmEditW2BoxNumber())
            {
                _newRecord.W2BoxNumber = this.parmW2BoxNumber();
                _newRecord.W2BoxLabel = this.parmW2BoxLabel();
            }

            if (this.parmEditW2Box20Label())
            {
                _newRecord.W2Box20Label = this.parmW2Box20Label();
                _newRecord.W2Box20Other = this.parmW2Box20Other();
            }

            _newRecord.ValidTo = DateTimeUtil::date(DateTimeUtil::maxValue());

            _newRecord.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
            _newRecord.ValidFrom = this.parmEffectiveOnDate();

            if (_newRecord.validateWrite())
            {
                ttsbegin;
                _newRecord.write();
                ttscommit;
            }
            else
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the Vendor Account and Vendor data area Id for a set of records in <c>PayrollTaxCodeDefaultDimension</c> table.
    /// </summary>
    /// <param name="_runForSystemDefinedTaxGroup">
    /// Set to true if the method is called for a system defined Tax group.
    /// </param>
    private void updateVendor(boolean _runForSystemDefinedTaxGroup)
    {
        PayrollTaxCodeDefaultDimension taxCodeDefaultDimension;
        PayrollTaxGroup taxGroup;
        PayrollTaxCode taxCode;
        PayrollTaxGroupCode taxGroupCode;

        // If the user has selected Vendor account check box on the form then perform set based update operation ; otherwise, not

        if (editVendorAccount)
        {
            if (_runForSystemDefinedTaxGroup)
            {
                // Run mass update for system defined tax group

                update_recordset taxCodeDefaultDimension
                    setting
                        VendAccountNum = vendorAccount,
                        VendDataAreaId = vendDataAreaId
                    exists join taxCode
                        where taxCode.Type == taxCodeTypeId
                            && taxCode.RecId == taxCodeDefaultDimension.PayrollTaxCode
                            && taxCodeDefaultDimension.LegalEntity == legalEntityRecId;
            }
            else
            {
                // Run mass update for User defined tax group

                update_recordSet taxCodeDefaultDimension
                    setting
                        VendAccountNum = vendorAccount,
                        VendDataAreaId = vendDataAreaId
                    exists join taxGroupCode
                        exists join taxGroup
                            where taxGroup.RecId == taxGroupCode.TaxGroup
                                && taxGroup.GroupId == taxGroupId
                            exists join taxCode
                                where taxCode.RecId == taxGroupCode.TaxCode
                                    && taxCode.RecId == taxCodeDefaultDimension.PayrollTaxCode
                                    && taxCodeDefaultDimension.LegalEntity == legalEntityRecId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>PayrollTaxCodeMassUpdate</c> class.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>PayrollTaxCodeMassUpdate</c> class.
    /// </returns>
    public static PayrollTaxCodeMassUpdate construct()
    {
        return new PayrollTaxCodeMassUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>PayrollTaxCodeMassUpdate</c> class on the server and sets the properties of.
    /// the class from the specified container.
    /// </summary>
    /// <param name="_packedTaxCodeDetails">
    /// A container that contains the property values for the instance of the <c>PayrollTaxCodeMassUpdate</c> class.
    /// </param>
    /// <returns>
    /// An instance of the <c>PayrollTaxCodeMassUpdate</c> class.
    /// </returns>
    public static PayrollTaxCodeMassUpdate create(container _packedTaxCodeDetails)
    {
        PayrollTaxCodeMassUpdate taxCodeDetails = new PayrollTaxCodeMassUpdate();

        taxCodeDetails.unpack(_packedTaxCodeDetails);

        return taxCodeDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromTaxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new tax code mass update object.
    /// </summary>
    /// <param name="_taxGroupId">
    /// The tax group for which to update the tax code details.
    /// </param>
    /// <returns>
    /// A new tax code mass udpate object.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The required parameter are null.
    /// </exception>
    public static PayrollTaxCodeMassUpdate newFromTaxGroup(PayrollTaxGroupId _taxGroupId)
    {
        PayrollTaxCodeMassUpdate payrollTaxCodeMassUpdate;

        if (!_taxGroupId)
        {
            throw error(Error::missingParameter(null));
        }

        payrollTaxCodeMassUpdate = PayrollTaxCodeMassUpdate::construct();
        payrollTaxCodeMassUpdate.parmTaxGroupId(_taxGroupId);

        return payrollTaxCodeMassUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Mass updates or inserts list of tax codes details in <c>PayrollTaxAccountingRule</c>
    /// and <c>PayrollTaxCodeDefaultDimension</c> tables on the server and sets the properties of the class from the supplied container.
    /// </summary>
    /// <param name="_packedTaxCodeDetails">
    /// A container which contains the property values of the <c>PayrollTaxCodeMassUpdate</c> class.
    /// </param>
    public static void runOnServer(container _packedTaxCodeDetails)
    {
        PayrollTaxCodeMassUpdate payrollTaxCodeMassUpdate = PayrollTaxCodeMassUpdate::create(_packedTaxCodeDetails);

        try
        {
            ttsBegin;

            payrollTaxCodeMassUpdate.performMassUpdate();

            ttsCommit;

            info("@SYS4005274");

            if (payrollTaxCodeMassUpdate.parmUpdatedTaxCodeRecords() != 0)
            {
                info(strFmt("@SYS4010175", int2str(payrollTaxCodeMassUpdate.parmUpdatedTaxCodeRecords())));
            }

            if ((payrollTaxCodeMassUpdate.parmTotalTaxCodeRecords() - payrollTaxCodeMassUpdate.parmUpdatedTaxCodeRecords()) != 0)
            {
                info(strFmt("@SYS4010176", int2str(payrollTaxCodeMassUpdate.parmTotalTaxCodeRecords() - payrollTaxCodeMassUpdate.parmUpdatedTaxCodeRecords())));
            }
        }
        catch
        {
            exceptionTextFallThrough();
            error("@SYS4005275");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>