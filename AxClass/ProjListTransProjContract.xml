<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjListTransProjContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data Contract class for ProjListTransProj SSRS report
/// </summary>
/// <remarks>
/// This is the Data Contract class for the ProjListTransProj SSRS Report.
/// </remarks>
[DataContractAttribute]
public class ProjListTransProjContract
{
    boolean    projisInvoiced;
    boolean    projChargeable;
    boolean    projnonChargeable;
    date       fromDate;
    date       toDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmProjChargeable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ProjChargeable.
    /// </summary>
    /// <param name="_projChargeable">
    /// The new value of the datacontract parameter ProjChargeable; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter ProjChargeable
    /// </returns>
    [
        DataMemberAttribute('ProjChargeable'),
        SysOperationLabelAttribute(literalstr("@SYS15343")),
        SysOperationHelpTextAttribute(literalstr("@SYS339138"))
    ]
    public boolean parmProjChargeable(boolean _projChargeable = projChargeable)
    {
        projChargeable = _projChargeable;
        return projChargeable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjisInvoiced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ProjisInvoiced.
    /// </summary>
    /// <param name="_projisInvoiced">
    /// The new value of the datacontract parameter ProjisInvoiced; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter ProjisInvoiced
    /// </returns>
    [
        DataMemberAttribute('ProjisInvoiced'),
        SysOperationLabelAttribute(literalstr("@SYS56036")),
        SysOperationHelpTextAttribute(literalstr("@SYS56038"))
    ]
    public boolean parmProjisInvoiced(boolean _projisInvoiced = projisInvoiced)
    {
        projisInvoiced = _projisInvoiced;
        return projisInvoiced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjnonChargeable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ProjnonChargeable.
    /// </summary>
    /// <param name="_projnonChargeable">
    /// The new value of the datacontract parameter ProjnonChargeable; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter ProjnonChargeable
    /// </returns>
    [
        DataMemberAttribute('ProjnonChargeable'),
        SysOperationLabelAttribute(literalstr("@SYS58121")),
        SysOperationHelpTextAttribute(literalstr("@SYS339137"))
    ]
    public boolean parmProjnonChargeable(boolean _projnonChargeable = projnonChargeable)
    {
        projnonChargeable = _projnonChargeable;
        return projnonChargeable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter FromDate.
    /// </summary>
    /// <param name="_fromDate">
    /// The new value of the datacontract parameter FromDate; required.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter FromDate
    /// </returns>
    [
        DataMemberAttribute('FromDate'),
        SysOperationLabelAttribute(literalstr("@SYS35905")),
        SysOperationHelpTextAttribute(literalstr("@SYS90467"))
    ]
    public date parmFromDate(TransDate _fromDate = fromDate)
    {
        if (_fromDate == dateNull())
        {
            fromDate = DateTimeUtil::date(DateTimeUtil::addMonths(DateTimeUtil::getSystemDateTime(), -1));
        }
        else
        {
            fromDate = _fromDate;
        }

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ToDate.
    /// </summary>
    /// <param name="_toDate">
    /// The new value of the datacontract parameter ToDate; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter ToDate
    /// </returns>
    [
        DataMemberAttribute('ToDate'),
        SysOperationLabelAttribute(literalstr("@SYS312576")),
        SysOperationHelpTextAttribute(literalstr("@SYS90468"))
    ]
    public date parmToDate(TransDate _toDate = toDate)
    {
        if (_toDate == dateNull())
        {
            toDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }
        else
        {
            toDate = _toDate;
        }
        
        return toDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>