<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetImpairmentReviewQueryBuilder_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class build the query for impairment review.
/// </summary>
/// <remarks>
/// This class build the query for impairment review.
/// </remarks>
class AssetImpairmentReviewQueryBuilder_JP
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildCarryingAmtConcernQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build the query for carrying amount concern grid.
    /// </summary>
    /// <returns>
    /// The query to be executed.
    /// </returns>
    /// <remarks>
    /// Build the query for carrying amount concern grid.
    /// </remarks>
    public static Query buildCarryingAmtConcernQuery()
    {
        Query                   query;
        QueryBuildDataSource    queryAssetBookDS;
        QueryBuildDataSource    queryAssetTableDS;
        QueryBuildDataSource    queryAssetBookTableDS;
        QueryBuildRange         queryRangeAssetGrpId;
        QueryBuildRange         queryRangeAssetId;
        QueryBuildRange         queryRangeLeaseNote;
        QueryBuildRange         queryRangeTitleHolder;
        QueryBuildRange         queryRangeBookId;
        QueryBuildRange         queryRangePostingLayer;
        QueryBuildRange         queryRangeAssetType;
        QueryBuildLink          queryBookTableLink;
        QueryBuildLink          queryAssetTableLink;

        query = new Query();
        queryAssetBookDS = query.addDataSource(tableNum(AssetBook));

        queryAssetTableDS = queryAssetBookDS.addDataSource(tableNum(AssetTable));
        queryAssetTableLink = queryAssetTableDS.addLink(fieldNum(AssetBook, AssetId), fieldNum(AssetTable, AssetId));
        queryAssetTableDS.joinMode(JoinMode::InnerJoin);
        queryAssetTableDS.relations(true);
        queryAssetTableDS.fetchMode(QueryFetchMode::One2One);

        queryAssetBookTableDS = queryAssetBookDS.addDataSource(tableNum(AssetBookTable));
        queryBookTableLink = queryAssetBookTableDS.addLink(fieldNum(AssetBook, BookId), fieldNum(AssetBookTable, BookId));
        queryAssetBookTableDS.joinMode(JoinMode::InnerJoin);
        queryAssetBookTableDS.relations(true);
        queryAssetBookTableDS.fetchMode(QueryFetchMode::One2One);

        queryRangeAssetGrpId = queryAssetBookDS.addRange(fieldNum(AssetBook, AssetGroup));
        queryRangeAssetId = queryAssetBookDS.addRange(fieldNum(AssetBook, AssetId));
        queryRangeBookId = queryAssetBookDS.addRange(fieldNum(AssetBook, BookId));
        queryRangePostingLayer = queryAssetBookTableDS.addRange(fieldNum(AssetBookTable, CurrentOperationsTax));

        queryRangeLeaseNote = queryAssetTableDS.addRange(fieldNum(AssetTable, Lease));
        queryRangeLeaseNote.value(queryValue(''));
        queryRangeLeaseNote.status(RangeStatus::Hidden);
        queryRangeTitleHolder = queryAssetTableDS.addRange(fieldNum(AssetTable, TitleHolder));
        queryRangeTitleHolder.value(queryValue(''));
        queryRangeTitleHolder.status(RangeStatus::Hidden);
        queryRangeAssetType = queryAssetTableDS.addRange(fieldNum(AssetTable, AssetType));
        queryRangeAssetType.value(SysQuery::valueNot(AssetType::Goodwill));
        queryRangeAssetType.status(RangeStatus::Hidden);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTransAnalysisQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build the query for transaction analysis grid.
    /// </summary>
    /// <returns>
    /// The query to be executed.
    /// </returns>
    /// <remarks>
    /// Build the query for transaction analysis grid.
    /// </remarks>
    public static Query buildTransAnalysisQuery()
    {
        Query                   query;
        QueryBuildDataSource    queryAssetTransDS;
        QueryBuildDataSource    queryAssetTableDS;
        QueryBuildDataSource    queryAssetDepBookTransDS;
        QueryBuildDataSource    queryAssetBookTableDS;
        QueryBuildDataSource    queryReasonTableRefDS;
        QueryBuildLink          queryAssetTableLink;
        QueryBuildLink          queryAssetTransAssetBookTableLink;
        QueryBuildLink          queryAssetTransReasonTableRefLink;
        QueryBuildRange         queryRangeAssetGroup;
        QueryBuildRange         queryRangeAssetId;
        QueryBuildRange         queryRangeBookId;
        QueryBuildRange         queryRangePostingLayer;
        QueryBuildRange         queryRangeTransType;
        QueryBuildRange         queryRangeTransDate;
        QueryBuildRange         queryRangeReasonCode;
        QueryBuildRange         queryRangeLeaseNote;
        QueryBuildRange         queryRangeTitleHolder;
        QueryBuildRange         queryRangeAssetType;

        query = new Query();
        queryAssetTransDS = query.addDataSource(tableNum(AssetTrans));

        // Join AssetTable
        queryAssetTableDS = queryAssetTransDS.addDataSource(tableNum(AssetTable));
        queryAssetTableLink = queryAssetTableDS.addLink(fieldNum(AssetBook, AssetId), fieldNum(AssetTable, AssetId));
        queryAssetTableDS.joinMode(JoinMode::InnerJoin);
        queryAssetTableDS.relations(true);
        queryAssetTableDS.fetchMode(QueryFetchMode::One2One);

        // Join AssetBookTable
        queryAssetBookTableDS = queryAssetTransDS.addDataSource(tableNum(AssetBookTable));
        queryAssetBookTableDS.relations(true);
        queryAssetBookTableDS.joinMode(JoinMode::InnerJoin);
        queryAssetBookTableDS.fetchMode(QueryFetchMode::One2One);
        queryAssetTransAssetBookTableLink = queryAssetBookTableDS.addLink(fieldNum(AssetTrans, BookId), fieldNum(AssetBookTable, BookId));

        // Join ReasonTableRef
        queryReasonTableRefDS = queryAssetTransDS.addDataSource(tableNum(ReasonTableRef));
        queryReasonTableRefDS.relations(true);
        queryReasonTableRefDS.joinMode(JoinMode::InnerJoin);
        queryReasonTableRefDS.fetchMode(QueryFetchMode::One2One);
        queryAssetTransReasonTableRefLink = queryReasonTableRefDS.addLink(fieldNum(AssetTrans, ReasonRefRecId), fieldNum(ReasonTableRef, RecId));

        // Set ranges
        queryRangeAssetGroup = queryAssetTransDS.addRange(fieldNum(AssetTrans, AssetGroup));
        queryRangeAssetId = queryAssetTransDS.addRange(fieldNum(AssetTrans, AssetId));
        queryRangeBookId = queryAssetTransDS.addRange(fieldNum(AssetTrans, BookId));
        queryRangePostingLayer = queryAssetBookTableDS.addRange(fieldNum(AssetBookTable, CurrentOperationsTax));
        queryRangeTransType = queryAssetTransDS.addRange(fieldNum(AssetTrans, TransType));
        queryRangeTransDate = queryAssetTransDS.addRange(fieldNum(AssetTrans, TransDate));
        queryRangeReasonCode = queryReasonTableRefDS.addRange(fieldNum(ReasonTableRef, Reason));

        queryRangeLeaseNote = queryAssetTableDS.addRange(fieldNum(AssetTable, Lease));
        queryRangeLeaseNote.value(queryValue(''));
        queryRangeLeaseNote.status(RangeStatus::Hidden);
        queryRangeTitleHolder = queryAssetTableDS.addRange(fieldNum(AssetTable, TitleHolder));
        queryRangeTitleHolder.value(queryValue(''));
        queryRangeTitleHolder.status(RangeStatus::Hidden);
        queryRangeAssetType = queryAssetTableDS.addRange(fieldNum(AssetTable, AssetType));
        queryRangeAssetType.value(SysQuery::valueNot(AssetType::Goodwill));
        queryRangeAssetType.status(RangeStatus::Hidden);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate values for impairment review and insert values to an <c>AssetImpairmentReviewTestTmp_JP</c> buffer.
    /// </summary>
    /// <param name="_ds">
    /// The <c>AssetImpairmentReviewTestTmp_JP</c> buffer to be filled in.
    /// </param>
    /// <param name="_assetId">
    /// The asset id.
    /// </param>
    /// <param name="_bookId">
    /// The book id.
    /// </param>
    /// <remarks>
    /// Calculate values for impairment review and insert values to an <c>AssetImpairmentReviewTestTmp_JP</c> buffer.
    /// </remarks>
    private static void fillDataSource(AssetImpairmentReviewTestTmp_JP _ds, AssetId _assetId, AssetBookId _bookId)
    {
        AssetImpairmentReviewTestTmp_JP reviewTemp;

        reviewTemp = AssetImpairmentReviewTestTmp_JP::construct(_assetId, _bookId);
        reviewTemp.calculateReview();

        _ds.data(reviewTemp);
        _ds.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryFillCarryingAmountConcern</Name>
				<Source><![CDATA[
    /// <summary>
    /// Query and fill the buffer for carrying amount concern.
    /// </summary>
    /// <param name="_targetDS">
    /// The target buffer.
    /// </param>
    /// <returns>
    /// A container contains the asset id and book id of result.
    /// </returns>
    /// <remarks>
    /// Query and fill the buffer for carrying amount concern.
    /// </remarks>
    public static container queryFillCarryingAmountConcern(AssetImpairmentReviewTestTmp_JP _targetDS = null)
    {
        TableId             assetBookTableId;
        FieldId             assetIdFieldId_AssetBook, bookIdFieldId_AssetBook;
        Common              carryingAmtCrnResult;
        container           carryingAmtCrn = conNull();

        SysQueryRun         queryRun = new SysQueryRun(AssetImpairmentReviewQueryBuilder_JP::buildCarryingAmtConcernQuery());
        Args                args;

        args = new Args();
        args.name(identifierStr(SysQueryForm));
        args.caller(queryRun);

        if (queryRun.prompt())
        {
            assetBookTableId = tableNum(AssetBook);
            assetIdFieldId_AssetBook = fieldNum(AssetBook, AssetId);
            bookIdFieldId_AssetBook = fieldNum(AssetBook, BookId);

            delete_from _targetDS;

            while (queryRun.next())
            {
                carryingAmtCrnResult = queryRun.get(assetBookTableId);
                carryingAmtCrn += [carryingAmtCrnResult.(assetIdFieldId_AssetBook), carryingAmtCrnResult.(bookIdFieldId_AssetBook)];
                AssetImpairmentReviewQueryBuilder_JP::fillDataSource(_targetDS, carryingAmtCrnResult.(assetIdFieldId_AssetBook), carryingAmtCrnResult.(bookIdFieldId_AssetBook));
            }
        }

        return carryingAmtCrn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryFillTransAnalysis</Name>
				<Source><![CDATA[
    /// <summary>
    /// Query and fill the buffer for transaction analysis.
    /// </summary>
    /// <param name="_targetDS">
    /// The target buffer.
    /// </param>
    /// <returns>
    /// A container contains the asset id and book id of result.
    /// </returns>
    /// <remarks>
    /// Query and fill the buffer for transaction analysis.
    /// </remarks>
    public static container queryFillTransAnalysis(AssetImpairmentReviewTestTmp_JP _targetDS = null)
    {
        TableId             assetTransTableId;
        FieldId             assetIdFieldId_AssetTrans, bookIdFieldId_AssetTrans;
        Common              transAnalysisResult;
        AssetId             assetId;
        AssetBookId         bookId;
        container           transAnalysis = conNull();
        Set                 existPair = new Set(Types::Container);

        SysQueryRun         queryRun = new SysQueryRun(AssetImpairmentReviewQueryBuilder_JP::buildTransAnalysisQuery());
        Args                args;

        Query                   query;
        QueryBuildDataSource    queryReasonTableRefDS;
        QueryBuildRange         range;

        args = new Args();
        args.name(identifierStr(SysQueryForm));
        args.caller(queryRun);

        if (queryRun.prompt())
        {
            query = queryRun.query();
            queryReasonTableRefDS = query.dataSourceTable(tableNum(ReasonTableRef));
            range = queryReasonTableRefDS.rangeField(fieldNum(ReasonTableRef, Reason));
            if (strLRTrim(range.value()) == '')
            {
                queryReasonTableRefDS.clearLinks();
                queryReasonTableRefDS.enabled(false);
            }

            assetTransTableId = tableNum(AssetTrans);
            assetIdFieldId_AssetTrans = fieldNum(AssetTrans, AssetId);
            bookIdFieldId_AssetTrans = fieldNum(AssetTrans, BookId);

            delete_from _targetDS;

            while (queryRun.next())
            {
                transAnalysisResult = queryRun.get(assetTransTableId);
                assetId = transAnalysisResult.(assetIdFieldId_AssetTrans);
                bookId = transAnalysisResult.(bookIdFieldId_AssetTrans);
                if (!existPair.in([assetId, bookId]))
                {
                    existPair.add([assetId, bookId]);
                    transAnalysis += [assetId, bookId];
                    AssetImpairmentReviewQueryBuilder_JP::fillDataSource(_targetDS, assetId, bookId);
                }
            }
        }

        return transAnalysis;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>