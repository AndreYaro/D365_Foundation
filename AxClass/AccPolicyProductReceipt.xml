<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccPolicyProductReceipt</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>AccPolicyProductReceipt</c> class has the rules that mandate the accounting internal
///    controls that govern the classification of the financial consequences of the product receipt
///    business events.
/// </summary>
[
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ProductReceipt), BusinessEvent_ProductReceipt::ReceiptOfExpensedProducts)
]
class AccPolicyProductReceipt extends AccountingPolicy
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>determineIsAccountingRequired</Name>
				<Source><![CDATA[
    protected boolean determineIsAccountingRequired()
    {
        return this.isAccountingRequiredForSourceDocLine(sourceDocumentLineItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineIsDistributionRequired</Name>
				<Source><![CDATA[
    protected boolean determineIsDistributionRequired()
    {
        boolean ret;

        if (sourceDocumentLineItem
            && sourceDocumentLineItem.parmSourceDocumentLine().SourceRelationType == tableNum(TaxDocCompLineSourceDocLine))
        {
            ret = false;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the accounting policy.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    ///    The source document line item that is participating in an accounting process.
    /// </param>
    public void initialize(SourceDocumentLineItem _sourceDocumentLineItem)
    {
        super(_sourceDocumentLineItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIsAccountingRequired</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a variable that indicates whether accounting is required.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    ///    The source document line item that is participating in an accounting process.
    /// </param>
    protected void initIsAccountingRequired(SourceDocumentLineItem _sourceDocumentLineItem)
    {
        isAccountingRequired = this.isAccountingRequiredForSourceDocLine(_sourceDocumentLineItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAccountingRequiredForProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether accounting is required for the specified source document line item product.
    /// </summary>
    /// <param name="_product">
    ///    The source document line item product that is participating in an accounting process.
    /// </param>
    /// <returns>
    ///    true is accounting is required for the specified source document line item product; otherwise, false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The method was called for a <c>SourceDocumentLineItem</c> class that does not contain an item or a
    ///    category.
    /// </exception>
    [Replaceable]
    protected boolean isAccountingRequiredForProduct(SourceDocumentLineItemIProduct _product)
    {
        boolean isAccountingRequiredForProduct = true;

        if (_product)
        {
            InventTable inventTable = _product.parmInventTable() as InventTable;

            if (inventTable.RecId)
            {
                isAccountingRequiredForProduct = inventTable.modelGroup().PostPhysicalPurchase;
            }        
            else if (_product.parmCategory().RecId)
            {
                isAccountingRequiredForProduct = EcoResCategory::getProcCategoryRecExpOnGoodsReceipt(_product.parmCategory().RecId, CompanyInfo::current());
            }
            else
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }
        }       
                
        return isAccountingRequiredForProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAccountingRequiredForSourceDocLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether accounting is required for the specified source document line item.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    ///    The source document line item that is participating in an accounting process.
    /// </param>
    /// <returns>
    ///    true is accounting is required for the specified source document line item; otherwise, false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The method was called for a <c>SourceDocumentLineItem</c> class that does not contain an item or a
    ///    category.
    /// </exception>
    protected boolean isAccountingRequiredForSourceDocLine(SourceDocumentLineItem _sourceDocumentLineItem)
    {
        SourceDocumentLineItemIProduct  iProduct;
        SourceDocumentLineItemITax      iTax;
        VendParameters                  vendParameters;
        boolean                         isAccountingRequiredForSourceDocLine;

        if (_sourceDocumentLineItem is SourceDocumentLineItemITax)
        {
            iTax = _sourceDocumentLineItem as SourceDocumentLineItemITax;
        }

        changecompany(_sourceDocumentLineItem.parmLegalEntityDataAreaId())
        {
            vendParameters = VendParameters::find();
        }

        // If a product is used and moving average or standard cost are used for the inventory model, always perform accounting
        if (_sourceDocumentLineItem is SourceDocumentLineItemIProduct)
        {
            iProduct = _sourceDocumentLineItem as SourceDocumentLineItemIProduct;
            // parmInventTable() returns a type of Common
            // cast to specific type
            InventTable inventTable = iProduct.parmInventTable() as InventTable;

            if (inventTable.modelGroup().inventModelType().mustAlwaysBeBookedPhysically())
            {
                isAccountingRequiredForSourceDocLine = true;
            }
        }

        if (!isAccountingRequiredForSourceDocLine)
        {
            if (vendParameters.PostPackingSlip == NoYes::Yes
                && (!iTax || iTax.parmTaxDirection() != TaxDirection::UseTax))
            {
                if (_sourceDocumentLineItem.parmParentSourceDocumentLineItem())
                {
                    isAccountingRequiredForSourceDocLine = this.isAccountingRequiredForSourceDocLine(_sourceDocumentLineItem.parmParentSourceDocumentLineItem());
                }
                else
                {
                    isAccountingRequiredForSourceDocLine = this.isAccountingRequiredForProduct(iProduct);
                }
            }
            else
            {
                isAccountingRequiredForSourceDocLine = false;
            }
        }

        if (sourceDocumentLineItem 
            && sourceDocumentLineItem.parmSourceDocumentLine().SourceRelationType == tableNum(TaxDocCompLineSourceDocLine))
        {
            isAccountingRequiredForSourceDocLine = false;
        }

        return isAccountingRequiredForSourceDocLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingRequired</Name>
				<Source><![CDATA[
    public boolean parmAccountingRequired()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineIsAdjustingDistributionRequired</Name>
				<Source><![CDATA[
    protected boolean determineIsAdjustingDistributionRequired()
    {
        ProductReceiptSourceDocumentLineItem    productReceiptSourceDocumentLineItem;

        isAdjustingDistributionRequired = super();

        productReceiptSourceDocumentLineItem = sourceDocumentLineItem as ProductReceiptSourceDocumentLineItem;

        if (productReceiptSourceDocumentLineItem)
        {
            isAdjustingDistributionRequired = productReceiptSourceDocumentLineItem.parmQuantity() != 0;
        }
        else if (sourceDocumentLineItem
            && sourceDocumentLineItem.parmSourceDocumentLine().SourceRelationType == tableNum(TaxDocumentMeasureSourceDocumentLine)
            && sourceDocumentLineItem.parmParentSourceDocumentLineItem()
            && TaxDeterminAdjustDistributionByProductReceipt_INFlight::instance().isEnabled())
        {
            productReceiptSourceDocumentLineItem = sourceDocumentLineItem.parmParentSourceDocumentLineItem().parmParentSourceDocumentLineItem() as ProductReceiptSourceDocumentLineItem;

            isAdjustingDistributionRequired = isAdjustingDistributionRequired
                && productReceiptSourceDocumentLineItem
                && productReceiptSourceDocumentLineItem.parmSourceDocumentLine().TermQuantity != 0;
        }

        return isAdjustingDistributionRequired;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>