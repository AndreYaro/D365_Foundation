<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PcGenerateBOMLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PcGenerateBOMLine
{
    BOM                         bom;
    InventDim                   inventDim;
    PCAdaptorComponent          adaptorComponent;

    PCTemplateFind              templateFind;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyAdaptorFieldAssignements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies adapter assigned values to the BOM that is being generated.
    /// </summary>
    /// <param name="_adaptorBOMLine">
    /// An instance of the <c>PCAdaptorBOMLine</c> class.
    /// </param>
    /// <remarks>
    /// This method is not to be used when extending a product configuration model.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// An unexpected table ID was encountered.
    /// </exception>
    protected void applyAdaptorFieldAssignements(PCAdaptorBOMLine _adaptorBOMLine)
    {
        MapEnumerator me = _adaptorBOMLine.getFieldAssignments();

        EcoResValue value;

        TableId tableId;
        FieldId fieldId;

        while ( me.moveNext() )
        {
            [tableId, fieldId] = me.currentKey();

            value = me.currentValue();

            switch ( tableId )
            {
                case tableNum(BOM):
                    // special case for date fields, because there is no EcoResDateValue table
                    if ( fieldId == fieldNum(BOM, ToDate) )
                    {
                        bom.ToDate = _adaptorBOMLine.parmToDate();
                    }
                    else if ( fieldId == fieldNum(BOM, FromDate) )
                    {
                        bom.FromDate = _adaptorBOMLine.parmFromDate();
                    }
                    else
                    {
                        this.assignAdaptorFieldToRecord(bom, fieldId, value);
                    }
                break;
                case tableNum(InventDim):

                    this.assignAdaptorFieldToRecord(inventDim, fieldId, value);

                    // update invent dimension
                    inventDim = InventDim::findOrCreate(inventDim);

                    bom.InventDimId = inventDim.InventDimId;
                break;
                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignAdaptorFieldToRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns an adapter field value to the field of a given record buffer.
    /// </summary>
    /// <param name="_record">
    /// A record buffer.
    /// </param>
    /// <param name="_fieldId">
    /// A field ID.
    /// </param>
    /// <param name="_value">
    /// A value.
    /// </param>
    public void assignAdaptorFieldToRecord(Common _record, FieldId _fieldId, EcoResValue _value)
    {
        // this is a work around because super-type records loose their type information when put into a collection.
        EcoResTextValue     textValue   = EcoResTextValue::find(_value.RecId, true);
        EcoResIntValue      intValue    = EcoResIntValue::find(_value.RecId, true);
        EcoResFloatValue    floatValue  = EcoResFloatValue::find(_value.RecId, true);

        if (textValue.RecId != 0)
        {
            _record.(_fieldId) = textValue.TextValue;
            textValue.delete();
        }
        else if (intValue.RecId != 0)
        {
            _record.(_fieldId) = intValue.IntValue;
            intValue.delete();
        }
        else if (floatValue.RecId != 0)
        {
            _record.(_fieldId) = floatValue.FloatValue;
            textValue.delete();
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates the BOM line, which results from a variant configuration of the component instance that
    ///    is related to this template.
    /// </summary>
    /// <param name="_bomId">
    ///    The ID of the BOM to attach to the BOM line.
    /// </param>
    /// <param name="_adaptorBOMLine">
    ///    An adaptor bom line.
    /// </param>
    /// <param name="_supplyInventDim">
    ///    The supply inventory dimensions that should be the model for the created BOM lines.
    /// </param>
    /// <param name="_requirement">
    ///    The type of requirement of the generated line.
    /// </param>
    /// <param name="_isProduction">
    ///    A Boolean value that indicates that the BOM will be marked as production; optional.
    /// </param>
    /// <param name="_isConfigurationReuse">
    ///    A Boolean value that indicates if the BOM line is part of a configuration reuse; optional.
    /// </param>
    /// <param name="_includeInConfiguration">
    ///    A Boolean value that indicates if the BOM line should be included into the configuration; optional.
    /// </param>
    /// <returns>
    ///    The ID of the inventory dimension that was created.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The function was called with incorrect parameters.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The configuration is not valid.
    /// </exception>
    public InventDimId generate(
        BOMId                       _bomId,
        PCAdaptorBOMLine            _adaptorBOMLine,
        InventDim                   _supplyInventDim,
        PCRequirement               _requirement,
        boolean                     _isProduction = false,
        boolean                     _isConfigurationReuse = false,
        boolean                     _includeInConfiguration = true
        )
    {
        InventTable     inventTable;
        TableId         tableBOM = tableNum(BOM);

        bom.clear();
        inventDim.clear();

        //validate the caller arguments
        if (!_bomId  || !_supplyInventDim || (_requirement == PCRequirement::ActivityRequirement))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        //sets the infolog prefix, so the user can trace the error better
        setPrefix(_adaptorBOMLine.getName());

        ttsbegin;

        // setup template finder class
        templateFind.parmTemplateComponent(_adaptorBOMLine.getTemplateComponent());
        templateFind.parmComponentInstance(_adaptorBOMLine.getComponentInstance());
        templateFind.loadContext();

        //setup item
        inventTable = this.setupItem(templateFind.getBindingValueAsString(tableBOM, fieldNum(BOM, ItemId)), _includeInConfiguration);

        // setup product dimensions
        inventDim = this.setupProductDimensions(inventTable, _supplyInventDim, _requirement, _isConfigurationReuse);

        //setup  BOM line
        if (_includeInConfiguration)
        {
            this.setupBOM(_bomId, inventDim, inventTable, _isProduction);

            this.applyAdaptorFieldAssignements(_adaptorBOMLine);

            // perform validation and commit the BOM line
            this.generateBOMLine();
        }

        ttscommit;

        // return the product dimension ID
        return inventDim.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateBOMLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs validation of the BOM line and write it.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    Throws an error if the validation fails.
    /// </exception>
    protected void generateBOMLine()
    {
        if (bom.validateWrite(false))
        {
            bom.write();
        }
        else
        {
            throw error("@SYS40229");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        templateFind = PCTemplateFind::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTemplateFind</Name>
				<Source><![CDATA[
    public PCTemplateFind parmTemplateFind(PCTemplateFind _templateFind = templateFind)
    {
        templateFind = _templateFind;

        return templateFind;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupBOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Setup values on the bill of material line.
    /// </summary>
    /// <param name="_bomId">
    /// A bill of material ID.
    /// </param>
    /// <param name="_inventDim">
    /// A <c>InventDim</c> record.
    /// </param>
    /// <param name="_inventTable">
    /// A <c>InventTable</c> record.
    /// </param>
    /// <param name="_isProduction">
    /// A Boolean value that indicates whether the bill of material should be set to production.
    /// </param>
    protected void setupBOM(
        BOMId       _bomId,
        InventDim   _inventDim,
        InventTable _inventTable,
        boolean     _isProduction
    )
    {
        TableId  tableBOM = tableNum(BOM);

        #define.DateSequenceCode(123)
        #PC

        bom.bomId   =  _bomId;
        bom.ItemId  = _inventTable.ItemId;

        bom.InventDimId         = _inventDim.InventDimId;

        bom.initFromInventTable(_inventTable);

        bom.LineNum             = str2int(templateFind.getBindingValueAsString(tableBOM, fieldNum(BOM, LineNum)));
        if (!bom.LineNum)
        {
            bom.LineNum         = BOM::lastLineNum(_bomId)+1;
        }

        //SubContractor
        bom.VendId              = templateFind.getBindingValueAsString(tableBOM, fieldNum(BOM, VendId));

        //BOM
        bom.Position            = templateFind.getBindingValueAsString(tableBOM, fieldNum(BOM, Position));

        bom.bomType             = any2Enum(str2int(templateFind.getBindingValueAsString(tableBOM, fieldNum(BOM, bomType))));

        bom.Calculation         = this.str2bool(templateFind.getBindingValueAsString(tableBOM, fieldNum(BOM, Calculation)));
        bom.ItemRouteId         = templateFind.getBindingValueAsString(tableBOM, fieldNum(BOM, ItemRouteId));
        bom.ItemBOMId           = templateFind.getBindingValueAsString(tableBOM, fieldNum(BOM, ItemBOMId));

        //Project
        bom.ProjSetSubProdToConsumed = this.str2bool(templateFind.getBindingValueAsString(tableBOM, fieldNum(BOM, ProjSetSubProdToConsumed)));

        //Valid
        bom.FromDate            = str2Date(templateFind.getBindingValueAsString(tableBOM, fieldNum(BOM, FromDate)), #DateSequenceCode);
        bom.ToDate              = str2Date(templateFind.getBindingValueAsString(tableBOM, fieldNum(BOM, ToDate)), #DateSequenceCode);

        //Operation
        bom.OprNum              = str2int(templateFind.getBindingValueAsString(tableBOM, fieldNum(BOM, OprNum)));
        bom.EndSchedConsump     = this.str2bool(templateFind.getBindingValueAsString(tableBOM, fieldNum(BOM, EndSchedConsump)));

        //Consumption
        bom.WrkCtrConsumption   = this.str2bool(templateFind.getBindingValueAsString(tableBOM, fieldNum(BOM, WrkCtrConsumption)));

        //Consumption calculation
        bom.Formula             = any2Enum(str2int(templateFind.getBindingValueAsString(tableBOM, fieldNum(BOM, Formula))));
        bom.bomQty              = str2num(templateFind.getBindingValueAsString(tableBOM, fieldNum(BOM, bomQty)));
        bom.bomQtySerie         = str2num(templateFind.getBindingValueAsString(tableBOM, fieldNum(BOM, bomQtySerie)));
        bom.UnitId              = templateFind.getBindingValueAsString(tableBOM, fieldNum(BOM, UnitId));
        bom.bomConsump          = any2Enum(str2int(templateFind.getBindingValueAsString(tableBOM, fieldNum(BOM, bomConsump))));
        bom.ProdFlushingPrincip = any2Enum(str2int(templateFind.getBindingValueAsString(tableBOM, fieldNum(BOM, ProdFlushingPrincip))));
        bom.BomWHSReleasePolicy = any2Enum(str2Int(templateFind.getBindingValueAsString(tableBOM, fieldNum(BOM, BomWHSReleasePolicy))));
        bom.ScrapConst          = str2num(templateFind.getBindingValueAsString(tableBOM, fieldNum(BOM, ScrapConst)));
        bom.ScrapVar            = str2num(templateFind.getBindingValueAsString(tableBOM, fieldNum(BOM, ScrapVar)));

        //Rounding Up
        bom.ConfigGroupId       = templateFind.getBindingValueAsString(tableBOM, fieldNum(BOM, ConfigGroupId));
        bom.RoundUp             = str2int(templateFind.getBindingValueAsString(tableBOM, fieldNum(BOM, RoundUp)));
        bom.RoundUpQty          = str2num(templateFind.getBindingValueAsString(tableBOM, fieldNum(BOM, RoundUpQty)));

        //Measurement
        bom.Height              = str2num(templateFind.getBindingValueAsString(tableBOM, fieldNum(BOM, Height)));
        bom.Width               = str2num(templateFind.getBindingValueAsString(tableBOM, fieldNum(BOM, Width)));
        bom.Depth               = str2num(templateFind.getBindingValueAsString(tableBOM, fieldNum(BOM, Depth)));
        bom.Density             = str2num(templateFind.getBindingValueAsString(tableBOM, fieldNum(BOM, Density)));
        bom.Constant            = str2num(templateFind.getBindingValueAsString(tableBOM, fieldNum(BOM, Constant)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the values related to the item.
    /// </summary>
    /// <param name="_itemId">
    /// An item ID.
    /// </param>    
    /// <param name="_includeInConfiguration">
    /// A Boolean value that indicates if the BOM line should be included into the configuration; optional.
    /// </param>
    /// <returns>
    /// A <c>InventTable</c> record.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// Throws an error if the item ID does not match an existing item.
    /// </exception>
    protected InventTable setupItem(ItemId _itemId, boolean _includeInConfiguration = true)
    {
        InventTable inventTable = InventTable::find(_itemId);

        if (inventTable.RecId == 0 && _includeInConfiguration)
        {
            throw error(strFmt("@SYS329485", _itemId));
        }

        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupProductDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Setup product dimensions.
    /// </summary>
    /// <param name="_inventTable">
    /// A <c>InventTable</c> record.
    /// </param>
    /// <param name="_supplyInventDim">
    /// A <c>InventDim</c> record.
    /// </param>
    /// <param name="_requirement">
    /// A product configuration requirement.
    /// </param>
    /// <param name="_isConfigurationReuse">
    /// A Boolean value that indicates if the bom line is part of a configuration reuse.
    /// </param>
    /// <returns>
    /// A <c>InventDim</c> record.
    /// </returns>
    protected InventDim setupProductDimensions(
        InventTable     _inventTable,
        InventDim       _supplyInventDim,
        PCRequirement   _requirement,
        boolean        _isConfigurationReuse)
    {
        boolean isConfigurationReuse = this.isConfigurationReuseScenario(_isConfigurationReuse, _requirement);
        
        TableId tableInventDim = tableNum(InventDim);

        // setup tracking dimensions
        Enumerator trackingDims = InventDim::dimTrackingDimFieldList().getEnumerator();
        while (trackingDims.moveNext())
        {
            FieldId trackingDimFieldId = trackingDims.current();
            inventDim.(trackingDimFieldId) = templateFind.getBindingValueAsString(tableInventDim, trackingDimFieldId);
        }

        // setup product dimensions
        Enumerator productDims = InventProductDimension::getEnumeratorForEnabledDimensions();
        while (productDims.moveNext())
        {
            InventProductDimension dimension = productDims.current() as InventProductDimension;

            FieldId fieldId = dimension.parmInventDimFieldId();

            if (isConfigurationReuse)
            {
                inventDim.(fieldId) = _supplyInventDim.(fieldId);
            }
            else if (dimension.isActiveForItem(_inventTable))
            {
                if (dimension is InventProductDimensionConfig)
                {
                    inventDim.ConfigId = this.getConfigIdFromRequirementType(_requirement, _supplyInventDim);
                }
                else
                {
                    inventDim.(fieldId) = templateFind.getBindingValueAsString(tableInventDim, fieldId);
                }
            }
        }

        // setup storage dimensions
        Enumerator storageDims = InventDim::dimStorageDimFieldList().getEnumerator();
        while (storageDims.moveNext())
        {
            FieldId storageDimFieldId = storageDims.current();

            if (storageDimFieldId == fieldNum(InventDim, InventSiteId))
            {
                inventDim.InventSiteId = _supplyInventDim.InventSiteId;
            }
            else
            {
                inventDim.(storageDimFieldId) = templateFind.getBindingValueAsString(tableInventDim, storageDimFieldId);
            }
        }

        inventDim.initFromInventLocation(inventDim.inventLocation());
        inventDim = InventDim::findOrCreate(inventDim);
        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isConfigurationReuseScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if this is a configuration reuse scenario.
    /// </summary>
    /// <param name="_requirement">
    /// A product configuration requirement.
    /// </param>
    /// <param name="_isConfigurationReuse">
    /// A boolean value that indicates if the bom line is part of a configuration reuse.
    /// </param>
    /// <returns>
    /// true if this is a configuration reuse scenario; otherwise, false.
    /// </returns>
    [Hookable]
    protected boolean isConfigurationReuseScenario(boolean _isConfigurationReuse, PCRequirement _requirement)
    {
        return _isConfigurationReuse && _requirement == PCRequirement::SubComponent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConfigIdFromRequirementType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>InventDim</c> ConfigId based on the requirement type.
    /// </summary>
    /// <param name="_requirement">
    /// A product configuration requirement.
    /// </param>
    /// <param name="_supplyInventDim">
    /// A <c>InventDim</c> record.
    /// </param>
    /// <returns>
    /// the <c>InventDim</c> ConfigId.
    /// </returns>
    [Hookable]
    protected EcoResItemConfigurationName getConfigIdFromRequirementType(
        PCRequirement   _requirement,
        InventDim       _supplyInventDim
        )
    {
        if (_requirement == PCRequirement::ProductRequirement)
        {
            //the old fashioned way
            return templateFind.getBindingValueAsString(tableNum(InventDim), fieldNum(InventDim, ConfigId));
        }
        else //it's a sub-component
        {
            //the bom line on the parent gets the config ID of the parent.
            return _supplyInventDim.ConfigId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>str2bool</Name>
				<Source><![CDATA[
    protected NoYes str2bool(str boolValue)
    {
        #PC

        if (boolValue == #True)
        {
            return NoYes::Yes;
        }
        else
        {
            return NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCGenerateBOMLine construct()
    {
        return new PCGenerateBOMLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdaptorComponent</Name>
				<Source><![CDATA[
    public PCAdaptorComponent parmAdaptorComponent(PCAdaptorComponent _adaptorComponent = adaptorComponent)
    {
        adaptorComponent = _adaptorComponent;

        templateFind.parmAdaptorComponent(_adaptorComponent);

        return adaptorComponent;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>