<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollPositionDetails_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PayrollPositionDetails_Extension</c> is an extension of the <c>PayrollPositionDetails</c> table and contains
/// table methods and event subscriber methods.
/// </summary>
[ExtensionOf(tableStr(PayrollPositionDetails))]
public final class PayrollPositionDetails_Extension
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canUpdateOrDeletePositionDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the <c>PayrollPositionDetails</c> table record can be updated or deleted based on the existence of records in the <c>PayrollPayStatement</c>
    /// table and in the <c>PayrollEarningStatement</c> table.
    /// </summary>
    /// <param name="_validFrom">
    /// The value of the <c>ValidFrom</c> field of the <c>PayrollPositionDetails</c> table.
    /// </param>
    /// <param name="_validTo">
    /// The value of the <c>ValidTo</c> field of the <c>PayrollPositionDetails</c> table.
    /// </param>
    /// <returns>
    /// true, if the record can be updated or deleted; otherwise, false.
    /// </returns>
    public boolean canUpdateOrDeletePositionDetail(ValidFromDate _validFrom,
                                                    ValidToDate _validTo)

    {
        PayrollPositionDetails  originalPositionDetails;

        boolean                 canUpdateOrDelete = true;

        DialogButton            dialogResult;

        originalPositionDetails = this.orig();

        if (PayrollPayStatement::existByPayCycleLegalEntityPosition(originalPositionDetails.PayCycle,
                                                                    originalPositionDetails.PaidByLegalEntity,
                                                                    this.Position,
                                                                    _validFrom,
                                                                    _validTo))
        {
            canUpdateOrDelete = false;
            warning("@SYS4000689");
        }
        else
        {
            if (PayrollEarningStatementLine::existByPayCycleLegalEntityPosition(originalPositionDetails.PayCycle,
                                                                                originalPositionDetails.PaidByLegalEntity,
                                                                                this.Position,
                                                                                _validFrom,
                                                                                _validTo))
            {
                dialogResult = Box::okCancel("@Payroll:ThereAreEarningsStatementLinesForTheExistingPayCycleAndLegal", DialogButton::No);

                if (dialogResult  == DialogButton::Ok)
                {
                    PayrollEarningStatementLine::deleteByPayCycleLegalEntityPosition(originalPositionDetails.PayCycle,
                                                                                        originalPositionDetails.PaidByLegalEntity,
                                                                                        this.Position,
                                                                                        _validFrom,
                                                                                        _validTo);
                }
                else
                {
                    canUpdateOrDelete = false;
                }
            }
        }

        return canUpdateOrDelete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setScheduleEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the enabling of the schedule field bound control.
    /// </summary>
    /// <remarks>
    /// Sets the schedule field bound control enabled if paid by legal entity is set; otherwise not enabled.
    /// </remarks>
    public void setScheduleEnabled()
    {
        FormDataObject scheduleField;

        if (FormDataUtil::getFormDataSource(this))
        {
            scheduleField = FormDataUtil::getFormDataSource(this).object(fieldNum(PayrollPositionDetails, Schedule)) as FormDataObject;
            if (this.PaidByLegalEntity)
            {
                scheduleField.allowEdit(true);
            }
            else
            {
                //only will happen when the record is new, as PaidByLegalEntity is a required field.
                this.Schedule = '';
                this.ScheduleDataAreaId = '';
                scheduleField.allowEdit(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateGenerateEarningsFromSchedule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the schedule and earning code is assigned if generate earning from schedule is true.
    /// </summary>
    /// <returns>
    /// true if the schedule and earning code is assigned; otherwise, false.
    /// </returns>
    private boolean validateGenerateEarningsFromSchedule()
    {
        boolean isProperlySetup = true;

        if (this.GenerateEarningsFromSchedule)
        {
            if (!this.Schedule)
            {
                isProperlySetup = checkFailed("@Payroll:BecauseTheGenerateEarningsFromScheduleFieldIsSelectedTheSche");
            }

            if (!this.DefaultEarningCode)
            {
                isProperlySetup = checkFailed("@Payroll:BecauseTheGenerateEarningsFromScheduleFieldIsSelectedTheEarn");
            }
        }

        return isProperlySetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateScheduleData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the schedule is selected then <c>ScheduleDataAreaId</c> and <c>PaidByLegalEntity</c> matches.
    /// Also checks if the schedule exists in <c>ScheduleDataAreaId</c> LE.
    /// </summary>
    /// <returns>
    /// true if the <c>ScheduleDataAreaId</c> and <c>PaidByLegalEntity</c> matches and schedule exists in <c>ScheduleDataAreaId</c> LE; otherwise, false.
    /// </returns>
    private boolean validateScheduleData()
    {
        boolean isProperlySetup = true;
        SelectableDataArea paidByLEDataArea;

        if (this.Schedule)
        {
            paidByLEDataArea = CompanyInfo::getDataArea(this.PaidByLegalEntity);

            if (paidByLEDataArea != this.ScheduleDataAreaId)
            {
                isProperlySetup = checkFailed("@Payroll:TheCalendarInTheScheduleFieldWasRemovedBecauseYouChangedTheL");
            }
            else if (this.ScheduleDataAreaId)
            {
                changecompany(this.ScheduleDataAreaId)
                {
                    if (!WorkCalendarTable::exist(this.Schedule))
                    {
                        isProperlySetup = checkFailed("@Payroll:TheCalendarInTheScheduleFieldWasRemovedBecauseYouChangedTheL");
                    }
                }
            }
        }

        return isProperlySetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>PayrollPositionDetails_onValidatingWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add additional validation for payroll fields on <c>PayrollPositionDetail</c>.
    /// </summary>
    /// <param name="_sender">The instance of the <c>PayrollPositionDetail</c></param>
    /// <param name="_e">The instance of the <c>DataEventArgs</c>.</param>
    [DataEventHandler(tableStr(PayrollPositionDetails), DataEventType::ValidatingWrite)]
    public static void PayrollPositionDetails_onValidatingWrite(Common _sender, DataEventArgs _e)
    {
        PayrollPositionDetails payrollEarningCode = _sender as PayrollPositionDetails;
        ValidateEventArgs validateEventArgs = _e as ValidateEventArgs;

        boolean isValid = validateEventArgs.parmValidateResult();
        boolean isPayrollConfigKeyEnabled = isConfigurationkeyEnabled(configurationKeyNum(PayrollAdministration));                

        
        if (isValid && isPayrollConfigKeyEnabled && payrollEarningCode.AutoGenerateSalary && !payrollEarningCode.DefaultEarningCode)
        {
            isValid = checkFailed("@Payroll:ADefaultEarningCodeIsRequiredToGenerateSalaryEnterAValidEarn");
        }

        if (isValid && isPayrollConfigKeyEnabled)
        {
            isValid = payrollEarningCode.validateGenerateEarningsFromSchedule();
        }

        if (isValid)
        {
            isValid = payrollEarningCode.validateScheduleData();
        }

        validateEventArgs.parmValidateResult(isValid);
    }

]]></Source>
			</Method>
			<Method>
				<Name>countWorkerPositionSchedule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the schedule exists against the <c>HcmEmployment</c>.
    /// </summary>
    /// <param name="_workerRecId">
    /// The RecId of <c>HcmWorker</c> table record.
    /// </param>
    /// <returns>
    /// A count of the records where schedule is defined.
    /// </returns>
    public static int countWorkerPositionSchedule(HcmWorkerRecId _workerRecId)
    {
        HcmPosition                 hcmPostion;
        HcmPositionWorkerAssignment hcmPositionWorkerAssignment;
        PayrollPositionDetails      payrollPositionDetails;

        select  count(RecId) from payrollPositionDetails
            where payrollPositionDetails.Schedule != ''
            exists join hcmPostion
                where payrollPositionDetails.Position == hcmPostion.RecId
            exists join hcmPositionWorkerAssignment
                where hcmPositionWorkerAssignment.Position == hcmPostion.RecId
                    && hcmPositionWorkerAssignment.Worker == _workerRecId;

        return int642int(payrollPositionDetails.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>PayrollPositionDetails_onValidatingField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add additional fields to validate on <c>PayrollPositionDetail</c>.
    /// </summary>
    /// <param name="_sender">The instance of the <c>PayrollPositionDetail</c></param>
    /// <param name="_e">The instance of the <c>DataEventArgs</c>.</param>
    [DataEventHandler(tableStr(PayrollPositionDetails), DataEventType::ValidatingField)]
    public static void PayrollPositionDetails_onValidatingField(Common _sender, DataEventArgs _e)
    {
        PayrollPositionDetails payrollEarningCode = _sender as PayrollPositionDetails;
        ValidateFieldEventArgs validateFieldEventArgs = _e as ValidateFieldEventArgs;

        boolean isValid = validateFieldEventArgs.parmValidateResult();

        if (isValid)
        {
            switch (validateFieldEventArgs.parmFieldId())
            {
                case fieldNum(PayrollPositionDetails, PayCycle):
                if (payrollEarningCode.PayCycle != payrollEarningCode.orig().PayCycle)
                    {
                        isValid = payrollEarningCode.canUpdateOrDeletePositionDetail(payrollEarningCode.ValidFrom, payrollEarningCode.ValidTo);
                    }
                    break;

                case fieldNum(PayrollPositionDetails, PaidByLegalEntity):
                if (payrollEarningCode.PaidByLegalEntity != payrollEarningCode.orig().PaidByLegalEntity)
                    {
                        isValid = payrollEarningCode.canUpdateOrDeletePositionDetail(payrollEarningCode.ValidFrom, payrollEarningCode.ValidTo);
                    }
                    break;

                case fieldNum(PayrollPositionDetails, Schedule):
                if (payrollEarningCode.PaidByLegalEntity && payrollEarningCode.Schedule)
                    {
                        changecompany(CompanyInfo::getDataArea(payrollEarningCode.PaidByLegalEntity))
                        {
                            isValid  = WorkCalendarTable::checkExist(payrollEarningCode.Schedule);
                        }
                    }
                    break;
            }
        }

        validateFieldEventArgs.parmValidateResult(isValid);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>