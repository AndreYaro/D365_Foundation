<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SrsReportProviderQueryBuilderArgsHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SrsReportProviderQueryBuilderArgsHelper</c> class is needed for prepare data to create <c>SrsReportProviderQueryBuilderArgs</c> class
/// by <c>SrsReportDataContract</c> object.
/// </summary>
public class SrsReportProviderQueryBuilderArgsHelper
{
    #SRSFramework

    private SrsReportDataContract reportDataContract;
    private SrsReportProviderQueryBuilderArgs queryBuilderArgs;
    private SrsReportProviderMetadata providerMetadata;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initProviderMetadata</Name>
				<Source><![CDATA[
    private void initProviderMetadata()
    {
        providerMetadata = SrsReportProviderMetadata::constructWithName(this.parmReportDataContract().parmRdpName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParamMapArgs</Name>
				<Source><![CDATA[
    private Map getParamMapArgs()
    {
        Map mapArgs = new Map(Types::String, Types::String);
        Map mapParameters = providerMetadata.getParameters();

        if (mapParameters)
        {
            Object contractObject = this.parmReportDataContract().parmRdpContract();
            MapEnumerator paramEnumerator = mapParameters.getEnumerator();
            SysDictClass dictClassRDP = new SysDictClass(classIdGet(contractObject));
            
            while (paramEnumerator.moveNext())
            {
                SRSReportParameter reportParam = paramEnumerator.currentValue();

                if (dictClassRDP.hasObjectMethod(reportParam.rdpContractMethod()))
                {
                    reportParam.setValueTyped(dictClassRDP.callObject(reportParam.rdpContractMethod(), contractObject));

                    mapArgs.insert(reportParam.name(),
                        SrsReportRunUtil::convertAnyType2ReportStr(reportParam));
                }
            }
        }

        if (reportDataContract.parmReportExecutionInfo())
        {
            mapArgs.insert(#RdpPreProcessedIdParameter, int642Str(reportDataContract.parmReportExecutionInfo().parmRdpPreProcessedId()));
        }

        return mapArgs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDynamicQuery</Name>
				<Source><![CDATA[
    private Query getDynamicQuery()
    {
        Query ret;

        if (this.parmReportDataContract() && this.parmReportDataContract().parmQueryContracts())
        {
            Map mapQuery = this.parmReportDataContract().parmQueryContracts();
            MapEnumerator me = mapQuery.getEnumerator();

            if (me.moveNext() && me.currentValue() as Query)
            {
                ret = me.currentValue();
            }
        }
        else if (providerMetadata.getQueryName())
        {
            ret = new Query(providerMetadata.getQueryName());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportDataContract</Name>
				<Source><![CDATA[
    private SrsReportDataContract parmReportDataContract(SrsReportDataContract _reportDataContract = reportDataContract)
    {
        reportDataContract = _reportDataContract;

        return reportDataContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createArgs</Name>
				<Source><![CDATA[
    private void createArgs()
    {
        this.initProviderMetadata();
        
        queryBuilderArgs = new SrsReportProviderQueryBuilderArgs();

        queryBuilderArgs.reportProviderName(this.parmReportDataContract().parmRdpName());
        queryBuilderArgs.reportProviderArgsXml(this.getParamMapArgs().xml());
        queryBuilderArgs.dynamicFilter(this.getDynamicQuery());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getArgs</Name>
				<Source><![CDATA[
    public SrsReportProviderQueryBuilderArgs getArgs()
    {
        return queryBuilderArgs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>SrsReportProviderQueryBuilderArgs</c> by <c>SrsReportDataContract</c> object.
    /// </summary>
    /// <param name = "_reportDataContract"> <c>SrsReportDataContract</c> object of report.</param>
    /// <returns>
    /// <c>SrsReportProviderQueryBuilderArgsHelper</c> object, which is result of conversion.
    /// </returns>
    public static SrsReportProviderQueryBuilderArgsHelper newParameters(SrsReportDataContract _reportDataContract)
    {
        SrsReportProviderQueryBuilderArgsHelper argsHelper = new SrsReportProviderQueryBuilderArgsHelper();

        argsHelper.parmReportDataContract(_reportDataContract);
        argsHelper.createArgs();

        return argsHelper;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>