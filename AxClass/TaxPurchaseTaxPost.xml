<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxPurchaseTaxPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is the main class for posting purchase tax transactions during sales tax payment.
/// </summary>
class TaxPurchaseTaxPost
{
    AmountMST               purchaseTaxBasisAmount;
    LedgerVoucher           ledgerVoucher;
    TaxPurchaseTaxTable     taxPurchaseTaxTable;
    TransDate               transDate;
    TaxPurchaseTaxTrans     tmptaxPurchaseTaxTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(LedgerVoucher  _ledgerVoucher,
             TransDate      _transDate)
    {
        #ISOCountryRegionCodes
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoAT, GlobalizationConstants::FeatureReferenceAT00003] ],
            funcName()
        );

        ledgerVoucher       = _ledgerVoucher;
        taxPurchaseTaxTable = TaxPurchaseTaxTable::find();
        transDate           = _transDate;
        tmptaxPurchaseTaxTrans.setTmp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postPurchaseTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts purchase tax transactions.
    /// </summary>
    public void postPurchaseTax()
    {
        TaxPurchaseTaxTrans         taxPurchaseTaxTrans;
        LedgerVoucherTransObject    ledgerVoucherTransObject;
        AmountMST                   purchaseTaxAmount;
        TransactionTxt              transactionTxt;
        CurrencyExchangeHelper      exchangeRateHelper;

        exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(
            Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
            transDate);

        if (purchaseTaxBasisAmount)
        {
            transactionTxt      = TransactionTxt::construct();
            transactionTxt.setType(LedgerTransTxt::TaxPurchaseTax);
            transactionTxt.setKey1("@SYS23178");
            boolean splitInterval;
            Voucher taxPurchaseTaxTransVoucher;
            TransDate lastTransDate = ledgerVoucher.lastTransDate();
            Amount startAmount;
            Amount baseAmount, taxLimitMin;
            PurchaseDutyPercent percent;
            Counter sign;
            boolean wholeAmount = true;
            AmountMST taxPurchaseDutyBaseAmount = -purchaseTaxBasisAmount;
            Map existedBaseAmountPercentMap;

            if (TaxPurchaseTaxValue::numOfIntervals(taxPurchaseTaxTable.RecId, lastTransDate) >= 1 )
            {
                wholeAmount = false;
                splitInterval = true;
                taxPurchaseTaxTransVoucher = ledgerVoucher.lastVoucher();
                sign = taxPurchaseDutyBaseAmount < 0 ? -1 : 1;
                existedBaseAmountPercentMap = new Map(Types::Real, Types::Real);
                int intYear = year(lastTransDate);
                TransDate fromDate = mkDate(1, 1, intYear);
                TransDate toDate = mkDate(31, 12, intYear);

                while select sum(BaseAmountMST), Percent from taxPurchaseTaxTrans group by Percent
                where taxPurchaseTaxTrans.TransDate >= fromDate
                    && taxPurchaseTaxTrans.TransDate <= toDate
                    && taxPurchaseTaxTrans.TaxCode == ''
                    && taxPurchaseTaxTrans.TaxPeriod == tmptaxPurchaseTaxTrans.TaxPeriod
                {
                    existedBaseAmountPercentMap.insert(taxPurchaseTaxTrans.Percent, abs(taxPurchaseTaxTrans.BaseAmountMST));
                }
            }
                
            while (splitInterval)
            {
                [baseAmount, percent] = TaxPurchaseTaxValue::limitAmountMaxWithTaxPurchaseTaxTable(taxPurchaseTaxTable,
                    lastTransDate,
                    startAmount);

                [startAmount, splitInterval] = TaxPurchaseTaxPost::startAmountAndSplitIntervalWithTaxPurchaseTaxTrans(existedBaseAmountPercentMap, startAmount, lastTransDate, taxPurchaseTaxTable,
                    taxPurchaseTaxTrans, taxPurchaseDutyBaseAmount, sign, splitInterval);

                if (percent != 0 && taxPurchaseTaxTrans.TaxAmountMST)
                {
                    taxPurchaseTaxTrans.Percent = Percent;
                    taxPurchaseTaxTrans.Voucher = taxPurchaseTaxTransVoucher;
                    taxPurchaseTaxTrans.TransDate = lastTransDate;
                    taxPurchaseTaxTrans.TransTxt = transactionTxt.txt();
                    taxPurchaseTaxTrans.TaxPurchaseTaxId = taxPurchaseTaxTable.TaxPurchaseTaxId;
                    taxPurchaseTaxTrans.TaxPeriod = tmptaxPurchaseTaxTrans.TaxPeriod;
                    taxPurchaseTaxTrans.insert();

                    ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                            ledgerVoucher.findLedgerVoucherObject(),
                            LedgerPostingType::Tax,
                            LedgerDimensionFacade::serviceCreateLedgerDimension(taxPurchaseTaxTable.TaxLedgerDimension),
                            CompanyInfoHelper::standardCurrency(),
                            taxPurchaseTaxTrans.TaxAmountMST,
                            exchangeRateHelper);
                    ledgerVoucherTransObject.parmTransTxt(transactionTxt.txt());
                    ledgerVoucherTransObject.parmSkipDimensionValidation(true);
                    ledgerVoucher.addTrans(ledgerVoucherTransObject);

                    ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                            ledgerVoucher.findLedgerVoucherObject(),
                            LedgerPostingType::Tax,
                            LedgerDimensionFacade::serviceCreateLedgerDimension(taxPurchaseTaxTable.ExpenseLedgerDimension),
                            CompanyInfoHelper::standardCurrency(),
                            -taxPurchaseTaxTrans.TaxAmountMST,
                            exchangeRateHelper);
                    ledgerVoucherTransObject.parmTransTxt(transactionTxt.txt());
                    ledgerVoucherTransObject.parmSkipDimensionValidation(true);
                    ledgerVoucher.addTrans(ledgerVoucherTransObject);
                }
            }
            
            if (wholeAmount)
            {
                while select tmptaxPurchaseTaxTrans
                {
                    tmptaxPurchaseTaxTrans.BaseAmountMST = -tmptaxPurchaseTaxTrans.BaseAmountMST;
                    
                    purchaseTaxAmount = TaxPurchaseTaxValue::purchaseTaxAmountMST(transDate,tmptaxPurchaseTaxTrans.BaseAmountMST);                  
                    
                    if (purchaseTaxAmount)
                    {
                        taxPurchaseTaxTrans.TaxAmountMST  = purchaseTaxAmount;
                        taxPurchaseTaxTrans.BaseAmountMST = tmptaxPurchaseTaxTrans.BaseAmountMST;
                        taxPurchaseTaxTrans.Voucher       = ledgerVoucher.lastVoucher();
                        taxPurchaseTaxTrans.TransDate     = ledgerVoucher.lastTransDate();
                        taxPurchaseTaxTrans.TransTxt      = transactionTxt.txt();
                        taxPurchaseTaxTrans.TaxPurchaseTaxId = taxPurchaseTaxTable.TaxPurchaseTaxId;
                        taxPurchaseTaxTrans.TaxCode       = tmptaxPurchaseTaxTrans.TaxCode;
                        taxPurchaseTaxTrans.TaxPeriod     = tmptaxPurchaseTaxTrans.TaxPeriod;
                        taxPurchaseTaxTrans.Percent       = TaxPurchaseTaxValue::findByTaxDate(taxPurchaseTaxTrans.TransDate).Percent;
                        taxPurchaseTaxTrans.insert();
                        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                                       ledgerVoucher.findLedgerVoucherObject(),
                                                       LedgerPostingType::Tax,
                                                       LedgerDimensionFacade::serviceCreateLedgerDimension(taxPurchaseTaxTable.TaxLedgerDimension),
                                                       CompanyInfoHelper::standardCurrency(),
                                                       purchaseTaxAmount,
                                                       exchangeRateHelper);
                        ledgerVoucherTransObject.parmTransTxt(transactionTxt.txt());
                        ledgerVoucherTransObject.parmSkipDimensionValidation(true);
                        ledgerVoucher.addTrans(ledgerVoucherTransObject);

                        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                                       ledgerVoucher.findLedgerVoucherObject(),
                                                       LedgerPostingType::Tax,
                                                       LedgerDimensionFacade::serviceCreateLedgerDimension(taxPurchaseTaxTable.ExpenseLedgerDimension),
                                                       CompanyInfoHelper::standardCurrency(),
                                                       -purchaseTaxAmount,
                                                       exchangeRateHelper);
                        ledgerVoucherTransObject.parmTransTxt(transactionTxt.txt());
                        ledgerVoucherTransObject.parmSkipDimensionValidation(true);
                        ledgerVoucher.addTrans(ledgerVoucherTransObject);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumPurchaseTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Summaries the purchase tax base amount of purchase tax transactions.
    /// </summary>
    /// <param name = "_taxTrans">
    /// Tax transactions table record.
	/// </param>
	public void sumPurchaseTax(TaxTrans _taxTrans)
    {
        if (_taxTrans.TaxDirection == TaxDirection::IncomingTax ||
            _taxTrans.TaxDirection == TaxDirection::UseTax)
        {
            if (TaxTable::find(_taxTrans.TaxCode).TaxPurchaseTax)
            {
                select forupdate tmptaxPurchaseTaxTrans
                where tmptaxPurchaseTaxTrans.TaxCode == _taxTrans.TaxCode;
                if (!tmptaxPurchaseTaxTrans)
                {
                    tmptaxPurchaseTaxTrans.TaxCode       = _taxTrans.TaxCode;
                    tmptaxPurchaseTaxTrans.TaxPeriod     = _taxTrans.TaxPeriod;
                    tmptaxPurchaseTaxTrans.BaseAmountMST = _taxTrans.TaxAmount;
                    tmptaxPurchaseTaxTrans.insert();
                }
                else
                {
                    tmptaxPurchaseTaxTrans.BaseAmountMST += _taxTrans.TaxAmount;
                    tmptaxPurchaseTaxTrans.update();
                }

                purchaseTaxBasisAmount += _taxTrans.TaxAmount;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>startAmountAndSplitIntervalWithTaxPurchaseTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets start amount and splitInterval.
    /// </summary>
    /// <returns>The start amount and splitInterval.</returns>
    public static container startAmountAndSplitIntervalWithTaxPurchaseTaxTrans(Map existedBaseAmountPercentMap, Amount startAmount, TransDate lastTransDate, TaxPurchaseTaxTable taxPurchaseTaxTable, 
        TaxPurchaseTaxTrans taxPurchaseTaxTrans, AmountMST taxPurchaseDutyBaseAmount, Counter sign, boolean splitInterval)
    {
        boolean findNextInterval;
        PurchaseDutyPercent percent;
        Amount existedBaseAmount, taxLimitMinLoc, taxLimitMin, baseAmount;
        AmountMST intervalStartAmount;
        taxPurchaseDutyBaseAmount = abs(taxPurchaseDutyBaseAmount) - abs(taxPurchaseTaxTrans.BaseAmountMST);

        [baseAmount, percent, taxLimitMin] = TaxPurchaseTaxValue::limitAmountMaxAndMinWithTaxPurchaseTaxTable(taxPurchaseTaxTable,
                        lastTransDate,
                        startAmount);

        taxPurchaseTaxTrans.BaseAmountMST = 0;

        if (Percent)
        {
            intervalStartAmount = baseAmount;
        }
        if (existedBaseAmountPercentMap.exists(Percent))
        {
            if (existedBaseAmountPercentMap.lookup(Percent) >= (baseAmount - taxLimitMin) && baseAmount != 0)
            {
                findNextInterval = true;
                startAmount = baseAmount;
            }
            else
            {
                if (baseAmount != 0)
                {
                    existedBaseAmount = existedBaseAmountPercentMap.lookup(Percent);
                    baseAmount -= existedBaseAmount;
                                
                }
            }
        }
        if (!findNextInterval)
        {
            if (baseAmount != 0 && Percent != 0 && (baseAmount - taxLimitMin) <= abs(taxPurchaseDutyBaseAmount))
            {
                baseAmount -= taxLimitMin;
                taxLimitMinLoc = taxLimitMin;
            }
            if (Percent != 0 && (baseAmount == 0 || baseAmount - taxLimitMin > abs(taxPurchaseDutyBaseAmount)))
            {
                baseAmount = abs(taxPurchaseDutyBaseAmount);
                splitInterval = false;
            }
            if (baseAmount != 0)
            {
                if (Percent)
                {
                    taxPurchaseTaxTrans.BaseAmountMST = baseAmount * Sign;
                }
                else
                {
                    taxPurchaseTaxTrans.BaseAmountMST = (baseAmount - intervalStartAmount) * sign;
                }
                taxPurchaseTaxTrans.TaxAmountMST = CurrencyExchangeHelper::amount(taxPurchaseTaxTrans.BaseAmountMST * percent / 100);
                startAmount = baseAmount + existedBaseAmount + taxLimitMinLoc;
            }
            else
            {
                splitInterval = false;
            }
        }

        return [startAmount, splitInterval];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>