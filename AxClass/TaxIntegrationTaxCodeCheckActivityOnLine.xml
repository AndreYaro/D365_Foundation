<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationTaxCodeCheckActivityOnLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationTaxCodeCheckActivityOnLine</c> class checks tax existence for lines sent to tax service,
/// and raise warning or error according to the general ledger parameter "Check sales tax code".
/// </summary>
public class TaxIntegrationTaxCodeCheckActivityOnLine
    extends TaxIntegrationAbstractActivityOnLine
{
    #ISOCountryRegionCodes
    public const str LoggerName = 'Tax Integration - Tax Code Check';
    private boolean isTaxIntegrationCheckTaxCodeFlightEnabled;
    private boolean isCheckTaxGroupsFlightEnabled;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>TaxIntegrationTaxCodeCheckActivityOnLine</c>.
    /// </summary>
    private final void new()
    {
        super(LoggerName);
        isTaxIntegrationCheckTaxCodeFlightEnabled = TaxIntegrationCheckTaxCode_ITFlight::instance().isEnabled();
        isCheckTaxGroupsFlightEnabled = TaxPostponeCheckTaxGroupAfterTaxCalculation_ITFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>TaxIntegrationTaxCodeCheckActivityOnLine</c>.
    /// </summary>
    /// <returns>The new <c>TaxIntegrationTaxCodeCheckActivityOnLine</c>.</returns>
    public final static TaxIntegrationTaxCodeCheckActivityOnLine construct()
    {
        return new TaxIntegrationTaxCodeCheckActivityOnLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>actInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Conducts the activity on the line or charge.
    /// </summary>
    /// <param name = "_line">The line or charge.</param>
    protected void actInternal(TaxIntegrationLineObject _line)
    {
        if (isCheckTaxGroupsFlightEnabled)
        {
            this.checkTaxGroups_IT(_line);
        }

        if (this.shouldCheckTaxCode(_line)
            && _line.shouldSendToTaxService()
            && !_line.getTaxLineCount())
        {
            boolean isCheckIntersectionForSales_IT;

            if (isCheckTaxGroupsFlightEnabled)
            {
                isCheckIntersectionForSales_IT = TaxIntegrationCheckTaxCode_ITFlight::instance().isEnabled()
                    && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT])
                    && _line.getAncestorDocument().getBusinessProcess() == TaxIntegrationBusinessProcess::Sales;
            }

            CheckTaxGroups checkIntersection = isCheckIntersectionForSales_IT ? CheckTaxGroups::Error : _line.getAncestorDocument().getTaxIntegrationSetting().getCheckTaxGroupsIntersection();

            switch (checkIntersection)
            {
                case CheckTaxGroups::Warning :
                    warning(strFmt("@TaxIntegration:CheckSalesTaxCode", _line.getTaxGroup(), _line.getTaxItemGroup()));
                    break;

                case CheckTaxGroups::Error :
                    throw error(strFmt("@TaxIntegration:CheckSalesTaxCode", _line.getTaxGroup(), _line.getTaxItemGroup()));

                default :
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCheckTaxCode</Name>
				<Source><![CDATA[
    private boolean shouldCheckTaxCode(TaxIntegrationLineObject _line)
    {
        boolean shouldCheck = true;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT])
            && !isCheckTaxGroupsFlightEnabled)
        {
            shouldCheck = this.shouldCheckTaxCode_IT(_line);
        }
        else if (TaxIntegrationTaxGroupIntersectionValidateFlight::instance().isEnabled())
        {
            shouldCheck = _line.getTaxGroup() && _line.getTaxItemGroup();
        }

        return shouldCheck;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCheckTaxCode_IT</Name>
				<Source><![CDATA[
    private boolean shouldCheckTaxCode_IT(TaxIntegrationLineObject _line)
    {
        boolean shouldCheck = true;

        if (TaxIntegrationTaxGroupIntersectionValidateFlight::instance().isEnabled())
        {
            shouldCheck = this.needCheckTaxGroups_IT(_line);

            if (shouldCheck)
            {
                if (!_line.getTaxGroup())
                {
                    throw error(strfmt("@SYS26332", "@SYS21919"));
                }
                else if (!_line.getTaxItemGroup())
                {
                    throw error(strfmt("@SYS26332", "@SYS21932"));
                }
            }
        }
        else
        {
            shouldCheck = isTaxIntegrationCheckTaxCodeFlightEnabled
                && this.needCheckTaxGroups_IT(_line);
        }

        return shouldCheck;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxGroups_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check tax groups
    /// </summary>
    /// <param name = "_line">The <c>TaxIntegrationLineObject</c> which tax groups will be check.</param>
    private void checkTaxGroups_IT(TaxIntegrationLineObject _line)
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT])
            && isCheckTaxGroupsFlightEnabled)
        {
            if (this.needCheckTaxGroups_IT(_line))
            {
                if (!_line.getTaxGroup())
                {
                    throw error(strFmt("@TaxIntegration:CheckTaxGroups", "@SYS21919"));
                }
                else if (!_line.getTaxItemGroup())
                {
                    throw error(strFmt("@TaxIntegration:CheckTaxGroups", "@SYS21932"));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>needCheckTaxGroups_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if tax groups check is needed for the TaxIntegrationLineObject.
    /// </summary>
    /// <param name="_line">The <c>TaxIntegrationLineObject</c> which tax groups need to be determined.</param>
    /// <returns>true, if tax groups check is needed; otherwise, false.</returns>
    private boolean  needCheckTaxGroups_IT(TaxIntegrationLineObject _line)
    {
        boolean ret = false;
        TaxIntegrationBusinessProcess businessProcess = _line.getAncestorDocument().getBusinessProcess();

        switch (_line.getLocalTableId())
        {
            case tableNum(SalesLine):
            case tableNum(SalesParmLine):
                // When allow blank item sales tax group is true and tax item group is empty, it will skip check tax group itersection.
                boolean allowBlankItemSalesTaxGroup = _line.getAncestorDocument().getIsRetail()
                    && FeatureStateProvider::IsFeatureEnabled(RetailAllowBlankItemSalesTaxGroupInInvoiceFlight_IT::instance());

                ret = (!allowBlankItemSalesTaxGroup || _line.getTaxItemGroup())
                        && businessProcess == TaxIntegrationBusinessProcess::Sales;
                break;
            case tableNum(LedgerJournalTrans):

                if (isCheckTaxGroupsFlightEnabled)
                {
                    TaxIntegrationJournalDocumentObject journalDocument = _line.getAncestorDocument();
                    LedgerJournalTable ledgerJournalTable = journalDocument.getLocalRecord() as LedgerJournalTable;

                    // Only be available when tax book is enabled in Italy.
                    if (ledgerJournalTable.shouldCheckTaxBooksSetup_IT())
                    {
                        // Default to true for all transactions which initiation table is LedgerJournalTrans and TaxBookSetup check is true.
                        ret = true;
                        if ((businessProcess == TaxIntegrationBusinessProcess::Journal))
                        {
                            // Skip the lines not valid for tax calculation in invoice approval
                            if (journalDocument.isVendorInvoiceApproval() && !_line.shouldSendToTaxService())
                            {
                                // Handle the vend invoice approval here.
                                ret = false;
                            }
                        }
                        else
                        {
                            ret = (businessProcess == TaxIntegrationBusinessProcess::Project
                                && journalDocument.isProjExpenseJournal());
                        }
                    }
                }

                break;

            case tableNum(ProjAdvancedJournalLine):
                ret = businessProcess == TaxIntegrationBusinessProcess::Project;

                break;
            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if this activity should be skipped for document.
    /// Note, all the charges will also be skipped, if this method returns true.
    /// </summary>
    /// <param name="_document">The <c>TaxIntegrationDoccumentObject</c> to determine the applicability.</param>
    /// <returns>true, if all lines should be skipped by current activity; otherwise, false.</returns>
    internal boolean shouldSkip(TaxIntegrationDocumentObject _document)
    {
        if (super(_document))
        {
            return true;
        }

        // Core tax is not checking tax for REQ, keep same behavior here.
        // And transfer order is only taxable in tax integration. For now do not add this check.
        if (_document.getBusinessProcess() == TaxIntegrationBusinessProcess::Inventory
            || _document.getLocalTableId() == tableNum(PurchReqTable))
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>