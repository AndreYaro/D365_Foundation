<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSVolumetricsPutawayValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSVolumetricsPutawayValidator</c> class allows to determine
/// locations that can or cannot be used for put away of
/// a specific quantity of an item.
/// </summary>
public class WHSVolumetricsPutawayValidator
{
    // Putaway details

    ItemId                              itemId;
    InventDimId                         inventDimId;
    Qty                                 locateQty;
    UnitOfMeasureSymbol                 locateUnitId;
    boolean                             allowSplit;
    WHSContainerTypeCode                containerTypeCode;
    WHSLicensePlateLocDirInformation    lpInformation;

    // Cached putaway details

    EcoResReleasedProductUnitConverter  releasedProductUnitConverter;
    InventUnitId                        inventUnitId;
    Map                                 physicalDimensionsByUnit;
    private boolean                     lastRequiredWeightVolumeHasValue;
    private container                   lastRequiredWeightVolume;
    private container                   lastRequiredWeightVolumePackedQuery;

    // Output

    str                                 validateLocationErrorMessage;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>convertAndRoundUp</Name>
				<Source><![CDATA[
    private Qty convertAndRoundUp(
        UnitOfMeasureSymbol _fromUnitId,
        UnitOfMeasureSymbol _toUnitId,
        Qty                 _qty)
    {
        return roundUp(this.convertNoRounding(_fromUnitId, _toUnitId, _qty), 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertNoRounding</Name>
				<Source><![CDATA[
    private Qty convertNoRounding(
        UnitOfMeasureSymbol _fromUnitId,
        UnitOfMeasureSymbol _toUnitId,
        Qty                 _qty)
    {
        if (_fromUnitId == _toUnitId)
        {
            return _qty;
        }

        return this.parmReleasedProductUnitConverter().convert(_qty,
                                                                UnitOfMeasure::unitOfMeasureIdBySymbol(_fromUnitId),
                                                                UnitOfMeasure::unitOfMeasureIdBySymbol(_toUnitId),
                                                                NoYes::No, // _roundAbsoluteValue
                                                                itemId,
                                                                inventDimId,
                                                                NoYes::No); // _applyRounding
    }

]]></Source>
			</Method>
			<Method>
				<Name>excludeLocationsWithInsufficientCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the specified query to exclude locations with insufficient capacity.
    /// </summary>
    /// <param name="_query">
    /// The query that selects locations.
    /// </param>
    /// <param name="_packedQuery">
    /// The packed version of the query that selects locations; optional.
    /// </param>
    /// <remarks>
    /// Filtering is done based on the contents of the <c>WHSLocationLoad</c> table.
    /// It means that if the location load hasn't been computed yet then the location will not be excluded from the query
    /// and will have to be validated using the <c>validateLocation</c> method.
    /// </remarks>
    public void excludeLocationsWithInsufficientCapacity(
        Query       _query,
        container   _packedQuery = _query.pack())
    {
        this.addExcludedLocationLoadDataSourceToQuery(_query, _packedQuery, JoinMode::NoExistsJoin);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExcludedLocationsWithInsufficientCapacityEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an enumerator with all the locations that will be excluded by the excludeLocationsWithInsufficientCapacity.
    /// </summary>
    /// <param name = "_query">The query that selects locations.</param>
    /// <param name = "_packedQuery">The packed version of the query that selects locations. Optional.</param>
    /// <returns>An enumerator with the locations that will be excluded by the excludeLocationsWithInsufficientCapacity.</returns>
    [Hookable(false)]
    internal WhsLocationDirectiveActionQueryEnumerator getExcludedLocationsWithInsufficientCapacityEnumerator(
        Query       _query,
        container   _packedQuery = _query.pack())
    {
        Query excludedLocationsWithInsufficientCapacity = new Query(_query);

        if (!this.addExcludedLocationLoadDataSourceToQuery(excludedLocationsWithInsufficientCapacity, _packedQuery, JoinMode::ExistsJoin))
        {
            return null;
        }

        return WhsLocationDirectiveActionQueryEnumerator::newFromQueryRun(new QueryRun(excludedLocationsWithInsufficientCapacity));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addExcludedLocationLoadDataSourceToQuery</Name>
				<Source><![CDATA[
    private boolean addExcludedLocationLoadDataSourceToQuery(Query _query, container _packedQuery, JoinMode _joinMode)
    {
        Volume minFreeVolume;
        Weight minFreeWeight;

        QueryBuildDataSource dsLocation = _query.dataSourceTable(tableNum(WMSLocation));

        if (dsLocation)
        {
            [minFreeWeight, minFreeVolume] = this.requiredWeightVolume(_packedQuery, itemId, inventDimId, locateQty, locateUnitId, allowSplit);

            if (minFreeVolume || minFreeWeight)
            {
                QueryBuildDataSource dsExcludedLocationLoad = dsLocation.addDataSource(tableNum(WHSLocationLoad));

                dsExcludedLocationLoad.fetchMode(QueryFetchMode::One2One);
                dsExcludedLocationLoad.relations(true);
                dsExcludedLocationLoad.joinMode(_joinMode);

                if (minFreeVolume)
                {
                    dsExcludedLocationLoad.addRange(fieldNum(WHSLocationLoad, AvailableVolume)).value('<' + queryValue(minFreeVolume));
                }

                if (minFreeWeight)
                {
                    dsExcludedLocationLoad.addRange(fieldNum(WHSLocationLoad, AvailableWeight)).value('<' + queryValue(minFreeWeight));
                }

                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalWeightAndVolumeCalculator</Name>
				<Source><![CDATA[
    private WHSLocationTotalWeightVolumeCalculator getTotalWeightAndVolumeCalculator(
        WMSLocation         _location,
        UnitOfMeasureSymbol _requestedUnits)
    {
        WHSLocationTotalWeightVolumeCalculator calculator = WHSLocationTotalWeightVolumeCalculator::newFromLocationUnitSymbol(_location, _requestedUnits);
        calculator.parmUnitConverter(releasedProductUnitConverter);
        calculator.parmContainerTypeCode(containerTypeCode);
        return calculator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPutaway</Name>
				<Source><![CDATA[
    protected void initPutaway(
        ItemId              _itemId,
        InventDimId         _inventDimId,
        Qty                 _locateQty,
        UnitOfMeasureSymbol _locateUnitId,
        boolean             _allowSplit)
    {
        inventUnitId = WHSCatchWeightHelper::inventHandlingUnitId(_itemId);

        itemId = _itemId;
        inventDimId = _inventDimId;
        locateQty = _locateQty;
        locateUnitId = _locateUnitId ? _locateUnitId : inventUnitId;
        allowSplit = _allowSplit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxAllowedPutawayQty</Name>
				<Source><![CDATA[
    private Qty maxAllowedPutawayQty(
        WMSLocation         _location,
        WHSLocationProfile  _profile,
        UnitOfMeasureSymbol _unitId)
    {
        Qty maxWeightQuantity = this.calculateMaxWeightQuantity(_profile, _location, _unitId);
        Qty maxVolumeQuantity = this.calculateMaxVolumeQuantity(_profile, _location, _unitId);

        return min(maxVolumeQuantity, maxWeightQuantity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateMaxVolumeQuantity</Name>
				<Source><![CDATA[
    private Qty calculateMaxVolumeQuantity(WHSLocationProfile _profile,
        WMSLocation _location,
        UnitOfMeasureSymbol _unitId)
    {
        Qty maxVolumeQuantity = realMax();

        if (containerTypeCode && !WHSContainerType::find(containerTypeCode).FlexibleVolumeDimensions)
        {
            if (!this.locationHasAvailableVolume(_location))
            {
                maxVolumeQuantity = 0;
            }
        }
        else if (_profile.isVolumeConstraintEnabled())
        {            
            WHSLocationTotalWeightVolumeCalculator volumeCalculator = this.getTotalWeightAndVolumeCalculator(_location, _profile.StorageUnit);

            Volume availableVolume = _profile.maxFillVolume() - volumeCalculator.calculateTotalVolume();

            boolean volumeMaximumReached = availableVolume <= 0;

            if (volumeMaximumReached)
            {
                maxVolumeQuantity = 0;
            }
            else
            {
                WHSPhysDimUOM physicalDimensions = this.getPysicalDimensionsByUnitOfMeasure(_unitId);
                
                Volume physicalDimensionsVolume = physicalDimensions.displayVolume();
                
                if (physicalDimensionsVolume > 0)
                {
                    maxVolumeQuantity = availableVolume / physicalDimensionsVolume;
                }
            }
        }

        return maxVolumeQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateMaxWeightQuantity</Name>
				<Source><![CDATA[
    private Qty calculateMaxWeightQuantity(WHSLocationProfile _profile, 
        WMSLocation _location,
        UnitOfMeasureSymbol _unitId)
    {
        Qty maxWeightQuantity = realMax();

        if (_profile.MaxWeight)
        {            
            WHSLocationTotalWeightVolumeCalculator weightCalculator = this.getTotalWeightAndVolumeCalculator(_location, _profile.StorageUnit);

            Qty availableWeight = _profile.MaxWeight - weightCalculator.calculateTotalWeight();

            boolean weightMaximumReached = availableWeight <= 0;

            if (weightMaximumReached)
            {
                maxWeightQuantity = 0;
            }
            else
            {
                WHSPhysDimUOM physicalDimensions = this.getPysicalDimensionsByUnitOfMeasure(_unitId);
                
                if (physicalDimensions.Weight)
                {
                    maxWeightQuantity = availableWeight / physicalDimensions.Weight;
                }
            }
        }

        return maxWeightQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>minPutawayQty</Name>
				<Source><![CDATA[
    private container minPutawayQty(WHSLocationProfile _locationProfile)
    {
        if (allowSplit)
        {
            return this.minPutawayQtyAndUnitWhenSplitAllowed(_locationProfile);
        }

        return this.putawayQtyAndUnitWhenSplitNotAllowed(_locationProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>minPutawayQtyAndUnitWhenSplitAllowed</Name>
				<Source><![CDATA[
    private container minPutawayQtyAndUnitWhenSplitAllowed(WHSLocationProfile _locationProfile)
    {
        Qty minPutawayQty;
        UnitOfMeasureSymbol putawayUnitId;

        if (_locationProfile.StorageUnit)
        {
            putawayUnitId = _locationProfile.StorageUnit;
            minPutawayQty = 1;
        }
        else
        {
            putawayUnitId = inventUnitId;
            minPutawayQty = min(1, this.convertNoRounding(locateUnitId, inventUnitId, locateQty));
        }

        return [minPutawayQty, putawayUnitId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>minRequiredWeightVolume</Name>
				<Source><![CDATA[
    private container minRequiredWeightVolume(WHSLocationProfile _locationProfile)
    {
        Qty minPutawayQty;
        UnitOfMeasureSymbol putawayUnitId;
        Volume minRequiredVolume;
        Weight minRequiredWeight;

        if (allowSplit)
        {
            [minPutawayQty, putawayUnitId] = this.minPutawayQtyAndUnitWhenSplitAllowed(_locationProfile);
        }
        else
        {
            [minPutawayQty, putawayUnitId] = this.putawayQtyAndUnitWhenSplitNotAllowed(_locationProfile);
        }

        if (lpInformation
        &&  (_locationProfile.isVolumeConstraintEnabled()
        ||   _locationProfile.MaxWeight))
        {
            // Clear putawayUnitId because the WHSLicensePlateLocDirInformation.calculateWeightVolume will be calling the calculateWeightVolume method, 
            // which is implemented for ASN and mixed LPs and can have items with different units of measure, so inventory unit should be used.
            if (!_locationProfile.StorageUnit)
            {
                putawayUnitId = '';
            }

            [minRequiredWeight, minRequiredVolume] = lpInformation.getMinRequiredWeightVolume(putawayUnitId);

            minRequiredVolume = _locationProfile.isVolumeConstraintEnabled() ? minRequiredVolume : 0;
            minRequiredWeight = _locationProfile.MaxWeight ? minRequiredWeight : 0;
        }
        else
        {
            WHSPhysDimUOM putawayUnitDimensions = WHSPhysDimUOM::getPhysDimUOMByItem(itemId, putawayUnitId);

            minRequiredVolume = _locationProfile.isVolumeConstraintEnabled() ? putawayUnitDimensions.displayVolume() * minPutawayQty : 0;
            minRequiredWeight = _locationProfile.MaxWeight ? putawayUnitDimensions.Weight * minPutawayQty : 0;
        }
        return [minRequiredWeight, minRequiredVolume];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContainerTypeCode</Name>
				<Source><![CDATA[
    public WHSContainerTypeCode parmContainerTypeCode(WHSContainerTypeCode _containerTypeCode = containerTypeCode)
    {
        containerTypeCode = _containerTypeCode;

        return containerTypeCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLPInformation</Name>
				<Source><![CDATA[
    public WHSLicensePlateLocDirInformation parmLPInformation(WHSLicensePlateLocDirInformation _lpInformation = lpInformation)
    {
        lpInformation = _lpInformation;

        return lpInformation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReleasedProductUnitConverter</Name>
				<Source><![CDATA[
    public EcoResReleasedProductUnitConverter parmReleasedProductUnitConverter(EcoResReleasedProductUnitConverter _releasedProductUnitConverter = releasedProductUnitConverter)
    {
        if (prmisDefault(_releasedProductUnitConverter))
        {
            if (!releasedProductUnitConverter)
            {
                releasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct();
            }
        }
        else
        {
            releasedProductUnitConverter = _releasedProductUnitConverter;
        }

        return releasedProductUnitConverter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPysicalDimensionsByUnitOfMeasure</Name>
				<Source><![CDATA[
    protected WHSPhysDimUOM getPysicalDimensionsByUnitOfMeasure(UnitOfMeasureSymbol _unitId)
    {
        WHSPhysDimUOM physicalDimensions;

        if (!physicalDimensionsByUnit)
        {
            physicalDimensionsByUnit = SysTransactionScopeCache::get(funcName(), itemId, new Map(Types::String, Types::Record));
        }

        if (physicalDimensionsByUnit.exists(_unitId))
        {
            physicalDimensions = physicalDimensionsByUnit.lookup(_unitId);
        }
        else
        {
            physicalDimensions = WHSPhysDimUOM::getPhysDimUOMByItem(itemId, _unitId);
            physicalDimensionsByUnit.insert(_unitId, physicalDimensions);
        }

        return physicalDimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>putawayQtyAndUnitWhenSplitNotAllowed</Name>
				<Source><![CDATA[
    private container putawayQtyAndUnitWhenSplitNotAllowed(WHSLocationProfile _locationProfile)
    {
        Qty putawayQty;
        UnitOfMeasureSymbol putawayUnitId;

        if (_locationProfile.StorageUnit)
        {
            putawayUnitId = _locationProfile.StorageUnit;
            putawayQty = this.convertAndRoundUp(locateUnitId, putawayUnitId, locateQty);
        }
        else
        {
            putawayUnitId = inventUnitId;
            putawayQty = this.convertNoRounding(locateUnitId, inventUnitId, locateQty);
        }

        return [putawayQty, putawayUnitId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>requiredWeightVolume</Name>
				<Source><![CDATA[
    private container requiredWeightVolume(
        container           _packedDirectiveActionQuery,
        ItemId              _itemId,
        InventDimId         _inventDimId,
        Qty                 _locateQty,
        UnitOfMeasureSymbol _locateUnitId,
        boolean             _allowSplit)
    {
        // check the cache first
        if (lastRequiredWeightVolumeHasValue && lastRequiredWeightVolumePackedQuery == _packedDirectiveActionQuery)
        {
            return lastRequiredWeightVolume;
        }

        QueryBuildDataSource dsLocation, dsLocationProfile;

        WHSVolumetricsPutawayValidator putawayValidator;

        Weight minRequiredWeight = realMax();
        Weight requiredWeight;
        Volume minRequiredVolume = realMax();
        Volume requiredVolume;

        Query locationProfilesQuery = new Query(_packedDirectiveActionQuery);
        dsLocation = locationProfilesQuery.dataSourceTable(tableNum(WMSLocation));

        if (dsLocation)
        {
            dsLocation.addGroupByField(fieldNum(WMSLocation, LocProfileId));
            dsLocation.addSelectionField(fieldNum(WMSLocation, LocProfileId));

            dsLocationProfile = dsLocation.addDataSource(tableNum(WHSVolumetricsEnabledLocationProfile));
            dsLocationProfile.joinMode(JoinMode::ExistsJoin);
            dsLocationProfile.fetchMode(QueryFetchMode::One2One);
            dsLocationProfile.addLink(fieldNum(WMSLocation, LocProfileId), fieldNum(WHSVolumetricsEnabledLocationProfile, LocProfileId));

            QueryRun queryRun = new QueryRun(locationProfilesQuery);

            while (queryRun.next())
            {
                WMSLocation locationWithProfile = queryRun.get(tableNum(WMSLocation));
                WHSLocationProfile locationProfile = WHSLocationProfile::find(locationWithProfile.LocProfileId);

                if (!putawayValidator)
                {
                    putawayValidator = WHSVolumetricsPutawayValidator::newPutaway(_itemId, _inventDimId, _locateQty, _locateUnitId, _allowSplit);
                    putawayValidator.parmLPInformation(lpInformation);
                }

                [requiredWeight, requiredVolume] = putawayValidator.minRequiredWeightVolume(locationProfile);

                minRequiredWeight = min(minRequiredWeight, requiredWeight);
                minRequiredVolume = min(minRequiredVolume, requiredVolume);
            }
        }

        minRequiredWeight = minRequiredWeight == realMax() ? 0 : minRequiredWeight;
        minRequiredVolume = minRequiredVolume == realMax() ? 0 : minRequiredVolume;

        lastRequiredWeightVolume = [minRequiredWeight, minRequiredVolume];
        lastRequiredWeightVolumePackedQuery = _packedDirectiveActionQuery;
        lastRequiredWeightVolumeHasValue = true;

        return lastRequiredWeightVolume;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canLocationBeSkippedAsItCannotFitAnyQtyForThisItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if volumetric checks are needed for this location for a given item.
    /// </summary>
    /// <param name = "_location">The location.</param>
    /// <param name = "_itemId">The item.</param>
    /// <param name = "_inventDimId">The item's dimensions.</param>
    /// <returns>true id volumetric checks are needed; otherwise, false.</returns>
    [Hookable(false)]
    static internal boolean canLocationBeSkippedAsItCannotFitAnyQtyForThisItem(WMSLocation _location, ItemId _itemId, InventDimId _inventDimId)
    {
        Set cache = WHSVolumetricsPutawayValidator::locationCannotFitAnyQtyCache(_itemId, _inventDimId);
        return cache.in(_location.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rememberLocationCannotFitAnyQtyForThisItem</Name>
				<Source><![CDATA[
    static private void rememberLocationCannotFitAnyQtyForThisItem(WMSLocation _location, ItemId _itemId, InventDimId _inventDimId)
    {
        Set cache = WHSVolumetricsPutawayValidator::locationCannotFitAnyQtyCache(_itemId, _inventDimId);
        cache.add(_location.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>locationCannotFitAnyQtyCache</Name>
				<Source><![CDATA[
    static private Set locationCannotFitAnyQtyCache(ItemId _itemId, InventDimId _inventDimId)
    {
        return SysTransactionScopeCache::get(funcName(), [_itemId, _inventDimId], new Set(Types::Int64));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies whether the specified location can be used for put away.
    /// </summary>
    /// <param name="_location">
    /// The location.
    /// </param>
    /// <param name="_locationProfile">
    /// The location profile for the specified location; optional.
    /// </param>
    /// <returns>
    /// The quantity that can be put away to the specified location.
    /// </returns>
    public Qty validateLocation(
        WMSLocation         _location,
        WHSLocationProfile  _locationProfile = WHSLocationProfile::find(_location.LocProfileId))
    {
        if (!_locationProfile.isVolumetricsEnabled())
        {
            return locateQty;
        }

        if (!lpInformation)
        {
            Qty                 minPutawayQty;
            UnitOfMeasureSymbol putawayUnitId;

            [minPutawayQty, putawayUnitId] = this.minPutawayQty(_locationProfile);

            if (!this.validateVolumetricsItemDims(_locationProfile, putawayUnitId, WHSVolumetricsPutawayValidatorFlipsDepthWidthV2Flight::instance().isEnabled()))
            {
                WHSVolumetricsPutawayValidator::rememberLocationCannotFitAnyQtyForThisItem(_location, itemId, inventDimId);
                validateLocationErrorMessage = strFmt("@WAX3504", _location.WMSLocationId, itemId);
                return 0;
            }

            Qty maxAllowedPutawayQty = this.maxAllowedPutawayQty(_location, _locationProfile, putawayUnitId);
            if (maxAllowedPutawayQty == 0)
            {
                WHSVolumetricsPutawayValidator::rememberLocationCannotFitAnyQtyForThisItem(_location, itemId, inventDimId);
            }

            if (minPutawayQty > maxAllowedPutawayQty)
            {
                validateLocationErrorMessage = strFmt("@WAX3503", _location.WMSLocationId);
                return 0;
            }

            Qty maxAllowedPutawayQtyInLocateUnit = this.convertNoRounding(putawayUnitId, locateUnitId, maxAllowedPutawayQty);

            if (maxAllowedPutawayQtyInLocateUnit < locateQty)
            {
                return roundDown(maxAllowedPutawayQtyInLocateUnit, 1);
            }
        }
        else
        {
            if (!this.validateLocationForWholeLicensePlate(_location))
            {
                validateLocationErrorMessage = strFmt("@WAX3503", _location.wMSLocationId);
                return 0;
            }

            locateQty = lpInformation.getQtyOnLicensePlate();
        }

        return locateQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLocationErrorMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the message that describes the error location validation failed.
    /// </summary>
    /// <returns>
    /// The message that describes the error if location validation happened; otherwise, empty string.
    /// </returns>
    public str validateLocationErrorMessage()
    {
        return validateLocationErrorMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLocationForWholeLicensePlate</Name>
				<Source><![CDATA[
    private boolean validateLocationForWholeLicensePlate(WMSLocation _location)
    {
        Weight  availableWeight = realMax();
        Volume  availableVolume = realMax();

        WHSLocationProfile locationProfile = WHSLocationProfile::find(_location.LocProfileId);

        WHSLocationTotalWeightVolumeCalculator weightAndVolumeCalculator = this.getTotalWeightAndVolumeCalculator(_location, locationProfile.StorageUnit);

        // Blanking the container code, the calculator won't include the current container's weight/volume.
        weightAndVolumeCalculator.parmContainerTypeCode('');

        if (locationProfile.MaxWeight)
        {
            availableWeight = locationProfile.MaxWeight - weightAndVolumeCalculator.calculateTotalWeight();
        }

        // If weight has already failed no need to check volume.
        if (availableWeight >= 0
        &&  locationProfile.isVolumeConstraintEnabled())
        {
            availableVolume = locationProfile.maxFillVolume() - weightAndVolumeCalculator.calculateTotalVolume();
        }

        if (availableWeight >= 0
        &&  availableVolume >= 0)
        {
            Weight  wholeLPWeight;
            Volume  wholeLPVolume;

            [wholeLPWeight, wholeLPVolume] = lpInformation.getMinRequiredWeightVolume(locationProfile.StorageUnit);

            availableWeight -= wholeLPWeight;
            availableVolume -= wholeLPVolume;
        }

        // If both available weight and volume are zero or higher the pallet will fit in this location.
        return availableWeight >= 0
            && availableVolume >= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>locationHasAvailableVolume</Name>
				<Source><![CDATA[
    private boolean locationHasAvailableVolume(WMSLocation _location)
    {
        Volume  availableVolume = realMax();

        WHSLocationProfile locationProfile = WHSLocationProfile::find(_location.LocProfileId);

        if (locationProfile.isVolumeConstraintEnabled())
        {
            WHSLocationTotalWeightVolumeCalculator volumeCalculator = this.getTotalWeightAndVolumeCalculator(_location, locationProfile.StorageUnit);

            availableVolume = locationProfile.maxFillVolume() - volumeCalculator.calculateTotalVolume();
        }

        return availableVolume >= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVolumetricsItemDims</Name>
				<Source><![CDATA[
    private boolean validateVolumetricsItemDims(WHSLocationProfile _locationProfile, UnitOfMeasureSymbol _unitId, boolean _allowFlipWD)
    {    
        real comparisonLocHeight, comparisonLocWidth, comparisonLocDepth;

        if (_locationProfile.isUsableVolumeConstraintEnabled())
        {
            comparisonLocHeight = _locationProfile.UsableHeight;
            comparisonLocDepth = _locationProfile.UsableDepth;
            comparisonLocWidth = _locationProfile.UsableWidth;
        }
        else if (_locationProfile.isTotalVolumeConstraintEnabled())
        {
            comparisonLocHeight = _locationProfile.Height;
            comparisonLocDepth = _locationProfile.Depth;
            comparisonLocWidth = _locationProfile.Width;
        }
        else 
        {
            return true;
        }

        WHSPhysDimUOM physicalDimensions = this.getPysicalDimensionsByUnitOfMeasure(_unitId);

        if (_allowFlipWD)
        {
            return comparisonLocHeight >= physicalDimensions.Height
                   && (((comparisonLocDepth >= physicalDimensions.Depth) && (comparisonLocWidth >= physicalDimensions.Width)) ||
                       ((comparisonLocDepth >= physicalDimensions.Width) && (comparisonLocWidth >= physicalDimensions.Depth)));
        }
        else
        {
            if (comparisonLocHeight < physicalDimensions.Height
                || comparisonLocWidth < physicalDimensions.Width
                || comparisonLocDepth < physicalDimensions.Depth)
            {
                return false;
            }            
        }
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSVolumetricsPutawayValidator construct()
    {
        return new WHSVolumetricsPutawayValidator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPutaway</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>WHSVolumetricsPutawayValidator</c> class
    /// based on the specified information about the put away.
    /// </summary>
    /// <param name="_itemId">
    /// The ID of the item that needs to be stored in a warehouse location.
    /// </param>
    /// <param name="_inventDimId">
    /// The inventory dimensions.
    /// </param>
    /// <param name="_locateQty">
    /// The quantity of the item that needs to be stored in a warehouse location.
    /// </param>
    /// <param name="_locateUnitId">
    /// The ID of the unit in which the quantity is specified.
    /// </param>
    /// <param name="_allowSplit">
    /// A boolean parameter that determines whether it is allowed to split the quantity that needs to be put away.
    /// </param>
    /// <returns>
    /// A new instance of the <c>WHSVolumetricsPutawayValidator</c> class.
    /// </returns>
    public static WHSVolumetricsPutawayValidator newPutaway(
        ItemId              _itemId,
        InventDimId         _inventDimId,
        Qty                 _locateQty,
        UnitOfMeasureSymbol _locateUnitId,
        boolean             _allowSplit)
    {
        WHSVolumetricsPutawayValidator validator = WHSVolumetricsPutawayValidator::construct();
        validator.initPutaway(_itemId, _inventDimId, _locateQty, _locateUnitId, _allowSplit);
        return validator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>