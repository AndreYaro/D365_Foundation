<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRPaymentReview</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>MCRPaymentReview</c> class does all processing for over and under payments,
///     over credit limit, and check hold at submit time in order entry.
/// </summary>
class MCRPaymentReview
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkHold</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the status of check payments.
    /// </summary>
    /// <param name="_mcrCustPaymTable">
    /// The customer payment record to evaluate.
    /// </param>
    /// <returns>
    /// true when the order is on check hold; false when the order should be processed.
    /// </returns>
    /// <remarks>
    ///     This method goes out to <c>CustTable</c> first and sees if a value exists
    ///     for <c>CheckHoldAmountThreshold</c>. If values do not exist it uses the
    ///     <c>CheckHoldAmountThreshold</c> specified in the <c>MCROrderParameters</c> table.
    ///     The return variabled is used to determine if a check payment on this order
    ///     is above one of the thresholds. If the customer threshold is 0
    ///     the order parameters is used.
    /// </remarks>
    public static boolean checkHold(MCRCustPaymTable _mcrCustPaymTable)
    {
        MCROrderEventTable mcrOrderEventTable;
        real custThreshold = 0;
        // Used to simplify logic and improve readability
        real masterThreshold = 0;
        boolean retVal = false;

        if (_mcrCustPaymTable.Status != MCRCustPaymStatus::Authorized
            && _mcrCustPaymTable.CheckAuthorized == NoYes::No)
        {
            ttsBegin;
            custThreshold = MCRCustTable::findByCustAccount(_mcrCustPaymTable.CustAccount).CheckHoldThresholdAmt;

            if (custThreshold)
            {
                masterThreshold = custThreshold;
            }
            else
            {
                masterThreshold = SalesParameters::find().MCRCheckHoldThresholdAmt;
            }

            // If the user does not want orders put on check hold no need
            //  to scan the entire payment table
            if (masterThreshold)
            {
                if (_mcrCustPaymTable.Amount >
                    CurrencyExchangeHelper::curAmount2CurAmount(masterThreshold, CompanyInfoHelper::standardCurrency(), _mcrCustPaymTable.CurrencyCode))
                {
                    if (_mcrCustPaymTable.RefTableId == tableNum(SalesTable))
                    {
                        mcrOrderEventTable.insertPaymentEvent(MCROrderEventType::CheckHold,
                                                    _mcrCustPaymTable,
                                                    strFmt("@MCR25181",
                                                    _mcrCustPaymTable.Amount,
                                                    _mcrCustPaymTable.CurrencyCode));
                    }
                    retVal = true;
                }
            }
            ttsCommit;
        }

        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateRefund</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generates a refund for the passed sales order.
    /// </summary>
    /// <param name="_salesTable">
    /// The sales order to generate a refund for.
    /// </param>
    /// <param name="_mcrCustPaymTotals">
    /// The customer payment totals associated with the order.
    /// </param>
    public static void generateRefund(SalesTable _salesTable, MCRCustPaymTotals _mcrCustPaymTotals)
    {
        MCRSalesTable           mcrSalesTable = _salesTable.mcrSalesTable();
        MCRPaymentAdjustments   mcrPaymentAdjustments;

        ttsBegin;
        mcrSalesTable.PaymOutOfBalance = MCRPaymOutOfBalance::None;
        mcrSalesTable.selectForUpdate(true);
        mcrSalesTable.update();
        ttsCommit;

        mcrPaymentAdjustments = MCRPaymentAdjustments::construct(_mcrCustPaymTotals.getTotalPaymAmount(),
                                                                _salesTable);
        mcrPaymentAdjustments.processPaymentAdjustments();
        warning("@MCR25322");
    }

]]></Source>
			</Method>
			<Method>
				<Name>nsfCancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unposts the customer transactions that resulted from
    /// the passed payment.
    /// </summary>
    /// <param name="_mcrCustPaymTable">
    /// The payment record used to determine which transactions to unpost.
    /// </param>
    /// <param name="_reasonCode">
    /// The reason code selected by the user to indicate why the transactions
    /// are being cancelled.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Error thrown when validation fails when trying to update the payment record.
    /// </exception>
    public static void nsfCancel(MCRCustPaymTable _mcrCustPaymTable, ReasonCode _reasonCode = "")
    {
        BankPaymCancel bankPaymCancel;
        CustTrans custTrans;
        LedgerJournalTrans ledgerJournalTrans;

        if (_mcrCustPaymTable.Amount > 0.0
            && _mcrCustPaymTable.Status != MCRCustPaymStatus::Declined)
        {
            ttsBegin;
            _mcrCustPaymTable.selectForUpdate(true);
            _mcrCustPaymTable.Status = MCRCustPaymStatus::Declined;
            if (_mcrCustPaymTable.validateWrite())
            {
                _mcrCustPaymTable.update();
            }
            else
            {
                throw error("@SYS104318");
            }
            ttsCommit;

            // Have to compensate for multiple cust trans records (if the payment had been modified)
            while select forupdate custTrans
                join ledgerJournalTrans
                where ledgerJournalTrans.MCRRefPaymID == _mcrCustPaymTable.RecId
                    && custTrans.RecId == ledgerJournalTrans.CustTransId
                    && custTrans.Voucher == ledgerJournalTrans.Voucher
            {
                bankPaymCancel = BankPaymCancel::newBankPaymCancel(custTrans, true);
                bankPaymCancel.runOperation();
            }

            // Update the posted amount to 0.
            _mcrCustPaymTable.updatePostedAmount(-(_mcrCustPaymTable.PostedAmount));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>outOfBalance</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the sales order's out of balance field if the
    ///     sales order is over or under paid.
    /// </summary>
    /// <param name="_mcrCustPaymTotals">
    /// The customer payment totals associated with the order.
    /// </param>
    /// <param name="_overUnderPaymAmount">
    /// The over under payment amount.
    /// </param>
    /// <param name="_totalSalesAmount">
    /// The total sales amount on the order.
    /// </param>
    /// <returns>
    /// true if the sales order is out of balance; otherwise, false.
    /// </returns>
    public static boolean outOfBalance(MCRCustPaymTotals _mcrCustPaymTotals,
                             AmountCur _overUnderPaymAmount = 0,
                             AmountCur _totalSalesAmount = 0)
    {
        SalesParameters         salesParameters;
        SalesTable              salesTable;
        MCRCustPaymTable        mcrCustPaymTable;
        MCROrderEventTable      mcrOrderEventTable;
        AmountCur               paymPercentage = 0;
        AmountCur               reviewThreshold = 0;
        AmountCur               compareVal = 0;
        boolean                 isValid = true;
        MCRSalesTable           mcrSalesTable;

        if (!_totalSalesAmount)
        {
            _totalSalesAmount = _mcrCustPaymTotals.getTotalSalesAmount();
        }
        if (!_overUnderPaymAmount)
        {
            _overUnderPaymAmount = _mcrCustPaymTotals.getTotalPaymAmount() - _totalSalesAmount;
        }

        salesTable = SalesTable::findRecId(_mcrCustPaymTotals.getRefRecId(), true);
        mcrSalesTable = salesTable.mcrSalesTable();

        if (abs(_overUnderPaymAmount) > _mcrCustPaymTotals.getMaxOverUnderPaymAmount())
        {
            mcrCustPaymTable = MCRCustPaymTable::findByRefRecIDRefTableID(salesTable.RecId,
                                                                    salesTable.TableId);

            //  If the order hasn't already been released from the workbench
            if (mcrSalesTable.OutOfBalanceReleased == MCROutOfBalanceReleaseType::None)
            {
                salesParameters = SalesParameters::find();

                //  Overpaid
                if (_overUnderPaymAmount > 0)
                {
                    //  Inside review threshold - Refund
                    if (MCRPaymentReview::shouldRefund(_mcrCustPaymTotals,
                                                    _overUnderPaymAmount,
                                                    _totalSalesAmount))
                    {
                        mcrSalesTable.PaymOutOfBalance = MCRPaymOutOfBalance::Overpaid;
                        isValid = true;
                    }
                    //  Outside review threshold
                    else
                    {
                        mcrSalesTable.PaymOutOfBalance = MCRPaymOutOfBalance::Overpaid;

                        if (RetailMCRChannelTable::mcrEnableOrderCompletion(salesTable))
                        {
                            SalesTable.MCROrderStopped = NoYes::Yes;
                        }

                        mcrOrderEventTable.insertOOBEvent(MCROrderEventType::OverPayment,
                                                        salesTable,
                                                        strFmt("@MCR25191",
                                                        _overUnderPaymAmount,
                                                        salesTable.CurrencyCode));
                        isValid = false;
                    }
                }
                //  Underpaid
                else if (_overUnderPaymAmount < 0)
                {
                    if (salesParameters.MCRAllowOutOfBalance == NoYes::Yes)
                    {
                        // Use call center under paid review parameter
                        reviewThreshold = salesParameters.MCRUnderpaidReviewThreshold;
                        compareVal = (_totalSalesAmount)*(reviewThreshold/100);
                    }
                    else
                    {
                        // Use AR max MST over under parameter
                        compareVal = CurrencyExchangeHelper::curAmount2CurAmount(CustParameters::find().MaxMSTOverUnder, CompanyInfoHelper::standardCurrency(), mcrCustPaymTable.CurrencyCode);
                    }

                    if (abs(_overUnderPaymAmount) <= compareVal)
                    {
                        // Create AR payment request
                        RetailEventNotificationAction::InsertRetailOENAction(
                            RetailEventNotificationType::MCRSalesOrderBill,
                            salesTable.RecId,
                            salesTable);
                        warning("@MCR25323");

                        isValid = true;
                    }
                    //  Outside review threshold
                    else
                    {
                        mcrSalesTable.PaymOutOfBalance = MCRPaymOutOfBalance::Underpaid;

                        if (RetailMCRChannelTable::mcrEnableOrderCompletion(salesTable))
                        {
                            SalesTable.MCROrderStopped = NoYes::Yes;
                        }
                        mcrOrderEventTable.insertOOBEvent(MCROrderEventType::UnderPayment,
                                                    salesTable,
                                                    strFmt("@MCR25192",
                                                    abs(_overUnderPaymAmount),
                                                    salesTable.CurrencyCode));
                        isValid = false;
                    }
                }
                //  Neither
                else
                {
                    // do nothing, never should get here
                    throw error(strFmt("@SYS22828", funcName()));
                }
            }
        }
        else
        {
            // Update back status gets called from so many places that a new
            //                      enum value was added so that only end order can put a
            //                      sales order on out of balance "hold".
            //                   So once end order validates that this is not out of balance
            //                      make sure that it doesn't happen again unless the order
            //                      is modified.
            mcrSalesTable.OutOfBalanceReleased = MCROutOfBalanceReleaseType::Verified;

            if (RetailResetCallCenterOrderOutOfBalanceStatusOnSubmitFlight::instance().isEnabled())
            {
                mcrSalesTable.PaymOutOfBalance = MCRPaymOutOfBalance::None;
            }
        }

        ttsBegin;
        if (salesTable.validateWrite())
        {
            salesTable.mcrPackMCRSalesTable(mcrSalesTable);
            salesTable.update();
        }
        else
        {
            throw error("@SYS104318");
        }

        ttsCommit;

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldRefund</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns true if the payment is greater than the write
    ///     off tolerance, but less than the review threshold.
    /// </summary>
    /// <param name="_mcrCustPaymTotals">
    /// The customer payment totals associated with the order.
    /// </param>
    /// <param name="_overUnderPaymAmount">
    /// The over under payment amount.
    /// </param>
    /// <param name="_totalSalesAmount">
    /// The total sales amount on the order.
    /// </param>
    /// <returns>
    /// true if part of the payment on the sales order should be refunded; otherwise, false.
    /// </returns>
    public static boolean shouldRefund(MCRCustPaymTotals _mcrCustPaymTotals,
                             AmountCur _overUnderPaymAmount = 0,
                             AmountCur _totalSalesAmount = 0)
    {
        SalesParameters         salesParameters;
        MCRCustPaymTable         mcrCustPaymTable;
        AmountCur               reviewThreshold = 0;
        AmountCur               compareVal = 0;
        SalesTable              salesTable;

        salesTable = SalesTable::findRecId(_mcrCustPaymTotals.getRefRecId(), true);

        if (!_totalSalesAmount)
        {
            _totalSalesAmount = _mcrCustPaymTotals.getTotalSalesAmount();
        }
        if (!_overUnderPaymAmount)
        {
            _overUnderPaymAmount = _mcrCustPaymTotals.getTotalPaymAmount() - _totalSalesAmount;
        }
        if (abs(_overUnderPaymAmount) > _mcrCustPaymTotals.getMaxOverUnderPaymAmount())
        {
            if (_overUnderPaymAmount > 0)
            {
                salesParameters = SalesParameters::find();
                mcrCustPaymTable = MCRCustPaymTable::findByRefRecIDRefTableID(_mcrCustPaymTotals.getRefRecId(),
                                                    tableNum(SalesTable),
                                                    true);
                if (salesParameters.MCRAllowOutOfBalance == NoYes::Yes)
                {
                    // Use call center over paid review parameter
                    reviewThreshold = salesParameters.MCROverpaidReviewThreshold;
                    compareVal = (_totalSalesAmount)*(reviewThreshold/100);
                }
                else
                {
                    // Use AR max MST over under parameter
                    compareVal = CurrencyExchangeHelper::curAmount2CurAmount(CustParameters::find().MaxMSTOverUnder, CompanyInfoHelper::standardCurrency(), mcrCustPaymTable.CurrencyCode);
                }

                if (_overUnderPaymAmount <= compareVal)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            return false;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unReconcileBankTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks the passed customer transaction record as not reconciled.
    /// </summary>
    /// <param name="_custTrans">
    /// The customer transaction record to update.
    /// </param>
    public static void unReconcileBankTrans(CustTrans _custTrans)
    {
        BankAccountTrans bankAccountTrans;

        select forupdate bankAccountTrans
            where bankAccountTrans.Voucher == _custTrans.Voucher
                && bankAccountTrans.TransDate == _custTrans.TransDate;
        if (bankAccountTrans)
        {
            ttsBegin;
            bankAccountTrans.Reconciled = NoYes::No;
            if (bankAccountTrans.validateWrite())
            {
                bankAccountTrans.update();
            }
            else
            {
                throw error("@SYS104318");
            }
            ttsCommit;
        }
        bankAccountTrans = null;
        select forupdate bankAccountTrans
            where bankAccountTrans.Voucher == _custTrans.LastSettleVoucher
            && bankAccountTrans.TransDate == _custTrans.TransDate;
        if (bankAccountTrans)
        {
            ttsBegin;
            bankAccountTrans.Reconciled = NoYes::No;
            if (bankAccountTrans.validateWrite())
            {
                bankAccountTrans.update();
            }
            else
            {
                throw error("@SYS104318");
            }
            ttsCommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>