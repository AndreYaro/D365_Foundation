<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VersioningCompare</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>VersionCompare</c> class analyzes the differences between two versions of a record
///    collection.
/// </summary>
/// <remarks>
///    A Purchase requisition or an Order is composed of multiple records in several tables. This class is
///    used to traverse the data structure and find the differences between two versions of the data.This
///    class requires that the data structure supports the history framework.The result of the analysis is
///    saved in the <c>VersioningTmpTrans</c> temporary table. The tree structure of the original data is
///    stored in the temporary table by using references to the parent record in the temporary table.
/// </remarks>
abstract class VersioningCompare
{
    VersioningTmpTrans          versioningTmpTrans;

    VersioningVersionMap        changeVersionOld;
    VersioningVersionMap        changeVersionNew;

    utcdatetime                 oldDateTime;
    utcdatetime                 newDateTime;

    boolean                     tmpTransLoaded;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>enableAccountingDistributionView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method indicating if button for viewing accounting distributions should be enabled and visible
    /// on the <c>VersioningCompare</c> form. The button invokes the <c>AccountingDistribution</c> form.
    /// </summary>
    /// <returns>
    /// true if button to view accounting distributions should be enabled and visible; fale as default.
    /// </returns>
    /// <remarks>
    /// Any subclass should override the method if needed.
    /// The accounting distributions are always displayed for the most recent state of purchase order
    /// and show all changes up to the current state.
    /// </remarks>
    public boolean enableAccountingDistributionView()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCaption</Name>
				<Source><![CDATA[
    abstract public str getCaption()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChangeList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of changed fields by comparing two records.
    /// </summary>
    /// <param name="_oldRecord">
    /// The old record buffer.
    /// </param>
    /// <param name="_newRecord">
    /// The new record buffer.
    /// </param>
    /// <returns>
    /// A container that contains the changed fields including old and new values.
    /// </returns>
    protected container getChangeList(Common _oldRecord, Common _newRecord)
    {
        return VersioningCompareRecordVersions::newTableId(_oldRecord.TableId).packChangedFields(versioningTmpTrans.Action,_oldRecord,_newRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCallerRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the comparison based on the records.
    /// </summary>
    /// <param name="_changeVersion">
    /// A record from a table mapped by the <c>VersioningVersionMap</c> database map.
    /// </param>
    /// <param name="_alternateNewVersion">
    /// A second record from a table mapped by the <c>VersioningVersionMap</c> database map.
    /// </param>
    /// <remarks>
    /// If the record originates from an instance of the <c>FormDataSource</c> class the correct selection
    /// will be used. The second parameter is optional and an alternative to multi selection in a form data
    /// source.
    /// </remarks>
    protected void initCallerRecord(VersioningVersionMap _changeVersion, VersioningVersionMap _alternateNewVersion = null)
    {
        FormDataSource  formDataSource;
        VersioningVersionMap tmp;

        formDataSource = FormDataUtil::getFormDataSource(_changeVersion);
        if (formDataSource && formDataSource.getFirst(true))
        {
            changeVersionOld = formDataSource.getFirst(true);
            changeVersionNew = formDataSource.getNext();
        }
        else
        {
            changeVersionOld = _changeVersion;
            if (_alternateNewVersion)
            {
                changeVersionNew = _alternateNewVersion;
            }
        }

        oldDateTime = changeVersionOld.VersionDateTime;
        newDateTime = changeVersionNew.VersionDateTime;

        if (newDateTime && oldDateTime > newDateTime)
        {
            // swap
            tmp = changeVersionNew;
            changeVersionNew = changeVersionOld;
            changeVersionOld = tmp;

            oldDateTime = changeVersionOld.VersionDateTime;
            newDateTime = changeVersionNew.VersionDateTime;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertVersioningTmpTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a record in the <c>VersioningTmpTrans</c> temporary table with the comparison of a single
    ///    record.
    /// </summary>
    /// <param name="_currentRecord">
    ///    The record in the table that holds the current version. For example, a <c>PurchLine</c> record.
    /// </param>
    /// <param name="_foundOld">
    ///    A Boolean value that specifies whether the current record occurs in the old version.
    /// </param>
    /// <param name="_foundNew">
    ///    A Boolean value that specifies whether the current record occurs in the new version.
    /// </param>
    /// <param name="_oldRecord">
    ///    The record from the history table that represents the old version of the current record. For
    ///    example, a <c>PurchLineHistory</c> record.
    /// </param>
    /// <param name="_newRecord">
    ///    The record from the history table that represents the new version of the current record. For
    ///    example, a <c>PurchLineHistory</c> record.
    /// </param>
    /// <param name="_parentRecId">
    ///    The record ID of the parent record in the <c>VersioningTmpTrans</c> temporary table. This parameter
    ///    is used to reflect the tree structure in the temporary table.
    /// </param>
    /// <returns>
    ///    The value of the <c>RecId</c> field of the record inserted in the <c>VersioningTmpTrans</c>
    ///    temporary table.
    /// </returns>
    /// <remarks>
    ///    The method compares the two versions of the current record and saves the fields which differs as a
    ///    record in the <c>VersioningTmpTrans</c> temporary table.The returned <c>RecId</c> field can be used
    ///    as argument on a following call to this method.
    /// </remarks>
    protected recId insertVersioningTmpTrans(Common _currentRecord, boolean _foundOld, boolean _foundNew, Common _oldRecord, Common _newRecord, recId _parentRecId)
    {
        versioningTmpTrans.clear();

        if (_foundOld || _foundNew)
        {
            versioningTmpTrans.initValue();
            versioningTmpTrans.ParentVersioningTmpTrans = _parentRecId;
            versioningTmpTrans.CurrentTableId           = _currentRecord.TableId;
            versioningTmpTrans.CurrentRecId             = _currentRecord.RecId;
            versioningTmpTrans.ToolTipRecord            = this.treeNodeName(_currentRecord);
            versioningTmpTrans.HistoryTableId           = _oldRecord.TableId;

            if (!_foundNew)
            {
                versioningTmpTrans.Action       = VersioningChangeType::Deleted;
            }
            else
            if (!_foundOld)
            {
                versioningTmpTrans.Action       = VersioningChangeType::Inserted;
            }
            else
            {
                versioningTmpTrans.Action       = VersioningChangeType::Updated;
            }

            versioningTmpTrans.ChangeList = this.getChangeList(_oldRecord,_newRecord);

            if (versioningTmpTrans.Action == VersioningChangeType::Updated && !versioningTmpTrans.ChangeList)
            {
                versioningTmpTrans.Action = VersioningChangeType::None;
            }
            versioningTmpTrans.insert();
        }

        return versioningTmpTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadAccountingDistribution</Name>
				<Source><![CDATA[
    /// <summary>
    /// Analyzes the <c>AccountingDistribution</c> records that are related to the specified record and
    /// then saves the result in the temporary <c>VersioningTmpTrans</c> table.
    /// </summary>
    /// <param name="_sourceDocumentLineRecId">
    /// The record that contains the <c>AccountingDistribution</c> record transactions.
    /// </param>
    /// <param name="_parentNodeRecId">
    /// The <c>RecId</c> field in the temporary table that holds a link to the parent to the
    /// <c>SourceDocumentDistribution</c> records.
    /// </param>
    protected void loadAccountingDistribution(RefRecId _sourceDocumentLineRecId, recId _parentNodeRecId)
    {
        AccountingEvent                 accountingEventNew;
        AccountingEvent                 accountingEventOld;
        AccountingDistribution          accountingDistribution;
        boolean                         foundOld;

        // find the approprite SourceDocumentEvents for given SourceDocumentLine at oldDateTime and newDateTime

        if (oldDateTime)
        {
            select firstonly RecId from accountingEventOld
                order by accountingEventOld.EventDateTime desc
                where accountingEventOld.EventDateTime <= oldDateTime
                   && accountingEventOld.EventDateTime
                exists join accountingDistribution
                    where accountingDistribution.AccountingEvent == accountingEventOld.RecId
                       && accountingDistribution.SourceDocumentLine  == _sourceDocumentLineRecId;
        }

        if (newDateTime)
        {
            select firstonly RecId from accountingEventNew
                order by accountingEventNew.EventDateTime desc
                where accountingEventNew.EventDateTime <= newDateTime
                   && accountingEventNew.EventDateTime
                exists join accountingDistribution
                    where accountingDistribution.AccountingEvent == accountingEventNew.RecId
                       && accountingDistribution.SourceDocumentLine  == _sourceDocumentLineRecId;
        }
        else
        {
            // using the unapproved version, if one exists.
            select firstonly RecId from accountingEventNew
                where !accountingEventNew.EventDateTime
                   && accountingEventNew.Type != AccountingEventType::PeriodOpen
                   && accountingEventNew.Type != AccountingEventType::PeriodClose
                exists join accountingDistribution
                    where accountingDistribution.AccountingEvent == accountingEventNew.RecId
                       && accountingDistribution.SourceDocumentLine  == _sourceDocumentLineRecId;

            // using the latest approved version, as there were no changes.
            if (!accountingEventNew.RecId)
            {
                select firstonly RecId from accountingEventNew
                    order by accountingEventNew.EventDateTime desc
                    where accountingEventNew.Type != AccountingEventType::PeriodOpen
                       && accountingEventNew.Type != AccountingEventType::PeriodClose
                    exists join accountingDistribution
                        where accountingDistribution.AccountingEvent == accountingEventNew.RecId
                           && accountingDistribution.SourceDocumentLine  == _sourceDocumentLineRecId;
            }
        }

        foundOld = (accountingEventNew.RecId == accountingEventOld.RecId);

        if (accountingEventNew.RecId)
        {
            while select accountingDistribution
                where accountingDistribution.SourceDocumentLine  == _sourceDocumentLineRecId
                   && accountingDistribution.AccountingEvent == accountingEventNew.RecId
                   && accountingDistribution.ReferenceRole   != AccountingDistributionReferenceRole::Reversing
            {
                this.insertVersioningTmpTrans(accountingDistribution, foundOld, true, accountingDistribution, accountingDistribution, _parentNodeRecId);
            }
        }

        if (!foundOld && accountingEventOld.RecId)
        {
            while select accountingDistribution
                where accountingDistribution.SourceDocumentLine  == _sourceDocumentLineRecId
                   && accountingDistribution.AccountingEvent == accountingEventOld.RecId
                   && accountingDistribution.ReferenceRole   != AccountingDistributionReferenceRole::Reversing
            {
                this.insertVersioningTmpTrans(accountingDistribution, true, false, accountingDistribution, accountingDistribution, _parentNodeRecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadData</Name>
				<Source><![CDATA[
    abstract protected void loadData()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadMarkup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Analyzes the <c>MarkupTrans</c> records related to the specified record and saves the result in the
    ///    <c>VersioningTmpTrans</c> temporary table.
    /// </summary>
    /// <param name="_common">
    ///    The record that owns the <c>MarkupTrans</c> transactions.
    /// </param>
    /// <param name="_parentNodeRecId">
    ///    The <c>RecId</c> field of the record in the temporary table that holds the parent to the
    ///    <c>MarkupTrans</c> records.
    /// </param>
    protected void loadMarkup(Common _common, recId _parentNodeRecId)
    {
        MarkupTrans                     markupTrans;
        MarkupTransHistory              markupTransOld;
        MarkupTransHistory              markupTransNew;
        recId                           markupTransNodeRecId;

        boolean                         foundNew;
        boolean                         foundOld;

        while select markupTrans
            where markupTrans.TransTableId == _common.TableId
            &&    markupTrans.TransRecId   == _common.RecId
        {
            markupTransOld  = MarkupTransHistory::find(markupTrans, oldDateTime);
            foundOld        = (markupTransOld.RecId != 0);

            if (newDateTime)
            {
                markupTransNew  = MarkupTransHistory::find(markupTrans, newDateTime);
                foundNew        = (markupTransNew.RecId != 0);
            }
            else
            {
                markupTransNew.initFromMarkupTrans(markupTrans);
                foundNew = !markupTrans.IsDeleted;
            }

            markupTransNodeRecId = this.insertVersioningTmpTrans(markupTrans, foundOld, foundNew, markupTransOld, markupTransNew, _parentNodeRecId);

            this.loadAccountingDistribution(markupTrans.SourceDocumentLine, markupTransNodeRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadVersioningTmpTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>VersioningTmpTrans</c> temporary table that is used to save the result of the
    ///    comparison.
    /// </summary>
    /// <returns>
    ///    The <c>VersioningTmpTrans</c> temporary table.
    /// </returns>
    /// <remarks>
    ///    The generic implementation of this method just deletes all existing records in the
    ///    <c>VersioningTmpTrans</c> temporary table.The individual extension on the class should override
    ///    this method and supply the specific data after a call to the <c>super</c> method.
    /// </remarks>
    public VersioningTmpTrans loadVersioningTmpTrans()
    {
        delete_from versioningTmpTrans;

        tmpTransLoaded = true;

        this.loadData();

        return versioningTmpTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>packVersioningTmpTrans</Name>
				<Source><![CDATA[
    public container packVersioningTmpTrans()
    {
        List list = new List(Types::Record);

        while select versioningTmpTrans
            order by RecId
        {
            list.addEnd(versioningTmpTrans);
        }

        return list.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVersioningTmpTrans</Name>
				<Source><![CDATA[
    protected VersioningTmpTrans parmVersioningTmpTrans(VersioningTmpTrans _versioningTmpTrans = versioningTmpTrans)
    {
        versioningTmpTrans = _versioningTmpTrans;

        return versioningTmpTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeEmptyTreeNodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes all nodes that do not have a change in them and in their child nodes.
    /// </summary>
    /// <returns>
    /// true if the there is no change in the nodes; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method can be used only on the <c>FormTreeControl</c> class.
    /// </remarks>
    public boolean removeEmptyTreeNodes()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeNodeName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the name of the tree node that represents the specified record.
    /// </summary>
    /// <param name="_common">
    ///    The record which should be used to name the node in the tree.
    /// </param>
    /// <returns>
    ///    The name of the tree node.
    /// </returns>
    /// <remarks>
    ///    The method is used to generate the name to be displayed in the tree structure. If not specific
    ///    handled the user interface name of the records without any key information is used.
    /// </remarks>
    protected VersioningRecordTooltip treeNodeName(Common _common)
    {
        PurchTable                  tmpPurchTable;
        PurchLine                   tmpPurchLine;
        CustPackingSlipJour         tmpCustPackingSlipJour;
        CustPackingSlipTrans        tmpCustPackingSlipTrans;
        VendPackingSlipJour         tmpVendPackingSlipJour;
        VendPackingSlipTrans        tmpVendPackingSlipTrans;
        MarkupTrans                 tmpMarkupTrans;

        str name = tableId2pname(_common.TableId);
        str id;
        str lineNum;

        switch (_common.TableId)
        {
            case tableNum(PurchTable):
                tmpPurchTable = _common;
                id = tmpPurchTable.PurchId;
                break;

            case tableNum(PurchLine):
                tmpPurchLine = _common;
                lineNum = int642str(tmpPurchLine.LineNumber);
                if (tmpPurchLine.ItemId)
                {
                    id = tmpPurchLine.ItemId;
                }
                else
                {
                    id = EcoResCategory::find(tmpPurchLine.ProcurementCategory).Name;
                }
                break;

            case tableNum(CustPackingSlipJour):
                tmpCustPackingSlipJour = _common;
                id = tmpCustPackingSlipJour.PackingSlipId;
                break;

            case tableNum(CustPackingSlipTrans):
                tmpCustPackingSlipTrans = _common;
                lineNum = strFmt("%1", tmpCustPackingSlipTrans.LineNum);
                if (tmpCustPackingSlipTrans.ItemId)
                {
                    id = tmpCustPackingSlipTrans.ItemId;
                }
                else
                {
                    id = EcoResCategory::find(tmpCustPackingSlipTrans.SalesCategory).Name;
                }
                break;

            case tableNum(VendPackingSlipJour):
                tmpVendPackingSlipJour = _common;
                id = tmpVendPackingSlipJour.PackingSlipId;
                break;

            case tableNum(VendPackingSlipTrans):
                tmpVendPackingSlipTrans = _common;
                lineNum = strFmt("%1", tmpVendPackingSlipTrans.LineNum);
                if (tmpVendPackingSlipTrans.ItemId)
                {
                    id = tmpVendPackingSlipTrans.ItemId;
                }
                else
                {
                    id = EcoResCategory::find(tmpVendPackingSlipTrans.ProcurementCategory).Name;
                }
                break;

            case tableNum(MarkupTrans):
                tmpMarkupTrans = _common;
                id = tmpMarkupTrans.MarkupCode;
                break;

            default:
                break;
        }

        if (lineNum)
        {
            name += ' #' + lineNum;
        }

        if (id)
        {
            name += ': ' + id;
        }
        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Instantiates a new instance of the <c>VersioningCompare</c> class based on the specified
    ///    <c>FormTreeControl</c> control and data source record.
    /// </summary>
    /// <param name="_common">
    ///    The record that represents the form data source that holds the versions. For example, a
    ///    <c>PurchTableVersion</c> record.
    /// </param>
    /// <param name="_newVersion">
    ///    The record that represents the form data source that holds the versions. For example, a
    ///    <c>PurchTableVersion</c> record.
    /// </param>
    /// <returns>
    ///    An instance of the <c>VersionCompare</c> class.
    /// </returns>
    public static VersioningCompare newForm(
        Common                      _common,
        Common                      _newVersion = null
        )
    {
        VersioningCompare       versioningCompare;
        Common                  common;

        PurchTable              purchTable;
        PurchTableAllVersions   purchTableAllVersions;
        PurchReqTable           purchReqTable;
        PurchReqTableVersion    purchReqTableVersion;
        CustPackingSlipJour     custPackingSlipJour;
        CustPackingSlipVersion  custPackingSlipVersion;

        switch (_common.TableId)
        {
            case tableNum(PurchTable):
                purchTable = _common;
                select firstonly purchTableAllVersions
                    order by VersionDateTime desc
                    where purchTableAllVersions.PurchId == purchTable.PurchId;
                common = purchTableAllVersions;
                break;

            case tableNum(PurchReqTable):
                purchReqTable = _common;
                select firstonly purchReqTableVersion
                    order by VersionDateTime desc
                    where purchReqTableVersion.PurchReqTable == purchReqTable.RecId;
                common = purchReqTableVersion;
                break;

            case tableNum(CustPackingSlipJour):
                custPackingSlipJour = _common;
                select firstonly custPackingSlipVersion
                    order by VersionDateTime desc
                    where custPackingSlipVersion.CustPackingSlipJour == custPackingSlipJour.RecId;
                common = custPackingSlipVersion;
                break;

            default:
                common = _common;
        }

        versioningCompare = VersioningCompare::newTableId(common.TableId);
        versioningCompare.initCallerRecord(common, _newVersion);

        return versioningCompare;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTableId</Name>
				<Source><![CDATA[
    public static VersioningCompare newTableId(tableId _versionTableId)
    {
        VersioningCompare   versioningCompare;

        switch (_versionTableId)
        {
            case tableNum(PurchTableAllVersions):
                versioningCompare = VersioningComparePurchTable::construct();
                break;

            case tableNum(PurchReqTableVersion):
                versioningCompare = VersioningComparePurchReq::construct();
                break;

            case tableNum(VendPackingSlipVersion):
                versioningCompare = VersioningCompareVendPackingSlipJour::construct();
                break;

            case tableNum(CustPackingSlipVersion):
                versioningCompare = VersioningCompareCustPackingSlipJour::construct();
                break;

            case tableNum(TSTimesheetTableLog):
                versioningCompare = VersioningCompareTimesheet::construct();
                break;

            default:
                break;
        }
        return versioningCompare;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Instantiates a new instance of the <c>VersioningCompare</c> class based on the specified records.
    /// </summary>
    /// <param name="_common">
    ///    The record that holds the versions. For example, a <c>PurchTableVersion</c> record.
    /// </param>
    /// <param name="_alternateNewVersion">
    ///    A second record from a table mapped by the <c>VersioningVersionMap</c> database map. This is an
    ///    alternative to multiselection in a form data source; optional.
    /// </param>
    /// <returns>
    ///    An instance of the <c>VersionCompare</c> class.
    /// </returns>
    /// <remarks>
    ///    If only one version is specified; the comparison will be against the current version.
    /// </remarks>
    public static VersioningCompare newVersion(Common _common, Common _alternateNewVersion = null)
    {
        VersioningCompare versioningCompare;

        versioningCompare = VersioningCompare::newTableId(_common.TableId);
        versioningCompare.initCallerRecord(_common, _alternateNewVersion);

        return versioningCompare;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packFromEP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a container by using a comparison based on the specified data source record.
    /// </summary>
    /// <param name="_callerRecord">
    /// A record that represents the form data source that holds the versions such as a
    /// <c>PurchTableVersion</c> record.
    /// </param>
    /// <param name="_newVersionMap">
    /// The map represents a newer version of the data source record.
    /// </param>
    /// <returns>
    /// A container that is a packed <c>List</c> class that contains the <c>VersioningTmpTrans</c> records.
    /// </returns>
    /// <remarks>
    /// This method is called from the Enterprise Portal Web pages.
    /// </remarks>
    public static container packFromEP(Common _callerRecord, Common _newVersionMap)
    {
        VersioningCompare   versioningCompare;

        versioningCompare = VersioningCompare::newForm(_callerRecord, _newVersionMap);

        versioningCompare.loadVersioningTmpTrans();

        return versioningCompare.packVersioningTmpTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>packFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a container with the comparison based on the specified data source record.
    /// </summary>
    /// <param name="_common">
    ///    The record that represents the form data source that holds the versions. For example, a
    ///    <c>PurchTableVersion</c> record.
    /// </param>
    /// <returns>
    ///    A container which is a packed instance of the <c>List</c> class that contains the
    ///    <c>VersioningTmpTrans</c> records.
    /// </returns>
    public static container packFromForm(Common _common)
    {
        VersioningCompare   versioningCompare = VersioningCompare::newForm(_common);

        versioningCompare.loadVersioningTmpTrans();

        return versioningCompare.packVersioningTmpTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackVersioningTmpTrans</Name>
				<Source><![CDATA[
    public static VersioningTmpTrans unpackVersioningTmpTrans(container _container)
    {
        VersioningTmpTrans  versioningTmpTrans;
        Map                 recIdMap            = new Map(typeName2Type(extendedTypeStr(recId)), typeName2Type(extendedTypeStr(recId)));
        List                list                = List::create(_container);
        ListEnumerator      listEnumerator      = list.getEnumerator();

        recId               recIdOrig;

        while (listEnumerator.moveNext())
        {
            versioningTmpTrans.data(listEnumerator.current());

            if (recIdMap.exists(versioningTmpTrans.ParentVersioningTmpTrans))
            {
                versioningTmpTrans.ParentVersioningTmpTrans = recIdMap.lookup(versioningTmpTrans.ParentVersioningTmpTrans);
            }

            recIdOrig = versioningTmpTrans.RecId;

            versioningTmpTrans.insert();

            recIdMap.insert(recIdOrig, versioningTmpTrans.RecId);
        }

        return versioningTmpTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>