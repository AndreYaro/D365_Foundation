<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayTblDimensionFillerRate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Fills rates dimensions.
/// </summary>
class RPayTblDimensionFillerRate implements RPayTblIDimensionFiller
{
    #define.RateLength(3)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fill</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fill the time dimensions.
    /// </summary>
    /// <param name="_list">
    /// The list of dimensinos.
    /// </param>
    /// <param name="_context">
    /// The time context.
    /// </param>
    /// <returns>
    /// The time list entity.
    /// </returns>
    public RPayTblTimeList fill(RPayTblTimeList _list, RPayTblContext _context)
    {
        RPayTblTimeList ret = _list.clone();
        Counter i;

        for (i = 1; i <= #RateLength; i++)
        {
            ret = this.fillSingleRate(ret, _context, i);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSingleRate</Name>
				<Source><![CDATA[
    private RPayTblTimeList fillSingleRate(RPayTblTimeList _list, RPayTblContext _context, int _rateNum)
    {
        RPayTblTimeList     ret = new RPayTblTimeList();
        RPayTblTime         tmpTime;
        RPayTblTime         curTime;
        ListEnumerator      le;
        RPayTblParameters   params = RPayTblParameters::find();
        RPayTblParameters   parameters = RPayTblParameters::find();
        container           rates;
        RPayRateCallContext rateContext = RPayRateCallContext::construct(_context.parmStartDate(), _context.parmEmpId());
        RPayRateValue       rateValue;
        int                 i;
        TransDate           start, end;

        le = _list.periods().getEnumerator();
        while (le.moveNext())
        {
            curTime = le.current();
            rates = this.getRatesValueCollection(curTime, _rateNum, rateContext, _context.parmStartDate(), _context.parmEndDate());
            for (i = 1; i <= conLen(rates); i++)
            {
                rateValue   = conPeek(conPeek(rates, i), 3);
                start       = conPeek(conPeek(rates, i), 1);
                end         = conPeek(conPeek(rates, i), 2);

                if (start > curTime.parmEndDate()
                || end < curTime.parmStartDate())
                {
                    continue;
                }

                tmpTime = curTime.clone();
                tmpTime.dimension().parmTblRate(conPoke(tmpTime.dimension().parmTblRate(), _rateNum, rateValue));
                tmpTime.parmStartDate(max(curTime.parmStartDate(), start));
                tmpTime.parmEndDate(min(curTime.parmEndDate(), end));
                ret.addEnd(tmpTime);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRatesValueCollection</Name>
				<Source><![CDATA[
    private container getRatesValueCollection(RPayTblTime _time, int _rateNum, RPayRateCallContext _callContext, StartDate _startDate, EndDate _endDate)
    {
        RPayRateTable       rateTable;
        RPayTblJournal      journal  = RPayTblJournal::findByIndex(_time.dimension().parmOrganizationId(),
                                                                   _time.dimension().parmSourceDate(),
                                                                   _time.dimension().parmPayFormType());
        RPayTblParameters parameters = RPayTblParameters::find();

        rateTable = RPayRateTable::find(journal ? journal.PayRate[_rateNum] : parameters.PayRate[_rateNum]);

        return  rateTable ? rateTable.rateValueCollection(_callContext, _startDate, _endDate) :  [[_startDate, _endDate, 0]];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>