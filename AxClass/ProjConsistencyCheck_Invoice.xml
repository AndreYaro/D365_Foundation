<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>ProjConsistencyCheck_Invoice</Name>
  <SourceCode>
    <Declaration><![CDATA[
public class ProjConsistencyCheck_Invoice extends SysConsistencyCheck implements BatchRetryable
{
    QueryRun    queryRun;

    #DEFINE.CurrentVersion(1)
}
]]></Declaration>
    <Methods>
      <Method>
        <Name>checkFixProjProposalItem</Name>
        <Source><![CDATA[
    private void checkFixProjProposalItem()
    {
        DictTable        dictTable;
        ProjProposalItem projProposalItem;
        str              s;
        Query            q;
        QueryRun         qr;

        // projProposalItem - exclude unposted sales order lines

        dictTable = new DictTable(tablenum(ProjProposalItem));
        s = strfmt("@SYS26373", dictTable.label());
        progress.setText(s,2);
        setprefix(s);

        q = new Query();
        q.addDataSource(tablenum(ProjProposalItem));
        qr = new QueryRun(q);

        while (qr.next())
        {
            projProposalItem = qr.get(tablenum(ProjProposalItem));

            if (projProposalItem.SalesId && !ProjProposalJour::find(projProposalItem.ProposalId).ProjInvoiceId)
            {
                continue;
            }

            this.kernelCheckRecord(projProposalItem,dictTable);
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>configurationKey</Name>
        <Source><![CDATA[
    public configurationKeyId configurationKey()
    {
        return configurationkeynum(Project);
    }

]]></Source>
      </Method>
      <Method>
        <Name>dialog</Name>
        <Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be built by using the <c>Dialog</c> class or by using a class that is created in
    /// the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        FormRun formRun = classfactory.createQueryForm(this);
        ;
        formRun.init();
        return formRun;
    }

]]></Source>
      </Method>
      <Method>
        <Name>executionOrder</Name>
        <Source><![CDATA[
    public Integer executionOrder()
    {
        return 6;
    }

]]></Source>
      </Method>
      <Method>
        <Name>hasDialog</Name>
        <Source><![CDATA[
    public boolean hasDialog()
    {
        return true;
    }

]]></Source>
      </Method>
      <Method>
        <Name>new</Name>
        <Source><![CDATA[
    public void new()
    {
        Query query;
        ;
        if (this.showInTree())
        {
            query = new Query();
            query.addDataSource(tablenum(ProjInvoiceTable));
            queryRun = new QueryRun(query);
        }

        super();
    }

]]></Source>
      </Method>
      <Method>
        <Name>pack</Name>
        <Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, queryRun.pack()];
    }

]]></Source>
      </Method>
      <Method>
        <Name>queryRun</Name>
        <Source><![CDATA[
    /// <summary>
    /// Retrieves the instance of the <c>QueryRun</c> class that is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    /// The instance of the <c>QueryRun</c> class that is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    /// This method is used if the dialog box is a query prompt, and a Select menu item is added to it. Do
    /// not create an instance of the <c>QueryRun</c> class when this method is called. Instead, create the
    /// instance in the <c>unpack</c> and <c>initParmDefault</c> methods, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
      </Method>
      <Method>
        <Name>run</Name>
        <Source><![CDATA[
    /// <summary>
    /// Performs the task of the class.
    /// </summary>
    public void run()
    {
        this.kernelCheckTable(tablenum(ProjInvoiceTable));

        this.kernelCheckTable(tablenum(ProjInvoiceJour));

        this.kernelCheckTable(tablenum(ProjInvoiceEmpl));

        this.kernelCheckTable(tablenum(ProjInvoiceItem));

        this.kernelCheckTable(tablenum(ProjInvoiceCost));

        this.kernelCheckTable(tablenum(ProjInvoiceOnAcc));

        this.kernelCheckTable(tablenum(ProjInvoiceRevenue));

        this.kernelCheckTable(tablenum(ProjProposalJour));

        this.kernelCheckTable(tablenum(ProjProposalEmpl));

        this.checkFixProjProposalItem();

        this.kernelCheckTable(tablenum(ProjProposalCost));

        this.kernelCheckTable(tablenum(ProjProposalOnAcc));

        this.kernelCheckTable(tablenum(ProjProposalRevenue));
    }

]]></Source>
      </Method>
      <Method>
        <Name>treeParentClassId</Name>
        <Source><![CDATA[
    public classId treeParentClassId()
    {
        return classnum(ProjConsistencyCheck);
    }

]]></Source>
      </Method>
      <Method>
        <Name>unpack</Name>
        <Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version     = conpeek(_packedClass,1);
        container   packedQuery;

        switch (version)
        {
            case #CurrentVersion :
                [version, packedQuery] = _packedClass;
                if (packedQuery)
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
      </Method>
      <Method>
        <Name>description</Name>
        <Source><![CDATA[
    private static ClassDescription description()
    {
        return "@SYS55312";
    }

]]></Source>
      </Method>
      <Method>
        <Name>helpText</Name>
        <Source><![CDATA[
    private static HelpTxt helpText()
    {
        return "@SYS58227";
    }

]]></Source>
      </Method>
      <Method>
        <Name>isRetryable</Name>
        <Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source>
      </Method>
    </Methods>
  </SourceCode>
</AxClass>