<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TsPeriods</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TsPeriods
{
    #TimeConstants

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>date2StrUsrMMDD</Name>
				<Source><![CDATA[
    /// <summary>
    /// date2StrUsrMMDD returns a date pattern of month and day based on the current user locale
    /// </summary>
    /// <param name="_transDate">
    /// The date that needs to be converted to MMDD
    /// </param>
    /// <returns>
    /// a string date with pattern MMDD based on the current user locale
    /// </returns>
    public static TempStr date2StrUsrMMDD(date _transDate)
    {
        /// As per the documentation for date2Str, "To use the date format that
        /// the user specified in Regional Settings, use the strFmt or date2Str
        /// function with -1 in all the formatting parameters".
        return date2str(_transDate, -1, DateDay::Digits2, -1, DateMonth::Digits2, -1, DateYear::None, DateFlags::FormatAll);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDateCaption</Name>
				<Source><![CDATA[
    public static str getDateCaption(TransDate _date)
    {
        TSWeekDayAbbrev dayAbbr = dayOfWk( _date);
        str             dateStr = TSPeriods::date2StrUsrMMDD(_date);

        return strFmt("%1 %2",enum2str(dayAbbr), dateStr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDateCaptionUsr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a user localized date string in containing two-part date
    /// (e.g. "mm/dd" and short textual representation of the day (e.g. "Mon").
    /// </summary>
    /// <param name="_date">
    /// Date to format.
    /// </param>
    /// <param name="_cultureCode">
    /// Culture Code to use when formatting the date.
    /// </param>
    /// <returns>
    /// User localized date string.
    /// </returns>
    /// <remarks>
    /// Will only consider the user's AX language, not the OS Region Settings
    /// to format the date.
    /// </remarks>
    static str getDateCaptionUsr(
        TransDate _date,
        str       _cultureCode)
    {
        /// First get the culture of the user and the text of the date (e.g. "Mon").
        str                              dateName    = TSPeriods::getLocalizedDayOfWeek(_date);
        System.Globalization.CultureInfo userCulture = System.Globalization.CultureInfo::GetCultureInfo(_cultureCode);

        /// Clone user culture to be able to modify it if its calendar is not Gregorian.
        userCulture = userCulture.Clone();

        System.Globalization.DateTimeFormatInfo userDateFormat      = userCulture.get_DateTimeFormat();
        System.Globalization.Calendar           userCultureCalendar = userDateFormat.get_Calendar();

        if (!(userCultureCalendar is System.Globalization.GregorianCalendar))
        {
            /// There is no need to check if the culture supports Gregorian calendar. All
            /// the cultures that .NET framework has implemented support Gregorian calendar.
            userDateFormat.set_Calendar(new System.Globalization.GregorianCalendar());
        }

        /// Construct the two part date format for the user, namely transforming "yyyy-mm-dd" to "mm-dd".
        str             dateFormat              = userDateFormat.get_ShortDatePattern();
        str             dateFormatSeperator     = userDateFormat.get_DateSeparator();
        List            dateParts               = strSplit(dateFormat, dateFormatSeperator);
        ListEnumerator  dateFormatEnumerator    = dateParts.getEnumerator();
        int             dateFormatRelevantIndex = 1;
        str             dateFormatRelevantParts[];

        while (dateFormatEnumerator.moveNext())
        {
            if (!Global::strContains(dateFormatEnumerator.current(), 'y'))
            {
                dateFormatRelevantParts[dateFormatRelevantIndex] = dateFormatEnumerator.current();
                dateFormatRelevantIndex++;
            }
        }

        /// Enforce the two digit day/month format.
        if (Global::strContains(dateFormatRelevantParts[1], 'd'))
        {
            dateFormat = strFmt('dd%1MM', dateFormatSeperator);
        }
        else
        {
            dateFormat = strFmt('MM%1dd', dateFormatSeperator);
        }

        /// Format the date appropriately and concatenate it with the name (e.g. "Mon") of the date.
        System.DateTime  userDate  = _date;

        return strFmt("%1 %2", dateName, userDate.ToString(dateFormat, userCulture));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDayOffset</Name>
				<Source><![CDATA[
    public static int getDayOffset(
        WeekDays  _startOfWeek,
        TransDate _date)
    {
        WeekDays    startOfWeek = _startOfWeek == WeekDays::None ? WeekDays::Monday : _startOfWeek;
        WeekDays    dayOfWeek   = dayOfWk(_date);
        int         result;

        if (startOfWeek == 1)
        {
            result = dayOfWeek;
        }
        else
        {
            if (startOfWeek <= dayOfWeek)
            {
                result = dayOfWeek - startOfWeek + 1;
            }
            else
            {
                result = #daysPerWeek + 1 - (startOfWeek - dayOfWeek);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineWeekDateCaptions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the localized short string representation of the days in a line week for a specific date and culture code, including a
    /// short representation of the day of week and day/month representation of the date.
    /// </summary>
    /// <param name="_startOfWeek">
    /// Start day of the line week.
    /// </param>
    /// <param name="_dateFrom">
    /// Start date of the line week.
    /// </param>
    /// <param name="_dateTo">
    /// End date of the line week.
    /// </param>
    /// <param name="_cultureCode">
    /// Culture Code to use to localize the name of the day.
    /// </param>
    /// <returns>
    /// An array of localized short string presentations of a line week, using short representation for the day of week and day/month
    /// representation of the date.  For example, "Tue 12/09" for en-us or "Di 09.12" for de-de.
    /// </returns>
    /// <remarks>
    /// The method will use the passed in "_cultureCode" variable to determine the locale to use for localization of dates given that
    /// the user's AX language might not have a deterministic date format (e.g. "zh-CHS"). Also, the method will always use two digits
    /// for the day and two digits for the month portion of the date for all languages (e.g. "09.12" rather than "9.12" for de-de).
    /// The method will use the user's AX language settings to determine the localization for the string representation of the day of
    /// week.
    /// </remarks>
    public static Array getLineWeekDateCaptions(
        WeekDays  _startOfWeek,
        TransDate _dateFrom,
        TransDate _dateTo,
        str       _cultureCode)
    {
        Array dates      = TSPeriods::getLineWeekDates(_startOfWeek, _dateFrom, _dateTo);
        Array dateValues = new Array(Types::String);

        for (int i = 1; i <= #daysPerWeek; i++)
        {
            if (dates.value(i) != dateNull())
            {
                dateValues.value(i, TSPeriods::getDateCaptionUsr(dates.value(i), _cultureCode));
            }
        }

        return dateValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineWeekDates</Name>
				<Source><![CDATA[
    public static Array getLineWeekDates(
        WeekDays  _startOfWeek,
        TransDate _dateFrom,
        TransDate _dateTo)
    {
        Array weekDays = new Array(Types::Date);

        for (int i = 1; i <= #daysPerWeek; i++)
        {
            weekDays.value(i,dateNull());
        }

        WeekDays startOfWeek = _startOfWeek == WeekDays::None ? WeekDays::Monday : _startOfWeek;

        for (TransDate transDate = _dateFrom; transDate <= _dateTo; transDate++)
        {
            weekDays.value(TSPeriods::getDayOffset(startOfWeek,transDate),transDate);
        }

        return weekDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLocalizedDayOfWeek</Name>
				<Source><![CDATA[
    /// <summary>
    /// getLocalizedDayOfWeek returns a day of week.
    /// </summary>
    /// <param name="_date">
    /// The date passed for which day need to be returned.
    /// </param>
    /// <returns>
    /// A enum string for the weekday number.
    /// </returns>
    public static str getLocalizedDayOfWeek(TransDate _date)
    {
        TSWeekDayAbbrev dayAbbr = dayOfWk(_date);

        return enum2str(dayAbbr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStartOfWeekOffset</Name>
				<Source><![CDATA[
    public static TransDate getStartOfWeekOffset(
        WeekDays  _startOfWeek,
        TransDate _date)
    {
        WeekDays    startOfWeek           = _startOfWeek == WeekDays::None ? WeekDays::Monday : _startOfWeek;
        int         firstDayOfWeek        = WeekDays::Monday + startOfWeek - 1;
        int         startDayOfWeek        = dayOfWk(_date);
        int         dayOfWeekOffset       = firstDayOfWeek - startDayOfWeek;
        date        startDateOfWeekOffset = _date + dayOfWeekOffset;

        date loopDateBegin;
        date loopDateEnd;

        if (dayOfWeekOffset > 0)
        {
            loopDateEnd   = startDateOfWeekOffset - 1;
            loopDateBegin = loopDateEnd - (#daysPerWeek - 1);
        }
        else
        {
            loopDateBegin = startDateOfWeekOffset;
            loopDateEnd   = loopDateBegin + (#daysPerWeek - 1);
        }

        return loopDateBegin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSummaryWeekDayAbbrevations</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns an array of week day names in short format
    /// </summary>
    /// <param name="_startOfWeek">
    ///     The day with which the week starts
    /// </param>
    /// <returns>
    ///     Array of week day names
    /// </returns>
    public static Array getSummaryWeekDayAbbrevations(TSWeekDayAbbrev _startOfWeek)
    {
        TSWeekDayAbbrev weekDayAbbrev = _startOfWeek == TSWeekDayAbbrev::None ? TSWeekDayAbbrev::Monday : _startOfWeek;
        Array           weekDays      = new Array(Types::String);

        for (int i = 1; i <= #daysPerWeek; i++)
        {
            if (enum2str(weekDayAbbrev) == "")
            {
                weekDayAbbrev = TSWeekDayAbbrev::Monday;
            }

            weekDays.value(i,enum2str(weekDayAbbrev));
            // The enum values of TSWeekDayAbbrev need to remain 1-7
            weekDayAbbrev++;
        }

        return weekDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSummaryWeekDayCaptions</Name>
				<Source><![CDATA[
    public static Array getSummaryWeekDayCaptions(WeekDays _startOfWeek)
    {
        WeekDays    startOfWeek = _startOfWeek == WeekDays::None ? WeekDays::Monday : _startOfWeek;
        TSWeekStart currDay     = startOfWeek;
        Array       weekDays    = new Array(Types::String);

        for (int i = 1; i <= #daysPerWeek; i++)
        {
            if (!enum2str(currDay))
            {
                currDay = WeekDays::Monday;
            }
            weekDays.value(i,enum2str(currDay));
            currDay ++;
        }

        return weekDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWeekDayCaptions</Name>
				<Source><![CDATA[
    public static Array getWeekDayCaptions(
        WeekDay   _startOfWeek,
        TransDate _dateFrom,
        TransDate _dateTo)
    {
        WeekDays    startOfWeek = _startOfWeek == WeekDays::None ? WeekDays::Monday : _startOfWeek;
        Array       result      = new Array(Types::String);

        for (int i = 1; i <= #daysPerWeek; i++)
        {
            result.value(i,'');
        }

        for (TransDate transDate =_dateFrom; transDate <= _dateTo; transDate++)
        {
            result.value(TSPeriods::getDayOffset(startOfWeek,transDate),TSPeriods::getDateCaption(transDate));
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>