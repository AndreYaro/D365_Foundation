<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransferMulti</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventTransferMulti</c> class is the base class that handles updates for the <c>Transfer
///    orders_@SYS78286</c> module.
/// </summary>
abstract class InventTransferMulti extends RunBaseMultiParm
{
    // Packed - this is the default settings
    InventTransferParmTable     standardTransferParmTable;
    InventTransferParmUpdate    standardTransferParmUpdate;

    LtDocNumberingCode          ltDocNumberingCode;

    Map                         inventTransferParmTableToPrintDataMap;
    container                   inventTransferParmTableToPrintData;

    internal protected static boolean      isSkipAddUpdateRecordsFlightEnabled = InventTransferMultiSkipAddUpdateRecordsFlight::instance().isEnabled();
    internal protected static boolean      isSkipCreatePrintDataProviderFlightEnabled = InventTransferMultiSkipCreatePrintDataProviderFlight::instance().isEnabled();

    #EECountryRegionCodes
    boolean isContext_easternEuropeAllandRU;
    boolean calledFromWMS;
    boolean calledFromReleaseOrder;
    container printSettings;

    #ISOCountryRegionCodes
    boolean isContext_RU;

    #DEFINE.CurrentVersion(106)
    #LOCALMACRO.CurrentList
        standardTransferParmTable,
        calledFromWMS,
        calledFromReleaseOrder,
        standardTransferParmUpdate
        ,ltDocNumberingCode
        ,printSettings
    #ENDMACRO

    #LOCALMACRO.CurrentListNewSession
        #CurrentList,
        inventTransferParmTableToPrintData
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>callPrinterSettingsFormletter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows the user to modify the printer settings using the standard print job settings dialog.
    /// </summary>
    /// <param name="_printerSettings">
    /// A printersetting container.
    /// </param>
    /// <param name="_caller">
    /// The form calling the printer setup.
    /// </param>
    /// <returns>
    /// A container with the printersettings.
    /// </returns>
    public container callPrinterSettingsFormletter(
        container   _printerSettings,
        FormRun     _caller)
    {
        // If no printer settings have been provided, retrieve the print settings from syslastvalue
        if (conLen(_printerSettings) == 0)
        {
            _printerSettings = xSysLastValue::getValue(curext(), curUserId(), UtilElementType::Form, _caller.name());
        }
        _printerSettings = InventTransferMulti::callPrinterSettings(_printerSettings);
        xSysLastValue::putValue(_printerSettings, curext(), curUserId(), UtilElementType::Form, _caller.name());

        printSettings = _printerSettings;

        return _printerSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the class is shown in the list of <c>Journal</c> types.
    /// </summary>
    /// <returns>
    ///    true if the class is shown in the list of <c>Journal</c> types; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A class that can be used in a batch journal is a class where the same parameters can be used
    ///    repeatedly. The dialog can be shown and the parameters can be changed but parameters of some
    ///    classes might build on data that is only valid for a short time. Running a class twice with the
    ///    same parameters is not always possible. If the return value of the <see
    ///    cref="M:RunBaseBatch.canGoBatch" /> method is false, this method will not have any effect.
    /// </remarks>
    boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBuffer</Name>
				<Source><![CDATA[
    boolean checkBuffer(Common   _inventTransferTable)
    {
        InventTransferTable inventTransferTable = _inventTransferTable as InventTransferTable;
        return (! InventTransferParmTable::exist(parmId,inventTransferTable.TransferId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCloseDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the dialog box can be closed.
    /// </summary>
    /// <param name="_calledFrom">
    ///    The object that called this method; optional.
    /// </param>
    /// <returns>
    ///    true if the dialog box can be closed; otherwise, false.
    /// </returns>
    public boolean checkCloseDialog(Object _calledFrom = null)
    {
        boolean ret = super(_calledFrom);

        ret = ret && this.checkLateSelection();

        ret = this.checkParmLine_RU() && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkParmLine_RU</Name>
				<Source><![CDATA[
    public boolean checkParmLine_RU()
    {
        InventTransferParmLine  inventTransferParmLinePos, inventTransferParmLineNeg;
        InventTransferParmTable inventTransferParmTableLocal;

        boolean  ret = true;

        if (isContext_RU || BrazilParameters::isEnabled())
        {
            FieldId qtyUpdateFieldId = this.qtyUpdateFieldId_RU();

            while select ParmId, TransferId from inventTransferParmTableLocal
                where inventTransferParmTableLocal.ParmId == parmId
            {
                setPrefix(#PreFixField(inventTransferParmTableLocal,TransferId));
                select firstonly inventTransferParmLinePos
                    where inventTransferParmLinePos.ParmId        == inventTransferParmTableLocal.ParmId     &&
                          inventTransferParmLinePos.TransferId    == inventTransferParmTableLocal.TransferId &&
                          inventTransferParmLinePos.(qtyUpdateFieldId) > 0;

                select firstonly inventTransferParmLineNeg
                    where inventTransferParmLineNeg.ParmId        == inventTransferParmTableLocal.ParmId     &&
                          inventTransferParmLineNeg.TransferId    == inventTransferParmTableLocal.TransferId &&
                          inventTransferParmLineNeg.(qtyUpdateFieldId) < 0;

                if (inventTransferParmLinePos && inventTransferParmLineNeg)
                {
                    ret = checkFailed("@GLS113809");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides a way to clean up after a dialog box has been canceled.
    /// </summary>
    void cleanupDialog()
    {
        //cascading delete should remove all parm related tables
        InventTransferParmUpdate::deleteParameters(this.parmId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultParmBuffer</Name>
				<Source><![CDATA[
    ParmBuffer defaultParmBuffer()
    {
        InventTransferParmTable     inventTransferParmTable;

        return inventTransferParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultParmUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the default <c>InventTransferParmUpdate</c> record that is used for updates.
    /// </summary>
    /// <returns>
    ///    The default <c>InventTransferParmUpdate</c> record that is used for updates.
    /// </returns>
    public ParmUpdate defaultParmUpdate()
    {
        InventTransferParmUpdate inventTransferParmUpdate;

        return inventTransferParmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    public abstract FormName formName()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOfficials_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes default officials for <c>InventTransferParmTable</c> record.
    /// </summary>
    /// <param name="_inventTransferParmTable">
    ///     <c>InventTransferParmTable</c> record for initializing.
    /// </param>

    public void initOfficials_RU(InventTransferParmTable _inventTransferParmTable)
    {
        OfficialsServ_RU officialsServ;

        officialsServ = new OfficialsServ_RU();
        officialsServ.initTableTransfer(_inventTransferParmTable);
        _inventTransferParmTable.OffSessionId_RU = officialsServ.newId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmBuffer</Name>
				<Source><![CDATA[
    void initParmBuffer(ParmBuffer     _inventTransferParmTable)
    {
        InventTransferParmTable     inventTransferParmTable = _inventTransferParmTable;
        InventTransferParmTable     saveInventTransferParmTable;

        saveInventTransferParmTable.data(_inventTransferParmTable);
        _inventTransferParmTable.data(standardTransferParmTable);

        inventTransferParmTable.ParmId                  = saveInventTransferParmTable.ParmId;
        inventTransferParmTable.LineNum                 = saveInventTransferParmTable.LineNum;
        inventTransferParmTable.RecId                   = saveInventTransferParmTable.RecId;
        inventTransferParmTable.TransferId              = saveInventTransferParmTable.TransferId;
        inventTransferParmTable.UpdatedByWorker         = inventTransferParmTable.UpdatedByWorker ? inventTransferParmTable.UpdatedByWorker : DirPersonUserEx::findUserWorkerReference();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes values in the specified <c>InventTransferParmUpdate</c>.
    /// </summary>
    /// <param name="_inventTransferParmUpdate">
    ///    The <c>InventTransferParmUpdate</c> that should be initialized.
    /// </param>
    public void initParmUpdate(ParmUpdate _inventTransferParmUpdate)
    {
        InventTransferParmUpdate saveInventTransferparmUpdate;

        //save values from passed parmUpdate
        saveInventTransferparmUpdate.data(_inventTransferParmUpdate);

        //init values based on packed default buffer
        _inventTransferParmUpdate.data(standardTransferParmUpdate);

        //copy specific values that should not be taken from the persisted parmUpdate (standardTransferParmUpdate)
        _inventTransferParmUpdate.ParmId = saveInventTransferparmUpdate.ParmId;

        //storno flag
        _inventTransferParmUpdate.Storno_RU = InventParameters::find().CreditStornoTransferJournal_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    void insert(Common _common, ParmBuffer _inventTransferParmTable)
    {
        InventTransferParmTable inventTransferParmTable = _inventTransferParmTable;        

        super(_common, _inventTransferParmTable);

        switch (_common.TableId)
        {
            case tableNum(InventTransferTable):
                InventTransferTable inventTransferTable = _common as InventTransferTable;
            
                this.updateInventTransferParmTable(inventTransferParmTable, inventTransferTable);

                inventTransferParmTable.insert();

                if (InventTransferParmTableFiscalInfo_BR::shouldCreateFiscalInfoParm(inventTransferTable))
                {
                    InventTransferParmTableFiscalInfo_BR inventTransferParmTableFiscalInfo_BR;

                    inventTransferParmTableFiscalInfo_BR.initFromParmTable(inventTransferParmTable, inventTransferTable);

                    InventTransferParmTableFiscalInfo_BR.insert();
                }
                break;

            case tableNum(InventTransferJour):
                InventTransferJour inventTransferJour = _common as InventTransferJour;

                inventTransferParmTable.CanceledShipmentJournalRecId = inventTransferJour.RecId;
                inventTransferParmTable.TransferId = inventTransferJour.TransferId;
                inventTransferParmTable.VoucherShipmentId = inventTransferJour.VoucherId;
                inventTransferParmTable.insert();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventTransferParmTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates transfer order parm table instance.
    /// </summary>
    /// <param name = "_inventTransferParmTable">A transfer order parm table.</param>
    /// <param name = "_inventTransferTable">A transfer order.</param>
    protected void updateInventTransferParmTable(InventTransferParmTable _inventTransferParmTable, InventTransferTable _inventTransferTable)
    {
        _inventTransferParmTable.TransferId = _inventTransferTable.TransferId;

        // <GIN>
        boolean TheTransactionIdOfSTOReceiveTakeFromSTOShipmentFeatureEnable = InventSTOReceiveTransactionIdTakeFromSTOShipmentFeatureExposure::isEnabled();

        if (TaxParameters::checkTaxParameters_IN() && TheTransactionIdOfSTOReceiveTakeFromSTOShipmentFeatureEnable)
        {
            if (_inventTransferParmTable.UpdateType == InventTransferUpdateType::Receive)
            {
                _inventTransferParmTable.ReceiveUpdateQty = InventTransferReceiveUpdateQty::Shipment;
            }
        }
        // </GIN>

        if (isContext_RU)
        {
            _inventTransferParmTable.initFromInventTransferTable_RU(_inventTransferTable);
        }

        if (isContext_easternEuropeAllandRU)
        {
            OfficialsServ_RU officialsServ = new OfficialsServ_RU();
            officialsServ.initTableTransfer(_inventTransferParmTable);
            _inventTransferParmTable.OffSessionId_RU = officialsServ.newId();
        }

        if (BrazilParameters::isEnabled())
        {
            if (_inventTransferTable.inventTransferTableFiscalInfo_BR().isFiscalEstablishmentOrder())
            {
                _inventTransferParmTable.AutoReceiveQty = false;
            }
        }

        if (InventTransferExplodeLinesByFinTrackingDimFlight::instance().isEnabled())
        {
            if (_inventTransferTable.hasTransferItemWithFinTrackingDim())
            {
                _inventTransferParmTable.ExplodeLines = NoYes::Yes;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertParmUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the <paramref name="_parmUpdate" />.
    /// </summary>
    /// <param name="_parmUpdate">
    ///    The <c>ParmUpdate</c> that will be inserted.
    /// </param>
    void insertParmUpdate(ParmUpdate _parmUpdate)
    {
        super(_parmUpdate);

        _parmUpdate.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    LineNum lastLineNum()
    {
        return InventTransferParmTable::lastLineNum(parmId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        inventTransferParmTableToPrintDataMap = new Map(Types::Int64, Types::Container);

        isContext_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        isContext_easternEuropeAllandRU = SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAllandRU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        if (this.inGetSaveLast())
        {
            return [#CurrentVersion, #CurrentList, super()];
        }

        inventTransferParmTableToPrintData = inventTransferParmTableToPrintDataMap.pack();
        return [#CurrentVersion,#CurrentListNewSession, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalledFromReleaseOrder</Name>
				<Source><![CDATA[
    public boolean parmCalledFromReleaseOrder(boolean _calledFromReleaseOrder = calledFromReleaseOrder)
    {
        calledFromReleaseOrder = _calledFromReleaseOrder;

        return calledFromReleaseOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalledFromWMS</Name>
				<Source><![CDATA[
    public boolean parmCalledFromWMS(boolean _calledFromWMS = calledFromWMS)
    {
        calledFromWMS = _calledFromWMS;

        return calledFromWMS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocNumberingCode_LT</Name>
				<Source><![CDATA[
    public LtDocNumberingCode parmDocNumberingCode_LT(LtDocNumberingCode _ltDocNumberingCode = ltDocNumberingCode)
    {
        ltDocNumberingCode = _ltDocNumberingCode;
        return ltDocNumberingCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStandardParm</Name>
				<Source><![CDATA[
    ParmBuffer parmStandardParm(ParmBuffer _standard = standardTransferParmTable)
    {
        standardTransferParmTable = _standard;

        return standardTransferParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStandardParmUpdate</Name>
				<Source><![CDATA[
    InventTransferParmUpdate parmStandardParmUpdate(InventTransferParmUpdate _standardTransferParmUpdate = standardTransferParmUpdate)
    {
        standardTransferParmUpdate = _standardTransferParmUpdate;

        return standardTransferParmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>InventTransferParmUpdate</c> that is general for all updates.
    /// </summary>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to select the record for update; optional.
    /// </param>
    /// <returns>
    ///    An <c>InventTransferParmUpdate</c> that is used for all updates.
    /// </returns>
    public ParmUpdate parmUpdate(boolean _forUpdate = false)
    {
        return InventTransferParmUpdate::find(this.parmId(),_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransferParmTableToPrintDataMap</Name>
				<Source><![CDATA[
    public Map parmInventTransferParmTableToPrintDataMap()
    {
        return inventTransferParmTableToPrintDataMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyUpdateFieldId_RU</Name>
				<Source><![CDATA[
    protected FieldId qtyUpdateFieldId_RU()
    {
        return fieldNum(InventTransferParmLine, QtyShipNow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    Query query()
    {
        ParmUpdate parmUpdate = this.parmUpdate();

        if (parmUpdate && parmUpdate.LateSelection && parmUpdate.LateSelectionQuery)
        {
            return new Query(parmUpdate.LateSelectionQuery);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        #OCCRetryCount
        InventTransferParmTable     inventTransferParmTable;

        if (! this.validate())
            throw error("@SYS18447");

        InventTransferParmUpdate inventTransferParmUpdate = this.parmUpdate();

        if (inventTransferParmUpdate.RecId && inventTransferParmUpdate.LateSelection && inventTransferParmUpdate.LateSelectionQuery)
        {
            //lateselection is only dependent on the query so any existing parmTables with the same parmId shold be deleted to avoid re-posting
            InventTransferParmTable::deleteParameters(parmId);

            Query query = new Query(inventTransferParmUpdate.LateSelectionQuery);
            this.chooseFromQueryAndInsert(query); //this will insert the parmrecords
        }

        select inventTransferParmTable
            index ParmLineIdx
            where inventTransferParmTable.ParmId  == parmId;

        boolean isError;

        while (inventTransferParmTable)
        {
            try
            {
                this.updateTransferOrder(inventTransferParmTable);
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::Deadlock;
                }

                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::Error)
            {
                isError = true;
                exceptionTextFallThrough();
            }
            next inventTransferParmTable;
        }

        // If it is running in batch mode, reports should be printed silently.
        if (this.isInBatch())
        {
            this.runReports();
        }

        if (isError && !this.isInBatch() && InventTransferOperationCanceledWhenErrorOccurFlight::instance().isEnabled())
        {
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransferOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a single transfer order.
    /// </summary>
    /// <param name = "_inventTransferParmTable">The <c>InventTransferParmTable</c> record used to update the transfer order.</param>
    protected void updateTransferOrder(InventTransferParmTable _inventTransferParmTable)
    {
        InventTransferPrintDataProvider printData = this.runUpdate(_inventTransferParmTable);

        if (printData)
        {
            inventTransferParmTableToPrintDataMap.insert(_inventTransferParmTable.RecId, printData.pack());
        }

        if (!this.isInBatch() || !isSkipAddUpdateRecordsFlightEnabled)
        {
            this.addUpdateRec(InventTransferTable::find(_inventTransferParmTable.TransferId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runReports</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the needed data that was created during the transfer order update and prints the related report.
    /// </summary>
    protected void runReports()
    {
        InventTransferParmTable         inventTransferParmTable;
        Map                             parmTableToPrintDataMap = this.parmInventTransferParmTableToPrintDataMap();

        if (!isSkipCreatePrintDataProviderFlightEnabled || !parmTableToPrintDataMap.empty())
        {
            while select inventTransferParmTable
                where inventTransferParmTable.ParmId == parmId
            {
                if (parmTableToPrintDataMap.exists(inventTransferParmTable.RecId))
                {
                    InventTransferPrintDataProvider printData = InventTransferPrintDataProvider::newFromUpdateType(inventTransferParmTable.UpdateType, parmTableToPrintDataMap.lookup(inventTransferParmTable.RecId));

                    InventTransferPrintCommand printCommand = InventTransferPrintCommand::newFromParmTable(inventTransferParmTable, printData);
                    printCommand.printOut();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runUpdate</Name>
				<Source><![CDATA[
    public abstract InventTransferPrintDataProvider runUpdate(InventTransferParmTable _inventTransferParmTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container _packedClass)
    {
        boolean     ret;
        Integer     version     = RunBase::getVersion(_packedClass);
        container   base;

        switch (version)
        {
            case #CurrentVersion :
                if (this.inGetSaveLast())
                {
                    [version, #CurrentList, base] = _packedClass;
                }
                else
                {
                    [version, #CurrentListNewSession, base] = _packedClass;

                    inventTransferParmTableToPrintDataMap = Map::create(inventTransferParmTableToPrintData);
                }

                standardTransferParmTable.TransDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                standardTransferParmTable.EditLines = NoYes::Yes; // EditLines should be Yes by default, user can't change it in the posting form
                ret = super(base);
                break;

            default :
                this.initParmDefault();
                ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>callPrinterSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows the user to modify the printer settings using the standard printer settings dialog.
    /// </summary>
    /// <param name="_printerSettings">
    /// The printer setting that is being modified.
    /// </param>
    /// <returns>
    /// The settings that were modified; otherwise, the original settings.
    /// </returns>
    static container callPrinterSettings(container _printerSettings)
    {
        SRSPrintDestinationSettings printSettings = new SRSPrintDestinationSettings(_printerSettings);

        if (SrsReportRunUtil::showSettingsDialog(printSettings))
        {
            return printSettings.pack();
        }
        else
        {
            return _printerSettings;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS78234";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecordSortedList</Name>
				<Source><![CDATA[
    private static RecordSortedList initRecordSortedList()
    {
        RecordSortedList recordSortedList = new RecordSortedList(tableNum(InventTransferParmTable));
        recordSortedList.sortOrder(fieldNum(InventTransferParmTable,RecId));

        return recordSortedList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>