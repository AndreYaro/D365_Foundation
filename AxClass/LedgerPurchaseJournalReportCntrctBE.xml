<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerPurchaseJournalReportCntrctBE</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data Contract class for <c>LedgerPurchaseJournalReportBE</c> SSRS report
/// </summary>
/// <remarks>
/// This is the Data Contract class for the <c>LedgerPurchaseJournalReportBE</c> SSRS Report.
/// </remarks>
[DataContractAttribute]
public class LedgerPurchaseJournalReportCntrctBE implements SysOperationValidatable
{
    boolean                         finalReporting;
    boolean                         compression;
    PurchLedgerPostingJournalIdBE   ledgerPostingJournalId;
    ToDate                          periodClosingDate;
    FromDate                        periodFromDate;
    recId                           calendarRecId;
    FromDate                        fromDate;
    ToDate                          toDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmCompression</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter Compression.
    /// </summary>
    /// <param name="_compression">
    /// The new value of the datacontract parameter Compression optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter Compression.
    /// </returns>
    [
        DataMemberAttribute      ('Compression'),
        SysOperationLabelAttribute  (literalstr("@SYS19083"))
    ]
    public boolean parmCompression(boolean _compression = compression)
    {
        compression = _compression;
        return compression;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFinalReporting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter FinalReporting.
    /// </summary>
    /// <param name="_finalReporting">
    /// The new value of the datacontract parameter FinalReporting; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter FinalReporting
    /// </returns>
    [
        DataMemberAttribute      ('FinalReporting'),
        SysOperationLabelAttribute  (literalstr("@SYS79654"))
    ]
    public boolean parmFinalReporting(boolean _finalReporting = finalReporting)
    {
        finalReporting = _finalReporting;
        return finalReporting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter FromDate.
    /// </summary>
    /// <param name="_fromDate">
    /// The new value of the datacontract parameter FromDate; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter FromDate
    /// </returns>
    [
        DataMemberAttribute      ('FromDate'),
        SysOperationLabelAttribute  (literalstr("@SYS4083"))
    ]
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerPostingJournalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter LedgerPostingJournalId.
    /// </summary>
    /// <param name="_ledgerPostingJournalId">
    /// The new value of the datacontract parameter LedgerPostingJournalId optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter LedgerPostingJournalId.
    /// </returns>
    [
        DataMemberAttribute      ('LedgerPostingJournalId')
    ]
    public PurchLedgerPostingJournalIdBE parmLedgerPostingJournalId(PurchLedgerPostingJournalIdBE _ledgerPostingJournalId = ledgerPostingJournalId)
    {
        ledgerPostingJournalId = _ledgerPostingJournalId;
        return ledgerPostingJournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ToDate.
    /// </summary>
    /// <param name="_toDate">
    /// The new value of the datacontract parameter ToDate; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter ToDate
    /// </returns>
    [
        DataMemberAttribute      ('ToDate'),
        SysOperationLabelAttribute  (literalstr("@SYS8828"))
    ]
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the SSRS Report Parameters.
    /// </summary>
    /// <returns>
    ///    true if no errors; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Returns the Boolean value after validation.
    /// </remarks>
    public boolean validate()
    {
        boolean ret = true;
        ToDate periodToDate;

        calendarRecId           = CompanyInfoHelper::fiscalCalendarRecId();

        periodFromDate          = LedgerFiscalCalendar::findPeriodStartDateByDate(calendarRecId,fromDate);
        periodToDate            = LedgerFiscalCalendar::findPeriodEndDateByDate(calendarRecId,toDate);
        periodClosingDate       = LedgerFiscalCalendar::findClosingPeriodStartDateByDate(calendarRecId,periodFromDate);

        if ((ledgerPostingJournalId == '' )  || (! LedgerJournalTableTypeBE::findByPostingJournalId(ledgerPostingJournalId)))
        {
            ret = checkFailed(strfmt("@SYS79665",ledgerPostingJournalId,"@SYS53872"));
        }
        if (!fromDate)
        {
            ret = checkFailed(strfmt("@SYS26332","@SYS5209"));
        }
        if (!toDate)
        {
            ret = checkFailed(strfmt("@SYS26332","@SYS14656"));
        }
        if (toDate < fromDate)
        {
            ret = checkFailed("@SYS16982");
        }
        if (periodClosingDate < periodToDate)
        {
            ret = checkFailed(strfmt("@SYS79672",periodClosingDate));
        }
        if (ret && finalReporting)
        {
            ret = this.validatePeriod(ledgerPostingJournalId, this.parmFromDate());
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the <c>LedgerPostingJournalId</c> report parameter.
    /// </summary>
    /// <param name="_ledgerPostingJournalId">
    ///    The <c>LedgerPostingJournalId</c> report parameter value.
    /// </param>
    /// <param name="_fromDate">
    ///    The <c>FromDate</c> report parameter value.
    /// </param>
    /// <returns>
    ///    Returns the Boolean value.
    /// </returns>
    public boolean validatePeriod(LedgerPostingJournalId _ledgerPostingJournalId, FromDate _fromDate)
    {
        LedgerJournalPeriodFinalPrintBE  jpFinalPrintBE         = null;
        LedgerJournalTableTypeBE         ledgerPostingJournal   = null;
        boolean                          firstError             = true;
        boolean                          ret                    = true;

        calendarRecId   = CompanyInfoHelper::fiscalCalendarRecId();
        periodFromDate  = LedgerFiscalCalendar::findPeriodStartDateByDate(calendarRecId,_fromDate);

        if (_ledgerPostingJournalId)
        {
            select firstonly jpFinalPrintBE
                order by PeriodEnd desc
                where jpFinalPrintBE.LedgerPostingJournalId == _ledgerPostingJournalId;

            if (jpFinalPrintBE)
            {
                if (jpFinalPrintBE.PeriodEnd+1 != periodFromDate)
                {
                    ret = checkFailed(strfmt("@SYS79673",_ledgerPostingJournalId,jpFinalPrintBE.PeriodEnd,jpFinalPrintBE.PeriodEnd+1));
                }
            }
        }
        else
        {
            while select LedgerPostingJournalId from ledgerPostingJournal
                where ledgerPostingJournal.JournalTypeBE == LedgerJournalTypeBE::Purchase
            {
                select firstonly jpFinalPrintBE
                    order by PeriodEnd desc
                    where jpFinalPrintBE.LedgerPostingJournalId == ledgerPostingJournal.LedgerPostingJournalId;

                if (jpFinalPrintBE)
                {
                    if (jpFinalPrintBE.PeriodEnd+1 != periodFromDate)
                    {
                        if (firstError)
                        {
                            setprefix("@SYS79674");
                        }
                        ret = checkFailed(strfmt("@SYS79673",ledgerPostingJournal.LedgerPostingJournalId,jpFinalPrintBE.PeriodEnd,jpFinalPrintBE.PeriodEnd+1));
                        firstError = false;
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
