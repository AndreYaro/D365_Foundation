<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankChequeCreateReversalJour_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The BankChequeCreateReversalJour_BR class creates reversal journals for checks.
/// </summary>
public class BankChequeCreateReversalJour_BR extends BankChequeCreateReversalJour
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createChequeReversalJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Manages all the functions necessary to generate a bank check reversal journal.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// An error has occurred during the creation of the reason reference.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// An error has occurred during the validation and update process on the bank tables.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// An error has occurred during the validation of the related customer or vendor transaction.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// An error has occurred during the creation of the journal header.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// An error has occurred during the creation of the journal voucher.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// An error has occurred during the marking of the settlements.
    /// </exception>
    protected void createChequeReversalJournal()
    {
        container               recipientCompany;
        VendTrans               vendTransLoc;
        ;

        if (bankChequeTable.RecipientCompany == '')
        {
            recipientCompany += curext();
        }
        else
        {
            recipientCompany += bankChequeTable.RecipientCompany;
        }

        try
        {
            ttsbegin;
            // Create the reason reference to be used for the check reversal
            if (!this.createReasonRefRecID())
            {
                throw error("@SYS107513");
            }

            // Validate and update the bank tables.
            if (!this.validateAndUpdateBankTables())
            {
                throw error("@SYS107513");
            }

            // Create the ledger journal to be used for the check reversal
            if (!this.createJournal())
            {
                throw error("@SYS107513");
            }

            // Create ledgerJournalTrans records for each vendor transaction associated with a check.
            while select crossCompany:recipientCompany vendTransLoc order by RecId asc
                    where (vendTransLoc.Voucher                  == bankChequeTable.RecipientTransVoucher ||
                          (vendTransLoc.Voucher                  == bankChequeTable.Voucher &&
                          bankChequeTable.RecipientTransVoucher  == '')) &&
                          vendTransLoc.TransType                 == LedgerTransType::Payment &&
                          vendTransLoc.PaymReference             == bankChequeTable.ChequeNum &&
                          vendTransLoc.TransDate                 == bankChequeTable.TransDate
            {
                custVendPaymTrans = vendTransLoc;

                // Validate and set the CustVendTrans.
                if (!this.validateCustVendTrans())
                {
                    throw error("@SYS107513");
                }

                this.setPaymDateAndVoucher();

                // Validate and create the voucher for the journal.
                if (!this.createVoucher())
                {
                    throw error("@SYS107513");
                }

                // Create the reservations on the settlements being reversed.
                if (!this.createReversalSpecTrans())
                {
                    throw error("@SYS107513");
                }
            }

            ttscommit;
            info(strfmt("@SYS62960", ledgerJournalTable.JournalNum, enum2Value(LedgerJournalType::BankChequeReversal)));
        }

        catch (Exception::Error)
        {
            exceptionTextFallThrough();
            error(strfmt("@SYS117281", enum2Value(LedgerJournalType::BankChequeReversal)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the voucher in the LedgerJournalTrans table for the bank check reversal journal.
    /// </summary>
    /// <returns>
    /// true if successful; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The journal transaction created in this method will result in an insert to the LedgerJournalTrans table.
    /// Therefore, code for handling optimistic concurrency (OCC) database exceptions is not required.
    /// </remarks>
    protected boolean createVoucher()
    {
        boolean voucherOk;
        ;

        try
        {
            voucherOk = this.getVoucher();
            if (voucherOk)
            {
                ledgerJournalTrans.clear();
                ledgerJournalTrans.JournalNum           = ledgerJournalTable.JournalNum;
                ledgerJournalTrans.Voucher              = voucher;
                ledgerJournalTrans.Txt                  = strfmt('%1: %2, %3',"@SYS1068", paymVoucher, cancelReasonComment);
                ledgerJournalTrans.DocumentNum          = custVendPaymTrans.DocumentNum;
                ledgerJournalTrans.DocumentDate         = custVendPaymTrans.TransDate;
                ledgerJournalTrans.PaymReference        = custVendPaymTrans.PaymReference;
                ledgerJournalTrans.PaymMode             = custVendPaymTrans.PaymMode;
                ledgerJournalTrans.ExchRate             = custVendPaymTrans.ExchRate;
                ledgerJournalTrans.ExchRateSecond       = custVendPaymTrans.ExchRateSecond;
                ledgerJournalTrans.Triangulation        = custVendPaymTrans.euroTriangulation;
                ledgerJournalTrans.AcknowledgementDate  = bankAccountTrans.AcknowledgementDate;
                ledgerJournalTrans.CurrencyCode         = custVendPaymTrans.CurrencyCode;
                ledgerJournalTrans.TransDate            = transDate;
                ledgerJournalTrans.BankChequeNum        = bankChequeTable.ChequeNum;
                ledgerJournalTrans.BankTransType        = BankParameters::find().nsfTransactionType;
                ledgerJournalTrans.ReasonRefRecID       = ReasonTableRef::checkCreateInCompany(reasonTableRefRecID, ledgerJournalTrans.DataAreaId);
                ledgerJournalTrans.AmountCurCredit      = custVendPaymTrans.AmountCur;
                ledgerJournalTrans.SettleVoucher        = SettlementType::None;

                if (bankChequeTable.RecipientType == BankChequeRecipientType::Cust)
                {
                    ledgerJournalTrans.TransactionType = LedgerTransType::Cust;
                }
                else if (bankChequeTable.RecipientType == BankChequeRecipientType::Vend)
                {
                    ledgerJournalTrans.TransactionType = LedgerTransType::Vend;
                }

                ledgerJournalTrans.BankChequeDepositTransRefRecID = custVendPaymTrans.RecId;

                if (LedgerParameters::find().TransactionReversalCorrection)
                {
                    ledgerJournalTrans.AmountCurCredit = 0;
                    ledgerJournalTrans.AmountCurDebit  = -custVendPaymTrans.AmountCur;
                }

                ledgerJournalTrans.LineNum                      = 0;
                ledgerJournalTrans.AccountType                  = recipientType == BankChequeRecipientType::Vend ? LedgerJournalACType::Vend : LedgerJournalACType::Cust;
                ledgerJournalTrans.parmAccount(custVendPaymTrans.AccountNum, ledgerJournalTrans.AccountType, custVendPaymTrans.company());
                ledgerJournalTrans.parmOffsetAccount(bankChequeTable.AccountID, LedgerJournalACType::Bank, bankChequeTable.company());
                ledgerJournalTrans.Company                      = custVendPaymTrans.company();
                ledgerJournalTrans.OffsetAccountType            = LedgerJournalACType::Bank;
                ledgerJournalTrans.OffsetTxt                    = ledgerJournalTrans.Txt;
                ledgerJournalTrans.OffsetCompany                = bankAccountTrans.company();
                ledgerJournalTrans.BankReconcileAccountAtPost   = reconcile;
                ledgerJournalTrans.DefaultDimension             = custVendPaymTrans.DefaultDimension;
                ledgerJournalTrans.OffsetDefaultDimension       = bankAccountTrans.DefaultDimension;

                if (!ledgerJournalTrans.validateWrite())
                {
                    voucherOk = false;
                }
                else
                {
                    ledgerJournalTrans.write();
                }
            }
        }
        catch
        {
             exceptionTextFallThrough();
             voucherOk = false;
        }

        return voucherOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the voucher in the LedgerJournalTrans table for the bank check reversal journal.
    /// </summary>
    /// <returns>
    /// true if successful; otherwise, false.
    /// </returns>

    protected boolean getVoucher()
    {
        NumberSequenceTable     voucherNumberSequence = NumberSequenceTable::find(ledgerJournalName.NumberSequenceTable);
        boolean voucherOk = true;
        ;

        // If voucher number has already been set, don't get another one
        if (voucher)
        {
            return true;
        }

        try
        {
            if (voucherNumberSequence.RecId == 0)
            {
                voucherOk = checkFailed(strfmt("@SYS102235", ledgerJournalName.NumberSequenceTable));
            }

            if (voucherOk &&
                !voucherNumberSequence.Continuous)
            {
                voucherOk = checkFailed(strfmt("@SYS26207", ledgerJournalName.NumberSequenceTable));
            }

            if (voucherOk &&
                voucherNumberSequence.Blocked)
            {
                voucherOk = checkFailed(strfmt("@SYS25068", ledgerJournalName.NumberSequenceTable));
            }

            if (voucherOk)
            {
                numSeq = NumberSeq::newGetVoucherFromId(ledgerJournalName.NumberSequenceTable);
                voucher = numSeq.voucher();
            }
        }
        catch
        {
             exceptionTextFallThrough();
             voucherOk = false;
        }

        return voucherOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCustVendTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the related customer or vendor transaction.
    /// </summary>
    /// <returns>
    /// true if successful; otherwise, false.
    /// </returns>
    protected boolean validateCustVendTrans()
    {
        boolean validateOk = true;
        ;

        // Set the receipientType.
        recipientType = bankChequeTable.RecipientType;

        if (custVendPaymTrans.RecId == 0)
        {
            switch (recipientType)
            {
                case BankChequeRecipientType::Vend :
                    validateOk = checkFailed(strfmt("@SYS117284",
                                                    bankChequeTable.Voucher,  chequeNum));
                    break;

                case BankChequeRecipientType::Cust :
                    validateOk = checkFailed(strfmt("@SYS117285",
                                                    bankChequeTable.Voucher,  chequeNum));
                    break;
            }
        }
        // Is the transaction date selected for the reversal ok?
        else if (transDate < custVendPaymTrans.TransDate)
        {
            validateOk = checkFailed(strfmt("@SYS91442"));
        }

        return validateOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the BankChequeCreateReversalJour_BR class.
    /// </summary>
    /// <returns>
    /// A new instance of the BankChequeCreateReversalJour_BR class.
    /// </returns>
    public static BankChequeCreateReversalJour_BR construct()
    {
        ;

        return new BankChequeCreateReversalJour_BR();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>