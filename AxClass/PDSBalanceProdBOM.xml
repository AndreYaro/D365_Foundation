<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PDSBalanceProdBOM</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PDSBalanceProdBOM</c> class provides the business logic for batch balancing.
/// </summary>
class PDSBalanceProdBOM
{
    ProdId                  prodId;
    PDSBaseAttributeId      baseAttributeId;
    Qty                     totalActiveQty;
    boolean                 balancingOk;

    Map                     bomActiveQtyList;
    Map                     bomBalanceQtyList;
    Map                     selectionList;
    Map                     bomInitList;

    // Selection container structure
    #define.PosQty(3)
    #define.PosInventTransID(4)
    #define.PosActiveQty(5)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>hashKey</Name>
				<Source><![CDATA[
    internal InventDimId hashKey(InventSum _inventSum)
    {
        return _inventSum.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activeBatchQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the active quantity for a given inventory record.
    /// </summary>
    /// <param name="_sum">
    /// The record of the <c>InventSum</c> table for which to get the active ingredient quantity.
    /// </param>
    /// <returns>
    /// The active ingredient quantity or zero if <paramref name="_sum"/> is for a non-potency item or
    /// there is no actual potency value set for the batch.
    /// </returns>
    public PDSActiveQtyAvail activeBatchQty(InventSum _sum)
    {
        PDSActiveQty    ret = 0;

        if (str2num(this.baseAttributeValue(_sum)) != 0)
        {
            ret = _sum.AvailPhysical * (str2num(this.baseAttributeValue(_sum)) / 100);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activeQtyUsed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the active quantity currently used from the given inventory summary line.
    /// </summary>
    /// <param name="_prodBOM">
    /// The record of the <c>ProdBOM</c> table for the current production BOM line.
    /// </param>
    /// <param name="_sum">
    /// The record of the <c>InventSum</c> table with the inventory summary.
    /// </param>
    /// <returns>
    /// The quantity used from <paramref name="_sum"/>.
    /// </returns>
    public PDSActiveQtyUsed activeQtyUsed(ProdBOM _prodBOM, InventSum _sum)
    {
        str                 key     = this.key(_prodBOM.InventTransId, _sum.InventDimId);
        container           con;
        PDSQtyUsed          ret     = 0;

        if (selectionList.exists(key))
        {
            con = selectionList.lookup(key);
            ret = conPeek(con, #PosActiveQty);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowBatchBalancing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value indicating if batch balancing process can be executed.
    /// </summary>
    /// <returns>
    /// true if the batch balancing process can be executed; otherwise, false.
    /// </returns>
    public boolean allowBatchBalancing()
    {
        MapEnumerator   meSelect = selectionList.getEnumerator();
        Qty             totalResActiveQty;
        container       con;

        while (meSelect.moveNext())
        {
            con = meselect.currentValue();
            totalResActiveQty += conpeek(con, #PosActiveQty);
        }

        return totalResActiveQty == totalActiveQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodBOMPoolReleasedQtyExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there is released production bill of material pool quantity.
    /// </summary>
    /// <returns>true if there is released production bill of material pool quantity; otherwise, false</returns>
    public boolean prodBOMPoolReleasedQtyExists()
    {
        WHSProdBOMPool prodBOMPool;
        boolean        releasedQtyExists;
        
        select firstonly RecId from prodBOMPool
            where prodBOMPool.ProdId            == prodId
            &&    prodBOMPool.ReleasedInventQty >  0;
              
        if (prodBOMPool.RecId != 0)
        {
            releasedQtyExists = true;
        }

        return releasedQtyExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>noOnOrderQtyExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there is reserved, picked, deducted, or sold production bill of material quantity.
    /// </summary>
    /// <returns>true if there is reserved or picked production bill of material quantity; otherwise, false</returns>
    public boolean noOnOrderQtyExists()
    {
        InventTransOrigin inventTransOrigin;
        InventTrans		  inventTrans;
        ProdBOM           prodBOM;
        boolean           noOnOrderQty;

        select firstonly RecId from prodBOM
            where prodBOM.PDSIngredientType != PDSIngredientTypeEnum::None
            &&	  prodBOM.ProdId            == prodId
            exists join inventTransOrigin
                where inventTransOrigin.InventTransId == prodBOM.InventTransId
                exists join inventTrans
                    where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                    &&    inventTrans.StatusIssue       != StatusIssue::OnOrder 
                    &&    inventTrans.StatusReceipt     == StatusReceipt::None
                    &&    inventTrans.Qty               <  0;
        
        if (prodBOM.RecId != 0)
        {
            noOnOrderQty = true;
        }

        return noOnOrderQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowBatchBalancingForBOMLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that BOM lines can be batch balanced.
    /// </summary>
    /// <returns>true if batch balancing is enabled for BOM lines; otherwise, false</returns>
    public boolean allowBatchBalancingForBOMLines()
    {
        if (this.prodBOMPoolReleasedQtyExists())
        {
            error(strFmt("@WAX:Error_CanNotBalanceReleaseProdBOMPools", prodId));

            return false;
        }

        if (this.noOnOrderQtyExists())
        {
            error(strFmt("@WAX:Error_CanNotBalanceReservedPickedProdBOMs", prodId));

            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowBatchFirming</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value indicating if the batch firming process can be executed.
    /// </summary>
    /// <returns>
    /// true if batch firming process can be executed; otherwise, false.
    /// </returns>
    public boolean allowBatchFirming()
    {
        boolean             ret;
        MapEnumerator       meSelect = selectionList.getEnumerator();
        Qty                 totalResActiveQty;
        Container           con;
        ProdBOM             prodBOM;

        select count(RecId)
            from prodBOM
            where  prodBOM.ProdId            == prodId
                && prodBOM.PDSIngredientType == PDSIngredientTypeEnum::Active;

        ret = bomBalanceQtyList.elements() > prodBOM.RecId;

        if (ret)
        {
            while (meSelect.moveNext())
            {
                con = meselect.currentValue();
                totalResActiveQty += conpeek(con, #PosActiveQty);
            }

            ret = ret && (totalResActiveQty == totalActiveQty);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>balanceBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the quantities based on the selected active ingredients to balance the batch.
    /// </summary>
    public void balanceBatch()
    {
        Set                     result;
        SetEnumerator           resultIdx;
        PDSTmpBatchSelection    balanced;
        PDSTmpBatchSelection    buffer;
        ProdTable               prodTable = ProdTable::find(prodId);

        this.copyMarkToBuffer(buffer);

        result            = PDSBalanceIngredient::process(buffer,prodTable.ProdId);
        resultIdx         = result.getEnumerator();
        bomBalanceQtyList = new Map(Types::String, Types::real);

        while (resultIdx.moveNext())
        {
            [balanced.InventTransId,
                balanced.ItemId,
                balanced.Qty,
                balanced.InventDimId,
                balanced.NormalizedQty] = resultIdx.current();

            balanced.InventBatchId = InventDim::find(balanced.InventDimId).inventBatchId;
            balanced.insert();
        }

        while select InventTransId, Sum(Qty), Sum(NormalizedQty)
            from balanced
            group by InventTransId
        {
            if (bomBalanceQtyList.exists(balanced.InventTransId))
            {
                bomBalanceQtyList.remove(balanced.InventTransId);
            }

            bomBalanceQtyList.insert(balanced.InventTransId, balanced.NormalizedQty);
        }

        balancingOk = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>baseAttributeValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the attribute value of the base attribute for the related batch.
    /// </summary>
    /// <param name="_sum">
    /// The record of the <c>InventSum</c> table with the inventory.
    /// </param>
    /// <returns>
    /// The attribute value for the base attribute in the batch on <paramref name="_sum"/>.
    /// </returns>
    public PdsBatchAttribValue baseAttributeValue(InventSum _sum)
    {
        PdsBatchAttribValue ret = '';

        if (baseAttributeId)
        {
           ret = PdsBatchAttributes::find(_sum.ItemId, _sum.inventBatchId(), baseAttributeId).PdsBatchAttribValue;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bomActiveQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the computed active quantity for the production BOM.
    /// </summary>
    /// <param name="_inventTransId">
    /// The inventory transaction ID for the production BOM line.
    /// </param>
    /// <returns>
    /// The computed active quantity.
    /// </returns>
    public PDSActiveQty bomActiveQty(InventTransId _inventTransId)
    {
        PDSActiveQty        ret = 0;

        if (bomActiveQtyList.exists(_inventTransId))
        {
            ret = bomActiveQtyList.lookup(_inventTransId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bomBalanceQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the balance quantity for the production BOM.
    /// </summary>
    /// <param name="_inventTransId">
    /// The inventory transaction ID for the production BOM line.
    /// </param>
    /// <returns>
    /// The balanced quantity for the record.
    /// </returns>
    public PDSBalancedQty bomBalanceQty(InventTransId _inventTransId)
    {
        PDSBalancedQty      ret = 0;

        if (bomBalanceQtyList.exists(_inventTransId))
        {
            ret = bomBalanceQtyList.lookup(_inventTransId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bomBalanceQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all the computed balanced quantities for the current batch order.
    /// </summary>
    /// <returns>
    /// A <c>Map</c> containing the computed balanced quantities.
    /// </returns>
    /// <remarks>
    /// The key for the returned map is an inventory transaction ID (InventTransId); the value
    /// is the active quantity.
    /// </remarks>
    public Map bomBalanceQuantities()
    {
        return bomBalanceQtyList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcProdActiveQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total active quantity for the current production order.
    /// </summary>
    public void calcProdActiveQty()
    {
        ProdBOM             defProdBOM;
        qty                 activeQty;

        while select BOMQty, QtyBomCalc, InventTransId, UnitId, PDSBaseValue
            from defProdBOM
            where defProdBOM.ProdId             == prodId
                && defProdBOM.PDSIngredientType == PDSIngredientTypeEnum::Active
        {
            activeQty = defProdBOM.QtyBOMCalc * (str2num(defProdBOM.PDSBaseValue) / 100);
            bomActiveQtyList.insert(defProdBOM.InventTransId, activeQty);
            totalActiveQty += activeQty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPreviousReserved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value indicating if the given <c>ProdBOM</c> table record has a previous reservation.
    /// </summary>
    /// <param name="_prodBOM">
    /// The production order line to check.
    /// </param>
    /// <returns>
    /// true if there are previous reservations; otherwise, false.
    /// </returns>
    private boolean checkPreviousReserved(ProdBOM _prodBOM)
    {
        Qty                     resActiveQty;
        Qty                     resQty;
        MapEnumerator           me = selectionList.getEnumerator();
        PDSTmpBatchSelection    buffer;
        container               con;
        int                     i;
        str                     key;
        boolean                 ret;

        while (me.moveNext())
        {
            buffer.clear();
            [buffer.ItemId, buffer.InventDimId, buffer.Qty, buffer.InventTransId, buffer.NormalizedQty, buffer.BaseValue, buffer.AttribValue] = me.currentValue();
            if (buffer.InventTransId == _prodBOM.InventTransId)
            {
                resActiveQty += buffer.NormalizedQty;
                resQty       += buffer.Qty;
                i++;
                con = conIns(con, i, buffer.InventDimId);
            }
        }

        ret = conLen(con) > 0;

        if (resActiveQty > this.bomActiveQty(_prodBom.InventTransId))
        {
            for ( i = 1; i <= conLen(con); i++)
            {
                key = this.key(_prodBom.InventTransId, conPeek(con, i));
                selectionList.remove(key);
            }

            error(strFmt("@PSC673", resQty, resActiveQty));
            error("@PSC674");
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyMarkToBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the marked batch inventory selections to the given buffer.
    /// </summary>
    /// <param name="_buffer">
    /// The buffer of the <c>PDSTmpBatchSelection</c> table to copy the values to.
    /// </param>
    public void copyMarkToBuffer(PDSTmpBatchSelection _buffer)
    {
        MapEnumerator        selectionIdx = selectionList.getEnumerator();

        while (selectionIdx.moveNext())
        {
            [_buffer.ItemId, _buffer.InventDimId, _buffer.Qty, _buffer.InventTransId, _buffer.NormalizedQty] = selectionIdx.currentValue();
            _buffer.InventBatchId = InventDim::find(_buffer.InventDimId).inventBatchId;
            _buffer.RecId = 0;
            _buffer.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the records of the <c>InventSum</c> table available for selection for the given production BOM line.
    /// </summary>
    /// <param name="_prodBOM">
    /// The record of the <c>ProdBOM</c> table for the current production BOM line.
    /// </param>
    /// <param name="_tmpSum">
    /// A buffer for a temporary <c>InventSum</c> table that the found records will be written to.
    /// </param>
    public void findInventSum(ProdBOM _prodBOM, InventSum _tmpSum)
    {
        InventSum           inventSum;
        InventBatch         inventBatch;
        InventTrans         trans;
        InventTransOrigin   transOrigin;
        PdsPickCriteria     pick         = PdsPickCriteria::ExpiryDate;
        Qty                 resQty;
        str                 key;
        PDSBaseValueNum     baseVal      = str2num(_prodBOM.PDSBaseValue);
        PDSBaseValueNum     attribVal;
        boolean             res4this;

        if (_prodBOM.PDSIngredientType != PDSIngredientTypeEnum::Active)
        {
            return;
        }

        if (_prodBOM.inventTable().modelGroup().PdsCheck)
        {
            pick = _prodBOM.inventTable().modelGroup().PdsPickCriteria;
        }

        date thresholdDate = InventMovement::construct(_prodBOM).getExpiryCheckDate();
        
        while select inventSum
            where  inventSum.ItemId             == _prodBOM.ItemId
                && (inventSum.AvailPhysical     > 0
                    || inventSum.ReservPhysical > 0)
        {
            res4this = false;
            inventBatch = InventBatch::find(inventSum.inventBatchId(), inventSum.ItemId);
            
            if (!inventBatch.RecId || PdsDispositionMaster::find(inventBatch.PdsDispositionCode).prodRestrictStatus())
            {
                continue;
            }

            if ((pick == PdsPickCriteria::BestBeforeDate
                    && inventBatch.PdsBestBeforeDate != dateNull()
                    && inventBatch.PdsBestBeforeDate <= thresholdDate)
                || (pick == PdsPickCriteria::ExpiryDate
                    && inventBatch.expDate != dateNull()
                    && inventBatch.expDate < thresholdDate))
            {
                continue;
            }
            
            _tmpSum.data(inventSum);
                        
            if (inventSum.ReservPhysical != 0)
            {
                select firstOnly RecId
                    from transOrigin
                        where transOrigin.InventTransId == _prodBOM.InventTransId
                    join Qty, RecId
                        from trans
                        where  trans.InventTransOrigin  == transOrigin.RecId
                            && trans.StatusIssue        == StatusIssue::ReservPhysical
                            && trans.inventDimId        == inventSum.InventDimId;

                if (trans.RecId)
                {
                    attribVal = str2num(this.baseAttributeValue(inventSum));
                    resQty = -trans.Qty * (attribVal / 100);
                    _tmpSum.AvailPhysical += -trans.Qty;
                    if (!bomBalanceQtyList.exists(_prodBOM.InventTransId)
                        && !bomInitList.exists(_prodBOM.InventTransId))
                    {
                        key = this.key(_prodBOM.InventTransId, inventSum.InventDimId);
                        selectionList.insert(key, [inventSum.ItemId, inventSum.InventDimId, -trans.Qty, _prodBOM.InventTransId, resQty, baseVal, attribVal]);
                    }
                }
            }
            
            InventOnhand inventOnhand = inventBatch.inventOnhand();
            InventQty availQtyPhys = inventOnhand.availPhysical();

            if (availQtyPhys <= 0)
            {
                continue;
            }
                
            if (availQtyPhys < _tmpSum.AvailPhysical )
            {
                Qty reserved = max(inventOnhand.reservPhysical(), _tmpSum.ReservPhysical) - resQty;

                if (reserved != 0)
                {
                    attribVal = str2num(this.baseAttributeValue(_tmpSum));
                    resQty = -reserved * (attribVal / 100);
                    _tmpSum.AvailPhysical += -reserved;
                }
            }

            if (!bomBalanceQtyList.exists(_prodBOM.InventTransId)
                && !bomInitList.exists(_prodBOM.InventTransId))
            {
                res4this = this.checkPreviousReserved(_prodBOM);
            }
            
            if (res4this
                || _tmpSum.AvailPhysical > 0)
            {
                _tmpSum.doInsert();
            }
            else
            {
                _tmpSum.clear();
            }
        }

        bomInitList.insert(_prodBOM.InventTransId, selectionList.elements());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBatchBalanced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value indicating if the batch balancing process has been completed.
    /// </summary>
    /// <returns>
    /// true if the batch balancing process has been completed; otherwise, false.
    /// </returns>
    public boolean isBatchBalanced()
    {
        return balancingOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMarked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value indicating if the inventory has been selected for the production BOM line.
    /// </summary>
    /// <param name="_prodBOM">
    /// The record of the <c>ProdBOM</c> table for the current production BOM line.
    /// </param>
    /// <param name="_sum">
    /// The record of the <c>InventSum</c> table to check.
    /// </param>
    /// <returns>
    /// true if <paramref name="_sum"/> has been selected for balancing purposes; otherwise, false.
    /// </returns>
    public boolean isMarked(ProdBOM _prodBOM, InventSum _sum)
    {
        str     key = this.key(_prodBOM.InventTransId, _sum.InventDimId);

        return selectionList.exists(key);
    }

]]></Source>
			</Method>
			<Method>
				<Name>key</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the key for the selection map.
    /// </summary>
    /// <param name="_inventTransId">
    /// The inventory transaction ID.
    /// </param>
    /// <param name="_inventDimId">
    /// The inventory dimension ID.
    /// </param>
    /// <returns>
    /// The key for to use for the selection map.
    /// </returns>
    internal str key(InventTransId _inventTransId, InventDimId _inventDimId)
    {
        return strFmt('%1##%2', _inventTransId, _inventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>markedActiveQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total active quantity in the selection list if the specific line is not currently marked.
    /// </summary>
    /// <param name="_inventTransId">
    /// The inventory transaction ID.
    /// </param>
    /// <param name="_inventDimId">
    /// The inventory dimension ID.
    /// </param>
    /// <returns>
    /// The total active quantity.
    /// </returns>
    /// <remarks>
    /// This does not compute the total active if the specific line referenced by <paramref name="_inventTransId"/>
    /// and <paramref name="_inventDimId"/> because it is assumed that the line is being unselected.
    /// </remarks>
    private Qty markedActiveQty(InventTransId _inventTransId, InventDimId _inventDimId)
    {
        InventTransId       prodBomTransId;
        MapEnumerator       me;
        container           con;

        Qty                 ret = 0;

        if (selectionList.elements() != 0
            && !selectionList.exists(this.key(_inventTransId, _inventDimId)))
        {
            me = selectionList.getEnumerator();

            while (me.moveNext())
            {
                con = me.currentValue();
                prodBomTransId = conPeek(con, #PosInventTransId);
                if (prodBomTransId == _inventTransId)
                {
                    ret += conPeek(con, #PosActiveQty);
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        bomActiveQtyList            = new Map(Types::String, Types::Real);
        bomBalanceQtyList           = new Map(Types::String, Types::Real);
        selectionList               = new Map(Types::String, Types::Container);
        bomInitList                 = new Map(Types::String, Types::Integer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBaseAttributeId</Name>
				<Source><![CDATA[
    public PDSBaseAttributeId parmBaseAttributeId(PDSBaseAttributeId _baseAttributeId = baseAttributeId)
    {
        baseAttributeId = _baseAttributeId;

        return baseAttributeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdId</Name>
				<Source><![CDATA[
    public ProdId parmProdId(ProdId _prodId = prodId)
    {
        prodId = _prodId;

        return prodId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyUsed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity used for the given production BOM line and inventory summary.
    /// </summary>
    /// <param name="_prodBOM">
    /// The record of the <c>ProdBOM</c> table for the current production BOM line.
    /// </param>
    /// <param name="_sum">
    /// The record of the <c>InventSum</c> table to retrieve the computed used quantity of.
    /// </param>
    /// <param name="_default">
    /// The value containing the default result if there is no computed quantity used; optional.
    /// </param>
    /// <returns>
    /// The quantity used of <paramref name="_sum"/>.
    /// </returns>
    public PDSQtyUsed qtyUsed(ProdBOM _prodBOM, InventSum _sum, PDSQtyUsed _default = 0)
    {
        str                 key     = this.key(_prodBOM.InventTransId, _sum.InventDimId);
        container           con;
        PDSQtyUsed          ret     = _default;

        if (selectionList.exists(key))
        {
            con = selectionList.lookup(key);
            ret = conPeek(con, #PosQty);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeMark</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the mark for using inventory for the current production BOM line.
    /// </summary>
    /// <param name="_prodBOM">
    /// The record of the <c>ProdBOM</c> table for the current production BOM line.
    /// </param>
    /// <param name="_sum">
    /// The record of the <c>InventSum</c> table for the inventory to release the mark on.
    /// </param>
    public void removeMark(ProdBOM _prodBOM, InventSum _sum)
    {
        str     key = this.key(_prodBOM.InventTransId, _sum.InventDimId);

        selectionList.remove(key);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setActiveQtyUsed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the active quantity used.
    /// </summary>
    /// <param name="_prodBOM">
    /// The record of the <c>ProdBOM</c> table for the current production BOM line.
    /// </param>
    /// <param name="_sum">
    /// The record of the <c>InventSum</c> table for the selected inventory summary line.
    /// </param>
    /// <param name="_qty">
    /// The active quantity used for the line.
    /// </param>
    /// <returns>
    /// The total active quantity used for <paramref name="_prodBOM"/>.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// If <paramref name="_qty"/> is negative.
    /// </exception>
    public PDSActiveQtyUsed setActiveQtyUsed(ProdBOM _prodBOM, InventSum _sum, PDSActiveQtyUsed _qty)
    {
        str                 key = this.key(_prodBOM.InventTransId, this.hashKey(_sum));
        Qty                 markedActiveQty;
        Qty                 batchActiveQty;
        Qty                 balQty;
        Qty                 usedInvQty;
        PDSQtyUsed          ret         = 0;
        PDSBaseValueNum     baseVal     = str2num(_prodBOM.PDSBaseValue);
        PDSBaseValueNum     attribVal   = str2num(this.baseAttributeValue(_sum));

        markedActiveQty = this.markedActiveQty(_prodBOM.InventTransId, this.hashKey(_sum));

        if (_qty > 0)
        {
            if (selectionList.exists(key))
            {
                this.removeMark(_prodBOM, _sum);
            }

            batchActiveQty  = _sum.AvailPhysical * (attribVal / 100);
            balQty          = (_prodBom.QtyBOMCalc * (baseVal / 100)) - markedActiveQty;

            if (balQty <= 0)
            {
                throw error("@PSC363");
            }

            ret = min(_qty, batchActiveQty, balQty);

            if (ret < balQty)
            {
                info(strFmt("@PSC369", balQty - ret));
            }

            usedInvQty = decRound((ret / (attribVal / 100)), UnitOfMeasure::findBySymbol(_prodBom.UnitId).DecimalPrecision);

            this.insertSelectionList(key, _sum, _prodBOM, usedInvQty, ret, baseVal, attribVal);
        }
        else if (_qty == 0)
        {
            if (selectionList.exists(key))
            {
                this.removeMark(_prodBOM, _sum);
            }
        }
        else
        {
            error("@PSC671");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMatchedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the matched quantity for the marked record and the current <c>ProdBOM</c> table.
    /// </summary>
    /// <param name="_prodBOM">
    /// The record of the <c>ProdBOM</c> table for the current production BOM line.
    /// </param>
    /// <returns>
    /// true if the selection must change; otherwise, false.
    /// </returns>
    public boolean setMatchedQty(ProdBOM _prodBOM)
    {
        PDSTmpBatchSelection    buffer;
        InventQty               balQty = 0;
        InventQty               reqQty = 0;
        PDSNormalizedQty        markedActiveQty;
        MapEnumerator           selectionIdx = selectionList.getEnumerator();
        boolean                 selChanged   = false;

        while (selectionIdx.moveNext())
        {
            [buffer.ItemId, buffer.InventDimId, buffer.Qty, buffer.InventTransId, buffer.NormalizedQty, buffer.BaseValue, buffer.AttribValue] = selectionIdx.currentValue();
            buffer.RecId = 0;
            buffer.insert();

            if (buffer.InventTransId == _prodBOM.InventTransId)
            {
                markedActiveQty += buffer.NormalizedQty;
            }
        }

        if (bomBalanceQtyList.exists(_prodBOM.InventTransId))
        {
            bomBalanceQtyList.remove(_prodBOM.InventTransId);
            selChanged = true;
        }

        while select Qty, NormalizedQty, AttribValue
            from buffer
            order by NormalizedQty
            where buffer.InventTransId == _prodBOM.InventTransId
        {
            reqQty = decround((_prodBOM.QtyBOMCalc * (str2num(_prodBOM.PDSBaseValue) / 100)) / (buffer.AttribValue / 100), UnitOfMeasure::findBySymbol(_prodBOM.UnitId).DecimalPrecision);

            if (reqQty > buffer.Qty)
            {
                balQty += buffer.Qty;
            }
            else
            {
                balQty = reqQty;
            }
        }

        if (markedActiveQty > 0
            && markedActiveQty == bomActiveQtyList.lookup(_prodBOM.InventTransId))
        {
            bomBalanceQtyList.insert(_prodBOM.InventTransId, balQty);
        }

        return selChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQtyMarked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the used quantity.
    /// </summary>
    /// <param name="_prodBOM">
    /// The record of the <c>ProdBOM</c> table for the current production BOM line.
    /// </param>
    /// <param name="_sum">
    /// The record of the <c>InventSum</c> table for the selected inventory summary.
    /// </param>
    /// <param name="_qty">
    /// The quantity to use.
    /// </param>
    /// <returns>
    /// The quantity actually used, this may be less than <paramref name="_qty"/>.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Thrown if <paramref name="_prodBOM"/> needs have been fulfilled.
    /// </exception>
    public Qty setQtyMarked(ProdBOM _prodBOM, InventSum _sum, InventQty _qty)
    {
        str                 key = this.key(_prodBOM.InventTransId, this.hashKey(_sum));
        Qty                 batchActiveQty;
        Qty                 markedActiveQty;
        Qty                 balQty;
        Qty                 usedInvQty;
        PDSBaseValueNum     baseVal     = str2num(_prodBOM.PDSBaseValue);
        PDSBaseValueNum     attribVal   = str2num(this.baseAttributeValue(_sum));
        Qty                 ret         = _sum.AvailPhysical;
        Qty                 activeQty   = _prodBOM.QtyBOMCalc;

        markedActiveQty = this.markedActiveQty(_prodBOM.InventTransId, this.hashKey(_sum));

        if (selectionList.exists(key))
        {
            selectionList.remove(key);
        }

        if (_prodBOM.UnitId != _prodBOM.inventUnit())
        {
            activeQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_prodBOM.ItemId,
                                                                                              _prodBOM.InventDimId,
                                                                                              activeQty,
                                                                                              _prodBOM.UnitId,
                                                                                              _prodBOM.inventUnit(),
                                                                                              NoYes::Yes);
        }
        balQty         = (activeQty * (baseVal / 100)) - markedActiveQty;

        if (balQty <= 0)
        {
            throw error("@PSC363");
        }

        batchActiveQty = min(balQty, _sum.AvailPhysical * (attribVal / 100));
        ret            = min(_qty, batchActiveQty);

        if (ret != balQty)
        {
            info(strFmt("@PSC369", num2str0(balQty - ret, 0, UnitOfMeasure::findBySymbol(_prodBOM.UnitId).DecimalPrecision)));
            usedInvQty = _sum.AvailPhysical;
        }
        else
        {
            usedInvQty = decRound((ret / (attribVal / 100)), UnitOfMeasure::findBySymbol(_prodBOM.UnitId).DecimalPrecision);
        }

        this.insertSelectionList(key, _sum, _prodBOM, usedInvQty, ret, baseVal, attribVal);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSelectionList</Name>
				<Source><![CDATA[
    internal void insertSelectionList(str       key, 
                                      InventSum _sum,
                                      ProdBOM   _prodBOM, 
                                      Qty       usedInvQty,
                                      Qty       ret,
                                      PDSBaseValueNum     baseVal,
                                      PDSBaseValueNum     attribVal)
    {
        selectionList.insert(key, [_sum.ItemId, _sum.InventDimId, usedInvQty, _prodBOM.InventTransId, ret, baseVal, attribVal]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalActiveQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total quantity for the active ingredients on the production order.
    /// </summary>
    /// <returns>
    /// The total active quantity.
    /// </returns>
    public Qty totalActiveQty()
    {
        return totalActiveQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PDSBalanceProdBOM construct()
    {
        return new PDSBalanceProdBOM();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>