<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgInsertMissingClockOutRegistrations</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>JmgInsertMissingClockOutRegistrations</c> class inserts missing clock out registrations
/// for workers who are currently clocked in.
/// </summary>
class JmgInsertMissingClockOutRegistrations extends RunBaseBatch implements BatchRetryable
{
    JmgDate                 profileDate;
    JmgProfileId            profileId;
    DialogField             dialogProfileDate;
    QueryRun                queryRun;

    #DEFINE.CurrentVersion(3)
    #LOCALMACRO.CurrentList
        profileDate,
        profileId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    /// created in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        Dialog ret = super();

        dialogProfileDate = ret.addField(extendedtypestr(JmgDate), "@SYS38388");

        dialogProfileDate.value(profileDate);

        ret.caption("@SYS39548");

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates values entered by the user.
    /// </summary>
    /// <returns>
    ///    true if the entered values are validated correctly; otherwise, false.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret = super();

        profileDate = dialogProfileDate.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the query.
    /// </summary>
    /// <param name="_jmgWorkerRecId">
    /// The record ID for the worker buffer.
    /// </param>
    public void initQuery(JmgWorkerRecId _jmgWorkerRecId = 0)
    {
        Query                   q           = new Query();
        QueryBuildDataSource    qbds        = q.addDataSource(tablenum(JmgEmployee));
        QueryBuildRange         workerRange = qbds.addRange(fieldnum(JmgEmployee, Worker));

        qbds.addRange(fieldnum(JmgEmployee, CalculateGroupId));
        qbds.addRange(fieldnum(JmgEmployee, ApproveGroupId));

        QueryBuildRange activeRange = qbds.addRange(fieldnum(JmgEmployee, Active));
        activeRange.value(queryValue(NoYes::Yes));
        activeRange.status(RangeStatus::Locked);

        if (_jmgWorkerRecId)
        {
            workerRange.value(queryValue(_jmgWorkerRecId));
        }

        queryRun = new QueryRun(q);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJmgProfileId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the JmgProfileId.
    /// </summary>
    /// <param name="_profileId">
    /// The JmgProfileId.
    /// </param>
    private void setJmgProfileId(JmgProfileId _profileId = "")
    {
        profileId = _profileId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJmgProfileDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the JmgDate.
    /// </summary>
    /// <param name="_profileDate">
    /// The JmgDate.
    /// </param>
    private void setJmgProfileDate(JmgDate _profileDate)
    {
        profileDate = _profileDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>JmgInsertMissingClockOutRegistrations</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>JmgInsertMissingClockOutRegistrations</c> class.
    /// </returns>
    public static JmgInsertMissingClockOutRegistrations construct()
    {
        return new JmgInsertMissingClockOutRegistrations();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList,queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    /// The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    /// This method is used if a query prompt is the dialog, and if a Select menu item is added to a dialog
    /// box. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it in
    /// the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        JmgEmployee         jmgEmployee;
        JmgProfileSpec      jmgProfileSpec;
        JmgProfileTypeTable jmgProfileTypeTable;
        JmgTermReg          existingRegs;
        JmgDate             regDate;
        JmgDate             temp;
        JmgTime             regTime;
        JmgJobBundle        jobBundle;
        JmgJobTable         jobTable;

        super();

        ttsbegin;
        queryRun.reset();
        while (queryRun.next())
        {
            jmgEmployee = queryRun.get(tablenum(JmgEmployee));
            regDate = dateNull();
            regTime = 0;

            select firstonly existingRegs
                order by RegDateTime desc
                where existingRegs.Worker == jmgEmployee.Worker &&
                      existingRegs.ProfileDate == profileDate &&
                      (existingRegs.RegType == JmgTermRegType::ClockIn ||
                       existingRegs.RegType == JmgTermRegType::ClockOut);

            if (existingRegs && existingRegs.RegType == JmgTermRegType::ClockIn)
            {
                // A clock in is unmatched. Find the nearest Clock-out from the profile.
                while select StartDay, StartTime
                    from  jmgProfileSpec
                    order by StartDay, StartTime asc
                    where jmgProfileSpec.Profile    == (profileId ? profileId : jmgEmployee.profileId(DateTimeUtil::date(existingRegs.RegDateTime), DateTimeUtil::time(existingRegs.RegDateTime)))
                        && jmgProfileSpec.DayId     == JmgProfiles::date2DayId(profileDate)
                    exists join jmgProfileTypeTable
                    where jmgProfileSpec.ProfileType            == jmgProfileTypeTable.RecId
                        && jmgProfileTypeTable.ProfileSpecType  == JmgProfileSpecTypeEnum::SignOut
                {
                    temp = profileDate + jmgProfileSpec.StartDay;
                    if (!regDate && !regTime &&
                        ((temp > DateTimeUtil::date(existingRegs.RegDateTime)                                                            ||
                         (temp == DateTimeUtil::date(existingRegs.RegDateTime) && jmgProfileSpec.StartTime > DateTimeUtil::time(existingRegs.RegDateTime)))))
                    {
                        regDate = temp;
                        regTime = jmgProfileSpec.StartTime;
                    }
                }
                if (!regDate && !regTime)
                {
                    regDate = JmgProfileSeconds::getSysDate();
                    regTime = JmgProfileSeconds::getSysTime();
                }

                // Make clock out registration
                jobBundle = new JmgJobBundle(jmgEmployee.Worker, false, false, false);
                jobTable.JobId = JmgIpcActivity::findSignOutJobId(); // we only need JobId - no need for the whole record
                jobBundle.addJob(jobTable);
                jobBundle.makeRegistrations(regDate, regTime);

                info(strfmt("@SYS39551", HcmWorker::find(jmgEmployee.Worker).PersonnelNumber, JmgProfileSeconds::formattedSeconds(regTime, JmgSecondPresentationEnum::Clocktime)));
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    ///    true if the task is run on the server; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Your classes that extend this class must override the <c>runsImpersonated</c> method and return
    ///    false, if you want those tasks to run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to add a Select button to the dialog box.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    /// return a valid <c>queryRun</c> .If you change the return value to false the button will no longer
    /// be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer         version      = conpeek(packedClass,1);
        PackedQueryRun  packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,packedQuery] = packedClass;
                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new queryRun(packedQuery);
                }
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS39548";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        Common                                  buffer;
        JmgTmpEmplSignedIn                      jmgTmpEmplSignedIn;
        JmgWorkerRecId                          jmgWorkerRecId = 0;
        if (_args && _args.record())
        {
            buffer = _args.record();
        }

        JmgInsertMissingClockOutRegistrations   insertMissingClockOut = JmgInsertMissingClockOutRegistrations::construct();
        insertMissingClockOut.setJmgProfileDate(JmgProfileSeconds::getSysDate());
        if (buffer && buffer.TableId == tablenum(jmgTmpEmplSignedIn))
        {
            jmgTmpEmplSignedIn      = buffer as JmgTmpEmplSignedIn;
            jmgWorkerRecId = jmgTmpEmplSignedIn.Worker;
            insertMissingClockOut.getLast();
            insertMissingClockOut.setJmgProfileId(jmgTmpEmplSignedIn.ProfileId);
        }

        insertMissingClockOut.initQuery(jmgWorkerRecId);

        if (insertMissingClockOut.prompt())
        {
            insertMissingClockOut.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>