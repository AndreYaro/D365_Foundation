<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Tutorial_Comparable</Name>
	<SourceCode>
		<Declaration><![CDATA[
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
class Tutorial_Comparable implements SysComparable
{
    CustTable   custTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>comparableName</Name>
				<Source><![CDATA[
    public str comparableName()
    {
        return strfmt("%1, %2", custTable.AccountNum, custTable.Name());
    }

]]></Source>
			</Method>
			<Method>
				<Name>comparableTextList</Name>
				<Source><![CDATA[
    public List comparableTextList( SysComparable _top,
                                    SysCompareContextProvider _context,
                                    SysComparable _matchingDummy = null)
    {
        str text;
        DictTable dictTable = new DictTable(custTable.TableId);
        DictFieldGroup dictFieldGroup;
        DictField dictField;
        DictField extDictField;
        fieldId   fieldId, extFieldId;
        int i, j, k;
        List list = new List(Types::Record);

        for (i=1; i<=dictTable.fieldGroupCnt(); i++)
        {
            dictFieldGroup = new DictFieldGroup(dictTable.id(), dictTable.fieldGroup(i));
            text = '';
            for (j=1; j<=dictFieldGroup.numberOfFields(); j++)
            {
                fieldId = dictFieldGroup.field(j);

                dictField = new DictField(dictTable.id(), fieldId);
                if (dictField)
                {
                    for (k=1; k<=dictField.arraySize(); k++)
                    {
                        extFieldId   = Global::fieldId2Ext(fieldId, k);
                        extDictField = new DictField(dictTable.id(), extFieldId);

                        switch (extDictField.baseType())
                        {
                            case Types::Container:
                                break;

                            case Types::String:
                            case Types::VarString:
                                text += strfmt(" %1%2: %3\n", extDictField.label(), strrep(' ', 40-strlen(extDictField.label())), strReplace(custTable.(extFieldId), '\n', ','));
                                break;

                            default:
                                text += strfmt(" %1%2: %3\n", extDictField.label(), strrep(' ', 40-strlen(extDictField.label())), custTable.(extFieldId));
                                break;
                        }
                    }
                }
            }
            list.addEnd(SysComparableTmpText::newText(substr(text,1,strlen(text)-1), dictFieldGroup.label(), 0, false, true));
        }
        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMatchingComparable</Name>
				<Source><![CDATA[
    public SysComparable findMatchingComparable(SysComparable _dummy)
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumerator</Name>
				<Source><![CDATA[
    public SysComparableEnumerator getEnumerator()
    {
        //No children for customers
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    public str name()
    {
        //Tree not used in this tutorial
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>onComparableFocus</Name>
				<Source><![CDATA[
    public void onComparableFocus()
    {
        //No need to reread, as tutorial doesn't support a tree structure.
    }

]]></Source>
			</Method>
			<Method>
				<Name>onComparableSelected</Name>
				<Source><![CDATA[
    public void onComparableSelected()
    {
        ;
        custTable = CustTable::find(custTable.AccountNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustTable</Name>
				<Source><![CDATA[
    public CustTable parmCustTable(CustTable _custTable = custTable)
    {
        ;
        custTable.data(_custTable);

        return custTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static Tutorial_Comparable construct()
    {
        return new Tutorial_Comparable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCustTable</Name>
				<Source><![CDATA[
    public static Tutorial_Comparable newCustTable(CustTable _custTable)
    {
        Tutorial_Comparable tutorial = Tutorial_Comparable::construct();
    ;
        tutorial.parmCustTable(_custTable);
        return tutorial;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>