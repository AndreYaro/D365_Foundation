<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendCreatePaymJournalBillSettle_Cust</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustVendCreatePaymJournalBillSettle_Cust extends CustVendCreatePaymJournalBill_Cust implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    protected boolean calc(CustVendTransOpen _custTransOpen)
    {
        boolean ok = super(_custTransOpen);

        if (ok)
        {
            if (negInstStatus == CustVendNegInstStatus::Remitted)
            {
                CustTrans custTrans = _custTransOpen.custTrans();
                CustBillOfExchangeTrans custBillOfExchangeTrans = CustBillOfExchangeTrans::findIdVoucherDate(
                    custTrans.BillOfExchangeID,
                    custTrans.Voucher,
                    custTrans.TransDate);
                if (remittanceType != custBillOfExchangeTrans.BankRemittanceType)
                {
                    ok = false;
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be built by using the <c>Dialog</c> class or by using a class that is created in the
    ///    Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        super();

        dialog.curFormGroup(dialogGroupNegInst.formGroup());

        dialogRemittanceType = dialog.addFieldValue(enumStr(BankRemittanceType), remittanceType, "@SYS71504", "@SYS71505");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Transfers values from dialog box fields to the class member values that represent the user input.
    /// </summary>
    /// <returns>
    ///    The return value of a call to the <c>super</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is invoked by the <c>RunBase</c> framework when the OK button of the dialog box is
    ///    pressed.
    /// </remarks>
    public boolean getFromDialog()
    {
        remittanceType = dialogRemittanceType.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchTransactions</Name>
				<Source><![CDATA[
    protected void searchTransactions()
    {
        super();

        CustPostingProfile custPostingProfile;

        switch (remittanceType)
        {
            case BankRemittanceType::Collection:
                custPostingProfile = CustParameters::find().PostingProfileBillsRemitCollection;
                break;

            case BankRemittanceType::Discount:
                custPostingProfile = CustParameters::find().PostingProfileBillsRemitDiscount;
                break;

            case BankRemittanceType::None:
                custPostingProfile = CustParameters::find().PostingProfileBills;
                break;

            default:
                break;
        }

        CustVendPaymProposalLine custVendPaymProposalLine;
        update_recordset custVendPaymProposalLine
            setting PostingProfile = custPostingProfile
            where custVendPaymProposalLine.JournalId == paymProposal.ledgerJournalId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS75712";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>