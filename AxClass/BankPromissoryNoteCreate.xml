<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankPromissoryNoteCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public final class BankPromissoryNoteCreate extends BankNegInstCreate
{
    private DialogField dialogFormat;
    private BankPromissoryNoteLayout bankPromissoryNoteLayout;

    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        accountID,
        fromNegInstNum,
        numOfNegInst,
        format
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createDocument</Name>
				<Source><![CDATA[
    public void createDocument(
        BankNegInstNum _noteNum,
        CompanyBankAccountId _accountID)
    {
        BankPromissoryNoteTable::createPromissoryNote(_noteNum, _accountID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialogFromNegInstNum = dialog.addFieldValue(extendedTypeStr(BankPromissoryNoteStartNum), fromNegInstNum, "@SYS4083");
        dialogNumOfNegInst = dialog.addFieldValue(extendedTypeStr(BankPromissoryNoteQty), numOfNegInst, "@SYS14578");

        dialogFormat = dialog.addFieldValue(extendedTypeStr(NumberSequenceFormat),format);
        dialogFormat.visible(false);

        dialog.allowUpdateOnSelectCtrl(true);
        this.dialogSelectCtrl();

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogSelectCtrl</Name>
				<Source><![CDATA[
    /// <summary>
    ///    When using the dialog class for dialog, this method is called whenever a control is selected.
    /// </summary>
    /// <remarks>
    ///    To enable this callback, the <c>allowUpdateOnSelectCtrl</c> method must have been set true.
    /// </remarks>
    public void dialogSelectCtrl()
    {
        super();

        bankPromissoryNoteLayout = BankPromissoryNoteLayout::find(dialogAccountId.value());

        if (this.isEnabledFormatNoteNumber_ES())
        {
            dialogFormat.visible(true);
        }
        else
        {
            dialogFormat.visible(false);
            dialogFormat.displayLength(12);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        super();

        if (this.isEnabledFormatNoteNumber_ES())
        {
            format = dialogFormat.value();
        }
        else
        {
            this.parmFormat('');
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabledFormatNoteNumber_ES</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies whether the note number must be formatted.
    /// </summary>
    /// <returns>
    /// true if the note number must be formatted; otherwise, false.
    /// </returns>
    public boolean isEnabledFormatNoteNumber_ES()
    {
        return  (bankPromissoryNoteLayout.NoteFormType == BankPromissoryNoteFormType::ESStyle
                 && bankPromissoryNoteLayout.NoteFormat);
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtDocsAreCreated</Name>
				<Source><![CDATA[
    protected str txtDocsAreCreated()
    {
        return "@SYS73994";
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        if (bankPromissoryNoteLayout.NoteNumMethod != BankPromissoryNoteNumMethod::Fixed)
        {
            return checkFailed(strFmt("@SYS73989", BankPromissoryNoteNumMethod::Fixed));
        }

        if (!fromNegInstNum)
        {
            return checkFailed("@SYS73997");
        }

        if (!numOfNegInst)
        {
            return checkFailed("@SYS24140");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS73998";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        BankPromissoryNoteCreate bankPromissoryNoteCreate;
        BankPromissoryNoteTable bankPromissoryNoteTable;

        switch (args.dataset())
        {
            case tableNum(BankAccountTable):
                bankPromissoryNoteCreate = BankNegInstCreate::newBankAccountTable(BankNegInst::PromissoryNote, args.record());
                bankPromissoryNoteCreate.setAccountIdInactive();
                break;

            case tableNum(BankPromissoryNoteTable):
                bankPromissoryNoteTable = args.record();
                bankPromissoryNoteCreate = BankNegInstCreate::newBankAccountTable(BankNegInst::PromissoryNote, BankAccountTable::find(bankPromissoryNoteTable.BankAccountID));
                break;

            default:
                throw error(Error::wrongUseOfFunction(BankPromissoryNoteCreate::description()));
        }

        if (bankPromissoryNoteCreate.prompt())
        {
            bankPromissoryNoteCreate.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for executing the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>