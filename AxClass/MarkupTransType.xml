<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MarkupTransType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>MarkupTransType</c> class that is used to validate and apply the default values to the
///    <c>MarkupTrans</c> table records.
/// </summary>
public class MarkupTransType
{
    MarkupTrans markupTrans;
    MarkupTable markupTable;
    LineNum lineNum;

    #define.default('default')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>markupTrans</Name>
				<Source><![CDATA[
    public MarkupTrans markupTrans(MarkupTrans _markupTrans = markupTrans)
    {
        if (!prmisDefault(_markupTrans))
        {
            markupTrans = _markupTrans;
        }

        return markupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCalculatedAmount</Name>
				<Source><![CDATA[
    protected void defaultCalculatedAmount()
    {
        AmountCur   calculatedAmount;

        if (!markupTrans.isFieldSet(fieldNum(MarkupTrans, CalculatedAmount)))
        {
            calculatedAmount = this.determineDefaultCalculatedAmount();
            markupTrans.CalculatedAmount = calculatedAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCurrencyCode</Name>
				<Source><![CDATA[
    protected void defaultCurrencyCode()
    {
        CurrencyCode    currencyCode;

        if (!markupTrans.isFieldSet(fieldNum(MarkupTrans, CurrencyCode)))
        {
            currencyCode = this.determineDefaultCurrencyCode();
            markupTrans.CurrencyCode = currencyCode;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDocumentStatus</Name>
				<Source><![CDATA[
    protected void defaultDocumentStatus()
    {
        DocumentStatus  documentStatus;

        if (!markupTrans.isFieldSet(fieldNum(MarkupTrans, DocumentStatus)))
        {
            documentStatus = this.determineDefaultDocumentStatus();
            markupTrans.DocumentStatus = documentStatus;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies the default value for a specific field.
    /// </summary>
    /// <param name="_fieldId">
    ///    The field ID.
    /// </param>
    public void defaultField(FieldId _fieldId)
    {
        str fieldName;
        str methodName;
        SysDictClass sysDictClass;
        FieldState internalStatusOriginal;
        ExecutePermission permission;

        internalStatusOriginal = markupTrans.inputStatus();
        markupTrans.inputStatus(FieldState::Defaulted);

        fieldName = fieldId2name(markupTrans.TableId, _fieldId);
        methodName = #default + fieldName;
        sysDictClass = new SysDictClass(classIdGet(this));
        if (sysDictClass.hasObjectMethod(methodName))
        {
            permission = new ExecutePermission();
            permission.assert();
            sysDictClass.callObject(methodName, this);
            CodeAccessPermission::revertAssert();
        }
        markupTrans.inputStatus(internalStatusOriginal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFromAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies the default value for the from amount field.
    /// </summary>
    protected void defaultFromAmount()
    {
        MarkupFromAmount fromAmount;

        if (!markupTrans.isFieldSet(fieldNum(MarkupTrans, FromAmount)))
        {
            fromAmount = this.determineDefaultFromAmount();
            markupTrans.FromAmount = fromAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultICMarkupUseValue</Name>
				<Source><![CDATA[
    protected void defaultICMarkupUseValue()
    {
        InterCompanyMarkupUseValue interCompanyMarkupUseValue;

        if (!markupTrans.isFieldSet(fieldNum(MarkupTrans, InterCompanyMarkupUseValue)))
        {
            interCompanyMarkupUseValue = this.determineDefaultICMarkupUseValue();
            markupTrans.InterCompanyMarkupUseValue = interCompanyMarkupUseValue;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInterCompanyCompanyId</Name>
				<Source><![CDATA[
    protected void defaultInterCompanyCompanyId()
    {
        InterCompanyCompanyId  interCompanyCompanyId;

        if (!markupTrans.isFieldSet(fieldNum(MarkupTrans, InterCompanyCompanyId)))
        {
            interCompanyCompanyId = this.determineDefaultInterCompanyCompanyId();
            markupTrans.InterCompanyCompanyId = interCompanyCompanyId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInterCompanyInvoiceId</Name>
				<Source><![CDATA[
    protected void defaultInterCompanyInvoiceId()
    {
        InterCompanyInvoiceId  interCompanyInvoiceId;

        if (!markupTrans.isFieldSet(fieldNum(MarkupTrans, InterCompanyInvoiceId)))
        {
            interCompanyInvoiceId = this.determineDefaultInterCompanyInvoiceId();
            markupTrans.InterCompanyInvoiceId = interCompanyInvoiceId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInterCompanyMarkupValue</Name>
				<Source><![CDATA[
    protected void defaultInterCompanyMarkupValue()
    {
        InterCompanyMarkupValue interCompanyMarkupValue;

        if (!markupTrans.isFieldSet(fieldNum(MarkupTrans, InterCompanyMarkupValue)))
        {
            interCompanyMarkupValue = this.determineDefaultInterCompanyMarkupValue();
            markupTrans.InterCompanyMarkupValue = interCompanyMarkupValue;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInterCompanyRefRecId</Name>
				<Source><![CDATA[
    protected void defaultInterCompanyRefRecId()
    {
        RefRecId interCompanyRefRecId;

        if (!markupTrans.isFieldSet(fieldNum(MarkupTrans, InterCompanyRefRecId)))
        {
            interCompanyRefRecId = this.determineDefaultInterCompanyRefRecId();
            markupTrans.InterCompanyRefRecId = interCompanyRefRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInterCompanySkipUpdate</Name>
				<Source><![CDATA[
    protected void defaultInterCompanySkipUpdate()
    {
        TradeSkipUpdate interCompanySkipUpdate;

        if (!markupTrans.isFieldSet(fieldNum(MarkupTrans, InterCompanySkipUpdate)))
        {
            interCompanySkipUpdate = this.determineDefaultInterCompanySkipUpdate();
            markupTrans.InterCompanySkipUpdate = interCompanySkipUpdate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultKeep</Name>
				<Source><![CDATA[
    protected void defaultKeep()
    {
        MarkupKeep keep;

        if (!markupTrans.isFieldSet(fieldNum(MarkupTrans, Keep)))
        {
            keep = this.determineDefaultKeep();
            markupTrans.Keep = keep;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultLineNum</Name>
				<Source><![CDATA[
    protected void defaultLineNum()
    {
        LineNum localLineNum;

        if (!markupTrans.isFieldSet(fieldNum(MarkupTrans, LineNum)))
        {
            this.defaultTransTableId();
            this.defaultTransRecId();

            localLineNum = this.determineDefaultLineNum() + 1;
            markupTrans.LineNum = localLineNum;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultMarkupCategory</Name>
				<Source><![CDATA[
    protected void defaultMarkupCategory()
    {
        MarkupCategoryType  markupCategory;

        if (!markupTrans.isFieldSet(fieldNum(MarkupTrans, MarkupCategory)))
        {
            markupCategory = this.determineDefaultMarkupCategory();
            markupTrans.MarkupCategory = markupCategory;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultMarkupCode</Name>
				<Source><![CDATA[
    protected void defaultMarkupCode()
    {
        MarkupCode  markupCode;

        if (!markupTrans.isFieldSet(fieldNum(MarkupTrans, MarkupCode)))
        {
            markupCode = this.determineDefaultMarkupCode();
            markupTrans.MarkupCode = markupCode;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultModuleCategory</Name>
				<Source><![CDATA[
    protected void defaultModuleCategory()
    {
        MarkupModuleCategory    moduleCategory;

        if (!markupTrans.isFieldSet(fieldNum(MarkupTrans, ModuleCategory)))
        {
            moduleCategory = this.determineDefaultModuleCategory();
            markupTrans.ModuleCategory = moduleCategory;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultModuleType</Name>
				<Source><![CDATA[
    protected void defaultModuleType()
    {
        MarkupModule moduleType;

        if (!markupTrans.isFieldSet(fieldNum(MarkupTrans, ModuleType)))
        {
            moduleType = this.determineDefaultModuleType();
            markupTrans.ModuleType = moduleType;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultOrigRecId</Name>
				<Source><![CDATA[
    protected void defaultOrigRecId()
    {
        RefRecId origRecId;

        if (!markupTrans.isFieldSet(fieldNum(MarkupTrans, OrigRecId)))
        {
            origRecId = this.determineDefaultOrigRecId();
            markupTrans.OrigRecId = origRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultOrigTableId</Name>
				<Source><![CDATA[
    protected void defaultOrigTableId()
    {
        TableId origTableId;

        if (!markupTrans.isFieldSet(fieldNum(MarkupTrans, OrigTableId)))
        {
            origTableId = this.determineDefaultOrigTableId();
            markupTrans.OrigTableId = origTableId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPosted</Name>
				<Source><![CDATA[
    protected void defaultPosted()
    {
        AmountCur posted;

        if (!markupTrans.isFieldSet(fieldNum(MarkupTrans, Posted)))
        {
            posted = this.determineDefaultPosted();
            markupTrans.Posted = posted;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies default field values for a <c>MarkupTrans</c> table record.
    /// </summary>
    public void defaultRow()
    {
        FieldState internalStatusOriginal;
        Common markupTransHeader = markupTrans.parentRecord();
        internalStatusOriginal = markupTrans.inputStatus();
        markupTrans.inputStatus(FieldState::Defaulted);

        if (markupTransHeader)
        {
            markupTrans.initFromCaller(markupTransHeader.TableId, markupTransHeader);
        }

        this.defaultCalculatedAmount();
        this.defaultCurrencyCode();
        this.defaultDocumentStatus();
        this.defaultInterCompanyCompanyId();
        this.defaultInterCompanyInvoiceId();
        this.defaultICMarkupUseValue();
        this.defaultInterCompanyMarkupValue();
        this.defaultInterCompanyRefRecId();
        this.defaultInterCompanySkipUpdate();
        this.defaultMarkupCategory();
        this.defaultMarkupCode();
        this.defaultModuleCategory();
        this.defaultModuleType();
        this.defaultOrigRecId();
        this.defaultOrigTableId();
        this.defaultPosted();
        this.defaultTaxAmount();
        this.defaultTaxAutogenerated();
        this.defaultTaxGroup();
        this.defaultTaxItemGroup();
        this.defaultTaxWriteCode();
        this.defaultTransDate();
        this.defaultTransTableId();
        this.defaultTransRecId();
        this.defaultTxt();
        this.defaultValue();
        this.defaultVoucher();
        this.defaultKeep();
        this.defaultLineNum();
        this.defaultFromAmount();
        this.defaultToAmount();

        markupTrans.inputStatus(internalStatusOriginal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTaxAmount</Name>
				<Source><![CDATA[
    protected void defaultTaxAmount()
    {
        TaxAmountCur taxAmount;

        if (!markupTrans.isFieldSet(fieldNum(MarkupTrans, TaxAmount)))
        {
            taxAmount = this.determineDefaultTaxAmount();
            markupTrans.TaxAmount = taxAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTaxAutogenerated</Name>
				<Source><![CDATA[
    protected void defaultTaxAutogenerated()
    {
        TaxAutoGenerated taxAutoGenerated;

        if (!markupTrans.isFieldSet(fieldNum(MarkupTrans, TaxAutogenerated)))
        {
            taxAutoGenerated = this.determineDefaultTaxAutogenerated();
            markupTrans.TaxAutogenerated = taxAutoGenerated;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTaxGroup</Name>
				<Source><![CDATA[
    protected void defaultTaxGroup()
    {
        TaxGroup taxGroup;

        if (!markupTrans.isFieldSet(fieldNum(MarkupTrans, TaxGroup)))
        {
            taxGroup = this.determineDefaultTaxGroup();
            markupTrans.TaxGroup = taxGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTaxItemGroup</Name>
				<Source><![CDATA[
    protected void defaultTaxItemGroup()
    {
        TaxItemGroup taxItemGroup;

        if (!markupTrans.isFieldSet(fieldNum(MarkupTrans, TaxItemGroup)))
        {
            taxItemGroup = this.determineDefaultTaxItemGroup();
            markupTrans.TaxItemGroup = taxItemGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTaxWriteCode</Name>
				<Source><![CDATA[
    protected void defaultTaxWriteCode()
    {
        TaxWriteCode taxWriteCode;

        if (!markupTrans.isFieldSet(fieldNum(MarkupTrans, TaxWriteCode)))
        {
            taxWriteCode = this.determineDefaultTaxWriteCode();
            markupTrans.TaxWriteCode = taxWriteCode;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultToAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies the default value for the to amount field.
    /// </summary>
    protected void defaultToAmount()
    {
        MarkupToAmount toAmount;

        if (!markupTrans.isFieldSet(fieldNum(MarkupTrans, ToAmount)))
        {
            toAmount = this.determineDefaultToAmount();
            markupTrans.ToAmount = toAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTransDate</Name>
				<Source><![CDATA[
    protected void defaultTransDate()
    {
        TransDate transDate;

        if (!markupTrans.isFieldSet(fieldNum(MarkupTrans, TransDate)))
        {
            transDate = this.determineDefaultTransDate();
            markupTrans.TransDate = transDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTransRecId</Name>
				<Source><![CDATA[
    protected void defaultTransRecId()
    {
        RefRecId transRecId;

        if (!markupTrans.isFieldSet(fieldNum(MarkupTrans, TransRecId)))
        {
            transRecId = this.determineDefaultTransRecId();
            markupTrans.TransRecId = transRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTransTableId</Name>
				<Source><![CDATA[
    protected void defaultTransTableId()
    {
        TableId transTableId;

        if (!markupTrans.isFieldSet(fieldNum(MarkupTrans, TransTableId)))
        {
            transTableId = this.determineDefaultTransTableId();
            markupTrans.TransTableId = transTableId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTxt</Name>
				<Source><![CDATA[
    protected void defaultTxt()
    {
        TransTxt txt;

        if (!markupTrans.isFieldSet(fieldNum(MarkupTrans, Txt)))
        {
            txt = this.determineDefaultTxt();
            markupTrans.Txt = txt;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultValue</Name>
				<Source><![CDATA[
    protected void defaultValue()
    {
        MarkupValue value;

        if (!markupTrans.isFieldSet(fieldNum(MarkupTrans, Value)))
        {
            value = this.determineDefaultValue();
            markupTrans.Value = value;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultVoucher</Name>
				<Source><![CDATA[
    protected void defaultVoucher()
    {
        Voucher voucher;

        if (!markupTrans.isFieldSet(fieldNum(MarkupTrans, Voucher)))
        {
            voucher = this.determineDefaultVoucher();
            markupTrans.Voucher = voucher;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultCalculatedAmount</Name>
				<Source><![CDATA[
    protected AmountCur determineDefaultCalculatedAmount()
    {
        AmountCur   calculatedAmount;

        calculatedAmount = 0.0;

        return calculatedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultCurrencyCode</Name>
				<Source><![CDATA[
    protected CurrencyCode determineDefaultCurrencyCode()
    {
        CurrencyCode  currencyCode;

        currencyCode = markupTrans.CurrencyCode; // don't change the value

        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultDocumentStatus</Name>
				<Source><![CDATA[
    protected DocumentStatus determineDefaultDocumentStatus()
    {
        DocumentStatus  documentStatus;

        documentStatus = markupTrans.DocumentStatus; // don't change the value

        return documentStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultFromAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the default from amount.
    /// </summary>
    /// <returns>
    ///   An amount.
    /// </returns>
    protected MarkupFromAmount determineDefaultFromAmount()
    {
        MarkupFromAmount fromAmount;

        fromAmount = markupTrans.FromAmount; // don't change the value

        return fromAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultICMarkupUseValue</Name>
				<Source><![CDATA[
    protected InterCompanyMarkupUseValue determineDefaultICMarkupUseValue()
    {
        InterCompanyMarkupUseValue interCompanyMarkupUseValue;

        interCompanyMarkupUseValue = markupTrans.InterCompanyMarkupUseValue; // don't change the value

        return interCompanyMarkupUseValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultInterCompanyCompanyId</Name>
				<Source><![CDATA[
    protected InterCompanyCompanyId determineDefaultInterCompanyCompanyId()
    {
        InterCompanyCompanyId interCompanyCompanyId;

        interCompanyCompanyId = markupTrans.InterCompanyCompanyId; // don't change the value

        return interCompanyCompanyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultInterCompanyInvoiceId</Name>
				<Source><![CDATA[
    protected InterCompanyInvoiceId determineDefaultInterCompanyInvoiceId()
    {
        InterCompanyInvoiceId interCompanyInvoiceId;

        interCompanyInvoiceId = markupTrans.InterCompanyInvoiceId; // don't change the value

        return interCompanyInvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultInterCompanyMarkupValue</Name>
				<Source><![CDATA[
    protected InterCompanyMarkupValue determineDefaultInterCompanyMarkupValue()
    {
        InterCompanyMarkupValue interCompanyMarkupValue;

        interCompanyMarkupValue = markupTrans.InterCompanyMarkupValue; // don't change the value

        return interCompanyMarkupValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultInterCompanyRefRecId</Name>
				<Source><![CDATA[
    protected RefRecId determineDefaultInterCompanyRefRecId()
    {
        RefRecId interCompanyRefRecId;

        interCompanyRefRecId = markupTrans.InterCompanyRefRecId; // don't change the value

        return interCompanyRefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultInterCompanySkipUpdate</Name>
				<Source><![CDATA[
    protected TradeSkipUpdate determineDefaultInterCompanySkipUpdate()
    {
        TradeSkipUpdate interCompanySkipUpdate;

        interCompanySkipUpdate = markupTrans.InterCompanySkipUpdate; // don't change the value

        return interCompanySkipUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultKeep</Name>
				<Source><![CDATA[
    protected MarkupKeep determineDefaultKeep()
    {
        MarkupKeep keep;

        if (markupTrans.ModuleType ==
                                MarkupModuleType::Vend
           )
        {
            keep = markupTrans.MarkupCategory != MarkupCategory::Fixed;
        }
        else
        {
            keep = NoYes::Yes;
        }

        return keep;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultLineNum</Name>
				<Source><![CDATA[
    protected LineNum determineDefaultLineNum()
    {
        if (lineNum == 0)
        {
            lineNum = MarkupTrans::lastLineNum(markupTrans.TransTableId, markupTrans.TransRecId);
        }

        return lineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultMarkupCategory</Name>
				<Source><![CDATA[
    protected MarkupCategoryType determineDefaultMarkupCategory()
    {
        MarkupCategoryType  markupCategory;

        markupCategory = markupTrans.MarkupCategory; // don't change the value

        return markupCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultMarkupCode</Name>
				<Source><![CDATA[
    protected MarkupCode determineDefaultMarkupCode()
    {
        MarkupCode  markupCode;

        markupCode = markupTrans.MarkupCode; // don't change the value

        return markupCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultModuleCategory</Name>
				<Source><![CDATA[
    protected MarkupModuleCategory determineDefaultModuleCategory()
    {
        MarkupModuleCategory  moduleCategory;

        moduleCategory = markupTrans.ModuleCategory; // don't change the value

        return moduleCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultModuleType</Name>
				<Source><![CDATA[
    protected MarkupModule determineDefaultModuleType()
    {
        MarkupModule moduleType;

        moduleType = markupTrans.ModuleType; // don't change the value

        return moduleType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultOrigRecId</Name>
				<Source><![CDATA[
    protected RefRecId determineDefaultOrigRecId()
    {
        RefRecId origRecId;

        origRecId = markupTrans.OrigRecId; // don't change the value

        return origRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultOrigTableId</Name>
				<Source><![CDATA[
    protected TableId determineDefaultOrigTableId()
    {
        TableId origTableId;

        origTableId = markupTrans.OrigTableId; // don't change the value

        return origTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPosted</Name>
				<Source><![CDATA[
    protected AmountCur determineDefaultPosted()
    {
        AmountCur posted;

        posted = markupTrans.Posted; // don't change the value

        return posted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultTaxAmount</Name>
				<Source><![CDATA[
    protected TaxAmountCur determineDefaultTaxAmount()
    {
        TaxAmountCur taxAmount;

        taxAmount = markupTrans.TaxAmount; // don't change the value

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultTaxAutogenerated</Name>
				<Source><![CDATA[
    protected TaxAutoGenerated determineDefaultTaxAutogenerated()
    {
        TaxAutoGenerated taxAutoGenerated;

        taxAutoGenerated = markupTrans.TaxAutogenerated; // don't change the value

        return taxAutoGenerated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultTaxGroup</Name>
				<Source><![CDATA[
    protected TaxGroup determineDefaultTaxGroup()
    {
        TaxGroup taxGroup;

        taxGroup = markupTrans.TaxGroup; // don't change the value

        return taxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultTaxItemGroup</Name>
				<Source><![CDATA[
    protected TaxItemGroup determineDefaultTaxItemGroup()
    {
        TaxItemGroup taxItemGroup;

        taxItemGroup = markupTable.TaxItemGroup;

        return taxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultTaxWriteCode</Name>
				<Source><![CDATA[
    protected TaxWriteCode determineDefaultTaxWriteCode()
    {
        TaxWriteCode taxWriteCode;

        taxWriteCode = markupTrans.TaxWriteCode; // don't change the value

        return taxWriteCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultToAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the default to amount.
    /// </summary>
    /// <returns>
    ///   An amount.
    /// </returns>
    protected MarkupToAmount determineDefaultToAmount()
    {
        MarkupToAmount toAmount;

        toAmount = markupTrans.ToAmount; // don't change the value

        return toAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultTransDate</Name>
				<Source><![CDATA[
    protected TransDate determineDefaultTransDate()
    {
        TransDate transDate;

        transDate = markupTrans.TransDate; // don't change the value

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultTransRecId</Name>
				<Source><![CDATA[
    protected RefRecId determineDefaultTransRecId()
    {
        RefRecId transRecId;

        transRecId = markupTrans.TransRecId; // don't change the value

        return transRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultTransTableId</Name>
				<Source><![CDATA[
    protected TableId determineDefaultTransTableId()
    {
        TableId transTableId;

        transTableId = markupTrans.TransTableId; // don't change the value

        return transTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultTxt</Name>
				<Source><![CDATA[
    protected TransTxt determineDefaultTxt()
    {
        TransTxt txt;

        txt = markupTable.Txt;

        return txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultValue</Name>
				<Source><![CDATA[
    protected MarkupValue determineDefaultValue()
    {
        MarkupValue value;

        value = markupTrans.Value; // don't change the value

        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultVoucher</Name>
				<Source><![CDATA[
    protected Voucher determineDefaultVoucher()
    {
        Voucher voucher;

        voucher = markupTrans.Voucher; // don't change the value

        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupTable</Name>
				<Source><![CDATA[
    public MarkupTable markupTable(MarkupTable _markupTable = markupTable)
    {
        if (_markupTable != markupTable)
        {
            markupTable = _markupTable;
        }
        else
        {
            // getter - retrieve markupTable based on the table buffer being defaulted
            if (markupTable == null) // lazy load
            {
                markupTable = markupTrans.markupTable();
            }
        }

        return markupTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates a value for a specific field.
    /// </summary>
    /// <param name="_fieldId">
    ///    The field ID that corresponds to the field to validate.
    /// </param>
    /// <returns>
    ///    true if the field is valid; otherwise, false.
    /// </returns>
    public boolean validateField(FieldId _fieldId)
    {
        boolean isValid = true;

        switch (_fieldId)
        {
            case fieldNum(MarkupTrans, MarkupCode):
                isValid = this.validateMarkupCode();
                break;

            case fieldNum(MarkupTrans, MarkupCategory):
                isValid = this.validateMarkupCategory();
                break;

            case fieldNum(MarkupTrans, Keep):
                isValid = this.validateKeep();
                break;

            case fieldNum(MarkupTrans, Position):
                isValid = this.validatePosition();
                break;


            case fieldNum(MarkupTrans, IsCompound):
                isValid = this.validateIsCompound();
                break;
                
            case fieldNum(MarkupTrans, SpecificUnitSymbol):
                isValid = this.validateSpecificUnitSymbol();
                break;

        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePosition</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean validatePosition()
    {
        return markupTrans.checkPosition();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateIsCompound</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean validateIsCompound()
    {
        return markupTrans.checkIsCompound();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSpecificUnitSymbol</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean validateSpecificUnitSymbol()
    {
        return markupTrans.checkSpecificUnitSymbol();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateKeep</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies that the <c>Keep</c> field is set to valid values.
    /// </summary>
    /// <returns>
    ///    true if the <c>Keep</c> field is set to valid values; otherwise, false.
    /// </returns>
    protected boolean validateKeep()
    {
        return markupTrans.checkKeep();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMarkup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the markup fields for a <c>MarkupTrans</c> table record.
    /// </summary>
    /// <returns>
    ///    true if the record is valid; otherwise, false.
    /// </returns>
    protected boolean validateMarkup()
    {
        boolean isValid = true;

        // do not short circuit, always validate all in order to generate faults
        isValid = this.validateMarkupCode() && isValid;
        isValid = this.validateMarkupCategory() && isValid;
        isValid = this.validateKeep() && isValid;
        isValid = this.validatePosition() && isValid;
        isValid = this.validateIsCompound() && isValid;
        isValid = this.validateSpecificUnitSymbol() && isValid;

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMarkupCategory</Name>
				<Source><![CDATA[
    protected boolean validateMarkupCategory()
    {
        return markupTrans.checkMarkupCategory();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMarkupCode</Name>
				<Source><![CDATA[
    protected boolean validateMarkupCode()
    {
        return markupTrans.checkMarkupCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates field values for a <c>MarkupTrans</c> table record.
    /// </summary>
    /// <returns>
    ///    true if the record is valid; otherwise, false.
    /// </returns>
    public boolean validateRow()
    {
        boolean isValid = true;

        isValid = this.validateMarkup();
        // do not short circuit, always validateTaxes in order to generate faults
        isValid = this.validateTaxes() && isValid;

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTaxes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Cross validates tax fields for a <c>MarkupTrans</c> table record.
    /// </summary>
    /// <returns>
    ///    true if the record is valid; otherwise, false.
    /// </returns>
    protected boolean validateTaxes()
    {
        return markupTrans.checkTaxCombination();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs a new instance of a <c>MarkupTransType</c> class derivative.
    /// </summary>
    /// <param name="_markupTrans">
    ///    A <c>MarkupTrans</c> record.
    /// </param>
    /// <returns>
    ///    A <c>MarkupTransType</c> class derivative.
    /// </returns>
    public static MarkupTransType construct(MarkupTrans _markupTrans)
    {
        MarkupTransType strategy = new MarkupTransType();
        strategy.MarkupTrans(_markupTrans);
        strategy.markupTable();
        return strategy;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>