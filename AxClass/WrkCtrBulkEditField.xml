<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WrkCtrBulkEditField</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WrkCtrBulkEditField</c> class is used to abstract bulk editable data fields.
/// </summary>
/// <remarks>
/// The <c>WrkCtrBulkEditField</c> class implements methods specific to bulk edit functionality in resource model.
/// The methods are used to validate whether the filed fulfills the requirements to be bulk editable.
/// </remarks>
class WrkCtrBulkEditField
{
    DictField           dictField;
    FormDataSource      formDataSource;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isDeletedObject</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether the field has been deleted in the earlier versions.
    /// </summary>
    /// <returns>
    ///     True if the field has been deleted in the earlier versions; otherwise, false.
    /// </returns>
    public boolean isDeletedObject()
    {
        boolean ret = false;

        ret =   dictField.configurationKeyId() == configurationKeyNum(SysDeletedObjects41) ||
                dictField.configurationKeyId() == configurationKeyNum(SysDeletedObjects60) ||
                dictField.configurationKeyId() == configurationKeyNum(SysDeletedObjects62);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEditable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether the field is bulk editable on the form.
    /// </summary>
    /// <returns>
    ///     True if the field is editable on the form; otherwise, false.
    /// </returns>
    public boolean isEditable()
    {
        boolean ret = false;

        if ( this.isFieldTypeSupported() && this.isEditableOnDataSource() && !this.isPartOfUniqueIndex() )
        {
            ret = this.isEditableOnTable();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEditableOnDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether the field is bulk editable on the data source of the form.
    /// </summary>
    /// <returns>
    ///     True if the field is editable on the data source of the form; otherwise, false.
    /// </returns>
    private boolean isEditableOnDataSource()
    {
        boolean         ret = false;
        FormDataObject  dataSourceField;

        if ( formDataSource.allowEdit() )
        {
            dataSourceField = formDataSource.object(dictField.id());
            if ( dataSourceField )
            {
                ret = dataSourceField.enabled() && dataSourceField.visible() && dataSourceField.allowEdit();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEditableOnTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether the field is bulk editable on the table in which it is declared.
    /// </summary>
    /// <returns>
    ///     True if the field is editable on the table in which it is declared; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     The following rules are applied: the field is no system, the <c>AllowEdit</c> property is set to
    ///     <c>NoYes::Yes</c>, it is visible, and has not been deleted in the earlier versions.
    /// </remarks>
    public boolean isEditableOnTable()
    {
        return !dictField.isSystem() &&
                dictField.allowEdit() &&
                dictField.visible() &&
                !this.isDeletedObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldTypeSupported</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether the field type is supported by the bulk edit.
    /// </summary>
    /// <returns>
    ///     True if the field type is supported; otherwise, false.
    /// </returns>
    private boolean isFieldTypeSupported()
    {
        boolean ret = false;

        switch (dictField.baseType())
        {
            case Types::String:
            case Types::Enum:
            case Types::Date:
            case Types::Integer:
            case Types::Real:
                ret = true;
                break;

            default:
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPartOfUniqueIndex</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether the field is part of a unique index.
    /// </summary>
    /// <returns>
    ///     True if the field is part of a unique index; otherwise, false.
    /// </returns>
    public boolean isPartOfUniqueIndex()
    {
        DictTable   fieldTable = new DictTable( dictField.tableid() );
        DictIndex   dictIndex;
        DictField   indexField;
        IndexId     indexId;

        int         indexFieldNum = 0;

        boolean     ret = false;

        indexId = fieldTable.indexNext(0);

        while ( indexId && !ret )
        {
            dictIndex = fieldTable.indexObject(indexId);

            if ( !dictIndex.allowDuplicates() )
            {
                for ( indexFieldNum = 1; indexFieldNum <= dictIndex.numberOfFields(); ++indexFieldNum )
                {
                    indexField = fieldTable.fieldObject( dictIndex.field(indexFieldNum) );

                    if ( indexField.id() == dictField.id() )
                    {
                        ret = true;
                    }
                }
            }

            indexId = fieldTable.indexNext(indexId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>label</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a human readable translated label of the field.
    /// </summary>
    /// <returns>
    ///    The field label.
    /// </returns>
    public str label()
    {
        return dictField.qualifiedLabel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the field name..
    /// </summary>
    /// <returns>
    ///    The field name.
    /// </returns>
    public str name()
    {
        return dictField.name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDictField</Name>
				<Source><![CDATA[
    public DictField parmDictField( DictField _dictField=dictField )
    {
        dictField = _dictField;
        return dictField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormDataSource</Name>
				<Source><![CDATA[
    public FormDataSource parmFormDataSource(FormDataSource _formDataSource = formDataSource)
    {
        formDataSource = _formDataSource;

        return formDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WrkCtrBulkEditField construct()
    {
        return new WrkCtrBulkEditField();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromDatasourceField</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Create a new instance of the <c>WrkCtrBulkEditField</c> class that is based on a data source field.
    /// </summary>
    /// <param name="_dataSource">
    ///     The form data source.
    /// </param>
    /// <param name="_dictField">
    ///     The field information for which to base the new instance.
    /// </param>
    /// <returns>
    ///     A new instance of the <c>WrkCtrBulkEditField</c> class.
    /// </returns>
    public static WrkCtrBulkEditField newFromDatasourceField(
        FormDataSource      _dataSource,
        DictField           _dictField )
    {
        WrkCtrBulkEditField bulkEditField = WrkCtrBulkEditField::construct();

        bulkEditField.parmFormDataSource(_dataSource);
        bulkEditField.parmDictField(_dictField);

        return bulkEditField;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>