<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLocDirStrategyClass</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class for <c>WHSLocDirStrategy</c> enum.
/// </summary>
public class WHSLocDirStrategyClass
{    
    private WHSLocDirStrategy strategy;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>WHSLocDirStrategyClass</c> instance.
    /// </summary>
    /// <param name = "_strategy">A location directive strategy.</param>
    /// <returns>A new instance of the <c>WHSLocDirStrategyClass</c> class.</returns>
    public static WHSLocDirStrategyClass newFromMode(WHSLocDirStrategy _strategy)
    {
        WHSLocDirStrategyClass controller = new WHSLocDirStrategyClass();
        controller.initialize(_strategy);

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    private void initialize(WHSLocDirStrategy _strategy)
    {
        strategy = _strategy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>stringify</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the strategy into a string.
    /// </summary>
    /// <remarks>Since the strategy is extensible this method is used to meet privacy compliance.</remarks>
    /// <returns>The strategy.</returns>
    public str stringify()
    {
        switch(strategy)
        {
            case WHSLocDirStrategy::None: return 'None';
            case WHSLocDirStrategy::MatchPackingQty: return 'MatchPackingQty';
            case WHSLocDirStrategy::Consolidate: return 'Consolidate';
            case WHSLocDirStrategy::FEFOBatch: return 'FEFOBatch';
            case WHSLocDirStrategy::LPLocateAndFEFOBatch: return 'LPLocateAndFEFOBatch';
            case WHSLocDirStrategy::LPLocate: return 'LPLocate';
            case WHSLocDirStrategy::GuidedLPLocate: return 'GuidedLPLocate';
            case WHSLocDirStrategy::UnallocatedLocation: return 'UnallocatedLocation';
            case WHSLocDirStrategy::LocationAgingFIFO: return 'LocationAgingFIFO';
            case WHSLocDirStrategy::LocationAgingLIFO: return 'LocationAgingLIFO';
            case WHSLocDirStrategy::ConsolidateIncludeIncomingWork: return 'ConsolidateIncludeIncomingWork';
        }
        
        return 'Unknown' + int2Str(enum2int(strategy));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>