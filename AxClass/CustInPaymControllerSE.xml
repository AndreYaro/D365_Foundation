<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInPaymControllerSE</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustInPaymControllerSE</c> class is a controller class for the <c>CustInPaymSE</c> report.
/// </summary>
/// <remarks>
///    This class is used to capture the required data into a temporary table and pass the handler to the
///    remote data provider class as an input parameter by invoking the report. This controller class uses
///    the <c>SRSTmpTblMarshaller</c> class to carry the data to the remote data provider class.
/// </remarks>
class CustInPaymControllerSE extends SRSReportRunController implements BatchRetryable
{
    #define.ReportName          ('CustInPaymSE.Report')

    LedgerJournalTrans  ledgerJournalTrans;
    Counter             numOfRecord;
    ErrorTxt            errorTxt;
    Amount              totalAmount_SEK;
    Amount              totalAmount_EUR;
    boolean             transForFees;
    CustInPaymTmpSE     custInPaymTmpSE;
    CustName            custName;
    CustInvoiceId       invoiceId;
    Amount              amount;
    Amount              feeAmount;
    TempStr             importFileText;

    CurrencyCode        currencyCode;
    str                 status;
    str                 transType;
    Filename            filename;
    LedgerAccount       offsetAccount;
    LedgerJournalId     ledgerJournalId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceSE00013, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustInPaymentSETmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts data into the temporary table.
    /// </summary>
    /// <param name="_custInPaymSE">
    ///    The parameter of <c>CustInPaymSE</c> type that is passed from the main method.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void insertCustInPaymentSETmp(CustInPaymSE _custInPaymSE)
    {
        custInPaymTmpSE.AccountDisplay      = ledgerJournalTrans.accountDisplay();
        custInPaymTmpSE.Amount              = ledgerJournalTrans.AmountCurCredit - ledgerJournalTrans.AmountCurDebit;
        custInPaymTmpSE.CurrencyCode        = ledgerJournalTrans.CurrencyCode;
        custInPaymTmpSE.CurrencyCodeValue   = currencyCode;
        custInPaymTmpSE.CustName            = _custInPaymSE.ledgerJournalTrans(numOfRecord).accountName();
        custInPaymTmpSE.ErrorTxt            = errorTxt;
        custInPaymTmpSE.ImportFileText      = _custInPaymSE.importFileText();
        custInPaymTmpSE.Invoice             = ledgerJournalTrans.MarkedInvoice;
        custInPaymTmpSE.NumOfRecord         = numOfRecord;
        custInPaymTmpSE.TotalAmountEUR      = totalAmount_EUR;
        custInPaymTmpSE.TotalAmountSEK      = totalAmount_SEK;
        custInPaymTmpSE.TransDate           = ledgerJournalTrans.TransDate;
        custInPaymTmpSE.TransType           = transType;

        custInPaymTmpSE.Status = errorTxt ? "@SYS8500" : "@SYS5469";

        // Checking whether incorrect records were imported or not.
        custInPaymTmpSE.InsertIncorrectRecords =  _custInPaymSE.insertIncorrectRecords() ? "@SYS73914" : "@SYS73913";

        custInPaymTmpSE.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Changes the report contract before running the report.
    /// </summary>
    protected void preRunModifyContract()
    {
        SrsTmpTblMarshallerContract contract;
        Recid   recid;

        recid = this.processReport(this.parmArgs().object());
        contract = this.parmReportContract().parmRdpContract() as SrsTmpTblMarshallerContract;
        contract.parmTmpTableDataRecId(recid);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the data and inserts it into the temporary table.
    /// </summary>
    /// <param name="_custInPaymSE">
    ///    The parameter of <c>CustInPaymSE</c> type that is passed from the main method.
    /// </param>
    /// <returns>
    ///    The record ID of the <c>SRSTmpDataStore</c> table where the data was stored.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RecId processReport(CustInPaymSE _custInPaymSE)
    {
        RecId                       tmpTableDataRecId;
        SrsReportRunPermission      permission;

        totalAmount_SEK = _custInPaymSE.totalAmount_SEK();
        totalAmount_EUR = _custInPaymSE.totalAmount_EUR();

        if (_custInPaymSE.numOfRecord() > 0)
        {
            for (numOfRecord = 1; numOfRecord <= _custInPaymSE.numOfRecord(); numOfRecord++)
            {
                ledgerJournalTrans = _custInPaymSE.ledgerJournalTrans(numOfRecord);
                transType          = _custInPaymSE.transType(numOfRecord);
                errorTxt           = _custInPaymSE.errorTxt(numOfRecord);
                if (!currencyCode)
                {
                    currencyCode = ledgerJournalTrans.CurrencyCode;
                }
                else
                {
                    if (currencyCode != ledgerJournalTrans.CurrencyCode)
                    {
                        currencyCode = ledgerJournalTrans.CurrencyCode;
                    }
                }
                this.insertCustInPaymentSETmp(_custInPaymSE);
            }
        }

        //Storing the temp table data using SRSTmpTblMarshaller
        permission = new SRSReportRunPermission();
        permission.assert();
        tmpTableDataRecId = SRSTmpTblMarshaller::sendTmpTblToDataProvider(custInPaymTmpSE);
        delete_from custInPaymTmpSE;
        CodeAccessPermission::revertAssert();

        return tmpTableDataRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        CustInPaymControllerSE controller = new CustInPaymControllerSE();
        controller.parmReportName(#reportName);
        controller.parmArgs(_args);
        controller.parmShowDialog(false);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>