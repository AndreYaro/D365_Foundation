<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FinNumberSequenceExtension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    FinNumberSequenceExtension class host event handlers and other customizations
///    to number sequence needed by the financial module.
/// </summary>
/// <remarks>
/// </remarks>
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
class FinNumberSequenceExtension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>onValidateFieldValueEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate number sequence field value event handler.
    /// </summary>
    /// <param name = "_result">Event handler.</param>
    /// <param name = "_numberSequenceReference">The reference to the number sequence.</param>
    /// <param name = "_fieldName">NumberSequence field name.</param>
    /// <param name = "_arrayIndex">Field array index.</param>
    [SubscribesTo(tablestr(NumberSequenceReference), delegatestr(NumberSequenceReference, onValidateFieldValue))]
        static void onValidateFieldValueEventHandler(EventHandlerResult _result, NumberSequenceReference _numberSequenceReference, fieldName _fieldName, int _arrayIndex)
    {
        NumberSequenceDatatype datatype;
        NumberSequenceTable numberSequenceTable;
        boolean ret = _result.result();

        if (ret)
        {
            datatype = NumberSequenceDatatype::find(_numberSequenceReference.NumberSequenceDatatype, false);

            if (datatype.DatatypeId     == extendedTypeNum(BankLGNumber)
                || datatype.DatatypeId  == extendedTypeNum(BankLGTransNumber))
            {
                if (BankLGFeatureChecker::checkBankLGEnabled())
                {
                    if (_numberSequenceReference.NumberSequenceId && LedgerParameters::find().CheckContinuous)
                    {
                        if (!NumberSequenceTable::find(_numberSequenceReference.NumberSequenceId, false).Continuous)
                        {
                            // This number sequence cannot be selected as %1 because it is not set to run continuously
                            // and the ledger module is set up to check for continuous numbers.
                            ret = checkFailed(
                                strFmt("@SYS314702", _numberSequenceReference.referenceLabel()),
                                '',
                                SysInfoAction_Formrun::newFormnameControlnameDesc(
                                formStr(LedgerParameters),
                                'general_checkcontinuous',
                                "@SYS24215"));
                        }
                    }
                }
                else
                {
                    // It is not allowed to edit because the Letter of Guarantee feature is not enabled.
                    ret = checkFailed(
                        "@SYS314705",
                        '',
                        SysInfoAction_Formrun::newFormnameControlnameDesc(
                        formStr(BankParameters),
                        formControlStr(BankParameters, BankLG_BankLGEnable),
                        "@SYS24215"));
                }
            }
        }

        _result.result(ret);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onModifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update number sequence modified field.
    /// </summary>
    /// <param name = "_numberSequenceTable">The reference to the number sequence.</param>
    /// <param name = "_fieldId">NumberSequence field id.</param>
    [SubscribesTo(tablestr(NumberSequenceTable), delegatestr(NumberSequenceTable, onModifiedNumberSequenceField))]
        static void onModifiedField(NumberSequenceTable _numberSequenceTable, FieldId _fieldId)
    {
        // <GCN>
        NumberSequenceTable_CN  numberSequenceTableCN;
        boolean isChineseVoucher = LedgerParameters::isChineseVoucher_CN();

        if (isChineseVoucher)
        {
            numberSequenceTableCN = NumberSequenceTable_CN::findByNumberSequenceTable(_numberSequenceTable.RecId, true);

            // </GCN>

            switch (_fieldId)
            {
                case fieldNum(NumberSequenceTable, Continuous):
                    if (_numberSequenceTable.Continuous == NoYes::No)
                {
                    // <GCN>

                    ttsbegin;
                    numberSequenceTableCN.RestartNum = NoYes::No;
                    numberSequenceTableCN.update();
                    ttscommit;

                    // </GCN>
                }
                break;
                case fieldNum(NumberSequenceTable, Manual):
                    if (_numberSequenceTable.Manual)
                {
                    // <GCN>

                    ttsbegin;
                    numberSequenceTableCN.RestartNum = NoYes::No;
                    numberSequenceTableCN.update();
                    ttscommit;

                    // </GCN>
                }
                break;
                default :
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onValidateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate number sequence field value.
    /// </summary>
    /// <param name = "_numberSequenceTable"></param>
    /// <param name = "_fieldName">NumberSequence field name.</param>
    /// <param name = "_arrayIndex">Field array index.</param>
    /// <param name = "_eventResult">Event handler.</param>
    [SubscribesTo(tablestr(NumberSequenceTable), delegatestr(NumberSequenceTable, onValidateFieldValue))]
        static void onValidateFieldValue(NumberSequenceTable _numberSequenceTable, FieldName _fieldName, int _arrayIndex, EventHandlerResult _eventResult)
    {
        boolean ret = true;
        // </GCN>
        NumberSequenceTable_CN  numberSequenceTableCN;
        boolean isChineseVoucher = false;

        if (_eventResult.result())
        {
            // <GCN>
            isChineseVoucher = LedgerParameters::isChineseVoucher_CN();

            if (isChineseVoucher)
            {
                numberSequenceTableCN = NumberSequenceTable_CN::findByNumberSequenceTable(_numberSequenceTable.RecId, true);

                // <GCN>
                switch (_fieldName)
                {
                    case fieldStr(NumberSequenceTable, Continuous):

                        if (numberSequenceTableCN.RestartNum
                            && NumberPeriod_CN::findNumberSeq(_numberSequenceTable.RecId).RecId)
                        {
                            // The restart numbering for each period function of this number sequence is in use
                            ret = checkFailed("@GLS54470");
                        }

                        break;

                    case fieldStr(NumberSequenceTable, Manual):

                        if (numberSequenceTableCN.RestartNum
                            && NumberPeriod_CN::findNumberSeq(_numberSequenceTable.RecId).RecId)
                        {
                            // The restart numbering for each period function of this number sequence is in use
                            ret = checkFailed("@GLS54470");
                        }

                        break;
                }

                 _eventResult.result(ret);
            }
            // </GCN>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataAreaFiscalCalendarToScope</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds DataAreaFiscalCalendarPeriod to scopes list.
    /// </summary>
    /// <param name = "_companyId">DataArea Id</param>
    /// <param name = "_scopes">List of scopes to add.</param>
    static void addDataAreaFiscalCalendarToScope(selectableDataArea _companyId, List _scopes, FiscalCalendarPeriod _fiscalCalendarPeriod,
    FiscalCalendarYear _fiscalCalendarYear)
    {
        CompanyInfo companyInfo;
        RecId fiscalCalendarRecId;

        companyInfo = CompanyInfo::findDataArea(_companyId);
        fiscalCalendarRecId = Ledger::fiscalCalendar(companyInfo.RecId);
        while select RecId from _fiscalCalendarYear
                        where _fiscalCalendarYear.FiscalCalendar == fiscalCalendarRecId
        {
            while select RecId from _fiscalCalendarPeriod
                            where _fiscalCalendarPeriod.FiscalCalendarYear == _fiscalCalendarYear.RecId
            {
                _scopes.addEnd(NumberSeqScopeFactory::createDataAreaFiscalCalendarPeriodScope(
                                _companyId, _fiscalCalendarPeriod.RecId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLegalEntityFiscalCalendarToScope</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds LegalEntityFiscalCalendarPeriod to scopes list.
    /// </summary>
    /// <param name = "_companyRecId">RecId in CompanyInfo table</param>
    /// <param name = "_scopes">List of scopes to add.</param>
    static void addLegalEntityFiscalCalendarToScope(refRecId _companyRecId, List _scopes, FiscalCalendarPeriod _fiscalCalendarPeriod,
    FiscalCalendarYear _fiscalCalendarYear)
    {
        RecId fiscalCalendarRecId;

        fiscalCalendarRecId = Ledger::fiscalCalendar(_companyRecId);
        while select RecId from _fiscalCalendarYear
                        where _fiscalCalendarYear.FiscalCalendar == fiscalCalendarRecId
        {
            while select RecId from _fiscalCalendarPeriod
                            where _fiscalCalendarPeriod.FiscalCalendarYear == _fiscalCalendarYear.RecId
            {
                _scopes.addEnd(NumberSeqScopeFactory::createLegalEntityFiscalCalendarPeriod(
                                _companyRecId, _fiscalCalendarPeriod.RecId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onAddScopesForScopeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add scopes to a Number sequence scope.
    /// </summary>
    /// <param name = "_scopeType">Scope type to add too.</param>
    /// <param name = "_scopes">List of scopes to add.</param>
    [SubscribesTo(classstr(NumberSeqScopeFactory), delegatestr(NumberSeqScopeFactory, onAddScopesForScopeType))]
        static void onAddScopesForScopeType(int _scopeType, List _scopes)
    {
        DataArea dataArea;
        CompanyInfo companyInfo;
        FiscalCalendarPeriod fiscalCalendarPeriod;
        FiscalCalendarYear fiscalCalendarYear;
        str companyName = curExt();

        switch (_scopeType)
        {
            case NumberSeqScope::scopeTypeDataAreaFiscalCalendarPeriod():
                dataArea.recordLevelSecurity(true);
                fiscalCalendarPeriod.recordLevelSecurity(true);
                fiscalCalendarYear.recordLevelSecurity(true);
                
                if (isFlightEnabled('GenerateNumSeqForOneLegalEntity'))
                {
                    select Id from dataArea where dataArea.isVirtual == NoYes::No && dataArea.Id == companyName;
                    if(dataArea.Id)
                    {
                        FinNumberSequenceExtension::addDataAreaFiscalCalendarToScope(dataArea.Id, _scopes, fiscalCalendarPeriod, fiscalCalendarYear);
                    }
                }
                else
                {
                    while select Id from dataArea where dataArea.isVirtual == NoYes::No
                    {
                        FinNumberSequenceExtension::addDataAreaFiscalCalendarToScope(dataArea.Id, _scopes, fiscalCalendarPeriod, fiscalCalendarYear);
                    }
                }
                break;

            case NumberSeqScope::scopeTypeLegalEntityFiscalCalendarPeriod():
                companyInfo.recordLevelSecurity(true);
                fiscalCalendarPeriod.recordLevelSecurity(true);
                fiscalCalendarYear.recordLevelSecurity(true);

                if (isFlightEnabled('GenerateNumSeqForOneLegalEntity'))
                {
                    select RecId from companyInfo where companyInfo.(fieldName2id(tableName2Id("CompanyInfo"),'dataArea')) == companyName;
                    if(companyInfo.RecId)
                    {
                        FinNumberSequenceExtension::addLegalEntityFiscalCalendarToScope(companyInfo.RecId, _scopes, fiscalCalendarPeriod, fiscalCalendarYear);
                    }
                }
                else 
                {
                    while select RecId from companyInfo
                    {
                        FinNumberSequenceExtension::addLegalEntityFiscalCalendarToScope(companyInfo.RecId, _scopes, fiscalCalendarPeriod, fiscalCalendarYear);
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onGetFormatSegmentShortName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get parameter type short name.
    /// </summary>
    /// <param name = "_parameterType">Number sequence parameter type.</param>
    /// <param name = "_parameterValue">Number sequence parameter value.</param>
    /// <param name = "_result">Result event handler.</param>
    [SubscribesTo(classstr(NumberSeqScope), delegatestr(NumberSeqScope, onGetFormatSegmentShortName))]
        static void onGetFormatSegmentShortName(NumberSeqParameterType _parameterType, anytype _parameterValue, EventHandlerResult _result)
    {
        FiscalCalendarPeriod parameterShortName;

        switch (_parameterType)
        {
            case NumberSeqParameterType::FiscalCalendarPeriod:
                Debug::assert(!_result.hasResult());
                parameterShortName = FiscalCalendarPeriod::find(_parameterValue);
                if (parameterShortName)
                {
                    _result.result(parameterShortName.ShortName);
                }
            break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupFiscalCalendarPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs a lookup on the <c>FiscalCalendarPeriod</c> table.
    /// </summary>
    /// <param name="_formControl">
    ///    The <c>FormReferenceControl</c> value to use to perform the lookup.
    /// </param>
    /// <param name="_fiscalCalendarYear">
    ///    The <c>FiscalCalendarYear.RecId</c> value to use to restrict the lookup.
    /// </param>
    /// <returns>
    ///    The record selected from the lookup.
    /// </returns>
    /// <remarks>
    ///    This method is intended for use by the number sequence framework forms.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static Common lookupFiscalCalendarPeriod(FormReferenceControl _formControl, recId _fiscalCalendarYear)
    {
        FiscalCalendarPeriod selectedRecord;
        SysReferenceTableLookup lookup = SysReferenceTableLookup::newParameters(tableNum(FiscalCalendarPeriod), _formControl, true);
        Query lookupQuery = new Query();
        QueryBuildDataSource lookupDataSource;
        QueryBuildRange lookupRange;

        lookupDataSource = lookupQuery.addDataSource(tableNum(FiscalCalendarPeriod));

        if (_fiscalCalendarYear)
        {
            lookupRange = lookupDataSource.addRange(fieldNum(FiscalCalendarPeriod, FiscalCalendarYear));
            lookupRange.value(int642str(_fiscalCalendarYear));
        }

        lookup.parmQuery(lookupQuery);

        lookup.addLookupfield(fieldNum(FiscalCalendarPeriod, Name));
        lookup.addLookupfield(fieldNum(FiscalCalendarPeriod, StartDate));
        lookup.addLookupfield(fieldNum(FiscalCalendarPeriod, EndDate));

        selectedRecord = lookup.performFormLookup();

        return selectedRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupFiscalCalendarYear</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs a lookup on the <c>FiscalCalendarYear</c> table.
    /// </summary>
    /// <param name="_formControl">
    ///    The <c>FormReferenceControl</c> value to use to perform the lookup.
    /// </param>
    /// <param name="_fiscalCalendar">
    ///    The <c>FiscalCalendar.RecId</c> value to use to restrict the lookup.
    /// </param>
    /// <returns>
    ///    The record that was selected from the lookup.
    /// </returns>
    /// <remarks>
    ///    This method is intended for use by the number sequence framework forms.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static Common lookupFiscalCalendarYear(FormReferenceControl _formControl, recId _fiscalCalendar)
    {
        FiscalCalendarYear selectedRecord;
        SysReferenceTableLookup lookup = SysReferenceTableLookup::newParameters(tableNum(FiscalCalendarYear), _formControl, true);
        Query lookupQuery = new Query();
        QueryBuildDataSource lookupDataSource;
        QueryBuildRange lookupRange;

        lookupDataSource = lookupQuery.addDataSource(tableNum(FiscalCalendarYear));

        if (_fiscalCalendar)
        {
            lookupRange = lookupDataSource.addRange(fieldNum(FiscalCalendarYear, FiscalCalendar));
            lookupRange.value(int642str(_fiscalCalendar));
        }

        lookup.parmQuery(lookupQuery);

        lookup.addLookupfield(fieldNum(FiscalCalendarYear, Name));

        selectedRecord = lookup.performFormLookup();

        return selectedRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberSequence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get number sequence by the number sequence record id.
    /// </summary>
    /// <param name = "_numberSequenceId">The number sequence id</param>
    /// <returns>
    /// Number sequence code.
    /// </returns>
    internal static NumberSequenceCode getNumberSequence(RefRecId _numberSequenceId)
    {
        NumberSequenceTable numberSequenceTable;

        select firstonly NumberSequence from numberSequenceTable
            where numberSequenceTable.RecId == _numberSequenceId;

        return numberSequenceTable.NumberSequence;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>