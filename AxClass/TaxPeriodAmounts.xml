<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxPeriodAmounts</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxPeriodAmounts</c> class is used by derived classes for printing the Norwegian
/// Tax_Report_NO and the British Tax_Report_UK.
/// </summary>
/// <remarks>
/// This is a parent class of the derived <c>TaxPeriodCountryRegion</c> and <c>TaxYearAmounts</c>
/// classes. The two derived classes are also used for printing the Norwegian Tax_Report_NO and the
/// British Tax_Report_UK.
/// </remarks>
public class TaxPeriodAmounts
{
    TmpTaxPeriodAmount  tmpTaxPeriodAmount;
    TaxTrans            taxTrans;

    TransDate           fromDate;
    TransDate           toDate;
    TaxPeriod           taxPeriod;
    TaxRepVersion       taxRepVersion;
    Counter             versionMax;
    Counter             versionMin;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillTmpTaxPeriodAmount</Name>
				<Source><![CDATA[
    private void fillTmpTaxPeriodAmount(
        TransDate           _fromDate,
        TransDate           _toDate,
        TaxPeriod           _taxPeriod,
        Counter             _versionMin,
        Counter             _versionMax)
    {
        boolean             firstRow;
        container           prevTaxDirectionGroup;
        container           curTaxDirectionGroup;
        TaxTrans            taxTransAggregatedAmounts;
        TaxTable            taxTable;

        firstRow = true;
        while select TaxDirection, EmptyTaxBaseForOutgoingTax_W, ReverseCharge_W, Voucher, TransDate, SourceRecId, InventTransId,
                     TaxBaseAmount, TaxAmount, TaxAmountCur, SourceBaseAmountCur, TaxBaseAmountCur,
                     TaxInCostPriceRegulated, TaxInCostPriceMST, TaxInCostPriceCur
            from taxTrans
            order by TaxDirection, EmptyTaxBaseForOutgoingTax_W, ReverseCharge_W, Voucher, TransDate, SourceRecId, InventTransId
            where taxTrans.TransDate     >= _fromDate        &&
                taxTrans.TransDate       <= _toDate          &&
                taxTrans.TaxPeriod       == _taxPeriod       &&
                taxTrans.TaxRepCounter   >= _versionMin      &&
                taxTrans.TaxRepCounter   <= _versionMax      &&
                taxTrans.Source          != TaxModuleType::Tax
            join NegativeTax from taxTable
            where taxTrans.TaxCode == taxTable.TaxCode
        {
            // <GEEU>
            curTaxDirectionGroup = [taxTrans.TaxDirection];
            // </GEEU>
            if (firstRow)
            {
                taxTransAggregatedAmounts.TaxDirection = taxTrans.TaxDirection;
                // <GEEU>
                prevTaxDirectionGroup = curTaxDirectionGroup;
                // </GEEU>
            }

            if (!firstRow && curTaxDirectionGroup != prevTaxDirectionGroup)
            {
                this.insertAggregatedAmounts(taxTransAggregatedAmounts);

                prevTaxDirectionGroup = curTaxDirectionGroup;

                taxTransAggregatedAmounts.clear();
                taxTransAggregatedAmounts.TaxDirection = taxTrans.TaxDirection;
            }

            // Aggregate tax amounts
            taxTransAggregatedAmounts.TaxAmount                 += taxTrans.TaxAmount;
            taxTransAggregatedAmounts.TaxAmountCur              += taxTrans.TaxAmountCur;
            taxTransAggregatedAmounts.TaxInCostPriceRegulated   += taxTrans.TaxInCostPriceRegulated;
            taxTransAggregatedAmounts.TaxInCostPriceMST         += taxTrans.TaxInCostPriceMST;
            taxTransAggregatedAmounts.TaxInCostPriceCur         += taxTrans.TaxInCostPriceCur;

            if (taxTrans.ReverseCharge_W == NoYes::Yes
                && taxTrans.TaxDirection == TaxDirection::OutgoingTax
                && taxTable.NegativeTax)
            {
                if (!taxTrans.EmptyTaxBaseForOutgoingTax_W)  //empty tax base for reverse charge transaction
                {
                    // if reverse charge then the tax direction is opposite of the typical tax
                    // direction which means the sign on the base needs to get flipped also.
                    taxTransAggregatedAmounts.TaxBaseAmount         += -taxTrans.TaxBaseAmount;
                    taxTransAggregatedAmounts.TaxBaseAmountCur      += -taxTrans.TaxBaseAmountCur;
                    taxTransAggregatedAmounts.SourceBaseAmountCur   += -taxTrans.SourceBaseAmountCur;
                }
            }
            else
            {
                taxTransAggregatedAmounts.TaxBaseAmount         += taxTrans.TaxBaseAmount;
                taxTransAggregatedAmounts.TaxBaseAmountCur      += taxTrans.TaxBaseAmountCur;
                taxTransAggregatedAmounts.SourceBaseAmountCur   += taxTrans.SourceBaseAmountCur;
            }

            firstRow = false;
        }

        if (!firstRow)
        {
            this.insertAggregatedAmounts(taxTransAggregatedAmounts);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes and inserts transactions in the <c>TmpTaxPeriodAmount</c> table by using the
    /// transactions in the <c>TaxTrans</c> table.
    /// </summary>
    /// <param name="_fromDate">
    /// The from date.
    /// </param>
    /// <param name="_toDate">
    /// The to date.
    /// </param>
    /// <param name="_taxPeriod">
    /// The tax period.
    /// </param>
    /// <param name="_taxRepVersion">
    /// A <c>TaxRepVersion</c> value.
    /// </param>
    /// <param name="_taxRepCounter">
    /// A <c>TaxVersion</c> value; optional.
    /// </param>
    /// <param name="_updateNow">
    /// A <c>NoYes::No</c> enumeration value; optional.
    /// </param>
    protected void init(TransDate       _fromDate,
                        TransDate       _toDate,
                        TaxPeriod       _taxPeriod,
                        TaxRepVersion   _taxRepVersion,
                        TaxVersion      _taxRepCounter = 0,
                        NoYes           _updateNow = NoYes::No)
    {
        this.setParameters(_fromDate, _toDate, _taxPeriod);

        if (_taxRepCounter)
        {
            versionMax = _taxRepCounter;
            versionMin = _taxRepCounter;
        }
        else
        {
            versionMax    = TaxReport::counterMax(_taxRepVersion, _taxPeriod, _fromDate);
            versionMin    = TaxReport::counterMin(_taxRepVersion, _taxPeriod, _fromDate);

            if (_taxRepVersion == TaxRepVersion::Latest && _updateNow)
            {
                versionMin--;
                versionMax--;
            }
        }

        ttsbegin;

        this.fillTmpTaxPeriodAmount(_fromDate, _toDate, _taxPeriod, versionMin, versionMax);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAggregatedAmounts</Name>
				<Source><![CDATA[
    private void insertAggregatedAmounts(TaxTrans _taxTransAggregatedAmounts)
    {
        this.insertTmpTaxPeriodAmount(TaxAmountType::TaxBaseAmount, _taxTransAggregatedAmounts, _taxTransAggregatedAmounts.TaxBaseAmount);
        this.insertTmpTaxPeriodAmount(TaxAmountType::TaxAmount, _taxTransAggregatedAmounts, _taxTransAggregatedAmounts.TaxAmount);
        this.insertTmpTaxPeriodAmount(TaxAmountType::TaxInCostPriceCur, _taxTransAggregatedAmounts, _taxTransAggregatedAmounts.TaxInCostPriceCur);
        this.insertTmpTaxPeriodAmount(TaxAmountType::TaxAmountCur, _taxTransAggregatedAmounts, _taxTransAggregatedAmounts.TaxAmountCur);
        this.insertTmpTaxPeriodAmount(TaxAmountType::SourceBaseAmountCur, _taxTransAggregatedAmounts, _taxTransAggregatedAmounts.SourceBaseAmountCur);
        this.insertTmpTaxPeriodAmount(TaxAmountType::TaxBaseAmountCur, _taxTransAggregatedAmounts, _taxTransAggregatedAmounts.TaxBaseAmountCur);
        this.insertTmpTaxPeriodAmount(TaxAmountType::TaxInCostPriceRegulated, _taxTransAggregatedAmounts, _taxTransAggregatedAmounts.TaxInCostPriceRegulated);
        this.insertTmpTaxPeriodAmount(TaxAmountType::TaxInCostPriceMST, _taxTransAggregatedAmounts, _taxTransAggregatedAmounts.TaxInCostPriceMST);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpTaxPeriodAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Inserts values to temporary table.
    /// </summary>
    /// <param name = "_taxAmountType">
    ///   Type of tax amount.
    /// </param>
    /// <param name = "_taxTrans">
    ///   <c>TaxTrans</c> record.
    /// </param>
    /// <param name = "_amount">
    ///   Amount value.
    /// </param>
    protected void insertTmpTaxPeriodAmount(TaxAmountType _taxAmountType, TaxTrans _taxTrans, Amount _amount)
    {
        tmpTaxPeriodAmount.initValue();
        tmpTaxPeriodAmount.Amount                   = _amount;
        tmpTaxPeriodAmount.TaxAmountType            = _taxAmountType;
        tmpTaxPeriodAmount.TaxDirection             = _taxTrans.TaxDirection;
        tmpTaxPeriodAmount.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Transfers three parameters to three variables.
    /// </summary>
    /// <param name="_fromDate">
    ///    The from date.
    /// </param>
    /// <param name="_toDate">
    ///    The to date.
    /// </param>
    /// <param name="_taxPeriod">
    ///    The tax period.
    /// </param>
    void setParameters(TransDate    _fromDate,
                       TransDate    _toDate,
                       TaxPeriod    _taxPeriod)
    {
        fromDate    = _fromDate;
        toDate      = _toDate;
        taxPeriod   = _taxPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the amount from the transaction in the <c>TmpTaxPeriodAmount</c> table that represents the tax amount and with the tax direction entered in the parameters.
    /// </summary>
    /// <param name="_taxDirection">
    ///    A <c>TaxDirection</c> value.
    /// </param>
    /// <returns>
    ///    A <c>TaxAmount</c> value.
    /// </returns>
    TaxAmount taxAmount(TaxDirection _taxDirection)
    {
        this.fetchTmpTaxPeriodAmount(_taxDirection, TaxAmountType::TaxAmount);
        return tmpTaxPeriodAmount.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchTmpTaxPeriodAmount</Name>
				<Source><![CDATA[
    private void fetchTmpTaxPeriodAmount(TaxDirection _taxDirection, TaxAmountType _taxAmountType)
    {
        select tmpTaxPeriodAmount
            where tmpTaxPeriodAmount.TaxDirection == _taxDirection
                && tmpTaxPeriodAmount.TaxAmountType == _taxAmountType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the amount from the transaction in the <c>TmpTaxPeriodAmount</c> table that represents the tax amount and has the tax direction entered in the parameters.
    /// </summary>
    /// <param name="_taxDirection">
    ///    The tax direction.
    /// </param>
    /// <returns>
    ///    The amount from the transaction.
    /// </returns>
    TaxAmountCur taxAmountCur(TaxDirection _taxDirection)
    {
        this.fetchTmpTaxPeriodAmount(_taxDirection, TaxAmountType::TaxAmountCur);

        return tmpTaxPeriodAmount.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBaseAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the amount from the transaction in the <c>TmpTaxPeriodAmount</c> table that represents the tax base amount and has the tax direction entered in the parameters.
    /// </summary>
    /// <param name="_taxDirection">
    ///    The tax direction.
    /// </param>
    /// <returns>
    ///    The amount from the transaction.
    /// </returns>
    TaxBase taxBaseAmount(TaxDirection _taxDirection)
    {
        this.fetchTmpTaxPeriodAmount(_taxDirection, TaxAmountType::TaxBaseAmount);
        return tmpTaxPeriodAmount.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBaseAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the amount from the transaction in the <c>TmpTaxPeriodAmount</c> table that represents the tax base amount in currency and has the tax direction entered in the parameters.
    /// </summary>
    /// <param name="_taxDirection">
    ///    The tax direction.
    /// </param>
    /// <returns>
    ///    The amount from the transaction.
    /// </returns>
    TaxBaseCur taxBaseAmountCur(TaxDirection _taxDirection)
    {
        this.fetchTmpTaxPeriodAmount(_taxDirection, TaxAmountType::TaxBaseAmountCur);
        return tmpTaxPeriodAmount.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxInCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the amount from the transaction in the <c>TmpTaxPeriodAmount</c> table that represents the tax cost-price and with the tax direction entered in the parameters.
    /// </summary>
    /// <param name="_taxDirection">
    ///    The tax direction.
    /// </param>
    /// <returns>
    ///    The amount from the transaction.
    /// </returns>
    TaxAmountCur taxInCostPrice(TaxDirection _taxDirection)
    {
        this.fetchTmpTaxPeriodAmount(_taxDirection, TaxAmountType::TaxInCostPrice);
        return tmpTaxPeriodAmount.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxInCostPriceCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the amount from the transaction in the <c>TmpTaxPeriodAmount</c> table that represents
    /// the tax cost-price and with the tax direction entered in the parameters.
    /// </summary>
    /// <param name="_taxDirection">
    /// The tax direction.
    /// </param>
    /// <returns>
    /// The amount from the transaction.
    /// </returns>
    TaxAmountCur taxInCostPriceCur(TaxDirection _taxDirection)
    {
        this.fetchTmpTaxPeriodAmount(_taxDirection, TaxAmountType::TaxInCostPriceCur);
        return tmpTaxPeriodAmount.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes and returns a new instance of this class and calls the <c>init</c> method.
    /// </summary>
    /// <param name="_fromDate">
    ///    The from date.
    /// </param>
    /// <param name="_toDate">
    ///    The to date.
    /// </param>
    /// <param name="_taxPeriod">
    ///    The tax period.
    /// </param>
    /// <param name="_taxRepVersion">
    ///    A <c>TaxRepVersion</c> value.
    /// </param>
    /// <param name="_taxRepCounter">
    ///    A <c>TaxVersion</c> value; optional.
    /// </param>
    /// <param name="_updateNow">
    ///    A <c>NoYes</c> enumeration value that determines whether the record should be updated now; optional.
    /// </param>
    /// <returns>
    ///    An instance of the <c>TaxPeriodAmounts</c> class.
    /// </returns>
    public static TaxPeriodAmounts construct(TransDate        _fromDate,
                                                           TransDate        _toDate,
                                                           TaxPeriod        _taxPeriod,
                                                           TaxRepVersion    _taxRepVersion,
                                                           TaxVersion       _taxRepCounter  = 0,
                                                           NoYes            _updateNow      = NoYes::No)
    {
        TaxPeriodAmounts    taxPeriodAmounts;

        taxPeriodAmounts = new TaxPeriodAmounts();

        taxPeriodAmounts.init(_fromDate,
                              _toDate,
                              _taxPeriod,
                              _taxRepVersion,
                              _taxRepCounter,
                              _updateNow);

        return taxPeriodAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startDateOfYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the date of January first of the year of the specified date.
    /// </summary>
    /// <param name="_periodDate">
    /// The period date.
    /// </param>
    /// <returns>
    /// The <c>TransDate</c> value of the first day of the year.
    /// </returns>
    /// <remarks>
    /// If the date of the parameter is February 23, 1969, this method will return the date January 1, 1969.
    /// </remarks>
    static TransDate startDateOfYear(TransDate _periodDate)
    {
        return mkDate(1,1,year(_periodDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxInCostPriceMST</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the amount from the transaction in the <c>TmpTaxPeriodAmount</c> table that represents the tax cost-price and with the tax direction entered in the parameters.
    /// </summary>
    /// <param name="_taxDirection">
    ///    The tax direction.
    /// </param>
    /// <returns>
    ///    The amount from the transaction.
    /// </returns>
    public TaxAmountCur taxInCostPriceMST(TaxDirection _taxDirection)
    {
        this.fetchTmpTaxPeriodAmount(_taxDirection, TaxAmountType::TaxInCostPriceMST);
        return tmpTaxPeriodAmount.Amount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>