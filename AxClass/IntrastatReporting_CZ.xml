<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntrastatReporting_CZ</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>IntrastatReporting_CZ</c> class is responsible for generating file and report for Czech Republic.
/// </summary>
#ISOCountryRegionCodes
[IntrastatCountryRegionAttribute(#isoCZ)]
class IntrastatReporting_CZ extends IntrastatReporting
{
    DialogField fieldDirection;

    #define.CurrentVersion(2)

    #localmacro.CurrentList
        reportDirection
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        dialog = super();

        // Disable ToDate as it will be automatically set
        dialogToDate.enabled(false);
        fieldDirection = dialog.addFieldValue(enumStr(IntrastatReportDirection), reportDirection);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDate_Modified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs neccesary processing when the From date field is modified in the dialog.
    /// </summary>
    /// <param name="_formControl">
    /// The control triggering the modified event.
    /// </param>
    /// <returns>
    /// true, if the modified event was processeded correctly; otherwise, false.
    /// </returns>
    public boolean fromDate_Modified(FormDateControl _formControl)
    {
        boolean             ret = _formControl.modified();
        FromDate            fromDateTemp = dialogFromDate.value();

        if (dayOfMth(fromDateTemp) != 1)
        {
            ret = checkFailed("@SYS312862");
        }

        if (ret)
        {
            dialogToDate.value(endmth(fromDateTemp));
        }
        else //reset fromDate value
        {
            dialogFromDate.value(fromDateTemp);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        reportDirection = fieldDirection.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareQuery</Name>
				<Source><![CDATA[
    protected QueryBuildDataSource prepareQuery()
    {
        QueryBuildDataSource dataSource = super();
        if (dataSource)
        {
            dataSource.addRange(fieldNum(Intrastat, Direction)).value(IntrastatReporting::reportDirection2DirectionRange(reportDirection));
        }
        return dataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerEventHandlers</Name>
				<Source><![CDATA[
    public void registerEventHandlers()
    {
        super();

        dialogFromDate.control().registerOverrideMethod(
            methodStr(FormDateControl, modified),
            methodStr(IntrastatReporting_CZ, fromDate_Modified),
            this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer         version = RunBase::getVersion(packedClass);
        container       packedSuper;

        switch (version)
        {
            case #CurrentVersion:
                [version, #currentList, packedSuper] = packedClass;
                if (packedSuper)
                {
                    return super(packedSuper);
                }
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>