<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgPayRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgPayRule</c> class represents the pay rule delimitations that are available in time and
///    attendance.
/// </summary>
/// <remarks>
///    The class is abstract. In order to let users create a new pay rule delimitation, a developer must
///    follow these steps:
///    <list type="number">
///       <item>
///          <description>Create a query, which represents the data where delimitations are
///          defined.</description>
///       </item>
///       <item>
///          <description>
///             Create a new class, which extends the <c>JmgPayRule</c> class.
///          </description>
///       </item>
///       <item>
///          <description>
///             Implement the <c>description</c>, <c>getDesignTimeCustomDataSource</c>,
///             <c>getJoinConditionsMap</c>, <c>getQueryName</c> and <c>getRuntimeCustomDataSource</c> methods.
///          </description>
///       </item>
///    </list>
/// </remarks>
abstract class JmgPayRule extends WorkflowDocument
{
    #JmgPayRule
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDesignTimeFieldToDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a design time field to a <c>ExpressionDataSource</c> object, which is based on the specified
    ///    extended data type.
    /// </summary>
    /// <param name="_expressionDataSource">
    ///    The <c>ExpressionDataSource</c> object for which to add the field.
    /// </param>
    /// <param name="_extendedDataType">
    ///    The name of the extended data type for which to add to the <c>ExpressionDataSource</c> object.
    /// </param>
    protected void addDesignTimeFieldToDataSource(ExpressionDataSource _expressionDataSource, extendedDataTypeName _extendedDataType)
    {
        SysDictType sysDictType = new SysDictType(extendedTypeName2Id(_extendedDataType));
        _expressionDataSource.addField(ExpressionField::newFieldDefinition(sysDictType.name(), _extendedDataType, sysDictType.label()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRunTimeFieldToDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a run time field to the <c>ExpressionDataSource</c> object, which is based on the specified
    ///    extended data type and value.
    /// </summary>
    /// <param name="_expressionDataSource">
    ///    The <c>ExpressionDataSource</c> object for which to add the field.
    /// </param>
    /// <param name="_extendedDataType">
    ///    The name of the extended data type for which to add to the <c>ExpressionDataSource</c> object.
    /// </param>
    /// <param name="_value">
    ///    The value for which the added run time field is set.
    /// </param>
    protected void addRunTimeFieldToDataSource(ExpressionDataSource _expressionDataSource, extendedDataTypeName _extendedDataType, anytype _value)
    {
        SysDictType sysDictType;
        sysDictType = new SysDictType(extendedTypeName2Id(_extendedDataType));
        _expressionDataSource.addField(ExpressionField::newFieldValue(sysDictType.name(), _extendedDataType, _value));
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the description of the pay rule.
    /// </summary>
    /// <returns>
    ///    The description of the pay rule.
    /// </returns>
    /// <remarks>
    ///    The description is presented to the user in the lookup form of available pay rules.
    /// </remarks>
    public abstract JmgDescription description()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>evaluate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Evaluates whether the specified transaction fulfills the pay rule.
    /// </summary>
    /// <param name="_expressionTable">
    ///    The <c>ExpressionTable</c> record, which holds the expression to evaluate.
    /// </param>
    /// <param name="_jmgStampJournalTrans">
    ///    The transaction to evaluate.
    /// </param>
    /// <returns>
    ///    true, if the transaction fulfills the pay rule; otherwise, false.
    /// </returns>
    public boolean evaluate(ExpressionTable _expressionTable, JmgStampJournalTrans _jmgStampJournalTrans)
    {
        ExpressionDataSources expressionDataSources;

        expressionDataSources = ExpressionDataSources::newExpressionDataSources();
        expressionDataSources.addDataSource(this.getRuntimeCustomDataSource(_jmgStampJournalTrans));
        return ExpressionResultType::True == SysExpression::evaluate(curext(), 0, 0, _expressionTable, expressionDataSources);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDesignTimeCustomDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the design time data source for the pay rule.
    /// </summary>
    /// <returns>
    ///    An <c>ExpressionDataSource</c> object that contains the design time data source.
    /// </returns>
    /// <remarks>
    ///    The design time data source represents the transaction. Only a worker field is added to the design
    ///    time data source. To add more fields, you must override this method.
    /// </remarks>
    protected ExpressionDataSource getDesignTimeCustomDataSource()
    {
        ExpressionDataSource    expressionDataSource;

        expressionDataSource    = ExpressionDataSource::newDataSourceDefinition(#TransactionDataSourceId, #TransactionLabelId);
        this.addDesignTimeFieldToDataSource(expressionDataSource, extendedtypestr(JmgWorkerRecId));

        return expressionDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDesignTimeCustomDataSources</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the design time data sources for the pay rule.
    /// </summary>
    /// <returns>
    ///    An <c>ExpressionDataSources</c> object that contains the design time data sources.
    /// </returns>
    /// <remarks>
    ///    The <c>ExpressionDataSources</c> object that is returned only contains a single design time data
    ///    source.
    /// </remarks>
    public ExpressionDataSources getDesignTimeCustomDataSources()
    {
        ExpressionDataSources ret;

        ret = ExpressionDataSources::newExpressionDataSources();
        ret.addDataSource(this.getDesignTimeCustomDataSource());
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJoinConditions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the expression, which defines how the design time custom data source is joined with the
    ///    query that is returned by the <c>getQueryName</c> method.
    /// </summary>
    /// <returns>
    ///    An expression that defines how the design time custom data source is joined with the query.
    /// </returns>
    /// <remarks>
    ///    The returned conditions are used to initialize the expression with a join between the query and the
    ///    design time custom data source. For an example of an implementation, see the
    ///    <c>JmgPayRule_JmgProfileTable</c> class.
    /// </remarks>
    public abstract Microsoft.Dynamics.AX.Framework.Expression.Model.ExpressionOrElement getJoinConditions()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the query that is used when you evaluate the pay rule.
    /// </summary>
    /// <returns>
    ///    A query that is initialized based on the return value of the <c>getQueryName</c> method.
    /// </returns>
    public Query getQuery()
    {
        Query           ret;
        QueryBuildRange qbr;

        ret = super();

        qbr = SysQuery::findOrCreateRange(ret.dataSourceNo(1), fieldnum(Common, RecId), 1);
        qbr = SysQuery::findOrCreateRange(ret.dataSourceNo(1), fieldnum(Common, RecId), 2);
        qbr.value(queryRange(int64Min(), int64Max()));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRuntimeCustomDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the runtime custom time data source for the pay rule.
    /// </summary>
    /// <param name="_jmgStampJournalTrans">
    ///    The transaction from where the values of the runtime fields are initialized.
    /// </param>
    /// <returns>
    ///    An <c>ExpressionDataSource</c> object that contains the run time data source.
    /// </returns>
    /// <remarks>
    ///    The run time data source represents the transaction. A worker field is added by using the value of
    ///    the worker field from the specified transaction. To add more fields, you must override this method.
    /// </remarks>
    protected ExpressionDataSource getRuntimeCustomDataSource(JmgStampJournalTrans _jmgStampJournalTrans)
    {
        ExpressionDataSource    expressionDataSource;

        expressionDataSource    = ExpressionDataSource::newDataSourceDefinition(#TransactionDataSourceId, #TransactionLabelId);
        this.addRunTimeFieldToDataSource(expressionDataSource, extendedtypestr(JmgWorkerRecId), _jmgStampJournalTrans.Worker);

        return expressionDataSource;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>