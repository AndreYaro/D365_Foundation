<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSMobileDeviceEventCompleteTransferOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSMobileDeviceEventCompleteTransferOrder</c> class contains the logic processing transfer order ship mobile device events.
/// </summary>
[WHSMobileDeviceEventStrategyFactory(WHSMobileDeviceQueueEventType::TransferOrderComplete)]
internal final class WHSMobileDeviceEventCompleteTransferOrder extends WHSMobileDeviceEvent
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultState</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSMobileDeviceQueueMessageState defaultState()
    {
        return WHSMobileDeviceQueueMessageState::Queued;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEventTypeDependency</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSMobileDeviceQueueEventType getEventTypeDependency()
    {
        return WHSMobileDeviceQueueEventType::TransferOrderCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStateOnRelatedMessages</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void updateStateOnRelatedMessages(WHSMobileDeviceQueueMessageCollection _mobileDeviceQueueMessageCollection)
    {
        WHSMobileDeviceEvent relatedEvent = WHSMobileDeviceEvent::singletonFromType(_mobileDeviceQueueMessageCollection.EventType);

        if (!relatedEvent)
        {
            throw error("@WAX:Error_MobileDeviceQueueMessageCollectionDoNotExist");
        }

        WHSMobileDeviceQueueMessageCollection releatedMessageCollection = WHSMobileDeviceQueueMessageCollection::findByTypeAndIdentifier(relatedEvent.getEventTypeDependency(), _mobileDeviceQueueMessageCollection.Identifier);

        if (releatedMessageCollection)
        {
            WHSMobileDeviceQueueMessage::queueMessages(releatedMessageCollection.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processEvent</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void processEvent(WHSMobileDeviceQueueMessageCollection _mobileDeviceQueueMessageCollection, WHSMobileDeviceQueueBatchAffinity _batchAffinity)
    {
        WHSMobileDeviceQueueMessage mobileDeviceQueueMessage;

        select firstonly mobileDeviceQueueMessage
            where  mobileDeviceQueueMessage.QueueMessageCollectionRecId == _mobileDeviceQueueMessageCollection.RecId
                && mobileDeviceQueueMessage.State == WHSMobileDeviceQueueMessageState::Queued
                && mobileDeviceQueueMessage.BatchAffinity == _batchAffinity;

        if (mobileDeviceQueueMessage)
        {
            WHSRFMenuItemTable menuItem = WHSRFMenuItemTable::find(mobileDeviceQueueMessage.MenuItemName);

            if (!menuItem)
            {
                throw Error(strFmt("@WAX:Error_MobileDeviceMenuItemNotExist", mobileDeviceQueueMessage.MenuItemName));
            }

            WHSMobileDeviceEvent relatedEvent = WHSMobileDeviceEvent::singletonFromType(_mobileDeviceQueueMessageCollection.EventType);

            if (!relatedEvent)
            {
                throw error("@WAX:Error_MobileDeviceQueueMessageCollectionDoNotExist");
            }

            WHSMobileDeviceQueueMessageCollection releatedMessageCollection = WHSMobileDeviceQueueMessageCollection::findByTypeAndIdentifier(relatedEvent.getEventTypeDependency(), _mobileDeviceQueueMessageCollection.Identifier);

            if (releatedMessageCollection)
            {
                select firstOnly RecId from mobileDeviceQueueMessage
                    where mobileDeviceQueueMessage.QueueMessageCollectionRecId == releatedMessageCollection.RecId
                        && mobileDeviceQueueMessage.State != WHSMobileDeviceQueueMessageState::Completed;

                if (mobileDeviceQueueMessage.RecId)
                {
                    throw Error(strFmt("@WAX:Error_MobileDeviceQueueMessageCollectionCannotBeCompleted", WHSMobileDeviceQueueEventType::TransferOrderComplete, WHSMobileDeviceQueueEventType::TransferOrderCreate, releatedMessageCollection.Identifier));
                }
            }

            WHSInventTransferLine whsInventTransferLine;
            InventTransferLine inventTransferLine;

            ttsbegin;

            update_recordSet whsInventTransferLine
                setting OutboundShipmentPolicy = menuItem.OutboundShipmentPolicy
                join inventTransferLine
                where whsInventTransferLine.InventTransferLine == inventTransferLine.RecId
                    && inventTransferLine.TransferId == _mobileDeviceQueueMessageCollection.Identifier;

            this.deleteMessageCollection(
                _mobileDeviceQueueMessageCollection.Identifier,
                [WHSMobileDeviceQueueEventType::TransferOrderCreate, WHSMobileDeviceQueueEventType::TransferOrderComplete]
            );

            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>