<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CommReportShipmentCalcSales_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Initializes lines for report for principal for the sale by commissioner scenario.
/// </summary>
class CommReportShipmentCalcSales_RU extends CommReportShipmentCalc_RU implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createReportLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates lines for report for principal.
    /// </summary>
    protected void createReportLines()
    {
        InventOwner_RU                  inventOwner;
        CustInvoiceJour_RU              custInvoiceJourRU;
        AgreementHeaderExt_RU           agreementHeaderExt;

        while select inventTrans
            where((inventTrans.StatusReceipt == StatusReceipt::None && inventTrans.StatusIssue == StatusIssue::Sold)
               || (inventTrans.StatusIssue == StatusIssue::None && inventTrans.StatusReceipt == StatusReceipt::Purchased))
               && inventTrans.DateFinancial >= commReportJour.StartDate
               && inventTrans.DateFinancial <= commReportJour.EndDate
        join inventTransOrigin
            where inventTransOrigin.RecId == inventTrans.InventTransOrigin
        join custInvoiceTrans
            where custInvoiceTrans.InventTransId == inventTransOrigin.InventTransId
               && custInvoiceTrans.InvoiceId     == inventTrans.InvoiceId
        join InvoiceAccount, InclTax from custInvoiceJour
            where custInvoiceJour.SalesId               == custInvoiceTrans.SalesId
               && custInvoiceJour.InvoiceId             == custInvoiceTrans.InvoiceId
               && custInvoiceJour.InvoiceDate           == custInvoiceTrans.InvoiceDate
               && custInvoiceJour.numberSequenceGroup   == custInvoiceTrans.numberSequenceGroup
        join TableId from custInvoiceJourRU
            where custInvoiceJourRU.CustInvoiceJour       == custInvoiceJour.RecId
               &&(custInvoiceJourRU.InventProfileType_RU  == InventProfileType_RU::CommissionAgent
               || custInvoiceJourRU.InventProfileType_RU  == InventProfileType_RU::CommissionPrincipalAgent)
        join inventDim
            where inventDim.InventDimId == inventTrans.InventDimId
        exists join inventOwner
            where inventOwner.InventOwnerId     == inventDim.InventOwnerId_RU
               && inventOwner.AccountType       == InventOwnerAccountType_RU::Vend
               && inventOwner.AccountNum        == commReportJour.PartnerCode
        exists join agreementHeaderExt
            where agreementHeaderExt.RecId      == inventOwner.AgreementHeaderExt
               && agreementHeaderExt.AgreementId== commReportJour.AgreementId
        {
            this.processVendShipments();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFactureRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes facture reference for report line.
    /// </summary>
    /// <param name="_reportTransItem">
    /// The <c>CommReportTransItem_RU</c> record that requires facture reference.
    /// </param>
    protected void initFactureRef(CommReportTransItem_RU _reportTransItem)
    {
        FactureTrans_RU factureTrans;
        FactureJour_RU  factureJour;

        if (! mapFactureIdDate.exists(custInvoiceTrans.RecId))
        {
            factureTrans = FactureTrans_RU::findCustInvoiceTrans(custInvoiceTrans);
            factureJour  = FactureJour_RU::find(factureTrans.FactureId, factureTrans.Module);

            _reportTransItem.FactureExternalId      = factureJour.FactureExternalId;
            _reportTransItem.FactureDateExternal    = factureJour.FactureDate_External ?
                                                  factureJour.FactureDate_External :
                                                  factureJour.FactureDate;
            _reportTransItem.RefFactureJour         = factureJour.RecId;

            mapFactureIdDate.insert(custInvoiceTrans.RecId, [_reportTransItem.FactureExternalId,
                                                         _reportTransItem.FactureDateExternal,
                                                         _reportTransItem.RefFactureJour]);
        }
        else
        {
            [_reportTransItem.FactureExternalId,
         _reportTransItem.FactureDateExternal,
         _reportTransItem.RefFactureJour] = mapFactureIdDate.lookup(custInvoiceTrans.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits vendor account number.
    /// </summary>
    /// <param name="_reportTransItem">
    /// The <c>CommReportTransItem_RU</c> record that requires vendor account number.
    /// </param>
    protected void initVendor(CommReportTransItem_RU _reportTransItem)
    {
        _reportTransItem.VendAccount = commReportJour.PartnerCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    client server static public ClassDescription description()
    {
        return "@SalesPurchBook:GenerateReportForPrincipalShip";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>