<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSFwkDiscountService</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Ax.Tms.Base.Data;
using Microsoft.Dynamics.Ax.Tms.Base.Utility;
using System.Xml.Linq;

/// <summary>
/// The <c>TMSFwkDiscountService</c> applies transportation discounts to shipping entities.
/// </summary>
public class TMSFwkDiscountService
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processDiscounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies discounts to shipping entity.
    /// </summary>
    /// <param name = "_transactionFacade">Payload for the transaction.</param>
    /// <param name = "_shippingEntity">Shipping entity.</param>
    /// <param name = "_ratingDtos">A list of rating DTOs.</param>
    public static void processDiscounts(
        TmsTransactionFacade    _transactionFacade,
        XElement                _shippingEntity,
        RatingDtoList           _ratingDtos)
    {
        XElement                    pickUp = _shippingEntity.GetAddress(AddTypeXmlConstants::Pickup);
        XElement                    dropOff = _shippingEntity.GetAddress(AddTypeXmlConstants::DropOff);
        TMSPostalCode               destPostalCode = dropOff.GetString(AddElementXmlConstants::PostalCode);
        TMSCountryRegion            destCountry = dropOff.GetString(AddElementXmlConstants::CountryRegion);
        TMSState                    destState = dropOff.GetString(AddElementXmlConstants::State);
        TMSWeight                   weight = _shippingEntity.SumDown(ElementXmlConstants::Weight);
        TMSFreightTermCode          dlvterm = _shippingEntity.RetrieveFirstInstanceDown(ElementXmlConstants::DlvTerm);
        TMSDirection                direction = symbol2Enum(enumNum(TMSDirection), _shippingEntity.GetString(ElementXmlConstants::Direction));
        InventSiteId                site = _transactionFacade.parmInventSiteId();
        InventLocationId            warehouse = _transactionFacade.parmInventoryLocationId();
        CustAccount                 custAccount = _transactionFacade.parmCustomerCode();
        CustInvoiceAccount          custInvoiceAccount = _transactionFacade.parmCustomerInvoiceCode();
        VendAccount                 vendAccount = _transactionFacade.parmVendorCode();
        VendInvoiceAccount          vendInvoiceAccount = _transactionFacade.parmVendorInvoiceCode();
        RatingDtoListEnumerator     ratingDtosEnumerator = _ratingDtos.GetListEnumerator();
        TMSScheduledShipUTCDateTime unspecifiedDateTime = DateTimeUtil::newDateTime(dateNull(), 0);

        while (ratingDtosEnumerator.MoveNext())
        {
            RatingDto ratingDTO = ratingDtosEnumerator.Current();
            TMSDiscountTable discountTable;
            List customerDiscounts = new List(Types::Record);
            List shipperDiscounts = new List(Types::Record);
            Set customerDiscountZoneMasters = new Set(Types::String);
            Set shipperDiscountZoneMasters = new Set(Types::String);

            while select discountTable
                order by
                    discountTable.CarrierCode desc,
                    discountTable.CarrierServiceCode desc,
                    discountTable.DestPostalCodeLow desc,
                    discountTable.DestPostalCodeHigh desc,
                    discountTable.DestCountryRegion desc,
                    discountTable.InventSiteId desc,
                    discountTable.InventLocationId desc
                where (discountTable.CarrierCode == ratingDTO.CarrierCode || discountTable.CarrierCode == '')
                    && (discountTable.CarrierServiceCode == ratingDTO.CarrierServiceCode || discountTable.CarrierServiceCode == '')
                    && (discountTable.Direction == direction || discountTable.Direction == TMSDirection::None)
                    && (discountTable.DestState == destState || discountTable.DestState == '')
                    && (discountTable.InventSiteId == site || discountTable.InventSiteId == '')
                    && (discountTable.InventLocationId == warehouse || discountTable.InventLocationId == '')
                    && (discountTable.EffectiveUTCDateTimeFrom <= ratingDTO.EffectiveScheduledShipDateTime || discountTable.EffectiveUTCDateTimeFrom == unspecifiedDateTime)
                    && (discountTable.EffectiveUTCDateTimeTo >= ratingDTO.EffectiveScheduledShipDateTime || discountTable.EffectiveUTCDateTimeTo == unspecifiedDateTime)
                    && ((discountTable.WeightLow <= weight && discountTable.WeightHigh >= weight) || (discountTable.WeightLow == 0 && discountTable.WeightHigh == 0))
                    && (discountTable.FreightTermCode == dlvterm || discountTable.FreightTermCode == '')
                    && (discountTable.DestCountryRegion == destCountry || discountTable.DestCountryRegion == '')
                    && (destPostalCode >= discountTable.DestPostalCodeLow || discountTable.DestPostalCodeLow == '')
                    && (destPostalCode <= discountTable.DestPostalCodeHigh|| discountTable.DestPostalCodeHigh == '')
                    && (discountTable.CustAccount == custAccount || discountTable.CustAccount == '')
                    && (discountTable.CustInvoiceAccount == custInvoiceAccount || discountTable.CustInvoiceAccount == '')
                    && (discountTable.VendAccount == vendAccount || discountTable.VendAccount == '')
                    && (discountTable.VendInvoiceAccount == vendInvoiceAccount || discountTable.VendInvoiceAccount == '')
                    && (discountTable.DiscountType == TMSDiscountType::Customer || discountTable.DiscountType == TMSDiscountType::Shipper)
            {
                if (discountTable.DiscountType == TMSDiscountType::Customer)
                {
                    customerDiscounts.addEnd(discountTable);

                    if (discountTable.ZoneMasterCode != '')
                    {
                        customerDiscountZoneMasters.add(discountTable.ZoneMasterCode);
                    }
                }
                else if (discountTable.DiscountType == TMSDiscountType::Shipper)
                {
                    shipperDiscounts.addEnd(discountTable);

                    if (discountTable.ZoneMasterCode != '')
                    {
                        shipperDiscountZoneMasters.add(discountTable.ZoneMasterCode);
                    }
                }
            }

            if (customerDiscounts.elements() > 0 || shipperDiscounts.elements() > 0)
            {
                TMSFwkDiscountService::applyDiscounts(
                    _shippingEntity,
                    pickUp,
                    dropOff,
                    ratingDTO,
                    _transactionFacade,
                    customerDiscounts,
                    shipperDiscounts,
                    customerDiscountZoneMasters,
                    shipperDiscountZoneMasters);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyDiscounts</Name>
				<Source><![CDATA[
    private static void applyDiscounts(
        XElement                _shippingEntity,
        XElement                _pickUp,
        XElement                _dropOff,
        RatingDto               _ratingDto,
        TMSTransactionFacade    _transactionFacade,
        List                    _customerDiscounts,
        List                    _shipperDiscounts,
        Set                     _customerDiscountZoneMasters,
        Set                     _shipperDiscountZoneMasters)
    {
        XElement        ratingEntity = _shippingEntity.RetrieveOrCreateSegmentRE(_ratingDto);

        if (ratingEntity.Element(ElementXmlConstants::TotalRate) == null)
        {
            ratingEntity = _shippingEntity.RetrieveOrCreateRatingEntity(_ratingDto);
        }

        Amount          totalRate = ratingEntity.GetDecimal(ElementXmlConstants::TotalRate);
        XElementList    rateElements = new XElementList(ratingEntity.Elements(ElementXmlConstants::Rate));
        rateElements = rateElements.WhereMatchingStringElement(ElementXmlConstants::RateType, int2Str(enum2int(TMSRateType::Accessorial)));
        rateElements = rateElements.WhereMatchingStringElement(ElementXmlConstants::AllowAccessorialDiscount, int2Str(enum2int(NoYes::No)));
        Amount          sumUndiscountedAccessorial = rateElements.SumElementsDecimal(ElementXmlConstants::TotalRate);
        Amount          discount = 0;

        TMSDiscountTable customerDiscount = TMSFwkDiscountService::getApplicableDiscount(
            _transactionFacade,
            _pickup,
            _dropoff,
            _ratingDto,
            _customerDiscounts,
            _customerDiscountZoneMasters);

        if (customerDiscount != null)
        {
            discount = TMSFwkDiscountService::getDiscount(totalRate, customerDiscount, sumUndiscountedAccessorial);
            TMSFwkDiscountService::setRateEntityRateDiscount(ratingEntity, discount, ElementXmlConstants::CustomerRate);
            TMSFwkDiscountService::setRateEntityChildrenRateDiscount(
                ratingEntity,
                totalRate,
                discount,
                ElementXmlConstants::CustomerRate,
                sumUndiscountedAccessorial);
        }

        TMSDiscountTable shipperDiscount = TMSFwkDiscountService::getApplicableDiscount(
            _transactionFacade,
            _pickup,
            _dropoff,
            _ratingDto,
            _shipperDiscounts,
            _shipperDiscountZoneMasters);

        if (shipperDiscount != null)
        {
            discount = TMSFwkDiscountService::getDiscount(totalRate, shipperDiscount, sumUndiscountedAccessorial);
            TMSFwkDiscountService::setRateEntityRateDiscount(ratingEntity, discount, ElementXmlConstants::ShipperRate);
            TMSFwkDiscountService::setRateEntityChildrenRateDiscount(
                ratingEntity,
                totalRate,
                discount,
                ElementXmlConstants::ShipperRate,
                sumUndiscountedAccessorial);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getApplicableDiscount</Name>
				<Source><![CDATA[
    private static TMSDiscountTable getApplicableDiscount(
        TmsTransactionFacade    _transactionFacade,
        XElement                _pickUp,
        XElement                _dropOff,
        RatingDto               _ratingDto,
        List                    _discountTableList,
        Set                     _zoneMasterCodes)
    {
        TMSDiscountTable discount = null;
        ListEnumerator discountsEnumerator;

        if (_zoneMasterCodes.elements() > 0)
        {
            discountsEnumerator = _discountTableList.getEnumerator();

            TMSFwkZoneHelperResponseList responseList = TMSFwkZoneHelper::retrieveAndApplyZoneDetails(
                _transactionFacade,
                _pickUp,
                _dropOff,
                _zoneMasterCodes,
                TMSZoneType::Rating,
                _ratingDto);

            while (discountsEnumerator.moveNext())
            {
                TMSDiscountTable tempDiscount = discountsEnumerator.current();

                if (tempDiscount.ZoneMasterCode != ''
                    && tempDiscount.Zone != '')
                {
                    if (responseList.containsResponseWithZoneMasterAndZone(tempDiscount.ZoneMasterCode, tempDiscount.Zone))
                    {
                        discount = tempDiscount;
                        break;
                    }
                }
                else if (discount == null)
                {
                    // save the first one, if no zone is matched for any discounts this one will be chosen
                    discount = tempDiscount;
                }
            }
        }
        else
        {
            discountsEnumerator = _discountTableList.getEnumerator();

            if (discountsEnumerator.moveNext())
            {
                discount = discountsEnumerator.current();
            }
        }

        return discount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRateEntityChildrenRateDiscount</Name>
				<Source><![CDATA[
    private static void setRateEntityChildrenRateDiscount(
        XElement    _ratingEntity,
        Amount      _totalRate,
        Amount      _discountRate,
        str         _discountType,
        Amount      _discExcludedCharges)
    {
        Amount                  totalDiscountableRate = _totalRate - _discExcludedCharges;
        Amount                  discountRateLessExcludedCharges = _discountRate - _discExcludedCharges;
        Amount                  totalApportionedRemainder = 0;
        Amount                  totalApportionedAmount = 0;
        XElementList            discountedRates = _ratingEntity.RetrieveRatesAllowingDiscount();
        XElementListEnumerator  discountedRatesEnumerator = discountedRates.GetListEnumerator();
        int                     currentCount = 0;
        int                     totalRatesCount = discountedRates.Count;

        while (discountedRatesEnumerator.MoveNext())
        {
            XElement    rate = discountedRatesEnumerator.Current();
            Amount      tempApportionedRate = 0;
            Amount      rateTotal = rate.Element(ElementXmlConstants::TotalRate).Value.ToDecimal();
            currentCount++;

            // if we are on the last element, just subtract from the total rate
            if (currentCount == totalRatesCount)
            {
                tempApportionedRate = discountRateLessExcludedCharges - totalApportionedAmount;
            }
            else
            {
                Amount apportionedRate = (rateTotal * discountRateLessExcludedCharges) / minOne(totalDiscountableRate);
                tempApportionedRate = System.Math::Round(apportionedRate, 2);
                Amount remainder = apportionedRate - tempApportionedRate;
                totalApportionedAmount += tempApportionedRate;
                totalApportionedRemainder += remainder;

                if (abs(totalApportionedRemainder) >= 0.01)
                {
                    Amount delta = (remainder > 0 ? 0.01 : -0.01);
                    tempApportionedRate += delta;
                    totalApportionedRemainder -= delta;
                }
            }

            TMSFwkDiscountService::setRateEntityRateDiscount(rate, tempApportionedRate, _discountType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRateEntityRateDiscount</Name>
				<Source><![CDATA[
    private static void setRateEntityRateDiscount(
        XElement    _ratingEntity,
        Amount      _discount,
        str         _discountType)
    {
        XElementList elements = new XElementList(_ratingEntity.Elements(_discountType));

        var discountCustomerElm = elements.SingleOrDefault();

        if (discountCustomerElm == null)
        {
            discountCustomerElm = new XElement(_discountType);
            _ratingEntity.Add(discountCustomerElm);
        }

        // update node
        discountCustomerElm.SetValue(_discount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDiscount</Name>
				<Source><![CDATA[
    private static Amount getDiscount(
        Amount              _totalRate,
        TMSDiscountTable    _discountTable,
        Amount              _discExcludedCharges)
    {
        Amount result = 0;
        Amount discountableRate = _totalRate - _discExcludedCharges;

        if (_discountTable.DiscountResultType == TMSDiscountResultType::Percent)
        {
            result = System.Math::Round(discountableRate - (discountableRate * (_discountTable.Percent / 100)), 2);
        }
        else if (_discountTable.DiscountResultType == TMSDiscountResultType::Amount)
        {
            result = System.Math::Round(discountableRate - _discountTable.Fee, 2);
        }

        result += _discExcludedCharges;

        // ensure minimum
        if (result < _discountTable.MinimumCharge)
        {
            result = _discountTable.MinimumCharge;
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>