<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxCalcReportInclAdjustment</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TaxCalcReportInclAdjustment
{
    TmpTaxTrans     tmpTaxTrans;
    Voucher         voucher;
    TransDate       transDate;
    TaxPeriod       taxPeriod;
    FromDate        fromDate;
    boolean         reported;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
        void calc()
    {
        TaxReportPeriod  taxReportPeriod = TaxReportPeriod::find(taxPeriod,fromDate);

        this.sumTransactions(taxPeriod,
                             taxReportPeriod.FromDate,
                             taxReportPeriod.ToDate,0);

        this.calcAdjustments();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAdjustments</Name>
				<Source><![CDATA[
        void calcAdjustments()
    {
        TaxReportAdjustmentTrans    taxReportAdjustmentTrans;
        TaxReportPeriod             taxReportPeriodPrevious;

        if (reported)
        {
            while select FromDate, ToDate, TaxVersion from taxReportAdjustmentTrans
                where taxReportAdjustmentTrans.Voucher   == voucher &&
                      taxReportAdjustmentTrans.TransDate == transDate &&
                      taxReportAdjustmentTrans.TaxPeriod == taxPeriod
            {
                this.sumTransactions(taxPeriod,
                                     taxReportAdjustmentTrans.FromDate,
                                     taxReportAdjustmentTrans.ToDate,
                                     taxReportAdjustmentTrans.TaxVersion);
            }
        }
        else
        {
            while select FromDate, ToDate, VersionNum from taxReportPeriodPrevious
                where taxReportPeriodPrevious.TaxPeriod == taxPeriod &&
                      taxReportPeriodPrevious.FromDate  < fromDate   &&
                      taxReportPeriodPrevious.VersionNum > 0
            {
                this.sumTransactions(taxPeriod,
                                     taxReportPeriodPrevious.FromDate,
                                     taxReportPeriodPrevious.ToDate,
                                     taxReportPeriodPrevious.VersionNum);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        void new(TaxPeriod  _taxPeriod,
             FromDate   _fromDate,
             boolean    _reported,
             Voucher    _voucher = '',
             TransDate  _transDate = dateNull())
    {
        voucher   = _voucher;
        fromDate  = _fromDate;
        reported  = _reported;
        transDate = _transDate;
        taxPeriod = _taxPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumTransactions</Name>
				<Source><![CDATA[
        void sumTransactions(TaxPeriod   _taxPeriod,
                         FromDate    _fromDate,
                         ToDate      _toDate,
                         TaxVersion  _taxVersion)
    {
        TaxTrans    taxTrans;
        if (!TaxParameters::reportUseVatDueDate_W())
        {
            while select sum(TaxAmount),
                         sum(TaxAmountCur),
                         sum(TaxBaseAmount),
                         sum(TaxBaseAmountCur),
                         sum(TaxBaseQty),
                         sum(TaxInCostPriceMST),
                         sum(TaxInCostPriceCur)
            from taxTrans
            group by TaxCode, TaxDirection, CurrencyCode
            where taxTrans.TaxPeriod == _taxPeriod
                && taxTrans.TransDate >= _fromDate
                && taxTrans.TransDate <= _toDate
                && taxTrans.TaxRepCounter == _taxVersion
                && taxTrans.Source != TaxModuleType::Tax
            {
                this.insertTmpTaxTrans(taxTrans);
            }
        }
        else
        {
            TaxTrans_W taxTrans_W;
            while select sum(TaxAmount),
                         sum(TaxAmountCur),
                         sum(TaxBaseAmount),
                         sum(TaxBaseAmountCur),
                         sum(TaxBaseQty),
                         sum(TaxInCostPriceMST),
                         sum(TaxInCostPriceCur)
            from taxTrans
                group by TaxCode, TaxDirection, CurrencyCode
                where taxTrans.TaxPeriod == _taxPeriod
                    && taxTrans.TaxRepCounter == _taxVersion
                    && taxTrans.Source != TaxModuleType::Tax
            exists join taxTrans_W
                where taxTrans_W.TaxTrans == taxTrans.RecId
                    && taxTrans_W.VatDueDate_W >= _fromDate
                    && taxTrans_W.VatDueDate_W <= _toDate
            {
                this.insertTmpTaxTrans(taxTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpTaxTrans</Name>
				<Source><![CDATA[
    private void insertTmpTaxTrans(TaxTrans _taxTrans)
    {
        tmpTaxTrans.clear();
        tmpTaxTrans.TaxCode             = _taxTrans.TaxCode;
        tmpTaxTrans.TaxDirection        = _taxTrans.TaxDirection;
        tmpTaxTrans.CurrencyCode        = _taxTrans.CurrencyCode;
        tmpTaxTrans.TaxAmountMST        = _taxTrans.TaxAmount;
        tmpTaxTrans.TaxAmountCur        = _taxTrans.TaxAmountCur;
        tmpTaxTrans.TaxBaseAmountMST    = _taxTrans.TaxBaseAmount;
        tmpTaxTrans.TaxBaseAmountCur    = _taxTrans.TaxBaseAmountCur;
        tmpTaxTrans.TaxBaseQty          = _taxTrans.TaxBaseQty;
        tmpTaxTrans.TaxInCostPriceMST   = _taxTrans.TaxInCostPriceMST;
        tmpTaxTrans.TaxInCostPriceCur   = _taxTrans.TaxInCostPriceCur;

        tmpTaxTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpTaxTrans</Name>
				<Source><![CDATA[
        TmpTaxTrans tmpTaxTrans()
    {
        return tmpTaxTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>