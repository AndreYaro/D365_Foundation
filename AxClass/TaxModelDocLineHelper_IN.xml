<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxModelDocLineHelper_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The helper class used to help the implementation of Tax model doc line.
/// </summary>
public class TaxModelDocLineHelper_IN extends TaxModelDocLineHelper
{
    TaxModelDocLineExtensionIN  documentLineExtensionMap;
    TaxModelTaxable_IN          taxModelTaxableLoc;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssessableValueTransactionCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the assessable value of the document line.
    /// </summary>
    /// <returns>
    /// The assessable value.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AmountCur getAssessableValueTransactionCurrency()
    {
        AmountCur assessableValue;

        assessableValue = documentLineMap.SalesPurchJournalLine::getSalesPurchJournalLineExtension_IN().AssessableValue;

        if (taxModelTaxable.getLineAmount() * assessableValue < 0)
        {
            return -assessableValue;
        }

        return assessableValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaximumRetailPriceTransactionCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the maximum retail price of the document line.
    /// </summary>
    /// <returns>
    /// The maximum retail price.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public MaximumRetailPrice_IN getMaximumRetailPriceTransactionCurrency()
    {
        if (taxModelTaxable.isForegin()
            && (taxModelTaxable is TaxModelDocLineSalesLineImpl_IN
                || taxModelTaxable is TaxModelDocLinePurchLineImpl_IN))
        {
            return documentLineMap.SalesPurchJournalLine::getSalesPurchJournalLineExtension_IN().CustomsMaxRetailPrice;
        }
        else
        {
            return documentLineMap.SalesPurchJournalLine::getSalesPurchJournalLineExtension_IN().MaximumRetailPrice;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRateBasingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax rate basing date for the given tax type.
    /// </summary>
    /// <param name="_taxType">
    /// The given tax type.
    /// </param>
    /// <returns>
    /// The tax rate date.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate getTaxRateBasingDate(TaxType_IN _taxType)
    {
        if (taxModelTaxable.isBasedOnReferenceTaxModelDocLine())
        {
            return taxModelTaxableLoc.getTaxRateBasingDate(_taxType);
        }
        else
        {
            return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TaxRegistrationNumber_IN</c> of the tax registration based on the given tax type.
    /// </summary>
    /// <param name="_taxType">
    /// The given <c>TaxType_IN</c>
    /// </param>
    /// <returns>
    /// The <c>TaxRegistrationNumber_IN</c> of the tax registration
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxRegistrationNumber_IN getTaxRegistrationNumber(
        TaxType_IN      _taxType)
    {
        TaxRegistrationNumber_IN ret;

        ret = TransTaxInformationHelper::getTaxRegistrationNumbers(transTaxInformation, _taxType).RegistrationNumber;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRegistrationNumberRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> of the tax registration based on the given tax type.
    /// </summary>
    /// <param name="_taxType">
    /// The given <c>TaxType_IN</c>
    /// </param>
    /// <returns>
    /// The <c>RecId</c> of the tax registration
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RefRecId getTaxRegistrationNumberRefRecId(
        TaxType_IN      _taxType)
    {
        RefRecId ret;

        ret = TransTaxInformationHelper::getTaxRegistrationNumbers(transTaxInformation, _taxType).RecId;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxTypeAttached</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check to see if the transaction document has the given <c>TaxType_IN</c> <c>TaxCode</c>
    /// </summary>
    /// <param name="_taxType">
    /// The given <c>TaxType_IN</c>
    /// </param>
    /// <returns>
    /// True, if it has.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isTaxTypeAttached(TaxType_IN _taxType)
    {
        TaxGroupData    taxGroupData;
        taxOnItem       taxOnItem;
        TaxTable        taxTable;

        select firstOnly RecId from taxOnItem
            where taxOnItem.TaxItemGroup            == taxModelTaxable.getTaxItemGroup()
            exists join taxGroupData
                where taxOnItem.TaxCode             == taxGroupData.TaxCode
                    && taxGroupData.TaxGroup        == taxModelTaxable.getTaxGroup()
            exists join taxTable
                where taxTable.TaxCode              == taxOnItem.TaxCode
                    && taxTable.TaxType_IN          == _taxType;

        return taxOnItem.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isForeignTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction is a foreign transaction or not.
    /// </summary>
    /// <returns>
    /// True if the document line is a foregin foreign transaction; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NoYes isForeignTransaction()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssessableValueAccountingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the assessable value in accounting currency for the document line.
    /// </summary>
    /// <returns>
    /// The assessable value in accounting currency
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AmountMST getAssessableValueAccountingCurrency()
    {
        AmountMST assessableValue;

        SalesPurchJournalLineExtension_IN extension = documentLineMap.SalesPurchJournalLine::getSalesPurchJournalLineExtension_IN();
        assessableValue = extension.getAssessableValueAccountingCurrency();

        if (taxModelTaxable.getLineAmount() * assessableValue < 0)
        {
            return -assessableValue;
        }

        return assessableValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentLineExtensionMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the extension map <c>TaxModelDocLineExtensionIN</c> of the documentLineMap.
    /// </summary>
    /// <returns>
    /// The extension map.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxModelDocLineExtensionIN getDocumentLineExtensionMap()
    {
        if (taxModelTaxable.isBasedOnReferenceTaxModelDocLine())
        {
            return taxModelTaxableLoc.getDocumentLineExtensionMap();
        }
        else
        {
            return documentLineExtensionMap;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyTaxRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the party <c>TaxRegistrationNumber_IN</c> of the tax registration based on the given tax type.
    /// </summary>
    /// <param name="_taxType">
    /// The given <c>TaxType_IN</c>
    /// </param>
    /// <returns>
    /// The party <c>TaxRegistrationNumber_IN</c> of the tax registration
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxRegistrationNumber_IN getPartyTaxRegistrationNumber(TaxType_IN _taxType)
    {
        TaxRegistrationNumber_IN    registrationNumber;
        TaxInformation_IN           partyTaxInformation;

        partyTaxInformation = taxModelTaxableLoc.getPartyTaxInfomationTable();

        if (partyTaxInformation)
        {
            registrationNumber = partyTaxInformation.getTaxRegistrationNumbersTable(_taxType).RegistrationNumber;
        }

        return registrationNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyTaxRegistrationNumberRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the party <c>RecId</c> of the tax registration based on the given tax type.
    /// </summary>
    /// <param name="_taxType">
    /// The given <c>TaxType_IN</c>
    /// </param>
    /// <returns>
    /// The party <c>RecId</c> of the tax registration
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RefRecId getPartyTaxRegistrationNumberRefRecId(TaxType_IN      _taxType)
    {
        RefRecId            ret;
        TaxInformation_IN   partyTaxInformation;

        partyTaxInformation = taxModelTaxableLoc.getPartyTaxInfomationTable();

        if (partyTaxInformation)
        {
            ret = partyTaxInformation.getTaxRegistrationNumbersTable(_taxType).RecId;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxModelTaxable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the instance of <c>TaxModelTaxable_IN</c>
    /// </summary>
    /// <param name = "_taxModelTaxable"> the tax model taxable</param>
    public void setTaxModelTaxable(TaxModelTaxable _taxModelTaxable)
    {
        super(_taxModelTaxable);

        if (taxModelTaxable.isBasedOnReferenceTaxModelDocLine())
        {
            taxModelTaxableLoc = taxModelTaxable.getReferenceTaxModelDocLine() as TaxModelTaxable_IN;
        }
        else
        {
            taxModelTaxableLoc = _taxModelTaxable as TaxModelTaxable_IN;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConsumptionStateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the comsumption state id of the transaction line.
    /// </summary>
    /// <returns>
    /// The transaction line consumption state id.
    /// </returns>
    public LogisticsAddressStateId getConsumptionStateId()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyTaxInfomationTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the party <c>TaxInformation_IN</c>.
    /// </summary>
    /// <returns>
    /// The party <c>TaxInformation_IN</c>
    /// </returns>
    public TaxInformation_IN getPartyTaxInfomationTable()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxInfomationTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TaxInformation_IN</c> based on the tax location.
    /// </summary>
    /// <returns>
    /// The <c>TaxInformation_IN</c>
    /// </returns>
    public TaxInformation_IN getTaxInfomationTable()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNonGST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if tax is Non-GST for the transaction line.
    /// </summary>
    /// <returns>
    /// True if the tax is Non-GST for the transaction line; otherwise, false.
    /// </returns>
    public NoYesId isNonGST()
    {
        NoYesId                     isNonGST;
        TaxModelDocLineBaseImpl_IN  taxModelDocLineBaseImpl;

        if (taxModelTaxable.isBasedOnReferenceTaxModelDocLine())
        {
            taxModelDocLineBaseImpl = taxModelTaxable.getReferenceTaxModelDocLine() as TaxModelDocLineBaseImpl_IN;
            isNonGST = taxModelDocLineBaseImpl.isNonGST();
        }
        else
        {
            isNonGST = transTaxInformation.NonGST;
        }

        return isNonGST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSupportCalcTaxInAccountingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Whether support calculate tax in accounting currency for this transaction line.
    /// </summary>
    /// <returns>
    /// True if support, otherwise false.
    /// </returns>
    [Hookable(false)]
    internal boolean isSupportCalcTaxInAccountingCurrency()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAssessableValueAccountingCurrencyAvailable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Whether user can set assessable value on UI for this transaction line.
    /// </summary>
    /// <returns>
    /// True if can, otherwise false.
    /// </returns>
    [Hookable(false)]
    internal boolean isAssessableValueAccountingCurrencyAvailable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>