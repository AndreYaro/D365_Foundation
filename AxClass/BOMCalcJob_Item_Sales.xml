<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomCalcJob_Item_Sales</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BomCalcJob_Item_Sales extends BOMCalcJob_Item implements BatchRetryable
{
    SalesLine           salesLine;
    recId               salesLineRecid;
    Qty                 salesQty;

    SalesUnit           salesUnit;

    SalesQuotationLine  quotationLine;

    #define.CurrentVersion(3)
    #LOCALMACRO.CurrentList
        salesQty,
        salesLineRecId,
        salesUnit
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowedBOMCalcExplosionModeSet</Name>
				<Source><![CDATA[
    public Set allowedBOMCalcExplosionModeSet()
    {
        Set allowedBOMCalcExplosionModeSet;

        allowedBOMCalcExplosionModeSet = new Set(Types::Enum);
        allowedBOMCalcExplosionModeSet.add(BOMCalcExplosionMode::SingleLevel);
        allowedBOMCalcExplosionModeSet.add(BOMCalcExplosionMode::MultiLevel);
        allowedBOMCalcExplosionModeSet.add(BOMCalcExplosionMode::MakeToOrder);

        return allowedBOMCalcExplosionModeSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the last choice that is stored in the last value table.
    /// </summary>
    /// <remarks>
    ///    If no record can be found or the <c>unpack</c> method returns false, the <c>initParmDefault</c>
    ///    method will be called.This method should not typically be overridden.
    /// </remarks>
    void getLast()
    {
        super();
        calcDate = this.parmCalcDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCWQty</Name>
				<Source><![CDATA[
    public PdsCWInventQty parmCWQty(PdsCWInventQty _cwQty = cwQty)
    {
        InventQty   localInventQty;

        if (cwQty != _cwQty && PdsGlobal::pdsIsCWItem(itemId))
        {
            cwQty = _cwQty;

            localInventQty = PdsCatchWeight::inventQty(itemId, cwQty);
            salesQty =  UnitOfMeasureConverter::convert(
                localInventQty,
                UnitOfMeasure::unitOfMeasureIdBySymbol(
                    InventTableModule::find(itemId, ModuleInventPurchSales::Invent).UnitId),
                UnitOfMeasure::unitOfMeasureIdBySymbol(salesUnit),
                NoYes::Yes,
                InventTable::itemProduct(itemId),
                NoYes::Yes);
        }

        return cwQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuotationLine</Name>
				<Source><![CDATA[
    SalesQuotationLine parmQuotationLine(SalesQuotationLine _quotationLine = quotationLine)
    {
        if (quotationLine.RecId != _quotationLine.RecId)
        {
            if (_quotationLine)
            {
                calcDate = _quotationLine.ConfirmedDlv ? _quotationLine.ConfirmedDlv : calcDate;

                salesQty = _quotationLine.SalesQty;
                cwQty = _quotationLine.PdsCWQty;
                salesUnit = _quotationLine.SalesUnit;
            }
            quotationLine = _quotationLine;
        }
        return quotationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesLine</Name>
				<Source><![CDATA[
    SalesLine parmSalesLine(SalesLine _salesOrderLine = salesLine)
    {
        BOMVersion bomVersion;
        if (salesLine.RecId != _salesOrderLine.RecId)
        {
            if (_salesOrderLine)
            {
                calcDate = _salesOrderLine.ConfirmedDlv ? _salesOrderLine.ConfirmedDlv : calcDate;

                salesQty = _salesOrderLine.SalesQty;
                cwQty = _salesOrderLine.PdsCWQty;
                salesUnit = _salesOrderLine.SalesUnit;

                if (BOM::isPmfFormula(bomId))
                {
                    bomVersion =
                        BOMVersion::findActive(
                            itemId,
                            calcDate,
                            salesQty,
                            InventDim::find(inventDimId));

                    if (bomVersion)
                    {
                        itemQty = bomVersion.PmfBatchSize;
                        pmfYieldPct = bomVersion.PmfYieldPct;
                    }
                }
            }
            salesLine = _salesOrderLine;
            salesLineRecid = salesLine.RecId;
        }
        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesQty</Name>
				<Source><![CDATA[
    Qty parmSalesQty(Qty _salesQty = salesQty)
    {
        salesQty = _salesQty;
        return salesQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesUnit</Name>
				<Source><![CDATA[
    public SalesUnit parmSalesUnit(SalesUnit _salesUnit = salesUnit)
    {
        salesUnit = _salesUnit;

        return salesUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        costPriceTransfer           = NoYes::No;
        costPriceInclInUnitPrice    = NoYes::No;
        costPriceRoundOff           = NoYes::No;

        salesPriceTransfer          = NoYes::No;
        salesPriceInclInUnitPrice   = NoYes::No;
        salesPriceRoundOff          = NoYes::No;

        netWeightTransfer           = NoYes::No;

        if (! salesLine && salesLineRecid)
            salesLine = SalesLine::findRecId(salesLineRecid);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>seriesSize</Name>
				<Source><![CDATA[
    Qty seriesSize()
    {
        InventTableModule inventTableModule;

        if (salesLine && salesLine.ItemId == itemId && salesLine.InventDimId == inventDimId)
        {
            inventTableModule = InventTableModule::find(itemId,ModuleInventPurchSales::Invent);

            return EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(itemId,
                                                                                         inventDimId,
                                                                                         this.parmSalesQty(),
                                                                                         salesLine.SalesUnit,
                                                                                         inventTableModule.UnitId,
                                                                                         NoYes::Yes);
        }
        else if (quotationLine && quotationLine.ItemId && quotationLine.InventDimId == inventDimId)
        {
            inventTableModule = InventTableModule::find(itemId, ModuleInventPurchSales::Invent);

            return EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(itemId,
                                                                                         inventDimId,
                                                                                         this.parmSalesQty(),
                                                                                         quotationLine.SalesUnit,
                                                                                         inventTableModule.UnitId,
                                                                                         NoYes::Yes);
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showSales</Name>
				<Source><![CDATA[
    boolean showSales()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer         version     = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                container base;
                [version, #CurrentList, base] = packedClass;
                return super(base);

            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static BOMCalcJob_Item_Sales construct()
    {
        return new BOMCalcJob_Item_Sales();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS343262";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>