<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostProductionCostObjectFlowModel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostProductionCostObjectFlowModel</c> class provides WIP flow data on production cost object level.
/// </summary>
class CostProductionCostObjectFlowModel extends CostFlowModel implements CostISetProductionCostObject
{
    ProdId  prodId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setCostObject</Name>
				<Source><![CDATA[
    public void setCostObject(ProdId _prodId)
    {
        prodId = _prodId;

        this.create();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    protected Query buildQuery()
    {
        query = new Query();
        query.queryType(QueryType::Union);

        var qbds = query.addDataSource(tableNum(CostStatementView));
        qbds.addSelectionField(fieldNum(CostStatementView, Amount), SelectionField::Sum);
        qbds.addGroupByField(fieldNum(CostStatementView, TransDate));
        qbds.addGroupByField(fieldNum(CostStatementView, StatementLineCategoryLevel2));
        qbds.addRange(fieldNum(CostStatementView, StatementType)).value(queryValue(this.parmCostStatementType()));

        qbds.addRange(fieldNum(CostStatementView, ReferenceType)).value(queryValue(InventCostTransRefType::Production));
        qbds.addRange(fieldNum(CostStatementView, Reference)).value(prodId);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CostProductionCostObjectFlowModel construct()
    {
        return new CostProductionCostObjectFlowModel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostStatementType</Name>
				<Source><![CDATA[
    protected CostStatementType parmCostStatementType()
    {
        return CostStatementType::WIP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMapQuery</Name>
				<Source><![CDATA[
    protected InventAgingICommand getMapQuery(QueryRun _queryRun)
    {
        return CostWIPStatementCmdMapQuery::newFromQueryRun(_queryRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCmdAggregate</Name>
				<Source><![CDATA[
    protected CostStatementCmdAggregate getCmdAggregate(InventAgingICommand _mapQuery, CostSelectPeriodState _period)
    {
        var aggregator = CostWIPStatementCmdAggregate::newFromParameters(_mapQuery);
        aggregator.parmFromDate(dateNull());
        aggregator.parmToDate(_period.parmToDate());
        return aggregator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addBalances</Name>
				<Source><![CDATA[
    protected void addBalances(CostStatementCmdAggregate _aggregator)
    {
        var wipCmdAggregator = _aggregator as CostWIPStatementCmdAggregate;

        if (!wipCmdAggregator)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        var monthName = this.getLabelForDateRange(wipCmdAggregator.parmFromDate(), wipCmdAggregator.parmToDate());

        this.addBalance("@SCM:CostStatementConsumedMaterialCost",
                        periodChangeLines,
                        monthName,
                        wipCmdAggregator.parmConsumedMaterialCost());
        this.addBalance("@SCM:CostStatementConsumedManufacturingCost",
                        periodChangeLines,
                        monthName,
                        wipCmdAggregator.parmConsumedManufacturingCost());
        this.addBalance("@SCM:CostStatementConsumedOutsourcingCost",
                        periodChangeLines,
                        monthName,
                        wipCmdAggregator.parmConsumedOutsourcingCost());
        this.addBalance("@SCM:CostStatementConsumedIndirectCost",
                        periodChangeLines,
                        monthName,
                        wipCmdAggregator.parmConsumedIndirectCost());
        this.addBalance("@SCM:CostStatementManufacturedCost",
                        periodChangeLines,
                        monthName,
                        wipCmdAggregator.parmManufacturedCost());
        this.addBalance("@SCM:CostStatementVariances",
                        periodChangeLines,
                        monthName,
                        wipCmdAggregator.parmVariances());

        this.addBalance("@SCM:CostStatementEndingBalance",
                        endingBalanceLines,
                        monthName,
                        wipCmdAggregator.parmEndingBalance());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodsProvider</Name>
				<Source><![CDATA[
    protected CostFlowChartAggregationPeriodsProvider parmPeriodsProvider()
    {
        var periodsProvider = CostFlowChartAggregationPeriodsProvider_ProductionTransactionDates::construct();

        periodsProvider.parmProdId(prodId);

        return periodsProvider;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>