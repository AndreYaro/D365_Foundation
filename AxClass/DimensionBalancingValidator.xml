<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DimensionBalancingValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>DimensionBalancingValidator</c> class enforces that the sum of debits equals the sum of credits for a specified set of transactions.
/// </summary>
public class DimensionBalancingValidator
{
    Map dimensionAttributeValueBalances;
    Map dimensionAttributeCombinationValueBalances;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateDimensionBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the balance of a ledger dimension.
    /// </summary>
    /// <param name="_ledgerDimension">
    /// A ledger dimension i.e. a record Id of the <c>DimensionAttributeValueCombination</c> table.
    /// </param>
    /// <param name="_accountingCurrencyAmount">
    /// An amount in accounting currency.
    /// </param>
    public void calculateDimensionBalance(
        LedgerDimensionAccount _ledgerDimension,
        AmountMST              _accountingCurrencyAmount)
    {
        Map                                 dimensionAttributeMap;
        AmountMST                           balance;
        DimensionAttribute                  dimensionAttribute;
        DimensionAttributeValue             dimensionAttributeValue;
        DimensionAttributeLevelValue        dimensionAttributeLevelValue;
        DimensionAttributeValueGroupCombination dimensionAttributeValueGroupCombination;

        if (_ledgerDimension != 0 && DimensionAttributeExtensionProvider::balancingDimensionsExist())
        {
            dimensionAttributeMap = new Map(Types::Int64, Types::Real);

            while select RecId from dimensionAttributeValue
                group by RecId
                where dimensionAttributeValue.IsBalancing_PSN == true
            join RecId, BalancingDimension_PSN from dimensionAttribute
                group by RecId, BalancingDimension_PSN
                where dimensionAttribute.RecId == dimensionAttributeValue.DimensionAttribute
            exists join dimensionAttributeLevelValue where
                dimensionAttributeLevelValue.DimensionAttributeValue == dimensionAttributeValue.RecId
            exists join dimensionAttributeValueGroupCombination where
                dimensionAttributeValueGroupCombination.DimensionAttributeValueGroup == dimensionAttributeLevelValue.DimensionAttributeValueGroup &&
                dimensionAttributeValueGroupCombination.DimensionAttributeValueCombination == _ledgerDimension
            {
                balance = dimensionAttributeValueBalances.exists(dimensionAttributeValue.RecId) ?
                            any2real(dimensionAttributeValueBalances.lookup(dimensionAttributeValue.RecId)) : 0;

                balance += _accountingCurrencyAmount;

                dimensionAttributeValueBalances.insert(dimensionAttributeValue.RecId, balance);

                if (!(dimensionAttributeMap.exists(dimensionAttribute.RecId)
                        || dimensionAttributeMap.exists(dimensionAttribute.BalancingDimension_PSN)))
                {
                    dimensionAttributeMap.insert(dimensionAttribute.RecId, balance);

                    this.calculateDimensionCombinationBalance(_ledgerDimension,
                                                            _accountingCurrencyAmount,
                                                            dimensionAttributeValue.RecId,
                                                            dimensionAttribute.BalancingDimension_PSN);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDimensionCombinationBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the combination balance of a ledger dimensions.
    /// </summary>
    /// <param name="_ledgerDimension">
    /// A ledger dimension i.e. a record Id of the <c>DimensionAttributeValueCombination</c> table.
    /// </param>
    /// <param name="_accountingCurrencyAmount">
    /// An amount in accounting currency.
    /// </param>
    /// <param name="_dimensionAttributeValueRecId">
    /// A record Id of the <c>DimensionAttributeValue</c> table.
    /// </param>
    /// <param name="_balancedimensionAttributeRecId">
    /// A record Id of the <c>DimensionAttribute</c> table.
    /// </param>
    private void calculateDimensionCombinationBalance(
        LedgerDimensionAccount _ledgerDimension,
        AmountMST              _accountingCurrencyAmount,
        RefRecId               _dimensionAttributeValueRecId,
        RefRecId               _balancedimensionAttributeRecId)
    {
        str                                     mapId;
        AmountMST                               balance;
        DimensionAttribute                      dimensionAttribute;
        DimensionAttributeValue                 dimensionAttributeValue;
        DimensionAttributeLevelValue            dimensionAttributeLevelValue;
        DimensionAttributeValueGroupCombination dimensionAttributeValueGroupCombination;

        while select RecId from dimensionAttributeValueGroupCombination
            group by dimensionAttributeValue.RecId, dimensionAttributeValue.DimensionAttribute
            where dimensionAttributeValueGroupCombination.DimensionAttributeValueCombination == _ledgerDimension
            join RecId from dimensionAttributeLevelValue
                where dimensionAttributeLevelValue.DimensionAttributeValueGroup == dimensionAttributeValueGroupCombination.DimensionAttributeValueGroup
            join RecId, DimensionAttribute from dimensionAttributeValue
                where dimensionAttributeValue.RecId == dimensionAttributeLevelValue.DimensionAttributeValue
                   && dimensionAttributeValue.RecId != _dimensionAttributeValueRecId
            join RecId from dimensionAttribute
                where dimensionAttribute.RecId == dimensionAttributeValue.DimensionAttribute
                   && dimensionAttribute.BalancingDimension_PSN != 0
        {
            if (_balancedimensionAttributeRecId)
            {
                mapId = strFmt("%1-%2", dimensionAttributeValue.RecId, _dimensionAttributeValueRecId);

                balance = dimensionAttributeCombinationValueBalances.exists(mapId) ?
                            any2real(dimensionAttributeCombinationValueBalances.lookup(mapId)) : 0;

                balance += _accountingCurrencyAmount;

                dimensionAttributeCombinationValueBalances.insert(mapId, balance);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDimensionBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the dimension attribute values and combinations have debits equals credits.
    /// </summary>
    /// <returns>
    /// true if debits equals credits; otherwise, false.
    /// </returns>
    public boolean checkDimensionBalance()
    {
        boolean                         isDimensionBalanced = true;
        boolean                         isDimensionCombinationBalanced = true;
        RecId                           dimensionAttributeValueRecId;
        AmountMST                       balance;
        MapEnumerator                   balanceEnumerator;
        DimensionAttribute              dimensionAttribute;
        DimensionAttributeValue         dimensionAttributeValue;
        DimensionAttributeLevelValue    dimensionAttributeLevelValue;

        balanceEnumerator = dimensionAttributeValueBalances.getEnumerator();

        if (DimensionAttributeExtensionProvider::balancingDimensionsExist())
        {
            while (balanceEnumerator.moveNext())
            {
                balance = balanceEnumerator.currentValue();

                if (balance != 0)
                {
                    dimensionAttributeValueRecId = balanceEnumerator.currentKey();

                    select firstonly DisplayValue from dimensionAttributeLevelValue
                        where dimensionAttributeLevelValue.DimensionAttributeValue == dimensionAttributeValueRecId
                        join DimensionAttribute from dimensionAttributeValue
                            where dimensionAttributeValue.RecId == dimensionAttributeLevelValue.DimensionAttributeValue
                        join Name from dimensionAttribute
                            where dimensionAttribute.RecId == dimensionAttributeValue.DimensionAttribute;

                    isDimensionBalanced = checkFailed(strFmt("@SPS1682",
                                                dimensionAttribute.Name,
                                                dimensionAttributeLevelValue.DisplayValue));
                }
            }

            isDimensionCombinationBalanced = this.checkDimensionCombinationBalance();
        }

        return isDimensionBalanced && isDimensionCombinationBalanced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDimensionCombinationBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether dimension attribute combinations have debits equals credits.
    /// </summary>
    /// <returns>
    /// true if all the dimension attribute combinations are balanced; otherwise, false.
    /// </returns>
    private boolean checkDimensionCombinationBalance()
    {
        boolean                         isValid = true;
        AmountMST                       balance;
        Name                            firstDimensionName;
        Name                            secondDimensionName;
        DimensionValue                  firstDimensionAttributeValue;
        DimensionValue                  secondDimensionAttributeValue;
        List                            dimensionCombinationList;
        ListEnumerator                  dimensionCombinationEnumerator;
        MapEnumerator                   combinationBalanceEnumerator;
        DimensionAttribute              dimensionAttribute;
        DimensionAttributeValue         dimensionAttributeValue;
        DimensionAttributeLevelValue    dimensionAttributeLevelValue;

        combinationBalanceEnumerator = dimensionAttributeCombinationValueBalances.getEnumerator();

        while (combinationBalanceEnumerator.moveNext())
        {
            balance = combinationBalanceEnumerator.currentValue();

            if (balance != 0)
            {
                dimensionCombinationList = strSplit(combinationBalanceEnumerator.currentKey(), '-');
                dimensionCombinationEnumerator = dimensionCombinationList.getEnumerator();
                dimensionCombinationEnumerator.moveNext();

                select firstonly DisplayValue from dimensionAttributeLevelValue
                    where dimensionAttributeLevelValue.DimensionAttributeValue == dimensionCombinationEnumerator.current()
                    join dimensionAttributeValue
                        where dimensionAttributeValue.RecId == dimensionAttributeLevelValue.DimensionAttributeValue
                    join Name from dimensionAttribute
                        where dimensionAttribute.RecId == dimensionAttributeValue.DimensionAttribute;

                firstDimensionName = dimensionAttribute.localizedName();
                firstDimensionAttributeValue = dimensionAttributeLevelValue.DisplayValue;

                dimensionCombinationEnumerator.moveNext();

                select firstonly DisplayValue from dimensionAttributeLevelValue
                    where dimensionAttributeLevelValue.DimensionAttributeValue == dimensionCombinationEnumerator.current()
                    join RecId from dimensionAttributeValue
                        where dimensionAttributeValue.RecId == dimensionAttributeLevelValue.DimensionAttributeValue
                    join Name from dimensionAttribute
                        where dimensionAttribute.RecId == dimensionAttributeValue.DimensionAttribute;

                secondDimensionName = dimensionAttribute.localizedName();
                secondDimensionAttributeValue = dimensionAttributeLevelValue.DisplayValue;

                isValid = checkFailed(strFmt("@SPS1683",
                                firstDimensionName,
                                firstDimensionAttributeValue,
                                secondDimensionName,
                                secondDimensionAttributeValue));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        dimensionAttributeValueBalances             = new Map(Types::Int64, Types::Real);
        dimensionAttributeCombinationValueBalances  = new Map(Types::String, Types::Real);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static DimensionBalancingValidator construct()
    {
        return new DimensionBalancingValidator();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>