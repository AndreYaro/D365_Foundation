<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayJournalCheckUnpost_DeleteTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// A class for unposting posted journals with deletion.
/// </summary>
class rPayJournalCheckUnpost_DeleteTrans extends RPayJournalCheckUnPost implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks transactions are valid for deletion.
    /// </summary>
    /// <param name="_journalTransData">
    /// The <c>JournalTransData</c> class instance.
    /// </param>
    /// <returns>
    /// True if validation passed without any errors.
    /// </returns>
    protected boolean checkTrans(JournalTransData _journalTransData)
    {
        boolean ret;

        RPayTrans           rPayTrans;
        RPayJournalTrans    rPayJournalTrans = _journalTransData.journalTrans();

        ret = super(_journalTransData);

        while select * from rPayTrans
            where rPayTrans.SourceTableId == tableNum(RPayJournalTrans) &&
                  rPayTrans.SourceRecId == rPayJournalTrans.RecId       &&
                  rPayTrans.CounterUnit == rPayJournalTrans.JournalId
        {
            ret = rPayTrans.validateDelete() && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts transactions.
    /// </summary>
    /// <param name="_journalTransData">
    /// The <c>JournalTransData</c> class instance.
    /// </param>
    protected void postTrans(JournalTransData _journalTransData)
    {
        RPayJournalTrans journalTrans = _journalTransData.journalTrans();
        RPayTrans        payTrans;

        super(_journalTransData);

        delete_from payTrans
            where payTrans.SourceTableId == tableNum(RPayJournalTrans)                      &&
                    payTrans.PayModuleCode == journalTableData.journalTable().JournalNameId   &&
                    payTrans.SourceRecId   == journalTrans.RecId                              &&
                    payTrans.CounterUnit   == journalTableData.journalTable().JournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPostEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs post-end operations.
    /// </summary>
    /// <returns>
    /// Returns run result (#runEnd)
    /// </returns>
    protected Integer runPostEnd()
    {
        RHRMOrderTable   orderTable;
        Integer ret;

        ret = super();

        if (ret)
        {
            orderTable = this.orderTable(true);
            if (orderTable)
            {
                orderTable.PayJournalNum = '';
                orderTable.update();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>