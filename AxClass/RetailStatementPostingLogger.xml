<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailStatementPostingLogger</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Application.Instrumentation;

/// <summary>
/// RetailStatementPostingLogger class is for logging various information in statement posting.
/// </summary>
class RetailStatementPostingLogger
{
    #localmacro.transactionParams
        %1.Channel,
        %1.transactionId,
        %1.custAccount,
        date2Str(%1.businessDate, 321, DateDay::Digits2, DateSeparator::Hyphen, DateMonth::Digits2, DateSeparator::Hyphen, DateYear::Digits4),
        %1.store,
        %1.terminal,
        int642Str(%1.BatchID),
        %1.currency,
        %1.statementId,
        enum2int(%1.type)
     #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>readTransactionStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log read transaction start.
    /// </summary>
    /// <param name = "transactionTable">The retail transaction buffer.</param>
    public static void readTransactionStart(RetailTransactionTable transactionTable)
    {
        ApplicationEventSource::EventWriteRetailOrderManagementReadTransactionStart(#transactionParams(transactionTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>readTransactionFinish</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log read transaction finish.
    /// </summary>
    /// <param name = "transactionTable">The retail transaction buffer.</param>
    public static void readTransactionFinish(RetailTransactionTable transactionTable)
    {
        ApplicationEventSource::EventWriteRetailOrderManagementReadTransactionStop(#transactionParams(transactionTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesOrderStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log create order start.
    /// </summary>
    /// <param name = "transactionTable">The retail transaction buffer.</param>
    public static void createSalesOrderStart(RetailTransactionTable transactionTable)
    {
        ApplicationEventSource::EventWriteRetailOrderManagementCreateSalesOrderStart(#transactionParams(transactionTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesOrderFinish</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log create sales order finish.
    /// </summary>
    /// <param name = "transactionTable">The retail transaction buffer.</param>
    public static void createSalesOrderFinish(RetailTransactionTable transactionTable)
    {
        ApplicationEventSource::EventWriteRetailOrderManagementCreateSalesOrderStop(#transactionParams(transactionTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceSalesOrderStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log invoice order start.
    /// </summary>
    /// <param name = "transactionTable">The retail transaction buffer.</param>
    public static void invoiceSalesOrderStart(RetailTransactionTable transactionTable)
    {
        ApplicationEventSource::EventWriteRetailOrderManagementInvoiceSalesOrderStart(#transactionParams(transactionTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceSalesOrderFinish</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log invoice sales order finish.
    /// </summary>
    /// <param name = "transactionTable">The retail transaction buffer.</param>
    public static void invoiceSalesOrderFinish(RetailTransactionTable transactionTable)
    {
        ApplicationEventSource::EventWriteRetailOrderManagementInvoiceSalesOrderStop(#transactionParams(transactionTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>postAggregatedTransactionStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log post aggregated transaction start.
    /// </summary>
    /// <param name = "statementId">Statement Id.</param>
    public static void postAggregatedTransactionStart(RetailStatementId statementId)
    {
        ApplicationEventSource::EventWriteRetailStatementPostingAggregationTaskStart(statementId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postAggregatedTransactionFinish</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log post aggregated transaction finish.
    /// </summary>
    /// <param name = "statementId">Statement Id.</param>
    public static void postAggregatedTransactionFinish(RetailStatementId statementId)
    {
        ApplicationEventSource::EventWriteRetailStatementPostingAggregationTaskStop(statementId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postNonAggregatedTransactionStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log post non-aggregated transaction start.
    /// </summary>
    /// <param name = "statementId">Statement Id.</param>
    public static void postNonAggregatedTransactionStart(RetailStatementId statementId)
    {
        ApplicationEventSource::EventWriteRetailStatementPostingNonAggregationTaskStart(statementId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postNonAggregatedTransactionFinish</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log post non-aggregated transaction finish.
    /// </summary>
    /// <param name = "statementId">Statement Id.</param>
    public static void postNonAggregatedTransactionFinish(RetailStatementId statementId)
    {
        ApplicationEventSource::EventWriteRetailStatementPostingNonAggregationTaskStop(statementId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>Info</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log a message.
    /// </summary>
    /// <param name = "message">Message to be logged.</param>
    public static void Info(str methodName, int lineNum, str message)
    {
        ApplicationEventSource::EventWriteRetailDebugInfo(methodName, lineNum, message);
    }

]]></Source>
			</Method>
			<Method>
				<Name>Error</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log an error.
    /// </summary>
    /// <param name = "message">Error message to be logged.</param>
    public static void Error(str methodName, int lineNum, str message)
    {
        ApplicationEventSource::EventWriteRetailDebugError(methodName, lineNum, message);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>