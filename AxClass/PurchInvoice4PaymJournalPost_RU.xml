<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchInvoice4PaymJournalPost_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchInvoice4PaymJournalPost_RU</c> class posts a purchase payment invoice journal.
/// </summary>
class PurchInvoice4PaymJournalPost_RU extends FormletterJournalPost
{
    PurchLine                   purchLine;
    PurchTable                  purchTable;

    PurchParmTable              purchParmTable;
    PurchParmLine               purchParmLine;

    PurchTotals                 purchTotals;

    VendInvoice4PaymJour_RU     invoice4PaymJour;
    VendInvoice4PaymTrans_RU    invoice4PaymTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToInventReportDimHistory</Name>
				<Source><![CDATA[
    protected void addToInventReportDimHistory(Common _journalline)
    {
        container dummy()
        {
            return [ _journalline ];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustAmountsMST_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts invoice for payment amounts.
    /// </summary>
    protected void adjustAmountsMST_W()
    {
        AmountAdjustEngineVendInvoice4Paym_W::adjustInvoiceJour(invoice4PaymJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPostTax</Name>
				<Source><![CDATA[
    protected boolean canPostTax()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    protected DocumentStatus documentStatus()
    {
        return DocumentStatus::Invoice4Paym_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines currency exchange rate of the invoice for payment.
    /// </summary>
    /// <returns>
    /// Currency exchange rate of the invoice for payment.
    /// </returns>
    protected ExchRate exchRate_W()
    {
        return invoice4PaymJour.ExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSec_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines secondary currency exchange rate of the invoice for payment.
    /// </summary>
    /// <returns>
    /// Secondary currency exchange rate of the invoice for payment.
    /// </returns>
    protected ExchrateSecondary exchRateSec_W()
    {
        return invoice4PaymJour.ExchRateSecondary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucher</Name>
				<Source><![CDATA[
    protected Num getVoucher()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        purchTable = invoice4PaymJour.purchTable();

        if (this.parmTotals())
        {
            purchTotals = this.parmTotals() as PurchTotals;
        }
        else
        {
            purchTotals = PurchTotals::newParmTable(purchParmTable,
                                                    this.parmSpecQty(),
                                                    purchParmTable.ParmId,
                                                    this.parmSumOrderId(),
                                                    this.documentStatus());

            purchTotals.calc();
        }

        this.tax(purchTotals.tax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormletterProvider</Name>
				<Source><![CDATA[
    protected void initFormletterProvider()
    {
        formletterProvider = FormletterProvider::newFormletterType(FormletterType::Purchase, purchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRelatedLineTables</Name>
				<Source><![CDATA[
    protected void initRelatedLineTables()
    {
        super();

        purchLine = PurchLine::findInventTransId(invoice4PaymTrans.InventTransId, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLine</Name>
				<Source><![CDATA[
    protected Common journalLine(Common _journalLine = invoice4PaymTrans)
    {
        invoice4PaymTrans = _journalLine as VendInvoice4PaymTrans_RU;
        return invoice4PaymTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLineTableId</Name>
				<Source><![CDATA[
    protected TableId journalLineTableId()
    {
        return tableNum(VendInvoice4PaymTrans_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalTable</Name>
				<Source><![CDATA[
    public Common parmJournalTable(Common _journalTable = invoice4PaymJour)
    {
        invoice4PaymJour = _journalTable as VendInvoice4PaymJour_RU;

        return invoice4PaymJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmTable</Name>
				<Source><![CDATA[
    public Common parmParmTable(Common _parmTable = purchParmTable)
    {
        purchParmTable = _parmTable as PurchParmTable;
        return purchParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupOnJour</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Posts the markup journal for the <c>PurchTable</c> table.
    /// </summary>
    /// <param name="_purchTable">
    ///    The <c>PurchTable</c> record.
    /// </param>
    protected void postMarkupOnJour(PurchTable _purchTable)
    {
        markup.postJournal(1,
                           purchTotals.purchOrderBalance(_purchTable.TableId, _purchTable.RecId),
                           _purchTable,
                           _purchTable.DefaultDimension,
                           invoice4PaymJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupOnTrans</Name>
				<Source><![CDATA[
    protected void postMarkupOnTrans()
    {
        markup.postJournal(purchParmLine.ReceiveNow,
                           purchParmLine.lineAmountExclTax(invoice4PaymJour.Invoice4PaymDate),
                           purchLine,
                           purchLine.DefaultDimension,
                           invoice4PaymTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupTable</Name>
				<Source><![CDATA[
    protected void postMarkupTable()
    {
        this.postMarkupOnJour(purchParmTable.purchTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTaxOnProforma</Name>
				<Source><![CDATA[
    protected boolean postTaxOnProforma()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTaxOnUpdate</Name>
				<Source><![CDATA[
    protected boolean postTaxOnUpdate()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceLine</Name>
				<Source><![CDATA[
    protected Common sourceLine()
    {
        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTable</Name>
				<Source><![CDATA[
    protected Common sourceTable()
    {
        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogTxt</Name>
				<Source><![CDATA[
    protected TransTxt transactionLogTxt()
    {
        return "@GLS112092";
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogType</Name>
				<Source><![CDATA[
    protected TransactionLogType  transactionLogType()
    {
        return TransactionLogType::PurchInvoice4Paym_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDate</Name>
				<Source><![CDATA[
    protected TransDate updateDate()
    {
        return invoice4PaymJour.Invoice4PaymDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeTaxAmount_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates GEEW tax fields of the invoice for payment lines.
    /// </summary>
    protected void writeTaxAmount_W()
    {
        VendInvoice4PaymTrans_RU trans;
        FormletterProformaPrint  formletterProformaPrint;

        if (! TaxParameters::find().TaxSpecifyLine)
            return;

        formletterProformaPrint = FormletterProformaPrint::construct();
        formletterProformaPrint.parmTax             (this.tax());
        formletterProformaPrint.parmExchRate_W      (this.exchRate_W());
        formletterProformaPrint.parmExchRateSec_W   (this.exchRateSec_W());
        formletterProformaPrint.writeTmpTaxWorkTrans(invoice4PaymJour.RecId);
        formletterProformaPrint.parmJournalTmpTaxWorkTrans().copyFromTax(
            this.tax(),
            invoice4PaymJour.RecId,
            invoice4PaymJour.TableId);

        TmpTaxWorkTrans tmpTaxWorkTransLocal;
        tmpTaxWorkTransLocal = formletterProformaPrint.tmpTaxWorkTrans(invoice4PaymJour.RecId);

        while select forupdate trans
            where trans.PurchId                == invoice4PaymJour.PurchId               &&
                  trans.Invoice4PaymId         == invoice4PaymJour.Invoice4PaymId        &&
                  trans.Invoice4PaymDate       == invoice4PaymJour.Invoice4PaymDate      &&
                  trans.NumberSequenceGroupId  == invoice4PaymJour.NumberSequenceGroupId &&
                  trans.InternalInvoice4PaymId == invoice4PaymJour.InternalInvoice4PaymId
        {
            trans.initFromTaxWorkTrans(
                tmpTaxWorkTransLocal,
                tableNum(PurchLine),
                0,
                trans.InventTransId);
            trans.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchInvoice4PaymJournalPost_RU construct()
    {
        return new PurchInvoice4PaymJournalPost_RU();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>