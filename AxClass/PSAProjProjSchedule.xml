<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PSAProjProjSchedule</Name>
	<SourceCode>
		<Declaration><![CDATA[
// Description : Used to schedule new created or modified project activity
class PSAProjProjSchedule
{
    container       m_cnDateTimeScope,m_cnDateTimeScopeDefault,m_cnDateTimeScopeEx;
    ProjTable       m_tProjLink,//the activity calls this class
                    m_tProj, //the activity processed by tha class
                    m_tProjModified; //the acitivity  modified by the user which causes this shcedule.
    NoYes           m_eIsPredecessor;
    container       m_cnLinkProjects,m_cnLinkProjectsEx;
    #TimeConstants
    #define.sequence1(1)
    #define.sequence2(2)
    #define.sequence3(3)
    #define.sequence4(4)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcDate</Name>
				<Source><![CDATA[
    // Description    : schedule the activity if its constraint type is FNET(finish no earlier than).
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean calcDate(date _startDate, date _endDate)
    {
        container cnDateTime,cnDateTime1,cnDateTimeFrom;
        timeOfDay tmTime,tmTimeFrom,tmTimeTo;
        date      dDate,dDateFrom,dDateTo;
        boolean   ret = true;

        if (_startDate || _endDate)
        {
            if (_startDate)
            {
                cnDateTime1 = PSAProjActivitySchedule::borderDay(SchedDirection::Forward,
                                                                 m_tProj.PSASchedCalendarId, _startDate);
                if (!cnDateTime1)
                {
                    return false;
                }
                tmTimeFrom = conpeek(cnDateTime1,#sequence2);
                dDateFrom  = conpeek(cnDateTime1,#sequence1);
            }
            else
            {
                cnDateTime = PSAProjActivitySchedule::borderDay(SchedDirection::Backward,
                                                                m_tProj.PSASchedCalendarId, _endDate);
                if (!cnDateTime)
                {
                    return false;
                }
                tmTime = conpeek(cnDateTime,#sequence2);
                dDate  = conpeek(cnDateTime,#sequence1);

                cnDateTimeFrom = PSAProjActivitySchedule::calculateDate(SchedDirection::Backward,
                                                                        m_tProj.PSASchedCalendarId, dDate, m_tProj.PSASchedDuration - 1, tmTime);
                if (!cnDateTimeFrom)
                {
                    return false;
                }
                tmTimeFrom = conpeek(cnDateTimeFrom,#sequence3);
                dDateFrom  = conpeek(cnDateTimeFrom,#sequence2);
            }
            tmTimeTo = maxInt();
            dDateTo  = maxDate();
            m_cnDateTimeScopeDefault =[dDateFrom,tmTimeFrom];
            ret = this.calculateIntersection(this.parmDateTimeScope(),[dDateFrom, tmTimeFrom, dDateTo, tmTimeTo]);
        }
        else
        {
            ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateIntersection</Name>
				<Source><![CDATA[
    // Description    : calcualte the 2 container's intersection ,the intersection will be stored in the activity datetime scope
    private boolean calculateIntersection(container _c1,container _c2)
    {
        container cnIntersection,cnDatetime;
        boolean   ret =true;

        if (PSAProjProjSchedule::compareDateTime(conpeek(_c1,#sequence1),conpeek(_c1,#sequence2),conpeek(_c2,#sequence1),conpeek(_c2,#sequence2)))
        {
            cnIntersection = cnIntersection + [conpeek(_c1,#sequence1),conpeek(_c1,#sequence2)];
        }
        else
        {
            cnIntersection = cnIntersection + [conpeek(_c2,#sequence1),conpeek(_c2,#sequence2)];
        }

        if (!PSAProjProjSchedule::compareDateTime(conpeek(_c1,#sequence3),conpeek(_c1,#sequence4),conpeek(_c2,#sequence3),conpeek(_c2,#sequence4)))
        {
            cnIntersection = cnIntersection + [conpeek(_c1,#sequence3),conpeek(_c1,#sequence4)];
        }
        else
        {
            cnIntersection = cnIntersection + [conpeek(_c2,#sequence3),conpeek(_c2,#sequence4)];
        }

        //avoid the end of the day and the start of the next day are intersected.
        if ((!WorkCalendarDate::calcDefinedSeconds(m_tProj.PSASchedCalendarId,
                                                 conpeek(cnIntersection,#sequence3),
                                                 conpeek(cnIntersection,#sequence4),
                                                 #secondsPerDay,
                                                 true,false)/#secondsPerHour) &&
           ((conpeek(cnIntersection,#sequence3)!= datenull()) && (conpeek(cnIntersection,#sequence3)!= datemax())))
        {
            cnDateTime = PSAProjProjSchedule::borderDay(SchedDirection::Forward,m_tProj.PSASchedCalendarId,conpeek(cnIntersection,#sequence3) + 1);
            if ((conpeek(cnIntersection,#sequence1) == conpeek(cnDateTime,#sequence1)) &&
                (conpeek(cnIntersection,#sequence2) == conpeek(cnDateTime,#sequence2)))
            {
                cnIntersection = [conpeek(cnDateTime,#sequence1),conpeek(cnDateTime,#sequence2),conpeek(cnDateTime,#sequence1),conpeek(cnDateTime,#sequence2)];
            }
        }
        if (!PSAProjProjSchedule::compareDateTime(conpeek(cnIntersection,#sequence3),conpeek(cnIntersection,#sequence4),conpeek(cnIntersection,#sequence1),conpeek(cnIntersection,#sequence2)))
        {
            ret =  checkFailed("@PSA3336");
        }
        else
        {
            this.parmDateTimeScope(cnIntersection);
            if (PSAProjProjSchedule::compareDateTime(conPeek(m_cnDateTimeScopeDefault,#sequence1),conPeek(m_cnDateTimeScopeDefault,#sequence2),
                conPeek(m_cnDateTimeScope,#sequence3),conPeek(m_cnDateTimeScope,#sequence4)))
            {
                m_cnDateTimeScopeDefault =[conPeek(m_cnDateTimeScope,#sequence3),conPeek(m_cnDateTimeScope,#sequence4)];
            }
            else
            {
                if (!PSAProjProjSchedule::compareDateTime(conPeek(m_cnDateTimeScopeDefault,#sequence1),conPeek(m_cnDateTimeScopeDefault,#sequence2),
                conPeek(m_cnDateTimeScope,#sequence1),conPeek(m_cnDateTimeScope,#sequence2)))
                {
                   m_cnDateTimeScopeDefault =[conPeek(m_cnDateTimeScope,#sequence1),conPeek(m_cnDateTimeScope,2)];
                }
                else
                {
                    if (conPeek(m_cnDateTimeScope,#sequence1) == datenull())
                    {
                        return ret;
                    }
                    m_cnDateTimeScopeDefault =[conPeek(m_cnDateTimeScope,#sequence1),conPeek(m_cnDateTimeScope,2)];
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateTimeScope</Name>
				<Source><![CDATA[
    // Description    : read or write the parameter m_cnDateTimeScope.
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container parmDateTimeScope(container  _dateTimeScope = m_cnDateTimeScope)
    {
        m_cnDateTimeScope = _dateTimeScope;
        return m_cnDateTimeScope;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateTimeScopeEx</Name>
				<Source><![CDATA[
    // Description    : read or write the parameter m_cnDateTimeScopeEx.
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container parmDateTimeScopeEx(container  _dateTimeScope = m_cnDateTimeScopeEx)
    {
        m_cnDateTimeScopeEx = _dateTimeScope;
        return m_cnDateTimeScopeEx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLinkProjects</Name>
				<Source><![CDATA[
    // Description    : read or write the parameter m_cnLinkActivities.
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container parmLinkProjects(container  _linkProjects = m_cnLinkProjects)
    {
        m_cnLinkProjects = _linkProjects;
        return m_cnLinkProjects;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleProj</Name>
				<Source><![CDATA[
    // Description    : the main procedure for scheduling the activity
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean scheduleProj(ProjTable  _projTable, Date _startDate, date _endDate = dateNull())
    {
        boolean             ret = true;
        Container           cnLatestDateTime;
        WorkCalendarDate    tWorkCalendarDate;
        ProjId              sProjId;
        container           dateTimeScopeEx = [DateNull(),0,MaxDate(),MaxInt()];

        m_tProj         = _projTable;
        m_tProjModified = m_tProj.data();
        if (!m_tProj.PSASchedCalendarId)
        {
            ret=checkfailed(strfmt("@PSA3435",m_tProj.ProjId));
            return ret;
        }

        select firstonly recId from tWorkCalendarDate
            where tWorkCalendarDate.CalendarId  == m_tProj.PSASchedCalendarId;

        if (!tWorkCalendarDate)
        {
            return checkfailed(strfmt("@PSA3334",m_tProj.ProjId,m_tProj.PSASchedCalendarId));
        }

        if (m_tProj.PSASchedStartDate)
        {
            cnLatestDateTime =  [m_tProj.PSASchedStartDate,0];
        }
        else
        {
             cnLatestDateTime = [DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),0];
        }

        this.parmDateTimeScope(dateTimeScopeEx);

        ret = this.calcDate(_startDate, _endDate);

        if (ret)
        {
            this.setDateTime();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDateTime</Name>
				<Source><![CDATA[
    // Description    : determine the activity date,time according to the time scope.
    private boolean setDateTime()
    {
        container       cnDateTime,cnDateTime1;
        timeOfDay       tmTimeFrom,tmTimeTo;
        date            dDateFrom,dDateTo;
        boolean         ret = true;

        dDateFrom  = conPeek(m_cnDateTimeScope,#sequence1);
        tmTimeFrom = conPeek(m_cnDateTimeScope,#sequence2);

        //avoid to set the end of a day as the  start time
        if ((!WorkCalendarDate::calcDefinedSeconds(m_tProj.PSASchedCalendarId,
                                                  dDateFrom,
                                                  tmTimeFrom,
                                                  #secondsPerDay,
                                                  true,false)/#secondsPerHour) &&
        (m_tProj.PSASchedDuration))
        {
            cnDateTime1 = PSAProjProjSchedule::borderDay(SchedDirection::Forward, m_tProj.PSASchedCalendarId, dDateFrom + 1);
            tmTimeFrom  = conpeek(cnDateTime1,#sequence2);
            dDateFrom   = conpeek(cnDateTime1,#sequence1);
        }

        cnDateTime = PSAProjProjSchedule::calculateDate(SchedDirection::Forward,
                                                        m_tProj.PSASchedCalendarId, dDateFrom,m_tProj.PSASchedDuration-1, tmTimeFrom);

        if (!cnDateTime)
        {
            return false;
        }
        tmTimeTo  = conpeek(cnDateTime,#sequence3);
        dDateTo   = conpeek(cnDateTime,#sequence2);

        tmTimeFrom  = PSAProjProjSchedule::schedTime(SchedDirection::Backward,m_tProj.PSASchedCalendarId,dDateFrom,0);

        if (m_tProj.PSASchedDuration)
        {
            tmTimeTo = PSAProjProjSchedule::schedTime(SchedDirection::Forward,m_tProj.PSASchedCalendarId,dDateTo,0);
        }
        else
        {
            tmTimeTo = tmTimeFrom;
        }
        m_tProj.PSASchedStartDate   = dDateFrom;
        m_tProj.PSASchedFromTime    = tmTimeFrom;
        m_tProj.PSASchedEndDate     = dDateTo;
        m_tProj.PSASchedToTime      = tmTimeTo;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParentProjectDate</Name>
				<Source><![CDATA[
    //the start and end dates of a parent project should reflect the start of the first task and the end of the last task--resource scheduling enhancement*/
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void updateParentProjectDate(ProjId _projId,TransDate _startDate,TransDate _endDate)
    {
        ProjTable       tProjTable,tProjTableRange,tProjUpdate,tProjParent;
        TransDate       tStartDate,tEndDate;

        tProjTable = ProjTable::find(_ProjId);
        select minof(PSASchedStartDate),maxof(PSASchedEndDate) from tProjTableRange where tProjTableRange.ParentId == _projId;

        tStartDate = tProjTableRange.PSASchedStartDate;
        tEndDate   = tProjTableRange.PSASchedEndDate;

        if (_startDate<tStartDate || tStartDate == datenull())
        {
            tStartDate = _startDate;
        }

        if (_endDate>tEndDate || tEndDate ==datenull())
        {
            tEndDate = _endDate;
        }

        if ((tProjTable.PSASchedStartDate !=  tStartDate)
           ||(tProjTable.PSASchedEndDate != tEndDate))
        {
            ttsbegin;
            tProjUpdate = ProjTable::find(_ProjId,true);
            tProjUpdate.PSASchedStartDate = tStartDate;
            tProjUpdate.StartDate         = tStartDate;
            tProjUpdate.PSASchedEndDate   = tEndDate;
            tProjUpdate.EndDate           = tEndDate;
            tProjUpdate.PSASchedDuration  = this.updateProjectDuration(tProjUpdate.PSASchedCalendarId,tProjUpdate.PSASchedStartDate,tProjUpdate.PSASchedEndDate);

            tProjUpdate.update();

            ttscommit;

            // begin for parents

            tProjParent = ProjTable::find(tProjTable.ParentId);
            While (tProjParent.RecId!=0)
            {
                select minof(PSASchedStartDate),maxof(PSASchedEndDate) from tProjTableRange where tProjTableRange.ParentId == tProjParent.ProjId;

               tStartDate = tProjTableRange.PSASchedStartDate;
               tEndDate   = tProjTableRange.PSASchedEndDate;

                if (_startDate<tStartDate || tStartDate == datenull())
                {
                    tStartDate = _startDate;
                }

                if (_endDate>tEndDate || tEndDate ==datenull())
                {
                    tEndDate = _endDate;
                }
                    ttsbegin;
                    tProjUpdate = ProjTable::find(tProjParent.ProjId,true);
                    tProjUpdate.PSASchedStartDate = tStartDate;
                    tProjUpdate.StartDate         = tStartDate;
                    tProjUpdate.PSASchedEndDate   = tEndDate;
                    tProjUpdate.EndDate           = tEndDate;
                    tProjUpdate.PSASchedDuration  = this.updateProjectDuration(tProjUpdate.PSASchedCalendarId,tProjUpdate.PSASchedStartDate,tProjUpdate.PSASchedEndDate);

                    tProjUpdate.update();

                    ttscommit;

                 tProjParent = ProjTable::find(tProjParent.ParentId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjectDuration</Name>
				<Source><![CDATA[
    // update the duration when date is changed-resource scheduling enhancement
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    RealBase updateProjectDuration(CalendarId _calendarId,TransDate _startDate,TransDate _endDate)
    {
        TransDate         tCalDate = _startDate;
        RealBase          rDuration;

        while (tCalDate<=_endDate)
        {
            if (WorkCalendarDate::isDateOpen(_calendarId,tCalDate))
            {
                rDuration++;
            }
            tCalDate++;
        }

        return rDuration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>borderDay</Name>
				<Source><![CDATA[
    // Description    : calculate the border working  time of a day
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static container borderDay(SchedDirection      _schedDirection,
                                      CalendarId          _calendarId,
                                      TransDate           _transDate,
                                      timeOfDay          _startTime = 0
                                     )
    {
        #define.loopBreak(365)

        integer         iLoopCounter;
        SchedFromDate   dSchedStartDate;
        SchedFromTime   tmSchedStartTime;
        Hours           rWorkHours = 0;

        dSchedStartDate = _transDate;
        if (_transDate == dateMax())
        {
            return [maxDate(),maxInt(),rWorkHours];
        }
        if (_startTime == 0)
        {
            do
            {
                if (!WorkCalendarDate::checkExist(_calendarId, dSchedStartDate))
                {
                    return connull();
                }
                if (WorkCalendarDate::isDateOpen(_calendarId, dSchedStartDate))
                {
                    if (WorkCalendarDate::calcDefinedSeconds(_calendarId,
                                                            dSchedStartDate,
                                                            0,
                                                            #secondsPerDay,
                                                            true,false)/#secondsPerHour)
                    {
                        break;
                    }
                }
                iLoopCounter++;
                if (_schedDirection == SchedDirection::Forward)
                {
                    dSchedStartDate++;
                }
                else
                {
                    dSchedStartDate--;
                }
            }
            while (iLoopCounter < #loopBreak);

            rWorkHours = WorkCalendarDate::calcDefinedSeconds(_calendarId,
                                                              dSchedStartDate,
                                                              0,
                                                              #secondsPerDay,
                                                              true,false)/#secondsPerHour;

            tmSchedStartTime = PSAProjProjSchedule::schedTime(_schedDirection,_calendarId, dSchedStartDate, rWorkHours);
        }
        else
        {
            do
            {
                if (!WorkCalendarDate::checkExist(_calendarId, dSchedStartDate))
                {
                    return connull();
                }

                if (WorkCalendarDate::isDateOpen(_calendarId, dSchedStartDate))
                {
                        break;
                }

                iLoopCounter++;
                if (_schedDirection == SchedDirection::Forward)
                {
                    dSchedStartDate++;
                }
                else
                {
                    dSchedStartDate--;
                }
            }
            while (iLoopCounter < #loopBreak);
            if (_schedDirection == SchedDirection::Backward)
            {
                rWorkHours = WorkCalendarDate::calcDefinedSeconds(_calendarId,
                                                                  dSchedStartDate,
                                                                  0,
                                                                  #secondsPerDay,
                                                                  true,false)/#secondsPerHour
                            - WorkCalendarDate::calcDefinedSeconds(_calendarId,
                                                                   dSchedStartDate,
                                                                   _startTime,
                                                                   #secondsPerDay,
                                                                   true,false)/#secondsPerHour;
            }
            else
            {
                rWorkHours = WorkCalendarDate::calcDefinedSeconds(_calendarId,
                                                                  dSchedStartDate,
                                                                  _startTime,
                                                                  #secondsPerDay,
                                                                  true,false)/#secondsPerHour;
            }
            tmSchedStartTime = _startTime;
        }

        return [dSchedStartDate, 0, rWorkHours];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDate</Name>
				<Source><![CDATA[
    // Description    : calculate the date according the border day ,time,the duration.
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static container calculateDate(SchedDirection _schedDirection,
                                   CalendarId       _calendarId,
                                   date             _startDate,
                                   Real          _duration,
                                   timeOfDay        _startTime = 0
                                  )
    {
        date                    dStartDate,dEndDate;
        timeOfDay               tmStartTime;
        timeOfDay               tmEndTime;
        Hours                   rRemaHours;
        container               cnBorderDay,cnScheDate;

        if (_startDate != maxDate() && _startDate != DateNull() )
        {
            cnBorderDay = PSAProjProjSchedule::borderDay(_schedDirection,_calendarId,_startDate,_startTime);
            if (!cnBorderDay)
            {
                return connull();
            }
            [dStartDate,tmStartTime,rRemaHours]= cnBorderDay;

            if (!_duration)
            {
                return [0,dStartDate,0];
            }

            cnScheDate = PSAProjProjSchedule::schedDate(_schedDirection, dStartDate, rRemaHours, _duration, _calendarId);

            if (!cnScheDate)
            {
                return connull();
            }
            [dEndDate, tmEndTime,rRemaHours] = cnScheDate;

            return [0,dEndDate,0];
        }
        else
        {
            return [0,_startDate,0];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>compareDateTime</Name>
				<Source><![CDATA[
    // Description    : compare two sets of day and time
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static Noyes compareDateTime(date _date,timeOfDay _time,date _date1,timeOfDay _time1)
    {
        if (_date != _date1)
        {
            return(_date > _date1);
        }
        else
        {
            return(_time >= _time1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSchedule</Name>
				<Source><![CDATA[
    // Description    :  create a new instance of the class PSAProjActivitySchedule
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static PSAProjProjSchedule  newSchedule()
    {
        return new PSAProjProjSchedule();
    }

]]></Source>
			</Method>
			<Method>
				<Name>schedDate</Name>
				<Source><![CDATA[
    // Description    : calculate the date according the from day ,the remaining time of the day,the duration.
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static container schedDate(SchedDirection      _schedDirection,
                               SchedFromDate       _schedDateFrom,
                               Hours               _remaHoursOnEndDate,
                               Real                _task,
                               CalendarId          _calendarId)
    {
        #TimeConstants
        SchedDate     dSchedEndDate;
        Hours         rRemainHours = 0;
        integer       iLoopCounter;
        Hours         rRemaHoursOnEndDate;
        Real          rTask;

        #define.loopBreak(1000)

        dSchedEndDate = _schedDateFrom;
        rRemaHoursOnEndDate = _remaHoursOnEndDate;
        rTask = _task ;

        if (rRemaHoursOnEndDate == 0)
        {
            if (_schedDirection == SchedDirection::Forward)
            {
                dSchedEndDate++;
            }
            else
            {
                dSchedEndDate--;
            }
        }

        while (rtask)
        {
            if (_schedDirection == SchedDirection::Forward)
            {
                dSchedEndDate++;
            }
            else
            {
                dSchedEndDate--;
            }
            if (WorkCalendarDate::isDateOpen(_calendarId,dSchedEndDate))
            {
                rtask--;
            }
            iLoopCounter++;
            if (iLoopCounter > #loopBreak)
            {
                dSchedEndDate = _schedDateFrom;
                break;
            }
        }

        return  [dSchedEndDate, 0, 0];
    }

]]></Source>
			</Method>
			<Method>
				<Name>schedTime</Name>
				<Source><![CDATA[
    // Description    : calculate the end time according the working day ,the remaining time of the day.
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static timeOfDay schedTime(SchedDirection      _schedDirection,
                               CalendarId          _calendarId,
                               TransDate           _transDate,
                               Hours               _remaHours)
    {
        #TimeConstants
        WorkCalendarDateLine    tWorkCalendarDateLine;
        Hours                   rHoursPerDay, rOccuHours;
        timeOfDay               tmToTime;

        rHoursPerDay = WorkCalendarDate::calcDefinedSeconds(_calendarId,
                                                           _transDate,
                                                           0,
                                                           #secondsPerDay,
                                                           true,false)/#secondsPerHour;

        rOccuHours = rHoursPerDay - _remaHours;

        if (_schedDirection == SchedDirection::Forward)
        {
            while select tWorkCalendarDateLine
                index CalendarDateFromIdx
                where tWorkCalendarDateLine.CalendarId       == _calendarId   &&
                      tWorkCalendarDateLine.TransDate        == _transDate
            {
                if ((tWorkCalendarDateLine.toTime - tWorkCalendarDateLine.FromTime)/#secondsPerHour >= rOccuHours)
                {
                    tmToTime = real2int(tWorkCalendarDateLine.FromTime + rOccuHours * #secondsPerHour);
                    break;
                }
                else
                {
                    rOccuHours = rOccuHours - (tWorkCalendarDateLine.toTime - tWorkCalendarDateLine.FromTime)/#secondsPerHour;
                }
            }
        }
        else
        {
            while select toTime,FromTime from tWorkCalendarDateLine
                order by FromTime desc
                where tWorkCalendarDateLine.CalendarId       == _calendarId   &&
                      tWorkCalendarDateLine.TransDate        == _transDate
            {
                if ((tWorkCalendarDateLine.toTime - tWorkCalendarDateLine.FromTime)/#secondsPerHour >= rOccuHours)
                {
                    tmToTime = real2int(tWorkCalendarDateLine.toTime - rOccuHours * #secondsPerHour);
                    break;
                }
                else
                {
                    rOccuHours = rOccuHours - (tWorkCalendarDateLine.toTime - tWorkCalendarDateLine.FromTime)/#secondsPerHour;
                }
            }
        }
        return tmToTime;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>