<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BookTransCalc_Sales_OnDeliveryExp_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class BookTransCalc_Sales_OnDeliveryExp_RU extends BookTransCalc_Sales_RU
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc()
    {
        if (this.isRestoredVAT())
        {
            this.processRestoredVAT();
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLogTrans</Name>
				<Source><![CDATA[
    protected container createLogTrans(TransDate                    _settlementDate,
                                       RefRecId                     _transRecid,
                                       RefRecId                     _offsetRecId,
                                       CompanyId                    _transCompany,
                                       CompanyId                    _offsetCompany,
                                       RefRecId                     _settlementRecId,
                                       RefRecId                     _processLogTransRecId,
                                       SalesPurchBookTransType_RU   _transType,
                                       Map                          _settledAmounts,
                                       Map                          _mapFactureAmountsDetails,
                                       SalesBookVATRestoringType_RU _restoringType = SalesBookVATRestoringType_RU::None)
    {
        MapEnumerator                mapEnumerator;
        TaxCode                      taxCode;
        DimensionDefault             defaultDimension;
        BookStructSmallVATAmounts_RU usedAmounts,
                                     blockedAmounts,
                                     settledAmounts,
                                     factureAmounts;
        BookStructVATAmounts_RU      totalUsedAmounts, totalSettledAmounts;
        InventTransId                inventTransId;
        InvoiceId                    invoiceId;
        NumberSequenceGroupId        numberSequenceGroupId;
        PurchInternalInvoiceId       internalInvoiceId;
        SalesBookProcessingType_RU   processingType = SalesBookVATProcessLogTrans_RU::factureType2type(factureJour.ProcessingType);

        mapEnumerator        = _settledAmounts.getEnumerator();
        totalSettledAmounts  = new BookStructVATAmounts_RU();
        totalUsedAmounts     = new BookStructVATAmounts_RU();

        while (mapEnumerator.moveNext())
        {
            [taxCode, defaultDimension, inventTransId, internalInvoiceId, invoiceId, numberSequenceGroupId] = mapEnumerator.currentKey();
            settledAmounts = BookStructSmallVATAmounts_RU::create(mapEnumerator.currentValue());

            totalSettledAmounts.addSmallAmounts2(taxCode, settledAmounts);

            factureAmounts = BookStructSmallVATAmounts_RU::create(_mapFactureAmountsDetails.lookup([taxCode,
                                                                                                    defaultDimension,
                                                                                                    inventTransId,
                                                                                                    internalInvoiceId,
                                                                                                    invoiceId,
                                                                                                    numberSequenceGroupId]));

            usedAmounts    = SalesBookVATProcessLogTransOper_RU::usedAmounts_OnDelivery(factureJour.FactureId,
                                                                                        taxCode,
                                                                                        defaultDimension,
                                                                                        inventTransId,
                                                                                        _transRecid,
                                                                                        _transCompany,
                                                                                        false,
                                                                                        processingType,
                                                                                        NoYes::No,
                                                                                        dateNull(),
                                                                                        _restoringType);

            totalUsedAmounts.addSmallAmounts2(taxCode, usedAmounts);

            blockedAmounts = SalesBookVATProcessLogTransOper_RU::usedAmounts_OnDelivery(factureJour.FactureId,
                                                                                        taxCode,
                                                                                        defaultDimension,
                                                                                        inventTransId,
                                                                                        _transRecid,
                                                                                        _transCompany,
                                                                                        true,
                                                                                        processingType,
                                                                                        NoYes::No,
                                                                                        dateNull(),
                                                                                        _restoringType);

            TmpSalesBookVATProcessLogTransOper_RU::createLines(tmpProcessLogTransOper,
                                                               factureJour.FactureId,
                                                               max(_settlementDate, factureJour.FactureDate),
                                                               operationRecId,
                                                               defaultDimension,
                                                               taxCode,
                                                               inventTransId,
                                                               _transType,
                                                               factureAmounts,
                                                               settledAmounts,
                                                               usedAmounts,
                                                               blockedAmounts,
                                                               processingType,
                                                               _transRecid,
                                                               _offsetRecId,
                                                               _transCompany,
                                                               _offsetCompany,
                                                               _settlementRecId,
                                                               _processLogTransRecId,
                                                               closingDate,
                                                               _settlementDate,
                                                               _restoringType);
        }

        return [totalSettledAmounts.pack(), totalUsedAmounts.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRestoredVAT</Name>
				<Source><![CDATA[
    protected boolean isRestoredVAT()
    {
        return factureJour.Module == FactureModule_RU::Vend               ||
               factureJour.Module == FactureModule_RU::Empl               ||
               factureJour.Module == FactureModule_RU::TaxCorrectionPurch ||
               factureJour.Module == FactureModule_RU::TaxCorrectionPurch_Cust;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processFacture</Name>
				<Source><![CDATA[
    protected void processFacture()
    {
        FactureCalcBalances_OnDelivery_RU    factureCalcBalances = new FactureCalcBalances_OnDelivery_RU(factureJour);
        CountryGTD_RU                        countryGTD;
        container                            totalAmounts;
        BookStructVATAmounts_RU              totalFactureAmounts, totalUsedAmounts, totalSettledAmounts;
        Map                                  mapMapFactureAmounts, mapFactureAmountsDetails;
        MapEnumerator                        mapEnumerator;
        CompanyId                            curCompany = curext();

        factureCalcBalances.calc();

        mapMapFactureAmounts = factureCalcBalances.mapMapFactureAmounts();
        mapEnumerator        = mapMapFactureAmounts.getEnumerator();

        while (mapEnumerator.moveNext())
        {
            totalFactureAmounts      = BookStructVATAmounts_RU::create(factureCalcBalances.mapFactureAmounts().lookup(mapEnumerator.currentKey()));
            mapFactureAmountsDetails = Map::create(mapEnumerator.currentValue());

            countryGTD = this.appendGtd(CustTrans::find(mapEnumerator.currentKey()));

            TmpSalesBookVATProcessLogTrans_RU::createLine(salesPurchBookDataMap,
                                                          factureJour,
                                                          dateNull(),
                                                          factureJour.SettlementDate ? factureJour.SettlementDate : dateNull(),
                                                          this.findCustVendName(factureJour.Module, factureJour.CustVendInvoiceAccount),
                                                          countryGTD,
                                                          SalesPurchBookTransType_RU::Facture,
                                                          mapEnumerator.currentKey(),
                                                          factureJour.PaymentRecID ? factureJour.PaymentRecID : 0,
                                                          tableNum(CustTrans),
                                                          curCompany,
                                                          curCompany,
                                                          factureJour.SettlementRecId ? factureJour.SettlementRecId : 0);

            totalAmounts = this.createLogTrans(factureJour.SettlementDate ? factureJour.SettlementDate : dateNull(),
                                               mapEnumerator.currentKey(),
                                               factureJour.PaymentRecID ? factureJour.PaymentRecID : 0,
                                               curCompany,
                                               curCompany,
                                               factureJour.SettlementRecId ? factureJour.SettlementRecId : 0,
                                               salesPurchBookDataMap.RecId,
                                               SalesPurchBookTransType_RU::Facture,
                                               mapFactureAmountsDetails,
                                               mapFactureAmountsDetails);

            totalSettledAmounts  = BookStructVATAmounts_RU::create(conPeek(totalAmounts, 1));
            totalUsedAmounts     = BookStructVATAmounts_RU::create(conPeek(totalAmounts, 2));

            TmpSalesBookVATProcessLogTrans_RU::updateLine(salesPurchBookDataMap,
                                                          totalFactureAmounts,
                                                          totalSettledAmounts,
                                                          totalUsedAmounts,
                                                          fromDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInvoice</Name>
				<Source><![CDATA[
    protected void processInvoice()
    {
        FactureCalcBalances_OnDelivery_RU    factureCalcBalances = new FactureCalcBalances_OnDelivery_RU(factureJour);
        CountryGTD_RU                        countryGTD;
        container                            totalAmounts;
        BookStructVATAmounts_RU              totalFactureAmounts, totalUsedAmounts, totalSettledAmounts;
        Map                                  mapMapFactureAmounts, mapFactureAmountsDetails;
        MapEnumerator                        mapEnumerator;
        CompanyId                            curCompany = curext();
        SalesPurchBookTransType_RU           transType;

        factureCalcBalances.calc();

        mapMapFactureAmounts = factureCalcBalances.mapMapFactureAmounts();
        mapEnumerator        = mapMapFactureAmounts.getEnumerator();

        while (mapEnumerator.moveNext())
        {
            totalFactureAmounts      = BookStructVATAmounts_RU::create(factureCalcBalances.mapFactureAmounts().lookup(mapEnumerator.currentKey()));
            mapFactureAmountsDetails = Map::create(mapEnumerator.currentValue());

            countryGTD = this.appendGtd(CustTrans::find(mapEnumerator.currentKey()));

            transType = totalFactureAmounts.amountInclVAT() > 0 ? SalesPurchBookTransType_RU::Invoice   :
                                                                  SalesPurchBookTransType_RU::CreditNote;

            TmpSalesBookVATProcessLogTrans_RU::createLine(salesPurchBookDataMap,
                                                          factureJour,
                                                          dateNull(),
                                                          factureJour.SettlementDate ? factureJour.SettlementDate : dateNull(),
                                                          this.findCustVendName(factureJour.Module, factureJour.CustVendInvoiceAccount),
                                                          countryGTD,
                                                          transType,
                                                          mapEnumerator.currentKey(),
                                                          factureJour.PaymentRecID ? factureJour.PaymentRecID : 0,
                                                          tableNum(CustTrans),
                                                          curCompany,
                                                          curCompany,
                                                          factureJour.SettlementRecId ? factureJour.SettlementRecId : 0);

            totalAmounts = this.createLogTrans(factureJour.SettlementDate ? factureJour.SettlementDate : dateNull(),
                                               mapEnumerator.currentKey(),
                                               factureJour.PaymentRecID ? factureJour.PaymentRecID : 0,
                                               curCompany,
                                               curCompany,
                                               factureJour.SettlementRecId ? factureJour.SettlementRecId : 0,
                                               salesPurchBookDataMap.RecId,
                                               transType,
                                               mapFactureAmountsDetails,
                                               mapFactureAmountsDetails);

            totalSettledAmounts  = BookStructVATAmounts_RU::create(conPeek(totalAmounts, 1));
            totalUsedAmounts     = BookStructVATAmounts_RU::create(conPeek(totalAmounts, 2));

            TmpSalesBookVATProcessLogTrans_RU::updateLine(salesPurchBookDataMap,
                                                          totalFactureAmounts,
                                                          totalSettledAmounts,
                                                          totalUsedAmounts,
                                                          fromDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRestoredVAT</Name>
				<Source><![CDATA[
    protected void processRestoredVAT()
    {
        FactureCalcBalances_OnDelivery_RU    factureCalcBalances = new FactureCalcBalances_OnDelivery_RU(factureJour);
        CountryGTD_RU                        countryGTD;
        container                            totalAmounts;
        container                            key;
        BookStructVATAmounts_RU              totalFactureAmounts      = new BookStructVATAmounts_RU();
        BookStructVATAmounts_RU              totalUsedAmounts         = new BookStructVATAmounts_RU();
        BookStructVATAmounts_RU              totalSettledAmounts      = new BookStructVATAmounts_RU();
        Map                                  mapFactureAmountsDetails = new Map(Types::Container, Types::Container);
        Map                                  mapMapFactureAmounts     = new Map(typeName2Type(extendedTypeStr(RecId)), Types::Container);
        Map                                  mapMapRestoredAmounts;
        MapEnumerator                        mapEnumerator;
        MapEnumerator                        enumerator;
        RestoredVATLogTable_RU               restoredVATLogTable;
        RestoredVATLogTrans_RU               restoredVATLogTrans;
        RestoredVATLogTransOper_RU           restoredVATLogTransOper;
        VendInvoiceJour                      vendInvoiceJour;
        VendTrans                            vendTrans;
        TaxCode                              taxCode;
        DimensionDefault                     dim;
        BookStructSmallVATAmounts_RU         structAmounts;
        CustVendTransPostingLog_RU           postingLog;
        CompanyId                            curCompany = curext();

        void addRestoredAmounts(SalesBookVATRestoringType_RU _restoringType)
        {
            TaxAmountVAT_RU taxAmount;
            Map             mapRestoredAmounts;
            Factor          factor;

            switch (_restoringType)
            {
                case SalesBookVATRestoringType_RU::Export        :
                    taxAmount = restoredVATLogTransOper.TaxAmount;
                    break;
                case SalesBookVATRestoringType_RU::NotLiableToVAT :
                    taxAmount = restoredVATLogTransOper.TaxAmountNotLiable;
                    break;
                case SalesBookVATRestoringType_RU::AssetDisposal :
                    taxAmount = restoredVATLogTransOper.TaxAmountWrittenOff;
                    break;
            }

            if (! taxAmount)
                return;

            factor = taxAmount / (restoredVATLogTransOper.TaxAmount          +
                                  restoredVATLogTransOper.TaxAmountNotLiable +
                                  restoredVATLogTransOper.TaxAmountWrittenOff);

            if (mapMapRestoredAmounts.exists(_restoringType))
            {
                mapRestoredAmounts = mapMapRestoredAmounts.lookup(_restoringType);
            }
            else
            {
                mapRestoredAmounts = new Map(Types::Container, Types::Container);
            }

            if (mapRestoredAmounts.exists(key))
            {
                structAmounts = BookStructSmallVATAmounts_RU::create(mapRestoredAmounts.lookup(key));
            }
            else
            {
                structAmounts = new BookStructSmallVATAmounts_RU();
                structAmounts.itemName(restoredVATLogTransOper.ItemName);
            }

            structAmounts.addAmounts(CurrencyExchangeHelper::amount(restoredVATLogTransOper.AmountLiableToVAT * factor) +
                                     CurrencyExchangeHelper::amount(taxAmount),
                                     CurrencyExchangeHelper::amount(restoredVATLogTransOper.AmountLiableToVAT * factor),
                                     CurrencyExchangeHelper::amount(taxAmount),
                                     restoredVATLogTransOper.QtySettled);

            mapRestoredAmounts.insert(key, structAmounts.pack());

            mapMapRestoredAmounts.insert(_restoringType, mapRestoredAmounts);
        }
        ;

        switch (factureJour.FactureType)
        {
            case FactureType_RU::Invoice :
                factureCalcBalances.calc();
                mapMapFactureAmounts = factureCalcBalances.mapMapFactureAmounts();
                break;

            case FactureType_RU::AdvanceAdjustment :
                select firstonly postingLog
                    where postingLog.RecId == factureJour.PostingLogRecId;
                //no break!

            case FactureType_RU::AdvanceReport :
            case FactureType_RU::TaxCorrection :
                enumerator = FactureJour_RU::factureAmounts(factureJour).getEnumerator();

                while (enumerator.moveNext())
                {
                    [taxCode, dim] = enumerator.currentKey();

                    structAmounts = mapFactureAmountsDetails.exists([taxCode, dim, '', '', '', ''])                                       ?
                                    BookStructSmallVATAmounts_RU::create(mapFactureAmountsDetails.lookup([taxCode, dim, '', '', '', ''])) :
                                    new BookStructSmallVATAmounts_RU();

                    structAmounts.addAmounts2(BookStructSmallVATAmounts_RU::create(enumerator.currentValue()));

                    mapFactureAmountsDetails.insert([taxCode, dim, '', '', '', ''], structAmounts.pack());
                }

                mapMapFactureAmounts.insert(postingLog.TransRecId, mapFactureAmountsDetails.pack());
                break;
        }

        mapEnumerator = mapMapFactureAmounts.getEnumerator();

        while (mapEnumerator.moveNext())
        {
            mapFactureAmountsDetails = Map::create(mapEnumerator.currentValue());
            mapMapRestoredAmounts    = new Map(Types::Enum, Types::Class);

            if (factureJour.FactureType == FactureType_RU::Invoice)
            {
                totalFactureAmounts = BookStructVATAmounts_RU::create(factureCalcBalances.mapFactureAmounts().lookup(mapEnumerator.currentKey()));
            }
            else
            {
                totalFactureAmounts = new BookStructVATAmounts_RU();

                enumerator = mapFactureAmountsDetails.getEnumerator();
                while (enumerator.moveNext())
                {
                    [taxCode] = enumerator.currentKey();
                    totalFactureAmounts.addSmallAmounts2(taxCode, BookStructSmallVATAmounts_RU::create(enumerator.currentValue()));
                }
            }

            totalFactureAmounts.isGroupBy(true);

            countryGTD = this.appendGtd(CustTrans::find(mapEnumerator.currentKey()));

            TmpSalesBookVATProcessLogTrans_RU::createLine(salesPurchBookDataMap,
                                                          factureJour,
                                                          dateNull(),
                                                          dateNull(),
                                                          this.findCustVendName(factureJour.Module, factureJour.CustVendInvoiceAccount),
                                                          countryGTD,
                                                          SalesPurchBookTransType_RU::VATRestoring,
                                                          mapEnumerator.currentKey(),
                                                          0,
                                                          tableNum(VendTrans),
                                                          curCompany,
                                                          curCompany,
                                                          0);

            vendTrans       = VendTrans::find(mapEnumerator.currentKey());
            vendInvoiceJour = factureJour.FactureType == FactureType_RU::Invoice ?
                              VendInvoiceJour::findFromVendTrans(vendTrans.Invoice, vendTrans.TransDate, vendTrans.AccountNum, false, vendTrans.Voucher) :
                              null;

            while select restoredVATLogTransOper
                where restoredVATLogTransOper.Include
            exists join restoredVATLogTrans
                where restoredVATLogTrans.TransDate             == restoredVATLogTransOper.TransDate            &&
                      restoredVATLogTrans.ProcessLogTransRecId  == restoredVATLogTransOper.ProcessLogTransRecId &&
                      restoredVATLogTrans.InvoiceRecId          == vendTrans.RecId                              &&
                      restoredVATLogTrans.FactureId             == factureJour.FactureId                        &&
                      restoredVATLogTrans.FactureModule         == factureJour.Module
            exists join restoredVATLogTable
                where restoredVATLogTable.TransDate == restoredVATLogTransOper.TransDate &&
                      restoredVATLogTable.Approved
            {
                if (restoredVATLogTransOper.TaxAmount          +
                    restoredVATLogTransOper.TaxAmountNotLiable +
                    restoredVATLogTransOper.TaxAmountWrittenOff == 0)
                {
                    continue;
                }

                key = [restoredVATLogTransOper.TaxCode,
                       restoredVATLogTransOper.DefaultDimension,
                       restoredVATLogTransOper.InventTransId,
                       vendInvoiceJour.InternalInvoiceId,
                       vendInvoiceJour.InvoiceId,
                       vendInvoiceJour.NumberSequenceGroup];

                addRestoredAmounts(SalesBookVATRestoringType_RU::Export);
                addRestoredAmounts(SalesBookVATRestoringType_RU::NotLiableToVAT);
                addRestoredAmounts(SalesBookVATRestoringType_RU::AssetDisposal);
            }

            totalSettledAmounts = new BookStructVATAmounts_RU();
            totalUsedAmounts    = new BookStructVATAmounts_RU();

            enumerator = mapMapRestoredAmounts.getEnumerator();

            while (enumerator.moveNext())
            {
                totalAmounts = this.createLogTrans(dateNull(),
                                                   mapEnumerator.currentKey(),
                                                   0,
                                                   curCompany,
                                                   curCompany,
                                                   0,
                                                   salesPurchBookDataMap.RecId,
                                                   SalesPurchBookTransType_RU::VATRestoring,
                                                   enumerator.currentValue(),
                                                   mapFactureAmountsDetails,
                                                   enumerator.currentKey());

                totalSettledAmounts.addAmounts2(BookStructVATAmounts_RU::create(conPeek(totalAmounts, 1)));
                totalUsedAmounts.addAmounts2(BookStructVATAmounts_RU::create(conPeek(totalAmounts, 2)));
            }

            TmpSalesBookVATProcessLogTrans_RU::updateLine(salesPurchBookDataMap,
                                                          totalFactureAmounts,
                                                          totalSettledAmounts,
                                                          totalUsedAmounts,
                                                          fromDate);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>