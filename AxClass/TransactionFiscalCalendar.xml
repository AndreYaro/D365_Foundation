<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TransactionFiscalCalendar</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The transaction fiscal calendar helpers.
/// </summary>
public class TransactionFiscalCalendar
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkNoExistUnpostedTransInJournals</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether there are unposted journals for the specified fiscal calendar period and current company.
    /// </summary>
    /// <param name="_fiscalCalendarPeriod">
    ///    The fiscal calendar period to check.
    /// </param>
    /// <returns>
    ///    true if no unposted journals exist for the fiscal calendar period and current company; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method replaces the <c>checkJournal</c> method on the <c>LedgerPeriod</c> table.
    /// </remarks>
    public static boolean checkNoExistUnpostedTransInJournals(FiscalCalendarPeriod _fiscalCalendarPeriod)
    {
        boolean ok = true;

        if (_fiscalCalendarPeriod)
        {
            if (TransactionFiscalCalendar::existUnpostedLedgerJournalTrans(_fiscalCalendarPeriod.StartDate, _fiscalCalendarPeriod.EndDate))
            {
                ok = checkFailed(strFmt("@SYS127967",_fiscalCalendarPeriod.periodName()));
            }

            if (TransactionFiscalCalendar::existUnpostedInventJournalTrans(_fiscalCalendarPeriod.StartDate, _fiscalCalendarPeriod.EndDate))
            {
                ok = checkFailed(strFmt("@SYS127967",_fiscalCalendarPeriod.periodName()));
            }

            if (TransactionFiscalCalendar::existUnpostedProjectTrans(_fiscalCalendarPeriod.StartDate, _fiscalCalendarPeriod.EndDate))
            {
                ok = checkFailed(strFmt("@SYS127967",_fiscalCalendarPeriod.periodName()));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existUnpostedInventJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the records exist in the <c>InventJournalTrans</c> table in the date range
    ///    specified by the start date and end date.
    /// </summary>
    /// <param name="_startDate">
    ///    The specified start date.
    /// </param>
    /// <param name="_endDate">
    ///    The specified end date.
    /// </param>
    /// <param name="_companyCnt">
    ///    The specified container for the companies; the default company is the current company.
    /// </param>
    /// <returns>
    ///    true if records exist in the table; otherwise, false.
    /// </returns>
    private static boolean existUnpostedInventJournalTrans(date _startDate, date _endDate, container _companyCnt = [curext()])
    {
        InventJournalTrans   inventJournalTrans;
        boolean              existInventJournalTrans;

        if (_companyCnt)
        {
            inventJournalTrans = TransactionFiscalCalendar::findUnpostedInventJournalTrans(_startDate, _endDate, _companyCnt);

            if (inventJournalTrans.RecId != 0)
            {
                existInventJournalTrans = true;
            }
        }

        return existInventJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existUnpostedLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the records exist in the <c>LedgerJournalTrans</c> table in the date range
    ///    specified by the start date and end date.
    /// </summary>
    /// <param name="_startDate">
    ///    The specified start date.
    /// </param>
    /// <param name="_endDate">
    ///    The specified end date.
    /// </param>
    /// <param name="_companyCnt">
    ///    The specified container for the companies; the default company is the current company.
    /// </param>
    /// <returns>
    ///    true if records exist in the table; otherwise, false.
    /// </returns>
    private static boolean existUnpostedLedgerJournalTrans(date _startDate, date _endDate, container _companyCnt = [curext()])
    {
        LedgerJournalTrans      ledgerJournalTrans;
        boolean                 existUnpostedTrans;

        if (_companyCnt)
        {
            ledgerJournalTrans = TransactionFiscalCalendar::findUnpostedLedgerJournalTrans(_startDate, _endDate, _companyCnt);

            if (ledgerJournalTrans.RecId)
            {
                existUnpostedTrans = true;
            }
        }
        return existUnpostedTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existUnpostedProjectTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the records exist in the journal tables in the date range that is specified by
    ///    the start date and end date.
    /// </summary>
    /// <param name="_startDate">
    ///    The specified start date.
    /// </param>
    /// <param name="_endDate">
    ///    The specified end date.
    /// </param>
    /// <param name="_companyCnt">
    ///    The specified container for the companies; default is current company.
    /// </param>
    /// <returns>
    ///    true if records exist in the table; otherwise, false.
    /// </returns>
    private static boolean existUnpostedProjectTrans(date _startDate, date _endDate, container _companyCnt = [curext()])
    {
        ProjJournalTrans        projJournalTrans;
        ProjProposalJour        projProposalJour;
        ProjControlPeriodTable  projControlPeriodTable;

        if (_companyCnt)
        {
            projJournalTrans = TransactionFiscalCalendar::findUnpostedProjJournalTrans(_startDate, _endDate, _companyCnt);
            if (projJournalTrans.RecId != 0)
            {
                return true;
            }

            projProposalJour = TransactionFiscalCalendar::findProjProposalJour(_startDate, _endDate, _companyCnt);
            if (projProposalJour.RecId != 0)
            {
                return true;
            }

            projControlPeriodTable = TransactionFiscalCalendar::findUnpostedProjControlPeriodTable(_startDate, _endDate, _companyCnt);
            if (projControlPeriodTable.RecId != 0)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existUnpostedTransInJournals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the records exist in the ledger journal or invent journal for the specified date range.
    /// </summary>
    /// <param name="_startDate">
    /// The start date of a date range.
    /// </param>
    /// <param name="_endDate">
    /// The end date of a date range.
    /// </param>
    /// <param name="_companyCnt">
    ///    The specified container for the companies; default is current company.
    /// </param>
    /// <returns>
    /// true if records exist in the journals for the specified date range; otherwise, false.
    /// </returns>
    public static boolean existUnpostedTransInJournals(date _startDate, date _endDate, container _companyCnt = [curext()])
    {
        boolean existUnpostedTrans;

        if (_startDate <= _endDate)
        {
            if ( TransactionFiscalCalendar::existUnpostedLedgerJournalTrans(_startDate, _endDate, _companyCnt))
            {
                existUnpostedTrans = true;
            }

            if (!existUnpostedTrans && TransactionFiscalCalendar::existUnpostedInventJournalTrans(_startDate, _endDate, _companyCnt))
            {
                existUnpostedTrans = true;
            }

            if (!existUnpostedTrans && TransactionFiscalCalendar::existUnpostedProjectTrans(_startDate, _endDate, _companyCnt))
            {
                existUnpostedTrans = true;
            }
        }

        return existUnpostedTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existUnpostedTransInYear</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether unposted transaction records exist for the specified fiscal calendar year in the
    ///    specified fiscal calendar.
    /// </summary>
    /// <param name="_calendarRecId">
    ///    The record ID of the <c>FiscalCalendar</c> record in which the fiscal year is defined.
    /// </param>
    /// <param name="_fiscalYearName">
    ///    The name of the fiscal calendar year to search.
    /// </param>
    /// <returns>
    ///    true if the unposted transaction records are found; otherwise, false.
    /// </returns>
    public static boolean existUnpostedTransInYear(FiscalCalendarRecId _calendarRecId, FiscalYearName _fiscalYearName)
    {
        boolean                 existTransaction;
        FiscalCalendarYear      fiscalCalendarYear;
        container               companyCnt = LedgerFiscalCalendar::findDataAreaIdCntForFiscalCalendar(_calendarRecId);

        if (_calendarRecId)
        {
            fiscalCalendarYear = FiscalCalendarYear::findByCalendarYearName(_calendarRecId, _fiscalYearName);

            if (TransactionFiscalCalendar::existUnpostedTransInJournals(fiscalCalendarYear.StartDate, fiscalCalendarYear.EndDate, companyCnt))
            {
                existTransaction = true;
            }
        }

        return existTransaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProjProposalJour</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the record in the <c>ProjProposalJour</c> table in the date range that is specified by the
    ///    start date and end date.
    /// </summary>
    /// <param name="_startDate">
    ///    The specified start date.
    /// </param>
    /// <param name="_endDate">
    ///    The specified end date.
    /// </param>
    /// <param name="_companyCnt">
    ///    The specified container for the companies; the default is the current company.
    /// </param>
    /// <returns>
    ///    true if records exist in the table; otherwise, false.
    /// </returns>

    public static ProjProposalJour findProjProposalJour(date _startDate, date _endDate, container _companyCnt = [curext()])
    {
        ProjProposalJour        projProposalJour;

        if (_companyCnt)
        {
            select  firstonly crossCompany : _companyCnt RecId, DataAreaId from projProposalJour
            where   projProposalJour.InvoiceDate  >= _startDate &&
                    projProposalJour.InvoiceDate  <= _endDate   &&
                   (projProposalJour.LineProperty == ProjLinePropertyCode::Open ||
                    projProposalJour.LineProperty == ProjLinePropertyCode::Approved);
        }
        return projProposalJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findUnpostedInventJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Find the records in the <c>InventJournalTrans</c> table in the date range specified by the start
    ///    date and end date.
    /// </summary>
    /// <param name="_startDate">
    ///    The specified start date.
    /// </param>
    /// <param name="_endDate">
    ///    The specified end date.
    /// </param>
    /// <param name="_companyCnt">
    ///    The specified container for the companies; the default company is the current company.
    /// </param>
    /// <returns>
    ///    true if records exist in the table; otherwise, false.
    /// </returns>
    public static InventJournalTrans findUnpostedInventJournalTrans(date _startDate, date _endDate, container _companyCnt = [curext()])
    {
        InventJournalTrans   inventJournalTrans;
        InventJournalTable   inventJournalTable;

        if (_companyCnt)
        {
            select  firstonly crossCompany : _companyCnt RecId from inventJournalTrans
            where   inventJournalTrans.TransDate    >= _startDate                 &&
                    inventJournalTrans.TransDate    <= _endDate
            exists join inventJournalTable
            where   inventJournalTable.Posted       == NoYes::No                  &&
                    inventJournalTable.JournalId    == inventJournalTrans.JournalId;
        }

        return inventJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findUnpostedLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the record in the <c>LedgerJournalTrans</c> table in the date range specified by the start
    ///    date and end date.
    /// </summary>
    /// <param name="_startDate">
    ///    The specified start date.
    /// </param>
    /// <param name="_endDate">
    ///    The specified end date.
    /// </param>
    /// <param name="_companyCnt">
    ///    The specified container for the companies; the default company is the current company.
    /// </param>
    /// <returns>
    ///    true if records exist in the table; otherwise, false.
    /// </returns>
    public static LedgerJournalTrans findUnpostedLedgerJournalTrans(date _startDate, date _endDate, container _companyCnt = [curext()])
    {
        LedgerJournalTrans      ledgerJournalTrans;
        LedgerJournalTable      ledgerJournalTable;

        if (_companyCnt)
        {
            select  firstonly crossCompany : _companyCnt RecId, DataAreaId from ledgerJournalTrans
            where   ledgerJournalTrans.TransDate    >= _startDate                                       &&
                    ledgerJournalTrans.TransDate    <= _endDate
            exists join ledgerJournalTable
                where ledgerJournalTable.JournalType != LedgerJournalType::Periodic                      &&
                    ledgerJournalTable.JournalType != LedgerJournalType::VendInvoicePool &&
                    !ledgerJournalTable.Posted &&
                    ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum;
        }
        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findUnpostedProjControlPeriodTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Find the record in the <c>ProjControlPeriodTable</c> table in the date range that is specified by
    ///    the start date and end date.
    /// </summary>
    /// <param name="_startDate">
    ///    The specified start date.
    /// </param>
    /// <param name="_endDate">
    ///    The specified end date.
    /// </param>
    /// <param name="_companyCnt">
    ///    The specified container for the companies; the default is the current company.
    /// </param>
    /// <returns>
    ///    true if records exist in the table; otherwise, false.
    /// </returns>

    public static ProjControlPeriodTable findUnpostedProjControlPeriodTable(date _startDate, date _endDate, container _companyCnt = [curext()])
    {
        ProjControlPeriodTable        projControlPeriodTable;

        if (_companyCnt)
        {
            select  firstonly crossCompany : _companyCnt RecId, DataAreaId from projControlPeriodTable
            where   projControlPeriodTable.PeriodTo >= _startDate &&
                    projControlPeriodTable.PeriodTo  <= _endDate  &&
                    projControlPeriodTable.PeriodStatus == ProjControlPeriodStatus::Created;
        }
        return projControlPeriodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findUnpostedProjJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the record in the <c>ProjJournalTrans</c> table in the date range that is specified by the
    ///    start date and end date.
    /// </summary>
    /// <param name="_startDate">
    ///    The specified start date.
    /// </param>
    /// <param name="_endDate">
    ///    The specified end date.
    /// </param>
    /// <param name="_companyCnt">
    ///    The specified container for the companies; the default is the current company.
    /// </param>
    /// <returns>
    ///    true if records exist in the table; otherwise, false.
    /// </returns>

    public static ProjJournalTrans findUnpostedProjJournalTrans(date _startDate, date _endDate, container _companyCnt = [curext()])
    {
        ProjJournalTrans        projJournalTrans;
        ProjJournalTable        projJournalTable;

        if (_companyCnt)
        {
            select  firstonly crossCompany : _companyCnt RecId, DataAreaId from projJournalTrans
            where   projJournalTrans.TransDate    >= _startDate                                       &&
                    projJournalTrans.TransDate    <= _endDate
            exists join projJournalTable
            where   !projJournalTable.Posted                                                          &&
                    projJournalTable.JournalId == projJournalTrans.JournalId;
        }
        return projJournalTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>