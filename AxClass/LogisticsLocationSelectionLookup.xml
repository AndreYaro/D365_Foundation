<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LogisticsLocationSelectionLookup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LogisticsLocationSelectionLookup</c> class is used to show an address lookup.
/// </summary>
class LogisticsLocationSelectionLookup extends SysReferenceTableLookup
{
    const str AddressRefTableId = "AddressRefTableId";
    const str AddressRefRecId = "AddressRefRecId";

    boolean allowAddAddress;
    boolean allowEnhancedSelect;
    boolean returnLocation;
    boolean includeOneTimeAddresses;
    boolean includeAllRoles;
    container roleIds, oneTimeAddressIds;
    Common entity, callingBuffer;
    FormRun callingForm;
    FormBuildDataSource locationDataSource;
    FormBuildDataSource postalAddressDataSource;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addOneTimeAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds an address to show in the lookup.
    /// </summary>
    /// <param name="_addressId">
    /// The <c>LogisticsPostalAddressRecId</c> to show in the lookup.
    /// </param>
    public void addOneTimeAddress(LogisticsPostalAddressRecId _addressId)
    {
        if (!conFind(oneTimeAddressIds, _addressId))
        {
            oneTimeAddressIds += _addressId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOneTimeAddresses</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds multiple addresses to show in the lookup.
    /// </summary>
    /// <param name="_addressRecIds">
    /// The <c>Set</c> containing <c>LogisticsPostalAddressRecId</c> values to show in the lookup.
    /// </param>
    public void addOneTimeAddresses(Set _addressRecIds)
    {
        SetEnumerator enumerator;

        if (_addressRecIds)
        {
            enumerator = _addressRecIds.getEnumerator();

            while (enumerator.moveNext())
            {
                this.addOneTimeAddress(enumerator.current());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOneTimeAddressesContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds multiple addresses to show in the lookup.
    /// </summary>
    /// <param name="_addressRecIds">
    /// The <c>container</c> containing <c>LogisticsPostalAddressRecId</c> values to show in the lookup.
    /// </param>
    public void addOneTimeAddressesContainer(container _addressRecIds)
    {
        int i;

        for (i = 1; i <= conLen(_addressRecIds); i++)
        {
            this.addOneTimeAddress(conPeek(_addressRecIds, i));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRole</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds an address purpose to show in the lookup.
    /// </summary>
    /// <param name="_roleId">
    /// The <c>LogisticsLocationRoleRecId</c> of the address purpose to show in the lookup.
    /// </param>
    public void addRole(LogisticsLocationRoleRecId _roleId)
    {
        if (!conFind(roleIds, _roleId))
        {
            roleIds += _roleId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRoleByType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds an address purpose to show in the lookup.
    /// </summary>
    /// <param name="_roleType">
    /// The <c>LogisticsLocationRoleType</c> of the address purpose to show in the lookup.
    /// </param>
    public void addRoleByType(LogisticsLocationRoleType _roleType)
    {
        this.addRole(LogisticsLocationRole::findBytype(_roleType).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAdditionalFormDataSources</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies additional data sources on the form.
    /// </summary>
    /// <param name="_form">
    ///    The form to use for the lookup.
    /// </param>
    /// <remarks>
    ///    Override this method to add more data sources to the lookup form.
    /// </remarks>
    public void buildAdditionalFormDataSources(Form _form)
    {
        #define.LogisticsLocationRelationName('Location')
        super(_form);

        if (returnLocation)
        {
            // Add Postal Address
            postalAddressDataSource = _form.addDataSource(tableStr(LogisticsPostalAddress));
            postalAddressDataSource.table(tableNum(LogisticsPostalAddress));

            this.configureLookupDataSource(postalAddressDataSource);
            postalAddressDataSource.joinSource(_form.dataSource(1).name());
            postalAddressDataSource.joinRelation(#LogisticsLocationRelationName);
            postalAddressDataSource.linkType(FormLinkType::InnerJoin);
        }
        else
        {
            // Add LogisticsLocation
            locationDataSource = _form.addDataSource(tableStr(LogisticsLocation));
            locationDataSource.table(tableNum(LogisticsLocation));

            this.configureLookupDataSource(locationDataSource);
            locationDataSource.joinSource(_form.dataSource(1).name());
            locationDataSource.joinRelation(#LogisticsLocationRelationName);
            locationDataSource.linkType(FormLinkType::InnerJoin);
        }

        // Form Name
        _form.name(classStr(LogisticsLocationSelectionLookup));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildArgs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies additional properties of the arguments.
    /// </summary>
    /// <param name="_args">
    ///    The arguments of the <c>SysTableLookupBase</c> class.
    /// </param>
    /// <remarks>
    ///    Override this method to add properties of the arguments.
    /// </remarks>
    protected void buildArgs(Args _args)
    {
        super(_args);

        _args.caller(callingForm);
        _args.record(callingBuffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildControlsFinal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies the additional controls on the form.
    /// </summary>
    /// <param name="_formBuildDesign">
    ///    The instance of the <c>FormBuildDesign</c> class for the form.
    /// </param>
    /// <remarks>
    ///    Override this method to provide additional controls to the lookup form.
    /// </remarks>
    protected void buildControlsFinal(FormBuildDesign _formBuildDesign)
    {
        FormBuildFunctionButtonControl menu;
        super(_formBuildDesign);

        if (allowAddAddress)
        {
            menu = _formBuildDesign.addControl(FormControlType::MenuFunctionButton, 'ButtonAddAddress');
            menu.menuItemType(MenuItemType::Display);
            menu.menuItemName(menuitemDisplayStr(DirPartyPostalAddressNew));
        }
        if (allowEnhancedSelect)
        {
            // Validate that extra parameters were provided.
            if (!(callingForm))
            {
                throw error("@SYS22996");
            }

            menu = _formBuildDesign.addControl(FormControlType::MenuFunctionButton, 'ButtonEnhancedSelect');
            menu.menuItemType(MenuItemType::Display);
            menu.menuItemName(menuitemDisplayStr(LogisticsLocationSelect));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGrid</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds the interior of the provided <paramref name="_formBuildGridControl" /> parameter for the
    ///    lookup form.
    /// </summary>
    /// <param name="_formBuildGridControl">
    ///    The grid that will contain the controls that displays data on the lookup form.
    /// </param>
    /// <param name="_formBuildDataSource">
    ///    The <c>FormBuildDataSource</c> to which the controls in the grid will be bound.
    /// </param>
    /// <returns>
    ///    The constructed grid control.
    /// </returns>
    protected FormBuildGridControl buildGrid(FormBuildGridControl _formBuildGridControl, FormBuildDataSource _formBuildDataSource)
    {
        FormBuildGridControl ret;

        if (!returnLocation)
        {
            // Add LogisticsLocation fields
            _formBuildGridControl.addDataField(locationDataSource.id(), fieldNum(LogisticsLocation, Description));
        }

        ret = super(_formBuildGridControl, _formBuildDataSource);

        if (returnLocation)
        {
            // Add Postal address fields
            _formBuildGridControl.addDataField(postalAddressDataSource.id(), fieldNum(LogisticsPostalAddress, Street));
            _formBuildGridControl.addDataField(postalAddressDataSource.id(), fieldNum(LogisticsPostalAddress, City));
            _formBuildGridControl.addDataField(postalAddressDataSource.id(), fieldNum(LogisticsPostalAddress, State));
            _formBuildGridControl.addDataField(postalAddressDataSource.id(), fieldNum(LogisticsPostalAddress, ZipCode));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build the query for the lookup
    /// </summary>
    public void buildQuery()
    {
        Query myQuery;
        QueryBuildDataSource qbd, qbdLocation;
        DirParty party;
        RecId entityRecId;
        TableId entityLocationTableId, viewTableId;
        FieldId viewLocationRoleFieldId, viewLocationFieldId, viewEntityFieldId;
        QueryBuildRange qbrLocationRole, qbrEntityLocation;

        myQuery = new Query();

        if (this.parmReturnLocation())
        {
            qbdLocation = myQuery.addDataSource(tableNum(LogisticsLocation));
            qbd = qbdLocation.addDataSource(tableNum(LogisticsPostalAddress));
            qbd.joinMode(JoinMode::InnerJoin);
            qbd.relations(true);
        }
        else
        {
            qbd = myQuery.addDataSource(tableNum(LogisticsPostalAddress));
            qbdLocation = qbd.addDataSource(tableNum(LogisticsLocation));
            qbdLocation.joinMode(JoinMode::InnerJoin);
            qbdLocation.relations(true);
        }

        if (entity.TableId == tableNum(InventLocation) || entity.TableId == tableNum(InventSite))
        {
            entityRecId = entity.RecId;
        }
        else
        {
            // Entity is a party
            party = new DirParty(entity);
            entityRecId = party.getPartyRecId();
        }
        entityLocationTableId = LogisticsLocationAppUtil::getEntityLocationTableId(entity.TableId);

        viewTableId = LogisticsLocationAppUtil::getEntityPrimaryAndRoleViewTableId(entityLocationTableId);
        viewEntityFieldId = LogisticsLocationAppUtil::getEntityPrimaryAndRoleViewEntityFieldId(viewTableId);
        viewLocationFieldId = LogisticsLocationAppUtil::getEntityPrimaryAndRoleViLocationFieldId(viewTableId);
        viewLocationRoleFieldId = LogisticsLocationAppUtil::getEntityPrimaryViewLocationRoleFieldId(viewTableId);

        if (entityRecId)
        {
            qbd = qbdLocation.addDataSource(viewTableId);
            qbd.joinMode(JoinMode::ExistsJoin);
            qbd.relations(false);
            qbd.addLink(fieldNum(LogisticsLocation, RecId), viewLocationFieldId);

            qbrEntityLocation = qbd.addRange(viewEntityFieldId);
            qbrEntityLocation.value(queryValue(entityRecId));
            qbrEntityLocation.status(RangeStatus::Hidden);
        }

        if (!includeAllRoles)
        {
            if (conLen(oneTimeAddressIds) > 0)
            {
                qbrLocationRole = qbd.addRange(viewLocationRoleFieldId);
                qbrLocationRole.value(strFmt('((%1) || (%2))', this.rolesRangeDetailed(qbd.name()),
                    this.oneTimeEntityLocationsRangeView(qbd.name())));
                qbrLocationRole.status(RangeStatus::Hidden);
            }
            else
            {
                qbrLocationRole = qbd.addRange(viewLocationRoleFieldId);
                qbrLocationRole.value(strFmt('0,%1', this.rolesRange(false)));
                qbrLocationRole.status(RangeStatus::Hidden);
            }
        }

        this.parmQuery(myQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBufferHasAddressRefFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the buffer has address source reference fields.
    /// </summary>
    /// <param name="_lookupBuffer">
    /// The <c>Common</c> table buffer to check.
    /// </param>
    /// <returns>
    /// True if the fields are present; otherwise false.
    /// </returns>
    public boolean lookupBufferHasAddressRefFields(Common _lookupBuffer)
    {
        switch (_lookupBuffer.TableId)
        {
            case tableNum(PurchTable):
            case tableNum(PurchLine):
            case tableNum(SalesTable):
            case tableNum(SalesLine):
            case tableNum(PurchReqLine):
            case tableNum(SalesQuotationTable):
            case tableNum(SalesQuotationLine):
            case tableNum(PurchRFQCaseTable):
            case tableNum(PurchRFQCaseLine):
            case tableNum(PurchRFQTable):
            case tableNum(PurchRFQLine):
            case tableNum(SMAServiceOrderTable):
            case tableNum(ConsignmentReplenishmentOrderHeader):
            case tableNum(ConsignmentReplenishmentOrderLine):
                return true;

            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(Common _entity)
    {
        allowAddAddress = false;
        allowEnhancedSelect = false;
        returnLocation = true;
        includeOneTimeAddresses = false;
        entity = _entity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>oneTimeEntityLocationsRangeView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the range for filtering the lookup.
    /// </summary>
    /// <param name="_entityViewDsName">
    /// Name of the data source.
    /// </param>
    /// <returns>
    /// The string used to create one-time address range on custom query.
    /// </returns>
    public str oneTimeEntityLocationsRangeView(str _entityViewDsName)
    {
        str range;
        int i;
        LogisticsPostalAddressRecId addressRecId;
        LogisticsPostalAddress logisticsPostalAddress;

        if (conLen(oneTimeAddressIds) == 0)
        {
            return '';
        }

        for (i = 1; i <= conLen(oneTimeAddressIds); i++)
        {
            addressRecId = conPeek(oneTimeAddressIds, i);
            select Location from logisticsPostalAddress
                where logisticsPostalAddress.RecId == addressRecId;

            if (range)
            {
                range += ' || ';
            }
            range = strFmt('%1 (%2.Location == %3)', range, _entityViewDsName, logisticsPostalAddress.Location);
        }

        return range;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllowAddAddress</Name>
				<Source><![CDATA[
    public boolean parmAllowAddAddress(boolean _allowAddAddress = allowAddAddress)
    {
        allowAddAddress = _allowAddAddress;

        return allowAddAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllowEnhancedSelect</Name>
				<Source><![CDATA[
    public boolean parmAllowEnhancedSelect(boolean _allowEnhancedSelect = allowEnhancedSelect,
        FormRun _callingForm = callingForm, Common _callingBuffer = callingBuffer)
    {
        allowEnhancedSelect = _allowEnhancedSelect;

        this.parmCallingBuffer(_callingBuffer);
        this.parmCallingForm(_callingForm);

        return allowEnhancedSelect;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallingBuffer</Name>
				<Source><![CDATA[
    public Common parmCallingBuffer(Common _callingBuffer = callingBuffer)
    {
        callingBuffer = _callingBuffer;

        return callingBuffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallingForm</Name>
				<Source><![CDATA[
    public FormRun parmCallingForm(FormRun _callingForm = callingForm)
    {
        callingForm = _callingForm;

        return callingForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeAllRoles</Name>
				<Source><![CDATA[
    public boolean parmIncludeAllRoles(boolean _includeAllRoles = includeAllRoles)
    {
        includeAllRoles = _includeAllRoles;

        return includeAllRoles;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeOneTimeAddresses</Name>
				<Source><![CDATA[
    public boolean parmIncludeOneTimeAddresses(boolean _includeOneTimeAddresses = includeOneTimeAddresses)
    {
        includeOneTimeAddresses = _includeOneTimeAddresses;

        return includeOneTimeAddresses;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReturnLocation</Name>
				<Source><![CDATA[
    public boolean parmReturnLocation(boolean _returnLocation = returnLocation)
    {
        returnLocation = _returnLocation;

        return returnLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performFormLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Presents the lookup form to the user.
    /// </summary>
    /// <returns>
    ///    The selected record.
    /// </returns>
    public Common performFormLookup()
    {
        Common ret;

        // Init for return type
        this.createLookup();

        this.buildQuery();

        ret = super();

        if (ret 
            && this.parmCallingControl().dataSourceObject()
            && this.lookupBufferHasAddressRefFields(this.parmCallingControl().dataSourceObject().cursor()))
        {
            // Set address ref fields on calling buffer
            this.setLookupBufferAddressRef(ret);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLookup</Name>
				<Source><![CDATA[
    protected void createLookup()
    {
        if (returnLocation)
        {
            this.parmTableId(tableNum(LogisticsLocation));
            this.addLookupfield(fieldNum(LogisticsLocation, Description));
        }
        else
        {
            this.parmTableId(tableNum(LogisticsPostalAddress));
            this.addLookupfield(fieldNum(LogisticsPostalAddress, Street));
            this.addLookupfield(fieldNum(LogisticsPostalAddress, City));
            this.addLookupfield(fieldNum(LogisticsPostalAddress, State));
            this.addLookupfield(fieldNum(LogisticsPostalAddress, ZipCode));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rolesRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the expression string to use for the address purpose range.
    /// </summary>
    /// <param name="_includeOneTime">
    /// Indicates if the range should allow one time addresses.
    /// </param>
    /// <returns>
    /// The string to use for the address purpose range.
    /// </returns>
    public str rolesRange(boolean _includeOneTime = false)
    {
        str range;

        if (conLen(roleIds) == 0)
        {
            range = int642str(LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Delivery).RecId);
        }
        else
        {
            range = con2Str(roleIds);
        }

        if (_includeOneTime)
        {
            range = strFmt('%1,%2', range, int642str(LogisticsLocationRole::findBytype(LogisticsLocationRoleType::OneTime).RecId));
        }

        return range;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rolesRangeDetailed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the expression string to use for the address purpose range.
    /// </summary>
    /// <param name="entityLocationRoleDsName">
    /// Name of the data source.
    /// </param>
    /// <returns>
    /// The expression string used for the address purpose range on the custom query.
    /// </returns>
    public str rolesRangeDetailed(str entityLocationRoleDsName)
    {
        str range;
        int i;

        if (conLen(roleIds) == 0)
        {
            range = strFmt('(%1.LocationRole == %2)', entityLocationRoleDsName,
                LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Delivery).RecId);
        }
        else
        {
            for (i = 1; i <= conLen(roleIds); i++)
            {
                if (range)
                {
                    range += ' || ';
                }
                range = strFmt('%1 (%2.LocationRole == %3)', range, entityLocationRoleDsName, conPeek(roleIds, i));
            }
        }

        return range;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLookupBufferAddressRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the <c>AddressRefTableId</c> field and the <c>AddressRefRecId</c> field on the calling buffer.
    /// </summary>
    /// <param name="_lookupResult">
    /// The record that was selected in the lookup.
    /// </param>
    /// <remarks>
    /// The <paramref name="_lookupResult" /> parameter is not used in this base implementation, but is
    /// used in overriding classes.
    /// </remarks>
    protected void setLookupBufferAddressRef(Common _lookupResult)
    {
        SysDictTable dictTable;
        SysDictField dictFieldRefTableId, dictFieldRefRecId;

        Common lookupBuffer = this.parmCallingControl().dataSourceObject().cursor();

        dictTable = new SysDictTable(lookupBuffer.TableId);
        dictFieldRefTableId = new SysDictField(lookupBuffer.TableId, dictTable.fieldName2Id(AddressRefTableId));
        dictFieldRefRecId = new SysDictField(lookupBuffer.TableId, dictTable.fieldName2Id(AddressRefRecId));

        // Verify that the fields exist
        if (!dictFieldRefTableId || !dictFieldRefRecId)
        {
            return;
        }

        lookupBuffer.(dictFieldRefTableId.id()) = entity.TableId;
        lookupBuffer.(dictFieldRefRecId.id()) = entity.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static LogisticsLocationSelectionLookup construct(Common _entity)
    {
        return new LogisticsLocationSelectionLookup(_entity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupAddress</Name>
				<Source><![CDATA[
    [SysObsolete('Deprecated for performance. Use the LgositicsLocationSelectionLookup::lookupAddressForm method.', true, 31\01\2016)]
    public static Common lookupAddress(FormReferenceControl _formReferenceControl,
                                       Common _entity,
                                       container _roleTypes,
                                       boolean _returnLocation,
                                       Set _oneTimeAddresses = null)
    {
        int i;
        LogisticsLocationSelectionLookup lookup;

        lookup = LogisticsLocationSelectionLookup::newParameters(_formReferenceControl, _entity);

        for (i = 1; i <= conLen(_roleTypes); i++)
        {
            lookup.addRoleByType(conPeek(_roleTypes, i));
        }

        lookup.parmReturnLocation(_returnLocation);
        lookup.addOneTimeAddresses(_oneTimeAddresses);

        return lookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupAddressForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the postal address lookup form.
    /// </summary>
    /// <param name="_callerFormControl">
    /// <c>FormReferenceControl</c> caller control.
    /// </param>
    /// <param name="_entity">
    /// The transaction caller table buffer.
    /// </param>
    /// <param name="_roleTypes">
    /// <c>Container</c> record IDs of the role types.
    /// </param>
    /// <param name="_returnLocation">
    /// true if the location record ID needs to be returned versus address record ID; otherwise, false.
    /// </param>
    /// <param name="_inUseAddresses">
    /// <c>Container</c> record IDs of the postal addresses that are used by the current transaction.
    /// </param>
    /// <param name="_targetBuffer">
    /// The target buffer to which values will be copied. This can be different than _entity in many cases.
    /// </param>
    /// <returns>
    /// <c>Common</c> table buffer to return. Either <c>LogisticsLocation</c> or <c>LogisticsPostalAddress</c>.
    /// </returns>
    public static Common lookupAddressForm(FormReferenceControl _callerFormControl,
                                           Common _entity,
                                           container _roleTypes,
                                           boolean _returnLocation,
                                           container _inUseAddresses = conNull(),
                                           Common _targetBuffer = null)
    {
        Common                  selectedRecord;
        Args                    args;
        FormRun                 formRun;
        Form                    addressLookupForm = new Form(formStr(LogisticsPostalAddressLookup));
        str                     context = strFmt("%1;%2;%3", con2StrUnlimited(_roleTypes),  _returnLocation, con2StrUnlimited(_inUseAddresses));

        args = new Args();
        args.name(formStr(LogisticsPostalAddressLookup));
        args.caller(_callerFormControl);

        args.record(_entity);
        args.parm(context);

        if (!prmisdefault(_targetBuffer) && _targetBuffer is Common )
        {
            args.parmObject(LogisticsLocationSelectForm::construct(_targetBuffer));
        }

        // perform form lookup on the caller form control
        formRun = ClassFactory::formRunClassOnClient(args);
        _callerFormControl.performFormLookup(formRun);

        selectedRecord = formRun.selectRecordModeSelectedRecord();

        return selectedRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    public static LogisticsLocationSelectionLookup newParameters(FormReferenceControl _callingControl, Common _entity)
    {
        LogisticsLocationSelectionLookup lookup = LogisticsLocationSelectionLookup::construct(_entity);

        lookup.parmCallingControl(_callingControl);
        lookup.parmAllowAddAddress(false);
        lookup.parmAllowEnhancedSelect(false);
        lookup.parmUseLookupValue(true);

        return lookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionAssociatedAddresses</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the addresses that are associated with the specified transaction
    /// </summary>
    /// <param name="_lineTableId">
    ///    The table ID of the transaction line
    /// </param>
    /// <param name="_postalFieldId">
    ///    The field ID of the <c>LogisticsPostalAddress</c> table.
    /// </param>
    /// <param name="_rangeFieldId">
    ///    The field ID to limit the lines that are searched.
    /// </param>
    /// <param name="_rangeValue">
    ///    The value of the <paramref name="_rangeFieldId" /> parameter.
    /// </param>
    /// <param name="_headerAddress">
    ///    The address selected for the header.
    /// </param>
    /// <returns>
    ///    The addresses, which are associated with the header and lines.
    /// </returns>
    public static container transactionAssociatedAddresses(TableId _lineTableId, FieldId _postalFieldId,
        FieldId _rangeFieldId, str _rangeValue, LogisticsPostalAddressRecId _headerAddress)
    {
        container addresses = conNull();
        QueryRun qr;
        Query query = new Query();
        QueryBuildDataSource qbd;
        LogisticsPostalAddressRecId addressRecId;

        // Transaction line
        qbd = query.addDataSource(_lineTableId);
        qbd.addSelectionField(_postalFieldId);
        qbd.addRange(_rangeFieldId).value(_rangeValue);

        qr = new QueryRun(query);
        while (qr.next())
        {
            addressRecId = qr.get(_lineTableId).(_postalFieldId);
            if (!conFind(addresses, addressRecId))
            {
                addresses += addressRecId;
            }
        }

        // Add header address
        if (!conFind(addresses, _headerAddress))
        {
            addresses += _headerAddress;
        }

        return addresses;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>