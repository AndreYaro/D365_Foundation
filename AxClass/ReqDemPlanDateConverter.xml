<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqDemPlanDateConverter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>ReqDemPlanDateConverter</c> class is responsible for converting dates from integer keys used in the data mining model.
/// </summary>
class ReqDemPlanDateConverter
{
    Map weekKeys;
    boolean reqDemPlanHandleTransientSqlConnectionErrorFlightIsEnabled;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addPeriods</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds a number of date periods to a date.
    /// </summary>
    /// <param name="_baseDate">
    ///     The base date to add periods to.
    /// </param>
    /// <param name="_granularity">
    ///     The date granularity.
    /// </param>
    /// <param name="_periodsToAdd">
    ///     The number of periods to add.
    /// </param>
    /// <returns>
    ///     The new date value.
    /// </returns>
    public date addPeriods(date _baseDate, ReqDemPlanDateGranularity _granularity, int _periodsToAdd)
    {
        switch (_granularity)
        {
            case ReqDemPlanDateGranularity::Day:
                return _baseDate + _periodsToAdd;
            case ReqDemPlanDateGranularity::Week:
                return _baseDate + (_periodsToAdd * 7);
            case ReqDemPlanDateGranularity::Month:
                return DateTimeUtil::date(DateTimeUtil::addMonths(DateTimeUtil::newDateTime(_baseDate, 0), _periodsToAdd));
        }

        throw error("@DMP1061");
    }

]]></Source>
			</Method>
			<Method>
				<Name>weekDateKeyExists</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if week date key exists for forecast.
    /// </summary>
    /// <param name="_weekKey">
    ///     The week key to check.
    /// </param>
    /// <returns>
    ///     true if the week key exists; otherwise false.
    /// </returns>
    internal boolean weekDateKeyExists(ReqDemPlanDateKey _weekKey)
    {
        return this.getWeekKeys().exists(_weekKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateKeyToDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Converts the integer date key into the date value.
    /// </summary>
    /// <param name="_key">
    ///     The key to convert.
    /// </param>
    /// <param name="_granularity">
    ///     The date granularity.
    /// </param>
    /// <returns>
    ///     The date value.
    /// </returns>
    public date dateKeyToDate(ReqDemPlanDateKey _key, ReqDemPlanDateGranularity _granularity)
    {
        switch (_granularity)
        {
            case ReqDemPlanDateGranularity::Day:
                return DateTimeUtil::date(DateTimeUtil::addDays(DateTimeUtil::minValue(), _key));
            case ReqDemPlanDateGranularity::Week:
                return this.getWeekKeys().lookup(_key);
            case ReqDemPlanDateGranularity::Month:
                return DateTimeUtil::date(DateTimeUtil::addMonths(DateTimeUtil::minValue(), _key));
        }

        throw error("@DMP1061");
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateToDateKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Converts the date value to the integer date key.
    /// </summary>
    /// <param name="_date">
    ///     The date to convert.
    /// </param>
    /// <param name="_granularity">
    ///     The date granularity.
    /// </param>
    /// <returns>
    ///     The date key value.
    /// </returns>
    public ReqDemPlanDateKey dateToDateKey(date _date, ReqDemPlanDateGranularity _granularity)
    {
        var dateDimensionEntry = ReqDemPlanDateConverter::getFirstDateDimensionEntry(_date, _granularity);
        switch (_granularity)
        {
            case ReqDemPlanDateGranularity::Day:
                return int642int(dateDimensionEntry.DateKey);
            case ReqDemPlanDateGranularity::Week:
                return int642int(dateDimensionEntry.WeekKey);
            case ReqDemPlanDateGranularity::Month:
                return int642int(dateDimensionEntry.MonthKey);
        }

        throw error("@DMP1061");
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWeekKeys</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds a map of the week keys.
    /// </summary>
    /// <returns>
    ///     The map of the week keys.
    /// </returns>
    private Map getWeekKeys()
    {
        BIDateDimensionsView dateView;
        BIDateDimensionsViewPeriods biDatePeriods;
        #BIFramework

        if (!weekKeys)
        {
            int infologLineTry = infologLine();

            try
            {
                weekKeys = new Map(Types::Integer, Types::Date);

                while select CurrentWeekKey, maxOf(CurrentWeekStart) from biDatePeriods
                    group by biDatePeriods.CurrentWeekKey
                {
                    weekKeys.insert(biDatePeriods.CurrentWeekKey, biDatePeriods.CurrentWeekStart);
                }
            }
            #ReqDemPlanCatchRetryWithoutPrepareTransientSqlConnectionError(reqDemPlanHandleTransientSqlConnectionErrorFlightIsEnabled, infologLineTry)
        }

        return weekKeys;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ReqDemPlanDateConverter construct()
    {
        ReqDemPlanDateConverter reqDemPlanDateConverter = new ReqDemPlanDateConverter();

        reqDemPlanDateConverter.reqDemPlanHandleTransientSqlConnectionErrorFlightIsEnabled = ReqDemPlanCreateForecastService::isTransientSqlConnectionErrorRetryEnabled();

        return reqDemPlanDateConverter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustedDateDimensionEntry</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Obtains a <c>BIDateDimensionsView</c> record.
    /// </summary>
    /// <param name="_date">
    ///     The date for which a record in the view is to be found.
    /// </param>
    /// <param name="_granularity">
    ///     The granularity for which we are trying to find the first record in the view.
    /// </param>
    /// <returns>
    ///     A <c>BIDateDimensionsView</c> for the specific date if granularity is days,
    ///     otherwise the first date record of the next period.
    /// </returns>
    public static BIDateDimensionsView getAdjustedDateDimensionEntry(date _date, ReqDemPlanDateGranularity _granularity)
    {
        #BIFramework
        BIDateDimensionsViewPeriods datePeriods;
        date                        resultDate;
        BIDateDimensionsView        result;
        boolean reqDemPlanHandleTransientSqlConnectionErrorFlightIsEnabled = ReqDemPlanCreateForecastService::isTransientSqlConnectionErrorRetryEnabled();
        int infologLineTry = infologLine();

        try
        {
            // find corresponding period record
            select firstonly DateKey, CurrentWeekStart, NextWeekStart, CurrentMonthStart, NextMonthStart from datePeriods
            where datePeriods.DateKey == _date;

            switch (_granularity)
            {
                case ReqDemPlanDateGranularity::Day:
                    resultDate = datePeriods.DateKey;
                    break;

                case ReqDemPlanDateGranularity::Week:
                    if (_date == datePeriods.CurrentWeekStart)
                    {
                        resultDate = datePeriods.CurrentWeekStart;
                    }
                    else
                    {
                        resultDate = datePeriods.NextWeekStart;
                    }
                    break;

                case ReqDemPlanDateGranularity::Month:
                    if (_date == datePeriods.CurrentMonthStart)
                    {
                        resultDate = datePeriods.CurrentMonthStart;
                    }
                    else
                    {
                        resultDate = datePeriods.NextMonthStart;
                    }
                    break;

                default:
                    throw error("@DMP1061");
            }

            // return the corresponding date view buffer
            select firstOnly result
                order by result.Date
                where result.Date == resultDate;
        }
        #ReqDemPlanCatchRetryWithoutPrepareTransientSqlConnectionError(reqDemPlanHandleTransientSqlConnectionErrorFlightIsEnabled, infologLineTry)

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstDateDimensionEntry</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Obtains a <c>BIDateDimensionsView</c> record.
    /// </summary>
    /// <param name="_date">
    ///     The date for which a record in the view is to be found.
    /// </param>
    /// <param name="_granularity">
    ///     The granularity for which we are trying to find the first record in the view.
    /// </param>
    /// <returns>
    ///     A <c>BIDateDimensionsView</c> for the specific date if granularity is days,
    ///     otherwise the first date record of the current period.
    /// </returns>
    public static BIDateDimensionsView getFirstDateDimensionEntry(date _date, ReqDemPlanDateGranularity _granularity)
    {
        #BIFramework
        BIDateDimensionsViewPeriods datePeriods;
        date                        resultDate;
        BIDateDimensionsView        result;
        boolean reqDemPlanHandleTransientSqlConnectionErrorFlightIsEnabled = ReqDemPlanCreateForecastService::isTransientSqlConnectionErrorRetryEnabled();
        int infologLineTry = infologLine();

        try
        {
            // find corresponding period record
            select firstonly DateKey, CurrentWeekStart, CurrentMonthStart from datePeriods
            where datePeriods.DateKey == _date;

            switch (_granularity)
            {
                case ReqDemPlanDateGranularity::Day:
                    resultDate = datePeriods.DateKey;
                    break;
                case ReqDemPlanDateGranularity::Week:
                    resultDate = datePeriods.CurrentWeekStart;
                    break;
                case ReqDemPlanDateGranularity::Month:
                    resultDate = datePeriods.CurrentMonthStart;
                    break;
                default:
                    throw error("@DMP1061");
            }

            // return the corresponding date view buffer
            select firstOnly result
                order by result.Date
                where result.Date == resultDate;
        }
        #ReqDemPlanCatchRetryWithoutPrepareTransientSqlConnectionError(reqDemPlanHandleTransientSqlConnectionErrorFlightIsEnabled, infologLineTry)

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the actual end date for a period.
    /// </summary>
    /// <param name="_dateInsidePeriod">
    ///     Input date for calculating actual end date.
    /// </param>
    /// <param name="_dateGranularity">
    ///     The date granularity of enum <c>ReqDemPlanDateGranularity</c>.
    /// </param>
    /// <returns>
    ///     The actual end date.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///     If the forecast bucket is not correctly specified it throws an error.
    /// </exception>
    public static date getPeriodEndDate(date _dateInsidePeriod, ReqDemPlanDateGranularity _dateGranularity)
    {
        if (_dateInsidePeriod)
        {
            return ReqDemPlanDateConverter::getAdjustedDateDimensionEntry(_dateInsidePeriod +1 , _dateGranularity).Date -1;
        }
        return _dateInsidePeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the field ID of the necessary date key field from the <c>BIDateDimensionsViewPeriods</c> based on the date granularity provided.
    /// </summary>
    /// <param name = "_dateGranularity">The date granularity, day, week, month.</param>
    /// <returns>The field id of the corresponding field.</returns>
    public FieldId getPeriodFieldId(ReqDemPlanDateGranularity _dateGranularity)
    {
        switch (_dateGranularity)
        {
            case ReqDemPlanDateGranularity::Day:
                return fieldNum(BIDateDimensionsViewPeriods, DateKey);
            case ReqDemPlanDateGranularity::Week:
                return  fieldNum(BIDateDimensionsViewPeriods, CurrentWeekStart);
            case ReqDemPlanDateGranularity::Month:
                return  fieldNum(BIDateDimensionsViewPeriods, CurrentMonthStart);
            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>