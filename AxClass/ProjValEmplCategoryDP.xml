<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjValEmplCategoryDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjValEmplCategoryDP</c> class is a report data provider class for the
///    <c>ProjValEmplCategory</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(ProjValEmplCategory)),
    SRSReportParameterAttribute(classStr(ProjValEmployeeContract))
]
class ProjValEmplCategoryDP extends SRSReportDataProviderBase
{
    #ProjReports

    ProjOptionHours             categoryHour;
    ProjOptionItem              categoryItem;
    ProjOptionCost              categoryCost;
    ProjOptionRevenue           categoryRevenue;

    ProjValEmplCategory         projValEmplCategoryEnum;
    ProjValProjectTmp           projValProjectTmp;

    QueryRun                    queryRun;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getParameterValues</Name>
				<Source><![CDATA[
/// <summary>
///    Gets the parameter values and assigns them to the variables.
/// </summary>
private void getParameterValues()
{
    ProjValEmployeeContract contract = this.parmDataContract() as ProjValEmployeeContract;

    categoryHour     = contract.parmHour();
    categoryCost     = contract.parmExpenses();
    categoryItem     = contract.parmItem();
    categoryRevenue  = contract.parmRevenue();

    projValEmplCategoryEnum  = contract.parmValEmplCategory();
}

]]></Source>
			</Method>
			<Method>
				<Name>getProjValProjectTmp</Name>
				<Source><![CDATA[
/// <summary>
///    Retrieves the data from the <c>ProjValProjectTmp</c> table.
/// </summary>
/// <returns>
///    The data from the <c>ProjValProjectTmp</c> table.
/// </returns>
[SRSReportDataSetAttribute('ProjValProjectTmp')]
public ProjValProjectTmp getProjValProjectTmp()
{
    select * from projValProjectTmp;
    return projValProjectTmp;
}
]]></Source>
			</Method>
			<Method>
				<Name>insertProjValProjectTmp</Name>
				<Source><![CDATA[
/// <summary>
///    Inserts the values into a temporary table.
/// </summary>
/// <param name="_projValEmplCategorySetUp">
///    The table buffer for the <c>ProjValEmplCategorySetUp</c> table.
/// </param>
/// <param name="_projCategory">
///    A table buffer for the <c>ProjCategory</c> table.
/// </param>
/// <param name="_resource">
///    A table buffer for the <c>ResourceView</c> table.
/// </param>
private void insertProjValProjectTmp(ProjValEmplCategorySetUp  _projValEmplCategorySetUp, ProjCategory _projCategory, ResourceView _resource)
{
    projValProjectTmp.clear();
    projValProjectTmp.GroupId = _projValEmplCategorySetUp.GroupId;
    projValProjectTmp.CategoryId = _projCategory.CategoryId;
    projValProjectTmp.CategoryName = _projCategory.Name;
    projValProjectTmp.Resource = _resource.RecId;
    projValProjectTmp.ResourceId = _resource.ResourceId;
    projValProjectTmp.ResourceName = _resource.Name;
    projValProjectTmp.insert();
}

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
/// <summary>
///    Processes the report business logic.
/// </summary>
/// <remarks>
///    Provides the ability to write the report business logic. This method will be called by SSRS at
///    runtime. The method computes data and populates the data tables that will be returned to SSRS.
/// </remarks>
public void processReport()
{
    ProjValEmplCategoryTable    qb_ProjValEmplCategoryTable;
    ProjValEmplCategorySetUp    qb_ProjValEmplCategorySetUp;

    ResourceView                resource;
    ProjCategory                projCategory;

    ProjCategoryGroupId         prev_Id;

    this.getParameterValues();
    queryRun = new QueryRun(this.parmQuery());

    while (queryRun.next())
    {
        qb_ProjValEmplCategoryTable = queryRun.get(tableNum(ProjValEmplCategoryTable));
        qb_ProjValEmplCategorySetUp = queryRun.get(tableNum(ProjValEmplCategorySetUp));

        switch (projValEmplCategoryEnum)
        {
            case ProjValEmplCategory::Employee :
                while select resource
                    where (resource.RecId == qb_ProjValEmplCategorySetUp.Resource)
                {
                    this.insertProjValProjectTmp(qb_ProjValEmplCategorySetUp, projCategory, resource);

                    if (qb_ProjValEmplCategorySetUp.GroupId != prev_Id)
                    {
                        prev_Id = qb_ProjValEmplCategorySetUp.GroupId;
                    }
                }

                break;

            case ProjValEmplCategory::Category :
                while select projCategory
                    where (projCategory.CategoryId == qb_ProjValEmplCategorySetUp.CategoryId) &&
                          (!(categoryItem ^
                             categoryHour ^
                             categoryCost ^
                             categoryRevenue) ||
                            (categoryHour     && projCategory.CategoryType == ProjCategoryType::Hour)      ||
                            (categoryItem     && projCategory.CategoryType == ProjCategoryType::Item)      ||
                            (categoryCost     && projCategory.CategoryType == ProjCategoryType::Cost)      ||
                            (categoryRevenue  && projCategory.CategoryType == ProjCategoryType::Revenue))
                {
                    this.insertProjValProjectTmp(qb_ProjValEmplCategorySetUp, projCategory, resource);

                    if (qb_ProjValEmplCategorySetUp.GroupId != prev_Id)
                    {
                        prev_Id = qb_ProjValEmplCategorySetUp.GroupId;
                    }
                }

                break;
        }
    }
}
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
