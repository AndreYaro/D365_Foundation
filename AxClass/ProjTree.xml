<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTree</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjTree
{
    #resAppl

    ImageListAppl_Proj  imageList;

    FormTreeControl     tree;
    FormTreeItem        item;

    Integer             master;

    Map                 treeTreeId;
    Map                 treeRecId ;
    Map                 treeActive;

    boolean             createMaster;
    boolean             markActive;
    boolean             onlyWIP;

    Integer             id;
    ProjId              parentId;

#localMacro.fieldList
    projId,
    ParentId,
    name,
    recId,
    type,
    status,
    WIPProject
#endMacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildtree</Name>
				<Source><![CDATA[
    protected void buildtree()
    {
        ProjTable       projParent;
        ProjTable       projchild;

        if (this.parmCreateMaster())
        {
            this.createMaster();
        }

        projchild.recordLevelSecurity(true);
        projParent.recordLevelSecurity(true);

        while select #fieldList from projParent
            order by ProjId
            where (!parentId && projParent.ParentId == '') || (parentId && projParent.ParentId == parentId)
        {
            select firstonly RecId from projchild where projchild.ParentId == projParent.ProjId;

            this.createNode(projParent, projchild.RecId != 0, master);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMaster</Name>
				<Source><![CDATA[
    protected void createMaster()
    {
        ProjTable   projTable   = ProjTable::find(parentId);
        ProjTable   projTableExist;

        item = new FormTreeItem();

        item.text(this.text(projTable));
        select firstonly projTableExist;
        item.children(projTableExist ? true : false);
        item.data(parentId);

        item.image(imageList.image(projTable.image()));
        item.selectedImage(imageList.image(projTable.image()));

        master  = tree.addItem(0,0,item);

        treeTreeId.insert(master, projTable.RecId);
        treeRecId.insert(projTable.RecId, master);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNode</Name>
				<Source><![CDATA[
    public void createNode(
        Common  _common,
        boolean _child,
        int     _parent,
        boolean _sort = false)
    {
        FormTreeItem    treeitem;
        ProjTable       insertAfterProjTable;
        Integer         insertAfterIdx = 0;
        ProjTable       projTable;

        if (! treeRecId.exists(_common.RecId))
        {
            switch (_common.TableId)
            {
                case tableNum(ProjTable):
                    projTable = _common;

                    if (projTable.ParentId)
                    {
                        // Update the parent node to indicate it will have a child node
                        item = new FormTreeItem();
                        item = this.findNode(projTable.ParentId);
                        item.children(true);
                        tree.setItem(item);
                    }

                    item = new FormTreeItem();

                    item.text(this.text(projTable));

                    item.children(_child);

                    item.data(projTable.ProjId);

                    item.image(imageList.image(projTable.image()));
                    item.selectedImage(imageList.image(projTable.image()));

                    if (_sort)
                    {
                        select firstonly reverse insertAfterProjTable
                        where insertAfterProjTable.ParentId == projTable.ParentId &&
                              insertAfterProjTable.ProjId    < projTable.ProjId;

                        if (insertAfterProjTable)
                        {
                            insertAfterIdx = this.findNode(insertAfterProjTable.ProjId).idx();
                        }
                        else
                        {
                            insertAfterIdx = FormTreeAdd::First;
                        }
                }

                id  = tree.addItem(_parent, insertAfterIdx, item);

                if (this.parmMarkActive())
                {
                    treeitem = tree.getItem(id);
                    treeitem.overlayImage(this.overlayimage(projTable));

                    tree.setItem( treeitem );
                }

                treeTreeId.insert(id, projTable.RecId);
                treeRecId.insert(projTable.RecId,id);

                tree.update();

                break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteNode</Name>
				<Source><![CDATA[
    public void deleteNode(RecId _recId)
    {
        tree.delete(treeRecId.lookup(_recId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>expanding</Name>
				<Source><![CDATA[
    public boolean expanding(
        int             _idx,
        FormTreeExpand  _action,
        anytype         _data)
    {
        boolean          ret    = false;
        ProjId           projIdExpand;
        ProjTable        projParent;
        ProjTable        projSibling;
        boolean          children;

        item    = tree.getItem(_idx);

        projIdExpand    = item.data();

        if (_action == FormTreeExpand::Expand && projIdExpand && ! item.stateExpandedOnce())
        {
            while select #fieldList from projParent
                order by ProjId
                where projParent.ParentId == projIdExpand
            {
                select firstonly RecId from projSibling
                    where projSibling.ParentId  == projParent.ProjId;

                children = projSibling.RecId != 0;
                this.createNode(projParent, children, _idx);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNode</Name>
				<Source><![CDATA[
    public FormTreeItem findNode(ProjId _projId)
    {
        RecId           projRecId;
        FormTreeItem    formTreeItem;

        projRecId    = ProjTable::getProjRecId(_projId);

        if (treeRecId.exists(projRecId))
        {
            formTreeItem = tree.getItem(treeRecId.lookup(projRecId));
        }

        return formTreeItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelection</Name>
				<Source><![CDATA[
    public ProjId getSelection()
    {
        if (tree.getSelection())
        {
            if (markActive && ! treeActive.exists(tree.getSelection()))
            {
                throw error("@SYS54705");
            }

            return (select firstonly ProjId from projTable where projTable.RecId == treeTreeId.lookup(tree.getSelection())).ProjId;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(
        FormTreeControl _formTree,
        ProjId          _parentId   = '')
    {
        tree        = _formTree;
        parentId    = _parentId;

        imageList   = new ImageListAppl_Proj();

        treeTreeId  = new Map(Types::Integer, Types::Int64);
        treeRecId   = new Map(Types::Int64, Types::Integer);
        treeActive  = new Map(Types::Integer, Types::Int64);

        tree.setImagelist(imageList.imageList());
    }

]]></Source>
			</Method>
			<Method>
				<Name>overlayimage</Name>
				<Source><![CDATA[
    protected int overlayimage(ProjTable  _projTable)
    {
        if (_projTable.status().activeInTree())
        {
            treeActive.insert(id,_projTable.RecId);
            return imageList.image(0);
        }

        return imageList.image(#ImageOverlayRedLock);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parentMark</Name>
				<Source><![CDATA[
    public void parentMark(int      _parent,
                           boolean  _set)
    {
        FormTreeItem    parentItem;

        parentItem  = tree.getItem(_parent);

        if (parentItem)
        {
            parentItem.children(_set);
            tree.setItem(parentItem);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreateMaster</Name>
				<Source><![CDATA[
    public boolean parmCreateMaster(boolean _createMaster = createMaster)
    {
        createMaster    = _createMaster;

        return createMaster;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMarkActive</Name>
				<Source><![CDATA[
    public boolean parmMarkActive(boolean _markActive = markActive)
    {
        markActive  = _markActive;

        return markActive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmonlyWIP</Name>
				<Source><![CDATA[
    public boolean parmonlyWIP(boolean _onlyWIP = onlyWIP)
    {
        onlyWIP  = _onlyWIP;

        return onlyWIP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects a given node in the project hierarchy tree.
    /// </summary>
    /// <param name="_projId">
    /// The project ID to be selected.
    /// </param>
    /// <remarks>
    /// If the corresponding node for the project ID to be selected has a parent, the parent node is first
    /// expanded.
    /// </remarks>
    public void selectNode(ProjId   _projId)
    {
        List            listProjectId = new List(Types::String);

        listProjectId.addStart(_projId);

        ProjTable   localProjTable;

        select firstonly ParentId from localProjTable where localProjTable.ProjId == _projId;
        ProjId parentProjId = localProjTable.ParentId;

        while (parentProjId)
        {
            listProjectId.addStart(parentProjId);
            select firstonly ParentId from localProjTable where localProjTable.ProjId == parentProjId;
            parentProjId = localProjTable.ParentId;
        }

        FormTreeItem    formTreeItem;
        // If the selected project has a parent, we need to expand the parent to expose the child.
        // We need to store the entire hierarchy to expand the tree completely.
        if (listProjectId)
        {
            ListEnumerator listEnumerator = listProjectId.getEnumerator();
            while (listEnumerator.moveNext())
            {
                formTreeItem = this.findNode(listEnumerator.current());
                if (formTreeItem)
                {
                    tree.expand(formTreeItem.idx(), FormTreeExpand::Expand);
                }
            }
        }
        else
        {
            formTreeItem = this.findNode(localProjTable.ProjId);
        }

        if (formTreeItem)
        {
            tree.select(formTreeItem.idx());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupChart</Name>
				<Source><![CDATA[
    public void setupChart()
    {
        tree.lock();

        this.buildtree();

        tree.select(tree.getRoot());
        tree.setFocus();

        tree.update();
        tree.unLock(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>text</Name>
				<Source><![CDATA[
    public str text(ProjTable _projTable)
    {
        return (strFmt("@SYS191501", _projTable.ProjId,  _projTable.Name));
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeNode</Name>
				<Source><![CDATA[
    public Integer treeNode(ProjId _projId)
    {
        if (_projId)
        {
            return treeRecId.lookup(ProjTable::getProjRecId(_projId));
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ProjTree construct (
        FormTreeControl _formTree,
        ProjTreeType    _projTreeType = ProjTreeType::ProjectHierarchy,
        ProjId          _parentId       = '')
    {
        ProjTree projTree;

        switch (_projTreeType)
        {
            case
                ProjTreeType::ProjectHierarchy:
                 projTree = new ProjTree(_formTree, _parentId);
                 break;

            default:
                projTree = new ProjTree(_formTree);
                break;
        }

        return projTree;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>