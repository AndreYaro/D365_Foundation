<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>wmsJournalTransController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WMSJournalTransController</c> class is the helper class for the <c>WMSJournalTransReport</c>
/// report.
/// </summary>
class wmsJournalTransController extends SrsReportRunController implements BatchRetryable
{
    #define.ReportName('WMSJournalTrans.Report')
    #define.ParameterShowLog('ShowLog')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
        public void prePromptModifyContract()
    {
        this.setRanges(this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
        public void preRunModifyContract()
    {
        SrsReportRdlDataContract rdlContract;
        rdlContract = this.parmReportContract().parmRdlContract();
        this.processReportParameters(this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey()),
                                      rdlContract.getValue(#ParameterShowLog));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReportParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disables or enables the <c>JournalError</c> table that is based on the print log parameter.
    /// </summary>
    /// <param name="_query">
    /// The <c>Query</c> parameter object of the report.
    /// </param>
    /// <param name="_printLog">
    /// A Boolean value that indicates whether to enable or disable the table.
    /// </param>
    /// <remarks>
    /// This method disables or enables the <c>JournalError</c> table.
    /// </remarks>
    protected void processReportParameters(Query _query, boolean  _printLog)
    {
        if ( _query)
        {
            _query.dataSourceTable(tableNum(JournalError)).enabled(_printLog);
            if (_printLog)
            {
                _query.dataSourceTable(tableNum(JournalError)).findRange(fieldNum(JournalError,RefTableId)).value(int2str(tableNum(WMSJournalTable)));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the report query ranges that are based on the caller.
    /// </summary>
    /// <param name="_query">
    /// The <c>Query</c> parameter object of the report.
    /// </param>
    /// <remarks>
    /// This method assigns values to the range of the journal ID.
    /// </remarks>
    protected void setRanges(Query _query)
    {
        WMSJournalTable         wmsJournalTable;
        QueryBuildRange         queryBuildRange;
        QueryBuildDataSource    queryBuildDataSource;

        if (this.parmArgs().caller())
        {
            if (!this.parmArgs().record().RecId)
            {
                throw error(strFmt("@SYS22338",funcName()));
            }

            if (this.parmArgs().dataset() ==  tableNum(WMSJournalTable))
            {
                wmsJournalTable = this.parmArgs().record();

                if (_query)
                {
                    queryBuildDataSource = _query.dataSourceTable(tableNum(WMSJournalTrans));

                    if (queryBuildDataSource)
                    {
                        // find the range, if it's not found add it
                        queryBuildRange = queryBuildDataSource.findRange(fieldNum(WMSJournalTrans , JournalId));
                        if (!queryBuildRange)
                        {
                            queryBuildRange = queryBuildDataSource.addRange(fieldNum(WMSJournalTrans , JournalId));
                        }
                        queryBuildRange.value(queryValue(wmsJournalTable.JournalId));
                    }
                }
            }
            else
            {
                throw error(strFmt("@SYS23396",funcName()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        WMSJournalTransController controller = new WMSJournalTransController();
        controller.parmReportName(#ReportName);
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>