<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GeneralJournalEntry_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The extensions for the <c>GeneralJournalEntry</c> table.
/// </summary>
public static class GeneralJournalEntry_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deEmptyValue_FR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the empty string.
    /// </summary>
    /// <returns>
    /// The empty string.
    /// </returns>
    /// <remarks>
    /// _entry method is used for the Data Export for France.
    /// </remarks>
    public static display String30 deEmptyValue_FR(GeneralJournalEntry _entry)
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>deJournalCode_FR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the first 5 symbols of Voucher.
    /// </summary>
    /// <returns>
    /// The first 5 symbols of the ledger voucher.
    /// </returns>
    /// <remarks>
    /// _entry method is used for Data Export for France.
    /// </remarks>
    public static display str60 deJournalCode_FR(GeneralJournalEntry _entry)
    {
        return subStr(_entry.SubledgerVoucher, 1, 5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deJournalLib_Extension_FR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the type from connected <c>TransactionLog</c> record in French.
    /// </summary>
    /// <returns>
    /// The .
    /// </returns>
    /// <remarks>
    /// _entry method is used for Data Export for France.
    /// </remarks>
    public static TransTxt deJournalLib_Extension_FR(GeneralJournalEntry _entry)
    {
        TransTxt ret;

        LedgerJournalTrans ledgerJournalTrans = LedgerJournalTrans::findJournalForVoucher(_entry.SubledgerVoucher, _entry.AccountingDate);

        if (ledgerJournalTrans)
        {
            LedgerJournalTable ledgerJournalTable = LedgerJournalTable::find(ledgerJournalTrans.JournalNum);
            if (ledgerJournalTable)
            {
                ret = ledgerJournalTable.ledgerJournalName().Name;
            }
        }

        if (!ret)
        {
            if (_entry.JournalCategory)
            {
                ret = SysLabel::labelId2String(new DictEnum(enumNum(LedgerTransType)).index2LabelId(_entry.JournalCategory), 'fr');
            }
            else
            {
                ret = SysLabel::labelId2String(new DictEnum(enumNum(TransactionLogType)).index2LabelId(TransactionLog::find(_entry.createdTransactionId).Type), 'fr');
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dePieceDate_FR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the date for transaction.
    /// </summary>
    /// <returns>
    /// The document date if specified otherwise transaction date.
    /// </returns>
    /// <remarks>
    /// _entry method is used for Data Export for France.
    /// </remarks>
    public static display TransDate dePieceDate_FR(GeneralJournalEntry _entry)
    {
        return _entry.DocumentDate ? _entry.DocumentDate : _entry.AccountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dePieceNum_Extension_FR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the document number for the transaction.
    /// </summary>
    /// <returns>
    /// The document number if specified otherwise the voucher.
    /// </returns>
    /// <remarks>
    /// _entry method is used for Data Export for France.
    /// </remarks>
    public static Voucher dePieceNum_Extension_FR(GeneralJournalEntry _entry)
    {
        CustTrans custTrans;
        VendTrans vendTrans;
        System.String dePieceNum = '';

        vendTrans = VendTrans::findVoucherDate(_entry.SubledgerVoucher, _entry.AccountingDate);

        if (vendTrans && vendTrans.Invoice)
        {
            dePieceNum = vendTrans.Invoice;
        }
        else
        {
            custTrans = CustTrans::findVoucherDate(_entry.SubledgerVoucher, _entry.AccountingDate);
            if (custTrans && custTrans.Invoice)
            {
                dePieceNum = custTrans.Invoice;
            }
        }

        if (!dePieceNum)
        {
            dePieceNum = _entry.DocumentNumber ? _entry.DocumentNumber : _entry.SubledgerVoucher;
        }

        return dePieceNum.Replace('\n', ' ').Replace('\t', ' ').Trim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasBondedTransactions_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a boolean value that indicates whether the current record has any bonded transactions.
    /// </summary>
    /// <returns>
    ///  true if the current record has any bonded transactions; otherwise, false.
    /// </returns>
    public static boolean hasBondedTransactions_RU(GeneralJournalEntry _entry)
    {
        GeneralJournalAccountEntry accountEntry;
        GeneralJournalAccountEntry_W accountEntryW;

        select firstonly RecId from accountEntry
            where accountEntry.GeneralJournalEntry == _entry.RecId
        exists join accountEntryW
            where accountEntryW.GeneralJournalAccountEntry == accountEntry.RecId
                && accountEntryW.BondBatchTrans_RU != 0;

        return accountEntry != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existForSubledgerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether activity exists for the subledger voucher.
    /// </summary>
    /// <param name="_subledgerVoucher">
    /// The subledger voucher.
    /// </param>
    /// <returns>
    /// true if activity exists for the subledger voucher; otherwise, false.
    /// </returns>
    public static boolean existForSubledgerVoucher(Voucher _subledgerVoucher)
    {
        GeneralJournalEntry generalJournalEntry;
        SubledgerVoucherGeneralJournalEntry voucherLink;

        select firstonly RecId from generalJournalEntry
            where generalJournalEntry.Ledger == Ledger::current()
        exists join voucherLink
            where voucherLink.GeneralJournalEntry == generalJournalEntry.RecId
                && voucherLink.Voucher == _subledgerVoucher;

        return generalJournalEntry != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingCurrencyBalanceForVoucherDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the accounting currency balance for the specified voucher and accounting date.
    /// </summary>
    /// <param name = "_voucher">
    /// The voucher.
    /// </param>
    /// <param name = "_voucherDataAreaId">
    /// The voucher company ID.
    /// </param>
    /// <param name = "_accountingDate">
    /// The accounting date.
    /// </param>
    /// <param name = "_balanceType">
    /// The balance type.
    /// </param>
    /// <returns>
    /// The accounting currency balance for the specified voucher and date.
    /// </returns>
    public static AmountMST getAccountingCurrencyBalanceForVoucherDate(
        Voucher _voucher,
        CompanyId _voucherDataAreaId,
        TransDate _accountingDate,
        DebitCredit _balanceType)
    {
        GeneralJournalAccountEntry generalJournalAccountEntry;
        GeneralJournalEntry generalJournalEntry;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;
        boolean isCredit;

        isCredit = _balanceType == DebitCredit::Credit;

        select sum(AccountingCurrencyAmount) from generalJournalAccountEntry
            where generalJournalAccountEntry.IsCredit == isCredit
        exists join generalJournalEntry
            where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                && generalJournalEntry.Ledger == Ledger::current()
        exists join subledgerVoucherGeneralJournalEntry
            where subledgerVoucherGeneralJournalEntry.GeneralJournalEntry == generalJournalEntry.RecId
                && subledgerVoucherGeneralJournalEntry.Voucher == _voucher
                && subledgerVoucherGeneralJournalEntry.VoucherDataAreaId == _voucherDataAreaId
                && subledgerVoucherGeneralJournalEntry.AccountingDate == _accountingDate;

        return generalJournalAccountEntry.AccountingCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingDate_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays reporting date of the transaction.
    /// </summary>
    /// <returns>
    /// The reporting date of the transaction.
    /// </returns>

    public static display ReportingDate_RU reportingDate_RU(GeneralJournalEntry _entry)
    {
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            return LedgerVoucherReportDate_RU::find(_entry.SubledgerVoucher, _entry.AccountingDate).ReportingDate;
        }

        return dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deLedgerJournalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the Journal Number.
    /// </summary>
    /// <returns>
    /// Displays the Journal Number from <c>LedgerEntryJournal</c> record if found, or empty.
    /// </returns>
    public static display LedgerJournalId deLedgerJournalId(GeneralJournalEntry _entry)
    {
        LedgerJournalId ledgerJournalId = '';

        if (_entry.LedgerEntryJournal)
        {
            LedgerEntryJournal  ledgerEntryJournal;
            select firstOnly JournalNumber from ledgerEntryJournal
                where ledgerEntryJournal.RecId == _entry.LedgerEntryJournal;

            ledgerJournalId = ledgerEntryJournal.JournalNumber;
        }

        return ledgerJournalId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>