<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>ProjInvoiceProposalPeriodicBundle</Name>
  <SourceCode>
    <Declaration><![CDATA[
/// <summary>
/// A bundle for the task <c>ProjInvoiceProposalCreateLinesTask</c>.
/// 
/// A bundle is a batch task that can contain instances of other batch tasks.
/// When the bundle is run, it will run each of the tasks it contains synchronously.
/// 
/// The intention is to spawn, for example, 10 bundles that each hold 1000 tasks, instead of 10,000 tasks.
/// </summary>
public class ProjInvoiceProposalPeriodicBundle extends BatchTaskBundle implements BatchRetryable
{
    int totalTasksInBundle = 0;

    // configurable -- set in construct()
    int maxTasksInBundle;
     
}
]]></Declaration>
    <Methods>
      <Method>
        <Name>addTask</Name>
        <Source><![CDATA[
    /// <summary>
    /// Adds a task to the bundle.
    /// </summary>
    /// <param name="_task">
    /// The task to add to the bundle.
    /// </param>
    public void addTask(RunBaseBatch _task)
    {
        super(_task);

        totalTasksInBundle++;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmMaxTasksInBundle</Name>
        <Source><![CDATA[
    public int parmMaxTasksInBundle(int _maxTasksInBundle = maxTasksInBundle)
    {
        maxTasksInBundle = _maxTasksInBundle;
        return maxTasksInBundle;
    }

]]></Source>
      </Method>
      <Method>
        <Name>getSupportedTasksList</Name>
        <Source><![CDATA[
    /// <summary>
    /// Gets a list of the batch tasks supported by this bundle.
    /// </summary>
    /// <returns>
    /// A list of class Ids corresponding to the set of supported batch tasks.
    /// </returns>
    public container getSupportedTasksList()
    {
        return [classNum(ProjInvoiceProposalCreateLinesTask)];
    }

]]></Source>
      </Method>
      <Method>
        <Name>isFull</Name>
        <Source><![CDATA[
    /// <summary>
    /// Determines whether or not the bundle is full.
    /// </summary>
    /// <returns>
    /// true if the bundle is full; otherwise, false.
    /// </returns>
    public boolean isFull()
    {
        return totalTasksInBundle >= maxTasksInBundle;
    }

]]></Source>
      </Method>
      <Method>
        <Name>isTaskLargerThanMyBaseCapacity</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Determines whether or not the specified task is larger than a bundle's base capacity.
    /// </summary>
    /// <param name="_task">
    ///    The task to compare to the bundle capacity.
    /// </param>
    /// <returns>
    ///    true if the task is larger than the bundle base capacity; otherwise, false.
    /// </returns>
    public boolean isTaskLargerThanMyBaseCapacity(RunBaseBatch _task)
    {
        // in our case, tasks are multiples of 1, so a task is too large if we're already full
        return this.isFull();
    }

]]></Source>
      </Method>
      <Method>
        <Name>construct</Name>
        <Source><![CDATA[
    public static ProjInvoiceProposalPeriodicBundle construct(int bundleMaxSize)
    {
        ProjInvoiceProposalPeriodicBundle bundle = new ProjInvoiceProposalPeriodicBundle();
        bundle.parmMaxTasksInBundle(bundleMaxSize);
        
        return bundle;
    }

]]></Source>
      </Method>
      <Method>
        <Name>canRunInNewSession</Name>
        <Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
      </Method>
      <Method>
        <Name>isRetryable</Name>
        <Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source>
      </Method>
    </Methods>
  </SourceCode>
</AxClass>