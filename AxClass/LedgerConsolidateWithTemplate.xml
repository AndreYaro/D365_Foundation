<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerConsolidateWithTemplate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerConsolidateWithTemplate</c> class performs ledger consolidation with template.
/// </summary>
internal final class LedgerConsolidateWithTemplate extends RunBaseBatch implements BatchRetryable
{
    private DialogField dialogFromDate;
    private DialogField dialogToDate;
    private DialogField dialogConsolidateTemplate;
    private DialogField dialogRebuildBalances;
    private DialogField dialogDescription;

    private TransDate fromDate;
    private TransDate toDate;
    private RefRecId consolidateTemplate;
    private LedgerConsolidateTemplateName consolidateTemplateName;
    private boolean rebuildBalances;
    private Description description;

    private static SysInstrumentationLogger logger = SysInstrumentationLoggerFactory::CreateLogger(classStr(LedgerConsolidateWithTemplate));
    private LedgerConsolidatePerformanceMonitor monitor = LedgerConsolidatePerformanceMonitor::construct(logger);

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        fromDate,
        toDate,
        consolidateTemplate,
        rebuildBalances,
        description
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean unpack(container _packedClass)
    {
        Version version = conPeek(_packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        fromDate = _fromDate;

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public TransDate parmToDate(TransDate _toDate = toDate)
    {
        toDate = _toDate;

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConsolidateTemplate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public RefRecId parmConsolidateTemplate(RefRecId _consolidateTemplate = consolidateTemplate)
    {
        consolidateTemplate = _consolidateTemplate;

        return consolidateTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRebuildBalances</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean parmRebuildBalances(boolean _rebuildBalances = rebuildBalances)
    {
        rebuildBalances = _rebuildBalances;

        return rebuildBalances;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDescription</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Description parmDescription(Description _description = description)
    {
        description = _description;

        return description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>consolidateTemplateLookup</Name>
				<Source><![CDATA[
    private void consolidateTemplateLookup(FormStringControl _control)
    {
        SysTableLookup lookup = SysTableLookup::newParameters(tableNum(LedgerConsolidateTemplate), _control, true);

        lookup.addLookupfield(fieldNum(LedgerConsolidateTemplate, Name));
        lookup.addLookupfield(fieldNum(LedgerConsolidateTemplate, Description));

        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(LedgerConsolidateTemplate));
        qbds.addRange(fieldNum(LedgerConsolidateTemplate, DataAreaId)).value(curExt());

        lookup.parmQuery(query);
        lookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>consolidateTemplateModified</Name>
				<Source><![CDATA[
    private boolean consolidateTemplateModified(FormStringControl _control)
    {
        boolean ret = _control.modified();

        if (ret)
        {
            dialogDescription.value(LedgerConsolidateTemplate::findByName(_control.valueStr()).Description);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GeneralLedger:Consolidations";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Object dialog()
    {
        DialogRunbase dialog = super();

        date currentDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        TransDate periodStartDate = LedgerFiscalCalendar::findFirstDayofPeriod(Ledger::fiscalCalendar(), currentDate);

        // Consolidation period
        dialog.addGroup("@SYS335212").columns(2);
        dialogFromDate = dialog.addFieldValue(extendedTypeStr(TransDate), periodStartDate, "@SYS131757");
        dialogToDate = dialog.addFieldValue(extendedTypeStr(TransDate), currentDate, "@SYS133935");

        dialog.addGroup('');
        dialogConsolidateTemplate = dialog.addField(extendedTypeStr(LedgerConsolidateTemplateName), "@SYS53423");
        dialogRebuildBalances = dialog.addFieldValue(extendedTypeStr(NoYesId), rebuildBalances, "@SYS4080917");

        dialog.addGroup("@SYS105215").columns(1);
        dialogDescription = dialog.addField(extendedTypeStr(Description), "@SYS25589");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    public void dialogPostRun(DialogRunbase _dialog)
    {
        dialogConsolidateTemplate.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(LedgerConsolidateWithTemplate, consolidateTemplateLookup), this);
        dialogConsolidateTemplate.registerOverrideMethod(methodStr(FormStringControl, modified), methodStr(LedgerConsolidateWithTemplate, consolidateTemplateModified), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        fromDate = dialogFromDate.value();
        toDate = dialogToDate.value();
        consolidateTemplateName = dialogConsolidateTemplate.value();
        consolidateTemplate = LedgerConsolidateTemplate::findByName(consolidateTemplateName).RecId;
        rebuildBalances = dialogRebuildBalances.value();
        description = dialogDescription.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runConsolidation</Name>
				<Source><![CDATA[
    private void runConsolidation()
    {
        if (consolidateTemplate == 0)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        using (SysInstrumentationActivityContext context = monitor.enterConsolidateWithTemplate(fromDate, toDate, consolidateTemplate, rebuildBalances))
        {
            LedgerConsolidateTemplate targetTemplate = LedgerConsolidateTemplate::find(consolidateTemplate);
            container sourceLegalEntities = LedgerConsolidateTemplateLegalEntity::getSourceLegalEntities(consolidateTemplate);
            container sourceEliminations = LedgerConsolidateTemplateElimination::getSourceEliminations(consolidateTemplate);

            LedgerConsolidateTemplateDimension::copySourceDimensions(consolidateTemplate, curExt());
            LedgerConsolidateTemplateCurrency::copySourceCurrencyConversions(consolidateTemplate, curExt());

            LedgerConsolidate ledgerConsolidate = LedgerConsolidate::newLedgerConsolidate(LedgerConsMode::Online);

            ledgerConsolidate.fromDate(fromDate);
            ledgerConsolidate.toDate(toDate);
            ledgerConsolidate.parmProcessFullBalanceRebuild(rebuildBalances);
            ledgerConsolidate.descriptionNote(description);
            ledgerConsolidate.parmLedgerConsolidateTemplateId(consolidateTemplate);

            ledgerConsolidate.companies(sourceLegalEntities);
            ledgerConsolidate.parmEliminations(sourceEliminations);

            ledgerConsolidate.fromAccount(targetTemplate.FromAccount);
            ledgerConsolidate.toAccount(targetTemplate.ToAccount);

            ledgerConsolidate.companyGroupAccounts(targetTemplate.UseConsolidateAccount);
            ledgerConsolidate.parmConsolidateAccountGroup(targetTemplate.ConsolidateAccountGroup);

            ledgerConsolidate.consolidationAmountSource(targetTemplate.ConsolidateAmountSource);
            ledgerConsolidate.consolidateAccountingCurrency(targetTemplate.ConsolidateAccountingCurrency);

            ledgerConsolidate.transferCurrent(targetTemplate.TransferCurrent);

            ledgerConsolidate.parmProcessMode(targetTemplate.ProcessMode);
            ledgerConsolidate.parmGlPostingDate(targetTemplate.GLPostingDate);
            ledgerConsolidate.parmReleaseDate(targetTemplate.ReleaseDate);

            ledgerConsolidate.transferBudget(targetTemplate.TransferBudget);
            ledgerConsolidate.fromModel(targetTemplate.FromBudgetModel);
            ledgerConsolidate.toModel(targetTemplate.ToBudgetModel);
            ledgerConsolidate.parmBudgetExchangeRateType(targetTemplate.BudgetExchangeRateType);

            ledgerConsolidate.parmInBatch(this.parmInBatch());

            ledgerConsolidate.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDateRange</Name>
				<Source><![CDATA[
    private boolean validateDateRange()
    {
        boolean ret = true;

        TransDate selectedFromDate = this.parmFromDate();
        TransDate selectedToDate = this.parmToDate();

        if (!selectedFromDate)
        {
            ret = checkFailed("@SYS97591");
        }

        if (!selectedToDate)
        {
            ret = checkFailed("@SYS97592");
        }

        if (selectedFromDate && selectedToDate && selectedFromDate > selectedToDate)
        {
            ret = checkFailed("@SYS16982");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateConsolidateTemplate</Name>
				<Source><![CDATA[
    private boolean validateConsolidateTemplate()
    {
        boolean ret = true;

        RefRecId selectedTemplateId = this.parmConsolidateTemplate();

        if (selectedTemplateId == 0)
        {
            ret = checkFailed("@GeneralLedger:LedgerConsolidateTemplateNoTemplateSelected");
        }

        if (selectedTemplateId)
        {
            LedgerConsolidateTemplate template = LedgerConsolidateTemplate::find(selectedTemplateId);
            
            LedgerConsolidateTemplateLegalEntity templateLegalEntitiy;

            select count(RecId) from templateLegalEntitiy
                where templateLegalEntitiy.ConsolidateTemplate == selectedTemplateId;

            if ((template.TransferCurrent == NoYes::No && template.TransferBudget == NoYes::No) || templateLegalEntitiy.RecId == 0)
            {
                ret = checkFailed("@GeneralLedger:ConsolidateOnlineMissingConfigurations");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = super(_calledFrom);

        ret = ret & this.validateDateRange();

        ret = ret & this.validateConsolidateTemplate();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        LedgerConsolidateWithTemplate ledgerConsolidateWithTemplate = new LedgerConsolidateWithTemplate();

        if (ledgerConsolidateWithTemplate.prompt())
        {
            ledgerConsolidateWithTemplate.getFromDialog();
            ledgerConsolidateWithTemplate.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.runConsolidation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>