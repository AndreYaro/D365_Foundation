<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IPriceAttributeProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is the interface for price attribute providers to render FinOps forms.
///
/// There are 4 types of price attribute supported:
/// - Text: The column will be rendered as a string control with lookup(lookupAllowedValues) and jumpRef(jumpRef) support.
/// - Reference: The column will be rendered as a refrence group control with RecId returned by referenceFieldNum.
/// - Integer: The column will be rendered as an integer control.
/// - Enum: The column will be rendered as a combo box based on the EnumId returned by enumId.
/// </summary>
public interface IPriceAttributeProvider
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>lookupAllowedValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// For attributes with type "Text", the lookup experience will be handled by calling this method.
    /// The implementation is suggested to use <c>SysTableLookup</c> to build runtime lookup dialogs.
    /// </summary>
    /// <param name = "attribute">The attribute definition.</param>
    /// <param name = "formControl">The form control.</param>
    public void lookupAllowedValues(PriceAttributeDefinition attribute, FormStringControl formControl)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// For attributes with type "Reference" - aka the RefRecId. AX has a builtin support for showing the lookup dialog.
    /// For most cases, it will be simply calling <c>formControl.lookupReference();</c>. It goes to the default ReferenceGroup implementation.
    /// When custom logic is needed, the one can leverage <c>SysReferenceTableLookup</c>.
    /// </summary>
    /// <param name = "attribute">The attribute definition.</param>
    /// <param name = "formControl">The form control.</param>
    /// <returns>The table buffer selected.</returns>
    public Common lookupReference(PriceAttributeDefinition attribute, FormReferenceControl formControl)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// When user clicks(or select for details) for the cell, jumpRef is called  to jump to its details.
    /// If there's no detail for this case, like product attribute - "Brand" for instance, just <c>return;</c>.
    /// </summary>
    /// <param name = "attribute">The attribute definition.</param>
    /// <param name = "formControl">The form control.</param>
    public void jumpRef(PriceAttributeDefinition attribute, FormControl formControl)
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>dataType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the data type of the price attribute.
    /// </summary>
    /// <returns>The data type of the price attribute.</returns>
    public PriceAttributeDataType dataType(PriceAttributeDefinition attribute)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>referenceFieldNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// When an attribute is a "Reference" type, in order to render <c>FormReferenceGroupControl</c>, the framework needs the field id field number.
    /// </summary>
    /// <param name = "attribute">The attribute definition.</param>
    /// <returns>The field number on <c>PricingRuleApplicability</c> table.</returns>
    public FieldId referenceFieldNum(PriceAttributeDefinition attribute)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSupported</Name>
				<Source><![CDATA[
    /// <summary>
    /// The system finds the appropriate price attribute provider by calling this method.
    /// So that a provider can handle more than 1 type of price attributes.
    /// </summary>
    /// <param name = "attribute">The attribute definition.</param>
    /// <returns>A boolean indicating the price attribute is supported by this provider.</returns>
    boolean isSupported(PriceAttributeDefinition attribute)
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>source</Name>
				<Source><![CDATA[
    /// <summary>
    /// For predefined attributes, this returns the source.
    /// It's called when user selects a predefined attribute, the source will be automatically populated.
    /// </summary>
    /// <returns>The price attribute source.</returns>
    PriceAttributeSource source(PriceAttributeDefinition attribute)
    {

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>