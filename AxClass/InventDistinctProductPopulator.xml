<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDistinctProductPopulator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class populates the <c>InventDistinctProduct</c> table and <c>InventDistinctProductDefaultSalesSetup</c> with data.
/// </summary>
/// <remarks>
/// This population code must be called before the first time a company needs to:
///     a) Use master planning after an upgrade, or enabling BOM circularity functionality.
///     b) For using the product nomenclature
///     c) For using the extended product search
///     d) For using the default order setting per product variant functionality
/// </remarks>
public class InventDistinctProductPopulator extends RunBaseBatch implements BatchRetryable
{
    private static boolean inventDistinctProductPopulatorInventItemOrderSetupUpgradeFlightIsEnabled = InventDistinctProductPopulatorInventItemOrderSetupUpgradeFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.populateInventDistinctProductCurrentCompany();
        
        this.populateInventDistinctProductCrossCompany();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateInventDistinctProductCurrentCompany</Name>
				<Source><![CDATA[
    private void populateInventDistinctProductCurrentCompany()
    {
        if (inventDistinctProductPopulatorInventItemOrderSetupUpgradeFlightIsEnabled)
        {
            boolean isProductVariantFeaturesReady = InventParameters::findOrCreate().ProductVariantFeaturesReady;

            if (isProductVariantFeaturesReady)
            {
                ttsBegin;

                this.populateInventDistinctProduct();
        
                this.populateInventDistinctProductDefaultSalesSetup();

                ttsCommit;
            }
            else
            {
                ttsBegin;
                
                InventParameters parameters;
                select pessimisticlock firstonly parameters
                   where parameters.Key == 0;

                this.setProductVariantFeaturesReady(parameters);

                this.populateInventDistinctProduct();
        
                this.populateInventDistinctProductDefaultSalesSetup();

                InventItemOrderSetupUpgrade::upgradeData();

                ttsCommit;
            }

        }
        else
        {
            ttsBegin;

            this.populateInventDistinctProduct();
        
            this.populateInventDistinctProductDefaultSalesSetup();

            ttsCommit;
        }

        BOMLevelCalc::setBOMLevelRecalculationNeeded();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateInventDistinctProductCrossCompany</Name>
				<Source><![CDATA[
    private void populateInventDistinctProductCrossCompany()
    {
        DataAreaId currentCompany = curExt();

        if (InventTableDataSharingFeature::isEnabled())
        {
            SetEnumerator crossCompanySet = SysDataSharingPolicy::crossCompaniesByCompanyAndTable(curExt(), tableStr(InventTable));
        
            while (crossCompanySet.moveNext())
            {
                DataAreaId company = crossCompanySet.current();
                if (currentCompany == company && inventDistinctProductPopulatorInventItemOrderSetupUpgradeFlightIsEnabled)
                {
                    // The original current company is already processed, so skip it
                    continue;
                }

                changecompany(company)
                {
                    this.populateInventDistinctProductCurrentCompany();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateInventDistinctProductDefaultSalesSetup</Name>
				<Source><![CDATA[
    private void populateInventDistinctProductDefaultSalesSetup()
    {
        InventDistinctProductDefaultSalesSetup  inventDistinctProductDefaultSalesSetup;
        InventDistinctProduct                   inventDistinctProduct;
      
        delete_from inventDistinctProductDefaultSalesSetup;

        while select inventDistinctProduct
        {
            InventDistinctProductDefaultSalesSetup::insertProduct(inventDistinctProduct, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateInventDistinctProduct</Name>
				<Source><![CDATA[
    private void populateInventDistinctProduct()
    {
        InventDistinctProduct                 inventDistinctProduct;
        InventTable                           inventTable;
        InventTableExpanded                   inventTableExpanded;
        InventDimId                           inventDimIdBlank = InventDim::inventDimIdBlank();
        
        delete_from inventDistinctProduct;

        //Insert distinct items
        insert_recordset inventDistinctProduct (ItemId, InventDimId, Product, PmfProductType, PmfPlanningItemId, ProductLifecycleStateId)
            select ItemId, inventDimIdBlank, Product, PmfProductType, PmfPlanningItemId, ProductLifecycleStateId
                from inventTable
                exists join inventTableExpanded
                    where inventTableExpanded.ItemId == inventTable.itemId
                       && inventTableExpanded.ProductSubtype == EcoResProductSubtype::Product;

        this.populateInventDistinctProductForVariants();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProductVariantFeaturesReady</Name>
				<Source><![CDATA[
    private void setProductVariantFeaturesReady(InventParameters _parameters)
    {
        if (!_parameters.ProductVariantFeaturesReady)
        {
            _parameters.ProductVariantFeaturesReady = true;
            _parameters.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateInventDistinctProductForVariants</Name>
				<Source><![CDATA[
    private void populateInventDistinctProductForVariants()
    {
        InventDistinctProductVariantPopulator::construct().execute();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static InventDistinctProductPopulator construct()
    {
        return new InventDistinctProductPopulator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        InventDistinctProductPopulator inventDistinctProductPopulator = InventDistinctProductPopulator::construct();
        inventDistinctProductPopulator.runoperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>