<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendTable_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(mapStr(CustVendTable))]
public final class CustVendTable_ApplicationSuite_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>balanceMST</Name>
				<Source><![CDATA[
    public AmountMST balanceMST(FromDate _fromDate, 
        ToDate _toDate)
    {
        CustVendTrans custVendTrans;

        AmountMST ret = next balanceMST(_fromDate, _toDate);

        if (!CustAccountStatementContext_FR::instance())
        {
            return ret;
        }
        else
        {
            CustAccountStatementContext_FR reportContext = CustAccountStatementContext_FR::instance();
            PostingProfile custPostingProfile = reportContext.parmPostingProfile();
            str vouchers = reportContext.parmVouchers();

            Query query;
            query = new Query();

            QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(CustTrans));
        
            queryBuildDataSource.addRange(fieldNum(CustTrans, TransDate)).value(SysQueryRangeUtil::dateRange(_fromDate, _toDate));
            queryBuildDataSource.addRange(fieldNum(CustTrans, AccountNum)).value(this.AccountNum);
            queryBuildDataSource.addRange(fieldNum(CustTrans, PostingProfile)).value(custPostingProfile);
            queryBuildDataSource.addRange(fieldNum(CustTrans, Voucher)).value(vouchers);

            queryBuildDataSource.addSelectionField(fieldNum(CustTrans, AmountMST), SelectionField::Sum);

            QueryRun queryRun = new QueryRun(query);

            queryRun.next();

            custVendTrans = queryRun.get(tableNum(CustTrans));
        }

        return custVendTrans.AmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openBalanceMST</Name>
				<Source><![CDATA[
    public AmountMST openBalanceMST(FromDate _fromDate,
        ToDate _toDate,
        TransDate _assessmentDate)
    {
        CustVendTrans custVendTrans;
        CustVendTransOpen custVendTransOpen;
        CustVendSettlement custVendSettlement;
        AmountMST openBalanceMST;
        boolean hasAccess;

        openBalanceMST = next openBalanceMST(_fromDate, _toDate, _assessmentDate);

        if (!CustAccountStatementContext_FR::instance())
        {
            return openBalanceMST;
        }
        else
        {
            CustAccountStatementContext_FR reportContext = CustAccountStatementContext_FR::instance();
            PostingProfile custPostingProfile = reportContext.parmPostingProfile();
            str vouchers = reportContext.parmVouchers();

            if (_assessmentDate)
            {
                Query query;
                query = new Query();

                QueryBuildDataSource queryBuildDataSource, queryBuildDataSourceSettlement;
                queryBuildDataSource = query.addDataSource(tableNum(CustTrans));

                queryBuildDataSource.addRange(fieldNum(CustTrans, TransDate)).value(SysQueryRangeUtil::dateRange(_fromDate, _toDate));
                queryBuildDataSource.addRange(fieldNum(CustTrans, AccountNum)).value(this.AccountNum);
                queryBuildDataSource.addRange(fieldNum(CustTrans, PostingProfile)).value(custPostingProfile);
                queryBuildDataSource.addRange(fieldNum(CustTrans, Voucher)).value(vouchers);

                queryBuildDataSourceSettlement = queryBuildDataSource.addDataSource(tableNum(CustSettlement));
                queryBuildDataSourceSettlement.addRange(fieldNum(CustSettlement, TransDate)).value(strFmt('> %1', _assessmentDate));
                queryBuildDataSourceSettlement.addRange(fieldNum(CustSettlement, AccountNum)).value(this.AccountNum);

                queryBuildDataSourceSettlement.addSelectionField(fieldNum(CustSettlement, SettleAmountMST), SelectionField::Sum);
                queryBuildDataSourceSettlement.addSelectionField(fieldNum(CustSettlement, ExchAdjustment), SelectionField::Sum);
                queryBuildDataSourceSettlement.addGroupByField(fieldNum(CustSettlement, AccountNum));

                QueryRun queryRun = new QueryRun(query);

                queryRun.next();

                custVendSettlement = queryRun.get(tableNum(CustSettlement));

                openBalanceMST = custVendSettlement.SettleAmountMST + custVendSettlement.ExchAdjustment;

                openBalanceMST += this.openBalanceMST(_fromDate, _toDate);
            }
            else
            {
                Query query;
                query = new Query();

                QueryBuildDataSource queryBuildDataSource, queryBuildDataSourceOpen;
                queryBuildDataSource = query.addDataSource(tableNum(CustTrans));

                queryBuildDataSource.addRange(fieldNum(CustTrans, AccountNum)).value(this.AccountNum);
                queryBuildDataSource.addRange(fieldNum(CustTrans, PostingProfile)).value(custPostingProfile);
                queryBuildDataSource.addRange(fieldNum(CustTrans, Voucher)).value(vouchers);

                queryBuildDataSourceOpen = queryBuildDataSource.addDataSource(tableNum(CustTransOpen));
                queryBuildDataSourceOpen.addRange(fieldNum(CustTransOpen, TransDate)).value(SysQueryRangeUtil::dateRange(_fromDate, _toDate));
                queryBuildDataSourceOpen.addRange(fieldNum(CustTransOpen, AccountNum)).value(this.AccountNum);

                queryBuildDataSourceOpen.addSelectionField(fieldNum(CustTransOpen, AmountMST), SelectionField::Sum);

                QueryRun queryRun = new QueryRun(query);

                queryRun.next();

                custVendTransOpen = queryRun.get(tableNum(CustTransOpen));

                openBalanceMST = custVendTransOpen.AmountMST;
            }
        }

        return openBalanceMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>balanceCurrency</Name>
				<Source><![CDATA[
    public AmountCur balanceCurrency(FromDate _fromDate,
        ToDate _toDate,
        CurrencyCode _fromCurrency,
        CurrencyCode _toCurrency)
    {
        CustVendTrans custVendTrans;

        AmountCur balanceCur = next balanceCurrency(_fromDate, _toDate, _fromCurrency, _toCurrency);

        if (!CustAccountStatementContext_FR::instance())
        {
            return balanceCur;
        }
        else
        {
            CustAccountStatementContext_FR reportContext = CustAccountStatementContext_FR::instance();
            PostingProfile custPostingProfile = reportContext.parmPostingProfile();
            str vouchers = reportContext.parmVouchers();

            Query query;
            query = new Query();

            QueryBuildDataSource queryBuildDataSource;
            queryBuildDataSource = query.addDataSource(tableNum(CustTrans));
        
            queryBuildDataSource.addRange(fieldNum(CustTrans, TransDate)).value(SysQueryRangeUtil::dateRange(_fromDate, _toDate));
            queryBuildDataSource.addRange(fieldNum(CustTrans, AccountNum)).value(this.AccountNum);
            queryBuildDataSource.addRange(fieldNum(CustTrans, PostingProfile)).value(custPostingProfile);
            queryBuildDataSource.addRange(fieldNum(CustTrans, Voucher)).value(vouchers);

            if (_toCurrency)
            {
                queryBuildDataSource.addRange(fieldNum(CustTrans, CurrencyCode)).value(queryRange(_fromCurrency, _toCurrency));
            }
            else
            {
                queryBuildDataSource.addRange(fieldNum(CustTrans, CurrencyCode)).value('>= ' + _fromCurrency);
            }

            queryBuildDataSource.addSelectionField(fieldNum(CustTrans, AmountCur), SelectionField::Sum);

            QueryRun queryRun = new QueryRun(query);

            queryRun.next();

            custVendTrans = queryRun.get(tableNum(CustTrans));
        }

        return custVendTrans.AmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openBalanceCur</Name>
				<Source><![CDATA[
    public AmountCur openBalanceCur(TransDate _fromDate,
        TransDate _toDate,
        TransDate _assessmentDate,
        CurrencyCode _currency)
    {
        CustVendTrans custVendTrans;
        CustVendTransOpen custVendTransOpen;
        CustVendSettlement custVendSettlement;
        AmountCur openBalanceCur;

        openBalanceCur = next openBalanceCur(_fromDate, _toDate, _assessmentDate, _currency);

        if (!CustAccountStatementContext_FR::instance())
        {
            return openBalanceCur;
        }
        else
        {
            CustAccountStatementContext_FR reportContext = CustAccountStatementContext_FR::instance();
            PostingProfile custPostingProfile = reportContext.parmPostingProfile();
            str vouchers = reportContext.parmVouchers();

            if (_assessmentDate)
            {
                Query query;
                query = new Query();

                QueryBuildDataSource queryBuildDataSource, queryBuildDataSourceSettlement;
                queryBuildDataSource = query.addDataSource(tableNum(CustTrans));
                                
                queryBuildDataSource.addRange(fieldNum(CustTrans, TransDate)).value(SysQueryRangeUtil::dateRange(_fromDate, _toDate));
                queryBuildDataSource.addRange(fieldNum(CustTrans, AccountNum)).value(this.AccountNum);
                queryBuildDataSource.addRange(fieldNum(CustTrans, PostingProfile)).value(custPostingProfile);
                queryBuildDataSource.addRange(fieldNum(CustTrans, Voucher)).value(vouchers);
                queryBuildDataSource.addRange(fieldNum(CustTrans, CurrencyCode)).value(_currency);

                queryBuildDataSourceSettlement = queryBuildDataSource.addDataSource(tableNum(CustSettlement));
                queryBuildDataSourceSettlement.addRange(fieldNum(CustSettlement, TransDate)).value(strFmt('> %1', _assessmentDate));
                queryBuildDataSourceSettlement.addRange(fieldNum(CustSettlement, AccountNum)).value(this.AccountNum);

                queryBuildDataSourceSettlement.addSelectionField(fieldNum(CustSettlement, SettleAmountCur), SelectionField::Sum);
                queryBuildDataSourceSettlement.addGroupByField(fieldNum(CustSettlement, AccountNum));

                QueryRun queryRun = new QueryRun(query);

                queryRun.next();

                custVendSettlement = queryRun.get(tableNum(CustSettlement));

                openBalanceCur = custVendSettlement.SettleAmountCur;
                openBalanceCur += this.openBalanceCur(_fromDate, _toDate, dateNull(), _currency);
            }
            else
            {
                Query query;
                query = new Query();

                QueryBuildDataSource queryBuildDataSource, queryBuildDataSourceOpen;
                queryBuildDataSource = query.addDataSource(tableNum(CustTrans));

                queryBuildDataSource.addRange(fieldNum(CustTrans, AccountNum)).value(this.AccountNum);
                queryBuildDataSource.addRange(fieldNum(CustTrans, PostingProfile)).value(custPostingProfile);
                queryBuildDataSource.addRange(fieldNum(CustTrans, CurrencyCode)).value(_currency);
                queryBuildDataSource.addRange(fieldNum(CustTrans, Voucher)).value(vouchers);

                queryBuildDataSourceOpen = queryBuildDataSource.addDataSource(tableNum(CustTransOpen));
                queryBuildDataSourceOpen.addRange(fieldNum(CustTransOpen, TransDate)).value(SysQueryRangeUtil::dateRange(_fromDate, _toDate));
                queryBuildDataSourceOpen.addRange(fieldNum(CustTransOpen, AccountNum)).value(this.AccountNum);

                queryBuildDataSourceOpen.addSelectionField(fieldNum(CustTransOpen, AmountCur), SelectionField::Sum);

                QueryRun queryRun = new QueryRun(query);

                queryRun.next();

                custVendTransOpen = queryRun.get(tableNum(CustTransOpen));

                openBalanceCur = custVendTransOpen.AmountCur;
            }
        }

        return openBalanceCur;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>