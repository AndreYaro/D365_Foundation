<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchTableLedgerCovTypeAXL</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class PurchTableLedgerCovTypeAXL implements SalesPurchTableLedgerCovIUpdateLedgerCov
{
    private LedgerCoverage ledgerCoverage;
    private PurchTable purchTable;
    private PurchTotals purchTotals;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    public void init(SalesPurchTableLedgerCovContract _contract)
    {
        ledgerCoverage = _contract.parmLedgerCoverage();
        purchTable = _contract.parmSalesPurchTableInterface().parmSalesPurchTable();
        purchTotals = _contract.parmPurchTotals();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerCov</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates cash flow forecasts.
    /// </summary>
    [Wrappable(false)]
    public void updateLedgerCov()
    {
        #ISOCountryRegionCodes

        TaxCov              taxCov;

        PurchLine           purchLine;

        TransDate           deliveryDate;

        PurchQty            qtyPurch;

        Delivery2Invoice    delivery2Invoice    = PurchParameters::find().Delivery2Invoice;

        VendPaymSched       vendPaymSched;
        VendPaymSchedLine   vendPaymSchedLine;
        VendInvoiceJour     tmpInvoiceJour;

        TransDate           oldDate;
        int                 dateDifference;

        boolean             purchTablePaymentScheduleCreated;
        PaymTerm            paymTerm;

        SourceDocumentLine                      sourceDocumentLine;
        AccDistLedgerDimAmountList              accDistLedgerDimAmountList;
        AccDistLedgerDimAmountListEnumerator    accDistLedgerDimAmountListEnumerator;
        MarkupTrans                             markupTrans;
        DimensionDefault                        defaultDimension;

        // <GEERU>
        PurchTotals_TransLedgerCov  purchTotals_TransLedgerCov;
        PurchLine_W                 purchLine_W;

        AmountCur           lineValueTmp;
        Map                 lineValueDetails = new Map(Types::Container, Types::Real);
        container           markupTaxDetailsTable;
        container           markupTaxDetailsLine;
        int                 i;
        VendPaymSchedLine   vendPaymSchedLineTotals;
        AmountCur           amount, totalAmount, remainTotalAmount;
        AmountCur           taxAmount, totalTaxAmount, remainTaxAmount;
        AmountCur           markupAmount, totalMarkupAmount, remainMarkupAmount;
        AmountCur           markupTableAmount, totalMarkupTableAmount, remainMarkupTableAmount;
        AmountCur           markupLineAmount, totalMarkupLineAmount, remainMarkupLineAmount;
        AmountCur           markupTableTaxAmount, totalMarkupTableTaxAmount, remainMarkupTableTaxAmount;
        AmountCur           totalMarkupTableItemTaxAmount;
        AmountCur           markupLineTaxAmount, totalMarkupLineTaxAmount, remainMarkupLineTaxAmount;
        boolean             countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);

        void ledgerCoverageUpdate_RU(AmountCur  _totalAmount,
                                     AmountCur  _taxAmount,
                                     AmountCur  _markupAmount,
                                     AmountCur  _markupTableAmount,
                                     AmountCur  _markupLineAmount,
                                     AmountCur  _markupTableTaxAmount,
                                     AmountCur  _markupLineTaxAmount,
                                     TransDate  _futuresDate)
        {
            RefRecId accountVendRecID, accountClearingRecID;
            if (! _totalAmount)
            {
                return;
            }

            accountVendRecID     = LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(purchTable.accountVend());
            accountClearingRecID = LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(purchTable.accountClearing());
            ledgerCoverage.splitLinesMap_RU(lineValueDetails);
            ledgerCoverage.updateSum(deliveryDate,
                                     LedgerPostingType::VendBalance,
                                     accountVendRecID,
                                     purchTable.DefaultDimension,
                                     purchTable.CurrencyCode,
                                   - (_totalAmount - _taxAmount - _markupAmount),
                                     0,
                                     accountClearingRecID,
                                     purchTable.Payment,
                                     purchTable.clearingPeriod(),
                                     purchTable.paymDayId(),
                                     _futuresDate);
            ledgerCoverage.splitLinesClear_RU();

            ledgerCoverage.copyLinesMap_RU(lineValueDetails);
            ledgerCoverage.updateSum(deliveryDate,
                                     LedgerPostingType::VendBalance,
                                     accountVendRecID,
                                     purchTable.DefaultDimension,
                                     purchTable.CurrencyCode,
                                   - _markupTableAmount,
                                     0,
                                     accountClearingRecID,
                                     purchTable.Payment,
                                     purchTable.clearingPeriod(),
                                     purchTable.paymDayId(),
                                     _futuresDate);

            if (_markupTableTaxAmount)
            {
                ledgerCoverage.updateSum(deliveryDate,
                                         LedgerPostingType::VendBalance,
                                         accountVendRecID,
                                         purchTable.DefaultDimension,
                                         purchTable.CurrencyCode,
                                       - _markupTableTaxAmount,
                                         0,
                                         accountClearingRecID,
                                         purchTable.Payment,
                                         purchTable.clearingPeriod(),
                                         purchTable.paymDayId(),
                                         _futuresDate);
            }
            ledgerCoverage.copyLinesClear_RU();

            if (_markupLineTaxAmount)
            {
                ledgerCoverage.splitLinesMap_RU(Map::create(markupTaxDetailsLine));
                ledgerCoverage.updateSum(deliveryDate,
                                         LedgerPostingType::VendBalance,
                                         accountVendRecID,
                                         purchTable.DefaultDimension,
                                         purchTable.CurrencyCode,
                                       - (_markupLineTaxAmount),
                                         0,
                                         accountClearingRecID,
                                         purchTable.Payment,
                                         purchTable.clearingPeriod(),
                                         purchTable.paymDayId(),
                                         _futuresDate);
            }

            ledgerCoverage.splitLinesMap_RU(Map::create(purchTotals.tax().totalTaxDetailsExclMarkup_RU()));
            ledgerCoverage.updateSum(deliveryDate,
                                     LedgerPostingType::VendBalance,
                                     accountVendRecID,
                                     purchTable.DefaultDimension,
                                     purchTable.CurrencyCode,
                                   - (_taxAmount - _markupTableTaxAmount - _markupLineTaxAmount),
                                     0,
                                     accountClearingRecID,
                                     purchTable.Payment,
                                     purchTable.clearingPeriod(),
                                     purchTable.paymDayId(),
                                     _futuresDate);

            ledgerCoverage.splitLinesMap_RU(purchTotals.totalMarkupLineDetails_RU());
            ledgerCoverage.updateSum(deliveryDate,
                                     LedgerPostingType::VendBalance,
                                     accountVendRecID,
                                     purchTable.DefaultDimension,
                                     purchTable.CurrencyCode,
                                   - _markupLineAmount,
                                     0,
                                     accountClearingRecID,
                                     purchTable.Payment,
                                     purchTable.clearingPeriod(),
                                     purchTable.paymDayId(),
                                     _futuresDate);
            ledgerCoverage.splitLinesClear_RU();
        }
        // </GEERU>

        if (purchTable.mustBeCovPlanned())
        {
            const boolean doAsynchronousLineProcessing = true;

            // Create distributions as needed.
            if (SourceDocumentHeader::find(purchTable.SourceDocumentHeader).AccountingStatus == SourceDocumentAccountingStatus::InProcess)
            {
                SourceDocumentProcessorFacade::submitSourceDocumentLinesForHeader(purchTable, SourceDocumentLineAccountingStatus::FullyDistributed, null, curUserId(), doAsynchronousLineProcessing);
            }

            if (purchTable.checkPaymSchedWithChangeRequestNotRequiredAXL()
            // <GBR>
            && purchTable.createVendTrans_BR()
            // </GBR>
            )
            {
                if (! VendPaymSched::exist(purchTable.TableId, purchTable.RecId))
                {
                    purchTable.createPaymentSched();
                    purchTablePaymentScheduleCreated = true;

                    tmpInvoiceJour.initFromPurchTable(purchTable);
                    tmpInvoiceJour.initFromPurchTotals(purchTotals);

                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES]))
                    {
                        paymTerm = purchTable.payment();

                        tmpInvoiceJour.FixedDueDate = max(
                            DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                            paymTerm.due(
                                purchTable.DeliveryDate,
                                purchTable.paymDayId(),
                                false,
                                PaymDueDateLimit_ES::getCurrentValues(paymTerm.DueDateLimitGroupId_ES)));

                        tmpInvoiceJour.DueDate = tmpInvoiceJour.FixedDueDate;
                        tmpInvoiceJour.DeliveryDate_ES = purchTable.DeliveryDate;
                    }
                    else
                    {
                        tmpInvoiceJour.FixedDueDate = max(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), purchTable.DeliveryDate);
                        tmpInvoiceJour.DueDate = tmpInvoiceJour.FixedDueDate;
                    }
                    tmpInvoiceJour.CashDiscDate     = tmpInvoiceJour.DueDate;
                    tmpInvoiceJour.InvoiceDate      = tmpInvoiceJour.DueDate;

                    tmpInvoiceJour.insert();

                    purchTable.copyPaymentSched(tmpInvoiceJour);
                    tmpInvoiceJour.createPaymentSchedule();

                    vendPaymSched = VendPaymSched::find(tmpInvoiceJour.TableId, tmpInvoiceJour.RecId);
                }
                else
                {
                    vendPaymSched = VendPaymSched::find(purchTable.TableId, purchTable.RecId);
                }
            }

            //ledgerCoverage.init(purchTable);
            taxCov                  = new TaxCov(ledgerCoverage);

            while select * from purchLine
                index hint PurchLineIdx
                    where purchLine.PurchId == purchTable.PurchId
                    && !purchLine.IsDeleted
                join RecId from sourceDocumentLine
                    where sourceDocumentLine.RecId == purchLine.SourceDocumentLine
            {
                if (purchLine.mustBeCovPlanned()
                    // <GBR>
                    && purchTable.createVendTrans_BR()
                    // </GBR>
                    )
                {
                    deliveryDate    = max(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), purchLine.deliveryDate());
                    oldDate      = deliveryDate;

                    if (delivery2Invoice)
                        deliveryDate = PaymTerm::advanceDate(delivery2Invoice, deliveryDate);

                    dateDifference = deliveryDate - oldDate;

                    qtyPurch = purchLine.RemainPurchFinancial + purchLine.RemainPurchPhysical;

                    if (qtyPurch)
                    {
                        // <GEERU>
                        if (countryRegion_RU)
                        {
                            purchLine_W = purchLine.purchLine_W();
                            ledgerCoverage.parmPostingProfile_RU(purchLine_W.PostingProfile_RU ? purchLine_W.PostingProfile_RU : purchTable.PostingProfile);
                            ledgerCoverage.parmInventProfileType_RU(purchLine.inventProfileType_RU());
                        }
                        // </GEERU>
                        // Create distributions as needed.
                        SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(purchLine);
                        accDistLedgerDimAmountList = AccDistLedgerDimAmountList::construct();
                        SourceDocumentLineProvider::getAccDistLedgerDimAmountList(sourceDocumentLine.RecId, accDistLedgerDimAmountList, false);
                        accDistLedgerDimAmountListEnumerator = accDistLedgerDimAmountList.getEnumerator();
                        while (accDistLedgerDimAmountListEnumerator.moveNext())
                        {
                            this.updateSumPurchLine(purchLine,accDistLedgerDimAmountListEnumerator.current(),deliveryDate,ledgerCoverage);
                            // <GEERU>
                            if (countryRegion_RU)
                            {
                                if (lineValueDetails.exists([ ledgerCoverage.parmPostingProfile_RU(), ledgerCoverage.parmInventProfileType_RU() ]))
                                {
                                    lineValueTmp = lineValueDetails.lookup([ledgerCoverage.parmPostingProfile_RU(), ledgerCoverage.parmInventProfileType_RU()]);
                                }
                                else
                                {
                                    lineValueTmp = 0;
                                }
                                lineValueTmp += accDistLedgerDimAmountListEnumerator.current().parmTransactionCurrencyAmount();

                                lineValueDetails.insert([ ledgerCoverage.parmPostingProfile_RU(), ledgerCoverage.parmInventProfileType_RU() ], lineValueTmp);
                            }
                            // </GEERU>
                        }
                    }
                }
            }

            deliveryDate = max(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), purchTable.DeliveryDate);

            if (delivery2Invoice)
                deliveryDate = PaymTerm::advanceDate(delivery2Invoice, deliveryDate);

            // <GEERU>
            if (countryRegion_RU)
            {
                ledgerCoverage.copyLinesClear_RU();
                ledgerCoverage.splitLinesMap_RU(lineValueDetails);
            }
            // </GEERU>

            // <GBR>
            if (purchTable.createVendTrans_BR())
            {
                // </GBR>
                if (purchTable.checkPaymSchedWithChangeRequestNotRequiredAXL())
                {
                    // <GEERU>
                    if (countryRegion_RU)
                    {
                        totalAmount             = purchTotals.purchTotalAmount();
                        totalTaxAmount          = purchTotals.purchTaxTotal();
                        totalMarkupAmount       = purchTotals.purchMarkup();
                        totalMarkupTableAmount  = purchTotals.purchMarkup() - purchTotals.totalMarkupLine_RU();
                        totalMarkupLineAmount   = purchTotals.totalMarkupLine_RU();
                        [markupTaxDetailsTable,
                     totalMarkupTableTaxAmount,
                     totalMarkupTableItemTaxAmount,
                     markupTaxDetailsLine,
                     totalMarkupLineTaxAmount] = purchTotals.tax().totalTaxDetailsMarkup_RU();

                        totalMarkupTableTaxAmount += totalMarkupTableItemTaxAmount;

                        remainTotalAmount       = totalAmount;
                        remainTaxAmount         = totalTaxAmount;
                        remainMarkupAmount      = totalMarkupAmount;
                        remainMarkupTableAmount = totalMarkupTableAmount;
                        remainMarkupLineAmount  = totalMarkupLineAmount;
                        remainMarkupTableTaxAmount = totalMarkupTableTaxAmount;
                        remainMarkupLineTaxAmount  = totalMarkupLineTaxAmount;

                        select count(RecId), sum(DueAmount) from vendPaymSchedLineTotals
                        where vendPaymSchedLineTotals.FatherRecID == vendPaymSched.RecId;

                        if (vendPaymSchedLineTotals.DueAmount)
                        {
                            while select vendPaymSchedLine
                            where vendPaymSchedLine.FatherRecID == vendPaymSched.RecId
                            {
                                i++;
                                if (i < vendPaymSchedLineTotals.RecId)
                                {
                                    amount                  = CurrencyExchangeHelper::amount(totalAmount * vendPaymSchedLine.DueAmount / vendPaymSchedLineTotals.DueAmount, purchTable.CurrencyCode);
                                    taxAmount               = CurrencyExchangeHelper::amount(totalTaxAmount * vendPaymSchedLine.DueAmount / vendPaymSchedLineTotals.DueAmount, purchTable.CurrencyCode);
                                    markupAmount            = CurrencyExchangeHelper::amount(totalMarkupAmount * vendPaymSchedLine.DueAmount / vendPaymSchedLineTotals.DueAmount, purchTable.CurrencyCode);
                                    markupTableAmount       = CurrencyExchangeHelper::amount(totalMarkupTableAmount * vendPaymSchedLine.DueAmount / vendPaymSchedLineTotals.DueAmount, purchTable.CurrencyCode);
                                    markupLineAmount        = CurrencyExchangeHelper::amount(totalMarkupLineAmount * vendPaymSchedLine.DueAmount / vendPaymSchedLineTotals.DueAmount, purchTable.CurrencyCode);
                                    markupTableTaxAmount    = CurrencyExchangeHelper::amount(totalMarkupTableTaxAmount * vendPaymSchedLine.DueAmount / vendPaymSchedLineTotals.DueAmount, purchTable.CurrencyCode);
                                    markupLineTaxAmount     = CurrencyExchangeHelper::amount(totalMarkupLineTaxAmount * vendPaymSchedLine.DueAmount / vendPaymSchedLineTotals.DueAmount, purchTable.CurrencyCode);
                                    remainTotalAmount       -= amount;
                                    remainTaxAmount         -= taxAmount;
                                    remainMarkupAmount      -= markupAmount;
                                    remainMarkupTableAmount -= markupTableAmount;
                                    remainMarkupLineAmount  -= markupLineAmount;
                                    remainMarkupTableTaxAmount -= markupTableTaxAmount;
                                    remainMarkupLineTaxAmount  -= markupLineTaxAmount;
                                }
                                else
                                {
                                    amount              = remainTotalAmount;
                                    taxAmount           = remainTaxAmount;
                                    markupAmount        = remainMarkupAmount;
                                    markupTableAmount   = remainMarkupTableAmount;
                                    markupLineAmount    = remainMarkupLineAmount;
                                    markupTableTaxAmount = remainMarkupTableTaxAmount;
                                    markupLineTaxAmount  = remainMarkupLineTaxAmount;
                                }

                                ledgerCoverageUpdate_RU(amount,
                                                    taxAmount,
                                                    markupAmount,
                                                    markupTableAmount,
                                                    markupLineAmount,
                                                    markupTableTaxAmount,
                                                    markupLineTaxAmount,
                                                    vendPaymSchedLine.DueDate + dateDifference);

                                ledgerCoverage.splitLinesMap_RU(lineValueDetails);
                                if (vendPaymSchedLine.DiscAmount)
                                {
                                    ledgerCoverage.updateSum(vendPaymSchedLine.DueDate + dateDifference,
                                                         LedgerPostingType::VendInvoiceDisc,
                                                         LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(LedgerSystemAccounts::getDefaultAccount(LedgerPostingType::VendInvoiceDisc)),
                                                         purchTable.DefaultDimension,
                                                         purchTable.CurrencyCode,
                                                       - vendPaymSchedLine.DiscAmount);
                                }
                                ledgerCoverage.splitLinesClear_RU();
                            }
                        }
                    }
                    else
                    {
                        // </GEERU>
                        while select DueAmount, DueDate, DiscAmount from vendPaymSchedLine
                    where vendPaymSchedLine.FatherRecID == vendPaymSched.RecId
                    &&   !vendPaymSchedLine.IsDeleted
                        {
                            if (vendPaymSchedLine.DueAmount)
                            {
                                ledgerCoverage.updateSum(deliveryDate,
                                             LedgerPostingType::VendBalance,
                                             LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(purchTable.accountVend()),
                                             purchTable.DefaultDimension,
                                             purchTable.CurrencyCode,
                                           - vendPaymSchedLine.DueAmount,
                                             0,
                                             LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(purchTable.accountClearing()),
                                             purchTable.Payment,
                                             purchTable.clearingPeriod(),
                                             purchTable.paymDayId(),
                                             vendPaymSchedLine.DueDate + dateDifference);
                            }

                            if (vendPaymSchedLine.DiscAmount)
                            {
                                ledgerCoverage.updateSum(vendPaymSchedLine.DueDate + dateDifference,
                                                 LedgerPostingType::VendInvoiceDisc,
                                                 LedgerDimensionFacade::getMainAccountFromLedgerDimension(LedgerSystemAccounts::defaultAccount(LedgerPostingType::VendInvoiceDisc)).RecId,
                                                 purchTable.DefaultDimension,
                                                 purchTable.CurrencyCode,
                                               - vendPaymSchedLine.DiscAmount);
                            }
                        }
                        // <GEERU>
                    }
                    // </GEERU>
                }
                else
                {
                    // <GEERU>
                    if (countryRegion_RU)
                    {
                        [markupTaxDetailsTable,
                    totalMarkupTableTaxAmount,
                    totalMarkupTableItemTaxAmount,
                    markupTaxDetailsLine,
                    totalMarkupLineTaxAmount] = purchTotals.tax().totalTaxDetailsMarkup_RU();

                        totalMarkupTableTaxAmount += totalMarkupTableItemTaxAmount;

                        purchTotals_TransLedgerCov = purchTotals as PurchTotals_TransLedgerCov;

                        ledgerCoverageUpdate_RU(purchTotals.purchTotalAmount(),
                                            purchTotals_TransLedgerCov.taxWithTaxTrans_RU(),
                                            purchTotals.purchMarkup(),
                                            purchTotals.purchMarkup() - purchTotals.totalMarkupLine_RU(),
                                            purchTotals.totalMarkupLine_RU(),
                                            totalMarkupTableTaxAmount,
                                            totalMarkupLineTaxAmount,
                                            purchTable.FixedDueDate);
                    }
                    else
                    {
                        // </GEERU>
                        if (purchTotals.purchTotalAmount())
                        {
                            ledgerCoverage.updateSum(deliveryDate,
                                             LedgerPostingType::VendBalance,
                                             LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(purchTable.accountVend()),
                                             purchTable.DefaultDimension,
                                             purchTable.CurrencyCode,
                                           - purchTotals.purchTotalAmount(),
                                             0,
                                             LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(purchTable.accountClearing()),
                                             purchTable.Payment,
                                             purchTable.clearingPeriod(),
                                             purchTable.paymDayId(),
                                             purchTable.FixedDueDate);

                        }
                        // <GEERU>
                    }
                    // </GEERU>
                }

                while select ParentSourceDocumentLine from sourceDocumentLine where
                    sourceDocumentLine.SourceDocumentHeader == purchTable.SourceDocumentHeader &&
                    sourceDocumentLine.SourceRelationType == markupTrans.TableId
                join markupTrans where
                    markupTrans.SourceDocumentLine == sourceDocumentLine.RecId
                {
                    if (sourceDocumentLine.ParentSourceDocumentLine)
                    {
                        purchLine = PurchLine::findBySourceDocumentLine(sourceDocumentLine.ParentSourceDocumentLine);
                        defaultDimension = purchLine.DefaultDimension;

                        deliveryDate    = max(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), purchLine.deliveryDate());
                        oldDate      = deliveryDate;

                        if (delivery2Invoice)
                        deliveryDate = PaymTerm::advanceDate(delivery2Invoice, deliveryDate);

                        dateDifference = deliveryDate - oldDate;
                    }
                    else
                    {
                        defaultDimension = purchTable.DefaultDimension;
                        deliveryDate = max(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), purchTable.DeliveryDate);

                        if (delivery2Invoice)
                        deliveryDate = PaymTerm::advanceDate(delivery2Invoice, deliveryDate);

                    }

                    accDistLedgerDimAmountList = AccDistLedgerDimAmountList::construct();
                    SourceDocumentLineProvider::getAccDistLedgerDimAmountList(sourceDocumentLine.RecId, accDistLedgerDimAmountList, false);
                    accDistLedgerDimAmountListEnumerator = accDistLedgerDimAmountList.getEnumerator();
                    while (accDistLedgerDimAmountListEnumerator.moveNext())
                    {
                        this.updateSumMarkupTrans(markupTrans,accDistLedgerDimAmountListEnumerator.current(),deliveryDate,ledgerCoverage,defaultDimension);
                    }
                }
                // <GBR>
            }
            // </GBR>

            // <GEERU>
            if (countryRegion_RU)
            {
                ledgerCoverage.splitLinesClear_RU();
                if (totalMarkupTableTaxAmount)
                {
                    ledgerCoverage.copyLinesMap_RU(lineValueDetails);

                    taxCov.taxLedgerCov(
                       purchTotals.tax().tmpTaxWorkTransExclInventProfileType_RU(
                            purchTotals.tax().tmpTaxWorkTransMarkup_RU(UnknownNoYes::Yes),
                            [InventProfileType_RU::Bailee,
                             InventProfileType_RU::CommissionAgent,
                             InventProfileType_RU::CommissionPrincipalAgent
                            ]),
                        deliveryDate);

                    ledgerCoverage.copyLinesClear_RU();

                    taxCov.taxLedgerCov(
                       purchTotals.tax().tmpTaxWorkTransExclInventProfileType_RU(
                            purchTotals.tax().tmpTaxWorkTransMarkup_RU(UnknownNoYes::No),
                            [InventProfileType_RU::Bailee,
                             InventProfileType_RU::CommissionAgent,
                             InventProfileType_RU::CommissionPrincipalAgent
                            ]),
                        deliveryDate);
                }
                else
                {
                    taxCov.taxLedgerCov(
                        purchTotals.tax().tmpTaxWorkTransExclInventProfileType_RU(
                            purchTotals.tax().tmpTaxWorkTrans(),
                            [InventProfileType_RU::Bailee,
                             InventProfileType_RU::CommissionAgent,
                             InventProfileType_RU::CommissionPrincipalAgent
                            ]),
                        deliveryDate);
                }
            }
            else
            {
                // </GEERU>
                taxCov.taxLedgerCov(purchTotals.tax().tmpTaxWorkTrans(),deliveryDate);
                // <GEERU>
            }
            // </GEERU>

            if (tmpInvoiceJour)
            {
                tmpInvoiceJour.delete();
            }

            if (purchTablePaymentScheduleCreated)
            {
                ttsbegin;

                while select forupdate vendPaymSched
                    where vendPaymSched.ExtTableId == purchTable.TableId &&
                          vendPaymSched.ExtRecId   == purchTable.RecId
                {
                    // If a payment schedule was exploded for the PurchTable record, delete those payment schedule records now.
                    // Bypass any logic in the Delete method to ensure that the records are always deleted.
                    vendPaymSched.doDelete();
                }

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSumPurchLine</Name>
				<Source><![CDATA[
    private void updateSumPurchLine(PurchLine _purchLine, AccDistLedgerDimAmount _accDistLedgerDimAmount, TransDate _deliveryDate, LedgerCoverage _ledgerCoverage)
    {
        switch (_accDistLedgerDimAmount.parmMonetaryAmount())
        {
            case MonetaryAmount::ExtendedPrice:

                if (_purchLine.inventTable().ItemType == ItemType::Service)
                {
                    _ledgerCoverage.updateSum(_deliveryDate,
                         LedgerPostingType::PurchConsump,
                         LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(_accDistLedgerDimAmount.parmLedgerDimension()),
                         _purchLine.DefaultDimension,
                         _accDistLedgerDimAmount.parmTransactionCurrency(),
                         _accDistLedgerDimAmount.parmTransactionCurrencyAmount());
                }
                else
                {
                    if (_purchLine.AssetId)
                    {
                        _ledgerCoverage.updateSum(_deliveryDate,
                             LedgerPostingType::PurchReceiptFixedAsset,
                             LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(_accDistLedgerDimAmount.parmLedgerDimension()),
                             _purchLine.DefaultDimension,
                             _accDistLedgerDimAmount.parmTransactionCurrency(),
                             _accDistLedgerDimAmount.parmTransactionCurrencyAmount());
                    }
                    else
                    {
                        _ledgerCoverage.updateSum(_deliveryDate,
                                     LedgerPostingType::PurchReceipt,
                                     LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(_accDistLedgerDimAmount.parmLedgerDimension()),
                                     _purchLine.DefaultDimension,
                                     _accDistLedgerDimAmount.parmTransactionCurrency(),
                                     _accDistLedgerDimAmount.parmTransactionCurrencyAmount());
                    }
                }
                break;
            case MonetaryAmount::Discount:

                _ledgerCoverage.updateSum(_deliveryDate,
                                     LedgerPostingType::PurchDisc,
                                     LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(_accDistLedgerDimAmount.parmLedgerDimension()),
                                     _purchLine.DefaultDimension,
                                     _accDistLedgerDimAmount.parmTransactionCurrency(),
                                     - _accDistLedgerDimAmount.parmTransactionCurrencyAmount());

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSumMarkupTrans</Name>
				<Source><![CDATA[
    private void updateSumMarkupTrans(MarkupTrans _markupTrans,
                                        AccDistLedgerDimAmount _accDistLedgerDimAmount,
                                        TransDate _deliveryDate,
                                        LedgerCoverage _ledgerCoverage,
                                        DimensionDefault _defaultDimension)
    {
        MarkupTable markupTable;
        LedgerPostingType   ledgerPostingType;
        AmountCur           sign = 1.0;

        markupTable = _markupTrans.markupTable();

        if ((markupTable.CustType == MarkupType::LedgerAccount) || (markupTable.VendType == MarkupType::LedgerAccount))
        {
            ledgerPostingType = markupTable.CustType == MarkupType::LedgerAccount ? markupTable.CustPosting : markupTable.VendPosting;
            sign = markupTable.CustType == MarkupType::LedgerAccount ? 1.0 : -1.0;

            _ledgerCoverage.updateSum(_deliveryDate,
                ledgerPostingType,
                LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(_accDistLedgerDimAmount.parmLedgerDimension()),
                _defaultDimension,
                _accDistLedgerDimAmount.parmTransactionCurrency(),
                _accDistLedgerDimAmount.parmTransactionCurrencyAmount() * sign);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>