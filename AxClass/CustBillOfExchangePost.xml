<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustBillOfExchangePost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>CustBillOfExchangePost</c> class is a baseline to post all type of bill of exchange journal.
/// </summary>
abstract class CustBillOfExchangePost extends CustVendNegInstPost
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createCustBillOfExchangeInvoice</Name>
				<Source><![CDATA[
    protected void createCustBillOfExchangeInvoice(CustBillOfExchangeJour _custBillOfExchangeJour,
                                                   CustTrans              _settlingTrans)
    {
        CustBillOfExchangeInvoice custBillOfExchangeInvoice;
        CustTrans                 settledTrans;
        CustSettlement            custSettlementLocal;

        while select OffsetRecid, OffsetCompany from custSettlementLocal
            where custSettlementLocal.TransRecId == _settlingTrans.RecId
        {
            while select crosscompany settledTrans
                where (settledTrans.RecId == custSettlementLocal.OffsetRecid &&
                        settledTrans.DataAreaId == custSettlementLocal.OffsetCompany)
            {
                custBillOfExchangeInvoice.clear();
                custBillOfExchangeInvoice.Voucher   = _settlingTrans.Voucher;
                custBillOfExchangeInvoice.TransDate = _settlingTrans.TransDate;
                custBillOfExchangeInvoice.initFromCustBillOfExchangeJour(_custBillOfExchangeJour);
                custBillOfExchangeInvoice.initFromCustTrans(settledTrans);
                custBillOfExchangeInvoice.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewCustVendVoucher</Name>
				<Source><![CDATA[
    protected CustVendVoucher getNewCustVendVoucher(LedgerJournalTrans _ledgerJournalTrans)
    {
        return CustVoucher::newCustVoucherJournal(_ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNegInstTransBuffer_ES</Name>
				<Source><![CDATA[
    protected CustVendNegInstTrans initNegInstTransBuffer_ES()
    {
        CustBillOfExchangeTrans custBillOfExchangeTrans;

        return custBillOfExchangeTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransBuffer</Name>
				<Source><![CDATA[
    protected CustVendTrans initTransBuffer()
    {
        CustTrans   custTrans;

        return custTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertNegInstTrans</Name>
				<Source><![CDATA[
    protected CustVendNegInstTrans insertNegInstTrans(CustVendNegInstJour _custBillOfExchangeJour,
                                                      CustVendTrans       _nextStepTrans)
    {
        CustBillOfExchangeJour custBillOfExchangeJour = _custBillOfExchangeJour;
        CustTrans nextStepTrans = _nextStepTrans;
        CustBillOfExchangeTrans custBillOfExchangeTrans;

        custBillOfExchangeJour.Status               = this.status();
        custBillOfExchangeJour.DueDate              = ledgerJournalTrans.Due;
        custBillOfExchangeJour.BillOfExchangeSeqNum = this.seqNum(custBillOfExchangeJour.BillOfExchangeId);
        custBillOfExchangeJour.update();

        custBillOfExchangeTrans.initFromCustBillOfExchangeJour(custBillOfExchangeJour);

        custBillOfExchangeTrans.Voucher                 = nextStepTrans.Voucher;
        custBillOfExchangeTrans.TransDate               = nextStepTrans.TransDate;
        custBillOfExchangeTrans.CurrencyCode            = nextStepTrans.CurrencyCode;
        custBillOfExchangeTrans.AmountCur               = nextStepTrans.AmountCur;

        if (ledgerJournalType == LedgerJournalType::CustPaymRemittance ||
           ledgerJournalType == LedgerJournalType::CustBillOfExchangeSettle)
        {
            custBillOfExchangeTrans.BankRemittanceType      = ledgerJournalTrans.BankRemittanceType;
        }

        custBillOfExchangeTrans.RemittedToBankAccountId = ledgerJournalTrans.BankAccountId;
        custBillOfExchangeTrans.ProtestReason           = ledgerJournalTrans.CustVendNegInstProtestReason;
        custBillOfExchangeTrans.SeqNum                  = this.seqNum(custBillOfExchangeJour.BillOfExchangeId);

        custBillOfExchangeTrans.insert();

        return custBillOfExchangeTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postNextStep</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates new open transactions for transactions settled by the settling transaction.
    /// </summary>
    /// <param name = "_custVoucher">
    ///     An instance of <c>CustVendVoucher</c>.
    /// </param>
    /// <param name = "_settlingTrans">
    ///     A <c>CustVendTrans</c> table buffer.
    /// </param>
    protected void postNextStep(CustVendVoucher _custVoucher,
                                CustVendTrans   _settlingTrans)
    {
        CustVoucher             custVoucher = _custVoucher;
        CustTrans               settlingTrans = _settlingTrans;
        CustSettlement          custSettlement;
        CustTrans               settledTrans;
        CustTrans               nextStepTrans;
        Counter                 numOfSettledTrans;

        nextStepTrans.data(settlingTrans);

        custVoucher.parmSettlementType(this.getSettlementType());
        custVoucher.parmPostingProfile(this.getPostingProfileForVoucher());

        // Creates new open transactions for transactions settled by the settling transaction
        // This code is run when posting a Bill Of Exchange Journal.
        // In this code the settlingTrans, settledTrans, and custSettlement will always be in the current company so we do not
        // need to do a cross company select statement and do not need to changeCompany after the select statement.
        while select SettleAmountCur, SettleAmountMST from custSettlement
            where custSettlement.TransRecId == settlingTrans.RecId
            join settledTrans
                where settledTrans.RecId == custSettlement.OffsetRecid
        {
            numOfSettledTrans++;
            nextStepTrans.AmountCur = -custSettlement.SettleAmountCur;
            nextStepTrans.AmountMST = -custSettlement.SettleAmountMST;
            custVoucher.parmAmountCur(nextStepTrans.AmountCur);
            custVoucher.parmAmountMST(nextStepTrans.AmountMST);

            custVoucher.post(ledgerVoucher, nextStepTrans);

            CustBillOfExchangeJour custBillOfExchangeJour = CustBillOfExchangeJour::find(settledTrans.BillOfExchangeID, true);
            nextStepTrans.AmountCur = -nextStepTrans.AmountCur;
            CustBillOfExchangeTrans custBillOfExchangeTrans = this.insertNegInstTrans(custBillOfExchangeJour, nextStepTrans);
            nextStepTrans.AmountCur = -nextStepTrans.AmountCur;

            this.setNegInstFieldOnTrans(nextStepTrans,
                                        custBillOfExchangeTrans.BillOfExchangeId,
                                        custBillOfExchangeTrans.Status,
                                        custBillOfExchangeTrans.SeqNum);

            // add the CustTransIdRef now that the BOE ID is known
            CustTransIdRef::insertForCustTrans(
                nextStepTrans,
                custBillOfExchangeTrans.BillOfExchangeId,
                CustTransRefType::BillOfExchange);

            nextStepTrans.BankRemittanceFileId = ledgerJournalTrans.BankRemittanceFileId;
            nextStepTrans.update();
        }

        if (numOfSettledTrans == 1)
        {
            // When only one transaction is settled, mark the settling
            // transaction with info from the settled transaction.
            this.setNegInstFieldOnTrans(settlingTrans,
                                        nextStepTrans.BillOfExchangeID,
                                        nextStepTrans.BillOfExchangeStatus,
                                        nextStepTrans.BillOfExchangeSeqNum);

            // add the CustTransIdRef now that the BOE ID is known
            CustTransIdRef::insertForCustTrans(
                settlingTrans,
                nextStepTrans.BillOfExchangeID,
                CustTransRefType::BillOfExchange);

            settlingTrans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSettlingStep</Name>
				<Source><![CDATA[
    protected void postSettlingStep(CustVendVoucher _custVoucher, CustVendTrans _settlingTrans)
    {
        CustVoucher custVoucher = _custVoucher;

        // this makes sure there is no CustTransIdRef record created (and
        // no assertion) because the BOE ID is not known until later
        custVoucher.parmTransRefType(CustTransRefType::BillOfExchange);
        custVoucher.parmTransRefId("");

        super(_custVoucher, _settlingTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>seqNum</Name>
				<Source><![CDATA[
    protected CustVendNegInstSeqNum seqNum(CustBillOfExchangeID _custBillOfExchangeID)
    {
        return CustBillOfExchangeTrans::maxSeqNum(_custBillOfExchangeID);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>