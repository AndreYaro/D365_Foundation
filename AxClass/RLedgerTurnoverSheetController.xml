<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RLedgerTurnoverSheetController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RLedgerTurnoverSheetController</c> class implements a custom controller
/// for the <c>RLedgerTurnoverSheet</c> report.
/// </summary>
class RLedgerTurnoverSheetController extends SrsReportRunController implements BatchRetryable
{
    container   callerPacked;
    RefRecId    reportTableRecId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmCallerPacked</Name>
				<Source><![CDATA[
        public container parmCallerPacked(container _callerPacked = callerPacked)
    {
        callerPacked = _callerPacked;
        return callerPacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportTableRecId</Name>
				<Source><![CDATA[
        public RefRecId parmReportTableRecId(RefRecId _reportTableRecId = reportTableRecId)
    {
        reportTableRecId = _reportTableRecId;
        return reportTableRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RLedgerTurnoverSheetController::construct().runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        RLedgerTurnoverEngine        caller = RLedgerTurnoverEngine::construct(new Args());
        RLedgerTurnoverSheetContract RLedgerTurnoverSheetContract = this.parmReportContract().parmRdpContract() as RLedgerTurnoverSheetContract;

        caller.unpack(callerPacked);
        RLedgerTurnoverSheetContract.parmQuery(caller.queryRun().query());
        RLedgerTurnoverSheetContract.parmFromDate(caller.parmFromDate() ? caller.parmFromDate() : 01\01\1901);
        RLedgerTurnoverSheetContract.parmToDate(caller.parmToDate());
        RLedgerTurnoverSheetContract.parmMainAccountId(caller.parmMainAccountNum());
        RLedgerTurnoverSheetContract.parmDimensionCriteria(caller.parmDimensionCriteria());
        RLedgerTurnoverSheetContract.parmPrintRanges(caller.parmPrintRanges());
        RLedgerTurnoverSheetContract.parmDeleteZero(caller.parmDeleteZero());
        RLedgerTurnoverSheetContract.parmShowSumAccount(caller.parmShowSumAccount());
        RLedgerTurnoverSheetContract.parmShowTrans(caller.parmShowTrans());
        RLedgerTurnoverSheetContract.parmShowBalanceTrans(caller.parmShowBalanceTrans());
        RLedgerTurnoverSheetContract.parmShowBalance(caller.parmShowBalance());
        RLedgerTurnoverSheetContract.parmReportTableRecId(int642str(reportTableRecId));

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static RLedgerTurnoverSheetController construct()
    {
        return new RLedgerTurnoverSheetController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>