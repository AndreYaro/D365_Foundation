<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportingDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxReportingDP</c> class declares the variables that are required for the
///    <c>TaxReporting</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(TaxReporting)),
    SRSReportParameterAttribute(classStr(TaxReportingContract))
]
public class TaxReportingDP extends SrsReportDataProviderPreProcessTempDB
{
    TaxReportingTmp taxReportingTmp;
    TaxReportingTmp taxReportingTmpForMassiveDataVolume;
    TransTxt transTxt;
    TaxTrans taxTrans;
    TaxRepVersion taxRepVersion;
    TaxPeriod taxPeriod;
    TransDate fromDate;
    TransDate toDate;
    TransDate transDate;
    boolean flagPeriod;
    TaxReportPeriod taxReportPeriod;
    Addressing taxAuthorityAddress;
    CompanyInfo companyInfo;
    LogisticsAddressing logisticsAddressing;
    CompanyName taxAuthorityName;
    TaxPeriodHead taxPeriodHead;
    Map vatNumMap;

    // <GIN>
    #ISOCountryRegionCodes
    TaxRegistrationNumbers_IN                   taxRegistrationNumbersTable;
    TaxRegistrationNumber_IN                    taxRegistrationNumber;
    RefRecId                                    taxRegistrationNumberRecId;
    TaxType_IN                                  taxType;
    TaxComponentTable_IN                        taxComponentTable;
    ComponentTransactions_IN                    componentTransactions;
    TaxSalesTaxPaymentHistoryDetails_IN         historyDetails;
    TaxSalesTaxPaymentHistoryDetailsTrans_IN    detailTrans;
    #define.Empty("")
    #define.EmptyValue(0)
    // </GIN>

    #define.emptyString('')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTaxReportingTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the actual data for the report from the <c>TaxReportingTmp</c> table.
    /// </summary>
    /// <returns>
    /// The <c>TaxReportingTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(TaxReportingTmp))
    ]
    public TaxReportingTmp getTaxReportingTmp()
    {
        TaxReportingContract contract = this.parmDataContract() as TaxReportingContract;
        if (!contract.parmIncludeDetails())
        {
            select taxReportingTmpForMassiveDataVolume;
            return taxReportingTmpForMassiveDataVolume;
        }
        else
        {
            select taxReportingTmp;
            return taxReportingTmp;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxReportingTmpAdvSalesTaxPym_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the TaxReportingTmp record if the Advanced sales tax payment checkbox is checked
    /// </summary>
    /// <param name="_taxReportingTmp">
    /// The TaxReportingTmp record
    /// </param>
    /// <returns>
    /// The initialized TaxReportingTmp record
    /// </returns>
    private TaxReportingTmp initTaxReportingTmpAdvSalesTaxPym_IN(TaxReportingTmp _taxReportingTmp)
    {
        TaxReportHierarchyNode_IN   componentNode, detailNode;

        _taxReportingTmp.TaxAmountCur = detailTrans.PayableAmountToSettle != 0
                                            ? detailTrans.PayableAmountToSettle
                                            : detailTrans.RecoverableAmountToSettle;

        _taxReportingTmp.TaxType_IN = taxType;
        _taxReportingTmp.TaxRegistrationNumber_IN = taxRegistrationNumber;
        _taxReportingTmp.TaxCodeCurrencyOriginAmount = #EmptyValue;
        _taxReportingTmp.TotalTaxAmountCur = _taxReportingTmp.TaxAmountCur;

        select firstOnly TaxReportHierarchyVersion_IN, LeftId, RightId, RecId
            from detailNode
            where detailNode.RecId == historyDetails.TaxReportHierarchyNode_IN;

        select firstOnly componentNode
                where componentNode.RefTableId == tableNum(TaxComponentTable_IN) &&
                      componentNode.TaxReportHierarchyVersion_IN == detailNode.TaxReportHierarchyVersion_IN &&
                      componentNode.LeftId <= detailNode.LeftId &&
                      componentNode.RightId >= detailNode.RightId;

        _taxReportingTmp.Component_IN = TaxComponentTable_IN::find(componentNode.RefTableRecId).Component;

        return _taxReportingTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxReportingTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records into the <c>TaxReportingTmp</c> table.
    /// </summary>
    /// <param name="_flag">
    /// The flag assigns data from either the <c>TaxReportPeriod</c> table or parameters passed from dialog.
    /// </param>
    /// <param name="_offset">
    /// true if this is the offset for the use tax; otherwise, false.
    /// </param>
    protected void insertTaxReportingTmp(boolean _flag, boolean _offset)
    {
        container cacheResult;
        VATNum vatNum;
        if (vatNumMap.exists(taxTrans.TransDate))
        {
            vatNum = vatNumMap.lookup(taxTrans.TransDate);
        }
        else   
        {
            vatNum = companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, taxTrans.TransDate);
            vatNumMap.insert(taxTrans.TransDate, vatNum);
        }

        taxReportingTmp.Address=taxAuthorityAddress;
        taxReportingTmp.CompanyAddress=logisticsAddressing;
        taxReportingTmp.CompanyName=companyInfo.name();
        taxReportingTmp.CompanyPhone=companyInfo.phone();
        if (_flag)
        {
            taxReportingTmp.FromTaxPeriod=taxReportPeriod.FromDate;
            taxReportingTmp.ToTaxPeriod=taxReportPeriod.ToDate;
            taxReportingTmp.Flag=1;
        }
        else
        {
            taxReportingTmp.FromDate=fromDate;
            taxReportingTmp.ToDate=toDate;
            taxReportingTmp.Flag=0;
        }

        taxReportingTmp.TaxAmountCur=this.taxAmountCur();
        taxReportingTmp.TaxAuthorityName=taxAuthorityName;
        taxReportingTmp.TaxBaseAmountCur=taxTrans.TaxBaseAmountCur;
        taxReportingTmp.TaxBaseQty=taxTrans.TaxBaseQty;
        taxReportingTmp.TaxCode=taxTrans.TaxCode;

        if(taxTrans.IntracomVAT)
        {
            taxReportingTmp.TaxCodeCurrencyOriginAmount = taxTrans.taxCodeCurrencyOriginAmount() * -1;
        }
        else
        {
            taxReportingTmp.TaxCodeCurrencyOriginAmount = taxTrans.taxCodeCurrencyOriginAmount();
        }

        taxReportingTmp.TotalTaxAmountCur=taxTrans.totalTaxAmountCur();

        taxReportingTmp.TaxCodeCurrencyChargeAmount=taxTrans.taxCodeCurrencyChargeAmount();
        if (!TaxParameters::find().PurchTaxOnOperations && taxTrans.TaxDirection == TaxDirection::UseTax && _offset)
        {
            taxReportingTmp.TaxCodeCurrencyChargeAmount = 0;
        }
        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            taxReportingTmp = this.initTaxReportingTmpAdvSalesTaxPym_IN(taxReportingTmp);
        }
        // </GIN>
        taxReportingTmp.TaxDirection=taxTrans.TaxDirection;
        taxReportingTmp.TaxCodeName=TaxTable::find(taxTrans.TaxCode).TaxName;
        taxReportingTmp.TaxPeriod = taxTrans.TaxPeriod;
        taxReportingTmp.TaxPeriodName=taxPeriodHead.Name;
        taxReportingTmp.TaxRepVersion=taxRepVersion;
        taxReportingTmp.TransTxt=transTxt;
        taxReportingTmp.vatNum=vatNum;
        taxReportingTmp.Voucher=taxTrans.Voucher;
        taxReportingTmp.Source=taxTrans.Source;
        taxReportingTmp.TransDate=taxTrans.TransDate;
        taxReportingTmp.TaxAmount=taxTrans.TaxAmount;
        transTxt = #emptyString;
        taxReportingTmp.CurencyCode=taxTrans.CurrencyCode;

        taxReportingTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>printUndeclaredTaxPeriods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data for the report from the <c>TaxReportPeriod</c> table and sets in the
    /// <c>TaxReportingTmp</c> table.
    /// </summary>

    private void printUndeclaredTaxPeriods()
    {
        TaxTrans taxTrans_local;
        flagPeriod = true;

        if (taxPeriod)
        {
            while select taxReportPeriod
                    where taxReportPeriod.FromDate      < fromDate
                    && taxReportPeriod.TaxPeriod        == taxPeriod
                exists join taxTrans_local
                    where taxTrans_local.TransDate      >= taxReportPeriod.FromDate
                    &&    taxTrans_local.TransDate      <= taxReportPeriod.ToDate
                    &&    taxTrans_local.TaxPeriod      == taxReportPeriod.TaxPeriod
                    &&    taxTrans_local.TaxRepCounter  == taxReportPeriod.VersionNum
            {
                this.insertTaxReportingTmp(flagPeriod, false);
            }
        }
        else
        {
            while select taxReportPeriod
                    where taxReportPeriod.FromDate      < fromDate
                exists join taxTrans_local
                    where taxTrans_local.TransDate      >= taxReportPeriod.FromDate
                    &&    taxTrans_local.TransDate      <= taxReportPeriod.ToDate
                    &&    taxTrans_local.TaxPeriod      == taxReportPeriod.TaxPeriod
                    &&    taxTrans_local.TaxRepCounter  == taxReportPeriod.VersionNum
            {
                this.insertTaxReportingTmp(flagPeriod, false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the records based on the parameters entered.
    /// </summary>
    public void processReport()
    {
        #ISOCountryRegionCodes
        boolean flagCounter;
        Name  taxVersionParam;
        TaxVersion taxRepCounter;
        Voucher voucher;
        NoYes taxReported;

        TaxReportingContract contract = this.parmDataContract() as TaxReportingContract;
        Query query = new Query(this.parmQuery());
        QueryRun queryRun;
        flagPeriod = false;
        flagCounter=false;
        vatNumMap = new Map(Types::Date, Types::String);

        Microsoft.Dynamics.Tax.Instrumentation.TaxEventSource taxEventSourceLog = Microsoft.Dynamics.Tax.Instrumentation.TaxEventSource::Log;
        System.Diagnostics.Stopwatch stopWatch;
        guid identifier;
        NoYes isSuccessfulReport;

        try
        {
            stopWatch = new System.Diagnostics.Stopwatch();
            identifier = newGuid();
            taxEventSourceLog.TaxReportStart(identifier);
            stopWatch.Start();

            taxRepVersion = contract.parmTaxRepVersion();
            taxPeriod = contract.parmTaxPeriod();
            fromDate = contract.parmFromDate();
            toDate = contract.parmToDate();
            taxRepCounter = contract.parmTaxRepCounter();
            transDate = contract.parmTransDate();
            voucher = contract.parmVoucher();
            taxReported = contract.parmTaxReported();
           
            taxPeriodHead = TaxPeriodHead::find(taxPeriod);
            taxAuthorityAddress = TaxAuthorityAddress::address(taxPeriodHead.TaxAuthority);
            companyInfo = CompanyInfo::find();
            logisticsAddressing = companyInfo.postalAddress().Address;
            taxAuthorityName = TaxAuthorityAddress::taxAuthorityName(taxPeriodHead.TaxAuthority);

            // <GIN>
            if (TaxParameters::checkTaxParameters_IN())
            {
                taxType = contract.parmTaxType_IN();
                taxRegistrationNumberRecId = contract.parmTaxRegNumberRecId_IN();
                taxRegistrationNumber = contract.parmTaxRegistrationNumber_IN();

                if (taxRegistrationNumber != #Empty)
                {
                    flagCounter = this.processReportAdvSalesTaxPayment_IN(voucher);
                }
            }
            else
            {
            // </GIN>
                if (TaxParameters::find().PurchTaxOnOperations)
                {
                    query.dataSourceTable(tableNum(TaxTrans)).addRange(fieldNum(TaxTrans, TaxDirection));
                    query.dataSourceTable(tableNum(TaxTrans)).rangeField(fieldNum(TaxTrans, TaxDirection)).value(strFmt('!%1',
                                                                                    SysQuery::value(TaxDirection::IncomingTax)));
                }

                query.dataSourceTable(tableNum(TaxTrans)).rangeField(fieldNum(TaxTrans, Source)).value(strFmt('!%1',
                                                                    SysQuery::value(TaxModuleType::Tax)));

                if (taxPeriod && fromDate && toDate)
                {
                    query.dataSourceTable(tableNum(TaxTrans)).rangeField(fieldNum(TaxTrans, TaxPeriod)).value(strFmt('%1', taxPeriod));

                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoTH]))
                    {
                        query.dataSourceTable(tableNum(TaxTrans)).addRange(fieldNum(TaxTrans, RealizedDate)).value(queryRange(fromDate, toDate));
                    }
                    else
                    {
                        // <GEEU>
                        if (TaxParameters::reportUseVatDueDate_W())
                        {
                            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEEU00041, funcName());

                            query.dataSourceTable(tableNum(TaxTrans_W)).joinMode(JoinMode::InnerJoin);
                            findOrCreateRange_W(query.dataSourceTable(tableNum(TaxTrans_W)),fieldNum(taxTrans_W, VatDueDate_W), queryRange(fromDate, toDate));
                            query.dataSourceTable(tableNum(TaxTrans)).rangeField(fieldNum(TaxTrans, TransDate)).enabled(false);
                            // <GEECZ>
                            findOrCreateRange_W(query.dataSourceTable(tableNum(TaxTrans)),fieldNum(TaxTrans, PostponeVAT), enum2Value(NoYes::No));
                            // </GEECZ>
                        }
                        else
                        {
                        // </GEEU>
                            query.dataSourceTable(tableNum(TaxTrans)).rangeField(fieldNum(TaxTrans, TransDate)).value(queryRange(fromDate, toDate));
                        // <GEEU>
                        }
                        // </GEEU>
                    }

                    if (voucher && transDate)
                    {
                        taxVersionParam =  strFmt('%1',taxRepCounter);
                    }
                    else
                    {
                        taxVersionParam = TaxReport::taxVersion(taxRepVersion, taxPeriod, fromDate, taxReported);
                    }

                    query.dataSourceTable(tableNum(TaxTrans)).rangeField(fieldNum(TaxTrans, TaxRepCounter)).value(taxVersionParam);
                }

                queryRun = new QueryRun(query);

                while (queryRun.next())
                {
                    taxTrans = queryRun.get(tableNum(TaxTrans));
                    if (taxTrans)
                    {
                        this.insertTaxReportingTmp(flagPeriod, false);

                        if (!TaxParameters::find().PurchTaxOnOperations && taxTrans.TaxDirection == TaxDirection::UseTax)
                        {
                            taxTrans.TaxBaseAmountCur = taxTrans.TaxBaseAmountCur * -1;
                            taxTrans.TaxBaseAmount = taxTrans.TaxBaseAmount * -1;
                            taxTrans.TaxAmountCur = (taxTrans.TaxAmountCur - taxTrans.TaxInCostPriceCur) * -1;
                            taxTrans.TaxAmount    = (taxTrans.TaxAmount - taxTrans.TaxInCostPriceMST) * -1;
                            transTxt = "@SYS58906";
                            this.insertTaxReportingTmp(flagPeriod, true);
                        }
                        flagCounter=true;
                    }
                }
            // <GIN>
            }
            // </GIN>
            if (flagCounter)
            {
                this.printUndeclaredTaxPeriods();
            }

            if (!contract.parmIncludeDetails())
            {
                this.processForMassiveDataVolume();
            }

            isSuccessfulReport = NoYes::Yes;
        }
        catch (Exception::Error)
        {
            isSuccessfulReport = NoYes::No;
            throw Exception::Error;
        }
        finally
        {
            stopWatch.Stop();
            taxEventSourceLog.TaxReportStop(identifier, SysCountryRegionCode::countryInfo(), new MenuFunction(menuItemOutputStr(TaxReporting), MenuItemType::Output).label(), 'TaxReporting', isSuccessfulReport, stopWatch.ElapsedMilliseconds);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReportAdvSalesTaxPayment_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic for Indian configuration when Advanced sales tax payment is checked
    /// </summary>
    /// <param name="_voucher">
    /// Voucher parameter
    /// </param>
    /// <returns>
    /// FlagCounter for undeclared tax transaction
    /// </returns>
    public boolean processReportAdvSalesTaxPayment_IN(Voucher _voucher)
    {
        boolean                                     flagCounter;
        TaxReportVoucher                            taxReportVoucher;
        TaxSalesTaxPaymentHistory_IN                paymentHistory;
        TaxTrans_IN                                 taxTransLoc;
        TaxReportHierarchyVersion_IN                taxReportHierarchyVersion;

        TaxReportingContract contract = this.parmDataContract() as TaxReportingContract;

        select firstOnly RecId from paymentHistory
                exists join taxReportVoucher
                where taxReportVoucher.RecId == paymentHistory.TaxReportVoucher &&
                      taxreportVoucher.Voucher == contract.parmVoucher();

        if (!paymentHistory.RecId)
        {
            taxReportHierarchyVersion = TaxReportSetoffHrchySetupHelper_IN::findSetOffHierarchyVersion(transDate);
            select firstOnly RecId from paymentHistory
                where paymentHistory.TaxPeriod == taxPeriod &&
                      paymentHistory.FromDate == fromDate &&
                      paymentHistory.ToDate == toDate &&
                      paymentHistory.TaxRegistrationNumbers_IN == taxRegistrationNumberRecId &&
                      paymentHistory.TaxReportHierarchyVersion_IN == taxReportHierarchyVersion.RecId &&
                      paymentHistory.TaxReportVoucher == 0;
        }

        if (paymentHistory.RecId)
        {
            while select taxTrans
                join RefRecId, RecId from taxTransLoc
                    where taxTransLoc.RefRecId == taxTrans.RecId
                join TaxTrans_IN, Mark, TaxSalesTaxPaymentHistoryDetails_IN,PayableAmountToSettle, RecoverableAmountToSettle
                    from detailTrans
                    where detailTrans.TaxTrans_IN == taxTransLoc.RecId &&
                        detailTrans.Mark == NoYes::Yes
                join RecId, TaxRegistrationNumbers_IN, TaxSalesTaxPaymentHistory_IN, TaxReportHierarchyNode_IN from historyDetails
                    where historyDetails.RecId == detailTrans.TaxSalesTaxPaymentHistoryDetails_IN &&
                        historyDetails.TaxRegistrationNumbers_IN == taxRegistrationNumberRecId &&
                        historyDetails.TaxSalesTaxPaymentHistory_IN == paymentHistory.RecId
            {
                if (taxTrans)
                {
                    this.insertTaxReportingTmp(flagPeriod, false);

                    if ( !TaxParameters::find().PurchTaxOnOperations
                        && taxTrans.TaxDirection == TaxDirection::UseTax)
                    {
                        taxTrans.TaxAmountCur = (taxTrans.TaxAmountCur - taxTrans.TaxInCostPriceCur + taxTrans.TaxInCostPriceCur) ;
                        taxTrans.TaxAmount    = (taxTrans.TaxAmount - taxTrans.TaxInCostPriceMST + taxTrans.TaxInCostPriceMST) ;
                        taxTrans.TaxInCostPriceCur = 0;
                        taxTrans.TaxInCostPriceMST = 0;
                        transTxt = "@SYS58906";
                        this.insertTaxReportingTmp(flagPeriod, true);
                        transTxt = '';
                    }
                    flagCounter = true;
                }
            }
        }
        return flagCounter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>TaxAmountCur</c> value for the current record in the <c>TaxTrans</c> table.
    /// </summary>
    /// <returns>
    /// The TaxAmountCur value of the current record.
    /// </returns>
    private TaxAmountCur taxAmountCur()
    {
        if (taxTrans.TaxDirection == TaxDirection::UseTax &&
            !(taxTrans.Source == TaxModuleType::Voucher &&
            taxTrans.TaxOrigin == TaxOrigin::Transfer) &&
            TaxParameters::find().PurchTaxOnOperations)
        {
            taxTrans.TaxAmountCur = taxTrans.TaxAmountCur * -1;
            taxTrans.TaxAmount    = taxTrans.TaxAmount * -1;
            taxTrans.TaxInCostPriceCur = 0;
            taxTrans.TaxInCostPriceMST = 0;
        }

        if (!taxTrans.CurrencyCode || taxTrans.CurrencyCode == Ledger::accountingCurrency(CompanyInfo::current()))
        {
            return taxTrans.TaxAmount - taxTrans.TaxInCostPriceMST;
        }
        else
        {
            return taxTrans.TaxAmountCur - taxTrans.TaxInCostPriceCur;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processForMassiveDataVolume</Name>
				<Source><![CDATA[
    private void processForMassiveDataVolume()
    {
        select firstonly VATNum from taxReportingTmp;
        VATNum tmpVATNum = taxReportingTmp.VATNum;

        while select sum(TaxBaseQty), sum(TaxCodeCurrencyOriginAmount), sum(TotalTaxAmountCur), sum(TaxCodeCurrencyChargeAmount)
            from taxReportingTmp
            group by TaxCode, TaxDirection, TaxCodeName, TransTxt, Flag, FromTaxPeriod, ToTaxPeriod
        {
            taxReportingTmpForMassiveDataVolume.clear();

            taxReportingTmpForMassiveDataVolume.TaxBaseQty = taxReportingTmp.TaxBaseQty;
            taxReportingTmpForMassiveDataVolume.TaxCode = taxReportingTmp.TaxCode;
            taxReportingTmpForMassiveDataVolume.TaxCodeCurrencyOriginAmount = taxReportingTmp.TaxCodeCurrencyOriginAmount;
            taxReportingTmpForMassiveDataVolume.TotalTaxAmountCur = taxReportingTmp.TotalTaxAmountCur;
            taxReportingTmpForMassiveDataVolume.TaxCodeCurrencyChargeAmount = taxReportingTmp.TaxCodeCurrencyChargeAmount;
            taxReportingTmpForMassiveDataVolume.TaxDirection = taxReportingTmp.TaxDirection;
            taxReportingTmpForMassiveDataVolume.TaxCodeName = taxReportingTmp.TaxCodeName;
            taxReportingTmpForMassiveDataVolume.TransTxt = taxReportingTmp.TransTxt;
            taxReportingTmpForMassiveDataVolume.Flag = taxReportingTmp.Flag;
            taxReportingTmpForMassiveDataVolume.FromTaxPeriod = taxReportingTmp.FromTaxPeriod;
            taxReportingTmpForMassiveDataVolume.ToTaxPeriod = taxReportingTmp.ToTaxPeriod;

            taxReportingTmpForMassiveDataVolume.Address = taxAuthorityAddress;
            taxReportingTmpForMassiveDataVolume.CompanyAddress = logisticsAddressing;
            taxReportingTmpForMassiveDataVolume.CompanyName = companyInfo.name();
            taxReportingTmpForMassiveDataVolume.CompanyPhone = companyInfo.phone();
            taxReportingTmpForMassiveDataVolume.TaxAuthorityName = taxAuthorityName;
            taxReportingTmpForMassiveDataVolume.TaxRepVersion = taxRepVersion;
            taxReportingTmpForMassiveDataVolume.TaxPeriodName=taxPeriodHead.Name;
            taxReportingTmpForMassiveDataVolume.VATNum = tmpVATNum;

            if (taxReportingTmpForMassiveDataVolume.Flag == 0)
            {
                taxReportingTmpForMassiveDataVolume.FromDate = fromDate;
                taxReportingTmpForMassiveDataVolume.ToDate = toDate;
                taxReportingTmpForMassiveDataVolume.TaxPeriod = taxPeriod;
            }

            taxReportingTmpForMassiveDataVolume.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>