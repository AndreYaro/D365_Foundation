<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxableDocGeneralJournalDataProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data provider for journal trans table.
/// </summary>
class TaxableDocGeneralJournalDataProvider extends TaxableDocumentDataProvider
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query to load detail data for taxable document. And setup the row definitions.
    /// </summary>
    /// <returns>
    /// The query to load detail data for taxable document.
    /// </returns>
    /// <remarks>
    /// The row definitions must be setup here. It defines the mapping between row and data source,
    /// the child/parent relations between rows, and the row data provider class.
    /// </remarks>
    public Query buildQuery()
    {
        Query                   query;
        QueryBuildDataSource    taxEngineLedgerJournalTransHeaderDataSource;
        QueryBuildDataSource    ledgerJournalTransDataSource;
        QueryBuildDataSource    custVendPaymJournalFeeDataSource;
        QueryBuildDataSource    ledgerJournalTransPaymFeeDataSource;

        query = new Query();
        taxEngineLedgerJournalTransHeaderDataSource = query.addDataSource(tableNum(TaxEngineLedgerJournalTransHeader));
        taxEngineLedgerJournalTransHeaderDataSource.addRange(fieldNum(TaxEngineLedgerJournalTransHeader, RecId)).value(queryValue(rootTable.RecId));
        ledgerJournalTransDataSource = taxEngineLedgerJournalTransHeaderDataSource.addDataSource(tableNum(LedgerJournalTrans));
        ledgerJournalTransDataSource.joinMode(JoinMode::OuterJoin);
        ledgerJournalTransDataSource.relations(true);
        ledgerJournalTransDataSource.addRange(fieldNum(LedgerJournalTrans, TransactionType)).value(SysQuery::valueNot(LedgerTransType::Fee));
        
        custVendPaymJournalFeeDataSource = ledgerJournalTransDataSource.addDataSource(tableNum(CustVendPaymJournalFee));
        custVendPaymJournalFeeDataSource.joinMode(JoinMode::OuterJoin);
        custVendPaymJournalFeeDataSource.addLink(fieldNum(LedgerJournalTrans, RecId), fieldNum(CustVendPaymJournalFee, RefRecId));
        
        ledgerJournalTransPaymFeeDataSource = custVendPaymJournalFeeDataSource.addDataSource(tableNum(LedgerJournalTrans));
        ledgerJournalTransPaymFeeDataSource.joinMode(JoinMode::OuterJoin);
        ledgerJournalTransPaymFeeDataSource.addLink(fieldNum(CustVendPaymJournalFee, feeTransRecId), fieldNum(LedgerJournalTrans, RecId));
        ledgerJournalTransPaymFeeDataSource.addRange(fieldNum(LedgerJournalTrans, AccountType)).value(queryValue(LedgerJournalACType::Ledger));
        ledgerJournalTransPaymFeeDataSource.addRange(fieldNum(LedgerJournalTrans, OffsetAccountType)).value(queryValue(LedgerJournalACType::Bank));

        rowDefinitions.empty();
        this.registerRow(taxEngineLedgerJournalTransHeaderDataSource.id(), 0, TaxEngineIntegrationConstants::Header, classStr(TaxableDocLedgerJourHeadRowDataProvider));
        this.registerRow(ledgerJournalTransDataSource.id(), taxEngineLedgerJournalTransHeaderDataSource.id(), TaxEngineModelFieldsConstants::Lines, classStr(TaxableDocLedgerJourTransRowDataProvider));
        this.registerRow(ledgerJournalTransPaymFeeDataSource.id(), ledgerJournalTransDataSource.id(), TaxEngineModelFieldsConstants::SubLines, classStr(TaxableDocLedgerJourTransRowDataProvider));

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>