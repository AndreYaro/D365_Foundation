<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInvoiceSpecDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustInvoiceSpecDP</c> class is the Report Data Provider class for the <c>CustInvoiceSpec</c>
///    report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(CustInvoiceSpec)),
    SRSReportParameterAttribute (classstr(CustInvoiceSpecContract))
]
public class CustInvoiceSpecDP extends SrsReportDataProviderPreProcessTempDB
{
    CustInvoiceSpecTmp custInvoiceSpecTmp;
    CustInvoiceJour custInvoiceJour;
    boolean newPage;
    boolean printDimensions;
    RecordInsertList recordInsertList;

    #define.NewPageGroupBy('Group1')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCustInvoiceSpecTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets data from the <c>CustInvoiceSpecTmp</c> temporary table.
    /// </summary>
    /// <returns>
    ///    Data from the <c>CustInvoiceSpecTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(CustInvoiceSpecTmp))
    ]
    public CustInvoiceSpecTmp getCustInvoiceSpecTmp()
    {
        select custInvoiceSpecTmp;
        return custInvoiceSpecTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the <c>CustInvoiceSpecTmp</c> temporary table.
    /// </summary>
    /// <param name="_record">
    /// The record to take data from.
    /// </param>
    /// <param name="_taxSpec">
    /// The <c>TaxSpec</c> value to use while inserting the records.
    /// </param>
    private void insertIntoTempTable(Common _record, TaxSpec _taxSpec = null)
    {
        // Clear the temp table so that the values from previous run is cleared.
        custInvoiceSpecTmp.clear();

        boolean initialized = this.initCustInvoiceSpecTmpFromCursorRecord(
            custInvoiceSpecTmp,
            _record,
            custInvoiceJour,
            _taxSpec);

        if (initialized)
        {
            recordInsertList.add(custInvoiceSpecTmp);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustInvoiceSpecTmpFromCursorRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an invoice specification with data coming from <paramref name="_record" />.
    /// </summary>
    /// <param name = "_custInvoiceSpecTmp">An invoice specification.</param>
    /// <param name = "_record">A record to use for initialization.</param>
    /// <param name = "_custInvoiceJour">A customer invoice journal instance.</param>
    /// <param name = "_taxSpec">A tax specification.</param>
    /// <returns>true if the invoice specification instance has been initialized; otherwise, false.</returns>
    protected boolean initCustInvoiceSpecTmpFromCursorRecord(CustInvoiceSpecTmp _custInvoiceSpecTmp, Common _record, CustInvoiceJour _custInvoiceJour, TaxSpec _taxSpec)
    {
        boolean initialized = true;

        switch (_record.TableId)
        {
            case tableNum(CustInvoiceJour) :
                _custInvoiceSpecTmp.initFromCustInvoiceJour(_custInvoiceJour);
                break;

            case tableNum(DefaultDimensionView) :

                DefaultDimensionView defaultDimensionView = _record as DefaultDimensionView;
                _custInvoiceSpecTmp.initFromDefaultDimensionView(defaultDimensionView, _custInvoiceJour);
                break;

            case tableNum(CustInvoiceTrans) :

                CustInvoiceTrans custInvoiceTrans = _record as CustInvoiceTrans;
                _custInvoiceSpecTmp.initFromCustInvoiceTrans(custInvoiceTrans, _custInvoiceJour);
                break;

            case tableNum(TaxTrans) :

                TaxTrans taxTrans = _record as TaxTrans;
                _custInvoiceSpecTmp.initFromTaxTrans(taxTrans, _taxSpec, _custInvoiceJour);
                break;

            default :
                initialized = false;
                break;
        }

        return initialized;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// This method provides the ability to write the report business logic. This method will be called by
    /// Microsoft SQL Server Reporting Services at runtime. The method should compute data and populate the
    /// data tables that will be returned to Reporting Services.
    /// </remarks>
    public void processReport()
    {
        QueryRun queryRun;
        QueryRun queryRunCustInvoiceTrans;

        CustInvoiceTrans custInvoiceTrans;
        DefaultDimensionView defaultDimensionView;
        TaxTrans taxTrans;
        TaxSpec taxSpec;
        CustBillingClassification custBillingClassification;
        CustTrans custTrans;

        boolean isPublicSectorScenario;
        QueryBuildDataSource qbdsCustTrans;

        CustInvoiceSpecContract custInvoiceSpecContract = this.parmDataContract() as CustInvoiceSpecContract;
        newPage = custInvoiceSpecContract.parmNewPage();
        printDimensions = custInvoiceSpecContract.parmPrintDimensions();

        queryRun = new QueryRun(this.parmQuery());

        isPublicSectorScenario = CustBillingClassificationReportManager::isPublicSectorScenario(custInvoiceSpecContract.parmBillingClassification())
                                            && !BrazilParameters::isEnabled();
        recordInsertList = new RecordInsertList(custInvoiceSpecTmp.TableId, true, true, true, false, true, custInvoiceSpecTmp);

        if (isPublicSectorScenario)
        {
            qbdsCustTrans = queryRun.query().dataSourceTable(tableNum(CustInvoiceJour)).addDataSource(tableNum(CustTrans));
            qbdsCustTrans.joinMode(JoinMode::ExistsJoin);
            qbdsCustTrans.addLink(fieldNum(CustInvoiceJour, InvoiceId), fieldNum(CustTrans, Invoice));

            CustBillingClassificationReportManager::setBillingClassificationRanges(qbdsCustTrans, custInvoiceSpecContract.parmBillingClassification(),
                                                        custInvoiceSpecContract.parmInclTransWithNoBillingClass(),
                                                        fieldNum(CustTrans, CustBillingClassification));
        }

        while (queryRun.next())
        {
            custInvoiceJour = queryRun.get(tableNum(CustInvoiceJour));

            // Insert cust invoice jour details in to the temp table.
            this.insertIntoTempTable(custInvoiceJour);

            while select * from defaultDimensionView
                where defaultDimensionView.DefaultDimension == custInvoiceJour.DefaultDimension
            {
                // Insert default dimension details in to the temp table.
                this.insertIntoTempTable(defaultDimensionView);
            }

            queryRunCustInvoiceTrans = new TradeLoopTrans(custInvoiceJour, tableNum(CustInvoiceTrans)).buildQueryRun();
            while (queryRunCustInvoiceTrans.next())
            {
                // Insert cust invoice transaction details in to the temp table.
                custInvoiceTrans = queryRunCustInvoiceTrans.get(tableNum(CustInvoiceTrans));
                this.insertIntoTempTable(custInvoiceTrans);
            }

            taxSpec = TaxSpec::construct(custInvoiceJour.LedgerVoucher,
                                            custInvoiceJour.InvoiceDate,
                                            custInvoiceJour.RecId);

            taxSpec.parmLanguageId(custInvoiceJour.LanguageId);

            while (taxSpec.parmTaxSpec())
            {
                // Insert tax specification details in to the temp table.
                this.insertIntoTempTable(taxTrans,taxSpec);
            }
        }

        recordInsertList.insertDatabase();

        // <PubSect>
        if (isPublicSectorScenario)
        {
            update_recordset custInvoiceSpecTmp
                setting
                    BillingClassification = custBillingClassification.BillingClassification
            join custTrans
                where
                    custTrans.Invoice == custInvoiceSpecTmp.InvoiceId &&
                    // We're interested in updating with the BillingClassification code only for those
                    // records in the temp table which has a link to the CustInvoiceJour table.
                    custInvoiceSpecTmp.CustInvJourRecId != 0
            join custBillingClassification
                where
                    custBillingClassification.RecId == custTrans.CustBillingClassification;
        }
        // </PubSect>

        if (newPage)
        {
            // In order to have a page break between each instance of Invoice Id, Invoice Account and SalesId group,
            // combine them in the code and use it as a group by field in report design.
            update_recordset custInvoiceSpecTmp
                setting
                    NewPageGroupBy = custInvoiceSpecTmp.InvoiceId + custInvoiceSpecTmp.InvoiceAccount + custInvoiceSpecTmp.SalesId;
        }
        else
        {
            // We should not have page break between each instance of Invoice Id, Invoice Account and SalesId group.
            // So set a constant value for all rows and use it as a group by field in report design.
            update_recordset custInvoiceSpecTmp
                setting
                    NewPageGroupBy = #NewPageGroupBy;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipReportTransaction</Name>
				<Source><![CDATA[
    public boolean parmSkipReportTransaction(boolean _skipReportTransaction = skipReportTransaction)
    {
        if (CustInvoiceSpecReportOptimizationFlight::instance().isEnabled())
        {
            skipReportTransaction = true;
        }
        return skipReportTransaction;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>