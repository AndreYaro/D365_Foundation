<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PSAProjInvoiceRPTHelperEE</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class contains common code for the EE PSA invoice reports.
/// </summary>
class PSAProjInvoiceRPTHelperEE
{
    ProjInvoiceLocalizationTmp projInvoiceLocalizationTmp;

    boolean projCreditInvoicingSalesLine;

    #ISOCountryRegionCodes
    #define.Separator(", ")
    #define.InvoicePattern("\%1 \%2")

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearTransportationDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the transportation related fields from the temporary table.
    /// </summary>
    private void clearTransportationDetails()
    {
        projInvoiceLocalizationTmp.TransportationDataSection = NoYes::No;
        projInvoiceLocalizationTmp.DoPrintTransportationDocument = NoYes::No;
        projInvoiceLocalizationTmp.DeliveryName = '';
        projInvoiceLocalizationTmp.DeliveryAddress = '';

        projInvoiceLocalizationTmp.TransportationContactPersonName = '';
        projInvoiceLocalizationTmp.TransportationContactPersonTitle = '';

        projInvoiceLocalizationTmp.TransportationCarrierAddress = '';
        projInvoiceLocalizationTmp.TransportationCarrierName = '';

        projInvoiceLocalizationTmp.TransPortationIssuedByName = '';
        projInvoiceLocalizationTmp.TransportationIssuedByTitle = '';

        projInvoiceLocalizationTmp.TransportationLoadedDateTime = utcDateTimeNull();
        projInvoiceLocalizationTmp.TransportationLoadedAddress = '';
        projInvoiceLocalizationTmp.TransportationLoadedName = '';

        projInvoiceLocalizationTmp.TransportationPackageDangerDegree = '';
        projInvoiceLocalizationTmp.TransportationPackageDescription = '';

        projInvoiceLocalizationTmp.TransportationVehicleDescription = '';
        projInvoiceLocalizationTmp.TransportationVehicleDriverName = '';
        projInvoiceLocalizationTmp.TransportationVehiclePlateNumber = '';
        projInvoiceLocalizationTmp.TransportationVehicleTrailerNumber = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTempTableFromCompanyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the temporary <c>projInvoiceTmp</c> table from the data in the <c>CompanyInfo</c>
    /// table.
    /// </summary>
    private void initTempTableFromCompanyInfo(InvoiceDate _invoiceDate)
    {
        BankAccountTable bankAccount;
        CompanyInfo      companyInfo;

        companyInfo = CompanyInfo::find();

        projInvoiceLocalizationTmp.CompanyName              = companyInfo.name();
        projInvoiceLocalizationTmp.CompanyAddress           = companyInfo.postalAddress().Address;
        projInvoiceLocalizationTmp.CompanyPhone             = companyInfo.phone();
        projInvoiceLocalizationTmp.CompanyTeleFax           = companyInfo.teleFax();
        projInvoiceLocalizationTmp.CompanyCoRegNum          = companyInfo.CoRegNum;
        projInvoiceLocalizationTmp.CompanyVATNum            = companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, _invoiceDate);
        projInvoiceLocalizationTmp.CompanyRegNum            = companyInfo.RegNum;

        if (companyInfo.Bank)
        {
            bankAccount = BankAccountTable::find(companyInfo.Bank);

            projInvoiceLocalizationTmp.CompanyBankAccountName   = bankAccount.Name;
            projInvoiceLocalizationTmp.CompanyBankAccountNum    = hasFieldAccess(tableNum(BankAccountTable), fieldNum(BankAccountTable, AccountNum)) ?
                                                                    bankAccount.AccountNum : "@AccountsReceivable:FiveAsterisk";
            projInvoiceLocalizationTmp.CompanyBankAccountRegNum = bankAccount.RegistrationNum;
        }

        // <GEELT>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT]))
        {
            projInvoiceLocalizationTmp.CompanyEnterpriseCode = companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, _invoiceDate);
        }
        // </GEELT>

        // <GEECZ>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
        {
            projInvoiceLocalizationTmp.RegNumCompaniesFieldMap::initCommercialRegisterFromTaxRegistration(companyInfo, _invoiceDate);

            projInvoiceLocalizationTmp.CompanyEmail = companyInfo.email();
        }
        // </GEECZ>
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoProjInvoiceLocalizationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the data into the temporary table.
    /// </summary>
    /// <param name="_projInvoiceJour">
    /// The ProjInvoiceJour cursor.
    /// </param>
    public void insertIntoProjInvoiceLocalizationTmp(ProjInvoiceJour _projInvoiceJour)
    {
        // <GEECZ>
        ProjInvoiceTable projInvoiceTable;
        HcmWorker        salesResponsible;
        BankAccountTable bankAccountTable;
        // </GEECZ>
        CustTable buyer;

        // <GEEPL>
        CustTable       remitter;
        // </GEEPL>

        // <GEELT>
        TransportationDocument transportationDocument;
        TransportationVehicle  transportationVehicle;
        // </GEELT>

        this.initTempTableFromCompanyInfo(_projInvoiceJour.InvoiceDate);

        buyer = CustTable::find(_projInvoiceJour.OrderAccount);

        // <GEEPL>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            remitter = CustTable::find(_projInvoiceJour.InvoiceAccount);
            projInvoiceLocalizationTmp.AccountingCurrency = Ledger::accountingCurrency();
            projInvoiceLocalizationTmp.LineSign = '';

            if (_projInvoiceJour.CurrencyId != Ledger::accountingCurrency())
            {
                projInvoiceLocalizationTmp.AccountingCurrencyAmountVisibility = NoYes::Yes;
            }

            if (ProjFormletterParameters::find().PrintInvoiceVATNum)
            {
                projInvoiceLocalizationTmp.InvoiceVATNumVisibility = NoYes::Yes;
            }

            if (_projInvoiceJour.InvoiceAccount != _projInvoiceJour.OrderAccount)
            {
                projInvoiceLocalizationTmp.InvoiceAccountVisibility = NoYes::Yes;
            }
        }
        // </GEEPL>

        projInvoiceLocalizationTmp.vatNum                               = _projInvoiceJour.vatNum;
        projInvoiceLocalizationTmp.InvoiceDate                          = _projInvoiceJour.InvoiceDate;
        projInvoiceLocalizationTmp.SalesOrdernum                        = _projInvoiceJour.ProjInvoiceProjId;
        projInvoiceLocalizationTmp.PaymentCondition                     = _projInvoiceJour.paymentCondition();
        projInvoiceLocalizationTmp.InvoiceAccount                       = _projInvoiceJour.InvoiceAccount;
        projInvoiceLocalizationTmp.InvoiceNum                           = _projInvoiceJour.ProjInvoiceId;
        projInvoiceLocalizationTmp.smaSpecIndexCalc                     = _projInvoiceJour.smaSpecIndexCalc;
        projInvoiceLocalizationTmp.CurrencyCode                         = _projInvoiceJour.CurrencyId;

        projInvoiceLocalizationTmp.OriginalInvoiceReference = this.setOriginalInvoiceReference(_projInvoiceJour);
        if (projInvoiceLocalizationTmp.OriginalInvoiceReference)
        {
            projInvoiceLocalizationTmp.CreditNoteReasonComment = ReasonTableRef::find(_projInvoiceJour.ReasonTableRef).ReasonComment;
        }

        if (projCreditInvoicingSalesLine)
        {
            // If the projInvoiceJour has credit note lines, get the reason for the credit note.
            projInvoiceLocalizationTmp.CreditNoteReasonComment = ReasonTableRef::find(_projInvoiceJour.ReasonTableRef).ReasonComment;
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU, #isoPL, #isoLT]))
        {
            projInvoiceLocalizationTmp.DocumentDate                     = _projInvoiceJour.DocumentDate_W;
        }

        if (IntrastatCountryRegionParameters::isInEUByIsoCode())
        {
            this.clearTransportationDetails();

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT]))
            {
                projInvoiceLocalizationTmp.InvoiceDateInWords = this.invoiceDateText(_projInvoiceJour);
                projInvoiceLocalizationTmp.AmountInWords = RNumDateInWordConverter::construct(_projInvoiceJour.LanguageId).numeralsToCurrency(
                _projInvoiceJour.InvoiceAmount - PSAProjInvoiceRPTHelperEE::calculateTotalExcludedTaxAmount(_projInvoiceJour.LedgerVoucher),
                _projInvoiceJour.CurrencyId);
            }

            projInvoiceLocalizationTmp.TransportationDataSection = NoYes::Yes;
            transportationDocument = TransportationDocument::find(_projInvoiceJour.TransportationDocument);

            if (transportationDocument)
            {
                projInvoiceLocalizationTmp.DoPrintTransportationDocument    = transportationDocument.DoPrintTransportationDocument;
                projInvoiceLocalizationTmp.TransportationContactPersonName  = transportationDocument.contactPersonName(_projInvoiceJour);
                projInvoiceLocalizationTmp.TransportationContactPersonTitle = transportationDocument.contactPersonTitle(_projInvoiceJour);
                projInvoiceLocalizationTmp.TransPortationIssuedByName       = transportationDocument.issuedByName();
                projInvoiceLocalizationTmp.TransportationIssuedByTitle      = transportationDocument.issuedByTitle();

                if (projInvoiceLocalizationTmp.DoPrintTransportationDocument)
                {
                    // Identifies the record having the transporation data.

                    projInvoiceLocalizationTmp.DeliveryName     = _projInvoiceJour.DeliveryName;
                    projInvoiceLocalizationTmp.DeliveryAddress  = _projInvoiceJour.deliveryAddress();

                    // Set values from transportation document.

                    projInvoiceLocalizationTmp.TransportationCarrierAddress = transportationDocument.carrierAddress(buyer.Party);
                    projInvoiceLocalizationTmp.TransportationCarrierName    = transportationDocument.carrierName(buyer.Party);

                    projInvoiceLocalizationTmp.TransportationLoadedDateTime = transportationDocument.LoadedDateTime;
                    projInvoiceLocalizationTmp.TransportationLoadedAddress  = transportationDocument.displayLoadedPostalAddressing();
                    projInvoiceLocalizationTmp.TransportationLoadedName     = transportationDocument.LoadedAddressName;

                    projInvoiceLocalizationTmp.TransportationPackageDangerDegree    = transportationDocument.PackageDangerDegree;
                    projInvoiceLocalizationTmp.TransportationPackageDescription     = transportationDocument.PackageDescription;

                    // Set values from transportation vehicle.
                    transportationVehicle = TransportationVehicle::findByTransportationDocument(transportationDocument.RecId);

                    if (transportationVehicle)
                    {
                        projInvoiceLocalizationTmp.TransportationVehicleDescription     = transportationVehicle.modelDescription();
                        projInvoiceLocalizationTmp.TransportationVehicleDriverName      = transportationVehicle.DriverName;
                        projInvoiceLocalizationTmp.TransportationVehiclePlateNumber     = transportationVehicle.PlateNumber;
                        projInvoiceLocalizationTmp.TransportationVehicleTrailerNumber   = transportationVehicle.TrailerNumber;
                    }
                }
            }
        }

        // <GEEPL>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            RNumDateInWordConverter dateInWordConverter = RNumDateInWordConverter::construct(_projInvoiceJour.LanguageId);
            projInvoiceLocalizationTmp.AmountInWords = dateInWordConverter.numeralsToTxt(_projInvoiceJour.InvoiceAmount);

            projInvoiceLocalizationTmp.InvoiceAccountName = remitter.name();
            projInvoiceLocalizationTmp.InvoiceAccountAddress = remitter.address();
            projInvoiceLocalizationTmp.InvoiceAccountVATNum = remitter.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, _projInvoiceJour.InvoiceDate);
            projInvoiceLocalizationTmp.ProposalId = _projInvoiceJour.ProposalId;
        }
        // </GEEPL>

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ, #isoPL, #isoHU, #isoLT]))
        {
            projInvoiceLocalizationTmp.SalesDate = _projInvoiceJour.SalesDate_CZ;
        }

        // <GEECZ>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
        {
            projInvoiceTable = ProjInvoiceTable::find(_projInvoiceJour.ProjInvoiceProjId);

            // Use the bank account specified on the project contract to populate the bank fields on the invoice.
            bankAccountTable = BankAccountTable::find(projInvoiceTable.BankAccount);

            projInvoiceLocalizationTmp.CompanyBankAccountName    = bankAccountTable.Name;
            projInvoiceLocalizationTmp.CompanyBankAccountNum     = hasFieldAccess(tableNum(BankAccountTable), fieldNum(BankAccountTable, AccountNum)) ?
                                                                    bankAccountTable.AccountNum : "@AccountsReceivable:FiveAsterisk";
            projInvoiceLocalizationTmp.CompanyBankAccountRegNum  = bankAccountTable.RegistrationNum;
            projInvoiceLocalizationTmp.CompanyBankSpecificSymbol = bankAccountTable.SpecificSymbol;
            projInvoiceLocalizationTmp.iban                      = bankAccountTable.iban;
            projInvoiceLocalizationTmp.swiftNo                   = bankAccountTable.swiftNo;
            projInvoiceLocalizationTmp.ConstantSymbol            = BankConstantSymbol::find(bankAccountTable.BankConstantSymbol).ConstantSymbol;

            salesResponsible = HcmWorker::find(projInvoiceTable.SalesResponsible);

            projInvoiceLocalizationTmp.SalesResponsible      = salesResponsible.name();
            projInvoiceLocalizationTmp.SalesResponsiblePhone = salesResponsible.phone();
            projInvoiceLocalizationTmp.SalesResponsibleEmail = salesResponsible.email();

            projInvoiceLocalizationTmp.VatDueDate_W = _projInvoiceJour.vatDueDate_W();
        }
        // </GEECZ>

        projInvoiceLocalizationTmp.BuyerName = buyer.name();
        projInvoiceLocalizationTmp.BuyerAddress = buyer.address();

        projInvoiceLocalizationTmp.BuyerRegNum_W    = buyer.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, _projInvoiceJour.InvoiceDate);

        // <GEELT>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT]))
        {
            projInvoiceLocalizationTmp.BuyerEnterpriseCode      = buyer.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, _projInvoiceJour.InvoiceDate);
        }
        // </GEELT>

        // <GEECZ><GEEPL>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ, #isoPL]))
        {
            projInvoiceLocalizationTmp.BuyerVATNum = buyer.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, _projInvoiceJour.InvoiceDate);
        }
        // </GEEPL></GEECZ>

        projInvoiceLocalizationTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDateText</Name>
				<Source><![CDATA[
    private FreeTxt invoiceDateText(ProjInvoiceJour _projInvoiceJour)
    {
        FreeText text = RNumDateInWordConverter::construct(_projInvoiceJour.LanguageId).date2strMonth(_projInvoiceJour.InvoiceDate);

        text = strFmt("@SYS53179", year(_projInvoiceJour.InvoiceDate), text, dayOfMth(_projInvoiceJour.InvoiceDate));

        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjCreditInvoicingSalesLine</Name>
				<Source><![CDATA[
    public boolean parmProjCreditInvoicingSalesLine(boolean _projCreditInvoicingSalesLine = projCreditInvoicingSalesLine)
    {
        projCreditInvoicingSalesLine = _projCreditInvoicingSalesLine;

        return projCreditInvoicingSalesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjInvoiceLocalizationTmp</Name>
				<Source><![CDATA[
    public ProjInvoiceLocalizationTmp parmProjInvoiceLocalizationTmp(ProjInvoiceLocalizationTmp _projInvoiceLocalizationTmp = projInvoiceLocalizationTmp)
    {
        projInvoiceLocalizationTmp = _projInvoiceLocalizationTmp;

        return projInvoiceLocalizationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOriginalInvoiceReference</Name>
				<Source><![CDATA[
    private str setOriginalInvoiceReference(ProjInvoiceJour _projInvoiceJour)
    {
        str value;
        Set originalInvoiceSet = new Set(Types::String);
        
        boolean isEnabledProjOrigSalesOrderInvoiceRefFlight_PL = ProjOrigSalesOrderInvoiceRefFlight_PL::instance().isEnabled();
        boolean isEnabledProjOrigJournalInvoiceRefFlight_PL = ProjOrigJournalInvoiceRefFlight_PL::instance().isEnabled();
        boolean isCountryRegionPL = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]);

        ProjInvoiceItem creditNoteProjInvoiceItem;
        ProjInvoiceItemDetail creditNoteProjInvoiceItemDetail;
        ProjInvoiceItem originalProjInvoiceItem;
        ProjInvoiceItemDetail originalProjInvoiceItemDetail;

        while select ProjInvoiceId, InvoiceDate from originalProjInvoiceItem
            exists join creditNoteProjInvoiceItem
                where creditNoteProjInvoiceItem.RefReturnInvoiceTrans_W == originalProjInvoiceItem.RecId
                    && creditNoteProjInvoiceItem.ProjInvoiceId == _projInvoiceJour.ProjInvoiceId
                    && creditNoteProjInvoiceItem.InvoiceDate == _projInvoiceJour.InvoiceDate
        {
            // The RefReturnInvoiceTrans_W field will only be populated when there is a Sales Order
            // associated to the Project Invoice.

            // <GEEPL>
            if (isCountryRegionPL)
            {
                projCreditInvoicingSalesLine = true;
            }
            // </GEEPL>

            if (isEnabledProjOrigSalesOrderInvoiceRefFlight_PL && isCountryRegionPL)
            {
                Set retSet = new Set(Types::String);
                Set creditInvoiceSet = new Set(Types::String);
                retSet = PSAProjInvoiceRPTHelperEE::findOriginalInvoiceProjSalesInvoiceItem_PL(originalProjInvoiceItem.RecId, creditInvoiceSet, retSet);
                originalInvoiceSet = Set::union(originalInvoiceSet, retSet);
            }
            else
            {
                value = strFmt(#InvoicePattern, originalProjInvoiceItem.ProjInvoiceId, originalProjInvoiceItem.InvoiceDate);
                originalInvoiceSet.add(value);
            }
        }

        if (isEnabledProjOrigJournalInvoiceRefFlight_PL && isCountryRegionPL)
        {
            while select ProjInvoiceId, InvoiceDate from originalProjInvoiceItem
                exists join originalProjInvoiceItemDetail
                    where originalProjInvoiceItemDetail.InvoiceRefRecId == originalProjInvoiceItem.RecId
                exists join creditNoteProjInvoiceItemDetail
                    where creditNoteProjInvoiceItemDetail.RecId == originalProjInvoiceItemDetail.RefRecId
                exists join creditNoteProjInvoiceItem
                    where creditNoteProjInvoiceItem.RecId == creditNoteProjInvoiceItemDetail.InvoiceRefRecId
                        && creditNoteProjInvoiceItem.ProjInvoiceId == _projInvoiceJour.ProjInvoiceId
                        && creditNoteProjInvoiceItem.InvoiceDate == _projInvoiceJour.InvoiceDate
                        && creditNoteProjInvoiceItem.RecId > originalProjInvoiceItem.RecId
            {
                Set retSet = new Set(Types::String);
                Set creditInvoiceSet = new Set(Types::String);

                retSet = PSAProjInvoiceRPTHelperEE::findOriginalInvoiceProjInvoiceItem_PL(originalProjInvoiceItem.ProjInvoiceId, originalProjInvoiceItem.InvoiceDate, creditInvoiceSet, retSet);
                originalInvoiceSet = Set::union(originalInvoiceSet, retSet);
            }
        }
        else
        {
            while select ProjInvoiceId, InvoiceDate from originalProjInvoiceItem
                exists join originalProjInvoiceItemDetail
                    where originalProjInvoiceItemDetail.InvoiceRefRecId == originalProjInvoiceItem.RecId
                exists join creditNoteProjInvoiceItemDetail
                    where creditNoteProjInvoiceItemDetail.RecId == originalProjInvoiceItemDetail.RefRecId
                exists join creditNoteProjInvoiceItem
                    where creditNoteProjInvoiceItem.RecId == creditNoteProjInvoiceItemDetail.InvoiceRefRecId
                        && creditNoteProjInvoiceItem.ProjInvoiceId == _projInvoiceJour.ProjInvoiceId
                        && creditNoteProjInvoiceItem.InvoiceDate == _projInvoiceJour.InvoiceDate
            {
                value = strFmt(#InvoicePattern, originalProjInvoiceItem.ProjInvoiceId, originalProjInvoiceItem.InvoiceDate);
                originalInvoiceSet.add(value);
            }
        }

        ProjInvoiceRevenue creditNoteProjInvoiceRevenue;
        ProjInvoiceRevenueDetail creditNoteProjInvoiceRevenueDetail;
        ProjInvoiceRevenue originalProjInvoiceRevenue;
        ProjInvoiceRevenueDetail originalProjInvoiceRevenueDetail;

        if (isEnabledProjOrigJournalInvoiceRefFlight_PL && isCountryRegionPL)
        {
            while select ProjInvoiceId, InvoiceDate from originalProjInvoiceRevenue
                exists join originalProjInvoiceRevenueDetail
                    where originalProjInvoiceRevenueDetail.InvoiceRefRecId == originalProjInvoiceRevenue.RecId
                exists join creditNoteProjInvoiceRevenueDetail
                    where creditNoteProjInvoiceRevenueDetail.RecId == originalProjInvoiceRevenueDetail.RefRecId
                exists join creditNoteProjInvoiceRevenue
                    where creditNoteProjInvoiceRevenue.RecId == creditNoteProjInvoiceRevenueDetail.InvoiceRefRecId
                        && creditNoteProjInvoiceRevenue.ProjInvoiceId == _projInvoiceJour.ProjInvoiceId
                        && creditNoteProjInvoiceRevenue.InvoiceDate == _projInvoiceJour.InvoiceDate
                        && creditNoteProjInvoiceRevenue.RecId > originalProjInvoiceRevenue.RecId
            {
                Set retSet = new Set(Types::String);
                Set creditInvoiceSet = new Set(Types::String);
                
                retSet = PSAProjInvoiceRPTHelperEE::findOriginalInvoiceProjInvoiceRevenue_PL(originalProjInvoiceRevenue.ProjInvoiceId, originalProjInvoiceRevenue.InvoiceDate, creditInvoiceSet, retSet);
                originalInvoiceSet = Set::union(originalInvoiceSet, retSet);
            }
        }
        else
        {
            while select ProjInvoiceId, InvoiceDate from originalProjInvoiceRevenue
                exists join originalProjInvoiceRevenueDetail
                    where originalProjInvoiceRevenueDetail.InvoiceRefRecId == originalProjInvoiceRevenue.RecId
                exists join creditNoteProjInvoiceRevenueDetail
                    where creditNoteProjInvoiceRevenueDetail.RecId == originalProjInvoiceRevenueDetail.RefRecId
                exists join creditNoteProjInvoiceRevenue
                    where creditNoteProjInvoiceRevenue.RecId == creditNoteProjInvoiceRevenueDetail.InvoiceRefRecId
                        && creditNoteProjInvoiceRevenue.ProjInvoiceId == _projInvoiceJour.ProjInvoiceId
                        && creditNoteProjInvoiceRevenue.InvoiceDate == _projInvoiceJour.InvoiceDate
            {
                value = strFmt(#InvoicePattern, originalProjInvoiceRevenue.ProjInvoiceId, originalProjInvoiceRevenue.InvoiceDate);
                originalInvoiceSet.add(value);
            }
        }

        ProjInvoiceCost creditNoteProjInvoiceCost;
        ProjInvoiceCostDetail creditNoteProjInvoiceCostDetail;
        ProjInvoiceCost originalProjInvoiceCost;
        ProjInvoiceCostDetail originalProjInvoiceCostDetail;


        if (isEnabledProjOrigJournalInvoiceRefFlight_PL && isCountryRegionPL)
        {
            while select ProjInvoiceId, InvoiceDate from originalProjInvoiceCost
                exists join originalProjInvoiceCostDetail
                    where originalProjInvoiceCostDetail.InvoiceRefRecId == originalProjInvoiceCost.RecId
                exists join creditNoteProjInvoiceCostDetail
                    where creditNoteProjInvoiceCostDetail.RecId == originalProjInvoiceCostDetail.RefRecId
                exists join creditNoteProjInvoiceCost
                    where creditNoteProjInvoiceCost.RecId == creditNoteProjInvoiceCostDetail.InvoiceRefRecId
                        && creditNoteProjInvoiceCost.ProjInvoiceId == _projInvoiceJour.ProjInvoiceId
                        && creditNoteProjInvoiceCost.InvoiceDate == _projInvoiceJour.InvoiceDate
                        && creditNoteProjInvoiceCost.RecId > originalProjInvoiceCost.RecId
            {
                Set retSet = new Set(Types::String);
                Set creditInvoiceSet = new Set(Types::String);
                
                retSet = PSAProjInvoiceRPTHelperEE::findOriginalInvoiceProjInvoiceCost_PL(originalProjInvoiceCost.ProjInvoiceId, originalProjInvoiceCost.InvoiceDate, creditInvoiceSet, retSet);
                originalInvoiceSet = Set::union(originalInvoiceSet, retSet);
            }
        }
        else
        {
            while select ProjInvoiceId, InvoiceDate from originalProjInvoiceCost
                exists join originalProjInvoiceCostDetail
                    where originalProjInvoiceCostDetail.InvoiceRefRecId == originalProjInvoiceCost.RecId
                exists join creditNoteProjInvoiceCostDetail
                    where creditNoteProjInvoiceCostDetail.RecId == originalProjInvoiceCostDetail.RefRecId
                exists join creditNoteProjInvoiceCost
                    where creditNoteProjInvoiceCost.RecId == creditNoteProjInvoiceCostDetail.InvoiceRefRecId
                        && creditNoteProjInvoiceCost.ProjInvoiceId == _projInvoiceJour.ProjInvoiceId
                        && creditNoteProjInvoiceCost.InvoiceDate == _projInvoiceJour.InvoiceDate
            {
                value = strFmt(#InvoicePattern, originalProjInvoiceCost.ProjInvoiceId, originalProjInvoiceCost.InvoiceDate);
                originalInvoiceSet.add(value);
            }
        }

        ProjInvoiceEmpl creditNoteProjInvoiceEmpl;
        ProjInvoiceEmplDetail creditNoteProjInvoiceEmplDetail;
        ProjInvoiceEmpl originalProjInvoiceEmpl;
        ProjInvoiceEmplDetail originalProjInvoiceEmplDetail;
        
        if (isEnabledProjOrigJournalInvoiceRefFlight_PL && isCountryRegionPL)
        {
            while select ProjInvoiceId, InvoiceDate from originalProjInvoiceEmpl
                exists join originalProjInvoiceEmplDetail
                    where originalProjInvoiceEmplDetail.InvoiceRefRecId == originalProjInvoiceEmpl.RecId
                exists join creditNoteProjInvoiceEmplDetail
                    where creditNoteProjInvoiceEmplDetail.RecId == originalProjInvoiceEmplDetail.RefRecId
                exists join creditNoteProjInvoiceEmpl
                    where creditNoteProjInvoiceEmpl.RecId == creditNoteProjInvoiceEmplDetail.InvoiceRefRecId
                        && creditNoteProjInvoiceEmpl.ProjInvoiceId == _projInvoiceJour.ProjInvoiceId
                        && creditNoteProjInvoiceEmpl.InvoiceDate == _projInvoiceJour.InvoiceDate
                        && creditNoteProjInvoiceEmpl.RecId > originalProjInvoiceEmpl.RecId
            {
                Set retSet = new Set(Types::String);
                Set creditInvoiceSet = new Set(Types::String);
                
                retSet = PSAProjInvoiceRPTHelperEE::findOriginalInvoiceProjInvoiceEmpl_PL(originalProjInvoiceEmpl.ProjInvoiceId, originalProjInvoiceEmpl.InvoiceDate, creditInvoiceSet, retSet);
                originalInvoiceSet = Set::union(originalInvoiceSet, retSet);
            }
        }
        else
        {
            while select ProjInvoiceId, InvoiceDate from originalProjInvoiceEmpl
                exists join originalProjInvoiceEmplDetail
                    where originalProjInvoiceEmplDetail.InvoiceRefRecId == originalProjInvoiceEmpl.RecId
                exists join creditNoteProjInvoiceEmplDetail
                    where creditNoteProjInvoiceEmplDetail.RecId == originalProjInvoiceEmplDetail.RefRecId
                exists join creditNoteProjInvoiceEmpl
                    where creditNoteProjInvoiceEmpl.RecId == creditNoteProjInvoiceEmplDetail.InvoiceRefRecId
                        && creditNoteProjInvoiceEmpl.ProjInvoiceId == _projInvoiceJour.ProjInvoiceId
                        && creditNoteProjInvoiceEmpl.InvoiceDate == _projInvoiceJour.InvoiceDate
            {
                value = strFmt(#InvoicePattern, originalProjInvoiceEmpl.ProjInvoiceId, originalProjInvoiceEmpl.InvoiceDate);
                originalInvoiceSet.add(value);
            }
        }

        ProjInvoiceOnAcc creditNoteProjInvoiceOnAcc;
        ProjInvoiceOnAccDetail creditNoteProjInvoiceOnAccDetail;
        ProjInvoiceOnAcc originalProjInvoiceOnAcc;
        ProjInvoiceOnAccDetail originalProjInvoiceOnAccDetail;

        if (isEnabledProjOrigJournalInvoiceRefFlight_PL && isCountryRegionPL)
        {
            while select ProjInvoiceId, InvoiceDate from originalProjInvoiceOnAcc
                exists join originalProjInvoiceOnAccDetail
                    where originalProjInvoiceOnAccDetail.InvoiceRefRecId == originalProjInvoiceOnAcc.RecId
                exists join creditNoteProjInvoiceOnAccDetail
                    where creditNoteProjInvoiceOnAccDetail.RecId == originalProjInvoiceOnAccDetail.RefRecId
                exists join creditNoteProjInvoiceOnAcc
                    where creditNoteProjInvoiceOnAcc.RecId == creditNoteProjInvoiceOnAccDetail.InvoiceRefRecId
                        && creditNoteProjInvoiceOnAcc.ProjInvoiceId == _projInvoiceJour.ProjInvoiceId
                        && creditNoteProjInvoiceOnAcc.InvoiceDate == _projInvoiceJour.InvoiceDate
                        && creditNoteProjInvoiceOnAcc.RecId > originalProjInvoiceOnAcc.RecId
            {
                Set retSet = new Set(Types::String);
                Set creditInvoiceSet = new Set(Types::String);
                
                retSet = PSAProjInvoiceRPTHelperEE::findOriginalInvoiceProjInvoiceOnAcc_PL(originalProjInvoiceOnAcc.ProjInvoiceId, originalProjInvoiceOnAcc.InvoiceDate, creditInvoiceSet, retSet);
                originalInvoiceSet = Set::union(originalInvoiceSet, retSet);
            }
        }
        else
        {
            while select ProjInvoiceId, InvoiceDate from originalProjInvoiceOnAcc
                exists join originalProjInvoiceOnAccDetail
                    where originalProjInvoiceOnAccDetail.InvoiceRefRecId == originalProjInvoiceOnAcc.RecId
                exists join creditNoteProjInvoiceOnAccDetail
                    where creditNoteProjInvoiceOnAccDetail.RecId == originalProjInvoiceOnAccDetail.RefRecId
                exists join creditNoteProjInvoiceOnAcc
                    where creditNoteProjInvoiceOnAcc.RecId == creditNoteProjInvoiceOnAccDetail.InvoiceRefRecId
                        && creditNoteProjInvoiceOnAcc.ProjInvoiceId == _projInvoiceJour.ProjInvoiceId
                        && creditNoteProjInvoiceOnAcc.InvoiceDate == _projInvoiceJour.InvoiceDate
            {
                value = strFmt(#InvoicePattern, originalProjInvoiceOnAcc.ProjInvoiceId, originalProjInvoiceOnAcc.InvoiceDate);
                originalInvoiceSet.add(value);
            }
        }

        SetIterator setIterator = new SetIterator(originalInvoiceSet);
        str originalInvoiceReference;

        while (setIterator.more())
        {
            // Generate the string to display based on the original invoices that were found.
            originalInvoiceReference += (originalInvoiceReference ? #Separator : "") + setIterator.value();
            setIterator.next();
        }

        return originalInvoiceReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOriginalInvoiceProjSalesInvoiceItem_PL</Name>
				<Source><![CDATA[
    private static Set findOriginalInvoiceProjSalesInvoiceItem_PL(RefReturnInvoiceTrans_W _returnInvoiceTrans,
        Set _creditInvoiceSet,
        Set _retSet)
    {
        ProjInvoiceItem creditNoteProjInvoiceItem;
        ProjInvoiceItem creditNoteProjInvoiceItemWithReference;

        while select ProjInvoiceId, InvoiceDate from creditNoteProjInvoiceItem
                where creditNoteProjInvoiceItem.RecId == _returnInvoiceTrans
            join RefReturnInvoiceTrans_W from creditNoteProjInvoiceItemWithReference
                where creditNoteProjInvoiceItemWithReference.ProjInvoiceId == creditNoteProjInvoiceItem.ProjInvoiceId
                    && creditNoteProjInvoiceItemWithReference.InvoiceDate == creditNoteProjInvoiceItem.InvoiceDate
                    && creditNoteProjInvoiceItemWithReference.SalesId == creditNoteProjInvoiceItem.SalesId
                    && creditNoteProjInvoiceItemWithReference.RefReturnInvoiceTrans_W != 0
        {
            // This is not valid original invoice reference as it's a credit note
            _creditInvoiceSet.add(strFmt(#InvoicePattern, creditNoteProjInvoiceItem.ProjInvoiceId, creditNoteProjInvoiceItem.InvoiceDate));

            _retSet = PSAProjInvoiceRPTHelperEE::findOriginalInvoiceProjSalesInvoiceItem_PL(creditNoteProjInvoiceItemWithReference.RefReturnInvoiceTrans_W, _creditInvoiceSet, _retSet);
        }

        ProjInvoiceItem originalProjInvoiceItem = ProjInvoiceItem::findRecId(_returnInvoiceTrans);
        str value = strFmt(#InvoicePattern, originalProjInvoiceItem.ProjInvoiceId, originalProjInvoiceItem.InvoiceDate);

        // Only add original invoice reference that is not a credit note            
        if (!originalProjInvoiceItem.RefReturnInvoiceTrans_W && !_creditInvoiceSet.in(value))
        {
            _retSet.add(value);
        }

        return _retSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOriginalInvoiceProjInvoiceItem_PL</Name>
				<Source><![CDATA[
    private static Set findOriginalInvoiceProjInvoiceItem_PL(ProjInvoiceId _projInvoiceId, InvoiceDate _invoiceDate, Set _creditInvoiceSet, Set _retSet)
    {
        ProjInvoiceItem originalProjInvoiceItem;
        ProjInvoiceItem creditNoteProjInvoiceItem;
        ProjInvoiceItemDetail originalProjInvoiceItemDetail;
        ProjInvoiceItemDetail creditNoteProjInvoiceItemDetail;

        while select RecId from creditNoteProjInvoiceItem
            where creditNoteProjInvoiceItem.ProjInvoiceId == _projInvoiceId
                && creditNoteProjInvoiceItem.InvoiceDate == _invoiceDate
            join RecId from creditNoteProjInvoiceItemDetail
                where creditNoteProjInvoiceItemDetail.InvoiceRefRecId == creditNoteProjInvoiceItem.RecId
            join RecId from originalProjInvoiceItemDetail
                where originalProjInvoiceItemDetail.RefRecId == creditNoteProjInvoiceItemDetail.RecId
            join ProjInvoiceId, InvoiceDate from originalProjInvoiceItem
                where originalProjInvoiceItem.RecId == originalProjInvoiceItemDetail.InvoiceRefRecId
                    && creditNoteProjInvoiceItem.RecId > originalProjInvoiceItem.RecId
        {
            // This is not valid original invoice reference as it's a credit note
            _creditInvoiceSet.add(strFmt(#InvoicePattern, _projInvoiceId, _invoiceDate));

            _retSet = PSAProjInvoiceRPTHelperEE::findOriginalInvoiceProjInvoiceItem_PL(originalProjInvoiceItem.ProjInvoiceId, originalProjInvoiceItem.InvoiceDate, _creditInvoiceSet, _retSet);
        }

        str value = strFmt(#InvoicePattern, _projInvoiceId, _invoiceDate);

        // Only add original invoice reference that is not a credit note
        if (!creditNoteProjInvoiceItem && !_creditInvoiceSet.in(value))
        {
            _retSet.add(value);
        }

        return _retSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOriginalInvoiceProjInvoiceRevenue_PL</Name>
				<Source><![CDATA[
    private static Set findOriginalInvoiceProjInvoiceRevenue_PL(ProjInvoiceId _projInvoiceId, InvoiceDate _invoiceDate, Set _creditInvoiceSet, Set _retSet)
    {
        ProjInvoiceRevenue originalProjInvoiceRevenue;
        ProjInvoiceRevenue creditNoteProjInvoiceRevenue;
        ProjInvoiceRevenueDetail originalProjInvoiceRevenueDetail;
        ProjInvoiceRevenueDetail creditNoteProjInvoiceRevenueDetail;

        while select RecId from creditNoteProjInvoiceRevenue
            where creditNoteProjInvoiceRevenue.ProjInvoiceId == _projInvoiceId
                && creditNoteProjInvoiceRevenue.InvoiceDate == _invoiceDate
            join RecId from creditNoteProjInvoiceRevenueDetail
                where creditNoteProjInvoiceRevenueDetail.InvoiceRefRecId == creditNoteProjInvoiceRevenue.RecId
            join RecId from originalProjInvoiceRevenueDetail
                where originalProjInvoiceRevenueDetail.RefRecId == creditNoteProjInvoiceRevenueDetail.RecId
            join ProjInvoiceId, InvoiceDate from originalProjInvoiceRevenue
                where originalProjInvoiceRevenue.RecId == originalProjInvoiceRevenueDetail.InvoiceRefRecId
                    && creditNoteProjInvoiceRevenue.RecId > originalProjInvoiceRevenue.RecId
        {
            // This is not valid original invoice reference as it's a credit note
            _creditInvoiceSet.add(strFmt(#InvoicePattern, _projInvoiceId, _invoiceDate));

            _retSet = PSAProjInvoiceRPTHelperEE::findOriginalInvoiceProjInvoiceRevenue_PL(originalProjInvoiceRevenue.ProjInvoiceId, originalProjInvoiceRevenue.InvoiceDate, _creditInvoiceSet, _retSet);
        }

        str value = strFmt(#InvoicePattern, _projInvoiceId, _invoiceDate);

        // Only add original invoice reference that is not a credit note
        if (!creditNoteProjInvoiceRevenue && !_creditInvoiceSet.in(value))
        {
            _retSet.add(value);
        }

        return _retSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOriginalInvoiceProjInvoiceCost_PL</Name>
				<Source><![CDATA[
    private static Set findOriginalInvoiceProjInvoiceCost_PL(ProjInvoiceId _projInvoiceId, InvoiceDate _invoiceDate, Set _creditInvoiceSet, Set _retSet)
    {
        ProjInvoiceCost originalProjInvoiceCost;
        ProjInvoiceCost creditNoteProjInvoiceCost;
        ProjInvoiceCostDetail originalProjInvoiceCostDetail;
        ProjInvoiceCostDetail creditNoteProjInvoiceCostDetail;

        while select RecId from creditNoteProjInvoiceCost
            where creditNoteProjInvoiceCost.ProjInvoiceId == _projInvoiceId
                && creditNoteProjInvoiceCost.InvoiceDate == _invoiceDate
            join RecId from creditNoteProjInvoiceCostDetail
                where creditNoteProjInvoiceCostDetail.InvoiceRefRecId == creditNoteProjInvoiceCost.RecId
            join RecId from originalProjInvoiceCostDetail
                where originalProjInvoiceCostDetail.RefRecId == creditNoteProjInvoiceCostDetail.RecId
            join ProjInvoiceId, InvoiceDate from originalProjInvoiceCost
                where originalProjInvoiceCost.RecId == originalProjInvoiceCostDetail.InvoiceRefRecId
                    && creditNoteProjInvoiceCost.RecId > originalProjInvoiceCost.RecId
        {
            // This is not valid original invoice reference as it's a credit note
            _creditInvoiceSet.add(strFmt(#InvoicePattern, _projInvoiceId, _invoiceDate));

            _retSet = PSAProjInvoiceRPTHelperEE::findOriginalInvoiceProjInvoiceCost_PL(originalProjInvoiceCost.ProjInvoiceId, originalProjInvoiceCost.InvoiceDate, _creditInvoiceSet, _retSet);
        }

        str value = strFmt(#InvoicePattern, _projInvoiceId, _invoiceDate);

        // Only add original invoice reference that is not a credit note
        if (!creditNoteProjInvoiceCost && !_creditInvoiceSet.in(value))
        {
            _retSet.add(value);
        }

        return _retSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOriginalInvoiceProjInvoiceEmpl_PL</Name>
				<Source><![CDATA[
    private static Set findOriginalInvoiceProjInvoiceEmpl_PL(ProjInvoiceId _projInvoiceId, InvoiceDate _invoiceDate, Set _creditInvoiceSet, Set _retSet)
    {
        ProjInvoiceEmpl originalProjInvoiceEmpl;
        ProjInvoiceEmpl creditNoteProjInvoiceEmpl;
        ProjInvoiceEmplDetail originalProjInvoiceEmplDetail;
        ProjInvoiceEmplDetail creditNoteProjInvoiceEmplDetail;

        while select RecId from creditNoteProjInvoiceEmpl
            where creditNoteProjInvoiceEmpl.ProjInvoiceId == _projInvoiceId
                && creditNoteProjInvoiceEmpl.InvoiceDate == _invoiceDate
            join RecId from creditNoteProjInvoiceEmplDetail
                where creditNoteProjInvoiceEmplDetail.InvoiceRefRecId == creditNoteProjInvoiceEmpl.RecId
            join RecId from originalProjInvoiceEmplDetail
                where originalProjInvoiceEmplDetail.RefRecId == creditNoteProjInvoiceEmplDetail.RecId
            join ProjInvoiceId, InvoiceDate from originalProjInvoiceEmpl
                where originalProjInvoiceEmpl.RecId == originalProjInvoiceEmplDetail.InvoiceRefRecId
                    && creditNoteProjInvoiceEmpl.RecId > originalProjInvoiceEmpl.RecId
        {
            // This is not valid original invoice reference as it's a credit note
            _creditInvoiceSet.add(strFmt(#InvoicePattern, _projInvoiceId, _invoiceDate));

            _retSet = PSAProjInvoiceRPTHelperEE::findOriginalInvoiceProjInvoiceEmpl_PL(originalProjInvoiceEmpl.ProjInvoiceId, originalProjInvoiceEmpl.InvoiceDate, _creditInvoiceSet, _retSet);
        }

        str value = strFmt(#InvoicePattern, _projInvoiceId, _invoiceDate);

        // Only add original invoice reference that is not a credit note
        if (!creditNoteProjInvoiceEmpl && !_creditInvoiceSet.in(value))
        {
            _retSet.add(value);
        }

        return _retSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOriginalInvoiceProjInvoiceOnAcc_PL</Name>
				<Source><![CDATA[
    private static Set findOriginalInvoiceProjInvoiceOnAcc_PL(ProjInvoiceId _projInvoiceId, InvoiceDate _invoiceDate, Set _creditInvoiceSet, Set _retSet)
    {
        ProjInvoiceOnAcc originalProjInvoiceOnAcc;
        ProjInvoiceOnAcc creditNoteProjInvoiceOnAcc;
        ProjInvoiceOnAccDetail originalProjInvoiceOnAccDetail;
        ProjInvoiceOnAccDetail creditNoteProjInvoiceOnAccDetail;

        while select RecId from creditNoteProjInvoiceOnAcc
            where creditNoteProjInvoiceOnAcc.ProjInvoiceId == _projInvoiceId
                && creditNoteProjInvoiceOnAcc.InvoiceDate == _invoiceDate
            join RecId from creditNoteProjInvoiceOnAccDetail
                where creditNoteProjInvoiceOnAccDetail.InvoiceRefRecId == creditNoteProjInvoiceOnAcc.RecId
            join RecId from originalProjInvoiceOnAccDetail
                where originalProjInvoiceOnAccDetail.RefRecId == creditNoteProjInvoiceOnAccDetail.RecId
            join ProjInvoiceId, InvoiceDate from originalProjInvoiceOnAcc
                where originalProjInvoiceOnAcc.RecId == originalProjInvoiceOnAccDetail.InvoiceRefRecId
                    && creditNoteProjInvoiceOnAcc.RecId > originalProjInvoiceOnAcc.RecId
        {
            // This is not valid original invoice reference as it's a credit note
            _creditInvoiceSet.add(strFmt(#InvoicePattern, _projInvoiceId, _invoiceDate));

            _retSet = PSAProjInvoiceRPTHelperEE::findOriginalInvoiceProjInvoiceOnAcc_PL(originalProjInvoiceOnAcc.ProjInvoiceId, originalProjInvoiceOnAcc.InvoiceDate, _creditInvoiceSet, _retSet);
        }

        str value = strFmt(#InvoicePattern, _projInvoiceId, _invoiceDate);

        // Only add original invoice reference that is not a credit note
        if (!creditNoteProjInvoiceOnAcc && !_creditInvoiceSet.in(value))
        {
            _retSet.add(value);
        }

        return _retSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalExcludedTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the sum of all <c>TaxTrans</c> records for the specified project invoice that
    /// have been excluded from the invoice.
    /// </summary>
    /// <param name="_ledgerVoucher">
    /// The voucher number of the project invoice.
    /// </param>
    /// <returns>
    /// The total tax amount that has been excluded from the invoice.
    /// </returns>
    public static TaxRegulationAmountCur calculateTotalExcludedTaxAmount(Voucher _ledgerVoucher)
    {
        TaxTrans taxTrans;
        TaxTransExcludeFromInvoice taxTransExcludeFromInvoice;

        select sum(SourceRegulateAmountCur) from taxTrans
            where taxTrans.Voucher == _ledgerVoucher
            exists join taxTransExcludeFromInvoice
                where taxTransExcludeFromInvoice.TaxTrans == taxTrans.RecId;

        return -taxTrans.SourceRegulateAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs <c>PSAProjInvoiceRPTHelperEE</c> instance.
    /// </summary>
    /// <param name="_projInvoiceLocalizationTmp">
    /// <c>ProjInvoiceLocalizationTmp</c> for initialization.
    /// </param>
    /// <returns>
    /// Created instance
    /// </returns>
    public static PSAProjInvoiceRPTHelperEE construct(ProjInvoiceLocalizationTmp _projInvoiceLocalizationTmp)
    {
        PSAProjInvoiceRPTHelperEE pSAProjInvoiceRPTHelperEE = new PSAProjInvoiceRPTHelperEE();

        pSAProjInvoiceRPTHelperEE.parmProjInvoiceLocalizationTmp(_projInvoiceLocalizationTmp);

        return pSAProjInvoiceRPTHelperEE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjInvoiceLocalizationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills and inserts the header report data into the temporary table.
    /// </summary>
    /// <param name="_projInvoiceLocalizationTmp">
    /// Passes the cursor of <c>ProjInvoiceLocalizationTmp</c> table to this method.
    /// </param>
    /// <param name="_projInvoiceJour">
    /// The cursor of <c>ProjInvoiceLocalizationTmp</c> table contains data for the report header.
    /// </param>
    public static void createProjInvoiceLocalizationTmp(ProjInvoiceLocalizationTmp _projInvoiceLocalizationTmp, ProjInvoiceJour _projInvoiceJour)
    {
        PSAProjInvoiceRPTHelperEE pSAProjInvoiceRPTHelperEE = new PSAProjInvoiceRPTHelperEE();

        pSAProjInvoiceRPTHelperEE.parmProjInvoiceLocalizationTmp(_projInvoiceLocalizationTmp);
        pSAProjInvoiceRPTHelperEE.insertIntoProjInvoiceLocalizationTmp(_projInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExcludedTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the sum of all TaxTrans records for the specified invoice line record that
    /// has been excluded from the invoice.
    /// </summary>
    /// <param name="_ledgerVoucher">
    /// The voucher number.
    /// </param>
    /// <param name="_invoiceLine">
    /// The invoice line record.
    /// </param>
    /// <returns>
    /// The total tax amount that was excluded from the invoice.
    /// </returns>
    public static TaxRegulationAmountCur getExcludedTaxAmount(Voucher _ledgerVoucher, Common _invoiceLine)
    {
        TaxTrans taxTrans;
        TaxTransExcludeFromInvoice taxTransExcludeFromInvoice;

        // Find the sum of all TaxTrans records for the passed in invoice line record that has been excluded.
        select sum(SourceRegulateAmountCur) from taxTrans
            where taxTrans.Voucher       == _ledgerVoucher &&
                  taxTrans.SourceTableId == _invoiceLine.TableId &&
                  taxTrans.SourceRecId   == _invoiceLine.RecId
            exists join taxTransExcludeFromInvoice
                where taxTransExcludeFromInvoice.TaxTrans == taxTrans.RecId;

        return -taxTrans.SourceRegulateAmountCur;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>