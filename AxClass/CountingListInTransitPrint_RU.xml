<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CountingListInTransitPrint_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CountingListInTransitPrint_RU extends RunBase implements InventJournalReportPackable_RU
{
    QueryRun                    queryRun;
    ComExcelDocument_RU         excel;

    JournalId                   journalId;

    TransDate                   countingListDate;
    TransDate                   countingStartDate;
    TransDate                   countingEndDate;

    DocumentNum                 countingOrderNum;
    TransDate                   countingOrderDate;

    DialogField                 countingListDateField;
    DialogField                 countingStartDateField;
    DialogField                 countingEndDateField;

    DialogField                 countingOrderNumField;
    DialogField                 countingOrderDateField;

    List                        inventReportsList;
    InventJournalReportType_RU  reportType;
    InventJournalProforma_RU    report;

    int                         numOfLinesTotal;
    int                         numOfSheetsTotal;

    Amount                      onHandTotalAmount;
    Amount                      countedTotalAmount;
    Amount                      onHandPageTotalAmount;
    Amount                      countedPageTotalAmount;

    int                         lineNum;
    int                         excelLineNum;
    int                         sheetNum;

    int                         sheetToBeDeleted;

    int                         progressCounter;

    protected const int ReceiptDatePos = 1;
    protected const int InvoiceIdPos = 2;
    protected const int InvoiceDatePos = 3;
    protected const int NumOfLinesPage1 = 6;
    protected const int NumOfLinesPage2 = 26;
    protected const int NumOfLinesPage3 = 9;
    protected const int StartLinePage1 = 30;
    protected const int StartLinePage2 = 6;
    protected const int StartLinePage3 = 7;

    protected const Version CurrentVersion = 2;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase    dialog = super();

        if (dialog)
        {
            dialog.addGroup("@GLS113056");
            countingListDateField = dialog.addFieldValue(extendedTypeStr(TransDate), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), "@GLS115816");

            dialog.addGroup("@SYS25001");
            countingStartDateField = dialog.addFieldValue(extendedTypeStr(StartDate), countingStartDate, "@SYS81006");
            countingEndDateField   = dialog.addFieldValue(extendedTypeStr(EndDate), countingEndDate, "@SYS22882");

            dialog.addGroup("@GLS115817");
            countingOrderNumField  = dialog.addFieldValue(extendedTypeStr(DocumentNum), countingOrderNum, "@GLS114049");
            countingOrderDateField = dialog.addFieldValue(extendedTypeStr(TransDate), countingOrderDate, "@GLS113092");

            dialog.addMenuItemButton(MenuItemType::Display, menuitemDisplayStr(InventJournalPrint_RU), DialogMenuItemGroup::BottomGrp);
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalizeDocument</Name>
				<Source><![CDATA[
    protected void finalizeDocument()
    {
        excel.visible(true);
        excel.finalize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        if (ret)
        {
            countingListDate  = countingListDateField.value();
            countingStartDate = countingStartDateField.value();
            countingEndDate   = countingEndDateField.value();

            countingOrderNum  = countingOrderNumField.value();
            countingOrderDate = countingOrderDateField.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReceiptInfo</Name>
				<Source><![CDATA[
    protected container getReceiptInfo(InventJournalTrans _inventJournalTrans, InventDim _inventDimCriteria)
    {
        InventTransOrigin inventTransOrigin;
        InventTrans       inventTrans;
        InventDim         inventDim;
        InventDimParm     inventDimParm;

        TransDate      receiptDate;
        InvoiceId      invoiceId;
        TransDate      invoiceDate;

        boolean        isFirst = true;

        container      ret;

        inventDimParm.initFromInventDim(_inventDimCriteria);

        while select ReferenceCategory from inventTransOrigin
            where inventTransOrigin.ItemId == _inventJournalTrans.ItemId
        join DateFinancial, DatePhysical, InvoiceId from inventTrans
            where inventTrans.InventTransOrigin  == inventTransOrigin.RecId &&
                 (inventTrans.StatusReceipt == StatusReceipt::Received ||
                  inventTrans.StatusReceipt == StatusReceipt::Purchased) &&
                  inventTrans.StatusIssue == StatusIssue::None &&
                  inventTrans.DatePhysical  <= _inventJournalTrans.TransDate
        #InventDimJoin(inventTrans.inventDimId, inventDim, _inventDimCriteria, inventDimParm, InventOwnerIdx_RU)
        {
            if (! isFirst)
            {
                receiptDate = dateNull();
                invoiceId   = '';
                invoiceDate = dateNull();

                break;
            }

            receiptDate = inventTrans.DatePhysical;

            if (inventTransOrigin.ReferenceCategory == InventTransType::Purch)
            {
                invoiceId   = inventTrans.InvoiceId;
                invoiceDate = inventTrans.DateFinancial;
            }

            isFirst = false;
        }

        ret = conIns(ret, ReceiptDatePos, receiptDate);
        ret = conIns(ret, InvoiceIdPos, invoiceId);
        ret = conIns(ret, InvoiceDatePos, invoiceDate);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalStrFirstPart</Name>
				<Source><![CDATA[
    protected TempStr getTotalStrFirstPart(TempStr _text)
    {
        const int FirstLineSymbols = 51;
        const str Delimiter = ' ';

        int    posResult;
        int    posCheck = 0;
        int    startPos = 1;
        int    searchLength = strLen(_text);

        if (searchLength <= FirstLineSymbols)
            return _text;

        while (posCheck - 1 <= FirstLineSymbols)
        {
            posResult = posCheck ? posCheck - 1 : 0;
            posCheck  = strScan(_text, Delimiter, startPos, searchLength);

            if (! posCheck)
                break;

            startPos     = posCheck + 1;
            searchLength = strLen(_text) - startPos + 1;
        }

        return posResult ? subStr(_text, 1, posResult) : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDocument</Name>
				<Source><![CDATA[
    protected void initDocument()
    {
        excel = new ComExcelDocument_RU();
        excel.newFile(this.templateName(), false, -1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();

        this.initQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    protected void initQuery()
    {
        Query                   query;
        QueryBuildDataSource    qbds;
        QueryBuildRange         qbr;

        query = new Query();

        qbds = query.addDataSource(tableNum(InventJournalTrans));
        qbds.addRange(fieldNum(InventJournalTrans, JournalId));

        qbds = qbds.addDataSource(tableNum(InventDim));
        qbds.addLink(fieldNum(InventJournalTrans, InventDimId), fieldNum(InventDim, InventDimId));
        qbds.joinMode(JoinMode::InnerJoin);

        qbds = qbds.addDataSource(tableNum(InventProfile_RU));
        qbds.addLink(fieldNum(InventDim, InventProfileId_RU), fieldNum(InventProfile_RU, InventProfileId));
        qbds.joinMode(JoinMode::InnerJoin);

        qbr = qbds.addRange(fieldNum(InventProfile_RU, StockInTransit));
        qbr.value(queryValue(StockInTransit_RU::BoughtInTransit));
        qbr.status(RangeStatus::Locked);

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReportData</Name>
				<Source><![CDATA[
    protected void initReportData(InventJournalTable _inventJournalTable, InventJournalReportType_RU _reportType)
    {
        reportType        = _reportType;
        inventReportsList = new List(Types::Class);
        report            = InventJournalProforma_RU::construct(reportType);

        report.initOfficialsDefault(_inventJournalTable.OffSessionId_RU);

        inventReportsList.addEnd(report);
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextSheet</Name>
				<Source><![CDATA[
    private void nextSheet()
    {
        void calcSheetLineNum()
        {
            sheetNum ++;

            if (sheetNum == numOfSheetsTotal)
            {
                excelLineNum = StartLinePage3;
            }
            else
            if (numOfLinesTotal - lineNum + 1 <= NumOfLinesPage3)
            {
                sheetToBeDeleted = sheetNum;

                sheetNum ++;

                excelLineNum = StartLinePage3;
            }
            else
            {
                excelLineNum = StartLinePage2;
            }
        }

        if (sheetNum == 1)
        {
            if (excelLineNum >= NumOfLinesPage1 + StartLinePage1)
            {
                this.outputPageTotals();
                calcSheetLineNum();
            }
        }
        else
        {
            if (excelLineNum >= NumOfLinesPage2 + StartLinePage2)
            {
                this.outputPageTotals();

                calcSheetLineNum();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputBody</Name>
				<Source><![CDATA[
    private void outputBody()
    {
        InventJournalTrans     inventJournalTrans;
        InventDim              inventDim;
        InventDimParm          inventDimParm;
        InventTable            inventTable;
        InventTableModule      inventTableModule;
        InventSumDateValueReportDim inventSumDateValueReport;
        UnitOfMeasure          unit;
        InventOwner_RU         inventOwner;
        VendTable              vendTable;

        Amount                 onHandAmount;
        Amount                 countedAmount;

        container              receiptInfoCon;

        InventQty   costInventQty;
        AmountCur   costInventValue;

        void updateTotals()
        {
            onHandPageTotalAmount  += onHandAmount;
            onHandTotalAmount      += onHandAmount;

            countedPageTotalAmount += countedAmount;
            countedTotalAmount     += countedAmount;
        }

        excelLineNum = StartLinePage1;
        lineNum      = 1;
        sheetNum     = 1;

        this.progressInit("@SYS53218", numOfLinesTotal);

        while (queryRun.next())
        {
            this.progressUpdate();

            inventJournalTrans = queryRun.get(tableNum(InventJournalTrans));
            inventDim          = queryRun.get(tableNum(InventDim));
            inventOwner        = inventDim.inventOwner_RU() ;

            vendTable = (inventOwner && inventOwner.AccountType == InventOwnerAccountType_RU::Vend) ?
                        VendTable::find(inventOwner.AccountNum) :
                        null;

            inventTable        = InventTable::find(inventJournalTrans.ItemId);
            inventTableModule  = inventTable.inventTableModuleInvent();
            unit               = UnitOfMeasure::findBySymbol(inventTableModule.UnitId);

            onHandAmount  = 0;
            countedAmount = 0;

            if (inventJournalTrans.InventOnHand)
            {
                inventDimParm.initFromInventDim(inventDim);
                inventSumDateValueReport = InventSumDateValueReportDim::newParameters(countingListDate,
                                                                                      inventJournalTrans.ItemId,
                                                                                      inventDim,
                                                                                      inventDimParm);
                if (inventSumDateValueReport.postedQty())
                {
                    onHandAmount  = CurrencyExchangeHelper::amount(inventJournalTrans.InventOnHand * inventSumDateValueReport.postedValue() / inventSumDateValueReport.postedQty());
                    countedAmount = CurrencyExchangeHelper::amount(inventJournalTrans.Counted * inventSumDateValueReport.postedValue() / inventSumDateValueReport.postedQty());
                }
            }

            [costInventQty, costInventValue] = InventTrans::calcCostValue(InventTransOrigin::findByInventTransId(inventJournalTrans.InventTransId).RecId);

            if (inventJournalTrans.Qty > 0 && costInventValue == 0)
            {
                costInventValue = inventJournalTrans.CostAmount;
            }

            if (costInventQty)
            {
                countedAmount = onHandAmount + CurrencyExchangeHelper::amount(inventJournalTrans.Qty * costInventValue / costInventQty);
            }

            receiptInfoCon = this.getReceiptInfo(inventJournalTrans, inventDim);

            updateTotals();

            excel.insertValue((sheetNum == numOfSheetsTotal) ? strFmt('A%1', excelLineNum) : strFmt('A%1', excelLineNum), lineNum, sheetNum);
            excel.insertValue((sheetNum == numOfSheetsTotal) ? strFmt('B%1', excelLineNum) : strFmt('B%1', excelLineNum), inventTable.defaultProductName(), sheetNum);
            excel.insertValue((sheetNum == numOfSheetsTotal) ? strFmt('C%1', excelLineNum) : strFmt('D%1', excelLineNum), inventJournalTrans.ItemId, sheetNum);
            excel.insertValue((sheetNum == numOfSheetsTotal) ? strFmt('E%1', excelLineNum) : strFmt('F%1', excelLineNum), UnitOfMeasure_RU::codeOKEI_RU(unit), sheetNum);
            excel.insertValue((sheetNum == numOfSheetsTotal) ? strFmt('F%1', excelLineNum) : strFmt('G%1', excelLineNum), unit.Symbol, sheetNum);

            excel.insertValue((sheetNum == numOfSheetsTotal) ? strFmt('G%1', excelLineNum) : strFmt('I%1', excelLineNum), conPeek(receiptInfoCon, ReceiptDatePos) ? any2str(conPeek(receiptInfoCon, ReceiptDatePos)) : "", sheetNum);
            excel.insertValue((sheetNum == numOfSheetsTotal) ? strFmt('I%1', excelLineNum) : strFmt('J%1', excelLineNum), vendTable.name(), sheetNum);
            excel.insertValue((sheetNum == numOfSheetsTotal) ? strFmt('M%1', excelLineNum) : strFmt('K%1', excelLineNum), vendTable.partyOKPO_RU(), sheetNum);

            excel.insertValue((sheetNum == numOfSheetsTotal) ? strFmt('N%1', excelLineNum) : strFmt('M%1', excelLineNum), conPeek(receiptInfoCon, InvoiceIdPos) ? "@SYS14204" : "", sheetNum);
            excel.insertValue((sheetNum == numOfSheetsTotal) ? strFmt('O%1', excelLineNum) : strFmt('N%1', excelLineNum), conPeek(receiptInfoCon, InvoiceDatePos) ? any2str(conPeek(receiptInfoCon, InvoiceDatePos)) : "", sheetNum);
            excel.insertValue((sheetNum == numOfSheetsTotal) ? strFmt('R%1', excelLineNum) : strFmt('O%1', excelLineNum), conPeek(receiptInfoCon, InvoiceIdPos), sheetNum);

            excel.insertValue((sheetNum == numOfSheetsTotal) ? strFmt('T%1', excelLineNum) : strFmt('Q%1', excelLineNum), inventJournalTrans.Counted, sheetNum);
            excel.insertValue((sheetNum == numOfSheetsTotal) ? strFmt('U%1', excelLineNum) : strFmt('R%1', excelLineNum), countedAmount, sheetNum);
            excel.insertValue((sheetNum == numOfSheetsTotal) ? strFmt('W%1', excelLineNum) : strFmt('U%1', excelLineNum), inventJournalTrans.InventOnHand, sheetNum);
            excel.insertValue((sheetNum == numOfSheetsTotal) ? strFmt('Y%1', excelLineNum) : strFmt('X%1', excelLineNum), onHandAmount, sheetNum);

            excelLineNum ++;
            lineNum      ++;

            this.nextSheet();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputHeader</Name>
				<Source><![CDATA[
    private void outputHeader()
    {
        const str OrderNum = 'orderNum';
        const str OrderDate = 'orderDate';
        const str StatementNum = 'statementNum';
        const str StatementDate = 'statementDate';
        const str CompanyName = 'companyName';
        const str CountingStartDateBookmark = 'countingStartDate';
        const str CountingEndDateBookmark = 'countingEndDate';
        const str CountingListDay = 'countingListDay';
        const str CountingListMonth = 'countingListMonth';
        const str CountingListYear = 'countingListYear';
        const str CountingListDay2 = 'countingListDay2';
        const str CountingListMonth2 = 'countingListMonth2';
        const str CountingListYear2 = 'countingListYear2';

        CompanyInfo companyInfo = CompanyInfo::find();

        excel.insertValue(OrderNum,          countingOrderNum);
        excel.insertValue(OrderDate,         date2str(countingOrderDate, 123, DateDay::Digits2, DateSeparator::Auto, DateMonth::Digits2, DateSeparator::Auto, DateYear::Digits4, DateFlags::None));
        excel.insertValue(StatementNum,      journalId);
        excel.insertValue(StatementDate,     date2str(countingListDate,  123, DateDay::Digits2, DateSeparator::Auto, DateMonth::Digits2, DateSeparator::Auto, DateYear::Digits4, DateFlags::None));
        excel.insertValue(CompanyName,       companyInfo.Name);
        excel.insertValue(CountingStartDateBookmark, date2str(countingStartDate, 123, DateDay::Digits2, DateSeparator::Auto, DateMonth::Digits2, DateSeparator::Auto, DateYear::Digits4, DateFlags::None));
        excel.insertValue(CountingEndDateBookmark,   date2str(countingEndDate,   123, DateDay::Digits2, DateSeparator::Auto, DateMonth::Digits2, DateSeparator::Auto, DateYear::Digits4, DateFlags::None));

        if (countingListDate)
        {
            excel.insertValue(CountingListDay,   dayOfMth(countingListDate));
            excel.insertValue(CountingListMonth, strLwr(RNumDateInWordConverter::construct().date2strMonth(countingListDate)));
            excel.insertValue(CountingListYear,  year(countingListDate));

            excel.insertValue(CountingListDay2,   dayOfMth(countingListDate), numOfSheetsTotal);
            excel.insertValue(CountingListMonth2, strLwr(RNumDateInWordConverter::construct().date2strMonth(countingListDate)), numOfSheetsTotal);
            excel.insertValue(CountingListYear2,  year(countingListDate), numOfSheetsTotal);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputOfficials</Name>
				<Source><![CDATA[
    private void outputOfficials()
    {
        const str Chairman = 'chairman';
        const str Member1 = 'member1';
        const str Member2 = 'member2';
        const str Controller = 'controller';
        const str ChairmanPosition = 'chairmanPosition';
        const str Member1Position = 'member1Position';
        const str Member2Position = 'member2Position';
        const str ControllerPosition = 'controllerPosition';
        const int CountOfMemberConst = 2;

        OfficialsTrans_RU    officialsTrans;

        int                  countOfController;
        int                  countOfMember;
        int                  countOfChairman;

        while select officialsTrans
            where officialsTrans.ReportType   == OffReportType_RU::InventINV6 &&
                  officialsTrans.OffSessionId == report.getOffSessionId()
        {
            switch (officialsTrans.Position)
            {
                case OffPosition_RU::Controller :
                    if (! countOfController)
                    {
                        excel.insertValue(ControllerPosition, PersonTitleTable::find(officialsTrans.Title).Title, numOfSheetsTotal);
                        excel.insertValue(Controller, officialsTrans.Name, numOfSheetsTotal);
                        countOfController ++;
                    }
                    break;

                case OffPosition_RU::Chairman :
                    if (! countOfChairman)
                    {
                        excel.insertValue(ChairmanPosition, PersonTitleTable::find(officialsTrans.Title).Title, numOfSheetsTotal);
                        excel.insertValue(Chairman, officialsTrans.Name, numOfSheetsTotal);
                        countOfChairman ++;
                    }
                    break;

                case OffPosition_RU::Member:
                    if (! countOfMember)
                    {
                        excel.insertValue(Member1Position, PersonTitleTable::find(officialsTrans.Title).Title, numOfSheetsTotal);
                        excel.insertValue(Member1, officialsTrans.Name, numOfSheetsTotal);
                        countOfMember ++;
                    }
                    else
                    if (countOfMember < CountOfMemberConst)
                    {
                        excel.insertValue(Member2Position, PersonTitleTable::find(officialsTrans.Title).Title, numOfSheetsTotal);
                        excel.insertValue(Member2, officialsTrans.Name, numOfSheetsTotal);
                        countOfMember ++;
                    }
                    break;

                default:
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputPageTotals</Name>
				<Source><![CDATA[
    private void outputPageTotals()
    {
        const str CountedPageTotalCell_Page1 = 'R36';
        const str CountedPageTotalCell_Page2 = 'R32';
        const str CountedPageTotalCell_Page3 = 'U16';
        const str OnHandPageTotalCell_Page1 = 'X36';
        const str OnHandPageTotalCell_Page2 = 'X32';
        const str OnHandPageTotalCell_Page3 = 'Y16';

        if (sheetNum == 1)
        {
            excel.insertValue(CountedPageTotalCell_Page1, countedPageTotalAmount, sheetNum);
            excel.insertValue(OnHandPageTotalCell_Page1, onHandPageTotalAmount, sheetNum);
        }
        else
        if (sheetNum == numOfSheetsTotal)
        {
            excel.insertValue(CountedPageTotalCell_Page3, countedPageTotalAmount, sheetNum);
            excel.insertValue(OnHandPageTotalCell_Page3, onHandPageTotalAmount, sheetNum);
        }
        else
        {
            excel.insertValue(CountedPageTotalCell_Page2, countedPageTotalAmount, sheetNum);
            excel.insertValue(OnHandPageTotalCell_Page2, onHandPageTotalAmount, sheetNum);
        }

        onHandPageTotalAmount  = 0;
        countedPageTotalAmount = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputStatementTotals</Name>
				<Source><![CDATA[
    private void outputStatementTotals()
    {
        const str CountedTotalCell = 'U17';
        const str OnHandTotalCell = 'Y17';
        const str CountedTxtBegin = 'countedTxtBegin';
        const str CountedTxt = 'countedTxt';
        const str CountedCent = 'countedCent';
        const int Two = 2;

        TempStr    text;
        TempStr    firstPartText;

        excel.insertValue(CountedTotalCell, countedTotalAmount, numOfSheetsTotal);
        excel.insertValue(OnHandTotalCell, onHandTotalAmount, numOfSheetsTotal);

        text          = RNumDateInWordConverter::construct().numeralsToTxt(countedTotalAmount);
        firstPartText = this.getTotalStrFirstPart(text);

        excel.insertValue(CountedTxtBegin, firstPartText, numOfSheetsTotal);
        excel.insertValue(CountedTxt, strLen(firstPartText) ? subStr(text, strLen(firstPartText) + Two, strLen(text) - strLen(firstPartText) - 1) : text, numOfSheetsTotal);
        excel.insertValue(CountedCent, frac(countedTotalAmount) * 100, numOfSheetsTotal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, countingListDate, countingStartDate, countingEndDate, countingOrderNum, countingOrderDate, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>packReportList</Name>
				<Source><![CDATA[
    public container packReportList()
    {
        return inventReportsList ? inventReportsList.pack() : conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>paginate</Name>
				<Source><![CDATA[
    private void paginate()
    {
        const str SheetNumCellPage2 = 'Q1';
        const str SheetNumCellPage3 = 'U1';
        const int FirstSheetToNumber = 2;
        const str SheetNamePrefix = "стр";

        int i;

        if (! sheetToBeDeleted && sheetNum != numOfSheetsTotal && sheetNum != numOfSheetsTotal - 1)
        {
            sheetToBeDeleted = numOfSheetsTotal - 1;
        }

        if (sheetToBeDeleted)
        {
            excel.deleteWorkSheet(sheetToBeDeleted);

            numOfSheetsTotal --;
        }

        for (i = FirstSheetToNumber; i < numOfSheetsTotal; i++)
        {
            excel.insertValue(sheetNumCellPage2, strFmt("@GLS115818", i), i);
            excel.setWorkSheetName(strFmt("%1%2", SheetNamePrefix, i), i);
        }

        excel.insertValue(sheetNumCellPage3, strFmt("@GLS115818", numOfSheetsTotal), numOfSheetsTotal);
        excel.setWorkSheetName(strFmt("%1%2", SheetNamePrefix, numOfSheetsTotal), numOfSheetsTotal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalId</Name>
				<Source><![CDATA[
    public JournalId parmJournalId(JournalId _journalId = journalId)
    {
        journalId = _journalId;

        return journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareSheets</Name>
				<Source><![CDATA[
    private void prepareSheets()
    {
        const int CopiableSheetNum = 2;

        int    numofSheetsAdd;
        int    i;

        if (numOfLinesTotal - NumOfLinesPage1 - NumOfLinesPage2 - NumOfLinesPage3 > 0)
        {
            numofSheetsAdd = (numOfLinesTotal - NumOfLinesPage1 - NumOfLinesPage3) / NumOfLinesPage2 +
                             ((((numOfLinesTotal - NumOfLinesPage1 - NumOfLinesPage3) mod NumOfLinesPage2) > 0) ? 0 : - 1);
        }

        for (i = 0; i < numofSheetsAdd; i++)
        {
            excel.insertSheet(copiableSheetNum, i + copiableSheetNum);
        }

        numOfSheetsTotal = excel.getWorkSheetsCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressUpdate</Name>
				<Source><![CDATA[
    protected void progressUpdate()
    {
        progressCounter ++;
        progress.setCount(progressCounter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.updateQuery();

        numOfLinesTotal = SysQuery::countLoops(new QueryRun(queryRun.query()));

        if (numOfLinesTotal)
        {
            this.initDocument();
            this.prepareSheets();

            this.outputHeader();
            this.outputBody();

            this.outputPageTotals();
            this.outputStatementTotals();

            this.outputOfficials();
            this.paginate();
            this.finalizeDocument();
        }
        else
        {
            checkFailed("@GLS115819");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected str templateName()
    {
        return 'INV-6.XLT';
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version      version = RunBase::getVersion(_packedClass);
        container    packedQuery;
        boolean ret;

        switch (version)
        {
            case CurrentVersion:
                [version, countingListDate, countingStartDate, countingEndDate, countingOrderNum, countingOrderDate, packedQuery] = _packedClass;

                if (packedQuery)
                {
                    queryRun = new QueryRun(packedQuery);
                }

                ret = true;
                break;

            default :
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    protected void updateQuery()
    {
        QueryBuildRange qbr = SysQuery::findOrCreateRange(queryRun.query().dataSourceTable(tableNum(InventJournalTrans)), fieldNum(InventJournalTrans, JournalId));
        qbr.value(journalId);
        qbr.status(RangeStatus::Locked);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = super(calledFrom);

        if (ret)
        {
            if (countingEndDate < countingStartDate)
            {
                ret = checkFailed("@GLS115820");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static CountingListInTransitPrint_RU construct()
    {
        return new CountingListInTransitPrint_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GLS115821";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        CountingListInTransitPrint_RU countingListPrint;

        if (! _args || _args.dataset() != tableNum(InventJournalTable))
            throw error(strFmt("@SYS25516", CountingListInTransitPrint_RU::description()));

        countingListPrint = CountingListInTransitPrint_RU::newFromArgs(_args);

        if (countingListPrint.prompt())
        {
            countingListPrint.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromArgs</Name>
				<Source><![CDATA[
    static CountingListInTransitPrint_RU newFromArgs(Args _args)
    {
        CountingListInTransitPrint_RU    countingListPrint  = new CountingListInTransitPrint_RU();
        InventJournalTable               inventJournalTable = _args.record();

        countingListPrint.parmJournalId(inventJournalTable.JournalId);

        countingListPrint.initReportData(inventJournalTable, InventJournalReportType_RU::CountingListInTransit);

        return countingListPrint;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>