<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxValidateForSalesOrder_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxValidateForSalesOrder_CN</c> class is used to validate tax for sales order.
/// </summary>
class TaxValidateForSalesOrder_CN extends TaxValidateForTaxIntegration_CN
{
    SalesParmTable      salesParmTable;
    custBankAccount     custBankAccount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>existCustBankAccountName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the cust bank account name exist.
    /// </summary>
    /// <returns>
    /// Returns true if the cust bank account name exist.
    /// </returns>
    protected boolean existCustBankAccountName()
    {
        boolean ret = true;

        if (!custBankAccount.Name)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existCustBankAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the cust bank account number exist.
    /// </summary>
    /// <returns>
    /// Returns true if the cust bank account number exist.
    /// </returns>
    protected boolean existCustBankAccountNum()
    {
        boolean ret = true;

        unchecked (Uncheck::TableSecurityPermission)
        {
            if (!custBankAccount.AccountNum)
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existTaxRegistrationNumberFromCust</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the tax registration number from cust exist.
    /// </summary>
    /// <param name="_companyInfoExtension">
    /// The company info extension information.
    /// </param>
    /// <returns>
    /// Returns true if the tax registration number from cust exist.
    /// </returns>
    protected boolean existTaxRegistrationNumberFromCust(CompanyInfoExtension_CN  _companyInfoExtension)
    {
        boolean ret = false;

        if (TaxRegistration::getTaxRegistrationNumberFromCust(salesParmTable.InvoiceAccount, salesParmTable.Transdate, _companyInfoExtension.TaxRegistrationType))
        {
            ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existVATInvoiceDescTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the VAT invoice desc table exist.
    /// </summary>
    /// <returns>
    /// Returns true if the VAT invoice desc table exist.
    /// </returns>
    protected boolean existVATInvoiceDescTable()
    {
        boolean ret = false;

        if (SalesParmTableExtension_CN::findBySalesParmTable(salesParmTable.RecId).VATInvoiceDescTable)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceAmountAndNumOfLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets invoice amount and number of lines.
    /// </summary>
    public void getInvoiceAmountAndNumOfLines()
    {
        SalesLine           localSalesLine;
        SalesParmLine       localSalesParmLine;
        AmountCur           netAmount;
        AmountCur           taxAmount = 0;
        SalesTotals         salesTotals;
        InventTable         inventTable;
        container           displayFieldsCon;

        select sum(LineAmount), count(RecId) from localSalesParmLine
            where localSalesParmLine.ParmId          == salesParmTable.ParmId
                && localSalesParmLine.TableRefId     == salesParmTable.TableRefId
            exists join localSalesLine
                where localSalesParmLine.OrigSalesId == localSalesLine.SalesId
                    && localSalesParmLine.SalesLineRecId    == localSalesLine.RecId
            exists join inventTable
                where inventTable.ItemId == localSalesParmLine.ItemId
                    && !inventTable.PDSBaseAttributeId; //only aggregate the items that are not attribute based

        netAmount = localSalesParmLine.LineAmount;
        numOfLines = int642int(localSalesParmLine.RecId);

        if (isConfigurationkeyEnabled(configurationKeyNum(PDSPotency)))
        {
            while select RecId, ItemId, LineAmount from localSalesParmLine
                where localSalesParmLine.ParmId          == salesParmTable.ParmId
                    && localSalesParmLine.TableRefId     == salesParmTable.TableRefId
                exists join localSalesLine
                    where localSalesParmLine.OrigSalesId == localSalesLine.SalesId
                        && localSalesParmLine.SalesLineRecId    == localSalesLine.RecId
                exists join inventTable
                    where inventTable.ItemId == localSalesParmLine.ItemId
                        && inventTable.PDSBaseAttributeId  //only aggregate the items that are attribute based
            {
                netAmount += localSalesParmLine.effectiveLineAmount();
                numOfLines ++;
            }
        }

        // calculate the tax amount
        if (taxProfileTable.IncludeTax)
        {
            salesTotals = SalesTotals::construct(salesParmTable, SalesUpdate::All, AccountOrder::None, salesParmTable.ParmId, '', salesParmTable.Ordering);
            salesTotals.calcMarkupForTable(salesParmTable.ParmId, salesParmTable.SalesId);
            salesTotals.calc();
            displayFieldsCon = salesTotals.displayFields();
            taxAmount = conPeek(displayFieldsCon, TradeTotals::posTaxTotal());
        }

        invoiceAmount = netAmount + taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValueDefault</Name>
				<Source><![CDATA[
        public void initValueDefault()
    {
        super();
        salesParmTable      = common;
        custBankAccount     = CustBankAccount::find(salesParmTable.InvoiceAccount, salesParmTable.custBankAccountId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logMessageForMoreProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs message for more profile.
    /// </summary>
    protected void logMessageForMoreProfile()
    {
        checkFailed(strFmt("@GLS60740", salesParmTable.SalesId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyCode</Name>
				<Source><![CDATA[
        protected CurrencyCode parmCurrencyCode()
    {
        CurrencyCode localCurrencyCode;

        localCurrencyCode = salesParmTable.CurrencyCode;

        return localCurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustBankAccountId</Name>
				<Source><![CDATA[
        protected CustBankAccountId parmCustBankAccountId()
    {
        CustBankAccountId custBankAccountIdLocal;

        custBankAccountIdLocal = salesParmTable.CustBankAccountId;

        return custBankAccountIdLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceAccount</Name>
				<Source><![CDATA[
        protected CustInvoiceAccount parmInvoiceAccount()
    {
        CustInvoiceAccount invoiceAccountLocal;

        invoiceAccountLocal = salesParmTable.InvoiceAccount;

        return invoiceAccountLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceId</Name>
				<Source><![CDATA[
        protected InvoiceId parmInvoiceId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesId</Name>
				<Source><![CDATA[
        protected SalesId parmSalesId()
    {
        SalesId localSalesId;

        localSalesId  = salesParmTable.SalesId;

        return localSalesId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBankAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the bank account.
    /// </summary>
    /// <returns>
    /// Returns true if the validation succeed.
    /// </returns>
    public boolean validateBankAccount()
    {
        boolean ret = true;

        if (!(salesParmTable && salesParmTable.CustBankAccountId))
        {
            ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTaxCode</Name>
				<Source><![CDATA[
        public boolean validateTaxCode()
    {
        SalesLine           localSalesLine;
        SalesParmLine       localSalesParmLine;
        boolean             ret = true;

        while select localSalesParmLine
            where localSalesParmLine.ParmId          == salesParmTable.ParmId
                && localSalesParmLine.TableRefId     == salesParmTable.TableRefId
            join RecId from localSalesLine
            group by localSalesLine.TaxGroup, localSalesLine.TaxItemGroup
                where localSalesParmLine.OrigSalesId == localSalesLine.SalesId
                    && localSalesParmLine.SalesLineRecId    == localSalesLine.RecId
        {
            numOfTaxCode ++;
            this.validatePostTaxCode(localSalesLine.TaxGroup, localSalesLine.TaxItemGroup);
        }

        ret = ret && super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSalesParmTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new sales parm table.
    /// </summary>
    /// <param name="_salesParmTable">
    /// The sales parm table.
    /// </param>
    /// <param name="_taxProfileTable">
    /// The tax profile table.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxValidateForSalesOrder_CN</c> class.
    /// </returns>
    Static public TaxValidateForSalesOrder_CN newSalesParmTable(SalesParmTable  _salesParmTable, TaxProfileTable_CN _taxProfileTable)
    {
        TaxValidateForSalesOrder_CN taxValidateForSalesOrder = new TaxValidateForSalesOrder_CN(_salesParmTable, _taxProfileTable);

        taxValidateForSalesOrder.initValueDefault();

        return taxValidateForSalesOrder;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>