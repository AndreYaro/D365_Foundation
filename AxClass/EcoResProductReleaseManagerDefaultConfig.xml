<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductReleaseManagerDefaultConfig</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResProductReleaseManagerDefaultConfig extends EcoResProductReleaseManager
{
    EcoResConfigurationName defaultConfigurationName;
    boolean                 mustReleaseDefaultVariant;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createProductPerCompanyTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates product per company related tables.
    /// </summary>
    protected void createProductPerCompanyTables()
    {
        super();

        this.maintainDefaultProductVariant();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an instance of the <c>EcoResProductReleaseManagerDefaultConfig</c> class.
    /// </summary>
    public void init()
    {
        super();

        defaultConfigurationName = EcoResProductParameters::getConfigurationName();
        this.setMustReleaseDefaultVariant();
    }

]]></Source>
			</Method>
			<Method>
				<Name>maintainDefaultProductVariant</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Maintains the default configuration for a constraint based product.
    /// </summary>
    protected void maintainDefaultProductVariant()
    {
        EcoResProductRecId          productMasterRecId  = ecoResProduct.RecId;
        EcoResConfigurationName     configuration = this.parmDefaultConfigurationName();

        // check if default product variant has been ever released to current LE
        if (mustReleaseDefaultVariant)
        {
            container productDimensions = EcoResProductVariantDimValue::getDimensionValuesContainerForConfiguration(configuration);

            EcoResProductRecId distincProductVariantRecId = EcoResProductVariantManager::findDistinctProductVariant(productMasterRecId, productDimensions).RecId;

            // check if product variant has been ever created and if not - create such
            if (!distincProductVariantRecId)
            {
                if (EcoResProductMasterManagerMethodSignatureChangeFlight::instance().isEnabled())
                {
                    EcoResProductMasterManager::addNewProductDimensionValue(
                        productMasterRecId,
                        EcoResProductDimensionAttribute::inventDimFieldId2DimensionAttributeRecId(fieldNum(InventDim, ConfigId)),
                        configuration,
                        '',
                        '');
                }
                else
                {
                    EcoResProductMasterManager::addProductDimensionValue(
                        productMasterRecId,
                        EcoResProductDimensionAttribute::inventDimFieldId2DimensionAttributeRecId(fieldNum(InventDim, ConfigId)),
                        configuration,
                        '',
                        '');
                }

                productDimensions = EcoResProductVariantDimValue::getDimensionValuesContainerForConfiguration(configuration);

                distincProductVariantRecId  = EcoResProductVariantManager::createProductVariant(productMasterRecId, '', productDimensions);
            }

            //release variant back
            EcoResProductReleaseManagerBase::releaseProduct(distincProductVariantRecId, legalEntity);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDefaultConfigurationName</Name>
				<Source><![CDATA[
    public EcoResConfigurationName parmDefaultConfigurationName(EcoResConfigurationName _defaultConfigurationName = defaultConfigurationName)
    {
        defaultConfigurationName = _defaultConfigurationName;

        return defaultConfigurationName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventTableFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the fields in the <c>InventTable</c> buffer.
    /// </summary>
    protected void setInventTableFields()
    {
        super();

        if (mustReleaseDefaultVariant)
        {
            inventTable.StandardConfigId = this.parmDefaultConfigurationName();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMustReleaseDefaultVariant</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the default configuration to be released to the current legal entity.
    /// </summary>
    protected void setMustReleaseDefaultVariant()
    {
        changecompany (CompanyInfo::find(false, legalEntity).DataArea)
        {
            mustReleaseDefaultVariant = !EcoResProductVariantDimValue::newProductVariantDim_ConfigId().exist(this.parmEcoResProduct().RecId, this.parmDefaultConfigurationName());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EcoResProductReleaseManagerDefaultConfig construct()
    {
        return new EcoResProductReleaseManagerDefaultConfig();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>