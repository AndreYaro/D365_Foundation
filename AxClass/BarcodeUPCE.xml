<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BarcodeUPCE</Name>
	<SourceCode>
		<Declaration><![CDATA[
[BarcodeTypeFactory(BarcodeType::UPCE)]
public class BarcodeUPCE extends BarcodeEAN_UPC
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>barcodeType</Name>
				<Source><![CDATA[
    public BarcodeType barcodeType()
    {
        return BarcodeType::UPCE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>encodeString</Name>
				<Source><![CDATA[
    BarCodeString encodeString(BarCodeString _stringIn)
    {
        int             len = strLen(_stringIn);
        int             addtotal = 0;
        int             checkval = 0;
        int             parityArray[6];
        int             i;
        BarCodeString   result;
        int             textchk[11];
        int             charVal;

        if (len != this.strlen())
        {
            return '';
        }

        switch (char2num(_stringIn, 6))
        {
            case 48:
            case 49:
            case 50:
                textchk[1] = 48;
                textchk[2] = char2num(_stringIn, 1);
                textchk[3] = char2num(_stringIn, 2);
                textchk[4] = char2num(_stringIn, 6);
                textchk[5] = 48;
                textchk[6] = 48;
                textchk[7] = 48;
                textchk[8] = 48;
                textchk[9] = char2num(_stringIn, 3);
                textchk[10] = char2num(_stringIn, 4);
                textchk[11] = char2num(_stringIn, 5);
                break;
            case 51:
                textchk[1] = 48;
                textchk[2] = char2num(_stringIn, 1);
                textchk[3] = char2num(_stringIn, 2);
                textchk[4] = char2num(_stringIn, 3);
                textchk[5] = 48;
                textchk[6] = 48;
                textchk[7] = 48;
                textchk[8] = 48;
                textchk[9] = 48;
                textchk[10] = char2num(_stringIn, 4);
                textchk[11] = char2num(_stringIn, 5);
                break;
            case 52:
                textchk[1] = 48;
                textchk[2] = char2num(_stringIn, 1);
                textchk[3] = char2num(_stringIn, 2);
                textchk[4] = char2num(_stringIn, 3);
                textchk[5] = char2num(_stringIn, 4);
                textchk[6] = 48;
                textchk[7] = 48;
                textchk[8] = 48;
                textchk[9] = 48;
                textchk[10] = 48;
                textchk[11] = char2num(_stringIn, 5);
                break;
            default:
                textchk[1] = 48;
                textchk[2] = char2num(_stringIn, 1);
                textchk[3] = char2num(_stringIn, 2);
                textchk[4] = char2num(_stringIn, 3);
                textchk[5] = char2num(_stringIn, 4);
                textchk[6] = char2num(_stringIn, 5);
                textchk[7] = 48;
                textchk[8] = 48;
                textchk[9] = 48;
                textchk[10] = 48;
                textchk[11] = char2num(_stringIn, 6);
        }

        for (i = 1; i <= 11; i++)
        {
            if (i mod 2 == 0)
            {
                checkval = textchk[i] - 48;
            }
            else
            {
                checkval = 3 * (textchk[i] - 48);
            }

            addtotal = addtotal + checkval;
        }

        if (addtotal mod 10 == 0)
        {
            checkval = 0;
        }
        else
        {
            checkval = 10 - (addtotal mod 10);
        }

        // create pattern for left side odd or even parity
        parityArray[0] = 0;
        switch (checkVal)
        {
            case 0:
                parityArray[1] = 20;
                parityArray[2] = 20;
                parityArray[3] = 20;
                break;
            case 1:
                parityArray[1] = 20;
                parityArray[2] = 20;
                parityArray[4] = 20;
                break;
            case 2:
                parityArray[1] = 20;
                parityArray[2] = 20;
                parityArray[5] = 20;
                break;
            case 3:
                parityArray[1] = 20;
                parityArray[2] = 20;
                parityArray[6] = 20;
                break;
            case 4:
                parityArray[1] = 20;
                parityArray[3] = 20;
                parityArray[4] = 20;
                break;
            case 5:
                parityArray[1] = 20;
                parityArray[4] = 20;
                parityArray[5] = 20;
                break;
            case 6:
                parityArray[1] = 20;
                parityArray[5] = 20;
                parityArray[6] = 20;
                break;
            case 7:
                parityArray[1] = 20;
                parityArray[3] = 20;
                parityArray[5] = 20;
                break;
            case 8:
                parityArray[1] = 20;
                parityArray[3] = 20;
                parityArray[6] = 20;
                break;
            case 9:
                parityArray[1] = 20;
                parityArray[4] = 20;
                parityArray[6] = 20;
                break;
        }

        // step through the text in string and perform character mapping
        for (i = 1; i <= 6; i++)
        {
            charVal = char2num(_stringIn, i);
            if (charVal >= 48 && charVal <= 57)
            {
                result += num2char(charVal + parityArray[i]);
            }
        }

        barcodeStrHR = _stringIn;
        // add start code, stop code
        result = '.' + result + '-';
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>strlen</Name>
				<Source><![CDATA[
    public Integer strlen()
    {
        return 6;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertToUPCAString</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts the UPCE barcode string to UPCA string based on following conversion.
    ///    The following logic is used to convert UPC-E to UPC-A.
    ///     1. The last code of UPC-E is 0, 1, or 2: The UPC-A code consists of the first two digits of the UPC-E code, the last digit of the UPC-E code, adding four zeros, and then adding characters 3 through 5 from the UPC-E code.
    ///     2. The last code of UPC-E is 3: The UPC-A code consists of the first three digits of the UPC-E code, adding five zero, and then adding characters 4 and 5 from the UPC-E code.
    ///     3. The last code of UPC-E is 4: The UPC-A code consists of the first four digits of the UPC-E code, adding five zeros, and then adding the fifth character from the UPC-E code.
    ///     4. The last code of UPC-E is 5, 6, 7, 8, or 9: The UPC-A code consists of the first five digits of the UPC-E code, adding four zeros, and then adding the last character from the UPC-E code.
    /// </summary>
    /// <param name="_barCodeString">
    ///    The input value, which is a UPCE barcode string.
    /// </param>
    /// <returns>
    ///    The UPCA barcode string
    /// </returns>
    public BarCodeString convertToUPCAString(BarCodeString _barCodeString)
    {
        BarCodeString barCodeStrForUPCA = '0';
        switch (char2num(_barCodeString, 6))
        {
            case 48:
            case 49:
            case 50:
                barCodeStrForUPCA += subStr(_barCodeString, 1, 2) + subStr(_barCodeString, 6, 1);
                barCodeStrForUPCA += strRep('0', 4);
                barCodeStrForUPCA += subStr(_barCodeString, 3, 3);
                break;

            case 51:
                barCodeStrForUPCA += subStr(_barCodeString, 1, 3);
                barCodeStrForUPCA += strRep('0', 5);
                barCodeStrForUPCA += subStr(_barCodeString, 4, 2);
                break;

            case 52:
                barCodeStrForUPCA += subStr(_barCodeString, 1, 4);
                barCodeStrForUPCA += strRep('0', 5);
                barCodeStrForUPCA += subStr(_barCodeString, 5, 1);
                break;

            default:
                barCodeStrForUPCA += subStr(_barCodeString, 1, 5);
                barCodeStrForUPCA += strRep('0', 4);
                barCodeStrForUPCA += subStr(_barCodeString, 6, 1);
                break;
        }

        return barCodeStrForUPCA;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCheckDigit</Name>
				<Source><![CDATA[
    protected BarCodeString insertCheckDigit(BarCodeString _barCodeString)
    {
        BarCodeUPCA barCodeUPCA = Barcode::construct(BarcodeType::UPCA);

        BarCodeString barCodeUPCAString = this.convertToUPCAString(_barCodeString);

        // Calculate and add check digit for UPCA barcode string which is converted from UPCE barcode string.
        // The detail of check digit calculation of UPCA barcode can be found in method BarcodeUPCA.encodeString().
        barCodeUPCA.string(true, barCodeUPCAString);
        barCodeUPCA.encode();
        return barCodeUPCA.barcodeStrHR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BarcodeUPCE construct()
    {
        return new BarcodeUPCE();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>