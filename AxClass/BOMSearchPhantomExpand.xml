<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomSearchPhantomExpand</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BOMSearchPhantomExpand</c> class finds all BOM lines for the specified BOM ID.
/// </summary>
/// <remarks>
///    The BOM lines of the phantom type will be replaced with regular BOM lines through all levels.
/// </remarks>
public class BomSearchPhantomExpand extends BOMSearch
{
    InventDim       parentInventDim;    // the inventory dimensions for the top level item
    InventQty       parentLotSize;      // the lot size for the top level item

    Factor          phantomUnitFactor;

    Counter         level;

    Map             mapBOM;             // [types::Int64, types::Record] / [bom.recId, bom]
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findBOM</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a BOM line.
    /// </summary>
    /// <param name="_bomRecId">
    ///    An integer value that holds a BOM record ID.
    /// </param>
    /// <returns>
    ///    A <c>BOM</c> record that represents a BOM line.
    /// </returns>
    public BOM findBOM(RecId    _bomRecId)
    {
        BOM     bomLine;

        if (   mapBOM
            && mapBOM.exists(_bomRecId))
        {
            bomLine = mapBOM.lookup(_bomRecId);
        }

        return bomLine;
    }
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        if (level >= BOMParameters::find().bomMaxLevel)
        {
            throw error("@SYS26729");
        }

        mapBOM = new Map(typeName2Type(extendedtypestr(recId)),Types::Record);

        super();
    }
]]></Source>
			</Method>
			<Method>
				<Name>insertBOM</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Expands a BOM line if the line is of the phantom type.
    /// </summary>
    /// <param name="_bom">
    ///    A <c>BOM</c> record that represents a BOM line.
    /// </param>
    protected void insertBOM(BOM _bom)
    {
        BOMSearchPhantomExpand      searchPhantomExpand;
        BOMMap                      phantomBOMMap;
        BOM                         bomLine;

        if (_bom.type().canBePhantomExpanded())
        {
            // expand phantom line by using the same class again
            searchPhantomExpand = BOMSearchPhantomExpand::newPhantomBOM(this,_bom);
            phantomBOMMap       = _bom;

            while (   searchPhantomExpand
                   && searchPhantomExpand.next())
            {
                bomLine = searchPhantomExpand.bom();
                bomLine.BOMMap::initFromPhantom(phantomBOMMap,phantomUnitFactor ? phantomUnitFactor :1,parentItemId,parentLotSize);

                this.insertBOM(bomLine);
            }
        }
        else
        {
            super(_bom);
            mapBOM.insert(_bom.RecId,_bom);
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmLevel</Name>
				<Source><![CDATA[
    public Counter parmLevel(Counter _level = level)
    {
        level = _level;

        return level;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentInventDim</Name>
				<Source><![CDATA[
    public InventDim parmParentInventDim(InventDim _parentInventDim = parentInventDim)
    {
        parentInventDim = _parentInventDim;

        return parentInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentLotSize</Name>
				<Source><![CDATA[
    public InventQty parmParentLotSize(InventQty _parentLotSize = parentLotSize)
    {
        parentLotSize = _parentLotSize;

        return parentLotSize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPhantomUnitFactor</Name>
				<Source><![CDATA[
    public Factor parmPhantomUnitFactor(Factor _phantomUnitFactor = phantomUnitFactor)
    {
        phantomUnitFactor = _phantomUnitFactor;

        return phantomUnitFactor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
/// <summary>
    ///    Initializes a new instance of the <c>BOMSerchPhantomExpand</c> class.
    /// </summary>
    /// <param name="_parentItemId">
    ///    A string value that holds the item ID.
    /// </param>
    /// <param name="_parentInventDim">
    ///    A <c>InventDim</c> record that represents inventory dimensions.
    /// </param>
    /// <param name="_parentLotSize">
    ///    A real value that holds the order size that applies for this calculation.
    /// </param>
    /// <param name="_bomId">
    ///    A string value that holds the BOM ID.
    /// </param>
    /// <param name="_calcDate">
    ///    A date for which the calculation applies.
    /// </param>
    /// <param name="_bomTable">
    /// A <c>BOMTable</c> record; optional.
    /// </param>
    /// <param name="_bomDependencyManager">
    ///   An instance of the <c>BOMDependencyManager</c> class; optional.
    /// </param>
    /// <returns>
    ///    A new <c>BOMSearchPhantomExpand</c> instance.
    /// </returns>
    public static BOMSearch newParameters(
        ItemId      _parentItemId,
        InventDim   _parentInventDim,
        InventQty   _parentLotSize,
        BOMId       _bomId,
        TransDate   _calcDate,
        BOMTable             _bomTable = null,
        BOMDependencyManager _bomDependencyManager = null)
    {
        BOMSearchPhantomExpand  bomSearchPhantomExpand = new BOMSearchPhantomExpand(_bomId,_calcDate,_parentItemId,_parentInventDim.ConfigId);

        bomSearchPhantomExpand.parmBOMTable(_bomTable);
        bomSearchPhantomExpand.parmParentInventDim(_parentInventDim);
        bomSearchPhantomExpand.parmParentLotSize(_parentLotSize);
        bomSearchPhantomExpand.parmBOMDependencyManager(_bomDependencyManager);

        bomSearchPhantomExpand.init();

        return bomSearchPhantomExpand;
    }
]]></Source>
			</Method>
			<Method>
				<Name>newPhantomBOM</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>BOMSerchPhantomExpand</c> class.
    /// </summary>
    /// <param name="_parentSearch">
    ///    A <c>BOMSearchPhantomExpand</c> object.
    /// </param>
    /// <param name="_bomPhantom">
    ///    A <c>BOM</c> record that represents a BOM line which is of the phantom type.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>BOMSearchPhantomExpand</c> class.
    /// </returns>
    protected static BOMSearch newPhantomBOM(
        BOMSearchPhantomExpand  _parentSearch,
        BOM                     _bomPhantom)
    {
        BOMSearchPhantomExpand  bomSearchPhantomExpand;

        InventDim               bomInventDim;
        BOMId                   bomId;
        Qty                     bomConsumptionQty;

        bomInventDim        = _bomPhantom.BOMMap::inventDimFinal(_parentSearch.parmParentItemId(),_parentSearch.parmParentInventDim(), '');
        bomConsumptionQty   = _bomPhantom.BOMMap::searchQty(_parentSearch.parmParentItemId(),_parentSearch.parmParentLotSize());
        bomId               = _bomPhantom.BOMMap::itemBOMId(_parentSearch.parmValidDate(),bomConsumptionQty,bomInventDim);

        bomSearchPhantomExpand = new BOMSearchPhantomExpand(bomId,_parentSearch.parmValidDate(),_bomPhantom.ItemId,bomInventDim.ConfigId);

        bomSearchPhantomExpand.parmPhantomUnitFactor(_bomPhantom.BOMMap::phantomUnitFactor(bomConsumptionQty));

        bomSearchPhantomExpand.parmParentItemId(_bomPhantom.ItemId);
        bomSearchPhantomExpand.parmParentInventDim(bomInventDim);
        bomSearchPhantomExpand.parmParentLotSize(bomConsumptionQty);
        bomSearchPhantomExpand.parmLevel(_parentSearch.parmLevel()+1);

        bomSearchPhantomExpand.init();

        return bomSearchPhantomExpand;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>