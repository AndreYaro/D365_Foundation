<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceAutomationMatchingValidationController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendInvoiceAutomationMatchingValidationController</c> class is a <c>SysOperationServiceController</c> class
/// performs processing on vendor invoices during execution of the automatic matching validaiton background process.
/// </summary>
internal final class VendInvoiceAutomationMatchingValidationController extends SysOperationServiceController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultCaption</Name>
				<Source><![CDATA[
    protected ClassDescription defaultCaption()
    {
        return "@AccountsPayable:AutomationMatchingValidationBatchJobCaption";
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    internal boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static VendInvoiceAutomationMatchingValidationController construct()
    {
        return new VendInvoiceAutomationMatchingValidationController(
            classStr(VendInvoiceAutomationMatchingValidationController),
            methodStr(VendInvoiceAutomationMatchingValidationController, runMatchingValidation),
            SysOperationExecutionMode::ReliableAsynchronous);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runMatchingValidation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run automatic matching validation batch job.
    /// </summary>
    /// <param name="_processScheduleWorkItem">
    /// Automatic matching validation process schedule workitem.
    /// </param>
    internal void runMatchingValidation(ProcessScheduleWorkItem _processScheduleWorkItem)
    {
        VendInvoiceAutomationMatchingValidationLogger matchingValidationLogger = VendInvoiceAutomationMatchingValidationLogger::newFromProcessScheduleWorkItem(_processScheduleWorkItem);
        VendInvoiceAutomationMatchingValidationCollector invoiceMatchingValidationCollector = VendInvoiceAutomationMatchingValidationCollector::constructInvoiceCollector();
        VendInvoiceAutomationInvoiceTmp invoiceListForMatchingValidation;

        try
        {
            invoiceListForMatchingValidation = invoiceMatchingValidationCollector.collectInvoicesForMatchingValidation();
            VendInvoiceAutomationMatchingValidationController::matchValidationVendorInvoices(invoiceListForMatchingValidation);
        }
        finally
        {
            matchingValidationLogger.writeMatchingValidationResultToProcessAutomationLogs();
            VendInvoiceAutomationInvoicesInMatchingValidation::removeMatchingValidationRecordsFor(invoiceListForMatchingValidation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>matchValidationVendorInvoices</Name>
				<Source><![CDATA[
    private static void matchValidationVendorInvoices(VendInvoiceAutomationInvoiceTmp _invoicesReadyForMatchingValidation)
    {
        // Performs matching validation process with applicable invoices per company.
        VendInvoiceAutomationInvoiceTmp invoicesCompanyTmp;
        invoicesCompanyTmp.linkPhysicalTableInstance(_invoicesReadyForMatchingValidation);

        VendInvoiceAutomationInstrumentationMatchingValidationActivities instrumentationMatchingValidationActivities =
            VendInvoiceAutomationInstrumentationMatchingValidationActivities::createFromLoggerName(
            classStr(VendInvoiceAutomationMatchingValidationController));

        using (var activityContext = instrumentationMatchingValidationActivities.matchValidationVendorInvoicesContext())
        {
            while select VendInvoiceDataAreaId from invoicesCompanyTmp
            group by invoicesCompanyTmp.VendInvoiceDataAreaId
            {
                changecompany(invoicesCompanyTmp.VendInvoiceDataAreaId)
                {
                    VendInvoiceAutomationInvoiceTmp invoicesReadyForMatchingValidationPerCompany;

                    insert_recordset invoicesReadyForMatchingValidationPerCompany(
                    VendInvoiceRecId,
                    VendInvoiceDataAreaId,
                    VendInvoiceParmId,
                    VendInvoiceTableRefId,
                    VendInvoiceNum)
                select VendInvoiceRecId,
                    VendInvoiceDataAreaId,
                    VendInvoiceParmId,
                    VendInvoiceTableRefId,
                    VendInvoiceNum from _invoicesReadyForMatchingValidation
                    where _invoicesReadyForMatchingValidation.VendInvoiceDataAreaId == invoicesCompanyTmp.VendInvoiceDataAreaId;

                    VendInvoiceAutomationMatchingValidationController::matchingValidationPerCompany(invoicesReadyForMatchingValidationPerCompany);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>matchingValidationPerCompany</Name>
				<Source><![CDATA[
    private static void matchingValidationPerCompany(VendInvoiceAutomationInvoiceTmp _invoicesReadyForMatchingValidationPerCompany)
    {
        VendInvoiceInfoTable vendorInvoice;

        while select vendorInvoice
            exists join _invoicesReadyForMatchingValidationPerCompany
                where _invoicesReadyForMatchingValidationPerCompany.VendInvoiceRecId == vendorInvoice.RecId
        {
            ttsbegin;
            vendorInvoice.selectForUpdate(true);
            vendorInvoice.checkIfMatched(true, true);
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>