<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>smmIRecurrence</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Represents a recurrence pattern that may be part of a task or an appointment.
/// </summary>
interface SmmIRecurrence
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dayOfMonth</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the day of month this recurrence takes place.
    /// </summary>
    /// <returns>
    /// A <c>smmDayOfMonth</c> with the day of month this recurrence takes place.
    /// </returns>
    /// <remarks>
    /// The day of month is only set in some monthly and yearly recurrences.
    /// For example, if it happens the first day every two months, it will return 1,
    /// but if it happens every first monday of the month it may return 0.
    /// </remarks>
    smmDayofMonth dayOfMonth()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>dayOfWeekMask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns or sets an OlDaysOfWeek constant representing the mask for the days of the week on which the recurring appointment or task occurs
    /// </summary>
    /// <returns>
    /// A <c>smmDaysOfWeek</c> with the days of the week for the recurrence.
    /// This value one of the different days this occurence occurs.
    /// </returns>
    /// <remarks>
    /// Monthly and yearly patterns are only valid for a single day.
    /// Weekly patterns are only valid as the Or of the DayOfWeekMask.
    /// Days are taken from the OlDaysOfWeek enumeration.
    /// </remarks>
    smmDaysOfWeek dayOfWeekMask()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>duration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the duration (in minutes) of the RecurrencePattern.
    /// </summary>
    /// <returns>
    /// The duration of the RecurrencePattern.
    /// For an all day event it will return 1440.
    /// If it is a task or the duration is not set, otherwise will return 0.
    /// </returns>
    /// <remarks>
    /// This property is only valid for appointments.
    /// </remarks>
    smmAppointmentDurationMinutes duration()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>endDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the end date for the recurrence.
    /// </summary>
    /// <returns>
    /// The end date time for the recurrence.
    /// </returns>
    /// <remarks>
    /// It may fail or return null if the recurrence has no end date.
    /// Should use noEndDate first to check.
    /// </remarks>
    TransDate endDate()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the count for which the recurrence pattern is valid for a given interval.
    /// </summary>
    /// <returns>
    /// An integer value between 1 and 5.
    /// </returns>
    /// <remarks>
    /// This property is only valid for recurrences that allow the definition of a recurrence pattern
    /// that is only valid for the Nth occurrence, such as "the 2nd Sunday in March" pattern.
    /// The count is set numerically: 1 for the first, 2 for the second, and so on through 5 for the last.
    /// </remarks>
    smmAppointmentNThInstance instance()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>interval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value specifying the number of units of a given recurrence type between occurrences.
    /// </summary>
    /// <returns>
    /// An integer with the number of units between ocurrences of this recurrence.
    /// </returns>
    smmInterval interval()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>monthOfYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets which month of the year is valid for the specified recurrence pattern.
    /// </summary>
    /// <returns>
    /// An integer between 1 through 12 representing the month.
    /// </returns>
    /// <remarks>
    /// This field is only valid for yearly recurrence.
    /// </remarks>
    MonthOfYearId monthOfYear()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>noEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the recurrence has end date or not.
    /// </summary>
    /// <returns>
    /// True if the recurrence is infinite (it has no end date or total number of occurences set); otherwise, false.
    /// </returns>

    smmNoEndDate noEndDate()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>parent</Name>
				<Source><![CDATA[
    smmIAppointment parent()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>patternEndDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ending DateTime for the appointment.
    /// </summary>
    /// <param name="_isAppointmentRecurrence">
    /// True if the item from which this recurrence takes part is an appointment; otherwise, false.
    /// </param>
    /// <param name="outlookTimeZone">
    /// The timezone of the outlook client.
    /// </param>
    /// <returns>
    /// The ending DateTime of the next ocurrence if this recurrence is an appointment recurrence,
    /// the start DateTime of the next ocurrence if it is a task recurrence.
    /// </returns>
    smmPatternEndDateTime patternEndDateTime(boolean _isAppointmentRecurrence, Timezone outlookTimeZone)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>patternStartDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the start date time for the recurrence.
    /// </summary>
    /// <param name="_isAppointmentRecurrence">
    /// True if the recurrence is part of an appointment; otherwise, false.
    /// </param>
    /// <param name="outlookTimeZone">
    /// The outlook timezone.
    /// </param>
    /// <returns>
    /// A date time which marks the start for the recurrence.
    /// </returns>
    smmPatternStartDateTime patternStartDateTime(boolean _isAppointmentRecurrence, Timezone outlookTimeZone)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>recurrenceType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the recurrence pattern type.
    /// </summary>
    /// <returns>
    /// A member of OlRecurrenceType enumeration.
    /// </returns>
    smmOutlookRecurrenceType recurrenceType()
    {
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>