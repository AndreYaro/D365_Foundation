<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>smmEwsConnection</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>smmEwsConnection</c> class manages the connection with Microsoft Exchange server
/// and communicates with the server through the ExchangeIntegration dll.
/// </summary>
/// <remarks>
/// Uses ExchangeIntegration dll.
/// </remarks>
[SysObsolete('Microsoft discontinued support for synchronizing contacts, appointments, and tasks between Dynamics 365 Supply Chain Management and Outlook.', false, 01\12\2023)]
public class SmmEwsConnection implements SysIMapiEx
{
    #smmMSOutlook2002ObjectModelConstants
    Microsoft.Dynamics.AX.ExchangeIntegration.Connection        connection;
    LogisticsElectronicAddressLocator                           emailAddress;
    boolean                                                     loggedOn;
    Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationFolder itemFolder;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>connectToExchange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs in to exchange server using the user email and exchange server url.
    /// </summary>
    /// <returns>
    /// True if login is successful; otherwise false.
    /// </returns>
    public boolean connectToExchange()
    {
        SysInfoAction_MenuFunction  menuFunction;
        OutlookUserSetup            outlookUserSetup;
        URL                         exchangeLoginUrl;
        OutlookSyncParameters       outlookSyncParameters;
        str                         errorText;

        select firstonly ExchangeServerUrl from outlookUserSetup where outlookUserSetup.UserId == curUserId();

        if (outlookUserSetup.ExchangeServerUrl)
        {
            exchangeLoginUrl = outlookUserSetup.ExchangeServerUrl;
        }
        else
        {
            select ExchangeServerUrl from outlookSyncParameters;
            exchangeLoginUrl = outlookSyncParameters.ExchangeServerUrl;
        }

        try
        {
            connection.setServiceUrl(exchangeLoginUrl);
            errorText = strFmt("@SYP4860452", exchangeLoginUrl, this.parmCurrentUserEmail());
            //Logon may be called multiple times (as smmEWSConnection is used as SysMapiEx and also used for other purposes in smmOutlookSync_Contact)
            // As it is a singleton, it may be called multiple times for the same instance and will only try to log on only if needed.
            if (!loggedOn)
            {
                loggedOn = connection.ewsLogon();

                this.parmLoggedOn(loggedOn);

                if (!loggedOn)
                {
                    menuFunction =  SysInfoAction_MenuFunction::newMenuItem(menuitemDisplayStr(smmEmplOutlookSetupWizard), MenuItemType::Display);
                    error(errorText, '' , menuFunction);
                }
            }
        }
        catch(Exception::CLRError)
        {
            SmmEwsExceptionHandler::logError(funcName(), Exception::CLRError, errorText);
        }
        catch(Exception::Error)
        {
            SmmEwsExceptionHandler::logError(funcName(), Exception::Error, errorText);
        }

        return loggedOn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAppointment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>smmEwsAppointment</c> to represent a local appointment.
    /// </summary>
    /// <returns>
    /// Instance of <c>smmEwsAppointment</c> created.
    /// </returns>
    /// <remarks>
    /// <c>smmEwsAppointment</c> is created locally, it will not be available in exchange until saved.
    /// </remarks>
    public smmEwsAppointment createAppointment()
    {
        smmEwsAppointment smmAppointment;

        try
        {
            Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationAppointment appointment = connection.createAppointment();
            smmAppointment = new smmEwsAppointment(appointment, connection);
        }
        catch(Exception::CLRError)
        {
            SmmEwsExceptionHandler::logError(funcName(), Exception::CLRError);
        }
        catch(Exception::Error)
        {
            SmmEwsExceptionHandler::logError(funcName(), Exception::Error);
        }

        return smmAppointment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createContact</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>smmEwsContact</c> that represents a local exchange contact.
    /// </summary>
    /// <returns>
    /// Instance of <c>smmEwsContact</c> created.
    /// </returns>
    /// <remarks>
    /// Instnace of <c>smmEwsContact</c> is created locally, it will not be available in exchange until saved.
    /// </remarks>
    public smmEwsContact createContact()
    {
        smmEwsContact smmContact;

        try
        {
            Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact  contact = connection.createContact();
            smmContact = new smmEwsContact(contact, connection);
        }
        catch(Exception::CLRError)
        {
            SmmEwsExceptionHandler::logError(funcName(), Exception::CLRError);
        }
        catch(Exception::Error)
        {
            SmmEwsExceptionHandler::logError(funcName(), Exception::Error);
        }

        return smmContact;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>smmEwsTask</c> to represent a local task.
    /// </summary>
    /// <returns>
    /// Instance of <c>smmEwsTask</c> created.
    /// </returns>
    /// <remarks>
    /// Instance of <c>smmEwsTask</c> is created locally, it will not be available in exchange until saved.
    /// </remarks>
    public smmEwsTask createTask()
    {
        smmEwsTask task;

        try
        {
            Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationTask createdTask = connection.createTask();
            task = new smmEwsTask(createdTask, connection);
        }
        catch(Exception::CLRError)
        {
            SmmEwsExceptionHandler::logError(funcName(), Exception::CLRError);
        }
        catch(Exception::Error)
        {
            SmmEwsExceptionHandler::logError(funcName(), Exception::Error);
        }

        return task;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets current user's display name from exchange server.
    /// </summary>
    /// <returns>
    /// Current user's display name
    /// </returns>
    public str currentUser()
    {
        str currentUser;

        try
        {
            currentUser = connection.getUserDisplayName();
        }
        catch(Exception::CLRError)
        {
            SmmEwsExceptionHandler::logError(funcName(), Exception::CLRError);
        }

        return currentUser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentUserEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets current user's email id from exchange server.
    /// </summary>
    /// <returns>
    /// Current user's email id.
    /// </returns>
    public str currentUserEmail()
    {
        str currentUserEmail;

        try
        {
            currentUserEmail = connection.getUserEmail();
        }
        catch(Exception::CLRError)
        {
            SmmEwsExceptionHandler::logError(funcName(), Exception::CLRError);
        }

        return currentUserEmail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentUserEntryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets current user's entry id from exchange server.
    /// </summary>
    /// <returns>
    /// Current user's entry id.
    /// </returns>
    public str currentUserEntryId()
    {
        return connection.getDefaultRootFolder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllAppointments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all the appointments that occur between the dates provided.
    /// </summary>
    /// <param name="_folder">
    /// Folder from which appointments should be retrieved.
    /// </param>
    /// <param name = "_start">
    /// Start date to use for filtering the appointments list.
    /// </param>
    /// <param name = "_end">
    /// End date to use for filtering the appointments list.
    /// </param>
    /// <param name = "_includeRecurrences">
    /// Recurrence appointments are to be included or not.
    /// </param>
    /// <returns>
    /// A list of <c>smmEwsAppointment</c> items that occurr between the start and end date.
    /// </returns>
    /// <remarks>
    /// This may result in several calls to the exchange server in order to retrieve all the appointments.
    /// The appointments provided are all occurrences (recurrence state is occurrence or exception) in recurring appointments, no master appointments are retrieved.
    /// (The appointment that has the same start date and time as the master appointment will be retrieved as the first occurrence of that appointment series).
    /// </remarks>
    public List getAllAppointments(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationFolder _folder, TransDateTime _start, TransDateTime _end, boolean _includeRecurrences)
    {
        System.Collections.ArrayList    appointments;
        List                            ret = new List(Types::Class);
        int                             idx, total;
        str                             errorText;

        try
        {
            if (_includeRecurrences)
            {
                appointments = connection.getAppointments(_folder.entryId(), _start, _end);
            }
            else
            {
                appointments = connection.getMasterAppointments(_folder, _start, _end);
            }

            total = appointments.get_Count();

            for (idx = 0; idx < total; idx++)
            {
                errorText = strFmt("@SCM:ExchangeSyncAllAppointmentsError", idx, total, _folder.displayName());
                ret.addEnd(new smmEwsAppointment(appointments.get_Item(idx), connection));
            }
        }
        catch(Exception::CLRError)
        {
            SmmEwsExceptionHandler::logError(funcName(), Exception::CLRError, errorText);
        }
        catch(Exception::Error)
        {
            SmmEwsExceptionHandler::logError(funcName(), Exception::Error, errorText);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllContacts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all the contacts for the specified folder.
    /// </summary>
    /// <param name="_folder">
    /// The folder from which contacts should be retrieved.
    /// </param>
    /// <returns>
    /// A list of <c>smmEwsContact</c> items that where present in the specified folder.
    /// </returns>
    /// <remarks>
    /// This may result in several calls to the exchange server in order to retrieve all the contacts.
    /// The <c>smmEwsContact</c> instances just have the firstName, lastName and entryId properties set,
    /// should use load() before calling other methods.
    /// </remarks>
    public List getAllContacts(smmEwsFolder _folder)
    {
        System.Collections.ArrayList    contacts;
        List                            ret = new List(Types::Class);
        int                             idx, total;
        str                             errorText;

        try
        {
            contacts = connection.getAllContacts(_folder.exchangeEntryId());
            total = contacts.get_Count();

            for (idx = 0; idx < total; idx++)
            {
                errorText = strFmt("@SCM:ExchangeSyncAllContactsError", idx, total, _folder.displayName());
                ret.addEnd(new smmEwsContact(contacts.get_Item(idx), connection));
            }
        }
        catch(Exception::CLRError)
        {
            SmmEwsExceptionHandler::logError(funcName(), Exception::CLRError, errorText);
        }
        catch(Exception::Error)
        {
            SmmEwsExceptionHandler::logError(funcName(), Exception::Error, errorText);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllTasks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all the tasks for the specified folder.
    /// </summary>
    /// <param name="_folder">
    /// The folder from which the tasks should be retrieved.
    /// </param>
    /// <returns>
    /// A list of <c>smmEwsTask</c> items that where present in the specified folder.
    /// </returns>
    /// <remarks>
    /// This may result in several calls to the exchange server in order to retrieve all the tasks.
    /// </remarks>
    public List getAllTasks(smmEwsFolder _folder)
    {
        CLRObject   tasks;
        List        ret = new List(Types::Class);
        int         idx, total;
        str         errorText;

        try
        {
            tasks = connection.getAllTasks(_folder.exchangeEntryId());
            total = tasks.get_Count();

            for (idx = 0; idx < total; idx++)
            {
                errorText = strFmt("@SCM:ExchangeSyncAllTasksError", idx, total, _folder.displayName());
                ret.addEnd(new smmEwsTask(tasks.get_Item(idx), connection));
            }
        }
        catch(Exception::CLRError)
        {
            SmmEwsExceptionHandler::logError(funcName(), Exception::CLRError, errorText);
        }
        catch(Exception::Error)
        {
            SmmEwsExceptionHandler::logError(funcName(), Exception::Error, errorText);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllTasksSinceLastSync</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all the tasks updated or completed since the last synchronization.
    /// </summary>
    /// <param name="_folder">
    /// The folder from which the tasks should be retrieved.
    /// </param>
    /// <param name="_lastSyncDateTime">
    /// The datetime of the last synchronization.
    /// </param>
    /// <param name="_outlookTimeZone">
    /// The timezone the exchange server is on.
    /// </param>
    /// <returns>
    /// A list of <c>smmEwsTask</c> items that are present in the specified folder
    /// and were updated or completed since the date provided.
    /// </returns>
    /// <remarks>
    /// This may result in several calls to the exchange server in order to retrieve all the tasks.
    /// </remarks>
    public List getAllTasksSinceLastSync(smmEwsFolder _folder, TransDateTime _lastSyncDateTime, Timezone _outlookTimeZone)
    {
        System.Collections.ArrayList    tasks;
        List                            ret = new List(Types::Class);
        int                             idx, total;
        str                             errorText;

        try
        {
            tasks = connection.getAllTasksSinceLastSync(_folder.exchangeEntryId(), _lastSyncDateTime);
            total = tasks.get_Count();

            for (idx = 0; idx < total; idx++)
            {
                errorText = strFmt("@SCM:ExchangeSyncAllTasksError", idx, total, _folder.displayName());
                ret.addEnd(new smmEwsTask(tasks.get_Item(idx), connection));
            }
        }
        catch(Exception::CLRError)
        {
            SmmEwsExceptionHandler::logError(funcName(), Exception::CLRError, errorText);
        }
        catch(Exception::Error)
        {
            SmmEwsExceptionHandler::logError(funcName(), Exception::Error, errorText);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAppointment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the appointment that matches the entryId provided.
    /// </summary>
    /// <param name = "_entryId">
    /// The outlook entryId for the appointment.
    /// </param>
    /// <returns>
    /// The <c>smmEwsAppointment</c> that matches that id.
    /// </returns>
    /// <remarks>
    /// This will result in a call to the exchange server.
    /// </remarks>
    private smmEwsAppointment getAppointment(str _entryId)
    {
        Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationAppointment    basicAppointment;
        smmEwsAppointment                                                   ret;
        str                                                                 errorText = strFmt("@SCM:ExchangeSyncAppointmentError", _entryId);

        try
        {
            str exchangeId = connection.convertOutlookIdToExchangeId(_entryId);

            if (exchangeId != "")
            {
                basicAppointment = connection.getAppointmentFromEntryId(exchangeId);
                if (basicAppointment != null)
                {
                    ret = new smmEwsAppointment(basicAppointment, connection);
                }
            }
        }
        catch(Exception::CLRError)
        {
            SmmEwsExceptionHandler::logError(funcName(), Exception::CLRError, errorText);
        }
        catch(Exception::Error)
        {
            SmmEwsExceptionHandler::logError(funcName(), Exception::Error, errorText);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAppointmentFromEntryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the appointment that matches the entryId provided.
    /// </summary>
    /// <param name="_entryId">
    /// The outlook entryId for the appointment.
    /// </param>
    /// <returns>
    /// The <c>SysIMapiExAppointment</c> that matches that id.
    /// </returns>
    /// <remarks>
    /// This will result in a call to the exchange server.
    /// </remarks>
    public SysIMapiExAppointment getAppointmentFromEntryId(str _entryId)
    {
        return this.getAppointment(_entryId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAppointmentItemFromEntryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the appointment that matches the entryId provided.
    /// </summary>
    /// <param name="_entryId">
    /// The outlook entryId for the appointment.
    /// </param>
    /// <returns>
    /// The <c>smmIAppointment</c> that matches that id.
    /// </returns>
    /// <remarks>
    /// This will result in a call to the exchange server.
    /// </remarks>
    public smmIAppointment getAppointmentItemFromEntryId(str _entryId)
    {
        return this.getAppointment(_entryId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContact</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the contact from exchange that matches the id provided.
    /// </summary>
    /// <param name="_entryId">
    /// The outlookId of the contact requested.
    /// </param>
    /// <returns>
    /// A <c>smmEwsContact</c> representing the contact requested or null
    /// value if the contact could not be retrieved.
    /// </returns>
    /// <remarks>
    /// It may fail due to connection problems, or due to invalid id.
    /// </remarks>
    private smmEwsContact getContact(str _entryId)
    {
        Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationContact    basicContact;
        smmEwsContact                                                   ret;

        try
        {
            str exchangeId = connection.convertOutlookIdToExchangeId(_entryId);

            if (exchangeId != "")
            {
                basicContact = connection.getContactFromEntryId(exchangeId);
                if (basicContact != null)
                {
                    ret = new smmEwsContact(basicContact, connection);
                }
            }
        }
        catch(Exception::CLRError)
        {
            SmmEwsExceptionHandler::logError(funcName(), Exception::CLRError);
        }
        catch(Exception::Error)
        {
            SmmEwsExceptionHandler::logError(funcName(), Exception::Error);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContactFromEntryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the contact from exchange that matches the id provided.
    /// </summary>
    /// <param name="_entryId">
    /// The outlookId of the contact requested.
    /// </param>
    /// <returns>
    /// A <c>SysIMapiExContact</c> representing the contact requested or null
    /// value if the contact could not be retrieved.
    /// </returns>
    /// <remarks>
    /// It may fail due to connection problems, or due to invalid id.
    /// </remarks>
    public SysIMapiExContact getContactFromEntryId(str _entryId)
    {
        return this.getContact(_entryId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContactItemFromEntryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the contact from exchange that matches the id provided.
    /// </summary>
    /// <param name="_entryId">
    /// The outlookId of the contact requested.
    /// </param>
    /// <returns>
    /// A <c>smmIOutlookItem</c> representing the contact requested or null
    /// value if the contact could not be retrieved.
    /// </returns>
    /// <remarks>
    /// It makes a call to exchange server, and it may fail due to connection problems or invalid id.
    /// </remarks>
    public smmIContact getContactItemFromEntryId(str _entryId)
    {
        return this.getContact(_entryId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultContactsFolder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default contacts folder.
    /// </summary>
    /// <returns>
    /// The default contact folder or null if it couldn't be retrieved.
    /// </returns>
    /// <remarks>
    /// Makes a call to the exchange server, it may fail due to connection problems.
    /// </remarks>
    public smmEwsFolder getDefaultContactsFolder()
    {
        smmEwsFolder ret;

        try
        {
            Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationFolder folder = connection.getDefaultContactsFolder();

            if (folder)
            {
                ret = new smmEwsFolder(folder, this);
            }
        }
        catch(Exception::CLRError)
        {
            SmmEwsExceptionHandler::logError(funcName(), Exception::CLRError);
        }
        catch(Exception::Error)
        {
            SmmEwsExceptionHandler::logError(funcName(), Exception::Error);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultFolder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>smmEwsFolder</c> that represents the default folder provided.
    /// </summary>
    /// <param name="_defaultFolder">
    /// One member of the OlDefaultFolders enum, representing a default item folder.
    /// May be one of the following: #olFolderContacts, #olFolderTasks or #olFolderCalendar.
    /// </param>
    /// <returns>
    /// A <c>smmEwsFolder</c> representing the folder requested or null if the folder couldn't be retrieved.
    /// </returns>
    /// <remarks>
    /// It makes a call to the exchange server and may fail due to connection problems.
    /// </remarks>
    public smmEwsFolder getDefaultFolder(int _defaultFolder)
    {
        smmEwsFolder                                                ret;
        Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationFolder folder;

        try
        {
            switch (_defaultFolder)
            {
                case #olFolderContacts:
                    folder = connection.getDefaultContactsFolder();
                    break;
                case #olFolderTasks:
                    folder = connection.getDefaultTasksFolder();
                    break;
                case #olFolderCalendar:
                    folder = connection.getDefaultAppointmentsFolder();
                    break;
            }

            if (folder)
            {
                ret = new smmEwsFolder(folder, this);
            }
        }
        catch(Exception::CLRError)
        {
            SmmEwsExceptionHandler::logError(funcName(), Exception::CLRError);
        }
        catch(Exception::Error)
        {
            SmmEwsExceptionHandler::logError(funcName(), Exception::Error);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFolder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>smmEwsFolder</c> with the entry id provided
    /// </summary>
    /// <param name="_entryId">
    /// The target folder's entry id.
    /// </param>
    /// <param name="_folderEntryId">
    /// Folder entry id.
    /// This is an interface member property id and is used in outlook and not required in exchange.
    /// </param>
    /// <param name="_itemType">
    /// Item type for which folder is required. 1 = appointments, 2 = contacts and 3 = tasks.
    /// </param>
    /// <param name="_defaultFolder">
    /// Default folder constant.
    /// This is an interface member property id and is used in outlook and not required in exchange.
    /// </param>
    /// <returns>
    /// The <c>smmEwsFolder</c> requested or null value if it couldn't be retrieved from exchange.
    /// </returns>
    /// <remarks>
    /// This method makes a call to the exchange server and it may fail due to invalid id or connection problems.
    /// </remarks>
    public smmIFolder getFolder(str _entryId, str _folderEntryId, int _itemType, int _defaultFolder)
    {
        smmEwsFolder                                                    ret;
        Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationFolder     folder;

        try
        {
            if (_entryId)
            {
                folder = connection.getFolder(_entryId);
            }
            else
            {
                switch (_itemType)
                {
                    case 1  :
                        folder = connection.getDefaultAppointmentsFolder();
                        break;
                    case 2  :
                        folder = connection.getDefaultContactsFolder();
                        break;
                    case 3  :
                        folder = connection.getDefaultTasksFolder();
                        break;
                }
            }

            if (folder)
            {
                ret = new smmEwsFolder(folder, this);
            }
        }
        catch(Exception::CLRError)
        {
            SmmEwsExceptionHandler::logError(funcName(), Exception::CLRError);
        }
        catch(Exception::Error)
        {
            SmmEwsExceptionHandler::logError(funcName(), Exception::Error);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFolders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get folders from exchange server.
    /// </summary>
    /// <param name="folderType">
    /// Appointment, contact or task mapping type to get the folders for the mapping types.
    /// </param>
    /// <returns>
    /// List of folders for the mapping type.
    /// </returns>
    public List getFolders(smmOutlookMappingTypes folderType)
    {
        System.Collections.ArrayList    folders;
        List                            ret = new List(Types::Class);
        int                             idx, total;

        try
        {
            if (folderType == smmOutlookMappingTypes::Appointments)
            {
                folders = connection.getFolders(#ewsAppointmentType);
            }
            else if (folderType == smmOutlookMappingTypes::Tasks)
            {
                folders = connection.getFolders(#ewsTaskType);
            }
            else if (folderType == smmOutlookMappingTypes::Contacts)
            {
                folders = connection.getFolders(#ewsContactType);
            }

            total = folders.get_Count();

            for (idx = 0; idx < total; idx++)
            {
                ret.addEnd(new smmEwsFolder(folders.get_Item(idx), this));
            }
        }
        catch(Exception::CLRError)
        {
            SmmEwsExceptionHandler::logError(funcName(), Exception::CLRError);
        }
        catch(Exception::Error)
        {
            SmmEwsExceptionHandler::logError(funcName(), Exception::Error);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemFromId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get an item from entryid.
    /// </summary>
    /// <param name="_entryId">
    /// Entry id of the item to get.
    /// </param>
    /// <param name="_itemType">
    /// Item type to get.
    /// </param>
    /// <returns>
    /// Item from exchange.
    /// </returns>
    smmIItem getItemFromId(str _entryId, smmOutlookMappingTypes _itemType)
    {
        smmIItem ret;

        switch (_itemType)
        {
            case smmOutlookMappingTypes::Appointments  :
                ret = this.getAppointment(_entryId);
                break;
            case smmOutlookMappingTypes::Contacts  :
                ret = this.getContact(_entryId);
                break;
            case smmOutlookMappingTypes::Tasks :
                ret = this.getTask(_entryId);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMailFromEntryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets user email id from the entry id.
    /// </summary>
    /// <param name="_entryId">
    /// Exchange entry id.
    /// </param>
    /// <returns>
    /// User's email
    /// </returns>
    public SysIMapiExMail getMailFromEntryId(str _entryId)
    {
        Object ret;

        try
        {
            ret = connection.getUserEmail();
        }
        catch(Exception::CLRError)
        {
            SmmEwsExceptionHandler::logError(funcName(), Exception::CLRError);
        }
        catch(Exception::Error)
        {
            SmmEwsExceptionHandler::logError(funcName(), Exception::Error);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the task from exchange that matches the id provided.
    /// </summary>
    /// <param name="_entryId">
    /// The outlookId of the task requested.
    /// </param>
    /// <returns>
    /// A <c>smmEwsTask</c> representing the task requested or null
    /// value if the task could not be retrieved.
    /// </returns>
    /// <remarks>
    /// It may fail due to connection problems, or due to invalid id.
    /// </remarks>
    private smmEwsTask getTask(str _entryId)
    {
        Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationTask   basicTask;
        smmEwsTask                                                  ret;
        str                                                         exchangeId = connection.convertOutlookIdToExchangeId(_entryId);

        if (exchangeId)
        {
            try
            {
                basicTask = connection.getTaskFromEntryId(exchangeId);
                if (basicTask != null)
                {
                    ret = new smmEwsTask(basicTask, connection);
                }
            }
            catch(Exception::CLRError)
            {
                SmmEwsExceptionHandler::logError(funcName(), Exception::CLRError);
            }
            catch(Exception::Error)
            {
                SmmEwsExceptionHandler::logError(funcName(), Exception::Error);
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaskFromEntryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the task from exchange that matches the id provided.
    /// </summary>
    /// <param name="_entryId">
    /// The outlookId of the task requested.
    /// </param>
    /// <returns>
    /// A <c>SysIMapiExTask</c> representing the task requested or null
    /// value if the task could not be retrieved.
    /// </returns>
    /// <remarks>
    /// It may fail due to connection problems, or due to invalid id.
    /// </remarks>
    public SysIMapiExTask getTaskFromEntryId(str _entryId)
    {
        return this.getTask(_entryId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaskItemFromEntryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the task from exchange that matches the id provided.
    /// </summary>
    /// <param name="_entryId">
    /// Exchange id of the task.
    /// </param>
    /// <returns>
    /// A <c>smmITask</c> representing the task requested or null
    /// value if the task could not be retrieved.
    /// </returns>
    /// <remarks>
    /// It may fail due to connection problems, or due to invalid id.
    /// </remarks>
    public smmITask getTaskItemFromEntryId(str _entryId)
    {
        return this.getTask(_entryId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadCurrentProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads current user profile.
    /// This is an interface member required in Outlook integration.Not required for exchange integration.
    /// </summary>
    public void loadCurrentProfile()
    {
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logoff</Name>
				<Source><![CDATA[
    /// <summary>
    /// Closes the connection to exchange.
    /// This is an interface member.
    /// There is no persistent exchange server connection so do not need it in exchange integration.
    /// </summary>
    public void logoff()
    {
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the connection to exchange.
    /// </summary>
    /// <param name="_logonName">
    /// The login name for exchange or empty string in order to use the default credentials.
    /// </param>
    /// <param name="_password">
    /// The exchange password if the login name was provided.
    /// If the login name was empty string, this parameter will be ignored.
    /// </param>
    /// <param name="_flags">
    /// Flags
    /// </param>
    /// <returns>
    /// true if the connection could be established; otherwise, false.
    /// </returns>
    public boolean logon(str _logonName, str _password, int _flags)
    {
        return this.connectToExchange();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapiInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a <c>smmEwsConnection</c> call to login can be completed or not.
    /// </summary>
    /// <returns>
    /// True if initialization successful; otherwise false.
    /// </returns>
    public boolean mapiInitialized()
    {
        boolean success;

        success = this.Logon(this.parmCurrentUserEmail(), '', 0);

        return success;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        LogisticsElectronicAddressLocator currentEmail;

        currentEmail = smmEwsConnection::getCurrentUserEmail();
        connection = new Microsoft.Dynamics.AX.ExchangeIntegration.Connection(currentEmail);
        this.parmCurrentUserEmail(currentEmail);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openMessageStore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the message store of the current user.
    /// </summary>
    /// <param name="_entryId">
    /// Entry id of the store.
    /// </param>
    /// <returns>
    /// True if message store can be opened; otherwise false
    /// </returns>
    /// <remarks>
    /// This is an interface member required by outlook and not by exchange server.
    /// </remarks>

    public boolean openMessageStore(str _entryId)
    {
        // Interface member required by outlook and not by exchange server.
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentUserEmail</Name>
				<Source><![CDATA[
    private LogisticsElectronicAddressLocator parmCurrentUserEmail(LogisticsElectronicAddressLocator _emailAddress = emailAddress)
    {
        emailAddress = _emailAddress;

        return emailAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoggedOn</Name>
				<Source><![CDATA[
    private boolean parmLoggedOn(boolean _loggedOn = loggedOn)
    {
        loggedOn = _loggedOn;

        return loggedOn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>translateExchangeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Translates an exchangeId into an outlookId.
    /// </summary>
    /// <param name="_exchangeId">
    /// The id that needs to be translated.
    /// </param>
    /// <returns>
    /// The outlookId required or empty string if it could not be translated due to
    /// invalid exchangeId or connection problems.
    /// </returns>
    /// <remarks>
    /// Makes a call to the exchange server. It may fail due to connection problems.
    /// </remarks>
    public str translateExchangeId(str _exchangeId)
    {
        str ret;

        ret = connection.convertExchangeIdToOutlookId(_exchangeId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createConnection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a connection to Microsoft Exchange Server and connect to Exchange Server.
    /// </summary>
    /// <returns>
    /// Connection instance to Microsoft Exchange Server.
    /// </returns>
    private static smmEwsConnection createConnection()
    {
        smmEwsConnection    instance = new smmEwsConnection();
        SysGlobalCache      globalCache = classfactory.globalCache();

        if (!instance)
        {
            error("@SYP4860486");
        }

        //As the new instance is created, it needs to Logon
        instance.connectToExchange();
        globalCache.set(classStr(smmEwsConnection), 0, instance);

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentUserEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets current logged in user's email for authentication and synchronization with exchange.
    /// </summary>
    /// <returns>
    /// Email of current logged in user.
    /// </returns>
    public static LogisticsElectronicAddressLocator getCurrentUserEmail()
    {
        SysUserInfo                 sysUserInfo;

        sysUserInfo = SysUserInfo::find(curUserId());

        return sysUserInfo.Email;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current instance of this class.
    /// </summary>
    /// <returns>
    /// The instance of <c>smmEwsConnection</c>.
    /// </returns>
    /// <remarks>
    /// As the connection is stored in the cache, it may be deleted and this call may create a new connection.
    /// Singleton pattern implementation of <c>smmEwsConnection</c>.
    /// </remarks>
    public static smmEwsConnection instance()
    {
        smmEwsConnection                    instance;
        SysGlobalCache                      globalCache = classfactory.globalCache();
        LogisticsElectronicAddressLocator   exchangeEmail;

        if (globalCache.isSet(classStr(smmEwsConnection), 0))
        {
            instance = globalCache.get(classStr(smmEwsConnection), 0);
            exchangeEmail = instance.CurrentUserEmail();

            if (exchangeEmail != smmEwsConnection::getCurrentUserEmail())
            {
                globalCache.remove(classStr(smmEwsConnection), 0);
                instance = smmEwsConnection::createConnection();
            }
        }
        else
        {
            instance = smmEwsConnection::createConnection();
        }

        return instance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>