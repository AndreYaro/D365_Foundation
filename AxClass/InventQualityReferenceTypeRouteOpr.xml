<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventQualityReferenceTypeRouteOpr</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventQualityReferenceTypeRouteOpr</c> class abstracts a route operation reference document.
/// </summary>
[InventQualityReferenceTableName(tableStr(ProdRoute))]
[InventTestReferenceTypeFactoryAttribute(InventTestReferenceType::RouteOpr)]
class InventQualityReferenceTypeRouteOpr extends InventQualityReferenceType
{
    ProdRoute prodRoute;
    WrkCtrId  wrkCtrId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEditQuarantineOnFailure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the quarantine upon validation failure field can be edited.
    /// </summary>
    /// <returns>
    /// true if the field can be edited; otherwise, false.
    /// </returns>
    public boolean allowEditQuarantineOnFailure()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bufferForRefQty</Name>
				<Source><![CDATA[
    protected Common bufferForRefQty()
    {
        return prodRoute.prodTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromQualityOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the instance based on an <c>InventQualityOrderTable</c> buffer.
    /// </summary>
    /// <param name="_orderTable">
    ///    An <c>InventQualityOrderTable</c> buffer.
    /// </param>
    protected void initFromQualityOrder(InventQualityOrderTable _orderTable)
    {
        this.parmBuffer(ProdRoute::findByOprId(_orderTable.InventRefId, _orderTable.OprNum,  _orderTable.RouteOprId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDirection</Name>
				<Source><![CDATA[
    public InventDirection inventDirection()
    {
        return InventDirection::Receipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventRefId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InventRefId</c> value for this reference document.
    /// </summary>
    /// <returns>
    ///    The appropriate <c>InventRefId</c> value.
    /// </returns>
    public InventRefId inventRefId()
    {
        return prodRoute.ProdId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSiteId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InventSiteId</c> value for this reference document.
    /// </summary>
    /// <returns>
    ///    The appropriate <c>InventSiteId</c> value.
    /// </returns>
    public InventSiteId inventSiteId()
    {
        return prodRoute.prodTable().inventDim().InventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InventTransId</c> value for this reference document.
    /// </summary>
    /// <returns>
    ///    The appropriate <c>InventTransId</c> value.
    /// </returns>
    public InventTransId inventTransId()
    {
        return prodRoute.prodTable().InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>iterateQualityAssociations</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Iterates all relevant combinations of certain quality association criteria and allows for a passed
    ///    actor to act on them.
    /// </summary>
    /// <param name="actionable">
    ///    An <c>InventQualityManagementActionable</c> reference to be called for action on each combination
    ///    of quality association criteria.
    /// </param>
    public void iterateQualityAssociations (InventQualityManagementActionable actionable)
    {
        container                   conItemGroup;
        container                   conResourceTable;
        container                   conResourceGroup;

        int                         itemCodeNo;
        int                         routeCodeNo;
        int                         resourceCodeNo;

        date                        effectiveDate       = prodRoute.FromDate;

        InventTestItemQualityGroup  itemQualityGroup;

        // Fill Item code map
        while select QualityGroupId
            from itemQualityGroup
            where itemQualityGroup.ItemId == this.itemId()
        {
            conItemGroup += itemQualityGroup.QualityGroupId;
        }

        Map mapItemCode = new Map(Types::Enum, Types::Container);
        mapItemCode.insert(TableGroupAll::All, ['']);
        mapItemCode.insert(TableGroupAll::Table, [this.itemId()]);
        mapItemCode.insert(TableGroupAll::GroupId, conItemGroup);

        // Fill route code map
        Map mapRouteCode = new Map(Types::Enum, Types::Container);
        mapRouteCode.insert(TableGroupAll::All, ['']);
        mapRouteCode.insert(TableGroupAll::Table, [prodRoute.OprId]);
        mapRouteCode.insert(TableGroupAll::GroupId, [prodRoute.RouteGroupId]);

        // find the resources that have been used or are expected to be used to perform the route operation, if any exists
        Set allocatedResources = Set::union(prodRoute.usedResources(), prodRoute.scheduledResources());
        SetEnumerator resourceEnumerator = allocatedResources.getEnumerator();

        while (resourceEnumerator.moveNext())
        {
            wrkCtrId = resourceEnumerator.current();
            WrkCtrResourceGroup wrkCtrResourceGroup = WrkCtrTable::resourceGroup(wrkCtrId, effectiveDate);

            conResourceTable += wrkCtrId;
            if (!conFind(conResourceGroup, wrkCtrResourceGroup.WrkCtrId))
            {
                conResourceGroup += wrkCtrResourceGroup.WrkCtrId;
            }
        }

        // Fill resource code map
        Map mapResourceCode = new Map(Types::Enum, Types::Container);
        mapResourceCode.insert(TableGroupAll::All, ['']);
        mapResourceCode.insert(TableGroupAll::Table, conResourceTable);
        mapResourceCode.insert(TableGroupAll::GroupId, conResourceGroup);

        // Check for quality associations for all permutations of the map values
        MapEnumerator itemCodeEnumerator = mapItemCode.getEnumerator();
        while (itemCodeEnumerator.moveNext())
        {
            container itemCodeValues = itemCodeEnumerator.currentValue();
            for (itemCodeNo = 1; itemCodeNo <= conLen(itemCodeValues); itemCodeNo++)
            {
                MapEnumerator routeCodeEnumerator = mapRouteCode.getEnumerator();
                while (routeCodeEnumerator.moveNext())
                {
                    container routeCodeValues = routeCodeEnumerator.currentValue();
                    for (routeCodeNo = 1; routeCodeNo <= conLen(routeCodeValues); routeCodeNo++)
                    {
                        MapEnumerator resourceCodeEnumerator = mapResourceCode.getEnumerator();
                        while (resourceCodeEnumerator.moveNext())
                        {
                            container resourceCodeValues = resourceCodeEnumerator.currentValue();
                            for (resourceCodeNo = 1; resourceCodeNo <= conLen(resourceCodeValues); resourceCodeNo++)
                            {
                                wrkCtrId = conPeek(resourceCodeValues,resourceCodeNo);

                                actionable.actOnAssociations(
                                    itemCodeEnumerator.currentKey(),
                                    conPeek(itemCodeValues,itemCodeNo),
                                    routeCodeEnumerator.currentKey(),
                                    conPeek(routeCodeValues,routeCodeNo),
                                    resourceCodeEnumerator.currentKey(),
                                    conPeek(resourceCodeValues,resourceCodeNo));
                            }
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>oprNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>OprNum</c> value for this reference document.
    /// </summary>
    /// <returns>
    ///    The appropriate <c>OprNum</c> value.
    /// </returns>
    public OprNum oprNum()
    {
        return prodRoute.OprNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBuffer</Name>
				<Source><![CDATA[
    public Common parmBuffer(Common _buffer = prodRoute)
    {
        prodRoute        = _buffer;

        defaultDimension  = prodRoute.DefaultDimension        ? prodRoute.DefaultDimension        : defaultDimension;
        inventDimId       = prodRoute.prodTable().InventDimId ? prodRoute.prodTable().InventDimId : inventDimId;
        itemId            = prodRoute.prodTable().ItemId      ? prodRoute.prodTable().ItemId      : itemId;

        return prodRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>referenceType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InventTestReferenceType</c> value of this reference document.
    /// </summary>
    /// <returns>
    ///    The appropriate <c>InventTestReferenceType</c> value.
    /// </returns>
    public InventTestReferenceType referenceType()
    {
        return InventTestReferenceType::RouteOpr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>routeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RouteId</c> value of this reference document.
    /// </summary>
    /// <returns>
    /// The appropriate <c>RouteId</c> value; otherwise, empty.
    /// </returns>
    public RouteId routeId()
    {
        return prodRoute.prodTable().RouteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>routeOprId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>RouteOprId</c> value of this reference document.
    /// </summary>
    /// <returns>
    ///    The appropriate <c>RouteOprId</c> value.
    /// </returns>
    public RouteOprId routeOprId()
    {
        return prodRoute.OprId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>routeWrkCtrId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>WrkCtrId</c> value of a related route.
    /// </summary>
    /// <returns>
    /// The appropriate <c>WrkCtrId</c> value; otherwise, empty.
    /// </returns>
    public WrkCtrId routeWrkCtrId()
    {
        return prodRoute.getResource(true, true, dateNull(), maxDate(), this.inventSiteId()).WrkCtrId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatusReceiptRangeValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets a range value for the <c>StatusReceipt</c> field on the data source of the <c>InventTrans</c>
    ///    table that is based on the document status and test execution values.
    /// </summary>
    /// <param name="_qbrStatusReceipt">
    ///    A query build range object.
    /// </param>
    /// <param name="_inventTestDocumentStatus">
    ///    A document status value.
    /// </param>
    /// <param name="_inventTestExecution">
    ///    A test execution value.
    /// </param>
    protected void setStatusReceiptRangeValue(
        QueryBuildRange             _qbrStatusReceipt,
        InventTestDocumentStatus    _inventTestDocumentStatus,
        InventTestExecution         _inventTestExecution)
    {
        _qbrStatusReceipt.value(SysQuery::range(StatusReceipt::Purchased, StatusReceipt::Ordered));
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrkCtrId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>WrkCtrId</c> value of this reference document.
    /// </summary>
    /// <returns>
    ///    The appropriate <c>WrkCtrId</c> value.
    /// </returns>
    public WrkCtrId wrkCtrId()
    {
        return wrkCtrId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventQualityReferenceTypeRouteOpr construct()
    {
        return new InventQualityReferenceTypeRouteOpr();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
