<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetRegisterEntryEntityNumSeqHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetRegisterEntryEntityNumSeqHandler</c> class provides an API to ensure
/// proper defaulting of a entry number from a number sequence,
/// validation of manually entered values against the number sequence parameters
/// and a way to inform the number sequence engine whether the suggested number
/// from the sequence was actually saved to the database or discarded.
/// </summary>
final public class BudgetRegisterEntryEntityNumSeqHandler
{
    FieldId                 entryNumberFieldId;
    Num                     generatedNumber;
    NumberSeq               numberSeq;
    NumberSequenceTable     numberSequenceTable;
    NumberSequenceReference numberSequenceReference;
    BudgetTransactionHeader budgetTransactionHeader;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>enableNumberSequenceControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables number sequence control for the specified field.
    /// </summary>
    /// <param name = "_entity">The record for which the number sequence control needs to be enabled.</param>
    /// <param name = "_entryNumberFieldId">The ID of the field for which the number sequence control needs to be enabled.</param>
    /// <param name = "_numberSequenceReference">The reference to the number sequence that should be used for the field.</param>
    /// <param name = "_transactionHeader">The <c>BudgetTransactionHeader</c> table buffer.</param>
    public static void enableNumberSequenceControl(Common _entity, FieldId _entryNumberFieldId, NumberSequenceReference _numberSequenceReference, BudgetTransactionHeader _transactionHeader)
    {
        BudgetRegisterEntryEntityNumSeqHandler numberSeqHandler = BudgetRegisterEntryEntityNumSeqHandler::construct();

        numberSeqHandler.init(_entryNumberFieldId, _numberSequenceReference, _transactionHeader);
        numberSeqHandler.subscribeForEvents(_entity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static BudgetRegisterEntryEntityNumSeqHandler construct()
    {
        BudgetRegisterEntryEntityNumSeqHandler numberSeqHandler = new BudgetRegisterEntryEntityNumSeqHandler();

        return numberSeqHandler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleInitializingRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the <c>onInitializingRecord</c> event of the record.
    /// </summary>
    /// <param name = "_entity">The record which fired the event.</param>
    /// <param name = "_eventArgs">Information about the event.</param>
    private void handleInitializingRecord(Common _entity, DataEventArgs _eventArgs)
    {   
        if (numberSequenceReference)
        {
            numberSequenceTable = NumberSequenceTable::find(numberSequenceReference.NumberSequenceId);
            numberSeq = NumberSeq::newGetNum(numberSequenceReference);
        }

        if (!generatedNumber && numberSeq)
        {
            generatedNumber = numberSeq.num();
        }

        // Set the entry number to the next number in the number sequence list.
        _entity.(entryNumberFieldId) = generatedNumber;

        // Assign the generated number to the transaction number field on the BudgetTransactionHeader table buffer.
        // This needs to be set on the table buffer in addition to the entity
        // because the entry number value on the entity may not persist between event handlers.
        budgetTransactionHeader.TransactionNumber = generatedNumber;      
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleInserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the <c>onInserted</c> event of the record.
    /// </summary>
    /// <param name = "_entity">The record which fired the event.</param>
    /// <param name = "_eventArgs">Information about the event.</param>
    private void handleInserted(Common _entity, DataEventArgs _eventArgs)
    {
        // Inform the number sequence engine that the record that needed a number is now saved.  
        // At this point, the entry number field value is blank on the common record 
        // hence we are using the header table buffer transaction number field as the actual used number
        // which would avoid setting back the number sequence status to Free.
        numberSeq.onNumberUsed(budgetTransactionHeader.TransactionNumber, generatedNumber);

        this.unsubscribeFromEvents(_entity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleValidatingField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the <c>onValidatingField</c> event of the record.
    /// </summary>
    /// <param name = "_entity">The record which fired the event.</param>
    /// <param name = "_eventArgs">Information about the event.</param>
    private void handleValidatingField(Common _entity, DataEventArgs _eventArgs)
    {
        var validateEventArgs = _eventArgs as ValidateFieldEventArgs;

        if (validateEventArgs.parmFieldId() == entryNumberFieldId)
        {
            boolean ret = true;

            Num recordFieldValue = _entity.(entryNumberFieldId);

            if (generatedNumber != recordFieldValue)
            {
                if (!numberSequenceTable.numAllowEdit())
                {
                    ret = ret & checkFailed(strFmt("@ApplicationFoundation:NumberSeqFieldDoesNotAllowEditing", fieldId2PName(_entity.TableId, entryNumberFieldId)));
                }

                if (generatedNumber)
                {
                    ret = ret & NumberSeq::checkChangeNumber(numberSequenceTable, _entity.TableId, entryNumberFieldId, generatedNumber, recordFieldValue);
                }
            }
            
            validateEventArgs.parmValidateResult(ret);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init(FieldId _entryNumberFieldId, NumberSequenceReference _numberSequenceReference, BudgetTransactionHeader _transactionHeader)
    {
        if (BudgetTransactionManager::checkBudgetTransactionNumberSequence())
        {
            entryNumberFieldId = _entryNumberFieldId;
            numberSequenceReference = _numberSequenceReference;
            budgetTransactionHeader = _transactionHeader;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribeForEvents</Name>
				<Source><![CDATA[
    private void subscribeForEvents(Common _record)
    {       
        _record.onInitializingRecord += eventhandler(this.handleInitializingRecord);
        _record.onValidatingField += eventhandler(this.handleValidatingField);
        _record.onInserted += eventhandler(this.handleInserted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unsubscribeFromEvents</Name>
				<Source><![CDATA[
    private void unsubscribeFromEvents(Common _record)
    {      
        _record.onInitializingRecord -= eventhandler(this.handleInitializingRecord);
        _record.onValidatingField -= eventhandler(this.handleValidatingField);
        _record.onInserted -= eventhandler(this.handleInserted);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>