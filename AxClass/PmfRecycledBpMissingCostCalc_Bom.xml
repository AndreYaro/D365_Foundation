<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfRecycledBpMissingCostCalc_Bom</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PmfRecycledBpMissingCostCalc_Bom</c> class is responsible for calculating the cost of recycled byproducts
/// that have been not calculated by the item consumption calculation.
/// </summary>
class PmfRecycledBpMissingCostCalc_Bom implements IPmfRecycledBpMissingCostCalc
{
    PmfRecycledBpBomCalcCreator  bomCalcCreator;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isCalculationRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the calculation was run for a recycled byproduct.
    /// </summary>
    /// <param name="_formulaCoBy">
    /// The <c>PmfFormulaCoBy</c> record.
    /// </param>
    /// <returns>
    /// True if calculation was run for a recycled byproduct; false otherwise.
    /// </returns>
    public boolean isCalculationRun(PmfFormulaCoBy _formulaCoBy)
    {
        BOMCalcTable bomCalcTable = BOMCalcTable::findByItemParentPriceCalcId(_formulaCoBy.ItemId,
                                                                              _formulaCoBy.InventDimId,
                                                                              bomCalcCreator.parmParentBomCalc().parmPriceCalcId());

        return bomCalcTable.RecId != 0;
    }
]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmBomCalcCreator</Name>
				<Source><![CDATA[
    public PmfRecycledBpBomCalcCreator parmBomCalcCreator(PmfRecycledBpBomCalcCreator _bomCalcCreator = bomCalcCreator)
    {
        bomCalcCreator = _bomCalcCreator;

        return bomCalcCreator;
    }
]]></Source>
			</Method>
			<Method>
				<Name>runCalculationsForBpMissingCost</Name>
				<Source><![CDATA[
    public void runCalculationsForBpMissingCost()
    {
        PmfFormulaCoBy      coBy;
        BOMCalcItem         bomCalcItem;

        while select coBy
        where   coBy.bomVersionRefRecId  == bomCalcCreator.parmParentBomCalc().parmPmfBomVersion().RecId
            &&  coBy.ProductType == PmfProductType::By_Product
            &&  coBy.BurdenType  == PmfBurdenType::Recycled
        {
            if (! this.isCalculationRun(coBy))
            {
                bomCalcCreator.parmPmfFormulaCoBy(coBy);
                bomCalcItem = bomCalcCreator.getResult();
                bomCalcItem.calc();
            }
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PmfRecycledBpMissingCostCalc_Bom construct()
    {
        return new PmfRecycledBpMissingCostCalc_Bom();
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>