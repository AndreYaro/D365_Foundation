<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWaveWorkCreatedQuantityValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWaveWorkCreatedQuantityValidator</c> class validates that the quantity that was used to update the load line work created quantities
/// corresponds to the work quantities for work created during the processing of the wave.
/// </summary>
public class WHSWaveWorkCreatedQuantityValidator
{
    private WHSInstrumentationLogger instrumentationLogger;

    protected WHSWaveTable waveTable;
    private   WHSInventQtyWork  workInventQty;
    private   WHSWorkCreatedQty updatedLoadLineQty;
    protected WHSWaveExecutionID waveExecutionId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setWaveExecutionId</Name>
				<Source><![CDATA[
    public void setWaveExecutionId(WHSWaveExecutionID _waveExecutionId)
    {
        this.waveExecutionId = _waveExecutionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>areWorkLinesInventQtyWorkInSyncWithExpectedCreatedQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if the work created quantities correspond to the actual quantities for the created work. 
    /// </summary>
    /// <returns>true if the quantities are correct; otherwise, false.</returns>
    public boolean areWorkLinesInventQtyWorkInSyncWithExpectedCreatedQuantities()
    {
        WHSWorkLineInventQtySummedByLoadLine    workLineInventQtySummedByLoadLine;
        WHSWaveUpdatedLoadLine                  waveUpdatedLoadLine;
        WHSWorkTable                            workTable;

        using (var activityContext = this.instrumentationLogger().waveWorkCreatedQtyValidatorActivities().checkWorkLinesInventQtyWorkInSyncWithExpectedCreatedQuantities())
        {
            //if we have a difference in the quantity we updated the loadlines with and the quantity we created work for we have an issue
            select firstOnly RecId, WorkCreatedQtyDelta, LoadLineRefRecId from waveUpdatedLoadLine
                where waveUpdatedLoadLine.WaveId == waveTable.WaveId
            join InventQtyWork from workLineInventQtySummedByLoadLine
                where workLineInventQtySummedByLoadLine.LoadLineRefRecId == waveUpdatedLoadLine.LoadLineRefRecId
                    && workLineInventQtySummedByLoadLine.WorkBuildId == waveTable.WorkBuildId
                    && workLineInventQtySummedByLoadLine.WaveId == waveTable.WaveId
                    && workLineInventQtySummedByLoadLine.InventQtyWork != waveUpdatedLoadLine.WorkCreatedQtyDelta;

            if (waveUpdatedLoadLine.RecId)
            {
                workInventQty      = workLineInventQtySummedByLoadLine.InventQtyWork;
                updatedLoadLineQty = waveUpdatedLoadLine.WorkCreatedQtyDelta;

                this.instrumentationLogger().waveWorkCreatedQtyValidatorActivities().logWaveUpdatedLoadLineRecId(waveUpdatedLoadLine.RecId);
                this.instrumentationLogger().waveWorkCreatedQtyValidatorActivities().logLoadLineRefRecId(waveUpdatedLoadLine.LoadLineRefRecId);
            }           
        }

        return (waveUpdatedLoadLine.RecId == 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logWorkLinesOutOfSyncWithLoadLines</Name>
				<Source><![CDATA[
    protected void logWorkLinesOutOfSyncWithLoadLines()
    {
        WHSWorkLineInventQtySummedByLoadLine    workLineInventQtySummedByLoadLine;
        WHSWaveUpdatedLoadLine                  waveUpdatedLoadLine;
        WHSWorkTable                            workTable;
        WHSLoadLine                             loadLine;
        
        Map loadIdMessageMap = new Map(Types::String, Types::Class);
        Set messageSet;

        while select RecId, WorkCreatedQtyDelta, LoadLineRefRecId from waveUpdatedLoadLine
            where waveUpdatedLoadLine.WaveId == waveTable.WaveId
        join InventQtyWork from workLineInventQtySummedByLoadLine
            where workLineInventQtySummedByLoadLine.LoadLineRefRecId == waveUpdatedLoadLine.LoadLineRefRecId
                && workLineInventQtySummedByLoadLine.WorkBuildId == waveTable.WorkBuildId
                && workLineInventQtySummedByLoadLine.WaveId == waveTable.WaveId
                && workLineInventQtySummedByLoadLine.InventQtyWork != waveUpdatedLoadLine.WorkCreatedQtyDelta 
        outer join LoadId, ItemId, InventTransId, RecId from loadLine //outer join in case loadline is deleted
            where loadLine.RecId == waveUpdatedLoadLine.LoadLineRefRecId
        {
            if (loadIdMessageMap.exists(loadLine.LoadId))
            {
                messageSet = loadIdMessageMap.lookup(loadLine.LoadId);
            }
            else
            {
                messageSet = new Set(Types::String);
            }
            
            if (loadLine.InventTransId)
            {
                messageSet.add(strFmt("@WAX:WaveLoadLineWorkCreatedQtyNotInSyncLoadlineExistError",
                workLineInventQtySummedByLoadLine.InventQtyWork, loadLine.LoadId, loadLine.ItemId, loadLine.InventTransId, loadLine.RecId, waveUpdatedLoadLine.WorkCreatedQtyDelta));
            }
            else
            {
                messageSet.add(strFmt("@WAX:WaveLoadLineWorkCreatedQtyNotInSyncLoadlineDeletedError", waveUpdatedLoadLine.LoadLineRefRecId));
            }

            loadIdMessageMap.insert(loadLine.LoadId, messageSet);
        }

        if (loadIdMessageMap.elements())
        {
            WhsPostEngine::createMultipleWaveExecutionHistoryLines(waveTable.WaveId, this.waveExecutionId, loadIdMessageMap, true, waveTable.WorkBuildId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the work lines quantities are in sync with the quantity the load lines were updated with.
    /// Throws an exception if the validation fails.
    /// </summary>
    public void validate()
    {
        if (!this.areWorkLinesInventQtyWorkInSyncWithExpectedCreatedQuantities())
        {            
            this.logWorkLinesOutOfSyncWithLoadLines();
            Message::AddAction(
                MessageSeverity::Error, 
                strFmt("@WAX:WHSLoadLinesCreatedWorkQtyNotSyncedErrorDetails", waveTable.WaveId, workInventQty, updatedLoadLineQty, workInventQty - updatedLoadLineQty), 
                "@WAX3135",
                MessageActionType::DisplayMenuItem,
                MenuItemMessageActionProvider::createMenuItemWithFilterActionData(MenuItemType::Display, menuitemDisplayStr(WHSWaveExecutionHistory), MenuItemMessageActionFilterType::CallerRecord, waveTable));
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {}

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static WHSWaveWorkCreatedQuantityValidator construct()
    {
        return new WHSWaveWorkCreatedQuantityValidator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWaveTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a new instance of the <c>WHSWaveWorkCreatedQuantityValidator</c> class.
    /// </summary>
    /// <param name = "_waveTable">The wave used for the validation.</param>
    /// <returns>A new instance of the <c>WHSWaveWorkCreatedQuantityValidator</c> class.</returns>
    public static WHSWaveWorkCreatedQuantityValidator newFromWaveTable(WHSWaveTable _waveTable)
    {
        WHSWaveWorkCreatedQuantityValidator validator = WHSWaveWorkCreatedQuantityValidator::construct();

        validator.waveTable = _waveTable;

        return validator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    final internal WHSInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>