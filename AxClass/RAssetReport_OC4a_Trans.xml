<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetReport_OC4a_Trans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rAssetReport_OC4a_Trans extends RAssetReport_OC4_Base
{
    protected LedgerDimensionAccount ledgerDimension;
    protected real useValue;
    protected real useValueFromLastRepairs;
    protected date dtRevaluationLast;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cntScrapRowIntoReport</Name>
				<Source><![CDATA[
    protected Integer cntScrapRowIntoReport()
    {
        const int cntScrapRowIntoReport = 6;

        return cntScrapRowIntoReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>comment</Name>
				<Source><![CDATA[
    protected str comment()
    {
        return "@GLS116493";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    protected Dialog dialog()
    {
        Dialog      dlg = super();

        this.documentDate(rAssetTrans.AttachDocumentDate ? rAssetTrans.AttachDocumentDate : this.transDate());
        this.documentNumber(rAssetTrans.AttachDocumentNumber);

        return dlg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetName</Name>
				<Source><![CDATA[
    protected TempStr getAssetName()
    {
        return this.mergeStr(rAssetTable.Name, rAssetTable.Model);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDocumentValue</Name>
				<Source><![CDATA[
    public void initDocumentValue(RAssetDocument _document)
    {
        super(_document);

        _document.StandardId = rAssetTrans.AssetStandardId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReport</Name>
				<Source><![CDATA[
    protected boolean initReport()
    {
        boolean ret = super();

        if (ret)
        {
            ledgerDimension = rAssetTrans.LedgerDimension;
            dtRevaluationLast = this.dateRevaluationLast(this.transDate() - 1);
            
            RAssetUse rAssetUse;
            select sum(UseValue) from rAssetUse
                where rAssetUse.AssetId == rAssetTable.AccountNum;

            useValue = rAssetUse.UseValue;

            select sum(UseValue) from rAssetUse
                where rAssetUse.AssetId == rAssetTable.AccountNum &&
                      rAssetUse.UseDate > dtRevaluationLast;

            useValueFromLastRepairs = rAssetUse.UseValue;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initStructScrapBlokCoordinate</Name>
				<Source><![CDATA[
    protected Struct initStructScrapBlokCoordinate()
    {
        const int firstRow = 20;

        Struct struct = super();

        struct.value(RowNumber, firstRow);
        struct.value(ScrapDocNumber, 'AK');
        struct.value(ScrapItemName, 'AR');
        struct.value(ScrapItemID, 'AZ');
        struct.value(Unit, 'BG');
        struct.value(ScrapQty, 'BN');
        struct.value(ScrapCostPrice, 'BT');
        struct.value(ScrapCostAmount, 'CA');
        struct.value(AccountNumDeb, 'CH');
        struct.value(AccountNumCred, 'CO');

        return struct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Args _args)
    {
        if (_args.dataset() != tableNum(RAssetTrans))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        rAssetTrans = _args.record();
        rAssetTable = RAssetTable::find(rAssetTrans.AccountNum);
        rAssetStandards = RAssetStandards::find(rAssetTrans.AccountNum, rAssetTrans.AssetStandardId);

        super(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputUnPostingInvent</Name>
				<Source><![CDATA[
    protected boolean outputUnPostingInvent()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPage01</Name>
				<Source><![CDATA[
    /// <summary>
    /// Outputs first page of report to excel
    /// </summary>
    /// <remarks>
    /// Analysis dimension value is taken from dimension specified at rAssetParameters as analysis dimension
    /// </remarks>
    protected void printPage01()
    {
        DimensionDisplayValue dimensionDisplayValue = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(ledgerDimension);

        if (rAssetParameters.AnalysisDimensionAttribute)
        {
            dimensionDisplayValue = strFmt("@SYS26868", dimensionDisplayValue, this.getAnalysisCodeFromLedgerDimension(ledgerDimension));
        }

        super();

        HrmDescription hrmDescription = HcmPosition::findByPosition(emplTable.worker().primaryPositionId()).description();
        this.insertValueIntoDoc(ConstEmplTitle, hrmDescription ? hrmDescription :
                                            emplTable.worker().primaryPositionId());

        this.insertDateIntoDoc(ConstAcquisitionDate, acquisitionFirstTrans.TransDate);
        this.insertDateIntoDoc(ConstDateRevaluationLast, dtRevaluationLast);
        this.insertValueIntoDoc(ConstControlAccount, dimensionDisplayValue);
        this.insertValueIntoDoc(ConstUseValue, useValue);
        this.insertValueIntoDoc(ConstUseValueFromLastRepairs, useValueFromLastRepairs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPage03</Name>
				<Source><![CDATA[
    protected void printPage03()
    {
        super();

        this.outScrapBlok();
    }

]]></Source>
			</Method>
			<Method>
				<Name>relatedRecord</Name>
				<Source><![CDATA[
    public Common relatedRecord()
    {
        return rAssetTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected str templateName()
    {
        return resourceStr(RAsset_4a);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    protected TransDate transDate()
    {
        return rAssetTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDocuments</Name>
				<Source><![CDATA[
    protected void updateDocuments()
    {
        super();

        rAssetTrans = RAssetTrans::find(rAssetTrans.RecId, true);
        rAssetTrans.AttachDocumentDate = documentDate;
        rAssetTrans.AttachDocumentNumber = documentNumber;
        rAssetTrans.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report.
    /// </summary>
    /// <returns>
    /// The name of the report.
    /// </returns>
    public str getReportName()
    {
        return 'FA4A';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>