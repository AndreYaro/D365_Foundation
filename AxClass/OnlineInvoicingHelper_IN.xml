<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OnlineInvoicingHelper_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.ApplicationSuite.QRCode;
using Microsoft.Dynamics365.LocalizationFramework;

#ISOCountryRegionCodes

/// <summary>
/// The <c>OnlineInvoicingHelper_IN</c> class is the helper class for the Indian Online Invocing functionality.
/// </summary>
internal final static class OnlineInvoicingHelper_IN
{
    private const int KeySize = 256;
    private const int BlockSize = 128;
    private const int Base64PaddingSize = 4;
    public const str ModelName = 'Invoice';
    public const str RootDefinition = 'InvoiceValidation_IN';
    public const str RootDefinitionTaxInvoice = 'TaxInvoice';
    public const str ModelNameForFileIntegration= 'Invoices communication';
    public const str RootDefinitionFileIntegration = 'InvoicesIssued';
    public const str IntegrationPoint = classStr(ERTableDestination) + '#' + tableStr(EInvoice_IN);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>encryptAsymmetric</Name>
				<Source><![CDATA[
    /// <summary>
    /// Encrypts base64 string data with a public certificate.
    /// </summary>
    /// <param name = "_base64Data">Data string in a Base64 format.</param>
    /// <returns>Encrypted base64 string.</returns>
    /// <exception cref="Exception::Error">
    /// Thrown if failed to encrypt data.
    /// </exception>
    public static str encryptAsymmetric(str _base64Data)
    {
        return OnlineInvoicingHelper_IN::encryptAsymmetricByGSTIN(_base64Data, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>encryptAsymmetricByGSTIN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Encrypts base64 string data with a public certificate for particular GSTIN.
    /// </summary>
    /// <param name = "_base64Data">Data string in a Base64 format.</param>
    /// <param name = "_gstin">Registration number.</param>
    /// <returns>Encrypted base64 string.</returns>
    /// <exception cref="Exception::Error">
    /// Thrown if failed to encrypt data.
    /// </exception>
    public static str encryptAsymmetricByGSTIN(str _base64Data, TaxRegistrationNumber_IN _gstin = '')
    {
        str result;

        System.Security.Cryptography.X509Certificates.X509Certificate2 certificate;

        if (_gstin != '')
        {
            certificate = TaxRegistrationNumbers_IN::findByNaturalKey(TaxRegistrationType_IN::Company, TaxType_IN::GST, _gstin).getCertificate();
        }
        else
        {
            certificate = EInvoiceParameters_IT::find().getCertificate();
        }

        try
        {
            System.Security.Cryptography.X509Certificates.PublicKey publicKey = certificate.get_PublicKey();
            System.Security.Cryptography.RSACryptoServiceProvider rsa = publicKey.get_Key();
            System.Byte[] plainText = System.Convert::FromBase64String(_base64Data);
            System.Byte[] cipherText = rsa.Encrypt(plainText, false);
            result = System.Convert::ToBase64String(cipherText);
        }
        catch(Exception::CLRError)
        {
            throw error(CLRInterop::getLastException().ToString());
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertToBase64</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts string to a base64 string.
    /// </summary>
    /// <param name = "_data">String for convertion.</param>
    /// <returns>Base64 string.</returns>
    public static str convertToBase64(str _data)
    {
        System.Byte[] result = System.Text.Encoding::get_UTF8().GetBytes(_data);
        return System.Convert::ToBase64String(result);
    }

]]></Source>
			</Method>
			<Method>
				<Name>encryptBySymmetricKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Encrypts base64 string data using AES 256(AES/ECB/PKCS7Padding) algorithm.
    /// </summary>
    /// <param name = "_base64Data">Data string in Base64 format.</param>
    /// <param name = "_key">Encryption key.</param>
    /// <returns>Encrypted base64 string.</returns>
    /// <exception cref="Exception::Error">
    /// Thrown if failed to encrypt data.
    /// </exception>
    public static str encryptBySymmetricKey(str _base64Data, str _key)
    {
        str result;

        try
        {
            System.Byte[] dataToEncrypt = System.Convert::FromBase64String(_base64Data);
            System.Byte[] keyBytes = System.Convert::FromBase64String(_key);
            using (System.Security.Cryptography.AesManaged tdes = new System.Security.Cryptography.AesManaged())
            {
                tdes.KeySize = KeySize;
                tdes.BlockSize = BlockSize;
                tdes.Key = keyBytes;
                tdes.Mode = System.Security.Cryptography.CipherMode::ECB;
                tdes.Padding = System.Security.Cryptography.PaddingMode::PKCS7;
                System.Security.Cryptography.ICryptoTransform encrypt__1 = tdes.CreateEncryptor();
                System.Byte[] deCipher = encrypt__1.TransformFinalBlock(dataToEncrypt, 0, dataToEncrypt.Length);
                tdes.Clear();
                result = System.Convert::ToBase64String(deCipher);
            }
        }
        catch (Exception::CLRError)
        {
            throw error(CLRInterop::getLastException().ToString());
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>decryptBySymmetricKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decrypts base64 string data using AES 256(AES/ECB/PKCS7Padding) algorithm.
    /// </summary>
    /// <param name = "_encryptedBase64Data">Encrypted base64 string data.</param>
    /// <param name = "_key">Encryption key.</param>
    /// <returns>Decrypted base64 string.</returns>
    /// <exception cref="Exception::Error">
    /// Thrown if failed to decrypt data.
    /// </exception>
    public static str decryptBySymmetricKey(str _encryptedBase64Data, str _key)
    {
        str result;

        try
        {
            System.Byte[] dataToDecrypt = System.Convert::FromBase64String(_encryptedBase64Data);
            System.Byte[] keyBytes = System.Convert::FromBase64String(_key);
            using (System.Security.Cryptography.AesManaged tdes = new System.Security.Cryptography.AesManaged())
            {
                tdes.KeySize = KeySize;
                tdes.BlockSize = BlockSize;
                tdes.Key = keyBytes;
                tdes.Mode = System.Security.Cryptography.CipherMode::ECB;
                tdes.Padding = System.Security.Cryptography.PaddingMode::PKCS7;
                System.Security.Cryptography.ICryptoTransform decrypt__1 = tdes.CreateDecryptor();
                System.Byte[] deCipher = decrypt__1.TransformFinalBlock(dataToDecrypt, 0, dataToDecrypt.Length);
                tdes.Clear();
                result = System.Convert::ToBase64String(deCipher);
            }
        }
        catch (Exception::CLRError)
        {
            throw error(CLRInterop::getLastException().ToString());
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>encryptDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Encrypts attached document using AES 256(AES/ECB/PKCS7Padding) algorithm.
    /// </summary>
    /// <param name = "_refRecId">Document reference to extract the value from.</param>
    /// <param name = "_key">Encryption key.</param>
    /// <returns>Encrypted base64 document string.</returns>
    public static str encryptDocument(RefRecID _refRecId, str _key)
    {
        str result;
        DocuRef docuRef = DocuRef::findRecId(_refRecId);
        using (System.IO.Stream stream = DocumentManagement::getAttachmentStream(docuRef))
        {
            if (stream)
            {
                stream.Seek(0, System.IO.SeekOrigin::Begin);

                using (System.IO.StreamReader streamReader = new System.IO.StreamReader(stream, System.Text.Encoding::UTF8))
                {
                    result = streamReader.ReadToEnd();
                    result = OnlineInvoicingHelper_IN::EncryptBySymmetricKey(OnlineInvoicingHelper_IN::convertToBase64(result), _key);
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateQRCodeFromStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates QR code from string.
    /// </summary>
    /// <param name = "_inputStr">Input string.</param>
    /// <returns>PNG bitmap representing QR code.</returns>
    /// <exception cref="Exception::Error">
    /// Thrown if failed to generate QR code.
    /// </exception>
    public static Bitmap generateQRCodeFromStr(str _inputStr)
    {
        EFDocQRCode_BR generateQR = new EFDocQRCode_BR();
        return generateQR.generateQRCode(_inputStr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>decodeSignedData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decodes digitally signed data.
    /// </summary>
    /// <param name = "_inputStr">Signed data.</param>
    /// <returns>Decoded data.</returns>
    /// <exception cref="Exception::Error">
    /// Thrown if failed to decode data.
    /// </exception>
    public static str decodeSignedData(str _inputStr)
    {
        const int DataPartIdx = 2;
        str result;

        try
        {
            _inputStr = strReplace(_inputStr, ' ', '');

            List signedDataList = strSplit(_inputStr, '.');

            if (signedDataList.elements() > DataPartIdx)
            {
                ListEnumerator le = signedDataList.getEnumerator();
                le.moveNext();
                le.moveNext();
                result = le.current();
            }

            int mod4 = strLen(result) mod Base64PaddingSize;

            if (mod4 > 0 )
            {
                result += strRep('=',  Base64PaddingSize - mod4);
            }

            System.Text.Encoding encodingUTF = System.Text.Encoding::get_UTF8();
            System.Byte[] resByte  = System.Convert::FromBase64String(result);
            result = System.Text.Encoding::get_UTF8().GetString(resByte);
            result = strReplace(result, '\\\"', '\"');
            result = strReplace(result, '"{', '{');
            result = strReplace(result, '}"', '}');
        }
        catch (Exception::CLRError)
        {
            throw error(CLRInterop::getLastException().ToString());
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>attachDocumentFromString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a document from a base64 string and attaches it to a specified record.
    /// </summary>
    /// <param name = "_tableId">TableId of a record.</param>
    /// <param name = "_recId">RecId of a record.</param>
    /// <param name = "_dataAreaId">DataareaId of a record.</param>
    /// <param name = "_inputStr">Input string representing a document to be attached to a record.</param>
    /// <param name = "_fileName">File name for an attachment.</param>
    /// <returns>DocuRef representing attached document.</returns>
    public static DocuRef attachDocumentFromString(RefTableId _tableId, RefRecId _recId, DataAreaId _dataAreaId, str _inputStr, FileName _fileName)
    {
        using (System.IO.MemoryStream memoryStream = new System.IO.MemoryStream(System.Convert::FromBase64String(_inputStr)))
        {
            return DocumentManagement::attachFile(
                _tableId,
                _recId,
                _dataAreaId,
                DocuType::typeFile(),
                memoryStream,
                System.IO.Path::GetFileName(_fileName),
                System.Web.MimeMapping::GetMimeMapping(_fileName),
                System.IO.Path::GetFileNameWithoutExtension(_fileName));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates EInvoice document.
    /// </summary>
    /// <param name = "_record">Source record.</param>
    /// <remarks>Creates EInvoice document.</remarks>
    public static void createEInvoice(Common _record)
    {
        if (OnlineInvoicingHelper_IN::shouldCreateEInvoice(_record))
        {
            EInvoice_IN eInvoice;
            eInvoice.RefTableId = _record.TableId;
            eInvoice.RefRecId = _record.RecId;
            eInvoice.Status = EInvoiceStatus_IT::Created;

            List ewbList = OnlineInvoicingHelper_IN::getListOfEWayBillsToBeSentElectronically(_record);

            boolean res = true;

            if (ewbList.elements() > 1)
            {
                res = checkFailed("@Tax_INOnlineInvoicing:EWBCreationFailed");
            }
            else if (ewbList.elements() == 1)
            {
                ListEnumerator le = ewbList.getEnumerator();
                le.moveNext();
                TransitDocumentEWayBill_IN eWayBill = le.current();

                if (eWayBill.RecId)
                {
                    eInvoice.EWayBillStatus = EInvoiceEWayBillStatus_IN::Created;
                    eInvoice.EWayBillRecId = eWayBill.RecId;
                }
            }

            if (res)
            {
                eInvoice.doInsert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCreateEInvoice</Name>
				<Source><![CDATA[
    private static boolean shouldCreateEInvoice(Common _record)
    {
        boolean res = false;

        if (_record.TableId == tableNum(InventTransferJour))
        {
            res = true;
        }
        else
        {
            CustAccount custAccount = OnlineInvoicingHelper_IN::getCustAccount(_record);
            CustTable custTable = CustTable::find(custAccount);

            if (custTable.EInvoice)
            {
                if (_record.TableId == tableNum(CustomsShippingBillJour_IN))
                {
                    TaxInformationCustTable_IN taxInformationCustTable = TaxInformationCustTable_IN::findByCustTable(custAccount);
                    res = TaxGSTInvoiceHelper_IN::isGSTInvoice(_record) && taxInformationCustTable.IsForeign == NoYes::Yes;
                }
                else if (_record.TableId == tableNum(CustInvoiceJour))
                {
                    CustInvoiceJour custInvoiceJour = _record;

                    res = TaxGSTInvoiceHelper_IN::isGSTInvoice(_record) && custInvoiceJour.salesTable().CustomsExportOrder_IN == NoYes::No;
                }
                else if (_record.TableId == tableNum(ProjInvoiceJour))
                {
                    res = true;
                }
            }
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustAccount</Name>
				<Source><![CDATA[
    private static CustAccount getCustAccount(Common _record)
    {
        CustAccount custAccount;

        switch (_record.TableId)
        {
            case tableNum(CustInvoiceJour):
                CustInvoiceJour custInvoiceJour = _record;
                custAccount = custInvoiceJour.InvoiceAccount;
                break;
            case tableNum(ProjInvoiceJour):
                ProjInvoiceJour projInvoiceJour = _record;
                custAccount = projInvoiceJour.InvoiceAccount;
                break;
            case tableNum(CustomsShippingBillJour_IN):
                CustomsShippingBillJour_IN custShippingBillJour = _record;
                custAccount = custShippingBillJour.InvoiceAccount;
            default:
                break;
        }

        return custAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates EInvoice document.
    /// </summary>
    /// <param name = "_record">Source record.</param>
    /// <param name = "_skipAbort">The flag indicates skipping abort process.</param>
    /// <returns>true, if validation is successfull; otherwise false.</returns>
    /// <remarks>Validates source document for mandatory fields presence.</remarks>
    public static boolean validateEInvoice(Common _record, boolean _skipAbort = false)
    {
        boolean validationResult = true;

        if (EInvoice_IN::findByInvoice(_record.TableId, _record.RecId).RecId != 0)
        {
            EInvoiceParameters_IT eInvoiceParams = EInvoiceParameters_IT::find();
            if (eInvoiceParams.DoValidateEInvoice && eInvoiceParams.ERValidationFormatMapping)
            {
                setPrefix(OnlineInvoicingHelper_IN::getErrorMessage(_record));

                try
                {
                    validationResult = OnlineInvoicingHelper_IN::runER(_record, eInvoiceParams.ERValidationFormatMapping);
                }
                catch
                {
                    validationResult = false;
                }

                if (validationResult)
                {
                    List ewbList = OnlineInvoicingHelper_IN::getListOfEWayBillsToBeSentElectronically(_record);

                    if (ewbList.elements() > 1)
                    {
                        validationResult = checkFailed("@Tax_INOnlineInvoicing:EWBCreationFailed");
                    }
                }

                if (!validationResult && !_skipAbort)
                {
                    throw error("@Tax_INOnlineInvoicing:ValidationErrors");
                }
            }
        }

        return validationResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelEInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels the submitted EInvoice document.
    /// </summary>
    /// <param name = "_record">Source record.</param>
    public static void cancelEInvoice(Common _record)
    {
        ttsbegin;

        EInvoice_IN eInvoice = EInvoice_IN::findByInvoice(_record.TableId, _record.RecId, true);

        if (eInvoice && eInvoice.Status == EInvoiceStatus_IT::SendOK)
        {
            eInvoice.Status = EInvoiceStatus_IT::CancelRequest;
            eInvoice.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecIdFieldNum</Name>
				<Source><![CDATA[
    private static int getRecIdFieldNum(Common _record)
    {
        int recIdfieldNum;
        switch (_record.TableId)
        {
            case tableNum(CustInvoiceJour):
                recIdfieldNum = fieldNum(CustInvoiceJour, RecId);
                break;
            case tableNum(ProjInvoiceJour):
                recIdfieldNum = fieldNum(ProjInvoiceJour, RecId);
                break;
            case tableNum(InventTransferJour):
                recIdfieldNum = fieldNum(InventTransferJour, RecId);
                break;
            default:
                break;
        }

        return recIdfieldNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runER</Name>
				<Source><![CDATA[
    private static boolean runER(Common _record, ERFormatMappingId _erFormatMappingId)
    {
        str result;

        CreatedTransactionId createdTransactionId;
        UserConnection uc = new UserConnection();

        try 
        {
            createdTransactionId = OnlineInvoicingHelper_IN::createReportData(uc, _record.TableId, _record.RecId);

            ERModelDefinitionDatabaseContext context = new ERModelDefinitionDatabaseContext();
            context.addValue(tableNum(GSTInvoiceHeaderFooterTmp_IN), fieldNum(GSTInvoiceHeaderFooterTmp_IN, CreatedTransactionId), createdTransactionId);

            int recIdfieldNum = OnlineInvoicingHelper_IN::getRecIdFieldNum(_record);

            if (recIdfieldNum)
            {
                context.addValue(_record.TableId, recIdfieldNum, _record.RecId);
            }

            ERFileDestinationMemory fileDestination = new ERFileDestinationMemory();

            result = ERObjectsFactory::createFormatMappingRunByFormatMappingId(_erFormatMappingId)
                .withParameter(context)
                .withFileDestination(fileDestination)
                .run();
        }
        finally
        {
            if (createdTransactionId)
            {
                OnlineInvoicingHelper_IN::cleanUpReportData(uc, createdTransactionId);
            }
        }

        return result != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReportData</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static CreatedTransactionId createReportData(
        UserConnection _uc,
        TableId _tableId,
        RecId _recId)
    {
        ClassName controllerName;

        switch (_tableId)
        {
            case tableNum(CustInvoiceJour):
                CustInvoiceJour custInvoiceJour = CustInvoiceJour::findRecId(_recId);
                controllerName = custInvoiceJour.SalesId ?
                    classStr(SalesInvoiceController) : classStr(FreeTextInvoiceController);
                break;

            case tableNum(ProjInvoiceJour):
                controllerName = classStr(PSAProjAndContractInvoiceController);
                break;

            case tableNum(InventTransferJour):
                controllerName = classStr(TaxGSTSTOController_IN);
                break;

            case tableNum(CustomsShippingBillJour_IN):
                controllerName = classStr(TaxGSTExportInvoiceController_IN);
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcname()));
                break;
        }

        GSTInvoiceContract_IN dataContract = new GSTInvoiceContract_IN();
        dataContract.parmRecordId(_recId);
        dataContract.parmTableId(_tableId);
        dataContract.parmGSTInvoiceControllerName(controllerName);

        GSTInvoiceDPBase_IN dataProvider = new GSTInvoiceDPBase_IN();
        dataProvider.parmDataContract(dataContract);

        ttsbegin;
        _uc.ttsbegin();
        CreatedTransactionId createdTransactionId = appl.curTransactionId(true);

        dataProvider.parmUserConnection(_uc);
        dataProvider.parmIsOnlineInvoicing(true);
        dataProvider.processReport();
        _uc.ttscommit();
        ttscommit;

        return createdTransactionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUpReportData</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static void cleanUpReportData(UserConnection _uc, CreatedTransactionId _createdTransactionId)
    {
        GSTInvoiceHeaderFooterTmp_IN reportHeader;
        GSTInvoiceTmp_IN reportLines;

        reportHeader.setConnection(_uc);
        reportLines.setConnection(_uc);

        _uc.ttsbegin();
        delete_from reportLines
            where reportLines.CreatedTransactionId == _createdTransactionId;

        delete_from reportHeader
            where reportHeader.CreatedTransactionId == _createdTransactionId;
        _uc.ttscommit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshCallerForm</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static void refreshCallerForm(Args _args)
    {
        if (_args)
        {
            FormRun callerForm = _args.caller();

            if (callerForm)
            {
                FormDataSource callerDataSource = callerForm.dataSource();

                if (callerDataSource)
                {
                    callerDataSource.research(true);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getErrorMessage</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static str getErrorMessage(Common _record)
    {
        str errorMessage;

        switch (_record.TableId)
        {
            case tableNum(CustInvoiceJour):
                CustInvoiceJour custInvoiceJour = _record;
                errorMessage = strFmt("@Tax_INOnlineInvoicing:CustomerInvoiceError", custInvoiceJour.InvoiceId, custInvoiceJour.InvoiceDate);
                break;

            case tableNum(ProjInvoiceJour):
                ProjInvoiceJour projInvoiceJour = _record;
                errorMessage =strFmt("@Tax_INOnlineInvoicing:ProjectInvoiceError", projInvoiceJour.ProjInvoiceId, projInvoiceJour.InvoiceDate);
                break;

            case tableNum(InventTransferJour):
                InventTransferJour inventTransferJour = _record;
                errorMessage = strFmt("@Tax_INOnlineInvoicing:TransferOrderError",  inventTransferJour.TransferId, inventTransferJour.VoucherId, inventTransferJour.TransDate);
                break;

            case tableNum(CustomsShippingBillJour_IN):
                CustomsShippingBillJour_IN customsShippingBillJour = _record;
                errorMessage = strFmt("@Tax_INOnlineInvoicing:ExportOrderError",  customsShippingBillJour.InvoiceId, customsShippingBillJour.InvoiceDate);
                break;
        }

        return errorMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableSupportsEInvoicing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the source table supports EInvoicing.
    /// </summary>
    /// <param name = "_tableId">TableId of a record.</param>
    /// <returns>True, if the source table supports EInvoicing; otherwise, false.</returns>
    public static boolean tableSupportsEInvoicing(RefTableId _tableId)
    {
        return _tableId == tableNum(CustInvoiceJour)
            || _tableId == tableNum(ProjInvoiceJour)
            || _tableId == tableNum(InventTransferJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getListOfEWayBills</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of E-Way bills associated with the transaction.
    /// </summary>
    /// <param name = "_trans">Source transaction.</param>
    /// <returns>The list of E-Way bills associated with the transaction.</returns>
    public static List getListOfEWayBills(Common _trans)
    {
        TransitDocumentEWayBill_IN eWayBillInward;
        TransitDocumentEWayBill_IN eWayBillOutward;
        eWayBillInward.Direction = TaxGSTEWayBillBasis_IN::Inward;
        eWayBillOutward.Direction = TaxGSTEWayBillBasis_IN::Outward;

        TransitDocumentManager_IN transitDocumentManager = TransitDocumentManager_IN::newManager();
        List list = transitDocumentManager.findTransitDocuments(_trans, eWayBillInward);
        list.appendList(transitDocumentManager.findTransitDocuments(_trans, eWayBillOutward));

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getListOfEWayBillsToBeSentElectronically</Name>
				<Source><![CDATA[
    private static List getListOfEWayBillsToBeSentElectronically(Common _trans)
    {
        ListEnumerator le = OnlineInvoicingHelper_IN::getListOfEWayBills(_trans).getEnumerator();

        List result = new List(Types::Record);

        while (le.moveNext())
        {
            TransitDocumentEWayBill_IN eWayBill = le.current();

            if (TaxGSTEwayBillTypes_IN::find(eWayBill.EWayBillTypes).CanBeSentElectronically)
            {
                result.addEnd(eWayBill);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDynamicQRCodeData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the QRCode field of the <c>GSTInvoiceHeaderFooterTmp_IN</c> table.
    /// </summary>
    /// <param name = "_gstInvoiceHeaderFooter">The cursor of the <c>GSTInvoiceHeaderFooterTmp_IN</c> table.</param>
    /// <param name = "_record">Source record.</param>
    /// <param name = "_uc">The user connection instance.</param>
    internal static void populateDynamicQRCodeData(
        GSTInvoiceHeaderFooterTmp_IN _gstInvoiceHeaderFooter,
        Common _record,
        UserConnection _uc)
    {
        if (FeatureStateProvider::isFeatureEnabled(DynamicQRCodeFeature_IN::instance()))
        {
            str dynamicQRCodeData = OnlineInvoicingHelper_IN::generateDynamicQRCodeData(_gstInvoiceHeaderFooter.RecId, _record, _uc);

            if (dynamicQRCodeData)
            {
                _gstInvoiceHeaderFooter.QRCode = OnlineInvoicingHelper_IN::generateQRCodeFromStr(dynamicQRCodeData);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateDynamicQRCodeData</Name>
				<Source><![CDATA[
    private static str generateDynamicQRCodeData(RefRecId _refRecId, Common _record, UserConnection _uc)
    {
        str res;

        ERFormatMappingId formatMappingId = SalesParameters::find().ERFormatMappingDynamicQRCode_IN;

        if (formatMappingId)
        {
            GSTInvoiceHeaderFooterTmp_IN gstInvoiceHeaderFooter;
            gstInvoiceHeaderFooter.setConnection(_uc);

            select gstInvoiceHeaderFooter
                where gstInvoiceHeaderFooter.RecId == _refRecId;

            GSTInvoiceHeaderFooterTmp_IN gstInvoiceHeaderFooterTmp;
            gstInvoiceHeaderFooterTmp.setTempDB();
            gstInvoiceHeaderFooterTmp.data(gstInvoiceHeaderFooter);
            gstInvoiceHeaderFooterTmp.insert();

            GSTInvoiceTmp_IN gstInvoice;
            gstInvoice.setConnection(_uc);

            GSTInvoiceTmp_IN gstInvoiceTmp;
            gstInvoiceTmp.setTempDB();

            while select gstInvoice
                where gstInvoice.CreatedTransactionId == gstInvoiceHeaderFooter.CreatedTransactionId
            {
                gstInvoiceTmp.data(gstInvoice);
                gstInvoiceTmp.insert();
            }

            ERModelDefinitionDatabaseContext context = new ERModelDefinitionDatabaseContext();
            context.addTemporaryTable(gstInvoiceHeaderFooterTmp);
            context.addTemporaryTable(gstInvoiceTmp);

            int recIdfieldNum = OnlineInvoicingHelper_IN::getRecIdFieldNum(_record);

            if (recIdfieldNum)
            {
                context.addValue(_record.TableId, recIdfieldNum, _record.RecId);
            }

            ERFileDestinationMemory fileDestination = new ERFileDestinationMemory();

            ERObjectsFactory::createFormatMappingRunByFormatMappingId(formatMappingId)
                .withParameter(context)
                .withFileDestination(fileDestination)
                .run();

            res = fileDestination.GetContentAsString();
        }
        else
        {
            warning("@TaxGST:DynamicQRCode_NoFormatWarning");
        }

        return res;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>