<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PriceConvert_AllocateMarkup</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PriceConvert_AllocateMarkup extends PriceConvertDecorator
{
    PriceUnit   originalPriceUnit;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmMarkup</Name>
				<Source><![CDATA[
    public InventPriceMarkup parmMarkup()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMarkupSecCur_RU</Name>
				<Source><![CDATA[
    public InventPriceMarkup parmMarkupSecCur_RU()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrice</Name>
				<Source><![CDATA[
    public Price parmPrice()
    {
        PriceUnit   priceUnit = decoratedPriceConvert.parmPriceUnit();
        PriceQty    priceQty  = decoratedPriceConvert.parmPriceQty();
        if (!priceUnit)
            priceUnit = 1;

        if (!priceQty)
            priceQty = 1;

        return decoratedPriceConvert.parmPrice() + decoratedPriceConvert.parmMarkup() * priceUnit / priceQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceSecCur_RU</Name>
				<Source><![CDATA[
    public Price parmPriceSecCur_RU()
    {
        PriceUnit   priceUnit = decoratedPriceConvert.parmPriceUnit();
        PriceQty    priceQty  = decoratedPriceConvert.parmPriceQty();
        if (!priceUnit)
            priceUnit = 1;

        if (!priceQty)
            priceQty = 1;

        return decoratedPriceConvert.parmPriceSecCur_RU() + decoratedPriceConvert.parmMarkupSecCur_RU() * priceUnit / priceQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static PriceConvert_AllocateMarkup construct(PriceConvert _decoratedPriceConvert)
    {
        return new PriceConvert_AllocateMarkup(_decoratedPriceConvert);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newAllocateMarkup</Name>
				<Source><![CDATA[
    public static PriceConvert_AllocateMarkup newAllocateMarkup(PriceConvert _decoratedPriceConvert)
    {
        PriceConvert_AllocateMarkup priceConvert_AllocateMarkup;
        priceConvert_AllocateMarkup = PriceConvert_AllocateMarkup::construct(_decoratedPriceConvert);

        return priceConvert_AllocateMarkup;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>