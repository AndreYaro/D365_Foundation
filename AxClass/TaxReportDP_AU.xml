<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportDP_AU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxReportDP_AU</c> class is the report data provider (RDP) class for the associated SSRS
///    <c>TaxReport_AU</c> reports.
/// </summary>
[
    SRSReportParameterAttribute(classStr(TaxReportContract_AU))
]
class TaxReportDP_AU extends SRSReportDataProviderBase
{
    RecId    tmpTableDataRecId;
    TaxReportTmp_AU taxReportTmp_AU;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTaxReportTmp_AU</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the data from the <c>TaxReportTmp_AU</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>TaxReportTmp_AU</c> table.
    /// </returns>
    [SRSReportDataSetAttribute('TaxReportDS_AU')]
    public TaxReportTmp_AU getTaxReportTmp_AU()
    {
        select * from taxReportTmp_AU;
        return taxReportTmp_AU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the SSRS report business logic.
    /// </summary>
    /// <remarks>
    ///    Provides the ability to write the report business logic.This method will be called by SSRS at
    ///    runtime.The method should compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        SRSReportRunPermission r;
        TaxReportContract_AU contract = this.parmDataContract() as TaxReportContract_AU;

        r = new SRSReportRunPermission();
        r.assert();

        tmpTableDataRecId = contract.parmSrsTmpTblMarshallerContract().parmTmpTableDataRecId();
        taxReportTmp_AU = SRSTmpTblMarshaller::getTmpTbl(tmpTableDataRecId);
        //SRSTmpTblMarshaller::deleteTmpTblData(tmpTableDataRecId);
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
