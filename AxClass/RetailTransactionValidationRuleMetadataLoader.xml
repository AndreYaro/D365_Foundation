<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionValidationRuleMetadataLoader</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>RetailTransactionValidationRuleMetadataLoader</c> class uses reflection to find all rules available in the environment.
/// </summary>
internal final class RetailTransactionValidationRuleMetadataLoader
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getRulesMetadata</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of all the rules available in the environment.
    /// </summary>
    /// <returns>A list of all the rules available in the environment.</returns>
    /// <remarks>
    /// This API returns all rules, even if they're disabled.
    /// </remarks>
    public static List getRulesMetadata()
    {
        const str ClassNameMethodNameFormat = '%1.%2';

        SysDictClass    baseClass   = new SysDictClass(className2Id(classStr(RetailTransactionValidationBase)));
        ListEnumerator  enumerator  = baseClass.extendedBy().getEnumerator();

        List listOfRules = new List(Types::Class);
        Set setOfMethods = new Set(Types::String);

        // Go through all the classes that inherit from RetailTransactionValidationBase looking for validation rules
        while (enumerator.moveNext())
        {
            ClassId     childClass      = enumerator.current();
            DictClass   validationClass = new DictClass(childClass);

            for (int i = 1; i <= validationClass.objectMethodCnt(); i++)
            {
                DictMethod  method          = validationClass.objectMethodObject(i);

                str classNameMethodNamePair = strFmt(ClassNameMethodNameFormat, validationClass.name(), method.name());

                if (setOfMethods.in(classNameMethodNamePair))
                {
                    // If the same class/method pair shows up twice, only consider the first one and ignore the rest.
                    eventSource.EventWriteTransactionValidationDuplicatedClassMethodPair(validationClass.name(), method.name());
                    continue;
                }
                
                RetailTransactionValidationAttribute transactionValidationAttribute = method.getAttribute(classStr(RetailTransactionValidationAttribute)) as RetailTransactionValidationAttribute;
                
                if (transactionValidationAttribute)
                {
                    RetailTransactionValidationRuleType ruleType = transactionValidationAttribute.getRuleType();

                    boolean isValid = false;
                    int expectedParameterCount = 0, actualParameterCount = 0;

                    if (ruleType == RetailTransactionValidationRuleType::TransactionLevel)
                    {
                        [isValid, expectedParameterCount, actualParameterCount] = RetailTransactionValidationRuleMetadataLoader::validateTransactionLevelRule(validationClass, method);
                    }
                    else if (ruleType == RetailTransactionValidationRuleType::LineLevel)
                    {
                        [isValid, expectedParameterCount, actualParameterCount] = RetailTransactionValidationRuleMetadataLoader::validateLineLevelRule(validationClass, method);
                    }

                    if (!isValid)
                    {
                        eventSource.EventWriteTransactionValidationUnexpectedRuleMethodSignature(classStr(RetailTransactionValidationAttribute), validationClass.name(), method.name(), expectedParameterCount, actualParameterCount);
                        continue;
                    }

                    RetailTransactionValidationApplicableToAllTypesAttribute applicableToAllAttribute = method.getAttribute(classStr(RetailTransactionValidationApplicableToAllTypesAttribute)) as RetailTransactionValidationApplicableToAllTypesAttribute;
                    Array notApplicableToAttributeArray = method.getAttributes(classStr(RetailTransactionValidationNotApplicableToAttribute));

                    isValid = RetailTransactionValidationRuleMetadataLoader::validateApplicability(validationClass, method, applicableToAllAttribute, notApplicableToAttributeArray);

                    if (!isValid)
                    {
                        // Nothing being logged to ETW here because it's being logged by 'validateApplicability'.
                        continue;
                    }

                    Set applicableToTypes = RetailTransactionValidationRuleMetadataLoader::getApplicableToTypes(applicableToAllAttribute, notApplicableToAttributeArray);

                    RetailTransactionValidationRuleMetadata metadata = RetailTransactionValidationRuleMetadataLoader::createRuleMetadata(transactionValidationAttribute, validationClass, method, ruleType, applicableToTypes);
                    
                    listOfRules.addEnd(metadata);
                    setOfMethods.add(classNameMethodNamePair);
                }
            }
        }

        return listOfRules;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRulesMapNoCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a Map that has ClassId as the key and a List of <c>RetailTransactionValidationRuleMetadata</c> as value.
    /// </summary>
    /// <returns>A Map that has ClassId as the key and a List of <c>RetailTransactionValidationRuleMetadata</c> as value.</returns>
    /// <remarks>
    /// Used for testing purposes only.
    /// </remarks>
    internal static Map getRulesMapNoCache()
    {
        Map rulesMap = new Map(Types::Integer, Types::Class);

        void insertOrUpdateToMap(RetailTransactionValidationRuleMetadata _metadata)
        {
            List metadataList;
            ClassId classId = _metadata.getClassId();

            if (rulesMap.exists(classId))
            {
                metadataList = rulesMap.lookup(classId);
            }
            else
            {
                metadataList = new List(Types::Class);
            }

            metadataList.addEnd(_metadata);

            rulesMap.insert(classId, metadataList);
        }

        List listOfRulesForClass = new List(Types::Class);

        List allRules = RetailTransactionValidationRuleMetadataLoader::getRulesMetadata();
        ListEnumerator allRulesEnumerator = allRules.getEnumerator();

        while (allRulesEnumerator.moveNext())
        {
            RetailTransactionValidationRuleMetadata metadata = allRulesEnumerator.current();

            insertOrUpdateToMap(metadata);
        }

        return rulesMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRuleMetadata</Name>
				<Source><![CDATA[
    private static RetailTransactionValidationRuleMetadata createRuleMetadata(RetailTransactionValidationAttribute _validationAttribute, DictClass _validationClass, DictMethod _method, RetailTransactionValidationRuleType _ruleType, Set _applicableToType)
    {
        var metadata = RetailTransactionValidationRuleMetadata::construct(
                        _validationClass.id(),
                        _method.name(),
                        _validationAttribute.getDescription(),
                        _ruleType,
                        !RetailTransactionDisabledValidationRule::isRuleDisabled(_validationClass.id(), _method.name()),
                        _applicableToType);

        return metadata;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLineLevelRule</Name>
				<Source><![CDATA[
    private static container validateLineLevelRule(DictClass _validationClass, DictMethod _method)
    {
        const int expectedParameterCount = 1;
        
        int actualParameterCount = _method.parameterCnt();

        boolean isValid = true;

        // line rules take only 1 argument and the type must be ItemInfo
        if (actualParameterCount != expectedParameterCount)
        {
            isValid = false;
        }

        if (_method.parameterTypeName(expectedParameterCount) != 'Microsoft.Dynamics.Commerce.Runtime.Services.CustomerOrder.ItemInfo')
        {
            isValid = false;
        }

        return [isValid, expectedParameterCount, actualParameterCount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTransactionLevelRule</Name>
				<Source><![CDATA[
    private static container validateTransactionLevelRule(DictClass _validationClass, DictMethod _method)
    {
        const int expectedParameterCount = 0;

        int actualParameterCount = _method.parameterCnt();

        // transaction level rules take no parameter
        boolean isValid = actualParameterCount == expectedParameterCount;

        return [isValid, expectedParameterCount, actualParameterCount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateApplicability</Name>
				<Source><![CDATA[
    private static boolean validateApplicability(DictClass _validationClass, DictMethod _method, RetailTransactionValidationApplicableToAllTypesAttribute _applicableToAllAttribute, Array _notApplicableToAttributeArray)
    {
        if (_applicableToAllAttribute != null && (_notApplicableToAttributeArray != null && _notApplicableToAttributeArray.lastIndex() != 0))
        {
            // Can't combine [RetailTransactionValidationApplicableToAllTypes] & [RetailTransactionValidationNotApplicableTo]
            eventSource.EventWriteTransactionValidationUnexpectedApplicabilityDeclaration(_validationClass.name(), _method.name());

            return false;
        }

        if (_applicableToAllAttribute == null && (_notApplicableToAttributeArray == null || _notApplicableToAttributeArray.lastIndex() == 0))
        {
            // Neither [RetailTransactionValidationApplicableToAllTypes] nor [RetailTransactionValidationNotApplicableTo] were specified
            eventSource.EventWriteTransactionValidationApplicabilityNotSpecified(_validationClass.name(), _method.name());

            return false;
        }

        // Either [RetailTransactionValidationApplicableToAllTypes] or a combination of [RetailTransactionValidationNotApplicableTo] are present.
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getApplicableToTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the types for which the rule is applicable to.
    /// </summary>
    /// <param name = "_applicableToAllAttribute">An instance of the <c>RetailTransactionValidationApplicableToAllTypesAttribute</c>.</param>
    /// <param name = "_notApplicableToAttributeArray">An array of <c>RetailTransactionValidationNotApplicableToAttribute</c>.</param>
    /// <returns>The set of types for which the rule is applicable to.</returns>
    /// <remarks>This method assumes that its input has already been validated by <c>validateApplicability</c>, if it is not, the behavior for this method is undefined.</remarks>
    private static Set getApplicableToTypes(RetailTransactionValidationApplicableToAllTypesAttribute _applicableToAllAttribute, Array _notApplicableToAttributeArray)
    {
        Set supportedTypes = RetailTransactionValidationRuleMetadata::getAllSupportedTransactionTypes();

        if (_applicableToAllAttribute)
        {
            return supportedTypes;
        }
        else
        {
            for (int i = 1; i <= _notApplicableToAttributeArray.lastIndex(); i++)
            {
                RetailTransactionValidationNotApplicableToAttribute notApplicableToAttribute = _notApplicableToAttributeArray.value(i) as RetailTransactionValidationNotApplicableToAttribute;
                RetailTransactionType transactionTypeToExclude = notApplicableToAttribute.getTransactionType();

                supportedTypes.remove(transactionTypeToExclude);
            }

            return supportedTypes;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>