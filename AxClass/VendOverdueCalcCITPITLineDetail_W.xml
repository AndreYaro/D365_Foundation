<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendOverdueCalcCITPITLineDetail_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>VendOverdueCalcCITPITLineDetail_W</c> used to create vendor overdue journal lines details.
/// Details are in the context of the account number and the selected analytics (dimension) for distribution
/// </summary>
class VendOverdueCalcCITPITLineDetail_W
{
    RecId                           sourceRecId;
    VendOverdueCITPITJournalId_W    sourceJournalId;

    RecId                           overdueDimensionAttribute;

    Query                           queryGeneralJournalTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQueryOverdueLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method creates the general query by overdue journal lines, on which will build  line details
    /// </summary>
    /// <returns>
    /// Query with ranges on journal overdue or journal overdue lines
    /// </returns>
    protected Query buildQueryOverdueLine()
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbds;
        QueryBuildRange         qbr;

        qbds    = query.addDataSource(tableNum(VendOverdueCITPITTurnJournalLine_W));
        qbds.addSortField(fieldnum(VendOverdueCITPITTurnJournalLine_W, DueDate));
        if (sourceRecId)
        {
            qbr = qbds.addRange(fieldNum(VendOverdueCITPITTurnJournalLine_W, RecId));
            qbr.value(queryValue(sourceRecId));
        }
        if (sourceJournalId)
        {
            qbr = qbds.addRange(fieldNum(VendOverdueCITPITTurnJournalLine_W, JournalId));
            qbr.value(queryValue(sourceJournalId));
        }

        qbds    = qbds.addDataSource(tableNum(VendTrans));
        qbds.relations(true);
        qbds.addSelectionField(fieldNum(VendTrans, AmountCur));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method creates a query to select the amounts for general ledger transactions
    /// </summary>
    /// <param name="_overdueTurnJournalLine">
    /// The <c>VendOverdueCITPITTurnJournalLine_W</c> record which adds ranges to a query
    /// </param>
    /// <returns>
    /// Returns ready query on transactions
    /// </returns>
    protected Query buildQueryTrans(
        VendOverdueCITPITTurnJournalLine_W _overdueTurnJournalLine)
    {
        QueryBuildDataSource    qbdsGeneralJournalEntry;
        QueryBuildDataSource    qbdsSubledgerGeneralJournalEntry;
        QueryBuildDataSource    qbdsDimensionMainAccount;
        QueryBuildDataSource    qbdsDimensionOverdue;
        QueryBuildDataSource    qbdsVendTrans;
        QueryBuildRange         qbr;

        if (!queryGeneralJournalTrans)
        {
            queryGeneralJournalTrans    = new Query();
            qbdsGeneralJournalEntry     = queryGeneralJournalTrans.addDataSource(tableNum(GeneralJournalAccountEntry));
            qbdsGeneralJournalEntry.addRange(fieldNum(GeneralJournalAccountEntry, PostingType)).value(SysQuery::valueNot(LedgerPostingType::VendBalance));

            qbdsDimensionMainAccount    = qbdsGeneralJournalEntry.addDataSource(tableNum(DimensionAttributeLevelValueView));
            qbdsDimensionMainAccount.addLink(fieldNum(GeneralJournalAccountEntry, LedgerDimension), fieldNum(DimensionAttributeLevelValueView, ValueCombinationRecId));
            qbdsDimensionMainAccount.addRange(fieldNum(DimensionAttributeLevelValueView, DimensionAttribute)).value(queryValue(DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)));
            qbdsDimensionMainAccount.joinMode(JoinMode::OuterJoin);
            qbdsDimensionMainAccount.fetchMode(QueryFetchMode::One2One);

            qbdsDimensionOverdue        = qbdsGeneralJournalEntry.addDataSource(tableNum(DimensionAttributeLevelValueView));
            qbdsDimensionOverdue.addLink(fieldNum(GeneralJournalAccountEntry, LedgerDimension), fieldNum(DimensionAttributeLevelValueView, ValueCombinationRecId));
            qbdsDimensionOverdue.addRange(fieldNum(DimensionAttributeLevelValueView, DimensionAttribute)).value(queryValue(overdueDimensionAttribute));
            qbdsDimensionOverdue.joinMode(JoinMode::OuterJoin);
            qbdsDimensionOverdue.fetchMode(QueryFetchMode::One2One);

            qbdsSubledgerGeneralJournalEntry    = qbdsGeneralJournalEntry.addDataSource(tableNum(SubledgerVoucherGeneralJournalEntry));
            qbdsSubledgerGeneralJournalEntry.addLink(fieldNum(GeneralJournalAccountEntry, GeneralJournalEntry), fieldNum(SubledgerVoucherGeneralJournalEntry, GeneralJournalEntry));
            qbdsSubledgerGeneralJournalEntry.joinMode(JoinMode::ExistsJoin);
            qbdsSubledgerGeneralJournalEntry.fetchMode(QueryFetchMode::One2One);

            qbdsVendTrans           = qbdsSubledgerGeneralJournalEntry.addDataSource(tableNum(VendTrans));
            qbdsVendTrans.addLink(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher), fieldNum(VendTrans, Voucher));
            qbdsVendTrans.addLink(fieldNum(SubledgerVoucherGeneralJournalEntry, AccountingDate), fieldNum(VendTrans, TransDate));
            qbdsVendTrans.joinMode(JoinMode::ExistsJoin);
        }

        qbdsVendTrans   = queryGeneralJournalTrans.dataSourceTable(tableNum(VendTrans));
        qbr             = findOrCreateRange_W(qbdsVendTrans, fieldNum(VendTrans, RecId));
        qbr.value(queryValue(_overdueTurnJournalLine.TransRefRecId));

        return queryGeneralJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineDetailForLastLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method calculates the distribution by dimensions and account numbers on the last line of the overdue payment by schedule for due date.
    /// </summary>
    /// <param name="_overdueTurnJournalLine">
    /// The <c>VendOverdueCITPITTurnJournalLine_W</c> record for which the distribution is.
    /// </param>
    /// <remarks>
    /// The method is called only if the document was not paid, otherwise align amounts by dimensions does not make sense.
    /// </remarks>
    protected void calcLineDetailForLastLine(VendOverdueCITPITTurnJournalLine_W  _overdueTurnJournalLine)
    {
        VendOverdueCITPITJournalLineDetail_W    overdueJournalLineDetail;
        VendOverdueCITPITJournalLineDetail_W    overdueJournalLineDetailTotal;
        VendOverdueCITPITTurnJournalLine_W      overdueTurnJournalLineCurrent;
        VendOverdueCITPITReportLineTmp_W        overdueReportLineTmp;
        Query                                   query               = this.buildQueryTrans(_overdueTurnJournalLine);
        Map                                     totalLineDetailsMap = new Map(Types::Int64, Types::Container);
        container                               totalLineDetailsAmounts;
        int                                     sign;

        while select sum(OverdueAmountCur), sum(OverdueAmountMST) from overdueJournalLineDetailTotal
            group by LedgerDimension
            exists join overdueTurnJournalLineCurrent
                where   overdueTurnJournalLineCurrent.RecId          == overdueJournalLineDetailTotal.LineRefRecId
                   &&   overdueTurnJournalLineCurrent.TransRefRecId  == _overdueTurnJournalLine.TransRefRecId
                   &&   (!_overdueTurnJournalLine.Exclude || (overdueTurnJournalLineCurrent.JournalId == _overdueTurnJournalLine.JournalId))
        {
            totalLineDetailsMap.insert(overdueJournalLineDetailTotal.LedgerDimension,
                                        [overdueJournalLineDetailTotal.OverdueAmountCur,
                                            overdueJournalLineDetailTotal.OverdueAmountMST]);
        }

        overdueReportLineTmp    = this.createTmpDataFromQuery(query);

        RecordInsertList recordInsertList = new RecordInsertList(overdueJournalLineDetail.TableId);

        while select sum(OverdueAmountCur), sum(OverdueAmountMST) from overdueReportLineTmp
            group by LedgerDimension
        {
            overdueJournalLineDetail.clear();
            overdueJournalLineDetail.initFromOverdueCITPITJournalLine(_overdueTurnJournalLine);
            overdueJournalLineDetail.LedgerDimension    = overdueReportLineTmp.LedgerDimension;
            overdueJournalLineDetail.LedgerAccount      = LedgerDimensionFacade::getDisplayValueForLedgerDimension(overdueJournalLineDetail.LedgerDimension);

            if (totalLineDetailsMap.exists(overdueReportLineTmp.LedgerDimension))
            {
                totalLineDetailsAmounts = totalLineDetailsMap.lookup(overdueReportLineTmp.LedgerDimension);

                sign = _overdueTurnJournalLine.overdueAmountCurDisplay() || _overdueTurnJournalLine.overdueAmountMSTDisplay() ? -1 : 1;
                overdueJournalLineDetail.OverdueAmountCur = sign * conPeek(totalLineDetailsAmounts, 1) - overdueReportLineTmp.OverdueAmountCur;
                overdueJournalLineDetail.OverdueAmountMST = sign * conPeek(totalLineDetailsAmounts, 2) - overdueReportLineTmp.OverdueAmountMST;
            }
            else
            {
                overdueJournalLineDetail.OverdueAmountCur = -overdueReportLineTmp.OverdueAmountCur;
                overdueJournalLineDetail.OverdueAmountMST = -overdueReportLineTmp.OverdueAmountMST;
            }

            recordInsertList.add(overdueJournalLineDetail);
        }

        recordInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineDetailsByTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method calculates the distribution by dimensions and account numbers by schedule for due date.
    /// </summary>
    /// <param name="_overdueTurnJournalLine">
    /// The <c>VendOverdueCITPITTurnJournalLine_W</c> record for which the distribution is.
    /// </param>
    /// <remarks>
    /// The method allocates the overdue amounts is proportional to the amount of wiring in the total amount of debts on the document.
    /// </remarks>
    protected void calcLineDetailsByTrans(VendOverdueCITPITTurnJournalLine_W  _overdueTurnJournalLine)
    {
        VendOverdueCITPITJournalLineDetail_W    overdueJournalLineDetail;
        VendOverdueCITPITReportLineTmp_W        overdueReportLineTmp;
        int                                     totalTrans;
        int                                     countTrans;
        Amount                                  totalLineAmountMST;
        real                                    coefMST;
        real                                    totalTransAmountMST;

        Query                                   query   = this.buildQueryTrans(_overdueTurnJournalLine);

        overdueReportLineTmp    = this.createTmpDataFromQuery(query);

        select count(RecId), sum(OverdueAmountMST) from overdueReportLineTmp;

        totalTransAmountMST   = overdueReportLineTmp.OverdueAmountMST;
        totalTrans            = int642int(overdueReportLineTmp.RecId);

        RecordInsertList recordInsertList = new RecordInsertList(overdueJournalLineDetail.TableId);

        while select sum(OverdueAmountMST) from overdueReportLineTmp
            group by LedgerDimension
        {
            countTrans++;
            coefMST = overdueReportLineTmp.OverdueAmountMST / totalTransAmountMST;

            overdueJournalLineDetail.clear();
            overdueJournalLineDetail.initFromOverdueCITPITJournalLine(_overdueTurnJournalLine);
            overdueJournalLineDetail.LedgerDimension    = overdueReportLineTmp.LedgerDimension;
            overdueJournalLineDetail.LedgerAccount      = LedgerDimensionFacade::getDisplayValueForLedgerDimension(overdueJournalLineDetail.LedgerDimension);

            if (countTrans != totalTrans)
            {
                overdueJournalLineDetail.OverdueAmountMST    = CurrencyExchangeHelper::amount(coefMST * _overdueTurnJournalLine.OverdueAmountMST);

                totalLineAmountMST  += overdueJournalLineDetail.OverdueAmountMST;
            }
            else
            {
                overdueJournalLineDetail.OverdueAmountMST    = _overdueTurnJournalLine.OverdueAmountMST - totalLineAmountMST;
            }

            recordInsertList.add(overdueJournalLineDetail);
        }

        recordInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpDataFromQuery</Name>
				<Source><![CDATA[
    private VendOverdueCITPITReportLineTmp_W createTmpDataFromQuery(Query   _query)
    {
        VendOverdueCITPITReportLineTmp_W        overdueReportLineTmp;
        GeneralJournalAccountEntry              generalJournalAccountEntry;
        DimensionAttributeLevelValueView        mainDimensionAttributeView, overdueDimensionAttributeView;
        DimensionAttributeValueSetStorage       dimensionAttributeValueSetStorage;
        RecId                                   defaultDimension;
        LedgerDimensionAccount                  ledgerDimension;
        AmountCur                               discountAmountCur, sumDiscountAmountCur, sumPurchReceiptAmountCur, purchReceiptAmountCur;
        AmountMST                               discountAmountMST, sumDiscountAmountMST, sumPurchReceiptAmountMST, purchReceiptAmountMST;
        int                                     totalPurchReceiptTrans;
        int                                     countTrans;

        QueryRun                                queryRun = new QueryRun(_query);

        while (queryRun.next())
        {
            generalJournalAccountEntry      = queryRun.get(tableNum(GeneralJournalAccountEntry));
            mainDimensionAttributeView      = queryRun.get(tableNum(DimensionAttributeLevelValueView), 1);
            overdueDimensionAttributeView   = queryRun.get(tableNum(DimensionAttributeLevelValueView), 2);

            switch (generalJournalAccountEntry.PostingType)
            {
                case LedgerPostingType::VendInvoiceDisc:
                    sumDiscountAmountCur   += generalJournalAccountEntry.TransactionCurrencyAmount;
                    sumDiscountAmountMST   += generalJournalAccountEntry.AccountingCurrencyAmount;
                    continue;
                case LedgerPostingType::PurchConsump:
                    sumPurchReceiptAmountCur    += generalJournalAccountEntry.TransactionCurrencyAmount;
                    sumPurchReceiptAmountMST    += generalJournalAccountEntry.AccountingCurrencyAmount;
                    totalPurchReceiptTrans ++;
                break;
            }

            overdueReportLineTmp.clear();
            overdueReportLineTmp.OverdueAmountCur   = generalJournalAccountEntry.TransactionCurrencyAmount;
            overdueReportLineTmp.OverdueAmountMST   = generalJournalAccountEntry.AccountingCurrencyAmount;

            overdueReportLineTmp.CurrencyCode       = generalJournalAccountEntry.TransactionCurrencyCode;

            if (overdueDimensionAttributeView.DimensionAttribute)
            {
                dimensionAttributeValueSetStorage = new DimensionAttributeValueSetStorage();
                dimensionAttributeValueSetStorage.addItem(DimensionAttributeValue::findByDimensionAttributeAndEntityInst(overdueDimensionAttributeView.DimensionAttribute,
                                                                                                                            overdueDimensionAttributeView.EntityInstance));
                defaultDimension = dimensionAttributeValueSetStorage.save();
            }

            ledgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(LedgerDefaultAccountHelper::getDefaultAccountFromMainAccountRecId(mainDimensionAttributeView.EntityInstance), defaultDimension);

            overdueReportLineTmp.LedgerDimension    = ledgerDimension;
            overdueReportLineTmp.PostingType        = generalJournalAccountEntry.PostingType;
            overdueReportLineTmp.insert();
        }

        if (sumDiscountAmountCur || sumDiscountAmountMST)
        {
            countTrans ++;
            discountAmountCur   = sumDiscountAmountCur;
            discountAmountMST   = sumDiscountAmountMST;
            while select forupdate overdueReportLineTmp
                where   overdueReportLineTmp.PostingType   == LedgerPostingType::PurchConsump
            {
                if (countTrans  == totalPurchReceiptTrans)
                {
                    overdueReportLineTmp.OverdueAmountCur   += discountAmountCur;
                    overdueReportLineTmp.OverdueAmountMST   += discountAmountMST;
                }
                else
                {
                    purchReceiptAmountCur = CurrencyExchangeHelper::amount(overdueReportLineTmp.OverdueAmountCur / sumPurchReceiptAmountCur * sumDiscountAmountCur, overdueReportLineTmp.CurrencyCode);
                    purchReceiptAmountMST = CurrencyExchangeHelper::amount(overdueReportLineTmp.OverdueAmountMST / sumPurchReceiptAmountMST * sumDiscountAmountMST);

                    overdueReportLineTmp.OverdueAmountCur += purchReceiptAmountCur;
                    overdueReportLineTmp.OverdueAmountMST += purchReceiptAmountMST;

                    discountAmountCur   -= purchReceiptAmountCur;
                    discountAmountMST   -= purchReceiptAmountMST;
                }

                overdueReportLineTmp.update();
            }
        }

        return overdueReportLineTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLastOverduePeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method checks whether the current <c>VendOverdueCITPITTurnJournalLine_W</c> record of the last payment overdue scheduled due date or not.
    /// </summary>
    /// <param name="_amountCur">
    /// The amount in transaction currency from <c>VendTrans</c> record, is equal total amount by document for distribution
    /// </param>
    /// <param name="_overdueTurnJournalLine">
    /// The current <c>VendOverdueCITPITTurnJournalLine_W</c> record which checks whether it refers to the last late payment or not
    /// </param>
    /// <returns>
    /// Returns true if the record refers to the last late payment; otherwise not.
    /// </returns>
    /// <remarks>
    /// The result of this method affects the choice of the method, which will be distributed overdue amount.
    /// </remarks>
    protected boolean isLastOverduePeriod(AmountCur  _amountCur, VendOverdueCITPITTurnJournalLine_W  _overdueTurnJournalLine)
    {
        VendOverdueCITPITDebtJournalLine_W     overdueDebtJournalLine;

        // to improve the performance of operation
        if (_amountCur == _overdueTurnJournalLine.OverdueAmountCur) // only one dueDate for invoice
        {
            return true;
        }

        select sum(OverdueAmountCur), maxof(DueDate) from overdueDebtJournalLine
            where overdueDebtJournalLine.JournalId     == _overdueTurnJournalLine.JournalId
               && overdueDebtJournalLine.TransRefRecId == _overdueTurnJournalLine.TransRefRecId;

        return (overdueDebtJournalLine.OverdueAmountCur == _amountCur
                && overdueDebtJournalLine.DueDate == _overdueTurnJournalLine.DueDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        overdueDimensionAttribute   = VendParameters::find().OverdueCITPITDimensionAttribute_W;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceJournalId</Name>
				<Source><![CDATA[
    public VendOverdueCITPITJournalId_W parmSourceJournalId(VendOverdueCITPITJournalId_W  _sourceJournalId = sourceJournalId)
    {
        sourceJournalId   = _sourceJournalId;
        return sourceJournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceRecId</Name>
				<Source><![CDATA[
    public RecId parmSourceRecId(RecId  _sourceRecId = sourceRecId)
    {
        sourceRecId   = _sourceRecId;
        return sourceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        VendOverdueCITPITTurnJournalLine_W  overdueTurnJournalLine;
        VendTrans                           vendTrans;

        QueryRun                            queryRun = new QueryRun(this.buildQueryOverdueLine());

        try
        {
            ttsbegin;
            while (queryRun.next())
            {
                overdueTurnJournalLine  = queryRun.get(tableNum(VendOverdueCITPITTurnJournalLine_W));
                vendTrans               = queryRun.get(tableNum(VendTrans));

                if (this.isLastOverduePeriod(vendTrans.AmountCur, overdueTurnJournalLine))
                {
                    this.calcLineDetailForLastLine(overdueTurnJournalLine);
                }
                else
                {
                    this.calcLineDetailsByTrans(overdueTurnJournalLine);
                }
            }
            ttscommit;
        }

        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

        catch (Exception::Error)
        {
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a new instance of the <c>VendOverdueCalcCITPITLineDetail_W</c> class.
    /// </summary>
    /// <param name="_journalId">
    ///    The identification number of the journal that is used for overdue debt.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>VendOverdueCalcCITPITLineDetail_W</c> class.
    /// </returns>
    static VendOverdueCalcCITPITLineDetail_W construct(VendOverdueCITPITJournalId_W   _journalId)
    {
        VendOverdueCalcCITPITLineDetail_W  overdueCalcLineDetail = new VendOverdueCalcCITPITLineDetail_W();
        overdueCalcLineDetail.parmSourceJournalId(_journalId);

        return overdueCalcLineDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        VendOverdueCalcCITPITLineDetail_W   overdueCalcLineDetail;
        VendOverdueCITPITTurnJournalLine_W  overdueTurnJournalLine;
        VendOverdueCITPITJournalTable_W     overdueJournalTable;
        OverdueJournalId_W                  overdueJournalId;

        if (! _args ||
            ! _args.record() ||
            (_args.dataset() != tableNum(VendOverdueCITPITTurnJournalLine_W)
                || _args.dataset() != tableNum(VendOverdueCITPITJournalTable_W)))
        {
            throw error(Error::missingRecord(funcName()));
        }

        switch (_args.dataset())
        {
            case tableNum(VendOverdueCITPITTurnJournalLine_W):
                overdueTurnJournalLine  = _args.record();
                overdueJournalId        = overdueTurnJournalLine.JournalId;
                break;
            case tableNum(VendOverdueCITPITJournalTable_W):
                overdueJournalTable     = _args.record();
                overdueJournalId        = overdueJournalTable.JournalId;
                break;
        }

        overdueCalcLineDetail   = VendOverdueCalcCITPITLineDetail_W::construct(overdueJournalId);
        overdueCalcLineDetail.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method run class <c>VendOverdueCalcCITPITLineDetail_W</c> on a server
    /// </summary>
    /// <param name="_overdueJournalId">
    /// The jurnal number for which the distribution will be calculated according to dimensions
    /// </param>
    public static void runOnServer(OverdueJournalId_W _overdueJournalId)
    {
        VendOverdueCalcCITPITLineDetail_W   overdueCalcLineDetail;

        overdueCalcLineDetail       = VendOverdueCalcCITPITLineDetail_W::construct(_overdueJournalId);
        overdueCalcLineDetail.run();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>