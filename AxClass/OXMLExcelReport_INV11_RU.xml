<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OXMLExcelReport_INV11_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class prints unified form INV-11 to excel
/// </summary>
class OXMLExcelReport_INV11_RU extends XMLExcelReport_Standard_RU implements BatchRetryable, ERIReportPostProcessingSupported
{
    RDeferralsCountingJournal       deferralsCountingJournal;
    RDeferralsCountingJournalLine   deferralsCountingJournalLine;
    RDeferralsBookId                deferralsBookId;

    int                             totalRows;
    RDeferralsSum                   totalDeferralSum;
    RDeferralsSum                   totalWritingOffCost;
    RDeferralsSum                   totalWroteOffCost;
    RDeferralsSum                   totalRemainSum;
    RDeferralsSum                   totalAveSum;
    RDeferralsSum                   totalWritingoffReportingYear;

    RDeferralsSum                   pgDeferralSum;
    RDeferralsSum                   pgWritingOffCost;
    RDeferralsSum                   pgWroteOffCost;
    RDeferralsSum                   pgRemainSum;
    RDeferralsSum                   pgAveSum;
    RDeferralsSum                   pgWritingoffReportingYear;

    Amount                          currRatio;

    DocumentDate                    inventoryDate;
    DocumentNum                     inventoryNum;

    str                             chairman[2];
    str                             accountant[2];
    str                             member[6];
    str                             inCharge[6];
    str                             worksheetSuffix;

    protected const int firstSheetWidth = 31;
    protected const int lastSheetWidth = 32;
    protected const int firstSheetNo = 1;
    protected const int lastSheetNo = 2;
    protected const str lastSuffix  = "Last";
    protected const str lastPageHeaderName = "LASTPAGEHEADER";
    protected const str lastBodyName = "LASTPAGEBODY";
    protected const str lastPageFooterName = "LASTPAGEFOOTER";

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds current line values to totals
    /// </summary>
    protected void addTotals()
    {
        totalDeferralSum             += deferralsCountingJournalLine.DeferralsAmount;
        totalWritingOffCost          += deferralsCountingJournalLine.WritingOffAmount;
        totalWroteOffCost            += deferralsCountingJournalLine.WritingOffAmountTotal;
        totalRemainSum               += deferralsCountingJournalLine.RemainAmount;
        totalAveSum                  += currRatio;
        totalWritingoffReportingYear += deferralsCountingJournalLine.WritingOffReportYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTotalsOnPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds current line values to totals on page
    /// </summary>
    /// <remarks>
    /// not used in this report
    /// </remarks>
    protected void addTotalsOnPage()
    {
        pgDeferralSum             += deferralsCountingJournalLine.DeferralsAmount;
        pgWritingOffCost          += deferralsCountingJournalLine.WritingOffAmount;
        pgWroteOffCost            += deferralsCountingJournalLine.WritingOffAmountTotal;
        pgRemainSum               += deferralsCountingJournalLine.RemainAmount;
        pgAveSum                  += currRatio;
        pgWritingoffReportingYear += deferralsCountingJournalLine.WritingOffReportYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates height of body section
    /// </summary>
    /// <param name="_bookmark">
    /// Name of section
    /// </param>
    /// <returns>
    /// height of body section
    /// </returns>
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        const int minHeight = 12.60;

        return max(document.getNamedRangeHeightWrapped('Code', deferralsCountingJournalLine.DeferralID),
                   document.getNamedRangeHeightWrapped('Name', deferralsCountingJournalLine.Name),
                   minHeight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeWorksheet</Name>
				<Source><![CDATA[
    private void changeWorksheet()
    {
        if (pageNum == 1)
        {
            this.setPrintArea();
            curWorkSheetNum = lastSheetNo;
            widthCols       = lastSheetWidth;
            this.setCurrentWorksheetNum(curWorkSheetNum, widthCols);
            worksheetSuffix = lastSuffix;
            pageHeaderName = lastPageHeaderName;
            bodyName = lastBodyName;
            pageFooterName = lastPageFooterName;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears totals
    /// </summary>
    protected void clearTotals()
    {
        this.clearTotalsOnPage();
        totalDeferralSum             = 0;
        totalWritingOffCost          = 0;
        totalWroteOffCost            = 0;
        totalRemainSum               = 0;
        totalAveSum                  = 0;
        totalWritingoffReportingYear = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTotalsOnPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears totals on page
    /// </summary>
    protected void clearTotalsOnPage()
    {
        pgDeferralSum             = 0;
        pgWritingOffCost          = 0;
        pgWroteOffCost            = 0;
        pgRemainSum               = 0;
        pgAveSum                  = 0;
        pgWritingoffReportingYear = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>codeOKPO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method to get OKPO code
    /// </summary>
    /// <returns>
    /// Current company's OKPO Code
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected OKPO_RU codeOKPO()
    {
        return CompanyInfoHelper::partyOKPOasOfDate_RU(CompanyInfo::find(), inventoryDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes report
    /// </summary>
    protected void createReport()
    {
        curWorkSheetNum = firstSheetNo;
        widthCols       = firstSheetWidth;

        this.createStandardReport();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dayOfRptDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns display value for day of month
    /// </summary>
    /// <returns>
    /// Display value for day of month
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected DateValue_RU dayOfRptDate()
    {
        return int2str(dayOfMth(deferralsCountingJournal.StartDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    protected void execute(Bookmark _bookmark)
    {
        //if number of lines in report 0 or 1 then page header and footer should be added on last page
        if (_bookmark == reportFooterName && this.getNumOfLines() < 2)
        {
            this.execute(lastPageHeaderName);
        }
        super(_bookmark);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves through header recordset, fetching data associated with it
    /// </summary>
    /// <returns>
    /// true if data successfully fetched
    /// </returns>
    protected boolean fetchHeader()
    {
        void fetchOfficials()
        {
            int i,j;
            OfficialsTrans_RU officialsTrans;
            while select officialsTrans
                where officialsTrans.ReportType   == OffReportType_RU::RDeferrals &&
                      officialsTrans.OffSessionId == deferralsCountingJournal.OffSessionId
            {
                switch (officialsTrans.Position)
                {
                    case OffPosition_RU::Chairman    :
                        chairman[1] = officialsTrans.Title;
                        chairman[2] = officialsTrans.Name;
                        break;
                    case OffPosition_RU::AccountantJ :
                        accountant[1] = officialsTrans.Title;
                        accountant[2] = officialsTrans.Name;
                        break;
                    case OffPosition_RU::Member      :
                        if (i < 6)
                        {
                             member[i + 1] = officialsTrans.Title;
                             member[i + 2] = officialsTrans.Name;
                             i += 2;
                        }
                        break;
                    case OffPosition_RU::InCharge    :
                        if (j < 6)
                        {
                            inCharge[j + 1] = officialsTrans.Title;
                            inCharge[j + 2] = officialsTrans.Name;
                            j += 2;
                        }
                        break;
                }
            }
        }

        if (queryRunHeader.next())
        {
            deferralsCountingJournal = queryRunHeader.get(tableNum(RDeferralsCountingJournal));
            fetchOfficials();
            numOfLines = this.getNumOfLines();

            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves through lines recordset, fetching data associated with it
    /// </summary>
    /// <returns>
    /// true if data successfully fetched
    /// </returns>
    protected boolean fetchLines()
    {
        if (queryRunLines.next())
        {
            deferralsCountingJournalLine = queryRunLines.get(tableNum(RDeferralsCountingJournalLine));
            currRatio = deferralsCountingJournalLine.LifeTime                                                ?
                    deferralsCountingJournalLine.DeferralsAmount / deferralsCountingJournalLine.LifeTime :
                    0;

            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Name of the new file
    /// </summary>
    /// <returns>
    /// Name of the new file
    /// </returns>
    protected Filename fileName()
    {
        return 'INV-11_';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    /// <summary>
    /// Postfix for a new file
    /// </summary>
    /// <returns>
    /// inventory number
    /// </returns>
    protected Filename fileNamePostfix()
    {
        return inventoryNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report file.
    /// </summary>
    /// <returns>
    /// The name of the report file.
    /// </returns>
    public str getReportFileName()
    {
        return this.excelFileName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report.
    /// </summary>
    /// <returns>
    /// Name of the report.
    /// </returns>
    public str getReportName()
    {
        return 'INV11';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills body section with data
    /// </summary>
    protected void fillBody()
    {
        this.insertValueToSection(this.sectionName('LineNo')                , lineNo);
        this.insertValueToSection(this.sectionName('Name')                  , deferralsCountingJournalLine.Name);
        this.insertValueToSection(this.sectionName('Code')                  , deferralsCountingJournalLine.DeferralID);
        this.insertValueToSection(this.sectionName('DeferralsAmount')       , deferralsCountingJournalLine.DeferralsAmount);
        this.insertValueToSection(this.sectionName('AcquisitionDate')       , deferralsCountingJournalLine.AcquisitionDate);
        this.insertValueToSection(this.sectionName('LifeTime')              , deferralsCountingJournalLine.LifeTime);
        this.insertValueToSection(this.sectionName('CalcWritingOffAmount')  , deferralsCountingJournalLine.WritingOffAmount);
        this.insertValueToSection(this.sectionName('WritingOffAmountTotal') , deferralsCountingJournalLine.WritingOffAmountTotal);
        this.insertValueToSection(this.sectionName('RemainAmount')          , deferralsCountingJournalLine.RemainAmount);
        this.insertValueToSection(this.sectionName('Months')                , deferralsCountingJournalLine.Months);
        this.insertValueToSection(this.sectionName('WritingOffReportMonth') , currRatio);
        this.insertValueToSection(this.sectionName('WritingOffReportYear')  , deferralsCountingJournalLine.WritingOffReportYear);
        this.insertValueToSection(this.sectionName('CalcRemainAmount')      , deferralsCountingJournalLine.RemainAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageFooter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills page footer section with data
    /// </summary>
    protected void fillPageFooter()
    {
        this.insertValueToSection(this.sectionName('PGDefSum')                  , pgDeferralSum);
        this.insertValueToSection(this.sectionName('PgWritingOffAmount')        , pgWritingOffCost);
        this.insertValueToSection(this.sectionName('PgWrittenOffAmount')        , pgWroteOffCost);
        this.insertValueToSection(this.sectionName('PgRemainAmount')            , pgRemainSum);
        this.insertValueToSection(this.sectionName('PgWritingOffReportMonth')   , pgAveSum);
        this.insertValueToSection(this.sectionName('PgWritingOffReportYear')    , pgWritingoffReportingYear);
        this.insertValueToSection(this.sectionName('PgCalcRemainAmount')        , pgRemainSum);
        this.changeWorksheet();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills page header section with data
    /// </summary>
    protected void fillPageHeader()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportFooter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report footer section with data
    /// </summary>
    protected void fillReportFooter()
    {
        this.insertValueToSection(this.sectionName('TotDefSum')                  , TotalDeferralSum);
        this.insertValueToSection(this.sectionName('TotWritingOffAmount')        , TotalWritingOffCost);
        this.insertValueToSection(this.sectionName('TotWrittenOffAmount')        , TotalWroteOffCost);
        this.insertValueToSection(this.sectionName('TotRemainAmount')            , TotalRemainSum);
        this.insertValueToSection(this.sectionName('TotWritingOffReportMonth')   , TotalAveSum);
        this.insertValueToSection(this.sectionName('TotWritingOffReportYear')    , TotalWritingoffReportingYear);
        this.insertValueToSection(this.sectionName('TotCalcRemainAmount')        , TotalRemainSum);

        this.insertValueToSection('ChairmanTitle'   , chairman[1]);
        this.insertValueToSection('Chairman'        , chairman[2]);

        this.insertValueToSection('AccountantTitle' , accountant[1]);
        this.insertValueToSection('Accountant'      , accountant[2]);

        this.insertValueToSection('Member1Title'    , member[1]);
        this.insertValueToSection('Member1'         , member[2]);
        this.insertValueToSection('Member2Title'    , member[3]);
        this.insertValueToSection('Member2'         , member[4]);
        this.insertValueToSection('Member3Title'    , member[5]);
        this.insertValueToSection('Member3'         , member[6]);

        this.insertValueToSection('inChargeTitle1'    , inCharge[1]);
        this.insertValueToSection('inCharge1'         , inCharge[2]);
        this.insertValueToSection('inChargeTitle2'    , inCharge[3]);
        this.insertValueToSection('inCharge2'         , inCharge[4]);
        this.insertValueToSection('inChargeTitle3'    , inCharge[5]);
        this.insertValueToSection('inCharge3'         , inCharge[6]);

        this.insertValueToSection('ItemsCount'        , this.getNumOfLines());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report header section with data
    /// </summary>
    protected void fillReportHeader()
    {
        this.insertValueToSection('CompanyName'         , this.organizationName());

        this.insertValueToSection('OKPO'                , this.codeOKPO());
        this.insertValueToSection('InventoryOrder'      , inventoryNum);
        this.insertValueToSection('inventoryDate'       , inventoryDate);
        this.insertValueToSection('StartDate'           , deferralsCountingJournal.StartDate);
        this.insertValueToSection('EndDate'             , deferralsCountingJournal.EndDate);
        this.insertValueToSection('DocumentNum'         , deferralsCountingJournal.JournalNum);
        this.insertValueToSection('DocumentDate'        , deferralsCountingJournal.EndDate);
        this.insertValueToSection('DayDateEnd'          , this.dayOfRptDate());
        this.insertValueToSection('MonthDateEnd'        , this.monthOfRptDate());
        this.insertValueToSection('YearDateEnd'         , this.yearOfRptDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumOfLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates number of lines in lines recordset
    /// </summary>
    /// <returns>
    /// Number of lines in lines recordset
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected int getNumOfLines()
    {
        if (totalRows == -1)
        {
            totalRows =   int642int((select count(RecId) from RDeferralsCountingJournalLine
                            where RDeferralsCountingJournalLine.rDeferralsCountingJournal == deferralsCountingJournal.RecId
                            && RDeferralsCountingJournalLine.DeferralBookId            == deferralsBookId).RecID);
        }
        return totalRows;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes report
    /// </summary>
    /// <returns>
    /// true, if parameters specified
    /// </returns>
    public boolean init()
    {
        rDeferralsCountingJournalToExcel caller;

        boolean ret = false;

        if (args)
        {
            deferralsCountingJournal = args.record();
            caller          = args.caller();

            inventoryDate   = deferralsCountingJournal.OrderDate;
            inventoryNum    = deferralsCountingJournal.OrderNum;
            totalRows       = -1;

            ret             = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRunHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes query run which fetches data for header
    /// </summary>
    protected void initQueryRunHeader()
    {
        QueryBuildDataSource    qbds;
        Query                   query = new Query();

        qbds = query.addDataSource(tableNum(RDeferralsCountingJournal));
        qbds.addRange(fieldNum(RDeferralsCountingJournal, RecId)).value(queryValue(deferralsCountingJournal.RecId));

        queryRunHeader = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRunLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes query run which fetches data for lines
    /// </summary>
    protected void initQueryRunLines()
    {
        QueryBuildDataSource    qbds;
        Query                   query = new Query();

        qbds = query.addDataSource(tableNum(RDeferralsCountingJournalLine));
        qbds.addRange(fieldNum(RDeferralsCountingJournalLine, rDeferralsCountingJournal)).value(queryValue(deferralsCountingJournal.RecId));
        qbds.addRange(fieldNum(RDeferralsCountingJournalLine, DeferralBookId)).value(queryValue(deferralsBookId));

        queryRunLines = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        super();
        this.addSection(lastPageHeaderName);
        this.addSection(lastBodyName, true);
        this.addSection(lastPageFooterName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>monthOfRptDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns display value for month of end date
    /// </summary>
    /// <returns>
    /// Display value for month of end date
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected TempStr monthOfRptDate()
    {
        return RNumDateInWordConverter::construct().date2strMonth(deferralsCountingJournal.StartDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>organizationName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display gets name of current company
    /// </summary>
    /// <returns>
    /// Name of current company
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Name organizationName()
    {
        return CompanyInfo::find().name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pageNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// returns string which contains data about page number
    /// </summary>
    /// <returns>
    /// String which contains data about page number
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected PageNoTxt pageNum()
    {
        const str blank = '';
        return pageNum > 1 ? strFmt("@SYS24160", pageNum) : blank;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeferralsBookId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RDeferralsBookId parmDeferralsBookId(RDeferralsBookId _deferralsBookId = deferralsBookId)
    {
        deferralsBookId = _deferralsBookId;
        return deferralsBookId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeferralsCountingJournal</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RDeferralsCountingJournal parmDeferralsCountingJournal(RDeferralsCountingJournal _deferralsCountingJournal = deferralsCountingJournal)
    {
        deferralsCountingJournal = _deferralsCountingJournal;
        return deferralsCountingJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sectionName</Name>
				<Source><![CDATA[
    private str sectionName(str name)
    {
        return name + worksheetSuffix;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns name of template for report
    /// </summary>
    /// <returns>
    /// Name of template for report
    /// </returns>
    protected Filename templateName()
    {
        return resourceStr(INV11_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates number of cells to be filled with data
    /// </summary>
    /// <returns>
    /// Number of cells to be filled with data
    /// </returns>
    
    protected Counter totalCells()
    {
        const int cellsBody = 15;
        const int cellsOther = 45;
        int nRows = this.getNumOfLines();
        return (nRows + 2 +(nRows div 33)) * cellsBody  + cellsOther;
    }

]]></Source>
			</Method>
			<Method>
				<Name>yearOfRptDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns display value for year of end date
    /// </summary>
    /// <returns>
    /// Display value for year of end date
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected DateValue_RU yearOfRptDate()
    {
        return int2str(year(deferralsCountingJournal.StartDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static OXMLExcelReport_INV11_RU construct()
    {
        return new OXMLExcelReport_INV11_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>