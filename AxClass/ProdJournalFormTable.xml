<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdJournalFormTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProdJournalFormTable extends JournalFormTable
{
    FormMenuButtonControl   ctrlPickingList;
    FormCheckBoxControl     ctrlDrawNegative;
    ProdJournalTable        prodJournalTable;

    FormStringControl       ctrlProdJournalTable_ProdId;
    FormStringControl       ctrlProdId;

    // <GEERU>
    FormFunctionButtonControl   ctrlUseReleaseFromProduction;
    FormFunctionButtonControl   ctrlProdJournalReleaseCopy;
    FormFunctionButtonControl   ctrlProdJournalReleaseReversal;
    // </GEERU>
    ProdId                  callerProdId;
    Query                   queryInit;
    boolean                     useDefaultReleaseJournal;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>datasourceAccess_RU</Name>
				<Source><![CDATA[
    public void datasourceAccess_RU()
    {
        xArgs args = formRun.args();

        if (args && args.parmEnum() == ProdJournalType::ReleaseFromProduction_RU)
        {
            journalTable_ds.allowCreate(useDefaultReleaseJournal);
            journalTable_ds.allowEdit(this.useReleaseJournal_RU());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceActivePre</Name>
				<Source><![CDATA[
    void datasourceActivePre()
    {
        super();

        if (ctrlDrawNegative)
        {
            ctrlDrawNegative.enabled(!prodJournalTable.ReducePhysical);
        }
        // <GEERU>
        this.datasourceAccess_RU();
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceCreatePre</Name>
				<Source><![CDATA[
    public boolean datasourceCreatePre()
    {
        var ret = super();

        if (ret)
        {
            Args args = new Args();

            args.name(formstr(ProdJournalCreate));
            args.caller(this);

            if (this.formRun().name() != formstr(ProdJournalTable)
                || (this.formRun().args() && this.formRun().args().parmEnum() == ProdJournalType::ReleaseFromProduction_RU))
            {
                args.parmEnum(this.journalTypeId());
                args.parmEnumType(enumnum(ProdJournalType));
            }

            if (this.formRun() && this.formRun().args())
            {
                var record = this.formRun().args().record();
                args.record(record);
            }

            var journalCreate = ClassFactory.formRunClass(args);
            journalCreate.init();
            journalCreate.run();
            journalCreate.wait();

            ret = journalCreate.closedOk();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceExecuteQueryPre</Name>
				<Source><![CDATA[
    void datasourceExecuteQueryPre()
    {
        this.updateJournalTableDataSourceQuery();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalTableDataSourceQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>JournalTable</c> data source query.
    /// </summary>
    protected void updateJournalTableDataSourceQuery()
    {
        if (formRun.args().parm() == identifierStr(Production) && callerProdId)
        {
            Query query = new Query();
            QueryBuildDataSource qbs = query.addDataSource(tableNum(ProdJournalTable));
            qbs.name(journalTable_ds.name());
            journalTable_ds.query(query);

            this.queryAddRange();

            qbs.addRange(fieldNum(ProdJournalTable, ProdId)).value(callerProdId);
        }
        else
        {
            // in case journalTable_ds.query() is changed after journalTable_ds.init() was called
            if (journalTable_ds.query() && journalTable_ds.query() != queryInit)
            {
                this.queryAddRange();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceInitPost</Name>
				<Source><![CDATA[
    void datasourceInitPost(JournalTableMap _journalTable)
    {
        super(_journalTable);
        prodJournalTable    = _journalTable;

        if (journalTable_ds)
            queryInit = journalTable_ds.query();
        // <GEERU>
        this.datasourceAccess_RU();
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceInitValuePost</Name>
				<Source><![CDATA[
    void datasourceInitValuePost()
    {
        super();

        if (! prodJournalTable.ProdId)
            prodJournalTable.ProdId = callerProdId;

        prodJournalTable.pmfInitFromProdTable(
            ProdTable::find(prodJournalTable.ProdId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceLinkActivePre</Name>
				<Source><![CDATA[
    void datasourceLinkActivePre()
    {
        super();

        if (formRun.args().parm() == identifierstr(Production) &&
            formRun.args().caller() &&
            formRun.args().dataset())
        {
            fieldId fieldId = fieldname2id(formRun.args().dataset(),fieldstr(ProdTable,ProdId));
            if (fieldId)
                callerProdId = formRun.args().record().(fieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButtonsActive</Name>
				<Source><![CDATA[
    void enableButtonsActive(boolean _enableInfolog = true)
    {
        super(_enableInfolog);

        if (ctrlPickingList)
        {
            ctrlPickingList.enabled(this.journalTypeId() == ProdJournalType::Picklist);
        }

        // <GEERU>
        if (ctrlUseReleaseFromProduction && ctrlUseReleaseFromProduction.visible())
        {
            ctrlUseReleaseFromProduction.enabled(prodJournalTable.ProdId && ProdTable::find(prodJournalTable.ProdId).useReleaseFromProduction_RU());
        }

        if (journalTypeId == ProdJournalType::ReleaseFromProduction_RU)
        {
            if (ctrlCheckJournal || ctrlPostJournal)
            {
                boolean useReleaseJournal = this.useReleaseJournal_RU();
                if (ctrlCheckJournal)
                {
                    ctrlCheckJournal.enabled(useReleaseJournal && ctrlCheckJournal.enabled());
                }

                if (ctrlPostJournal)
                {
                    ctrlPostJournal.enabled(useReleaseJournal && ctrlPostJournal.enabled());
                }
            }

            if (ctrlCreateNew)
            {
                ctrlCreateNew.enabled(useDefaultReleaseJournal && ctrlCreateNew.enabled());
            }

            if (ctrlProdJournalReleaseCopy)
            {
                ctrlProdJournalReleaseCopy.enabled(useDefaultReleaseJournal && ctrlProdJournalReleaseCopy.enabled());
            }

            if (ctrlProdJournalReleaseReversal)
            {
                ctrlProdJournalReleaseReversal.enabled(useDefaultReleaseJournal && ctrlProdJournalReleaseReversal.enabled());
            }
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>formInitPost</Name>
				<Source><![CDATA[
    public void formInitPost()
    {
        this.parmPostingStatusFilterEnabled(true);

        super();

        if (ProdTable::find(this.prodId()).ProdType == ProdType::Process)
        {
            ctrlProdId.label("@PDS1470");
            ctrlProdJournalTable_ProdId.label("@PDS1470");

            ctrlProdId.helpText("@PDS1471");
            ctrlProdJournalTable_ProdId.helpText("@PDS1471");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>JournalForm</c> class.
    /// </summary>
    /// <param name="_formRun">
    /// A <c>FormRun</c> value that is used to initialize.
    /// </param>
    public void new(FormRun _formRun)
    {
        useDefaultReleaseJournal = ProdParametersDim::findDefault().UseReleaseFromProduction_RU;

        super(_formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlDrawNegative</Name>
				<Source><![CDATA[
    FormCheckBoxControl parmCtrlDrawNegative(FormCheckBoxControl _ctrlDrawNegative = ctrlDrawNegative)
    {
        ctrlDrawNegative = _ctrlDrawNegative;
        return ctrlDrawNegative;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlJourReleaseCopy_RU</Name>
				<Source><![CDATA[
    FormFunctionButtonControl parmCtrlJourReleaseCopy_RU(FormFunctionButtonControl _ctrlProdJournalReleaseCopy = ctrlProdJournalReleaseCopy)
    {
        ctrlProdJournalReleaseCopy = _ctrlProdJournalReleaseCopy;
        return ctrlProdJournalReleaseCopy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlJourReleaseReversal_RU</Name>
				<Source><![CDATA[
    FormFunctionButtonControl parmCtrlJourReleaseReversal_RU(FormFunctionButtonControl _ctrlProdJournalReleaseReversal = ctrlProdJournalReleaseReversal)
    {
        ctrlProdJournalReleaseReversal = _ctrlProdJournalReleaseReversal;
        return ctrlProdJournalReleaseReversal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlPickingList</Name>
				<Source><![CDATA[
    FormMenuButtonControl parmCtrlPickingList(FormMenuButtonControl _ctrlPickingList = ctrlPickingList)
    {
        ctrlPickingList = _ctrlPickingList;
        return ctrlPickingList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlProdId</Name>
				<Source><![CDATA[
    FormStringControl parmCtrlProdId(FormStringControl _ctrlProdId = ctrlProdId)
    {
        ctrlProdId = _ctrlProdId;

        return ctrlProdId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlProdJournalTable_ProdId</Name>
				<Source><![CDATA[
    FormStringControl parmCtrlProdJournalTable_ProdId(FormStringControl _ctrlProdJournalTable_ProdId = ctrlProdJournalTable_ProdId)
    {
        ctrlProdJournalTable_ProdId = _ctrlProdJournalTable_ProdId;

        return ctrlProdJournalTable_ProdId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlUseReleaseFromProduction_RU</Name>
				<Source><![CDATA[
    FormFunctionButtonControl parmCtrlUseReleaseFromProduction_RU(FormFunctionButtonControl _ctrlUseReleaseFromProduction = ctrlUseReleaseFromProduction)
    {
        ctrlUseReleaseFromProduction = _ctrlUseReleaseFromProduction;
        return ctrlUseReleaseFromProduction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodId</Name>
				<Source><![CDATA[
    ProdId prodId()
    {
        return prodJournalTable.ProdId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useReleaseJournal_RU</Name>
				<Source><![CDATA[
    protected boolean useReleaseJournal_RU()
    {
        return prodJournalTable.ProdId ? ProdTable::find(prodJournalTable.ProdId).useReleaseFromProduction_RU() : useDefaultReleaseJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateProdJournal</Name>
				<Source><![CDATA[
    public boolean canCreateProdJournal()
    {
        return this.prodId() ? ProdTable::find(this.prodId()).status().canCreateProdJournal() : true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>