<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailAttachedServiceProvisioningJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>RetailAttachedServiceProvisioningJob</c> handles attached service provisioning. It essentially makes a request to 
/// start provisioning and then polls the provisioning service to check status of the attached service provisioning.
/// </summary>
[SysObsolete('The class has been deprecated.', true, 05\08\2020)]
class RetailAttachedServiceProvisioningJob extends RunBaseBatch implements BatchRetryable
{
    #define.CurrentVersion(1)

    RetailAttachedServiceId attachedServiceId;
    const int CheckStatusIntervalSeconds = 10;
    const int CheckStatusTotalCount = 30; // 5 min
    const int RetryTotalCount = 10;
    const int RetryDelaySeconds = 10;
    const str RetailProvisioningServicePrincipalName = 'https://CommonProvisioning.CdmCommerceProd.onmicrosoft.com';
    const str S2SCertificateThumbprintId = 'S2SCertThumbprint';
    const str CommerceTokenIssuersKey = 'CommerceTokenIssuers';
    const str EnvironmentIdKey = 'EnvironmentId';
    const str TopologySkuTypeKey = 'TopologySkuType';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmAttachedServiceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets or gets the name of the attached service to provision.
    /// </summary>
    /// <param name = "_attachedServiceId">The name of the attached service to provision.</param>
    /// <returns>The name of the attached service to provision.</returns>
    public RetailAttachedServiceId parmAttachedServiceId(RetailAttachedServiceId _attachedServiceId = attachedServiceId)
    {
        attachedServiceId = _attachedServiceId;
        return attachedServiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the parameters.
    /// </summary>
    /// <returns>The container containing the parameters.</returns>
    public container pack()
    {
        return [#CurrentVersion, attachedServiceId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// unpacks the parameters.
    /// </summary>
    /// <returns>Boolean indicating if the unpacking passed or not.</returns>
    public boolean unpack(container packedClass)
    {
        Version thisVersion = RunBase::getVersion(packedClass);

        switch (thisVersion)
        {
            case #CurrentVersion:
                [thisVersion, attachedServiceId] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the class.
    /// </summary>
    [SysObsolete('The method has been deprecated.', true, 05\08\2020)]
    public void run()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the description of the job.
    /// </summary>
    /// <param name = "_args">The class description.</param>
    public static ClassDescription description()
    {
        return "@Retail:AttachedServiceProvisioningJob";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starting point of the job.
    /// </summary>
    /// <param name = "_args">Arguments</param>
    public static void main(Args _args)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>RetailAttachedServiceProvisioningJob</c>
    /// class can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>RetailAttachedServiceProvisioningJob</c> can
    /// be run in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>