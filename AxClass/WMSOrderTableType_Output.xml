<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsOrderTableType_Output</Name>
	<SourceCode>
		<Declaration><![CDATA[
class WmsOrderTableType_Output extends WMSOrderTableType
{
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canBeDeletedByReferencedTable</Name>
				<Source><![CDATA[
    public boolean canBeDeletedByReferencedTable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFix</Name>
				<Source><![CDATA[
    public void checkFix(WMSConsistencyCheck_WMSOrder wmsConsistencyCheck_WMSOrder)
    {
        WMSOrderTrans       wmsOrderTrans;
        WMSOrderTrans       wmsOrderTransOrig, wmsOrderTransNew;
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        List                wmsOrderTransList, inventTransList;
        ListIterator        wmsOrderTransIterator, inventTransIterator;

        if (wmsConsistencyCheck_WMSOrder.checkFix() == CheckFix::Fix)
        {
            // Make sure inventory dimensions match
            wmsOrderTransList = new List(Types::Record);
            while select wmsOrderTrans
                where wmsOrderTrans.OrderId             == wmsOrder.OrderId
                && ( wmsOrderTrans.ExpeditionStatus  == WMSExpeditionStatus::None
                     || wmsOrderTrans.ExpeditionStatus  == WMSExpeditionStatus::Registered
                     || wmsOrderTrans.ExpeditionStatus  == WMSExpeditionStatus::Activated
                     || wmsOrderTrans.ExpeditionStatus  == WMSExpeditionStatus::Started)
            {
                wmsOrderTransList.addEnd(wmsOrderTrans);
            }

            inventTransList = new List(Types::Record);
            while select inventTrans
                where inventTrans.TransChildType    == InventTransChildType::WMSOrder
                   && inventTrans.TransChildRefId   == wmsOrder.OrderId
                exists join inventTransOrigin
                    where inventTransOrigin.RecId           == inventTrans.InventTransOrigin
                       && inventTransOrigin.InventTransId   == wmsOrder.InventTransId
            {
                inventTransList.addEnd(inventTrans);
            }

            // Remove matches from lists
            wmsOrderTransIterator   = new ListIterator(wmsOrderTransList);
            inventTransIterator     = new ListIterator(inventTransList);

            while (wmsOrderTransIterator.more())
            {
                wmsOrderTrans = wmsOrderTransIterator.value();
                inventTransIterator.begin();
                while (inventTransIterator.more())
                {
                    inventTrans = inventTransIterator.value();
                    if (inventTrans.InventDimId == wmsOrderTrans.InventDimId)
                    {
                        if (-inventTrans.Qty <= wmsOrderTrans.Qty)
                        {
                            wmsOrderTrans.Qty       -= -inventTrans.Qty;
                            wmsOrderTrans.PdsCWQty  -= -inventTrans.PdsCWQty;

                            inventTransIterator.delete();   // implicit next too
                        }
                        else
                        {
                            inventTrans.Qty         += wmsOrderTrans.Qty;
                            inventTrans.PdsCWQty    += wmsOrderTrans.PdsCWQty;

                            wmsOrderTrans.Qty       = 0;
                            wmsOrderTrans.PdsCWQty  = 0;
                        }
                    }
                    else
                    {
                        inventTransIterator.next();
                    }

                    if (wmsOrderTrans.Qty == 0)
                        break;
                }
                if (wmsOrderTrans.Qty == 0)
                {
                    wmsOrderTransIterator.delete();
                }
                else
                {
                    wmsOrderTransIterator.next();
                }
            }

            // Now update remaining WMSOrderTrans records with inventTrans dimensions if possible
            wmsOrderTransIterator.begin();
            while (wmsOrderTransIterator.more())
            {
                wmsOrderTrans = wmsOrderTransIterator.value();
                select firstonly forupdate wmsOrderTransOrig
                    where wmsOrderTransOrig.OrderId == wmsOrderTrans.OrderId
                       && wmsOrderTransOrig.RecId   == wmsOrderTrans.RecId;

                if (wmsOrderTransOrig.Qty != wmsOrderTrans.Qty)
                {
                    wmsOrderTransOrig.split(wmsOrderTrans.Qty - wmsOrderTransOrig.Qty, wmsOrderTrans.PdsCWQty - wmsOrderTransOrig.PdsCWQty);
                }
                inventTransIterator.begin();
                while (inventTransIterator.more())
                {
                    inventTrans = inventTransIterator.value();
                    if (-inventTrans.Qty > wmsOrderTrans.Qty)
                    {
                        wmsOrderTransOrig.InventDimId = inventTrans.InventDimId;
                        wmsOrderTransOrig.update();

                        wmsOrderTrans.Qty       = 0;
                        wmsOrderTrans.PdsCWQty  = 0;
                    }
                    else
                    {
                        wmsOrderTransNew = wmsOrderTransOrig.split(-inventTrans.Qty, -inventTrans.PdsCWQty);
                        wmsOrderTransNew.InventDimId = inventTrans.InventDimId;
                        wmsOrderTransNew.update();

                        wmsOrderTrans.Qty       -= -inventTrans.Qty;
                        wmsOrderTrans.PdsCWQty  -= -inventTrans.PdsCWQty;

                        inventTransIterator.delete();   // implicit next too
                    }
                    if (wmsOrderTrans.Qty == 0)
                        break;
                }
                if (wmsOrderTrans.Qty == 0)
                {
                    wmsOrderTransIterator.delete();
                }
                else
                {
                    wmsOrderTransIterator.next();
                }
            }

            // Now delete WMSOrderTrans records without matching inventTrans records
            wmsOrderTransIterator.begin();
            while (wmsOrderTransIterator.more())
            {
                wmsOrderTrans = wmsOrderTransIterator.value();
                delete_from wmsOrderTransOrig
                    where wmsOrderTransOrig.OrderId == wmsOrderTrans.OrderId
                       && wmsOrderTransOrig.RecId   == wmsOrderTrans.RecId;

                wmsOrderTransIterator.next();
            }
        }

        super(wmsConsistencyCheck_WMSOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleting</Name>
				<Source><![CDATA[
    public void deleting()
    {
        WMSOrderTrans               wmsOrderTrans;
        WMSShipment                 wmsShipment;
        InventTrans                 inventTrans;
        InventTransOrigin           inventTransOrigin;
        InventMovement              parentMovement;
        InventQty                   qtyOverdelivered;
        Qty                         qtyOverdeliveredUnit;
        InventMovement              movementParentTransferReceipt;
        InventMovement              movementParentTransferIssueReceive;
        PdsCWInventQty              pdsCWQtyOverdelivered;
        WMSOrderTransType_Output    wmsOrderTransType;

        if (!wmsOrder)
        {
            throw(error(strFmt("@SYS54878", wmsOrder.OrderId)));
        }

        ttsbegin;

        while select forupdate wmsOrderTrans
            where wmsOrderTrans.OrderId == wmsOrder.OrderId
        {
            wmsOrderTransType = wmsOrderTrans.wmsOrderTransType() as WMSOrderTransType_Output;

            if (!wmsOrderTransType)
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }

            wmsShipment.clear();

            if (   wmsOrderTrans.ExpeditionStatus != WMSExpeditionStatus::Cancelled
                && !wmsOrderTrans.isPhysicalUpdated())
            {
                if (wmsOrderTrans.IsReserved)
                {
                    wmsOrderTrans.unReserve(false);
                }
                else
                {
                    wmsOrderTransType.updateInventTransDimToParentDim(-wmsOrderTrans.Qty,false,-wmsOrderTrans.PdsCWQty);
                }
            }

            if (wmsOrderTrans.RouteId)
            {
                wmsOrderTransType.removeFromRoute();
                wmsOrderTrans.reread();
            }
            //for type OrderPick shipment can be deleted when route is deleted so it is read after route update
            if (wmsOrderTrans.ShipmentId)
            {
                wmsShipment = wmsOrderTrans.wmsShipment(true);
            }

            wmsOrderTrans.doDelete();

            if (wmsShipment.RecId)
            {
                wmsShipment.notifyOfLineChange(NoYes::Yes,NoYes::Yes,NoYes::Yes);
            }
        }

        while select forupdate inventTrans
            where inventTrans.TransChildType            == InventTransChildType::WMSOrder
               && inventTrans.TransChildRefId           == wmsOrder.OrderId
            exists join inventTransOrigin
                where inventTransOrigin.RecId           == inventTrans.InventTransOrigin
                   && inventTransOrigin.InventTransId   == wmsOrder.InventTransId
        {
            inventTrans.TransChildType   = InventTransChildType::None;
            inventTrans.TransChildRefId  = '';
            inventTrans.update(NoYes::Yes);
        }

        if (wmsOrder.Status != WMSOrderStatus::Complete)
        {
            //adjust parent for any over delivery increase that was made
            qtyOverdelivered = wmsOrder.qtyOverdelivered();

            pdsCWQtyOverdelivered = wmsOrder.pdsCWQtyOverdelivered();

            if (qtyOverdelivered > 0)
            {
                parentMovement = this.inventMovement().parentMovement();

                if (parentMovement)
                {
                    qtyOverdeliveredUnit = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                        wmsOrder.ItemId,
                        wmsOrder.InventDimId,
                        qtyOverdelivered,
                        parentMovement.inventTable().inventUnitId(),
                        parentMovement.transUnitId(),
                        NoYes::Yes);
                    parentMovement.addRemainPhysical(qtyOverdelivered);
                    parentMovement.addRemainPhysicalUnit(qtyOverdeliveredUnit);

                    parentMovement.pdsCWAddRemainPhysical(pdsCWQtyOverdelivered);

                    if (parentMovement.isTransfer())
                    {
                        movementParentTransferReceipt = parentMovement.newMovement_TransferReceipt();

                        if (movementParentTransferReceipt)
                        {
                            movementParentTransferIssueReceive = movementParentTransferReceipt.newMovement_TransferIssueReceive();

                            if (movementParentTransferIssueReceive)
                            {
                                movementParentTransferReceipt = movementParentTransferIssueReceive.newMovement_TransferReceipt();
                            }

                            if (movementParentTransferReceipt)
                            {
                                movementParentTransferReceipt.addRemainPhysical(-qtyOverdelivered);
                                movementParentTransferReceipt.addRemainPhysicalUnit(-qtyOverdeliveredUnit);
                                movementParentTransferReceipt.pdsCWAddRemainPhysical(-pdsCWQtyOverdelivered);
                            }
                        }
                    }
                    parentMovement.updateBuffer();
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(WMSOrder _wmsOrder)
    {
        super(_wmsOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newWMSOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>WMSOrderTableType_Output</c> class.
    /// </summary>
    /// <param name="_wmsOrder">
    ///    The <c>WMSOrder</c> record to use to initialize the class.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>WMSOrderTableType_Output</c> class.
    /// </returns>
    public static WMSOrderTableType_Output newWMSOrder(WMSOrder _wmsOrder)
    {
        return new WMSOrderTableType_Output(_wmsOrder);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>