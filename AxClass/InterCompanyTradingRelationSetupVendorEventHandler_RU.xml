<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InterCompanyTradingRelationSetupVendorEventHandler_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InterCompanyTradingRelationSetupVendorEventHandler_RU</c> class implements event handlers for the <c>InterCompanyTradingRelationSetupVendor</c> form.
/// </summary>
internal class InterCompanyTradingRelationSetupVendorEventHandler_RU
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>InterCompanyTradingRelation_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables controls on datasource activate.
    /// </summary>
    /// <param name="sender">The <c>InterCompanyTradingRelation</c> form datasource.</param>
    /// <param name="e"><c>FormDataSourceEventArgs</c> instance.</param>
    [FormDataSourceEventHandler(formDataSourceStr(InterCompanyTradingRelationSetupVendor, InterCompanyTradingRelation), FormDataSourceEventType::Activated)]
    public static void InterCompanyTradingRelation_OnActivated(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormRun form = sender.formRun();

        if (form)
        {
            boolean isGTDApplicable = InterCompanyTradingRelationSetupVendorEventHandler_RU::isGDTApplicable(form);

            InterCompanyTradingRelationSetupVendorEventHandler_RU::setVisibleGTDFields(form, isGTDApplicable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGDTApplicable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if GTD dimension can be used for current Customer \ Vendor relation
    /// </summary>
    /// <param name = "_formRun">Form un object</param>
    /// <returns>True, if GTD dimension is applicable for curent Customer \ Vendor relation</returns>
    private static boolean isGDTApplicable(FormRun _formRun)
    {
        boolean     isGDTApplicable;

        if (_formRun)
        {
            DataAreaId  custAreaId = InterCompanyTradingRelationSetupVendorEventHandler_RU::getCustDataAreaSelection(_formRun);
            DataAreaId  vendAreaId = InterCompanyTradingRelationSetupVendorEventHandler_RU::getVendDataAreaSelection(_formRun);

            isGDTApplicable = InterCompanyTradingRelation::isRelationBetweenRUCountries(custAreaId, vendAreaId);
        }

        return isGDTApplicable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendDataAreaSelection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns current Vendor data area selection
    /// </summary>
    /// <param name = "_formRun">From run object</param>
    /// <returns>Vendor data area selection</returns>
    private static DataAreaId getVendDataAreaSelection(FormRun _formRun)
    {
        DataAreaId retDataAreaId;

        if (_formRun)
        {
            FormDataSource dataSourceVend = _formRun.dataSource(formDataSourceStr(InterCompanyTradingRelationSetupVendor, InterCompanyTradingPartner));

            if (dataSourceVend)
            {
                InterCompanyTradingPartner interCompanyTradingPartnerVend = dataSourceVend.cursor();

                retDataAreaId = interCompanyTradingPartnerVend.VendorDataAreaId;
            }
        }

        return retDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustDataAreaSelection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns current Customer data area selection
    /// </summary>
    /// <param name = "_formRun">From run object</param>
    /// <returns>Customer data area selection</returns>
    private static DataAreaId getCustDataAreaSelection(FormRun _formRun)
    {
        DataAreaId retDataAreaId;

        if (_formRun)
        {
            FormDataSource dataSourceCust = _formRun.dataSource(formDataSourceStr(InterCompanyTradingRelationSetupVendor, InterCompanyTradingPartnerCustomer));

            if (dataSourceCust)
            {
                InterCompanyTradingPartner InterCompanyTradingPartnerCustomer = dataSourceCust.cursor();

                retDataAreaId = InterCompanyTradingPartnerCustomer.CustomerDataAreaId;
            }
        }

        return retDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleGTDFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles GTD fields state.
    /// </summary>
    /// <param name = "_formRun">Form run object</param>
    /// <param name = "_visible">Visibility status</param>
    private static void setVisibleGTDFields(FormRun _formRun, boolean _visible)
    {
        if(_formRun)
        {
            FormDataSource dataSourceCust = _formRun.dataSource(formDataSourceStr(InterCompanyTradingRelationSetupVendor, InterCompanyActionPolicyTransferCustomer));
            if (dataSourceCust)
            {
                dataSourceCust.object(fieldNum(InterCompanyEndpointActionPolicyTransfer, InventGTDId_RU)).visible(_visible);
            }

            FormDataSource dataSourceVend = _formRun.dataSource(formDataSourceStr(InterCompanyTradingRelationSetupVendor, InterCompanyActionPolicyTransferVendorEx));
            if (dataSourceVend)
            {
                dataSourceVend.object(fieldNum(InterCompanyEndpointActionPolicyTransfer, InventGTDId_RU)).visible(_visible);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>