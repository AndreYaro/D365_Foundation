<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EuSalesListReportingEngine_AT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EUSalesListReportingEngine_AT</c> class extends the functionality of the 
/// <c>EUSalesListReportingEngine</c> class in order to support requirements that are specific to
/// Austria.
/// </summary>
#ISOCountryRegionCodes
[CountryRegionAttribute(#isoAT)]
class EuSalesListReportingEngine_AT extends EUSalesListReportingEngine implements BatchRetryable
{
    TaxAuthority    taxAuthority;
    NameAlias       customerInfo;
    Correct         correction;

    DialogField     dialogCorrection;
    DialogField     dialogTaxAuthority;
    DialogField     dialogCustomerInfo;

    #define.CurrentVersion(1)

    #localmacro.CurrentList
        taxAuthority,
        customerInfo,
        correction
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes and inserts a record ino the <c>EUSalesListReportingHeader</c> table.
    /// </summary>
    /// <returns>
    /// A <c>EUSalesListReportingHeader</c> table buffer.
    /// </returns>
    protected EUSalesListReportingHeader addHeader()
    {
        EUSalesListReportingHeader euSalesListReportingHeader;

        euSalesListReportingHeader = super();
        euSalesListReportingHeader.TaxAuthority             = taxAuthority;
        euSalesListReportingHeader.CustomerInformation_AT   = customerInfo;
        euSalesListReportingHeader.Correction               = correction;
        euSalesListReportingHeader.update();
        return euSalesListReportingHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialog.curFormGroup(dialogGroupExportOptions.formGroup());
        dialogCustomerInfo = dialog.addFieldValue(extendedTypeStr(NameAlias), customerInfo, "@SYS29051", "@SYS334905");

        dialog.addGroup("@SYS21937");
        dialogTaxAuthority = dialog.addFieldValue(extendedTypeStr(TaxAuthority), taxAuthority);

        dialog.addGroup("@SYS4768");
        dialogCorrection = dialog.addField(extendedTypeStr(Correct), "@SYS13069", "@SYS334906");

        dialogReportingPeriodType.visible(false);
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;
        ret = super();

        correction       = dialogCorrection.value();
        taxAuthority     = dialogTaxAuthority.value();
        customerInfo     = dialogCustomerInfo.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeLine</Name>
				<Source><![CDATA[
    protected EUSalesListReportingLine initializeLine(RefRecId _euSalesListReportingGroupRecId)
    {
        EUSalesListReportingLine euSalesListReportingLine;
        EUSalesList euSalesList;

        euSalesList = queryRun.get(tableNum(EUSalesList));

        euSalesListReportingLine           = super(_euSalesListReportingGroupRecId);
        euSalesListReportingLine.VATNum_DE = euSalesList.VATNum;

        return euSalesListReportingLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLastLineAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the item and service amounts to zero.
    /// </summary>
    /// <param name="_euSalesListReportingLine">
    /// The <c>EUSalesListReportingLine</c> table buffer.
    /// </param>
    /// <remarks>
    /// This method skips the call to the parent method if a correction is marked.For Austria, a correction
    /// file only contains some static tags and not any amounts.
    /// </remarks>
    protected void saveLastLineAmounts(EUSalesListReportingLine _euSalesListReportingLine)
    {
        if (correction)
        {
            if (_euSalesListReportingLine)
            {
                _euSalesListReportingLine.ItemAmountMST       = 0;
                _euSalesListReportingLine.TriangularAmountMST = 0;
                _euSalesListReportingLine.ServiceAmountMST    = 0;
                _euSalesListReportingLine.update();
                _euSalesListReportingLine.clear();
            }
        }
        else
        {
            super(_euSalesListReportingLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer         version = RunBase::getVersion(packedClass);
        container       packedSuper;

        switch (version)
        {
            case #CurrentVersion:
                [version, #currentList, packedSuper] = packedClass;
                if (packedSuper)
                {
                    return super(packedSuper);
                }
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;
        TaxAuthorityId  taxAuthorityId;
        ret     = super(calledFrom);

        if (ret)
        {
            if (!CompanyInfo::find().CoRegNum && !TaxRegistration::getCompanyTaxRegNum_W(toDate, fieldNum(CompanyInfo, CoRegNum)))
            {
                ret = checkFailed("@SYS343029");
            }

            if (!taxAuthority)
            {
                ret = checkFailed("@SYS63248");
            }
            else
            {
                taxAuthorityId = TaxAuthorityAddress::find(taxAuthority).TaxAuthorityId;
                if (strLen(taxAuthorityId) != strLen(strKeep(taxAuthorityId,'1234567890')) || str2int(taxAuthorityId) < 01 || str2int(taxAuthorityId) > 98)
                {
                    ret = checkFailed("@SYS91710");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return EUSalesListReportingEngine::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>