<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchLineType_Project</Name>
	<SourceCode>
		<Declaration><![CDATA[
class       PurchLineType_Project
extends     PurchLineType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEditScrap</Name>
				<Source><![CDATA[
    boolean  allowEditScrap()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultProjectGlobalCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the project category based on the procurement or sales category.
    /// </summary>
    /// <param name="_ecoResCategory">
    /// The procurement or sales category.
    /// </param>
    /// <returns>
    /// true if the project category has been initialized; otherwise, false.
    /// </returns>
    protected boolean getDefaultProjectGlobalCategory(RefRecId _ecoResCategory)
    {
        boolean         ret;
        ProjCategoryId  projCategoryId;

        projCategoryId = ProjCategory::getDefaultProjectGlobalCategory(_ecoResCategory);
        if (projCategoryId)
        {
            purchLine.ProjCategoryId = projCategoryId;
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromEcoResCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the project fields based on the procurement or sales category.
    /// </summary>
    /// <param name="_procurementCategory">
    /// The <c>ProcurementCategory</c> record with which to initialize the purchase line.
    /// </param>
    /// <param name="_name">
    /// The name to be assigned to the line.
    /// </param>
    protected void initFromEcoResCategory(PurchCategory _procurementCategory, ItemFreeTxt _name)
    {
        InventTable inventTable;
        boolean     ret;

        super(_procurementCategory, _name);

        if (purchLine.ItemId)
        {
            inventTable = purchLine.inventTable();
        }

        if (!inventTable.ProjCategoryId && _procurementCategory)
        {
            ret = this.getDefaultProjectGlobalCategory(_procurementCategory);

            if (ret)
            {
                purchLine.ProjLinePropertyId = ProjLinePropertySetup::findLinePropertyId(purchLine.ProjId,purchLine.ProjCategoryId);
                purchLine.ProjTaxItemGroupId = ProjParameters::taxItemGroupItem(purchLine.ProjCategoryId,purchLine.ItemId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    void initFromInventTable(
        InventTable     inventTable,
        boolean         _searchPrice = true,
        boolean         _setAddressFromInventDim = true,
        boolean         _initDateFields = true,
        boolean			_executeOnlyIfProductIsFullySpecified = false)
    {
        purchLine.setDefaultDimension();
        super(inventTable, _searchPrice, _setAddressFromInventDim, _initDateFields, _executeOnlyIfProductIsFullySpecified);

        purchLine.ProjCategoryId = this.getProjCategoryId(inventTable);
        if (!inventTable.ProjCategoryId && purchLine.ProcurementCategory)
        {
            this.getDefaultProjectGlobalCategory(purchLine.ProcurementCategory);
        }

        if (!purchLine.ProjCategoryId)
        {
            purchLine.ProjCategoryId = ProjParameters::find().ItemCategory;
        }

        purchLine.ProjSalesUnitId       = InventTableModule::find(purchLine.ItemId,ModuleInventPurchSales::Sales).UnitId;

        purchLine.initFromProjTable(purchLine.projTable());
        purchLine.ProjTaxItemGroupId    = ProjParameters::taxItemGroupItem(purchLine.ProjCategoryId,purchLine.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjCategoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ProjCategoryId</c> value.
    /// </summary>
    /// <param name = "_inventTable">A <c>InventTable</c> record.</param>
    /// <returns>
    /// A <c>ProjCategoryId</c> value.
    /// </returns>
    protected ProjCategoryId getProjCategoryId(InventTable _inventTable)
    {
        ProjCategoryId projCategoryId = _inventTable.ProjCategoryId ? _inventTable.ProjCategoryId : purchLine.ProjCategoryId;
        return projCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReturn</Name>
				<Source><![CDATA[
    void initReturn()
    {
        super();

        if (purchLine.ItemRefType != InventRefType::Sales &&
            purchLine.ItemRefType != InventRefType::InventJournal)
        {
            purchLine.Scrap = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    void initValue()
    {
        super();
        purchLine.ProjCategoryId = ProjParameters::find().ItemCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserting</Name>
				<Source><![CDATA[
    public void inserting()
    {
        if (purchLine.ProjId && !purchLine.ProjTransId)
        {
            purchLine.ProjTransId = ProjParameters::newTransId();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void  new(PurchLine _purchLine, PurchTable _purchTable = _purchLine.purchTable())
    {
        super(_purchLine,_purchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchStatus</Name>
				<Source><![CDATA[
    public void updatePurchStatus(PurchLine _purchLineOrig, InventTransIdSum  _inventTransIdSum, boolean _updateHeader)
    {
        ttsbegin;

        super(_purchLineOrig, _inventTransIdSum, _updateHeader);

        if (purchLine.ProjId && !purchLine.ProjTransId && (purchLine.PurchStatus != PurchStatus::Invoiced))
        {
            purchLine.ProjTransId = ProjParameters::newTransId();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updated</Name>
				<Source><![CDATA[
    public void updated(PurchLine _purchLineOrig)
    {
        super(_purchLineOrig);

        if (purchLine.isCanceled())
        {
            if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
            {
                // Remove tracking of line cancelled
                ProjFundingLimitTrackingManager::updateUsingSourceDocumentLine(purchLine.SourceDocumentLine, ProjFundingLimitTrackingAction::Release, true, false, true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    boolean  validateField(FieldId  fieldId)
    {
        boolean  ok = super(fieldId);

        if (ok)
        {
            switch (fieldId)
            {
                case(fieldNum(PurchLine, ProjCategoryId))      :   ok = purchLine.checkProjCategory();
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a <see cref="T:PurchLine" /> record based on logic that spans several current table
    /// buffers.
    /// </summary>
    /// <returns>
    /// true if the table buffer has valid information and may be saved; otherwise, false.
    /// </returns>
    boolean  validateWrite()
    {
        boolean             ok = true;

        ok = super();

        ProjStatusType projStatusType = ProjTable::find(purchLine.ProjId).status();
        ok = ok && projStatusType.journalCheckStatus();

        ok = ok && purchLine.checkProjCategory();

        ok = ok && ProjPost::newCheckTrans(purchLine).checkTrans();

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveSynchronizedSalesLine</Name>
				<Source><![CDATA[
    public void saveSynchronizedSalesLine(PurchLine _purchLineOrig, boolean _create)
    {
        SalesLine                           salesLine;
        SalesQty                            remainSalesPhysical;
        InventQty                           remainInventPhysical;

        super(_purchLineOrig, _create);

        salesLine = SalesLine::findInventTransId(purchLine.InventRefTransId, true);

        if (salesLine && 
            purchLine.ProjId &&
            purchLine.purchTable().isProjectSalesItemReqPO() &&
            ProjParameters::find().SkipPOAndItemReqSync == NoYes::No)
        {
            if (this.isPOCreatedFromFirmedPlannedOrders())
            {
                return;
            }

            AxSalesLine axSalesLine = AxSalesLine::newSalesLine(salesLine);

            if (this.mustSyncDefaultInventDimFromSalesLine(axSalesLine))
            {
                // always set the inventDimId on the axSalesLine, so item dimensions are not overwritten by axClass defaulting
                axSalesLine.parmInventDimId(purchLine.InventDimId);
            }

            if (salesLine.OverDeliveryPct != purchLine.OverDeliveryPct)
            {
                axSalesLine.parmOverDeliveryPct(purchLine.OverDeliveryPct);
            }
            
            if (salesLine.canInvoiceOrderLineFromCurrentSalesStatus())
            {
                if (salesLine.ProjId != purchLine.ProjId)
                {
                    axSalesLine.parmProjId(purchLine.ProjId);
                    if (ProjItemRequirementMultipleFundingSourcesFeatureHelper::isFeatureEnabled())
                    {
                        axSalesLine.parmProjFundingSource(purchLine.projTable(purchLine.ProjId).getProjectDefaultInvoiceAccount(false));
                    }
                }
                if (salesLine.ActivityNumber != purchLine.ActivityNumber)
                {
                    axSalesLine.parmActivityNumber(purchLine.ActivityNumber);
                }
                if (salesLine.ProjCategoryId != purchLine.ProjCategoryId)
                {
                    axSalesLine.parmProjCategoryId(purchLine.ProjCategoryId);
                }
                if (salesLine.ProjLinePropertyId != purchLine.ProjLinePropertyId)
                {
                    axSalesLine.parmProjLinePropertyId(purchLine.ProjLinePropertyId);
                }
                if (salesLine.TaxGroup != purchLine.ProjTaxGroupId)
                {
                    axSalesLine.parmTaxGroup(purchLine.ProjTaxGroupId);
                }
                if (salesLine.TaxItemGroup != purchLine.ProjTaxItemGroupId)
                {
                    axSalesLine.parmTaxItemGroup(purchLine.ProjTaxItemGroupId);
                }
                if (!DimensionDefaultFacade::areEqual(salesLine.DefaultDimension, purchLine.DefaultDimension))
                {
                    axSalesLine.parmDefaultDimension(purchLine.DefaultDimension);
                }

                EcoResProductUnitConverter unitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(salesLine.ItemId,
                                                                                                                             salesLine.InventDimId,
                                                                                                                             purchLine.PurchUnit,
                                                                                                                             salesLine.SalesUnit,
                                                                                                                             NoYes::Yes);
               
                Qty salesQty = unitConverter.convertValue(purchLine.PurchQty);

                boolean qtyModified = false;

                // If purchase line status is cancelled and sales qty is 0, then the sales line qty should not be updated.
                if (salesLine.SalesQty != salesQty && !(purchLine.PurchStatus == PurchStatus::Canceled && salesQty == 0))
                {
                    axSalesLine.parmSalesQty(salesQty);
                    qtyModified = true;
                }

                if (salesLine.SalesUnit != purchLine.PurchUnit)
                {
                    if (qtyModified)
                    {
                        Qty qty = (salesQty != 0) ? purchLine.QtyOrdered/salesQty : 1;

                        // Calculates sales price and cost price when sales order unit is different from purchase order unit then the prices should be updated in the multiples of <c>qty</c>
                        // as <c>qty</c> is getting updated as per the purchase order unit.
                        axSalesLine.parmSalesPrice(qty * purchLine.ProjSalesPrice);
                        CostPrice costPrice = SalesLineCostPriceInAccountingCurrencyFlight::instance().isEnabled() ?
                                                                                    purchLine.getPurchPriceInCompanyCurrency() :
                                                                                    purchLine.getPurchPriceInSalesCurrency(salesLine.CurrencyCode);
                        axSalesLine.parmCostPrice(qty * costPrice);
                    }
                    else
                    {
                        axSalesLine.parmSalesPrice(salesLine.SalesPrice);
                        axSalesLine.parmCostPrice(salesLine.CostPrice);
                    }
                }
                else
                {
                    if (purchLine.ProjSalesPrice && salesLine.SalesPrice != purchLine.ProjSalesPrice)
                    {
                        axSalesLine.parmSalesPrice(purchLine.ProjSalesPrice);
                    }
                    else
                    {
                        axSalesLine.parmSalesPrice(salesLine.SalesPrice);
                    }

                    if (purchLine.PriceUnit)
                    {
                        axSalesLine.parmPriceUnit(purchLine.PriceUnit);
                    }
                    else
                    {
                        axSalesLine.parmPriceUnit(salesLine.PriceUnit);
                    }

                    if (purchLine.PurchQty)
                    {
                        CostPrice costPrice =  SalesLineCostPriceInAccountingCurrencyFlight::instance().isEnabled() ?
                                                                                 purchLine.getPurchPriceInCompanyCurrency() :
                                                                                 purchLine.getPurchPriceInSalesCurrency(salesLine.CurrencyCode);
                        if (salesLine.CostPrice != costPrice)
                        {
                            axSalesLine.parmCostPrice(costPrice);
                        }
                    }
                }

                if (qtyModified)
                {
                    axSalesLine.salesLine().salesQtyModified();
                }                

                //set the references so that salesline can be marked over purchline
                if (salesLine.InventRefId != purchLine.PurchId)
                {
                    axSalesLine.parmInventRefId(purchLine.PurchId);
                }
                if (salesLine.InventRefTransId != purchLine.InventTransId)
                {
                    axSalesLine.parmInventRefTransId(purchLine.InventTransId);
                }
                if (salesLine.InventRefType != InventRefType::Purch)
                {
                    axSalesLine.parmInventRefType(InventRefType::Purch);
                }

                boolean remainQtyUpdated = false;

                if (salesLine.SalesStatus == SalesStatus::Backorder
                    && (salesLine.fieldChanged(fieldNum(SalesLine, RemainSalesPhysical))
                        || salesLine.fieldChanged(fieldNum(SalesLine, RemainInventPhysical))))
                {
                    remainSalesPhysical = salesLine.RemainSalesPhysical;
                    remainInventPhysical = salesLine.RemainInventPhysical;
                    remainQtyUpdated = true;
                }
                else if (salesLine.SalesStatus == SalesStatus::Backorder
                    && (purchLine.fieldChanged(fieldNum(PurchLine, RemainPurchPhysical))
                        || purchLine.fieldChanged(fieldNum(PurchLine, RemainInventPhysical))))
                {
                    remainSalesPhysical = unitConverter.convertValue(purchLine.RemainPurchPhysical);
                    remainInventPhysical = purchLine.RemainInventPhysical;
                    remainQtyUpdated = true;
                }

                if (remainQtyUpdated)
                {
                    // To avoid executing infinite loop when project sales order with direct delivery is cancelled.
                    str cacheKey =  purchLine.ProjId + ':' + purchLine.PurchId + ':' + purchLine.InventTransId + ':' + purchLine.ProjTransId;
                    SysGlobalCache globalCache = appl.globalCache();

                    boolean cacheValue = globalCache.get(classStr(InterCompanyUpdateRemPhys_SalesLine), cacheKey, null);

                    if (!cacheValue)
                    {
                        SalesUpdateRemain salesUpdateRemain = SalesUpdateRemain::construct();
                        salesUpdateRemain.updateDeliverRemainder(salesLine, remainSalesPhysical, remainInventPhysical);
                    }
                }

                axSalesLine.parmSkipUpdate(InterCompanySkipUpdate::Internal);
                axSalesLine.save();
            }
            else if (PurchLine.InventRefId && purchLine.isStocked() && !this.isPurchTableInterCompanyOrder())
            {
                if (salesLine.SalesUnit != purchLine.ProjSalesUnitId)
                {
                    axSalesLine.parmSalesUnit(purchLine.ProjSalesUnitId);
                }

                if (purchLine.PurchQty != salesLine.SalesQty)
                {
                    EcoResProductUnitConverter unitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(salesLine.ItemId,
                                                                                                                                     salesLine.InventDimId,
                                                                                                                                     purchLine.PurchUnit,
                                                                                                                                     salesLine.SalesUnit,
                                                                                                                                     NoYes::Yes);
                    Qty qty = unitConverter.convertValue(purchLine.PurchQty);
                    if (salesLine.QtyOrdered != qty)
                    {
                        axSalesLine.parmQtyOrdered(qty);
                    }
                    if (salesLine.SalesQty != qty)
                    {
                        axSalesLine.parmSalesQty(qty);
                        axSalesLine.salesLine().salesQtyModified();
                    }
                }

                axSalesLine.parmSkipUpdate(InterCompanySkipUpdate::Internal);
                axSalesLine.save();
            }

            // Updates the <c>InventRefId</c> value of <c>PurchLine</c> when <c>SalesId</c> value of <c>SalesLine</c> is modified.
            SalesLine salesLineLoc = axSalesLine.salesLine();
            if (salesLineLoc.SalesType == SalesType::ItemReq && purchLine.InventRefId != salesLineLoc.SalesId)
            {
				purchLine.InventRefId = axSalesLine.salesLine().SalesId;
            }

            this.interCompanyPurchSalesReferenceCreate(salesLine.InventRefId, salesLine.SalesId);

            if (purchLine.PurchStatus == PurchStatus::Canceled || purchLine.ProjId != _purchLineOrig.ProjId)
            {
                PurchLine purchlinelocal;

                // Keep purchline buffer before <c>purchLine.reread()</c> because its field value have not been updated into database yet
                // and another update being called in between, which have updated purch status as open order.
                // Old values can be copied into <c>purchLine</c> buffer after <c>purchLine.reread()</c>
                Global::buf2Buf(purchLine, purchlinelocal);

                purchLine.reread();

                Global::buf2Buf(purchlinelocal, purchLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPOCreatedFromFirmedPlannedOrders</Name>
				<Source><![CDATA[
    private boolean isPOCreatedFromFirmedPlannedOrders()
    {
        return purchLine.ReqPOId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyPurchSalesReferenceCreate</Name>
				<Source><![CDATA[
    private void interCompanyPurchSalesReferenceCreate(PurchId _purchId, SalesId _salesId)
    {
        InterCompanyPurchSalesReference interCompanyPurchSalesReference;

        if (_purchId
            && _salesId)
        {
            ttsbegin;
            select firstonly interCompanyPurchSalesReference
                where interCompanyPurchSalesReference.SalesId == _salesId
                    && interCompanyPurchSalesReference.PurchId == _purchId;

            if (!interCompanyPurchSalesReference)
            {
                interCompanyPurchSalesReference.clear();
                interCompanyPurchSalesReference.SalesId = _salesId;
                interCompanyPurchSalesReference.PurchId = _purchId;
                interCompanyPurchSalesReference.insert();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>