<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplayLicensePlateLabelBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkExecuteDisplayLicensePlateLabelBuilder</c> class is used to build license plate labels in the warehouse mobile device flows.
/// </summary>
public final class WHSWorkExecuteDisplayLicensePlateLabelBuilder
{
    private WHSRFPassthrough pass;
    private WHSWorkBuildId workBuildId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPass</Name>
				<Source><![CDATA[
    internal static WHSWorkExecuteDisplayLicensePlateLabelBuilder newFromPass(WHSRFPassthrough _pass)
    {
        var builder = new WHSWorkExecuteDisplayLicensePlateLabelBuilder();
        builder.pass = _pass;

        return builder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPrintAllLicensePlateLabelsForMultipleWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if multiple license plate labels should be printed for multiple work.
    /// If a single label is expected to be printed, this method should be extended to return false
    /// </summary>
    /// <returns>Returns true, as default behavior is that multiple license plate labels are printed.</returns>
    public boolean shouldPrintAllLicensePlateLabelsForMultipleWork()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkBuildId</Name>
				<Source><![CDATA[
    internal WHSWorkBuildId parmWorkBuildId(WHSWorkBuildId _workBuildId = workBuildId)
    {
        workBuildId = _workBuildId;

        return workBuildId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLicensePlateLabels</Name>
				<Source><![CDATA[
    internal void buildLicensePlateLabels()
    {
        if (WHSRFMenuItemTable::find(pass.parmMenuItem()).PrintLabel)
        {
            WHSLicensePlateId licensePlateId = pass.parmLicensePlateId();

            NumberOfRecords numberOfWorksWithSameTargetLP;
            
            
            numberOfWorksWithSameTargetLP = WHSWorkTable::numberOfWorksForTargetLicensePlateAndMaxWorkStatus(licensePlateId, WHSWorkStatus::InProcess);
            

            if (this.shouldPrintAllLicensePlateLabelsForMultipleWork())
            {
                if (licensePlateId)
                {
                    WHSWorkTable worksForTargetLicensePlateId;

                    // WorkBuildId can't be used as a filter here, as the created works can be different if both Cross docking and Quality item sampling are used at the same time.
                    // In that case, the Cross docking work will have a different WorkBuildId from Quality item sampling and Purchase order putaway.
                    while select WorkId from worksForTargetLicensePlateId
                        where worksForTargetLicensePlateId.TargetLicensePlateId == licensePlateId
                            && worksForTargetLicensePlateId.WorkStatus <= WHSWorkStatus::InProcess
                    {
                        this.buildLicensePlateLabelForWorkId(worksForTargetLicensePlateId.WorkId, numberOfWorksWithSameTargetLP, true);
                    }
                }
            }
            else
            {
                WHSWorkLine workLineForWorkBuildId = WHSWorkTable::getFirstWorkLineByWorkBuildId(workBuildId, pass.parmUserId());

                this.buildLicensePlateLabelForWorkId(workLineForWorkBuildId.WorkId, numberOfWorksWithSameTargetLP, false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLicensePlateLabelForWorkId</Name>
				<Source><![CDATA[
    private void buildLicensePlateLabelForWorkId(WHSWorkId _workId, NumberOfRecords _numberOfWorksWithSameTargetLP, boolean _isLicensePlateLabelForMultipleWork)
    {
        WHSLicensePlateLabelBuild labelBuild = new WHSLicensePlateLabelBuild(_workId, null, pass.parmMenuItem(), pass.parmUserId());

        if (_numberOfWorksWithSameTargetLP > 1 && _isLicensePlateLabelForMultipleWork)
        {
            labelBuild.parmMultipleRelatedWorks(true);
        }
        labelBuild.buildLicensePlateLabels();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>