<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendNettingAmountCalculator</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class CustVendNettingAmountCalculator implements INettingAmountCalculator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void calculate(NettingAmountDistribution _distribution)
    {
        CustVendNettingExecution execution = CustVendNettingExecution::find(_distribution.getExecutionRecId());
        boolean reverseSign = _distribution.getReverseSign();

        changecompany(execution.DataAreaId)
        {
            CustVendNettingTransMarked nettingTransMarked;
            CustTransOpen custTransOpen;
            CustTransOpenLine custTransOpenLine;
            VendTransOpen vendTransOpen;

            // Add '+ 0' after 'nettingTransMarked.RefRecId == xxx.RecId' is to avoid system 
            // automatically add condition T1.DataAreaId == T2.DataAreaId.
            select crosscompany sum(AmountCur) from custTransOpen
                exists join nettingTransMarked
                    where nettingTransMarked.CustVendNettingExecution == execution.RecId
                        && nettingTransMarked.RefTableId == tableNum(CustTransOpen)
                        && nettingTransMarked.RefRecId == custTransOpen.RecId + 0
                        && custTransOpen.DataAreaId == execution.CreditCompany;

            select crosscompany sum(AmountCur) from custTransOpenLine
                exists join nettingTransMarked
                    where nettingTransMarked.CustVendNettingExecution == execution.RecId
                        && nettingTransMarked.RefTableId == tableNum(CustTransOpenLine)
                        && nettingTransMarked.RefRecId == custTransOpenLine.RecId + 0
                        && custTransOpenLine.DataAreaId == execution.CreditCompany;

            select crosscompany sum(AmountCur) from vendTransOpen
                exists join nettingTransMarked
                    where nettingTransMarked.CustVendNettingExecution == execution.RecId
                        && nettingTransMarked.RefTableId == tableNum(VendTransOpen)
                        && nettingTransMarked.RefRecId == vendTransOpen.RecId + 0
                        && vendTransOpen.DataAreaId == execution.DebitCompany;

            AmountCur rawCustNetTotalAmount = custTransOpen.AmountCur + custTransOpenLine.AmountCur;
            this.ensureCustAmountSignIsCorrect(rawCustNetTotalAmount, reverseSign);

            AmountCur custNetTotalAmount = this.getCustAmount(min(abs(rawCustNetTotalAmount), abs(vendTransOpen.AmountCur)), reverseSign);
            this.ensureBothSidesHaveTransactionAmounts(custNetTotalAmount);

            AmountCur vendNetTotalAmount = -custNetTotalAmount;
            _distribution.setCreditTotalAmountCur(custNetTotalAmount);
            _distribution.setDebitTotalAmountCur(custNetTotalAmount);

            AmountCur custTransNetAmount = 0;
            AmountCur vendTransNetAmount = 0;
            Map creditDistribution = new Map(Types::Container, Types::Real);
            Map debitDistribution = new Map(Types::Container, Types::Real);

            while select RefRecId, RefTableId from nettingTransMarked
                    order by Sequence
                where nettingTransMarked.CustVendNettingExecution == execution.RecId
                    && (nettingTransMarked.RefTableId == tableNum(CustTransOpen)
                        || nettingTransMarked.RefTableId == tableNum(CustTransOpenLine))
            {
                if (this.checkCustAmount(custNetTotalAmount, reverseSign))
                {
                    custTransNetAmount = this.calculateCustTransNetAmount(execution.CreditCompany, custNetTotalAmount, nettingTransMarked.RefTableId, nettingTransMarked.RefRecId, reverseSign);
                    if (this.checkCustAmount(custTransNetAmount, reverseSign))
                    {
                        creditDistribution.insert([nettingTransMarked.RefTableId, nettingTransMarked.RefRecId], custTransNetAmount);
                        custNetTotalAmount -= custTransNetAmount;
                    }
                }
                else
                {
                    break;
                }
            }

            while select RefRecId, RefTableId from nettingTransMarked
                    order by Sequence
                where nettingTransMarked.CustVendNettingExecution == execution.RecId
                    && nettingTransMarked.RefTableId == tableNum(VendTransOpen)
            {
                if (this.checkVendAmount(vendNetTotalAmount, reverseSign))
                {
                    vendTransNetAmount = this.calculateVendTransNetAmount(execution.DebitCompany, vendNetTotalAmount, nettingTransMarked.RefRecId, reverseSign);
                    if (this.checkVendAmount(vendTransNetAmount, reverseSign))
                    {
                        debitDistribution.insert([nettingTransMarked.RefTableId, nettingTransMarked.RefRecId], vendTransNetAmount);
                        vendNetTotalAmount -= vendTransNetAmount;
                    }
                }
                else
                {
                    break;
                }
            }

            this.ensureBothSidesHaveNonEmptyDistribution(creditDistribution, debitDistribution);
            _distribution.setCreditDistribution(creditDistribution);
            _distribution.setDebitDistribution(debitDistribution);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCustTransNetAmount</Name>
				<Source><![CDATA[
    private AmountCur calculateCustTransNetAmount(CompanyId _company, AmountCur _custNetTotalAmount, RefTableId _refTableId, RecId _recId, boolean _reverse)
    {
        AmountCur amountCur;
        changecompany(_company)
        {
            if (_refTableId == tableNum(CustTransOpen))
            {
                amountCur = custTransOpen::find(_recId).AmountCur;
            }
            else if (_refTableId == tableNum(CustTransOpenLine))
            {
                amountCur = custTransOpenLine::find(_recId).AmountCur;
            }
        }

        return this.checkCustAmount(amountCur, _reverse) ? this.getCustAmount(min(abs(_custNetTotalAmount), abs(amountCur)), _reverse) : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateVendTransNetAmount</Name>
				<Source><![CDATA[
    private AmountCur calculateVendTransNetAmount(CompanyId _company, AmountCur _vendNetTotalAmount, RecId _recId, boolean _reverse)
    {
        VendTransOpen vendTransOpen;

        changecompany(_company)
        {
            select AmountCur from vendTransOpen
                where vendTransOpen.RecId == _recId;
        }

        return this.checkVendAmount(vendTransOpen.AmountCur, _reverse) ? this.getVendAmount(min(abs(_vendNetTotalAmount), abs(vendTransOpen.AmountCur)), _reverse) : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCustAmount</Name>
				<Source><![CDATA[
    private boolean checkCustAmount(AmountCur _custAmount, boolean _reverse)
    {
        return _reverse ? _custAmount < 0 : _custAmount > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustAmount</Name>
				<Source><![CDATA[
    private AmountCur getCustAmount(AmountCurPositive _custAmountAbs, boolean _reverse)
    {
        return _reverse ? -_custAmountAbs : _custAmountAbs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendAmount</Name>
				<Source><![CDATA[
    private AmountCur getVendAmount(AmountCurPositive _vendAmountAbs, boolean _reverse)
    {
        return _reverse ? _vendAmountAbs : -_vendAmountAbs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVendAmount</Name>
				<Source><![CDATA[
    private boolean checkVendAmount(AmountCur _vendAmount, boolean _reverse)
    {
        return _reverse ? _vendAmount > 0 : _vendAmount < 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureBothSidesHaveTransactionAmounts</Name>
				<Source><![CDATA[
    private void ensureBothSidesHaveTransactionAmounts(AmountCur _totalAmount)
    {
        if (_totalAmount == 0)
        {
            throw error("@CashManagement:CustVendNettingAllTransOnOneSideHaveBeenSettled");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureBothSidesHaveNonEmptyDistribution</Name>
				<Source><![CDATA[
    private void ensureBothSidesHaveNonEmptyDistribution(Map _creditDistribution, Map _debitDistribution)
    {
        if (!_creditDistribution.elements() || !_debitDistribution.elements())
        {
            Debug::assert(false); // This should not happen
            throw error("@CashManagement:CustVendNettingAllTransOnOneSideHaveBeenSettled");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureCustAmountSignIsCorrect</Name>
				<Source><![CDATA[
    private void ensureCustAmountSignIsCorrect(AmountCur _custAmount, boolean _reverse)
    {
        if ((_reverse && _custAmount > 0) || (!_reverse && _custAmount < 0))
        {
            Debug::assert(false); // This should not happen
            throw error("@CashManagement:CustVendNettingSignOfTransIsWrong");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>