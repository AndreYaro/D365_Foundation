<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPrintInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
//
//  The ProjPrintInvoice class is obsolete and will be removed in a future release.
//  Use the ProjInvoiceController class instead.
//
[SysObsoleteAttribute('Use PSAProjAndContractInvoiceController instead.', false, 14\01\2017)]
class ProjPrintInvoice extends RunBaseBatch implements BatchRetryable
{
    QueryRun    queryRun;

    boolean             includeInvoice;
    boolean             includeOnAcc;
    PrintCopyOriginal   printType;

    TransDate   startDate;
    TransDate   endDate;

    container   printerSettings;

    #define.CurrentVersion(2)

    #localmacro.CurrentList
        includeInvoice,
        includeOnAcc,
        printType,
        startDate,
        endDate
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase   dialog = Dialog::newFormnameRunbase(formStr(ProjPrintInvoiceDialog),this);

        dialog = this.dialogInternal(dialog);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the internal variables.
    /// </summary>
    /// <remarks>
    /// This method is called when no <c>SysLastValue</c> record can be found when calling the
    /// <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        super();

        queryRun = this.queryBuild();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new()
    {
        super();

        queryRun = this.queryBuild();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container pack()
    {
        return [#CurrentVersion, #CurrentList,queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndDate</Name>
				<Source><![CDATA[
        public TransDate parmEndDate(TransDate _endDate = endDate)
    {
        endDate = _endDate;

        return endDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeInvoice</Name>
				<Source><![CDATA[
        public boolean parmIncludeInvoice(boolean _includeInvoice = includeInvoice)
    {
        includeInvoice = _includeInvoice;

        return includeInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeOnAcc</Name>
				<Source><![CDATA[
        public boolean parmIncludeOnAcc(boolean _includeOnAcc = includeOnAcc)
    {
        includeOnAcc = _includeOnAcc;

        return includeOnAcc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintType</Name>
				<Source><![CDATA[
        public PrintCopyOriginal parmPrintType(PrintCopyOriginal _printType = printType)
    {
        printType = _printType;

        return printType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartDate</Name>
				<Source><![CDATA[
        public TransDate parmStartDate(TransDate _startDate = startDate)
    {
        startDate = _startDate;

        return startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printerSettingsPrintInvoice</Name>
				<Source><![CDATA[
        container printerSettingsPrintInvoice()
    {
        return printerSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
        protected QueryRun queryBuild()
    {
        queryRun = new QueryRun(queryStr(projPrintInvoice));

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    /// The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    /// This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    /// dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    /// in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        ProjInvoiceJour                 projInvoiceJour;
        ProjInvoiceController           controller;
        Args                            parameters = new Args();

        boolean             recordFound = false;

        if (!startDate)
        {
            startDate = dateNull();
        }

        if (!endDate)
        {
            endDate = dateMax();
        }

        try
        {
            parameters.caller(this);
            parameters.parmEnumType(enumNum(PrintCopyOriginal));

            queryRun.reset();
            while (queryRun.next())
            {
                projInvoiceJour = queryRun.get(tableNum(ProjInvoiceJour));

                if (((projInvoiceJour.ProjInvoiceType == ProjInvoiceType::Invoice && includeInvoice)
                        || (projInvoiceJour.ProjInvoiceType == ProjInvoiceType::OnAccount && includeOnAcc))
                    && projInvoiceJour.InvoiceDate >= startDate && projInvoiceJour.InvoiceDate <= endDate)
                {
                    parameters.record(projInvoiceJour);
                    // Store if a record is found, Common buffer will be empty at end of loop
                    if (!recordFound && parameters.record())
                    {
                        recordFound = true;
                    }

                    parameters.parmEnum(this.parmPrintType());
                    parameters.menuItemName(menuitemOutputStr(ProjPrintInvoice));
                }
            }
            if (!recordFound)
            {
                // No invoices fulfilled the selected (by the user) criteria.
                info("@SYS91621");
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    /// true if the task is run on the server; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Your classes that extend <c>RunBaseBatch</c> must override the <c>runsImpersonated</c> method and
    /// return false if you want those tasks to run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to add a select button to the dialog.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    /// return a valid <c>queryRun</c> object.If you change the return value to false the button will no
    /// longer be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean unpack(container packedClass)
    {
        Integer         version         = RunBase::getVersion(packedClass);
        container       packedQuery;
        boolean         ret = true;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,packedQuery] = packedClass;

                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }
                else
                {
                    queryRun = this.queryBuild();
                }

                break;
            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePrinterSettingsPrintInvoice</Name>
				<Source><![CDATA[
        void updatePrinterSettingsPrintInvoice(container   _printerSettings)
    {
        printerSettings = _printerSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
        public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        ret = super(_calledFrom);

        if (!includeInvoice && !includeOnAcc)
        {
            ret = checkFailed("@SYS91583");
        }

        if (startDate > endDate && endDate)
        {
            ret = checkFailed("@SYS91020");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>callPrinterSettingsPrintInvoice</Name>
				<Source><![CDATA[
        static boolean callPrinterSettingsPrintInvoice(ProjPrintInvoice projPrintInvoice)
    {
    #PrintMgmtSetup
        SRSPrintDestinationSettings printSettings = new SRSPrintDestinationSettings(projPrintInvoice.printerSettingsPrintInvoice());
        boolean ok = SrsReportRunUtil::showSettingsDialog(printSettings, #SRSPrintDestinationTokenPrintMgmt, enum2Symbol(enumNum(PrintMgmtDocumentType), toanytype(PrintMgmtDocumentType::ProjectInvoice)));

        projPrintInvoice.updatePrinterSettingsPrintInvoice(printSettings.pack());
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>