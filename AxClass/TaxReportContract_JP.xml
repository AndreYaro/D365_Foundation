<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportContract_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxReportContract_JP</c> is the data contract for <c>TaxReportCalcSheet_JP</c> and <c>TaxReport_JP</c> report.
/// </summary>
[DataContract]
public class TaxReportContract_JP implements ISrsReportFileFormatContract, TaxReportIOutputParameters_JP
{
    protected TaxPeriod taxPeriod;
    protected FromDate fromDate;
    protected ToDate toDate;
    protected TypeOfDeclaration_JP typeOfDeclaration;

    protected SRSReportFileFormat fileFormat;
    protected boolean isShowFileFormat = true;
    protected SRSCatalogItemName reportName;
    protected TaxReportDataLayout_JP dataLayout;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    [DataMember('FromDate')]
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxPeriod</Name>
				<Source><![CDATA[
    [DataMember('TaxPeriod')]
    public TaxPeriod parmTaxPeriod(TaxPeriod _taxPeriod = taxPeriod)
    {
        taxPeriod = _taxPeriod;

        return taxPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    [DataMember('ToDate')]
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTypeOfDeclaration</Name>
				<Source><![CDATA[
    [DataMember('TypeofDec')]
    public TypeOfDeclaration_JP parmTypeOfDeclaration(TypeOfDeclaration_JP _typeOfDeclaration = typeOfDeclaration)
    {
        typeOfDeclaration = _typeOfDeclaration;

        return typeOfDeclaration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileFormat</Name>
				<Source><![CDATA[
    [DataMember('FileFormat')]
    public SRSReportFileFormat parmFileFormat(SRSReportFileFormat _fileFormat = fileFormat)
    {
        fileFormat = _fileFormat;

        return fileFormat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsShowFileFormat</Name>
				<Source><![CDATA[
    [DataMember('IsShowFileFormat')]
    public boolean parmIsShowFileFormat(boolean _isShowFileFormat = isShowFileFormat)
    {
        isShowFileFormat = _isShowFileFormat;

        return isShowFileFormat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportName</Name>
				<Source><![CDATA[
    [DataMember('ReportName')]
    public SRSCatalogItemName parmReportName(SRSCatalogItemName _reportName = reportName)
    {
        reportName = _reportName;

        return reportName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataLayout</Name>
				<Source><![CDATA[
    [DataMember('DataLayout')]
    public TaxReportDataLayout_JP parmDataLayout(TaxReportDataLayout_JP _dataLayout = dataLayout)
    {
        dataLayout = _dataLayout;

        return dataLayout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameter</Name>
				<Source><![CDATA[
    internal static TaxReportContract_JP newFromParameter(TaxReportIParameters_JP _parameters)
    {
        if (!_parameters)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        TaxReportContract_JP contract = new TaxReportContract_JP();

        contract.initializeFromParameters(_parameters);

        ISrsReportFileFormatContract reportFormatContract = _parameters as ISrsReportFileFormatContract;
        if (reportFormatContract)
        {
            contract.parmFileFormat(reportFormatContract.parmFileFormat());
            contract.parmIsShowFileFormat(reportFormatContract.parmIsShowFileFormat());
        }

        return contract;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>