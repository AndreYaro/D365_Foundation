<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqFuturesActiveSafetyStockRequirementsTracker</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqFuturesActiveSafetyStockRequirementsTracker</c> class keeps track of safety stock issue coverage,
/// which is used to match safety stock receipts, and calculate their futures based on pairing them
/// with with issues.
/// </summary>
public class ReqFuturesActiveSafetyStockRequirementsTracker
{
    protected ReqFuturesActiveSafetyStockRequirement    safetyStockRequirements[];
    protected int                                       currentSafetyStockRequirementIndex;
    protected int                                       numberOfSafetyStockRequirements;
    protected boolean                                   useLifoOrder;
    protected ReqSetupDim                               setupDim;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the <c>ReqFuturesActiveSafetyStockRequirementsTracker</c> class.
    /// </summary>
    /// <param name = "_setupDim">
    /// Master planning parameters for a specific combination of item and coverage dimension values.
    /// </param>
    /// <param name = "_planVersion">
    /// The plan version to load issues from.
    /// </param>
    /// <param name = "_useLifoOrder">
    /// Determines if the issues should be matched with receipts in LIFO order.
    /// </param>
    /// <returns>
    /// A new instance of the <c>ReqFuturesActiveSafetyStockRequirementsTracker</c> class.
    /// </returns>
    public static ReqFuturesActiveSafetyStockRequirementsTracker construct(
        ReqSetupDim _setupDim,
        RefRecId _planVersion,
        boolean _useLifoOrder = false)
    {
        ReqFuturesActiveSafetyStockRequirementsTracker newCollection = new ReqFuturesActiveSafetyStockRequirementsTracker();
        
        newCollection.loadSafetyStockRequirements(_setupDim, _planVersion, _useLifoOrder);

        return newCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadSafetyStockRequirements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads in safety stock issue coverage, and translate them to requirements.
    /// </summary>
    /// <param name = "_setupDim">
    /// Master planning parameters for a specific combination of item and coverage dimension values.
    /// </param>
    /// <param name = "_planVersion">
    /// The plan version to load issues from.
    /// </param>
    /// <param name = "_useLifoOrder">
    /// Determines if the issues should be matched with receipts in LIFO order.
    /// </param>
    protected void loadSafetyStockRequirements(
        ReqSetupDim _setupDim,
        RefRecId _planVersion,
        boolean _useLifoOrder)
    {
        ReqTransCov safetyStockCoverage;
        ReqTrans    safetyStockIssue;
        ReqTrans    safetyStockCoveringReceipt;
        int         i = 0;

        useLifoOrder = _useLifoOrder;
        setupDim = _setupDim;

        ItemId itemId = _setupDim.itemId();
        InventDimId covInventDimId = _setupDim.parmCovInventDimId();

        while select FuturesDate, FuturesTime, ReqDate from safetyStockCoveringReceipt
            order by FuturesDate, FuturesTime
            where safetyStockCoveringReceipt.PlanVersion == _planVersion
                && safetyStockCoveringReceipt.ItemId == itemId
                && safetyStockCoveringReceipt.CovInventDimId == covInventDimId
            join Qty, RecId from safetyStockCoverage
                where safetyStockCoverage.ReceiptRecId == safetyStockCoveringReceipt.RecId
                    && safetyStockCoverage.PlanVersion == _planVersion
                    && safetyStockCoverage.ItemId == itemId
            exists join safetyStockIssue
                where safetyStockCoverage.IssueRecId == safetyStockIssue.RecId
                    && safetyStockIssue.RefType == ReqRefType::SafetyInvent
                    && safetyStockIssue.PlanVersion == _planVersion
                    && safetyStockIssue.ItemId == itemId
                    && safetyStockIssue.CovInventDimId == covInventDimId
                    && safetyStockIssue.Qty < 0
        {
            var requirement = ReqFuturesActiveSafetyStockRequirement::construct();
            requirement.coverageRecId = safetyStockCoverage.RecId;
            requirement.quantity = -safetyStockCoverage.Qty;
            requirement.reqDate = safetyStockCoveringReceipt.ReqDate;
            requirement.futuresDate = safetyStockCoveringReceipt.FuturesDate;
            requirement.futuresTime = safetyStockCoveringReceipt.FuturesTime;

            i++;
            safetyStockRequirements[i] = requirement;
        }
        numberOfSafetyStockRequirements = i;
        currentSafetyStockRequirementIndex = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>ReqSetupDim</c> that the collection was initiated with.
    /// </summary>
    /// <returns>
    /// The <c>ReqSetupDim</c> that the collection was initiated with.
    /// </returns>
    public ReqSetupDim setupDim()
    {
        return setupDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>matchRecieptRequirements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Matches a <c>ReqTrans</c> record of a safety stock receipt with a safety stock issue, based on the
    /// requirement representing the issue coverage.
    /// </summary>
    /// <param name = "_reqTrans">
    /// A <c>ReqTrans</c> record of a safety stock receipt.
    /// </param>
    public void matchRecieptRequirements(ReqTrans _safetyStockReceiptReqTrans)
    {
        if (useLifoOrder)
        {
            currentSafetyStockRequirementIndex = numberOfSafetyStockRequirements;
        }

        InventQty unmatchedRecieptQuantity  = _safetyStockReceiptReqTrans.Qty;
        FuturesDate highestFuturesDate      = _safetyStockReceiptReqTrans.ReqDate;
        SchedTime highestFuturesDateTime    = _safetyStockReceiptReqTrans.FuturesTime;

        while (unmatchedRecieptQuantity > 0)
        {
            ReqFuturesActiveSafetyStockRequirement currentRequirement = safetyStockRequirements[currentSafetyStockRequirementIndex];
            if (!currentRequirement)
            {
                break;
            }

            if (useLifoOrder && currentRequirement.reqDate > _safetyStockReceiptReqTrans.ReqDate)
            {
                currentSafetyStockRequirementIndex--;
                continue;
            }

            if (!highestFuturesDate || currentRequirement.futuresDate > highestFuturesDate)
            {
                highestFuturesDate = currentRequirement.futuresDate;
                highestFuturesDateTime = currentRequirement.futuresTime;
            }

            InventQty matchedQuantity = min(unmatchedRecieptQuantity, currentRequirement.quantity);
            unmatchedRecieptQuantity -= matchedQuantity;
            currentRequirement.quantity -= matchedQuantity;

            if (unmatchedRecieptQuantity > 0)
            {
                currentSafetyStockRequirementIndex += (useLifoOrder) ? -1 : 1;
            }
        }

        if (highestFuturesDate > _safetyStockReceiptReqTrans.ReqDate)
        {
            _safetyStockReceiptReqTrans.FuturesDate = highestFuturesDate;
            _safetyStockReceiptReqTrans.FuturesTime = highestFuturesDateTime;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTradableQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs and returns a <c>Map</c> that contains <c>RecTransCov</c> <c>RecId</c>s as keys,
    /// and the tradable quantities as values.
    /// </summary>
    /// <returns>
    /// A <c>Map</c> that contains <c>RecTransCov</c> <c>RecId</c>s as keys, and the tradable quantities as values.
    /// </returns>
    public Map getTradableQuantities()
    {
        Map tradableQuantities = new Map(Types::Int64, Types::Real);

        for (int i = 1; i <= numberOfSafetyStockRequirements; i++)
        {
            ReqFuturesActiveSafetyStockRequirement safetyStockRequirement = safetyStockRequirements[i];
            tradableQuantities.insert(safetyStockRequirement.coverageRecId, abs(safetyStockRequirement.quantity));
        }

        return tradableQuantities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>