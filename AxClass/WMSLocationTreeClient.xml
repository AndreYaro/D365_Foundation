<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsLocationTreeClient</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WmsLocationTreeClient extends WMSLocationTreeBase
{
    #resAppl

    FormTreeControl         tree;
    Object                  caller;

    container               nodeInfo[];
    WMSLocationCoordinates  nodeLevel;
    TreeItemIdx             nodeParent;
    container               nodeCon;
    boolean                 nodeExpanded;
    ImageListAppl_WMS       imageList;

    InventLocationId    inventLocationId;
    WMSAisleId          aisle;
    WMSRackId           rack;
    WMSLevelId          level;
    WMSLocationId       locationId;

    #LOCALMACRO.NodeInfo
         nodeLevel,
         nodeParent,
         nodeExpanded,
         nodeCon
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>aisles</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a container that contains information about the aisles for the specified warehouse.
    /// </summary>
    /// <param name="_inventLocationId">
    /// The warehouse for which the aisles are retrieved.
    /// </param>
    /// <returns>
    /// A container that contains the information about the aisles for the specified warehouse.
    /// </returns>
    protected container aisles(InventLocationId _inventLocationId)
    {
        return WMSLocationTreeServer::getAislesForWarehouse(this.pack(), wmsLocationFormCaller, callerId, [_inventLocationId]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAisleLinkNode</Name>
				<Source><![CDATA[
    private void buildAisleLinkNode(WMSAisle _wmsAisleCaller)
    {
        callerId = [_wmsAisleCaller.InventLocationId, _wmsAisleCaller.AisleId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildBaseNode</Name>
				<Source><![CDATA[
    public void buildBaseNode(Args _args)
    {
        container           inventLocations;
        Counter             i;

        tree.deleteAll();
        nodeInfo[0] = conNull();

        if (_args.dataset())
        {
            switch (_args.dataset())
            {
                case tableNum(InventLocation):
                    wmsLocationFormCaller = WMSLocationFormCaller::InventLocation;
                    this.buildInventLocationLinkNode(_args.record() as InventLocation);
                    break;
                case tableNum(WMSAisle):
                    wmsLocationFormCaller = WMSLocationFormCaller::WMSAisle;
                    this.buildAisleLinkNode(_args.record() as WMSAisle);
                    break;
                default:
                    throw(error(strFmt("@SYS19306", funcName())));
            }
        }
        else
        {
            callerId = conNull();
            wmsLocationFormCaller = WMSLocationFormCaller::None;
        }
        inventLocations = this.inventLocations();
        for (i = 1; i <= conLen(inventLocations); i++)
        {
            [#ILInfo] = conPeek(inventLocations, i);
            this.createInventLocationNode(#ILInfo, false, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventLocationLinkNode</Name>
				<Source><![CDATA[
    private void buildInventLocationLinkNode(InventLocation _inventLocationCaller)
    {
        callerId = [_inventLocationCaller.InventLocationId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAisleNode</Name>
				<Source><![CDATA[
    private FormTreeItem createAisleNode(
        WMSAisleId      _wmsAisleId,
        str             _aisleText,
        NoYes           _sortDescending,
        TreeItemIdx     _nodeId,
        boolean         _expand             = false,
        boolean         _markAsExpanded     = false)
    {
        FormTreeItem        item;
        TreeItemIdx         childNodeId;

        if (_sortDescending)
        {
            item = new FormTreeItem(_aisleText, imageList.image(#ImageWMSSortDescending));
        }
        else
        {
            item = new FormTreeItem(_aisleText, imageList.image(#ImageWMSSortAscending));
        }
        item.data(WMSLocationCoordinates::Aisle);
        item.stateExpanded(_expand);
        item.children(true);
        childNodeId = tree.addItem(_nodeId, 0, item);
        nodeInfo[childNodeId] = [WMSLocationCoordinates::Aisle, _nodeId, _markAsExpanded, [_wmsAisleId]];
        return tree.getItem(childNodeId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventLocationNode</Name>
				<Source><![CDATA[
    private FormTreeItem createInventLocationNode(
        InventLocationId    _inventLocationId,
        str                 _inventLocationText,
        boolean             _expand             = false,
        boolean             _markAsExpanded     = false)
    {
        FormTreeItem        item;
        TreeItemIdx         childNodeId;

        item = new FormTreeItem(_inventLocationText, imageList.image(#ImageWMSStore));
        item.data(WMSLocationCoordinates::InventLocation);
        item.stateExpanded(_expand);
        item.children(true);
        childNodeId = tree.addItem(0, 0, item);
        nodeInfo[childNodeId] = [WMSLocationCoordinates::InventLocation, 0, _markAsExpanded, [_inventLocationId]];
        return tree.getItem(childNodeId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLevelNode</Name>
				<Source><![CDATA[
    private FormTreeItem createLevelNode(
        WMSLevelId      _wmsLevelId,
        str             _levelText,
        TreeItemIdx     _nodeId,
        boolean         _expand             = false,
        boolean         _markAsExpanded     = false)
    {
        FormTreeItem        item;
        TreeItemIdx         childNodeId;

        item = new FormTreeItem(_levelText, imageList.image(#ImageWMSLevel));
        item.data(WMSLocationCoordinates::Shelf);
        item.stateExpanded(_expand);
        item.children(true);
        childNodeId = tree.addItem(_nodeId, 0, item);
        nodeInfo[childNodeId] = [WMSLocationCoordinates::Shelf, _nodeId, _markAsExpanded, [_wmsLevelId]];
        return tree.getItem(childNodeId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLocationNode</Name>
				<Source><![CDATA[
    private FormTreeItem createLocationNode(
        WMSLocationId   _wmsLocationId,
        str             _locationText,
        TreeItemIdx     _nodeId)
    {
        FormTreeItem        item;
        TreeItemIdx         childNodeId;

        if (!_nodeId)
        {
            return null;
        }

        item = new FormTreeItem(_locationText, imageList.image(#ImageWMSPosition));
        item.data(WMSLocationCoordinates::Bin);
        item.stateExpanded(false);
        childNodeId = tree.addItem(_nodeId, 0, item);
        nodeInfo[childNodeId] = [WMSLocationCoordinates::Bin, _nodeId, true, [_wmsLocationId]];
        return tree.getItem(childNodeId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRackNode</Name>
				<Source><![CDATA[
    private FormTreeItem createRackNode(
        WMSRackId       _wmsRackId,
        str             _rackText,
        TreeItemIdx     _nodeId,
        boolean         _expand             = false,
        boolean         _markAsExpanded     = false)
    {
        FormTreeItem        item;
        TreeItemIdx         childNodeId;

        item = new FormTreeItem(_rackText, imageList.image(#ImageWMSRack));
        item.data(WMSLocationCoordinates::Rack);
        item.stateExpanded(_expand);
        item.children(true);
        childNodeId = tree.addItem(_nodeId, 0, item);
        nodeInfo[childNodeId] = [WMSLocationCoordinates::Rack, _nodeId, _markAsExpanded, [_wmsRackId]];
        return tree.getItem(childNodeId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>decodeNode</Name>
				<Source><![CDATA[
    private void decodeNode(
        TreeItemIdx     _idx,
        boolean         _decodeParents)
    {
        [#NodeInfo] = nodeInfo[_idx];
        switch (nodeLevel)
        {
            case WMSLocationCoordinates::InventLocation:
                [inventLocationId] = nodeCon;
                break;
            case WMSLocationCoordinates::Aisle:
                [aisle] = nodeCon;
                break;
            case WMSLocationCoordinates::Rack:
                [rack] = nodeCon;
                break;
            case WMSLocationCoordinates::Shelf:
                [level] = nodeCon;
                break;
            case WMSLocationCoordinates::Bin:
                [locationId] = nodeCon;
                break;
        }
        if (nodeLevel > WMSLocationCoordinates::InventLocation && _decodeParents)
        {
            this.decodeNode(nodeParent, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandNode</Name>
				<Source><![CDATA[
    public void expandNode(
        TreeItemIdx     _nodeId,
        boolean         _expand = false)
    {
        container           aisles;
        container           racks;
        container           shelves;
        container           locations;
        Counter             i;

        FormTreeItem        parentItem = tree.getItem(_nodeId);
        Integer             levelNo = parentItem.data();

        [#NodeInfo] = nodeInfo[_nodeId];

        if (nodeExpanded)
        {
            return;
        }

        nodeExpanded = true;                // mark as expanded
        nodeInfo[_nodeId] = [#NodeInfo];

        if (levelNo >= WMSLocationCoordinates::Bin)
        {
            return;
        }

        this.decodeNode(_nodeId, true);

        levelNo = this.nextActiveLevel(inventLocationId, levelNo);
        switch (levelNo)
        {
            case WMSLocationCoordinates::Aisle:
                aisles = this.aisles(inventLocationId);
                for (i = 1; i <= conLen(aisles); i++)
                {
                    [#aisleInfo] = conPeek(aisles, i);
                    this.createAisleNode(#aisleinfo, _nodeId, false, false);
                }
                break;
            case WMSLocationCoordinates::Rack:
                racks = this.racks(inventLocationId, aisle);
                for (i = 1; i <= conLen(racks); i++)
                {
                    [#rackInfo] = conPeek(racks, i);
                    this.createRackNode(#rackInfo, _nodeId, false, false);
                }
                break;
            case WMSLocationCoordinates::Shelf:
                shelves = this.shelves(inventLocationId, aisle, rack);
                for (i = 1; i <= conLen(shelves); i++)
                {
                    [#levelInfo] = conPeek(shelves, i);
                    this.createLevelNode(#levelInfo, _nodeId, false, false);
                }
                break;
            case WMSLocationCoordinates::Bin:
                locations = this.shelfLocations(inventLocationId, aisle, rack, level);
                for (i = 1; i <= conLen(locations); i++)
                {
                    [#locationInfo] = conPeek(locations, i);
                    this.createLocationNode(#locationInfo, _nodeId);
                }
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLocation</Name>
				<Source><![CDATA[
    public void findLocation(WMSLocation _wmsLocation)
    {
        FormTreeItem    item;
        TreeItemIdx     idxStore = tree.getRoot();

        while (idxStore)
        {
            item = tree.getItem(idxStore);
            this.decodeNode(idxStore, false);
            if (inventLocationId == _wmsLocation.InventLocationId)
            {
                if (!item.stateExpanded())
                {
                    item.stateExpanded(true);
                    tree.expand(item.idx(), FormTreeExpand::Expand);
                }
                item = this.findNode(item, [_wmsLocation.AisleId]);
                if (item)
                    item = this.findNode(item, [_wmsLocation.Rack]);
                if (item)
                    item = this.findNode(item, [_wmsLocation.Level]);
                if (item)
                    item = this.findNode(item, [_wmsLocation.wmsLocationId]);
                if (item)
                {
                    tree.select(item.idx());
                }
                break;
            }
            idxStore = tree.getNextSibling(idxStore);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNode</Name>
				<Source><![CDATA[
    private FormTreeItem findNode(
        FormTreeItem    _parent,
        container       _id,
        boolean         _mayExpand = true)
    {
        FormTreeItem    item;
        TreeItemIdx     idx = tree.getChild(_parent.idx());

        while (idx)
        {
            item = tree.getItem(idx);
            this.decodeNode(idx, false);
            if (nodeCon == _id)
            {
                if (!item.stateExpanded())
                {
                    item.stateExpanded(true);
                    tree.expand(item.idx(), FormTreeExpand::Expand);
                }
                return item;
            }
            idx = tree.getNextSibling(idx);
        }
        if (_mayExpand)
        {
            this.expandNode(_parent.idx(), true);
            item = this.findNode(_parent, _id, false); // try again
        }
        return item;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatTxt</Name>
				<Source><![CDATA[
    public str formatTxt()
    {
        return strFmt(this.formatTxtTemplate(), "@SYS6437", "@SYS3794", "@SYS50212", "@SYS13182");
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInternals</Name>
				<Source><![CDATA[
    private void initInternals()
    {
        imageList = new ImageListAppl_WMS();
        tree.setImagelist(imageList.imageList());

        this.getLast();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the internal variables.
    /// </summary>
    /// <remarks>
    /// This method is called when the <c>SysLastValue</c> record cannot be found when it calls the
    /// <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        showInventLocationId    = NoYes::Yes;
        showLocationId          = NoYes::Yes;
        showLocationType        = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLocations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a container that contains information about the warehouses.
    /// </summary>
    /// <returns>
    /// A container that contains the requested information about the warehouses.
    /// </returns>
    protected container inventLocations()
    {
        return WMSLocationTreeServer::getWarehouses(this.pack(), wmsLocationFormCaller, callerId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCaller</Name>
				<Source><![CDATA[
    protected Object parmCaller(Object _caller = caller)
    {
        caller = _caller;

        return caller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTree</Name>
				<Source><![CDATA[
    protected FormTreeControl parmTree(FormTreeControl _tree = tree)
    {
        tree = _tree;

        return tree;
    }

]]></Source>
			</Method>
			<Method>
				<Name>racks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a container that contains information about the rack for the specified aisle.
    /// </summary>
    /// <param name="_inventLocationId">
    /// The warehouse for which the racks are retrieved.
    /// </param>
    /// <param name="_aisleId">
    /// The aisle for which the racks are retrieved.
    /// </param>
    /// <returns>
    /// A container that contains the requested information about the rack for the specified aisle.
    /// </returns>
    protected container racks(
        InventLocationId    _inventLocationId,
        WMSAisleId          _aisleId)
    {
        return WMSLocationTreeServer::getRacksForAisle(this.pack(), wmsLocationFormCaller, callerId, [_inventLocationId, _aisleId]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChanged</Name>
				<Source><![CDATA[
    public void selectionChanged(
        FormTreeItem    _oldItem,
        FormTreeItem    _newItem,
        FormTreeSelect  _how)
    {
        caller.findTreeRecord(_newItem.idx());
    }

]]></Source>
			</Method>
			<Method>
				<Name>shelfLocations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a container that contains information about the locations for the specified shelf.
    /// </summary>
    /// <param name="_inventLocationId">
    /// The warehouse for which the locations are retrieved.
    /// </param>
    /// <param name="_aisleId">
    /// The aisle for which the locations are retrieved.
    /// </param>
    /// <param name="_rackId">
    /// The rack for which the locations are retrieved.
    /// </param>
    /// <param name="_shelfId">
    /// The shelf for which the locations are retrieved.
    /// </param>
    /// <returns>
    /// A container that contains the requested information about the locations for the specified shelf.
    /// </returns>
    protected container shelfLocations(
        InventLocationId    _inventLocationId,
        WMSAisleId          _aisleId,
        WMSRackId           _rackId,
        WMSLevelId          _shelfId)
    {
        return WMSLocationTreeServer::getLocationsForShelf(this.pack(), wmsLocationFormCaller, callerId, [_inventLocationId, _aisleId, _rackId, _shelfId]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shelves</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a container with information about the shelves for the specified rack.
    /// </summary>
    /// <param name="_inventLocationId">
    /// The warehouse for which the shelves are retrieved.
    /// </param>
    /// <param name="_aisleId">
    /// The aisle for which the shelves are retrieved.
    /// </param>
    /// <param name="_rackId">
    /// The rack for which the shelves are retrieved.
    /// </param>
    /// <returns>
    /// A container that contains the requested information about the shelves for the specified rack.
    /// </returns>
    protected container shelves(
        InventLocationId    _inventLocationId,
        WMSAisleId          _aisleId,
        WMSRackId           _rackId)
    {
        return WMSLocationTreeServer::getShelvesForRack(this.pack(), wmsLocationFormCaller, callerId, [_inventLocationId, _aisleId, _rackId]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsLocation</Name>
				<Source><![CDATA[
    public WMSLocation wmsLocation(TreeItemIdx _idx)
    {
        WMSLocation     wmsLocation;

        [#NodeInfo] = nodeInfo[_idx];
        switch (nodeLevel)
        {
            case WMSLocationCoordinates::InventLocation:
                this.decodeNode(_idx, true);
                select firstonly wmsLocation
                    index CoordinateIdx
                    where wmsLocation.InventLocationId == inventLocationId;
                break;
            case WMSLocationCoordinates::Aisle:
                this.decodeNode(_idx, true);
                select firstonly wmsLocation
                    index CoordinateIdx
                    where wmsLocation.InventLocationId == inventLocationId  &&
                          wmsLocation.AisleId          == aisle;
                break;
            case WMSLocationCoordinates::Rack:
                this.decodeNode(_idx, true);
                select firstonly wmsLocation
                    index CoordinateIdx
                    where wmsLocation.InventLocationId == inventLocationId  &&
                          wmsLocation.AisleId          == aisle             &&
                          wmsLocation.Rack             == rack;
                break;
            case WMSLocationCoordinates::Shelf:
                this.decodeNode(_idx, true);
                select firstonly wmsLocation
                    index CoordinateIdx
                    where wmsLocation.InventLocationId == inventLocationId  &&
                          wmsLocation.AisleId          == aisle             &&
                          wmsLocation.Rack             == rack              &&
                          wmsLocation.Level            == level;
                break;
            case WMSLocationCoordinates::Bin:
                this.decodeNode(_idx, true);
                wmsLocation = WMSLocation::find(locationId, inventLocationId);
                break;
        }
        return wmsLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static WMSLocationTreeClient construct()
    {
        return new WMSLocationTreeClient();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    static public WMSLocationTreeClient newFromForm(
        FormTreeControl     _tree,
        Object              _caller)
    {
        WMSLocationTreeClient   wmsLocationTreeClient   = WMSLocationTreeClient::construct();

        wmsLocationTreeClient.parmTree(_tree);
        wmsLocationTreeClient.parmCaller(_caller);
        wmsLocationTreeClient.initInternals();
        return wmsLocationTreeClient;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>