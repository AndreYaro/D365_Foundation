<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WorkflowStatusCopilotSummaryDataProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Xrm.Sdk;
using System.ComponentModel.Composition;

/// <summary>
/// The <c>WorkflowCopilotSummaryForApproverDataProvider</c> is the class to provide data for workflow copilot summary.
/// </summary>
internal final class WorkflowStatusCopilotSummaryDataProvider
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>convertParameterContainerToParameterCollection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the parameter container to the dataverse used parameter collection.
    /// </summary>
    /// <param name = "_con">The container of parameter.</param>
    /// <returns>The parameter collection.</returns>
    internal static ParameterCollection convertParameterContainerToParameterCollection(container _con)
    {
        RecId workflowStatusTableRecId = conPeek(_con, 1);
        ParameterCollection parameterCollection = new ParameterCollection();

        WorkflowTrackingStatusTable workflowStatusTable = WorkflowTrackingStatusTable::findRecId(workflowStatusTableRecId);
        parameterCollection.AddOrUpdateIfNotNull("Language", currentUserLanguage());
        parameterCollection.AddOrUpdateIfNotNull("WorkflowOverview", WorkflowStatusCopilotSummaryDataProvider::buildWorkflowStatus(workflowStatusTable));
        parameterCollection.AddOrUpdateIfNotNull("WorkflowHistory", WorkflowStatusCopilotSummaryDataProvider::buildWorkflowDetailsCollection(workflowStatusTableRecId));

        return parameterCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastWorkflowTrackingRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the last workflow low tracking table record Id.
    /// </summary>
    /// <param name = "_trackingStatusRecId">The tracking status record Id.</param>
    /// <returns>The record Id of last trancking table.</returns>
    internal static RecId findLastWorkflowTrackingRecord(RecId _trackingStatusRecId)
    {
        return Workflow::findLastWorkflowTrackingRecord(WorkflowTrackingStatusTable::findRecId(_trackingStatusRecId).CorrelationId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWorkflowStatus</Name>
				<Source><![CDATA[
    private static Entity buildWorkflowStatus(WorkflowTrackingStatusTable _workflowTrackingStatusTable)
    {
        Entity entity = new Entity();
        WorkflowTrackingTable workflowTrackingTable;
        WorkflowTrackingCommentTable workflowTrackingCommentTable;
        select firstonly RecId, CreatedDateTime, User from workflowTrackingTable
            order by CreatedDateTime desc, RecId desc
            where workflowTrackingTable.WorkflowTrackingStatusTable == _workflowTrackingStatusTable.RecId
                && (workflowTrackingTable.TrackingType == WorkflowTrackingType::Submission
                    || workflowTrackingTable.TrackingType == WorkflowTrackingType::SubmitOnBehalf)
            join TrackingMessage, Comment from workflowTrackingCommentTable
                where workflowTrackingCommentTable.WorkflowTrackingTable == WorkflowTrackingTable.RecId;

        var attributes = entity.Attributes;
        if (workflowTrackingTable.RecId)
        {
            attributes.Add('SubmittedBy', SysWorkflowHelper::getDirPartyNameFromUserId(workflowTrackingTable.User));
            attributes.Add('SubmittedDate', WorkflowStatusCopilotSummaryDataProvider::convertDateTime2UserPreferredStr(workflowTrackingTable.CreatedDateTime));
            attributes.Add('SubmitComment', WorkflowStatusCopilotSummaryDataProvider::getTargetComment(workflowTrackingCommentTable.Comment));
        }

        attributes.Add('CurrentStatus', enum2Str(_workflowTrackingStatusTable.TrackingStatus));
        if (_workflowTrackingStatusTable.TrackingStatus == WorkflowTrackingStatus::Faulted)
        {
            // Get latest error information.
            select firstonly RecId, CreatedDateTime from workflowTrackingTable
                order by CreatedDateTime desc, RecId desc
                where workflowTrackingTable.WorkflowTrackingStatusTable == _workflowTrackingStatusTable.RecId
                    && workflowTrackingTable.TrackingType == WorkflowTrackingType::Fault
                join TrackingMessage from workflowTrackingCommentTable
                    where workflowTrackingCommentTable.WorkflowTrackingTable == WorkflowTrackingTable.RecId;

            if (workflowTrackingTable.RecId)
            {
                attributes.Add('ErrorMessage', workflowTrackingCommentTable.TrackingMessage);
            }
        }
        else if (_workflowTrackingStatusTable.TrackingStatus == WorkflowTrackingStatus::Pending)
        {
            WorkflowWorkItemTable workItemTable;

            // Only pass assigned user when it's less than 3.
            select count(RecId) from workItemTable
                where workItemTable.CorrelationId == _workflowTrackingStatusTable.CorrelationId
                    && workItemTable.Status == WorkflowWorkItemStatus::Pending;
            if (workItemTable.RecId && workItemTable.RecId <= WorkflowStatusCopilotSummaryConstants::MaxAssignedUserCount)
            {
                int i = 1;
                while select UserId, DueDateTime from workItemTable
                    where workItemTable.CorrelationId == _workflowTrackingStatusTable.CorrelationId
                        && workItemTable.Status == WorkflowWorkItemStatus::Pending
                {
                    attributes.Add(strFmt('AssignedToUser%1', i), workItemTable.userName());
                    attributes.Add(strFmt('User%1DueDate', i), WorkflowStatusCopilotSummaryDataProvider::convertDateTime2UserPreferredStr   (workItemTable.DueDateTime));
                    i++;
                }
            }
        }

        return entity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWorkflowDetailsCollection</Name>
				<Source><![CDATA[
    private static EntityCollection buildWorkflowDetailsCollection(RecId _trackingStatusTableRecId)
    {
        EntityCollection entityCollection = new EntityCollection();
        entityCollection.EntityName = WorkflowStatusCopilotSummaryConstants::ExpandoEntityLogicalName;

        var entityList = entityCollection.Entities;

        WorkflowTrackingTable workflowTrackingTable;
        WorkflowTrackingCommentTable workflowTrackingCommentTable;
        while select firstonly10 RecId, CreatedDateTime, TrackingType from workflowTrackingTable
            order by CreatedDateTime desc, RecId desc
            where workflowTrackingTable.WorkflowTrackingStatusTable == _trackingStatusTableRecId
                && (workflowTrackingTable.TrackingType == WorkflowTrackingType::Delegation
                    || workflowTrackingTable.TrackingType == WorkflowTrackingType::Reassign
                    || workflowTrackingTable.TrackingType == WorkflowTrackingType::RequestChange
                    || workflowTrackingTable.TrackingType == WorkflowTrackingType::Denied
                    || workflowTrackingTable.TrackingType == WorkflowTrackingType::Rejection
                    || workflowTrackingTable.TrackingType == WorkflowTrackingType::Approval
                    || workflowTrackingTable.TrackingType == WorkflowTrackingType::Resubmission
                    || workflowTrackingTable.TrackingType == WorkflowTrackingType::Accepted)
            join MessageLabelId, Comment from workflowTrackingCommentTable
                where workflowTrackingCommentTable.WorkflowTrackingTable == WorkflowTrackingTable.RecId
        {
            if (entityList.Count < WorkflowStatusCopilotSummaryConstants::MaxActivitiesCount)
            {
                Entity entity = new Entity();
                var attributes = entity.Attributes;
                var trackingMessage = workflowTrackingCommentTable.getLocalizeTrackingMessage();
                if (trackingMessage)
                {
                    attributes.Add('TrackingMessage', trackingMessage);
                    attributes.Add('Comment', WorkflowStatusCopilotSummaryDataProvider::getTargetComment(workflowTrackingCommentTable.Comment));
                    attributes.Add('Date', WorkflowStatusCopilotSummaryDataProvider::convertDateTime2UserPreferredStr(workflowTrackingTable.CreatedDateTime));

                    entityList.Add(entity);
                }
            }
            else
            {
                break;
            }
        }

        return entityCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertDateTime2UserPreferredStr</Name>
				<Source><![CDATA[
    private static str convertDateTime2UserPreferredStr(utcdatetime _dateTime)
    {
        const str DateFormat = "Year: %1, Month: %2, Day: %3";
        utcdatetime userPreferredDateTime = DateTimeUtil::applyTimeZoneOffset(_dateTime, DateTimeUtil::getUserPreferredTimeZone());
        if (DateTimeUtil::date(userPreferredDateTime) != dateNull())
        {
            return strFmt(DateFormat,
                DateTimeUtil::year(userPreferredDateTime),
                DateTimeUtil::month(userPreferredDateTime),
                DateTimeUtil::day(userPreferredDateTime));
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTargetComment</Name>
				<Source><![CDATA[
    private static str getTargetComment(str _comment)
    {
        if (strLen(_comment) >= WorkflowStatusCopilotSummaryConstants::MaxCommentLength)
        {
            return WorkflowStatusCopilotSummaryConstants::CollapsedComment;
        }

        return _comment;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>