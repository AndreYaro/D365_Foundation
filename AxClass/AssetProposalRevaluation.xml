<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetProposalRevaluation</Name>
	<SourceCode>
		<Declaration><![CDATA[
class AssetProposalRevaluation extends AssetProposal implements BatchRetryable
{
    AssetTransDate      assetDateFrom;

    DialogField         dialogDateFrom;
    DialogField         dialogDateTo;

    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList
        assetDateFrom,
        runDate
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetTransType</Name>
				<Source><![CDATA[
    AssetTransTypeJournal assetTransType()
    {
        return AssetTransTypeJournal::Revaluation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        DialogRunbase dialog = super();

        dialog.caption("@SYS71132");

        dialog.addGroup("@SYS22526");

        if (this.budgetJournal())
        {
            dialogDateFrom = dialog.addField(extendedtypestr(AssetTransDate),"@SYS5209","@SYS71106");
            dialogDateFrom.value(assetDateFrom);
        }

        dialogDateTo = dialog.addField(extendedtypestr(AssetTransDate),"@SYS14656","@SYS71107");
        dialogDateTo.value(runDate);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            runDate = dialogDateTo.value();

            ret = this.checkDateIsValid(runDate);

            if (this.budgetJournal())
                assetDateFrom  = dialogDateFrom.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        #ISOCountryRegionCodes

        Query               query = new Query(querystr(assetproposal));
        QueryBuildRange     qr_Range;

        super();

        str featureReference = GlobalizationInstrumentationHelper::getFeatureRefByLegalEntityCountryRegion([ [#isoES, GlobalizationConstants::FeatureReferenceES00026] ]);
        if (featureReference)
        {
            GlobalizationInstrumentationHelper::featureRun(featureReference, funcName());
        }

        query.name("@SYS71174");
        query.dataSourceTable(tablenum(AssetBook)).addRange(fieldnum(AssetBook,Depreciation)).value(queryValue(NoYes::Yes));
        query.dataSourceTable(tablenum(AssetBook)).addRange(fieldnum(AssetBook,RevaluationGroupId));

        qr_Range = query.dataSourceTable(tablenum(AssetBookTable)).addRange(fieldnum(AssetBookTable,CurrentOperationsTax));
        qr_Range.status(1);

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList,super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        AssetJournal                    assetJournal;
        AssetRevaluationGroupSpec       assetRevaluationGroupSpec;
        AssetBook                       assetBook;
        AssetTrans                      assetTrans;
        AmountCur                       amountCur;
        AssetRevaluationFactor          factor;

        assetJournal = new AssetJournal(journalNum,this.assetTransType());
        // <GCN>
        if (assetJournal && LedgerParameters::isChineseVoucher_CN())
        {
            // Set the voucher type for asset journal with the value user selected.
            assetJournal.parmVoucherType_CN(voucherType_CN);
        }
        // </GCN>
        if (!assetBudgetModelId)
        {
            queryRun.query().dataSourceTable(tablenum(AssetBook)).addRange(fieldnum(AssetBook,Status)).value(queryValue(AssetStatus::Open));
        }
        else
        {
            queryRun.query().dataSourceTable(tablenum(AssetBook)).addRange(fieldnum(AssetBook,Status)).value(queryValue(AssetStatus::Open)+','+queryValue(AssetStatus::NoAcquisition));
        }

        ttsbegin;

        while (queryRun.next())
        {
            if (queryRun.changed(tablenum(AssetBook)))
            {
                assetBook = queryRun.get(tablenum(AssetBook));

                if (assetBook.RevaluationGroupId)
                {
                    while select RecId, AmountMST from assetTrans
                           where assetTrans.AssetId   == assetBook.AssetId
                              && assetTrans.BookId    == assetBook.BookId
                              && assetTrans.TransDate >= (this.budgetJournal() ? assetDateFrom : dateNull())
                              && assetTrans.TransDate <= runDate
                              && !assetTrans.RevaluationDone
                              && (assetTrans.TransType == AssetTransType::Acquisition || assetTrans.TransType == AssetTransType::AcquisitionAdj)

                    {
                        assetRevaluationGroupSpec = AssetRevaluationGroup::find(assetBook.RevaluationGroupId).findRevaluationGroupSpec(runDate);
                        if (assetRevaluationGroupSpec)
                        {
                            factor =  assetRevaluationGroupSpec.Factor;
                            factor -= 1;

                            amountCur = CurrencyExchangeHelper::amount(assetTrans.AmountMST * factor);

                            assetJournal.createTrans(amountCur,assetBook,runDate,assetBudgetModelId,0,0,true,amountCur,assetTrans.RecId);
                        }
                    }
                }
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        container       base;
        boolean         ret;
        Integer         version     = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, base] = packedClass;
                ret = super(base);
                break;
            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>