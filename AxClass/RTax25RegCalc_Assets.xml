<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTax25RegCalc_Assets</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rTax25RegCalc_Assets extends RTax25RegCalc implements BatchRetryable
{
    Query                   q;
    QueryBuildDataSource    qbds;
    QueryRun                qr;

    RAssetStandards         rAssetStandards;
    RAssetTable             rAssetTable;
    RAssetStandardId        assetStandardId;
    AmountMST               footerAmount, totalAmount;
    boolean                 retHeader;
    RAssetId                lastAssetId;
    Range                   parmTypeId;
    Range                   assetGroup;
    container               fieldValue;

    #define.ParameterCode1(1)
    #define.ParameterCode2(2)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc()
    {
        RecordSortedList  recordSortedList = new RecordSortedList(tablenum(RAssetStandards));
        boolean           found;
        ;
    
        recordSortedList.sortOrder(fieldnum(RAssetStandards, AssetGroup),
                                   fieldnum(RAssetStandards, SubGroupId),
                                   fieldnum(RAssetStandards, AssetId));
    
        if (!assetStandardId)
        {
            checkFailed("@GLS104135");
            return;
        }
    
        q = this.createQuery();
    
        qr = new QueryRun(q);
        qr.interactive(false);
        qr.init();
    
        if (! qr.prompt())
        {
            warning("@GLS101992");
            return;
        }
    
        select count (RecId) from  rAssetTable;
        this.progressInit("",rAssetTable.RecId);
    
        try
        {
    
            ttsbegin;
    
            super();
    
            while (qr.next())
            {
                rAssetStandards = qr.get(tablenum(RAssetStandards));
                rAssetStandards.SubGroupId = rAssetStandards.subGroupId(dateTo);
                recordSortedList.ins(qr.get(tablenum(RAssetStandards)));
            }
            for (found = recordSortedList.first(rAssetStandards);
                 found;
                 found = recordSortedList.next(rAssetStandards))
            {
                rAssetTable     = RAssetTable::find(rAssetStandards.AssetId);
    
                progress.setText(strfmt("@GLS116356", rAssetTable.AccountNum, rAssetStandards.AssetGroup));
                progress.incCount();
    
                if (this.checkAsset())
                {
                    footerAmount = this.tableOperation();
                }
    
                if (footerAmount)
                {
                    totalAmount += footerAmount;
                    this.createFooter();
                }
            }
            if (totalAmount)
            {
                this.createTotal();
            }
    
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAsset</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkAsset()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFooter</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createFooter()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTotal</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createTotal()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetTypeId</Name>
				<Source><![CDATA[
    private Range parmAssetTypeId(Range _parameter)
    {
        DictEnum  dictEnum = new DictEnum(enumnum(RAssetType));
        Range     parm = _parameter;

        if (!parm)
        {
            if (registerType == RTax25RegisterType::TangibleAssetInfo    ||
                registerType == RTax25RegisterType::TangibleDepreciation ||
                registerType == RTax25RegisterType::TangibleGroupDepreciation)
            {
                parm  = dictEnum.value2Label(RAssetType::Tangible);
                parm += "@GLS111172";
                parm += dictEnum.value2Label(RAssetType::LandBuilding);
                parm += "@GLS111172";
                parm += dictEnum.value2Label(RAssetType::Vehicle);
            }

            if (registerType == RTax25RegisterType::IntangibleAssetInfo    ||
                registerType == RTax25RegisterType::IntangibleDepreciation ||
                registerType == RTax25RegisterType::IntangibleGroupDepreciation)
            {
                parm  = dictEnum.value2Label(RAssetType::Intangible);
                parm += "@GLS111172";
                parm += dictEnum.value2Label(RAssetType::Financial);
                parm += "@GLS111172";
                parm += dictEnum.value2Label(RAssetType::Goodwill);
            }

        }
        return this.replaceSemicolon(parm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>replaceSemicolon</Name>
				<Source><![CDATA[
    private Range replaceSemicolon(Range _parameter)
    {
        Counter pos;
        Range   parm = _parameter;
        ;
        do
        {
            pos = strscan(parm, ';', 1, strlen(parm));
            if (pos)
            {
                parm = strpoke(parm, "@SYS35667", pos);
            }
        }
        while (pos);

        return parm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableOperation</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected AmountMST tableOperation()
    {
         throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuery</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Query createQuery()
    {
        q    = new Query();
    
        q.userUpdate(false);
    
        qbds = q.addDataSource(tablenum(RAssetStandards));
        qbds.addRange(fieldnum(RAssetStandards, AssetStandardId)).value(assetStandardId);
    
        qbds.addRange(fieldnum(RAssetStandards, AssetGroup)).value(assetGroup);
    
        qbds.addSortField(fieldnum(RAssetStandards, AssetGroup), SortOrder::Ascending);
        qbds.addSortField(fieldnum(RAssetStandards, AssetId), SortOrder::Ascending);
    
        qbds = qbds.addDataSource(tablenum(RAssetTable));
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.addLink(fieldnum(RAssetStandards,  AssetId), fieldnum(RAssetTable,  AccountNum));
        qbds.addRange(fieldnum(RAssetTable, AssetType)).value(parmTypeId);
    
        q = this.modifyQuery(q);
    
        return q;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init(RTax25RegisterJournalTrans _registerJournalTrans = null, Batch _batch = null)
    {
        boolean ret;
    
        ret = super(_registerJournalTrans, _batch);
    
        parmTypeId      = this.parmAssetTypeId(RTax25RegisterParameters::find(registerId, #ParameterCode2).Parameter);
        assetGroup      = this.replaceSemicolon(RTax25RegisterParameters::find(registerId, #ParameterCode1).Parameter);
        assetStandardId = RAssetParameters::find().StandardTaxIdDefault;
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies query object.
    /// </summary>
    /// <param name="_query">
    /// Query object to modify.
    /// </param>
    /// <returns>
    /// Modified query object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Query modifyQuery(Query _query)
    {
        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>