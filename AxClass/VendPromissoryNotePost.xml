<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendPromissoryNotePost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendPromissoryNotePost</c> class is a baseline to post all type of promissory note journal.
/// </summary>
public class VendPromissoryNotePost extends CustVendNegInstPost
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createInvoiceRef_ES</Name>
				<Source><![CDATA[
    private void createInvoiceRef_ES(VendTrans _invoiceTrans,
                                     VendTrans _paymentTrans)
    {
        VendRemitInvoiceRef_ES vendRemitInvoiceRef;

        vendRemitInvoiceRef.TransRecId      = _paymentTrans.RecId;
        vendRemitInvoiceRef.InvoiceCompany  = _invoiceTrans.company();
        vendRemitInvoiceRef.InvoiceRecid    = _invoiceTrans.RecId;

        vendRemitInvoiceRef.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPromissoryNoteInvoice</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createPromissoryNoteInvoice(VendPromissoryNoteJour   _vendPromissoryNoteJour,
                                               VendTrans                _settlingTrans)
    {
        VendPromissoryNoteInvoice   vendPromissoryNoteInvoice;
        VendTrans                   settledTrans;
        VendSettlement              vendSettlementLocal;

        // Cannot use a join since the select on settledTrans must be cross company
        while select OffsetRecid, OffsetCompany from vendSettlementLocal
            where vendSettlementLocal.TransRecId == _settlingTrans.RecId
        {
            while select crossCompany settledTrans
                where (settledTrans.RecId == vendSettlementLocal.OffsetRecid &&
                        settledTrans.DataAreaId == vendSettlementLocal.OffsetCompany)
            {
                vendPromissoryNoteInvoice.clear();
                vendPromissoryNoteInvoice.Voucher    = _settlingTrans.Voucher;
                vendPromissoryNoteInvoice.TransDate  = _settlingTrans.TransDate;
                vendPromissoryNoteInvoice.initFromVendPromissoryNoteJour(_vendPromissoryNoteJour);
                vendPromissoryNoteInvoice.initFromVendTrans(settledTrans);
                vendPromissoryNoteInvoice.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewCustVendVoucher</Name>
				<Source><![CDATA[
    protected CustVendVoucher getNewCustVendVoucher(LedgerJournalTrans _ledgerJournalTrans)
    {
        return VendVoucher::newVendVoucherJournal(_ledgerJournalTrans, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNegInstTransBuffer_ES</Name>
				<Source><![CDATA[
    protected CustVendNegInstTrans initNegInstTransBuffer_ES()
    {
        VendPromissoryNoteTrans vendPromissoryNoteTrans;

        return vendPromissoryNoteTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransBuffer</Name>
				<Source><![CDATA[
    protected CustVendTrans initTransBuffer()
    {
        VendTrans   vendTrans;

        return vendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertNegInstTrans</Name>
				<Source><![CDATA[
    protected CustVendNegInstTrans insertNegInstTrans(CustVendNegInstJour _vendPromissoryNoteJour,
                                                      CustVendTrans       _nextStepTrans)
    {
        VendPromissoryNoteJour vendPromissoryNoteJour = _vendPromissoryNoteJour;
        VendTrans nextStepTrans = _nextStepTrans;

        VendPromissoryNoteTrans vendPromissoryNoteTrans;

        vendPromissoryNoteJour.Status               = this.status();
        vendPromissoryNoteJour.PromissoryNoteSeqNum = this.seqNum(vendPromissoryNoteJour.PromissoryNoteId);

        if (vendPromissoryNoteJour.RecId)
            vendPromissoryNoteJour.update();

        vendPromissoryNoteTrans.initFromVendPromissoryNoteJour(vendPromissoryNoteJour);
        vendPromissoryNoteTrans.Voucher                 = nextStepTrans.Voucher;
        vendPromissoryNoteTrans.TransDate               = nextStepTrans.TransDate;
        vendPromissoryNoteTrans.CurrencyCode            = nextStepTrans.CurrencyCode;
        vendPromissoryNoteTrans.AmountCur               = nextStepTrans.AmountCur;
        vendPromissoryNoteTrans.RemittedtoBankAccountId = ledgerJournalTrans.BankAccountId;
        vendPromissoryNoteTrans.SeqNum                  = this.seqNum(vendPromissoryNoteJour.PromissoryNoteId);

        if (vendPromissoryNoteJour.RecId)
            vendPromissoryNoteTrans.insert();

        return vendPromissoryNoteTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postNextStep</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates new open transactions for transactions settled by the settling transaction.
    /// </summary>
    /// <param name = "_vendVoucher">
    ///     An instance of <c>CustVendVoucher</c>.
    /// </param>
    /// <param name = "_settlingTrans">
    ///     A <c>CustVendTrans</c> table buffer.
    /// </param>
    protected void postNextStep(CustVendVoucher _vendVoucher, CustVendTrans _settlingTrans)
    {
        VendVoucher             vendVoucher = _vendVoucher;
        VendTrans               settlingTrans = _settlingTrans;
        VendSettlement          vendSettlement;
        VendTrans               settledTrans;
        VendTrans               nextStepTrans;
        Counter                 numOfSettledTrans;
        #ISOCountryRegionCodes

        nextStepTrans.data(settlingTrans);

        vendVoucher.parmSettlementType(SettlementType::None);

        vendVoucher.parmPostingProfile(this.getPostingProfileForVoucher());

        // Creates new open transactions for transactions settled by the settling transaction
        // This code is run when posting a Promissory Note Journal for transactions.

        // The settledTrans and the custSettlemnt could be cross company, so account for it by
        // using cross-company select statements. Since these tables are not required to be a part
        // of a virtual company via the CentralizedPayments table colletion, they can't be joined
        // in a single statement and need to be broken into multiple statements.

        while select crossCompany TransRecId, TransCompany, OffsetRecid, OffsetCompany, SettleAmountCur, SettleAmountMST from vendSettlement
            where vendSettlement.TransRecId == settlingTrans.RecId
                && vendSettlement.TransCompany == settlingTrans.company()
        {
            select crossCompany RecId, DataAreaId, PromissoryNoteID from settledTrans
                where settledTrans.RecId == vendSettlement.OffsetRecid
                    && settledTrans.DataAreaId == vendSettlement.OffsetCompany;

            if (settledTrans)
            {
                // It is necessary to consider settled transactions from other companies, but the
                // open transactions created (e.g. the next step in the promissory note process) only
                // need to be created in the current company.  So a changeCompany is not necessary here.

                numOfSettledTrans++;
                nextStepTrans.AmountCur = -vendSettlement.SettleAmountCur;
                nextStepTrans.AmountMST = -vendSettlement.SettleAmountMST;
                vendVoucher.parmAmountCur(nextStepTrans.AmountCur);

                vendVoucher.post(ledgerVoucher, nextStepTrans);

                VendPromissoryNoteJour vendPromissoryNoteJour = VendPromissoryNoteJour::find(settledTrans.PromissoryNoteID, true);
                nextStepTrans.AmountCur = -nextStepTrans.AmountCur;
                VendPromissoryNoteTrans vendPromissoryNoteTrans = this.insertNegInstTrans(vendPromissoryNoteJour, nextStepTrans);
                nextStepTrans.AmountCur = -nextStepTrans.AmountCur;

                this.setNegInstFieldOnTrans(nextStepTrans,
                    vendPromissoryNoteTrans.PromissoryNoteId,
                    vendPromissoryNoteTrans.Status,
                    vendPromissoryNoteTrans.SeqNum);

                nextStepTrans.BankRemittanceFileId  = ledgerJournalTrans.BankRemittanceFileId;
                nextStepTrans.update();

                if (isConditionalTaxSpain                                     &&
                    (this.status() == CustVendNegInstStatus::Remitted         ||
                     this.status() == CustVendNegInstStatus::InvoiceRemitted) &&
                    settledTrans.Invoice                                      &&
                    !settledTrans.PromissoryNoteID)
                {
                    this.createInvoiceRef_ES(settledTrans, nextStepTrans);
                }
            }
        }

        // If only one transaction is settled, mark the settling transaction with info from the settled transaction.
        if (numOfSettledTrans == 1)
        {
            settlingTrans.PromissoryNoteID      = nextStepTrans.PromissoryNoteID;
            settlingTrans.PromissoryNoteStatus  = nextStepTrans.PromissoryNoteStatus;
            settlingTrans.PromissoryNoteSeqNum  = nextStepTrans.PromissoryNoteSeqNum;
            settlingTrans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>seqNum</Name>
				<Source><![CDATA[
    protected CustVendNegInstSeqNum seqNum(CustVendNegInstId  _vendPromissoryNoteID)
    {
        return VendPromissoryNoteTrans::maxSeqNum(_vendPromissoryNoteID);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>