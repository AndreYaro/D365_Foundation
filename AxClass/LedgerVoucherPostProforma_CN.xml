<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerVoucherPostProforma_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerVoucherPostProforma</c>  class accommodates posting proforma.
/// </summary>
class LedgerVoucherPostProforma_CN extends LedgerVoucher
{
    Map mapJournalEntry;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>end</Name>
				<Source><![CDATA[
        public boolean end()
    {
        LedgerVoucherObject reference;

        Map                     mapGeneranJournalEntry;
        GeneralJournalEntry     generalJournalEntry;
        GeneralJournalEntry_W   generalJournalEntryW;

        boolean more;
        boolean isChineseVoucher = LedgerParameters::isChineseVoucher_CN();

        List    listGeneralJournalAccountEntry = new List(Types::Record);
        List    valueList = new List(Types::Record);

        mapJournalEntry = new Map(Types::Class, Types::Class);

        if (checkAuto)
        {
            if (!this.check())
            {
                //The voucher report print job has been cancelled, because the journal cannot be posted
                throw error("@GLS222611");
            }
        }
        more = ledgerVoucherList.first();
        while (more)
        {
            reference = ledgerVoucherList.item();

            if (isChineseVoucher && reference.transElements() != 0)
            {
                if (ledgerVoucherTypeCN
                    && voucherCN
                    && reference.parmLedgerVoucherType_CN() == 0)
                {
                    reference.parmVoucher_CN(voucherCN);
                    reference.parmLedgerVoucherType_CN(ledgerVoucherTypeCN);
                }
                else
                {
                    reference.initLedgerVoucherType_CN();
                    voucherCN = reference.parmVoucher_CN();
                    ledgerVoucherTypeCN = reference.parmLedgerVoucherType_CN();
                }
            }

            listGeneralJournalAccountEntry = this.getGeneralJournalAccountEntry(this, reference);

            generalJournalEntry                         = reference.parmGeneralJournalEntry();
            generalJournalEntryW.LedgerVoucherType_CN   = reference.parmLedgerVoucherType_CN();
            generalJournalEntryW.Voucher_CN             = reference.parmVoucher_CN();
            generalJournalEntryW.GeneralJournalEntry    = reference.parmGeneralJournalEntryRecId();

            mapGeneranJournalEntry = new Map(Types::Record, Types::Record);
            mapGeneranJournalEntry.insert(generalJournalEntry, generalJournalEntryW);
            mapJournalEntry.insert(mapGeneranJournalEntry, listGeneralJournalAccountEntry);

            more = ledgerVoucherList.next();
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGeneralJournalAccountEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks and posts the transactions of this ledger posting reference.
    /// </summary>
    /// <param name="_journal">
    /// The ledger posting journal of this ledger posting reference.
    /// </param>
    /// <param name="_reference">
    /// The ledger voucher object.
    /// </param>
    /// <returns>
    /// A Boolean value that indicates whether the method was successful.
    /// </returns>
    public List getGeneralJournalAccountEntry(LedgerVoucher _journal, LedgerVoucherObject _reference)
    {
        LedgerVoucherTransObject trans;
        boolean haveMore;
        boolean isValid;

        List    listGeneralJournaAccountEntry = new List(Types::Record);

        LedgerVoucherTransList  transactionCollection;

        transactionCollection = _reference.getInternalCollection();
        if (transactionCollection.elements() == 0)
        {
            //do nothing if there are no transactions
            return listGeneralJournaAccountEntry;
        }

        isValid = _reference.check(_journal);

        if (isValid)
        {
            haveMore = transactionCollection.first();
            while (haveMore)
            {
                trans = transactionCollection.item();

                listGeneralJournaAccountEntry.addEnd(trans.parmGeneralJournalAccountEntry());

                haveMore = transactionCollection.next();
            }
        }
        else
        {
            //Voucher cannot be posted because it contains errors.
            throw error("@SYS24803");
        }
        return listGeneralJournaAccountEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalEntryMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the map which includes the post proforma data.
    /// </summary>
    /// <param name="_mapJournalEntry">
    /// The new value of the map which includes the post proforma data.
    /// </param>
    /// <returns>
    /// The current value of map which includes the post proforma data.
    /// </returns>
    public Map parmJournalEntryMap(Map _mapJournalEntry = mapJournalEntry)
    {
        mapJournalEntry = _mapJournalEntry;
        return mapJournalEntry;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>