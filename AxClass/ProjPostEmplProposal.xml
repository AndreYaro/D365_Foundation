<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostEmplProposal</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjPostEmplProposal extends ProjPost
{
    ProjInvoiceEmpl     newProjInvoiceEmpl;
    ProjProposalEmpl    projProposalEmpl;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCreditNoteCostValue</Name>
				<Source><![CDATA[
        public boolean checkCreditNoteCostValue()
    {
        boolean             costValue   = false;

        if (projTrans.parmSaleTransStatus() == ProjTransStatus::CreditnoteProposal)
        {
            ProjLedgerStatus projLedgerStatus = ProjRevRecHelper::getEmplLedgerStatus(ProjTable::find(projTrans.projId()));
            if (projLedgerStatus  == ProjLedgerStatus::BalanceSheet && projTrans.canBeCapitalize())
            {
                costValue   = true;
            }
        }

        return costValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCreditNoteSalesAccrued</Name>
				<Source><![CDATA[
        public boolean checkCreditNoteSalesAccrued()
    {
        ProjActivateTrans transTurnover = false;

        if (projTrans.transStatus() == ProjTransStatus::CreditnoteProposal)
        {
            transTurnover = ProjRevRecHelper::postWIPEmplForProject(ProjTable::find(projTrans.projId()));
        }

        return transTurnover;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnterCostValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the posting requires posting to a cost account and whether a non-zero value has
    /// been entered.
    /// </summary>
    /// <returns>
    /// true if the value for cost is non-zero and the post to the cost account is true; otherwise, false.
    /// </returns>
    protected boolean checkEnterCostValue()
    {
        boolean ret = false;

        if (this.checkCreditNoteCostValue())
        {
            ProjLedgerStatus emplTransCost = ProjRevRecHelper::getEmplLedgerStatus(ProjTable::find(projTrans.projId()));

            if (emplTransCost == ProjLedgerStatus::BalanceSheet)
            {
                this.parmEnterCost(true);
                this.parmLedgerStatusCost(emplTransCost);
                this.parmUpdateTrans(true);
            }
            ret = super();
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnterSalesAccrued</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the accrued sales amount has been entered and is expected to be posted.
    /// </summary>
    /// <returns>
    /// true if the accrued sales amount is non-zero and the <c>parmEnterSalesAccrued</c> method returns
    /// true; otherwise, false.
    /// </returns>
    protected boolean checkEnterSalesAccrued()
    {
        boolean ret = false;

        if (this.checkCreditNoteSalesAccrued())
        {
            this.parmEnterSalesAccrued(true);
            this.parmUpdateTrans(true);
            ret = super();
        }
        else
        {
            ret = this.parmEnterSalesAccrued()  &&
                projTrans.canBeAccrued() &&
                this.ledgerSalesAmount();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costValueCUR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cost amount for the transaction.
    /// </summary>
    /// <returns>
    /// The cost amount for the transaction.
    /// </returns>
    public AmountCur costValueCUR()
    {
        AmountCur   amountCur = super();

        if (this.checkCreditNoteCostValue())
        {
            amountCur   = -amountCur;
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditAccountCostValueLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ledger dimension to use to post the credit side of transactions for costs.
    /// </summary>
    /// <param name="_fundingSourceId">
    ///    The funding source that is associated with the project contract that is used by this transaction.
    /// </param>
    /// <returns>
    ///    The ledger dimension to use to post the credit amounts for costs.
    /// </returns>
    public LedgerDimensionDefaultAccount creditAccountCostValueLedgerDimension(ProjFundingSourceRefId _fundingSourceId )
    {
        return projTrans.costAccountLedgerDimension(_fundingSourceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditAccountTurnoverLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ledger dimension to use to post the revenue amounts.
    /// </summary>
    /// <param name="_fundingSourceId">
    ///    The funding source that is associated with the project contract that is used by this transaction.
    /// </param>
    /// <returns>
    ///    The ledger dimension to use to post the revenue amounts.
    /// </returns>
    public LedgerDimensionDefaultAccount creditAccountTurnoverLedgerDimension(ProjFundingSourceRefId _fundingSourceId)
    {
        return projTrans.revenueAccountLedgerDimension(_fundingSourceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>debitAccountCostValueLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ledger dimension that is used for the debit side of a posting transaction for costs.
    /// </summary>
    /// <param name="_fundingSourceId">
    ///    The funding source that is associated with the project contract that is used by this transaction.
    /// </param>
    /// <returns>
    ///    The ledger dimension to use to post the debit amounts of the cost transactions.
    /// </returns>
    public LedgerDimensionDefaultAccount debitAccountCostValueLedgerDimension(ProjFundingSourceRefId _fundingSourceId)
    {
        LedgerDimensionDefaultAccount   ledgerDimension;

        switch (this.parmLedgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet:
                if (projTrans.projLineProperty().ToBeCapitalize)
                {
                    ledgerDimension = projTrans.statusAccountLedgerDimension(_fundingSourceId);
                }
                else
                {
                    ledgerDimension = projTrans.costAccountLedgerDimension(_fundingSourceId);
                }
                break;

            case ProjLedgerStatus::Operations:
                ledgerDimension = projTrans.costAccountLedgerDimension(_fundingSourceId);
                break;
        }

        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerSalesAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sales account to post to the general ledger.
    /// </summary>
    /// <returns>
    /// The sales amount to post to the general ledger.
    /// </returns>
    /// <remarks>
    /// If this transaction is a reversing entry, the value will be the negative value of the value that is
    /// returned by the <c>salesAmountMST</c> method; otherwise, the value will be the revenue amount of
    /// the transaction.
    /// </remarks>
    public AmountCur ledgerSalesAmount()
    {
        AmountCur   amountCur = super();

        if (this.checkCreditNoteSalesAccrued())
        {
            amountCur   = -amountCur;
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>ProjPostEmplProposal</c> class.
    /// </summary>
    /// <param name="_buffer">
    /// The table for the transaction type.
    /// </param>
    public void new(Common _buffer)
    {
        projProposalEmpl    = _buffer;
        projTrans           = ProjTrans::newProjProposalEmpl(projProposalEmpl);

        this.parmTransIdCost(projTrans.transId());
        this.parmTransIdSales(projTrans.transId());

        super(_buffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTrans</Name>
				<Source><![CDATA[
        public Common newTrans()
    {
        return newProjInvoiceEmpl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransStatus</Name>
				<Source><![CDATA[
        public ProjTransStatus parmTransStatus(ProjTransStatus  _transStatus = 0)
    {
        return projTrans.transStatus() == ProjTransStatus::CreditnoteProposal ? ProjTransStatus::Posted : ProjTransStatus::Invoiced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger posting type that is associated with posting project costs based on the status
    /// current project ledger.
    /// </summary>
    /// <returns>
    /// The ledger posting type for project costs.
    /// </returns>
    /// <remarks>
    /// This method must be implemented in the class from which it extends.
    /// </remarks>
    public LedgerPostingType postingTypeCost()
    {
        LedgerPostingType ledgerPostingType;

        switch (this.parmLedgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet :
                if (projTrans.projLineProperty().ToBeCapitalize)
                {
                    ledgerPostingType = LedgerPostingType::ProjWIPCostvalue;
                }
                else
                {
                    ledgerPostingType = LedgerPostingType::ProjCost;
                }
                break;

            case ProjLedgerStatus::Operations   :
                ledgerPostingType = LedgerPostingType::ProjCost;
                break;
        }

        return ledgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeOffsetCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger posting type for project offset cost posting based on the current ledger status of
    /// the project.
    /// </summary>
    /// <returns>
    /// The ledger posting type for project offset costs.
    /// </returns>
    /// <remarks>
    /// This method must be implemented in the class from which it extends.
    /// </remarks>
    public LedgerPostingType postingTypeOffsetCost()
    {
        return LedgerPostingType::ProjCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a transaction posting.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method before the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmCreateTrans</c> method is true.
    /// </remarks>
    public void projTransCreate()
    {
        // <GBR>
        ProjInvoiceTransTaxWithholdGroups_BR projInvoiceTransTaxWithholdGroups_BR;
        // </GBR>

        newProjInvoiceEmpl.clear();

        newProjInvoiceEmpl = ProjInvoiceEmpl::initInvoiceFromProposale(projProposalEmpl);

        newProjInvoiceEmpl.ProjInvoiceId = projProposalEmpl.projProposalJour().ProjInvoiceId;
        newProjInvoiceEmpl.InvoiceDate   = projProposalEmpl.projProposalJour().InvoiceDate;

        newProjInvoiceEmpl.insert();

        Docu::copy(projProposalEmpl, newProjInvoiceEmpl);

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            projInvoiceTransTaxWithholdGroups_BR.ProjInvoiceJour = newProjInvoiceEmpl.projInvoiceJour().RecId;
            projInvoiceTransTaxWithholdGroups_BR.LineAmountCur = projProposalEmpl.lineAmount();
            projInvoiceTransTaxWithholdGroups_BR.TaxWithholdItemGroupHeading_TH = ProjCategory::find(newProjInvoiceEmpl.CategoryId).TaxWithholdItemGroupHeading_TH;
            projInvoiceTransTaxWithholdGroups_BR.insert();
        }
        // </GBR>
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a transaction posting.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method after the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmUpdateTrans</c> method returns true.
    /// </remarks>
    public void projTransUpdate()
    {
        ProjEmplTrans   projEmplTrans;

        projEmplTrans = ProjEmplTrans::find(projTrans.transId(),true);

        projEmplTrans.Txt = projTrans.txt();

        projEmplTrans.update();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>