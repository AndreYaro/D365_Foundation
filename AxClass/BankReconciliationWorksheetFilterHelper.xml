<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconciliationWorksheetFilterHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankReconciliationWorksheetFilterHelper
{
    private const str SplitStr = ' | ';
    private const str FilterStr = "@SYS76766";
    private const str FilterRangeStr = "@GLS105140";
    private const str LargerThanStr = '%1 >= %2';
    private const str LessThanStr = '%1 <= %2';
    private const str DateRange = '%1 %2';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>appendSummary</Name>
				<Source><![CDATA[
    private static str appendSummary(str _summary, str _subString)
    {
        if (_subString)
        {
            _summary += (_summary ? SplitStr + _subString : _subString);
        }
        return _summary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDateRangeSummary</Name>
				<Source><![CDATA[
    private static str getDateRangeSummary(date _fromDate, date _toDate, str _rangeLabel, str _fromLabel, str _toLabel)
    {
        str rangeSummary;

        if (_fromDate && _toDate)
        {
            rangeSummary = strFmt(FilterRangeStr, _rangeLabel, _fromDate, _toDate);
        }
        else if (_fromDate)
        {
            rangeSummary = strFmt(DateRange, _fromLabel, _fromDate);
        }
        else if (_toDate)
        {
            rangeSummary = strFmt(DateRange, _toLabel, _toDate);
        }

        return rangeSummary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountRangeSummary</Name>
				<Source><![CDATA[
    private static str getAmountRangeSummary(real _fromAmount, real _toAmount, str _fieldLabel)
    {
        str rangeSummary;

        if (_fromAmount && _toAmount)
        {
            rangeSummary = strFmt(FilterRangeStr, _fieldLabel, _fromAmount, _toAmount);
        }
        else if (_fromAmount)
        {
            rangeSummary = strFmt(LargerThanStr, _fieldLabel, _fromAmount);
        }
        else if (_toAmount)
        {
            rangeSummary = strFmt(LessThanStr, _fieldLabel, _toAmount);
        }

        return rangeSummary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDateRange</Name>
				<Source><![CDATA[
    internal static void validateDateRange(date _fromDate, date _toDate)
    {
        if (_fromDate && _toDate && _toDate < _fromDate)
        {
            throw error("@SYS107147");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAmountPositive</Name>
				<Source><![CDATA[
    internal static void validateAmountPositive(AmountCur _amount)
    {
        if (_amount < 0)
        {
            throw error("@SYS97196");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAmountRange</Name>
				<Source><![CDATA[
    internal static void validateAmountRange(AmountCur _fromAmount, AmountCur _toAmount)
    {
        if (_toAmount && _fromAmount && _toAmount < _fromAmount)
        {
            throw error("@CashManagement:BankReconWorksheetFilterAmountRangeValidationError");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateStatementFilterSummaryInfo</Name>
				<Source><![CDATA[
    internal static str generateStatementFilterSummaryInfo(
        date _fromDate,
        date _toDate,
        real _debitAmountFrom,
        real _debitAmountTo,
        real _creditAmountFrom,
        real _creditAmountTo,
        str _transCode,
        str _tradingParty,
        str _referenceNumber,
        str _identification)
    {
        str summary = BankReconciliationWorksheetFilterHelper::getDateRangeSummary(_fromDate,
            _toDate,
            "@GLS221255",
            "@CashManagement:BankReconWorksheetFilterStatementBookingDateFromLabel",
            "@CashManagement:BankReconWorksheetFilterStatementBookingDateUntilLabel");

        str subString = BankReconciliationWorksheetFilterHelper::getAmountRangeSummary(_debitAmountFrom, _debitAmountTo, "@CashManagement:BankReconWorksheetFilterDebitAmountLabel");
        summary = BankReconciliationWorksheetFilterHelper::appendSummary(summary, subString);

        subString = BankReconciliationWorksheetFilterHelper::getAmountRangeSummary(_creditAmountFrom, _creditAmountTo, "@CashManagement:BankReconWorksheetFilterCreditAmountLabel");
        summary = BankReconciliationWorksheetFilterHelper::appendSummary(summary, subString);

        if (_transCode)
        {
            subString = strFmt(FilterStr, "@GLS221722", _transCode);
            summary = BankReconciliationWorksheetFilterHelper::appendSummary(summary, subString);
        }
        if (_tradingParty)
        {
            subString = strFmt(FilterStr, "@GLS221306", _tradingParty);
            summary = BankReconciliationWorksheetFilterHelper::appendSummary(summary, subString);
        }
        if (_referenceNumber)
        {
            subString = strFmt(FilterStr, "@SYS54020", _referenceNumber);
            summary = BankReconciliationWorksheetFilterHelper::appendSummary(summary, subString);
        }
        if (_identification)
        {
            subString = strFmt(FilterStr, "@GLS221245", _identification);
            summary = BankReconciliationWorksheetFilterHelper::appendSummary(summary, subString);
        }

        return summary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateDocumentFilterSummaryInfo</Name>
				<Source><![CDATA[
    internal static str generateDocumentFilterSummaryInfo(
        date _fromDate,
        date _toDate,
        real _debitAmountFrom,
        real _debitAmountTo,
        real _creditAmountFrom,
        real _creditAmountTo,
        str _transType,
        BankDocumentBookType _documentType,
        str _partyName,
        str _paymentReference)
    {
        str summary = BankReconciliationWorksheetFilterHelper::getDateRangeSummary(_fromDate,
            _toDate,
            "@SYS7402",
            "@CashManagement:BankReconWorksheetFilterDocumentDateFromLabel",
            "@CashManagement:BankReconWorksheetFilterDocumentDateUntilLabel");

        str subString = BankReconciliationWorksheetFilterHelper::getAmountRangeSummary(_debitAmountFrom, _debitAmountTo, "@CashManagement:BankReconWorksheetFilterDebitAmountLabel");
        summary = BankReconciliationWorksheetFilterHelper::appendSummary(summary, subString);

        subString = BankReconciliationWorksheetFilterHelper::getAmountRangeSummary(_creditAmountFrom, _creditAmountTo, "@CashManagement:BankReconWorksheetFilterCreditAmountLabel");
        summary = BankReconciliationWorksheetFilterHelper::appendSummary(summary, subString);

        if (_transType)
        {
            subString = strFmt(FilterStr, "@SYS71565", _transType);
            summary = BankReconciliationWorksheetFilterHelper::appendSummary(summary, subString);
        }
        if (_documentType != BankDocumentBookType::None)
        {
            subString = strFmt(FilterStr, "@GLS221609", _documentType);
            summary = BankReconciliationWorksheetFilterHelper::appendSummary(summary, subString);
        }
        if (_partyName)
        {
            subString = strFmt(FilterStr, "@GLS221727", _partyName);
            summary = BankReconciliationWorksheetFilterHelper::appendSummary(summary, subString);
        }
        if (_paymentReference)
        {
            subString = strFmt(FilterStr, "@SYS22514", _paymentReference);
            summary = BankReconciliationWorksheetFilterHelper::appendSummary(summary, subString);
        }

        return summary;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>