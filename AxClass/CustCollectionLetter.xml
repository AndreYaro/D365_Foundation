<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustCollectionLetter</Name>
	<SourceCode>
		<Declaration><![CDATA[
public final class CustCollectionLetter implements PaymCalendarIDerivationSource
{
    CustCollectionLetterJour custCollectionLetterJour;
    NoYes released;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amount</Name>
				<Source><![CDATA[
    public AmountCur amount()
    {
        return custCollectionLetterJour.Fee;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode currencyCode()
    {
        return custCollectionLetterJour.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimension</Name>
				<Source><![CDATA[
    public DimensionDefault dimension()
    {
        return custCollectionLetterJour.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrimaryPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the postal address associated with the third-party entity.
    /// </summary>
    /// <returns>
    /// The <c>LogisticsPostalAddress</c> record that represents the postal address.
    /// </returns>
    public LogisticsPostalAddress getPrimaryPostalAddress()
    {
        return LogisticsPostalAddress::findRecId(custCollectionLetterJour.PostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursor</Name>
				<Source><![CDATA[
    public void initCursor()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(CustCollectionLetterJour _custCollectionLetterJour)
    {
        custCollectionLetterJour = _custCollectionLetterJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    public CustCollectionLetterJour nextLine()
    {
        return custCollectionLetterJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount operationLedgerDimension()
    {
        return custCollectionLetterJour.feeLedgerDimension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModuleType</Name>
				<Source><![CDATA[
    public PaymCalendarModuleType parmModuleType()
    {
        return PaymCalendarModuleType::Customer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymMode</Name>
				<Source><![CDATA[
    public PaymMode parmPaymMode()
    {
        return custCollectionLetterJour.paymMode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymTermDataAreaId</Name>
				<Source><![CDATA[
    public DataAreaId parmPaymTermDataAreaId()
    {
        return custCollectionLetterJour.dataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymTermId</Name>
				<Source><![CDATA[
    public PaymTermId parmPaymTermId()
    {
        return custCollectionLetterJour.PaymTermId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recId</Name>
				<Source><![CDATA[
    public recId recId()
    {
        return custCollectionLetterJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTax</Name>
				<Source><![CDATA[
    public void setTax(TaxWriteCode _taxWriteCode,
                       AmountCur _amountCur)
    {
        custCollectionLetterJour.TaxWriteCode = _taxWriteCode;
        custCollectionLetterJour.TaxAmount = _amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    public tableId tableId()
    {
        return custCollectionLetterJour.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxGroup</Name>
				<Source><![CDATA[
    public TaxGroup taxGroup()
    {
        return custCollectionLetterJour.TaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxItemGroup</Name>
				<Source><![CDATA[
    public TaxItemGroup taxItemGroup()
    {
        return custCollectionLetterJour.TaxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    public TransDate transDate()
    {
        return custCollectionLetterJour.Updated ? custCollectionLetterJour.Updated : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>triangulation</Name>
				<Source><![CDATA[
    public EUROTriangulation triangulation()
    {
        return Currency::triangulation(custCollectionLetterJour.CurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustedDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the adjusted due date so that it falls on a business day per calendar rules.
    /// </summary>
    /// <param name="_custCollectionLetterJour">
    /// The customer collection letter journal table buffer that specifies the due date and the calendar
    /// source.
    /// </param>
    /// <returns>
    /// The adjusted due date.
    /// </returns>
    public static DueDate getAdjustedDate(CustCollectionLetterJour _custCollectionLetterJour)
    {
        PaymTerm paymTerm;
        PaymCalendarProcessor paymCalendarProcessor;
        CustCollectionLetter custCollectionLetter;
        DueDate dueDate;

        paymTerm = PaymTerm::find(_custCollectionLetterJour.PaymTermId);
        dueDate = paymTerm.due(_custCollectionLetterJour.CollectionLetterDate);

        if (isConfigurationkeyEnabled(configurationKeyNum(PaymCalendar)))
        {
            if (paymTerm.CustomerUpdateDueDate != PaymentDueDateUpdatePolicy::NoUpdate)
            {
                paymCalendarProcessor = PaymCalendarProcessor::construct();
                custCollectionLetter = new CustCollectionLetter(_custCollectionLetterJour);
                dueDate = paymCalendarProcessor.adjustDate(dueDate, paymTerm.CustomerUpdateDueDate, custCollectionLetter);
            }
        }

        return dueDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>