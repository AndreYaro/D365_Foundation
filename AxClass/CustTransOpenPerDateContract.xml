<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustTransOpenPerDateContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data Contract class for <c>CustTransOpenPerDate</c> SSRS report.
/// </summary>
/// <remarks>
/// This is the Data Contract class for the <c>CustTransOpenPerDate</c> SSRS Report.
/// </remarks>
[
    DataContractAttribute,
    SysOperationContractProcessingAttribute(classStr(CustTransOpenPerDateUIBuilder),
    SysOperationDataContractProcessingMode::CreateUIBuilderForRootContractOnly)
]
public class CustTransOpenPerDateContract extends CustVendTransOpenStmtContract implements SysOperationValidatable, SysOperationInitializable
{
    List billingClassification;
    NoYes inclTransWithNoBillingClass;
    boolean showReportingCurrency = false; 
    NoYes excludeFutureSettlements;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes data contract values.
    /// </summary>
    public void initialize()
    {
        billingClassification = new List(Types::String);

        if (!CustParameters::isBillingClassificationEnabled())
        {
            billingClassification.addEnd(SysLabel::labelId2String(literalStr("@GLS223107")));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBillingClassification</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('BillingClassification'),
        SysOperationLabelAttribute(literalStr("@SPS371")),
        SysOperationHelpTextAttribute(literalStr("@SPS677")),
        SysOperationDisplayOrderAttribute('0'),
        AifCollectionTypeAttribute('return', Types::String)
    ]
    public List parmBillingClassification(List _billingClassification = billingClassification)
    {
        billingClassification = _billingClassification;
        return billingClassification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInclTransWithNoBillingClass</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('InclTransWithNoBillingClass'),
        SysOperationLabelAttribute(literalStr("@SPS691")),
        SysOperationHelpTextAttribute(literalStr("@SPS1009")),
        SysOperationDisplayOrderAttribute('0')
    ]
    public NoYes parmInclTransWithNoBillingClass(NoYes _inclTransWithNoBillingClass = inclTransWithNoBillingClass)
    {
        inclTransWithNoBillingClass = _inclTransWithNoBillingClass;
        return inclTransWithNoBillingClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPerDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter PerDate.
    /// </summary>
    /// <param name="_perDate">
    /// The new value of the datacontract parameter PerDate; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter PerDate.
    /// </returns>
    [
        DataMemberAttribute('PerDate'),
        SysOperationLabelAttribute(literalstr("@SYS77873")),
        SysOperationHelpTextAttribute(literalstr("@SYS77873"))
    ]
    public PerDate parmPerDate(PerDate _perDate = perDate)
    {
        perDate = _perDate;

        return perDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the dialog values for errors.
    /// </summary>
    /// <returns>
    /// false if an error has occurred in the dialog values; otherwise true.
    /// </returns>
    public boolean validate()
    {
        boolean isValid = true;

        if (!BrazilParameters::isEnabled())
        {
            isValid = CustBillingClassificationReportManager::validate(billingClassification, inclTransWithNoBillingClass);
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowReportingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Hidden parameter for reporting currency column visibility.
    /// </summary>
    /// <param name = "_showReportingCurrency">
    /// boolean value.
    /// </param>
    /// <returns>
    /// Returns True if the current ledger's reporting currency is not blank and it is not same as accounting currency.
    /// </returns>
    [
        DataMemberAttribute('ShowReportingCurrency'),
        SysOperationControlVisibilityAttribute(false)
    ]
    public boolean parmShowReportingCurrency(boolean _showReportingCurrency = showReportingCurrency)
    {
        if (Ledger::reportingCurrency() && Ledger::accountingCurrency() != Ledger::reportingCurrency())
        {
            showReportingCurrency = true;
        }
        else
        {
            showReportingCurrency = _showReportingCurrency;
        }

        return showReportingCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExcludeFutureSettlements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ExcludeFutureSettlements.
    /// </summary>
    /// <param name="_excludeFutureSettlements">
    /// The new value of the datacontract parameter ExcludeFutureSettlements.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter ExcludeFutureSettlements.
    /// </returns>
    [
        DataMemberAttribute('ExcludeFutureSettlements'),
        SysOperationLabelAttribute(literalstr("@AccountsReceivable:ExcludeFutureSettlements")),
        SysOperationHelpTextAttribute(literalstr("@AccountsReceivable:ExcludeFutureSettlements"))
    ]
    public NoYes parmExcludeFutureSettlements(NoYes _excludeFutureSettlements = excludeFutureSettlements)
    {
        excludeFutureSettlements = _excludeFutureSettlements;

        return excludeFutureSettlements;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>