<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSUpdateSourceInventoryTransactionsForRawMaterialPicking</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSUpdateSourceInventoryTransactionsForRawMaterialPicking</c> class performs an update of the production order picking
/// transactions based on the executed warehouse production picking work.
/// </summary>
internal abstract class WHSUpdateSourceInventoryTransactionsForRawMaterialPicking
{
    protected WHSWorkLine     putWorkLine;
    protected WHSWorkTable    workTable;
    protected Map             rawMaterialPolicyForItem;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateSourceInventoryTransactions</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void updateSourceInventoryTransactions()
    {
        this.updateSourceInventoryTransactionsForRawMaterialPick();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceInventoryTransactionsForRawMaterialPick</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the production raw material picking inventory transactions based on raw material policy.
    /// </summary>
    protected abstract void updateSourceInventoryTransactionsForRawMaterialPick()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveProdInventoryOnLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reserves inventory at production input location.
    /// </summary>
    /// <param name="_workLineNum">
    /// The work line number.
    /// </param>
    protected abstract void reserveProdInventoryOnLocation(LineNum _workLineNum)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineRawMaterialPolicyForItem</Name>
				<Source><![CDATA[
    protected WHSRawMaterialPolicy determineRawMaterialPolicyForItem(ItemId _itemId, WHSRawMaterialPolicy _rawMaterialPolicy)
    {
        if (rawMaterialPolicyForItem.exists(_itemId))
        {
            return rawMaterialPolicyForItem.lookup(_itemId);
        }
        else
        {
            WHSRawMaterialPolicy result = _rawMaterialPolicy;

            if (WHSInventTable::isPotentialProdPickOverride(_itemId, _rawMaterialPolicy))
            {
                result = WHSRawMaterialPolicy::Reserve;
            }

            rawMaterialPolicyForItem.insert(_itemId, result);
         
            return result;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveAtProductionInputLocation</Name>
				<Source><![CDATA[
    protected void reserveAtProductionInputLocation(WHSWorkPutLineSourceInventoryRawMaterialPickingParameters _parameters)
    {
        // If a serial exists and the user has the option to select other available serials before consumption
        if (_parameters.inventDim.inventSerialId
                &&  EcoResTrackingDimensionGroup::find(InventTable::find(_parameters.itemId).trackingDimensionGroup()).CaptureSerial == WHSWhenToCapture::Picking
                &&  EcoResTrackingDimensionGroupItem::isItemActiveSerialAtConsumption(_parameters.itemId))
        {
            // Create new record with a more 'full' inventory dimensions to delineate this record from other new <c>InventTrackingRegisterTrans</c> records
            InventTrackingRegisterTrans inventTrackingRegisterTrans;
            inventTrackingRegisterTrans.InventDimId         = _parameters.inventDim.inventDimId;
            inventTrackingRegisterTrans.InventTransOrigin   = _parameters.reservedInventTransOrigin.RecId;
            inventTrackingRegisterTrans.Qty                 = -_parameters.inventQty;

            if (!inventTrackingRegisterTrans.validateWrite())
            {
                throw error(strFmt("@WAX:WHSCannotInsertRecordInTable", tablePName(InventTrackingRegisterTrans)));
            }
            else
            {
                inventTrackingRegisterTrans.insert();
            }
        }

        // Retrieve inventory dimensions above location to match the inventory transaction that is reserved physical
        InventDim inventDimFrom = InventDim::find(_parameters.inventDimIdTo);
        inventDimFrom.clearLocationAndBelowDim(_parameters.itemId);
        inventDimFrom = InventDim::findOrCreate(inventDimFrom);
   
        if (ProdJournalBOM::hasOpenReservedRecord(_parameters.inventTransIdParent, inventDimFrom.inventDimId))
        {
            boolean isCWItem = PdsGlobal::pdsIsCWItem(_parameters.itemId);
            InventHandlingQty qtyToUpdate = isCWItem ? _parameters.inventPdsCWQty : _parameters.inventQty;
            WHSPoolProdBOM::updateWithPickListTransactionsHandlingQty(_parameters.inventTransIdParent, _parameters.itemId, _parameters.inventDim, qtyToUpdate, 0, WHSRawMaterialPolicy::Reserve);
        }
        else
        {
            Common commonInventTransOrigin = WHSInvent::getCommonFromWorkTransType(workTable.WorkTransType, _parameters.inventTransIdParent, true);
            InventMovement movement = InventMovement::construct(commonInventTransOrigin);

            //The Raw materials might have been picked already by the time the replenishment work is completed
            //Final reservation should include all the dimensions for the receipt transaction.
            WHSWorkTable::changeReservedHandlingQuantityDimensionsAllowingReduction(movement, movement.pdsCWItem() ? _parameters.inventPdsCWQty : _parameters.inventQty, inventDimFrom, _parameters.inventDim);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        rawMaterialPolicyForItem = new Map(Types::String, Types::Enum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPutWorkLineAndWork</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSUpdateSourceInventoryTransactionsForRawMaterialPicking newFromPutWorkLineAndWork(WHSWorkLine _putWorkLine, WHSWorkTable _workTable)
    {
        WHSUpdateSourceInventoryTransactionsForRawMaterialPicking updateSourceInventoryTransactionsForRawMaterialPicking;

        if (WHSInventoryTransactionConfigurationProvider::shouldUseWorkInventoryTransactionQuery(_workTable.WorkId))
        {
            updateSourceInventoryTransactionsForRawMaterialPicking = new WHSUpdateSourceInventoryTransactionsForRMPickBasedOnWarehouseTransactions();
        }
        else
        {
            updateSourceInventoryTransactionsForRawMaterialPicking = new WHSUpdateSourceInventoryTransactionsForRMPickBasedOnInventTrans();
        }

        updateSourceInventoryTransactionsForRawMaterialPicking.putWorkLine = _putWorkLine;
        updateSourceInventoryTransactionsForRawMaterialPicking.workTable = _workTable;

        return updateSourceInventoryTransactionsForRawMaterialPicking;        
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>