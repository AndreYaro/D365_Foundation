<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ElectronicPaymentRemitExport_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ElectronicPaymentRemitExport_BR</c> class
/// is responsible for exporting the electronic payment bank files.
/// </summary>
class  ElectronicPaymentRemitExport_BR extends ConfExport_BR
{
    #ConfMacros_BR
    #file

    Query                externalQuery;
    PaymMode             paymMode;
    Filename             filename;
    str                  range;
    LedgerJournalTrans   ledgerJournalTrans;
    ConfLayoutGroupId_BR confLayoutGroupId;
    DialogField          dialogFilename;
    DialogField          dialogFiletype;

    LedgerJournalId         ledgerId;
    DimensionDynamicAccount dimensionDynamicAccount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of <c>ElectronicPaymentRemitExport_BR</c> class.
    /// </summary>
    /// <returns>New instance of <c>ElectronicPaymentRemitExport_BR</c> class.</returns>
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
	public static ElectronicPaymentRemitExport_BR construct()
    {
        return new ElectronicPaymentRemitExport_BR();
	}

]]></Source>
			</Method>
			<Method>
				<Name>customQuerys</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the range of payment lines for each Payment specification
    /// </summary>
    /// <param name="_query">
    /// The configuration definition query passed as the parameter to this method
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void customQuerys(Query _query)
    {
        int                  i = 1;
        int                  j = 1;
        tableId              tableId = tablenum(LedgerJournalTrans);
        fieldId              fieldId = fieldnum(LedgerJournalTrans, PaymSpec);
        Query                queryLoc;
        QueryBuildDataSource dataSource = new QueryBuildDataSource();

        queryCont = new Array(Types::Class);

        for (j = 1; j <= conlen(paymSpecCont); j++)
        {
            queryLoc = new Query(_query);

            if (tableId)
            {
                dataSource = queryLoc.dataSourceTable(tableId);
                dataSource.clearRange(fieldId);
                dataSource.addRange(fieldId).value(conpeek(paymSpecCont, j));
            }

            this.setQueryToAllowCrossCompany(queryLoc);

            queryCont.value(j, queryLoc);
        }

        i = queryCont.lastIndex() + 1;
        queryCont.value(i, query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>epRemitParms</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the file and is a base method to run the query.
    /// </summary>
    /// <param name="_ledgerJournalId">
    /// JournalNum of the transaction.
    /// </param>
    /// <param name="_paymMode">
    /// PaymentMode of the transaction.
    /// </param>
    /// <param name="_filename">
    /// File name to export ans save.
    /// </param>
    /// <param name="_externalQuery">
    /// External query from configurator to export the required payment details.
    /// </param>
    /// <param name="_dimensionDynamicAccount">
    /// Dimension Account of bank.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void epRemitParms(
        LedgerJournalId _ledgerJournalId,
        PaymMode        _paymMode,
        Filename        _filename,
        Query           _externalQuery,
        DimensionDynamicAccount _dimensionDynamicAccount)
    {
        LedgerJournalTrans localLedgerJournalTrans;
        QueryRun           localQueryRun;

        parmFileName  = _filename;
        paymMode      = _paymMode;
        externalQuery = _externalQuery;

        if (dimensionDynamicAccount != _dimensionDynamicAccount)
        {
            dimensionDynamicAccount = _dimensionDynamicAccount;
        }

        if (ledgerId != _ledgerJournalId)
        {
            ledgerId = _ledgerJournalId;

            if (LedgerJournalTable::find(_ledgerJournalId).JournalType == LedgerJournalType::Payment)
            {
                parmLayoutId = VendPaymModeTable::find(_paymMode).ExportLayoutGroupId_BR;
            }
            else if (LedgerJournalTable::find(_ledgerJournalId).JournalType == LedgerJournalType::CustPayment)
            {
                parmLayoutId = CustPaymModeTable::find(_paymMode).ExportLayoutGroupId_BR;
            }

            parmGroupId = ConfLayoutGroups_BR::find(parmLayoutId).ConfGroupId;

            if (ConfLayoutGroups_BR::find(parmLayoutId))
            {
                if (!externalQuery)
                {
                    throw Error("@SYS121251");
                }

                localQueryRun = new QueryRun(externalQuery);

                while (localQueryRun.next())
                {
                    localLedgerJournalTrans = localQueryRun.get(tablenum(ledgerJournalTrans));

                    if (!confind(paymSpecCont, localLedgerJournalTrans.PaymSpec)
                        && localLedgerJournalTrans.OffsetLedgerDimension == dimensionDynamicAccount)
                    {
                        paymSpecCont += localLedgerJournalTrans.PaymSpec;
                    }
                }
                this.queryRun();
                this.run();
            }
            else
            {
                throw error(strfmt("@GLS1318", parmLayoutId, tablepname(ConfLayoutGroups_BR)));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the paymMode selected to generate the payment.
    /// </summary>
    /// <returns>
    /// Payment mode.
    /// </returns>
    /// <remarks>
    /// Method is specific for electronic payments and complex files. Is overloaded on <c>ElectronicPaymentRemitExport_BR</c> class
    /// </remarks>
    PaymMode getPaymMode()
    {
        return paymMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryFromUserQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a <c>Query</c> object based on user-provided information.
    /// </summary>
    /// <param name="_confTable">
    /// <c>ConfTable_BR</c> to base the query one.
    /// </param>
    /// <returns>
    /// A <c>Query</c> object based on user-provided information.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Query getQueryFromUserQuery(ConfTable_BR _confTable)
    {
        query                   userQuery;
        QueryBuildDataSource    ledgerJournalTableQbds;
        QueryBuildDataSource    ledgerJournalTransQbds;
        QueryBuildDataSource    epRemitOccCodesQbds;

        userQuery = new Query(_confTable.QueryTitle);

        ledgerJournalTableQbds  = userQuery.dataSourceTable(tableNum(LedgerJournalTable));
        ledgerJournalTransQbds  = userQuery.dataSourceTable(tableNum(LedgerJournalTrans));
        epRemitOccCodesQbds      = userQuery.dataSourceTable(tableNum(EPRemitOccCodes_BR));

        if (!ledgerJournalTableQbds)
        {
            error(strFmt("@GLS223816", tableId2name(tableNum(LedgerJournalTable))));
        }
        else
        {
            ledgerJournalTableQbds.addRange(fieldnum(LedgerJournalTable, JournalNum)).value(queryValue(ledgerId));
        }

        if (!ledgerJournalTransQbds)
        {
            error(strFmt("@GLS223816", tableId2name(tableNum(LedgerJournalTrans))));
        }
        else
        {
            ledgerJournalTransQbds.addRange(fieldnum(LedgerJournalTrans, JournalNum)).value(queryValue(ledgerId));
            ledgerJournalTransQbds.addRange(fieldnum(LedgerJournalTrans, PaymentStatus)).value(queryValue(CustVendPaymStatus::None));
        }

        if (!epRemitOccCodesQbds)
        {
            error(strFmt("@GLS223816", tableId2name(tableNum(EPRemitOccCodes_BR))));
        }
        else
        {
            epRemitOccCodesQbds.addRange(fieldnum(EPRemitOccCodes_BR, RemitOccCode)).value(queryValue(enum2str(EPRemitOccCode_BR::Code_00)));
        }

        return userQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSegment</Name>
				<Source><![CDATA[
    /// <summary>
    /// returns a segment related for a given payment specification
    /// </summary>
    /// <param name="_paymspec">
    /// payment specification of the journal line
    /// </param>
    /// <returns>
    /// The segment related.
    /// </returns>
    /// <remarks>
    /// Method is specific for electronic payments and complex files. Is overloaded on <c>ElectronicPaymentRemitExport_BR</c> class
    /// </remarks>
    str getSegment(PaymSpec _paymspec)
    {
        str segment;

        switch (LedgerJournalTable::find(ledgerId).JournalType)
        {
            case LedgerJournalType::CustPayment :
                segment     = CustPaymModeSpec::findSpec(paymMode, _paymspec).EPSegment_BR;
                break;

            case LedgerJournalType::Payment     :
                segment     = VendPaymModeSpec::findSpec(paymMode, _paymspec).EPSegment_BR;
                break;

            default : segment = '';
        }

        return segment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        #ConfMacros_BR

        super();
        this.parmExportMode(ConfExportMode_BR::Layout);
        separator     = #Tab;
        textQualifier = #SingleQuotes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryToAllowCrossCompany</Name>
				<Source><![CDATA[
    private void setQueryToAllowCrossCompany(Query _query)
    {
        var dataAreaIdList = CustVendOpenTransManager::findSharedServiceCompanies(curExt());
        _query.allowCrossCompany(true);

        for (var i = 1; i <= conlen(dataAreaIdList); i++)
        {
            _query.addCompanyRange(conpeek(dataAreaIdList, i));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    protected void queryBuild(JoinMode _joinMode = JoinMode::InnerJoin, QueryFetchMode _fetchMode = QueryFetchMode::One2One)
    {
        ConfTableSelection_BR   tableSelection;
        ConfRelations_BR        tableRelations;
        ConfDefinitions_BR      fieldsGroupsSelection;
        ConfSortOrder_BR        tableSorting;
        ConfTable_BR            confTable;

        QueryBuildDataSource    dataSource;
        QueryBuildFieldList     fieldList;
        QueryBuildRange         queryBuildRange;

        tableId                 tableId;
        fieldId                 fieldId;
        DictFieldGroup          dictFieldGroup;
        DictRelation            dictRelation;

        tableId                 relatedTableId;
        QueryBuildDataSource    relatedDataSource;

        boolean                 tmprelations;
        int                     n;

        query = new Query();
        this.setQueryToAllowCrossCompany(query);

        confTable = confTable_BR::find(parmGroupId);

        if (confTable.IsQueryBased)
        {
            query = this.getQueryFromUserQuery(confTable);
        }
        else
        {
            tmprelations = false;

            while select tableSelection
                order by DataSourceNumber
                where   tableSelection.ConfGroupId == parmGroupId
            {
                tableId = tablename2id(tableSelection.TableName);

                if (!tableId)
                {
                    error(strfmt("@SYS75683", tableSelection.TableName));
                    continue;
                }

                if (tableSelection.RelatedTo)
                {
                    relatedTableId = tablename2id(tableSelection.RelatedTo);
                    if (!relatedTableId)
                    {
                        error(strfmt( "@SYS75683", tableSelection.RelatedTo));
                        continue;
                    }

                    relatedDataSource = query.dataSourceTable(relatedTableId);

                    if (relatedDataSource)
                    {
                        dataSource = relatedDataSource.addDataSource(tableId);
                        dataSource.joinMode(_joinMode);
                        dataSource.fetchMode(_fetchMode);
                    }

                    if (tableSelection.SysRelation == NoYes::Yes)
                    {
                        dictRelation = new DictRelation(tableId);
                        n = dictRelation.loadTableRelation(relatedTableId);
                        if (n)
                        {
                            dataSource.addRelation(dictRelation);
                        }
                        else
                        {
                            error(strfmt( "@SYS75688", tableSelection.TableName, tableSelection.RelatedTo));
                        }
                    }
                    else
                    {
                        while select RelationshipType, SourceFieldName, RelatedField, FixedValue
                            from tableRelations
                            where tableRelations.ConfGroupId == parmGroupId
                                && tableRelations.SourceTableName == tableSelection.RelatedTo
                                && tableRelations.RelatedTable == tableSelection.TableName
                        {
                            tmprelations = true;
                            switch (tableRelations.RelationshipType)
                            {
                                case ConfRelationships_BR::Normal:
                                    dataSource.addLink(
                                        fieldname2id(relatedTableId,tableRelations.SourceFieldName),
                                        fieldname2id(tableId, tableRelations.RelatedField));
                                    break;

                                case ConfRelationships_BR::FixedField:
                                    queryBuildRange = relatedDataSource.findRange(fieldname2id(relatedTableId, tableRelations.SourceFieldName));
                                    if (!queryBuildRange)
                                    {
                                        queryBuildRange = relatedDataSource.addRange(fieldname2id(relatedTableId, tableRelations.SourceFieldName));
                                        queryBuildRange.value(int2str(tableRelations.FixedValue ));
                                    }
                                    break;

                                case ConfRelationships_BR::FixedFieldRelated:
                                    queryBuildRange = dataSource.findRange(fieldname2id(tableId, tableRelations.RelatedField));
                                    if (!queryBuildRange)
                                    {
                                        queryBuildRange = dataSource.addRange(fieldname2id(tableId, tableRelations.RelatedField));
                                        queryBuildRange.value(int2str(tableRelations.FixedValue));
                                    }
                                    break;
                            }
                        }
                    }
                }
                else
                {
                    dataSource = query.addDataSource(tableId);
                }

                dataSource.firstFast(false);
                dataSource.firstOnly(false);
                dataSource.clearSortIndex();
                dataSource.clearRanges();

                while select FieldName, SortOrder from tableSorting order by SortingNumber
                    where tableSorting.ConfGroupId == tableSelection.ConfGroupId
                        && tableSorting.TableName == tableSelection.TableName
                {
                    fieldId = fieldname2id(tableId, tableSorting.FieldName);
                    if (fieldId)
                    {
                        dataSource.addSortField(fieldId, tableSorting.SortOrder);
                    }
                    else
                    {
                        error(strfmt("@SYS75684", fieldsGroupsSelection.FieldName, tableSelection.TableName));
                    }
                }
                fieldList = dataSource.fields();
                fieldList.dynamic(true);
                while select fieldsGroupsSelection order by SortingNumber
                    where fieldsGroupsSelection.ConfGroupId == tableSelection.ConfGroupId
                        && fieldsGroupsSelection.TableName == tableSelection.TableName
                {
                    if (fieldsGroupsSelection.FieldName)
                    {
                        fieldId = fieldname2id(tableId, fieldsGroupsSelection.FieldName);
                        if (fieldId)
                        {
                            fieldList.addField(fieldId);
                        }
                        else
                        {
                            error(strfmt( "@SYS75684", fieldsGroupsSelection.FieldName, tableSelection.TableName));
                        }
                    }
                    if ( fieldsGroupsSelection.FieldGroup)
                    {
                        dictFieldGroup = new DictFieldGroup(tableId, fieldsGroupsSelection.FieldGroup);
                        if (dictFieldGroup)
                        {
                            for (n=1 ; n <= dictFieldGroup.numberOfFields(); n++)
                            {
                                fieldId = dictFieldGroup.field(n);
                                if (fieldId)
                                {
                                    fieldList.addField(fieldId);
                                }
                                else
                                {
                                    error(strfmt("@SYS77712", fieldsGroupsSelection.FieldGroup, n));
                                }
                            }
                        }
                        else
                        {
                            error(strfmt("@GLS1179", fieldsGroupsSelection.FieldGroup, tableSelection.TableName));
                        }
                    }
                }

                if (!tmprelations)
                {
                    while select RelationshipType, SourceFieldName, RelatedField, FixedValue
                            from tableRelations
                            where tableRelations.ConfGroupId == parmGroupId
                                && tableRelations.SourceTableName == tableSelection.RelatedTo
                                && tableRelations.RelatedTable == tableSelection.TableName
                    {
                        switch (tableRelations.RelationshipType)
                        {
                            case ConfRelationships_BR::Normal:
                                    dataSource.addLink(
                                        fieldname2id(relatedTableId,tableRelations.SourceFieldName),
                                        fieldname2id(tableId,tableRelations.RelatedField));
                                break;

                            case ConfRelationships_BR::FixedField:
                                queryBuildRange = relatedDataSource.findRange(fieldname2id(relatedTableId, tableRelations.SourceFieldName));
                                if (!queryBuildRange)
                                {
                                    queryBuildRange = relatedDataSource.addRange(fieldname2id(relatedTableId, tableRelations.SourceFieldName));
                                    queryBuildRange.value(int2str(tableRelations.FixedValue ));
                                }
                                break;

                            case ConfRelationships_BR::FixedFieldRelated:
                                queryBuildRange = dataSource.findRange(fieldname2id(tableId, tableRelations.RelatedField));
                                if (!queryBuildRange)
                                {
                                    queryBuildRange = dataSource.addRange(fieldname2id(tableId, tableRelations.RelatedField));
                                    queryBuildRange.value(int2str(tableRelations.FixedValue));
                                }
                                break;
                        }
                    }
                }

                if (tablename2id(tableSelection.TableName) == tablenum(LedgerJournalTable))
                {
                    fieldId = fieldnum(LedgerJournalTable, JournalNum);
                    dataSource.addRange(fieldId).value(queryValue(ledgerId));
                }
                else if (tablename2id(tableSelection.TableName) == tablenum(LedgerJournalTrans))
                {
                    fieldId = fieldnum(LedgerJournalTrans, JournalNum);
                    dataSource.addRange(fieldId).value(queryValue(ledgerId));

                    fieldId = fieldnum(LedgerJournalTrans, PaymentStatus);
                    dataSource.addRange(fieldId).value(enum2str(CustVendPaymStatus::None));

                    fieldId = fieldnum(LedgerJournalTrans, OffsetLedgerDimension);
                    dataSource.addRange(fieldId).value(queryValue(dimensionDynamicAccount));
                }
                else if (tablename2id(tableSelection.TableName) == tablenum(EPSegmentTable_BR))
                {
                    fieldId = fieldnum(EPSegmentTable_BR, EPSegment_BR);
                    dataSource.addRange(fieldId);
                }
                else if (tablename2id(tableSelection.TableName) == tablenum(EPRemitOccCodes_BR))
                {
                    fieldId = fieldnum(EPRemitOccCodes_BR, RemitOccCode);
                    dataSource.addRange(fieldId).value(enum2str(EPRemitOccCode_BR::Code_00));
                }
            }
        }

        queryRun = new QueryRun(query);
        epSpecific = true;

        if (ConfLayoutGroups_BR::find(parmLayoutId, false).FileStructure == ConfFileStructure_BR::Complex)
        {
            complexStructure = true;
            this.customQuerys(query);
        }
        else
        {
            complexStructure = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun(QueryRun _queryRun = queryRun)
    {
        int dataSourceCount;
        int dataSourceNo;
        int rangeCount;
        int rangeNo;
        int occurrence;
        QueryBuildDataSource toDS;
        QueryBuildDataSource fromDS;
        QueryBuildRange      toRange;

        QueryRun qr;
        Query    localQuery;

        qr = super(_queryRun);

        dataSourceCount = externalquery.dataSourceCount();

        // copy query ranges used in externalQuery to query generated by buildQuery()

        localQuery = qr.query();
        for (dataSourceNo = 1; dataSourceNo <= dataSourceCount; dataSourceNo++)
        {
            if (localQuery.dataSourceTable(externalquery.dataSourceNo(dataSourceNo).table()))
            {
                fromDS = externalquery.dataSourceNo(dataSourceNo);
                toDS = localQuery.dataSourceTable(externalquery.dataSourceNo(dataSourceNo).table());

                rangeCount = fromDS.rangeCount();
                for (rangeNo=1; rangeNo <= rangeCount; rangeNo++)
                {
                    occurrence = 1;
                    toRange = toDS.findRange(fromDS.range(rangeNo).field(), occurrence);
                    if (!toRange)
                    {
                        toDS.addRange(fromDS.range(rangeNo).field()).value(fromDS.range(rangeNo).value());
                    }
                    else
                    {
                        while (toRange)
                        {
                            if (toRange.value() != fromDS.range(rangeNo).value())
                            {
                                toDS.addRange(fromDS.range(rangeNo).field()).value(fromDS.range(rangeNo).value());
                                break;
                            }
                            occurrence++;
                            toRange = toDS.findRange(fromDS.range(rangeNo).field(), occurrence);
                        }
                    }
                }
            }
        }

        return qr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00067, funcName());

        this.queryBuild();
        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>