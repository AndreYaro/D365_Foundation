<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchFinalizeServiceTaskPurchaseOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchFinalizeServiceTaskPurchaseOrder</c> class contains purchase orders and lines that are
/// finalized.
/// </summary>
class PurchFinalizeServiceTaskPurchaseOrder implements SysPackable
{
    PurchTable  purchTable;
    Set         purchLines;
    Set         purchLinesRecId;
    container   purchLinesCon;
    container   purchLinesRecidCon;

    #define.CurrentVersion(2)
    #define.Version1(1)
    #LOCALMACRO.CurrentList
        purchTable,
        purchLinesCon
    #ENDMACRO

    #LOCALMACRO.CurrentListV2
        purchTable,
        purchLinesRecidCon
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container pack()
    {            
        if (PurchFinalizeLineRecIdFlight::instance().isEnabled())
        {
            purchLinesRecidCon = purchLinesRecId.pack();
            return [#CurrentVersion,#CurrentListV2];
        }
        else
        {
            purchLinesCon = purchLines.pack();
            return [#Version1,#CurrentList];
        }     
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// If flight enabled and method is called as a getter convert set of RecId to set of records.
    /// Next calls of method as a getter use existing set of purchase order lines.
    /// If method is called as a setter set of purchase order line record Ids is created from set of records.
    /// </summary>
    /// <param name = "_purchLines">Set of purchase order line records.</param>
    /// <returns></returns>
    [SysObsolete('Use parmPurchLinesRecId() instead.', false, 31\03\2025)]
    public Set parmPurchLines(Set _purchLines = purchLines)
    {
        if (PurchFinalizeLineRecIdFlight::instance().isEnabled())
        {
            if (prmIsDefault(_purchLines))
            {                    
                if (purchLines != null)
                {
                    return purchLines;
                }
                else if (purchLinesRecId != null)
                {
                    purchLines = this.convertRecIdsToRecords(purchLinesRecId);
                }
                else
                {
                    purchLines = _purchLines;
                }               
            }
            else
            {
                if (_purchLines.typeId() != Types::Record)
                {
                    throw error(error::wrongUseOfFunction(funcName()));
                }

                purchLines = _purchLines;
                purchLinesRecid = this.convertRecordsToRecIds(_purchLines);
            }           
        }
        else
        {
            purchLines = _purchLines;
        }
     
        return purchLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchLinesRecId</Name>
				<Source><![CDATA[
    public Set parmPurchLinesRecId(Set _purchLinesRecId = purchLinesRecid)
    {
        if (!prmIsDefault(_purchLinesRecId))
        {
            if (_purchLinesRecId.typeId() != Types::Int64)
            {
                throw error(error::wrongUseOfFunction(funcName()));
            }
        }
        
        purchLinesRecid = _purchLinesRecId;
        return purchLinesRecid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchTable</Name>
				<Source><![CDATA[
        public PurchTable parmPurchTable(PurchTable _purchTable = purchTable)
    {
        purchTable = _purchTable;

        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean unpack(container _packedClass)
    {
        int version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentListV2] = _packedClass;

                if (PurchFinalizeLineRecIdFlight::instance().isEnabled())
                {                   
                    purchLinesRecId = Set::create(purchLinesRecidCon);
                    purchLines = null;
                }
                else
                {
                    // If pack() was done with enabled flight and unpack() is with disabled flieght
                    // we should check what is in container.
                    Set lines = Set::create(purchLinesRecidCon);
                    Types purchLinesType = lines.typeId();
                    if (purchLinesType == Types::Record)
                    {
                        purchLines = lines;
                        purchLinesRecId = this.convertRecordsToRecIds(lines);
                    }
                    else
                    {
                        purchLines = this.convertRecIdsToRecords(lines);
                        purchLinesRecId = lines;
                    }                  
                }

                return true;
            case #Version1:
                [version,#CurrentList] = _packedClass;
                purchLines = Set::create(purchLinesCon);
                purchLinesRecId = this.convertRecordsToRecIds(purchLines);
                return true;
            default :
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertRecordsToRecIds</Name>
				<Source><![CDATA[
    private Set convertRecordsToRecIds(Set _purchLines)
    {
        SetEnumerator se = _purchLines.getEnumerator();
        Set purchLinesRecIds = new Set(Types::Int64);

        while (se.moveNext())
        {
           PurchLine purchLine = se.current();
           purchLinesRecIds.add(purchLine.RecId);
        }

        return purchLinesRecIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertRecIdsToRecords</Name>
				<Source><![CDATA[
    private Set convertRecIdsToRecords(Set _purchLinesRecIds)
    {
        SetEnumerator se = _purchLinesRecIds.getEnumerator();
        Set purchLinesRecords = new Set(Types::Record);

        while (se.moveNext())
        {
            RecId purchLineRecId = se.current();

            PurchLine purchLine;
            select firstonly purchLine
            where purchLine.RecId == purchLineRecId;

            purchLinesRecords.add(purchLine);
        }

        return purchLinesRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates an instance of the <c>PurchFinalizeServiceTaskPurchaseOrder</c> class.
    /// </summary>
    /// <returns>
    ///     An instance of the <c>PurchFinalizeServiceTaskPurchaseOrder</c> class.
    /// </returns>
    public static PurchFinalizeServiceTaskPurchaseOrder construct()
    {
        PurchFinalizeServiceTaskPurchaseOrder task = new PurchFinalizeServiceTaskPurchaseOrder();

        return task;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>PurchFinalizeServiceTaskPurchaseOrder</c> class.
    /// </summary>
    /// <param name="_packedClass">
    /// A container that contains a previously packed <c>PurchFinalizeServiceTaskPurchaseOrder</c> object.
    /// </param>
    /// <returns>
    /// A <c>PurchFinalizeServiceTaskPurchaseOrder</c> object.
    /// </returns>
    static PurchFinalizeServiceTaskPurchaseOrder create(container _packedClass)
    {
        PurchFinalizeServiceTaskPurchaseOrder purchFinalizeServiceTaskPurchaseOrder;

        purchFinalizeServiceTaskPurchaseOrder = purchFinalizeServiceTaskPurchaseOrder::construct();
        purchFinalizeServiceTaskPurchaseOrder.unpack(_packedClass);

        return purchFinalizeServiceTaskPurchaseOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPurchaseOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PurchFinalizeServiceTaskPurchaseOrder</c> class.
    /// </summary>
    /// <param name="_purchTable">
    /// The purchase order that is finalized.
    /// </param>
    /// <param name="_purchLines">
    /// A set of purchase order lines that are finalized.
    /// </param>
    /// <returns>
    /// An instance of the <c>PurchFinalizeServiceTaskPurchaseOrder</c> class.
    /// </returns>
    [SysObsolete('Use newPurchaseOrderPurchLineRecordIds() instead.', false, 31\03\2025)]
    static PurchFinalizeServiceTaskPurchaseOrder newPurchaseOrder(purchTable _purchTable, Set _purchLines)
    {
        PurchFinalizeServiceTaskPurchaseOrder purchaseOrder = PurchFinalizeServiceTaskPurchaseOrder::construct();

        purchaseOrder.parmPurchTable(_purchTable);
        if (PurchFinalizeLineRecIdFlight::instance().isEnabled())
        {
            Set purchLinesRecIds = purchaseOrder.convertRecordsToRecIds(_purchLines);
            purchaseOrder.parmPurchLinesRecId(purchLinesRecIds);
        }
        else
        {
            purchaseOrder.parmPurchLines(_purchLines);
        }
       

        return purchaseOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPurchaseOrderPurchLineRecordIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PurchFinalizeServiceTaskPurchaseOrder</c> class.
    /// </summary>
    /// <param name="_purchTable">The purchase order that is finalized.</param>
    /// <param name="_purchLines">A set of purchase order line record Ids that are finalized.</param>
    /// <returns> An instance of the <c>PurchFinalizeServiceTaskPurchaseOrder</c> class.</returns>
    static PurchFinalizeServiceTaskPurchaseOrder newPurchaseOrderPurchLineRecordIds(purchTable _purchTable, Set _purchLinesRecId)
    {
        PurchFinalizeServiceTaskPurchaseOrder purchaseOrder = PurchFinalizeServiceTaskPurchaseOrder::construct();

        purchaseOrder.parmPurchTable(_purchTable);
        purchaseOrder.parmPurchLinesRecId(_purchLinesRecId);

        return purchaseOrder;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>