<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetFullyDepreciatedDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>AssetFullyDepreciatedDP</c> class is the data provider for the <c>AssetFullyDepreciated</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(AssetFullyDepreciated)),
    SRSReportParameterAttribute(classStr(AssetFullyDepreciatedContract))
]
public class AssetFullyDepreciatedDP extends SrsReportDataProviderPreProcessTempDB
{
    AssetFullyDepreciatedTmp assetFullyDepreciatedTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssetFullyDepreciatedTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table that contains the fully depreciated asset details.
    /// </summary>
    /// <returns>
    /// The <c>AssetFullyDepreciatedTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(AssetFullyDepreciatedTmp))
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AssetFullyDepreciatedTmp getAssetFullyDepreciatedTmp()
    {
        select assetFullyDepreciatedTmp;
        return assetFullyDepreciatedTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// This method provides the ability to write the report business logic. This method will be called by
    /// at runtime. The method should compute data and populate the data tables that will be returned to
    /// SSRS. Note that this is a framework class. Customizing this class may cause problems with future
    /// upgrades to the software.
    /// </remarks>
    public void processReport()
    {
        AssetSumCalc_Trans assetSumCalcTrans;
        AssetFullyDepreciatedContract contract;
        QueryRun queryRun;
        AssetBook assetBook;
        AssetTable assetTable;
        TransDate calculationDate;

        contract = this.parmDataContract() as AssetFullyDepreciatedContract;
        calculationDate = contract.parmCalculationDate();

        queryRun = new QueryRun(this.parmQuery());

        while (queryRun.next())
        {
            assetBook = queryRun.get(tableNum(AssetBook)) as AssetBook;
            assetTable = queryRun.get(tableNum(AssetTable)) as AssetTable;

            assetSumCalcTrans = AssetSumCalc_Trans::newAssetPeriod(queryValue(assetTable.AssetId),
                                    queryValue(assetBook.BookId), dateNull(), calculationDate);

            if (assetSumCalcTrans.netBookValue() <= 0)
            {
                assetFullyDepreciatedTmp.clear();

                assetFullyDepreciatedTmp.AssetId = assetTable.AssetId;
                assetFullyDepreciatedTmp.AssetGroup = assetTable.AssetGroup;
                assetFullyDepreciatedTmp.Name = assetTable.Name;
                assetFullyDepreciatedTmp.CategoryId = assetTable.CategoryId_LV;

                assetFullyDepreciatedTmp.BookId = assetBook.BookId;
                assetFullyDepreciatedTmp.AcquisitionDate = AssetTrans::findFirstType_W(assetTable.AssetId,
                                                        assetBook.BookId, AssetTransType::Acquisition).TransDate;
                assetFullyDepreciatedTmp.LifeTime = assetBook.LifeTime;

                assetFullyDepreciatedTmp.FinancialValue = assetSumCalcTrans.financialValue();
                assetFullyDepreciatedTmp.DepreciationValue = -assetSumCalcTrans.depreciation();

                assetFullyDepreciatedTmp.insert();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>