<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GeneralLedgerAdjustmentListPageFormControlManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Manages form control operations for adjustment list pages that implement <c>GeneralLedgerAdjustmentIProposedAdjustmentListPage</c>.
/// </summary>
internal final class GeneralLedgerAdjustmentListPageFormControlManager
{
    private GeneralLedgerAdjustmentIProposedAdjustmentListPage adjustmentListPage;
    private GeneralLedgerAdjustmentDisplayFormContext formContext;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>newForAdjustmentListPage</Name>
				<Source><![CDATA[
    internal static GeneralLedgerAdjustmentListPageFormControlManager newForAdjustmentListPage(GeneralLedgerAdjustmentIProposedAdjustmentListPage _adjustmentListPage)
    {
        GeneralLedgerAdjustmentListPageFormControlManager formControlManager = new GeneralLedgerAdjustmentListPageFormControlManager();
        formControlManager.adjustmentListPage = _adjustmentListPage;
        formControlManager.formContext = _adjustmentListPage.getAdjustmentDisplayFormContext();

        return formControlManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFilters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialized the filters present on an implementation of <c>GeneralLedgerAdjustmentIProposedAdjustmentListPage</c>.
    /// </summary>
    internal void initializeFilters()
    {
        // Get the form filter controls present on the list page
        FormStringControl adjustmentImportInfoFilterControl = adjustmentListPage.getAdjustmentImportInfoFilterControl();
        FormStringControl adjustmentCompanyFilterControl = adjustmentListPage.getAdjustmentCompanyFilterControl();
        FormComboBoxControl adjustmentStatusFilterControl = adjustmentListPage.getAdjustmentStatusFilterControl();

        // Default each filter control to reflect the current form context
        adjustmentImportInfoFilterControl.text(formContext.parmImportInfo().getImportSummary());
        adjustmentCompanyFilterControl.text(formContext.parmCompany());
        adjustmentStatusFilterControl.selection(enum2int(formContext.parmAdjustmentStatus()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialized the controls present on an implementation of <c>GeneralLedgerAdjustmentIProposedAdjustmentListPage</c>.
    /// </summary>
    internal void initializeControls()
    {
        // set the correct state of delete all button
        this.enableDisableAdjustmentDeleteAllButton(formContext.parmImportInfo());
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFormControlsOnSelectedAdjustmentChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates form controls in response to a newly selected adjustment record on the list page.
    /// </summary>
    /// <param name = "_selectedAdjustment">The adjustment that has been selected.</param>
    internal void updateFormControlsOnSelectedAdjustmentChanged(GeneralLedgerAdjustmentProposedAdjustment _selectedAdjustment)
    {
        this.enableDisableAdjustmentCopyButtonForSelectedAdjustment(_selectedAdjustment);
        this.enableDisableGridLedgerAccountField(_selectedAdjustment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFormControlsOnAdjustmentStatusFilterChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates form controls on the adjustment list page in response to a change in the adjustment status filter.
    /// </summary>
    /// <param name = "_status">The newly selected adjustment status filter.</param>
    internal void updateFormControlsOnAdjustmentStatusFilterChanged(GeneralLedgerAdjustmentResultFilter _status)
    {
        this.enableDisableJournalCreationButtonForAdjustmentStatus(_status);
        this.enableDisableAdjustmentDeleteAllButton(formContext.parmImportInfo());
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFormControlsOnImportInfoFilterChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates form controls on the adjustment list page in response to a change in the adjustment execution filter.
    /// </summary>
    /// <param name = "_importInfo">The newly selected import filter.</param>
    internal void updateFormControlsOnImportInfoFilterChanged(GeneralLedgerAdjustmentImportInfo _importInfo)
    {
        // Set the text value of the import info filter control equal to the summary of the selected import
        FormStringControl adjustmentImportInfoFilter = adjustmentListPage.getAdjustmentImportInfoFilterControl();
        adjustmentImportInfoFilter.text(_importInfo.getImportSummary());

        this.enableDisableAdjustmentDeleteAllButton(_importInfo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableDisableJournalCreationButtonForAdjustmentStatus</Name>
				<Source><![CDATA[
    private void enableDisableJournalCreationButtonForAdjustmentStatus(GeneralLedgerAdjustmentResultFilter _status)
    {
        // Disable the journal creation button if the user has filtered for only adjustments already sent to an adjustment journal
        FormFunctionButtonControl adjustmentJournalCreationButton = adjustmentListPage.getAdjustmentJournalCreationMenuItem();
        adjustmentJournalCreationButton.enabled(_status != GeneralLedgerAdjustmentResultFilter::SentToJournal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableDisableAdjustmentCopyButtonForSelectedAdjustment</Name>
				<Source><![CDATA[
    private void enableDisableAdjustmentCopyButtonForSelectedAdjustment(GeneralLedgerAdjustmentProposedAdjustment _selectedAdjustment)
    {
        // Disable the adjustment copy button if the selected adjustment has already been sent to an adjustment journal
        FormButtonControl adjustmentCopyButton = adjustmentListPage.getAdjustmentCopyButton();
        adjustmentCopyButton.enabled(_selectedAdjustment.AdjustmentJournalNumber == '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableDisableAdjustmentDeleteAllButton</Name>
				<Source><![CDATA[
    internal void enableDisableAdjustmentDeleteAllButton(GeneralLedgerAdjustmentImportInfo _importInfo)
    {
        // Disable the adjustment delete all button if current set of adjustments has any that have been posted
        FormButtonControl adjustmentDeleteAllButton = adjustmentListPage.getAdjustmentDeleteAllButton();
        GeneralLedgerAdjustmentProposedAdjustment adjustments;

        adjustmentDeleteAllButton.enabled(adjustments.canDeleteAllAdjustmentsForCurrentImport(_importInfo));
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableDisableGridLedgerAccountField</Name>
				<Source><![CDATA[
    internal void enableDisableGridLedgerAccountField(GeneralLedgerAdjustmentProposedAdjustment _selectedAdjustment)
    {
        // Disable the segmented entry control for account field on the Grid if the adjusment has a Journal number on the record
        SegmentedEntryControl gridLedgerAccountField = adjustmentListPage.getGridLedgerAccountField();
        gridLedgerAccountField.enabled(_selectedAdjustment.AdjustmentJournalNumber == '');
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>