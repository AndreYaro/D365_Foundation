<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BusinessProcessHeader_AppSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Extension class of the <c>BusinessProcessHeader</c> table, which is used for retail business process.
/// </summary>
[ExtensionOf(tableStr(BusinessProcessHeader))]
final class BusinessProcessHeader_AppSuite_Extension
{
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Additional validation logic for retail business process
    /// </summary>
    /// <returns>validation result</returns>
    public boolean validateWrite()
    {   
        boolean isValid = next validateWrite();

        if (this.GenericSubtype == BusinessProcessGenericSubtype::Retail)
        {
            if (this.Status == BusinessProcessHeaderStatus::Canceled)
            {
                isValid = checkFailed("@RetailTaskManagement:InvalidTasklistStatus") && isValid;
            }

            // Adhoc task list should be only one per retail store
            if (this.IsAdhoc && !this.RecId && this.RetailChannel)
            {
                if (BusinessProcessHeader::hasAdhocTaskList(this.RetailChannel))
                {
                    isValid = checkFailed("@RetailTaskManagement:MultipleAdhocTasklist");
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayAssociatedWorkerStore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the associated store or worker to a retail business process checklist.
    /// </summary>
    /// <param name = "_processHeader">The retail business process checklist.</param>
    /// <returns>The associated store or worker display text.</returns>
    [SysClientCacheDataMethod(true)]
    public static display str displayAssociatedWorkerStore(BusinessProcessHeader _processHeader)
    {
        if (_processHeader.HcmWorker)
        {
            HcmWorker hcmWorker = HcmWorker::find(_processHeader.HcmWorker);
            return strFmt("@RetailTaskManagement:RetailBusinessProcessHeaderWorkerCardText", hcmWorker.name());
        }
        else if (_processHeader.RetailChannel)
        {
            RetailChannelTable retailChannelTable = RetailChannelTable::findByRecId(_processHeader.RetailChannel);
            return strFmt("@RetailTaskManagement:RetailBusinessProcessHeaderStoreCardText", retailChannelTable.name());
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatusByWorker</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Updates the status of the retail business process checklist. Different from the setEndDateTimeResolvedBy, the worker here is POS worker, not HQ user.
    /// </summary>
    /// <param name = "_status">The new status.</param>
    /// <param name = "_workerRecId">The record id of the worker.</param>
    public void updateStatusByWorker(BusinessProcessHeaderStatus _status, HcmWorkerRecId _workerRecId)
    {
        ttsbegin;
        this.Status = _status;
        this.modifiedField(fieldNum(BusinessProcessHeader, Status));
        if (_status == BusinessProcessHeaderStatus::Completed
            || _status == BusinessProcessHeaderStatus::Canceled)
        {
            this.ResolvedBy = _workerRecId;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasAdhocTaskList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicate whether the specific channel has ad hoc task list.
    /// If so, return the task list. Otherwise, return empty table buffer
    /// </summary>
    /// <param name = "_recId">channel id</param>
    /// <returns>ad hoc task list or empty table buffer</returns>
    public static BusinessProcessHeader hasAdhocTaskList(RetailChannelRecId _recId)
    {
        BusinessProcessHeader header;
        header.allowIndexHint(true);

        select firstonly header
            index hint RetailAdhoc
            where header.GenericSubtype == BusinessProcessGenericSubtype::Retail
            && header.IsAdhoc == NoYes::Yes
            && header.RetailChannel == _recId;

        return header;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>