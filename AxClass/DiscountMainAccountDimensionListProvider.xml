<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DiscountMainAccountDimensionListProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>DiscountMainAccountDimensionListProvider</c> class is the main account dimension list
///    provider for documented discount amounts.
/// </summary>
[
SourceDocumentEnumExtensionAttribute(enumStr(MainAccountDimensionListProviderType), MainAccountDimensionListProviderType::Discount)
]
class DiscountMainAccountDimensionListProvider extends MainAccountDimensionListProvider
{
    DataAreaId                      discDataAreaId;
    DiscCode                        discCode;
    DiscountDirection               discountDirection;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getMainAccDimensionListForStockedItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the main account dimension distribution list for stocked item.
    /// </summary>
    /// <param name="_sourceDocumentLineItemIProduct">
    /// The corresponding product source document object.
    /// </param>
    /// <returns>
    /// Returns the main account dimension distribution list associated with extended price.
    /// </returns>
    /// <remarks>
    /// This method gets the main account dimension distribution list associated with
    /// extended price.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public MainAccountDimensionList getMainAccDimensionListForStockedItem(SourceDocumentLineItemIProduct _sourceDocumentLineItemIProduct)
    {
        MainAccountDimensionListProvider        inventoryMainAccountDimensionListProvider;
        MainAccountDimensionList                mainAccountDimensionListProduct;

        // If dimension is not fetched for discount then fetch the dimension associated with extended price
        if (this.useDimensionFromExtendedPrice(_sourceDocumentLineItemIProduct))
        {
            inventoryMainAccountDimensionListProvider =
                MainAccountDimensionListProvider::newFromAccountingRule(
                    MainAccountDimensionListProviderType::Inventory,
                    accountingRule.parmAccountingPolicy().parmDistributionRule(MonetaryAmount::ExtendedPrice));

            mainAccountDimensionListProduct = inventoryMainAccountDimensionListProvider.parmMainAccountDimensionList();
        }

        if (!mainAccountDimensionListProduct)
        {
            mainAccountDimensionListProduct = mainAccountDimensionList;
        }

        return mainAccountDimensionListProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useDimensionFromExtendedPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Determines whether to use the extended price dimension.
    /// </summary>
    /// <param name = "_sourceDocumentLineItemIProduct">
    ///  The corresponding product source document object.
    /// </param>
    /// <returns>
    ///  true if the dimension from the extended price can be used; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean useDimensionFromExtendedPrice(SourceDocumentLineItemIProduct _sourceDocumentLineItemIProduct)
    {
        return (mainAccountDimensionList.elements() == 0 || mainAccountDimensionList.first().parmMainAccount() == 0)
            && (_sourceDocumentLineItemIProduct != null && _sourceDocumentLineItemIProduct.parmStocked());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the main account dimension list provider dimensions.
    /// </summary>
    protected void initValues()
    {
        Object                          sourceDocument = accountingRule.parmSourceDocumentLineItem().parmSourceDocument();
        SourceDocumentIDiscount         iDiscount;

        if ((sourceDocument is SourceDocumentIDiscount && sourceDocument is SourceDocumentITerms) ||        // handles free text invoice
            (sourceDocument is SourceDocumentIDiscount && accountingRule.parmMonetaryAmount() == MonetaryAmount::CashDiscount))     // handles PO & AP cash discount
        {
            iDiscount = sourceDocument as SourceDocumentIDiscount;
            discCode = iDiscount.parmDiscCode();
            discDataAreaId = iDiscount.parmDiscDataAreaId();
            discountDirection = iDiscount.parmDiscDirection();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateMainAccountDimensionList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates the main account dimension list.
    /// </summary>
    protected void populateMainAccountDimensionList()
    {
        LedgerDimensionDefaultAccount               ledgerDimensionDefaultAccount;
        MainAccountDimensionListProvider            inventoryMainAccountDimensionListProvider;
        Object                                      sourceDocumentLine = accountingRule.parmSourceDocumentLineItem();
        container                                   cacheResult;
        SourceDocumentLineItemIProduct              sourceDocumentLineItemIProduct;

        if (discCode)
        {
            cacheResult = LedgerCache::getValue(LedgerCacheScope::DiscountMainAccountDimensionListProvider, [discDataAreaId, discCode, discountDirection]);

            if (cacheResult == conNull())
            {
                changecompany(discDataAreaId)
                {
                    if (discountDirection == DiscountDirection::Paid)
                    {
                        ledgerDimensionDefaultAccount = CashDisc::find(discCode).PaidLedgerDimension;
                    }
                    else
                    {
                        ledgerDimensionDefaultAccount = CashDisc::find(discCode).ReceivedLedgerDimension;
                    }

                    LedgerCache::insertValue(LedgerCacheScope::DiscountMainAccountDimensionListProvider, [discDataAreaId, discCode, discountDirection] , [ledgerDimensionDefaultAccount]);
                }
            }
            else
            {
                [ledgerDimensionDefaultAccount] = cacheResult;
            }
        }
        else
        {
            if (sourceDocumentLine is SourceDocumentLineItemIProduct &&
                (accountingRule.parmMonetaryAmount() == MonetaryAmount::Discount ||
                 accountingRule.parmMonetaryAmount() == MonetaryAmount::PriceAdjustment))
            {
                inventoryMainAccountDimensionListProvider = MainAccountDimensionListProvider::newFromAccountingRule(MainAccountDimensionListProviderType::Inventory, accountingRule);
                // Inventory provider has its own caching
                mainAccountDimensionList = inventoryMainAccountDimensionListProvider.parmMainAccountDimensionList();

                sourceDocumentLineItemIProduct = sourceDocumentLine as SourceDocumentLineItemIProduct;
                mainAccountDimensionList = this.getMainAccDimensionListForStockedItem(sourceDocumentLineItemIProduct);

                if (mainAccountDimensionList.elements() == 0 ||
                    mainAccountDimensionList.first().parmMainAccount() == 0)
                {
                    ledgerDimensionDefaultAccount = sourceDefaultAccount;
                }
            }
            else
            {
                changecompany(accountingRule.parmSourceDocumentLineItem().parmLegalEntityDataAreaId())
                {
                    // Ledger system accounts has its own caching
                    ledgerDimensionDefaultAccount = LedgerSystemAccounts::getDefaultAccount(accountingRule.parmLedgerPostingType());
                }
            }
        }

        if (ledgerDimensionDefaultAccount)
        {
            this.addToMainAccDimensionList(ledgerDimensionDefaultAccount);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>