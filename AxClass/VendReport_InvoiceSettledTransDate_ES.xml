<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendReport_InvoiceSettledTransDate_ES</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Provides additional functions to the payment documents-invoices relation by transaction date report data provider.
/// </summary>
public class VendReport_InvoiceSettledTransDate_ES
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findVendTransVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds vendor transaction corresponding last settled voucher from vendor transaction received by parameters.
    /// </summary>
    /// <param name = "_vendTrans">
    ///     The vendor transaction.
    /// </param>
    /// <returns>
    ///     The vendor transaction.
    /// </returns>
    public VendTrans findVendTransVoucher(VendTrans _vendTrans)
    {
        VendTrans vendTrans;

        select firstonly crosscompany vendTrans
            where vendTrans.Voucher == _vendTrans.LastSettleVoucher
                && vendTrans.DataAreaId == _vendTrans.LastSettleCompany;

        return vendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicesTxt</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Formats invoice texts to linked vendor transaction received by parameters.
    /// </summary>
    /// <param name = "_vendTransDS">
    ///     The vendor transaction.
    /// </param>
    /// <returns>
    ///     The invoice text.
    /// </returns>
    public FreeText invoicesTxt(VendTrans _vendTransDS)
    {
        FreeText invoiceNo;
        VendSettlement vendSettlement;
        VendTrans vendTrans;

        while select crosscompany TransRecId, OffsetRecid, OffsetCompany from vendSettlement
            where vendSettlement.TransRecId  == _vendTransDS.RecId &&
                  vendSettlement.TransCompany == _vendTransDS.company()
        {
            while select crosscompany RecId, Invoice from vendTrans
                where vendTrans.RecId == vendSettlement.OffsetRecid &&
                      vendTrans.DataAreaId == vendSettlement.OffsetCompany
            {
                if (!vendTrans.Invoice)
                {
                    if (!invoiceNo)
                    {
                        invoiceNo = "@SYS92708";
                    }
                    else
                    {
                        invoiceNo = strfmt('%1, %2', invoiceNo, "@SYS92708");
                    }
                }
                else
                {
                    if (!invoiceNo)
                    {
                        invoiceNo = vendTrans.Invoice;
                    }
                    else
                    {
                        invoiceNo = strfmt('%1, %2', invoiceNo, vendTrans.Invoice);
                    }
                }
            }
        }
        return invoiceNo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns vendor settlement linked with vendor transaction received by parameters.
    /// </summary>
    /// <param name = "_vendTrans">
    ///     The vendor transaction.
    /// </param>
    /// <returns>
    ///     The vendor settlement.
    /// </returns>
    public VendSettlement vendSettlement(VendTrans _vendTrans)
    {
        VendSettlement vendSettlement;

        select firstonly vendSettlement
            where vendSettlement.TransRecId == _vendTrans.RecId &&
                  vendSettlement.AccountNum == _vendTrans.AccountNum;

        return vendSettlement;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>