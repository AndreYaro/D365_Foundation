<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTableDepConv_None</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  The primary functionality of this class type is to calculate the
///  asset depreciation amounts for fixed assets employing a depreciation
///  convention of 'None'. For this purpose this class type must
///  always be used in conjuction with the AssetTableMethod_SL and
///  AssetTableMethod_RB asset depreciation amount calculation classes.
/// </summary>
[AssetTableDepConvAttribute(AssetDepreciationConvention::None)]
public class AssetTableDepConv_None extends AssetTableDepConv
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustLastDepreciationDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the projected depreciation date based on a given depreciation convention.
    /// </summary>
    /// <param name="_endDate">
    /// A date to adjust
    /// </param>
    /// <param name="_partialPeriod">
    /// Value model's life remaining.
    /// </param>
    /// <returns>
    /// Adjusted date of the last projected depreciation date.
    /// </returns>
    protected TransDate adjustLastDepreciationDate(TransDate _endDate, real _partialPeriod = 0)
    {
        TransDate returnDate = _endDate;

        returnDate = super(_endDate, _partialPeriod);

        returnDate = this.adjustLastDepreciationDatePartialPeriod(returnDate, _partialPeriod);

        return returnDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustLifeTimeRest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rounds the value of Life Time Remaining
    /// </summary>
    /// <param name="_lifeTimeRest">
    /// Life Time Remaining number
    /// </param>
    /// <returns>
    /// Life Time Remaining number
    /// </returns>
    /// <remarks>
    /// For None convention calculation adjustement is not need.
    /// </remarks>
    protected AssetDepreciationTime adjustLifeTimeRest(AssetDepreciationTime _lifeTimeRest)
    {
        return _lifeTimeRest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRestPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the adjustment to asset's remaining life.
    /// </summary>
    /// <param name="_restPeriod">
    /// Number of remaining periods.
    /// </param>
    /// <param name="_periodstart">
    /// Starting date of the period.
    /// </param>
    /// <param name="_periods">
    /// Number of periods.
    /// </param>
    /// <returns>
    /// Adjusted asset's remaining life.
    /// </returns>
    /// <remarks>
    /// Monthly and Fiscal Period frequency should always return 1 as they will always represent fully depreciated month/period.
    /// Thus, the base class calculation is used for these frequencies.
    /// </remarks>
    public AssetDepreciationTime calcRestPeriod(AssetDepreciationTime   _restPeriod,
                                                AssetTransDate          _periodstart,
                                                AssetDepreciationTime   _periods)
    {
        real                    periodInInterval;
        AssetDepreciationTime   restPeriod = _restPeriod;
        real                    partialPeriodInYear;
        int                     numberOfMonth;
        AssetTransDate          lastDayOfMonth;
        AssetTransDate          firstDayOfMonth;
        int                     numberOfDaysInMonth;
        AssetTransDate          periodstart = _periodstart;

        if (isProratedDaysCalculation)
        {
            restPeriod = super(_restPeriod, periodstart, _periods);
        }
        else
        {
            // Monthly or Fiscal period based frequencies already have adjusted restPeriod value based on number of days in a month.
            if (depreciationProfile.Accrual != AssetAccrual::Monthly
                && depreciationProfile.Accrual != AssetAccrual::FiscalPeriod
                && isPartialMonthCalculation)
            {
                // If the first month is partial, a fraction of the month needs to be calculated.
                if (isPartialMonthCalculation)
                {
                    lastDayOfMonth = depreciationInterval.findLastDayOfMonth(periodstart);

                    if (lastDayOfMonth == dateNull())
                    {
                        throw error(strFmt("@SYS128204",
                            FiscalCalendar::find(AssetBookTable::find(assetBook.BookId).getFiscalCalendar()).CalendarId));
                    }

                    firstDayOfMonth = depreciationInterval.findFirstDayOfMonth(periodstart);
                    if (firstDayOfMonth == dateNull())
                    {
                        throw error(strFmt("@SYS128204",
                            FiscalCalendar::find(AssetBookTable::find(assetBook.BookId).getFiscalCalendar()).CalendarId));
                    }

                    numberOfDaysInMonth = lastDayOfMonth - firstDayOfMonth + 1;

                    if (numberOfDaysInMonth)
                    {
                        partialPeriodInYear = (lastDayOfMonth - periodstart + 1) / numberOfDaysInMonth;
                    }

                    if (depreciationInterval.endPeriod(periodstart) == depreciationInterval.endPeriod(lastDayOfMonth + 1))
                    {
                        partialPeriodInYear += 1;
                        periodstart = lastDayOfMonth + 1;
                    }
                }

                switch (depreciationProfile.DepreciationYear)
                {
                    case AssetDepreciationYear::Fiscal:
                        if (depreciationProfile.Accrual == AssetAccrual::Yearly)
                        {
                            numberOfMonth = depreciationInterval.numberOfPeriodsInYear(periodstart);
                            if (numberOfMonth == 0)
                            {
                                throw error(strFmt("@SYS128204",
                                    FiscalCalendar::find(AssetBookTable::find(assetBook.BookId).getFiscalCalendar()).CalendarId));
                            }
                        }
                    break;

                    case AssetDepreciationYear::Calendar:
                        switch (depreciationProfile.Accrual)
                        {
                            case AssetAccrual::Quarterly:
                                numberOfMonth = #monthsInQuarter;
                                break;

                            case AssetAccrual::HalfYearly:
                                numberOfMonth = #monthsInHalfYear;
                                break;

                            case AssetAccrual::Yearly:
                                numberOfMonth = #monthsInYear;
                                break;
                        }
                        break;

                    default:
                        //  The enumeration is unknown, throw an error;
                        throw error(strFmt("@SYS99083", depreciationProfile.Profile));
                }

                periodInInterval = depreciationInterval.dateToPeriod(periodstart);
                periodInInterval = (depreciationInterval.indexofPeriod(periodstart) * numberOfMonth - periodInInterval);
                periodInInterval += partialPeriodInYear;
                if (numberOfMonth)
                {
                    restPeriod = periodInInterval / numberOfMonth;
                }
            }
        }

        return restPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDisposalDepreciationAdjRatio</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the portion of the depreciation allowed for a given period based on the date of the disposal.
    /// </summary>
    /// <param name="_disposalTransDate">
    /// The date of the disposal.
    /// </param>
    /// <returns>
    /// The portion of depreciation.
    /// </returns>
    /// <remarks>
    /// Depreciation engine calculates the depreciation from the last depreciation date until 
    /// the end of last period of the current year. The disposal date might not be the 
    /// last date of the year, so this method will determine how much of that depreciation
    /// amount need to be adjusted based on the disposal date.
    /// </remarks>
    public real calculateDisposalDepreciationAdjRatio(TransDate  _disposalTransDate)
    {
        real adjustedDepreciation;
        real periodsInInterval;
        TransDate   firstDayOfYear;
        TransDate   disposalTransLastDayOfYear;
        TransDate   lastDepreciationDayOfYear;

        int         totalNumberOfDays;
        real        totalNumberOfPeriods;
        boolean     isDisposalSameYear;
        // <GIN>
        boolean     isDayBasedCalendar;
        boolean     isIndiaDepreciationEnabled;
        RefRecId    fiscalCalendarRecId;
        // </GIN>
        int         firstStartPeriod;
        real        partialIntervalFirstPeriod;

        // <GIN>
        if (AssetParameters::isDepreciationCompaniesActEnable_IN())
        {
            fiscalCalendarRecId = assetBook.assetBookTable().getFiscalCalendar();
            isDayBasedCalendar = (FiscalCalendar_IN::findByFiscalCalendar(fiscalCalendarRecId).CalendarType == CalendarType_IN::DayBased);
            isIndiaDepreciationEnabled =  true;
        }
        // </GIN>

        disposalTransLastDayOfYear = depreciationInterval.findLastDayOfYear(_disposalTransDate);

        isDisposalSameYear =
            (depreciationInterval.findLastDayOfYear(assetBook.UsedFromDate) == disposalTransLastDayOfYear) ? true : false;

        if (!isDisposalSameYear)
        {
            firstDayOfYear = depreciationInterval.findFirstDayOfYear(_disposalTransDate);
        }
        else
        {
            firstDayOfYear = assetBook.DepreciationStartDate;
        }

        this.updateDisposalFirstLastYear(_disposalTransDate);

        if (_disposalTransDate >= lastDepreciationDate)
        {
            adjustedDepreciation = 1;
        }
        else
        {
            if (isProratedDaysCalculation)
            {
                if (lastDepreciationDate
                    && lastDepreciationDate < disposalTransLastDayOfYear)
                {
                    lastDepreciationDayOfYear = lastDepreciationDate;
                }
                else
                {
                    lastDepreciationDayOfYear = disposalTransLastDayOfYear;
                }

                // <GIN>
                if (isIndiaDepreciationEnabled
                    && depreciationProfile.DepreciationYear == AssetDepreciationYear::Fiscal
                    && depreciationProfile.isNewShiftDepreciationMethod_IN()
                    && isDayBasedCalendar)
                {
                        totalNumberOfDays = FiscalCalendarPeriod_IN::getTotalDaysInCalendarYear(
                                FiscalCalendarYear::findYearByCalendarDate(fiscalCalendarRecId,
                                lastDepreciationDayOfYear).RecId);
                }
                else
                {
                // </GIN>
                    totalNumberOfDays = lastDepreciationDayOfYear - firstDayOfYear + 1;
                // <GIN>
                }
                // </GIN>

                if (totalNumberOfDays)
                {
                    // <GIN>
                    if (isIndiaDepreciationEnabled
                        && depreciationProfile.isNewShiftDepreciationMethod_IN()
                        && ((isDayBasedCalendar && depreciationProfile.DepreciationYear == AssetDepreciationYear::Fiscal)
                            || depreciationProfile.ShiftDepreciation_IN))
                    {
                        adjustedDepreciation = AssetBookShiftDepreciation_IN::getTotalShiftDaysInCalendarPeriods(assetBook,
                                                            firstDayOfYear,
                                                            _disposalTransDate,
                                                            true,
                                                            true,
                                                            true);
                    }
                    else
                    {
                    // </GIN>
                        adjustedDepreciation = _disposalTransDate - firstDayOfYear + 1;
                    // <GIN>
                    }
                    // </GIN>

                    adjustedDepreciation = adjustedDepreciation / totalNumberOfDays;
                }
            }
            else
            {
                boolean hasYearChanged = depreciationInterval.hasYearChanged(assetBook.DepreciationStartDate, _disposalTransDate);
                // Determine the number of periods that are used from the last depreciation until the disposal
                periodsInInterval = this.determineNumberOfPeriods(_disposalTransDate);

                if (disposalTransLastDayOfYear <= lastDepreciationDate)
                {
                    // If this is the first year of depreciation, and depreciation start date is not the first period of the year,
                    // take into consideration only a number of periods used in the current year.
                    if (isFirstYear && !hasYearChanged)
                    {
                        totalNumberOfPeriods = this.determineNumberOfPeriods(disposalTransLastDayOfYear);
                    }
                    else
                    {
                        totalNumberOfPeriods = depreciationInterval.periodOfYear(disposalTransLastDayOfYear);
                    }
                }
                else
                {
                    totalNumberOfPeriods = this.determineNumberOfPeriods(lastDepreciationDate);
                }

                if (isFirstYear && !hasYearChanged)
                {
                    // If the depreciation start date is not the first day of the period,
                    // and the disposal is in the same year, only a part starting with depredeciation start date
                    // will be used for the depreciation calculation.
                    partialIntervalFirstPeriod = this.determinePortionOfFirstPeriod(firstDayOfYear);
                    if (partialIntervalFirstPeriod)
                    {
                        if (partialIntervalFirstPeriod < periodsInInterval)
                        {
                            periodsInInterval -= partialIntervalFirstPeriod;
                        }
                        if (partialIntervalFirstPeriod < totalNumberOfPeriods)
                        {
                            totalNumberOfPeriods -= partialIntervalFirstPeriod;
                        }
                    }
                }

                if (totalNumberOfPeriods)
                {
                    adjustedDepreciation = periodsInInterval / totalNumberOfPeriods;
                }
            }
        }
        
        return adjustedDepreciation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineNumberOfPeriods</Name>
				<Source><![CDATA[
    private real determineNumberOfPeriods(AssetTransDate _transDate)
    {
        TransDate   disposalTransLastDayOfPeriod;
        TransDate   disposalTransFirstDayOfPeriod;
        real periodsInInterval;
        int totalNumberOfDays;
        int firstStartPeriod;
        real disposalPeriodInterval;
        
        periodsInInterval = depreciationInterval.periodOfYear(_transDate);
        disposalTransLastDayOfPeriod = depreciationInterval.findLastDayOfPeriod(_transDate);
        
        // If the disposal does not happen on the last day of the month,
        // only the part of the month until the disposal date will be used.
        if (disposalTransLastDayOfPeriod != _transDate)
        {
            disposalTransFirstDayOfPeriod = depreciationInterval.findFirstDayOfPeriod(_transDate);
            totalNumberOfDays = disposalTransLastDayOfPeriod - disposalTransFirstDayOfPeriod + 1;

            if (totalNumberOfDays)
            {
                disposalPeriodInterval = (_transDate - disposalTransFirstDayOfPeriod + 1) / totalNumberOfDays;
            }

            if (periodsInInterval > 1)
            {
                periodsInInterval = (periodsInInterval - 1) + disposalPeriodInterval;
            }
            else
            {
                periodsInInterval = disposalPeriodInterval;
            }
        }
 
        // If this is the first year of depreciation and the start of depreciation is not the first
        // period of the year, only periods that are used in the year need to be included in the calculation.
        if (isFirstYear && !depreciationInterval.hasYearChanged(assetBook.DepreciationStartDate, _transDate))
        {
            firstStartPeriod = depreciationInterval.periodOfYear(assetBook.DepreciationStartDate);

            if ((periodsInInterval - firstStartPeriod + 1) > 0)
            {
                periodsInInterval = periodsInInterval - firstStartPeriod + 1;
            }
        }

        return periodsInInterval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determinePortionOfFirstPeriod</Name>
				<Source><![CDATA[
    private real determinePortionOfFirstPeriod(AssetTransDate _transactionDate)
    {
        real periodsInInterval;
        int totalNumberOfDays;
        TransDate transactionLastDayOfPeriod;
        TransDate transactionFirstDayOfPeriod;
        
        transactionFirstDayOfPeriod = depreciationInterval.findFirstDayOfPeriod(_transactionDate);
        transactionLastDayOfPeriod = depreciationInterval.findLastDayOfPeriod(_transactionDate);

        totalNumberOfDays = transactionLastDayOfPeriod - transactionFirstDayOfPeriod + 1;
        if (totalNumberOfDays)
        {
            periodsInInterval = (_transactionDate - transactionFirstDayOfPeriod) / totalNumberOfDays;
        }

        return periodsInInterval;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>