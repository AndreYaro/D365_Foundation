<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesPackingSlipTransConsistencyCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SalesPackingSlipTransConsistencyCheck extends SysConsistencyCheck implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
    configurationKeyId configurationKey()
    {
        return configurationkeynum(LogisticsBasic);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executionOrder</Name>
				<Source><![CDATA[
    Integer executionOrder()
    {
        return 30;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        try
        {
            ttsbegin;

            int errorsFixed = this.fixSalesOrderPackingSlipTrans();
            if (errorsFixed > 0
                && this.checkFix() == CheckFix::Fix)
            {
                ttscommit;
                info("@SalesAndMarketing:SalesPostingTransConsistencyCheck_FullyMatchedIsFixed");
                this.updateCorrected(errorsFixed);
            }
            else
            {
                ttsabort;
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeParentClassId</Name>
				<Source><![CDATA[
    ClassId treeParentClassId()
    {
        return classNum(SalesRootConsistencyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SalesAndMarketing:SalesPostingTransConsistencyCheck_Description";
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
    static HelpTxt helpText()
    {
        return "@SalesAndMarketing:SalesPostingTransConsistencyCheck_HelpText";
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixSalesOrderPackingSlipTrans</Name>
				<Source><![CDATA[
    private int fixSalesOrderPackingSlipTrans()
    {
        int errorsFixed;

        QueryRun custInvoiceTransQueryRun = new QueryRun(this.buildCustPackingSlipTransQuery());

        while (custInvoiceTransQueryRun.next())
        {
            CustPackingSlipTrans custPackingSlipTrans = custInvoiceTransQueryRun.get(tableNum(CustPackingSlipTrans));

            custPackingSlipTrans.FullyMatched = NoYes::Yes;
            custPackingSlipTrans.doUpdate();

            warning(strFmt(
                "@SalesAndMarketing:SalesPostingTransConsistencyCheck_UpdateMessage",
                custPackingSlipTrans.SalesId));
            errorsFixed++;
        }

        return errorsFixed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCustPackingSlipTransQuery</Name>
				<Source><![CDATA[
    private Query buildCustPackingSlipTransQuery()
    {
        Query query = new Query();

        QueryBuildDataSource qbdsCustPackingSlipTrans = query.addDataSource(tableNum(CustPackingSlipTrans));
        QueryBuildDataSource qbdsSalesTable = qbdsCustPackingSlipTrans.addDataSource(tableNum(SalesTable));
        qbdsSalesTable.addLink(fieldNum(CustPackingSlipTrans, SalesId), fieldNum(SalesTable, SalesId));
        qbdsSalesTable.joinMode(JoinMode::InnerJoin);
        qbdsCustPackingSlipTrans.update(true);

        qbdsSalesTable.addRange(fieldNum(SalesTable, SalesStatus)).value(queryValue(SalesStatus::Invoiced));

        this.addCustPackingSlipTransQueryRanges(fieldNum(CustPackingSlipTrans, FullyMatched), qbdsCustPackingSlipTrans);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCustPackingSlipTransQueryRanges</Name>
				<Source><![CDATA[
    private void addCustPackingSlipTransQueryRanges(fieldId _fullyMatchedFieldId, QueryBuildDataSource _qbds)
    {
        QueryBuildRange fullyMatchedQueryBuildRange = _qbds.addRange(_fullyMatchedFieldId);
        fullyMatchedQueryBuildRange.value(queryValue(NoYes::No));
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>