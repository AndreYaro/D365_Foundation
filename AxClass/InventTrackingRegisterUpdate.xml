<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTrackingRegisterUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventTrackingRegisterUpdate</c> class provides operations to update inventory tracking register transactions associated
///    with an <c>InventMovement</c>.
/// </summary>
class InventTrackingRegisterUpdate
{
    InventMovement              movement;

    InventDimGroupFieldSetup    cachedInventSerialIdFieldSetup;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canRegisterTrackingDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether the specified inventory dimension combination and quantity can be registered.
    /// </summary>
    /// <param name="_trackingInventDim">
    ///    A <c>InventDim</c> record specifying the tracking inventory dimension combination.
    /// </param>
    /// <param name="_registeredQty">
    ///    A registered quantity.
    /// </param>
    /// <returns>
    ///    true if registration can be made; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The method is called by the <c>registerTrackingDimension</c> method. If this method returns false, then no registration will be made and not error will be reported.
    /// </remarks>
    public boolean canRegisterTrackingDimension(
        InventDim   _trackingInventDim,
        InventQty   _registeredQty
    )
    {
        boolean canRegisterTrackingDimension = true;

        if (_registeredQty == 0.0)
        {
            canRegisterTrackingDimension = false;
        }

        if (this.isRegistrationBlank(_trackingInventDim))
        {
            canRegisterTrackingDimension = false;
        }

        return canRegisterTrackingDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTrackingDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the registration for the current movement if a registration exists.
    /// </summary>
    /// <param name="_trackingInventDim">
    ///    An <c>InventDim</c> record specifying the tracking inventory dimension combination.
    /// </param>
    /// <returns>
    ///    true if the registration already exists and is updated; otherwise, false.
    /// </returns>
    public boolean updateTrackingDimension(InventDim  _trackingInventDim)
    {
        InventTrackingRegisterTrans inventTrackingRegisterTrans;
        InventTransOriginId inventTransOriginId = this.parmMovement().inventTransOriginId();

        if (inventTransOriginId)
        {
            select firstonly inventTrackingRegisterTrans
                where inventTrackingRegisterTrans.InventTransOrigin == inventTransOriginId;

            if (inventTrackingRegisterTrans)
            {
                update_recordset inventTrackingRegisterTrans
                setting InventDimId = _trackingInventDim.inventDimId
                where inventTrackingRegisterTrans.PhysicalRefRecId      == 0
                    && inventTrackingRegisterTrans.PhysicalRefTableId   == 0
                    && inventTrackingRegisterTrans.FinancialRefRecId    == 0
                    && inventTrackingRegisterTrans.FinancialRefTableId  == 0
                    && inventTrackingRegisterTrans.InventTransOrigin    == inventTransOriginId;

                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRegistrationAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that registration the current movement allows registration.
    /// </summary>
    /// <returns>
    ///    true if registration is allowed; otherwise, false.
    /// </returns>
    private boolean isRegistrationAllowed()
    {
        return this.parmMovement().mustRegisterTrackingDimension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRegistrationBlank</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether the specified tracking inventory dimension combination and quantity contain all blank values.
    /// </summary>
    /// <param name="_trackingInventDim">
    ///    A <c>InventDim</c> record specifying the tracking inventory dimension combination.
    /// </param>
    /// <returns>
    ///    true if the inventory dimension combination contain all blank values; otherwise, false.
    /// </returns>
    private boolean isRegistrationBlank(InventDim _trackingInventDim)
    {
        if (_trackingInventDim.inventDimId != InventDim::inventDimIdBlank() || this.parmMovement().registerBlankTrackingValueAsNotReadable())
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRegistrationQuantityRoundingValid</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the registered quantity is rounded off correctly.
    /// </summary>
    /// <param name="_registeredQty">
    ///    A registered quantity.
    /// </param>
    /// <returns>
    ///    true if quantity is correctly rounded; otherwise, false.
    /// </returns>
    private boolean isRegistrationQuantityRoundingValid(InventQty _registeredQty)
    {
        if (this.isSerialNumberControlEnabled())
        {
            if (_registeredQty != trunc(_registeredQty))
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRegistrationQuantitySignValid</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether the sign of the registered quantity is equal to the movement quantity.
    /// </summary>
    /// <param name="_registeredQty">
    ///    A registered quantity.
    /// </param>
    /// <returns>
    ///    true if registered quantity has the correct sign; otherwise, false.
    /// </returns>
    private boolean isRegistrationQuantitySignValid(InventQty _registeredQty)
    {
        return this.parmMovement().transQty() * _registeredQty >= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRegistrationQuantityValueValid</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether the registered quantity is correct.
    /// </summary>
    /// <param name="_transactionInventDim">
    ///    A <c>InventDim</c> record specifying the inventory dimension combination to be registered.
    /// </param>
    /// <param name="_registeredQty">
    ///    A registered quantity.
    /// </param>
    /// <returns>
    ///    true if the registered quantity has a valid value; otherwise, false.
    /// </returns>
    private boolean isRegistrationQuantityValueValid(InventDim _transactionInventDim, InventQty _registeredQty)
    {
        if (this.parmMovement().enforceSerialDimensionQuantityControl() && _transactionInventDim.InventSerialId != '')
        {
            if ((abs(_registeredQty) != 1.0) && this.isSerialNumberControlEnabled())
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSerialNumberControlEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether serial number is active and serial number controlled.
    /// </summary>
    /// <returns>
    ///    true if serial number is active and serial number controlled; otherwise, false.
    /// </returns>
    private boolean isSerialNumberControlEnabled()
    {
        InventDimGroupFieldSetup    inventSerialIdFieldSetup = this.parmInventSerialIdFieldSetup();

        return inventSerialIdFieldSetup.isSalesProcessActivated() && inventSerialIdFieldSetup.isSerialNumberControlEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventTrackingRegisterUpdate</c> class for the specified inventory movement.
    /// </summary>
    /// <param name="_movement">
    /// An inventory movement.
    /// </param>
    protected void new(InventMovement _movement)
    {
        movement = _movement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSerialIdFieldSetup</Name>
				<Source><![CDATA[
    protected InventDimGroupFieldSetup parmInventSerialIdFieldSetup()
    {
        if (!cachedInventSerialIdFieldSetup)
        {
            cachedInventSerialIdFieldSetup = this.parmMovement().inventDimGroupSetup().getFieldSetup(fieldNum(InventDim,InventSerialId));
        }

        return cachedInventSerialIdFieldSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMovement</Name>
				<Source><![CDATA[
    protected inventMovement parmMovement()
    {
        return movement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerTrackingDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Registers a <c>InventTrackingRegisterTrans</c> record for the specified inventory dimension combination and quantity.
    /// </summary>
    /// <param name="_transactionInventDim">
    ///    A <c>InventDim</c> record specifying the inventory dimension combination to be registered.
    /// </param>
    /// <param name="_registeredQty">
    ///    A registered quantity.
    /// </param>
    /// <exception cref="Exception::Error">
    ///    The registration was cancelled because validation of the registration failed.
    /// </exception>
    public void registerTrackingDimension(
        InventDim  _transactionInventDim,
        InventQty  _registeredQty
    )
    {
        InventTrackingRegisterTrans inventTrackingRegisterTrans;

        InventDim trackingInventDim = this.retrieveTrackingInventDim(_transactionInventDim);

        if (!this.canRegisterTrackingDimension(trackingInventDim, _registeredQty))
        {
            return;
        }

        if (!this.validateRegistration(trackingInventDim, _registeredQty))
        {
            throw error("@SYS18447");
        }

        ttsbegin;

        RecordInsertList recordInsertList = new RecordInsertList(tableNum(InventTrackingRegisterTrans));

        InventQty serialControlQty = _registeredQty > 0 ? 1.0 : -1.0;
        InventQty remainingQty = _registeredQty;

        inventTrackingRegisterTrans.InventTransOrigin = this.parmMovement().inventTransOriginId();
        inventTrackingRegisterTrans.InventDimId = trackingInventDim.InventDimId;
        inventTrackingRegisterTrans.Qty         = serialControlQty;

        while (remainingQty != 0)
        {
            recordInsertList.add(inventTrackingRegisterTrans);

            remainingQty -= serialControlQty;
        }

        recordInsertList.insertDatabase();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveTrackingInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves an <c>InventDim</c> record containing only tracking dimension values.
    /// </summary>
    /// <param name="_transactionInventDim">
    ///    A <c>InventDim</c> record specifying the inventory dimension combination.
    /// </param>
    /// <returns>
    ///    The <c>InventDim</c> record containing only tracking dimension values.
    /// </returns>
    /// <remarks>
    ///    The returned <c>InventDim</c> record has been either found or created in the database.
    /// </remarks>
    private InventDim retrieveTrackingInventDim(InventDim _transactionInventDim)
    {
        InventDim                   inventDim;

        inventDim.data(_transactionInventDim);
        inventDim.clearNotSalesProcessActiveDim(this.parmMovement().inventDimGroupSetup());

        return InventDim::findOrCreate(inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that registration of the specified inventory dimension combination and quantity is correct.
    /// </summary>
    /// <param name="_transactionInventDim">
    ///    A <c>InventDim</c> record specifying the inventory dimension combination to be registered.
    /// </param>
    /// <param name="_registeredQty">
    ///    A registered quantity.
    /// </param>
    /// <returns>
    ///    true if registration is valid; otherwise, false.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///    The registration was invalid because an unsupported setup of tracking dimensions was used.
    /// </exception>
    public boolean validateRegistration(
        InventDim   _transactionInventDim,
        InventQty   _registeredQty
    )
    {
        if (!this.isSerialNumberControlEnabled())
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        if (!this.isRegistrationAllowed())
        {
            return checkFailed(strFmt("@SYS4050065", _registeredQty, this.parmMovement().itemId()));
        }

        if (!this.isRegistrationQuantitySignValid(_registeredQty))
        {
            return checkFailed(strFmt("@SYS4050066", _registeredQty, this.parmMovement().transQty()));
        }

        if (!this.isRegistrationQuantityRoundingValid(_registeredQty))
        {
            return checkfailed(strFmt("@SYS4050070", _registeredQty, _transactionInventDim.InventSerialId));
        }

        if (!this.isRegistrationQuantityValueValid(_transactionInventDim, _registeredQty))
        {
            return checkFailed(strFmt("@SYS68712",_transactionInventDim.InventSerialId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static InventTrackingRegisterUpdate construct(InventMovement _movement)
    {
        return new InventTrackingRegisterUpdate(_movement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>InventTrackingRegisterUpdate</c> class.
    /// </summary>
    /// <param name="_movement">
    /// An <c>InventMovement</c> object.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventTrackingRegisterUpdate</c> class.
    /// </returns>
    public static InventTrackingRegisterUpdate newFromMovement(InventMovement _movement)
    {
        return InventTrackingRegisterUpdate::construct(_movement);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
