<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransReportByIdTransactionQuery_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  Country customization extension of the base class.
/// </summary>
class TaxTransReportByIdTransactionQuery_W extends TaxTransReportByIdTransactionQuery
{
    // <GEEU>
    boolean     useVatDueDate_W;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    // </GEEU>

    /// <summary>
    ///  Create a new instance of the class.
    /// </summary>
    /// <returns>A new instance of the class.</returns>
    public static TaxTransReportByIdTransactionQuery_W construct()
    {
        TaxTransReportByIdTransactionQuery_W queryClass =  new TaxTransReportByIdTransactionQuery_W();
        queryClass.initialize();
        return queryClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    protected void initialize()
    {
        // <GEEU>
        useVatDueDate_W = TaxParameters::reportUseVatDueDate_W();
        // </GEEU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportingAmountsForNonCreditNoteTransactions</Name>
				<Source><![CDATA[
    public TmpTaxReportById getReportingAmountsForNonCreditNoteTransactions(
        TaxTransReportByIdTableBuilder  _tableBuilder,
        TmpTaxReportById                _tmpTaxReportById,
        TaxCode                         _taxCode,
        TaxReportPeriod                 _taxReportPeriod,
        TaxReportCollection             _taxReportCollection,
        TaxReportLayout                 _taxReportLayout)
    {
        TaxTrans    taxTrans;
        TaxTrans_W  taxTrans_W;

        if (useVatDueDate_W)
        {
            while select    sum(TaxAmount), sum(TaxBaseAmount), sum(TaxInCostPriceMST)
                      from      taxTrans
                      group by  TaxDirection, TaxCode
                      where     taxTrans.TaxCode        == _taxCode                        &&
                                // <GEEU>
                                !taxTrans.PostponeVAT                                      &&
                                // </GEEU>
                                taxTrans.TaxOrigin      != TaxOrigin::TaxReporting         &&

                             (((taxTrans.TaxBaseAmount  > 0 || taxTrans.TaxAmount > 0)     &&
                                taxTrans.TaxOrigin      != TaxOrigin::TaxReversed          &&
                               (taxTrans.TaxDirection   == TaxDirection::IncomingTax       ||
                                taxTrans.TaxDirection   == TaxDirection::UseTax            ||
                                taxTrans.TaxDirection   == TaxDirection::TaxTransaction))  ||
                              ((taxTrans.TaxBaseAmount  < 0 || taxTrans.TaxAmount < 0)     &&
                                taxTrans.TaxOrigin      == TaxOrigin::TaxReversed          &&
                               (taxTrans.TaxDirection   == TaxDirection::IncomingTax       ||
                                taxTrans.TaxDirection   == TaxDirection::UseTax            ||
                                taxTrans.TaxDirection   == TaxDirection::TaxTransaction))  ||
                              ((taxTrans.TaxBaseAmount  < 0 || taxTrans.TaxAmount < 0)     &&
                                taxTrans.TaxOrigin      != TaxOrigin::TaxReversed          &&
                               (taxTrans.TaxDirection   == TaxDirection::OutgoingTax       ||
                                taxTrans.TaxDirection   == TaxDirection::TaxExemptPurchase ||
                                taxTrans.TaxDirection   == TaxDirection::TaxExemptSales))  ||
                              ((taxTrans.TaxBaseAmount  > 0 || taxTrans.TaxAmount > 0)     &&
                                taxTrans.TaxOrigin      == TaxOrigin::TaxReversed          &&
                               (taxTrans.TaxDirection   == TaxDirection::OutgoingTax       ||
                                taxTrans.TaxDirection   == TaxDirection::TaxExemptPurchase ||
                                taxTrans.TaxDirection   == TaxDirection::TaxExemptSales)))
                            // <GEEU>
                            join RecId, TaxTrans from taxTrans_W
                                where taxTrans_W.TaxTrans == taxTrans.RecId                 &&
                                (useVatDueDate_W                                            &&
                                taxTrans_W.VatDueDate_W   >= _taxReportPeriod.FromDate      &&
                                taxTrans_W.VatDueDate_W   <= _taxReportPeriod.ToDate)
                            // </GEEU>
            {
                _tmpTaxReportById = _tableBuilder.getTaxAmountByTaxDirectionAndReportId(taxTrans,
                                                                                        _tmpTaxReportById,
                                                                                        NoYes::No,
                                                                                        _taxReportCollection,
                                                                                        _taxReportLayout);
            }
        }
        else
        {
            _tmpTaxReportById = super(_tableBuilder, _tmpTaxReportById, _taxCode, _taxReportPeriod, _taxReportCollection, _taxReportLayout);
        }

        return _tmpTaxReportById;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportingAmountsForCreditNoteTransactions</Name>
				<Source><![CDATA[
    public TmpTaxReportById getReportingAmountsForCreditNoteTransactions(
        TaxTransReportByIdTableBuilder  _tableBuilder,
        TmpTaxReportById                _tmpTaxReportById,
        TaxCode                         _taxCode,
        TaxReportPeriod                 _taxReportPeriod,
        TaxReportCollection             _taxReportCollection,
        TaxReportLayout                 _taxReportLayout)
    {
        TaxTrans    taxTrans;
        TaxTrans_W  taxTrans_W;

        if (useVatDueDate_W)
        {
            while select    sum(TaxAmount), sum(TaxBaseAmount), sum(TaxInCostPriceMST)
                          from      taxTrans
                          group by  TaxDirection, TaxCode
                          where     taxTrans.TaxCode        == _taxCode                        &&
                                    // <GEEU>
                                    !taxTrans.PostponeVAT                                      &&
                                    // </GEEU>
                                    taxTrans.TaxOrigin      != TaxOrigin::TaxReporting         &&

                                 (((taxTrans.TaxBaseAmount  < 0 || taxTrans.TaxAmount < 0)     &&
                                    taxTrans.TaxOrigin      != TaxOrigin::TaxReversed          &&
                                   (taxTrans.TaxDirection   == TaxDirection::IncomingTax       ||
                                    taxTrans.TaxDirection   == TaxDirection::UseTax))          ||
                                  ((taxTrans.TaxBaseAmount  > 0 || taxTrans.TaxAmount > 0)     &&
                                    taxTrans.TaxOrigin      == TaxOrigin::TaxReversed          &&
                                   (taxTrans.TaxDirection   == TaxDirection::IncomingTax       ||
                                    taxTrans.TaxDirection   == TaxDirection::UseTax))          ||
                                  ((taxTrans.TaxBaseAmount  > 0 || taxTrans.TaxAmount > 0)     &&
                                    taxTrans.TaxOrigin      != TaxOrigin::TaxReversed          &&
                                   (taxTrans.TaxDirection   == TaxDirection::OutgoingTax       ||
                                    taxTrans.TaxDirection   == TaxDirection::TaxExemptPurchase ||
                                    taxTrans.TaxDirection   == TaxDirection::TaxExemptSales))  ||
                                  ((taxTrans.TaxBaseAmount  < 0 || taxTrans.TaxAmount < 0)     &&
                                    taxTrans.TaxOrigin      == TaxOrigin::TaxReversed          &&
                                   (taxTrans.TaxDirection   == TaxDirection::OutgoingTax       ||
                                    taxTrans.TaxDirection   == TaxDirection::TaxExemptPurchase ||
                                    taxTrans.TaxDirection   == TaxDirection::TaxExemptSales)))
                                // <GEEUE>
                                join RecId, TaxTrans from taxTrans_W
                                    where taxTrans_W.TaxTrans == taxTrans.RecId                 &&
                                    (useVatDueDate_W                                            &&
                                    taxTrans_W.VatDueDate_W   >= _taxReportPeriod.FromDate      &&
                                    taxTrans_W.VatDueDate_W   <= _taxReportPeriod.ToDate)
                                // </GEEU>
            {
                _tmpTaxReportById = _tableBuilder.getTaxAmountByTaxDirectionAndReportId(taxTrans,
                                                                                        _tmpTaxReportById,
                                                                                        NoYes::No,
                                                                                        _taxReportCollection,
                                                                                        _taxReportLayout);
            }
        }
        else
        {
            _tmpTaxReportById = super(_tableBuilder, _tmpTaxReportById, _taxCode, _taxReportPeriod, _taxReportCollection, _taxReportLayout);
        }

        return _tmpTaxReportById;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>