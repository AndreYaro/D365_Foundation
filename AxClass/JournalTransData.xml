<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JournalTransData</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JournalTransData</c> class contains all base methods for the <c>JournalTrans</c> table as it
///    is not possible to inherit tables directly.
/// </summary>
// This class contains a journalTrans buffer
// It should be overloaded if the journal uses voucher numbers.
class JournalTransData
{
    JournalTableData    journalTableData;

    JournalTransMap     journalTrans;

    Voucher             lastVoucher;
    LineNum             lastLineNum;

    #resAppl
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addJournalTransVoucher</Name>
				<Source><![CDATA[
    public void addJournalTransVoucher(
        boolean  _reverse = false,
        boolean  _init    = false)
    {
        if (this.journalTableData().journalVoucherNum() && journalTrans.Voucher)
        {
            if (! this.journalTableData().journalVoucherList().find(journalTrans.Voucher))
            {
                this.journalTableData().journalVoucherList().addJournalTransData(this,_init);
            }

            this.journalTableData().journalVoucherList().item().addTotal(journalTrans,_reverse);

            lastVoucher = journalTrans.Voucher;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTotal</Name>
				<Source><![CDATA[
    public void addTotal(
        boolean  _reverse = false,
        boolean  _init    = false)
    {
        this.journalTableData().addTotal(journalTrans,_reverse);
        this.addJournalTransVoucher(_reverse, _init);
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    public void create(
        boolean _doInsert           = false,
        boolean _initVoucherList    = true)     // automatic JournalTrans add in voucherList. False if adding all transactions yourself -> better performance
    {
        lastLineNum++;

        journalTrans.LineNum  = lastLineNum;

        if (journalTableData.journalVoucherNum() && journalTableData.journalTable().VoucherDraw == JournalVoucherDraw::Entering)
        {
            this.initVoucher(lastVoucher,false,_initVoucherList);
        }

        this.addTotal(false, false);

        if (_doInsert)
        {
            journalTrans.doInsert();
        }
        else
        {
            journalTrans.insert();
        }

        if (journalTableData.journalVoucherNum())
        {
            lastVoucher = journalTrans.Voucher;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        if (this.journalTableData().journalVoucherNum() && journalTrans.Voucher)
        {
            if (! this.journalTableData().journalVoucherList().find(journalTrans.Voucher))
            {
                this.journalTableData().journalVoucherList().addJournalTransData(this,true);
            }

            if (! this.journalTableData().journalTable().Posted)
            {
                this.journalTableData().journalVoucherNum().release(journalTrans.Voucher);
            }

            this.journalTableData().journalVoucherList().item().addTotal(journalTrans,true);
        }

        this.journalTableData().addTotal(journalTrans,true);

        journalTrans.delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVoucher</Name>
				<Source><![CDATA[
    // Must be overloaded if having more key fields saved per voucher.
    public Voucher findVoucher()
    {
        JournalTransMap tmpJournalTrans = journalTableData.journalStatic().journalTrans();
        JournalTransDate journalTransDate = journalTrans.TransDate;

        select firstonly tmpJournalTrans
            where tmpJournalTrans.JournalId    == journalTrans.JournalId &&
                  tmpJournalTrans.TransDate    == journalTransDate &&
                  tmpJournalTrans.Voucher;

        return tmpJournalTrans.Voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasErrors</Name>
				<Source><![CDATA[
    public boolean hasErrors(JournalTransMap _journalTrans = journalTrans)
    {
        if (! _journalTrans.RecId)
        {
            return false;
        }

        if (this.journalTableData().journalErrorTransList().find(_journalTrans.LineNum))
        {
            return true;
        }

        if (this.journalTableData().journalVoucherNum() && _journalTrans.Voucher)
        { // Voucher field must be after check for journalVoucherNum above as not all transaction tables have a Voucher field
            if (this.journalTableData().journalErrorVoucherList().find(_journalTrans.Voucher))
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromJournalTable</Name>
				<Source><![CDATA[
    public void initFromJournalTable()
    {
        journalTrans.JournalId   = this.journalTableData().journalTable().JournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVoucher</Name>
				<Source><![CDATA[
    // Must be overloaded depending on logic for how vouchers are drawed.
    public void initVoucher(
        Voucher             _voucher_last,
        boolean             _makeDecisionLater,         // true if called from form, false if called from code
        boolean             _initVoucherList = true)    // automatic JournalTrans add in voucherList. False if adding all transactions yourself -> better performance
    {
        JournalVoucherList  voucherList = this.journalTableData().journalVoucherList();
        Voucher             voucher_tmp;

        if (! this.mayChangeInitVoucher())
        {
            return;
        }

        if (! this.isVoucherObjectKeyValid())
        {
            return;
        }

        if (voucherList.findIdx(this.voucherObjectKey()))
        {
            journalTrans.Voucher = voucherList.item().voucher();
        }
        else
        {
            journalTrans.Voucher = '';

            if (_initVoucherList)
            {
                voucher_tmp = this.findVoucher();

                if (voucher_tmp)
                {
                    journalTrans.Voucher = voucher_tmp;
                    voucherList.addJournalTransData(this,true);
                }
            }

            if (! journalTrans.Voucher)
            {
                journalTrans.Voucher = this.journalTableData().journalVoucherNum().getNew(_makeDecisionLater);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.addTotal(false,false);
        journalTrans.insert();
        lastLineNum = journalTrans.LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVoucherObjectKeyValid</Name>
				<Source><![CDATA[
    // Must be overloaded if having more key fields saved per voucher.

    protected boolean isVoucherObjectKeyValid()
    {
        return journalTrans.TransDate ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalTableData</Name>
				<Source><![CDATA[
    public JournalTableData journalTableData()
    {
        return journalTableData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalTrans</Name>
				<Source><![CDATA[
    public JournalTransMap journalTrans()
    {
        return journalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayChangeInitVoucher</Name>
				<Source><![CDATA[
    // Must be overload if not allowing automatic voucher change on transactions that are updated.
    protected boolean mayChangeInitVoucher()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(
        JournalTransMap     _journalTrans,
        JournalTableData    _journalTableData)
    {
        journalTrans        = _journalTrans;
        journalTableData    = _journalTableData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalTransDataOrig</Name>
				<Source><![CDATA[
    public JournalTransData newJournalTransDataOrig(JournalTransMap _journalTransOrig)
    {
        return journalTableData.journalStatic().newJournalTransData(_journalTransOrig,journalTableData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLastLineNum</Name>
				<Source><![CDATA[
    public LineNum parmLastLineNum(LineNum _lastLineNum = lastLineNum)
    {
        lastLineNum = _lastLineNum;
        return lastLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLastVoucher</Name>
				<Source><![CDATA[
    public Voucher parmLastVoucher(Voucher _lastVoucher = lastVoucher)
    {
        lastVoucher = _lastVoucher;
        return lastVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        JournalVoucherList journalVoucherList;

        if (this.journalTableData().journalVoucherNum())
        {
            journalVoucherList = this.journalTableData().journalVoucherList();

            if (journalTrans.orig().Voucher)
            {
                if (! journalVoucherList.find(journalTrans.orig().Voucher))
                {
                    journalVoucherList.addJournalTransData(this.newJournalTransDataOrig(journalTrans.orig()),true);
                }

                if (! this.journalTableData().journalTable().Posted)
                {
                    journalTableData.journalVoucherNum().release(journalTrans.orig().Voucher);
                }

                journalVoucherList.item().addTotal(journalTrans.orig(),true);
            }

            if (journalTrans.Voucher)
            {
                if (! journalVoucherList.find(journalTrans.Voucher))
                {
                    journalVoucherList.addJournalTransData(this,true);
                }

                journalVoucherList.item().addTotal(journalTrans,false);
            }
        }

        this.journalTableData().addTotal(journalTrans.orig(),true);
        this.journalTableData().addTotal(journalTrans,false);

        journalTrans.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherObjectKey</Name>
				<Source><![CDATA[
    public container voucherObjectKey()
    {
        return [journalTrans.TransDate];
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTransTableLineNum</Name>
				<Source><![CDATA[
    public static JournalTransData newTransTableLineNum(
        JournalTransMap     _journalTrans,
        JournalTableMap     _journalTable,
        LineNum             _lastLineNum)
    {
        JournalTableData    journalTableData;
        JournalTransData    journalTransData;

        journalTableData    = JournalTableData::newTable(_journalTable);
        journalTransData    = journalTableData.journalStatic().newJournalTransData(_journalTrans,journalTableData);

        journalTransData.parmLastLineNum(_lastLineNum);
        journalTransData.parmLastVoucher('');

        return journalTransData;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>