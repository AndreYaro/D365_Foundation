<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSCatchWeightTelemetryLogger</Name>
	<SourceCode>
		<Declaration><![CDATA[
using RunTimeEventSource = Microsoft.Dynamics.ApplicationPlatform.XppServices.Instrumentation.XppRuntimeEventSource;

/// <summary>
/// The <c>WHSCatchWeightTelemetryLogger</c> class logs telemetry related to warehouse management catch weight items.
/// </summary>
internal final class WHSCatchWeightTelemetryLogger
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>logEmptyItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs telemetry in case the method is called with an empty item ID.
    /// </summary>
    /// <param name = "_methodName">
    /// A method name.
    /// </param>
    /// <param name = "_itemId">
    /// An item ID to verify.
    /// </param>
    [Hookable(false)]
    internal static void logEmptyItemId(str _methodName, ItemId _itemId)
    {
        if (_itemId)
        {
            return;
        }

        SysInstrumentationEventDataJsonSerializer serializer = new SysInstrumentationEventDataJsonSerializer();

        serializer.setValue('WHSCatchWeightFeature', funcName());
        serializer.setValue('MethodName', _methodName);
        serializer.setValue('CallStack', WHSInstrumentationLogger::currentStackTrace());
 
        RunTimeEventSource::EventWriteInfoLogMark(Exception::Info, serializer.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCatchWeightItemConflict</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs telemetry in case the method is called with a catch weight item, but the catch weight feature is not enabled.
    /// </summary>
    /// <param name = "_methodName">
    /// A method name.
    /// </param>
    /// <param name = "_itemId">
    /// An item ID to verify.
    /// </param>
    /// <param name = "_isCWItem">
    /// A Boolean describing whether the item is a catch weight item.
    /// </param>
    /// <param name = "_isFeatureEnabled">
    /// A Boolean describing whether the catch weight feature is enabled.
    /// </param>
    [Hookable(false)]
    internal static void logCatchWeightItemConflict(str _methodName, ItemId _itemId, boolean _isCWItem, boolean _isFeatureEnabled)
    {
        if (!_isCWItem || _isFeatureEnabled)
        {
            return;
        }

        SysInstrumentationEventDataJsonSerializer serializer = new SysInstrumentationEventDataJsonSerializer();

        serializer.setValue('WHSCatchWeightFeature', funcName());
        serializer.setValue('MethodName', _methodName);
        serializer.setValue('CallStack', WHSInstrumentationLogger::currentStackTrace());
        serializer.setValue('ItemRecId', int642Str(InventTable::find(_itemId).Recid));
        RunTimeEventSource::EventWriteInfoLogMark(Exception::Info, serializer.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>logExpectedHandlingUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs telemetry in case a method is called which expects the handling unit for an item.
    /// </summary>
    /// <param name = "_methodName">
    /// A method name.
    /// </param>
    /// <param name = "_itemId">
    /// An item ID to verify.
    /// </param>
    /// <param name = "_handlingUnitId">
    /// A handling unit ID to verify.
    /// </param>
    [Hookable(false)]
    internal static void logExpectedHandlingUnit(str _methodName, ItemId _itemId, InventHandlingUnitId _handlingUnitId)
    {
        InventHandlingUnitId expectedHandlingUnitId = WHSCatchWeightHelper::inventHandlingUnitId(_itemId);

        if (_handlingUnitId == expectedHandlingUnitId)
        {
            return;
        }

        WHSCatchWeightTelemetryLogger::logExpectedCatchWeightUnit(_methodName, _itemId, _handlingUnitId);

        SysInstrumentationEventDataJsonSerializer serializer = new SysInstrumentationEventDataJsonSerializer();

        serializer.setValue('WHSCatchWeightFeature', funcName());
        serializer.setValue('MethodName', _methodName);
        serializer.setValue('CallStack', WHSInstrumentationLogger::currentStackTrace());
        serializer.setValue('ItemRecId', int642Str(InventTable::find(_itemId).Recid));
        serializer.setValue('ExpectedUnitRecId', int642Str(UnitOfMeasure::findBySymbol(expectedHandlingUnitId).RecId)); 
        serializer.setValue('ActualUnitRecId', int642Str(UnitOfMeasure::findBySymbol(_handlingUnitId).RecId));
        RunTimeEventSource::EventWriteInfoLogMark(Exception::Info, serializer.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>logExpectedCatchWeightUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs telemetry in case a method is called which expects the catch weight unit for a catch weight item.
    /// </summary>
    /// <param name = "_methodName">
    /// A method name.
    /// </param>
    /// <param name = "_itemId">
    /// An item ID to verify.
    /// </param>
    /// <param name = "_unitId">
    /// A unit ID to verify.
    /// </param>
    [Hookable(false)]
    internal static void logExpectedCatchWeightUnit(str _methodName, ItemId _itemId, UnitOfMeasureSymbol _unitId)
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
        {
            return;
        }

        if (PdsGlobal::pdsIsCWItem(_itemId))
        {
            PdsCWUnitId catchWeightUnitId = PdsCatchWeight::cwUnitId(_itemId);

            if (_unitId != catchWeightUnitId)
            {
                throw error(strFmt("@WAX:Error_CatchWeightUnitExpected", _unitId, catchWeightUnitId, _itemId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCatchWeightConflictingQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs telemetry in case a method is called for a catch weight but the handling quantity and weight appear to be incorrect.
    /// </summary>
    /// <param name = "_methodName">
    /// A method name.
    /// </param>
    /// <param name = "_itemId">
    /// An item ID to verify.
    /// </param>
    /// <param name = "_quantity">
    /// A handling quantity.
    /// </param>
    /// <param name = "_weight">
    /// A handling weight.
    /// </param>
    [Hookable(false)]
    internal static void logCatchWeightConflictingQuantities(str _methodName, ItemId _itemId, InventHandlingQty _quantity, WHSHandlingWeight _weight)
    {
        if (_quantity == 0 && _weight == 0)
        {
            return;
        }

        if (!WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
        {
            return;
        }

        if (PdsGlobal::pdsIsCWItem(_itemId))
        {
            if ((_quantity <= 0 && _weight >= 0) || (_quantity >= 0 && _weight <= 0))
            {
                int quantitySign    = _quantity ? sign(_quantity) : 0;
                int weightSign      = _weight ? sign(_weight) : 0;

                SysInstrumentationEventDataJsonSerializer serializer = new SysInstrumentationEventDataJsonSerializer();

                serializer.setValue('WHSCatchWeightFeature', funcName());
                serializer.setValue('MethodName', _methodName);
                serializer.setValue('CallStack', WHSInstrumentationLogger::currentStackTrace());
                serializer.setValue('ItemRecId', int642Str(InventTable::find(_itemId).Recid));
                serializer.setValue('QtySign', int2Str(quantitySign));
                serializer.setValue('WeightSign', int2Str(weightSign));

                RunTimeEventSource::EventWriteInfoLogMark(Exception::Info, serializer.toString());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logPolicyFieldChangedWithOpenInventory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs telemetry when a catch weight item policy field that can be changed with open inventory quantity has been 
    /// changed when an item exists using this policy and has open inventory.
    /// </summary>
    /// <param name = "_methodName">
    /// A method name.
    /// </param>
    /// <param name = "_policyFieldId">
    /// The field ID in the <c>WHSCatchWeightItemHandlingPolicy</c> table that is changing.
    /// </param>
    /// <param name = "_policyRecId">
    /// The record id of the record in the <c>WHSCatchWeightItemHandlingPolicy</c> table.
    /// </param>
    [Hookable(false)]
    internal static void logPolicyFieldChangedWithOpenInventory(str _methodName, FieldId _policyFieldId, WHSCatchWeightItemHandlingPolicyRecId _policyRecId)
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().isEnabled() || !_policyFieldId)
        {
            return;
        }

        SysInstrumentationEventDataJsonSerializer serializer = new SysInstrumentationEventDataJsonSerializer();

        serializer.setValue('WHSCatchWeightFeature', funcName());
        serializer.setValue('MethodName', _methodName);
        serializer.setValue('CallStack', WHSInstrumentationLogger::currentStackTrace());
        serializer.setValue('PolicyField', fieldId2Name(tableNum(WHSCatchWeightItemHandlingPolicy), _policyFieldId));
        serializer.setValue('PolicyRecId', int642Str(_policyRecId));

        RunTimeEventSource::EventWriteInfoLogMark(Exception::Info, serializer.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>logPolicyNameChangedForItemWithOpenInventory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs telemetry when a catch weight item policy name has been changed on an item that has open inventory.
    /// </summary>
    /// <param name = "_methodName">
    /// A method name.
    /// </param>
    /// <param name = "_itemId">
    /// The item id for which the policy is changing.
    /// </param>
    /// <param name = "_origPolicyRecId">
    /// The record id of the original record referenced in the <c>WHSCatchWeightItemHandlingPolicy</c> table.
    /// </param>
    /// <param name = "_policyRecId">
    /// The record id of the new record referenced in the <c>WHSCatchWeightItemHandlingPolicy</c> table.
    /// </param>
    [Hookable(false)]
    internal static void logPolicyNameChangedForItemWithOpenInventory(str _methodName, ItemId _itemId, WHSCatchWeightItemHandlingPolicyRecId _origPolicyRecId, WHSCatchWeightItemhandlingPolicyRecId _policyRecId)
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().isEnabled() || !_itemId || !_origPolicyRecId || !_policyRecId)
        {
            return;
        }

        SysInstrumentationEventDataJsonSerializer serializer = new SysInstrumentationEventDataJsonSerializer();

        serializer.setValue('WHSCatchWeightFeature', funcName());
        serializer.setValue('MethodName', _methodName);
        serializer.setValue('CallStack', WHSInstrumentationLogger::currentStackTrace());
        serializer.setValue('ItemRecId', int642Str(InventTable::find(_itemId).Recid));
        serializer.setValue('OrigPolicyRecId', int642Str(_origPolicyRecId));
        serializer.setValue('PolicyRecId', int642Str(_policyRecId));

        RunTimeEventSource::EventWriteInfoLogMark(Exception::Info, serializer.toString());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>