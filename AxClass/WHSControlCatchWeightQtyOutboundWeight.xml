<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSControlCatchWeightQtyOutboundWeight</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSControlCatchWeightQtyOutboundWeight</c> class is responsible for handling the catch weight quantity outbound weight controls on the mobile device.
/// </summary>
#WHSRF
[WhsControlFactory(#CatchWeightQtyOutboundWeight)]
public class WHSControlCatchWeightQtyOutboundWeight extends WhsControl
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    public boolean process()
    {
        WHSWorkLine     workLine = controlData.parmWorkLine();
        ItemId          itemId;

        if (mode == WHSWorkExecuteMode::Movement
            || (mode == WHSWorkExecuteMode::MovementByTemplate && !workLine)
            || mode == WHSWorkExecuteMode::WarehouseTransfer
            || mode == WHSWorkExecuteMode::MaterialConsumption
            || this.isCycleCountWork())
        {
            itemId = pass.lookupStr(#ItemId);
        }
        else
        {
            itemId = workLine.ItemId;
        }

        // Method should not be called for items that are not catch weight enabled.
        if (!PdsGlobal::pdsIsCWItem(itemId))
        {
            return this.fail(Error::wrongUseOfFunction(funcName()));
        }

        WHSTransWeight  catchWeight = decRound(WHSWorkExecuteDisplay::str2numDisplay(this.parmData()), InventTable::inventDecimals(itemId));

        if (!PDSCatchWeight::validateInventQty(itemId,
                                            catchWeight,
                                            1,
                                            false))
        {
            return this.fail(strFmt("@WAX:Error_InvalidCatchWeight", catchWeight, 1, itemId));
        }

        if (WHSInventTable::outboundWeightVarianceMethod(itemId) == WHSOutboundWeightVarianceMethod::Restrict
            && !this.validateRemainingOnHandQuantity(itemId, workLine.InventDim(), pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter), this.getCurrentOutboundWeight() + catchWeight))
        {
            return false;
        }

        fieldValues.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightQtyOutboundWeight, catchWeight);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultValueToBlank</Name>
				<Source><![CDATA[
    protected boolean defaultValueToBlank()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRemainingOnHandQuantity</Name>
				<Source><![CDATA[
    private boolean validateRemainingOnHandQuantity(ItemId _itemId, InventDim _workLineInventDim, PdsCWQty _outboundCWQty, WHSTransWeight _outboundWeight)
    {
        if (mode == WHSWorkExecuteMode::MaterialConsumption)
        {
            boolean isValid;

            [isValid, errorMessage] = WHSControlWeightToConsume::validateRemainingOnHandAndPickedQuantityForConsumption(pass, _itemId, _outboundCWQty, _outboundWeight);

            if (!isValid)
            {
                return this.fail(errorMessage);
            }
        }
        else
        {
            InventDim inventDim = _workLineInventDim;
            if (inventDim)
            {
                inventDim.mergeUsedDim(InventDimGroupSetup::newItemId(_itemId), pass.createInventDimFromPass());
            }
            else
            {
                inventDim = pass.createInventDimFromPass();
            }

            if (mode == WHSWorkExecuteMode::MovementByTemplate && pass.hasValue(#FromInventoryStatus))
            {
                inventDim.InventStatusId = pass.lookupStr(#FromInventoryStatus);
                inventDim = InventDim::findOrCreate(inventDim);
            }

            PmfQtyDataCarrier onhand = WHSInventOnHand::getWorkPhysicalQuantityByInventDim(_itemId, inventDim);

            if (!PdsCatchWeight::validateInventQty(_itemId, onhand.parmInventQty() - _outboundWeight, onhand.parmCwQty() - _outboundCWQty, false))
            {
                return this.fail(strFmt("@WAX:Error_InvalidCatchWeightRemaining", onhand.parmInventQty() - _outboundWeight, onhand.parmCwQty() - _outboundCWQty, _itemId));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentOutboundWeight</Name>
				<Source><![CDATA[
    private WHSTransWeight getCurrentOutboundWeight()
    {
        WHSTransWeight ret;

        if (mode == WHSWorkExecuteMode::WarehouseTransfer
            || this.isCycleCountWork())
        {
            ret = pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight);
        }
        else if (mode == WHSWorkExecuteMode::MaterialConsumption)
        {
            ret = pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::WeightToConsume);
        }
        else
        {
            ret = pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::OutboundWeight);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCycleCountWork</Name>
				<Source><![CDATA[
    private boolean isCycleCountWork()
    {
        return mode == WHSWorkExecuteMode::CycleCounting
            || mode == WHSWorkExecuteMode::SpotCycleCounting
            || mode == WHSWorkExecuteMode::CycleCountGrouping
            || context.controlData.parmWorkLine().WorkType == WHSWorkType::Count;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>