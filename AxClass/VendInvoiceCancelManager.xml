<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceCancelManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendInvoiceCancelManager</c> class is used for cancelling a vendor invoice workflow.
/// </summary>
/// <remarks>
/// This class inherits from the <c>WorkflowCancelManager</c> class and handles the update of the
/// vendor invoice record when the Cancel button is pressed. The default dialog and cancel
/// functionality from the <c>WorkflowCancelManager</c> class is reused.
/// </remarks>
public class VendInvoiceCancelManager extends WorkflowCancelManager
{
    private Args args;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static VendInvoiceCancelManager construct()
    {
        return new VendInvoiceCancelManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmArgs</Name>
				<Source><![CDATA[
    internal Args parmArgs(Args _args = args)
    {
        args = _args;

        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        VendInvoiceCancelManager vendInvoiceCancelManager = VendInvoiceCancelManager::construct();
        vendInvoiceCancelManager.parmArgs(_args);
        vendInvoiceCancelManager.run(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDocumentWithinTransaction</Name>
				<Source><![CDATA[
    public void updateDocumentWithinTransaction(Args _args)
    {
        super(_args);

        if (!_args)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        this.processDocumentUpdates(WorkflowCancelManager::getWorkflowsToCancel(_args.caller()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDocument</Name>
				<Source><![CDATA[
    public void updateDocument(Args _args)
    {
        super(_args);

        if (!_args)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        FormDataSource vendInvoiceCancelWorkflow_ds = FormDataUtil::getFormDataSource(_args.record());

        if (vendInvoiceCancelWorkflow_ds)
        {
            vendInvoiceCancelWorkflow_ds.reread();
            vendInvoiceCancelWorkflow_ds.refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDocumentUpdates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the necessary updates on the documents corresponding to the given list of vendor invoices.
    /// </summary>
    /// <param name = "_listOfWorkflowsToCancel">The list of workflow identifiers corresponding to the vendor invoices that have been recalled.</param>
    /// <remarks>
    /// 1. Updates the <c>RequestStatus</c> on the invoice header and line record
    /// 2. Removes the invoice from the posting queue
    /// 3. Pauses the invoice automation
    /// 4. Inserts an invoice touched event into the <c>DocumentEventLog</c>
    /// </remarks>
    internal void processDocumentUpdates(List _listOfWorkflowsToCancel)
    {
        if (_listOfWorkflowsToCancel.elements() == 0)
        {
            return;
        }

        ListEnumerator listEnumerator = _listOfWorkflowsToCancel.getEnumerator();

        while (listEnumerator.moveNext())
        {
            WorkflowTrackingStatusTable workflowTrackingStatusTable = WorkflowTrackingStatusTable::findByCorrelation(listEnumerator.current());

            if (workflowTrackingStatusTable.RecId == 0)
            {
                continue;
            }

            VendInvoiceInfoTable vendInvoiceInfoTable = VendInvoiceInfoTable::findRecId(workflowTrackingStatusTable.ContextRecId);

            if (vendInvoiceInfoTable.RecId == 0)
            {
                continue;
            }

            Microsoft.Dynamics.Ax.Xpp.ErrorException errorException;

            try
            {
                VendInvoiceInfoTable::resetVendorInvoiceWorkflow(vendInvoiceInfoTable.RecId);

                if (this.isInvoiceTouched(vendInvoiceInfoTable))
                {
                    this.insertDocumentEventLog(vendInvoiceInfoTable.RecId);
                }
            }
            catch (errorException)
            {
                VendInstrumentation::logTelemetry(
                    VendInvoiceAutomationConstants::VendInvoiceTouched,
                    this.toString(),
                    funcName(),
                    VendInvoiceAutomationConstants::VendInvoiceTouched_Recall,
                    strFmt("%1", errorException.ToString()));

                throw error("@AccountsPayable:VendInvoiceAutomationRecallFailure");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInvoiceTouched</Name>
				<Source><![CDATA[
    private boolean isInvoiceTouched(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        return args
            && args.menuItemName() != strMin()
            && VendInvoiceAutomationStateManagement::isInvoiceInAutomatedWorkflow(_vendInvoiceInfoTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDocumentEventLog</Name>
				<Source><![CDATA[
    private void insertDocumentEventLog(VendInvoiceInfoTableRecId _vendInvoiceInfoTableRecId)
    {
        DocumentEventLogRequest documentEventLogRequest = new DocumentEventLogRequest();
        documentEventLogRequest.eventEnumId = enumNum(VendInvoiceAutomationHeaderWorkflowManualAction);
        documentEventLogRequest.eventEnumValue = VendInvoiceAutomationHeaderWorkflowManualAction::Recalled;
        documentEventLogRequest.sourceRecId = _vendInvoiceInfoTableRecId;
        documentEventLogRequest.sourceTableId = tableNum(VendInvoiceInfoTable);
        documentEventLogRequest.parameters = [curUserId()];

        DocumentEventLog::logDocumentEvent(documentEventLogRequest);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>