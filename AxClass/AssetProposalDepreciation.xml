<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetProposalDepreciation</Name>
	<SourceCode>
		<Declaration><![CDATA[
class AssetProposalDepreciation extends AssetProposal implements BatchRetryable
{
    #Characters

    AssetTransDate      assetDateFrom;
    NoYes               sumDepreciation;
    NoYes               halfDepreciation;
    NoYes               reductionEntryAllocation;
    DialogField         dialogDateFrom;
    DialogField         dialogDepDate;
    DialogField         dialogSumDepreciation;
    DialogField         dialogHalfDepreciation;
    DialogField         dialogReductionEntryAllocation;

    // Controls to allow multi-select of entities
    NoYes               postJournals;
    str                 legalEntitiesSelected;
    str                 assetGroupSelected;
    str                 assetAssetIdSelected;
    str                 assetBookSelected;
    FormRun             dialogFormRun;

    container           wdValue,
                        assets,
                        soldAssets;
    AssetAmount         writendownAmount,adjustmentAmount, totalAdjustmentAmount,adjustmentAmountLoc,totalAdjustmentAmountLoc;

    boolean             depreciationIncomeTaxAct, afterAdjustment;
    AssetTransDate      adjustmentLastDepreciationDate;
    AssetTransDate      lastDepreciationDate;

    boolean             isAssetDocumentEnabled;

    protected boolean leaveNetBookValueReachedReportingCurrency;

    // <GIN>
    TransDate           assetAcquisitionDate;
    int                 assetSoldCounter;
    boolean             isFirstDepreciation;
    boolean             isDepreciationAdjusted;
    AssetAmount         soldAssetAcqPriceForAdjustment;
    AssetAmount         assetAcquisitionAmount;
    // </GIN>
    boolean             isIsoFR;
    boolean             isIsoIN;
    boolean             isIsoJP;

    public const int SummarizedDepreciationBookLimit = 6000;

    #DEFINE.CurrentVersion(10)

    #LOCALMACRO.CurrentList
        assetDateFrom,
        runDate,
        sumDepreciation,
        halfDepreciation,
        reductionEntryAllocation,
        postJournals,
        legalEntitiesSelected,
        assetGroupSelected,
        assetAssetIdSelected,
        assetBookSelected
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetTransType</Name>
				<Source><![CDATA[
    AssetTransTypeJournal assetTransType()
    {
        return AssetTransTypeJournal::Depreciation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTasks</Name>
				<Source><![CDATA[
    public void buildTasks()
    {
        List legalEntitiesList = new List(Types::String);
        ListEnumerator enumerator;
        DataAreaId legalEntityId;
        str assetGroupQueryRangeValue;
        str assetValueModelQueryRangeValue;
        str assetIdQueryRangeValue;

        LedgerJournalTable journalTable;
        LedgerJournalNameId assetJournalNameId;

        journalNum = '';

        if (!this.isInBatch())
        {
            this.parmBatchEnabled(false);
        }

        if (legalEntitiesSelected == '')
        {
            legalEntitiesSelected = curExt();
        }

        if (legalEntitiesSelected)
        {
            assetGroupQueryRangeValue = assetGroupSelected;
            assetIdQueryRangeValue = assetAssetIdSelected;
            assetValueModelQueryRangeValue = assetBookSelected;

            legalEntitiesList = strSplit(legalEntitiesSelected, #SEMICOLON);
            enumerator = legalEntitiesList.getEnumerator();

            while (enumerator.moveNext())
            {
                legalEntityId = strLTrim(strRTrim(enumerator.current()));

                changecompany(legalEntityId)
                {
                    assetJournalNameId = AssetParametersProposalJournalNames::getLedgerJournalNameId(
                    journalName.CurrentOperationsTax);

                    // Make sure that proper journal name was used for the journal when the company is changed.
                    if (strUpr(journalName.dataAreaId) != strUpr(legalEntityId))
                    {
                        journalName = null;
                        journalTable = null;
                        journalNum = '';

                        if (!assetJournalNameId)
                        {
                            warning(strFmt("@FixedAssets:FA_MessageError_MissingJournalNamePostingLayerDepreciationProposal", journalName.CurrentOperationsTax, legalEntityId));
                            continue;
                        }

                        journalName = LedgerJournalName::find(assetJournalNameId);
                    }

                    str assetStatusQueryRangeValue = strFmt("!%1, !%2, !%3, !%4, !%5",
                        enum2Str(AssetStatus::Closed),
                        enum2Str(AssetStatus::Scrapped),
                        enum2Str(AssetStatus::Sold),
                        enum2Str(AssetStatus::Suspended),
                        enum2Str(AssetStatus::NoAcquisition));

                    queryRun = new QueryRun(queryStr(assetproposal));
                    this.initQuery();
                    this.setRangeValue(tableStr(AssetBookTable), fieldNum(AssetBookTable, CurrentOperationsTax),
                        queryValue(journalName.CurrentOperationsTax), RangeStatus::Hidden);
                    this.setRangeValue(tableStr(AssetTable), fieldNum(AssetTable, AssetGroup), assetGroupQueryRangeValue);
                    this.setRangeValue(tableStr(AssetTable), fieldNum(AssetTable, AssetId), assetIdQueryRangeValue);
                    this.setRangeValue(tableStr(AssetBook), fieldNum(AssetBook, BookId), assetValueModelQueryRangeValue);
                    this.setRangeValue(tableStr(AssetBook), fieldNum(AssetBook, Status), assetStatusQueryRangeValue);

                    if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) || journalName.CurrentOperationsTax != CurrentOperationsTax::Tax)
                    {
                        this.setRangeValue(tableStr(AssetBook), fieldNum(AssetBook, Depreciation), enum2Str(NoYes::Yes), RangeStatus::Locked);
                    }

                    this.saveLast();

                    // If isInBatch = true it means it is the header batch task and will not calculate anything, it will just create the child tasks
                    if (this.isInBatch())
                    {
                        super();
                    }
                    else
                    {
                        AssetProposal assetProposalCopy = AssetProposal::construct(this.getAssetTransType());
                        assetProposalCopy.unpack(this.pack());
                        assetProposalCopy.run();
                        this.unpack(assetProposalCopy.pack());
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDerogatoryTaxDepreciationAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the amount for the derogatory tax model.
    /// </summary>
    /// <param name="_assetTableMethodTaxModelPrimary">
    ///    An object that represents the primary depreciation method.
    /// </param>
    /// <param name="_assetTableMethodTaxModelSecondary">
    ///    An object that represents the secondary depreciation method.
    /// </param>
    /// <returns>
    ///    An amount that represents the depreciation amount.
    /// </returns>
    /// <remarks>
    ///    This method will consider either primary or secondary value model and determine the highest
    ///    amount.This method is only used for French derogatory depreciation and is call from <c>run</c>
    ///    method.
    /// </remarks>

    private AmountCur calculateDerogatoryTaxDepreciationAmount(
        AssetTableMethod _assetTableMethodTaxModelPrimary,
        AssetTableMethod _assetTableMethodTaxModelSecondary)
    {
        AmountCur retValue;
        AmountCur amountCurSecTaxModelValue;

        // Retrieve depreciation book depreciation amount.
        AmountCur amountCurPriTaxModelValue = -_assetTableMethodTaxModelPrimary.calc();

        if (_assetTableMethodTaxModelSecondary)
        {
            amountCurSecTaxModelValue = -_assetTableMethodTaxModelSecondary.calc();
        }

        if (abs(amountCurPriTaxModelValue) > abs(amountCurSecTaxModelValue))
        {
            if (_assetTableMethodTaxModelSecondary)
            {
                _assetTableMethodTaxModelSecondary.addPrevDepAmountExternal(-(amountCurPriTaxModelValue - amountCurSecTaxModelValue));
            }

            retValue = amountCurPriTaxModelValue;
        }
        else
        {
            _assetTableMethodTaxModelPrimary.addPrevDepAmountExternal(-(amountCurSecTaxModelValue - amountCurPriTaxModelValue));
            retValue = amountCurSecTaxModelValue;
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMultiAssetForAssetGroup_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// To check the multi asset attcahed with asset Group.
    /// </summary>
    /// <param name="_assetGroupId">
    /// _assetGroupId passed to find the corresponding record.
    /// </param>
    /// <param name="_assetBookId">
    /// _assetBookId passed to find the corresponding record.
    /// </param>
    /// <returns>
    /// Return the status asset belong to assetGroup or not.
    /// </returns>
    public boolean checkMultiAssetForAssetGroup_IN(AssetGroupId _assetGroupId,
                                                   AssetBookId  _assetBookId)
    {
        AssetBook           assetBook;
        boolean             checkSoldAsset, multiAsset, checkOpenAsset;

        select firstonly SaleValue, RecId from assetBook
            where assetBook.AssetGroup == _assetGroupId
               && assetBook.BookId     == _assetBookId
               && assetBook.SaleValue  != 0;

        if (assetBook.RecId)
        {
            checkSoldAsset   = true;
        }
        assetBook.clear();

        select firstonly Status, RecId from assetBook
            where assetBook.AssetGroup == _assetGroupId
               && assetBook.BookId     == _assetBookId
               && assetBook.Status     == AssetStatus::Open;

        if (assetBook.RecId)
        {
            checkOpenAsset  = true;
        }

        if (checkSoldAsset  && checkOpenAsset)
        {
            multiAsset  = true;
        }

        return multiAsset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransListForDepreciationAdjustmentPriorYears</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a transaction list for an asset journal specifically for Depreciation Adjustments for prior years.
    /// </summary>
    /// <param name = "_amount">An amount for which a transaction will be created.</param>
    /// <param name = "_assetBook">A table buffer that represents a book of an asset.</param>
    /// <param name = "_transDate">A date for which a transaction will be posted.</param>
    /// <param name = "_reportingCurrencyAmount">A reporting currency amount for which a transaction will be created.</param>
    /// <param name = "_assetBudgetModelId">The asset budget model id.</param>
    /// <param name = "_period">Asset depreciation period.</param>
    /// <param name = "_consumptionQty"> Asset consumption quantity.</param>
    /// <param name = "_revaluationTrans">Asset revaluation transaction.</param>
    /// <param name = "_revaluationAmount">Asset revaluation amount.</param>
    /// <param name = "_custTransId">Customer transaction id.</param>
    /// <param name = "_firstTransDate"> First transaction date.</param>
    /// <param name = "_isProposalAcquisition">Flag for acquisition proposal.</param>
    /// <param name = "_isPriorYear">Flag for prior year setting.</param>
    /// <param name = "_assetDocumentType"> Asset document type.</param>
    /// <param name = "_assetDocumentEntryRecId">Asset document entry record id.</param>
    /// <param name = "_reserveJournals">List of reservation journals</param>
    /// <param name = "_prevLedgerJournalTrans">Previous ledger journal transaction record.</param>
    /// <returns>List of transaction parameters for Depreciation Adjustments for prior years.</returns>
    protected List createTransListForDepreciationAdjustmentPriorYears(
        AmountCur                       _amount,
        AssetBook                       _assetBook,
        TransDate                       _transDate,
        AssetAmountReportingCurrency    _reportingCurrencyAmount,
        AssetBudgetModelId              _assetBudgetModelId = '',
        AssetDepreciationTime           _period = 0,
        AssetConsumptionQty             _consumptionQty  = 0,
        AssetRevaluationTrans           _revaluationTrans = false,
        AssetRevaluationAmount          _revaluationAmount = 0,
        RecId                           _custTransId = 0,
        TransDate                       _firstTransDate = dateNull(),
        boolean                         _isProposalAcquisition = false,
        boolean                         _isPriorYear = false,
        // <GJP>
        AssetDocumentType_JP            _assetDocumentType = AssetDocumentType_JP::None,
        AssetDocumentRecId_JP           _assetDocumentEntryRecId = 0,
        List                            _reserveJournals = null,
        // </GJP>
        LedgerJournalTrans              _prevLedgerJournalTrans = null)

    {
        return this.createTransList(_amount,
                            _assetBook,
                            _transDate,
                            _assetBudgetModelId,
                            _period,
                            _reportingCurrencyAmount,
                            _consumptionQty,
                            _revaluationTrans,
                            _revaluationAmount,
                            _custTransId,
                            _firstTransDate,
                            _isProposalAcquisition,
                            _isPriorYear,
                            _assetDocumentType,
                            _assetDocumentEntryRecId,
                            _reserveJournals,
                            _prevLedgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransListForDepreciationAdjustmentTotalDepreciation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a transaction list for an asset journal specifically for Depreciation Adjustments for total depreciation.
    /// </summary>
    /// <param name = "_amount">An amount for which a transaction will be created.</param>
    /// <param name = "_assetBook">A table buffer that represents a book of an asset.</param>
    /// <param name = "_transDate">A date for which a transaction will be posted.</param>
    /// <param name = "_reportingCurrencyAmount">A reporting currency amount for which a transaction will be created.</param>
    /// <param name = "_assetBudgetModelId">The asset budget model id.</param>
    /// <param name = "_period">Asset depreciation period.</param>
    /// <param name = "_consumptionQty"> Asset consumption quantity.</param>
    /// <param name = "_revaluationTrans">Asset revaluation transaction.</param>
    /// <param name = "_revaluationAmount">Asset revaluation amount.</param>
    /// <param name = "_custTransId">Customer transaction id.</param>
    /// <param name = "_firstTransDate"> First transaction date.</param>
    /// <param name = "_isProposalAcquisition">Flag for acquisition proposal.</param>
    /// <param name = "_isPriorYear">Flag for prior year setting.</param>
    /// <param name = "_assetDocumentType"> Asset document type.</param>
    /// <param name = "_assetDocumentEntryRecId">Asset document entry record id.</param>
    /// <param name = "_reserveJournals">List of reservation journals</param>
    /// <param name = "_prevLedgerJournalTrans">Previous ledger journal transaction record.</param>
    /// <returns>List of transaction parameters for Depreciation Adjustments for total depreciation.</returns>
    protected List createTransListForDepreciationAdjustmentTotalDepreciation(
        AmountCur                       _amount,
        AssetBook                       _assetBook,
        TransDate                       _transDate,
        AssetAmountReportingCurrency    _reportingCurrencyAmount,
        AssetBudgetModelId              _assetBudgetModelId = '',
        AssetDepreciationTime           _period = 0,
        AssetConsumptionQty             _consumptionQty  = 0,
        AssetRevaluationTrans           _revaluationTrans = false,
        AssetRevaluationAmount          _revaluationAmount = 0,
        RecId                           _custTransId = 0,
        TransDate                       _firstTransDate = dateNull(),
        boolean                         _isProposalAcquisition = false,
        boolean                         _isPriorYear = false,
        // <GJP>
        AssetDocumentType_JP            _assetDocumentType = AssetDocumentType_JP::None,
        AssetDocumentRecId_JP           _assetDocumentEntryRecId = 0,
        List                            _reserveJournals = null,
        // </GJP>
        LedgerJournalTrans              _prevLedgerJournalTrans = null)

    {
        return this.createTransList(_amount,
                            _assetBook,
                            _transDate,
                            _assetBudgetModelId,
                            _period,
                            _reportingCurrencyAmount,
                            _consumptionQty,
                            _revaluationTrans,
                            _revaluationAmount,
                            _custTransId,
                            _firstTransDate,
                            _isProposalAcquisition,
                            _isPriorYear,
                            _assetDocumentType,
                            _assetDocumentEntryRecId,
                            _reserveJournals,
                            _prevLedgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransListForDepreciationAdjustmentSummary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a transaction list for an asset journal specifically for summarized Depreciation Adjustments.
    /// </summary>
    /// <param name = "_amount">An amount for which a transaction will be created.</param>
    /// <param name = "_assetBook">A table buffer that represents a book of an asset.</param>
    /// <param name = "_transDate">A date for which a transaction will be posted.</param>
    /// <param name = "_reportingCurrencyAmount">A reporting currency amount for which a transaction will be created.</param>
    /// <param name = "_assetBudgetModelId">The asset budget model id.</param>
    /// <param name = "_period">Asset depreciation period.</param>
    /// <param name = "_consumptionQty"> Asset consumption quantity.</param>
    /// <param name = "_revaluationTrans">Asset revaluation transaction.</param>
    /// <param name = "_revaluationAmount">Asset revaluation amount.</param>
    /// <param name = "_custTransId">Customer transaction id.</param>
    /// <param name = "_firstTransDate"> First transaction date.</param>
    /// <param name = "_isProposalAcquisition">Flag for acquisition proposal.</param>
    /// <param name = "_isPriorYear">Flag for prior year setting.</param>
    /// <param name = "_assetDocumentType"> Asset document type.</param>
    /// <param name = "_assetDocumentEntryRecId">Asset document entry record id.</param>
    /// <param name = "_reserveJournals">List of reservation journals</param>
    /// <param name = "_prevLedgerJournalTrans">Previous ledger journal transaction record.</param>
    /// <returns>List of transaction parameters for summarized Depreciation Adjustments.</returns>
    protected List createTransListForDepreciationAdjustmentSummary(
        AmountCur                       _amount,
        AssetBook                       _assetBook,
        TransDate                       _transDate,
        AssetAmountReportingCurrency    _reportingCurrencyAmount,
        AssetBudgetModelId              _assetBudgetModelId = '',
        AssetDepreciationTime           _period = 0,
        AssetConsumptionQty             _consumptionQty  = 0,
        AssetRevaluationTrans           _revaluationTrans = false,
        AssetRevaluationAmount          _revaluationAmount = 0,
        RecId                           _custTransId = 0,
        TransDate                       _firstTransDate = dateNull(),
        boolean                         _isProposalAcquisition = false,
        boolean                         _isPriorYear = false,
        // <GJP>
        AssetDocumentType_JP            _assetDocumentType = AssetDocumentType_JP::None,
        AssetDocumentRecId_JP           _assetDocumentEntryRecId = 0,
        List                            _reserveJournals = null,
        // </GJP>
        LedgerJournalTrans              _prevLedgerJournalTrans = null)

    {
        return this.createTransList(_amount,
                            _assetBook,
                            _transDate,
                            _assetBudgetModelId,
                            _period,
                            _reportingCurrencyAmount,
                            _consumptionQty,
                            _revaluationTrans,
                            _revaluationAmount,
                            _custTransId,
                            _firstTransDate,
                            _isProposalAcquisition,
                            _isPriorYear,
                            _assetDocumentType,
                            _assetDocumentEntryRecId,
                            _reserveJournals,
                            _prevLedgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDeprecionAdjustmentTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a transaction for an asset journal specifically for the Depreciation Adjstments.
    /// </summary>
    /// <param name="_priorYearsDepreciation">
    /// The sum of depreciation amounts for the prior/priors fiscal years
    /// </param>
    /// <param name="_totalDepreciation">
    /// The sum of depreciation amounts for the current fiscla year.
    /// </param>
    /// <param name="_assetTableInterval">
    /// An instance of AssetTableInterv object.
    /// </param>
    /// <param name="_assetJournal">
    /// An instance of AssetJournal object.
    /// </param>
    /// <param name="_sumDepPeriodPriorYears">
    /// sumDepPeriodPriorYears
    /// </param>
    /// <param name="_sumDepPeriodCurrentYear">
    /// sumDepPeriodCurrentYear
    /// </param>
    /// <param name="_assetBook">
    /// AssetBook table buffer
    /// </param>
    /// <param name="_firstTransDate">
    /// firstTransDate
    /// </param>
    /// <param name="_lastTransDate">
    /// lastTransDate
    /// </param>
    /// <remarks>
    ///  Added a new method to check whether generated transaction need to be created as sumarized journal or not.
    /// </remarks>
    private void createDeprecionAdjustmentTrans(
        AssetAmount           _priorYearsDepreciation,
        AssetAmount           _totalDepreciation,
        AssetTableInterval    _assetTableInterval,
        AssetJournal          _assetJournal,
        real                  _sumDepPeriodPriorYears,
        real                  _sumDepPeriodCurrentYear,
        AssetBook             _assetBook,
        AssetTransDate        _firstTransDate,
        AssetTransDate        _lastTransDate,
        AssetAmountReportingCurrency _priorYearsDepreciationReportingCurrency,
        AssetAmountReportingCurrency _totalDepreciationReportingCurrency)
    {
        boolean isOneVoucher = _assetJournal.parmIsOneVoucher();
        boolean isOneVoucherFeatureEnabled = FeatureStateProvider::isFeatureEnabled(AssetOneVoucherFeature::instance());

        _assetJournal.parmAssetTransTypeJournal(AssetTransTypeJournal::DepreciationAdj);
        _assetJournal.parmIsOneVoucher(!isOneVoucherFeatureEnabled);

        if (_priorYearsDepreciation || _totalDepreciation)
        {
            _assetJournal.parmIsDepreciationAdjustment(true);
            _assetJournal.parmIsCatchUpDepreciation(true);
        }

        AssetReversalRelatedVoucherManager assetReversalRelatedVoucherManager;
        if (isOneVoucherFeatureEnabled)
        {
            assetReversalRelatedVoucherManager = AssetReversalRelatedVoucherManager::construct();

            assetReversalRelatedVoucherManager.addVoucher(_assetJournal.parmVoucher(), _assetJournal.parmLedgerJournalTrans().TransDate);
        }

        if (!sumDepreciation
            && (_priorYearsDepreciation || _totalDepreciation))
        {
            if (_priorYearsDepreciation)
            {
                List transactionListForDepreciationAdjPriorYears = this.createTransListForDepreciationAdjustmentPriorYears(_priorYearsDepreciation,
                                                                                                                      _assetBook,
                                                                                                                      _assetTableInterval.endPeriod(_assetBook.AcquisitionDate),
                                                                                                                      _priorYearsDepreciationReportingCurrency,
                                                                                                                      assetBudgetModelId,
                                                                                                                      _sumDepPeriodPriorYears,
                                                                                                                      0,
                                                                                                                      false,
                                                                                                                      0,
                                                                                                                      0,
                                                                                                                      dateNull(),
                                                                                                                      false,
                                                                                                                      true);
                this.consumeTransList(transactionListForDepreciationAdjPriorYears, _assetJournal);

                this.addReversalRelatedVoucher(isOneVoucherFeatureEnabled, _assetJournal, assetReversalRelatedVoucherManager);
            }

            if (_totalDepreciation)
            {
                List transactionListForDepreciationAdjTotalDepreciation = this.createTransListForDepreciationAdjustmentTotalDepreciation(_totalDepreciation,
                                                                                                                                    _assetBook,
                                                                                                                                    _assetTableInterval.endPeriod(_assetBook.AcquisitionDate),
                                                                                                                                    _totalDepreciationReportingCurrency,
                                                                                                                                    assetBudgetModelId,
                                                                                                                                    _sumDepPeriodCurrentYear);
                this.consumeTransList(transactionListForDepreciationAdjTotalDepreciation, _assetJournal);

                this.addReversalRelatedVoucher(isOneVoucherFeatureEnabled, _assetJournal, assetReversalRelatedVoucherManager);
            }
        }
        else
        {
            _assetJournal.parmReportingCurrencyAmount(_priorYearsDepreciationReportingCurrency + _totalDepreciationReportingCurrency);
            List transactionListForDepreciationAdjSummary = this.createTransListForDepreciationAdjustmentSummary((_priorYearsDepreciation + _totalDepreciation),
                                                                                                             _assetBook,
                                                                                                             _lastTransDate,
                                                                                                             (_priorYearsDepreciationReportingCurrency + _totalDepreciationReportingCurrency),
                                                                                                             assetBudgetModelId,
                                                                                                             (_sumDepPeriodPriorYears + _sumDepPeriodCurrentYear),
                                                                                                             0,
                                                                                                             false,
                                                                                                             0,
                                                                                                             0,
                                                                                                             _firstTransDate);
            this.consumeTransList(transactionListForDepreciationAdjSummary, _assetJournal);

            this.addReversalRelatedVoucher(isOneVoucherFeatureEnabled, _assetJournal, assetReversalRelatedVoucherManager);
        }

        _assetJournal.parmAssetTransTypeJournal(this.assetTransType());
        _assetJournal.parmIsDepreciationAdjustment(false);
        _assetJournal.parmIsCatchUpDepreciation(false);
        _assetJournal.parmIsOneVoucher(isOneVoucher);
        _assetJournal.parmAssetDepreciationPeriod(AssetDepreciationPeriod::construct());

        if (isOneVoucherFeatureEnabled)
        {
            assetReversalRelatedVoucherManager.save();

            AssetInstrumentationLogger::createLogger(AssetInstrumentationConstants::AssetOneVoucherFeatureLog)
                .logOneVoucherScenario(
                    AssetInstrumentationConstants::TrueUpDepreciation,
                    isOneVoucherFeatureEnabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addReversalRelatedVoucher</Name>
				<Source><![CDATA[
    private void addReversalRelatedVoucher(
        boolean _isOneVoucherFeatureEnabled,
        AssetJournal _assetJournal,
        AssetReversalRelatedVoucherManager _assetReversalRelatedVoucherManager)
    {
        if (_isOneVoucherFeatureEnabled)
        {
            _assetReversalRelatedVoucherManager.addVoucher(_assetJournal.parmVoucher(), _assetJournal.parmLedgerJournalTrans().TransDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDerogatoryAssetTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a transaction for the derogatory tax model.
    /// </summary>
    /// <param name="_journalNum">
    ///    A journal number that is used to create an asset journal.
    /// </param>
    /// <param name="_assetTransTypeJournal">
    ///    A journal type for an asset transaction.
    /// </param>
    /// <param name="_assetBook">
    ///    A table buffer that represents a book of an asset.
    /// </param>
    /// <param name="_amountDerogatory">
    ///    An amount for which a transaction will be created.
    /// </param>
    /// <param name="_transDate">
    ///    A date for which a transaction will be posted.
    /// </param>
    /// <param name="_amountDerogatoryReporting">
    ///    Reporting currency amount.
    /// </param>
    /// <returns>
    ///    The number of transaction created.
    /// </returns>
    /// <remarks>
    ///    This method is only used for French derogatory depreciation and is call from <c>run</c> method.
    /// </remarks>
    private Counter createDerogatoryAssetTrans(
        LedgerJournalId _journalNum,
        AssetTransTypeJournal _assetTransTypeJournal,
        AssetBook _assetBook,
        AmountCur _amountDerogatory,
        AssetTransDate _transDate,
        AssetAmount _amountDerogatoryReporting = 0,
        AssetBudgetModelId _assetBudgetModelId = '',
        AssetTransDate _firstTransDate = dateNull())
    {
        Counter retValue;

        AssetJournal assetDerJournal = new AssetJournal(_journalNum, _assetTransTypeJournal);

        if (_amountDerogatoryReporting)
        {
            assetDerJournal.parmReportingCurrencyAmount(_amountDerogatoryReporting);
        }

        if (_amountDerogatory)
        {
            if (AssetDerogatoryTaxAssetBookTransDescriptionFlight::instance().isEnabled())
            {
                assetDerJournal.createTrans(_amountDerogatory, _assetBook, _transDate, _assetBudgetModelId, 0, 0, false, 0, 0, _firstTransDate);
            }
            else
            {
                assetDerJournal.createTrans(_amountDerogatory, _assetBook, _transDate, _assetBudgetModelId);
            }
            retValue = 1;
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDerogatoryAssetTransTypeJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines what asset transaction journal type must be selected for the given derogatory amount.
    /// </summary>
    /// <param name="_amountCurDerogatory">
    ///    A derogatory depreciation amount.
    /// </param>
    /// <returns>
    ///    An asset transaction journal type determined by this method.
    /// </returns>
    /// <remarks>
    ///    This method is only used for French derogatory depreciation and is called from the <c>run</c>
    ///    method.
    /// </remarks>
    private AssetTransTypeJournal determineDerogatoryAssetTransTypeJournal(AmountCur _amountCurDerogatory)
    {
        if (_amountCurDerogatory > 0)
        {
            return AssetTransTypeJournal::DerogatoryDecrease;
        }
        else
        {
            return AssetTransTypeJournal::DerogatoryIncrease;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        DialogRunbase  dialog;
        boolean isAssetBatchProposals = this.parmBatchEnabled();

        if (this.parmBatchEnabled())
        {
            dialog = Dialog::newFormnameRunbase(formstr(AssetProposalDepreciation), this);
            // Make Batch processing as the default option.
            this.batchInfo().parmBatchExecute(true);
        }
        else
        {
            dialog = super();

            dialog.caption("@SYS67580");

            dialog.addGroup("@SYS22526");

            if (this.budgetJournal())
            {
                dialogDateFrom = dialog.addFieldValue(extendedTypeStr(AssetTransDate), assetDateFrom, "@SYS5209", "@SYS71106");
            }

            dialogDepDate = dialog.addFieldValue(extendedTypeStr(AssetTransDate), runDate, "@SYS14656", "@SYS71107");
            dialogDepDate.fieldControl().mandatory(true);

            dialog.addGroup("@SYS7523");
            dialogSumDepreciation = dialog.addFieldValue(enumStr(NoYes), sumDepreciation, "@SYS78878", "@FixedAssets:FA_TaskTooltip_SummarizeDepreciation");

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
            {
                dialogHalfDepreciation = dialog.addFieldValue(enumStr(NoYes), halfDepreciation, "@GLS111944", "@GLS111945");
            }

            if (isAssetDocumentEnabled)
            {
                dialogReductionEntryAllocation = dialog.addFieldValue(enumStr(NoYes), reductionEntryAllocation, "@SYS4006214", "@SYS4006169");
            }
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustAmount_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find amount that needs to be adjusted.
    /// </summary>
    /// <param name="_assetBook">
    /// The <c>Assetbook</c> of the asset.
    /// </param>
    /// <returns>
    /// The amount to be adjusted.
    /// </returns>
    public AssetAmount getAdjustAmount_IN(AssetBook     _assetBook)
    {
        AssetTrans      assetTrans;
        AssetAmount     prvDepreciationAmount,totalAcqAmount,adjustmentValue,amount,tmpDepAmount;
        int             counterLoc = 1;
        container       assetIdLoc;
        boolean         ok;
        int             thresholdValue  = AssetParameters::find().DepreciationThreshold_IN;
        AssetSaleBasis_IN   isAssetSaleBasis = AssetParameters::find().AssetSaleBasis_IN;

        ok = true;
        prvDepreciationAmount = AssetGroupTrans_IN::depreciationAcctCurrencyAmt(_assetBook.AssetGroup, _assetBook.LastDepreciationDate , _assetBook.BookId, _assetBook.AssetId);
        if (prvDepreciationAmount > 0)
        {
            while select AssetGroup, BookId, TransDate, TransType, AssetId from assetTrans
                where assetTrans.AssetGroup == _assetBook.AssetGroup
                   && assetTrans.BookId     == _assetBook.BookId
                   && assetTrans.TransDate  < _assetBook.DisposalDate - 1
                   && (assetTrans.TransType == AssetTransType::Acquisition
                   || assetTrans.TransType  == AssetTransType::AcquisitionAdj)
            {
                if (AssetBook::find(assetTrans.AssetId,assetTrans.BookId).DepreciationStartDate < AssetBook::find(assetTrans.AssetId,assetTrans.BookId).LastDepreciationDate)
                {
                    if (conFind(assetIdLoc,assetTrans.AssetId))
                    {
                        ok = false;
                    }
                    if (ok)
                    {
                        totalAcqAmount += AssetGroupTrans_IN::acquisitionAmount(assetTrans.AssetId,_assetBook.DisposalDate - 1,assetTrans.BookId);
                        assetIdLoc = conPoke(assetIdLoc,counterLoc,assetTrans.AssetId);
                        counterLoc ++;
                    }
                }
            }
            tmpDepAmount = totalAcqAmount * _assetBook.depreciationPercentage() / 100;
            if (_assetBook.DepreciationStartDate < _assetBook.LastDepreciationDate)
            {
                if (prvDepreciationAmount != tmpDepAmount)
                {
                    if ((_assetBook.LastDepreciationDate - _assetBook.DepreciationStartDate + 1) < thresholdValue) // Replaced the 180 hard coded value)
                    {
                        if (totalAcqAmount)
                        {
                            prvDepreciationAmount = ((AssetGroupTrans_IN::acquisitionAmount(_assetBook.AssetId,_assetBook.LastDepreciationDate,_assetBook.BookId))/ totalAcqAmount)
                                                      * tmpDepAmount * (AssetParameters::find().ThresholdPercentage_IN / 100);
                        }
                    }
                    else
                    {
                        if (totalAcqAmount)
                        {
                            prvDepreciationAmount = ((AssetGroupTrans_IN::acquisitionAmount(_assetBook.AssetId,_assetBook.LastDepreciationDate,_assetBook.BookId))/ totalAcqAmount) * tmpDepAmount;
                        }
                    }
                }
                else
                {
                    if (totalAcqAmount)
                    {
                        prvDepreciationAmount = round(((AssetGroupTrans_IN::acquisitionAmount(_assetBook.AssetId,_assetBook.DisposalDate - 1,_assetBook.BookId))/ totalAcqAmount) * abs(prvDepreciationAmount),1.0);
                    }
                }
            }
            else
            {
                prvDepreciationAmount = 0;
            }
        }

        if (_assetBook.DepreciationStartDate <= _assetBook.LastDepreciationDate && this.checkMultiAssetForAssetGroup_IN(_assetBook.AssetGroup, _assetBook.BookId))
        {
            prvDepreciationAmount   = AssetGroupTrans_IN::depreciationAcctCurrencyAmt(_assetBook.AssetGroup, _assetBook.LastDepreciationDate, _assetBook.BookId, _assetBook.AssetId);
            if (_assetBook.LastDepreciationDate >= adjustmentLastDepreciationDate)
            {
                adjustmentLastDepreciationDate = _assetBook.LastDepreciationDate;
            }
        }
        select sum(AmountMST) from assetTrans
            where assetTrans.AssetId    == _assetBook.AssetId
               && assetTrans.AssetGroup == _assetBook.AssetGroup
               && assetTrans.BookId     == _assetBook.BookId
               && (assetTrans.TransType == AssetTransType::DisposalSale
               || assetTrans.TransType  == AssetTransType::DisposalScrap);

        amount = assetTrans.AmountMST;

        if (prvDepreciationAmount == 0
                && abs(assetTrans.AmountMST) != _assetBook.AcquisitionPrice //Asset sold is not equal to asset acquisition amount.
        && (((runDate - assetAcquisitionDate + 1) >= thresholdValue) || (isAssetSaleBasis == AssetSaleBasis_IN::FIFO)))
        {
            prvDepreciationAmount  = AssetGroupTrans_IN::amountMSTPerAssetGroupDate(_assetBook.AssetGroup, _assetBook.LastDepreciationDate , _assetBook.BookId, AssetTransType::Depreciation);
            prvDepreciationAmount += AssetGroupTrans_IN::amountMSTPerAssetGroupDate(_assetBook.AssetGroup, _assetBook.LastDepreciationDate , _assetBook.BookId, AssetTransType::DepreciationAdj);
        }
        // Adjust the SaleAsset amount with profit.
        if ((abs(amount) - abs(_assetBook.AcquisitionPrice)) > 0)
        {
            // if the asset is less than 180 days and LIFO then adjust all the sale amount to asset.
            if (this.checkIfAdjMthLIFOAndWithinThreshold_IN(runDate, assetAcquisitionDate))
            {
                if (this.checkIfAssetSaleDateIsMoreThanAcqDate_IN(_assetBook, assetAcquisitionDate))
                {
                    //Adjust the soldAsset Acquisition price with other assets with Assetlife greater than 180 days.
                    if ((abs(amount) - abs(_assetBook.AcquisitionPrice)) < assetAcquisitionAmount )
                    {
                        soldAssetAcqPriceForAdjustment = abs(_assetBook.AcquisitionPrice);
                        adjustmentValue = abs(amount);
                    }
                    else
                    {
                        adjustmentValue = abs(amount) - abs(_assetBook.AcquisitionPrice);
                    }
                }
            }
            else
            {
                adjustmentValue = abs(amount) - abs(_assetBook.AcquisitionPrice);
            }
        }
        //Adjust sold asset with loss and current asset is less than 180 days
        else if ((abs(amount) - abs(_assetBook.AcquisitionPrice)) < 0
                && this.checkIfAdjMthLIFOAndWithinThreshold_IN(runDate, assetAcquisitionDate))
        {
            // if the asset is less than 180 days and LIFO then adjust all the sale amount to asset.
            if (this.checkIfAssetSaleDateIsMoreThanAcqDate_IN(_assetBook, assetAcquisitionDate))
            {
                //Adjust the soldAsset Acquisition price with other assets with Assetlife greater than 180 days.
                if (abs(amount) < assetAcquisitionAmount)
                {
                    adjustmentValue = abs(amount);
                }
                else
                {
                    adjustmentValue = assetAcquisitionAmount;
                }
            }
        }

        // Add depreciation only once.
        if (!isDepreciationAdjusted)
            //&& (abs(amount) - abs(_assetBook.AcquisitionPrice)) > 0) // add depreciation if the asset sale is in profit
        {
            if (this.checkIfAdjMthLIFOAndWithinThreshold_IN(runDate, assetAcquisitionDate))
            {
                if (this.checkIfAssetSaleDateIsMoreThanAcqDate_IN(_assetBook, assetAcquisitionDate))
                {
                    if ((abs(amount) - abs(_assetBook.AcquisitionPrice)) > 0
                        && abs(amount) - abs(_assetBook.AcquisitionPrice) < assetAcquisitionAmount)
                    {
                        //Adjust the AcquisitionPrice with the Depreciation.
                        soldAssetAcqPriceForAdjustment -= abs(prvDepreciationAmount);
                        isDepreciationAdjusted = true;
                    }
                }
            }
            else
            {
                adjustmentValue += abs(prvDepreciationAmount);
                isDepreciationAdjusted = true;
            }
        }

        AssetTableInterval deprIntervalLocal = AssetTableInterval::construct(_assetBook.depreciationProfile(), AssetBookTable::find(_assetBook.BookId).FiscalCalendar);

        if (deprIntervalLocal.startOfPeriod(runDate) > _assetBook.DepreciationStartDate)
        {
            if (this.checkIfAdjMthLIFOAndWithinThreshold_IN(runDate, assetAcquisitionDate))
            {
                if (soldAssetAcqPriceForAdjustment != 0)
                {
                    //Adjust the AcquisitionPrice with the bonus Depreciation.
                    soldAssetAcqPriceForAdjustment -= abs(AssetTrans::amountMSTPerDateTranstype(_assetBook.AssetId,runDate,_assetBook.BookId,AssetTransType::BonusDepreciation));
                }
            }
            else
            {
                adjustmentValue += abs(AssetTrans::amountMSTPerDateTranstype(_assetBook.AssetId,runDate,_assetBook.BookId,AssetTransType::BonusDepreciation));
            }
        }

        return adjustmentValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfAssetSaleDateIsMoreThanAcqDate_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the asset addjustment is applicable.
    /// </summary>
    private boolean checkIfAssetSaleDateIsMoreThanAcqDate_IN(AssetBook _assetBookSold, TransDate   _currentAssetAcquisitionDate)
    {
        boolean	    ret;
        AssetTrans  assetTransSale;
        AssetTableInterval  deprInterval;

        deprInterval = AssetTableInterval::construct(_assetBookSold.depreciationProfile(), _assetBookSold.assetBookTable().FiscalCalendar);

        // latest sale date for the asset to adjust
        select firstonly transdate from assetTransSale
            order by TransDate desc
            where assetTransSale.AssetId    == _assetBookSold.AssetId
               && assetTransSale.AssetGroup == _assetBookSold.AssetGroup
               && assetTransSale.BookId     == _assetBookSold.BookId
               && (assetTransSale.TransType == AssetTransType::DisposalSale
               || assetTransSale.TransType  == AssetTransType::DisposalScrap);

        // if the sale date is greater thn the current asset acquisition  date adjust the amount
        if (deprInterval.endPeriod(assetTransSale.TransDate) >= _currentAssetAcquisitionDate)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfAdjMthLIFOAndWithinThreshold_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the adjustment method is LIFO and is asset acquired is less than threshold days.
    /// </summary>
    private boolean checkIfAdjMthLIFOAndWithinThreshold_IN(TransDate _assetTransDate, TransDate _assetAcquisitionDate)
    {
        boolean	            ret;
        int                 thresholdValue   = AssetParameters::find().DepreciationThreshold_IN;
        AssetSaleBasis_IN   isAssetSaleBasis = AssetParameters::find().AssetSaleBasis_IN;

        // Adjust the SaleAsset amount, only when it is profit.
        if ((isAssetSaleBasis == AssetSaleBasis_IN::LIFO)
               && ((_assetTransDate - _assetAcquisitionDate + 1) < thresholdValue))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDepreciateValue_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the depreciation amount value after adjustment.
    /// </summary>
    /// <param name="_assetBook">
    /// The <c>Assetbook</c> buffer of the asset.
    /// </param>
    /// <param name="_adjustmentValue">
    /// The amount to be adjusted.
    /// </param>
    /// <param name="_writtendownValue">
    /// The value to be written down.
    /// </param>
    /// <returns>
    /// Returns the amount after depreciation.
    /// </returns>
    public AssetAmount getDepreciateValue_IN(AssetBook  _assetBook,AssetAmount   _adjustmentValue,AssetAmount    _writtendownValue)
    {
        AssetAmount     prvDepreciationAmount,totalAcqAmount,value,amountToDepreciate,tmpDepAmount;
        AssetTrans      assetTrans;
        int             thresholdValue  = AssetParameters::find().DepreciationThreshold_IN;

        prvDepreciationAmount = AssetGroupTrans_IN::depreciationAcctCurrencyAmt(_assetBook.AssetGroup, _assetBook.LastDepreciationDate, _assetBook.BookId, _assetBook.AssetId);

        if (prvDepreciationAmount > 0)
        {
            while select AssetGroup, BookId, TransDate, TransType, AssetId from assetTrans
                where assetTrans.AssetGroup == _assetBook.AssetGroup
                   && assetTrans.BookId     == _assetBook.BookId
                   && assetTrans.TransDate  < _assetBook.LastDepreciationDate
                   && (assetTrans.TransType == AssetTransType::Acquisition
                   || assetTrans.TransType  == AssetTransType::AcquisitionAdj)
            {
                if (AssetBook::find(assetTrans.AssetId,assetTrans.BookId).DepreciationStartDate < AssetBook::find(assetTrans.AssetId,assetTrans.BookId).LastDepreciationDate)
                {
                    totalAcqAmount += AssetGroupTrans_IN::acquisitionAmount(assetTrans.AssetId,_assetBook.LastDepreciationDate,assetTrans.BookId);
                }
            }

            tmpDepAmount = totalAcqAmount * _assetBook.depreciationPercentage() / 100;
            if (_assetBook.DepreciationStartDate <= _assetBook.LastDepreciationDate)
            {
                if (prvDepreciationAmount != tmpDepAmount)
                {
                    if ((_assetBook.LastDepreciationDate - _assetBook.DepreciationStartDate + 1) < thresholdValue)
                    {
                        if (totalAcqAmount)
                        {
                            prvDepreciationAmount = ((AssetGroupTrans_IN::acquisitionAmount(_assetBook.AssetId,_assetBook.LastDepreciationDate,_assetBook.BookId))/ totalAcqAmount) *
                                                     tmpDepAmount * (AssetParameters::find().ThresholdPercentage_IN / 100) ;
                        }
                    }
                    else
                    {
                        if (totalAcqAmount)
                        {
                            prvDepreciationAmount = ((AssetGroupTrans_IN::acquisitionAmount(_assetBook.AssetId,_assetBook.LastDepreciationDate,_assetBook.BookId))/ totalAcqAmount) *
                                                     tmpDepAmount;
                        }
                    }
                }
                else
                {
                    if (totalAcqAmount)
                    {
                        prvDepreciationAmount = round(((AssetGroupTrans_IN::acquisitionAmount(_assetBook.AssetId,_assetBook.LastDepreciationDate,_assetBook.BookId))/ totalAcqAmount) *
                                                      abs(prvDepreciationAmount),1.0);
                    }
                }
            }
            else
            {
                prvDepreciationAmount = 0;
            }
        }
        //reduce the depreciated Amount for asset.
        if (prvDepreciationAmount && !_assetBook.LastDepreciationDate)
        {
            value = _assetBook.AcquisitionPrice - prvDepreciationAmount;
            lastDepreciationDate = _assetBook.LastDepreciationDate;
        }
        else
        {
            value = _assetBook.AcquisitionPrice;
        }

        AssetTableInterval deprIntervalLocal = AssetTableInterval::construct(_assetBook.depreciationProfile(), AssetBookTable::find(_assetBook.BookId).FiscalCalendar);

        //reduce the special depreciated Amount for asset.
        if (deprIntervalLocal.startOfPeriod(runDate) > _assetBook.DepreciationStartDate)
        {
            value += AssetTrans::amountMSTPerDateTranstype(_assetBook.AssetId,_assetBook.LastDepreciationDate,
                                                           _assetBook.BookId,
                                                           AssetTransType::BonusDepreciation);
        }

        // adjust the SaleAsset amount with the existing assets.
        if (adjustmentAmount && _assetBook.Status == AssetStatus::Open)
        {
            if (value <= adjustmentAmount - totalAdjustmentAmount)
            {
                amountToDepreciate = 0;
                totalAdjustmentAmount += value;
            }
            else
            {
                if ((adjustmentAmount - totalAdjustmentAmount) > 0)
                {
                    amountToDepreciate = value - (adjustmentAmount - totalAdjustmentAmount);
                    totalAdjustmentAmount = adjustmentAmount;
                }
                else
                {
                    amountToDepreciate = value;
                }
            }
        }
        else if (adjustmentAmountLoc && _assetBook.Status == AssetStatus::Open)
        {
            if (value <= adjustmentAmountLoc - totalAdjustmentAmountLoc)
            {
                amountToDepreciate = 0;
                totalAdjustmentAmountLoc += value;
            }
            else
            {
                if ((adjustmentAmountLoc - totalAdjustmentAmountLoc) > 0)
                {
                    amountToDepreciate = value - (adjustmentAmountLoc - totalAdjustmentAmountLoc);
                    totalAdjustmentAmountLoc = adjustmentAmountLoc;
                }
                else
                {
                    amountToDepreciate = value;
                }
            }
        }
        else if (value && _assetBook.Status == AssetStatus::Open)
        {
            amountToDepreciate = value;
        }

        if (_assetBook.Status == AssetStatus::Sold)
        {
            //Calculate depreciation for the sold asset, when there is loss, to the extent of loss Amount.
            amountToDepreciate = _assetBook.AcquisitionPrice - abs(AssetTrans::getAmountMSTAssetSale_IN(_assetBook));
            if (amountToDepreciate > 0 )
            {
                if (adjustmentAmount)
                {
                    if (amountToDepreciate <= adjustmentAmount - totalAdjustmentAmount)
                    {
                        totalAdjustmentAmount += amountToDepreciate;
                        amountToDepreciate = 0;
                    }
                    else
                    {
                        if ((adjustmentAmount - totalAdjustmentAmount) > 0)
                        {
                            amountToDepreciate = amountToDepreciate - (adjustmentAmount - totalAdjustmentAmount);
                            totalAdjustmentAmount = adjustmentAmount;
                        }
                    }
                }
                else if (adjustmentAmountLoc)
                {
                    if (amountToDepreciate <= adjustmentAmountLoc - totalAdjustmentAmountLoc)
                    {
                        totalAdjustmentAmountLoc += amountToDepreciate;
                        amountToDepreciate = 0;
                    }
                    else
                    {
                        if ((adjustmentAmountLoc - totalAdjustmentAmountLoc) > 0)
                        {
                            amountToDepreciate = amountToDepreciate - (adjustmentAmountLoc - totalAdjustmentAmountLoc);
                            totalAdjustmentAmountLoc = adjustmentAmountLoc;
                        }
                    }
                }
            }
        }

        afterAdjustment = true;

        return amountToDepreciate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDepreciationAmount_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the depreciation amount.
    /// </summary>
    /// <param name="_assetBook">
    /// The <c>AssetBook</c> buffer of the asset.
    /// </param>
    /// <returns>
    /// Returns the depreciation amount and the <c>AssetBook</c> buffer in a container.
    /// </returns>
    public container getDepreciationAmount_IN(AssetBook _assetBook)
    {
        AssetBook       assetBookOrig,
                        assetBookLocal;
        AssetAmount     amountToDepreciate;
        boolean         depreciation;

        assetBookOrig = _assetBook;
        if (_assetBook.Status == AssetStatus::NoAcquisition)
        {
            assetBookOrig = null;
        }
        amountToDepreciate = 0;

        AssetTableInterval deprIntervalLocal = AssetTableInterval::construct(_assetBook.depreciationProfile(), AssetBookTable::find(_assetBook.BookId).FiscalCalendar);
        assetBookLocal = this.getMaxAsset_IN(_assetBook);
        if (assetBookLocal)
        {
            assetAcquisitionDate    = _assetBook.AcquisitionDate;
            assetAcquisitionAmount  = _assetBook.AcquisitionPrice;
            depreciation = this.validateToDepreciation_IN(assetBookLocal);
            if (depreciation)
            {
                if (_assetBook.DepreciationStartDate <= runDate)
                {
                    amountToDepreciate = this.getDepreciateValue_IN(_assetBook,adjustmentAmount,writendownAmount);

                    //Adjust soldAssetAcquisitionPrice with the asset greater than 180 days. Since Sold assetamount is not considered for adjustment.
                    if (soldAssetAcqPriceForAdjustment != 0
                        && (AssetParameters::find().AssetSaleBasis_IN == AssetSaleBasis_IN::LIFO)
                        && ((runDate - _assetBook.DepreciationStartDate + 1) >= AssetParameters::find().DepreciationThreshold_IN))
                    {
                        amountToDepreciate += soldAssetAcqPriceForAdjustment;
                        soldAssetAcqPriceForAdjustment = 0;
                    }
                    if (amountToDepreciate == 0)
                    {
                        soldAssetAcqPriceForAdjustment = 0;
                    }
                }
                else
                {
                    amountToDepreciate = 0;
                }
            }
            else
            {
                if (_assetBook.AcquisitionDate <= assetBookLocal.DisposalDate)
                {
                    assetBookOrig = null;
                }
                else
                {
                    if (AssetParameters::find().DepreciationThreshold_IN < (deprIntervalLocal.findLastDayOfYear(runDate) - _assetBook.DepreciationStartDate + 1) )
                    {
                        amountToDepreciate = _assetBook.AcquisitionPrice + writendownAmount - adjustmentAmount ;
                    }
                    else
                    {
                        amountToDepreciate = _assetBook.AcquisitionPrice + writendownAmount - adjustmentAmountLoc ;
                    }
                }
            }
        }
        writendownAmount    = 0;
        adjustmentAmount    = 0;
        adjustmentAmountLoc = 0;
        adjustmentLastDepreciationDate = dateNull();

        return [assetBookOrig,amountToDepreciate];
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);

        if (this.parmBatchEnabled())
        {
            dialogFormRun = _dialog.formRun();

            AssetIProposalDepreciation assetIProposalDepreciation = dialogFormRun as AssetIProposalDepreciation;

            if (assetIProposalDepreciation)
            {
                assetIProposalDepreciation.setPostingLayerString(AssetPostingLayerXdsTmp::getStringByValue(postingLayer));
                assetIProposalDepreciation.setDepreciationToDate(runDate);
                assetIProposalDepreciation.setIsSumDepreciation(sumDepreciation);
                assetIProposalDepreciation.setEntitiesList(legalEntitiesSelected);
                assetIProposalDepreciation.setIsPostJournals(postJournals);
                assetIProposalDepreciation.setQueryAssetGroupId(assetGroupSelected);
                assetIProposalDepreciation.setQueryAssetId(assetAssetIdSelected);
                assetIProposalDepreciation.setQueryBookId(assetBookSelected);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            if (this.parmBatchEnabled())
            {
                AssetIProposalDepreciation assetIProposalDepreciation = dialogFormRun as AssetIProposalDepreciation;

                if (assetIProposalDepreciation)
                {
                    AssetPostingLayerString currentOperationsTaxString = assetIProposalDepreciation.getPostingLayerString();

                    if (!currentOperationsTaxString)
                    {
                        throw warning("@FixedAssets:FA_MessageError_PostingLayerCannotBeEmpty");
                    }

                    postingLayer = AssetPostingLayerXdsTmp::getValueByString(currentOperationsTaxString);

                    ledgerNameId = assetIProposalDepreciation.getJournalName();
                    ret = LedgerJournalName::checkExist(ledgerNameId);

                    if (ret)
                    {
                        ret = AssetProposal::isValidJournalNameAndPostingLayer(ledgerNameId, postingLayer);
                    }

                    if (LedgerParameters::isChineseVoucher_CN())
                    {
                        voucherType_CN = assetIProposalDepreciation.getChineseVoucher();
                    }

                    runDate = assetIProposalDepreciation.getDepreciationToDate();
                    sumDepreciation = assetIProposalDepreciation.getIsSumDepreciation();
                    legalEntitiesSelected = assetIProposalDepreciation.getEntitiesList();
                    postJournals = assetIProposalDepreciation.getIsPostJournals();
                    assetGroupSelected = assetIProposalDepreciation.getQueryAssetGroupId();
                    assetAssetIdSelected = assetIProposalDepreciation.getQueryAssetId();
                    assetBookSelected = assetIProposalDepreciation.getQueryBookId();
                }

                journalName = LedgerJournalName::find(ledgerNameId);
                this.updatePostingLayer(journalName.CurrentOperationsTax, RangeStatus::Hidden);
            }
            else
            {
                runDate = dialogDepDate.value();

                if (this.budgetJournal())
                {
                    assetDateFrom  = dialogDateFrom.value();
                }

                sumDepreciation = dialogSumDepreciation.value();

                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
                {
                    halfDepreciation = dialogHalfDepreciation.value();
                }

                if (isAssetDocumentEnabled)
                {
                    reductionEntryAllocation = dialogReductionEntryAllocation.value();
                }

                postJournals = false;
                legalEntitiesSelected = '';
                assetGroupSelected = '';
                assetAssetIdSelected = '';
                assetBookSelected = '';

                postingLayer = LedgerJournalTable::find(journalNum).CurrentOperationsTax;
            }

            if (postingLayer != CurrentOperationsTax::None)
            {
                ret = ret && this.checkDateIsValid(runDate);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxAsset_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the <c>Assetbook</c> with the maximum number of assets sold or scrapped.
    /// </summary>
    /// <param name="_assetBook">
    /// The <c>Assetbook</c> buffer of the asset.
    /// </param>
    /// <returns>
    /// Returns the <c>Assetbook</c> buffer with maximum assets sold or scrapped.
    /// </returns>
    public AssetBook getMaxAsset_IN(AssetBook  _assetBook)
    {
        int          counterLoc = 1,
                     counter = 1,
                     assetGroupCount;
        AssetBook    assetBookMax,
                     assetBookTmp;

        while select assetBookTmp
            where assetBookTmp.AssetGroup == _assetBook.AssetGroup
               && assetBookTmp.BookId     == _assetBook.BookId
               && (assetBookTmp.Status    == AssetStatus::Sold
               || assetBookTmp.Status     == AssetStatus::Scrapped)
        {
            soldAssets = conPoke(soldAssets,counter,assetBookTmp);
            assetGroupCount ++;
            counter ++;
        }
        if (soldAssets)
        {
            assetBookTmp = conPeek(soldAssets,counterLoc);
        }
        if (assetBookTmp.AssetGroup == _assetBook.AssetGroup)
        {
            assetBookMax = assetBookTmp;
            counterLoc ++;
        }

        while (assetGroupCount)
        {
            if (counterLoc - 1 < assetGroupCount)
            {
                assetBookTmp = conPeek(soldAssets,counterLoc);
                if (assetBookTmp.AssetGroup == _assetBook.AssetGroup)
                {
                    if (assetBookMax)
                    {
                        if (assetBookMax.DisposalDate < assetBookTmp.DisposalDate)
                        {
                            assetBookMax = assetBookTmp;
                        }
                    }
                    else
                    {
                        assetBookMax = assetBookTmp;
                    }
                }
                counterLoc ++;
            }
            if (counterLoc - 1 == assetGroupCount)
            {
                break;
            }
        }
        return assetBookMax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalWDValue_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the total write down value for an asset.
    /// </summary>
    /// <param name="_assetBook">
    /// The <c>Assetbook</c> buffer of the asset.
    /// </param>
    /// <returns>
    /// Total write down value amount.
    /// </returns>
    public AssetAmount getTotalWDValue_IN(AssetBook   _assetBook)
    {
        AssetAmount     value,prvDepreciationAmount,totalAcqAmount,writendownValue,tmpDepAmount;
        AssetBook       assetSearch;
        AssetTrans      assetTrans;
        int             counter = 1,counterLoc = 1;
        container       assetIdLoc;
        boolean         ok;
        AssetAmount     prvDepreciationAmountSold;

        AssetTableInterval deprIntervalLocal = AssetTableInterval::construct(_assetBook.depreciationProfile(), AssetBookTable::find(_assetBook.BookId).FiscalCalendar);

        ok = true;
        while select Status, AssetGroup, BookId, OrigAcquisitionDate_IN, DepreciationStartDate,
                     LastDepreciationDate, AssetId, AcquisitionPrice from assetSearch
            where assetSearch.Status                    == AssetStatus::Open
               && assetSearch.AssetGroup                == _assetBook.AssetGroup
               && assetSearch.BookId                    == _assetBook.BookId
               && assetSearch.OrigAcquisitionDate_IN    <= runDate
        {
            prvDepreciationAmount = -(AssetGroupTrans_IN::amountMSTPerDateTranstype(assetSearch.AssetGroup, _assetBook.DisposalDate, assetSearch.BookId, AssetTransType::Depreciation, assetSearch.AssetId) +
                                      AssetGroupTrans_IN::amountMSTPerDateTranstype(assetSearch.AssetGroup, _assetBook.DisposalDate, assetSearch.BookId, AssetTransType::DepreciationAdj, assetSearch.AssetId));
            if (prvDepreciationAmount > 0)
            {
                while select AssetGroup, BookId, TransDate, TransType, AssetId from assetTrans
                    where assetTrans.AssetGroup == assetSearch.AssetGroup
                       && assetTrans.BookId     == assetSearch.BookId
                       && assetTrans.TransDate  <= _assetBook.DisposalDate
                       && (assetTrans.TransType == AssetTransType::Acquisition
                       || assetTrans.TransType  == AssetTransType::AcquisitionAdj)
                {
                    if (AssetBook::find(assetTrans.AssetId,assetTrans.BookId).DepreciationStartDate < AssetBook::find(assetTrans.AssetId,assetTrans.BookId).LastDepreciationDate)
                    {
                        if (conFind(assetIdLoc,assetTrans.AssetId))
                        {
                            ok = false;
                        }
                        if (ok)
                        {
                            totalAcqAmount += AssetGroupTrans_IN::acquisitionAmount(assetTrans.AssetId,_assetBook.DisposalDate,assetTrans.BookId);
                            assetIdLoc = conPoke(assetIdLoc,counterLoc,assetTrans.AssetId);
                            counterLoc ++;
                        }
                    }
                }
                tmpDepAmount = totalAcqAmount * _assetBook.depreciationPercentage() / 100;
                if (prvDepreciationAmount != tmpDepAmount)
                {
                    if (assetSearch.DepreciationStartDate < assetSearch.LastDepreciationDate)
                    {
                        if ((assetSearch.LastDepreciationDate - assetSearch.DepreciationStartDate + 1) <180)
                        {
                            if (totalAcqAmount)
                            {
                                prvDepreciationAmount = ((AssetGroupTrans_IN::acquisitionAmount(assetSearch.AssetId,_assetBook.LastDepreciationDate,assetSearch.BookId))/ totalAcqAmount)
                                                          * tmpDepAmount * (AssetParameters::find().ThresholdPercentage_IN / 100);
                            }
                        }
                        else
                        {
                            if (totalAcqAmount)
                            {
                                prvDepreciationAmount = ((AssetGroupTrans_IN::acquisitionAmount(assetSearch.AssetId,_assetBook.LastDepreciationDate,assetSearch.BookId))/ totalAcqAmount) * tmpDepAmount;
                            }
                        }
                    }
                    else
                    {
                        prvDepreciationAmount = 0;
                    }
                }
                else
                {
                    if (totalAcqAmount)
                    {
                        prvDepreciationAmount = round(((AssetGroupTrans_IN::acquisitionAmount(assetSearch.AssetId,_assetBook.LastDepreciationDate,assetSearch.BookId))/ totalAcqAmount) * abs(prvDepreciationAmount),1.0);
                    }
                }
            }
            value = assetSearch.AcquisitionPrice - prvDepreciationAmount;

            wdValue         =  conPoke(wdValue,counter,value);
            assets          = conPoke(assets,counter,assetSearch.AssetId);
            writendownValue += value;
            totalAcqAmount  = 0;
            assetIdLoc      = conNull();
            counterLoc      = 1;
        }
        //get the depreciationAmount for sold asset.
        while select Status, AssetGroup, BookId, OrigAcquisitionDate_IN, DepreciationStartDate,
                    LastDepreciationDate, AssetId, AcquisitionPrice from assetSearch
            where assetSearch.Status                    == AssetStatus::Sold
                && assetSearch.AssetGroup               == _assetBook.AssetGroup
                && assetSearch.BookId                   == _assetBook.BookId
                && assetSearch.OrigAcquisitionDate_IN   <= runDate
        {
            if (assetSearch.DepreciationStartDate < assetSearch.LastDepreciationDate)
            {
                if ((assetSearch.LastDepreciationDate - assetSearch.DepreciationStartDate + 1) <180)
                {
                    prvDepreciationAmountSold = ((AssetGroupTrans_IN::acquisitionAmount(assetSearch.AssetId,_assetBook.LastDepreciationDate,assetSearch.BookId))/ _assetBook.depreciationPercentage())
                                                    * (AssetParameters::find().ThresholdPercentage_IN / 100);
                }
                else
                {
                    prvDepreciationAmountSold = ((AssetGroupTrans_IN::acquisitionAmount(assetSearch.AssetId,_assetBook.LastDepreciationDate,assetSearch.BookId))/ _assetBook.depreciationPercentage());
                }
            }
        }
        if (prvDepreciationAmountSold)
        {
            writendownValue += prvDepreciationAmountSold;
        }

        return writendownValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        Query               query = new Query(queryStr(assetproposal));
        QueryBuildRange     qr_Range;

        QueryBuildDataSource queryBuildDataSource;
        QueryBuildRange      rangeRecId;
        str                  qStr;

        super();

        isIsoFR = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoFR]);
        isIsoIN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
        isIsoJP = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]);

        isAssetDocumentEnabled = AssetDocumentUtility_JP::isAssetDocumentEnabled();
        if (isAssetDocumentEnabled)
        {
            reductionEntryAllocation = NoYes::Yes;
        }

        query.name("@FixedAssets:FA_QueryTitle_ValueModelDepreciation");
        depreciationIncomeTaxAct = AssetParameters::isDepreciationIncomeTaxActEnable_IN();

        if (depreciationIncomeTaxAct)
        {
            // set range
            queryBuildDataSource = query.dataSourceTable(tableNum(AssetBook));
            rangeRecId           = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(AssetBook, RecId));
            rangeRecId.status(RangeStatus::Hidden);

            // Enable range
            rangeRecId.enabled(true);

            qStr = strFmt('(%1 == %2) || (%3 == %4)', fieldStr(AssetBook,Depreciation), enum2int(NoYes::Yes), fieldStr(AssetBook, AssetGroupDepreciation_IN), enum2int(NoYes::Yes));
            rangeRecId.value(qStr);
        }
        else
        {
            rangeRecId = SysQuery::findOrCreateRange(query.dataSourceTable(tableNum(AssetBook)), fieldNum(AssetBook,Depreciation));
            rangeRecId.value(queryValue(NoYes::Yes));
            rangeRecId.status(RangeStatus::Locked);
        }

        queryRun = new QueryRun(query);
        this.updatePostingLayer(LedgerJournalTable::find(journalNum).CurrentOperationsTax, RangeStatus::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBundleReady</Name>
				<Source><![CDATA[
    public boolean isBundleReady(int _bookCount)
    {
        boolean isReady;

        isReady = ((_bookCount >= this.getMaxBooksInTaskBoundry() && !sumDepreciation)
                    || (_bookCount >= this.getSummarizedDepreciationBookLimit() && sumDepreciation));

        return isReady;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container package = [#CurrentVersion, #CurrentList, super()];

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]) && !(this is AssetProposalDepreciation_PL))
        {
            package = AssetProposalDepreciation_PL::pack_PL(assetDateFrom, runDate, sumDepreciation, NoYes::No, package);
        }

        return package;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postDerogatoryScrapValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Posts the scrap value as derogatory decrease.
    /// </summary>
    /// <param name="_assetBook">
    ///    A table buffer that represents a book of an asset.
    /// </param>
    /// <param name="_transDate">
    ///    A date for which the method will determine whether the scrap value transaction must be posted.
    /// </param>
    /// <returns>
    ///    true if a transaction must be created to represent derogatory scrap value; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method is only used for French derogatory depreciation and is called from the <c>run</c>
    ///    method.
    /// </remarks>
    private boolean postDerogatoryScrapValue(AssetBook _assetBook, AssetTransDate _transDate)
    {
        boolean                     retValue;
        AssetTableInterval          deprInterval;
        AssetBookTable              assetBookTable = AssetBookTable::find(_assetBook.BookId);

        AssetTransDate              endAssetDate;
        AssetTransDate              startAssetDate;
        int loop;

        // Determine the point of reference for search of the depreciation period.
        // If the depreciation never happend use the UsedFromDate from the Value Book setup,
        // otherwise, use the last date of depreciation.
        deprInterval = AssetTableInterval::construct(
            _assetBook.depreciationProfile(), assetBookTable.FiscalCalendar);
        if (_assetBook.LastDepreciationDate)
        {
            startAssetDate = _assetBook.LastDepreciationDate + 1;
        }
        else
        {
            startAssetDate = _assetBook.UsedFromDate;
        }

        // Determine the date of the last depreciation period and compare it with current period date.
        for (loop = 1; loop <= _assetBook.LifeTimeRest; loop++)
        {
            endAssetDate = deprInterval.endPeriod(startAssetDate);
            startAssetDate = endAssetDate + 1;
        }

        if (deprInterval.endPeriod(_transDate) == endAssetDate )
        {
            return true;
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTaxValueModel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method determines whether the derogatory tax value model must be depreciated.
    /// </summary>
    /// <param name="_assetMainBook">
    ///    An object that represents a main value model of an asset.
    /// </param>
    /// <param name="_assetTaxBook">
    ///    An object that represents a derogatory tax value model of an asset.
    /// </param>
    /// <param name="_primaryAssetTableMethod">
    ///    An object that represents primary depreciation method.
    /// </param>
    /// <param name="_secondaryAssetTableMethod">
    ///    An object that represents secondary depreciation method.
    /// </param>
    /// <returns>
    ///    true if the derogatory tax value model must be depreciated; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method is only used for French derogatory depreciation and is call from <c>run</c> method.
    /// </remarks>
    private boolean processTaxValueModel(
        AssetBook _assetMainBook,
        AssetBook _assetTaxBook,
        AssetTableMethod _primaryAssetTableMethod,
        AssetTableMethod _secondaryAssetTableMethod)
    {
        boolean retValue;

        if(_assetMainBook.AssetDerogatoryModel_FR && _assetTaxBook.depreciationAltProfile())
        {
            retValue = _primaryAssetTableMethod.next() && _secondaryAssetTableMethod.next();
        }
        else
        {
            retValue = _primaryAssetTableMethod.next();
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDerogatoryValueModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the value model is derogatory.
    /// </summary>
    /// <param name = "_assetBook">
    /// The fixed asset book.
    /// </param>
    /// <returns>
    /// true if the fixed asset book has derogatory value model; otherwise, false.
    /// </returns>
    protected boolean checkDerogatoryValueModel(AssetBook _assetBook)
    {
        return _assetBook.IsDerogatoryBook_FR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeVariablesForProposalRunExecution</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialization of extra variables in extensions.
    /// </summary>
    protected void initializeVariablesForProposalRunExecution()
    {
        fiscalCalendarPeriod = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeForAssetTableMethodPrimaryExecution</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialization of extra variables for primary method asset depreciation.
    /// </summary>
    /// <param name = "_assetTableMethodPrimary">An instance of AssetTableMethod.</param>
    protected void initializeForAssetTableMethodPrimaryExecution(AssetTableMethod _assetTableMethodPrimary)
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeParametersForCreateTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>AssetProposalDepreciationCreateTransParameters</c> class which holds the parameter list for asset depreciation transactions.
    /// </summary>
    /// <param name = "_amount">An amount for which a transaction will be created.</param>
    /// <param name = "_reportingCurrencyAmount">A reporting currency amount for which a transaction will be created.</param>
    /// <param name = "_assetBook">A table buffer that represents a book of an asset.</param>
    /// <param name = "_transDate">A date for which a transaction will be posted.</param>
    /// <param name = "_assetBudgetModelId">The asset budget model id.</param>
    /// <param name = "_period">Asset depreciation period.</param>
    /// <param name = "_consumptionQty"> Asset consumption quantity.</param>
    /// <param name = "_revaluationTrans">Asset revaluation transaction.</param>
    /// <param name = "_revaluationAmount">Asset revaluation amount.</param>
    /// <param name = "_custTransId">Customer transaction id.</param>
    /// <param name = "_firstTransDate"> First transaction date.</param>
    /// <param name = "_isProposalAcquisition">Flag for acquisition proposal.</param>
    /// <param name = "_isPriorYear">Flag for prior year setting.</param>
    /// <param name = "_assetDocumentType"> Asset document type.</param>
    /// <param name = "_assetDocumentEntryRecId">Asset document entry record id.</param>
    /// <param name = "_reserveJournals">List of reservation journals</param>
    /// <param name = "_prevLedgerJournalTrans">Previous ledger journal transaction record.</param>
    /// <returns>An instance of <c>AssetProposalDepreciationCreateTransParameters</c> class.</returns>
    protected  AssetProposalDepreciationCreateTransParameters initializeParametersForCreateTrans(
        AmountCur                       _amount,
        AssetAmountReportingCurrency    _reportingCurrencyAmount,
        AssetBook                       _assetBook,
        TransDate                       _transDate,
        AssetBudgetModelId              _assetBudgetModelId,
        AssetDepreciationTime           _period,
        AssetConsumptionQty             _consumptionQty,
        AssetRevaluationTrans           _revaluationTrans,
        AssetRevaluationAmount          _revaluationAmount,
        RecId                           _custTransId,
        TransDate                       _firstTransDate,
        boolean                         _isProposalAcquisition,
        boolean                         _isPriorYear,
        // <GJP>
        AssetDocumentType_JP           _assetDocumentType,
        AssetDocumentRecId_JP          _assetDocumentEntryRecId,
        List                           _reserveJournals,
        // </GJP>
        LedgerJournalTrans             _prevLedgerJournalTrans)
    {
        AssetProposalDepreciationCreateTransParameters assetProposalDepreciationCreateTransParameters = AssetProposalDepreciationCreateTransParameters::construct();

        assetProposalDepreciationCreateTransParameters.parmAmount(_amount);
        assetProposalDepreciationCreateTransParameters.parmReportingCurrencyAmount(_reportingCurrencyAmount);
        assetProposalDepreciationCreateTransParameters.parmAssetBook(_assetBook);
        assetProposalDepreciationCreateTransParameters.parmTransDate(_transDate);
        assetProposalDepreciationCreateTransParameters.parmPeriod(_period);
        assetProposalDepreciationCreateTransParameters.parmAssetBudgetModelID(_assetBudgetModelId);
        assetProposalDepreciationCreateTransParameters.parmConsumptionQty(_consumptionQty);
        assetProposalDepreciationCreateTransParameters.parmRevaluationTrans(_revaluationTrans);
        assetProposalDepreciationCreateTransParameters.parmRevaluationAmount(_revaluationAmount);
        assetProposalDepreciationCreateTransParameters.parmCustTransId(_custTransId);
        assetProposalDepreciationCreateTransParameters.parmFirstTransDate(_firstTransDate);
        assetProposalDepreciationCreateTransParameters.parmIsProposalAcquisition(_isProposalAcquisition);
        assetProposalDepreciationCreateTransParameters.parmIsPriorYear(_isPriorYear);
        assetProposalDepreciationCreateTransParameters.parmAssetDocumentType(_assetDocumentType);
        assetProposalDepreciationCreateTransParameters.parmAssetDocumentEntryRecId(_assetDocumentEntryRecId);
        assetProposalDepreciationCreateTransParameters.parmReserveJournals(_reserveJournals);
        assetProposalDepreciationCreateTransParameters.parmPrevLedgerJournalTrans(_prevLedgerJournalTrans);

        return assetProposalDepreciationCreateTransParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransListForPrimary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a transaction list for an asset journal specifically for asset depreciation transactions.
    /// </summary>
    /// <param name = "_amount">An amount for which a transaction will be created.</param>
    /// <param name = "_assetBook">A table buffer that represents a book of an asset.</param>
    /// <param name = "_transDate">A date for which a transaction will be posted.</param>
    /// <param name = "_reportingCurrencyAmount">A reporting currency amount for which a transaction will be created.</param>
    /// <param name = "_assetBudgetModelId">The asset budget model id.</param>
    /// <param name = "_period">Asset depreciation period.</param>
    /// <param name = "_consumptionQty"> Asset consumption quantity.</param>
    /// <param name = "_revaluationTrans">Asset revaluation transaction.</param>
    /// <param name = "_revaluationAmount">Asset revaluation amount.</param>
    /// <param name = "_custTransId">Customer transaction id.</param>
    /// <param name = "_firstTransDate"> First transaction date.</param>
    /// <param name = "_isProposalAcquisition">Flag for acquisition proposal.</param>
    /// <param name = "_isPriorYear">Flag for prior year setting.</param>
    /// <param name = "_assetDocumentType"> Asset document type.</param>
    /// <param name = "_assetDocumentEntryRecId">Asset document entry record id.</param>
    /// <param name = "_reserveJournals">List of reservation journals</param>
    /// <param name = "_prevLedgerJournalTrans">Previous ledger journal transaction record.</param>
    /// <returns>List of transaction parameters for asset depreciation transactions.</returns>
    protected List createTransListForPrimary(
        AmountCur                       _amount,
        AssetBook                       _assetBook,
        TransDate                       _transDate,
        AssetAmountReportingCurrency    _reportingCurrencyAmount,
        AssetBudgetModelId              _assetBudgetModelId = '',
        AssetDepreciationTime           _period = 0,
        AssetConsumptionQty             _consumptionQty  = 0,
        AssetRevaluationTrans           _revaluationTrans = false,
        AssetRevaluationAmount          _revaluationAmount = 0,
        RecId                           _custTransId = 0,
        TransDate                       _firstTransDate = dateNull(),
        boolean                         _isProposalAcquisition = false,
        boolean                         _isPriorYear = false,
        // <GJP>
        AssetDocumentType_JP            _assetDocumentType = AssetDocumentType_JP::None,
        AssetDocumentRecId_JP           _assetDocumentEntryRecId = 0,
        List                            _reserveJournals = null,
        // </GJP>
        LedgerJournalTrans              _prevLedgerJournalTrans = null)

    {
        return this.createTransList(_amount,
                            _assetBook,
                            _transDate,
                            _assetBudgetModelId,
                            _period,
                            _reportingCurrencyAmount,
                            _consumptionQty,
                            _revaluationTrans,
                            _revaluationAmount,
                            _custTransId,
                            _firstTransDate,
                            _isProposalAcquisition,
                            _isPriorYear,
                            _assetDocumentType,
                            _assetDocumentEntryRecId,
                            _reserveJournals,
                            _prevLedgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransListForSummarizedDepLastPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a transaction list for an asset journal specifically for summarized asset depreciation transactions for last period.
    /// </summary>
    /// <param name = "_amount">An amount for which a transaction will be created.</param>
    /// <param name = "_assetBook">A table buffer that represents a book of an asset.</param>
    /// <param name = "_transDate">A date for which a transaction will be posted.</param>
    /// <param name = "_reportingCurrencyAmount">A reporting currency amount for which a transaction will be created.</param>
    /// <param name = "_assetBudgetModelId">The asset budget model id.</param>
    /// <param name = "_period">Asset depreciation period.</param>
    /// <param name = "_consumptionQty"> Asset consumption quantity.</param>
    /// <param name = "_revaluationTrans">Asset revaluation transaction.</param>
    /// <param name = "_revaluationAmount">Asset revaluation amount.</param>
    /// <param name = "_custTransId">Customer transaction id.</param>
    /// <param name = "_firstTransDate"> First transaction date.</param>
    /// <param name = "_isProposalAcquisition">Flag for acquisition proposal.</param>
    /// <param name = "_isPriorYear">Flag for prior year setting.</param>
    /// <param name = "_assetDocumentType"> Asset document type.</param>
    /// <param name = "_assetDocumentEntryRecId">Asset document entry record id.</param>
    /// <param name = "_reserveJournals">List of reservation journals</param>
    /// <param name = "_prevLedgerJournalTrans">Previous ledger journal transaction record.</param>
    /// <returns>List of transaction parameters for summarized asset depreciation transactions for last period.</returns>
    protected List createTransListForSummarizedDepLastPeriod(
        AmountCur                       _amount,
        AssetBook                       _assetBook,
        TransDate                       _transDate,
        AssetAmountReportingCurrency    _reportingCurrencyAmount,
        AssetBudgetModelId              _assetBudgetModelId = '',
        AssetDepreciationTime           _period = 0,
        AssetConsumptionQty             _consumptionQty  = 0,
        AssetRevaluationTrans           _revaluationTrans = false,
        AssetRevaluationAmount          _revaluationAmount = 0,
        RecId                           _custTransId = 0,
        TransDate                       _firstTransDate = dateNull(),
        boolean                         _isProposalAcquisition = false,
        boolean                         _isPriorYear = false,
        // <GJP>
        AssetDocumentType_JP            _assetDocumentType = AssetDocumentType_JP::None,
        AssetDocumentRecId_JP           _assetDocumentEntryRecId = 0,
        List                            _reserveJournals = null,
        // </GJP>
        LedgerJournalTrans              _prevLedgerJournalTrans = null)

    {
        return this.createTransList(_amount,
                            _assetBook,
                            _transDate,
                            _assetBudgetModelId,
                            _period,
                            _reportingCurrencyAmount,
                            _consumptionQty,
                            _revaluationTrans,
                            _revaluationAmount,
                            _custTransId,
                            _firstTransDate,
                            _isProposalAcquisition,
                            _isPriorYear,
                            _assetDocumentType,
                            _assetDocumentEntryRecId,
                            _reserveJournals,
                            _prevLedgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransListForDualDepreciationSummarizedDepLastPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a transaction list for an asset journal specifically for summarized asset depreciation transactions with dual depreciation.
    /// </summary>
    /// <param name = "_amount">An amount for which a transaction will be created.</param>
    /// <param name = "_assetBook">A table buffer that represents a book of an asset.</param>
    /// <param name = "_transDate">A date for which a transaction will be posted.</param>
    /// <param name = "_reportingCurrencyAmount">A reporting currency amount for which a transaction will be created.</param>
    /// <param name = "_assetBudgetModelId">The asset budget model id.</param>
    /// <param name = "_period">Asset depreciation period.</param>
    /// <param name = "_consumptionQty"> Asset consumption quantity.</param>
    /// <param name = "_revaluationTrans">Asset revaluation transaction.</param>
    /// <param name = "_revaluationAmount">Asset revaluation amount.</param>
    /// <param name = "_custTransId">Customer transaction id.</param>
    /// <param name = "_firstTransDate"> First transaction date.</param>
    /// <param name = "_isProposalAcquisition">Flag for acquisition proposal.</param>
    /// <param name = "_isPriorYear">Flag for prior year setting.</param>
    /// <param name = "_assetDocumentType"> Asset document type.</param>
    /// <param name = "_assetDocumentEntryRecId">Asset document entry record id.</param>
    /// <param name = "_reserveJournals">List of reservation journals</param>
    /// <param name = "_prevLedgerJournalTrans">Previous ledger journal transaction record.</param>
    /// <returns>List of transaction parameters for summarized asset depreciation transactions with dual depreciation.</returns>
    protected List createTransListForDualDepreciationSummarizedDepLastPeriod(
        AmountCur                       _amount,
        AssetBook                       _assetBook,
        TransDate                       _transDate,
        AssetAmountReportingCurrency    _reportingCurrencyAmount,
        AssetBudgetModelId              _assetBudgetModelId = '',
        AssetDepreciationTime           _period = 0,
        AssetConsumptionQty             _consumptionQty  = 0,
        AssetRevaluationTrans           _revaluationTrans = false,
        AssetRevaluationAmount          _revaluationAmount = 0,
        RecId                           _custTransId = 0,
        TransDate                       _firstTransDate = dateNull(),
        boolean                         _isProposalAcquisition = false,
        boolean                         _isPriorYear = false,
        // <GJP>
        AssetDocumentType_JP            _assetDocumentType = AssetDocumentType_JP::None,
        AssetDocumentRecId_JP           _assetDocumentEntryRecId = 0,
        List                            _reserveJournals = null,
        // </GJP>
        LedgerJournalTrans              _prevLedgerJournalTrans = null)

    {
        return this.createTransList(_amount,
                            _assetBook,
                            _transDate,
                            _assetBudgetModelId,
                            _period,
                            _reportingCurrencyAmount,
                            _consumptionQty,
                            _revaluationTrans,
                            _revaluationAmount,
                            _custTransId,
                            _firstTransDate,
                            _isProposalAcquisition,
                            _isPriorYear,
                            _assetDocumentType,
                            _assetDocumentEntryRecId,
                            _reserveJournals,
                            _prevLedgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransListForDualDepreciationSummarizedDerogatory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a transaction list for an asset journal specifically for summarized asset derogatory depreciation transactions with dual depreciation.
    /// </summary>
    /// <param name = "_amount">An amount for which a transaction will be created.</param>
    /// <param name = "_assetBook">A table buffer that represents a book of an asset.</param>
    /// <param name = "_transDate">A date for which a transaction will be posted.</param>
    /// <param name = "_reportingCurrencyAmount">A reporting currency amount for which a transaction will be created.</param>
    /// <param name = "_assetBudgetModelId">The asset budget model id.</param>
    /// <param name = "_period">Asset depreciation period.</param>
    /// <param name = "_consumptionQty"> Asset consumption quantity.</param>
    /// <param name = "_revaluationTrans">Asset revaluation transaction.</param>
    /// <param name = "_revaluationAmount">Asset revaluation amount.</param>
    /// <param name = "_custTransId">Customer transaction id.</param>
    /// <param name = "_firstTransDate"> First transaction date.</param>
    /// <param name = "_isProposalAcquisition">Flag for acquisition proposal.</param>
    /// <param name = "_isPriorYear">Flag for prior year setting.</param>
    /// <param name = "_assetDocumentType"> Asset document type.</param>
    /// <param name = "_assetDocumentEntryRecId">Asset document entry record id.</param>
    /// <param name = "_reserveJournals">List of reservation journals</param>
    /// <param name = "_prevLedgerJournalTrans">Previous ledger journal transaction record.</param>
    /// <returns>List of transaction parameters for summarized asset derogatory depreciation transactions with dual depreciation.</returns>
    protected List createTransListForDualDepreciationSummarizedDerogatory(
        AmountCur                       _amount,
        AssetBook                       _assetBook,
        TransDate                       _transDate,
        AssetAmountReportingCurrency    _reportingCurrencyAmount,
        AssetBudgetModelId              _assetBudgetModelId = '',
        AssetDepreciationTime           _period = 0,
        AssetConsumptionQty             _consumptionQty  = 0,
        AssetRevaluationTrans           _revaluationTrans = false,
        AssetRevaluationAmount          _revaluationAmount = 0,
        RecId                           _custTransId = 0,
        TransDate                       _firstTransDate = dateNull(),
        boolean                         _isProposalAcquisition = false,
        boolean                         _isPriorYear = false,
        // <GJP>
        AssetDocumentType_JP            _assetDocumentType = AssetDocumentType_JP::None,
        AssetDocumentRecId_JP           _assetDocumentEntryRecId = 0,
        List                            _reserveJournals = null,
        // </GJP>
        LedgerJournalTrans              _prevLedgerJournalTrans = null)

    {
        return this.createTransList(_amount,
                            _assetBook,
                            _transDate,
                            _assetBudgetModelId,
                            _period,
                            _reportingCurrencyAmount,
                            _consumptionQty,
                            _revaluationTrans,
                            _revaluationAmount,
                            _custTransId,
                            _firstTransDate,
                            _isProposalAcquisition,
                            _isPriorYear,
                            _assetDocumentType,
                            _assetDocumentEntryRecId,
                            _reserveJournals,
                            _prevLedgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransListForReductionEntryAllocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a transaction list for an asset journal specifically for asset depreciation transactions for reduction entry allocation.
    /// </summary>
    /// <param name = "_amount">An amount for which a transaction will be created.</param>
    /// <param name = "_assetBook">A table buffer that represents a book of an asset.</param>
    /// <param name = "_transDate">A date for which a transaction will be posted.</param>
    /// <param name = "_reportingCurrencyAmount">A reporting currency amount for which a transaction will be created.</param>
    /// <param name = "_assetBudgetModelId">The asset budget model id.</param>
    /// <param name = "_period">Asset depreciation period.</param>
    /// <param name = "_consumptionQty"> Asset consumption quantity.</param>
    /// <param name = "_revaluationTrans">Asset revaluation transaction.</param>
    /// <param name = "_revaluationAmount">Asset revaluation amount.</param>
    /// <param name = "_custTransId">Customer transaction id.</param>
    /// <param name = "_firstTransDate"> First transaction date.</param>
    /// <param name = "_isProposalAcquisition">Flag for acquisition proposal.</param>
    /// <param name = "_isPriorYear">Flag for prior year setting.</param>
    /// <param name = "_assetDocumentType"> Asset document type.</param>
    /// <param name = "_assetDocumentEntryRecId">Asset document entry record id.</param>
    /// <param name = "_reserveJournals">List of reservation journals</param>
    /// <param name = "_prevLedgerJournalTrans">Previous ledger journal transaction record.</param>
    /// <returns>List of transaction parameters for asset depreciation transactions for reduction entry allocation.</returns>
    protected List createTransListForReductionEntryAllocation(
        AmountCur                       _amount,
        AssetBook                       _assetBook,
        TransDate                       _transDate,
        AssetAmountReportingCurrency    _reportingCurrencyAmount,
        AssetBudgetModelId              _assetBudgetModelId = '',
        AssetDepreciationTime           _period = 0,
        AssetConsumptionQty             _consumptionQty  = 0,
        AssetRevaluationTrans           _revaluationTrans = false,
        AssetRevaluationAmount          _revaluationAmount = 0,
        RecId                           _custTransId = 0,
        TransDate                       _firstTransDate = dateNull(),
        boolean                         _isProposalAcquisition = false,
        boolean                         _isPriorYear = false,
        // <GJP>
        AssetDocumentType_JP            _assetDocumentType = AssetDocumentType_JP::None,
        AssetDocumentRecId_JP           _assetDocumentEntryRecId = 0,
        List                            _reserveJournals = null,
        // </GJP>
        LedgerJournalTrans              _prevLedgerJournalTrans = null)

    {
        return this.createTransList(_amount,
                            _assetBook,
                            _transDate,
                            _assetBudgetModelId,
                            _period,
                            _reportingCurrencyAmount,
                            _consumptionQty,
                            _revaluationTrans,
                            _revaluationAmount,
                            _custTransId,
                            _firstTransDate,
                            _isProposalAcquisition,
                            _isPriorYear,
                            _assetDocumentType,
                            _assetDocumentEntryRecId,
                            _reserveJournals,
                            _prevLedgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransListForDualDepreciationIncomeTaxAct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a transaction list for an asset journal specifically for income tax asset depreciation transactions with dual depreciation.
    /// </summary>
    /// <param name = "_amount">An amount for which a transaction will be created.</param>
    /// <param name = "_assetBook">A table buffer that represents a book of an asset.</param>
    /// <param name = "_transDate">A date for which a transaction will be posted.</param>
    /// <param name = "_reportingCurrencyAmount">A reporting currency amount for which a transaction will be created.</param>
    /// <param name = "_assetBudgetModelId">The asset budget model id.</param>
    /// <param name = "_period">Asset depreciation period.</param>
    /// <param name = "_consumptionQty"> Asset consumption quantity.</param>
    /// <param name = "_revaluationTrans">Asset revaluation transaction.</param>
    /// <param name = "_revaluationAmount">Asset revaluation amount.</param>
    /// <param name = "_custTransId">Customer transaction id.</param>
    /// <param name = "_firstTransDate"> First transaction date.</param>
    /// <param name = "_isProposalAcquisition">Flag for acquisition proposal.</param>
    /// <param name = "_isPriorYear">Flag for prior year setting.</param>
    /// <param name = "_assetDocumentType"> Asset document type.</param>
    /// <param name = "_assetDocumentEntryRecId">Asset document entry record id.</param>
    /// <param name = "_reserveJournals">List of reservation journals</param>
    /// <param name = "_prevLedgerJournalTrans">Previous ledger journal transaction record.</param>
    /// <returns>List of transaction parameters for income tax asset depreciation transactions with dual depreciation.</returns>
    protected List createTransListForDualDepreciationIncomeTaxAct(
        AmountCur                       _amount,
        AssetBook                       _assetBook,
        TransDate                       _transDate,
        AssetAmountReportingCurrency    _reportingCurrencyAmount,
        AssetBudgetModelId              _assetBudgetModelId = '',
        AssetDepreciationTime           _period = 0,
        AssetConsumptionQty             _consumptionQty  = 0,
        AssetRevaluationTrans           _revaluationTrans = false,
        AssetRevaluationAmount          _revaluationAmount = 0,
        RecId                           _custTransId = 0,
        TransDate                       _firstTransDate = dateNull(),
        boolean                         _isProposalAcquisition = false,
        boolean                         _isPriorYear = false,
        // <GJP>
        AssetDocumentType_JP            _assetDocumentType = AssetDocumentType_JP::None,
        AssetDocumentRecId_JP           _assetDocumentEntryRecId = 0,
        List                            _reserveJournals = null,
        // </GJP>
        LedgerJournalTrans              _prevLedgerJournalTrans = null)

    {
        return this.createTransList(_amount,
                            _assetBook,
                            _transDate,
                            _assetBudgetModelId,
                            _period,
                            _reportingCurrencyAmount,
                            _consumptionQty,
                            _revaluationTrans,
                            _revaluationAmount,
                            _custTransId,
                            _firstTransDate,
                            _isProposalAcquisition,
                            _isPriorYear,
                            _assetDocumentType,
                            _assetDocumentEntryRecId,
                            _reserveJournals,
                            _prevLedgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransListForMonoDepreciationIncomeTaxAct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a transaction list for an asset journal specifically for income tax asset depreciation transactions with mono depreciation.
    /// </summary>
    /// <param name = "_amount">An amount for which a transaction will be created.</param>
    /// <param name = "_assetBook">A table buffer that represents a book of an asset.</param>
    /// <param name = "_transDate">A date for which a transaction will be posted.</param>
    /// <param name = "_reportingCurrencyAmount">A reporting currency amount for which a transaction will be created.</param>
    /// <param name = "_assetBudgetModelId">The asset budget model id.</param>
    /// <param name = "_period">Asset depreciation period.</param>
    /// <param name = "_consumptionQty"> Asset consumption quantity.</param>
    /// <param name = "_revaluationTrans">Asset revaluation transaction.</param>
    /// <param name = "_revaluationAmount">Asset revaluation amount.</param>
    /// <param name = "_custTransId">Customer transaction id.</param>
    /// <param name = "_firstTransDate"> First transaction date.</param>
    /// <param name = "_isProposalAcquisition">Flag for acquisition proposal.</param>
    /// <param name = "_isPriorYear">Flag for prior year setting.</param>
    /// <param name = "_assetDocumentType"> Asset document type.</param>
    /// <param name = "_assetDocumentEntryRecId">Asset document entry record id.</param>
    /// <param name = "_reserveJournals">List of reservation journals</param>
    /// <param name = "_prevLedgerJournalTrans">Previous ledger journal transaction record.</param>
    /// <returns>List of transaction parameters for income tax asset depreciation transactions with mono depreciation.</returns>
    protected List createTransListForMonoDepreciationIncomeTaxAct(
        AmountCur                       _amount,
        AssetBook                       _assetBook,
        TransDate                       _transDate,
        AssetAmountReportingCurrency    _reportingCurrencyAmount,
        AssetBudgetModelId              _assetBudgetModelId = '',
        AssetDepreciationTime           _period = 0,
        AssetConsumptionQty             _consumptionQty  = 0,
        AssetRevaluationTrans           _revaluationTrans = false,
        AssetRevaluationAmount          _revaluationAmount = 0,
        RecId                           _custTransId = 0,
        TransDate                       _firstTransDate = dateNull(),
        boolean                         _isProposalAcquisition = false,
        boolean                         _isPriorYear = false,
        // <GJP>
        AssetDocumentType_JP            _assetDocumentType = AssetDocumentType_JP::None,
        AssetDocumentRecId_JP           _assetDocumentEntryRecId = 0,
        List                            _reserveJournals = null,
        // </GJP>
        LedgerJournalTrans              _prevLedgerJournalTrans = null)

    {
        return this.createTransList(_amount,
                            _assetBook,
                            _transDate,
                            _assetBudgetModelId,
                            _period,
                            _reportingCurrencyAmount,
                            _consumptionQty,
                            _revaluationTrans,
                            _revaluationAmount,
                            _custTransId,
                            _firstTransDate,
                            _isProposalAcquisition,
                            _isPriorYear,
                            _assetDocumentType,
                            _assetDocumentEntryRecId,
                            _reserveJournals,
                            _prevLedgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransListForDualDepreciationPrimary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a transaction list for an asset journal specifically for asset depreciation transactions with dual depreciation.
    /// </summary>
    /// <param name = "_amount">An amount for which a transaction will be created.</param>
    /// <param name = "_assetBook">A table buffer that represents a book of an asset.</param>
    /// <param name = "_transDate">A date for which a transaction will be posted.</param>
    /// <param name = "_reportingCurrencyAmount">A reporting currency amount for which a transaction will be created.</param>
    /// <param name = "_assetBudgetModelId">The asset budget model id.</param>
    /// <param name = "_period">Asset depreciation period.</param>
    /// <param name = "_consumptionQty"> Asset consumption quantity.</param>
    /// <param name = "_revaluationTrans">Asset revaluation transaction.</param>
    /// <param name = "_revaluationAmount">Asset revaluation amount.</param>
    /// <param name = "_custTransId">Customer transaction id.</param>
    /// <param name = "_firstTransDate"> First transaction date.</param>
    /// <param name = "_isProposalAcquisition">Flag for acquisition proposal.</param>
    /// <param name = "_isPriorYear">Flag for prior year setting.</param>
    /// <param name = "_assetDocumentType"> Asset document type.</param>
    /// <param name = "_assetDocumentEntryRecId">Asset document entry record id.</param>
    /// <param name = "_reserveJournals">List of reservation journals</param>
    /// <param name = "_prevLedgerJournalTrans">Previous ledger journal transaction record.</param>
    /// <returns>List of transaction parameters for asset depreciation transactions with dual depreciation.</returns>
    protected List createTransListForDualDepreciationPrimary(
        AmountCur                       _amount,
        AssetBook                       _assetBook,
        TransDate                       _transDate,
        AssetAmountReportingCurrency    _reportingCurrencyAmount,
        AssetBudgetModelId              _assetBudgetModelId = '',
        AssetDepreciationTime           _period = 0,
        AssetConsumptionQty             _consumptionQty  = 0,
        AssetRevaluationTrans           _revaluationTrans = false,
        AssetRevaluationAmount          _revaluationAmount = 0,
        RecId                           _custTransId = 0,
        TransDate                       _firstTransDate = dateNull(),
        boolean                         _isProposalAcquisition = false,
        boolean                         _isPriorYear = false,
        // <GJP>
        AssetDocumentType_JP            _assetDocumentType = AssetDocumentType_JP::None,
        AssetDocumentRecId_JP           _assetDocumentEntryRecId = 0,
        List                            _reserveJournals = null,
        // </GJP>
        LedgerJournalTrans              _prevLedgerJournalTrans = null)

    {
        return this.createTransList(_amount,
                            _assetBook,
                            _transDate,
                            _assetBudgetModelId,
                            _period,
                            _reportingCurrencyAmount,
                            _consumptionQty,
                            _revaluationTrans,
                            _revaluationAmount,
                            _custTransId,
                            _firstTransDate,
                            _isProposalAcquisition,
                            _isPriorYear,
                            _assetDocumentType,
                            _assetDocumentEntryRecId,
                            _reserveJournals,
                            _prevLedgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransListForSummary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a transaction list for an asset journal specifically for summarized asset depreciation transactions.
    /// </summary>
    /// <param name = "_amount">An amount for which a transaction will be created.</param>
    /// <param name = "_assetBook">A table buffer that represents a book of an asset.</param>
    /// <param name = "_transDate">A date for which a transaction will be posted.</param>
    /// <param name = "_reportingCurrencyAmount">A reporting currency amount for which a transaction will be created.</param>
    /// <param name = "_assetBudgetModelId">The asset budget model id.</param>
    /// <param name = "_period">Asset depreciation period.</param>
    /// <param name = "_consumptionQty"> Asset consumption quantity.</param>
    /// <param name = "_revaluationTrans">Asset revaluation transaction.</param>
    /// <param name = "_revaluationAmount">Asset revaluation amount.</param>
    /// <param name = "_custTransId">Customer transaction id.</param>
    /// <param name = "_firstTransDate"> First transaction date.</param>
    /// <param name = "_isProposalAcquisition">Flag for acquisition proposal.</param>
    /// <param name = "_isPriorYear">Flag for prior year setting.</param>
    /// <param name = "_assetDocumentType"> Asset document type.</param>
    /// <param name = "_assetDocumentEntryRecId">Asset document entry record id.</param>
    /// <param name = "_reserveJournals">List of reservation journals</param>
    /// <param name = "_prevLedgerJournalTrans">Previous ledger journal transaction record.</param>
    /// <returns>List of transaction parameters for summarized asset depreciation transactions.</returns>
    protected List createTransListForSummary(
        AmountCur                       _amount,
        AssetBook                       _assetBook,
        TransDate                       _transDate,
        AssetAmountReportingCurrency    _reportingCurrencyAmount,
        AssetBudgetModelId              _assetBudgetModelId = '',
        AssetDepreciationTime           _period = 0,
        AssetConsumptionQty             _consumptionQty  = 0,
        AssetRevaluationTrans           _revaluationTrans = false,
        AssetRevaluationAmount          _revaluationAmount = 0,
        RecId                           _custTransId = 0,
        TransDate                       _firstTransDate = dateNull(),
        boolean                         _isProposalAcquisition = false,
        boolean                         _isPriorYear = false,
        // <GJP>
        AssetDocumentType_JP            _assetDocumentType = AssetDocumentType_JP::None,
        AssetDocumentRecId_JP           _assetDocumentEntryRecId = 0,
        List                            _reserveJournals = null,
        // </GJP>
        LedgerJournalTrans              _prevLedgerJournalTrans = null)

    {
        return this.createTransList(_amount,
                            _assetBook,
                            _transDate,
                            _assetBudgetModelId,
                            _period,
                            _reportingCurrencyAmount,
                            _consumptionQty,
                            _revaluationTrans,
                            _revaluationAmount,
                            _custTransId,
                            _firstTransDate,
                            _isProposalAcquisition,
                            _isPriorYear,
                            _assetDocumentType,
                            _assetDocumentEntryRecId,
                            _reserveJournals,
                            _prevLedgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a transaction list for an asset journal based on the different scenarios.
    /// </summary>
    /// <param name = "_amount">An amount for which a transaction will be created.</param>
    /// <param name = "_assetBook">A table buffer that represents a book of an asset.</param>
    /// <param name = "_transDate">A date for which a transaction will be posted.</param>
    /// <param name = "_assetBudgetModelId">The asset budget model id.</param>
    /// <param name = "_period">Asset depreciation period.</param>
    /// <param name = "_reportingCurrencyAmount">A reporting currency amount for which a transaction will be created.</param>
    /// <param name = "_consumptionQty"> Asset consumption quantity.</param>
    /// <param name = "_revaluationTrans">Asset revaluation transaction.</param>
    /// <param name = "_revaluationAmount">Asset revaluation amount.</param>
    /// <param name = "_custTransId">Customer transaction id.</param>
    /// <param name = "_firstTransDate"> First transaction date.</param>
    /// <param name = "_isProposalAcquisition">Flag for acquisition proposal.</param>
    /// <param name = "_isPriorYear">Flag for prior year setting.</param>
    /// <param name = "_assetDocumentType"> Asset document type.</param>
    /// <param name = "_assetDocumentEntryRecId">Asset document entry record id.</param>
    /// <param name = "_reserveJournals">List of reservation journals</param>
    /// <param name = "_prevLedgerJournalTrans">Previous ledger journal transaction record.</param>
    /// <returns>List of transaction parameters for asset depreciation transactions.</returns>
    protected List createTransList(
        AmountCur                       _amount,
        AssetBook                       _assetBook,
        TransDate                       _transDate,
        AssetBudgetModelId              _assetBudgetModelId,
        AssetDepreciationTime           _period,
        AssetAmountReportingCurrency    _reportingCurrencyAmount,
        AssetConsumptionQty             _consumptionQty,
        AssetRevaluationTrans           _revaluationTrans,
        AssetRevaluationAmount          _revaluationAmount,
        RecId                           _custTransId,
        TransDate                       _firstTransDate,
        boolean                         _isProposalAcquisition,
        boolean                         _isPriorYear,
        // <GJP>
        AssetDocumentType_JP            _assetDocumentType,
        AssetDocumentRecId_JP           _assetDocumentEntryRecId,
        List                            _reserveJournals,
        // </GJP>
        LedgerJournalTrans              _prevLedgerJournalTrans)
    {
        List transactionList = new List(Types::Class);

        AssetProposalDepreciationCreateTransParameters assetProposalDepreciationCreateTransParameters = this.initializeParametersForCreateTrans(_amount,
                                                                                                                                                _reportingCurrencyAmount,
                                                                                                                                                _assetBook,
                                                                                                                                                _transDate,
                                                                                                                                                _assetBudgetModelId,
                                                                                                                                                _period,
                                                                                                                                                _consumptionQty,
                                                                                                                                                _revaluationTrans,
                                                                                                                                                _revaluationAmount,
                                                                                                                                                _custTransId,
                                                                                                                                                _firstTransDate,
                                                                                                                                                _isProposalAcquisition,
                                                                                                                                                _isPriorYear,
                                                                                                                                                _assetDocumentType,
                                                                                                                                                _assetDocumentEntryRecId,
                                                                                                                                                _reserveJournals,
                                                                                                                                                _prevLedgerJournalTrans);
        
        transactionList.addEnd(assetProposalDepreciationCreateTransParameters);
        return transactionList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>consumeTransList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates asset journal transactions based on a transaction parameter list.
    /// </summary>
    /// <param name = "_transList">
    /// Transaction parameter list.
    /// </param>
    /// <param name = "_assetJournal">
    /// The asset journal.
    /// </param>
    private void consumeTransList(List _transList, AssetJournal _assetJournal)
    {
        ListEnumerator transListEnumerator =  _transList.getEnumerator();

        while (transListEnumerator.moveNext())
        {
            AssetProposalDepreciationCreateTransParameters assetProposalDepreciationCreateTransParameters;
            if (transListEnumerator.current())
            {
                assetProposalDepreciationCreateTransParameters = transListEnumerator.current();

                _assetJournal.parmReportingCurrencyAmount(assetProposalDepreciationCreateTransParameters.parmReportingCurrencyAmount());

                _assetJournal.createTrans(
                    assetProposalDepreciationCreateTransParameters.parmAmount(),
                    assetProposalDepreciationCreateTransParameters.parmAssetBook(),
                    assetProposalDepreciationCreateTransParameters.parmTransDate(),
                    assetProposalDepreciationCreateTransParameters.parmAssetBudgetModelID(),
                    assetProposalDepreciationCreateTransParameters.parmPeriod(),
                    assetProposalDepreciationCreateTransParameters.parmConsumptionQty(),
                    assetProposalDepreciationCreateTransParameters.parmRevaluationTrans(),
                    assetProposalDepreciationCreateTransParameters.parmRevaluationAmount(),
                    assetProposalDepreciationCreateTransParameters.parmCustTransId(),
                    assetProposalDepreciationCreateTransParameters.parmFirstTransDate(),
                    assetProposalDepreciationCreateTransParameters.parmIsProposalAcquisition(),
                    assetProposalDepreciationCreateTransParameters.parmIsPriorYear(),
                    assetProposalDepreciationCreateTransParameters.parmAssetDocumentType(),
                    assetProposalDepreciationCreateTransParameters.parmAssetDocumentEntryRecId(),
                    assetProposalDepreciationCreateTransParameters.parmReserveJournals(),
                    assetProposalDepreciationCreateTransParameters.parmPrevLedgerJournalTrans(),
                    assetProposalDepreciationCreateTransParameters.parmLedgerJournalTransTxt());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAssetJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>AssetJournal</c>.
    /// </summary>
    /// <returns>An instance of <c>AssetJournal</c>.</returns>
    protected AssetJournal createAssetJournal()
    {
        return new AssetJournal(journalNum, this.assetTransType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContextForRun</Name>
				<Source><![CDATA[
    private SysInstrumentationActivityContext getActivityContextForRun()
    {
        var logger = SysInstrumentationLoggerFactory::CreateLogger(classStr(AssetProposalDepreciation));
        var activity = SysInstrumentationActivity::construct(AssetInstrumentationConstants::AssetDepreciationProposalRun, AssetInstrumentationConstants::InstrumentationNameSpace);
        return logger.activityContextWithCustomProperties(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        AssetTableMethod        assetTableMethodPrimary;
        AssetTableMethod        assetTableMethodPrimaryReportingCurrency;
        AssetGroupTableMethod_IN assetTableMethodPrimaryGroup_IN;
        AssetGroupTableMethod_IN assetTableMethodSecondaryGroup_IN;
        AmountCur               amountCurPrimary;
        AssetAmountReportingCurrency amountPrimaryReportingCurrency;
        AssetTableInterval      assetTableInterval;

        AssetTableMethod        assetTableMethodSecondary;
        AssetTableMethod        assetTableMethodSecondaryReportingCurrency;
        AmountCur               amountCurSecondary;
        AssetAmountReportingCurrency amountSecondaryReportingCurrency;

        AssetJournal            assetJournal;
        AssetBook               assetBook;
        AssetBookTable          assetBookTable;
        AssetTransDate          transDate;

        TransDate               depDate;
        real                    depPeriod;
        AssetRevaluationAmount  revaluationAmount;
        AmountCur               amountCur;
        AssetAmountReportingCurrency amountReportingCurrency;

        AmountCur               sumAmountCur;
        AssetAmountReportingCurrency sumAmountReportingCurrency;
        real                    sumDepPeriod;
        AssetTransDate          firstTransDate;
        AssetTransDate          lastTransDate;
        Counter                 transactionCount = 0;
        boolean                 commitNeeded = false;
        boolean                 beginNeeded = true;
        Set calculatedDepreciationGroups_IN = new Set(Types::Container); // [AssetGroup, bookId, TransDate]
        Set calculatedDepreciationSecondaryGroups_IN = new Set(Types::Container);

        // Derogatory Depreciation variables
        AssetBook assetBookTax;
        AssetTableMethod assetTableMethodTaxModelPrimary;
        AssetTableMethod assetTableMethodTaxModelSecondary;
        AssetTableMethod assetTableMethodTaxModelPrimaryReporting;
        AssetTableMethod assetTableMethodTaxModelSecondaryReporting;

        AmountCur amountCurTaxModelValue;
        AmountCur amountCurDerogatory;
        AmountCur sumAmountCurTaxModelValue;
        AmountCur amountCurTaxModelValueReporting;
        AmountCur amountCurDerogatoryReporting;
        AmountCur sumAmountCurTaxModelValueReporting;

        AssetAmount             totalDepreciation;
        AssetAmountReportingCurrency totalDepreciationReportingCurrency;
        boolean                 checkFirstDeprection;
        real                    sumDepPeriodPriorYears;
        real                    sumDepPeriodCurrentYear;
        AssetAmount             priorYearsDepreciation;
        AssetAmountReportingCurrency priorYearsDepreciationReportingCurrency;
        container               priorYearAmount;
        container               priorYearAmountReportingCurrency;
        AssetTrans              assetTrans;
        TransDate               depreciationStartPostDate;
        AssetDepreciationProfile depreciationProfile;
        boolean                 isTrueUpDepreciationRequired;
        boolean                 isSumFirstPeriodsDepreciationNeeded;

        // <GIN>
        AssetBook               assetBookLocal;
        AssetAmount             amountToDepreciate;

        boolean                 depreciationParameters = AssetParameters::checkAssetParameters_IN();
        boolean                 depreciationCompaniesAct = AssetParameters::isDepreciationCompaniesActEnable_IN();
        AssetAmount             lossAmount;
        // </GIN>
        // <GCN><GJP>
        AssetAllocator_CN       assetAllocatorCN;
        boolean                 isCNorJPRegion = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCN, #isoJP]);
        boolean                 isIsoIT = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]);
        boolean                 allowToAllocate = false;
        // </GJP></GCN>

        // <GJP>

        AssetAmount             remainingDepreciableNetBookValue;
        AssetAmount             depreciationAcc;
        AssetAmountReportingCurrency remainingDepreciableNetBookValueReportingCurrency;
        AssetAmountReportingCurrency depreciationAccReportingCurrency;
        AssetTransDate          dateBeforeTrans;
        AssetBookTable          assetBookTableLocal;
        AssetTableMethod_JP     assetTableMethodJP;

        boolean                                isIdlePeriodActive;
        int                                    numOfIdlePeriods;
        AssetDepTableMethodInterface_JP        assetDepTableMethodInterface;

        AssetDocumentDepHelperForProposal_JP   assetDocumentDepHelperForProposal;
        // reduction entry
        AssetDepTableMethodInterface_JP       assetTableMethodInterface_JP;
        AssetDocumentDepHelperForProposal_JP  reductionEntryHelper;
        Map                                   reductionEntryBeginBalanceMap = new Map(Types::Date, Types::Real);
        Map                                   mapResult = new Map(Types::Int64, Types::Container);
        MapEnumerator                         mapEnumerator;
        Counter                               counter;
        Counter                               conLength;
        container                             rawContainer;
        AssetAmount                           allocationAmount;
        AssetTransDate                        allocationDate;
        AssetDocumentEntry_JP                 reductionEntryDocument;

        //ARO
        AssetAmount                           amountToOrdinaryDepreciate;
        AssetAmount                           ordinaryDepAmount;
        boolean                               isDepreciationDone;
        // </GJP>
        AssetBook                             prevAssetBook;
        LedgerJournalTrans                    prevLedgerJournalTrans;
        boolean                               isAssetFirstYearDepreciation;

        #EECountryRegionCodes

        int calculateDepreciationStartTime;
        int elapsedTimeForAssetTableMethodCalc;
        int elapsedTimeForAssetTableMethodReportingCurCalc;
        int elapsedTimeToConsumeTransListTime;
        int elapsedTimeForCatchUpDepreciation;
        int elapsedTimeForAllLocalFunc_JP;
        int elapsedTimeForAllocation_JP;
        int elapsedTimeForDocuments_JP;

        boolean isIdlePeriodActiveAny;
        boolean isAnyDepreciationMethod_CZ;
        boolean isAnyManualDepreciationMethod_IT;
        boolean isAnySumYearDigitsDeprMethod_CN;
        boolean isAnyAdditionalDeprMethod_JP;
        boolean isAnyEquallyDividedDeprMethod_JP;

        boolean hasSameAccoutingAndReportingCurrency;
        boolean executeReportingCurrencyLogic;

        if (TaxThaiGovCertificationFeatureChecker::isCountryRegionTH())
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceTH00009, funcName());
        }
        if (SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAll))
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEEU00001, funcName());
        }

        isFixedAssetBudgetJournal = this.budgetJournal();

        using (SysInstrumentationActivityContext activityContext = this.getActivityContextForRun())
        {
            // Running as batch process.
            if (this.parmBatchEnabled())
            {
                int startTime = activityContext.getElapsedMilliseconds();

                this.buildTasks();

                activityContext.addCustomProperty(AssetInstrumentationConstants::BuildTasks, int2Str(activityContext.getElapsedMilliseconds() - startTime));
                activityContext.addCustomProperty(AssetInstrumentationConstants::MaxBooksInDepreciationProposalJournal, int2Str(this.getMaxBooksInTaskBoundry()));
                activityContext.addCustomProperty(AssetInstrumentationConstants::MaxBooksInSumDepreciationProposalJournal, int2Str(this.getSummarizedDepreciationBookLimit()));
            }
            else
            {
                calculateDepreciationStartTime = activityContext.getElapsedMilliseconds();

                this.createAndLockJournalForBatchProcessing();

                assetJournal = this.createAssetJournal();
                if (isCNorJPRegion)
                {
                    assetAllocatorCN = new AssetAllocator_CN();
                    allowToAllocate = (!isFixedAssetBudgetJournal);
                }
                if (assetJournal && LedgerParameters::isChineseVoucher_CN())
                {
                    // Set the voucher type for asset journal with the value user selected.
                    assetJournal.parmVoucherType_CN(voucherType_CN);
                }
                // <GIN>
                if (depreciationIncomeTaxAct)
                {
                    queryRun.query().dataSourceTable(tableNum(AssetBook)).addRange(fieldNum(AssetBook, Status)).value(queryValue(AssetStatus::Open) +','+ queryValue(AssetStatus::Sold));
                    if (AssetParameters::find().AssetSaleBasis_IN == AssetSaleBasis_IN::LIFO)
                    {
                        queryRun.query().clearOrderBy();
                        queryRun.query().dataSourceTable(tableNum(AssetBook)).addOrderByField(fieldNum(AssetBook, AcquisitionDate), SortOrder::Descending);
                        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIN00120, funcName());
                    }
                }
                else
                {
                    // </GIN>
                    queryRun.query().dataSourceTable(tableNum(AssetBook)).addRange(fieldNum(AssetBook, Status)).value(queryValue(AssetStatus::Open));

                    if (isFixedAssetBudgetJournal)
                    {
                        queryRun.query().dataSourceTable(tableNum(AssetBook)).addRange(fieldNum(AssetBook, Status)).value(queryValue(AssetStatus::NoAcquisition));
                    }
                    // <GIN>
                }
                // </GIN>

                System.Exception exception;

                try
                {
                    hasSameAccoutingAndReportingCurrency = Ledger::reportingCurrency() == Ledger::accountingCurrency();
                    if (!hasSameAccoutingAndReportingCurrency)
                    {
                        executeReportingCurrencyLogic = Ledger::reportingCurrency() != '';
                    }

                    var useAssetTransTmpStaticCache = FeatureStateProvider::isFeatureEnabled(AssetProposalDepreciationAssetTransTmpCacheV2Feature::instance())
                        && !isFlightEnabled(FixedAssetsConstants::DisableAssetTransTmpCacheFlight);

                    while (queryRun.next())
                    {
                        // start a transaction
                        if (beginNeeded)
                        {
                            ttsbegin;
                            commitNeeded = true;
                            beginNeeded = false;
                        }

                        if (queryRun.changed(tableNum(AssetBook)))
                        {
                            assetBook = this.getAssetBook();

                            if (this.isBookCalculatedInPreviousRun(assetBook))
                            {
                                continue;
                            }                            
                            
                            if (!useAssetTransTmpStaticCache)
                            {
                                AssetCacheManager::removeCacheAssetTrans(assetBook.AssetId, assetBook.BookId);
                            }

                            using (AssetTransTmpStaticCache staticCache = new AssetTransTmpStaticCache(assetBook.AssetId, assetBook.BookId, useAssetTransTmpStaticCache))
                            {
                                AssetInstrumentationLogger::createLogger(AssetInstrumentationConstants::AssetPositiveDepreciation)
                                    .logPositiveDepreciationUsed(assetBook.IsPositiveDepreciation);

                                // <GIN>
                                if (depreciationIncomeTaxAct)
                                {
                                    lossAmount = abs(AssetTrans::getAmountMSTAssetSale_IN(assetBook)) - assetBook.AcquisitionPrice;
                                    if ((assetBook.Status == AssetStatus::Sold || assetBook.Status == AssetStatus::Scrapped)
                                    && (!assetBook.AssetGroupDepreciation_IN || lossAmount >= 0 || AssetBook::checkAllAssetsSold_IN(assetBook.AssetGroup, assetBook.BookId)) )
                                    {
                                        continue; //Continue depreciation calculation with sold status for depreciation only when there is loss.
                                    }
                                }
                                // </GIN>
                                depreciationProfile = assetBook.depreciationProfile();
                                select firstonly FiscalCalendar, RoundOffDepreciation from assetBookTable
                                    where assetBookTable.BookId == assetBook.BookId;

                                assetBookTableLocal = AssetBookTable::find(assetBook.BookId);

                                if (isIsoJP)
                                {
                                    int startTime_JP = activityContext.getElapsedMilliseconds();

                                    dateBeforeTrans = max(assetBook.LastDepreciationDate, assetBook.DepreciationStartDate-1);
                                    using (AssetProposalDepreciationContext context = new AssetProposalDepreciationContext())
                                    {
                                        Set transTypes = new Set(Types::AnyType);
                                        transTypes.add(AssetTransType::Depreciation);
                                        transTypes.add(AssetTransType::DepreciationAdj);
                                        context.visibleTransTypesSet = transTypes;
                                        depreciationAcc = -AssetDepTransMap_JP::calcAccumulatedDepAmountMst(assetBook, dateNull(), dateBeforeTrans);
                                    }
                                
                                    if (isAssetDocumentEnabled)
                                    {
                                        int startTimeDoc_JP = activityContext.getElapsedMilliseconds();

                                        assetDocumentDepHelperForProposal = AssetDocumentDepHelperForProposal_JP::construct(conNull(), assetBook);
                                        assetDocumentDepHelperForProposal.parmAssetBudgetModelId(assetBudgetModelId);
                                        assetDocumentDepHelperForProposal.parmRunDate(runDate);
                                        assetDocumentDepHelperForProposal.parmIgnoreDocumentTypes([AssetDocumentType_JP::AssetReductionEntry_Reserve, AssetDocumentType_JP::AssetAcceleratedDepreciation]);
                                        assetDocumentDepHelperForProposal.init();

                                        elapsedTimeForDocuments_JP += (activityContext.getElapsedMilliseconds() - startTimeDoc_JP);
                                    }
                                    elapsedTimeForAllLocalFunc_JP += (activityContext.getElapsedMilliseconds() - startTime_JP);
                                }

                                // <GEECZ>
                                if (halfDepreciation
                                && ((depreciationProfile.Method != AssetDepreciationMethod::Regular_CZ
                                && depreciationProfile.Method != AssetDepreciationMethod::Accelerated_CZ)
                                || depreciationProfile.Accrual != AssetAccrual::Yearly))
                                {
                                    continue;
                                }

                                switch (depreciationProfile.Method)
                                {
                                    case AssetDepreciationMethod::Regular_CZ:
                                    case AssetDepreciationMethod::Accelerated_CZ:
                                        isAnyDepreciationMethod_CZ = true;
                                        break;
                                    case AssetDepreciationMethod::Manual:
                                    if (isIsoIT)
                                        {
                                            isAnyManualDepreciationMethod_IT = true;
                                        }
                                        break;
                                    case AssetDepreciationMethod::SumYearDigits_CN:
                                        isAnySumYearDigitsDeprMethod_CN = true;
                                        break;
                                    case AssetDepreciationMethod::AdditionalDepreciation_JP:
                                    case AssetDepreciationMethod::SpecialDepreciation_JP:
                                        isAnyAdditionalDeprMethod_JP = true;
                                        break;
                                    case AssetDepreciationMethod::EquallyDivided_JP:
                                        isAnyEquallyDividedDeprMethod_JP = true;
                                        break;
                                }
                                // </GEECZ>

                                // getting NBV of disposed assets for IN group depreciation
                                if (depreciationIncomeTaxAct
                                && assetBook.AssetGroupDepreciation_IN
                                && assetBook.Depreciation == false)
                                {
                                    afterAdjustment = false;
                                    [assetBookLocal,amountToDepreciate] = this.getDepreciationAmount_IN(assetBook);
                                    if (assetBookLocal.RecId)
                                    {
                                        assetBook = assetBookLocal;
                                    }
                                    if (!amountToDepreciate && afterAdjustment)
                                    {
                                        continue;
                                    }
                                }

                                sumAmountCur = 0;
                                sumAmountReportingCurrency = 0;
                                sumDepPeriod = 0;
                                sumAmountCurTaxModelValue = 0;
                                sumAmountCurTaxModelValueReporting = 0;
                                firstTransDate = dateNull();
                                lastTransDate = dateNull();

                                this.initializeVariablesForProposalRunExecution();

                                assetTableInterval = AssetTableInterval::construct(depreciationProfile, assetBookTable.FiscalCalendar);

                                if (isIsoJP)
                                {
                                    executeReportingCurrencyLogic = this.executeReportingCurrencyLogic_JP(hasSameAccoutingAndReportingCurrency, assetBook);
                                }

                                if (assetBook.IsTrueUpDepreciation
                                || assetBook.AcquisitionDate > assetBook.UsedFromDate)
                                {
                                    assetTrans.TransDate = AssetTransTmp::getFirstTransactionDateByType(assetBook.AssetId, assetBook.BookId, AssetTransType::Acquisition);
                                    depreciationStartPostDate = assetTrans.TransDate ? assetTrans.TransDate : assetBook.AcquisitionDate;

                                    isTrueUpDepreciationRequired = assetBook.isTrueUpDepreciationRequired();

                                    if (assetBook.IsTrueUpDepreciation
                                    && assetTrans.TransDate
                                    && isTrueUpDepreciationRequired)
                                    {
                                        int startTimeCatchUpDepr = activityContext.getElapsedMilliseconds();

                                        priorYearAmount = AssetBook::calculateCatchupDepreciationPerCurrency(assetBook, runDate);
                                        if (executeReportingCurrencyLogic)
                                        {
                                            priorYearAmountReportingCurrency = AssetBook::calculateCatchupDepreciationPerCurrency(assetBook, runDate, true);
                                        }

                                        elapsedTimeForCatchUpDepreciation += (activityContext.getElapsedMilliseconds() - startTimeCatchUpDepr);
                                    }
                                }
                                else
                                {
                                    // Half year start and half year next can have acquisition date in a period different than
                                    // the Place of Service date.  The starting period is based on Place of Service date in these cases.
                                    if (assetBook.DepreciationConvention == AssetDepreciationConvention::HalfYearNext
                                    || assetBook.DepreciationConvention == AssetDepreciationConvention::HalfYearStart)
                                    {
                                        depreciationStartPostDate = AssetTableDepConv::getHalfYearDepreciationFirstPostDate(assetBook, assetTableInterval);
                                    }
                                }

                                // Do not process value model that are derogatory books.  These models are only used for French
                                // derogatory depreciation, and they have to be executed together with their accounting value model.
                                if (this.checkDerogatoryValueModel(assetBook))
                                {
                                    continue;
                                }

                                // If the asset has been set up for the derogatory depreciation determine its profile setup.
                                if (assetBook.AssetDerogatoryModel_FR)
                                {
                                    assetBookTax = AssetBook::find(assetBook.AssetId, assetBook.AssetDerogatoryModel_FR);
                                    if (assetBookTax)
                                    {
                                        if (assetBookTax.depreciationAltProfile())
                                        {
                                            assetTableMethodTaxModelPrimary = AssetTableMethod::construct(assetBookTax, runDate, assetBudgetModelId,true);
                                            assetTableMethodTaxModelSecondary = AssetTableMethod::construct(assetBookTax, runDate, assetBudgetModelId, true, true);
                                            if (executeReportingCurrencyLogic)
                                            {
                                                assetTableMethodTaxModelPrimaryReporting = AssetTableMethod::constructForReportingCurrency(assetBookTax, runDate, assetBudgetModelId,true);
                                                assetTableMethodTaxModelSecondaryReporting = AssetTableMethod::constructForReportingCurrency(assetBookTax, runDate, assetBudgetModelId, true, true);
                                            }
                                        }
                                        else
                                        {
                                            assetTableMethodTaxModelPrimary = AssetTableMethod::construct(assetBookTax, runDate, assetBudgetModelId);
                                            if (executeReportingCurrencyLogic)
                                            {
                                                assetTableMethodTaxModelPrimaryReporting = AssetTableMethod::constructForReportingCurrency(assetBookTax, runDate, assetBudgetModelId);
                                            }
                                        }
                                    }
                                }

                                if (AssetProposalDepreciationLeaveNetBookValueAtFlight::instance().isEnabled())
                                {
                                    if (this.isAssetBookFullyDepreciated(assetBook, lossAmount))
                                    {
                                        continue;
                                    }
                                }
                                else
                                {
                                    // Check if the value model is fully depreciated.
                                    if (!isFixedAssetBudgetJournal
                                && AssetSumCalc_Trans::newAssetYear(assetBook.AssetId, assetBook.BookId).netBookValue() == 0
                                // <GIN>
                                && (!depreciationIncomeTaxAct || (assetBook.Status == AssetStatus::Open || lossAmount >= 0))) //Skip Continue, when Asset is sold with loss.
                               // </GIN>
                                    {
                                        continue;
                                    }
                                }

                                // Mono depreciation.
                                if (!assetBook.depreciationAltProfile())
                                {
                                    if (depreciationProfile.Method != AssetDepreciationMethod::Consumption)
                                    {
                                        // <GIN>
                                        if (depreciationParameters)
                                        {
                                            if (assetBook)
                                            {
                                                if (assetBook.AssetGroupDepreciation_IN
                                                && !depreciationProfile.ShiftDepreciation_IN)
                                                {
                                                    assetTableMethodPrimaryGroup_IN = AssetGroupTableMethod_IN::construct(assetBookLocal, runDate, assetBudgetModelId);
                                                }
                                                else
                                                {
                                                    assetTableMethodPrimary = AssetTableMethod::construct(assetBook, runDate, assetBudgetModelId);

                                                    if (assetBook.currentOperationsTax() == CurrentOperationsTax::Current
                                                    && depreciationProfile.isShiftDepreciationMethod_IN()
                                                    && depreciationProfile.ShiftDepreciation_IN)
                                                    {
                                                        assetTableMethodPrimary.parmShiftDepreciation_IN(NoYes::Yes);
                                                        assetTableMethodPrimary.parmSingleShift_IN(NoYes::Yes);
                                                        assetTableMethodPrimary.parmDoubleShift_IN(NoYes::Yes);
                                                        assetTableMethodPrimary.parmTripleShift_IN(NoYes::Yes);
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            // </GIN>
                                            assetTableMethodPrimary = AssetTableMethod::construct(assetBook, runDate, assetBudgetModelId);
                                            // <GEECZ>
                                            assetTableMethodPrimary.parmHalfDepreciation_CZ(halfDepreciation);
                                            // </GEECZ>
                                            // <GIN>
                                        }
                                        // </GIN>

                                        if (executeReportingCurrencyLogic)
                                        {
                                            assetTableMethodPrimaryReportingCurrency = AssetTableMethod::constructForReportingCurrency(assetBook, runDate, assetBudgetModelId);
                                        }

                                        if (reductionEntryAllocation)
                                        {
                                            int startTimeDoc_JP = activityContext.getElapsedMilliseconds();

                                            reductionEntryHelper = AssetDocumentDepHelperForProposal_JP::construct(
                                            [AssetDocumentType_JP::AssetReductionEntry_Reserve],
                                            assetBook,
                                            AssetTable::find(assetBook.AssetId));
                                            reductionEntryDocument = AssetReductionEntryManager_JP::getAssetReductionEntryByAssetBook(
                                            assetBook.AssetId, assetBook.BookId, AssetDocumentType_JP::AssetReductionEntry_Reserve);

                                            elapsedTimeForDocuments_JP += (activityContext.getElapsedMilliseconds() - startTimeDoc_JP);
                                            elapsedTimeForAllLocalFunc_JP += (activityContext.getElapsedMilliseconds() - startTimeDoc_JP);
                                        }

                                        if ((assetBook.IsTrueUpDepreciation && isTrueUpDepreciationRequired)
                                        || assetBook.AcquisitionDate > assetBook.UsedFromDate)
                                        {
                                            if (assetTableMethodPrimary)
                                            {
                                                assetTableMethodPrimary.parmDepAmountPriorYears([conPeek(priorYearAmount, 3), conPeek(priorYearAmount, 4)]);
                                            }

                                            totalDepreciation = 0;
                                            checkFirstDeprection =  false;
                                            priorYearsDepreciation  = 0;
                                            sumDepPeriodPriorYears  = 0;
                                            sumDepPeriodCurrentYear = 0;
                                            assetJournal.parmAssetDepreciationPeriod(AssetDepreciationPeriod::construct());

                                            if (LedgerJournalTable::find(journalNum).ledgerJournalName().NewVoucher != NewVoucher::OneVoucher)
                                            {
                                                assetJournal.parmIsOneVoucher(false);
                                                assetJournal.parmVoucher('');
                                            }

                                            if (executeReportingCurrencyLogic)
                                            {
                                                assetTableMethodPrimaryReportingCurrency.parmDepAmountPriorYears([conPeek(priorYearAmountReportingCurrency, 3), conPeek(priorYearAmountReportingCurrency, 4)]);
                                                totalDepreciationReportingCurrency = 0;
                                                priorYearsDepreciationReportingCurrency  = 0;
                                            }
                                        }
                                        amountCurPrimary = 0;

                                        if (executeReportingCurrencyLogic)
                                        {
                                            amountPrimaryReportingCurrency = 0;
                                        }

                                        // <GIN>
                                        if (depreciationIncomeTaxAct)
                                        {
                                            if (assetTableMethodPrimary || assetTableMethodPrimaryGroup_IN)
                                            {
                                                // For each asset the first year Bonus depreciation should not be deducted from the amountToDepreciate. It is already handled in getDepreciationAmount_IN().
                                                isAssetFirstYearDepreciation = false;
                                                while (this.assetTableMethodNext_IN(
                                                assetBook,
                                                assetTableMethodPrimary,
                                                assetTableMethodPrimaryGroup_IN,
                                                calculatedDepreciationGroups_IN))
                                                {
                                                    int localStartTime = activityContext.getElapsedMilliseconds();

                                                    if (assetBook.AssetGroupDepreciation_IN)
                                                    {
                                                        amountCurPrimary += -this.calcGroupDepreciation_IN(
                                                        assetBook,
                                                        calculatedDepreciationGroups_IN,
                                                        assetTableMethodPrimary,
                                                        assetTableMethodPrimaryGroup_IN,
                                                        amountToDepreciate,
                                                        isAssetFirstYearDepreciation);

                                                    }
                                                    else
                                                    {
                                                        amountCurPrimary += -assetTableMethodPrimary.calc();
                                                    }

                                                    elapsedTimeForAssetTableMethodCalc += (activityContext.getElapsedMilliseconds() - localStartTime);

                                                    revaluationAmount = this.getRevaluationAmount_IN(assetBook, assetTableMethodPrimary, assetTableMethodPrimaryGroup_IN);

                                                    AssetTransDate depDate_IN = this.getDepDate_IN(assetBook, assetTableMethodPrimary, assetTableMethodPrimaryGroup_IN);
                                                    real depPeriod_IN = this.getDepPeriod_IN(assetBook, assetTableMethodPrimary, assetTableMethodPrimaryGroup_IN);

                                                    if (amountCurPrimary)
                                                    {
                                                        transDate = this.initFirstDate(depDate_IN,assetBook.AssetId);
                                                        if (!isFixedAssetBudgetJournal || (isFixedAssetBudgetJournal && transDate >= assetDateFrom))
                                                        {
                                                            if (sumDepreciation)
                                                            {
                                                                sumAmountCur += amountCurPrimary;
                                                                sumDepPeriod += depPeriod_IN;
                                                                if (!firstTransDate || firstTransDate > transDate)
                                                                {
                                                                    firstTransDate = transDate;
                                                                }
                                                                if (!lastTransDate || lastTransDate < transDate)
                                                                {
                                                                    lastTransDate = transDate;
                                                                }
                                                            }
                                                        }
                                                    }

                                                    // Save the primary value model generated voucher.
                                                    if (amountCurPrimary && !sumDepreciation )
                                                    {
                                                        List transactionListForMonoDepreciationIncomeTaxAct;
                                                    
                                                        if (!prevAssetBook || prevAssetBook.RecId != assetBook.RecId)
                                                        {
                                                            prevAssetBook.RecId = assetBook.RecId;
                                                            transactionListForMonoDepreciationIncomeTaxAct = this.createTransListForMonoDepreciationIncomeTaxAct(amountCurPrimary,
                                                            assetBook,
                                                            transDate,
                                                            0,
                                                            assetBudgetModelId,
                                                            depPeriod_IN,
                                                            0,
                                                            false,
                                                            revaluationAmount);

                                                            prevLedgerJournalTrans = assetJournal.parmLedgerJournalTrans();
                                                        }
                                                        else
                                                        {
                                                            transactionListForMonoDepreciationIncomeTaxAct = this.createTransListForMonoDepreciationIncomeTaxAct(amountCurPrimary,
                                                            assetBook,
                                                            transDate,
                                                            0,
                                                            assetBudgetModelId,
                                                            depPeriod_IN,
                                                            0,
                                                            false,
                                                            revaluationAmount,
                                                            0,
                                                            dateNull(),
                                                            false,
                                                            false,
                                                            AssetDocumentType_JP::None,
                                                            0,
                                                            null,
                                                            prevLedgerJournalTrans);
                                                        }

                                                        int localConsumeStartTime = activityContext.getElapsedMilliseconds();

                                                        this.consumeTransList(transactionListForMonoDepreciationIncomeTaxAct, assetJournal);

                                                        elapsedTimeToConsumeTransListTime += (activityContext.getElapsedMilliseconds() - localConsumeStartTime);

                                                        transactionCount++;
                                                    }
                                                    amountCurPrimary = 0;
                                                    // set the boolean value to true,indicates first year iteration is for asset done
                                                    isAssetFirstYearDepreciation = true;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            // </GIN>
                                            if (!isIsoJP)
                                            {
                                                // Determine already posted depreciation amounts.
                                                depreciationAcc = -assetTableMethodPrimary.getAccumulatedDepreciation();
                                            }

                                            if (executeReportingCurrencyLogic)
                                            {
                                                depreciationAccReportingCurrency = -assetTableMethodPrimaryReportingCurrency.getAccumulatedDepreciation();
                                            }

                                            AssetAmount derogatoryAdjustment;
                                            AssetAmount derogatoryAdjustmentReportingCurrency;

                                            while (assetTableMethodPrimary.next())
                                            {
                                                if (isIsoJP)
                                                {
                                                    int startTime_JP = activityContext.getElapsedMilliseconds();

                                                    isIdlePeriodActive = AssetIdlePeriodTable_JP::exists(assetBook.AssetId, assetBook.BookId, assetTableMethodPrimary.parmPeriodEnd());
                                                    numOfIdlePeriods   = AssetIdlePeriodAssign_JP::findNumOfIdlePeriods(assetBook.AssetId, assetBook.BookId, assetTableInterval, assetTableMethodPrimary.parmPeriodEnd());

                                                    if (isIdlePeriodActive)
                                                    {
                                                        isIdlePeriodActiveAny = true;
                                                    }

                                                    if (assetTableMethodPrimary is AssetDepTableMethodInterface_JP)
                                                    {
                                                        assetDepTableMethodInterface = assetTableMethodPrimary as Object;
                                                        assetDepTableMethodInterface.parmAssetIdlePeriods(numOfIdlePeriods);
                                                        assetDepTableMethodInterface.parmIsAssetIdlePeriodActive(isIdlePeriodActive);
                                                    }
                                                    elapsedTimeForAllLocalFunc_JP += (activityContext.getElapsedMilliseconds() - startTime_JP);
                                                }

                                                this.initializeForAssetTableMethodPrimaryExecution(assetTableMethodPrimary);
                                        
                                                int localStartTime = activityContext.getElapsedMilliseconds();

                                                amountCurPrimary += -assetTableMethodPrimary.calc();

                                                elapsedTimeForAssetTableMethodCalc += (activityContext.getElapsedMilliseconds() - localStartTime);

                                                revaluationAmount = assetTableMethodPrimary.revaluationAmount();
                                                amountToOrdinaryDepreciate  = assetTableMethodPrimary.parmAmountToDepreciate();

                                                if (amountCurPrimary)
                                                {
                                                    if (isIsoJP)
                                                    {
                                                        int startTime_JP = activityContext.getElapsedMilliseconds();

                                                        if (AssetDepreciationProfile::isDepMethod_JP(depreciationProfile.Method))
                                                        {
                                                            depDate             = assetTableMethodPrimary.depDate();
                                                            transDate           = this.initFirstDate(assetTableMethodPrimary.depDate(),assetBook.AssetId);
                                                            assetTableMethodJP  = assetTableMethodPrimary as AssetTableMethod_JP;
                                                            isDepreciationDone  = assetTableMethodJP.getIsDepreciationDone();
                                                            AssetAmount assetAcquisitionValue = assetTableMethodJP.getAssetAcquisitionValue();

                                                            remainingDepreciableNetBookValue = assetAcquisitionValue
                                                            + AssetTrans::amountMSTPerDateTranstype(assetBook.AssetId, transDate, assetBook.BookId, AssetTransType::ExtraordinaryDepreciation)
                                                            + depreciationAcc
                                                            - assetBookTableLocal.NetBookValueRest;

                                                            // remainingDepreciableNetBookValue and amountCurPrimary must be of different signs
                                                            if ((assetAcquisitionValue >= 0
                                                                && amountCurPrimary + remainingDepreciableNetBookValue < 0)
                                                            || (assetAcquisitionValue < 0
                                                                && amountCurPrimary + remainingDepreciableNetBookValue > 0))
                                                            {
                                                                amountCurPrimary = -remainingDepreciableNetBookValue;
                                                                isDepreciationDone = true;
                                                            }
                                                        }
                                                        depreciationAcc += amountCurPrimary;
                                                        elapsedTimeForAllLocalFunc_JP += (activityContext.getElapsedMilliseconds() - startTime_JP);
                                                    }
                                                    else
                                                    {
                                                        // Make sure that the depreciation amount is not more than amount to leave at the book or more than amount to allow to depreciate.
                                                        amountCurPrimary = this.getDepreciationAmountBasedOnNetBookValue(
                                                        depreciationProfile,
                                                        assetTableMethodPrimary,
                                                        assetBook.getNetBookValueRest(assetBookTable),
                                                        depreciationAcc,
                                                        amountCurPrimary);

                                                        AssetAmount remainingNetBookValue = assetTableMethodPrimary.parmAmountToDepreciate() + depreciationAcc - assetBook.getNetBookValueRest(assetBookTable);
                                                        amountCurPrimary = -1 * assetBookTable.getRoundedDepreciationAmountForLastPeriod(
                                                        -1 * amountCurPrimary,
                                                        remainingNetBookValue,
                                                        assetBook.getAcquisitionAmountSign());

                                                        depreciationAcc += amountCurPrimary;
                                                    }
                                                }

                                                if (executeReportingCurrencyLogic && assetTableMethodPrimaryReportingCurrency.next())
                                                {
                                                    int localCalcStartTime = activityContext.getElapsedMilliseconds();

                                                    amountPrimaryReportingCurrency += -assetTableMethodPrimaryReportingCurrency.calc();

                                                    if ((depreciationAcc + amountCurPrimary
                                                        == assetTableMethodPrimary.parmAmountToDepreciate() - assetBook.getNetBookValueRest(assetBookTable)
                                                    || assetTableMethodPrimary.parmIsEndOfAccountingDepreciation())
                                                    && !leaveNetBookValueReachedReportingCurrency)
                                                    {
                                                        while (assetTableMethodPrimaryReportingCurrency.next())
                                                        {
                                                            amountPrimaryReportingCurrency   += assetTableMethodPrimaryReportingCurrency.calc();
                                                        }
                                                    }

                                                    elapsedTimeForAssetTableMethodReportingCurCalc += (activityContext.getElapsedMilliseconds() - localCalcStartTime);
                                                    elapsedTimeForAssetTableMethodCalc += (activityContext.getElapsedMilliseconds() - localCalcStartTime);

                                                    if  (amountPrimaryReportingCurrency)
                                                    {
                                                        // Make sure that the depreciation amount is not more than amount to leave at the book or more than amount to allow to depreciate.
                                                        amountPrimaryReportingCurrency = this.getDepreciationAmountBasedOnNetBookValue(
                                                        depreciationProfile,
                                                        assetTableMethodPrimaryReportingCurrency,
                                                        assetBook.getNetBookValueRestReporting(assetBookTable),
                                                        depreciationAccReportingCurrency,
                                                        amountPrimaryReportingCurrency,
                                                        true);

                                                        AssetAmount remainingNetBookValueReportingCurrency =
                                                        assetTableMethodPrimaryReportingCurrency.parmAmountToDepreciate() + depreciationAccReportingCurrency - assetBook.getNetBookValueRestReporting(assetBookTable);
                                                        amountPrimaryReportingCurrency = -1 * assetBookTable.getRoundedDepreciationAmountForLastPeriodReporting(
                                                        -1 * amountPrimaryReportingCurrency,
                                                        remainingNetBookValueReportingCurrency,
                                                        assetBook.getAcquisitionAmountSign());

                                                        depreciationAccReportingCurrency += amountPrimaryReportingCurrency;
                                                    }
                                                }

                                                if (amountCurPrimary)
                                                {
                                                    depDate     = assetTableMethodPrimary.depDate();
                                                    depPeriod = assetTableMethodPrimary.depPeriod();
                                                    transDate = this.initFirstDate(assetTableMethodPrimary.depDate(),assetBook.AssetId);
                                                    if (!isFixedAssetBudgetJournal || (isFixedAssetBudgetJournal && transDate >= assetDateFrom))
                                                    {
                                                        if (sumDepreciation)
                                                        {
                                                            sumAmountCur += amountCurPrimary;

                                                            if (executeReportingCurrencyLogic)
                                                            {
                                                                sumAmountReportingCurrency += amountPrimaryReportingCurrency;
                                                            }

                                                            sumDepPeriod += assetTableMethodPrimary.depPeriod();
                                                            if (!firstTransDate || firstTransDate > transDate)
                                                            {
                                                                firstTransDate = transDate;
                                                            }
                                                            if (!lastTransDate || lastTransDate < transDate)
                                                            {
                                                                lastTransDate = transDate;
                                                            }
                                                        }
                                                    }
                                                }

                                                // If date of place in service is before the acquisition date, and the True-up is enabled,
                                                // depreciation before the acquisition date needs to be calculated for two amount:
                                                // one for the period prior years and one for the current year.
                                                if ((assetBook.IsTrueUpDepreciation && isTrueUpDepreciationRequired)
                                                || assetBook.AcquisitionDate > assetBook.UsedFromDate)
                                                {
                                                    if (assetTableInterval.endPeriod(transDate) < assetTableInterval.endPeriod(depreciationStartPostDate))
                                                    {
                                                        // sumarize the prior year and current year depreciation amount.
                                                        if (AssetBook::checkPriorYearDepreciation(assetBook, assetTableInterval, assetTableMethodPrimary.depDate()))
                                                        {
                                                            if (!assetJournal.parmAssetDepreciationPeriod().isPeriodDefined())
                                                            {
                                                                assetJournal.parmAssetDepreciationPeriod(AssetBook::getAssetDepreciationPeriod(assetBook, assetTableInterval, assetTableMethodPrimary.depDate()));
                                                            }

                                                            priorYearsDepreciation += amountCurPrimary;

                                                            if (executeReportingCurrencyLogic)
                                                            {
                                                                priorYearsDepreciationReportingCurrency += amountPrimaryReportingCurrency;
                                                            }
                                                            sumDepPeriodPriorYears += depPeriod;
                                                        }
                                                        else
                                                        {
                                                            totalDepreciation += amountCurPrimary;

                                                            if (executeReportingCurrencyLogic)
                                                            {
                                                                totalDepreciationReportingCurrency += amountPrimaryReportingCurrency;
                                                            }

                                                            sumDepPeriodCurrentYear += depPeriod;
                                                        }
                                                        amountCurPrimary = 0;
                                                        amountPrimaryReportingCurrency = 0;

                                                        if (!assetBook.AssetDerogatoryModel_FR)
                                                        {
                                                            continue;
                                                        }
                                                    }
                                                }

                                                if (!assetBook.IsTrueUpDepreciation
                                                && (assetBook.DepreciationConvention == AssetDepreciationConvention::HalfYearNext
                                                || assetBook.DepreciationConvention == AssetDepreciationConvention::HalfYearStart)
                                                && assetTableInterval.endPeriod(transDate) < assetTableInterval.endPeriod(depreciationStartPostDate))
                                                {
                                                    continue;
                                                }

                                                // Calculate the depreciation amount for the derogatory book
                                                amountCurTaxModelValue = 0;
                                                amountCurTaxModelValueReporting = 0;
                                                if (assetBook.AssetDerogatoryModel_FR
                                                && assetBookTax
                                                && this.processTaxValueModel(
                                                    assetBook,
                                                    assetBookTax,
                                                    assetTableMethodTaxModelPrimary,
                                                    assetTableMethodTaxModelSecondary))
                                                {
                                                    int localCalcStartTime = activityContext.getElapsedMilliseconds();

                                                    // Retrieve depreciation book depreciation amount.
                                                    amountCurTaxModelValue = this.calculateDerogatoryTaxDepreciationAmount(
                                                    assetTableMethodTaxModelPrimary,
                                                    assetTableMethodTaxModelSecondary);

                                                    int localCalcStartTimeReportingCur = activityContext.getElapsedMilliseconds();
                                                    if (executeReportingCurrencyLogic)
                                                    {
                                                        amountCurTaxModelValueReporting = this.calculateDerogatoryTaxDepreciationAmount(
                                                        assetTableMethodTaxModelPrimaryReporting,
                                                        assetTableMethodTaxModelSecondaryReporting);
                                                    }

                                                    elapsedTimeForAssetTableMethodReportingCurCalc += (activityContext.getElapsedMilliseconds() - localCalcStartTimeReportingCur);
                                                    elapsedTimeForAssetTableMethodCalc += (activityContext.getElapsedMilliseconds() - localCalcStartTime);

                                                    // If sumarized depreciation is selected, update the Depreciation book depreciation.
                                                    // Otherwise post a depreciation for the Tax Value Model asset period.
                                                    if (sumDepreciation)
                                                    {
                                                        sumAmountCurTaxModelValue += amountCurTaxModelValue;
                                                        sumAmountCurTaxModelValueReporting += amountCurTaxModelValueReporting;
                                                    }
                                                    else
                                                    {
                                                        transactionCount += this.createDerogatoryAssetTrans(
                                                        journalNum,
                                                        this.assetTransType(),
                                                        assetBookTax,
                                                        amountCurTaxModelValue,
                                                        transDate,
                                                        amountCurTaxModelValueReporting,
                                                        assetBudgetModelId,
                                                        firstTransDate);
                                                    }
                                                }

                                                // Determine a derogatory amount:  the difference between the tax value depreciation amount and
                                                // the accounting value model depreciation amount.
                                                if (!sumDepreciation && assetBook.AssetDerogatoryModel_FR && assetBookTax)
                                                {
                                                    amountCurDerogatory = amountCurTaxModelValue - amountCurPrimary;

                                                    if (assetBook.AcquisitionDate > assetBook.UsedFromDate)
                                                    {
                                                        amountCurDerogatory -= totalDepreciation - derogatoryAdjustment;
                                                    }

                                                    if (executeReportingCurrencyLogic)
                                                    {
                                                        amountCurDerogatoryReporting = amountCurTaxModelValueReporting - amountPrimaryReportingCurrency;

                                                        if (assetBook.AcquisitionDate > assetBook.UsedFromDate)
                                                        {
                                                            amountCurDerogatoryReporting -= totalDepreciationReportingCurrency - derogatoryAdjustmentReportingCurrency;
                                                        }
                                                    }

                                                    if (amountCurDerogatory)
                                                    {
                                                        // Post derogatory transaction.
                                                        transactionCount += this.createDerogatoryAssetTrans(
                                                        journalNum,
                                                        this.determineDerogatoryAssetTransTypeJournal(amountCurDerogatory),
                                                        assetBook,
                                                        amountCurDerogatory,
                                                        transDate,
                                                        amountCurDerogatoryReporting,
                                                        assetBudgetModelId,
                                                        firstTransDate);
                                                    }

                                                    if (totalDepreciation != derogatoryAdjustment)
                                                    {
                                                        transactionCount += this.createDerogatoryAssetTrans(
                                                        journalNum,
                                                        AssetTransTypeJournal::DepreciationAdj,
                                                        assetBook,
                                                        totalDepreciation - derogatoryAdjustment,
                                                        transDate,
                                                        totalDepreciationReportingCurrency - derogatoryAdjustmentReportingCurrency,
                                                        assetBudgetModelId,
                                                        firstTransDate);

                                                        derogatoryAdjustment = totalDepreciation;
                                                        derogatoryAdjustmentReportingCurrency = hasSameAccoutingAndReportingCurrency ? derogatoryAdjustment : totalDepreciationReportingCurrency;
                                                    }


                                                }

                                                // Go through all seperate-depreciable documents
                                                if (amountCurPrimary && isAssetDocumentEnabled)
                                                {
                                                    int startTimeDoc_JP = activityContext.getElapsedMilliseconds();

                                                    transDate = transDate ? transDate : this.initFirstDate(assetTableMethodPrimary.depDate(),assetBook.AssetId);
                                                    if (AssetDepreciationProfile::isDepMethod_JP(depreciationProfile.Method))
                                                    {
                                                        assetTableMethodInterface_JP        = assetTableMethodPrimary as AssetDepTableMethodInterface_JP;
                                                        ordinaryDepAmount                   = assetTableMethodInterface_JP.getBeginBalanceCalculationResult().lookup(transDate + 1);
                                                        isDepreciationDone                  = isDepreciationDone || assetTableMethodInterface_JP.getIsDepreciationDone();
                                                    }
                                                    else
                                                    {
                                                        ordinaryDepAmount   = -depreciationAcc;
                                                        isDepreciationDone = ordinaryDepAmount >= amountToOrdinaryDepreciate;
                                                    }
                                                    transactionCount += assetDocumentDepHelperForProposal.createTransForDocuments(
                                                    assetJournal,
                                                    transDate,
                                                    ordinaryDepAmount,
                                                    amountToOrdinaryDepreciate,
                                                    isDepreciationDone,
                                                    false,
                                                    revaluationAmount,
                                                    allowToAllocate);

                                                    elapsedTimeForDocuments_JP += (activityContext.getElapsedMilliseconds() - startTimeDoc_JP);
                                                    elapsedTimeForAllLocalFunc_JP += (activityContext.getElapsedMilliseconds() - startTimeDoc_JP);
                                                }

                                                // Save the primary value model generated voucher.
                                                if (amountCurPrimary && !sumDepreciation &&
                                                (!isFixedAssetBudgetJournal || (isFixedAssetBudgetJournal && transDate >= assetDateFrom)))
                                                {
                                                    if (hasSameAccoutingAndReportingCurrency)
                                                    {
                                                        amountPrimaryReportingCurrency = amountCurPrimary;
                                                    }

                                                    if (allowToAllocate)
                                                    {
                                                        int startTimeAllocate_JP = activityContext.getElapsedMilliseconds();

                                                        assetJournal.parmReportingCurrencyAmount(amountPrimaryReportingCurrency);
                                                        transactionCount += assetAllocatorCN.createTransJournal(assetJournal, amountCurPrimary, assetBook, transDate, assetBudgetModelId, depPeriod, 0, false, revaluationAmount);

                                                        elapsedTimeForAllocation_JP += (activityContext.getElapsedMilliseconds() - startTimeAllocate_JP);
                                                        elapsedTimeForAllLocalFunc_JP += (activityContext.getElapsedMilliseconds() - startTimeAllocate_JP);
                                                    }
                                                    else
                                                    {
                                                        List transactionListForPrimary;

                                                        if (!prevAssetBook || prevAssetBook.RecId != assetBook.RecId)
                                                        {
                                                            prevAssetBook.RecId = assetBook.RecId;
                                                            transactionListForPrimary = this.createTransListForPrimary(amountCurPrimary,
                                                                                                                assetBook,
                                                                                                                transDate,
                                                                                                                amountPrimaryReportingCurrency,
                                                                                                                assetBudgetModelId,
                                                                                                                depPeriod,
                                                                                                                0,
                                                                                                                false,
                                                                                                                revaluationAmount);

                                                            prevLedgerJournalTrans = assetJournal.parmLedgerJournalTrans();
                                                        }
                                                        else
                                                        {
                                                            transactionListForPrimary = this.createTransListForPrimary(amountCurPrimary,
                                                                                                            assetBook,
                                                                                                            transDate,
                                                                                                            amountPrimaryReportingCurrency,
                                                                                                            assetBudgetModelId,
                                                                                                            depPeriod,
                                                                                                            0,
                                                                                                            false,
                                                                                                            revaluationAmount,
                                                                                                            0,
                                                                                                            dateNull(),
                                                                                                            false,
                                                                                                            false,
                                                                                                            AssetDocumentType_JP::None,
                                                                                                            0,
                                                                                                            null,
                                                                                                            prevLedgerJournalTrans);
                                                        }

                                                        int localConsumeStartTime = activityContext.getElapsedMilliseconds();

                                                        this.consumeTransList(transactionListForPrimary, assetJournal);

                                                        elapsedTimeToConsumeTransListTime += (activityContext.getElapsedMilliseconds() - localConsumeStartTime);

                                                        transactionCount++;
                                                        // <GCN><GJP>
                                                    }
                                                    // </GJP></GCN>
                                                }

                                                // Restore the setting for one voucher.
                                                if (hasSameAccoutingAndReportingCurrency)
                                                {
                                                    priorYearsDepreciationReportingCurrency = priorYearsDepreciation;
                                                    totalDepreciationReportingCurrency = totalDepreciation;
                                                    sumAmountReportingCurrency = sumAmountCur;
                                                }

                                                if (!sumDepreciation
                                                && ( (assetBook.IsTrueUpDepreciation && isTrueUpDepreciationRequired)
                                                || assetBook.AcquisitionDate > assetBook.UsedFromDate)
                                                && (priorYearsDepreciation || totalDepreciation)
                                                && !assetBook.AssetDerogatoryModel_FR)
                                                {
                                                    int localConsumeStartTime = activityContext.getElapsedMilliseconds();

                                                    this.createDeprecionAdjustmentTrans(
                                                    priorYearsDepreciation, totalDepreciation, assetTableInterval, assetJournal, sumDepPeriodPriorYears,
                                                    sumDepPeriodCurrentYear, assetBook, firstTransDate, lastTransDate, priorYearsDepreciationReportingCurrency, totalDepreciationReportingCurrency);

                                                    elapsedTimeToConsumeTransListTime += (activityContext.getElapsedMilliseconds() - localConsumeStartTime);

                                                    transactionCount++;
                                                    priorYearsDepreciation = 0;
                                                    totalDepreciation      = 0;
                                                    priorYearsDepreciationReportingCurrency = 0;
                                                    totalDepreciationReportingCurrency      = 0;
                                                    assetJournal.parmAssetDepreciationPeriod(AssetDepreciationPeriod::construct());
                                                }

                                                // Summarized depreciation is posted in the last period of the given year
                                                if (this.isSummarizedTransactionNeeded(sumAmountCur, assetTableInterval, transDate, assetBook))
                                                {
                                                    if (allowToAllocate && AssetDepreciationProposalSummarizationFlight_JP::instance().isEnabled())
                                                    {
                                                        int startTimeAllocate_JP = activityContext.getElapsedMilliseconds();

                                                        assetJournal.parmReportingCurrencyAmount(sumAmountReportingCurrency);
                                                        transactionCount += assetAllocatorCN.createTransJournal(assetJournal, sumAmountCur, assetBook, lastTransDate, assetBudgetModelId, sumDepPeriod, 0, false, 0, 0, firstTransDate);

                                                        elapsedTimeForAllocation_JP += (activityContext.getElapsedMilliseconds() - startTimeAllocate_JP);
                                                    }
                                                    else
                                                    {

                                                        List transactionListForSummarizedDepLastPeriod;
                                                        transactionListForSummarizedDepLastPeriod = this.createTransListForSummarizedDepLastPeriod(sumAmountCur,
                                                                                                                assetBook,
                                                                                                                lastTransDate,
                                                                                                                sumAmountReportingCurrency,
                                                                                                                assetBudgetModelId,
                                                                                                                sumDepPeriod,
                                                                                                                0,
                                                                                                                false,
                                                                                                                revaluationAmount,
                                                                                                                0,
                                                                                                                firstTransDate);

                                                        int consumeTransListStartTime = activityContext.getElapsedMilliseconds();

                                                        this.consumeTransList(transactionListForSummarizedDepLastPeriod, assetJournal);

                                                        elapsedTimeToConsumeTransListTime += (activityContext.getElapsedMilliseconds() - consumeTransListStartTime);
                                                        transactionCount++;
                                                    }

                                                    sumDepPeriod = 0;
                                                    sumAmountCur = 0;
                                                    sumAmountReportingCurrency = 0;
                                                }

                                                amountCurPrimary = 0;
                                                amountPrimaryReportingCurrency = 0;
                                            }

                                            if (reductionEntryAllocation
                                            && assetTableMethodPrimary is AssetDepTableMethodInterface_JP
                                            && reductionEntryDocument)
                                            {
                                                int startTimeDoc_JP = activityContext.getElapsedMilliseconds();

                                                assetTableMethodInterface_JP = assetTableMethodPrimary as AssetDepTableMethodInterface_JP;
                                                reductionEntryBeginBalanceMap = assetTableMethodInterface_JP.getBeginBalanceCalculationResult();
                                                reductionEntryHelper.parmReductionEntryBeginBalanceMap(reductionEntryBeginBalanceMap);
                                                reductionEntryHelper.parmRunDate(runDate);
                                                reductionEntryHelper.init();

                                                mapResult = reductionEntryHelper.calc(runDate);
                                                mapEnumerator = mapResult.getEnumerator();
                                                if (mapEnumerator.moveNext())
                                                {
                                                    rawContainer = mapEnumerator.currentValue();
                                                    conLength = conLen(rawContainer);
                                                    for (counter=1; counter <= conLength; counter++)
                                                    {
                                                        [allocationAmount,allocationDate] = conPeek(rawContainer, counter);
                                                        if (allocationAmount)
                                                        {
                                                            List transactionListForReductionEntryAllocation;
                                                            transactionListForReductionEntryAllocation = this.createTransListForReductionEntryAllocation(allocationAmount,
                                                                                                                assetBook,
                                                                                                                allocationDate,
                                                                                                                0,
                                                                                                                '',
                                                                                                                0,
                                                                                                                0,
                                                                                                                false,
                                                                                                                0,
                                                                                                                0,
                                                                                                                dateNull(),
                                                                                                                false,
                                                                                                                false,
                                                                                                                AssetDocumentType_JP::AssetReductionEntry_Reserve,
                                                                                                                reductionEntryDocument.RecId);

                                                            int consumeTransListStartTime = activityContext.getElapsedMilliseconds();

                                                            this.consumeTransList(transactionListForReductionEntryAllocation, assetJournal);

                                                            elapsedTimeToConsumeTransListTime += (activityContext.getElapsedMilliseconds() - consumeTransListStartTime);
                                                        }
                                                    }
                                                }
                                                elapsedTimeForDocuments_JP += (activityContext.getElapsedMilliseconds() - startTimeDoc_JP);
                                                elapsedTimeForAllLocalFunc_JP += (activityContext.getElapsedMilliseconds() - startTimeDoc_JP);
                                            }

                                            // <GIN>
                                        }
                                        // </GIN>

                                        // If the user chose to sumarize the depreciation propose the Derogatory Book depreciation and Derogatory vounhers.
                                        if (sumDepreciation && assetBook.AssetDerogatoryModel_FR && assetBookTax)
                                        {
                                            if (sumAmountCurTaxModelValue)
                                            {
                                                transactionCount += this.createDerogatoryAssetTrans(
                                                journalNum,
                                                this.assetTransType(),
                                                assetBookTax,
                                                sumAmountCurTaxModelValue,
                                                lastTransDate,
                                                sumAmountCurTaxModelValueReporting,
                                                assetBudgetModelId,
                                                firstTransDate);
                                            }

                                            amountCurDerogatory = sumAmountCurTaxModelValue - sumAmountCur;

                                            if (executeReportingCurrencyLogic)
                                            {
                                                amountCurDerogatoryReporting = sumAmountCurTaxModelValueReporting - sumAmountReportingCurrency;
                                            }

                                            if (amountCurDerogatory)
                                            {
                                                // Post derogatory transaction.
                                                transactionCount += this.createDerogatoryAssetTrans(
                                                journalNum,
                                                this.determineDerogatoryAssetTransTypeJournal(amountCurDerogatory),
                                                assetBook,
                                                amountCurDerogatory,
                                                lastTransDate,
                                                amountCurDerogatoryReporting,
                                                assetBudgetModelId,
                                                firstTransDate);
                                            }
                                        }

                                        if (sumDepreciation && sumAmountCur)
                                        {
                                            if (( (assetBook.IsTrueUpDepreciation && isTrueUpDepreciationRequired)
                                            || assetBook.AcquisitionDate > assetBook.UsedFromDate)
                                            && (priorYearsDepreciation || totalDepreciation))
                                            {
                                                sumAmountCur -= (priorYearsDepreciation + totalDepreciation);

                                                if (executeReportingCurrencyLogic)
                                                {
                                                    sumAmountReportingCurrency -= (priorYearsDepreciationReportingCurrency + totalDepreciationReportingCurrency);
                                                }
                                                sumDepPeriod -= (sumDepPeriodPriorYears + sumDepPeriodCurrentYear);
                                            }

                                            if (hasSameAccoutingAndReportingCurrency)
                                            {
                                                sumAmountReportingCurrency = sumAmountCur;
                                            }

                                            if (allowToAllocate)
                                            {
                                                int startTimeAllocate_JP = activityContext.getElapsedMilliseconds();

                                                assetJournal.parmReportingCurrencyAmount(sumAmountReportingCurrency);
                                                transactionCount += assetAllocatorCN.createTransJournal(assetJournal, sumAmountCur, assetBook, lastTransDate, assetBudgetModelId, sumDepPeriod, 0, false, revaluationAmount, 0, firstTransDate);

                                                elapsedTimeForAllocation_JP += (activityContext.getElapsedMilliseconds() - startTimeAllocate_JP);
                                            }
                                            else
                                            {
                                                List transactionListForSummary;
                                                if (!prevAssetBook || prevAssetBook.RecId != assetBook.RecId)
                                                {
                                                    prevAssetBook.RecId = assetBook.RecId;

                                                    transactionListForSummary = this.createTransListForSummary(sumAmountCur,
                                                                                            assetBook,
                                                                                            lastTransDate,
                                                                                            sumAmountReportingCurrency,
                                                                                            assetBudgetModelId,
                                                                                            sumDepPeriod,
                                                                                            0,
                                                                                            false,
                                                                                            revaluationAmount,
                                                                                            0,
                                                                                            firstTransDate);

                                                    prevLedgerJournalTrans = assetJournal.parmLedgerJournalTrans();
                                                }
                                                else
                                                {
                                                    transactionListForSummary = this.createTransListForSummary(sumAmountCur,
                                                                                            assetBook,
                                                                                            lastTransDate,
                                                                                            sumAmountReportingCurrency,
                                                                                            assetBudgetModelId,
                                                                                            sumDepPeriod,
                                                                                            0,
                                                                                            false,
                                                                                            revaluationAmount,
                                                                                            0,
                                                                                            firstTransDate,
                                                                                            false,
                                                                                            false,
                                                                                            AssetDocumentType_JP::None,
                                                                                            0,
                                                                                            null,
                                                                                            prevLedgerJournalTrans);
                                           
                                                }
                                                int consumeTransListStartTime = activityContext.getElapsedMilliseconds();

                                                this.consumeTransList(transactionListForSummary, assetJournal);

                                                elapsedTimeToConsumeTransListTime += (activityContext.getElapsedMilliseconds() - consumeTransListStartTime);

                                                transactionCount++;
                                                // <GCN><GJP>
                                            }
                                            // </GJP></GCN>

                                            if (((assetBook.IsTrueUpDepreciation && isTrueUpDepreciationRequired)
                                        || assetBook.AcquisitionDate > assetBook.UsedFromDate)
                                        && (priorYearsDepreciation || totalDepreciation))
                                            {
                                                if (hasSameAccoutingAndReportingCurrency)
                                                {
                                                    priorYearsDepreciationReportingCurrency = priorYearsDepreciation;
                                                    totalDepreciationReportingCurrency = totalDepreciation;
                                                }

                                                int localConsumeStartTime = activityContext.getElapsedMilliseconds();

                                                this.createDeprecionAdjustmentTrans(priorYearsDepreciation, totalDepreciation, assetTableInterval, assetJournal,
                                                sumDepPeriodPriorYears, sumDepPeriodCurrentYear, assetBook, firstTransDate, lastTransDate, priorYearsDepreciationReportingCurrency, totalDepreciationReportingCurrency);

                                                elapsedTimeToConsumeTransListTime += (activityContext.getElapsedMilliseconds() - localConsumeStartTime);

                                                transactionCount++;
                                            }
                                        }
                                    }
                                }
                                else
                            // Dual depreciation.
                                {
                                    if (depreciationProfile.Method != AssetDepreciationMethod::Consumption)
                                    {
                                        // <GIN>
                                        boolean isAssetBookFoundWithIndiaParameters = depreciationParameters && assetBook;
                                        if (isAssetBookFoundWithIndiaParameters)
                                        {
                                            if (assetBook.AssetGroupDepreciation_IN
                                            && !depreciationProfile.ShiftDepreciation_IN)
                                            {
                                                assetTableMethodPrimaryGroup_IN = AssetGroupTableMethod_IN::construct(assetBookLocal, runDate, assetBudgetModelId, true);
                                                assetTableMethodSecondaryGroup_IN = AssetGroupTableMethod_IN::construct(assetBookLocal, runDate, assetBudgetModelId, true, true);
                                            }
                                            else
                                            {
                                                assetTableMethodPrimary   = AssetTableMethod::construct(assetBook,runDate,assetBudgetModelId,true);
                                                assetTableMethodSecondary = AssetTableMethod::construct(assetBook,runDate,assetBudgetModelId,true,true);

                                                if (depreciationCompaniesAct
                                           && assetBook.currentOperationsTax() == CurrentOperationsTax::Current
                                            && depreciationProfile.isShiftDepreciationMethod_IN()
                                            && depreciationProfile.ShiftDepreciation_IN)
                                                {
                                                    assetTableMethodSecondary.parmShiftDepreciation_IN(NoYes::Yes);
                                                    assetTableMethodSecondary.parmSingleShift_IN(NoYes::Yes);
                                                    assetTableMethodSecondary.parmDoubleShift_IN(NoYes::Yes);
                                                    assetTableMethodSecondary.parmTripleShift_IN(NoYes::Yes);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            // </GIN>
                                            assetTableMethodPrimary   = AssetTableMethod::construct(assetBook,runDate,assetBudgetModelId,true);
                                            assetTableMethodSecondary = AssetTableMethod::construct(assetBook,runDate,assetBudgetModelId,true,true);
                                            // <GIN>
                                        }
                                        // </GIN>

                                        if (executeReportingCurrencyLogic)
                                        {
                                            assetTableMethodPrimaryReportingCurrency = AssetTableMethod::constructForReportingCurrency(assetBook, runDate, assetBudgetModelId, true);
                                            assetTableMethodSecondaryReportingCurrency = AssetTableMethod::constructForReportingCurrency(assetBook, runDate, assetBudgetModelId, true, true);
                                        }

                                        if ( (assetBook.IsTrueUpDepreciation && isTrueUpDepreciationRequired)
                                        || assetBook.AcquisitionDate > assetBook.UsedFromDate)
                                        {
                                            if (assetTableMethodPrimary)
                                            {
                                                assetTableMethodPrimary.parmDepAmountPriorYears([conPeek(priorYearAmount, 3), conPeek(priorYearAmount, 4)]);
                                            }

                                            checkFirstDeprection =  false;
                                            totalDepreciation = 0;
                                            priorYearsDepreciation  = 0;
                                            sumDepPeriodPriorYears  = 0;
                                            sumDepPeriodCurrentYear = 0;
                                            if (LedgerJournalTable::find(journalNum).ledgerJournalName().NewVoucher != NewVoucher::OneVoucher)
                                            {
                                                assetJournal.parmIsOneVoucher(false);
                                                assetJournal.parmVoucher('');
                                            }

                                            if (executeReportingCurrencyLogic)
                                            {
                                                assetTableMethodPrimaryReportingCurrency.parmDepAmountPriorYears([conPeek(priorYearAmountReportingCurrency, 3), conPeek(priorYearAmountReportingCurrency, 4)]);
                                                totalDepreciationReportingCurrency = 0;
                                                priorYearsDepreciationReportingCurrency  = 0;
                                            }
                                        }
                                        else
                                        {
                                            // For Half Year Start and Half Year Next convention, depreciation amounts need to be
                                            // summarized if the depreciation start date is prior the place of service or acquisition dates.
                                            if ((assetBook.DepreciationConvention == AssetDepreciationConvention::HalfYearNext
                                            || assetBook.DepreciationConvention == AssetDepreciationConvention::HalfYearStart)
                                            && assetTableInterval.endPeriod(depreciationStartPostDate)
                                                >= assetTableInterval.endPeriod(assetBook.LastDepreciationDate))
                                            {
                                                isSumFirstPeriodsDepreciationNeeded = true;
                                            }
                                        }

                                        amountCurPrimary   = 0;
                                        amountCurSecondary = 0;

                                        if (executeReportingCurrencyLogic)
                                        {
                                            amountPrimaryReportingCurrency   = 0;
                                            amountSecondaryReportingCurrency = 0;
                                        }

                                        // <GIN>
                                        if (depreciationIncomeTaxAct
                                        && (assetTableMethodPrimary || assetTableMethodSecondary)
                                        || (assetTableMethodPrimaryGroup_IN || assetTableMethodSecondaryGroup_IN))
                                        {
                                            while (this.assetTableMethodNext_IN(
                                                assetBook,
                                                assetTableMethodPrimary,
                                                assetTableMethodPrimaryGroup_IN,
                                                calculatedDepreciationGroups_IN)
                                            && this.assetTableMethodNext_IN(
                                                assetBook,
                                                assetTableMethodSecondary,
                                                assetTableMethodSecondaryGroup_IN,
                                                calculatedDepreciationSecondaryGroups_IN))
                                            {
                                                int localStartTime = activityContext.getElapsedMilliseconds();

                                                if (assetBook.AssetGroupDepreciation_IN)
                                                {
                                                    amountCurPrimary = -this.calcGroupDepreciation_IN(
                                                        assetBook,
                                                        calculatedDepreciationGroups_IN,
                                                        assetTableMethodPrimary,
                                                        assetTableMethodPrimaryGroup_IN,
                                                        amountToDepreciate,
                                                        isAssetFirstYearDepreciation);

                                                    amountCurSecondary = -this.calcGroupDepreciation_IN(
                                                        assetBook,
                                                        calculatedDepreciationSecondaryGroups_IN,
                                                        assetTableMethodSecondary,
                                                        assetTableMethodSecondaryGroup_IN,
                                                        amountToDepreciate,
                                                        isAssetFirstYearDepreciation);
                                                }
                                                else
                                                {
                                                    amountCurPrimary   = -(assetTableMethodPrimary.calc());
                                                    amountCurSecondary = -assetTableMethodSecondary.calc();
                                                }

                                                elapsedTimeForAssetTableMethodCalc += (activityContext.getElapsedMilliseconds() - localStartTime);

                                                if (abs(amountCurPrimary) > abs(amountCurSecondary))
                                                {
                                                    revaluationAmount = this.getRevaluationAmount_IN(assetBook, assetTableMethodPrimary, assetTableMethodPrimaryGroup_IN);

                                                    this.addPrevDepAmountExternal_IN(
                                                    assetBook,
                                                    assetTableMethodSecondary,
                                                    assetTableMethodSecondaryGroup_IN,
                                                    -(amountCurPrimary - amountCurSecondary));
                                                
                                                    depDate     = this.getDepDate_IN(assetBook, assetTableMethodPrimary, assetTableMethodPrimaryGroup_IN);
                                                    depPeriod   = this.getDepPeriod_IN(assetBook, assetTableMethodPrimary, assetTableMethodPrimaryGroup_IN);
                                                    amountCur   = amountCurPrimary;
                                                }
                                                else
                                                {
                                                    revaluationAmount = this.getRevaluationAmount_IN(assetBook, assetTableMethodSecondary, assetTableMethodSecondaryGroup_IN);

                                                    this.addPrevDepAmountExternal_IN(
                                                    assetBook,
                                                    assetTableMethodPrimary,
                                                    assetTableMethodPrimaryGroup_IN,
                                                    -(amountCurSecondary - amountCurPrimary));

                                                    depDate     = this.getDepDate_IN(assetBook, assetTableMethodSecondary, assetTableMethodSecondaryGroup_IN);
                                                    depPeriod   = this.getDepPeriod_IN(assetBook, assetTableMethodSecondary, assetTableMethodSecondaryGroup_IN);
                                                    amountCur   = amountCurSecondary;
                                                }

                                                if (amountCur)
                                                {
                                                    transDate = this.initFirstDate(depDate,assetBook.AssetId);
                                                    if (!isFixedAssetBudgetJournal || (isFixedAssetBudgetJournal && transDate >= assetDateFrom))
                                                    {
                                                        if (sumDepreciation)
                                                        {
                                                            sumAmountCur += amountCur;
                                                            sumDepPeriod += depPeriod;
                                                            if (!firstTransDate || firstTransDate > transDate)
                                                            {
                                                                firstTransDate = transDate;
                                                            }
                                                            if (!lastTransDate || lastTransDate < transDate)
                                                            {
                                                                lastTransDate = transDate;
                                                            }
                                                        }
                                                    }
                                                }

                                                // Post the depreciation amount for the primary value model.
                                                if (!sumDepreciation && amountCur &&
                                                !isFixedAssetBudgetJournal || (isFixedAssetBudgetJournal && transDate >= assetDateFrom))
                                                {
                                                    List transactionListForDualDepreciationIncomeTaxAct;

                                                    if (!prevAssetBook || prevAssetBook.RecId != assetBook.RecId)
                                                    {
                                                        prevAssetBook.RecId = assetBook.RecId;
                                                        transactionListForDualDepreciationIncomeTaxAct = this.createTransListForDualDepreciationIncomeTaxAct(amountCur,
                                                                                                                assetBook,
                                                                                                                transDate,
                                                                                                                0,
                                                                                                                assetBudgetModelId,
                                                                                                                depPeriod);

                                                        prevLedgerJournalTrans = assetJournal.parmLedgerJournalTrans();
                                                    }
                                                    else
                                                    {
                                                        transactionListForDualDepreciationIncomeTaxAct = this.createTransListForDualDepreciationIncomeTaxAct(amountCur,
                                                                                                                assetBook,
                                                                                                                transDate,
                                                                                                                0,
                                                                                                                assetBudgetModelId,
                                                                                                                depPeriod,
                                                                                                                0,
                                                                                                                false,
                                                                                                                0,
                                                                                                                0,
                                                                                                                dateNull(),
                                                                                                                false,
                                                                                                                false,
                                                                                                                AssetDocumentType_JP::None,
                                                                                                                0,
                                                                                                                null,
                                                                                                                prevLedgerJournalTrans);
                                               
                                                    }

                                                    int consumeTransListStartTime = activityContext.getElapsedMilliseconds();

                                                    this.consumeTransList(transactionListForDualDepreciationIncomeTaxAct, assetJournal);

                                                    elapsedTimeToConsumeTransListTime += (activityContext.getElapsedMilliseconds() - consumeTransListStartTime);

                                                    transactionCount++;
                                                }
                                                amountCur = 0;
                                            }
                                        }
                                        else
                                        {
                                            // </GIN>
                                            if (!isIsoJP)
                                            {
                                                // Determine already posted depreciation amounts.
                                                depreciationAcc = -(assetTableMethodPrimary.parmPrevDepAmount() > assetTableMethodSecondary.parmPrevDepAmount() ?
                                            assetTableMethodPrimary.parmPrevDepAmount() : assetTableMethodSecondary.parmPrevDepAmount());
                                            }

                                            if (executeReportingCurrencyLogic)
                                            {
                                                depreciationAccReportingCurrency = -(assetTableMethodPrimaryReportingCurrency.parmPrevDepAmount() > assetTableMethodSecondaryReportingCurrency.parmPrevDepAmount() ?
                                                assetTableMethodPrimaryReportingCurrency.parmPrevDepAmount() : assetTableMethodSecondaryReportingCurrency.parmPrevDepAmount());
                                            }

                                            while (assetTableMethodPrimary.next() && assetTableMethodSecondary.next())
                                            {
                                                int localStartTime = activityContext.getElapsedMilliseconds();

                                                amountCurPrimary   = -(assetTableMethodPrimary.calc());
                                                amountCurSecondary = -assetTableMethodSecondary.calc();

                                                elapsedTimeForAssetTableMethodCalc += (activityContext.getElapsedMilliseconds() - localStartTime);

                                                if (abs(amountCurPrimary) > abs(amountCurSecondary))
                                                {
                                                    revaluationAmount = assetTableMethodPrimary.revaluationAmount();

                                                    assetTableMethodSecondary.addPrevDepAmountExternal(-(amountCurPrimary - amountCurSecondary));
                                                    depDate     = assetTableMethodPrimary.depDate();
                                                    depPeriod   = assetTableMethodPrimary.depPeriod();
                                                    if (isSumFirstPeriodsDepreciationNeeded)
                                                    {
                                                        amountCur += amountCurPrimary;
                                                    }
                                                    else
                                                    {
                                                        amountCur   = amountCurPrimary;
                                                    }
                                                }
                                                else
                                                {
                                                    revaluationAmount = assetTableMethodSecondary.revaluationAmount();

                                                    assetTableMethodPrimary.addPrevDepAmountExternal(-(amountCurSecondary - amountCurPrimary));
                                                    depDate     = assetTableMethodSecondary.depDate();
                                                    depPeriod   = assetTableMethodSecondary.depPeriod();

                                                    if (isSumFirstPeriodsDepreciationNeeded)
                                                    {
                                                        amountCur += amountCurSecondary;
                                                    }
                                                    else
                                                    {
                                                        amountCur   = amountCurSecondary;
                                                    }
                                                }

                                                if (amountCur)
                                                {
                                                    if (isIsoJP)
                                                    {
                                                        int startTime_JP = activityContext.getElapsedMilliseconds();

                                                        if (AssetDepreciationProfile::isDepMethod_JP(depreciationProfile.Method)
                                                        && AssetDepreciationProfile::isDepMethod_JP(assetBook.depreciationAltProfile().Method))
                                                        {
                                                            transDate           = this.initFirstDate(depDate,assetBook.AssetId);
                                                            assetTableMethodJP  = assetTableMethodPrimary as AssetTableMethod_JP;
                                                            isDepreciationDone  = assetTableMethodJP.getIsDepreciationDone();

                                                            remainingDepreciableNetBookValue = assetTableMethodJP.getAssetAcquisitionValue()
                                                            + AssetTrans::amountMSTPerDateTranstype(assetBook.AssetId, transDate, assetBook.BookId, AssetTransType::ExtraordinaryDepreciation)
                                                            + depreciationAcc
                                                            - assetBookTableLocal.NetBookValueRest;

                                                            // remainingDepreciableNetBookValue should be positive and amountCur should be negative
                                                            if (amountCur + remainingDepreciableNetBookValue < 0)
                                                            {
                                                                amountCur = -remainingDepreciableNetBookValue;
                                                                isDepreciationDone  = true;
                                                            }
                                                        }
                                                        depreciationAcc += amountCur;

                                                        elapsedTimeForAllLocalFunc_JP += (activityContext.getElapsedMilliseconds() - startTime_JP);
                                                    }
                                                    else
                                                    {
                                                        // Make sure that the depreciation amount is not more than amount to leave at the book or more than amount to allow to depreciate.
                                                        remainingDepreciableNetBookValue = assetTableMethodPrimary.parmAmountToDepreciate() + depreciationAcc - assetBook.getNetBookValueRest(assetBookTable);
                                                        if (-amountCur * assetBook.getAcquisitionAmountSign() > remainingDepreciableNetBookValue * assetBook.getAcquisitionAmountSign())
                                                        {
                                                            amountCur = -remainingDepreciableNetBookValue;
                                                        }
                                                        depreciationAcc += amountCur;
                                                    }
                                                }

                                                if (executeReportingCurrencyLogic && assetTableMethodPrimaryReportingCurrency.next() && assetTableMethodSecondaryReportingCurrency.next())
                                                {
                                                    int localCalcStartTime = activityContext.getElapsedMilliseconds();

                                                    amountPrimaryReportingCurrency   = -(assetTableMethodPrimaryReportingCurrency.calc());
                                                    amountSecondaryReportingCurrency = -assetTableMethodSecondaryReportingCurrency.calc();

                                                    if ((depreciationAcc + amountCur
                                                        == assetTableMethodPrimary.parmAmountToDepreciate() - assetBook.getNetBookValueRest(assetBookTable)
                                                    || assetTableMethodPrimary.parmIsEndOfAccountingDepreciation())
                                                    && !leaveNetBookValueReachedReportingCurrency)
                                                    {
                                                        while (assetTableMethodPrimaryReportingCurrency.next() && assetTableMethodSecondaryReportingCurrency.next())
                                                        {
                                                            amountPrimaryReportingCurrency   += -(assetTableMethodPrimaryReportingCurrency.calc());
                                                            amountSecondaryReportingCurrency += -assetTableMethodSecondaryReportingCurrency.calc();
                                                        }
                                                    }

                                                    elapsedTimeForAssetTableMethodReportingCurCalc += (activityContext.getElapsedMilliseconds() - localCalcStartTime);
                                                    elapsedTimeForAssetTableMethodCalc += (activityContext.getElapsedMilliseconds() - localCalcStartTime);

                                                    if (abs(amountPrimaryReportingCurrency) > abs(amountSecondaryReportingCurrency))
                                                    {
                                                        assetTableMethodSecondaryReportingCurrency.addPrevDepAmountExternal(-(amountPrimaryReportingCurrency - amountSecondaryReportingCurrency));
                                                        depDate     = assetTableMethodPrimary.depDate();
                                                        depPeriod   = assetTableMethodPrimary.depPeriod();
                                                        if (isSumFirstPeriodsDepreciationNeeded)
                                                        {
                                                            amountReportingCurrency += amountPrimaryReportingCurrency;
                                                        }
                                                        else
                                                        {
                                                            amountReportingCurrency   = amountPrimaryReportingCurrency;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        assetTableMethodPrimaryReportingCurrency.addPrevDepAmountExternal(-(amountSecondaryReportingCurrency - amountPrimaryReportingCurrency));
                                                        depDate     = assetTableMethodSecondary.depDate();
                                                        depPeriod   = assetTableMethodSecondary.depPeriod();

                                                        if (isSumFirstPeriodsDepreciationNeeded)
                                                        {
                                                            amountReportingCurrency += amountSecondaryReportingCurrency;
                                                        }
                                                        else
                                                        {
                                                            amountReportingCurrency   = amountSecondaryReportingCurrency;
                                                        }
                                                    }

                                                    if (amountReportingCurrency)
                                                    {
                                                        // Make sure that the depreciation amount is not more than amount to leave at the book or more than amount to allow to depreciate.
                                                        remainingDepreciableNetBookValueReportingCurrency =
                                                        assetTableMethodPrimaryReportingCurrency.parmAmountToDepreciate()
                                                        + depreciationAccReportingCurrency
                                                        - assetBook.getNetBookValueRestReporting(assetBookTable);

                                                        if (-amountReportingCurrency * assetBook.getAcquisitionAmountSign() > remainingDepreciableNetBookValueReportingCurrency * assetBook.getAcquisitionAmountSign())
                                                        {
                                                            amountReportingCurrency = -remainingDepreciableNetBookValueReportingCurrency;
                                                            leaveNetBookValueReachedReportingCurrency = true;
                                                        }
                                                        depreciationAccReportingCurrency += amountReportingCurrency;
                                                    }
                                                }

                                                if (amountCur)
                                                {
                                                    transDate = this.initFirstDate(depDate,assetBook.AssetId);
                                                    if (!isFixedAssetBudgetJournal || (isFixedAssetBudgetJournal && transDate >= assetDateFrom))
                                                    {
                                                        if (sumDepreciation)
                                                        {
                                                            sumAmountCur += amountCur;

                                                            if (executeReportingCurrencyLogic)
                                                            {
                                                                sumAmountReportingCurrency += amountReportingCurrency;
                                                            }

                                                            sumDepPeriod += depPeriod;
                                                            if (!firstTransDate || firstTransDate > transDate)
                                                            {
                                                                firstTransDate = transDate;
                                                            }
                                                            if (!lastTransDate || lastTransDate < transDate)
                                                            {
                                                                lastTransDate = transDate;
                                                            }
                                                        }
                                                    }
                                                }

                                                if ( (assetBook.IsTrueUpDepreciation && isTrueUpDepreciationRequired)
                                                || assetBook.AcquisitionDate > assetBook.UsedFromDate)
                                                {
                                                    if (assetTableInterval.endPeriod(transDate) < assetTableInterval.endPeriod(depreciationStartPostDate))
                                                    {
                                                        // sumarize the prior year and current year depreciation amount.
                                                        if (AssetBook::checkPriorYearDepreciation(assetBook, assetTableInterval, assetTableMethodPrimary.depDate()))
                                                        {
                                                            if (!assetJournal.parmAssetDepreciationPeriod().isPeriodDefined())
                                                            {
                                                                assetJournal.parmAssetDepreciationPeriod(AssetBook::getAssetDepreciationPeriod(assetBook, assetTableInterval, assetTableMethodPrimary.depDate()));
                                                            }

                                                            priorYearsDepreciation += amountCur;

                                                            if (executeReportingCurrencyLogic)
                                                            {
                                                                priorYearsDepreciationReportingCurrency += amountReportingCurrency;
                                                            }
                                                            sumDepPeriodPriorYears += depPeriod;
                                                        }
                                                        else
                                                        {
                                                            totalDepreciation       += amountCur;

                                                            if (executeReportingCurrencyLogic)
                                                            {
                                                                totalDepreciationReportingCurrency += amountReportingCurrency;
                                                            }

                                                            sumDepPeriodCurrentYear += depPeriod;
                                                        }
                                                        continue;
                                                    }
                                                }

                                                if (!assetBook.IsTrueUpDepreciation
                                                && (assetBook.DepreciationConvention == AssetDepreciationConvention::HalfYearNext
                                                || assetBook.DepreciationConvention == AssetDepreciationConvention::HalfYearStart))
                                                {
                                                    if (assetTableInterval.endPeriod(transDate) < assetTableInterval.endPeriod(depreciationStartPostDate))
                                                    {
                                                        continue;
                                                    }
                                                }

                                                // Determine the depreciation amount for the derogatory book.
                                                amountCurTaxModelValue = 0;
                                                amountCurTaxModelValueReporting = 0;

                                                if (assetBookTax
                                                && assetBook.AssetDerogatoryModel_FR
                                                && this.processTaxValueModel(
                                                    assetBook,
                                                    assetBookTax,
                                                    assetTableMethodTaxModelPrimary,
                                                    assetTableMethodTaxModelSecondary))
                                                {
                                                    int localCalcStartTime = activityContext.getElapsedMilliseconds();

                                                    // Retrieve depreciation book depreciation amount.
                                                    amountCurTaxModelValue = this.calculateDerogatoryTaxDepreciationAmount(
                                                    assetTableMethodTaxModelPrimary,
                                                    assetTableMethodTaxModelSecondary);

                                                    int localCalcStartTimeReportingCur = activityContext.getElapsedMilliseconds();
                                                    if (executeReportingCurrencyLogic)
                                                    {
                                                        amountCurTaxModelValueReporting = this.calculateDerogatoryTaxDepreciationAmount(
                                                        assetTableMethodTaxModelPrimaryReporting,
                                                        assetTableMethodTaxModelSecondaryReporting);
                                                    }

                                                    elapsedTimeForAssetTableMethodReportingCurCalc += (activityContext.getElapsedMilliseconds() - localCalcStartTimeReportingCur);
                                                    elapsedTimeForAssetTableMethodCalc += (activityContext.getElapsedMilliseconds() - localCalcStartTime);

                                                    if (sumDepreciation)
                                                    {
                                                        sumAmountCurTaxModelValue += amountCurTaxModelValue;
                                                        sumAmountCurTaxModelValueReporting += amountCurTaxModelValueReporting;
                                                    }
                                                    else
                                                    {
                                                        if (isSumFirstPeriodsDepreciationNeeded)
                                                        {
                                                            isSumFirstPeriodsDepreciationNeeded = false;
                                                        }

                                                        // Create Tax Value Model asset transaction.
                                                        transactionCount += this.createDerogatoryAssetTrans(
                                                        journalNum,
                                                        this.assetTransType(),
                                                        assetBookTax,
                                                        amountCurTaxModelValue,
                                                        transDate,
                                                        amountCurTaxModelValueReporting,
                                                        '',
                                                        firstTransDate);
                                                    }
                                                }

                                                // Determine a derogatory amount:  the difference between the tax value depreciation amount and
                                                // the accounting value model depreciation amount.
                                                if (assetBookTax && !sumDepreciation && assetBook.AssetDerogatoryModel_FR)
                                                {
                                                    amountCurDerogatory = amountCurTaxModelValue - amountCur;

                                                    if(executeReportingCurrencyLogic)
                                                    {
                                                        amountCurDerogatoryReporting = amountCurTaxModelValueReporting - amountReportingCurrency;
                                                    }

                                                    if (amountCurDerogatory)
                                                    {
                                                        transactionCount += this.createDerogatoryAssetTrans(
                                                        journalNum,
                                                        this.determineDerogatoryAssetTransTypeJournal(amountCurDerogatory),
                                                        assetBook,
                                                        amountCurDerogatory,
                                                        transDate,
                                                        amountCurDerogatoryReporting,
                                                        '',
                                                        firstTransDate);
                                                    }
                                                }

                                                // Go through all seperate-depreciable documents
                                                if (amountCur && isAssetDocumentEnabled)
                                                {
                                                    int startTimeDoc_JP = activityContext.getElapsedMilliseconds();

                                                    ordinaryDepAmount           = -depreciationAcc;
                                                    amountToOrdinaryDepreciate  = AssetDepTransMap_JP::calcAmountToDepreciate(assetBook, runDate);
                                                    isDepreciationDone          = isDepreciationDone || ordinaryDepAmount >= amountToOrdinaryDepreciate;
                                                    transactionCount += assetDocumentDepHelperForProposal.createTransForDocuments(
                                                    assetJournal,
                                                    transDate ? transDate : this.initFirstDate(depDate,assetBook.AssetId),
                                                    ordinaryDepAmount,
                                                    amountToOrdinaryDepreciate,
                                                    isDepreciationDone,
                                                    false,
                                                    revaluationAmount,
                                                    allowToAllocate);

                                                    elapsedTimeForDocuments_JP += (activityContext.getElapsedMilliseconds() - startTimeDoc_JP);
                                                    elapsedTimeForAllLocalFunc_JP += (activityContext.getElapsedMilliseconds() - startTimeDoc_JP);
                                                }

                                                // Post the depreciation amount for the primary value model.
                                                if (!sumDepreciation && amountCur &&
                                                !isFixedAssetBudgetJournal || (isFixedAssetBudgetJournal && transDate >= assetDateFrom))
                                                {
                                                    if (hasSameAccoutingAndReportingCurrency)
                                                    {
                                                        amountReportingCurrency = amountCur;
                                                    }

                                                    if (allowToAllocate)
                                                    {
                                                        int startTimeAllocate_JP = activityContext.getElapsedMilliseconds();

                                                        assetJournal.parmReportingCurrencyAmount(amountReportingCurrency);
                                                        transactionCount += assetAllocatorCN.createTransJournal(assetJournal, amountCur, assetBook, transDate, assetBudgetModelId, depPeriod);

                                                        elapsedTimeForAllocation_JP += (activityContext.getElapsedMilliseconds() - startTimeAllocate_JP);
                                                    }
                                                    else
                                                    {
                                                        List transactionListForDualDepreciationPrimary;
                                                        if (!prevAssetBook || prevAssetBook.RecId != assetBook.RecId)
                                                        {
                                                            prevAssetBook.RecId = assetBook.RecId;
                                                            transactionListForDualDepreciationPrimary = this.createTransListForDualDepreciationPrimary(amountCur,
                                                                                                                                                    assetBook,
                                                                                                                                                    transDate,
                                                                                                                                                    amountReportingCurrency,
                                                                                                                                                    assetBudgetModelId,
                                                                                                                                                    depPeriod);

                                                            prevLedgerJournalTrans = assetJournal.parmLedgerJournalTrans();
                                                        }
                                                        else
                                                        {
                                                            transactionListForDualDepreciationPrimary = this.createTransListForDualDepreciationPrimary(amountCur,
                                                                                                                                                   assetBook,
                                                                                                                                                   transDate,
                                                                                                                                                   amountReportingCurrency,
                                                                                                                                                   assetBudgetModelId,
                                                                                                                                                   depPeriod,
                                                                                                                                                   0,
                                                                                                                                                   false,
                                                                                                                                                   0,
                                                                                                                                                   0,
                                                                                                                                                   dateNull(),
                                                                                                                                                   false,
                                                                                                                                                   false,
                                                                                                                                                   AssetDocumentType_JP::None,
                                                                                                                                                   0,
                                                                                                                                                   null,
                                                                                                                                                   prevLedgerJournalTrans);
                                                    
                                                        }
                                                        int consumeTransListStartTime = activityContext.getElapsedMilliseconds();

                                                        this.consumeTransList(transactionListForDualDepreciationPrimary, assetJournal);

                                                        elapsedTimeToConsumeTransListTime += (activityContext.getElapsedMilliseconds() - consumeTransListStartTime);

                                                        transactionCount++;
                                                        // <GCN><GJP>
                                                    }
                                                    // </GJP></GCN>
                                                }

                                                // Resetting the value for Onevoucher.
                                                if (hasSameAccoutingAndReportingCurrency)
                                                {
                                                    priorYearsDepreciationReportingCurrency = priorYearsDepreciation;
                                                    totalDepreciationReportingCurrency = totalDepreciation;
                                                    sumAmountReportingCurrency = sumAmountCur;
                                                }

                                                if (!sumDepreciation
                                                && ( (assetBook.IsTrueUpDepreciation && isTrueUpDepreciationRequired)
                                                || assetBook.AcquisitionDate > assetBook.UsedFromDate)
                                                && (priorYearsDepreciation || totalDepreciation))
                                                {
                                                    int localConsumeStartTime = activityContext.getElapsedMilliseconds();

                                                    this.createDeprecionAdjustmentTrans(priorYearsDepreciation, totalDepreciation, assetTableInterval, assetJournal,
                                                    sumDepPeriodPriorYears, sumDepPeriodCurrentYear, assetBook, firstTransDate, lastTransDate, priorYearsDepreciationReportingCurrency, totalDepreciationReportingCurrency);

                                                    elapsedTimeToConsumeTransListTime += (activityContext.getElapsedMilliseconds() - localConsumeStartTime);

                                                    transactionCount++;
                                                    priorYearsDepreciation = 0;
                                                    totalDepreciation      = 0;
                                                    priorYearsDepreciationReportingCurrency = 0;
                                                    totalDepreciationReportingCurrency      = 0;
                                                    assetJournal.parmAssetDepreciationPeriod(AssetDepreciationPeriod::construct());
                                                }

                                                // Summarized depreciation is posted in the last period of the given year
                                                if (this.isSummarizedTransactionNeeded(sumAmountCur, assetTableInterval, transDate, assetBook))
                                                {
                                                    if (allowToAllocate && AssetDepreciationProposalSummarizationFlight_JP::instance().isEnabled())
                                                    {
                                                        int startTimeAllocate_JP = activityContext.getElapsedMilliseconds();

                                                        assetJournal.parmReportingCurrencyAmount(sumAmountReportingCurrency);
                                                        transactionCount += assetAllocatorCN.createTransJournal(assetJournal, sumAmountCur, assetBook, lastTransDate, assetBudgetModelId, sumDepPeriod, 0, false, 0, 0, firstTransDate);

                                                        elapsedTimeForAllocation_JP += (activityContext.getElapsedMilliseconds() - startTimeAllocate_JP);
                                                    }
                                                    else
                                                    {
                                                        List transactionListForDualDepreciationSummarizedDepLastPeriod;
                                                        transactionListForDualDepreciationSummarizedDepLastPeriod = this.createTransListForDualDepreciationSummarizedDepLastPeriod(sumAmountCur,
                                                                                                                                                                           assetBook,
                                                                                                                                                                           lastTransDate,
                                                                                                                                                                           sumAmountReportingCurrency,
                                                                                                                                                                           assetBudgetModelId,
                                                                                                                                                                           sumDepPeriod,
                                                                                                                                                                           0,
                                                                                                                                                                           false,
                                                                                                                                                                           revaluationAmount,
                                                                                                                                                                           0,
                                                                                                                                                                           firstTransDate);
                                                        int consumeTransListStartTime = activityContext.getElapsedMilliseconds();

                                                        this.consumeTransList(transactionListForDualDepreciationSummarizedDepLastPeriod, assetJournal);

                                                        elapsedTimeToConsumeTransListTime += (activityContext.getElapsedMilliseconds() - consumeTransListStartTime);

                                                        transactionCount++;
                                                    }

                                                    sumDepPeriod = 0;
                                                    sumAmountCur = 0;
                                                    sumAmountReportingCurrency = 0;
                                                }

                                                amountCur = 0;
                                                amountReportingCurrency = 0;
                                            }

                                            // <GIN>
                                        }
                                        // </GIN>

                                        // If the user chose to sumarize the depreciation propose the Derogatory Book depreciation and Derogatory vounhers.
                                        if (assetBookTax && sumDepreciation && assetBook.AssetDerogatoryModel_FR)
                                        {
                                            if (sumAmountCurTaxModelValue)
                                            {
                                                transactionCount += this.createDerogatoryAssetTrans(
                                                journalNum,
                                                this.assetTransType(),
                                                assetBookTax,
                                                sumAmountCurTaxModelValue,
                                                lastTransDate,
                                                sumAmountCurTaxModelValueReporting,
                                                '',
                                                firstTransDate);
                                            }

                                            amountCurDerogatory = sumAmountCurTaxModelValue - sumAmountCur;

                                            if(executeReportingCurrencyLogic)
                                            {
                                                amountCurDerogatoryReporting = sumAmountCurTaxModelValueReporting - sumAmountReportingCurrency;
                                            }

                                            if (amountCurDerogatory)
                                            {
                                                // Post derogatory transaction.
                                                transactionCount += this.createDerogatoryAssetTrans(
                                                journalNum,
                                                this.determineDerogatoryAssetTransTypeJournal(amountCurDerogatory),
                                                assetBook,
                                                amountCurDerogatory,
                                                lastTransDate,
                                                amountCurDerogatoryReporting,
                                                '',
                                                firstTransDate);
                                            }
                                        }

                                        if (sumDepreciation && sumAmountCur)
                                        {
                                            if (( (assetBook.IsTrueUpDepreciation && isTrueUpDepreciationRequired)
                                            || assetBook.AcquisitionDate > assetBook.UsedFromDate)
                                            && (priorYearsDepreciation || totalDepreciation))
                                            {
                                                sumAmountCur -= (priorYearsDepreciation + totalDepreciation);
                                                sumDepPeriod -= (sumDepPeriodPriorYears + sumDepPeriodCurrentYear);

                                                if (executeReportingCurrencyLogic)
                                                {
                                                    sumAmountReportingCurrency -= (priorYearsDepreciationReportingCurrency + totalDepreciationReportingCurrency);
                                                }
                                            }

                                            if (hasSameAccoutingAndReportingCurrency)
                                            {
                                                sumAmountReportingCurrency = sumAmountCur;
                                            }

                                            if (allowToAllocate)
                                            {
                                                int startTimeAllocate_JP = activityContext.getElapsedMilliseconds();

                                                assetJournal.parmReportingCurrencyAmount(sumAmountReportingCurrency);
                                                transactionCount += assetAllocatorCN.createTransJournal(assetJournal, sumAmountCur, assetBook, lastTransDate, assetBudgetModelId, sumDepPeriod, 0, false, 0, 0, firstTransDate);

                                                elapsedTimeForAllocation_JP += (activityContext.getElapsedMilliseconds() - startTimeAllocate_JP);
                                            }
                                            else
                                            {
                                                List transactionListForDualDepreciationSummarizedDerogatory;

                                                if (!prevAssetBook || prevAssetBook.RecId != assetBook.RecId)
                                                {
                                                    prevAssetBook.RecId = assetBook.RecId;
                                                    transactionListForDualDepreciationSummarizedDerogatory = this.createTransListForDualDepreciationSummarizedDerogatory(
                                                    sumAmountCur,
                                                    assetBook,
                                                    lastTransDate,
                                                    sumAmountReportingCurrency,
                                                    assetBudgetModelId,
                                                    sumDepPeriod,
                                                    0,
                                                    false,
                                                    0,
                                                    0,
                                                    firstTransDate);

                                                    prevLedgerJournalTrans = assetJournal.parmLedgerJournalTrans();
                                                }
                                                else
                                                {
                                                    transactionListForDualDepreciationSummarizedDerogatory = this.createTransListForDualDepreciationSummarizedDerogatory(
                                                    sumAmountCur,
                                                    assetBook,
                                                    lastTransDate,
                                                    sumAmountReportingCurrency,
                                                    assetBudgetModelId,
                                                    sumDepPeriod,
                                                    0,
                                                    false,
                                                    0,
                                                    0,
                                                    firstTransDate,
                                                    false,
                                                    false,
                                                    AssetDocumentType_JP::None,
                                                    0,
                                                    null,
                                                    prevLedgerJournalTrans);
                                                }

                                                int consumeTransListStartTime = activityContext.getElapsedMilliseconds();

                                                this.consumeTransList(transactionListForDualDepreciationSummarizedDerogatory, assetJournal);

                                                elapsedTimeToConsumeTransListTime += (activityContext.getElapsedMilliseconds() - consumeTransListStartTime);

                                                transactionCount++;
                                                // <GCN><GJP>
                                            }
                                            // </GJP></GCN>

                                            if (( (assetBook.IsTrueUpDepreciation && isTrueUpDepreciationRequired)
                                            || assetBook.AcquisitionDate > assetBook.UsedFromDate)
                                            && (priorYearsDepreciation || totalDepreciation))
                                            {
                                                if (hasSameAccoutingAndReportingCurrency)
                                                {
                                                    priorYearsDepreciationReportingCurrency = priorYearsDepreciation;
                                                    totalDepreciationReportingCurrency = totalDepreciation;
                                                }

                                                int localConsumeStartTime = activityContext.getElapsedMilliseconds();

                                                this.createDeprecionAdjustmentTrans(priorYearsDepreciation, totalDepreciation, assetTableInterval, assetJournal,
                                                sumDepPeriodPriorYears, sumDepPeriodCurrentYear, assetBook, firstTransDate, lastTransDate, priorYearsDepreciationReportingCurrency, totalDepreciationReportingCurrency);

                                                elapsedTimeToConsumeTransListTime += (activityContext.getElapsedMilliseconds() - localConsumeStartTime);

                                                transactionCount++;
                                            }
                                        }
                                    }
                                }

                                // Determine if the scrape value needs to be reversed for the derogatory depreciation.
                                // If the value model on the asset has a scrape value, on the last depreciation period,
                                // a new voucher of a debit value of the scrape value needs to be posted.
                                if (assetBook.AssetDerogatoryModel_FR
                                        && assetBook.ScrapValue
                                        && this.postDerogatoryScrapValue(assetBook, transDate))
                                {
                                    // Post derogatory transaction.
                                    transactionCount += this.createDerogatoryAssetTrans(
                                        journalNum,
                                        AssetTransTypeJournal::DerogatoryDecrease,
                                        assetBook,
                                        assetBook.ScrapValue,
                                        transDate,
                                        assetBook.ScrapValueReportingCurrency,
                                        '',
                                        firstTransDate);
                                }
                            }
                        }
                        //
                        // Commit transaction when asset dep book is changed and the
                        // number of transactions created is over the limit.
                        //
                        if (transactionCount >= this.getMaxJournalLinesInTransactionBoundry())
                        {
                            ttscommit;
                            transactionCount = 0;
                            commitNeeded = false;
                            beginNeeded = true;
                        }
                    }

                    activityContext.addCustomProperty(AssetInstrumentationConstants::ElapsedTimeForAllLocalFunc_JP, int2Str(elapsedTimeForAllLocalFunc_JP));
                    activityContext.addCustomProperty(AssetInstrumentationConstants::ElapsedTimeForAllocation_JP, int2Str(elapsedTimeForAllocation_JP));
                    activityContext.addCustomProperty(AssetInstrumentationConstants::ElapsedTimeForDocuments_JP, int2Str(elapsedTimeForDocuments_JP));

                    activityContext.addCustomProperty(AssetInstrumentationConstants::ElapsedTimeForCatchUpDepreciation, int2Str(elapsedTimeForCatchUpDepreciation));
                    activityContext.addCustomProperty(AssetInstrumentationConstants::AssetTableMethodCalc, int2Str(elapsedTimeForAssetTableMethodCalc));
                    activityContext.addCustomProperty(AssetInstrumentationConstants::AssetTableMethodCalcReportingCur, int2Str(elapsedTimeForAssetTableMethodReportingCurCalc));
                    activityContext.addCustomProperty(AssetInstrumentationConstants::ConsumeTransListTime, int2Str(elapsedTimeToConsumeTransListTime));


                    // Commit any remaining transactions
                    if (commitNeeded)
                    {
                        ttscommit;
                    }

                    if (isIdlePeriodActiveAny)
                    {
                        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceJP00031, funcName());
                    }
                    if (isAnyDepreciationMethod_CZ)
                    {
                        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCZ00021, funcName());
                    }
                    if (isAnyManualDepreciationMethod_IT)
                    {
                        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIT00024, funcName());
                    }
                    if (isAnySumYearDigitsDeprMethod_CN)
                    {
                        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCN00018, funcName());
                    }
                    if (isAnyAdditionalDeprMethod_JP)
                    {
                        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceJP00022, funcName());
                    }
                    if (isAnyEquallyDividedDeprMethod_JP)
                    {
                        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceJP00025, funcName());
                    }

                }
                // catch exceptions
                catch (exception)
                {
                    activityContext.setException(exception);
                }

                this.updateJournalTotals();
                this.unlockJournal();

                activityContext.addCustomProperty(
                    AssetInstrumentationConstants::CalculateDepreciation,
                    int2Str(activityContext.getElapsedMilliseconds() - calculateDepreciationStartTime));

                if (postJournals && journalNum)
                {
                    int postStartTime = activityContext.getElapsedMilliseconds();

                    LedgerJournalTable journalTable = LedgerJournalTable::find(journalNum);

                    if (journalTable
                        && journalTable.checkNotSystemBlocked()
                        && journalTable.numOfLines())
                    {
                        LedgerJournalPost::postJournal(journalTable, NoYes::No, false);
                    }

                    activityContext.addCustomProperty(
                        AssetInstrumentationConstants::DepreciationPostJournal,
                        int2Str(activityContext.getElapsedMilliseconds() - postStartTime));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeReportingCurrencyLogic_JP</Name>
				<Source><![CDATA[
    private boolean executeReportingCurrencyLogic_JP(
        boolean _hasSameAccoutingAndReportingCurrency,
        AssetBook _assetBook)
    {
        boolean ret;

        if (AssetTableMethod::construct(_assetBook, runDate, assetBudgetModelId) is AssetTableMethod_JP
            || (_assetBook.depreciationAltProfile().RecId != 0
                &&  AssetTableMethod::construct(_assetBook, runDate, assetBudgetModelId, true, true) is AssetTableMethod_JP))
        {
            ret = false;
        }
        else
        {
            ret = !_hasSameAccoutingAndReportingCurrency && Ledger::reportingCurrency() != '';
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetBook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the records of <c>AssetBook</c> table.
    /// </summary>
    /// <returns>
    /// The records of <c>AssetBook</c> table.
    /// </returns>
    [Wrappable(true)]
    protected final AssetBook getAssetBook()
    {
        return queryRun.get(tableNum(AssetBook));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDepreciationAmountBasedOnNetBookValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Make sure that the depreciation amount is not more than amount to leave at the book or more than amount to allow to depreciate.
    /// </summary>
    /// <param name = "_depreciationProfile">
    /// The <c>AssetDepreciationProfile</c> table buffer.
    /// </param>
    /// <param name = "_assetTableMethodPrimary">
    /// The <c>AssetTableMethod</c> class instance.
    /// </param>
    /// <param name = "_netBookValue">
    /// The Net book value.
    /// </param>
    /// <param name = "_alreadyPostDepreciationAmount">
    /// Posted depreciation amounts.
    /// </param>
    /// <param name = "_periodDepreciationAmount">
    /// The depreciation amount of the period.
    /// </param>
    /// <param name = "_isReportingCurrency">
    /// A boolean value indicating reporting currency.
    /// </param>
    /// <returns>
    /// The depreciation amount of the period.
    /// </returns>
    [Wrappable(true)]
    protected final AssetAmount getDepreciationAmountBasedOnNetBookValue(
        AssetDepreciationProfile _depreciationProfile,
        AssetTableMethod _assetTableMethodPrimary,
        AmountMST _netBookValue,
        AssetAmount _alreadyPostDepreciationAmount,
        AmountCur _periodDepreciationAmount,
        boolean _isReportingCurrency = false)
    {
        AmountCur periodDepreciationAmount = _periodDepreciationAmount;

        if (_depreciationProfile.Method != AssetDepreciationMethod::LowValuePool)
        {
            AssetAmount remainingDepreciableNetBookValue = _assetTableMethodPrimary.parmAmountToDepreciate() + _alreadyPostDepreciationAmount - _netBookValue;
            AssetBook assetBook = _assetTableMethodPrimary.getAssetBook();

            if (-_periodDepreciationAmount * assetBook.getAcquisitionAmountSign() > remainingDepreciableNetBookValue * assetBook.getAcquisitionAmountSign())
            {
                periodDepreciationAmount = -remainingDepreciableNetBookValue;

                leaveNetBookValueReachedReportingCurrency = _isReportingCurrency;
            }
        }

        return periodDepreciationAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSummarizeDepreciation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the summarize depreciation option for the proposal.
    /// </summary>
    /// <param name="_summarizeDepreciation">
    /// An option to allow summarization.
    /// </param>
    /// <remarks>
    /// This method is used to allow to summarize transaction during the depreciation proposal.
    /// </remarks>
    public void setSummarizeDepreciation(NoYes _summarizeDepreciation)
    {
        sumDepreciation = _summarizeDepreciation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLast</Name>
				<Source><![CDATA[
    public void saveLast()
    {
        inGetSaveLast = true;
        xSysLastValue::saveLast(this);
        inGetSaveLast = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRangeValue</Name>
				<Source><![CDATA[
    internal void setRangeValue(str _tableName, FieldId _fieldId, str _rangeValue, RangeStatus _rangeStatus = RangeStatus::Open)
    {
        QueryBuildDataSource qbDataSource;
        QueryBuildRange qbRange;

        if (_rangeValue)
        {
            qbDataSource = queryRun.query().dataSourceName(_tableName);

            if (qbDataSource)
            {
                qbRange = SysQuery::findOrCreateRange(qbDataSource, _fieldId);

                if (qbRange)
                {
                    qbRange.value(_rangeValue);
                    qbRange.status(_rangeStatus);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean ret = false;
        container package = _packedClass;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]) && !(this is AssetProposalDepreciation_PL))
        {
            package = conPeek(package, conLen(package));
        }

        container base;
        Integer version = conPeek(package, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, base] = package;
                ret = super(base);
                break;

            default:
                ret = false;
        }

        return  ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateToDepreciation_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if an asset can be depreciated.
    /// </summary>
    /// <param name="_assetBook">
    /// An <c>Assetbook</c> buffer of the asset.
    /// </param>
    /// <returns>
    /// Returns true if an asset can be depreciated.
    /// </returns>
    public boolean validateToDepreciation_IN(AssetBook _assetBook)
    {
        AssetBook   assetBookLoc;
        AssetTableInterval deprIntervalLocal = AssetTableInterval::construct(_assetBook.depreciationProfile(), AssetBookTable::find(_assetBook.BookId).FiscalCalendar);

        isDepreciationAdjusted = false;
        assetSoldCounter = 1;
        while (conLen(soldAssets))
        {
            assetBookLoc = conPeek(soldAssets,assetSoldCounter);
            if (assetBookLoc &&
                assetBookLoc.AssetGroup == _assetBook.AssetGroup &&
                assetBookLoc.BookId     == _assetBook.BookId)
            {
                if (AssetParameters::find().DepreciationThreshold_IN < (deprIntervalLocal.findLastDayOfYear(runDate) - assetBookLoc.DepreciationStartDate + 1) )
                {
                    adjustmentAmount += this.getAdjustAmount_IN(assetBookLoc);
                }
                else
                {
                    adjustmentAmountLoc += this.getAdjustAmount_IN(assetBookLoc);
                }
            }
            assetSoldCounter ++;
            if (assetSoldCounter > conLen(soldAssets))
            {
                break;
            }
        }
        writendownAmount = this.getTotalWDValue_IN(_assetBook);
        if (adjustmentAmount + adjustmentAmountLoc >= writendownAmount)
        {
            return false;
        }
        else if (assetBookLoc.AcquisitionPrice == abs(AssetTrans::getAmountMSTAssetSale_IN(assetBookLoc)))
        {
            return false;
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct_PL</Name>
				<Source><![CDATA[
    public static AssetProposalDepreciation construct_PL()
    {
        AssetProposalDepreciation assetProposalDepreciation;
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            assetProposalDepreciation = new AssetProposalDepreciation_PL();
            assetProposalDepreciation.initQuery();
            return assetProposalDepreciation;
        }
        else
        {
            return AssetProposal::construct(AssetTransType::Depreciation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYS67580";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSummarizedTransactionNeeded</Name>
				<Source><![CDATA[
    private boolean isSummarizedTransactionNeeded(
        AssetAmount _sumAmountCur,
        AssetTableInterval _assetTableInterval,
        AssetTransDate _transDate,
        AssetBook _assetBook)

    {
        boolean returnValue;

        // If JP transactions are not summarized by year and the run date is set to the middle of the year, issues for future depreciation can occur.
        boolean isJPSummarizationAllowed = !isIsoJP || AssetDepreciationProposalSummarizationFlight_JP::instance().isEnabled();

        if (!_assetBook.AssetDerogatoryModel_FR
            && !isIsoIN
            && isJPSummarizationAllowed
            && sumDepreciation
            && _sumAmountCur
            && (_assetTableInterval is AssetTableInterval_Calendar || _assetTableInterval is AssetTableInterval_Fiscal)
            && _assetTableInterval.findLastDayOfYear(_transDate) == _transDate)
        {
            returnValue = true;
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        // For periodic proposal, SysQuery control is hidden.
        if (this.parmBatchEnabled())
        {
            return false;
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns depreciation asset transaction type associated with this class.
    /// </summary>
    /// <returns>Depreciation asset transaction</returns>
    public AssetTransType getAssetTransType()
    {
        return AssetTransType::Depreciation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxBooksInTaskBoundry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets maximum number of books in depreciation proposal journal lines.
    /// </summary>
    /// <returns>Maximum number of books.</returns>
    [Hookable(false)]
    internal int getMaxBooksInTaskBoundry()
    {
        int ret = AssetParameters::find().MaxBooksInDepreciationProposalJournal;

        return ret ? ret : FixedAssetsConstants::MaxBooksInDepreciationProposalJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSummarizedDepreciationBookLimit</Name>
				<Source><![CDATA[
    internal int getSummarizedDepreciationBookLimit()
    {
        int ret = AssetParameters::find().MaxBooksInSumDepreciationProposalJournal;

        return ret ? ret : FixedAssetsConstants::MaxBooksInSumDepreciationProposalJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        if (AssetProposalDepreciationRetriableFlight::instance().isEnabled())
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetTableMethodNext_IN</Name>
				<Source><![CDATA[
    private boolean assetTableMethodNext_IN(
        AssetBook _assetBook,
        AssetTableMethod _assetTableMethod,
        AssetGroupTableMethod_IN _assetGroupTableMethod_IN,
        Set _calculatedDepreciationGroups_IN)
    {
        boolean isNext = false;

        if (_assetBook.AssetGroupDepreciation_IN && _assetGroupTableMethod_IN)
        {
            isNext = _assetGroupTableMethod_IN.next();

            container currentDepreciationInstance_IN = [_assetBook.AssetGroup, _assetBook.BookId, _assetGroupTableMethod_IN.depDate()];
            if (_calculatedDepreciationGroups_IN.in(currentDepreciationInstance_IN))
            {
                isNext = false;
            }
        }
        else
        {
            isNext = _assetTableMethod.next();
        }

        return isNext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcGroupDepreciation_IN</Name>
				<Source><![CDATA[
    private AssetAmount calcGroupDepreciation_IN(
        AssetBook _assetBook,
        Set _calculatedDepreciationGroups_IN,
        AssetTableMethod _assetTableMethod,
        AssetGroupTableMethod_IN _assetGroupTableMethod_IN,
        AssetAmount _amountToDepreciate = 0,
        boolean _isAssetFirstYearDepreciation = false)
    {
        AssetAmount amount;

        if (_assetBook.AssetGroupDepreciation_IN && _assetGroupTableMethod_IN)
        {
            container currentDepreciationInstance_IN = [_assetBook.AssetGroup, _assetBook.BookId, _assetGroupTableMethod_IN.depDate()];

            if (!_calculatedDepreciationGroups_IN.in(currentDepreciationInstance_IN))
            {
                amount = _assetGroupTableMethod_IN.calc();
                _calculatedDepreciationGroups_IN.add(currentDepreciationInstance_IN);
            }
        }
        else
        {
            _assetTableMethod.parmIsAssetFirstYearDepreciation_IN(_isAssetFirstYearDepreciation);

            if (_amountToDepreciate > 0)
            {
                amount = _assetTableMethod.calc_IN(_amountToDepreciate);
            }
            else
            {
                amount = _assetTableMethod.calc_IN();
            }
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDepDate_IN</Name>
				<Source><![CDATA[
    private AssetTransDate getDepDate_IN(
        AssetBook _assetBook,
        AssetTableMethod _assetTableMethod,
        AssetGroupTableMethod_IN _assetGroupTableMethod_IN)
    {
        AssetTransDate depDate;

        if (_assetBook.AssetGroupDepreciation_IN && _assetGroupTableMethod_IN)
        {
            depDate = _assetGroupTableMethod_IN.depDate();
        }
        else
        {
            depDate = _assetTableMethod.depDate();
        }

        return depDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDepPeriod_IN</Name>
				<Source><![CDATA[
    private real getDepPeriod_IN(
        AssetBook _assetBook,
        AssetTableMethod _assetTableMethod,
        AssetGroupTableMethod_IN _assetGroupTableMethod_IN)
    {
        real depPeriod;

        if (_assetBook.AssetGroupDepreciation_IN && _assetGroupTableMethod_IN)
        {
            depPeriod = _assetGroupTableMethod_IN.depPeriod();
        }
        else
        {
            depPeriod = _assetTableMethod.depPeriod();
        }

        return depPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRevaluationAmount_IN</Name>
				<Source><![CDATA[
    private AssetAmount getRevaluationAmount_IN(
        AssetBook _assetBook,
        AssetTableMethod _assetTableMethod,
        AssetGroupTableMethod_IN _assetGroupTableMethod_IN)
    {
        AssetAmount revaluationAmount;

        if (_assetBook.AssetGroupDepreciation_IN && _assetGroupTableMethod_IN)
        {
            revaluationAmount = _assetGroupTableMethod_IN.revaluationAmount();
        }
        else
        {
            revaluationAmount = _assetTableMethod.revaluationAmount();
        }

        return revaluationAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPrevDepAmountExternal_IN</Name>
				<Source><![CDATA[
    private void addPrevDepAmountExternal_IN(
        AssetBook _assetBook,
        AssetTableMethod _assetTableMethod,
        AssetGroupTableMethod_IN _assetGroupTableMethod_IN,
        AssetAmount _amount)
    {
        if (_assetBook.AssetGroupDepreciation_IN
            && _assetGroupTableMethod_IN)
        {
            _assetGroupTableMethod_IN.addPrevDepAmountExternal(_amount);
        }
        else
        {
            _assetTableMethod.addPrevDepAmountExternal(_amount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAssetBookFullyDepreciated</Name>
				<Source><![CDATA[
    private boolean isAssetBookFullyDepreciated(AssetBook _assetBook, AssetAmount _lossAmount)
    {
        boolean isAssetBookFullyDepreciated;

        AssetBookTable assetBookTable = AssetBookTable::find(_assetBook.BookId);

        AmountMST netBookValueAccountingCurrency = AssetSumCalc_Trans::newAssetYear(
            _assetBook.AssetId,
            _assetBook.BookId).netBookValue();

        if (!isFixedAssetBudgetJournal
            && abs(netBookValueAccountingCurrency) <= abs(assetBookTable.NetBookValueRest)
            && (!depreciationIncomeTaxAct || (_assetBook.Status == AssetStatus::Open || _lossAmount >= 0)))
        {
            isAssetBookFullyDepreciated = true;
        }

        return isAssetBookFullyDepreciated;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>