<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqCalcCoverageEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqCalcCoverageEngine</c> class contains master planning logic for distributing existing supply
/// and ordering new supply to ensure that demand for the product can be met. 
/// </summary>
public class ReqCalcCoverageEngine
{
    #Req

    ReqCalc         reqCalc;
    ReqPlanData     reqPlanData;
    boolean         mustUseReceiptsWithCalculatedDelays;
    ReqSetupDim     setupDim;
    boolean         mustConsiderShelfLife;
    protected Map   tradableSafetyStockIssueQuantities;
    private ReqCalcPeggingOptimizationAlternativePeggingQueue lowPriorityPeggingQueue;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static ReqCalcCoverageEngine construct()
    {
        return new ReqCalcCoverageEngine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromReqCalcSetupDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the master planning coverage engine.
    /// </summary>
    /// <param name = "_reqCalc">The instance of the master planning execution class.</param>
    /// <param name = "_setupDim">Master planning parameters for a specific combination of item and coverage dimension values.</param>
    /// <returns>A new instance of the master planning coverage engine.</returns>
    public static ReqCalcCoverageEngine newFromReqCalcSetupDim(
        ReqCalc     _reqCalc, 
        ReqSetupDim _setupDim)
    {
        ReqCalcCoverageEngine engine = ReqCalcCoverageEngine::construct();
        engine.init(_reqCalc, _setupDim);
        return engine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the coverage engine.
    /// </summary>
    /// <param name = "_reqCalc">The instance of the <c>ReqCalc</c> class that represents the master planning run.</param>
    /// <param name = "_setupDim">Master planning parameters for a specific combination of item and coverage dimension values.</param>
    protected void init(
        ReqCalc     _reqCalc,
        ReqSetupDim _setupDim)
    {
        reqCalc = _reqCalc;
        reqPlanData = _reqCalc.parmReqPlanData();
        setupDim = _setupDim;
        mustConsiderShelfLife = reqPlanData.pdsUseShelfLife() && InventTable::find(_setupDim.itemId()).isShelfLifeItem();

        mustUseReceiptsWithCalculatedDelays = this.determineMustUseReceiptsWithDelaysCalculated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSetupDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an object containing master planning parameters for a specific combination of item and coverage dimension values.
    /// </summary>
    /// <returns>An object containing master planning parameters for a specific combination of item and coverage dimension values.</returns>
    public ReqSetupDim parmSetupDim()
    {
        return setupDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineMustUseReceiptsWithDelaysCalculated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether only receipts, for which delay dates have already been calculated, can be used as supply.
    /// </summary>
    /// <returns>true, if only receipts, for which futures dates have already been calculated, can be used as supply; otherwise, false.</returns>
    protected boolean determineMustUseReceiptsWithDelaysCalculated()
    {
        return reqCalc.parmMultiUserConcurrencyAllowed()
            && reqPlanData.doFuturesCalc()
            && reqPlanData.futuresSched();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReceiptValidForIssue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified receipt can be used as supply for the specified issue.
    /// </summary>
    /// <param name = "_receipt">The suggested receipt to use as supply for the issue.</param>
    /// <param name = "_issue">The issue that needs supply.</param>
    /// <param name = "_receiptConstraints">The receipt constraints imposed by the issue and planning parameters.</param>
    /// <returns>true, if the receipt can be used as supply for the issue.</returns>
    public boolean isReceiptValidForIssue(
        ReqTrans                            _receipt, 
        ReqTrans                            _issue,
        ReqCalcCoverageReceiptConstraints   _receiptConstraints = this.defineReceiptConstraintsForIssue(_issue))
    {
        return #ReqCalcCoverageIsReceiptValidForIssue(_receipt, _issue, _receiptConstraints);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTradableSafetyStockIssueQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets tradable safety stock issue coverage quantities based on the
    /// <paramref name="_tradableQuantities" /> parameter.
    /// </summary>
    /// <param name = "_tradableQuantities">
    /// A <c>Map</c> that contains <c>RecTransCov</c> <c>RecId</c>s as keys,
    /// and the tradable quantities as values.
    /// </param>
    public void setTradableSafetyStockIssueQuantities(Map _tradableQuantities)
    {
        tradableSafetyStockIssueQuantities = _tradableQuantities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstValidReceiptForIssue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the first receipt that can be used as supply for the specified issue.
    /// </summary>
    /// <param name = "_issue">The issue that needs supply.</param>
    /// <param name = "_receiptConstraints">The receipt constraints imposed by the issue and planning parameters.</param>
    /// <returns>The first valid receipt that can be used as supply </returns>
    public ReqTrans findFirstValidReceiptForIssue(
        ReqTrans                            _issue,
        ReqCalcCoverageReceiptConstraints   _receiptConstraints)
    {
        ReqTrans receipt; 

        if (_issue.RefType == ReqRefType::SafetyInvent && this.mustConsiderShelfLife())
        {
            if (_receiptConstraints.CanUseOnHand)
            {
                select firstonly forupdate receipt
                    order by PdsExpiryDate desc, ReqDate desc
                    where #ReqCalcCoverageIsReceiptValidForIssue(receipt, _issue, _receiptConstraints)
                        && receipt.RefType == ReqRefType::InventOnHand;
            }

            if (!receipt)
            {
                select firstonly forupdate receipt
                    order by PdsExpiryDate desc, ReqDate desc
                    where #ReqCalcCoverageIsReceiptValidForIssue(receipt, _issue, _receiptConstraints);
            }
        }
        else if (_receiptConstraints.MustUseLatestPossibleSupplyFirst)
        {
            receipt = this.findFirstValidReceiptForIssueUsingLatestPossibleSupplyFirst(_issue, _receiptConstraints);
        }
        else
        {
            select firstonly forupdate receipt
                order by PdsExpiryDate, ReqDate
                where #ReqCalcCoverageIsReceiptValidForIssue(receipt, _issue, _receiptConstraints);
        }

        return receipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstValidReceiptForIssueUsingLatestPossibleSupplyFirst</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the first receipt that can be used as supply for the specified issue using latest possible supply first toogle.
    /// </summary>
    /// <param name = "_issue">The issue that needs supply.</param>
    /// <param name = "_receiptConstraints">The receipt constraints imposed by the issue and planning parameters.</param>
    /// <returns>The first valid receipt that can be used as supply using latest possible supplay first</returns>
    /// <remarks>
    /// Finding the first possible supply is depending as following:
    /// When Onhand consumption strategy is before all other supply:
    ///    1. First expiring On-hand
    ///    2. Supply that can meet the demand date respecting shelf-life
    ///    3. Supply that can't meet the demand date, but is still within the negative days
    ///    4. Create a new supply (planned order).
    ///
    /// When Onhand consumption strategy is after all other supply:
    ///    1. Supply that can meet the demand date respecting shelf-life
    ///    2. First expiring On-hand
    ///    3. Supply that can't meet the demand date, but is still within the negative days
    ///    4. Create a new supply (planned order).
    /// </remarks>
    private ReqTrans findFirstValidReceiptForIssueUsingLatestPossibleSupplyFirst(
        ReqTrans                            _issue,
        ReqCalcCoverageReceiptConstraints   _receiptConstraints)
    {
        ReqTrans receipt;

        // Firstly checking if onhand should be consumed before all other supply.
        if (_receiptConstraints.CanUseOnHand)
        {
            select firstonly forupdate receipt
                    order by PdsExpiryDate, ReqDate
                    where #ReqCalcCoverageIsReceiptValidForIssue(receipt, _issue, _receiptConstraints)
                        && receipt.RefType == ReqRefType::InventOnHand;
        }

        // Secondly the logic orders supplies requirement date descending and choose latest one including onhands.
        // Negative days are not included in this query.
        if (!receipt)
        {
            TransDate maxReqDateOriginal = _receiptConstraints.MaxReqDate;
            boolean canUseOnhandOriginal = _receiptConstraints.CanUseOnHand;
            _receiptConstraints.CanUseOnHand = true;
            _receiptConstraints.MaxReqDate = _issue.ReqDate;

            select firstonly forupdate receipt
                    order by PdsExpiryDate, ReqDate desc
                    where #ReqCalcCoverageIsReceiptValidForIssue(receipt, _issue, _receiptConstraints);

            _receiptConstraints.MaxReqDate = maxReqDateOriginal;
            _receiptConstraints.CanUseOnHand = canUseOnhandOriginal;
        }

        // If no possible supply has been found and there are negative days, we run regular query.
        if (!receipt && _receiptConstraints.MaxReqDate > _issue.ReqDate)
        {
            select firstonly forupdate receipt
                    order by PdsExpiryDate, ReqDate
                    where #ReqCalcCoverageIsReceiptValidForIssue(receipt, _issue, _receiptConstraints);
        }

        return receipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstValidOnHandForIssue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the first on hand receipt that can be used as supply for the specified issue.
    /// </summary>
    /// <param name = "_issue">The issue that needs supply.</param>
    /// <param name = "_receiptConstraints">The receipt constraints imposed by the issue and planning parameters.</param>
    /// <returns>The first on hand receipt that can be used as supply for the specified issue.</returns>
    public ReqTrans findFirstValidOnHandForIssue(
        ReqTrans                            _issue,
        ReqCalcCoverageReceiptConstraints   _receiptConstraints)
    {
        ReqTrans receipt;

        if (this.canUseOnHandForIssue(_issue, _receiptConstraints))
        {
            boolean mustUseOnHandOriginal = _receiptConstraints.MustUseOnHand;
            _receiptConstraints.MustUseOnHand = true;

            receipt = this.findFirstValidReceiptForIssue(_issue, _receiptConstraints);

            _receiptConstraints.MustUseOnHand = mustUseOnHandOriginal;
        }

        return receipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUseOnHandForIssue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether on hand transactions in general can be used as supply for the specified issue.
    /// </summary>
    /// <param name = "_issue">The issue that needs supply.</param>
    /// <param name = "_receiptConstraints">The receipt constraints imposed by the issue and planning parameters.</param>
    /// <returns>true, if on hand transactions in general can be used as supply for the specified issue; otherwise, false.</returns>
    protected boolean canUseOnHandForIssue(
        ReqTrans                            _issue,
        ReqCalcCoverageReceiptConstraints   _receiptConstraints)
    {
        return _issue.RefType != ReqRefType::RequisitionLine
            && _receiptConstraints.CanUseOnHand
            && !_receiptConstraints.MustUseReceiptsWithIssueBOM    // BOMId is not specified on OnHand transactions hence they will never qualify as supply for sales line with BOM requirements
            && !_receiptConstraints.MustUseReceiptsWithIssueRoute; // RouteId is not specified on OnHand transactions hence they will never qualify as supply for sales line with BOM requirements
    }

]]></Source>
			</Method>
			<Method>
				<Name>defineReceiptConstraintsForIssue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines contraints for receipts that can be used to cover the specified issue.
    /// </summary>
    /// <param name = "_issue">The issue that needs supply.</param>
    /// <param name = "_mustUseReceiptMarkedWithIssue">A boolean value indicating whether only receipts that are marked with the issue can be used.</param>
    /// <returns>A set of receipt constraints.</returns>
    public ReqCalcCoverageReceiptConstraints defineReceiptConstraintsForIssue(
        ReqTrans        _issue,
        boolean         _mustUseReceiptMarkedWithIssue = false)
    {
        ReqCalcCoverageReceiptConstraints receiptConstraints = new ReqCalcCoverageReceiptConstraints();

        receiptConstraints.CanUseReceiptsWithForcedBOM = !setupDim.bomVersionReq() || _issue.ItemBomId;
        receiptConstraints.CanUseReceiptsWithForcedRoute = !setupDim.routeVersionReq() || _issue.ItemRouteId;
        receiptConstraints.MustUseReceiptsWithIssueBOM = setupDim.bomVersionReq() && _issue.ItemBomId;
        receiptConstraints.MustUseReceiptsWithIssueRoute = setupDim.routeVersionReq() && _issue.ItemRouteId;
        receiptConstraints.MustUseReceiptMarkedWithIssue = _mustUseReceiptMarkedWithIssue;
        receiptConstraints.CanUseFullyPeggedReceipts = false;

        if (!_mustUseReceiptMarkedWithIssue)
        {
            receiptConstraints.MinReqDate = setupDim.searchReceiptFromDate(_issue, _issue.ReqDate, reqPlanData.todaysdate());
            receiptConstraints.MaxReqDate = setupDim.searchReceiptToDate(_issue, _issue.ReqDate, reqPlanData.todaysdate(), reqPlanData);
        }

        
        if (ReqCalcCoverageEngineUseInventoryMovementsToggle::instance().isEnabled())
        {
            receiptConstraints.CanUseInventoryMovements = reqPlanData.useMovements();
        }

        receiptConstraints.MustUseReceiptsWithCalculatedDelays = mustUseReceiptsWithCalculatedDelays
            && reqPlanData.timeFenceFutures(setupDim) > 0
            && setupDim.mustItemBeFuturesMarked();

        receiptConstraints.CanUseOnHand = true;

        return receiptConstraints;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPeggingOptimizationEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether pegging optimization is enabled. 
    /// </summary>
    /// <returns>true, if pegging optimization is enabled; otherwise, false.</returns>
    public boolean isPeggingOptimizationEnabled()
    {
        boolean ret = !this.mustConsiderShelfLife()
            && setupDim.covRule() != ReqCovType::Manual
            && setupDim.isMinInventOnHandSet();
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPeggingFixedForIssue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether pegging is fixed (cannot be changed) for the specified issue.
    /// </summary>
    /// <param name = "_issue">Issue transaction.</param>
    /// <returns>true, if pegging is fixed; otherwise, false.</returns>
    protected boolean isPeggingFixedForIssue(ReqTrans _issue)
    {
        return #ReqCalcPeggingOptimizationIsPeggingFixedForIssue(_issue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustOptimizePeggingForDelayedIssue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether pegging optimization must be performed for the delayed issue.
    /// </summary>
    /// <param name = "_delayedIssue">The delayed issue.</param>
    /// <returns>true, if pegging optimization must be performed; otherwise, false.</returns>
    protected boolean mustOptimizePeggingForDelayedIssue(ReqTrans _delayedIssue)
    {
        return _delayedIssue.RefType != ReqRefType::SafetyInvent
            && !this.isPeggingFixedForIssue(_delayedIssue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxFutures</Name>
				<Source><![CDATA[
    private ReqTrans maxFutures(ReqTrans _reqTrans1, ReqTrans _reqTrans2)
    {
        if (_reqTrans1.FuturesDate < _reqTrans2.FuturesDate 
        || (_reqTrans1.FuturesDate == _reqTrans2.FuturesDate && _reqTrans1.FuturesTime < _reqTrans2.FuturesTime)
        ||  _reqTrans1.RecId == 0)
        {
            return _reqTrans2;
        }
        return _reqTrans1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDelayingPeggingForIssue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds pegging that causes the delay of the specified issue.
    /// </summary>
    /// <param name = "_delayedIssue">The delayed issue.</param>
    /// <returns>Set of pegging records.</returns>
    protected ReqCalcPeggingOptimizationPeggingSet findDelayingPeggingForIssue(ReqTrans _delayedIssue)
    {
        var delayingPeggingSet = ReqCalcPeggingOptimizationPeggingSet::construct(tradableSafetyStockIssueQuantities);

        ReqTransCov delayingPegging;
        ReqTrans delayingReceipt;
        ReqTrans latestNonDelayingReceipt;

        while select forupdate delayingPegging
            where delayingPegging.IssueRecId == _delayedIssue.RecId
                && delayingPegging.PlanVersion == _delayedIssue.PlanVersion
                && delayingPegging.ItemId == _delayedIssue.ItemId
            join delayingReceipt
                where delayingReceipt.RecId == delayingPegging.ReceiptRecId
                    && delayingReceipt.PlanVersion == _delayedIssue.PlanVersion
                    && delayingReceipt.ItemId == _delayedIssue.ItemId
                    && delayingReceipt.CovInventDimId == _delayedIssue.CovInventDimId
        {
            ReqDateTime delayingReceiptDelayDateTime = _delayedIssue.calculateMinFuturesDateTimeIssue(delayingReceipt, reqPlanData, setupDim);

            if (_delayedIssue.ReqDateDlvOrig < delayingReceiptDelayDateTime.parmDate())
            {
                delayingPeggingSet.add(delayingPegging, delayingReceipt);
            }
            else
            {
                latestNonDelayingReceipt = this.maxFutures(latestNonDelayingReceipt, delayingReceipt);
            }
        }

        delayingPeggingSet.parmLatestNonDelayingReceipt(latestNonDelayingReceipt);

        return delayingPeggingSet.totalPeggedQty() > 0 ? delayingPeggingSet : null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOptimizedPeggingForDelayedIssue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds pegging of receipts that can be taken over by the delayed issue to eliminate the delay.
    /// </summary>
    /// <param name = "_delayedIssue">The delayed issue.</param>
    /// <param name = "_requiredQty">The quantity that is required to eliminate the delay.</param>
    /// <returns>Set of pegging records.</returns>
    protected ReqCalcPeggingOptimizationPeggingSet findOptimizedPeggingForDelayedIssue(
        ReqTrans    _delayedIssue,         
        ReqQty      _requiredQty)
    {
        if (!lowPriorityPeggingQueue)
        {
            lowPriorityPeggingQueue = ReqCalcPeggingOptimizationAlternativePeggingQueue::construct();

            ReqTrans lowerPriorityIssue;
            ReqTransCov alternativePegging;
            ReqTrans alternativeReceipt;

            while select alternativeReceipt
                where alternativeReceipt.PlanVersion == _delayedIssue.PlanVersion
                    && alternativeReceipt.ItemId == _delayedIssue.ItemId
                    && alternativeReceipt.CovInventDimId == _delayedIssue.CovInventDimId
                join forupdate alternativePegging
                    where alternativePegging.ReceiptRecId == alternativeReceipt.RecId
                       && alternativePegging.PlanVersion == _delayedIssue.PlanVersion
                       && alternativePegging.ItemId == _delayedIssue.ItemId
                exists join lowerPriorityIssue
                    where alternativePegging.IssueRecId == lowerPriorityIssue.RecId
                        && lowerPriorityIssue.RefType == ReqRefType::SafetyInvent
                        && lowerPriorityIssue.PlanVersion == _delayedIssue.PlanVersion
                        && lowerPriorityIssue.ItemId == _delayedIssue.ItemId
                        && lowerPriorityIssue.CovInventDimId == _delayedIssue.CovInventDimId
                        && lowerPriorityIssue.Qty < 0
                        && !#ReqCalcPeggingOptimizationIsPeggingFixedForIssue(lowerPriorityIssue)
            {
                lowPriorityPeggingQueue.add(alternativePegging, alternativeReceipt);
                reqPlanData.inMemoryCache().registerReqTrans(alternativeReceipt);
            }
        }

        var alternativePeggingSet = ReqCalcPeggingOptimizationPeggingSet::construct(tradableSafetyStockIssueQuantities);
        var receiptConstraints = this.defineReceiptConstraintsForIssue(_delayedIssue, false);
        receiptConstraints.CanUseFullyPeggedReceipts = true;

        ReqTrans latestNonDelayingReceipt;
        boolean  alternativePeggingSetFound;

        var lowPriorityPeggingQueueEnumerator = lowPriorityPeggingQueue.getEnumerator();
        while (lowPriorityPeggingQueueEnumerator.moveNext())
        {
            ReqTransCov alternativePegging = lowPriorityPeggingQueueEnumerator.current();
            ReqTrans    alternativeReceipt = reqPlanData.inMemoryCache().findReqTransByRecId(alternativePegging.ReceiptRecId);

            if (this.canAlternativeReceiptReduceDelay(alternativeReceipt, _delayedIssue, receiptConstraints))
            {
                latestNonDelayingReceipt = this.maxFutures(latestNonDelayingReceipt, alternativeReceipt);

                alternativePeggingSet.add(alternativePegging, alternativeReceipt);
                if (alternativePeggingSet.totalPeggedQty() >= _requiredQty)
                {
                    alternativePeggingSetFound = true;
                    break;
                }
            }
        }

        alternativePeggingSet.parmLatestNonDelayingReceipt(latestNonDelayingReceipt);

        return alternativePeggingSetFound ? alternativePeggingSet : null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAlternativeReceiptReduceDelay</Name>
				<Source><![CDATA[
    private boolean canAlternativeReceiptReduceDelay(ReqTrans _alternativeReceipt,
                                                     ReqTrans _delayedIssue,
                                                     ReqCalcCoverageReceiptConstraints _receiptConstraints)
    {
        boolean canAlternativeReceiptReduceDelay;
        ReqDateTime delayedIssueDateTime = _delayedIssue.futuresDateTime();

        // ensure the alternative supply's delay is earlier than demand's before starting more expensive computation
        if (this.isReceiptValidForIssue(_alternativeReceipt, _delayedIssue, _receiptConstraints)
            && (_alternativeReceipt.FuturesDate <= _delayedIssue.ReqDateDlvOrig || _alternativeReceipt.futuresDateTime().isLessThan(delayedIssueDateTime)))
        {
            ReqDateTime alternativeReceiptFuturesDateTime = _delayedIssue.calculateMinFuturesDateTimeIssue(_alternativeReceipt, reqPlanData, setupDim);

            // ensure the actual delay to be applied is still beneficial for demand 
            if (alternativeReceiptFuturesDateTime.parmDate() <= _delayedIssue.ReqDateDlvOrig
                || alternativeReceiptFuturesDateTime.isLessThan(delayedIssueDateTime))
            {
                canAlternativeReceiptReduceDelay = true;
            }
        }

        return canAlternativeReceiptReduceDelay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>swapPegging</Name>
				<Source><![CDATA[
    /// <summary>
    /// Pegs issues from the current set with receipts from the alternative set and vice versa.
    /// </summary>
    /// <param name = "_currentPeggingSet">Current pegging.</param>
    /// <param name = "_alternativePeggingSet">Alternative pegging.</param>
    protected void swapPegging(
        ReqCalcPeggingOptimizationPeggingSet _currentPeggingSet,
        ReqCalcPeggingOptimizationPeggingSet _alternativePeggingSet)
    {
        if (_alternativePeggingSet.totalPeggedQty() < _currentPeggingSet.totalPeggedQty() 
            || _currentPeggingSet.totalPeggedQty() == 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        Enumerator currentPeggingEnumerator = _currentPeggingSet.getEnumerator();
        boolean continueSwapping = currentPeggingEnumerator.moveNext(); 

        Enumerator alternativePeggingEnumerator = _alternativePeggingSet.getEnumerator();
        alternativePeggingEnumerator.moveNext(); 

        ReqTranscov currentPegging = currentPeggingEnumerator.current();
        ReqTransCov alternativePegging = alternativePeggingEnumerator.current();

        while (continueSwapping)
        {
            Qty tradableQuantity = _alternativePeggingSet.tradableQuantity(alternativePegging);
            
            if (tradableQuantity == 0)
            {
                // Tradable quantity can be 0 if ReqtransCov was created only for actions or if it's covering safety stock which is
                // already being released and used for something else (e.g. due to minimum keys or using shelf life).
                boolean hasNextAlternativePegging = alternativePeggingEnumerator.moveNext();
                if (!hasNextAlternativePegging)
                {
                    throw error(Error::wrongUseOfFunction(funcName()));
                }
                alternativePegging = alternativePeggingEnumerator.current();
                continue;
            }

            RecId currentIssueRecId = currentPegging.IssueRecId;
            
            ReqTrans lowerPriorityIssue = reqPlanData.inMemoryCache().findReqTransByRecId(alternativePegging.IssueRecId);
            ReqTrans delayingReceipt = _currentPeggingSet.peggedReceipt(currentPegging);
            lowerPriorityIssue.setFuturesDateTimeIssue(delayingReceipt, reqPlanData, setupDim);
            lowerPriorityIssue.update(reqPlanData);

            ReqQty swappedQty = min(abs(currentPegging.Qty), abs(tradableQuantity ));

            this.updateTradableQuantity(alternativePegging, tradableQuantity - swappedQty);

            if (swappedQty < abs(currentPegging.Qty))
            {
                ReqTransCov currentPeggingSwapped = currentPegging.data();
                currentPeggingSwapped.IssueRecId = alternativePegging.IssueRecId;
                currentPeggingSwapped.setAbsoluteQty(swappedQty);
                currentPeggingSwapped.insert();

                currentPegging.reduceAbsoluteQtyBy(swappedQty);
                currentPegging.update();
            }
            else
            {
                currentPegging.IssueRecId = alternativePegging.IssueRecId;
                currentPegging.update();

                continueSwapping = currentPeggingEnumerator.moveNext();
                currentPegging = continueSwapping ? currentPeggingEnumerator.current() : null;
            }
            ReqTrans alternativeReceipt = _alternativePeggingSet.peggedReceipt(alternativePegging);
            str hashKey = ReqCalcPeggingOptimizationAlternativePeggingQueue::reqTransDateTimeHashKey(alternativeReceipt.futuresDateTime(), alternativeReceipt);

            lowPriorityPeggingQueue.remove(hashKey, alternativePegging);
            if (swappedQty < abs(alternativePegging.Qty))
            {
                ReqTransCov alternativePeggingSwapped = alternativePegging.data();
                alternativePeggingSwapped.IssueRecId = currentIssueRecId;
                alternativePeggingSwapped.setAbsoluteQty(swappedQty);
                alternativePeggingSwapped.insert();

                alternativePegging.reduceAbsoluteQtyBy(swappedQty);
                alternativePegging.update();
                lowPriorityPeggingQueue.add(alternativePegging, alternativeReceipt);
            }
            else 
            {
                alternativePegging.IssueRecId = currentIssueRecId;
                alternativePegging.update();

                alternativePegging = alternativePeggingEnumerator.moveNext() ? alternativePeggingEnumerator.current() : null;
            }

            reqPlanData.reqLog().NumOfPeggingOptimizationSwaps++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTradableQuantity</Name>
				<Source><![CDATA[
    protected void updateTradableQuantity(ReqTransCov _pegging, Qty _newQuantity)
    {
        if (tradableSafetyStockIssueQuantities && tradableSafetyStockIssueQuantities.exists(_pegging.RecId))
        {
            tradableSafetyStockIssueQuantities.insert(_pegging.RecId, _newQuantity);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>optimizePeggingForDelayedIssue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Optimizes pegging between existing issues and receipts to reduce delay for the specified issue. 
    /// </summary>
    /// <param name = "_delayedIssue">The delayed issue.</param>
    public void optimizePeggingForDelayedIssue(ReqTrans _delayedIssue)
    {
        System.Diagnostics.Stopwatch watch = System.Diagnostics.Stopwatch::StartNew();

        if (this.isPeggingOptimizationEnabled() && this.mustOptimizePeggingForDelayedIssue(_delayedIssue))
        {
            reqPlanData.reqLog().NumOfPeggingOptimizationAttempts++;

            var delayingPeggingSet = this.findDelayingPeggingForIssue(_delayedIssue);

            if (delayingPeggingSet)
            {
                var optimizedPeggingSet = this.findOptimizedPeggingForDelayedIssue(_delayedIssue, delayingPeggingSet.totalPeggedQty());

                if (optimizedPeggingSet)
                {
                    this.swapPegging(delayingPeggingSet, optimizedPeggingSet);

                    _delayedIssue.initializeFutures(reqPlanData);

                    _delayedIssue.setFuturesDateTimeIssue(this.maxFutures(delayingPeggingSet.parmLatestNonDelayingReceipt(), optimizedPeggingSet.parmLatestNonDelayingReceipt()),
                        reqPlanData,
                        setupDim);

                    reqPlanData.reqLog().NumOfPeggingOptimizationSuccessfulAttempts++;
                }
            }
        }

        reqPlanData.reqLog().MillisecondsPeggingOptimization += watch.get_ElapsedMilliseconds();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustConsiderShelfLife</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether shelf life must be considered.
    /// </summary>
    /// <returns>true, if shelf life must be considered; otherwise, false.</returns>
    public boolean mustConsiderShelfLife()
    {
        return mustConsiderShelfLife;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>