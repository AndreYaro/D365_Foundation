<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgMaterialAvailabilityCheckOnDemandService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>JmgMaterialAvailabilityCheckOnDemandService</c> class provides the service operation for
/// running material availability check on demand for selected production orders.
/// </summary>
internal final class JmgMaterialAvailabilityCheckOnDemandService extends SysOperationServiceBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>materialAvailabilityCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run the material availability check for the selected production orders.
    /// Assign the material status to the production order IDs and updates critical on-hand inventory.
    /// </summary>
    /// <param name = "_contract"> The <c>JmgMaterialAvailabilityCheckOnDemandContract</c> record </param>
    [Hookable(false)]
    internal void materialAvailabilityCheck(JmgMaterialAvailabilityCheckOnDemandContract _contract)
    {
        JmgShopSupervisorReleaseOrdersPickingListProvider pickingListProvider = JmgShopSupervisorReleaseOrdersPickingListProvider::construct(null);

        // Clean JmgMaterialAvailabilityCheckOrders records for orders that are no longer in scheduled state.
        this.cleanJmgMaterialAvailablityCheckOrders();
      
        ttsbegin;   

        ListIterator it = new ListIterator(_contract.parmSelectedProdOrders());
        RecordInsertList jmgMaterialAvailabilityCheckOrders = new RecordInsertList(tableNum(JmgMaterialAvailabilityCheckOrder));

        setPrefix('@SCM:JmgMaterialAvailabilityCheckExecuted');
        while (it.more())
        {
            var status = pickingListProvider.getMaterialAvailabilityForProdOrder(it.value());
            JmgMaterialAvailabilityCheckOrder jmgMaterialAvailabilityCheckOrder = JmgMaterialAvailabilityCheckOrder::findByProdId(it.value(), true);
            
            jmgMaterialAvailabilityCheckOrder.LastUpdated = DateTimeUtil::newDateTime(JmgProfileSeconds::getSysDate(), JmgProfileSeconds::getSysTime(),DateTimeUtil::getUserPreferredTimeZone());;
            jmgMaterialAvailabilityCheckOrder.MaterialStatus = status;

            if (jmgMaterialAvailabilityCheckOrder)
            {
                jmgMaterialAvailabilityCheckOrder.update();
            }
            else
            {
                jmgMaterialAvailabilityCheckOrder.ProdId = it.value();
                jmgMaterialAvailabilityCheckOrders.add(jmgMaterialAvailabilityCheckOrder);
            }

            info(it.value());
            it.next();
        }

        jmgMaterialAvailabilityCheckOrders.insertDatabase();
                
        ttscommit;

        if (!this.isExecutingInBatch())
        {
            // Notify the form to execute display method in order to update the material status images
            _contract.parmFormRun().refreshMaterialStatus();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanJmgMaterialAvailablityCheckOrders</Name>
				<Source><![CDATA[
    private void cleanJmgMaterialAvailablityCheckOrders()
    {
        ttsbegin;

        ProdSupervisorScheduledOrders prodSupervisorScheduledOrders;
        JmgMaterialAvailabilityCheckOrder jmgMaterialAvailabilityCheckOrder;

        delete_from jmgMaterialAvailabilityCheckOrder
            notexists join prodSupervisorScheduledOrders
            where prodSupervisorScheduledOrders.ProdId == jmgMaterialAvailabilityCheckOrder.ProdId;

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>