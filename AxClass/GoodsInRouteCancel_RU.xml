<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GoodsInRouteCancel_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class GoodsInRouteCancel_RU extends GoodsInRouteEngine_RU
{
    NoYes               stornoPhysical;
    DialogField         dialogStornoPhysical;

    NoYes               storno;
    DialogField         dialogStorno;

    NoYes               creditRemaining;
    DialogField         dialogCreditRemaining;

    SalesTable          salesTable;

    SalesLine           salesLineTmp;
    SalesTable          salesTableTmp;
    TaxWorkRegulation   taxWorkRegulationTmp;
    MarkupTrans         markupTransTmp;

    #define.CurrentVersion(3)
    #localmacro.CurrentList
        stornoPhysical,
        storno,
        creditRemaining,
        correct
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>changeSalesLineFields</Name>
				<Source><![CDATA[
    private boolean changeSalesLineFields(SalesLine _salesLineTo,
                                          Common    _commonFrom,
                                          boolean   _insertTmp = false,
                                          boolean   _forceCalcLineAmount = true,
                                          Qty       _qty = 0)
    {
        CustInvoiceTrans     custInvoiceTransFrom;
        SalesLine            salesLineFrom;

        boolean              changed;
        SalesMarkup          salesMarkup;
        SalesLineAmount      lineAmount;

        void insertTmp()
        {
            if (_insertTmp)
            {
                salesLineTmp.clear();
                salesLineTmp.data(_salesLineTo);
                salesLineTmp.doInsert();
            }
        }

        void checkAndChange(fieldId _fieldTo, fieldId _fieldFrom)
        {
            if (_salesLineTo.(_fieldTo) != _commonFrom.(_fieldFrom))
            {
                if (!changed)
                    insertTmp();

                _salesLineTo.(_fieldTo) =  _commonFrom.(_fieldFrom);
                changed = true;
            }
        }
        ;

        switch (_commonFrom.TableId)
        {
            case tableNum(CustInvoiceTrans):
                custInvoiceTransFrom = _commonFrom;
                break;
            case tableNum(SalesLine):
                salesLineFrom        = _commonFrom;
                break;
        }

        if (custInvoiceTransFrom)
        {
            checkAndChange(fieldNum(SalesLine, SalesPrice),         fieldNum(CustInvoiceTrans, SalesPrice));
            checkAndChange(fieldNum(SalesLine, SalesUnit),          fieldNum(CustInvoiceTrans, SalesUnit));
            checkAndChange(fieldNum(SalesLine, LinePercent),        fieldNum(CustInvoiceTrans, LinePercent));
            checkAndChange(fieldNum(SalesLine, LineAmount),         fieldNum(CustInvoiceTrans, LineAmount));
            checkAndChange(fieldNum(SalesLine, LineDisc),           fieldNum(CustInvoiceTrans, LineDisc));
            checkAndChange(fieldNum(SalesLine, MultiLnDisc),        fieldNum(CustInvoiceTrans, MultiLnDisc));
            checkAndChange(fieldNum(SalesLine, MultiLnPercent),     fieldNum(CustInvoiceTrans, MultiLnPercent));
            checkAndChange(fieldNum(SalesLine, TaxGroup),           fieldNum(CustInvoiceTrans, TaxGroup));
            checkAndChange(fieldNum(SalesLine, TaxItemGroup),       fieldNum(CustInvoiceTrans, TaxItemGroup));
            checkAndChange(fieldNum(SalesLine, DefaultDimension),   fieldNum(CustInvoiceTrans, DefaultDimension));
            checkAndChange(fieldNum(SalesLine, PriceUnit),          fieldNum(CustInvoiceTrans, PriceUnit));
            checkAndChange(fieldNum(SalesLine, CurrencyCode),       fieldNum(CustInvoiceTrans, CurrencyCode));

            if (custInvoiceTransFrom.SalesMarkup)
                salesMarkup = custInvoiceTransFrom.SalesMarkup * (-_qty) / custInvoiceTransFrom.Qty;

            if (_salesLineTo.SalesMarkup != salesMarkup ||
                _salesLineTo.InventTransIdReturn)
            {
                if (!changed)
                    insertTmp();

                _salesLineTo.SalesMarkup = salesMarkup;
                _salesLineTo.InventTransIdReturn = '';
                changed = true;
            }
        }
        else if (salesLineFrom)
        {
            checkAndChange(fieldNum(SalesLine, SalesPrice),         fieldNum(SalesLine, SalesPrice));
            checkAndChange(fieldNum(SalesLine, SalesUnit),          fieldNum(SalesLine, SalesUnit));
            checkAndChange(fieldNum(SalesLine, LinePercent),        fieldNum(SalesLine, LinePercent));
            checkAndChange(fieldNum(SalesLine, LineAmount),         fieldNum(SalesLine, LineAmount));
            checkAndChange(fieldNum(SalesLine, LineDisc),           fieldNum(SalesLine, LineDisc));
            checkAndChange(fieldNum(SalesLine, MultiLnDisc),        fieldNum(SalesLine, MultiLnDisc));
            checkAndChange(fieldNum(SalesLine, MultiLnPercent),     fieldNum(SalesLine, MultiLnPercent));
            checkAndChange(fieldNum(SalesLine, TaxGroup),           fieldNum(SalesLine, TaxGroup));
            checkAndChange(fieldNum(SalesLine, TaxItemGroup),       fieldNum(SalesLine, TaxItemGroup));
            checkAndChange(fieldNum(SalesLine, DefaultDimension),   fieldNum(SalesLine, DefaultDimension));
            checkAndChange(fieldNum(SalesLine, SalesMarkup),        fieldNum(SalesLine, SalesMarkup));
            checkAndChange(fieldNum(SalesLine, PriceUnit),          fieldNum(SalesLine, PriceUnit));
            checkAndChange(fieldNum(SalesLine, InventTransIdReturn),fieldNum(SalesLine, InventTransIdReturn));
        }

        if (changed && _forceCalcLineAmount)
        {
            lineAmount = _salesLineTo.calcLineAmountForced(_qty);

            if (custInvoiceTransFrom && ! lineAmount)
            {
                lineAmount = custInvoiceTransFrom.LineAmount * (-_qty) / custInvoiceTransFrom.Qty;
            }

            _salesLineTo.LineAmount = lineAmount;
        }

        return changed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeSalesTableFields</Name>
				<Source><![CDATA[
    private boolean changeSalesTableFields(SalesTable _salesTableTo,
                                           Common     _commonFrom,
                                           boolean    _insertTmp = false)
    {
        CustInvoiceJour custInvoiceJourFrom;
        SalesTable      salesTableFrom;
        boolean         changed;
        Percent         endDiscP;

        void insertTmp()
        {
            if (_insertTmp)
            {
                salesTableTmp.clear();
                salesTableTmp.data(_salesTableTo);
                salesTableTmp.doInsert();
            }
        }

        void checkAndChange(fieldId _fieldTo, fieldId _fieldFrom)
        {
            if (_salesTableTo.(_fieldTo) != _commonFrom.(_fieldFrom))
            {
                if (!changed)
                    insertTmp();

                _salesTableTo.(_fieldTo) =  _commonFrom.(_fieldFrom);
                changed = true;
            }
        }

        switch (_commonFrom.TableId)
        {
            case tableNum(CustInvoiceJour):
                custInvoiceJourFrom = _commonFrom;
                break;
            case tableNum(SalesTable):
                salesTableFrom      = _commonFrom;
                break;
        }

        if (custInvoiceJourFrom)
        {
            checkAndChange(fieldNum(SalesTable, CurrencyCode),      fieldNum(CustInvoiceJour, CurrencyCode));
            checkAndChange(fieldNum(SalesTable, InclTax),           fieldNum(CustInvoiceJour, InclTax));
            checkAndChange(fieldNum(SalesTable, FixedExchRate),     fieldNum(CustInvoiceJour, ExchRate));
            checkAndChange(fieldNum(SalesTable, TaxGroup),          fieldNum(CustInvoiceJour, TaxGroup));
            checkAndChange(fieldNum(SalesTable, DefaultDimension),  fieldNum(CustInvoiceJour, DefaultDimension));
            checkAndChange(fieldNum(SalesTable, PostingProfile),    fieldNum(CustInvoiceJour, PostingProfile));

            checkAndChange(fieldNum(SalesTable, InvoiceAccount),    fieldNum(CustInvoiceJour, InvoiceAccount));
            checkAndChange(fieldNum(SalesTable, CustAccount),       fieldNum(CustInvoiceJour, OrderAccount));

            //endDisc
            if (custInvoiceJour.SalesBalance)
            {
                endDiscP = CurrencyExchangeHelper::amount(custInvoiceJour.EndDisc / custInvoiceJour.SalesBalance * 100);
                if (endDiscP != _salesTableTo.DiscPercent)
                {
                    if (!changed)
                        insertTmp();

                    _salesTableTo.DiscPercent = endDiscP;
                    changed = true;
                }
            }
        }
        else if (salesTableFrom)
        {
            checkAndChange(fieldNum(SalesTable, CurrencyCode),      fieldNum(SalesTable, CurrencyCode));
            checkAndChange(fieldNum(SalesTable, InclTax),           fieldNum(SalesTable, InclTax));
            checkAndChange(fieldNum(SalesTable, FixedExchRate),     fieldNum(SalesTable, FixedExchRate));
            checkAndChange(fieldNum(SalesTable, TaxGroup),          fieldNum(SalesTable, TaxGroup));
            checkAndChange(fieldNum(SalesTable, DefaultDimension),  fieldNum(SalesTable, DefaultDimension));
            checkAndChange(fieldNum(SalesTable, PostingProfile),    fieldNum(SalesTable, PostingProfile));

            checkAndChange(fieldNum(SalesTable, InvoiceAccount),    fieldNum(SalesTable, InvoiceAccount));
            checkAndChange(fieldNum(SalesTable, CustAccount),       fieldNum(SalesTable, CustAccount));
        }

        return changed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();
        ;
        dialogStornoPhysical    = dialog.addFieldValue(extendedTypeStr(NoYesId),
                                                       InventParameters::find().StornoPhysicalPosting_RU,
                                                       "@GLS114781",
                                                       "@SYS10336");

        dialogStorno            = dialog.addFieldValue(extendedTypeStr(NoYesId),
                                                       CustParameters::find().CreditError,
                                                       "@SYS6054",
                                                       "@SYS19513");

        dialogCreditRemaining   = dialog.addFieldValue(extendedTypeStr(NoYesId),
                                                       creditRemaining,
                                                       "@SYS25785",
                                                       "@SYS25792");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();
        ;
        stornoPhysical  = dialogStornoPhysical.value();
        storno          = dialogStorno.value();
        creditRemaining = dialogCreditRemaining.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes goods in route journal.
    /// </summary>
    protected void initJournal()
    {
        super();
        goodsInRouteJour.Cancel = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        ;
        stornoPhysical  = InventParameters::find().StornoPhysicalPosting_RU;
        storno          = CustParameters::find().CreditError;
        creditRemaining = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxWorkRegulation</Name>
				<Source><![CDATA[
    private void insertTaxWorkRegulation(Voucher        _voucher,
                                         TransDate      _date,
                                         InventTransId  _inventTransId,
                                         RefRecId       _headingRecID,
                                         tableId        _headingTableID,
                                         boolean        _sumIncludeTax,
                                         real           _factor)
    {
        TaxWorkRegulation taxWorkRegulation;
        TaxTrans          taxTrans;
        ;

        while select sum(SourceRegulateAmountCur), sum(SourceBaseAmountCur), sum(SourceTaxAmountCur) from taxTrans
            group by TaxCode, TaxDirection, CurrencyCode
            where taxTrans.Voucher                  == _voucher         &&
                  taxTrans.TransDate                == _date            &&
                  taxTrans.InventTransId            == _inventTransId   &&
                  taxTrans.SourceRegulateAmountCur  != 0
        {
            select firstonly forupdate taxWorkRegulation
                where taxWorkRegulation.HeadingTableId  == _headingTableID  &&
                      taxWorkRegulation.HeadingRecId    == _headingRecID    &&
                      taxWorkRegulation.TaxCode         == taxTrans.TaxCode &&
                      taxWorkRegulation.TaxDirection    == taxTrans.TaxDirection;

            taxWorkRegulation.TaxRegulationAmountCur += - CurrencyExchangeHelper::amount(_factor * taxTrans.SourceRegulateAmountCur);

            if (!_sumIncludeTax)
                taxWorkRegulation.SourceBaseAmountCurRegulated += - CurrencyExchangeHelper::amount(_factor * taxTrans.SourceBaseAmountCur, taxTrans.CurrencyCode);
            else
                taxWorkRegulation.SourceBaseAmountCurRegulated += - CurrencyExchangeHelper::amount(_factor * abs(taxTrans.SourceBaseAmountCur + taxTrans.SourceTaxAmountCur - taxTrans.SourceRegulateAmountCur));

            if (! taxWorkRegulation.RecId)
            {
                taxWorkRegulation.HeadingRecId      = _headingRecID;
                taxWorkRegulation.HeadingTableId    = _headingTableID;
                taxWorkRegulation.TaxDirection      = taxTrans.TaxDirection;
                taxWorkRegulation.TaxCode           = taxTrans.TaxCode;
                taxWorkRegulation.insert();
            }
            else
            {
                taxWorkRegulation.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        salesLineTmp.setTmp();
        salesTableTmp.setTmp();
        taxWorkRegulationTmp.setTmp();
        markupTransTmp.setTmp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        ;
        return [#CurrentVersion,#CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreditRemaining</Name>
				<Source><![CDATA[
    public NoYes parmCreditRemaining(NoYes _creditRemaining = creditRemaining)
    {
        creditRemaining = _creditRemaining;
        return creditRemaining;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStorno</Name>
				<Source><![CDATA[
    public NoYes parmStorno(NoYes _storno = storno)
    {
        storno = _storno;
        return storno;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStornoPhysical</Name>
				<Source><![CDATA[
    public NoYes parmStornoPhysical(NoYes _stornoPhysical = stornoPhysical)
    {
        stornoPhysical = _stornoPhysical;
        return stornoPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInvoice</Name>
				<Source><![CDATA[
    private Set postInvoice()
    {
        SalesFormLetter     salesFormLetter;
        Map                 packedRecords;

        if (!packedRecords)
        {
            packedRecords = new Map(typeName2Type(extendedTypeStr(recId)), Types::Record);
        }

        packedRecords.insert(salesTable.RecId, salesTable);

        salesFormLetter = SalesFormLetter::construct(DocumentStatus::Invoice);
        salesFormLetter.parmGoodsInRouteId_RU(goodsInRouteJour.GoodsInRouteId);
        salesFormLetter.parmDocumentStornoId_RU(custInvoiceJour.InvoiceId);
        salesFormLetter.parmNeedTransIDTransit_RU(true);
        salesFormLetter.parmDataSourceRecordsPacked(packedRecords.pack());

        if (correct)
        {
            salesFormLetter.parmCorrect_RU(correct);
            salesFormLetter.parmCorrectedInvoiceId_RU(custInvoiceJour.InvoiceId);
            salesFormLetter.parmCorrectedInvoiceDate_RU(custInvoiceJour.InvoiceDate);
        }

        salesFormLetter.update(salesTable,
                               updateDate,
                               SalesUpdate::DeliverNow,
                               AccountOrder::None,
                               false,
                               false,
                               false,
                               creditRemaining,
                               conNull(),
                               storno,
                               stornoPhysical);

        return Set::create(salesFormLetter.getOutputContract().parmAllJournalsPacked());
    }

]]></Source>
			</Method>
			<Method>
				<Name>restoreSavedFields</Name>
				<Source><![CDATA[
    private void restoreSavedFields()
    {
        TaxWorkRegulation taxWorkRegulation;
        MarkupTrans       markupTrans;
        SalesLine         salesLine;
        ;

        while select salesLineTmp
        {
            salesLine = SalesLine::findInventTransId(salesLineTmp.InventTransId, true);

            this.changeSalesLineFields(salesLine, salesLineTmp);
            salesLine.update(false);
            salesLineTmp.doDelete();
        }

        while select salesTableTmp
        {
            salesTable = custInvoiceJour.salesTable(true);
            this.changeSalesTableFields(salesTable, salesTableTmp);
            salesTable.doUpdate();
            salesTableTmp.doDelete();
        }

        while select taxWorkRegulationTmp
        {
            taxWorkRegulation.clear();
            taxWorkRegulation.data(taxWorkRegulationTmp);
            taxWorkRegulation.insert();
            taxWorkRegulationTmp.doDelete();
        }

        while select markupTransTmp
        {
            markupTrans.clear();
            markupTrans.data(markupTransTmp);
            markupTrans.insert();
            markupTransTmp.doDelete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesUpdateSaveLineFields</Name>
				<Source><![CDATA[
    private void salesUpdateSaveLineFields(SalesLine _salesLine,
                                           CustInvoiceTrans _custInvoiceTrans,
                                           Qty _qty,
                                           Qty _inventQty,
                                           Qty _pdsQty)
    {
        this.changeSalesLineFields(_salesLine, _custInvoiceTrans, true, true, _qty);

        _salesLine.SalesDeliverNow = _qty;
        _salesLine.InventDeliverNow =  _inventQty;
        _salesLine.PdsCWInventDeliverNow = _pdsQty;
        _salesLine.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesUpdateSaveTableFields</Name>
				<Source><![CDATA[
    private void salesUpdateSaveTableFields()
    {
        SalesLine   salesLine;
        MarkupTrans markupTrans;
        TaxWorkRegulation taxWorkRegulation;

    //check&update salesTable
        if (this.changeSalesTableFields(salesTable, custInvoiceJour, true))
        // <GEERU>
        {
            salesTable.update();
        }
        // </GEERU>

    //taxWorkRegulation
        while select forupdate taxWorkRegulation
            where taxWorkRegulation.HeadingTableId == salesTable.TableId
                && taxWorkRegulation.HeadingRecId == salesTable.RecId
        {
            taxWorkRegulationTmp.clear();
            taxWorkRegulationTmp.data(taxWorkRegulation);
            taxWorkRegulationTmp.doInsert();
            taxWorkRegulation.delete();
        }

    //markup from header
        while select forupdate markupTrans
            where
                markupTrans.TransRecId   == salesTable.RecId   &&
                markupTrans.TransTableId == salesTable.TableId &&
                !markupTrans.Voucher
        {
            markupTransTmp.clear();
            markupTransTmp.data(markupTrans);
            markupTransTmp.doInsert();
            markupTrans.delete();
        }

    //markup from lines
        while select RecId from salesLine
            where salesLine.SalesId == salesTable.SalesId
            join forupdate markupTrans
            where
                markupTrans.TransRecId   == salesLine.RecId   &&
                markupTrans.TransTableId == salesLine.TableId &&
                !markupTrans.Voucher
        {
            markupTransTmp.clear();
            markupTransTmp.data(markupTrans);
            markupTransTmp.doInsert();
            markupTrans.delete();
        }

    //salesLine delivery now
        while select forupdate salesLine
            where
                salesLine.SalesId == salesTable.SalesId &&
                salesLine.SalesDeliverNow != 0
        {
            salesLine.SalesDeliverNow = 0;
            salesLine.InventDeliverNow = 0;
            salesLine.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transSign</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets sign of the transactions.
    /// </summary>
    /// <returns>
    ///     Always returns -1.
    /// </returns>
    public Integer transSign()
    {
        return -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version     version = RunBase::getVersion(_packedClass);
        container   packedClass;

        switch (version)
        {
            case #CurrentVersion:
                [version,
                 #CurrentList,
                 packedClass] = _packedClass;
                return super(packedClass);
            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    protected void update()
    {
        CustInvoiceTrans    custInvoiceTrans;
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        InventQty           inventQty;
        Set                 postedJournalList;
        SetEnumerator       setEnumerator;
        CustInvoiceJour     custInvoiceJourPosted;
        CustInvoiceTrans    custInvoiceTransPosted;
        SalesLine           salesLine;
        ;

        super();

        salesTable = custInvoiceJour.salesTable(true);
        this.salesUpdateSaveTableFields();

        while select tmpFrmVirtual
            where tmpFrmVirtual.NoYes
               && tmpFrmVirtual.Qty
        {
            custInvoiceTrans  = CustInvoiceTrans::findRecId(tmpFrmVirtual.RecordNo);
            salesLine         = custInvoiceTrans.salesLine(true);

            this.salesUpdateSaveLineFields(salesLine, custInvoiceTrans,
                                           tmpFrmVirtual.Qty,
                                           tmpFrmVirtual.inventQty_RU,
                                           tmpFrmVirtual.PdsCWQty);
            this.insertTaxWorkRegulation(custInvoiceJour.LedgerVoucher,
                                         custInvoiceJour.InvoiceDate,
                                         custInvoiceTrans.InventTransId,
                                         salesTable.RecId,
                                         salesTable.TableId,
                                         salesTable.InclTax,
                                         tmpFrmVirtual.Qty / custInvoiceTrans.Qty);

            inventQty = tmpFrmVirtual.inventQty_RU;

            while select forupdate inventTrans
                where inventTrans.StatusReceipt == StatusReceipt::None
                   && inventTrans.StatusIssue   == StatusIssue::Sold
                   && inventTrans.ReturnInventTransOrigin
                   && inventTrans.InventTransOriginTransit_RU
                   && inventTrans.InvoiceId == custInvoiceJour.InvoiceId
                   && inventTrans.InvoiceReturned == NoYes::No
            exists join inventTransOrigin
                where inventTransOrigin.RecId           == inventTrans.InventTransOrigin
                   && inventTransOrigin.InventTransId   == custInvoiceTrans.InventTransId
            {
                if (inventTrans.ReturnInventTransOrigin == inventTrans.InventTransOrigin)
                {
                    continue;
                }

                if (inventQty > inventTrans.Qty)
                    inventTrans.updateSplit(inventQty, tmpFrmVirtual.PdsCWQty);

                inventTrans.ReturnInventTransOrigin = 0;
                inventTrans.update();

                inventQty -= inventTrans.Qty;
                if (! inventQty)
                    break;
            }
        }

        this.insertTaxWorkRegulation(custInvoiceJour.LedgerVoucher,
                                     custInvoiceJour.InvoiceDate,
                                     '',
                                     salesTable.RecId,
                                     salesTable.TableId,
                                     salesTable.InclTax,
                                     -1);

        this.initJournal();

        this.updateInvoiceMarkupPre();
        postedJournalList = this.postInvoice();
        this.updateInvoiceMarkupPost();

        this.restoreSavedFields();

        setEnumerator = postedJournalList.getEnumerator();
        while (setEnumerator.moveNext())
        {
            custInvoiceJourPosted = setEnumerator.current();
            goodsInRouteJour.CancelInvoiceRecId = custInvoiceJourPosted.RecId;

            this.updatePostedInvoiceMarkup(custInvoiceJourPosted);
            this.updatePostedInvoiceTax(custInvoiceJourPosted);

            while select custInvoiceTransPosted
                where custInvoiceTransPosted.InvoiceId              == custInvoiceJourPosted.InvoiceId
                   && custInvoiceTransPosted.InvoiceDate            == custInvoiceJourPosted.InvoiceDate
                   && custInvoiceTransPosted.NumberSequenceGroup    == custInvoiceJourPosted.NumberSequenceGroup
                   && custInvoiceTransPosted.SalesId                == custInvoiceJourPosted.SalesId
            {
                this.initJournalLine(custInvoiceTransPosted);
                goodsInRouteTrans.SalesQty  = custInvoiceTransPosted.Qty;
                goodsInRouteTrans.InventQty = custInvoiceTransPosted.InventQty;
                goodsInRouteTrans.PdsCWQty  = custInvoiceTransPosted.PdsCWQty;
                goodsInRouteTrans.AmountCur = custInvoiceTransPosted.LineAmount;
                goodsInRouteTrans.TaxAmount = custInvoiceTransPosted.TaxAmount;
                goodsInRouteJour.TaxAmount += goodsInRouteTrans.TaxAmount;
                this.writeJournalLine();

                this.updatePostedInvoiceMarkup(custInvoiceTransPosted);
            }
            goodsInRouteJour.AmountCur = custInvoiceJourPosted.InvoiceAmount;
            goodsInRouteJour.EndDisc   = custInvoiceJourPosted.EndDisc;
            goodsInRouteJour.Voucher   = custInvoiceJourPosted.LedgerVoucher;

            break; // assume that we have an only posted invoice
        }
        this.writeJournal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInvoiceMarkupPost</Name>
				<Source><![CDATA[
    private void updateInvoiceMarkupPost()
    {
        MarkupTrans         markupTrans;
        CustInvoiceTrans    custInvoiceTrans;

        while select forupdate markupTrans
            where markupTrans.TransTableId                  == custInvoiceJour.TableId
               && markupTrans.TransRecId                    == custInvoiceJour.RecId
               && markupTrans.GoodsInRouteToDelivery_RU     == NoYes::Yes
        {
            markupTrans.GoodsInRouteToDelivery_RU = NoYes::No;
            markupTrans.update();

            this.updateInvoiceMarkupTax(markupTrans);
        }

        while select RecId from custInvoiceTrans
            where custInvoiceTrans.SalesId                  == custInvoiceJour.SalesId
               && custInvoiceTrans.InvoiceId                == custInvoiceJour.InvoiceId
               && custInvoiceTrans.InvoiceDate              == custInvoiceJour.InvoiceDate
               && custInvoiceTrans.NumberSequenceGroup      == custInvoiceJour.NumberSequenceGroup
        join forupdate markupTrans
            where markupTrans.TransTableId                  == custInvoiceTrans.TableId
               && markupTrans.TransRecId                    == custInvoiceTrans.RecId
               && markupTrans.GoodsInRouteToDelivery_RU     == NoYes::Yes
        {
            markupTrans.GoodsInRouteToDelivery_RU = NoYes::No;
            markupTrans.update();
            this.updateInvoiceMarkupTax(markupTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInvoiceMarkupPre</Name>
				<Source><![CDATA[
    private void updateInvoiceMarkupPre()
    {
        CustInvoiceTrans    custInvoiceTrans;
        ;
        Markup::copyGoodsInRouteCancel_RU(custInvoiceJour,
                                          custInvoiceJour.salesTable(),
                                          custInvoiceJour.CurrencyCode,
                                          goodsInRouteJour.GoodsInRouteId);

        while select custInvoiceTrans
            where custInvoiceTrans.SalesId                  == custInvoiceJour.SalesId
               && custInvoiceTrans.InvoiceId                == custInvoiceJour.InvoiceId
               && custInvoiceTrans.InvoiceDate              == custInvoiceJour.InvoiceDate
               && custInvoiceTrans.NumberSequenceGroup      == custInvoiceJour.NumberSequenceGroup
        {
            Markup::copyGoodsInRouteCancel_RU(custInvoiceTrans,
                                              custInvoiceTrans.salesLine(),
                                              custInvoiceJour.CurrencyCode,
                                              goodsInRouteJour.GoodsInRouteId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInvoiceMarkupTax</Name>
				<Source><![CDATA[
    private void updateInvoiceMarkupTax(MarkupTrans _markupTrans)
    {
        TaxTrans_RU    taxTrans_RU;

        update_recordset taxTrans_RU
            setting GoodsInRouteToDelivery_RU = _markupTrans.GoodsInRouteToDelivery_RU
            where (taxTrans_RU.MarkupTransRecId_RU == _markupTrans.RecId
               || taxTrans_RU.MarkupTransRecId_RU == _markupTrans.OrigRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMarkup</Name>
				<Source><![CDATA[
    private void updateMarkup()
    {
        MarkupTrans     markupTrans;
        MarkupTable     markupTable;
        ;
        while select forupdate markupTrans
            where markupTrans.TransTableId                  == custInvoiceJour.TableId
               && markupTrans.TransRecId                    == custInvoiceJour.RecId
               && markupTrans.GoodsInRouteToDelivery_RU     == NoYes::Yes
        join markupTable
            where markupTable.MarkupCode                    == markupTrans.MarkupCode
               && markupTable.UseCustPostingTypeTransit_RU  == NoYes::Yes
        {
            markupTrans.GoodsInRouteToDelivery_RU = NoYes::No;
            markupTrans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePostedInvoiceMarkup</Name>
				<Source><![CDATA[
    private void updatePostedInvoiceMarkup(Common _common)
    {
        MarkupTrans markupTrans;
        ;

        update_recordset markupTrans
            setting GoodsInRouteToDelivery_RU = NoYes::No
            where markupTrans.TransTableId  == _common.TableId
               && markupTrans.TransRecId    == _common.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePostedInvoiceTax</Name>
				<Source><![CDATA[
    private void updatePostedInvoiceTax(CustInvoiceJour _custInvoiceJour)
    {
        TaxTrans    taxTrans;
        TaxTrans_RU taxTrans_RU;

        update_recordset taxTrans_RU
            setting GoodsInRouteToDelivery_RU = NoYes::No
            join taxTrans
            where taxTrans.RecId == taxTrans_RU.TaxTrans
               && taxTrans.TransDate    == _custInvoiceJour.InvoiceDate
               && taxTrans.Voucher      == _custInvoiceJour.LedgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super();

        select firstonly tmpFrmVirtual
            where tmpFrmVirtual.NoYes
               && tmpFrmVirtual.Qty;

        if (!tmpFrmVirtual)
            ret = checkFailed("@GLS114829");

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GLS114734";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>