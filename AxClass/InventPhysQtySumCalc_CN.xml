<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventPhysQtySumCalc_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventPhysQtySumCalc_CN</c> class is used to calculate inventory summary.
/// </summary>

class InventPhysQtySumCalc_CN
{
    //parameters
    InventPhysQtySumParm_CN inventSumParm;

    Query conditionQuery;
    //calculate begin quantity?
    boolean calcBegin;

    //calculation
    InventPhysQtySummaryPerDateEngine_CN    engineOnHand;
    InventPhysQtySummaryEngine_CN           enginePeriod;
    InventPhysQtySumQueryDimControl_CN      inventDimCtrl;
    InventPhysQtySumDataOutput_CN           inventSumQtyOutput;

    UserConnection                          userConnection;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates inventory summary quantity.
    /// </summary>

    public void calc()
    {
        this.initEngine();

        this.preCalc();
        this.calcBeginQty();
        this.calcPeriodQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcBeginQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the summary of beginning quantity.
    /// </summary>

    protected void calcBeginQty()
    {
        engineOnHand.parmInventSumQuery(conditionQuery);
        if (calcBegin)
        {
            //calculate beginning quantity
            engineOnHand.parmPerDate(inventSumParm.parmFromDate() - 1);
        }
        else
        {
            //calculate ending quantity
            engineOnHand.parmPerDate(inventSumParm.parmToDate());
        }

        engineOnHand.calcData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPeriodQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the summary of transaction quantity during the period.
    /// </summary>

    protected void calcPeriodQty()
    {
        //ethier get target lines from table or from query
        enginePeriod.setInventSummaryOrigin(engineOnHand.getInventSummaryOrigin());
        enginePeriod.setInventSummaryOnHand(engineOnHand.getData());
        enginePeriod.parmInventSumQuery(conditionQuery);

        enginePeriod.parmBeginDate(inventSumParm.parmFromDate());
        enginePeriod.parmEndDate(inventSumParm.parmToDate());

        enginePeriod.calcData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructInventSumQtyOutput</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs corresponding InventPhysQtySumDataOutput_CN class instance.
    /// </summary>

    protected void constructInventSumQtyOutput()
    {
        inventSumQtyOutput = InventPhysQtySumDataOutput_CN::construct(InventorySumCalcType_CN::InPeriod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>decideCalcBegin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decides which way is more efficient, calculating beginning first or calculating ending first.
    /// </summary>

    protected void decideCalcBegin()
    {
        calcBegin = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventSumData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets temporary table containing the summary result.
    /// </summary>
    /// <returns>
    /// A temporary table containing the summary result.
    /// </returns>

    public InventPhysQtySumTmp_CN getInventSumData()
    {
        this.initInventDimCtrl();
        this.initInventSumQtyOutput();

        inventDimCtrl.configQuery(inventSumQtyOutput.initQuery());
        inventSumQtyOutput.parmIsOnHandBegin(this.parmCalcBegin());
        inventSumQtyOutput.parmShowEmptyLine(inventSumParm.parmShowEmptyLine());
        if (userConnection)
        {
            inventSumQtyOutput.parmUserConnection(userConnection);
        }

        return inventSumQtyOutput.getInventSummaryData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initConditionQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initlizes condition query according to query in parameter.
    /// </summary>
    /// <returns>
    /// The condition query.
    /// </returns>

    private Query initConditionQuery()
    {
        conditionQuery = inventSumParm.parmConditionQuery();

        //if condition query is from datasource InventPhysQtySumTmp_CN
        if (conditionQuery && conditionQuery.dataSourceTable(tablenum(InventPhysQtySumTmp_CN)))
        {
            conditionQuery = InventPhysQtySumCalc_CN::buildQueryFromTmpInventSum(conditionQuery);
        }

        //if condition query is null, then will use default query
        if (conditionQuery == null || conditionQuery.dataSourceTable(tablenum(InventSum)) == null)
        {
            conditionQuery = InventPhysQtySumCalc_CN::buildQueryInventSum();
        }
        return conditionQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEngine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes corresponding calculation engine.
    /// </summary>

    protected void initEngine()
    {
        engineOnHand = new InventPhysQtySummaryPerDateEngine_CN();
        enginePeriod = new InventPhysQtySummaryEngine_CN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimCtrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct corresponding InventPhysQtySumQueryDimControl_CN class instance.
    /// </summary>

    protected void initInventDimCtrl()
    {
        inventDimCtrl = InventPhysQtySumQueryDimControl_CN::construct();
        inventDimCtrl.parmDimParmVisible(inventSumParm.parmInventDimParm());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventSumQtyOutput</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initalizes InventPhysQtySumDataOutput_CN class instance.
    /// </summary>

    protected void initInventSumQtyOutput()
    {
        this.constructInventSumQtyOutput();
        if (enginePeriod)
        {
            inventSumQtyOutput.parmInventSummaryTable(enginePeriod.getData());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new()
    {
        inventSumParm = InventPhysQtySumParm_CN::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalcBegin</Name>
				<Source><![CDATA[
        public boolean parmCalcBegin(boolean _calcBegin = calcBegin)
    {
        calcBegin = _calcBegin;

        return calcBegin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSumParm</Name>
				<Source><![CDATA[
    /// <summary>
    /// The invent sum parameter.
    /// </summary>
    /// <param name="_parm">
    /// The parameter value.
    /// </param>
    public void parmInventSumParm(InventPhysQtySumParm_CN _parm)
    {
        inventSumParm.unpack(_parm.pack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserConnection</Name>
				<Source><![CDATA[
        public UserConnection parmUserConnection(UserConnection _userConnection = userConnection)
    {
        userConnection = _userConnection;
        return userConnection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preCalc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decorates the condition query and parameter before calculation.
    /// </summary>

    protected void preCalc()
    {
        QueryBuildDataSource    invent;

        this.initConditionQuery();

        //pass ranges

        if (inventSumParm.parmItemGroup())
        {
            invent = conditionQuery.dataSourceTable(tablenum(InventItemGroupItem));
            if (invent)
            {
                if (invent.findRange(fieldnum(InventItemGroupItem, ItemGroupId)))
                {
                    invent.findRange(fieldnum(InventItemGroupItem, ItemGroupId)).value(inventSumParm.parmItemGroup());
                }

                else
                {
                    invent.addRange(fieldnum(InventItemGroupItem, ItemGroupId)).value(inventSumParm.parmItemGroup());
                }
            }
        }

        if (inventSumParm.parmItem())
        {
            invent = conditionQuery.dataSourceTable(tablenum(InventSum));
            if (invent)
            {
                if (invent.findRange(fieldnum(InventSum, ItemId)))
                {
                    invent.findRange(fieldnum(InventSum, ItemId)).value(inventSumParm.parmItem());
                }
                else
                {
                    invent.addRange(fieldnum(InventSum, ItemId)).value(inventSumParm.parmItem());
                }
            }
        }

        this.decideCalcBegin();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryFromTmpInventSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Duplicates query with datasource InventPhysQtySumTmp_CN to query with datasource InventSum.
    /// </summary>
    /// <param name="_tmpInventSumQuery">
    /// Query with datasource InventPhysQtySumTmp_CN.
    /// </param>
    /// <returns>
    /// The resulting query.
    /// </returns>

    static public Query buildQueryFromTmpInventSum(Query _tmpInventSumQuery = null)
    {
        Query                   queryInventSum;
        Query                   sourceQuery;
        QueryBuildDataSource    qbdsSum, qbdsDim, qbdsItem;
        QueryBuildDataSource    qbdsTmpInventSum;
        QueryBuildRange         qbr, qbrItemGroup;

        container               dimFieldsSum   = InventPhysQtySumTmp_CN::dimFieldList();
        int                     h;

        //without source query
        if (_tmpInventSumQuery == null)
        {
            return InventPhysQtySumCalc_CN::buildQueryInventSum();
        }

        //copy from source query
        sourceQuery = _tmpInventSumQuery;

        qbdsTmpInventSum = sourceQuery.dataSourceTable(tablenum(InventPhysQtySumTmp_CN));
        if (qbdsTmpInventSum == null)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        // Add item
        if (qbdsTmpInventSum.findRange(fieldnum(InventPhysQtySumTmp_CN, ItemGroupId)))
        {
            queryInventSum = new Query(queryStr(InventItemGroupItem_CN));
            qbrItemGroup = queryInventSum.dataSourceTable(tableNum(InventItemGroupItem)).findRange(fieldNum(InventItemGroupItem, ItemGroupId));
            qbrItemGroup.value(qbdsTmpInventSum.findRange(fieldnum(InventPhysQtySumTmp_CN, ItemGroupId)).value());
            qbdsItem = queryInventSum.dataSourceTable(tableNum(InventTable));
        }
        else
        {
            queryInventSum = new Query();
        }

        // Add InventSum
        if (qbdsItem)
        {
            qbdsSum = qbdsItem.addDataSource(tablenum(InventSum));
            qbdsSum.addLink(fieldnum(InventTable, ItemId), fieldnum(InventSum, ItemId));
            qbdsSum.joinMode(JoinMode::InnerJoin);
        }
        else
        {
            qbdsSum = queryInventSum.addDataSource(tablenum(InventSum));
        }

        if (qbdsTmpInventSum.findRange(fieldnum(InventPhysQtySumTmp_CN, ItemId)))
        {
            qbr = qbdsSum.addRange(fieldnum(InventSum, ItemId));
            qbr.value(qbdsTmpInventSum.findRange(fieldnum(InventPhysQtySumTmp_CN, ItemId)).value());
        }

        //Add Dim
        qbdsDim = qbdsSum.addDataSource(tablenum(InventDim));
        qbdsDim.relations(true);
        qbdsDim.joinMode(JoinMode::InnerJoin);

        for (h=1;h<=conlen(dimFieldsSum);h++)
        {
            if (qbdsTmpInventSum.findRange(conpeek(dimFieldsSum, h)))
            {
                qbr = qbdsDim.addRange(InventPhysQtySumTmp_CN::tmpDim2Dim(conpeek(dimFieldsSum, h)));
                qbr.value(qbdsTmpInventSum.findRange(conpeek(dimFieldsSum, h)).value());
            }
        }

        return queryInventSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryInventSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a default condition query.
    /// </summary>
    /// <returns>
    /// A default condition query.
    /// </returns>

    static public Query buildQueryInventSum()
    {
        Query                   queryInventSum;
        QueryBuildDataSource    qbdsSum, qbdsDim, qbdsItem;

        queryInventSum = new Query(queryStr(InventItemGroupItem_CN));
        qbdsItem = queryInventSum.dataSourceTable(tableNum(InventTable));

        qbdsSum = qbdsItem.addDataSource(tablenum(InventSum));
        qbdsSum.addLink(fieldnum(InventTable, ItemId), fieldnum(InventSum, ItemId));
        qbdsSum.joinMode(JoinMode::InnerJoin);

        qbdsDim = qbdsSum.addDataSource(tablenum(InventDim));
        qbdsDim.relations(true);
        qbdsDim.joinMode(JoinMode::InnerJoin);

        return queryInventSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs instance according to calculation type
    /// </summary>
    /// <param name="_type">
    /// The type of calculation.
    /// </param>
    /// <returns>
    /// The calculation engine instance.
    /// </returns>

    public static InventPhysQtySumCalc_CN construct(InventorySumCalcType_CN _type)
    {
        InventPhysQtySumCalc_CN inventSumCalc;

        switch (_type)
        {
            case InventorySumCalcType_CN::ByDate:
                inventSumCalc = new InventPhysQtySumCalcDaily_CN();
                break;

            case InventorySumCalcType_CN::ByTransType:
                inventSumCalc = new InventPhysQtySumCalcByType_CN();
                break;

            case InventorySumCalcType_CN::InPeriod:
            default:
                inventSumCalc = new InventPhysQtySumCalc_CN();
                break;
        }

        return inventSumCalc;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>