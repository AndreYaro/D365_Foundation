<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DirPartyInformationCopy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>DirPartyInformationCopy</c> handles the copy of info between entities that are related to the same party.
/// </summary>
public class DirPartyInformationCopy
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyInfoFromEntitiesThatShareSameParty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the common info that is shared by party to the record passed as parameter.
    /// </summary>
    /// <param name = "_partyId">The party criteria.</param>
    /// <param name = "_sourceCopyableFieldGroups">A set of <c>SysDictFieldGroup</c> that contain the fields that are going to be copied.</param>
    /// <param name = "_targetCopyableFieldGroup">A <c>SysDictFieldGroup</c> with the fields that are going to be updated.</param>
    /// <param name = "_targeCommon">The record being updated</param>
    /// <param name = "_persist">Whether the record should be persisted</param>
    public static void copyInfoFromEntitiesThatShareSameParty(
        RecId               _partyId,
        Set                 _sourceCopyableFieldGroups,
        SysDictFieldGroup   _targetCopyableFieldGroup,
        Common              _targeCommon,
        boolean             _persist = true)
    {
        SetEnumerator   setEnumerator;

        if (_sourceCopyableFieldGroups
            && _sourceCopyableFieldGroups.elements() > 0
            && _targetCopyableFieldGroup)
        {
            setEnumerator = _sourceCopyableFieldGroups.getEnumerator();
        }
        else
        {
            throw error(strFmt("@Mexico:DirPartyInformationCopy_InvalidFieldGroupsMessage", tableId2PName(_targeCommon.TableId)));
        }

        try
        {
            // Iterate the source tables.
            while (setEnumerator.moveNext())
            {
                SysDictFieldGroup sourceFieldGroup = setEnumerator.current();

                // Selects all records of current source table related to the given party.
                QueryRun qr = DirPartyInformationCopy::buildQuery(_partyId, sourceFieldGroup.tableid(), _targeCommon.TableId, _targeCommon.RecId);

                // No need to iterate throughout all records of the same <c>tableId</c>.
                if (qr.next())
                {
                    Common sourceCommon = qr.get(sourceFieldGroup.tableid());

                    // Only copies info from companies of source record country region.
                    if (sourceCommon && SysCountryRegionCode::isLegalEntityInCountryRegion([SysCountryRegionCode::countryInfo(sourceCommon.DataAreaId)]))
                    {
                        var modified = DirPartyInformationCopy::copyFields(sourceCommon, sourceFieldGroup, _targeCommon, _targetCopyableFieldGroup);

                        if (modified && _persist)
                        {
                            DirPartyInformationCopy::performUpdate(_targeCommon);
                        }
                    }
                }
            }
        }
        catch
        {
            throw error(strFmt("@Mexico:DirPartyInformationCopy_ErrorMessage", tableId2PName(_targeCommon.TableId)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyInfoToEntitiesThatShareSameParty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the common from the record passed as parameter to other records related by party.
    /// </summary>
    /// <param name = "_partyId">The party criteria</param>
    /// <param name = "_sourceCopyableFieldGroup">A <c>SysDictFieldGroup</c> with the fields that are going to be copied.</param>
    /// <param name = "_sourceCommon">The record being copied.</param>
    /// <param name = "_targetCopyableFieldGroups">A set of <c>SysDictFieldGroup</c> with the fields that are going to be updated.</param>
    /// <param name = "_persist">Whether the records should be persisted.</param>
    public static void copyInfoToEntitiesThatShareSameParty(
        RecId               _partyId,
        SysDictFieldGroup   _sourceCopyableFieldGroup,
        Common              _sourceCommon,
        Set                 _targetCopyableFieldGroups,
        boolean             _persist = true)
    {
        SetEnumerator   setEnumerator;

        if (_targetCopyableFieldGroups
            && _targetCopyableFieldGroups.elements() > 0
            && _sourceCopyableFieldGroup)
        {
            setEnumerator = _targetCopyableFieldGroups.getEnumerator();
        }
        else
        {
            throw error(strFmt("@Mexico:DirPartyInformationCopy_InvalidFieldGroupsMessage", tableId2PName(_sourceCommon.TableId)));
        }

        try
        {
            // Iterate the target tables.
            while (setEnumerator.moveNext())
            {
                SysDictFieldGroup targetFieldGroup = setEnumerator.current();

                // Selects all records of current source table related to the given party.
                QueryRun queryRun = DirPartyInformationCopy::buildQuery(_partyId, targetFieldGroup.tableid(), _sourceCommon.TableId, _sourceCommon.RecId, true);

                // Iterate the whole query in order o update all records.
                while (queryRun.next())
                {
                    Common targetCommon = queryRun.get(targetFieldGroup.tableid());

                    // Only copies info from companies of source record country region.
                    if (targetCommon && SysCountryRegionCode::isLegalEntityInCountryRegion([SysCountryRegionCode::countryInfo(targetCommon.DataAreaId)]))
                    {
                        var modified = DirPartyInformationCopy::copyFields(_sourceCommon, _sourceCopyableFieldGroup, targetCommon, targetFieldGroup);

                        if (modified)
                        {
                            DirPartyInformationCopy::performUpdate(targetCommon);
                        }
                    }
                }
            }
        }
        catch
        {
            throw error(strFmt("@Mexico:DirPartyInformationCopy_ErrorMessage", tableId2PName(_sourceCommon.TableId)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>performUpdate</Name>
				<Source><![CDATA[
    private static void performUpdate(Common _commonUpdate)
    {
        unchecked(Uncheck::TableSecurityPermission)
        {
            if (curExt() == _commonUpdate.company())
            {
                ttsBegin;
                DirPartyInformationCopy::performUpdateForParty(_commonUpdate);
                ttsCommit;
            }
            else
            {
                changeCompany(_commonUpdate.company())
                {
                    ttsBegin;
                    DirPartyInformationCopy::performUpdateForParty(_commonUpdate);
                    ttsCommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>performUpdateForParty</Name>
				<Source><![CDATA[
    private static void performUpdateForParty(Common _commonUpdate)
    {
        switch (_commonUpdate.TableId)
        {
            case tableNum(VendTable):
                VendTable vendTable = _commonUpdate;
                vendTable.update(true, false);
                break;

            case tableNum(CustTable):
                CustTable custTable = _commonUpdate;
                custTable.Update(true, false);
                break;

            default:
                _commonUpdate.Update();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyFields</Name>
				<Source><![CDATA[
    private static boolean copyFields(
        Common              _sourceCommon,
        SysDictFieldGroup   _sourceFieldGroup,
        Common              _targetCommon,
        SysDictFieldGroup   _targetFieldGroup)
    {
        SysDictField        sourceField, targetField;
        Counter             i, j;
        boolean             modified = false;

        if (_sourceFieldGroup && _targetFieldGroup)
        {
            for (i = 1; i <= _sourceFieldGroup.numberOfFields(); i++)
            {
                sourceField = new SysDictField(_sourceCommon.TableId, _sourceFieldGroup.field(i));

                for (j = 1; j <= _targetFieldGroup.numberOfFields(); j++)
                {
                    targetField = new SysDictField(_targetCommon.TableId, _targetFieldGroup.field(j));

                    if (sourceField.typeId() == targetField.typeId() && sourceField.name() == targetField.name())
                    {
                        if (_targetCommon.(targetField.id()) != _sourceCommon.(sourceField.id()))
                        {
                            _targetCommon.(targetField.id()) = _sourceCommon.(sourceField.id());
                            modified = true;
                        }
                    }
                }
            }
        }

        return modified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    private static QueryRun buildQuery(
            RecId   _partyId,
            TableId _tableId,
            TableId _origTableId,
            RecId _toRecId,
            boolean _persist = false)
    {
        Query                   query;
        QueryBuildDataSource    qbdsParty;
        QueryBuildDataSource    qbdsTable;

        DictTable               dictTable = new DictTable(_tableId);

        query = new Query();
        query.allowCrossCompany(true);

        qbdsTable = query.addDataSource(_tableId);

        qbdsParty = qbdsTable.addDataSource(tableNum(DirPartyTable));
        qbdsParty.addRange(fieldNum(DirPartyTable, RecId)).value(queryvalue(_partyId));
        qbdsParty.relations(true);

        // this prevents one record to update itself.
        if (_tableId == _origTableId)
        {
            query.dataSourceTable(_tableId).addRange(dictTable.fieldName2Id("RecId")).value(SysQuery::valueNot(_toRecId));
        }

        query.dataSourceTable(_tableId).update(_persist);

        return new QueryRun(query);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>