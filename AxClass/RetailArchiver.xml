<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailArchiver</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailArchiver</c> class provides the archival functionality for application tables.
/// </summary>
internal final static class RetailArchiver
{
    private const int MaxRetry = 3;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>performArchive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the archival i.e., compress and upload the blobs to Document storage.
    /// </summary>
    /// <param name = "_retailArchiveBlobList">A list of <c>RetailArchiveBlob</c></param>
    /// <param name = "_record">The table record corresponding to the blobs.</param>
    /// <returns>The Azure storage URL of the archive containing the compressed blobs.</returns>
    internal static str performArchive(List _retailArchiveBlobList, Common _record)
    {
        if (_retailArchiveBlobList.empty())
        {
            throw error("@Retail:RetailArchiveBlobListNoElementsFound");
        }

        if (_record.TableId == 0
            || _record.RecId == 0
            || _record.DataAreaId == '')
        {
            throw error("@Retail:RetailArchiveRecordValidation");
        }

        str zipFile = '';
        str blobUrl = '';

        try
        {
            zipFile = RetailArchiver::createZipFile(_retailArchiveBlobList, _record);

            using (System.IO.FileStream fileStream = new System.IO.FileStream(zipFile, System.IO.FileMode::Open))
            {
                DocuRef docuRef = DocumentManagement::attachFile(
                    _record.TableId,
                    _record.RecId,
                    _record.DataAreaId,
                    DocuType::typeFile(),
                    fileStream,
                    zipFile,
                    System.Web.MimeMapping::GetMimeMapping(zipFile),
                    System.IO.Path::GetFileName(zipFile));

                blobUrl = docuRef.docuValue().AccessInformation;

                if (!System.Uri::IsWellFormedUriString(blobUrl, System.UriKind::RelativeOrAbsolute))
                {
                    throw error(strFmt("@Retail:RetailArchiveFailure", blobUrl));
                }
            }
        }
        finally
        {
            if (zipFile != '')
            {
                System.IO.File::Delete(zipFile);
            }
        }

        return blobUrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createZipFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares a zip file containing an entry corresponding to each element in the <c>RetailArchiveBlob</c> list.
    /// </summary>
    /// <param name = "_retailArchiveBlobList">A list of <c>RetailArchiveBlob</c></param>
    /// <param name = "_record">The table record corresponding to the blobs.</param>
    /// <returns>The file path.</returns>
    private static str createZipFile(List _retailArchiveBlobList, Common _record)
    {
        str zipFilePath = '';

        try
        {
            str tempPath = System.IO.Path::GetTempPath() + System.Guid::NewGuid().ToString() + '\\';

            if (!System.IO.Directory::Exists(tempPath))
            {
                System.IO.Directory::CreateDirectory(tempPath);
            }

            zipFilePath = tempPath + int642Str(_record.RecId) + '.zip';

            if (System.IO.File::Exists(zipFilePath))
            {
                System.IO.File::Delete(zipFilePath);
            }

            using (System.IO.FileStream fileStream = new System.IO.FileStream(zipFilePath, System.IO.FileMode::Create))
            {
                using (System.IO.Compression.ZipArchive zipArchive = new System.IO.Compression.ZipArchive(
                    fileStream, System.IO.Compression.ZipArchiveMode::Create))
                {
                    ListEnumerator listEnumerator = _retailArchiveBlobList.getEnumerator();

                    while (listEnumerator.moveNext())
                    {
                        RetailArchiveBlob retailArchiveBlob = listEnumerator.current();

                        System.IO.Compression.ZipArchiveEntry zipArchiveEntry = zipArchive.CreateEntry(
                            retailArchiveBlob.getIdentifier(), System.IO.Compression.CompressionLevel::Fastest);

                        using (System.IO.StreamWriter streamWriter = new System.IO.StreamWriter(zipArchiveEntry.Open()))
                        {
                            streamWriter.WriteLine(retailArchiveBlob.getBlob());
                        }
                    }
                }
            }
        }
        catch
        {
            if (xSession::currentRetryCount() <= MaxRetry)
            {
                sleep(xSession::currentRetryCount() * RandomGenerate::construct().randomInt(3000, 5000));
                retry;
            }
            else
            {
                throw;
            }
        }

        return zipFilePath;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>