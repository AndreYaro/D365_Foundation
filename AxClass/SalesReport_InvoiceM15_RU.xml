<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesReport_InvoiceM15_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class SalesReport_InvoiceM15_RU extends SalesPurchReport_Invent_RU implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournal</Name>
				<Source><![CDATA[
    protected boolean checkJournal(CustVendInvoiceJour _jour)
    {
        CustInvoiceJour jour = _jour; // cast the map to CustInvoiceJour table

        return (jour.custInvoiceJour_RU().CustInvoicePrintoutType_RU == CustInvoicePrintoutType_RU::M_15);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPrintoutType</Name>
				<Source><![CDATA[
    protected PrintoutTypeTable_RU defaultPrintoutType()
    {
        return PrintoutTypeTable_RU::SalesInvoiceM15;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doPrint</Name>
				<Source><![CDATA[
    private void doPrint(XMLExcelReport_CustInvoiceM15_RU _reportPrint)
    {
        _reportPrint.parmData(dynamicData, subHeader, header);
        _reportPrint.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPrintout</Name>
				<Source><![CDATA[
    protected PrintoutTable_RU findPrintout(Common           _invoiceJour,
                                            InventLocationId _location)
    {
        CustInvoiceJour  jour = _invoiceJour;

        PrintoutTable_RU tmpPrintout = PrintoutTable_RU::findInvoiceJour(PrintoutTypeTable_RU::SalesInvoiceM15,
                                                                         jour.InvoiceId,
                                                                         jour.InvoiceDate,
                                                                         jour.SalesId,
                                                                         jour.NumberSequenceGroup,
                                                                         _location);

        return tmpPrintout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModule</Name>
				<Source><![CDATA[
    protected ModuleInventPurchSales getModule()
    {
        return ModuleInventPurchSales::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableId</Name>
				<Source><![CDATA[
    protected TableId getTableId()
    {
        return tableNum(CustTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCurrency</Name>
				<Source><![CDATA[
    protected void initCurrency()
    {
        CustInvoiceJour custInvoiceJour = invoiceJour; // cast map to CustInvoiceJour table

        if (custInvoiceJour.custInvoiceJour_RU().PrintStandardCurrency_RU)
        {
            header.CurrencyCode = CompanyInfoHelper::standardCurrency();
            exchRate            = invoiceJour.ExchRate;
            printInMST          = true;
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventAccountType</Name>
				<Source><![CDATA[
    protected InventAccountType inventAccountType()
    {
        return InventAccountType::SalesIssue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDialog</Name>
				<Source><![CDATA[
    protected SalesPurchDialog_RU newDialog()
    {
        return new SalesPurchDialog_InvoiceM15_RU(journalList, invoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>offReportType</Name>
				<Source><![CDATA[
    protected OffReportType_RU offReportType()
    {
        return OffReportType_RU::SalesInvoiceM15;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderDescription</Name>
				<Source><![CDATA[
    protected Description orderDescription()
    {
        return this.lookupLabel(literalStr("@SYS7443"));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDynamicData</Name>
				<Source><![CDATA[
    public TmpSalesPurchReportLine_RU parmDynamicData()
    {
        return dynamicData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHeader</Name>
				<Source><![CDATA[
    public TmpSalesPurchReportTable_RU parmHeader()
    {
        return header;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareDynamicLine</Name>
				<Source><![CDATA[
    protected void prepareDynamicLine()
    {
        const str Dash = '-';
        CustInvoiceTrans    tmpTrans = invoiceTrans;

        super();

        RAssetIdOpen assetId_RU = tmpTrans.custInvoiceTrans_RU().AssetId_RU;

        dynamicData.rAssetId = assetId_RU ? assetId_RU : Dash;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareReportHeader</Name>
				<Source><![CDATA[
    protected void prepareReportHeader()
    {
        header.AttorneyId          = invoiceJour.CustVendInvoiceJour::getAttorneyId_RU();
        header.AttorneyDate        = invoiceJour.CustVendInvoiceJour::getAttorneyDate_RU();
        header.AttorneyIssuedName  = invoiceJour.CustVendInvoiceJour::getAttorneyIssuedName_RU();

        SalesPurchReportCounteragentData_RU counteragentData = this.initContragentData(vendor,
                                                                                       vendorBankAccount,
                                                                                       ''); // vendor is us
        header.VendBankAddress = counteragentData.fullInvoiceInfo();
        header.VendOKPO = counteragentData.parmOKPO();

        counteragentData           = this.initContragentData(customer,
                                                             customerBankAccount,
                                                             invoiceJour.InvoiceAccount);
        header.CustBankAddress     = counteragentData.fullInvoiceInfo();
        header.CustOKPO            = counteragentData.parmOKPO();

        SalesAgreementHeaderExt_RU salesAgreementHeaderExt = AgreementHeaderExt_RU::findByDefaultDimension(invoiceJour.DefaultDimension) as SalesAgreementHeaderExt_RU;
        SalesAgreementHeader salesAgreementHeader = SalesAgreementHeader::find(salesAgreementHeaderExt.AgreementHeader);

        header.AgreementId                 = salesAgreementHeader.SalesNumberSequence;
        header.AgreementClassificationName = salesAgreementHeader.agreementClassification_RU().Name;
        header.AgreementDocumentTitle      = salesAgreementHeader.DocumentTitle;
        header.AgreementDate               = salesAgreementHeaderExt.AgreementDate;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareTxtData</Name>
				<Source><![CDATA[
    final protected FreeTxt prepareTxtData()
    {
        return this.lookupLabel(literalStr("@GLS107000"));
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        CustInvoiceJour  filterInvoice;

        Args args = new Args();

        super();

        args.parmEnumType(enumNum(PrintoutTypeTable_RU));
        args.parmEnum(PrintoutTypeTable_RU::SalesInvoiceM15);
        args.caller(this);

        XMLExcelReport_CustInvoiceM15_RU reportPrint = XMLExcelReport_CustInvoiceM15_RU::construct();
        reportPrint.parmArgs(args);

        SRSPrintDestinationSettings printSettings = this.parmPrintDestinationSettings();

        if (reportPrint.isPdfConversionEnabled(printSettings))
        {
            reportPrint.parmPrintDestinationSettings(printSettings);
        }

        if (filterQueryRun)
        {
            while (filterQueryRun.next())
            {
                PrintoutTable_RU filterTable = filterQueryRun.getNo(1);

                while select header
                    where header.InvoiceId           == filterTable.DocumentId       &&
                          header.InvoiceDate         == filterTable.DocumentDate     &&
                          header.SalesPurchId        == filterTable.SalesPurchId
                join subHeader
                    where subHeader.InternalId       == header.InternalId            &&
                          subHeader.InventLocationId == filterTable.InventLocationId &&
                          subHeader.DocumentId       == filterTable.JournalNum       &&
                          subHeader.PrintoutType     == filterTable.JournalType
                {
                    select firstonly RecId from filterInvoice
                        where filterInvoice.RecId               == header.RefRecId &&
                              filterInvoice.NumberSequenceGroup == filterTable.CustVendNumSeqGroup;

                    if (filterInvoice)
                    {
                        this.doPrint(reportPrint);
                    }
                }
            }
        }
        else
        {
            while select header
            join subHeader
                where subHeader.InternalId         == header.InternalId
            {
                this.doPrint(reportPrint);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCaller</Name>
				<Source><![CDATA[
    public boolean setCaller(Object _object)
    {
        boolean ret = super(_object);

        if (! ret)
        {
            if (classIdGet(_object) == classNum(SalesPurchDialog_InvoiceM15_RU))
            {
                filterDialog = _object;
                ret          = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    public void setParameters(
        PrintCopyOriginal   _printCopyOriginal = PrintCopyOriginal::Copy,
        CustVendInvoiceJour _invoiceJour       = null,
        RecordSortedList    _journalList       = null)
    {
        if (_invoiceJour)
        {
            super(_printCopyOriginal, _invoiceJour, _journalList);
        }
        else
        {
            super(_printCopyOriginal, new DictTable(tableNum(CustInvoiceJour)).makeRecord(), _journalList);
        }

        invoiceTrans = new DictTable(tableNum(CustInvoiceTrans)).makeRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTableId</Name>
				<Source><![CDATA[
    protected TableId transTableId()
    {
        return tableNum(CustInvoiceTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SalesReport_InvoiceM15_RU   report = new SalesReport_InvoiceM15_RU();

        if (_args)
        {
            report.setParameters(_args.parmEnum(), _args.record(), _args.object());
            report.setCaller(_args.caller());
        }

        if (report.prompt())
        {
            report.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>