<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxAverageVATReportDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxAverageVATReportDP</c> class is the report data provider class for the
/// <c>TaxAverageVATReport</c> report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(TaxAverageVATReportContract))
]
public class  TaxAverageVATReportDP extends SrsReportDataProviderPreProcessTempDB
{
    TaxAverageVATReportTmp                  taxAverageVATReportTmp;

    TaxTrans                                taxTransInvoice;
    TaxTransExtensionTH                     taxTransExtensionTHInvoice;
    TaxTrans                                taxTransPaym;
    TaxTransExtensionTH                     taxTransExtensionTHPaym;
    TaxData                                 taxDataInvoice;
    TaxData                                 taxDataPaym;
    VendTrans                               vendTrans;
    TaxCode                                 taxCode;
    Counter                                 counter;
    TaxUnrealizedPurchTaxInvoiceDate        taxInvoiceDate;
    TaxUnrealizedPurchTaxInvoiceId          taxInvoiceNum;
    TaxUnrealizedPurchRealVendName          realVendorName;
    TaxAmount                               taxAmount;
    TaxBase                                 taxBaseAmount;
    TaxValue                                invVATRatio;
    TaxAmount                               invTaxRefundAmount;
    TaxBase                                 invTaxBaseRefundAmount;
    TaxValue                                paymVATRatio;
    TaxAmount                               paymTaxRefundAmount;
    TaxBase                                 paymTaxBaseRefundAmount;
    TaxAmount                               difference;
    Voucher                                 voucher;
    TransDate                               transDate;
    Name                                    taxBranchName;
    DetailSummary                           detailSummary;
    StartDate                               startDateParameter;
    EndDate                                 endDateParameter;
    TaxCode                                 salesTaxCodeParameter;
    TaxBranchCode                           taxBranchCodeParameter;
    TaxUnrealizedPurchTaxInvoiceDate        taxInvoiceDateParameter;
    TaxUnrealizedPurchTaxInvoiceId          taxInvoiceNumParameter;
    TaxUnrealizedPurchInvoiceReceiptDate    taxInvoiceReceiptDateParameter;
    boolean                                 insertIntoTmp;
    boolean                                 preInsertToTmp;
    TaxUnrealizedPurchTaxInvoiceId          parentTaxInvoiceNum;
    TaxRegistrationNumber                   taxRegistrationNumber;
    BranchNumber_TH                         taxBranchNumber;

    // summary
    TaxUnrealizedPurchInvoiceDate       preTaxInvoiceDate;
    TaxUnrealizedPurchTaxInvoiceId      preTaxInvoiceNum;
    TaxUnrealizedPurchRealVendName      preActualName;
    Name                                preTaxBranchName;
    TaxBase                             preTaxBaseAmountSum;
    TaxAmount                           preTaxAmountSum;
    TaxValue                            preInvVATRatio;
    TaxAmount                           preInvTaxRefundAmountSum;
    TaxBase                             preInvTaxBaseRefundAmountSum;
    TaxValue                            prePaymVATRatio;
    TaxAmount                           prePaymTaxRefundAmountSum;
    TaxBase                             prePaymTaxBaseRefundAmountSum;
    TaxAmount                           preDifferenceSum;
    Voucher                             preVoucher;
    TransDate                           preTransDate;
    TaxUnrealizedPurchTaxInvoiceId      preTaxInvoiceId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkParameters</Name>
				<Source><![CDATA[
    private boolean checkParameters(
        TaxTrans                _taxTrans,
        TaxTransExtensionTH     _taxTransExtensionTH)
    {
        boolean             ret = true;

        if (salesTaxCodeParameter)
        {
            if (_taxTrans.TaxCode != salesTaxCodeParameter)
            {
                ret = false;
            }
        }

        if (ret && taxInvoiceNumParameter)
        {
            if (_taxTransExtensionTH.TaxInvoiceId != taxInvoiceNumParameter)
            {
                ret = false;
            }
        }

        if (ret && taxInvoiceDateParameter)
        {
            if (_taxTransExtensionTH.TaxInvoiceDate != taxInvoiceDateParameter)
            {
                ret = false;
            }
        }

        if (ret && taxInvoiceReceiptDateParameter)
        {
            if (_taxTransExtensionTH.TaxInvoiceReceiptDate != taxInvoiceReceiptDateParameter)
            {
                ret = false;
            }
        }

        if (ret)
        {
            if (startDateParameter)
            {
                if (_taxTrans.TransDate < startDateParameter)
                {
                    ret = false;
                }
            }

            if (endDateParameter)
            {
                if (_taxTrans.TransDate > endDateParameter)
                {
                    ret = false;
                }
            }
        }

        if (ret && taxBranchCodeParameter)
        {
            if (_taxTransExtensionTH.TaxBranch != taxBranchCodeParameter)
            {
                ret = false;
            }
        }

        if (_taxTransExtensionTH.ExcludeFromReports == NoYes::Yes
            || _taxTransExtensionTH.ExcludeFromReports == NoYes::Yes)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeSection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the section.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void executeSection()
    {
        VendInvoiceJour                 vendInvoiceJour;
        TaxRegistration                 taxRegistration;
        TaxInformation_TH               taxInformation_TH;
        LedgerJournalTransExtensionTH   ledgerJournalTransExtensionTH;

        vendTrans       = VendTrans::findVoucherDate(taxTransInvoice.Voucher, taxTransInvoice.TransDate);
        taxDataInvoice  = TaxData::find(taxTransInvoice.TaxCode, taxTransInvoice.TransDate, taxTransInvoice.TaxBaseAmount);
        taxDataPaym     = TaxData::find(taxTransPaym.TaxCode, taxTransPaym.TransDate, taxTransPaym.TaxBaseAmount);

        if (!taxTransPaym.RecId)
        {
            if (taxTransExtensionThInvoice.TaxType == TaxType_TH::AverageUnrealized)
            {
                insertIntoTmp = false;
            }
            else
            {
                if (!this.checkParameters(taxTransInvoice, taxTransExtensionTHInvoice))
                {
                    insertIntoTmp = false;
                }
                else
                {
                    if (taxTransExtensionThInvoice.RealVendName)
                    {
                        realVendorName      = taxTransExtensionThInvoice.RealVendName;
                    }
                    else
                    {
                        realVendorName      = vendTrans.vendTableName();
                    }
                    voucher                 = taxTransInvoice.Voucher;
                    transDate               = taxTransInvoice.TransDate;
                    taxInvoiceDate          = taxTransExtensionThInvoice.TaxInvoiceDate;
                    taxInvoiceNum           = taxTransExtensionThInvoice.TaxInvoiceId;
                    invVATRatio             = 100 - taxDataInvoice.vatExemptPct;
                    taxBaseAmount           = taxTransInvoice.TaxBaseAmount;
                    taxAmount               = taxTransInvoice.TaxAmount;
                    invTaxBaseRefundAmount  = CurrencyExchangeHelper::amount(taxBaseAmount * invVATRatio / 100);
                    invTaxRefundAmount      = CurrencyExchangeHelper::amount(taxAmount * invVATRatio / 100);
                }
            }
        }
        else
        {
            if (!this.checkParameters(taxTransPaym, taxTransExtensionTHPaym))
            {
                insertIntoTmp = false;
            }
            else
            {
                if (taxTransExtensionTHPaym.RealVendName)
                {
                    realVendorName      = taxTransExtensionTHPaym.RealVendName;
                }
                else
                {
                    realVendorName      = vendTrans.vendTableName();
                }

                invVATRatio             = 100 - taxDataInvoice.vatExemptPct;

                if (taxTransExtensionTHInvoice.TaxType == TaxType_TH::AverageRealized
                    && (vendTrans.SettleAmountMST - vendTrans.AmountMST) != 0
                    && parentTaxInvoiceNum != taxTransExtensionTHInvoice.TaxInvoiceId)
                {
                    voucher                 = taxTransInvoice.Voucher;
                    transDate               = taxTransInvoice.TransDate;
                    taxInvoiceDate          = taxTransExtensionTHInvoice.TaxInvoiceDate;
                    taxInvoiceNum           = taxTransExtensionTHInvoice.TaxInvoiceId;
                    taxBaseAmount           = abs(vendTrans.SettleAmountMST - vendTrans.AmountMST) / (1 + taxTransInvoice.TaxValue / 100);
                    taxAmount               = CurrencyExchangeHelper::amount(taxBaseAmount * taxTransInvoice.TaxValue / 100);
                    invTaxBaseRefundAmount  = CurrencyExchangeHelper::amount(taxBaseAmount * invVATRatio / 100);
                    invTaxRefundAmount      = CurrencyExchangeHelper::amount(taxAmount * invVATRatio / 100);
                    if (this.checkParameters(taxTransInvoice, taxTransExtensionTHInvoice))
                    {
                        if (detailSummary == DetailSummary::Summary)
                        {
                            preVoucher                      = taxTransInvoice.Voucher;
                            preTransDate                    = transDate;
                            preTaxInvoiceDate               = taxTransExtensionTHInvoice.TaxInvoiceDate;
                            preTaxInvoiceNum                = taxTransExtensionTHInvoice.TaxInvoiceId;
                            preTaxBaseAmountSum             = preTaxBaseAmountSum + taxBaseAmount;
                            preTaxAmountSum                 = preTaxAmountSum + taxAmount;
                            preInvTaxBaseRefundAmountSum    = preInvTaxBaseRefundAmountSum + invTaxBaseRefundAmount;
                            preInvTaxRefundAmountSum        = preInvTaxRefundAmountSum + invTaxRefundAmount;
                        }
                        else
                        {
                            this.insertTmpTable();
                        }
                    }
                    parentTaxInvoiceNum     = taxTransExtensionTHInvoice.TaxInvoiceId;
                }

                voucher                 = VendTrans::find(taxTransPaym.SourceRecId).Voucher;
                transDate               = taxTransPaym.TransDate;
                taxInvoiceDate          = taxTransExtensionTHPaym.TaxInvoiceDate;
                taxInvoiceNum           = taxTransExtensionTHPaym.TaxInvoiceId;
                taxBaseAmount           = taxTransPaym.TaxBaseAmount;
                taxAmount               = taxTransPaym.TaxAmount;
                invTaxBaseRefundAmount  = CurrencyExchangeHelper::amount(taxBaseAmount * invVATRatio / 100);
                invTaxRefundAmount      = CurrencyExchangeHelper::amount(taxAmount * invVATRatio / 100);
                paymVATRatio            = 100 - taxDataPaym.vatExemptPct;
                if (invVATRatio == paymVATRatio)
                {
                    paymVATRatio            = 0;
                    paymTaxBaseRefundAmount = 0;
                    paymTaxRefundAmount     = 0;
                    difference              = 0;
                }
                else
                {
                    paymTaxBaseRefundAmount = CurrencyExchangeHelper::amount(taxTransPaym.TaxBaseAmount * paymVATRatio / 100);
                    paymTaxRefundAmount     = CurrencyExchangeHelper::amount(taxTransPaym.TaxAmount * paymVATRatio / 100);
                    difference              = invTaxRefundAmount - paymTaxRefundAmount;
                }
            }
        }

        if (insertIntoTmp)
        {
            if (taxTransInvoice.SourceTableId == tableNum(LedgerJournalTrans))
            {
                ledgerJournalTransExtensionTH = LedgerJournalTrans::findRecId(taxTransInvoice.SourceRecId,false).ledgerJournalTransExtensionTH();
                taxRegistrationNumber         = ledgerJournalTransExtensionTH.TaxRegNum;
                taxBranchNumber               = ledgerJournalTransExtensionTH.getBranchNumber();
            }
            else if (taxTransInvoice.SourceTableId == tableNum(VendInvoiceTrans) || taxTransInvoice.SourceTableId == tableNum(VendTrans))
            {
                vendInvoiceJour = VendInvoiceJour::findFromTaxTrans(taxTransInvoice.Voucher, taxTransInvoice.TransDate);
                taxRegistration = TaxRegistration::getTaxRegistrationFromInvoiceJour_TH(vendInvoiceJour);
                if (taxRegistration)
                {
                    taxRegistrationNumber = taxRegistration.RegistrationNumber;
                }
                taxInformation_TH = TaxInformation_TH::find(LogisticsPostalAddress::findRecId(vendInvoiceJour.vendInvoiceJourExtensionTH().InvoicePostalAddress).Location);
                if (taxInformation_TH)
                {
                    taxBranchNumber = taxInformation_TH.getBranchNumber();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAverageVATReportTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets data from the <c>TaxAverageVATReportTmp</c> temporary table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>TaxAverageVATReportTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(TaxAverageVATReportTmp))
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxAverageVATReportTmp getTaxAverageVATReportTmp()
    {
        select taxAverageVATReportTmp;
        return taxAverageVATReportTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds the query by passing the UI parameter values to ranges.
    /// </summary>
    /// <param name="_newQuery">
    ///    The base query that is used by the report.
    /// </param>
    /// <returns>
    ///    The updated query, filtered by the UI parameter values.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Query initQuery(Query _newQuery)
    {
        _newQuery.dataSourceName(queryDataSourceStr(TaxAverageVATReport, TaxTransExtensionTHPaym)).addSortField(fieldnum(TaxTransExtensionTH, TaxInvoiceId));
        _newQuery.dataSourceName(queryDataSourceStr(TaxAverageVATReport, TaxTransExtensionTHInvoice)).addSortField(fieldnum(TaxTransExtensionTH, TaxInvoiceId));

        return _newQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSummaryTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts data into the <c>TaxAverageVATReportTmp</c> temporary table.
    /// </summary>
    private void insertSummaryTmpTable()
    {
        counter++;
        taxAverageVATReportTmp.Counter                      = counter;
        taxAverageVATReportTmp.TaxInvoiceDate               = preTaxInvoiceDate;
        taxAverageVATReportTmp.TaxInvoiceNumber             = preTaxInvoiceNum;
        taxAverageVATReportTmp.RealVendorName               = preActualName;
        taxAverageVATReportTmp.TaxBranchName                = preTaxBranchName;
        taxAverageVATReportTmp.TaxBaseAmount                = preTaxBaseAmountSum;
        taxAverageVATReportTmp.TaxAmount                    = preTaxAmountSum;
        taxAverageVATReportTmp.InvoiceVATRatio              = preInvVATRatio;
        taxAverageVATReportTmp.InvoiceTaxBaseRefundAmount   = preInvTaxBaseRefundAmountSum;
        taxAverageVATReportTmp.InvoiceTaxRefundAmount       = preInvTaxRefundAmountSum;
        taxAverageVATReportTmp.PaymentVATRatio              = prePaymVATRatio;
        taxAverageVATReportTmp.PaymentTaxBaseRefundAmount   = prePaymTaxBaseRefundAmountSum;
        taxAverageVATReportTmp.PaymentTaxRefundAmount       = prePaymTaxRefundAmountSum;
        taxAverageVATReportTmp.Difference                   = preDifferenceSum;
        taxAverageVATReportTmp.Voucher                      = preVoucher;
        taxAverageVATReportTmp.TransDate                    = preTransDate;
        taxAverageVATReportTmp.TaxRegistrationNumber        = taxRegistrationNumber;
        taxAverageVATReportTmp.TaxBranchNumber              = taxBranchNumber;
        taxAverageVATReportTmp.insert();
        taxAverageVATReportTmp.clear();
        paymVATRatio                    = 0;
        paymTaxBaseRefundAmount         = 0;
        paymTaxRefundAmount             = 0;
        difference                      = 0;
        prePaymVATRatio                 = 0;
        prePaymTaxBaseRefundAmountSum   = 0;
        prePaymTaxRefundAmountSum       = 0;
        preDifferenceSum                = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts data into the <c>TaxAverageVATReportTmp</c> temporary table.
    /// </summary>
    private void insertTmpTable()
    {
        counter++;
        taxAverageVATReportTmp.Counter                      = counter;
        taxAverageVATReportTmp.TaxInvoiceDate               = taxInvoiceDate;
        taxAverageVATReportTmp.TaxInvoiceNumber             = taxInvoiceNum;
        taxAverageVATReportTmp.RealVendorName               = realVendorName;
        taxAverageVATReportTmp.TaxBranchName                = taxBranchName;
        taxAverageVATReportTmp.TaxBaseAmount                = taxBaseAmount;
        taxAverageVATReportTmp.TaxAmount                    = taxAmount;
        taxAverageVATReportTmp.InvoiceVATRatio              = invVATRatio;
        taxAverageVATReportTmp.InvoiceTaxBaseRefundAmount   = invTaxBaseRefundAmount;
        taxAverageVATReportTmp.InvoiceTaxRefundAmount       = invTaxRefundAmount;
        taxAverageVATReportTmp.PaymentVATRatio              = paymVATRatio;
        taxAverageVATReportTmp.PaymentTaxBaseRefundAmount   = paymTaxBaseRefundAmount;
        taxAverageVATReportTmp.PaymentTaxRefundAmount       = paymTaxRefundAmount;
        taxAverageVATReportTmp.Difference                   = difference;
        taxAverageVATReportTmp.Voucher                      = voucher;
        taxAverageVATReportTmp.TransDate                    = transDate;
        taxAverageVATReportTmp.TaxRegistrationNumber        = taxRegistrationNumber;
        taxAverageVATReportTmp.TaxBranchNumber              = taxBranchNumber;
        taxAverageVATReportTmp.insert();
        taxAverageVATReportTmp.clear();
        paymVATRatio            = 0;
        paymTaxBaseRefundAmount = 0;
        paymTaxRefundAmount     = 0;
        difference              = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the SSRS report business logic.
    /// </summary>
    /// <remarks>
    ///    Provides the ability to write the report business logic.This method will be called by SSRS at
    ///    runtime.The method should compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        Query                   query;
        QueryRun                queryRun;
        QueryBuildDataSource    qbdTaxTransInvoice;
        QueryBuildDataSource    abdTaxTransExtensionTHInvoice;
        QueryBuildDataSource    qbdTaxTransPaym;
        QueryBuildDataSource    abdTaxTransExtensionTHPaym;

        TaxAverageVATReportContract taxAverageVATReportContract = this.parmDataContract() as TaxAverageVATReportContract;

        startDateParameter              = taxAverageVATReportContract.parmStartDate();
        endDateParameter                = taxAverageVATReportContract.parmEndDate();
        taxBranchCodeParameter          = taxAverageVATReportContract.parmTaxBranchCode();
        salesTaxCodeParameter           = taxAverageVATReportContract.parmSalesTaxCode();
        taxInvoiceDateParameter         = taxAverageVATReportContract.parmTaxInvoiceDate();
        taxInvoiceReceiptDateParameter  = taxAverageVATReportContract.parmTaxInvoiceReceiptDate();
        taxInvoiceNumParameter          = taxAverageVATReportContract.parmTaxInvoiceNum();
        detailSummary                   = taxAverageVATReportContract.parmDetailSummary();
        taxBranchName                   = TaxBranch::getReportTaxBranchStr(taxBranchCodeParameter);

        query = new Query(queryStr(TaxAverageVATReport));

        query = this.initQuery(query);

        qbdTaxTransInvoice              = query.dataSourceName(queryDataSourceStr(TaxAverageVATReport, TaxTransInvoice));
        abdTaxTransExtensionTHInvoice   = query.dataSourceName(queryDataSourceStr(TaxAverageVATReport, TaxTransExtensionTHInvoice));
        qbdTaxTransPaym                 = query.dataSourceName(queryDataSourceStr(TaxAverageVATReport, TaxTransPaym));
        abdTaxTransExtensionTHPaym      = query.dataSourceName(queryDataSourceStr(TaxAverageVATReport, TaxTransExtensionTHPaym));

        if (TaxSpecificExchangeRateHelper::isTaxSpecificExchangeRateEnabled())
        {
            qbdTaxTransInvoice.addRange(fieldNum(TaxTrans, TaxDirection)).value(enum2Value(TaxDirection::IncomingTax_W));
        }

        queryRun                        = new QueryRun(query);
        while (queryRun.next())
        {
            taxTransInvoice             = queryRun.getNo(qbdTaxTransInvoice.id());
            taxTransExtensionTHInvoice  = queryRun.getNo(abdTaxTransExtensionTHInvoice.id());
            taxTransPaym                = queryRun.getNo(qbdTaxTransPaym.id());
            taxTransExtensionTHPaym     = queryRun.getNo(abdTaxTransExtensionTHPaym.id());
            insertIntoTmp   = true;

            if (detailSummary == DetailSummary::Summary)
            {
                if (preTaxInvoiceId != '')
                {
                    if ((preTaxInvoiceId != taxTransExtensionTHPaym.TaxInvoiceId)
                        && (preTaxInvoiceId != taxTransExtensionTHInvoice.TaxInvoiceId))
                    {
                        if (preInsertToTmp)
                        {
                            this.insertSummaryTmpTable();
                        }
                        preTaxAmountSum                 = 0;
                        preTaxBaseAmountSum             = 0;
                        preInvTaxRefundAmountSum        = 0;
                        preInvTaxBaseRefundAmountSum    = 0;
                        prePaymTaxRefundAmountSum       = 0;
                        prePaymTaxBaseRefundAmountSum   = 0;
                        preDifferenceSum                = 0;
                        preInsertToTmp = false;
                    }
                }

                this.executeSection();

                if (insertIntoTmp)
                {
                    preInsertToTmp                  = insertIntoTmp;

                    if (taxTransPaym)
                    {
                        preTaxInvoiceId             = taxTransExtensionTHPaym.TaxInvoiceId;
                        preTaxInvoiceNum            = taxTransExtensionTHPaym.TaxInvoiceId;
                        preTaxInvoiceDate           = taxTransExtensionTHPaym.TaxInvoiceDate;
                    }
                    else
                    {
                        preTaxInvoiceId             = taxTransExtensionTHInvoice.TaxInvoiceId;
                        preTaxInvoiceNum            = taxTransExtensionTHInvoice.TaxInvoiceId;
                        preTaxInvoiceDate           = taxTransExtensionTHInvoice.TaxInvoiceDate;
                    }
                    preActualName                   = realVendorName;
                    preTaxBranchName                = taxBranchName;
                    preTaxAmountSum                 = preTaxAmountSum + taxAmount;
                    preTaxBaseAmountSum             = preTaxBaseAmountSum + taxBaseAmount;
                    preInvVATRatio                  = invVATRatio;
                    preInvTaxRefundAmountSum        = preInvTaxRefundAmountSum + invTaxRefundAmount;
                    preInvTaxBaseRefundAmountSum    = preInvTaxBaseRefundAmountSum + invTaxBaseRefundAmount;
                    prePaymVATRatio                 = paymVATRatio;
                    prePaymTaxRefundAmountSum       = prePaymTaxRefundAmountSum + paymTaxRefundAmount;
                    prePaymTaxBaseRefundAmountSum   = prePaymTaxBaseRefundAmountSum + paymTaxBaseRefundAmount;
                    preDifferenceSum                = preDifferenceSum + difference;
                    if (taxTransPaym)
                    {
                        preVoucher                  = taxTransPaym.Voucher;
                    }
                    else
                    {
                        preVoucher                  = taxTransInvoice.Voucher;
                    }
                    preTransDate                    = transDate;
                }
            }
            else
            {
                this.executeSection();
                if (insertIntoTmp)
                {
                    this.insertTmpTable();
                }
            }
        }

        if (detailSummary == DetailSummary::Summary)
        {
            if (preInsertToTmp)
            {
                this.insertSummaryTmpTable();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>