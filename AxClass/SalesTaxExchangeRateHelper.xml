<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTaxExchangeRateHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesTaxExchangeRateHelper</c> class manages the process that is related to the sales tax
/// exchange rate.
/// </summary>
class SalesTaxExchangeRateHelper
{
    #ISOCountryRegionCodes
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>changeSourceRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the sales tax transaction exchange rate of the source record.
    /// </summary>
    /// <param name="_oldSourceTableId">
    /// The old source table ID.
    /// </param>
    /// <param name="_oldSourceRecordId">
    /// The old source record ID.
    /// </param>
    /// <param name="_newSourceTableId">
    /// The new source table ID.
    /// </param>
    /// <param name="_newSourceRecordId">
    /// The new source record ID.
    /// </param>
    public static void changeSourceRecord(
        RefTableId  _oldSourceTableId,
        RefRecId    _oldSourceRecordId,
        RefTableId  _newSourceTableId,
        RefRecId    _newSourceRecordId)
    {
        SalesTaxTransactionExchangeRate salesTaxTransactionExchangeRate;

        if (TaxParameters::isBankExchRateEnabled_W())
        {
            update_recordset salesTaxTransactionExchangeRate
                setting SourceTableId = _newSourceTableId,
                    SourceRecordId = _newSourceRecordId
                where salesTaxTransactionExchangeRate.SourceTableId == _oldSourceTableId &&
                    salesTaxTransactionExchangeRate.SourceRecordId == _oldSourceRecordId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchangeRateForSalesTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sales tax exchange rate for a specific date and currency.
    /// </summary>
    /// <param name="_transactionCurrencyCode">
    /// The transaction currency code.
    /// </param>
    /// <param name="_transactionType">
    /// The transaction type.
    /// </param>
    /// <param name="_vatDueDate">
    /// The VAT due date.
    /// </param>
    /// <param name="_aifErrorType">
    /// The error handling type.
    /// </param>
    /// <returns>
    /// The currency exchange rate.
    /// </returns>
    public static CurrencyExchangeRate getExchangeRateForSalesTax(
        CurrencyCode    _transactionCurrencyCode,
        TransactionType _transactionType,
        VatDueDate_W    _vatDueDate,
        AifErrorType    _aifErrorType = AifErrorType::None)
    {
        CurrencyExchangeRate    currencyExchangeRate;
        ExchangeRateHelper      exchangeRateHelper;
        LedgerRecId             currentLedgerRecId;
        CurrencyCode            currentAccountingCurrency;
        ExchangeRateTypeRecId   originalExchangeRateType;
        Description             exchangeRateTypeDescription;
        TaxParameters           taxParameters;
        ExchangeRateHelper      exchangeRateHelperTriangularTo;
        ExchangeRateHelper      exchangeRateHelperTriangularFrom;
        CurrencyCode            triangulationCurrency;

        // Embedded method to get the exchange rate of a specific exchange rate type
        CurrencyExchangeRate getExchangeRateOfRateType(ExchangeRateTypeRecId _localExchangeRateType)
        {
            CurrencyExchangeRate    exchangeRate;

            if (_localExchangeRateType)
            {
                exchangeRateHelper.parmExchangeRateTypeRecId(_localExchangeRateType);
                exchangeRate = exchangeRateHelper.getExchangeRate1();

                if (!exchangeRate)
                {
                    triangulationCurrency = ExchangeRateCurrencyPairCalculationRules::findCalculationRule(
                        _localExchangeRateType,
                        curext(),
                        _transactionCurrencyCode,
                        currentAccountingCurrency).CurrencyTriangulation;

                    if (triangulationCurrency)
                    {
                        exchangeRateHelperTriangularTo = ExchangeRateHelper::newExchangeDate(currentLedgerRecId, _transactionCurrencyCode, _vatDueDate);
                        exchangeRateHelperTriangularTo.parmToCurrency               (triangulationCurrency);
                        exchangeRateHelperTriangularTo.parmExchangeRateTypeRecId    (_localExchangeRateType);
                        exchangeRateHelperTriangularTo.parmErrorType                (AifErrorType::None);

                        exchangeRateHelperTriangularFrom = ExchangeRateHelper::newExchangeDate(currentLedgerRecId, triangulationCurrency, _vatDueDate);
                        exchangeRateHelperTriangularFrom.parmExchangeRateTypeRecId  (_localExchangeRateType);
                        exchangeRateHelperTriangularFrom.parmErrorType              (AifErrorType::None);

                        exchangeRate = exchangeRateHelperTriangularTo.getExchangeRate1() * exchangeRateHelperTriangularFrom.getExchangeRate1() / 100;
                    }
                }
            }

            return exchangeRate;
        }

        // Embedded method to find an exchange rate type and exchange rate.
        CurrencyExchangeRate getExchangeRate(TransactionType _localTransactionType)
        {
            ExchangeRateTypeRecId   exchangeRateType;
            CurrencyExchangeRate    typeExchangeRate;

            exchangeRateType = LedgerSalesTaxExchangeRateTypeCurrency::getExchangeRateTypeOfTransactionType(
                currentLedgerRecId, _transactionCurrencyCode, _localTransactionType);

            if (!originalExchangeRateType)
            {
                originalExchangeRateType = exchangeRateType;
            }

            typeExchangeRate = getExchangeRateOfRateType(exchangeRateType);

            return typeExchangeRate;
        }

        currentLedgerRecId = Ledger::current();
        currentAccountingCurrency = Ledger::accountingCurrencyByLedger(currentLedgerRecId);

        if (currentAccountingCurrency != _transactionCurrencyCode)
        {
            exchangeRateHelper = ExchangeRateHelper::newExchangeDate(currentLedgerRecId, _transactionCurrencyCode, _vatDueDate);
            exchangeRateHelper.parmErrorType(AifErrorType::None);

            currencyExchangeRate = getExchangeRate(_transactionType);

            if (!currencyExchangeRate)
            {
                if (_transactionType == TransactionType::Sales)
                {
                    taxParameters = TaxParameters::find();
                    currencyExchangeRate = getExchangeRateOfRateType(taxParameters.SalesTaxPayableExchangeRateType);
                }
                else if (_transactionType == TransactionType::Purchase)
                {
                    // if there is no exchange rate for Purchase transaction type, then use the exchange rate of Sales type.
                    currencyExchangeRate = getExchangeRate(TransactionType::Sales);

                    if (!currencyExchangeRate)
                    {
                        taxParameters = TaxParameters::find();
                        currencyExchangeRate = getExchangeRateOfRateType(taxParameters.SalesTaxReceivableExchangeRateType);

                        if (!currencyExchangeRate)
                        {
                            currencyExchangeRate = getExchangeRateOfRateType(taxParameters.SalesTaxPayableExchangeRateType);
                        }
                    }
                }
            }
        }

        if (currencyExchangeRate == 0 && _aifErrorType != AifErrorType::None)
        {
            if (!originalExchangeRateType)
            {
                if (_transactionType == TransactionType::Purchase && taxParameters.SalesTaxReceivableExchangeRateType)
                {
                    originalExchangeRateType = taxParameters.SalesTaxReceivableExchangeRateType;
                }
                else
                {
                    originalExchangeRateType = taxParameters.SalesTaxPayableExchangeRateType;
                }
            }

            if (originalExchangeRateType)
            {
                exchangeRateTypeDescription = ExchangeRateType::find(originalExchangeRateType).Description;
            }

            warning(strFmt("@SYS321719", exchangeRateTypeDescription, _transactionCurrencyCode, currentAccountingCurrency, _vatDueDate));
        }

        return currencyExchangeRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesTaxTransactionExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the sales tax transaction exchange rate of the source record.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The source table ID.
    /// </param>
    /// <param name="_sourceRecordId">
    /// The source record ID.
    /// </param>
    /// <returns>
    /// The sales tax exchange rate.
    /// </returns>
    public static CurrencyExchangeRate getSalesTaxTransactionExchangeRate(
        RefTableId  _sourceTableId,
        RefRecId    _sourceRecordId)
    {
        CurrencyExchangeRate    taxExchangeRate;

        if (TaxParameters::isBankExchRateEnabled_W())
        {
            taxExchangeRate = SalesTaxTransactionExchangeRate::findBySourceRecord(_sourceTableId, _sourceRecordId).SalesTaxExchangeRate;
        }

        return taxExchangeRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maintainSalesTaxTransactionExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the sales tax transaction exchange rate record and the related information.
    /// </summary>
    /// <param name="_sourceRecord">
    /// The source record of sales tax.
    /// </param>
    /// <param name="_transactionCurrencyCode">
    /// The transaction currency code.
    /// </param>
    /// <param name="_transactionType">
    /// The transaction type of tax.
    /// </param>
    /// <param name="_dateOfVATRegister">
    /// The date of VAT register.
    /// </param>
    public static void maintainSalesTaxTransactionExchangeRate(
        Common          _sourceRecord,
        CurrencyCode    _transactionCurrencyCode,
        TransactionType _transactionType,
        VatDueDate_W    _dateOfVATRegister)
    {
        VatDueDate_W localDateOfVatRegister;
        LedgerJournalTrans ledgerJournalTrans;

        if (_sourceRecord is LedgerJournalTrans)
        {
            ledgerJournalTrans = _sourceRecord as LedgerJournalTrans;
            localDateOfVatRegister = ledgerJournalTrans.VatDueDate_W;
        }
        else
        {
            localDateOfVatRegister = _dateOfVATRegister;
        }

        if (localDateOfVatRegister &&
            TaxParameters::isBankExchRateEnabled_W())
        {
            CurrencyExchangeRate salesTaxExchangeRate;

            if (ledgerJournalTrans.Company
                && ledgerJournalTrans.Company != curExt()
                && TaxSalesTaxExchangeRateSpecificLegalEntity_PLFlight::instance().isEnabled())
            {
                changecompany(ledgerJournalTrans.Company)
                {
                    salesTaxExchangeRate = SalesTaxExchangeRateHelper::calcSalesTaxExchangeRate(_transactionCurrencyCode,
                        _transactionType, localDateOfVatRegister);
                }
            }
            else
            {
                salesTaxExchangeRate = SalesTaxExchangeRateHelper::calcSalesTaxExchangeRate(_transactionCurrencyCode,
                    _transactionType, localDateOfVatRegister);
            }

            SalesTaxExchangeRateHelper::saveSalesTaxTransactionExchangeRate(_sourceRecord.TableId, _sourceRecord.RecId, _transactionCurrencyCode, salesTaxExchangeRate, localDateOfVatRegister);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSalesTaxExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate sales tax exchange rate.
    /// </summary>
    /// <param name = "_transactionCurrencyCode">The transaction currency code.</param>
    /// <param name = "_transactionType">The transaction type of tax.</param>
    /// <param name = "_dateOfVATRegister">The date of VAT register.</param>
    /// <returns>The sales tax exchange rate.</returns>
    public static CurrencyExchangeRate calcSalesTaxExchangeRate(CurrencyCode _transactionCurrencyCode,
        TransactionType _transactionType,
        VatDueDate_W _dateOfVATRegister)
    {
        CurrencyExchangeRate salesTaxExchangeRate = SalesTaxExchangeRateHelper::getExchangeRateForSalesTax(_transactionCurrencyCode,
            _transactionType, _dateOfVATRegister);

        if (salesTaxExchangeRate == 0)
        {
            salesTaxExchangeRate = ExchangeRateHelper::exchRate(_transactionCurrencyCode, _dateOfVATRegister);
        }

        return salesTaxExchangeRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveSalesTaxTransactionExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Save the sales tax transaction exchange rate record.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The source table id
    /// </param>
    /// <param name="_sourceRecordId">
    /// The source record id.
    /// </param>
    /// <param name="_transactionCurrencyCode">
    /// The transaction currency code.
    /// </param>
    /// <param name="_salesTaxExchangeRate">
    /// The sales tax exchange rate.
    /// </param>
    /// <param name="_dateOfVATRegister">
    /// The register date fo VAT.
    /// </param>
    /// <param name="_keepOriginalexchangeRate">
    /// true if the original exchange rate should be kept and used; optional.
    /// </param>
    public static void saveSalesTaxTransactionExchangeRate(
        RefTableId              _sourceTableId,
        RefRecId                _sourceRecordId,
        CurrencyCode            _transactionCurrencyCode,
        CurrencyExchangeRate    _salesTaxExchangeRate,
        VatDueDate_W            _dateOfVATRegister = dateNull(),
        NoYes                   _keepOriginalexchangeRate = NoYes::No)
    {
        SalesTaxTransactionExchangeRate salesTaxTransactionExchangeRate;

        if (_sourceTableId && _sourceRecordId && TaxParameters::isBankExchRateEnabled_W())
        {
            ttsbegin;

            CurrencyCode accountingCurrency = Ledger::accountingCurrency();
            if (_sourceTableId == tableNum(LedgerJournalTrans) && TaxSalesTaxExchangeRateSpecificLegalEntity_PLFlight::instance().isEnabled())
            {
                LedgerJournalTrans ledgerJournalTrans = LedgerJournalTrans::findRecId(_sourceRecordId, false);
                if (ledgerJournalTrans.Company && ledgerJournalTrans.Company != curExt())
                {
                    accountingCurrency = Ledger::accountingCurrency(ledgerJournalTrans.getCompanyLegalEntity());
                }
            }

            if (_transactionCurrencyCode == accountingCurrency)
            {
                delete_from salesTaxTransactionExchangeRate
                    where salesTaxTransactionExchangeRate.SourceTableId == _sourceTableId &&
                        salesTaxTransactionExchangeRate.SourceRecordId == _sourceRecordId;
            }
            else
            {
                salesTaxTransactionExchangeRate = SalesTaxTransactionExchangeRate::findBySourceRecord(_sourceTableId, _sourceRecordId, true);

                if (salesTaxTransactionExchangeRate)
                {
                    if (salesTaxTransactionExchangeRate.KeepOriginalExchangeRate == NoYes::No)
                    {
                        salesTaxTransactionExchangeRate.SalesTaxExchangeRate = _salesTaxExchangeRate;
                        salesTaxTransactionExchangeRate.KeepOriginalExchangeRate = _keepOriginalexchangeRate;
                    }

                    if (_dateOfVATRegister && _dateOfVATRegister != salesTaxTransactionExchangeRate.DateOfVATRegister)
                    {
                        salesTaxTransactionExchangeRate.DateOfVATRegister = _dateOfVATRegister;
                    }

                    salesTaxTransactionExchangeRate.update();
                }
                else
                {
                    salesTaxTransactionExchangeRate.SourceTableId = _sourceTableId;
                    salesTaxTransactionExchangeRate.SourceRecordId = _sourceRecordId;
                    salesTaxTransactionExchangeRate.SalesTaxExchangeRate = _salesTaxExchangeRate;
                    salesTaxTransactionExchangeRate.DateOfVATRegister = _dateOfVATRegister;
                    salesTaxTransactionExchangeRate.KeepOriginalExchangeRate = _keepOriginalexchangeRate;
                    salesTaxTransactionExchangeRate.insert();
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>