<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanTemplateManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.IO;
using Microsoft.Dynamics.Platform.Integration.Office;
using Microsoft.Dynamics.Platform.Integration.Office.Excel.Export;

/// <summary>
/// Manages the template related actions like generate, upload, view, and verification.
/// </summary>
public class BudgetPlanTemplateManager
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a template for the current layout.
    /// </summary>
    /// <param name = "_layout"> The record buffer of the <c>BudgetPlanLayout</c> for which the template needs to be generated. </param>
    public static void generateTemplate(BudgetPlanLayout _layout)
    {        
        if (DocuTemplate::findTemplate(OfficeAppApplicationType::Excel, _layout.Name))
        {
            BudgetPlanLayoutHelper::deleteAssociatedLayoutMappingAndCacheRecords(_layout.RecId);
        }

        using (Stream workbookStream = new MemoryStream())
        {
            DataEntityExportGenerator exportGenerator = new DataEntityExportGenerator();
            boolean exportSuccess = exportGenerator.GenerateWorkbook(BudgetPlanTemplateManager::buildDataEntityExportInfo(_layout.RecId), workbookStream);

            if (exportSuccess)
            {
                workbookStream.Seek(0, System.IO.SeekOrigin::Begin);
                DocuTemplateUploadStrategy uploadStrategy = new DocuTemplateUploadStrategy();
                DocuTemplateUploadResult uploadResult = uploadStrategy.uploadFile(
                                                        workbookStream,
                                                        strFmt(BudgetPlanningConstants::placeHolder1, _layout.Name, BudgetPlanningConstants::ExcelExtension),
                                                        BudgetPlanningConstants::emptyString,
                                                        BudgetPlanningConstants::ExcelExtension) as DocuTemplateUploadResult;

                BudgetPlanTemplateManager::createDocumentTemplate(uploadResult, _layout.Name, OfficeAppApplicationType::Excel, _layout.Name);
            }
            else
            {
                throw error("@Budget:GenerateTemplateFailed");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDataEntityExportInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the <c>DataEntityExportInfo</c> object to be used to build the workbook.
    /// </summary>
    /// <param name = "_layoutRecId"> The record ID of <c>BudgetPlanLayout</c> buffer. </param>
    /// <returns> The <c>DataEntityExportInfo</c> built. </returns>
    public static Microsoft.Dynamics.Platform.Integration.Office.Excel.Export.DataEntityExportInfo buildDataEntityExportInfo(BudgetPlanLayoutRecId _layoutRecId)
    {
        DictDataEntity headerDataEntity     = new DictDataEntity(tableNum(BudgetPlanHeaderEntity));
        DictDataEntity worksheetDataEntity  = new DictDataEntity(tableNum(BudgetPlanWorksheetEntity));

        // Set entity info
        DataEntityInfo headerDataEntityInfo = new DataEntityInfo();
        headerDataEntityInfo.Name       = headerDataEntity.publicEntityName();
        headerDataEntityInfo.PublicName = headerDataEntity.publicEntityName();
        headerDataEntityInfo.RefreshAfterPublish = true;

        DataEntityInfo worksheetDataEntityInfo = new DataEntityInfo();
        worksheetDataEntityInfo.Name        = worksheetDataEntity.publicEntityName();
        worksheetDataEntityInfo.PublicName  = worksheetDataEntity.publicEntityName();

        // Set header field binding info
        BindingInfo headerBindingInfo = new BindingInfo();
        headerBindingInfo.EntityName = headerDataEntity.publicEntityName();

        BudgetPlanTemplateManager::setHeaderFieldInfo(headerBindingInfo);

        // Set worksheet field binding info
        BindingInfo worksheetBindingInfo = new BindingInfo();
        worksheetBindingInfo.EntityName = worksheetDataEntity.publicEntityName();

        BudgetPlanTemplateManager::setWorksheetFieldInfo(worksheetBindingInfo, _layoutRecId);

        // Set the export information with the entities and bindings
        DataEntityExportInfo exportInfo = new DataEntityExportInfo();
        exportInfo.AppReference = ExportToExcelDataEntityHelper::getAppInfo();
        exportInfo.Connection   = ExportToExcelDataEntityHelper::getConnectionInfo();
        exportInfo.get_Entities().Add(worksheetDataEntityInfo);
        exportInfo.get_Entities().Add(headerDataEntityInfo);
        exportInfo.get_Bindings().Add(worksheetBindingInfo);
        exportInfo.get_Bindings().Add(headerBindingInfo);

        return exportInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHeaderFieldInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the list of fields for a given <c>BudgetPlanLayout</c>.
    /// </summary>
    /// <param name = "_headerBindingInfo"> The header <c>BindingInfo</c> to attach the <c>FieldInfo</c> list to. </param>
    public static void setHeaderFieldInfo(Microsoft.Dynamics.Platform.Integration.Office.BindingInfo _headerBindingInfo)
    {
        TableId     budgetPlanHeaderEntityId = tableNum(BudgetPlanHeaderEntity);

        FieldInfo headerFieldDetails  = new FieldInfo();

        DictField   field = new DictField(budgetPlanHeaderEntityId, fieldNum(BudgetPlanHeaderEntity, Name));
        headerFieldDetails = BudgetPlanTemplateManager::buildFieldInfo(_headerBindingInfo.EntityName, field.name(), field.label(), field.labelDefined());
        _headerBindingInfo.get_fields().Add(headerFieldDetails);

        field = new DictField(budgetPlanHeaderEntityId, fieldNum(BudgetPlanHeaderEntity, DocumentNumber));
        headerFieldDetails = BudgetPlanTemplateManager::buildFieldInfo(_headerBindingInfo.EntityName, field.name(), field.label(), field.labelDefined());
        _headerBindingInfo.get_fields().Add(headerFieldDetails);

        field = new DictField(budgetPlanHeaderEntityId, fieldNum(BudgetPlanHeaderEntity, Layout));
        headerFieldDetails = BudgetPlanTemplateManager::buildFieldInfo(_headerBindingInfo.EntityName, field.name(), field.label(), field.labelDefined());
        _headerBindingInfo.get_fields().Add(headerFieldDetails);

        field = new DictField(budgetPlanHeaderEntityId, fieldNum(BudgetPlanHeaderEntity, PersonnelName));
        headerFieldDetails = BudgetPlanTemplateManager::buildFieldInfo(_headerBindingInfo.EntityName, field.name(), field.label(), field.labelDefined());
        _headerBindingInfo.get_fields().Add(headerFieldDetails);

        field = new DictField(budgetPlanHeaderEntityId, fieldNum(BudgetPlanHeaderEntity, BudgetingOrganizationName));
        headerFieldDetails = BudgetPlanTemplateManager::buildFieldInfo(_headerBindingInfo.EntityName, field.name(), field.label(), field.labelDefined());
        _headerBindingInfo.get_fields().Add(headerFieldDetails);

        field = new DictField(budgetPlanHeaderEntityId, fieldNum(BudgetPlanHeaderEntity, InUseBy));
        headerFieldDetails = BudgetPlanTemplateManager::buildFieldInfo(_headerBindingInfo.EntityName, field.name(), field.label(), field.labelDefined());
        _headerBindingInfo.get_fields().Add(headerFieldDetails);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorksheetFieldInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of fields for a given <c>BudgetPlanLayout</c>.
    /// </summary>
    /// <param name = "_worksheetBindingInfo"> The worksheet <c>BindingInfo</c> to attach the <c>FieldInfo</c> list to. </param>
    /// <param name = "_layoutRecId"> The record ID of the <c>BudgetPlanLayout</c> record for which to fetch the list of field names. </param>
    public static void setWorksheetFieldInfo(Microsoft.Dynamics.Platform.Integration.Office.BindingInfo _worksheetBindingInfo, BudgetPlanLayoutRecId _layoutRecId)
    {
        BudgetPlanLayoutManager::loadLayoutMapping(_layoutRecId);

        TableId                 budgetPlanLineActiveViewTableId = tableNum(BudgetPlanLineActiveView);
        TableId                 budgetPlanWorksheetTableId = tableNum(BudgetPlanWorksheetEntity);
        BudgetPlanLayoutMapping layoutMapping;
        LanguageId              currentUserLanguage = currentUserLanguage();

        // Add key fields
        FieldInfo worksheetFieldDetails = new FieldInfo();

        DictField field = new DictField(budgetPlanWorksheetTableId, fieldNum(BudgetPlanWorksheetEntity, LineNumber));
        worksheetFieldDetails = BudgetPlanTemplateManager::buildFieldInfo(_worksheetBindingInfo.EntityName, field.name(), field.label(), field.labelDefined());
        _worksheetBindingInfo.get_fields().Add(worksheetFieldDetails);

        while select FieldId, FieldLabel, DescriptionFieldName, IsEditable from layoutMapping
            order by ElementIndex
            where layoutMapping.Layout       == _layoutRecId
                && layoutMapping.LanguageId  == currentUserLanguage
                && layoutMapping.InWorksheet == NoYes::Yes
        {
            worksheetFieldDetails = BudgetPlanTemplateManager::buildFieldInfo(_worksheetBindingInfo.EntityName, fieldId2Name(budgetPlanLineActiveViewTableId, layoutMapping.FieldId), layoutMapping.FieldLabel, BudgetPlanningConstants::emptyString, !layoutMapping.IsEditable);
            _worksheetBindingInfo.get_fields().Add(worksheetFieldDetails);

            if (layoutMapping.DescriptionFieldName != BudgetPlanningConstants::emptyString)
            {
                worksheetFieldDetails = BudgetPlanTemplateManager::buildFieldInfo(_worksheetBindingInfo.EntityName, layoutMapping.DescriptionFieldName, "@Budget:DescriptionColumnHeading", BudgetPlanningConstants::emptyString, true);
                _worksheetBindingInfo.get_fields().Add(worksheetFieldDetails);

                // If Forecast Position, add the column for the worker name after the position description.
                if (layoutMapping.DescriptionFieldName == BudgetPlanningConstants::ForecastPositionDescriptionControlName)
                {
                    worksheetFieldDetails = BudgetPlanTemplateManager::buildFieldInfo(_worksheetBindingInfo.EntityName, BudgetPlanningConstants::ForecastPositionWorkerControlName, "@SYS305602", BudgetPlanningConstants::emptyString, true);
                    _worksheetBindingInfo.get_fields().Add(worksheetFieldDetails);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildFieldInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the <c>FieldInfo</c> object with the values specified.
    /// </summary>
    /// <param name = "_entityName"> The name of the entity to set. </param>
    /// <param name = "_name"> The name of the field being bound. </param>
    /// <param name = "_label"> The label to use as column header for the field being bound. </param>
    /// <param name = "_labelId"> The label defined to use as column header for the field being bound; optional. </param>
    /// <param name = "_readOnly"> The readonly value defined on the column within the layout; optional. </param>
    /// <returns> The <c>FieldInfo</c> object built. </returns>
    public static Microsoft.Dynamics.Platform.Integration.Office.FieldInfo buildFieldInfo(
        str     _entityName,
        str     _name,
        str     _label,
        str     _labelId = BudgetPlanningConstants::emptyString,
        boolean _readOnly = false)
    {
        FieldInfo worksheetFieldDetails = new FieldInfo();

        worksheetFieldDetails.EntityName            = _entityName;
        worksheetFieldDetails.Name                  = BudgetPlanLineFieldActiveViewMapping::getWorksheetEntityFieldName(_name);
        worksheetFieldDetails.Label                 = _label;
        worksheetFieldDetails.LabelId               = _labelId;
        worksheetFieldDetails.ForceReadOnly         = _readOnly;
        worksheetFieldDetails.ForceReadOnlyOnCreate = _readOnly;

        return worksheetFieldDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDocumentTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>DocuTemplate</c> record for the template generated or uploaded.
    /// </summary>
    /// <param name = "_templateUploadResult"> The object containing the uploaded template details. </param>
    /// <param name = "_templateName"> The unique name for the template record. </param>
    /// <param name = "_documentType"> The type of template being uploaded. </param>
    /// <param name = "_displayName"> The display name for the template record; optional. </param>
    /// <param name = "_templateDescription"> The description for the template record; optional. </param>
    public static void createDocumentTemplate(
        DocuTemplateUploadResult    _templateUploadResult,
        DocuTemplateName            _templateName,
        OfficeAppApplicationType    _documentType,
        DocuTemplateDisplayName     _displayName = BudgetPlanningConstants::emptyString,
        Description255              _templateDescription = BudgetPlanningConstants::emptyString)
    {
        DocuTemplate docuTemplate = DocuTemplate::findExactTemplateWithRegion(
            _documentType,
            _templateName,
            BudgetPlanningConstants::emptyString,
            BudgetPlanningConstants::emptyString,
            BudgetPlanningConstants::emptyString,
            true);

        if (docuTemplate)
        {
            ttsbegin;
            docuTemplate.FileID = _templateUploadResult.getFileId();
            docuTemplate.FileName = _templateUploadResult.getFileName();
            docuTemplate.update();
            ttscommit;
        }
        else
        {
            docuTemplate.initValue();
            docuTemplate.TemplateType       = _templateUploadResult.getTemplateType();
            docuTemplate.TemplateID         = _templateName;
            docuTemplate.FileName           = _templateUploadResult.getFileName();
            docuTemplate.FileID             = _templateUploadResult.getFileId();
            docuTemplate.RootEntityName     = _templateUploadResult.getRootEntityName();
            docuTemplate.DisplayName        = _displayName;
            docuTemplate.ListInOfficeMenu   = NoYes::No;
            docuTemplate.Description        = _templateDescription;
            docuTemplate.insert();

            if (_documentType == OfficeAppApplicationType::Word)
            {
                BudgetPlanTemplate template;
                template.DocuTemplate = docuTemplate.RecId;
                template.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the template bindings in the uploaded document is a proper set of the layout defined.
    /// </summary>
    /// <param name = "_templateUploadResult"> The uploaded document result object. </param>
    /// <param name = "_layoutRecId"> The record ID of the <c>BudgetPlanLayout</c> the bound fields need to be a proper set of. </param>
    public static void validateTemplate(DocuTemplateUploadResult _templateUploadResult, BudgetPlanLayoutRecId _layoutRecId)
    {
        boolean             isValid = true;
        boolean             containsWorksheetEntity;
        System.IO.Stream    templateStream = _templateUploadResult.openResult();

        // Validate document type
        if (OfficeAppApplicationType::Excel != DocuTemplateHelper::DetermineApplication(System.IO.Path::GetExtension(_templateUploadResult.getFileName()), BudgetPlanningConstants::emptyString))
        {
            isValid = error(strFmt("@Budget:UploadedDocumentTypeMismatch", OfficeAppApplicationType::Excel));
        }

        // Validate fields from the worksheet entity
        if (isValid)
        {
            using (var spreadsheet = Excel.WorkbookSettingsManager::OpenSpreadsheetDocument(templateStream, false))
            {
                Excel.WorkbookSettingsManager settingsManager = new Excel.WorkbookSettingsManager(spreadsheet);
                DictDataEntity worksheetDataEntity  = new DictDataEntity(tableNum(BudgetPlanWorksheetEntity));
                LanguageId     currentUserLanguage = currentUserLanguage();

                var bindings = settingsManager.GetTableBindingsForPublicEntityName(worksheetDataEntity.publicEntityName());

                Counter bindingCount = bindings.Count;
                for (int i = 0; i < bindingCount; i++)
                {
                    BindingInfo binding = bindings.get_Item(i);

                    var fields = binding.get_fields();

                    boolean     foundFieldBinding;
                    Counter     fieldsCount = fields.get_Count();
                    FieldInfo fieldInfo;

                    BudgetPlanLayoutManager::loadLayoutMapping(_layoutRecId);
                    BudgetPlanLayoutMapping layoutMapping;
                    while select FieldName from layoutMapping
                        order by ElementIndex
                        where layoutMapping.Layout       == _layoutRecId
                            && layoutMapping.LanguageId  == currentUserLanguage
                            && layoutMapping.InWorksheet == NoYes::Yes
                    {
                        foundFieldBinding = false;

                        for (int x = 0; x < fieldsCount; x++)
                        {
                            fieldInfo = fields.get_item(x);
                            if (layoutMapping.FieldName == fieldInfo.Name)
                            {
                                foundFieldBinding = true;
                                break;
                            }
                        }

                        if (!foundFieldBinding)
                        {
                            throw error(strFmt("@Budget:FieldNotFoundInWorksheet", layoutMapping.FieldName));
                        }
                    }

                    containsWorksheetEntity = true;
                }
            }

            if (!containsWorksheetEntity)
            {
                throw error("@Budget:WorksheetEntityMissingFromTemplate");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onTemplateSettingsChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the templateSettingsChanged event of a <see cref="DocuTemplateRender"/> class.
    /// </summary>
    /// <param name = "_template">The template being generated from.</param>
    /// <param name = "_settingsManager">The SettingsManager being used to change the settings.</param>
    /// <param name = "_context">The context object, if one was provided; otherwise, null.</param>
    protected void onTemplateSettingsChanged(DocuTemplate _template, Microsoft.Dynamics.Platform.Integration.Office.SettingsManager _settingsManager, object _context)
    {
        Excel.WorkbookSettingsManager workbookSettingsManager = _settingsManager as Excel.WorkbookSettingsManager;
        var dataConnectorSettings = workbookSettingsManager.DataConnectorSettings;
        var dataOptions = dataConnectorSettings.DataOptions;
        dataOptions.RefreshOnOpen = false;

        workbookSettingsManager.DataConnectorSettings = dataConnectorSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>launchTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Launches the template that was previously generated.
    /// </summary>
    /// <param name = "_layout"> The <c>BudgetPlanLayout</c> record buffer for which to launch the template. </param>
    public static void launchTemplate(BudgetPlanLayout _layout)
    {
        DocuTemplate docuTemplate;

        docuTemplate = DocuTemplate::findExactTemplateWithRegion(
            OfficeAppApplicationType::Excel,
            _layout.Name,
            BudgetPlanningConstants::emptyString,
            BudgetPlanningConstants::emptyString,
            BudgetPlanningConstants::emptyString);

        if (!docuTemplate)
        {
            throw error("@Budget:NoTemplateCannotOpenFile");
        }

        BudgetPlanTemplateManager templateManager = new BudgetPlanTemplateManager();

        using (System.IO.MemoryStream launchStream = new System.IO.MemoryStream())
        {
            DocuTemplateRender templateRender = new DocuTemplateRender();
            templateRender.templateSettingsChanged += eventhandler(templateManager.onTemplateSettingsChanged);
            templateRender.renderTemplateToStream(docuTemplate, null, launchStream);

            launchStream.Seek(0, System.IO.SeekOrigin::Begin);

            str extension = docuTemplate.getFileExtension() ? docuTemplate.getFileExtension() : BudgetPlanningConstants::ExcelExtension;

            str launchUrl = ExportToExcelStorageHelper::uploadExportStream(launchStream, OfficeAppApplicationType::Excel, _layout.Name, extension);

            if (launchUrl)
            {
                Browser browser = new Browser();
                browser.navigate(launchUrl, false, false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if (_args == null)
        {
            throw error(Error::missingParameter(_args));
        }
        if (_args.record() == null)
        {
            throw error(Error::missingRecord(tableStr(BudgetPlanLayout)));
        }
        if (!(_args.record() is BudgetPlanLayout))
        {
            throw error(strFmt("@Budget:RecordBufferTypeNotSupported", tableId2Name(_args.record().TableId())));
        }

        switch (_args.menuItemName())
        {
            case menuItemActionStr(BudgetPlanTemplateGenerate):
                BudgetPlanTemplateManager::generateTemplate(_args.record());
                break;

            case menuItemActionStr(BudgetPlanTemplateView):
                BudgetPlanTemplateManager::launchTemplate(_args.record());
                break;

            default:
                throw error("@Budget:TemplateActionNotSupported");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>DocuTemplate</c> record for a given layout.
    /// </summary>
    /// <param name = "_layoutRecId"> The <c>BudgetPLanLayout</c> record ID. </param>
    public static void deleteTemplate(BudgetPlanLayoutRecId _layoutRecId)
    {
        BudgetPlanLayout layout = BudgetPlanLayout::find(_layoutRecId);
        if (!layout)
        {
            throw error(strFmt("@Budget:MissingParameterValue",
                                    staticMethodStr(BudgetPlanTemplateManager, deleteTemplate),
                                    extendedTypeId2pname(extendedTypeNum(BudgetPlanLayoutRecId))));
        }

        DocuTemplate docuTemplate = DocuTemplate::findExactTemplateWithRegion(
                                        OfficeAppApplicationType::Excel,
                                        layout.Name,
                                        BudgetPlanningConstants::emptyString,
                                        BudgetPlanningConstants::emptyString,
                                        BudgetPlanningConstants::emptyString,
                                        true);

        if (docuTemplate)
        {
            ttsbegin;
            docuTemplate.delete();
            ttscommit;
        }

        if (layout.UseBudgetPlanLineMassUpdate)
        {
            BudgetPlanLineMassUpdateTemplateManager::deleteMassUpdateDefinitionGroupEntity(layout);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>