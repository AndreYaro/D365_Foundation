<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchFormLetterContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchFormLetterContract</c> class is used as the data contract class for the
/// <c>FormletterService</c> service when you post purchase orders.
/// </summary>
[DataContractAttribute]
abstract class PurchFormLetterContract
extends FormLetterContract
{
    PurchTable          purchTable;
    NoYes               editLinesChanged;

    //SysQueryRun
    str                 chooseLinesPacked;
    NoYes               creditRemaining;

    NoYes               wmsJournalTableDsIsSet;
    NoYes               processAdditional;
    NoYes               clearTotals;
    Num                 parmTableNum;
    NoYes               intercompanyNoSalesFormletterUpdate;
    InterCompanyVoucher interCompanyVoucher;
    str                 newPurchLineRecIdSet;
    str                 deletePurchTablePurchIdSet;
    str                 deletePurchLineRecIdSet;
    LedgerJournalTrans  ledgerJournalTrans;

    Common parmTable;
    DocumentOrigin      documentOrigin;
    PurchInvoiceType    invoiceType;
    NoYes               checkForHold;
    PurchUpdate         specQty;
    NoYes               printSalesFormLetter;
    NoYes               printProductLabels;
    NoYes               printShelfLabels;
    str                 printerSettingsPostingReport;

    // <GEERU>
    ReceiptListDeviationType_RU receiptListDeviationType;
    boolean                     preserveReceiptStatement;
    // </GEERU>
    // <GEEU>
    LtDocNumberingCode          ltDocNumberingCode;
    // </GEEU>
    // <GEEPL>
    PlSADNumberCode             sadNumberCode;
    ExchRate                    sadExchRate;
    CurrencyCode                sadCurrencyCode;
    // </GEEPL>

    //List of parameters common for FormLetter contract classes that needs to be packed
    //for the correct class transition between client and server.
    //If you need some additional parameters on the client, add them to this list.

    #define.CurrentVersion(8)
    #define.Version7(7)

    #LOCALMACRO.ParmListPurch
        purchTable,
        editLinesChanged,
        chooseLinesPacked,
        creditRemaining,
        wmsJournalTableDsIsSet,
        processAdditional,
        clearTotals,
        parmTableNum,
        intercompanyNoSalesFormletterUpdate,
        interCompanyVoucher,
        newPurchLineRecIdSet,
        deletePurchTablePurchIdSet,
        deletePurchLineRecIdSet,
        ledgerJournalTrans,
        parmTable,
        documentOrigin,
        invoiceType,
        checkForHold,
        specQty,
        printSalesFormLetter,
        printerSettingsPostingReport
        // <GEERU>
        ,receiptListDeviationType,
        preserveReceiptStatement
        // </GEERU>
        // <GEEPL>
        ,sadNumberCode,
        sadExchRate,
        sadCurrencyCode
        // </GEEPL>
        , printProductLabels
        , printShelfLabels
    #ENDMACRO

    #LOCALMACRO.ParmListPurchV7
        purchTable,
        editLinesChanged,
        chooseLinesPacked,
        creditRemaining,
        wmsJournalTableDsIsSet,
        processAdditional,
        clearTotals,
        parmTableNum,
        intercompanyNoSalesFormletterUpdate,
        interCompanyVoucher,
        newPurchLineRecIdSet,
        deletePurchTablePurchIdSet,
        deletePurchLineRecIdSet,
        ledgerJournalTrans,
        parmTable,
        documentOrigin,
        invoiceType,
        checkForHold,
        specQty,
        printSalesFormLetter,
        printerSettingsPostingReport,
        callerMenuItem
        // <GEERU>
        ,receiptListDeviationType,
        preserveReceiptStatement
        // </GEERU>
        // <GEEPL>
        ,sadNumberCode,
        sadExchRate,
        sadCurrencyCode
        // </GEEPL>
        , printProductLabels
        , printShelfLabels
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCheckForHold</Name>
				<Source><![CDATA[
    public boolean getCheckForHold()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormLetterType</Name>
				<Source><![CDATA[
    public FormletterType getFormLetterType()
    {
        return FormletterType::Purchase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLateSelectionQuery</Name>
				<Source><![CDATA[
    public LateSelectionQuery getLateSelectionQuery()
    {
        PurchParmUpdate purchParmUpdate = this.parmParmUpdate() as PurchParmUpdate;

        return purchParmUpdate.LateSelectionQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderBatchTaskSize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of orders to have in each batch task when posting in batch.
    /// </summary>
    /// <returns>
    /// The number of orders in a batch task.
    /// </returns>
    public FormletterBatchTaskSize getOrderBatchTaskSize()
    {
        return PurchParameters::find().OrderBatchTaskSize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderBatchTaskLineNumberSize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of order lines to have in each batch task when posting in batch.
    /// </summary>
    /// <returns>
    /// The number of order lines to have in each batch task.
    /// </returns>
    internal FormletterBatchTaskSizeLines getOrderBatchTaskLineNumberSize()
    {
        return PurchParameters::find().OrderBatchTaskSizeLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container  pack()
    {
        documentStatus = this.getDocumentStatus();

        return [#CurrentVersion, #ParmListCommon, #ParmListPurch] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckForHold</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public NoYes parmCheckForHold(NoYes _checkForHold = checkForHold)
    {
        checkForHold = _checkForHold;
        return checkForHold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmClearTotals</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public NoYes parmClearTotals(NoYes _clearTotals = clearTotals)
    {
        clearTotals = _clearTotals;
        return clearTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreditRemaining</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public NoYes parmCreditRemaining(NoYes _creditRemaining = creditRemaining)
    {
        creditRemaining = _creditRemaining;
        return creditRemaining;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeletePurchLineRecIdSet</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public str parmDeletePurchLineRecIdSet(str _deletePurchLineRecIdSet = deletePurchLineRecIdSet)
    {
        deletePurchLineRecIdSet = _deletePurchLineRecIdSet;
        return deletePurchLineRecIdSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeletePurchTablePurchIdSet</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public str parmDeletePurchTablePurchIdSet(str _deletePurchTablePurchIdSet = deletePurchTablePurchIdSet)
    {
        deletePurchTablePurchIdSet = _deletePurchTablePurchIdSet;
        return deletePurchTablePurchIdSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentOrigin</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public DocumentOrigin parmDocumentOrigin(DocumentOrigin _documentOrigin = documentOrigin)
    {
        documentOrigin = _documentOrigin;
        return documentOrigin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIntercompanyNoSalesFormletterUpdate</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public NoYes parmIntercompanyNoSalesFormletterUpdate(NoYes _intercompanyNoSalesFormletterUpdate = intercompanyNoSalesFormletterUpdate)
    {
        intercompanyNoSalesFormletterUpdate = _intercompanyNoSalesFormletterUpdate;
        return intercompanyNoSalesFormletterUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIntercompanyVoucher</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public InterCompanyVoucher parmIntercompanyVoucher(InterCompanyVoucher _interCompanyVoucher = interCompanyVoucher)
    {
        interCompanyVoucher = _interCompanyVoucher;
        return interCompanyVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceType</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public PurchInvoiceType parmInvoiceType(PurchInvoiceType _invoiceType = invoiceType)
    {
        invoiceType = _invoiceType;
        return invoiceType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalTrans</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public LedgerJournalTrans parmLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans = ledgerJournalTrans)
    {
        ledgerJournalTrans = _ledgerJournalTrans;
        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLtDocNumberingCode</Name>
				<Source><![CDATA[
    public LtDocNumberingCode parmLtDocNumberingCode(LtDocNumberingCode _ltDocNumberingCode = ltDocNumberingCode)
    {
        ltDocNumberingCode = _ltDocNumberingCode;
        return ltDocNumberingCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewPurchLineRecIdSet</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public str parmNewPurchLineRecIdSet(str _newPurchLineRecIdSet = newPurchLineRecIdSet)
    {
        newPurchLineRecIdSet = _newPurchLineRecIdSet;
        return newPurchLineRecIdSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmTable</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public Common parmParmTable(Common _parmTable = parmTable)
    {
        parmTable = _parmTable;
        return parmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmTableNum</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public Num parmParmTableNum(Num _parmTableNum = parmTableNum)
    {
        parmTableNum = _parmTableNum;
        return parmTableNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPreserveReceiptStatement</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public boolean parmPreserveReceiptStatement(boolean _preserveReceiptStatement = preserveReceiptStatement)
    {
        preserveReceiptStatement = _preserveReceiptStatement;
        return preserveReceiptStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintGRN_IN</Name>
				<Source><![CDATA[
    public boolean parmPrintGRN_IN(boolean _printGoodsReceiptNote = printGoodsReceiptNote)
    {
        printGoodsReceiptNote = _printGoodsReceiptNote;

        return printGoodsReceiptNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintProductLabel</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public NoYes parmPrintProductLabel(NoYes  _printProductLabels = printProductLabels)
    {
        printProductLabels= _printProductLabels;
        return printProductLabels;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintSalesFormLetter</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public NoYes parmPrintSalesFormLetter(NoYes _printSalesFormLetter = printSalesFormLetter)
    {
        printSalesFormLetter = _printSalesFormLetter;
        return printSalesFormLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintShelfLabel</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public NoYes parmPrintShelfLabel(NoYes  _printShelfLabels = printShelfLabels)
    {
        printShelfLabels= _printShelfLabels;
        return printShelfLabels;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProcessAdditional</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public NoYes parmProcessAdditional(NoYes _processAdditional = processAdditional)
    {
        processAdditional = _processAdditional;
        return processAdditional;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchTable</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public PurchTable parmPurchTable(PurchTable _purchTable = purchTable)
    {
        purchTable = _purchTable;
        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReceiptListDeviationType_RU</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public ReceiptListDeviationType_RU parmReceiptListDeviationType_RU(ReceiptListDeviationType_RU _receiptListDeviationType = receiptListDeviationType)
    {
        receiptListDeviationType = _receiptListDeviationType;
        return receiptListDeviationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSADCurrencyCode_PL</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public CurrencyCode parmSADCurrencyCode_PL(CurrencyCode _sadCurrencyCode = sadCurrencyCode)
    {
        sadCurrencyCode = _sadCurrencyCode;
        return sadCurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSADExchRate_PL</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public ExchRate parmSADExchRate_PL(ExchRate _sadExchRate = sadExchRate)
    {
        sadExchRate = _sadExchRate;
        return sadExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSADNumberCode_PL</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public PlSADNumberCode parmSADNumberCode_PL(PlSADNumberCode _sadNumberCode = sadNumberCode)
    {
        sadNumberCode = _sadNumberCode;
        return sadNumberCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpecQty</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public PurchUpdate parmSpecQty(PurchUpdate _specQty = specQty)
    {
        specQty = _specQty;
        return specQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWmsJournalTableDsIsSet</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public NoYes parmWmsJournalTableDsIsSet(NoYes _wmsJournalTableDsIsSet = wmsJournalTableDsIsSet)
    {
        wmsJournalTableDsIsSet = _wmsJournalTableDsIsSet;
        return wmsJournalTableDsIsSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean  unpack(container  _packedClass)
    {
        Integer         version = RunBase::getVersion(_packedClass);
        container       packedBase;

        switch (version)
        {
            case #CurrentVersion:
                [version, #ParmListCommon, #ParmListPurch, packedBase] = _packedClass;
                return super(packedBase);

            case #Version7:
                [version, #ParmListCommon, #ParmListPurchV7, packedBase] = _packedClass;
                return super(packedBase);

            default:
                return super(_packedClass);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPackedVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>PurchFormLetterContract</c> object from the given container.
    /// </summary>
    /// <param name="_purchFormLetterContractPacked">
    /// A container that contains a packed <c>PurchFormLetterContract</c> object.
    /// </param>
    /// <returns>
    /// An instance of the <c>PurchFormLetterContract</c> class.
    /// </returns>
    public static PurchFormLetterContract newFromPackedVersion(container _purchFormLetterContractPacked)
    {
        PurchFormLetterContract purchFormLetterContract;
        DocumentStatus          documentStatus = conPeek(_purchFormLetterContractPacked, #DocumentStatusPosition);

        switch (documentStatus)
        {
            case  DocumentStatus::PurchaseOrder:
                purchFormLetterContract = PurchFormLetterPurchOrderContract::construct();
                break;
            case  DocumentStatus::ConfirmationRequest:
                purchFormLetterContract = PurchFormLetterConfirmRequestContract::construct();
                break;
            case  DocumentStatus::ReceiptsList:
                purchFormLetterContract = PurchFormLetterReceiptsListContract::construct();
                break;
            case  DocumentStatus::PackingSlip:
                purchFormLetterContract = PurchFormLetterPackingSlipContract::construct();
                break;
            case  DocumentStatus::Invoice:
                purchFormLetterContract = PurchFormLetterInvoiceContract::construct();
                break;
            case  DocumentStatus::ApproveJournal:
                purchFormLetterContract = PurchFormLetterApprovalContract::construct();
                break;
            // <GEERU>
            case DocumentStatus::Invoice4Paym_RU:
                purchFormLetterContract = PurchFormLetterInvoice4PaymContract_RU::construct();
                break;
            case DocumentStatus::Facture_RU:
                purchFormLetterContract = PurchFormLetterFactureContract_RU::construct();
                break;
            // </GEERU>
            // <GIN>
            case  DocumentStatus::BillOfEntry_IN:
                if (TaxParameters::isCustomsEnable_IN())
                {
                    purchFormLetterContract = PurchFormLetterBOEContract_IN::construct();
                }
                break;
            // </GIN>
            // <GEEPL>
            case  DocumentStatus::PlSAD :
                purchFormLetterContract = PurchFormLetterSADContract::construct();
                break;
            // </GEEPL>
            default:
                DocumentStatusFactoryAttribute attribute = new DocumentStatusFactoryAttribute(documentStatus);
                purchFormLetterContract = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(PurchFormLetterContract), attribute) as PurchFormLetterContract;
        }

        if (!purchFormLetterContract)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        purchFormLetterContract.unpack(_purchFormLetterContractPacked);

        return purchFormLetterContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPrinting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether document should be printed after posting.
    /// </summary>
    /// <returns>
    /// True if document should be printed after posting; otherwise, false.
    /// </returns>
    public boolean isPrinting()
    {
        boolean ret;
    
        ret = this.parmPrintShelfLabel() == NoYes::Yes
            || this.parmPrintProductLabel() == NoYes::Yes
            || super();
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>