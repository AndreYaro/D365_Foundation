<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjCopyForecastItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjCopyForecastItem
{
    InventJournalTable      inventJournalTable;
    InventJournalTrans      inventJournalTrans;
    JournalTableData        journalTableData;
    JournalTransData        journalTransData;
    JournalTransMap         journalTrans_Last;

    ForecastSales           forecastSales;

    ProjItemCopyToType      projItemCopyToType;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copy</Name>
				<Source><![CDATA[
    void copy()
    {
        ttsbegin;

        switch (projItemCopyToType)
        {
            case ProjItemCopyToType::Project:
                this.copyToSalesLine(SalesType::ItemReq);
                break;

            case ProjItemCopyToType::SalesOrder:
                this.copyToSalesLine(SalesType::Sales);
                break;

            case ProjItemCopyToType::InventJournal:
                this.copyToItemJournal();
                break;

            default :
                this.copyToType(projItemCopyToType);
                break;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements logic for extensions to <c>ProjRevenueType</c>.
    /// </summary>
    /// <param name = "_projItemCopyToType">The project item copy type.</param>
    [Replaceable]
    public void copyToType(ProjItemCopyToType _projItemCopyToType)
    {
        // This functionality is not implemented
        throw error("@SYS113480");
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToItemJournal</Name>
				<Source><![CDATA[
    private void copyToItemJournal()
    {
        this.inventJournalTableInsert();
        journalTableData    = JournalTableData::newTable(inventJournalTable);

        while select forecastSales
        {
            this.inventJournalTransInsert(forecastSales);
        }

        journalTableData.initTotal();
        journalTableData.journalTable().doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a sales line from the demand forecast.
    /// </summary>
    /// <param name = "_salesType">
    /// A <c>SalesType</c> enumeration value.
    /// </param>
    protected void copyToSalesLine(SalesType _salesType)
    {
        while select forecastSales
        {
            ProjTable projTable = ProjTable::find(forecastSales.ProjId);
            if (_salesType == SalesType::ItemReq)
            {
                if (!ProjStatusType::construct(projTable).validateWriteItemRequirement())
                {
                    throw error("@SYS18447");
                }
            }
            else
            {
                if (!ProjStatusType::construct(projTable).validateWriteSalesLine())
                {
                    throw error("@SYS18447");
                }
            }

            if (!this.canCreateSalesLineForForecast(_salesType, forecastSales))
            {
                continue;
            }

            SalesLine salesLine = this.initializeSalesLine(_salesType, forecastSales, projTable);

            salesLine.createLine(false,    // Validation
                                 false,    // Init from SalesTable
                                 true,     // Init from InventTable
                                 true,     // Calc invent Qty
                                 false,    // Search markup         - copied from salesQuotationline
                                 false,    // Search price          - copied from salesQuotationline
                                 false,    // Check reservation
                                 true);    // Skip creditlimit check

            this.updateSalesLine(salesLine, forecastSales);

            salesLine.update();

            SalesTable salesTable = SalesTable::find(salesLine.SalesId);

            if (salesLine.custaccount != salesTable.custaccount)
            {
                ttsbegin;
                salesTable.custaccount = salesLine.custaccount;
                salesTable.selectForUpdate(true);
                salesTable.update();
                ttscommit;
            }

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateSalesLineForForecast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows for determining if a sales line of <c>SalesType</c> should be created from the demand forcast.
    /// </summary>
    /// <param name = "_salesType">
    /// A <c>SalesType</c> enumeration value.
    /// </param>
    /// <param name = "_forecastSales">
    /// A <c>ForecastSales</c> table buffer.
    /// </param>
    /// <returns>true if sales line should be created, otherwise false.</returns>
    protected boolean canCreateSalesLineForForecast(SalesType _salesType, ForecastSales _forecastSales)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>SalesLine</c> table buffer.
    /// </summary>
    /// <param name = "_salesType">
    /// A <c>SalesType</c> enumeration value.
    /// </param>
    /// <param name = "_forecastSales">
    /// A <c>ForecastSales</c> table buffer.
    /// </param>
    /// <param name = "_projTable">
    /// A <c>ProjTable</c> table buffer.
    /// </param>
    /// <returns>
    /// An initialized <c>SalesLine</c> table buffer.
    /// </returns>
    protected SalesLine initializeSalesLine(SalesType _salesType, ForecastSales _forecastSales, ProjTable _projTable)
    {
        SalesLine salesLine;

        salesLine.SalesType = _salesType;
        salesLine.initValue();

        salesLine.setInventDimId(_forecastSales.InventDimId);

        salesLine.ItemId        = _forecastSales.ItemId;
        salesLine.ItemBOMId     = _forecastSales.ItemBOMId;
        salesLine.SalesQty      = _forecastSales.SalesQty;
        salesLine.SalesUnit     = _forecastSales.SalesUnitId;

        salesLine.ProjId         = _forecastSales.ProjId;
        salesLine.ActivityNumber = _forecastSales.ActivityNumber;
        salesLine.CurrencyCode   = _forecastSales.Currency;

        boolean projItemReqWithMultipleFundingSourcesFeatureEnabled = ProjItemRequirementMultipleFundingSourcesFeatureHelper::isFeatureEnabled();

        if (_forecastSales.ProjFundingSource && projItemReqWithMultipleFundingSourcesFeatureEnabled)
        {
            salesLine.ProjFundingSource = _forecastSales.ProjFundingSource;
        }
        else if (projItemReqWithMultipleFundingSourcesFeatureEnabled)
        {
            salesLine.ProjFundingSource = _projTable.getProjectDefaultInvoiceAccount(false);
        }

        salesLine.initFromProjTable(_projTable, false);

        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the specified <c>SalesLine</c> table buffer.
    /// </summary>
    /// <param name = "_salesLine">
    /// The <c>SalesLine</c> table buffer to update.
    /// </param>
    /// <param name = "_forecastSales">
    /// A <c>ForecastSales</c> table buffer.
    /// </param>
    protected void updateSalesLine(SalesLine _salesLine, ForecastSales _forecastSales)
    {
        _salesLine.DefaultDimension = _salesLine.copyDimension(_forecastSales.DefaultDimension);

        _salesLine.ProjLinePropertyId = _forecastSales.ProjLinePropertyId;
        _salesLine.TaxGroup = _forecastSales.TaxGroupId;
        _salesLine.TaxItemGroup = _forecastSales.TaxItemGroupId;
        _salesLine.ProjCategoryId = _forecastSales.ProjCategoryId;
        _salesLine.CostPrice = _forecastSales.CostPrice;
        _salesLine.SalesPrice = _forecastSales.SalesPrice;
        _salesLine.LinePercent = _forecastSales.DiscPercent;
        _salesLine.LineDisc = _forecastSales.DiscAmount;
        _salesLine.LineAmount = 0;
        _salesLine.LineAmount = _salesLine.calcLineAmount();
        _salesLine.CustAccount = _forecastSales.CustAccountId;

        boolean projItemReqWithMultipleFundingSourcesFeatureEnabled = ProjItemRequirementMultipleFundingSourcesFeatureHelper::isFeatureEnabled();
        
        if (_forecastSales.ProjFundingSource && projItemReqWithMultipleFundingSourcesFeatureEnabled)
        {
            _salesLine.ProjFundingSource = _forecastSales.ProjFundingSource;
        }
        else if (projItemReqWithMultipleFundingSourcesFeatureEnabled)
        {
            ProjTable projTable = ProjTable::find(_forecastSales.ProjId);
            if (projTable)
            {
                _salesLine.ProjFundingSource = projTable.getProjectDefaultInvoiceAccount(false);
            }
        }

        SalesLineType_ItemReq::setSalesLineReceiptDate(_salesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    void initParameters(ForecastSales       _forecastSales,
                        ProjItemCopyToType  _projItemCopyToType = ProjItemCopyToType::Project)
    {
        forecastSales       = _forecastSales;
        projItemCopyToType  = _projItemCopyToType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventJournalTableInsert</Name>
				<Source><![CDATA[
    private void inventJournalTableInsert()
    {
        InventJournalName       inventJournalName;

        inventJournalName = InventJournalName::find(ProjParameters::find().InventJournalNameId);

        ttsbegin;
        inventJournalTable.clear();
        inventJournalTable.initValue();
        inventJournalTable.initFromInventJournalName(inventJournalName);
        inventJournalTable.JournalId            = JournalTableData::newTable(inventJournalTable).nextJournalId();

        inventJournalTable.insert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventJournalTransInsert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts <c>InventJournalTrans</c> record based on data from the supplied <c>ForecastSales</c> record
    /// </summary>
    /// <param name = "_forecastSales">
    /// A <c>ForecastSales</c> table buffer.
    /// </param>
    protected void inventJournalTransInsert(ForecastSales _forecastSales)
    {
        this.initInventJournalTrans(_forecastSales);
        this.insertInventJournalTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>InventJournalTrans</c> record based on data from the supplied <c>ForecastSales</c> record
    /// </summary>
    /// <param name = "_forecastSales">
    /// A <c>ForecastSales</c> table buffer.
    /// </param>
    protected void initInventJournalTrans(ForecastSales _forecastSales)
    {
        InventDim inventDim;

        inventJournalTrans.clear();
        inventJournalTrans.initValue();

        inventJournalTrans.initFromInventJournalTable(inventJournalTable);
        inventJournalTrans.JournalType          = InventJournalType::project;
        inventJournalTrans.ProjId               = _forecastSales.ProjId;
        inventJournalTrans.ItemId               = _forecastSales.ItemId;
        inventJournalTrans.ActivityNumber       = _forecastSales.ActivityNumber;

        inventJournalTrans.inventMovement().journalSetItemId(inventDim);
        inventDim.initFromInventTable(inventJournalTrans.inventMovement().inventTable());

        inventJournalTrans.ProjCategoryId       = _forecastSales.ProjCategoryId;
        inventJournalTrans.DefaultDimension     = inventJournalTrans.copyDimension(_forecastSales.DefaultDimension);
        inventJournalTrans.TransDate            = _forecastSales.StartDate;
        inventJournalTrans.Qty                  = _forecastSales.SalesQty;

        inventJournalTrans.ProjSalesPrice       = _forecastSales.SalesPrice;
        inventJournalTrans.CostPrice            = _forecastSales.CostPrice;
        if (inventJournalTrans.CostPrice)
        {
            inventJournalTrans.CostAmount = inventJournalTrans.calcCostAmount();
        }

        inventJournalTrans.ProjSalesCurrencyId  = _forecastSales.Currency;
        inventJournalTrans.ProjLinePropertyId   = _forecastSales.ProjLinePropertyId;

        inventJournalTrans.setInventDimId(_forecastSales.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInventJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts previously initialized <c>InventJournalTrans</c> record
    /// </summary>
    /// </param>
    protected void insertInventJournalTrans()
    {
        if (inventJournalTrans.validateWrite())
        {
            // Set the Voucher field.
            journalTransData    = journalTableData.journalStatic().newJournalTransData(inventJournalTrans,journalTableData);
            if (journalTableData.journalVoucherNum() && journalTableData.journalTable().VoucherDraw == JournalVoucherDraw::Entering)
            {
                journalTransData.initVoucher(journalTrans_Last.Voucher,false,false);
            }
            inventJournalTrans.Voucher = journalTransData.journalTrans().Voucher;

            InventMovement::setAutoReserving(inventJournalTrans);

            inventJournalTrans.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>