<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesPurchTableToLineUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class SalesPurchTableToLineUpdate
{
    Common                   sourceTable;
    List                     updateFields;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canUpdateLine</Name>
				<Source><![CDATA[
    abstract protected boolean canUpdateLine(Common _sourceLine, boolean _previousErrorsFound = false, AxInternalBase _axTable = null)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAxLineObject</Name>
				<Source><![CDATA[
    abstract protected AxInternalBase getAxLineObject(AxInternalBase _axTable, common _sourceLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAxTableObject</Name>
				<Source><![CDATA[
    abstract protected AxInternalBase getAxTableObject(common _sourceTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initUpdateFields</Name>
				<Source><![CDATA[
    public void initUpdateFields(SalesPurchTableToLineUpdatePrompt _salesPurchTableToLineUpdatePrompt)
    {
        container   packedList = _salesPurchTableToLineUpdatePrompt.packedSalesPurchTableToLineUpdateFields();

        sourceTable = _salesPurchTableToLineUpdatePrompt.parmSourceTable();

        if (packedList)
        {
            updateFields = List::create(packedList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineTableId</Name>
				<Source><![CDATA[
    abstract protected TableId lineTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRunLine</Name>
				<Source><![CDATA[
    abstract protected QueryRun queryRunLine(boolean _update = false)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldAsModified</Name>
				<Source><![CDATA[
    abstract protected void setFieldAsModified(AxInternalBase _axTable, FieldId _fieldId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>rereadSourceLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reread source line to get the latest value in order to avoid updating conflict error.
    /// </summary>
    /// <param name="_sourceLine">
    /// A table buffer represents source line.
    /// </param>
    /// <param name="_sourceTable">
    /// A table buffer represents source table.
    /// </param>
    protected void rereadSourceLine(Common _sourceLine, Common _sourceTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        boolean                     errorFound;
        boolean                     firstSourceLine = true;
        
        ttsbegin;
        
        axInternalBase axTable = this.getAxTableObject(sourceTable);
        
        if (updateFields)
        {
            ListEnumerator updateFieldsEnumerator = updateFields.getEnumerator();
        
            while (updateFieldsEnumerator.moveNext())
            {
                SalesPurchTableToLineField salesPurchTableToLineField = updateFieldsEnumerator.current();
        
                if (salesPurchTableToLineField.parmUpdateLines())
                {
                    this.setFieldAsModified(axTable, salesPurchTableToLineField.parmFieldId());
                }
            }
        }
        
        KittingISalesPurchTableToLineUpdate kittingISalesPurchTableToLineUpdate;
        boolean isKittingEnabled = FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance());
        if (isKittingEnabled)
        {
            kittingISalesPurchTableToLineUpdate = KittingClassDelegateHelper::createISalesPurchTableToLineUpdate(axTable);
        }

        QueryRun queryRun = this.queryRunLine(true);
        
        while (queryRun.next())
        {
            if (queryRun.changed(this.lineTableId()))
            {
                Common sourceLine = queryRun.get(this.lineTableId());
                if (sourceLine)
                {
                    if (!firstSourceLine)
                    {
                        this.rereadSourceLine(sourceLine, sourceTable);
                    }
        
                    firstSourceLine = false;
                    if (isKittingEnabled)
                    {
                        if ((this.lineTableId() == tableNum(PurchLine) || this.lineTableId() == tableNum(SalesQuotationLine))
                        && kittingISalesPurchTableToLineUpdate
                        && kittingISalesPurchTableToLineUpdate.excludePriceFromUpdate(sourceLine))
                        {
                            kittingISalesPurchTableToLineUpdate.manipulateFields(AddRemove::Remove);
                        }
                    }
                    if (this.canUpdateLine(sourceLine, errorFound, axTable))
                    {
                        if (isKittingEnabled && kittingISalesPurchTableToLineUpdate)
                        {
                            kittingISalesPurchTableToLineUpdate.reread(sourceLine);
                        }
                        axInternalBase axLine = this.getAxLineObject(axTable, sourceLine);
        
                        this.updateLine(sourceLine, axLine, sourceTable);
        
                        axLine.save();
                    }
                    else
                    {
                        if (!errorFound)
                        {
                            errorFound = true;
                        }
                    }
                    if (isKittingEnabled && kittingISalesPurchTableToLineUpdate)
                    {
                        kittingISalesPurchTableToLineUpdate.resetPrice(sourceLine);
                        kittingISalesPurchTableToLineUpdate.manipulateFields(AddRemove::Add);
                    }
                }
            }
        }

        if (isKittingEnabled && kittingISalesPurchTableToLineUpdate)
        {
            kittingISalesPurchTableToLineUpdate.updateKitLineFields(this.queryRunLine(), this.lineTableId());
        }
                
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLine</Name>
				<Source><![CDATA[
    protected void updateLine(Common _sourceLine, AxInternalBase _axLine, Common _sourceTable)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>