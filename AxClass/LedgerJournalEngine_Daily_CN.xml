<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalEngine_Daily_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Work similar as its parent class <c>LedgerJournalEngine_Daily</c>, with a little logic overridden,
/// which is tailored for the <c>LedgerJournalVoucher_CN</c> form.
/// </summary>
class LedgerJournalEngine_Daily_CN extends LedgerJournalEngine_Daily
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicate whether the journal lines data source is allowed to edit.
    /// </summary>
    /// <returns>
    /// True, if allow to edit, otherwise false.
    /// </returns>
    /// <remarks>
    /// This method calls the parmJournalBlockedSuccessful method of the <c>LedgerJournalVoucher_CN</c> form, which indicates
    /// whether the journal is blocked by the form successful or not.
    /// </remarks>
    public boolean allowEdit()
    {
        boolean     ret;

        FormRun     formRun;
        Object      formRunObj;

        ret = super();

        //check if the journal header is null
        ret = ret && ledgerJournalTable.JournalNum && ledgerJournalTable.JournalName;

        if (ret && LedgerJournalTrans_ds)
        {
            formRun = LedgerJournalTrans_ds.formRun();
            if (formRun.name() == formstr(LedgerJournalVoucher_CN))
            {
                formRunObj = formRun;
                ret = ret && formRunObj.parmJournalBlockedSuccessful();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearOldDataPerJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Clear all the old voucher related data.
    /// </summary>
    /// <remarks>
    ///  when the new journal header is active, all the old data for the previous journal should be cleared,
    ///  this method should be called in newJournalActive method.
    /// </remarks>
    protected void clearOldDataPerJournal()
    {
        oldTransDate = dateNull();
        oldRevDate = dateNull();
        oldReleaseDate = DatetimeUtil::minValue();
        oldRevEntry = false;
        oldTransTxt = '';
        oldCurrencyCode = '';
        oldVoucherDate = datenull();
        oldAttachment = 0;
        oldVoucher_CN = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override to add the logic to assign the correct value for <c>LedgerJournalTrans_ds</c>,
    /// when initializing from <c>LedgerJournalVoucher_CN</c> form.
    /// </summary>
    /// <param name="_formRun">The form which the class is initiazed for</param>
    public void new(FormRun _formRun)
    {
        Object      formRunObject = _formRun;

        super(_formRun);

        //assign the correct value for LedgerJournalTrans_ds, when initializing from LedgerJournalVoucher_CN form.
        if (_formRun.name() == formstr(LedgerJournalVoucher_CN))
        {
            LedgerJournalTrans_ds = _formrun.Datasource(tablestr(LedgerJournalTrans));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override to add the logic to call the <c>clearOldDataPerJournal</c> method.
    /// </summary>
    /// <param name="_ledgerJournalTable">Datasouce table</param>
    /// <param name="_recalc">whether need to do recalucation.</param>
    public void newJournalActive(LedgerJournalTable _ledgerJournalTable, boolean _recalc = false)
    {
        super(_ledgerJournalTable, _recalc);

        this.clearOldDataPerJournal();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
