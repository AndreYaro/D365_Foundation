<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTurnoverReport_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Class prepares data for <c>InventTurnoverReport_RU</c> inquiry.
/// </summary>
public class InventTurnoverReport_RU extends RunBaseQuery_RU implements IInventSumDateFinancialCalcStrategy_RU, BatchRetryable
{
    Map             reportData;
    Map             itemNamesMap;
    Map             idx2DimFieldIdMap;
    ParmId          parmId;
    boolean         startValuesCalc;
    TransDate       startValuesCalcBaseDate;

    RefRecId        dimensionFocus;

    FromDate        fromDate;
    ToDate          toDate;

    NoYes           showZeroTurnover;
    NoYes           showTotals;
    NoYes           showItemName;
    NoYes           showTransfers;
    NoYes           showPhysical;
    container       dimensions;

    boolean         hideForm;

    protected NoYes preProcess;
    protected RefRecId sessionId;
    protected InventTurnoverReportDescription_RU name;

    private const int InvalidEnumValue = 255;
    private const Version CurrentVersion = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcReportData</Name>
				<Source><![CDATA[
    private Map calcReportData(ParmId _parmId)
    {
        Map     trans = this.calcReportTrans(this.createReportQuery(_parmId));
        
        if (showTotals)
        {
            return this.addTotalsToReportData(trans);
        }
        return trans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTotalsToReportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Complements given data by totals.
    /// </summary>
    /// <param name = "_trans">Transactions data.</param>
    /// <returns>Data with calculated totals.</returns>
    protected Map addTotalsToReportData(Map _trans)
    {
        Map data = this.createTotalDataMap(_trans);

        int idx = idx2DimFieldIdMap.elements();

        while (idx)
        {
            _trans = this.calcReportTotals(_trans, idx2DimFieldIdMap.lookup(idx), data);
            idx--;
        }

        return data;

    }

]]></Source>
			</Method>
			<Method>
				<Name>createTotalDataMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates map for total calculation.
    /// </summary>
    /// <param name = "_trans">Transactions data.</param>
    /// <returns>Map for total calculation.</returns>
    protected Map createTotalDataMap(Map _trans)
    {
        return Map::create(_trans.pack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcReportTotals</Name>
				<Source><![CDATA[
    private Map calcReportTotals(Map _trans, FieldId _dimFieldId, Map _data)
    {
        Map                             totals = new Map(Types::Container, Types::Container);
        MapEnumerator                   e      = _trans.getEnumerator();
        InventSumDateFinancialDim_RU    dim;
        InventSumDateFinancialDim_RU    dimDefault;
        InventSumDateFinancialTrans_RU  transStart, totalsStart;
        InventSumDateFinancialTrans_RU  transEnd, totalsEnd;
        container                       transStartValues, totalsStartValues;
        container                       transEndValues, totalsEndValues;

        dimDefault.clear();
        dimDefault.Storno = InvalidEnumValue;
        dimDefault.InventProfileType = InvalidEnumValue;

        while (e.moveNext())
        {
            dim.unpackKey(e.currentKey());

            [transStartValues, transEndValues] = e.currentValue();
            transStart.unpackValues(transStartValues);
            transEnd.unpackValues(transEndValues);

            dim.(_dimFieldId) = dimDefault.(_dimFieldId);

            container dimKey = dim.key() + TotalTrans::Total;

            if (totals.exists(dimKey))
            {
                [totalsStartValues, totalsEndValues] = totals.lookup(dimKey);
                totalsStart.unpackValues(totalsStartValues);
                totalsEnd.unpackValues(totalsEndValues);
            }
            else
            {
                totalsStart.clear();
                totalsEnd.clear();
            }

            totalsStart.addValues(transStart);
            totalsEnd.addValues(transEnd);

            totals.insert(dimKey, [totalsStart.values(), totalsEnd.values()]);
            _data.insert(dimKey, [totalsStart.values(), totalsEnd.values()]);
        }

        return totals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcReportTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates report lines.
    /// </summary>
    /// <param name = "_query">The query for fetching calculated inventory transaction data.</param>
    /// <returns>Map with report lines.</returns>
    protected Map calcReportTrans(Query _query)
    {
        const int TransEndDatasource = 2;
        QueryRun                            qrun = new QueryRun(_query);
        Map                                 trans    = new Map(Types::Container, Types::Container);
        InventTurnoverReportLineData_RU  reportLineData;

        ttsbegin;

        while (qrun.next())
        {
            InventSumDateFinancialDim_RU   dim        = qrun.get(tableNum(InventSumDateFinancialDim_RU));
            InventSumDateFinancialTrans_RU transEnd   = qrun.get(tableNum(InventSumDateFinancialTrans_RU));
            InventSumDateFinancialTrans_RU transStart = qrun.get(tableNum(InventSumDateFinancialTrans_RU), TransEndDatasource);

            reportLineData.clear();
            reportLineData.calcValues(transStart, transEnd, showTransfers, showPhysical);

            if (! reportLineData.isZeroStart() ||
                ! reportLineData.isZeroEnd()   ||
                ! reportLineData.isZeroTurnover())
            {
                if (showZeroTurnover || ! reportLineData.isZeroTurnover())
                {
                    this.saveCalculatedReportTrans(trans, reportLineData, dim, transStart, transEnd);
                }
            }
        }

        ttscommit;

        return trans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveCalculatedReportTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves calculated report line.
    /// </summary>
    /// <param name = "_trans">Report line map.</param>
    /// <param name = "_reportLineData">Line to save.</param>
    /// <param name = "_dim">Inventory financial dimension combination.</param>
    /// <param name = "_transStart">On-hand inventory on the start of the period.</param>
    /// <param name = "_transEnd">On-hand inventory on the end of the period.</param>
    protected void saveCalculatedReportTrans(
        Map _trans,
        InventTurnoverReportLineData_RU  _reportLineData,
        InventSumDateFinancialDim_RU _dim,
        InventSumDateFinancialTrans_RU _transStart,
        InventSumDateFinancialTrans_RU _transEnd)
    {
        _dim.ItemId = _transEnd.ItemId;
        container dimKey = _dim.key() + TotalTrans::Trans;

        _trans.insert(dimKey, [_transStart.values(), _transEnd.values()]);
  
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTrans</Name>
				<Source><![CDATA[
    private void calcTrans(ParmId _parmId, FromDate _fromDate, TransDate _transDate)
    {
        InventSumDateFinancialCalc_RU::newParameters(_parmId, _fromDate, _transDate, this).runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTransNonchanged</Name>
				<Source><![CDATA[
    private void calcTransNonchanged(TransDate _transDate)
    {
        RecordInsertList                insertList = new RecordInsertList(tableNum(InventSumDateFinancialTrans_RU));
        InventSumDateFinancialTrans_RU  transGeneral;
        InventSumDateFinancialTrans_RU  transCalculated;
        InventTurnoverReportLine_RU     line;

        while select ItemId, FinancialDimId, maxof(TransDate) from transGeneral
            group by ItemId, FinancialDimId
            where transGeneral.ParmId    == ""
               && transGeneral.TransDate <= _transDate
            exists join line
                where line.ItemId   == transGeneral.ItemId
                   && line.ParmId   == parmId
                   && line.StartEnd == StartEnd::None
            notexists join transCalculated
                where transCalculated.ItemId         == transGeneral.ItemId
                   && transCalculated.FinancialDimId == transGeneral.FinancialDimId
                   && transCalculated.ParmId         == parmId
                   && transCalculated.TransDate      == _transDate
        {
            InventSumDateFinancialTrans_RU transNew = InventSumDateFinancialTrans_RU::find(transGeneral.ItemId, transGeneral.FinancialDimId, "", transGeneral.TransDate);
            if (transNew)
            {
                transNew.ParmId    = parmId;
                transNew.TransDate = _transDate;
                insertList.add(transNew);
            }
        }
        insertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventSumDateCalculated</Name>
				<Source><![CDATA[
    private boolean checkInventSumDateCalculated()
    {
        InventClosing   inventClosingFrom = InventClosing::findPrevClosingDate(fromDate, InventTransCurrency_RU::PrimaryCur);
        InventClosing   inventClosingTo = InventClosing::findPrevClosingDate(toDate, InventTransCurrency_RU::PrimaryCur);
        str             dates;

        if (inventClosingFrom && ! inventClosingFrom.InventSumDateFinancialCalcFinished_RU)
        {
            dates = strFmt("%1", inventClosingFrom.TransDate);
        }

        if (inventClosingTo && ! inventClosingTo.InventSumDateFinancialCalcFinished_RU && inventClosingTo.RecId != inventClosingFrom.RecId)
        {
            if (dates)
            {
                dates += ", ";
            }
            dates += strFmt("%1", inventClosingTo.TransDate);
        }

        if (dates)
        {
            return Box::yesNo(strFmt("@GLS114017", dates), DialogButton::No) == DialogButton::Yes;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanup</Name>
				<Source><![CDATA[
    private void cleanup(ParmId _parmId)
    {
        InventTurnoverReportLine_RU::deleteParmId(_parmId);
        InventSumDateFinancialTrans_RU::deleteParmId(_parmId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareIdx2DimFieldIdMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes column id to field id map.
    /// </summary>
    /// <returns>Column id to field id map.</returns>
    public void prepareIdx2DimFieldIdMap()
    {
        idx2DimFieldIdMap = this.createIdx2DimFieldIdMap();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createIdx2DimFieldIdMap</Name>
				<Source><![CDATA[
    private Map createIdx2DimFieldIdMap()
    {
        List            dimList = List::create(dimensions);
        ListEnumerator  e       = dimList.getEnumerator();
        Map             map     = new Map(Types::Integer, Types::Integer);
        int             idx;

        while (e.moveNext())
        {
            idx++;
            map.insert(idx, e.current());
        }
        return map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLinesEnd</Name>
				<Source><![CDATA[
    private void createLinesEnd(ParmId _parmId)
    {
        InventTurnoverReportLine_RU     lineEnd;
        InventTurnoverReportLine_RU     lineStart;
        InventSumDateFinancialTrans_RU  trans;
        StartEnd                        end = StartEnd::End;

        insert_recordset lineEnd (ItemId, FinancialDimId, TransDate, StartEnd, ParmId)
        select ItemId, FinancialDimId, maxof(TransDate), end, _parmId from trans
            group by ItemId, FinancialDimId
            where trans.TransDate <= toDate
               && trans.ParmId    == _parmId
            join lineStart
                where lineStart.ParmId         == _parmId
                   && lineStart.ItemId         == trans.ItemId
                   && lineStart.FinancialDimId == trans.FinancialDimId
                   && lineStart.StartEnd       == StartEnd::Start;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLinesList</Name>
				<Source><![CDATA[
    private void createLinesList(ParmId _parmId)
    {
        QueryRun                      itemQueryRun = new QueryRun(this.getItemsQuery());
        InventTurnoverReportLine_RU   line;

        itemNamesMap = new Map(Types::String, Types::String);

        while (itemQueryRun.next())
        {
            InventTable inventTable = itemQueryRun.get(tableNum(InventTable));

            line.ItemId   = inventTable.ItemId;
            line.StartEnd = StartEnd::None;
            line.ParmId   = _parmId;

            line.insert();
            itemNamesMap.insert(inventTable.ItemId, inventTable.defaultProductName());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLinesStart</Name>
				<Source><![CDATA[
    private void createLinesStart(ParmId _parmId)
    {
        QueryRun                            qRun           = new QueryRun(new Query(this.queryRun().query().pack()));
        QueryBuildDataSource                qbdsTrans      = qRun.query().dataSourceTable(tableNum(InventSumDateFinancialTrans_RU));
        FromDate                            actualFromDate = this.getActualFromDate();
        InventTurnoverReportLine_RU         lineStart;

        findOrCreateRange_W(qbdsTrans, fieldNum(InventSumDateFinancialTrans_RU, TransDate), queryRange(dateNull(), actualFromDate));
        findOrCreateRange_W(qbdsTrans, fieldNum(InventSumDateFinancialTrans_RU, ParmId),    queryValue(_parmId));

        while (qRun.next())
        {
            InventSumDateFinancialTrans_RU trans = qRun.get(tableNum(InventSumDateFinancialTrans_RU));

            lineStart.ItemId         = trans.ItemId;
            lineStart.FinancialDimId = trans.FinancialDimId;
            lineStart.TransDate      = trans.TransDate;
            lineStart.StartEnd       =  StartEnd::Start;
            lineStart.ParmId         = _parmId;
            lineStart.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReportQuery</Name>
				<Source><![CDATA[
    private Query createReportQuery(ParmId _parmId)
    {
        str TransStartDSName = queryDatasourceStr(InventTurnoverReport_RU, TransStart);
        str TransEndDSName = queryDatasourceStr(InventTurnoverReport_RU, TransEnd);
        str LineStartDSName = queryDatasourceStr(InventTurnoverReport_RU, LineStart);
        str LineEndDSName = queryDatasourceStr(InventTurnoverReport_RU, LineEnd);

        Query                   query        = new Query(queryStr(InventTurnoverReport_RU));
        QueryBuildDataSource    qbdsDim      = query.dataSourceTable(tableNum(InventSumDateFinancialDim_RU));
        QueryBuildDataSource    qbdsTransEnd = query.dataSourceName(TransEndDSName);
        List                    dimList      = List::create(dimensions);
        ListEnumerator          e            = dimList.getEnumerator();

        while (e.moveNext())
        {
            if (e.current() == fieldNum(InventSumDateFinancialDim_RU, ItemId))
            {
                this.createReportQueryDim(qbdsTransEnd, fieldNum(InventSumDateFinancialTrans_RU, ItemId));
            }
            else
            {
                this.createReportQueryDim(qbdsDim, e.current());
            }
        }

        query.dataSourceName(LineStartDSName).addRange(fieldNum(InventTurnoverReportLine_RU,    ParmId)).value(queryValue(_parmId));
        query.dataSourceName(LineEndDSName).addRange(fieldNum(InventTurnoverReportLine_RU,    ParmId)).value(queryValue(_parmId));
        query.dataSourceName(TransStartDSName).addRange(fieldNum(InventSumDateFinancialTrans_RU, ParmId)).value(queryValue(_parmId));
        query.dataSourceName(TransEndDSName).addRange(fieldNum(InventSumDateFinancialTrans_RU, ParmId)).value(queryValue(_parmId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReportQueryDim</Name>
				<Source><![CDATA[
    private void createReportQueryDim(QueryBuildDataSource _qbds, FieldId _fieldId)
    {
        _qbds.addGroupByField(_fieldId);
        _qbds.addOrderByField(_fieldId);
        _qbds.addSelectionField(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </summary>
    /// <returns>
    ///     A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///     A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///     in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase   dialog = Dialog::newFormnameRunbase(formStr(InventTurnoverReportDialog_RU),this);

        dialog = this.dialogInternal(dialog);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns active dimension set.
    /// </summary>
    /// <returns>
    ///     Active dimension set.
    /// </returns>
    public Set getActiveDimensions()
    {
        return idx2DimFieldIdMap.valueSet();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActualFromDate</Name>
				<Source><![CDATA[
    private FromDate getActualFromDate()
    {
        return fromDate ? fromDate - 1 : dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets entered values from the dialog form.
    /// </summary>
    /// <returns>
    ///     True if success; overwise, false.
    /// </returns>
    public boolean getFromDialog()
    {
        return super() && this.checkInventSumDateCalculated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemNames</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns item names map.
    /// </summary>
    /// <returns>
    ///     Item names map.
    /// </returns>
    public Map getItemNames()
    {
        return itemNamesMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemsQuery</Name>
				<Source><![CDATA[
    private Query getItemsQuery()
    {
        Query                   itemsQuery       = new Query(this.queryRun().query());
        QueryBuildDataSource    qbdsInventTable  = itemsQuery.dataSourceTable(tableNum(InventTable));
        QueryBuildDataSource    qbdsTrans        = itemsQuery.dataSourceTable(tableNum(InventSumDateFinancialTrans_RU));

        qbdsTrans.enabled(false);
        itemsQuery.clearGroupBy();
        qbdsInventTable.addSelectionField(fieldNum(InventTable, Product));

        return itemsQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns report data map.
    /// </summary>
    /// <returns>
    ///     Report data map.
    /// </returns>
    public Map getReportData()
    {
        return reportData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNewQuery</Name>
				<Source><![CDATA[
    protected Query initNewQuery()
    {
        Query                   qu            = new Query(queryStr(InventTurnoverReportDialog_RU));
        QueryBuildDataSource    qbds          = qu.dataSourceTable(tableNum(InventSumDateFinancialDim_RU));
        Set                     allowedFields = new Set(Types::Integer);
        DictTable               dictTable     = new DictTable(tableNum(InventSumDateFinancialDim_RU));
        int                     idx, arrayIdx;

        for (idx = 1; idx <= qbds.rangeCount(); idx++)
        {
            allowedFields.add(qbds.range(idx).field());
        }

        for (idx = 1; idx <= dictTable.fieldCnt(); idx++)
        {
            FieldId fieldId = dictTable.fieldCnt2Id(idx);
            if (!allowedFields.in(fieldId))
            {
                DictField dictField = new DictField(dictTable.id(), fieldId);

                for (arrayIdx = 1; arrayIdx <= dictField.arraySize(); arrayIdx++)
                {
                    findOrCreateRange_W(qbds, fieldId2Ext(fieldId, arrayIdx)).status(RangeStatus::Hidden);
                }
            }
        }

        return qu;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        List    dimList = new List(Types::Integer);

        super();

        dimList.addEnd(fieldNum(InventSumDateFinancialDim_RU, ItemId));
        dimensions = dimList.pack();

        showTotals       = NoYes::No;
        showTransfers    = NoYes::No;
        showItemName     = NoYes::No;
        showZeroTurnover = NoYes::No;
        showPhysical     = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    public IdentifierName lastValueElementName()
    {
        return formStr(InventTurnoverReportDialog_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        dimensionFocus = InventParameters::find().InventSumDateFinancialDimensionFocus_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onCalcCreateItemsQuery</Name>
				<Source><![CDATA[
    public Query onCalcCreateItemsQuery(Query _query)
    {
        return this.getItemsQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onCalcEnd</Name>
				<Source><![CDATA[
    public void onCalcEnd(InventSumDateFinancialCalc_RU _calc)
    {
        if (startValuesCalc)
        {
            this.calcTransNonchanged(_calc.parmToDate());
            startValuesCalcBaseDate = _calc.getBaseDate();
        }
        else
        {
            if (startValuesCalcBaseDate != _calc.getBaseDate())
            {
                this.calcTransNonchanged(_calc.parmToDate());
            }
        }

        startValuesCalc = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onCalcStart</Name>
				<Source><![CDATA[
    public void onCalcStart(InventSumDateFinancialCalc_RU _calc)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, fromDate, toDate, showZeroTurnover,
            dimensions, showTotals, showItemName, showTransfers, showPhysical] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimensions</Name>
				<Source><![CDATA[
    public container parmDimensions(container _dimensions = dimensions)
    {
        dimensions = _dimensions;

        return dimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHideForm</Name>
				<Source><![CDATA[
    public boolean parmHideForm(boolean _hideForm = hideForm)
    {
        hideForm = _hideForm;

        return hideForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowItemName</Name>
				<Source><![CDATA[
    public NoYes parmShowItemName(NoYes _showItemName = showItemName)
    {
        showItemName = _showItemName;

        return showItemName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPreProcess</Name>
				<Source><![CDATA[
    public NoYes parmPreProcess(NoYes _preProcess = preProcess)
    {
        preProcess = _preProcess;

        return preProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmName</Name>
				<Source><![CDATA[
    public InventTurnoverReportDescription_RU parmName(InventTurnoverReportDescription_RU _name = name)
    {
        name = _name;

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowPhysical</Name>
				<Source><![CDATA[
    public NoYes parmShowPhysical(NoYes _showPhysical = showPhysical)
    {
        showPhysical = _showPhysical;

        return showPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowTotals</Name>
				<Source><![CDATA[
    public NoYes parmShowTotals(NoYes _showTotals = showTotals)
    {
        showTotals = _showTotals;

        return showTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowTransfers</Name>
				<Source><![CDATA[
    public NoYes parmShowTransfers(NoYes _showTransfers = showTransfers)
    {
        showTransfers = _showTransfers;

        return showTransfers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowZeroTurnover</Name>
				<Source><![CDATA[
    public NoYes parmShowZeroTurnover(NoYes _showZeroTurnover = showZeroTurnover)
    {
        showZeroTurnover = _showZeroTurnover;

        return showZeroTurnover;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateParmId</Name>
				<Source><![CDATA[
    internal void generateParmId()
    {
        parmId = NumberSeq::newGetNum(CompanyInfo::numRefParmId()).num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        preProcess = this.isInBatch();

        if (!parmId)
        {
            this.generateParmId();
        }

        idx2DimFieldIdMap = this.createIdx2DimFieldIdMap();

        this.createLinesList(parmId);

        startValuesCalc = true;

        this.calcTrans(parmId, dateNull(), this.getActualFromDate());
        this.calcTrans(parmId, fromDate, toDate);

        this.createLinesStart(parmId);
        this.createLinesEnd(parmId);

        reportData = this.calcReportData(parmId);

        this.cleanup(parmId);

        if (!hideForm)
        {
            InventTurnoverReport_RU::show(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showIndexFields</Name>
				<Source><![CDATA[
    public boolean showIndexFields(TableId id)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version     version     = RunBase::getVersion(packedClass);
        container   base;
        boolean     ret;

        switch (version)
        {
            case CurrentVersion:
                [version, fromDate, toDate, showZeroTurnover, dimensions, showTotals, showItemName, showTransfers, showPhysical, base] = packedClass;
                ret = super(base);
                break;
            default:
                ret = false;
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = super(calledFrom);

        if (! toDate || toDate < fromDate)
        {
            ret = checkFailed("@GLS101164");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventTurnoverReport_RU construct()
    {
        return new InventTurnoverReport_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        InventTurnoverReport_RU   report = InventTurnoverReport_RU::construct();
        
        report.showBatchTab(false);

        if (report.prompt())
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00121, funcName());

            report.runOperation();
            if (_args && classIdGet(_args.caller()) == classNum(FormRun))
            {
                FormRun formRun = _args.caller();
                if (formRun.name() == formStr(InventTurnoverReport_RU))
                {
                    formRun.close();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>show</Name>
				<Source><![CDATA[
    private static void show(InventTurnoverReport_RU _caller)
    {
        Args    args = new Args();

        args.name(formStr(InventTurnoverReport_RU));
        args.caller(_caller);

        FormRun formRun = ClassFactory::formRunClassOnClient(args);

        formRun.init();
        formRun.run();

        formRun.detach();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackReportData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Unpacks report data from <c>InventTurnoverReport_RU</c> class instance to <c>InventTurnoverReport_RU</c> form data source cursors.
    /// </summary>
    /// <param name="_runBaseReport">
    ///     <c>InventTurnoverReport_RU</c> class instance.
    /// </param>
    /// <param name="_reportLine">
    ///     Cursor of the ReportLine <c>InventTurnoverReport_RU</c> form data source.
    /// </param>
    /// <param name="_reportLineData">
    ///     Cusor of the ReportLineData <c>InventTurnoverReport_RU</c> form data source.
    /// </param>
    public static void unpackReportData(InventTurnoverReport_RU              _runBaseReport,
                                        InventSumDateFinancialDim_RU         _reportLine,
                                        TmpInventTurnoverReportLineData_RU   _reportLineData)
    {
        boolean                             showItemName  = _runBaseReport.parmShowItemName();
        boolean                             showTransfers = _runBaseReport.parmShowTransfers();
        boolean                             showPhysical  = _runBaseReport.parmShowPhysical();
        Map                                 data = Map::create(_runBaseReport.getReportData().pack());
        Map                                 itemNames;
        container                           startValues, endValues;
        InventSumDateFinancialTrans_RU      transStart, transEnd;
        MapEnumerator                       e = data.getEnumerator();
        int                                 i;

        if (showItemName)
        {
            itemNames = Map::create(_runBaseReport.getItemNames().pack());
        }

        while (e.moveNext())
        {
            i++;
            _reportLine.clear();
            _reportLine.unpackKey(e.currentKey());
            _reportLine.FinancialDimId = int2str(i);
            _reportLine.doInsert();

            [startValues, endValues] = e.currentValue();
            transStart.unpackValues(startValues);
            transEnd.unpackValues(endValues);

            _reportLineData.clear();
            _reportLineData.TotalTrans = conPeek(e.currentKey(), conLen(e.currentKey()));

            if (showItemName && itemNames.exists(_reportLine.ItemId))
            {
                _reportLineData.ItemName = itemNames.lookup(_reportLine.ItemId);
            }

            _reportLineData.FinancialDimId  = _reportLine.FinancialDimId;

            _reportLineData.calcValues(transStart, transEnd, showTransfers, showPhysical);

            _reportLineData.doInsert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return preProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    public boolean mustGoBatch()
    {
        return preProcess;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>