<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailBusinessProcessStarterController</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// the controller class which interacts with the <c>RetailBusinessProcessStarterDialog</c> dialog 
/// and the underlying <c>RetailBusinessProcessStarterService</c> class
/// </summary>
public class RetailBusinessProcessStarterController extends SysOperationServiceController implements BatchRetryable
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
	public static RetailBusinessProcessStarterController construct()
    {
        return new RetailBusinessProcessStarterController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
		RetailBusinessProcessStarterController controller = RetailBusinessProcessStarterController::construct();
        controller.parmLoadFromSysLastValue(false);
        controller.parmArgs(_args);
        controller.setContract();
        controller.showBatchTab(!controller.inEditMode());
        controller.startOperation();
        controller.updateBatchInfo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
	protected void new()
    {
        super(classStr(RetailBusinessProcessStarterService), methodStr(RetailBusinessProcessStarterService, run), SysOperationExecutionMode::Synchronous);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogInit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>SysOperationDialog</c> class.
    /// </summary>
    /// <returns>An instance of <c>SysOperationDialog</c> class.</returns>
    protected IDialogable dialogInit()
    {
        return SysOperationDialog::newForm(this.parmDialogCaption(), this, new Form(formStr(RetailBusinessProcessStarterDialog)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inEditMode</Name>
				<Source><![CDATA[
    public boolean inEditMode()
    {
        return this.parmArgs().record() is RetailBusinessProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inCreateMode</Name>
				<Source><![CDATA[
    public boolean inCreateMode()
    {
        return this.parmArgs().record() is BusinessProcessTemplateHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setContract</Name>
				<Source><![CDATA[
    protected void setContract()
    {
        RetailBusinessProcessStarterContract contract = this.getDataContractObject();

        if (this.inEditMode())
        {
            // edit mode
            RetailBusinessProcess           retailBusinessProcess;
            RetailBusinessProcessWorker     retailBusinessProcessWorker;
            RetailBusinessProcessChannel    retailBusinessProcessChannel;
            Set                             workersSet, channelsSet;

            workersSet  = new Set(Types::Int64);
            channelsSet = new Set(Types::Int64);

            retailBusinessProcess = this.parmArgs().record();

            while select retailBusinessProcessWorker where retailBusinessProcessWorker.RetailBusinessProcess == retailBusinessProcess.RecId
            {
                workersSet.add(retailBusinessProcessWorker.HCMWorker);
            }

            while select retailBusinessProcessChannel where retailBusinessProcessChannel.RetailBusinessProcess == retailBusinessProcess.RecId
            {
                channelsSet.add(retailBusinessProcessChannel.Channel);
            }

            contract.parmRecId(retailBusinessProcess.RecId);
            contract.parmProcessName(retailBusinessProcess.Name);
            contract.parmTargetDate(retailBusinessProcess.TargetDate);
            contract.parmRecurrentTargetDateOffset(retailBusinessProcess.RecurrenceTargetDateOffset);
            contract.parmBusinessProcessTemplateHeaderRecId(retailBusinessProcess.RetailBusinessProcessTemplateHeader);
            contract.parmSelectedWorkerRecIds(workersSet);
            contract.parmSelectedChannelRecIds(channelsSet);
            contract.parmBatchId(retailBusinessProcess.BatchId);
            contract.parmRecurrence(retailBusinessProcess.Recurrence);
            contract.parmInEdit(NoYes::Yes);
        }
        else if (this.inCreateMode())
        {
            contract.parmBusinessProcessTemplateHeaderRecId(this.parmArgs().record().RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDataContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate field of the related <d>RetailBusinessProcessStarterContract</d> object
    /// </summary>
    /// <param name = "_name">process name</param>
    /// <param name = "_targetDate">process target date</param>
    /// <param name = "_recurrentTargetDateOffset">recurrent target date offset</param>
    /// <param name = "_channelIds">The selected channel ids</param>
    /// <param name = "_workerIds">The selected worker ids</param>
    public void populateDataContract(str _name, NoYes _recurrence, date _targetDate, 
        int _recurrentTargetDateOffset, Set _channelIds, Set _workerIds)
    {
        RetailBusinessProcessStarterContract    contract;
        RetailTmpBusinessProcessStarterStore    selectedStore;
        RetailTmpBusinessProcessStarterWorker   selectedWorker;
        
        contract = this.getDataContractObject();
        contract.parmProcessName(_name);
        contract.parmRecurrence(_recurrence);
        contract.parmTargetDate(_targetDate);
        contract.parmRecurrentTargetDateOffset(_recurrentTargetDateOffset);
        contract.parmSelectedChannelRecIds(_channelIds);
        contract.parmSelectedWorkerRecIds(_workerIds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeProcess</Name>
				<Source><![CDATA[
    public void writeProcess()
    {
        RetailBusinessProcess process;
        SetIterator channelItr;
        SetIterator workerItr;
        Int64 postedRecId;
        Microsoft.Dynamics.Ax.Xpp.ErrorException xppEx;

        RetailBusinessProcessStarterContract contract = this.getDataContractObject();

        try
        {
            ttsbegin;
            
            eventSource.EventWriteProcessCreationStart(contract.parmBusinessProcessTemplateHeaderRecId(), contract.parmRecId());

            if (contract.parmRecId())
            {
                process = RetailBusinessProcess::find(contract.parmRecId(), true);
            }
        
            process.RetailBusinessProcessTemplateHeader = contract.parmBusinessProcessTemplateHeaderRecId();
            process.Name = contract.parmProcessName();
            process.Recurrence = contract.parmRecurrence();
            process.TargetDate = contract.parmTargetDate();
            process.RecurrenceTargetDateOffset = contract.parmRecurrentTargetDateOffset();

            process.write();

            postedRecId = process.RecId;

            // delete all associated channels and workers as they will be re-created
            RetailBusinessProcessChannel    businessProcessChannel;
            RetailBusinessProcessWorker     businessProcessWorker;

            delete_from businessProcessChannel  where businessProcessChannel.RetailBusinessProcess  == postedRecId;
            delete_from businessProcessWorker   where businessProcessWorker.RetailBusinessProcess   == postedRecId;

            channelItr = new SetIterator(contract.parmSelectedChannelRecIds());

            while(channelItr.more())
            {
                RetailBusinessProcessChannel channel;
                channel.RetailBusinessProcess = postedRecId;
                channel.Channel = channelItr.value();
                channel.insert();
                channelItr.next();
            }

            workerItr = new SetIterator(contract.parmSelectedWorkerRecIds());

            while(workerItr.more())
            {
                RetailBusinessProcessWorker worker;
                worker.RetailBusinessProcess = postedRecId;
                worker.HCMWorker = workerItr.value();
                worker.insert();
                workerItr.next();
            }

            eventSource.EventWriteProcessCreationStop(contract.parmBusinessProcessTemplateHeaderRecId(), process.RecId);
            
            ttscommit;

            contract.parmRecId(process.RecId);
        }
        catch (xppEx)
        {
            eventSource.EventWriteBusinessProcessCreationError(contract.parmBusinessProcessTemplateHeaderRecId(), xppEx.ToString());
            throw error(xppEx.Message);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBatchInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Associate the generated the batch job information with the process
    /// </summary>
    public void updateBatchInfo()
    {
        RetailBusinessProcessStarterContract contract = this.getDataContractObject();

        if (this.inCreateMode())
        {
            // create mode
            if (contract.parmRecId())
            {
                RetailBusinessProcess process = RetailBusinessProcess::find(contract.parmRecId(), true);
                process.BatchId = this.batchInfo().parmBatchHeader().parmBatchHeaderId();
        
                ttsbegin;
        
                process.update();
        
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>