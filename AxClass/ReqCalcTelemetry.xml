<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqCalcTelemetry</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper class for MRP telemetry events.
/// </summary>
final internal class ReqCalcTelemetry
{
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>invokeStartedEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes MRP started application event.
    /// </summary>
    /// <param name = "_reqCalc">The object performing the MRP run.</param>
    /// <param name = "_reqPlanId">The ID of the plan used in the run.</param>
    /// <param name = "_processId">The ID of the run's process.</param>
    /// <param name = "_reqPlanData">Cached data for the run.</param>
    /// <param name = "_reqParameters">Parameters used.</param>
    /// <param name = "_logger">Logger.</param>
    internal static void invokeStartedEvent(
        ReqCalc _reqCalc, 
        ReqPlanId _reqPlanId, 
        ReqProcessId _processId, 
        ReqPlanData _reqPlanData, 
        ReqParameters _reqParameters,
        ReqInstrumentationLogger _logger)
    {
        str time2StrLocal(TimeOfDay _time)
        {
            return time2Str(_time, TimeSeparator::Colon, TimeFormat::Hour24);
        }

        str bool2str(boolean _value)
        {
            return ReqCalcTelemetry::convertBool2str(_value);
        }
                
        str count2boolStr(int _count)
        {
            return bool2str(_count > 0);
        }

        str timeFence2Str(boolean _isEnabled, int _timeFence)
        {
            if (!_isEnabled)
            {
                return 'NotEnabled';
            }
            else if (_timeFence == 0)
            {
                return 'None';
            }
            else if (_timeFence <= 30)
            {
                return 'Short (1-30 days)';
            }
            else if (_timeFence <= 180)
            {
                return 'Medium (31-180 days)';
            }

            return 'Long (181 or more days)';
        }

        var hasReqPlanData = _reqPlanData != null;

        ReqPlanSched reqPlanSched = ReqPlanSched::find(_reqPlanId);

        RecId reqPlanRecId = ReqPlan::findReqPlanId(_reqPlanId).RecId;
        RecId dataAreaRecId = CompanyInfo::findDataArea(_reqParameters.DataAreaId).RecId;

        ReqPlanForecast forecastPlan;
        ReqPlanSched dynamicPlan;
        ReqPlanSched staticPlan;
            
        select firstonly forecastPlan where forecastPlan.ReqPlanIdForecast == _reqParameters.CurrentReqPlanIdForecast;
        select firstonly dynamicPlan where dynamicPlan.ReqPlanIdSched == _reqParameters.CurrentReqPlanIdSchedDynamic;
        select firstonly staticPlan where staticPlan.ReqPlanIdSched == _reqParameters.CurrentReqPlanIdSchedStatic;

        Microsoft.Dynamics.Application.Instrumentation.ApplicationEventSource::EventWriteMrpStartedMarkerParameters(
            _reqCalc.GetType().ToString(),
            _processId,
            reqPlanRecId,
            dataAreaRecId,
            enum2int(_reqCalc.parmReqCalcUpdate()),
            _reqCalc.isUpdatingAllItems(),
            _reqCalc.parmInBatch(),
            _reqParameters.BundleSize,
            enum2int(_reqParameters.CurrentDaySchedFrom),
            enum2int(_reqParameters.AutoCopyStaticPlan),
            forecastPlan.RecId,
            dynamicPlan.RecId,
            staticPlan.RecId,
            enum2int(_reqParameters.DefaultMarkUpdate),
             hasReqPlanData ? enum2int(_reqPlanData.dynamicNegativeDays()) : enum2int(_reqParameters.DynamicNegativeDays),
            hasReqPlanData ? enum2int(_reqPlanData.marginCalendarDays()) : enum2int(_reqParameters.MarginCalendarDays),
            enum2int(_reqParameters.ReqPOCollectPerBuyer),
            enum2int(_reqParameters.ReqPOCollectPerPurchAgreement),
            hasReqPlanData ? enum2int(_reqPlanData.searchTradeAgreement()) : enum2int(_reqParameters.ReqSearchTradeAgreement),
            hasReqPlanData ? enum2int(_reqPlanData.searchTradeMethod()) : enum2int(_reqParameters.ReqSearchTradeMethod),
            enum2int(_reqParameters.ReqPOCollectPerVendor),
            hasReqPlanData ? enum2int(_reqPlanData.ReqTimePoDefault()) : enum2int(_reqParameters.ReqTimeFutures),
            hasReqPlanData ? enum2int(_reqPlanData.reqTimePoDefault()) : enum2int(_reqParameters.ReqTimePoDefault),
            enum2int(_reqParameters.UseCache),
            hasReqPlanData ? enum2int(_reqPlanData.useItemFilterPreUpdate()) : enum2int(_reqParameters.ItemFilterPreUpdate),
            hasReqPlanData ? enum2int(_reqPlanData.useItemFilterPreCoverage()) : enum2int(_reqParameters.ItemFilterPreCoverage));

        Microsoft.Dynamics.Application.Instrumentation.ApplicationEventSource::EventWriteMrpStartedMarkerPlanParameters(
            _processId,
            reqPlanRecId,
            dataAreaRecId,
            enum2int(reqPlanSched.ActionUpdReqDatePurch),
            enum2int(reqPlanSched.CovCapLimited),
            enum2int(reqPlanSched.CovPropertyLimited),
            enum2int(reqPlanSched.CovSchedMethod),
            reqPlanSched.CovTimeFenceSchedBack,
            hasReqPlanData ? enum2int(_reqPlanData.futuresSched()) : enum2int(reqPlanSched.FuturesSched),
            hasReqPlanData ? enum2int(_reqPlanData.futuresUpdReqDatePurch()) : enum2int(reqPlanSched.FuturesUpdReqDatePurch),
            hasReqPlanData ? enum2int(_reqPlanData.futuresUpdReqDateTransfer()) : enum2int(reqPlanSched.FuturesUpdReqDateTransfer),
            enum2int(reqPlanSched.IncludePlannedIntercompanyDemand),
            enum2int(reqPlanSched.IncludeRequisitions),
            enum2int(reqPlanSched.OnHandConsumptionStrategyFixed),
            enum2int(reqPlanSched.OnHandConsumptionStrategy),
            reqPlanSched.IssueMargin,
            reqPlanSched.ReceiptMargin,
            reqPlanSched.OrderingMargin,
            enum2int(reqPlanSched.PdsUseShelfLife),
            enum2int(reqPlanSched.PostponeKanbanToFutureDate),
            hasReqPlanData ? enum2int(_reqPlanData.useInventOnHands()) : enum2int(reqPlanSched.UseInventOnHand),
            hasReqPlanData ? enum2int(_reqPlanData.useMovements()) : enum2int(reqPlanSched.UseMovements),
            hasReqPlanData ? enum2int(_reqPlanData.useQuotations()) : enum2int(reqPlanSched.UseQuotations),
            hasReqPlanData ? enum2int(_reqPlanData.useRequestsForQuote()) : enum2int(reqPlanSched.UseRequestsForQuote));

        Microsoft.Dynamics.Application.Instrumentation.ApplicationEventSource::EventWriteMrpStartedMarkerPlanParametersTimeFences(
            _processId,
            reqPlanRecId,
            dataAreaRecId,
            enum2int(reqPlanSched.TimeFenceActionFixed),
            reqPlanSched.TimeFenceAction,
            enum2int(reqPlanSched.TimeFenceAuthorizationFixed),
            reqPlanSched.TimeFenceAuthorization,
            enum2int(reqPlanSched.TimeFenceBackRequisitionFixed),
            reqPlanSched.TimeFenceBackRequisition,
            enum2int(reqPlanSched.BottleneckScheduling),
            reqPlanSched.TimeFenceBottleneckCap,
            enum2int(reqPlanSched.TimeFenceCapacityFixed),
            reqPlanSched.TimeFenceCapacity,
            enum2int(reqPlanSched.TimeFenceCovFixed),
            reqPlanSched.TimeFenceCov,
            enum2int(reqPlanSched.TimeFenceExplosionFixed),
            reqPlanSched.TimeFenceExplosion,
            reqPlanSched.TimeFenceFiniteCap,
            enum2int(reqPlanSched.TimeFenceFuturesFixed),
            reqPlanSched.TimeFenceFutures,
            enum2int(reqPlanSched.TimeFenceLockingFixed),
            reqPlanSched.TimeFenceLocking,
            enum2int(reqPlanSched.TimeFenceMasterPlanFixed),
            reqPlanSched.TimeFenceMasterPlan);

        try 
        {
            SysInstrumentationEventDataJsonSerializer serializer = new SysInstrumentationEventDataJsonSerializer();

            serializer.setValue(ReqCalcInstrumentationActivities::LogType, ReqCalcInstrumentationActivities::LogTypePlanningRunStarted);

            ReqCalcTelemetry::serializeBasicRunParameters(serializer, dataAreaRecId, reqPlanRecId, _processId, _reqCalc);

            serializer.setValue(ReqCalcInstrumentationActivities::ParmPlanningMethod, enum2Symbol(enumNum(ReqCalcUpdate), _reqCalc.parmReqCalcUpdate()));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmHasItemFilter, bool2str(!_reqCalc.isUpdatingAllItems()));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmMaxChildThreads, int2Str(_reqCalc.parmMaxChildThreads()));
 
            serializer.setValue(ReqCalcInstrumentationActivities::ParmPlanType, ReqCalcTelemetry::getPlanType(reqPlanRecId, forecastPlan, dynamicPlan, staticPlan));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmBundleSize, int2Str(_reqParameters.BundleSize));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmScheduleFromDateRule, enum2Symbol(enumNum(ReqCurrentDaySchedFrom), enum2int(_reqParameters.CurrentDaySchedFrom)));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmIsCopyStaticToDynamicPlanEnabled, bool2str(_reqParameters.AutoCopyStaticPlan));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmDefaultMarkingRule, enum2Symbol(enumNum(ReqMarkUpdate), enum2int(_reqParameters.DefaultMarkUpdate)));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmIsDynamicNegativeDaysEnabled, hasReqPlanData ? bool2str(_reqPlanData.dynamicNegativeDays()) : bool2str(_reqParameters.DynamicNegativeDays));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmIsSafetyMarginDefinedInWorkingDays, hasReqPlanData ? bool2str(_reqPlanData.marginCalendarDays()) : bool2str(_reqParameters.MarginCalendarDays));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmIsGroupByBuyerGroupEnabledWhenFirming, bool2str(_reqParameters.ReqPOCollectPerBuyer));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmIsGroupVendorEnabledWhenFirming, bool2str(_reqParameters.ReqPOCollectPerVendor));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmIsGroupByPurchaseAgreementEnabledWhenFirming, bool2str(_reqParameters.ReqPOCollectPerPurchAgreement));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmIsVendorSearchByTradeAgreementEnabled, hasReqPlanData ? bool2str(_reqPlanData.searchTradeAgreement()) : bool2str(_reqParameters.ReqSearchTradeAgreement));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmVendorSearchByTradeAgreementMethod, enum2Symbol(enumNum(ReqSearchTradeMethod), hasReqPlanData ? _reqPlanData.searchTradeMethod() : _reqParameters.ReqSearchTradeMethod));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmStartTimeForCalculatingDelays, hasReqPlanData ? time2StrLocal(_reqPlanData.reqTimeFutures()) : time2StrLocal(_reqParameters.ReqTimeFutures));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmDefaultReceiptTime, hasReqPlanData ? time2StrLocal(_reqPlanData.reqTimePoDefault()) : time2StrLocal(_reqParameters.ReqTimePoDefault));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmCachingStrategy, enum2Symbol(enumNum(ReqUseCache), _reqParameters.UseCache));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmIsPreUpdateFilterEnabled, bool2str(hasReqPlanData ? _reqPlanData.useItemFilterPreUpdate() : _reqParameters.ItemFilterPreUpdate));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmIsPreCoverageFilterEnabled, bool2str(hasReqPlanData ? _reqPlanData.useItemFilterPreCoverage() : _reqParameters.ItemFilterPreCoverage));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmIsPreUpdateFiltersIncludeOnHandFeatureEnabled, bool2str(true));

            serializer.setValue(ReqCalcInstrumentationActivities::ParmMustUsePostponedDateAsRequirementDateForPurchases, bool2str(reqPlanSched.ActionUpdReqDatePurch));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmFiniteCapacityTimeFence, timeFence2Str(reqPlanSched.CovCapLimited, reqPlanSched.TimeFenceFiniteCap));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmIsFinitePropertyEnabled, bool2str(reqPlanSched.CovPropertyLimited));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmSchedulingMethod, enum2Symbol(enumNum(ProdSchedMethod), reqPlanSched.CovSchedMethod));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmBackwardsSchedulingCapacityTimeFence, timeFence2Str(true, reqPlanSched.CovTimeFenceSchedBack));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmBottleneckCapacityTimeFence, timeFence2Str(reqPlanSched.BottleneckScheduling, reqPlanSched.TimeFenceBottleneckCap));
            
            serializer.setValue(ReqCalcInstrumentationActivities::ParmMustUseDelayDateAsRequirementDateForPlannedProductionOrders, bool2str(hasReqPlanData ? _reqPlanData.futuresSched() : reqPlanSched.FuturesSched));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmMustUseDelayDateAsRequirementDateForPlannedTransferOrdersV2, bool2str(hasReqPlanData ? _reqPlanData.futuresUpdReqDateTransfer() : reqPlanSched.FuturesUpdReqDateTransfer));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmMustUseDelayDateAsRequirementDateForPlannedPurchaseOrdersV2, bool2str(hasReqPlanData ? _reqPlanData.futuresUpdReqDatePurch() : reqPlanSched.FuturesUpdReqDatePurch));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmMustUseDelayDateAsRequirementDateForPlannedKanbans, bool2str(hasReqPlanData ? _reqPlanData.futuresUpdReqDateKanban() : reqPlanSched.PostponeKanbanToFutureDate));

            serializer.setValue(ReqCalcInstrumentationActivities::ParmMustIncludeOnHand, bool2str(hasReqPlanData ? _reqPlanData.useInventOnHands() : reqPlanSched.UseInventOnHand));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmMustIncludeInventoryMovements, bool2str(hasReqPlanData ? _reqPlanData.useMovements() : reqPlanSched.UseMovements));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmMustIncludeSalesQuotations, bool2str(hasReqPlanData ? _reqPlanData.useQuotations() : reqPlanSched.UseQuotations));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmMustIncludeRequestsForQuotation, bool2str(hasReqPlanData ? _reqPlanData.useRequestsForQuote() : reqPlanSched.UseRequestsForQuote));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmMustIncludePlannedIntercompanyDemand, bool2str(reqPlanSched.IncludePlannedIntercompanyDemand));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmMustIncludePurchaseRequisitions, bool2str(reqPlanSched.IncludeRequisitions));

            serializer.setValue(ReqCalcInstrumentationActivities::ParmMustOverrideOnHand, bool2str(reqPlanSched.OnHandConsumptionStrategyFixed));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmOnHandConsumptionStrategy, enum2Symbol(enumNum(ReqOnHandConsumptionStrategy), reqPlanSched.OnHandConsumptionStrategy));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmMustUseShelfLife, bool2str(reqPlanSched.PdsUseShelfLife));

            serializer.setValue(ReqCalcInstrumentationActivities::ParmHasIssueMargin, count2boolStr(reqPlanSched.IssueMargin));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmHasReceiptMargin, count2boolStr(reqPlanSched.ReceiptMargin));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmHasOrderingMargin, count2boolStr(reqPlanSched.OrderingMargin));

            serializer.setValue(ReqCalcInstrumentationActivities::ParmActionsTimeFence, timeFence2Str(reqPlanSched.TimeFenceActionFixed, reqPlanSched.TimeFenceAction));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmCoverageTimeFence, timeFence2Str(reqPlanSched.TimeFenceCovFixed, reqPlanSched.TimeFenceCov));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmDelaysTimeFence, timeFence2Str(reqPlanSched.TimeFenceFuturesFixed, reqPlanSched.TimeFenceFutures));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmFirmingTimeFence, timeFence2Str(reqPlanSched.TimeFenceAuthorizationFixed, reqPlanSched.TimeFenceAuthorization));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmApprovedRequisitionsTimeFence, timeFence2Str(reqPlanSched.TimeFenceBackRequisitionFixed, reqPlanSched.TimeFenceBackRequisition));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmCapacityTimeFence, timeFence2Str(reqPlanSched.TimeFenceCapacityFixed, reqPlanSched.TimeFenceCapacity));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmExplosionTimeFence, timeFence2Str(reqPlanSched.TimeFenceExplosionFixed, reqPlanSched.TimeFenceExplosion));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmFreezingTimeFence, timeFence2Str(reqPlanSched.TimeFenceLockingFixed, reqPlanSched.TimeFenceLocking));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmForecastPlanTimeFence, timeFence2Str(reqPlanSched.TimeFenceMasterPlanFixed, reqPlanSched.TimeFenceMasterPlan));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmMaxNegativeDaysTimeFence, timeFence2Str(reqPlanSched.TimeFenceMaxNegativeDaysFixed, reqPlanSched.TimeFenceMaxNegativeDays));

            ReqCalcTelemetry::addAdditionalLogInformationOnInvokeStartedEvent(serializer, _reqParameters);

            _reqCalc.reqInstrumentationLogger().logInformation(serializer.toString());
        }
        catch
        {
            // mrp run should not be affected if something goes wrong when we are trying to log telemetry
            _reqCalc.reqInstrumentationLogger().logError('Failed to log ReqCalc started telemetry');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAdditionalLogInformationOnInvokeStartedEvent</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    protected static void addAdditionalLogInformationOnInvokeStartedEvent(
        SysInstrumentationEventDataJsonSerializer _serializer,
        ReqParameters _reqParameters)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPlanType</Name>
				<Source><![CDATA[
    private static str getPlanType(
        RecId _reqPlanRecId,
        ReqPlanForecast _forecastPlan,
        ReqPlanSched _dynamicPlan,
        ReqPlanSched _staticPlan)
    {
        if (_reqPlanRecId == _dynamicPlan.RecId)
        {
            return 'Dynamic';
        }
        else if (_reqPlanRecId == _staticPlan.RecId)
        {
            return 'Static';
        }
        else if (_reqPlanRecId == _forecastPlan.RecId)
        {
            return 'Forecast';
        }

        return 'n/a';
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeCompletedEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes MRP completed application event.
    /// </summary>
    /// <param name = "_reqPlanId">The ID of the plan used in the run.</param>
    /// <param name = "_processId">The ID of the run's process.</param>
    /// <param name = "_reqPlanData">Cached data for the run.</param>
    /// <param name = "_reqCalc">The object that is performing the MRP run; optional.</param>
    internal static void invokeCompletedEvent(
        ReqPlanId _reqPlanId,
        ReqProcessId _processId,
        ReqPlanData _reqPlanData,
        ReqCalc _reqCalc = null)
    {
        str bool2str(boolean _value)
        {
            return ReqCalcTelemetry::convertBool2str(_value);
        }
        
        str count2boolStr(int _count)
        {
            return bool2str(_count > 0);
        }

        str getProcessingSeconds(int64 _milliseconds)
        {
            return int2Str(real2int(round(_milliseconds / 1000.0, 1)));
        }

        ReqInstrumentationLogger instrumentationLogger = _reqCalc != null ?
                _reqCalc.reqInstrumentationLogger() :
                ReqInstrumentationLogger::createLogger(classStr(ReqCalc));

        try
        {
            RecId reqPlanRecId = ReqPlan::findReqPlanId(_reqPlanId).RecId;
            RecId dataAreaRecId = CompanyInfo::findDataArea(curExt()).RecId;
            
            ReqLog reqLog;

            select firstonly reqLog
                where reqLog.ProcessId == _processId
                    && reqLog.ReqPlanId == _reqPlanId;

            Microsoft.Dynamics.Application.Instrumentation.ApplicationEventSource::EventWriteMrpCompletedMarkerTimes(
                _processId,
                reqPlanRecId,
                dataAreaRecId,
                reqLog.Cancelled,
                reqLog.MaxChildThreads,
                reqLog.UsedChildThreads,
                reqLog.TimeUpdate,
                reqLog.TimeCoverage,
                reqLog.TimeFutures,
                reqLog.TimePeggingOptimization,
                reqLog.TimeAction,
                reqLog.TimeAutoFirm,
                reqLog.TimeCopy,
                reqLog.MillisecondsCoverageInitLevel,
                reqLog.MillisecondsCoverageCoverage,
                reqLog.MillisecondsCoverageCoCoverage,
                reqLog.MillisecondsCoveragePartitionOrders,
                reqLog.MillisecondsCoverageScheduleResources,
                reqLog.MillisecondsCoverageFinalizeLevel,
                reqLog.MillisecondsFuturesInitLevel,
                reqLog.MillisecondsFuturesFuturesIssues,
                reqLog.MillisecondsFuturesPartitionOrders,
                reqLog.MillisecondsFuturesScheduleResources,
                reqLog.MillisecondsAutoFirmingPartitionOrders,
                reqLog.MillisecondsAutoFirmingScheduleResources,
                reqLog.MillisecondsAutoFirmingFinalizeLevel,
                reqLog.MillisecondsAutoFirmingFinishedScheduling,
                reqLog.MillisecondsPlanFinalizationBatchExpiryCalculation,
                reqLog.TimeFinalization);

            Microsoft.Dynamics.Application.Instrumentation.ApplicationEventSource::EventWriteMrpCompletedMarkerNumbers(
                _processId,
                reqPlanRecId,
                dataAreaRecId,
                reqLog.CapacityConflictsCount,
                reqLog.NumOfAutoFirm,
                reqLog.NumOfAutoFirmSingleThreadedRetry,
                reqLog.NumOfBomLine,
                reqLog.NumOfBomPlannedOrder,
                reqLog.NumOfChanges,
                reqLog.NumOfDeadlockRetry,
                reqLog.NumOfInventJournal,
                reqLog.NumOfInventOnhand,
                reqLog.NumOfItemPlannedOrder,
                reqLog.NumOfItems,
                reqLog.NumOfKanban,
                reqLog.NumOfKanbanDecrease,
                reqLog.NumOfKanbanLine,
                reqLog.NumOfLevels,
                reqLog.NumOfPlannedInterCompanyDemand,
                reqLog.NumOfPlannedKanban,
                reqLog.NumOfPlannedKanbanLine,
                reqLog.NumOfProdLine,
                reqLog.NumOfProduction,
                reqLog.NumOfProductionDecrease,
                reqLog.NumOfPurchForecast,
                reqLog.NumOfPurchline,
                reqLog.NumOfPurchLineDecrease,
                reqLog.NumOfSalesForecast,
                reqLog.NumOfSalesline,
                reqLog.NumOfSaleslineFuture,
                reqLog.NumOfSmmQuotationline,
                reqLog.NumOfTransferPlannedOrder,
                ReqLog.NumOfUnhandledErrorRetry,
                reqLog.NumOfUpdConflictRetry,
                reqLog.NumOfPeggingOptimizationAttempts,
                reqLog.NumOfPeggingOptimizationSuccessfulAttempts,
                reqLog.NumOfPeggingOptimizationSwaps);
        
            if (_reqPlanData && _reqPlanData.reqLogCoverage())
            {
                _reqPlanData.reqLogCoverage().invokeTelemetry();
            }

            SysInstrumentationEventDataJsonSerializer serializer = new SysInstrumentationEventDataJsonSerializer();

            serializer.setValue(ReqCalcInstrumentationActivities::LogType, ReqCalcInstrumentationActivities::LogTypePlanningRunFinished);

            ReqCalcTelemetry::serializeBasicRunParameters(serializer, dataAreaRecId, reqPlanRecId, _processId, _reqCalc);

            serializer.setValue(ReqCalcInstrumentationActivities::ParmPlanningMethod, enum2Symbol(enumNum(ReqCalcUpdate), reqLog.ReqCalcUpdate));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmHasItemFilter, bool2str(!reqLog.CompleteUpdate));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmMaxChildThreads, int2Str(reqLog.MaxChildThreads));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmUsedChildThreads, int2Str(reqLog.UsedChildThreads));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmIsCancelled, bool2str(reqLog.Cancelled));
            
            var durationSeconds = max(0, DateTimeUtil::getDifference(reqLog.EndDateTime, reqLog.StartDateTime));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmStartTimeUtc, DateTimeUtil::toStr(reqLog.StartDateTime));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmEndTimeUtc, DateTimeUtil::toStr(reqLog.EndDateTime));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmDurationSeconds, int642Str(durationSeconds));

            serializer.setValue(ReqCalcInstrumentationActivities::ParmUpdateDurationSeconds, int2Str(reqLog.TimeUpdate));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmCoverageDurationSeconds, int2Str(reqLog.TimeCoverage));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmDelaysDurationSeconds, int2Str(reqLog.TimeFutures));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmPeggingOptimizationDurationSeconds, int2Str(reqLog.TimePeggingOptimization));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmActionsDurationSeconds, int2Str(reqLog.TimeAction));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmAutoFirmingDurationSeconds, int2Str(reqLog.TimeAutoFirm));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmCopyPlanDurationSeconds, int2Str(reqLog.TimeCopy));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmFinalizationDurationSeconds, int2Str(reqLog.TimeFinalization));

            serializer.setValue(ReqCalcInstrumentationActivities::ParmCoverageInitLevelProcessingSeconds, getProcessingSeconds(reqLog.MillisecondsCoverageInitLevel));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmCoverageCoverageProcessingSeconds, getProcessingSeconds(reqLog.MillisecondsCoverageCoverage));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmCoverageCoCoverageProcessingSeconds, getProcessingSeconds(reqLog.MillisecondsCoverageCoCoverage));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmCoveragePartitionOrdersProcessingSeconds, getProcessingSeconds(reqLog.MillisecondsCoveragePartitionOrders));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmCoverageScheduleResourcesProcessingSeconds, getProcessingSeconds(reqLog.MillisecondsCoverageScheduleResources));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmCoverageFinalizeLevelProcessingSeconds, getProcessingSeconds(reqLog.MillisecondsCoverageFinalizeLevel));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmFuturesInitLevelProcessingSeconds, getProcessingSeconds(reqLog.MillisecondsFuturesInitLevel));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmFuturesFuturesIssuesProcessingSeconds, getProcessingSeconds(reqLog.MillisecondsFuturesFuturesIssues));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmFuturesPartitionOrdersProcessingSeconds, getProcessingSeconds(reqLog.MillisecondsFuturesPartitionOrders));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmFuturesScheduleResourcesProcessingSeconds, getProcessingSeconds(reqLog.MillisecondsFuturesScheduleResources));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmAutoFirmingPartitionOrdersProcessingSeconds, getProcessingSeconds(reqLog.MillisecondsAutoFirmingPartitionOrders));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmAutoFirmingScheduleResourcesProcessingSeconds, getProcessingSeconds(reqLog.MillisecondsAutoFirmingScheduleResources));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmAutoFirmingFinalizeLevelProcessingSeconds, getProcessingSeconds(reqLog.MillisecondsAutoFirmingFinalizeLevel));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmAutoFirmingFinishedSchedulingProcessingSeconds, getProcessingSeconds(reqLog.MillisecondsAutoFirmingFinishedScheduling));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmPlanFinalizationBatchExpiryCalculationProcessingSeconds, getProcessingSeconds(reqLog.MillisecondsPlanFinalizationBatchExpiryCalculation));

            serializer.setValue(ReqCalcInstrumentationActivities::ParmProductsCount, int2Str(reqLog.NumOfItems));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmBomLevelsCount, int2Str(reqLog.NumOfLevels));

            serializer.setValue(ReqCalcInstrumentationActivities::ParmPlannedReceiptsCount, int2Str(reqLog.numOfPlannedReceipts()));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmPlannedIssuesCount, int2Str(reqLog.numOfPlannedIssues()));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmInputReceiptsCount, int2Str(reqLog.numOfInputReceipts()));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmInputIssuesCount, int2Str(reqLog.numOfInputIssues()));

            serializer.setValue(ReqCalcInstrumentationActivities::ParmHasPlannedPurchaseOrders, count2boolStr(reqLog.NumOfItemPlannedOrder));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmHasPlannedTransferOrders, count2boolStr(reqLog.NumOfTransferPlannedOrder));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmHasPlannedProductionOrders, count2boolStr(reqLog.NumOfBOMPlannedOrder));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmHasPlannedKanbans, count2boolStr(reqLog.NumOfPlannedKanban));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmHasPlannedProductionOrderBomLines, count2boolStr(reqLog.NumOfBOMLine));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmHasPlannedKanbanLines, count2boolStr(reqLog.NumOfPlannedKanbanLine));

            serializer.setValue(ReqCalcInstrumentationActivities::ParmHasPlannedIntercompanyDemands, count2boolStr(reqLog.NumOfPlannedIntercompanyDemand));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmHasOnHands, count2boolStr(reqLog.NumOfInventOnhand));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmHasPurchaseLines, count2boolStr(reqLog.NumOfPurchLine));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmHasProductionOrders, count2boolStr(reqLog.NumOfProduction));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmHasInventoryJournals, count2boolStr(reqLog.NumOfInventJournal));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmHasKanbans, count2boolStr(reqLog.NumOfKanban));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmHasSalesLines, count2boolStr(reqLog.NumOfSalesLine));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmHasDemandForecasts, count2boolStr(reqLog.NumOfSalesForecast));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmHasSupplyForecasts, count2boolStr(reqLog.NumOfPurchForecast));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmHasSalesQuotationLines, count2boolStr(reqLog.NumOfSmmQuotationLine));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmHasProductionOrderBomLines, count2boolStr(reqLog.NumOfProdLine));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmHasKanbanLines, count2boolStr(reqLog.NumOfKanbanLine));

            serializer.setValue(ReqCalcInstrumentationActivities::ParmAutoFirmedOrdersCount, int2Str(reqLog.NumOfAutoFirm));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmAutoFirmedOrdersCountInSingleThreadedRetry, int2Str(reqLog.NumOfAutoFirmSingleThreadedRetry));

            serializer.setValue(ReqCalcInstrumentationActivities::ParmUnhandledErrorRetryCount, int2Str(reqLog.NumOfUnhandledErrorRetry));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmUpdateConflictRetryCount, int2Str(reqLog.NumOfUpdConflictRetry));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmDeadlockRetryCount, int2Str(reqLog.NumOfDeadLockRetry));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmCapacityConflictsCount, int2Str(reqLog.CapacityConflictsCount));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmPeggingOptimizationAttemptsCount, int2Str(reqLog.NumOfPeggingOptimizationAttempts));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmPeggingOptimizationSuccessfulAttemptsCount, int2Str(reqLog.NumOfPeggingOptimizationSuccessfulAttempts));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmPeggingOptimizationSwapsCount, int2Str(reqLog.NumOfPeggingOptimizationSwaps));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmInventSumLogTTSChangesCount, int2Str(reqLog.NumOfChanges));

            instrumentationLogger.logInformation(serializer.toString());
        }
        catch (Exception::TransientSqlConnectionError)
        {
            WrkCtrSchedulerLogger::Instance().writeToLog(WrkCtrSchedulerLogEvent::Error, 'TransientSqlConnectionError');
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                // mrp run should not be affected if something goes wrong when we are trying to log telemetry
                instrumentationLogger.logError('Failed to log ReqCalc completed telemetry - TransientSqlConnectionError');
            }
        }
        catch
        {
            // mrp run should not be affected if something goes wrong when we are trying to log telemetry
            instrumentationLogger.logError('Failed to log ReqCalc completed telemetry');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTasksBundleSegment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts an instrumentation segment for a task bundle.
    /// </summary>
    /// <param name = "_bundle">The bundle to log.</param>
    /// <returns>A Planning context aware instrumentation segment.</returns>
    internal static SysInstrumentationSegment createTasksBundleSegment(ReqCalcTasksBundle _bundle)
    {
        SysInstrumentationAdditionalParameters parameters = SysInstrumentationAdditionalParameters::construct();

        parameters.add(ReqInstrumentationActivities::ReqCalcTaskStatus, enum2Symbol(enumNum(ReqProcessStatus), _bundle.Status));
        parameters.add(ReqInstrumentationActivities::ReqCalcTaskLevel, int2Str(_bundle.Level));
        parameters.add(ReqInstrumentationActivities::ReqCalcTaskLevelState, enum2Symbol(enumNum(ReqLevelState), _bundle.LevelState));

        return ReqInstrumentationSegmentFactory::create(ReqInstrumentationActivities::ReqCalcTasksBundle, _bundle.RecId, parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaskSegment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts an instrumentation segment for a task.
    /// </summary>
    /// <param name = "_task">The task to log.</param>
    /// <returns>A Planning context aware instrumentation segment.</returns>
    internal static SysInstrumentationSegment createTaskSegment(ReqCalcTask _task)
    {
        SysInstrumentationAdditionalParameters parameters = SysInstrumentationAdditionalParameters::construct();

        parameters.add(ReqInstrumentationActivities::ReqCalcTaskStatus, enum2Symbol(enumNum(ReqProcessStatus), _task.Status));
        parameters.add(ReqInstrumentationActivities::ReqCalcTaskLevel, int2Str(_task.Level));
        parameters.add(ReqInstrumentationActivities::ReqCalcTaskLevelState, enum2Symbol(enumNum(ReqLevelState), _task.LevelState));
        
        return ReqInstrumentationSegmentFactory::create(ReqInstrumentationActivities::ReqCalcTask, _task.RecId, parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeTimeoutEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes MRP process timeout event.
    /// </summary>
    /// <param name = "_reqCalc">The object performing the MRP run.</param>
    /// <param name = "_reqPlanId">The ID of the plan used in the run.</param>
    /// <param name = "_logger">Logger.</param>
    internal static void invokeTimeoutEvent(ReqCalc _reqCalc, ReqPlanId _reqPlanId,  ReqInstrumentationLogger _logger)
    {
        str bool2str(boolean value)
        {
            return value ? 'true' : 'false';
        }

        try
        { 
            SysInstrumentationEventDataJsonSerializer serializer = new SysInstrumentationEventDataJsonSerializer();

            serializer.setValue(ReqCalcInstrumentationActivities::LogType, ReqCalcInstrumentationActivities::LogTypePlanningProcessTimeout);
            serializer.setValue(ReqCalcInstrumentationActivities::ParmClassName, _reqCalc.GetType().ToString());
            serializer.setValue(ReqCalcInstrumentationActivities::ParmBatchJobId, _reqCalc.batchInfo() ? _reqCalc.batchInfo().parmBatchHeader() ? int642Str(_reqCalc.batchInfo().parmBatchHeader().parmBatchHeaderId()) : '' : '');
            serializer.setValue(ReqCalcInstrumentationActivities::ParmBatchTaskId, _reqCalc.batchInfo() ? int642Str(_reqCalc.batchInfo().parmBatchId()) : '');
            serializer.setValue(ReqCalcInstrumentationActivities::ParmIsRunningInBatch, bool2str(_reqCalc.parmInBatch()));
            serializer.setValue(ReqCalcInstrumentationActivities::ParmReqPlanRecId, int642str(ReqPlan::findReqPlanId(_reqPlanId).RecId));

            _reqCalc.reqInstrumentationLogger().logInformation(serializer.toString());
        }
        catch
        {
            // mrp run should not be affected if something goes wrong when we are trying to log telemetry
            _reqCalc.reqInstrumentationLogger().logError('Failed to log ReqCalc timeout telemetry');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>serializeBasicRunParameters</Name>
				<Source><![CDATA[
    private static void serializeBasicRunParameters(
        SysInstrumentationEventDataJsonSerializer serializer,
        RecId _dataAreaRecId,
        RecId _reqPlanRecId,
        ReqProcessId _processId,
        ReqCalc _reqCalc)
    {
        var reqCalcClassName = _reqCalc != null ? _reqCalc.GetType().ToString() : 'Unknown';
        serializer.setValue(ReqCalcInstrumentationActivities::ParmClassName, reqCalcClassName);
        serializer.setValue(ReqCalcInstrumentationActivities::ParmCompanyRecId, int642Str(_dataAreaRecId));
        serializer.setValue(ReqCalcInstrumentationActivities::ParmProcessId, _processId);
        serializer.setValue(ReqCalcInstrumentationActivities::ParmReqPlanRecId, int642str(_reqPlanRecId));
            
        var batchTask = BatchHeader::getCurrentBatchTask();
        serializer.setValue(ReqCalcInstrumentationActivities::ParmIsRunningInBatch, ReqCalcTelemetry::convertBool2str(batchTask.RecId != 0));
        serializer.setValue(ReqCalcInstrumentationActivities::ParmBatchJobId, int642Str(batchTask.BatchJobId));
        serializer.setValue(ReqCalcInstrumentationActivities::ParmBatchTaskId, int642Str(batchTask.RecId));
        serializer.setValue(ReqCalcInstrumentationActivities::ParmActualRetryAttemptsCount, int2Str(batchTask.RetryCount));
        serializer.setValue(ReqCalcInstrumentationActivities::ParmMaximumRetryAttemptsCount, int2Str(batchTask.retriesOnFailure));
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertBool2str</Name>
				<Source><![CDATA[
    private static str convertBool2str(boolean _value)
    {
        return _value ? 'true' : 'false';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>