<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DimDerDistRulePayrollEarningStmtCost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>DimDerDistRulePayrollEarStatCost</c> class is the dimension derivation distribution rule
///    extension for the payroll earnings statement.
/// </summary>
[SourceDocumentClassExtensionAttribute(classStr(AccDistRulePayrollEarningStatementCost))]
public class DimDerDistRulePayrollEarningStmtCost extends DimensionDerivationRuleExtension
{
    ProjectDimDerivationDistRule   projectDimDerivationDistRule;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populatedDimAllocList</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Populates the ledger dimension allocation list.
    /// </summary>
    /// <param name="_ledgerDimensionAllocationList">
    ///     The ledger dimension allocation list.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void populatedDimAllocList(LedgerDimensionAllocationList _ledgerDimensionAllocationList)
    {
        LedgerDimensionAllocationList           newAllocationList;
        LedgerDimensionAllocationListEnumerator listEnum;
        LedgerDimensionAllocation               allocation;
        LedgerDimensionAllocation               newAllocation;
        LedgerDimensionAccount                  ledgerDimensionAccount;
        LedgerDimensionDefaultAccount           mainAccount;
        LedgerDimensionAccount                  newLedgerDimension;
        SourceDocumentLineItem                  sourceDocumentLineItem = this.parmDimensionDerivationRule().parmAccountingRule().parmSourceDocumentLineItem();
        PayrollEarningStatementLine             earningStatementLine;
        PayrollEarningCodeDefaultDimension      earningCodeDefaultDimension;
        DimensionDefault                        lineDimensionDefault;

        earningStatementLine = sourceDocumentLineItem.parmSourceDocumentLineImplementation();
        if (earningStatementLine.RecId)
        {
            //
            // Since the default dimension for an earning statement line is the merged value from the
            // earning code's default dimension and the position's default dimension, we need to instead
            // look up only the default dimension from the earning code since we only want the earning code's
            // default dimension to take precedence.
            //
            earningCodeDefaultDimension = PayrollEarningCodeDefaultDimension::findByEarningCodeLegalEntity(earningStatementLine.EarningCode, CompanyInfo::current(earningStatementLine.dataAreaId));
            lineDimensionDefault = earningCodeDefaultDimension.DefaultDimension;
        }

        if (lineDimensionDefault == 0)
        {
            // Skip this logic since the line doesn't have a default dimension set
            return;
        }

        if (ProjectDimDerivationDistRule::canProcessProject(this.parmDimensionDerivationRule()))
        {
            // If project is set, then we don't want to apply this logic
            return;
        }

        newAllocationList = LedgerDimensionAllocationList::construct();
        listEnum = _ledgerDimensionAllocationList.getEnumerator();

        // Loop through each distribution allocation
        while (listEnum.moveNext())
        {
            allocation = listEnum.current();
            ledgerDimensionAccount = allocation.parmLedgerDimension();

            // Get the main account that is set on the allocation
            mainAccount = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(ledgerDimensionAccount);

            //
            // Use the source document line's default dimension values as the primary values
            // and merge with the dimension values set in the allocation
            //
            newLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(mainAccount, lineDimensionDefault);
            newLedgerDimension = LedgerDimensionFacade::serviceLedgerDimensionFromLedgerDims(newLedgerDimension, ledgerDimensionAccount);

            // Create a new allocation item based on the original allocation but with the new ledger dimension
            newAllocation = LedgerDimensionAllocation::newFromParameters(
                newLedgerDimension,
                allocation.parmAllocationFactor(),
                allocation.parmSide(),
                allocation.parmOppositeAccount(),
                allocation.parmReferenceAccountingDistribution(),
                allocation.parmDistributionReferenceRole(),
                allocation.parmParentAccountingDistribution(),
                allocation.parmLedgerPostingType());
            newAllocationList.addEnd(newAllocation);
        }

        this.parmDimensionDerivationRule().parmLedgerDimensionAllocList(newAllocationList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populatingDimAllocList</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Populates the ledger dimension allocation list from project setup.
    /// </summary>
    /// <param name="_ledgerDimensionAllocationList">
    ///     The ledger dimension allocation list.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void populatingDimAllocList(LedgerDimensionAllocationList _ledgerDimensionAllocationList)
    {
        //populate ledger dimension allocation list from project setup
        projectDimDerivationDistRule.populateDimAllocList(_ledgerDimensionAllocationList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Subscribes to the events of the dimension derivation rule.
    /// </summary>
    protected void subscribe()
    {
        if (ProjectDimDerivationDistRule::canProcessProject(dimensionDerivationRule))
        {
            projectDimDerivationDistRule = ProjectDimDerivationDistRule::newFromDimensionDerivationRule(dimensionDerivationRule);
            dimensionDerivationRule.populatingDimAllocListEventHandler += eventhandler(this.populatingDimAllocList);
        }

        dimensionDerivationRule.populatedDimAllocListEventHandler += eventhandler(this.populatedDimAllocList);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>