<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomConsistOfDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    This RDP class populates the data that is required for the <c>BOMConsistOfReport</c> SRS Report.
/// </summary>
/// <remarks>
///    The data is populated in the <c>BOMConsistOfTmp</c> temporary table.
/// </remarks>
[
    SRSReportQueryAttribute(queryStr(BOMConsistOf)),
    SRSReportParameterAttribute(classStr(BOMConsistOfContract))
]
class BomConsistOfDP extends SRSReportDataProviderBase
{
    BOMHierarchyReport          hierarchyReport;
    BOMConsistOfTmp             bomConsistOfTmp;
    BOMBOMVersion               show;
    BOMRouteVersionSelectAll    versionSelect;
    StartDate                   fromDate;
    EndDate                     toDate;
    Level                       maxLevel;
    BOMSearchInterval           searchInterval;
    BOMSearchIntervalBOM        searchIntervalBOM;
    Common                      cursor;
    int                         maxFillBOM;
    int                         maxFillVersion;
    InventTable                 inventTable;
    InventItemGroupItem         inventItemGroupItem;
    BOM                         bom;
    BOMId                       bomId;
    BOMVersion                  bomVersion;
    boolean                     insertFlag, inventDimParmFlag;
    EcoResItemConfigurationName configId;
    BOMConsistOfContract        contract;
    guid                        dataIdentifier;
    ItemOrigCountryRegionId     destCountryRegionId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkShowParameterAndBOMId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the BOMId parameter maps to the show parameter.
    /// </summary>
    /// <param name="_bomId">
    /// The BOMId parameter value.
    /// </param>
    /// <returns>
    /// True if the show parameter maps the BOMId or is version; otherwise false;
    /// </returns>
    private boolean checkShowParameterAndBOMId(BOMId _bomId)
    {
        if (this.parmShow() == BOMBOMVersion::Version
           || (this.parmShow() == BOMBOMVersion::BOM && !BOM::isPmfFormula(_bomId))
           || (this.parmShow() == BOMBOMVersion::PmfFormula && BOM::isPmfFormula(_bomId)))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBOMConsistOfTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects data from the <c>BOMConsistOfTmp</c> table which is populated by the RDP class Business logic.
    /// </summary>
    /// <returns>
    /// The table data in the table buffer.
    /// </returns>
    [SRSReportDataSetAttribute('BOMConsistOfTmp')]
    public BOMConsistOfTmp getBOMConsistOfTmp()
    {
        select  bomConsistOfTmp;
        return  bomConsistOfTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data required for the report in the tmp table <c>bOMConsistOfTmp</c>.
    /// </summary>
    /// <param name="_tableId">
    /// The table Id object.
    /// </param>
    /// <remarks>
    /// Depending on selection of SRS report parameter BOMConsistOfDS_show data for BOM lines or Versions is inserted to the temporary table.
    /// </remarks>
    private void insertTmpTable(TableId _tableId)
    {
        bomConsistOfTmp.clear();
        switch (_tableId)
        {
            case tableNum(BOM):
                if (!this.checkShowParameterAndBOMId(bom.bomId))
                {
                    return;
                }

                bomConsistOfTmp.bomItemId                   = bom.ItemId;
                bomConsistOfTmp.bomPosition                 = bom.Position;
                bomConsistOfTmp.bomOprNum                   = bom.OprNum;
                bomConsistOfTmp.bomQuantity                 = bom.bomQty;
                bomConsistOfTmp.bomUnit                     = bom.UnitId;
                bomConsistOfTmp.bomFormula                  = bom.Formula;
                bomConsistOfTmp.bomType                     = bom.bomType;
                bomConsistOfTmp.bomConfigGroup              = bom.ConfigGroupId;
                bomConsistOfTmp.bomQtySerie                 = bom.bomQtySerie;
                bomConsistOfTmp.bomItemName                 = bom.itemName();
                bomConsistOfTmp.InventDimFieldsMap::initAllDimensionsFrom(bom.inventDim());
                bomConsistOfTmp.ElementId                   = guid2str(dataIdentifier);
                bomConsistOfTmp.ParentElementId             = guid2str(hierarchyReport.parmParentBOMVersionIdentifier());
                
                if (isConfigurationkeyEnabled(configurationKeyNum(COOCertification)))
                {
                    bomConsistOfTmp.COOItemOrigCountryRegionId  = this.getOrigCountryRegionId(bom.ItemId);
                }
                
            break;

            case tableNum(BOMVersion):
                if (!this.checkShowParameterAndBOMId(bomVersion.bomId))
                {
                    return;
                }
                bomConsistOfTmp.bomItemId               = '';
                bomConsistOfTmp.bomItemName             = '';
                bomConsistOfTmp.bomVersionBOMId         = bomVersion.bomId;
                bomConsistOfTmp.bomVersionName          = bomVersion.Name;
                bomConsistOfTmp.bomVersionFromQty       = bomVersion.FromQty;
                bomConsistOfTmp.bomVersionFromDate      = bomVersion.FromDate;
                bomConsistOfTmp.bomVersionToDate        = bomVersion.ToDate;
                bomConsistOfTmp.bomVersionActive        = bomVersion.Active;
                bomConsistOfTmp.bomVersionApproved      = bomVersion.Approved;
                bomConsistOfTmp.bomVersionApprovedBy    = bomVersion.approverPersonnelNumber();
                bomConsistOfTmp.InventDimFieldsMap::initAllDimensionsFrom(bomVersion.inventDim());
                bomConsistOfTmp.ElementId               = guid2str(dataIdentifier);
                bomConsistOfTmp.ParentElementId         = guid2str(hierarchyReport.parmParentBOMIdentifier());
            break;

            default :

                break;
        }

        bomConsistOfTmp.TableNum                        = _tableId;
        bomConsistOfTmp.InventTableItemId               = inventTable.ItemId;
        bomConsistOfTmp.InventTableItemName             = inventTable.defaultProductName();
        bomConsistOfTmp.InventTableItemGroup            = inventItemGroupItem.ItemGroupId;
        bomConsistOfTmp.InventUnit                      = inventTable.inventUnitId();
        bomConsistOfTmp.PurchStandardQty                = inventTable.purchStandardQty();
        bomConsistOfTmp.PurchLowestQty                  = inventTable.purchLowestQty();
        bomConsistOfTmp.InventStandardQty               = inventTable.inventStandardQty();
        bomConsistOfTmp.InventLowestQty                 = inventTable.inventLowestQty();
        bomConsistOfTmp.SalesPcsPrice                   = inventTable.salesPcsPrice();

        if (InventModelGroupItem::findByItemIdLegalEntity(inventTable.ItemId, inventTable.DataAreaId).ModelGroupId)
        {
            bomConsistOfTmp.CostPcsPrice                = inventTable.costPcsPrice();
        }

        bomConsistOfTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrigCountryRegionId</Name>
				<Source><![CDATA[
    private ItemOrigCountryRegionId getOrigCountryRegionId(ItemId _itemId)
    {
        ItemOrigCountryRegionId origCountryRegionId;
           
        if (destCountryRegionId)
        {
            origCountryRegionId = COORule::originCountryRegionId(_itemId, destCountryRegionId);

            if(!origCountryRegionId)
            {              
                origCountryRegionId = InventTable::find(_itemId).OrigCountryRegionId;
            }
        }

        return origCountryRegionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataIdentifier</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or Sets the <c>dataIdentifier</c> Parameter
    /// </summary>
    /// <param name="_dataIdentifier">
    /// The values to Set.
    /// </param>
    /// <returns>
    /// The value of the <c>dataIdentifier</c> parameter
    /// </returns>
    public guid parmDataIdentifier(guid _dataIdentifier = dataIdentifier)
    {
        dataIdentifier = _dataIdentifier;
        return dataIdentifier;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or Sets the <c>FromDate</c> Parameter
    /// </summary>
    /// <param name="_date">
    /// The values to Set.
    /// </param>
    /// <returns>
    /// The value of the <c>FromDate</c> parameter
    /// </returns>
    public date parmFromDate(date _date = fromDate)
    {
        fromDate = _date;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInsertFlag</Name>
				<Source><![CDATA[
    private boolean parmInsertFlag(boolean _insertFlag = insertFlag)
    {
        insertFlag = _insertFlag;
        return insertFlag;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMaxLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or Sets the <c>MaxLevel</c> Parameter
    /// </summary>
    /// <param name="_maxLevel">
    /// The values to Set.
    /// </param>
    /// <returns>
    /// The value of the <c>MaxLevel</c> parameter
    /// </returns>
    public Level parmMaxLevel(Level _maxLevel = maxLevel)
    {
        maxLevel = _maxLevel;

        return maxLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSearchInterval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or Sets the <c>searchInterval</c> Parameter
    /// </summary>
    /// <param name="_searchInterval">
    /// The values to Set.
    /// </param>
    /// <returns>
    /// The value of the <c>searchInterval</c> parameter
    /// </returns>
    public boolean parmSearchInterval(boolean _searchInterval = searchInterval)
    {
        searchInterval = _searchInterval;
        return searchInterval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSearchIntervalBOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or Sets the <c>searchIntervalBOM</c> Parameter
    /// </summary>
    /// <param name="_searchInterval">
    /// The values to Set.
    /// </param>
    /// <returns>
    /// The value of the <c>searchIntervalBOM</c> parameter
    /// </returns>
    public boolean parmSearchIntervalBOM(boolean _searchInterval = searchIntervalBOM)
    {
        searchIntervalBOM = _searchInterval;
        return searchIntervalBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or Sets the <c>show</c> Parameter
    /// </summary>
    /// <returns>
    /// The value of the <c>show</c> parameter
    /// </returns>
    public BOMBOMVersion parmShow()
    {
        return show;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or Sets the <c>ToDate</c> Parameter
    /// </summary>
    /// <param name="_date">
    /// The values to Set.
    /// </param>
    /// <returns>
    /// The value of the <c>ToDate</c> parameter
    /// </returns>
    public date parmToDate(date _date = toDate)
    {
        toDate = _date;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVersionSelect</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or Sets the <c>VersionSelect</c> Parameter
    /// </summary>
    /// <param name="_versionSelect">
    /// The values to Set.
    /// </param>
    /// <returns>
    /// The value of the <c>VersionSelect</c> parameter
    /// </returns>
    public BOMRouteVersionSelectAll parmVersionSelect(BOMRouteVersionSelectAll _versionSelect = versionSelect)
    {
        versionSelect = _versionSelect;
        return versionSelect;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDestinationCountryRegionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or Sets the <c>Destination Country</c> Parameter
    /// </summary>
    /// <param name="_destCountryRegionId">
    /// The values to Set.
    /// </param>
    /// <returns>
    /// The value of the <c>Destination Country</c> parameter
    /// </returns>
    public ItemOrigCountryRegionId parmDestinationCountryRegionId(ItemOrigCountryRegionId _destCountryRegionId = destCountryRegionId)
    {
        destCountryRegionId = _destCountryRegionId;

        return destCountryRegionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the query of the SSRS Report BOMConsistOfReport.BOMConsistOf.Report calls the X++ business logic
    /// to populate data.
    /// </summary>
    public void processReport()
    {
        //Local macros
        #define.MaxFillVersion  (10)
        #define.MaxFillBOM      (20)

        Query                   query = this.parmQuery();
        QueryRun                queryRun;

        InventDim               inventDimCriteria;
        InventDimParm           inventDimCriteriaParm;
        QueryFilter             queryFilter;
        str                     queryValueStr;
        QueryBuildRange         qbrConfigId;
        QueryBuildDataSource    inventDimDataSource;

        contract   = this.parmDataContract() as BOMConsistOfContract;

        show                = contract.parmShow();
        versionSelect       = contract.parmDisplayPrinciple();
        searchIntervalBOM   = contract.parmSearchIntervalWithLinesOnly();
        searchInterval      = contract.parmSearchInterval();
        fromDate            = contract.parmFromDate();
        toDate              = contract.parmToDate();
        maxLevel            = contract.parmMaxLevel();
        destCountryRegionId = contract.parmDestinationCountryRegionId();

        inventDimDataSource = query.dataSourceTable(tableNum(InventDim));
        qbrConfigId = inventDimDataSource.findRange(fieldNum(InventDim, configId));

        if (qbrConfigId)
        {
            configId = qbrConfigId.value();
            if (configId)
            {
                inventDimCriteria.configId = configId;
                inventDimCriteriaParm.ConfigIdFlag = NoYes::Yes;
            }
        }

        Enumerator productDimensions = InventProductDimension::getEnumeratorForEnabledDimensions();
        while (productDimensions.moveNext())
        {
            InventProductDimension productDimension = productDimensions.current();
            if (productDimension is InventProductDimensionConfig)
            {
                //Handled above
                continue; 
            }
            FieldId inventDimFieldId = productDimension.parmInventDimFieldId();
            queryFilter = query.findQueryFilter(inventDimDataSource, fieldId2name(tableNum(InventDim), inventDimFieldId));
            if (queryFilter)
            {
                queryValueStr = queryFilter.value();
                if (queryValueStr)
                {
                    inventDimCriteria.(inventDimFieldId) = queryValueStr;
                    inventDimCriteriaParm.(productDimension.parmInventDimParmFieldId()) = NoYes::Yes;
                }
            }
        }
        
        queryFilter = query.findQueryFilter(inventDimDataSource, fieldId2name(tableNum(InventDim),fieldNum(InventDim, InventSiteId)));
        if (queryFilter)
        {
            queryValueStr = queryFilter.value();
            if (queryValueStr)
            {
                inventDimCriteria.InventSiteId = queryValueStr;
                inventDimCriteriaParm.InventSiteIdFlag = NoYes::Yes;
            }
        }

        queryFilter = query.findQueryFilter(inventDimDataSource, fieldId2name(tableNum(InventDim),fieldNum(InventDim, InventLocationId)));
        if (queryFilter)
        {
            queryValueStr = queryFilter.value();
            if (queryValueStr)
            {
                inventDimCriteria.InventLocationId = queryValueStr;
                inventDimCriteriaParm.InventLocationIdFlag = NoYes::Yes;
            }
        }

        inventDimDataSource.enabled(false);

        queryRun = new QueryRun(query);

        maxFillBOM          = #MaxFillBOM;
        maxFillVersion      = #MaxFillVersion;
        hierarchyReport     = BOMHierarchyReport::newReport(this);
        hierarchyReport.parmInventDimCriteria(inventDimCriteria);
        hierarchyReport.parmInventDimCriteriaParm(inventDimCriteriaParm);

        while (queryRun.next())
        {
            cursor = queryRun.get(tableNum(InventTable));
            inventItemGroupItem = queryRun.get(tableNum(InventItemGroupItem));
            this.sendDataToTmpTable(cursor);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendDataToTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends data to be inserted in the tmp table <c>BOMConsistOfTmp</c>.
    /// </summary>
    /// <param name="_cursor">
    /// The <c>Common</c> record which is supposed to be inserted to the tmp table.
    /// </param>
    /// <remarks>
    /// This method is called from the <see cref="BOMConsistOfDP.processReport Method" />. This function calls the
    /// business logic of the class <c>BOMHierarchyReport</c> which gets the BOM lines or Versions data, and calls
    /// this function again. Hence this function is recursively called.
    /// </remarks>
    private void sendDataToTmpTable(Common _cursor)
    {
        cursor = _cursor;

        switch (cursor.TableId)
        {
            case tableNum(InventTable):

                inventTable = _cursor;
                insertFlag  = true;
                bom         = null;
                bomVersion  = null;

                hierarchyReport.itemConsistOf(inventTable.ItemId, configId, maxLevel, fromDate, toDate, true,'');

                //This flag is set to false if the above method gets the data of BOM lines/Versions and does an insert
                //by calling this same method. In such case the logic should not a insert again as this would lead
                //to duplicate records.
                if (insertFlag)
                {
                    inventTable = _cursor;
                    this.insertTmpTable(tableNum(InventTable));
                }

                break;

            case tableNum(BOMVersion):

                bomVersion = _cursor;
                this.insertTmpTable(tableNum(BOMVersion));

                break;

            case tableNum(BOM):

                bom = _cursor;
                this.insertTmpTable(tableNum(BOM));

                break;

            default:
                error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>