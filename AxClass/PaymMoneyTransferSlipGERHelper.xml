<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PaymMoneyTransferSlipGERHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles construction and method calling for <c>PaymMoneyTransferSlip</c>
/// class is scope of FreeTextInvoice report (GER).
/// </summary>
class PaymMoneyTransferSlipGERHelper
{
    private CustInvoiceJour custInvoiceJour;

    PaymMoneyTransferSlip paymMoneyTransferSlip;
    PaymMoneyTransferSlip_CH paymMoneyTransferSlip_CH;
    PaymMoneyTransferSlip_FI paymMoneyTransferSlip_FI;
    PaymMoneyTransferSlip_BE paymMoneyTransferSlip_BE;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmPaymMoneyTransferSlip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>PaymMoneyTransferSlip</c> object.
    /// </summary>
    /// <param name = "_paymMoneyTransferSlip">
    /// <c>PaymMoneyTransferSlip</c> object.
    /// </param>
    /// <returns>
    /// <c>PaymMoneyTransferSlip</c> object.
    /// </returns>
    public PaymMoneyTransferSlip parmPaymMoneyTransferSlip(PaymMoneyTransferSlip _paymMoneyTransferSlip = paymMoneyTransferSlip)
    {
        paymMoneyTransferSlip = _paymMoneyTransferSlip;
        return paymMoneyTransferSlip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymMoneyTransferSlip_CH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>PaymMoneyTransferSlip_CH</c> object.
    /// </summary>
    /// <param name = "_paymMoneyTransferSlip_CH">
    /// <c>PaymMoneyTransferSlip_CH</c> object.
    /// </param>
    /// <returns>
    /// <c>PaymMoneyTransferSlip_CH</c> object.
    /// </returns>
    public PaymMoneyTransferSlip parmPaymMoneyTransferSlip_CH(PaymMoneyTransferSlip_CH _paymMoneyTransferSlip_CH = paymMoneyTransferSlip_CH)
    {
        paymMoneyTransferSlip_CH = _paymMoneyTransferSlip_CH;
        return paymMoneyTransferSlip_CH;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymMoneyTransferSlip_FI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>PaymMoneyTransferSlip_FI</c> object.
    /// </summary>
    /// <param name = "_paymMoneyTransferSlip_FI">
    /// <c>PaymMoneyTransferSlip_FI</c> object.
    /// </param>
    /// <returns>
    /// <c>PaymMoneyTransferSlip_FI</c> object.
    /// </returns>
    public PaymMoneyTransferSlip parmPaymMoneyTransferSlip_FI(PaymMoneyTransferSlip_FI _paymMoneyTransferSlip_FI = paymMoneyTransferSlip_FI)
    {
        paymMoneyTransferSlip_FI = _paymMoneyTransferSlip_FI;
        return paymMoneyTransferSlip_FI;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymMoneyTransferSlip_BE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>PaymMoneyTransferSlip_BE</c> object.
    /// </summary>
    /// <param name = "_paymMoneyTransferSlip_BE">
    /// <c>PaymMoneyTransferSlip_BE</c> object.
    /// </param>
    /// <returns>
    /// <c>PaymMoneyTransferSlip_BE</c> object.
    /// </returns>
    public PaymMoneyTransferSlip parmPaymMoneyTransferSlip_BE(PaymMoneyTransferSlip_BE _paymMoneyTransferSlip_BE = paymMoneyTransferSlip_BE)
    {
        paymMoneyTransferSlip_BE = _paymMoneyTransferSlip_BE;
        return paymMoneyTransferSlip_BE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates object.
    /// </summary>
    /// <param name = "_custInvoiceJour">
    /// CustInvoiceJour record that contains Giro type.
    /// </param>
    public static PaymMoneyTransferSlipGERHelper construct(CustInvoiceJour _custInvoiceJour)
    {
        PaymMoneyTransferSlipGERHelper paymMoneyTransferSlipGERHelper = new PaymMoneyTransferSlipGERHelper();

        PaymMoneyTransferSlip paymMoneyTransferSlip = PaymMoneyTransferSlip::construct(_custInvoiceJour.GiroType);;
        PaymMoneyTransferSlip_CH paymMoneyTransferSlip_CH;
        PaymMoneyTransferSlip_FI paymMoneyTransferSlip_FI;
        PaymMoneyTransferSlip_BE paymMoneyTransferSlip_BE;

        switch (_custInvoiceJour.GiroType)
        {
            case PaymentStub::None,
                PaymentStub::FIK751,
                PaymentStub::FIK752:
                paymMoneyTransferSlip.init(_custInvoiceJour.GiroType);
                paymMoneyTransferSlipGERHelper.paymMoneyTransferSlip = paymMoneyTransferSlipGERHelper.parmPaymMoneyTransferSlip(paymMoneyTransferSlip);
                break;

            case PaymentStub::BBS:
                paymMoneyTransferSlip.init(_custInvoiceJour.GiroType);
                paymMoneyTransferSlipGERHelper.paymMoneyTransferSlip = paymMoneyTransferSlipGERHelper.parmPaymMoneyTransferSlip(paymMoneyTransferSlip);
                break;

            case PaymentStub::ESR_red_bank,
                PaymentStub::ESR_orange:
                paymMoneyTransferSlip_CH = paymMoneyTransferSlip as PaymMoneyTransferSlip_CH;
                paymMoneyTransferSlip_CH.init(_custInvoiceJour.GiroType);
                paymMoneyTransferSlip_CH.initOCRLine_CH(_custInvoiceJour);
                paymMoneyTransferSlipGERHelper.paymMoneyTransferSlip_CH = paymMoneyTransferSlipGERHelper.parmPaymMoneyTransferSlip_CH(paymMoneyTransferSlip_CH);
                break;
   
            case PaymentStub::Finnish:
                paymMoneyTransferSlip_FI = paymMoneyTransferSlip as PaymMoneyTransferSlip_FI;
                paymMoneyTransferSlip_FI.initOCRLine_FI();
                paymMoneyTransferSlipGERHelper.paymMoneyTransferSlip_FI = paymMoneyTransferSlipGERHelper.parmPaymMoneyTransferSlip_FI(paymMoneyTransferSlip_FI);
                break;
   
            case PaymentStub::BelSMS101,
                PaymentStub::BelSMS102:
                paymMoneyTransferSlip_BE = paymMoneyTransferSlip as PaymMoneyTransferSlip_BE;
                paymMoneyTransferSlipGERHelper.paymMoneyTransferSlip_BE = paymMoneyTransferSlipGERHelper.parmPaymMoneyTransferSlip_BE(paymMoneyTransferSlip_BE);
                break;
        }
  
        paymMoneyTransferSlipGERHelper.custInvoiceJour = _custInvoiceJour;

        return paymMoneyTransferSlipGERHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ocrField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets OcrField from slip.
    /// </summary>
    /// <param name="_invoice_Account">
    /// Invoice account.
    /// </param>
    /// <param name="_invoice_Id">
    /// Invoice id.
    /// </param>
    /// <param name="_invoiceIdMaxLength">
    /// Max string length for invoice id.
    /// </param>
    /// <returns>
    /// OcrField value.
    /// </returns>
    public str ocrField(
        str _invoice_Account,
        str _invoice_Id,
        int _invoiceIdMaxLength)
    {
        if (paymMoneyTransferSlip)
        {
            return paymMoneyTransferSlip.ocrField(_invoice_Account, _invoice_Id, _invoiceIdMaxLength);
        }
        
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountCheckId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets AmountCheckId from slip.
    /// </summary>
    /// <param name="_amount">
    /// Current invoice amount.
    /// </param>
    /// <returns>
    /// AmountCheckId value.
    /// </returns>
    public str amountCheckId(AmountCur _amount)
    {
        if (paymMoneyTransferSlip)
        {
            return paymMoneyTransferSlip.amountCheckId(_amount);
        }
        
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets BankAccountNum from slip.
    /// </summary>
    /// <returns>
    /// BankAccountNum value.
    /// </returns>
    public BankAccount bankAccountNum()
    {
        if (paymMoneyTransferSlip_CH)
        {
            return paymMoneyTransferSlip_CH.bankAccountNum();
        }
        
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankAccountTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>BankAccountTable</c> record from slip.
    /// </summary>
    /// <returns>
    /// BankAccountNum value.
    /// </returns>
    public BankAccountTable bankAccountTable()
    {
        if (paymMoneyTransferSlip_CH)
        {
            return paymMoneyTransferSlip_CH.bankAccountTable();
        }
        
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankClearingCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets BankClearingCode from slip.
    /// </summary>
    /// <returns>
    /// BankClearingCode value.
    /// </returns>
    public BankClearingCode bankClearingCode()
    {
        if (paymMoneyTransferSlip_CH)
        {
            return paymMoneyTransferSlip_CH.bankAccountTable().BankClearingCode;
        }
        
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCodeISO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets CurrencyCodeISO from slip.
    /// </summary>
    /// <returns>
    /// CurrencyCodeISO value.
    /// </returns>
    public str currencyCodeISO()
    {
        if (paymMoneyTransferSlip_CH)
        {
            if (paymMoneyTransferSlip_CH.parmIsEUR())
            {
                return 'EUR';
            }
        
            if (paymMoneyTransferSlip_CH.parmIsCHF())
            {
                return 'CHF';
            }
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>layoutCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets LayoutCode from slip.
    /// </summary>
    /// <returns>
    /// LayoutCode value.
    /// </returns>
    public str layoutCode()
    {
        if (paymMoneyTransferSlip_CH)
        {
            return paymMoneyTransferSlip_CH.layoutCode();
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>ocr_AccountNo1</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Ocr_AccountNo1 from slip.
    /// </summary>
    /// <returns>
    /// Ocr_AccountNo1 value.
    /// </returns>
    public str ocr_AccountNo1()
    {
        if (paymMoneyTransferSlip_CH)
        {
            return paymMoneyTransferSlip_CH.ocr_AccountNo1();
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>ocr_AccountNo2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Ocr_AccountNo2 from slip.
    /// </summary>
    /// <returns>
    /// Ocr_AccountNo1 value.
    /// </returns>
    public str ocr_AccountNo2()
    {
        if (paymMoneyTransferSlip_CH)
        {
            return paymMoneyTransferSlip_CH.ocr_AccountNo2();
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>ocr_paymentRef1</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Ocr_paymentRef1 from slip.
    /// </summary>
    /// <returns>
    /// Ocr_paymentRef1 value.
    /// </returns>
    public str ocr_paymentRef1()
    {
        if (paymMoneyTransferSlip_CH)
        {
            return paymMoneyTransferSlip_CH.ocr_paymentRef1();
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>ocr_paymentRef2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Ocr_paymentRef2 from slip.
    /// </summary>
    /// <returns>
    /// Ocr_paymentRef2 value.
    /// </returns>
    public str ocr_paymentRef2()
    {
        if (paymMoneyTransferSlip_CH)
        {
            return paymMoneyTransferSlip_CH.ocr_paymentRef2();
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>PaymentId2_PaymentId3</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets PaymentId2 concatenated with PaymentId3 from slip.
    /// </summary>
    /// <returns>
    /// PaymentId2_PaymentId3 value.
    /// </returns>
    public str PaymentId2_PaymentId3()
    {
        if (paymMoneyTransferSlip_CH)
        {
            return strFmt('%1 %2', paymMoneyTransferSlip_CH.ocr_PaymentId2(), paymMoneyTransferSlip_CH.ocr_PaymentId3());
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>ocrLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get OcrLine from slip.
    /// </summary>
    /// <returns>
    /// OcrLine value.
    /// </returns>
    public str ocrLine()
    {
        if (paymMoneyTransferSlip_CH)
        {
            return paymMoneyTransferSlip_CH.ocrLine();
        }
  
        if (paymMoneyTransferSlip_FI)
        {
            return paymMoneyTransferSlip_FI.ocrLine(custInvoiceJour.InvoiceId, custInvoiceJour.InvoiceAmount, custInvoiceJour.DueDate);
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountNum1_FI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the account number 1 value for the FI context.
    /// </summary>
    /// <returns>The account number 1 value.</returns>
    protected str accountNum1_FI()
    {
        if (paymMoneyTransferSlip_FI)
        {
            return paymMoneyTransferSlip_FI.ocr_AccountNum1();
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountNum2_FI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the account number 2 value for the FI context.
    /// </summary>
    /// <returns>The account number 2 value.</returns>
    protected str accountNum2_FI()
    {
        if (paymMoneyTransferSlip_FI)
        {
            return paymMoneyTransferSlip_FI.ocr_AccountNum2();
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountNum3_FI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the account number 3 value for the FI context.
    /// </summary>
    /// <returns>The account number 3 value.</returns>
    protected str accountNum3_FI()
    {
        if (paymMoneyTransferSlip_FI)
        {
            return paymMoneyTransferSlip_FI.ocr_AccountNum3();
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountNum4_FI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the account number 4 value for the FI context.
    /// </summary>
    /// <returns>The account number 4 value.</returns>
    protected str accountNum4_FI()
    {
        if (paymMoneyTransferSlip_FI)
        {
            return paymMoneyTransferSlip_FI.ocr_AccountNum4();
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountNum5_FI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the account number 5 value for the FI context.
    /// </summary>
    /// <returns>The account number 5 value.</returns>
    protected str accountNum5_FI()
    {
        if (paymMoneyTransferSlip_FI)
        {
            return paymMoneyTransferSlip_FI.ocr_AccountNum5();
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountNum6_FI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the account number 6 value for the FI context.
    /// </summary>
    /// <returns>The account number 6 value.</returns>
    protected str accountNum6_FI()
    {
        if (paymMoneyTransferSlip_FI)
        {
            return paymMoneyTransferSlip_FI.ocr_AccountNum6();
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>decodePaymId</Name>
				<Source><![CDATA[
	/// <summary>
	/// Decodes payment id.
	/// </summary>
	/// <param name = "_messageType">Message type.</param>
	/// <param name = "_message">Message.</param>
	/// <returns>Decoded payment Id.</returns>	
	public PaymId decodePaymId(PaymentStub _messageType, Notes _message)
    {
		return PaymMoneyTransferSlip_BE.decodePaymId(_messageType, _message);
    }

]]></Source>
			</Method>
			<Method>
				<Name>encodePaymId</Name>
				<Source><![CDATA[
	/// <summary>
	/// Encodes payment id.
	/// </summary>
	/// <param name = "_invoiceId">InvoiceId to encode.</param>
	/// <param name = "_messageType">Message type.</param>
	/// <returns>Encoded payment id.</returns>
	public PaymId encodePaymId(InvoiceId _invoiceId, PaymentStub _messageType = custInvoiceJour.GiroType)
	{
        return PaymMoneyTransferSlip_BE.encodePaymId(_invoiceId, _messageType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPaymId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the payment id for customer invoice journal.
    /// </summary>
    /// <param name = "_custInvoiceJour"><c>CustInvoiceJour</c> record.</param>
    /// <returns>PaymentId.</returns>
    public PaymId initPaymId(CustInvoiceJour _custInvoiceJour = custInvoiceJour)
    {
        return PaymMoneyTransferSlip_BE.initPaymId(_custInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProjInvoicePaymId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the payment ID for a project invoice journal.
    /// </summary>
    /// <param name="_projInvoiceJour">
    ///    A project invoice journal that has an invoice ID to use to calculate the payment ID.
    /// </param>
    /// <returns>
    ///    The payment ID, for a project invoice journal of a corresponding giro.
    /// </returns>
    /// <remarks>
    ///    None.
    /// </remarks>
    public PaymId initProjInvoicePaymId(ProjInvoiceJour _projInvoiceJour)
    {
        return PaymMoneyTransferSlip_BE.initProjInvoicePaymId(_projInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentIdReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the payment ID for given invoice ID.
    /// </summary>
    /// <param name = "_invoiceId">Invoice ID.</param>
    /// <param name = "_messageType">Message type.</param>
    /// <returns>The calculated payment ID.</returns>
    public PaymId paymentIdReport(InvoiceId _invoiceId, PaymentStub _messageType = custInvoiceJour.GiroType)
    {
        return PaymMoneyTransferSlip_BE.paymentIdReport(_invoiceId, _messageType);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>