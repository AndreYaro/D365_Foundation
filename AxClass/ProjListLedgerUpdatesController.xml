<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>ProjListLedgerUpdatesController</Name>
  <SourceCode>
    <Declaration><![CDATA[
/// <summary>
/// The <c>ProjListLedgerUpdatesController</c> is controller class for <c>ProjListLedgerUpdate</c>
/// reports.
/// </summary>
class ProjListLedgerUpdatesController extends SrsReportRunController implements BatchRetryable
{
    int     menuitemNumber;

    #define.ReportName('ProjListLedgerUpdates.Report')
    #ProjReports
    #define.ParameterMenuItemType('MenuItemType')
    #define.RangeCostSalesValue('Cost,Sales')
    #define.RangePayRollValue('ProjPayrollAllocation')
    #define.RangeLedgerOriginValue('!=EliminateEstimate,ReverseElimination')
    #define.RangeConsumptionValue('ProjCost,ProjWIPCostvalue,ProjOffsetAccountItem,ProjStatusAccountItem')
    #define.RangeUpdatesOnAccountValue('ProjOnAccount,ProjAccruedRevenueOnAccount,ProjWIPInvoicedOnAccount')
    #define.RangeUpdatesWip('ProjWIPCostvalue,ProjStatusAccountItem,ProjSalesvalueOffset,ProjWIPProduction,ProjWIPProfit,ProjWIPInvoicedOnAccount,ProjWIPCost,ProjWIPSubscription')
}
]]></Declaration>
    <Methods>
      <Method>
        <Name>getMenuItemNumber</Name>
        <Source><![CDATA[
        private int getMenuItemNumber()
    {
        return menuitemNumber;
    }

]]></Source>
      </Method>
      <Method>
        <Name>prePromptModifyContract</Name>
        <Source><![CDATA[
        protected void prePromptModifyContract()
    {
        menuItemNameOutput  menuName;
        SrsReportRdlDataContract    rdlContract;

        super();

        rdlContract = this.parmReportContract().parmRdlContract();
        menuName = this.parmArgs().menuItemName();

        switch (menuName)
        {
            case menuitemOutputStr(ProjListLedgerUpdatesConsumption):
                this.parmDialogCaption("@SYS74548");
                menuitemNumber = 0;
                break;
            case menuitemOutputStr(ProjListLedgerUpdatesOnAccount):
                this.parmDialogCaption("@SYS336139");
                menuitemNumber = 1;
                break;
            case menuitemOutputStr(ProjListLedgerUpdatesPayroll):
                this.parmDialogCaption("@SYS74550");
                menuitemNumber = 2;
                break;
            case menuitemOutputStr(ProjListLedgerUpdatesWIP):
                this.parmDialogCaption("@SYS57997");
                menuitemNumber = 3;
                break;
        }
        rdlContract.setValue(#ParameterMenuItemType, menuitemNumber);
    }

]]></Source>
      </Method>
      <Method>
        <Name>preRunModifyContract</Name>
        <Source><![CDATA[
    /// <summary>
    /// Override this method to change report contract before you run report.
    /// </summary>
    protected void preRunModifyContract()
    {
        date    fromDate;
        date    toDate;
        Query   reportQuery;
        SrsReportRdlDataContract    rdlContract;

        reportQuery = this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey());
        rdlContract = this.parmReportContract().parmRdlContract();

        fromDate = rdlContract.getValue(#FromDate);
        toDate   = rdlContract.getValue(#ToDate);

        this.setDateRange(reportQuery, fromDate, toDate);
        this.setRanges(reportQuery, this.getMenuItemNumber());
    }

]]></Source>
      </Method>
      <Method>
        <Name>setDateRange</Name>
        <Source><![CDATA[
    /// <summary>
    /// Set ledger transaction date range.
    /// </summary>
    /// <param name="_reportQuery">
    /// The report query to modify.
    /// </param>
    /// <param name="_fromDate">
    /// The transaction start date.
    /// </param>
    /// <param name="_toDate">
    /// The transaction end date.
    /// </param>
    public void setDateRange(Query _reportQuery, date _fromDate, date _toDate)
    {
        //add date range
        SrsReportHelper::addFromAndToDateRangeToQuery
        (
            _reportQuery,
            _fromDate,
            _toDate,
            tableNum(ProjListLedgerUpdates),
            fieldNum(ProjListLedgerUpdates, LedgerTransDate)
        );
    }

]]></Source>
      </Method>
      <Method>
        <Name>setRanges</Name>
        <Source><![CDATA[
    /// <summary>
    /// Checking from which menu item report is called based on this adding the ranges and filtering
    /// records.
    /// </summary>
    /// <param name="_reportQuery">
    /// The report query to modify.
    /// </param>
    /// <param name="_menuitemNumber">
    /// The menu identifier.
    /// </param>
    /// <remarks>
    /// Set ranges on data source based on the values selected in report parameters dialog
    /// </remarks>
    public void setRanges(Query _reportQuery, int _menuitemNumber)
    {
        switch (_menuitemNumber)
        {
            case 0:
                SrsReportHelper::addParameterValueRangeToQuery
                (
                    _reportQuery,
                    tableNum(ProjListLedgerUpdates),
                    fieldNum(ProjListLedgerUpdates, PostingType),
                    #RangeConsumptionValue
                );
                break;
            case 1:
                SrsReportHelper::addParameterValueRangeToQuery
                (
                    _reportQuery,
                    tableNum(ProjListLedgerUpdates),
                    fieldNum(ProjListLedgerUpdates, PostingType),
                    #RangeUpdatesOnAccountValue
                );

                SrsReportHelper::addParameterValueRangeToQuery
                (
                    _reportQuery,
                    tableNum(ProjListLedgerUpdates),
                    fieldNum(ProjListLedgerUpdates, LedgerOrigin),
                    #RangeLedgerOriginValue
                );
                break;
            case 2:
                SrsReportHelper::addParameterValueRangeToQuery
                (
                    _reportQuery,
                    tableNum(ProjListLedgerUpdates),
                    fieldNum(ProjListLedgerUpdates, PostingType),
                    #RangePayRollValue
                );
                break;
            case 3:
                SrsReportHelper::addParameterValueRangeToQuery
                (
                    _reportQuery,
                    tableNum(ProjListLedgerUpdates),
                    fieldNum(ProjListLedgerUpdates, PostingType),
                    #RangeUpdatesWip
                );
                break;
        }

        SrsReportHelper::addParameterValueRangeToQuery
        (
            _reportQuery,
            tableNum(ProjListLedgerUpdates),
            fieldNum(ProjListLedgerUpdates, CostSales),
            #RangeCostSalesValue
        );
    }

]]></Source>
      </Method>
      <Method>
        <Name>main</Name>
        <Source><![CDATA[
        public static void main(Args _args)
    {
        ProjListLedgerUpdatesController controller  = new ProjListLedgerUpdatesController();
        controller.parmReportName(#ReportName);
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
      </Method>
      <Method>
        <Name>isRetryable</Name>
        <Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source>
      </Method>
    </Methods>
  </SourceCode>
</AxClass>