<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSManifestContainer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSManifestContainer</c> class is used to manifest container during container closing.
/// </summary>
class WHSManifestContainer
{
    Weight              newWeight;
    WHSContainerTable	whsContainerTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmNewWeight</Name>
				<Source><![CDATA[
    public Weight parmNewWeight(Weight _newWeight = newWeight)
    {
        newWeight = _newWeight;

        return newWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWHSContainerTable</Name>
				<Source><![CDATA[
        public WHSContainerTable parmWHSContainerTable(WHSContainerTable _whsContainerTable = whsContainerTable)
    {
        whsContainerTable = _whsContainerTable;

        return whsContainerTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remanifestCheck</Name>
				<Source><![CDATA[
	/// <summary>
	/// Creates dialog for remanifesting container.
	/// </summary>
	/// <param name="_weightChanged">
	/// Determines whether the weight of the container has changed after the last manifest.
	/// </param>
	/// <returns>
	/// The remanifest dialog result.
	/// </returns>
    protected DialogButton remanifestCheck(boolean _weightChanged)
    {
        DialogButton remanifest;

        if (_weightChanged)
        {
            info("@WAX2664");
        }
        else
        {
            remanifest = Box::yesNo("@WAX2655", DialogButton::No, "@WAX2656");
        }

        return remanifest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
	/// <summary>
	/// Manifests a container when remanifest is requested, container weight has changed or container is not rated before.
	/// </summary>
	/// <param name="_weightChanged">
	/// Determines whether the weight of the container has changed or not.
	/// </param>
	/// <returns>
	/// True if manifest run successfully.
	/// </returns>
	/// <exception cref="Exception::Error">
	/// Exception is thrown when container does not exist.
	/// </exception>
	/// <exception cref="Exception::Error">
	/// Exception is thrown when new weight of the container is less than zero.
	/// </exception>
	/// <exception cref="Exception::Error">
	/// Exception is thrown when container manifest is failed.
	/// </exception>
    public boolean run(boolean _weightChanged)
    {
        TMSRouteSegmentContainer    containerSegment;
        container                   errorContainer;
        int                         i;
        DialogButton                remanifest;
        boolean                     ret;
        boolean                     updateTable = false;
        boolean                     weightChanged = _weightChanged;

        if (!whsContainerTable.RecId)
        {
            throw error("@WAX3872");
        }

        WHSShipmentTable shipmentTable = WHSShipmentTable::find(whsContainerTable.ShipmentId);

        // Shipment must have a carrier and service assigned for transportation manifesting
        if (shipmentTable.CarrierCode && shipmentTable.CarrierServiceCode)
        {
            if (newWeight <= 0)
            {
                throw error("@WAX3345");
            }

            select firstonly containerSegment
                where containerSegment.Id            == whsContainerTable.ContainerId &&
                      containerSegment.ShipmentId    == whsContainerTable.ShipmentId;

            // Check if weight has changed.
            if (roundUp(whsContainerTable.Weight, 1) != roundUp(newWeight, 1))
            {
                weightChanged = true;
                updateTable   = true;
            }

            // Check if container should be re-manifested.
            if (containerSegment)
            {
                remanifest = this.remanifestCheck(weightChanged);
            }

            // Update Container Table if weight has changed.
            if (updateTable)
            {
                whsContainerTable = WHSManifestContainer::updateWHSContainerTable(whsContainerTable, newWeight);
            }

            // Call container manifest/process function.
            if (remanifest == DialogButton::Yes || weightChanged || !containerSegment)
            {
                errorContainer = TMSContainerProcess::executeOnServer(whsContainerTable.ContainerId);
                ret = true;
            }

            if (conLen(errorContainer) > 0)
            {
                for (i = 1; i <= conLen(errorContainer); i ++)
                {
                    warning(strFmt('%1',conPeek(errorContainer, i)));
                }
                throw error("@WAX3873");
            }

            if (!whsContainerTable.checkContainerShippingLabelReceived())
            {
                throw error(strFmt("@TRX:NoContainerShippingLabelReceived", whsContainerTable.ContainerId));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSManifestContainer construct()
    {
        return new WHSManifestContainer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    public static WHSManifestContainer newStandard(
    Weight                   _newWeight,
    WHSContainerTable        _whsContainerTable)
    {
        WHSManifestContainer whsManifestContainer = WHSManifestContainer::construct();

        whsManifestContainer.parmNewWeight(_newWeight);
        whsManifestContainer.parmWHSContainerTable(_whsContainerTable);

        return whsManifestContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWHSContainerTable</Name>
				<Source><![CDATA[
	/// <summary>
	/// Updates container weight information.
	/// </summary>
	/// <param name="_whsContainerTable">
	/// Container record to be updated.
	/// </param>
	/// <param name="_newWeight">
	/// New weight to be set to container record.
	/// </param>
	/// <returns>
	/// Updates container record.
	/// </returns>
    public static WHSContainerTable updateWHSContainerTable(
		WHSContainerTable	_whsContainerTable,
		Weight              _newWeight)
    {
        ttsbegin;

        var whsContainerTable       = whsContainerTable::find(_whsContainerTable.ShipmentId, _whsContainerTable.ContainerId, true);
        whsContainerTable.Weight    = _newWeight;
        whsContainerTable.WeightUOM = _whsContainerTable.CloseContainerProfileId ? WHSCloseContainerProfile::find(_whsContainerTable.CloseContainerProfileId).WeightUOM : _whsContainerTable.WeightUOM;

        whsContainerTable.validateContainerMaximumNetWeight();

        whsContainerTable.update();

        ttscommit;

        return whsContainerTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>