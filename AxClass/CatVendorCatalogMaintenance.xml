<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatVendorCatalogMaintenance</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CatVendorCatalogMaintenance
{
    private str     vendCategoryName;
    private str     unitOfMeasureRecId;
    private RecId   catVendorCatalogMaintenanceRecId;

    private const str XmlFileExtension = ".xml";

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>changeFileSizetoMB</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the file size, in MB.
    /// </summary>
    /// <param name="_length">
    ///    The file size, in Bytes.
    /// </param>
    /// <returns>
    ///    The file size, in MB.
    /// </returns>
    public CatVendorCatalogCMRFileSize changeFileSizetoMB(CatVendorCatalogCMRFileSize _length)
    {
        //Converting Bytes to MB
        return _length/( 1024 * 1024);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCatalog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets up the vendor catalog for deletion.
    /// </summary>
    /// <param name="_catalogRecId">
    ///    The record ID of <c>CatVendorCatalog</c> table record to be deleted.
    /// </param>
    public void deleteCatalog(RefRecId _catalogRecId)
    {
        CatVendorCatalog                    catVendorCatalog;
        CatVendorCatalogMaintenanceRequest  catVendorCatalogMaintenanceRequest,catVendorCatalogMaintenanceRequestNew;
        CatVendorApprovedProduct            catVendorApprovedProduct;
        CatVendorProductCandidate           catVendorProductCandidate,catVendorProductCandidateAll;

        int counter = 1;
        ttsbegin;

        select forupdate catVendorCatalog
            where catVendorCatalog.RecId == _catalogRecId;

        catVendorCatalog.IsDeleted = NoYes::Yes;
        catVendorCatalog.update();

        while select recId from catVendorCatalogMaintenanceRequest
                    where catVendorCatalogMaintenanceRequest.VendorCatalog == _catalogRecId
                join VendorProductCode from catVendorProductCandidateAll
                    where catVendorProductCandidateAll.CatalogMaintenanceRequest == catVendorCatalogMaintenanceRequest.RecId
                            && catVendorProductCandidateAll.Status == CatVendorProductStatus::Approved
                join VendorProductCode from catVendorApprovedProduct
                    group by catVendorApprovedProduct.VendorProductCode,catVendorApprovedProduct.EcoResCategory,catVendorApprovedProduct.EcoResProduct, catVendorApprovedProduct.ProductSubtype
                    where catVendorApprovedProduct.DirPartyTable == catVendorCatalog.VendorParty
                            && catVendorApprovedProduct.VendorProductCode == catVendorProductCandidateAll.VendorProductCode
                            && catVendorApprovedProduct.IsDeleted == NoYes::No
        {
            if (counter == 1)
            {
                // Creating Catalog Maintenance request only first time.
                catVendorCatalogMaintenanceRequestNew = CatVendorCatalogMaintenanceRequest::createCatalog( catVendorCatalog.Name,catVendorCatalog.VendorParty,
                                                                                                        "@SYS311162","@SYS311163",
                                                                                                        0,DateTimeUtil::date(DateTimeUtil::minValue()),
                                                                                                        DateTimeUtil::date(DateTimeUtil::minValue()),
                                                                                                        false,CatVendorCatalogFileUploadType::Update);
                // logging  Event.
                CatVendorCatalogImportEventLog::logEvent(catVendorCatalogMaintenanceRequestNew.RecId,
                                                         CatImportProcessingMessageType::Info,
                                                         CatVendorCatalogProcessingState::StartProcessing,
                                                         "@SYS134206");
            }

            catVendorProductCandidate = this.setupProductForDelete(catVendorCatalogMaintenanceRequestNew.RecId,
                                                                   catVendorApprovedProduct.VendorProductCode,
                                                                   catVendorApprovedProduct.EcoResCategory,
                                                                   catVendorApprovedProduct.EcoResProduct,
                                                                   catVendorApprovedProduct.ProductSubtype);

            //Increment the counter so that Catalog maintenance request will not be created second time.
            counter++;
        }

        if (catVendorProductCandidate)
        {
            CatVendCatalogSubmitToWorkflow::submitByRecId(catVendorProductCandidate.CatalogMaintenanceRequest);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastInfoLog</Name>
				<Source><![CDATA[
    public str getLastInfoLog(Exception exceptionType, boolean removeFromLog = false)
    {
        SysInfologEnumerator        enum;
        InfologData                 data;
        str                         lastError;
        int                         lineNum;
        int                         lastErrorLineNum;

        //data = infolog.infologData();
        data = infolog.copy(1, infolog.num());

        enum = SysInfologEnumerator::newData(data);
        while (enum.moveNext())
        {
            lineNum ++;
            if (enum.currentException()==exceptionType)
            {
                lastError = enum.currentMessage();
                lastErrorLineNum = lineNum;
            }
        }
        if (lastError)
        {
            // Trim off the tabs
            lastError = strrem(lastError, '\t');
            //Trim of any white space
            lastError = strltrim(strltrim(lastError));
            if (removeFromLog==true)
                infolog.cut(lastErrorLineNum, lastErrorLineNum);
        }

        return lastError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupProductForDelete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a product for delete.
    /// </summary>
    /// <param name="_catVendorCatalogMaintenanceRequestID">
    ///    The ID of a <c>CatVendorCatalogMaintenanceRequest</c> record for which the product belongs.
    /// </param>
    /// <param name="_vendorProductCode">
    ///    The product code to delete.
    /// </param>
    /// <param name="_ecoResCategroyID">
    ///    The ID of <c>EcoResCategroy</c> for which the product belongs.
    /// </param>
    /// <param name="_ecoResProductID">
    ///    The ID of <c>EcoResProduct</c> for which the product belongs.
    /// </param>
    /// <param name="_ecoResProductSubtype">
    ///    The product sub type.
    /// </param>
    /// <returns>
    ///    Created <c>CatVendorProductCandidate</c> record.
    /// </returns>
    /// <remarks>
    ///    This method creates a product for delete with all the respective price, product and attribute
    ///    information.
    /// </remarks>
    public CatVendorProductCandidate setupProductForDelete( RefRecId _catVendorCatalogMaintenanceRequestID,
                                                             EcoResProductDisplayProductNumber _vendorProductCode,
                                                             RefRecId    _ecoResCategroyID,
                                                             RefRecId    _ecoResProductID,
                                                             EcoResProductSubtype   _ecoResProductSubtype = EcoResProductSubtype::Product)
    {
        CatVendorProductCandidate           catVendorProductCandidate;
        EcoResProductRecId                  productCandidate;
        CatVendorProductTextTranslation     catVendorProductTextTranslation;
        EcoResProductTranslation            ecoResProductTranslation;

        ttsbegin;
        catVendorProductCandidate.CatalogMaintenanceRequest = _catVendorCatalogMaintenanceRequestID;
        catVendorProductCandidate.VendorProductCode = _vendorProductCode;
        catVendorProductCandidate.Category = _ecoResCategroyID;
        catVendorProductCandidate.ActionType = CatProductActionType::Delete;
        catVendorProductCandidate.Status = CatVendorProductStatus::NotSubmitted;
        catVendorProductCandidate.ProductSubtype = _ecoResProductSubtype;

        catVendorProductCandidate.insert();

        productCandidate = catVendorProductCandidate.RecId;

        //inserting TextTranslation records
        insert_recordset catVendorProductTextTranslation (ProductCandidate, Language)
            select productCandidate, LanguageId from  ecoResProductTranslation
            where ecoResProductTranslation.Product == _ecoResProductID;

        ttscommit;

        return catVendorProductCandidate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCatalogMaintenanceRequestId</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Expose the handled CMR file record id.
    /// </summary>
    /// <returns>
    ///    The <c>CatVendorCatalogMaintenanceRequest</c> record identifier.
    /// </returns>
    public RecId getCatalogMaintenanceRequestId()
    {
        return catVendorCatalogMaintenanceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>uploadCatalogMaintenenceRequest</Name>
				<Source><![CDATA[
    public void uploadCatalogMaintenenceRequest(str fileName,
                                                CatVendorCatalogCMRFileSize fileLength,
                                                CatVendorFileUploadParameters _catVendorFileUploadParameters,
                                                boolean isNew,
                                                CatVendorCatalogDescription catalogDescription = '')
    {
        CatVendorCatalogMaintenanceRequest  catVendorCatalogMaintenanceRequest;

        CatVendorCatalogCMRFileSize         fileSize;
        DirPartyTable                       dirPartyTable;

        fileSize        = this.changeFileSizetoMB(fileLength);
        dirPartyTable   = DirPartyTable::findRec(_catVendorFileUploadParameters.parmVendorParty());

        //Validating Effective and Expiration dates
        if (_catVendorFileUploadParameters.parmEffectiveDate() != DateTimeUtil::date(DateTimeUtil::minValue())
            && _catVendorFileUploadParameters.parmExpirationDate() != DateTimeUtil::date(DateTimeUtil::minValue())
            && (_catVendorFileUploadParameters.parmExpirationDate() - _catVendorFileUploadParameters.parmEffectiveDate()) <= 0 )
        {
            throw error("@SYS191672");
        }

        if (!CatVendorCatalogMaintenance::isXMLFile(fileName))
        {
            throw error("@SYS136509");
        }

        if (CatVendorCatalogMaintenance::isVendorPartyEnabled(dirPartyTable.RecId))
        {
            // Creating Catalog Maintenance request
            catVendorCatalogMaintenanceRequest = CatVendorCatalogMaintenanceRequest::createCatalog(
                                                                        _catVendorFileUploadParameters.parmCatalogName(),
                                                                        dirPartyTable.RecId,
                                                                        catalogDescription,
                                                                        fileName,
                                                                        fileSize,
                                                                        _catVendorFileUploadParameters.parmEffectiveDate(),
                                                                        _catVendorFileUploadParameters.parmExpirationDate(),
                                                                        isNew,
                                                                        _catVendorFileUploadParameters.parmFileUploadType(),
                                                                        _catVendorFileUploadParameters.parmCategoryHierarchyType());

            // we want to be able to expose the catalog maintenance request id later
            catVendorCatalogMaintenanceRecId = catVendorCatalogMaintenanceRequest.RecId;

            CatVendorCatalogImportEventLog::logEvent(catVendorCatalogMaintenanceRequest.RecId,
                                                    CatImportProcessingMessageType::Info,
                                                    CatVendorCatalogProcessingState::StartCatalogUpload,
                                                    "@SYS310815");
        }
        else
        {
            throw error("@SYS191378");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitFilename</Name>
				<Source><![CDATA[
    static container splitFilename(Filename filename)
    {
        #define.dot('.')
        Filename    filenameOnly;
        Filename    type;
        Filename    path;

        [path, filenameOnly, type] = fileNameSplit(filename);

        if (substr(type,1,1) == #dot) //remove dot...
        {
            type = strdel(type,1,1);
        }

        return [filenameOnly, type, path];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendorParty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the vendor party.
    /// </summary>
    /// <returns>
    /// The vendor party <c>RefRecId</c> value.
    /// </returns>
    /// <remarks>
    /// This function written for EP use. It searches for selected vendor accounts in VSS and returns the
    /// vendor party.
    /// </remarks>
    public static RefRecId getVendorParty()
    {
        VendAccount         vendAccount;

        //get selected account from vendor account chooser control in EP
        vendAccount = VendAccountManager::getSelectedAccount();

        return VendTable::find(vendAccount).Party;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVendorPartyEnabled</Name>
				<Source><![CDATA[
    static boolean isVendorPartyEnabled(RefRecId party)
    {
        return CatVendorChannel::find(party).IsEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isXMLFile</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified file is an XML file.
    /// </summary>
    /// <param name="_filename">
    ///    The name of the file
    /// </param>
    /// <returns>
    ///    true if the file is an XML file; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    XML and XSD are valid file types.
    /// </remarks>
    static boolean isXMLFile(Filename _filename)
    {
        boolean xmlFile = false;

        if (strEndsWith(_filename, XmlFileExtension))
        {
            xmlFile = true;
        }

        return xmlFile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVendorCatalogDefinitionGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds first instance of a vendor catalog import data project.
    /// </summary>
    /// <returns>The first found instance of a <c>DMFDefinitionGroup</c> for <c>VendorCatalogs</c> entity.</returns>
    public static DMFDefinitionGroup findVendorCatalogDefinitionGroup()
    {
        DMFDefinitionGroup          dmfDefinitionGroup;
        DMFDefinitionGroupEntity    dmfDefinitionGroupEntity;

        DictCompositeDataEntity compositeDataEntity = new DictCompositeDataEntity('CatVendorCatalogEntity');

        select firstonly DefinitionGroupName, RecId from dmfDefinitionGroup
            exists join dmfDefinitionGroupEntity
                where dmfDefinitionGroup.DefinitionGroupName == dmfDefinitionGroupEntity.DefinitionGroup
                && dmfDefinitionGroupEntity.Entity == compositeDataEntity.label()
                && dmfDefinitionGroup.OperationType == DMFOperationType::Import;

        return dmfDefinitionGroup;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>