<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdMonthlyReportDP_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxWithholdMonthlyReportDP_IT</c> class is the Report Data Provider class for the <c>TaxWithholdMonthlyReportIT</c> report.
/// </summary>
[
    SRSReportQuery(querystr(TaxWithholdMonthlyReport_IT)),
    SRSReportParameterAttribute(classstr(TaxWithholdMonthlyReportContract_IT))
]
class TaxWithholdMonthlyReportDP_IT extends SRSReportDataProviderBase
{
    private const str FeatureReference = 'IT-00018';

    TransDate fromPaymentDate;
    TransDate toPaymentDate;
    Boolean details;
    TaxWithholdTrans taxWithholdTrans;
    TaxWithholdTable taxWithholdTable;
    TaxWithholdReasonCode oldTaxWithholdReasonCode;
    VendTable vendTable;
    TaxWithholdMonthlyReportTmp_IT taxWithholdMonthlyReportTmp_IT;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the document date.
    /// </summary>
    /// <returns>
    /// The document date value.
    /// </returns>
    private DocumentDate documentDate()
    {
        VendTrans vendTrans = VendTrans::find(taxWithholdTrans.VendTransInvoiceId);
        VendInvoiceJour vendInvoiceJour = VendInvoiceJour::findFromVendTransVoucher(taxWithholdTrans.Invoice,
                                                                                    vendTrans.Voucher,
                                                                                    vendTrans.TransDate,
                                                                                    taxWithholdTrans.VendAccount);

        return vendInvoiceJour.DocumentDate ? vendInvoiceJour.DocumentDate : vendInvoiceJour.InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxWithholdMonthlyReportTmp_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets data from the <c>TaxWithholdMonthlyReportTmp_IT</c> temporary table.
    /// </summary>
    /// <returns>
    /// Data from the <c>TaxWithholdMonthlyReportTmp_IT</c> table.
    /// </returns>
    [
        SRSReportDataSet(tablestr(TaxWithholdMonthlyReportTmp_IT))
    ]
    public TaxWithholdMonthlyReportTmp_IT getTaxWithholdMonthlyReportTmp_IT()
    {
        select taxWithholdMonthlyReportTmp_IT;
        return taxWithholdMonthlyReportTmp_IT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query by passing the From date and the To date UI parameter values to the transdate
    /// range and the Direction UI parameter value to the direction range.
    /// </summary>
    /// <param name="_query">
    /// The base query that is used by the report.
    /// </param>
    /// <returns>
    /// The updated query, filtered by the UI parameter values.
    /// </returns>
    protected Query initQuery(Query _query)
    {
        QueryBuildRange range = _query.dataSourceTable(tablenum(TaxWithholdTrans)).findRange(fieldnum(TaxWithholdTrans, TransDate));

        if (fromPaymentDate && toPaymentDate)
        {
            if (!range)
            {
                range = _query.dataSourceTable(tablenum(TaxWithholdTrans)).addRange(fieldnum(TaxWithholdTrans, TransDate));
            }
            range.value(queryRange(fromPaymentDate, toPaymentDate));
        }
        else
        {
            if (range)
            {
                _query.dataSourceTable(tablenum(TaxWithholdTrans)).clearRange(fieldnum(TaxWithholdTrans, TransDate));
            }
        }
        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the <c>TaxWithholdMonthlyReportTmp_IT</c> temporary table.
    /// </summary>
    private void insert()
    {
        taxWithholdMonthlyReportTmp_IT.TotalAmount = taxWithholdTrans.TaxNotTaxableExpenses  +
                                                     taxWithholdTrans.TaxNotTaxableByTreaty  +
                                                     taxWithholdTrans.TaxExemptedAmount      +
                                                     taxWithholdTrans.TaxWithholdBaseAmount;
        taxWithholdMonthlyReportTmp_IT.TaxNotTaxableExpenses = taxWithholdTrans.TaxNotTaxableExpenses;
        taxWithholdMonthlyReportTmp_IT.TaxNotTaxableByTreaty = taxWithholdTrans.TaxNotTaxableByTreaty;
        taxWithholdMonthlyReportTmp_IT.TaxExemptedAmount = taxWithholdTrans.TaxExemptedAmount;
        taxWithholdMonthlyReportTmp_IT.TaxWithholdBaseAmount = taxWithholdTrans.TaxWithholdBaseAmount;
        taxWithholdMonthlyReportTmp_IT.TaxTaxWithholdAmount = taxWithholdTrans.TaxTaxWithholdAmount;
        taxWithholdMonthlyReportTmp_IT.DocumentDate = this.documentDate();
        taxWithholdMonthlyReportTmp_IT.Invoice = taxWithholdTrans.Invoice;
        taxWithholdMonthlyReportTmp_IT.TaxTaxWithholdAmount = taxWithholdTrans.TaxTaxWithholdAmount;
        taxWithholdMonthlyReportTmp_IT.VendAccount = taxWithholdTrans.VendAccount;
        taxWithholdMonthlyReportTmp_IT.VendName = VendTable::find(taxWithholdTrans.VendAccount).Name();
        taxWithholdMonthlyReportTmp_IT.TaxWithholdReasonCode = taxWithholdTable.TaxWithholdReasonCode;
        taxWithholdMonthlyReportTmp_IT.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the SSRS report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by SSRS at
    /// runtime and it should compute data and populate the data tables that are returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        TaxWithholdMonthlyReportContract_IT contract = this.parmDataContract() as TaxWithholdMonthlyReportContract_IT;
        fromPaymentDate = contract.parmFromPaymentDate();
        toPaymentDate = contract.parmToPaymentDate();
        details = contract.parmDetails();

        QueryRun queryRun = new QueryRun(this.initQuery(this.parmQuery()));

        while (queryRun.next())
        {
            taxWithholdTrans = queryRun.get(tablenum(TaxWithholdTrans));
            taxWithholdTable = queryRun.get(tablenum(TaxWithholdTable));
            this.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>