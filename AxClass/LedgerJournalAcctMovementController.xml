<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalAcctMovementController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerJournalAcctMovementController</c> class handles the business logic for <c>LedgerJournalAccounttMovement</c> report.
/// </summary>
public class LedgerJournalAcctMovementController extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables a report contract to be modified before a dialog box is displayed to the user.
    /// </summary>
    /// <remarks>
    /// Use this method to change the report contract.This method is called only during interactive
    /// scenario, before rendering the UI to user.For a batch scenario, the method is not called because
    /// there is no user interaction and contract values are already saved in batch. Do not instantiate any
    /// instance variables in this code if they are used during the lifetime of controller because they
    /// will fail in batch cases.
    /// </remarks>
    protected void prePromptModifyContract()
    {
        this.setRanges(this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRanges</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the ranges on the query that is used to display data on the report.
    /// </summary>
    /// <param name="_query">
    ///    The <c>JournalNum</c> range will be set to this query based on first parameter.
    /// </param>
    public void setRanges(Query _query)
    {
        LedgerJournalTrans externalLedgerJournalTrans;
        LedgerJournalTable externalLedgerJournalTable;
        QueryBuildDataSource queryBuildDataSource;
        queryBuildDataSource = _query.dataSourceTable(tablenum(LedgerJournalTable));

        if (this.parmArgs() && this.parmArgs().dataset())
        {
            switch (this.parmArgs().dataset())
            {
                case tablenum(LedgerJournalTrans) :
                    externalLedgerJournalTrans = this.parmArgs().record();
                    break;

                case tablenum(LedgerJournalTable) :
                    externalLedgerJournalTable = this.parmArgs().record();
                    break;
            }
        }

        /// Set the range value
        if (externalLedgerJournalTrans)
        {
            SysQuery::findOrCreateRange(queryBuildDataSource,
                                                fieldnum(LedgerJournalTable, JournalNum)).value(externalLedgerJournalTrans.JournalNum);
        }

        if (externalLedgerJournalTable)
        {
            SysQuery::findOrCreateRange(queryBuildDataSource,
                                                fieldnum(LedgerJournalTable, JournalNum)).value(externalLedgerJournalTable.JournalNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        LedgerJournalAcctMovementController controller = new LedgerJournalAcctMovementController();
        controller.parmReportName(ssrsReportStr(LedgerJournalAccountMovement, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>