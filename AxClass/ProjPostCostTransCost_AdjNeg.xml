<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostCostTransCost_AdjNeg</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjPostCostTransCost_AdjNeg extends ProjPostCostTransCost
{
    ProjCostTrans   projCostTransNew;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>costEnterCredit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the posting should have a credit amount for the cost account.
    /// </summary>
    /// <returns>
    /// true if the posting should have a credit amount for the cost account; otherwise, false.
    /// </returns>
    protected boolean costEnterCredit()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditAccountCostValueLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger dimension that is used for the credit side of a posting transaction for costs.
    /// </summary>
    /// <param name = "_fundingSourceId">
    /// The funding source that is associated with the project contract to be used by this transaction.
    /// </param>
    /// <returns>
    /// The ledger dimension default account used to post the credit amounts of cost transaction.
    /// </returns>
    public LedgerDimensionDefaultAccount creditAccountCostValueLedgerDimension(ProjFundingSourceRefId _fundingSourceId)
    {
        LedgerDimensionDefaultAccount   ret;

        if ((projCostTransNew.TransactionOrigin == ProjOrigin::CostJournal ||
			 projCostTransNew.TransactionOrigin == ProjOrigin::ExpenseManagement) &&
             projCostTransNew.AdjRefTransId)
        {
            LedgerJournalTrans              ledgerJournalTrans;
            LedgerJournalTrans_Project      ledgerJournalTrans_Project;

            select firstonly OffsetLedgerDimension,RecId from ledgerJournalTrans
                exists join ledgerJournalTrans_Project
                     where ledgerJournalTrans_Project.RefRecId   == ledgerJournalTrans.RecId
                        && ledgerJournalTrans_Project.ProjId     == projCostTransNew.ProjId
                        && ledgerJournalTrans_Project.CategoryId == projCostTransNew.CategoryId
                        && ledgerJournalTrans_Project.TransId    == projCostTransNew.AdjRefTransId;

            if (ledgerJournalTrans.RecId && ledgerJournalTrans.OffsetLedgerDimension)
            {
                ret = DimensionAttributeValueCombination::find(ledgerJournalTrans.OffsetLedgerDimension).RecId;
            }
            else
            {
                ret = ProjDefaultOffsetSetup::findDefaultOffsetAccount(projCostTransNew.ProjId,
                                                                       projCostTransNew.CategoryId,
                                                                       projCostTransNew.Resource).parmLedgerDimension();
            }
        }
        else if (projCostTransNew.TransactionOrigin == ProjOrigin::ProjAdvancedJournal &&
                 projCostTransNew.AdjRefTransId)
        {
            ProjAdvancedJournalLine projAdvancedJournalLine = ProjAdvancedJournalLine::findByVoucher(projCostTransNew.VoucherJournal);
            ret = DimensionAttributeValueCombination::find(projAdvancedJournalLine.OffsetLedgerDimension).RecId;
        }
        else if ((projCostTransNew.TransactionOrigin == ProjOrigin::PurchaseOrder ||
                 projCostTransNew.TransactionOrigin == ProjOrigin::VendorInvoice) &&
                 projCostTransNew.AdjRefTransId)
        {
            ret = this.getLedgerDimension(LedgerPostingType::VendBalance);
        }
        else if (projCostTransNew.TransactionOrigin == ProjOrigin::InvoiceJournal &&
                 projCostTransNew.AdjRefTransId)
        {
            ret = this.getLedgerDimension(LedgerPostingType::LedgerJournal);
        }

        if (!ret)
        {
            ret = super(_fundingSourceId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerDimension</Name>
				<Source><![CDATA[
    private LedgerDimensionAccount getLedgerDimension(LedgerPostingType _ledgerPostingType)
    {
        ProjCostTrans   localProjCostTrans;

        select VoucherJournal from localProjCostTrans
            where localProjCostTrans.TransId ==  projCostTransNew.AdjRefTransId;
                
        GeneralJournalEntry         generalJournalEntry;
        GeneralJournalAccountEntry  generalJournalAccountEntry;

        if (_ledgerPostingType == LedgerPostingType::LedgerJournal)
        {
            select firstonly RecId from generalJournalEntry
                where generalJournalEntry.SubledgerVoucher == localProjCostTrans.VoucherJournal &&
                    generalJournalEntry.SubledgerVoucherDataAreaId == curExt()
            join firstonly LedgerDimension from generalJournalAccountEntry
                where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId &&
                    generalJournalAccountEntry.PostingType == _ledgerPostingType;
        }
        else
        {
            select firstonly RecId from generalJournalEntry
                where generalJournalEntry.SubledgerVoucher == localProjCostTrans.VoucherJournal
            join firstonly LedgerDimension from generalJournalAccountEntry
                where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId &&
                    generalJournalAccountEntry.PostingType == _ledgerPostingType;
        }        

        return DimensionAttributeValueCombination::find(generalJournalAccountEntry.LedgerDimension).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>debitAccountCostValueLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ledger dimension that is used for the debit side of a posting transaction for costs.
    /// </summary>
    /// <param name="_fundingSourceId">
    ///    The funding source that is associated with the project contract to be used by this transaction.
    /// </param>
    /// <returns>
    ///    The ledger dimension used to post the debit amounts of cost transactions.
    /// </returns>
    public LedgerDimensionDefaultAccount debitAccountCostValueLedgerDimension(ProjFundingSourceRefId _fundingSourceId )
    {
        switch (this.parmLedgerStatusCost())
        {
            case ProjLedgerStatus::Operations   :
                return projTrans.costAccountLedgerDimension(_fundingSourceId);

            case ProjLedgerStatus::BalanceSheet :
                return projTrans.statusAccountLedgerDimension(_fundingSourceId);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(ProjCostTrans _projCostTransNew, ProjCostTrans _projCostTransOrig, ProjCostTransCost _projCostTransCostOrig)
    {
        projCostTransNew = _projCostTransNew;

        super(_projCostTransOrig, _projCostTransCostOrig);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger posting type that is associated with posting project costs based on the current
    /// project ledger status.
    /// </summary>
    /// <returns>
    /// The ledger posting type for project costs.
    /// </returns>
    public LedgerPostingType postingTypeCost()
    {
        LedgerPostingType   retval;

        switch (this.parmLedgerStatusCost())
        {
            case ProjLedgerStatus::Operations   :
                retval = LedgerPostingType::ProjCost;
                break;

            case ProjLedgerStatus::BalanceSheet :
                retval = LedgerPostingType::ProjWIPCostvalue;
                break;
        }
        return retval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeOffsetCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger posting type for project offset cost posting based on the current ledger status of
    /// the project.
    /// </summary>
    /// <returns>
    /// The ledger posting type for project offset costs.
    /// </returns>
    public LedgerPostingType postingTypeOffsetCost()
    {
        LedgerPostingType   retval;

        if ((projCostTransNew.TransactionOrigin == ProjOrigin::CostJournal || 
             projCostTransNew.TransactionOrigin == ProjOrigin::ExpenseManagement ||
             projCostTransNew.TransactionOrigin == ProjOrigin::ProjAdvancedJournal ||
             projCostTransNew.TransactionOrigin == ProjOrigin::InvoiceJournal) &&
             projCostTransNew.AdjRefTransId)
        {
            retval = LedgerPostingType::LedgerJournal;
        }
        else
        {
            switch (this.parmLedgerStatusCost())
            {
                case ProjLedgerStatus::Operations   :
                    retval = LedgerPostingType::ProjCost;
                    break;

                case ProjLedgerStatus::BalanceSheet :
                    retval = LedgerPostingType::ProjWIPCostvalue;
                    break;
            }
        }

        return retval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a transaction posting.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method before the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmCreateTrans</c> method returns true.
    /// </remarks>
    public void projTransCreate()
    {
        ProjCostTransCost   projCostTransCostLoc;

        TransDate getLedgerTransdate()
        {
            TransDate ret;

            if (ledgerVoucher)
            {
                ret = ledgerVoucher.lastTransDate();
            }

            return ret;
        }

        projCostTransCostLoc.clear();
        projCostTransCostLoc.TransId = projCostTransNew.TransId;
        if (this.parmAdjustment() && this.parmAdjustmentDate())
        {
                projCostTransCostLoc.LedgerTransdate = this.parmAdjustmentDate();
        }
        else
        {
            projCostTransCostLoc.LedgerTransdate = getLedgerTransdate();
        }
        projCostTransCostLoc.CostPrice          = projCostTransCost.CostPrice;
        projCostTransCostLoc.CostPriceCurrency  = projCostTransCost.CostPriceCurrency;
        projCostTransCostLoc.LineAmount         = projCostTransCost.LineAmount * -1;
        projCostTransCostLoc.CostAmountLedger   = projCostTransCost.CostAmountLedger * -1;
        projCostTransCostLoc.FundingSource      = projCostTransCost.FundingSource;
        projCostTransCostLoc.TransStatus        = ProjTransStatus::Adjusted;
        projCostTransCostLoc.LedgerStatusCost   = (projCostTransCost.LedgerStatusCost == ProjLedgerStatus::BalanceSheet ?
                                                    (ProjLineProperty::find(projCostTransNew.LinePropertyId).ToBeCapitalize ?
                                                    ProjLedgerStatus::BalanceSheet : ProjLedgerStatus::None) :
                                                    ProjLedgerStatus::Operations);
        projCostTransCostLoc.DefaultDimension   = projCostTransCost.DefaultDimension;

        if (! projCostTransCostLoc.validateWrite())
        {
            throw error("@SYS21628");
        }

        projCostTransCostLoc.insert();

        projTrans = ProjTrans::newProjCostTransCost(projCostTransNew, projCostTransCostLoc);

        if (this.parmCostUseOrig())
        {
            this.parmTransIdCost(this.parmTransIdOrig());
        }
        else
        {
            this.parmTransIdCost(projCostTransCostLoc.TransId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyIdCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code for the costs that are reported by this transaction.
    /// </summary>
    /// <returns>
    /// The currency code for the costs reported by this transaction.
    /// </returns> 
    /// <remarks>
    /// This method will return the transaction currency instead of accounting currency because it invokes the 
    /// overridden method of <c>ProjTransCostTrans</c> class.
	/// </remarks>
	 public CurrencyCode currencyIdCost()
	 {
 		return projTrans.currencyIdCost();
	 }

]]></Source>
			</Method>
			<Method>
				<Name>costValueCUR</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns total cost amount for the transaction.
    /// </summary>
    /// <returns>
    /// Total cost amount for the transaction.
    /// </returns>
    protected AmountCur costValueCUR()
    {
        return projTrans.transCost();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>