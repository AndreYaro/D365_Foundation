<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustWriteOff_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustWriteOff_PSN</c> class creates the write-off journal for customer transactions
/// if public sector config key is turned on and ledger posting definitions are turned on.
/// </summary>
class CustWriteOff_PSN extends CustWriteOff
{
    Map transactionLineMap;
    List systemGeneratedEntriesList;

    AmountCur               transactionAmount;
    AmountMST               transactionAmountMST;
    LedgerDimensionAccount  ledgerDimensionAccount;
    Set                     processedVouchers;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        this.initializeTransactionAmountsAndMap();
        systemGeneratedEntriesList = new List(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs an instance of the <c>CustWriteOff_PSN</c> class.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>CustWriteOff_PSN</c> class.
    /// </returns>
    public static CustWriteOff_PSN construct()
    {
        CustWriteOff_PSN custWriteOff = new CustWriteOff_PSN();

        return custWriteOff;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTransactionAmountsAndMap</Name>
				<Source><![CDATA[
    protected void initializeTransactionAmountsAndMap()
    {
        transactionAmount = 0;
        transactionAmountMST = 0;
        transactionLineMap = new Map(Types::Int64, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayMessage</Name>
				<Source><![CDATA[
    protected void displayMessage(LedgerJournalTable _ledgerJournalTable, CompanyId _companyId)
    {
        if (_ledgerJournalTable.existVoucher())
        {
            super(_ledgerJournalTable, _companyId);
        }
        else
        {
            ttsabort;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerAccTypeJournalLine</Name>
				<Source><![CDATA[
    protected LedgerJournalTrans createLedgerAccTypeJournalLine(
        TmpCustVendTransOpen _localTmpTrans,
        LedgerJournalEngine _ledgerJournalEngine,
        LedgerJournalTrans _previousLedgerJournalTrans,
        LedgerDimensionAccount _ledgerDimension,
        AmountCur _amount,
        ReasonCode _reasonCode,
        ReasonComment _reasonComment)
    {
        LedgerJournalTrans          ledgerJournalTrans, localLedgerJournalTrans;
        MapEnumerator               mapEnumerator;
        MapEnumerator               localMapEnumerator;
        Map                         localmap = new Map(Types::Int64, Types::Class);
        JournalizingDefinitionEntry tmpEntry = new JournalizingDefinitionEntry();
        List                        tmpEntryList = new List(Types::Class);
        ListEnumerator              systemGeneratedEntriesListEnumerator, tmpEntryListEnumerator;
        CustTrans                   custTrans;
        boolean                     amountUpdated;
        GeneralJournalAccountEntry  generalJournalAccountEntry;
        JournalizingDefinitionEntry journalizingDefinitionEntry;
        Map                         journalTransMap = new Map(Types::Int64, Types::Int64);
        AccountingDistribution      accountingDistribution;
        CurrencyExchangeHelper      currencyHelper;

        //
        // The transactionLineMap stores the cust trans record IDs to process,
        // and a map of all the system generated entries retrieved originally
        //
        mapEnumerator = new MapEnumerator(transactionLineMap);

        ledgerJournalTrans.data(_previousLedgerJournalTrans);

        if (LedgerParameters::find().JournalizingDefinitionEnableValue == NoYes::Yes)
        {
            journalTransMap.insert(ledgerJournalTrans.LedgerDimension, ledgerJournalTrans.RecId);
        }

        while (mapEnumerator.moveNext())
        {
            custTrans.RecId = mapEnumerator.currentKey();
            custTrans = CustTrans::find(custTrans.RecId);
            localmap = mapEnumerator.currentValue();
            localMapEnumerator = new MapEnumerator(localmap);

            //
            // The localMap loop handles the processing of all the system
            // generated entries (from posting definitions)
            //
            while (localMapEnumerator.moveNext())
            {
                systemGeneratedEntriesList = localMapEnumerator.currentValue();
                if (custTrans.TransType == LedgerTransType::Cust)
                {
                    accountingDistribution = AccountingDistribution::find(localMapEnumerator.currentKey());
                    currencyHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::current(custTrans.company())), custTrans.TransDate);
                    transactionAmount = ledgerJournalTrans.AmountCurCredit;
                    transactionAmountMST = currencyHelper.calculateTransactionToAccounting(custTrans.CurrencyCode, transactionAmount, true);
                    ledgerDimensionAccount = accountingDistribution.LedgerDimension;
                }
                else
                {
                    select firstonly LedgerDimension, TransactionCurrencyAmount, AccountingCurrencyAmount, PostingType from generalJournalAccountEntry
                            where generalJournalAccountEntry.RecId == GeneralJournalAccountEntry::find(localMapEnumerator.currentKey()).RecId
                                && generalJournalAccountEntry.PostingType != LedgerPostingType::CustBalance
                                && !(custParameters.CollectionsWriteOffSeparateSalesTax == true
                                && (generalJournalAccountEntry.PostingType == LedgerPostingType::Tax))
                                && !(custTrans.TransType == LedgerTransType::Fee
                                && generalJournalAccountEntry.AccountingCurrencyAmount >= 0);

                    if (generalJournalAccountEntry.RecId == 0)
                    {
                        continue;
                    }

                    ledgerDimensionAccount = generalJournalAccountEntry.LedgerDimension;
                    transactionAmount = -1 * generalJournalAccountEntry.TransactionCurrencyAmount;
                    transactionAmountMST = -1 * generalJournalAccountEntry.AccountingCurrencyAmount;
                }

                systemGeneratedEntriesListEnumerator = systemGeneratedEntriesList.getEnumerator();

                //
                // The systemGeneratedEntriesList loop processes the accounts and debit and credits
                // previously retrieved from the originating transaction
                // it will update the amount based on the current transactionAmount, sign and
                // current account generated from posting definitions. The originating transaction
                // is just used to feed the posting definitions to get the accounts to process
                // We also do not want the same line to have both a debit and a credit amount as well
                //
                while (systemGeneratedEntriesListEnumerator.moveNext())
                {
                    journalizingDefinitionEntry = systemGeneratedEntriesListEnumerator.current();

                    if (journalizingDefinitionEntry.parmTransactionAmount())
                    {
                        if (custTrans.TransType == LedgerTransType::Cust && custTrans.PaymSchedId)
                        {
                            if (accountingDistribution.AllocationFactor == 1)
                            {
                                transactionAmount = _localTmpTrans.AmountCur;
                            }
                            else
                            {
                                transactionAmount = accountingDistribution.TransactionCurrencyAmount;
                            }
                        }
                        else
                        {
                            transactionAmount = journalizingDefinitionEntry.parmTransactionAmount();
                        }
                    }

                    ledgerDimensionAccount = LedgerDimensionFacade::serviceMergeLedgerDimensions(systemGeneratedEntriesListEnumerator.current().parmLedgerDimension(), ledgerDimensionAccount);

                    //
                    // The tmpEntryList loop examines the already existing transaction account entries for this process,
                    // and if it finds an existing record that matches,
                    // it will update the amount based on the current transactionAmount and sign
                    // We do not want the same line to have both a debit and a credit amount as well
                    //
                    tmpEntryListEnumerator = tmpEntryList.getEnumerator();
                    while (tmpEntryListEnumerator.moveNext())
                    {
                        if (systemGeneratedEntriesListEnumerator.current().parmLedgerDimension() &&
                                tmpEntryListEnumerator.current().parmLedgerDimension() &&
                                systemGeneratedEntriesListEnumerator.current().parmLedgerDimension() == tmpEntryListEnumerator.current().parmLedgerDimension())
                        {
                            localLedgerJournalTrans = LedgerJournalTrans::findRecId(journalTransMap.lookup(ledgerDimensionAccount), true);

                            if (systemGeneratedEntriesListEnumerator.current().parmJournalizingDefinitionDebitCredit() == DebitCredit::Debit)
                            {
                                //
                                // make sure we debit whatever has the current amount
                                // if we don't we could counceivably have a debit and credit on the same line
                                //
                                if (localLedgerJournalTrans.AmountCurDebit != 0)
                                {
                                    localLedgerJournalTrans.AmountCurDebit += transactionAmount;
                                }
                                else
                                {
                                    localLedgerJournalTrans.AmountCurCredit -= transactionAmount;
                                }
                            }
                            else
                            {
                                //
                                // make sure we credit whatever has the current amount
                                // if we don't we could counceivably have a debit and credit on the same line
                                //
                                if (localLedgerJournalTrans.AmountCurCredit != 0)
                                {
                                    localLedgerJournalTrans.AmountCurCredit -= transactionAmount;
                                }
                                else
                                {
                                    localLedgerJournalTrans.AmountCurDebit += transactionAmount;
                                }
                            }

                            if (localLedgerJournalTrans.AmountCurCredit < 0)
                            {
                                localLedgerJournalTrans.AmountCurDebit = abs(localLedgerJournalTrans.AmountCurCredit);
                                localLedgerJournalTrans.AmountCurCredit = 0;
                            }

                            if (localLedgerJournalTrans.AmountCurDebit < 0)
                            {
                                localLedgerJournalTrans.AmountCurCredit = abs(localLedgerJournalTrans.AmountCurDebit);
                                localLedgerJournalTrans.AmountCurDebit = 0;
                            }
                            localLedgerJournalTrans.doUpdate();
                            amountUpdated = true;
                        }
                    }

                    if (amountUpdated)
                    {
                        continue;
                    }

                    _ledgerJournalEngine.preCreate(ledgerJournalTrans);
                    ledgerJournalTrans.initValue();
                    _ledgerJournalEngine.initValue(ledgerJournalTrans);
                    ledgerJournalTrans.RecId = 0;
                    ledgerJournalTrans.LineNum = 0;

                    ledgerJournalTrans.TransactionType = LedgerTransType::WriteOff;
                    ledgerJournalTrans.TransDate = writeOffDate;
                    ledgerJournalTrans.AccountType = LedgerJournalACType::Ledger;
                    ledgerJournalTrans.LedgerDimension = ledgerDimensionAccount;
                    _ledgerJournalEngine.accountModified(ledgerJournalTrans);

                    ledgerJournalTrans.DefaultDimension = 0;

                    ledgerJournalTrans.CurrencyCode = _localTmpTrans.CurrencyCode;
                    _ledgerJournalEngine.currencyModified(ledgerJournalTrans);

                    // Adjust amount by sales tax
                    ledgerJournalTrans.Txt = strFmt("@SYS133612", _localTmpTrans.AccountNum, CustTable::find(_localTmpTrans.AccountNum).name());

                    ledgerJournalTrans.ReasonRefRecID = ReasonTableRef::createReasonTableRef(_reasonCode, _reasonComment);

                    ledgerJournalTrans.OffsetAccountType = LedgerJournalACType::Ledger;
                    ledgerJournalTrans.OffsetLedgerDimension = 0;
                    ledgerJournalTrans.OffsetDefaultDimension = 0;

                    // blank out fields like sales tax, etc.
                    ledgerJournalTrans.TaxGroup = '';
                    ledgerJournalTrans.TaxItemGroup = '';
                    ledgerJournalTrans.PaymMode = '';
                    ledgerJournalTrans.PaymSpec = '';
                    ledgerJournalTrans.Prepayment = 0;
                    ledgerJournalTrans.BankTransType = '';

                    if (systemGeneratedEntriesListEnumerator.current().parmJournalizingDefinitionDebitCredit() == DebitCredit::Debit)
                    {
                        ledgerJournalTrans.AmountCurDebit = transactionAmount;
                        ledgerJournalTrans.AmountCurCredit = 0;
                    }
                    else
                    {
                        ledgerJournalTrans.AmountCurCredit = abs(transactionAmount);
                        ledgerJournalTrans.AmountCurDebit = 0;
                    }

                    if (localLedgerJournalTrans.AmountCurCredit < 0)
                    {
                        ledgerJournalTrans.AmountCurDebit = abs(localLedgerJournalTrans.AmountCurCredit);
                        ledgerJournalTrans.AmountCurCredit = 0;
                    }

                    if (localLedgerJournalTrans.AmountCurDebit < 0)
                    {
                        ledgerJournalTrans.AmountCurCredit = abs(localLedgerJournalTrans.AmountCurDebit);
                        ledgerJournalTrans.AmountCurDebit = 0;
                    }

                    // we have updated the amounts based on their debit/credit sign retrieved by the posting definition
                    ledgerJournalTrans.insert();
                    localLedgerJournalTrans = ledgerJournalTrans;
                    journalTransMap.insert(ledgerJournalTrans.LedgerDimension, ledgerJournalTrans.RecId);
                    tmpEntry = systemGeneratedEntriesListEnumerator.current();
                    tmpEntryList.addEnd(tmpEntry);
                }
                amountUpdated = false;
                _ledgerJournalEngine.voucherTotals(ledgerJournalTrans, true);
            }
        }

        this.initializeTransactionAmountsAndMap();
        
        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapDimensionsToAmounts</Name>
				<Source><![CDATA[
    protected Map mapDimensionsToAmounts(Set _transOpenToSettle, LedgerDimensionDefaultAccount _writeOffLedgerAccount, AmountCur _expectedTotalWriteOffAmount)
    {
        // Return an empty map for CustWriteOff_PSN
        return new Map(Types::Int64, Types::Real);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWriteOffPostingDefinitionAccounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Gets and validates the write off posting definition accounts.
    /// </summary>
    /// <returns>
    /// true if posting definition accounts are found; otherwise, false.
    /// </returns>
    protected boolean initWriteOffPostingDefinitionAccounts()
    {
        Map localTransactionLineMap;
        boolean transactionAccountsFound;
        CustTrans custTrans;
        CustInvoiceTable custInvoiceTable;
        GeneralJournalEntry generalJournalEntry;
        JournalizingDefinitionId journalizingDefinitionId;
        JournalizingDefinitionCode journalizingDefinitionCode;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        JournalizingDefinitionManager journalizingDefinitionManager;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;
        Percent settleAmountFactor;
        boolean seperateSalesTaxTrans, transactionFound;
        ListEnumerator systemGeneratedEntriesListEnumerator;
        JournalizingDefinitionEntry journalizingDefinitionEntry;
        Counter currentCounter;
        RefRecId distCount;
        CustTransOpen localCustTransOpen;
        CustInvoiceTrans custInvoiceTrans;
        AccountingDistribution accountingDistribution;
        AccountingDistribution taxAccountingDistribution;
        CustInvoiceLine custInvoiceLine;
        CustTransOpenLine custTransOpenLine;
        AmountCur pennyDifferenceAmount, originatingAmountCur, salesTaxAmountCur;
        custTrans custTransLookup;
        AmountCur transactionAmountForPD;

        void addGeneratedEntries()
        {
            currentCounter++;
            ledgerDimensionAccount = accountingDistribution.LedgerDimension;
            originatingAmountCur = accountingDistribution.TransactionCurrencyAmount;

            if (originatingAmountCur >= 0)
            {
                systemGeneratedEntriesList = journalizingDefinitionManager.getSystemGeneratedEntries(DebitCredit::Credit, ledgerDimensionAccount);
            }
            else
            {
                systemGeneratedEntriesList = journalizingDefinitionManager.getSystemGeneratedEntries(DebitCredit::Debit, ledgerDimensionAccount);
            }

            select TransactionCurrencyAmount, LedgerDimension, RecId from taxAccountingDistribution
                where taxAccountingDistribution.ParentDistribution == accountingDistribution.RecId;

            if (taxAccountingDistribution.RecId && seperateSalesTaxTrans == NoYes::No)
            {
                originatingAmountCur += -taxAccountingDistribution.TransactionCurrencyAmount;
            }
            else if (taxAccountingDistribution.RecId)
            {
                salesTaxAmountCur += CurrencyExchange::round(-(taxAccountingDistribution.TransactionCurrencyAmount * settleAmountFactor), custTrans.CurrencyCode);
            }

            originatingAmountCur = CurrencyExchange::round(originatingAmountCur * settleAmountFactor, custTrans.CurrencyCode);

            if (!systemGeneratedEntriesList.elements())
            {
                transactionAmount = 0;
                transactionAmountMST = 0;
                transactionAccountsFound = false;
                error(strFmt("@SPS667", journalizingDefinitionCode, custTrans.Voucher, custTrans.TransDate));
            }
            else
            {
                transactionAccountsFound = true;
                transactionAmount += originatingAmountCur;
                transactionAmountForPD += originatingAmountCur;
                transactionAmountMST += CurrencyExchangeHelper::amountCur2MST(originatingAmountCur, custTrans.CurrencyCode);
            }

            if (distCount && currentCounter == distCount && custTrans.remainAmountCur() != (transactionAmountForPD + salesTaxAmountCur))
            {
                pennyDifferenceAmount = custTrans.remainAmountCur() - (transactionAmountForPD + salesTaxAmountCur);
                transactionAmount += pennyDifferenceAmount;
                transactionAmountMST += CurrencyExchangeHelper::amountCur2MST(pennyDifferenceAmount, custTrans.CurrencyCode);
                originatingAmountCur += pennyDifferenceAmount;
            }

            systemGeneratedEntriesListEnumerator = systemGeneratedEntriesList.getEnumerator();

            while (systemGeneratedEntriesListEnumerator.moveNext())
            {
                journalizingDefinitionEntry = systemGeneratedEntriesListEnumerator.current();
                if (originatingAmountCur <= 0)
                {
                    if (journalizingDefinitionEntry.parmJournalizingDefinitionDebitCredit() == DebitCredit::Debit)
                    {
                        journalizingDefinitionEntry.parmTransactionAmount(-originatingAmountCur);
                    }
                    else
                    {
                        journalizingDefinitionEntry.parmTransactionAmount(originatingAmountCur);
                    }
                }
                else
                {
                    if (journalizingDefinitionEntry.parmJournalizingDefinitionDebitCredit() == DebitCredit::Credit)
                    {
                        journalizingDefinitionEntry.parmTransactionAmount(-originatingAmountCur);
                    }
                    else
                    {
                        journalizingDefinitionEntry.parmTransactionAmount(originatingAmountCur);
                    }
                }
            }
            localTransactionLineMap.insert(accountingDistribution.RecId, systemGeneratedEntriesList);
            transactionFound = true;
        }

        localTransactionLineMap = new Map(Types::Real, Types::Class);

        select firstonly CustBillingClassification, Invoice, TransType, AmountCur, RecId, Voucher, TransDate, PaymSchedId from custTrans
            where custTrans.AccountNum == tmpTrans.AccountNum &&
                    custTrans.RecId == tmpTrans.RefRecId;

        if (!processedVouchers)
        {
            processedVouchers = new Set(Types::String);
        }
        else if (processedVouchers.in(custTrans.Voucher + custTrans.dataAreaId +
                                    date2StrXpp(custTrans.TransDate)))
        {
            return true;
        }

        processedVouchers.add(custTrans.Voucher + custTrans.dataAreaId +
                                    date2StrXpp(custTrans.TransDate));

        journalizingDefinitionManager = JournalizingDefinitionManager::newJournalizingDefinitionManagerCustomer(0,
                                                    custTrans.CustBillingClassification, writeOffDate, LedgerPostingType::LedgerJournal);
        journalizingDefinitionManager.parmTransactionType(enum2int(LedgerPostingType::LedgerJournal));
        journalizingDefinitionId = journalizingDefinitionManager.getDefaultJournalizingDefinition();
        journalizingDefinitionCode = JournalizingDefinition::findByRecId(journalizingDefinitionId).JournalizingDefinitionCode;

        if (!journalizingDefinitionId)
        {
            throw error(strFmt("@SPS666", custTrans.Voucher, custTrans.TransDate));
        }
        else
        {
            journalizingDefinitionManager.parmJournalizingDefinition(journalizingDefinitionId);

            if (custTrans.TransType == LedgerTransType::Cust)
            {
                seperateSalesTaxTrans = CustParameters::find().CollectionsWriteOffSeparateSalesTax;
                settleAmountFactor = custTrans.remainAmountCur() / custTrans.AmountCur;

                custInvoiceTable = CustInvoiceTable::findPostedInvoice(custTrans.AccountNum, custTrans.Invoice, custTrans.TransDate);

                while select TransactionCurrencyAmount, LedgerDimension from accountingDistribution
                    where accountingDistribution.SourceDocumentHeader == custInvoiceTable.SourceDocumentHeader
                        && accountingDistribution.MonetaryAmount == MonetaryAmount::Charge
                {
                    addGeneratedEntries();
                    if (!transactionAccountsFound)
                    {
                        break;
                    }
                }

                select RecId from localCustTransOpen
                    where localCustTransOpen.RefRecId == custTrans.RecId;

                select count(RecId) from accountingDistribution
                    join RecId from custInvoiceTrans
                        where custInvoiceTrans.SourceDocumentLine == accountingDistribution.SourceDocumentLine
                        join AmountCur, CustBillingCode from custInvoiceLine
                            where custInvoiceLine.SourceDocumentLine == custInvoiceTrans.SourceDocumentLine
                            join CustBillingClassification, InvoiceDate from custInvoiceTable
                                where custInvoiceTable.RecId == custInvoiceLine.ParentRecId
                                    join AmountCur from custTransOpenLine
                                    where custTransOpenLine.CustTransOpen == localCustTransOpen.RecId
                                        && custTransOpenLine.CustInvoiceLineIdRef == custInvoiceTrans.CustInvoiceLineIdRef;

                distCount = accountingDistribution.RecId;
                currentCounter = 0;

                while select TransactionCurrencyAmount, LedgerDimension from accountingDistribution
                    join RecId from custInvoiceTrans
                        where custInvoiceTrans.SourceDocumentLine == accountingDistribution.SourceDocumentLine
                        join AmountCur, CustBillingCode from custInvoiceLine
                            where custInvoiceLine.SourceDocumentLine == custInvoiceTrans.SourceDocumentLine
                            join CustBillingClassification, InvoiceDate from custInvoiceTable
                                where custInvoiceTable.RecId == custInvoiceLine.ParentRecId
                                    join AmountCur from custTransOpenLine
                                    where custTransOpenLine.CustTransOpen == localCustTransOpen.RecId
                                        && custInvoiceTrans.CustInvoiceLineIdRef == custTransOpenLine.CustInvoiceLineIdRef
                {
                    addGeneratedEntries();
                    if (!transactionAccountsFound)
                    {
                        break;
                    }
                }

                if (!transactionFound)
                {
                    select count(RecId) from accountingDistribution
                        exists join custInvoiceLine
                        where custInvoiceLine.SourceDocumentLine == accountingDistribution.SourceDocumentLine
                            exists join custInvoiceTable
                            where custInvoiceTable.InvoiceId == custTrans.Invoice
                                  && custInvoiceLine.ParentRecId == custInvoiceTable.RecId
                                  && custInvoiceTable.InvoiceAccount == custTrans.AccountNum;

                    distCount = accountingDistribution.RecId;
                    currentCounter = 0;

                    while select accountingDistribution
                        exists join custInvoiceLine
                        where custInvoiceLine.SourceDocumentLine == accountingDistribution.SourceDocumentLine
                            exists join custInvoiceTable
                            where custInvoiceTable.InvoiceId == custTrans.Invoice
                                   && custInvoiceLine.ParentRecId == custInvoiceTable.RecId
                                   && custInvoiceTable.InvoiceAccount == custTrans.AccountNum
                    {
                        addGeneratedEntries();
                        if (!transactionAccountsFound)
                        {
                            break;
                        }
                    }
                }

                transactionLineMap.insert(tmpTrans.RefRecId, localTransactionLineMap);
            }
            else
            {
                //
                // The tax lines are filtered out for when the custParameters.CollectionsWriteOffSeparateSalesTax
                // parameter is true. If this parameter is true, the sys tax code will be
                // used in the process, which will fill the tmpTrans buffer. Otherwise, this
                // loop will handle sales tax.
                // Since Fees do not have a customer balance transaction, we have to use the sign to filter them out.
                //
                while select GeneralJournalEntry from subledgerVoucherGeneralJournalEntry
                    where subledgerVoucherGeneralJournalEntry.Voucher == custTrans.Voucher
                join RecId from generalJournalEntry
                    where generalJournalEntry.RecId == subledgerVoucherGeneralJournalEntry.GeneralJournalEntry
                        && generalJournalEntry.SubledgerVoucherDataAreaId == custTrans.dataAreaId
                        && generalJournalEntry.AccountingDate == custTrans.TransDate
                join LedgerDimension, TransactionCurrencyAmount from generalJournalAccountEntry
                    where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId &&
                        generalJournalAccountEntry.PostingType != LedgerPostingType::CustBalance
                        && !(custParameters.CollectionsWriteOffSeparateSalesTax == true
                        && generalJournalAccountEntry.PostingType == LedgerPostingType::Tax)
                        && !(custTrans.TransType == LedgerTransType::Fee
                        && generalJournalAccountEntry.AccountingCurrencyAmount >= 0)
                {
                    ledgerDimensionAccount = generalJournalAccountEntry.LedgerDimension;

                    select custTransLookup
                    where custTransLookup.Voucher == generalJournalEntry.SubledgerVoucher
                                && custTransLookup.dataAreaId == generalJournalEntry.SubledgerVoucherDataAreaId
                                && custTransLookup.TransDate == generalJournalEntry.AccountingDate;

                    transactionAmountForPD = generalJournalAccountEntry.TransactionCurrencyAmount - (-custTransLookup.SettleAmountCur);

                    if (transactionAmountForPD < 0)
                    {
                        systemGeneratedEntriesList = journalizingDefinitionManager.getSystemGeneratedEntries(DebitCredit::Credit, ledgerDimensionAccount);
                    }
                    else
                    {
                        systemGeneratedEntriesList = journalizingDefinitionManager.getSystemGeneratedEntries(DebitCredit::Debit, ledgerDimensionAccount);
                    }

                    if (transactionAmountForPD == 0)
                    {
                        return transactionAccountsFound;
                    }

                    if (!systemGeneratedEntriesList.elements())
                    {
                        error(strFmt("@SPS667", journalizingDefinitionCode, custTrans.Voucher, custTrans.TransDate));
                    }
                    else
                    {
                        transactionAccountsFound = true;
                        localTransactionLineMap.insert(generalJournalAccountEntry.RecId, systemGeneratedEntriesList);
                    }
                }

                transactionLineMap.insert(tmpTrans.RefRecId, localTransactionLineMap);
            }
        }

        return transactionAccountsFound;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>