<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerBalanceSheetController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerBalanceSheetController</c> class is the controller for the <c>LedgerBalanceSheet</c> SSRS report.
/// </summary>
public class LedgerBalanceSheetController extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        LedgerBalanceSheetContract contract;

        super();

        contract = this.parmReportContract().parmRdpContract() as LedgerBalanceSheetContract;

        if (contract.parmStartDate() == dateNull())
        {
            // Provide a default date because the last value is empty.
            contract.parmStartDate(FiscalCalendars::findFirstDayofYear(Ledger::fiscalCalendar(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
        }

        if (contract.parmEndDate() == dateNull())
        {
            // Provide a default date because the last value is empty.
            contract.parmEndDate(FiscalCalendars::findLastDayofYear(Ledger::fiscalCalendar(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        CompanyInfo companyInfo;
        LogisticsPostalAddress postalAddress;
        LedgerBalanceSheetContract contract;

        super();

        contract = this.getDataContractObject() as LedgerBalanceSheetContract;

        companyInfo = companyInfo::find(false, CompanyInfo::current());
        contract.parmHiddenCompanyLongName(companyInfo.Name);
        contract.parmHiddenCompanyTaxRegistrationNum(companyInfo.CoRegNum);

        postalAddress = companyInfo.postalAddress();
        contract.parmHiddenCompanyAddress(postalAddress.Address);
        contract.parmHiddenCompanyZipCode(postalAddress.ZipCode);

        contract.parmHiddenAccountingCurrency(Ledger::accountingCurrency());

        switch (contract.parmUnitOption())
        {
            case LedgerReportUnitOption::One:
                // fall through

            case LedgerReportUnitOption::Thousand:
                contract.parmHiddenDecimalPlaces(0);
                break;

            case LedgerReportUnitOption::None:
                // fall through

            default:
                contract.parmHiddenDecimalPlaces(-1);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        const str FeatureReference = 'CZ-00018';
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());

        LedgerBalanceSheetController controller = new LedgerBalanceSheetController();

        controller.parmReportName(ssrsReportStr(LedgerBalanceSheet, Report));
        controller.parmDialogCaption("@GLS54996");
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>