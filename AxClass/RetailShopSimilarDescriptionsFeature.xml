<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailShopSimilarDescriptionsFeature</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
using Microsoft.Dynamics.ApplicationPlatform.FeatureExposure;
using Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.Implementation;
using Microsoft.Dynamics.BusinessPlatform.SharedTypes;

/// <summary>
/// The <c>RetailShopSimilarDescriptionsFeature</c> class defines the visually similar recommendations feature and its prerequisites.
/// </summary>
[ExportAttribute(identifierStr(Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.IFeatureMetadata))]
internal final class RetailShopSimilarDescriptionsFeature implements IFeatureMetadata, IFeaturePrerequisites, IFeatureDependencies, IFeatureMetadataEnablementNotifiable
{
    private static RetailShopSimilarDescriptionsFeature instance;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>typeNew</Name>
				<Source><![CDATA[
    private static void typeNew()
    {
        instance = new RetailShopSimilarDescriptionsFeature();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static RetailShopSimilarDescriptionsFeature instance()
    {
        return RetailShopSimilarDescriptionsFeature::instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>label</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLabelId label()
    {
        return literalStr("@Retail:RecoListShopSimilarDescriptionsFeatureLabel");
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public int module()
    {
        return FeatureModuleV0::Retail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summary</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLabelId summary()
    {
        return literalStr("@Retail:RecoListShopSimilarDescriptionsFeatureSummary");
    }

]]></Source>
			</Method>
			<Method>
				<Name>learnMoreUrl</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WebSiteURL learnMoreUrl()
    {
        return 'https://go.microsoft.com/fwlink/?linkid=2151344';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabledByDefault</Name>
				<Source><![CDATA[
        [Hookable(false)]
        public boolean isEnabledByDefault()
        {
            return false;
        }

]]></Source>
			</Method>
			<Method>
				<Name>canDisable</Name>
				<Source><![CDATA[
        [Hookable(false)]
        public boolean canDisable()
        {
            return true;
        }

]]></Source>
			</Method>
			<Method>
				<Name>cannotEnableMessage</Name>
				<Source><![CDATA[
        [Hookable(false)]
        public LabelString cannotEnableMessage()
        {
            return "@Retail:RetailFeatureManagementDataLakePrereqErrorMessage";
        }

]]></Source>
			</Method>
			<Method>
				<Name>canEnable</Name>
				<Source><![CDATA[
        [Hookable(false)]
        public boolean canEnable()
        {
            // Ensure that Azure Data Lake has been configured prior to enabling recommendations.
            BIMeasurementParameters entityStore = BIMeasurementParameters::find();
            return entityStore.CDSAEnabled;
        }

]]></Source>
			</Method>
			<Method>
				<Name>onEnabled</Name>
				<Source><![CDATA[
        [Hookable(false)]
        public void onEnabled()
        {
            this.addRecommendationLists();
        }

]]></Source>
			</Method>
			<Method>
				<Name>onDisabled</Name>
				<Source><![CDATA[
        [Hookable(false)]
        public void onDisabled()
        {
        }

]]></Source>
			</Method>
			<Method>
				<Name>dependsOnAllFeatures</Name>
				<Source><![CDATA[
        /// <summary>
        /// Creates dependency on all the features in the list. Pre-requisites features cannot be disabled unless current feature is disabled.
        /// </summary>
        /// <returns>An array containing all the pre-requisite features.</returns>
        public IFeature[] dependsOnAllFeatures()
        {
            var featureDependency = new IFeature[1]();
            featureDependency.SetValue(RetailRecommendationsFeature::instance(), 0);
            return featureDependency;
        }

]]></Source>
			</Method>
			<Method>
				<Name>dependsOnAnyFeature</Name>
				<Source><![CDATA[
        /// <summary>
        /// Creates an array of the features, if any one is enabled, feature can be enabled.
        /// </summary>
        /// <returns>An array containing any pre-requisite features.</returns>
        public IFeature[] dependsOnAnyFeature()
        {
            return null;
        }

]]></Source>
			</Method>
			<Method>
				<Name>addRecommendationLists</Name>
				<Source><![CDATA[
        /// <summary>
        /// Inserts the algo/ML based list definitions if they have not yet been defined.
        /// </summary>
        /// <remarks>
        /// This method is re-entrant and can be called multiple times without side-effect.
        /// </remarks>
        private void addRecommendationLists()
        {
            RetailRecoListsTable listsTable;

            // These are system identifiers and should not be translated.
            const str ShopSimilarDescriptionsListId = 'descriptions';
        
            select firstonly listsTable where listsTable.ListId == ShopSimilarDescriptionsListId;
            if (!listsTable)
            {
                listsTable.ListId = ShopSimilarDescriptionsListId;
                listsTable.ListTitle = "@Retail:RecoListTypeDescriptions";
                listsTable.ListType = RetailRecoListTypeBase::Descriptions;
                listsTable.insert();
            }
        }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>