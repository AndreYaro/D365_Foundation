<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvExpensesVisibilityManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class controls the visibility of expense lines fields based on setup and status.
/// </summary>
class TrvExpensesVisibilityManager extends TrvVisibilityManager
{
    Map                             transactionProject,
                                    transactionSalesTax,
                                    transactionNonCorrectionOnPosting,
                                    headerApproval;
    TrvExpTrans                     trvExpTrans;
    boolean                         isCalledFromExpense, isCalledFromApClerkContext, isCalledFromApproverContext;
    Object                          callingObject;
    str                             headerDataSourceName;

    // Field group names for field groups on trvExpTrans to fetch specific fields for applying conditional visbility.
    const str                       transactionProjectGroupName                         = 'Project',
                                    transactionSalesTaxGroupName                        = 'SalesTaxCalculationGroup',
                                    transactionNonCorrectionOnPostingGroupName          = 'NonCorrectionOnPosting';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTransactionProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Getter method for project field group.
    /// </summary>
    /// <returns>
    /// A map of project fields.
    /// </returns>
    Map getTransactionProject()
    {
        if (!transactionProject)
        {
            transactionProject = this.getFieldGroup(trvExpTrans, transactionProjectGroupName);
        }

        return transactionProject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionSalesTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Getter method for sales tax field group.
    /// </summary>
    /// <returns>
    /// A map of sales tax fields.
    /// </returns>
    Map getTransactionSalesTax()
    {
        if (!transactionSalesTax)
        {
            transactionSalesTax = this.getFieldGroup(trvExpTrans, transactionSalesTaxGroupName);
        }

        return transactionSalesTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionNonCorrectionOnPosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Getter method for all expense line fields except fields group.
    /// </summary>
    /// <returns>
    /// A map of all transaction fields.
    /// </returns>
    Map getTransactionNonCorrectionOnPosting()
    {
        if (!transactionNonCorrectionOnPosting)
        {
            transactionNonCorrectionOnPosting = this.getFieldGroup(trvExpTrans, transactionNonCorrectionOnPostingGroupName);
        }

        return transactionNonCorrectionOnPosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHeaderApproval</Name>
				<Source><![CDATA[
    Map getHeaderApproval()
    {
        if (!headerApproval)
        {
            headerApproval = this.getFieldGroupViaTableId(tableNum(TrvExpTable), "ApproverFields");
        }

        return headerApproval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructor for an new instance of TrvExpensesVisibilityManager.
    /// </summary>
    /// <param name = "_trvExpTrans">
    /// The current record instance of the <c>TrvExpensesEntity</c>.
    /// </param>
    /// <param name = "_trvExpensesForm">
    /// An instance of the calling form object.
    /// </param>
    /// <param name = "_dataSourceName">
    /// Name of the datasource on the form for which we set the visibility.
    /// </param>
    void new(Common _trvExpTrans, FormRun _trvExpensesForm, str _dataSourceName, str _headerDataSourceName = "")
    {
        this.parmTrvExpenseRecord(_trvExpTrans);
        this.parmFormInstance(_trvExpensesForm);
        this.parmDataSourceName(_dataSourceName);
        trvExpTrans = trvExpenseRecord;
        headerDataSourceName = _headerDataSourceName;

        // Get admin custom fields only once to improve efficieny.
        trvAdminCustomFieldsContainer = TrvAdminCustomFieldsCacheHelper::getTransactionAdminCustomFieldsCacheValue();
        callingObject = trvExpenseForm.args().caller();
        isCalledFromExpense = TrvExpenseHelper::isCalledFromExpense(callingObject);
        isCalledFromApClerkContext = TrvExpenseHelper::isCalledFromApClerkContext(callingObject);
        isCalledFromApprovercontext = TrvExpenseHelper::isCalledFromApproversContext(callingObject, trvExpTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldVisibilities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets visibility of transaction fields based on the setup and selected expense type.
    /// </summary>
    /// <param name = "_isVisible">
    /// Determines if we show or hide fields.
    /// </param>
    public void setFieldVisibilities(boolean _isVisible = true)
    {
        FormDataSource  formDataSource = trvExpenseForm.dataSource(dataSourceName);

        // If formDataSource is null return and skip execution of visibility logic.
        if (!formDataSource)
        {
            return;
        }

        if (!this.parmExpenseVisibilityManager())
        {
            this.setVisibilityForFieldGroup(this.getTransactionProject(), dataSourceName, this.isProjectFieldGroupRelevant());
            this.setVisibilityForFieldGroup(this.getTransactionSalesTax(), dataSourceName,trvExpTrans.isTaxApplicable());
            this.setVisibilityForAdminCustomFields(trvAdminCustomFieldsContainer, formDataSource, trvExpTrans.isEditable());
            this.setHeaderFieldVisibilities(_isVisible);
            this.enableCorrectionsOnPosting();
        }
        else
        {
            this.parmExpenseVisibilityManager().setVisibilityForProjectRelatedFields(formDataSource.table(), formDataSource, this.isProjectFieldGroupRelevant());
            this.parmExpenseVisibilityManager().setVisibilityForTaxRelatedFields(formDataSource.table(), formDataSource, trvExpTrans.isTaxApplicable());
            this.setVisibilityForAdminCustomFields(trvAdminCustomFieldsContainer, formDataSource, trvExpTrans.isEditable());
            this.setExpenseReportFieldVisibilities();
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>setHeaderFieldVisibilities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the visibility of the header fields based on the setup
    /// </summary>
    /// <param name = "_isVisible">
    /// Determines if we show or hide fields.
    /// </param>
    public void setHeaderFieldVisibilities(boolean _isVisible = true)
    {
        if (headerDataSourceName)
        {
            formDataSource headerDataSource = trvExpenseForm.dataSource(headerDataSourceName);
            this.setVisibilityForAdminCustomFields(TrvAdminCustomFieldsCacheHelper::getHeaderAdminFieldsCacheValue(), headerDataSource, trvExpTrans.isEditable());
            this.setAttestationEnableStatus(headerDataSource);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExpenseReportFieldVisibilities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the visibility of the header fields based on the setup
    /// </summary>
    /// Determines if we show or hide fields.
    /// </param>
    public void setExpenseReportFieldVisibilities()
    {
        if (headerDataSourceName)
        {
            formDataSource headerDataSource = trvExpenseForm.dataSource(headerDataSourceName);
            TrvExpTable trvExpTable = headerDataSource.cursor() as TrvExpTable;
            boolean isSubmitterOrDelegate = TrvAccessHelper::isUserSubmitterOrDelegate(headerDataSource.cursor());
            boolean isApprover = TrvAccessHelper::isUserApprover(headerDataSource.cursor());

            if ((isSubmitterOrDelegate && trvExpTable.isEditable()) || isApprover)
            {
                headerDataSource.allowEdit(true);

                if (isApprover)
                {
                    this.parmExpenseVisibilityManager().hideOrShowVisibilityForExpenseFields(headerDataSource.table(), headerDataSource, false);
                    this.parmExpenseVisibilityManager().hideOrShowVisibilityForExpenseFields(headerDataSource.table(), headerDataSource, true);
                }
                else
                {
                    this.parmExpenseVisibilityManager().setVisibilityForExpenseFieldsConsideringRequiredMode(headerDataSource.table(), headerDataSource, true);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibilityForProjectFieldsGroupForInterCompanyExpense</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets visibility of project fields group for intercompany expenses.
    /// </summary>
    public void setVisibilityForProjectFieldsGroupForInterCompanyExpense()
    {
        boolean isInterCompanyExpense, isCategoryIntegratedWithProject, isCategoryIntegratedWithProjectInIntercompanyLE;
        FormDataSource  formDataSource = trvExpenseForm.dataSource(dataSourceName);

        isCategoryIntegratedWithProject = trvExpTrans.isCategoryIntegratedWithProject();
        isInterCompanyExpense = trvExpTrans.isIntercompany();

        if(isInterCompanyExpense)
        {
            changecompany(trvExpTrans.InterCompanyLE)
            {
                isCategoryIntegratedWithProjectInIntercompanyLE = CategoryTable::find(trvExpTrans.CostType).UseInProject;
                this.setVisibilityForFieldGroup(this.getTransactionProject(), dataSourceName, isCategoryIntegratedWithProjectInIntercompanyLE, true);
            }
        }
        else
        {
            this.setVisibilityForFieldGroup(this.getTransactionProject(), dataSourceName, isCategoryIntegratedWithProject, true);
        }

        if (!isCategoryIntegratedWithProject)
        {
            if (isInterCompanyExpense)
            {
                this.setVisibilityForAdminCustomFields(trvAdminCustomFieldsContainer, formDataSource, trvExpTrans.isEditable());
                if (this.parmExpenseVisibilityManager())
                {
                    this.parmExpenseVisibilityManager().setVisibilityForProjectRelatedFields(formDataSource.table(), formDataSource, this.isProjectFieldGroupRelevant());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjectFieldsVisible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets project fields as visible, but changes the enabled status based on if they apply to the current expense.
    /// </summary>
    public void setProjectFieldsVisible()
    {
        this.setVisibilityForFieldGroup(this.getTransactionProject(), dataSourceName, true, this.isProjectFieldGroupRelevant());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjectFieldGroupRelevant</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the project fields group is applicable for the expense line.
    /// </summary>
    /// <returns>
    /// True if project category is integrated with project or the expense is intercompany, false otherwise.
    /// </returns>
    protected boolean isProjectFieldGroupRelevant()
    {
        return trvExpTrans.isIntercompany() || trvExpTrans.isCategoryIntegratedWithProject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableCorrectionsOnPosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets visibility of transaction fields for corrections on posting.
    /// </summary>
    protected void enableCorrectionsOnPosting()
    {
        FormDataSource      formDataSource = trvExpenseForm.dataSource(dataSourceName);

        boolean canBeEditedByAPClerk = isCalledFromExpense && isCalledFromApClerkContext && trvExpTrans.ApprovalStatus != TrvAppStatus::Ledger;
        boolean canBeEditByApprover = isCalledFromApproverContext && trvExpTrans.ApprovalStatus == TrvAppStatus::Pending;

        if (canBeEditedByAPClerk || canBeEditByApprover)
        {
            formDataSource.allowEdit(true);

            // disable all fields not relevant to posting.
            this.setFieldGroupReadOnly(this.getTransactionNonCorrectionOnPosting(), dataSourceName);

            // Call form method to update dimension control visibility as data source field visibility is not working.
            if (trvExpenseForm is TrvIDimensionEnabled)
            {
                TrvIDimensionEnabled dimensionForm = trvExpenseForm as TrvIDimensionEnabled;
                dimensionForm.setDimensionControlVisibility();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAttestationEnableStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the enabled status of the two attestation fields
    /// </summary>
    /// <param name = "_formDataSource">TrvExpTable form datasource</param>
    protected void setAttestationEnableStatus(FormDataSource _formDataSource)
    {
        TrvExpTable trvExpTable = _formDataSource.cursor() as TrvExpTable;
        boolean isSubmitterOrDelegate = TrvAccessHelper::isUserSubmitterOrDelegate(_formDataSource.cursor());
        boolean isApprover = TrvAccessHelper::isUserApprover(_formDataSource.cursor());

        if ((isSubmitterOrDelegate && trvExpTable.isEditable()) || isApprover)
        {
            _formDataSource.allowEdit(true);

            if (isApprover)
            {
                this.setFieldGroupOnlyEnabled(this.getHeaderApproval(), _formDataSource.name());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets field list for a field group.
    /// </summary>
    /// <param name = "_trvExpTrans">
    /// The current record instance of the <c>TrvExpensesEntity</c>.
    /// </param>
    /// <param name = "_fieldGroupName">
    /// The name of the field group.
    /// </param>
    /// <returns>
    /// A map of fields for the field group.
    /// </returns>
    Map getFieldGroup(Common _trvExpTrans, str _fieldGroupName)
    {
        return this.getFieldGroupViaTableId(_trvExpTrans.TableId, _fieldGroupName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldGroupViaTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets field list for a field group.
    /// </summary>
    /// <param name = "_tableID">
    /// The table ID of the table retrieving the field group from.
    /// </param>
    /// <param name = "_fieldGroupName">
    /// The name of the field group.
    /// </param>
    /// <returns>
    /// A map of fields for the field group.
    /// </returns>
    protected Map getFieldGroupViaTableId(TableId _tableID, str _fieldGroupName)
    {
        DictFieldGroup  fieldGroup;
        DictField       field;
        Map             fieldMap = new Map(Types::AnyType, Types::Enum);
        int             counter;

        fieldGroup = new DictFieldGroup(_tableID, _fieldGroupName);

        if (fieldGroup)
        {
            for (counter=1; counter <= fieldGroup.numberOfFields(); counter++)
            {
                field  = new DictField(_tableID, fieldGroup.field(counter));
                if (field)
                {
                    fieldMap.insert(field.id(), TrvFieldVisibility::Display);
                }
                else
                {
                    fieldMap.insert(fieldGroup.methodName(fieldGroup.field(counter)), TrvFieldVisibility::Display);
                }
            }
        }

        return fieldMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibilityForFieldGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets field visibility for a field group.
    /// </summary>
    /// <param name = "_fieldGroupMap">
    /// The field map to set visibilities.
    /// </param>
    /// <param name = "_isVisible">
    /// Determines whether to show or hide the fields.
    /// </param>
    /// <param name = "_isEnabled">
    /// Determines whether to enable or disable the fields. Set to the visibility value of the field by default.
    /// </param>
    void setVisibilityForFieldGroup(Map _fieldGroupMap, str _dataSourceName, boolean _isVisible, boolean _isEnabled = _isVisible)
    {
        FormDataObject      formDataObject;
        MapEnumerator       fieldGroupEnumerator = new MapEnumerator(_fieldGroupMap);
        FormDataSource      formDataSource = trvExpenseForm.dataSource(_dataSourceName);
        anytype             currentKey, resetValue;

        while (fieldGroupEnumerator.moveNext())
        {
            currentKey = fieldGroupEnumerator.currentKey();
            formDataObject = formDataSource.object(currentKey);
            if (formDataObject)
            {
                formDataObject.visible(_isVisible);
                formDataObject.allowEdit(_isEnabled);
            }
            else
            {
                if (_isVisible)
                {
                    this.setDisplayEditMethodVisibilitiesOnFormControl(currentKey, TrvFieldVisibility::Display, true, _isEnabled);
                }
                else
                {
                    this.setDisplayEditMethodVisibilitiesOnFormControl(currentKey, TrvFieldVisibility::DoNotDisplay, true, _isEnabled);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldGroupReadOnly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets field editability for a field group.
    /// </summary>
    /// <param name = "_fieldGroupMap">
    /// The field map to set visibilities.
    /// </param>
    void setFieldGroupReadOnly(Map _fieldGroupMap, str _dataSourceName)
    {
        FormDataObject      formDataObject;
        MapEnumerator       fieldGroupEnumerator = new MapEnumerator(_fieldGroupMap);
        FormDataSource      formDataSource = trvExpenseForm.dataSource(_dataSourceName);
        anytype             currentKey, resetValue;

        while (fieldGroupEnumerator.moveNext())
        {
            currentKey = fieldGroupEnumerator.currentKey();
            formDataObject = formDataSource.object(currentKey);
            if (formDataObject)
            {
                formDataObject.allowEdit(false);
            }
            else
            {
                this.setDisplayEditMethodVisibilitiesOnFormControl(currentKey,  TrvFieldVisibility::ReadOnly, true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldGroupOnlyEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disables all fields on the form datasource that isn't in the field group.
    /// </summary>
    /// <param name = "_fieldGroupMap">The field group containing fields that should be visible.</param>
    /// <param name = "_dataSourceName">Name of the form datasource having fields disabled.</param>
    protected void setFieldGroupOnlyEnabled(Map _fieldGroupMap, str _dataSourceName)
    {
        FormDataSource formDataSource = trvExpenseForm.dataSource(_dataSourceName);
        DictTable dictTable = new DictTable(formDataSource.table());

        for (int i = 1; i < dictTable.fieldCnt(); i++)
        {
            DictField dictField = new DictField(formDataSource.table(), dictTable.fieldCnt2Id(i));

            if (!dictField.isSystem() && !_fieldGroupMap.exists(dictField.id()))
            {
                formDataSource.object(dictField.id()).enabled(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormDataObjectVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets visibility and editability for a form data object.
    /// </summary>
    /// <param name = "_formDataObject">
    /// The form object to set visibilities.
    /// </param>
    /// <param name = "_isVisible">
    /// Determines whether to show or hide the form data object.
    /// </param>
    /// <param name = "_isEnabled">
    /// Determines whether to enable or disable the form data object. Set to the visibility value of the form data object by default.
    /// </param>
    void setFormDataObjectVisibility(FormDataObject _formDataObject, boolean _isVisible, boolean _isEnabled = _isVisible)
    {
        if (_formDataObject)
        {
            _formDataObject.visible(_isVisible);
            _formDataObject.allowEdit(_isEnabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibilityForFormControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets visibility and read only access for a form control.
    /// </summary>
    /// <param name = "_formControl">
    /// The name of the formcontrol for setting visibility.
    /// </param>
    /// <param name = "_isVisible">
    /// Determines whether to show or hide the form control.
    /// </param>
    /// <param name = "_isEnabled">
    /// Determines whether to enable or disable the form control. Set to the visibility value of the form control by default.
    /// </param>
    protected final void setVisibilityForFormControl(FormControl _formControl, boolean _isVisible, boolean _isEnabled)
    {
        if (_formControl)
        {
            _formControl.visible(_isVisible);
            _formControl.allowEdit(_isEnabled);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>