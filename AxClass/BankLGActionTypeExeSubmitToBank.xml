<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankLGActionTypeExeSubmitToBank</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BankLGActionTypeExeSubmitToBank</c> class is used to execute the submit to bank action for
///    the letter of guarantee (LG).
/// </summary>
class BankLGActionTypeExeSubmitToBank extends BankLGActionType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doAction</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Does the execution action "Submit to bank" based on the parameters.
    /// </summary>
    protected void doAction()
    {
        BankDocumentFacilityAgreementLineType   bankDocumentFacilityAgreementLineType;

        ttsbegin;

        // Update facility agreement
        bankDocumentFacilityAgreementLineType = BankDocumentFacilityAgreementLineType::construct(
            actionParms.parmDocumentAgreementLineRefRecId(),
            true,
            true);
        bankDocumentFacilityAgreementLineType.withdrawAmount(bankLGGuarantee.BankAccountCurrencyGuaranteeAmount);

        // Update LG
        bankLGGuarantee.FacilityAgreementLine    = actionParms.parmDocumentAgreementLineRefRecId();
        bankLGGuarantee.updateStatus(actionParms.getActionType());
        bankLGGuarantee.update();

        // Update LG action
        bankLGAction.ExecutionAction    = BankLGExecutionActionType::SubmitToBank;
        bankLGAction.ExecutionDateTime  = DateTimeUtil::getSystemDateTime();
        bankLGAction.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateActionParms</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the action parameters.
    /// </summary>
    /// <returns>
    ///     True if all parameters are valid; otherwise, false.
    /// </returns>
    protected boolean validateActionParms()
    {
        boolean                                 ret = super();
        BankDocumentAgreementLineRefRecId       agreementLineRecId = actionParms.parmDocumentAgreementLineRefRecId();
        CurrencyCode                            agreementCurrencyCode;
        CurrencyCode                            originDocumentCurrencyCode;
        BankDocumentFacilityAgreementLineType   bankDocumentFacilityAgreementLineType;

        // Check the currency and the balance of agreement
        if (ret)
        {
            if (agreementLineRecId)
            {
                // Check the currency
                agreementCurrencyCode       = BankDocumentFacilityAgreementLine::find(agreementLineRecId).getBankDocumentFacilityAgreement().displayCurrencyCode();
                originDocumentCurrencyCode  = bankLGGuarantee.getOriginDocument().BankLGDocumentMap::getCurrencyCode();

                if (agreementCurrencyCode == originDocumentCurrencyCode)
                {
                    bankDocumentFacilityAgreementLineType = BankDocumentFacilityAgreementLineType::construct(
                        actionParms.parmDocumentAgreementLineRefRecId(),
                        true,
                        false);

                    if (!bankDocumentFacilityAgreementLineType.anyRemainingBalance(actionParms.parmValueCur()))
                    {
                        // Facility balance is less than the requested Letter of Guarantee value amount.
                        ret = checkFailed("@SYS321801");
                    }
                }
                else
                {
                    // The currency of facility agreement and the currency of origin document are unmatch.
                    ret = checkFailed("@SYS321806");
                }
            }
            else
            {
                // The facility agreement must be specified.
                ret = checkFailed("@SYS321807");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>