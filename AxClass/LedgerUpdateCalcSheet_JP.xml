<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerUpdateCalcSheet_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Calculates the tax amount for report.
/// </summary>
public class LedgerUpdateCalcSheet_JP extends TaxCalcReportFields_JP
{
    TaxReport_JP    taxReport_JP;

    #TaxReportingCodes_JP
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static LedgerUpdateCalcSheet_JP construct()
    {
        return new LedgerUpdateCalcSheet_JP();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        LedgerUpdateCalcSheet_JP ledgerUpdateCalcSheet_JP = new LedgerUpdateCalcSheet_JP();

        LedgerUpdateCalcSheet_JP::runOnServer(ledgerUpdateCalcSheet_JP);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Update the current record in the <c>ledgerConsumptionTaxReportTrans_JP</c> table.
    /// </summary>
    /// <param name="_LedgerUpdateCalcSheet">
    /// _LedgerUpdateCalcSheet value.
    /// </param>
    static public void runOnServer(LedgerUpdateCalcSheet_JP _LedgerUpdateCalcSheet)
    {
        LedgerConsumptionTaxCalcTrans_JP    ledgerConsumptionTaxCalcTrans_JP;
        LedgerConsumptionTaxReportTrans_JP  ledgerConsumptionTaxReportTrans_JP;
        TaxReportByCode_JP                  taxReportByCodeUpdate;
        real                                reportItem3;
        real                                reportItem4;

        ttsbegin;

        TaxCalcReportFields_JP::getBadDebtLedgerDimension(_LedgerUpdateCalcSheet);

        select firstonly forupdate PeriodOfTaxationFrom, PeriodOfTaxationTo, SettlementPeriod, TypeOfDeclaration,
            CalcMethod, Apellative
                from ledgerConsumptionTaxCalcTrans_JP
                    join PeriodOfTaxationFrom, PeriodOfTaxationTo, SettlementPeriod, TypeOfDeclaration, CalcMethod, Apellative
                        from taxReportByCodeUpdate
                            where ledgerConsumptionTaxCalcTrans_JP.PeriodOfTaxationFrom  == taxReportByCodeUpdate.PeriodOfTaxationFrom
                                && ledgerConsumptionTaxCalcTrans_JP.PeriodOfTaxationTo   == taxReportByCodeUpdate.PeriodOfTaxationTo
                                && ledgerConsumptionTaxCalcTrans_JP.SettlementPeriod     == taxReportByCodeUpdate.SettlementPeriod
                                && ledgerConsumptionTaxCalcTrans_JP.TypeOfDeclaration    == taxReportByCodeUpdate.TypeOfDeclaration;

        if (ledgerConsumptionTaxCalcTrans_JP
            && ledgerConsumptionTaxCalcTrans_JP.Version < TaxRepVersion::Latest)
        {
            ledgerConsumptionTaxCalcTrans_JP.Version = TaxRepVersion::Correct;
            ledgerConsumptionTaxCalcTrans_JP.update();
        }

        ttscommit;

        if (ledgerConsumptionTaxCalcTrans_JP.Version < TaxRepVersion::Latest)
        {
            _LedgerUpdateCalcSheet.insertOrUpdateInConsTaxCalc(
                ledgerConsumptionTaxCalcTrans_JP.PeriodOfTaxationFrom,
                ledgerConsumptionTaxCalcTrans_JP.PeriodOfTaxationTo,
                ledgerConsumptionTaxCalcTrans_JP.SettlementPeriod,
                ledgerConsumptionTaxCalcTrans_JP.TypeOfDeclaration,
                ledgerConsumptionTaxCalcTrans_JP.CalcMethod,
                ledgerConsumptionTaxCalcTrans_JP.Apellative);
        }

        ledgerConsumptionTaxCalcTrans_JP = LedgerConsumptionTaxCalcTrans_JP::findByDateAndTypeOfDeclaration(taxReportByCodeUpdate.SettlementPeriod,
                                                                                                            taxReportByCodeUpdate.PeriodOfTaxationFrom,
                                                                                                            taxReportByCodeUpdate.PeriodOfTaxationTo,
                                                                                                            taxReportByCodeUpdate.TypeOfDeclaration,
                                                                                                            false);
        if (ledgerConsumptionTaxCalcTrans_JP)
        {
            reportItem3 = ledgerConsumptionTaxCalcTrans_JP.CalcItem21 + ledgerConsumptionTaxCalcTrans_JP.CalcItem22;
            reportItem4 = ledgerConsumptionTaxCalcTrans_JP.CalcItem20;

            ttsbegin;

            ledgerConsumptionTaxReportTrans_JP = LedgerConsumptionTaxReportTrans_JP::findByDateAndTypeOfDeclaration(taxReportByCodeUpdate.PeriodOfTaxationFrom,
                                                                                                                    taxReportByCodeUpdate.PeriodOfTaxationTo,
                                                                                                                    taxReportByCodeUpdate.TypeOfDeclaration,
                                                                                                                    true);
            if (ledgerConsumptionTaxReportTrans_JP)
            {
                ledgerConsumptionTaxReportTrans_JP.ReportItem3  = ledgerConsumptionTaxCalcTrans_JP.CalcItem21 + ledgerConsumptionTaxCalcTrans_JP.CalcItem22;
                ledgerConsumptionTaxReportTrans_JP.ReportItem4  = ledgerConsumptionTaxCalcTrans_JP.CalcItem20;
                ledgerConsumptionTaxReportTrans_JP.ReportItem16 = ledgerConsumptionTaxCalcTrans_JP.CalcItem7;
                ledgerConsumptionTaxReportTrans_JP.update();
            }

            ttscommit;
        }

        _LedgerUpdateCalcSheet.insertOrUpdateInConsTaxReport(taxReportByCodeUpdate.PeriodOfTaxationFrom,
                                           taxReportByCodeUpdate.PeriodOfTaxationTo,
                                           taxReportByCodeUpdate.SettlementPeriod,
                                           taxReportByCodeUpdate.TypeOfDeclaration,
                                           taxReportByCodeUpdate.CalcMethod,
                                           taxReportByCodeUpdate.Apellative);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>