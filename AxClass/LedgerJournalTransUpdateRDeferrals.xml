<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTransUpdateRDeferrals</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class LedgerJournalTransUpdateRDeferrals extends LedgerJournalTransUpdate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
public boolean check(LedgerJournalTrans         _ledgerJournalTrans,
                         boolean                    _checkNoSettlement = true,
                         LedgerVoucher              _ledgerVoucher = null,
                         LedgerPostingMessageLog    _ledgerPostingMessageCollection = null)
    {
        boolean                       ret = true;
        RDeferralsOperationType       rDeferralsOperationType;
        LedgerJournalTrans_RDeferrals ledgerJournalTrans_RDeferrals = LedgerJournalTrans_RDeferrals::find(_ledgerJournalTrans.RecId);

        rDeferralsOperationType = RDeferralsOperationType::construct(ledgerJournalTrans_RDeferrals.TransType,
                                                                     _ledgerJournalTrans,
                                                                     ledgerJournalTrans_RDeferrals.getTransDate(_ledgerJournalTrans),
                                                                     ledgerJournalTrans_RDeferrals.BookId);
        ret = rDeferralsOperationType.check();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the main account of the specified journal lines.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// A <c>LedgerJournalTrans</c> record.
    /// </param>
    /// <returns>
    /// The main account of the specified journal lines.
    /// </returns>
    public LedgerDimensionDefaultAccount ledgerDimension(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTrans_RDeferrals ledgerJournalTrans_RDeferrals = LedgerJournalTrans_RDeferrals::find(_ledgerJournalTrans.RecId);

        return ledgerJournalTrans_RDeferrals.LedgerDimension ?
               ledgerJournalTrans_RDeferrals.LedgerDimension :
               RDeferralsLedgerAccounts::deferralsLedgerDim(_ledgerJournalTrans.parmAccount(),
                                                            ledgerJournalTrans_RDeferrals.TransType,
                                                            ledgerJournalTrans_RDeferrals.BookId,
                                                            _ledgerJournalTrans.PostingProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
public void updateNow(LedgerVoucher      _ledgerVoucher,
                          LedgerPostingType  _posting,
                          LedgerJournalTrans _ledgerJournalTrans,
                          LedgerJournalTrans _originalLedgerJournalTrans,
                          boolean            _interCompany = false,
                          boolean            _reversalsMayExist = true,
                          boolean            _isDueToDueFromAccount =  false
                          )
    {
        LedgerVoucherTransObject      transObject;
        LedgerJournalTrans_RDeferrals ledgerJournalTrans_RDeferrals = LedgerJournalTrans_RDeferrals::find(_ledgerJournalTrans.RecId);
        CurrencyExchangeHelper        exchHelper;
        LedgerDimensionDefaultAccount defaultLedgerDimension;
        LedgerDimensionAccount        mergedLedgerDimension;

        RDeferralsOperationType  rDeferralsOperationType = RDeferralsOperationType::construct(ledgerJournalTrans_RDeferrals.TransType,
                                                                     _ledgerJournalTrans,
                                                                     ledgerJournalTrans_RDeferrals.getTransDate(_ledgerJournalTrans),
                                                                     ledgerJournalTrans_RDeferrals.BookId);

        if (this.check(_ledgerJournalTrans))
        {
            ttsbegin;

            if (rDeferralsOperationType.checkPostTrans())
                RDeferralsTrans::createTrans(_ledgerJournalTrans, _ledgerVoucher);

            exchHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                ledgerJournalTrans_RDeferrals.getTransDate(_ledgerJournalTrans));
            exchHelper.parmExchangeRate1(_ledgerJournalTrans.ExchRate);
            exchHelper.parmExchangeRate2(_ledgerJournalTrans.ExchRateSecond);

            defaultLedgerDimension = ledgerJournalTrans_RDeferrals.LedgerDimension ?
                                     ledgerJournalTrans_RDeferrals.LedgerDimension :
                                     RDeferralsLedgerAccounts::deferralsLedgerDim(_ledgerJournalTrans.parmAccount(),
                                                                                  ledgerJournalTrans_RDeferrals.TransType,
                                                                                  ledgerJournalTrans_RDeferrals.BookId,
                                                                                  _ledgerJournalTrans.PostingProfile);

            mergedLedgerDimension = this.mergeLedgerDimensionAndDefaultDimension(defaultLedgerDimension, _ledgerJournalTrans.DefaultDimension);

            transObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                         _ledgerVoucher.findLedgerVoucherObject(),
                                         LedgerJournalTransUpdateRDeferrals::getPostingType(_ledgerJournalTrans.AmountCurDebit != 0),
                                         mergedLedgerDimension,
                                         _ledgerJournalTrans.CurrencyCode,
                                         _ledgerJournalTrans.amount(),
                                         exchHelper);

            transObject.parmUseTaxParentTaxUncommitted(taxVoucherService.parmTaxObligationCompany() == TaxObligationCompany::Source);
            transObject.parmTaxParentReferenceTableId(_ledgerJournalTrans.TableId);
            transObject.parmTaxParentReferenceRecId(_ledgerJournalTrans.RecId);
            transObject.parmQuantity(_ledgerJournalTrans.Qty);
            transObject.parmTransTxt(_ledgerJournalTrans.Txt);

            _ledgerVoucher.addTrans(transObject);

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPostingType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger posting type for the General Ledger transaction.
    /// </summary>
    /// <param name="_amountInDebit">
    /// true, if the General journal amount is in debit amount field; otherwise, in credit amount field.
    /// </param>
    /// <returns>
    /// The ledger posting type for the General Ledger transaction.
    /// </returns>
    public static LedgerPostingType getPostingType(boolean  _amountInDebit)
    {
        if (_amountInDebit)
            return LedgerPostingType::DeferralsDebit_RU;
        return LedgerPostingType::DeferralsCredit_RU;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>