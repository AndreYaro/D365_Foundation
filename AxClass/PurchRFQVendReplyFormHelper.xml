<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQVendReplyFormHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchRFQVendReplyFormHelper</c> is a helper class for the PurchRFQVendReply form.
/// </summary>
internal final class PurchRFQVendReplyFormHelper extends PurchRFQVendorReplyFormHelper
{
    private static boolean isCurrentUserProcurementAgent;
    private FormFunctionButtonControl purchRFQReplyLineDocuAttachment;
    private FormFunctionButtonControl purchRFQReplyDocuAttachment;
    private FormCheckBoxControl purchRFQReplyIsSealed;
    private FormTabPageControl biddingInstructionTabPage;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    internal static PurchRFQVendReplyFormHelper construct(boolean _isCurrentUserProcurementAgent)
    {
        isCurrentUserProcurementAgent = _isCurrentUserProcurementAgent;

        return new PurchRFQVendReplyFormHelper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    internal void init(
        FormRun _formRun,
        PurchRFQReplyTable _purchRFQReplyTable,
        PurchRFQCaseTable _purchRFQCaseTable,
        PurchRFQTable _purchRFQTable,
        FormDataSource _purchRFQReplyTable_ds,
        FormDataSource _purchRFQReplyLine_ds)
    {
        super(_formRun, _purchRFQReplyTable, _purchRFQCaseTable, _purchRFQTable, _purchRFQReplyTable_ds, _purchRFQReplyLine_ds);

        this.updateDesign(
            _purchRFQReplyTable,
            _purchRFQCaseTable,
            _purchRFQTable,
            _purchRFQReplyTable_ds,
            _purchRFQReplyLine_ds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the design of the form based on whether it is opened by the procurement agent or
    /// the vendor or the form is just being reloaded by the same user.
    /// </summary>
    /// <param name = "_purchRFQReplyTable"> <c>PurchRFQReplyTable</c> table record </param>
    /// <param name = "_purchRFQCaseTable"> <c>PurchRFQCaseTable</c> table record </param>
    /// <param name = "_purchRFQTable"> <c>PurchRFQTable</c> table record </param>
    /// <param name = "_purchRFQReplyTable_ds"> <c>PurchRFQReplyTable</c> table form datasource </param>
    /// <param name = "_purchRFQReplyLine_ds"> <c>PurchRFQReplyLine</c> table form datasource </param>

    [Hookable(false), Wrappable(false)]
    internal void updateDesign(
        PurchRFQReplyTable _purchRFQReplyTable,
        PurchRFQCaseTable _purchRFQCaseTable,
        PurchRFQTable _purchRFQTable,
        FormDataSource _purchRFQReplyTable_ds,
        FormDataSource _purchRFQReplyLine_ds)
    {
        var rfqIsSealedAndUserCanStartBid = _purchRFQCaseTable.IsSealed == NoYes::Yes && this.canCurrentUserStartSealedBid();
       
        if (isCurrentUserProcurementAgent
            && !_purchRFQReplyTable.isEditByProcurementAgentAllowed()
            && _purchRFQReplyTable.ReplyProgressStatus != PurchRFQReplyProgressStatus::ProcurementAgentEditing)
        {
            this.openBidFormReadOnlyForProcurementAgent(_purchRFQReplyTable_ds, _purchRFQReplyLine_ds);
        }
        else if (rfqIsSealedAndUserCanStartBid)
        {
            this.openBidFormReadOnlyForVendor(_purchRFQCaseTable, _purchRFQReplyTable);
        }
        else
        {
            this.toggleReplyLineFields(_purchRFQTable, _purchRFQCaseTable);
            this.setFieldsEditability(_purchRFQTable, _purchRFQReplyTable, _purchRFQReplyTable_ds);
            this.setFieldsVisibility(_purchRFQTable, _purchRFQReplyTable_ds);
            this.setActionPaneButtonsVisibility(_purchRFQTable, _purchRFQCaseTable, _purchRFQReplyTable);
        }

        var sealedBid = _purchRFQCaseTable.BidType == PurchRFQBidType::Sealed;
        purchRFQReplyEncryptionAuditLog.visible(sealedBid);
        biddingInstructionTabPage.visible(sealedBid && rfqIsSealedAndUserCanStartBid && PurchRFQReplyStartBid.isVisible());

        this.showHideReplyFieldsGroups(_purchRFQCaseTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form control variables to the form controls of the calling form
    /// </summary>
    [Hookable(false), Wrappable(false)]
    protected final void initControls()
    {
        super();

        purchRFQReplyDocuAttachment = formRun.control(formRun.controlId(formControlStr(PurchRFQVendReply, purchRFQReplyDocuAttachment))) as FormFunctionButtonControl;
        purchRFQReplyLineDocuAttachment = formRun.control(formRun.controlId(formControlStr(PurchRFQVendReply, purchRFQReplyLineDocuAttachment))) as FormFunctionButtonControl;
        purchRFQReplyIsSealed = formRun.control(formRun.controlId(formControlStr(PurchRFQVendReply, HeaderView_PurchRFQCaseTable_IsSealed))) as FormCheckBoxControl;
        biddingInstructionTabPage = formRun.control(formRun.controlId(formControlStr(PurchRFQVendReply, BiddingInstructionTabPage))) as FormTabPageControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toggleReplyLineFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method determines whether the requested line values are displayed or the reply line values are displayed
    /// based on whether the bid invitation is new and active.
    /// </summary>
    /// <param name = "_purchRFQTable"> <c>PurchRFQTable</c> table record </param>
    /// <param name = "_purchRFQCaseTable"> <c>PurchRFQCaseTable</c> table record </param>
    [Hookable(false), Wrappable(false)]
    internal void toggleReplyLineFields(PurchRFQTable _purchRFQTable, PurchRFQCaseTable _purchRFQCaseTable)
    {
        boolean isNewInvitationAndActive = _purchRFQTable.isNewInvitation() && !_purchRFQCaseTable.isRFQExpired();

        requestedLineValues.visible(isNewInvitationAndActive);
        replyLineValues.visible(!isNewInvitationAndActive);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setActionPaneButtonsVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the visible property of the action pane buttons on the <c>PurchRFQVendReply</c> form
    /// </summary>
    /// <param name = "_purchRFQTable"> <c>PurchRFQTable</c> table record </param>
    /// <param name = "_purchRFQCaseTable"> <c>PurchRFQCaseTable</c> table record </param>
    /// <param name = "_purchRFQReplyTable"> <c>PurchRFQReplyTable</c> table record </param>
    [Hookable(false), Wrappable(false)]
    internal void setActionPaneButtonsVisibility(PurchRFQTable _purchRFQTable, PurchRFQCaseTable _purchRFQCaseTable, PurchRFQReplyTable _purchRFQReplyTable)
    {      
        PurchRFQReplyStartBid.visible(_purchRFQReplyTable.ReplyProgressStatus == PurchRFQReplyProgressStatus::NotStarted
                                      && !_purchRFQCaseTable.isRFQExpiredForCurrentUser()
                                      && ((!_purchRFQTable.IsBidInProgress
                                            && _purchRFQCaseTable.BidType == PurchRFQBidType::Open)
                                          || (_purchRFQCaseTable.BidType == PurchRFQBidType::Sealed
                                              && this.canCurrentUserStartSealedBid()
                                              && _purchRFQReplyTable.ReplyProgressStatus != PurchRFQReplyProgressStatus::SubmittedByVendor)
                                          || (isCurrentUserProcurementAgent
                                              && _purchRFQCaseTable.IsSealed == NoYes::No)));

        super(_purchRFQTable,_purchRFQCaseTable, _purchRFQReplyTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineFieldsEditability</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    internal void setLineFieldsEditability(PurchRFQLine _purchRFQLine, FormDataSource _purchRFQReplyLine_ds, FormDataSource _purchRFQLine_ds)
    {
        boolean shouldLineEditable = _purchRFQLine.Status <=  PurchRFQStatus::Rejected
                                    || (_PurchRFQLine.Status ==  PurchRFQStatus::Received
                                        && isCurrentUserProcurementAgent);
        
        _purchRFQReplyLine_ds.allowEdit(isEditAllowed && shouldLineEditable);
        _purchRFQLine_ds.object(fieldNum(PurchRFQLine, ItemName)).allowEdit(_purchRFQLine.IsAlternate);        
    }

]]></Source>
			</Method>
			<Method>
				<Name>navigateBackToList</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    internal void navigateBackToList(Common _record)
    {
        if (_record)
        {
            formRun.close();
        }
        else
        {
            formRun.viewOptionHelper().setViewOption(FormViewOption::Grid);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCurrentUserStartSealedBid</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method determines if the current user has the security rights to open the Sealed bid form.
    /// </summary>
    /// <returns> true if user can start a sealed bid, otherwise false </returns>
    [Hookable(false), Wrappable(false)]
    internal boolean canCurrentUserStartSealedBid()
    {
        return (isCurrentUserProcurementAgent || SecurityRights::newUser(curUserId()).isSystemAdministrator()) ? false : true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openBidFormReadOnlyForVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called when the bid form needs to be opened in read only mode for a vendor
    /// </summary>
    /// <param name = "_purchRFQCaseTable"> The <c>PurchRFQCaseTable</c> table record </param>
    private void openBidFormReadOnlyForVendor(
        PurchRFQCaseTable _purchRFQCaseTable,
        PurchRFQReplyTable _purchRFQReplyTable)
    {
        formRun.viewEditModeHelper().setViewEditMode(ViewEditMode::View);
        boolean isRFQExpired = _purchRFQCaseTable.isRFQExpiredForCurrentUser();
        boolean isNewActiveRFQReplyForVendor = !isRFQExpired && _purchRFQReplyTable.ReplyProgressStatus != PurchRFQReplyProgressStatus::SubmittedByVendor;

        PurchRFQReplyStartBid.visible(isNewActiveRFQReplyForVendor);
        PurchRFQReplyDecline.visible(isNewActiveRFQReplyForVendor);

        PurchRFQReplyRecall.visible(
            _purchRFQReplyTable.ReplyProgressStatus == PurchRFQReplyProgressStatus::SubmittedByVendor
            && !isRFQExpired);

        PurchRFQReplyReset.visible(false);
        PurchRFQReplyLineReset.visible(false);
        PurchRFQLineAddAlternate.visible(false);
        PurchRFQLineRemoveAlternate.visible(false);
        PurchRFQReplySend.visible(false);
        CompleteQuestionnaire.visible(false);

        this.showHideEditButton(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openBidFormReadOnlyForProcurementAgent</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called when the bid form needs to be opened in read only mode for a procurement agent
    /// </summary>
    /// <param name = "_purchRFQReplyTable_ds"> <c>PurchRFQReplyTable</c> table form datasource </param>
    /// <param name = "_purchRFQReplyLine_ds"> <c>PurchRFQReplyLine</c> table form datasource </param>
    private void openBidFormReadOnlyForProcurementAgent(FormDataSource _purchRFQReplyTable_ds, FormDataSource _purchRFQReplyLine_ds)
    {
        requestedLineValues.visible(false);
        replyLineValues.visible(false);

        purchRFQReplyStartBid.visible(false);
        purchRFQReplyDecline.visible(False);
        purchRFQReplyRecall.visible(false);
        purchRFQReplyReset.visible(false);
        purchRFQReplyLineReset.visible(false);
        purchRFQLineAddAlternate.visible(false);
        purchRFQLineRemoveAlternate.visible(false);
        purchRFQReplySend.visible(false);
        completeQuestionnaire.visible(false);

        purchRFQReplyTable_ValidityDateStart.visible(false);
        purchRFQReplyTable_ValidityDateEnd.visible(false);

        _purchRFQReplyTable_ds.allowEdit(false);
        _purchRFQReplyLine_ds.allowEdit(false);

        this.showHideEditButton(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showHideReplyFieldsGroups</Name>
				<Source><![CDATA[
    private void showHideReplyFieldsGroups(PurchRFQCaseTable _purchCaseRFQTable)
    {
        replyPayments.visible(!_purchCaseRFQTable.IsSealed);
        replyDeliveryDetails.visible(!_purchCaseRFQTable.IsSealed);
        replyValidity.visible(!_purchCaseRFQTable.IsSealed);
        replyAmountsGroup.visible(!_purchCaseRFQTable.IsSealed);
        replyDetailsGroup.visible(!_purchCaseRFQTable.IsSealed);
        replyLineLeadTime.visible(!_purchCaseRFQTable.IsSealed);
        replyLineValid.visible(!_purchCaseRFQTable.IsSealed);
        replyLineValues.visible(!_purchCaseRFQTable.IsSealed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableDisablePurchRFQReplyDocuAttachmentButtons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the enabled property of the attachment buttons on the <c>PurchRFQVendReply</c> form
    /// </summary>
    /// <param name = "_purchRFQCaseTable">The <c>PurchRFQCaseTable</c> table record</param>
    [Hookable(false), Wrappable(false)]
    internal final void enableDisablePurchRFQReplyDocuAttachmentButtons(PurchRFQCaseTable _purchRFQCaseTable, PurchRFQReplyTable _purchRFQReplyTable)
    {
        boolean attachButtonsEnabled = (!(_purchRFQCaseTable.IsSealed == NoYes::Yes && _purchRFQCaseTable.BidType == PurchRFQBidType::Sealed))
                                        && _purchRFQReplyTable.ReplyProgressStatus != PurchRFQReplyProgressStatus::NotStarted;

        purchRFQReplyDocuAttachment.enabled(attachButtonsEnabled);
        purchRFQReplyLineDocuAttachment.enabled(attachButtonsEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIsSealedVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the visible property of the <c>IsSealed</c> field on the <c>PurchRFQVendReply</c> form
    /// </summary>
    /// <param name = "_bidType">The Bid type value of the record</param>
    [Hookable(false), Wrappable(false)]
    internal final void setIsSealedVisibility(PurchRFQBidType _bidType)
    {
        purchRFQReplyIsSealed.visible(_bidType == PurchRFQBidType::Sealed);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>