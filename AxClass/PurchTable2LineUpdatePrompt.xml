<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchTable2LineUpdatePrompt</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchTable2LineUpdatePrompt extends SalesPurchTableToLineUpdatePrompt
{
    PriceDiscUpdatePriceDisc    updatePriceDiscMode;
    DialogField                 updatePriceDiscDialogField;
    NoYes                       updatePricedisc;
    Set                         priceDiscUpdateTriggers;
    container                   packedPriceDiskFieldList;
    boolean                     priceDiscChangePolicyExistOnLine;
    NoYes                       alwaysPromptPriceDiscUpdate;
    DialogButton                copyTaxGroupToMarkupTrans;

    #define.CurrentVersion(5)
    #localmacro.CurrentList
        packedFieldList,
        packedPreviousAnswers,
        sourceTable,
        updatePriceDiscMode,
        packedPriceDiskFieldList,
        priceDiscChangePolicyExistOnLine,
        updatePricedisc,
        copyTaxGroupToMarkupTrans
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountingDistributionTemplateEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the <c>AccountingDistributionTemplate</c> field should be added to the parameter prompt.
    /// </summary>
    /// <returns>
    ///     true if the field should be added; otherwise, false.
    /// </returns>
    public boolean accountingDistributionTemplateEnabled()
    {
        boolean     ret;
        PurchTable  localPurchTable = sourceTable as PurchTable;
        PurchLine   localPurchLine;

        if (localPurchTable.AccountingDistributionTemplate != localPurchTable.orig().AccountingDistributionTemplate)
        {
            while select localPurchLine
                where localPurchLine.PurchId == localPurchTable.PurchId
            {
                if (localPurchLine.canApplyAllocationOrDistributionTemplate())
                {
                    ret = true;
                    break;
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNewFieldsToDialog</Name>
				<Source><![CDATA[
    protected void addNewFieldsToDialog(
                                    DialogGroup              _dialogGroup,
                                    Dialog                   _dialog,
                                    boolean                  _refreshable = true)
    {
        if (priceDiscChangePolicyExistOnLine)
        {
            updatePriceDiscDialogField = PriceDiscResultFields::promptPriceDiscPolicyUpdate(_dialogGroup,
                                                                                          _dialog,
                                                                                          updatePriceDiscMode,
                                                                                          _refreshable);

            updatePriceDiscDialogField.enabled(alwaysPromptPriceDiscUpdate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNonPromptFieldToDialog</Name>
				<Source><![CDATA[
    protected boolean addNonPromptFieldToDialog(TradeTable2LineUpdate _tradeTable2LineUpdate, FieldId _fieldId)
    {
        boolean addField;

        addField = (_tradeTable2LineUpdate == TradeTable2LineUpdate::Always &&
                      priceDiscUpdateTriggers.in(_fieldId));

        if (addField)
        {
            alwaysPromptPriceDiscUpdate = NoYes::Yes;
        }

        return addField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogSelectCtrl</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the price discount policy section of the dialog box.
    /// </summary>
    public void dialogSelectCtrl()
    {
        SetEnumerator           priceDiscUpdateTriggersEnumerator;
        DialogField             dialogField;
        RefFieldId              fieldId;

        super();

        if (priceDiscChangePolicyExistOnLine && updatePriceDiscDialogField != null)
        {
            if (alwaysPromptPriceDiscUpdate == NoYes::Yes)
            {
                updatePricedisc = alwaysPromptPriceDiscUpdate;
            }
            else
            {
                priceDiscUpdateTriggersEnumerator = priceDiscUpdateTriggers.getEnumerator();
                while (priceDiscUpdateTriggersEnumerator.moveNext())
                {
                    fieldId = priceDiscUpdateTriggersEnumerator.current();
                    if (fieldList.exists(fieldId))
                    {
                        dialogField = fieldList.lookup(fieldId);
                        updatePricedisc = dialogField.value();
                        updatePriceDiscDialogField.enabled(updatePricedisc);
                        if (updatePricedisc == NoYes::Yes)
                        {
                            break;
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existNonPromptDialogFields</Name>
				<Source><![CDATA[
    protected boolean existNonPromptDialogFields()
    {
        return priceDiscChangePolicyExistOnLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>extendedPrompt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Launches the main dialog box, and if it is not canceled, the dialog box for the price discount
    ///    policy.
    /// </summary>
    /// <returns>
    ///    true if neither of the dialog boxes are canceled; otherwise, false.
    /// </returns>
    public boolean extendedPrompt()
    {
        boolean ret = this.prompt();
        PurchTable purchTable = sourceTable as PurchTable;

        if (ret
            && updatePricedisc == NoYes::Yes
            && (priceDiscChangePolicyExistOnLine
            &&  updatePriceDiscMode == PriceDiscUpdatePriceDisc::UpdateIndividual))
        {
            ret = purchTable.PriceDiscResultFields::updateLinePolicies();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the field for the specified <c>FieldId</c> value is enabled on the parameters
    /// form.
    /// </summary>
    /// <param name="_fieldId">
    /// The <c>FieldId</c> value to check.
    /// </param>
    /// <returns>
    /// true if the field is enabled; otherwise, false.
    /// </returns>
    public boolean fieldEnabled(FieldId _fieldId)
    {
        boolean ret;

        switch (_fieldId)
        {
            case fieldNum(PurchTable, AccountingDistributionTemplate) :
                ret = PurchTable2LineParameters::fieldEnabled(_fieldId)
                      && this.accountingDistributionTemplateEnabled();
                break;

            default : ret = PurchTable2LineParameters::fieldEnabled(_fieldId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdToInternalFieldId_W</Name>
				<Source><![CDATA[
    protected FieldId fieldIdToInternalFieldId_W(FieldId _fieldId, TableId _tableId = 0)
    {
        return PurchTable::fieldIdToInternalFieldId_W(_fieldId, _tableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldsToPromptFor</Name>
				<Source><![CDATA[
    protected Counter fieldsToPromptFor()
    {
        Counter                 fieldsToPromptFor = 0;

        fieldsToPromptFor = super();

        if (priceDiscChangePolicyExistOnLine && this.priceDiscFieldsToUpdate())
        {
            fieldsToPromptFor++;
        }

        return fieldsToPromptFor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewFieldsFromDialog</Name>
				<Source><![CDATA[
    protected void getNewFieldsFromDialog()
    {
        if (priceDiscChangePolicyExistOnLine
            && updatePriceDiscDialogField != null)
        {
            updatePriceDiscMode = updatePriceDiscDialogField.value();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerFieldId_W</Name>
				<Source><![CDATA[
    protected FieldId headerFieldId_W(FieldId _internalFieldId)
    {
        return PurchTable::internalFieldIdToFieldId_W(_internalFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerTableId</Name>
				<Source><![CDATA[
    protected TableId headerTableId()
    {
        return tableNum(PurchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerTableId_W</Name>
				<Source><![CDATA[
    protected TableId headerTableId_W(FieldId _internalFieldId)
    {
        return PurchTable::internalFieldIdToTableId_W(_internalFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerToLineFieldIdList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the fields that are supported by the table-to-line functionality of the module.
    /// </summary>
    /// <returns>
    /// A container of fields that are supported by the table-to-line functionality of the module.
    /// </returns>
    public container headerToLineFieldIdList()
    {
        container fList = PurchTable2LineParameters::header2LineFieldIdList();

        if (PurchTable2LineParametersInitTable2LineUpdateFlight::instance().isEnabled() && PurchParameters::find().IsSupplierShipmentDatesEnabled)
        {
            fList = PurchTable2LineParameters::addPurchTableVendorDispatchDateFields(fList);
        }

        return fList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initpriceDiscUpdateTriggers</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initiates a list of the header fields which trigger an update of the price and the discount on the
    ///    related body lines.
    /// </summary>
    private void initpriceDiscUpdateTriggers()
    {
        priceDiscUpdateTriggers = new Set(Types::Integer);

        priceDiscUpdateTriggers.add(fieldNum (PurchTable, OrderAccount));
        priceDiscUpdateTriggers.add(fieldNum (PurchTable, DeliveryDate));
        priceDiscUpdateTriggers.add(fieldNum (PurchTable, InventSiteId));
        priceDiscUpdateTriggers.add(fieldNum (PurchTable, InventLocationId));
        priceDiscUpdateTriggers.add(fieldNum (PurchTable, PriceGroupId));
        priceDiscUpdateTriggers.add(fieldNum (PurchTable, LineDisc));

        if (PurchParameters::find().IsSupplierShipmentDatesEnabled)
        {
            priceDiscUpdateTriggers.add(fieldNum (PurchTable, RequestedShipDate));
            priceDiscUpdateTriggers.add(fieldNum (PurchTable, ShipCalendarId));
            priceDiscUpdateTriggers.add(fieldNum (PurchTable, DlvMode));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDependentFieldChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a field is changed beyond the usual new != orig comparison
    /// </summary>
    /// <param name="_fieldId">
    /// The field to be checked.
    /// </param>
    /// <returns>
    /// true if the field should be considered changed; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This allows for each module to check for changes to dependent fields.
    /// </remarks>
    protected boolean isDependentFieldChanged(FieldId _fieldId)
    {
        if (_fieldId == fieldNum(PurchTable, InventLocationId))
        {
            if (this.isFieldChanged(fieldNum(PurchTable, InventSiteId)))
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the individual part of a field array has changed.
    /// </summary>
    /// <param name="_arrayFieldId">
    /// The field to be checked.
    /// </param>
    /// <returns>
    /// true if the field value changed; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This must be done by each module on the concrete table. The field comparison will not work directly
    /// on the <c>sourceTable</c>, as xRecord.orig().(fieldId) does not compile.
    /// </remarks>
    protected boolean isFieldChanged(FieldId _arrayFieldId)
    {
        PurchTable purchTable = sourceTable as PurchTable;
        TableId         realTableId = this.headerTableId_W(_arrayFieldId);
        FieldId         realFieldId = this.headerFieldId_W(_arrayFieldId);
        PurchTable_W    purchTable_W;
        PurchTable_RU   purchTable_RU;
        PurchTable_BR   purchTable_BR;

        if (realTableId == tableNum(PurchTable_W))
        {
            purchTable_W = purchTable.purchTable_W();
            return purchTable_W.(realFieldId) != purchTable_W.orig().(realFieldId);
        }
        // <GEERU>
        else if (realTableId == tableNum(PurchTable_RU))
        {
            purchTable_RU = purchTable.purchTable_RU();
            return purchTable_RU.(realFieldId) != purchTable_RU.orig().(realFieldId);
        }
        // </GEERU>
        // <GBR>
        else if (realTableId == tableNum(PurchTable_BR))
        {
            purchTable_BR = purchTable.purchTable_BR();
            return purchTable_BR.(realFieldId) != purchTable_BR.orig().(realFieldId);
        }
        // </GBR>

        return purchTable.(_arrayFieldId) != purchTable.orig().(_arrayFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lines2Update</Name>
				<Source><![CDATA[
    protected boolean lines2Update()
    {
        PurchTable purchTable = sourceTable as PurchTable;

        return purchTable.existPurchLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFieldObject</Name>
				<Source><![CDATA[
    protected SalesPurchTableToLineField newFieldObject(FieldId _fieldId)
    {
        return PurchTable2LineField::construct(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        packedFieldList          = updateFields.pack();
        packedPriceDiskFieldList = priceDiscUpdateTriggers.pack();
        this.packPreviousAnswers();
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopyTaxGroupToMarkupTrans</Name>
				<Source><![CDATA[
    public DialogButton parmCopyTaxGroupToMarkupTrans(DialogButton _copyTaxGroupToMarkupTrans = copyTaxGroupToMarkupTrans)
    {
        copyTaxGroupToMarkupTrans = _copyTaxGroupToMarkupTrans;

        return copyTaxGroupToMarkupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceTable</Name>
				<Source><![CDATA[
    public Common parmSourceTable(Common _sourceTable = null)
    {
        PurchTable purchTable = super(_sourceTable);

        if (_sourceTable)
        {
            this.initpriceDiscUpdateTriggers();
            priceDiscChangePolicyExistOnLine = purchTable.priceDiscChangePolicyExistOnLine();
        }

        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceDiscFieldsToUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether any header fields that are configured to always update the lines are of the type
    ///    that triggers a recalculation of the prices or discounts.
    /// </summary>
    /// <returns>
    ///    true if any of the always-update lines have fields that are changed and are subject to trigger a
    ///    price or discount recalculation; otherwise, false.
    /// </returns>
    protected boolean priceDiscFieldsToUpdate()
    {
        boolean                 priceDiscFieldsToUpdate;
        ListEnumerator          purchTable2LineUpdateFieldsEnumerator;
        PurchTable2LineField    purchTable2LineField;

        purchTable2LineUpdateFieldsEnumerator = updateFields.getEnumerator();

        while (purchTable2LineUpdateFieldsEnumerator.moveNext() && !priceDiscFieldsToUpdate)
        {
            purchTable2LineField = purchTable2LineUpdateFieldsEnumerator.current();

            if (priceDiscUpdateTriggers.in(purchTable2LineField.parmFieldId())
                && purchTable2LineField.parmUpdateLines())
            {
                priceDiscFieldsToUpdate = true;
                break;
            }
        }

        return priceDiscFieldsToUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        PurchTable2LineUpdate   purchTable2LineUpdate;

        if (!this.fieldsToUpdate())
            return;

        purchTable2LineUpdate = PurchTable2LineUpdate::construct(this);
        purchTable2LineUpdate.parmUpdatePricedisc(updatePricedisc);
        purchTable2LineUpdate.parmUpdatePriceDiscMode(updatePriceDiscMode);
        purchTable2LineUpdate.parmCopyTaxGroupToMarkupTrans(copyTaxGroupToMarkupTrans);

        var purchOrderProcessState = PurchOrderProcessState::instance();
        
        try
        {
            purchOrderProcessState.parmIsHeaderToLinesUpdateInProcess(true);
            purchTable2LineUpdate.update();
        }
        finally
        {
            purchOrderProcessState.parmIsHeaderToLinesUpdateInProcess(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        #localmacro.ParmList3
            packedFieldList,
            sourceTable,
            updatePriceDiscMode,
            packedPriceDiskFieldList,
            priceDiscChangePolicyExistOnLine,
            updatePricedisc
        #endmacro

        #localmacro.ParmList4
            packedFieldList,
            sourceTable,
            updatePriceDiscMode,
            packedPriceDiskFieldList,
            priceDiscChangePolicyExistOnLine,
            updatePricedisc,
            copyTaxGroupToMarkupTrans
        #endmacro

        boolean         ret;
        Integer         version    = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                ret = true;
                break;
            case 3:
                [version, #ParmList3] = _packedClass;
                ret = true;
                break;

            case 4:
                [version, #ParmList4] = _packedClass;
                ret = true;
                break;

            default:
                ret = false;
        }

        if (ret)
        {
            //When moving data from server to client, we need to copy all updateFields list,
            //because dialog() is using it. Otherwise, it is better to move only checkbox results in order not
            //to overwrite changed settings in updateFields
            if (!updateFields)
            {
                updateFields = List::create(packedFieldList);
                priceDiscUpdateTriggers     = Set::create(packedPriceDiskFieldList);
            }
            else
            {
                this.unpackPreviousAnswers();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchTable2LineUpdatePrompt construct()
    {
        return new PurchTable2LineUpdatePrompt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS62838";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newExecuteExtendedPrompt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>PurchTable2LineUpdatePrompt</c> class and executes the <c>extendedPrompt</c> instance method.
    /// </summary>
    /// <param name="_purchTable">
    ///    A buffer of the <c>PurchTable</c> table.
    /// </param>
    /// <param name="_copyTaxGroupToMarkupTrans">
    ///    A DialogButton type.
    /// </param>
    /// <returns>
    ///    An initiated instance the <c>PurchTable2LineUpdatePrompt</c> class if any fields are to be updated; otherwise,
    ///    a nulled object of the <c>PurchTable2LineUpdatePrompt</c> class.
    /// </returns>
    public static PurchTable2LineUpdatePrompt newExecuteExtendedPrompt(
        PurchTable _purchTable,
        DialogButton _copyTaxGroupToMarkupTrans)
    {
        PurchTable2LineUpdatePrompt purchTable2LineUpdatePrompt = PurchTable2LineUpdatePrompt::newFromPurchTable(_purchTable);
        if (purchTable2LineUpdatePrompt.fieldsToUpdate() || purchTable2LineUpdatePrompt.fieldsToPromptFor())
        {
            purchTable2LineUpdatePrompt.parmCopyTaxGroupToMarkupTrans(_copyTaxGroupToMarkupTrans);

            purchTable2LineUpdatePrompt.parmExtendedPromptReturnValue(purchTable2LineUpdatePrompt.extendedPrompt());

            if (!purchTable2LineUpdatePrompt.fieldsToUpdate())
            {
                purchTable2LineUpdatePrompt = null;
            }
        }
        else
        {
            purchTable2LineUpdatePrompt = null;
        }

        return purchTable2LineUpdatePrompt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPurchTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>PurchTable2LineUpdatePrompt</c> class.
    /// </summary>
    /// <param name="_purchTable">
    ///    A buffer of the <c>PurchTable</c> table.
    /// </param>
    /// <returns>
    ///    An instance of the <c>PurchTable2LineUpdatePrompt</c> class.
    /// </returns>
    public static PurchTable2LineUpdatePrompt newFromPurchTable(PurchTable _purchTable)
    {
        PurchTable2LineUpdatePrompt purchTable2LineUpdatePrompt = PurchTable2LineUpdatePrompt::construct();

        //Call getLast to prevent it from being called during prompt, thus rewriting the field list with saved values
        purchTable2LineUpdatePrompt.getLast();

        //Get previous answers from saved field list and store them
        purchTable2LineUpdatePrompt.packPreviousAnswers();

        purchTable2LineUpdatePrompt.parmSourceTable(_purchTable);

        return purchTable2LineUpdatePrompt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>