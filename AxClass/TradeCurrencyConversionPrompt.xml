<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeCurrencyConversionPrompt</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    Launches a dialog when the currency changes are populated from header to line records.
/// </summary>
/// <remarks>
///    This dialog is used for sales orders, sales quotations, and purchase orders.
/// </remarks>
class TradeCurrencyConversionPrompt extends RunBase
{
    DialogField                 currencyConversionDialogField;
    DialogField                 updatePriceDiscDialogField;
    boolean                     priceDiscChangePolicyExistOnLine;
    PriceDiscUpdatePriceDisc    updatePriceDiscMode;
    TradeCurencyConversion      tradeCurrencyConversion;
    Common                      buffer;
    Num                         id;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        tradeCurrencyConversion,
        updatePriceDiscMode
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines the contents of the dialog.
    /// </summary>
    /// <param name="_dialog">
    ///    A <c>DialogRunBase</c> object.
    /// </param>
    /// <param name="_forceOnClient">
    ///    A Boolean value that indicates whether the dialog should be bound to the client.
    /// </param>
    /// <returns>
    ///    A modified <c>DialogRunBase</c> object.
    /// </returns>
    public Object dialog(
        DialogRunbase _dialog = null,
        boolean _forceOnClient = false)
    {
        DialogGroup dialogGroup;
        Dialog   dialog = this.dialogInternal( _dialog, _forceOnClient);

        dialog.caption(this.dialogCaption());
        dialog.addText(this.dialogText());

        if (isConfigurationkeyEnabled(configurationKeyNum(TradeBlanketOrder)))
        {
            switch (buffer.TableId)
            {
                case tableNum(SalesTable) : dialog.addText("@SYS135150");
                    break;

                case tableNum(PurchTable) : dialog.addText("@SYS135226");
                    break;
            }
        }

        currencyConversionDialogField = dialog.addField(enumStr(TradeCurencyConversion));
        currencyConversionDialogField.value(tradeCurrencyConversion);

        if (priceDiscChangePolicyExistOnLine)
        {
            updatePriceDiscDialogField = PriceDiscResultFields::promptPriceDiscPolicyUpdate(dialogGroup,
                                                                                            dialog,
                                                                                            updatePriceDiscMode);
        }

        dialog.allowUpdateOnSelectCtrl(true);
        this.dialogSelectCtrl();
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogCaption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the dialog caption.
    /// </summary>
    /// <returns>
    /// The dialog caption string.
    /// </returns>
    protected str dialogCaption()
    {
        if (buffer.TableId == tableNum(PurchTable))
        {
            return "@SYS79467";
        }
        else
        {
            return "@SYS54755";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the dialog text.
    /// </summary>
    /// <returns>
    /// The dialog text string.
    /// </returns>
    protected str dialogText()
    {
        if (buffer.TableId == tableNum(PurchTable))
        {
            return "@SYS79467";
        }
        else
        {
            return "@SYS54755";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogSelectCtrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the price discount policy section of the dialog.
    /// </summary>
    public void dialogSelectCtrl()
    {
        super();

        if (updatePriceDiscDialogField != null)
        {
            updatePriceDiscDialogField.enabled(currencyConversionDialogField.value() == TradeCurencyConversion::TradeAgreements ? true : false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>extendedPrompt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Launches the main dialog and, if it isn't cancelled, the price discount policy dialog.
    /// </summary>
    /// <returns>
    ///    true if neither of the dialogs are cancelled; otherwise, false.
    /// </returns>
    public boolean extendedPrompt()
    {
        boolean ret = this.prompt();

        if (ret
            && tradeCurrencyConversion == TradeCurencyConversion::TradeAgreements
            && (priceDiscChangePolicyExistOnLine
            &&  updatePriceDiscMode == PriceDiscUpdatePriceDisc::UpdateIndividual))
        {
            ret = buffer.PriceDiscResultFields::updateLinePolicies();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the values from the dialog fields.
    /// </summary>
    /// <returns>
    ///    A Boolean value that is passed from the super class.
    /// </returns>
    /// <remarks>
    ///    Overrides the super class method.
    /// </remarks>

    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        tradeCurrencyConversion = currencyConversionDialogField.value();

        if (priceDiscChangePolicyExistOnLine)
        {
            updatePriceDiscMode = updatePriceDiscDialogField.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBuffer</Name>
				<Source><![CDATA[
    public Common parmBuffer(Common _buffer = buffer)
    {
        buffer = _buffer;
        return buffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmId</Name>
				<Source><![CDATA[
    public Num parmId(Num _id = id)
    {
        id = _id;
        return _id;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPolicyExistOnLine</Name>
				<Source><![CDATA[
    public boolean parmPolicyExistOnLine(boolean _priceDiscChangePolicyExistOnLine = priceDiscChangePolicyExistOnLine)
    {
        priceDiscChangePolicyExistOnLine = _priceDiscChangePolicyExistOnLine;
        return priceDiscChangePolicyExistOnLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptConvertCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Launches the user dialog and maps the outcome enumerations that are used to control the header to
    ///    line currency update.
    /// </summary>
    /// <returns>
    ///    A container that has a <c>NoYes</c> enumeration and a <c>TradeCurencyConversion</c> enumeration.
    /// </returns>
    public container promptConvertCurrencyCode()
    {
        container ret;

        if (this.extendedPrompt())
        {
            ret = [NoYes::Yes, tradeCurrencyConversion];
            this.run();
        }
        else
        {
            ret = [NoYes::No, TradeCurencyConversion::ExchRate];
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes business logic that is determined by the outcome of the user dialog box.
    /// </summary>
    public void run()
    {
        super();

        if (tradeCurrencyConversion == TradeCurencyConversion::TradeAgreements
            && updatePriceDiscMode == PriceDiscUpdatePriceDisc::UpdateAll
            && priceDiscChangePolicyExistOnLine)
        {
            buffer.PriceDiscResultFields::resetLinePolicies();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version     = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TradeCurrencyConversionPrompt construct()
    {
        return new TradeCurrencyConversionPrompt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription  description()
    {
        return "@SYS53047";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>TradePromptConvertCurrencyCode</c> class and initiates the
    ///    internal variable.
    /// </summary>
    /// <param name="_buffer">
    ///    A table record buffer.
    /// </param>
    /// <param name="_id">
    ///    An <c>Num</c> extended data type.
    /// </param>
    /// <param name="_priceDiscChangePolicyExistOnLine">
    ///    A Boolean value.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>TradePromptConvertCurrencyCode</c> class that uses the specified
    ///    parameters.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    Invalid data source parameter passed to the <c>TradePromptConvertCurrencyCode</c> class.
    /// </exception>
    static TradeCurrencyConversionPrompt newFromParm(
        Common _buffer,
        Num _id,
        boolean _priceDiscChangePolicyExistOnLine)
    {
        TradeCurrencyConversionPrompt promptConvertCurrencyCode = TradeCurrencyConversionPrompt::construct();

        if (!TradeCurrencyConversionPrompt::validateDatasourceParameter(_buffer))
        {
            throw error(strFmt("@SYS117927", promptConvertCurrencyCode.name()));
        }

        promptConvertCurrencyCode.parmBuffer(_buffer);
        promptConvertCurrencyCode.parmId(_id);
        promptConvertCurrencyCode.parmPolicyExistOnLine(_priceDiscChangePolicyExistOnLine);
        return promptConvertCurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDatasourceParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the table record buffer for the creation of the <c>TradePromptConvertCurrencyCode</c> object.
    /// </summary>
    /// <param name = "_buffer">
    /// A table record buffer.
    /// </param>
    /// <returns>
    /// true if the datasource parameter is valid; otherwise, false.
    /// </returns>
    protected static boolean validateDatasourceParameter(Common _buffer)
    {
        return _buffer.TableId == tableNum(SalesTable)
               || _buffer.TableId == tableNum(SalesQuotationTable)
               || _buffer.TableId == tableNum(PurchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>