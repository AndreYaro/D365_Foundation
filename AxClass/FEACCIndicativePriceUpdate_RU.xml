<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FeaccIndicativePriceUpdate_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FeaccIndicativePriceUpdate_RU extends RunBase
{
    FormDataSource          formDataSource;

    CustomPrice_RU          customPriceImport;
    CustomPrice_RU          customPriceExport;
    CurrencyCode            currencyCode;
    Qty                     qty;
    UnitOfMeasureSymbol     unitID;
    TransDate               indicativePriceDate;
    RecordSortedList        rslFEACCIndicativePrice;
    FEACCIndicativePrice_RU feaccIndicativePrice;

    DialogField             fieldCustomPriceImport;
    DialogField             fieldCustomPriceExport;
    DialogField             fieldCurrencyCode;
    DialogField             fieldQty;
    DialogField             fieldUnitId;
    DialogField             fieldIndicativePriceDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase    dialog;

        dialog = super();

        dialog.caption("@GLS115239");

        dialog.addGroup("@SYS11865");
        fieldIndicativePriceDate    = dialog.addField(extendedTypeStr(TransDate), "@GLS115166");
        fieldCustomPriceImport      = dialog.addField(extendedTypeStr(CustomPrice_RU), "@GLS115105");
        fieldCustomPriceExport      = dialog.addField(extendedTypeStr(CustomPrice_RU), "@GLS115103");
        fieldCurrencyCode           = dialog.addField(extendedTypeStr(CurrencyCode));

        dialog.addGroup("@SYS14578");
        fieldQty    = dialog.addField(extendedTypeStr(Qty));
        fieldUnitId = dialog.addField(extendedTypeStr(UnitOfMeasureSymbol));

        if (feaccIndicativePrice)
        {
            fieldIndicativePriceDate.value(feaccIndicativePrice.IndicativePriceDate);
            fieldCustomPriceImport.value(feaccIndicativePrice.CustomPriceImport);
            fieldCustomPriceExport.value(feaccIndicativePrice.CustomPriceExport);
            fieldCurrencyCode.value(feaccIndicativePrice.CurrencyCode);
            fieldQty.value(feaccIndicativePrice.Qty);
            fieldUnitId.value(feaccIndicativePrice.UnitId);
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            customPriceImport   = fieldCustomPriceImport.value();
            customPriceExport   = fieldCustomPriceExport.value();
            currencyCode        = fieldCurrencyCode.value();
            qty                 = fieldQty.value();
            unitID              = fieldUnitId.value();
            indicativePriceDate = fieldIndicativePriceDate.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFEACCIndicativePrice</Name>
				<Source><![CDATA[
    void parmFEACCIndicativePrice(FEACCIndicativePrice_RU   _feaccIndicativePrice)
    {
        feaccIndicativePrice = _feaccIndicativePrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormDataSource</Name>
				<Source><![CDATA[
    void parmFormDataSource(FormDataSource _formDataSource)
    {
        formDataSource = _formDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRslFEACCIndicativePrice</Name>
				<Source><![CDATA[
    void parmRslFEACCIndicativePrice(RecordSortedList _rslFEACCIndicativePrice)
    {
        rslFEACCIndicativePrice = _rslFEACCIndicativePrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run()
    {
        #OCCRetryCount
        boolean                 found;

        try
        {
            for (found = rslFEACCIndicativePrice.first(feaccIndicativePrice);
                 found;
                 found = rslFEACCIndicativePrice.next(feaccIndicativePrice))
            {
                ttsbegin;

                feaccIndicativePrice = FEACCIndicativePrice_RU::findRecId(feaccIndicativePrice.RecId, true);

                if (customPriceImport)
                    feaccIndicativePrice.CustomPriceImport = customPriceImport;

                if (customPriceExport)
                    feaccIndicativePrice.CustomPriceExport = customPriceExport;

                if (currencyCode)
                    feaccIndicativePrice.CurrencyCode = currencyCode;

                if (qty)
                    feaccIndicativePrice.Qty = qty;

                if (unitID)
                    feaccIndicativePrice.UnitId = unitID;

                if (indicativePriceDate)
                    feaccIndicativePrice.IndicativePriceDate = indicativePriceDate;

                if (feaccIndicativePrice.validateWrite())
                    feaccIndicativePrice.update();

                ttscommit;
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        ret = super(_calledFrom);

        if (! currencyCode)
        {
            ret = checkFailed(strfmt("@GLS115316", "@SYS7572"));
        }

        if (! unitID)
        {
            ret = checkFailed(strfmt("@GLS115316", "@GLS100760"));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static FEACCIndicativePriceUpdate_RU construct()
    {
        return new FEACCIndicativePriceUpdate_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static Description description()
    {
        return "@GLS115391";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        FEACCIndicativePriceUpdate_RU   feaccIndicativePriceUpdate;
        FEACCIndicativePrice_RU         feaccIndicativePriceCursor;
        FormDataSource                  formDataSource;
        RecordSortedList                rslFEACCIndicativePrice;
        FEACCIndicativePrice_RU         feaccIndicativePrice;

        if (! _args || _args.dataset() != tablenum(FEACCIndicativePrice_RU))
            throw error(strfmt("@SYS25516", FEACCIndicativePriceUpdate_RU::description()));

        if (! _args.record() || ! FormDataUtil::isFormDataSource(_args.record()))
            throw error("@SYS82774");

        feaccIndicativePriceUpdate = FEACCIndicativePriceUpdate_RU::construct();

        formDataSource             = FormDataUtil::getFormDataSource(_args.record());

        feaccIndicativePriceCursor.data(_args.record());

        rslFEACCIndicativePrice = new RecordSortedList(tablenum(FEACCIndicativePrice_RU));
        rslFEACCIndicativePrice.sortOrder(fieldnum(FEACCIndicativePrice_RU, RecId));

        feaccIndicativePrice = formDataSource.getFirst(1);

        if (! feaccIndicativePrice)
        {
            feaccIndicativePrice = formDataSource.cursor();
            feaccIndicativePriceUpdate.parmFEACCIndicativePrice(feaccIndicativePrice);
        }

        while (feaccIndicativePrice)
        {
            rslFEACCIndicativePrice.ins(feaccIndicativePrice);
            feaccIndicativePrice = formDataSource.getNext();
        }

        if (!rslFEACCIndicativePrice.len())
            throw error("@SYS38465");

        feaccIndicativePriceUpdate.parmRslFEACCIndicativePrice(rslFEACCIndicativePrice);
        if (feaccIndicativePriceUpdate.prompt())
        {
            feaccIndicativePriceUpdate.runOperation();
        }

        formDataSource.executeQuery();
        formDataSource.positionToRecord(feaccIndicativePriceCursor);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>