<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendPackingSlipJourFormHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
class VendPackingSlipJourFormHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canPackingSlipBeCanceledOrCorrected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a packing slip can be canceled or corrected.
    /// </summary>
    /// <param name="_vendPackingSlipJour">
    /// The VendPackingSlipJournal record which will be checked.
    /// </param>
    /// <returns>
    /// A container that has two Boolean values that indicate whether the packing slip can be canceled or
    /// corrected
    /// </returns>
    public static container canPackingSlipBeCanceledOrCorrected(VendPackingSlipJour _vendPackingSlipJour)
    {
        PurchTable purchTable = _vendPackingSlipJour.purchTable();

        boolean isIntercompanyDirectDelivery = purchTable.InterCompanyDirectDelivery && purchTable.isInterCompanyOrder();

        // check is delayed to clicked() if VendPackingSlipJourCheckPOConfirmationOnClickFlight is enabled
        boolean isDocumentConfirmedCheck =
            VendPackingSlipJourCheckPOConfirmationOnClickFlight::instance().isEnabled()
            || purchTable.isDocumentConfirmed();

        boolean canBeCorrected =
            !isIntercompanyDirectDelivery
            && !_vendPackingSlipJour.isCanceled()
            && !_vendPackingSlipJour.isFullyInvoiced()
            && !purchTable.isConsignmentOrder()
            && isDocumentConfirmedCheck;

        boolean canBeCanceled = canBeCorrected && !_vendPackingSlipJour.isInvoiceMatched();

        return [canBeCanceled, canBeCorrected];
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCanProcessPackSlipCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if all or part of the current VendPackingSlipJour can be corrected.
    /// </summary>
    /// <param name="_vendPackingSlipJour">
    /// The <c>VendPackingSlipJournal</c> record which will be processed.
    /// </param>
    /// <exception cref="Exception::Error">
    /// If no lines can be corrected, then an error message will be thrown; otherwise an info message will be shown.
    /// </exception>
    public static void checkCanProcessPackSlipCorrection(VendPackingSlipJour _vendPackingSlipJour)
    {
        if (VendPackingSlipJourFormHelper::hasLinesWithWork(_vendPackingSlipJour))
        {
            if (VendPackingSlipJourFormHelper::hasLinesWithoutWork(_vendPackingSlipJour))
            {
                info(strFmt("@WAX736",
                            "@WAX:WAX_ProductReceipt_MessageNotification_OnlyNonWarehouseManagementItemsDetected",
                            "@WAX:WAX_ProcuctReceipt_MessageNotification_ProductReceiptCorrectionDoesNotSupportItems"));
            }
            else
            {
                throw error( strFmt("@WAX736",
                                    "@WAX:WAX_ProductReceipt_MessageNotification_CanNotProceedWithPostingCorrections",
                                    "@WAX:WAX_ProductReceipt_MessageNotification_CorrectionContainsOnlyNotSupportedItems"));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasLinesWithoutWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if there is a <c>VendPackingSlipTrans</c> which has no work lines associated
    /// </summary>
    /// <param name="_vendPackingSlipJour">
    /// The <c>VendPackingSlipJournal</c> record which will be checked.
    /// </param>
    /// <returns>
    /// true, if there are lines with no related work; otherwise, false.
    /// </returns>
    private static boolean hasLinesWithoutWork(VendPackingSlipJour _vendPackingSlipJour)
    {
        WHSWorkTable         workTable;
        WHSWorkLine          workLine;
        VendPackingSlipTrans vendPackingSlipTrans;

        select firstOnly RecId from vendPackingSlipTrans
                where  vendPackingSlipTrans.VendPackingSlipJour == _vendPackingSlipJour.RecId
                notExists join workTable
                    where workTable.WorkStatus != WHSWorkStatus::Cancelled
                exists join workLine
                    where  workLine.InventTransId == vendPackingSlipTrans.InventTransId
                        && workLine.WorkId        == workTable.WorkId;

        return vendPackingSlipTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasLinesWithWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if there is a <c>VendPackingSlipTrans</c> which has work lines associated
    /// </summary>
    /// <param name="_vendPackingSlipJour">
    /// The <c>VendPackingSlipJournal</c> record which will be checked.
    /// </param>
    /// <returns>
    /// true, if there are lines with related work; otherwise, false.
    /// </returns>
    private static boolean hasLinesWithWork(VendPackingSlipJour _vendPackingSlipJour)
    {
        WHSWorkTable         workTable;
        WHSWorkLine          workLine;
        VendPackingSlipTrans vendPackingSlipTrans;

        select firstonly RecId from workTable
            exists join vendPackingSlipTrans
                    where  vendPackingSlipTrans.VendPackingSlipJour == _vendPackingSlipJour.RecId
            exists join workLine
                where  workLine.InventTransId == vendPackingSlipTrans.InventTransId
                    && workLine.WorkId        == workTable.WorkId
                    && workTable.WorkStatus   != WHSWorkStatus::Cancelled;

        return (workTable.RecId != 0);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>