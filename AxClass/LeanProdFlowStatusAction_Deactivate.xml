<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanProdFlowStatusAction_Deactivate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanProdFlowStatusAction_Deactivate</c> class that is used to deactivate production flows.
/// </summary>
public class LeanProdFlowStatusAction_Deactivate extends LeanProdFlowStatusAction implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a caption string.
    /// </summary>
    /// <returns>
    ///    The caption string.
    /// </returns>
    public ClassDescription caption()
    {
        return "@SYS303297";
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkKanbanRules</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates kanban rules for the plan.
    /// </summary>
    /// <returns>
    /// true if the validation succeeds; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkKanbanRules()
    {
        boolean result = true;

        setPrefix("@SYS303287");

        try
        {
            LeanRulesEngine::onPlanDeactivated(this.plan());
        }
        catch
        {
            result = false;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deactivate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deactivates a flow version by changing the status and closing a validity gap if applicable.
    /// </summary>

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void deactivate()
    {
        Plan    planLocal;
        Plan    planNext;

        ttsbegin;

        //reset to 'Draft'
        planLocal        = Plan::find(this.plan().RecId,true);
        planLocal.Status = PlanStatus::Draft;
        planLocal.update();

        //update next version from date, if the next active version immediately succeeds the deactivated one.
        if (   planLocal.ValidTo != DateTimeUtil::minValue()
            && planLocal.ValidTo != DateTimeUtil::maxValue())
        {
            select forupdate firstonly planNext
                order by VersionNum
                where planNext.VersionNum > planLocal.VersionNum
                   && planNext.Status     == PlanStatus::Active
                   && (planNext.ValidFrom == planLocal.ValidTo
                   ||  planNext.ValidFrom == DateTimeUtil::addSeconds(planLocal.ValidTo,1));

            if (planNext)
            {
                planNext.ValidFrom = planLocal.ValidFrom;
                planNext.update();
                info(strFmt("@SYS303298",
                     planNext.VersionNum,
                     planNext.ValidFrom));
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>leanPlanStatusAction</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the action performed by the class.
    /// </summary>
    /// <returns>
    ///    A <c>LeanPlanStatusAction</c> enumeration value.
    /// </returns>
    public LeanPlanStatusAction leanPlanStatusAction()
    {
        return LeanPlanStatusAction::Deactivate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runStatusAction</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs the status action.
    /// </summary>
    /// <returns>
    ///    true if the approval succeeds; otherwise, false.
    /// </returns>
    public boolean runStatusAction()
    {
        boolean result = this.checkKanbanRules();

        if (result)
        {
            this.deactivate();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates input parameters.
    /// </summary>
    /// <param name="_calledFrom">
    ///    An instance of the <c>Object</c> class that represents the caller; optional.
    /// </param>
    /// <returns>
    ///    true if the validation succeeds; otherwise, false.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        boolean result = this.plan().Status == PlanStatus::Active;

        if (!result)
        {
            warning(strFmt("@SYS303296",this.plan().Status));
        }

        result =    super(_calledFrom)
                 && result;

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        private static LeanProdFlowStatusAction_Deactivate construct()
    {
        return new LeanProdFlowStatusAction_Deactivate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLeanProductionFlow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>LeanProdFlowStatusAction_Deactivate</c> class.
    /// </summary>
    /// <param name="_leanProductionFlow">
    ///    A <c>LeanProductionFlow</c> record that is used to initialize the instance of the class.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>LeanProdFlowStatusAction_Deactivate</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanProdFlowStatusAction_Deactivate newLeanProductionFlow(LeanProductionFlow _leanProductionFlow)
    {
        LeanProdFlowStatusAction_Deactivate    leanProdFlowStatusAction = LeanProdFlowStatusAction_Deactivate::construct();

        leanProdFlowStatusAction.parmLeanProductionFlow(_leanProductionFlow);

        return leanProdFlowStatusAction;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>
