<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendDirectiveDP_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendDirectiveDP_PSN</c> class is the data provider class for the <c>VendDirective_PSN</c> report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(CustVendDirectiveDPContract_PSN)),
    SRSReportQueryAttribute(queryStr(VendDirectiveUnposted_PSN))
]
class VendDirectiveDP_PSN extends CustVendDirectiveDP_PSN
{
    VendDirective_PSN                   vendDirective_PSN;
    PurchAgreementHeader                purchAgreementHeader;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
        public void getFromDialog()
    {
        CustVendDirectiveDPContract_PSN     custVendDirectiveDPContract_PSN = this.parmDataContract();

        director    = custVendDirectiveDPContract_PSN.parmDirector();
        accountant  = custVendDirectiveDPContract_PSN.parmAccountant();
    }

]]></Source>
			</Method>
			<Method>
				<Name>performProcessReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>custVendTmpDirective_PSN</c> table fields with the appropriate values.
    /// </summary>
    /// <param name="_queryRun">
    /// The current query run object.
    /// </param>
    /// <param name="_unpostedQuery">
    /// true if the current query is for unposted invoices; otherwise, false.
    /// </param>
    public void performProcessReport(QueryRun _queryRun, boolean _unpostedQuery = false)
    {
        int vendInvoiceInfoTableNum = tableNum(VendInvoiceInfoTable);
        int vendInvoiceJourTableNum = tableNum(VendInvoiceJour);
        super(_queryRun);

        // switch between passing in tables for posted or unposted invoices.
        if (_unpostedQuery)
        {
            this.setCustVendInvoiceNumber(_queryRun.get(vendInvoiceInfoTableNum));
            this.setVendBankAccountId(_queryRun.get(vendInvoiceInfoTableNum));
            this.setVendBankAccountAddress(_queryRun.get(vendInvoiceInfoTableNum));
        }
        else
        {
            this.setCustVendInvoiceNumber(_queryRun.get(vendInvoiceJourTableNum));
            this.setVendBankAccountId(_queryRun.get(vendInvoiceJourTableNum));
            this.setVendBankAccountAddress(_queryRun.get(vendInvoiceJourTableNum));
        }

        // All the sources for the values below come from tables that will exist on both queries.
        this.setDirectiveRoutingSlipID(_queryRun.get(tableNum(VendRoutingSlip_PSN)));
        this.setpurchCommitmentNumber(_queryRun.get(tableNum(PurchCommitmentHeader_PSN)) as PurchCommitmentHeader_PSN);
        this.setDateOfApproval(_queryRun.get(tableNum(PurchCommitmentLine_PSN)) as PurchCommitmentLine_PSN);
        this.setPurchAgreementContract();
        this.setPurchAgreementNumber();
        this.setFinalAccount();
        this.setWithholdDeductCode();

        custVendTmpDirective_PSN.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        QueryRun                queryRun;
        Query                   VendDirectivePostedQuery = new Query(queryStr(VendDirectivePosted_PSN));

        super();

        query = this.parmQuery();

        queryRun = new QueryRun(query);

        // run the first query for unposted invoices
        while (queryRun.next())
        {
            this.setCommonTables(queryRun, true);

            this.performProcessReport(queryRun, true);
        }

        // Transfer the ranges and run the second query.
        vendDirective_PSN::copyVendInvoiceRanges(query, VendDirectivePostedQuery);

        // Ranges have been transferred, now update the queryRun and run it.
        queryRun = new queryRun(VendDirectivePostedQuery);

        while (queryRun.next())
        {
            this.setCommonTables(queryRun, false);

            this.performProcessReport(queryRun, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAccountantName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the <c>AccountantName</c> field on the <c>custVendTmpDirective_PSN</c> table.
    /// </summary>
    public void setAccountantName()
    {
        custVendTmpDirective_PSN.AccountantName = accountant;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAmountFields</Name>
				<Source><![CDATA[
        public void setAmountFields()
    {
        this.setWithholdDeductAmount();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCommonTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets common tables found in the <c>classDeclaration</c> method.
    /// </summary>
    /// <param name="_queryRun">
    /// The current query object.
    /// </param>
    /// <param name="_unpostedQuery">
    /// true if the current query is for an unposted invoice; otherwise, false.
    /// </param>
    public void setCommonTables(QueryRun _queryRun, boolean _unpostedQuery = false)
    {
        VendInvoiceInfoLine     vendInvoiceInfoLine;
        VendInvoiceTrans        vendInvoiceTrans;
        AgreementLine           agreementLine;
        PurchTable              purchTable;

        // these tables are retrieved differently based on whether the query is for posted or unposted invoices.
        if (_unpostedQuery)
        {
            // set local variables that will be used to retrieve other tables.
            vendInvoiceInfoLine = _queryRun.get(tableNum(VendInvoiceInfoLine)) as VendInvoiceInfoLine;
            taxGroup = vendInvoiceInfoLine.TaxGroup;

            // set the source document line class variable
            select RecId from budgetaryDocumentSourceDocumentLine
                where budgetaryDocumentSourceDocumentLine.RecId == vendInvoiceInfoLine.SourceDocumentLine;

            // set the PurchAgreementHeader class variable
            if (vendInvoiceInfoLine.isNonPO())
            {
                select firstOnly RecId from agreementLine
                    where agreementLine.RecId == vendInvoiceInfoLine.AgreementLine_PSN
                join firstOnly DocumentExternalReference, PurchNumberSequence from purchAgreementHeader
                    where purchAgreementHeader.RecId == agreementLine.Agreement;
            }
            else
            {
                select firstonly RecId from purchTable
                    where purchTable.PurchId   == vendInvoiceInfoLine.OrigPurchId
                join firstOnly DocumentExternalReference, PurchNumberSequence from purchAgreementHeader
                    where purchAgreementHeader.RecId == purchTable.MatchingAgreement;
            }
        }
        else
        {
            // set local variables that will be used to retrieve other tables.
            vendInvoiceTrans = _queryRun.get(tableNum(VendInvoiceTrans)) as VendInvoiceTrans;
            taxGroup = vendInvoiceTrans.TaxGroup;

            // set the source document line class variable
            select RecId from budgetaryDocumentSourceDocumentLine
            where budgetaryDocumentSourceDocumentLine.RecId == vendInvoiceTrans.SourceDocumentLine;

            // set the PurchAgreementHeader class variable
            if (vendInvoiceTrans.isNonPO())
            {
                select firstOnly RecId from agreementLine
                    where agreementLine.RecId == vendInvoiceTrans.AgreementLine_PSN
                join firstOnly DocumentExternalReference, PurchNumberSequence from purchAgreementHeader
                    where purchAgreementHeader.RecId == agreementLine.Agreement;
            }
            else
            {
                select firstonly RecId from purchTable
                    where purchTable.PurchId   == vendInvoiceTrans.PurchID
                join firstOnly DocumentExternalReference, PurchNumberSequence from purchAgreementHeader
                    where purchAgreementHeader.RecId == purchTable.MatchingAgreement;
            }
        }

        // Below tables are retrieved the same regardless of which query is used.
        custVendDirective_PSN = _queryRun.get(tableNum(VendDirective_PSN)) as CustVendDirective_PSN;
        companyInfo = companyInfo::find();
        vendDirective_PSN = custVendDirective_PSN as VendDirective_PSN;
        dirPartyTable = _queryRun.get(tableNum(DirPartyTable)) as DirPartyTable;
        CustVendTable = _queryRun.get(tableNum(VendTable)) as VendTable;
        mainAccount = _queryRun.get(tableNum(MainAccount)) as MainAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustVendInvoiceNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the <c>VendInvoiceNumber</c> field on the <c>custVendTmpDirective_PSN</c> table.
    /// </summary>
    /// <param name="_invoice">
    /// The current invoice record.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void setCustVendInvoiceNumber(Common _invoice)
    {
        VendInvoiceInfoTable    vendInvoiceInfoTable;
        VendInvoiceJour         vendInvoiceJour;

        if (_invoice.TableId == tableNum(VendInvoiceInfoTable))
        {
            vendInvoiceInfoTable = _invoice as VendInvoiceInfoTable;

            custVendTmpDirective_PSN.CustVendInvoiceNumber = vendInvoiceInfoTable.Num;
        }
        else
        {
            vendInvoiceJour = _invoice as VendInvoiceJour;

            custVendTmpDirective_PSN.CustVendInvoiceNumber = vendInvoiceJour.InvoiceId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDateOfApproval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the <c>DateOfApproval</c> field on the <c>custVendTmpDirective_PSN</c> table.
    /// </summary>
    /// <param name="_purchCommitmentLine_PSN">
    /// The current commitment line record.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setDateOfApproval(PurchCommitmentLine_PSN _purchCommitmentLine_PSN)
    {
        custVendTmpDirective_PSN.DateOfApproval = _purchCommitmentLine_PSN.LineDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDirectiveID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the <c>DirectiveID</c> field on the <c>custVendTmpDirective_PSN</c> table.
    /// </summary>
    public void setDirectiveID()
    {
        custVendTmpDirective_PSN.DirectiveID = vendDirective_PSN.VendDirectiveId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDirectiveRoutingSlipID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the <c>DirectiveRoutingSlipID</c> field on the <c>custVendTmpDirective_PSN</c> table.
    /// </summary>
    /// <param name="_vendRoutingSlip_PSN">
    /// The current routing slip record.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setDirectiveRoutingSlipID(VendRoutingSlip_PSN    _vendRoutingSlip_PSN)
    {
        custVendTmpDirective_PSN.DirectiveRoutingSlipID = _vendRoutingSlip_PSN.VendRoutingSlipId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDistributionDepartment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>DistributionDepartment</c> field value on the <c>CustVendTmpDirective_PSN</c> table.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setDistributionDepartment()
    {
        DimensionAttributeLevelValueView dimensionAttributeLevelValueView;
        AccountingDistribution           accountingDistribution;

        select DimensionAttribute from dimensionAttributeLevelValueView
            where dimensionAttributeLevelValueView.DimensionAttribute == VendParameters::find().PurchAgreementFinancialDimension_PSN
                exists join  accountingDistribution
                where accountingDistribution.SourceDocumentLine == budgetaryDocumentSourceDocumentLine.RecId &&
                      dimensionAttributeLevelValueView.ValueCombinationRecId == accountingDistribution.LedgerDimension;

        custVendTmpDirective_PSN.DistributionDepartment = DimensionAttribute::find(dimensionAttributeLevelValueView.DimensionAttribute).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDistributionDepartmentId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>DistributionDepartmentId</c> field value on the <c>CustVendTmpDirective_PSN</c> table.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setDistributionDepartmentId()
    {
        DimensionAttributeLevelValueView dimensionAttributeLevelValueView;
        AccountingDistribution           accountingDistribution;

        select DisplayValue from dimensionAttributeLevelValueView
            where dimensionAttributeLevelValueView.DimensionAttribute == VendParameters::find().PurchAgreementFinancialDimension_PSN
                exists join  accountingDistribution
                where accountingDistribution.SourceDocumentLine == budgetaryDocumentSourceDocumentLine.RecId &&
                      dimensionAttributeLevelValueView.ValueCombinationRecId == accountingDistribution.LedgerDimension;

        custVendTmpDirective_PSN.DistributionDepartmentId = dimensionAttributeLevelValueView.DisplayValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFinalAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the <c>FinalAccount</c> field on the <c>custVendTmpDirective_PSN</c> table.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setFinalAccount()
    {
        AccountingDistribution              accountingDistribution;
        DimensionAttributeValueCombination  dimensionAttributeValueCombination;
        MainAccount                         finalAccount;

        select firstOnly RecId from accountingDistribution
            where accountingDistribution.sourceDocumentLine == budgetaryDocumentSourceDocumentLine.RecId
        join firstOnly RecId from dimensionAttributeValueCombination
            where dimensionAttributeValueCombination.RecId == accountingDistribution.LedgerDimension
        join firstOnly MainAccountId from finalAccount
            where finalAccount.RecId == dimensionAttributeValueCombination.MainAccount;

        custVendTmpDirective_PSN.FinalAccount = finalAccount.MainAccountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPostTaxSum</Name>
				<Source><![CDATA[
        public void setPostTaxSum()
    {
        super();

        custVendTmpDirective_PSN.PostTaxSum += custVendTmpDirective_PSN.WithholdDeductAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchAgreementContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the <c>PurchAgreementContract</c> field on the <c>custVendTmpDirective_PSN</c> table.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void setPurchAgreementContract()
    {
        custVendTmpDirective_PSN.PurchAgreementContract = purchAgreementHeader.DocumentExternalReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchAgreementNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the <c>PurchAgreementNumber</c> field on the <c>custVendTmpDirective_PSN</c> table.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void setPurchAgreementNumber()
    {
        custVendTmpDirective_PSN.PurchAgreementNumber = purchAgreementHeader.PurchNumberSequence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchCommitmentNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the <c>PurchCommitmentNumber</c> field on the <c>custVendTmpDirective_PSN</c> table.
    /// </summary>
    /// <param name="_purchCommitmentHeader_PSN">
    /// The current commitment header record.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setPurchCommitmentNumber(PurchCommitmentHeader_PSN _purchCommitmentHeader_PSN)
    {
        custVendTmpDirective_PSN.PurchCommitmentNumber = _purchCommitmentHeader_PSN.CommitmentNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVendBankAccountAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the <c>VendBankAccountAddress</c> field on the <c>custVendTmpDirective_PSN</c> table.
    /// </summary>
    /// <param name="_invoice">
    /// The current invoice record.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setVendBankAccountAddress(Common _invoice)
    {
        VendInvoiceInfoTable    vendInvoiceInfoTable;
        VendInvoiceJour         vendInvoiceJour;
        VendTrans               vendTrans;
        VendBankAccount         vendBankAccount;
        LogisticsPostalAddress  logisticsPostalAddress;

        if (_invoice.TableId == tableNum(VendInvoiceInfoTable))
        {
            vendInvoiceInfoTable = _invoice as VendInvoiceInfoTable;

            select firstOnly RecId from vendBankAccount
                where vendBankAccount.AccountID == vendInvoiceInfoTable.VendBankAccountID
                    && vendBankAccount.VendAccount == vendInvoiceInfoTable.InvoiceAccount
            join firstOnly Address from logisticsPostalAddress
                where logisticsPostalAddress.Location == vendBankAccount.Location;

            custVendTmpDirective_PSN.VendBankAccountAddress = logisticsPostalAddress.Address;
        }
        else
        {
            vendInvoiceJour = _invoice as VendInvoiceJour;

            select firstonly RecId from vendTrans
                where vendTrans.Voucher == vendInvoiceJour.LedgerVoucher
                    && vendTrans.AccountNum == vendInvoiceJour.InvoiceAccount
                    && vendTrans.TransDate == vendInvoiceJour.InvoiceDate
            join firstOnly RecId from vendBankAccount
                where vendBankAccount.VendAccount == vendTrans.AccountNum
                    && vendBankAccount.AccountID == vendTrans.ThirdPartyBankAccountId
            join firstOnly Address from logisticsPostalAddress
                where logisticsPostalAddress.Location == vendBankAccount.Location;

            custVendTmpDirective_PSN.VendBankAccountAddress = logisticsPostalAddress.Address;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVendBankAccountId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the <c>VendBankAccountId</c> field on the <c>custVendTmpDirective_PSN</c> table.
    /// </summary>
    /// <param name="_invoice">
    /// The current invoice record.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setVendBankAccountId(Common _invoice)
    {
        VendInvoiceInfoTable    vendInvoiceInfoTable;
        VendInvoiceJour         vendInvoiceJour;
        VendTrans               vendTrans;

        if (_invoice.TableId == tableNum(VendInvoiceInfoTable))
        {
            vendInvoiceInfoTable = _invoice as VendInvoiceInfoTable;

            custVendTmpDirective_PSN.VendBankAccountId = vendInvoiceInfoTable.VendBankAccountId;
        }
        else
        {
            vendInvoiceJour = _invoice as VendInvoiceJour;

            select firstonly ThirdPartyBankAccountId from vendTrans
                where vendTrans.Voucher == vendInvoiceJour.LedgerVoucher
                    && vendTrans.AccountNum == vendInvoiceJour.InvoiceAccount
                    && vendTrans.TransDate == vendInvoiceJour.InvoiceDate;

            custVendTmpDirective_PSN.VendBankAccountId = vendTrans.ThirdPartyBankAccountId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWithholdDeductAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the <c>WithholdDeductionsAmount</c> field on the <c>custVendTmpDirective_PSN</c> table.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setWithholdDeductAmount()
    {
        custVendTmpDirective_PSN.WithholdDeductAmount = vendDirective_PSN.WithholdAmount + vendDirective_PSN.DeductAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWithholdDeductCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the <c>WithholdDeductCode</c> field on the <c>custVendTmpDirective_PSN</c> table.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setWithholdDeductCode()
    {
        if (vendDirective_PSN.DeductCode != "" && vendDirective_PSN.WithholdCode != "")
        {
            custVendTmpDirective_PSN.WithholdDeductCode = vendDirective_PSN.WithholdCode + ', ' + vendDirective_PSN.DeductCode;
        }
        else if (vendDirective_PSN.DeductCode != "" && vendDirective_PSN.WithholdCode == "")
        {
            custVendTmpDirective_PSN.WithholdDeductCode = vendDirective_PSN.DeductCode;
        }
        else if (vendDirective_PSN.DeductCode == "" && vendDirective_PSN.withholdCode != "")
        {
            custVendTmpDirective_PSN.WithholdDeductCode = vendDirective_PSN.WithholdCode;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
