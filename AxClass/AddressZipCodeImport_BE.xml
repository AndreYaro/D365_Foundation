<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AddressZipCodeImport_BE</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AddressZipCodeImport_BE extends AddressZipCodeImport
{
    private LogisticsAddressZipCodeId addressZipCodeId;
    private LogisticsAddressCityName addressCity;

    private const int perCallNumber = 100;
    private const str delimiterEnter = '\n';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>openFile</Name>
				<Source><![CDATA[
    protected void  openFile()
    {
        // Windows 1252
        importFile = TextStreamIo::constructForRead(fileStream, 1252);

        if (importFile == null || importFile.status() != IO_Status::Ok)
        {
            throw error("@SYS52680");
        }

        importFile.inFieldDelimiter(delimiterEnter);
        importFile.inRecordDelimiter(delimiterEnter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>readFile</Name>
				<Source><![CDATA[
    protected void readFile()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBE00010, funcName());

        const str endOfList = '</table>';
        const str endOfRecord = '</tr>';
        const str greaterThan = '>';

        int counter = 1;
        str lineIn;
        container con;
        int no = 0;

        if (this.delete())
        {
            AddressZipCodeImport::deleteAllCountryRegionZipCodes(logisticsAddressCountryRegion.CountryRegionId);
        }

        this.openFile();

        if (this.validate())
        {
            while ((importFile.status() == IO_Status::Ok))
            {
                lineIn = conpeek(importFile.read(), 1);

                if (lineIn == '')
                {
                    continue;
                }
                // Break if rich end of table
                if (strscan(lineIn, endOfList, 1, strlen(lineIn)) > 0)
                {
                    this.processData(con, logisticsAddressCountryRegion.CountryRegionId);
                    break;
                }
                // Line which contains zip code
                if (counter == 2)
                {
                    addressZipCodeId = substr(lineIn, strfind(linein, greaterThan, 1, strlen(lineIn)) + 1, 4);
                }
                // Line which contains city name
                else if (counter == 3)
                {
                    addressCity = substr(lineIn, strfind(linein, greaterThan, 1, strlen(lineIn)) + 1, strlen(lineIn));

                    if (strscan(addressCity, '<', 1, strlen(addressCity)) > 0)
                    {
                        addressCity = substr(addressCity, 1, strfind(addressCity, '<', 1, strlen(addressCity)) - 1);
                    }
                    else
                    {
                        lineIn = conpeek(importFile.read(), 1);
                        addressCity += substr(lineIn, 1, strfind(lineIn, '<', 1, strlen(lineIn)) - 1);
                    }

                    addressCity = System.Net.WebUtility::HtmlDecode(addressCity);
                }
                // Add record to container if reach end of record
                if (strscan(lineIn, endOfRecord, 1, strlen(lineIn)) > 0)
                {
                    counter = 1;

                    if (addressCity != '' && addressZipCodeId != '' && !confind(con, [addressCity, addressZipCodeId]))
                    {
                        con += [[addressCity, addressZipCodeId]];
                        no++;
                    }

                    if (no == perCallNumber)
                    {
                        this.processData(con, logisticsAddressCountryRegion.CountryRegionId);
                        no = 0;
                        con = connull();
                    }
                }
                else
                {
                    counter++;
                }
            }

            info("@SYS112337");
            processOK = true;
        }
        else
        {
            error("@SYS98433");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    private boolean validate()
    {
        boolean check[3];
        boolean endHeader;

        const str line1 = '<table';
        const str line2 = '<body>';
        const str line3 = '</tr>';

        while ((importFile.status() == IO_Status::Ok) && !endHeader)
        {
            str lineheader = conpeek(importFile.read(), 1);

            if (!check[1])
            {
                check[1] = strscan(lineheader, line1, 1, strlen(lineheader)) > 0;
            }
            if (!check[2])
            {
                check[2] = strscan(lineheader, line2, 1, strlen(lineheader)) > 0;
            }
            if (!check[3])
            {
                check[3] = strscan(lineheader, line3, 1, strlen(lineheader)) > 0;

                if (check[3])
                {
                    endHeader = true;
                }
            }
        }

        return check[1] && check[2] && check[3];
    }

]]></Source>
			</Method>
			<Method>
				<Name>processData</Name>
				<Source><![CDATA[
    private void processData(container _con, LogisticsAddressCountryRegionId _countryRegionId)
    {
        LogisticsAddressZipCode addressZipCode;
        LogisticsAddressCity city;

        for (int i = 1; i <= conlen(_con); i++)
        {
            [addressCity, addressZipCodeId] = conpeek(_con, i);

            select firstonly RecId from city
                where city.CountryRegionId == _countryRegionId
                    && city.Name == addressCity;

            if (!city)
            {
                city.Name = addressCity;
                city.CityKey = addressCity;
                city.CountryRegionId = _countryRegionId;
                city.insert();
            }

            if (!LogisticsAddressZipCode::existZipCodeCityCountryRegion(addressZipCodeId, addressCity, _countryRegionId))
            {
                addressZipCode.City = addressCity;
                addressZipCode.CityAlias = name2Alias(addressCity);
                addressZipCode.ZipCode = addressZipCodeId;
                addressZipCode.CountryRegionId = _countryRegionId;
                addressZipCode.CityRecId = city.RecId;
                addressZipCode.insert();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>