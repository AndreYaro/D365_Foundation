<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOMCalcWhereUsedListFromItemDimCombinationsPopulator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BOMCalcWhereUsedListFromItemDimCombinationsPopulator</c> class populates the <c>BOMTmpUsedItem2ProducedItem</c> table with items based on item dimension combinations.
/// </summary>
class BOMCalcWhereUsedListFromItemDimCombinationsPopulator extends SysQueryInsertRecordSet
{
    QueryBuildDataSource    qbdsInventItemPriceSimProduced;
    QueryBuildDataSource    qbdsInventItemPriceSimUsed;
    QueryBuildDataSource    qbdsInventDimProduced;
    QueryBuildDataSource    qbdsInventDimUsed;
    QueryBuildDataSource    qbdsCalcWhereUsedRelation;

    CostingVersionFromDate  calcDate;
    CostingVersionId        versionId;
    InventSiteId            inventSiteId;
    SysGuid                 sessionGuid;

    const int               TentativeDependencyGraph      = 0;
    const int               ItemDimsWithPendingPriceLevel = 0;
    
    BOMTmpUsedItem2ProducedItem autoRelation;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFieldMapping</Name>
				<Source><![CDATA[
    protected void initFieldMapping()
    {
        this.mapField(qbdsCalcWhereUsedRelation.uniqueId(), fieldStr(BOMTmpCalcWhereUsedRelation, Level), fieldStr(BOMTmpUsedItem2ProducedItem, Level));
        this.mapField(qbdsCalcWhereUsedRelation.uniqueId(), fieldStr(BOMTmpCalcWhereUsedRelation, RelationSetNumber), fieldStr(BOMTmpUsedItem2ProducedItem, RelationSetNumber));
        this.mapField(qbdsCalcWhereUsedRelation.uniqueId(), fieldStr(BOMTmpCalcWhereUsedRelation, SessionGuid), fieldStr(BOMTmpUsedItem2ProducedItem, SessionGuid));
        
        this.mapField(qbdsInventItemPriceSimProduced.uniqueId(), fieldStr(InventItemPriceSim, ItemId), fieldStr(BOMTmpUsedItem2ProducedItem, ProducedItemId));
        this.mapField(qbdsInventItemPriceSimUsed.uniqueId(), fieldStr(InventItemPriceSim, ItemId), fieldStr(BOMTmpUsedItem2ProducedItem, UsedItemId));
        
        this.mapField(qbdsInventDimProduced.uniqueId(), fieldStr(InventDim, InventSiteId), fieldStr(BOMTmpUsedItem2ProducedItem, ProducedItemSiteId));
        this.mapField(qbdsInventDimUsed.uniqueId(), fieldStr(InventDim, InventSiteId), fieldStr(BOMTmpUsedItem2ProducedItem, UsedItemSiteId));

        Enumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();
        while (enum.moveNext())
        {
            InventProductDimension productDim = enum.current();

            FieldId producedProductDimFieldId = BOMTmpUsedItem2ProducedItem::producedProductDimensionFieldId(productDim);
            FieldId usedProductDimFieldId = BOMTmpUsedItem2ProducedItem::usedProductDimensionFieldId(productDim);

            if (producedProductDimFieldId && usedProductDimFieldId)
            {
                FieldName producedProductDimFieldName = fieldId2Name(tableNum(BOMTmpUsedItem2ProducedItem), producedProductDimFieldId);
                FieldName usedProductDimFieldName = fieldId2Name(tableNum(BOMTmpUsedItem2ProducedItem), usedProductDimFieldId);
                FieldName productDimFieldName = fieldId2Name(tableNum(InventDim), productDim.parmInventDimFieldId());

                this.mapField(qbdsInventDimProduced.uniqueId(), productDimFieldName, producedProductDimFieldName);
                this.mapField(qbdsInventDimUsed.uniqueId(), productDimFieldName, usedProductDimFieldName);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init()
    {
        super();

        BOMTmpCalcWhereUsedRelation::createRelation(sessionGuid, ItemDimsWithPendingPriceLevel, TentativeDependencyGraph);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onExecuted</Name>
				<Source><![CDATA[
    protected void onExecuted()
    {
        super();

        BOMTmpCalcWhereUsedRelation::deleteForSessionGuid(sessionGuid);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    protected Query initQuery()
    {
        Query query = new Query();

        qbdsInventItemPriceSimProduced = query.addDataSource(tableNum(InventItemPriceSim));
        qbdsInventItemPriceSimProduced.addRange(fieldNum(InventItemPriceSim, FromDate)).value(queryRange(null, calcDate));
        qbdsInventItemPriceSimProduced.addRange(fieldNum(InventItemPriceSim, VersionId)).value(queryValue(versionId));
        qbdsInventItemPriceSimProduced.addRange(fieldNum(InventItemPriceSim, PriceType)).value(queryRangeConcat(queryValue(CostingVersionPriceType::Cost), CostingVersionPriceType::Purch));
        qbdsInventItemPriceSimProduced.fetchMode(QueryFetchMode::One2One);

        qbdsInventItemPriceSimUsed = qbdsInventItemPriceSimProduced.addDataSource(tableNum(InventItemPriceSim));
        qbdsInventItemPriceSimUsed.addLink(fieldNum(InventItemPriceSim, RecId), fieldNum(InventItemPriceSim, RecId));
        qbdsInventItemPriceSimUsed.fetchMode(QueryFetchMode::One2One);

        qbdsInventDimProduced = qbdsInventItemPriceSimProduced.addDataSource(tableNum(InventDim));
        qbdsInventDimProduced.addLink(fieldNum(InventItemPriceSim, InventDimId), fieldNum(InventDim, inventDimId));
        qbdsInventDimProduced.fetchMode(QueryFetchMode::One2One);
        if (inventSiteId)
        {
            qbdsInventDimProduced.addRange(fieldNum(InventDim, InventSiteId)).value(queryValue(inventSiteId));
        }

        qbdsInventDimUsed = qbdsInventDimProduced.addDataSource(tableNum(InventDim));
        qbdsInventDimUsed.addLink(fieldNum(InventDim, RecId), fieldNum(InventDim, RecId));
        qbdsInventDimUsed.fetchMode(QueryFetchMode::One2One);

        qbdsCalcWhereUsedRelation = qbdsInventDimProduced.addDataSource(tableNum(BOMTmpCalcWhereUsedRelation));
        qbdsCalcWhereUsedRelation.addRange(fieldNum(BOMTmpCalcWhereUsedRelation, SessionGuid)).value(queryValue(sessionGuid));
        qbdsCalcWhereUsedRelation.fetchMode(QueryFetchMode::One2One);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTargetCursor</Name>
				<Source><![CDATA[
    protected Common initTargetCursor()
    {
        return autoRelation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static BOMCalcWhereUsedListFromItemDimCombinationsPopulator construct()
    {
        return new BOMCalcWhereUsedListFromItemDimCombinationsPopulator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPopulator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>BOMCalcWhereUsedListFromItemDimCombinationsPopulator</c> class based on the provided <c>BOMCalcWhereUsedList</c> class instance.
    /// </summary>
    /// <param name = "_calcWhereUsedList">Instance of the <c>BOMCalcWhereUsedList</c> class that creates a list of items that should be recalculated.</param>
    /// <returns>An instance of the <c>BOMCalcWhereUsedListFromItemDimCombinationsPopulator</c> class.</returns>
    public static BOMCalcWhereUsedListFromItemDimCombinationsPopulator newPopulator(BOMCalcWhereUsedList _calcWhereUsedList)
    {
        var populator = BOMCalcWhereUsedListFromItemDimCombinationsPopulator::construct();

        populator.calcDate = _calcWhereUsedList.parmCalcDate();
        populator.versionId = _calcWhereUsedList.parmVersionId();
        populator.inventSiteId = _calcWhereUsedList.parmInventSiteId();
        populator.sessionGuid = _calcWhereUsedList.parmSessionGuid() ? _calcWhereUsedList.parmSessionGuid() : newGuid();
        
        return populator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>