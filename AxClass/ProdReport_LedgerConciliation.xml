<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdReport_LedgerConciliation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProdReport_LedgerConciliation extends ProdReport_Balance
{
    NoYes     showDifferencesOnly;
    NoYes     perPostingType;

    DialogField dialogDifferencesOnly;
    DialogField dialogPerPostingType;

    #define.CurrentVersion(3)
    #localmacro.CurrentList
        showDifferencesOnly,
        PerPostingType
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountNameSRS</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the account name of the account from the ledger table.
    /// </summary>
    /// <param name="_account">
    ///    The account number of the account.
    /// </param>
    /// <returns>
    ///    The name of the account.
    /// </returns>
    public AccountName accountNameSRS(AccountNum _account)
    {
        return MainAccount::getLocalizedNameByMainAccountId(_account);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog(DialogRunbase  _dialog = dialog)
    {
        _dialog = super(_dialog);

        dialogDifferencesOnly   = _dialog.addFieldValue(enumstr(NoYes), showDifferencesOnly, "@SYS57830", "@SYS57831");
        dialogPerPostingType    = _dialog.addFieldValue(enumstr(NoYes), perPostingType, "@SYS59548", "@SYS59549");

        return _dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        showDifferencesOnly  = dialogDifferencesOnly.value();
        perPostingType       = dialogPerPostingType.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLedgerTrans</Name>
				<Source><![CDATA[
    void insertLedgerTrans(GeneralJournalAccountEntry _generalJournalAccountEntry)
    {
        TmpProdBalance              tmpProdBalanceSum;
        GeneralJournalEntry         generalJournalEntry;
        GeneralJournalAccountEntry  generalJournalAccountEntry;
        DimensionAttributeLevelValueView   dimAttrLevelValueView;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherLink;

        tmpProdBalanceSum.setTmpData(tmpProdBalance);

        LedgerPostingType postingType = perPostingType ?_generalJournalAccountEntry.PostingType : LedgerPostingType::None;

        select tmpProdBalanceSum
            join Voucher, VoucherDataAreaId, AccountingDate, GeneralJournalEntry from subledgerVoucherLink
                where tmpProdBalanceSum.DateFinancial == subledgerVoucherLink.AccountingDate &&
                    tmpProdBalanceSum.Voucher       == subledgerVoucherLink.Voucher &&
                    tmpProdBalanceSum.dataAreaId  == subledgerVoucherLink.VoucherDataAreaId
            join RecId from generalJournalEntry
                where generalJournalEntry.RecId == subledgerVoucherLink.GeneralJournalEntry
            join RecId, PostingType, LedgerDimension from generalJournalAccountEntry
                where   generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId &&
                        generalJournalAccountEntry.PostingType      == postingType &&
                        generalJournalAccountEntry.LedgerDimension  == tmpProdBalanceSum.LedgerDimension
            join DisplayValue from dimAttrLevelValueView
               where dimAttrLevelValueView.ValueCombinationRecId    == _generalJournalAccountEntry.LedgerDimension;

        if (tmpProdBalanceSum)
        {
            tmpProdBalanceSum.PostedValueLedger        += generalJournalAccountEntry.AccountingCurrencyAmount;
            tmpProdBalanceSum.update();
        }
        else
        {
            tmpProdBalanceSum.LedgerDimension           = generalJournalAccountEntry.LedgerDimension;
            tmpProdBalanceSum.Posting                   = postingType;
            tmpProdBalanceSum.DateFinancial             = generalJournalEntry.AccountingDate;
            tmpProdBalanceSum.Voucher                   = subledgerVoucherLink.Voucher;
            tmpProdBalanceSum.PostedValueLedger         = generalJournalAccountEntry.AccountingCurrencyAmount;
            tmpProdBalanceSum.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLedgerTransSRS</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Selects the data from the <c>tmpProdBalanceSum</c> table.
    /// </summary>
    /// <param name="_generalJournalAccountEntry">
    ///    A <c>GeneralJournalAccountEntry</c> table.
    /// </param>
    /// <param name="_perPostingType">
    ///    A yes or no posting type; optional.
    /// </param>
    public void insertLedgerTransSRS(GeneralJournalAccountEntry _generalJournalAccountEntry, NoYes  _perPostingType = NoYes::No)
    {
        TmpProdBalance                      tmpProdBalanceSum;
        GeneralJournalEntry                 generalJournalEntry;
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        DimensionAttributeLevelValueView    dimAttrLevelValueView;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherLink;

        tmpProdBalanceSum.setTmpData(tmpProdBalance);

        LedgerPostingType postingType = _perPostingType ?_generalJournalAccountEntry.PostingType : LedgerPostingType::None;

        select tmpProdBalanceSum
            join Voucher, VoucherDataAreaId, AccountingDate, GeneralJournalEntry from subledgerVoucherLink
                where tmpProdBalanceSum.DateFinancial == subledgerVoucherLink.AccountingDate &&
                    tmpProdBalanceSum.Voucher       == subledgerVoucherLink.Voucher &&
                    tmpProdBalanceSum.dataAreaId  == subledgerVoucherLink.VoucherDataAreaId
            join RecId from generalJournalEntry
                where generalJournalEntry.RecId == subledgerVoucherLink.GeneralJournalEntry
            join RecId, PostingType, LedgerDimension from generalJournalAccountEntry
                where generalJournalAccountEntry.generalJournalEntry == generalJournalEntry.RecId &&
                    generalJournalAccountEntry.PostingType      == postingType &&
                    generalJournalAccountEntry.LedgerDimension  == tmpProdBalanceSum.LedgerDimension
            join DisplayValue from dimAttrLevelValueView
               where dimAttrLevelValueView.ValueCombinationRecId    == generalJournalAccountEntry.LedgerDimension;

        if (tmpProdBalanceSum)
        {
            tmpProdBalanceSum.PostedValueLedger        += generalJournalAccountEntry.AccountingCurrencyAmount;
            tmpProdBalanceSum.update();
        }
        else
        {
            tmpProdBalanceSum.LedgerDimension    = generalJournalAccountEntry.LedgerDimension;
            tmpProdBalanceSum.Posting            = postingType;
            tmpProdBalanceSum.DateFinancial      = generalJournalEntry.AccountingDate;
            tmpProdBalanceSum.Voucher            = subledgerVoucherLink.Voucher;
            tmpProdBalanceSum.PostedValueLedger  = generalJournalAccountEntry.AccountingCurrencyAmount;
            tmpProdBalanceSum.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpProdBalance</Name>
				<Source><![CDATA[
    void insertTmpProdBalance(TmpProdBalance _tmpProdBalance)
    {
        TmpProdBalance      tmpProdBalanceSum;
        tmpProdBalanceSum.setTmpData(tmpProdBalance);

        LedgerPostingType postingType = perPostingType ?_tmpProdBalance.Posting : LedgerPostingType::None;

        select tmpProdBalanceSum
            index hint PostingAccountDateIdx
            where   tmpProdBalanceSum.LedgerDimension   == _tmpProdBalance.LedgerDimension          &&
                    tmpProdBalanceSum.Posting           == postingType                      &&
                    tmpProdBalanceSum.DateFinancial     == _tmpProdBalance.DateFinancial    &&
                    tmpProdBalanceSum.Voucher           == _tmpProdBalance.Voucher;

        if (tmpProdBalanceSum)
        {
            tmpProdBalanceSum.PostedValue        += _tmpProdBalance.PostedValue;
            tmpProdBalanceSum.update();
        }
        else
        {
            tmpProdBalanceSum.LedgerDimension    = _tmpProdBalance.LedgerDimension;
            tmpProdBalanceSum.Posting            = postingType;
            tmpProdBalanceSum.DateFinancial      = _tmpProdBalance.DateFinancial;
            tmpProdBalanceSum.Voucher            = _tmpProdBalance.Voucher;
            tmpProdBalanceSum.PostedValue        = _tmpProdBalance.PostedValue;
            tmpProdBalanceSum.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpProdBalanceSRS</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Selects the data from the <c>tmpProdBalance </c>table.
    /// </summary>
    /// <param name="_tmpProdBalance">
    ///    A <c>tmpProdBalance</c> table.
    /// </param>
    /// <param name="_perPostingType">
    ///    A yes or no posting type; optional.
    /// </param>
    public void insertTmpProdBalanceSRS(TmpProdBalance _tmpProdBalance,NoYes  _perPostingType = NoYes::No)
    {
        TmpProdBalance      tmpProdBalanceSum;
        tmpProdBalanceSum.setTmpData(tmpProdBalance);

        LedgerPostingType postingType = _perPostingType ?_tmpProdBalance.Posting : LedgerPostingType::None;

        select tmpProdBalanceSum
            index hint PostingAccountDateIdx
            where   tmpProdBalanceSum.LedgerDimension           == _tmpProdBalance.LedgerDimension          &&
                    tmpProdBalanceSum.Posting                   == postingType                      &&
                    tmpProdBalanceSum.DateFinancial             == _tmpProdBalance.DateFinancial    &&
                    tmpProdBalanceSum.Voucher                   == _tmpProdBalance.Voucher;

        if (tmpProdBalanceSum)
        {
            tmpProdBalanceSum.PostedValue        += _tmpProdBalance.PostedValue;
            tmpProdBalanceSum.update();
        }
        else
        {
            tmpProdBalanceSum.LedgerDimension            = _tmpProdBalance.LedgerDimension;
            tmpProdBalanceSum.Posting            = postingType;
            tmpProdBalanceSum.DateFinancial      = _tmpProdBalance.DateFinancial;
            tmpProdBalanceSum.Voucher            = _tmpProdBalance.Voucher;
            tmpProdBalanceSum.PostedValue        = _tmpProdBalance.PostedValue;
            tmpProdBalanceSum.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowOnlyDifferences</Name>
				<Source><![CDATA[
    NoYes parmShowOnlyDifferences(NoYes _showDifferencesOnly = showDifferencesOnly)
    {
        showDifferencesOnly = _showDifferencesOnly;
        return showDifferencesOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        container       base;
        boolean         ret;
        Integer         version     = conpeek(packedClass,1);
        NoYes           dummy;

        switch (version)
        {
            case 1:
                [version, dummy, base] = packedClass;
                ret = super(base);
                break;

            case #CurrentVersion:
                [version, #CurrentList, base] = packedClass;
                ret = super(base);
                break;
            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePosting</Name>
				<Source><![CDATA[
    void updatePosting()
    {
        TmpProdBalance              tmpProdBalanceLedger;
        GeneralJournalEntry         generalJournalEntry;
        GeneralJournalAccountEntry  generalJournalAccountEntry;
        DimensionAttributeLevelValueView   dimAttrLevelValueView;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherLink;

        super();

        tmpProdBalanceLedger.setTmpData(tmpProdBalance);

        while select LedgerDimension,DateFinancial,Voucher from tmpProdBalanceLedger
            group by LedgerDimension
        {
            while select Voucher, VoucherDataAreaId, AccountingDate from subledgerVoucherLink
                where subledgerVoucherLink.Voucher == tmpProdBalanceLedger.Voucher &&
                    subledgerVoucherLink.VoucherDataAreaId == tmpProdBalanceLedger.dataAreaId &&
                    subledgerVoucherLink.AccountingDate == tmpProdBalanceLedger.DateFinancial
                join RecId, AccountingDate from generalJournalEntry
                    where generalJournalEntry.RecId == subledgerVoucherLink.GeneralJournalEntry
                join RecId, PostingType, LedgerDimension from generalJournalAccountEntry
                    where   generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId &&
                            generalJournalAccountEntry.LedgerDimension  == tmpProdBalanceLedger.LedgerDimension
                join DisplayValue, ValueCombinationRecId  from dimAttrLevelValueView
                   where dimAttrLevelValueView.ValueCombinationRecId    == generalJournalAccountEntry.LedgerDimension

            {
                this.insertLedgerTrans(generalJournalAccountEntry);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePostingSRS</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Selects the data from the <c>tmpProdBalanceLedger</c> table.
    /// </summary>
    /// <param name="_fromDate">
    ///    The from date from which to select the data.
    /// </param>
    /// <param name="_toDate">
    ///    The to date to from which to select the data.
    /// </param>
    /// <param name="_perPostingType">
    ///    A yes or no <c>PostingType</c>; optional.
    /// </param>
    public void updatePostingSRS(date _fromDate,date _toDate,NoYes  _perPostingType = NoYes::No)
    {
        TmpProdBalance              tmpProdBalanceLedger;
        GeneralJournalEntry         generalJournalEntry;
        GeneralJournalAccountEntry  generalJournalAccountEntry;
        DimensionAttributeLevelValueView   dimAttrLevelValueView;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherLink;

        super(_fromDate,_toDate,_perPostingType);

        tmpProdBalanceLedger.setTmpData(tmpProdBalance);

        while select LedgerDimension from tmpProdBalanceLedger
            group by LedgerDimension
        {
            while select Voucher, VoucherDataAreaId, AccountingDate from subledgerVoucherLink
                 where subledgerVoucherLink.Voucher == tmpProdBalanceLedger.Voucher &&
                    subledgerVoucherLink.VoucherDataAreaId == tmpProdBalanceLedger.dataAreaId &&
                    subledgerVoucherLink.AccountingDate >= _fromDate &&
                    subledgerVoucherLink.AccountingDate <= _toDate
                join Recid from generalJournalEntry
                    where generalJournalEntry.RecId == subledgerVoucherLink.GeneralJournalEntry
                join RecId, PostingType, LedgerDimension from generalJournalAccountEntry
                    where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId &&
                        generalJournalAccountEntry.LedgerDimension  == tmpProdBalanceLedger.LedgerDimension
                join DisplayValue from dimAttrLevelValueView
                    where dimAttrLevelValueView.ValueCombinationRecId    == generalJournalAccountEntry.LedgerDimension

            {
                 this.insertLedgerTransSRS(generalJournalAccountEntry,_perPostingType);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
