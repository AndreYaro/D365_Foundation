<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustCollectionLetterCancel</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustCollectionLetterCancel extends RunBaseBatch implements BatchRetryable
{
    QueryRun queryRun; // This field is packed explicitly in the pack method.
    
    #define.CurrentVersion(1)
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    ///    created in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialogRunbase = super();

        return dialogRunbase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>SysLastValue</c> record for this user and object.
    /// </summary>
    /// <remarks>
    ///    This is a customization of the standard <c>SysLastValues</c> functionality and is required to
    ///    support the split implementation of serializing (by using <c>pack</c> and <c>unpack</c>) and
    ///    persisting user input (<c>SysLastValue</c>).
    /// </remarks>
    public void getLast()
    {
        // Don't make the call to super as the #CurrentList and #SysLastValues lists are different,
        // requiring that we have specialized logic for the SysLastValues implementation.
        // super();

        // The following fields must be maintained to mimic the functionality of the overriden
        // method.
        getLastCalled = true;
        inGetSaveLast = true;
        
        // This is a RunBaseBatch class. Manually restore the user's settings on the batch tab since
        // super() is not being called.
        xSysLastValue::getLast(this.batchInfo());

        // The following fields must be maintained to mimic the functionality of the overriden
        // method.
        inGetSaveLast = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables.
    /// </summary>
    /// <remarks>
    ///    This method is called when no <c>SysLastValue</c> record can be found when calling the
    ///    <c>GetLast</c> method of the <c>SysLastValue</c> class. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        super();

        this.queryBuild();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the <c>CustCollectionLetterCancel</c> class.
    /// </summary>
    /// <returns>A new instance of the <c>CustCollectionLetterCancel</c> class.</returns>
    public static CustCollectionLetterCancel construct()
    {
        return new CustCollectionLetterCancel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a new instance of the <c>CustCustollectionLetterCancel</c> class.
    /// </summary>
    /// <remarks>
    /// This method is protected and accessible only from this class or any classes that inherit from it.
    /// Use the construct() method for external instantiation of this class.
    /// </remarks>
    protected void new()
    {
        super();

        queryRun = new QueryRun(querystr(CustCollectionLetterJob));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, [queryRun.pack()]];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    public void queryBuild()
    {
        QueryBuildRange rangeStatus;

        rangeStatus = queryRun.query().dataSourceTable(tablenum(CustCollectionLetterJour)).findRange(fieldnum(CustCollectionLetterJour, Status));
        rangeStatus.status(RangeStatus::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuildUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>QueryRun</c> object to provide ranges based on the <c>CustInterestCollectionLetterJour</c> record.
    /// </summary>
    /// <param name = "_custCollectionLetterJour">The customer interest letter journal record.</param>
    protected void queryBuildUpdate(CustCollectionLetterJour _custCollectionLetterJour)
    {
        // Add filters to the query.
        queryRun.query().dataSourceTable(tablenum(CustCollectionLetterJour)).rangeField(fieldnum(CustCollectionLetterJour, CollectionLetterNum)).value(_custCollectionLetterJour.CollectionLetterNum);
        queryRun.query().dataSourceTable(tablenum(CustCollectionLetterJour)).rangeField(fieldnum(CustCollectionLetterJour, AccountNum)).value(_custCollectionLetterJour.AccountNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the instance of the <c>QueryRun</c> class that is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class that is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is the dialog box, and if a Select menu item is added to a
    ///    dialog box. Do not create an instance of the <c>QueryRun</c> class when this method is called.
    ///    Instead, create an instance in the <c>unpack</c> method and the <c>initParmDefault</c> method or in
    ///    the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustCollectionLetterJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current <c>CustCollectionLetterJour</c> record from the query.
    /// </summary>
    /// <returns>The customer collection letter journal record.</returns>
    protected CustCollectionLetterJour getCustCollectionLetterJour()
    {
        return queryRun.get(tablenum(CustCollectionLetterJour));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayBeCancelled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether or not the customer collection letter journal can be cancelled.
    /// </summary>
    /// <param name = "_custCollectionLetterJour">The customer collection letter journal record.</param>
    /// <returns>true if the customer collection letter journal can be cancelled; otherwise, false.</returns>
    protected boolean mayBeCancelled(CustCollectionLetterJour _custCollectionLetterJour)
    {
        return _custCollectionLetterJour.mayBeCancelled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelCollectionLetterCodeCustTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Conditionally, cancels the customer transaction related to the customer collection letter journal.
    /// </summary>
    /// <param name = "_custCollectionLetterJour">The customer collection letter journal record.</param>
    protected void cancelCollectionLetterCodeCustTrans(CustCollectionLetterJour _custCollectionLetterJour)
    {
        if (CustParameters::find().CollectionLetterCodeUpdate == CustPostedPrinted::Printed && _custCollectionLetterJour.JournalPrinted)
        {
            _custCollectionLetterJour.cancelCollectionLetterCodeCustTrans();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustCollectionLetterJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the customer collection letter journal record.
    /// </summary>
    /// <param name = "_custCollectionLetterJour">The customer collection letter journal record.</param>
    protected void updateCustCollectionLetterJour(CustCollectionLetterJour _custCollectionLetterJour)
    {
        _custCollectionLetterJour.setCancelling();
        _custCollectionLetterJour.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCustCollectionLetterCancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the cancellation of the customer collection letter.
    /// </summary>
    protected void processCustCollectionLetterCancel()
    {
        CustCollectionLetterJour custCollectionLetterJour = this.getCustCollectionLetterJour();

        if (this.mayBeCancelled(custCollectionLetterJour))
        {
            this.updateCustCollectionLetterJour(custCollectionLetterJour);

            this.cancelCollectionLetterCodeCustTrans(custCollectionLetterJour);

            info(strfmt("@SYS66281", custCollectionLetterJour.CollectionLetterNum,
                custCollectionLetterJour.CollectionLetterCode,
                custCollectionLetterJour.AccountNum));
        }
        else
        {
            info(strfmt("@SYS66282", custCollectionLetterJour.CollectionLetterNum,
                custCollectionLetterJour.CollectionLetterCode,
                custCollectionLetterJour.AccountNum));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        
        try
        {
            ttsbegin;

            queryRun.reset();

            while (queryRun.next())
            {
                this.processCustCollectionLetterCancel();
            }

            ttscommit;
        }

        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

        catch (Exception::Error)
        {
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    ///    true if the task is run on the server; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Classes that extend the <c>RunBaseBatch</c> class must override the <c>runsImpersonated</c> method
    ///    and return false if the tasks must be run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Saves the <c>SysLastValue</c> record for this user and object.
    /// </summary>
    /// <remarks>
    ///    This is a customization of the standard <c>SysLastValues</c> functionality and is required to
    ///    support the split implementation of serializing (by using <c>pack</c> and <c>unpack</c>) and
    ///    persisting user input (<c>SysLastValue</c>).
    /// </remarks>
    public void saveLast()
    {
        // Don't make the call to super as the #CurrentList and #SysLastValues lists are different,
        // requiring that we have specialized logic for the SysLastValues implementation.
        //super();

        // The following fields must be maintained to mimic the functionality of the overriden
        // method.
        inGetSaveLast = true;
        
        // This is a RunBaseBatch derivative class. Manually save the user's settings on the batch tab since
        // super() is not being called.
        xSysLastValue::saveLast(this.batchInfo());

        // The following fields must be maintained to mimic the functionality of the overriden
        // method.
        inGetSaveLast = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether to add a select button to the dialog.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    If this button is clicked it will show the query form. Therefore, the <c>queryRun</c> method must
    ///    return a valid <c>QueryRun</c> object.If the return value of this method is changed to false, the
    ///    button will no longer be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = conpeek(_packedClass, 1);
        container values, packedQueryRun;

        switch (version)
        {
            case #CurrentVersion:
                // Extract the version and values from the packed class.
                [version, values] = _packedClass;

                // Extract the values from the values container.
                [packedQueryRun] = values;

                break;
            default :
                return false;
        }

        if (packedQueryRun)
        {
            //Re-initialize the queryRun object from the packed queryRun.
            queryRun = new QueryRun(packedQueryRun);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS9648";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        CustCollectionLetterCancel custCollectionLetterCancel = CustCollectionLetterCancel::initFromArgs(args);
        
        // Run the CustCollectionLetterCancel job.
        if (custCollectionLetterCancel.allowPrompt() && custCollectionLetterCancel.prompt())
        {
            custCollectionLetterCancel.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    protected static CustCollectionLetterCancel initFromArgs(Args _args)
    {
        CustCollectionLetterJour custCollectionLetterJour;

        // Initialize the CustCollectionLetterCancel object.
        if (_args.record().TableId == tablenum(CustCollectionLetterJour))
        {
            custCollectionLetterJour = _args.record();
        }

        CustCollectionLetterCancel custCollectionLetterCancel = CustCollectionLetterCancel::construct();
        custCollectionLetterCancel.queryBuildUpdate(custCollectionLetterJour);

        return custCollectionLetterCancel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowPrompt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether or not the prompt is allowed during processing.
    /// </summary>
    /// <returns>true, if prompt is allowed; otherwise, false.</returns>
    protected boolean allowPrompt()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>