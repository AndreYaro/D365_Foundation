<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureEditLinesEngineCust_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class FactureEditLinesEngineCust_RU extends FactureEditLinesEngineCustVend_RU
{
    boolean             factureExportType;

    InventOwnerId_RU    firstInventOwnerId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addressDefaultSec</Name>
				<Source><![CDATA[
    protected LogisticsPostalAddress addressDefaultSec()
    {
        LogisticsPostalAddress logisticsPostalAddress;
        SalesTable             salesTable;
        CustInvoiceJour        custInvoiceJour;

        switch (sourceRecord.TableId)
        {
            case tablenum(SalesTable)     :
                salesTable             = sourceRecord as SalesTable;
                logisticsPostalAddress = salesTable.deliveryAddress();
                break;

            case tablenum(CustInvoiceJour):
                custInvoiceJour        = sourceRecord as CustInvoiceJour;
                logisticsPostalAddress = LogisticsPostalAddress::findRecId(custInvoiceJour.DeliveryPostalAddress);
                break;
        }

        if (!logisticsPostalAddress)
        {
            logisticsPostalAddress = LogisticsLocationEntity::findPostalAddress(CustTable::find(customerControl.text()), LogisticsLocationRoleType::Invoice);
        }

        return logisticsPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExportVAT</Name>
				<Source><![CDATA[
    protected boolean checkExportVAT(CustVendInvoiceTrans _trans)
    {
        CustInvoiceTrans   custInvoiceTransLocal;
        boolean            ret      = true;
        boolean            isExport = true;

        if (_trans.TableId == tablenum(CustInvoiceTrans))
        {
            custInvoiceTransLocal = _trans;
            isExport              = custInvoiceTransLocal.isExportTrans_RU();

            if (transSet.elements() == 0)
            {
                factureExportType = isExport;
            }

            if (factureExportType == isExport)
            {
                ret = true;
            }
            else
            {
                ret = checkFailed("@GLS112988");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventOwnerId</Name>
				<Source><![CDATA[
    protected boolean checkInventOwnerId(Common _common)
    {
        boolean             ok = true;
        CustInvoiceTrans    custInvoiceTrans;
        CustInvoiceJour     custInvoiceJour;
        ;
        if (! transSet.elements())
        {
            return true;
        }

        switch (_common.TableId)
        {
            case tablenum(CustInvoiceTrans):
                custInvoiceTrans = _common;
                if (firstInventOwnerId != custInvoiceTrans.custInvoiceJour().custInvoiceJour_RU().InventOwnerId_RU)
                {
                    ok = checkFailed(strfmt("@GLS115626", fieldid2pname(tablenum(InventDim), fieldnum(InventDim, InventOwnerId_RU))));
                }
                break;
            case tablenum(CustInvoiceJour):
                custInvoiceJour = _common;
                if (firstInventOwnerId != custInvoiceJour.custInvoiceJour_RU().InventOwnerId_RU)
                {
                    ok = checkFailed(strfmt("@GLS115627", fieldid2pname(tablenum(InventDim), fieldnum(InventDim, InventOwnerId_RU))));
                }
                break;
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJour</Name>
				<Source><![CDATA[
    protected boolean checkJour(CustVendInvoiceJour _jour, boolean _proforma = false)
    {
        boolean ret = super(_jour, _proforma);
        ;
        ret = ret && this.checkInventOwnerId(_jour);

        this.findTransByJour(_jour);
        while (ret && ((rslTmpTrans && rslTmpTrans.next(tmpTrans)) || (!rslTmpTrans && tmpTrans)))
        {
            ret = ret &&
                  this.checkExportVAT(tmpTrans) &&
                  this.checkInventOwnerId(tmpTrans);

            if (! rslTmpTrans)
            {
                next tmpTrans;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
    protected boolean checkTrans(CustVendInvoiceTrans _trans)
    {
        boolean ret;

        ret = super(_trans);

        ret = ret && this.checkExportVAT(_trans);

        ret = ret && this.checkInventOwnerId(_trans);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clear</Name>
				<Source><![CDATA[
    public void clear()
    {
        super();

        firstInventOwnerId = "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>commContractPartnerType</Name>
				<Source><![CDATA[
    protected ModuleCustVend commContractPartnerType()
    {
        return ModuleCustVend::Cust;
    }

]]></Source>
			</Method>
			<Method>
				<Name>commPartner</Name>
				<Source><![CDATA[
    /// <summary>
    /// Goods seller or buyer code.
    /// </summary>
    /// <returns>
    /// Seller or buyer code.
    /// </returns>
    public CustVendAC commPartner()
    {
        return sellerControl.text();
    }

]]></Source>
			</Method>
			<Method>
				<Name>contragentControlOK</Name>
				<Source><![CDATA[
    protected boolean contragentControlOK()
    {
        return customerControl.text() ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contragentInit</Name>
				<Source><![CDATA[
    public void contragentInit()
    {
        if (sourceRecord)
        {
            super();
        }
        else
        {
            this.contragent((select firstonly AccountNum from custTable order by AccountNum).AccountNum);
        }
    
        this.initUseOriginalDocumentAsFactureFromCust();    
    }

]]></Source>
			</Method>
			<Method>
				<Name>contragentInitDefault</Name>
				<Source><![CDATA[
    public void contragentInitDefault()
    {
        customerControl.text(contragent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>criteriaChanged</Name>
				<Source><![CDATA[
    public void criteriaChanged(boolean _clear = true)
    {
        boolean contragentChanged = contragent != customerControl.text();

        super(_clear);

        this.contragent(customerControl.text());
        if (contragentChanged)
        {
            this.initUseOriginalDocumentAsFactureFromCust();
        }
  
        custInvoiceJourDS.executeQuery();
        custInvoiceTransDS.executeQuery();
        markupDS.executeQuery();
        this.buildTree();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsExecuteMarkup</Name>
				<Source><![CDATA[
    public void dsExecuteMarkup()
    {
        MarkupTrans      markupCursor = markupDS.cursor();
        CustInvoiceJour  tJour        = custInvoiceJourDS.cursor();
        CustInvoiceTrans tTrans;

        super();

        select markupCursor
            where   markupCursor.CustVendPosted_RU                         &&
                  ! markupCursor.ItemPosted_RU
        exists join tTrans
            where (
                   markupCursor.TransTableId  == tTrans.TableId            &&
                   markupCursor.TransRecId    == tTrans.RecId              &&
                   tTrans.SalesId             == tJour.SalesId             &&
                   tTrans.InvoiceId           == tJour.InvoiceId           &&
                   tTrans.InvoiceDate         == tJour.InvoiceDate         &&
                   tTrans.NumberSequenceGroup == tJour.NumberSequenceGroup
                  )
                  ||
                  (
                   markupCursor.TransTableId  == tJour.TableId             &&
                   markupCursor.TransRecId    == tJour.RecId
                  );

        markupDS.positionToRecord(markupCursor);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsInitInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits invoice journal dataset.
    /// </summary>
    public void dsInitInvoiceJour()
    {
        super();

        if (dsCommContract)
        {
            findOrCreateRange_W(
                dsCommContract,
                fieldNum(AgreementHeaderExt_RU, AgencyAgreement),
                queryValue(AgencyAgreement_RU::PurchaseCommission));
        }

        commJourAccountRange = dsCommExistsJour.addRange(fieldNum(CommReportTransItem_RU, VendAccount));
        commJourAccountRange.status(RangeStatus::Hidden);

        commTransAccountRange = dsCommReportTrans.addRange(fieldNum(CommReportTransItem_RU, VendAccount));
        commTransAccountRange.status(RangeStatus::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDiscExistsFacture</Name>
				<Source><![CDATA[
    protected boolean endDiscExistsFacture(Common _jour)
    {
        CustInvoiceJour localCustInvoiceJour = _jour as CustInvoiceJour;

        return FactureTrans_RU::existExtraLines(FactureModule_RU::Cust,
                                                localCustInvoiceJour.SalesId,
                                                localCustInvoiceJour.InvoiceId,
                                                localCustInvoiceJour.InvoiceDate,
                                                localCustInvoiceJour.NumberSequenceGroup,
                                                "",
                                                FactureLineType_RU::InvoiceEndDisc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDiscGroup</Name>
				<Source><![CDATA[
    protected FormGroupControl endDiscGroup()
    {
        return custEndDiscGroupControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>extFactureIdNumSeqCode</Name>
				<Source><![CDATA[
    public NumberSequenceCode extFactureIdNumSeqCode()
    {
        NumberSequenceCode ret;

        if (this.extFactureIdNumSeqGroup())
        {
            ret = NumberSequenceTable::find(
                            NumberSequenceGroupRef::findNaturalKey(correctControl.value()                                         ?
                                                                   CustParameters::numRefCorrectFactureExternalId_RU().NumberSequenceDatatype :
                                                                   CustParameters::numRefFactureExternalId_RU().NumberSequenceDatatype,
                                                                   NumberSeqScopeFactory::createDefaultScope().getId(),
                                                                   this.extFactureIdNumSeqGroup()).NumberSequenceId).NumberSequence;
        }

        if (! ret)
        {
            ret = correctControl.value()                                             ?
                  CustParameters::numRefCorrectFactureExternalId_RU().NumberSequenceTable().NumberSequence :
                  CustParameters::numRefFactureExternalId_RU().NumberSequenceTable().NumberSequence;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>extFactureIdNumSeqGroup</Name>
				<Source><![CDATA[
    public NumberSequenceGroupId extFactureIdNumSeqGroup(NumberSequenceGroupId _id = extFactureIdNumSeqGroup)
    {
        extFactureIdNumSeqGroup = _id;
        return extFactureIdNumSeqGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findJourByTrans</Name>
				<Source><![CDATA[
    protected void findJourByTrans(Common _trans)
    {
        CustVendInvoiceTrans localCustVendInvoiceTrans = _trans;

        tmpJour = CustInvoiceJour::findFromCustInvoiceTrans(localCustVendInvoiceTrans.SalesPurchId_RU,
                                                            localCustVendInvoiceTrans.InvoiceNum,
                                                            localCustVendInvoiceTrans.InvoiceDate,
                                                            localCustVendInvoiceTrans.NumberSequenceGroupId_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransByJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds invoice lines for invoice header.
    /// </summary>
    /// <param name="_jour">
    /// Invoice header buffer.
    /// </param>
    protected void findTransByJour(Common _jour)
    {
        CustInvoiceTrans        tmpInvoiceTrans;
        CommReportTransItem_RU  tmpReportTransItem;
        CustVendInvoiceJour     localCustVendInvoiceJour = _jour;

        if (dsCommReportTrans && dsCommReportTrans.enabled())
        {
            rslTmpTrans = new RecordSortedList(tableNum(CustInvoiceTrans));
            rslTmpTrans.sortOrder(fieldNum(CustInvoiceTrans, RecId),
                                  fieldNum(CustInvoiceTrans, RefCommReportTrans_RU));

            tmpReportTransItem = custCommReportTransItemDS.getFirst();
            while (tmpReportTransItem)
            {
                tmpInvoiceTrans = CustInvoiceTrans::findRecId(tmpReportTransItem.RefInvoiceTrans);
                tmpInvoiceTrans.RefCommReportTrans_RU   = tmpReportTransItem.RecId;

                rslTmpTrans.ins(tmpInvoiceTrans);
                tmpReportTransItem = custCommReportTransItemDS.getNext();
            }
        }
        else
        {
            rslTmpTrans = null;
            select tmpTrans
                where tmpTrans.SalesPurchId_RU          == localCustVendInvoiceJour.Num         &&
                        tmpTrans.InvoiceNum               == localCustVendInvoiceJour.InvoiceId   &&
                        tmpTrans.InvoiceDate              == localCustVendInvoiceJour.InvoiceDate &&
                        tmpTrans.NumberSequenceGroupId_RU == localCustVendInvoiceJour.NumberSequenceGroupId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFactureExternalId</Name>
				<Source><![CDATA[
    public FactureExternalId_RU getFactureExternalId(FactureExternalId_RU _manualEnteredFactureExternalId)
    {
        FactureExternalId_RU ret = _manualEnteredFactureExternalId;

        if (!ret &&
        correctionTypeControl.selection() == FactureCorrectionType_RU::Unknown &&
        useOriginalDocumentAsFactureControl &&
        useOriginalDocumentAsFactureControl.value())
        {
            if (jourSet.elements() == 1)
            {
                jourEn = jourSet.getEnumerator();
                jourEn.moveNext();

                select firstonly tmpJour
                where tmpJour.RecId == jourEn.current();
                ret = tmpJour.InvoiceId;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeTrans</Name>
				<Source><![CDATA[
    public IncludeInFacture_RU includeTrans(boolean _set, Common _trans, IncludeInFacture_RU _include)
    {
        IncludeInFacture_RU     ret;
        CustVendInvoiceTrans    invoiceTrans = _trans;
        CommReportTransItem_RU  tmpReportTransItem;

        if (_set && dsCommReportTrans && dsCommReportTrans.enabled())
        {
            tmpReportTransItem = custCommReportTransItemDS.getFirst();
            while (tmpReportTransItem)
            {
                if (tmpReportTransItem.RefInvoiceTrans == _trans.RecId)
                {
                    invoiceTrans.RefCommReportTrans_RU = tmpReportTransItem.RecId;
                    ret = super(_set, invoiceTrans, _include);

                }
                tmpReportTransItem = custCommReportTransItemDS.getNext();
            }
        }
        else
        {
            ret = super(_set, _trans, _include);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCorrect</Name>
				<Source><![CDATA[
    public void initCorrect()
    {
        correctControl.value(CustInvoiceJour::findRecId(sourceRecord.RecId).custInvoiceJour_RU().Correct_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCorrectionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes correction type field in <c>FactureEditLines_RU</c> form.
    /// </summary>
    public void initCorrectionType()
    {
        CustInvoiceJour callerCustInvoiceJour;
        CustInvoiceJour_RU custInvoiceJourRU;

        switch (sourceRecord.TableId)
        {
            case tablenum(SalesTable)      :
                select firstonly callerCustInvoiceJour
                    where callerCustInvoiceJour.SalesId == sourceRecord.(fieldnum(SalesTable, SalesId))
                notExists join custInvoiceJourRU
                    where custInvoiceJourRU.CustInvoiceJour == callerCustInvoiceJour.RecId
                        && custInvoiceJourRU.FacturedFully_RU;
                break;

            case tablenum(CustInvoiceJour) :
                callerCustInvoiceJour = CustInvoiceJour::findRecId(sourceRecord.RecId);
                break;
        }

        correctionTypeControl.selection(callerCustInvoiceJour.correctionType_RU());
        this.refreshFactureExternalIdControl();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCreditNote</Name>
				<Source><![CDATA[
    public void initCreditNote()
    {
        CustInvoiceJour callerCustInvoiceJour;
        CustInvoiceJour_RU custInvoiceJourRU;

        switch (sourceRecord.TableId)
        {
            case tablenum(SalesTable)      :
                select firstonly callerCustInvoiceJour
                    where callerCustInvoiceJour.SalesId == sourceRecord.(fieldnum(SalesTable, SalesId))
                exists join custInvoiceJourRU
                    where custInvoiceJourRU.CustInvoiceJour == callerCustInvoiceJour.RecId
                        && !custInvoiceJourRU.FacturedFully_RU;
                break;

            case tablenum(CustInvoiceJour) :
                callerCustInvoiceJour = CustInvoiceJour::findRecId(sourceRecord.RecId);
                break;
        }

        creditNoteControl.value(callerCustInvoiceJour.creditNote());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventOwnerId</Name>
				<Source><![CDATA[
    public void initInventOwnerId()
    {
        if (SalesParameters::find().SplitInventOwnerIdInvoice_RU)
        {
            inventOwnerIdControl.text(CustInvoiceJour::findRecId(sourceRecord.RecId).custInvoiceJour_RU().InventOwnerId_RU);
        }
        else
        {
            inventOwnerIdControl.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventProfileType</Name>
				<Source><![CDATA[
    public void initInventProfileType()
    {
        InventProfileType_RU    inventProfileType;

        inventProfileType = CustInvoiceJour::findRecId(sourceRecord.RecId).custInvoiceJour_RU().InventProfileType_RU;
        if (inventProfileType == InventProfileType_RU::NotSpecified ||
            !this.allowedInventProfileTypes().in(inventProfileType))
        {
            inventProfileType = InventProfileType_RU::General;
        }
        inventProfileTypeControl.selection(inventProfileType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initUseOriginalDocumentAsFactureFromCust</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes value of useOriginalDocumentAsFactureControl.
    /// </summary>
    private void initUseOriginalDocumentAsFactureFromCust()
    {
        if (useOriginalDocumentAsFactureControl)
        {
            if (!correctControl.value() && this.contragent() )
            {
                useOriginalDocumentAsFactureControl.value(CustTable::find(this.contragent()).UseOriginalDocumentAsFacture_RU);
            }
            else
            {
                useOriginalDocumentAsFactureControl.value(NoYes::No);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVATOnPayment</Name>
				<Source><![CDATA[
    public void initVATOnPayment()
    {
        vatOnPaymentControl.value(CustInvoiceJour::findRecId(sourceRecord.RecId).custInvoiceJour_RU().vatOnPayment_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertJour</Name>
				<Source><![CDATA[
    public boolean insertJour(Common _jour, boolean _proforma = false)
    {
        boolean         ret;
        CustInvoiceJour custInvoiceJour = _jour;
        ;
        if (! transSet.elements())
        {
            firstInventOwnerId = custInvoiceJour.custInvoiceJour_RU().InventOwnerId_RU;
        }

        ret = super(_jour, _proforma);
        if (ret && editLinesForm)
        {
            this.offRebuild();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertJourWithUpdate</Name>
				<Source><![CDATA[
    protected void insertJourWithUpdate(CustVendInvoiceJour _jour)
    {
        super(_jour);
        factureCreate.parmLanguageId(_jour.LanguageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertMarkup</Name>
				<Source><![CDATA[
    public void insertMarkup(MarkupTrans _trans,
                             NoYes       _updateJour = NoYes::No)
    {
        if (_trans.fullyFactured_RU())
            return;

        super(_trans, _updateJour);

        if (_updateJour)
        {
            switch (_trans.TransTableId)
            {
                case tablenum(CustInvoiceJour)  :
                    this.insertJourWithUpdate(CustInvoiceJour::findRecId(_trans.TransRecId));
                    break;
                case tablenum(CustInvoiceTrans) :
                    tmpTrans = CustInvoiceTrans::findRecId(_trans.TransRecId);

                    this.insertJourWithUpdate(CustInvoiceJour::findFromCustInvoiceTrans(tmpTrans.SalesPurchId_RU,
                                                                                        tmpTrans.InvoiceNum,
                                                                                        tmpTrans.InvoiceDate,
                                                                                        tmpTrans.NumberSequenceGroupId_RU));
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventOwnerId</Name>
				<Source><![CDATA[
    public InventOwnerId_RU inventOwnerId()
    {
        return firstInventOwnerId ? firstInventOwnerId : super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourAccountField</Name>
				<Source><![CDATA[
    protected fieldId invoiceJourAccountField()
    {
        return fieldnum(CustInvoiceJour, InvoiceAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourAmountField</Name>
				<Source><![CDATA[
    protected fieldId invoiceJourAmountField()
    {
        return fieldnum(CustInvoiceJour, InvoiceAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourCorrectField</Name>
				<Source><![CDATA[
    protected fieldName invoiceJourCorrectField()
    {
        return fieldStr(CustInvoiceJour_RU, Correct_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourCorrectFieldDS</Name>
				<Source><![CDATA[
    protected FormDataSource invoiceJourCorrectFieldDS()
    {
        return custInvoiceJourRUDS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourCorrectionTypeField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns field id which holds correction type.
    /// </summary>
    /// <returns>
    /// Field id which holds correction type.
    /// </returns>
    protected fieldId invoiceJourCorrectionTypeField()
    {
        return fieldNum(CustInvoiceJourCorrectionType_RU, CorrectionType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourCorrectionTypeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns table id of table which contains correction type field.
    /// </summary>
    /// <returns>
    /// Table id of table which contains correction type field.
    /// </returns>
    protected TableId invoiceJourCorrectionTypeTable()
    {
        return tableNum(CustInvoiceJourCorrectionType_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourCurrencyField</Name>
				<Source><![CDATA[
    protected fieldId invoiceJourCurrencyField()
    {
        return fieldnum(CustInvoiceJour, CurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourDatasource</Name>
				<Source><![CDATA[
    protected FormDataSource invoiceJourDatasource()
    {
        return custInvoiceJourDS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourDateField</Name>
				<Source><![CDATA[
    protected fieldId invoiceJourDateField()
    {
        return fieldnum(CustInvoiceJour, InvoiceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourDefaultDimensionField</Name>
				<Source><![CDATA[
    protected fieldName invoiceJourDefaultDimensionField()
    {
        return fieldStr(CustInvoiceJour, DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourFacturedField</Name>
				<Source><![CDATA[
    protected fieldName invoiceJourFacturedField()
    {
        return fieldStr(CustInvoiceJour_RU, FacturedFully_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourFacturedFieldDS</Name>
				<Source><![CDATA[
    protected FormDataSource invoiceJourFacturedFieldDS()
    {
        return custInvoiceJourRUDS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourIdField</Name>
				<Source><![CDATA[
    protected fieldId invoiceJourIdField()
    {
        return fieldnum(CustInvoiceJour, InvoiceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourInventOwnerIdField</Name>
				<Source><![CDATA[
    protected fieldName invoiceJourInventOwnerIdField()
    {
        return fieldStr(CustInvoiceJour_RU, InventOwnerId_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourInventOwnerIdFieldDS</Name>
				<Source><![CDATA[
    protected FormDataSource invoiceJourInventOwnerIdFieldDS()
    {
        return custInvoiceJourRUDS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourInventProfileTypeField</Name>
				<Source><![CDATA[
    protected fieldName invoiceJourInventProfileTypeField()
    {
        return fieldStr(CustInvoiceJour_RU, InventProfileType_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourInventProfileTypeFieldDS</Name>
				<Source><![CDATA[
    protected FormDataSource invoiceJourInventProfileTypeFieldDS()
    {
        return custInvoiceJourRUDS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourRecIdField</Name>
				<Source><![CDATA[
    protected fieldId invoiceJourRecIdField()
    {
        return fieldnum(CustInvoiceJour, RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourVATOnPaymentField</Name>
				<Source><![CDATA[
    protected fieldName invoiceJourVATOnPaymentField()
    {
        return fieldStr(CustInvoiceJour_RU, vatOnPayment_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourVATOnPaymentFieldDS</Name>
				<Source><![CDATA[
    protected FormDataSource invoiceJourVATOnPaymentFieldDS()
    {
        return custInvoiceJourRUDS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceLinkFieldNum</Name>
				<Source><![CDATA[
    protected fieldId invoiceLinkFieldNum()
    {
        return fieldnum(CustInvoiceSalesLink, OrigSalesId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceLinkTableNum</Name>
				<Source><![CDATA[
    protected tableId invoiceLinkTableNum()
    {
        return tablenum(CustInvoiceSalesLink);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceTransDatasource</Name>
				<Source><![CDATA[
    protected FormDataSource invoiceTransDatasource()
    {
        return custInvoiceTransDS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jourTableId</Name>
				<Source><![CDATA[
    protected tableId jourTableId()
    {
        return tablenum(CustInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainDataSource</Name>
				<Source><![CDATA[
    protected FormDataSource mainDataSource()
    {
        return custInvoiceJourDS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainQueryRun</Name>
				<Source><![CDATA[
    protected QueryRun mainQueryRun()
    {
        return custInvoiceJourDS.queryRun();
    }

]]></Source>
			</Method>
			<Method>
				<Name>offReportType</Name>
				<Source><![CDATA[
    protected OffReportType_RU offReportType()
    {
        return creditNoteControl.value()               ?
               OffReportType_RU::CustFactureCreditNote :
               OffReportType_RU::CustFacture;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshFactureExternalIdControl</Name>
				<Source><![CDATA[
    public void refreshFactureExternalIdControl()
    {
        #JmgConstants
        boolean deletedFacturesExist;
        RecId   numberSequenceId = NumberSequenceTable::findByNaturalKey(this.extFactureIdNumSeqCode()).RecId;

    //    super();

        if (factureExternalIdControl)
        {
            deletedFacturesExist = NumberSequenceList::exist(numberSequenceId,
                                                             NumStatus::Free);

            factureExternalIdControl.enabled(deletedFacturesExist);

            super();

            factureExternalIdControl.lookupButton(deletedFacturesExist ?
                                                  #LOOKUP_ALWAYS :
                                                  #LOOKUP_NEVER);

            if (deletedFacturesExist            &&
                factureExternalIdControl.text() &&
                ! NumberSequenceList::exist(numberSequenceId,
                                            NumStatus::Free,
                                            factureExternalIdControl.text()))
            {
                factureExternalIdControl.text("");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeJour</Name>
				<Source><![CDATA[
    public void removeJour(CustVendInvoiceJour _jour)
    {
        super(_jour);

        if (! transSet.elements())
        {
            firstInventOwnerId = '';
            this.offRebuild();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>researchDS</Name>
				<Source><![CDATA[
    protected void researchDS()
    {
        ;
        FactureEditLinesEngine_RU::dsResearch(custInvoiceTransDS);
        FactureEditLinesEngine_RU::dsResearch(markupDS);
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundOffExistsFacture</Name>
				<Source><![CDATA[
    protected boolean roundOffExistsFacture(Common _jour)
    {
        CustInvoiceJour localCustInvoiceJour = _jour as CustInvoiceJour;
        ;

        return FactureTrans_RU::existExtraLines(FactureModule_RU::Cust,
                                                localCustInvoiceJour.SalesId,
                                                localCustInvoiceJour.InvoiceId,
                                                localCustInvoiceJour.InvoiceDate,
                                                localCustInvoiceJour.NumberSequenceGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundOffGroup</Name>
				<Source><![CDATA[
    protected FormGroupControl roundOffGroup()
    {
        return custRoundOffGroupControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEnableControls</Name>
				<Source><![CDATA[
    public void setEnableControls()
    {
        useOriginalDocumentAsFactureControl.enabled(!correctControl.value());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSourceRecord</Name>
				<Source><![CDATA[
    public void setSourceRecord(Common _sourceRecord)
    {
        super(_sourceRecord);

        if (_sourceRecord.TableId == tablenum(SalesTable))
        {
            origSalesPurchId = _sourceRecord.(fieldnum(SalesTable, SalesId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleContragents</Name>
				<Source><![CDATA[
    public void setVisibleContragents()
    {
        customerControl.visible(true);
        vendorControl.visible(false);
        employeeControl.visible(false);
        factureCustomerControl.visible(false);
        factureCustomerControl.mandatory(false);
        factureVendorControl.visible(false);
        factureVendorControl.mandatory(false);
        sellerControl.visible(true);
        buyerControl.visible(false);

        taxCorrectionContragentTypeControl.visible(false);
        taxCorrectionContragentTypeControl.selection(FactureTaxCorrectionContragentType_RU::Customer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleControls</Name>
				<Source><![CDATA[
    public void setVisibleControls()
    {
        super();

        factureExtIdNumSegGroupIdControl.visible(true);
        inventOwnerIdControl.visible(true);
        useOriginalDocumentAsFactureControl.visible(this.useOriginalDocumentAsFactureCtrlVisible());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleTabs</Name>
				<Source><![CDATA[
    public void setVisibleTabs()
    {
        custTabControl.visible(true);
        vendTabControl.visible(false);
        emplTabControl.visible(false);
        ledgTabControl.visible(false);
        addrTabPageControl.visible(isTableUserEnabled(tablenum(LogisticsPostalAddress), AccessType::View));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTableId</Name>
				<Source><![CDATA[
    protected tableId transTableId()
    {
        return tablenum(CustInvoiceTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeControl</Name>
				<Source><![CDATA[
    protected FormTreeControl treeControl()
    {
        return custTreeControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFactureExternalId</Name>
				<Source><![CDATA[
    public boolean validateFactureExternalId()
    {
        boolean ret = NumberSequenceList::exist(NumberSequenceTable::findByNaturalKey(this.extFactureIdNumSeqCode()).RecId,
                                                NumStatus::Free,
                                                factureExternalIdControl.text());

        if (! ret)
        {
            error(strfmt("@GLS104927",
                         factureExternalIdControl.text(),
                         tableid2pname(tablenum(NumberSequenceList)),
                         tablestr(NumberSequenceList)));
            factureExternalIdControl.text("");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useCommReportedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies whether report for principal line quantity should be used in facture line.
    /// </summary>
    /// <returns>
    /// True if report for principal line quantity should be used in facture line; otherwise false.
    /// </returns>
    public boolean useCommReportedQty()
    {
        return (super() && sellerControl.text());
    }

]]></Source>
			</Method>
			<Method>
				<Name>useOriginalDocumentAsFactureCtrlVisible</Name>
				<Source><![CDATA[
    public boolean useOriginalDocumentAsFactureCtrlVisible()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>