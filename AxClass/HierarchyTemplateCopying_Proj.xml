<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HierarchyTemplateCopying_Proj</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>HierarchyTemplateCopying_Proj</c> class copies project management attributes of activity hierarchies.
/// </summary>
[
    HierarchyCreateAttribute(HierarchyType::Project)
]
class HierarchyTemplateCopying_Proj extends HierarchyTemplateCopying
{
    ProjTable               destProjTable;
    ProjTable               srcProjTable;
    boolean                 copyProjActivity;
    boolean                 calledFromProject;

    SalesQuotationTable     destSalesQuotationTable;

    SalesQuotationTable     srcSalesQuotationTable;
    SchedFromDate           desStartDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            activityNumberMapping = new Map(Types::String, Types::String);
            predecessorsMapping = new Map(Types::String, Types::Class);
        }

        activityDatesNeedAllignment = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalledFromProject</Name>
				<Source><![CDATA[
    public boolean parmCalledFromProject(boolean _calledFromProject = calledFromProject)
    {
        calledFromProject = _calledFromProject;

        return calledFromProject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopyProjActivity</Name>
				<Source><![CDATA[
    public boolean parmCopyProjActivity(boolean _copyProjActivity = copyProjActivity)
    {
        copyProjActivity = _copyProjActivity;

        return copyProjActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDestProjTable</Name>
				<Source><![CDATA[
    public ProjTable parmDestProjTable(ProjTable _destProjTable = destProjTable)
    {
        destProjTable = _destProjTable;
        return destProjTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDestSalesQuotationTable</Name>
				<Source><![CDATA[
    public SalesQuotationTable parmDestSalesQuotationTable(SalesQuotationTable _destSalesQuotationTable = destSalesQuotationTable )
    {
        destSalesQuotationTable = _destSalesQuotationTable;
        return destSalesQuotationTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDestination</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy the source hierarchy project integration ID to destination hierarchy project integration ID.
    /// </summary>
    /// <param name = "_srcTable">Source <c>HieararchyTreeTable</c> buffer.</param>
    /// <param name = "_destTable">Destination <c>HieararchyTreeTable</c> buffer.</param>
    /// <returns>Destination <c>HieararchyTreeTable</c> buffer.</returns>
    public HierarchyTreeTable copyToDestination(HierarchyTreeTable _srcTable , HierarchyTreeTable _destTable)
    {
        _destTable.MSPID = _srcTable.MSPID;
        return _destTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyActivity</Name>
				<Source><![CDATA[
    public RecId copyActivity()
    {
        ProjActivity            projActivity, projSrcActivity;
        boolean                 isProj3 = isConfigurationkeyEnabled(configurationKeyNum(Project));
        PSAActivitySetup        psaActivitySetup, psaSrcActivitySetup;

        NonNegativeTotal        totalEstimatedCost;

        projSrcActivity       = ProjActivity::find(srcActivities.ActivityNumber,true);
        psaSrcActivitySetup   = PSAActivitySetup::findActivityNumber(srcActivities.ActivityNumber);

        this.initializeSrcAndDestActivities();

        if (srcHierarchy.IsTemplate != destHierarchy.IsTemplate || !destHierarchy.IsTemplate)
        {
            // If source activity is a template and destination is not a template
            if (!destHierarchy.IsTemplate)
            {
                if (destProjTable || !isProj3)
                {
                    if (srcHierarchy.IsTemplate)
                    {
                        destActivities.initFromHierarchyTemplate(srcActivities, (destProjTable.StartDate < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) ? DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) : destProjTable.StartDate));
                    }
                    else
                    {
                        destActivities.initFromProjTable(destProjTable);
                    }
                    destActivities.insertParentLink(smmActivityParentType::Project, destProjTable.RecId, true);

                    if (isProj3)
                    {
                        // Copy Schedule info / Skill / attributes
                        this.copyScheduleInfo(srcActivities.ActivityNumber, destActivities.ActivityNumber, destProjTable);

                        psaActivitySetup = PSAActivitySetup::findActivityNumber(destActivities.ActivityNumber);
                        destActivities.setStartDate(psaActivitySetup.psaSchedStart);
                        destActivities.setEndDate(psaActivitySetup.psaSchedEnd);
                        //copy estimates info
                        totalEstimatedCost = this.copyEstimates(srcActivities.ActivityNumber, destActivities.ActivityNumber, true);
                        this.projInitTrackingInfo(psaActivitySetup, totalEstimatedCost);
                    }

                    //copy values from source ProjActivity record
                    if (copyProjActivity)
                    {
                        this.copyProjActivity(srcActivities.ActivityNumber, destActivities);  // When we copy one project into another using the copy wizard this code path will be taken
                    }
                    else
                    {
                        projActivity = ProjActivity::find(destActivities.ActivityNumber, true);
                        if (isProj3 && projActivity)
                        {
                            ttsbegin;
                            this.setCategoryForProject(projActivity, srcSalesQuotationTable, projSrcActivity, psaActivitySetup);
                            projActivity.update();
                            ttscommit;
                        }
                        else
                        {
                            projActivity.clear();
                            projActivity.initFromSmmActivities(destActivities);
                            if (isProj3)
                            {
                                this.setCategoryForProject(projActivity, srcSalesQuotationTable, projSrcActivity, psaActivitySetup);
                            }
                            projActivity.insert();
                        }
                    }
                }
                else
                {
                    if (isProj3)
                    {
                        if (srcHierarchy.IsTemplate)
                        {
                            destActivities.initFromHierarchyTemplate(srcActivities, (destSalesQuotationTable.psaEstProjStartDate < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) ? DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) : destSalesQuotationTable.psaEstProjStartDate));
                        }
                        else
                        {
                            destActivities.initFromSalesQuotationTable(destSalesQuotationTable);
                        }
                        destActivities.insertParentLink(smmActivityParentType::Quotation, destSalesQuotationTable.RecId, true);
                        // Copy Schedule info / Skill / attributes
                        this.copyScheduleInfo(srcActivities.ActivityNumber, destActivities.ActivityNumber, destSalesQuotationTable);

                        psaActivitySetup = PSAActivitySetup::findActivityNumber(destActivities.ActivityNumber,true);
                        psaSrcActivitySetup = PSAActivitySetup::findActivityNumber(srcActivities.ActivityNumber);
                        destActivities.setStartDate(psaActivitySetup.psaSchedStart);
                        destActivities.setEndDate(psaActivitySetup.psaSchedEnd);

                        //insert new ProjActivity record
                        projActivity.clear();
                        projActivity.initFromSmmActivities(destActivities);
                        // copy the default category & Mandatory field
                        if (psaActivitySetup)
                        {
                            ttsbegin;
                            this.setCategoryForQuotation(srcProjTable, psaActivitySetup, projSrcActivity, projActivity);
                            psaActivitySetup.update(true);
                            ttscommit;
                        }
                        projActivity.insert();

                        //copy estimates info
                        totalEstimatedCost = this.copyEstimates(srcActivities.ActivityNumber, destActivities.ActivityNumber, false);
                        this.projInitTrackingInfo(psaActivitySetup, totalEstimatedCost);
                    }
                }
            }
            else
            {
                destActivities.initTemplateDates();
            }
        }

        if (!isImport)
        {
            if (isConfigurationkeyEnabled(configurationKeyNum(Project))) // Exporting a project or quotation WBS into a template.
            {
                if (destHierarchy.IsTemplate && destHierarchy.HierarchyType == HierarchyType::Project)
                {
                    //copy estimates info
                    this.copyEstimates(srcActivities.ActivityNumber, destActivities.ActivityNumber, false);

                    // Copy Schedule info / Skill / attributes
                    this.copyScheduleInfo(srcActivities.ActivityNumber, destActivities.ActivityNumber);

                    //insert new ProjActivity record
                    projActivity.clear();
                    projActivity.initFromSmmActivities(destActivities);
                    this.setCategoryOnExport(srcSalesQuotationTable, projActivity, psaSrcActivitySetup, projSrcActivity);
                    projActivity.insert();
                }
            }
        }

        destActivities.insert();

        if (isProj3)
        {
            activityNumberMapping.insert(srcActivities.ActivityNumber, destActivities.ActivityNumber);
            this.fillPredecessorMapping();
        }

        // Copy attendees if it is a organizer appointment
        this.copyAttendees();

        return destActivities.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHierarchyOwners</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the source and destination variables.
    /// </summary>
    public void setHierarchyOwners()
    {
        if (srcHierarchy.HierarchyType == HierarchyType::Project
        || destHierarchy.HierarchyType == HierarchyType::Project)
        {
            destProjTable           = HierarchyLinkTable::findAssociation(destHierarchy.HierarchyId, tableNum(ProjTable));
            destSalesQuotationTable = HierarchyLinkTable::findAssociation(destHierarchy.HierarchyId, tableNum(SalesQuotationTable));
            srcProjTable            = HierarchyLinkTable::findAssociation(srcHierarchy.HierarchyId, tableNum(ProjTable));
            srcSalesQuotationTable  = HierarchyLinkTable::findAssociation(srcHierarchy.HierarchyId, tableNum(SalesQuotationTable));
            if (!destRootActivities && destProjHierarchyTreeTable)
            {
                destRootActivities  = smmActivities::findWithRecId(destProjHierarchyTreeTable.RefRecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWBSEstimateCostSalesPrice</Name>
				<Source><![CDATA[
    private void updateWBSEstimateCostSalesPrice(PSAActivityEstimates _srcEstimates, PSAActivityEstimates _desEstimates, TransDate _transDate)
    {
        ProjId projId = "";
            
        if (destProjTable)
        {
            projId = destProjTable.ProjId;
        }

        if (_desEstimates)
        {
            // Ask whether to apply default cost and sales price from customer instead of keeping those in the WBS template.
            if (Box::yesNo("@PSA11095", DialogButton::Yes) == DialogButton::Yes)
            {
                _desEstimates.setCostSalesPrice(projId, "", _transDate);
            }

            if (_desEstimates.UnitCostPrice == 0)
            {
                _desEstimates.UnitCostPrice = _srcEstimates.UnitCostPrice;
            }

            if (_desEstimates.UnitSalesPrice == 0)
            {
                _desEstimates.UnitSalesPrice = _srcEstimates.UnitSalesPrice;
            }

            _desEstimates.setTotalCostSalesPrice();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCategoryOnExport</Name>
				<Source><![CDATA[
    /// <summary>
    /// The wrapper that enpasulates the setting of Category and Mandatory fields when exporting Project
    /// or Quotation WBS Activities as a template
    /// </summary>
    /// <param name="quotationTable">
    /// if this table is non-null, it implies that we export a Quotation WBS as a template
    /// </param>
    /// <param name="projActivity">
    /// The destination record holding the category field
    /// </param>
    /// <param name="psaSrcActivitySetup">
    /// The source record when Quotation WBS is exported
    /// </param>
    /// <param name="projSrcActivity">
    /// The source record when Project WBS is exported.
    /// </param>
    private void setCategoryOnExport(SalesQuotationTable quotationTable, ProjActivity projActivity, PSAActivitySetup psaSrcActivitySetup, ProjActivity projSrcActivity)
    {
        if (!quotationTable) //when Project WBS is exported "salesQuotationTable" would be null
        {
            projActivity.CategoryDefault = projSrcActivity.CategoryDefault;
        }
        else // when quotation WBS is exported
        {
            projActivity.CategoryDefault = psaSrcActivitySetup.CategoryDefault;
        }
        projActivity.Mandatory       = projSrcActivity.Mandatory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCategoryForQuotation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Its a wraper function that wraps the functionality of setting the category and mandatory fields while importing activities into a Quotation either from a template
    /// or from another Quotation or Project
    /// </summary>
    /// <param name="projSrcTable">
    /// If this variable is set, it implies we are importing from another project.
    /// </param>
    /// <param name="psaActivitySetup">
    /// The table record hosting the category field in Quotation WBS
    /// </param>
    /// <param name="projSrcActivity">
    /// Table record thats being copied from
    /// </param>
    /// <param name="projActivity">
    /// The table record that hosts the Mandatory field for Quotation WBS
    /// </param>
    private void setCategoryForQuotation(ProjTable projSrcTable, PSAActivitySetup psaActivitySetup, ProjActivity projSrcActivity, ProjActivity projActivity)
    {
        if (srcHierarchy.IsTemplate || projSrcTable) // If the source hierarchy is a template or a project else the category information need not be copied as its already available.
        {
            psaActivitySetup.CategoryDefault = projSrcActivity.CategoryDefault;
        }
        projActivity.Mandatory = projSrcActivity.Mandatory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCategoryForProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// A simple wrapper function that wraps the setting of Category and Mandatory fields in Project WBS
    /// when importing from a template or a Quotation or another Project
    /// </summary>
    /// <param name="projActivity">
    /// The destination record
    /// </param>
    /// <param name="quotationTable">
    /// If this table is non-null, it implies that we are importing from a Quotation
    /// </param>
    /// <param name="projSrcActivity">
    /// The source record that contains the data to copy from
    /// </param>
    /// <param name="psaActivitySetup">
    /// The record that contains the Category information when copied from a Quotation.
    /// </param>
    private void setCategoryForProject(ProjActivity projActivity, SalesQuotationTable quotationTable, ProjActivity projSrcActivity, PSAActivitySetup psaActivitySetup)
    {
        if (quotationTable) // To handle the case if we import from another Quotation(not a template)
        {
            projActivity.CategoryDefault = psaActivitySetup.CategoryDefault;
        }
        else
        {
            projActivity.CategoryDefault = projSrcActivity.CategoryDefault;
        }
        projActivity.Mandatory = projSrcActivity.Mandatory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInitTrackingInfo</Name>
				<Source><![CDATA[
    private void projInitTrackingInfo(PSAActivitySetup _psaActivitySetup, NonNegativeTotal _plannedCost)
    {
        if (_psaActivitySetup)
        {
            _psaActivitySetup.selectForUpdate(true);

            ttsBegin;
            _psaActivitySetup.EffortAtComplete = _psaActivitySetup.Effort;
            _psaActivitySetup.CostAtComplete = _plannedCost;
            _psaActivitySetup.update(true);
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSiblingNumber</Name>
				<Source><![CDATA[
    public LineNum getSiblingNumber(HierarchyTreeTable _hierarchyTreeTable)
    {
        if (isImport)
        {
            return HierarchyTreeTable::nextSiblingNum(destProjHierarchyTreeTable.HierarchyId, destProjHierarchyTreeTable.ElementNumber);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPredecessorMapping</Name>
				<Source><![CDATA[
    private void fillPredecessorMapping()
    {
        List            successors = new List(Types::String);
        ProjDependency  projDependency;

        while select projDependency
        where projDependency.Predecessor == srcActivities.ActivityNumber
        {
            successors.addEnd(projDependency.Successor);
        }
        predecessorsMapping.insert(srcActivities.ActivityNumber, successors);
    }

]]></Source>
			</Method>
			<Method>
				<Name>performtasks</Name>
				<Source><![CDATA[
    public void performtasks(Hierarchy _destHierarchy)
    {
        if (_destHierarchy.HierarchyType == HierarchyType::Project)
        {
            if (isImport)
            {
                this.releaseResourcesFromImportDestActivity();
                this.integrateTasksIntoDestHierarchy(_destHierarchy.HierarchyId);
            }
            else
            {
                this.projCreateTemplateRootTask();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseResourcesFromImportDestActivity</Name>
				<Source><![CDATA[
    private void releaseResourcesFromImportDestActivity()
    {
        if (destHierarchy.HierarchyType == HierarchyType::Project && this.parmDestRootActivities())
        {
            smmActivityNumber   activityNumber  = this.parmDestRootActivities().ActivityNumber;
            ActivityRecId       activity        = smmActivities::find(activityNumber).RecId;

            ActivityFacade::releaseReservations(activity, ResReservationType::Assignment);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projCreateTemplateRootTask</Name>
				<Source><![CDATA[
    private void projCreateTemplateRootTask()
    {
        HierarchyTreeTable templateRootElement;

        templateRootElement = HierarchyTreeTable::findRootLevelNode(destHierarchy.HierarchyId);
        templateRootElement.selectForUpdate(true);
        if (!isImport)
        {
            ttsBegin;
            templateRootElement.RefRecId = HierarchyTreeTable_Extension::projCreateProjectRootActivityRecords(null, destHierarchy.Name);
            templateRootElement.update();
            ProjWBSUpdateController::resummarizeTaskFromChildrenInDatabase(HierarchyTreeTable::findRootElementNumber(destHierarchy.HierarchyId), destHierarchy.HierarchyId);
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>integrateTasksIntoDestHierarchy</Name>
				<Source><![CDATA[
    private void integrateTasksIntoDestHierarchy(HierarchyIdBase _hierarchyId)
    {
        CalendarId              calendarId;
        ProjTable               localProjTable              = HierarchyLinkTable::findAssociation(_hierarchyId, tableNum(ProjTable));
        SalesQuotationTable     localSalesQuotationTable    = HierarchyLinkTable::findAssociation(_hierarchyId, tableNum(SalesQuotationTable));
        ProjWBSUpdateController controller;
        Common                  wbsOwner;

        if (localProjTable)
        {
            calendarId = destProjTable.PSASchedCalendarId;
            wbsOwner = localProjTable;
        }
        else if (localSalesQuotationTable)
        {
            calendarId = destSalesQuotationTable.PSASchedCalendarId;
            wbsOwner = localSalesQuotationTable;
        }
        else
        {
            calendarId = PSAParameters::find().SchedDefaultCalendar;
            wbsOwner = null;
        }

        if (activityDatesNeedAllignment)
        {
            controller = ProjWBSUpdateController::construct(_hierarchyId, calendarId, ProjViewType::PlanningView, wbsOwner);
            controller.fixSchedulingDiscrepancies(destRootActivities.ActivityNumber);
            if (destProjHierarchyTreeTable)
            {
                controller.convertLeafToSummaryTask(destProjHierarchyTreeTable.ElementNumber);
                controller.toggleExpandCollapseTask(destProjHierarchyTreeTable.ElementNumber, true, true);
            }
        }
        else
        {
            ProjWBSUpdateController::resummarizeWBS(_hierarchyId, calendarId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyPredecessors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy the predecessors to the new project activity.
    /// </summary>
    public void copyPredecessors()
    {
        RecordInsertList    dependenciesList        = new RecordInsertList(tableNum(ProjDependency));
        MapEnumerator       predecessorEnumerator   = predecessorsMapping.getEnumerator();

        ProjDependency      currDependency;
        List                successors;
        ListEnumerator      successorsEnumerator;

        while (predecessorEnumerator.moveNext())
        {
            successors = predecessorEnumerator.currentValue();
            successorsEnumerator = successors.getEnumerator();

            while (successorsEnumerator.moveNext())
            {
                currDependency.Predecessor = activityNumberMapping.lookup(predecessorEnumerator.currentKey());
                currDependency.Successor = activityNumberMapping.lookup(successorsEnumerator.current());
                dependenciesList.add(currDependency);
            }
        }

        dependenciesList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAssignedCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy assigned activity capacity per resource from exiting to new Project Activity
    /// </summary>
    /// <param name = "_existingProjActivity">Project Activity to copy the capacity from</param>
    /// <param name = "_newProjActivity">Project Activity to copy the capacity to</param>
    public void copyAssignedCapacity(smmActivities _existingProjActivity, smmActivities _newProjActivity)
    {
        Map             softBookedCapacityPerResource;
        Map             hardBookedCapacityPerResource;

        // only copy assigned hours for generic resources when WBS task and
        // generic resources have been copied over
        if (genericResourceMapping && (genericResourceMapping.elements() > 0))
        {
            // copy assigned soft booked hours
            softBookedCapacityPerResource = ActivityFacade::getAssignedCapacityPerActivityResource(_existingProjActivity.RecId, ResCommitType::SoftBook);
            this.assignResourceForNewActivity(_newProjActivity, softBookedCapacityPerResource, ResCommitType::SoftBook);

            // copy assigned hard booked hours
            hardBookedCapacityPerResource = ActivityFacade::getAssignedCapacityPerActivityResource(_existingProjActivity.RecId, ResCommitType::HardBook);
            this.assignResourceForNewActivity(_newProjActivity, hardBookedCapacityPerResource, ResCommitType::HardBook);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>AssignResourceForNewActivity</Name>
				<Source><![CDATA[
    private void AssignResourceForNewActivity(smmActivities _newProjActivity, Map _capacityPerActivityResource, ResCommitType _commitType)
    {
        MapEnumerator           capacityPerActivityResourceEnum;
        RecId                   existingProjResource;
        Seconds                 assignedCapacity;
        RecId                   newProjResource;
        ResReservationSchedule  schedule        = ResReservationSchedule::construct();
        ResIResourceManager     resourceManager = ResResourceManager::construct();
        ResIReserveProcessor    reserveProcessor = ResReserveProcessor::getProcessor(ResBookingType::DistributeCapacityEvenly);

        // only assign resource to new project activity when generic resources
        // have been copied over to the new project
        if (!genericResourceMapping || (genericResourceMapping.elements() == 0))
        {
            return;
        }

        if (_capacityPerActivityResource.elements() > 0)
        {
            capacityPerActivityResourceEnum = _capacityPerActivityResource.getEnumerator();

            while (capacityPerActivityResourceEnum.moveNext())
            {
                existingProjResource = capacityPerActivityResourceEnum.currentKey();
                assignedCapacity     = capacityPerActivityResourceEnum.currentValue();
                newProjResource      = genericResourceMapping.lookup(existingProjResource);

                // assign resource to a new activity
                schedule.ActivityResource(newProjResource);
                schedule.Activity(_newProjActivity.RecId);
                schedule.Start(_newProjActivity.StartDateTime);
                schedule.End(_newProjActivity.EndDateTime);
                schedule.Commitment(_commitType);
                schedule.ReservationType(ResReservationType::Assignment);

                List schedules = new List(Types::Class);
                schedules.addEnd(schedule);

                resourceManager.ReserveProcessor(reserveProcessor);
                resourceManager.Schedules(schedules);
                resourceManager.Capacity(assignedCapacity);
                resourceManager.Reserve(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPriceCurrencyConvert</Name>
				<Source><![CDATA[
    private void salesPriceCurrencyConvert(
        PSAActivityEstimates _srcEstimates,
        PSAActivityEstimates _desEstimates,
        SalesPrice _salesPrice,
        CurrencyCode _currencyCode,
        boolean _isCurrencyExchange,
        CurrencyExchangeHelper _currencyExchangeHelper)
    {
        if (_isCurrencyExchange)
        {
            if (srcHierarchy.IsTemplate == destHierarchy.IsTemplate || destHierarchy.IsTemplate)
            {
                _desEstimates.UnitSalesPrice = _currencyExchangeHelper.calculateTransactionToAccounting(_currencyCode, _srcEstimates.UnitSalesPrice, true);
            }
            else if (_salesPrice == 0)
            {
                _desEstimates.UnitSalesPrice = _currencyExchangeHelper.calculateAccountingToTransaction(_currencyCode, _srcEstimates.UnitSalesPrice, true);
            }
        }
        _desEstimates.TotalSalesPrice = _desEstimates.UnitSalesPrice * _desEstimates.Quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyEstimates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies all estimates for an activity.
    /// </summary>
    /// <param name = "_srcActivityNumber">The activity number of the source activity.</param>
    /// <param name = "_desActivityNumber">The activity number of the destination activity.</param>
    /// <param name = "isProject">true if the destination activity is for a project or project quotation WBS; false if it's part of a WBS template.</param>
    /// <returns>The total cost of all estimates for the destination activity.</returns>
    protected NonNegativeTotal copyEstimates(smmActivityNumber _srcActivityNumber, smmActivityNumber _desActivityNumber, boolean isProject)
    {
        PSAActivityEstimates            srcEstimates;
        PSAActivityEstimates            desEstimates;
        CurrencyCode                    currencyCode;
        boolean                         isCurrencyExchange;
        boolean                         isRateCard;

        CostPrice                       costPrice;
        SalesPrice                      salesPrice;

        CurrencyExchangeHelper          currencyExchangeHelper;

        NonNegativeTotal                totalEstimatedActivityCost;

        currencyCode = destSalesQuotationTable ? destSalesQuotationTable.CurrencyCode : CompanyInfoHelper::standardCurrency();

        if (CompanyInfoHelper::standardCurrency() != currencyCode)
        {
            isCurrencyExchange = true;
            currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(
                                                            Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                                            DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        }

        totalEstimatedActivityCost = 0;
        while select srcEstimates
            where srcEstimates.ActivityNumber == _srcActivityNumber
        {
            if (!srcEstimates.checkInventDim())
            {
                throw error("@SYS319221");
            }

            desEstimates.doClear();
            desEstimates.data(srcEstimates);
            desEstimates.ActivityNumber  = _desActivityNumber;

            if (!desStartDate)
            {
                desStartDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            }

            if (!destHierarchy.IsTemplate)
            {
                if (destSalesQuotationTable && destSalesQuotationTable.CustAccount)
                {
                    costPrice   = this.findCostPriceByType(desEstimates.ProjTransType, srcEstimates);
                    salesPrice  = this.findSalesPriceByType(desEstimates.ProjTransType, srcEstimates, currencyCode);
                    isRateCard  = ((costPrice != 0 && costPrice != srcEstimates.UnitCostPrice) || (salesPrice != 0 && salesPrice != srcEstimates.UnitSalesPrice));

                    if (isRateCard)
                    {
                        if (!notShowDialog)
                        {
                            if (Box::yesNo("@PSA11095", DialogButton::Yes) == DialogButton::Yes)
                            {
                                applyRateCard = true;
                            }
                        }
                        if (applyRateCard)
                        {
                            if (costPrice != 0)
                            {
                                desEstimates.UnitCostPrice  = costPrice;
                            }
                            desEstimates.TotalCostPrice = desEstimates.Quantity * desEstimates.UnitCostPrice;

                            if (salesPrice != 0)
                            {
                                desEstimates.UnitSalesPrice = salesPrice;
                            }

                            this.salesPriceCurrencyConvert(srcEstimates, desEstimates, salesPrice, currencyCode, isCurrencyExchange, currencyExchangeHelper);
                        }
                        notShowDialog = true;
                        isRateCard = false;
                    }
                    else
                    {
                        this.salesPriceCurrencyConvert(srcEstimates, desEstimates, 0, currencyCode, isCurrencyExchange, currencyExchangeHelper);
                    }
                }
                else
                {
                    this.updateWBSEstimateCostSalesPrice(srcEstimates, desEstimates, desStartDate);
                }
                totalEstimatedActivityCost += desEstimates.TotalCostPrice;
            }

            if (!applyRateCard)
            {
                this.salesPriceCurrencyConvert(srcEstimates, desEstimates, 0, currencyCode, isCurrencyExchange, currencyExchangeHelper);
            }
            if (isImport && isProject && destProjTable.ValidateProjCategory)
            {
                ProjValElementServer::AddCategoryToProjIfAbsent(destProjTable.ProjId, srcEstimates.ProjCategoryId);
            }
            desEstimates.insert();
        }

        return totalEstimatedActivityCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCostPriceByType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the cost price for an activity estimate.
    /// </summary>
    /// <param name = "_transType">The transaction type of the estimate.</param>
    /// <param name = "_srcEstimates">The estimate record in <c>PSAActivityEstimates</c>.</param>
    /// <returns>The cost price.</returns>
    protected CostPrice findCostPriceByType(QuotationProjTransType _transType, PSAActivityEstimates _srcEstimates)
    {
        CostPrice           costPrice;
        ProjPriceParameters parameters;
        switch (_transType)
        {
            case QuotationProjTransType::Hour :
                parameters = this.createAndInitProjPriceParameters(_srcEstimates, desStartDate, destSalesQuotationTable.CustAccount);
                costPrice = ProjHourCostPrice::findProjCostPriceByPriceParameters(parameters);
                break;

            case QuotationProjTransType::Expense :
                parameters = this.createAndInitProjPriceParameters(_srcEstimates, desStartDate, destSalesQuotationTable.CustAccount);
                costPrice = ProjCostPriceExpense::findCostPriceByPriceParameters(parameters);
                break;

            case QuotationProjTransType::Fee :
                costPrice = 0;
                break;
        }
        return costPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndInitProjPriceParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes an instance of the <c>ProjPriceParameters</c> class.
    /// </summary>
    /// <param name = "_psaActivityEstimates">A <c>PSAActivityEstimates</c> record buffer.</param>
    /// <param name = "_transDate">A transaction date.</param>
    /// <param name = "_custAccount">A customer account.</param>
    /// <param name = "_costCurrency">Currency ID of the currency used for costs.</param>
    /// <param name = "_salesCurrency">Currency ID of the currency used for sales.</param>
    /// <returns>An instance of the <c>ProjPriceParameters</c> class.</returns>
    protected ProjPriceParameters createAndInitProjPriceParameters(
        PSAActivityEstimates    _psaActivityEstimates,
        TransDate               _transDate,
        CustAccount             _custAccount,
        CurrencyCode            _costCurrency = '',
        CurrencyCode            _salesCurrency = '')
    {
        ProjPriceParameters parameters = ProjPriceParameters::construct();

        parameters.parmResourceRecId(_psaActivityEstimates.Resource);
        parameters.parmProjCategoryId(_psaActivityEstimates.ProjCategoryId);
        parameters.parmTransDate(_transDate);
        parameters.parmCustAccount(_custAccount);
        parameters.parmProjLinePropertyId(_psaActivityEstimates.LinePropertyId);
        parameters.parmCostCurrencyCode(_costCurrency);
        parameters.parmSalesCurrencyCode(_salesCurrency);

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSalesPriceByType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the sales price for an activity estimate.
    /// </summary>
    /// <param name = "_transType">The transaction type of the estimate.</param>
    /// <param name = "_srcEstimates">The <c>PSAActivityEstimates</c> record for the estimate.</param>
    /// <param name = "_currencyCode">The currency code for the estimate.</param>
    /// <returns>The sales price.</returns>
    protected SalesPrice findSalesPriceByType(QuotationProjTransType _transType, PSAActivityEstimates _srcEstimates, CurrencyCode _currencyCode)
    {
        SalesPrice          salesPrice;
        ProjPriceParameters parameters;
        switch (_transType)
        {
            case QuotationProjTransType::Hour :
                parameters = this.createAndInitProjPriceParameters(_srcEstimates, desStartDate, destSalesQuotationTable.CustAccount, '', _currencyCode);
                [salesPrice] = ProjHourSalesPrice::findHourSalesPriceByPriceParameters(parameters);
                break;

            case QuotationProjTransType::Expense :
                parameters = this.createAndInitProjPriceParameters(_srcEstimates, desStartDate, destSalesQuotationTable.CustAccount, CompanyInfoHelper::standardCurrency(), _currencyCode);
                [salesPrice] = ProjCostSalesPrice::findCostSalesPriceByPriceParameters(parameters);
                break;

            case QuotationProjTransType::Fee :
                salesPrice = ProjRevenueSalesPrice::psaFindCustSalesPrice('', destSalesQuotationTable.CustAccount, _srcEstimates.Resource, _srcEstimates.ProjCategoryId, _currencyCode, desStartDate);
                break;
        }
        return salesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyProjActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the a project activity.
    /// </summary>
    /// <param name = "_srcActivityNumber">The activity number of the source activity.</param>
    /// <param name = "_destActivities">The <c>smmActivities</c> record for the destination activity.</param>
    public void copyProjActivity(smmActivityNumber   _srcActivityNumber, smmActivities  _destActivities)
    {
        ProjActivity    srcProjActivity;
        ProjActivity    destProjActivity;

        srcProjActivity   = ProjActivity::find(_srcActivityNumber);
        destProjActivity  = ProjActivity::find(destActivities.ActivityNumber, true);
        if (destProjActivity)  // if destination activity is already available
        {
            destProjActivity.initFromProjActivities(srcProjActivity);
            ttsbegin;
            destProjActivity.update();
            ttscommit;
        }
        else  // insert a new record
        {
            destProjActivity.doClear();
            destProjActivity.initFromSmmActivities(_destActivities);
            destProjActivity.initFromProjActivities(srcProjActivity);
            destProjActivity.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyScheduleInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy the schedule info from source activity to destination activity.
    /// </summary>
    /// <param name = "_srcActivityNumber">Source activity number.</param>
    /// <param name = "_desActivityNumber">Destination activity number.</param>
    /// <param name = "_common">The buffer which contains the source activity details.</param>
    public void copyScheduleInfo(smmActivityNumber _srcActivityNumber, smmActivityNumber _desActivityNumber, Common _common = null)
    {
        PSAActivitySetup      desPSAActivitySetup;

        PSAActivitySetup srcPSAActivitySetup = PSAActivitySetup::findActivityNumber(_srcActivityNumber);
        PSAActivitySetup rootActivitySetup   = PSAActivitySetup::findActivityNumber(this.parmDestRootActivities().ActivityNumber);

        if (srcPSAActivitySetup)
        {
            desPSAActivitySetup.doClear();
            desPSAActivitySetup.data(srcPSAActivitySetup);

            if (activityDatesNeedAllignment && !desPSAActivitySetup.PSASchedStart)
            {
                switch (_common.TableId)
                {
                    case tableNum(ProjTable):
                        ProjTable projTableLoc              = _common;
                        desPSAActivitySetup.psaSchedStart   = rootActivitySetup.psaSchedStart;
                        desPSAActivitySetup.CalendarId      = projTableLoc.psaSchedCalendarId;
                        PSAProjActivitySchedule::newSchedule().scheduleProjActivity(desPSAActivitySetup, desPSAActivitySetup.psaSchedStart);
                        break;

                    case tableNum(SalesQuotationTable):
                        SalesQuotationTable salesQuotationTableLoc  = _common;
                        desPSAActivitySetup.psaSchedStart           = rootActivitySetup.psaSchedStart;
                        desPSAActivitySetup.CalendarId              = salesQuotationTableLoc.psaSchedCalendarId;
                        PSAProjActivitySchedule::newSchedule().scheduleProjActivity(desPSAActivitySetup, desPSAActivitySetup.psaSchedStart);
                        break;
                }
            }
            desPSAActivitySetup.RecId          = 0;
            desPSAActivitySetup.ActivityNumber = _desActivityNumber;
            desPSAActivitySetup.IsTemplate     = NoYes::No;
            desPSAActivitySetup.insert();
        }

        desStartDate    = desPSAActivitySetup.psaSchedStart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs hierarchy copy on the server.
    /// </summary>
    /// <param name="_hierarchyName">
    /// The name of the source hierarchy if the copy direction is import; the name of the target hierarchy, otherwise.
    /// </param>
    /// <param name="_packedHierarchy">
    /// The packed destination hierarchy if the copy direction is import; the source hierarchy, otherwise.
    /// It must be packed with the buf2Con system function.
    /// </param>
    /// <param name="_isImport">
    /// Determines whether the copy direction is import or export.
    /// </param>
    /// <param name="_enableProjActivityCopy">
    /// Determines whether the project activity copy should be enabled.
    /// </param>
    /// <param name="_packedDestHierarchyTreeTable">
    /// The packed <c>HierarchyTreeTable</c> instance of the import destination node.
    /// It must be packed with the buf2Con system function.
    /// </param>
    /// <param name="_description">
    /// The description of the exported Hierarchy.
    /// </param>
    /// <param name="_isActive">
    /// Determines whether the exported hierarchy will be created in the active state.
    /// </param>
    /// <param name="_showOnlyTemplates">
    /// Determines whether the Show only templates option was selected.
    /// </param>
    /// <param name="_caller">
    /// The caller form object.
    /// </param>
    /// <param name="_calledFromProject">
    /// Determines whether runOnServer was called from a project element.
    /// By default it is assumed to be true if _hierarchy has <c>HierarchyType</c>
    /// equal to Project.
    /// </param>
    /// <param name="_genericResourceMapping">
    /// Need to have generic resource mapping for copying resource assignment
    /// </param>
    /// <returns>
    /// Return the map of source Activity Numbers from the template and destination
    /// of Activity Numbers for the newly created project
    /// </returns>
    public static Map runOnServer(HierarchyName         _hierarchyName,
                                          container             _packedHierarchy,
                                          boolean               _isImport,
                                          boolean               _enableProjActivityCopy         = true,
                                          container             _packedDestHierarchyTreeTable   = conNull(),
                                          Description           _description                    = '',
                                          NoYesId               _isActive                       = true,
                                          boolean               _showOnlyTemplates              = false,
                                          Object                _caller                         = null,
                                      boolean               _calledFromProject              = false,
                                      Map                   _genericResourceMapping         = null)
    {
        HierarchyTemplateCopying    hierarchyTemplateCopying;

        hierarchyTemplateCopying = HierarchyTemplateCopying::construct(HierarchyType::Project);
        hierarchyTemplateCopying.init(_hierarchyName,
                                      _packedHierarchy,
                                      _isImport,
                                      _enableProjActivityCopy,
                                      _packedDestHierarchyTreeTable,
                                      _description,
                                      _isActive,
                                      _showOnlyTemplates,
                                      _caller,
                                  _calledFromProject,
                                  _genericResourceMapping);

        hierarchyTemplateCopying.run();
        return hierarchyTemplateCopying.getActivityNumberMap();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static HierarchyTemplateCopying_Proj construct()
    {
        return new HierarchyTemplateCopying_Proj();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromHierarchyCopyingDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>HierarchyTemplateCopying</c> object from a <c>HierarchyTemplateCopyingDialog</c> object.
    /// </summary>
    /// <param name="_hierarchyTemplateCopyingDialog">
    /// The <c>HierarchyTemplateCopyingDialog</c> object.
    /// </param>
    /// <returns>
    /// The <c>HierarchyTemplateCopying</c> object.
    /// </returns>
    public static HierarchyTemplateCopying_Proj constructFromHierarchyCopyingDialog(HierarchyTemplateCopyingDialog _hierarchyTemplateCopyingDialog)
    {
        Hierarchy                   hierarchy;
        HierarchyTreeTable          selectedHierarchyTreeTable;
        HierarchyTemplateCopying_Proj    hierarchyTemplateCopying;

        hierarchy                   = Hierarchy::find(_hierarchyTemplateCopyingDialog.parmHierarchyId());
        selectedHierarchyTreeTable  = HierarchyTreeTable::findElementNumber(_hierarchyTemplateCopyingDialog.parmHierarchyId(),
                                                                        _hierarchyTemplateCopyingDialog.parmSelectedElementNumber());
        hierarchyTemplateCopying = HierarchyTemplateCopying_Proj::construct();
        hierarchyTemplateCopying.init(_hierarchyTemplateCopyingDialog.parmHierarchyName(),
                                  buf2Con(hierarchy),
                                  _hierarchyTemplateCopyingDialog.parmIsImport(),
                                  true,
                                  buf2Con(selectedHierarchyTreeTable),
                                  _hierarchyTemplateCopyingDialog.parmDescription(),
                                  _hierarchyTemplateCopyingDialog.parmIsActive(),
                                  _hierarchyTemplateCopyingDialog.parmShowOnlyTemplates(),
                                  _hierarchyTemplateCopyingDialog.parmCaller());
        return hierarchyTemplateCopying;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromSourceHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create hierarchy records from class defined parameters.
    /// </summary>
    /// <returns><c>Hierarchy table buffer.</c></returns>
    public Hierarchy createFromSourceHierarchy()
    {
        Hierarchy  hierarchyTable = super();

        // Pass ProjPlanVersionsManagerDataContract object to createTemplateHierarchy as parameter.
        ProjPlanVersionsManagerDataContract planVersionsManagerContract = 
            this.setCreateTemplateHierarchyParameters(hierarchyTable.HierarchyId);

        ProjPlanVersionsManagerInstance planVersionsManagerInstance = ProjPlanVersionsManagerInstance::construct();
        planVersionsManagerInstance.createTemplateHierarchy(planVersionsManagerContract, hierarchyName);

        return hierarchyTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCreateTemplateHierarchyParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set parameters for the <c>ProjPlanVersionsManagerDataContract</c> object for create tempalte hierarchy scenario.
    /// </summary>
    /// <param name = "_hierarchyId">Hierarchy ID to be created for the template hierarchy.</param>
    /// <returns><c>ProjPlanVersionsManagerDataContract</c> object.</returns>
    protected ProjPlanVersionsManagerDataContract setCreateTemplateHierarchyParameters(HierarchyIdBase _hierarchyId)
    {
        ProjPlanVersionsManagerDataContract planVersionsManagerContract = new ProjPlanVersionsManagerDataContract();
        planVersionsManagerContract.parmHierarchyId(_hierarchyId);

        return planVersionsManagerContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init(HierarchyName         _hierarchyName,
                 container             _packedHierarchy,
                 boolean               _isImport,
                 boolean               _enableProjActivityCopy        = true,
                 container             _packedDestHierarchyTreeTable  = conNull(),
                 Description           _description                   = '',
                 NoYesId               _isActive                      = true,
                 boolean               _showOnlyTemplates             = false,
                 Object                _caller                        = null,
                 boolean               _calledFromProject             = false,
                 Map                   _genericResourceMapping        = null)
    {
        smmActivities       destSmmActivities;

        super(_hierarchyName, _packedHierarchy, _isImport, _enableProjActivityCopy, _packedDestHierarchyTreeTable, _description, _isActive, _showOnlyTemplates, _caller, _calledFromProject, _genericResourceMapping);
        Hierarchy unpackedHierarchy =  this.parmHierarchy();
        HierarchyTreeTable  unpackedHierarchyTreeTable;
        if (_packedDestHierarchyTreeTable != conNull())
        {
            unpackedHierarchyTreeTable = con2Buf(_packedDestHierarchyTreeTable);
        }

        this.parmCopyProjActivity(_enableProjActivityCopy);
        if (unpackedHierarchy.HierarchyType == HierarchyType::Project)
        {
            this.parmCalledFromProject(true);
            if (unpackedHierarchyTreeTable)
            {
                this.parmHierarchyTreeTable(unpackedHierarchyTreeTable);
                destSmmActivities = SMMActivities::findWithRecId(unpackedHierarchyTreeTable.RefRecId);
                this.parmDestRootActivities(destSmmActivities);
            }
        }

        if (!prmisDefault(_calledFromProject))
        {
            this.parmCalledFromProject(_calledFromProject);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDestinationHierarchytable</Name>
				<Source><![CDATA[
    public HierarchyTreeTable getDestinationHierarchytable(Hierarchy _destHierarchy)
    {
        HierarchyTreeTable returnDestTable;

        if (calledFromProject && isImport && destProjHierarchyTreeTable)
        {
            returnDestTable = destProjHierarchyTreeTable.data();
        }
        else
        {
            select returnDestTable where returnDestTable.HierarchyId == _destHierarchy.HierarchyId && !returnDestTable.ParentElementNumber;
        }

        return returnDestTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>