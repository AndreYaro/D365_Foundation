<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EUSalesListReportingEngine_LV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>EUSalesListReportingEngine_LV</c> extends the functionality of <c>EUSalesListReportingEngine</c>
///     class to support Latvian specific requirements.
/// </summary>
#ISOCountryRegionCodes
[CountryRegionAttribute(#isoLV)]
public class EUSalesListReportingEngine_LV extends EUSalesListReportingEngine implements BatchRetryable
{
    AmountMST totalAmountPurchasedOnBehalf;

    #define.CurrentVersion(2)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addHeader</Name>
				<Source><![CDATA[
    protected EUSalesListReportingHeader addHeader()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLineToTotals</Name>
				<Source><![CDATA[
    protected void addLineToTotals(EUSalesListReportingLine _euSalesListReportingLine)
    {
        super(_euSalesListReportingLine);
        totalAmountPurchasedOnBehalf += _euSalesListReportingLine.PurchasedOnBehalfAmountMST_LV;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateGrandTotals</Name>
				<Source><![CDATA[
    protected void calculateGrandTotals(EUSalesListReportingHeader _euSalesListReportingHeader)
    {
        _euSalesListReportingHeader.TotalAmountPurchasedOnBehalf_LV = totalAmountPurchasedOnBehalf;

        super(_euSalesListReportingHeader);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGenerateFile</Name>
				<Source><![CDATA[
    protected boolean canGenerateFile()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportData</Name>
				<Source><![CDATA[
    /// <summary>
    ///  The method prepare data for report.
    /// </summary>
    /// <returns>
    ///  Report Data.
    /// </returns>
    public str getReportData()
    {
        str reportData;

        this.prepareQuery();
        ttsbegin;
        this.parmEUSalesListReportingHeaderRecId(this.calculate());
        ttsCommit;

        return reportData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEmptyLine</Name>
				<Source><![CDATA[
    protected boolean isEmptyLine(EUSalesListReportingLine _euSalesListReportingLine)
    {
        boolean ret;

        ret = super(_euSalesListReportingLine) && _euSalesListReportingLine.PurchasedOnBehalfAmountMST_LV == 0;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies runtime filters on the query for data selection.
    /// </summary>
    protected void prepareQuery()
    {
        super();

        SysQuery::findOrCreateRange(queryRun.query().dataSourceTable(tableNum(EUSalesList)), fieldNum(EUSalesList, Corrected)).value(queryValue(NoYes::No));
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer         version = RunBase::getVersion(packedClass);
        container       packedSuper;

        switch (version)
        {
            case #CurrentVersion:
                [version, packedSuper] = packedClass;
                if (packedSuper)
                {
                    return super(packedSuper);
                }
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLineAmounts</Name>
				<Source><![CDATA[
    protected void updateLineAmounts(EUSalesListReportingLine _euSalesListReportingLine)
    {
        EUSalesList                 euSalesList;

        euSalesList = queryRun.get(tableNum(EUSalesList));

        if (euSalesList.AmountMST && euSalesList.Listcode == Listcode::PurchasedOnBehalf_LV)
        {
            _euSalesListReportingLine.selectForUpdate(true);
            _euSalesListReportingLine.PurchasedOnBehalfAmountMST_LV += euSalesList.AmountMST;
        }

        super(_euSalesListReportingLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        return super(calledFrom);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return EUSalesListReportingEngine::description();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>