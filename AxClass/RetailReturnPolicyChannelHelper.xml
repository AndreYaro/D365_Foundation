<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailReturnPolicyChannelHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Application.Instrumentation;

/// <summary>
/// The <c>RetailReturnPolicyChannelHelper</c> class is the class that is used for data validation in <c>RetailReturnPolicyChannel</c> form.
/// </summary>
internal class RetailReturnPolicyChannelHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processOUPickerDataAndUpdateChannelTableWithPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Callback of RetailOperatingUnitPicker.
    /// After organization units are selected, this method will be called to
    /// 1. Validate the selected organization units
    /// 2. Update selected organization units to RetailChannelTable.
    /// </summary>
    /// <param name = "ouPickerData">
    /// The set of selected organization units.
    /// </param>
    /// <param name = "policy">
    /// The selected retail return policy.
    /// </param>
    /// <returns>
    /// A boolean indicating if RetailChannelTable is updated with the policy.
    /// </returns>
    internal static boolean processOUPickerDataAndUpdateChannelTableWithPolicy(RetailOperatingUnitPickerData ouPickerData, RetailReturnPolicyChannel policy)
    {
        boolean isRetailChannelTableUpdated = false;

        Set selectedOMInternalOrganizationIds = ouPickerData.omInternalOrganizationRecIds;

        if (selectedOMInternalOrganizationIds.elements() > 0)
        {
            // Find out all the stores that are newly selected
            Set organizationIdsToUpdate = RetailReturnPolicyChannelHelper::searchStoresBySelectedOperatingUnit(policy.RecId, selectedOMInternalOrganizationIds, ouPickerData.omHierarchyTypeRecId);

            // Validate if the selected stores can apply the polcy; If a store's validation fail, this store will be removed from update list.
            if (!organizationIdsToUpdate.empty())
            {
                // Perform the validation.
                Set invalidOrganizationIds = RetailReturnPolicyChannelHelper::validateSelectedOperatingUnit(policy.RecId, organizationIdsToUpdate);

                if (!invalidOrganizationIds.empty())
                {
                    // Invalid stores will not apply the policy.
                    SetEnumerator enumerator = invalidOrganizationIds.getEnumerator();
                    while (enumerator.moveNext())
                    {
                        organizationIdsToUpdate.remove(enumerator.current());

                        RetailChannelTable currentChannel = RetailChannelTable::findByOperatingUnitId(enumerator.current());
                        RetailStoreTable currentStore = RetailStoreTable::findRecId(currentChannel.RecId);

                        // error: The policy %1 cannot be applied to store %2. Please check the policy rules and the payment methods supported by the store.
                        error(strFmt("@RetailReturnPolicy:ChannelPaymentTypeNotSupportedError", policy.PolicyName, currentStore.StoreNumber));
                    }
                }
            }

            // Add the policy to the stores.
            if (!organizationIdsToUpdate.empty())
            {
                // Update RetailChannelTable table with the policy for those selected stores that pass validations.

                SetEnumerator enumerator = organizationIdsToUpdate.getEnumerator();
                while (enumerator.moveNext())
                {
                    RetailChannelTable foundChannelTable = RetailChannelTable::findByOperatingUnitId(enumerator.current());
                    if (foundChannelTable)
                    {
                        ttsbegin;
                        RetailChannelTable channelTable;

                        select forupdate * from channelTable where channelTable.RecId == foundChannelTable.RecId;

                        channelTable.RetailReturnPolicyChannel = policy.RecId;
                        channelTable.Update();
                        ttscommit;
                    }
                }
                isRetailChannelTableUpdated = true;
            }
        }

        return isRetailChannelTableUpdated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchStoresBySelectedOperatingUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find out all the selected stores of selected org units, or the stores that are under the selected org units;
    /// Only return the org units that need to be updated with the specified policy.
    /// </summary>
    /// <param name = "policyRecId">
    /// Return policy record identifier.
    /// </param>
    /// <param name = "selectedOMInternalOrganizationIds">
    /// Selected org units.
    /// </param>
    /// <param name = "omHierarchyTypeRecId">The hierarchy type's record Id.</param>
    /// <returns>
    /// A list of store org units that shall be updated with the policy.
    /// </returns>
    private static Set searchStoresBySelectedOperatingUnit(RetailReturnPolicyChannelRecId policyRecId, Set selectedOMInternalOrganizationIds, RecId omHierarchyTypeRecId = 0)
    {
        Set selectedNewStorePolicyOrganizationIds = new Set(Types::Int64);
        if (selectedOMInternalOrganizationIds.empty())
        {
            return selectedNewStorePolicyOrganizationIds;
        }

        // For each of the selectedOMInternalOrganizationIds,
        // if it is a store, add it to selectedStoreCandidates;
        // otherwise, find all the stores under this org unit, and them add them to selectedStoreCandidates.
        SetEnumerator enumerator;
        RefRecId omOperatingUnitID;
        Set selectedStoreCandidates = new Set(Types::Int64);
        boolean selectedOrgUnitsHasNonRetailStore;
        Set organizationTypes = new Set(Types::Enum);
        organizationTypes.add(OMInternalOrganizationType::OperatingUnit);
        SetEnumerator omOperatingUnitsEnumerator;
        enumerator = selectedOMInternalOrganizationIds.getEnumerator();
        while (enumerator.moveNext())
        {
            omOperatingUnitID = enumerator.current();

            if (RetailReturnPolicyChannelHelper::isOrganizationRetailStore(omOperatingUnitID))
            {
                selectedStoreCandidates.add(omOperatingUnitID);
            }
            else
            {
                // Filter the organization model to include only operating units effective as of right now.
                Set omOperatingUnits = OMInternalOrganization::getDescendantsAndSelf(omOperatingUnitID, omHierarchyTypeRecId, DateTimeUtil::utcNow(), organizationTypes);
                omOperatingUnitsEnumerator = omOperatingUnits.getEnumerator();
                while (omOperatingUnitsEnumerator.moveNext())
                {
                    OMOperatingUnit omOperatingUnit = OMOperatingUnit::find(omOperatingUnitsEnumerator.current(), OMOperatingUnitType::RetailChannel);
                    if (omOperatingUnit && RetailReturnPolicyChannelHelper::isOrganizationRetailStore(omOperatingUnit.RecId))
                    {
                        selectedStoreCandidates.add(omOperatingUnit.RecId);
                    }
                    else
                    {
                        selectedOrgUnitsHasNonRetailStore = true;
                    }
                }
            }
        }

        // Retrieve the list of stores that are already using the policy
        Set existingStoresUsingThePolicy = new Set(Types::Int64);
        RetailChannelTable channelTable;

        while select OMOperatingUnitID from channelTable
            where channelTable.ChannelType == RetailChannelType::RetailStore
            && channelTable.RetailReturnPolicyChannel == policyRecId
        {
            existingStoresUsingThePolicy.add(channelTable.OMOperatingUnitID);
        }

        // Filter out the stores that are already using the policy
        Set selectedStores = new Set(Types::Int64);
        boolean selectedOrgUnitsHasPolicyAlreadyApplied;
        enumerator = selectedStoreCandidates.getEnumerator();
        while (enumerator.moveNext())
        {
            if(existingStoresUsingThePolicy.in(enumerator.current()))
            {
                selectedOrgUnitsHasPolicyAlreadyApplied = true;
            }
            else
            {
                selectedStores.add(enumerator.current());
            }
        }

        if (selectedOrgUnitsHasNonRetailStore)
        {
            // warning: One or more selected nodes are not stores, nor they contain any stores.
            warning("@RetailReturnPolicy:OrgUnitNotStoreWarning");
        }

        if (selectedOrgUnitsHasPolicyAlreadyApplied)
        {
            // throw a warning: One or more selected nodes already have the policy applied.
            warning("@RetailReturnPolicy:OrgUnitAlreadyHasPolicyWarning");
        }

        return selectedStores;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSelectedOperatingUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the selected stores, and return the stores that fail the validation.
    /// </summary>
    /// <param name = "policyRecId">
    /// Return policy RecId.
    /// </param>
    /// <param name = "organizationIds">
    /// Selected org units.
    /// </param>
    /// <returns>
    /// A set of organization units that fail to pass all validations;
    /// False otherwise.
    /// </returns>
    private static Set validateSelectedOperatingUnit(RetailReturnPolicyChannelRecId policyRecId, Set organizationIds)
    {
        RetailReturnPolicyChannel policy = RetailReturnPolicyChannel::find(policyRecId);
        if (!policy)
        {
            error("@RetailReturnPolicy:RetailReturnPolicyChannelNoPolicyError");
            return organizationIds.clone();
        }

        Set invalidOrganizationIds = new Set(Types::Int64);

        // find the set of original tender types in this policy
        Set originalTenderTypeIds = new Set(Types::string);
        RetailReturnPolicyChannelPaymentMapping returnPaymentMethodMapping;

        while select OriginalTenderTypeId from returnPaymentMethodMapping
            group by OriginalTenderTypeId
            where returnPaymentMethodMapping.RetailReturnPolicyChannel == policyRecId
        {
            originalTenderTypeIds.add(returnPaymentMethodMapping.OriginalTenderTypeId);
        }

        if (originalTenderTypeIds.empty())
        {
            // The policy does not contain any return payment method rules
            return invalidOrganizationIds;
        }

        // Loop through each store for validation.
        SetEnumerator enumerator = organizationIds.getEnumerator();
        while (enumerator.moveNext())
        {
            // Validate for each original payment method in the policy, the store should support at least one of the return payment methods.

            // A store's org unit
            RefRecId storeOperatingUnitID = enumerator.current();
            boolean storeValidationSuccessful = true;

            Set paymentMethodsSupportedByStore = RetailReturnPolicyChannelHelper::findStorePaymentMethods(storeOperatingUnitID);

            SetEnumerator originalTenderTypeIdsEnumerator = originalTenderTypeIds.getEnumerator();
            while (originalTenderTypeIdsEnumerator.moveNext())
            {
                Set returnPaymentMethodsSpecifiedByPolicy = RetailReturnPolicyChannelHelper::findPolicyReturnPaymentMethods(policyRecId, originalTenderTypeIdsEnumerator.current());

                if (Set::intersection(paymentMethodsSupportedByStore, returnPaymentMethodsSpecifiedByPolicy).empty())
                {
                    // For this (original) payment method, the store do not support any of the specified return payment methods.
                    storeValidationSuccessful = false;
                    break;
                }
            }

            if (!storeValidationSuccessful)
            {
                invalidOrganizationIds.add(storeOperatingUnitID);
            }
        }

        return invalidOrganizationIds;

    }

]]></Source>
			</Method>
			<Method>
				<Name>findPolicyReturnPaymentMethods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Given a payment method, find the return payment methods that are specified by the policy.
    /// </summary>
    /// <param name = "policyRecId">
    /// The policy RecId.
    /// </param>
    /// <param name = "originalTenderType">
    /// The original payment method.
    /// </param>
    /// <returns>
    /// A set of payment methods for return.
    /// </returns>
    private static Set findPolicyReturnPaymentMethods(RetailReturnPolicyChannelRecId policyRecId, RetailReturnPolicyChannelOriginalTenderType originalTenderType)
    {
        Set returnPaymentMethods = new Set(Types::string);

        RetailReturnPolicyChannelPaymentMapping returnPaymentMethodMappingTable;

        while select AllowedReturnTenderTypeId
            from returnPaymentMethodMappingTable
            where returnPaymentMethodMappingTable.RetailReturnPolicyChannel == policyRecId
            && returnPaymentMethodMappingTable.OriginalTenderTypeId == originalTenderType
        {
            returnPaymentMethods.add(returnPaymentMethodMappingTable.AllowedReturnTenderTypeId);
        }

        return returnPaymentMethods;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findStorePaymentMethods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find all the payment methods that the store supports.
    /// </summary>
    /// <param name = "operatingUnitID">
    /// The store org unit identifier.
    /// </param>
    /// <returns>
    /// A set of payment methods.
    /// </returns>
    private static Set findStorePaymentMethods(RefRecId operatingUnitID)
    {
        Set storeSupportedPaymentMethods = new Set(Types::string);

        RetailChannelTable channelTable = RetailChannelTable::findByOperatingUnitId(operatingUnitID);

        if (channelTable)
        {
            RetailStoreTenderTypeTable tenderTable;

            while select tenderTypeId from tenderTable
                where tenderTable.Channel == channelTable.RecId
            {
                storeSupportedPaymentMethods.add(tenderTable.tenderTypeId);
            }
        }

        return storeSupportedPaymentMethods;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOrganizationRetailStore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the org unit is a retail store.
    /// </summary>
    /// <param name = "operatingUnitID">
    /// The store org unit identifier.
    /// </param>
    /// <returns>
    /// A boolean indicating if the org unit is a retail store.
    /// </returns>
    private static boolean isOrganizationRetailStore(RefRecId operatingUnitID)
    {
        RetailChannelTable retailChannelTableRecord = RetailChannelTable::findByOperatingUnitId(operatingUnitID);

        return (retailChannelTableRecord && retailChannelTableRecord.ChannelType == RetailChannelType::RetailStore);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>