<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustReversePostingApplicationSuite_IT_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(CustReversePosting))]
public final class CustReversePostingApplicationSuite_IT_Extension
{
    public container InvoicePayment_IT;
    public List invoicePaymentList_IT;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>reverseCommission_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverses the commission.
    /// </summary>
    public void reverseCommission_IT()
    {
        if (!invoicePaymentList_IT)
        {
            invoicePaymentList_IT = new List(Types::Container);
        }

        CustInvoiceJour invoiceJour;
        ListEnumerator e = invoicePaymentList_IT.getEnumerator();

        setprefix("@SYS334280");

        while (e.moveNext())
        {
            invoicePayment_IT = e.current();
            select firstOnly invoiceJour
                where invoiceJour.InvoiceId == conPeek(invoicePayment_IT, 1);

            Voucher paymentVoucher = conPeek(invoicePayment_IT, 2);

            if (invoiceJour
                && invoiceJour.CommissionType_IT == CommissionType_IT::Payment
                && Commission_Settlement_IT::reverseAccruing(LedgerVoucher, paymentVoucher, invoiceJour))
            {
                info (strfmt("@ExtendedItallianLocalization:CommissionsReversedForInvoice",InvoiceJour.InvoiceId, paymentVoucher));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseSettlement</Name>
				<Source><![CDATA[
    public void reverseSettlement(CustVendSettlement _custVendSettlement)
    {
        boolean commissionSettlementFeatureEnabled = FeatureStateProvider::isFeatureEnabled(CommissionSettlementOnPaymentsFeature::instance());
        CustTrans custTransOffset = CustTrans::find(_custVendSettlement.OffsetRecId);

        if (commissionSettlementFeatureEnabled && !invoicePaymentList_IT)
        {
            invoicePaymentList_IT = new List(Types::Container);
        }

        next reverseSettlement(_custVendSettlement);

        if (commissionSettlementFeatureEnabled)
        {
            List commissionVouchers = new List(Types::String);
            Voucher paymentVoucher;

            if (custTransOffset.isPayment() && custTransOffset.BillOfExchangeID && custTransOffset.BillOfExchangeStatus == CustVendNegInstStatus::Honored)
            {
                CustBillOfExchangeInvoice custBoeInvoice;
                while select InvoiceId from custBoeInvoice
                    where custBoeInvoice.BillOfExchangeId == custTransOffset.BillOfExchangeID
                {
                    commissionVouchers.addEnd(custBoeInvoice.InvoiceId);
                }

                paymentVoucher = custTransOffset.Voucher;
            }
            else
            {
                if (custTransOffset.isInvoice() || custTransOffset.isCreditNote())
                {
                    commissionVouchers.addEnd(custTransOffset.Invoice);
                }

                paymentVoucher = custVendTrans.Voucher;
            }

            ListEnumerator e = commissionVouchers.getEnumerator();

            while (e.moveNext())
            {
                invoicePaymentList_IT.addEnd([e.current(), paymentVoucher]);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    public void updateNow()
    {
        boolean commissionSettlementFeatureEnabled = FeatureStateProvider::isFeatureEnabled(CommissionSettlementOnPaymentsFeature::instance());

        if (commissionSettlementFeatureEnabled)
        {
            Common common = this.parmCommon_IT();
            SpecTrans specTrans;
            CustVendSettlement custVendSettlement;
            ttsbegin;

            while select crosscompany specTrans
                where specTrans.SpecTableId == common.TableId
                   && specTrans.SpecRecId == common.RecId
                   && specTrans.SpecCompany == common.company()
                join forupdate custVendSettlement
                    order by SettlementGroup
                    where custVendSettlement.TableId == specTrans.RefTableId
                       && custVendSettlement.RecId == specTrans.RefRecId
                       && custVendSettlement.DataAreaId == specTrans.RefCompany
            {
                if (custVendSettlement)
                {
                    // Reverse based upon the company of the settlement record being processed.
                    // The offset will eventually be processed due to the cross company nature
                    // of the select statement that drives the reversal process.
                    changecompany (custVendSettlement.company())
                    {
                        // Get the ledgerVoucher for each unique company/settlement group combination.
                        this.findLedgerVoucherByCompany();
                    }
                }

                this.reverseCommission_IT();
            }
        }

        next updateNow();

        if (commissionSettlementFeatureEnabled)
        {
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCommon_IT</Name>
				<Source><![CDATA[
    public Common parmCommon_IT( Common _common = common)
    {
        this.common = _common;
        return this.common;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>