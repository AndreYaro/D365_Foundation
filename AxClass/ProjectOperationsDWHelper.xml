<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjectOperationsDWHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.DualWrite.SyncProviders;
using Microsoft.Dynamics.DualWrite.Metadata.Contracts;
using Microsoft.Dynamics.DualWrite.Metadata.Util;
using System.Net;
using System.IO;

/// <summary>
/// This class is used to generate URLs
/// for opening coresponding data in CRM.
/// </summary>
internal class ProjectOperationsDWHelper
{
    private const str CacheScope = 'ProjectOperationsDWCacheScope';
    private URL baseUrl;
    private DualWriteProjectConfiguration dualWriteProjectConfiguration;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static ProjectOperationsDWHelper construct()
    {
        return new ProjectOperationsDWHelper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSyncProvider</Name>
				<Source><![CDATA[
    private ICDSSyncProvider createSyncProvider(
        DualWriteProjectConfiguration _projectConfiguration,
        str _serviceBusConnectionString,
        str _storageAccountSASConnectionString,
        QueueOperationType _queueOperationType,
        str _dualWriteAlertSettings)
    {
        CDSSyncProviderOptions syncOptions = new CDSSyncProviderOptions();
        syncOptions.PayloadGenerator = new CDSPayloadGenerator();
        syncOptions.set_ProjectId(_projectConfiguration.ProjectName);
        syncOptions.set_QueueOperationType(_queueOperationType);
        syncOptions.set_DualWriteAlertSettings(_dualWriteAlertSettings);
        syncOptions.set_IntegrationKeyColumns(_projectConfiguration.IntegrationKey);
        syncOptions.set_ExternalEnvironmentUrl(_projectConfiguration.ExternalEnvironmentUrl);
        syncOptions.set_EnableLookupCache(_projectConfiguration.EnableCache == NoYes::Yes);

        if (_projectConfiguration.Status == DualWriteProjectStatus::Queueing)
        {
            syncOptions.set_CDSSyncProviderType(CDSSyncProviderType::CDSQueueSync);
            syncOptions.set_ServiceBusConnectionString(_serviceBusConnectionString);
            syncOptions.set_StorageAccountSASConnectionString(_storageAccountSASConnectionString);
        }
        else if (_queueOperationType == QueueOperationType::Delete)
        {
            syncOptions.set_CDSSyncProviderType(CDSSyncProviderType::CDSDeleteSync);
        }
        else
        {
            syncOptions.set_CDSSyncProviderType(CDSSyncProviderType::CDSSequentialSync);
        }

        CDSSyncProviderFactory syncProviderFactory = new CDSSyncProviderFactory();

        var syncProvider = syncProviderFactory.GetCDSSyncProvider(syncOptions);

        return syncProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccessToken</Name>
				<Source><![CDATA[
    private str getAccessToken(DualWriteProjectConfiguration _projectConfiguration)
    {
        const int TokenExpiryOffset = 15;

        try
        {
            str accessToken;
            utcdatetime tokenExpiryTime = DateTimeUtil::minValue();
            str resource = _projectConfiguration.ExternalEnvironmentUrl;
            System.Uri resourceUrl  = new System.Uri(_projectConfiguration.ExternalEnvironmentUrl);
            resource = resourceUrl.Scheme + "://" + resourceUrl.Host;

            container key = [_projectConfiguration.Recversion, resource];
            container result = ProjectOperationsDWHelper::getContainerFromCache(CacheScope, key);

            if (result && conLen(result) > 1)
            {
                tokenExpiryTime =  conpeek(result, 2);
            }

            utcdatetime currentDateTime = DateTimeUtil::addMinutes(DateTimeUtil::utcNow(), -TokenExpiryOffset);

            if (tokenExpiryTime == DateTimeUtil::minValue() || tokenExpiryTime < currentDateTime)
            {
                container mappingInfo = this.GetFieldMappingForProject(_projectConfiguration);
                ICDSSyncProvider syncProvider = this.CreateSyncProvider(_projectConfiguration,
                    con2Str(conPeek(mappingInfo, 3)),
                    con2Str(conPeek(mappingInfo, 4)),
                    QueueOperationType::Create,
                    con2Str(conPeek(mappingInfo, 5)));
                AccessTokenData accessTokenData = syncProvider.GetAccessTokenData(resource);

                if (accessTokenData == null)
                {
                    return '';
                }

                accessToken = accessTokenData.AccessToken;
                System.DateTimeOffset expiry = accessTokenData.ExpiresOn;
                tokenExpiryTime = expiry.UtcDateTime;
                result = [accessToken, tokenExpiryTime];
                ProjectOperationsDWHelper::addToSysGlobalObjectCache(CacheScope, key, result);
            }
            else
            {
                accessToken = conpeek(result, 1);
            }

            return accessToken;
        }
        catch(Exception::CLRError)
        {
            System.Exception exception = CLRInterop::getLastException();
            throw exception;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBaseUrl</Name>
				<Source><![CDATA[
    public str getBaseUrl(str _entityName)
    {
        if (!baseUrl)
        {
            select firstonly dualWriteProjectConfiguration
                where dualWriteProjectConfiguration.ExternalEntityName == _entityName
                    && dualWriteProjectConfiguration.IsDelete == NoYes::No;

            if (!dualWriteProjectConfiguration)
            {
                throw error(strFmt("@Proj:DWEntityMapNotRunning", _entityName));
            }

            System.Uri uri = new System.Uri(dualWriteProjectConfiguration.ExternalEnvironmentUrl);
            baseUrl = uri.Scheme + "://" + uri.get_Host();
        }

        return baseUrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCEAppModuleId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get Id of applicaion module id from CRM.
    /// </summary>
    /// <param name = "_entityName">
    /// Entity name.
    /// </param>
    /// <returns>
    /// Id of applicaion module id from CRM.
    /// </returns>
    public str getCEAppModuleId(str _entityName)
    {
        URL url = strFmt(
            '%1%2',
            this.getBaseUrl(_entityName),
            ProjectOperationsDWConstants::ApiAppmoduleIdPath);
        Map map = this.getJsonMap(url);
        str result = this.getValueFromMap(map, ProjectOperationsDWConstants::Value, ProjectOperationsDWConstants::AppmoduleId);
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ID of the Company record from CRM.
    /// </summary>
    /// <param name = "_company">
    /// The Company name in Finance and Operations.
    /// </param>
    /// <returns>
    /// The ID of Company record from CRM.
    /// </returns>
    public str getCompanyId(str _company)
    {
        Map filters = new Map(Types::String, Types::String);
        filters.insert(ProjectOperationsDWConstants::CompanyCode, strFmt('\'%1\'', _company));
        return this.getIdOfRecordInCE(
            ProjectOperationsDWConstants::CompanyEntityApi,
            filters,
            ProjectOperationsDWConstants::CompanyId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldMappingForProject</Name>
				<Source><![CDATA[
    private container getFieldMappingForProject(DualWriteProjectConfiguration _projectConfiguration)
    {
        container result;

        if (!_projectConfiguration)
        {
            result = conNull();
        }
        else
        {
            container key = [_projectConfiguration.Recversion, _projectConfiguration.InternalEntityName, _projectConfiguration.projectName];
            result = ProjectOperationsDWHelper::getContainerFromCache(CacheScope, key);
            if (result == conNull())
            {
                DualWriteProjectFieldConfiguration fieldConfig;
                select firstonly fieldConfig where fieldConfig.ProjectName == _projectConfiguration.ProjectName;
                if (!fieldConfig)
                {
                    result = conNull();
                }

                result = [str2con(fieldConfig.FieldMap),
                    str2con(fieldConfig.ExternalLookupUrls),
                    str2con(fieldConfig.ServiceBusConnectionStringEdit(false, fieldConfig.ServiceBusConnectionString)),
                    str2con(fieldConfig.StorageAccountSASConnectionStringEdit(false, fieldConfig.StorageAccountSASConnectionString)),
                    str2con(fieldConfig.DualWriteAlertSettingsEdit(false, fieldConfig.DualWriteAlertSettings))];

                ProjectOperationsDWHelper::addToSysGlobalObjectCache(CacheScope, key, result);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIdOfRecordInCE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get Id of specific entity record from CRM.
    /// </summary>
    /// <param name = "_entityName">
    /// Entity name.
    /// </param>
    /// <param name = "_filters">
    /// Query filters
    /// </param>
    /// <param name = "_pkName">
    /// Primary key name.
    /// </param>
    /// <returns>
    /// Id of specific entity record from CRM.
    /// </returns>
    public str getIdOfRecordInCE(str _entityName, Map _filters, str _pkName)
    {
        MapEnumerator en = _filters.getEnumerator();
        container filters;
        int pos = 1;

        while (en.moveNext())
        {
            filters = conPoke(
                filters,
                pos,
                strFmt('%1%2%3', en.currentKey(), ProjectOperationsDWConstants::ApiQueryEqual, en.currentValue()));
            pos++;
        }

        Map map = this.getJsonMap(
            strFmt(
                '%1%2%3%4%5%6%7',
                this.getBaseUrl(_entityName),
                ProjectOperationsDWConstants::ApiPath,
                _entityName,
                '?' + ProjectOperationsDWConstants::ApiQuerySelect,
                _pkName,
                '&' + ProjectOperationsDWConstants::ApiQueryFilter,
                con2Str(filters, '%20and%20')));
        str id = this.getValueFromMap(map, ProjectOperationsDWConstants::Value, _pkName);

        return id;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJsonMap</Name>
				<Source><![CDATA[
    private Map getJsonMap(str _url)
    {
        Map map;
        WebHeaderCollection header = new WebHeaderCollection();
        header.Add(HttpRequestHeader::Authorization, this.getAccessToken(dualWriteProjectConfiguration));
        HttpWebRequest webreq = System.Net.WebRequest::Create(_url);
        webreq.Headers = header;
        
        using (HttpWebResponse httpWebResponse = webreq.GetResponse())
        {
            if (httpWebResponse != null && httpWebResponse.get_StatusCode() != HttpStatusCode::NoContent)
            {
                using (Stream responseStream = httpWebResponse.GetResponseStream())
                {
                    using (StreamReader reader = new StreamReader(responseStream))
                    {
                        map = RetailCommonWebAPI::getMapFromJsonString(reader.ReadToEnd());
                    }
                }
            }
            else
            {
                throw error("@Proj:CEUrlGenerationError");
            }
        }

        return map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValueFromMap</Name>
				<Source><![CDATA[
    private str getValueFromMap(Map _map, str _elementName, str _fieldName)
    {
        const int conPos = 4;
        str result;

        if (_map)
        {
            container con = _map.lookup(ProjectOperationsDWConstants::Value);

            if (conLen(con) >= conPos)
            {
                con = conPeek(con, conPos);
                Map value = Map::create(con);

                if (value)
                {
                    result = value.lookup(_fieldName);
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>openCEEntityInNewTab</Name>
				<Source><![CDATA[
    private void openCEEntityInNewTab(str _entityTypeApi, str _entityType, Map _filters, str _pkName)
    {
        str appModuleId = this.getCEAppModuleId(_entityTypeApi);
        str id = this.getIdOfRecordInCE(_entityTypeApi, _filters, _pkName);
        str url = strFmt(
            ProjectOperationsDWConstants::EntityRecordPath,
            this.getBaseUrl(_entityTypeApi),
            appModuleId,
            _entityType,
            id);
        new Browser().navigate(url, true, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openProjectContractDetailsInCE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the given Project contract in CRM.
    /// </summary>
    /// <param name = "_projectContractId">
    /// The Project contract ID in Finance and Operations.
    /// </param>
    /// <param name = "_company">
    /// The Company ID in Finance and Operations.
    /// </param>
    public void openProjectContractDetailsInCE(str _projectContractId, str _company)
    {
        Map filters = new Map(Types::String, Types::String);
        filters.insert(ProjectOperationsDWConstants::ProjectContractNumber,  strFmt('\'%1\'', _projectContractId));
        filters.insert(
            ProjectOperationsDWConstants::CompanyValue,
            this.getCompanyId(_company));

        this.openCEEntityInNewTab(
            ProjectOperationsDWConstants::ProjectContractEntityApi,
            ProjectOperationsDWConstants::ProjectContractEntity,
            filters,
            ProjectOperationsDWConstants::ProjectContractId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openProjectContractLineDetailsInCE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the given Project contract line in CRM.
    /// </summary>
    /// <param name = "_contractLineNum">
    /// The Project contract line ID in CE.
    /// </param>
    /// <param name = "_company">
    /// The Company ID in CE.
    /// </param>
    public void openProjectContractLineDetailsInCE(str _contractLineNum, str _company)
    {
        Map filters = new Map(Types::String, Types::String);
        filters.insert(ProjectOperationsDWConstants::ProjectContractLineNumber,  strFmt('\'%1\'', _contractLineNum));
        filters.insert(
            ProjectOperationsDWConstants::CompanyValue,
            this.getCompanyId(_company));

        this.openCEEntityInNewTab(
            ProjectOperationsDWConstants::ProjectContractLineEntityApi,
            ProjectOperationsDWConstants::ProjectContractLineEntity,
            filters,
            ProjectOperationsDWConstants::ProjectContractLineId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openProjectDetailsInCE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the given Project in CRM.
    /// </summary>
    /// <param name = "_projectId">
    /// The Project ID in Finance and Operations.
    /// </param>
    /// <param name = "_company">
    /// The Company ID in Finance and Operations.
    /// </param>
    public void openProjectDetailsInCE(ProjId _projectId, str _company)
    {
        Map filters = new Map(Types::String, Types::String);
        filters.insert(ProjectOperationsDWConstants::ProjectNumber, strFmt('\'%1\'', _projectId));
        filters.insert(
            ProjectOperationsDWConstants::OwningCompany,
            this.getCompanyId(_company));

        this.openCEEntityInNewTab(
            ProjectOperationsDWConstants::ProjectsEntityApi,
            ProjectOperationsDWConstants::ProjectsEntity,
            filters,
            ProjectOperationsDWConstants::ProjectId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openProjectSubcontractDetailsInCE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the given Project subcontract in CRM.
    /// </summary>
    /// <param name = "_subcontractNum">The Project subcontract ID in CE.</param>
    /// <param name = "_company">The Company ID in CE.</param>
    public void openProjectSubcontractDetailsInCE(str _subcontractNum, str _company)
    {
        Map filters = new Map(Types::String, Types::String);
        filters.insert(ProjectOperationsDWConstants::ProjectSubcontractNumber,  strFmt('\'%1\'', _subcontractNum));
        filters.insert(
            ProjectOperationsDWConstants::CompanyValue,
            this.getCompanyId(_company));

        this.openCEEntityInNewTab(
            ProjectOperationsDWConstants::ProjectSubcontractEntityApi,
            ProjectOperationsDWConstants::ProjectSubcontractEntity,
            filters,
            ProjectOperationsDWConstants::ProjectSubcontractId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openProjectSubcontractLineDetailsInCE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the given Project subcontract line in CRM.
    /// </summary>
    /// <param name = "_subcontractLineNum">
    /// The Project subcontract line ID in CE.
    /// </param>
    /// <param name = "_company">
    /// The Company ID in CE.
    /// </param>
    public void openProjectSubcontractLineDetailsInCE(str _subcontractLineNum, str _company)
    {
        Map filters = new Map(Types::String, Types::String);
        filters.insert(ProjectOperationsDWConstants::ProjectSubcontractLineNumber,  strFmt('\'%1\'', _subcontractLineNum));
        filters.insert(
            ProjectOperationsDWConstants::OwningCompany,
            this.getCompanyId(_company));

        this.openCEEntityInNewTab(
            ProjectOperationsDWConstants::ProjectSubcontractLineEntityApi,
            ProjectOperationsDWConstants::ProjectSubcontractLineEntity,
            filters,
            ProjectOperationsDWConstants::ProjectSubcontractLineId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContainerFromCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a container from the System Global Object Cache,
    /// based on the given scope and key.
    /// </summary>
    /// <param name = "_scope">The scope of the cache</param>
    /// <param name = "_key">The key for the scope.</param>
    /// <returns>A container.</returns>
    private static container getContainerFromCache(str _scope, container _key)
    {
        SysGlobalObjectCache sgoc = new SysGlobalObjectCache();
        container result = sgoc.find(_scope, _key);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToSysGlobalObjectCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a container to the System Global Object Cache,
    /// based on the given scope and key.
    /// </summary>
    /// <param name = "_scope">The scope of the cache</param>
    /// <param name = "_key">The key for the scope.</param>
    /// <param name = "_value">The container to add.</param>
    private static void addToSysGlobalObjectCache(str _scope, container _key, container _value)
    {
        SysGlobalObjectCache sgoc = new SysGlobalObjectCache();

        sgoc.insert(_scope, _key, _value);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>