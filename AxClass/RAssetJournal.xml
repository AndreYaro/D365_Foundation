<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetJournal
{
    TransactionTxt              transactionTxt;

    LedgerJournalTrans          ledgerJournalTrans;
    LedgerJournalTrans_RAsset   ledgerJournalTrans_RAsset;

    Voucher                     voucher;
    LedgerJournalId             journalNum;
    RAssetTransType             rAssetTransType;
    LineNum                     lineNum;

    ReasonRefRecID              reasonRefRecID;
    ReasonCode                  reasonCode;
    ReasonComment               reasonComment;

    Correct_RU                  correct;
    TransDate                   accountingDate;
    FiscalCalendarPeriod        fiscalCalendarPeriod;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    public void createTrans(AmountCur                     _paymentAmount,
                            RAssetTable                   _assetTable,
                            TransDate                     _transDate,
                            RAssetStandards               _standards,
                            RAssetBudgetModelId           _assetBudgetModelId  = '',
                            LedgerJournalTransTxt         _transTxt            = '',
                            LedgerDimensionDefaultAccount _defaultAccount      = 0,
                            NoYes                         _rassetCanDisposal   = NoYes::Yes,
                            DimensionDefault              _defaultDimension    = 0)
    {
        LedgerJournalTable            ledgerJournalTable;
        RAssetTableInterval           deprInterval;
        LedgerDimensionDefaultAccount offsetDefaultAccount;
    
        ledgerJournalTrans.clear();
        ledgerJournalTrans_RAsset.clear();
    
        if (!lineNum)
        {
            lineNum = LedgerJournalTrans::lastLineNum(journalNum) + 1;
        }
        else
        {
            lineNum ++;
        }
    
        ledgerJournalTrans.LineNum = lineNum;
    
        ledgerJournalTrans.JournalNum           = journalNum;
        ledgerJournalTrans.Voucher              = voucher;
        ledgerJournalTrans.AccountType          = LedgerJournalACType::FixedAssets_RU;
        ledgerJournalTrans.parmAccount(_assetTable.AccountNum);
    
        if (!reasonRefRecID && (reasonCode != '' || reasonComment != ''))
        {
            reasonRefRecID = ReasonTableRef::createReasonTableRef(reasonCode, reasonComment);
        }
    
        ledgerJournalTrans.ReasonRefRecID       = reasonRefRecID;
    
        deprInterval                            = RAssetTableInterval::construct(RAssetStandards::find(_assetTable.AccountNum , _standards.AssetStandardId), _transDate);
    
        ledgerJournalTrans.PostingProfile       = _standards.postingProfile((rAssetTransType == RAssetTransType::Depreciation ?
                                                                             deprInterval.getStartDate(_transDate) : _transDate));
        ledgerJournalTrans_RAsset.StandardId    = _standards.AssetStandardId;
        ledgerJournalTrans_RAsset.AssetId       = _assetTable.AccountNum;
    
        if (correct)
        {
            ledgerJournalTrans_RAsset.CorrectedPeriod = _transDate;
        }
    
        ledgerJournalTable                      = ledgerJournalTrans.ledgerJournalTable();
    
        ledgerJournalTrans.CurrencyCode         = RAssetJournal::currencyCode(_standards.AssetStandardId, _assetTable);
        ledgerJournalTrans.TransDate            = _transDate;
        if (ledgerJournalTable.FixedExchRate && ledgerJournalTable.CurrencyCode == ledgerJournalTrans.CurrencyCode)
        {
            ledgerJournalTrans.ExchRate          = ledgerJournalTable.ExchRate;
            ledgerJournalTrans.ExchRateSecond    = ledgerJournalTable.ExchrateSecondary;
            ledgerJournalTrans.Triangulation     = ledgerJournalTable.euroTriangulation;
        }
        else
        {
            ledgerJournalTrans.ExchRate          = ExchangeRateHelper::exchRate(ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.TransDate);
            ledgerJournalTrans.ExchRateSecond    = ExchangeRateHelper::exchRateSecond(ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.TransDate);
        }
    
        if (correct)
        {
            ledgerJournalTrans.TransDate = accountingDate;
        }
    
        ledgerJournalTrans.TransactionType      = LedgerTransType::FixedAssets_RU;
    
        if (_transTxt)
        {
            ledgerJournalTrans.Txt   = _transTxt;
        }
        else
        {
            transactionTxt                      = TransactionTxt::construct(LedgerTransTxt::FixedAssetsPostingLedger_RU,
                                                                     CompanyInfo::languageId(),
                                                                     _transDate);
            transactionTxt.setVoucher(voucher);
            transactionTxt.setKey1(_assetTable.AccountNum);
            transactionTxt.setKey2(_standards.AssetGroup);
            ledgerJournalTrans.Txt              = transactionTxt.txt();
        }
    
    
        ledgerJournalTrans_RAsset.TransType     = rAssetTransType;
        ledgerJournalTrans_RAsset.CanDisposal   = _rassetCanDisposal ;
    
        offsetDefaultAccount = _standards.assetOffsetLedgerDimension(_standards.AssetStandardId,
                                                                     ledgerJournalTrans.PostingProfile,
                                                                     ledgerJournalTrans_RAsset.TransType,
                                                                     _transDate);
    
        ledgerJournalTrans.DefaultDimension     = _standards.defaultDimension(_transDate, _defaultDimension);
        ledgerJournalTrans.DefaultDimension     = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(ledgerJournalTrans.DefaultDimension, ledgerJournalTable.DefaultDimension);
    
        if (offsetDefaultAccount)
        {
            ledgerJournalTrans.parmOffsetLedgerDimension(LedgerDimensionFacade::serviceCreateLedgerDimension(offsetDefaultAccount, ledgerJournalTrans.DefaultDimension));
        }
    
        if (_defaultAccount)
        {
            ledgerJournalTrans_RAsset.DebLedgerDimension = _defaultAccount;
        }
        else
        {
            ledgerJournalTrans_RAsset.DebLedgerDimension = _standards.assetLedgerDimension(_standards.AssetStandardId,
                                                                                           ledgerJournalTrans.PostingProfile,
                                                                                           ledgerJournalTrans_RAsset.TransType);
        }
    
        if (_paymentAmount > 0)
        {
            ledgerJournalTrans.AmountCurDebit  = CurrencyExchangeHelper::amount(_paymentAmount, ledgerJournalTrans.CurrencyCode);
        }
        else
        {
            ledgerJournalTrans.AmountCurCredit = CurrencyExchangeHelper::amount(-_paymentAmount, ledgerJournalTrans.CurrencyCode);
        }
    
        if (_standards.AssetStandardId == RAssetParameters::standardIdDefault() &&
            _assetTable.needAssembling())
        {
            ledgerJournalTrans.Qty = 1;
        }
    
        ledgerJournalTrans_RAsset.BudgetModel = _assetBudgetModelId;
    
        ledgerJournalTrans.insert();
        ledgerJournalTrans_RAsset.RefRecId = ledgerJournalTrans.RecId;
        ledgerJournalTrans_RAsset.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVoucher</Name>
				<Source><![CDATA[
    public void createVoucher()
    {
        voucher = new JournalVoucherNum(JournalTableData::newTable(LedgerJournalTable::find(journalNum))).getNew(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalTrans</Name>
				<Source><![CDATA[
    public LedgerJournalTrans ledgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans = ledgerJournalTrans)
    {
        ledgerJournalTrans = _ledgerJournalTrans;
        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalTrans_RAsset</Name>
				<Source><![CDATA[
    public LedgerJournalTrans_RAsset ledgerJournalTrans_RAsset(LedgerJournalTrans_RAsset _ledgerJournalTrans_RAsset = ledgerJournalTrans_RAsset)
    {
        ledgerJournalTrans_RAsset = _ledgerJournalTrans_RAsset;
        return ledgerJournalTrans_RAsset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(LedgerJournalId _journalNum,
                    RAssetTransType _assetTransType)

    {
        journalNum      = _journalNum;
        rAssetTransType = _assetTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonCode</Name>
				<Source><![CDATA[
    public ReasonCode parmReasonCode(ReasonCode _reasonCode = reasonCode)
    {
        reasonCode = _reasonCode;

        return reasonCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonComment</Name>
				<Source><![CDATA[
    public ReasonComment parmReasonComment(ReasonComment _reasonComment = reasonComment)
    {
        reasonComment = _reasonComment;

        return reasonComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonRefRecId</Name>
				<Source><![CDATA[
    public ReasonRefRecID parmReasonRefRecId(ReasonRefRecID _reasonRefRecID = reasonRefRecID)
    {
        reasonRefRecID  = _reasonRefRecID;

        return reasonRefRecID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyBase</Name>
				<Source><![CDATA[
    public static boolean currencyBase()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    public static CurrencyCode currencyCode(RAssetStandardId _assetStandardId,
                                            RAssetTable      _assetTable)
    {
        if (_assetStandardId == RAssetParameters::find().StandardIdDefault && RAssetJournal::currencyBase())
            return CompanyInfoHelper::standardCurrency();
        return RAssetStandards::find(_assetTable.AccountNum, _assetStandardId).CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingDate</Name>
				<Source><![CDATA[
    public TransDate parmAccountingDate(TransDate _accountingDate = accountingDate)
    {
        ;
        accountingDate = _accountingDate;
    
        return accountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrect</Name>
				<Source><![CDATA[
    public Correct_RU parmCorrect(Correct_RU _correct = correct)
    {
        ;
        correct = _correct;
    
        return correct;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
