<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GoodsInRouteEngine_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>GoodsInRouteEngine_RU</c> class supports the journal of passing of property form with a variety of features.
/// </summary>
class GoodsInRouteEngine_RU extends RunBase
{
    CustInvoiceJour         custInvoiceJour;

    TmpFrmVirtual           tmpFrmVirtual;

    TransDate               updateDate;
    DialogField             dialogUpdateDate;

    GoodsInRouteJour_RU     goodsInRouteJour;
    GoodsInRouteTrans_RU    goodsInRouteTrans;
    Correct_RU              correct;

    int                     dummy;

    protected const Version CurrentVersion = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog = Dialog::newFormnameRunbase(formStr(GoodsInRouteEditLines_RU), this);

        dialogUpdateDate = dialog.addFieldValue(extendedTypeStr(TransDate), updateDate);
        dialogUpdateDate.mandatory_RU(true);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        updateDate = dialogUpdateDate.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes temporary table from <c>CustInvoiceJour</c> record.
    /// </summary>
    public void initFromCustInvoiceJour()
    {
        CustInvoiceTrans    custInvoiceTrans;
        SalesQty            qtyRemain;
        InventQty           inventQtyRemain;
        PdsCWInventQty      pdsCWQtyRemain;

        while select custInvoiceTrans
            where custInvoiceTrans.SalesId              == custInvoiceJour.SalesId
               && custInvoiceTrans.InvoiceId            == custInvoiceJour.InvoiceId
               && custInvoiceTrans.InvoiceDate          == custInvoiceJour.InvoiceDate
               && custInvoiceTrans.NumberSequenceGroup  == custInvoiceJour.NumberSequenceGroup
        {
            qtyRemain = custInvoiceTrans.qtyToDelivery_RU();
            if (qtyRemain)
            {
                inventQtyRemain = custInvoiceTrans.inventQtyToDelivery_RU();
                pdsCWQtyRemain  = custInvoiceTrans.pdsCWQtyToDelivery_RU();

                tmpFrmVirtual.TableNum     = tableNum(CustInvoiceTrans);
                tmpFrmVirtual.RecordNo     = custInvoiceTrans.RecId;
                tmpFrmVirtual.Qty          = qtyRemain * this.transSign();
                tmpFrmVirtual.InventQty_RU = inventQtyRemain * this.transSign();
                tmpFrmVirtual.PdsCWQty     = pdsCWQtyRemain * this.transSign();
                tmpFrmVirtual.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the journal of passing of property.
    /// </summary>
    protected void initJournal()
    {
        goodsInRouteJour.initValue();
        goodsInRouteJour.GoodsInRouteId   = NumberSeq::newGetNum(CustParameters::numRefGoodsInRouteId_RU()).num();
        goodsInRouteJour.GoodsInRouteDate = updateDate;
        goodsInRouteJour.initFromCustInvoiceJour(custInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the line of journal of passing of property.
    /// </summary>
    /// <param name="_custInvoiceTrans">
    ///     The record from <c>CustInvoiceTrans</c> table.
    /// </param>
    protected void initJournalLine(CustInvoiceTrans _custInvoiceTrans)
    {
        goodsInRouteTrans.clear();
        goodsInRouteTrans.initValue();
        goodsInRouteTrans.initFromGoodsInRouteJour(goodsInRouteJour);
        goodsInRouteTrans.initFromCustInvoiceTrans(_custInvoiceTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        updateDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        if (inGetSaveLast)
        {
            return [CurrentVersion, dummy];
        }

        return [CurrentVersion, dummy, updateDate, buf2Con(custInvoiceJour), this.packTmpFrmVirtual()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>packTmpFrmVirtual</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Packs records into the container.
    /// </summary>
    /// <returns>
    ///     The container of the packed records.
    /// </returns>
    public container packTmpFrmVirtual()
    {
        container   records;

        while select tmpFrmVirtual
        {
            records += [buf2Con(tmpFrmVirtual)];
        }

        return [records];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrect</Name>
				<Source><![CDATA[
    public Correct_RU parmCorrect(Correct_RU _correct = correct)
    {
        correct = _correct;
        return correct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustInvoiceJour</Name>
				<Source><![CDATA[
    public CustInvoiceJour parmCustInvoiceJour(CustInvoiceJour _custInvoiceJour = custInvoiceJour)
    {
        custInvoiceJour.data(_custInvoiceJour);
        return custInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateDate</Name>
				<Source><![CDATA[
    public TransDate parmUpdateDate(TransDate _updateDate = updateDate)
    {
        updateDate = _updateDate;
        return updateDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount

        if (! this.validate())
        {
            throw error("@SYS18447");
        }

        try
        {
            ttsbegin;

            this.update();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpFrmVirtual</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the temporary table.
    /// </summary>
    /// <returns>
    ///     The record from the <c>TmpFrmVirtual</c> table.
    /// </returns>
    public TmpFrmVirtual tmpFrmVirtual()
    {
        return tmpFrmVirtual;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transSign</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the sign of the transaction.
    /// </summary>
    /// <returns>
    ///     Always returns 1.
    /// </returns>
    public Integer transSign()
    {
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version     version = RunBase::getVersion(packedClass);
        container   conCustInvoiceJour,
                    conTmpFrmVirtual;

        switch (version)
        {
            case CurrentVersion:
                if (inGetSaveLast)
                {
                    [version, dummy] = packedClass;
                }
                else
                {
                    [version, dummy, updateDate, conCustInvoiceJour, conTmpFrmVirtual] = packedClass;
                    con2Buf(conCustInvoiceJour, custInvoiceJour);
                    this.unpackTmpFrmVirtual(conPeek(conTmpFrmVirtual,1));
                }
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackTmpFrmVirtual</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Unpacks the container of the packed records.
    /// </summary>
    /// <param name="_records">
    ///     The container of the packed records.
    /// </param>
    public void unpackTmpFrmVirtual(container _records)
    {
        container   record;
        int         i;

        delete_from tmpFrmVirtual;

        for (i = 1; i <= conLen(_records); i++)
        {
            record = conPeek(_records, i);

            tmpFrmVirtual.clear();
            con2Buf(record, tmpFrmVirtual);
            tmpFrmVirtual.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates records.
    /// </summary>
    protected void update()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ok = true;
        CustInvoiceTrans    custInvTrans;
        Qty                 qtyToDlv;
        Qty                 inventQtyToDlv;
        Qty                 cwQtyToDlv;

        if (!updateDate)
        {
            ok = checkFailed("@SYS24455");
        }

        if (ok)
        {
            while select tmpFrmVirtual
                where tmpFrmVirtual.TableNum == custInvTrans.TableId
                   && tmpFrmVirtual.NoYes    == NoYes::Yes
            {
                custInvTrans    = CustInvoiceTrans::findRecId(tmpFrmVirtual.RecordNo);
                inventQtyToDlv  = custInvTrans.inventQtyToDelivery_RU() * this.transSign();

                if (PdsGlobal::pdsIsCWItem(custInvTrans.ItemId))
                {
                    cwQtyToDlv = custInvTrans.pdsCWQtyToDelivery_RU() * this.transSign();

                    if ((inventQtyToDlv == tmpFrmVirtual.InventQty_RU && cwQtyToDlv != tmpFrmVirtual.PdsCWQty) ||
                       (inventQtyToDlv != tmpFrmVirtual.InventQty_RU && cwQtyToDlv == tmpFrmVirtual.PdsCWQty))
                    {
                        ok = checkFailed("@SYS4000786");
                        break;
                    }

                    if (inventQtyToDlv != tmpFrmVirtual.InventQty_RU || cwQtyToDlv != tmpFrmVirtual.PdsCWQty)
                    {
                        ok = PdsCatchWeight::validateQty(custInvTrans.itemId,
                                                     tmpFrmVirtual.InventQty_RU,
                                                     UnitOfMeasure::findBySymbol(InventTableModule::find(custInvTrans.ItemId, ModuleInventPurchSales::Invent).UnitId).RecId,
                                                    tmpFrmVirtual.PdsCWQty);
                    }

                    if (!ok)
                    {
                        break;
                    }
                }

                qtyToDlv        = custInvTrans.qtyToDelivery_RU() * this.transSign();
                if ( ok &&
                    (inventQtyToDlv == tmpFrmVirtual.InventQty_RU && qtyToDlv != tmpFrmVirtual.Qty) ||
                    (inventQtyToDlv != tmpFrmVirtual.InventQty_RU && qtyToDlv == tmpFrmVirtual.Qty))
                {
                    ok = checkFailed("@SYS4081471");
                    break;
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Writes the journal of passing of property.
    /// </summary>
    protected void writeJournal()
    {
        goodsInRouteJour.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Writes the line of journal of passing of property.
    /// </summary>
    protected void writeJournalLine()
    {
        goodsInRouteTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs an instance of the <c>GoodsInRouteEngine_RU</c> class.
    /// </summary>
    /// <param name="_cancel">
    ///     The flag that specifies the class to initialize.
    /// </param>
    /// <returns>
    ///     An instance of the <c>GoodsInRouteEngine_RU</c> class.
    /// </returns>
    static GoodsInRouteEngine_RU construct(NoYes _cancel)
    {
        if (_cancel == NoYes::Yes)
        {
            return new GoodsInRouteCancel_RU();
        }
        else
        {
            return new GoodsInRouteUpdate_RU();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@GLS114736";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        GoodsInRouteEngine_RU   goodsInRouteEngine;
        FormDataSource          formDataSource;
        RefRecId                refRecId;

        if (! _args ||
            ! _args.record() ||
            _args.record().TableId != tableNum(CustInvoiceJour) ||
            _args.parmEnumType() != enumNum(NoYes))
        {
            throw error(strFmt("@SYS22828", funcName()));
        }

        refRecId = _args.record().RecId;

        goodsInRouteEngine = GoodsInRouteEngine_RU::construct(_args.parmEnum());
        goodsInRouteEngine.parmCustInvoiceJour(_args.record());
        goodsInRouteEngine.initFromCustInvoiceJour();

        if (goodsInRouteEngine.prompt())
        {
            goodsInRouteEngine.runOperation();

            if (FormDataUtil::isFormDataSource(_args.record()))
            {
                formDataSource = FormDataUtil::getFormDataSource(_args.record());
                formDataSource.executeQuery();
                formDataSource.positionToRecord(CustInvoiceJour::findRecId(refRecId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>