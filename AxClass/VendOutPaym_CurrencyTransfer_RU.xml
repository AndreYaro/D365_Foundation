<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendOutPaym_CurrencyTransfer_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class VendOutPaym_CurrencyTransfer_RU extends VendOutPaym
{
    BankCurrencyTransferLog_RU bankPurchaseOrderLog;

    DialogField     dialogWorkerResponsible;
    DialogField     dialogCommBankAccountId;
    DialogField     dialogTransferCurrency;
    DialogField     dialogSpecConditions;
    DialogField     dialogCurrencyDealCourse;

    DialogField     dialogAgreementId;
    DialogField     dialogVendAccount;
    DialogField     dialogBankSpecAccount;

    HcmWorkerRecId             workerResponsible;
    CompanyBankAccountId       commBankAccountId;
    CompanyBankAccountId       bankSpecAccountId;
    BankSpecConditions_RU      specConditions;
    CurrencyCode               transferCurrency;
    VendAccount                vendAccount;
    PurchAgreementId           agreementId;
    BankCurrencyDealCourse_RU  currencyDealCourse;

    DialogRunbase              dialog;

    #define.CurrentVersion(7)
    #localmacro.CurrentList
        workerResponsible,
        commBankAccountId,
        bankSpecAccountId,
        specConditions,
        transferCurrency,
        vendAccount,
        agreementId,
        currencyDealCourse
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>agreementId_lookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Provides a lookup for the <c>PurchAgreementHeader</c> table.
    /// </summary>
    /// <param name="_ctrl">
    ///  The form string control object in which to perform the lookup.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void agreementId_lookup(FormStringControl _ctrl)
    {
        PurchTable purchTable;

        purchTable.OrderAccount = dialogVendAccount.value();
        PurchAgreementHeader::purchAgreementLookup(_ctrl, purchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankSpecAccount_lookup</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void bankSpecAccount_lookup(FormStringControl _ctrl)
    {
        VendOutPaym_CurrencyTransfer_RU::lookupSpecAccount(_ctrl,
                                                           BankAdvancedTransType_RU::None,
                                                           '',
                                                           dialogTransferCurrency.value());
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankSpecAccountId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CompanyBankAccountId bankSpecAccountId()
    {
        return bankSpecAccountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDialogValues</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void checkDialogValues()
    {
        BankAccountTable    bankAccountTableCheck;
        boolean             ok = true;

        if (! bankSpecAccountId)
        {
            ok = checkFailed(strFmt("@GLS107245", "@GLS102977", this.interfaceName()));
        }

        if (ok)
        {
            bankAccountTableCheck = BankAccountTable::find(bankSpecAccountId);

            if (bankAccountTableCheck.BankAccountStatus != BankAccountHoldStatus::ActiveForAllTransactions)
                ok = checkFailed(strFmt("@GLS115323", bankSpecAccountId));

            if (bankSpecAccountId && bankSpecAccountId == this.parmBankAccountID())
                ok = checkFailed("@GLS115326");
        }

        if (!ok)
        {
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
        if (outPaymRecordList.elements())
        {
            this.printDocument();
        }
        else
        {
            info(strFmt("@GLS106940", this.interfaceName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNumRef</Name>
				<Source><![CDATA[
    private BankCurrencyTransferId_RU createNumRef(LedgerJournalTrans _ledgerJournalTrans)
    {
        NumberSeq                   numberSeq;
        BankCurrencyTransferId_RU   currencyOrderNum;

        if (_ledgerJournalTrans.DocumentNum)
        {
            currencyOrderNum = _ledgerJournalTrans.DocumentNum;
        }
        else
        {
            numberSeq        = NumberSeq::newGetNum(NumberSeqReference::findReference(extendedTypeNum(BankCurrencyTransferId_RU)));
            currencyOrderNum = numberSeq.num();
        }

        return currencyOrderNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendOutPaymRecordRootClassId</Name>
				<Source><![CDATA[
    public classId custVendOutPaymRecordRootClassId()
    {
        return classNum(VendOutPaymRecord_CurrencyTransfer_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogGroup dialogGroup;

        dialog = new DialogRunbase("@GLS103004", this);

        dialog.addGroup("@GLS102281");
        dialogWorkerResponsible = dialog.addFieldValue(extendedTypeStr(HcmWorkerRecId), workerResponsible);

        dialog.addGroup("@GLS102282");
        dialogCommBankAccountId = dialog.addFieldValue(extendedTypeStr(CompanyBankAccountId), commBankAccountId, "@GLS102283");

        dialogGroup = dialog.addGroup("@GLS102996");
        dialogBankSpecAccount = dialog.addFieldValue(extendedTypeStr(CompanyBankAccountId), bankSpecAccountId, "@GLS107795");
        dialogBankSpecAccount.control().registerOverrideMethod(
            methodStr(FormStringControl, lookup),
            methodStr(VendOutPaym_CurrencyTransfer_RU, bankSpecAccount_lookup),
            this);

        dialog.addGroup("@GLS102973");
        dialogSpecConditions    = dialog.addFieldValue(enumStr(BankSpecConditions_RU), specConditions, "@GLS102982", "@GLS102974");
        dialogTransferCurrency  = dialog.addFieldValue(extendedTypeStr(CurrencyCode), transferCurrency, "@SYS7572", "@GLS103002");

        dialogGroup = dialog.addGroup("@GLS114373");

        dialogVendAccount = dialog.addFieldValue(extendedTypeStr(VendAccount), vendAccount);
        dialogVendAccount.control().registerOverrideMethod(
            methodStr(FormStringControl, modified),
            methodStr(VendOutPaym_CurrencyTransfer_RU, vendAccount_modified),
            this);

        dialogAgreementId = dialog.addFieldValue(extendedTypeStr(PurchAgreementId), agreementId);
        dialogAgreementId.control().registerOverrideMethod(
            methodStr(FormStringControl, lookup),
            methodStr(VendOutPaym_CurrencyTransfer_RU, agreementId_lookup),
            this);

        dialog.addGroup("@SYS53047");
        dialogCurrencyDealCourse = dialog.addFieldValue(extendedTypeStr(BankCurrencyDealCourse_RU), currencyDealCourse);

        this.dialogAddPrintDocument(PaymDocumentType::Document, dialog);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentDate</Name>
				<Source><![CDATA[
    private TransDate getDocumentDate(LedgerJournalTrans _ledgerJournalTrans)
    {
        if (_ledgerJournalTrans.DocumentDate)
            return _ledgerJournalTrans.DocumentDate;

        return _ledgerJournalTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean         ret = super();

        if (ret)
        {
            workerResponsible  = dialogWorkerResponsible.value();
            commBankAccountId  = dialogCommBankAccountId.value();
            transferCurrency   = dialogTransferCurrency.value();
            specConditions     = dialogSpecConditions.value();
            currencyDealCourse = dialogCurrencyDealCourse.value();
            vendAccount        = dialogVendAccount.value();
            agreementId        = dialogAgreementId.value();
            bankSpecAccountId  = dialogBankSpecAccount.value();

            if (! bankSpecAccountId)
                ret = checkFailed("@GLS103001");

            if (! transferCurrency)
                ret = checkFailed("@GLS103003");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLedgerJournalTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromLedgerJournalTrans(LedgerJournalTrans _ledgerJorurnalTrans)
    {
        workerResponsible = _ledgerJorurnalTrans.BankRespWorkerId_RU;
        transferCurrency  = _ledgerJorurnalTrans.TransferCurrency_RU;
        commBankAccountId = _ledgerJorurnalTrans.BankCommAccountId_RU;
        bankSpecAccountId = _ledgerJorurnalTrans.BankSpecAccountId_RU;
        vendAccount       = _ledgerJorurnalTrans.BankVendAccountId_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        HcmWorker hcmWorker;

        hcmWorker = HcmWorker::findByPerson(DirPartyTable::findByName(OfficialsTable_RU::nameDirector()).RecId);

        workerResponsible   = hcmWorker.RecId;
        specConditions      = BankSpecConditions_RU::bank;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>interfaceName</Name>
				<Source><![CDATA[
    public className interfaceName()
    {
        return "@GLS102972";
    }

]]></Source>
			</Method>
			<Method>
				<Name>open</Name>
				<Source><![CDATA[
    public void open()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>output</Name>
				<Source><![CDATA[
    public void output(LedgerJournalTrans _ledgerJournalTrans)
    {
        ExchangeRateHelper  exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(_ledgerJournalTrans.Company).RecId), _ledgerJournalTrans.CurrencyCode);

        bankPurchaseOrderLog.clear();

        if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Vend &&
            ! _ledgerJournalTrans.BankCurrencyTransferLog_RU)
        {
            bankPurchaseOrderLog.BankCurrencyTransferId = this.createNumRef(_ledgerJournalTrans);
            bankPurchaseOrderLog.Voucher                = _ledgerJournalTrans.Voucher;
            bankPurchaseOrderLog.JournalNum             = _ledgerJournalTrans.JournalNum;
            bankPurchaseOrderLog.TransDate              = this.getDocumentDate(_ledgerJournalTrans);
            bankPurchaseOrderLog.TransferCurrency       = transferCurrency;
            bankPurchaseOrderLog.ResponsibleWorker      = workerResponsible;
            bankPurchaseOrderLog.CommissionBankId       = commBankAccountId;
            bankPurchaseOrderLog.BankSpecAccountId      = bankSpecAccountId;
            bankPurchaseOrderLog.BankSpecConditions     = specConditions;
            bankPurchaseOrderLog.AgreementHeaderExt     = AgreementHeaderExt_RU::findByAgreementId(agreementId).RecId;
            bankPurchaseOrderLog.BankCurrencyDealCourse = exchangeRateHelper.prepareExchangeRateForStorage(currencyDealCourse);
            bankPurchaseOrderLog.VendDealAccount        = vendAccount;
            bankPurchaseOrderLog.BankAdvancedTransType  = BankTransType::find(_ledgerJournalTrans.BankTransType).BankAdvancedTransType_RU;
            bankPurchaseOrderLog.JournalCurrency        = _ledgerJournalTrans.CurrencyCode;
            bankPurchaseOrderLog.JournalAmount          = _ledgerJournalTrans.amount();
            // ExchRate values should be entered in the currency format (multiplied by multiplier), same as it is done in the other palces, for example in Ledger Journal lines
            // when we buy currency exch rate multiplier settings should be taken from purchased currency (TransferCurrency), when we sell - from sold currency (JournalCurrency)
            exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::current(),
                                                                 bankPurchaseOrderLog.BankAdvancedTransType == BankAdvancedTransType_RU::CurrBuy ?
                                                                    bankPurchaseOrderLog.TransferCurrency : bankPurchaseOrderLog.JournalCurrency);
            bankPurchaseOrderLog.BankCurrencyDealCourse = exchangeRateHelper.prepareExchangeRateForStorage(currencyDealCourse);
            bankPurchaseOrderLog.ElectronicPayment        = this.parmClientBank_RU();

            bankPurchaseOrderLog.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDocument</Name>
				<Source><![CDATA[
    public void printDocument()
    {
        if (printDocument)
        {
            this.runReport(menuitemOutputStr(VendOutPaymCurrencyTransferWord_RU));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferCurrency</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CurrencyCode transferCurrency()
    {
        return transferCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer   version = RunBase::getVersion(packedClass);
        container con;

        switch (version)
        {
            case #CurrentVersion :

                [version, #CurrentList, con] = packedClass;
                super(con);

                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerJournalTrans</Name>
				<Source><![CDATA[
    protected void updateLedgerJournalTrans(LedgerJournalTrans    _ledgerJournalTrans,
                                            CustVendOutPaymRecord _custVendOutPaymRecord,
                                            boolean               _generateRemittanceFeeTrans)
    {
        LedgerJournalTrans ledgerJournalTrans = _ledgerJournalTrans;

        if (bankPurchaseOrderLog.RecId)
        {
            ledgerJournalTrans.BankCurrencyTransferLog_RU = bankPurchaseOrderLog.RecId;
        }

        super(ledgerJournalTrans, _custVendOutPaymRecord, _generateRemittanceFeeTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        QueryRun             checkBankQueryRun;
        LedgerJournalTrans   ledgerJournalTrans;
        boolean              ret = true;
        Query                query;

        if (ret && (commBankAccountId || bankSpecAccountId))
        {
            query = new Query(queryRun.query());
            query.dataSourceTable(tableNum(LedgerJournalTrans)).update(false);

            checkBankQueryRun = new QueryRun(query);

            while (ret && checkBankQueryRun.next())
            {
                if (checkBankQueryRun.changed(tableNum(LedgerJournalTrans)))
                {
                    ledgerJournalTrans = checkBankQueryRun.get(tableNum(LedgerJournalTrans));
                    if (commBankAccountId)
                        ret = BankAccountTable::checkIsActive(commBankAccountId, ledgerJournalTrans.TransDate);
                    if (bankSpecAccountId)
                    {
                        ret = ret && BankAccountTable::checkIsActive(bankSpecAccountId, ledgerJournalTrans.TransDate);

                        if (ret)
                        {
                            ledgerJournalTrans.BankSpecAccountId_RU = bankSpecAccountId;
                            ret = ledgerJournalTrans.validateSpecBankAccountId_RU();
                        }
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendAccount_modified</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean vendAccount_modified(FormStringControl _ctrl)
    {
        boolean ret = _ctrl.modified();

        if (ret)
        {
            dialogAgreementId.value('');
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupSpecAccount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static void lookupSpecAccount(FormControl                 _callingControl,
                                                BankAdvancedTransType_RU    _transType         = BankAdvancedTransType_RU::None,
                                                VendAccount                 _bankVendAccountId = '',
                                                CurrencyCode                _transferCurrency  = '')
    {
        Query                   query;
        QueryBuildDataSource    dsBankAccount, dsBankGroup;
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(BankAccountTable),
                                                                               _callingControl);

        query = new Query();
        dsBankAccount = query.addDataSource(tableNum(BankAccountTable));
        dsBankGroup   = dsBankAccount.addDataSource(tableNum(BankGroup));
        dsBankGroup.addLink(fieldNum(BankAccountTable, BankGroupId), fieldNum(BankGroup, BankGroupId));

        findOrCreateRange_W(dsBankAccount, fieldNum(BankAccountTable, BankAccountStatus), queryValue(BankAccountHoldStatus::ActiveForAllTransactions));

        if (_transferCurrency)
        {
            findOrCreateRange_W(dsBankAccount, fieldNum(BankAccountTable, CurrencyCode), _transferCurrency);
        }
        else
        {
            switch (_transType)
            {
                case BankAdvancedTransType_RU::CurrBuy:
                    findOrCreateRange_W(dsBankAccount, fieldNum(BankAccountTable, CurrencyCode), SysQuery::valueNot(CompanyInfoHelper::standardCurrency()));
                    break;

                case BankAdvancedTransType_RU::CurrSell:
                    findOrCreateRange_W(dsBankAccount, fieldNum(BankAccountTable, CurrencyCode), CompanyInfoHelper::standardCurrency());
                    break;
            }
        }

        if (_bankVendAccountId)
            dsBankGroup.addRange(fieldNum(BankGroup, VendAccountNum_RU)).value(_bankVendAccountId);
        else
            dsBankGroup.addRange(fieldNum(BankGroup, VendAccountNum_RU)).value(SysQuery::valueNotEmptyString());

        sysTableLookup.parmQuery(query);

        sysTableLookup.addLookupfield(fieldNum(BankAccountTable, AccountID));
        sysTableLookup.addLookupfield(fieldNum(BankAccountTable, Name));

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>