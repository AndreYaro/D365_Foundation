<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureTransCreateCust_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class FactureTransCreateCust_RU extends FactureTransCreate_RU
{
    CustInvoiceJour  custInvoiceJour;
    CustInvoiceTrans custInvoiceTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAmounts</Name>
				<Source><![CDATA[
    protected boolean calcAmounts(Qty _qty)
    {
        CustInvoiceTrans_RU custInvoiceTrans_RU = custInvoiceTrans.custInvoiceTrans_RU();
        VATType_RU      vatType;
        FactureTrans_RU tmpTrans, tmpTransSec;
        CustInvoiceTrans custInvoiceTransUpdate;
        int             sign =  custInvoiceTrans.TaxAmount                  ?
                               (custInvoiceTrans.TaxAmount  >= 0 ? 1 : -1)  :
                               (custInvoiceTrans.LineAmount >= 0 ? 1 : -1);

        if (custInvoiceTrans_RU.FacturedFully_RU)
            return false;

        factor = custInvoiceTrans.Qty ? abs(_qty / custInvoiceTrans.Qty) : 1;

        if (recalcTaxes)
        {
            this.calcTaxes(custInvoiceJour.LedgerVoucher,
                           custInvoiceJour.InvoiceDate,
                           custInvoiceTrans.TaxGroup,
                           custInvoiceTrans.TaxItemGroup,
                           custInvoiceTrans.InventTransId,
                           custInvoiceTrans.LineAmount);
        }

        if (custInvoiceJour.InvoiceId   &&
            recalcTaxes                 &&
            this.fetchTaxes(custInvoiceJour.LedgerVoucher,
                            custInvoiceJour.InvoiceDate,
                            custInvoiceTrans.TaxGroup,
                            custInvoiceTrans.TaxItemGroup,
                            custInvoiceTrans.InventTransId))
        {
            vatType = calcTaxes.taxBaseAmountCur_VAT()             ? VATType_RU::Full     :
                         (calcTaxes.taxBaseAmountCur_VATReduced()  ? VATType_RU::Reduced  :
                             (calcTaxes.taxBaseAmountCur_VATZero() ? VATType_RU::Zero     :
                                                                      VATType_RU::NonLiable));
        }
        else
        {
            vatType = FactureTrans_RU::taxType2VATType(TaxTable::find(TaxTable::vatCode_RU(custInvoiceTrans.TaxGroup,
                                                                                           custInvoiceTrans.TaxItemGroup)).TaxType_W);
        }

        if (factureTrans.isTmp())
        {
            tmpTransSec.setTmp();
            tmpTransSec.setTmpData(factureTrans);
            select sum(Qty),
                   sum(LineAmount),
                   sum(vat),
                   sum(Excise),
                   sum(TaxAmount),
                   sum(LineAmountMST),
                   sum(vatAmountMST),
                   sum(ExciseAmountMST),
                   sum(TaxAmountMST)
                from  tmpTransSec
                where tmpTransSec.InvoiceId           == custInvoiceTrans.InvoiceId           &&
                      tmpTransSec.InvoiceDate         == custInvoiceTrans.InvoiceDate         &&
                      tmpTransSec.InventTransId       == custInvoiceTrans.InventTransId       &&
                      tmpTransSec.InvoiceLineNum      == custInvoiceTrans.LineNum             &&
                      tmpTransSec.NumberSequenceGroup == custInvoiceTrans.NumberSequenceGroup &&
                      tmpTransSec.FactureLineType     == FactureLineType_RU::InvoiceLine      &&
                      tmpTransSec.Module              == FactureModule_RU::Cust;
        }

        select sum(Qty),
               sum(LineAmount),
               sum(vat),
               sum(Excise),
               sum(TaxAmount),
               sum(LineAmountMST),
               sum(vatAmountMST),
               sum(ExciseAmountMST),
               sum(TaxAmountMST)
            from  tmpTrans
            where tmpTrans.InvoiceId           == custInvoiceTrans.InvoiceId           &&
                  tmpTrans.InvoiceDate         == custInvoiceTrans.InvoiceDate         &&
                  tmpTrans.InventTransId       == custInvoiceTrans.InventTransId       &&
                  tmpTrans.InvoiceLineNum      == custInvoiceTrans.LineNum             &&
                  tmpTrans.NumberSequenceGroup == custInvoiceTrans.NumberSequenceGroup &&
                  tmpTrans.FactureLineType     == FactureLineType_RU::InvoiceLine      &&
                  tmpTrans.Module              == FactureModule_RU::Cust;

        if (! refCommReportTrans && abs(tmpTransSec.Qty + tmpTrans.Qty + _qty) >= abs(custInvoiceTrans.Qty))
        {
            factureTrans.Qty             = custInvoiceTrans.Qty                                  ?
                                           custInvoiceTrans.Qty - tmpTrans.Qty - tmpTransSec.Qty :
                                           1 * sign;
            factureTrans.LineAmount      = custInvoiceTrans.LineAmount                     -
                                           tmpTrans.LineAmount                             -
                                           tmpTransSec.LineAmount;
            factureTrans.Excise          = abs(custInvoiceTrans_RU.ExciseAmount_RU)    * sign -
                                           tmpTrans.Excise                                 -
                                           tmpTransSec.Excise;
            factureTrans.TaxAmount       = custInvoiceTrans.TaxAmount                      -
                                           tmpTrans.TaxAmount                              -
                                           tmpTransSec.TaxAmount;
            factureTrans.vat             = abs(custInvoiceTrans_RU.vatAmount_RU)       * sign -
                                           tmpTrans.vat                                    -
                                           tmpTransSec.vat;
            factureTrans.LineAmountMST   = custInvoiceTrans.LineAmountMST                  -
                                           tmpTrans.LineAmountMST                          -
                                           tmpTransSec.LineAmountMST;
            factureTrans.ExciseAmountMST = abs(custInvoiceTrans_RU.ExciseAmountMST_RU) * sign -
                                           tmpTrans.ExciseAmountMST                        -
                                           tmpTransSec.ExciseAmountMST;
            factureTrans.TaxAmountMST    = custInvoiceTrans.TaxAmountMST                   -
                                           tmpTrans.TaxAmountMST                           -
                                           tmpTransSec.TaxAmountMST;
            factureTrans.vatAmountMST    = abs(custInvoiceTrans_RU.vatAmountMST_RU)    * sign -
                                           tmpTrans.vatAmountMST                           -
                                           tmpTransSec.vatAmountMST;
        }
        else
        {
            factureTrans.Qty           = _qty;
            factureTrans.LineAmount    = CurrencyExchangeHelper::amount(custInvoiceTrans.LineAmount * factor, custInvoiceJour.CurrencyCode);
            factureTrans.LineAmountMST = CurrencyExchangeHelper::amount(custInvoiceTrans.LineAmountMST * factor);
            if (recalcTaxes)
            {
                factureTrans.Excise          = abs(calcTaxes.taxAmountCur_Excise())  * factor * taxBaseFactor * sign;
                factureTrans.TaxAmount       = abs(calcTaxes.totalTaxAmountCur())    * factor * taxBaseFactor * sign;
                factureTrans.vat             = abs(calcTaxes.taxAmountCur_VAT()        +
                                                   calcTaxes.taxAmountCur_VATReduced() +
                                                   calcTaxes.taxAmountCur_VATZero()) * factor * taxBaseFactor * sign;
                factureTrans.ExciseAmountMST = abs(calcTaxes.taxAmount_Excise())     * factor * taxBaseFactor * sign;
                factureTrans.TaxAmountMST    = abs(calcTaxes.totalTaxAmount())       * factor * taxBaseFactor * sign;
                factureTrans.vatAmountMST    = abs(calcTaxes.taxAmount_VAT()        +
                                                   calcTaxes.taxAmount_VATReduced() +
                                                   calcTaxes.taxAmount_VATZero())    * factor * taxBaseFactor * sign;
            }
            else
            {
                factureTrans.Excise          = abs(custInvoiceTrans_RU.ExciseAmount_RU    * factor) * sign;
                factureTrans.TaxAmount       = abs(custInvoiceTrans.TaxAmount          * factor) * sign;
                factureTrans.vat             = abs(custInvoiceTrans_RU.vatAmount_RU       * factor) * sign;
                factureTrans.ExciseAmountMST = abs(custInvoiceTrans_RU.ExciseAmountMST_RU * factor) * sign;
                factureTrans.TaxAmountMST    = abs(custInvoiceTrans.TaxAmountMST       * factor) * sign;
                factureTrans.vatAmountMST    = abs(custInvoiceTrans_RU.vatAmountMST_RU    * factor) * sign;
            }

            factureTrans.Excise          = CurrencyExchangeHelper::amount(factureTrans.Excise, custInvoiceJour.CurrencyCode);
            factureTrans.TaxAmount       = CurrencyExchangeHelper::amount(factureTrans.TaxAmount, custInvoiceJour.CurrencyCode);
            factureTrans.vat             = CurrencyExchangeHelper::amount(factureTrans.vat, custInvoiceJour.CurrencyCode);
            factureTrans.ExciseAmountMST = CurrencyExchangeHelper::amount(factureTrans.ExciseAmountMST, custInvoiceJour.CurrencyCode);
            factureTrans.TaxAmountMST    = CurrencyExchangeHelper::amount(factureTrans.TaxAmountMST, custInvoiceJour.CurrencyCode);
            factureTrans.vatAmountMST    = CurrencyExchangeHelper::amount(factureTrans.vatAmountMST, custInvoiceJour.CurrencyCode);
        }

        factureTrans.TaxGroup     = custInvoiceTrans.TaxGroup;
        factureTrans.TaxItemGroup = custInvoiceTrans.TaxItemGroup;
        factureTrans.TaxCode      = facture.vatCode(custInvoiceTrans.TaxGroup, custInvoiceTrans.TaxItemGroup);

        factureTrans.vatType     = vatType;
        factureTrans.vatValue    = abs(custInvoiceTrans_RU.vatValue_RU);
        factureTrans.ExciseValue = abs(custInvoiceTrans_RU.ExciseValue_RU);

        if (refCommReportTrans)
        {
            factureTrans.Price = custInvoiceTrans.SalesPrice;
        }
        else
        {
            factureTrans.Price = abs(factureTrans.LineAmount / (factureTrans.Qty ? factureTrans.Qty : 1));
        }

        if (! factureTrans.isTmp() && ! refCommReportTrans)
        {
            custInvoiceTransUpdate = CustInvoiceTrans::findRecId(custInvoiceTrans.RecId, true);
            custInvoiceTrans_RU = custInvoiceTransUpdate.custInvoiceTrans_RU();
            custInvoiceTrans_RU.FacturedQty_RU   += factureTrans.Qty;
            custInvoiceTrans_RU.FacturedFully_RU  = (custInvoiceTransUpdate.Qty ? custInvoiceTrans_RU.FacturedQty_RU == custInvoiceTransUpdate.Qty : NoYes::Yes);
            custInvoiceTransUpdate.packCustInvoiceTrans_RU(custInvoiceTrans_RU);
            custInvoiceTransUpdate.update();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate tax fields for the facture line.
    /// </summary>
    /// <param name="_ledgerVoucher">
    /// Ledger voucher.
    /// </param>
    /// <param name="_transDate">
    /// Transaction date.
    /// </param>
    /// <param name="_taxGroup">
    /// Tax group.
    /// </param>
    /// <param name="_taxItemGroup">
    /// Tax item group.
    /// </param>
    /// <param name="_inventTransId">
    /// Inventory transaction Id.
    /// </param>
    /// <param name="_amount">
    /// Amount.
    /// </param>
    protected void calcTaxes(Voucher        _ledgerVoucher,
                         TransDate      _transDate,
                         TaxGroup       _taxGroup,
                         TaxItemGroup   _taxItemGroup,
                         InventTransId  _inventTransId,
                         Amount         _amount)
    {
        TmpTaxWorkTrans tmpTaxWorkTrans;
        Tax             tax;
        ;

        if (custInvoiceJour.custInvoiceJour_RU().InventProfileType_RU == InventProfileType_RU::CommissionAgent ||
        custInvoiceJour.custInvoiceJour_RU().InventProfileType_RU == InventProfileType_RU::CommissionPrincipalAgent)
        {
            tax = Tax::construct();
            tax.taxCalcWithoutSource(_taxGroup,
                                     _taxItemGroup,
                                     _transDate,
                                     custInvoiceTrans.CurrencyCode,
                                     _amount,
                                     TaxModuleType::Sales);

            tmpTaxWorkTrans = tax.tmpTaxWorkTrans();
            select tmpTaxWorkTrans;

            calcTaxes = CalcTaxes_RU::construct(tmpTaxWorkTrans);
            calcTaxes.calc();

            taxBaseFactor = calcTaxes.totalTaxBaseAmountCur() ? abs(_amount / calcTaxes.totalTaxBaseAmountCur()) : 0;
        }
        else
        {
            super(_ledgerVoucher,
                  _transDate,
                  _taxGroup,
                  _taxItemGroup,
                  _inventTransId,
                  _amount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
    protected boolean checkTrans()
    {
        boolean ret;

        ret = super();
        if (custInvoiceJour.InvoiceDate > factureJour.FactureDate)
        {
            ret = checkFailed("@GLS104572");
        }

        if (CustParameters::taxation_RU(custInvoiceJour.InvoiceDate) == CustTaxation_RU::OnPayment &&
            CustParameters::taxation_RU(factureJour.FactureDate) == CustTaxation_RU::OnDelivery)
        {
            ret = checkFailed(strFmt("@GLS110905",
                                     CustTaxation_RU::OnPayment));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCreateTransAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the need of splitting trans by GTd.
    /// </summary>
    /// <returns>Always true.</returns>
    [Replaceable]
    protected boolean isCreateTransAllowed()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements splitting by GDt
    /// </summary>
    /// <param name = "_qty">Quantity</param>
    public void createTrans(Qty _qty = qty)
    {
        if (this.isCreateTransAllowed())
        {
            Qty                 qtyToAllocate = abs(_qty), qtyAvailable, qtyAllocateNow;
            InventTrans         inventTrans;
            UnitOfMeasureSymbol inventUnit;
            InventDim           inventDim;
            FactureTrans_RU     factureTransSum;

            CustInvoiceTable    invoiceTable;
            CustInvoiceLine     invoiceLine;
            InventTransOrigin   inventTransOrigin;

            if (custInvoiceTrans.custInvoiceTrans_RU().FacturedFully_RU)
                return;

            if (refCommReportTrans)
            {
                custInvoiceTrans = CommReportTransItem_RU::find(refCommReportTrans).initPartnerInvoiceTrans(ModuleCustVend::Cust);
                qty = custInvoiceTrans.Qty;
                _qty = qty;
            }

            int sign = _qty >= 0 ? 1 : -1;
  
            if (! refCommReportTrans && custInvoiceTrans.ItemId) // insert parameter instead of true, if you want to govern splitting by GTd
            {
                inventUnit = InventTableModule::find(custInvoiceTrans.ItemId, ModuleInventPurchSales::Invent).UnitId;
                select sum(Qty) from inventTrans
                    where inventTrans.InvoiceId           == custInvoiceTrans.InvoiceId
                      &&  inventTrans.DateFinancial       == custInvoiceTrans.InvoiceDate
                join InventGtdId_RU from inventDim
                    group by InventGtdId_RU
                    where inventDim.InventDimId           == inventTrans.InventDimId
                exists join inventTransOrigin
                    where inventTransOrigin.RecId         == inventTrans.InventTransOrigin
                       && inventTransOrigin.InventTransId == custInvoiceTrans.InventTransId;
                while (qtyToAllocate && inventTrans)
                {
                    select sum(Qty) from factureTransSum
                        where factureTransSum.InventTransId   == custInvoiceTrans.InventTransId
                           && factureTransSum.InvoiceId       == custInvoiceTrans.InvoiceId
                           && factureTransSum.InvoiceDate     == custInvoiceTrans.InvoiceDate
                           && factureTransSum.InventGTDId     == inventDim.InventGtdId_RU
                           && factureTransSum.FactureLineType == FactureLineType_RU::InvoiceLine
                           && factureTransSum.Module          == FactureModule_RU::Cust;

                    qtyAvailable = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(custInvoiceTrans.ItemId,
                                                                                                         custInvoiceTrans.inventDimId,
                                                                                                         abs(inventTrans.Qty),
                                                                                                         inventUnit,
                                                                                                         custInvoiceTrans.SalesUnit,
                                                                                                         NoYes::No) - abs(factureTransSum.Qty);

                    if (qtyAvailable)
                    {
                        qtyAllocateNow = min(qtyToAllocate, qtyAvailable);
                        super(qtyAllocateNow * sign);
                        qtyToAllocate -= qtyAllocateNow;

                        factureTrans.CountryRegionName = LogisticsAddressCountryRegionTranslation::find(InventGTD_RU::find(inventDim.InventGtdId_RU,
                                                                                                                custInvoiceTrans.ItemId).ItemOrigCountryRegionId).ShortName;

                        factureTrans.InventGTDId = inventDim.InventGtdId_RU;
                        factureTrans.update();
                    }

                    next inventTrans;
                }

                if (qtyToAllocate)
                {
                    super(qtyToAllocate * sign);
                }
            }
            else
            {
                super(_qty);

                if (! custInvoiceTrans.SalesId)
                {
                    if (factureTrans.isTmp())
                    {
                        select firstonly CountryName_RU, InvoiceGtd_RU
                            from invoiceLine
                            where invoiceLine.LineNum == custInvoiceTrans.LineNum
                        exists join invoiceTable
                            where invoiceTable.RecId  == invoiceLine.ParentRecId
                               && invoiceTable.RecId  == str2int(custInvoiceJour.DocumentNum);
                    }
                    else
                    {
                        select firstonly CountryName_RU, InvoiceGtd_RU
                            from invoiceLine
                            where invoiceLine.LineNum         == custInvoiceTrans.LineNum
                        exists join invoiceTable
                            where invoiceTable.RecId          == invoiceLine.ParentRecId
                               && invoiceTable.InvoiceId      == custInvoiceJour.InvoiceId
                               && invoiceTable.InvoiceDate    == custInvoiceJour.InvoiceDate
                               && invoiceTable.InvoiceAccount == custInvoiceJour.InvoiceAccount
                               && invoiceTable.OrderAccount   == custInvoiceJour.OrderAccount;
                    }

                    factureTrans.CountryRegionName = invoiceLine.CountryName_RU;

                    factureTrans.InventGTDId = invoiceLine.InvoiceGtd_RU;
                }

                factureTrans.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTrans</Name>
				<Source><![CDATA[
    protected void initTrans()
    {
        CustInvoiceTrans_RU custInvoiceTrans_RU;

        super();

        factureTrans.initFromInvoiceTrans(custInvoiceTrans);

        custInvoiceTrans_RU = custInvoiceTrans.custInvoiceTrans_RU();

        if (custInvoiceTrans_RU.CountryRegionName_RU && !custInvoiceTrans.isStocked())
        {
            factureTrans.CountryRegionName = custInvoiceTrans_RU.CountryRegionName_RU;
        }

        factureTrans.ExchRate = custInvoiceJour.ExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(FactureJourCreate_RU _facture,
                    RecId                _recId,
                    Qty                  _qty,
                    NoYes                _recalcTaxes)
    {
        super(_facture, _recId, _qty, _recalcTaxes);

        custInvoiceTrans = CustInvoiceTrans::findRecId(_recId);

        custInvoiceJour  = CustInvoiceJour::findFromCustInvoiceTrans(custInvoiceTrans.SalesId,
                                                                     custInvoiceTrans.InvoiceId,
                                                                     custInvoiceTrans.InvoiceDate,
                                                                     custInvoiceTrans.NumberSequenceGroup,
                                                                     ! _facture.getFactureJour().isTmp(),
                                                                     true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    public void setParameters(RecId _recId, Qty _qty, NoYes _recalcTaxes)
    {
        super(_recId, _qty, _recalcTaxes);

        custInvoiceTrans = CustInvoiceTrans::findRecId(_recId, ! facture.getFactureJour().isTmp());

        custInvoiceJour  = CustInvoiceJour::findFromCustInvoiceTrans(custInvoiceTrans.SalesId,
                                                                     custInvoiceTrans.InvoiceId,
                                                                     custInvoiceTrans.InvoiceDate,
                                                                     custInvoiceTrans.NumberSequenceGroup,
                                                                     ! facture.getFactureJour().isTmp(),
                                                                     true);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>