<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdRouteOprOverviewForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProdRouteOprOverviewForm implements ButtonStateProvider
{
    FormButtonManager   formButtonManager;
    ProdRouteTransCache prodRouteTransCache;

    ProdRoute           prodRoute;
    FormDataSource      prodRoute_ds;

    Map                 prodBOMLookupCache;

    #define.materialComsumptionImage(7690)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkRuleIsMaterialConsumtion</Name>
				<Source><![CDATA[
    public boolean checkRuleIsMaterialConsumtion()
    {
        return this.materialConsumption(prodRoute) == #materialComsumptionImage ? true: false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleRecordExists</Name>
				<Source><![CDATA[
    public boolean checkRuleRecordExists()
    {
        return prodRoute ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    void clearCache()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineButtonStates</Name>
				<Source><![CDATA[
    void determineButtonStates(str _ruleFunctionName)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>materialConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Computes whether material is consumed in a specified job.
    /// </summary>
    /// <param name="_prodRoute">
    ///    A <c>ProdRoute</c> table buffer that specifies the route for which to test for material consumption
    /// </param>
    /// <returns>
    ///    An image constant if the material is consumed; otherwise, 0.
    /// </returns>
    public ImageRes materialConsumption(ProdRoute _prodRoute)
    {
        boolean         ret = false;
        ProdBOM         prodBOMtmp;

        if (prodBOMLookupCache.exists(_prodRoute))
        {
            ret =  prodBOMLookupCache.lookup(_prodRoute) == NoYes::Yes ? true : false;
        }
        else
        {
            select firstonly prodBOMtmp
                where   prodBOMtmp.ProdId == _prodRoute.ProdId &&
                        prodBOMtmp.OprNum == _prodRoute.OprNum;
            if (prodBOMtmp)
            {
                prodBOMLookupCache.insert(_prodRoute, NoYes::Yes);
                ret = true;
            }
            else
            {
                prodBOMLookupCache.insert(_prodRoute, NoYes::No);
                ret = false;
            }
        }
        return ret ? #materialComsumptionImage : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        prodBOMLookupCache = new Map(Types::Record, Types::Enum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormButtonManager</Name>
				<Source><![CDATA[
    FormButtonManager parmFormButtonManager(FormButtonManager _formButtonManager = formButtonManager)
    {
        if (!prmisdefault(_formButtonManager))
        {
            formButtonManager = _formButtonManager;
        }
        return formButtonManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdRouteTransCache</Name>
				<Source><![CDATA[
    ProdRouteTransCache parmProdRouteTransCache(ProdRouteTransCache _prodRouteTransCache = prodRouteTransCache)
    {
        if (!prmisdefault(_prodRouteTransCache))
        {
            prodRouteTransCache = _prodRouteTransCache;
        }
        return prodRouteTransCache;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodRouteDSInitPost</Name>
				<Source><![CDATA[
    void prodRouteDSInitPost(ProdRoute _prodRoute)
    {
        prodRoute       = _prodRoute;
        prodRoute_ds    = FormDataUtil::getFormDataSource(_prodRoute);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Passes the data sources to be used for rule evaluation.
    /// </summary>
    /// <param name="datasources1">
    ///    A <c>Common</c> table buffer that belongs to the 1st data source instance.
    /// </param>
    /// <param name="datasources2">
    ///    A <c>Common</c> table buffer that belongs to the 2nd data source instance; optional.
    /// </param>
    /// <param name="datasources3">
    ///    A <c>Common</c> table buffer that belongs to the 3rd data source instance; optional.
    /// </param>
    /// <param name="datasources4">
    ///    A <c>Common</c> table buffer that belongs to the 4th data source instance; optional.
    /// </param>
    /// <param name="datasources5">
    ///    A <c>Common</c> table buffer that belongs to the 5th data source instance; optional.
    /// </param>
    /// <remarks>
    ///    Usually the rules perform evaluation on a table buffer obtained from a data source.This method
    ///    allows the user to set up a number of data sources that are to be used by the rule implementer
    ///    helper class during rule evaluation.Up to 5 data sources can be passed. If the implementation
    ///    requires more data sources, additional custom methods should be implemented on the rule implementer
    ///    class.
    /// </remarks>
    public void setDatasources(Common datasources1, Common datasources2 = null, Common datasources3 = null, Common datasources4 = null, Common datasources5 = null)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ProdRouteOprOverviewForm construct()
    {
        ProdRouteOprOverviewForm prodRouteOprOverviewForm = new ProdRouteOprOverviewForm();

        return prodRouteOprOverviewForm;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>