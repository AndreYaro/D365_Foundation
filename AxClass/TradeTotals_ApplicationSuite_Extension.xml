<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeTotals_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(TradeTotals))]
public final class TradeTotals_ApplicationSuite_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateOrderBalances</Name>
				<Source><![CDATA[
    protected void updateOrderBalances(AmountCur _amountCur)
    {
        RecId recId = this.orderLine_OrderTable().recId;

        AmountCur orderBalanceOrig;
        AmountCur lineRoundedOrderBalanceOrig;
        RecId lineToAdjustRecIdOrig;
        AmountCur lineToAdjustAmountOrig;
        AmountCur MCROrderBalancesAbsoluteValueObjOrig;

        boolean existsOrderBalances = orderBalances.exists(recId);
        boolean existsLineRoundedOrderBalances = lineRoundedOrderBalances.exists(recId);
        boolean existsMCROrderBalancesAbsoluteValue = MCROrderBalancesAbsoluteValue.exists(recId);
        boolean existsRecIdLinesToAdjust  = recIdLinesToAdjust.exists(recId);

        AmountCur balanceOrig = balance;
        AmountCur returnBalanceOrig = returnBalance;
        AmountCur MCRBalanceAbsoluteValueOrig = MCRBalanceAbsoluteValue;

        if (FeatureStateProvider::isFeatureEnabled(SeparateInvoiceOnGoodsDeliveredForFreeFeature::instance()))
        {
            if (existsOrderBalances)
            {
                orderBalanceOrig = orderBalances.lookup(recId);
            }

            if (existsLineRoundedOrderBalances)
            {
                lineRoundedOrderBalanceOrig = lineRoundedOrderBalances.lookup(recId);
            }

            if (existsRecIdLinesToAdjust)
            {
                [lineToAdjustRecIdOrig, lineToAdjustAmountOrig] = recIdLinesToAdjust.lookup(recId);
            }

            if (existsMCROrderBalancesAbsoluteValue)
            {
                MCROrderBalancesAbsoluteValueObjOrig = MCROrderBalancesAbsoluteValue.lookup(recId);
            }
        }

        next updateOrderBalances(_amountCur);

        if (FeatureStateProvider::isFeatureEnabled(SeparateInvoiceOnGoodsDeliveredForFreeFeature::instance()) && this.skipInInvoiceBalance_IT(orderLine))
        {
            balance = balanceOrig;
            returnBalance = returnBalanceOrig;
            MCRBalanceAbsoluteValue = MCRBalanceAbsoluteValueOrig;

            if (existsOrderBalances)
            {
                orderBalances.insert(recid, orderBalanceOrig);
            }
            else
            {
                orderBalances.remove(recId);
            }

            if (existsLineRoundedOrderBalances)
            {
                LineRoundedOrderBalances.insert(recid, LineRoundedOrderBalanceOrig);
            }
            else
            {
                LineRoundedOrderBalances.remove(recId);
            }

            if (existsRecIdLinesToAdjust)
            {
                recIdLinesToAdjust.insert(recId,[lineToAdjustRecIdOrig, lineToAdjustAmountOrig]);
            }
            else
            {
                recIdLinesToAdjust.remove(recId);
            }

            if (existsMCROrderBalancesAbsoluteValue)
            {
                MCROrderBalancesAbsoluteValue.insert(recId,MCROrderBalancesAbsoluteValueObjOrig);
            }
            else
            {
                MCROrderBalancesAbsoluteValue.remove(recId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateEndDisc</Name>
				<Source><![CDATA[
    protected boolean mustUpdateEndDisc()
    {
        boolean ret = next mustUpdateEndDisc();
        ret = ret && !this.skipInInvoiceBalance_IT(orderLine);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipInInvoiceBalance_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the line must be skiped in invoice balance calculation or not.
    /// </summary>
    /// <param name = "_line">The order line.</param>
    /// <returns>true if the line must be skiped, otherwise false.</returns>
    protected boolean skipInInvoiceBalance_IT(Common _line)
    {
        boolean ret;
        SalesTotals_ParmTrans salesTotals_ParmTrans = this as SalesTotals_ParmTrans;

        if (salesTotals_ParmTrans)
        {
            ret = salesTotals_ParmTrans.skipInInvoiceBalance_STPT_IT(_line);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipLine</Name>
				<Source><![CDATA[
    protected boolean skipLine(Common _orderLine)
    {
        boolean ret = next skipLine(_orderLine);

        if (!ret && FeatureStateProvider::isFeatureEnabled(SeparateInvoiceOnGoodsDeliveredForFreeFeature::instance()))
        {
            SalesLine orderLine = _orderLine as SalesLine;

            if (orderLine)
            {
                ret = orderLine.GoodsForFree_IT;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>