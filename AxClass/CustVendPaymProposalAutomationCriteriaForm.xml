<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendPaymProposalAutomationCriteriaForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.AX.Platform.Extensibility;

/// <summary>
/// The <c>CustVendPaymProposalAutomationCriteriaForm</c> class is designed to define form state for a form that is a part of the
/// Payment proposal automation hierarchy.
/// </summary>
[ExportInterface]
internal abstract class CustVendPaymProposalAutomationCriteriaForm
{
    private CustVendPaymProposalAutomationCriteriaFormInteraction formInteraction;
    private CustVendPaymProposalAutomationCriteriaFormState formState;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructAutomationCriteriaForm</Name>
				<Source><![CDATA[
    internal static CustVendPaymProposalAutomationCriteriaForm constructAutomationCriteriaForm(
        ProcessScheduleTypeName _typeName,
        ProcessScheduleSchedulingContract _schedulingContract,
        CustVendPaymProposalAutomationCriteriaControls _controls)
    {
        SysPluginMetadataCollection metadataCollection = new SysPluginMetadataCollection();
        metadataCollection.SetManagedValue(extendedTypeStr(ProcessScheduleTypeName), _typeName);

        CustVendPaymProposalAutomationCriteriaForm automationCriteriaForm =
            SysPluginFactory::Instance('Dynamics.AX.Application', classStr(CustVendPaymProposalAutomationCriteriaForm), metadataCollection) as CustVendPaymProposalAutomationCriteriaForm;

        if (_controls.checkInitialized())
        {
            automationCriteriaForm.initializeFormState(_schedulingContract, _controls);
            automationCriteriaForm.initializeFormInteraction(_typeName);
        }

        return automationCriteriaForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFormState</Name>
				<Source><![CDATA[
    private void initializeFormState(ProcessScheduleSchedulingContract _schedulingContract, CustVendPaymProposalAutomationCriteriaControls _controls)
    {
        formState = CustVendPaymProposalAutomationCriteriaFormState::construct();
        formState.controls = _controls;
        
        this.defineSupportedJournalTypes(formState.supportedJournalTypes);
        
        formState.initialSchedulingContract = _schedulingContract;
        formState.originalPaymentProposalQuery = this.getOriginalBaselineQuery();
        formState.workingPaymentProposalQuery = this.getWorkingQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFormInteraction</Name>
				<Source><![CDATA[
    private void initializeFormInteraction(ProcessScheduleTypeName _typeName)
    {
        formInteraction = CustVendPaymProposalAutomationCriteriaFormInteraction::constructFromFormState(_typeName, formState);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    internal boolean validate()
    {
        return formInteraction.validate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createScheduleSeries</Name>
				<Source><![CDATA[
    internal void createScheduleSeries(ProcessScheduleSchedulingContract _schedulingContract)
    {
        formInteraction.createScheduleSeries(_schedulingContract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateScheduleSeries</Name>
				<Source><![CDATA[
    internal void updateScheduleSeries()
    {
        formInteraction.updateScheduleSeries();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createScheduledOccurrence</Name>
				<Source><![CDATA[
    internal void createScheduledOccurrence(ProcessScheduleSchedulingContract _schedulingContract)
    {
        formInteraction.createScheduledOccurrence(_schedulingContract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateScheduledOccurrence</Name>
				<Source><![CDATA[
    internal void updateScheduledOccurrence()
    {
        formInteraction.updateScheduledOccurrence();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalQuery</Name>
				<Source><![CDATA[
    internal Query getOriginalQuery()
    {
        return formState.originalPaymentProposalQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryForApplicationOrExtraction</Name>
				<Source><![CDATA[
    internal Query getQueryForApplicationOrExtraction()
    {
        return formState.workingPaymentProposalQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defineSupportedJournalTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the supported journal types.
    /// </summary>
    /// <param name = "_supportedTypes">List to contain the supported journal types.</param>
    protected abstract void defineSupportedJournalTypes(List _supportedTypes)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkingQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the working query used for the payment proposal automation criteria setup and will be exposed for modification by the end user.
    /// </summary>
    /// <returns>The underlying query used for the payment proposal automation criteria setup.</returns>
    protected abstract Query getWorkingQuery()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalBaselineQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the original query used for a baseline when the framework applies or extracts query criteria modified by the end user.
    /// </summary>
    /// <returns>The original query used for used for a baseline.</returns>
    protected abstract Query getOriginalBaselineQuery()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>