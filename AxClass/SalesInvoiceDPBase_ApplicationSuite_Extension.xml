<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesInvoiceDPBase_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// An extension class of Sales Invoice report base data provider.
/// </summary>
[ExtensionOf(classStr(SalesInvoiceDPBase))]
public final class SalesInvoiceDPBase_ApplicationSuite_Extension
{
    internal CustTrans prepaymentCustTransProforma;
    private Amount proformaAmountToSettle;

    #ISOCountryRegionCodes
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getPrepaymentCustTransProforma</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustTrans</c> record of the prepayment for proforma invoice.
    /// </summary>
    /// <param name = "_record">Source table buffer related to current invoice journal.</param>
    /// <returns><c>CustTrans</c> record of the prepayment.</returns>
    protected CustTrans getPrepaymentCustTransProforma(Common _record)
    {
        next getPrepaymentCustTransProforma(_record);

        CustTrans custTrans;
        CustTransOpen custTransOpen;
        SpecTrans specTrans;
        select firstonly custTrans
                where custTrans.Prepayment == NoYes::Yes
            join TableId from custTransOpen
                where custTransOpen.RefRecId == custTrans.RecId
            join Balance01 from specTrans
                where specTrans.RefTableId == custTransOpen.TableId
                    && specTrans.RefRecId == custTransOpen.RecId
                    && specTrans.SpecTableId == _record.TableId
                    && specTrans.SpecRecId == _record.RecId;

        proformaAmountToSettle = specTrans.Balance01;

        return custTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPrepaymentProforma</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints the prepayment information related to the proforma invoice.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// A <c>CustInvoiceJour</c> record that contains invoice data.
    /// </param>
    protected void printPrepaymentProforma(CustInvoiceJour _custInvoiceJour)
    {
        next printPrepaymentProforma(_custInvoiceJour);

        if (prepaymentCustTransProforma)
        {
            settledAmountCur = proformaAmountToSettle;

            if (isoCountryCode == #isoCZ)
            {
                TaxTrans taxTransLocal;
                TaxTable taxTableLocal;

                real rate = prepaymentCustTransProforma.AmountCur != 0 ? proformaAmountToSettle / prepaymentCustTransProforma.AmountCur : 1;

                while select taxTransLocal
                    where taxTransLocal.Voucher == prepaymentCustTransProforma.Voucher
                        && taxTransLocal.TransDate == prepaymentCustTransProforma.TransDate
                        && taxTransLocal.TaxOrigin == TaxOrigin::Tax
                exists join taxTableLocal
                    where taxTableLocal.TaxCode == taxTransLocal.TaxCode
                        && (taxTableLocal.TaxType_W == TaxType_W::VAT
                            || taxTableLocal.TaxType_W == TaxType_W::VATReduced
                            || taxTableLocal.TaxType_W == TaxType_W::VATZero)
                {
                    taxTransLocal.SourceBaseAmountCur *= rate;
                    taxTransLocal.TaxBaseAmount *= rate;
                    taxTransLocal.SourceTaxAmountCur *= rate;
                    taxTransLocal.TaxAmount *= rate;

                    this.insertInvoiceDetailsInformation(
                        _custInvoiceJour,
                        null,
                        null,
                        prepaymentCustTransProforma,
                        taxTransLocal);
                }
            }

            this.insertInvoiceDetailsInformation(
                _custInvoiceJour,
                null,
                null,
                prepaymentCustTransProforma,
                null);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>