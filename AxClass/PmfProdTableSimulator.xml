<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfProdTableSimulator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Simulator to simulate creating production or batch orders.
/// </summary>
class PmfProdTableSimulator extends PmfSimulator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createForm</Name>
				<Source><![CDATA[
    private FormRun createForm()
    {
        Args    args = new Args(formstr(ProdTableCreate));
        FormRun fr;

        args.record(simulatedRecord);
        args.caller(this);

        fr = classFactory.formRunClass(args);
        fr.init();

        return fr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    /// <summary>
    /// Supplies the name of this class. This method is required by the
    /// framework creating production/batch orders during the simulation.
    /// </summary>
    /// <returns>
    /// The name of the current class.
    /// </returns>
    public str name()
    {
        return classStr(PmfProdTableSimulator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(Common _actual)
    {
        super(_actual as ProdTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfIsEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the Manufacturing Process module is active. This method
    /// is required by the framework creating batch orders during the
    /// simulation.
    /// </summary>
    /// <returns>
    /// True if the Manufacturing Process module is active; otherwise, false.
    /// </returns>
    public boolean pmfIsEnabled()
    {
        return #PmfEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the actual simulation.
    /// </summary>
    protected void run()
    {
        ProdTable       simulatedPT     = simulatedRecord as ProdTable;
        FormRun         formRun         = this.createForm();
        FormDataSource  prodTable_ds    = formRun.dataSource();
        ProdTable       prodTable       = prodTable_ds.cursor();

        prodTable_ds.create();

        prodTable.ItemId = simulatedPT.ItemId;
        prodTable_ds.object(fieldNum(ProdTable, ItemId)).modified();

        prodTable.DlvDate = simulatedPT.DlvDate;
        prodTable_ds.object(fieldNum(ProdTable, DlvDate)).modified();

        if (!PdsGlobal::pdsIsCWItem(simulatedPT.ItemId))
        {
            prodTable.QtySched = simulatedPT.QtySched;
            prodTable_ds.object(fieldNum(ProdTable, QtySched)).modified();
        }
        else
        {
            prodTable.PdsCWBatchSched = simulatedPT.PdsCWBatchSched;
            prodTable_ds.object(fieldNum(ProdTable, PdsCWBatchSched)).modified();
        }

        simulatedPT.data(prodTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the simulated record with the actual record. The entire record
    /// is not updated. Only those fields needed to seed the simulation of
    /// creating a production or batch order are used in the update.
    /// </summary>
    /// <param name="_actual">
    /// The actual record to update the simulated record with.
    /// </param>
    protected void updateRecord(Common _actual)
    {
        this.updateField(_actual, fieldNum(ProdTable, ProdId));
        this.updateField(_actual, fieldNum(ProdTable, ProdType));
        this.updateField(_actual, fieldNum(ProdTable, ItemId));
        this.updateField(_actual, fieldNum(ProdTable, DlvDate));
        this.updateField(_actual, fieldNum(ProdTable, QtySched));
        this.updateField(_actual, fieldNum(ProdTable, PdsCWBatchSched));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a simulator for creating production or batch orders.
    /// </summary>
    /// <param name="_actual">
    /// The actual record of a production/batch order to simulate creating.
    /// </param>
    /// <returns>
    /// A simulator for simulating the creation of a production or batch order.
    /// </returns>
    public static PmfProdTableSimulator construct(Common _actual)
    {
        return new PmfProdTableSimulator(_actual);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEqual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the simulation produces a production or batch order that is equivalent
    /// to the specified production or batch order. Equivalency is determined by
    /// checking if the simulation produces the same BOM or Formula and Route
    /// versions as specified in the actual production or batch order.
    /// </summary>
    /// <param name="_actual">
    /// The actual production or batch order to simulate creating.
    /// </param>
    /// <returns>
    /// True if the simulation produces a production or batch order that is
    /// equivalent to the actual production or batch order; otherwise, false.
    /// </returns>
    public static boolean isEqual(ProdTable _actual)
    {
        PmfProdTableSimulator   simulator   = PmfProdTableSimulator::construct(_actual);
        ProdTable               simulatedPT = simulator.execute();

        return simulatedPT.BOMId == _actual.BOMId
                && simulatedPT.RouteId == _actual.RouteId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>