<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxModelDocLineQualityOrderImpl_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The tax model class for <c>InventQualityOrderTable</c>.
/// </summary>
[TaxModelDocumentLineAttribute(tableStr(InventQualityOrderTable))]
public class TaxModelDocLineQualityOrderImpl_IN extends TaxModelDocLineBaseImpl_IN
    implements  TaxModelVATable_IN,
                TaxModelExciseTaxable_IN,
                TaxModelTaxableScrap_IN,
                TaxModelGSTTaxable_IN
{
    InventQualityOrderTable inventQualityOrderTable;
    TransTaxInformation     transTaxInformationLoc;

    TaxModelDocLineVATHelper_IN     VAThelper;
    TaxModelDocLineExciseHelper_IN  exciseHelper;
    TaxModelDocLineGSTHelper_IN     gstHelper;

    TaxModelDocLineIndirectTaxImpl_IN packingSlipModel;
    TaxModelDocLineIndirectTaxImpl_IN invoiceModel;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssessableValueTransactionCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the assessable value of the document line.
    /// </summary>
    /// <returns>
    /// The assessable value.
    /// </returns>
    public AmountCur getAssessableValueTransactionCurrency()
    {
        TaxModelTaxable_IN taxModelTaxable_IN = this.getReferenceTaxModelDocLine() as TaxModelTaxable_IN;
        return taxModelTaxable_IN.getAssessableValueTransactionCurrency() * this.getScrapPercent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustTable</c> based on the cust account on the transaction line.
    /// </summary>
    /// <returns>
    /// The <c>CustTable</c>
    /// </returns>
    public CustTable getCustTable()
    {
        return this.getReferenceTaxModelDocLine().getCustTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeliveryDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction delivery date
    /// </summary>
    /// <returns>
    /// The transaction delivery date
    /// </returns>
    public Date getDeliveryDate()
    {
        return this.getTransDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentLineOriginalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the document line original table.
    /// </summary>
    /// <returns>
    /// The the document line original table
    /// </returns>
    public Common getDocumentLineOriginalTable()
    {
        Common                      ret;
        TaxModelTaxable             orignalModel;

        orignalModel = this.getOriginalTaxModelTaxable();

        ret = SalesPurchJournalLine::findRecId(orignalModel.getDocumentLineMainTableId(), orignalModel.getDocumentLineMainTableRecId());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseDirectSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets direct settlement of this document line.
    /// </summary>
    /// <returns>
    /// The <c>DirectSettlement_IN</c>
    /// </returns>
    public DirectSettlement_IN getExciseDirectSettlement()
    {
        return exciseHelper.getExciseDirectSettlement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseNumberSeq</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the excise tax number sequence.
    /// </summary>
    /// <returns>
    /// The number sequence generated.
    /// </returns>
    public container getExciseNumberSeq()
    {
        return exciseHelper.getExciseNumberSeq();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseRecordType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ExciseRecordType_IN</c> of the document line map.
    /// </summary>
    /// <returns>
    /// The <c>ExciseRecordType_IN</c>
    /// </returns>
    public ExciseRecordType_IN getExciseRecordType()
    {
        return exciseHelper.getExciseRecordType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseTariffCodeRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> of the <c>ExciseTariffCodes_IN</c> of this document line.
    /// </summary>
    /// <returns>
    /// The <c>RecId</c>
    /// </returns>
    public RefRecId getExciseTariffCodeRefRecId()
    {
        return exciseHelper.getExciseTariffCodeRefRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseTariffCodesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ExciseTariffCodes_IN</c> of this document line.
    /// </summary>
    /// <returns>
    /// The <c>ExciseTariffCodes_IN</c>
    /// </returns>
    public ExciseTariffCodes_IN getExciseTariffCodesTable()
    {
        return exciseHelper.getExciseTariffCodesTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseTaxAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax account type based on the given <c>TaxOnItem</c>
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c>
    /// </param>
    /// <returns>
    /// The tax account type.
    /// </returns>
    public TaxAccountType_IN getExciseTaxAccountType(TaxOnItem _taxOnItem)
    {
        return exciseHelper.getExciseTaxAccountType(_taxOnItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseTaxOffsetAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax offset account type based on the given <c>TaxOnItem</c>
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c>
    /// </param>
    /// <returns>
    /// The tax account type.
    /// </returns>
    public TaxAccountType_IN getExciseTaxOffsetAccountType(TaxOnItem _taxOnItem)
    {
        if (this.isPurch())
        {
            return TaxAccountType_IN::None;
        }
        else
        {
            return TaxAccountType_IN::ExciseExpenseAccount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseTaxRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Excise Registration Number
    /// </summary>
    /// <returns>
    /// The <c>TaxRegistrationNumber_IN</c>
    /// </returns>
    public TaxRegistrationNumber_IN getExciseTaxRegistrationNumber()
    {
        return exciseHelper.getExciseTaxRegistrationNumber();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseTaxRegistrationRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> of Excise Registration
    /// </summary>
    /// <returns>
    /// The <c>RefRecId</c>
    /// </returns>
    public RefRecId getExciseTaxRegistrationRefRecId()
    {
        return exciseHelper.getExciseTaxRegistrationRefRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ExciseType_IN</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>ExciseType_IN</c>
    /// </returns>
    public ExciseType_IN getExciseType()
    {
        return exciseHelper.getExciseType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFullQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the full quantity.
    /// </summary>
    /// <returns>
    /// The full quantity.
    /// </returns>
    public Qty getFullQuantity()
    {
        return this.getReferenceTaxModelDocLine().getQuantity();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTHSNCodeRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> of GST HSN code table.
    /// </summary>
    /// <returns>
    /// The <c>RefRecId</c>
    /// </returns>
    public RefRecId getGSTHSNCodeRefRecId()
    {
        return gstHelper.getGSTHSNCodeRefRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTHSNCodeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the GST HSN code table.
    /// </summary>
    /// <returns>
    /// The <c>HSNCodeTable_IN</c>
    /// </returns>
    public HSNCodeTable_IN getGSTHSNCodeTable()
    {
        return gstHelper.getGSTHSNCodeTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTITCCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ITC category of the transaction line.
    /// </summary>
    /// <returns>
    /// The ITC category.
    /// </returns>
    public ITCCategory_IN getGSTITCCategory()
    {
        return gstHelper.getGSTITCCategory();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTNonBusinessUsagePercent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the GST Non-business usage perecent.
    /// </summary>
    /// <returns>
    /// The <c>Percent</c> of the GST Non-business usage part.
    /// </returns>
    public Percent getGSTNonBusinessUsagePercent()
    {
        return gstHelper.getGSTNonBusinessUsagePercent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the GST Registration Number.
    /// </summary>
    /// <returns>
    /// The <c>TaxRegistrationNumber_IN</c>
    /// </returns>
    public TaxRegistrationNumber_IN getGSTRegistrationNumber()
    {
        return gstHelper.getGSTRegistrationNumber();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTRegistrationRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> GST Registration.
    /// </summary>
    /// <returns>
    /// The <c>RefRecId</c>
    /// </returns>
    public RefRecId getGSTRegistrationRefRecId()
    {
        return gstHelper.getGSTRegistrationRefRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTScrap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Scrap of the transaction line.
    /// </summary>
    /// <returns>
    /// True if the tax is Scrap for the transaction line; otherwise, false.
    /// </returns>
    public NoYesId getGSTScrap()
    {
        return gstHelper.getGSTScrap();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTServiceAccountingCodeRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> GST Service accounting code.
    /// </summary>
    /// <returns>
    /// The <c>RefRecId</c>
    /// </returns>
    public RefRecId getGSTServiceAccountingCodeRefRecId()
    {
        return gstHelper.getGSTServiceAccountingCodeRefRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTServiceAccountingCodeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the GST Service accounting code table.
    /// </summary>
    /// <returns>
    /// The <c>ServiceAccountingCodeTable_IN</c>
    /// </returns>
    public ServiceAccountingCodeTable_IN getGSTServiceAccountingCodeTable()
    {
        return gstHelper.getGSTServiceAccountingCodeTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTServiceCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the service category of the transaction line.
    /// </summary>
    /// <returns>
    /// The service category.
    /// </returns>
    public ServiceCategory_IN getGSTServiceCategory()
    {
        return gstHelper.getGSTServiceCategory();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invoice date information.
    /// </summary>
    /// <param name="_taxType">
    /// The tax type.
    /// </param>
    /// <returns>
    /// The instance of the <c>TransDate</c> class.
    /// </returns>
    protected TransDate getInvoiceDate(TaxType_IN _taxType)
    {
        TransDate ret;

        if (invoiceModel != null)
        {
            ret = invoiceModel.getTaxRateBasingDate(_taxType);
        }
        else
        {
            ret = this.getValidateDate();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the line amount of the document line.
    /// </summary>
    /// <returns>
    /// The line amount.
    /// </returns>
    public LineAmount getLineAmount()
    {
        PurchLine    purchLine;
        SalesLine    salesLine;
        real         lineAmount;

        if (this.isPurch())
        {
            select LineAmount from purchLine
                where inventQualityOrderTable.InventRefId == purchLine.PurchId
                    && inventQualityOrderTable.InventRefTransId == purchLine.InventTransId;

            lineAmount = purchLine.LineAmount;
        }

        if (this.isSales())
        {
            select LineAmount from salesLine
                where inventQualityOrderTable.InventRefId == salesLine.SalesId
                    && inventQualityOrderTable.InventRefTransId == salesLine.InventTransId;

            lineAmount = salesLine.LineAmount;
        }

        return lineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaximumRetailPriceTransactionCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the maximum retail price of the document line.
    /// </summary>
    /// <returns>
    /// The maximum retail price.
    /// </returns>
    public MaximumRetailPrice_IN getMaximumRetailPriceTransactionCurrency()
    {
        TaxModelTaxable_IN taxModelTaxable_IN = this.getReferenceTaxModelDocLine() as TaxModelTaxable_IN;
        return taxModelTaxable_IN.getMaximumRetailPriceTransactionCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalTaxModelTaxable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the original <c>TaxModelTaxable_IN</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>TaxModelTaxable_IN</c>
    /// </returns>
    public TaxModelTaxable getOriginalTaxModelTaxable()
    {
        return this.getReferenceTaxModelDocLine().getOriginalTaxModelTaxable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyGSTRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the party GST Registration Number.
    /// </summary>
    /// <returns>
    /// The party <c>TaxRegistrationNumber_IN</c>
    /// </returns>
    public TaxRegistrationNumber_IN getPartyGSTRegistrationNumber()
    {
        return gstHelper.getPartyGSTRegistrationNumber();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyGSTRegistrationRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the party <c>RecId</c> GST Registration.
    /// </summary>
    /// <returns>
    /// The party <c>RefRecId</c>
    /// </returns>
    public RefRecId getPartyGSTRegistrationRefRecId()
    {
        return gstHelper.getPartyGSTRegistrationRefRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyLogisticsPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the party <c>LogisticsPostalAddress</c> of this transaction document line.
    /// </summary>
    /// <returns>
    /// The tax <c>LogisticsPostalAddress</c>
    /// </returns>
    public LogisticsPostalAddress getPartyLogisticsPostalAddress()
    {
        SalesLine            salesLine;
        PurchLine            purchLine;
        LogisticsPostalAddress logisticsPostalAddress;

        if (this.isPurch())
        {
            select firstonly purchLine
                where inventQualityOrderTable.InventRefId == purchLine.PurchId
                    && inventQualityOrderTable.InventRefTransId == purchLine.InventTransId;

            transTaxInformationLoc =  TransTaxInformationHelper::newHelper().getTransTaxInformationByRecord(purchLine);

            logisticsPostalAddress = LogisticsPostalAddress::findByLocation(transTaxInformationLoc.VendorLocation);
        }
        else if (this.isSales())
        {
            select firstonly salesLine
                where inventQualityOrderTable.InventRefId == salesLine.SalesId
                    && inventQualityOrderTable.InventRefTransId == salesLine.InventTransId;

            transTaxInformationLoc =  TransTaxInformationHelper::newHelper().getTransTaxInformationByRecord(salesLine);

            logisticsPostalAddress = LogisticsPostalAddress::findByLocation(transTaxInformationLoc.CustomerLocation);
        }

        return LogisticsPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsDeemedExport</Name>
				<Source><![CDATA[
    public NoYes getIsDeemedExport()
    {
        return gstHelper.getIsDeemedExport();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsSEZParty</Name>
				<Source><![CDATA[
    public NoYes getIsSEZParty()
    {
        return gstHelper.getIsSEZParty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the quantity from the transaction line.
    /// </summary>
    /// <returns>
    ///    The quantity.
    /// </returns>
    /// <remarks>
    ///    If the transaction does not support quantities, 0 may be passed as the quantity. This will be used
    ///    to calculate taxes by unit.
    /// </remarks>
    public Qty getQuantity()
    {
        return inventQualityOrderTable.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReferenceTaxModelDocLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reference TaxModel doc line.
    /// </summary>
    /// <returns>
    /// The refernece taxModel doc line.
    /// </returns>
    public TaxModelTaxable getReferenceTaxModelDocLine()
    {
        return packingSlipModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getScrapPercent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the scrap percentage of the full quantity.
    /// </summary>
    /// <returns>
    /// The percentage
    /// </returns>
    public Percent getScrapPercent()
    {
        Percent             scrapPercent;
        InventItemSampling  inventItemSampling;

        if (inventQualityOrderTable.ItemSamplingId)
        {
            inventItemSampling = InventItemSampling::find(inventQualityOrderTable.ItemSamplingId);

            if (inventItemSampling.TestQtySpecification == InventTestQtySpecification::Percent)
            {
                scrapPercent = inventItemSampling.ItemSamplingValue / 100;
            }
            else
            {
                Qty fullQtyWithItemSampling = this.getFullQuantity();
                scrapPercent = fullQtyWithItemSampling ? inventItemSampling.ItemSamplingValue / fullQtyWithItemSampling : 0;
            }
        }
        else
        {
            Qty fullQty = this.getFullQuantity();
            scrapPercent = fullQty ? this.getQuantity() / fullQty : 0;
        }

        return scrapPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax direction.
    /// </summary>
    /// <returns>
    /// The tax direction
    /// </returns>
    public TaxDirection getTaxDirection()
    {
        if (this.isPurch())
        {
            return TaxDirection::IncomingTax;
        }
        else
        {
            return TaxDirection::OutgoingTax;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxLocationRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax location <c>RefRecId</c> on the transaction.
    /// </summary>
    /// <returns>
    /// The tax location of the transaction.
    /// </returns>
    /// <remarks>
    /// The method may be required to be overridden by different type of transaction.
    /// </remarks>
    public RefRecId getTaxLocationRefRecId()
    {
        PurchLine               purchLine;
        SalesLine               salesLine;
        RefRecId                taxLocationRefRecId;

        if (this.isPurch())
        {
            select firstonly purchLine
                where inventQualityOrderTable.InventRefId == purchLine.PurchId
                    && inventQualityOrderTable.InventRefTransId == purchLine.InventTransId;

            transTaxInformationLoc =  TransTaxInformationHelper::newHelper().getTransTaxInformationByRecord(purchLine);

            taxLocationRefRecId = transTaxInformationLoc.CompanyLocation;
        }

        if (this.isSales())
        {
            select firstonly salesLine
                where inventQualityOrderTable.InventRefId == salesLine.SalesId
                    && inventQualityOrderTable.InventRefTransId == salesLine.InventTransId;

            transTaxInformationLoc =  TransTaxInformationHelper::newHelper().getTransTaxInformationByRecord(salesLine);

            taxLocationRefRecId = transTaxInformationLoc.CompanyLocation;
        }

        return taxLocationRefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxModuleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax module type
    /// </summary>
    /// <returns>
    /// The transaction tax module type
    /// </returns>
    public TaxModuleType getTaxModuleType()
    {
        TaxModuleType   taxModuleType;

        if (this.isPurch())
        {
            taxModuleType = TaxModuleType::Purch;
        }
        else if (this.isSales())
        {
            taxModuleType = TaxModuleType::Sales;
        }

        return taxModuleType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRateBasingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax rate basing date for the given tax type.
    /// </summary>
    /// <param name="_taxType">
    /// The given tax type.
    /// </param>
    /// <returns>
    /// The tax rate date.
    /// </returns>
    public TransDate getTaxRateBasingDate(TaxType_IN _taxType)
    {
        TransDate     ret;
        TaxParameters taxParameters;

        taxParameters = TaxParameters::find();

        if (this.isPurch())
        {
            if (_taxType == TaxType_IN::Excise)
            {
                switch (taxParameters.VendorCalculationDateType_IN)
                {
                    case VendorCalculationDateType_IN::DeliveryDate :
                        ret = this.getValidateDate();
                        break;
                    case VendorCalculationDateType_IN::DocumentDate :
                    case VendorCalculationDateType_IN::InvoiceDate :
                        ret = this.getInvoiceDate(_taxType);
                        break;
                }
            }
            else
            {
                ret = this.getInvoiceDate(_taxType);
            }
        }
        else
        {
            if (_taxType == TaxType_IN::Excise)
            {
                switch (taxParameters.CustomerCalculationDateType_IN)
                {
                    case CustomerCalculationDateType_IN::DeliveryDate :
                        ret = this.getValidateDate();
                        break;
                    case CustomerCalculationDateType_IN::InvoiceDate  :
                        ret = this.getInvoiceDate(_taxType);
                        break;
                }
            }
            else
            {
                ret = this.getInvoiceDate(_taxType);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the document line transaction currency.
    /// </summary>
    /// <returns>The document line transaction currency.</returns>
    public CurrencyCode getTransactionCurrency()
    {
        PurchLine    purchLine;
        SalesLine    salesLine;
        CurrencyCode currencyCode;

        if (this.isPurch())
        {
            select CurrencyCode from purchLine
                where inventQualityOrderTable.InventRefId == purchLine.PurchId
                    && inventQualityOrderTable.InventRefTransId == purchLine.InventTransId;

            currencyCode = purchLine.CurrencyCode;
        }

        if (this.isSales())
        {
            select CurrencyCode from salesLine
                where inventQualityOrderTable.InventRefId == salesLine.SalesId
                    && inventQualityOrderTable.InventRefTransId == salesLine.InventTransId;

            currencyCode = salesLine.CurrencyCode;
        }

        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>TaxModelTransactionType_IN</c> of the transaction
    /// </summary>
    /// <returns>
    /// The <c>TaxModelTransactionType_IN</c> of the transaction
    /// </returns>
    public TaxModelTransactionType getTransactionType()
    {
        if (this.isPurch())
        {
            return TaxModelTransactionType::Return;
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction posting date
    /// </summary>
    /// <returns>
    /// The transaction posting date
    /// </returns>
    public TransDate getTransDate()
    {
        if (this.isPurch())
        {
            if (inventQualityOrderTable.OrderStatus == InventTestOrderStatus::Open)
            {
                return this.getValidateDate();
            }
            else
            {
                return this.getInvoiceDate(TaxType_IN::Excise);
            }
        }
        else
        {
            return this.getInvoiceDate(TaxType_IN::Excise);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidateDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the validate date of quality order.
    /// </summary>
    /// <returns>
    /// The instance of the <c>TransDate</c> class.
    /// </returns>
    protected TransDate getValidateDate()
    {
        if (inventQualityOrderTable.ValidateDate_IN)
        {
            return inventQualityOrderTable.ValidateDate_IN;
        }
        else
        {
            return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVATAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax account type based on the given <c>TaxOnItem</c>
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c>
    /// </param>
    /// <returns>
    /// The tax account type.
    /// </returns>
    public TaxAccountType_IN getVATAccountType(TaxOnItem _taxOnItem)
    {
        return VATHelper.getVATAccountType(_taxOnItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVATGoodsType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the VAT goods type of the document line.
    /// </summary>
    /// <returns>
    /// The <c>VATGoodsType_IN</c> of the document line.
    /// </returns>
    public VATGoodsType_IN getVATGoodsType()
    {
        return VATHelper.getVATGoodsType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVATNonRecoverablePercent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the VAT Non-recoverable perecent.
    /// </summary>
    /// <returns>
    /// The <c>Percent</c> of the VAT Non-recoverable part.
    /// </returns>
    public Percent getVATNonRecoverablePercent()
    {
        return VATHelper.getVATNonRecoverablePercent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVATOffsetAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax offset account type based on the given <c>TaxOnItem</c>
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c>
    /// </param>
    /// <returns>
    /// The tax account type.
    /// </returns>
    public TaxAccountType_IN getVATOffsetAccountType(TaxOnItem _taxOnItem)
    {
        if (this.isPurch())
        {
            return TaxAccountType_IN::None;
        }
        else
        {
            return TaxAccountType_IN::VATExpenseAccount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVATRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the VAT Registration Number.
    /// </summary>
    /// <returns>
    /// The <c>TaxRegistrationNumber_IN</c>
    /// </returns>
    public TaxRegistrationNumber_IN getVATRegistrationNumber()
    {
        return VAThelper.getVATRegistrationNumber();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVATRegistrationRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> VAT Registration.
    /// </summary>
    /// <returns>
    /// The <c>RefRecId</c>
    /// </returns>
    public RefRecId getVATRegistrationRefRecId()
    {
        return VAThelper.getVATRegistrationRefRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>VendTable</c> based on the vendor account on the transaction line.
    /// </summary>
    /// <returns>
    /// The <c>VendTable</c>
    /// </returns>
    public VendTable getVendTable()
    {
        return this.getReferenceTaxModelDocLine().getVendTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the domain object.
    /// The method should only be called by the <c>TaxModelDocLineFactoryable_IN</c> classes.
    /// </summary>
    /// <param name="_documentLineMap">
    /// The document line buffer.
    /// </param>
    public void init(SalesPurchJournalLine _documentLineMap)
    {
        inventQualityOrderTable = _documentLineMap;

        if (this.isPurch())
        {
            PurchParmLine purchParmLine;
        
            if (PurchMultithreadedPurchConfirmationFlight::instance().isEnabled())
            {
                purchParmLine = PurchParmLine::findPurchParmLineForQualityOrder(inventQualityOrderTable, true);
            }
            else
            {
                select firstOnly purchParmLine
                    where purchParmLine.InventTransId == inventQualityOrderTable.InventRefTransId
                        && purchParmLine.OrigPurchId == inventQualityOrderTable.InventRefId
                        && purchParmLine.ReceiveNow != 0;
            }
           
            packingSlipModel = TaxModelDocLineFactory::newTaxModelDocLine(purchParmLine) as TaxModelDocLineIndirectTaxImpl_IN;
        }
        else if (this.isSales())
        {
            SalesParmLine salesParmLine;

            select firstOnly salesParmLine
                where salesParmLine.InventTransId == inventQualityOrderTable.InventRefTransId
                    && salesParmLine.OrigSalesId == inventQualityOrderTable.InventRefId
                    && salesParmLine.DeliverNow != 0;

            packingSlipModel = TaxModelDocLineFactory::newTaxModelDocLine(salesParmLine) as TaxModelDocLineIndirectTaxImpl_IN;
        }
        else
        {
            throw error (Error::wrongUseOfFunction(classStr(TaxModelDocLineQualityOrderImpl_IN)));
        }

        super(_documentLineMap);

        VAThelper = new TaxModelDocLineVATHelper_IN();
        VAThelper.setDocumentLine(_documentLineMap);
        VAThelper.setTaxModelTaxable(this);
        VAThelper.setTaxModelVATable(this);
        VAThelper.setTransTaxInformation(transTaxInformation);

        exciseHelper = new TaxModelDocLineExciseHelper_IN();
        exciseHelper.setDocumentLine(_documentLineMap);
        exciseHelper.setTaxModelTaxable(this);
        exciseHelper.setTaxModelExciseTaxable(this);
        exciseHelper.setTransTaxInformation(transTaxInformation);

        gstHelper = new TaxModelDocLineGSTHelper_IN();
        gstHelper.setDocumentLine(_documentLineMap);
        gstHelper.setTaxModelTaxable(this);
        gstHelper.setTaxModelGSTTaxable(this);
        gstHelper.setTransTaxInformation(transTaxInformation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBasedOnReferenceTaxModelDocLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the doc line is based on reference taxmodel doc line  or not.
    /// </summary>
    /// <returns>
    /// True if the doc line is based on the reference taxModel doc line;Oterwise, false.
    /// </returns>
    public boolean isBasedOnReferenceTaxModelDocLine()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExciseCENVATCreditAvailed</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the document line is CENVAT CreditA vailed or not.
    /// </summary>
    /// <returns>
    /// True if the document line is CENVAT Credit Availed;otherwise, false.
    /// </returns>
    public NoYes isExciseCENVATCreditAvailed()
    {
        return exciseHelper.isExciseCENVATCreditAvailed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExciseConsignment</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the document line is consignment or not.
    /// </summary>
    /// <returns>
    /// True if the document line is consignment;otherwise, false.
    /// </returns>
    public NoYesId isExciseConsignment()
    {
        return exciseHelper.isExciseConsignment();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExicseDSA</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction should register DSA.
    /// </summary>
    /// <returns>
    /// True if the document line should register DSA; otherwise, false.
    /// </returns>
    public NoYes isExicseDSA()
    {
        return exciseHelper.isExicseDSA();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExicseSSI</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction is avaialbe for SSI.
    /// </summary>
    /// <returns>
    /// True if the document line is SSI applied; otherwise, false.
    /// </returns>
    public NoYes isExicseSSI()
    {
        return exciseHelper.isExicseSSI();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPurch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Is the quality order for a purchase order
    /// </summary>
    /// <returns>
    /// True, if the quality order for a purchase order; otherwise, false.
    /// </returns>
    protected NoYes isPurch()
    {
        return inventQualityOrderTable.ReferenceType == InventTestReferenceType::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Is the quality order for a sales order
    /// </summary>
    /// <returns>
    /// True, if the quality order for a sales order; otherwise, false.
    /// </returns>
    protected NoYes isSales()
    {
        return inventQualityOrderTable.ReferenceType == InventTestReferenceType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsVATCompositionScheme</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction is avaialbe for CompositionScheme.
    /// </summary>
    /// <returns>
    /// True if the document line is CompositionScheme applied; otherwise, false.
    /// </returns>
    public NoYes IsVATCompositionScheme()
    {
        return VAThelper.IsVATCompositionScheme();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBaseModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the base Model.
    /// </summary>
    /// <param name="_baseModel">
    /// The base model.
    /// </param>
    public void setBaseModel(Object _baseModel)
    {
        if (_baseModel is TaxModelDocLineIndirectTaxImpl_IN)
        {
            invoiceModel = _baseModel as TaxModelDocLineIndirectTaxImpl_IN;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExciseNumberSeq</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the excise tax number sequence.
    /// </summary>
    /// <param name="_nums">
    /// The sequence number
    /// </param>
    public void setExciseNumberSeq(container _nums)
    {
        exciseHelper.setExciseNumberSeq(_nums);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPostAmountRegister</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if excise amount register should be posted or not.
    /// </summary>
    /// <returns>
    /// True if the document line should post excise amount register; otherwise, false.
    /// </returns>
    public NoYes shouldPostAmountRegister()
    {
        return exciseHelper.shouldPostAmountRegister();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPostQuantityRegister</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if excise quantity register should be posted or not.
    /// </summary>
    /// <returns>
    /// True if the document line should post excise quantity register; otherwise, false.
    /// </returns>
    public NoYes shouldPostQuantityRegister()
    {
        TaxParameters taxParameters;
        TaxOnItem     taxOnItem;
        boolean ret;

        if (this.getExciseTaxAccountType(taxOnItem) != TaxAccountType_IN::ExciseExpenseAccount)
        {
            taxParameters = TaxParameters::find();

            if (this.isPurch())
            {
                if (inventQualityOrderTable.OrderStatus == InventTestOrderStatus::Open)
                {
                    switch (taxParameters.VendorCalculationDateType_IN)
                    {
                        case VendorCalculationDateType_IN::DeliveryDate :
                        case VendorCalculationDateType_IN::DocumentDate :
                            ret = true;
                            break;
                        case VendorCalculationDateType_IN::InvoiceDate :
                            ret = false;
                            break;
                    }
                }
                else
                {
                    switch (taxParameters.VendorCalculationDateType_IN)
                    {
                        case VendorCalculationDateType_IN::DeliveryDate :
                        case VendorCalculationDateType_IN::DocumentDate :
                            ret = false;
                            break;
                        case VendorCalculationDateType_IN::InvoiceDate :
                            ret = true;
                            break;
                    }
                }
            }
            else
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPostTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if tax transaction should be posted or not.
    /// </summary>
    /// <returns>
    /// True if the document line should post tax transaction; otherwise, false.
    /// </returns>
    public NoYes shouldPostTaxTrans()
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;

        if (this.isPurch())
        {
            select firstOnly RecId from vendInvoiceInfoLine
                where inventQualityOrderTable.InventRefId == vendInvoiceInfoLine.OrigPurchId
                    && inventQualityOrderTable.InventRefTransId == vendInvoiceInfoLine.InventTransId;

            return vendInvoiceInfoLine.RecId > 0;
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkipExciseTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should the Excise Tax be skipped on this transaction line?
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c> on the transaction line.
    /// </param>
    /// <returns>
    /// True, it should be skipped; Otherwise, false.
    /// </returns>
    public boolean shouldSkipExciseTax(TaxOnItem _taxOnItem)
    {
        boolean ret;

        ret = exciseHelper.shouldSkipExciseTax(_taxOnItem);

        if (!ret)
        {
            ret = !(inventQualityOrderTable.ApplyIndiaTaxes_IN == ApplyIndiaTaxes_IN::Excise
                || inventQualityOrderTable.ApplyIndiaTaxes_IN == ApplyIndiaTaxes_IN::Both);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkipVAT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should the VAT be skipped on this transaction line?
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c> on the transaction line.
    /// </param>
    /// <returns>
    /// True, it should be skipped; Otherwise, false.
    /// </returns>
    public boolean shouldSkipVAT(TaxOnItem _taxOnItem)
    {
        boolean ret;

        ret = VATHelper.shouldSkipVAT(_taxOnItem);

        if (!ret)
        {
            ret = !(inventQualityOrderTable.ApplyIndiaTaxes_IN == ApplyIndiaTaxes_IN::VAT
                || inventQualityOrderTable.ApplyIndiaTaxes_IN == ApplyIndiaTaxes_IN::Both);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExciseProduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction is related to production.
    /// </summary>
    /// <returns>
    /// True if the document line is related to production; otherwise, false.
    /// </returns>
    public boolean isExciseProduction()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isScrap</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the document line is scrap or not.
    /// </summary>
    /// <returns>
    /// True if the document line is scrap;otherwise, false.
    /// </returns>
    public NoYes isScrap()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the unit of the item in this transaction document line.
    /// </summary>
    /// <returns>The unit of the item in this transaction line.</returns>
    public UnitOfMeasureSymbol getUnit()
    {
        packingSlipModel = this.getReferenceTaxModelDocLine();
        return packingSlipModel.getUnit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction invoice date
    /// </summary>
    /// <returns>
    /// The transaction invoice date
    /// </returns>
    public InvoiceDate getDocumentInvoiceDate()
    {
        return DateTimeUtil::date(inventQualityOrderTable.CreatedDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction document date
    /// </summary>
    /// <returns>
    /// The transaction document date
    /// </returns>
    public DocumentDate getDocumentDate()
    {
        return DateTimeUtil::date(inventQualityOrderTable.CreatedDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSupportCalcTaxInAccountingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Whether support calculate tax in accounting currency for this transaction line.
    /// </summary>
    /// <returns>
    /// True if support, otherwise false.
    /// </returns>
    [Hookable(false)]
    internal boolean isSupportCalcTaxInAccountingCurrency()
    {
        if (this.getReferenceTaxModelDocLine() is TaxModelDocLineBaseImpl_IN)
        {
            TaxModelDocLineBaseImpl_IN taxModelDocLineBaseImplIN = this.getReferenceTaxModelDocLine();
            return taxModelDocLineBaseImplIN.isSupportCalcTaxInAccountingCurrency();
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>