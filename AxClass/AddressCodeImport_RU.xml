<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AddressCodeImport_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AddressCodeImport_RU</c> class import addresses from KLADR to LogisticsAddress* tables
/// </summary>
class AddressCodeImport_RU extends AbbreviationCodeImport_RU implements BatchRetryable
{
    LogisticsAddressStateId         stateId;
    DialogField                     dialogStateId;

    // <RUP>
    DialogField                     dialogCountryRegionId;
    // </RUP>

    LogisticsAddressCountryRegion   country;

    Map                             stateCache,
                                    countyCache,
                                    zipCache,
                                    propertiesCache,
                                    cityCache,
                                    districtCache,
                                    streetCache,
                                    houseCache,
                                    steadCache,
                                    flatCache;

    systemSequence                  systemSequence;

    Map                             fieldsCache;

    // <RUP>
    LogisticsAddressCountryRegionId countryRegionId;
    // </RUP>

    // <RUP
    #define.CurrentVersion(2)
    // #define.CurrentVersion(1)
    // </RUP>
    #localmacro.CurrentList
        Dsn,
        StateId,
        // <RUP>
        countryRegionId
        // </RUP>
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>appendValues</Name>
				<Source><![CDATA[
    private Common appendValues(
        Common    _record,
        Common    _newValues,
        Map       _cache,
        anytype   _key,
        boolean   _existsInDB,
        boolean   _forceRefreshCache)
    {
        List    fields;
        boolean refreshCache;
        Common  record, updateRecord;

        if (! fieldsCache.exists(_newValues.TableId))
            throw error(Error::wrongUseOfFunction(funcName()));

        // updating record
        if (_record)
        {
            record = _record;

            fields = fieldsCache.lookup(_newValues.TableId);

            refreshCache = this.updateRecordDiff(fields, record, _newValues);

            // If record exists in database (it is used in postal address and thus was not deleted)
            // it should be reread and updated to new details.
            // Note: potentially there can happen multiple updates on same record.
            if (refreshCache && _existsInDB)
            {
                updateRecord = DictTable::construct(tableId2name(record.TableId)).makeRecord();

                this.skip(updateRecord);

                select firstonly forupdate updateRecord
                    where updateRecord.RecId == record.RecId;

                this.updateRecordDiff(fields, updateRecord, _newValues);

                updateRecord.doUpdate();

                record = updateRecord;
            }
        }
        // creating new record
        else
        {
            record = _newValues.data();
        }

        if (! record.RecId)
        {
            refreshCache = true;

            record.RecId = systemSequence.reserveValues(1, _record.TableId);
        }

        if (refreshCache || _forceRefreshCache)
        {
            _cache.insert(_key, [ record, _existsInDB ]);
        }

        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAddressFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check ability to work with abridgements of addresses
    /// </summary>
    /// <returns>
    /// Returns false if <c>AddressTypeTable_RU</c> table is empty or user chooses No in dialog box, otherwise true
    /// </returns>
    private boolean checkAddressFormat()
    {
        AddressTypeTable_RU     addressTypeTable;

        select count(RecId) from addressTypeTable;

        if (! addressTypeTable.RecId)
        {
            return (Box::yesNo("@GlobalAddressBook:TableOfAbridgementIsEmpty" + ' ' + "@GlobalAddressBook:ProceedWithImport", DialogButton::No) == DialogButton::Yes);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUpData</Name>
				<Source><![CDATA[
    private void cleanUpData()
    {
        LogisticsAddressZipCode             zipCode;
        LogisticsAddressState               state;
        LogisticsAddressCounty              county;
        LogisticsAddressCity                city;
        LogisticsAddressDistrict            district;
        LogisticsAddressStreet_RU           street;
        LogisticsAddressHouseNumber_RU      houseNumber;
        LogisticsAddressSteadNumber_RU      steadNumber;
        LogisticsAddressFlatNumber_RU       flatNumber;
        LogisticsAddressProperties_RU       properties;

        LogisticsPostalAddress              logisticsPostalAddress;
        LogisticsAddrPropertiesNotExists_RU propertiesNotExists;

        this.skip(zipCode);
        this.skip(state);
        this.skip(county);
        this.skip(city);
        this.skip(district);
        this.skip(street);
        this.skip(houseNumber);
        this.skip(steadNumber);
        this.skip(flatNumber);
        this.skip(properties);

        progress.setText("@SYS4160");

        // Flats
        /////////////////////////////////////////////////////////////////////
        delete_from flatNumber
        exists join houseNumber
            where houseNumber.RecId                == flatNumber.House        &&
                  houseNumber.CountryRegion        == country.CountryRegionId &&
                  (! stateId || houseNumber.State == stateId)
        notexists join logisticsPostalAddress
            where logisticsPostalAddress.FlatId_RU == flatNumber.RecId;

        delete_from flatNumber
        exists join houseNumber
            where houseNumber.RecId                == flatNumber.House
        exists join district
            where district.RecId                   == houseNumber.District    &&
                  district.CountryRegionId_RU      == country.CountryRegionId &&
                  (! stateId || district.StateId_RU == stateId)
        notexists join logisticsPostalAddress
            where logisticsPostalAddress.FlatId_RU == flatNumber.RecId;

        delete_from flatNumber
        exists join houseNumber
            where houseNumber.RecId                == flatNumber.House
        exists join district
            where district.RecId                   == houseNumber.District
        exists join city
            where city.RecId                       == district.City           &&
                  city.CountryRegionId             == country.CountryRegionId &&
                  (! stateId || city.StateId == stateId)
        notexists join logisticsPostalAddress
            where logisticsPostalAddress.FlatId_RU == flatNumber.RecId;

        delete_from flatNumber
        exists join houseNumber
            where houseNumber.RecId                == flatNumber.House
        exists join street
            where street.RecId                     == houseNumber.Street      &&
                  street.CountryRegion             == country.CountryRegionId &&
                  (! stateId || street.State == stateId)
        notexists join logisticsPostalAddress
            where logisticsPostalAddress.FlatId_RU == flatNumber.RecId;

        this.progressUpdate();

        // Houses
        /////////////////////////////////////////////////////////////////////
        delete_from houseNumber
            where houseNumber.CountryRegion         == country.CountryRegionId &&
                  (! stateId || houseNumber.State == stateId)
        notexists join logisticsPostalAddress
            where logisticsPostalAddress.HouseId_RU == houseNumber.RecId;

        delete_from houseNumber
        exists join city
            where city.RecId                        == houseNumber.City        &&
                  city.CountryRegionId              == country.CountryRegionId &&
                  (! stateId || city.StateId == stateId)
        notexists join logisticsPostalAddress
            where logisticsPostalAddress.HouseId_RU == houseNumber.RecId;

        delete_from houseNumber
        exists join district
            where district.RecId                    == houseNumber.District    &&
                  district.CountryRegionId_RU       == country.CountryRegionId &&
                  (! stateId || district.StateId_RU == stateId)
        notexists join logisticsPostalAddress
            where logisticsPostalAddress.HouseId_RU == houseNumber.RecId;

        delete_from houseNumber
        exists join district
            where district.RecId                    == houseNumber.District
        exists join city
            where city.RecId                        == district.City           &&
                  city.CountryRegionId              == country.CountryRegionId &&
                  (! stateId || city.StateId == stateId)
        notexists join logisticsPostalAddress
            where logisticsPostalAddress.HouseId_RU == houseNumber.RecId;

        delete_from houseNumber
        exists join street
            where street.RecId                      == houseNumber.Street      &&
                  street.CountryRegion              == country.CountryRegionId &&
                  (! stateId || street.State == stateId)
        notexists join logisticsPostalAddress
            where logisticsPostalAddress.HouseId_RU == houseNumber.RecId;

        this.progressUpdate();

        // Steads
        /////////////////////////////////////////////////////////////////////
        delete_from steadNumber
            where steadNumber.CountryRegion         == country.CountryRegionId &&
                  (! stateId || steadNumber.State == stateId)
        notexists join logisticsPostalAddress
            where logisticsPostalAddress.SteadId_RU == steadNumber.RecId;

        delete_from steadNumber
        exists join city
            where city.RecId                        == steadNumber.City        &&
                  city.CountryRegionId              == country.CountryRegionId &&
                  (! stateId || city.StateId == stateId)
        notexists join logisticsPostalAddress
            where logisticsPostalAddress.SteadId_RU == steadNumber.RecId;

        delete_from steadNumber
        exists join district
            where district.RecId                    == steadNumber.District    &&
                  district.CountryRegionId_RU       == country.CountryRegionId &&
                  (! stateId || district.StateId_RU == stateId)
        notexists join logisticsPostalAddress
            where logisticsPostalAddress.SteadId_RU == steadNumber.RecId;

        delete_from steadNumber
        exists join district
            where district.RecId                    == steadNumber.District
        exists join city
            where city.RecId                        == district.City           &&
                  city.CountryRegionId              == country.CountryRegionId &&
                  (! stateId || city.StateId == stateId)
        notexists join logisticsPostalAddress
            where logisticsPostalAddress.SteadId_RU == steadNumber.RecId;

        delete_from steadNumber
        exists join street
            where street.RecId                      == steadNumber.Street      &&
                  street.CountryRegion              == country.CountryRegionId &&
                  (! stateId || street.State == stateId)
        notexists join logisticsPostalAddress
            where logisticsPostalAddress.SteadId_RU == steadNumber.RecId;

        this.progressUpdate();

        // Streets
        /////////////////////////////////////////////////////////////////////
        delete_from street
            where street.CountryRegion               == country.CountryRegionId &&
                  (! stateId || street.State  == stateId)
        notexists join logisticsPostalAddress
            where logisticsPostalAddress.StreetId_RU == street.RecId;

        delete_from street
        exists join city
            where city.RecId                         == street.City             &&
                  city.CountryRegionId               == country.CountryRegionId &&
                  (! stateId || city.StateId == stateId)
        notexists join logisticsPostalAddress
            where logisticsPostalAddress.StreetId_RU == street.RecId;

        delete_from street
        exists join district
            where district.RecId                     == street.District         &&
                  district.CountryRegionId_RU        == country.CountryRegionId &&
                  (! stateId || district.StateId_RU == stateId)
        notexists join logisticsPostalAddress
            where logisticsPostalAddress.StreetId_RU == street.RecId;

        delete_from street
        exists join district
            where district.RecId                     == street.District
        exists join city
            where city.RecId                         == district.City           &&
                  city.CountryRegionId               == country.CountryRegionId &&
                  (! stateId || city.StateId == stateId)
        notexists join logisticsPostalAddress
            where logisticsPostalAddress.StreetId_RU == street.RecId;

        this.progressUpdate();

        // Zip codes
        /////////////////////////////////////////////////////////////////////
        delete_from zipCode
            where zipCode.CountryRegionId             == country.CountryRegionId &&
                  (! stateId || zipCode.State == stateId)
        notexists join logisticsPostalAddress
            where logisticsPostalAddress.ZipCodeRecId == zipCode.RecId;

        this.progressUpdate();

        // Districts
        /////////////////////////////////////////////////////////////////////
        delete_from district
            where district.CountryRegionId_RU     == country.CountryRegionId &&
                  (! stateId || district.StateId_RU == stateId)
        notexists join logisticsPostalAddress
            where logisticsPostalAddress.District == district.RecId;

        delete_from district
        exists join city
            where city.RecId                      == district.City           &&
                  city.CountryRegionId            == country.CountryRegionId &&
                  (! stateId || city.StateId == stateId)
        notexists join logisticsPostalAddress
            where logisticsPostalAddress.District == district.RecId;

        this.progressUpdate();

        // Cities, counties, states
        /////////////////////////////////////////////////////////////////////
        delete_from city
            where city.CountryRegionId             == country.CountryRegionId &&
                  (! stateId || city.StateId == stateId)
        notexists join logisticsPostalAddress
            where logisticsPostalAddress.CityRecId == city.RecId;

        this.progressUpdate();

        delete_from county
            where county.CountryRegionId           == country.CountryRegionId &&
                  (! stateId || county.StateId == stateId)
        notexists join logisticsPostalAddress
            where logisticsPostalAddress.County    == county.CountyId;

        this.progressUpdate();

        delete_from state
            where state.CountryRegionId            == country.CountryRegionId &&
                  (! stateId || state.StateId == stateId)
        notexists join logisticsPostalAddress
            where logisticsPostalAddress.State     == state.StateId;

        this.progressUpdate();

        // Properties
        //Uses view with query as a DS. Query unions tables with FK of properties table
        /////////////////////////////////////////////////////////////////////
        delete_from properties
            notexists join propertiesNotExists
                where propertiesNotExists.Properties_RU == properties.RecId;

        this.progressUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialogStateId = dialog.addFieldValue(extendedTypeStr(LogisticsAddressStateId), stateId);

        // <RUP>
        dialogCountryRegionId = dialog.addFieldValue(extendedTypeStr(LogisticsAddressCountryRegionId), countryRegionId);
        // </RUP>

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCity</Name>
				<Source><![CDATA[
    private LogisticsAddressCityRecId getCity(
        LogisticsAddressCity _city)
    {
        LogisticsAddressCity  city;
        boolean               existsInDB, forceRefreshCache;
        container             key = [ _city.StateId,
                                      _city.CountyId,
                                      _city.Name ];

        if (! _city.Name)
            return 0;

        if (cityCache.exists(key)) //Exists in cache
        {
            [ city, existsInDB ] = cityCache.lookup(key);
        }
        else
        {
            select firstonly city
                where city.CountryRegionId == _city.CountryRegionId &&
                      city.StateId         == _city.StateId         &&
                      city.CountyId        == _city.CountyId        &&
                      city.Name            == _city.Name;

            existsInDB        = city ? true : false;
            forceRefreshCache = existsInDB;
        }

        return this.appendValues(city, _city, cityCache, key, existsInDB, forceRefreshCache).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCounty</Name>
				<Source><![CDATA[
    private void getCounty(LogisticsAddressCounty _county)
    {
        LogisticsAddressCounty county;
        container              key = [ _county.StateId,
                                       _county.CountyId ];

        if (! _county.CountyId)
            return;

        select firstonly county
            where county.CountryRegionId == _county.CountryRegionId &&
                  county.StateId         == _county.StateId         &&
                  county.CountyId        == _county.CountyId;

        this.appendValues(county,
                          _county,
                          countyCache,
                          key,
                          county ? true : false, // exists in database
                          false);                // force refreshing cache
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDistrict</Name>
				<Source><![CDATA[
    private LogisticsAddressDistrictRecId getDistrict(
        LogisticsAddressDistrict _district)
    {
        LogisticsAddressDistrict district;
        boolean                  existsInDB, forceRefreshCache;
        container                key = [ _district.StateId_RU,
                                         _district.CountyId_RU,
                                         _district.City,
                                         _district.Name ];

        // impossible case, but to prevent data corruption
        if (! _district.StateId_RU  &&
            ! _district.CountyId_RU &&
            ! _district.City)
            return 0;

        if (! _district.Name)
            return 0;

        if (districtCache.exists(key))
        {
            [ district, existsInDB ] = districtCache.lookup(key);
        }
        else
        {
            if (_district.City)
            {
                select firstonly district
                    where district.City     == _district.City &&
                          district.Name     == _district.Name;
            }
            else
            {
                select firstonly district
                    where district.CountryRegionId_RU == _district.CountryRegionId_RU &&
                          district.StateId_RU         == _district.StateId_RU         &&
                          district.CountyId_RU        == _district.CountyId_RU        &&
                          district.City               == _district.City               &&
                          district.Name               == _district.Name;
            }
            existsInDB        = district.RecId ? true : false;
            forceRefreshCache = existsInDB;
        }

        return this.appendValues(district, _district, districtCache, key, existsInDB, forceRefreshCache).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFlat</Name>
				<Source><![CDATA[
    private void getFlat(LogisticsAddressFlatNumber_RU _flat)
    {
        LogisticsAddressFlatNumber_RU flat;
        container                     key = [ _flat.House,
                                              _flat.Name ];

        if (! _flat.Name || ! _flat.House)
            return;

        select firstonly flat
            where flat.House == _flat.House &&
                  flat.Name  == _flat.Name;

        this.appendValues(flat,
                          _flat,
                          flatCache,
                          key,
                          flat ? true : false, // exists in database
                          false);              // force refreshing cache
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        stateId = dialogStateId.value();

        // <RUP>
        countryRegionId = dialogCountryRegionId.value();
        // </RUP>

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHouse</Name>
				<Source><![CDATA[
    private LogisticsAddressHouseId_RU getHouse(
        LogisticsAddressHouseNumber_RU _house)
    {
        LogisticsAddressHouseNumber_RU house;
        boolean                        existsInDB, forceRefreshCache;
        container                      key = [ _house.State,
                                               _house.County,
                                               _house.City,
                                               _house.District,
                                               _house.Street,
                                               _house.Name ];

        // impossible case, but to prevent data corruption
        if (! _house.State    &&
            ! _house.County   &&
            ! _house.City     &&
            ! _house.District &&
            ! _house.Street)
            return 0;

        if (! _house.Name)
            return 0;

        if (houseCache.exists(key)) //Exists in cache
        {
            [ house, existsInDB ] = houseCache.lookup(key);
        }
        else
        {
            select firstonly house
                where house.Street        == _house.Street        &&
                      house.District      == _house.District      &&
                      house.City          == _house.City          &&
                      house.CountryRegion == _house.CountryRegion &&
                      house.State         == _house.State         &&
                      house.County        == _house.County        &&
                      house.Name          == _house.Name;

            existsInDB        = house ? true : false;
            forceRefreshCache = existsInDB;
        }

        return this.appendValues(house, _house, houseCache, key, existsInDB, forceRefreshCache).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProperties</Name>
				<Source><![CDATA[
    private LogisticsAddressPropertiesId_RU getProperties(
        AddrTypeRecId_RU             _addrTypeRecId,
        LogisticsAddressZipCodeRecId _zipCode,
        GniCode_RU                   _gniCode,
        IMNSDistrict_RU              _imnsDistrict,
        OKATO_RU                     _okato,
        AddressObjectStatus_RU       _objectStatus)
    {
        LogisticsAddressProperties_RU properties, tmp;
        boolean                       existsInDB;
        container                     key = [ _addrTypeRecId,
                                              _zipCode,
                                              _gniCode,
                                              _imnsDistrict,
                                              _okato,
                                              _objectStatus ];

        if (propertiesCache.exists(key))
        {
            [ properties, existsInDB ] = propertiesCache.lookup(key);
        }
        else
        {
            tmp.AddressTypeTable_RU = _addrTypeRecId;
            tmp.ZipCode             = _zipCode;
            tmp.GniCode             = _gniCode;
            tmp.imnsDistrict        = _imnsDistrict;
            tmp.okato               = _okato;
            tmp.ObjectStatus        = _objectStatus;

            properties = LogisticsAddressProperties_RU::findProperties(tmp);

            if (properties)
            {
                existsInDB       = true;
            }
            else
            {
                existsInDB       = false;

                properties       = tmp;
                properties.RecId = systemSequence.reserveValues(1, tableNum(LogisticsAddressProperties_RU));
            }

            propertiesCache.insert(key, [ properties, existsInDB ]);
        }

        return properties.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getState</Name>
				<Source><![CDATA[
    private void getState(LogisticsAddressState _state)
    {
        LogisticsAddressState state;
        container             key = [ _state.StateId ];

        select firstonly state
            where state.CountryRegionId == _state.CountryRegionId &&
                  state.StateId         == _state.StateId;

        this.appendValues(state,
                          _state,
                          stateCache,
                          key,
                          state ? true : false, // exists in database
                          false);               // force refreshing cache
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStreet</Name>
				<Source><![CDATA[
    private LogisticsAddressStreetID_RU getStreet(
        LogisticsAddressStreet_RU _street)
    {
        LogisticsAddressStreet_RU street;
        boolean                   existsInDB, forceRefreshCache;
        container                 key = [ _street.State,
                                          _street.County,
                                          _street.City,
                                          _street.District,
                                          _street.Name ];

        // impossible case, but to prevent data corruption
        if (! _street.State  &&
            ! _street.County &&
            ! _street.City   &&
            ! _street.District)
            return 0;

        if (! _street.Name)
            return 0;

        if (streetCache.exists(key)) //Exists in cache
        {
            [ street, existsInDB ] = streetCache.lookup(key);
        }
        else
        {
            select firstonly street
                where street.District      == _street.District      &&
                      street.City          == _street.City          &&
                      street.CountryRegion == _street.CountryRegion &&
                      street.State         == _street.State         &&
                      street.County        == _street.County        &&
                      street.Name          == _street.Name;

            existsInDB        = street ? true : false;
            forceRefreshCache = existsInDB;
        }

        return this.appendValues(street, _street, streetCache, key, existsInDB, forceRefreshCache).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getZip</Name>
				<Source><![CDATA[
    private LogisticsAddressZipCodeRecId getZip(
        LogisticsAddressZipCode _zipCode)
    {
        LogisticsAddressZipCode zipCode;
        container               key = [ _zipCode.ZipCode ];
        boolean                 existsInDB, forceRefreshCache;

        if (! _zipCode.ZipCode)
            return 0;

        if (zipCache.exists(key))
        {
            [ zipCode, existsInDB ] = zipCache.lookup(key);
        }
        else
        {
            zipCode = LogisticsAddressZipCode::findZipCodeCountryRegion(_zipCode.ZipCode,
                                                                        _zipCode.CountryRegionId);
            existsInDB        = zipCode ? true : false;
            forceRefreshCache = existsInDB;
        }

        return this.appendValues(zipCode, _zipCode, zipCache, key, existsInDB, forceRefreshCache).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>importFile_Kladr</Name>
				<Source><![CDATA[
    // For KLADR version 4.0
    #define.AdditionalSteps(20)
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void importFile_Kladr()
    {
        LogisticsAddressZipCode        zipCode;
        LogisticsAddressState          state;
        LogisticsAddressCounty         county;
        LogisticsAddressCity          city;
        LogisticsAddressDistrict       district;
        LogisticsAddressStreet_RU      street;
        LogisticsAddressHouseNumber_RU houseNumber;
        LogisticsAddressFlatNumber_RU  flatNumber;

        str                            tmp_str;
        int                            total;

        LogisticsAddressStateId        tmpState;
        LogisticsAddressCountyId       tmpCounty;
        RefRecId                       tmpCity,
                                       tmpDistrict,
                                       tmpStreet;

        setPrefix("@GlobalAddressBook:ImportOfAddresses");

        this.progressInit("@GlobalAddressBook:Initialize", 4, #AviTransfer);

        tmp_str   = stateId + #percent;
        resultSet = statement.executeQueryWithParameters(stateId ? 'SELECT COUNT(NAME) FROM KLADR' + #WhereCodeLike + tmp_str + #Apostrophe : 'SELECT COUNT(NAME) FROM KLADR', SqlParams::create());
        resultSet.next();
        total = str2int(resultSet.getString(#1));

        this.progressUpdate();

        resultSet = statement.executeQueryWithParameters(stateId ? 'SELECT COUNT(NAME) FROM STREET' + #WhereCodeLike + tmp_str + #Apostrophe : 'SELECT COUNT(NAME) FROM STREET', SqlParams::create());
        resultSet.next();
        total += str2int(resultSet.getString(#1));

        this.progressUpdate();

        resultSet = statement.executeQueryWithParameters(stateId ? 'SELECT COUNT(NAME) FROM DOMA' + #WhereCodeLike + tmp_str + #Apostrophe : 'SELECT COUNT(NAME) FROM DOMA', SqlParams::create());
        resultSet.next();
        total += str2int(resultSet.getString(#1));

        this.progressUpdate();

        resultSet = statement.executeQueryWithParameters(stateId ? 'SELECT COUNT(NAME) FROM FLAT' + #WhereCodeLike + tmp_str + #Apostrophe : 'SELECT COUNT(NAME) FROM FLAT', SqlParams::create());
        resultSet.next();
        total += str2int(resultSet.getString(#1));

        this.progressInit("@GlobalAddressBook:ImportOfAddresses", total + #AdditionalSteps, #AviTransfer);

        try
        {
            ttsbegin;

            this.cleanUpData();

            this.recIdSuspend(true);

            progress.setText("@GlobalAddressBook:ImportOfRegions");

            tmp_str = stateId ? stateId + #Zero11 : #Percent + #Zero11;
            resultSet = statement.executeQueryWithParameters(#KladrSelect + #WhereCodeLike + tmp_str + #Apostrophe, SqlParams::create());
            while (resultSet.next())
            {
                this.progressUpdate();

                state.clear();
                state.CountryRegionId   = country.CountryRegionId;
                state.StateId           = subStr(resultSet.getString(#3), #1, #2);
                state.Name              = resultSet.getString(#1);

                zipCode.clear();
                zipCode.CountryRegionId = state.CountryRegionId;
                zipCode.State           = state.StateId;
                zipCode.ZipCode         = resultSet.getString(#4);

                state.Properties_RU     = this.getProperties(AddressTypeTable_RU::findByName(resultSet.getString(#2), #1).RecId,
                                                             this.getZip(zipCode),
                                                             resultSet.getString(#5),
                                                             resultSet.getString(#6),
                                                             resultSet.getString(#7),
                                                             resultSet.getInt(#8));

                this.getState(state);
            }

            progress.setText("@GlobalAddressBook:ImportOfCounties");

            tmp_str = stateId ? stateId + #Percent + #Zero8 : #Percent + #Zero8;

            resultSet = statement.executeQueryWithParameters(#KladrSelect + #WhereCodeLike + tmp_str + #CodeLike11, SqlParams::create());

            while (resultSet.next())
            {
                this.progressUpdate();

                tmp_str = resultSet.getString(#3);

                county.clear();
                county.CountryRegionId  = country.CountryRegionId;
                county.StateId          = subStr(tmp_str, #1, #2);
                county.CountyId         = subStr(tmp_str, #3, #3);
                county.Name             = resultSet.getString(#1);

                zipCode.clear();
                zipCode.CountryRegionId = county.CountryRegionId;
                zipCode.State           = county.StateId;
                zipCode.County          = county.CountyId;
                zipCode.ZipCode         = resultSet.getString(#4);

                county.Properties_RU    = this.getProperties(AddressTypeTable_RU::findByName(resultSet.getString(#2), #2).RecId,
                                                             this.getZip(zipCode),
                                                             resultSet.getString(#5),
                                                             resultSet.getString(#6),
                                                             resultSet.getString(#7),
                                                             resultSet.getInt(#8));

                this.getCounty(county);
            }

            progress.setText("@GlobalAddressBook:ImportOfTowns");

            tmp_str = stateId ? stateId + #Percent + #Zero5 : #Percent + #Zero5;

            resultSet = statement.executeQueryWithParameters(#KladrSelect + #WhereCodeLike + tmp_str + #CodeLike8, SqlParams::create());

            while (resultSet.next())
            {
                this.progressUpdate();

                tmp_str = resultSet.getString(#3);

                city.clear();
                city.CountryRegionId = country.CountryRegionId;
                city.StateId         = subStr(tmp_str, #1, #2);
                city.CountyId        = this.replaceZero(subStr(tmp_str, #3, #3));
                city.Name            = subStr(tmp_str, #6, #3);
                city.Description     = resultSet.getString(#1);

                zipCode.clear();
                zipCode.CountryRegionId = city.CountryRegionId;
                zipCode.State           = city.StateId;
                zipCode.County          = city.CountyId;
                zipCode.ZipCode         = resultSet.getString(#4);

                city.Properties_RU      = this.getProperties(AddressTypeTable_RU::findByName(resultSet.getString(#2), #3).RecId,
                                                             this.getZip(zipCode),
                                                             resultSet.getString(#5),
                                                             resultSet.getString(#6),
                                                             resultSet.getString(#7),
                                                             resultSet.getInt(#8));

                this.getCity(city);
            }

            progress.setText("@GlobalAddressBook:ImportOfSettlements");

            tmp_str = stateId ? stateId + #Percent + #Zero2 : #Percent + #Zero2;

            resultSet = statement.executeQueryWithParameters(#KladrSelect + #WhereCodeLike + tmp_str + #CodeLike5, SqlParams::create());

            while (resultSet.next())
            {
                this.progressUpdate();

                tmp_str = resultSet.getString(#3);

                district.clear();
                district.CountryRegionId_RU = country.CountryRegionId;
                district.StateId_RU         = subStr(tmp_str, #1, #2);
                district.CountyId_RU        = this.replaceZero(subStr(tmp_str, #3, #3));

                city.clear();
                city.CountryRegionId        = district.CountryRegionId_RU;
                city.StateId                = district.StateId_RU;
                city.CountyId               = district.CountyId_RU;
                city.Name                   = this.replaceZero(subStr(tmp_str, #6, #3));
                district.City               = this.getCity(city);

                district.Name               = subStr(tmp_str, #9, #3);
                district.Description        = resultSet.getString(#1);

                zipCode.clear();
                zipCode.CountryRegionId     = district.CountryRegionId_RU;
                zipCode.State               = district.StateId_RU;
                zipCode.County              = district.CountyId_RU;
                zipCode.CityRecId           = district.City;
                zipCode.ZipCode             = resultSet.getString(#4);
                district.Properties_RU      = this.getProperties(AddressTypeTable_RU::findByName(resultSet.getString(#2), #4).RecId,
                                                                 this.getZip(zipCode),
                                                                 resultSet.getString(#5),
                                                                 resultSet.getString(#6),
                                                                 resultSet.getString(#7),
                                                                 resultSet.getInt(#8));

                this.getDistrict(district);
            }

            progress.setText("@GlobalAddressBook:ImportOfStreets");

            tmp_str = stateId ? stateId + #Percent + #Zero2 : #Percent + #Zero2;

            resultSet = statement.executeQueryWithParameters(#StreetSelect + tmp_str + #Apostrophe, SqlParams::create());

            while (resultSet.next())
            {
                this.progressUpdate();

                tmp_str = resultSet.getString(#3);

                zipCode.clear();
                zipCode.CountryRegionId     = country.CountryRegionId;
                zipCode.State               = subStr(tmp_str, #1, #2);
                zipCode.County              = this.replaceZero(subStr(tmp_str, #3, #3));

                city.clear();
                city.CountryRegionId        = zipCode.CountryRegionId;
                city.StateId                = zipCode.State;
                city.CountyId               = zipCode.County;
                city.Name                   = this.replaceZero(subStr(tmp_str, #6, #3));
                zipCode.CityRecId           = this.getCity(city);

                district.clear();
                district.CountryRegionId_RU = zipCode.CountryRegionId;
                district.StateId_RU         = zipCode.State;
                district.CountyId_RU        = zipCode.County;
                district.City               = zipCode.CityRecId;
                district.Name               = this.replaceZero(subStr(tmp_str, #9, #3));
                zipCode.District            = this.getDistrict(district);

                zipCode.StreetName          = resultSet.getString(#1);
                zipCode.ZipCode             = resultSet.getString(#4);

                street.clear();
                street.CountryRegion        = zipCode.CountryRegionId;
                street.State                = zipCode.State;
                street.County               = zipCode.County;
                street.City                 = zipCode.CityRecId;
                street.District             = zipCode.District;
                street.Name                 = subStr(tmp_str, #12, #4);
                street.Description          = zipCode.StreetName;
                street.Properties           = this.getProperties(AddressTypeTable_RU::findByName(resultSet.getString(#2), #5).RecId,
                                                                 this.getZip(zipCode),
                                                                 resultSet.getString(#5),
                                                                 resultSet.getString(#6),
                                                                 resultSet.getString(#7),
                                                                 AddressObjectStatus_RU::NotCapital);
                this.getStreet(street);
            }

            progress.setText("@GlobalAddressBook:ImportOfHouses");

            tmp_str = stateId ? stateId + #Percent : #Percent;

            resultSet = statement.executeQueryWithParameters(#DomaSelect + tmp_str + #Apostrophe, SqlParams::create());

            while (resultSet.next())
            {
                this.progressUpdate();

                tmp_str = resultSet.getString(#4);

                houseNumber.clear();
                houseNumber.CountryRegion       = country.CountryRegionId;
                houseNumber.State               = subStr(tmp_str, #1, #2);
                houseNumber.County              = this.replaceZero(subStr(tmp_str, #3, #3));

                city.clear();
                city.CountryRegionId            = houseNumber.CountryRegion;
                city.StateId                    = houseNumber.State;
                city.CountyId                   = houseNumber.County;
                city.Name                       = this.replaceZero(subStr(tmp_str, #6, #3));
                houseNumber.City                = this.getCity      (city);

                district.clear();
                district.CountryRegionId_RU     = houseNumber.CountryRegion;
                district.StateId_RU             = houseNumber.State;
                district.CountyId_RU            = houseNumber.County;
                district.City                   = houseNumber.City;
                district.Name                   = this.replaceZero(subStr(tmp_str, #9, #3));
                houseNumber.District            = this.getDistrict  (district);

                street.clear();
                street.CountryRegion            = houseNumber.CountryRegion;
                street.State                    = houseNumber.State;
                street.County                   = houseNumber.County;
                street.City                     = houseNumber.City;
                street.District                 = houseNumber.District;
                street.Name                     = this.replaceZero2(subStr(tmp_str, #12, #4));
                houseNumber.Street              = this.getStreet    (street);

                houseNumber.Name                = subStr(tmp_str, #16, #4);
                houseNumber.HouseDescription    = resultSet.getString(#1);
                houseNumber.BuildingDescription = resultSet.getString(#2);

                zipCode.clear();
                zipCode.CountryRegionId         = houseNumber.CountryRegion;
                zipCode.State                   = houseNumber.State;
                zipCode.County                  = houseNumber.County;
                zipCode.CityRecId               = houseNumber.City;
                zipCode.District                = houseNumber.District;
                zipCode.ZipCode                 = resultSet.getString(#5);

                houseNumber.Properties          = this.getProperties(AddressTypeTable_RU::findByName(resultSet.getString(#3), #6).RecId,
                                                                     this.getZip(zipCode),
                                                                     resultSet.getString(#6),
                                                                     resultSet.getString(#7),
                                                                     resultSet.getString(#8),
                                                                     AddressObjectStatus_RU::NotCapital);

                this.getHouse(houseNumber);
            }

            progress.setText("@GlobalAddressBook:ImportOfFlats");

            tmp_str = stateId ? stateId + #Percent : #Percent;

            resultSet = statement.executeQueryWithParameters(#FlatSelect + tmp_str + #Apostrophe, SqlParams::create());

            while (resultSet.next())
            {
                this.progressUpdate();

                tmp_str = resultSet.getString(#2);

                tmpState                        = subStr(tmp_str, #1, #2);
                tmpCounty                       = this.replaceZero(subStr(tmp_str, #3, #3));

                city.clear();
                city.CountryRegionId            = country.CountryRegionId;
                city.StateId                    = tmpState;
                city.CountyId                   = tmpCounty;
                city.Name                       = this.replaceZero(subStr(tmp_str, #6, #3));
                tmpCity                         = this.getCity       (city);

                district.clear();
                district.CountryRegionId_RU     = country.CountryRegionId;
                district.StateId_RU             = tmpState;
                district.CountyId_RU            = tmpCounty;
                district.City                   = tmpCity;
                district.Name                   = this.replaceZero(subStr(tmp_str, #9, #3));
                tmpDistrict                     = this.getDistrict   (district);

                street.clear();
                street.CountryRegion            = country.CountryRegionId;
                street.State                    = tmpState;
                street.County                   = tmpCounty;
                street.City                     = tmpCity;
                street.District                 = tmpDistrict;
                street.Name                     = this.replaceZero2(subStr(tmp_str, #12, #4));
                tmpStreet                       = this.getStreet     (street);

                houseNumber.clear();
                houseNumber.CountryRegion       = country.CountryRegionId;
                houseNumber.State               = tmpState;
                houseNumber.County              = tmpCounty;
                houseNumber.City                = tmpCity;
                houseNumber.District            = tmpDistrict;
                houseNumber.Street              = tmpStreet;
                houseNumber.Name                = this.replaceZero(subStr(tmp_str, #16, #4));

                flatNumber.clear();
                flatNumber.House                = this.getHouse(houseNumber);
                flatNumber.Name                 = subStr(tmp_str, #20, #4);
                flatNumber.Description          = resultSet.getString(#1);

                zipCode.clear();
                zipCode.CountryRegionId         = houseNumber.CountryRegion;
                zipCode.State                   = houseNumber.State;
                zipCode.County                  = houseNumber.County;
                zipCode.CityRecId               = houseNumber.City;
                zipCode.District                = houseNumber.District;
                zipCode.ZipCode                 = resultSet.getString(#3);

                flatNumber.Properties           = this.getProperties(0,
                                                                     this.getZip(zipCode),
                                                                     resultSet.getString(#4),
                                                                     resultSet.getString(#5),
                                                                     '',
                                                                     AddressObjectStatus_RU::NotCapital);

                flatNumber.Entrance             = resultSet.getString(#6);

                this.getFlat(flatNumber);
            }

            this.saveFromLists();

            this.updateZipCodes();

            this.recIdSuspend(false);

            ttscommit;

            info("@GlobalAddressBook:DataHasBeenLoadedSuccessfully");
        }

        catch (Exception::Error)
        {
            this.recIdSuspend(false);

            error("@SYS96977");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        List fieldsList;

        super();

        select firstonly country
            where country.isOcode == #isoRU;

        if (!country)
        {
            throw error(strFmt("@GlobalAddressBook:RecordWithISOCode1IsNotFoundInTable2ImportFailed", #isoRU, tableStr(LogisticsAddressCountryRegion)));
        }

        // Records cache; [ natural key ] --> [ record, boolean 'exists in database' ]
        stateCache      = new Map(Types::Container, Types::Container);
        countyCache     = new Map(Types::Container, Types::Container);
        zipCache        = new Map(Types::String,    Types::Container);
        propertiesCache = new Map(Types::Container, Types::Container);
        cityCache       = new Map(Types::Container, Types::Container);
        districtCache   = new Map(Types::Container, Types::Container);
        streetCache     = new Map(Types::Container, Types::Container);
        houseCache      = new Map(Types::Container, Types::Container);
        steadCache      = new Map(Types::Container, Types::Container);
        flatCache       = new Map(Types::Container, Types::Container);

        // Fields cache; table ID --> list of field IDs
        fieldsCache = new Map(Types::Int64, Types::Class);

        fieldsList = new List(Types::Int64);
        fieldsList.addEnd(fieldNum(LogisticsAddressState, Name));
        fieldsList.addEnd(fieldNum(LogisticsAddressState, Properties_RU));
        fieldsCache.insert(tableNum(LogisticsAddressState), fieldsList);

        fieldsList = new List(Types::Int64);
        fieldsList.addEnd(fieldNum(LogisticsAddressCounty, Name));
        fieldsList.addEnd(fieldNum(LogisticsAddressCounty, Properties_RU));
        fieldsCache.insert(tableNum(LogisticsAddressCounty), fieldsList);

        fieldsList = new List(Types::Int64);
        fieldsList.addEnd(fieldNum(LogisticsAddressZipCode, State));
        fieldsList.addEnd(fieldNum(LogisticsAddressZipCode, County));
        fieldsList.addEnd(fieldNum(LogisticsAddressZipCode, CityRecId));
        fieldsList.addEnd(fieldNum(LogisticsAddressZipCode, District));
        fieldsList.addEnd(fieldNum(LogisticsAddressZipCode, StreetName));
        fieldsCache.insert(tableNum(LogisticsAddressZipCode), fieldsList);

        fieldsList = new List(Types::Int64);
        fieldsList.addEnd(fieldNum(LogisticsAddressCity, Name));
        fieldsList.addEnd(fieldNum(LogisticsAddressCity, Description));
        fieldsList.addEnd(fieldNum(LogisticsAddressCity, StateId));
        fieldsList.addEnd(fieldNum(LogisticsAddressCity, CountyId));
        fieldsList.addEnd(fieldNum(LogisticsAddressCity, Properties_RU));
        fieldsCache.insert(tableNum(LogisticsAddressCity), fieldsList);

        fieldsList = new List(Types::Int64);
        fieldsList.addEnd(fieldNum(LogisticsAddressDistrict, Name));
        fieldsList.addEnd(fieldNum(LogisticsAddressDistrict, Description));
        fieldsList.addEnd(fieldNum(LogisticsAddressDistrict, Properties_RU));
        fieldsCache.insert(tableNum(LogisticsAddressDistrict), fieldsList);

        fieldsList = new List(Types::Int64);
        fieldsList.addEnd(fieldNum(LogisticsAddressStreet_RU, Name));
        fieldsList.addEnd(fieldNum(LogisticsAddressStreet_RU, Description));
        fieldsList.addEnd(fieldNum(LogisticsAddressStreet_RU, Properties));
        fieldsCache.insert(tableNum(LogisticsAddressStreet_RU), fieldsList);

        fieldsList = new List(Types::Int64);
        fieldsList.addEnd(fieldNum(LogisticsAddressHouseNumber_RU, Name));
        fieldsList.addEnd(fieldNum(LogisticsAddressHouseNumber_RU, HouseDescription));
        fieldsList.addEnd(fieldNum(LogisticsAddressHouseNumber_RU, BuildingDescription));
        fieldsList.addEnd(fieldNum(LogisticsAddressHouseNumber_RU, Properties));
        fieldsCache.insert(tableNum(LogisticsAddressHouseNumber_RU), fieldsList);

        fieldsList = new List(Types::Int64);
        fieldsList.addEnd(fieldNum(LogisticsAddressSteadNumber_RU, Name));
        fieldsList.addEnd(fieldNum(LogisticsAddressSteadNumber_RU, SteadDescription));
        fieldsList.addEnd(fieldNum(LogisticsAddressSteadNumber_RU, BuildingDescription));
        fieldsList.addEnd(fieldNum(LogisticsAddressSteadNumber_RU, Properties));
        fieldsCache.insert(tableNum(LogisticsAddressSteadNumber_RU), fieldsList);

        fieldsList = new List(Types::Int64);
        fieldsList.addEnd(fieldNum(LogisticsAddressFlatNumber_RU, Description));
        fieldsList.addEnd(fieldNum(LogisticsAddressFlatNumber_RU, Entrance));
        fieldsList.addEnd(fieldNum(LogisticsAddressFlatNumber_RU, Properties));
        fieldsCache.insert(tableNum(LogisticsAddressFlatNumber_RU), fieldsList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [ #CurrentVersion, #CurrentList ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCountryRegionId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LogisticsAddressCountryRegionId parmCountryRegionId(LogisticsAddressCountryRegionId _countryRegionId = countryRegionId)
    {
        if (_countryRegionId)
        {
            select firstonly country
                where country.CountryRegionId == _countryRegionId;

            countryRegionId = _countryRegionId;
        }

        return countryRegionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readFile</Name>
				<Source><![CDATA[
    protected void readFile()
    {
        super();

        this.importFile_KladrAbbreviations();

        // Renew the statement as this one has already been used in the call to importFile_KladrAbbreviations method.
        statement  = connection.createStatement();

        this.importFile_Kladr();
    }

]]></Source>
			</Method>
			<Method>
				<Name>recIdSuspend</Name>
				<Source><![CDATA[
    private void recIdSuspend(boolean _suspend)
    {
        container tables = [ tableNum(LogisticsAddressZipCode),
                             tableNum(LogisticsAddressState),
                             tableNum(LogisticsAddressCounty),
                             tableNum(LogisticsAddressCity),
                             tableNum(LogisticsAddressDistrict),
                             tableNum(LogisticsAddressStreet_RU),
                             tableNum(LogisticsAddressHouseNumber_RU),
                             tableNum(LogisticsAddressSteadNumber_RU),
                             tableNum(LogisticsAddressFlatNumber_RU ),
                             tableNum(LogisticsAddressProperties_RU) ];
        int       idx;

        if (! systemSequence)
        {
            systemSequence = new systemSequence();
        }

        for (idx = 1; idx <= conLen(tables); idx ++)
        {
            if (_suspend)
            {
                systemSequence.suspendRecIds        (conPeek(tables, idx));
            }
            else
            {
                systemSequence.removeRecIdSuspension(conPeek(tables, idx));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>replaceZero</Name>
				<Source><![CDATA[
    private str replaceZero(str _value)
    {
        if (_value == #emptyAddressElement)
            return '';

        return _value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>replaceZero2</Name>
				<Source><![CDATA[
    private str replaceZero2(str _value)
    {
        if (_value == #emptyAddressStreet)
            return '';

        return _value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveFromCache</Name>
				<Source><![CDATA[
    private void saveFromCache(Map              _cache,
                               tableId          _tableId)
    {
        MapEnumerator    enumerator = _cache.getEnumerator();
        Common           record;
        boolean          existsInDB;
        RecordInsertList list = new RecordInsertList(_tableId, true, true, true, false, true);

        while (enumerator.moveNext())
        {
            [ record, existsInDB ] = enumerator.currentValue();

            if (! existsInDB)
            {
                list.add(record);
            }
        }

        list.insertDatabase();

        this.progressUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveFromLists</Name>
				<Source><![CDATA[
    private void saveFromLists()
    {
        this.saveFromCache(stateCache,      tableNum(LogisticsAddressState));
        this.saveFromCache(countyCache,     tableNum(LogisticsAddressCounty));
        this.saveFromCache(zipCache,        tableNum(LogisticsAddressZipCode));
        this.saveFromCache(propertiesCache, tableNum(LogisticsAddressProperties_RU));
        this.saveFromCache(cityCache,       tableNum(LogisticsAddressCity));
        this.saveFromCache(districtCache,   tableNum(LogisticsAddressDistrict));
        this.saveFromCache(streetCache,     tableNum(LogisticsAddressStreet_RU));
        this.saveFromCache(houseCache,      tableNum(LogisticsAddressHouseNumber_RU));
        this.saveFromCache(steadCache,      tableNum(LogisticsAddressSteadNumber_RU));
        this.saveFromCache(flatCache,       tableNum(LogisticsAddressFlatNumber_RU));
    }

]]></Source>
			</Method>
			<Method>
				<Name>skip</Name>
				<Source><![CDATA[
    private void skip(Common _common)
    {
        _common.skipDatabaseLog(true);
        _common.skipDataMethods(true);
        _common.skipDeleteActions(true);
        _common.skipEvents(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = conPeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [ version, #CurrentList ] = _packedClass;
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRecordDiff</Name>
				<Source><![CDATA[
    private boolean updateRecordDiff(
        List   _fields,
        Common _record,
        Common _newValues)
    {
        ListEnumerator enumerator = _fields.getEnumerator();
        fieldId        fieldId;
        boolean        ret;

        while (enumerator.moveNext())
        {
            fieldId = enumerator.current();

            if (_newValues.(fieldId) && _newValues.(fieldId) != _record.(fieldId))
            {
                ret = true;

                _record.(fieldId) = _newValues.(fieldId);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateZipCodes</Name>
				<Source><![CDATA[
    private void updateZipCodes()
    {
        LogisticsAddressZipCode        zipCode;
        LogisticsAddressCounty         county;
        LogisticsAddressCity          city;
        LogisticsAddressDistrict       district;
        LogisticsAddressStreet_RU      street;
        LogisticsAddressProperties_RU  properties;

        boolean                        update;

        this.skip(zipCode);

        while select forupdate zipCode
            where zipCode.CountryRegionId == country.CountryRegionId &&
                  (! stateId || zipCode.State == stateId)            &&
                  (zipCode.County    ||
                   zipCode.CityRecId ||
                   zipCode.District  ||
                   zipCode.StreetName)
        {
            update = false;

            if (zipCode.StreetName)
            {
                select count(RecId) from street
                exists join properties
                    where street.Properties      == properties.RecId &&
                          properties.ZipCode     == zipCode.RecId;

                if (street.RecId > 1)
                {
                    zipCode.StreetName  = '';
                    update              = true;
                }
            }

            if (  zipCode.District &&
                ! zipCode.StreetName)
            {
                select firstonly RecId from district
                    where district.RecId         != zipCode.District
                exists join properties
                    where district.Properties_RU == properties.RecId &&
                          properties.ZipCode     == zipCode.RecId;

                if (district.RecId)
                {
                    zipCode.District    = 0;
                    update              = true;
                }
            }

            if (  zipCode.CityRecId &&
                ! zipCode.District  &&
                ! zipCode.StreetName)
            {
                select firstonly RecId from city
                    where city.RecId             != zipCode.CityRecId
                exists join properties
                    where city.Properties_RU     == properties.RecId &&
                          properties.ZipCode     == zipCode.RecId;

                if (city.RecId)
                {
                    zipCode.CityRecId   = 0;
                    update              = true;
                }
            }

            if (  zipCode.County    &&
                ! zipCode.CityRecId &&
                ! zipCode.District  &&
                ! zipCode.StreetName)
            {
                select firstonly RecId from county
                    where county.CountyId        != zipCode.County
                exists join properties
                    where county.Properties_RU   == properties.RecId &&
                          properties.ZipCode     == zipCode.RecId;

                if (county.RecId)
                {
                    zipCode.County      = '';
                    update              = true;
                }
            }

            if (update)
            {
                zipCode.doUpdate();
            }
        }

        this.progressUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates import of addresses
    /// </summary>
    /// <param name="_calledFrom">
    /// The object or form which calls the method
    /// </param>
    /// <returns>
    /// Returns true if super class returns true and method checkAddressFormat returns true
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = super(_calledFrom);

        ret = this.checkAddressFormat() && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static AddressCodeImport_RU construct()
    {
        return new AddressCodeImport_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns label - description of <c>AddressCodeImport_RU</c> class
    /// </summary>
    /// <returns>
    /// Returns string type value
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static Name description()
    {
        return "@GlobalAddressBook:ImportOfData";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        AddressCodeImport_RU import = AddressCodeImport_RU::construct();

        if (import.prompt())
        {
            // <RUP>
            import.parmCountryRegionId(import.parmCountryRegionId());
            // </RUP>

            import.runOperation();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>