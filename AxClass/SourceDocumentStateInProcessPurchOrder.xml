<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SourceDocumentStateInProcessPurchOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SourceDocumentStateInProcessPurchOrder</c> class is an in-process source document state for
/// a purchase order.
/// </summary>
[
    SourceDocumentClassExtensionAttribute(tableStr(PurchTable))
]
public class SourceDocumentStateInProcessPurchOrder extends SourceDocumentStateInProcess
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>areAllAccountsFullyQualified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether all accounting distributions have valid ledger accounts.
    /// </summary>
    /// <returns>
    /// true if all accounting distributions have valid ledger accounts; otherwise, false.
    /// </returns>
    protected boolean areAllAccountsFullyQualified()
    {
        boolean areAllAccountsFullyQualified;

        areAllAccountsFullyQualified = SourceDocumentProvider::areSourceDocAccDistAccountValid(sourceDocumentHeader, true, true);

        return areAllAccountsFullyQualified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canTransition</Name>
				<Source><![CDATA[
    protected boolean canTransition()
    {
        boolean areAllAccountsFullyQualified;
        boolean canTransition;

        canTransition = super();

        if (canTransition &&
            targetSourceDocumentAccountingStatus == SourceDocumentAccountingStatus::Completed &&
            PurchTable::mustValidateAllAccountsFullyQualified())
        {
            areAllAccountsFullyQualified = this.areAllAccountsFullyQualified();

            if (!areAllAccountsFullyQualified)
            {
                canTransition = false;
                info("@SYS340058");
            }
        }

        return canTransition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStateContainerValuesToNullForProcessedLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method clears the source document state line state container field to null after processing of document
    /// </summary>
    protected void updateStateContainerValuesToNullForProcessedLine()
    {
        SourceDocumentLine  sourceDocumentLine;
        
        sourceDocumentLine.skipDataMethods(true);
        sourceDocumentLine.skipBusinessEvents(true);
        sourceDocumentLine.skipEvents(true);

        update_recordSet SourceDocumentLine
            setting StateContainer = conNull()
        where sourceDocumentLine.SourceDocumentHeader == sourceDocumentHeader.RecId &&
            sourceDocumentLine.StateContainer !=  conNull() &&
            (sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::Finalized ||
            sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::Canceled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBusinessEvent</Name>
				<Source><![CDATA[
    protected BusinessEventsBase getBusinessEvent()
    {
        PurchaseOrderConfirmedBusinessEvent businessEvent;
        
        if (targetSourceDocumentAccountingStatus == SourceDocumentAccountingStatus::Completed)
        {
            PurchTable purchTable = PurchTable::findSourceDocumentHeader(sourceDocumentHeader.RecId);
            VendPurchOrderJour vendPurchOrderJour = VendPurchOrderJour::findByPurchId(purchTable.PurchId);

            businessEvent = PurchaseOrderConfirmedBusinessEvent::construct(vendPurchOrderJour, purchTable);
        }

        return businessEvent;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>