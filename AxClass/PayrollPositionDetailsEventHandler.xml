<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollPositionDetailsEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles events for the <c>PayrollPositionDetailsEventHandler</c> table.
/// </summary>
public final class PayrollPositionDetailsEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>PayrollPositionDetails_onInserting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verify that the record can be inserted into <c>PayrollPositionDetail</c>.
    /// </summary>
    /// <param name="_sender">The instance of the <c>PayrollPositionDetail</c></param>
    /// <param name="_e">The instance of the <c>DataEventArgs</c>.</param>
    [DataEventHandler(tableStr(PayrollPositionDetails), DataEventType::Inserting)]
    public static void PayrollPositionDetails_onInserting(Common _sender, DataEventArgs _e)
    {
        PayrollPositionDetails payrollEarningCode = _sender as PayrollPositionDetails;
        date currentDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());

        boolean canUpdateOrDelete = payrollEarningCode.canUpdateOrDeletePositionDetail(currentDate, maxDate());

        if (!canUpdateOrDelete)
        {
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PayrollPositionDetails_onInserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the <c>PayrollWorkerTaxRegion</c> when the record is inserted.
    /// </summary>
    /// <param name="_sender">The instance of the <c>PayrollPositionDetail</c></param>
    /// <param name="_e">The instance of the <c>DataEventArgs</c>.</param>
    [DataEventHandler(tableStr(PayrollPositionDetails), DataEventType::Inserted)]
    public static void PayrollPositionDetails_onInserted(Common _sender, DataEventArgs _e)
    {
        PayrollPositionDetails payrollEarningCode = _sender as PayrollPositionDetails;
        
        // Refresh the worker tax regions for all workers ever assigned to this position
        PayrollWorkerTaxRegion::refreshTaxRegionsForPosition(payrollEarningCode.Position);
    }

]]></Source>
			</Method>
			<Method>
				<Name>PayrollPositionDetails_onModifiedFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modify a specified field.
    /// </summary>
    /// <param name="_sender">The instance of the <c>PayrollPositionDetail</c></param>
    /// <param name="_e">The instance of the <c>DataEventArgs</c>.</param>
    [DataEventHandler(tableStr(PayrollPositionDetails), DataEventType::ModifiedFieldValue)]
    public static void PayrollPositionDetails_onModifiedFieldValue(Common _sender, DataEventArgs _e)
    {
        PayrollPositionDetails payrollEarningCode = _sender as PayrollPositionDetails;
        ModifyFieldValueEventArgs modifyFieldValueEvent = _e as ModifyFieldValueEventArgs;

        switch (modifyFieldValueEvent.parmFieldName())
        {
            case fieldStr(PayrollPositionDetails, PaidByLegalEntity):
                if (payrollEarningCode.Schedule)
                {
                    boolean resetSchedule = false;

                    if (payrollEarningCode.PaidByLegalEntity != payrollEarningCode.orig().PaidByLegalEntity)
                    {
                        resetSchedule = true;
                    }
                    else
                    {
                        // This is to cover when a LE is switched but not saved and the Schedule field was set per LE,
                        // and then switched back to the original LE, the Schedule needs to be reset.
                        changecompany(CompanyInfo::getDataArea(payrollEarningCode.PaidByLegalEntity))
                        {
                            resetSchedule = !WorkCalendarTable::checkExist(payrollEarningCode.Schedule);
                        }
                    }

                    if (resetSchedule)
                    {
                        info("@Payroll:TheCalendarInTheScheduleFieldWasRemovedBecauseYouChangedTheL");
                        payrollEarningCode.Schedule = "";
                        payrollEarningCode.ScheduleDataAreaId = "";

                        if (FormDataUtil::isFormDataSource(payrollEarningCode))
                        {
                            FormDataUtil::getFormDataSource(payrollEarningCode).refresh();
                        }
                    }
                }
                break;

            case fieldStr(PayrollPositionDetails, Schedule):
                if (payrollEarningCode.Schedule && payrollEarningCode.PaidByLegalEntity)
                {
                    payrollEarningCode.ScheduleDataAreaId = CompanyInfo::getDataArea(payrollEarningCode.PaidByLegalEntity);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PayrollPositionDetails_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refresh the <c>PayrollWorkerTaxRegion</c> data whe the PaidByLegalEntity changes.
    /// </summary>
    /// <param name="_sender">The instance of the <c>PayrollPositionDetail</c></param>
    /// <param name="_e">The instance of the <c>DataEventArgs</c>.</param>
    [DataEventHandler(tableStr(PayrollPositionDetails), DataEventType::Updated)]
    public static void PayrollPositionDetails_onUpdated(Common _sender, DataEventArgs _e)
    {
        PayrollPositionDetails payrollEarningCode = _sender as PayrollPositionDetails;

        LegalEntityRecId originalLegalEntityRecId = payrollEarningCode.orig().PaidByLegalEntity;

        // Determine if the LE has changed, and if so, refresh the worker tax regions for
        // all workers that have or will ever be assigned to this position
        if (payrollEarningCode.PaidByLegalEntity != originalLegalEntityRecId)
        {
            PayrollWorkerTaxRegion::refreshTaxRegionsForPosition(payrollEarningCode.Position);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PayrollPositionDetails_onValidatingDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verify the <c>PayrollPositionDetail</c> record doesn't have any constraints and is able to be deleted.
    /// </summary>
    /// <param name="_sender">The instance of the <c>PayrollPositionDetail</c></param>
    /// <param name="_e">The instance of the <c>DataEventArgs</c>.</param>
    [DataEventHandler(tableStr(PayrollPositionDetails), DataEventType::ValidatingDelete)]
    public static void PayrollPositionDetails_onValidatingDelete(Common _sender, DataEventArgs _e)
    {
        PayrollPositionDetails payrollEarningCode = _sender as PayrollPositionDetails;
        ValidateEventArgs validateEventArgs = _e as ValidateEventArgs;

        boolean isValid = validateEventArgs.parmValidateResult();

        if (isValid && !payrollEarningCode.canUpdateOrDeletePositionDetail(payrollEarningCode.ValidFrom, payrollEarningCode.ValidTo))
        {
            isValid = false;
        }

        validateEventArgs.parmValidateResult(isValid);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>