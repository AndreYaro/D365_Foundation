<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkInventoryTransactionQueryByInventTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkInventoryTransactionQueryByInventTrans</c> is an implementation of the <c>WHSWorkInventoryTransactionIQuery</c> interface
/// based on the inventory transactions. I.e. it reads information from the <c>InventTrans</c> table.
/// </summary>
internal final class WHSWorkInventoryTransactionQueryByInventTrans implements WHSWorkInventoryTransactionIQuery
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>registeredIssueByWorkLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSWorkInventoryTransactionDescriptor registeredIssueByWorkLine(WHSWorkId _workId, LineNum _lineNum, WHSWorkInventoryTransactionQueryParameters _queryParameters)
    {
        WHSWorkInventoryTransactionDescriptor inventoryTransactionDescriptor = WHSWorkInventoryTransactionDescriptor::construct();

        WHSWorkInventTrans workInventTrans;
        InventTransOrigin inventTransOrigin;
        InventTrans inventTrans;
        InventDim inventDim;

        SysDaQueryObject queryObject = this.buildRegisteredIssueByWorkLineQuery(
            _workId,
            _lineNum,
            workInventTrans,
            inventTransOrigin,
            inventTrans,
            _queryParameters);

        queryObject.firstOnlyHint = _queryParameters.parmFirstOnly();

        SysDaSearchObject searchObject = new SysDaSearchObject(queryObject);
        SysDaSearchStatement statement = new SysDaSearchStatement();
        
        boolean includeWorkInventTransRecId = _queryParameters.parmIncludeWorkInventTransRecId();

        while (statement.next(searchObject))
        {
            inventoryTransactionDescriptor.add(this.constructInventoryTransactionDescriptorElement(
                workInventTrans,
                inventTrans,
                includeWorkInventTransRecId));
        }

        return inventoryTransactionDescriptor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registeredReceiptByWorkLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSWorkInventoryTransactionDescriptor registeredReceiptByWorkLine(WHSWorkId _workId, LineNum _lineNum, WHSWorkInventoryTransactionQueryParameters _queryParameters)
    {
        WHSWorkInventoryTransactionDescriptor inventoryTransactionDescriptor = WHSWorkInventoryTransactionDescriptor::construct();

        WHSWorkInventTrans workInventTrans;
        InventTransOrigin inventTransOrigin;
        InventTrans inventTrans;
        InventDim inventDim;

        SysDaQueryObject queryObject = this.buildRegisteredReceiptByWorkLineQuery(
            _workId,
            _lineNum,
            workInventTrans,
            inventTransOrigin,
            inventTrans,
            _queryParameters);

        queryObject.firstOnlyHint = _queryParameters.parmFirstOnly();

        SysDaSearchObject searchObject = new SysDaSearchObject(queryObject);
        SysDaSearchStatement statement = new SysDaSearchStatement();

        boolean includeWorkInventTransRecId = _queryParameters.parmIncludeWorkInventTransRecId();
        
        while (statement.next(searchObject))
        {
            inventoryTransactionDescriptor.add(this.constructInventoryTransactionDescriptorElement(
                workInventTrans,
                inventTrans,
                includeWorkInventTransRecId));
        }

        return inventoryTransactionDescriptor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructInventoryTransactionDescriptorElement</Name>
				<Source><![CDATA[
    private WHSWorkInventoryTransactionDescriptorElement constructInventoryTransactionDescriptorElement(
        WHSWorkInventTrans _workInventTrans,
        InventTrans _inventTrans,
        boolean _includeWorkInventTransRecId)
    {
        WHSInventoryTransactionHandlingQty handlingQty;
        WHSInventoryTransactionHandlingWeight handlingWeight;

        [handlingQty, handlingWeight] = WHSInventoryTransactionQuantityFormatConverter::convertFromCwFormatToWarehouseHandlingFormat(
            _workInventTrans.ItemId,
            abs(_inventTrans.Qty),
            abs(_inventTrans.PdsCWQty));

        return WHSWorkInventoryTransactionDescriptorElement::newFromValues(
            _workInventTrans.ItemId,
            handlingQty,
            handlingWeight,
            WHSWorkInventoryTransactionDimensionsDescriptor::newFromInventDim(InventDim::find(_inventTrans.InventDimId)),
            _workInventTrans.inventTransIdParent,
            _includeWorkInventTransRecId ? _workInventTrans.RecId : 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildRegisteredIssueByWorkLineQuery</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildRegisteredIssueByWorkLineQuery(
        WHSWorkId _workId,
        LineNum _workLineNum,
        WHSWorkInventTrans _workInventTrans,
        InventTransOrigin _inventTransOrigin,
        InventTrans _inventTrans,
        WHSWorkInventoryTransactionQueryParameters _queryParameters)
    {
        return this.buildQuery(
            _workId,
            _workLineNum,
            fieldStr(WHSWorkInventTrans, InventTransIdFrom),
            StatusIssue::Sold,
            StatusReceipt::None,
            _workInventTrans,
            _inventTransOrigin,
            _inventTrans,
            _queryParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildRegisteredReceiptByWorkLineQuery</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildRegisteredReceiptByWorkLineQuery(
        WHSWorkId _workId,
        LineNum _workLineNum,
        WHSWorkInventTrans _workInventTrans,
        InventTransOrigin _inventTransOrigin,
        InventTrans _inventTrans,
        WHSWorkInventoryTransactionQueryParameters _queryParameters)
    {
        return this.buildQuery(
            _workId,
            _workLineNum,
            fieldStr(WHSWorkInventTrans, InventTransIdTo),
            StatusIssue::None,
            StatusReceipt::Purchased,
            _workInventTrans,
            _inventTransOrigin,
            _inventTrans,
            _queryParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildQuery(
        WHSWorkId _workId,
        LineNum _workLineNum,
        FieldName _workInventTransInventTransIdFieldNameToJoinOn,
        StatusIssue _statusIssue,
        StatusReceipt _statusReceipt,
        WHSWorkInventTrans _workInventTrans,
        InventTransOrigin _inventTransOrigin,
        InventTrans _inventTrans,
        WHSWorkInventoryTransactionQueryParameters _queryParameters)
    {
        SysDaQueryObject workInventTransQueryObject = new SysDaQueryObject(_workInventTrans);
        workInventTransQueryObject.projection().add(fieldStr(WHSWorkInventTrans, ItemId));
        workInventTransQueryObject.projection().add(fieldStr(WHSWorkInventTrans, InventTransIdParent));
        if (_queryParameters.parmIncludeWorkInventTransRecId())
        {
            workInventTransQueryObject.projection().add(fieldStr(WHSWorkInventTrans, RecId));
        }
        workInventTransQueryObject.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_workInventTrans, fieldStr(WHSWorkInventTrans, WorkId)),
                new SysDaValueExpression(_workId)).and(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_workInventTrans, fieldStr(WHSWorkInventTrans, LineNum)),
                new SysDaValueExpression(_workLineNum))));

        SysDaQueryObject inventTransOriginQueryObject = new SysDaQueryObject(_inventTransOrigin);
        inventTransOriginQueryObject.projection().add(fieldStr(InventTransOrigin, RecId));
        inventTransOriginQueryObject.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_inventTransOrigin, fieldStr(InventTransOrigin, InventTransId)),
                new SysDaFieldExpression(_workInventTrans, _workInventTransInventTransIdFieldNameToJoinOn)));

        workInventTransQueryObject.joinClause(SysDaJoinKind::InnerJoin, inventTransOriginQueryObject);

        SysDaQueryObject inventTransQueryObject = new SysDaQueryObject(_inventTrans);
        inventTransQueryObject.projection().add(fieldStr(InventTrans, InventDimId));
        inventTransQueryObject.projection().add(fieldStr(InventTrans, Qty));
        inventTransQueryObject.projection().add(fieldStr(InventTrans, PdsCWQty));
        inventTransQueryObject.whereClause(
                 new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventTrans, fieldStr(InventTrans, InventTransOrigin)),
                    new SysDaFieldExpression(_inventTransOrigin, fieldStr(InventTransOrigin, RecId)))
            .and(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventTrans, fieldStr(InventTrans, StatusReceipt)),
                    new SysDaValueExpression(_statusReceipt)))
            .and(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventTrans, fieldStr(InventTrans, StatusIssue)),
                    new SysDaValueExpression(_statusIssue)))
            );

        inventTransOriginQueryObject.joinClause(SysDaJoinKind::InnerJoin, inventTransQueryObject);

        return workInventTransQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSWorkInventoryTransactionQueryByInventTrans construct()
    {
        return new WHSWorkInventoryTransactionQueryByInventTrans();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>