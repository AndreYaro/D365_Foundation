<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplaySystemGrouping</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the logic behind the RF flow used to show system grouping works.
/// </summary>
[WHSWorkExecuteMode(WHSWorkExecuteMode::SystemGrouping)]
class WhsWorkExecuteDisplaySystemGrouping extends WHSWorkExecuteDisplay
{
    private boolean shouldGetNextGroupingWorkTableWithOpenedPickWorkLine = true;
    private WMSLocationId newLocationId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildGetFieldName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds controls to form state for scanning system grouping field value.
    /// </summary>
    /// <param name="_con">
    /// Container containing the form state before the controls are added.
    /// </param>
    /// <param name="_extraText">
    /// Label text.
    /// </param>
    /// <returns>
    /// Container containing the form state after the controls are added.
    /// </returns>
    container buildGetFieldName(container _con, str _extraText = '')
    {
        container ret = this.buildGetFieldNameScanFieldOK(_con, _extraText);

        ret += [this.buildControl(#RFButton, #RFCancel, "@SYS50163", 1, '', #WHSRFUndefinedDataType, '', 0)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processButtonClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the button clicked.
    /// </summary>
    /// <param name = "_buttonClicked">The name of the button clicked.</param>
    /// <param name = "_workExecute">The work execute engine.</param>
    protected void processButtonClicked(str _buttonClicked, WhsWorkExecute _workExecute)
    {
        switch (_buttonClicked)
        {
            case #RFOverride:
                step = #OverrideStep1;
                break;

            case #RFFull:
                if (step != 0)
                {
                    step = #SplitWork;
                }
                break;

            case #RFNoLocation:
                workLine = WHSWorkLine::find(pass.lookup(#WorkId), pass.parmLineNum());
                Set excludeLocationId;

                if (pass.exists(#ExcludedLocations))
                {
                    excludeLocationId = this.buildLocationListFromStr(pass.lookup(#ExcludedLocations));
                }
                else
                {
                    excludeLocationId = this.buildLocationListFromStr(workLine.wmsLocationId);
                }
                container tmpCon;

                [newLocationId, tmpCon] = _workExecute.findNewLocation(workLine, excludeLocationId);
                excludeLocationId = Set::create(tmpCon);
                pass.insert(#SuggestLocation, 1);
                pass.insert(#ExcludedLocations, this.buildLocationListFromSet(excludeLocationId));
                if (pass.exists(#PrevStep))
                {
                    step = pass.lookup(#PrevStep);
                }
                else
                {
                    pass.insert(#NoValidation, '1');
                }
                break;

            case #RFShortPick:
                pass.insert(#Initiation, '1');
                step = #ShortPick;
                break;
            
            case #RFSkip:
                if (pass.isGroupPick())
                {
                    pass.skipGroupedWorkLines();
                }
                else
                {
                    boolean shouldSkipWork = true;

                    workTable = WHSWorkTable::find(pass.lookup(#WorkId));
                    workLine = _workExecute.getFirstOpenLine(pass.lookup(#WorkId), userId);

                    if (WhsWorkExecuteDisplaySystemGroupingSkipWorkWithMultiplePickLinesFlight::instance().isEnabled())
                    {
                        if (this.canSkipWorkLine())
                        {
                            WHSWorkLine::skipWorkLine(pass.lookup(#WorkId), pass.parmLineNum());
                        
                            if (!workTable.allInitialPickWorkLinesSkipped() || workLine.WorkType == WHSWorkType::Put)
                            {
                                shouldSkipWork = false;
                            }
                        }

                        if (shouldSkipWork)
                        {
                            container skipWorkId = this.adjustPassSkipWorkId();

                            if (pass.exists(#WorkGroupingId))
                            {
                                WHSWorkGrouping::deleteWorkId(pass.lookup(#WorkGroupingId), pass.lookup(#WorkId));
                            }

                            pass.insert(#WorkId, this.getWorkIdFromFieldName(skipWorkId));
                            workTable = WHSWorkTable::find(pass.lookup(#WorkId));
                            WHSWorkGrouping::createGroupingRecord(workTable.WorkId, pass.lookupStr(#WorkGroupingId));

                            if (pass.lookupStr(#LicensePlateId) != '')
                            {
                                pass.insert(#LicensePlateId, '');
                            }
                        }
                    }
                    else
                    {
                        if (this.canSkipWorkLine())
                        {
                            WHSWorkLine::skipWorkLine(pass.lookup(#WorkId), pass.parmLineNum());
                        }
                        else
                        {
                            container skipWorkId = this.adjustPassSkipWorkId();

                            if (pass.exists(#WorkGroupingId))
                            {
                                WHSWorkGrouping::deleteWorkId(pass.lookup(#WorkGroupingId), pass.lookup(#WorkId));
                            }

                            pass.insert(#WorkId, this.getWorkIdFromFieldName(skipWorkId));
                            workTable = WHSWorkTable::find(pass.lookup(#WorkId));
                            WHSWorkGrouping::createGroupingRecord(workTable.WorkId, pass.lookupStr(#WorkGroupingId));

                            if (pass.lookupStr(#LicensePlateId) != '')
                            {
                                pass.insert(#LicensePlateId, '');
                            }
                        }
                    }

                    pass.clearGroupPickFail();
                    
                }

                workLine = _workExecute.getFirstOpenLine(pass.lookup(#WorkId), userId);

                this.clearVerificationFields();

                pass.parmLineNum(workLine.LineNum);
                pass.insert(#DetermineStep, 1);
                break;

            case #RFOverpick:
                pass.insert(#PrevStep, step);
                step = #OverpickStep;
                break;

            case #RFSplitPut:
                this.validateSplitPutAllowed();
                step = #SplitPutWork;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayNextForm</Name>
				<Source><![CDATA[
	private container displayNextForm(container _con, str _buttonClicked = '')
    {
        WHSWorkExecuteDisplay   workExecuteDisplay = WHSWorkExecuteDisplay::construct(mode);
        WhsWorkExecute          workExecute = WhsWorkExecute::construct();
        container               ret = conNull();
        container               con = _con;
        boolean                 addCancel = true;
        boolean                 addButtons = true;
        int                     hasError = 0;
        WHSRFPassthrough        globalPass;
        boolean                 recall;
        container               tmpPass;
        int                     groupingWorkNum;

        globalPass = pass;
        pass = WHSRFPassthrough::create(conPeek(_con, 2));
        pass = this.combineMaps(globalPass, pass);
        pass.remove(#AddCancel);
        pass.remove(#AddButtons);

        hasError = this.hasError(_con);

        if (pass.exists(#UserId))
        {
            userId = pass.lookup(#UserId);
        }

        this.processButtonClicked(_buttonClicked, workExecute);

        if ((_buttonClicked != #RFDone || step == #ShortPick) && !pass.exists(#UserGroupPut))
        {
            switch (step)
            {
                case 0:
                    if (pass.exists(#WorkComplete))
                    {
                        ret = this.addErrorLabel(ret, "@WAX866", WHSRFColorText::Success);
                        pass.remove(#Recall);
                        addCancel = false;
                    }
                    ret = this.buildGetFieldName(ret);
                    step = 1;
                    break;

                case 1:
                    hasError = this.hasError(con);
                    if (hasError)
                    {
                        con = conDel(con, 3, 1);
                    }

                    pass.insert(#Id, conPeek(conPeek(con, 4), #data));

                    if (pass.exists(#WorkComplete))
                    {
                        pass.remove(#WorkComplete);
                    }

                    if (!pass.exists(#Id) || pass.lookup(#Id) == '')
                    {
                        if (pass.exists(#Id))
                        {
                            pass.remove(#Id);
                        }

                        ret = this.addErrorLabel(ret, "@WAX1080", WHSRFColorText::Error);
                        ret = this.buildGetFieldName(ret);
                        addButtons = false;
                        break;
                    }

                    if (WHSBarcodeDataParserFactory::isBarcodeDataParsingEnabled())
                    {
                        WHSGS1BarcodeEAN128UserDirected barcodeEAN128 = WHSGS1BarcodeEAN128UserDirected::construct(pass);
                        barcodeEAN128.decode();
                    }

                    shouldGetNextGroupingWorkTableWithOpenedPickWorkLine = false;
                    this.getNextGroupingWorkTable();
                    shouldGetNextGroupingWorkTableWithOpenedPickWorkLine = true;

                    if (!workTable)
                    {
                        pass.remove(#Id); // Clear invalid input
                        ret = this.addErrorLabel(ret, "@WAX1990", WHSRFColorText::Error);
                        ret = this.buildGetFieldName(ret);
                        break;
                    }

                    pass.insert(#WorkId, workTable.WorkId);

                    if (workTable.InventLocationId != pass.lookup(#InventLocationId))
                    {
                        throw error("@WAX1239");
                    }

                    if (this.updateGroupingWorkNum())
                    {
                        return [ret, false, con, _buttonClicked, true, addCancel, addButtons];
                    }
                    else
                    {
                        throw error("@WAX1260");
                    }
                    break;

                default:
                    if (pass.exists(#WorkId))
                    {
                        workLine = workExecute.getFirstOpenLine(pass.lookup(#WorkId), userId);

                        if (step != #Restart && workLine && !WHSRFMenuItemLine::validateMenuItemWorkClass(pass.lookupStr(#MenuItem), workLine.WorkClassId))
                        {
                            throw error("@WAX1459");
                        }

                        if (workLine && workLine.WorkType == WHSWorkType::Put)
                        {
                            hasError = this.hasError(con);
                            if (hasError)
                            {
                                con = conDel(con, 3, 1);
                            }

                            pass.insert(#AddDoneButton, 1);
                            pass.insert(#AddCancel, 1);

                            if (!pass.exists(#Id) || pass.lookup(#Id) == '')
                            {
                                ret = this.addErrorLabel(ret, "@WAX1080", WHSRFColorText::Error);
                                ret = this.buildGetFieldName(ret);
                                addButtons = false;
                                break;
                            }

                            this.getNextGroupingWorkTable();

                            if (!workTable)
                            {
                                ret = this.displayForm(con, #RFDone);
                                break;
                            }
                            else
                            {
                                pass.insert(#WorkId, workTable.WorkId);
                            }
                            if (workTable.InventLocationId != pass.lookup(#InventLocationId))
                            {
                                throw error("@WAX1239");
                            }

                            if (this.updateGroupingWorkNum())
                            {
                                con = this.updateModeStepPass(con, mode, step, pass);
                                return [ret, false, con, _buttonClicked, true, addCancel, addButtons];
                            }
                            break;
                        }
                        else if (workLine)
                        {
                            workTable = workLine.whsWorkTable();
                            con = conPoke(con, 2, pass.pack());
                            [ret, step , recall, tmpPass] = this.processWorkLine(workLine, con, mode, step, userId, newLocationId, _buttonClicked, false);
                            pass = new WHSRFPassthrough(Types::String, Types::String);
                            pass = WHSRFPassthrough::create(tmpPass);

                            if (step == #Restart)
                            {
                                step = 0;
                            }
                            else if (step == #StepOne)
                            {
                                step = #StepMax;
                                pass.insert(#DetermineStep, 1);
                            }

                            if (recall)
                            {
                                con = this.updateModeStepPass(con, mode, step, pass);
                                con = conPoke(con, 1, [mode, step]);
                                workExecuteDisplay.setGlobals(mode, step, userId, pass, null);
                                return [ret, false, con, _buttonClicked, recall, addCancel, addButtons];
                            }
                        }
                        else
                        {
                            throw error("@WAX859");
                        }
                    }
                    else
                    {
                        if (this.getNextGroupingWorkTable()
                            && this.updateGroupingWorkNum())                            
                        {
                            workLine = workExecute.getFirstOpenLine(pass.lookup(#WorkId), userId);
                            con = this.updateModeStepPass(con, mode, step, pass);
                            ret = this.displayForm(con);                                
                        }
                        else
                        {
                            if (step == #stepMax
                               && pass.lookupStr(#GroupingWorkTotal) != pass.lookupStr(#GroupingWorkNum))
                            {
                               this.removeDataByKeys([#Id, #SkipWorkId, #GroupingWorkTotal, #GroupingWorkNum, #WorkGroupingId, #InventSiteId, #InventLocationId]);
                                
                            }

                            throw error("@WAX859");
                        }
                    }
                    break;  
            }                              
        }
        else
        {
            workLine = WHSWorkGrouping::getNextGroupingWorkLine(pass.lookup(#WorkGroupingId), userId);
            
            if (step == #WorkAuditTemplate && (workLine.RecId == 0 || workLine.WorkId != pass.lookup(#AuditWorkId)))
            {
                workLine = WHSWorkTable::getLastWorkLine(pass.lookup(#AuditWorkId));
                pass.insert(#InventLocationId, workLine.whsWorkTable().InventLocationId);

                if (pass.exists(#DetermineStep))
                {
                    pass.remove(#DetermineStep);
                }
            }

            if (pass.exists(#WorkComplete))
            {
                pass.remove(#WorkComplete);
            }

            // When the worker chooses DONE, the client should reset the currently in progress pick, and go straight to put.
            // Short picking uses the DONE button as well and caused the current shortpick work line to be reset.
            if (this.shouldResetCurrentWork(_buttonClicked))
            {
                WHSWorkTable::resetWork(workLine.WorkId);

                WHSWorkGrouping::deleteWorkId(pass.lookup(#WorkGroupingId), workLine.WorkId);

                workLine = WHSWorkGrouping::getNextGroupingWorkLine(pass.lookup(#WorkGroupingId), userId);

                pass.insert(#DetermineStep, 1);

                // The pass at this point contains the source license plate information related to the last work we have just excluded from the work group.
                // This license plate is used during the put-away operation as a source license plate.
                // The InventTrans-based stack effectively ignores this parameter (almost always) and hence it is not so important there.
                // But the warehouse-specific inventory transactions respect the parameter and become wrong.
                // By removing the license plate information from 'pass' we allow the system to recover proper license plate information related to the currently processed work line.
                pass.remove(#LicensePlateId);
            }
            else if (workLine.WorkStop)
            {
                WHSWorkGrouping::deleteWorkId(pass.lookup(#WorkGroupingId), workLine.WorkId);

                workLine = WHSWorkGrouping::getNextGroupingWorkLine(pass.lookup(#WorkGroupingId), userId);
            }

            if (step != #Restart && workLine && !WHSRFMenuItemLine::validateMenuItemWorkClass(pass.lookupStr(#MenuItem), workLine.WorkClassId))
            {
                throw error("@WAX1459");
            }

            if (workLine)
            {
                pass.insert(#UserGroupPut, 1);
                workTable = workLine.whsWorkTable();
                con = conPoke(con, 2, pass.pack());
                [ret, step , recall, tmpPass] = this.processWorkLine(workLine, con, mode, step, userId, newLocationId, _buttonClicked, false);
                pass = new WHSRFPassthrough(Types::String, Types::String);
                pass = WHSRFPassthrough::create(tmpPass);

                if (step == #Restart)
                {
                    WHSWorkGrouping::deleteWorkId(pass.lookup(#WorkGroupingId), pass.lookup(#PrevWorkId));
                }
                else if (step == #StepOne)
                {
                    step = #StepMax;
                    pass.insert(#DetermineStep, 1);
                }

                if (recall)
                {
                    con = this.updateModeStepPass(con, mode, step, pass);
                    con = conPoke(con, 1, [mode, step]);
                    workExecuteDisplay.setGlobals(mode, step, userId, pass, null);
                    pass.insert(#UserGroupPut, 1);
                    pass.insert(#DetermineStep, 1);
                    // Only want to add GroupPutaway back if it hasn't already failed.
                    if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).GroupPutaway
                      && !pass.exists(#GroupPutawayFail)
                      && (!pass.exists(#PrevStep)
                        || pass.lookup(#PrevStep) != WHSWorkExecuteDisplay::num2StrDisplay(#OverrideStep2)))
                    {
                            pass.insert(#GroupPutaway, 1);
                    }

                    return [ret, false, con, _buttonClicked, recall, addCancel, addButtons];
                }
            }
            else
            {
                step = 1;
                ret = conNull();
                ret = this.addErrorLabel(ret, "@WAX866", WHSRFColorText::Success);

                if (pass.exists(#WorkGroupingId))
                {
                    pass.remove(#WorkGroupingId);
                }
                if (pass.exists(#Id))
                {
                    pass.remove(#Id);
                }
                if (pass.exists(#WorkComplete))
                {
                    pass.remove(#WorkComplete);
                }
                if (pass.exists(#GroupPutawayFail))
                {
                    pass.remove(#GroupPutawayFail);
                }
                if (pass.exists(#GroupPutaway))
                {
                    pass.remove(#GroupPutaway);
                }
                if (pass.exists(#GroupPutawayConfirm))
                {
                    pass.remove(#GroupPutawayConfirm);
                }

                // If restarting, need to remove target lp that might have been saved from group puts
                if (pass.exists(#TargetLicensePlateId))
                {
                    pass.remove(#TargetLicensePlateId);
                }
                ret = this.buildGetFieldName(ret);
                pass.insert(#AddButtons, 1);
                pass.remove(#UserGroupPut);
            }
        }

        return [ret, true, con, _buttonClicked, recall, addCancel, addButtons];
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSkipWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current work line can be skipped.
    /// </summary>
    /// <returns>true if current work line can be skipped; otherwise, false.</returns>
    protected boolean canSkipWorkLine()
    {
        return workTable.countFirstPicks() > 1
            || workLine.WorkType == WHSWorkType::Put;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayForm</Name>
				<Source><![CDATA[
    public container displayForm(container _con, str _buttonClicked = '')
    {
        boolean recall, addCancel, addButtons, isComplete;
        container ret;

        do
        {
            recall = false;
            [ret, isComplete, _con, _buttonClicked, recall, addCancel, addButtons] = this.displayNextForm(_con, _buttonClicked);
        }
        while (recall);

        if (!isComplete)
        {
            pass = new WHSRFPassthrough(Types::String, Types::String);
            pass = WHSRFPassthrough::create(conPeek(ret, 2));
            if (pass.exists(#WorkId) && pass.exists(#LineNum))
            {
                workLine = WHSWorkLine::find(pass.lookup(#WorkId), pass.parmLineNum());
                workTable = workLine.whsWorkTable();
            }
        }

        ret = this.executePostProcessing(ret, addCancel, addButtons, _con);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executePostProcessing</Name>
				<Source><![CDATA[
    private container executePostProcessing(container _ret, boolean _addCancel, boolean _addButtons, container _con)
    {
        if (step > 1 && _addButtons && !pass.exists(#AddButtons))
        {
            if (_ret == conNull())
            {
                _ret = _con;
            }

            if (pass.exists(#GroupPutaway))
            {
                addLPOverride = false;
            }

            _ret = this.addButtons(_ret);
        }
        else if (_addCancel && !pass.exists(#AddCancel))
        {
            if (!pass.exists(#AddDoneButton) && workLine.WorkType != WHSWorkType::Pick)
            {
                if (_ret == conNull())
                {
                    _ret = _con;
                }
                _ret = this.addCancelButton(_ret, 1, true);
            }
        }

        _ret = this.updateModeStepPass(_ret, mode, step, pass);

        return _ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextGroupingWorkTable</Name>
				<Source><![CDATA[
    private boolean getNextGroupingWorkTable()
    {
        boolean ret = false;
        
        if (pass.exists(#SkipWorkId))        
        {
            workTable = WHSWorkTable::find(this.getWorkIdFromFieldName(str2con(pass.lookup(#SkipWorkId), ',', false)));
        }
        else
        {
            workTable = WHSWorkTable::find(this.getWorkIdFromFieldName());            
        }
        if (workTable)
        {
            if (pass.exists(#TargetLicensePlateId))
            {
                // We need to remove target license plate so that we don't populate it for all others work headers automatically
                // Expectation is that every work header still has its own target LP
                pass.remove(#TargetLicensePlateId);
            }

            pass.insert(#WorkId, workTable.WorkId);
            ret = true;
        }
        
        return ret;

    }

]]></Source>
			</Method>
			<Method>
				<Name>updateGroupingWorkNum</Name>
				<Source><![CDATA[
    private boolean updateGroupingWorkNum()
    {
        boolean ret = false;
        
        if (!pass.exists(#WorkGroupingId)
            || !WHSWorkGrouping::findByGroupingId(pass.lookup(#WorkGroupingId))
            || WHSWorkGrouping::validateUserGrouping(pass.lookup(#WorkId), userId, pass.lookup(#WorkGroupingId)))        
        {
            pass.insert(#WorkGroupingId, WHSWorkGrouping::createGroupingRecord(pass.lookup(#WorkId), pass.lookupStr(#WorkGroupingId)));
            step = #stepMax;
            pass.insert(#DetermineStep, 1);
            
            int groupingWorkNum = str2int(pass.lookupStr(#GroupingWorkNum));
            ++groupingWorkNum;
            pass.insert(#GroupingWorkNum, groupingWorkNum);
            
            ret = true;            
        }
        
        return ret;

    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldResetCurrentWork</Name>
				<Source><![CDATA[
    //
    private boolean shouldResetCurrentWork(str _buttonClicked)
    {
        boolean doneButtonClicked = _buttonClicked == #RFDone;
        boolean workLineIsPick = workLine.WorkType == WHSWorkType::Pick;
        boolean stepIsShortPick = step == #ShortPick || step == #ShortPickConf;
    
        return doneButtonClicked && workLineIsPick && !stepIsShortPick;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkIdFromFieldName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the next work Id to be executed based on the scanned valued for system grouping.
    /// </summary>
    /// <param name="_skipWorkId">
    /// A container of work Ids that have been skipped by the user; optional.
    /// </param>
    /// <returns>
    /// A work Id of the next work to execute.
    /// </returns>
    protected WHSWorkId getWorkIdFromFieldName(container _skipWorkId = conNull())
    {
        Query query = this.buildWorkIdFromFieldNameQuery();
        QueryRun queryRun = new QueryRun(query);

        queryRun.next();

        WHSWorkTable sysGroupingWorkTable = queryRun.get(tableNum(WHSWorkTable));

        if (_skipWorkId != conNull())
        {
            while (sysGroupingWorkTable.WorkId != '')
            {
                if (!conFind(_skipWorkId, sysGroupingWorkTable.WorkId))
                {
                    break;
                }

                queryRun.next();
                sysGroupingWorkTable = queryRun.get(tableNum(WHSWorkTable));
            }

            if (sysGroupingWorkTable.WorkId == '')
            {
                queryRun = new QueryRun(query);

                queryRun.next();

                sysGroupingWorkTable = queryRun.get(tableNum(WHSWorkTable));

                pass.remove(#SkipWorkId);
            }
        }

        if (sysGroupingWorkTable.WorkId && !pass.exists(#GroupingWorkTotal))
        {
            queryRun = new QueryRun(query);
            pass.insert(#GroupingWorkTotal, SysQuery::countLoops(queryRun));
        }
        return sysGroupingWorkTable.WorkId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWorkIdFromFieldNameQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Query to get work Id based on system grouping
    /// </summary>
    /// <returns>The query.</returns>
    protected Query buildWorkIdFromFieldNameQuery()
    {
        Query query = new Query(queryStr(WHSWorkSystemGrouping));
        
        // Add range for system grouping field.
        QueryBuildDataSource qbdsWorkTable = query.dataSourceTable(tableNum(WHSWorkTable));
        QueryBuildRange qbrGroupingField = qbdsWorkTable.addRange(WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).rfSysGroupFieldNum);
        qbrGroupingField.value(pass.lookup(#Id));
        
        // Modify range on so only work headers locked by this user or unlocked can be selected.
        if (qbdsWorkTable)
        {
            SysQuery::findOrCreateRange(qbdsWorkTable, fieldNum(WHSWorkTable, LockedUser)).value(queryRangeConcat(SysQuery::valueEmptyString(), userId));
        }

        // Avoid picking a work line if an earlier workLine is still open
        QueryBuildDataSource qbdsWorkLine = query.dataSourceTable(tableNum(WHSWorkLine));
        qbdsWorkLine.addRange(fieldNum(WHSWorkLine, ReplenDemand)).value(queryValue(NoYes::No));
        
        if (!shouldGetNextGroupingWorkTableWithOpenedPickWorkLine)
        {
            qbdsWorkLine.clearRange(fieldNum(WHSWorkLine, WorkType));
        }

        // Add constraint with the allowed warehouses of the work user.
        QueryBuildDataSource qbdsWHSWorkUserWarehouse = qbdsWorkTable.addDataSource(tableNum(WHSWorkUserWarehouse));
        qbdsWHSWorkUserWarehouse.addLink(fieldNum(WHSWorkTable, InventLocationId), fieldNum(WHSWorkUserWarehouse, InventLocationId), qbdsWorkTable.name());
        qbdsWHSWorkUserWarehouse.joinMode(JoinMode::ExistsJoin);
        qbdsWHSWorkUserWarehouse.addRange(fieldNum(WHSWorkUserWarehouse, UserId)).value(userId);

        QueryBuildDataSource qbdsNotExistsWorkLine = qbdsWorkLine.addDataSource(tableNum(WHSWorkLine));
        qbdsNotExistsWorkLine.addLink(fieldNum(WHSWorkTable, WorkId), fieldNum(WHSWorkLine, WorkId), qbdsWorkTable.name());
        qbdsNotExistsWorkLine.joinMode(JoinMode::NoExistsJoin);
        qbdsNotExistsWorkLine.fetchMode(QueryFetchMode::One2One);

        qbdsNotExistsWorkLine.addRange(fieldNum(WHSWorkLine, ReplenDemand)).value(queryValue(NoYes::No));
        qbdsNotExistsWorkLine.addRange(fieldNum(WHSWorkLine, WorkStatus)).value(queryValue(WHSWorkStatus::Open));
        qbdsNotExistsWorkLine.addRange(fieldNum(WHSWorkLine, RecId)).value(strFmt('(%1.%2) < (%3.%2)',
                                                                                    qbdsNotExistsWorkline.name(),
                                                                                    fieldStr(WHSWorkLine, LineNum),
                                                                                    qbdsWorkLine.name()));
        WHSRFMenuItemLine menuItemLine;

        select firstonly RecId from menuItemLine
            where menuItemLine.MenuItemName == pass.lookup(#MenuItem);

        if (menuItemLine.RecId)
        {
            query.dataSourceTable(tableNum(WHSRFMenuItemLine)).findRange(fieldNum(WHSRFMenuItemLine, MenuItemName)).value(pass.lookupStr(#MenuItem));
        }
        else
        {
            query.dataSourceTable(tableNum(WHSWorkClassTable)).enabled(false);
        }

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>