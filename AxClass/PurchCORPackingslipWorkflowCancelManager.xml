<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchCORPackingslipWorkflowCancelManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PurchCORPackingslipWorkflowCancelManager</c> class is used to cancel a <c>PurchParmTable</c>
///    workflow.
/// </summary>
/// <remarks>
///    This class inherits from the <c>WorkflowCancelManager</c> class and handles the update of the
///    <c>PurchParmTable</c>record when the Cancel button has been pressed. The <c>PurchParmTable</c> is
///    set to a pending cancellation status, and is presented to the user immediately.The default dialog
///    box and cancel functionality from the <c>WorkflowCancelManager</c> class is used.
/// </remarks>
public class PurchCORPackingslipWorkflowCancelManager extends WorkflowCancelManager
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the status to pending cancellation on the canceled <c>PurchParmTable</c> record.
    /// </summary>
    /// <param name="_args">
    ///    The record that should be canceled.
    /// </param>
    /// <remarks>
    ///    This method rereads the record from the data source, because it is changed when a workflow is
    ///    submitted. These changes may not yet be refreshed in the client.The state is set to pending
    ///    cancellation and the record is updated and refreshed in the client.
    /// </remarks>
    public void updateDocument(Args _args)
    {
        PurchParmTable purchParmTable;

        if (_args.record() is PurchParmTable)
        {
            purchParmTable = _args.record() as PurchParmTable;
            purchParmTable.reread();
        }
        else if (_args.record() is WorkflowTrackingStatusTable)
        {
            WorkflowTrackingStatusTable workflowTrackingStatusTable = _args.record() as WorkflowTrackingStatusTable;
            workflowTrackingStatusTable.reread();

            if (workflowTrackingStatusTable.ContextTableId == tableNum(PurchParmTable))
            {
                purchParmTable = PurchParmTable::findRecId(workflowTrackingStatusTable.ContextRecId);
            }
        }

        if (purchParmTable)
        {
            ttsbegin;
            purchParmTable.selectForUpdate(true);
            purchParmTable.WorkflowState = TradeWorkflowState::Returned;
            purchParmTable.update();
            ttscommit;

            FormDataSource purchParmTable_ds = FormDataUtil::getFormDataSource(purchParmTable);

            if (purchParmTable_ds)
            {
                purchParmTable_ds.research(true);
            }
        }
        else
        {
            throw error(strFmt("@SCM:WorkflowMissingRecordError", tableStr(PurchParmTable), tableId2Name(_args.record().TableId)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchCORPackingslipWorkflowCancelManager construct()
    {
        return new PurchCORPackingslipWorkflowCancelManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        PurchCORPackingslipWorkflowCancelManager   workflowCancelManager = PurchCORPackingslipWorkflowCancelManager::construct();

        workflowCancelManager.run(_args);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>