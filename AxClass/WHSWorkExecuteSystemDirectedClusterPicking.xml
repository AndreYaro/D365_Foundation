<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteSystemDirectedClusterPicking</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSWorkExecuteSystemDirectedClusterPicking extends WHSWorkExecute
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isWorkEligibleForSystemDirected</Name>
				<Source><![CDATA[
    [Hookable(true)]
    protected internal boolean isWorkEligibleForSystemDirected(
        container		_skipWorkId,
        WHSWorkTable	_workTable,
        WHSUserId		_userId)
    {
        return super(_skipWorkId, _workTable, _userId) && this.canWorkBeUsedForSystemDirectedClusterPicking(_workTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canWorkBeUsedForSystemDirectedClusterPicking</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the work can be clustered by the system.
    /// </summary>
    /// <param name = "_workTable">Work table holds work header.</param>
    /// <returns>true if the work can be clustered; otherwise, false.</returns>
    protected boolean canWorkBeUsedForSystemDirectedClusterPicking(WHSWorkTable _workTable)
    {
        boolean ret = true;

        // Ensure all work lines have located and the work does not include catch weight enabled items or is already part of a cluster
        // Also ensure no work lines are tied to unfinished replenishment work.
        if (!this.canWorkLinesBeUsedForSystemDirectedClusterPicking(_workTable.WorkId)
        ||  WHSWorkTable::hasCatchWeightItems(_workTable.WorkId)
        ||  !WHSWorkTable::validateWorkInCluster(_workTable.WorkId)
        ||  !_workTable.canAddToPickingWorkCluster())
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canWorkLinesBeUsedForSystemDirectedClusterPicking</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check that all relevant work lines have a location.
    /// </summary>
    /// <param name = "_workId">Work to check.</param>
    /// <returns>true if all relevant work lines have a location, and is suitable for use in cluster; otherwise, false.</returns>
    protected boolean canWorkLinesBeUsedForSystemDirectedClusterPicking(WHSWorkId _workId)
    {
        WHSWorkLine noLocWorkLine;
    
        select firstOnly RecId from noLocWorkLine
            where noLocWorkLine.WorkId == _workId
                && noLocWorkLine.WMSLocationId == ''
                && noLocWorkLine.WorkType != WHSWorkType::Print
                && (!WHSClusterProcessingCustomWorkStepFlight::instance().isEnabled() 
                    || noLocWorkLine.WorkType != WHSWorkType::Custom);
    
        return noLocWorkLine.RecId == 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>