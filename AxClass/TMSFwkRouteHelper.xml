<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSFwkRouteHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Ax.Tms.Base.Utility;
using System.Xml.Linq;

/// <summary>
/// The <c>TMSFwkRouteHelper</c> class provides utilities for routing operation.
/// </summary>
class TMSFwkRouteHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createStaticRouteSegments</Name>
				<Source><![CDATA[
    public static XElementList createStaticRouteSegments(
            TmsTransactionFacade        _transactionFacade,
            TMSRouteConfigCode          _routeConfigCode,
            XElement                    _shipmentTemplate,
            boolean                     _isChargeOverride)
    {
        TMSRouteSegmentConfig   routeSegmentConfig;
        XElement                segment = null;
        XElement                shipment = null;
        XElementList            segments = new XElementList();
        TMSFwkRoutingService    routingService = TMSFwkRoutingService::construct();
        boolean                 routeSegmentConfigsFound = false;
        Set                     outBoundDischargeSet = new Set(Types::String);
        Set                     inBoundKeepSet = new Set(Types::String);
        
        #TMSXML

        while select routeSegmentConfig
            order by routeSegmentConfig.Sequence
            where routeSegmentConfig.RouteConfigCode == _routeConfigCode
        {
            routeSegmentConfigsFound = true;
            shipment = new XElement(_shipmentTemplate);

            if (routeSegmentConfig.FreightTermCode != '')
            {
                shipment.AddOrChangeElement(ElementXmlConstants::DlvTerm, routeSegmentConfig.FreightTermCode);
            }

            shipment.AddOrChangeElement(ElementXmlConstants::Sequence, System.Convert::ToString(routeSegmentConfig.Sequence, System.Globalization.CultureInfo::InvariantCulture));

            XElement hubPickUp = TMSFwkRoutingService::createSegmentAddressNode(_transactionFacade, shipment, AddTypeXmlConstants::Pickup,
                                                    routeSegmentConfig.RouteStartHubCode, routeSegmentConfig);
            XElement hubDropOff = TMSFwkRoutingService::createSegmentAddressNode(_transactionFacade, shipment, AddTypeXmlConstants::DropOff,
                routeSegmentConfig.RouteEndHubCode, routeSegmentConfig);

            if (TMSFeatureFlightState::TMSDistributeShipmentToRouteSegmentFeature())
            {
                TMSDirection direction = symbol2Enum(enumNum(TMSDirection), shipment.Element(#direction).Value);
                System.Collections.IEnumerable shipmentLineList= shipment.Elements(#shipping);
                System.Collections.IEnumerator enumShipmentLineList = shipmentLineList.GetEnumerator();
                Set shipLineToRemoveSet = new Set(Types::Class);

                if (direction == TMSDirection::Outbound)
                {
                    while (enumShipmentLineList.MoveNext())
                    {
                        XElement shipElement = enumShipmentLineList.Current;
                        if (shipElement.Element(#shippingEntityType).Value == #typeLine)
                        {
                            XElement pickUpElement = shipElement.Element(#pickUp);
                            XElement dropOffElement = shipElement.Element(#dropOff);

                            if (outBoundDischargeSet.in(shipElement.Element(#RecId).Value))
                            {
                                shipLineToRemoveSet.add(shipElement);
                            }
                            else if (dropOffElement && TMSFwkRouteHelper::isAddressSame(dropOffElement, hubDropOff))
                            {
                                outBoundDischargeSet.add(shipElement.Element(#RecId).Value);
                            }
                        }
                    }
                }
                else if (direction == TMSDirection::Inbound)
                {
                    while (enumShipmentLineList.MoveNext())
                    {
                        XElement shipElement = enumShipmentLineList.Current;
                        if (shipElement.Element(#shippingEntityType).Value == #typeLine)
                        {
                            XElement pickUpElement = shipElement.Element(#pickUp);
                            XElement dropOffElement = shipElement.Element(#dropOff);

                            if (inBoundKeepSet.in(shipElement.Element(#RecId).Value))
                            {
                                continue;
                            }
                            else if (pickUpElement)
                            {
                                if (TMSFwkRouteHelper::isAddressSame(hubPickUp, pickUpElement))
                                {
                                    inBoundKeepSet.add(shipElement.Element(#RecId).Value);
                                }
                                else
                                {
                                    shipLineToRemoveSet.add(shipElement);
                                }
                            }
                        }
                    }
                }

                SetEnumerator se = shipLineToRemoveSet.getEnumerator();
                while (se.moveNext())
                {
                    XElement removingElement = se.current();
                    removingElement.Remove();
                }
            }

            segment = new XElement(EntityXmlConstants::ShippingEntity,
                                    new XElement(ElementXmlConstants::ShippingEntityType, EntityTypeXmlConstants::Segment),
                                    new XElement(ElementXmlConstants::Sequence, routeSegmentConfig.Sequence),
                                    new XElement(ElementXmlConstants::RouteSegmentConfigurationRecId, routeSegmentConfig.RecId),
                                    new XElement(ElementXmlConstants::RouteSegmentName, routeSegmentConfig.Name),
                                    TMSFwkRouteHelper::createGenericSegmentInfo(null, routeSegmentConfig),
                                    hubPickUp,
                                    hubDropOff,
                                    new XElement(shipment));

            routingService.rateSegmentConfiguration(_transactionFacade, segment, routeSegmentConfig, _isChargeOverride);

            segments.Add(new XElement(segment));
        }

        if (!routeSegmentConfigsFound)
        {
            segments.Add(new XElement(_shipmentTemplate));
            segments.FirstOrDefault().AddError(TMSFwkErrorDtoBuilderRoute::buildRoutePlan());
        }

        return segments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRoutePlanCodeAvailable</Name>
				<Source><![CDATA[
    public static boolean isRoutePlanCodeAvailable(
            TmsTransactionFacade        _transactionFacade,
            TMSRouteGuide               _routeGuide,
            XElement                    _shipmentTemplate)
    {
        TMSRouteSegmentConfig   routeSegmentConfig;
        XElement                shipment = null;
        TMSFwkRoutingService    routingService = TMSFwkRoutingService::construct();
        List                    dropOffList;
        List                    pickUpList;
        boolean ret = true;

        #TMSXML        

        while select routeSegmentConfig
            order by routeSegmentConfig.Sequence
            where routeSegmentConfig.RouteConfigCode == _routeGuide.RouteConfigCode
        {
            shipment = new XElement(_shipmentTemplate);
            TMSDirection direction = symbol2Enum(enumNum(TMSDirection), shipment.Element(#direction).Value);
            XElement hubPickUp = TMSFwkRoutingService::createSegmentAddressNode(_transactionFacade, shipment, AddTypeXmlConstants::Pickup,
                                                    routeSegmentConfig.RouteStartHubCode, routeSegmentConfig);
            XElement hubDropOff = TMSFwkRoutingService::createSegmentAddressNode(_transactionFacade, shipment, AddTypeXmlConstants::DropOff,
                routeSegmentConfig.RouteEndHubCode, routeSegmentConfig);

            if (!pickUpList)
            {
                // Outbound should have the same orginal.
                pickUpList = new List(Types::Class);
                pickUpList.addEnd(hubPickUp);
            }
            else if (direction != TMSDirection::Outbound)
            {
                pickUpList.addEnd(hubPickUp);
            }

            if (!dropOffList || direction == TMSDirection::Inbound)
            {
                //Inbound should have the same destination.
                dropOffList = new List(Types::Class);
            }

            dropOffList.addEnd(hubDropOff);
        }

        shipment = new XElement(_shipmentTemplate);
        System.Collections.IEnumerable shipmentLineList= shipment.Elements(#shipping);
        System.Collections.IEnumerator enumShipmentLineList = shipmentLineList.GetEnumerator();

        while (enumShipmentLineList.MoveNext())
        {
            XElement shipElement = enumShipmentLineList.Current;
            if (shipElement.Element(#shippingEntityType).Value == #typeLine)
            {
                boolean pickUpAvailable = false;
                XElement pickUpElement = shipElement.Element(#pickUp);
                if (pickUpElement)
                {
                    ListEnumerator pickUpEnumerator = pickUpList.getEnumerator();
                    while (pickUpEnumerator.moveNext() && !pickUpAvailable)
                    {
                        XElement hubPickUp = pickUpEnumerator.current();
                        if (TMSFwkRouteHelper::isAddressSame(hubPickUp, pickUpElement))
                        {
                            pickUpAvailable = true;
                            break;
                        }
                    }
                }

                boolean dropOffAvailable = false;
                XElement dropOffElement = shipElement.Element(#dropOff);
                if (dropOffElement)
                {
                    ListEnumerator dropOffEnumerator = dropOffList.getEnumerator();
                    while (dropOffEnumerator.moveNext() && !dropOffAvailable)
                    {
                        XElement hubDropOff = dropOffEnumerator.current();
                        if (TMSFwkRouteHelper::isAddressSame(hubDropOff, dropOffElement))
                        {
                            dropOffAvailable = true;
                            break;
                        }
                    }
                }
                
                if (!pickUpAvailable || !dropOffAvailable)
                {
                    ret = false;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAddressSame</Name>
				<Source><![CDATA[
    public static boolean isAddressSame(XElement _adsressOne, XElement _addressTwo)
    {
        #TMSXML

        return _adsressOne.Element(#postal).Value == _addressTwo.Element(#postal).Value
               && _adsressOne.Element(#countryRegion).Value == _addressTwo.Element(#countryRegion).Value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGenericSegmentInfo</Name>
				<Source><![CDATA[
    public static XElementList createGenericSegmentInfo(TMSRouteGuide _routeGuide, TMSRouteSegmentConfig _routeSegment)
    {
        XElementList carrierInfoList = new XElementList();

        TMSCarrierCode          carrierCode;
        TMSCarrierServiceCode   carrierServiceCode;
        TMSCarrierGroupCode     carrierGroupCode;
        TMSModeCode             modeCode;
        TMSFreightTermCode      deliveryTerms;

        if (_routeGuide == null)
        {
            carrierCode = _routeSegment.CarrierCode;
            carrierServiceCode = _routeSegment.CarrierServiceCode;
            carrierGroupCode = _routeSegment.CarrierGroupCode;
            modeCode = _routeSegment.ModeCode;
            deliveryTerms = _routeSegment.FreightTermCode;

            carrierInfoList.Add(new XElement(ElementXmlConstants::ResponsibleForPayment, enum2Symbol(enumNum(TMSResponsibleForPayment), enum2int(_routeSegment.ResponsibleForPayment))));
            carrierInfoList.Add(new XElement(AccountXmlConstants::VendorCode, _routeSegment.VendorCode));
            carrierInfoList.Add(new XElement(AccountXmlConstants::VendorInvoiceCode, _routeSegment.VendorInvoiceCode));
        }
        else
        {
            carrierCode = _routeGuide.CarrierCode;
            carrierServiceCode = _routeGuide.CarrierServiceCode;
            carrierGroupCode = _routeGuide.CarrierGroupCode;
            modeCode = _routeGuide.ModeCode;
            deliveryTerms = _routeGuide.FreightTermCode;
        }

        carrierInfoList.Add(new XElement(ElementXmlConstants::CarrierServiceCode, carrierServiceCode));
        carrierInfoList.Add(new XElement(ElementXmlConstants::CarrierCode, carrierCode));
        carrierInfoList.Add(new XElement(ElementXmlConstants::CarrierGroupCode, carrierGroupCode));
        carrierInfoList.Add(new XElement(ElementXmlConstants::ModeCode, modeCode));
        carrierInfoList.Add(new XElement(ElementXmlConstants::DlvTerm, deliveryTerms));

        return carrierInfoList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>