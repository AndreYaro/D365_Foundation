<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchAgreementCertificationUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchAgreementCertificationUIBuilder</c> is the UI Builder class for <c>PurchAgreementCertificationCompliance</c> SSRS Report.
/// </summary>
public class PurchAgreementCertificationUIBuilder extends SrsReportDataContractUIBuilder
{
    PurchAgreementCertificationContract purchAgreementCertificationContract;

    DialogField     dialogCertificationPastDue;
    DialogField     dialogVendCertificationType;
    DialogField     dialogAgreementClassification;
    DialogField     dialogCertificationExpireDate;
    DialogField     dialogIsCertificationExpireDate;
    DialogGroup     dialogGroupCategory;
    DialogGroup     dialogGroupDates;
    DialogGroup     dialogGroupExpireDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>agreementClassificationJumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the JumpRef event of the agreement classification control.
    /// </summary>
    /// <param name="_agreementClassificationControl">
    /// The agreement classification control for which the JumpRef event needs to be handled.
    /// </param>
    public void agreementClassificationJumpRef(FormStringControl _agreementClassificationControl)
    {
        Args            args;
        MenuFunction    menuFunctionObject;

        args = new Args(classStr(PurchAgreementCertificationUIBuilder));

        args.caller(this);
        args.lookupRecord(AgreementClassification::findPurchClassification(_agreementClassificationControl.valueStr()));

        menuFunctionobject = new menuFunction(menuitemDisplayStr(AgreementClassification), MenuItemType::Display);
        menuFunctionobject.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>agreementClassificationLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the lookup event of the agreement classification control.
    /// </summary>
    /// <param name="_agreementClassificationControl">
    /// The agreement classification control for which the lookup event needs to be handled.
    /// </param>
    public void agreementClassificationLookup(FormStringControl _agreementClassificationControl)
    {
        SysTableLookup          agreementClassificationLookup;
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildPurchAgreementHeaderRange;

        agreementClassificationLookup = SysTableLookup::newParameters(tablenum(AgreementClassification), _agreementClassificationControl, true);

        // Add the fields to be shown in the lookup form
        agreementClassificationLookup.addLookupfield(fieldnum(AgreementClassification, Name));
        agreementClassificationLookup.addLookupfield(fieldnum(AgreementClassification, Description_PSN));

        // Create the query datasource
        queryBuildDataSource = query.addDataSource(tablenum(AgreementClassification));
        queryBuildPurchAgreementHeaderRange = queryBuildDataSource.addRange(fieldnum(AgreementClassification, AgreementRelationType));
        queryBuildPurchAgreementHeaderRange.value(int642str(tablenum(PurchAgreementHeader)));

        // Add the query to the lookup form
        agreementClassificationLookup.parmQuery(query);

        // Perform lookup
        agreementClassificationLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the dialog for the <c>PurchAgreementCertification</c> SSRS Report.
    /// </summary>
    public void build()
    {
        // Gets the underlying PurchAgreementCertificationContract, since this UI Builder is associated to the Contract by the attribute on contract.
        purchAgreementCertificationContract = this.dataContractObject();

        dialogGroupCategory             = dialog.addGroup("@SYS69410");
        dialogAgreementClassification   = this.addDialogField(methodstr(PurchAgreementCertificationContract, parmAgreementClassificationId), purchAgreementCertificationContract);
        dialogVendCertificationType     = this.addDialogField(methodstr(PurchAgreementCertificationContract, parmVendCertTypeId), purchAgreementCertificationContract);

        dialogGroupDates                = dialog.addGroup("@SYS80293");
        dialogGroupDates.columns(2);

        dialogCertificationExpireDate   = this.addDialogField(methodstr(PurchAgreementCertificationContract, parmCertificationExpireDate), purchAgreementCertificationContract);

        dialogCertificationPastDue      = this.addDialogField(methodstr(PurchAgreementCertificationContract, parmCertificationPastDue), purchAgreementCertificationContract);

        dialogIsCertificationExpireDate = this.addDialogField(methodstr(PurchAgreementCertificationContract, parmIsCertificationExpired), purchAgreementCertificationContract);
        dialogIsCertificationExpireDate.label('');

        dialog.allowUpdateOnSelectCtrl(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>certificationPastDueModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the modified event of the agreement classification Past Due control.
    /// </summary>
    /// <param name="_control">
    /// The agreement classification Past Due control for which the lookup event needs to be handled.
    /// </param>
    /// <returns>
    /// true when the agreement classification Past Due control is modified. Otherwise, false.
    /// </returns>
    public boolean certificationPastDueModified(FormCheckboxControl _control)
    {
        boolean isControlModified;

        isControlModified = _control.modified();

        if (isControlModified)
        {
            dialogCertificationPastDue = this.bindInfo().getDialogField(this.dataContractObject(), methodstr(PurchAgreementCertificationContract, parmCertificationPastDue));
            dialogCertificationExpireDate = this.bindInfo().getDialogField(this.dataContractObject(), methodstr(PurchAgreementCertificationContract, parmCertificationExpireDate));
            dialogCertificationExpireDate.fieldControl().mandatory(dialogCertificationPastDue.value());
        }

        return isControlModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override this method in order to initialize the dialog fields after the fields are build.
    /// </summary>
    public void postBuild()
    {
        purchAgreementCertificationContract = this.dataContractObject();

        super();

        dialogAgreementClassification = this.bindInfo().getDialogField(purchAgreementCertificationContract, methodstr(PurchAgreementCertificationContract, parmAgreementClassificationId));
        dialogVendCertificationType = this.bindInfo().getDialogField(purchAgreementCertificationContract, methodstr(PurchAgreementCertificationContract, parmVendCertTypeId));
        dialogCertificationPastDue = this.bindInfo().getDialogField(purchAgreementCertificationContract, methodstr(PurchAgreementCertificationContract, parmCertificationPastDue));
        dialogCertificationExpireDate = this.bindInfo().getDialogField(purchAgreementCertificationContract, methodstr(PurchAgreementCertificationContract, parmCertificationExpireDate));

        if (dialogAgreementClassification)
        {
            dialogAgreementClassification.lookupButton(2);
        }

        if (dialogVendCertificationType)
        {
            dialogVendCertificationType.lookupButton(2);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method registers the dialog field methods to capture events.
    /// </summary>
    public void postRun()
    {
        Dialog dialogLocal = this.dialog();
        DialogField dialogField;

        super();

         // This method should be called in order to handle events on dialogs.
        dialogLocal.dialogForm().formRun().controlMethodOverload(false);

        dialogField = this.bindInfo().getDialogField(this.dataContractObject(), methodstr(PurchAgreementCertificationContract, parmAgreementClassificationId));
        dialogField.registerOverrideMethod(methodstr(FormStringControl, lookup), methodstr(PurchAgreementCertificationUIBuilder, agreementClassificationLookup), this);
        dialogField.registerOverrideMethod(methodstr(FormStringControl, jumpRef), methodstr(PurchAgreementCertificationUIBuilder, agreementClassificationJumpRef), this);

        dialogField = this.bindInfo().getDialogField(this.dataContractObject(), methodstr(PurchAgreementCertificationContract, parmVendCertTypeId));
        dialogField.registerOverrideMethod(methodstr(FormStringControl, lookup), methodstr(PurchAgreementCertificationUIBuilder, vendCertificationTypeLookup), this);

        dialogField = this.bindInfo().getDialogField(this.dataContractObject(), methodstr(PurchAgreementCertificationContract, parmCertificationPastDue));
        dialogField.registerOverrideMethod(methodstr(FormStringControl, modified), methodstr(PurchAgreementCertificationUIBuilder, certificationPastDueModified), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendCertificationTypeLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the lookup event of the vendor certification type control.
    /// </summary>
    /// <param name="_vendCertificationTypeControl">
    /// The vendor certification type control for which the lookup event needs to be handled.
    /// </param>
    public void vendCertificationTypeLookup(FormStringControl _vendCertificationTypeControl)
    {
        SysTableLookup          vendCertificationTypeLookup;
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;

        vendCertificationTypeLookup = SysTableLookup::newParameters(tablenum(VendCertType), _vendCertificationTypeControl, true);

        // Add the fields to be shown in the lookup form
        vendCertificationTypeLookup.addLookupfield(fieldnum(VendCertType, Name));
        vendCertificationTypeLookup.addLookupfield(fieldnum(VendCertType, Description));

        queryBuildDataSource = query.addDataSource(tablenum(VendCertType));

        // Add the query to the lookup form
        vendCertificationTypeLookup.parmQuery(query);

        // Perform lookup
        vendCertificationTypeLookup.performFormLookup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>