<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerAccountBalSheetByDimContract_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerAccountBalSheetByDimContract</c> class is the data contract class for the
/// account balance sheet by dimensions report.
/// </summary>
[
    DataContractAttribute,
    SysOperationGroupAttribute('DateAccount', "@SYS24771", '1'),
    SysOperationContractProcessingAttribute(classStr(LedgerAccountBalSheetByDimUIBuilder_CN))
]
class LedgerAccountBalSheetByDimContract_CN extends ERFormatMappingRunBaseContract implements SysOperationValidatable
{
    FromDate        fromDate;
    ToDate          toDate;
    MainAccountNum  fromAccount;
    MainAccountNum  toAccount;
    ReportTitle     reportTitle;
    CurrentOperationsTax    postingLayer;
    ERFormatMappingId erBinding;
    ERFinDimensionsSelectType eRFinDimensionsSelectType;
    List localizedAttributeNames;

    private const ERFinDimensionsSelectType dimSelectType = ERFinDimensionsSelectType::LegalEntity;
    private const DimensionSetName dimSetSelectType = '';
    private const NoYes askForMainAccount = NoYes::No;
    private const NoYes isMainAccountMandatory = NoYes::Yes;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmFromAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter FromAccount.
    /// </summary>
    /// <param name="_fromAccount">
    /// The new value of the datacontract parameter FromAccount;
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter FromAccount.
    /// </returns>
    [
        DataMemberAttribute('FromAccount'),
        SysOperationGroupMemberAttribute('DateAccount'),
        SysOperationDisplayOrderAttribute('2'),
        SysOperationLabelAttribute(literalstr("@SYS4081511"))
    ]
    public MainAccountNum parmFromAccount(MainAccountNum _fromAccount = fromAccount)
    {
        fromAccount = _fromAccount;

        return fromAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter FromDate.
    /// </summary>
    /// <param name="_fromDate">
    /// The new value of the datacontract parameter FromDate;
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter FromDate.
    /// </returns>
    [
        DataMemberAttribute('FromDate'),
        SysOperationGroupMemberAttribute('DateAccount'),
        SysOperationDisplayOrderAttribute('1')
    ]
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingLayer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter postinglayer.
    /// </summary>
    /// <param name="_postingLayer">
    /// The new value of the datacontract parameter postinglayer; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter postinglayer.
    /// </returns>
    [
        DataMemberAttribute('PostingLayer'),
        SysOperationDisplayOrderAttribute('5'),
        SysOperationLabelAttribute(literalstr("@SYS334157"))
    ]
    public CurrentOperationsTax parmPostingLayer(CurrentOperationsTax _postingLayer = postingLayer)
    {
        postingLayer = _postingLayer;
        return postingLayer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ReportTitle.
    /// </summary>
    /// <param name="_reportTitle">
    /// The new value of the datacontract parameter ReportTitle;
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter ReportTitle.
    /// </returns>
    [
        DataMemberAttribute('ReportTitle'),
        SysOperationLabelAttribute(literalstr("@GeneralLedger:ReportTitle"))
    ]
    public ReportTitle parmReportTitle(Name  _reportTitle = reportTitle)
    {
        reportTitle = _reportTitle;

        return reportTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ToAccount.
    /// </summary>
    /// <param name="_toAccount">
    /// The new value of the datacontract parameter ToAccount;
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter ToAccount.
    /// </returns>
    [
        DataMemberAttribute('ToAccount'),
        SysOperationGroupMemberAttribute('DateAccount'),
        SysOperationDisplayOrderAttribute('4'),
        SysOperationLabelAttribute(literalstr("@SYS4081512"))
    ]
    public MainAccountNum parmToAccount(MainAccountNum _toAccount = toAccount)
    {
        toAccount = _toAccount;

        return toAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ToDate.
    /// </summary>
    /// <param name="_toDate">
    /// The new value of the datacontract parameter ToDate;
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter ToDate.
    /// </returns>
    [
        DataMemberAttribute('ToDate'),
        SysOperationGroupMemberAttribute('DateAccount'),
        SysOperationDisplayOrderAttribute('3')
    ]
    public Todate parmToDate(Todate _toDate = toDate)
    {
        toDate = _toDate;

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmERBinding</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter erBinding
    /// </summary>
    /// <param name = "_erBinding">ER format binding</param>
    /// <returns>ER format binding</returns>
    [
        DataMemberAttribute('FormatMapping'),
        SysOperationLabelAttribute(literalstr("@ElectronicReporting:FormatMapping")),
        SysOperationHelpTextAttribute(literalstr("@ElectronicReporting:FormatMapping")),
        SysOperationDisplayOrderAttribute('6')
    ]
    public ERFormatMappingId parmERBinding(ERFormatMappingId _erBinding = erBinding)
    {
        erBinding = _erBinding;
        return erBinding;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLocalizedAttributeNames</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter localizedAttributeNames.
    /// </summary>
    /// <param name = "_localizedAttributeNames">List of dimension names</param>
    /// <returns>List of dimension names</returns>
    [
        DataMemberAttribute,
        SysOperationLabelAttribute(literalStr("@SYS56299")),
        AifCollectionTypeAttribute('return', Types::String),
        SysOperationDisplayOrderAttribute('7')
    ]
    public List parmLocalizedAttributeNames(List _localizedAttributeNames = localizedAttributeNames)
    {
        localizedAttributeNames = _localizedAttributeNames;
        return localizedAttributeNames;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the SSRS report parameters are valid.
    /// </summary>
    /// <returns>
    /// true if the parameters are valid; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean ret = true;

        if (!fromDate)
        {
            //From date must be entered
            ret = checkFailed(strFmt("@SYS39376", "@SYS24050"));
        }

        if (ret && !toDate)
        {
            //To date must be entered
            ret = checkFailed(strFmt("@SYS39376", "@SYS36680"));
        }

        if (ret && fromDate > toDate)
        {
            // From date must be before To date
            ret = checkFailed("@SYS91020");
        }

        if (ret && fromAccount && toAccount && fromAccount > toAccount)
        {
            // The From account must be equal to or less than the To account.
            ret = checkFailed("@SYS326164");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimSelectType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets financial dimension selection type.
    /// </summary>
    /// <returns>Financial dimension selection type</returns>
    public ERFinDimensionsSelectType getDimSelectType()
    {
        return dimSelectType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimSetSelectType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets financial dimension set name.
    /// </summary>
    /// <returns>Financial dimension set name</returns>
    public DimensionSetName getDimSetSelectType()
    {
        return dimSetSelectType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAskForMainAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets if ask for main account.
    /// </summary>
    /// <returns>True if ask for main account; otherwise, false.</returns>
    public NoYes getAskForMainAccount()
    {
        return askForMainAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsMainAccountMandatory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets is main account mandatory.
    /// </summary>
    /// <returns>True if main account is mandatory; otherwise, false.</returns>
    public NoYes getIsMainAccountMandatory()
    {
        return isMainAccountMandatory;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>