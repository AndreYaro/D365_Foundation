<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostSubconProductReceipt</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class ProjPostSubConProductReceipt
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>proceed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post the product receipt
    /// </summary>
    /// <param name = "_purchId">Purchase number</param>
    /// <param name = "_productReceiptNumber">Product receipt number</param>
    /// <param name = "_receiptDate">Product receipt date</param>
    /// <returns>true, if product receipt posted successfully; otherwise, false</returns>
    public boolean proceed(PurchId _purchId, PackingSlipId _productReceiptNumber, AccountingDate _receiptDate)
    {
        return
            this.generateProductReceipt(_purchId, this.addToPurchLineList(_productReceiptNumber), _productReceiptNumber, _receiptDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateProductReceipt</Name>
				<Source><![CDATA[
    private boolean generateProductReceipt(PurchId _purchId, List _purchLineList, PackingSlipId _productReceiptNumber, AccountingDate _receiptDate)
    {
        boolean ret = true;
        PurchTable purchTable = PurchTable::find(_purchId);

        try
        {
            PurchFormLetter purchFromLetter = PurchFormLetter::construct(DocumentStatus::PackingSlip);
            purchFromLetter.createFromLines(true);
            purchFromLetter.parmLineList(_purchLineList.pack());
            purchFromLetter.update(purchTable, _productReceiptNumber,
                                   _receiptDate,
                                   PurchUpdate::ReceiveNow);
        }
        catch
        {
            ret = false;
            throw Exception::Error;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToPurchLineList</Name>
				<Source><![CDATA[
    private List addToPurchLineList(PackingSlipId _productReceiptNumber)
    {
        ProjSubconPOProductReceiptDetails projSubconPOProductReceiptDetails;
        List purchLineList = new List(Types::Record);

        while select SubconLinenumber, sum(Qty) from projSubconPOProductReceiptDetails
                group by projSubconPOProductReceiptDetails.SubconLinenumber
                    where projSubconPOProductReceiptDetails.SubConProductReceiptId == _productReceiptNumber
        {
            PurchLine purchLine = PurchLine::findBySubConLineNumber(projSubconPOProductReceiptDetails.SubConLineNumber, true);

            if (purchLine && projSubconPOProductReceiptDetails.Qty > 0)
            {
                purchLine.PurchReceivedNow = projSubconPOProductReceiptDetails.Qty;
                purchline.modifiedField(fieldNum(PurchLine, PurchReceivedNow));
                purchLineList.addEnd(purchLine);
            }
        }

        return purchLineList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProductReceiptStatusAndActuals</Name>
				<Source><![CDATA[
    public void updateProductReceiptStatusAndActuals(ProjSubConProductReceipt _projSubConProductReceipt)
    {
        ProjSubconPOProductReceiptDetails projSubconPOProductReceiptDetails;

        while select ActualsImportId from projSubconPOProductReceiptDetails
            where projSubconPOProductReceiptDetails.SubConProductReceiptId == _projSubConProductReceipt.SubConProductReceiptId
        {
            ProjCDSActualsImport projCDSActualsImport = ProjCDSActualsImport::findByActualId(projSubconPOProductReceiptDetails.ActualsImportId);
            this.updateProductReceiptIDInActuals(projCDSActualsImport, _projSubConProductReceipt.SubConProductReceiptId);
        }

        // Update receipt record status to posted after all process.
        _projSubConProductReceipt.selectForUpdate();
        _projSubConProductReceipt.Posted = NoYes::Yes;
        _projSubConProductReceipt.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProductReceiptIDInActuals</Name>
				<Source><![CDATA[
    private void updateProductReceiptIDInActuals(ProjCDSActualsImport _import, ProductReceiptId _productReceiptNum)
    {
        if (_import)
        {
            // Record processing result into import record
            _import.selectForUpdate(true);
            _import.SubConProductReceiptId = _productReceiptNum;

            if (_import.validateWrite())
            {
                _import.update();
            }
            else
            {
                throw Error("@Proj:UnableToSaveDueToErrors");
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>