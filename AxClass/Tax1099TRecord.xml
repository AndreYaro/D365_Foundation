<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Tax1099TRecord</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The first record in all electronic 1099 files, identifies the transmitter sending the file and includes information such as name, year, and postal address
/// </summary>
public class Tax1099TRecord extends Tax1099ElectronicEndRecord
{
    private const Tax1099ERecordType recordType_T = 'T'; /* Transmitter */
    private const str testIndicator = 'T';

    Tax1099PriorYearIndicator priorYearDataIndicator;
    boolean testFile;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new T-Record after given necessary information
    /// </summary>
    /// <param name = "_priorYearDataIndicator">Single character representing whether report shows prior year data</param>
    /// <param name = "_numberBRecords">The number of payees that will be present in the remainder of the report (optional)</param>
    /// <param name = "_testFile">Whether this is a test run of 1099 electronic file production</param>
    /// <returns>A new Tax1099TRecord</returns>
    public static Tax1099TRecord construct(Tax1099PriorYearIndicator _priorYearDataIndicator, int _numberBRecords, boolean _testFile = false)
    {
        return new Tax1099TRecord(_priorYearDataIndicator, _numberBRecords, _testFile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(Tax1099PriorYearIndicator _priorYearDataIndicator, int _numberBRecords, boolean _testFile)
    {
        super(_numberBRecords);

        priorYearDataIndicator = _priorYearDataIndicator;
        testFile = _testFile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the T-Record for use in electronic 1099 file
    /// </summary>
    /// <param name = "_realSequenceNumber">The line in which this record will appear in the file (Should always be 1 for T-Record)</param>
    /// <param name = "_calendarYear">The calendar year to which this file will belong </param>
    /// <param name = "_isCombinedFiling">Whether combined State/Federal filing is to be used for this file</param>
    /// <param name = "_localIRSPayerRec">Table buffer containing transaction information (Optional argument)</param>
    /// <returns>A Tax1099ERecord embodying a formatted, 750 character string</returns>
    public Tax1099ERecord generateRecord(real _realSequenceNumber,
                                         Tax1099CalendarYear _calendarYear,
                                         boolean _isCombinedFiling,
                                         Tax1099IRSPayerRec _localIRSPayerRec = null)
    {
        this.fillOutputRecord();

        // Record Type: Required. Enter T. Field Position: 1
        this.strInsert(recordType_T, 1);

        // Payment Year: Required. Field Position: 2-5
        this.strInsert(_calendarYear, 2);

        // Prior Year data Indicator: Required. Enter P only if reporting prior year data. Field Position: 6
        if (priorYearDataIndicator == 'P')
        {
            this.strInsert(priorYearDataIndicator, 6);
        }

        Tax1099TransmitterParameters tax1099TransmitterParameters = Tax1099TransmitterParameters::find();

        // Transmitter's TIN: Required. Field Position: 7-15
        this.strInsert(this.formatNumericOnly(tax1099TransmitterParameters.Tax1099RegNum), 7);

        // Transmitter's TCC (Transmitter Control Code): Required. Field Position: 16-20
        this.strInsert(tax1099TransmitterParameters.tcc, 16);

        // Blank Field Position: 21-27

        // Test file indicator: Required for test files only. Field Position: 28
        if (testFile)
        {
            this.strInsert(testIndicator, 28);
        }

        // Foreign Entity Indicator Field Position: 29
        if (tax1099TransmitterParameters.ForeignEntityIndicator == NoYes::Yes)
        {
            this.strInsert('1', 29);
        }

        if (tax1099TransmitterParameters.dba == '')
        {
            // Transmitter name: Required. Field Position: 30-69
            this.strInsert(subStr(tax1099TransmitterParameters.Name, 1, 40), 30);
        }
        else
        {
            // Transmitter name: Required. Field Position: 30-69
            this.strInsert(subStr(tax1099TransmitterParameters.dba, 1, 40), 30);

            // Transmitter name (continuation) Field Position: 70-109
            this.strInsert(subStr(tax1099TransmitterParameters.Name, 1, 40), 70);
        }

        // Company Name: Required. Field Position: 110-149
        this.strInsert(subStr(tax1099TransmitterParameters.Name, 1, 40), 110);

        // Company Name (continuation) Field Position: 150-189
        this.strInsert(subStr(tax1099TransmitterParameters.dba, 1, 40), 150);

        LogisticsPostalAddress postalAddress = LogisticsLocationEntity::location2PostalAddress(tax1099TransmitterParameters.Location);

        // Company Mailing Address: Required. Field Position: 190-229
        this.strInsert(this.formatStreet(postalAddress.Street), 190);

        // Company City: Required. Field Position: 230-269
        this.strInsert(subStr(postalAddress.City, 1, 40), 230);

        // Company State: Required. Field Position: 270-271
        this.strInsert(subStr(postalAddress.State, 1, 2), 270);

        // Company ZIP code: Required. Field Position: 272-280
        this.strInsert(this.formatNumericOnly(postalAddress.ZipCode), 272);

        // Blank. Field Position: 281-295

        // Total Number of Payees. Field Position: 296-303
        this.strInsert(num2Str0(numberOfBRecords, 8, 0, 0, 0), 296);

        // Contact Name: Required. Field Position: 304-343
        this.strInsert(subStr(tax1099TransmitterParameters.ContactPersonName, 1, 40), 304);

        // Contact Phone and Extension: Required. Field Position: 344-358
        this.strInsert(this.formatNumericOnly(tax1099TransmitterParameters.ContactPhone), 344);

        // Contact Email: Required, if available. Field Position: 359-408
        this.strInsert(subStr(tax1099TransmitterParameters.ContactEmail, 1, 50), 359);

        // Blank. Field Position: 409-499

        // Record Sequence Number: Required. Field Position: 500-507
        this.strInsert(num2Str0(_realSequenceNumber, 8, 0, 0, 0), 500);

        Tax1099SoftwareVendParameters tax1099SoftwareVendParameters = Tax1099SoftwareVendParameters::find();

        // Blank. Field Position: 508-517

        // Vendor Indicator: Required. Field Position: 518
        str 1 softwareVendInd = tax1099SoftwareVendParameters.SoftwareVendorIndicator == Tax1099SofwareVendorIndicator::Inhouse ? 'I' : 'V';
        this.strInsert(softwareVendInd, 518);

        LogisticsPostalAddress softwareVendor = LogisticsLocationEntity::location2PostalAddress(tax1099SoftwareVendParameters.Location);

        // Software Vendor Name: Required. Field Position: 519-558
        this.strInsert(subStr(tax1099SoftwareVendParameters.Name, 1, 40), 519);

        // Software Vendor Mailing Address: Required. Field Position: 559-598
        this.strInsert(this.formatStreet(softwareVendor.Street), 559);

        // Software Vendor City: Required. Field Position: 599-638
        this.strInsert(subStr(softwareVendor.City, 1, 40), 599);

        // Software Vendor State: Required. Field Position: 639-640
        this.strInsert(subStr(softwareVendor.State, 1, 2), 639);

        // Software Vendor ZIP code: Required. Field Position: 641-649
        this.strInsert(this.formatNumericOnly(softwareVendor.ZipCode), 641);

        // Software Vendor Contact: Required. Field Position: 650-689
        this.strInsert(subStr(tax1099SoftwareVendParameters.ContactName, 1, 40), 650);

        // Software VendorContact Phone and Extension: Required. Field Position: 690-704
        this.strInsert(this.formatNumericOnly(tax1099SoftwareVendParameters.Phone), 690);

        // Blank. Field Position: 705-739

        // Software Vendor Foreign Entity Indicator: Required. Field Position: 740
        if (tax1099SoftwareVendParameters.ForeignEntityIndicator == NoYes::Yes)
        {
            this.strInsert('1', 740);
        }

        return output;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>