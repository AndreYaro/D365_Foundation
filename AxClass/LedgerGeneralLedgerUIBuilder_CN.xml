<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerGeneralLedgerUIBuilder_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Provides user interface for LedgerGeneralLedgerReport.
/// </summary>
class LedgerGeneralLedgerUIBuilder_CN extends SrsReportDataContractExtendUIBuilder_CN
{
    FormBuildGroupControl   formBuildGroupControlPreprint;
    FormBuildGroupControl   formBuildGroupControlBlankPaper;

    DialogField     dialogFieldFromMainAccount;
    DialogField     dialogFieldToMainAccount;

    LedgerGeneralLedgerContract_CN              contract;
    LedgerDimensionExpressionBuilderHelper_CN   expressionBuilderHelper;

    const FieldGroupName PreprintedPaper = 'PreprintedPaper'; // The field group name used to show radio for "Preprinted paper"
    const FieldGroupName BlankPaper = 'BlankPaper'; // The field group name used to show radio for "Blank paper"

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds ledger general ledger UI.
    /// </summary>
    public void build()
    {
        contract = this.dataContractObject();

        super();

        formBuildGroupControlPreprint = this.dialog().formBuildDesign().control(PreprintedPaper);
        formBuildGroupControlPreprint.frameOptionButton(FormFrameOptionButton::Radio);
        formBuildGroupControlPreprint.optionValue(contract.parmPreprint());

        formBuildGroupControlBlankPaper = this.dialog().formBuildDesign().control(BlankPaper);
        formBuildGroupControlBlankPaper.frameOptionButton(FormFrameOptionButton::Radio);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postBuild</Name>
				<Source><![CDATA[
    public void postBuild()
    {
        super();

        dialogFieldFromMainAccount    = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(LedgerDetailDailyLedgerContract_CN, parmFromMainAccountNum));
        dialogFieldToMainAccount      = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(LedgerDetailDailyLedgerContract_CN, parmToMainAccountNum));

        LedgerDimensionExpressionBuilderHelper_CN::addDimensionExpressionBuilderToDialog(this.dialog());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public void getFromDialog()
    {
        FormGroupControl formGroupControlLocal;

        super();

        contract = this.dataContractObject();
        formGroupControlLocal = this.dialog().formRun().control(formBuildGroupControlPreprint.id());
        contract.parmPreprint(formGroupControlLocal.optionValue());

        contract.parmDimensionExpressionList(
            LedgerDimensionExpressionBuilderHelper_CN::expressionList2StringList(expressionBuilderHelper.getExpressionList()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    public void postRun()
    {
        super();

        DimensionExpressionBuilder builder = dialog.formRun().control(dialog.formRun().controlId(LedgerDimensionExpressionBuilderHelper_CN::DimensionFilterExpressionControlName));

        expressionBuilderHelper = LedgerDimensionExpressionBuilderHelper_CN::construct();
        expressionBuilderHelper.unpack(contract.parmPackedDimensionExpressionHelper());
        expressionBuilderHelper.parmExpressionBuilder(builder);
        expressionBuilderHelper.initExpressionBuilder();

        if (expressionBuilderHelper.getTargetList())
        {
            // Update dimension expression whose target list is empty here to ensure the dimension expression can be initialize for non-menu call.
            expressionBuilderHelper.updateDimensionExpression(dialogFieldFromMainAccount.value(), dialogFieldToMainAccount.value());
        }

        FormStringControl formControlMainAccountFrom = dialogFieldFromMainAccount.control();
        FormStringControl formControlMainAccountTo = dialogFieldToMainAccount.control();

        formControlMainAccountFrom.OnModified += eventhandler(this.mainAccountOnModified);
        formControlMainAccountTo.OnModified += eventhandler(this.mainAccountOnModified);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainAccountOnModified</Name>
				<Source><![CDATA[
    private void mainAccountOnModified(FormControl _sender, FormControlEventArgs _e)
    {
        expressionBuilderHelper.updateDimensionExpression(dialogFieldFromMainAccount.value(), dialogFieldToMainAccount.value());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>