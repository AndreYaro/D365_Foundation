<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxSettlementVATTaxAgent_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TaxSettlementVATTaxAgent_RU extends Tax
{
    TaxTrans                    taxTransSource;
    CustVendTransPostingLog_RU  postingLog;
    VendTrans                   vendTransInvoice,
                                vendTransPayment;

    LedgerPostingController     ledgerPostingController;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcPostAndInsertTaxes</Name>
				<Source><![CDATA[
    public container calcPostAndInsertTaxes(
        TaxAmount       _taxAmountAccounting,
        AmountMST       _baseAmountAccounting,
        TaxAmountCur    _taxAmountTransaction,
        AmountCur       _baseAmountTransaction,
        TaxAmount       _taxAmountReporting)
    {
        TaxTrans                taxTrans;
        CurrencyExchangeHelper  exchHelper;
        TaxTrans_W      taxTrans_W;
        TaxTrans_RU     taxTrans_RU;
        TaxCurrencyConversionRoutineHandler handler = TaxCurrencyConversionRoutineHandler::instance();

        ttsbegin;
        taxTrans.clear();
        taxTrans.data(taxTransSource);

        taxTrans_W = taxTrans.taxTrans_W();
        taxTrans_RU = taxTrans.taxTrans_RU();

        taxTrans.Source              = TaxModuleType::Tax;
        taxTrans.Voucher             = voucher;
        taxTrans.TransDate           = taxDate;
        taxTrans_W.VatDueDate_W        = max(taxDate, taxTransSource.taxTrans_W().VatDueDate_W);
        taxTrans.TaxAutogenerated    = NoYes::Yes;
        taxTrans.ExemptTax           = NoYes::No;
        taxTrans.TaxOrigin           = taxTransSource.TaxOrigin;
        taxTrans.TaxAmount           = _taxAmountAccounting;
        taxTrans.TaxBaseAmount       = _baseAmountAccounting;

        //Feature Sales Tax Conversion
        if (this.isTaxCurrencyConversionFeatureEnabled())
        {
            taxTrans.TaxBaseAmountCur   = handler.transCurrencyToTaxCurrency(taxTrans.SourceCurrencyCode, taxTrans.CurrencyCode, _baseAmountTransaction,
                                                                            exchRate,reportingCurrencyExchRate, taxDate);

            taxTrans.TaxBaseAmountRep   = handler.transCurrencyToReportingCurrency(taxTrans.SourceCurrencyCode, _baseAmountTransaction,
                                                                                reportingCurrencyExchRate, taxDate);

            taxTrans.TaxAmountCur       = handler.transCurrencyToTaxCurrency(taxTrans.SourceCurrencyCode, taxTrans.CurrencyCode, _taxAmountTransaction,
                                                                            exchRate,reportingCurrencyExchRate, taxDate);

            taxTrans.TaxAmountRep       = handler.transCurrencyToReportingCurrency(taxTrans.SourceCurrencyCode, _taxAmountTransaction,
                                                                                reportingCurrencyExchRate, taxDate);
        }
        else
        {
            if (taxTrans.CurrencyCode && taxTrans.CurrencyCode != CompanyInfoHelper::standardCurrency())
            {
                taxTrans.TaxBaseAmountCur = CurrencyExchangeHelper::curAmount(_baseAmountAccounting, taxTrans.CurrencyCode, taxDate);
                taxTrans.TaxAmountCur     = CurrencyExchangeHelper::curAmount(_taxAmountAccounting, taxTrans.CurrencyCode, taxDate);
            }
            else
            {
                taxTrans.TaxBaseAmountCur    = _baseAmountTransaction;
                taxTrans.TaxAmountCur        = _taxAmountTransaction;
            }
            taxTrans.TaxBaseAmountRep    = handler.transCurrencyToReportingCurrency(taxTrans.SourceCurrencyCode, _baseAmountTransaction,
                                                                                reportingCurrencyExchRate, taxDate);
            taxTrans.TaxAmountRep        = handler.transCurrencyToReportingCurrency(taxTrans.SourceCurrencyCode, _taxAmountTransaction,
                                                                                reportingCurrencyExchRate, taxDate);
        }


        taxTrans.SourceTaxAmountCur  = _taxAmountTransaction;
        taxTrans.SourceBaseAmountCur = _baseAmountTransaction;
        taxTrans.TaxDirection        = TaxDirection::VATTaxAgentCharged_RU;
        taxTrans.SourceTableId       = postingLog.TableId;
        taxTrans.SourceRecId         = postingLog.RecId;
        taxTrans_RU.vatTaxAgentVendAccount_RU = vendTransInvoice.AccountNum;

        taxTrans.packTaxTrans_W(taxTrans_W);
        taxTrans.packTaxTrans_RU(taxTrans_RU);

        taxTrans.insert();

        if ((_taxAmountTransaction || _taxAmountAccounting || _taxAmountReporting) && !vendTransPayment.Prepayment)
        {
            exchHelper = CurrencyExchangeHelper::newLedger(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId));
            exchHelper.parmExchangeRate1(_taxAmountTransaction ? abs(_taxAmountAccounting / _taxAmountTransaction * 100) : 0);
            if (_taxAmountReporting && _taxAmountTransaction)
            {
                exchHelper.parmReportingExchangeRate1(abs(_taxAmountReporting / _taxAmountTransaction * 100));
            }

            this.post(
                ledgerPostingController,
                taxTrans,
                _taxAmountTransaction,
                0,
                exchHelper,
                postingLog.LedgerDimension,
                0,
                0,
                LedgerDetailLevel::AsDefault,
                null,
                taxTrans.taxTrans_RU().OffsetLedgerDimension_RU,
                _taxAmountReporting);
        }

        ttscommit;

        return [_taxAmountTransaction, _taxAmountAccounting, _taxAmountReporting, taxTrans];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSettlement</Name>
				<Source><![CDATA[
    public void initFromSettlement(
        TaxTrans                     _taxTrans,
        LedgerPostingController      _ledgerPostingController,
        CustVendTransPostingLog_RU   _postingLog,
        VendTrans                    _vendTrans,
        VendTrans                    _vendTransPayment)
    {
        taxTransSource          = _taxTrans;
        vendTransInvoice        = _vendTrans;
        vendTransPayment        = _vendTransPayment;
        postingLog              = _postingLog;
        sourceCurrencyCode      = _taxTrans.SourceCurrencyCode;
        ledgerPostingController = _ledgerPostingController;
        taxDate                 = ledgerPostingController.getJournal().lastTransDate();
        voucher                 = ledgerPostingController.getJournal().lastVoucher();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>