<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EUSalesListReportingByTaxIdEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>EUSalesListReportingByTaxIdEngine</c> class prompts the user for inputs for company reports by Tax ID
///    and invokes the country specific report using the Tax regitration number and its country region ID.
/// </summary>
public class EUSalesListReportingByTaxIdEngine extends RunBaseBatch implements BatchRetryable
{
    private Args args;

    private TaxRegistrationNumber taxID;
    private TaxRegistration taxRegistration;

    private DialogField dialogTaxID;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialogTaxID = dialog.addFieldValue(extendedTypeStr(TaxRegistrationNumber), taxID, "@SYS125640");
        
        dialogTaxID.control().registerOverrideMethod(
            methodStr(FormStringControl, lookup),
            methodStr(EUSalesListReportingByTaxIdEngine, taxID_lookup),
            this);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxID_lookup</Name>
				<Source><![CDATA[
    public TaxRegistration taxID_lookup(FormStringControl _formControl)
    {
        TableLookup_RU lookUp;
        Query query = new Query();
        QueryBuildDataSource qbdsRegistrationNumber;
        QueryBuildDataSource qbdsTaxRegistrationLegislationTypes;
        QueryBuildDataSource qbdsTaxRegistrationTypeApplicabilityRule;
  
        lookUp = TableLookup_RU::newParameters(tableNum(TaxRegistration), _formControl);
        lookUp.addLookupfield(fieldNum(TaxRegistration, RegistrationNumber));
        lookUp.addLookupfield(fieldNum(TaxRegistration, TaxRegistrationTypeApplicabilityRule));

        query.validTimeStateDateRange(dateNull(), dateMax());
        qbdsRegistrationNumber = query.addDataSource(tableNum(TaxRegistration));
        qbdsTaxRegistrationLegislationTypes = qbdsRegistrationNumber.addDataSource(tableNum(TaxRegistrationLegislationTypes));
        qbdsTaxRegistrationLegislationTypes.joinMode(JoinMode::InnerJoin);
        qbdsTaxRegistrationLegislationTypes.relations(false);
        qbdsTaxRegistrationLegislationTypes.addLink(
            fieldNum(TaxRegistration, TaxRegistrationTypeApplicabilityRule),
            fieldNum(TaxRegistrationLegislationTypes, TaxRegistrationTypeApplicabilityRule));
        qbdsTaxRegistrationLegislationTypes.addRange(
            fieldNum(TaxRegistrationLegislationTypes, TaxRegistrationTypesList))
            .value(queryValue(TaxRegistrationTypesList::TAXID));
        
        lookUp.parmQuery(query);
        lookUp.performFormLookup();

        if (lookUp.getFoundCursor())
        {
            taxRegistration = lookUp.getFoundCursor();
        }

        return taxRegistration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
        TaxRegistrationTypeApplicabilityRule applicabilityRule = TaxRegistrationTypeApplicabilityRule::find(taxRegistration.TaxRegistrationTypeApplicabilityRule);
        LogisticsAddressCountryRegionISOCode countryISOCode = LogisticsAddressCountryRegion::find(applicabilityRule.CountryRegionId).ISOcode;

        EUSalesListReportingEngine euSalesListReportingEngine = EUSalesListReportingEngine::constructByCountryRegionId(countryISOCode);
        euSalesListReportingEngine.getLast(); 
        euSalesListReportingEngine.parmArgs(args);
        euSalesListReportingEngine.parmTaxRegistrationRecID(taxRegistration.RecId);

        if (euSalesListReportingEngine.prompt())
        {
            try
            {
                euSalesListReportingEngine.runOperation();
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }

            catch (Exception::Error)
            {
                throw error("@SYS93835");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        EUSalesListReportingByTaxIdEngine euSalesListReportingEngineByTaxId = new EUSalesListReportingByTaxIdEngine();

        euSalesListReportingEngineByTaxId.parmArgs(_args);

        if (euSalesListReportingEngineByTaxId.prompt())
        {
            euSalesListReportingEngineByTaxId.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmArgs</Name>
				<Source><![CDATA[
    public Args parmArgs(Args _args = args)
    {
        args = _args;
        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>