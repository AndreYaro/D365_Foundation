<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTrans_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(LedgerJournalTrans))]
public final class LedgerJournalTrans_ApplicationSuite_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>LedgerJournalTrans_skipCheckZeroAmountDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method skips the zero amount line validation on ledger journal lines.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// A <c>LedgerJournalTrans</c> table buffer.
    /// </param>
    /// <param name="_assetTransType">
    /// The transaction type.
    /// </param>
    /// <param name="_eventHandlerResult">
    /// <c>EventHandlerResult</c> object.
    /// </param>
    [SubscribesTo(tableStr(LedgerJournalTrans), delegateStr(LedgerJournalTrans, skipCheckZeroAmountDelegate))]
    public static void LedgerJournalTrans_skipCheckZeroAmountDelegate(
        LedgerJournalTrans _ledgerJournalTrans,
        AssetTransTypeJournal _assetTransType,
        EventHandlerResult _eventHandlerResult)
    {
        if ((FeatureStateProvider::isFeatureEnabled(PostingZeroInvoicesInGeneralLedgerFeature::instance())
                && _ledgerJournalTrans.isZeroInvoice_IT())
            || (LedgerJournalTrans::shouldSkipCheckZeroAmount_JP(_ledgerJournalTrans)))
        {
            _eventHandlerResult.result(true);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkipCheckZeroAmount_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the zero amount check should be skipped in Japan.
    /// </summary>
    /// <returns>
    /// True if the non-deductible sales tax field in <c>LedgerJournalTrans</c> is not zero.
    /// </returns>
    /// <remarks>
    /// Currently the non-deductible sales tax field in <c>LedgerJournalTrans</c> is only available
    /// when the tax adjustment on consolidated invoice for Japan feature is enabled.
    /// </remarks>
    private static boolean shouldSkipCheckZeroAmount_JP(LedgerJournalTrans _ledgerJournalTrans)
    {
        return (TaxConsInvoice_JP::isTaxDifferencePostingOnConsInvoiceEnabled(true)
            && _ledgerJournalTrans.ledgerJournalTransTaxExtension().TaxInCostPrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isZeroInvoiceSibling_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the journal line having zero amount. Such line must be in the same journal of the current one.
    /// </summary>
    /// <param name="_ledgerJournalACType">
    /// The account type.
    /// </param>
    /// <returns>
    /// true if journal line having zero amoun; otherwise false.
    /// </returns>
    public boolean isZeroInvoiceSibling_IT(LedgerJournalACType _ledgerJournalACType)
    {
        LedgerJournalTrans ledgerJournalTrans;

        if (LedgerJournalTable::find(this.JournalNum).JournalType == LedgerJournalType::VendInvoiceRegister)
        {
            select firstOnly RecId from ledgerJournalTrans
                where ledgerJournalTrans.JournalNum == this.JournalNum
                    && ledgerJournalTrans.Voucher == this.Voucher
                    && ledgerJournalTrans.TransDate == this.TransDate
                    && (ledgerJournalTrans.AccountType == _ledgerJournalACType
                        || ledgerJournalTrans.OffsetAccountType == _ledgerJournalACType)
                    && ledgerJournalTrans.Invoice
                    && !ledgerJournalTrans.AmountCurCredit
                    && !ledgerJournalTrans.AmountCurDebit
                    && (ledgerJournalTrans.RecId != this.RecId
                        || ledgerJournalTrans.OffsetLedgerDimension != 0);
        }
        else
        {
            select firstOnly RecId from ledgerJournalTrans
                where ledgerJournalTrans.JournalNum == this.JournalNum
                    && ledgerJournalTrans.Voucher == this.Voucher
                    && ledgerJournalTrans.TransDate == this.TransDate
                    && (ledgerJournalTrans.AccountType == _ledgerJournalACType
                        || ledgerJournalTrans.OffsetAccountType == _ledgerJournalACType)
                    && ledgerJournalTrans.Invoice
                    && !ledgerJournalTrans.AmountCurCredit
                    && !ledgerJournalTrans.AmountCurDebit;
        }

        return ledgerJournalTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isZeroInvoice_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks for journal lines having zero amount. Such lines must be in the same journal of the current one.
    /// </summary>
    /// <param name="_sysModule">
    /// The application module.
    /// </param>
    /// <returns>
    /// true if transaction with zero amount was found; otherwise false.
    /// </returns>
    public boolean isZeroInvoice_IT(SysModule _sysModule = SysModule::Ledger)
    {
        const container ACTypeCon = [LedgerJournalACType::Cust, LedgerJournalACType::Vend];
        LedgerJournalACType ledgerJournalACType;

        switch (_sysModule)
        {
            case SysModule::Cust:
                ledgerJournalACType = LedgerJournalACType::Cust;
                break;

            case SysModule::Vend:
                ledgerJournalACType = LedgerJournalACType::Vend;
                break;

            default:
                ledgerJournalACType = LedgerJournalACType::Ledger;
                break;
        }

        boolean ret;

        if (conFind(ACTypeCon, ledgerJournalACType)
            || LedgerJournalTable::find(this.JournalNum).JournalType == LedgerJournalType::Approval)
        {
            ret = this.isZeroInvoiceSibling_IT(ledgerJournalACType);
        }
        else
        {
            ret = (this.isZeroInvoiceSibling_IT(LedgerJournalACType::Vend)
                || this.isZeroInvoiceSibling_IT(LedgerJournalACType::Cust));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalTrans_onValidatedWrite_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Comlements validation for simulations purpose.
    /// </summary>
    /// <param name = "_sender">The sender objedt.</param>
    /// <param name = "_e">The event arguments.</param>
    [DataEventHandler(tableStr(LedgerJournalTrans), DataEventType::ValidatedWrite)]
    public static void ledgerJournalTrans_onValidatedWrite_IT(Common _sender, DataEventArgs _e)
    {
        if (FeatureStateProvider::isFeatureEnabled(GeneralLedgerSimulationsFeature::instance()))
        {
            ValidateEventArgs event = _e as ValidateEventArgs;
            LedgerJournalTrans ledgerJournalTrans = _sender as LedgerJournalTrans;
            if (event && ledgerJournalTrans)
            {
                boolean result = event.parmValidateResult();

                if (result
                    && ledgerJournalTrans.ledgerJournalTable().JournalType == LedgerJournalType::Daily
                    && ledgerJournalTrans.ledgerJournalTable().IsSimulation_IT()
                    && (ledgerJournalTrans.AccountType != LedgerJournalACType::Ledger
                        || ledgerJournalTrans.OffsetAccountType != LedgerJournalACType::Ledger))
                {
                    result = checkFailed("@ExtendedItallianLocalization:OnlyLedgerLedgerSimulationsAllowed");
                }

                event.parmValidateResult(result);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        #ISOCountryRegionCodes
        boolean ret = next validateWrite();

        if (ret
            && this.AccountType == LedgerJournalACType::Vend
            && this.PaymId != ''
            && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBE]))
        {
            ret = Bank_BE::checkPaymentId(this.PaymId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalTrans_onValidatedDelete_IT</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(LedgerJournalTrans), DataEventType::ValidatedDelete)]
    public static void ledgerJournalTrans_onValidatedDelete_IT(Common sender, DataEventArgs e)
    {
        if (FeatureStateProvider::isFeatureEnabled(GeneralLedgerSimulationsFeature::instance()))
        {
            LedgerJournalTrans ledgerJournalTrans = sender;
            ValidateEventArgs event = e as ValidateEventArgs;
            boolean result = event.parmValidateResult();

            if (result)
            {
                result = ledgerJournalTrans.checkSimulationPosted_IT();
            }

            event.parmValidateResult(result);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultAccount</Name>
				<Source><![CDATA[
    public void setDefaultAccount(
        boolean _isOffset,
        CustVendAC _custVendAC)
    {
        LedgerJournalType ledgerJournalType = this.ledgerJournalTable().JournalType;
        LedgerJournalACType prevAccountType, prevOffsetAccountType;
        DimensionDynamicAccount prevLedgerDimension, prevOffsetLedgerDimension;

        prevAccountType = this.AccountType;
        prevLedgerDimension = this.LedgerDimension;
        prevOffsetAccountType = this.OffsetAccountType;
        prevOffsetLedgerDimension = this.OffsetLedgerDimension;

        next setDefaultAccount(_isOffset, _custVendAC);

        if (ledgerJournalType == LedgerJournalType::Daily
            && this.ledgerJournalTable().IsSimulation_IT()
            && FeatureStateProvider::isFeatureEnabled(GeneralLedgerSimulationsFeature::instance()))
        {
            //restore previous values
            this.AccountType = prevAccountType;
            this.LedgerDimension = prevLedgerDimension;
            this.OffsetAccountType = prevOffsetAccountType;
            this.OffsetLedgerDimension = prevOffsetLedgerDimension;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustSimulationTransaction_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets tax grouop fields if simulation is posted.
    /// </summary>
    public void adjustSimulationTransaction_IT()
    {
        if (this.ledgerJournalTable().SimulationPosted_IT
            && (this.TaxGroup || this.TaxItemGroup))
        {
            this.TaxGroup = '';
            this.TaxItemGroup = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSimulationPosted_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if journal has posted simulation.
    /// </summary>
    /// <returns>true if journal has posted simulation; false otherwise.</returns>
    public boolean checkSimulationPosted_IT()
    {
        boolean ret = true;
        LedgerJournalTable ledgerJournalTable = this.ledgerJournalTable();

        if (ledgerJournalTable.JournalType == LedgerJournalType::Daily
            && ledgerJournalTable.IsSimulation_IT()
            && ledgerJournalTable.SimulationPosted_IT)
        {
            ret = checkFailed("@ExtendedItallianLocalization:SimulationPostedTransactionsCannotBeDeleted");
        }

        return ret;

    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIntentLetterId_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if intent letter is open.
    /// </summary>
    /// <returns>true if intent letter is open; false otherwise.</returns>
    public boolean checkIntentLetterId_IT()
    {
        IntentLetter_IT intentLetter;
        boolean ok = true;

        if (this.IntentLetterId_IT)
        {
            intentLetter = IntentLetter_IT::find(this.IntentLetterId_IT);

            if (intentLetter.Status != IntentLetterStatus_IT::Open)
            {
                ok = checkFailed(strfmt("@ExtendedItallianLocalization:LeterIsInStatus", intentLetter.IntentLetterId, intentLetter.Status));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPlafondDate_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes plafond date.
    /// </summary>
    public void initPlafondDate_IT()
    {
        switch(VendParameters::find().PlafondDateProposal_IT)
        {
            case PlafondDateProposal_IT::PostingDate:
                this.PlafondDate_IT = this.TransDate;
                break;

            case PlafondDateProposal_IT::DocumentDate:
                this.PlafondDate_IT = this.DocumentDate;
                break;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>initUsualExporter_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes intent letter fields.
    /// </summary>
    public void initUsualExporter_IT()
    {
        if (this.AccountType != LedgerJournalACType::Vend 
            || !this.LedgerDimension
            || this.TransactionType == LedgerTransType::GeneralJournal)
        {
            return;
        }

        DimensionAttributeValueCombination dimAttrValueCombination;
        select firstonly DisplayValue from dimAttrValueCombination
            where dimAttrValueCombination.RecId == this.LedgerDimension;

        VendAccount vendAccount = dimAttrValueCombination.DisplayValue;

        TransDate refDate = this.DocumentDate ? this.DocumentDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        IntentLetter_IT intentLetter = IntentLetter_IT::findActiveIntentLetterByType(
            vendAccount,
            IntentLetterType_IT::Period,
            refDate);

        this.TaxGroup = VendTable::find(vendAccount).TaxGroup;
        this.IntentLetterId_IT = '';

        if (intentLetter)
        {
            if (VendParameters::find().PlafondTaxGroup_IT)
            {
                this.IntentLetterId_IT = intentLetter.IntentLetterId;
                this.TaxGroup = VendParameters::find().PlafondTaxGroup_IT;
                info("@ExtendedItallianLocalization:UsExpTaxGroupUsed");
            }
        }
        else
        {
            select firstonly RecId from intentLetter
                where intentLetter.VendAccount == vendAccount
                    && intentLetter.IntentLetterType != IntentLetterType_IT::Period
                    && intentLetter.Status == IntentLetterStatus_IT::Open
                    && (intentLetter.IntentLetterType == IntentLetterType_IT::SpecificOperation ||
                        (intentLetter.FromDate <= refDate && intentLetter.ToDate >= refDate));

            if (intentLetter)
            {
                info("@ExtendedItallianLocalization:IntentLettersArePresent");
            }
        }


        if (!intentLetter)
        {
            if (VendParameters::find().PlafondTaxGroup_IT && this.TaxGroup == VendParameters::find().PlafondTaxGroup_IT)
            {
                warning("@ExtendedItallianLocalization:UsExpTaxGroupUsedButNoActiveLetters");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        next modifiedField(_fieldId);

        if (_fieldId == fieldnum(LedgerJournalTrans, IntentLetterId_IT) && FeatureStateProvider::isFeatureEnabled(PlafondFeature::instance()))
        {
            LedgerJournalEngine ledgerJournalEngine = new LedgerJournalEngine();
            ledgerJournalEngine.intentLetterIdModified_IT(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _field)
    {
        boolean ret = next validateField(_field);

        if (_field == fieldnum(LedgerJournalTrans, IntentLetterId_IT) && FeatureStateProvider::isFeatureEnabled(PlafondFeature::instance()))
        {
            ret = ret && this.checkIntentLetterId_IT();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>iso20022EndToEndId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets ISO20022 end to end identifier as composed value from voucher, separator, last symbols of
    /// the recId value for the current record and record count.
    /// </summary>
    /// <returns>
    /// The identifier value.
    /// </returns>
    public str iso20022EndToEndId()
    {
        str ret = next iso20022EndToEndId();

        CustVendProcessedPayment custVendProcessedPayment;
        select count(RecId) from custVendProcessedPayment 
            where custVendProcessedPayment.RefRecId == this.RecId;

        ret += '_' + num2Str0(custVendProcessedPayment.RecId, 2);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCzCustVendAdvanceInvoiceLink</Name>
				<Source><![CDATA[
    internal void updateCzCustVendAdvanceInvoiceLink()
    {
        LedgerJournalTrans this_orig = this.orig();

        if (this.TransDate != this_orig.TransDate)
        {
            CzCustAdvanceInvoiceLink czCustAdvanceInvoiceLink;
            update_recordset czCustAdvanceInvoiceLink
                setting TransDate = this.TransDate
                where czCustAdvanceInvoiceLink.Voucher == this.Voucher
                    && czCustAdvanceInvoiceLink.TransDate == this_orig.TransDate
                    && czCustAdvanceInvoiceLink.PaymentCompany == this.DataAreaId;

            CzVendAdvanceInvoiceLink czVendAdvanceInvoiceLink;
            update_recordset czVendAdvanceInvoiceLink
                setting TransDate = this.TransDate
                where czVendAdvanceInvoiceLink.Voucher == this.Voucher
                    && czVendAdvanceInvoiceLink.TransDate == this_orig.TransDate
                    && czVendAdvanceInvoiceLink.PaymentCompany == this.DataAreaId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultDimensionForCamt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes default dimension based on customer/vendor transaction.
    /// </summary>
    /// <returns>Default dimension.</returns>
    public LedgerDimensionValueSet initDefaultDimensionForCamt()
    {
        #ISOCountryRegionCodes
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]) || !CustPaymentSkipInitDefaultDimensionFromCustTransFlight::instance().isEnabled())
        {
            this.DefaultDimension = this.getDefaultDimensionFromCustTrans(this.findCustTransByPaymId());
        }

        return this.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDimensionFromCustTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns default dimension based on customer or vendor transaction linked by payment ID.
    /// </summary>
    /// <param name = "_custVendTrans">Customer/vendor transaction record.</param>
    /// <returns>ID of default dimension.</returns>
    public DimensionDefault getDefaultDimensionFromCustTrans(CustTrans _custTrans)
    {
        DimensionDefault ret;

        if (_custTrans)
        {
            ret = CustPaymModeTable::setDefaultDimension(this.PaymMode, _custTrans.DefaultDimension, 0);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustTransByPaymId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds related customer/vendor transaction by payment ID.
    /// </summary>
    /// <returns>CustVendTrans of related transaction.</returns>
    public CustTrans findCustTransByPaymId()
    {
        CustTrans custTrans;

        if (!this.PaymId)
        {
            return custTrans;
        }

        select firstonly custTrans where custTrans.PaymId == this.PaymId;

        return custTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>