<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjListProjHelpClass</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjListProjHelpClass
{
    AssetId                         assetId,                    oldAssetId;
    CustAccount                     custAccount,                oldCustAccount;
    ProjTmpStr45                    contractFundingSourceId,    oldContractFundingSourceId;
    ProjFundingSourceRefId          fundingSourceRefId,         oldFundingSourceRefId;
    ProjId                          projId,                     oldProjId;
    ProjInvoiceProjId               projInvoiceProjId,          oldprojInvoiceProjId;
    ProjGroupId                     projGroupId,                oldprojGroupId;
    ProjName                        name;
    ProjResponsibleWorker           responsible,                oldresponsible;
    ProjResponsibleFinancialWorker  responsibleFinancial,       oldresponsibleFinancial;
    ProjResponsibleSalesWorker      responsibleSales,           oldResponsibleSales;
    ProjSort                        sorting1,                   oldsorting1;
    ProjSort                        sorting2,                   oldsorting2;
    ProjSort                        sorting3,                   oldsorting3;
    ProjType                        projType,                   oldprojType;
    ProjWipId                       projWipId,                  oldprojWIPId;

    ProjListStateProjType       projListStateProjType;
    projStatement               projStatement;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkIdChanged</Name>
				<Source><![CDATA[
    public boolean checkIdChanged()
    {
        switch (this.parmStateProjType())
        {
            case ProjListStateProjType::Project:
                if (oldProjId && (projId != oldProjId))
                {
                    return true;
                }
                break;

            case ProjListStateProjType::Asset:
                if (oldAssetId && (assetId != oldAssetId))
                {
                    return true;
                }
                break;

            case ProjListStateProjType::Customer:
                if (oldCustAccount && (custAccount != oldCustAccount))
                {
                    return true;
                }
                break;

            case ProjListStateProjType::ProjGroup:
                if (oldprojGroupId && (projGroupId != oldprojGroupId))
                {
                    return true;
                }
                break;

            case ProjListStateProjType::WIPProject:
                if (oldprojWIPId && (projWipId != oldprojWIPId))
                {
                    return true;
                }
                break;

            case ProjListStateProjType::InvoiceProject:
                if (oldprojInvoiceProjId && (projInvoiceProjId != oldprojInvoiceProjId))
                {
                    return true;
                }
                break;

            case ProjListStateProjType::Responsible:
                if (oldresponsible && (responsible != oldresponsible))
                {
                    return true;
                }
                break;

            case ProjListStateProjType::ResponsibleFinancial:
                if (oldresponsibleFinancial && (responsibleFinancial != oldresponsibleFinancial))
                {
                    return true;
                }
                break;

            case ProjListStateProjType::ResponsibleSales:
                if (responsibleSales != oldResponsibleSales)
                {
                    return true;
                }
                break;

            case ProjListStateProjType::Type:
                if ((projType != oldprojType))
                {
                    return true;
                }
                break;

            case ProjListStateProjType::Sorting1:
                if (oldsorting1 && (sorting1 != oldsorting1))
                {
                    return true;
                }
                break;

            case ProjListStateProjType::Sorting2:
                if (oldsorting2 && (sorting2 != oldsorting2))
                {
                    return true;
                }
                break;

            case ProjListStateProjType::Sorting3:
                if (oldsorting3 && (sorting3 != oldsorting3))
                {
                    return true;
                }
                break;

            case ProjListStateProjType::FundingSource:
                if (oldContractFundingSourceId && (contractFundingSourceId != oldContractFundingSourceId))
                {
                    return true;
                }
                break;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>id</Name>
				<Source><![CDATA[
    ProjTmpStr45 id()
    {
        ProjTmpStr45 returnId;

        switch (this.parmStateProjType())
        {
            case ProjListStateProjType::Project:
                returnId    = oldProjId;
                break;

            case ProjListStateProjType::Customer:
                returnId    = oldCustAccount;
                break;

            case ProjListStateProjType::ProjGroup:
                returnId    = oldprojGroupId;
                break;

            case ProjListStateProjType::WIPProject:
                returnId    = oldprojWIPId;
                break;

            case ProjListStateProjType::InvoiceProject:
                returnId    = oldprojInvoiceProjId;
                break;

            case ProjListStateProjType::Responsible:
                returnId    = HcmWorker::find(oldresponsible).PersonnelNumber;
                break;

            case ProjListStateProjType::ResponsibleFinancial:
                returnId    = HcmWorker::find(oldresponsibleFinancial).PersonnelNumber;
                break;

            case ProjListStateProjType::ResponsibleSales:
                returnId    = HcmWorker::find(oldResponsibleSales).PersonnelNumber;
                break;

            case ProjListStateProjType::Type:
                returnId    = enum2str(oldprojType);
                break;

            case ProjListStateProjType::Sorting1:
                returnId    = oldsorting1;
                break;

            case ProjListStateProjType::Sorting2:
                returnId    = oldsorting2;
                break;

            case ProjListStateProjType::Sorting3:
                returnId    = oldsorting3;
                break;

            case ProjListStateProjType::Asset:
                returnId    = oldAssetId;
                break;

            case ProjListStateProjType::FundingSource:
                returnId    = oldContractFundingSourceId;
                break;
        }

        return returnId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>idNew</Name>
				<Source><![CDATA[
    ProjTmpStr45 idNew()
    {
        ProjTmpStr45 returnId;

        switch (this.parmStateProjType())
        {
            case ProjListStateProjType::Project:
                returnId    = projId;
                break;

            case ProjListStateProjType::Customer:
                returnId    = custAccount;
                break;

            case ProjListStateProjType::ProjGroup:
                returnId    = projGroupId;
                break;

            case ProjListStateProjType::WIPProject:
                returnId    = projWipId;
                break;

            case ProjListStateProjType::InvoiceProject:
                returnId    = projInvoiceProjId;
                break;

            case ProjListStateProjType::Responsible:
                returnId    = HcmWorker::find(responsible).PersonnelNumber;
                break;

            case ProjListStateProjType::ResponsibleFinancial:
                returnId    = HcmWorker::find(responsibleFinancial).PersonnelNumber;
                break;

            case ProjListStateProjType::ResponsibleSales:
                returnId    = HcmWorker::find(responsibleSales).PersonnelNumber;
                break;

            case ProjListStateProjType::Type:
                returnId    = enum2str(projType);
                break;

            case ProjListStateProjType::Sorting1:
                returnId    = sorting1;
                break;

            case ProjListStateProjType::Sorting2:
                returnId    = sorting2;
                break;

            case ProjListStateProjType::Sorting3:
                returnId    = sorting3;
                break;

            case ProjListStateProjType::Asset:
                returnId    = assetId;
                break;

            case ProjListStateProjType::FundingSource:
                returnId    = contractFundingSourceId;
                break;
        }

        return returnId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    public ProjName name()
    {
        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjStatement</Name>
				<Source><![CDATA[
    public projStatement parmProjStatement(projStatement _projStatement = projStatement)
    {
        projStatement   = _projStatement;

        return projStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStateProjType</Name>
				<Source><![CDATA[
    public ProjListStateProjType parmStateProjType(ProjListStateProjType _projListStateProjType = projListStateProjType)
    {
        projListStateProjType   = _projListStateProjType;

        return projListStateProjType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setId</Name>
				<Source><![CDATA[
    public void setId(ProjTable projTableLocal, ProjId levelProjId, ProjFundingSource projFundingSource = null)
    {
        switch (this.parmStateProjType())
        {
            case ProjListStateProjType::Project:
                projId      = levelProjId;
                break;

            case ProjListStateProjType::Customer:
                if (! projTableLocal.CustAccount)
                {
                    custAccount   = "@SYS78757";
                }
                else
                {
                    custAccount = projTableLocal.CustAccount;
                }
                break;

            case ProjListStateProjType::ProjGroup:
                if (! projTableLocal.ProjGroupId)
                {
                    projGroupId   = "@SYS78757";
                }
                else
                {
                    projGroupId = projTableLocal.ProjGroupId;
                }
                break;

            case ProjListStateProjType::WIPProject:
                if (! projTableLocal.wipProject)
                {
                    projWipId   = "@SYS78757";
                }
                else
                {
                    projWipId   = projTableLocal.wipProject;
                }
                break;

            case ProjListStateProjType::InvoiceProject:
                if (! projTableLocal.ProjInvoiceProjId)
                {
                    projInvoiceProjId   = "@SYS78757";
                }
                else
                {
                    projInvoiceProjId = projTableLocal.ProjInvoiceProjId;
                }
                break;

            case ProjListStateProjType::Responsible:
                if (! projTableLocal.WorkerResponsible)
                {
                    responsible = 0;
                }
                else
                {
                    responsible = projTableLocal.WorkerResponsible;
                }
                break;

            case ProjListStateProjType::ResponsibleFinancial:
                if (! projTableLocal.WorkerResponsibleFinancial)
                {
                    responsibleFinancial   = 0;
                }
                else
                {
                    responsibleFinancial   = projTableLocal.WorkerResponsibleFinancial;
                }
                break;

            case ProjListStateProjType::ResponsibleSales:
                if (! projTableLocal.WorkerResponsibleSales)
                {
                    responsibleSales   = 0;
                }
                else
                {
                    responsibleSales   = projTableLocal.WorkerResponsibleSales;
                }
                break;

            case ProjListStateProjType::Type:
                projType    = projTableLocal.Type;
                break;

            case ProjListStateProjType::Sorting1:
                if (! projTableLocal.SortingId[1])
                {
                    sorting1    = "@SYS78757";
                }
                else
                {
                    sorting1    = projTableLocal.SortingId[1];
                }
                break;

            case ProjListStateProjType::Sorting2:
                if (! projTableLocal.SortingId[2])
                {
                    sorting2    = "@SYS78757";
                }
                else
                {
                    sorting2    = projTableLocal.SortingId[2];
                }
                break;

            case ProjListStateProjType::Sorting3:
                if (! projTableLocal.SortingId[3])
                {
                    sorting3    = "@SYS78757";
                }
                else
                {
                    sorting3    = projTableLocal.SortingId[3];
                }
                break;

            case ProjListStateProjType::Asset:
                if (! projTableLocal.AssetId)
                {
                    sorting3    = "@SYS78757";
                }
                else
                {
                    sorting3    = projTableLocal.AssetId;
                }
                break;

            case ProjListStateProjType::FundingSource:
                if ((! projTableLocal.ProjInvoiceProjId) || (!projFundingSource.FundingSourceId) )
                {
                    contractFundingSourceId    = "@SYS78757";
                    fundingSourceRefId   = 0;
                }
                else
                {
                    contractFundingSourceId = projFundingSource.FundingSourceId;
                    fundingSourceRefId = projFundingSource.RecId;
                    projInvoiceProjId = projTableLocal.ProjInvoiceProjId;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setName</Name>
				<Source><![CDATA[
    public void setName()
    {
        switch (this.parmStateProjType())
        {
            case ProjListStateProjType::Project:
                if (oldProjId   == '*')
                {
                    name        = '';
                }
                else
                {
                    name        = ProjTable::findLike(oldProjId).Name;
                }
                break;

            case ProjListStateProjType::Customer:
                name        = CustTable::find(oldCustAccount).name();
                break;

            case ProjListStateProjType::ProjGroup:
                name        = ProjGroup::find(oldprojGroupId).Name;
                break;

            case ProjListStateProjType::WIPProject:
                name        = ProjWIPTable::find(oldprojWIPId).Description;
                break;

            case ProjListStateProjType::InvoiceProject:
                name        = ProjInvoiceTable::find(oldprojInvoiceProjId).Description;
                break;

            case ProjListStateProjType::Responsible:
                name        = HcmWorker::find(oldresponsible).name();
                break;

            case ProjListStateProjType::ResponsibleFinancial:
                name        = HcmWorker::find(oldresponsibleFinancial).name();
                break;

            case ProjListStateProjType::ResponsibleSales:
                name        = HcmWorker::find(oldResponsibleSales).name();
                break;

            case ProjListStateProjType::Type:
                name        = enum2str(oldprojType);
                break;

            case ProjListStateProjType::Sorting1:
                name        = ProjSorting::find(oldsorting1,0).Description;
                break;

            case ProjListStateProjType::Sorting2:
                name        = ProjSorting::find(oldsorting2,1).Description;
                break;

            case ProjListStateProjType::Sorting3:
                name        = ProjSorting::find(oldsorting3,2).Description;
                break;

            case ProjListStateProjType::Asset:
                name        = AssetTable::find(oldProjId).Name;
                break;

            case ProjListStateProjType::FundingSource:

                name        = ProjFundingSource::findContractFundingSource(oldprojInvoiceProjId, oldContractFundingSourceId).name();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOld</Name>
				<Source><![CDATA[
    public void setOld()
    {
        oldAssetId              =    assetId;
        oldProjId                   = projId;
        oldCustAccount              = custAccount;
        oldprojWIPId                = projWipId;
        oldprojInvoiceProjId        = projInvoiceProjId;
        oldprojGroupId              = projGroupId;
        oldresponsible              = responsible;
        oldresponsibleFinancial     = responsibleFinancial;
        oldResponsibleSales         = responsibleSales;
        oldsorting1                 = sorting1;
        oldsorting2                 = sorting2;
        oldsorting3                 = sorting3;
        oldprojType                 = projType;
        oldContractFundingSourceId  = contractFundingSourceId;
        oldFundingSourceRefId       = fundingSourceRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParmField</Name>
				<Source><![CDATA[
    public void setParmField()
    {
        switch (this.parmStateProjType())
        {
            case ProjListStateProjType::Customer:
                projStatement.parmCustAccount(custAccount);
                break;

            case ProjListStateProjType::ProjGroup:
                projStatement.parmProjGroupId(projGroupId);
                break;

            case ProjListStateProjType::WIPProject:
                projStatement.parmProjWIPId(projWipId);
                break;

            case ProjListStateProjType::InvoiceProject:
                projStatement.parmProjInvoiceProjId(projInvoiceProjId);
                break;

            case ProjListStateProjType::Responsible:
                projStatement.parmResponsibleWorker(responsible);
                break;

            case ProjListStateProjType::ResponsibleFinancial:
                projStatement.parmResponsibleFinancialWorker(responsibleFinancial);
                break;

            case ProjListStateProjType::ResponsibleSales:
                projStatement.parmResponsibleSalesWorker(responsibleSales);
                break;

            case ProjListStateProjType::Type:
                projStatement.parmProjType(projType);
                break;

            case ProjListStateProjType::Sorting1:
                projStatement.parmSorting1(sorting1);
                break;

            case ProjListStateProjType::Sorting2:
                projStatement.parmSorting2(sorting2);
                break;

            case ProjListStateProjType::Sorting3:
                projStatement.parmSorting3(sorting3);
                break;

            case ProjListStateProjType::FundingSource:
                projStatement.parmFundingSource(fundingSourceRefId);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ab2avb</Name>
				<Source><![CDATA[
    public static projActualVsBudget ab2avb(ProjActualBudget _projActualBudget)
    {
        projActualVsBudget  actualVsBudget;

        switch (_projActualBudget)
        {
            case ProjActualBudget::Deviation :
                actualVsBudget = projActualVsBudget::Deviation;
                break;

            case ProjActualBudget::Sum_ :
                actualVsBudget = projActualVsBudget::Sum_;
                break;

            default :
                actualVsBudget = ProjListProjHelpClass::handleCustomProjActualBudget(_projActualBudget);
        }

        return actualVsBudget;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleCustomProjActualBudget</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieve the additional value based on the <c>ProjActualBudget</c> enum.
    /// </summary>
    /// <param name = "_projActualBudget">
    ///     A <c>ProjActualBudget</c> value.
    /// </param>
    /// <returns>
    ///     A <c>projActualVsBudget</c> enum value if a valid <c>ProjActualBudget</c> is present, otherwise an exception is thrown.
    /// </returns>
    [Replaceable]
    protected static projActualVsBudget handleCustomProjActualBudget(ProjActualBudget _projActualBudget)
    {
        throw Exception::FunctionArgument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcActualVsBudget</Name>
				<Source><![CDATA[
    public static real calcActualVsBudget(real _actual, real _budget, projActualVsBudget _projActualVsBudget, boolean isCost = false)
    {
        real    ret;

        switch (_projActualVsBudget)
        {
            case projActualVsBudget::Deviation :
                if (isCost)
                {
                    ret = _budget - _actual;
                }
                else
                {
                    ret = _actual - _budget;
                }
                break;

            case projActualVsBudget::Sum_ :
                ret = _actual + _budget;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>descActualVsBudget</Name>
				<Source><![CDATA[
    public static LabelDescription descActualVsBudget(projActualVsBudget _projActualVsBudget)
    {
        LabelDescription    ret;
        DictEnum            dictEnum;

        dictEnum = new DictEnum(enumNum(projActualVsBudget));

        ret = dictEnum.value2Label(_projActualVsBudget);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newListProjConsumption</Name>
				<Source><![CDATA[
    public static ProjListProjHelpClass newListProjConsumption(projStatement _projStatement, ProjListStateProjType _projListStateProjType)
    {
        ProjListProjHelpClass projHelpClass = new ProjListProjHelpClass();

        projHelpClass.parmProjStatement(_projStatement);
        projHelpClass.parmStateProjType(_projListStateProjType);

        return projHelpClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjId</Name>
				<Source><![CDATA[
    public static ProjId setProjId(
        ProjTable               _projTable,
        ProjListStateProjType   _stateProjType,
        Level                   _level)
    {
        ProjTable   tmpProjTable = _projTable;
        ProjId      tmpProjId;
        NoYes       thisLevel;

        if (_stateProjType == ProjListStateProjType::Project)
        {
            if (_level)
            {
                thisLevel = (_level == tmpProjTable.level()) ? NoYes::Yes : NoYes::No;

                tmpProjId = '';

                if (thisLevel && tmpProjTable.childExist())
                {
                    tmpProjId      = tmpProjTable.ProjId + '*';
                }
                else
                {
                    if (!thisLevel && (_level != 0))
                    {
                        while (tmpProjTable.level() > _level)
                        {
                            tmpProjTable   = ProjTable::find(tmpProjTable.ParentId);
                            tmpProjId      = tmpProjTable.ProjId + '*';
                        }
                    }
                }

                if (!tmpProjId)
                {
                    tmpProjId = tmpProjTable.ProjId;
                }
            }
            else
            {
                tmpProjId = '*';
            }
        }
        else
        {
            tmpProjId   = tmpProjTable.ProjId;
        }

        return tmpProjId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>