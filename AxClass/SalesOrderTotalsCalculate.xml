<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesOrderTotalsCalculate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Calculates totals for a sales order
/// </summary>
public class SalesOrderTotalsCalculate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateTotalsForAllOrders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates totals for all orders.
    /// Orders that are not modified since the last recalculation are ignored.
    /// </summary>
    /// <param name = "_cutOffDateTime">
    /// All orders that were updated before the cut-off datetime are also ignored for recalculation.
    /// </param>
    public static void calculateTotalsForAllOrders(utcdatetime _cutOffDateTime = DateTimeUtil::minValue())
    {
        using (var activityContext = SalesTotalsCalculateInstrumentationLogger::createLogger(classStr(SalesOrderTotalsCalculate)).salesTotalsCalculateActivities().calculateTotalsForAllOrders())
        {
            utcdatetime updateDateTime = DateTimeUtil::utcNow();
            SalesOrderLastChangeDateV2 lastChange;

            QueryRun queryRun = new QueryRun(SalesOrderTotalsCalculate::createQuery(_cutOffDateTime));

            while(queryRun.next())
            {
                lastChange = queryRun.get(tableNum(SalesOrderLastChangeDateV2));

                SalesOrderTotalsCalculate::calculateTotalsForOrder(lastChange.SalesId, updateDateTime);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuery</Name>
				<Source><![CDATA[
    internal static Query createQuery(utcdatetime _cutOffDateTime)
    {
        Query query = new Query();

        QueryBuildDataSource qbdsSalesOrderLastChangeDate = query.addDataSource(tableNum(SalesOrderLastChangeDateV2));
        qbdsSalesOrderLastChangeDate.addSelectionField(fieldNum(SalesOrderLastChangeDateV2, SalesId));

        SalesOrderTotalsCalculate::addDateRangesToChangeTrackingDataSource(qbdsSalesOrderLastChangeDate, _cutOffDateTime);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDateRangesToChangeTrackingDataSource</Name>
				<Source><![CDATA[
    internal static void addDateRangesToChangeTrackingDataSource(QueryBuildDataSource _qbdsSalesOrderLastChangeDate, utcdatetime _cutOffDateTime)
    {
        QueryBuildDataSource qbdsLastChangeCharge;

        _qbdsSalesOrderLastChangeDate.addRange(fieldNum(SalesOrderLastChangeDateV2, HeaderLastModifiedDateTime)).
            value(strFmt('((%1.%2 >= %4) || (%1.%3 >= %4))',
            _qbdsSalesOrderLastChangeDate.name(),
            fieldStr(SalesOrderLastChangeDateV2, HeaderLastModifiedDateTime),
            fieldStr(SalesOrderLastChangeDateV2, LineLastModifiedDateTime),
            DateTimeUtil::toStr(_cutOffDateTime)));

        QueryBuildDataSource qbdsSalesOrderTotals;

        if (isConfigurationkeyEnabled(configurationKeyNum(Markup)))
        {
            qbdsLastChangeCharge = _qbdsSalesOrderLastChangeDate.addDataSource(tableNum(SalesOrderChargeLastChangeDate));
            qbdsLastChangeCharge.relations(false);
            qbdsLastChangeCharge.addLink(fieldNum(SalesOrderLastChangeDateV2, SalesId), fieldNum(SalesOrderChargeLastChangeDate, SalesId));
            qbdsLastChangeCharge.joinMode(JoinMode::InnerJoin);

            _qbdsSalesOrderLastChangeDate.addRange(fieldNum(SalesOrderLastChangeDateV2, HeaderLastModifiedDateTime)).
            value(strFmt('((%1.%2 >= %4) || (%1.%3 >= %4))',
            qbdsLastChangeCharge.name(),
            fieldStr(SalesOrderChargeLastChangeDate, HeaderChargeLastModifiedDateTime),
            fieldStr(SalesOrderChargeLastChangeDate, LineChargeLastModifiedDateTime),
            DateTimeUtil::toStr(_cutOffDateTime)));

            qbdsSalesOrderTotals = qbdsLastChangeCharge.addDataSource(tableNum(SalesOrderTotals));
            qbdsSalesOrderTotals.addLink(fieldNum(SalesOrderChargeLastChangeDate, SalesId), fieldNum(SalesOrderTotals, SalesId));
        }
        else
        {
            qbdsSalesOrderTotals = _qbdsSalesOrderLastChangeDate.addDataSource(tableNum(SalesOrderTotals));
            qbdsSalesOrderTotals.addLink(fieldNum(SalesOrderLastChangeDateV2, SalesId), fieldNum(SalesOrderTotals, SalesId));
        }

        qbdsSalesOrderTotals.joinMode(JoinMode::NoExistsJoin);

        qbdsSalesOrderTotals.addRange(fieldNum(SalesOrderTotals, LastUpdatedDateTime)).
            value(strFmt('((%1.%3 > %2.%4) && ((%1.%3 > %2.%5) || (%2.%6 = 0)))',
            qbdsSalesOrderTotals.name(),
            _qbdsSalesOrderLastChangeDate.name(),
            fieldStr(SalesOrderTotals, LastUpdatedDateTime),
            fieldStr(SalesOrderLastChangeDateV2, HeaderLastModifiedDateTime),
            fieldStr(SalesOrderLastChangeDateV2, LineLastModifiedDateTime),
            fieldStr(SalesOrderLastChangeDateV2, LineCount)));

        if (isConfigurationkeyEnabled(configurationKeyNum(Markup)))
        {
            qbdsSalesOrderTotals.addRange(fieldNum(SalesOrderTotals, RecId)).
            value(strFmt('(((%1.%3 > %2.%4) || (%2.%5 = 0)) && ((%1.%3 > %2.%6) || (%2.%7 = 0)))',
            qbdsSalesOrderTotals.name(),
            qbdsLastChangeCharge.name(),
            fieldStr(SalesOrderTotals, LastUpdatedDateTime),
            fieldStr(SalesOrderChargeLastChangeDate, HeaderChargeLastModifiedDateTime),
            fieldStr(SalesOrderChargeLastChangeDate, HeaderChargeCount),
            fieldStr(SalesOrderChargeLastChangeDate, LineChargeLastModifiedDateTime),
            fieldStr(SalesOrderChargeLastChangeDate, LineChargeCount)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalsForOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates totals for a sales order.
    /// </summary>
    /// <param name = "_salesId">
    /// <c>SalesId</c> of the sales order for which the totals should be calculated.
    /// </param>
    /// <param name = "_updateDateTime">
    /// Timestamp to be marked on the order and line totals records.
    /// </param>
    public static void calculateTotalsForOrder(SalesId _salesId, utcdatetime _updateDateTime = DateTimeUtil::utcNow())
    {
        using (var activityContext = SalesTotalsCalculateInstrumentationLogger::createLogger(classStr(SalesOrderTotalsCalculate)).salesTotalsCalculateActivities().calculateTotalsForOrder())
        {
            ttsbegin;
            SalesOrderTotals orderTotals = SalesOrderTotals::calculateForSalesOrder(_salesId, _updateDateTime);
            using (SalesOrderLineTotalsContext context = SalesOrderLineTotalsContext::construct())
            {
                SalesOrderLineTotals::calculateForSalesOrder(_salesId, _updateDateTime);
            }
            SalesOrderTotals::updateOrderHeaderTaxAmount(orderTotals);
            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>