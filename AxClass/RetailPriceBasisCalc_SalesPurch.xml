<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPriceBasisCalc_SalesPurch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Base class for price basis calculations with <c>PriceDisc</c>.
/// </summary>
abstract class RetailPriceBasisCalc_SalesPurch extends RetailPriceBasisCalc
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateAgreementPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates price using trade agreements.
    /// </summary>
    /// <param name="_module">
    /// Module used for price calculation.
    /// </param>
    protected void calculateAgreementPrice(ModuleInventPurchSales _module)
    {
        PriceDisc priceDisc;

        unitIdFrom = unitIdFrom ? unitIdFrom : InventTableModule::find(itemId, _module).UnitId;
        priceGroupId = priceGroupId ? priceGroupId : this.getPriceGroupFromAccount(_module);

        currencyCodeOrig = currencyCodeFrom ? currencyCodeFrom : Ledger::accountingCurrency();

        priceDisc = this.getPriceDisc(_module);

        if (!priceDisc.findPrice(priceGroupId, false))
        {
            unitIdFrom = unitIdTo;
            currencyCodeOrig = Ledger::accountingCurrency();

            priceDisc.parmPriceDiscParameters().parmUnitID(unitIdFrom);
            priceDisc.parmPriceDiscParameters().parmCurrencyCode(currencyCodeOrig);

            priceDisc.findItemPrice();
        }

        this.convertPriceUnits(priceDisc.price(), priceDisc.priceUnit(), 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateItemPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates price using <c>InventTableModule</c> data.
    /// </summary>
    /// <param name="_module">
    /// Module used for price calculation.
    /// </param>
    protected void calculateItemPrice(ModuleInventPurchSales _module)
    {
        PriceDisc priceDisc;

        unitIdFrom = unitIdTo;
        currencyCodeOrig = Ledger::accountingCurrency();

        priceDisc = this.getPriceDisc(_module);
        priceDisc.findItemPrice();

        this.convertPriceUnits(priceDisc.price(), priceDisc.priceUnit(), 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPriceDisc</Name>
				<Source><![CDATA[
    private PriceDisc getPriceDisc(ModuleInventPurchSales _module)
    {
        return PriceDisc::newFromPriceDiscParameters(this.createAndInitPriceDiscParameters(_module));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndInitPriceDiscParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes an instance of the <c>PriceDiscParameters</c> class.
    /// </summary>
    /// <param name = "_module">A <c>ModuleInventPurchSales</c> value.</param>
    /// <returns>An instance of the <c>PriceDiscParameters</c> class.</returns>
    protected PriceDiscParameters createAndInitPriceDiscParameters(ModuleInventPurchSales _module)
    {
        PriceDiscParameters parameters = PriceDiscParameters::construct();

        parameters.parmModuleType(_module);
        parameters.parmItemId(itemId);
        parameters.parmInventDim(inventDim);
        parameters.parmUnitID(unitIdFrom);
        parameters.parmPriceDiscDate(datePrice);
        parameters.parmQty(1);
        parameters.parmAccountNum(accountId);
        parameters.parmCurrencyCode(currencyCodeOrig);

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceDiscInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PriceDisc</c> class.
    /// </summary>
    /// <param name = "_parameters">An instance of the <c>PriceDiscParameters</c> class.</param>
    /// <returns>An instance of the <c>PriceDisc</c> class.</returns>
    protected PriceDisc createPriceDiscInstance(PriceDiscParameters _parameters)
    {
        return PriceDisc::newFromPriceDiscParameters(_parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPriceGroupFromAccount</Name>
				<Source><![CDATA[
    private PriceGroupId getPriceGroupFromAccount(ModuleInventPurchSales _module)
    {
        PriceGroupId priceGroupFromAccount;

        switch (_module)
        {
            case ModuleInventPurchSales::Purch:
                priceGroupFromAccount = VendTable::find(accountId).PriceGroup;
                break;

            case ModuleInventPurchSales::Sales:
                priceGroupFromAccount = CustTable::find(accountId).PriceGroup;
                break;

            default:
                priceGroupFromAccount = '';
        }

        return priceGroupFromAccount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>