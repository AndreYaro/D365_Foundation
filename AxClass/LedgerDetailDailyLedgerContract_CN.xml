<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerDetailDailyLedgerContract_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data Contract class for <c>LedgerDetailLedger_CN</c> and <c>LedgerDailyLedger_CN</c> report.
/// </summary>
/// <remarks>
/// This is the Data Contract for the <c>LedgerDetailLedger_CN</c> and <c>LedgerDailyLedger_CN</c> SSRS report.
/// </remarks>
[
    DataContractAttribute,
    SysOperationContractProcessingAttribute(classStr(LedgerDetailDailyLedgerUIBuilder_CN), SysOperationDataContractProcessingMode::CreateSeparateUIBuilderForEachContract),
    SysOperationGroupAttribute('PreprintedPaper', "@GLS54554", '4'),
    SysOperationGroupAttribute('BlankPaper', "@SYS25850", '5')
]
class LedgerDetailDailyLedgerContract_CN implements SysOperationValidatable
{
    LedgerPreprintDetail_CN         ledgerPreprintDetailCode;
    LedgerPrintLayoutCurrency_CN    ledgerPrintCurrency;
    Counter                         maxLines;
    boolean                         prePrint;
    boolean                         isDetail;
    MainAccountNum                  fromMainAccountNum;
    MainAccountNum                  toMainAccountNum;
    container                       packedDimensionExpressionHelper;
    List                            dimensionExpressionList;

    LedgerFiscalYearAndPeriodContract_CN    periodContract;

    #define.DefaultMaxLines(30)
    #define.DefaultMinLines(4)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmFromMainAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter FromMainAccountNum.
    /// </summary>
    /// <param name="_fromMainAccountNum">
    /// The new value of the datacontract parameter FromMainAccountNum.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter FromMainAccountNum.
    /// </returns>
    [
        DataMemberAttribute('FromMainAccountNum'),
        SysOperationLabelAttribute(literalstr("@SYS4081511")),
        SysOperationDisplayOrderAttribute('1')
    ]
    public MainAccountNum parmFromMainAccountNum(MainAccountNum _fromMainAccountNum = fromMainAccountNum)
    {
        fromMainAccountNum = _fromMainAccountNum;

        return fromMainAccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the data contract parameter IsDetail
    /// </summary>
    /// <param name="_isDetail">
    /// The new value of the data contract parameter "IsDetail"
    /// </param>
    /// <returns>
    /// The current value of data contract parameter IsDetail
    /// </returns>
    [
        DataMemberAttribute('IsDetail'),
        SysOperationLabelAttribute(literalStr("@GLS54605"))
    ]
    public boolean parmIsDetail(boolean _isDetail = isDetail)
    {
        isDetail = _isDetail;
        return isDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerPreprintDetailLayoutCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the data contract parameter Print layout code
    /// </summary>
    /// <param name="_ledgerPrePrintDetailCode">
    /// The new value of the data contract parameter "Print layout code"
    /// </param>
    /// <returns>
    /// The current value of the data contract parameter Print layout code
    /// </returns>
    [
        DataMemberAttribute('LedgerPreprintDetail'),
        SysOperationLabelAttribute(literalStr("@GLS54454")),
        SysOperationGroupMemberAttribute('PreprintedPaper'),
        SysOperationDisplayOrderAttribute('1')
    ]
    public LedgerPreprintDetail_CN parmLedgerPreprintDetailLayoutCode(LedgerPreprintDetail_CN _ledgerPrePrintDetailCode = ledgerPreprintDetailCode)
    {
        ledgerPreprintDetailCode = _ledgerPrePrintDetailCode;
        return ledgerPreprintDetailCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerPrintLayoutCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the data contract parameter Print layout currency
    /// </summary>
    /// <param name="_ledgerPrintCurrency">
    /// The new value of the data contract parameter "Print layout currency"
    /// </param>
    /// <returns>
    /// The current value of data contract parameter Print layout currency
    /// </returns>
    [
        DataMemberAttribute('LedgerPrintLayoutCurrency'),
        SysOperationLabelAttribute(literalStr("@GLS54456")),
        SysOperationGroupMemberAttribute('BlankPaper'),
        SysOperationDisplayOrderAttribute('1')
    ]
    public LedgerPrintLayoutCurrency_CN parmLedgerPrintLayoutCurrency(LedgerPrintLayoutCurrency_CN _ledgerPrintCurrency = ledgerPrintCurrency)
    {
        ledgerPrintCurrency = _ledgerPrintCurrency;
        return ledgerPrintCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMaxLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the data contract parameter Maximum lines
    /// </summary>
    /// <param name="_maxLines">
    /// The new value of the data contract parameter "Maximum lines"
    /// </param>
    /// <returns>
    /// The current value of data contract parameter Maximum lines
    /// </returns>
    [
        DataMemberAttribute('MaxLines'),
        SysOperationLabelAttribute(literalStr("@GLS54547")),
        SysOperationGroupMemberAttribute('BlankPaper'),
        SysOperationDisplayOrderAttribute('2')
    ]
    public Counter parmMaxLines(Counter _maxLines = maxLines)
    {
        maxLines = _maxLines;
        return maxLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the object instance to the nested data contract.
    /// </summary>
    /// <param name = "_periodContract">
    /// The new value of the data contract parameter _periodContract;
    /// </param>
    /// <returns>
    /// The current nested data contract.
    /// </returns>
    [
        DataMemberAttribute,
        SysOperationDisplayOrderAttribute('3')
    ]
    public LedgerFiscalYearAndPeriodContract_CN parmPeriodContract(LedgerFiscalYearAndPeriodContract_CN _periodContract = periodContract)
    {
        periodContract = _periodContract;
        return periodContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPreprint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the data contract parameter PrePrint
    /// </summary>
    /// <param name="_prePrint">
    /// The new value of the data contract parameter "PrePrint"
    /// </param>
    /// <returns>
    /// The current value of data contract parameter PrePrint
    /// </returns>
    [
        DataMemberAttribute('Preprint'),
        SysOperationLabelAttribute(literalStr("@SYS25852"))
    ]
    public boolean parmPreprint(boolean _prePrint = prePrint)
    {
        prePrint = _prePrint;
        return prePrint;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToMainAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ToMainAccountNum.
    /// </summary>
    /// <param name="_toMainAccountNum">
    /// The new value of the datacontract parameter ToMainAccountNum.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter ToMainAccountNum.
    /// </returns>
    [
        DataMemberAttribute('ToMainAccountNum'),
        SysOperationLabelAttribute(literalstr("@SYS4081512")),
        SysOperationDisplayOrderAttribute('2')
    ]
    public MainAccountNum parmToMainAccountNum(MainAccountNum _toMainAccountNum = toMainAccountNum)
    {
        toMainAccountNum = _toMainAccountNum;

        return toMainAccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPackedDimensionExpressionHelper</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the packed dimension expression helper class.
    /// </summary>
    /// <param name="_packedDimensionExpressionHelper">
    /// The container in which the dimension expression builder helper class is packed.
    /// </param>
    /// <returns>
    /// The container in which the dimension expression builder helper class is packed.
    /// </returns>
    public container parmPackedDimensionExpressionHelper(container _packedDimensionExpressionHelper = packedDimensionExpressionHelper)
    {
        packedDimensionExpressionHelper = _packedDimensionExpressionHelper;

        return packedDimensionExpressionHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimensionExpressionList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the dimension expression list which is builded by expression builder on report dialog.
    /// </summary>
    /// <param name="_dimensionExpressionList">
    /// The new dimension expression list.
    /// </param>
    /// <returns>
    ///  The current dimension expression list.
    /// </returns>
    [
        DataMemberAttribute('DimensionExpressionList'),
        AifCollectionTypeAttribute('return', Types::String)
    ]
    public List parmDimensionExpressionList(List _dimensionExpressionList = dimensionExpressionList)
    {
        dimensionExpressionList = _dimensionExpressionList;

        return dimensionExpressionList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the parameters are valid.
    /// </summary>
    /// <returns>
    /// true when the parameters are valid; otherwise, false;
    /// </returns>
    public boolean validate()
    {
        boolean isValid = periodContract.validate();

        if (!prePrint
            && isValid
            && ((maxLines > #DefaultMaxLines) || (maxLines < #DefaultMinLines)))
        {
            //The maximum number of lines must be between 4 and 30.
            isValid = checkFailed(strFmt("@GLS54558", #DefaultMinLines, #DefaultMaxLines));
        }

        if (isValid && !fromMainAccountNum)
        {
            //From account must be entered
            isValid = checkFailed(strFmt("@SYS39376", "@SYS4081511"));
        }

        if (isValid && !toMainAccountNum)
        {
            //To account must be entered
            isValid = checkFailed(strFmt("@SYS39376", "@SYS4081512"));
        }

        if (isValid && fromMainAccountNum > toMainAccountNum)
        {
            // From account cannot be greater than To account
            isValid = checkFailed(strFmt("@SYS344287", "@SYS4081511", "@SYS4081512"));
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>