<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSCommercialInvoiceDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is the data provider class for the Commercial Invoice Report
/// </summary>
[
    SRSReportQueryAttribute(queryStr(TMSCommercialInvoice))
]
class TmsCommercialInvoiceDP extends SRSReportDataProviderBase
{
    TMSCommercialInvoiceTmp tmsCommercialInvoiceTmp;
    WHSShipmentTable        whsShipmentTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTMSCommercialInvoiceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retuns the temp table used in the Commercial Invoice Report.
    /// </summary>
    /// <returns>
    /// The temp table used in the Commercial Invoice Report.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(TMSCommercialInvoiceTmp))]
    public TMSCommercialInvoiceTmp getTMSCommercialInvoiceTmp()
    {
        select tmsCommercialInvoiceTmp;

        return tmsCommercialInvoiceTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTMSCommercialInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert method for the Commercial Invoice Report
    /// </summary>
    /// <param name="_whsShipmentTable">
    /// The <c>WHSShipmentTable</c> record
    /// </param>
    /// <param name="_whsLoadLine">
    /// The <c>WHSLoadLine</c> record
    /// </param>
    /// <param name="_salesLine">
    /// The <c>SalesLine</c> record
    /// </param>
    /// <param name="_salesTable">
    /// The <c>SalesTable</c> record
    /// </param>
    /// <param name="_markupTrans">
    /// The <c>MarkupTrans</c> record
    /// </param>
    void insertTMSCommercialInvoice(WHSShipmentTable _whsShipmentTable,
                                    WHSLoadLine      _whsLoadLine,
                                    SalesLine        _salesLine,
                                    SalesTable       _salesTable,
                                    MarkupTrans      _markupTrans = null)
    {      
        ttsbegin;

        TMSAddressPhone dropOffAddress = _whsShipmentTable.getDropOffAddress();

        tmsCommercialInvoiceTmp.CompanyName        = CompanyInfo::find().Name;
        tmsCommercialInvoiceTmp.WarehouseAddress   = _whsShipmentTable.displayPickUpLoc();
        tmsCommercialInvoiceTmp.CustomerName       = _whsShipmentTable.displayDropOffName();
        tmsCommercialInvoiceTmp.Address            = CustTable::find(_whsShipmentTable.AccountNum).address();
        tmsCommercialInvoiceTmp.ShipToAddress      = dropOffAddress ? dropOffAddress.getAddress() : '';
        tmsCommercialInvoiceTmp.ShipToAddress      = tmsCommercialInvoiceTmp.Address == tmsCommercialInvoiceTmp.ShipToAddress ? '' : tmsCommercialInvoiceTmp.ShipToAddress;

        tmsCommercialInvoiceTmp.ShipmentId         = _whsShipmentTable.ShipmentId;
        tmsCommercialInvoiceTmp.CustomerRef        = _salesTable.CustomerRef;
        tmsCommercialInvoiceTmp.DlvTermId          = _whsShipmentTable.DlvTermId;
        tmsCommercialInvoiceTmp.TermsOfPayment     = _whsShipmentTable.displayPaymTermDesc();
        tmsCommercialInvoiceTmp.CurrencyCode       = _salesLine.CurrencyCode;
        tmsCommercialInvoiceTmp.CarrierServiceCode = _whsShipmentTable.CarrierServiceCode;
        tmsCommercialInvoiceTmp.BillOfLadingId     = _whsShipmentTable.BillOfLadingId;

        tmsCommercialInvoiceTmp.Qty                = _whsLoadLine.Qty;
        tmsCommercialInvoiceTmp.ItemId             = _salesLine.ItemId;
        tmsCommercialInvoiceTmp.ItemName           = _whsLoadLine.displayItemName();
        tmsCommercialInvoiceTmp.uom                = _whsLoadLine.uom;
        tmsCommercialInvoiceTmp.SalesPrice         = _salesLine.SalesPrice;
        tmsCommercialInvoiceTmp.TotalPrice         = _whsLoadLine.displayTotalValue();
        
        MarkupTrans     markupTrans;

        while select  markupTrans
            where markupTrans.TransTableId == _salesLine.TableId &&
                  markupTrans.TransRecId   == _salesLine.RecId     
        {
            tmsCommercialInvoiceTmp.TotalMiscCharges += Markup::calcMarkupAmount(markupTrans, _whsLoadLine.Qty, _salesLine.LineAmount, 0, _salesTable.InclTax);
        }

        tmsCommercialInvoiceTmp.insert();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        Query            query;
        QueryRun         queryRun;
        WHSShipmentTable queryWHSShipmentTable;
        WHSLoadLine      queryWHSLoadLine;
        SalesLine        querySalesLine;
        SalesTable       querySalesTable;

        query    = this.parmQuery();
        queryRun = new QueryRun(query);

        queryRun.setRecord(whsShipmentTable);

        ttsbegin;

        while (queryRun.next())
        {
            tmsCommercialInvoiceTmp.clear();

            queryWHSShipmentTable = queryRun.get(tableNum(WHSShipmentTable));
            queryWHSLoadLine      = queryRun.get(tableNum(WHSLoadLine));
            querySalesLine        = queryRun.get(tableNum(SalesLine));
            querySalesTable       = queryRun.get(tableNum(SalesTable));

            this.insertTMSCommercialInvoice(queryWHSShipmentTable,
                                            queryWHSLoadLine,
                                            querySalesLine,
                                            querySalesTable);
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>