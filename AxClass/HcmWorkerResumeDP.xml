<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmWorkerResumeDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>HcmWorkerResumeDP</c> class is the report data provider class for the <c>HcmWorkerResume</c>
/// report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(HcmWorkerResume)),
    SRSReportParameterAttribute(classstr(HcmWorkerResumeContract))
]
class HcmWorkerResumeDP extends SRSReportDataProviderBase
{
    HcmWorkerResumeTmp              hcmWorkerResumeTmp;
    HcmWorker                       hcmWorker;
    HcmPersonImage                  hcmPersonImage;
    HcmPersonEducation              hcmPersonEducation;
    HcmEducationDiscipline          hcmEducationDiscipline;
    HcmEducationLevel               hcmEducationLevel;
    HcmEducationInstitution         hcmEducationInstitution;
    HcmPersonSkill                  hcmPersonSkill;
    HcmSkill                        hcmSkill;
    HcmRatingLevel                  hcmRatingLevel;
    HcmPersonProfessionalExperience hcmPersonProfessionalExperience;
    HcmPersonTrustedPosition        hcmPersonTrustedPosition;
    HcmPersonCourse                 hcmPersonCourse;
    HcmPersonCertificate            hcmPersonCertificate;
    HcmCertificateType              hcmCertificateType;
    HcmPersonProjectRole            hcmPersonProjectRole;
    HcmPositionWorkerAssignment     hcmPositionWorkerAssignment;
    HcmPosition                     hcmPosition;
    HcmPositionDetail               hcmPositionDetail;
    DirPartyTable                   dirPartyTable;

    boolean printPicture;
    boolean printEducation;
    boolean printSkill;
    boolean printQualification;
    boolean printPrivateInfo;
    boolean printCourse;
    boolean printCertificate;
    boolean printProject;
    boolean printHistoryLine;
    boolean printEmptyCV;
    boolean printOnlyEmployees;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getHcmWorkerResumeTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches data from the <c>HcmWorkerResumeTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// The data from the <c>HcmWorkerResumeTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(HcmWorkerResumeTmp))
    ]
    public HcmWorkerResumeTmp getHcmWorkerResumeTmp()
    {
        select hcmWorkerResumeTmp;
        return hcmWorkerResumeTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the <c>HcmWorkerResumeTmp</c> temporary table.
    /// </summary>
    /// <param name="_tableId">
    /// The parameter value to insert values into specific fields.
    /// </param>
    private void insertIntoTempTable(tableId _tableId = 0)
    {
        hcmWorkerResumeTmp.clear();

        //Worker details
        hcmWorkerResumeTmp.WorkerName           = hcmWorker.name();
        hcmWorkerResumeTmp.PersonnelNumber      = hcmWorker.PersonnelNumber;
        hcmWorkerResumeTmp.Address              = DirParty::primaryPostalAddress(hcmWorker.Person).Address;
        hcmWorkerResumeTmp.Email                = hcmWorker.email();
        hcmWorkerResumeTmp.Phone                = hcmWorker.phone();
        hcmWorkerResumeTmp.Relation             = hcmWorker.workerRelationType();
        hcmWorkerResumeTmp.Status               = hcmWorker.workerStatus();

        switch (_tableId)
        {
            //Picture
            case tablenum(HcmPersonImage):
                hcmWorkerResumeTmp.Image    = hcmPersonImage.Image;
                break;

            //Education
            case tablenum(HcmPersonEducation):
                hcmWorkerResumeTmp.EducationStartDate       = hcmPersonEducation.StartDate;
                hcmWorkerResumeTmp.EducationEndDate         = hcmPersonEducation.EndDate;
                hcmWorkerResumeTmp.EducationDisciplineId    = hcmEducationDiscipline.EducationDisciplineId;
                hcmWorkerResumeTmp.EducationDescription     = hcmEducationDiscipline.Description;
                hcmWorkerResumeTmp.EducationInstitutionId   = hcmEducationInstitution.EducationInstitutionId;
                hcmWorkerResumeTmp.EducationLevelId         = hcmEducationLevel.EducationLevelId;

                hcmWorkerResumeTmp.GradePointAverage                = hcmPersonEducation.GradePointAverage;
                hcmWorkerResumeTmp.GradeScale                       = hcmPersonEducation.GradeScale;
                hcmWorkerResumeTmp.SecondaryEmphasis                = hcmPersonEducation.SecondaryEmphasis;
                hcmWorkerResumeTmp.EducationInstitutionDescription  = hcmEducationInstitution.Description;
                hcmWorkerResumeTmp.EducationLevelDescription        = hcmEducationLevel.Description;
                hcmWorkerResumeTmp.CreditsCompleted                 = hcmPersonEducation.CreditsCompleted;
                hcmWorkerResumeTmp.CreditBasis                      = hcmPersonEducation.CreditBasis;
                hcmWorkerResumeTmp.CreditsEarned                    = hcmPersonEducation.CreditsEarned;
                hcmWorkerResumeTmp.CreditsNeeded                    = hcmPersonEducation.CreditsNeeded;
                break;

            //Skills
            case tablenum(HcmPersonSkill):
                hcmWorkerResumeTmp.SkillId          = hcmSkill.SkillId;
                hcmWorkerResumeTmp.SkillDescription = hcmSkill.Description;
                hcmWorkerResumeTmp.RatingLevelType  = hcmPersonSkill.RatingLevelType;
                hcmWorkerResumeTmp.RatingLevelId    = hcmRatingLevel.RatingLevelId;
                hcmWorkerResumeTmp.RatingLevelDate  = hcmPersonSkill.RatingLevelDate;
                hcmWorkerResumeTmp.Experience       = hcmPersonSkill.Experience;
                break;

            //Professional experience
            case tablenum(HcmPersonProfessionalExperience):
                hcmWorkerResumeTmp.ExperienceStartDate  = hcmPersonProfessionalExperience.StartDate;
                hcmWorkerResumeTmp.ExperienceEndDate    = hcmPersonProfessionalExperience.EndDate;
                hcmWorkerResumeTmp.EmployerLocation     = hcmPersonProfessionalExperience.EmployerLocation;
                hcmWorkerResumeTmp.EmployerPosition     = hcmPersonProfessionalExperience.EmployerPosition;
                hcmWorkerResumeTmp.ExperienceNote       = hcmPersonProfessionalExperience.Note;
                hcmWorkerResumeTmp.EmployerName         = hcmPersonProfessionalExperience.EmployerName;
                break;

            //Position of trust
            case tablenum(HcmPersonTrustedPosition):
                hcmWorkerResumeTmp.TrustedPostionStartDate      = hcmPersonTrustedPosition.StartDate;
                hcmWorkerResumeTmp.TrustedPostionEndDate        = hcmPersonTrustedPosition.EndDate;
                hcmWorkerResumeTmp.Employer                     = hcmPersonTrustedPosition.Employer;
                hcmWorkerResumeTmp.TrustedPostionDescription    = hcmPersonTrustedPosition.TrustedPostionDescription;
                hcmWorkerResumeTmp.TrustedPostionNote           = hcmPersonTrustedPosition.Note;
                break;

            //Courses
            case tablenum(HcmPersonCourse):
                hcmWorkerResumeTmp.CourseDescription    = hcmPersonCourse.Description;
                hcmWorkerResumeTmp.CourseStartDate      = hcmPersonCourse.StartDate;
                hcmWorkerResumeTmp.CourseEndDate        = hcmPersonCourse.EndDate;
                hcmWorkerResumeTmp.CourseLocation       = hcmPersonCourse.Location;
                hcmWorkerResumeTmp.CourseId             = hcmPersonCourse.CourseId;
                break;

            //Certificates
            case tablenum(HcmPersonCertificate):
                hcmWorkerResumeTmp.IssueDate                = hcmPersonCertificate.IssueDate;
                hcmWorkerResumeTmp.ExpirationDate           = HcmPersonCertificate.ExpirationDate;
                hcmWorkerResumeTmp.CertificateTypeId        = hcmCertificateType.CertificateTypeId;
                hcmWorkerResumeTmp.CertificateDescription   = hcmCertificateType.Description;
                break;

            //Project experience
            case tablenum(HcmPersonProjectRole):
                hcmWorkerResumeTmp.ProjectName      = hcmPersonProjectRole.ProjectName;
                hcmWorkerResumeTmp.Role             = hcmPersonProjectRole.Role;
                hcmWorkerResumeTmp.RoleStartDate    = hcmPersonProjectRole.RoleStartDate;
                hcmWorkerResumeTmp.RoleEndDate      = hcmPersonProjectRole.RoleEndDate;
                break;

            //Employment history
            case tablenum(HcmPositionWorkerAssignment):
                hcmWorkerResumeTmp.ValidFrom            = hcmPositionWorkerAssignment.ValidFrom;
                hcmWorkerResumeTmp.ValidTo              = hcmPositionWorkerAssignment.ValidTo;
                hcmWorkerResumeTmp.PositionId           = hcmPosition.PositionId;
                hcmWorkerResumeTmp.PositionDescription  = hcmPositionDetail.Description;
                hcmWorkerResumeTmp.DepartmentName       = dirPartyTable.Name;
                break;
        }

        hcmWorkerResumeTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>printCV</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to print the CV.
    /// </summary>
    /// <returns>
    /// true if the CV is to be printed; otherwise, false.
    /// </returns>
    private boolean printCV()
    {
        boolean ret = false;

        if (printEmptyCV)
        {
            ret = true;
        }
        else
        {
            if (printEducation && !ret)
            {
                select RecId from hcmPersonEducation where hcmPersonEducation.Person == hcmWorker.Person;
                if (HcmPersonEducation::exist(hcmPersonEducation.RecId))
                {
                    ret = true;
                }
            }

            if (printSkill && !ret)
            {
                if ((select RecId from hcmPersonSkill index hint HcmPersonSkill_AK1
                      where hcmPersonSkill.Person == hcmWorker.Person).RecId != 0)
                {
                    ret = true;
                }
            }

            if (printQualification  && !ret)
            {
                select RecId from hcmPersonProfessionalExperience
                    where hcmPersonProfessionalExperience.Person == hcmWorker.Person;
                if (HcmPersonProfessionalExperience::exist(hcmPersonProfessionalExperience.RecId))
                {
                    ret = true;
                }
            }

            if (printPrivateInfo && !ret)
            {
                select RecId from hcmPersonTrustedPosition
                    where hcmPersonTrustedPosition.Person == hcmWorker.Person;
                if (HcmPersonTrustedPosition::exist(hcmPersonTrustedPosition.RecId))
                {
                    ret = true;
                }
            }

            if (printCourse && !ret)
            {
                select RecId from hcmPersonCourse where hcmPersonCourse.Person == hcmWorker.Person;
                if (HcmPersonCourse::exist(hcmPersonCourse.RecId))
                {
                    ret = true;
                }
            }

            if (printCertificate && !ret)
            {
                if ((select firstonly hcmPersonCertificate
                         where hcmPersonCertificate.Person == hcmWorker.Person).RecId != 0)
                {
                    ret = true;
                }
            }

            if (printProject && !ret)
            {
                if ((select firstonly hcmPersonProjectRole
                         where hcmPersonProjectRole.Person == hcmWorker.Person).RecId != 0)
                {
                    ret = true;
                }
            }

            if (printHistoryLine && !ret)
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printOnlyEmployees</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to print only employees.
    /// </summary>
    /// <returns>
    /// true if only employees are to be printed; otherwise, false.
    /// </returns>
    private boolean printOnlyEmployees()
    {
        if (printOnlyEmployees)
        {
            if (hcmWorker.isEmployee() == NoYes::Yes)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        QueryRun                qr;
        HcmPersonSkill          hcmPersonSkillLocal;
        HcmWorkerResumeContract contract = this.parmDataContract() as HcmWorkerResumeContract;

        qr = new QueryRun(this.parmQuery());

        printPicture        = contract.parmPrintPicture();
        printEducation      = contract.parmPrintEducation();
        printSkill          = contract.parmPrintSkill();
        printQualification  = contract.parmPrintQualification();
        printPrivateInfo    = contract.parmPrintPrivateInfo();
        printCourse         = contract.parmPrintCourse();
        printCertificate    = contract.parmPrintCertificate();
        printProject        = contract.parmPrintProject();
        printHistoryLine    = contract.parmPrintHistoryLine();
        printEmptyCV        = contract.parmPrintEmptyCV();
        printOnlyEmployees  = contract.parmPrintOnlyEmployees();

        while (qr.next())
        {
            hcmWorker = qr.get(tablenum(HcmWorker));

            if (hcmWorker)
            {
                if (SysReportRun::changed(qr,tablenum(hcmWorker)) && this.printOnlyEmployees())
                {
                    if (printPicture)
                    {
                        select Image, RecId from hcmPersonImage where hcmPersonImage.Person == hcmWorker.Person;
                        if (hcmPersonImage.RecId)
                        {
                            this.insertIntoTempTable(tablenum(HcmPersonImage));
                        }
                    }

                    if (printEducation)
                    {
                        while select hcmPersonEducation
                            where hcmPersonEducation.Person == hcmWorker.Person
                                join hcmEducationDiscipline
                                    where hcmPersonEducation.EducationDiscipline == hcmEducationDiscipline.RecId
                                outer join hcmEducationInstitution
                                    where hcmPersonEducation.EducationInstitution == hcmEducationInstitution.RecId
                                outer join hcmEducationLevel
                                    where hcmPersonEducation.EducationLevel == hcmEducationLevel.RecId
                        {
                            this.insertIntoTempTable(tablenum(HcmPersonEducation));
                        }
                    }

                    if (printSkill)
                    {
                        while select Person, RatingLevelType, Skill, RatingLevel from hcmPersonSkillLocal
                            where hcmPersonSkillLocal.Person             == hcmWorker.Person
                            &&    hcmPersonSkillLocal.RatingLevelType    == enum2int(HRMSkillLevelType::Actual)
                                join hcmSkill
                                    where hcmPersonSkillLocal.Skill == hcmSkill.RecId
                                join hcmRatingLevel
                                    where hcmPersonSkillLocal.RatingLevel == hcmRatingLevel.RecId
                        {
                            hcmPersonSkill = HcmPersonSkill::findByPersonSkillRatingDetails(hcmWorker.Person,
                                                                                            hcmPersonSkillLocal.Skill,
                                                                                            HRMSkillLevelType::Actual,
                                                                                            DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
                            this.insertIntoTempTable(tablenum(HcmPersonSkill));
                        }
                    }

                    if (printQualification)
                    {
                        while select hcmPersonProfessionalExperience
                            where hcmPersonProfessionalExperience.Person == hcmWorker.Person
                        {
                            this.insertIntoTempTable(tablenum(HcmPersonProfessionalExperience));
                        }
                    }

                    if (printPrivateInfo)
                    {
                        while select hcmPersonTrustedPosition
                            where hcmPersonTrustedPosition.Person == hcmWorker.Person
                        {
                            this.insertIntoTempTable(tablenum(HcmPersonTrustedPosition));
                        }
                    }

                    if (printCourse)
                    {
                        while select hcmPersonCourse
                            where hcmPersonCourse.Person == hcmWorker.Person
                        {
                            this.insertIntoTempTable(tablenum(HcmPersonCourse));
                        }
                    }

                    if (printCertificate)
                    {
                        while select hcmPersonCertificate
                            where hcmPersonCertificate.Person == hcmWorker.Person
                                join hcmCertificateType
                                where hcmPersonCertificate.CertificateType == hcmCertificateType.RecId
                        {
                            this.insertIntoTempTable(tablenum(HcmPersonCertificate));
                        }
                    }

                    if (printProject)
                    {
                        while select hcmPersonProjectRole
                            where hcmPersonProjectRole.Person == hcmWorker.Person
                        {
                            this.insertIntoTempTable(tablenum(HcmPersonProjectRole));
                        }
                    }

                    if (printHistoryLine)
                    {
                        while select hcmPositionWorkerAssignment
                            where hcmPositionWorkerAssignment.Worker == hcmWorker.RecId
                                join hcmPosition
                                    where hcmPositionWorkerAssignment.Position == hcmPosition.RecId
                                        outer join hcmPositionDetail
                                            where hcmPosition.RecId == hcmPositionDetail.Position
                                                outer join dirPartyTable
                                                    where hcmPositionDetail.Department == dirPartyTable.RecId
                        {
                            this.insertIntoTempTable(tablenum(HcmPositionWorkerAssignment));
                        }
                    }

                    if (printEmptyCV)
                    {
                        this.insertIntoTempTable();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
