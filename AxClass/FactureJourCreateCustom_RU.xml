<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureJourCreateCustom_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FactureJourCreateCustom_RU extends FactureJourCreate_RU implements BatchRetryable
{
    CustomJournalTable_RU   customJournalTable;
    Voucher                 voucher;
    FactureId_RU            factureId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    protected boolean check()
    {
        boolean ret;

        ret = super() && FactureJour_RU::checkTaxReportingDate(factureDate,
                                                               factureDateExternal,
                                                               factureReportDate);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMap</Name>
				<Source><![CDATA[
    protected boolean checkMap()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>factureId</Name>
				<Source><![CDATA[
    FactureId_RU factureId()
    {
        return factureId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInvoiceJourByTrans</Name>
				<Source><![CDATA[
    protected common findInvoiceJourByTrans(Common _trans)
    {
        CustomJournalTrans_RU customJournalTrans;

        if (_trans.tableId == tablenum(CustomJournalTrans_RU))
        {
            customJournalTrans = _trans;
        }

        return customJournalTrans.customJournalTable(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInvoiceTransByFacture</Name>
				<Source><![CDATA[
    protected Common findInvoiceTransByFacture()
    {
        return CustomJournalTrans_RU::find(factureTrans.FactureId, factureTrans.InvoiceLineNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournal</Name>
				<Source><![CDATA[
    protected void initJournal()
    {
        DictType            dictType;
        NumberSequenceTable numTable;
        boolean             error = false;

        numberSeq = NumberSeq::newGetNum(VendParameters::numRefVendFactureId_RU(),false,true);

        if (! numberSeq)
        {
            dictType = new DictType(extendedtypenum(VendFactureId_RU));
            warning(strfmt("@SYS53911", dictType.label(), "@SYS25194"));
            error    = true;
        }
        else
        {
            numTable = numberSeq.parmNumTableNum(numTable);
            if (numTable.Manual)
            {
                dictType = new DictType(extendedtypenum(VendFactureId_RU));
                warning(strfmt("@GLS104926", dictType.label(), "@SYS25194"));
                error    = true;
            }
        }

        if (error)
        {
            throw error("@GLS106933");
        }
        super();

        factureId                      = numberSeq.num();
        factureJour.FactureId          = factureId;
        factureJour.Voucher            = voucher ? voucher : customJournalTable.LedgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    public FactureModule_RU module()
    {
        return FactureModule_RU::Vend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalTable</Name>
				<Source><![CDATA[
    void parmJournalTable(Common _journalTable)
    {
        customJournalTable = _journalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerVoucher</Name>
				<Source><![CDATA[
    void parmLedgerVoucher(Voucher _voucher)
    {
        voucher = _voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFullyFacturedInvoices</Name>
				<Source><![CDATA[
    protected void updateFullyFacturedInvoices()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static FactureJourCreateCustom_RU construct(CustomDocument_RU    _customDocument,
                                                       Common               _journalTable)
    {
        FactureJourCreateCustom_RU  factureJourCreateCustom;

        switch (_customDocument)
        {
            case CustomDocument_RU::GTD :
                factureJourCreateCustom = new FactureJourCreateCustom_RU();
                break;
            case CustomDocument_RU::Correction :
                factureJourCreateCustom = new FactureJourCreateCorrectionCustom_RU();
                break;
        }
        factureJourCreateCustom.parmJournalTable(_journalTable);
        return factureJourCreateCustom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>