<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanGenerateFormGenJour</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanGenerateFormForGenJour</c> class supports the business logic of the <c>BudgetPlanGenerate</c> form.
/// </summary>
public class BudgetPlanGenerateFormGenJour extends BudgetPlanGenerateForm
{
    FormGroupControl           sourceGeneralLedgerLeftGroup;
    FormGroupControl           sourceBudgetPlanTransferTotalGroup;
    FormComboBoxControl        sourceBudgetPlanTransferTotal;
    FormGroupControl           sourceGenJourFiscalYearGroup;
    FormReferenceGroupControl  sourceGenJourFiscalYear;
    FormReferenceGroupControl  sourceGenJourFiscalStartPeriod;
    FormReferenceGroupControl  sourceGenJourFiscalEndPeriod;
    FormListControl            sourceGenJourAccountType;
    FormCheckBoxControl        sourceGenJourIncludeClosingTransaction;
    FormGroupControl           sourceGenJourAccountTypeGroup;
    FormComboBoxControl        targetGenJourHistorical;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fiscalPeriodModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the validation on the fiscal period modification.
    /// </summary>
    /// <param name="_fiscalPeriodControl">
    /// The control of fiscal calendar period field.
    /// </param>
    public void fiscalPeriodModified(FormReferenceGroupControl _fiscalPeriodControl)
    {
        FiscalCalendarPeriod toFiscalCalendarPeriod;
        FiscalCalendarPeriod fromFiscalCalendarPeriod;

        toFiscalCalendarPeriod = FiscalCalendarPeriod::find(sourceGenJourFiscalEndPeriod.value());
        fromFiscalCalendarPeriod = FiscalCalendarPeriod::find(sourceGenJourFiscalStartPeriod.value());

        if (toFiscalCalendarPeriod && fromFiscalCalendarPeriod)
        {
            if (toFiscalCalendarPeriod.EndDate < fromFiscalCalendarPeriod.EndDate)
            {
                this.displayWarningMessage(strFmt("@GLS70438", toFiscalCalendarPeriod.Name, fromFiscalCalendarPeriod.Name));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalYearModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of fiscal period fields base on the modification of fiscal calendar year.
    /// </summary>
    /// <param name="_fiscalYearControl">
    /// The control of fiscal calendar year field.
    /// </param>
    public void fiscalYearModified(FormReferenceGroupControl _fiscalYearControl)
    {
        FiscalCalendarPeriod fiscalCalendarPeriod;
        FiscalCalendarYear   fiscalCalendarYear;

        fiscalCalendarYear = FiscalCalendarYear::find(_fiscalYearControl.value());
        fiscalCalendarPeriod = FiscalCalendars::findFirstOperatingPeriodByYear(fiscalCalendarYear);
        sourceGenJourFiscalStartPeriod.value(fiscalCalendarPeriod.RecId);

        fiscalCalendarPeriod = FiscalCalendars::findLastOperatingPeriodByYear(fiscalCalendarYear);
        sourceGenJourFiscalEndPeriod.value(fiscalCalendarPeriod.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAccountTypeControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>AccountTypeControl</c> list control.
    /// </summary>
    private void initAccountTypeControl()
    {
        SysDictEnum                 dictEnum;
        DimensionLedgerAccountType  accountType;
        int                         enumCount;
        FormListItem                listItem;

        dictEnum = new SysDictEnum(enumNum(DimensionLedgerAccountType));
        accountType = dictEnum.firstValue();

        // Add a column header if one didn't exist
        if (sourceGenJourAccountType.getColumn(0) == null)
        {
            sourceGenJourAccountType.addColumn(0, new FormListColumn("@GLS70377", 0));
        }

        while (enumCount < dictEnum.values())
        {
            if (accountType == DimensionLedgerAccountType::Asset ||
                accountType == DimensionLedgerAccountType::BalanceSheet ||
                accountType == DimensionLedgerAccountType::Expense ||
                accountType == DimensionLedgerAccountType::Total ||
                accountType == DimensionLedgerAccountType::ProfitAndLoss ||
                accountType == DimensionLedgerAccountType::Revenue ||
                accountType == DimensionLedgerAccountType::Liability ||
                accountType == DimensionLedgerAccountType::Equity
                )
            {
                listItem = new FormListItem(enum2str(accountType), 0, accountType);
                sourceGenJourAccountType.addItem(listItem);
            }

            accountType = dictEnum.nextValue(accountType);
            enumCount++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initControls</Name>
				<Source><![CDATA[
    public void initControls(FormRun _formRun)
    {
        super(_formRun);

        this.initAccountTypeControl();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initcontrolSet</Name>
				<Source><![CDATA[
    protected void initcontrolSet()
    {
        super();

        controlSet.add(formControlStr(BudgetPlanGenerate, SourceGenJourLeftGroup));
        controlSet.add(formControlStr(BudgetPlanGenerate, SourceBudgetPlanTransferTotalGroup));
        controlSet.add(formControlStr(BudgetPlanGenerate, SourceBudgetPlanTransferTotal));
        controlSet.add(formControlStr(BudgetPlanGenerate, SourceGenJourFiscalYearGroup));
        controlSet.add(formControlStr(BudgetPlanGenerate, SourceGenJourFiscalYear));
        controlSet.add(formControlStr(BudgetPlanGenerate, SourceGenJourFiscalStartPeriod));
        controlSet.add(formControlStr(BudgetPlanGenerate, SourceGenJourFiscalEndPeriod));
        controlSet.add(formControlStr(BudgetPlanGenerate, SourceGenJourAccountTypeGroup));
        controlSet.add(formControlStr(BudgetPlanGenerate, SourceGenJourAccountTypeControl));
        controlSet.add(formControlStr(BudgetPlanGenerate, SourceGenJourIncludeClosingTransaction));
        controlSet.add(formControlStr(BudgetPlanGenerate, TargetGenJourHistorical));
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefGL_FiscalEndPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the form that the user should be directed to when clicking on the control value.
    /// </summary>
    public void jumpRefGL_FiscalEndPeriod()
    {
        MenuFunction menuFunction;

        menuFunction = new MenuFunction(menuitemDisplayStr(FiscalCalendars), MenuItemType::Display);
        menuFunction.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefGL_FiscalStartPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the form that the user should be directed to when clicking on the control value.
    /// </summary>
    public void jumpRefGL_FiscalStartPeriod()
    {
        MenuFunction menuFunction;

        menuFunction = new MenuFunction(menuitemDisplayStr(FiscalCalendars), MenuItemType::Display);
        menuFunction.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefGL_FiscalYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the form that the user should be directed to when clicking on the control value.
    /// </summary>
    public void jumpRefGL_FiscalYear()
    {
        MenuFunction menuFunction;

        menuFunction = new MenuFunction(menuitemDisplayStr(FiscalCalendars), MenuItemType::Display);
        menuFunction.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceGL_FiscalEndPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform the lookup for the <c>GeneralJournalSource_FiscalEndPeriod</c> control.
    /// </summary>
    /// <returns>
    /// The selected <c>FiscalCalendarPeriod</c> record.
    /// </returns>
    public Common lookupReferenceGL_FiscalEndPeriod()
    {
        BudgetPlanFormHelper::validateLookupControlFilledIn(sourceGenJourFiscalYear);

        return FiscalCalendarPeriod::fiscalPeriodOperatingLookupReference(sourceGenJourFiscalEndPeriod, SourcegenJourFiscalYear.value());
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceGL_FiscalStartPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform the lookup for the <c>GeneralJournalSource_FiscalStartPeriod</c> control.
    /// </summary>
    /// <returns>
    /// The selected <c>FiscalCalendarPeriod</c> record.
    /// </returns>
    public Common lookupReferenceGL_FiscalStartPeriod()
    {
        BudgetPlanFormHelper::validateLookupControlFilledIn(sourceGenJourFiscalYear);

        return FiscalCalendarPeriod::fiscalPeriodOperatingLookupReference(sourceGenJourFiscalStartPeriod, SourcegenJourFiscalYear.value());
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceGL_FiscalYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform the lookup for the <c>GeneralJournalSource_FiscalYear</c> control.
    /// </summary>
    /// <returns>
    /// The selected <c>FiscalCalendarYear</c> record.
    /// </returns>
    public Common lookupReferenceGL_FiscalYear()
    {
        return LedgerFiscalCalendar::fiscalYearLookupReference(sourceGenJourFiscalYear, sourceLedger.value());
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupTargetBudgetPlanScenario</Name>
				<Source><![CDATA[
    public void lookupTargetBudgetPlanScenario()
    {
        boolean                     useFirstBudgetPlanningStage;
        BudgetPlanningStageRecId    budgetPlanningStageRecId;

        BudgetPlanFormHelper::validateLookupControlFilledIn(targetBudgetPlanningProcess);
        BudgetPlanFormHelper::validateLookupControlFilledIn(targetResponsibilityCenter);

        if (targetGenJourHistorical.selection() == NoYes::No)
        {
            useFirstBudgetPlanningStage = (budgetPlanTransferTypeControl.selection() == BudgetPlanGenerateType::NewBudgetPlan);

            if (!useFirstBudgetPlanningStage)
            {
                BudgetPlanFormHelper::validateLookupControlFilledIn(targetBudgetPlanningDocumentNumber);

                // If not using the first stage, then get the current stage
                budgetPlanningStageRecId = this.getBudgetPlanningStageRecId();
            }

            BudgetPlanLookupHelper::lookupBudgetPlanScenario(
                targetBudgetPlanScenario,
                targetBudgetPlanningProcess.value(),
                0,
                targetResponsibilityCenter.value(),
                NoYes::No,
                useFirstBudgetPlanningStage,
                budgetPlanningStageRecId,
                UnitOfMeasureClass::Monetary);
        }
        else
        {
            BudgetPlanLookupHelper::lookupBudgetPlanScenario(
                targetBudgetPlanScenario,
                targetBudgetPlanningProcess.value(),
                0,
                targetResponsibilityCenter.value(),
                NoYes::Yes,
                false,
                0,
                UnitOfMeasureClass::Monetary);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedGL_FiscalYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates other form controls when the <c>GeneralJournalSource_FiscalYearControl</c> control is modified.
    /// </summary>
    /// <param name="_isModified">
    /// true if the control has been modified; otherwise, false.
    /// </param>
    /// <returns>
    /// the value passed in in the <c>_isModified</c> parameter.
    /// </returns>
    public boolean modifiedGL_FiscalYear(boolean _isModified)
    {
        this.fiscalYearModified(SourcegenJourFiscalYear);
        this.setDefaultSourceGenJourFiscalEndPeriod(_isModified);
        this.setDefaultSourceGenjourFiscalStartPeriod(_isModified);

        return _isModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedIsHistoricalControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets default values based on the value of the target field being modified.
    /// </summary>
    /// <returns>
    /// true.
    /// </returns>
    public boolean modifiedIsHistoricalControl()
    {
        targetBudgetPlanScenario.text(BudgetPlanningConstants::emptyString);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveReferenceGL_FiscalEndPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>FiscalCalendarPeriod</c> record based on user selection.
    /// </summary>
    /// <returns>
    /// A record of <c>FiscalCalendarYear</c> table.
    /// </returns>
    public Common resolveReferenceGL_FiscalEndPeriod()
    {
        FiscalCalendarPeriod fiscalCalendarPeriod;
        PeriodName           periodName;

        periodName = sourceGenJourFiscalEndPeriod.filterValue(AbsoluteFieldBinding::construct(fieldStr(FiscalCalendarPeriod, Name), tableStr(FiscalCalendarPeriod))).value();

        fiscalCalendarPeriod = FiscalCalendarPeriod::findByCalendarYearPeriod(
                                sourceGenJourFiscalYear.value(),
                                periodName);

        return fiscalCalendarPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveReferenceGL_FiscalStartPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the reference for the value selected on the <c>GeneralLedgerJournalSource_FiscalStartPeriodControl</c> control.
    /// </summary>
    /// <returns>
    /// A record containing the correct reference for the value selected on the control.
    /// </returns>
    public Common resolveReferenceGL_FiscalStartPeriod()
    {
        FiscalCalendarPeriod fiscalCalendarPeriod;
        PeriodName           periodName;

        periodName = sourceGenJourFiscalStartPeriod.filterValue(AbsoluteFieldBinding::construct(fieldStr(FiscalCalendarPeriod, Name), tableStr(FiscalCalendarPeriod))).value();

        fiscalCalendarPeriod = FiscalCalendarPeriod::findByCalendarYearPeriod(
                                sourceGenJourFiscalYear.value(),
                                periodName);

        return fiscalCalendarPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveReferenceGL_FiscalYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the reference for the value selected on the <c>GeneralLedgerJournalSource_FiscalYearControl</c> control.
    /// </summary>
    /// <returns>
    /// A record containing the correct reference for the value selected on the control.
    /// </returns>
    public Common resolveReferenceGL_FiscalYear()
    {
        FiscalCalendarYear  fiscalCalendarYear;
        FiscalYearName      fiscalYearName;
        Ledger              ledger;

        fiscalYearName = SourcegenJourFiscalYear.filterValue(AbsoluteFieldBinding::construct(fieldStr(FiscalCalendarYear, Name), tableStr(FiscalCalendarYear))).value();

        ledger = Ledger::find(sourceLedger.value());
        fiscalCalendarYear = FiscalCalendarYear::findByCalendarYearName(
                                ledger.FiscalCalendar,
                                fiscalYearName);

        return fiscalCalendarYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>restoreLastSavedControlValues</Name>
				<Source><![CDATA[
    public void restoreLastSavedControlValues(FormRun _formRun)
    {
        super(_formRun);

        if (sourceLedger.value() == 0)
        {
            this.setDefaultSourceLedgerSource();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveAccountTypeControlValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the value of the passed in <c>FormListControl</c> control to the appropriate class variable.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Thrown when an item has been added to the <paramref name="_formListControl"/> that was not expected.
    /// </exception>
    private void saveAccountTypeControlValue()
    {
        int itemIndex;

        for (itemIndex = 0; itemIndex < SourceGenJourAccountType.getCount(); itemIndex++)
        {
            boolean isAccountTypeControlValueSaved = this.saveAccountTypeControlValueForItemIndex(itemIndex);

            if (!isAccountTypeControlValueSaved)
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveAccountTypeControlValueForItemIndex</Name>
				<Source><![CDATA[
    // <summary>
    /// Indicates whether the passed in <c>FormListControl</c> control to the appropriate class variable is saved.
    /// </summary>
    /// <param name = "_itemIndex">
    /// The item index.
    /// </param>
    /// <returns>
    /// true if the <c>FormListControl</c> control was saved; otherwise, false.
    /// </returns>
    [Wrappable(true)]
    protected final boolean saveAccountTypeControlValueForItemIndex(int _itemIndex)
    {
        boolean isAccountTypeControlValueSaved = true;
        BudgetPlanGenerateContractGenJour budgetPlanGenerateContractGenJour = budgetPlanGenerateContract as BudgetPlanGenerateContractGenJour;
        FormListItem formListItem = SourceGenJourAccountType.getItem(_itemIndex);
        DimensionLedgerAccountType accountType = formListItem.data();

        switch (accountType)
        {
            case DimensionLedgerAccountType::ProfitAndLoss:
                budgetPlanGenerateContractGenJour.parmAccountTypeProfitandLossSelected(formListItem.stateSelected());
                break;
            case DimensionLedgerAccountType::Revenue:
                budgetPlanGenerateContractGenJour.parmAccountTypeRevenueSelected(formListItem.stateSelected());
                break;
            case DimensionLedgerAccountType::Asset:
                budgetPlanGenerateContractGenJour.parmAccountTypeAssetSelected(formListItem.stateSelected());
                break;
            case DimensionLedgerAccountType::BalanceSheet:
                budgetPlanGenerateContractGenJour.parmAccountTypeBalanceSheetSelected(formListItem.stateSelected());
                break;
            case DimensionLedgerAccountType::Expense:
                budgetPlanGenerateContractGenJour.parmAccountTypeExpenseSelected(formListItem.stateSelected());
                break;
            case DimensionLedgerAccountType::Liability:
                budgetPlanGenerateContractGenJour.parmAccountTypeLiabilitySelected(formListItem.stateSelected());
                break;
            case DimensionLedgerAccountType::Total:
                budgetPlanGenerateContractGenJour.parmAccountTypeTotalSelected(formListItem.stateSelected());
                break;
            case DimensionLedgerAccountType::Equity:
                budgetPlanGenerateContractGenJour.parmAccountTypeEquitySelected(formListItem.stateSelected());
                break;
            default:
                isAccountTypeControlValueSaved = false;
        }

        return isAccountTypeControlValueSaved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveControlValue</Name>
				<Source><![CDATA[
    protected void saveControlValue(FormControl _formControl)
    {
        BudgetPlanGenerateContractGenJour   budgetPlanGenerateContractGenJour = budgetPlanGenerateContract as BudgetPlanGenerateContractGenJour;

        super(_formControl);

        switch (_formControl.name())
        {
            case formControlStr(BudgetPlanGenerate, SourceBudgetPlanTransferTotal) :
                budgetPlanGenerateContract.parmTargetBudgetPlanGenerateAggregateBy(sourceBudgetPlanTransferTotal.selection());
                break;

            case formControlStr(BudgetPlanGenerate, sourceGenJourFiscalYear) :
                budgetPlanGenerateContractGenJour.parmFiscalCalendarYearRecId(SourcegenJourFiscalYear.value());
                break;

            case formControlStr(BudgetPlanGenerate, SourceGenJourFiscalStartPeriod) :
                budgetPlanGenerateContractGenJour.parmFromFiscalCalendarPeriodRecId(sourceGenJourFiscalStartPeriod.value());
                break;

            case formControlStr(BudgetPlanGenerate, SourceGenJourFiscalEndPeriod) :
                budgetPlanGenerateContractGenJour.parmToFiscalCalendarPeriodRecId(sourceGenJourFiscalEndPeriod.value());
                break;

            case formControlStr(BudgetPlanGenerate, SourceGenJourIncludeClosingTransaction) :
                budgetPlanGenerateContractGenJour.parmIncludeClosingTransaction(sourceGenJourIncludeClosingTransaction.value());
                break;

            case formControlStr(BudgetPlanGenerate, SourceGenJourAccountTypeGroup) :
                this.saveAccountTypeControlValue();
                break;

            case formControlStr(BudgetPlanGenerate, TargetGenJourHistorical) :
                budgetPlanGenerateContract.parmTargetIsHistorical(targetGenJourHistorical.selection());
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAccountTypeControlValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// sets the value of the passed in <c>FormListControl</c> control to the value opn the appropriate class variable.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Thrown when an item has been added to the <paramref name="_formListControl"/> that was not expected.
    /// </exception>
    private void setAccountTypeControlValue()
    {
        FormListItem formListItem;
        int itemIndex, itemCount;

        itemCount = SourceGenJourAccountType.getCount();

        for (itemIndex = 0; itemIndex < itemCount; itemIndex++)
        {
            formListItem = SourceGenJourAccountType.getItem(itemIndex);

            boolean isAccountTypeControlValueSet = this.setAccountTypeControlValueForFormListItem(formListItem);

            if (!isAccountTypeControlValueSet)
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }

            SourceGenJourAccountType.setItem(formListItem);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAccountTypeControlValueForFormListItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the passed in <c>FormListControl</c> control to the appropriate class variable can be set.
    /// </summary>
    /// <param name = "_formListItem">
    /// The list item.
    /// </param>
    /// <returns>
    /// true if the <c>FormListControl</c> control was set; otherwise, false.
    /// </returns>
    [Wrappable(true)]
    protected final boolean setAccountTypeControlValueForFormListItem(FormListItem _formListItem)
    {
        boolean isAccountTypeControlValueSet = true;
        BudgetPlanGenerateContractGenJour budgetPlanGenerateContractGenJour = budgetPlanGenerateContract as BudgetPlanGenerateContractGenJour;
        DimensionLedgerAccountType accountType = _formListItem.data();


        switch (accountType)
        {
            case DimensionLedgerAccountType::ProfitAndLoss:
                _formListItem.stateSelected(budgetPlanGenerateContractGenJour.parmAccountTypeProfitandLossSelected());
                break;
            case DimensionLedgerAccountType::Revenue:
                _formListItem.stateSelected(budgetPlanGenerateContractGenJour.parmAccountTypeRevenueSelected());
                break;
            case DimensionLedgerAccountType::Asset:
                _formListItem.stateSelected(budgetPlanGenerateContractGenJour.parmAccountTypeAssetSelected());
                break;
            case DimensionLedgerAccountType::BalanceSheet:
                _formListItem.stateSelected(budgetPlanGenerateContractGenJour.parmAccountTypeBalanceSheetSelected());
                break;
            case DimensionLedgerAccountType::Expense:
                _formListItem.stateSelected(budgetPlanGenerateContractGenJour.parmAccountTypeExpenseSelected());
                break;
            case DimensionLedgerAccountType::Liability:
                _formListItem.stateSelected(budgetPlanGenerateContractGenJour.parmAccountTypeLiabilitySelected());
                break;
            case DimensionLedgerAccountType::Total:
                _formListItem.stateSelected(budgetPlanGenerateContractGenJour.parmAccountTypeTotalSelected());
                break;
            case DimensionLedgerAccountType::Equity:
                _formListItem.stateSelected(budgetPlanGenerateContractGenJour.parmAccountTypeEquitySelected());
                break;
            default:
                isAccountTypeControlValueSet = false;
        }

        return isAccountTypeControlValueSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControlValue</Name>
				<Source><![CDATA[
    public void setControlValue(FormControl _formControl)
    {
        BudgetPlanGenerateContractGenJour   budgetPlanGenerateContractGenJour = budgetPlanGenerateContract as BudgetPlanGenerateContractGenJour;

        super(_formControl);

        switch (_formControl.name())
        {
            case formControlStr(BudgetPlanGenerate, SourceGenJourAccountTypeControl) :
                this.setAccountTypeControlValue();
                break;

            case formControlStr(BudgetPlanGenerate, SourceBudgetPlanTransferTotal) :
                sourceBudgetPlanTransferTotal.selection(budgetPlanGenerateContract.parmTargetBudgetPlanGenerateAggregateBy());
                break;

            case formControlStr(BudgetPlanGenerate, SourceGenJourFiscalYearGroup) :
                sourceGenJourFiscalYear.value(budgetPlanGenerateContractGenJour.parmFiscalCalendarYearRecId());
                break;

            case formControlStr(BudgetPlanGenerate, SourceGenJourFiscalStartPeriod) :
                sourceGenJourFiscalStartPeriod.value(budgetPlanGenerateContractGenJour.parmFromFiscalCalendarPeriodRecId());
                break;

            case formControlStr(BudgetPlanGenerate, SourceGenJourFiscalEndPeriod) :
                sourceGenJourFiscalEndPeriod.value(budgetPlanGenerateContractGenJour.parmToFiscalCalendarPeriodRecId());
                break;

            case formControlStr(BudgetPlanGenerate, TargetGenJourHistorical) :
                targetGenJourHistorical.selection(budgetPlanGenerateContract.parmTargetIsHistorical());
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultSourceGenJourFiscalEndPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default value for the <c>GeneralJournalSource_FiscalEndPeriodControl</c> control.
    /// </summary>
    /// <param name="_GLSourceFiscalYearModified">
    /// true if the <c>GeneralJournalSource_FiscalEndPeriodControl</c> control has been modified; otherwise, false.
    /// </param>
    protected void setDefaultSourceGenJourFiscalEndPeriod(boolean _GLSourceFiscalYearModified = false)
    {
        if (_GLSourceFiscalYearModified)
        {
            sourceGenJourFiscalEndPeriod.value(0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultSourceGenJourFiscalStartPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default value for the <c>GeneralJournalSource_FiscalStartPeriodControl</c> control.
    /// </summary>
    /// <param name="_GLSourceFiscalYearModified">
    /// true if the <c>GeneralJournalSource_FiscalStartPeriodControl</c> control has been modified; otherwise, false.
    /// </param>
    protected void setDefaultSourceGenJourFiscalStartPeriod(boolean _GLSourceFiscalYearModified = false)
    {
        if (_GLSourceFiscalYearModified)
        {
            sourceGenJourFiscalStartPeriod.value(0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormControl</Name>
				<Source><![CDATA[
    protected void setFormControl(FormControl _formControl)
    {
        super(_formControl);

        switch (_formControl.name())
        {
            // Source fields
            case formControlStr(BudgetPlanGenerate, SourceGenJourLeftGroup) :
                sourceGeneralLedgerLeftGroup = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, SourceBudgetPlanTransferTotalGroup) :
                sourceBudgetPlanTransferTotalGroup = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, SourceBudgetPlanTransferTotal) :
                sourceBudgetPlanTransferTotal= _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, SourceGenJourFiscalYearGroup) :
                sourceGenJourFiscalYearGroup = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, SourceGenJourFiscalYear) :
                sourceGenJourFiscalYear = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, SourceGenJourFiscalStartPeriod) :
                sourceGenJourFiscalStartPeriod = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, SourceGenJourFiscalEndPeriod) :
                sourceGenJourFiscalEndPeriod = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, SourceGenJourAccountTypeGroup) :
                sourceGenJourAccountTypeGroup = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, SourceGenJourAccountTypeControl) :
                sourceGenJourAccountType= _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, SourceGenJourIncludeClosingTransaction) :
                sourceGenJourIncludeClosingTransaction = _formControl;
                break;

            // Target fields
            case formControlStr(BudgetPlanGenerate, TargetGenJourHistorical) :
                targetGenJourHistorical = _formControl;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInstructionText</Name>
				<Source><![CDATA[
    protected void setInstructionText()
    {
        instruction.text("@Budget:GenerateBudgetPlanFromGeneralLedgerFormInstruction");
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMandatoryControls</Name>
				<Source><![CDATA[
    protected void setMandatoryControls()
    {
        sourceGenJourFiscalYear.mandatory(true);
        sourceGenJourFiscalStartPeriod.mandatory(true);
        sourceGenJourFiscalEndPeriod.mandatory(true);
        sourceLedger.mandatory(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleControls</Name>
				<Source><![CDATA[
    public void setVisibleControls()
    {
        super();

        sourceTabPage.columns(1);
        sourceBudgetPlanTransferTotalGroup.visible(true);
        sourceGeneralLedgerLeftGroup.visible(true);
        sourceGenJourAccountTypeGroup.visible(true);
        targetGenJourHistorical.visible(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCanClose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the validation on the contract data.
    /// </summary>
    /// <returns>
    /// true when the no error found; otherwise, false.
    /// </returns>
    public boolean validateCanClose()
    {
        boolean                                 canClose;
        FiscalCalendarPeriod                    fiscalCalendarPeriod;
        BudgetPlanGenerateContractGenJour       budgetPlanGenerateContractGenJour = budgetPlanGenerateContract as BudgetPlanGenerateContractGenJour;

        canClose = super();

        canClose = canClose && this.validateHistoricalControl();

        if (sourceLedger.value() == 0)
        {
            error(strFmt("@SYS84753", sourceLedger.labelText()));
            canClose = false;
        }

        if (sourceGenJourFiscalYear.value() == 0)
        {
            error(strFmt("@SYS84753", SourcegenJourFiscalYear.labelText()));
            canClose = false;
        }

        if (sourceGenJourFiscalEndPeriod.value() == 0)
        {
            error(strFmt("@SYS84753", sourceGenJourFiscalEndPeriod.labelText()));
            canClose = false;
        }

        if (sourceGenJourFiscalStartPeriod.value() == 0)
        {
            error(strFmt("@SYS84753", sourceGenJourFiscalStartPeriod.labelText()));
            canClose = false;
        }

        // checking error condition for fiscal period.
        fiscalCalendarPeriod = FiscalCalendarPeriod::find(budgetPlanGenerateContractGenJour.parmFromFiscalCalendarPeriodRecId());

        if (fiscalCalendarPeriod.RecId && fiscalCalendarPeriod.FiscalCalendarYear != budgetPlanGenerateContractGenJour.parmFiscalCalendarYearRecId())
        {
            error(strFmt("@GLS70437", fiscalCalendarPeriod.periodName()));
            canClose = false;
        }

        fiscalCalendarPeriod = FiscalCalendarPeriod::find(budgetPlanGenerateContractGenJour.parmToFiscalCalendarPeriodRecId());

        if (fiscalCalendarPeriod.RecId && fiscalCalendarPeriod.FiscalCalendarYear != budgetPlanGenerateContractGenJour.parmFiscalCalendarYearRecId())
        {
            error(strFmt("@GLS70437", fiscalCalendarPeriod.periodName()));
            canClose = false;
        }

        // At least one account type must be selected.
        if (!BudgetPlanGenerateContractGenJour.parmAccountTypeAssetSelected() &&
            !BudgetPlanGenerateContractGenJour.parmAccountTypeBalanceSheetSelected() &&
            !BudgetPlanGenerateContractGenJour.parmAccountTypeTotalSelected() &&
            !BudgetPlanGenerateContractGenJour.parmAccountTypeExpenseSelected() &&
            !BudgetPlanGenerateContractGenJour.parmAccountTypeLiabilitySelected() &&
            !BudgetPlanGenerateContractGenJour.parmAccountTypeProfitandLossSelected() &&
            !BudgetPlanGenerateContractGenJour.parmAccountTypeRevenueSelected() &&
            !BudgetPlanGenerateContractGenJour.parmAccountTypeEquitySelected())
        {
            error("@GLS70439");
            canClose = false;
        }

        return canClose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateHistoricalControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates this <c>historicalControl</c> control.
    /// </summary>
    /// <returns>
    /// true if the value on the <c>historicalControl</c> is valid; otherwise, false;
    /// </returns>
    protected boolean validateHistoricalControl()
    {
        boolean isValid = true;

        if (targetGenJourHistorical.selection() == NoYes::No &&
            sourceBudgetPlanTransferTotal.selection() != BudgetPlanGenerateAggregateBy::FiscalYear)
        {
            if (Box::yesNo("@GLS150017", DialogButton::No) == DialogButton::Yes)
            {
                sourceBudgetPlanTransferTotal.selection(BudgetPlanGenerateAggregateBy::FiscalYear);
                budgetPlanGenerateContract.parmTargetBudgetPlanGenerateAggregateBy(sourceBudgetPlanTransferTotal.selection());
            }
            else
            {
                isValid = false;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTargetBudgetPlanScenario</Name>
				<Source><![CDATA[
    public boolean validateTargetBudgetPlanScenario()
    {
        boolean             isValid;
        BudgetPlanningStage budgetPlanningStage;
        BudgetPlanScenario  budgetPlanScenario = BudgetPlanScenario::findByLocalizedName(targetBudgetPlanScenario.text());

        if (targetGenJourHistorical.selection() == NoYes::No)
        {
            isValid = super();
        }
        else
        {
            budgetPlanningStage = BudgetPlanningWorkflowSetup::getLastPlanningStage(
                                    targetBudgetPlanningProcess.value(),
                                    targetResponsibilityCenter.value());

            BudgetPlanLayoutRecId budgetPlanLayoutRecId = BudgetPlanningStageRule::findByProcessOrganizationStage(
                                                                targetBudgetPlanningProcess.value(),
                                                                targetResponsibilityCenter.value(),
                                                                budgetPlanningStage.RecId).Layout;
            isValid = BudgetPlanLayoutHelper::validateScenarioExistsInLayout(budgetPlanLayoutRecId, budgetPlanScenario.Name);
        }

        if (isValid && BudgetPlanScenario.UnitOfMeasureClass != UnitOfMeasureClass::Monetary)
        {
            isValid = checkFailed("@SYS4000401");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BudgetPlanGenerateFormGenJour construct()
    {
        return new BudgetPlanGenerateFormGenJour();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>