<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PriceDiscTableCopyFromPriceDiscAdmTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PriceDiscTableCopyFromPriceDiscAdmTrans</c> class copies values from the <c>PriceDiscAdmTrans</c> records into the <c>PriceDiscTable</c> records.
/// </summary>
public class PriceDiscTableCopyFromPriceDiscAdmTrans extends SysQueryInsertRecordSet
{
    private int priceDiscAdmTransDatasourceId;
    private PriceDiscJournalNum journalNum;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeJournalNumFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies filters to the selection query based on the <c>PriceDiscJournalNum</c> value.
    /// </summary>
    /// <param name = "_journalNum">
    /// A <c>PriceDiscJournalNum</c> value used to filter by.
    /// </param>
    private void initializeJournalNumFilter(PriceDiscJournalNum _journalNum)
    {
        journalNum = _journalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceDiscAdmTransDatasourceId</Name>
				<Source><![CDATA[
    protected final int priceDiscAdmTransDatasourceId()
    {
        return priceDiscAdmTransDatasourceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFieldMapping</Name>
				<Source><![CDATA[
    protected void initFieldMapping()
    {
        this.mapField(priceDiscAdmTransDatasourceId, fieldStr(PriceDiscAdmTrans, Agreement), fieldStr(PriceDiscTable, Agreement));
        this.mapField(priceDiscAdmTransDatasourceId, fieldStr(PriceDiscAdmTrans, ItemCode), fieldStr(PriceDiscTable, ItemCode));
        this.mapField(priceDiscAdmTransDatasourceId, fieldStr(PriceDiscAdmTrans, AccountCode), fieldStr(PriceDiscTable, AccountCode));
        this.mapField(priceDiscAdmTransDatasourceId, fieldStr(PriceDiscAdmTrans, ItemRelation), fieldStr(PriceDiscTable, ItemRelation));
        this.mapField(priceDiscAdmTransDatasourceId, fieldStr(PriceDiscAdmTrans, AccountRelation), fieldStr(PriceDiscTable, AccountRelation));
        this.mapField(priceDiscAdmTransDatasourceId, fieldStr(PriceDiscAdmTrans, UnitId), fieldStr(PriceDiscTable, UnitId));
        this.mapField(priceDiscAdmTransDatasourceId, fieldStr(PriceDiscAdmTrans, QuantityAmountFrom), fieldStr(PriceDiscTable, QuantityAmountFrom));
        this.mapField(priceDiscAdmTransDatasourceId, fieldStr(PriceDiscAdmTrans, QuantityAmountTo), fieldStr(PriceDiscTable, QuantityAmountTo));
        this.mapField(priceDiscAdmTransDatasourceId, fieldStr(PriceDiscAdmTrans, GenericCurrency), fieldStr(PriceDiscTable, GenericCurrency));
        this.mapField(priceDiscAdmTransDatasourceId, fieldStr(PriceDiscAdmTrans, FromDate), fieldStr(PriceDiscTable, FromDate));
        this.mapField(priceDiscAdmTransDatasourceId, fieldStr(PriceDiscAdmTrans, ToDate), fieldStr(PriceDiscTable, ToDate));
        this.mapField(priceDiscAdmTransDatasourceId, fieldStr(PriceDiscAdmTrans, Amount), fieldStr(PriceDiscTable, Amount));
        this.mapField(priceDiscAdmTransDatasourceId, fieldStr(PriceDiscAdmTrans, Currency), fieldStr(PriceDiscTable, Currency));
        this.mapField(priceDiscAdmTransDatasourceId, fieldStr(PriceDiscAdmTrans, Percent1), fieldStr(PriceDiscTable, Percent1));
        this.mapField(priceDiscAdmTransDatasourceId, fieldStr(PriceDiscAdmTrans, Percent2), fieldStr(PriceDiscTable, Percent2));
        this.mapField(priceDiscAdmTransDatasourceId, fieldStr(PriceDiscAdmTrans, DisregardLeadTime), fieldStr(PriceDiscTable, DisregardLeadTime));
        this.mapField(priceDiscAdmTransDatasourceId, fieldStr(PriceDiscAdmTrans, DeliveryTime), fieldStr(PriceDiscTable, DeliveryTime));
        this.mapField(priceDiscAdmTransDatasourceId, fieldStr(PriceDiscAdmTrans, SearchAgain), fieldStr(PriceDiscTable, SearchAgain));
        this.mapField(priceDiscAdmTransDatasourceId, fieldStr(PriceDiscAdmTrans, PriceUnit), fieldStr(PriceDiscTable, PriceUnit));
        this.mapField(priceDiscAdmTransDatasourceId, fieldStr(PriceDiscAdmTrans, Relation), fieldStr(PriceDiscTable, Relation));
        this.mapField(priceDiscAdmTransDatasourceId, fieldStr(PriceDiscAdmTrans, Markup), fieldStr(PriceDiscTable, Markup));
        this.mapField(priceDiscAdmTransDatasourceId, fieldStr(PriceDiscAdmTrans, AllocateMarkup), fieldStr(PriceDiscTable, AllocateMarkup));
        this.mapField(priceDiscAdmTransDatasourceId, fieldStr(PriceDiscAdmTrans, Module), fieldStr(PriceDiscTable, Module));
        this.mapField(priceDiscAdmTransDatasourceId, fieldStr(PriceDiscAdmTrans, CalendarDays), fieldStr(PriceDiscTable, CalendarDays));
        this.mapField(priceDiscAdmTransDatasourceId, fieldStr(PriceDiscAdmTrans, InventDimId), fieldStr(PriceDiscTable, InventDimId));
        this.mapField(priceDiscAdmTransDatasourceId, fieldStr(PriceDiscAdmTrans, AgreementHeaderExt_RU), fieldStr(PriceDiscTable, AgreementHeaderExt_RU));
        this.mapField(priceDiscAdmTransDatasourceId, fieldStr(PriceDiscAdmTrans, InventBaileeFreeDays_RU), fieldStr(PriceDiscTable, InventBaileeFreeDays_RU));
        this.mapField(priceDiscAdmTransDatasourceId, fieldStr(PriceDiscAdmTrans, MaximumRetailPrice_IN), fieldStr(PriceDiscTable, MaximumRetailPrice_IN));
        this.mapField(priceDiscAdmTransDatasourceId, fieldStr(PriceDiscAdmTrans, PDSCalculationId), fieldStr(PriceDiscTable, PDSCalculationId));
        this.mapField(priceDiscAdmTransDatasourceId, fieldStr(PriceDiscAdmTrans, RecId), fieldStr(PriceDiscTable, OriginalPriceDiscAdmTransRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    protected final Query initQuery()
    {
        Query query = new Query();

        QueryBuildDataSource qbdsPriceDiscAdmTrans = query.addDataSource(tableNum(PriceDiscAdmTrans));
        qbdsPriceDiscAdmTrans.addRange(fieldNum(PriceDiscAdmTrans, JournalNum)).value(queryValue(journalNum));
        qbdsPriceDiscAdmTrans.addRange(fieldNum(PriceDiscAdmTrans, MustBeDeleted)).value(queryValue(NoYes::No));
        qbdsPriceDiscAdmTrans.addRange(fieldNum(PriceDiscAdmTrans, PriceDiscTableRef)).value(queryValue(0));
        priceDiscAdmTransDatasourceId = qbdsPriceDiscAdmTrans.uniqueId();

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTargetCursor</Name>
				<Source><![CDATA[
    protected final Common initTargetCursor()
    {
        PriceDiscTable priceDiscTableInsert;

        priceDiscTableInsert.skipDataMethods(true);
        priceDiscTableInsert.skipEvents(this.skipEvents());

        return priceDiscTableInsert;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipEvents</Name>
				<Source><![CDATA[
    protected boolean skipEvents()
    {
        if (PriceDiscSalesParametersManagerSkipEventsFlight::instance().isEnabled())
        {
            return SalesParameters::find().IsPriceDiscTableInsertSkipEventsEnabled;
        }

        return PriceDiscTableCreateSkipEventsFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPurchTableVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>PriceDiscAdmCheckPostJournal</c> used to insert <c>PriceDiscTable</c> records associated with the passed journal number.
    /// </summary>
    /// <param name = "PriceDiscJournalNum">
    /// A <c>PriceDiscJournalNum</c> value for which the <c>PriceDiscTable</c> records should be inserted.
    /// </param>
    /// <returns>
    /// The instantiated <c>PriceDiscAdmCheckPostJournal</c> object.
    /// </returns>
    [Hookable(false)]
    public static PriceDiscTableCopyFromPriceDiscAdmTrans newFromPurchTableVersion(PriceDiscJournalNum _journalNum)
    {
        PriceDiscTableCopyFromPriceDiscAdmTrans instance = new PriceDiscTableCopyFromPriceDiscAdmTrans();

        instance.initializeJournalNumFilter(_journalNum);

        return instance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>