<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjInvoiceProposalListPageInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class governs the behavior of <c>ProjInvoiceProposalListPage</c> form.
/// </summary>
class ProjInvoiceProposalListPageInteraction extends SysListPageInteractionBase
{
    Common                              externalRecord;
    boolean                             isBrazilEnabled,isBalticEnabled;

    private const str datasourceName_ProjProposalJour = 'ProjProposalJour';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the query used for <c>ProjInvoiceProposalListPage</c> form.
    /// </summary>
    /// <param name="_query">
    /// Query to be used.
    /// </param>
    public void initializeQuery(Query _query)
    {
        #define.ProjId('ProjId')
        QueryBuildDataSource        projProposalJourDS;
        str                         projId;
        QueryBuildDataSource        projProposalTransUnionDataSource;
        str                         serviceOrderId;
        boolean                     isServiceOrder;
        const str                   serviceOrderIdentifier = 'ServiceOrderId';

        super(_query);

        if (externalRecord)
        {
            projProposalJourDS = _query.dataSourceTable(tableNum(ProjProposalJour));

            switch (externalRecord.TableId)
            {
                case tableNum(ProjRevenueTrans):
                    projId = externalRecord.getFieldValue(#ProjId);
                    break;

                case tableNum(SMAServiceOrderTable):
                    isServiceOrder = true;
                    serviceOrderId = externalRecord.getFieldValue(serviceOrderIdentifier);
                    break;

                case tableNum(ProjTable):
                    projId = externalRecord.getFieldValue(#ProjId);
                    break;

                default:
            }
            if (isServiceOrder)
            {
                ProjProposalLinesUnion projProposalLinesUnion;
                boolean appliedFilter;

                QueryRun qr = new QueryRun(this.buildProjProposalLinesUnionQuery(serviceOrderId));

                while (qr.next())
                {
                    projProposalLinesUnion = qr.get(tableNum(ProjProposalLinesUnion)) as ProjProposalLinesUnion;

                    appliedFilter = true;
                    projProposalJourDS.addRange(fieldNum(ProjProposalJour, ProposalId)).value(queryValue(projProposalLinesUnion.ProposalId));
                }
                //Used when no filter is applied to prevent query from returning all the records, make it return nothing
                if (!appliedFilter)
                {
                    projProposalJourDS.addRange(fieldNum(ProjProposalJour, ProposalId)).value(SysQuery::valueEmptyString());
                }
            }
            else
            {
                projProposalTransUnionDataSource = projProposalJourDS.addDataSource(tableNum(ProjProposalTransTable));
                projProposalTransUnionDataSource.addLink(fieldNum(ProjProposalJour, ProposalId), fieldNum(ProjProposalTransTable, ProposalId));
                
                if (externalRecord.TableId == tableNum(ProjInvoiceTable))
                {
                    ProjInvoiceTable projInvoiceTable = externalRecord as ProjInvoiceTable;

                    QueryBuildDataSource projDataSource = projProposalTransUnionDataSource.addDataSource(tableNum(ProjTable));
                    projDataSource.addLink(fieldNum(ProjProposalTransTable, ProjId), fieldNum(ProjTable, ProjId));
                    projDataSource.addRange(fieldNum(ProjTable, ProjInvoiceProjId)).value(SysQuery::value(projInvoiceTable.ProjInvoiceProjId));
                    projDataSource.joinMode(JoinMode::ExistsJoin);
                }
                else
                {
                    projProposalTransUnionDataSource.addRange(fieldNum(ProjProposalTransTable, ProjId)).value(SysQuery::ValueLikeAfter(projId));
                }

                projProposalTransUnionDataSource.joinMode(JoinMode::ExistsJoin);
            }
        }
        // <GBR>
        // Filter Invoice and deit note records bases on menu item caller.

        projProposalJourDS = _query.dataSourceTable(tableNum(ProjProposalJour));

        if (BrazilParameters::isEnabled())
        {
            if (this.listPage().listPageArgs().menuItemName() ==  menuitemDisplayStr(ProjDebitNoteProposalListPage_BR))
            {
                projProposalJourDS.addRange(fieldNum(ProjProposalJour,InvoiceType)).value(queryValue(ProjInvoiceType::DebitNote_BR));
            }
            else
            {
                projProposalJourDS.addRange(fieldNum(ProjProposalJour,InvoiceType)).value(queryValue(ProjInvoiceType::Invoice));
                projProposalJourDS.addRange(fieldNum(ProjProposalJour,InvoiceType)).value(queryValue(ProjInvoiceType::OnAccount));
            }
        }
        // </GBR>

        ProjLegalEntityLookupListPageHelper leLookupHelper = new ProjLegalEntityLookupListPageHelper(formStr(ProjInvoiceProposalListPage));

        _query = leLookupHelper.setCrossCompanyQuery(_query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProjProposalLinesUnionQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds a query to get <c>ProjProposalLinesUnion</c> records.
    /// </summary>
    /// <param name = "_serviceOrderId">
    ///     Service order id.
    /// </param>
    /// <returns>
    ///     A query object that retrieves <c>ProjProposalLinesUnion</c> records.
    /// </returns>
    protected Query buildProjProposalLinesUnionQuery(str _serviceOrderId)
    {
        Query query = new Query();

        QueryBuildDataSource qbdsProjProposalLinesUnion = query.addDataSource(tableNum(ProjProposalLinesUnion));
        qbdsProjProposalLinesUnion.addGroupByField(fieldNum(ProjProposalLinesUnion, ProposalId));

        QueryBuildDataSource qbdsSMAServiceOrderLine = qbdsProjProposalLinesUnion.addDataSource(tableNum(SMAServiceOrderLine));
        qbdsSMAServiceOrderLine.joinMode(JoinMode::ExistsJoin);
        qbdsSMAServiceOrderLine.addLink(fieldNum(ProjProposalLinesUnion, TransId), fieldNum(SMAServiceOrderLine, ProjTransId));
        qbdsSMAServiceOrderLine.addRange(fieldNum(SMAServiceOrderLine, ServiceOrderId)).value(queryValue(_serviceOrderId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializing</Name>
				<Source><![CDATA[
    public void initializing()
    {
        #ISOCountryRegionCodes;

        super();

        if (this.listPage() &&
            this.listPage().listPageArgs())
        {
            if (this.listPage().listPageArgs().externalRecord())
            {
                externalRecord = this.listPage().listPageArgs().externalRecord();
            }
        }

        isBrazilEnabled = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBR]);
        isBalticEnabled = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ, #isoEE, #isoHU, #isoPL, #isoLT, #isoLV]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChanged</Name>
				<Source><![CDATA[
    public void selectionChanged()
    {
        ListPage            listPage                = this.listPage();
        ProjProposalJour    projProposalJour        = listPage.activeRecord(datasourceName_ProjProposalJour);
        FormDataSource      projProposalJour_ds     = FormDataUtil::getFormDataSource(projProposalJour);
        boolean enhanceInvoiceProposalLinePerf = ProjParameters::find().InvoiceProposalLineEditPerf == NoYes::Yes ? true : false;

        projProposalJour_ds.allowDelete(false);
        listPage.actionPaneControlEnabled(formControlStr(ProjInvoiceProposalListPage, CtrlCancel), false);
        listPage.actionPaneControlEnabled(formControlStr(ProjInvoiceProposalListPage, ProjFormLetter_Invoice), false);
        listPage.actionPaneControlVisible(formControlStr(ProjInvoiceProposalListPage, TaxTmpWorkProjectInvoiceProposal), false);
        listPage.actionPaneControlVisible(formControlStr(ProjInvoiceProposalListPage, TaxTrans), false);
        listPage.actionPaneControlEnabled(formControlStr(ProjInvoiceProposalListPage, psAbtPrintPreview), false);
        listPage.actionPaneControlEnabled(formControlStr(ProjInvoiceProposalListPage, PSAProjInvoiceDetails), false);
        listPage.actionPaneControlEnabled(formControlStr(ProjInvoiceProposalListPage, ctrlPaymentSchedule), false);

        if (projProposalJour)
        {
            if (projProposalJour.LineProperty == ProjLinePropertyCode::Open ||
                projProposalJour.LineProperty == ProjLinePropertyCode::PSARejected ||
                projProposalJour.LineProperty == ProjLinePropertyCode::Approved)
            {
                listPage.actionPaneControlEnabled(formControlStr(ProjInvoiceProposalListPage, CtrlCancel), true);
                projProposalJour_ds.allowDelete(true);
            }

            if ((!enhanceInvoiceProposalLinePerf ||
                    projProposalJour.RecalculateTotalsStatus != ProjProposalRecalculateTotalsStatus::InProcess) &&
                (projProposalJour.LineProperty == ProjLinePropertyCode::Approved ||
                        projProposalJour.LineProperty == ProjLinePropertyCode::Open))
            {
                listPage.actionPaneControlEnabled(formControlStr(ProjInvoiceProposalListPage, ProjFormLetter_Invoice), projProposalJour.enablePostButton());
            }

            if (projProposalJour.LineProperty != ProjLinePropertyCode::Invoiced)
            {
                listPage.actionPaneControlVisible(formControlStr(ProjInvoiceProposalListPage, TaxTmpWorkProjectInvoiceProposal), !TaxSolutionScopeIntegrationUtil::isCompanyEnabled());
            }
            else
            {
                listPage.actionPaneControlVisible(formControlStr(ProjInvoiceProposalListPage, TaxTrans), true);
            }

            if ((enhanceInvoiceProposalLinePerf &&
                    projProposalJour.RecalculateTotalsStatus == ProjProposalRecalculateTotalsStatus::InProcess) ||
                projProposalJour.LineProperty == ProjLinePropertyCode::Invoiced ||
                projProposalJour.LineProperty == ProjLinePropertyCode::Canceled)
                
            {
                listPage.actionPaneControlEnabled(formControlStr(ProjInvoiceProposalListPage, psAbtPrintPreview), false);
            }
            else
            {
                listPage.actionPaneControlEnabled(formControlStr(ProjInvoiceProposalListPage, psAbtPrintPreview), true);
            }
            listPage.actionPaneControlEnabled(formControlStr(ProjInvoiceProposalListPage, PSAProjInvoiceDetails), projProposalJour.canManageInvoiceFormat());

            if (!projProposalJour.ProjInvoiceId)
            {
                listPage.actionPaneControlEnabled(formControlStr(ProjInvoiceProposalListPage, ctrlPaymentSchedule), projProposalJour.PaymentSched != "" );
            }
            else
            {
                listPage.actionPaneControlEnabled(formControlStr(ProjInvoiceProposalListPage, ctrlPaymentSchedule), true);
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display invoice and debit note controls based on menum item caller.
    /// </summary>
    public void setButtonVisibility()
    {
        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            if (this.listPage().listPageArgs().menuItemName() ==  menuitemDisplayStr(ProjInvoiceProposalListPage))
            {
                this.listPage().actionPaneControlVisible(formControlStr(ProjInvoiceProposalListPage, DNProjectInvoiceProposalJour_ProposalId), false);
                this.listPage().actionPaneControlVisible(formControlStr(ProjInvoiceProposalListPage, DNProjectInvoiceProposalJour_InvoiceDate), false);
                this.listPage().actionPaneControlVisible(formControlStr(ProjInvoiceProposalListPage, DNProjProposalJour_ProjInvoiceId), false);
            }

            if (this.listPage().listPageArgs().menuItemName() ==  menuitemDisplayStr(ProjDebitNoteProposalListPage_BR))
            {
                this.listPage().actionPaneControlVisible(formControlStr(ProjInvoiceProposalListPage, ProjectInvoiceProposalJour_ProposalId), false);
                this.listPage().actionPaneControlVisible(formControlStr(ProjInvoiceProposalListPage, ProjectInvoiceProposalJour_InvoiceDate), false);
                this.listPage().actionPaneControlVisible(formControlStr(ProjInvoiceProposalListPage, ProjProposalJour_ProjInvoiceId), false);
            }
        }
        // </GBR>
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGridFieldVisibility</Name>
				<Source><![CDATA[
    protected void setGridFieldVisibility()
    {
        super();

        // Brazil-specific grid fields
        this.listPage().listPageFieldVisible(
            formControlStr(ProjInvoiceProposalListPage, DNProjectInvoiceProposalJour_ProposalId),
            isBrazilEnabled);

        this.listPage().listPageFieldVisible(
            formControlStr(ProjInvoiceProposalListPage, DNProjectInvoiceProposalJour_InvoiceDate),
            isBrazilEnabled);

        this.listPage().listPageFieldVisible(
            formControlStr(ProjInvoiceProposalListPage, DNProjProposalJour_ProjInvoiceId),
            isBrazilEnabled);

        this.listPage().listPageFieldVisible(
            formControlStr(ProjInvoiceProposalListPage, SplitInfo_BR_FiscalEstablishment_BR),
            isBrazilEnabled);

        this.listPage().listPageFieldVisible(
            formControlStr(ProjInvoiceProposalListPage, SplitInfo_BR_FiscalDocumentType_BR),
            isBrazilEnabled);

        this.listPage().listPageFieldVisible(
            formControlStr(ProjInvoiceProposalListPage, SplitInfo_BR_TaxServiceCodeId_BR),
            isBrazilEnabled);

        // Baltic region-specific grid fields

        this.listPage().listPageFieldVisible(
            formControlStr(ProjInvoiceProposalListPage, Reason),
            isBalticEnabled);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>