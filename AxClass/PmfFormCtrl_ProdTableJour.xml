<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_ProdTableJour</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Form control handler for the <c>ProdTableJour</c> form
/// </summary>
class PmfFormCtrl_ProdTableJour
    extends PmfFormCtrl
{
    ProdTableJour prodTableJour;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkProdRouteTransButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check, if the route transaction button should be enabled
    /// </summary>
    /// <returns>
    /// true, if the button should be enabled
    /// </returns>
    public boolean checkProdRouteTransButtonEnabled()
    {
        return this.prodTableJour().JournalType == ProdJourType::RouteCard
                || this.prodTableJour().JournalType == ProdJourType::BurdenCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceActivePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to be called after the <c>active()</c> event has been processed for the datasource
    /// </summary>
    public void dataSourceActivePost()
    {
        super();

        this.updateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to be called after the form element has been initialized
    /// </summary>
    /// <remarks>
    /// Initializes the form button manager and adjusts various
    /// properties for the usage of the form with production batch orders
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// throws an exception, if the form element has not been set for this class
    /// </exception>
    public void initPost()
    {
        super();

        this.updateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerCtrlRules</Name>
				<Source><![CDATA[
    protected void registerCtrlRules()
    {
        super();

        if (this.isBatchEnabled())
        {
            this.parmFormRun().design().caption("@PRO2114");
        }

        if (this.isPmfEnabled())
        {
            this.registerPmfEnabledCtrlRules();
        }

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ProdTableJour, ProdRouteTrans)),
                methodstr(PmfFormCtrl_ProdTableJour, checkProdRouteTransButtonEnabled),
                ButtonRuleEffectType::Enabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerPmfEnabledCtrlRules</Name>
				<Source><![CDATA[
    protected void registerPmfEnabledCtrlRules()
    {
        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdTableJour, Grid)),
                formRun.design().controlName(formControlStr(ProdTableJour, ctrlGridProdId)),
                methodstr(PmfFormCtrl_ProdTableJour, isBatchEnabled),
                ButtonRuleEffectType::Label,
                "@PDS1470");

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdTableJour, Identification)),
                formRun.design().controlName(formControlStr(ProdTableJour, Identification_ProdId)),
                methodstr(PmfFormCtrl_ProdTableJour, isBatchEnabled),
                ButtonRuleEffectType::Label,
                "@PDS1470");

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdTableJour, Identification)),
                formRun.design().controlName(formControlStr(ProdTableJour, Identification_ProdId)),
                methodstr(PmfFormCtrl_ProdTableJour, isBatchEnabled),
                ButtonRuleEffectType::HelpText,
                "@PDS1471");

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ProdTableJour, Production)),
                methodstr(PmfFormCtrl_ProdTableJour, isBatchEnabled),
                ButtonRuleEffectType::Caption,
                "@PDS1470");
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBatchEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check, if the production batch order functionality should be enabled
    /// </summary>
    /// <returns>
    /// true, if the production batch order functionality should be enabled
    /// </returns>
    /// <remarks>
    /// This method is mostly used for the button manager to determine the states of various controls
    /// </remarks>
    public boolean isBatchEnabled()
    {
        ProdTable   callerProdTable;

        Common      common = this.callerBuffer();

        boolean     ret = false;

        switch (common.TableId)
        {
            case tablenum(ProdTable) :
                callerProdTable = common;
                ret = callerProdTable.ProdType == ProdType::Process;
                break;
            default:
                // break;
        }

        ret = ret
            || this.menuItemName() == menuitemdisplaystr(PmfProcessBatchJour);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        formButtonManager = FormButtonManager::construct();
        formButtonManager.parmRuleImplementer(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodTableJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the record buffer as a typed <c>ProdTableJour</c> record
    /// </summary>
    /// <returns>
    /// The <c>ProdTableJour</c> record
    /// </returns>
    private ProdTableJour prodTableJour()
    {
        return buffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the datasources that are to be used in the rule computation process.
    /// </summary>
    /// <param name="_datasources1">
    /// A table buffer (Common) belonging to the 1st datasource instance.
    /// </param>
    /// <param name="_datasources2">
    /// A table buffer (Common) belonging to the 2nd datasource instance.
    /// </param>
    /// <param name="_datasources3">
    /// A table buffer (Common) belonging to the 3rd datasource instance.
    /// </param>
    /// <param name="_datasources4">
    /// A table buffer (Common) belonging to the 4th datasource instance.
    /// </param>
    /// <param name="_datasources5">
    /// A table buffer (Common) belonging to the 5th datasource instance.
    /// </param>
    /// <remarks>
    /// Up to 5 datasources can be passed. If the implementation requires more datasources
    /// additional custom methods should be implemented on the rule implementer class.
    /// The method is called by FormButtonManager on the rule class implementing the ButtonStateProvider interface.
    /// </remarks>
    public void setDatasources(
        Common  _datasources1 = buffer,
        Common  _datasources2 = null,
        Common  _datasources3 = null,
        Common  _datasources4 = null,
        Common  _datasources5 = null)
    {
        if (_datasources1.TableId != tablenum(ProdTableJour))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        super(
            _datasources1,
            _datasources2,
            _datasources3,
            _datasources4,
            _datasources5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceLinkActivePre</Name>
				<Source><![CDATA[
    /// <summary>
    /// called before the datasources linkactive method
    /// </summary>
    public void dataSourceLinkActivePre()
    {
        super();

        this.setCaption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the form design
    /// </summary>
    /// <remarks>
    /// Updates the states and visibility of form controls based on the type of
    /// production order
    /// </remarks>
    public void updateDesign()
    {
        super();

        this.visibleDSField(
            fieldnum(ProdTableJour, PdsCWBatchGood),
            this.isBatchEnabled());

        this.visibleDSField(
            fieldnum(ProdTableJour, PdsCWBatchErr),
            this.isBatchEnabled());

        this.setCaption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PmfFormCtrl_ProdTableJour construct()
    {
        return new PmfFormCtrl_ProdTableJour();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new form control handler from the form element
    /// </summary>
    /// <param name="_fr">
    /// The form element to create the form control handler for
    /// </param>
    /// <returns>
    /// The created form control handler
    /// </returns>
    public static PmfFormCtrl_ProdTableJour newFromForm(FormRun _fr)
    {
        PmfFormCtrl frmCtrl;

        frmCtrl = PmfFormCtrl_ProdTableJour::construct();
        frmCtrl.parmFormRun(_fr);
        return frmCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCaption</Name>
				<Source><![CDATA[
    protected void setCaption()
    {
        this.parmFormRun().design().caption(strFmt("@SCM:ProductionPosting", this.prodTableJour().ProdId));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>