<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventValueProcessContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventValueProcessContract</c> class handles the parameters for the inventory value process.
/// </summary>
[
DataContractAttribute,
SysOperationContractProcessingAttribute(classStr(InventValueProcessUIBuilder),
SysOperationDataContractProcessingMode::CreateSeparateUIBuilderForEachContract),
SysOperationGroupAttribute('ProcessIdentifierGroup', "@SYS88589", '1'),
SysOperationGroupAttribute('IdentificationGroup', "@SYS5711", '2'),
SysOperationGroupAttribute('DateIntervalGroup', "@SYS22142", '3')
]
public class InventValueProcessContract implements SysOperationValidatable
{
    Name executionName;
    InventValueReportId reportId;
    DateCode dateInterval;
    FromDate fromDate;
    ToDate toDate;
    str query;
    private CreatedTransactionId transactionId;
    private NoYes runInBundle;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmExecutionName</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ExecutionName'),
    SysOperationDisplayOrderAttribute('1'),
    SysOperationGroupMemberAttribute('ProcessIdentifierGroup')
    ]
    public Name parmExecutionName(Name _executionName = executionName)
    {
        executionName = _executionName;

        return executionName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateInterval</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('DateInterval'),
    SysOperationDisplayOrderAttribute('1'),
    SysOperationGroupMemberAttribute('DateIntervalGroup')
    ]
    public DateCode parmDateInterval(DateCode _dateInterval = dateInterval)
    {
        dateInterval = _dateInterval;

        return dateInterval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('FromDate'),
    SysOperationDisplayOrderAttribute('2'),
    SysOperationGroupMemberAttribute('DateIntervalGroup')
    ]
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ToDate'),
    SysOperationDisplayOrderAttribute('3'),
    SysOperationGroupMemberAttribute('DateIntervalGroup')
    ]
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRunInBundle</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('RunInBundle'),
    SysOperationDisplayOrderAttribute('4'),
    SysOperationGroupMemberAttribute('ProcessIdentifierGroup'),
    SysOperationLabelAttribute(literalStr("@SCM:InventValueReportStorageWithBundle")),
    SysOperationHelpTextAttribute(literalStr("@SCM:InventValueReportStorageWithBundle_HelpText"))
    ]
    public NoYes parmRunInBundle(NoYes _runInBundle = runInBundle)
    {
        runInBundle = _runInBundle;

        return runInBundle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuery</Name>
				<Source><![CDATA[
    [DataMemberAttribute, AifQueryTypeAttribute('_query', querystr(InventValueReportTmpLine))]
    public str parmQuery(str _query = query)
    {
        query = _query;

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportId</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ReportId'),
    SysOperationGroupMemberAttribute('IdentificationGroup'),
    SysOperationLabelAttribute(literalStr("@SYS5468"))
    ]
    public InventValueReportId parmReportId(InventValueReportId _reportId = reportId)
    {
        reportId = _reportId;

        return reportId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionId</Name>
				<Source><![CDATA[
    [DataMemberAttribute, SysOperationControlVisibilityAttribute(false)]
    public CreatedTransactionId parmTransactionId(CreatedTransactionId _transactionId = transactionId)
    {
        transactionId = _transactionId;

        return transactionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate()
    {
        boolean isValid = true;

        if (executionName == '')
        {
            isValid = checkFailed("@SYS335686");
        }

        if (fromDate != dateNull() && toDate != dateNull() && fromDate > toDate)
        {
            isValid = checkFailed("@SYS91020");
        }

        if (reportId == '')
        {
            isValid = checkFailed("@SYS323603");
        }

        if (reportId != '' && InventValueReport::findByReportId(reportId).RecId == 0)
        {
            isValid = checkFailed(strFmt("@SYS323604", reportId));
        }

        if (dateInterval != '')
        {
            if (!LedgerPeriodCode::checkExist(dateInterval))
            {
                isValid = false;
                dateInterval = '';
            }
        }

        if (isValid)
        {
            if ((fromDate != dateNull() && year(fromDate) < (year(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())) - 1))
             || (toDate   != dateNull() && year(toDate)   < (year(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())) - 1)))
            {
                if (Box::yesNo(strFmtLB("@SYS322631"), DialogButton::No) != DialogButton::Yes)
                {
                    isValid = false;
                }
            }
        }

        if (isValid)
        {
            if (InventTransArchiveFeature::isEnabled() &&
                InventTransArchiveProcessHistoryTable::existsOverlapPeriodDate(fromDate, toDate))
            {
                if (Box::yesNo(strFmtLB("@SCM:ReportImpactedByArchivedTransactions"), DialogButton::Yes) != DialogButton::Yes)
                {
                    isValid = false;
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventValueProcessContract construct()
    {
        return new InventValueProcessContract();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>