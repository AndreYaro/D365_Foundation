<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchSpendingThresholdValidation_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Validates purchase orders against spending threshold policies.
/// </summary>
class PurchSpendingThresholdValidation_PSN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateTotalAmountPerCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the total purchase amount being spent for the selected category .
    /// </summary>
    /// <param name="_purchPolicyRuleCatThresholdDetail">
    /// The <c>PurchPolicyRuleCatThresholdDetail_PSN</c> table record.
    /// </param>
    /// <param name="_procurementCategory">
    /// The procurement category for the PO or invoice line being processed.
    /// </param>
    /// <param name="_purchId">
    /// The <c>PurchId</c> table field for the PO or invoice line being processed.
    /// </param>
    /// <param name="_isPurchaseOrder">
    /// Boolean variable indicating wheather caller is a Purchase Order or invoice that is being processed.
    /// </param>
    /// <param name="_vendInvoiceRecId">
    /// Vendor Invoice Rec Id for the invoice being posted.
    /// </param>
    /// <returns>
    /// The total spent amount for the selected category in accounting currency.
    /// </returns>
    /// <remarks>
    /// Method calculates the accumulated amount for sent category for thresholds.
    /// </remarks>
    private AmountMST calculateTotalAmountPerCategory(PurchPolicyRuleCatThresholdDetail_PSN _purchPolicyRuleCatThresholdDetail, PurchCategory _procurementCategory, PurchId _purchId, boolean _isPurchaseOrder, RecId _vendInvoiceRecId)
    {
        PurchLine                   purchLine;
        PurchTable                  purchTable;
        VendInvoiceInfoLine         vendInvoiceInfoLine;
        VendInvoiceInfoTable        vendInvoiceInfoTable;
        DiscPct                     discountPercent = 0, miscellaneousPercent = 0;
        AmountMST                   lineAmount = 0,sumOfAmount = 0, vendInvoiceLineAmountMST = 0;
        AmountMST                   balanceAmount = 0, miscellaneousAmount = 0;

        // Initially calculate the amount that is being posted because it would be in Approved/Pending state
        if (_isPurchaseOrder)
        {
            while select PurchId, PurchQty, LineAmount, CurrencyCode, InventRefTransId, LineDeliveryType,
                         PurchPrice, ItemId, PriceUnit, LineDisc from purchLine
                join AccountingDate from purchTable
                    where purchLine.PurchId == purchTable.PurchId
                    &&    purchLine.PurchId == _purchId
                    &&    purchLine.ProcurementCategory == _procurementCategory
                    &&    purchTable.AccountingDate >= _purchPolicyRuleCatThresholdDetail.ValidFrom
                    &&    purchTable.AccountingDate <= _purchPolicyRuleCatThresholdDetail.ValidTo
            {
              lineAmount += purchLine.lineAmountMST();
              miscellaneousAmount = PurchSpendingThresholdValidation_PSN::calcMiscChargesAmount(purchLine);
              lineAmount += miscellaneousAmount;
            }
            sumOfAmount += lineAmount;
        }
        else
        {
            // Calculate expense amounts of vendor invoice being posted
            while select LineAmount, CurrencyCode from vendInvoiceInfoLine
                    join vendInvoiceInfoTable
                    where vendInvoiceInfoLine.ParmId == vendInvoiceInfoTable.ParmId
                        &&    vendInvoiceInfoLine.TableRefId == vendInvoiceInfoTable.TableRefId
                        &&    vendInvoiceInfoLine.ProcurementCategory == _procurementCategory
                        &&    vendInvoiceInfoTable.FixedDueDate >= _purchPolicyRuleCatThresholdDetail.ValidFrom
                        &&    vendInvoiceInfoTable.FixedDueDate <= _purchPolicyRuleCatThresholdDetail.ValidTo
                        &&    vendInvoiceInfoTable.PurchId == _purchId
                        &&    vendInvoiceInfoTable.RecId == _vendInvoiceRecId
                        &&    vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::Waiting
            {
                vendInvoiceLineAmountMST += vendInvoiceInfoLine.lineAmountMST();
                miscellaneousAmount = PurchSpendingThresholdValidation_PSN::calcMiscChargesInvoiceAmount(vendInvoiceInfoTable, vendInvoiceLineAmountMST);
                vendInvoiceLineAmountMST += miscellaneousAmount;
            }
            sumOfAmount += vendInvoiceLineAmountMST;
            // Reset Amount keeping variables
            vendInvoiceLineAmountMST = 0;

            // Calculate expense amounts of open vendor invoices of Purchase Order being processed
            while select LineAmount, CurrencyCode from vendInvoiceInfoLine
                join vendInvoiceInfoTable
                where vendInvoiceInfoLine.ParmId == vendInvoiceInfoTable.ParmId
                    &&    vendInvoiceInfoLine.TableRefId == vendInvoiceInfoTable.TableRefId
                    &&    vendInvoiceInfoLine.ProcurementCategory == _procurementCategory
                    &&    vendInvoiceInfoTable.FixedDueDate >= _purchPolicyRuleCatThresholdDetail.ValidFrom
                    &&    vendInvoiceInfoTable.FixedDueDate <= _purchPolicyRuleCatThresholdDetail.ValidTo
                    &&    vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::Executed
                    &&    vendInvoiceInfoTable.PurchId == _purchId
            {
                vendInvoiceLineAmountMST += vendInvoiceInfoLine.lineAmountMST();
                miscellaneousAmount = PurchSpendingThresholdValidation_PSN::calcMiscChargesInvoiceAmount(vendInvoiceInfoTable, vendInvoiceLineAmountMST);
                vendInvoiceLineAmountMST += miscellaneousAmount;
            }
            sumOfAmount += vendInvoiceLineAmountMST;
        }
        // Reset Amount keeping variables
        vendInvoiceLineAmountMST = 0;
        lineAmount = 0;

        // Calculate spent amount to validate threshold levels from Purchase Order/vendor invoices
        while select PurchId, LineAmount, CurrencyCode, IsFinalized, InventTransId from purchLine
            join RecId from purchTable
                where purchLine.PurchId == purchTable.PurchId
                &&    purchLine.ProcurementCategory == _procurementCategory
                &&    purchTable.PurchStatus != PurchStatus::Canceled
                &&    purchTable.DocumentState >= VersioningDocumentState::Confirmed
                &&    purchTable.AccountingDate >= _purchPolicyRuleCatThresholdDetail.ValidFrom
                &&    purchTable.AccountingDate <= _purchPolicyRuleCatThresholdDetail.ValidTo
                &&    purchTable.PurchId != _purchId
        {
            while select LineAmount, CurrencyCode from vendInvoiceInfoLine
                    join vendInvoiceInfoTable
                    where vendInvoiceInfoLine.ParmId == vendInvoiceInfoTable.ParmId
                        &&    vendInvoiceInfoLine.TableRefId == vendInvoiceInfoTable.TableRefId
                        &&    vendInvoiceInfoLine.ProcurementCategory == _procurementCategory
                        &&    vendInvoiceInfoTable.FixedDueDate >= _purchPolicyRuleCatThresholdDetail.ValidFrom
                        &&    vendInvoiceInfoTable.FixedDueDate <= _purchPolicyRuleCatThresholdDetail.ValidTo
                        &&    vendInvoiceInfoLine.InventTransId == purchLine.InventTransId
                        &&    vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::Executed
            {
                vendInvoiceLineAmountMST += vendInvoiceInfoLine.lineAmountMST();
                miscellaneousAmount = PurchSpendingThresholdValidation_PSN::calcMiscChargesInvoiceAmount(vendInvoiceInfoTable, vendInvoiceLineAmountMST);
                vendInvoiceLineAmountMST += miscellaneousAmount;
            }

            if (!purchLine.IsFinalized)
            {
                lineAmount = purchLine.lineAmountMST();
                miscellaneousAmount = PurchSpendingThresholdValidation_PSN::calcMiscChargesAmount(purchLine);
                lineAmount += miscellaneousAmount;

                lineAmount = max(vendInvoiceLineAmountMST, lineAmount);
            }
            else
            {
                lineAmount = vendInvoiceLineAmountMST;
            }

            sumOfAmount += lineAmount;
            // Reset Amount keeping variables
            vendInvoiceLineAmountMST = 0;
            lineAmount = 0;
        }

        // Add all the lines for the invoices with no PA
        while select LineAmount,CurrencyCode from vendInvoiceInfoLine
            join  vendInvoiceInfoTable
            where vendInvoiceInfoLine.ParmId == vendInvoiceInfoTable.ParmId
            &&    vendInvoiceInfoLine.TableRefId == vendInvoiceInfoTable.TableRefId
            &&    vendInvoiceInfoLine.ProcurementCategory == _procurementCategory
            &&    vendInvoiceInfoLine.OrigPurchId == ''
            &&    vendInvoiceInfoTable.FixedDueDate >= _purchPolicyRuleCatThresholdDetail.ValidFrom
            &&    vendInvoiceInfoTable.FixedDueDate <= _purchPolicyRuleCatThresholdDetail.ValidTo
            &&    vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::Executed
        {
            lineAmount = vendInvoiceInfoLine.lineAmountMST();
            miscellaneousAmount = PurchSpendingThresholdValidation_PSN::calcMiscChargesInvoiceAmount(vendInvoiceInfoTable, vendInvoiceInfoLine.lineAmountMST());
            lineAmount += miscellaneousAmount;
            sumOfAmount += lineAmount;
        }

        return sumOfAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAllPurchaseOrdersAreOfTypeComplete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verify that the all purchase orders for a selected category is of type Purchase agreement type complete.
    /// </summary>
    /// <param  name='_purchPolicyRuleCatThresholdDetail'>
    /// The <c>purchPolicyRuleCatThresholdDetail_PSN</c> table record.
    /// </param>
    /// <param  name='_purchCategory'>
    /// The selected PO line category.
    /// </param>
    /// <returns>
    /// True if all PO  purchase agreement is of type complete for the selected category;otherwise, false.
    /// </returns>
    ///
    private boolean checkAllPurchaseOrdersAreOfTypeComplete(PurchPolicyRuleCatThresholdDetail_PSN _purchPolicyRuleCatThresholdDetail, PurchCategory _purchCategory)
    {
        boolean ret = true;

        PurchTable              purchTable;
        PurchLine               purchLine;
        PurchAgreementHeader    purchAgreementHeader;

        while select MatchingAgreement from purchTable
            join ProcurementCategory from purchLine
            where purchLine.ProcurementCategory == _purchCategory
            &&    purchTable.AccountingDate >= _purchPolicyRuleCatThresholdDetail.ValidFrom
            &&    purchTable.AccountingDate <= _purchPolicyRuleCatThresholdDetail.ValidTo
        {
            purchAgreementHeader = PurchAgreementHeader::find(AgreementHeader::find(purchTable.MatchingAgreement).RecId);
            if (purchAgreementHeader && (purchAgreementHeader.RecId > 0) && (purchAgreementHeader.PurchAgreementType_PSN != PurchAgreementType_PSN::Complete))
            {
                // found an
                ret = false;
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>evaluatePurchaseAgreementType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies the PO and invoice line amounts and purchase agreement against the policy theshold amount and purchase process type.
    /// </summary>
    /// <param  name='_policyRules'>
    /// An array of the purchase spending policy rules to be checked against.
    /// </param>
    /// <param  name='_common'>
    /// The selected table record.
    /// </param>
    /// <returns>
    /// true if validation passed; otherwise, false.
    /// </returns>
    ///
    protected boolean evaluatePurchaseAgreementType(Array _policyRules, Common _common)
    {
        boolean     ret = true;

        // Tables
        VendInvoiceInfoTable                    vendInvoiceInfoTable;
        VendInvoiceInfoLine                     vendInvoiceInfoLine;
        PurchAgreementHeader                    purchAgreementHeader;
        PurchTable                              purchTable;
        PurchLine                               purchLine;
        PurchPolicyRuleCatThreshold_PSN         purchPolicyRuleCatThreshold;
        PurchPolicyRuleCatThresholdDetail_PSN   purchPolicyRuleCatThresholdDetail;
        int                                     ruleIndex;
        PurchCategory                           purchCategory;
        Amount                                  amount = 0;
        PurchAgreementType_PSN                  purchAgreementType = 0;
        List                                    spendingCategoryList = new List(Types::Int64);
        ListEnumerator                          spendingCategoryEnumerator = spendingCategoryList.getEnumerator();
        date                                    effectiveDate;
        PurchId                                 purchId;
        boolean                                 isPurchaseOrder = false;
        RecId                                   vendInvoiceRecId;

        // Group the lines in PO or invoice by its category
        if (_common is PurchTable)
        {
            purchTable =  _common as PurchTable;
            purchAgreementHeader = PurchAgreementHeader::find(AgreementHeader::find(purchTable.MatchingAgreement).RecId);
            purchAgreementType = purchAgreementHeader.PurchAgreementType_PSN;
            effectiveDate = purchTable.AccountingDate;

            while select ProcurementCategory from purchLine
                group by purchLine.ProcurementCategory
                where purchLine.PurchId == purchTable.PurchId
            {
                spendingCategoryList.addEnd(purchLine.ProcurementCategory);
            }
            purchId = purchTable.PurchId;
            isPurchaseOrder = true;
        }
        else if (_common is VendInvoiceInfoTable)
        {
            vendInvoiceInfoTable = _common as VendInvoiceInfoTable;
            effectiveDate = vendInvoiceInfoTable.TransDate;
            purchId = vendInvoiceInfoTable.PurchId;
            vendInvoiceRecId = vendInvoiceInfoTable.RecId;

            while select ProcurementCategory from vendInvoiceInfoLine
                group by vendInvoiceInfoLine.ProcurementCategory
                where vendInvoiceInfoLine.ParmId == vendInvoiceInfoTable.ParmId
                &&    vendInvoiceInfoLine.TableRefId == vendInvoiceInfoTable.TableRefId
            {
                spendingCategoryList.addEnd(vendInvoiceInfoLine.ProcurementCategory);
            }
        }
        else
        {
            // This is a non expected table. fail the evalution.
            ret = false;
        }

        // Make sure the PO or the invice has lines to evaluate.
        if (ret && !spendingCategoryList.empty())
        {
            // Loop on all the purchase policy rules
            for (ruleIndex = 1; ruleIndex <= _policyRules.lastIndex(); ruleIndex++)
            {
                spendingCategoryEnumerator.reset();
                while (spendingCategoryEnumerator.moveNext())
                {
                    purchCategory = spendingCategoryEnumerator.current();

                    // for each category get the purchase threshold policy rule
                    purchPolicyRuleCatThreshold = PurchPolicyRuleCatThreshold_PSN::findByCategoryAndPolicyRule(_policyRules.value(ruleIndex), EcoResCategory::find(purchCategory).RecId);
                    purchPolicyRuleCatThresholdDetail = PurchPolicyRuleCatThresholdDetail_PSN::findByCategoryRule(purchPolicyRuleCatThreshold.RecId, effectiveDate);

                    // Check only when there is a policy rule detail
                    if (purchPolicyRuleCatThresholdDetail.RecId != 0)
                    {
                        // Calculate the amount for the category
                        amount = this.calculateTotalAmountPerCategory(purchPolicyRuleCatThresholdDetail, purchCategory, purchId, isPurchaseOrder, vendInvoiceRecId);

                        // The amount greater then the threshold
                        if ( amount > purchPolicyRuleCatThresholdDetail.ThresholdAmount)
                        {
                            switch (purchPolicyRuleCatThresholdDetail.OverThresholdType)
                            {
                                case PurchOverThresholdProcessType_PSN::ProcedureAdapteeAny:
                                    // we allow in all cases with info log
                                    info(strFmt("@SPS1918", EcoResCategory::find(purchCategory).Name));
                                    break;
                                case PurchOverThresholdProcessType_PSN::OnlyProcedureComplete:
                                    if  (purchAgreementType == PurchAgreementType_PSN::Complete)
                                    {
                                        info(strFmt("@SPS1918", EcoResCategory::find(purchCategory).Name));
                                        break;
                                    }
                                    else
                                    {
                                        // The PA type does not match the threshold process type.
                                        error(strFmt("@SPS1917", EcoResCategory::find(purchCategory).Name));

                                        // The evalution failed on purchAgreementType. exit the method
                                        return false;
                                    }
                                case PurchOverThresholdProcessType_PSN::BothProcedureComplete:
                                    if  ((purchAgreementType == PurchAgreementType_PSN::Complete) || (purchAgreementType == PurchAgreementType_PSN::MAPA))
                                    {
                                        info(strFmt("@SPS1918", EcoResCategory::find(purchCategory).Name));
                                        break;
                                    }
                                    else
                                    {
                                        // The PA type does not match the threshold process type.
                                        error(strFmt("@SPS1917", EcoResCategory::find(purchCategory).Name));

                                        // The evalution failed on purchAgreementType. exit the method
                                        return false;
                                    }
                                case PurchOverThresholdProcessType_PSN::None:
                                    if  (purchAgreementType == PurchAgreementType_PSN::Complete && this.checkAllPurchaseOrdersAreOfTypeComplete(purchPolicyRuleCatThresholdDetail, purchCategory))
                                    {
                                        info(strFmt("@SPS1918", EcoResCategory::find(purchCategory).Name));
                                        break;
                                    }
                                    else
                                    {
                                        // The PA type does not match the threshold process type.
                                        error(strFmt("@SPS1917", EcoResCategory::find(purchCategory).Name));

                                        // The evalution failed on purchAgreementType. exit the method
                                        return false;
                                    }
                                default:
                                    Debug::assert(false);
                                } //switch statement
                            } // if statement
                    } // if statement
                } // while loop
            } // For loop
        } // if statement

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcMiscChargesAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the total miscellaneous and line miscellaneous charges for a purchase order line.
    /// </summary>
    /// <param  name='_purchLine'>
    /// The <c>PurchLine</c> table record.
    /// </param>
    /// <returns>
    /// Returns a miscellaneous charge of a purchase order line in accounting currency.
    /// </returns>
    private static AmountMST calcMiscChargesAmount(PurchLine  _purchLine)
    {
        PurchTotals         purchTotals;
        TransDate           purchCalcTaxInvoiceDate;
        container           fields;
        PurchQty            purchQty;
        CurrencyCode        currencyCode;
        Markup              markup;
        PurchCalcTax        purchCalcTax;
        MarkupAmount        markupAmount;
        Amount              balanceAmount = 0;
        Amount              totalMiscAmount = 0;
        PurchTable          purchTable = PurchTable::find(_purchLine.PurchId);

        if (purchTable)
        {
            purchTotals = PurchTotals::newPurchTable(purchTable);
            purchTotals.calc();

            fields = purchTotals.displayFields([PurchTotals::posCurrency(),
                                                PurchTotals::posExchRate(),
                                                PurchTotals::posLineDisc(),
                                                PurchTotals::posBalance(),
                                                PurchTotals::posMarkup(),
                                                PurchTotals::posTaxTotal(),
                                                PurchTotals::posTotalAmount()]);

            purchTotals.clear();

            currencyCode = purchTable.CurrencyCode;
            markup = new Markup(currencyCode);
            markup.parmExchRate(ExchangeRateHelper::exchRate(purchTable.CurrencyCode, purchTable.AccountingDate),
                                ExchangeRateHelper::exchRateSecond(purchTable.CurrencyCode, purchTable.AccountingDate),
                                Currency::noYes2UnknownNoYes(Currency::triangulation(purchTable.CurrencyCode, purchTable.AccountingDate)));
            markup.transDate(purchTable.AccountingDate);

            purchCalcTax = PurchCalcTax::construct(purchTable);
            purchCalcTaxInvoiceDate = purchCalcTax.invoiceDate();

            markup.calc(_purchLine.PurchQty, _purchLine.LineAmount, _purchLine, DocumentStatus::Invoice, purchTotals.interCompanyLineAmount(_purchLine, purchQty, purchCalcTaxInvoiceDate));
            totalMiscAmount -= markup.markupCustVend();
            totalMiscAmount -= markup.markupOtherCharges();

            balanceAmount = conPeek(fields, PurchTotals::posBalance());
            markup.calc(1, balanceAmount, purchTable, DocumentStatus::Invoice, purchTotals.interCompanyLineAmount(_purchLine, 1, purchCalcTaxInvoiceDate ));
            markupAmount -= markup.markupCustVend();
            markupAmount -= markup.markupOtherCharges();

            if (balanceAmount)
            {
               totalMiscAmount += _purchLine.lineAmountMST() * (markupAmount/balanceAmount);
            }
        }

        return totalMiscAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcMiscChargesInvoiceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the total miscellaneous and line miscellaneous charges for a vendor invoice line.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    /// The <c>VendInvoiceInfoTable</c> table record.
    /// </param>
    /// <param name="_vendLineAmountMST">
    /// Vendor Line Amount of the vendor invoice line that is being processed.
    /// </param>
    /// <returns>
    /// Returns a miscellaneous charge of a vendor invoice line in accounting currency.
    /// </returns>
    private static AmountMST calcMiscChargesInvoiceAmount(VendInvoiceInfoTable  _vendInvoiceInfoTable, Amount _vendLineAmountMST)
    {
        PurchTotals                 purchTotals;
        container                   fields;
        Amount                      balanceAmount = 0, miscellaneousAmount = 0;
        DiscPct                     miscellaneousPercent = 0;

        if (_vendLineAmountMST == 0)
        {
            return 0;
        }
        purchTotals = PurchTotals::newParmTable(_vendInvoiceInfoTable, _vendInvoiceInfoTable.purchParmUpdate().SpecQty,
                                                _vendInvoiceInfoTable.ParmId, '', _vendInvoiceInfoTable.Ordering);
        purchTotals.calc();

        fields = purchTotals.displayFields([PurchTotals::posCurrency(),
                                        PurchTotals::posExchRate(),
                                        PurchTotals::posLineDisc(),
                                        PurchTotals::posBalance(),
                                        PurchTotals::posMarkup(),
                                        PurchTotals::posTaxTotal(),
                                        PurchTotals::posTotalAmount()]);

        // Calculate the line amount after subtracting discount and adding miscellaneous charges.
        balanceAmount = conPeek(fields, PurchTotals::posBalance());
        miscellaneousAmount = conPeek(fields, PurchTotals::posMarkup());
        if (miscellaneousAmount && balanceAmount)
        {
            miscellaneousPercent = miscellaneousAmount/balanceAmount;
            if (miscellaneousPercent)
            {
                return _vendLineAmountMST * miscellaneousPercent;
            }
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSpendThresholdPolicyValidation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verify that the PO or the invoice pass the purchase spending threshold policy rule.
    /// </summary>
    /// <param  name='_common'>
    /// The selected table record.
    /// </param>
    /// <returns>
    /// true if policy passed;otherwise, false.
    /// </returns>
    ///
    public static boolean checkSpendThresholdPolicyValidation(Common _common)
    {
        boolean ret = true;

        Array                                   policyRules;
        SysPolicyRuleType                       policyRuleType;
        RefRecId                                organizationRecId   = CompanyInfo::findDataArea(_common.company()).RecId;
        RefRecId                                orgId[];
        PurchSpendingThresholdValidation_PSN    purchSpendingThresholdValidation = new PurchSpendingThresholdValidation_PSN();
        SysPolicyName                           name = enum2Symbol(enumNum(SysPolicyRuleTypeEnum), SysPolicyRuleTypeEnum::PurchThresholdPolicyRule_PSN);

        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            orgId[1] = organizationRecId;

            // find the policy rules associated with the organization
            select firstonly RecId, Name  from policyRuleType
                where policyRuleType.Name == name;

            policyRules = SysPolicies::getPolicyRuleIDs(orgId, policyRuleType.RecId, SysPolicyTypeEnum::PurchasingPolicy, DateTimeUtil::minValue(), false, true);

            if (policyRules && (policyRules.lastIndex() > 0))
            {
                ret = purchSpendingThresholdValidation.evaluatePurchaseAgreementType(policyRules, _common);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>