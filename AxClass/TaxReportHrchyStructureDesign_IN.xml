<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportHrchyStructureDesign_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Designs the structure for tax report hierarchy.
/// </summary>
public class TaxReportHrchyStructureDesign_IN
{
    TaxReportHrchyNode_IN   currentNode;
    Name                    hierarchyName;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateAllNodesSelfBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate all <c>TaxReportHierarchyNode_IN</c> self balance for the specified <c>TaxSalesTaxPaymentHistory_IN</c> and <c>TaxSalesTaxPaymentProfile_IN</c>.
    /// </summary>
    /// <param name="_history">
    /// The instance of <c>TaxSalesTaxPaymentHistory_IN</c>.
    /// </param>
    /// <param name="_profile">
    /// The instance of <c>TaxSalesTaxPaymentProfile_IN</c>.
    /// </param>
    public void calculateAllNodesSelfBalance(TaxSalesTaxPaymentHistory_IN _history,
                                            TaxSalesTaxPaymentProfile_IN _profile)
    {
        TaxSalesTaxPaymentHistoryDetails_IN         historyDetail;
        RefRecId                                    historyRecId;
        TaxReportHierarchyNode_IN                   tableNode;

        if (_history)
        {
            historyRecId = _history.RecId;

            //Init all self nodes
            insert_recordset historyDetail (TaxSalesTaxPaymentHistory_IN, TaxReportHierarchyNode_IN)
                select historyRecId, RecId from tableNode
                    where tableNode.TaxReportHierarchyVersion_IN == _history.TaxReportHierarchyVersion_IN;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTaxReportHrchyNodeForTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identify the <c>TaxReportHierarchyNode_IN</c> for specified TaxTrans record.
    /// </summary>
    /// <param name="_record">
    /// The common record which is used to identify the <c>TaxReportHierarchyNode_IN</c>.
    /// </param>
    /// <param name="_hierarchyVersion">
    /// The common record which is used to identify the <c>TaxReportHierarchyVersion_IN</c>.
    /// </param>
    /// <returns>
    /// The recId of <c>TaxReportHierarchyNode_IN</c>.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throw exception of cannot find <c>TaxReportCodeNode_IN</c>.
    /// </exception>
    public RefRecId findTaxReportHrchyNodeForTrans(Common _record, TaxReportHierarchyVersion_IN _hierarchyVersion = null)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextLevelNodeClass</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get node class for the next level of the <c>TaxReportHierarchy_IN</c> instance.
    /// </summary>
    /// <param name="_isRoot">
    /// Indicate whether current node is a root node or not.
    /// </param>
    /// <returns>
    /// The classId of the next level node type.
    /// </returns>
    protected ClassId getNextLevelNodeClass(boolean _isRoot = false)
    {
        return classNum(TaxReportHrchyNode_IN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextLevelNodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get all <c>TaxReportHrchyNode_IN</c> nodes for the next level of the <c>TaxReportHierarchy_IN</c> instance.
    /// </summary>
    /// <param name="_currentNode">
    /// The current <c>TaxReportHrchyNode_IN</c> node.
    /// </param>
    /// <param name="_isRoot">
    /// Indicate whether current node is a root node or not.
    /// </param>
    /// <returns>
    /// The list of all <c>TaxReportHrchyNode_IN</c> nodes.
    /// </returns>
    public List getNextLevelNodes(TaxReportHrchyNode_IN _currentNode, boolean _isRoot = false)
    {
        this.parmCurrentNode(_currentNode);

        return new List(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodesForRoot</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the list of root type nodes of the <c>TaxReportHierarchy_IN</c> instance.
    /// </summary>
    /// <returns>
    /// The list of root type nodes.
    /// </returns>
    protected List getNodesForRoot()
    {
        List                        nodeList = new List(Types::Class);
        TaxReportHrchyRootNode_IN   node;

        node = TaxReportHrchyRootNode_IN::construct();
        node.parmDisplayValue(HierarchyName);
        node.parmComboDisplayValueStr(HierarchyName);

        nodeList.addEnd(node);

        return nodeList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransComboDisplayValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the Combination display value for the specified record.
    /// </summary>
    /// <param name="_rootNode">
    /// The root node <c>TaxReportHrchyNode_IN</c> of the <c>TaxReportHierarchy_IN</c> instance.
    /// </param>
    /// <param name="_record">
    /// The record of TaxTrans.
    /// </param>
    /// <returns>
    /// The combination display value for the specified record.
    /// </returns>
    protected TaxReportHrchyNodeComboDisplayValue_IN getTransComboDisplayValue(TaxReportHrchyNode_IN _rootNode,
                                                                                Common _record)
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSetoffable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indiciate if the <c>TaxReportHierarchy_IN</c> instance is setoffable or not.
    /// </summary>
    /// <returns>
    /// True if the <c>TaxReportHierarchy_IN</c> instance is setoffable; otherwise, false.
    /// </returns>
    public boolean isSetoffable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentNode</Name>
				<Source><![CDATA[
    protected TaxReportHrchyNode_IN parmCurrentNode(TaxReportHrchyNode_IN _currentNode = currentNode)
    {
        currentNode = _currentNode;
        return currentNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmName</Name>
				<Source><![CDATA[
    public Name parmName(Name _hierarchyName = hierarchyName)
    {
        hierarchyName = _hierarchyName;
        return hierarchyName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefClassId</Name>
				<Source><![CDATA[
    public ClassId parmRefClassId()
    {
        return classNum(TaxReportHrchyStructureDesign_IN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDisplayCombination</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the display Combination.
    /// </summary>
    /// <param name="_record">
    /// The record of TaxTrans.
    /// </param>
    /// <returns>
    /// The combined display value for the transaction.
    /// </returns>
    public TaxReportHrchyNodeComboDisplayValue_IN getDisplayCombination(Common _record)
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransComboDisplayString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the Combination display string for the specified record.
    /// </summary>
    /// <param name="_rootNode">
    /// The root node <c>TaxReportHrchyNode_IN</c> of the <c>TaxReportHierarchy_IN</c> instance.
    /// </param>
    /// <param name="_record">
    /// The record of TaxTrans.
    /// </param>
    /// <returns>
    /// The combination display string for the specified record.
    /// </returns>
    protected TaxReportHrchyNodeComboDisplayValue_IN getTransComboDisplayString(TaxReportHrchyNode_IN _rootNode, Common _record)
    {
        return '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>