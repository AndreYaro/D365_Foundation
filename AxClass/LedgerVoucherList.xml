<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerVoucherList</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerVoucherList</c> class maintains a collection of posting references.
/// </summary>
public class LedgerVoucherList
{
    Map referenceCollection;
    MapEnumerator enumerator;

    LedgerVoucherObject currentReference;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a posting reference to the collection.
    /// </summary>
    /// <param name="_postingReference">
    ///    The posting reference to add to the collection.
    /// </param>
    /// <returns>
    ///    true if successful; otherwise, false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The reference number is an empty string or the accounting date is an empty date.
    /// </exception>
    public boolean add(LedgerVoucherObject _postingReference)
    {
        boolean success;
        TransDate accountingDate;
        Voucher subledgerVoucher;

        #localMacro.CollectionKey
            subledgerVoucher,
            accountingDate,
            _postingReference.parmPostingLayer()
        #endMacro

        subledgerVoucher = _postingReference.parmSubledgerVoucher();

        if (subledgerVoucher == '')
        {
            throw error("@SYS57812");
        }

        accountingDate = _postingReference.parmAccountingDate();

        if (accountingDate == dateNull())
        {
            throw error("@SYS128707");
        }

        success = referenceCollection.insert([#CollectionKey], _postingReference);

        return success;
    }

]]></Source>
			</Method>
			<Method>
				<Name>elements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of posting references in the collection.
    /// </summary>
    /// <returns>
    /// The number of posting references in the collection.
    /// </returns>
    public Counter elements()
    {
        return referenceCollection.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified posting reference.
    /// </summary>
    /// <param name="_subledgerVoucher">
    /// The subledger voucher to find.
    /// </param>
    /// <param name="_accountingDate">
    /// The accounting date to find.
    /// </param>
    /// <param name="_postingLayer">
    /// The posting layer to find.
    /// </param>
    /// <returns>
    /// true if successful; otherwise, false.
    /// </returns>
    public boolean find(Voucher _subledgerVoucher, TransDate _accountingDate, CurrentOperationsTax _postingLayer)
    {
        #localMacro.CollectionKey
            _subledgerVoucher,
            _accountingDate,
            _postingLayer
        #endMacro

        if (_subledgerVoucher == '')
        {
            return false;
        }

        if (currentReference == null ||
            currentReference.parmSubledgerVoucher() != _subledgerVoucher ||
            currentReference.parmAccountingDate() != _accountingDate ||
            currentReference.parmPostingLayer() != _postingLayer)
        {
            // perf: only do the look up if it is not already the correct one because
            // calling this method repeatedly with the same value is a common pattern
            if (referenceCollection.exists([#CollectionKey]))
            {
                currentReference = referenceCollection.lookup([#CollectionKey]);
            }
            else
            {
                currentReference = null;
            }
        }

        return (currentReference != null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>first</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves to the first posting reference in the collection.
    /// </summary>
    /// <returns>
    /// true if the collection contains at least one posting reference; otherwise, false.
    /// </returns>
    public boolean first()
    {
        boolean haveMore;

        enumerator = referenceCollection.getEnumerator();

        haveMore = enumerator.moveNext();

        if (haveMore)
        {
            currentReference = enumerator.currentValue();
        }

        return haveMore;
    }

]]></Source>
			</Method>
			<Method>
				<Name>item</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current posting reference.
    /// </summary>
    /// <returns>
    /// The current posting reference.
    /// </returns>
    public LedgerVoucherObject item()
    {
        return currentReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new <c>LedgerVoucherList</c> object.
    /// </summary>
    /// <returns>A new instance of the <c>LedgerVoucherList</c> object.</returns>
    public static LedgerVoucherList construct()
    {
        return new LedgerVoucherList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        referenceCollection = new Map(Types::Container, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves to the next posting reference in the collection.
    /// </summary>
    /// <returns>
    ///    true if this is successful; otherwise, false.
    /// </returns>
    public boolean next()
    {
        boolean haveMore;

        if (enumerator == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        haveMore = enumerator.moveNext();

        if (haveMore)
        {
            currentReference = enumerator.currentValue();
        }
        else
        {
            currentReference = null;
        }

        return haveMore;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remove</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes a posting reference from the collection.
    /// </summary>
    /// <param name="_postingReference">
    ///    The posting reference.
    /// </param>
    /// <returns>
    ///    true if successful; otherwise, false.
    /// </returns>
    /// <exception>
    /// The ledger voucher object is null.
    /// </exception>
    public boolean remove(LedgerVoucherObject _postingReference)
    {
        boolean success = false;

        if (!_postingReference)
        {
            throw error(strFmt("@SYS118114", funcName()));
        }

        success = referenceCollection.remove(
            [_postingReference.parmSubledgerVoucher(),
            _postingReference.parmAccountingDate(),
            _postingReference.parmPostingLayer()]);

        return success;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>