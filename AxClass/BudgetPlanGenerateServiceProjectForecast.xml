<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanGenerateServiceProjectForecast</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanGenerateServiceProjectForecast</c> is used to generate budget plan data from project forecasts.
/// </summary>
public class BudgetPlanGenerateServiceProjectForecast extends BudgetPlanGenerateService
{
    BudgetPlanGenerateContractProjectForecast   budgetPlanGenerateContractProjectForecast;
    ProjTransBudget                             projTransBudget;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>BudgetPlanGenerateServiceProjectForecast</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>BudgetPlanGenerateServiceProjectForecast</c> class.
    /// </returns>
    public static BudgetPlanGenerateServiceProjectForecast construct()
    {
        return new BudgetPlanGenerateServiceProjectForecast();
    }

]]></Source>
			</Method>
			<Method>
				<Name>startProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts the process of data generation.
    /// </summary>
    /// <param name="_contract">
    /// An instance of the <c>BudgetPlanGenerateContractProjectForecast</c> class.
    /// </param>
    public void startProcess(BudgetPlanGenerateContractProjectForecast _contract)
    {
        BudgetInstrumentationLogger budgetPlanLogger = BudgetInstrumentationLogger::createLogger(classStr(BudgetPlanGenerateServiceProjectForecast));
        using (SysInstrumentationActivityContext budgetPlanGenerateServiceProjForecastContext = budgetPlanLogger.budgetPlanGeneration().projForecastContext(_contract))
        {
            this.parmBudgetPlanGenerateContract(_contract);
            this.initialize();
            this.generateData();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanGenerateContract</Name>
				<Source><![CDATA[
    public BudgetPlanGenerateContract parmBudgetPlanGenerateContract(BudgetPlanGenerateContract _budgetPlanGenerateContract = budgetPlanGenerateContract)
    {
        super(_budgetPlanGenerateContract);

        budgetPlanGenerateContractProjectForecast = _budgetPlanGenerateContract as BudgetPlanGenerateContractProjectForecast;

        return budgetPlanGenerateContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the data in the budget plan tables.
    /// </summary>
    protected void generateData()
    {
        Query                               userDefinedQuery;
        QueryRun                            userDefinedQueryRun;
        BudgetPlanHeader                    budgetPlanHeader;
        BudgetPlanLineDataGenerationTmp     budgetPlanLineDataGenerationTmp;
        boolean                             isValidQuery;
        DataAreaId                          dataAreaId;
        Set                                 transIds;

        userDefinedQuery = this.createQuery();
        transIds = new Set(Types::String);

        try
        {
            ttsbegin;

            budgetPlanHeader = this.createOrUpdateBudgetPlanHeader();
            userDefinedQueryRun = new QueryRun(userDefinedQuery);

            while (userDefinedQueryRun.next())
            {
                isValidQuery = true;

                projTransBudget = userDefinedQueryRun.get(tableNum(ProjTransBudget)) as ProjTransBudget;

                if (budgetPlanGenerateContractProjectForecast.parmTargetBudgetPlanScenario())
                {
                    budgetPlanLineDataGenerationTmp = this.setBudgetPlanLineDataGenerationTmpMonetary(budgetPlanHeader.RecId);
                    this.createOrUpdateBudgetPlanLine(budgetPlanLineDataGenerationTmp);
                }

                if (budgetPlanGenerateContractProjectForecast.parmTargetBudgetPlanScenarioQuantity() && !transIds.in(projTransBudget.TransId))
                {
                    budgetPlanLineDataGenerationTmp = this.setBudgetPlanLineDataGenerationTmpQuantity(budgetPlanHeader.RecId);
                    this.createOrUpdateBudgetPlanLine(budgetPlanLineDataGenerationTmp);
                    transIds.add(projTransBudget.TransId);
                }
            }

            if (isValidQuery)
            {
                this.bulkInsertOrUpdateBudgetPlanLines();
            }

            if (!isValidQuery || !isBudgetPlanLineCreated)
            {
                throw error(this.recordNotFoundErrorMessage());
            }

            if (budgetPlanHeader)
            {
                this.showTaskCompleteMessage();
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= BudgetPlanningConstants::MaxRetryCount)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::DuplicateKeyException)
        {
            error("@Budget:BudgetPlanning_Validation_ErrorOccurredDuringUpdate");
        }
        catch (Exception::Error)
        {
            exceptionTextFallThrough();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAllMatchingBudgetPlanLine</Name>
				<Source><![CDATA[
    protected void deleteAllMatchingBudgetPlanLine(BudgetPlanLineDataGenerationTmp _budgetPlanLineDataGenerationTmp)
    {
        BudgetPlanLine budgetPlanLine;

        delete_from budgetPlanLine
            where budgetPlanLine.BudgetPlanHeader       == _budgetPlanLineDataGenerationTmp.BudgetPlanHeader
                && budgetPlanLine.BudgetPlanScenario    == _budgetPlanLineDataGenerationTmp.BudgetPlanScenario
                && budgetPlanLine.LedgerDimension       == _budgetPlanLineDataGenerationTmp.LedgerDimension
                && budgetPlanLine.EffectiveDate         == _budgetPlanLineDataGenerationTmp.EffectiveDate
                && budgetPlanLine.BudgetClass           == _budgetPlanLineDataGenerationTmp.BudgetClass
                && budgetPlanLine.ProjectId             == _budgetPlanLineDataGenerationTmp.ProjectId
                && budgetPlanLine.ForecastModelId       == _budgetPlanLineDataGenerationTmp.ForecastModelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecordInTmpTable</Name>
				<Source><![CDATA[
    protected void findRecordInTmpTable(BudgetPlanLineDataGenerationTmp _budgetPlanLineDataGenerationTmp)
    {
        select firstonly forupdate budgetPlanLineDataGenerationTmpBulkInsert
            where budgetPlanLineDataGenerationTmpBulkInsert.BudgetPlanHeader    == _budgetPlanLineDataGenerationTmp.BudgetPlanHeader
                && budgetPlanLineDataGenerationTmpBulkInsert.BudgetPlanScenario == _budgetPlanLineDataGenerationTmp.BudgetPlanScenario
                && budgetPlanLineDataGenerationTmpBulkInsert.LedgerDimension    == _budgetPlanLineDataGenerationTmp.LedgerDimension
                && budgetPlanLineDataGenerationTmpBulkInsert.EffectiveDate      == _budgetPlanLineDataGenerationTmp.EffectiveDate
                && budgetPlanLineDataGenerationTmpBulkInsert.BudgetClass        == _budgetPlanLineDataGenerationTmp.BudgetClass
                && budgetPlanLineDataGenerationTmpBulkInsert.ProjectId          == _budgetPlanLineDataGenerationTmp.ProjectId
                && budgetPlanLineDataGenerationTmpBulkInsert.ForecastModelId    == _budgetPlanLineDataGenerationTmp.ForecastModelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateBudgetPlanHeader</Name>
				<Source><![CDATA[
    public BudgetPlanHeader createOrUpdateBudgetPlanHeader()
    {
        BudgetPlanHeader        budgetPlanHeader;
        BudgetPlanLine          budgetPlanLine;
        BudgetPlanScenarioRecId targetBudgetPlanScenarioQuantityRecId;

        budgetPlanHeader = super();

        targetBudgetPlanScenarioQuantityRecId = budgetPlanGenerateContractProjectForecast.parmTargetBudgetPlanScenarioQuantity();

        if (budgetPlanGenerateContract.parmTargetBudgetPlanGenerateType() == BudgetPlanGenerateType::ReplaceBudgetPlan
            && targetBudgetPlanScenarioQuantityRecId)
        {
            delete_from budgetPlanLine
                where budgetPlanLine.BudgetPlanHeader    == budgetPlanHeader.RecId
                    && budgetPlanLine.BudgetPlanScenario == targetBudgetPlanScenarioQuantityRecId;
        }

        return budgetPlanHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBudgetPlanHeader</Name>
				<Source><![CDATA[
    public BudgetPlanHeader setBudgetPlanHeader()
    {
        BudgetPlanHeader        budgetPlanHeader;
        NoYes                   isHistorical;

        budgetPlanHeader = super();

        isHistorical = budgetPlanGenerateContract.parmTargetIsHistorical();

        budgetPlanHeader.IsHistorical = isHistorical;

        // Set the BudgetPlanningStage to last stage for historical plans
        if (isHistorical)
        {
            budgetPlanHeader.BudgetPlanningStage = BudgetPlanningWorkflowSetup::getLastPlanningStage(
                                                        budgetPlanGenerateContract.parmTargetBudgetPlanningProcess(),
                                                        budgetPlanGenerateContract.parmTargetResponsibilityCenter()).RecId;

            budgetPlanHeader.Layout              = BudgetPlanningStageRule::findByProcessOrganizationStage(
                                                        budgetPlanHeader.BudgetPlanningProcess,
                                                        budgetPlanHeader.BudgetingOrganization,
                                                        budgetPlanHeader.BudgetPlanningStage).Layout;

            budgetPlanHeader.DocumentStatus      = BudgetPlanStatus::Finalized;
            budgetPlanHeader.WorkflowStatus      = BudgetPlanWorkflowStatus::Approved;
        }
        else
        {
            budgetPlanHeader.DocumentStatus      = BudgetPlanStatus::Draft;
            budgetPlanHeader.WorkflowStatus      = BudgetPlanWorkflowStatus::NotSubmitted;
        }

        return budgetPlanHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateBudgetPlanEffectiveDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the effective date based on budget plan generate aggregations.
    /// </summary>
    /// <returns>
    /// The effective date.
    /// </returns>
    protected BudgetPlanLineEffectiveDate calculateBudgetPlanEffectiveDate()
    {
        BudgetPlanLineEffectiveDate effectiveDate;

        FiscalCalendarRecId fiscalCalendarRecId = Ledger::fiscalCalendar();

        switch (budgetPlanGenerateContractProjectForecast.parmTargetBudgetPlanGenerateAggregateBy())
        {
            case BudgetPlanGenerateAggregateBy::Day:
                effectiveDate = projTransBudget.LedgerTransDate;
                break;

            case BudgetPlanGenerateAggregateBy::FiscalPeriod:
                effectiveDate = FiscalCalendarPeriod::findPeriodByCalendarDate(fiscalCalendarRecId, projTransBudget.LedgerTransDate).StartDate;
                break;

            case BudgetPlanGenerateAggregateBy::FiscalYear:
                effectiveDate = FiscalCalendarYear::findYearByCalendarDate(fiscalCalendarRecId, projTransBudget.LedgerTransDate).StartDate;
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return effectiveDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBudgetPlanLineDataGenerationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the values on a new <c>BudgetPlanLineDataGenerationTmp</c> record.
    /// </summary>
    /// <param name="_budgetPlanHeaderRecId">
    /// The record ID of the <c>BudgetPlanHeader</c> record.
    /// </param>
    /// <returns>
    /// The <c>BudgetPlanLineDataGenerationTmp</c> buffer with project forecast values.
    /// </returns>
    protected BudgetPlanLineDataGenerationTmp setBudgetPlanLineDataGenerationTmp(BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        BudgetPlanLineDataGenerationTmp budgetPlanLineDataGenerationTmp;

        budgetPlanLineDataGenerationTmp = super(_budgetPlanHeaderRecId);

        if (budgetPlanGenerateContract.parmTargetIsHistorical() == NoYes::Yes)
        {
            budgetPlanLineDataGenerationTmp.EffectiveDate = this.calculateBudgetPlanEffectiveDate();
        }

        budgetPlanLineDataGenerationTmp.LedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimensionForType(
                                                                                        LedgerDimensionType::BudgetPlanning,
                                                                                        projTransBudget.LedgerDimension,
                                                                                        projTransBudget.DefaultDimension);

        budgetPlanLineDataGenerationTmp.ProjectId           = projTransBudget.ProjId;
        budgetPlanLineDataGenerationTmp.SourceDataAreaId    = projTransBudget.DataAreaId;
        budgetPlanLineDataGenerationTmp.ForecastModelId     = projTransBudget.ModelId;

        if (projTransBudget.CostSales == ProjCostSales::Sales)
        {
            budgetPlanLineDataGenerationTmp.BudgetClass = BudgetClass::Revenue;
        }

        return budgetPlanLineDataGenerationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBudgetPlanLineDataGenerationTmpMonetary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the monetary values on a new <c>BudgetPlanLineDataGenerationTmp</c> record.
    /// </summary>
    /// <param name="_budgetPlanHeaderRecId">
    /// The record ID of the <c>BudgetPlanHeader</c> record.
    /// </param>
    /// <returns>
    /// The <c>BudgetPlanLineDataGenerationTmp</c> buffer with project forecast values.
    /// </returns>
    protected BudgetPlanLineDataGenerationTmp setBudgetPlanLineDataGenerationTmpMonetary(BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        BudgetPlanLineDataGenerationTmp budgetPlanLineDataGenerationTmpMonetary = this.setBudgetPlanLineDataGenerationTmp(_budgetPlanHeaderRecId);

        budgetPlanLineDataGenerationTmpMonetary.TransactionCurrencyCode     = Ledger::accountingCurrency(CompanyInfo::current());
        budgetPlanLineDataGenerationTmpMonetary.TransactionCurrencyAmount   = CurrencyExchangeHelper::amount(projTransBudget.AmountMst, budgetPlanLineDataGenerationTmpMonetary.TransactionCurrencyCode);

        return budgetPlanLineDataGenerationTmpMonetary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBudgetPlanLineDataGenerationTmpQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the quantity values on a new <c>BudgetPlanLineDataGenerationTmp</c> record.
    /// </summary>
    /// <param name="_budgetPlanHeaderRecId">
    /// The record ID of the <c>BudgetPlanHeader</c> record.
    /// </param>
    /// <returns>
    /// The <c>BudgetPlanLineDataGenerationTmp</c> buffer with project forecast values.
    /// </returns>
    protected BudgetPlanLineDataGenerationTmp setBudgetPlanLineDataGenerationTmpQuantity(BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        const int numberOfDecimalPlaces = 2;

        BudgetPlanLineDataGenerationTmp budgetPlanLineDataGenerationTmpQuantity = this.setBudgetPlanLineDataGenerationTmp(_budgetPlanHeaderRecId);

        budgetPlanLineDataGenerationTmpQuantity.BudgetPlanScenario  = budgetPlanGenerateContractProjectForecast.parmTargetBudgetPlanScenarioQuantity();
        budgetPlanLineDataGenerationTmpQuantity.EstimateType        = BudgetPlanEstimateType::Quantity;

        budgetPlanLineDataGenerationTmpQuantity.Quantity = abs(projTransBudget.Qty) * budgetPlanGenerateContractProjectForecast.parmTargetFactor();
        budgetPlanLineDataGenerationTmpQuantity.Quantity = decRound(budgetPlanLineDataGenerationTmpQuantity.Quantity, numberOfDecimalPlaces);
        budgetPlanLineDataGenerationTmpQuantity.Quantity = round(budgetPlanLineDataGenerationTmpQuantity.Quantity, budgetPlanGenerateContractProjectForecast.parmTargetRoundingPrecision());

        return budgetPlanLineDataGenerationTmpQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserDefinedQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the query object according to the settings which the user defined on the dialog.
    /// </summary>
    /// <returns>
    /// An instance of the <c>Query</c> class.
    /// </returns>
    public Query getUserDefinedQuery()
    {
        return this.createQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the range value and status on the given field.
    /// </summary>
    /// <param name = "_queryBuildDataSource">The <c>QueryBuildDataSource</c> to set the range for.</param>
    /// <param name = "_fieldId">The field to set the range on.</param>
    /// <param name = "_value">The range value.</param>
    /// <param name = "_rangeStatus">The range status; optional.</param>
    /// <returns>An instance of a <c>QueryBuildRange</c> object.</returns>
    protected QueryBuildRange setRange(
        QueryBuildDataSource _queryBuildDataSource,
        FieldId _fieldId, str _value,
        RangeStatus _rangeStatus = RangeStatus::Open)
    {
        QueryBuildRange queryBuildRange;

        if (_queryBuildDataSource)
        {
            queryBuildRange = SysQuery::findOrCreateRange(_queryBuildDataSource, _fieldId);

            queryBuildRange.value(_value);
            queryBuildRange.status(_rangeStatus);
        }

        return queryBuildRange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>disableDatasourcesWithoutRangeValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the ranges of the given <c>QueryBuildDataSource</c> and its child datasources, and disables
    /// the datasources without any range values.
    /// </summary>
    /// <param name = "_qbds">The parent <c>QueryBuildDataSource</c>.</param>
    /// <returns>true, if the given <c>QueryBuildDataSource</c> has been disabled; otherwise, false.</returns>
    public boolean disableDatasourcesWithoutRangeValues(QueryBuildDataSource _queryBuildDataSource)
    {
        int         rangeCount, childCount;
        boolean     canBeDisabled = true;

        for (rangeCount = _queryBuildDataSource.rangeCount(); rangeCount > 0 && canBeDisabled; rangeCount--)
        {
            if (_queryBuildDataSource.range(rangeCount).value())
            {
                canBeDisabled = false;
            }
        }

        for (childCount = _queryBuildDataSource.childDataSourceCount(); childCount > 0; childCount--)
        {
            if (!this.disableDatasourcesWithoutRangeValues(_queryBuildDataSource.childDataSourceNo(childCount)))
            {
                canBeDisabled = false;
            }
        }

        _queryBuildDataSource.enabled(!canBeDisabled);

        return canBeDisabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the query object according to the settings which the user defined on the dialog.
    /// </summary>
    /// <returns>
    /// An instance of the <c>Query</c> class.
    /// </returns>
    protected Query createQuery()
    {
        Query                   query;
        QueryBuildDataSource    projectForecastBudgetQueryBuildDataSource;
        str                     tmpRangeStr;
        str                     negWIP;
        str                     negPayroll;
        boolean                 addWipRanges;
        boolean                 addPayrollRanges;

        TransDate projectFromDate = budgetPlanGenerateContractProjectForecast.parmSourceProjectForecastProjectFromDate();
        TransDate projectToDate   = budgetPlanGenerateContractProjectForecast.parmSourceProjectForecastProjectToDate();
        TransDate ledgerFromDate  = budgetPlanGenerateContractProjectForecast.parmSourceProjectForecastLedgerFromDate();
        TransDate ledgerToDate    = budgetPlanGenerateContractProjectForecast.parmSourceProjectForecastLedgerToDate();

        boolean includeProfitAndloss = budgetPlanGenerateContractProjectForecast.parmSourceProjectForecastProfitAndLoss();
        boolean includeWIP           = budgetPlanGenerateContractProjectForecast.parmSourceProjectForecastWIP();
        boolean payrollAllocation    = budgetPlanGenerateContractProjectForecast.parmSourceProjectForecastPayrollAllocation();

        query = new Query(SysOperationHelper::base64Decode(budgetPlanGenerateContractProjectForecast.parmQueryBudgetPlanGenerateProjectForecast()));

        projectForecastBudgetQueryBuildDataSource = query.dataSourceTable(tableNum(ProjTransBudget));

        //Add ranges
        this.setRange(projectForecastBudgetQueryBuildDataSource,
            fieldNum(ProjTransBudget, ModelId),
            budgetPlanGenerateContractProjectForecast.parmSourceProjectForecastForecastModel(),
            RangeStatus::Locked);

        if (projectFromDate || projectToDate)
        {
            this.setRange(projectForecastBudgetQueryBuildDataSource, fieldNum(ProjTransBudget, ProjTransDate), queryRange(projectFromDate, projectToDate), RangeStatus::Locked);
        }

        if (ledgerFromDate || ledgerToDate)
        {
            this.setRange(projectForecastBudgetQueryBuildDataSource, fieldNum(ProjTransBudget, LedgerTransDate), queryRange(ledgerFromDate, ledgerToDate), RangeStatus::Locked);
        }

        if (includeProfitAndloss)
        {
            if (!includeWIP)
            {
                addWipRanges    = true;
                negWIP          = BudgetPlanningConstants::NotOperator;
            }
            if (!payrollAllocation)
            {
                addPayrollRanges    = true;
                negPayroll          = BudgetPlanningConstants::NotOperator;
            }
        }
        else
        {
            if (includeWIP)
            {
                addWipRanges    = true;
                negWIP          = BudgetPlanningConstants::EmptyString;
            }
            if (payrollAllocation)
            {
                addPayrollRanges    = true;
                negPayroll          = BudgetPlanningConstants::EmptyString;
            }
        }

        if (addWipRanges)
        {
            tmpRangeStr = queryRangeConcat(tmpRangeStr, negWIP + queryValue(LedgerPostingType::ProdWIPValuation));
            tmpRangeStr = queryRangeConcat(tmpRangeStr, negWIP + queryValue(LedgerPostingType::ProdWIPIssue));
            tmpRangeStr = queryRangeConcat(tmpRangeStr, negWIP + queryValue(LedgerPostingType::ProjWIPCostvalue));
            tmpRangeStr = queryRangeConcat(tmpRangeStr, negWIP + queryValue(LedgerPostingType::ProjStatusAccountItem));
            tmpRangeStr = queryRangeConcat(tmpRangeStr, negWIP + queryValue(LedgerPostingType::ProjSalesvalueOffset));
            tmpRangeStr = queryRangeConcat(tmpRangeStr, negWIP + queryValue(LedgerPostingType::ProjWIPProduction));
            tmpRangeStr = queryRangeConcat(tmpRangeStr, negWIP + queryValue(LedgerPostingType::ProjWIPProfit));
            tmpRangeStr = queryRangeConcat(tmpRangeStr, negWIP + queryValue(LedgerPostingType::ProjWIPCost));
            tmpRangeStr = queryRangeConcat(tmpRangeStr, negWIP + queryValue(LedgerPostingType::ProjWIPInvoicedOnAccount));
        }

        if (addPayrollRanges)
        {
            tmpRangeStr += queryRangeConcat(tmpRangeStr, negPayroll + queryValue(LedgerPostingType::ProjPayrollAllocation));
        }

        tmpRangeStr = queryRangeConcat(tmpRangeStr, SysQuery::valueNot(LedgerPostingType::ProjNeverLedger));
        tmpRangeStr = queryRangeConcat(tmpRangeStr, SysQuery::valueNot(LedgerPostingType::ProjNoLedger));

        this.setRange(projectForecastBudgetQueryBuildDataSource, fieldNum(ProjTransBudget, PostingType), tmpRangeStr, RangeStatus::Locked);

        this.disableDatasourcesWithoutRangeValues(query.dataSourceNo(1));

        projectForecastBudgetQueryBuildDataSource.sortClear();
        projectForecastBudgetQueryBuildDataSource.addSortField(fieldNum(ProjTransBudget, ProjId));
        projectForecastBudgetQueryBuildDataSource.addSortField(fieldNum(ProjTransBudget, ProjTransType));
        projectForecastBudgetQueryBuildDataSource.addSortField(fieldNum(ProjTransBudget, TransId));
        projectForecastBudgetQueryBuildDataSource.orderMode(OrderMode::OrderBy);

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>