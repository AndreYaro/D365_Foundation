<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSFwkTransitTimeHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Ax.Tms.Base.Data;
using Microsoft.Dynamics.Ax.Tms.Base.Utility;
using System.Xml.Linq;

/// <summary>
/// The <c>TMSFwkTransitTimeHelper</c> class calculates transportation transit times.
/// </summary>
public class TMSFwkTransitTimeHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TMSFwkTransitTimeHelper construct()
    {
        return new TMSFwkTransitTimeHelper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveTransitTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves transit time.
    /// </summary>
    /// <param name = "_transactionFacade">Transaction facade.</param>
    /// <param name = "_ratingDto">Rating DTO.</param>
    /// <param name = "_pickup">Pick-up address element.</param>
    /// <param name = "_dropOff">Drop-off address element.</param>
    /// <returns>The transit time.</returns>
    public TMSFwkTransitTimeHelperResponse retrieveTransitTime(
        TMSTransactionFacade    _transactionFacade,
        RatingDto               _ratingDto,
        XElement                _pickup,
        XElement                _dropOff)
    {
        if (!System.String::IsNullOrEmpty(_ratingDto.get_TransitTimeEngineCode()))
        {
            TMSFwkITransitTimeEngine transitTimeEngine = TMSFwkTransitTimeEngineFactory::createTransitTimeEngine(_ratingDto.TransitTimeEngineCode);
            return transitTimeEngine.RetrieveTransitTime(_transactionFacade, _ratingDto, _pickup, _dropOff);
        }
        else
        {
            return null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveTransitTimeForRatingDTOs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves transit time for a list of rating DTOs and removes the rating DTOs for which retrieval of transit time resulted with an error.
    /// </summary>
    /// <param name = "_tmsTransactionFacade">Transaction facade.</param>
    /// <param name = "_segment">Segment element.</param>
    /// <param name = "_ratingDtos">A list of rating DTOs.</param>
    public void retrieveTransitTimeForRatingDTOs(
        TmsTransactionFacade    _tmsTransactionFacade,
        XElement                _segment,
        RatingDtoList           _ratingDtos)
    {
        XElement re = null;
        XElement pickup = TmsXDocExtensions::GetAddress(_segment, AddTypeXmlConstants::get_Pickup());
        XElement dropOff = TmsXDocExtensions::GetAddress(_segment, AddTypeXmlConstants::get_DropOff());
        RatingDtoList transitTimeRDTO = new RatingDtoList();
        transitTimeRDTO.AddRange(_ratingDtos);
        RatingDtoListEnumerator enumerator = transitTimeRDTO.GetListEnumerator();

        while (enumerator.MoveNext())
        {
            RatingDto ratingDto = enumerator.Current();

            if (!System.String::IsNullOrEmpty(ratingDTO.get_TransitTimeEngineCode()))
            {
                re = TmsXDocExtensions::RetrieveOrCreateRatingEntity(_segment, ratingDto);

                if (re.Element(ElementXmlConstants::get_TransitTime()) == null)
                {
                    TMSFwkTransitTimeHelperResponse transitTimeHelperResponse = this.retrieveTransitTime(_tmsTransactionFacade, ratingDTO, pickup, dropOff);
                    TMSFwkTransitTimeHelper::addTransitTime(re, transitTimeHelperResponse);

                    if (!System.String::IsNullOrEmpty(transitTimeHelperResponse.parmErrorDto().Code))
                    {
                        _ratingDtos.Remove(ratingDTO);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTransitTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a transit time element to the current element.
    /// </summary>
    /// <param name="_element">The current element.</param>
    /// <param name="_transitTimeHelperResponse">The object containing transit time data.</param>
    private static void addTransitTime(XElement _element, TMSFwkTransitTimeHelperResponse _transitTimeHelperResponse)
    {
        XElement transitTime = new XElement(ElementXmlConstants::get_TransitTime(),
                    new XElement(ElementXmlConstants::get_TransitTimeEngineCode(), _transitTimeHelperResponse.parmTransitTimeEngineCode()));

        if (System.String::IsNullOrEmpty(_transitTimeHelperResponse.parmErrorDto().Code))
        {
            transitTime.Add(new XElement(ElementXmlConstants::get_TransitDays(), _transitTimeHelperResponse.parmDays()));
        }
        else
        {
            transitTime.AddError(_transitTimeHelperResponse.parmErrorDto());
        }

        _element.Add(transitTime);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>