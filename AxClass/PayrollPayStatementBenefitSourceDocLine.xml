<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>PayrollPayStatementBenefitSourceDocLine</Name>
  <SourceCode>
    <Declaration><![CDATA[
/// <summary>
///    The <c>PayrollPayStatementBenefitSourceDocLine</c> class provides the information
///    to handle the distributions and sub-ledger journal account entries that apply to
///    pay statement benefit lines.
/// </summary>
[SourceDocumentEnumLiteralClassExtensionAttribute(enumStr(SourceDocumentLine_PayrollPayStatement), enumLiteralStr(SourceDocumentLine_PayrollPayStatement, PayStatementBenefitLine))]
class PayrollPayStatementBenefitSourceDocLine extends PayrollPayStatementSourceDocumentLine
{
    PayrollPayStatementBenefitLine payStatementBenefitLine;
}
]]></Declaration>
    <Methods>
      <Method>
        <Name>calculateSourceDocumentAmountMap</Name>
        <Source><![CDATA[
    protected SourceDocumentAmountMap calculateSourceDocumentAmountMap()
    {
        SourceDocumentAmountMap     sourceDocumentAmountMap;
        SourceDocumentLine          sourceDocumentLineValue;
        MonetaryAmount              monetaryAmount;

        // Create map
        sourceDocumentAmountMap = SourceDocumentAmountMap::construct();
        sourceDocumentLineValue = this.parmSourceDocumentLine();

        if (payStatementLine.IsEmployer == NoYes::Yes)
        {
            monetaryAmount = MonetaryAmount::PayrollCost;
        }
        else
        {
            monetaryAmount = MonetaryAmount::PayrollLiability;
        }
        sourceDocumentAmountMap.insert(SourceDocumentAmount::newFromParameters(sourceDocumentLineValue, payStatementLine.AccountingCurrencyAmount, monetaryAmount));

        return sourceDocumentAmountMap;
    }

]]></Source>
      </Method>
      <Method>
        <Name>initializeImplementation</Name>
        <Source><![CDATA[
    /// <summary>
    /// Initializes the instance variables.
    /// </summary>
    /// <param name="_sourceDocumentLineImplementation">
    /// A source document line implementation table.
    /// </param>
    /// <param name="_additionalInformation">
    /// A map to hold buffers of pre initiliazed objects need by the framework to the source document.
    /// </param>
    protected void initializeImplementation(SourceDocumentLineImplementation _sourceDocumentLineImplementation, Map _additionalInformation = null)
    {
        super(_sourceDocumentLineImplementation);

        // Initialize the pay statement benefit line from the base pay statement line
        select firstonly payStatementBenefitLine
            where payStatementBenefitLine.RecId == payStatementLine.RecId;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmBenefitPlan</Name>
        <Source><![CDATA[
    public HcmBenefitPlanRecId parmBenefitPlan()
    {
        return HcmBenefit::find(payStatementBenefitLine.Benefit).BenefitPlan;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmDefaultDimension</Name>
        <Source><![CDATA[
    public DimensionDefault parmDefaultDimension()
    {
        HcmBenefit benefit;
        CompanyInfoRecId companyInfoRecId = CompanyInfo::current(payStatementBenefitLine.dataAreaId);
        PayrollBenefitPlanDefaultDimension benefitPlanDefaultDimension;
        ValidFromDateTime paymentDate = datetoendUtcDateTime(payStatementBenefitLine.AccountingDate, DateTimeUtil::getCompanyTimeZone());

        benefit = HcmBenefit::findByTimeState(payStatementBenefitLine.Benefit, paymentDate);
        benefitPlanDefaultDimension = PayrollBenefitPlanDefaultDimension::findByBenefitPlanLegalEntity(benefit.BenefitPlan, companyInfoRecId);

        return benefitPlanDefaultDimension.DefaultDimension;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmDescription</Name>
        <Source><![CDATA[
    public Description parmDescription()
    {
        return strFmt("@Payroll:Benefit1", HcmBenefitPlan::find(this.parmBenefitPlan()).Description);
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmIsDocumentLineEditable</Name>
        <Source><![CDATA[
    public boolean parmIsDocumentLineEditable()
    {
        boolean isLineEditable = true;

        if (payStatement.RecId &&
                (payStatement.IsReversed
                || payStatement.PostedStatus != PayrollPayStatementPostedStatus::None))
        {
            // The source document line is locked for posted or reversed pay statements
            isLineEditable = false;
        }

        return isLineEditable;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmLedgerDimensionDefaultAccount</Name>
        <Source><![CDATA[
    public LedgerDimensionDefaultAccount parmLedgerDimensionDefaultAccount(LegalEntityRecId _legalEntityRecId = this.parmLegalEntityRecId())
    {
        HcmBenefit benefit;
        PayrollBenefitAccountingRule benefitAccountingRule;
        ValidFromDateTime paymentDate = datetoendUtcDateTime(payStatementBenefitLine.AccountingDate, DateTimeUtil::getCompanyTimeZone());
        PayrollType payrollType;

        if (payStatementBenefitLine.IsEmployer)
        {
            payrollType = PayrollType::Contribution;
        }
        else
        {
            payrollType = PayrollType::Deduction;
        }

        benefit = HcmBenefit::findByTimeState(payStatementBenefitLine.Benefit, paymentDate);
        benefitAccountingRule = PayrollBenefitAccountingRule::findByBenefitPlanLegalEntity(benefit.BenefitPlan, _legalEntityRecId, payrollType);

        return benefitAccountingRule.LedgerDimension;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmProjectId</Name>
        <Source><![CDATA[
    public ProjId parmProjectId()
    {
        ProjId projectId;

        if (payStatementBenefitLine.IsEmployer == NoYes::No)
        {
            // Deductions should not have project information
            projectId = '';
        }
        else
        {
            projectId = super();
        }

        return projectId;
    }

]]></Source>
      </Method>
    </Methods>
  </SourceCode>
</AxClass>