<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesLineCopyFromSalesLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesLineCopyFromSource</c> class is responsible for copying <c>SalesLine</c> from a <c>SalesLine</c>.
/// </summary>
[SalesLineCopyFromSourceFactory(tableStr(SalesLine))]
class SalesLineCopyFromSalesLine extends SalesLineCopyFromSource
{
    #ISOCountryRegionCodes
    SalesLine sourceSalesLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canCopy</Name>
				<Source><![CDATA[
    public boolean canCopy()
    {
        if (deleteLines && sourceSalesLine.SalesId == salesTable.SalesId)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyFromSource</Name>
				<Source><![CDATA[
    protected void copyFromSource()
    {
        super();
        salesLine.initFromSalesLine(sourceSalesLine,
                        copyPrecisely,
                        !searchPrice,
                        copyQty,
                        tmpFrmVirtualLine.Qty,
                        #PdsCatchWeightEnabled ? tmpFrmVirtualLine.PdsCWQty : 0);

        // <GEEPL>
        parentRecId   = sourceSalesLine.RecId;
        parentTableId = sourceSalesLine.TableId;
        // </GEEPL>
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveCurrencyCode</Name>
				<Source><![CDATA[
    protected CurrencyCode retrieveCurrencyCode()
    {
        CurrencyCode currencyCode;

        if (salesLine.currencyCode != sourceSalesLine.currencyCode)
        {
            currencyCode = sourceSalesLine.currencyCode;
        }

        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveSourceQty</Name>
				<Source><![CDATA[
    public Qty retrieveSourceQty()
    {
        return sourceSalesLine.SalesQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveSourceInventTransId</Name>
				<Source><![CDATA[
    public InventTransId retrieveSourceInventTransId()
    {
        return sourceSalesLine.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    protected void updateStatus()
    {
        if (sourceSalesLine.SalesStatus == SalesStatus::Canceled)
        {
            salesLine.SalesStatus = SalesStatus::Canceled;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePriceDiscLineChangePolicy</Name>
				<Source><![CDATA[
    protected void updatePriceDiscLineChangePolicy()
    {
        if (RetailPricingSkipChangePolicyWhenCopyFromSalesLineFlight::instance().isEnabled()
            && salesLine.isRetailPricingUsed() && RetailPricingCustomizableFeatureToggle::isPreventUnintendedRecalculationEnabled())
        {
            return; // Skip change policy when retail price lock is enabled, as price lock serves the same purpose as overriding price.
        }

        salesLine.setPriceDiscChangePolicy(PriceDiscSystemSource::CopyFromSalesOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDropShipmentRelatedData</Name>
				<Source><![CDATA[
    protected void copyDropShipmentRelatedData()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            MCRSalesLineDropShipment mcrSalesLineDropShipment = salesLine.mcrSalesLineDropShipment();
            if (mcrSalesLineDropShipment.DropShipment)
            {
                mcrSalesLineDropShipment.DropShipment = salesLine.inventTable().mcrInventTable().DropShipment;
                mcrSalesLineDropShipment.DropShipStatus = MCRDropShipStatus::ToBeDropShipped;
                salesLine.mcrPackMCRSalesLineDropShipment(mcrSalesLineDropShipment);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxInformation_IN</Name>
				<Source><![CDATA[
    public void updateTaxInformation_IN()
    {
        if (TaxIntegrationUtils::isTaxInformationEnabled())
        {
            TransTaxInformationHelper::copyTransTaxInformation(sourceSalesLine, salesLine);

            TransTaxInformationHelper::resetCustVendLocationByTransTable(salesLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCategoryRelatedData</Name>
				<Source><![CDATA[
    protected void copyCategoryRelatedData()
    {
        if (salesLine.isCategoryBased())
        {
            salesLineForeignTradeCategory.initFromSalesLineForeignTradeCategory(SalesLineForeignTradeCategory::findSalesLine(sourceSalesLine));
            copyForeignTradeRecord = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAgreementRelatedData</Name>
				<Source><![CDATA[
    protected void copyAgreementRelatedData()
    {
        //check if the agreement line from the original sales line can be used
        if (this.mustFindAgreementLine() && sourceSalesLine.MatchingAgreementLine && salesTable.CustAccount == sourceSalesLine.CustAccount)
        {
            agreementLine = AgreementLine::find(sourceSalesLine.MatchingAgreementLine);
            if (agreementLine.Agreement != salesTable.MatchingAgreement || agreementLine.IsDeleted)
            {
                agreementLine = null;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    protected void initialize(SalesLine _salesLine, SalesTable _salesTable, TmpFrmVirtual _tmpFrmVirtualLines, SalesCopying _salesCopying)
    {
        super(_salesLine, _salesTable, _tmpFrmVirtualLines, _salesCopying);
        sourceSalesLine = SalesLine::findRecId(_tmpFrmVirtualLines.RecordNo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveSource</Name>
				<Source><![CDATA[
    public Common retrieveSource()
    {
        return sourceSalesLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>