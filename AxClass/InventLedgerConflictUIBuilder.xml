<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventLedgerConflictUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventLedgerConflictUIBuilder</c> class builds the dialog box for the report.
/// </summary>
class InventLedgerConflictUIBuilder extends SrsReportDataContractUIBuilder
{
    DialogField dimensionAttributeField;
    DialogField dimensionAttributeValueField;
    DialogField excludeBlankDimensionsField;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds the dialog box for the report.
    /// </summary>
    public void build()
    {
        super();

        dimensionAttributeField      = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(InventLedgerConflictContract, parmDimensionAttribute));
        dimensionAttributeValueField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(InventLedgerConflictContract, parmDimensionValue));
        excludeBlankDimensionsField  = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(InventLedgerConflictContract, parmExcludeBlankDimensions));

        this.setEnabledOnExcludeBlankDimensions();
        this.setEnabledOnDimensionAttributeValueField();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionAttributeLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the dimension attribute lookup fields for reports on the specified dialog box.
    /// </summary>
    /// <param name="_dimensionAttributeDialogControl">
    ///    The <c>FormReferenceControl</c> class for which the lookup fields must be associated.
    /// </param>
    /// <returns>
    ///    The record that is selected in the drop-down box.
    /// </returns>
    public Common dimensionAttributeLookup(FormReferenceControl _dimensionAttributeDialogControl)
    {
        DimensionAttribute      selectedRecord;

        if (_dimensionAttributeDialogControl != null)
        {
            SysReferenceTableLookup sysTableLookup = SysReferenceTableLookup::newParameters(tableNum(DimensionAttribute), _dimensionAttributeDialogControl, true);

            // Display the Name field in the lookup form.
            sysTableLookup.addLookupfield(fieldNum(DimensionAttribute, Name));

            // Only - non-system generated dimension attrbutes are displayed.
            Query query = new Query();
            QueryBuildDataSource qbdsDimensionAttribute = query.addDataSource(tableNum(DimensionAttribute));
            qbdsDimensionAttribute.addRange(fieldNum(DimensionAttribute, Type)).value(SysQuery::valueNot(int2str(enum2int(DimensionAttributeType::DynamicAccount))));

            // Also - don't display main account
            qbdsDimensionAttribute.addRange(fieldNum(DimensionAttribute, RecId)).value(SysQuery::valueNot(DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)));

            sysTableLookup.parmQuery(query);

            selectedRecord = sysTableLookup.performFormLookup();
        }

        return selectedRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionAttributeValueLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the dimension attribute value lookup fields for reports on the specified dialog box.
    /// </summary>
    /// <param name="_dimensionAttributeValueDialogControl">
    ///    The <c>FormReferenceControl</c> class for which the lookup fields must be associated.
    /// </param>
    public void dimensionAttributeValueLookup(FormStringControl _dimensionAttributeValueDialogControl)
    {
        DimensionAttribute  selectedDimensionAttribute = DimensionAttribute::find(dimensionAttributeField.value());

        if (_dimensionAttributeValueDialogControl != null
            && selectedDimensionAttribute)
        {
            SysTableLookup sysTableLookup = SysTableLookup::newParameters(selectedDimensionAttribute.BackingEntityType, _dimensionAttributeValueDialogControl, true);

            // Display the value field in the lookup form.
            sysTableLookup.addLookupfield(selectedDimensionAttribute.ValueAttribute);

            Query query = new Query();
            QueryBuildDataSource qbdsCommon = query.addDataSource(selectedDimensionAttribute.BackingEntityType);

            // In the DimensionFinancialTag table, an extra range has to be added
            if (selectedDimensionAttribute.BackingEntityType == tableNum(DimensionFinancialTag))
            {
                qbdsCommon.addRange(fieldNum(DimensionFinancialTag, FinancialTagCategory)).value(queryValue(selectedDimensionAttribute.financialTagCategory()));
            }

            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionAttributeModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the modified event for the dimension attribute dialog field.
    /// </summary>
    /// <param name="_control">
    ///    The control behind the dimension attribute dialog field.
    /// </param>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean dimensionAttributeModified(FormReferenceGroupControl _control)
    {
        if (_control.modified())
        {
            this.setEnabledOnExcludeBlankDimensions();
            this.setEnabledOnDimensionAttributeValueField();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDimensionAttributeValueRecord</Name>
				<Source><![CDATA[
    private Common findDimensionAttributeValueRecord(DimensionAttribute _selectedDimensionAttribute)
    {
        Common selectedDimensionAttributeValue;

        if (_selectedDimensionAttribute)
        {
            DictTable dimensionAttributeTable = new DictTable(_selectedDimensionAttribute.BackingEntityType);
            selectedDimensionAttributeValue = dimensionAttributeTable.makeRecord();

            select selectedDimensionAttributeValue
               where selectedDimensionAttributeValue.(_selectedDimensionAttribute.ValueAttribute) == dimensionAttributeValueField.value();
        }

        return selectedDimensionAttributeValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Transfers data from the dialog box into the data contract object.
    /// </summary>
    public void getFromDialog()
    {
        InventLedgerConflictContract    inventLedgerConflictContract = this.dataContractObject() as InventLedgerConflictContract;

        super();

        DimensionAttribute selectedDimensionAttribute = DimensionAttribute::find(dimensionAttributeField.value());
        inventLedgerConflictContract.parmDimensionAttributeName(selectedDimensionAttribute.Name);
        inventLedgerConflictContract.parmDimensionValue(dimensionAttributeValueField.value());

        Common selectedDimensionAttributeValue = this.findDimensionAttributeValueRecord(selectedDimensionAttribute);
        if (selectedDimensionAttributeValue)
        {
            inventLedgerConflictContract.parmEntityInstance(selectedDimensionAttributeValue.(selectedDimensionAttribute.KeyAttribute));
        }

        inventLedgerConflictContract.parmExcludeBlankDimensions(excludeBlankDimensionsField.value());
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDimensionAttributeValue</Name>
				<Source><![CDATA[
    private boolean validateDimensionAttributeValue(FormStringControl _dimensionAttributeValueDialogControl)
    {
        if (dimensionAttributeField.value())
        {
            DimensionAttribute selectedDimensionAttribute = DimensionAttribute::find(dimensionAttributeField.value());
            Common selectedDimensionAttributeValue = this.findDimensionAttributeValueRecord(selectedDimensionAttribute);

            if (!selectedDimensionAttributeValue.RecId)
            {
                return checkFailed(strFmt('@CostManagement:MessageValidation_DimensionValueDoesNotExist', dimensionAttributeValueField.value(), selectedDimensionAttribute.Name));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Registers the method override in order to capture dialog events.
    /// </summary>
    public void postRun()
    {
        super();

        dialog.dialogForm().formRun().controlMethodOverload(false);

        dimensionAttributeField.registerOverrideMethod(methodStr(FormReferenceGroupControl, modified), methodStr(InventLedgerConflictUIBuilder, dimensionAttributeModified), this);
        dimensionAttributeField.registerOverrideMethod(methodStr(FormReferenceControl, lookupReference), methodStr(InventLedgerConflictUIBuilder, dimensionAttributeLookup), this);

        dimensionAttributeValueField.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(InventLedgerConflictUIBuilder, dimensionAttributeValueLookup), this);
        dimensionAttributeValueField.registerOverrideMethod(methodStr(FormStringControl, validate), methodStr(InventLedgerConflictUIBuilder, validateDimensionAttributeValue), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEnabledOnExcludeBlankDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the exclude blank dimensions field.
    /// </summary>
    protected void setEnabledOnExcludeBlankDimensions()
    {
        if (dimensionAttributeField.value() == 0)
        {
            excludeBlankDimensionsField.value(NoYes::Yes);
            excludeBlankDimensionsField.enabled(false);
        }
        else
        {
            excludeBlankDimensionsField.enabled(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEnabledOnDimensionAttributeValueField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the dimension attribute value field.
    /// </summary>
    protected void setEnabledOnDimensionAttributeValueField()
    {
        if (dimensionAttributeField.value() == 0)
        {
            dimensionAttributeValueField.value('');
            dimensionAttributeValueField.enabled(false);
        }
        else
        {
            dimensionAttributeValueField.enabled(true);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
