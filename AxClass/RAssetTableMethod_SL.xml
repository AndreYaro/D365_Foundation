<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetTableMethod_SL</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetTableMethod_SL extends RAssetTableMethod
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
        public RAssetAmount calc(RAssetTransDate _transDate)
    {
        RAssetAmount     rAssetAmount = 0;
        RAssetAmount     depreciate;
        RAssetAmount     lastValue;
        real             totalIntervalWithFactor = totalInterval / assetFactor;
        RAssetAmount     amountToDepreciateCalc;
        real             totalIntervalCalc;
        ;

        if (currentIntervalMth != 0 && totalInterval != 0)
        {
            if (currentIntervalMth >= roundUp(totalIntervalWithFactor, 0)                    &&
                (rAssetStandards.AssetStandardId != RAssetParameters::standardTaxIdDefault() ||
                 rAssetDeprProfile.DeprSumBase == RAssetDeprSumBase::NetBookValue))
            {
                depreciate = amountNetBookValue - parmPrevDepAmount;
            }
            else
            {
                if (rAssetStandards.AssetStandardId == RAssetParameters::standardTaxIdDefault() &&
                    rAssetDeprProfile.DeprSumBase == RAssetDeprSumBase::ReplacementCost)
                {
                    amountToDepreciateCalc = amountToDepreciate;
                    totalIntervalCalc      = totalInterval;
                }
                else
                {
                    amountToDepreciateCalc = amountNetBookValue - parmPrevDepAmount;
                    totalIntervalCalc      = totalInterval - (currentIntervalMth - 1) * assetFactor;
                }

                rAssetAmount = currentIntervalMth * assetFactor / totalIntervalCalc;
                lastValue    = ((currentIntervalMth - 1) * assetFactor) / totalIntervalCalc;
                depreciate    = (rAssetAmount - lastValue) * amountToDepreciateCalc;
            }

            depreciate = this.adjustDepreciationAmountForPartialPeriod(_transDate, depreciate);

            if (amountNetBookValue - parmPrevDepAmount - depreciate <
                RAssetGroup::assetDepreciationMin(rAssetStandards.AssetGroup))
            {
                depreciate = amountNetBookValue - parmPrevDepAmount;
            }
        }

        return depreciate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
        public void init(RAssetTransDate    _assetTransDate,
                     RAssetDepStartDate _assetDepStartDate = rAssetStandards.startDepDate(this.parmBudgetModelId()))
    {
        super(_assetTransDate, _assetDepStartDate);
        assetFactor          = rAssetStandards.factor(_assetTransDate - 1);
        assetFactor          = assetFactor <= 0 ? 1 : assetFactor;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>