<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendRecurrenceInvoiceGenerationService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to generate recurring vendor invoices based on Vendor invoice template and recurrence invoice date.
/// </summary>
class VendRecurrenceInvoiceGenerationService
{
    private VendTable vendTable;
    private VendInvoiceTemplate vendInvoiceTemplate;
    private VendRecurrenceInvoiceGroup vendRecurrenceInvoiceGroup;
    private NumberSeq numberSeq;
    private Counter recurrenceInvoiceCounter;
    private boolean isRecurrenceGroupCreated;
    private boolean vendorSelected;
    private boolean stopProcess;
    private boolean invoiceGenerated;
    private boolean vendorProcessed;
    private boolean isRecurrenceInvoiceCreated;
    private TransDate invoiceGenerationDate;
    private boolean isRecurrenceGroupFlightEnabled = VendRecurrenceInvoiceGenerationRecurrenceGroupFlight::instance().isEnabled();

    #Characters
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createVendRecurrenceInvoice</Name>
				<Source><![CDATA[
    private void createVendRecurrenceInvoice(TransDate _recurrenceInvoiceDate,
                                            TransDate _recurrenceGenerationDate,
                                            VendRecurrenceInvoice _vendRecurrenceInvoice)
    {
        VendorRecurrenceInvoice recurrenceInvoiceLine;
        VendInvoiceInfoTable vendInvoiceInfoTable;
        PurchTotals purchTotals;
        AmountCur totalRecurrenceInvoiceAmount;
        boolean isRecurrenceStopped = false;

        // Determines the total invoice amount generated in a single recurrence invoice setup.
        totalRecurrenceInvoiceAmount = VendRecurrenceInvoice::sumRecurrenceInvoiceAmount(_vendRecurrenceInvoice, _vendRecurrenceInvoice.CurrencyCode);

        _vendRecurrenceInvoice.selectForUpdate(true);

        
        if (!isRecurrenceGroupCreated &&
            _vendRecurrenceInvoice.RecId != 0 &&
            vendRecurrenceInvoiceGroup.RecId == 0 && 
            invoiceGenerationDate <= _recurrenceGenerationDate && 
            _vendRecurrenceInvoice.LastRecurrenceGenerationDate != _recurrenceGenerationDate &&
            (_vendRecurrenceInvoice.EndDate == dateNull()
                || (_vendRecurrenceInvoice.EndDate != dateNull() && 
                    _vendRecurrenceInvoice.EndDate >= invoiceGenerationDate)))
        {
            isRecurrenceGroupCreated = true;
            this.createVendRecurrenceInvoiceGroup(_recurrenceInvoiceDate, _recurrenceGenerationDate);
        }

        invoiceGenerated = false;

        // Creates pending vendor invoices until recurrence invoice VendRecurrenceInvoice.NextGenerationDate is less than equal to process generation date or recurrence invoice EndDate
        // or recurrence invoice setup is not stopped and ceiling amount is less than equal to total invoice amount of all already generated invoices.
        while (( (_vendRecurrenceInvoice.IsStopped == NoYesCombo::No && (_vendRecurrenceInvoice.EndDate != dateNull() && _vendRecurrenceInvoice.EndDate <= _recurrenceGenerationDate))
                || (_vendRecurrenceInvoice.IsStopped == NoYesCombo::No && invoiceGenerationDate <= _recurrenceGenerationDate && invoiceGenerationDate != dateNull()))
                && isRecurrenceGroupCreated)
        {
            vendorSelected = true;

            if ((_vendRecurrenceInvoice.CeilingAmount == 0.0)
                || (totalRecurrenceInvoiceAmount <= _vendRecurrenceInvoice.CeilingAmount))
            {
                recurrenceInvoiceCounter += 1;
                vendorProcessed = true;
                Num vendorInvoiceNumber = vendRecurrenceInvoiceGroup.RecurrenceInvoiceId + '-' + int2Str(recurrenceInvoiceCounter);
                VendInvoiceInfoTable = this.createFromvendInvoiceTemplate(vendInvoiceTemplate, vendTable, _vendRecurrenceInvoice.UseDefaultFromVendor, vendorInvoiceNumber, _vendRecurrenceInvoice, _recurrenceInvoiceDate);

                purchTotals = purchTotals::newParmTable(vendInvoiceInfoTable, PurchUpdate::All, vendInvoiceInfoTable.ParmId, '', vendInvoiceInfoTable.Ordering);
                purchTotals.calc();
                totalRecurrenceInvoiceAmount += CurrencyExchangeHelper::curAmount2CurAmount(purchTotals.purchTotalAmount(), vendInvoiceInfoTable.CurrencyCode, _vendRecurrenceInvoice.CurrencyCode);

                // Checks total invoice amount generated in recurrence invoice generation process and compare it with ceiling amount.
                if ((_vendRecurrenceInvoice.CeilingAmount != 0.0 && totalRecurrenceInvoiceAmount > _vendRecurrenceInvoice.CeilingAmount)
                    || (_vendRecurrenceInvoice.EndDate != dateNull() && _vendRecurrenceInvoice.EndDate < invoiceGenerationDate))
                {
                    invoiceGenerated = false;
                    _vendRecurrenceInvoice.IsStopped = NoYesCombo::Yes;
                    isRecurrenceStopped = true;

                    if (!isRecurrenceGroupFlightEnabled)
                    {
                        if (recurrenceInvoiceCounter == 1)
                        {
                            numberSeq.abort();
                            vendRecurrenceInvoiceGroup.delete();
                        }
                    }
                }

                if (!isRecurrenceStopped)
                {
                    _vendRecurrenceInvoice.LastRecurrenceGenerationDate = _recurrenceGenerationDate;

                    if (vendInvoiceInfoTable.RecId)
                    {
                        // Creates a recurrence invoice reference for pending vendor invoices.
                        recurrenceInvoiceLine.VendRecurrenceInvoiceGroup = vendRecurrenceInvoiceGroup.RecId;
                        recurrenceInvoiceLine.vendRecurrenceInvoice = _vendRecurrenceInvoice.RecId;
                        recurrenceInvoiceLine.VendInvoiceInfoTable = vendInvoiceInfoTable.RecId;
                        recurrenceInvoiceLine.RecurrenceInvoiceDate = invoiceGenerationDate;
                        recurrenceInvoiceLine.insert();

                        invoiceGenerationDate = VendRecurrenceInvoice::recurrenceInvoiceNextGenerationDate(_vendRecurrenceInvoice);
                    }

                    isRecurrenceInvoiceCreated = true;

                    recurrenceInvoiceLine.selectForUpdate(true);
                    recurrenceInvoiceLine.RecurrenceInvoicePeriodEndDate = invoiceGenerationDate - 1;
                    recurrenceInvoiceLine.update();

                    _vendRecurrenceInvoice.update();

                    invoiceGenerated = true;
                }
                else
                {
                    _vendRecurrenceInvoice.LastRecurrenceGenerationDate = _recurrenceGenerationDate;
                    _vendRecurrenceInvoice.update();
                }
            }
            else
            {
                _vendRecurrenceInvoice.IsStopped = NoYesCombo::Yes;
                _vendRecurrenceInvoice.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromVendInvoiceTemplate</Name>
				<Source><![CDATA[
    internal VendInvoiceInfoTable createFromVendInvoiceTemplate(
        VendInvoiceTemplate _vendInvoiceTemplate,
        VendTable _vendTable,
        VendRecurrenceInvoiceDefaultType _useDefaultFromVendor,
        Num num = '',
        vendRecurrenceInvoice _vendRecurrenceInvoice = null,
        TransDate _recurrenceInvoiceDate = invoiceGenerationDate)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;

        vendInvoiceInfoTable.OrderAccount = _vendTable.AccountNum;
        vendInvoiceInfoTable.Num = num;

        vendInvoiceInfoTable.initFromVendInvoiceTemplate(
                                                    _vendInvoiceTemplate,
                                                    _vendTable,
                                                    _useDefaultFromVendor,
                                                    _recurrenceInvoiceDate);
        vendInvoiceInfoTable.insert();

        //Re-read vendInvoiceInfotable table buffer to ensure that we update the latest data
        vendInvoiceInfoTable = VendInvoiceInfoTable::findRecId(vendInvoiceInfoTable.RecId, true);

        VendInvoiceInfoSubTable infoSubTable = VendInvoiceInfoSubTable::createFromVendInvoiceInfoTable(vendInvoiceInfoTable, true);
        VendInvoiceTableMarkupTransTemplate vendInvoiceTableMarkupTransTemplate;

        while select vendInvoiceTableMarkupTransTemplate
            where vendInvoiceTableMarkupTransTemplate.TransRecId == _vendInvoiceTemplate.RecId
                && vendInvoiceTableMarkupTransTemplate.TransTableId == _vendInvoiceTemplate.TableId
        {
            vendInvoiceInfoTable.insertMarkupTransForHeaderFromTemplate(infoSubTable, vendInvoiceTableMarkupTransTemplate);
        }

        VendInvoiceInfoLine vendInvoiceInfoLine;
        VendInvoiceLineTemplate vendInvoiceLineTemplate;
        
        // Creates pending vendor invoice lines by using vendor invoice line template.
        while select vendInvoiceLineTemplate
            where vendInvoiceLineTemplate.VendInvoiceTemplate == _vendInvoiceTemplate.RecId
        {
            vendInvoiceInfoLine.clear();
 
            vendInvoiceInfoLine.insertFromVendInvoiceLineTemplate(vendInvoiceLineTemplate,
                                                                vendInvoiceInfoTable,
                                                                _vendTable,
                                                                 _useDefaultFromVendor);
        }

        VendInvoiceInfoTable::moveFromActiveToSaved(vendInvoiceInfoTable);

        return vendInvoiceInfoTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitToSourceDocument</Name>
				<Source><![CDATA[
    private void submitToSourceDocument(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        boolean isSubmitSourceDocumentLinesForHeader = false;
        VendParameters vendParameters = VendParameters::find();

        isSubmitSourceDocumentLinesForHeader =
            _vendInvoiceInfoTable.RequestStatus == VendInvoiceRequestStatus::Draft
            && vendParameters.editCalculateInvoiceTotal()
            && _vendInvoiceInfoTable.ParmJobStatus != ParmJobStatus::Executed;

        if (isSubmitSourceDocumentLinesForHeader)
        {
            SourceDocumentProcessorFacade::submitSourceDocumentLinesForHeader(_vendInvoiceInfoTable, SourceDocumentLineAccountingStatus::FullyDistributed);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendRecurrenceInvoiceGroup</Name>
				<Source><![CDATA[
    private void createVendRecurrenceInvoiceGroup(TransDate _recurrenceInvoiceDate,
                                                  TransDate _recurrenceGenerationDate)
    {
        numberSeq = NumberSeq::newGetNum(VendParameters::numRefVendRecurringInvoice());
        vendRecurrenceInvoiceGroup.RecurrenceInvoiceId = numberSeq.num();
        vendRecurrenceInvoiceGroup.GenerationDate = _recurrenceGenerationDate;
        vendRecurrenceInvoiceGroup.InvoiceDate = _recurrenceInvoiceDate;
        vendRecurrenceInvoiceGroup.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateInvoices</Name>
				<Source><![CDATA[
    public void generateInvoices(VendRecurrenceInvoiceDataContract _vendRecurrenceInvoiceDataContract)
    {
        container packedQuery = SysOperationHelper::base64Decode(_vendRecurrenceInvoiceDataContract.parmQueryVendRecurrenceInvoice());
        Query query = new Query(packedQuery);
        QueryRun queryRun;
        VendRecurrenceInvoice vendRecurrenceInvoice;

        boolean processHasSuccessfulInvoice = false;
        int infoLogLine;
        boolean processHasInvoiceError = false;

        #OCCRetryCount

        try
        {
            isRecurrenceGroupCreated = false;
            stopProcess = false;
            
            this.queryBuildUpdate(query, _vendRecurrenceInvoiceDataContract.parmVendInvoiceTemplateName());
            ttsbegin;

            queryRun = new QueryRun(query);

            while (queryRun.next() && !stopProcess)
            {
                vendTable = queryRun.get(tableNum(VendTable));


                if (!vendTable.Blocked)
                {
                    if (queryRun.changed(tableNum(VendInvoiceTemplate)))
                    {
                        vendInvoiceTemplate = queryRun.get(tableNum(VendInvoiceTemplate));
                    }

                    if (queryRun.changed(tableNum(VendRecurrenceInvoice)))
                    {
                        vendRecurrenceInvoice = queryRun.get(tableNum(VendRecurrenceInvoice));
                        invoiceGenerationDate = VendRecurrenceInvoice::recurrenceInvoiceNextGenerationDate(vendRecurrenceInvoice);
                        this.createVendRecurrenceInvoice(_vendRecurrenceInvoiceDataContract.parmRecurrenceInvoiceDate(),
                                                        _vendRecurrenceInvoiceDataContract.parmRecurrenceGenerationDate(),
                                                        vendRecurrenceInvoice);
                    }
                }
            }

            if (isRecurrenceInvoiceCreated)
            {
                info(strFmt("@SYS318914", vendRecurrenceInvoiceGroup.RecurrenceInvoiceId));
            }
            else
            {
                if (isRecurrenceGroupFlightEnabled)
                {
                    if (numberSeq)
                    {
                        numberSeq.abort();
                    }

                    if (vendRecurrenceInvoiceGroup)
                    {
                        vendRecurrenceInvoiceGroup.delete();
                    }
                }

                info("@SYS318903");
            }
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceGenerationDate</Name>
				<Source><![CDATA[
    public TransDate parmInvoiceGenerationDate(TransDate _invoiceGenerationDate = invoiceGenerationDate)
    {
        invoiceGenerationDate = _invoiceGenerationDate;
        return invoiceGenerationDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuildUpdate</Name>
				<Source><![CDATA[
    protected QueryBuildRange queryBuildUpdate(Query _query, str _vendInvoiceTemplateName)
    {
        _query.dataSourceTable(tableNum(VendInvoiceTemplate)).enabled(true);
        _query.dataSourceTable(tableNum(VendRecurrenceInvoice)).enabled(true);

        if (_vendInvoiceTemplateName)
        {
            str selectedVendInvoiceTemplateNames = strReplace(_vendInvoiceTemplateName, #SEMICOLON, #COMMA);
            SysQuery::findOrCreateRange(_query.dataSourceTable(tableNum(VendInvoiceTemplate)), fieldNum(VendInvoiceTemplate,TemplateName)).value(selectedVendInvoiceTemplateNames);
        }

        QueryBuildRange rangeIsStopped;
        rangeIsStopped = _query.dataSourceTable(tableNum(VendRecurrenceInvoice)).addRange(fieldNum(VendRecurrenceInvoice, IsStopped));
        rangeIsStopped.value(SysQuery::value(NoYesCombo::No));
        rangeIsStopped.status(RangeStatus::Hidden);

        return rangeIsStopped;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>