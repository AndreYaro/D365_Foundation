<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetTransactionReversal_PartTakeDown</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetTransactionReversal_PartTakeDown extends RAssetTransactionReversal
{
    RDeferralsBook          deferralsBook;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>blockDeferrals</Name>
				<Source><![CDATA[
    protected void blockDeferrals()
    {
        RDeferralsTransactionReversal deferralsTransReversal;
        RDeferralsTrans               deferralsTrans;
    
        if (deferralsBook.RecId)
        {
            deferralsBook.Depreciate = NoYes::Yes;
            deferralsBook.doUpdate();
        }
    
        deferralsTrans = RDeferralsTrans::findLastType(deferralsBook.DeferralsId,
                                                       deferralsBook.DeferralsBookId,
                                                       RDeferralsTransType::Receipt,
                                                       false);
        if (deferralsTrans)
        {
            deferralsTransReversal = RDeferralsTransactionReversal::construct(deferralsTrans);
            deferralsTransReversal.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    protected boolean check()
    {
        boolean ret;

        ret = super();

        ret = this.checkDeferrals();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDeferrals</Name>
				<Source><![CDATA[
    protected boolean checkDeferrals()
    {
        ;

        if (rAssetParameters.StandardIdDefault    != rAssetStandards.AssetStandardId &&
            rAssetParameters.StandardTaxIdDefault != rAssetStandards.AssetStandardId)
            return true;

        select firstonly forupdate deferralsBook
            where deferralsBook.Voucher   == rAssetTrans.Voucher &&
                  deferralsBook.TransDate == rAssetTrans.TransDate;

        if (deferralsBook.RecId &&
            (deferralsBook.Status != RDeferralsStatus::Open ||
             deferralsBook.LastDeferralsDate))
        {
            return checkFailed("@GLS116990");
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventReversal</Name>
				<Source><![CDATA[
    protected void inventReversal()
    {
        this.reverseScraps();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseRAssetTrans</Name>
				<Source><![CDATA[
    protected void reverseRAssetTrans()
    {
        RAssetTrans     stornoTrans, rassetTransLink;
    
        void createStorno(RAssetTrans _original)
        {
            stornoTrans.data(_original);
            stornoTrans.TransDate            = reversalDate;
            stornoTrans.AmountCur            = -_original.AmountCur;
            stornoTrans.AmountMST            = -_original.AmountMST;
            stornoTrans.AttachDocumentDate   = dateNull();
            stornoTrans.AttachDocumentNumber = "";
            stornoTrans.Txt                  = "@GLS105217" + "@SYS35675" + _original.Txt;
            stornoTrans.StornoRecId          = _original.RecId;
            stornoTrans.insert();
            _original.StornoRecId            = stornoTrans.RecId;
            _original.doUpdate();
        }
        ;
    
        select firstonly forupdate rassetTransLink
            where rassetTransLink.AccountNum  == rAssetTrans.AccountNum             &&
                  rassetTransLink.PostingType == RAssetPostingType::PartialTakeDown &&
                  rassetTransLink.Voucher     == rAssetTrans.Voucher                &&
                  rassetTransLink.TransDate   == rAssetTrans.TransDate              &&
                  rassetTransLink.RecId       != rAssetTrans.RecId;
    
        createStorno(rAssetTrans);
        transLinkReversal.createTransLink(stornoTrans);
    
        if (rassetTransLink.RecId)
        {
            createStorno(rassetTransLink);
            this.initTransLinkReversal(rassetTransLink);
            transLinkReversal.createTransLink(stornoTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    protected void updateStatus()
    {
        this.blockDeferrals();
        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>