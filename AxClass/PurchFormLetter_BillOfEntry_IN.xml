<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchFormLetter_BillOfEntry_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>PurchFormLetter_BillOfEntry_IN</c> class is used to call posting of bill of entry with invoice posting
/// </summary>
class PurchFormLetter_BillOfEntry_IN extends PurchFormLetter implements BatchRetryable
{
    CustomsVendBOEJour_IN           customsVendBOEJour;
    CustomsVendBOETrans_IN          customsVendBOETrans;
    EximEPCGImportTrans_IN          eximImportTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if can go batch journal.
    /// </summary>
    /// <returns>
    /// If 'True', the batch journal can be run.
    /// </returns>
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get caption of purchase form letter bill of entry.
    /// </summary>
    /// <returns>The description of purchase form letter bill of entry.</returns>
    public ClassDescription caption()
    {
        return PurchFormLetter_BillOfEntry_IN::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFormLetterId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check from letter id.
    /// </summary>
    /// <returns>
    /// If 'True', the check is succeed.
    /// </returns>
    public boolean checkFormLetterId()
    {
        boolean ok = true;
        PurchParmUpdate purchParmUpdate =this.purchParmUpdate();

        if ((purchParmUpdate.CustomsBillOfEntry_IN == NoYes::Yes && !purchParmUpdate.CustomsBillOfEntryNumberTable_IN) ||
            (purchParmUpdate.CustomsBillOfEntry_IN == NoYes::No  && !this.currentPurchParmTable().vendDocumentTableMap::parmCustomsBillOfEntryNumberTable_IN()))
        {
            ok = checkFailed(strfmt(this.missingNumber(), this.currentPurchParmTable().PurchId));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseLinesServerBOE</Name>
				<Source><![CDATA[
    /// <summary>
    ///    create the purchFormLetterparmDataBOE_IN class.
    /// </summary>
    /// <param name="_append">
    ///    The _append to the existing query.
    /// </param>
    /// <returns>
    /// A purchParmTableContainer container.
    /// </returns>
    Public container chooseLinesServerBOE(boolean _append = false)
    {
        container purchParmTableContainer;
        purchParmTableContainer = [parmTable];

        return PurchFormletterParmDataBOE_IN::chooseLinesServerBOE(this.packDataContract(purchFormLetterContract),
                                                                   _append,
                                                                   purchParmTableContainer,
                                                                   false,
                                                                   false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets document status.
    /// </summary>
    /// <returns>
    /// The document status.
    /// </returns>
    public DocumentStatus  documentStatus()
    {
        return DocumentStatus::BillOfEntry_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBOEParmLines_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes BOE parameter lines.
    /// </summary>
    /// <param name="_purchParmTable">
    /// The purchase parameter table.
    /// </param>
    public void initBOEParmLines_IN(PurchParmTable _purchParmTable)
    {
        container               outputContainer;
        this.parmProcessAdditional(false); // parameter is packed

        parmTable  = _purchParmTable;
        outputContainer = this.chooseLinesServerBOE();

        this.getValuesFormletterParmData(this.unpackFormletterParmDataOutputContract(outputContainer));
    }

]]></Source>
			</Method>
			<Method>
				<Name>journal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the customs vend BOE journal information.
    /// </summary>
    /// <returns>
    /// The instance of the <c>CustomsVendBOEJour_IN</c> class.
    /// </returns>
    public CustomsVendBOEJour_IN journal()
    {
        return customsVendBOEJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>missingNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the missing number label.
    /// </summary>
    /// <returns>
    /// The missing number label.
    /// </returns>
    public str  missingNumber()
    {
        return "@GLS5650";
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustPrintInAfterOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether printing must happen in the after operation instead of in the service.
    /// </summary>
    /// <returns>
    /// false as the fdefault printing is not there for BOE..
    /// </returns>
    protected boolean mustPrintInAfterOperation()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Print journal.
    /// </summary>
    /// <param name="_journalList">
    /// The journal list.
    /// </param>
    public void printJournal(Set _journalList = null)
    {
        // Abstract method overridden to avoid compile error.
        // At present no report for Bill of entry.
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printMgmtDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies the print management document type.
    /// </summary>
    /// <returns>
    /// The print management document type for purchase order bill 0f entry.
    /// </returns>
    protected PrintMgmtDocumentType printMgmtDocumentType()
    {
        return PrintMgmtDocumentType::PurchaseOrderInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeProforma</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes pro formula.
    /// </summary>
    public void  removeProforma()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>specQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specify quantity.
    /// </summary>
    /// <param name="_specQty">
    /// The specified quantity.
    /// </param>
    /// <returns>
    /// The instance of the <c>PurchUpdate</c> class.
    /// </returns>
    public PurchUpdate specQty(PurchUpdate  _specQty = PurchUpdate::All)
    {
        PurchParmUpdate purchParmUpdateLoc;

        purchParmUpdateLoc = this.purchParmUpdate();
        purchParmUpdateLoc.SpecQty = _specQty;
        return purchParmUpdateLoc.SpecQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    private static ClassDescription  description()
    {
        return "@GLS5767";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBillOfEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new bill of entry.
    /// </summary>
    /// <param name="_className">
    /// The class name.
    /// </param>
    /// <param name="_methodName">
    /// The method name.
    /// </param>
    /// <param name="_executionMode">
    /// The execution mode.
    /// </param>
    /// <returns>
    /// The instance of the <c>PurchFormLetter_BillOfEntry_IN</c> class.
    /// </returns>
    public static PurchFormLetter_BillOfEntry_IN newBillOfEntry(
        identifierName _className  = classstr(FormletterService),
        identifierName _methodName = methodstr(FormletterService, postPurchaseOrderBOE_IN),
        SysOperationExecutionMode _executionMode = SysOperationExecutionMode::Synchronous)
    {
        PurchFormLetter_BillOfEntry_IN formLetter = new PurchFormLetter_BillOfEntry_IN (_className, _methodName, _executionMode);
        formLetter.init();
        return formLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeShowLink</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean errorMessageHelpScopeShowLink()
    {
        if (PurchFormLetterErrorMessageHelpScopeBillOfEntryFlight::instance().isEnabled())
        {
            return super();
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>