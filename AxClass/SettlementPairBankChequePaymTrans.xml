<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SettlementPairBankChequePaymTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class SettlementPairBankChequePaymTrans
{
    // Map used for record the bankChequePaymTrans related information
    // Key: RecId of custVendTrans (payment)
    // Value: Inner Map used for cache
    //      Key: RecId of custVendTrans (invoice)
    //      Value: BankChequePaymTrans
    private Map bankChequePaymTransOfInvoicesByPaymentTransRecIdMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal void new()
    {
        bankChequePaymTransOfInvoicesByPaymentTransRecIdMap = new Map(Types::Int64, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAllBankChequePaymTrans</Name>
				<Source><![CDATA[
    internal void insertAllBankChequePaymTrans()
    {
        if (!bankChequePaymTransOfInvoicesByPaymentTransRecIdMap || !bankChequePaymTransOfInvoicesByPaymentTransRecIdMap.elements())
        {
            return;
        }

        MapEnumerator bankChequePaymTransOfInvoicesByPaymentTransRecIdEnumerator = bankChequePaymTransOfInvoicesByPaymentTransRecIdMap.getEnumerator();
        while (bankChequePaymTransOfInvoicesByPaymentTransRecIdEnumerator.moveNext())
        {
            Map bankChequePaymTransByInvoiceRecIdMap = bankChequePaymTransOfInvoicesByPaymentTransRecIdEnumerator.currentValue();

            if (!bankChequePaymTransByInvoiceRecIdMap || !bankChequePaymTransByInvoiceRecIdMap.elements())
            {
                continue;
            }

            MapEnumerator bankChequePaymTransByInvoiceRecIdEnumerator = bankChequePaymTransByInvoiceRecIdMap.getEnumerator();

            while (bankChequePaymTransByInvoiceRecIdEnumerator.moveNext())
            {
                BankChequePaymTrans bankChequePaymTrans = bankChequePaymTransByInvoiceRecIdEnumerator.currentValue();

                changecompany(bankChequePaymTrans.DataAreaId)
                {
                    bankChequePaymTrans.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addBankChequePaymTrans</Name>
				<Source><![CDATA[
    internal void addBankChequePaymTrans(
        SettlementPair _settlementPair,
        AmountCur _settleAmountCurDebit,
        AmountCur _settleAmountCurCredit,
        DiscAmount _cashDiscAmountCurCreditToDebit,
        DiscAmount _cashDiscAmountCurDebitToCredit)
    {
        BankChequePaymTrans bankChequePaymTrans;
        LedgerJournalTrans ledgerJournalTransPayment;
        BankAccountID bankAccountId;
        CustVendTrans custVendTransInvoice;
        CustVendTrans custVendTransPayment;

        if (_settlementPair.getCustVendTransCredit().TableId == tableNum(CustTrans))
        {
            changecompany(_settlementPair.getDebitCompany())
            {
                custVendTransInvoice = _settlementPair.getCustVendTransCredit();
                custVendTransPayment = _settlementPair.getCustVendTransDebit();
                AmountCur settleAmountCur = _settleAmountCurDebit;
                CashDiscAmount cashDiscAmountCur = _cashDiscAmountCurCreditToDebit;

                ledgerJournalTransPayment = this.findLedgerJournalTransByCustVendTransOrSpecTrans(custVendTransPayment, _settlementPair.getSpecTransCredit());
                
                bankAccountId = BankChequeTable::findByLedgerJournalTrans(
                    ledgerJournalTransPayment.BankChequeNum,
                    ledgerJournalTransPayment.RecId,
                    ledgerJournalTransPayment.OffsetCompany).AccountID;

                if (!ledgerJournalTransPayment.OffsetCompany || !ledgerJournalTransPayment.BankChequeNum || !bankAccountId)
                {
                    return;
                }

                // If is settle in Payment Journal
                // Update the transaction of payment and invoice
                // Delete the origin BankChequePaymTrans which is inserted during payment generation
                if (this.isSettleInCustVendPayment(_settlementPair.getSpecTransCredit()))
                {
                    custVendTransInvoice = _settlementPair.getCustVendTransDebit();
                    custVendTransPayment = _settlementPair.getCustVendTransCredit();
                    settleAmountCur = _settleAmountCurCredit;
                    cashDiscAmountCur = _cashDiscAmountCurDebitToCredit;

                    BankChequePaymTrans::deleteByLedgerJournalTransCustVendTrans(ledgerJournalTransPayment, custVendTransInvoice, bankAccountId);
                }

                changecompany(ledgerJournalTransPayment.OffsetCompany)
                {
                    bankChequePaymTrans = BankChequePaymTrans::createBankChequePaymTrans(ledgerJournalTransPayment, bankAccountId, custVendTransInvoice, -settleAmountCur, -cashDiscAmountCur);

                    bankChequePaymTrans.RecipientType = BankChequeRecipientType::Cust;
                    bankChequePaymTrans.InvoiceAmountCur = custVendTransInvoice.AmountCur;
                    bankChequePaymTrans.InvoiceDate = custVendTransInvoice.DocumentDate ? custVendTransInvoice.DocumentDate : custVendTransInvoice.TransDate;

                    this.addPair(custVendTransInvoice.RecId, custVendTransPayment.RecId, bankChequePaymTrans);
                }
            }
        }
        else
        {
            changecompany(_settlementPair.getCreditCompany())
            {
                custVendTransInvoice = _settlementPair.getCustVendTransDebit();
                custVendTransPayment = _settlementPair.getCustVendTransCredit();

                ledgerJournalTransPayment = this.findLedgerJournalTransByCustVendTransOrSpecTrans(_settlementPair.getCustVendTransCredit(), _settlementPair.getSpecTransDebit());

                bankAccountId = BankChequeTable::findByLedgerJournalTrans(
                    ledgerJournalTransPayment.BankChequeNum,
                    ledgerJournalTransPayment.RecId,
                    ledgerJournalTransPayment.OffsetCompany).AccountID;

                if (!ledgerJournalTransPayment.OffsetCompany || !ledgerJournalTransPayment.BankChequeNum || !bankAccountId)
                {
                    return;
                }

                // Delete the origin BankChequePaymTrans which is inserted during payment generation
                if (this.isSettleInCustVendPayment(_settlementPair.getSpecTransDebit()))
                {
                    BankChequePaymTrans::deleteByLedgerJournalTransCustVendTrans(ledgerJournalTransPayment, custVendTransInvoice, bankAccountId);
                }

                changecompany(ledgerJournalTransPayment.OffsetCompany)
                {
                    bankChequePaymTrans = BankChequePaymTrans::createBankChequePaymTrans(ledgerJournalTransPayment, bankAccountId, custVendTransInvoice, _settleAmountCurCredit, _cashDiscAmountCurDebitToCredit);

                    bankChequePaymTrans.RecipientType = BankChequeRecipientType::Vend;
                    bankChequePaymTrans.RemittanceAddress = ledgerJournalTransPayment.RemittanceAddress;

                    bankChequePaymTrans.InvoiceAmountCur = -custVendTransInvoice.AmountCur;
                    bankChequePaymTrans.InvoiceDate = custVendTransInvoice.documentInvoiceDate();
                    bankChequePaymTrans.VendPaymentGroup = custVendTransInvoice.VendPaymentGroup;

                    this.addPair(custVendTransInvoice.RecId, custVendTransPayment.RecId, bankChequePaymTrans);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankChequePaymTrans</Name>
				<Source><![CDATA[
    internal void updateBankChequePaymTrans(
        RecId _custVendTransInvoiceRecId,
        RecId _custVendTransPaymentRecId,
        AmountCur _settleAmountCur,
        CashDiscAmount _settleCashDiscAmount)
    {
        BankChequePaymTrans bankChequePaymTrans = this.retrieveBankChequePaymTrans(_custVendTransInvoiceRecId, _custVendTransPaymentRecId);
        if (bankChequePaymTrans.DataAreaId)
        {
            bankChequePaymTrans.PaymentAmountCur += _settleAmountCur;
            bankChequePaymTrans.CashDiscAmountCur -= _settleCashDiscAmount;
                
            this.addPair(_custVendTransInvoiceRecId, _custVendTransPaymentRecId, bankChequePaymTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPair</Name>
				<Source><![CDATA[
    private void addPair(
        RecId _custVendTransInvoiceRecId,
        RecId _custVendTransPaymentRecId,
        BankChequePaymTrans _bankChequePaymTrans)
    {
        if (bankChequePaymTransOfInvoicesByPaymentTransRecIdMap.exists(_custVendTransPaymentRecId))
        {
            Map bankChequePaymTransByInvoiceRecId = bankChequePaymTransOfInvoicesByPaymentTransRecIdMap.lookup(_custVendTransPaymentRecId);
            
            bankChequePaymTransByInvoiceRecId.insert(_custVendTransInvoiceRecId, _bankChequePaymTrans);
        }
        else
        {
            Map bankChequePaymTransByInvoiceRecId = new Map(Types::Int64, Types::Record);

            bankChequePaymTransByInvoiceRecId.insert(_custVendTransInvoiceRecId, _bankChequePaymTrans);
            bankChequePaymTransOfInvoicesByPaymentTransRecIdMap.insert(_custVendTransPaymentRecId, bankChequePaymTransByInvoiceRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveBankChequePaymTrans</Name>
				<Source><![CDATA[
    internal BankChequePaymTrans retrieveBankChequePaymTrans(RecId _custVendTransInvoiceRecId, RecId _custVendTransPaymentRecId)
    {
        BankChequePaymTrans bankChequePaymTrans;

        if (bankChequePaymTransOfInvoicesByPaymentTransRecIdMap.exists(_custVendTransPaymentRecId))
        {
            Map bankChequePaymTransByInvoiceRecId = bankChequePaymTransOfInvoicesByPaymentTransRecIdMap.lookup(_custVendTransPaymentRecId);
            
            if (bankChequePaymTransByInvoiceRecId.exists(_custVendTransInvoiceRecId))
            {
                bankChequePaymTrans = bankChequePaymTransByInvoiceRecId.lookup(_custVendTransInvoiceRecId);
            }
        }
        return bankChequePaymTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLedgerJournalTransByCustVendTransOrSpecTrans</Name>
				<Source><![CDATA[
    private LedgerJournalTrans findLedgerJournalTransByCustVendTransOrSpecTrans(CustVendTrans _custVendTransPayment, SpecTrans _specTrans)
    {
        LedgerJournalTrans ledgerJournalTrans = LedgerJournalTrans::findByCustVendTrans(_custVendTransPayment);

        // If the settle is in payment journal, then the payment journal is not posted yet.
        // find the ledgerJournalTrans according to specTrans
        if (!ledgerJournalTrans && this.isSettleInCustVendPayment(_specTrans))
        {
            ledgerJournalTrans = LedgerJournalTrans::findByRefAndDataArea(_specTrans.SpecCompany, _specTrans.SpecRecId);
        }

        if (ledgerJournalTrans.OffsetCompany && ledgerJournalTrans.isCompanyIntercompany(ledgerJournalTrans.OffsetCompany))
        {
            ledgerJournalTrans = LedgerJournalTrans::findIntercompanyPaymentFromOperating(ledgerJournalTrans);
        }

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSettleInCustVendPayment</Name>
				<Source><![CDATA[
    private boolean isSettleInCustVendPayment(SpecTrans _specTrans)
    {
        if (_specTrans.SpecTableId != tableNum(LedgerJournalTrans))
        {
            return false;
        }

        LedgerJournalTrans ledgerJournalTrans = LedgerJournalTrans::findByRefAndDataArea(_specTrans.SpecCompany, _specTrans.SpecRecId);

        return ledgerJournalTrans.TransactionType == LedgerTransType::Payment && ledgerJournalTrans.BankChequeNum;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>