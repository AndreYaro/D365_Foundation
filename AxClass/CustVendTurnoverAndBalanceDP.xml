<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendTurnoverAndBalanceDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustVendTurnoverAndBalanceDP</c> class is the data provider class for the
/// <c>CustVendTurnoverAndBalance</c> report.
/// </summary>
[SRSReportQueryAttribute(querystr(CustVendTurnoverAndBalance)),
    SRSReportParameterAttribute(classstr(CustVendTurnoverAndBalanceContract))]
public class CustVendTurnoverAndBalanceDP extends SRSReportDataProviderPreProcessTempDB
{
    CustVendTurnoverAndBalanceTmp custVendTurnoverAndBalanceTmp;
    AmountMST runningTotalOpeningBalanceDebit;
    AmountMST runningTotalOpeningBalanceCredit;
    AmountMST runningTurnoverInPeriodDebit;
    AmountMST runningTurnoverInPeriodCredit;
    AmountMST runningClosingBalanceDebit;
    AmountMST runningClosingBalanceCredit;
    AmountMST runningTurnoverInPeriodInclOpenBalDebit;
    AmountMST runningTurnoverInPeriodInclOpenBalCredit;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateOpeningBalance</Name>
				<Source><![CDATA[
    private AmountMST calculateOpeningBalance(CustVendTrans _custVendTrans)
    {
        AmountMST amountMST;

        if (_custVendTrans.TransType == LedgerTransType::ExchAdjustment)
        {
            amountMST = _custVendTrans.AmountMST;
        }
        else
        {
            amountMST = _custVendTrans.AmountMST - _custVendTrans.SettleAmountMST;
        }

        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTurnoverAndBalanceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Queries the <c>CustVendTurnoverAndBalanceTmp</c> table and retrieves the data table.
    /// </summary>
    /// <returns>
    ///    The required report data table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(CustVendTurnoverAndBalanceTmp))
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CustVendTurnoverAndBalanceTmp getCustVendTurnoverAndBalanceTmp()
    {
        select custVendTurnoverAndBalanceTmp;
        return custVendTurnoverAndBalanceTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustVendTurnoverAndBalanceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records into the <c>CustVendTurnoverAndBalanceTmp</c> table.
    /// </summary>
    /// <param name="_tmpSum">
    /// A <c>TmpSum</c> record that contains balance information.
    /// </param>
    /// <param name="_custVendTable">
    /// A <c>CustVendTable</c> record.
    /// </param>
    private void insertCustVendTurnoverAndBalanceTmp(TmpSum _tmpSum, CustVendTable _custVendTable)
    {
        custVendTurnoverAndBalanceTmp.AccountNum = _custVendTable.AccountNum;
        custVendTurnoverAndBalanceTmp.Name = _custVendTable.name();
        custVendTurnoverAndBalanceTmp.PostingProfile = _tmpSum.Key;
        custVendTurnoverAndBalanceTmp.OpeningBalanceDebit = _tmpSum.Balance01;
        custVendTurnoverAndBalanceTmp.OpeningBalanceCredit = _tmpSum.Balance02;
        custVendTurnoverAndBalanceTmp.TurnoverInPeriodDebit = _tmpSum.Balance03;
        custVendTurnoverAndBalanceTmp.TurnoverInPeriodCredit = _tmpSum.Balance04;
        custVendTurnoverAndBalanceTmp.ClosingBalanceDebit = _tmpSum.Balance05;
        custVendTurnoverAndBalanceTmp.ClosingBalanceCredit = _tmpSum.Balance06;
        custVendTurnoverAndBalanceTmp.TurnoverPeriodInclOpenBalDebit = _tmpSum.Balance07;
        custVendTurnoverAndBalanceTmp.TurnoverPeriodInclOpenBalCredit = _tmpSum.Balance08;
        custVendTurnoverAndBalanceTmp.BalanceOfPeriod = _tmpSum.Balance09;

        if (_custVendTable.TableId == tablenum(CustTable))
        {
            custVendTurnoverAndBalanceTmp.SummaryAccountNumber = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(CustLedgerAccounts::summaryLedgerDimension(_custVendTable.AccountNum, _tmpSum.Key));
        }
        else
        {
            custVendTurnoverAndBalanceTmp.SummaryAccountNumber = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(VendLedgerAccounts::summaryLedgerDimension(_custVendTable.AccountNum, _tmpSum.Key));
        }

        // The previous record's running totals must be stored on each record because those totals may need
        // to be shown at the top of a report page as totals "carried over" from the last page.

        custVendTurnoverAndBalanceTmp.PrevRunningTotalOpeningBalanceDebit = runningTotalOpeningBalanceDebit;
        runningTotalOpeningBalanceDebit = runningTotalOpeningBalanceDebit + custVendTurnoverAndBalanceTmp.OpeningBalanceDebit;
        custVendTurnoverAndBalanceTmp.RunningTotalOpeningBalanceDebit = runningTotalOpeningBalanceDebit;

        custVendTurnoverAndBalanceTmp.PrevRunningTotalOpeningBalanceCredit = runningTotalOpeningBalanceCredit;
        runningTotalOpeningBalanceCredit = runningTotalOpeningBalanceCredit + custVendTurnoverAndBalanceTmp.OpeningBalanceCredit;
        custVendTurnoverAndBalanceTmp.RunningTotalOpeningBalanceCredit = runningTotalOpeningBalanceCredit;

        custVendTurnoverAndBalanceTmp.PrevRunningTotalTurnoverInPeriodDebit = runningTurnoverInPeriodDebit;
        runningTurnoverInPeriodDebit = runningTurnoverInPeriodDebit + custVendTurnoverAndBalanceTmp.TurnoverInPeriodDebit;
        custVendTurnoverAndBalanceTmp.RunningTotalTurnoverInPeriodDebit = runningTurnoverInPeriodDebit;

        custVendTurnoverAndBalanceTmp.PrevRunningTotalTurnoverPeriodCredit = runningTurnoverInPeriodCredit;
        runningTurnoverInPeriodCredit = runningTurnoverInPeriodCredit + custVendTurnoverAndBalanceTmp.TurnoverInPeriodCredit;
        custVendTurnoverAndBalanceTmp.RunningTotalTurnoverPeriodCredit = runningTurnoverInPeriodCredit;

        custVendTurnoverAndBalanceTmp.PrevRunningTotalClosingBalanceDebit = runningClosingBalanceDebit;
        runningClosingBalanceDebit = runningClosingBalanceDebit + custVendTurnoverAndBalanceTmp.ClosingBalanceDebit;
        custVendTurnoverAndBalanceTmp.RunningTotalClosingBalanceDebit = runningClosingBalanceDebit;

        custVendTurnoverAndBalanceTmp.PrevRunningTotalClosingBalanceCredit = runningClosingBalanceCredit;
        runningClosingBalanceCredit = runningClosingBalanceCredit + custVendTurnoverAndBalanceTmp.ClosingBalanceCredit;
        custVendTurnoverAndBalanceTmp.RunningTotalClosingBalanceCredit = runningClosingBalanceCredit;

        custVendTurnoverAndBalanceTmp.PrevRunTotalTurnoverPeriodInclOpenBalDB = runningTurnoverInPeriodInclOpenBalDebit;
        runningTurnoverInPeriodInclOpenBalDebit = runningTurnoverInPeriodInclOpenBalDebit + custVendTurnoverAndBalanceTmp.TurnoverPeriodInclOpenBalDebit;
        custVendTurnoverAndBalanceTmp.RunningTotalTurnoverPeriodInclOpenBalDB = runningTurnoverInPeriodInclOpenBalDebit;

        custVendTurnoverAndBalanceTmp.PrevRunTotalTurnoverPeriodInclOpenBalCR = runningTurnoverInPeriodInclOpenBalCredit;
        runningTurnoverInPeriodInclOpenBalCredit = runningTurnoverInPeriodInclOpenBalCredit + custVendTurnoverAndBalanceTmp.TurnoverPeriodInclOpenBalCredit;
        custVendTurnoverAndBalanceTmp.RunningTotalTurnoverPeriodInclOpenBalCR = runningTurnoverInPeriodInclOpenBalCredit;

        custVendTurnoverAndBalanceTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic for the <c>CustVendTurnoverAndBalance</c> report.
    /// </summary>
    public void processReport()
    {
        Query           query;
        QueryRun        queryRun;
        TransDate       dateFrom, dateTo;
        CustTable       custTable;
        VendTable       vendTable;
        CustVendTrans   custVendTrans, localTrans;
        CustVendTable   custVendTable;
        CustTrans       custTrans;
        VendTrans       vendTrans;
        TmpSum          tmpSum;
        ModuleCustVend  moduleCustVend;
        CustVendTurnoverAndBalanceContract contract;

        contract = this.parmDataContract() as CustVendTurnoverAndBalanceContract;

        dateTo = contract.parmToDate();
        dateFrom = contract.parmFromDate();
        moduleCustVend = contract.parmModuleCustVend();

        query = this.parmQuery();

        if (moduleCustVend == ModuleCustVend::Vend)
        {
            SysQuery::findOrCreateDataSource(query, tableNum(CustTable)).enabled(false);
            custVendTable = vendTable;
            custVendTrans = vendTrans;
        }
        else
        {
            SysQuery::findOrCreateDataSource(query, tableNum(VendTable)).enabled(false);
            custVendTable = custTable;
            custVendTrans = custTrans;
        }

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            delete_from tmpSum;

            custVendTable = queryRun.get(custVendTable.TableId);

            while select custVendTrans
                where custVendTrans.AccountNum == custVendTable.AccountNum &&
                      custVendTrans.TransDate  <= dateTo
            {
                select firstonly forupdate tmpSum
                    where tmpSum.Key == custVendTrans.PostingProfile;

                tmpSum.Key = custVendTrans.PostingProfile;

                localTrans = custVendTrans.data();

                if (custVendTrans.TransDate < dateFrom)
                {
                    // Calculate the Opening balances. Seperate the debit and credit amounts.
                    // The Opening balances do not include amounts that have not been settled by the start date.

                    custVendTrans.transactionPerDate(dateFrom - 1);

                    if ((custVendTrans.AmountMST > 0 && !custVendTrans.Correct) ||
                        (custVendTrans.AmountMST < 0 && custVendTrans.Correct))
                    {
                        tmpSum.Balance01 += this.calculateOpeningBalance(custVendTrans);  //Opening balance - Debit
                    }
                    else
                    {
                        tmpSum.Balance02 -= this.calculateOpeningBalance(custVendTrans);  //Opening balance - Credit
                    }
                }
                else
                {
                    // Calculate the Turnover amount balances. Calculate seperate debit and credit amounts.

                    if ((custVendTrans.AmountMST > 0 && !custVendTrans.Correct) ||
                        (custVendTrans.AmountMST < 0 && custVendTrans.Correct))
                    {
                        tmpSum.Balance03 += custVendTrans.AmountMST;  //Turnover in period - Debit
                    }
                    else
                    {
                        tmpSum.Balance04 -= custVendTrans.AmountMST;  //Turnover in period - Credit
                    }
                }

                localTrans.transactionPerDate(dateTo);

                // Calculate the Closing balances. Seperate the debit and credit amounts.
                // The Closing balances do not include amounts that have not been settled by the end date.

                if ((localTrans.AmountMST > 0 && !localTrans.Correct) ||
                    (localTrans.AmountMST < 0 && localTrans.Correct))
                {
                    tmpSum.Balance05 += localTrans.remainAmountMST();  //Closing balance - Debit
                }
                else
                {
                    tmpSum.Balance06 -= localTrans.remainAmountMST();  //Closing balance - Credit
                }

                tmpSum.Balance07 = tmpSum.Balance01 + tmpSum.Balance03;  // Turnover in period + Opening balance (Debit)
                tmpSum.Balance08 = tmpSum.Balance02 + tmpSum.Balance04;  // Turnover in period + Opening balance (Credit)
                tmpSum.Balance09 = tmpSum.Balance05 - tmpSum.Balance06;  // BalanceOfPeriod
                tmpSum.write();
            }

            while select tmpSum
            {
                this.insertCustVendTurnoverAndBalanceTmp(tmpSum, custVendTable);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>