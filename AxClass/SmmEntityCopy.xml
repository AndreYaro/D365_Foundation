<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmmEntityCopy</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class SmmEntityCopy extends RunBase
{
    DialogRunbase   dialog;
    DialogGroup     dialogGroup;
    DialogGroup     dialogParty;

    DialogField fieldActivities;
    DialogField fieldDocuments;
    DialogField fieldResponsibilities;
    DialogField fieldCampaigns;
    DialogField fieldContacts;
    DialogField fieldProjects;
    DialogField fieldParty;

    smmIncludeActivities        includeActivities;
    smmIncludeDocuments         includeDocuments;
    smmIncludeResponsibilities  includeResponsibilities;
    smmIncludeCampaigns         includeCampaigns;
    smmIncludeContacts          includeContacts;
    smmIncludeProjects          includeProjects;

    smmIncludeOpportunities     includeOpportunities;
    smmIncludeLeads             includeLeads;

    smmIncludeSwotAnalysis      includeSwotAnalysis;
    smmIncludeCompetitors       includeCompetitors;

    Common                      commonOrig, commonCopy;

    fieldId                     fieldId;
    RecId                       origRecId, copyRecId;

    //showInfoLog is used to set whether the info log has to be shown or not.
    //This is currently set from EP where the infolog needs to be shown.
    boolean                     showInfoLog;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
    includeResponsibilities,
    includeCampaigns,
    includeSwotAnalysis,
    includeCompetitors,
    includeActivities,
    includeDocuments,
    includeContacts,
    includeProjects,
    includeLeads,
    includeOpportunities,
    showInfoLog
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    // Overridden to not allow batch processing
    boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    void close()
    {
        dialog.close();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyActivities</Name>
				<Source><![CDATA[
    // Copy all activities and related link records of the entity.  Generate new Activity Number.
    private void copyActivities()
    {
        smmActivities                   smmActivities, smmActivitiesCopy;
        smmActivityParentLinkTable      smmActivityParentLinkTable, smmActivityParentLinkTableCopy;

        while select smmActivities
                where !smmActivities.IsTemplate
            exists join smmActivityParentLinkTable
                where smmActivities.ActivityNumber == smmActivityParentLinkTable.ActivityNumber &&
                      smmActivityParentLinkTable.ParentType == conpeek(smmActivityParentLink::refTableId2ParentTypes(commonOrig.TableId, commonOrig), 1) &&
                      smmActivityParentLinkTable.RefRecId == commonOrig.RecId
        {
            // Create main activity record
            smmActivitiesCopy.clear();
            smmActivitiesCopy.data(smmActivities);
            // Clear the fields which should not be copied
            smmActivitiesCopy.RecId = 0;
            smmActivitiesCopy.setActivityNum();
            smmActivitiesCopy.Closed = false;
            smmActivitiesCopy.DoneByWorker = 0;
            smmActivitiesCopy.ExternalMemo = '';
            smmActivitiesCopy.OutlookEntryID = '';
            smmActivitiesCopy.OutlookGlobalObjectID = '';
            smmActivitiesCopy.ActualEndDateTime = utcDateTimeNull();
            smmActivitiesCopy.insert();

            // Associate the newly created activity
            smmActivityParentLinkTableCopy.clear();
            smmActivityParentLinkTableCopy.ParentType = conpeek(smmActivityParentLink::refTableId2ParentTypes(commonOrig.TableId, commonOrig), 1);
            smmActivityParentLinkTableCopy.RefRecId = copyRecId;
            smmActivityParentLinkTableCopy.RefTableId = commonOrig.TableId;
            smmActivityParentLinkTableCopy.ActivityNumber = smmActivitiesCopy.ActivityNumber;
            smmActivityParentLinkTableCopy.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyContacts</Name>
				<Source><![CDATA[
    // Copy all links to contacts related to the entity.
    private void copyContacts()
    {
        DirOrgPersonRelations           dirOrgPersonRelations, dirOrgPersonRelationsCopy;

        insert_recordset dirOrgPersonRelationsCopy (ContactPersonId, RelationsRefRecId, EntityRefTableId, EntityRefRecId)
            select ContactPersonId, RelationsRefRecId, EntityRefTableId
                from dirOrgPersonRelations
                where dirOrgPersonRelations.EntityRefTableId == commonOrig.TableId &&
                      dirOrgPersonRelations.EntityRefRecId == commonOrig.RecId
            join RecId from commonCopy where commonCopy.RecId == copyRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDocuments</Name>
				<Source><![CDATA[
    // Copy all documents related to the entity
    private void copyDocuments()
    {
        DocuRef docuRef, docuRefCopy;

        ttsbegin;
        while select docuRef
            where docuRef.RefTableId == DocuRef::GetRootTableID(commonOrig.TableId) &&
                  docuRef.RefRecId == commonOrig.RecId &&
                  docuRef.RefCompanyId == commonOrig.DataAreaId &&
                  docuRef.ActualCompanyId == curext()
        {
            docuRefCopy = smmEntityCopy::fileCopy(docuRef);
            if (docuRefCopy)
            {
                docuRefCopy.selectForUpdate(true);
                docuRefCopy.RefRecId = copyRecId;
                docuRefCopy.update();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyMain</Name>
				<Source><![CDATA[
    // This method will duplicate the original record and reset some fields before inserting
    final public void copyMain()
    {
        this.setMainFields();
        commonCopy.insert();

        origRecId = commonOrig.RecId;
        copyRecId = commonCopy.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyProcess</Name>
				<Source><![CDATA[
    // Initialize process from copy
    private void copyProcess()
    {
        if (!this.parmCommonCopyTable() && this.parmCopyRecId())
        {
            select commonCopy where commonCopy.RecId == this.parmCopyRecId();
        }

        if (this.canProcess())
        {
            smmProcessInstance::write(commonCopy, '', commonCopy.(this.processFieldId()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if copy will be processed.
    /// </summary>    
    /// <returns>
    /// true then the copy will be processed; otherwise, false.
    /// </returns>
    protected boolean canProcess()
    {
        return commonCopy && commonCopy.(this.processFieldId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyRecords</Name>
				<Source><![CDATA[
    // Copy main and associated records depending on the options selected by the users
    public void copyRecords()
    {
        // Create duplicate record
        this.copyMain();

        if (includeActivities)
        {
            // Copy activities
            this.copyActivities();
        }

        if (includeContacts)
        {
            // Copy contacts
            this.copyContacts();
        }

        if (includeDocuments)
        {
            // Copy documents
            this.copyDocuments();
        }

        if (includeResponsibilities)
        {
            // Copy responsibilities
            this.copyResponsibilities();
        }

        // Copy process if there is one, make sure responsibilities are copied first
        if (this.parmCommonOrigTable().(this.processFieldId()))
        {
            this.copyProcess();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyResponsibilities</Name>
				<Source><![CDATA[
    // Copy all responsibilities related to the entity.
    private void copyResponsibilities()
    {
        smmResponsibilitiesEmplTable    smmResponsibilitiesEmplTable, smmResponsibilitiesEmplTableCopy;

        insert_recordset smmResponsibilitiesEmplTableCopy (Worker, ResponsibilityId , RefTableId, RefRecId)
            select Worker, ResponsibilityId, RefTableId from smmResponsibilitiesEmplTable
                where smmResponsibilitiesEmplTable.RefTableId == commonOrig.TableId &&
                      smmResponsibilitiesEmplTable.RefRecId == commonOrig.RecId
            join RecId from commonCopy
                where commonCopy.RecId == copyRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    /// created in the Application Object Tree (AOT).
    /// </remarks>
    // Generate dialog
    public Object dialog()
    {
        dialog = super();

        dialog.alwaysOnTop(true);
        dialog.addText(strfmt("@SYS105096", fieldLabelValue(commonOrig.TableId, fieldId,commonOrig.(fieldId)))); // Select information to copy from %1.

        dialogParty = dialog.addGroup("@SYS36186"); // Identification
        dialogParty.columns(1);

        fieldContacts           =   dialog.addFieldValue(extendedTypeStr(smmIncludeContacts),        includeContacts);

        dialogGroup = dialog.addGroup("@SYS30289"); // Other
        dialogGroup.columns(3);
        dialogGroup.optionValue(1);

        fieldActivities         =   dialog.addFieldValue(extendedTypeStr(smmIncludeActivities),      includeActivities);
        fieldDocuments          =   dialog.addFieldValue(extendedTypeStr(smmIncludeDocuments),       includeDocuments);
        fieldResponsibilities   =   dialog.addFieldValue(extendedTypeStr(smmIncludeResponsibilities),includeResponsibilities);
        fieldCampaigns          =   dialog.addFieldValue(extendedTypeStr(smmIncludeCampaigns),       includeCampaigns);
        fieldProjects           =   dialog.addFieldValue(extendedTypeStr(smmIncludeProjects),        includeProjects);

        // Do not allow to copy activities when there is a process
        if (this.parmCommonOrigTable().(this.processFieldId()))
        {
            fieldActivities.visible(false);
        }

        dialog.allowUpdateOnSelectCtrl(true);
        this.dialogSelectCtrl();

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    // Get input values
    public boolean getFromDialog()
    {
        this.parmIncludeContacts(fieldContacts.value());
        this.parmIncludeActivities(fieldActivities.value());
        this.parmIncludeDocuments(fieldDocuments.value());
        this.parmIncludeResponsibilities(fieldResponsibilities.value());
        this.parmIncludeCampaigns(fieldCampaigns.value());
        this.parmIncludeProjects(fieldProjects.value());

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkRecords</Name>
				<Source><![CDATA[
    // This should be implemented in the subclass but re-read the copied record
    public void linkRecords()
    {
        select commonCopy where commonCopy.RecId == copyRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCommonCopyTable</Name>
				<Source><![CDATA[
    public Common parmCommonCopyTable(Common _commonCopy = commonCopy)
    {
        commonCopy = _commonCopy;

        return commonCopy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCommonOrigTable</Name>
				<Source><![CDATA[
    public Common parmCommonOrigTable(Common _commonOrig = commonOrig)
    {
        commonOrig = _commonOrig;

        return commonOrig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopyRecId</Name>
				<Source><![CDATA[
    public RecId parmCopyRecId(RecId _copyRecId = copyRecId)
    {
        copyRecId = _copyRecId;

        return copyRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeActivities</Name>
				<Source><![CDATA[
    public smmIncludeActivities parmIncludeActivities(smmIncludeActivities _includeActivities = includeActivities)
    {
        includeActivities = _includeActivities;

        return includeActivities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeCampaigns</Name>
				<Source><![CDATA[
    public smmIncludeCampaigns parmIncludeCampaigns(smmIncludeCampaigns _includeCampaigns = includeCampaigns)
    {
        includeCampaigns = _includeCampaigns;

        return includeCampaigns;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeCompetitors</Name>
				<Source><![CDATA[
    public smmIncludeCompetitors parmIncludeCompetitors(smmIncludeCompetitors _includeCompetitors = includeCompetitors)
    {
        includeCompetitors = _includeCompetitors;

        return includeCompetitors;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeContacts</Name>
				<Source><![CDATA[
    public smmIncludeContacts parmIncludeContacts(smmIncludeContacts _includeContacts = includeContacts)
    {
        includeContacts = _includeContacts;

        return includeContacts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeDocuments</Name>
				<Source><![CDATA[
    public smmIncludeDocuments parmIncludeDocuments(smmIncludeDocuments _includeDocuments = includeDocuments)
    {
        includeDocuments = _includeDocuments;

        return includeDocuments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeLeads</Name>
				<Source><![CDATA[
    public smmIncludeLeads parmIncludeLeads(smmIncludeLeads _includeLeads = includeLeads)
    {
        includeLeads = _includeLeads;

        return includeLeads;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeOpportunities</Name>
				<Source><![CDATA[
    public smmIncludeOpportunities parmIncludeOpportunities(smmIncludeOpportunities _includeOpportunities = includeOpportunities)
    {
        includeOpportunities = _includeOpportunities;

        return includeOpportunities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeProjects</Name>
				<Source><![CDATA[
    public smmIncludeProjects parmIncludeProjects(smmIncludeProjects _includeProjects = includeProjects)
    {
        includeProjects = _includeProjects;

        return includeProjects;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeResponsibilities</Name>
				<Source><![CDATA[
    public smmIncludeResponsibilities parmIncludeResponsibilities(smmIncludeResponsibilities _includeResponsibilities = includeResponsibilities)
    {
        includeResponsibilities = _includeResponsibilities;

        return includeResponsibilities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeSwotAnalysis</Name>
				<Source><![CDATA[
    public smmIncludeSwotAnalysis parmIncludeSwotAnalysis(smmIncludeSwotAnalysis _includeSwotAnalysis = includeSwotAnalysis)
    {
        includeSwotAnalysis = _includeSwotAnalysis;

        return includeSwotAnalysis;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowInfoLog</Name>
				<Source><![CDATA[
    public boolean parmShowInfoLog(boolean _showInfoLog = showInfoLog)
    {
        showInfoLog = _showInfoLog;
        return showInfoLog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processFieldId</Name>
				<Source><![CDATA[
    abstract fieldId processFieldId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    // This will copy the entity that the user selected and the associated records that are marked
    // to be copied and link together the copied and orignal records.
    public void run()
    {
        FormDataSource          dataSource;
        commonCopy = SmmEntityCopy::processOnServer(commonOrig,
                                                   includeActivities,
                                                   includeDocuments,
                                                   includeResponsibilities,
                                                   includeCampaigns,
                                                   includeContacts,
                                                   includeProjects,
                                                   includeOpportunities,
                                                   includeLeads,
                                                   includeSwotAnalysis,
                                                   includeCompetitors);

        //Storing the RecId in the variable declared above
        copyRecId = commonCopy.RecId;

        //Checking whether the variable showInfoLog and the copyRecId as set
        if (showInfoLog && commonCopy)
        {
            info(strfmt("@SYS113050",fieldid2pname(commonOrig.TableId,fieldId),commonCopy.(fieldId)));
            dataSource = FormDataUtil::getFormDataSource(commonOrig);

            //The following lines of code is used to refresh the datasource
            if (dataSource)
            {
                dataSource.refresh();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMainFields</Name>
				<Source><![CDATA[
    // Setting of fields should be implemented in the subclass
    public void setMainFields()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        int version     = RunBase::getVersion(packedClass);
        boolean ret;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                ret = true;
                break;

            default :
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static SmmEntityCopy construct(Common _common)
    {
        SmmEntityCopy   smmEntityCopy;
        if (!_common)
        {
            throw error(strfmt("@SYS29104",funcname())); // Class %1 must be called with a buffer.
        }

        switch (_common.TableId)
        {
            case tablenum(smmLeadTable) :
                smmEntityCopy = new SmmEntityCopy_Lead();
                break;
            case tablenum(smmOpportunityTable) :
                smmEntityCopy = new SmmEntityCopy_Opportunity();
                break;
        }

        smmEntityCopy.parmCommonOrigTable(_common);

        return smmEntityCopy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(FormDataSource _formDataSource, Common _common)
    {
        SmmEntityCopy       smmEntityCopy;
        RecId               newRecId;
        // Open the copy record dialog
        smmEntityCopy = SmmEntityCopy::construct(_common);

        if (smmEntityCopy.prompt())
        {
            smmEntityCopy.runOperation();

            newRecId = smmEntityCopy.parmCopyRecId();

            if (newRecId)
            {
                // Refresh the grid
                _formDataSource.executeQuery();
                _formDataSource.positionToRecordByValue(fieldnum(Common, RecId), int642str(newRecId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processOnServer</Name>
				<Source><![CDATA[
    static Common processOnServer(Common  _common,
                                        smmIncludeActivities        _includeActivities,
                                        smmIncludeDocuments         _includeDocuments,
                                        smmIncludeResponsibilities  _includeResponsibilities,
                                        smmIncludeCampaigns         _includeCampaigns,
                                        smmIncludeContacts          _includeContacts,
                                        smmIncludeProjects          _includeProjects,
                                        smmIncludeOpportunities     _includeOpportunities,
                                        smmIncludeLeads             _includeLeads,
                                        smmIncludeSwotAnalysis      _includeSwotAnalysis,
                                        smmIncludeCompetitors       _includeCompetitors)

    {
        #OCCRetryCount
        SmmEntityCopy   smmEntityCopy;
        // Open the copy record dialog
        smmEntityCopy = SmmEntityCopy::construct(_common);

        smmEntityCopy.parmIncludeActivities(_includeActivities);
        smmEntityCopy.parmIncludeDocuments(_includeDocuments);
        smmEntityCopy.parmIncludeResponsibilities(_includeResponsibilities);
        smmEntityCopy.parmIncludeCampaigns(_includeCampaigns);
        smmEntityCopy.parmIncludeContacts(_includeContacts);
        smmEntityCopy.parmIncludeProjects(_includeProjects);
        smmEntityCopy.parmIncludeOpportunities(_includeOpportunities);
        smmEntityCopy.parmIncludeLeads(_includeLeads);
        smmEntityCopy.parmIncludeSwotAnalysis(_includeSwotAnalysis);
        smmEntityCopy.parmIncludeCompetitors(_includeCompetitors);

        try
        {
            ttsbegin;

            smmEntityCopy.copyRecords();
            smmEntityCopy.linkRecords();

            ttscommit;
        }
        catch (Exception::Error)
        {
            throw error("@SYS21628"); //Update has been canceled because of an error.
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        return smmEntityCopy.parmCommonCopyTable();
        //returning common instead of RecId
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileCopy</Name>
				<Source><![CDATA[
    private static DocuRef fileCopy(DocuRef _docuRef)
    {
        DocuRef     docuRef;
        docuRef.data(_docuRef);

        ttsbegin;

        DocuType    docuType    = _docuRef.docuType();
        DocuValue   docuValue   = _docuRef.docuValue();

        if (docuType.TypeGroup != DocuTypeGroup::Note)
        {
            // Clear the FileId
            docuValue.FileId = Global::emptyGuid();
            docuValue.FileName = strFmt('%1 (%2)', docuValue.FileName, "@SYS6896");
            docuValue.insert();
        }

        docuRef.ValueRecId  = docuValue.RecId;
        // Append "(Copy) to the document name
        docuRef.Name        = _docuRef.Name + ' (' + "@SYS6896" + ')' ;
        docuRef.insert();
        ttscommit;

        RecId recid = docuRef.RecId;
        select firstonly docuRef where docuRef.RecId == recid;

        return docuRef;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>