<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRBrokerARInvoicesController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>MCRBrokerARInvoicesController</c> class is the controller class for the
///    <c>MCRBrokerARInvoicesReport</c> report.
/// </summary>
public class MCRBrokerARInvoicesController extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initailzes the controller, assigns parameter values and runs the SSRS report.
    /// </summary>
    /// <param name="_args">
    ///     The <c>Args</c> object.
    /// </param>
    public static void main(Args _args)
    {
        MCRBrokerARInvoicesController       controller = new MCRBrokerARInvoicesController();
        MCRBrokerARInvoicesContract         contract;
        container                           c = str2con(_args.parm(), ',');
        List                                list;
        str                                 tempVar;

        controller.parmReportName(ssrsReportStr(MCRBrokerARInvoices, Report));
        controller.parmArgs(_args);

        contract = controller.parmReportContract().parmRdpContract() as MCRBrokerARInvoicesContract;

        if (_args.parm())
        {
            list = new List(Types::String);
            tempVar = conPeek(c, 1);
            list.addStart(tempVar);
            contract.parmSalesId(list);

            list = new List(Types::String);
            tempVar = conPeek(c, 2);
            list.addStart(tempVar);
            contract.parmBroker(list);

            contract.parmFromDate(str2Date(conPeek(c, 3), -1));
            contract.parmToDate(str2Date(conPeek(c, 4), -1));
        }
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>