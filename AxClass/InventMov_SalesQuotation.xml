<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_SalesQuotation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventMov_SalesQuotation</c> class is used when you are working with sales quotations that
/// are in the account receivable module.
/// </summary>
[InventMovementFactoryAttribute(tableStr(SalesQuotationLine))]
class InventMov_SalesQuotation extends InventMovement
{
    SalesQuotationLine      salesQuotationLine;

    LedgerAccount           cacheAccountPhysicalRevenue;
    LedgerAccount           cacheAccountPhysicalRevenueOffset;

    LedgerAccount           cacheAccountPhysicalTax;

    boolean                 physicalTaxCalculated;
    AmountMST               physicalSumTaxMst;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addRemainFinancialUnit</Name>
				<Source><![CDATA[
    public void addRemainFinancialUnit(
        UnitQty         _qtyUnit,
        InventQty       _qty)
    {
        salesQuotationLine.RemainSalesFinancial += -_qtyUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRemainPhysical</Name>
				<Source><![CDATA[
    public void  addRemainPhysical(InventQty  _inventQty)
    {
        // RemainInventPhysical should only be updated for inventoried items
        if (salesQuotationLine.isStocked())
        {
            salesQuotationLine.RemainInventPhysical += -_inventQty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRemainPhysicalUnit</Name>
				<Source><![CDATA[
    public void  addRemainPhysicalUnit(UnitQty  _qtyUnit)
    {
        salesQuotationLine.RemainSalesPhysical += -_qtyUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateEstimated</Name>
				<Source><![CDATA[
    public boolean checkUpdateEstimated(
        InventUpd_Estimated     _updateNow,
        InventMovement          _this_Orig)
    {
        // For inventoried lines the physical and financial quantities should match.
        if (!salesQuotationLine.isStocked())
        {
            return true;
        }

        return super(_updateNow, _this_Orig);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdatePhysical</Name>
				<Source><![CDATA[
    public boolean checkUpdatePhysical(InventUpd_Physical _updateNow)
    {
        boolean ok = true;

        if (this.transQtyUnit() == 0)
        {
            ok = checkFailed("@SYS12170");
        }

        if (this.transQtyUnit() != _updateNow.parmPhysicalUnit())
        {
            ok = checkFailed("@SYS25384");
        }

        ok = salesQuotationLine.checkUpdatePhysical()   && ok;
        ok = super(_updateNow)                          && ok;

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the relationship between the inventory transactions originator and the owner.
    /// </summary>
    public void createOriginOwnerRelationship()
    {
        InventTransOriginId originId = this.inventTransOriginId();

        if (originId && salesQuotationLine)
        {
            InventTransOriginSalesQuotationLine::writeOriginOwnerRelationship(salesQuotationLine.DataAreaId, salesQuotationLine.InventTransId, originId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendAc</Name>
				<Source><![CDATA[
    public CustVendAC custVendAc()
    {
        return salesQuotationLine.CustAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the relationship between the inventory transactions originator and the owner that
    ///    corresponds.
    /// </summary>
    public void deleteOriginOwnerRelationship()
    {
        if (salesQuotationLine)
        {
            InventTransOriginSalesQuotationLine::deleteOwnerRelationship(salesQuotationLine.DataAreaId, salesQuotationLine.InventTransId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Identifies the postal delivery address of the inventory movement.
    /// </summary>
    /// <returns>
    ///    An ID of a <c>LogisticsPostalAddress</c> record; otherwise 0.
    /// </returns>
    /// <remarks>
    ///    Only used for shipping deliveries such as sales orders and transfer orders.
    /// </remarks>
    protected LogisticsPostalAddressRecId deliveryPostalAddress()
    {
        return salesQuotationLine.salesQuotationTable().DeliveryPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dlvMode</Name>
				<Source><![CDATA[
    protected DlvModeId dlvMode()
    {
        return salesQuotationLine.salesQuotationTable().DlvMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dlvTerm</Name>
				<Source><![CDATA[
    protected DlvTermId dlvTerm()
    {
        return salesQuotationLine.salesQuotationTable().DlvTerm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>estimatedPhysicalRevenue</Name>
				<Source><![CDATA[
    protected AmountMSTPhysicalRevenue estimatedPhysicalRevenue(InventTrans _inventTrans)
    {
        if (salesQuotationLine.QtyOrdered != 0)
        {
            return  CurrencyExchangeHelper::amount(_inventTrans.Qty * salesQuotationLine.lineAmountMSTExclTax(_inventTrans.DatePhysical) / salesQuotationLine.QtyOrdered);
        }

        return super(_inventTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>freightSlipType</Name>
				<Source><![CDATA[
    protected FreightSlipType freightSlipType()
    {
        return salesQuotationLine.salesQuotationTable().FreightSlipType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>freightZone</Name>
				<Source><![CDATA[
    protected FreightZoneId freightZone()
    {
        return salesQuotationLine.salesQuotationTable().FreightZone;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    public InventDimId inventDimId()
    {
        return salesQuotationLine.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the ID of the inventory transaction originator that corresponds to the movement.
    /// </summary>
    /// <param name="_inventTransOriginId">
    ///    The new value of the ID of the inventory transaction originator.
    /// </param>
    /// <returns>
    ///    The ID of the inventory transaction originator that corresponds to the movement.
    /// </returns>
    public InventTransOriginId inventTransOriginId(InventTransOriginId _inventTransOriginId = inventTransOriginId)
    {
        if (_inventTransOriginId != inventTransOriginId)
        {
            inventTransOriginId = _inventTransOriginId;
        }
        else
        {
            if (!inventTransOriginId)
            {
                inventTransOriginId = InventTransOriginSalesQuotationLine::findInventTransOriginId(salesQuotationLine.DataAreaId, salesQuotationLine.InventTransId);
            }
        }

        return inventTransOriginId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    public ItemId itemId()
    {
        return salesQuotationLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markingRefInventTransOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the marked transaction origin.
    /// </summary>
    /// <returns>
    ///    Zero if the whole movement is not marked; otherwise, the ID of the transaction origin.
    /// </returns>
    public InventTransOriginId markingRefInventTransOrigin()
    {
        return InventTransOrigin::findByInventTransId(salesQuotationLine.InventRefTransId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moduleType</Name>
				<Source><![CDATA[
    protected ModuleInventPurchSales moduleType()
    {
        return ModuleInventPurchSales::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeRemainControlled</Name>
				<Source><![CDATA[
    public boolean  mustBeRemainControlled()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeUnitControlled</Name>
				<Source><![CDATA[
    public boolean  mustBeUnitControlled()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(
        SalesQuotationLine          _salesQuotationLine,
        InventType                  _inventType             = SalesQuotationLineType::construct(_salesQuotationLine))
    {
        salesQuotationLine = _salesQuotationLine;

        super(_salesQuotationLine,_inventType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_Orig</Name>
				<Source><![CDATA[
    public InventMovement newMovement_Orig()
    {
        if (!salesQuotationLine.RecId)
        {
            return null;
        }

        return InventMov_SalesQuotation::newFromSalesQuotationLine(salesQuotationLine.orig());
    }

]]></Source>
			</Method>
			<Method>
				<Name>overDeliveryPct</Name>
				<Source><![CDATA[
    public Percent overDeliveryPct()
    {
        if (! SalesParameters::find().OverDelivery)
        {
            return 0;
        }

        return salesQuotationLine.OverDeliveryPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWAddRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a quantity to the remaining physical quantity.
    /// </summary>
    /// <param name="_qty">
    /// Quantity to be added.
    /// </param>
    public void pdsCWAddRemainPhysical(PdsCWInventQty _qty)
    {
        // PdsCWRemainInventPhysical should only be updated for inventoried items
        if (salesQuotationLine.isStocked())
        {
            salesQuotationLine.PdsCWRemainInventPhysical += -_qty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the remaining physical quantity.
    /// </summary>
    /// <returns>
    /// The inverse of the remaining physical quantity if the item is a catch weight item; otherwise, the
    /// remaining physical quantity.
    /// </returns>
    /// <remarks>
    /// The transaction catch weight quantity is the inverse of the catch weight quantity.
    /// </remarks>
    public PdsCWInventQty pdsCWRemainPhysical()
    {
        if (salesQuotationLine.isQuantityEditable())
        {
            return -salesQuotationLine.PdsCWRemainInventPhysical;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWSetRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the catch weight remaining physical quantity.
    /// </summary>
    /// <param name="_qty">
    /// Quantity to be set.
    /// </param>
    /// <remarks>
    /// This method sets the remaining physical quantity to the inverse of the quantity provided.
    /// </remarks>
    public void pdsCWSetRemainPhysical(PdsCWInventQty _qty)
    {
        if (salesQuotationLine.isQuantityEditable())
        {
            // PdaCWRemainInventPhysical should only be updated for inventoried items
            if (salesQuotationLine.isStocked())
            {
                salesQuotationLine.PdsCWRemainInventPhysical = -_qty;
            }
        }
        else
        {
            salesQuotationLine.PdsCWRemainInventPhysical = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWSetTransQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the transaction catch weight quantity.
    /// </summary>
    /// <param name="_pdsCWQtyInvent">
    /// Quantity to be set.
    /// </param>
    /// <remarks>
    /// The transaction catch weight quantity is the inverse of the catch weight quantity.
    /// </remarks>
    public void pdsCWSetTransQty(PdsCWInventQty _pdsCWQtyInvent)
    {
        if (salesQuotationLine.isUnconfirmed())
        {
            // PdsCWQty should only be nonzero for inventoried items
            if (salesQuotationLine.isStocked())
            {
                salesQuotationLine.PdsCWQty = -_pdsCWQtyInvent;
            }
        }
        else
        {
            salesQuotationLine.PdsCWQty = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWTransQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transaction catch weight quantity.
    /// </summary>
    /// <returns>
    /// The transaction catch weight quantity.
    /// </returns>
    /// <remarks>
    /// The transaction catch weight quantity is the inverse of the catch weight quantity.
    /// </remarks>
    public PdsCWInventQty pdsCWTransQty()
    {
        if (salesQuotationLine.isUnconfirmed())
        {
            // PdsCWQty should only be nonzero for inventoried items
            if (salesQuotationLine.isStocked())
            {
                return -salesQuotationLine.PdsCWQty;
            }
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight unit.
    /// </summary>
    /// <returns>
    /// The catch weight unit.
    /// </returns>
    /// <remarks>
    /// This method returns the catch weight unit from the <c>salesQuotationLine</c> parameter.
    /// </remarks>
    public PdsCWUnitId pdsCWUnitId()
    {
        return salesQuotationLine.pdsCWUnitId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>quotationType</Name>
				<Source><![CDATA[
    public QuotationType quotationType(QuotationType _quotationType = quotationCallerType)
    {
        quotationCallerType = _quotationType;
        return quotationCallerType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainPhysical</Name>
				<Source><![CDATA[
    public InventQty   remainPhysical()
    {
        if (salesQuotationLine.isQuantityEditable())
        {
            return -salesQuotationLine.RemainInventPhysical;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainPhysicalUnit</Name>
				<Source><![CDATA[
    public UnitQty  remainPhysicalUnit()
    {
        if (salesQuotationLine.isQuantityEditable())
        {
            return -salesQuotationLine.RemainSalesPhysical;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    public void setInventDimId(InventDimId _dimId)
    {
        salesQuotationLine.setInventDimId(_dimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventRefFields</Name>
				<Source><![CDATA[
    public boolean setInventRefFields(
        InventRefType           _inventRefType,
        InventRefId             _inventRefId,
        InventTransOriginId     _markingRefInventTransOrigin)
    {
        salesQuotationLine.InventRefType        = _inventRefType;
        salesQuotationLine.InventRefId          = _inventRefId;
        salesQuotationLine.InventRefTransId     = InventTransOrigin::find(_markingRefInventTransOrigin).InventTransId;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRemainPhysical</Name>
				<Source><![CDATA[
    public void setRemainPhysical(InventQty  _inventQty)
    {
        if (salesQuotationLine.isQuantityEditable())
        {
            // RemainInventPhysical should only be nonzero for inventoried items
            if (salesQuotationLine.isStocked())
            {
                salesQuotationLine.RemainInventPhysical= -_inventQty;
            }
        }
        else
        {
            salesQuotationLine.RemainInventPhysical= 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRemainPhysicalUnit</Name>
				<Source><![CDATA[
    public void setRemainPhysicalUnit(UnitQty _qtyUnit)
    {
        if (salesQuotationLine.isQuantityEditable())
        {
            salesQuotationLine.RemainSalesPhysical= -_qtyUnit;
        }
        else
        {
            salesQuotationLine.RemainSalesPhysical= 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransQty</Name>
				<Source><![CDATA[
    public void setTransQty(InventQty  _qtyInvent)
    {
        if (salesQuotationLine.isQuantityEditable())
        {
            // RemainInventPhysical should only be nonzero for inventoried items
            if (salesQuotationLine.isStocked())
            {
                salesQuotationLine.QtyOrdered= -_qtyInvent;
            }
        }
        else if (salesQuotationLine.QuotationStatus != SalesQuotationStatus::Revised)
        {
            salesQuotationLine.QtyOrdered= 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransQtyUnit</Name>
				<Source><![CDATA[
    public void setTransQtyUnit(UnitQty _qtyUnit)
    {
        if (salesQuotationLine.isQuantityEditable())
        {
            salesQuotationLine.SalesQty= -_qtyUnit;
        }
        else
        {
            salesQuotationLine.SalesQty= 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>subDeliveryPct</Name>
				<Source><![CDATA[
    protected Percent subDeliveryPct()
    {
        if (! SalesParameters::find().SubDelivery)
        {
            return 0;
        }

        return salesQuotationLine.UnderDeliveryPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    public TransDate transDate()
    {
        return salesQuotationLine.ConfirmedDlv;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    public InventTransId transId()
    {
        return salesQuotationLine.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transInventRefType</Name>
				<Source><![CDATA[
    public InventRefType transInventRefType()
    {
        return InventRefType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    public InventQty  transQty()
    {
        if (salesQuotationLine.isQuantityEditable())
        {
            // QtyOrdered should only be used for inventoried items.
            if (salesQuotationLine.isStocked())
            {
                return -salesQuotationLine.QtyOrdered;
            }
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQtyUnit</Name>
				<Source><![CDATA[
    public InventQty  transQtyUnit()
    {
        if (salesQuotationLine.isQuantityEditable())
        {
            return -salesQuotationLine.SalesQty;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transRefId</Name>
				<Source><![CDATA[
    public InventTransRefId transRefId()
    {
        return salesQuotationLine.QuotationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    public InventTransType transType()
    {
        return InventTransType::SalesQuotation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transUnitId</Name>
				<Source><![CDATA[
    public UnitOfMeasureSymbol transUnitId()
    {
        return salesQuotationLine.SalesUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBuffer</Name>
				<Source><![CDATA[
    public void updateBuffer(boolean _updateReservation = true)
    {
        InventUpd_Estimated estimated = InventUpd_Estimated::newInventMovement(this);
        estimated.updateNow();

        salesQuotationLine.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSalesQuotationLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>InventMov_SalesQuotation</c> class that is based on the specified
    ///    record.
    /// </summary>
    /// <param name="_salesQuotationLine">
    ///    The <c>SalesQuotationLine</c> record for which the class is instantiated.
    /// </param>
    /// <returns>
    ///    An instance of the <c>InventMov_SalesQuotation</c> class.
    /// </returns>
    public static InventMov_SalesQuotation newFromSalesQuotationLine(SalesQuotationLine _salesQuotationLine)
    {
        return new InventMov_SalesQuotation(_salesQuotationLine);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
