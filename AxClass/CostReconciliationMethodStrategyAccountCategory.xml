<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostReconciliationMethodStrategyAccountCategory</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostReconciliationMethodStrategyAccountCategory</c> class uses the main account category to find conflicts
/// and reconcile with general ledger.
/// </summary>
public class CostReconciliationMethodStrategyAccountCategory extends CostReconciliationMethodStrategy
{
    Set                     inventoryAccounts, wipAccounts;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>loadAccounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the main accounts related to a main account category.
    /// </summary>
    /// <param name = "_accountCategoryRef">
    /// The main account category.
    /// </param>
    /// <returns>
    /// A set of main account ID values.
    /// </returns>
    private Set loadAccounts(AccountCategoryRef _accountCategoryRef)
    {
        MainAccount             mainAccount;

        Set accounts = new Set(Types::String);

        while select mainAccount
            where mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
                && mainAccount.AccountCategoryRef == _accountCategoryRef
                && (mainAccount.Type == DimensionLedgerAccountType::ProfitAndLoss ||
                    mainAccount.Type == DimensionLedgerAccountType::Revenue ||
                    mainAccount.Type == DimensionLedgerAccountType::Expense ||
                    mainAccount.Type == DimensionLedgerAccountType::BalanceSheet ||
                    mainAccount.Type == DimensionLedgerAccountType::Asset ||
                    mainAccount.Type == DimensionLedgerAccountType::Liability ||
                    mainAccount.Type == DimensionLedgerAccountType::Equity)
        {
            accounts.add(mainAccount.MainAccountId);
        }

        return accounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadInventoryAccounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the inventory main accounts.
    /// </summary>
    private void loadInventoryAccounts()
    {
        if (!inventoryAccounts)
        {
            inventoryAccounts = this.loadAccounts(parameters.InventoryAccountCategoryRef);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadWIPAccounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the WIP main accounts.
    /// </summary>
    private void loadWIPAccounts()
    {
        if (!wipAccounts)
        {
            wipAccounts = this.loadAccounts(parameters.WIPAccountCategoryRef);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventoryBalance</Name>
				<Source><![CDATA[
    public Amount getInventoryBalance(TransDate _balanceDate)
    {
        this.loadInventoryAccounts();
        return this.getMainAccountsBalance(inventoryAccounts, dateNull(), _balanceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventoryMainAccountRanges</Name>
				<Source><![CDATA[
    public void addInventoryMainAccountRanges(QueryBuildDataSource _mainAccountQueryBuildDataSource)
    {
        this.loadInventoryAccounts();
        this.addRanges(_mainAccountQueryBuildDataSource, inventoryAccounts);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWIPBalance</Name>
				<Source><![CDATA[
    public Amount getWIPBalance(TransDate _balanceDate)
    {
        this.loadWIPAccounts();
        return this.getMainAccountsBalance(wipAccounts, dateNull(), _balanceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWIPMainAccountRanges</Name>
				<Source><![CDATA[
    public void addWIPMainAccountRanges(QueryBuildDataSource _mainAccountQueryBuildDataSource)
    {
        this.loadWIPAccounts();
        this.addRanges(_mainAccountQueryBuildDataSource, wipAccounts);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventoryAccount</Name>
				<Source><![CDATA[
    public boolean isInventoryAccount(MainAccountNum _mainAccountId)
    {
        this.loadInventoryAccounts();
        return inventoryAccounts.in(_mainAccountId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWIPAccount</Name>
				<Source><![CDATA[
    public boolean isWIPAccount(MainAccountNum _mainAccountId)
    {
        this.loadWIPAccounts();
        return wipAccounts.in(_mainAccountId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CostReconciliationMethodStrategyAccountCategory construct()
    {
        return new CostReconciliationMethodStrategyAccountCategory();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
