<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PriceDiscPriceAgreementSearchQtyFromToBehaviorFlight</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.ApplicationPlatform.FeatureExposure;
/// <summary>
/// The <c>PriceDiscPriceAgreementSearchQtyFromToBehaviorFlight</c> class handles the flighting logic to
/// set the classic behavior of the search process:
/// <b>Quantity from and Quantity to</b>
///     The values in the Quantity from and Quantity to fields define the range in which the price, line discount, multiline
///     discount, or total discount is valid. The fields represent a quantity for prices, line discounts, and multiline discounts,
///     and a subtotal amount for total discounts. The Quantity from value is inclusive, and the Quantity to value is exclusive.
/// </summary> 
internal final class PriceDiscPriceAgreementSearchQtyFromToBehaviorFlight implements IFeatureLifecycle
{
    static private PriceDiscPriceAgreementSearchQtyFromToBehaviorFlight singleton;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>typeNew</Name>
				<Source><![CDATA[
    private static void typeNew()
    {
        singleton = new PriceDiscPriceAgreementSearchQtyFromToBehaviorFlight();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static PriceDiscPriceAgreementSearchQtyFromToBehaviorFlight instance()
    {
        return singleton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the feature is enabled.
    /// </summary>
    /// <returns>
    /// True if the feature is enabled; otherwise, false.
    /// </returns>
    [Hookable(false)]
    public boolean isEnabled()
    {
        return Dynamics.AX.Application.FeatureStateProvider::IsFeatureEnabled(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>FeatureStage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates the stage of the feature in its lifecycle.
    /// </summary>
    /// <returns>A <c>FeatureLifeCycleState</c> value.</returns>
    /// <remarks>
    ///     Incomplete – feature is disabled by default. It can be only enabled on MS internal environments (think dev boxes, AxToday, TIE, etc.) with a flight. The flight name is the same as the class name (MyFeature)
    ///     PrivatePreview – feature is enabled by flight. The flight name is the same as the class name (MyFeature)
    ///     PublicPreview – feature is enabled by default, it can be turned off with the kill switch
    ///     Released – feature is enabled by default and cannot be disabled
    /// </remarks>
    [Hookable(false)]
    public FeatureLifecycleStage FeatureStage()
    {
        return FeatureLifecycleStage::PublicPreview;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>