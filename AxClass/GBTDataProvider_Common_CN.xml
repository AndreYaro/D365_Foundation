<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GBTDataProvider_Common_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>GBTDataProvider_Common_CN</c> class provides data for GBT generating Common xml.
/// </summary>
class GBTDataProvider_Common_CN extends GBTDataProvider_CN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Currency dataset.
    /// </summary>
    /// <param name="_dt">
    /// The dateset object that is filled.
    /// </param>
    [GBTDataFillTargetTable_CNAttribute(#TableName_Currency), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillCurrency(System.Data.DataTable _dt)
    {
        Currency currency;

        drc = _dt.get_Rows();
        while select CurrencyCode, Txt from currency
        {
            newRow = _dt.NewRow();
            this.setValue(newRow, #ColumnName_CurrencyCode, currency.CurrencyCode);
            this.setValue(newRow, #ColumnName_CurrencyName, currency.Txt);
            drc.Add(newRow);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCustomDimensionAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Custom dimension attribute dataset.
    /// </summary>
    /// <param name="_dt">
    /// The dateset object that is filled.
    /// </param>
    [GBTDataFillTargetTable_CNAttribute(#TableName_CustomDimensionAttribute), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillCustomDimensionAttribute(System.Data.DataTable _dt)
    {
        DimensionAttribute      dimAttr;
        QueryRun                dimAttQueryRun;
        DimensionAttributeTranslation  dimensionAttributeTranslation;

        drc = _dt.get_Rows();

        dimAttQueryRun = this.getDimAttrQueryRun();
        while (dimAttQueryRun.next())
        {
            dimAttr = dimAttQueryRun.get(tableNum(DimensionAttribute));
            dimensionAttributeTranslation = DimensionAttributeTranslation::findByDimensionAttributeLanguage(dimAttr.RecId, currentUserLanguage());
            //is Custom list or Not Workers, Customers, Vendors, department, and not cashflow dimension set in GBT paramters
            //since cashflow shall be exported seperately.
            if (dimAttr.BackingEntityTableId == tableNum(DimensionFinancialTag) && dimensionAttributeTranslation && dimensionAttributeTranslation.Name != GBTParameters.CashFlowDimension)
            {
                newRow = _dt.NewRow();
                this.setValue(newRow, #ColumnName_DimensionID, dimensionAttributeTranslation.Name);
                this.setValue(newRow, #ColumnName_DimensionName, dimAttr.ReportColumnName);
                this.setValue(newRow, #ColumnName_DimensionDesc, '');
                this.setValue(newRow, #ColumnName_InHierarchy, '0');
                this.setValue(newRow, #ColumnName_NumberingRule, '');
                drc.Add(newRow);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCustomDimensionAttributeValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Custom dimension attribute value dataset.
    /// </summary>
    /// <param name="_dt">
    /// The dateset object that is filled.
    /// </param>
    [GBTDataFillTargetTable_CNAttribute(#TableName_CustomDimensionAttributeValue), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillCustomDimensionAttributeValue(System.Data.DataTable _dt)
    {
        #Dimensions

        DimensionAttribute      dimAttr;
        QueryRun                dimAttQueryRun;
        Query                   dimAttrValueQuery;
        QueryRun                dimAttrValueQueryRun;
        QueryBuildDataSource    qbsDimAttrValue;
        QueryBuildDataSource    qbsDimAttrDirCategory;
        Common                  common;
        boolean                 fromCustomDimension = false;
        DimensionAttributeTranslation  dimensionAttributeTranslation;

        drc = _dt.get_Rows();

        dimAttQueryRun = this.getDimAttrQueryRun();
        while (dimAttQueryRun.next())
        {
            dimAttr = dimAttQueryRun.get(tableNum(DimensionAttribute));
            dimensionAttributeTranslation = DimensionAttributeTranslation::findByDimensionAttributeLanguage(dimAttr.RecId, currentUserLanguage());
            //is Custom list or Not Workers, Customers, Vendors, department, and not cashflow dimension set in GBT paramters
            //since cashflow shall be exported seperately.
            fromCustomDimension = (dimAttr.BackingEntityTableId == tableNum(DimensionFinancialTag));

            if (fromCustomDimension && dimensionAttributeTranslation && dimensionAttributeTranslation.Name != GBTParameters.CashFlowDimension)
            {
                dimAttrValueQuery = new Query();
                qbsDimAttrValue = dimAttrValueQuery.addDataSource(dimAttr.BackingEntityType);

                if (fromCustomDimension)
                {
                    qbsDimAttrDirCategory = qbsDimAttrValue.addDataSource(tableNum(DimensionAttributeDirCategory));
                    qbsDimAttrDirCategory.addLink(fieldNum(DimensionFinancialTag, FinancialTagCategory), fieldNum(DimensionAttributeDirCategory, DirCategory));
                    qbsDimAttrDirCategory.addRange(fieldNum(DimensionAttributeDirCategory, DimensionAttribute)).value(queryValue(dimAttr.RecId));
                }

                dimAttrValueQueryRun = new QueryRun(dimAttrValueQuery);
                while (dimAttrValueQueryRun.next())
                {
                    common = dimAttrValueQueryRun.get(dimAttr.BackingEntityType);
                    newRow = _dt.NewRow();
                    this.setValue(newRow, #ColumnName_DimensionID, dimAttr.Name);
                    this.setValue(newRow, #ColumnName_DimensionValueID, common.(dimAttr.ValueAttribute));
                    this.setValue(newRow, #ColumnName_DimensionValueName, common.(dimAttr.NameAttribute));
                    this.setValue(newRow, #ColumnName_DimensionValueDesc, '');
                    this.setValue(newRow, #ColumnName_DimensionValueParent, '');
                    this.setValue(newRow, #ColumnName_DimensionValueHierarchy, '1');
                    drc.Add(newRow);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Customer dataset.
    /// </summary>
    /// <param name="_dt">
    /// The dateset object that is filled.
    /// </param>
    [GBTDataFillTargetTable_CNAttribute(#TableName_Customer), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillCustomer(System.Data.DataTable _dt)
    {
        CustTable   custTable;

        drc = _dt.get_Rows();
        while select custTable
        {
            newRow = _dt.NewRow();
            this.setValue(newRow, #ColumnName_CustomerId, custTable.AccountNum);
            this.setValue(newRow, #ColumnName_CustomerName, custTable.name());
            this.setValue(newRow, #ColumnName_CustomerSearchName, custTable.nameAlias());
            drc.Add(newRow);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDepartment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Department dataset.
    /// </summary>
    /// <param name="_dt">
    /// The dateset object that is filled.
    /// </param>
    [GBTDataFillTargetTable_CNAttribute(#TableName_Department), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillDepartment(System.Data.DataTable _dt)
    {
        OMOperatingUnit             omOperatingUnit;
        OMOperatingUnit             omOperatingUnitParent;
        OMInternalOrganization      omInternalOrganizationParent;
        OMHierarchyRelationship     omHierarchyRelationship;
        utcDateTime                 curDate;
        RefRecId                    hierarchyTypeRecId;

        drc = _dt.get_Rows();
        curDate = DateTimeUtil::newDateTime(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()));
        hierarchyTypeRecId = this.getDepartmentHierarchyType();
        while select RecId, OMOperatingUnitNumber, Name from omOperatingUnit
            where omOperatingUnit.OMOperatingUnitType == OMOperatingUnitType::OMDepartment
            outer join ParentOrganization from omHierarchyRelationship
                where omHierarchyRelationship.ChildOrganization == omOperatingUnit.RecId
                    && omHierarchyRelationship.ValidFrom <= curDate
                    && omHierarchyRelationship.ValidTo >= curDate
                    && omHierarchyRelationship.HierarchyType == hierarchyTypeRecId
                outer join Name, OrganizationType from omInternalOrganizationParent
                    where omInternalOrganizationParent.RecId == omHierarchyRelationship.ParentOrganization
                    outer join OMOperatingUnitNumber from omOperatingUnitParent
                        where omInternalOrganizationParent.OrganizationType == OMInternalOrganizationType::OperatingUnit
                            && omOperatingUnitParent.RecId == omInternalOrganizationParent.RecId
        {
            newRow = _dt.NewRow();
            this.setValue(newRow, #ColumnName_DepartMentID, omOperatingUnit.OMOperatingUnitNumber);
            this.setValue(newRow, #ColumnName_DepartmentName, omOperatingUnit.Name);

            if (strLen(omOperatingUnit.OMOperatingUnitNumber) == 1)
            {
                this.setValue(newRow, #ColumnName_ParentDepartment, '');
            }
            else
            {
                this.setValue(newRow, #ColumnName_ParentDepartment, omOperatingUnitParent.OMOperatingUnitNumber ? omOperatingUnitParent.OMOperatingUnitNumber : omInternalOrganizationParent.Name);
            }

            drc.Add(newRow);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillELedgerBook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills E-Ledger book dataset.
    /// </summary>
    /// <param name="_dt">
    /// The dateset object that is filled.
    /// </param>
    [GBTDataFillTargetTable_CNAttribute(#TableName_ELedgerBook), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillELedgerBook(System.Data.DataTable _dt)
    {
        str currentMonth;
        str eBoookNumber;
        str eBookName;

        LedgerChartOfAccounts ledgerChartOfAccounts = LedgerChartOfAccounts::find(Ledger::current());

        drc             = _dt.get_Rows();

        newRow = _dt.NewRow();
        this.setValue(newRow, #ColumnName_EBookNumber, ledgerChartOfAccounts.Name);
        this.setValue(newRow, #ColumnName_EBookName, ledgerChartOfAccounts.description);
        this.setValue(newRow, #ColumnName_CompanyName, companyinfo::find().Name());
        this.setValue(newRow, #ColumnName_OfficialCompanynumber, gbtParameters.OrgNumber);
        this.setValue(newRow, #ColumnName_OrganizationType, #OrganizationType);
        this.setValue(newRow, #ColumnName_Industry, gbtParameters.Industry);
        this.setValue(newRow, #ColumnName_SoftwareDeveloper, #SoftwareDeveloper);
        this.setValue(newRow, #ColumnName_AXVersionNumber, #AXVersionNumber);
        this.setValue(newRow, #ColumnName_CompanyCurrency, companyCurrencyName);
        this.setValue(newRow, #ColumnName_FiscalYear, fiscalYearName);
        this.setValue(newRow, #ColumnName_GBTVersion, #GBTVersion);
        drc.Add(newRow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillEmployee</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Employee dataset.
    /// </summary>
    /// <param name="_dt">
    /// The dateset object that is filled.
    /// </param>
    [GBTDataFillTargetTable_CNAttribute(#TableName_Employee), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillEmployee(System.Data.DataTable _dt)
    {
        HcmWorker                       hcmWorker;
        HcmPersonIdentificationNumber   hcmPersonIdentificationNumber;
        HcmPersonPrivateDetails         hcmPersonPrivateDetails;
        HcmEmployment                   hcmEmployment;
        utcDateTime                     curDate;

        drc = _dt.get_Rows();
        curDate = DateTimeUtil::newDateTime(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()));
        while select hcmWorker
            outer join IdentificationType, IdentificationNumber from hcmPersonIdentificationNumber
                where hcmPersonIdentificationNumber.Person      == hcmWorker.Person
                    && hcmPersonIdentificationNumber.IsPrimary  == NoYes::Yes
            outer join Gender, BirthDate from hcmPersonPrivateDetails
                where hcmPersonPrivateDetails.Person    == hcmWorker.Person
            outer join ValidFrom, ValidTo from hcmEmployment
                where hcmEmployment.Worker == hcmWorker.RecId
                    && hcmEmployment.LegalEntity == CompanyInfo::current()
                    && hcmEmployment.ValidFrom <= curDate
                    && hcmEmployment.ValidTo >= curDate
        {
                newRow = _dt.NewRow();
                this.setValue(newRow, #ColumnName_EmployeeId, hcmWorker.PersonnelNumber);
                this.setValue(newRow, #ColumnName_EmployeeName, hcmWorker.name());
                this.setValue(newRow, #ColumnName_IdentificationDocument, HcmIdentificationType::find(hcmPersonIdentificationNumber.IdentificationType).IdentificationTypeId);
                this.setValue(newRow, #ColumnName_IdentificationNumber, hcmPersonIdentificationNumber.IdentificationNumber);
                this.setValue(newRow, #ColumnName_Gendar, hcmPersonPrivateDetails.Gender);
                this.setValue(newRow, #ColumnName_Birthday, hcmPersonPrivateDetails.BirthDate);

                OMOperatingUnitNumber departmentCode;
                if (hcmWorker.isEmployee())
                {
                    departmentCode = HcmWorkerHelper::getPrimaryDepartment(hcmWorker.RecId).OMOperatingUnitNumber;
                }
                else
                {
                    utcdatetime minValidDate = DateTimeUtil::minValue();
                    utcdatetime maxValidDate = DateTimeUtil::maxValue();
                    OMOperatingUnit OMOperatingUnit;

                    select firstonly validTimeState(minValidDate, maxValidDate) hcmEmployment
                        where hcmEmployment.Worker == hcmWorker.RecId
                            && hcmEmployment.LegalEntity == CompanyInfo::current();

                    utcdatetime validTo = hcmEmployment.ValidTo == minValidDate ? minValidDate : DateTimeUtil::addDays(hcmEmployment.ValidTo, -1);
                    departmentCode = OMOperatingUnit::find(
                        HcmPositionDetail::findByPosition(HcmWorkerHelper::getPrimaryPosition(hcmWorker.RecId, validTo), DateTimeUtil::utcNow()).Department,
                        OMOperatingUnitType::OMDepartment).OMOperatingUnitNumber;
                }

                this.setValue(newRow, #ColumnName_DepartmentCode, departmentCode);
                this.setValue(newRow, #ColumnName_StartDate, hcmEmployment.ValidFrom);
                this.setValue(newRow, #ColumnName_EndDate, hcmEmployment.ValidTo);
                drc.Add(newRow);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Exchange rate dataset.
    /// </summary>
    /// <param name="_dt">
    /// The dateset object that is filled.
    /// </param>
    [GBTDataFillTargetTable_CNAttribute(#TableName_ExchangeRate), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillExchangeRate(System.Data.DataTable _dt)
    {
        ExchangeRateType    exchangeRateType;

        drc = _dt.get_Rows();
        while select Name, Description from exchangeRateType
        {
            newRow = _dt.NewRow();
            this.setValue(newRow, #ColumnName_ExchangeRateType, exchangeRateType.Name);
            this.setValue(newRow, #ColumnName_ExchangeRateName, exchangeRateType.Description);
            drc.Add(newRow);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFiscalPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Fiscal period dataset.
    /// </summary>
    /// <param name="_dt">
    /// The dateset object that is filled.
    /// </param>
    [GBTDataFillTargetTable_CNAttribute(#TableName_FiscalPeriod), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillFiscalPeriod(System.Data.DataTable _dt)
    {
        FiscalcalendarPeriod    fiscalCalendarPeriodLocal;

        drc = _dt.get_Rows();
        while select Name, StartDate, EndDate from fiscalCalendarPeriodLocal
            where fiscalCalendarPeriodLocal.FiscalCalendarYear == startFiscalCalendarPeriod.FiscalCalendarYear
                && fiscalCalendarPeriodLocal.Type == FiscalPeriodType::Operating
        {
            newRow = _dt.NewRow();
            this.setValue(newRow, #ColumnName_FiscalYear, fiscalYearName);
            this.setValue(newRow, #ColumnName_FiscalPeriod, fiscalCalendarPeriodLocal.Name);
            this.setValue(newRow, #ColumnName_PeriodStartDate, fiscalCalendarPeriodLocal.StartDate);
            this.setValue(newRow, #ColumnName_PeriodEndDate, fiscalCalendarPeriodLocal.EndDate);
            drc.Add(newRow);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPaymentMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Payment method dataset.
    /// </summary>
    /// <param name="_dt">
    /// The dateset object that is filled.
    /// </param>
    [GBTDataFillTargetTable_CNAttribute(#TableName_PaymentMethod), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillPaymentMethod(System.Data.DataTable _dt)
    {
        CustPaymModeTable   custPaymModeTable;
        VendPaymModeTable   vendPaymModeTable;

        drc = _dt.get_Rows();
        //Combines Cust payment method and vend payment method then fill to data set
        //1.Loops cust payment methods and fill records to data set firstly
        while select PaymMode, Name from custPaymModeTable
        {
            newRow = _dt.NewRow();
            this.setValue(newRow, #ColumnName_PaymentMethod, custPaymModeTable.PaymMode);
            this.setValue(newRow, #ColumnName_PaymentMethodName, custPaymModeTable.Name);
            drc.Add(newRow);
        }
        //2. Loops vend payment methods and fill records which vend payment methods doesn't exist in cust payment methods to data set
        while select PaymMode, Name from vendPaymModeTable
        {
            if (!CustPaymModeTable::find(vendPaymModeTable.PaymMode).RecId)
            {
                newRow = _dt.NewRow();
                this.setValue(newRow, #ColumnName_PaymentMethod, vendPaymModeTable.PaymMode);
                this.setValue(newRow, #ColumnName_PaymentMethodName, vendPaymModeTable.Name);
                drc.Add(newRow);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Vendor dataset.
    /// </summary>
    /// <param name="_dt">
    /// The dateset object that is filled.
    /// </param>
    [GBTDataFillTargetTable_CNAttribute(#TableName_Vendor), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillVendor(System.Data.DataTable _dt)
    {
        VendTable   vendTable;

        drc = _dt.get_Rows();
        while select vendTable
        {
            newRow = _dt.NewRow();
            this.setValue(newRow, #ColumnName_VendorId, vendTable.AccountNum);
            this.setValue(newRow, #ColumnName_VendorName, vendTable.name());
            this.setValue(newRow, #ColumnName_VendorSearchName, vendTable.nameAlias());
            drc.Add(newRow);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillVoucherType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Voucher type dataset.
    /// </summary>
    /// <param name="_dt">
    /// The dateset object that is filled.
    /// </param>
    [GBTDataFillTargetTable_CNAttribute(#TableName_VoucherType), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillVoucherType(System.Data.DataTable _dt)
    {
        LedgerVoucherType_CN    ledgerVoucherType;

        drc = _dt.get_Rows();
        while select Id, Description, Num from ledgerVoucherType
        {
            newRow = _dt.NewRow();
            this.setValue(newRow, #ColumnName_VoucherTypeID, ledgerVoucherType.Num);
            this.setValue(newRow, #ColumnName_VoucherTypeName, ledgerVoucherType.Description);
            this.setValue(newRow, #ColumnName_VoucherTypeSearchName, ledgerVoucherType.Id);
            drc.Add(newRow);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDepartmentHierarchyType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>RecId</c> of the default <c>OMHierarchyType</c> assigned to the organization chart purpose.
    /// </summary>
    /// <returns>
    /// The <c>RecId</c> of the default <c>OMHierarchyType</c> assigned to the organization chart purpose.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RefRecId getDepartmentHierarchyType()
    {
        OMHierarchyPurpose  omHierarchyPurpose;
        RefRecId            hierarchyType = 0;
        int64               hierarchyRecordCount;

        // get a count of the number of hierarchies assigned to the organization chart purpose
        select count(RecId) from omHierarchyPurpose
            where omHierarchyPurpose.HierarchyPurpose == HierarchyPurpose::OrganizationChart;

        hierarchyRecordCount = omHierarchyPurpose.RecId;

        switch (hierarchyRecordCount)
        {
            case any2Int64(1):
                // only a single hierarchy exists for the organization chart purpose, so use it
                select firstonly HierarchyType from omHierarchyPurpose
                    where omHierarchyPurpose.HierarchyPurpose == HierarchyPurpose::OrganizationChart;
                hierarchyType = omHierarchyPurpose.HierarchyType;
                break;

            default :
                // multiple hierarchies exist for the organization chart purpose, so attempt to find the default
                hierarchyType = HcmDepartmentHierarchy::getDefaultHierarchyType();
                break;
        }

        return hierarchyType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimAttrQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a queryrun to select dimension attribute.
    /// </summary>
    /// <returns>
    /// The QueryRun object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected QueryRun getDimAttrQueryRun()
    {
        Query                   dimAttQuery;
        QueryRun                dimAttQueryRun;
        QueryBuildDataSource    dimAttQBDS, coaQBDS;

        dimAttQuery = new Query();
        dimAttQBDS = dimAttQuery.addDataSource(tableNum(DimensionAttribute));
        dimAttQBDS.addRange(fieldNum(DimensionAttribute, Type)).value(SysQuery::valueNot(DimensionAttributeType::DynamicAccount));

        //exclude main account
        dimAttQBDS.addRange(fieldNum(DimensionAttribute, RecId)).value(SysQuery::valueNot(DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)));

        //current chart of account
        coaQBDS = dimAttQBDS.addDataSource(tableNum(DimensionAttributeSetItem));
        coaQBDS.joinMode(JoinMode::ExistsJoin);
        coaQBDS.fetchMode(QueryFetchMode::One2One);
        coaQBDS.addLink(fieldNum(DimensionAttribute, RecId), fieldNum(DimensionAttributeSetItem, DimensionAttribute));
        coaQBDS.addRange(fieldNum(DimensionAttributeSetItem, DimensionAttributeSet)).value(queryValue(DimensionCache::getDimensionAttributeSetForLedger()));

        dimAttQueryRun = new QueryRun(dimAttQuery);

        return dimAttQueryRun;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>