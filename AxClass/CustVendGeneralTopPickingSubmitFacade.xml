<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendGeneralTopPickingSubmitFacade</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class CustVendGeneralTopPickingSubmitFacade
{
    private const str EntryPointNameQuery = methodStr(ICustVendGeneralTopPickingRun, queryTopPickingList);
    private const str EntryPointNameExecute = methodStr(ICustVendGeneralTopPickingRun, methodToExecute);
    private const str BatchControlAttribute = classStr(CustVendGeneralTopPickingBatchControlAttribute);
    private const str InterfaceImpl = classStr(ICustVendGeneralTopPickingRun);
    private const str PolicyClass = classStr(CustVendGeneralTopPickingPolicyAttribute);
    private const int ScheduleNum = 4;
    private const int IdxOfParallismDegree = 3;
    private const int IdxOfJobName = 3;
    private ClassId classId;
    private container payload;
    private Object instance;
    private CustVendGeneralTopPickingLogger custVendGeneralTopPickingLogger;
    private str jobName;
    private container callerPacked;
    private CustVendGeneralTopPickingBatchInfo parentJobInfo;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(ClassId _classId, container _payload, container _callerPacked, CustVendGeneralTopPickingBatchInfo _parentJobInfo)
    {
        classId = _classId;
        payload = _payload;
        callerPacked = _callerPacked;
        parentJobInfo = _parentJobInfo;
        custVendGeneralTopPickingLogger = CustVendGeneralTopPickingLogger::createLogger();
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitToTPPool</Name>
				<Source><![CDATA[
    public static RecId submitToTPPool(ClassId _classId, container _payload, container _callerPacked, CustVendGeneralTopPickingBatchInfo _parentJobInfo = null)
    {
        CustVendGeneralTopPickingSubmitFacade custVendGeneralTopPickingSubmitFacade = new CustVendGeneralTopPickingSubmitFacade(_classId, _payload, _callerPacked, _parentJobInfo);
        if (!custVendGeneralTopPickingSubmitFacade.arityValidation())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
        ttsbegin;
        CustVendGeneralTopPickingHeader header = custVendGeneralTopPickingSubmitFacade.initTPHeader();
        RecId batchRecId = custVendGeneralTopPickingSubmitFacade.submitJob(header, false, header.RecId);
        ttscommit;

        return batchRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retryFailedTask</Name>
				<Source><![CDATA[
    public static void retryFailedTask(RecId _recId)
    {
        ttsbegin;
        CustVendGeneralTopPickingHeader custVendGeneralTopPickingHeader;
        select pessimisticlock firstonly custVendGeneralTopPickingHeader
            where custVendGeneralTopPickingHeader.RecId == _recId;
        if (!CustVendGeneralTopPickingSubmitFacade::statusCheck(_recId))
        {
            throw error("@CashManagement:WrongTopPickingStatus");
        }
        CustVendGeneralTopPickingSubmitFacade::refreshStatus(custVendGeneralTopPickingHeader);
        CustVendGeneralTopPickingSubmitFacade custVendGeneralTopPickingSubmitFacade = new CustVendGeneralTopPickingSubmitFacade(custVendGeneralTopPickingHeader.ClassId, custVendGeneralTopPickingHeader.Payload, conNull(), null);
        custVendGeneralTopPickingSubmitFacade.submitJob(custVendGeneralTopPickingHeader, true, _recId);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitJob</Name>
				<Source><![CDATA[
    private RecId submitJob(CustVendGeneralTopPickingHeader _custVendGeneralTopPickingHeader, boolean _skipInitPhase, RecId _recId)
    {
        RecId batchId = this.scheduleRunner(_custVendGeneralTopPickingHeader, _skipInitPhase);
        CustVendGeneralTopPickingHeader custVendGeneralTopPickingHeader = CustVendGeneralTopPickingHeader::find(_recId, true);
        custVendGeneralTopPickingHeader.BatchHeader = batchId;
        custVendGeneralTopPickingHeader.JobStatus = CustVendGeneralTopPickingJobStatus::InProgress;
        custVendGeneralTopPickingHeader.Name = this.getJobName();
        if (_skipInitPhase)
        {
            custVendGeneralTopPickingHeader.RetryCount ++;
        }
        else
        {
            custVendGeneralTopPickingHeader.RetryCount = 0;
        }
        custVendGeneralTopPickingHeader.update();

        return batchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshStatus</Name>
				<Source><![CDATA[
    private static void refreshStatus(CustVendGeneralTopPickingHeader _custVendGeneralTopPickingHeader)
    {
        _custVendGeneralTopPickingHeader.JobStatus = CustVendGeneralTopPickingJobStatus::InProgress;
        _custVendGeneralTopPickingHeader.BatchHeader = 0;
        _custVendGeneralTopPickingHeader.update();
        CustVendGeneralTopPickingItems::refreshErrorStatus(_custVendGeneralTopPickingHeader.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusCheck</Name>
				<Source><![CDATA[
    private static boolean statusCheck(RecId _recId)
    {
        CustVendGeneralTopPickingHeader custVendGeneralTopPickingHeader = CustVendGeneralTopPickingHeader::find(_recId);
        return custVendGeneralTopPickingHeader.JobStatus == CustVendGeneralTopPickingJobStatus::FinishedWithErrors;
    }

]]></Source>
			</Method>
			<Method>
				<Name>arityValidation</Name>
				<Source><![CDATA[
    private boolean arityValidation()
    {
        using (var runActivityContext = custVendGeneralTopPickingLogger.activityContextWithCustomProperties(CustVendGeneralTopPickingInstrumentationConstants::CustVendGeneralTopPickingSubmitPhase))
        {
            runActivityContext.addCustomProperty(
                CustVendGeneralTopPickingInstrumentationConstants::IsTTSLevelZero,
                CustVendGeneralTopPickingLogger::bool2str(appl.ttsLevel() == 0));
            SysDictClass dictClass = new SysDictClass(classId);
            if (!dictClass.isImplementing(className2Id(InterfaceImpl)))
            {
                custVendGeneralTopPickingLogger.logError(strFmt('ClassName %1 does not implementing interface', classId2Name(classId)));
                return false;
            }
            str entryPoint = this.getEntryPoint();
            SysDictMethod sysDictMethod = new SysDictMethod(UtilElementType::ClassInstanceMethod, classId, entryPoint);
            if (sysDictMethod.parameterCnt() != 1 || sysDictMethod.parameterType(1) != Types::Container)
            {
                custVendGeneralTopPickingLogger.logError(strFmt('ClassName %1 method %2 does not follow implementation protocol', classId2Name(classId), entryPoint));
                return false;
            }
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleRunner</Name>
				<Source><![CDATA[
    private RecId scheduleRunner(CustVendGeneralTopPickingHeader _custVendGeneralTopPickingHeader, boolean _skipInitPhase = false)
    {
        using (var runActivityContext = custVendGeneralTopPickingLogger.activityContextWithCustomProperties(CustVendGeneralTopPickingInstrumentationConstants::CustVendGeneralTopPickingSubmitPhase))
        {
            runActivityContext.addCustomProperty(
                CustVendGeneralTopPickingInstrumentationConstants::IsTTSLevelZero,
                CustVendGeneralTopPickingLogger::bool2str(appl.ttsLevel() == 0));

            BatchHeader batchHeader;
            if (parentJobInfo && parentJobInfo.getBatchHeader())
            {
                batchHeader = parentJobInfo.getBatchHeader();
            }
            else
            {
                batchHeader = BatchHeader::construct();
                batchHeader.parmCaption(this.getJobName());
            }

            CustVendGeneralTopPickingInitializer custVendGeneralTopPickingInitializer;
            if (!_skipInitPhase)
            {
                custVendGeneralTopPickingInitializer = new CustVendGeneralTopPickingInitializer(_custVendGeneralTopPickingHeader.ClassId, _custVendGeneralTopPickingHeader.Payload, _custVendGeneralTopPickingHeader.RecId, callerPacked);
                this.updateBatchContrlInfoByPhase(_custVendGeneralTopPickingHeader.ClassId, CustVendGeneralTopPickingPhase::QueryPhase, custVendGeneralTopPickingInitializer);
                this.addTask(batchHeader, custVendGeneralTopPickingInitializer);
            }

            CustVendGeneralTopPickingFinalizer custVendGeneralTopPickingFinalizer = new CustVendGeneralTopPickingFinalizer(_custVendGeneralTopPickingHeader.RecId);
            custVendGeneralTopPickingFinalizer.batchInfo().parmRetriesOnFailure(0);
            custVendGeneralTopPickingFinalizer.batchInfo().parmCaption("@CashManagement:CustVendGeneralTopPickingFinalizer");
            this.addTask(batchHeader, custVendGeneralTopPickingFinalizer);
            int totlaTaskToPopulate = this.getDegreeOfParallism(_custVendGeneralTopPickingHeader.ClassId, EntryPointNameExecute);

            custVendGeneralTopPickingLogger.logInformation(strFmt('%1 execution tasks scheduled', int2Str(totlaTaskToPopulate)));

            for (int i = 0; i < totlaTaskToPopulate; i++)
            {
                CustVendGeneralTopPickingRunner custVendGeneralTopPickingRunner = new CustVendGeneralTopPickingRunner(_custVendGeneralTopPickingHeader.RecId);
                this.updateBatchContrlInfoByPhase(_custVendGeneralTopPickingHeader.ClassId, CustVendGeneralTopPickingPhase::ExecutePhase, custVendGeneralTopPickingRunner);

                this.addTask(batchHeader, custVendGeneralTopPickingRunner);
                if (!_skipInitPhase && custVendGeneralTopPickingInitializer)
                {
                    batchHeader.addDependency(custVendGeneralTopPickingRunner, custVendGeneralTopPickingInitializer, BatchDependencyStatus::Finished);
                }
                batchHeader.addDependency(custVendGeneralTopPickingFinalizer, custVendGeneralTopPickingRunner, BatchDependencyStatus::FinishedOrError);
            }
            batchHeader.save();
            return batchHeader.parmBatchHeaderId();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTask</Name>
				<Source><![CDATA[
    private void addTask(BatchHeader _batchHeader, Batchable _batchTask)
    {
        if (parentJobInfo && parentJobInfo.getAddRuntimeTask())
        {
            _batchHeader.addRuntimeTask(_batchTask, parentJobInfo.getCurrentBatchJobId());
        }
        else
        {
            _batchHeader.addTask(_batchTask);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTPHeader</Name>
				<Source><![CDATA[
    private CustVendGeneralTopPickingHeader initTPHeader()
    {
        CustVendGeneralTopPickingHeader custVendGeneralTopPickingHeader;
        custVendGeneralTopPickingHeader.ClassId = classId;
        custVendGeneralTopPickingHeader.Payload = payload;
        custVendGeneralTopPickingHeader.JobStatus = CustVendGeneralTopPickingJobStatus::Initial;
        custVendGeneralTopPickingHeader.insert();
        return custVendGeneralTopPickingHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBatchContrlInfoByPhase</Name>
				<Source><![CDATA[
    private void updateBatchContrlInfoByPhase(ClassId _classId, CustVendGeneralTopPickingPhase _phase, RunBaseBatch _baseObj)
    {
        int retryCnt;
        str caption;
        int numberOfTasks = 0;
        switch (_phase)
        {
            case CustVendGeneralTopPickingPhase::QueryPhase:
                [retryCnt, caption, numberOfTasks] = this.getBatchContrlInfo(_classId, EntryPointNameQuery);
                break;
            case CustVendGeneralTopPickingPhase::ExecutePhase:
                [retryCnt, caption, numberOfTasks] = this.getBatchContrlInfo(_classId, EntryPointNameExecute);
                break;
            default:
                break;
        }
        _baseObj.batchInfo().parmRetriesOnFailure(retryCnt);
        _baseObj.batchInfo().parmCaption(caption);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDegreeOfParallism</Name>
				<Source><![CDATA[
    private int getDegreeOfParallism(ClassId _classId, str _methodName)
    {
        return CustVendGeneralTopPickingScheduleHelper::getDegreeOfParallismWrapped(_classId, _methodName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBatchContrlInfo</Name>
				<Source><![CDATA[
    private container getBatchContrlInfo(ClassId _classId, str _methodName)
    {
        DictMethod dm = new DictMethod(UtilElementType::ClassInstanceMethod, _classId, _methodName);
        Object attributeAsObject = dm.getAttribute(BatchControlAttribute);
        container result;
        if (attributeAsObject is CustVendGeneralTopPickingBatchControlAttribute)
        {
            CustVendGeneralTopPickingBatchControlAttribute custVendGeneralTopPickingBatchControlAttribute = attributeAsObject as CustVendGeneralTopPickingBatchControlAttribute;
            result = [custVendGeneralTopPickingBatchControlAttribute.parmRetryCnt(), custVendGeneralTopPickingBatchControlAttribute.parmCaption(), custVendGeneralTopPickingBatchControlAttribute.parmParallelCnt()];
        }
        else
        {
            result = [0, "@CashManagement:CustVendGeneralTopPickingTaskRunner", 0];
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInstanceByClassId</Name>
				<Source><![CDATA[
    private Object getInstanceByClassId()
    {
        if (!instance)
        {
            SysDictClass dictClass = new SysDictClass(classId);
            instance = dictClass.makeObject();
        }
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntryPoint</Name>
				<Source><![CDATA[
    private str getEntryPoint()
    {
        SysDictClass dictClass = new SysDictClass(classId);
        return dictClass.callObject(EntryPointNameExecute, this.getInstanceByClassId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJobName</Name>
				<Source><![CDATA[
    private str getJobName()
    {
        if (jobName == '')
        {
            str jobNameFromAttribute = conPeek(this.getBatchPolicyInfo(), IdxOfJobName);
            if (jobNameFromAttribute == '')
            {
                jobNameFromAttribute = "@CashManagement:CustVendGeneralTopPickingRunner";
            }
            jobName = jobNameFromAttribute;
        }
        return jobName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBatchPolicyInfo</Name>
				<Source><![CDATA[
    private container getBatchPolicyInfo()
    {
        DictClass dictClass = new DictClass(classId);
        Object attributeAsObject = dictClass.getAttribute(PolicyClass);
        if (attributeAsObject != null)
        {
            CustVendGeneralTopPickingPolicyAttribute custVendGeneralTopPickingPolicyAttribute = attributeAsObject as CustVendGeneralTopPickingPolicyAttribute;
            return [custVendGeneralTopPickingPolicyAttribute.parmCleanUp(), custVendGeneralTopPickingPolicyAttribute.parmCallbackMethodName(), custVendGeneralTopPickingPolicyAttribute.parmJobName()];
        }
        return [true, '', ''];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>