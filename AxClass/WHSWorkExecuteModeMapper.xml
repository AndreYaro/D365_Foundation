<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteModeMapper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Mapping instance of <c>WHSWorkExecuteMode</c>.
/// </summary>
internal final class WHSWorkExecuteModeMapper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>workActivity2ExecuteMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maps the <c>WHSWorkExecuteMode</c> enum type that matches the <c>WHSWorkActivity</c> enum type.
    /// </summary>
    /// <param name="_activity">
    /// The <c>WHSWorkActivity</c> type.
    /// </param>
    /// <returns>
    /// The <c>WHSWorkExecuteMode</c> enum type.
    /// </returns>
    [Hookable(false)]
    internal static WHSWorkExecuteMode workActivity2ExecuteMode(WHSWorkActivity _activity)
    {
        switch (_activity)
        {
            case WHSWorkActivity::LogOff:
                return WhsWorkExecuteMode::LogOff;
            case WHSWorkActivity::About:
                return WhsWorkExecuteMode::About;
            case WHSWorkActivity::ChangeWarehouse:
                return WhsWorkExecuteMode::ChangeWarehouse;
            case WHSWorkActivity::CompleteMixedLicensePlate:
                return WHSWorkExecuteMode::CompleteMixedLicensePlate;
            case WHSWorkActivity::InquiryLocation:
                return WhsWorkExecuteMode::InquiryLocation;
            case WHSWorkActivity::InquiryLicensePlate:
                return WhsWorkExecuteMode::InquiryLicensePlate;
            case WHSWorkActivity::StartProdOrder:
                return WhsWorkExecuteMode::StartProdOrder;
            case WHSWorkActivity::ProductionScrap:
                return WhsWorkExecuteMode::ProductionScrap;
            case WHSWorkActivity::ProdLastPallet:
                return WhsWorkExecuteMode::ProdLastPallet;
            case WHSWorkActivity::InquiryItem:
                return WhsWorkExecuteMode::InquiryItem;
            case WHSWorkActivity::ReprintLabel:
                return WhsWorkExecuteMode::ReprintLabel;
            case WHSWorkActivity::LicensePlateBuild:
                return WhsWorkExecuteMode::LicensePlateBuild;
            case WHSWorkActivity::LicensePlateBreak:
                return WhsWorkExecuteMode::LicensePlateBreak;
            case WHSWorkActivity::DriverCheckIn:
                return WhsWorkExecuteMode::DriverCheckIn;
            case WHSWorkActivity::DriverCheckOut:
                return WhsWorkExecuteMode::DriverCheckOut;
            case WHSWorkActivity::FlushNumSeqCache:
                return WhsWorkExecuteMode::FlushNumSeqCache;
            case WHSWorkActivity::ChangeBatchDisposition:
                return WhsWorkExecuteMode::ChangeBatchDisposition;
            case WHSWorkActivity::WorkList:
                return WhsWorkExecuteMode::WorkList;
            case WHSWorkActivity::ConsolidateLicensePlates:
                return WhsWorkExecuteMode::ConsolidateLicensePlates;
            case WHSWorkActivity::MaterialConsumption:
                return WhsWorkExecuteMode::MaterialConsumption;
            case WHSWorkActivity::RemoveContainerFromGroup:
                return WhsWorkExecuteMode::RemoveContainerFromGroup;
            case WHSWorkActivity::EmptyKanban:
                return WhsWorkExecuteMode::EmptyKanban;
            case WHSWorkActivity::CancelWork:
                return WhsWorkExecuteMode::CancelWork;
            case WHSWorkActivity::OutboundSorting:
                return WhsWorkExecuteMode::OutboundSorting;
            case WHSWorkActivity::ReprintCartonLabel:
                return WhsWorkExecuteMode::ReprintCartonLabel;
            case WHSWorkActivity::ReprintMultipleCartonLabels:
                return WhsWorkExecuteMode::ReprintMultipleCartonLabels;
            case WHSWorkActivity::AssignToPutawayCluster:
                return WhsWorkExecuteMode::AssignToPutawayCluster;
            case WHSWorkActivity::CreateTransferOrderFromLP:
                return WhsWorkExecuteMode::CreateTranferOrderFromLP;
            case WHSWorkActivity::ContainerClosing:
                return WHSWorkExecuteMode::ContainerClosing;
            case WHSWorkActivity::ContainerCreation:
                return WHSWorkExecuteMode::ContainerCreation;
            case WHSWorkActivity::Packing:
                return WHSWorkExecuteMode::Packing;
            case WHSWorkActivity::GenericDataInquiry:
                return WHSWorkExecuteMode::GenericDataInquiry;
            case WHSWorkActivity::PrintContainerLabel:
                return WHSWorkExecuteMode::PrintContainerLabel;
            case WHSWorkActivity::ContainerDeletion:
                return WHSWorkExecuteMode::ContainerDeletion;
            case WHSWorkActivity::ReceivingCompletedConfirmation:
                return WHSWorkExecuteMode::ReceivingCompletedConfirmation;
            case WHSWorkActivity::OverrideLabelPrinter:
                return WHSWorkExecuteMode::OverrideLabelPrinter;
            default:
                return WHSWorkExecuteModeMapper::workActivity2ExecuteModeBySymbol(_activity);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>workActivity2ExecuteModeBySymbol</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maps the <c>WHSWorkExecuteMode</c> enum type that matches the <c>WHSWorkActivity</c> enum type by symbol.
    /// </summary>
    /// <param name="_activity">
    /// The <c>WHSWorkActivity</c> enum type.
    /// </param>
    /// <returns>
    /// The <c>WHSWorkExecuteMode</c> enum type.
    /// </returns>
    [Hookable(false)]
    internal static WHSWorkExecuteMode workActivity2ExecuteModeBySymbol(WHSWorkActivity _activity)
    {
        str workActivitySymbol = WHSWorkExecuteModeMapper::symbolForActivityProcess(_activity);

        WHSWorkExecuteMode targetExecuteModeValue;
        boolean symbolFound;

        [symbolFound, targetExecuteModeValue] = WHSWorkExecuteModeMapper::findEnumSymbol(enumNum(WHSWorkExecuteMode), workActivitySymbol);

        if (symbolFound)
        {
            return targetExecuteModeValue;
        }

        return str2enum(targetExecuteModeValue, enum2str(_activity));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findEnumSymbol</Name>
				<Source><![CDATA[
    private static container findEnumSymbol(EnumId _enumId, str _symbol)
    {
        int value = symbol2enum(_enumId, _symbol);
        return [value != 255, value];
    }

]]></Source>
			</Method>
			<Method>
				<Name>workCreationProcess2ExecuteMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maps the <c>WHSWorkExecuteMode</c> enum type that matches the <c>WHSWorkCreationProcess</c> enum type.
    /// </summary>
    /// <param name="_workCreationProcess">
    /// The <c>WHSWorkCreationProcess</c> enum type.
    /// </param>
    /// <returns>
    /// The <c>WHSWorkExecuteMode</c> enum type.
    /// </returns>
    [Hookable(false)]
    internal static WHSWorkExecuteMode workCreationProcess2ExecuteMode(WHSWorkCreationProcess _workCreationProcess)
    {
        WHSWorkExecuteMode mode;

        switch (_workCreationProcess)
        {
            case WHSWorkCreationProcess::AdjustmentIn:
                mode = WHSWorkExecuteMode::AdjustmentIn;
                break;

            case WHSWorkCreationProcess::AdjustmentOut:
                mode = WHSWorkExecuteMode::AdjustmentOut;
                break;

            case WHSWorkCreationProcess::Movement:
                mode = WHSWorkExecuteMode::Movement;
                break;

            case WHSWorkCreationProcess::MovementByTemplate:
                mode = WHSWorkExecuteMode::MovementByTemplate;
                break;

            case WHSWorkCreationProcess::Quarantine:
                mode = WHSWorkExecuteMode::Quarantine;
                break;

            case WHSWorkCreationProcess::LicensePlateReceiving:
                mode = WHSWorkExecuteMode::LicensePlateReceiving;
                break;

            case WHSWorkCreationProcess::LicensePlateReceivingAndLocate:
                mode = WHSWorkExecuteMode::LicensePlateReceivingAndLocate;
                break;

            case WHSWorkCreationProcess::PurchaseOrderItemReceiving:
                mode = WHSWorkExecuteMode::PurchaseOrderItemReceiving;
                break;

            case WHSWorkCreationProcess::PurchaseOrderItemReceivingAndLocate:
                mode = WHSWorkExecuteMode::PurchaseOrderItemReceivingAndLocate;
                break;

            case WHSWorkCreationProcess::PurchaseOrderLineReceiving:
                mode = WHSWorkExecuteMode::PurchaseOrderLineReceiving;
                break;

            case WHSWorkCreationProcess::PurchaseOrderLineReceivingAndLocate:
                mode = WHSWorkExecuteMode::PurchaseOrderLineReceivingAndLocate;
                break;

            case WHSWorkCreationProcess::LicensePlateLoading:
                mode = WHSWorkExecuteMode::LicensePlateLoading;
                break;

            case WHSWorkCreationProcess::SpotCycleCounting:
                mode = WHSWorkExecuteMode::SpotCycleCounting;
                break;

            case WHSWorkCreationProcess::ReturnOrder:
                mode = WHSWorkExecuteMode::ReturnOrder;
                break;

            case WHSWorkCreationProcess::ReturnOrderAndLocate:
                mode = WHSWorkExecuteMode::ReturnOrderAndLocate;
                break;

            case WHSWorkCreationProcess::WarehouseTransfer:
                mode = WHSWorkExecuteMode::WarehouseTransfer;
                break;

            case WHSWorkCreationProcess::LoadItemReceiving:
                mode = WHSWorkExecuteMode::LoadItemReceiving;
                break;

            case WHSWorkCreationProcess::LoadItemReceivingAndLocate:
                mode = WHSWorkExecuteMode::LoadItemReceivingAndLocate;
                break;

            case WHSWorkCreationProcess::TransferOrderItemReceiving:
                mode = WHSWorkExecuteMode::TransferOrderItemReceiving;
                break;

            case WHSWorkCreationProcess::TransferOrderItemReceivingAndLocate:
                mode = WHSWorkExecuteMode::TransferOrderItemReceivingAndLocate;
                break;

            case WHSWorkCreationProcess::TransferOrderLineReceiving:
                mode = WHSWorkExecuteMode::TransferOrderLineReceiving;
                break;

            case WHSWorkCreationProcess::TransferOrderLineReceivingAndLocate:
                mode = WHSWorkExecuteMode::TransferOrderLineReceivingAndLocate;
                break;

            case WHSWorkCreationProcess::KanbanPut:
                mode = WHSWorkExecuteMode::KanbanPut;
                break;

            case WHSWorkCreationProcess::KanbanPutAndLocate:
                mode = WHSWorkExecuteMode::KanbanPutAndLocate;
                break;

            case WHSWorkCreationProcess::PackToNestedLPs:
                mode = WHSWorkExecuteMode::PackToNestedLPs;
                break;

            case WHSWorkCreationProcess::ReportAsFinished:
                mode = WHSWorkExecuteMode::ReportAsFinished;
                break;

            case WHSWorkCreationProcess::ReportAsFinishedAndLocate:
                mode = WHSWorkExecuteMode::ReportAsFinishedAndLocate;
                break;

            case WHSWorkCreationProcess::ReportAsFinishedBySerial:
                mode = WHSWorkExecuteMode::ReportAsFinishedBySerial;
                break;

            case WHSWorkCreationProcess::MixedLPReceiving:
                mode = WHSWorkExecuteMode::MixedLPReceiving;
                break;

            case WHSWorkCreationProcess::MixedLPReceivingAndLocate:
                mode = WHSWorkExecuteMode::MixedLPReceivingAndLocate;
                break;

            case WHSWorkCreationProcess::ReturnItemReceiving:
                mode = WHSWorkExecuteMode::ReturnItemReceiving;
                break;

            default:
                mode = WHSWorkExecuteModeMapper::workCreationProcess2ExecuteModeBySymbol(_workCreationProcess);
                break;
        }

        return mode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workCreationProcess2ExecuteModeBySymbol</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maps the <c>WHSWorkExecuteMode</c> enum type that matches the <c>WHSWorkCreationProcess</c> enum type by symbol.
    /// </summary>
    /// <param name="_workCreationProcess">
    /// The <c>WHSWorkCreationProcess</c> enum type.
    /// </param>
    /// <returns>
    /// The <c>WHSWorkExecuteMode</c> enum type.
    /// </returns>
    [Hookable(false)]
    internal static WHSWorkExecuteMode workCreationProcess2ExecuteModeBySymbol(WHSWorkCreationProcess _workCreationProcess)
    {
        str workCreationProcessSymbol = WHSWorkExecuteModeMapper::symbolForCreationProcess(_workCreationProcess);

        WHSWorkExecuteMode targetExecuteModeValue;
        boolean symbolFound;

        [symbolFound, targetExecuteModeValue] = WHSWorkExecuteModeMapper::findEnumSymbol(enumNum(WHSWorkExecuteMode), workCreationProcessSymbol);

        if (symbolFound)
        {
            return targetExecuteModeValue;            
        }

        return str2enum(targetExecuteModeValue, enum2str(_workCreationProcess));
    }

]]></Source>
			</Method>
			<Method>
				<Name>symbolForCreationProcess</Name>
				<Source><![CDATA[
    private static str symbolForCreationProcess(WHSWorkCreationProcess _workCreationProcess)
    {
        return enum2Symbol(enumNum(WHSWorkCreationProcess), enum2int(_workCreationProcess));
    }

]]></Source>
			</Method>
			<Method>
				<Name>symbolForActivityProcess</Name>
				<Source><![CDATA[
    private static str symbolForActivityProcess(WHSWorkActivity _activity)
    {
        return enum2Symbol(enumNum(WHSWorkActivity), enum2int(_activity));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>