<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AdvancedLedgerEntryWFDocument</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>AdvancedLedgerEntryWFDocument</c> class is the workflow document class for the <c>AdvancedLedgerEntryHeader</c> table.
/// </summary>
/// <remarks>
///     This class is required in order to provide a unique workflow document for Advanced Ledger Entry.
/// </remarks>
[WorkflowDocIsQueueEnabledAttribute(true, "@SPS1174")]
public class AdvancedLedgerEntryWFDocument extends WorkflowDocument
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getQueryName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the name of the query to use for the document.
    /// </summary>
    /// <returns>
    ///     The name of the query to use for the document.
    /// </returns>
    public queryName getQueryName()
    {
        return querystr(AdvancedLedgerEntryWFDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalCredit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides sum of the debit amount on workflow condition editor in workflow configuration form.
    /// </summary>
    /// <param name="_companyId">
    /// The company on which the workflow is running.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the table which is associated with the workflow.
    /// </param>
    /// <param name="_recId">
    /// The record ID of the table which is associated with the workflow.
    /// </param>
    /// <returns>
    /// Sum of all debit amount on advanced ledger entry line.
    /// </returns>
    public TotalCreditAmount parmTotalCredit(CompanyId _companyId, tableId _tableId, recId _recId)
    {
        AdvancedLedgerEntryHeader   advancedLedgerEntryHeader;
        AdvancedLedgerEntryLine     advancedLedgerEntryLine;

        advancedLedgerEntryHeader = AdvancedLedgerEntryHeader::find(_recId);

        select sum(AmountCurCredit) from advancedLedgerEntryLine
            where advancedLedgerEntryLine.AdvancedLedgerEntryHeader == advancedLedgerEntryHeader.RecId;

        return advancedLedgerEntryLine.AmountCurCredit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalDebit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides sum of the credit amount on workflow condition editor in workflow configuration form.
    /// </summary>
    /// <param name="_companyId">
    /// The company on which the workflow is running.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the table which is associated with the workflow.
    /// </param>
    /// <param name="_recId">
    /// The record ID of the table which is associated with the workflow.
    /// </param>
    /// <returns>
    /// Sum of all credit amount on advanced ledger entry line.
    /// </returns>
    public TotalDebitAmount parmTotalDebit(CompanyId _companyId, tableId _tableId, recId _recId)
    {
        AdvancedLedgerEntryHeader   advancedLedgerEntryHeader;
        AdvancedLedgerEntryLine     advancedLedgerEntryLine;

        advancedLedgerEntryHeader = AdvancedLedgerEntryHeader::find(_recId);

        select sum(AmountCurDebit) from advancedLedgerEntryLine
            where advancedLedgerEntryLine.AdvancedLedgerEntryHeader == advancedLedgerEntryHeader.RecId;

        return advancedLedgerEntryLine.AmountCurDebit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static AdvancedLedgerEntryWFDocument construct()
    {
        return new AdvancedLedgerEntryWFDocument();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>