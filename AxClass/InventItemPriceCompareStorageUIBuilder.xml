<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventItemPriceCompareStorageUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventItemPriceCompareStorageUIBuilder</c> handles the UI events for creating new item price compare executions.
/// </summary>
public class InventItemPriceCompareStorageUIBuilder extends SysOperationAutomaticUIBuilder
{
    private DialogField     comparePriceTypeField;
    private DialogField     compareToField;
    private DialogField     compareVersionIdField;
    private DialogField     compareToVersionIdField;
    private DialogField     compareDateField;
    private DialogField     compareToDateField;
    private DialogField     compareLevelField;
    private DialogField     calculateInventoryField;
    private CostingVersion  compareCostingVersion;
    private CostingVersion  compareToCostingVersion;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateInventoryModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the UI modified event for the calculate inventory dialog field.
    /// </summary>
    /// <param name="_control">
    /// The control behind the changed dialog field.
    /// </param>
    /// <returns>
    /// true if the control value has been modified; otherwise, false.
    /// </returns>
    public boolean calculateInventoryModified(FormCheckBoxControl _control)
    {
        this.setupFields();
        return _control.modified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>comparePriceTypeModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the UI modified event for the compare price type dialog field.
    /// </summary>
    /// <param name="_control">
    /// The control behind the changed dialog field.
    /// </param>
    /// <returns>
    /// true if the control value has been modified; otherwise, false.
    /// </returns>
    public boolean comparePriceTypeModified(FormComboBoxControl _control)
    {
        this.setupFields();
        return _control.modified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>compareVersionIdModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the UI modified event for the compare version dialog field.
    /// </summary>
    /// <param name="_control">
    /// The control behind the changed dialog field.
    /// </param>
    /// <returns>
    /// true if the control value has been modified; otherwise, false.
    /// </returns>
    public boolean compareVersionIdModified(FormStringControl _control)
    {
        this.findCompareCostingVersion();
        compareDateField.value(compareCostingVersion.DefaultDate);
        this.setupFields();
        return _control.modified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>compareToModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the UI modified event for the compare to dialog field.
    /// </summary>
    /// <param name="_control">
    /// The control behind the changed dialog field.
    /// </param>
    /// <returns>
    /// true if the control value has been modified; otherwise, false.
    /// </returns>
    public boolean compareToModified(FormRadioControl _control)
    {
        this.setupFields();
        return _control.modified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>compareToVersionIdModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the UI modified event for the compare to version dialog field.
    /// </summary>
    /// <param name="_control">
    /// The control behind the changed dialog field.
    /// </param>
    /// <returns>
    /// true if the control value has been modified; otherwise, false.
    /// </returns>
    public boolean compareToVersionIdModified(FormStringControl _control)
    {
        this.findCompareToCostingVersion();
        this.setupFields();
        return _control.modified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCompareCostingVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the costing version for the compare version field.
    /// </summary>
    protected void findCompareCostingVersion()
    {
        compareCostingVersion = CostingVersion::find(compareVersionIdField.value());
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCompareToCostingVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the costing version for the compare to version field.
    /// </summary>
    protected void findCompareToCostingVersion()
    {
        compareToCostingVersion = CostingVersion::find(compareToVersionIdField.value());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public void getFromDialog()
    {
        // Disabled fields are not copied to the contract.
        compareToField.enabled(true);
        compareToDateField.enabled(true);
        comparePriceTypeField.enabled(true);

        super();

        this.setupFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides this method in order to initialize the dialog fields after the fields have been built.
    /// </summary>
    public void postBuild()
    {
        comparePriceTypeField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(InventItemPriceCompareStorageContract, parmComparePriceType));
        compareVersionIdField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(InventItemPriceCompareStorageContract, parmCompareVersionId));
        compareToField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(InventItemPriceCompareStorageContract, parmCompareTo));
        compareToVersionIdField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(InventItemPriceCompareStorageContract, parmCompareToVersionId));
        compareDateField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(InventItemPriceCompareStorageContract, parmCompareDate));
        compareToDateField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(InventItemPriceCompareStorageContract, parmCompareToDate));
        compareLevelField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(InventItemPriceCompareStorageContract, parmCompareLevel));
        calculateInventoryField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(InventItemPriceCompareStorageContract, parmCalculateInventory));

        super();

        this.findCompareCostingVersion();
        this.findCompareToCostingVersion();
        this.setupFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers method override in order to capture dialog events.
    /// </summary>
    public void postRun()
    {
        super();

        dialog.dialogForm().formRun().controlMethodOverload(false);

        this.registerOverrideMethods();
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerOverrideMethods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers override methods for controls in the dialog.
    /// </summary>
    protected void registerOverrideMethods()
    {
        comparePriceTypeField.registerOverrideMethod(methodStr(FormComboBoxControl, modified), methodStr(InventItemPriceCompareStorageUIBuilder, comparePriceTypeModified), this);
        compareToField.registerOverrideMethod(methodStr(FormRadioControl, modified), methodStr(InventItemPriceCompareStorageUIBuilder, compareToModified), this);
        calculateInventoryField.registerOverrideMethod(methodStr(FormCheckBoxControl, modified), methodStr(InventItemPriceCompareStorageUIBuilder, calculateInventoryModified), this);
        compareToVersionIdField.registerOverrideMethod(methodStr(FormStringControl, modified), methodStr(InventItemPriceCompareStorageUIBuilder, compareToVersionIdModified), this);
        compareVersionIdField.registerOverrideMethod(methodStr(FormStringControl, modified), methodStr(InventItemPriceCompareStorageUIBuilder, compareVersionIdModified), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates fields in the dialog based on the current state.
    /// </summary>
    protected void setupFields()
    {
        if (compareCostingVersion.CostingType == CostingVersionCostingType::Standard)
        {
            calculateInventoryField.visible(true);
        }
        else
        {
            calculateInventoryField.visible(false);
            calculateInventoryField.value(NoYes::No);
        }

        if (calculateInventoryField.value() == NoYes::Yes)
        {
            comparePriceTypeField.value(CostingVersionPriceType::Cost);
            comparePriceTypeField.enabled(false);
            compareToField.value(CostingVersionCompareTo::Active);
            compareToField.enabled(false);
            compareToVersionIdField.visible(false);
            compareToDateField.value(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
            compareToDateField.enabled(false);
            compareLevelField.visible(true);
        }
        else
        {
            boolean compareLevel = compareCostingVersion.CostingType == CostingVersionCostingType::Standard &&
                           (compareToCostingVersion.CostingType == CostingVersionCostingType::Standard ||
                            compareToField.value() == CostingVersionCompareTo::Active) &&
                           comparePriceTypeField.value() == CostingVersionPriceType::Cost;
            boolean compareVersion = compareToField.value() == CostingVersionCompareTo::Simulated;

            if (!compareVersion)
            {
                compareToVersionIdField.value('');
            }
            comparePriceTypeField.enabled(true);
            compareToField.enabled(true);
            compareToDateField.enabled(true);
            compareToVersionIdField.visible(compareVersion);
            compareLevelField.visible(compareLevel);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>