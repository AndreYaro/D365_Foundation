<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollCalculatePayStatementEarnings</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     This class is used to calculate the earnings portion of the payment process, creating <c>PayrollPayStatementEarningLine</c> records from the earning statement lines.
///     In addition, the earning line accounting distributions will also be copied and associated to the new pay statement earning lines.
/// </summary>
public class PayrollCalculatePayStatementEarnings
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canLinesBeConsolidated</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks two <c>PayrollEarningStatementLine</c> buffers to figure out if the lines have same field values and thus can be consolidated to generate single <c>PayrollPayStatementEarningLine</c>.
    /// </summary>
    /// <param name="_currentLine">
    ///     The <c>PayrollEarningStatementLine</c> buffer.
    /// </param>
    /// <param name="_lastLine">
    ///     The <c>PayrollEarningStatementLine</c> buffer.
    /// </param>
    /// <returns>
    ///     True, if the lines can be consolidated; otherwise false.
    /// </returns>
    protected static boolean canLinesBeConsolidated(PayrollEarningStatementLine _currentLine, PayrollEarningStatementLine _lastLine)
    {
        boolean consolidateLines = false;

        if (_lastLine.WorkerTaxRegion == _currentLine.WorkerTaxRegion
            && _lastLine.Position == _currentLine.Position
            && _lastLine.EarningCode == _currentLine.EarningCode
            && _lastLine.EarningRate == _currentLine.EarningRate
            && _lastLine.WorkerCompensationBenefit == _currentLine.WorkerCompensationBenefit
            && _lastLine.WorkerGLIBenefit == _currentLine.WorkerGLIBenefit
            && ((_lastLine.AccountingCurrencyAmount >= 0 && _currentLine.AccountingCurrencyAmount >= 0)
            || (_lastLine.AccountingCurrencyAmount < 0 && _currentLine.AccountingCurrencyAmount < 0)))
        {
            consolidateLines = true;
        }

        return consolidateLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPayStatementEarningLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a single <c>PayrollPayStatementEarningLine</c> record against all the <c>PayrollEarningStatementLine</c>'s passed in.
    /// </summary>
    /// <param name="_payStatement">
    ///     The <c>PayrollPayStatement</c> record against which the new line will be created.
    /// </param>
    /// <param name="_earningLines">
    ///     A <c>List</c> containing record IDs of <c>PayrollEarningStatementLine</c> records.
    /// </param>
    /// <param name="_sourceDocumentLines">
    ///     A <c>List</c> containing record IDs of corresponding <c>SourceDocumentLine</c> records.
    /// </param>
    /// <remarks>
    /// The _sourceDocumentLines parameter should be null if no accounting should be done.
    /// </remarks>
    protected static void createPayStatementEarningLine(PayrollPayStatement _payStatement, List _earningLines, List _sourceDocumentLines)
    {
        PayrollPayStatementEarningLine      payrollPayStatementEarningLine;
        PayrollPayStatementEarningLine      fringePayrollPayStatementEarningLine;
        PayrollEarningStatementLine         payrollEarningStatementLine;
        PayrollEarningCode                  payrollEarningCode;
        HcmPositionRecId                    positionRecId;
        PayrollWorkerTaxRegionRecId         workerTaxRegion;
        PayrollEarningCodeRecId             earningCode;
        PayrollEarningRate                  earningRate;
        PayrollPayStatementEarningDate      earningDate;
        ListEnumerator                      earningLinesEnumerator = _earningLines.getEnumerator();
        AccountingDate                      accountingDate;
        PayrollParameters                   payrollParameters = PayrollParameters::find();
        HcmBenefitRecId                     workerCompBenefit,
                                            workerGliBenefit;
        date                                minDateValue = dateNull();

        if (payrollParameters.EarningAccountingDate == PayrollEarningAccountingDate::SummarizedToPayPeriodEndDate)
        {
            // Multiple earning statement lines are being consolidated. Use pay period's end date.
            accountingDate = PayrollPayPeriod::find(_payStatement.PayPeriod).PeriodEndDate;
            earningDate = minDateValue;
        }

        ttsbegin;

        while (earningLinesEnumerator.moveNext())
        {
            payrollEarningStatementLine = PayrollEarningStatementLine::find(earningLinesEnumerator.current());

            if (!positionRecId)
            {
                positionRecId = payrollEarningStatementLine.Position;
                workerTaxRegion = payrollEarningStatementLine.WorkerTaxRegion;
                earningCode = payrollEarningStatementLine.EarningCode;
                earningRate = payrollEarningStatementLine.EarningRate;
                workerCompBenefit = payrollEarningStatementLine.WorkerCompensationBenefit;
                workerGliBenefit = payrollEarningStatementLine.WorkerGLIBenefit;
            }

            payrollPayStatementEarningLine.AccountingCurrencyAmount += payrollEarningStatementLine.AccountingCurrencyAmount;
            payrollPayStatementEarningLine.Quantity += payrollEarningStatementLine.Quantity;
        }

        if (payrollParameters.EarningAccountingDate == PayrollEarningAccountingDate::OriginalEarningDate)
        {
            // We only have a value for earning date if we are not summarizing
            earningDate = payrollEarningStatementLine.EarningDate;
            accountingDate = payrollEarningStatementLine.AccountingDate;
        }

        PayrollCalculatePayStatementEarnings::initPayrollPayStatementEarningLine(payrollPayStatementEarningLine,
                                                                                 _payStatement.RecId,
                                                                                 accountingDate,
                                                                                 earningDate,
                                                                                 positionRecId,
                                                                                 workerTaxRegion,
                                                                                 earningCode,
                                                                                 earningRate,
                                                                                 workerCompBenefit,
                                                                                 workerGliBenefit);

        // Earning lines can be created either with distributions or without for Manual Pay Statements, so if no source document lines are specified then just create the earning line directly
        if (_sourceDocumentLines)
        {
            PayrollCalculatePayStatementEarnings::insertPayStatementEarningLineWithDistrib(_payStatement.RecId, payrollPayStatementEarningLine, _earningLines);
        }
        else
        {
            // accounting was disabled, create the line without a distribution
            if (PayrollPayStatementEarningLine::canCreate(payrollPayStatementEarningLine.EarningCode, _payStatement.RecId))
            {
                payrollPayStatementEarningLine.insert(_earningLines, false);
            }
        }

        payrollEarningCode = PayrollEarningCode::find(payrollEarningStatementLine.EarningCode);
        if ((payrollEarningCode.RecId != 0) && (payrollEarningCode.FringeBenefitType != PayrollFringeBenefitType::NotApplicable))
        {
            PayrollCalculatePayStatementEarnings::initPayrollPayStatementEarningLine(fringePayrollPayStatementEarningLine,
                                                                                     _payStatement.RecId,
                                                                                     accountingDate,
                                                                                     earningDate,
                                                                                     positionRecId,
                                                                                     workerTaxRegion,
                                                                                     earningCode,
                                                                                     earningRate,
                                                                                     workerCompBenefit,
                                                                                     workerGliBenefit);

            fringePayrollPayStatementEarningLine.AccountingCurrencyAmount = -payrollPayStatementEarningLine.AccountingCurrencyAmount;
            fringePayrollPayStatementEarningLine.Quantity = -payrollPayStatementEarningLine.Quantity;
            fringePayrollPayStatementEarningLine.Source = PayrollPayStatementLineSource::FringeBenefitRecover;
            PayrollCalculatePayStatementEarnings::insertPayStatementEarningLineWithDistrib(_payStatement.RecId, fringePayrollPayStatementEarningLine, _earningLines);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPayStatementEarningLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generates the <c>PayrollEarningStatementLine</c> records for the <c>PayrollPayStatement</c> and the positions passed.
    /// </summary>
    /// <param name="_payStatement">
    ///     The <c>PayrollPayStatement</c> record is the source document header record for the generated <c>PayrollEarningStatementLine</c> records.
    /// </param>
    /// <param name="_positions">
    ///     A <c>List</c> containing record IDs of the positions.
    /// </param>
    /// <param name="_doAccounting">
    ///    A Boolean value that indicates whether to create the source document and related accounting distribution; optional.
    /// </param>
    /// <returns>
    ///     Total amount of all the generated lines.
    /// </returns>
    public static PayrollStatementAccountingCurrencyAmount createPayStatementEarningLines(PayrollPayStatement _payStatement, List _positions, boolean _doAccounting = true)
    {
        PayrollParameters           prlPayrollParameters;
        PayrollEarningStatementLine currentEarningStatementLine;
        PayrollEarningStatementLine lastEarningStatementLine;
        List                        earningLines,
                                    sourceDocumentLines;
        Query                       query;
        QueryRun                    queryRun;
        PayrollEarningCode          earningCode;
        PayrollStatementAccountingCurrencyAmount totalAmount;
        PayrollStatementAccountingCurrencyAmount totalLineAmount;

        earningLines = new List(Types::Int64);
        if (_doAccounting)
        {
            sourceDocumentLines = new List(Types::Int64);
        }
        prlPayrollParameters = PayrollParameters::find();

        query = PayrollCalculatePayStatementEarnings::initializeQuery(_payStatement, _positions);
        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            currentEarningStatementLine = queryRun.get(tableNum(PayrollEarningStatementLine));
            earningCode = queryRun.get(tableNum(PayrollEarningCode));

            // Fringe benefits will have a reversing line created for them, we do not want to add their amount to the total amount
            if (earningCode.FringeBenefitType == PayrollFringeBenefitType::NotApplicable)
            {
                totalAmount += currentEarningStatementLine.AccountingCurrencyAmount;
            }

            if (prlPayrollParameters.EarningAccountingDate == PayrollEarningAccountingDate::SummarizedToPayPeriodEndDate)
            {
                if (!PayrollCalculatePayStatementEarnings::canLinesBeConsolidated(currentEarningStatementLine, lastEarningStatementLine)
                    && earningLines.elements() != 0)
                {
                    PayrollCalculatePayStatementEarnings::createPayStatementEarningLine(_payStatement, earningLines, sourceDocumentLines);
                    totalLineAmount = 0;
                    earningLines = new List(Types::Int64);
                    if (_doAccounting)
                    {
                        sourceDocumentLines = new List(Types::Int64);
                    }
                }

                totalLineAmount += currentEarningStatementLine.AccountingCurrencyAmount;
                earningLines.addEnd(currentEarningStatementLine.RecId);
                if (_doAccounting)
                {
                    sourceDocumentLines.addEnd(currentEarningStatementLine.SourceDocumentLine);
                }

                lastEarningStatementLine.data(currentEarningStatementLine);
            }
            else
            {
                earningLines = new List(Types::Int64);
                earningLines.addEnd(currentEarningStatementLine.RecId);
                if (_doAccounting)
                {
                    sourceDocumentLines = new List(Types::Int64);
                    sourceDocumentLines.addEnd(currentEarningStatementLine.SourceDocumentLine);
                }
                PayrollCalculatePayStatementEarnings::createPayStatementEarningLine(_payStatement, earningLines, sourceDocumentLines);
            }
        }

        // Write the summary line if summarizing, but only do so if there are earning statement lines for this pay statement
        if (earningLines.elements() != 0 && prlPayrollParameters.EarningAccountingDate == PayrollEarningAccountingDate::SummarizedToPayPeriodEndDate)
        {
            PayrollCalculatePayStatementEarnings::createPayStatementEarningLine(_payStatement, earningLines, sourceDocumentLines);
        }

        return totalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEarningTotalQueryByDateRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the base earnings amount for all payroll categories.
    /// </summary>
    /// <param name="_startDate">
    /// The start date value of the date range.
    /// </param>
    /// <param name="_endDate">
    /// The end date value of the date range.
    /// </param>
    /// <param name="_workerRecId">
    /// The <c>HcmWorker</c> record ID value to filter on.
    /// </param>
    /// <returns>
    /// A query that represents the sum of earning lines based on the input parameters.
    /// </returns>
    public static Query getEarningTotalQueryByDateRange(TransDate _startDate,
        TransDate _endDate,
		HcmWorkerRecId _workerRecId = 0)
    {
        Query earningTotalQuery = new Query();
        QueryBuildDataSource payStatementEarningLineDataSource,
            payStatementDataSource;

        payStatementEarningLineDataSource = earningTotalQuery.addDataSource(tableNum(PayrollPayStatementEarningLine));
        payStatementEarningLineDataSource.addSelectionField(fieldNum(PayrollPayStatementEarningLine, AccountingCurrencyAmount), SelectionField::Sum);
        payStatementEarningLineDataSource.addRange(fieldNum(PayrollPayStatementEarningLine, IsMarkedForRemoval)).value(queryValue(NoYes::No));

        payStatementDataSource = payStatementEarningLineDataSource.addDataSource(tableNum(PayrollPayStatement));
        payStatementDataSource.fetchMode(QueryFetchMode::One2One);
        payStatementDataSource.joinMode(JoinMode::ExistsJoin);
        payStatementDataSource.addLink(fieldNum(PayrollPayStatementEarningLine, PayStatement), fieldNum(PayrollPayStatement, RecId));

        payStatementDataSource.addRange(fieldNum(PayrollPayStatement, Worker)).value(queryValue(_workerRecId));
        payStatementDataSource.addRange(fieldNum(PayrollPayStatement, PaymentDate)).value(SysQuery::range(_startDate, _endDate));

        return earningTotalQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the query object that will be used to fetch the <c>PayrollEarningStatementLine</c> records for processing.
    /// </summary>
    /// <param name="_payStatement">
    ///     The <c>PayrollPayStatement</c> record being processed.
    /// </param>
    /// <param name="_positions">
    ///     A <c>List</c> containing the record Ids of <c>HcmPosition</c> records.
    /// </param>
    /// <returns>
    ///     The query used to fetch the <c>PayrollEarningStatementLine</c> records.
    /// </returns>
    protected static Query initializeQuery(PayrollPayStatement _payStatement, List _positions)
    {
        Query                   query;
        QueryBuildDataSource    qbdsPayrollEarningStatement;
        QueryBuildDataSource    qbdsPayrollEarningStatementLine;
        QueryBuildDataSource    qbdsPayrollEarningCode;
        QueryBuildRange         qbrPaymentStatus;
        QueryBuildRange         qbrEarningDate;
        QueryBuildRange         qbrWorker;
        Enumerator              positionsEnumerator;
        PeriodEnd               periodEndDate;

        query = new Query();

        // PayrollEarningStatementLine table
        qbdsPayrollEarningStatementLine = query.addDataSource(tableNum(PayrollEarningStatementLine));

        qbdsPayrollEarningStatementLine.addSelectionField(fieldNum(PayrollEarningStatementLine, AccountingCurrencyAmount));
        qbdsPayrollEarningStatementLine.addSelectionField(fieldNum(PayrollEarningStatementLine, AccountingDistributionTemplate));
        qbdsPayrollEarningStatementLine.addSelectionField(fieldNum(PayrollEarningStatementLine, Quantity));
        qbdsPayrollEarningStatementLine.addSelectionField(fieldNum(PayrollEarningStatementLine, WorkerTaxRegion));
        qbdsPayrollEarningStatementLine.addSelectionField(fieldNum(PayrollEarningStatementLine, Position));
        qbdsPayrollEarningStatementLine.addSelectionField(fieldNum(PayrollEarningStatementLine, EarningCode));
        qbdsPayrollEarningStatementLine.addSelectionField(fieldNum(PayrollEarningStatementLine, EarningRate));
        qbdsPayrollEarningStatementLine.addSelectionField(fieldNum(PayrollEarningStatementLine, WorkerCompensationBenefit));
        qbdsPayrollEarningStatementLine.addSelectionField(fieldNum(PayrollEarningStatementLine, WorkerGLIBenefit));
        qbdsPayrollEarningStatementLine.addSelectionField(fieldNum(PayrollEarningStatementLine, SourceDocumentLine));

        qbrPaymentStatus = qbdsPayrollEarningStatementLine.addRange(fieldNum(PayrollEarningStatementLine, PaymentStatus));
        qbrPaymentStatus.value(queryValue(PayrollPaymentProcessingStatus::Released));

        qbrEarningDate = qbdsPayrollEarningStatementLine.addRange(fieldNum(PayrollEarningStatementLine, EarningDate));
        periodEndDate = PayrollPayPeriod::find(_payStatement.PayPeriod).PeriodEndDate;
        // AX does not support the <= operator for dates, so add 1 day to get the equivalent range
        qbrEarningDate.value('< ' + queryValue((periodEndDate + 1)));

        positionsEnumerator = _positions.getEnumerator();
        while (positionsEnumerator.moveNext())
        {
            qbdsPayrollEarningStatementLine.addRange(fieldNum(PayrollEarningStatementLine, Position)).value(queryValue(positionsEnumerator.current()));
        }

        // PayrollEarningStatement table
        qbdsPayrollEarningStatement = qbdsPayrollEarningStatementLine.addDataSource(tableNum(PayrollEarningStatement));
        qbdsPayrollEarningStatement.joinMode(JoinMode::ExistsJoin);
        qbdsPayrollEarningStatement.fetchMode(QueryFetchMode::One2One);
        qbdsPayrollEarningStatement.relations(true);

        qbrWorker = qbdsPayrollEarningStatement.addRange(fieldNum(PayrollEarningStatement, Worker));
        qbrWorker.value(queryValue(_payStatement.Worker));

        // PayrollEarningCode table
        qbdsPayrollEarningCode = qbdsPayrollEarningStatementLine.addDataSource(tableNum(PayrollEarningCode));
        qbdsPayrollEarningCode.fetchMode(QueryFetchMode::One2One);
        qbdsPayrollEarningCode.joinMode(JoinMode::InnerJoin);
        qbdsPayrollEarningCode.relations(true);
        qbdsPayrollEarningCode.addSelectionField(fieldNum(PayrollEarningCode, FringeBenefitType));

        switch (_payStatement.PaymentType)
        {
            case PayrollPaymentType::Primary:
                qbdsPayrollEarningCode.addRange(fieldNum(PayrollEarningCode, IncludeInPaymentType)).value(queryValue(PayrollIncludeInPaymentType::Primary));
                qbdsPayrollEarningCode.addRange(fieldNum(PayrollEarningCode, IncludeInPaymentType)).value(queryValue(PayrollIncludeInPaymentType::PrimaryAndAdditional));
                qbdsPayrollEarningStatementLine.addRange(fieldNum(PayrollEarningStatementLine, IsManual)).value(queryValue(NoYes::No));
                break;

            case PayrollPaymentType::Additional:
                qbdsPayrollEarningCode.addRange(fieldNum(PayrollEarningCode, IncludeInPaymentType)).value(queryValue(PayrollIncludeInPaymentType::Additional));
                qbdsPayrollEarningCode.addRange(fieldNum(PayrollEarningCode, IncludeInPaymentType)).value(queryValue(PayrollIncludeInPaymentType::PrimaryAndAdditional));
                qbdsPayrollEarningStatementLine.addRange(fieldNum(PayrollEarningStatementLine, IsManual)).value(queryValue(NoYes::No));
                break;

            case PayrollPaymentType::GrossUp:
                qbdsPayrollEarningCode.addRange(fieldNum(PayrollEarningCode, IncludeInPaymentType)).value(queryValue(PayrollIncludeInPaymentType::GrossUp));
                // no range is added on EarningStatementLine.IsManual field since Gross Up earning codes cannot be on Manual ES lines
                break;

            case PayrollPaymentType::Manual:
                qbdsPayrollEarningStatementLine.addRange(fieldNum(PayrollEarningStatementLine, IsManual)).value(queryValue(NoYes::Yes));
                break;
        }

        // Sort order
        qbdsPayrollEarningStatementLine.addSortField(fieldNum(PayrollEarningStatementLine, Position));
        qbdsPayrollEarningStatementLine.addSortField(fieldNum(PayrollEarningStatementLine, WorkerTaxRegion));
        qbdsPayrollEarningStatementLine.addSortField(fieldNum(PayrollEarningStatementLine, EarningCode));
        qbdsPayrollEarningStatementLine.addSortField(fieldNum(PayrollEarningStatementLine, EarningRate));
        qbdsPayrollEarningStatementLine.addSortField(fieldNum(PayrollEarningStatementLine, WorkerCompensationBenefit));
        qbdsPayrollEarningStatementLine.addSortField(fieldNum(PayrollEarningStatementLine, WorkerGLIBenefit));
        qbdsPayrollEarningStatementLine.addSortField(fieldNum(PayrollEarningStatementLine, AccountingCurrencyAmount), SortOrder::Descending);
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPayrollPayStatementEarningLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>PayrollPayStatementEarningLine</c> buffer fields to the corresponding values passed in as parameters.
    /// </summary>
    /// <param name="_payrollPayStatementEarningLine">
    /// The <c>PayrollPayStatementEarningLine</c> buffer to initialize.
    /// </param>
    /// <param name="_payStatementRecId">
    /// The record id for the <c>PayrollPayStatement</c> table.
    /// </param>
    /// <param name="_accountingDate">
    /// The <c>AccountingDate</c>.
    /// </param>
    /// <param name="_earningDate">
    /// The earning date value of the earning line.
    /// </param>
    /// <param name="_positionRecId">
    /// The record id for the <c>HcmPosition</c> table.
    /// </param>
    /// <param name="_workerTaxRegion">
    /// The record if for the <c>PayrollWorkerTaxRegion</c> table.
    /// </param>
    /// <param name="_earningCode">
    /// The record id for the <c>PayrollEarningCode</c> table.
    /// </param>
    /// <param name="_earningRate">
    /// The <c>PayrollEarningRate</c>.
    /// </param>
    /// <param name="_workerCompBenefit">
    /// The worker compensation benefit value of the earning line.
    /// </param>
    /// <param name="_workerGliBenefit">
    /// The worker general liability insurance benefit value of the earning line.
    /// </param>
    public static void initPayrollPayStatementEarningLine(
        PayrollPayStatementEarningLine _payrollPayStatementEarningLine,
        PayrollPayStatementRecId _payStatementRecId,
        AccountingDate _accountingDate,
        PayrollPayStatementEarningDate _earningDate,
        HcmPositionRecId _positionRecId,
        PayrollWorkerTaxRegionRecId _workerTaxRegion,
        PayrollEarningCodeRecId _earningCode,
        PayrollEarningRate _earningRate,
        HcmBenefitRecId _workerCompBenefit,
        HcmBenefitRecId _workerGliBenefit
    )
    {
        _payrollPayStatementEarningLine.PayStatement = _payStatementRecId;
        _payrollPayStatementEarningLine.AccountingDate = _accountingDate;
        _payrollPayStatementEarningLine.Position = _positionRecId;
        _payrollPayStatementEarningLine.WorkerTaxRegion = _workerTaxRegion;
        _payrollPayStatementEarningLine.EarningCode = _earningCode;
        _payrollPayStatementEarningLine.EarningRate = _earningRate;
        _payrollPayStatementEarningLine.WorkerCompensationBenefit = _workerCompBenefit;
        _payrollPayStatementEarningLine.WorkerGeneralLiabilityInsuranceBenefit = _workerGliBenefit;
        _payrollPayStatementEarningLine.IsEmployer = false;
        _payrollPayStatementEarningLine.IsPayStatementLineOverridden = false;
        _payrollPayStatementEarningLine.IsMarkedForRemoval = false;
        _payrollPayStatementEarningLine.IsLineLocked = false;
        _payrollPayStatementEarningLine.Source = PayrollPayStatementLineSource::EarningStatement;
        _payrollPayStatementEarningLine.EarningDate = _earningDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPayStatementEarningLineWithDistrib</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts a <c>PayrollPayStatementEarningLine</c> record and creates the corresponding accounting and project distribution lines from the related <c>PayrollPayStatementEarningLine</c> record.
    /// </summary>
    /// <param name="_payStatementRecId">
    ///     Record ID of the <c>PayrollPayStatement</c> with which <c>PayrollPayStatementEarningLine</c> line will be associated.
    /// </param>
    /// <param name="_payrollPayStatementEarningLine">
    ///     The <c>PayrollPayStatementEarningLine</c> buffer that will be inserted in the database.
    /// </param>
    /// <param name="_earningLines">
    ///     A <c>List</c> containing record Ids of earning statement lines that will be linked to the generated pay statement earning line.
    /// </param>
    public static void insertPayStatementEarningLineWithDistrib(
        PayrollPayStatementRecId _payStatementRecId,
        PayrollPayStatementEarningLine _payrollPayStatementEarningLine,
        List _earningLines
    )
    {
        // Recalc logic: only allow the creation of an earning line if it hasn't already been overridden
        if (!PayrollPayStatementEarningLine::canCreate(_payrollPayStatementEarningLine.EarningCode, _payStatementRecId))
        {
            return;
        }

        _payrollPayStatementEarningLine.AccountingCurrencyAmount = CurrencyExchange::round(_payrollPayStatementEarningLine.AccountingCurrencyAmount, PayrollSetup::currencyCode());

        _payrollPayStatementEarningLine.insert(_earningLines);

        // The insert call updates the record so we need to grab the latest to ensure the source document line field is populated
        _payrollPayStatementEarningLine = PayrollPayStatementEarningLine::find(_payrollPayStatementEarningLine.RecId);

        _payrollPayStatementEarningLine.createProjAccountDistForEarnings();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>