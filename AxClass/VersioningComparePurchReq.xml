<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VersioningComparePurchReq</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>VersionComparePurchReqTable</c> class extends the generic functionality of the
///    <c>VersioningCompare</c> class and implements the analysis for a Purchase Requisition.
/// </summary>
/// <remarks>
///    The main contribution of this class is to define the specific data structure to use to save a
///    Purchase Requisition.
/// </remarks>
class VersioningComparePurchReq extends VersioningCompare
{
    recId       purchReqId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCaption</Name>
				<Source><![CDATA[
        public str getCaption()
    {
        return "@SYS315022";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCallerRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Extracts the <c>PurchReqTable</c> value from the calling record and initializes the comparison
    ///    based on the records.
    /// </summary>
    /// <param name="_changeVersion">
    ///    A record from a table that is mapped by the <c>VersioningVersionMap</c> database map.
    /// </param>
    /// <param name="_alternateNewVersion">
    ///    A second record from a table that is mapped by the <c>VersioningVersionMap</c> database map.
    /// </param>
    /// <remarks>
    ///    If the record originates from a <c>FormDataSource</c> object, the current selection will be used.If
    ///    the first argument does not contain a multi-selection and the second optional parameter is not
    ///    specified, the comparison will be against the current version.
    /// </remarks>
    protected void initCallerRecord(VersioningVersionMap _changeVersion, VersioningVersionMap _alternateNewVersion = null)
    {
        PurchReqTableVersion versionOld;

        super(_changeVersion, _alternateNewVersion);

        versionOld  = changeVersionOld;

        purchReqId     = versionOld.PurchReqTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>VersioningTmpTrans</c> temporary table with information that is specific to a
    ///    Purchase Requisition.
    /// </summary>
    public void loadData()
    {
        this.loadPurchReqTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadLineQuestionnaireAnswers</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Analyzes the <c>KMVirtualNetworkAnswerLine</c> record and saves the result in the
    ///    <c>VersioningTmpTrans</c> temporary table.
    /// </summary>
    /// <param name="_purchReqLineQuestionnaireResponse">
    ///    The record ID response from the purchase requisition line questionnaire.
    /// </param>
    /// <param name="_purchReqLineQuestionnaireNodeRecId">
    ///    The <c>RecId</c> value of the record in the temporary table that holds the
    ///    <c>KMVirtualNetworkAnswerLine</c> record.
    /// </param>
    protected void loadLineQuestionnaireAnswers(PurchReqLineQuestionnaireResponse _purchReqLineQuestionnaireResponse, recId _purchReqLineQuestionnaireNodeRecId)
    {
        KMVirtualNetworkAnswerLine                      kmVirtualNetworkAnswerLineOld;
        PurchReqQuestionnaireAnswerLineHistory          purchReqQuestionnaireAnswerLineHistoryOld;
        PurchReqQuestionnaireAnswerLineHistory          purchReqQuestionnaireAnswerLineHistoryNew;

        kmVirtualNetworkAnswerLineOld.clear();

        while select validTimeState(newDateTime) purchReqQuestionnaireAnswerLineHistoryNew
            where purchReqQuestionnaireAnswerLineHistoryNew.KmVirtualNetworkAnswerTableId == _purchReqLineQuestionnaireResponse.kmVirtualNetworkAnswerTableId
        {
             this.insertVersioningTmpTrans(purchReqQuestionnaireAnswerLineHistoryNew, false, true, purchReqQuestionnaireAnswerLineHistoryOld, purchReqQuestionnaireAnswerLineHistoryNew, _purchReqLineQuestionnaireNodeRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPurchReqBusJustification</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Analyzes the <c>PurchReqBusJustification</c> record and saves the result in the
    ///    <c>VersioningTmpTrans</c> temporary table.
    /// </summary>
    /// <param name="_purchReqTableRecId">
    ///    The record ID of the purchase requisition to use to get the business justification record.
    /// </param>
    /// <param name="_purchReqTableNodeRecId">
    ///    The <c>RecId</c> field of the record in the temporary table that holds the
    ///    <c>PurchReqBusJustification</c> record.
    /// </param>
    protected void loadPurchReqBusJustification(recId _purchReqTableRecId, recId _purchReqTableNodeRecId)
    {
        PurchReqBusJustification                purchReqBusJustification;
        PurchReqBusJustificationHistory         purchReqBusJustificationOld;
        PurchReqBusJustificationHistory         purchReqBusJustificationNew;
        boolean                                 foundOld;
        boolean                                 foundNew;

        while select purchReqBusJustification
            where purchReqBusJustification.RefRecId     == _purchReqTableRecId
               && purchReqBusJustification.RefTableId   == tablenum(PurchReqTable)
        {
            purchReqBusJustificationOld = PurchReqBusJustificationHistory::findByBusinessJustification(purchReqBusJustification.RecId, oldDateTime);
            foundOld                    = (purchReqBusJustificationOld.RecId != 0);

            if (newDateTime)
            {
                purchReqBusJustificationNew = PurchReqBusJustificationHistory::findByBusinessJustification(purchReqBusJustification.RecId, newDateTime);
                foundNew                    = (purchReqBusJustificationNew.RecId != 0);
            }
            else
            {
                purchReqBusJustificationNew.initFromPurchReqBusJustification(purchReqBusJustification);
                purchReqBusJustificationNew.PurchReqBusJustification = purchReqBusJustification.RecId;
                foundNew  = true;
            }
            this.insertVersioningTmpTrans(purchReqBusJustification, foundOld, foundNew, purchReqBusJustificationOld, purchReqBusJustificationNew, _purchReqTableNodeRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPurchReqLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Analyzes the <c>PurchReqLine</c> record that is related to the specified <c>PurchReqTable</c>
    ///    record and then saves the result in the <c>VersioningTmpTrans</c> temporary table.
    /// </summary>
    /// <param name="_purchReqTableRecId">
    ///    The <c>PurchReqTable</c> record that owns the <c>PurchReqLine</c> transactions.
    /// </param>
    /// <param name="_purchReqTableNodeRecId">
    ///    The record ID field of the record in the temporary table that holds the <c>PurchReqTable</c> record.
    /// </param>
    /// <remarks>
    ///    This method also analyzes the differences in the following tables:
    ///    <list type="bullet">
    ///       <item>
    ///          <description>
    ///             The <c>PurchReqLineBusJustification</c> table.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             The <c>PurchReqLineVendorProposal</c> table.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             The <c>PurchReqLineVendorSuggestion</c> table.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             The <c>PurchReqLineQuestionnaireResponse</c> table.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             The <c>SourceDocumentLineDistribution</c> table.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             The <c>Markup</c> table.
    ///          </description>
    ///       </item>
    ///    </list>
    /// </remarks>
    protected void loadPurchReqLine(PurchReqTable _purchReqTableRecId, recId _purchReqTableNodeRecId)
    {
        PurchReqLine                            purchReqLine;
        PurchReqLineHistory                     purchLineOld;
        PurchReqLineHistory                     purchLineNew;
        recId                                   purchReqLineNodeRecId;
        boolean                                 foundOld;
        boolean                                 foundNew;

        while select purchReqLine
            order by LineNum
            where purchReqLine.PurchReqTable == _purchReqTableRecId.RecId
        {
            purchLineOld    = PurchReqLineHistory::findByPurchReqLine(purchReqLine.RecId, oldDateTime);
            foundOld        = (purchLineOld.RecId != 0);

            if (newDateTime)
            {
                purchLineNew    = PurchReqLineHistory::findByPurchReqLine(purchReqLine.RecId, newDateTime);
                foundNew        = (purchLineNew.RecId != 0);
            }
            else
            {
                purchLineNew.initFromPurchReqLine(purchReqLine);
                purchLineNew.PurchReqLine = purchReqLine.RecId;
                foundNew = true;
            }

            purchReqLineNodeRecId = this.insertVersioningTmpTrans(purchReqLine, foundOld, foundNew, purchLineOld, purchLineNew, _purchReqTableNodeRecId);

            this.loadPurchReqLineBusJustification( purchReqLine.RecId, purchReqLineNodeRecId);
            this.loadPurchReqLineVendorProposal(purchReqLine.RecId, purchReqLineNodeRecId);
            this.loadPurchReqLineVendorSuggestion(purchReqLine.RecId, purchReqLineNodeRecId);
            this.loadPurchReqLineQuestionnaireResponse(purchReqLine.RecId, purchReqLineNodeRecId);
            this.loadSourceDocumentLineDistribution(purchReqLine.SourceDocumentLine, purchReqLineNodeRecId);
            this.loadMarkup(purchReqLine, purchReqLineNodeRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPurchReqLineBusJustification</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Analyzes the <c>PurchReqBusJustification</c> record and then saves the result in the
    ///    <c>VersioningTmpTrans</c> temporary table.
    /// </summary>
    /// <param name="_purchReqLineRecId">
    ///    The record ID of the purchase requisition line to use to get the business justification.
    /// </param>
    /// <param name="_purchReqLineNodeRecId">
    ///    The record ID field of the record in the temporary table that holds the
    ///    <c>PurchReqBusJustification</c> record.
    /// </param>
    protected void loadPurchReqLineBusJustification(recId _purchReqLineRecId, recId _purchReqLineNodeRecId)
    {
        PurchReqBusJustification                purchReqBusJustification;
        PurchReqBusJustificationHistory         purchReqBusJustificationOld;
        PurchReqBusJustificationHistory         purchReqBusJustificationNew;
        boolean                                 foundOld;
        boolean                                 foundNew;

        while select purchReqBusJustification
            where purchReqBusJustification.RefRecId == _purchReqLineRecId
                && purchReqBusJustification.RefTableId == tablenum(PurchReqLine)
        {
            purchReqBusJustificationOld = PurchReqBusJustificationHistory::findByBusinessJustification(purchReqBusJustification.RecId, oldDateTime);
            foundOld = (purchReqBusJustificationOld.RecId != 0);

            if (newDateTime)
            {
                purchReqBusJustificationNew = PurchReqBusJustificationHistory::findByBusinessJustification(purchReqBusJustification.RecId, newDateTime);
                foundNew = (purchReqBusJustificationNew.RecId != 0);
            }
            else
            {
                purchReqBusJustificationNew.initFromPurchReqBusJustification(purchReqBusJustification);
                purchReqBusJustificationNew.PurchReqBusJustification = purchReqBusJustification.RecId;
                foundNew = true;
            }
            this.insertVersioningTmpTrans(purchReqBusJustification, foundOld, foundNew, purchReqBusJustificationOld, purchReqBusJustificationNew, _purchReqLineNodeRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPurchReqLineQuestionnaireResponse</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Analyzes the <c>PurchReqLineQuestionnaireResponse</c> record and then saves the result in the
    ///    <c>VersioningTmpTrans</c> temporary table.
    /// </summary>
    /// <param name="_purchReqLineRecId">
    ///    The record ID of the purchase requisition line to use to get the corresponding
    ///    <c>PurchReqLineQuestionnaireResponse</c> record.
    /// </param>
    /// <param name="_purchReqLineNodeRecId">
    ///    The record ID field of the record in the temporary table that holds the
    ///    <c>PurchReqLineQuestionnaireResponse</c> record.
    /// </param>
    protected void loadPurchReqLineQuestionnaireResponse(recId _purchReqLineRecId, recId _purchReqLineNodeRecId)
    {
        PurchReqLineQuestionnaireResponse               purchReqLineQuestionnaireResponse;
        PurchReqLineQuestionnaireResponseHistory        purchReqLineQuestionnaireResponseOld;
        PurchReqLineQuestionnaireResponseHistory        purchReqLineQuestionnaireResponseNew;
        recId                                           purchReqLineQuestionnaireNodeRecId;
        boolean                                         foundOld;
        boolean                                         foundNew;

        while select purchReqLineQuestionnaireResponse
            where purchReqLineQuestionnaireResponse.PurchReqLine == _purchReqLineRecId
        {
            purchReqLineQuestionnaireResponseOld = PurchReqLineQuestionnaireResponseHistory::findByPurchReqLineQuestionnaireResponse(purchReqLineQuestionnaireResponse.RecId, oldDateTime);
            foundOld = (purchReqLineQuestionnaireResponseOld.RecId != 0);

            if (newDateTime)
            {
                purchReqLineQuestionnaireResponseNew = PurchReqLineQuestionnaireResponseHistory::findByPurchReqLineQuestionnaireResponse(purchReqLineQuestionnaireResponse.RecId, newDateTime);
                foundNew = (purchReqLineQuestionnaireResponseNew.RecId != 0);
            }
            else
            {
                purchReqLineQuestionnaireResponseNew.initFromLineQuestionnaireResponse(purchReqLineQuestionnaireResponse);
                purchReqLineQuestionnaireResponseNew.PurchReqLineQuestionnaireResponse = purchReqLineQuestionnaireResponseNew.RecId;
                foundNew = true;
            }

            if (purchReqLineQuestionnaireResponseOld.RecId != purchReqLineQuestionnaireResponseNew.RecId)
            {
                purchReqLineQuestionnaireNodeRecId = this.insertVersioningTmpTrans(purchReqLineQuestionnaireResponse, foundOld, foundNew, purchReqLineQuestionnaireResponseOld, purchReqLineQuestionnaireResponseNew, _purchReqLineNodeRecId);
                this.loadLineQuestionnaireAnswers(purchReqLineQuestionnaireResponse, purchReqLineQuestionnaireNodeRecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPurchReqLineVendorProposal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Analyzes the <c>PurchReqLineVendorProposal</c> record and saves the result in the
    ///    <c>VersioningTmpTrans</c> temporary table.
    /// </summary>
    /// <param name="_purchReqLineRecId">
    ///    The record ID of the purchase requisition line to use to get the corresponding
    ///    <c>PurchReqLineVendorProposal</c> record
    /// </param>
    /// <param name="_purchReqLineNodeRecId">
    ///    The record ID of the record in the temporary table that holds the <c>PurchReqLineVendorProposal</c>
    ///    record.
    /// </param>
    protected void loadPurchReqLineVendorProposal(recId _purchReqLineRecId, recId _purchReqLineNodeRecId)
    {
        PurchReqLineVendorProposal              purchReqLineVendorProposal;
        PurchReqLineVendorProposalHistory       purchReqLineVendorProposalOld;
        PurchReqLineVendorProposalHistory       purchReqLineVendorProposalNew;

        boolean                                 foundOld;
        boolean                                 foundNew;

        while select purchReqLineVendorProposal
            where purchReqLineVendorProposal.PurchReqLine == _purchReqLineRecId
        {
            purchReqLineVendorProposalOld = PurchReqLineVendorProposalHistory::findByPurchReqLineVendorProposal(purchReqLineVendorProposal.RecId, oldDateTime);
            foundOld = (purchReqLineVendorProposalOld.RecId != 0);

            if (newDateTime)
            {
                purchReqLineVendorProposalNew = PurchReqLineVendorProposalHistory::findByPurchReqLineVendorProposal(purchReqLineVendorProposal.RecId, newDateTime);
                foundNew = (purchReqLineVendorProposalNew.RecId != 0);
            }
            else
            {
                purchReqLineVendorProposalNew.initFromPurchReqLineVendorProposal(purchReqLineVendorProposal);
                purchReqLineVendorProposalNew.PurchReqLineVendorProposal = purchReqLineVendorProposal.RecId;
                foundNew = true;
            }
            this.insertVersioningTmpTrans(purchReqLineVendorProposal, foundOld, foundNew, purchReqLineVendorProposalOld, purchReqLineVendorProposalNew, _purchReqLineNodeRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPurchReqLineVendorSuggestion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Analyzes the <c>PurchReqLineVendorSuggestion</c> record and saves the result in the
    ///    <c>VersioningTmpTrans</c> temporary table.
    /// </summary>
    /// <param name="_purchReqLineRecId">
    ///    The record ID of the purchase requisition line to use to get the corresponding
    ///    <c>PurchReqLineVendorProposal</c> record.
    /// </param>
    /// <param name="_purchReqLineNodeRecId">
    ///    The record ID of the record in the temporary table that holds the
    ///    <c>PurchReqLineVendorSuggestion</c> record.
    /// </param>
    protected void loadPurchReqLineVendorSuggestion(recId _purchReqLineRecId, recId _purchReqLineNodeRecId)
    {
        PurchReqLineVendorSuggestion                purchReqLineVendorSuggestion;
        PurchReqLineVendorSuggestionHistory         purchReqLineVendorSuggestionOld;
        PurchReqLineVendorSuggestionHistory         purchReqLineVendorSuggestionNew;

        boolean                                     foundOld;
        boolean                                     foundNew;

        while select purchReqLineVendorSuggestion
            where purchReqLineVendorSuggestion.PurchReqLine == _purchReqLineRecId
        {
            purchReqLineVendorSuggestionOld = PurchReqLineVendorSuggestionHistory::findByPurchReqLineVendorSuggestion(purchReqLineVendorSuggestion.RecId, oldDateTime);
            foundOld = (purchReqLineVendorSuggestionOld.RecId != 0);

            if (newDateTime)
            {
                purchReqLineVendorSuggestionNew = PurchReqLineVendorSuggestionHistory::findByPurchReqLineVendorSuggestion(purchReqLineVendorSuggestion.RecId, newDateTime);
                foundNew = (purchReqLineVendorSuggestionNew.RecId != 0);
            }
            else
            {
                purchReqLineVendorSuggestionNew.initFromPurchReqLineVendorSuggestion(purchReqLineVendorSuggestion);
                purchReqLineVendorSuggestionNew.PurchReqLineVendorSuggestion = purchReqLineVendorSuggestion.RecId;
                foundNew = true;
            }
            this.insertVersioningTmpTrans(purchReqLineVendorSuggestion, foundOld, foundNew, purchReqLineVendorSuggestionOld, purchReqLineVendorSuggestionNew, _purchReqLineNodeRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPurchReqTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Analyzes the <c>PurchReqTable</c> record and saves the result in the <c>VersioningTmpTrans</c>
    /// temporary table.
    /// </summary>
    /// <remarks>
    ///  This method also analyzes the differences in the following tables:
    ///  <list type="bullet">
    ///   <item>
    ///    <description>
    ///    The <c>SourceDocumentDistribution</c> table.
    ///    </description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    The <c>PurchReqLine</c> table.
    ///    </description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    The <c>PurchReqBusJustification</c> table.
    ///    </description>
    ///   </item>
    ///  </list>
    /// </remarks>
    protected void loadPurchReqTable()
    {
        PurchReqTable                           purchReqTable;
        PurchReqTableHistory                    purchTableOld;
        PurchReqTableHistory                    purchTableNew;
        recId                                   purchReqTableNodeRecId;

        boolean                                 foundOld;
        boolean                                 foundNew;

        purchReqTable   = PurchReqTable::find(purchReqId);

        purchTableOld   = PurchReqTableHistory::findByPurchReqTable(purchReqTable.RecId, oldDateTime);
        foundOld        = (purchTableOld.RecId != 0);

        if (newDateTime)
        {
            purchTableNew   = PurchReqTableHistory::findByPurchReqTable(purchReqTable.RecId, newDateTime);
            foundNew        = (purchTableOld.RecId != 0);
        }
        else
        {
            purchTableNew.initFromPurchReqTable(purchReqTable);
            purchTableNew.PurchReqTable = purchReqTable.RecId;
            foundNew = (purchReqTable.RecId != 0);
        }
        purchReqTableNodeRecId = this.insertVersioningTmpTrans(purchReqTable, foundOld, foundNew, purchTableOld, purchTableNew, 0);

        this.loadPurchReqBusJustification(purchReqTable.RecId, purchReqTableNodeRecId);
        this.loadPurchReqLine(purchReqTable, purchReqTableNodeRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadSourceDocumentLineDistribution</Name>
				<Source><![CDATA[
    /// <summary>
    /// Analyzes the <c>AccountingDistribution</c> records that are related to the specified record and
    /// saves the result in the temporary <c>VersioningTmpTrans</c> table.
    /// </summary>
    /// <param name="_sourceDocumentLineRecId">
    /// The record that owns the <c>AccountingDistribution</c> table transactions.
    /// </param>
    /// <param name="_parentNodeRecId">
    /// The <c>RecId</c> field of the record in the temporary table that holds the parent to the
    /// <c>AccountingDistribution</c> records.
    /// </param>
    protected void loadSourceDocumentLineDistribution(RefRecId _sourceDocumentLineRecId, recId _parentNodeRecId)
    {
        AccountingEvent             accountingEventNew;
        AccountingDistribution      accountingDistribution;
        boolean                     foundOld;

        // find the appropriate accounting events for given SourceDocumentLine at oldDateTime and newDateTime

        if (newDateTime)
        {
            select firstonly RecId from accountingEventNew
                order by accountingEventNew.EventDateTime desc
                where accountingEventNew.EventDateTime <= newDateTime
            exists join accountingDistribution
                where accountingDistribution.AccountingEvent    == accountingEventNew.RecId
                   && accountingDistribution.SourceDocumentLine == _sourceDocumentLineRecId;
        }
        if (accountingEventNew.RecId)
        {
            while select accountingDistribution
                where accountingDistribution.SourceDocumentLine == _sourceDocumentLineRecId
                   && accountingDistribution.AccountingEvent    == accountingEventNew.RecId
                   && accountingDistribution.ReferenceRole      != AccountingDistributionReferenceRole::Reversing
            {
                this.insertVersioningTmpTrans(accountingDistribution, foundOld, true, accountingDistribution, accountingDistribution, _parentNodeRecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeEmptyTreeNodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes all nodes that do not have a change in them or in their child nodes.
    /// </summary>
    /// <returns>
    /// true if the removal is complete; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method can be used only on the <c>FormTreeControl</c> class.
    /// </remarks>
    public boolean removeEmptyTreeNodes()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeNodeName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the name of the tree node that represents the specified record.
    /// </summary>
    /// <param name="_common">
    ///    The record to use to name the node in the tree.
    /// </param>
    /// <returns>
    ///    The name of the tree node.
    /// </returns>
    /// <remarks>
    ///    This method is used to generate the name to display in the tree structure. If it is not specified,
    ///    the user interface name of the records that have no key information is used.
    /// </remarks>
    protected VersioningRecordTooltip treeNodeName(Common _common)
    {
        PurchReqTable               tmpPurchReqTable;
        PurchReqLine                tmpPurchReqLine;
        PurchReqBusJustification    tmpPurchReqBusJustification;

        str name = tableid2pname(_common.TableId);

        switch (_common.TableId)
        {
            case tablenum(PurchReqTable):
                tmpPurchReqTable = _common;
                name += ': '+ tmpPurchReqTable.PurchReqId + ' - ' + tmpPurchReqTable.PurchReqName;
                break;

            case tablenum(PurchReqLine):
                tmpPurchReqLine = _common;
                if (tmpPurchReqLine.ItemId)
                {
                    name = "@SYS133035" + ' ' + num2str(tmpPurchReqLine.LineNum,0,0,1,0) + ': '+ tmpPurchReqLine.ItemId;
                }
                else
                {
                    name = "@SYS133035" + ' ' + num2str(tmpPurchReqLine.LineNum,0,0,1,0) + ': '+ EcoResCategory::find(tmpPurchReqLine.ProcurementCategory).Name;
                }
                break;

            case tablenum(PurchReqBusJustification):
                tmpPurchReqBusJustification = _common;
                name = "@SYS107376";
                break;

            default:
                break;
        }
        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static VersioningComparePurchReq construct()
    {
        return new VersioningComparePurchReq();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>