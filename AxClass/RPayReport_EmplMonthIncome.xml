<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayReport_EmplMonthIncome</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The payroll employee month income report.
/// </summary>
final class RPayReport_EmplMonthIncome extends XMLExcelReport_Standard_RU implements BatchRetryable
{
    DialogField         fieldStartPeriod, fieldEndPeriod, fieldEmplId;
    ReportPeriod_RU     startPeriod, endPeriod, curPeriod;
    RHRMEmplId          emplId;
    RPayCounterUnit     fund;

    RPayAmount          totalSum, curAmount;
    RHRMEmplTable       emplTable;

    #define.companyName('CompanyName')
    #define.startPeriod('StartPeriod')
    #define.endPeriod('EndPeriod')
    #define.personShortName('PersonShortName')
    #define.PayPeriod('PayPeriod')
    #define.Amount('Amount')
    #define.totalSum('TotalSum')
    #define.totalSumInWords('TotalSumInWords')
    #define.avgSum('AvgSum')
    #define.avgSumInWords('AvgSumInWords')
    #define.directorName('DirectorName')
    #define.accountantName('AccountantName')
    #define.PageNum('PageNum')

    #define.width (4)

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        startPeriod,
        endPeriod,
        emplId
    #endmacro

    #LOCALMACRO.dateToStr
        date2str(%1, 123, 1, 2, 2, 2, 4, DateFlags::None)
        #UNDEF.ARG
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTotals</Name>
				<Source><![CDATA[
    protected void addTotals()
    {
        totalSum += curAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTotalsOnPage</Name>
				<Source><![CDATA[
    protected void addTotalsOnPage()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        return max(document.getNamedRangeHeightWrapped(#PayPeriod, mthname(mthofyr(curPeriod)) + ' ' + int2str(year(curPeriod))),
                   document.getNamedRangeHeightWrapped(#Amount, strFmt('%1', curAmount)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndPrepareParameters</Name>
				<Source><![CDATA[
    private void checkAndPrepareParameters()
    {
        setprefix("@RUP461");

        fund = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayEmplMonthIncome, 1, "@RUP2170", "@RUP1944");
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTotals</Name>
				<Source><![CDATA[
    protected void clearTotals()
    {
        totalSum = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTotalsOnPage</Name>
				<Source><![CDATA[
    protected void clearTotalsOnPage()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        converter       = RNumDateInWordConverter::construct(infolog.language());
        curWorkSheetNum = 1;
        widthCols       = #width;
        numOfLines      = this.getNumOfLines();

        this.createStandardReport();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Dialog  dialog = super();

        fieldStartPeriod    = dialog.addField(extendedTypeStr(ReportPeriod_RU), "@GLS106049");
        fieldEndPeriod      = dialog.addField(extendedTypeStr(ReportPeriod_RU), "@GLS106050");
        fieldEmplId         = dialog.addField(extendedTypeStr(RHRMEmplId));

        fieldStartPeriod.value(startPeriod ? startPeriod : RPayParameters::payPeriod());
        fieldEndPeriod.value(endPeriod ? endPeriod : RPayParameters::payPeriod());
        fieldEmplId.value(emplId);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchHeader</Name>
				<Source><![CDATA[
    protected boolean fetchHeader()
    {
        if (queryRunHeader.next())
        {
            emplTable = queryRunHeader.get(tableNum(RHRMEmplTable));

            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchLines</Name>
				<Source><![CDATA[
    protected boolean fetchLines()
    {
        if (curPeriod < endPeriod)
        {
            curPeriod = endmth(nextMth(curPeriod));
            curAmount = RPayTrans::calculateFund(fund, curPeriod, emplId);
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Name of the new file
    /// </summary>
    /// <returns>
    /// Name of the new file
    /// </returns>
    protected Filename fileName()
    {
        return #blank;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    protected Filename fileNamePostfix()
    {
        return strFmt("@RUP461" + " %1 %2", emplId, startPeriod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    protected void fillBody()
    {
        this.insertValueToSection(#PayPeriod, curPeriod);
        this.insertValueToSection(#Amount, curAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageFooter</Name>
				<Source><![CDATA[
    protected void fillPageFooter()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageHeader</Name>
				<Source><![CDATA[
    protected void fillPageHeader()
    {
        this.insertValueToSection(#PageNum, this.pageNum());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportFooter</Name>
				<Source><![CDATA[
    protected void fillReportFooter()
    {
        RPayAmount avgSum = (lineNo ? decround(totalSum / lineNo, 2) : 0);

        this.insertValueToSection(#totalSum, totalSum);
        this.insertValueToSection(#totalSumInWords, converter.numeralsToCurrency(totalSum));
        this.insertValueToSection(#avgSum, avgSum);
        this.insertValueToSection(#avgSumInWords, converter.numeralsToCurrency(avgSum));

        this.insertValueToSection(#directorName, OfficialsTable_RU::nameDirector());
        this.insertValueToSection(#accountantName, OfficialsTable_RU::nameAccountant());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportHeader</Name>
				<Source><![CDATA[
    protected void fillReportHeader()
    {
        ReportPeriod_RU startPeriodLoc = dateStartMth(startPeriod);

        this.insertValueToSection(#companyName, CompanyInfo::find().Name);
        this.insertValueToSection(#startPeriod, #dateToStr(startPeriodLoc));
        this.insertValueToSection(#endPeriod, #dateToStr(endPeriod));
        this.insertValueToSection(#personShortName, emplTable.name());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        startPeriod    = fieldStartPeriod.value();
        endPeriod      = fieldEndPeriod.value();
        emplId         = fieldEmplId.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumOfLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of lines.
    /// </summary>
    /// <returns>
    /// The number of lines.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Counter getNumOfLines()
    {
        ReportPeriod_RU payPeriodLoc;
        int totalPeriods;

        for (payPeriodLoc = startPeriod; payPeriodLoc <= endPeriod; payPeriodLoc = endmth(nextMth(payPeriodLoc)))
        {
            totalPeriods ++;
        }

        return totalPeriods;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRunHeader</Name>
				<Source><![CDATA[
    protected void initQueryRunHeader()
    {
        Query query = new Query();
        QueryBuildDataSource qbds;

        qbds = query.addDataSource(tableNum(RHRMEMplTable));
        qbds.addRange(fieldNum(RHRMEMplTable, EmployeeId)).value(emplId);

        queryRunHeader = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRunLines</Name>
				<Source><![CDATA[
    protected void initQueryRunLines()
    {
        curPeriod = endmth(prevMth(startPeriod));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSkipSections</Name>
				<Source><![CDATA[
    protected void initSkipSections()
    {
        skipSections += pageFooterName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>pageNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// returns string which contains data about page number
    /// </summary>
    /// <returns>
    /// String which contains data about page number
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected PageNum_RU pageNum()
    {
        if (pageNum > 1)
        {
            return strFmt(SysLabel::labelId2String(literalStr("@SYS24160")), pageNum);
        }

        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(RPayReport_EmplMonthIncome);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    #define.CellsBody(2)
    #define.CellsOther(11)
    protected Counter totalCells()
    {
        Counter totalPeriods;

        totalPeriods = this.getNumOfLines();

        return totalPeriods * #CellsBody + #CellsOther;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer version = conpeek(packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                return true;

            default:
                return false;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the report parameters.
    /// </summary>
    /// <param name="calledFrom">
    /// The called from object.
    /// </param>
    /// <returns>
    /// True if validation passed without errors.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (! startPeriod)
        {
            ret = checkFailed("@RUP881");
        }

        if (! endPeriod)
        {
            ret = checkFailed("@RUP882");
        }

        if (startPeriod > endPeriod)
        {
            ret = checkFailed("@RUP883");
        }

        if (! emplId)
        {
            ret = checkFailed("@GLS106048");
        }

        if (!RHRMEmplTable::exist(emplId))
        {
            ret = checkFailed(strFmt("@RUP298", emplId));
        }

        startPeriod = endmth(startPeriod);
        endPeriod   = endmth(endPeriod);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayReport_EmplMonthIncome construct()
    {
        return new RPayReport_EmplMonthIncome();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@RUP461";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        RPayReport_EmplMonthIncome emplMonthIncome = RPayReport_EmplMonthIncome::construct();

        emplMonthIncome.checkAndPrepareParameters();

        if (emplMonthIncome.prompt())
        {
            emplMonthIncome.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>